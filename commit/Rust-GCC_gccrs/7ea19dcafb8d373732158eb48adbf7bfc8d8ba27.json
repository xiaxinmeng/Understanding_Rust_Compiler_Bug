{"sha": "7ea19dcafb8d373732158eb48adbf7bfc8d8ba27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VhMTlkY2FmYjhkMzczNzMyMTU4ZWI0OGFkYmY3YmZjOGQ4YmEyNw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2020-11-12T07:20:43Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2020-11-12T07:32:59Z"}, "message": "IBM Z: Rename mode attr tointvec to TOINTVEC\n\nJust a preparation to add a lower-case tointvec.\n\ngcc/ChangeLog:\n\n\t* config/s390/vector.md: Rename tointvec to TOINTVEC.\n\t* config/s390/vx-builtins.md: Likewise.", "tree": {"sha": "bab930959078b8275ced111a6e288e744198290f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bab930959078b8275ced111a6e288e744198290f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ea19dcafb8d373732158eb48adbf7bfc8d8ba27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ea19dcafb8d373732158eb48adbf7bfc8d8ba27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ea19dcafb8d373732158eb48adbf7bfc8d8ba27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ea19dcafb8d373732158eb48adbf7bfc8d8ba27/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87b7d45e358e4df93b6a93b2e7a55b123ea76f5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87b7d45e358e4df93b6a93b2e7a55b123ea76f5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87b7d45e358e4df93b6a93b2e7a55b123ea76f5d"}], "stats": {"total": 192, "additions": 96, "deletions": 96}, "files": [{"sha": "58b8999f2db783f60369e5dbc4fbbae0ea67c40c", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 71, "deletions": 71, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea19dcafb8d373732158eb48adbf7bfc8d8ba27/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea19dcafb8d373732158eb48adbf7bfc8d8ba27/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=7ea19dcafb8d373732158eb48adbf7bfc8d8ba27", "patch": "@@ -137,7 +137,7 @@\n \n ; Resulting mode of a vector comparison.  For floating point modes an\n ; integer vector mode with the same element size is picked.\n-(define_mode_attr tointvec [(V1QI \"V1QI\") (V2QI \"V2QI\") (V4QI \"V4QI\") (V8QI \"V8QI\") (V16QI \"V16QI\")\n+(define_mode_attr TOINTVEC [(V1QI \"V1QI\") (V2QI \"V2QI\") (V4QI \"V4QI\") (V8QI \"V8QI\") (V16QI \"V16QI\")\n \t\t\t    (V1HI \"V1HI\") (V2HI \"V2HI\") (V4HI \"V4HI\") (V8HI \"V8HI\")\n \t\t\t    (V1SI \"V1SI\") (V2SI \"V2SI\") (V4SI \"V4SI\")\n \t\t\t    (V1DI \"V1DI\") (V2DI \"V2DI\")\n@@ -697,12 +697,12 @@\n (define_expand \"vcond_mask_<mode><mode>\"\n   [(set (match_operand:V 0 \"register_operand\" \"\")\n \t(if_then_else:V\n-\t (eq (match_operand:<tointvec> 3 \"register_operand\" \"\")\n+\t (eq (match_operand:<TOINTVEC> 3 \"register_operand\" \"\")\n \t     (match_dup 4))\n \t (match_operand:V 2 \"register_operand\" \"\")\n \t (match_operand:V 1 \"register_operand\" \"\")))]\n   \"TARGET_VX\"\n-  \"operands[4] = CONST0_RTX (<tointvec>mode);\")\n+  \"operands[4] = CONST0_RTX (<TOINTVEC>mode);\")\n \n \n ; We only have HW support for byte vectors.  The middle-end is\n@@ -1586,88 +1586,88 @@\n \n ; vfcesb, vfcedb, wfcexb: non-signaling \"==\" comparison (a == b)\n (define_insn \"*vec_cmpeq<mode>_quiet_nocc\"\n-  [(set (match_operand:<tointvec>         0 \"register_operand\" \"=v\")\n-\t(eq:<tointvec> (match_operand:VFT 1 \"register_operand\" \"v\")\n+  [(set (match_operand:<TOINTVEC>         0 \"register_operand\" \"=v\")\n+\t(eq:<TOINTVEC> (match_operand:VFT 1 \"register_operand\" \"v\")\n \t\t       (match_operand:VFT 2 \"register_operand\" \"v\")))]\n   \"TARGET_VX\"\n   \"<vw>fce<sdx>b\\t%v0,%v1,%v2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n ; vfchsb, vfchdb, wfchxb: non-signaling > comparison (!(b u>= a))\n (define_insn \"vec_cmpgt<mode>_quiet_nocc\"\n-  [(set (match_operand:<tointvec>            0 \"register_operand\" \"=v\")\n-\t(not:<tointvec>\n-\t (unge:<tointvec> (match_operand:VFT 2 \"register_operand\" \"v\")\n+  [(set (match_operand:<TOINTVEC>            0 \"register_operand\" \"=v\")\n+\t(not:<TOINTVEC>\n+\t (unge:<TOINTVEC> (match_operand:VFT 2 \"register_operand\" \"v\")\n \t\t\t  (match_operand:VFT 1 \"register_operand\" \"v\"))))]\n   \"TARGET_VX\"\n   \"<vw>fch<sdx>b\\t%v0,%v1,%v2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n (define_expand \"vec_cmplt<mode>_quiet_nocc\"\n-  [(set (match_operand:<tointvec>            0 \"register_operand\" \"=v\")\n-\t(not:<tointvec>\n-\t (unge:<tointvec> (match_operand:VFT 1 \"register_operand\" \"v\")\n+  [(set (match_operand:<TOINTVEC>            0 \"register_operand\" \"=v\")\n+\t(not:<TOINTVEC>\n+\t (unge:<TOINTVEC> (match_operand:VFT 1 \"register_operand\" \"v\")\n \t\t\t  (match_operand:VFT 2 \"register_operand\" \"v\"))))]\n   \"TARGET_VX\")\n \n ; vfchesb, vfchedb, wfchexb: non-signaling >= comparison (!(a u< b))\n (define_insn \"vec_cmpge<mode>_quiet_nocc\"\n-  [(set (match_operand:<tointvec>            0 \"register_operand\" \"=v\")\n-\t(not:<tointvec>\n-\t (unlt:<tointvec> (match_operand:VFT 1 \"register_operand\" \"v\")\n+  [(set (match_operand:<TOINTVEC>            0 \"register_operand\" \"=v\")\n+\t(not:<TOINTVEC>\n+\t (unlt:<TOINTVEC> (match_operand:VFT 1 \"register_operand\" \"v\")\n \t\t\t  (match_operand:VFT 2 \"register_operand\" \"v\"))))]\n   \"TARGET_VX\"\n   \"<vw>fche<sdx>b\\t%v0,%v1,%v2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n (define_expand \"vec_cmple<mode>_quiet_nocc\"\n-  [(set (match_operand:<tointvec>            0 \"register_operand\" \"=v\")\n-\t(not:<tointvec>\n-\t (unlt:<tointvec> (match_operand:VFT 2 \"register_operand\" \"v\")\n+  [(set (match_operand:<TOINTVEC>            0 \"register_operand\" \"=v\")\n+\t(not:<TOINTVEC>\n+\t (unlt:<TOINTVEC> (match_operand:VFT 2 \"register_operand\" \"v\")\n \t\t\t  (match_operand:VFT 1 \"register_operand\" \"v\"))))]\n   \"TARGET_VX\")\n \n ; vfkesb, vfkedb, wfkexb: signaling == comparison ((a >= b) & (b >= a))\n (define_insn \"*vec_cmpeq<mode>_signaling_nocc\"\n-  [(set (match_operand:<tointvec>          0 \"register_operand\" \"=v\")\n-\t(and:<tointvec>\n-\t (ge:<tointvec> (match_operand:VFT 1 \"register_operand\" \"v\")\n+  [(set (match_operand:<TOINTVEC>          0 \"register_operand\" \"=v\")\n+\t(and:<TOINTVEC>\n+\t (ge:<TOINTVEC> (match_operand:VFT 1 \"register_operand\" \"v\")\n \t\t\t(match_operand:VFT 2 \"register_operand\" \"v\"))\n-\t (ge:<tointvec> (match_dup         2)\n+\t (ge:<TOINTVEC> (match_dup         2)\n \t\t\t(match_dup         1))))]\n   \"TARGET_VXE\"\n   \"<vw>fke<sdx>b\\t%v0,%v1,%v2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n ; vfkhsb, vfkhdb, wfkhxb: signaling > comparison (a > b)\n (define_insn \"*vec_cmpgt<mode>_signaling_nocc\"\n-  [(set (match_operand:<tointvec>         0 \"register_operand\" \"=v\")\n-\t(gt:<tointvec> (match_operand:VFT 1 \"register_operand\" \"v\")\n+  [(set (match_operand:<TOINTVEC>         0 \"register_operand\" \"=v\")\n+\t(gt:<TOINTVEC> (match_operand:VFT 1 \"register_operand\" \"v\")\n \t\t       (match_operand:VFT 2 \"register_operand\" \"v\")))]\n   \"TARGET_VXE\"\n   \"<vw>fkh<sdx>b\\t%v0,%v1,%v2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n (define_insn \"*vec_cmpgt<mode>_signaling_finite_nocc\"\n-  [(set (match_operand:<tointvec>         0 \"register_operand\" \"=v\")\n-\t(gt:<tointvec> (match_operand:VFT 1 \"register_operand\" \"v\")\n+  [(set (match_operand:<TOINTVEC>         0 \"register_operand\" \"=v\")\n+\t(gt:<TOINTVEC> (match_operand:VFT 1 \"register_operand\" \"v\")\n \t\t       (match_operand:VFT 2 \"register_operand\" \"v\")))]\n   \"TARGET_NONSIGNALING_VECTOR_COMPARE_OK\"\n   \"<vw>fch<sdx>b\\t%v0,%v1,%v2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n ; vfkhesb, vfkhedb, wfkhexb: signaling >= comparison (a >= b)\n (define_insn \"*vec_cmpge<mode>_signaling_nocc\"\n-  [(set (match_operand:<tointvec>         0 \"register_operand\" \"=v\")\n-\t(ge:<tointvec> (match_operand:VFT 1 \"register_operand\" \"v\")\n+  [(set (match_operand:<TOINTVEC>         0 \"register_operand\" \"=v\")\n+\t(ge:<TOINTVEC> (match_operand:VFT 1 \"register_operand\" \"v\")\n \t\t       (match_operand:VFT 2 \"register_operand\" \"v\")))]\n   \"TARGET_VXE\"\n   \"<vw>fkhe<sdx>b\\t%v0,%v1,%v2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n (define_insn \"*vec_cmpge<mode>_signaling_finite_nocc\"\n-  [(set (match_operand:<tointvec>         0 \"register_operand\" \"=v\")\n-\t(ge:<tointvec> (match_operand:VFT 1 \"register_operand\" \"v\")\n+  [(set (match_operand:<TOINTVEC>         0 \"register_operand\" \"=v\")\n+\t(ge:<TOINTVEC> (match_operand:VFT 1 \"register_operand\" \"v\")\n \t\t       (match_operand:VFT 2 \"register_operand\" \"v\")))]\n   \"TARGET_NONSIGNALING_VECTOR_COMPARE_OK\"\n   \"<vw>fche<sdx>b\\t%v0,%v1,%v2\"\n@@ -1679,84 +1679,84 @@\n \n ; UNGT a u> b -> !!(b u< a)\n (define_expand \"vec_cmpungt<mode>\"\n-  [(set (match_operand:<tointvec>            0 \"register_operand\" \"=v\")\n-\t(not:<tointvec>\n-\t (unlt:<tointvec> (match_operand:VFT 2 \"register_operand\" \"v\")\n+  [(set (match_operand:<TOINTVEC>            0 \"register_operand\" \"=v\")\n+\t(not:<TOINTVEC>\n+\t (unlt:<TOINTVEC> (match_operand:VFT 2 \"register_operand\" \"v\")\n \t\t\t  (match_operand:VFT 1 \"register_operand\" \"v\"))))\n    (set (match_dup                           0)\n-\t(not:<tointvec> (match_dup           0)))]\n+\t(not:<TOINTVEC> (match_dup           0)))]\n   \"TARGET_VX\")\n \n ; UNGE a u>= b -> !!(a u>= b)\n (define_expand \"vec_cmpunge<mode>\"\n-  [(set (match_operand:<tointvec>            0 \"register_operand\" \"=v\")\n-\t(not:<tointvec>\n-\t (unge:<tointvec> (match_operand:VFT 1 \"register_operand\" \"v\")\n+  [(set (match_operand:<TOINTVEC>            0 \"register_operand\" \"=v\")\n+\t(not:<TOINTVEC>\n+\t (unge:<TOINTVEC> (match_operand:VFT 1 \"register_operand\" \"v\")\n \t\t\t  (match_operand:VFT 2 \"register_operand\" \"v\"))))\n    (set (match_dup                           0)\n-\t(not:<tointvec> (match_dup           0)))]\n+\t(not:<TOINTVEC> (match_dup           0)))]\n   \"TARGET_VX\")\n \n ; UNEQ a u== b -> !(!(a u>= b) | !(b u>= a))\n (define_expand \"vec_cmpuneq<mode>\"\n-  [(set (match_operand:<tointvec>            0 \"register_operand\" \"=v\")\n-\t(not:<tointvec>\n-\t (unge:<tointvec> (match_operand:VFT 1 \"register_operand\"  \"v\")\n+  [(set (match_operand:<TOINTVEC>            0 \"register_operand\" \"=v\")\n+\t(not:<TOINTVEC>\n+\t (unge:<TOINTVEC> (match_operand:VFT 1 \"register_operand\"  \"v\")\n \t\t          (match_operand:VFT 2 \"register_operand\"  \"v\"))))\n    (set (match_dup                           3)\n-\t(not:<tointvec>\n-\t (unge:<tointvec> (match_dup         2)\n+\t(not:<TOINTVEC>\n+\t (unge:<TOINTVEC> (match_dup         2)\n \t                  (match_dup         1))))\n    (set (match_dup                           0)\n-\t(ior:<tointvec> (match_dup           0)\n+\t(ior:<TOINTVEC> (match_dup           0)\n \t\t\t(match_dup           3)))\n    (set (match_dup                           0)\n-\t(not:<tointvec> (match_dup           0)))]\n+\t(not:<TOINTVEC> (match_dup           0)))]\n   \"TARGET_VX\"\n {\n-  operands[3] = gen_reg_rtx (<tointvec>mode);\n+  operands[3] = gen_reg_rtx (<TOINTVEC>mode);\n })\n \n ; LTGT a <> b -> a > b | b > a\n (define_expand \"vec_cmpltgt<mode>\"\n-  [(set (match_operand:<tointvec>         0 \"register_operand\" \"=v\")\n-\t(gt:<tointvec> (match_operand:VFT 1 \"register_operand\"  \"v\")\n+  [(set (match_operand:<TOINTVEC>         0 \"register_operand\" \"=v\")\n+\t(gt:<TOINTVEC> (match_operand:VFT 1 \"register_operand\"  \"v\")\n \t\t    (match_operand:VFT 2 \"register_operand\"  \"v\")))\n-   (set (match_dup 3) (gt:<tointvec> (match_dup 2) (match_dup 1)))\n-   (set (match_dup 0) (ior:<tointvec> (match_dup 0) (match_dup 3)))]\n+   (set (match_dup 3) (gt:<TOINTVEC> (match_dup 2) (match_dup 1)))\n+   (set (match_dup 0) (ior:<TOINTVEC> (match_dup 0) (match_dup 3)))]\n   \"TARGET_VXE\"\n {\n-  operands[3] = gen_reg_rtx (<tointvec>mode);\n+  operands[3] = gen_reg_rtx (<TOINTVEC>mode);\n })\n \n ; ORDERED (a, b): !(a u< b) | !(a u>= b)\n (define_expand \"vec_cmpordered<mode>\"\n-  [(set (match_operand:<tointvec>            0 \"register_operand\" \"=v\")\n-\t(not:<tointvec>\n-\t (unlt:<tointvec> (match_operand:VFT 1 \"register_operand\" \"v\")\n+  [(set (match_operand:<TOINTVEC>            0 \"register_operand\" \"=v\")\n+\t(not:<TOINTVEC>\n+\t (unlt:<TOINTVEC> (match_operand:VFT 1 \"register_operand\" \"v\")\n \t\t          (match_operand:VFT 2 \"register_operand\" \"v\"))))\n    (set (match_dup                           3)\n-\t(not:<tointvec>\n-\t (unge:<tointvec> (match_dup         1)\n+\t(not:<TOINTVEC>\n+\t (unge:<TOINTVEC> (match_dup         1)\n \t\t\t  (match_dup         2))))\n    (set (match_dup                           0)\n-\t(ior:<tointvec> (match_dup           0)\n+\t(ior:<TOINTVEC> (match_dup           0)\n \t\t\t(match_dup           3)))]\n   \"TARGET_VX\"\n {\n-  operands[3] = gen_reg_rtx (<tointvec>mode);\n+  operands[3] = gen_reg_rtx (<TOINTVEC>mode);\n })\n \n ; UNORDERED (a, b): !ORDERED (a, b)\n (define_expand \"vec_cmpunordered<mode>\"\n-  [(match_operand:<tointvec> 0 \"register_operand\" \"=v\")\n+  [(match_operand:<TOINTVEC> 0 \"register_operand\" \"=v\")\n    (match_operand:VFT        1 \"register_operand\" \"v\")\n    (match_operand:VFT        2 \"register_operand\" \"v\")]\n   \"TARGET_VX\"\n {\n   emit_insn (gen_vec_cmpordered<mode> (operands[0], operands[1], operands[2]));\n   emit_insn (gen_rtx_SET (operands[0],\n-\t     gen_rtx_NOT (<tointvec>mode, operands[0])));\n+\t     gen_rtx_NOT (<TOINTVEC>mode, operands[0])));\n   DONE;\n })\n \n@@ -1835,7 +1835,7 @@\n (define_split\n   [(set (match_operand:V 0 \"register_operand\" \"\")\n \t(if_then_else:V\n-\t (eq (match_operand:<tointvec> 3 \"register_operand\" \"\")\n+\t (eq (match_operand:<TOINTVEC> 3 \"register_operand\" \"\")\n \t     (match_operand:V 4 \"const0_operand\" \"\"))\n \t (match_operand:V 1 \"const0_operand\" \"\")\n \t (match_operand:V 2 \"all_ones_operand\" \"\")))]\n@@ -1849,7 +1849,7 @@\n (define_split\n   [(set (match_operand:V 0 \"register_operand\" \"\")\n \t(if_then_else:V\n-\t (eq (match_operand:<tointvec> 3 \"register_operand\" \"\")\n+\t (eq (match_operand:<TOINTVEC> 3 \"register_operand\" \"\")\n \t     (match_operand:V 4 \"const0_operand\" \"\"))\n \t (match_operand:V 1 \"all_ones_operand\" \"\")\n \t (match_operand:V 2 \"const0_operand\" \"\")))]\n@@ -1863,7 +1863,7 @@\n (define_split\n   [(set (match_operand:V 0 \"register_operand\" \"\")\n \t(if_then_else:V\n-\t (ne (match_operand:<tointvec> 3 \"register_operand\" \"\")\n+\t (ne (match_operand:<TOINTVEC> 3 \"register_operand\" \"\")\n \t     (match_operand:V 4 \"const0_operand\" \"\"))\n \t (match_operand:V 1 \"all_ones_operand\" \"\")\n \t (match_operand:V 2 \"const0_operand\" \"\")))]\n@@ -1877,7 +1877,7 @@\n (define_split\n   [(set (match_operand:V 0 \"register_operand\" \"\")\n \t(if_then_else:V\n-\t (ne (match_operand:<tointvec> 3 \"register_operand\" \"\")\n+\t (ne (match_operand:<TOINTVEC> 3 \"register_operand\" \"\")\n \t     (match_operand:V 4 \"const0_operand\" \"\"))\n \t (match_operand:V 1 \"const0_operand\" \"\")\n \t (match_operand:V 2 \"all_ones_operand\" \"\")))]\n@@ -1891,8 +1891,8 @@\n (define_insn \"*vec_sel0<mode>\"\n   [(set (match_operand:V 0 \"register_operand\" \"=v\")\n \t(if_then_else:V\n-\t (eq (match_operand:<tointvec> 3 \"register_operand\" \"v\")\n-\t     (match_operand:<tointvec> 4 \"const0_operand\" \"\"))\n+\t (eq (match_operand:<TOINTVEC> 3 \"register_operand\" \"v\")\n+\t     (match_operand:<TOINTVEC> 4 \"const0_operand\" \"\"))\n \t (match_operand:V 1 \"register_operand\" \"v\")\n \t (match_operand:V 2 \"register_operand\" \"v\")))]\n   \"TARGET_VX\"\n@@ -1903,8 +1903,8 @@\n (define_insn \"*vec_sel0<mode>\"\n   [(set (match_operand:V 0 \"register_operand\" \"=v\")\n \t(if_then_else:V\n-\t (eq (not:<tointvec> (match_operand:<tointvec> 3 \"register_operand\" \"v\"))\n-\t     (match_operand:<tointvec> 4 \"const0_operand\" \"\"))\n+\t (eq (not:<TOINTVEC> (match_operand:<TOINTVEC> 3 \"register_operand\" \"v\"))\n+\t     (match_operand:<TOINTVEC> 4 \"const0_operand\" \"\"))\n \t (match_operand:V 1 \"register_operand\" \"v\")\n \t (match_operand:V 2 \"register_operand\" \"v\")))]\n   \"TARGET_VX\"\n@@ -1915,8 +1915,8 @@\n (define_insn \"*vec_sel1<mode>\"\n   [(set (match_operand:V 0 \"register_operand\" \"=v\")\n \t(if_then_else:V\n-\t (eq (match_operand:<tointvec> 3 \"register_operand\" \"v\")\n-\t     (match_operand:<tointvec> 4 \"all_ones_operand\" \"\"))\n+\t (eq (match_operand:<TOINTVEC> 3 \"register_operand\" \"v\")\n+\t     (match_operand:<TOINTVEC> 4 \"all_ones_operand\" \"\"))\n \t (match_operand:V 1 \"register_operand\" \"v\")\n \t (match_operand:V 2 \"register_operand\" \"v\")))]\n   \"TARGET_VX\"\n@@ -1927,8 +1927,8 @@\n (define_insn \"*vec_sel1<mode>\"\n   [(set (match_operand:V 0 \"register_operand\" \"=v\")\n \t(if_then_else:V\n-\t (eq (not:<tointvec> (match_operand:<tointvec> 3 \"register_operand\" \"v\"))\n-\t     (match_operand:<tointvec> 4 \"all_ones_operand\" \"\"))\n+\t (eq (not:<TOINTVEC> (match_operand:<TOINTVEC> 3 \"register_operand\" \"v\"))\n+\t     (match_operand:<TOINTVEC> 4 \"all_ones_operand\" \"\"))\n \t (match_operand:V 1 \"register_operand\" \"v\")\n \t (match_operand:V 2 \"register_operand\" \"v\")))]\n   \"TARGET_VX\""}, {"sha": "2bbed197e7391862299956e662941a5ff82f2f0d", "filename": "gcc/config/s390/vx-builtins.md", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea19dcafb8d373732158eb48adbf7bfc8d8ba27/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea19dcafb8d373732158eb48adbf7bfc8d8ba27/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvx-builtins.md?ref=7ea19dcafb8d373732158eb48adbf7bfc8d8ba27", "patch": "@@ -76,7 +76,7 @@\n (define_insn \"vec_gather_element<mode>\"\n   [(set (match_operand:V_HW_32_64                     0 \"register_operand\"  \"=v\")\n \t(unspec:V_HW_32_64 [(match_operand:V_HW_32_64 1 \"register_operand\"   \"0\")\n-\t\t\t    (match_operand:<tointvec> 2 \"register_operand\"   \"v\")\n+\t\t\t    (match_operand:<TOINTVEC> 2 \"register_operand\"   \"v\")\n \t\t\t    (match_operand:BLK        3 \"memory_operand\"     \"R\")\n \t\t\t    (match_operand:QI         4 \"const_mask_operand\" \"C\")]\n \t\t\t   UNSPEC_VEC_GATHER))]\n@@ -477,7 +477,7 @@\n (define_insn \"vec_scatter_element<mode>_<non_vec_int>\"\n   [(set (mem:<non_vec>\n \t (plus:<non_vec_int> (unspec:<non_vec_int>\n-\t\t\t      [(match_operand:<tointvec> 1 \"register_operand\"   \"v\")\n+\t\t\t      [(match_operand:<TOINTVEC> 1 \"register_operand\"   \"v\")\n \t\t\t       (match_operand:QI         3 \"const_mask_operand\" \"C\")]\n \t\t\t      UNSPEC_VEC_EXTRACT)\n \t\t\t     (match_operand:DI           2 \"address_operand\"   \"ZQ\")))\n@@ -492,7 +492,7 @@\n ; multiplexing here in the expander.\n (define_expand \"vec_scatter_element<V_HW_32_64:mode>\"\n   [(match_operand:V_HW_32_64 0 \"register_operand\" \"\")\n-   (match_operand:<tointvec> 1 \"register_operand\" \"\")\n+   (match_operand:<TOINTVEC> 1 \"register_operand\" \"\")\n    (match_operand 2 \"address_operand\" \"\")\n    (match_operand:QI 3 \"const_mask_operand\" \"\")]\n   \"TARGET_VX\"\n@@ -813,8 +813,8 @@\n })\n \n (define_expand \"vec_cmp<fpcmp:code><mode>\"\n-  [(set (match_operand:<tointvec>              0 \"register_operand\" \"=v\")\n-\t(fpcmp:<tointvec> (match_operand:VF_HW 1 \"register_operand\"  \"v\")\n+  [(set (match_operand:<TOINTVEC>              0 \"register_operand\" \"=v\")\n+\t(fpcmp:<TOINTVEC> (match_operand:VF_HW 1 \"register_operand\"  \"v\")\n \t\t       (match_operand:VF_HW 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n {\n@@ -1050,7 +1050,7 @@\n (define_expand \"vec_slb<mode>\"\n   [(set (match_operand:V_HW 0 \"register_operand\"                     \"\")\n \t(unspec:V_HW [(match_operand:V_HW 1 \"register_operand\"       \"\")\n-\t\t      (match_operand:<tointvec> 2 \"register_operand\" \"\")]\n+\t\t      (match_operand:<TOINTVEC> 2 \"register_operand\" \"\")]\n \t\t     UNSPEC_VEC_SLB))]\n   \"TARGET_VX\"\n {\n@@ -1121,7 +1121,7 @@\n (define_insn \"vec_srab<mode>\"\n   [(set (match_operand:V_HW 0 \"register_operand\"                    \"=v\")\n \t(unspec:V_HW [(match_operand:V_HW 1 \"register_operand\"       \"v\")\n-\t\t      (match_operand:<tointvec> 2 \"register_operand\" \"v\")]\n+\t\t      (match_operand:<TOINTVEC> 2 \"register_operand\" \"v\")]\n \t\t     UNSPEC_VEC_SRAB))]\n   \"TARGET_VX\"\n   \"vsrab\\t%v0,%v1,%v2\"\n@@ -1146,7 +1146,7 @@\n (define_expand \"vec_srb<mode>\"\n   [(set (match_operand:V_HW 0 \"register_operand\"                     \"\")\n \t(unspec:V_HW [(match_operand:V_HW 1 \"register_operand\"       \"\")\n-\t\t      (match_operand:<tointvec> 2 \"register_operand\" \"\")]\n+\t\t      (match_operand:<TOINTVEC> 2 \"register_operand\" \"\")]\n \t\t     UNSPEC_VEC_SRLB))]\n   \"TARGET_VX\"\n {\n@@ -1229,7 +1229,7 @@\n (define_expand \"vec_test_mask_int<mode>\"\n   [(set (reg:CCRAW CC_REGNUM)\n \t(unspec:CCRAW [(match_operand:V_HW 1 \"register_operand\" \"\")\n-\t\t       (match_operand:<tointvec> 2 \"register_operand\" \"\")]\n+\t\t       (match_operand:<TOINTVEC> 2 \"register_operand\" \"\")]\n \t\t      UNSPEC_VEC_TEST_MASK))\n    (set (match_operand:SI 0 \"register_operand\" \"\")\n \t(unspec:SI [(reg:CCRAW CC_REGNUM)] UNSPEC_CC_TO_INT))]\n@@ -1238,7 +1238,7 @@\n (define_insn \"*vec_test_mask<mode>\"\n   [(set (reg:CCRAW CC_REGNUM)\n \t(unspec:CCRAW [(match_operand:V_HW 0 \"register_operand\" \"v\")\n-\t\t       (match_operand:<tointvec> 1 \"register_operand\" \"v\")]\n+\t\t       (match_operand:<TOINTVEC> 1 \"register_operand\" \"v\")]\n \t\t      UNSPEC_VEC_TEST_MASK))]\n   \"TARGET_VX\"\n   \"vtm\\t%v0,%v1\"\n@@ -1946,7 +1946,7 @@\n \t(unspec:CCRAW [(match_operand:VF_HW 1 \"register_operand\"  \"v\")\n \t\t       (match_operand:HI    2 \"const_int_operand\" \"J\")]\n \t\t      UNSPEC_VEC_VFTCICC))\n-   (clobber (match_scratch:<tointvec> 0 \"=v\"))]\n+   (clobber (match_scratch:<TOINTVEC> 0 \"=v\"))]\n   \"TARGET_VX && CONST_OK_FOR_CONSTRAINT_P (INTVAL (operands[2]), 'J', \\\"J\\\")\"\n   \"<vw>ftci<sdx>b\\t%v0,%v1,%x2\"\n   [(set_attr \"op_type\" \"VRR\")])\n@@ -1957,7 +1957,7 @@\n \t  (unspec:CCRAW [(match_operand:VF_HW 0 \"register_operand\")\n \t\t\t (match_operand:HI    1 \"const_int_operand\")]\n \t\t\tUNSPEC_VEC_VFTCICC))\n-     (clobber (scratch:<tointvec>))])\n+     (clobber (scratch:<TOINTVEC>))])\n    (set (match_operand:SI 2 \"register_operand\" \"\")\n \t(unspec:SI [(reg:CCRAW CC_REGNUM)] UNSPEC_CC_TO_INT))]\n   \"TARGET_VX && CONST_OK_FOR_CONSTRAINT_P (INTVAL (operands[1]), 'J', \\\"J\\\")\")\n@@ -2083,7 +2083,7 @@\n   [(set (reg:VFCMP CC_REGNUM)\n \t(compare:VFCMP (match_operand:VF_HW 0 \"register_operand\" \"v\")\n \t\t       (match_operand:VF_HW 1 \"register_operand\" \"v\")))\n-   (clobber (match_scratch:<tointvec> 2 \"=v\"))]\n+   (clobber (match_scratch:<TOINTVEC> 2 \"=v\"))]\n   \"TARGET_VX\"\n   \"<vw>fc<asm_fcmp><sdx>bs\\t%v2,%v0,%v1\"\n   [(set_attr \"op_type\" \"VRR\")])\n@@ -2094,8 +2094,8 @@\n     [(set (reg:CCVEQ CC_REGNUM)\n \t  (compare:CCVEQ (match_operand:VF_HW 1 \"register_operand\"  \"v\")\n \t\t\t (match_operand:VF_HW 2 \"register_operand\"  \"v\")))\n-     (set (match_operand:<tointvec> 0 \"register_operand\" \"=v\")\n-\t  (eq:<tointvec> (match_dup 1) (match_dup 2)))])\n+     (set (match_operand:<TOINTVEC> 0 \"register_operand\" \"=v\")\n+\t  (eq:<TOINTVEC> (match_dup 1) (match_dup 2)))])\n    (set (match_operand:SI 3 \"memory_operand\" \"\")\n \t(unspec:SI [(reg:CCVEQ CC_REGNUM)] UNSPEC_CC_TO_INT))]\n   \"TARGET_VX\")\n@@ -2105,8 +2105,8 @@\n     [(set (reg:CCVFH CC_REGNUM)\n \t  (compare:CCVFH (match_operand:VF_HW 1 \"register_operand\"  \"v\")\n \t\t\t (match_operand:VF_HW 2 \"register_operand\"  \"v\")))\n-     (set (match_operand:<tointvec> 0 \"register_operand\" \"=v\")\n-\t  (gt:<tointvec> (match_dup 1) (match_dup 2)))])\n+     (set (match_operand:<TOINTVEC> 0 \"register_operand\" \"=v\")\n+\t  (gt:<TOINTVEC> (match_dup 1) (match_dup 2)))])\n    (set (match_operand:SI 3 \"memory_operand\" \"\")\n \t(unspec:SI [(reg:CCVIH CC_REGNUM)] UNSPEC_CC_TO_INT))]\n   \"TARGET_VX\")\n@@ -2116,8 +2116,8 @@\n     [(set (reg:CCVFHE CC_REGNUM)\n \t  (compare:CCVFHE (match_operand:VF_HW 1 \"register_operand\"  \"v\")\n \t\t\t  (match_operand:VF_HW 2 \"register_operand\"  \"v\")))\n-     (set (match_operand:<tointvec> 0 \"register_operand\" \"=v\")\n-\t  (ge:<tointvec> (match_dup 1) (match_dup 2)))])\n+     (set (match_operand:<TOINTVEC> 0 \"register_operand\" \"=v\")\n+\t  (ge:<TOINTVEC> (match_dup 1) (match_dup 2)))])\n    (set (match_operand:SI 3 \"memory_operand\" \"\")\n \t(unspec:SI [(reg:CCVFHE CC_REGNUM)] UNSPEC_CC_TO_INT))]\n   \"TARGET_VX\")\n@@ -2131,8 +2131,8 @@\n   [(set (reg:CCVEQ CC_REGNUM)\n \t(compare:CCVEQ (match_operand:VF_HW 0 \"register_operand\"  \"v\")\n \t\t       (match_operand:VF_HW 1 \"register_operand\"  \"v\")))\n-   (set (match_operand:<tointvec>              2 \"register_operand\" \"=v\")\n-\t(eq:<tointvec> (match_dup 0) (match_dup 1)))]\n+   (set (match_operand:<TOINTVEC>              2 \"register_operand\" \"=v\")\n+\t(eq:<TOINTVEC> (match_dup 0) (match_dup 1)))]\n   \"TARGET_VX\"\n   \"<vw>fce<sdx>bs\\t%v2,%v0,%v1\"\n   [(set_attr \"op_type\" \"VRR\")])\n@@ -2142,8 +2142,8 @@\n   [(set (reg:CCVFH CC_REGNUM)\n \t(compare:CCVFH (match_operand:VF_HW 0 \"register_operand\"  \"v\")\n \t\t       (match_operand:VF_HW 1 \"register_operand\"  \"v\")))\n-   (set (match_operand:<tointvec>              2 \"register_operand\" \"=v\")\n-\t(gt:<tointvec> (match_dup 0) (match_dup 1)))]\n+   (set (match_operand:<TOINTVEC>              2 \"register_operand\" \"=v\")\n+\t(gt:<TOINTVEC> (match_dup 0) (match_dup 1)))]\n   \"TARGET_VX\"\n   \"<vw>fch<sdx>bs\\t%v2,%v0,%v1\"\n   [(set_attr \"op_type\" \"VRR\")])\n@@ -2153,8 +2153,8 @@\n   [(set (reg:CCVFHE CC_REGNUM)\n \t(compare:CCVFHE (match_operand:VF_HW 0 \"register_operand\"  \"v\")\n \t\t\t(match_operand:VF_HW 1 \"register_operand\"  \"v\")))\n-   (set (match_operand:<tointvec>            2 \"register_operand\" \"=v\")\n-\t(ge:<tointvec> (match_dup 0) (match_dup 1)))]\n+   (set (match_operand:<TOINTVEC>            2 \"register_operand\" \"=v\")\n+\t(ge:<TOINTVEC> (match_dup 0) (match_dup 1)))]\n   \"TARGET_VX\"\n   \"<vw>fche<sdx>bs\\t%v2,%v0,%v1\"\n   [(set_attr \"op_type\" \"VRR\")])"}]}