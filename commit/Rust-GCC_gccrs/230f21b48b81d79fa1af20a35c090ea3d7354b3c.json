{"sha": "230f21b48b81d79fa1af20a35c090ea3d7354b3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMwZjIxYjQ4YjgxZDc5ZmExYWYyMGEzNWMwOTBlYTNkNzM1NGIzYw==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1995-12-29T19:14:31Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1995-12-29T19:14:31Z"}, "message": "function.c (assign_temp): New function.\n\n* function.c (assign_temp):  New function.  Can handle Chill-style\nvariable-sized array with static maximum size.\n\nFrom-SVN: r10899", "tree": {"sha": "818f2dc4282ea4c2b8b77a08836398865b07a66a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/818f2dc4282ea4c2b8b77a08836398865b07a66a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/230f21b48b81d79fa1af20a35c090ea3d7354b3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/230f21b48b81d79fa1af20a35c090ea3d7354b3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/230f21b48b81d79fa1af20a35c090ea3d7354b3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/230f21b48b81d79fa1af20a35c090ea3d7354b3c/comments", "author": null, "committer": null, "parents": [{"sha": "2fb2b21cd8cb32581de07141af52f01b87e86b4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fb2b21cd8cb32581de07141af52f01b87e86b4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fb2b21cd8cb32581de07141af52f01b87e86b4c"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "4131a2f6be316429b6cb923345bd51b4f2475c8e", "filename": "gcc/function.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/230f21b48b81d79fa1af20a35c090ea3d7354b3c/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/230f21b48b81d79fa1af20a35c090ea3d7354b3c/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=230f21b48b81d79fa1af20a35c090ea3d7354b3c", "patch": "@@ -919,6 +919,46 @@ assign_stack_temp (mode, size, keep)\n   return p->slot;\n }\n \n+/* Assign a temporary of given TYPE.\n+   KEEP is as for assign_stack_temp.\n+   MEMORY_REQUIRED is 1 if the result must be addressable stack memory;\n+   it is 0 if a register is OK. */\n+\n+rtx\n+assign_temp (type, keep, memory_required)\n+     tree type;\n+     int keep;\n+     int memory_required;\n+{\n+  enum machine_mode mode = TYPE_MODE (type);\n+  if (mode == BLKmode || memory_required)\n+    {\n+      int size = int_size_in_bytes (type);\n+      rtx tmp;\n+\n+      /* Unfortunately, we don't yet know how to allocate variable-sized\n+\t temporaries.  However, sometimes we have a fixed upper limit on\n+\t the size (which is stored in TYPE_ARRAY_MAX_SIZE) and can use that\n+\t instead.  This is the case for Chill variable-sized strings. */\n+      if (size == -1 && TREE_CODE (type) == ARRAY_TYPE\n+\t  && TYPE_ARRAY_MAX_SIZE (type) != NULL_TREE\n+\t  && TREE_CODE (TYPE_ARRAY_MAX_SIZE (type)) == INTEGER_CST)\n+\tsize = TREE_INT_CST_LOW (TYPE_ARRAY_MAX_SIZE (type));\n+\n+      tmp = assign_stack_temp (mode, size, keep);\n+      MEM_IN_STRUCT_P (tmp) = AGGREGATE_TYPE_P (type);\n+      return tmp;\n+    }\n+  if (mode == VOIDmode)\n+    return const0_rtx;\n+#ifndef PROMOTE_FOR_CALL_ONLY\n+  { int unsignedp = TREE_UNSIGNED (type);\n+    mode = promote_mode (type, mode, &unsignedp, 0);\n+  }\n+#endif\n+  return gen_reg_rtx (mode);\n+}\n+\n /* Combine temporary stack slots which are adjacent on the stack.\n \n    This allows for better use of already allocated stack space.  This is only"}]}