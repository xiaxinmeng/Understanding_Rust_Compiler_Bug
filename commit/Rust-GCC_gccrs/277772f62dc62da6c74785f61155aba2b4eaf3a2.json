{"sha": "277772f62dc62da6c74785f61155aba2b4eaf3a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc3NzcyZjYyZGM2MmRhNmM3NDc4NWY2MTE1NWFiYTJiNGVhZjNhMg==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2013-10-27T22:40:25Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2013-10-27T22:40:25Z"}, "message": "sh.c (MSW, LSW): Move and rename macros to...\n\n\t* config/sh/sh.c (MSW, LSW): Move and rename macros to...\n\t* config/sh/sh.h (SH_REG_MSW_OFFSET, SH_REG_LSW_OFFSET): ... here.\n\t(TARGET_BIG_ENDIAN): New macro.\n\t* config/sh/sh.md: Use it instead of !TARGET_LITTLE_ENDIAN.\n\tUse SH_REG_MSW_OFFSET and SH_REG_LSW_OFFSET.\n\t* config/sh/sh.c: Likewise.\n\t* config/sh/sh.h: Likewise.\n\nFrom-SVN: r204110", "tree": {"sha": "5f624827e86429c4f5119f5b32fe6a3a5aeeafc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f624827e86429c4f5119f5b32fe6a3a5aeeafc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/277772f62dc62da6c74785f61155aba2b4eaf3a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/277772f62dc62da6c74785f61155aba2b4eaf3a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/277772f62dc62da6c74785f61155aba2b4eaf3a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/277772f62dc62da6c74785f61155aba2b4eaf3a2/comments", "author": null, "committer": null, "parents": [{"sha": "1d9b1f94b0d4372100d404ea467eb97d378b9506", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d9b1f94b0d4372100d404ea467eb97d378b9506", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d9b1f94b0d4372100d404ea467eb97d378b9506"}], "stats": {"total": 64, "additions": 38, "deletions": 26}, "files": [{"sha": "c8769c9cf094a3ca142717fcfe441e09ab717c87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/277772f62dc62da6c74785f61155aba2b4eaf3a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/277772f62dc62da6c74785f61155aba2b4eaf3a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=277772f62dc62da6c74785f61155aba2b4eaf3a2", "patch": "@@ -1,3 +1,13 @@\n+2013-10-27  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/sh/sh.c (MSW, LSW): Move and rename macros to...\n+\t* config/sh/sh.h (SH_REG_MSW_OFFSET, SH_REG_LSW_OFFSET): ... here.\n+\t(TARGET_BIG_ENDIAN): New macro.\n+\t* config/sh/sh.md: Use it instead of !TARGET_LITTLE_ENDIAN.\n+\tUse SH_REG_MSW_OFFSET and SH_REG_LSW_OFFSET.\n+\t* config/sh/sh.c: Likewise.\n+\t* config/sh/sh.h: Likewise.\n+\n 2013-10-27  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* config/cris/cris.c (cris_emit_trap_for_misalignment): Replace the"}, {"sha": "ae4b7a525b6fb041784bc5e0284637244b03b392", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/277772f62dc62da6c74785f61155aba2b4eaf3a2/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/277772f62dc62da6c74785f61155aba2b4eaf3a2/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=277772f62dc62da6c74785f61155aba2b4eaf3a2", "patch": "@@ -63,9 +63,6 @@ along with GCC; see the file COPYING3.  If not see\n \n int code_for_indirect_jump_scratch = CODE_FOR_indirect_jump_scratch;\n \n-#define MSW (TARGET_LITTLE_ENDIAN ? 1 : 0)\n-#define LSW (TARGET_LITTLE_ENDIAN ? 0 : 1)\n-\n /* These are some macros to abstract register modes.  */\n #define CONST_OK_FOR_I10(VALUE) (((HOST_WIDE_INT)(VALUE)) >= -512 \\\n \t\t\t\t && ((HOST_WIDE_INT)(VALUE)) <= 511)\n@@ -1208,12 +1205,12 @@ sh_print_operand (FILE *stream, rtx x, int code)\n       if (REG_P (x) || GET_CODE (x) == SUBREG)\n \t{\n \t  regno = true_regnum (x);\n-\t  regno += FP_REGISTER_P (regno) ? 1 : LSW;\n+\t  regno += FP_REGISTER_P (regno) ? 1 : SH_REG_LSW_OFFSET;\n \t  fputs (reg_names[regno], (stream));\n \t}\n       else if (MEM_P (x))\n \t{\n-\t  x = adjust_address (x, SImode, 4 * LSW);\n+\t  x = adjust_address (x, SImode, 4 * SH_REG_LSW_OFFSET);\n \t  sh_print_operand_address (stream, XEXP (x, 0));\n \t}\n       else\n@@ -1224,7 +1221,7 @@ sh_print_operand (FILE *stream, rtx x, int code)\n \t  if (mode == VOIDmode)\n \t    mode = DImode;\n \t  if (GET_MODE_SIZE (mode) >= 8)\n-\t    sub = simplify_subreg (SImode, x, mode, 4 * LSW);\n+\t    sub = simplify_subreg (SImode, x, mode, 4 * SH_REG_LSW_OFFSET);\n \t  if (sub)\n \t    sh_print_operand (stream, sub, 0);\n \t  else\n@@ -1235,12 +1232,12 @@ sh_print_operand (FILE *stream, rtx x, int code)\n       if (REG_P (x) || GET_CODE (x) == SUBREG)\n \t{\n \t  regno = true_regnum (x);\n-\t  regno += FP_REGISTER_P (regno) ? 0 : MSW;\n+\t  regno += FP_REGISTER_P (regno) ? 0 : SH_REG_MSW_OFFSET;\n \t  fputs (reg_names[regno], (stream));\n \t}\n       else if (MEM_P (x))\n \t{\n-\t  x = adjust_address (x, SImode, 4 * MSW);\n+\t  x = adjust_address (x, SImode, 4 * SH_REG_MSW_OFFSET);\n \t  sh_print_operand_address (stream, XEXP (x, 0));\n \t}\n       else\n@@ -1251,7 +1248,7 @@ sh_print_operand (FILE *stream, rtx x, int code)\n \t  if (mode == VOIDmode)\n \t    mode = DImode;\n \t  if (GET_MODE_SIZE (mode) >= 8)\n-\t    sub = simplify_subreg (SImode, x, mode, 4 * MSW);\n+\t    sub = simplify_subreg (SImode, x, mode, 4 * SH_REG_MSW_OFFSET);\n \t  if (sub)\n \t    sh_print_operand (stream, sub, 0);\n \t  else\n@@ -8261,8 +8258,8 @@ sh_builtin_saveregs (void)\n \t  emit_insn (gen_addsi3 (fpregs, fpregs, GEN_INT (-UNITS_PER_WORD)));\n \t  mem = change_address (regbuf, SFmode, fpregs);\n \t  emit_move_insn (mem,\n-\t\t\t  gen_rtx_REG (SFmode, BASE_ARG_REG (SFmode) + regno\n-\t\t\t\t\t\t- (TARGET_LITTLE_ENDIAN != 0)));\n+\t\t\t  gen_rtx_REG (SFmode, BASE_ARG_REG (SFmode)\n+\t\t\t\t\t       + regno - SH_REG_MSW_OFFSET));\n \t}\n     }\n   else"}, {"sha": "9f07012941caf4389de6ec5e3d0e5a65656cfc8b", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/277772f62dc62da6c74785f61155aba2b4eaf3a2/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/277772f62dc62da6c74785f61155aba2b4eaf3a2/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=277772f62dc62da6c74785f61155aba2b4eaf3a2", "patch": "@@ -405,16 +405,21 @@ extern enum sh_divide_strategy_e sh_div_strategy;\n \f\n /* Target machine storage layout.  */\n \n+#define TARGET_BIG_ENDIAN (!TARGET_LITTLE_ENDIAN)\n+\n+#define SH_REG_MSW_OFFSET (TARGET_LITTLE_ENDIAN ? 1 : 0)\n+#define SH_REG_LSW_OFFSET (TARGET_LITTLE_ENDIAN ? 0 : 1)\n+\n /* Define this if most significant bit is lowest numbered\n    in instructions that operate on numbered bit-fields.  */\n #define BITS_BIG_ENDIAN  0\n \n /* Define this if most significant byte of a word is the lowest numbered.  */\n-#define BYTES_BIG_ENDIAN (TARGET_LITTLE_ENDIAN == 0)\n+#define BYTES_BIG_ENDIAN TARGET_BIG_ENDIAN\n \n /* Define this if most significant word of a multiword number is the lowest\n    numbered.  */\n-#define WORDS_BIG_ENDIAN (TARGET_LITTLE_ENDIAN == 0)\n+#define WORDS_BIG_ENDIAN TARGET_BIG_ENDIAN\n \n #define MAX_BITS_PER_WORD 64\n \n@@ -1437,7 +1442,7 @@ struct sh_args {\n #define SHCOMPACT_FORCE_ON_STACK(MODE,TYPE) \\\n   ((MODE) == BLKmode \\\n    && TARGET_SHCOMPACT \\\n-   && ! TARGET_LITTLE_ENDIAN \\\n+   && TARGET_BIG_ENDIAN \\\n    && int_size_in_bytes (TYPE) > 4 \\\n    && int_size_in_bytes (TYPE) < 8)\n "}, {"sha": "db4f8d2974a3b0cfa9d3910ce35eba0e4d62f855", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/277772f62dc62da6c74785f61155aba2b4eaf3a2/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/277772f62dc62da6c74785f61155aba2b4eaf3a2/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=277772f62dc62da6c74785f61155aba2b4eaf3a2", "patch": "@@ -670,7 +670,7 @@\n \t    (and:SI (match_operand:SI 0 \"arith_reg_operand\" \"%r\")\n \t\t    (match_operand:SI 1 \"arith_reg_operand\" \"r\")) <lowpart_be>)\n \t  (const_int 0)))]\n-  \"TARGET_SH1 && !TARGET_LITTLE_ENDIAN\"\n+  \"TARGET_SH1 && TARGET_BIG_ENDIAN\"\n   \"tst\t%0,%1\"\n   [(set_attr \"type\" \"mt_group\")])\n \n@@ -761,7 +761,7 @@\n \t\t\t    (match_operand:SI 3 \"const_int_operand\")) 3)\n \t (match_operand:SI 1 \"const_int_operand\")\n \t (match_operand:SI 2 \"const_int_operand\")))]\n-  \"TARGET_SH1 && ! TARGET_LITTLE_ENDIAN\n+  \"TARGET_SH1 && TARGET_BIG_ENDIAN\n    && ZERO_EXTRACT_ANDMASK (operands[1], operands[2])\n       == (INTVAL (operands[3]) & 255)\n    && CONST_OK_FOR_K08 (INTVAL (operands[3]) & 255)\"\n@@ -2115,7 +2115,7 @@\n \t(zero_extend:SI (subreg:QI (not:SI (subreg:SI (match_operand:QI 1\n \t\t\t\t\t\t       \"general_extend_operand\"\n \t\t\t\t\t\t       \"\") 0)) 3)))]\n-  \"TARGET_SHMEDIA && ! TARGET_LITTLE_ENDIAN\"\n+  \"TARGET_SHMEDIA && TARGET_BIG_ENDIAN\"\n   [(set (match_dup 0) (zero_extend:SI (match_dup 1)))\n    (set (match_dup 0) (xor:SI (match_dup 0) (const_int 255)))]\n   \"\")\n@@ -3840,7 +3840,7 @@ label:\n       operands[0] = SUBREG_REG (operands[0]);\n     }\n   gcc_assert (REG_P (operands[0]));\n-  if (! TARGET_LITTLE_ENDIAN)\n+  if (TARGET_BIG_ENDIAN)\n     offset += 8 - GET_MODE_SIZE (inmode);\n   operands[5] = gen_rtx_SUBREG (inmode, operands[0], offset);\n })\n@@ -7733,11 +7733,11 @@ label:\n   rtx mem2\n     = change_address (mem, SFmode, gen_rtx_POST_INC (Pmode, operands[1]));\n   insn = emit_insn (gen_movsf_ie (gen_rtx_REG (SFmode,\n-\t\t\t\t\t   regno + !! TARGET_LITTLE_ENDIAN),\n+\t\t\t\t\t       regno + SH_REG_MSW_OFFSET),\n \t\t\t\t  mem2, operands[2]));\n   add_reg_note (insn, REG_INC, operands[1]);\n   insn = emit_insn (gen_movsf_ie (gen_rtx_REG (SFmode,\n-\t\t\t\t\t       regno + ! TARGET_LITTLE_ENDIAN),\n+\t\t\t\t\t       regno + SH_REG_LSW_OFFSET),\n \t\t\t\t  change_address (mem, SFmode, NULL_RTX),\n \t\t\t\t  operands[2]));\n   DONE;\n@@ -7755,8 +7755,8 @@ label:\n   int regno = true_regnum (operands[0]);\n   rtx addr, insn;\n   rtx mem2 = change_address (operands[1], SFmode, NULL_RTX);\n-  rtx reg0 = gen_rtx_REG (SFmode, regno + (TARGET_LITTLE_ENDIAN ? 1 : 0));\n-  rtx reg1 = gen_rtx_REG (SFmode, regno + (TARGET_LITTLE_ENDIAN ? 0 : 1));\n+  rtx reg0 = gen_rtx_REG (SFmode, regno + SH_REG_MSW_OFFSET);\n+  rtx reg1 = gen_rtx_REG (SFmode, regno + SH_REG_LSW_OFFSET);\n \n   operands[1] = copy_rtx (mem2);\n   addr = XEXP (mem2, 0);\n@@ -7821,8 +7821,8 @@ label:\n {\n   int regno = true_regnum (operands[1]);\n   rtx insn, addr;\n-  rtx reg0 = gen_rtx_REG (SFmode, regno + (TARGET_LITTLE_ENDIAN ? 1 : 0));\n-  rtx reg1 = gen_rtx_REG (SFmode, regno + (TARGET_LITTLE_ENDIAN ? 0 : 1));\n+  rtx reg0 = gen_rtx_REG (SFmode, regno + SH_REG_MSW_OFFSET);\n+  rtx reg1 = gen_rtx_REG (SFmode, regno + SH_REG_LSW_OFFSET);\n \n   operands[0] = copy_rtx (operands[0]);\n   PUT_MODE (operands[0], SFmode);\n@@ -13160,7 +13160,7 @@ label:\n \t\t\t (match_operand:SI 1 \"immediate_operand\" \"\")\n \t\t\t (match_operand:SI 2 \"immediate_operand\" \"\"))\n \t(match_operand:SI 3 \"general_operand\" \"\"))]\n-  \"TARGET_SH1 && ! TARGET_LITTLE_ENDIAN\"\n+  \"TARGET_SH1 && TARGET_BIG_ENDIAN\"\n {\n   rtx addr_target, orig_address, shift_reg, qi_val;\n   HOST_WIDE_INT bitsize, size, v = 0;\n@@ -14522,7 +14522,7 @@ label:\n \t   (zero_extract:QI (not:QI (match_dup 2)) (const_int 2) (const_int 4))\n \t   (zero_extract:QI (not:QI (match_dup 2))\n \t\t\t    (const_int 2) (const_int 6))])))]\n-  \"TARGET_SHMEDIA && ! TARGET_LITTLE_ENDIAN\"\n+  \"TARGET_SHMEDIA && TARGET_BIG_ENDIAN\"\n   \"mperm.w\t%1, %N2, %0\"\n   [(set_attr \"type\" \"arith_media\")])\n "}]}