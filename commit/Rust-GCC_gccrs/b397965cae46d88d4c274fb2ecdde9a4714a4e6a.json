{"sha": "b397965cae46d88d4c274fb2ecdde9a4714a4e6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM5Nzk2NWNhZTQ2ZDg4ZDRjMjc0ZmIyZWNkZGU5YTQ3MTRhNGU2YQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-30T11:19:29Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-30T11:19:29Z"}, "message": "[65/77] Add a SCALAR_TYPE_MODE macro\n\nThis patch adds a SCALAR_TYPE_MODE macro, along the same lines as\nSCALAR_INT_TYPE_MODE and SCALAR_FLOAT_TYPE_MODE.  It also adds\ntwo instances of as_a <scalar_mode> to c_common_type, when converting\nan unsigned fixed-point SCALAR_TYPE_MODE to the equivalent signed mode.\n\n2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* tree.h (SCALAR_TYPE_MODE): New macro.\n\t* expr.c (expand_expr_addr_expr_1): Use it.\n\t(expand_expr_real_2): Likewise.\n\t* fold-const.c (fold_convert_const_fixed_from_fixed): Likeise.\n\t(fold_convert_const_fixed_from_int): Likewise.\n\t(fold_convert_const_fixed_from_real): Likewise.\n\t(native_encode_fixed): Likewise\n\t(native_encode_complex): Likewise\n\t(native_encode_vector): Likewise.\n\t(native_interpret_fixed): Likewise.\n\t(native_interpret_real): Likewise.\n\t(native_interpret_complex): Likewise.\n\t(native_interpret_vector): Likewise.\n\t* omp-simd-clone.c (simd_clone_adjust_return_type): Likewise.\n\t(simd_clone_adjust_argument_types): Likewise.\n\t(simd_clone_init_simd_arrays): Likewise.\n\t(simd_clone_adjust): Likewise.\n\t* stor-layout.c (layout_type): Likewise.\n\t* tree.c (build_minus_one_cst): Likewise.\n\t* tree-cfg.c (verify_gimple_assign_ternary): Likewise.\n\t* tree-inline.c (estimate_move_cost): Likewise.\n\t* tree-ssa-math-opts.c (convert_plusminus_to_widen): Likewise.\n\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Likewise.\n\t(vectorizable_reduction): Likewise.\n\t* tree-vect-patterns.c (vect_recog_widen_mult_pattern): Likewise.\n\t(vect_recog_mixed_size_cond_pattern): Likewise.\n\t(check_bool_pattern): Likewise.\n\t(adjust_bool_pattern): Likewise.\n\t(search_type_for_mask_1): Likewise.\n\t* tree-vect-slp.c (vect_schedule_slp_instance): Likewise.\n\t* tree-vect-stmts.c (vectorizable_conversion): Likewise.\n\t(vectorizable_load): Likewise.\n\t(vectorizable_store): Likewise.\n\t* ubsan.c (ubsan_encode_value): Likewise.\n\t* varasm.c (output_constant): Likewise.\n\ngcc/c-family/\n\t* c-lex.c (interpret_fixed): Use SCALAR_TYPE_MODE.\n\t* c-common.c (c_build_vec_perm_expr): Likewise.\n\ngcc/c/\n\t* c-typeck.c (build_binary_op): Use SCALAR_TYPE_MODE.\n\t(c_common_type): Likewise.  Use as_a <scalar_mode> when setting\n\tm1 and m2 to the signed equivalent of a fixed-point\n\tSCALAR_TYPE_MODE.\n\ngcc/cp/\n\t* typeck.c (cp_build_binary_op): Use SCALAR_TYPE_MODE.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251516", "tree": {"sha": "dc2102813ae17dff7c73a78ce34cfb4b7c869d3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc2102813ae17dff7c73a78ce34cfb4b7c869d3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b397965cae46d88d4c274fb2ecdde9a4714a4e6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b397965cae46d88d4c274fb2ecdde9a4714a4e6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b397965cae46d88d4c274fb2ecdde9a4714a4e6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/comments", "author": null, "committer": null, "parents": [{"sha": "d21cefc26f716395b03e3c0d379ecac04656f963", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d21cefc26f716395b03e3c0d379ecac04656f963", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d21cefc26f716395b03e3c0d379ecac04656f963"}], "stats": {"total": 216, "additions": 145, "deletions": 71}, "files": [{"sha": "f67f411491d0725c51ef35ba49830eedfea87057", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b397965cae46d88d4c274fb2ecdde9a4714a4e6a", "patch": "@@ -1,3 +1,43 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* tree.h (SCALAR_TYPE_MODE): New macro.\n+\t* expr.c (expand_expr_addr_expr_1): Use it.\n+\t(expand_expr_real_2): Likewise.\n+\t* fold-const.c (fold_convert_const_fixed_from_fixed): Likeise.\n+\t(fold_convert_const_fixed_from_int): Likewise.\n+\t(fold_convert_const_fixed_from_real): Likewise.\n+\t(native_encode_fixed): Likewise\n+\t(native_encode_complex): Likewise\n+\t(native_encode_vector): Likewise.\n+\t(native_interpret_fixed): Likewise.\n+\t(native_interpret_real): Likewise.\n+\t(native_interpret_complex): Likewise.\n+\t(native_interpret_vector): Likewise.\n+\t* omp-simd-clone.c (simd_clone_adjust_return_type): Likewise.\n+\t(simd_clone_adjust_argument_types): Likewise.\n+\t(simd_clone_init_simd_arrays): Likewise.\n+\t(simd_clone_adjust): Likewise.\n+\t* stor-layout.c (layout_type): Likewise.\n+\t* tree.c (build_minus_one_cst): Likewise.\n+\t* tree-cfg.c (verify_gimple_assign_ternary): Likewise.\n+\t* tree-inline.c (estimate_move_cost): Likewise.\n+\t* tree-ssa-math-opts.c (convert_plusminus_to_widen): Likewise.\n+\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Likewise.\n+\t(vectorizable_reduction): Likewise.\n+\t* tree-vect-patterns.c (vect_recog_widen_mult_pattern): Likewise.\n+\t(vect_recog_mixed_size_cond_pattern): Likewise.\n+\t(check_bool_pattern): Likewise.\n+\t(adjust_bool_pattern): Likewise.\n+\t(search_type_for_mask_1): Likewise.\n+\t* tree-vect-slp.c (vect_schedule_slp_instance): Likewise.\n+\t* tree-vect-stmts.c (vectorizable_conversion): Likewise.\n+\t(vectorizable_load): Likewise.\n+\t(vectorizable_store): Likewise.\n+\t* ubsan.c (ubsan_encode_value): Likewise.\n+\t* varasm.c (output_constant): Likewise.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "a715b57f5e97a6c8b8a5395cbdd43f152b1d98bf", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b397965cae46d88d4c274fb2ecdde9a4714a4e6a", "patch": "@@ -1,3 +1,10 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* c-lex.c (interpret_fixed): Use SCALAR_TYPE_MODE.\n+\t* c-common.c (c_build_vec_perm_expr): Likewise.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "18b2d1acc4ff22882467a6f49ec1406ec2b02982", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=b397965cae46d88d4c274fb2ecdde9a4714a4e6a", "patch": "@@ -1031,8 +1031,8 @@ c_build_vec_perm_expr (location_t loc, tree v0, tree v1, tree mask,\n       return error_mark_node;\n     }\n \n-  if (GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (TREE_TYPE (v0))))\n-      != GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (TREE_TYPE (mask)))))\n+  if (GET_MODE_BITSIZE (SCALAR_TYPE_MODE (TREE_TYPE (TREE_TYPE (v0))))\n+      != GET_MODE_BITSIZE (SCALAR_TYPE_MODE (TREE_TYPE (TREE_TYPE (mask)))))\n     {\n       if (complain)\n \terror_at (loc, \"__builtin_shuffle argument vector(s) inner type \""}, {"sha": "8342800303a335b7991d3571154200ac593a8e72", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=b397965cae46d88d4c274fb2ecdde9a4714a4e6a", "patch": "@@ -1110,7 +1110,7 @@ interpret_fixed (const cpp_token *token, unsigned int flags)\n   memcpy (copy, token->val.str.text, copylen);\n   copy[copylen] = '\\0';\n \n-  fixed_from_string (&fixed, copy, TYPE_MODE (type));\n+  fixed_from_string (&fixed, copy, SCALAR_TYPE_MODE (type));\n \n   /* Create a node with determined type and value.  */\n   value = build_fixed (type, fixed);"}, {"sha": "dc269d5dea45ae878c7c0fe5f2c29bfd67838de7", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=b397965cae46d88d4c274fb2ecdde9a4714a4e6a", "patch": "@@ -1,3 +1,12 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* c-typeck.c (build_binary_op): Use SCALAR_TYPE_MODE.\n+\t(c_common_type): Likewise.  Use as_a <scalar_mode> when setting\n+\tm1 and m2 to the signed equivalent of a fixed-point\n+\tSCALAR_TYPE_MODE.\n+\n 2017-08-24  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-tree.h (c_expr::get_location) Use EXPR_HAS_LOCATION rather"}, {"sha": "135dd9d665cb099a17d942f1ba452a999db2974c", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=b397965cae46d88d4c274fb2ecdde9a4714a4e6a", "patch": "@@ -812,11 +812,11 @@ c_common_type (tree t1, tree t2)\n   if (code1 == FIXED_POINT_TYPE || code2 == FIXED_POINT_TYPE)\n     {\n       unsigned int unsignedp = 0, satp = 0;\n-      machine_mode m1, m2;\n+      scalar_mode m1, m2;\n       unsigned int fbit1, ibit1, fbit2, ibit2, max_fbit, max_ibit;\n \n-      m1 = TYPE_MODE (t1);\n-      m2 = TYPE_MODE (t2);\n+      m1 = SCALAR_TYPE_MODE (t1);\n+      m2 = SCALAR_TYPE_MODE (t2);\n \n       /* If one input type is saturating, the result type is saturating.  */\n       if (TYPE_SATURATING (t1) || TYPE_SATURATING (t2))\n@@ -848,7 +848,8 @@ c_common_type (tree t1, tree t2)\n \t\tmclass = MODE_ACCUM;\n \t      else\n \t\tgcc_unreachable ();\n-\t      m1 = mode_for_size (GET_MODE_PRECISION (m1), mclass, 0);\n+\t      m1 = as_a <scalar_mode>\n+\t\t(mode_for_size (GET_MODE_PRECISION (m1), mclass, 0));\n \t    }\n \t  if (code2 == FIXED_POINT_TYPE && TYPE_UNSIGNED (t2))\n \t    {\n@@ -859,7 +860,8 @@ c_common_type (tree t1, tree t2)\n \t\tmclass = MODE_ACCUM;\n \t      else\n \t\tgcc_unreachable ();\n-\t      m2 = mode_for_size (GET_MODE_PRECISION (m2), mclass, 0);\n+\t      m2 = as_a <scalar_mode>\n+\t\t(mode_for_size (GET_MODE_PRECISION (m2), mclass, 0));\n \t    }\n \t}\n \n@@ -11414,7 +11416,8 @@ build_binary_op (location_t location, enum tree_code code,\n \n           /* Always construct signed integer vector type.  */\n           intt = c_common_type_for_size (GET_MODE_BITSIZE\n-\t\t\t\t\t   (TYPE_MODE (TREE_TYPE (type0))), 0);\n+\t\t\t\t\t (SCALAR_TYPE_MODE\n+\t\t\t\t\t  (TREE_TYPE (type0))), 0);\n           result_type = build_opaque_vector_type (intt,\n \t\t\t\t\t\t  TYPE_VECTOR_SUBPARTS (type0));\n           converted = 1;\n@@ -11573,7 +11576,8 @@ build_binary_op (location_t location, enum tree_code code,\n \n           /* Always construct signed integer vector type.  */\n           intt = c_common_type_for_size (GET_MODE_BITSIZE\n-\t\t\t\t\t   (TYPE_MODE (TREE_TYPE (type0))), 0);\n+\t\t\t\t\t (SCALAR_TYPE_MODE\n+\t\t\t\t\t  (TREE_TYPE (type0))), 0);\n           result_type = build_opaque_vector_type (intt,\n \t\t\t\t\t\t  TYPE_VECTOR_SUBPARTS (type0));\n           converted = 1;"}, {"sha": "69267c0ec35147c04011fc1f59469d69ad7fa1c9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b397965cae46d88d4c274fb2ecdde9a4714a4e6a", "patch": "@@ -1,3 +1,9 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* typeck.c (cp_build_binary_op): Use SCALAR_TYPE_MODE.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "171c2dfb57c047e7e031845942890f4f4cd5dcbb", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b397965cae46d88d4c274fb2ecdde9a4714a4e6a", "patch": "@@ -4952,8 +4952,8 @@ cp_build_binary_op (location_t location,\n \t    }\n \n \t  /* Always construct signed integer vector type.  */\n-\t  intt = c_common_type_for_size (GET_MODE_BITSIZE\n-\t\t\t\t\t   (TYPE_MODE (TREE_TYPE (type0))), 0);\n+\t  intt = c_common_type_for_size\n+\t    (GET_MODE_BITSIZE (SCALAR_TYPE_MODE (TREE_TYPE (type0))), 0);\n \t  if (!intt)\n \t    {\n \t      if (complain & tf_error)"}, {"sha": "c586e7ce5068827d66d414129bbb1f6d4c80c99d", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=b397965cae46d88d4c274fb2ecdde9a4714a4e6a", "patch": "@@ -7766,7 +7766,7 @@ expand_expr_addr_expr_1 (tree exp, rtx target, scalar_int_mode tmode,\n \t The expression is therefore always offset by the size of the\n \t scalar type.  */\n       offset = 0;\n-      bitpos = GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (exp)));\n+      bitpos = GET_MODE_BITSIZE (SCALAR_TYPE_MODE (TREE_TYPE (exp)));\n       inner = TREE_OPERAND (exp, 0);\n       break;\n \n@@ -9443,7 +9443,7 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \t{\n \t  tree sel_type = TREE_TYPE (treeop2);\n \t  machine_mode vmode\n-\t    = mode_for_vector (TYPE_MODE (TREE_TYPE (sel_type)),\n+\t    = mode_for_vector (SCALAR_TYPE_MODE (TREE_TYPE (sel_type)),\n \t\t\t       TYPE_VECTOR_SUBPARTS (sel_type));\n \t  gcc_assert (GET_MODE_CLASS (vmode) == MODE_VECTOR_INT);\n \t  op2 = simplify_subreg (vmode, op2, TYPE_MODE (sel_type), 0);"}, {"sha": "c921f1cf927d67a85109cbccdd24a56eaa9136f6", "filename": "gcc/fold-const.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=b397965cae46d88d4c274fb2ecdde9a4714a4e6a", "patch": "@@ -2050,8 +2050,8 @@ fold_convert_const_fixed_from_fixed (tree type, const_tree arg1)\n   tree t;\n   bool overflow_p;\n \n-  overflow_p = fixed_convert (&value, TYPE_MODE (type), &TREE_FIXED_CST (arg1),\n-\t\t\t      TYPE_SATURATING (type));\n+  overflow_p = fixed_convert (&value, SCALAR_TYPE_MODE (type),\n+\t\t\t      &TREE_FIXED_CST (arg1), TYPE_SATURATING (type));\n   t = build_fixed (type, value);\n \n   /* Propagate overflow flags.  */\n@@ -2079,7 +2079,7 @@ fold_convert_const_fixed_from_int (tree type, const_tree arg1)\n   else\n     di.high = TREE_INT_CST_ELT (arg1, 1);\n \n-  overflow_p = fixed_convert_from_int (&value, TYPE_MODE (type), di,\n+  overflow_p = fixed_convert_from_int (&value, SCALAR_TYPE_MODE (type), di,\n \t\t\t\t       TYPE_UNSIGNED (TREE_TYPE (arg1)),\n \t\t\t\t       TYPE_SATURATING (type));\n   t = build_fixed (type, value);\n@@ -2100,7 +2100,7 @@ fold_convert_const_fixed_from_real (tree type, const_tree arg1)\n   tree t;\n   bool overflow_p;\n \n-  overflow_p = fixed_convert_from_real (&value, TYPE_MODE (type),\n+  overflow_p = fixed_convert_from_real (&value, SCALAR_TYPE_MODE (type),\n \t\t\t\t\t&TREE_REAL_CST (arg1),\n \t\t\t\t\tTYPE_SATURATING (type));\n   t = build_fixed (type, value);\n@@ -7027,7 +7027,7 @@ static int\n native_encode_fixed (const_tree expr, unsigned char *ptr, int len, int off)\n {\n   tree type = TREE_TYPE (expr);\n-  machine_mode mode = TYPE_MODE (type);\n+  scalar_mode mode = SCALAR_TYPE_MODE (type);\n   int total_bytes = GET_MODE_SIZE (mode);\n   FIXED_VALUE_TYPE value;\n   tree i_value, i_type;\n@@ -7129,7 +7129,7 @@ native_encode_complex (const_tree expr, unsigned char *ptr, int len, int off)\n     return 0;\n   part = TREE_IMAGPART (expr);\n   if (off != -1)\n-    off = MAX (0, off - GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (part))));\n+    off = MAX (0, off - GET_MODE_SIZE (SCALAR_TYPE_MODE (TREE_TYPE (part))));\n   isize = native_encode_expr (part, ptr+rsize, len-rsize, off);\n   if (off == -1\n       && isize != rsize)\n@@ -7153,7 +7153,7 @@ native_encode_vector (const_tree expr, unsigned char *ptr, int len, int off)\n   offset = 0;\n   count = VECTOR_CST_NELTS (expr);\n   itype = TREE_TYPE (TREE_TYPE (expr));\n-  size = GET_MODE_SIZE (TYPE_MODE (itype));\n+  size = GET_MODE_SIZE (SCALAR_TYPE_MODE (itype));\n   for (i = 0; i < count; i++)\n     {\n       if (off >= size)\n@@ -7281,7 +7281,8 @@ native_interpret_int (tree type, const unsigned char *ptr, int len)\n static tree\n native_interpret_fixed (tree type, const unsigned char *ptr, int len)\n {\n-  int total_bytes = GET_MODE_SIZE (TYPE_MODE (type));\n+  scalar_mode mode = SCALAR_TYPE_MODE (type);\n+  int total_bytes = GET_MODE_SIZE (mode);\n   double_int result;\n   FIXED_VALUE_TYPE fixed_value;\n \n@@ -7290,7 +7291,7 @@ native_interpret_fixed (tree type, const unsigned char *ptr, int len)\n     return NULL_TREE;\n \n   result = double_int::from_buffer (ptr, total_bytes);\n-  fixed_value = fixed_from_double_int (result, TYPE_MODE (type));\n+  fixed_value = fixed_from_double_int (result, mode);\n \n   return build_fixed (type, fixed_value);\n }\n@@ -7312,7 +7313,6 @@ native_interpret_real (tree type, const unsigned char *ptr, int len)\n   REAL_VALUE_TYPE r;\n   long tmp[6];\n \n-  total_bytes = GET_MODE_SIZE (TYPE_MODE (type));\n   if (total_bytes > len || total_bytes > 24)\n     return NULL_TREE;\n   int words = (32 / BITS_PER_UNIT) / UNITS_PER_WORD;\n@@ -7367,7 +7367,7 @@ native_interpret_complex (tree type, const unsigned char *ptr, int len)\n   int size;\n \n   etype = TREE_TYPE (type);\n-  size = GET_MODE_SIZE (TYPE_MODE (etype));\n+  size = GET_MODE_SIZE (SCALAR_TYPE_MODE (etype));\n   if (size * 2 > len)\n     return NULL_TREE;\n   rpart = native_interpret_expr (etype, ptr, size);\n@@ -7392,7 +7392,7 @@ native_interpret_vector (tree type, const unsigned char *ptr, int len)\n   tree *elements;\n \n   etype = TREE_TYPE (type);\n-  size = GET_MODE_SIZE (TYPE_MODE (etype));\n+  size = GET_MODE_SIZE (SCALAR_TYPE_MODE (etype));\n   count = TYPE_VECTOR_SUBPARTS (type);\n   if (size * count > len)\n     return NULL_TREE;"}, {"sha": "18eecd4335b174bede9a411b691b4e6a24081a44", "filename": "gcc/omp-simd-clone.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Fomp-simd-clone.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Fomp-simd-clone.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-simd-clone.c?ref=b397965cae46d88d4c274fb2ecdde9a4714a4e6a", "patch": "@@ -496,7 +496,7 @@ simd_clone_adjust_return_type (struct cgraph_node *node)\n     veclen = node->simdclone->vecsize_int;\n   else\n     veclen = node->simdclone->vecsize_float;\n-  veclen /= GET_MODE_BITSIZE (TYPE_MODE (t));\n+  veclen /= GET_MODE_BITSIZE (SCALAR_TYPE_MODE (t));\n   if (veclen > node->simdclone->simdlen)\n     veclen = node->simdclone->simdlen;\n   if (POINTER_TYPE_P (t))\n@@ -606,7 +606,7 @@ simd_clone_adjust_argument_types (struct cgraph_node *node)\n \t    veclen = sc->vecsize_int;\n \t  else\n \t    veclen = sc->vecsize_float;\n-\t  veclen /= GET_MODE_BITSIZE (TYPE_MODE (parm_type));\n+\t  veclen /= GET_MODE_BITSIZE (SCALAR_TYPE_MODE (parm_type));\n \t  if (veclen > sc->simdlen)\n \t    veclen = sc->simdlen;\n \t  adj.arg_prefix = \"simd\";\n@@ -650,7 +650,7 @@ simd_clone_adjust_argument_types (struct cgraph_node *node)\n \tveclen = sc->vecsize_int;\n       else\n \tveclen = sc->vecsize_float;\n-      veclen /= GET_MODE_BITSIZE (TYPE_MODE (base_type));\n+      veclen /= GET_MODE_BITSIZE (SCALAR_TYPE_MODE (base_type));\n       if (veclen > sc->simdlen)\n \tveclen = sc->simdlen;\n       if (sc->mask_mode != VOIDmode)\n@@ -792,8 +792,8 @@ simd_clone_init_simd_arrays (struct cgraph_node *node,\n \t\t  arg = DECL_CHAIN (arg);\n \t\t  j++;\n \t\t}\n-\t      elemsize\n-\t\t= GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (TREE_TYPE (arg))));\n+\t      tree elemtype = TREE_TYPE (TREE_TYPE (arg));\n+\t      elemsize = GET_MODE_SIZE (SCALAR_TYPE_MODE (elemtype));\n \t      tree t = build2 (MEM_REF, TREE_TYPE (arg), ptr,\n \t\t\t       build_int_cst (ptype, k * elemsize));\n \t      t = build2 (MODIFY_EXPR, TREE_TYPE (t), t, arg);\n@@ -1226,7 +1226,7 @@ simd_clone_adjust (struct cgraph_node *node)\n \t\t\t      mask_array, iter1, NULL, NULL);\n \t  g = gimple_build_assign (mask, aref);\n \t  gsi_insert_after (&gsi, g, GSI_CONTINUE_LINKING);\n-\t  int bitsize = GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (aref)));\n+\t  int bitsize = GET_MODE_BITSIZE (SCALAR_TYPE_MODE (TREE_TYPE (aref)));\n \t  if (!INTEGRAL_TYPE_P (TREE_TYPE (aref)))\n \t    {\n \t      aref = build1 (VIEW_CONVERT_EXPR,"}, {"sha": "d6c1bb6e1f534278db164268b400156438521137", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=b397965cae46d88d4c274fb2ecdde9a4714a4e6a", "patch": "@@ -2219,10 +2219,13 @@ layout_type (tree type)\n       }\n \n    case FIXED_POINT_TYPE:\n-     /* TYPE_MODE (type) has been set already.  */\n-     TYPE_SIZE (type) = bitsize_int (GET_MODE_BITSIZE (TYPE_MODE (type)));\n-     TYPE_SIZE_UNIT (type) = size_int (GET_MODE_SIZE (TYPE_MODE (type)));\n-     break;\n+     {\n+       /* TYPE_MODE (type) has been set already.  */\n+       scalar_mode mode = SCALAR_TYPE_MODE (type);\n+       TYPE_SIZE (type) = bitsize_int (GET_MODE_BITSIZE (mode));\n+       TYPE_SIZE_UNIT (type) = size_int (GET_MODE_SIZE (mode));\n+       break;\n+     }\n \n     case COMPLEX_TYPE:\n       TYPE_UNSIGNED (type) = TYPE_UNSIGNED (TREE_TYPE (type));\n@@ -2243,7 +2246,8 @@ layout_type (tree type)\n \t/* Find an appropriate mode for the vector type.  */\n \tif (TYPE_MODE (type) == VOIDmode)\n \t  SET_TYPE_MODE (type,\n-\t\t\t mode_for_vector (TYPE_MODE (innertype), nunits));\n+\t\t\t mode_for_vector (SCALAR_TYPE_MODE (innertype),\n+\t\t\t\t\t  nunits));\n \n \tTYPE_SATURATING (type) = TYPE_SATURATING (TREE_TYPE (type));\n         TYPE_UNSIGNED (type) = TYPE_UNSIGNED (TREE_TYPE (type));"}, {"sha": "b7593068ea9ee3bfa6fb2b78ac7004aa37ada133", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=b397965cae46d88d4c274fb2ecdde9a4714a4e6a", "patch": "@@ -4192,7 +4192,7 @@ verify_gimple_assign_ternary (gassign *stmt)\n \n       if (TREE_CODE (TREE_TYPE (rhs3_type)) != INTEGER_TYPE\n \t  || GET_MODE_BITSIZE (SCALAR_INT_TYPE_MODE (TREE_TYPE (rhs3_type)))\n-\t     != GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (rhs1_type))))\n+\t     != GET_MODE_BITSIZE (SCALAR_TYPE_MODE (TREE_TYPE (rhs1_type))))\n \t{\n \t  error (\"invalid mask type in vector permute expression\");\n \t  debug_generic_expr (lhs_type);"}, {"sha": "cce5dc7b7bcce4fae1bc112362e40b8859c0901d", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=b397965cae46d88d4c274fb2ecdde9a4714a4e6a", "patch": "@@ -3879,7 +3879,7 @@ estimate_move_cost (tree type, bool ARG_UNUSED (speed_p))\n \n   if (TREE_CODE (type) == VECTOR_TYPE)\n     {\n-      machine_mode inner = TYPE_MODE (TREE_TYPE (type));\n+      scalar_mode inner = SCALAR_TYPE_MODE (TREE_TYPE (type));\n       machine_mode simd\n \t= targetm.vectorize.preferred_simd_mode (inner);\n       int simd_mode_size = GET_MODE_SIZE (simd);"}, {"sha": "818290cf47c9c0ee60112dd41fd3548a839d0460", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=b397965cae46d88d4c274fb2ecdde9a4714a4e6a", "patch": "@@ -3350,7 +3350,8 @@ convert_plusminus_to_widen (gimple_stmt_iterator *gsi, gimple *stmt,\n   optab this_optab;\n   enum tree_code wmult_code;\n   enum insn_code handler;\n-  machine_mode to_mode, from_mode, actual_mode;\n+  scalar_mode to_mode, from_mode;\n+  machine_mode actual_mode;\n   location_t loc = gimple_location (stmt);\n   int actual_precision;\n   bool from_unsigned1, from_unsigned2;\n@@ -3446,8 +3447,8 @@ convert_plusminus_to_widen (gimple_stmt_iterator *gsi, gimple *stmt,\n   else\n     return false;\n \n-  to_mode = TYPE_MODE (type);\n-  from_mode = TYPE_MODE (type1);\n+  to_mode = SCALAR_TYPE_MODE (type);\n+  from_mode = SCALAR_TYPE_MODE (type1);\n   from_unsigned1 = TYPE_UNSIGNED (type1);\n   from_unsigned2 = TYPE_UNSIGNED (type2);\n   optype = type1;"}, {"sha": "5a1d9ff7a5a4fae50b0c4509cc741087960ac826", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=b397965cae46d88d4c274fb2ecdde9a4714a4e6a", "patch": "@@ -4809,7 +4809,8 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple *stmt,\n \t(index_vec_type);\n \n       /* Get an unsigned integer version of the type of the data vector.  */\n-      int scalar_precision = GET_MODE_PRECISION (TYPE_MODE (scalar_type));\n+      int scalar_precision\n+\t= GET_MODE_PRECISION (SCALAR_TYPE_MODE (scalar_type));\n       tree scalar_type_unsigned = make_unsigned_type (scalar_precision);\n       tree vectype_unsigned = build_vector_type\n \t(scalar_type_unsigned, TYPE_VECTOR_SUBPARTS (vectype));\n@@ -6211,7 +6212,8 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n     }\n   else\n     {\n-      int scalar_precision = GET_MODE_PRECISION (TYPE_MODE (scalar_type));\n+      int scalar_precision\n+\t= GET_MODE_PRECISION (SCALAR_TYPE_MODE (scalar_type));\n       cr_index_scalar_type = make_unsigned_type (scalar_precision);\n       cr_index_vector_type = build_vector_type\n \t(cr_index_scalar_type, TYPE_VECTOR_SUBPARTS (vectype_out));"}, {"sha": "4fee7a8f60ca9fb1ebbf81e3294b39f78ff31ebc", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=b397965cae46d88d4c274fb2ecdde9a4714a4e6a", "patch": "@@ -939,8 +939,8 @@ vect_recog_widen_mult_pattern (vec<gimple *> *stmts,\n   tree itype = type;\n   if (TYPE_PRECISION (type) > TYPE_PRECISION (half_type0) * 2)\n     itype = build_nonstandard_integer_type\n-              (GET_MODE_BITSIZE (TYPE_MODE (half_type0)) * 2,\n-               TYPE_UNSIGNED (type));\n+\t      (GET_MODE_BITSIZE (SCALAR_TYPE_MODE (half_type0)) * 2,\n+\t       TYPE_UNSIGNED (type));\n \n   /* Pattern detected.  */\n   if (dump_enabled_p ())\n@@ -3083,7 +3083,7 @@ vect_recog_mixed_size_cond_pattern (vec<gimple *> *stmts, tree *type_in,\n   \t\t\t\t\t    TYPE_UNSIGNED (type));\n \n   if (itype == NULL_TREE\n-      || GET_MODE_BITSIZE (TYPE_MODE (itype)) != cmp_mode_size)\n+      || GET_MODE_BITSIZE (SCALAR_TYPE_MODE (itype)) != cmp_mode_size)\n     return NULL;\n \n   vecitype = get_vectype_for_scalar_type (itype);\n@@ -3200,7 +3200,7 @@ check_bool_pattern (tree var, vec_info *vinfo, hash_set<gimple *> &stmts)\n \n \t  if (TREE_CODE (TREE_TYPE (rhs1)) != INTEGER_TYPE)\n \t    {\n-\t      machine_mode mode = TYPE_MODE (TREE_TYPE (rhs1));\n+\t      scalar_mode mode = SCALAR_TYPE_MODE (TREE_TYPE (rhs1));\n \t      tree itype\n \t\t= build_nonstandard_integer_type (GET_MODE_BITSIZE (mode), 1);\n \t      vecitype = get_vectype_for_scalar_type (itype);\n@@ -3322,7 +3322,7 @@ adjust_bool_pattern (tree var, tree out_type,\n \t  irhs1 = *defs.get (rhs1);\n \t  tree def_rhs1 = gimple_assign_rhs1 (def_stmt);\n \t  if (TYPE_PRECISION (TREE_TYPE (irhs1))\n-\t      == GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (def_rhs1))))\n+\t      == GET_MODE_BITSIZE (SCALAR_TYPE_MODE (TREE_TYPE (def_rhs1))))\n \t    {\n \t      rhs_code = def_rhs_code;\n \t      rhs1 = def_rhs1;\n@@ -3341,7 +3341,7 @@ adjust_bool_pattern (tree var, tree out_type,\n \t  irhs2 = *defs.get (rhs2);\n \t  tree def_rhs1 = gimple_assign_rhs1 (def_stmt);\n \t  if (TYPE_PRECISION (TREE_TYPE (irhs2))\n-\t      == GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (def_rhs1))))\n+\t      == GET_MODE_BITSIZE (SCALAR_TYPE_MODE (TREE_TYPE (def_rhs1))))\n \t    {\n \t      rhs_code = def_rhs_code;\n \t      rhs1 = def_rhs1;\n@@ -3391,7 +3391,7 @@ adjust_bool_pattern (tree var, tree out_type,\n \t  || (TYPE_PRECISION (TREE_TYPE (rhs1))\n \t      != GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (rhs1)))))\n \t{\n-\t  machine_mode mode = TYPE_MODE (TREE_TYPE (rhs1));\n+\t  scalar_mode mode = SCALAR_TYPE_MODE (TREE_TYPE (rhs1));\n \t  itype\n \t    = build_nonstandard_integer_type (GET_MODE_BITSIZE (mode), 1);\n \t}\n@@ -3544,7 +3544,7 @@ search_type_for_mask_1 (tree var, vec_info *vinfo,\n \t  if (TREE_CODE (TREE_TYPE (rhs1)) != INTEGER_TYPE\n \t      || !TYPE_UNSIGNED (TREE_TYPE (rhs1)))\n \t    {\n-\t      machine_mode mode = TYPE_MODE (TREE_TYPE (rhs1));\n+\t      scalar_mode mode = SCALAR_TYPE_MODE (TREE_TYPE (rhs1));\n \t      res = build_nonstandard_integer_type (GET_MODE_BITSIZE (mode), 1);\n \t    }\n \t  else"}, {"sha": "38738930be32a3698786a73c7174675158d36ea9", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=b397965cae46d88d4c274fb2ecdde9a4714a4e6a", "patch": "@@ -3754,7 +3754,7 @@ vect_schedule_slp_instance (slp_tree node, slp_instance instance,\n \t  v1 = SLP_TREE_VEC_STMTS (node).copy ();\n \t  SLP_TREE_VEC_STMTS (node).truncate (0);\n \t  tree meltype = build_nonstandard_integer_type\n-\t      (GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (vectype))), 1);\n+\t      (GET_MODE_BITSIZE (SCALAR_TYPE_MODE (TREE_TYPE (vectype))), 1);\n \t  tree mvectype = get_same_sized_vectype (meltype, vectype);\n \t  unsigned k = 0, l;\n \t  for (j = 0; j < v0.length (); ++j)"}, {"sha": "e17918a44b1088ec890c89acf7f3e73341ed74ef", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=b397965cae46d88d4c274fb2ecdde9a4714a4e6a", "patch": "@@ -4070,7 +4070,6 @@ vectorizable_conversion (gimple *stmt, gimple_stmt_iterator *gsi,\n   vec<tree> interm_types = vNULL;\n   tree last_oprnd, intermediate_type, cvt_type = NULL_TREE;\n   int op_type;\n-  machine_mode rhs_mode;\n   unsigned short fltsz;\n \n   /* Is STMT a vectorizable conversion?   */\n@@ -4213,6 +4212,9 @@ vectorizable_conversion (gimple *stmt, gimple_stmt_iterator *gsi,\n      needs to be generated.  */\n   gcc_assert (ncopies >= 1);\n \n+  machine_mode lhs_mode = SCALAR_TYPE_MODE (lhs_type);\n+  machine_mode rhs_mode = SCALAR_TYPE_MODE (rhs_type);\n+\n   /* Supportable by target?  */\n   switch (modifier)\n     {\n@@ -4241,12 +4243,11 @@ vectorizable_conversion (gimple *stmt, gimple_stmt_iterator *gsi,\n \t}\n \n       if (code != FLOAT_EXPR\n-\t  || (GET_MODE_SIZE (TYPE_MODE (lhs_type))\n-\t      <= GET_MODE_SIZE (TYPE_MODE (rhs_type))))\n+\t  || GET_MODE_SIZE (lhs_mode) <= GET_MODE_SIZE (rhs_mode))\n \tgoto unsupported;\n \n-      fltsz = GET_MODE_SIZE (TYPE_MODE (lhs_type));\n-      FOR_EACH_2XWIDER_MODE (rhs_mode, TYPE_MODE (rhs_type))\n+      fltsz = GET_MODE_SIZE (lhs_mode);\n+      FOR_EACH_2XWIDER_MODE (rhs_mode, rhs_mode)\n \t{\n \t  if (GET_MODE_SIZE (rhs_mode) > fltsz)\n \t    break;\n@@ -4298,11 +4299,9 @@ vectorizable_conversion (gimple *stmt, gimple_stmt_iterator *gsi,\n \tbreak;\n \n       if (code != FIX_TRUNC_EXPR\n-\t  || (GET_MODE_SIZE (TYPE_MODE (lhs_type))\n-\t      >= GET_MODE_SIZE (TYPE_MODE (rhs_type))))\n+\t  || GET_MODE_SIZE (lhs_mode) >= GET_MODE_SIZE (rhs_mode))\n \tgoto unsupported;\n \n-      rhs_mode = TYPE_MODE (rhs_type);\n       cvt_type\n \t= build_nonstandard_integer_type (GET_MODE_BITSIZE (rhs_mode), 0);\n       cvt_type = get_same_sized_vectype (cvt_type, vectype_in);\n@@ -6026,7 +6025,7 @@ vectorizable_store (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \n \t      /* First check if vec_extract optab doesn't support extraction\n \t\t of vector elts directly.  */\n-\t      machine_mode elmode = TYPE_MODE (elem_type);\n+\t      scalar_mode elmode = SCALAR_TYPE_MODE (elem_type);\n \t      machine_mode vmode = mode_for_vector (elmode, group_size);\n \t      if (! VECTOR_MODE_P (vmode)\n \t\t  || (convert_optab_handler (vec_extract_optab,\n@@ -7064,7 +7063,7 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \t    {\n \t      /* First check if vec_init optab supports construction from\n \t\t vector elts directly.  */\n-\t      machine_mode elmode = TYPE_MODE (TREE_TYPE (vectype));\n+\t      scalar_mode elmode = SCALAR_TYPE_MODE (TREE_TYPE (vectype));\n \t      machine_mode vmode = mode_for_vector (elmode, group_size);\n \t      if (VECTOR_MODE_P (vmode)\n \t\t  && (convert_optab_handler (vec_init_optab,"}, {"sha": "0420808e2f9cc48b3246b9e9389c9f4373349424", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=b397965cae46d88d4c274fb2ecdde9a4714a4e6a", "patch": "@@ -2132,8 +2132,9 @@ build_minus_one_cst (tree type)\n     case FIXED_POINT_TYPE:\n       /* We can only generate 1 for accum types.  */\n       gcc_assert (ALL_SCALAR_ACCUM_MODE_P (TYPE_MODE (type)));\n-      return build_fixed (type, fixed_from_double_int (double_int_minus_one,\n-\t\t\t\t\t\t       TYPE_MODE (type)));\n+      return build_fixed (type,\n+\t\t\t  fixed_from_double_int (double_int_minus_one,\n+\t\t\t\t\t\t SCALAR_TYPE_MODE (type)));\n \n     case VECTOR_TYPE:\n       {"}, {"sha": "19dd8073c555fe7670932923d3bc9ca7e91eeadb", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b397965cae46d88d4c274fb2ecdde9a4714a4e6a", "patch": "@@ -1849,6 +1849,8 @@ extern void protected_set_expr_location (tree, location_t);\n #define TYPE_MODE(NODE) \\\n   (VECTOR_TYPE_P (TYPE_CHECK (NODE)) \\\n    ? vector_type_mode (NODE) : (NODE)->type_common.mode)\n+#define SCALAR_TYPE_MODE(NODE) \\\n+  (as_a <scalar_mode> (TYPE_CHECK (NODE)->type_common.mode))\n #define SCALAR_INT_TYPE_MODE(NODE) \\\n   (as_a <scalar_int_mode> (TYPE_CHECK (NODE)->type_common.mode))\n #define SCALAR_FLOAT_TYPE_MODE(NODE) \\"}, {"sha": "1030168e6b7ac5b7c1b8348d37a90b4e4676b987", "filename": "gcc/ubsan.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=b397965cae46d88d4c274fb2ecdde9a4714a4e6a", "patch": "@@ -124,7 +124,8 @@ tree\n ubsan_encode_value (tree t, enum ubsan_encode_value_phase phase)\n {\n   tree type = TREE_TYPE (t);\n-  const unsigned int bitsize = GET_MODE_BITSIZE (TYPE_MODE (type));\n+  scalar_mode mode = SCALAR_TYPE_MODE (type);\n+  const unsigned int bitsize = GET_MODE_BITSIZE (mode);\n   if (bitsize <= POINTER_SIZE)\n     switch (TREE_CODE (type))\n       {\n@@ -161,10 +162,8 @@ ubsan_encode_value (tree t, enum ubsan_encode_value_phase phase)\n \t    }\n \t  if (phase == UBSAN_ENCODE_VALUE_RTL)\n \t    {\n-\t      rtx mem\n-\t\t= assign_stack_temp_for_type (TYPE_MODE (type),\n-\t\t\t\t\t      GET_MODE_SIZE (TYPE_MODE (type)),\n-\t\t\t\t\t      type);\n+\t      rtx mem = assign_stack_temp_for_type (mode, GET_MODE_SIZE (mode),\n+\t\t\t\t\t\t    type);\n \t      SET_DECL_RTL (var, mem);\n \t      expand_assignment (var, t, false);\n \t      return build_fold_addr_expr (var);"}, {"sha": "adf99fb717a442c9196e37ccfee0414b172f6d1b", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b397965cae46d88d4c274fb2ecdde9a4714a4e6a/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=b397965cae46d88d4c274fb2ecdde9a4714a4e6a", "patch": "@@ -4885,7 +4885,7 @@ output_constant (tree exp, unsigned HOST_WIDE_INT size, unsigned int align,\n \t  break;\n \tcase VECTOR_CST:\n \t  {\n-\t    machine_mode inner = TYPE_MODE (TREE_TYPE (TREE_TYPE (exp)));\n+\t    scalar_mode inner = SCALAR_TYPE_MODE (TREE_TYPE (TREE_TYPE (exp)));\n \t    unsigned int nalign = MIN (align, GET_MODE_ALIGNMENT (inner));\n \t    int elt_size = GET_MODE_SIZE (inner);\n \t    output_constant (VECTOR_CST_ELT (exp, 0), elt_size, align,"}]}