{"sha": "b7ac5fdbe7352bd33f6e9f8629d1140f278060cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdhYzVmZGJlNzM1MmJkMzNmNmU5Zjg2MjlkMTE0MGYyNzgwNjBjYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-10-26T23:48:03Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-10-27T18:03:11Z"}, "message": "compiler, go/internal/gccgoimporter: export notinheap annotation\n\nThis is the gofrontend version of https://golang.org/cl/259297.\nThis is required now because that change is in the 1.15.3 release.\n\nThis requires changing the go/internal/gccgoimporter package, to skip\nthe new annotation. This change will need to be ported to the gc and\nx/tools repos.\n\nFor golang/go#41761\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/265258", "tree": {"sha": "d3b27f28217b8c585d29e0eb4ddb148faa6da911", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3b27f28217b8c585d29e0eb4ddb148faa6da911"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7ac5fdbe7352bd33f6e9f8629d1140f278060cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7ac5fdbe7352bd33f6e9f8629d1140f278060cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7ac5fdbe7352bd33f6e9f8629d1140f278060cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7ac5fdbe7352bd33f6e9f8629d1140f278060cb/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f33e2d8427f347ed265e1c0e11523a650e465a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f33e2d8427f347ed265e1c0e11523a650e465a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f33e2d8427f347ed265e1c0e11523a650e465a6"}], "stats": {"total": 44, "additions": 35, "deletions": 9}, "files": [{"sha": "7d06595450274e41d91e87b2878b33cada7c2314", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7ac5fdbe7352bd33f6e9f8629d1140f278060cb/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7ac5fdbe7352bd33f6e9f8629d1140f278060cb/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=b7ac5fdbe7352bd33f6e9f8629d1140f278060cb", "patch": "@@ -1,4 +1,4 @@\n-4c1e7a083bdea02759cd5d2054038fb8a4a55ec8\n+957591b8a054b692d92203a2420851689875f9c5\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "90a5f6dbcec619f3fe0ebdd16bf470cb2d228cdb", "filename": "gcc/go/gofrontend/export.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7ac5fdbe7352bd33f6e9f8629d1140f278060cb/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7ac5fdbe7352bd33f6e9f8629d1140f278060cb/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.cc?ref=b7ac5fdbe7352bd33f6e9f8629d1140f278060cb", "patch": "@@ -1211,6 +1211,9 @@ Export::write_type_definition(const Type* type, int index)\n       this->write_string(nt->named_object()->name());\n       this->write_c_string(\"\\\" \");\n \n+      if (!nt->in_heap())\n+\tthis->write_c_string(\"notinheap \");\n+\n       if (nt->is_alias())\n \tthis->write_c_string(\"= \");\n     }"}, {"sha": "f671416a42319956dd44644d8259ca5185801627", "filename": "gcc/go/gofrontend/import.cc", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7ac5fdbe7352bd33f6e9f8629d1140f278060cb/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7ac5fdbe7352bd33f6e9f8629d1140f278060cb/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.cc?ref=b7ac5fdbe7352bd33f6e9f8629d1140f278060cb", "patch": "@@ -1049,6 +1049,13 @@ Import::read_named_type(int index)\n       this->require_c_string(\" \");\n     }\n \n+  bool in_heap = true;\n+  if (this->match_c_string(\"notinheap\"))\n+    {\n+      this->require_c_string(\"notinheap \");\n+      in_heap = false;\n+    }\n+\n   bool is_alias = false;\n   if (this->match_c_string(\"= \"))\n     {\n@@ -1102,7 +1109,14 @@ Import::read_named_type(int index)\n   // declaration of a type defined in some other file.\n   Type* type;\n   if (this->match_c_string(\">\") || this->match_c_string(\"\\n\"))\n-    type = this->types_[index];\n+    {\n+      type = this->types_[index];\n+      if (!in_heap)\n+\tgo_error_at(this->location_,\n+\t\t    (\"import error at %d for type index %d: \"\n+\t\t     \"forward declaration marked notinheap\"),\n+\t\t    this->pos(), index);\n+    }\n   else\n     {\n       if (no->is_type_declaration())\n@@ -1117,6 +1131,8 @@ Import::read_named_type(int index)\n \t  // This type has not yet been imported.\n \t  ntype->clear_is_visible();\n \n+\t  if (!in_heap)\n+\t    ntype->set_not_in_heap();\n \t  if (is_alias)\n \t    ntype->set_is_alias();\n "}, {"sha": "f3bcf2eabd47d5def30161b1bf703b5bd4e96989", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7ac5fdbe7352bd33f6e9f8629d1140f278060cb/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7ac5fdbe7352bd33f6e9f8629d1140f278060cb/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=b7ac5fdbe7352bd33f6e9f8629d1140f278060cb", "patch": "@@ -6048,7 +6048,7 @@ Struct_type::do_hash_might_panic()\n // Return whether this struct type is permitted to be in the heap.\n \n bool\n-Struct_type::do_in_heap()\n+Struct_type::do_in_heap() const\n {\n   const Struct_field_list* fields = this->fields_;\n   if (fields == NULL)"}, {"sha": "9ac851699d26f0497503f8b480f7c842c7966f04", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7ac5fdbe7352bd33f6e9f8629d1140f278060cb/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7ac5fdbe7352bd33f6e9f8629d1140f278060cb/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=b7ac5fdbe7352bd33f6e9f8629d1140f278060cb", "patch": "@@ -667,7 +667,7 @@ class Type\n \n   // Whether the type is permitted in the heap.\n   bool\n-  in_heap()\n+  in_heap() const\n   { return this->do_in_heap(); }\n \n   // Return a hash code for this type for the method hash table.\n@@ -1120,7 +1120,7 @@ class Type\n   { return false; }\n \n   virtual bool\n-  do_in_heap()\n+  do_in_heap() const\n   { return true; }\n \n   virtual unsigned int\n@@ -2660,7 +2660,7 @@ class Struct_type : public Type\n   do_hash_might_panic();\n \n   bool\n-  do_in_heap();\n+  do_in_heap() const;\n \n   unsigned int\n   do_hash_for_method(Gogo*, int) const;\n@@ -2842,7 +2842,7 @@ class Array_type : public Type\n   { return this->length_ != NULL && this->element_type_->hash_might_panic(); }\n \n   bool\n-  do_in_heap()\n+  do_in_heap() const\n   { return this->length_ == NULL || this->element_type_->in_heap(); }\n \n   unsigned int\n@@ -3591,7 +3591,7 @@ class Named_type : public Type\n   do_needs_key_update();\n \n   bool\n-  do_in_heap()\n+  do_in_heap() const\n   { return this->in_heap_ && this->type_->in_heap(); }\n \n   unsigned int\n@@ -3754,7 +3754,7 @@ class Forward_declaration_type : public Type\n   { return this->real_type()->needs_key_update(); }\n \n   bool\n-  do_in_heap()\n+  do_in_heap() const\n   { return this->real_type()->in_heap(); }\n \n   unsigned int"}, {"sha": "1b1d07d3f6ed57da2ccbc9edd570064f5be7d101", "filename": "libgo/go/go/internal/gccgoimporter/parser.go", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7ac5fdbe7352bd33f6e9f8629d1140f278060cb/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Fparser.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7ac5fdbe7352bd33f6e9f8629d1140f278060cb/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Fparser.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Fparser.go?ref=b7ac5fdbe7352bd33f6e9f8629d1140f278060cb", "patch": "@@ -517,6 +517,13 @@ func (p *parser) parseNamedType(nlist []interface{}) types.Type {\n \t\tp.errorf(\"%v has nil type\", obj)\n \t}\n \n+\tif p.tok == scanner.Ident && p.lit == \"notinheap\" {\n+\t\tp.next()\n+\t\t// The go/types package has no way of recording that\n+\t\t// this type is marked notinheap. Presumably no user\n+\t\t// of this package actually cares.\n+\t}\n+\n \t// type alias\n \tif p.tok == '=' {\n \t\tp.next()"}]}