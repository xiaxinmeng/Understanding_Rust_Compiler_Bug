{"sha": "8ab3bdac33672a2ec681e8d57869830fdcaffd0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFiM2JkYWMzMzY3MmEyZWM2ODFlOGQ1Nzg2OTgzMGZkY2FmZmQwZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-05-13T12:27:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-05-13T12:27:18Z"}, "message": "re PR tree-optimization/42587 (bswap not recognized for memory)\n\n2016-05-13  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/42587\n\t* tree-ssa-math-opts.c (perform_symbolic_merge): Handle BIT_FIELD_REF.\n\t(find_bswap_or_nop_1): Likewise.\n\t(bswap_replace): Likewise.\n\n\t* gcc.dg/optimize-bswapsi-4.c: New testcase.\n\nFrom-SVN: r236204", "tree": {"sha": "96009fea42a0010c478452c737b7da940e24955b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96009fea42a0010c478452c737b7da940e24955b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ab3bdac33672a2ec681e8d57869830fdcaffd0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ab3bdac33672a2ec681e8d57869830fdcaffd0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ab3bdac33672a2ec681e8d57869830fdcaffd0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ab3bdac33672a2ec681e8d57869830fdcaffd0e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "310aba3bbe9b1e053ec90d92ed5a58d24cde3b85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/310aba3bbe9b1e053ec90d92ed5a58d24cde3b85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/310aba3bbe9b1e053ec90d92ed5a58d24cde3b85"}], "stats": {"total": 84, "additions": 83, "deletions": 1}, "files": [{"sha": "9661e5108ecd4041299d526367e62d010d223843", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab3bdac33672a2ec681e8d57869830fdcaffd0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab3bdac33672a2ec681e8d57869830fdcaffd0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ab3bdac33672a2ec681e8d57869830fdcaffd0e", "patch": "@@ -1,3 +1,10 @@\n+2016-05-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/42587\n+\t* tree-ssa-math-opts.c (perform_symbolic_merge): Handle BIT_FIELD_REF.\n+\t(find_bswap_or_nop_1): Likewise.\n+\t(bswap_replace): Likewise.\n+\n 2016-05-13  Martin Liska  <mliska@suse.cz>\n \n \t* tree-vect-patterns.c (vect_recog_mask_conversion_pattern):"}, {"sha": "57b7580edafe71637fe8c789934f35b5b0f34997", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab3bdac33672a2ec681e8d57869830fdcaffd0e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab3bdac33672a2ec681e8d57869830fdcaffd0e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ab3bdac33672a2ec681e8d57869830fdcaffd0e", "patch": "@@ -1,3 +1,8 @@\n+2016-05-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/42587\n+\t* gcc.dg/optimize-bswapsi-4.c: New testcase.\n+\n 2016-05-13  Martin Liska  <mliska@suse.cz>\n \n \t* g++.dg/tree-ssa/ivopts-3.C: Change test-case to follow"}, {"sha": "a298486c439fedb12941fa450788f4c09b2ac2f5", "filename": "gcc/testsuite/gcc.dg/optimize-bswapsi-4.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab3bdac33672a2ec681e8d57869830fdcaffd0e/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapsi-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab3bdac33672a2ec681e8d57869830fdcaffd0e/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapsi-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapsi-4.c?ref=8ab3bdac33672a2ec681e8d57869830fdcaffd0e", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target bswap32 } */\n+/* { dg-options \"-O2 -fdump-tree-bswap\" } */\n+/* { dg-additional-options \"-march=z900\" { target s390-*-* } } */\n+\n+typedef unsigned char u8;\n+typedef unsigned int u32;\n+union __anonunion\n+{\n+  u32 value;\n+  u8 bytes[4];\n+};\n+\n+u32\n+acpi_ut_dword_byte_swap (u32 value)\n+{\n+  union __anonunion in;\n+  in.value = value;\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  return ((in.bytes[0] << 24) | (in.bytes[1] << 16)\n+\t  | (in.bytes[2] << 8) | in.bytes[3]);\n+#else\n+  return ((in.bytes[3] << 24) | (in.bytes[2] << 16)\n+\t  | (in.bytes[1] << 8) | in.bytes[0]);\n+#endif\n+}\n+\n+/* { dg-final { scan-tree-dump \"32 bit bswap implementation found at\" \"bswap\" } } */"}, {"sha": "81688cd096c387532ceb155f168cde25b4a431e2", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab3bdac33672a2ec681e8d57869830fdcaffd0e/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab3bdac33672a2ec681e8d57869830fdcaffd0e/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=8ab3bdac33672a2ec681e8d57869830fdcaffd0e", "patch": "@@ -2160,9 +2160,16 @@ perform_symbolic_merge (gimple *source_stmt1, struct symbolic_number *n1,\n   gimple *source_stmt;\n   struct symbolic_number *n_start;\n \n+  tree rhs1 = gimple_assign_rhs1 (source_stmt1);\n+  if (TREE_CODE (rhs1) == BIT_FIELD_REF)\n+    rhs1 = TREE_OPERAND (rhs1, 0);\n+  tree rhs2 = gimple_assign_rhs1 (source_stmt2);\n+  if (TREE_CODE (rhs2) == BIT_FIELD_REF)\n+    rhs2 = TREE_OPERAND (rhs2, 0);\n+\n   /* Sources are different, cancel bswap if they are not memory location with\n      the same base (array, structure, ...).  */\n-  if (gimple_assign_rhs1 (source_stmt1) != gimple_assign_rhs1 (source_stmt2))\n+  if (rhs1 != rhs2)\n     {\n       uint64_t inc;\n       HOST_WIDE_INT start_sub, end_sub, end1, end2, end;\n@@ -2285,6 +2292,39 @@ find_bswap_or_nop_1 (gimple *stmt, struct symbolic_number *n, int limit)\n   if (find_bswap_or_nop_load (stmt, rhs1, n))\n     return stmt;\n \n+  /* Handle BIT_FIELD_REF.  */\n+  if (TREE_CODE (rhs1) == BIT_FIELD_REF\n+      && TREE_CODE (TREE_OPERAND (rhs1, 0)) == SSA_NAME)\n+    {\n+      unsigned HOST_WIDE_INT bitsize = tree_to_uhwi (TREE_OPERAND (rhs1, 1));\n+      unsigned HOST_WIDE_INT bitpos = tree_to_uhwi (TREE_OPERAND (rhs1, 2));\n+      if (bitpos % BITS_PER_UNIT == 0\n+\t  && bitsize % BITS_PER_UNIT == 0\n+\t  && init_symbolic_number (n, TREE_OPERAND (rhs1, 0)))\n+\t{\n+\t  /* Shift.  */\n+\t  if (!do_shift_rotate (RSHIFT_EXPR, n, bitpos))\n+\t    return NULL;\n+\n+\t  /* Mask.  */\n+\t  uint64_t mask = 0;\n+\t  uint64_t tmp = (1 << BITS_PER_UNIT) - 1;\n+\t  for (unsigned i = 0; i < bitsize / BITS_PER_UNIT;\n+\t       i++, tmp <<= BITS_PER_UNIT)\n+\t    mask |= (uint64_t) MARKER_MASK << (i * BITS_PER_MARKER);\n+\t  n->n &= mask;\n+\n+\t  /* Convert.  */\n+\t  n->type = TREE_TYPE (rhs1);\n+\t  if (!n->base_addr)\n+\t    n->range = TYPE_PRECISION (n->type) / BITS_PER_UNIT;\n+\n+\t  return verify_symbolic_number_p (n, stmt) ? stmt : NULL;\n+\t}\n+\n+      return NULL;\n+    }\n+\n   if (TREE_CODE (rhs1) != SSA_NAME)\n     return NULL;\n \n@@ -2683,6 +2723,8 @@ bswap_replace (gimple *cur_stmt, gimple *src_stmt, tree fndecl,\n \t}\n       src = val_tmp;\n     }\n+  else if (TREE_CODE (src) == BIT_FIELD_REF)\n+    src = TREE_OPERAND (src, 0);\n \n   if (n->range == 16)\n     bswap_stats.found_16bit++;"}]}