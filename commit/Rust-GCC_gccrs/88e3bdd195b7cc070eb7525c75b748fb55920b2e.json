{"sha": "88e3bdd195b7cc070eb7525c75b748fb55920b2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhlM2JkZDE5NWI3Y2MwNzBlYjc1MjVjNzViNzQ4ZmI1NTkyMGIyZQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2016-05-27T13:05:34Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-05-27T13:05:34Z"}, "message": "[AArch64] PR target/63596, honor tree-stdarg analysis result to improve VAARG codegen\n\ngcc/\n\tPR target/63596\n\t* config/aarch64/aarch64.c (aarch64_expand_builtin_va_start): Honor\n\ttree-stdarg analysis results.\n\t(aarch64_setup_incoming_varargs): Likewise.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/va_arg_1.c: New testcase.\n\t* gcc.target/aarch64/va_arg_2.c: Likewise.\n\t* gcc.target/aarch64/va_arg_3.c: Likewise.\n\nFrom-SVN: r236819", "tree": {"sha": "05ef7d57add6ed3f7dcbb24ba66f62bf55c4720b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05ef7d57add6ed3f7dcbb24ba66f62bf55c4720b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88e3bdd195b7cc070eb7525c75b748fb55920b2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88e3bdd195b7cc070eb7525c75b748fb55920b2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88e3bdd195b7cc070eb7525c75b748fb55920b2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88e3bdd195b7cc070eb7525c75b748fb55920b2e/comments", "author": null, "committer": null, "parents": [{"sha": "3fd6b9cc8bb19571726203e309e0b2472e6b8e43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd6b9cc8bb19571726203e309e0b2472e6b8e43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fd6b9cc8bb19571726203e309e0b2472e6b8e43"}], "stats": {"total": 106, "additions": 92, "deletions": 14}, "files": [{"sha": "55966de403482d372b64013e1158096a8b8c8cc1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e3bdd195b7cc070eb7525c75b748fb55920b2e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e3bdd195b7cc070eb7525c75b748fb55920b2e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88e3bdd195b7cc070eb7525c75b748fb55920b2e", "patch": "@@ -1,3 +1,10 @@\n+2016-05-27  Jiong Wang  <jiong.wang@arm.com>\n+\n+\tPR target/63596\n+\t* config/aarch64/aarch64.c (aarch64_expand_builtin_va_start): Honor\n+\ttree-stdarg analysis results.\n+\t(aarch64_setup_incoming_varargs): Likewise.\n+\n 2016-05-27  Jiong Wang  <jiong.wang@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_build_builtin_va_list): Initialize"}, {"sha": "2315939ebfad3bad3a514b716a8f23df23971537", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e3bdd195b7cc070eb7525c75b748fb55920b2e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e3bdd195b7cc070eb7525c75b748fb55920b2e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=88e3bdd195b7cc070eb7525c75b748fb55920b2e", "patch": "@@ -9330,7 +9330,7 @@ aarch64_build_builtin_va_list (void)\n \t\t\tFIELD_DECL, get_identifier (\"__vr_offs\"),\n \t\t\tinteger_type_node);\n \n-  /* Tell tree-stdarg pass what's our internal offset fields.\n+  /* Tell tree-stdarg pass about our internal offset fields.\n      NOTE: va_list_gpr/fpr_counter_field are only used for tree comparision\n      purpose to identify whether the code is updating va_list internal\n      offset fields through irregular way.  */\n@@ -9369,15 +9369,17 @@ aarch64_expand_builtin_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n   tree f_stack, f_grtop, f_vrtop, f_groff, f_vroff;\n   tree stack, grtop, vrtop, groff, vroff;\n   tree t;\n-  int gr_save_area_size;\n-  int vr_save_area_size;\n+  int gr_save_area_size = cfun->va_list_gpr_size;\n+  int vr_save_area_size = cfun->va_list_fpr_size;\n   int vr_offset;\n \n   cum = &crtl->args.info;\n-  gr_save_area_size\n-    = (NUM_ARG_REGS - cum->aapcs_ncrn) * UNITS_PER_WORD;\n-  vr_save_area_size\n-    = (NUM_FP_ARG_REGS - cum->aapcs_nvrn) * UNITS_PER_VREG;\n+  if (cfun->va_list_gpr_size)\n+    gr_save_area_size = MIN ((NUM_ARG_REGS - cum->aapcs_ncrn) * UNITS_PER_WORD,\n+\t\t\t     cfun->va_list_gpr_size);\n+  if (cfun->va_list_fpr_size)\n+    vr_save_area_size = MIN ((NUM_FP_ARG_REGS - cum->aapcs_nvrn)\n+\t\t\t     * UNITS_PER_VREG, cfun->va_list_fpr_size);\n \n   if (!TARGET_FLOAT)\n     {\n@@ -9711,17 +9713,23 @@ aarch64_setup_incoming_varargs (cumulative_args_t cum_v, machine_mode mode,\n {\n   CUMULATIVE_ARGS *cum = get_cumulative_args (cum_v);\n   CUMULATIVE_ARGS local_cum;\n-  int gr_saved, vr_saved;\n+  int gr_saved = cfun->va_list_gpr_size;\n+  int vr_saved = cfun->va_list_fpr_size;\n \n   /* The caller has advanced CUM up to, but not beyond, the last named\n      argument.  Advance a local copy of CUM past the last \"real\" named\n      argument, to find out how many registers are left over.  */\n   local_cum = *cum;\n   aarch64_function_arg_advance (pack_cumulative_args(&local_cum), mode, type, true);\n \n-  /* Found out how many registers we need to save.  */\n-  gr_saved = NUM_ARG_REGS - local_cum.aapcs_ncrn;\n-  vr_saved = NUM_FP_ARG_REGS - local_cum.aapcs_nvrn;\n+  /* Found out how many registers we need to save.\n+     Honor tree-stdvar analysis results.  */\n+  if (cfun->va_list_gpr_size)\n+    gr_saved = MIN (NUM_ARG_REGS - local_cum.aapcs_ncrn,\n+\t\t    cfun->va_list_gpr_size / UNITS_PER_WORD);\n+  if (cfun->va_list_fpr_size)\n+    vr_saved = MIN (NUM_FP_ARG_REGS - local_cum.aapcs_nvrn,\n+\t\t    cfun->va_list_fpr_size / UNITS_PER_VREG);\n \n   if (!TARGET_FLOAT)\n     {\n@@ -9749,7 +9757,7 @@ aarch64_setup_incoming_varargs (cumulative_args_t cum_v, machine_mode mode,\n \t  /* We can't use move_block_from_reg, because it will use\n \t     the wrong mode, storing D regs only.  */\n \t  machine_mode mode = TImode;\n-\t  int off, i;\n+\t  int off, i, vr_start;\n \n \t  /* Set OFF to the offset from virtual_incoming_args_rtx of\n \t     the first vector register.  The VR save area lies below\n@@ -9758,14 +9766,15 @@ aarch64_setup_incoming_varargs (cumulative_args_t cum_v, machine_mode mode,\n \t\t\t   STACK_BOUNDARY / BITS_PER_UNIT);\n \t  off -= vr_saved * UNITS_PER_VREG;\n \n-\t  for (i = local_cum.aapcs_nvrn; i < NUM_FP_ARG_REGS; ++i)\n+\t  vr_start = V0_REGNUM + local_cum.aapcs_nvrn;\n+\t  for (i = 0; i < vr_saved; ++i)\n \t    {\n \t      rtx ptr, mem;\n \n \t      ptr = plus_constant (Pmode, virtual_incoming_args_rtx, off);\n \t      mem = gen_frame_mem (mode, ptr);\n \t      set_mem_alias_set (mem, get_varargs_alias_set ());\n-\t      aarch64_emit_move (mem, gen_rtx_REG (mode, V0_REGNUM + i));\n+\t      aarch64_emit_move (mem, gen_rtx_REG (mode, vr_start + i));\n \t      off += UNITS_PER_VREG;\n \t    }\n \t}"}, {"sha": "70b372510a9b3993197d202fb5b1210f1faf3958", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e3bdd195b7cc070eb7525c75b748fb55920b2e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e3bdd195b7cc070eb7525c75b748fb55920b2e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88e3bdd195b7cc070eb7525c75b748fb55920b2e", "patch": "@@ -1,3 +1,10 @@\n+2016-05-27  Jiong Wang  <jiong.wang@arm.com>\n+\n+\tPR target/63596\n+\t* gcc.target/aarch64/va_arg_1.c: New testcase.\n+\t* gcc.target/aarch64/va_arg_2.c: Likewise.\n+\t* gcc.target/aarch64/va_arg_3.c: Likewise.\n+\n 2016-05-27  Jiong Wang  <jiong.wang@arm.com>\n \n \t* gcc.dg/tree-ssa/stdarg-2.c: Enable all testcases for AArch64."}, {"sha": "e8e3cdac51350b545e5c2a644a3e1f4d1c37f88d", "filename": "gcc/testsuite/gcc.target/aarch64/va_arg_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e3bdd195b7cc070eb7525c75b748fb55920b2e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fva_arg_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e3bdd195b7cc070eb7525c75b748fb55920b2e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fva_arg_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fva_arg_1.c?ref=88e3bdd195b7cc070eb7525c75b748fb55920b2e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+\n+int\n+f (int a, ...)\n+{\n+  /* { dg-final { scan-assembler-not \"str\" } } */\n+  return a;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "f5c46cbd67f1d37a8178bceb9e09950f4834142c", "filename": "gcc/testsuite/gcc.target/aarch64/va_arg_2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e3bdd195b7cc070eb7525c75b748fb55920b2e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fva_arg_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e3bdd195b7cc070eb7525c75b748fb55920b2e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fva_arg_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fva_arg_2.c?ref=88e3bdd195b7cc070eb7525c75b748fb55920b2e", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+\n+int\n+foo (char *fmt, ...)\n+{\n+  int d;\n+  __builtin_va_list ap;\n+\n+  __builtin_va_start (ap, fmt);\n+  d = __builtin_va_arg (ap, int);\n+  __builtin_va_end (ap);\n+\n+  /* { dg-final { scan-assembler-not \"x7\" } } */\n+  return d;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "7f7601a8070017e2dc763f880cfd1071879fc93d", "filename": "gcc/testsuite/gcc.target/aarch64/va_arg_3.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e3bdd195b7cc070eb7525c75b748fb55920b2e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fva_arg_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e3bdd195b7cc070eb7525c75b748fb55920b2e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fva_arg_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fva_arg_3.c?ref=88e3bdd195b7cc070eb7525c75b748fb55920b2e", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+\n+int d2i (double a);\n+\n+int\n+foo (char *fmt, ...)\n+{\n+  int d, e;\n+  double f, g;\n+  __builtin_va_list ap;\n+\n+  __builtin_va_start (ap, fmt);\n+  d = __builtin_va_arg (ap, int);\n+  f = __builtin_va_arg (ap, double);\n+  g = __builtin_va_arg (ap, double);\n+  d += d2i (f);\n+  d += d2i (g);\n+  __builtin_va_end (ap);\n+\n+  /* { dg-final { scan-assembler-not \"x7\" } } */\n+  /* { dg-final { scan-assembler-not \"q7\" } } */\n+  return d;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}]}