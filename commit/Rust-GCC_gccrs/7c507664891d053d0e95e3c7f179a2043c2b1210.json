{"sha": "7c507664891d053d0e95e3c7f179a2043c2b1210", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M1MDc2NjQ4OTFkMDUzZDBlOTVlM2M3ZjE3OWEyMDQzYzJiMTIxMA==", "commit": {"author": {"name": "Robert Suchanek", "email": "robert.suchanek@imgtec.com", "date": "2016-10-11T07:58:54Z"}, "committer": {"name": "Robert Suchanek", "email": "rts@gcc.gnu.org", "date": "2016-10-11T07:58:54Z"}, "message": "[MIPS] Disable -mbranch-likely for -Os when targetting generic arch\n\ngcc/\n\t* config/mips/mips-cpus.def: Replace PTF_AVOID_BRANCHLIKELY with\n\tPTF_AVOID_BRANCHLIKELY_ALWAYS for generic architecture and with\n\tPTF_AVOID_BRANCHLIKELY_SPEED for others.\n\t(mips2, mips3, mips4): Add PTF_AVOID_BRANCHLIKELY_SIZE to tune flags.\n\t* config/mips/mips.c (mips_option_override): Enable the branch likely\n\tdepending on the tune flags and optimization level.\n\t* config/mips/mips.h (PTF_AVOID_BRANCHLIKELY): Remove.\n\t(PTF_AVOID_BRANCHLIKELY_SPEED): Define.\n\t(PTF_AVOID_BRANCHLIKELY_SIZE): Likewise.\n\t(PTF_AVOID_BRANCHLIKELY_ALWAYS): Likewise.\n\nFrom-SVN: r240965", "tree": {"sha": "ac59a41dc078d46c59060ef578565c45c9befbbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac59a41dc078d46c59060ef578565c45c9befbbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c507664891d053d0e95e3c7f179a2043c2b1210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c507664891d053d0e95e3c7f179a2043c2b1210", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c507664891d053d0e95e3c7f179a2043c2b1210", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c507664891d053d0e95e3c7f179a2043c2b1210/comments", "author": null, "committer": null, "parents": [{"sha": "ec1db2a9949e828d4b65757c8a3de2bde37ef493", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec1db2a9949e828d4b65757c8a3de2bde37ef493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec1db2a9949e828d4b65757c8a3de2bde37ef493"}], "stats": {"total": 101, "additions": 66, "deletions": 35}, "files": [{"sha": "a8860a5fc2551c60688aa4effdc5ed054699bb78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c507664891d053d0e95e3c7f179a2043c2b1210/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c507664891d053d0e95e3c7f179a2043c2b1210/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c507664891d053d0e95e3c7f179a2043c2b1210", "patch": "@@ -1,3 +1,17 @@\n+2016-10-11  Robert Suchanek  <robert.suchanek@imgtec.com>\n+\n+\t* config/mips/mips-cpus.def: Replace PTF_AVOID_BRANCHLIKELY with\n+\tPTF_AVOID_BRANCHLIKELY_ALWAYS for generic architecture and with\n+\tPTF_AVOID_BRANCHLIKELY_SPEED for others.\n+\t(mips2, mips3, mips4): Add PTF_AVOID_BRANCHLIKELY_SIZE to tune\n+\tflags.\n+\t* config/mips/mips.c (mips_option_override): Enable the branch\n+\tlikely depending on the tune flags and optimization level.\n+\t* config/mips/mips.h (PTF_AVOID_BRANCHLIKELY): Remove.\n+\t(PTF_AVOID_BRANCHLIKELY_SPEED): Define.\n+\t(PTF_AVOID_BRANCHLIKELY_SIZE): Likewise.\n+\t(PTF_AVOID_BRANCHLIKELY_ALWAYS): Likewise.\n+\n 2016-10-11  Richard Biener  <rguenther@suse.de>\n \n \t* lto-streamer-out.c (collect_block_tree_leafs): New helper."}, {"sha": "70406b4f59f2ba5f3002f262b84e43f93a9746ee", "filename": "gcc/config/mips/mips-cpus.def", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c507664891d053d0e95e3c7f179a2043c2b1210/gcc%2Fconfig%2Fmips%2Fmips-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c507664891d053d0e95e3c7f179a2043c2b1210/gcc%2Fconfig%2Fmips%2Fmips-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-cpus.def?ref=7c507664891d053d0e95e3c7f179a2043c2b1210", "patch": "@@ -34,25 +34,25 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Entries for generic ISAs.  */\n MIPS_CPU (\"mips1\", PROCESSOR_R3000, 1, 0)\n-MIPS_CPU (\"mips2\", PROCESSOR_R6000, 2, 0)\n-MIPS_CPU (\"mips3\", PROCESSOR_R4000, 3, 0)\n-MIPS_CPU (\"mips4\", PROCESSOR_R10000, 4, 0)\n+MIPS_CPU (\"mips2\", PROCESSOR_R6000, 2, PTF_AVOID_BRANCHLIKELY_SIZE)\n+MIPS_CPU (\"mips3\", PROCESSOR_R4000, 3, PTF_AVOID_BRANCHLIKELY_SIZE)\n+MIPS_CPU (\"mips4\", PROCESSOR_R10000, 4, PTF_AVOID_BRANCHLIKELY_SIZE)\n /* Prefer not to use branch-likely instructions for generic MIPS32rX\n    and MIPS64rX code.  The instructions were officially deprecated\n    in revisions 2 and earlier, but revision 3 is likely to downgrade\n    that to a recommendation to avoid the instructions in code that\n    isn't tuned to a specific processor.  */\n-MIPS_CPU (\"mips32\", PROCESSOR_4KC, 32, PTF_AVOID_BRANCHLIKELY)\n-MIPS_CPU (\"mips32r2\", PROCESSOR_74KF2_1, 33, PTF_AVOID_BRANCHLIKELY)\n+MIPS_CPU (\"mips32\", PROCESSOR_4KC, 32, PTF_AVOID_BRANCHLIKELY_ALWAYS)\n+MIPS_CPU (\"mips32r2\", PROCESSOR_74KF2_1, 33, PTF_AVOID_BRANCHLIKELY_ALWAYS)\n /* mips32r3 is micromips hense why it uses the M4K processor.  */\n-MIPS_CPU (\"mips32r3\", PROCESSOR_M4K, 34, PTF_AVOID_BRANCHLIKELY)\n-MIPS_CPU (\"mips32r5\", PROCESSOR_P5600, 36, PTF_AVOID_BRANCHLIKELY)\n+MIPS_CPU (\"mips32r3\", PROCESSOR_M4K, 34, PTF_AVOID_BRANCHLIKELY_ALWAYS)\n+MIPS_CPU (\"mips32r5\", PROCESSOR_P5600, 36, PTF_AVOID_BRANCHLIKELY_ALWAYS)\n MIPS_CPU (\"mips32r6\", PROCESSOR_I6400, 37, 0)\n-MIPS_CPU (\"mips64\", PROCESSOR_5KC, 64, PTF_AVOID_BRANCHLIKELY)\n+MIPS_CPU (\"mips64\", PROCESSOR_5KC, 64, PTF_AVOID_BRANCHLIKELY_ALWAYS)\n /* ??? For now just tune the generic MIPS64r2 and above for 5KC as well.   */\n-MIPS_CPU (\"mips64r2\", PROCESSOR_5KC, 65, PTF_AVOID_BRANCHLIKELY)\n-MIPS_CPU (\"mips64r3\", PROCESSOR_5KC, 66, PTF_AVOID_BRANCHLIKELY)\n-MIPS_CPU (\"mips64r5\", PROCESSOR_5KC, 68, PTF_AVOID_BRANCHLIKELY)\n+MIPS_CPU (\"mips64r2\", PROCESSOR_5KC, 65, PTF_AVOID_BRANCHLIKELY_ALWAYS)\n+MIPS_CPU (\"mips64r3\", PROCESSOR_5KC, 66, PTF_AVOID_BRANCHLIKELY_ALWAYS)\n+MIPS_CPU (\"mips64r5\", PROCESSOR_5KC, 68, PTF_AVOID_BRANCHLIKELY_ALWAYS)\n MIPS_CPU (\"mips64r6\", PROCESSOR_I6400, 69, 0)\n \n /* MIPS I processors.  */\n@@ -77,8 +77,8 @@ MIPS_CPU (\"r4650\", PROCESSOR_R4650, 3, 0)\n MIPS_CPU (\"r4700\", PROCESSOR_R4700, 3, 0)\n MIPS_CPU (\"r5900\", PROCESSOR_R5900, 3, 0)\n /* ST Loongson 2E/2F processors.  */\n-MIPS_CPU (\"loongson2e\", PROCESSOR_LOONGSON_2E, 3, PTF_AVOID_BRANCHLIKELY)\n-MIPS_CPU (\"loongson2f\", PROCESSOR_LOONGSON_2F, 3, PTF_AVOID_BRANCHLIKELY)\n+MIPS_CPU (\"loongson2e\", PROCESSOR_LOONGSON_2E, 3, PTF_AVOID_BRANCHLIKELY_SPEED)\n+MIPS_CPU (\"loongson2f\", PROCESSOR_LOONGSON_2F, 3, PTF_AVOID_BRANCHLIKELY_SPEED)\n \n /* MIPS IV processors. */\n MIPS_CPU (\"r8000\", PROCESSOR_R8000, 4, 0)\n@@ -88,7 +88,7 @@ MIPS_CPU (\"r14000\", PROCESSOR_R10000, 4, 0)\n MIPS_CPU (\"r16000\", PROCESSOR_R10000, 4, 0)\n MIPS_CPU (\"vr5000\", PROCESSOR_R5000, 4, 0)\n MIPS_CPU (\"vr5400\", PROCESSOR_R5400, 4, 0)\n-MIPS_CPU (\"vr5500\", PROCESSOR_R5500, 4, PTF_AVOID_BRANCHLIKELY)\n+MIPS_CPU (\"vr5500\", PROCESSOR_R5500, 4, PTF_AVOID_BRANCHLIKELY_SPEED)\n MIPS_CPU (\"rm7000\", PROCESSOR_R7000, 4, 0)\n MIPS_CPU (\"rm9000\", PROCESSOR_R9000, 4, 0)\n \n@@ -147,27 +147,27 @@ MIPS_CPU (\"1004kf1_1\", PROCESSOR_24KF1_1, 33, 0)\n MIPS_CPU (\"interaptiv\", PROCESSOR_24KF2_1, 33, 0)\n \n /* MIPS32 Release 5 processors.  */\n-MIPS_CPU (\"p5600\", PROCESSOR_P5600, 36, (PTF_AVOID_BRANCHLIKELY\n+MIPS_CPU (\"p5600\", PROCESSOR_P5600, 36, (PTF_AVOID_BRANCHLIKELY_SPEED\n \t\t\t\t\t | PTF_AVOID_IMADD))\n-MIPS_CPU (\"m5100\", PROCESSOR_M5100, 36, PTF_AVOID_BRANCHLIKELY)\n-MIPS_CPU (\"m5101\", PROCESSOR_M5100, 36, PTF_AVOID_BRANCHLIKELY)\n+MIPS_CPU (\"m5100\", PROCESSOR_M5100, 36, PTF_AVOID_BRANCHLIKELY_SPEED)\n+MIPS_CPU (\"m5101\", PROCESSOR_M5100, 36, PTF_AVOID_BRANCHLIKELY_SPEED)\n \n /* MIPS64 processors.  */\n MIPS_CPU (\"5kc\", PROCESSOR_5KC, 64, 0)\n MIPS_CPU (\"5kf\", PROCESSOR_5KF, 64, 0)\n-MIPS_CPU (\"20kc\", PROCESSOR_20KC, 64, PTF_AVOID_BRANCHLIKELY)\n-MIPS_CPU (\"sb1\", PROCESSOR_SB1, 64, PTF_AVOID_BRANCHLIKELY)\n-MIPS_CPU (\"sb1a\", PROCESSOR_SB1A, 64, PTF_AVOID_BRANCHLIKELY)\n-MIPS_CPU (\"sr71000\", PROCESSOR_SR71000, 64, PTF_AVOID_BRANCHLIKELY)\n-MIPS_CPU (\"xlr\", PROCESSOR_XLR, 64, PTF_AVOID_BRANCHLIKELY)\n+MIPS_CPU (\"20kc\", PROCESSOR_20KC, 64, PTF_AVOID_BRANCHLIKELY_SPEED)\n+MIPS_CPU (\"sb1\", PROCESSOR_SB1, 64, PTF_AVOID_BRANCHLIKELY_SPEED)\n+MIPS_CPU (\"sb1a\", PROCESSOR_SB1A, 64, PTF_AVOID_BRANCHLIKELY_SPEED)\n+MIPS_CPU (\"sr71000\", PROCESSOR_SR71000, 64, PTF_AVOID_BRANCHLIKELY_SPEED)\n+MIPS_CPU (\"xlr\", PROCESSOR_XLR, 64, PTF_AVOID_BRANCHLIKELY_SPEED)\n \n /* MIPS64 Release 2 processors.  */\n-MIPS_CPU (\"loongson3a\", PROCESSOR_LOONGSON_3A, 65, PTF_AVOID_BRANCHLIKELY)\n-MIPS_CPU (\"octeon\", PROCESSOR_OCTEON, 65, PTF_AVOID_BRANCHLIKELY)\n-MIPS_CPU (\"octeon+\", PROCESSOR_OCTEON, 65, PTF_AVOID_BRANCHLIKELY)\n-MIPS_CPU (\"octeon2\", PROCESSOR_OCTEON2, 65, PTF_AVOID_BRANCHLIKELY)\n-MIPS_CPU (\"octeon3\", PROCESSOR_OCTEON3, 65, PTF_AVOID_BRANCHLIKELY)\n-MIPS_CPU (\"xlp\", PROCESSOR_XLP, 65, PTF_AVOID_BRANCHLIKELY)\n+MIPS_CPU (\"loongson3a\", PROCESSOR_LOONGSON_3A, 65, PTF_AVOID_BRANCHLIKELY_SPEED)\n+MIPS_CPU (\"octeon\", PROCESSOR_OCTEON, 65, PTF_AVOID_BRANCHLIKELY_SPEED)\n+MIPS_CPU (\"octeon+\", PROCESSOR_OCTEON, 65, PTF_AVOID_BRANCHLIKELY_SPEED)\n+MIPS_CPU (\"octeon2\", PROCESSOR_OCTEON2, 65, PTF_AVOID_BRANCHLIKELY_SPEED)\n+MIPS_CPU (\"octeon3\", PROCESSOR_OCTEON3, 65, PTF_AVOID_BRANCHLIKELY_SPEED)\n+MIPS_CPU (\"xlp\", PROCESSOR_XLP, 65, PTF_AVOID_BRANCHLIKELY_SPEED)\n \n /* MIPS64 Release 6 processors.  */\n MIPS_CPU (\"i6400\", PROCESSOR_I6400, 69, 0)"}, {"sha": "43174b4c1815f56b60dfd70206d9e276f9f4fb5b", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c507664891d053d0e95e3c7f179a2043c2b1210/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c507664891d053d0e95e3c7f179a2043c2b1210/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=7c507664891d053d0e95e3c7f179a2043c2b1210", "patch": "@@ -19652,8 +19652,15 @@ mips_option_override (void)\n   if ((target_flags_explicit & MASK_BRANCHLIKELY) == 0)\n     {\n       if (ISA_HAS_BRANCHLIKELY\n-\t  && (optimize_size\n-\t      || (mips_tune_info->tune_flags & PTF_AVOID_BRANCHLIKELY) == 0))\n+\t  && ((optimize_size\n+\t       && (mips_tune_info->tune_flags\n+\t\t   & PTF_AVOID_BRANCHLIKELY_SIZE) == 0)\n+\t      || (!optimize_size\n+\t\t  && optimize > 0\n+\t\t  && (mips_tune_info->tune_flags\n+\t\t      & PTF_AVOID_BRANCHLIKELY_SPEED) == 0)\n+\t      || (mips_tune_info->tune_flags\n+\t\t  & PTF_AVOID_BRANCHLIKELY_ALWAYS) == 0))\n \ttarget_flags |= MASK_BRANCHLIKELY;\n       else\n \ttarget_flags &= ~MASK_BRANCHLIKELY;"}, {"sha": "81862a97f45f5c302e1a511cfd61d63e9629f5c2", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c507664891d053d0e95e3c7f179a2043c2b1210/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c507664891d053d0e95e3c7f179a2043c2b1210/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=7c507664891d053d0e95e3c7f179a2043c2b1210", "patch": "@@ -44,18 +44,28 @@ extern int target_flags_explicit;\n \n /* Masks that affect tuning.\n \n-   PTF_AVOID_BRANCHLIKELY\n+   PTF_AVOID_BRANCHLIKELY_SPEED\n \tSet if it is usually not profitable to use branch-likely instructions\n-\tfor this target, typically because the branches are always predicted\n-\ttaken and so incur a large overhead when not taken.\n+\tfor this target when optimizing code for speed, typically because\n+\tthe branches are always predicted taken and so incur a large overhead\n+\twhen not taken.\n+\n+   PTF_AVOID_BRANCHLIKELY_SIZE\n+\tAs above but when optimizing for size.\n+\n+   PTF_AVOID_BRANCHLIKELY_ALWAYS\n+\tAs above but regardless of whether we optimize for speed or size.\n \n    PTF_AVOID_IMADD\n \tSet if it is usually not profitable to use the integer MADD or MSUB\n \tinstructions because of the overhead of getting the result out of\n \tthe HI/LO registers.  */\n \n-#define PTF_AVOID_BRANCHLIKELY\t0x1\n-#define PTF_AVOID_IMADD\t\t0x2\n+#define PTF_AVOID_BRANCHLIKELY_SPEED\t0x1\n+#define PTF_AVOID_BRANCHLIKELY_SIZE\t0x2\n+#define PTF_AVOID_BRANCHLIKELY_ALWAYS\t(PTF_AVOID_BRANCHLIKELY_SPEED | \\\n+\t\t\t\t\t PTF_AVOID_BRANCHLIKELY_SIZE)\n+#define PTF_AVOID_IMADD\t\t\t0x4\n \n /* Information about one recognized processor.  Defined here for the\n    benefit of TARGET_CPU_CPP_BUILTINS.  */"}]}