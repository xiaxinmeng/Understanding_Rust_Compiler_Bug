{"sha": "f35ea97de898081cb04ceaa6bca97d2b719e7c47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM1ZWE5N2RlODk4MDgxY2IwNGNlYWE2YmNhOTdkMmI3MTllN2M0Nw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-05-11T14:04:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-05-11T14:04:32Z"}, "message": "re PR tree-optimization/71055 (FAIL: gcc.dg/torture/pr53663-1.c   -Os  execution test)\n\n2016-05-11  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/71055\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): When native-interpreting\n\tsth with precision not equal to access size verify we don't chop\n\toff bits.\n\n\t* gcc.dg/torture/pr71055.c: New testcase.\n\nFrom-SVN: r236122", "tree": {"sha": "36b22664ec960b7983947166fc32bd195c9c804c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36b22664ec960b7983947166fc32bd195c9c804c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f35ea97de898081cb04ceaa6bca97d2b719e7c47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f35ea97de898081cb04ceaa6bca97d2b719e7c47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f35ea97de898081cb04ceaa6bca97d2b719e7c47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f35ea97de898081cb04ceaa6bca97d2b719e7c47/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dff70323a39a34ba26c729f50fe45d78912133e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dff70323a39a34ba26c729f50fe45d78912133e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dff70323a39a34ba26c729f50fe45d78912133e8"}], "stats": {"total": 54, "additions": 52, "deletions": 2}, "files": [{"sha": "740a3f4fc2b0d910f22eda40bc06aa5244c99f30", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f35ea97de898081cb04ceaa6bca97d2b719e7c47/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f35ea97de898081cb04ceaa6bca97d2b719e7c47/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f35ea97de898081cb04ceaa6bca97d2b719e7c47", "patch": "@@ -1,3 +1,10 @@\n+2016-05-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71055\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): When native-interpreting\n+\tsth with precision not equal to access size verify we don't chop\n+\toff bits.\n+\n 2016-05-11  Richard Biener  <rguenther@suse.de>\n \n \tPR debug/71057"}, {"sha": "91703474055341ab3964b3797a4d1f2607b046ea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f35ea97de898081cb04ceaa6bca97d2b719e7c47/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f35ea97de898081cb04ceaa6bca97d2b719e7c47/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f35ea97de898081cb04ceaa6bca97d2b719e7c47", "patch": "@@ -1,3 +1,8 @@\n+2016-05-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71055\n+\t* gcc.dg/torture/pr71055.c: New testcase.\n+\n 2016-05-11  Richard Biener  <rguenther@suse.de>\n \n \tPR debug/71057"}, {"sha": "7fe5a71ce0646667055ce7f5ccde64b35a902165", "filename": "gcc/testsuite/gcc.dg/torture/pr71055.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f35ea97de898081cb04ceaa6bca97d2b719e7c47/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71055.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f35ea97de898081cb04ceaa6bca97d2b719e7c47/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71055.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71055.c?ref=f35ea97de898081cb04ceaa6bca97d2b719e7c47", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+union U { int i; _Bool b; char c; };\n+void __attribute__((noinline,noclone))\n+foo (union U *u)\n+{\n+  if (u->c != 0)\n+    abort ();\n+}\n+int main()\n+{\n+  union U u;\n+  u.i = 10;\n+  u.b = 0;\n+  foo (&u);\n+  return 0;\n+}"}, {"sha": "1567fb96afb4a392335914714ab485091a2e37d5", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f35ea97de898081cb04ceaa6bca97d2b719e7c47/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f35ea97de898081cb04ceaa6bca97d2b719e7c47/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=f35ea97de898081cb04ceaa6bca97d2b719e7c47", "patch": "@@ -1907,14 +1907,34 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n \t\t\t\t    buffer, sizeof (buffer));\n \t  if (len > 0)\n \t    {\n-\t      tree val = native_interpret_expr (vr->type,\n+\t      tree type = vr->type;\n+\t      /* Make sure to interpret in a type that has a range\n+\t         covering the whole access size.  */\n+\t      if (INTEGRAL_TYPE_P (vr->type)\n+\t\t  && ref->size != TYPE_PRECISION (vr->type))\n+\t\ttype = build_nonstandard_integer_type (ref->size,\n+\t\t\t\t\t\t       TYPE_UNSIGNED (type));\n+\t      tree val = native_interpret_expr (type,\n \t\t\t\t\t\tbuffer\n \t\t\t\t\t\t+ ((offset - offset2)\n \t\t\t\t\t\t   / BITS_PER_UNIT),\n \t\t\t\t\t\tref->size / BITS_PER_UNIT);\n+\t      /* If we chop off bits because the types precision doesn't\n+\t\t match the memory access size this is ok when optimizing\n+\t\t reads but not when called from the DSE code during\n+\t\t elimination.  */\n+\t      if (val\n+\t\t  && type != vr->type)\n+\t\t{\n+\t\t  if (! int_fits_type_p (val, vr->type))\n+\t\t    val = NULL_TREE;\n+\t\t  else\n+\t\t    val = fold_convert (vr->type, val);\n+\t\t}\n+\n \t      if (val)\n \t\treturn vn_reference_lookup_or_insert_for_pieces\n-\t\t         (vuse, vr->set, vr->type, vr->operands, val);\n+\t\t\t (vuse, vr->set, vr->type, vr->operands, val);\n \t    }\n \t}\n     }"}]}