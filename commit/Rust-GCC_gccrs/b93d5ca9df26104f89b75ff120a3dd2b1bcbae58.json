{"sha": "b93d5ca9df26104f89b75ff120a3dd2b1bcbae58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkzZDVjYTlkZjI2MTA0Zjg5Yjc1ZmYxMjBhM2RkMmIxYmNiYWU1OA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2006-08-30T09:39:45Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-08-30T09:39:45Z"}, "message": "gnu.ver: Spell out exact signatures for atomic access functions.\n\n2006-08-30  Benjamin Kosnik  <bkoz@redhat.com>\n            Richard Guenther  <rguenther@suse.de>\n\t\n\t* config/abi/pre/gnu.ver: Spell out exact signatures for atomic\n\taccess functions.\n\n\t* include/bits/atomicity.h (__atomic_add_dispatch): Remove\n\tvolatile qualification for _Atomic_word argument.\n\t(__atomic_add_single): Same.\n\t(__exchange_and_add_dispatch): Same.\n\t(__exchange_and_add_single): Same.\n\t\n\nCo-Authored-By: Richard Guenther <rguenther@suse.de>\n\nFrom-SVN: r116584", "tree": {"sha": "9f268cdade8b1cb7937aab5b2355a992a2856854", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f268cdade8b1cb7937aab5b2355a992a2856854"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b93d5ca9df26104f89b75ff120a3dd2b1bcbae58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b93d5ca9df26104f89b75ff120a3dd2b1bcbae58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b93d5ca9df26104f89b75ff120a3dd2b1bcbae58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b93d5ca9df26104f89b75ff120a3dd2b1bcbae58/comments", "author": null, "committer": null, "parents": [{"sha": "c87555d6a6b510f5d64a7dace02461c0021b08b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c87555d6a6b510f5d64a7dace02461c0021b08b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c87555d6a6b510f5d64a7dace02461c0021b08b8"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "caa1fcf68e55c087a93f9eab79154ff457e76bee", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b93d5ca9df26104f89b75ff120a3dd2b1bcbae58/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b93d5ca9df26104f89b75ff120a3dd2b1bcbae58/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b93d5ca9df26104f89b75ff120a3dd2b1bcbae58", "patch": "@@ -1,3 +1,15 @@\n+2006-08-30  Benjamin Kosnik  <bkoz@redhat.com>\n+            Richard Guenther  <rguenther@suse.de>\n+\t\n+\t* config/abi/pre/gnu.ver: Spell out exact signatures for atomic\n+\taccess functions.\n+\n+\t* include/bits/atomicity.h (__atomic_add_dispatch): Remove\n+\tvolatile qualification for _Atomic_word argument.\n+\t(__atomic_add_single): Same.\n+\t(__exchange_and_add_dispatch): Same.\n+\t(__exchange_and_add_single): Same.\n+\t\n 2006-08-29  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/random (subtract_with_carry_01<>::_M_initialize_npows):"}, {"sha": "1a1cfcee8169c57fd4f4eda685726504cdcdef04", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b93d5ca9df26104f89b75ff120a3dd2b1bcbae58/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b93d5ca9df26104f89b75ff120a3dd2b1bcbae58/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=b93d5ca9df26104f89b75ff120a3dd2b1bcbae58", "patch": "@@ -378,8 +378,8 @@ GLIBCXX_3.4 {\n \n     # __gnu_cxx::__atomic_add\n     # __gnu_cxx::__exchange_and_add\n-    _ZN9__gnu_cxx12__atomic_add*;\n-    _ZN9__gnu_cxx18__exchange_and_add*;\n+    _ZN9__gnu_cxx12__atomic_addEPVii;\n+    _ZN9__gnu_cxx18__exchange_and_addEPVii;\n \n     # debug mode\n     _ZN10__gnu_norm15_List_node_base4hook*;"}, {"sha": "79af99ec7241dd581151f68a2b0e9fa24c0fd747", "filename": "libstdc++-v3/include/bits/atomicity.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b93d5ca9df26104f89b75ff120a3dd2b1bcbae58/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b93d5ca9df26104f89b75ff120a3dd2b1bcbae58/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomicity.h?ref=b93d5ca9df26104f89b75ff120a3dd2b1bcbae58", "patch": "@@ -60,20 +60,20 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n #endif\n \n   static inline _Atomic_word\n-  __exchange_and_add_single(volatile _Atomic_word* __mem, int __val)\n+  __exchange_and_add_single(_Atomic_word* __mem, int __val)\n   {\n     _Atomic_word __result = *__mem;\n     *__mem += __val;\n     return __result;\n   }\n \n   static inline void\n-  __atomic_add_single(volatile _Atomic_word* __mem, int __val)\n+  __atomic_add_single(_Atomic_word* __mem, int __val)\n   { *__mem += __val; }\n \n   static inline _Atomic_word\n   __attribute__ ((__unused__))\n-  __exchange_and_add_dispatch(volatile _Atomic_word* __mem, int __val)\n+  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)\n   {\n #ifdef __GTHREADS\n     if (__gthread_active_p())\n@@ -87,7 +87,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n   static inline void\n   __attribute__ ((__unused__))\n-  __atomic_add_dispatch(volatile _Atomic_word* __mem, int __val)\n+  __atomic_add_dispatch(_Atomic_word* __mem, int __val)\n   {\n #ifdef __GTHREADS\n     if (__gthread_active_p())\n@@ -101,8 +101,9 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n _GLIBCXX_END_NAMESPACE\n \n-// Even if the CPU doesn't need a memory barrier, we need to ensure that\n-// the compiler doesn't reorder memory accesses across the barriers.\n+// Even if the CPU doesn't need a memory barrier, we need to ensure\n+// that the compiler doesn't reorder memory accesses across the\n+// barriers.\n #ifndef _GLIBCXX_READ_MEM_BARRIER\n #define _GLIBCXX_READ_MEM_BARRIER __asm __volatile (\"\":::\"memory\")\n #endif"}]}