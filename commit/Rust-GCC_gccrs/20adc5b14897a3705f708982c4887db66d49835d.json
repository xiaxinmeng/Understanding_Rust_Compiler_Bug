{"sha": "20adc5b14897a3705f708982c4887db66d49835d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBhZGM1YjE0ODk3YTM3MDVmNzA4OTgyYzQ4ODdkYjY2ZDQ5ODM1ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-12-11T09:19:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-12-11T09:19:41Z"}, "message": "re PR tree-optimization/59417 (ICE in determine_value_range, at tree-ssa-loop-niter.c:176)\n\n\tPR tree-optimization/59417\n\t* tree-ssa-copy.c (fini_copy_prop): If copy_of[i].value is defined\n\tin a different bb rhan var, only duplicate points-to info and\n\tnot alignment info and don't duplicate range info.\n\t* tree-ssa-loop-niter.c (determine_value_range): Instead of\n\tassertion failure handle inconsistencies in range info by only\n\tusing var's range info and not PHI result range infos.\n\n\t* gcc.c-torture/compile/pr59417.c: New test.\n\nFrom-SVN: r205884", "tree": {"sha": "000f1cb2606177d6c2c6952a5cfbd3062075c818", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/000f1cb2606177d6c2c6952a5cfbd3062075c818"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20adc5b14897a3705f708982c4887db66d49835d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20adc5b14897a3705f708982c4887db66d49835d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20adc5b14897a3705f708982c4887db66d49835d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20adc5b14897a3705f708982c4887db66d49835d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f8cb36a94c67ec4723475e68df75f9571b4ed198", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8cb36a94c67ec4723475e68df75f9571b4ed198", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8cb36a94c67ec4723475e68df75f9571b4ed198"}], "stats": {"total": 80, "additions": 76, "deletions": 4}, "files": [{"sha": "10fae5ac166023d8cdf391280aa13570fda4c14a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20adc5b14897a3705f708982c4887db66d49835d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20adc5b14897a3705f708982c4887db66d49835d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20adc5b14897a3705f708982c4887db66d49835d", "patch": "@@ -1,5 +1,13 @@\n 2013-12-11  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/59417\n+\t* tree-ssa-copy.c (fini_copy_prop): If copy_of[i].value is defined\n+\tin a different bb rhan var, only duplicate points-to info and\n+\tnot alignment info and don't duplicate range info.\n+\t* tree-ssa-loop-niter.c (determine_value_range): Instead of\n+\tassertion failure handle inconsistencies in range info by only\n+\tusing var's range info and not PHI result range infos.\n+\n \tPR tree-optimization/59386\n \t* tree-inline.c (remap_gimple_stmt): If not id->do_not_unshare,\n \tunshare_expr (id->retval) before passing it to gimple_build_assign."}, {"sha": "b7e72deb7b8ad9b1b075c7eaff6111ad59b0b251", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20adc5b14897a3705f708982c4887db66d49835d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20adc5b14897a3705f708982c4887db66d49835d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=20adc5b14897a3705f708982c4887db66d49835d", "patch": "@@ -1,5 +1,8 @@\n 2013-12-11  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/59417\n+\t* gcc.c-torture/compile/pr59417.c: New test.\n+\n \tPR tree-optimization/59386\n \t* gcc.c-torture/compile/pr59386.c: New test.\n "}, {"sha": "227c5d8410597981a187fa3d23f52c0ad365e7dd", "filename": "gcc/testsuite/gcc.c-torture/compile/pr59417.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20adc5b14897a3705f708982c4887db66d49835d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr59417.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20adc5b14897a3705f708982c4887db66d49835d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr59417.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr59417.c?ref=20adc5b14897a3705f708982c4887db66d49835d", "patch": "@@ -0,0 +1,39 @@\n+/* PR tree-optimization/59417 */\n+\n+int a, b, d;\n+short c;\n+\n+void\n+f (void)\n+{\n+  if (b)\n+    {\n+      int *e;\n+\n+      if (d)\n+\t{\n+\t  for (; b; a++)\n+\t  lbl1:\n+\t    d = 0;\n+\n+\t  for (; d <= 1; d++)\n+\t    {\n+\t      int **q = &e;\n+\t      for (**q = 0; **q <= 0; **q++)\n+\t\td = 0;\n+\t    }\n+\t}\n+    }\n+\n+  else\n+    {\n+      int t;\n+      for (c = 0; c < 77; c++)\n+\tfor (c = 0; c < 46; c++);\n+      for (; t <= 0; t++)\n+      lbl2:\n+\t;\n+      goto lbl1;\n+    }\n+  goto lbl2;\n+}"}, {"sha": "11daa5f59cb2a45f0215080a3f2e32194eba734e", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20adc5b14897a3705f708982c4887db66d49835d/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20adc5b14897a3705f708982c4887db66d49835d/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=20adc5b14897a3705f708982c4887db66d49835d", "patch": "@@ -567,14 +567,28 @@ fini_copy_prop (void)\n       if (copy_of[i].value != var\n \t  && TREE_CODE (copy_of[i].value) == SSA_NAME)\n \t{\n+\t  basic_block copy_of_bb\n+\t    = gimple_bb (SSA_NAME_DEF_STMT (copy_of[i].value));\n+\t  basic_block var_bb = gimple_bb (SSA_NAME_DEF_STMT (var));\n \t  if (POINTER_TYPE_P (TREE_TYPE (var))\n \t      && SSA_NAME_PTR_INFO (var)\n \t      && !SSA_NAME_PTR_INFO (copy_of[i].value))\n-\t    duplicate_ssa_name_ptr_info (copy_of[i].value,\n-\t\t\t\t\t SSA_NAME_PTR_INFO (var));\n+\t    {\n+\t      duplicate_ssa_name_ptr_info (copy_of[i].value,\n+\t\t\t\t\t   SSA_NAME_PTR_INFO (var));\n+\t      /* Points-to information is cfg insensitive,\n+\t\t but alignment info might be cfg sensitive, if it\n+\t\t e.g. is derived from VRP derived non-zero bits.\n+\t\t So, do not copy alignment info if the two SSA_NAMEs\n+\t\t aren't defined in the same basic block.  */\n+\t      if (var_bb != copy_of_bb)\n+\t\tmark_ptr_info_alignment_unknown\n+\t\t\t\t(SSA_NAME_PTR_INFO (copy_of[i].value));\n+\t    }\n \t  else if (!POINTER_TYPE_P (TREE_TYPE (var))\n \t\t   && SSA_NAME_RANGE_INFO (var)\n-\t\t   && !SSA_NAME_RANGE_INFO (copy_of[i].value))\n+\t\t   && !SSA_NAME_RANGE_INFO (copy_of[i].value)\n+\t\t   && var_bb == copy_of_bb)\n \t    duplicate_ssa_name_range_info (copy_of[i].value,\n \t\t\t\t\t   SSA_NAME_RANGE_TYPE (var),\n \t\t\t\t\t   SSA_NAME_RANGE_INFO (var));"}, {"sha": "a5a76a497c33ed6875337f02f2861b5779cd780b", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20adc5b14897a3705f708982c4887db66d49835d/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20adc5b14897a3705f708982c4887db66d49835d/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=20adc5b14897a3705f708982c4887db66d49835d", "patch": "@@ -173,7 +173,15 @@ determine_value_range (struct loop *loop, tree type, tree var, mpz_t off,\n \t\t{\n \t\t  minv = minv.max (minc, TYPE_UNSIGNED (type));\n \t\t  maxv = maxv.min (maxc, TYPE_UNSIGNED (type));\n-\t\t  gcc_assert (minv.cmp (maxv, TYPE_UNSIGNED (type)) <= 0);\n+\t\t  /* If the PHI result range are inconsistent with\n+\t\t     the VAR range, give up on looking at the PHI\n+\t\t     results.  This can happen if VR_UNDEFINED is\n+\t\t     involved.  */\n+\t\t  if (minv.cmp (maxv, TYPE_UNSIGNED (type)) > 0)\n+\t\t    {\n+\t\t      rtype = get_range_info (var, &minv, &maxv);\n+\t\t      break;\n+\t\t    }\n \t\t}\n \t    }\n \t}"}]}