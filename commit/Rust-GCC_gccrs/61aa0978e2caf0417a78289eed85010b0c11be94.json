{"sha": "61aa0978e2caf0417a78289eed85010b0c11be94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFhYTA5NzhlMmNhZjA0MTdhNzgyODllZWQ4NTAxMGIwYzExYmU5NA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-26T19:38:42Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-26T19:38:42Z"}, "message": "Various condition-handling calls\n\ngcc/\n2014-08-26  David Malcolm  <dmalcolm@redhat.com>\n\n\t* rtl.h (canonicalize_condition): Strengthen param 1 from rtx to\n\trtx_insn * and param 4 from rtx * to rtx_insn **.\n\t(get_condition): Strengthen param 1 from rtx to rtx_insn * and\n\tparam 2 from rtx * to rtx_insn **.\n\n\t* df.h (can_move_insns_across): Strengthen params 1-4 from rtx to\n\trtx_insn * and final param from rtx * to rtx_insn **.\n\n\t* cfgcleanup.c (try_head_merge_bb): Strengthen local \"move_before\"\n\tfrom rtx to rtx_insn *.\n\t(try_head_merge_bb): Likewise for both locals named \"move_upto\".\n\t* df-problems.c (can_move_insns_across): Likewise for params\n\t\"from\", \"to\", \"across_from\", \"across_to\" and locals \"insn\",\n\t\"next\", \"max_to\".  Strengthen param \"pmove_upto\" from rtx * to\n\trtx_insn **.\n\t* ifcvt.c (struct noce_if_info): Strengthen field \"cond_earliest\"\n\tfrom rtx to rtx_insn *.\n\t(noce_get_alt_condition): Strengthen param \"earliest\" from rtx *\n\tto rtx_insn **.  Strengthen local \"insn\" from rtx to rtx_insn *.\n\t(noce_try_minmax): Strengthen locals \"earliest\", \"seq\" from rtx to\n\trtx_insn *.\n\t(noce_try_abs): Likewise.\n\t(noce_get_condition): Likewise for param \"jump\".  Strengthen param\n\t\"earliest\" from rtx * to rtx_insn **.\n\t(noce_find_if_block): Strengthen local \"cond_earliest\" from rtx to\n\trtx_insn *.\n\t(find_cond_trap): Likewise.\n\t(dead_or_predicable): Likewise for local \"earliest\".\n\t* loop-iv.c (check_simple_exit): Likewise for local \"at\".  Add\n\tchecked cast.\n\t* rtlanal.c (canonicalize_condition): Likewise for param \"insn\"\n\tand local \"prev\".  Strengthen param \"earliest\" from rtx * to\n\trtx_insn **.\n\t(get_condition): Strengthen param \"jump\" from rtx to rtx_insn *\n\tStrengthen param \"earliest\" from rtx * to rtx_insn **.\n\nFrom-SVN: r214542", "tree": {"sha": "b0e02ec21c8175f7fd91f102947087d8b9e81c7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0e02ec21c8175f7fd91f102947087d8b9e81c7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61aa0978e2caf0417a78289eed85010b0c11be94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61aa0978e2caf0417a78289eed85010b0c11be94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61aa0978e2caf0417a78289eed85010b0c11be94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61aa0978e2caf0417a78289eed85010b0c11be94/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51c7dd986881a7b414f3f456be0fe1d4ac6b3dd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51c7dd986881a7b414f3f456be0fe1d4ac6b3dd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51c7dd986881a7b414f3f456be0fe1d4ac6b3dd3"}], "stats": {"total": 110, "additions": 79, "deletions": 31}, "files": [{"sha": "49cd7aeb9d32e31da376cc034d08a9e7dbd73c62", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61aa0978e2caf0417a78289eed85010b0c11be94/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61aa0978e2caf0417a78289eed85010b0c11be94/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61aa0978e2caf0417a78289eed85010b0c11be94", "patch": "@@ -1,3 +1,41 @@\n+2014-08-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* rtl.h (canonicalize_condition): Strengthen param 1 from rtx to\n+\trtx_insn * and param 4 from rtx * to rtx_insn **.\n+\t(get_condition): Strengthen param 1 from rtx to rtx_insn * and\n+\tparam 2 from rtx * to rtx_insn **.\n+\n+\t* df.h (can_move_insns_across): Strengthen params 1-4 from rtx to\n+\trtx_insn * and final param from rtx * to rtx_insn **.\n+\n+\t* cfgcleanup.c (try_head_merge_bb): Strengthen local \"move_before\"\n+\tfrom rtx to rtx_insn *.\n+\t(try_head_merge_bb): Likewise for both locals named \"move_upto\".\n+\t* df-problems.c (can_move_insns_across): Likewise for params\n+\t\"from\", \"to\", \"across_from\", \"across_to\" and locals \"insn\",\n+\t\"next\", \"max_to\".  Strengthen param \"pmove_upto\" from rtx * to\n+\trtx_insn **.\n+\t* ifcvt.c (struct noce_if_info): Strengthen field \"cond_earliest\"\n+\tfrom rtx to rtx_insn *.\n+\t(noce_get_alt_condition): Strengthen param \"earliest\" from rtx *\n+\tto rtx_insn **.  Strengthen local \"insn\" from rtx to rtx_insn *.\n+\t(noce_try_minmax): Strengthen locals \"earliest\", \"seq\" from rtx to\n+\trtx_insn *.\n+\t(noce_try_abs): Likewise.\n+\t(noce_get_condition): Likewise for param \"jump\".  Strengthen param\n+\t\"earliest\" from rtx * to rtx_insn **.\n+\t(noce_find_if_block): Strengthen local \"cond_earliest\" from rtx to\n+\trtx_insn *.\n+\t(find_cond_trap): Likewise.\n+\t(dead_or_predicable): Likewise for local \"earliest\".\n+\t* loop-iv.c (check_simple_exit): Likewise for local \"at\".  Add\n+\tchecked cast.\n+\t* rtlanal.c (canonicalize_condition): Likewise for param \"insn\"\n+\tand local \"prev\".  Strengthen param \"earliest\" from rtx * to\n+\trtx_insn **.\n+\t(get_condition): Strengthen param \"jump\" from rtx to rtx_insn *\n+\tStrengthen param \"earliest\" from rtx * to rtx_insn **.\n+\n 2014-08-26  David Malcolm  <dmalcolm@redhat.com>\n \n \t* fwprop.c (local_ref_killed_between_p): Strengthen params \"from\","}, {"sha": "2264b4bfe54acdd90688381691a2063e88efd6a4", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61aa0978e2caf0417a78289eed85010b0c11be94/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61aa0978e2caf0417a78289eed85010b0c11be94/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=61aa0978e2caf0417a78289eed85010b0c11be94", "patch": "@@ -2291,7 +2291,8 @@ try_head_merge_bb (basic_block bb)\n   bool changed, moveall;\n   unsigned ix;\n   rtx_insn *e0_last_head;\n-  rtx cond, move_before;\n+  rtx cond;\n+  rtx_insn *move_before;\n   unsigned nedges = EDGE_COUNT (bb->succs);\n   rtx_insn *jump = BB_END (bb);\n   regset live, live_union;\n@@ -2455,7 +2456,7 @@ try_head_merge_bb (basic_block bb)\n      with the final move.  */\n   if (final_dest_bb != NULL)\n     {\n-      rtx move_upto;\n+      rtx_insn *move_upto;\n \n       moveall = can_move_insns_across (currptr[0], e0_last_head, move_before,\n \t\t\t\t       jump, e0->dest, live_union,\n@@ -2490,7 +2491,7 @@ try_head_merge_bb (basic_block bb)\n \n   do\n     {\n-      rtx move_upto;\n+      rtx_insn *move_upto;\n       moveall = can_move_insns_across (currptr[0], e0_last_head,\n \t\t\t\t       move_before, jump, e0->dest, live_union,\n \t\t\t\t       NULL, &move_upto);"}, {"sha": "305ed5d9da4cfd828b49101d48421f3dcf04fb71", "filename": "gcc/df-problems.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61aa0978e2caf0417a78289eed85010b0c11be94/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61aa0978e2caf0417a78289eed85010b0c11be94/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=61aa0978e2caf0417a78289eed85010b0c11be94", "patch": "@@ -3664,11 +3664,12 @@ simulate_backwards_to_point (basic_block bb, regset live, rtx point)\n    is set to point at the last moveable insn in such a case.  */\n \n bool\n-can_move_insns_across (rtx from, rtx to, rtx across_from, rtx across_to,\n+can_move_insns_across (rtx_insn *from, rtx_insn *to,\n+\t\t       rtx_insn *across_from, rtx_insn *across_to,\n \t\t       basic_block merge_bb, regset merge_live,\n-\t\t       regset other_branch_live, rtx *pmove_upto)\n+\t\t       regset other_branch_live, rtx_insn **pmove_upto)\n {\n-  rtx insn, next, max_to;\n+  rtx_insn *insn, *next, *max_to;\n   bitmap merge_set, merge_use, local_merge_live;\n   bitmap test_set, test_use;\n   unsigned i, fail = 0;\n@@ -3678,7 +3679,7 @@ can_move_insns_across (rtx from, rtx to, rtx across_from, rtx across_to,\n   bool trapping_insns_in_across = false;\n \n   if (pmove_upto != NULL)\n-    *pmove_upto = NULL_RTX;\n+    *pmove_upto = NULL;\n \n   /* Find real bounds, ignoring debug insns.  */\n   while (!NONDEBUG_INSN_P (from) && from != to)\n@@ -3754,7 +3755,7 @@ can_move_insns_across (rtx from, rtx to, rtx across_from, rtx across_to,\n      the first insn in MERGE that sets a register in TEST_USE, or uses\n      a register in TEST_SET.  We also check for calls, trapping operations,\n      and memory references.  */\n-  max_to = NULL_RTX;\n+  max_to = NULL;\n   for (insn = from; ; insn = next)\n     {\n       if (CALL_P (insn))"}, {"sha": "2699b5b5f55b68a3383e996789fa1897da0e2b06", "filename": "gcc/df.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61aa0978e2caf0417a78289eed85010b0c11be94/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61aa0978e2caf0417a78289eed85010b0c11be94/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=61aa0978e2caf0417a78289eed85010b0c11be94", "patch": "@@ -1018,8 +1018,10 @@ extern void df_simulate_finalize_backwards (basic_block, bitmap);\n extern void df_simulate_initialize_forwards (basic_block, bitmap);\n extern void df_simulate_one_insn_forwards (basic_block, rtx, bitmap);\n extern void simulate_backwards_to_point (basic_block, regset, rtx);\n-extern bool can_move_insns_across (rtx, rtx, rtx, rtx, basic_block, regset,\n-\t\t\t\t   regset, rtx *);\n+extern bool can_move_insns_across (rtx_insn *, rtx_insn *,\n+\t\t\t\t   rtx_insn *, rtx_insn *,\n+\t\t\t\t   basic_block, regset,\n+\t\t\t\t   regset, rtx_insn **);\n /* Functions defined in df-scan.c.  */\n \n extern void df_scan_alloc (bitmap);"}, {"sha": "94b96f33d14c81891a067c71979498137ac03542", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61aa0978e2caf0417a78289eed85010b0c11be94/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61aa0978e2caf0417a78289eed85010b0c11be94/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=61aa0978e2caf0417a78289eed85010b0c11be94", "patch": "@@ -92,7 +92,7 @@ static rtx find_active_insn_after (basic_block, rtx);\n static basic_block block_fallthru (basic_block);\n static int cond_exec_process_insns (ce_if_block *, rtx, rtx, rtx, int, int);\n static rtx cond_exec_get_condition (rtx);\n-static rtx noce_get_condition (rtx, rtx *, bool);\n+static rtx noce_get_condition (rtx_insn *, rtx_insn **, bool);\n static int noce_operand_ok (const_rtx);\n static void merge_if_block (ce_if_block *);\n static int find_cond_trap (basic_block, edge, edge);\n@@ -783,7 +783,7 @@ struct noce_if_info\n   rtx cond;\n \n   /* New insns should be inserted before this one.  */\n-  rtx cond_earliest;\n+  rtx_insn *cond_earliest;\n \n   /* Insns in the THEN and ELSE block.  There is always just this\n      one insns in those blocks.  The insns are single_set insns.\n@@ -819,7 +819,7 @@ static rtx noce_emit_cmove (struct noce_if_info *, rtx, enum rtx_code, rtx,\n \t\t\t    rtx, rtx, rtx);\n static int noce_try_cmove (struct noce_if_info *);\n static int noce_try_cmove_arith (struct noce_if_info *);\n-static rtx noce_get_alt_condition (struct noce_if_info *, rtx, rtx *);\n+static rtx noce_get_alt_condition (struct noce_if_info *, rtx, rtx_insn **);\n static int noce_try_minmax (struct noce_if_info *);\n static int noce_try_abs (struct noce_if_info *);\n static int noce_try_sign_mask (struct noce_if_info *);\n@@ -1754,9 +1754,10 @@ noce_try_cmove_arith (struct noce_if_info *if_info)\n \n static rtx\n noce_get_alt_condition (struct noce_if_info *if_info, rtx target,\n-\t\t\trtx *earliest)\n+\t\t\trtx_insn **earliest)\n {\n-  rtx cond, set, insn;\n+  rtx cond, set;\n+  rtx_insn *insn;\n   int reverse;\n \n   /* If target is already mentioned in the known condition, return it.  */\n@@ -1906,8 +1907,8 @@ noce_get_alt_condition (struct noce_if_info *if_info, rtx target,\n static int\n noce_try_minmax (struct noce_if_info *if_info)\n {\n-  rtx cond, earliest, target;\n-  rtx_insn *seq;\n+  rtx cond, target;\n+  rtx_insn *earliest, *seq;\n   enum rtx_code code, op;\n   int unsignedp;\n \n@@ -2002,8 +2003,8 @@ noce_try_minmax (struct noce_if_info *if_info)\n static int\n noce_try_abs (struct noce_if_info *if_info)\n {\n-  rtx cond, earliest, target, a, b, c;\n-  rtx_insn *seq;\n+  rtx cond, target, a, b, c;\n+  rtx_insn *earliest, *seq;\n   int negate;\n   bool one_cmpl = false;\n \n@@ -2330,7 +2331,7 @@ noce_try_bitop (struct noce_if_info *if_info)\n    THEN block of the caller, and we have to reverse the condition.  */\n \n static rtx\n-noce_get_condition (rtx jump, rtx *earliest, bool then_else_reversed)\n+noce_get_condition (rtx_insn *jump, rtx_insn **earliest, bool then_else_reversed)\n {\n   rtx cond, set, tmp;\n   bool reverse;\n@@ -3044,7 +3045,7 @@ noce_find_if_block (basic_block test_bb, edge then_edge, edge else_edge,\n   bool then_else_reversed = false;\n   rtx_insn *jump;\n   rtx cond;\n-  rtx cond_earliest;\n+  rtx_insn *cond_earliest;\n   struct noce_if_info if_info;\n \n   /* We only ever should get here before reload.  */\n@@ -3698,7 +3699,8 @@ find_cond_trap (basic_block test_bb, edge then_edge, edge else_edge)\n   basic_block else_bb = else_edge->dest;\n   basic_block other_bb, trap_bb;\n   rtx_insn *trap, *jump;\n-  rtx cond, cond_earliest, seq;\n+  rtx cond, seq;\n+  rtx_insn *cond_earliest;\n   enum rtx_code code;\n \n   /* Locate the block with the trap instruction.  */\n@@ -4134,7 +4136,8 @@ dead_or_predicable (basic_block test_bb, basic_block merge_bb,\n {\n   basic_block new_dest = dest_edge->dest;\n   rtx_insn *head, *end, *jump;\n-  rtx earliest = NULL_RTX, old_dest;\n+  rtx_insn *earliest = NULL;\n+  rtx old_dest;\n   bitmap merge_set = NULL;\n   /* Number of pending changes.  */\n   int n_validated_changes = 0;"}, {"sha": "b83f8f89ee3c3c2f3601e87b8d7a531bbb38eb27", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61aa0978e2caf0417a78289eed85010b0c11be94/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61aa0978e2caf0417a78289eed85010b0c11be94/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=61aa0978e2caf0417a78289eed85010b0c11be94", "patch": "@@ -2893,7 +2893,8 @@ static void\n check_simple_exit (struct loop *loop, edge e, struct niter_desc *desc)\n {\n   basic_block exit_bb;\n-  rtx condition, at;\n+  rtx condition;\n+  rtx_insn *at;\n   edge ein;\n \n   exit_bb = e->src;\n@@ -2931,8 +2932,7 @@ check_simple_exit (struct loop *loop, edge e, struct niter_desc *desc)\n \n   /* Check that we are able to determine number of iterations and fill\n      in information about it.  */\n-  iv_number_of_iterations (loop, safe_as_a <rtx_insn *> (at),\n-\t\t\t   condition, desc);\n+  iv_number_of_iterations (loop, at, condition, desc);\n }\n \n /* Finds a simple exit of LOOP and stores its description into DESC.  */"}, {"sha": "edc6317a9a62a8aeab888494963826d1b09477e0", "filename": "gcc/rtl.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61aa0978e2caf0417a78289eed85010b0c11be94/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61aa0978e2caf0417a78289eed85010b0c11be94/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=61aa0978e2caf0417a78289eed85010b0c11be94", "patch": "@@ -2672,11 +2672,12 @@ extern int insn_rtx_cost (rtx, bool);\n \n /* Given an insn and condition, return a canonical description of\n    the test being made.  */\n-extern rtx canonicalize_condition (rtx, rtx, int, rtx *, rtx, int, int);\n+extern rtx canonicalize_condition (rtx_insn *, rtx, int, rtx_insn **, rtx,\n+\t\t\t\t   int, int);\n \n /* Given a JUMP_INSN, return a canonical description of the test\n    being made.  */\n-extern rtx get_condition (rtx, rtx *, int, int);\n+extern rtx get_condition (rtx_insn *, rtx_insn **, int, int);\n \n /* Information about a subreg of a hard register.  */\n struct subreg_info"}, {"sha": "cf04709bb5bce5cdd63cc94664328147e921f09f", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61aa0978e2caf0417a78289eed85010b0c11be94/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61aa0978e2caf0417a78289eed85010b0c11be94/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=61aa0978e2caf0417a78289eed85010b0c11be94", "patch": "@@ -4985,11 +4985,12 @@ insn_rtx_cost (rtx pat, bool speed)\n    and at INSN.  */\n \n rtx\n-canonicalize_condition (rtx insn, rtx cond, int reverse, rtx *earliest,\n+canonicalize_condition (rtx_insn *insn, rtx cond, int reverse,\n+\t\t\trtx_insn **earliest,\n \t\t\trtx want_reg, int allow_cc_mode, int valid_at_insn_p)\n {\n   enum rtx_code code;\n-  rtx prev = insn;\n+  rtx_insn *prev = insn;\n   const_rtx set;\n   rtx tem;\n   rtx op0, op1;\n@@ -5254,7 +5255,8 @@ canonicalize_condition (rtx insn, rtx cond, int reverse, rtx *earliest,\n    VALID_AT_INSN_P is the same as for canonicalize_condition.  */\n \n rtx\n-get_condition (rtx jump, rtx *earliest, int allow_cc_mode, int valid_at_insn_p)\n+get_condition (rtx_insn *jump, rtx_insn **earliest, int allow_cc_mode,\n+\t       int valid_at_insn_p)\n {\n   rtx cond;\n   int reverse;"}]}