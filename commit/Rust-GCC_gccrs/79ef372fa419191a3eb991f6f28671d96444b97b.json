{"sha": "79ef372fa419191a3eb991f6f28671d96444b97b", "node_id": "C_kwDOANBUbNoAKDc5ZWYzNzJmYTQxOTE5MWEzZWI5OTFmNmYyODY3MWQ5NjQ0NGI5N2I", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-09T22:02:14Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T07:26:33Z"}, "message": "RISC-V: Add vmerge C++ API test\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vmerge_vvm-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmerge_vvm-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmerge_vvm-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmerge_vvm-4.C: New test.\n\t* g++.target/riscv/rvv/base/vmerge_vvm-5.C: New test.\n\t* g++.target/riscv/rvv/base/vmerge_vvm-6.C: New test.\n\t* g++.target/riscv/rvv/base/vmerge_vvm_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmerge_vvm_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmerge_vvm_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmerge_vvm_tu-4.C: New test.\n\t* g++.target/riscv/rvv/base/vmerge_vvm_tu-5.C: New test.\n\t* g++.target/riscv/rvv/base/vmerge_vvm_tu-6.C: New test.\n\t* g++.target/riscv/rvv/base/vmerge_vxm_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmerge_vxm_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmerge_vxm_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmerge_vxm_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmerge_vxm_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmerge_vxm_rv64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmerge_vxm_tu_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmerge_vxm_tu_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmerge_vxm_tu_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmerge_vxm_tu_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmerge_vxm_tu_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmerge_vxm_tu_rv64-3.C: New test.", "tree": {"sha": "994cf78f97b6100d189f6ee9f55e15d3a41e348d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/994cf78f97b6100d189f6ee9f55e15d3a41e348d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79ef372fa419191a3eb991f6f28671d96444b97b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ef372fa419191a3eb991f6f28671d96444b97b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79ef372fa419191a3eb991f6f28671d96444b97b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ef372fa419191a3eb991f6f28671d96444b97b/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a1c81afd551ac66b6cb8011a2168ddcd7887576", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a1c81afd551ac66b6cb8011a2168ddcd7887576", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a1c81afd551ac66b6cb8011a2168ddcd7887576"}], "stats": {"total": 6990, "additions": 6990, "deletions": 0}, "files": [{"sha": "592c5120459c25e4d8acb525d0c234772115cdd8", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmerge_vvm-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-1.C?ref=79ef372fa419191a3eb991f6f28671d96444b97b", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge(vint8mf8_t op1,vint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge(vint8mf4_t op1,vint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge(vint8mf2_t op1,vint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge(vint8m1_t op1,vint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge(vint8m2_t op1,vint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge(vint8m4_t op1,vint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge(vint8m8_t op1,vint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge(vint16mf4_t op1,vint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge(vint16mf2_t op1,vint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge(vint16m1_t op1,vint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge(vint16m2_t op1,vint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge(vint16m4_t op1,vint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge(vint16m8_t op1,vint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge(vint32mf2_t op1,vint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge(vint32m1_t op1,vint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge(vint32m2_t op1,vint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge(vint32m4_t op1,vint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge(vint32m8_t op1,vint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge(vint64m1_t op1,vint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge(vint64m2_t op1,vint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge(vint64m4_t op1,vint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge(vint64m8_t op1,vint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge(vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge(vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge(vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge(vuint8m1_t op1,vuint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge(vuint8m2_t op1,vuint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge(vuint8m4_t op1,vuint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge(vuint8m8_t op1,vuint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge(vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge(vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge(vuint16m1_t op1,vuint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge(vuint16m2_t op1,vuint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge(vuint16m4_t op1,vuint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge(vuint16m8_t op1,vuint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge(vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge(vuint32m1_t op1,vuint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge(vuint32m2_t op1,vuint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge(vuint32m4_t op1,vuint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge(vuint32m8_t op1,vuint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge(vuint64m1_t op1,vuint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge(vuint64m2_t op1,vuint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge(vuint64m4_t op1,vuint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge(vuint64m8_t op1,vuint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "c083f45b62730b491761e275b4a20618eb7d22e7", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmerge_vvm-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-2.C?ref=79ef372fa419191a3eb991f6f28671d96444b97b", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge(vint8mf8_t op1,vint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge(vint8mf4_t op1,vint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge(vint8mf2_t op1,vint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge(vint8m1_t op1,vint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge(vint8m2_t op1,vint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge(vint8m4_t op1,vint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge(vint8m8_t op1,vint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge(vint16mf4_t op1,vint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge(vint16mf2_t op1,vint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge(vint16m1_t op1,vint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge(vint16m2_t op1,vint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge(vint16m4_t op1,vint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge(vint16m8_t op1,vint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge(vint32mf2_t op1,vint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge(vint32m1_t op1,vint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge(vint32m2_t op1,vint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge(vint32m4_t op1,vint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge(vint32m8_t op1,vint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge(vint64m1_t op1,vint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge(vint64m2_t op1,vint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge(vint64m4_t op1,vint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge(vint64m8_t op1,vint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge(vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge(vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge(vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge(vuint8m1_t op1,vuint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge(vuint8m2_t op1,vuint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge(vuint8m4_t op1,vuint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge(vuint8m8_t op1,vuint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge(vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge(vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge(vuint16m1_t op1,vuint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge(vuint16m2_t op1,vuint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge(vuint16m4_t op1,vuint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge(vuint16m8_t op1,vuint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge(vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge(vuint32m1_t op1,vuint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge(vuint32m2_t op1,vuint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge(vuint32m4_t op1,vuint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge(vuint32m8_t op1,vuint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge(vuint64m1_t op1,vuint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge(vuint64m2_t op1,vuint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge(vuint64m4_t op1,vuint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge(vuint64m8_t op1,vuint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "55fc8c48462450ad36b4a082a53b8ff8cbe17b71", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmerge_vvm-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-3.C?ref=79ef372fa419191a3eb991f6f28671d96444b97b", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge(vint8mf8_t op1,vint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge(vint8mf4_t op1,vint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge(vint8mf2_t op1,vint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge(vint8m1_t op1,vint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge(vint8m2_t op1,vint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge(vint8m4_t op1,vint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge(vint8m8_t op1,vint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge(vint16mf4_t op1,vint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge(vint16mf2_t op1,vint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge(vint16m1_t op1,vint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge(vint16m2_t op1,vint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge(vint16m4_t op1,vint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge(vint16m8_t op1,vint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge(vint32mf2_t op1,vint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge(vint32m1_t op1,vint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge(vint32m2_t op1,vint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge(vint32m4_t op1,vint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge(vint32m8_t op1,vint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge(vint64m1_t op1,vint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge(vint64m2_t op1,vint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge(vint64m4_t op1,vint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge(vint64m8_t op1,vint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge(vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge(vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge(vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge(vuint8m1_t op1,vuint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge(vuint8m2_t op1,vuint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge(vuint8m4_t op1,vuint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge(vuint8m8_t op1,vuint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge(vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge(vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge(vuint16m1_t op1,vuint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge(vuint16m2_t op1,vuint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge(vuint16m4_t op1,vuint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge(vuint16m8_t op1,vuint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge(vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge(vuint32m1_t op1,vuint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge(vuint32m2_t op1,vuint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge(vuint32m4_t op1,vuint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge(vuint32m8_t op1,vuint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge(vuint64m1_t op1,vuint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge(vuint64m2_t op1,vuint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge(vuint64m4_t op1,vuint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge(vuint64m8_t op1,vuint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "592c5120459c25e4d8acb525d0c234772115cdd8", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmerge_vvm-4.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-4.C?ref=79ef372fa419191a3eb991f6f28671d96444b97b", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge(vint8mf8_t op1,vint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge(vint8mf4_t op1,vint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge(vint8mf2_t op1,vint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge(vint8m1_t op1,vint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge(vint8m2_t op1,vint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge(vint8m4_t op1,vint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge(vint8m8_t op1,vint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge(vint16mf4_t op1,vint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge(vint16mf2_t op1,vint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge(vint16m1_t op1,vint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge(vint16m2_t op1,vint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge(vint16m4_t op1,vint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge(vint16m8_t op1,vint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge(vint32mf2_t op1,vint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge(vint32m1_t op1,vint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge(vint32m2_t op1,vint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge(vint32m4_t op1,vint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge(vint32m8_t op1,vint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge(vint64m1_t op1,vint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge(vint64m2_t op1,vint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge(vint64m4_t op1,vint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge(vint64m8_t op1,vint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge(vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge(vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge(vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge(vuint8m1_t op1,vuint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge(vuint8m2_t op1,vuint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge(vuint8m4_t op1,vuint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge(vuint8m8_t op1,vuint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge(vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge(vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge(vuint16m1_t op1,vuint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge(vuint16m2_t op1,vuint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge(vuint16m4_t op1,vuint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge(vuint16m8_t op1,vuint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge(vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge(vuint32m1_t op1,vuint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge(vuint32m2_t op1,vuint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge(vuint32m4_t op1,vuint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge(vuint32m8_t op1,vuint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge(vuint64m1_t op1,vuint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge(vuint64m2_t op1,vuint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge(vuint64m4_t op1,vuint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge(vuint64m8_t op1,vuint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "c083f45b62730b491761e275b4a20618eb7d22e7", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmerge_vvm-5.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-5.C?ref=79ef372fa419191a3eb991f6f28671d96444b97b", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge(vint8mf8_t op1,vint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge(vint8mf4_t op1,vint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge(vint8mf2_t op1,vint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge(vint8m1_t op1,vint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge(vint8m2_t op1,vint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge(vint8m4_t op1,vint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge(vint8m8_t op1,vint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge(vint16mf4_t op1,vint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge(vint16mf2_t op1,vint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge(vint16m1_t op1,vint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge(vint16m2_t op1,vint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge(vint16m4_t op1,vint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge(vint16m8_t op1,vint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge(vint32mf2_t op1,vint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge(vint32m1_t op1,vint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge(vint32m2_t op1,vint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge(vint32m4_t op1,vint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge(vint32m8_t op1,vint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge(vint64m1_t op1,vint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge(vint64m2_t op1,vint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge(vint64m4_t op1,vint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge(vint64m8_t op1,vint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge(vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge(vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge(vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge(vuint8m1_t op1,vuint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge(vuint8m2_t op1,vuint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge(vuint8m4_t op1,vuint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge(vuint8m8_t op1,vuint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge(vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge(vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge(vuint16m1_t op1,vuint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge(vuint16m2_t op1,vuint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge(vuint16m4_t op1,vuint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge(vuint16m8_t op1,vuint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge(vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge(vuint32m1_t op1,vuint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge(vuint32m2_t op1,vuint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge(vuint32m4_t op1,vuint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge(vuint32m8_t op1,vuint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge(vuint64m1_t op1,vuint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge(vuint64m2_t op1,vuint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge(vuint64m4_t op1,vuint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge(vuint64m8_t op1,vuint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "55fc8c48462450ad36b4a082a53b8ff8cbe17b71", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmerge_vvm-6.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm-6.C?ref=79ef372fa419191a3eb991f6f28671d96444b97b", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge(vint8mf8_t op1,vint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge(vint8mf4_t op1,vint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge(vint8mf2_t op1,vint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge(vint8m1_t op1,vint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge(vint8m2_t op1,vint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge(vint8m4_t op1,vint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge(vint8m8_t op1,vint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge(vint16mf4_t op1,vint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge(vint16mf2_t op1,vint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge(vint16m1_t op1,vint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge(vint16m2_t op1,vint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge(vint16m4_t op1,vint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge(vint16m8_t op1,vint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge(vint32mf2_t op1,vint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge(vint32m1_t op1,vint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge(vint32m2_t op1,vint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge(vint32m4_t op1,vint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge(vint32m8_t op1,vint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge(vint64m1_t op1,vint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge(vint64m2_t op1,vint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge(vint64m4_t op1,vint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge(vint64m8_t op1,vint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge(vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge(vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge(vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge(vuint8m1_t op1,vuint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge(vuint8m2_t op1,vuint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge(vuint8m4_t op1,vuint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge(vuint8m8_t op1,vuint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge(vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge(vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge(vuint16m1_t op1,vuint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge(vuint16m2_t op1,vuint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge(vuint16m4_t op1,vuint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge(vuint16m8_t op1,vuint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge(vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge(vuint32m1_t op1,vuint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge(vuint32m2_t op1,vuint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge(vuint32m4_t op1,vuint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge(vuint32m8_t op1,vuint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge(vuint64m1_t op1,vuint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge(vuint64m2_t op1,vuint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge(vuint64m4_t op1,vuint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge(vuint64m8_t op1,vuint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "e7ca8eba9032741e88c264ad87b418953bbb52d6", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmerge_vvm_tu-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-1.C?ref=79ef372fa419191a3eb991f6f28671d96444b97b", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_tu(vint8mf8_t merge,vint8mf8_t op1,vint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_tu(vint8mf4_t merge,vint8mf4_t op1,vint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_tu(vint8mf2_t merge,vint8mf2_t op1,vint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_tu(vint8m1_t merge,vint8m1_t op1,vint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_tu(vint8m2_t merge,vint8m2_t op1,vint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_tu(vint8m4_t merge,vint8m4_t op1,vint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_tu(vint8m8_t merge,vint8m8_t op1,vint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_tu(vint16mf4_t merge,vint16mf4_t op1,vint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_tu(vint16mf2_t merge,vint16mf2_t op1,vint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_tu(vint16m1_t merge,vint16m1_t op1,vint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_tu(vint16m2_t merge,vint16m2_t op1,vint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_tu(vint16m4_t merge,vint16m4_t op1,vint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_tu(vint16m8_t merge,vint16m8_t op1,vint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_tu(vint32mf2_t merge,vint32mf2_t op1,vint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_tu(vint32m1_t merge,vint32m1_t op1,vint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_tu(vint32m2_t merge,vint32m2_t op1,vint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_tu(vint32m4_t merge,vint32m4_t op1,vint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_tu(vint32m8_t merge,vint32m8_t op1,vint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_tu(vint64m1_t merge,vint64m1_t op1,vint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_tu(vint64m2_t merge,vint64m2_t op1,vint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_tu(vint64m4_t merge,vint64m4_t op1,vint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_tu(vint64m8_t merge,vint64m8_t op1,vint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_tu(vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_tu(vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_tu(vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_tu(vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_tu(vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_tu(vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_tu(vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_tu(vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_tu(vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_tu(vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_tu(vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_tu(vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_tu(vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_tu(vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_tu(vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_tu(vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_tu(vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_tu(vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_tu(vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_tu(vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_tu(vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_tu(vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "b2a4db6804133f86ea710248011e627188b0d111", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmerge_vvm_tu-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-2.C?ref=79ef372fa419191a3eb991f6f28671d96444b97b", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_tu(vint8mf8_t merge,vint8mf8_t op1,vint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_tu(vint8mf4_t merge,vint8mf4_t op1,vint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_tu(vint8mf2_t merge,vint8mf2_t op1,vint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_tu(vint8m1_t merge,vint8m1_t op1,vint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_tu(vint8m2_t merge,vint8m2_t op1,vint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_tu(vint8m4_t merge,vint8m4_t op1,vint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_tu(vint8m8_t merge,vint8m8_t op1,vint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_tu(vint16mf4_t merge,vint16mf4_t op1,vint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_tu(vint16mf2_t merge,vint16mf2_t op1,vint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_tu(vint16m1_t merge,vint16m1_t op1,vint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_tu(vint16m2_t merge,vint16m2_t op1,vint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_tu(vint16m4_t merge,vint16m4_t op1,vint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_tu(vint16m8_t merge,vint16m8_t op1,vint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_tu(vint32mf2_t merge,vint32mf2_t op1,vint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_tu(vint32m1_t merge,vint32m1_t op1,vint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_tu(vint32m2_t merge,vint32m2_t op1,vint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_tu(vint32m4_t merge,vint32m4_t op1,vint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_tu(vint32m8_t merge,vint32m8_t op1,vint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_tu(vint64m1_t merge,vint64m1_t op1,vint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_tu(vint64m2_t merge,vint64m2_t op1,vint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_tu(vint64m4_t merge,vint64m4_t op1,vint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_tu(vint64m8_t merge,vint64m8_t op1,vint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_tu(vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_tu(vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_tu(vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_tu(vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_tu(vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_tu(vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_tu(vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_tu(vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_tu(vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_tu(vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_tu(vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_tu(vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_tu(vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_tu(vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_tu(vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_tu(vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_tu(vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_tu(vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_tu(vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_tu(vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_tu(vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_tu(vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "ef59cd9ae227dd5b10c321644042ea60e4521abe", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmerge_vvm_tu-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-3.C?ref=79ef372fa419191a3eb991f6f28671d96444b97b", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_tu(vint8mf8_t merge,vint8mf8_t op1,vint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_tu(vint8mf4_t merge,vint8mf4_t op1,vint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_tu(vint8mf2_t merge,vint8mf2_t op1,vint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_tu(vint8m1_t merge,vint8m1_t op1,vint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_tu(vint8m2_t merge,vint8m2_t op1,vint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_tu(vint8m4_t merge,vint8m4_t op1,vint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_tu(vint8m8_t merge,vint8m8_t op1,vint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_tu(vint16mf4_t merge,vint16mf4_t op1,vint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_tu(vint16mf2_t merge,vint16mf2_t op1,vint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_tu(vint16m1_t merge,vint16m1_t op1,vint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_tu(vint16m2_t merge,vint16m2_t op1,vint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_tu(vint16m4_t merge,vint16m4_t op1,vint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_tu(vint16m8_t merge,vint16m8_t op1,vint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_tu(vint32mf2_t merge,vint32mf2_t op1,vint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_tu(vint32m1_t merge,vint32m1_t op1,vint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_tu(vint32m2_t merge,vint32m2_t op1,vint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_tu(vint32m4_t merge,vint32m4_t op1,vint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_tu(vint32m8_t merge,vint32m8_t op1,vint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_tu(vint64m1_t merge,vint64m1_t op1,vint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_tu(vint64m2_t merge,vint64m2_t op1,vint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_tu(vint64m4_t merge,vint64m4_t op1,vint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_tu(vint64m8_t merge,vint64m8_t op1,vint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_tu(vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_tu(vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_tu(vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_tu(vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_tu(vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_tu(vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_tu(vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_tu(vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_tu(vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_tu(vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_tu(vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_tu(vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_tu(vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_tu(vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_tu(vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_tu(vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_tu(vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_tu(vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_tu(vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_tu(vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_tu(vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_tu(vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "e7ca8eba9032741e88c264ad87b418953bbb52d6", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmerge_vvm_tu-4.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-4.C?ref=79ef372fa419191a3eb991f6f28671d96444b97b", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_tu(vint8mf8_t merge,vint8mf8_t op1,vint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_tu(vint8mf4_t merge,vint8mf4_t op1,vint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_tu(vint8mf2_t merge,vint8mf2_t op1,vint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_tu(vint8m1_t merge,vint8m1_t op1,vint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_tu(vint8m2_t merge,vint8m2_t op1,vint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_tu(vint8m4_t merge,vint8m4_t op1,vint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_tu(vint8m8_t merge,vint8m8_t op1,vint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_tu(vint16mf4_t merge,vint16mf4_t op1,vint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_tu(vint16mf2_t merge,vint16mf2_t op1,vint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_tu(vint16m1_t merge,vint16m1_t op1,vint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_tu(vint16m2_t merge,vint16m2_t op1,vint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_tu(vint16m4_t merge,vint16m4_t op1,vint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_tu(vint16m8_t merge,vint16m8_t op1,vint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_tu(vint32mf2_t merge,vint32mf2_t op1,vint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_tu(vint32m1_t merge,vint32m1_t op1,vint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_tu(vint32m2_t merge,vint32m2_t op1,vint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_tu(vint32m4_t merge,vint32m4_t op1,vint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_tu(vint32m8_t merge,vint32m8_t op1,vint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_tu(vint64m1_t merge,vint64m1_t op1,vint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_tu(vint64m2_t merge,vint64m2_t op1,vint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_tu(vint64m4_t merge,vint64m4_t op1,vint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_tu(vint64m8_t merge,vint64m8_t op1,vint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_tu(vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_tu(vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_tu(vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_tu(vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_tu(vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_tu(vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_tu(vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_tu(vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_tu(vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_tu(vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_tu(vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_tu(vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_tu(vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_tu(vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_tu(vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_tu(vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_tu(vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_tu(vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_tu(vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_tu(vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_tu(vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_tu(vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "b2a4db6804133f86ea710248011e627188b0d111", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmerge_vvm_tu-5.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-5.C?ref=79ef372fa419191a3eb991f6f28671d96444b97b", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_tu(vint8mf8_t merge,vint8mf8_t op1,vint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_tu(vint8mf4_t merge,vint8mf4_t op1,vint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_tu(vint8mf2_t merge,vint8mf2_t op1,vint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_tu(vint8m1_t merge,vint8m1_t op1,vint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_tu(vint8m2_t merge,vint8m2_t op1,vint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_tu(vint8m4_t merge,vint8m4_t op1,vint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_tu(vint8m8_t merge,vint8m8_t op1,vint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_tu(vint16mf4_t merge,vint16mf4_t op1,vint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_tu(vint16mf2_t merge,vint16mf2_t op1,vint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_tu(vint16m1_t merge,vint16m1_t op1,vint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_tu(vint16m2_t merge,vint16m2_t op1,vint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_tu(vint16m4_t merge,vint16m4_t op1,vint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_tu(vint16m8_t merge,vint16m8_t op1,vint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_tu(vint32mf2_t merge,vint32mf2_t op1,vint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_tu(vint32m1_t merge,vint32m1_t op1,vint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_tu(vint32m2_t merge,vint32m2_t op1,vint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_tu(vint32m4_t merge,vint32m4_t op1,vint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_tu(vint32m8_t merge,vint32m8_t op1,vint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_tu(vint64m1_t merge,vint64m1_t op1,vint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_tu(vint64m2_t merge,vint64m2_t op1,vint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_tu(vint64m4_t merge,vint64m4_t op1,vint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_tu(vint64m8_t merge,vint64m8_t op1,vint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_tu(vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_tu(vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_tu(vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_tu(vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_tu(vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_tu(vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_tu(vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_tu(vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_tu(vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_tu(vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_tu(vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_tu(vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_tu(vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_tu(vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_tu(vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_tu(vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_tu(vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_tu(vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_tu(vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_tu(vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_tu(vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_tu(vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "ef59cd9ae227dd5b10c321644042ea60e4521abe", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmerge_vvm_tu-6.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vvm_tu-6.C?ref=79ef372fa419191a3eb991f6f28671d96444b97b", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_tu(vint8mf8_t merge,vint8mf8_t op1,vint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_tu(vint8mf4_t merge,vint8mf4_t op1,vint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_tu(vint8mf2_t merge,vint8mf2_t op1,vint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_tu(vint8m1_t merge,vint8m1_t op1,vint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_tu(vint8m2_t merge,vint8m2_t op1,vint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_tu(vint8m4_t merge,vint8m4_t op1,vint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_tu(vint8m8_t merge,vint8m8_t op1,vint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_tu(vint16mf4_t merge,vint16mf4_t op1,vint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_tu(vint16mf2_t merge,vint16mf2_t op1,vint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_tu(vint16m1_t merge,vint16m1_t op1,vint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_tu(vint16m2_t merge,vint16m2_t op1,vint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_tu(vint16m4_t merge,vint16m4_t op1,vint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_tu(vint16m8_t merge,vint16m8_t op1,vint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_tu(vint32mf2_t merge,vint32mf2_t op1,vint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_tu(vint32m1_t merge,vint32m1_t op1,vint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_tu(vint32m2_t merge,vint32m2_t op1,vint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_tu(vint32m4_t merge,vint32m4_t op1,vint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_tu(vint32m8_t merge,vint32m8_t op1,vint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_tu(vint64m1_t merge,vint64m1_t op1,vint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_tu(vint64m2_t merge,vint64m2_t op1,vint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_tu(vint64m4_t merge,vint64m4_t op1,vint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_tu(vint64m8_t merge,vint64m8_t op1,vint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_tu(vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_tu(vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_tu(vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_tu(vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_tu(vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_tu(vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_tu(vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_tu(vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_tu(vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_tu(vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_tu(vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_tu(vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_tu(vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_tu(vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_tu(vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_tu(vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_tu(vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_tu(vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_tu(vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_tu(vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_tu(vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_tu(vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "762c99999d34c5fb570679df6fc36f1707e43136", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmerge_vxm_rv32-1.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv32-1.C?ref=79ef372fa419191a3eb991f6f28671d96444b97b", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge(vint8mf8_t op1,int8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge(vint8mf4_t op1,int8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge(vint8mf2_t op1,int8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge(vint8m1_t op1,int8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge(vint8m2_t op1,int8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge(vint8m4_t op1,int8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge(vint8m8_t op1,int8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge(vint16mf4_t op1,int16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge(vint16mf2_t op1,int16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge(vint16m1_t op1,int16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge(vint16m2_t op1,int16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge(vint16m4_t op1,int16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge(vint16m8_t op1,int16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge(vint32mf2_t op1,int32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge(vint32m1_t op1,int32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge(vint32m2_t op1,int32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge(vint32m4_t op1,int32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge(vint32m8_t op1,int32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge(vint64m1_t op1,int64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge(vint64m2_t op1,int64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge(vint64m4_t op1,int64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge(vint64m8_t op1,int64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge(vuint8mf8_t op1,uint8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge(vuint8mf4_t op1,uint8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge(vuint8mf2_t op1,uint8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge(vuint8m1_t op1,uint8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge(vuint8m2_t op1,uint8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge(vuint8m4_t op1,uint8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge(vuint8m8_t op1,uint8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge(vuint16mf4_t op1,uint16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge(vuint16mf2_t op1,uint16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge(vuint16m1_t op1,uint16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge(vuint16m2_t op1,uint16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge(vuint16m4_t op1,uint16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge(vuint16m8_t op1,uint16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge(vuint32mf2_t op1,uint32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge(vuint32m1_t op1,uint32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge(vuint32m2_t op1,uint32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge(vuint32m4_t op1,uint32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge(vuint32m8_t op1,uint32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge(vuint64m1_t op1,uint64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge(vuint64m2_t op1,uint64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge(vuint64m4_t op1,uint64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge(vuint64m8_t op1,uint64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */"}, {"sha": "1e8084cca8e38525c32c8be1b141bcf3c82aefc4", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmerge_vxm_rv32-2.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv32-2.C?ref=79ef372fa419191a3eb991f6f28671d96444b97b", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge(vint8mf8_t op1,int8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge(vint8mf4_t op1,int8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge(vint8mf2_t op1,int8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge(vint8m1_t op1,int8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge(vint8m2_t op1,int8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge(vint8m4_t op1,int8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge(vint8m8_t op1,int8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge(vint16mf4_t op1,int16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge(vint16mf2_t op1,int16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge(vint16m1_t op1,int16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge(vint16m2_t op1,int16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge(vint16m4_t op1,int16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge(vint16m8_t op1,int16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge(vint32mf2_t op1,int32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge(vint32m1_t op1,int32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge(vint32m2_t op1,int32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge(vint32m4_t op1,int32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge(vint32m8_t op1,int32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge(vint64m1_t op1,int64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge(vint64m2_t op1,int64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge(vint64m4_t op1,int64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge(vint64m8_t op1,int64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge(vuint8mf8_t op1,uint8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge(vuint8mf4_t op1,uint8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge(vuint8mf2_t op1,uint8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge(vuint8m1_t op1,uint8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge(vuint8m2_t op1,uint8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge(vuint8m4_t op1,uint8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge(vuint8m8_t op1,uint8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge(vuint16mf4_t op1,uint16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge(vuint16mf2_t op1,uint16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge(vuint16m1_t op1,uint16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge(vuint16m2_t op1,uint16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge(vuint16m4_t op1,uint16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge(vuint16m8_t op1,uint16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge(vuint32mf2_t op1,uint32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge(vuint32m1_t op1,uint32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge(vuint32m2_t op1,uint32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge(vuint32m4_t op1,uint32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge(vuint32m8_t op1,uint32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge(vuint64m1_t op1,uint64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge(vuint64m2_t op1,uint64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge(vuint64m4_t op1,uint64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge(vuint64m8_t op1,uint64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */"}, {"sha": "8245e5670e5aa35915c162172fb2c7857355d9a9", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmerge_vxm_rv32-3.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv32-3.C?ref=79ef372fa419191a3eb991f6f28671d96444b97b", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge(vint8mf8_t op1,int8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge(vint8mf4_t op1,int8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge(vint8mf2_t op1,int8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge(vint8m1_t op1,int8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge(vint8m2_t op1,int8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge(vint8m4_t op1,int8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge(vint8m8_t op1,int8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge(vint16mf4_t op1,int16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge(vint16mf2_t op1,int16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge(vint16m1_t op1,int16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge(vint16m2_t op1,int16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge(vint16m4_t op1,int16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge(vint16m8_t op1,int16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge(vint32mf2_t op1,int32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge(vint32m1_t op1,int32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge(vint32m2_t op1,int32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge(vint32m4_t op1,int32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge(vint32m8_t op1,int32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge(vint64m1_t op1,int64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge(vint64m2_t op1,int64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge(vint64m4_t op1,int64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge(vint64m8_t op1,int64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge(vuint8mf8_t op1,uint8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge(vuint8mf4_t op1,uint8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge(vuint8mf2_t op1,uint8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge(vuint8m1_t op1,uint8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge(vuint8m2_t op1,uint8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge(vuint8m4_t op1,uint8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge(vuint8m8_t op1,uint8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge(vuint16mf4_t op1,uint16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge(vuint16mf2_t op1,uint16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge(vuint16m1_t op1,uint16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge(vuint16m2_t op1,uint16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge(vuint16m4_t op1,uint16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge(vuint16m8_t op1,uint16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge(vuint32mf2_t op1,uint32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge(vuint32m1_t op1,uint32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge(vuint32m2_t op1,uint32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge(vuint32m4_t op1,uint32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge(vuint32m8_t op1,uint32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge(vuint64m1_t op1,uint64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge(vuint64m2_t op1,uint64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge(vuint64m4_t op1,uint64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge(vuint64m8_t op1,uint64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */"}, {"sha": "2fb1a6459dcf9893fc6ff48c458f3cfdff2f4783", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmerge_vxm_rv64-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv64-1.C?ref=79ef372fa419191a3eb991f6f28671d96444b97b", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge(vint8mf8_t op1,int8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge(vint8mf4_t op1,int8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge(vint8mf2_t op1,int8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge(vint8m1_t op1,int8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge(vint8m2_t op1,int8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge(vint8m4_t op1,int8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge(vint8m8_t op1,int8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge(vint16mf4_t op1,int16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge(vint16mf2_t op1,int16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge(vint16m1_t op1,int16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge(vint16m2_t op1,int16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge(vint16m4_t op1,int16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge(vint16m8_t op1,int16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge(vint32mf2_t op1,int32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge(vint32m1_t op1,int32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge(vint32m2_t op1,int32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge(vint32m4_t op1,int32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge(vint32m8_t op1,int32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge(vint64m1_t op1,int64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge(vint64m2_t op1,int64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge(vint64m4_t op1,int64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge(vint64m8_t op1,int64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge(vuint8mf8_t op1,uint8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge(vuint8mf4_t op1,uint8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge(vuint8mf2_t op1,uint8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge(vuint8m1_t op1,uint8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge(vuint8m2_t op1,uint8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge(vuint8m4_t op1,uint8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge(vuint8m8_t op1,uint8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge(vuint16mf4_t op1,uint16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge(vuint16mf2_t op1,uint16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge(vuint16m1_t op1,uint16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge(vuint16m2_t op1,uint16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge(vuint16m4_t op1,uint16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge(vuint16m8_t op1,uint16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge(vuint32mf2_t op1,uint32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge(vuint32m1_t op1,uint32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge(vuint32m2_t op1,uint32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge(vuint32m4_t op1,uint32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge(vuint32m8_t op1,uint32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge(vuint64m1_t op1,uint64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge(vuint64m2_t op1,uint64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge(vuint64m4_t op1,uint64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge(vuint64m8_t op1,uint64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "57a31e79861ead9d45110ea1f38cfe0b79c73bd0", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmerge_vxm_rv64-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv64-2.C?ref=79ef372fa419191a3eb991f6f28671d96444b97b", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge(vint8mf8_t op1,int8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge(vint8mf4_t op1,int8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge(vint8mf2_t op1,int8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge(vint8m1_t op1,int8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge(vint8m2_t op1,int8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge(vint8m4_t op1,int8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge(vint8m8_t op1,int8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge(vint16mf4_t op1,int16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge(vint16mf2_t op1,int16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge(vint16m1_t op1,int16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge(vint16m2_t op1,int16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge(vint16m4_t op1,int16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge(vint16m8_t op1,int16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge(vint32mf2_t op1,int32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge(vint32m1_t op1,int32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge(vint32m2_t op1,int32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge(vint32m4_t op1,int32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge(vint32m8_t op1,int32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge(vint64m1_t op1,int64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge(vint64m2_t op1,int64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge(vint64m4_t op1,int64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge(vint64m8_t op1,int64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge(vuint8mf8_t op1,uint8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge(vuint8mf4_t op1,uint8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge(vuint8mf2_t op1,uint8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge(vuint8m1_t op1,uint8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge(vuint8m2_t op1,uint8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge(vuint8m4_t op1,uint8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge(vuint8m8_t op1,uint8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge(vuint16mf4_t op1,uint16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge(vuint16mf2_t op1,uint16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge(vuint16m1_t op1,uint16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge(vuint16m2_t op1,uint16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge(vuint16m4_t op1,uint16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge(vuint16m8_t op1,uint16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge(vuint32mf2_t op1,uint32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge(vuint32m1_t op1,uint32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge(vuint32m2_t op1,uint32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge(vuint32m4_t op1,uint32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge(vuint32m8_t op1,uint32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge(vuint64m1_t op1,uint64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge(vuint64m2_t op1,uint64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge(vuint64m4_t op1,uint64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge(vuint64m8_t op1,uint64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "8058622f8efae3a156b007736b9a52a5898bc59e", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmerge_vxm_rv64-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_rv64-3.C?ref=79ef372fa419191a3eb991f6f28671d96444b97b", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge(vint8mf8_t op1,int8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge(vint8mf4_t op1,int8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge(vint8mf2_t op1,int8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge(vint8m1_t op1,int8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge(vint8m2_t op1,int8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge(vint8m4_t op1,int8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge(vint8m8_t op1,int8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge(vint16mf4_t op1,int16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge(vint16mf2_t op1,int16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge(vint16m1_t op1,int16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge(vint16m2_t op1,int16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge(vint16m4_t op1,int16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge(vint16m8_t op1,int16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge(vint32mf2_t op1,int32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge(vint32m1_t op1,int32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge(vint32m2_t op1,int32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge(vint32m4_t op1,int32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge(vint32m8_t op1,int32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge(vint64m1_t op1,int64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge(vint64m2_t op1,int64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge(vint64m4_t op1,int64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge(vint64m8_t op1,int64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge(vuint8mf8_t op1,uint8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge(vuint8mf4_t op1,uint8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge(vuint8mf2_t op1,uint8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge(vuint8m1_t op1,uint8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge(vuint8m2_t op1,uint8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge(vuint8m4_t op1,uint8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge(vuint8m8_t op1,uint8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge(vuint16mf4_t op1,uint16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge(vuint16mf2_t op1,uint16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge(vuint16m1_t op1,uint16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge(vuint16m2_t op1,uint16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge(vuint16m4_t op1,uint16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge(vuint16m8_t op1,uint16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge(vuint32mf2_t op1,uint32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge(vuint32m1_t op1,uint32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge(vuint32m2_t op1,uint32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge(vuint32m4_t op1,uint32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge(vuint32m8_t op1,uint32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge(vuint64m1_t op1,uint64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge(vuint64m2_t op1,uint64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge(vuint64m4_t op1,uint64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge(vuint64m8_t op1,uint64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge(op1,op2,selector,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "cdfd7b2305d61baf3f260f2135b3494347b91cab", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmerge_vxm_tu_rv32-1.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv32-1.C?ref=79ef372fa419191a3eb991f6f28671d96444b97b", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_tu(vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_tu(vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_tu(vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_tu(vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_tu(vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_tu(vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_tu(vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_tu(vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_tu(vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_tu(vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_tu(vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_tu(vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_tu(vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_tu(vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_tu(vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_tu(vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_tu(vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_tu(vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_tu(vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_tu(vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_tu(vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_tu(vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */"}, {"sha": "43811fc5e1402eb0c87d67515058e5099b55f7e6", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmerge_vxm_tu_rv32-2.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv32-2.C?ref=79ef372fa419191a3eb991f6f28671d96444b97b", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_tu(vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_tu(vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_tu(vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_tu(vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_tu(vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_tu(vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_tu(vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_tu(vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_tu(vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_tu(vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_tu(vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_tu(vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_tu(vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_tu(vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_tu(vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_tu(vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_tu(vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_tu(vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_tu(vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_tu(vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_tu(vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_tu(vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */"}, {"sha": "3f8ff36ea37b1548627a51e34baaf6d01d5bc6df", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmerge_vxm_tu_rv32-3.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv32-3.C?ref=79ef372fa419191a3eb991f6f28671d96444b97b", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_tu(vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_tu(vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_tu(vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_tu(vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_tu(vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_tu(vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_tu(vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_tu(vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_tu(vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_tu(vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_tu(vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_tu(vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_tu(vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_tu(vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_tu(vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_tu(vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_tu(vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_tu(vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_tu(vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_tu(vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_tu(vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_tu(vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmerge\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */"}, {"sha": "1b5219e1e0f5911e40affb134ab6cd85084def44", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmerge_vxm_tu_rv64-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv64-1.C?ref=79ef372fa419191a3eb991f6f28671d96444b97b", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_tu(vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_tu(vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_tu(vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_tu(vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_tu(vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_tu(vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_tu(vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_tu(vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_tu(vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_tu(vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_tu(vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_tu(vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_tu(vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_tu(vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_tu(vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_tu(vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_tu(vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_tu(vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_tu(vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_tu(vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_tu(vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_tu(vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "8dbf586fb9048fda287d6b222f9505febca4fb8c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmerge_vxm_tu_rv64-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv64-2.C?ref=79ef372fa419191a3eb991f6f28671d96444b97b", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_tu(vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_tu(vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_tu(vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_tu(vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_tu(vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_tu(vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_tu(vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_tu(vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_tu(vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_tu(vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_tu(vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_tu(vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_tu(vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_tu(vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_tu(vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_tu(vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_tu(vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_tu(vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_tu(vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_tu(vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_tu(vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_tu(vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "d9850c0925ee4349cb89d2323ebae18cb0b52c5a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmerge_vxm_tu_rv64-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ef372fa419191a3eb991f6f28671d96444b97b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmerge_vxm_tu_rv64-3.C?ref=79ef372fa419191a3eb991f6f28671d96444b97b", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vmerge_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vmerge_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vmerge_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vmerge_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vmerge_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vmerge_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vmerge_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vmerge_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vmerge_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vmerge_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vmerge_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vmerge_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vmerge_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vmerge_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vmerge_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vmerge_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vmerge_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vmerge_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vmerge_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vmerge_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vmerge_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vmerge_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vmerge_tu(vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vmerge_tu(vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vmerge_tu(vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vmerge_tu(vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vmerge_tu(vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vmerge_tu(vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vmerge_tu(vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,vbool1_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vmerge_tu(vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vmerge_tu(vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vmerge_tu(vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vmerge_tu(vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vmerge_tu(vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vmerge_tu(vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,vbool2_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vmerge_tu(vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vmerge_tu(vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vmerge_tu(vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vmerge_tu(vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vmerge_tu(vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,vbool4_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vmerge_tu(vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,vbool64_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vmerge_tu(vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,vbool32_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vmerge_tu(vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,vbool16_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vmerge_tu(vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,vbool8_t selector,size_t vl)\n+{\n+    return __riscv_vmerge_tu(merge,op1,op2,selector,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vmerge\\.vxm\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}]}