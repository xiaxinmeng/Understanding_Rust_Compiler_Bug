{"sha": "ecb62ae79bc32cd8bc6c2fb5b0c1299c728ea37c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNiNjJhZTc5YmMzMmNkOGJjNmMyZmI1YjBjMTI5OWM3MjhlYTM3Yw==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2004-01-08T22:50:54Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2004-01-08T22:50:54Z"}, "message": "rs6000.md (cmptf_internal1): Correct branch offset.\n\n\t* config/rs6000/rs6000.md (cmptf_internal1): Correct branch offset.\n\t(UNSPEC_FIX_TRUNC_TF): New constant.\n\t(movtf_internal): Make splitter active only when insn is active.\n\t(extenddftf2): Rewrite to properly load zero into low part.\n\t(extenddftf2_internal): New.\n\t(extendsftf2): Rewrite.\n\t(truncdftf2): Correct length.\n\t(floatditf2): Delete.\n\t(fix_trunc_helper): New.\n\t(fix_trunctfdi2): Use fix_trunc_helper.\n\t(fix_trunctfsi2): Likewise.fix_trunc\n\t(fix_trunctfsi2_internal): New.\n\nFrom-SVN: r75559", "tree": {"sha": "d89f58d4df7c980d9b6740a4197ebf27bf264cfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d89f58d4df7c980d9b6740a4197ebf27bf264cfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecb62ae79bc32cd8bc6c2fb5b0c1299c728ea37c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecb62ae79bc32cd8bc6c2fb5b0c1299c728ea37c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecb62ae79bc32cd8bc6c2fb5b0c1299c728ea37c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecb62ae79bc32cd8bc6c2fb5b0c1299c728ea37c/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a29077daa7c28916ddbf4d4f7cb5721a3d1365ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a29077daa7c28916ddbf4d4f7cb5721a3d1365ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a29077daa7c28916ddbf4d4f7cb5721a3d1365ea"}], "stats": {"total": 158, "additions": 108, "deletions": 50}, "files": [{"sha": "4608ecaedfd892378b7389d378db1fed9ce3b0b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb62ae79bc32cd8bc6c2fb5b0c1299c728ea37c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb62ae79bc32cd8bc6c2fb5b0c1299c728ea37c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ecb62ae79bc32cd8bc6c2fb5b0c1299c728ea37c", "patch": "@@ -1,5 +1,18 @@\n 2004-01-08  Geoffrey Keating  <geoffk@apple.com>\n \n+\t* config/rs6000/rs6000.md (cmptf_internal1): Correct branch offset.\n+\t(UNSPEC_FIX_TRUNC_TF): New constant.\n+\t(movtf_internal): Make splitter active only when insn is active.\n+\t(extenddftf2): Rewrite to properly load zero into low part.\n+\t(extenddftf2_internal): New.\n+\t(extendsftf2): Rewrite.\n+\t(truncdftf2): Correct length.\n+\t(floatditf2): Delete.\n+\t(fix_trunc_helper): New.\n+\t(fix_trunctfdi2): Use fix_trunc_helper.\n+\t(fix_trunctfsi2): Likewise.fix_trunc\n+\t(fix_trunctfsi2_internal): New.\n+\n \t* config/rs6000/rs6000.c (legitimate_lo_sum_address_p): lo_sum\n \taddresses are legitimate on Darwin even when flag_pic.\n \t(rs6000_legitimize_reload_address) [TARGET_MACHO]: Don't create"}, {"sha": "bc7ecefefb1b574d7c24331996814e74f3928cab", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 95, "deletions": 50, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb62ae79bc32cd8bc6c2fb5b0c1299c728ea37c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb62ae79bc32cd8bc6c2fb5b0c1299c728ea37c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=ecb62ae79bc32cd8bc6c2fb5b0c1299c728ea37c", "patch": "@@ -49,6 +49,7 @@\n    (UNSPEC_TLSTPRELLO\t\t27)\n    (UNSPEC_TLSGOTTPREL\t\t28)\n    (UNSPEC_TLSTLS\t\t29)\n+   (UNSPEC_FIX_TRUNC_TF\t\t30)\t; fadd, rounding towards zero\n   ])\n \n ;;\n@@ -5210,7 +5211,7 @@\n    (clobber (match_operand:DI 4 \"gpc_reg_operand\" \"=f\"))]\n   \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"#\"\n-  \"\"\n+  \"&& 1\"\n   [(set (match_dup 3) (sign_extend:DI (match_dup 1)))\n    (set (match_dup 2) (match_dup 3))\n    (set (match_dup 4) (match_dup 2))\n@@ -5225,7 +5226,7 @@\n    (clobber (match_operand:DI 4 \"gpc_reg_operand\" \"=f\"))]\n   \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"#\"\n-  \"\"\n+  \"&& 1\"\n   [(set (match_dup 3) (zero_extend:DI (match_dup 1)))\n    (set (match_dup 2) (match_dup 3))\n    (set (match_dup 4) (match_dup 2))\n@@ -8219,38 +8220,51 @@\n    && (gpc_reg_operand (operands[0], TFmode)\n        || gpc_reg_operand (operands[1], TFmode))\"\n   \"#\"\n-  \"reload_completed\"\n+  \"&& reload_completed\"\n   [(pc)]\n { rs6000_split_multireg_move (operands[0], operands[1]); DONE; }\n   [(set_attr \"length\" \"8,8,8,20,20\")])\n \n-(define_insn \"extenddftf2\"\n-  [(set (match_operand:TF 0 \"gpc_reg_operand\" \"=f\")\n-\t(float_extend:TF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n+(define_expand \"extenddftf2\"\n+  [(parallel [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n+\t\t   (float_extend:TF (match_operand:DF 1 \"input_operand\" \"\")))\n+\t      (use (match_dup 2))])]\n   \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n-  \"*\n {\n-  if (REGNO (operands[0]) == REGNO (operands[1]))\n-    return \\\"fsub %L0,%L0,%L0\\\";\n-  else\n-    return \\\"fmr %0,%1\\;fsub %L0,%L0,%L0\\\";\n-}\"\n-  [(set_attr \"type\" \"fp\")])\n+  operands[2] = CONST0_RTX (DFmode);\n+})\n \n-(define_insn \"extendsftf2\"\n-  [(set (match_operand:TF 0 \"gpc_reg_operand\" \"=f\")\n-\t(float_extend:TF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")))]\n+(define_insn_and_split \"*extenddftf2_internal\"\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=o,f,&f,r\")\n+       (float_extend:TF (match_operand:DF 1 \"input_operand\" \"fr,mf,mf,rmGHF\")))\n+   (use (match_operand:DF 2 \"input_operand\" \"rf,m,f,n\"))]\n   \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n-  \"*\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(pc)]\n {\n-  if (REGNO (operands[0]) == REGNO (operands[1]))\n-    return \\\"fsub %L0,%L0,%L0\\\";\n-  else\n-    return \\\"fmr %0,%1\\;fsub %L0,%L0,%L0\\\";\n-}\"\n-  [(set_attr \"type\" \"fp\")])\n+  const int lo_word = FLOAT_WORDS_BIG_ENDIAN ? GET_MODE_SIZE (DFmode) : 0;\n+  const int hi_word = FLOAT_WORDS_BIG_ENDIAN ? 0 : GET_MODE_SIZE (DFmode);\n+  emit_move_insn (simplify_gen_subreg (DFmode, operands[0], TFmode, hi_word),\n+\t\t  operands[1]);\n+  emit_move_insn (simplify_gen_subreg (DFmode, operands[0], TFmode, lo_word),\n+\t\t  operands[2]);\n+  DONE;\n+})  \n+\n+(define_expand \"extendsftf2\"\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n+\t(float_extend:TF (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n+  \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\n+   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n+{\n+  rtx tmp = gen_reg_rtx (DFmode);\n+  emit_insn (gen_extendsfdf2 (tmp, operands[1]));\n+  emit_insn (gen_extenddftf2 (operands[0], tmp));\n+  DONE;\n+})\n \n (define_insn \"trunctfdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n@@ -8259,7 +8273,7 @@\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"fadd %0,%1,%L1\"\n   [(set_attr \"type\" \"fp\")\n-   (set_attr \"length\" \"8\")])\n+   (set_attr \"length\" \"4\")])\n \n (define_insn_and_split \"trunctfsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n@@ -8275,21 +8289,6 @@\n \t(float_truncate:SF (match_dup 2)))]\n   \"\")\n \n-(define_insn_and_split \"floatditf2\"\n-  [(set (match_operand:TF 0 \"gpc_reg_operand\" \"=f\")\n-        (float:TF (match_operand:DI 1 \"gpc_reg_operand\" \"*f\")))\n-   (clobber (match_scratch:DF 2 \"=f\"))]\n-  \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\n-   && TARGET_POWERPC64\n-   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 2)\n-\t(float:DF (match_dup 1)))\n-   (set (match_dup 0)\n-\t(float_extend:TF (match_dup 2)))]\n-  \"\")\n-\n (define_expand \"floatsitf2\"\n   [(set (match_operand:TF 0 \"gpc_reg_operand\" \"=f\")\n         (float:TF (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))]\n@@ -8302,30 +8301,76 @@\n   DONE;\n })\n \n+; fadd, but rounding towards zero.\n+; This is probably not the optimal code sequence.\n+(define_insn \"fix_trunc_helper\"\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n+\t(unspec:DF [(match_operand:TF 1 \"gpc_reg_operand\" \"f\")]\n+\t\t   UNSPEC_FIX_TRUNC_TF))\n+   (clobber (match_operand:DF 2 \"gpc_reg_operand\" \"=&f\"))]\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"mffs %2\\n\\tmtfsb1 31\\n\\tmtfsb0 30\\n\\tfadd %0,%1,%L1\\n\\tmtfsf 1,%2\"\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"length\" \"20\")])\n+\n (define_insn_and_split \"fix_trunctfdi2\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=*f\")\n         (fix:DI (match_operand:TF 1 \"gpc_reg_operand\" \"f\")))\n-   (clobber (match_scratch:DF 2 \"=f\"))]\n+   (clobber (match_scratch:DF 2 \"=f\"))\n+   (clobber (match_scratch:DF 3 \"=&f\"))]\n   \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\n    && TARGET_POWERPC64\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(set (match_dup 2)\n-\t(float_truncate:DF (match_dup 1)))\n-   (set (match_dup 0)\n-\t(fix:DI (match_dup 2)))]\n-  \"\")\n+  [(pc)]\n+{\n+  emit_insn (gen_fix_trunc_helper (operands[2], operands[1], operands[3]));\n+  emit_insn (gen_fix_truncdfdi2 (operands[0], operands[2]));\n+})\n \n (define_expand \"fix_trunctfsi2\"\n+  [(parallel [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+\t\t   (fix:SI (match_operand:TF 1 \"gpc_reg_operand\" \"\")))\n+\t      (clobber (match_dup 2))\n+\t      (clobber (match_dup 3))\n+\t      (clobber (match_dup 4))\n+\t      (clobber (match_dup 5))])]\n+  \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\n+   && (TARGET_POWER2 || TARGET_POWERPC)\n+   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n+{\n+  operands[2] = gen_reg_rtx (DFmode);\n+  operands[3] = gen_reg_rtx (DFmode);\n+  operands[4] = gen_reg_rtx (DImode);\n+  operands[5] = assign_stack_temp (DImode, GET_MODE_SIZE (DImode), 0);\n+})\n+\n+(define_insn_and_split \"*fix_trunctfsi2_internal\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-        (fix:SI (match_operand:TF 1 \"gpc_reg_operand\" \"f\")))]\n+        (fix:SI (match_operand:TF 1 \"gpc_reg_operand\" \"f\")))\n+   (clobber (match_operand:DF 2 \"gpc_reg_operand\" \"=f\"))\n+   (clobber (match_operand:DF 3 \"gpc_reg_operand\" \"=&f\"))\n+   (clobber (match_operand:DI 4 \"gpc_reg_operand\" \"=f\"))\n+   (clobber (match_operand:DI 5 \"memory_operand\" \"=o\"))]\n   \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(pc)]\n {\n-  rtx tmp = gen_reg_rtx (DFmode);\n-  emit_insn (gen_trunctfdf2 (tmp, operands[1]));\n-  expand_fix (operands[0], tmp, false);\n+  rtx lowword;\n+  emit_insn (gen_fix_trunc_helper (operands[2], operands[1], operands[3]));\n+\n+  if (GET_CODE (operands[5]) != MEM)\n+    abort();\n+  lowword = XEXP (operands[5], 0);\n+  if (WORDS_BIG_ENDIAN)\n+    lowword = plus_constant (lowword, 4);\n+\n+  emit_insn (gen_fctiwz (operands[4], operands[2]));\n+  emit_move_insn (operands[5], operands[4]);\n+  emit_move_insn (operands[0], gen_rtx_MEM (SImode, lowword));\n   DONE;\n })\n \n@@ -11228,7 +11273,7 @@\n \t\t      (match_operand:TF 2 \"gpc_reg_operand\" \"f\")))]\n   \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n-  \"fcmpu %0,%1,%2\\;bne %0,$+4\\;fcmpu %0,%L1,%L2\"\n+  \"fcmpu %0,%1,%2\\;bne %0,$+8\\;fcmpu %0,%L1,%L2\"\n   [(set_attr \"type\" \"fpcompare\")\n    (set_attr \"length\" \"12\")])\n \f"}]}