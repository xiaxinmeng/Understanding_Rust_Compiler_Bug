{"sha": "ed17bbe3c3ac0a5afd866030d88dce3f6d5a2730", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQxN2JiZTNjM2FjMGE1YWZkODY2MDMwZDg4ZGNlM2Y2ZDVhMjczMA==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2021-02-24T18:39:21Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-15T10:19:09Z"}, "message": "[Ada] Robust switching from incomplete to access types\n\ngcc/ada/\n\n\t* sem_ch3.adb (Access_Type_Declaration): Add comments to explain\n\tthe ordering of Mutate_Kind and Set_Directly_Designated_Type;\n\tremove temporary setting of Ekind to E_Access_Type for building\n\t_master objects, since now the Ekind is already set to its final\n\tvalue. Move repeated code into Setup_Access_Type routine and use\n\tit so that Process_Subtype is executed before mutating the kind\n\tof the type entity.\n\t* gen_il-gen-gen_entities.adb (Gen_Entities): Remove\n\tDirectly_Designated_Type from E_Void, E_Private_Record,\n\tE_Limited_Private_Type and Incomplete_Kind; now it only belongs\n\tto Access_Kind entities.\n\t* sem_util.adb: Minor reformatting.", "tree": {"sha": "58d8d0a5e8d59e0a3a1e69b7b0f4d893589c80d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58d8d0a5e8d59e0a3a1e69b7b0f4d893589c80d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed17bbe3c3ac0a5afd866030d88dce3f6d5a2730", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed17bbe3c3ac0a5afd866030d88dce3f6d5a2730", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed17bbe3c3ac0a5afd866030d88dce3f6d5a2730", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed17bbe3c3ac0a5afd866030d88dce3f6d5a2730/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "008153c8435ca3bf587e11654c31f05c0f99b43a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/008153c8435ca3bf587e11654c31f05c0f99b43a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/008153c8435ca3bf587e11654c31f05c0f99b43a"}], "stats": {"total": 74, "additions": 36, "deletions": 38}, "files": [{"sha": "52cf72d076219ab299aaca04b16794b2d352c3a3", "filename": "gcc/ada/gen_il-gen-gen_entities.adb", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed17bbe3c3ac0a5afd866030d88dce3f6d5a2730/gcc%2Fada%2Fgen_il-gen-gen_entities.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed17bbe3c3ac0a5afd866030d88dce3f6d5a2730/gcc%2Fada%2Fgen_il-gen-gen_entities.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-gen-gen_entities.adb?ref=ed17bbe3c3ac0a5afd866030d88dce3f6d5a2730", "patch": "@@ -259,7 +259,6 @@ begin -- Gen_IL.Gen.Gen_Entities\n         Sm (Corresponding_Remote_Type, Node_Id),\n         Sm (CR_Discriminant, Node_Id),\n         Sm (Debug_Renaming_Link, Node_Id),\n-        Sm (Directly_Designated_Type, Node_Id),\n         Sm (Discriminal_Link, Node_Id),\n         Sm (Discriminant_Default_Value, Node_Id),\n         Sm (Discriminant_Number, Uint),\n@@ -824,10 +823,7 @@ begin -- Gen_IL.Gen.Gen_Entities\n        (Sm (Direct_Primitive_Operations, Elist_Id,\n             Pre => \"Is_Tagged_Type (N)\"),\n         Sm (Scalar_Range, Node_Id),\n-        Sm (Scope_Depth_Value, Uint),\n-        Sm (Directly_Designated_Type, Node_Id)));\n-   --  ????Directly_Designated_Type was allowed to be Set_, but not get.\n-   --  Same for E_Limited_Private_Type. And incomplete.\n+        Sm (Scope_Depth_Value, Uint)));\n \n    Cc (E_Private_Subtype, Private_Kind,\n        (Sm (Direct_Primitive_Operations, Elist_Id,\n@@ -836,17 +832,15 @@ begin -- Gen_IL.Gen.Gen_Entities\n \n    Cc (E_Limited_Private_Type, Private_Kind,\n        (Sm (Scalar_Range, Node_Id),\n-        Sm (Scope_Depth_Value, Uint),\n-        Sm (Directly_Designated_Type, Node_Id)));\n+        Sm (Scope_Depth_Value, Uint)));\n \n    Cc (E_Limited_Private_Subtype, Private_Kind,\n        (Sm (Scope_Depth_Value, Uint)));\n \n    Ab (Incomplete_Kind, Incomplete_Or_Private_Kind,\n        (Sm (Direct_Primitive_Operations, Elist_Id,\n             Pre => \"Is_Tagged_Type (N)\"),\n-        Sm (Non_Limited_View, Node_Id),\n-        Sm (Directly_Designated_Type, Node_Id)));\n+        Sm (Non_Limited_View, Node_Id)));\n \n    Cc (E_Incomplete_Type, Incomplete_Kind,\n        (Sm (Scalar_Range, Node_Id)));"}, {"sha": "f67c40ed466e79e043b13bb5ce5454ef1fa61cd2", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed17bbe3c3ac0a5afd866030d88dce3f6d5a2730/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed17bbe3c3ac0a5afd866030d88dce3f6d5a2730/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=ed17bbe3c3ac0a5afd866030d88dce3f6d5a2730", "patch": "@@ -1326,36 +1326,48 @@ package body Sem_Ch3 is\n    ----------------------------\n \n    procedure Access_Type_Declaration (T : Entity_Id; Def : Node_Id) is\n+\n+      procedure Setup_Access_Type (Desig_Typ : Entity_Id);\n+      --  After type declaration is analysed with T being an incomplete type,\n+      --  this routine will mutate the kind of T to the appropriate access type\n+      --  and set its directly designated type to Desig_Typ.\n+\n+      -----------------------\n+      -- Setup_Access_Type --\n+      -----------------------\n+\n+      procedure Setup_Access_Type (Desig_Typ : Entity_Id) is\n+      begin\n+         if All_Present (Def) or else Constant_Present (Def) then\n+            Mutate_Ekind (T, E_General_Access_Type);\n+         else\n+            Mutate_Ekind (T, E_Access_Type);\n+         end if;\n+\n+         Set_Directly_Designated_Type (T, Desig_Typ);\n+      end Setup_Access_Type;\n+\n+      --  Local variables\n+\n       P : constant Node_Id := Parent (Def);\n       S : constant Node_Id := Subtype_Indication (Def);\n \n       Full_Desig : Entity_Id;\n \n+   --  Start of processing for Access_Type_Declaration\n+\n    begin\n       --  Check for permissible use of incomplete type\n \n       if Nkind (S) /= N_Subtype_Indication then\n+\n          Analyze (S);\n \n          if Nkind (S) in N_Has_Entity\n            and then Present (Entity (S))\n            and then Ekind (Root_Type (Entity (S))) = E_Incomplete_Type\n          then\n-            --  The following \"if\" prevents us from blowing up if the access\n-            --  type is illegally completing something else.\n-\n-            if T in E_Void_Id\n-                    | Access_Kind_Id\n-                    | E_Private_Type_Id\n-                    | E_Limited_Private_Type_Id\n-                    | Incomplete_Kind_Id\n-            then\n-               Set_Directly_Designated_Type (T, Entity (S));\n-\n-            else\n-               pragma Assert (Error_Posted (T));\n-               return;\n-            end if;\n+            Setup_Access_Type (Desig_Typ => Entity (S));\n \n             --  If the designated type is a limited view, we cannot tell if\n             --  the full view contains tasks, and there is no way to handle\n@@ -1366,13 +1378,12 @@ package body Sem_Ch3 is\n             if From_Limited_With (Entity (S))\n               and then not Is_Class_Wide_Type (Entity (S))\n             then\n-               Mutate_Ekind (T, E_Access_Type);\n                Build_Master_Entity (T);\n                Build_Master_Renaming (T);\n             end if;\n \n          else\n-            Set_Directly_Designated_Type (T, Process_Subtype (S, P, T, 'P'));\n+            Setup_Access_Type (Desig_Typ => Process_Subtype (S, P, T, 'P'));\n          end if;\n \n          --  If the access definition is of the form: ACCESS NOT NULL ..\n@@ -1404,14 +1415,7 @@ package body Sem_Ch3 is\n          end if;\n \n       else\n-         Set_Directly_Designated_Type (T,\n-           Process_Subtype (S, P, T, 'P'));\n-      end if;\n-\n-      if All_Present (Def) or Constant_Present (Def) then\n-         Mutate_Ekind (T, E_General_Access_Type);\n-      else\n-         Mutate_Ekind (T, E_Access_Type);\n+         Setup_Access_Type (Desig_Typ => Process_Subtype (S, P, T, 'P'));\n       end if;\n \n       if not Error_Posted (T) then"}, {"sha": "73a7bd1b20ebed6ff52d495619c1a304e40a8acb", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed17bbe3c3ac0a5afd866030d88dce3f6d5a2730/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed17bbe3c3ac0a5afd866030d88dce3f6d5a2730/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=ed17bbe3c3ac0a5afd866030d88dce3f6d5a2730", "patch": "@@ -24441,10 +24441,10 @@ package body Sem_Util is\n                 (Chars (Related_Id), Suffix, Suffix_Index, Prefix));\n \n    begin\n-      Mutate_Ekind       (N, Kind);\n-      Set_Is_Internal    (N, True);\n-      Append_Entity      (N, Scope_Id);\n-      Set_Public_Status  (N);\n+      Mutate_Ekind      (N, Kind);\n+      Set_Is_Internal   (N, True);\n+      Append_Entity     (N, Scope_Id);\n+      Set_Public_Status (N);\n \n       if Kind in Type_Kind then\n          Init_Size_Align (N);"}]}