{"sha": "5f6da3024b11795fa6e902504b720df378dc8087", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY2ZGEzMDI0YjExNzk1ZmE2ZTkwMjUwNGI3MjBkZjM3OGRjODA4Nw==", "commit": {"author": {"name": "Robert Lipe", "email": "robertl@gcc.gnu.org", "date": "1998-05-06T04:45:47Z"}, "committer": {"name": "Robert Lipe", "email": "robertl@gcc.gnu.org", "date": "1998-05-06T04:45:47Z"}, "message": "toplev.h: New file.\n\nWed May  6 06:35:38 1998  Robert Lipe  <robertl@dgii.com>\n        * toplev.h: New file.   Protypes for functions in toplev.c.\n        * tree.h, rtl.h: Deleted protos for functions in toplev.c.\n        * c-common.c, c-convert.c, c-decl.c, c-iterate.c, c-lex.c,\n        c-parse.in, c-parse.y, c-pragma.c, c-typeck.c, calls.c,\n        convert.c, dwarf2out.c, except.c, expr.c, final.c, fold-const.c,\n        function.c, hash.c, profile.c, real.c, reg-stack.c, regclass.c,\n        reload.c, reload1.c, stmt.c, stor-layout.c, tlink.c, tree.c,\n        varasm.c: include it.\n\nFrom-SVN: r19563", "tree": {"sha": "fba62defa4e2c3f425aeae2342dd8a0c66a45f50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fba62defa4e2c3f425aeae2342dd8a0c66a45f50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f6da3024b11795fa6e902504b720df378dc8087", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f6da3024b11795fa6e902504b720df378dc8087", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f6da3024b11795fa6e902504b720df378dc8087", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f6da3024b11795fa6e902504b720df378dc8087/comments", "author": null, "committer": null, "parents": [{"sha": "06b887901209a469eb28ef76892f120932853bcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06b887901209a469eb28ef76892f120932853bcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06b887901209a469eb28ef76892f120932853bcd"}], "stats": {"total": 95, "additions": 51, "deletions": 44}, "files": [{"sha": "eacbdf503d8ee9ec8c105cbaedff9793aa2dfa0f", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6da3024b11795fa6e902504b720df378dc8087/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6da3024b11795fa6e902504b720df378dc8087/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=5f6da3024b11795fa6e902504b720df378dc8087", "patch": "@@ -25,6 +25,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"c-tree.h\"\n #include \"flags.h\"\n #include \"obstack.h\"\n+#include \"toplev.h\"\n \n #ifndef WCHAR_TYPE_SIZE\n #ifdef INT_TYPE_SIZE"}, {"sha": "6f58e766ae0a468488c55fe431c7583b21145f1f", "filename": "gcc/c-convert.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6da3024b11795fa6e902504b720df378dc8087/gcc%2Fc-convert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6da3024b11795fa6e902504b720df378dc8087/gcc%2Fc-convert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-convert.c?ref=5f6da3024b11795fa6e902504b720df378dc8087", "patch": "@@ -28,6 +28,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree.h\"\n #include \"flags.h\"\n #include \"convert.h\"\n+#include \"toplev.h\"\n \n /* Change of width--truncation and extension of integers or reals--\n    is represented with NOP_EXPR.  Proper functioning of many things"}, {"sha": "f179d1ce4eafb4b02d2531cce4f5642cc347f00f", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6da3024b11795fa6e902504b720df378dc8087/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6da3024b11795fa6e902504b720df378dc8087/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=5f6da3024b11795fa6e902504b720df378dc8087", "patch": "@@ -33,6 +33,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"c-tree.h\"\n #include \"c-lex.h\"\n+#include \"toplev.h\"\n \n /* In grokdeclarator, distinguish syntactic contexts of declarators.  */\n enum decl_context"}, {"sha": "66623dd79f34bf8d7698f861a1f0397c384141d3", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6da3024b11795fa6e902504b720df378dc8087/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6da3024b11795fa6e902504b720df378dc8087/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=5f6da3024b11795fa6e902504b720df378dc8087", "patch": "@@ -30,6 +30,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"c-parse.h\"\n #include \"c-pragma.h\"\n+#include \"toplev.h\"\n \n /* MULTIBYTE_CHARS support only works for native compilers.\n    ??? Ideally what we want is to model widechar support after"}, {"sha": "d7725e5ca5780c58b4eb8b608b0ddc29fca74a9c", "filename": "gcc/c-parse.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6da3024b11795fa6e902504b720df378dc8087/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6da3024b11795fa6e902504b720df378dc8087/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=5f6da3024b11795fa6e902504b720df378dc8087", "patch": "@@ -68,6 +68,7 @@ end ifc\n #include \"c-tree.h\"\n #include \"flags.h\"\n #include \"output.h\"\n+#include \"toplev.h\"\n \n #ifdef MULTIBYTE_CHARS\n #include <locale.h>"}, {"sha": "a67718984cbd1826012bd473b09345af6cc03aab", "filename": "gcc/c-parse.y", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6da3024b11795fa6e902504b720df378dc8087/gcc%2Fc-parse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6da3024b11795fa6e902504b720df378dc8087/gcc%2Fc-parse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.y?ref=5f6da3024b11795fa6e902504b720df378dc8087", "patch": "@@ -64,6 +64,7 @@ State 434 contains 2 shift/reduce conflicts.  (Four ways to parse this.)  */\n #include \"c-tree.h\"\n #include \"flags.h\"\n #include \"output.h\"\n+#include \"toplev.h\"\n \n #ifdef MULTIBYTE_CHARS\n #include <locale.h>"}, {"sha": "270cd20c57229e80ba0ac5d85d3a013124df9101", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6da3024b11795fa6e902504b720df378dc8087/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6da3024b11795fa6e902504b720df378dc8087/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=5f6da3024b11795fa6e902504b720df378dc8087", "patch": "@@ -26,6 +26,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"defaults.h\"\n #include \"c-pragma.h\"\n #include \"flags.h\"\n+#include \"toplev.h\"\n \n #ifdef HANDLE_SYSV_PRAGMA\n "}, {"sha": "1e484a69fa976e7a61c6e8f21f6e6d8b942c09a9", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6da3024b11795fa6e902504b720df378dc8087/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6da3024b11795fa6e902504b720df378dc8087/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=5f6da3024b11795fa6e902504b720df378dc8087", "patch": "@@ -36,6 +36,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"rtl.h\"\n #include \"expr.h\"\n+#include \"toplev.h\"\n \n /* Nonzero if we've already printed a \"missing braces around initializer\"\n    message within this initializer.  */"}, {"sha": "16a0346c6a906dc41352ae6e640e3a41af303e70", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6da3024b11795fa6e902504b720df378dc8087/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6da3024b11795fa6e902504b720df378dc8087/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=5f6da3024b11795fa6e902504b720df378dc8087", "patch": "@@ -31,6 +31,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"expr.h\"\n #include \"regs.h\"\n #include \"insn-flags.h\"\n+#include \"toplev.h\"\n \n /* Decide whether a function's arguments should be processed\n    from first to last or from last to first."}, {"sha": "6886fe5d48efd64a0b591e467a3eadba9cb9504d", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6da3024b11795fa6e902504b720df378dc8087/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6da3024b11795fa6e902504b720df378dc8087/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=5f6da3024b11795fa6e902504b720df378dc8087", "patch": "@@ -1294,22 +1294,6 @@ extern rtx expand_mult_highpart\t\tPROTO ((enum machine_mode, rtx,\n \t\t\t\t\t\tunsigned HOST_WIDE_INT, rtx,\n \t\t\t\t\t\tint, int));\n \n-/* In toplev.c */\n-extern void strip_off_ending\t\tPROTO ((char *, int));\n-extern void print_time\t\t\tPROTO ((char *, int));\n-extern int get_run_time\t\t\tPROTO ((void));\n-#if 0\n-extern void fatal\t\t\tPVPROTO ((char *, ...));\n-extern void warning\t\t\tPVPROTO ((char *, ...));\n-extern void error\t\t\tPVPROTO ((char *, ...));\n-#endif\n-extern void pfatal_with_name\t\tPROTO ((char *));\n-extern void fancy_abort\t\t\tPROTO ((void));\n-extern int count_error\t\t\tPROTO ((int));\n-extern void pedwarn\t\t\tPVPROTO ((char *, ...));\n-extern void warning_for_asm\t\tPVPROTO ((rtx, char *, ...));\n-extern void error_for_asm\t\tPVPROTO ((rtx, char *, ...));\n-\n /* In global.c */\n #ifdef BUFSIZ\n extern int global_alloc\t\t\tPROTO ((FILE *));"}, {"sha": "898ca028b7927f978ef26fe16686ebe15707489f", "filename": "gcc/toplev.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6da3024b11795fa6e902504b720df378dc8087/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6da3024b11795fa6e902504b720df378dc8087/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=5f6da3024b11795fa6e902504b720df378dc8087", "patch": "@@ -0,0 +1,42 @@\n+/* toplev.h - Various declarations for functions found in toplev.c\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+ */\n+\n+#ifndef __GCC_TOPLEV_H__\n+#define __GCC_TOPLEV_H__\n+\n+extern void print_time\t\t\tPROTO ((char *, int));\n+extern int get_run_time\t\t\tPROTO ((void));\n+extern void debug_start_source_file\tPROTO ((char *));\n+extern void debug_end_source_file\tPROTO ((unsigned));\n+extern void debug_define\t\tPROTO ((unsigned, char *));\n+extern void debug_undef\t\t\tPROTO ((unsigned, char *));\n+extern void fatal\t\t\tPVPROTO ((char *, ...))\n+\t\t\t\t\t\tATTRIBUTE_PRINTF_1;\n+extern void fatal_io_error\t\tPROTO ((char *));\n+extern void warning\t\t\tPVPROTO ((char *, ...))\n+\t\t\t\t\t\tATTRIBUTE_PRINTF_1;\n+extern void error\t\t\tPVPROTO ((char *, ...))\n+\t\t\t\t\t\tATTRIBUTE_PRINTF_1;\n+extern void pedwarn\t\t\tPVPROTO ((char *, ...))\n+\t\t\t\t\t\tATTRIBUTE_PRINTF_1;\n+extern void pedwarn_with_file_and_line\tPVPROTO ((char *, int, char *, ...))\n+\t\t\t\t\t\tATTRIBUTE_PRINTF_3;\n+extern void warning_with_file_and_line\tPVPROTO ((char *, int, char *, ...))\n+\t\t\t\t\t\tATTRIBUTE_PRINTF_3;\n+extern void error_with_file_and_line\tPVPROTO ((char *, int, char *, ...))\n+\t\t\t\t\t\tATTRIBUTE_PRINTF_3;\n+extern void sorry\t\t\tPVPROTO ((char *s, ...))\n+\t\t\t\t\t\tATTRIBUTE_PRINTF_1;\n+extern void default_print_error_function PROTO ((char *));\n+extern void report_error_function\tPROTO ((char *));\n+\n+extern void rest_of_decl_compilation\tPROTO ((union tree_node *, char *, int, int));\n+extern void rest_of_type_compilation\tPROTO ((union tree_node *, int));\n+extern void rest_of_compilation\t\tPROTO ((union tree_node *));\n+extern void pedwarn_with_decl\t\tPVPROTO ((union tree_node *, char *, ...));\n+extern void warning_with_decl\t\tPVPROTO ((union tree_node *, char *, ...));\n+extern void error_with_decl\t\tPVPROTO ((union tree_node *, char *, ...));\n+extern void announce_function\t\tPROTO ((union tree_node *));\n+\n+#endif /* __GCC_TOPLEV_H */"}, {"sha": "3900056b092b34958891e46888c7e3d8e6a6e9fa", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6da3024b11795fa6e902504b720df378dc8087/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6da3024b11795fa6e902504b720df378dc8087/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=5f6da3024b11795fa6e902504b720df378dc8087", "patch": "@@ -2106,34 +2106,6 @@ extern void make_decl_rtl\t\tPROTO ((tree, char *, int));\n extern void make_decl_one_only\t\tPROTO ((tree));\n extern void variable_section\t\tPROTO ((tree, int));\n \n-/* toplev.c */\n-extern void print_time\t\t\tPROTO ((char *, int));\n-extern int get_run_time\t\t\tPROTO ((void));\n-extern void debug_start_source_file\tPROTO ((char *));\n-extern void debug_end_source_file\tPROTO ((unsigned));\n-extern void debug_define\t\tPROTO ((unsigned, char *));\n-extern void debug_undef\t\t\tPROTO ((unsigned, char *));\n-extern void rest_of_decl_compilation\tPROTO ((tree, char *, int, int));\n-extern void rest_of_type_compilation\tPROTO ((tree, int));\n-extern void rest_of_compilation\t\tPROTO ((tree));\n-extern void fatal\t\t\tPVPROTO ((char *, ...));\n-extern void fatal_io_error\t\tPROTO ((char *));\n-#if 0\n-extern void warning\t\t\tPVPROTO ((char *, ...));\n-extern void error\t\t\tPVPROTO ((char *, ...));\n-#endif\n-extern void pedwarn\t\t\tPVPROTO ((char *, ...));\n-extern void pedwarn_with_decl\t\tPVPROTO ((tree, char *, ...));\n-extern void pedwarn_with_file_and_line\tPVPROTO ((char *, int, char *, ...));\n-extern void warning_with_file_and_line\tPVPROTO ((char *, int, char *, ...));\n-extern void warning_with_decl\t\tPVPROTO ((tree, char *, ...));\n-extern void error_with_decl\t\tPVPROTO ((tree, char *, ...));\n-extern void error_with_file_and_line\tPVPROTO ((char *, int, char *, ...));\n-extern void sorry\t\t\tPVPROTO ((char *s, ...));\n-extern void default_print_error_function PROTO ((char *));\n-extern void report_error_function\tPROTO ((char *));\n-extern void announce_function\t\tPROTO ((tree));\n-\n /* In fold-const.c */\n extern int div_and_round_double\t\tPROTO ((enum tree_code, int,\n \t\t\t\t\t\tHOST_WIDE_INT, HOST_WIDE_INT,"}]}