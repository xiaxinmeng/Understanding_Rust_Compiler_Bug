{"sha": "43f9e5aff06f1ca2296fdbd3141fe90ec0be1912", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNmOWU1YWZmMDZmMWNhMjI5NmZkYmQzMTQxZmU5MGVjMGJlMTkxMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-11T09:28:50Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-11T11:13:31Z"}, "message": "libstdc++: Use helper type for checking thread ID\n\nThis encapsulates the storing and checking of the thread ID into a class\ntype, so that the macro _GLIBCXX_HAS_GTHREADS is only checked in one\nplace. The code doing the checks just calls member functions of the new\ntype, without caring whether that really does any work or not.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/stop_token (_Stop_state_t::_M_requester): Define\n\tnew struct with members to store and check the thread ID.\n\t(_Stop_state_t::_M_request_stop()): Use _M_requester._M_set().\n\t(_Stop_state_t::_M_remove_callback(_Stop_cb*)): Use\n\t_M_requester._M_is_current_thread().", "tree": {"sha": "fb776ac5597767d4a388a1536d6175f0ae942a4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb776ac5597767d4a388a1536d6175f0ae942a4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43f9e5aff06f1ca2296fdbd3141fe90ec0be1912", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43f9e5aff06f1ca2296fdbd3141fe90ec0be1912", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43f9e5aff06f1ca2296fdbd3141fe90ec0be1912", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43f9e5aff06f1ca2296fdbd3141fe90ec0be1912/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca813880dcaae71f664d8f386b1a584cfefbbd4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca813880dcaae71f664d8f386b1a584cfefbbd4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca813880dcaae71f664d8f386b1a584cfefbbd4b"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "7cd01c9713ee0351efbc7847818d291b5eaa478e", "filename": "libstdc++-v3/include/std/stop_token", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f9e5aff06f1ca2296fdbd3141fe90ec0be1912/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstop_token", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f9e5aff06f1ca2296fdbd3141fe90ec0be1912/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstop_token", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstop_token?ref=43f9e5aff06f1ca2296fdbd3141fe90ec0be1912", "patch": "@@ -162,9 +162,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       std::atomic<value_type> _M_owners{1};\n       std::atomic<value_type> _M_value{_S_ssrc_counter_inc};\n       _Stop_cb* _M_head = nullptr;\n+      struct\n+      {\n #ifdef _GLIBCXX_HAS_GTHREADS\n-      __gthread_t _M_requester;\n+\t__gthread_t _M_id;\n+\tvoid _M_set() { _M_id = __gthread_self(); }\n+\tbool _M_is_current_thread() const\n+\t{ return __gthread_equal(_M_id, __gthread_self()); }\n+#else\n+\tvoid _M_set() { }\n+\tconstexpr bool _M_is_current_thread() const { return true; }\n #endif\n+      } _M_requester;\n \n       _Stop_state_t() = default;\n \n@@ -237,9 +246,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n \twhile (!_M_try_lock_and_stop(__old));\n \n-#ifdef _GLIBCXX_HAS_GTHREADS\n-\t_M_requester = __gthread_self();\n-#endif\n+\t_M_requester._M_set();\n \n \twhile (_M_head)\n \t  {\n@@ -343,18 +350,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t// Callback is not in the list, so must have been removed by a call to\n \t// _M_request_stop.\n \n-#ifdef _GLIBCXX_HAS_GTHREADS\n \t// Despite appearances there is no data race on _M_requester. The only\n \t// write to it happens before the callback is removed from the list,\n \t// and removing it from the list happens before this read.\n-\tif (!__gthread_equal(_M_requester, __gthread_self()))\n+\tif (!_M_requester._M_is_current_thread())\n \t  {\n \t    // Synchronize with completion of callback.\n \t    __cb->_M_done.acquire();\n \t    // Safe for ~stop_callback to destroy *__cb now.\n \t    return;\n \t  }\n-#endif\n+\n \tif (__cb->_M_destroyed)\n \t  *__cb->_M_destroyed = true;\n       }"}]}