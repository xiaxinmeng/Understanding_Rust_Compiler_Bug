{"sha": "72e2cf162959f344ec2e9a7488858a18574e3db1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJlMmNmMTYyOTU5ZjM0NGVjMmU5YTc0ODg4NThhMTg1NzRlM2RiMQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2010-04-20T07:51:14Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2010-04-20T07:51:14Z"}, "message": "re PR target/43635 (ICE in s390_emit_call, at config/s390/s390.c:9484)\n\n2010-04-20  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\tPR target/43635\n\t* config/s390/s390.c (s390_emit_call): Turn direct into indirect\n\tcalls for -fpic -m31 if they have been sibcall optimized.\n\n2010-04-20  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\tPR target/43635\n\t* gcc.c-torture/compile/pr43635.c: New testcase.\n\nFrom-SVN: r158540", "tree": {"sha": "0b18b2817bda588ead5ef8dfb825d5f7a177e15e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b18b2817bda588ead5ef8dfb825d5f7a177e15e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72e2cf162959f344ec2e9a7488858a18574e3db1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72e2cf162959f344ec2e9a7488858a18574e3db1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72e2cf162959f344ec2e9a7488858a18574e3db1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72e2cf162959f344ec2e9a7488858a18574e3db1/comments", "author": null, "committer": null, "parents": [{"sha": "4a863f3a0b20b9b14e44e44433b6ca1d35e91691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a863f3a0b20b9b14e44e44433b6ca1d35e91691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a863f3a0b20b9b14e44e44433b6ca1d35e91691"}], "stats": {"total": 42, "additions": 37, "deletions": 5}, "files": [{"sha": "5397101de3f896db8da98d92fb3c2425c6f8c68c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2cf162959f344ec2e9a7488858a18574e3db1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2cf162959f344ec2e9a7488858a18574e3db1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72e2cf162959f344ec2e9a7488858a18574e3db1", "patch": "@@ -1,3 +1,9 @@\n+2010-04-20  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\tPR target/43635\n+\t* config/s390/s390.c (s390_emit_call): Turn direct into indirect\n+\tcalls for -fpic -m31 if they have been sibcall optimized.\n+\n 2010-04-19  James E. Wilson  <wilson@codesourcery.com>\n \n \tPR rtl-optimization/43520"}, {"sha": "858aac9f08494db1350e41696acb4899ac48888c", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2cf162959f344ec2e9a7488858a18574e3db1/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2cf162959f344ec2e9a7488858a18574e3db1/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=72e2cf162959f344ec2e9a7488858a18574e3db1", "patch": "@@ -9539,11 +9539,25 @@ s390_emit_call (rtx addr_location, rtx tls_call, rtx result_reg,\n          replace the symbol itself with the PLT stub.  */\n       if (flag_pic && !SYMBOL_REF_LOCAL_P (addr_location))\n         {\n-\t  addr_location = gen_rtx_UNSPEC (Pmode,\n-\t\t\t\t\t  gen_rtvec (1, addr_location),\n-\t\t\t\t\t  UNSPEC_PLT);\n-\t  addr_location = gen_rtx_CONST (Pmode, addr_location);\n-\t  plt_call = true;\n+\t  if (retaddr_reg != NULL_RTX)\n+\t    {\n+\t      addr_location = gen_rtx_UNSPEC (Pmode,\n+\t\t\t\t\t      gen_rtvec (1, addr_location),\n+\t\t\t\t\t      UNSPEC_PLT);\n+\t      addr_location = gen_rtx_CONST (Pmode, addr_location);\n+\t      plt_call = true;\n+\t    }\n+\t  else\n+\t    /* For -fpic code the PLT entries might use r12 which is\n+\t       call-saved.  Therefore we cannot do a sibcall when\n+\t       calling directly using a symbol ref.  When reaching\n+\t       this point we decided (in s390_function_ok_for_sibcall)\n+\t       to do a sibcall for a function pointer but one of the\n+\t       optimizers was able to get rid of the function pointer\n+\t       by propagating the symbol ref into the call.  This\n+\t       optimization is illegal for S/390 so we turn the direct\n+\t       call into a indirect call again.  */\n+\t    addr_location = force_reg (Pmode, addr_location);\n         }\n \n       /* Unless we can use the bras(l) insn, force the"}, {"sha": "73295fcd1a3225dc2145432881959b8f82e245da", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2cf162959f344ec2e9a7488858a18574e3db1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2cf162959f344ec2e9a7488858a18574e3db1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=72e2cf162959f344ec2e9a7488858a18574e3db1", "patch": "@@ -1,3 +1,8 @@\n+2010-04-20  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\tPR target/43635\n+\t* gcc.c-torture/compile/pr43635.c: New testcase.\n+\n 2010-04-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/43339"}, {"sha": "4039fa7a569dcca906ff45ca80e61bf5477c79e4", "filename": "gcc/testsuite/gcc.c-torture/compile/pr43635.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e2cf162959f344ec2e9a7488858a18574e3db1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr43635.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e2cf162959f344ec2e9a7488858a18574e3db1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr43635.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr43635.c?ref=72e2cf162959f344ec2e9a7488858a18574e3db1", "patch": "@@ -0,0 +1,7 @@\n+extern void d (void);\n+\n+void (*foo (void)) (float)\n+{\n+  void (*(*x) (void)) (float) = d;\n+  return (*x) ();\n+}"}]}