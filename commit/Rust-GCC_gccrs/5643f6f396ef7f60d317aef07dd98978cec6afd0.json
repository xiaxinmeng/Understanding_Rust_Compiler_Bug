{"sha": "5643f6f396ef7f60d317aef07dd98978cec6afd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY0M2Y2ZjM5NmVmN2Y2MGQzMTdhZWYwN2RkOTg5NzhjZWM2YWZkMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-03-11T16:57:20Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-03-11T17:52:57Z"}, "message": "libstdc++: Make barrier::arrival_token a move-only class type\n\nThe standard only specifies that barrier::arrival_token is a move\nconstructible and move assignable type. We originally used a scoped enum\ntype, but that means we do not diagnose non-portable code that makes\ncopies of arrival tokens (or compares them for equality, or uses them as\nkeys in map!) This wraps the enum in a move-only class type, so that\nusers are forced to pass it correctly.\n\nThe move constructor and move assignment operator of the new class do\nnot zero out the moved-from token, as that would add additional\ninstructions. That means that passing a moved-from token will work with\nour implementation, despite being a bug in the user code. We could\nconsider doing that zeroing out in debug mode.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/barrier (barrier::arrival_token): New move-only\n\tclass that encapsulates the underlying token value.", "tree": {"sha": "3b85a3697a4d0b407b218d134b7f79dceafc38ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b85a3697a4d0b407b218d134b7f79dceafc38ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5643f6f396ef7f60d317aef07dd98978cec6afd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5643f6f396ef7f60d317aef07dd98978cec6afd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5643f6f396ef7f60d317aef07dd98978cec6afd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5643f6f396ef7f60d317aef07dd98978cec6afd0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dacc828bf8b087ddfaf797ed7238da45609082c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dacc828bf8b087ddfaf797ed7238da45609082c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dacc828bf8b087ddfaf797ed7238da45609082c"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "6f2b9873500dd8577afc9fe79a09351690b14ae3", "filename": "libstdc++-v3/include/std/barrier", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5643f6f396ef7f60d317aef07dd98978cec6afd0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbarrier", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5643f6f396ef7f60d317aef07dd98978cec6afd0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbarrier", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbarrier?ref=5643f6f396ef7f60d317aef07dd98978cec6afd0", "patch": "@@ -209,27 +209,39 @@ It looks different from literature pseudocode for two main reasons:\n       __algorithm_t _M_b;\n \n     public:\n-      using arrival_token = typename __tree_barrier<_CompletionF>::arrival_token;\n+      class arrival_token final\n+      {\n+      public:\n+\tarrival_token(arrival_token&&) = default;\n+\tarrival_token& operator=(arrival_token&&) = default;\n+\t~arrival_token() = default;\n+\n+      private:\n+\tfriend class barrier;\n+\tusing __token = typename __algorithm_t::arrival_token;\n+\texplicit arrival_token(__token __tok) noexcept : _M_tok(__tok) { }\n+\t__token _M_tok;\n+      };\n \n       static constexpr ptrdiff_t\n       max() noexcept\n       { return __algorithm_t::max(); }\n \n-      explicit barrier(ptrdiff_t __count,\n-\t\t       _CompletionF __completion = _CompletionF())\n-\t  : _M_b(__count, std::move(__completion))\n+      explicit\n+      barrier(ptrdiff_t __count, _CompletionF __completion = _CompletionF())\n+      : _M_b(__count, std::move(__completion))\n       { }\n \n       barrier(barrier const&) = delete;\n       barrier& operator=(barrier const&) = delete;\n \n       [[nodiscard]] arrival_token\n       arrive(ptrdiff_t __update = 1)\n-      { return _M_b.arrive(__update); }\n+      { return arrival_token{_M_b.arrive(__update)}; }\n \n       void\n       wait(arrival_token&& __phase) const\n-      { _M_b.wait(std::move(__phase)); }\n+      { _M_b.wait(std::move(__phase._M_tok)); }\n \n       void\n       arrive_and_wait()"}]}