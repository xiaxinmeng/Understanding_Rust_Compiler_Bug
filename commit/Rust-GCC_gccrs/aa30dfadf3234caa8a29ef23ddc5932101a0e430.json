{"sha": "aa30dfadf3234caa8a29ef23ddc5932101a0e430", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWEzMGRmYWRmMzIzNGNhYThhMjllZjIzZGRjNTkzMjEwMWEwZTQzMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-07-15T18:38:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-07-15T18:38:23Z"}, "message": "PR c++/71711 - mangle C++1z fold-expressions.\n\n\t* operators.def: Add *_FOLD_EXPR.\n\t* cp-tree.h (FOLD_EXPR_P): Parenthesize.\n\t* mangle.c (write_expression): Handle fold-expressions.\n\t* pt.c (tsubst_unary_left_fold, tsubst_binary_left_fold)\n\t(tsubst_unary_right_fold, tsubst_binary_right_fold): Handle\n\tpartial instantiation.\n\nFrom-SVN: r238390", "tree": {"sha": "570594e330f0c11c2307922ac7864b02d6a70bdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/570594e330f0c11c2307922ac7864b02d6a70bdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa30dfadf3234caa8a29ef23ddc5932101a0e430", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa30dfadf3234caa8a29ef23ddc5932101a0e430", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa30dfadf3234caa8a29ef23ddc5932101a0e430", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa30dfadf3234caa8a29ef23ddc5932101a0e430/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "34bbc4c502157fb08e6eba1d09380e2599ec3720", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34bbc4c502157fb08e6eba1d09380e2599ec3720", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34bbc4c502157fb08e6eba1d09380e2599ec3720"}], "stats": {"total": 93, "additions": 88, "deletions": 5}, "files": [{"sha": "d0d855ec088ed9b268498747ca9b8ac7b4c77313", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa30dfadf3234caa8a29ef23ddc5932101a0e430/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa30dfadf3234caa8a29ef23ddc5932101a0e430/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aa30dfadf3234caa8a29ef23ddc5932101a0e430", "patch": "@@ -1,5 +1,13 @@\n 2016-07-15  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/71711\n+\t* operators.def: Add *_FOLD_EXPR.\n+\t* cp-tree.h (FOLD_EXPR_P): Parenthesize.\n+\t* mangle.c (write_expression): Handle fold-expressions.\n+\t* pt.c (tsubst_unary_left_fold, tsubst_binary_left_fold)\n+\t(tsubst_unary_right_fold, tsubst_binary_right_fold): Handle\n+\tpartial instantiation.\n+\n \tPR c++/71814\n \t* mangle.c (write_expression): Handle sizeof... an argument pack.\n "}, {"sha": "7e84036a893200c73b6c70cf3631737c0ad6b3ed", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa30dfadf3234caa8a29ef23ddc5932101a0e430/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa30dfadf3234caa8a29ef23ddc5932101a0e430/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=aa30dfadf3234caa8a29ef23ddc5932101a0e430", "patch": "@@ -3334,11 +3334,11 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n   TREE_CHECK2 (NODE, BINARY_LEFT_FOLD_EXPR, BINARY_RIGHT_FOLD_EXPR)\n \n /* True if NODE is UNARY_FOLD_EXPR or a BINARY_FOLD_EXPR */\n-#define FOLD_EXPR_P(NODE) \\\n-  TREE_CODE (NODE) == UNARY_LEFT_FOLD_EXPR \\\n-    || TREE_CODE (NODE) == UNARY_RIGHT_FOLD_EXPR \\\n-    || TREE_CODE (NODE) == BINARY_LEFT_FOLD_EXPR \\\n-    || TREE_CODE (NODE) == BINARY_RIGHT_FOLD_EXPR\n+#define FOLD_EXPR_P(NODE)\t\t\t\t\\\n+  (TREE_CODE (NODE) == UNARY_LEFT_FOLD_EXPR\t\t\\\n+   || TREE_CODE (NODE) == UNARY_RIGHT_FOLD_EXPR\t\t\\\n+   || TREE_CODE (NODE) == BINARY_LEFT_FOLD_EXPR\t\t\\\n+   || TREE_CODE (NODE) == BINARY_RIGHT_FOLD_EXPR)\n \n /* True when NODE is a fold over a compound assignment operator. */\n #define FOLD_EXPR_MODIFY_P(NODE) \\"}, {"sha": "d5b26d64d8e4421f86c95c9a16ef3f287563eb8e", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa30dfadf3234caa8a29ef23ddc5932101a0e430/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa30dfadf3234caa8a29ef23ddc5932101a0e430/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=aa30dfadf3234caa8a29ef23ddc5932101a0e430", "patch": "@@ -3145,6 +3145,29 @@ write_expression (tree expr)\n \t\t\t \"cannot be mangled\");\n \t\t  continue;\n \t\t}\n+\t      else if (FOLD_EXPR_P (expr))\n+\t\t{\n+\t\t  /* The first 'operand' of a fold-expression is the operator\n+\t\t     that it folds over.  */\n+\t\t  if (i == 0)\n+\t\t    {\n+\t\t      int fcode = TREE_INT_CST_LOW (operand);\n+\t\t      write_string (operator_name_info[fcode].mangled_name);\n+\t\t      continue;\n+\t\t    }\n+\t\t  else if (code == BINARY_LEFT_FOLD_EXPR)\n+\t\t    {\n+\t\t      /* The order of operands of the binary left and right\n+\t\t\t folds is the same, but we want to mangle them in\n+\t\t\t lexical order, i.e. non-pack first.  */\n+\t\t      if (i == 1)\n+\t\t\toperand = FOLD_EXPR_INIT (expr);\n+\t\t      else\n+\t\t\toperand = FOLD_EXPR_PACK (expr);\n+\t\t    }\n+\t\t  if (PACK_EXPANSION_P (operand))\n+\t\t    operand = PACK_EXPANSION_PATTERN (operand);\n+\t\t}\n \t      write_expression (operand);\n \t    }\n \t}"}, {"sha": "5b4f1b0be2a0983d1e10c2d1fd4d9fc09e1a4fda", "filename": "gcc/cp/operators.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa30dfadf3234caa8a29ef23ddc5932101a0e430/gcc%2Fcp%2Foperators.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa30dfadf3234caa8a29ef23ddc5932101a0e430/gcc%2Fcp%2Foperators.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foperators.def?ref=aa30dfadf3234caa8a29ef23ddc5932101a0e430", "patch": "@@ -155,3 +155,7 @@ DEF_SIMPLE_OPERATOR (\"()\", CALL_EXPR, \"cl\", -1)\n \n /* Variadic templates extension. */\n DEF_SIMPLE_OPERATOR (\"...\", EXPR_PACK_EXPANSION, \"sp\", 1)\n+DEF_SIMPLE_OPERATOR (\"... +\", UNARY_LEFT_FOLD_EXPR, \"fl\", 2)\n+DEF_SIMPLE_OPERATOR (\"+ ...\", UNARY_RIGHT_FOLD_EXPR, \"fr\", 2)\n+DEF_SIMPLE_OPERATOR (\"+ ... +\", BINARY_LEFT_FOLD_EXPR, \"fL\", 3)\n+DEF_SIMPLE_OPERATOR (\"+ ... +\", BINARY_RIGHT_FOLD_EXPR, \"fR\", 3)"}, {"sha": "de70fb2f1c6104595e986dd1ab1cb2f01f07bd2e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa30dfadf3234caa8a29ef23ddc5932101a0e430/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa30dfadf3234caa8a29ef23ddc5932101a0e430/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=aa30dfadf3234caa8a29ef23ddc5932101a0e430", "patch": "@@ -10791,6 +10791,12 @@ tsubst_unary_left_fold (tree t, tree args, tsubst_flags_t complain,\n   tree pack = tsubst_fold_expr_pack (t, args, complain, in_decl);\n   if (pack == error_mark_node)\n     return error_mark_node;\n+  if (PACK_EXPANSION_P (pack))\n+    {\n+      tree r = copy_node (t);\n+      FOLD_EXPR_PACK (r) = pack;\n+      return r;\n+    }\n   if (TREE_VEC_LENGTH (pack) == 0)\n     return expand_empty_fold (t, complain);\n   else\n@@ -10813,6 +10819,14 @@ tsubst_binary_left_fold (tree t, tree args, tsubst_flags_t complain,\n   if (init == error_mark_node)\n     return error_mark_node;\n \n+  if (PACK_EXPANSION_P (pack))\n+    {\n+      tree r = copy_node (t);\n+      FOLD_EXPR_PACK (r) = pack;\n+      FOLD_EXPR_INIT (r) = init;\n+      return r;\n+    }\n+\n   tree vec = make_tree_vec (TREE_VEC_LENGTH (pack) + 1);\n   TREE_VEC_ELT (vec, 0) = init;\n   for (int i = 0; i < TREE_VEC_LENGTH (pack); ++i)\n@@ -10854,6 +10868,12 @@ tsubst_unary_right_fold (tree t, tree args, tsubst_flags_t complain,\n   tree pack = tsubst_fold_expr_pack (t, args, complain, in_decl);\n   if (pack == error_mark_node)\n     return error_mark_node;\n+  if (PACK_EXPANSION_P (pack))\n+    {\n+      tree r = copy_node (t);\n+      FOLD_EXPR_PACK (r) = pack;\n+      return r;\n+    }\n   if (TREE_VEC_LENGTH (pack) == 0)\n     return expand_empty_fold (t, complain);\n   else\n@@ -10876,6 +10896,14 @@ tsubst_binary_right_fold (tree t, tree args, tsubst_flags_t complain,\n   if (init == error_mark_node)\n     return error_mark_node;\n \n+  if (PACK_EXPANSION_P (pack))\n+    {\n+      tree r = copy_node (t);\n+      FOLD_EXPR_PACK (r) = pack;\n+      FOLD_EXPR_INIT (r) = init;\n+      return r;\n+    }\n+\n   int n = TREE_VEC_LENGTH (pack);\n   tree vec = make_tree_vec (n + 1);\n   for (int i = 0; i < n; ++i)"}, {"sha": "1a8f16c8b7736a9733c67a4e7bf6c5549c624077", "filename": "gcc/testsuite/g++.dg/cpp1z/fold-mangle.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa30dfadf3234caa8a29ef23ddc5932101a0e430/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold-mangle.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa30dfadf3234caa8a29ef23ddc5932101a0e430/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold-mangle.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold-mangle.C?ref=aa30dfadf3234caa8a29ef23ddc5932101a0e430", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/71711\n+// { dg-options -std=c++1z }\n+\n+template < int > struct A {};\n+template < int ... N > void unary_left (A < (... + N) >);\n+template < int ... N > void unary_right (A < (N + ...) >);\n+template < int ... N > void binary_left (A < (42 + ... + N) >);\n+template < int ... N > void binary_right (A < (N + ... + 42) >);\n+\n+void bar ()  \n+{\n+  // { dg-final { scan-assembler \"_Z10unary_leftIJLi1ELi2ELi3EEEv1AIXflplT_EE\" } }\n+  unary_left < 1, 2, 3 > ({});\n+  // { dg-final { scan-assembler \"_Z11unary_rightIJLi1ELi2ELi3EEEv1AIXfrplT_EE\" } }\n+  unary_right < 1, 2, 3 > ({});\n+  // { dg-final { scan-assembler \"_Z11binary_leftIJLi1ELi2ELi3EEEv1AIXfLplLi42ET_EE\" } }\n+  binary_left < 1, 2, 3 > ({});\n+  // { dg-final { scan-assembler \"_Z12binary_rightIJLi1ELi2ELi3EEEv1AIXfRplT_Li42EEE\" } }\n+  binary_right < 1, 2, 3 > ({});\n+}"}]}