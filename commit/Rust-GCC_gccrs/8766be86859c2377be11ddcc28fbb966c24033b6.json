{"sha": "8766be86859c2377be11ddcc28fbb966c24033b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc2NmJlODY4NTljMjM3N2JlMTFkZGNjMjhmYmI5NjZjMjQwMzNiNg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2005-04-19T18:26:43Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2005-04-19T18:26:43Z"}, "message": "hashtab.h, [...]: Don't use the PTR macro.\n\n\t* hashtab.h, libiberty.h, objalloc.h, splay-tree.h, ternary.h:\n\tDon't use the PTR macro.\n\n\t* sort.h: Don't use the PARAMS macro.\n\nFrom-SVN: r98416", "tree": {"sha": "94e3ebdcb26d7ee52039b497fe251f42669043ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94e3ebdcb26d7ee52039b497fe251f42669043ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8766be86859c2377be11ddcc28fbb966c24033b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8766be86859c2377be11ddcc28fbb966c24033b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8766be86859c2377be11ddcc28fbb966c24033b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8766be86859c2377be11ddcc28fbb966c24033b6/comments", "author": null, "committer": null, "parents": [{"sha": "2586bf38d81521841f2f743ebabd445b489c3060", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2586bf38d81521841f2f743ebabd445b489c3060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2586bf38d81521841f2f743ebabd445b489c3060"}], "stats": {"total": 66, "additions": 36, "deletions": 30}, "files": [{"sha": "20f8922a72df4a90549283cf79c358d4d4f9dacd", "filename": "include/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8766be86859c2377be11ddcc28fbb966c24033b6/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8766be86859c2377be11ddcc28fbb966c24033b6/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=8766be86859c2377be11ddcc28fbb966c24033b6", "patch": "@@ -1,3 +1,10 @@\n+2005-04-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* hashtab.h, libiberty.h, objalloc.h, splay-tree.h, ternary.h:\n+\tDon't use the PTR macro.\n+\n+\t* sort.h: Don't use the PARAMS macro.\n+\n 2005-04-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* libiberty.h (unlock_stream): New."}, {"sha": "657652250159bd554b6d125f6b9e9335128502f6", "filename": "include/hashtab.h", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8766be86859c2377be11ddcc28fbb966c24033b6/include%2Fhashtab.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8766be86859c2377be11ddcc28fbb966c24033b6/include%2Fhashtab.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fhashtab.h?ref=8766be86859c2377be11ddcc28fbb966c24033b6", "patch": "@@ -71,14 +71,14 @@ typedef int (*htab_trav) (void **, void *);\n    Iff it returns NULL, the hash table implementation will pass an error\n    code back to the user, so if your code doesn't handle errors,\n    best if you use xcalloc instead.  */\n-typedef PTR (*htab_alloc) (size_t, size_t);\n+typedef void *(*htab_alloc) (size_t, size_t);\n \n /* We also need a free() routine.  */\n-typedef void (*htab_free) (PTR);\n+typedef void (*htab_free) (void *);\n \n /* Memory allocation and deallocation; variants which take an extra\n    argument.  */\n-typedef PTR (*htab_alloc_with_arg) (void *, size_t, size_t);\n+typedef void *(*htab_alloc_with_arg) (void *, size_t, size_t);\n typedef void (*htab_free_with_arg) (void *, void *);\n \n /* Hash tables are of the following type.  The structure\n@@ -99,7 +99,7 @@ struct htab GTY(())\n   htab_del del_f;\n \n   /* Table itself.  */\n-  PTR * GTY ((use_param, length (\"%h.size\"))) entries;\n+  void ** GTY ((use_param, length (\"%h.size\"))) entries;\n \n   /* Current size (in entries) of the hash table.  */\n   size_t size;\n@@ -123,7 +123,7 @@ struct htab GTY(())\n   htab_free free_f;\n \n   /* Alternate allocate/free functions, which take an extra argument.  */\n-  PTR GTY((skip)) alloc_arg;\n+  void * GTY((skip)) alloc_arg;\n   htab_alloc_with_arg alloc_with_arg_f;\n   htab_free_with_arg free_with_arg_f;\n \n@@ -145,7 +145,7 @@ extern htab_t\thtab_create_alloc  (size_t, htab_hash,\n \n extern htab_t\thtab_create_alloc_ex (size_t, htab_hash,\n                                       htab_eq, htab_del,\n-                                      PTR, htab_alloc_with_arg,\n+                                      void *, htab_alloc_with_arg,\n                                       htab_free_with_arg);\n \n /* Backward-compatibility functions.  */\n@@ -154,18 +154,17 @@ extern htab_t htab_try_create (size_t, htab_hash, htab_eq, htab_del);\n \n extern void\thtab_set_functions_ex (htab_t, htab_hash,\n                                        htab_eq, htab_del,\n-                                       PTR, htab_alloc_with_arg,\n+                                       void *, htab_alloc_with_arg,\n                                        htab_free_with_arg);\n \n extern void\thtab_delete (htab_t);\n extern void\thtab_empty (htab_t);\n \n-extern PTR\thtab_find (htab_t, const void *);\n-extern PTR     *htab_find_slot (htab_t, const void *, enum insert_option);\n-extern PTR\thtab_find_with_hash (htab_t, const void *, hashval_t);\n-extern PTR     *htab_find_slot_with_hash (htab_t, const void *,\n-                                          hashval_t,\n-                                          enum insert_option);\n+extern void *\thtab_find (htab_t, const void *);\n+extern void **\thtab_find_slot (htab_t, const void *, enum insert_option);\n+extern void *\thtab_find_with_hash (htab_t, const void *, hashval_t);\n+extern void **\thtab_find_slot_with_hash (htab_t, const void *,\n+\t\t\t\t\t  hashval_t, enum insert_option);\n extern void\thtab_clear_slot\t(htab_t, void **);\n extern void\thtab_remove_elt\t(htab_t, void *);\n extern void\thtab_remove_elt_with_hash (htab_t, void *, hashval_t);\n@@ -184,10 +183,10 @@ extern htab_hash htab_hash_pointer;\n extern htab_eq htab_eq_pointer;\n \n /* A hash function for null-terminated strings.  */\n-extern hashval_t htab_hash_string (const PTR);\n+extern hashval_t htab_hash_string (const void *);\n \n /* An iterative hash function for arbitrary data.  */\n-extern hashval_t iterative_hash (const PTR, size_t, hashval_t);\n+extern hashval_t iterative_hash (const void *, size_t, hashval_t);\n /* Shorthand for hashing something with an intrinsic size.  */\n #define iterative_hash_object(OB,INIT) iterative_hash (&OB, sizeof (OB), INIT)\n "}, {"sha": "df36cdc8ab3f5463afe7f5e65fe9fedf54160968", "filename": "include/libiberty.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8766be86859c2377be11ddcc28fbb966c24033b6/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8766be86859c2377be11ddcc28fbb966c24033b6/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=8766be86859c2377be11ddcc28fbb966c24033b6", "patch": "@@ -259,18 +259,18 @@ extern void xmalloc_failed (size_t) ATTRIBUTE_NORETURN;\n    message to stderr (using the name set by xmalloc_set_program_name,\n    if any) and then call xexit.  */\n \n-extern PTR xmalloc (size_t) ATTRIBUTE_MALLOC;\n+extern void *xmalloc (size_t) ATTRIBUTE_MALLOC;\n \n /* Reallocate memory without fail.  This works like xmalloc.  Note,\n    realloc type functions are not suitable for attribute malloc since\n    they may return the same address across multiple calls. */\n \n-extern PTR xrealloc (PTR, size_t);\n+extern void *xrealloc (void *, size_t);\n \n /* Allocate memory without fail and set it to zero.  This works like\n    xmalloc.  */\n \n-extern PTR xcalloc (size_t, size_t) ATTRIBUTE_MALLOC;\n+extern void *xcalloc (size_t, size_t) ATTRIBUTE_MALLOC;\n \n /* Copy a string into a memory buffer without fail.  */\n \n@@ -282,7 +282,7 @@ extern char *xstrndup (const char *, size_t) ATTRIBUTE_MALLOC;\n \n /* Copy an existing memory buffer to a new memory buffer without fail.  */\n \n-extern PTR xmemdup (const PTR, size_t, size_t) ATTRIBUTE_MALLOC;\n+extern void *xmemdup (const void *, size_t, size_t) ATTRIBUTE_MALLOC;\n \n /* Physical memory routines.  Return values are in BYTES.  */\n extern double physmem_total (void);\n@@ -530,7 +530,7 @@ extern int vasprintf (char **, const char *, va_list)\n    USE_C_ALLOCA yourself.  The canonical autoconf macro C_ALLOCA is\n    also set/unset as it is often used to indicate whether code needs\n    to call alloca(0).  */\n-extern PTR C_alloca (size_t) ATTRIBUTE_MALLOC;\n+extern void *C_alloca (size_t) ATTRIBUTE_MALLOC;\n #undef alloca\n #if GCC_VERSION >= 2000 && !defined USE_C_ALLOCA\n # define alloca(x) __builtin_alloca(x)"}, {"sha": "bb4cbb14a6b7fb197e1896f1e977d695c9eba4f0", "filename": "include/objalloc.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8766be86859c2377be11ddcc28fbb966c24033b6/include%2Fobjalloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8766be86859c2377be11ddcc28fbb966c24033b6/include%2Fobjalloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fobjalloc.h?ref=8766be86859c2377be11ddcc28fbb966c24033b6", "patch": "@@ -45,7 +45,7 @@ struct objalloc\n {\n   char *current_ptr;\n   unsigned int current_space;\n-  PTR chunks;\n+  void *chunks;\n };\n \n /* Work out the required alignment.  */\n@@ -69,7 +69,7 @@ extern struct objalloc *objalloc_create (void);\n /* Allocate space from an objalloc structure.  Returns NULL if malloc\n    fails.  */\n \n-extern PTR _objalloc_alloc (struct objalloc *, unsigned long);\n+extern void *_objalloc_alloc (struct objalloc *, unsigned long);\n \n /* The macro version of objalloc_alloc.  We only define this if using\n    gcc, because otherwise we would have to evaluate the arguments\n@@ -94,7 +94,7 @@ extern PTR _objalloc_alloc (struct objalloc *, unsigned long);\n      (__len <= __o->current_space\t\t\t\t\t\\\n       ? (__o->current_ptr += __len,\t\t\t\t\t\\\n \t __o->current_space -= __len,\t\t\t\t\t\\\n-\t (PTR) (__o->current_ptr - __len))\t\t\t\t\\\n+\t (void *) (__o->current_ptr - __len))\t\t\t\t\\\n       : _objalloc_alloc (__o, __len)); })\n \n #else /* ! __GNUC__ */\n@@ -110,6 +110,6 @@ extern void objalloc_free (struct objalloc *);\n /* Free a block allocated by objalloc_alloc.  This also frees all more\n    recently allocated blocks.  */\n \n-extern void objalloc_free_block (struct objalloc *, PTR);\n+extern void objalloc_free_block (struct objalloc *, void *);\n \n #endif /* OBJALLOC_H */"}, {"sha": "10aafb0855609f40184c4b6c492fa1bc731c9821", "filename": "include/sort.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8766be86859c2377be11ddcc28fbb966c24033b6/include%2Fsort.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8766be86859c2377be11ddcc28fbb966c24033b6/include%2Fsort.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fsort.h?ref=8766be86859c2377be11ddcc28fbb966c24033b6", "patch": "@@ -35,7 +35,7 @@ extern \"C\" {\n \n /* Sort an array of pointers.  */\n \n-extern void sort_pointers PARAMS ((size_t, void **, void **));\n+extern void sort_pointers (size_t, void **, void **);\n \n #ifdef __cplusplus\n }"}, {"sha": "ca11711ea11d4ba0a41d66e4a787fdefd5baab67", "filename": "include/splay-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8766be86859c2377be11ddcc28fbb966c24033b6/include%2Fsplay-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8766be86859c2377be11ddcc28fbb966c24033b6/include%2Fsplay-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fsplay-tree.h?ref=8766be86859c2377be11ddcc28fbb966c24033b6", "patch": "@@ -69,7 +69,7 @@ typedef int (*splay_tree_foreach_fn) (splay_tree_node, void*);\n    node structures.  The first argument is the number of bytes needed;\n    the second is a data pointer the splay tree functions pass through\n    to the allocator.  This function must never return zero.  */\n-typedef PTR (*splay_tree_allocate_fn) (int, void *);\n+typedef void *(*splay_tree_allocate_fn) (int, void *);\n \n /* The type of a function used to free memory allocated using the\n    corresponding splay_tree_allocate_fn.  The first argument is the\n@@ -109,7 +109,7 @@ struct splay_tree_s GTY(())\n   /* Allocate/free functions, and a data pointer to pass to them.  */\n   splay_tree_allocate_fn allocate;\n   splay_tree_deallocate_fn deallocate;\n-  PTR GTY((skip)) allocate_data;\n+  void * GTY((skip)) allocate_data;\n \n };\n typedef struct splay_tree_s *splay_tree;"}, {"sha": "b346ac8b8e0a59c58a9874442baad6531b3a4e4d", "filename": "include/ternary.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8766be86859c2377be11ddcc28fbb966c24033b6/include%2Fternary.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8766be86859c2377be11ddcc28fbb966c24033b6/include%2Fternary.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fternary.h?ref=8766be86859c2377be11ddcc28fbb966c24033b6", "patch": "@@ -38,14 +38,14 @@ ternary_node;\n    already there, and replace is 0.\n    Otherwise, replaces if it it exists, inserts if it doesn't, and\n    returns the data you passed in. */\n-PTR ternary_insert (ternary_tree *p, const char *s,\n-                    PTR data, int replace);\n+void *ternary_insert (ternary_tree *p, const char *s,\n+\t\t      void *data, int replace);\n \n /* Delete the ternary search tree rooted at P. \n    Does NOT delete the data you associated with the strings. */\n void ternary_cleanup (ternary_tree p);\n \n /* Search the ternary tree for string S, returning the data associated\n    with it if found. */\n-PTR ternary_search (const ternary_node *p, const char *s);\n+void *ternary_search (const ternary_node *p, const char *s);\n #endif"}]}