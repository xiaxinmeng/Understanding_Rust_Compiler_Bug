{"sha": "da0bfb866eaa5ae5888e8815ec75878a43892dfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGEwYmZiODY2ZWFhNWFlNTg4OGU4ODE1ZWM3NTg3OGE0Mzg5MmRmYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-05-21T15:12:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-05-21T15:12:35Z"}, "message": "configure.ac: Add -std=c++98 to stage1_cxxflags.\n\n\t* configure.ac: Add -std=c++98 to stage1_cxxflags.\n\t* Makefile.tpl (STAGE1_CXXFLAGS): And substitute it.\n\t* Makefile.in, configure: Regenerate.\n\nFrom-SVN: r223487", "tree": {"sha": "c28aed42a444d33939b48f99079c4e4173b2593c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c28aed42a444d33939b48f99079c4e4173b2593c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da0bfb866eaa5ae5888e8815ec75878a43892dfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da0bfb866eaa5ae5888e8815ec75878a43892dfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da0bfb866eaa5ae5888e8815ec75878a43892dfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da0bfb866eaa5ae5888e8815ec75878a43892dfb/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f2e2a985429ab708a31abf0bd3bc3df9dbbc3033", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2e2a985429ab708a31abf0bd3bc3df9dbbc3033", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2e2a985429ab708a31abf0bd3bc3df9dbbc3033"}], "stats": {"total": 47, "additions": 35, "deletions": 12}, "files": [{"sha": "7b2f2b29ff4bdf7cc66a4a17b03f3fc36b91109b", "filename": "ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0bfb866eaa5ae5888e8815ec75878a43892dfb/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0bfb866eaa5ae5888e8815ec75878a43892dfb/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=da0bfb866eaa5ae5888e8815ec75878a43892dfb", "patch": "@@ -1,3 +1,9 @@\n+2015-05-21  Jason Merrill  <jason@redhat.com>\n+\n+\t* configure.ac: Add -std=c++98 to stage1_cxxflags.\n+\t* Makefile.tpl (STAGE1_CXXFLAGS): And substitute it.\n+\t* Makefile.in, configure: Regenerate.\n+\n 2015-05-16  James Bowman  <james.bowman@ftdichip.com>\n \n \t* configure.ac: FT32 target added."}, {"sha": "7ae2a40d4e3adb9f78e4c5afba23b9821590807a", "filename": "Makefile.in", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0bfb866eaa5ae5888e8815ec75878a43892dfb/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0bfb866eaa5ae5888e8815ec75878a43892dfb/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=da0bfb866eaa5ae5888e8815ec75878a43892dfb", "patch": "@@ -482,13 +482,12 @@ STAGEfeedback_TFLAGS = $(STAGE_TFLAGS)\n STAGEfeedback_CONFIGURE_FLAGS = $(STAGE_CONFIGURE_FLAGS)\n \n \n-# Only build the C compiler for stage1, because that is the only one that\n-# we can guarantee will build with the native compiler, and also it is the\n-# only thing useful for building stage2. STAGE1_CFLAGS (via CFLAGS),\n-# MAKEINFO and MAKEINFOFLAGS are explicitly passed here to make them\n-# overrideable (for a bootstrap build stage1 also builds gcc.info).\n+# By default, C and C++ are the only stage1 languages, because they are the\n+# only ones we require to build with the bootstrap compiler, and also the\n+# only ones useful for building stage2.\n \n STAGE1_CFLAGS = @stage1_cflags@\n+STAGE1_CXXFLAGS = @stage1_cxxflags@\n STAGE1_CHECKING = @stage1_checking@\n STAGE1_LANGUAGES = @stage1_languages@\n # * We force-disable intermodule optimizations, even if\n@@ -677,7 +676,9 @@ CXX_FOR_TARGET_FLAG_TO_PASS = \\\n \t$(shell if echo \"$(CXX_FOR_TARGET)\" | grep \" -funconfigured-\" > /dev/null; then :; else echo '\"CXX_FOR_TARGET=$(CXX_FOR_TARGET)\"'; fi)\n @endif target-libstdc++-v3\n \n-# Flags to pass down to all sub-makes.\n+# Flags to pass down to all sub-makes. STAGE*FLAGS,\n+# MAKEINFO and MAKEINFOFLAGS are explicitly passed here to make them\n+# overrideable (for a bootstrap build stage1 also builds gcc.info).\n BASE_FLAGS_TO_PASS = \\\n \t\"DESTDIR=$(DESTDIR)\" \\\n \t\"RPATH_ENVVAR=$(RPATH_ENVVAR)\" \\"}, {"sha": "914196f0914835a1d7f656933c480facbcf9e6ad", "filename": "Makefile.tpl", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0bfb866eaa5ae5888e8815ec75878a43892dfb/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0bfb866eaa5ae5888e8815ec75878a43892dfb/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=da0bfb866eaa5ae5888e8815ec75878a43892dfb", "patch": "@@ -435,13 +435,12 @@ STAGE[+id+]_TFLAGS = $(STAGE_TFLAGS)\n STAGE[+id+]_CONFIGURE_FLAGS = $(STAGE_CONFIGURE_FLAGS)\n [+ ENDFOR bootstrap-stage +]\n \n-# Only build the C compiler for stage1, because that is the only one that\n-# we can guarantee will build with the native compiler, and also it is the\n-# only thing useful for building stage2. STAGE1_CFLAGS (via CFLAGS),\n-# MAKEINFO and MAKEINFOFLAGS are explicitly passed here to make them\n-# overrideable (for a bootstrap build stage1 also builds gcc.info).\n+# By default, C and C++ are the only stage1 languages, because they are the\n+# only ones we require to build with the bootstrap compiler, and also the\n+# only ones useful for building stage2.\n \n STAGE1_CFLAGS = @stage1_cflags@\n+STAGE1_CXXFLAGS = @stage1_cxxflags@\n STAGE1_CHECKING = @stage1_checking@\n STAGE1_LANGUAGES = @stage1_languages@\n # * We force-disable intermodule optimizations, even if\n@@ -579,7 +578,9 @@ CXX_FOR_TARGET_FLAG_TO_PASS = \\\n \t$(shell if echo \"$(CXX_FOR_TARGET)\" | grep \" -funconfigured-\" > /dev/null; then :; else echo '\"CXX_FOR_TARGET=$(CXX_FOR_TARGET)\"'; fi)\n @endif target-libstdc++-v3\n \n-# Flags to pass down to all sub-makes.\n+# Flags to pass down to all sub-makes. STAGE*FLAGS,\n+# MAKEINFO and MAKEINFOFLAGS are explicitly passed here to make them\n+# overrideable (for a bootstrap build stage1 also builds gcc.info).\n BASE_FLAGS_TO_PASS =[+ FOR flags_to_pass +][+ IF optional +] \\\n \t\"`echo '[+flag+]=$([+flag+])' | sed -e s'/[^=][^=]*=$$/XFOO=/'`\"[+ ELSE optional +] \\\n \t\"[+flag+]=$([+flag+])\"[+ ENDIF optional+][+ ENDFOR flags_to_pass +][+ FOR bootstrap-stage +] \\"}, {"sha": "07aba3e460d19d2f122648f8d97715c0c9070e7b", "filename": "configure", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0bfb866eaa5ae5888e8815ec75878a43892dfb/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0bfb866eaa5ae5888e8815ec75878a43892dfb/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=da0bfb866eaa5ae5888e8815ec75878a43892dfb", "patch": "@@ -559,6 +559,7 @@ compare_exclusions\n host_shared\n stage2_werror_flag\n stage1_checking\n+stage1_cxxflags\n stage1_cflags\n MAINT\n MAINTAINER_MODE_FALSE\n@@ -14755,6 +14756,13 @@ case $build in\n       *) stage1_cflags=\"-g -J\" ;;\n     esac ;;\n esac\n+stage1_cxxflags='$(STAGE1_CFLAGS)'\n+if test \"$GCC\" = yes; then\n+  # Build stage 1 in C++98 mode to ensure that a C++98 compiler can still\n+  # start the bootstrap.\n+  stage1_cxxflags=\"$stage1_cxxflags -std=c++98\"\n+fi\n+\n \n \n "}, {"sha": "5808eda41aa4308efbc5e13d145d9d910128fe50", "filename": "configure.ac", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0bfb866eaa5ae5888e8815ec75878a43892dfb/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0bfb866eaa5ae5888e8815ec75878a43892dfb/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=da0bfb866eaa5ae5888e8815ec75878a43892dfb", "patch": "@@ -3476,8 +3476,15 @@ case $build in\n       *) stage1_cflags=\"-g -J\" ;;\n     esac ;;\n esac\n+stage1_cxxflags='$(STAGE1_CFLAGS)'\n+if test \"$GCC\" = yes; then\n+  # Build stage 1 in C++98 mode to ensure that a C++98 compiler can still\n+  # start the bootstrap.\n+  stage1_cxxflags=\"$stage1_cxxflags -std=c++98\"\n+fi\n \n AC_SUBST(stage1_cflags)\n+AC_SUBST(stage1_cxxflags)\n \n # Enable --enable-checking in stage1 of the compiler.\n AC_ARG_ENABLE(stage1-checking,"}]}