{"sha": "c17c0c7a524d2b1eb96cf0edc8a72299fea7b252", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE3YzBjN2E1MjRkMmIxZWI5NmNmMGVkYzhhNzIyOTlmZWE3YjI1Mg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2016-12-15T15:53:50Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2016-12-15T15:53:50Z"}, "message": "[arm] Remove FPU rev field\n\nSimilar to the main ISA, we convert the FPU revision into a set of feature\nbits.  This permits a more complex set of capability relationships to be\nexpressed more easily.  For now we continue to use the traditional bitmasks.\n\n\t* arm.h (FPU_FL_VFPv2) New feature bit.\n\t(FPU_FL_VFPv3, FPU_FL_VFPv4, FPU_FL_VFPv5, FPU_FL_ARMv8): Likewise.\n\t(FPU_VFPv2, FPU_VFPv3, FPU_VFPv4, FPU_VFPv5, FPU_ARMv8): New helper\n\tmacros.\n\t(FPU_DBL, FPU_D32, FPU_NEON, FPU_CRYPTO, FPU_FP16): Likewise.\n\t(TARGET_FPU_REV): Delete.\n\t(TARGET_VFP3): Use feature bits.\n\t(TARGET_VFP5): Likewise.\n\t(TARGET_FMA): Likewise.\n\t(TARGET_FPU_ARMV8): Likewise.\n\t(struct arm_fpu_desc): Delete rev field.\n\t* arm-fpus.def: Delete REV entry, use new feature bits and macros.\n\t* arm.c (all_fpus): Delete rev field.\n\nFrom-SVN: r243708", "tree": {"sha": "9e398d6839691524c2eb4775f4d139cd4a8827c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e398d6839691524c2eb4775f4d139cd4a8827c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c17c0c7a524d2b1eb96cf0edc8a72299fea7b252", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c17c0c7a524d2b1eb96cf0edc8a72299fea7b252", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c17c0c7a524d2b1eb96cf0edc8a72299fea7b252", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c17c0c7a524d2b1eb96cf0edc8a72299fea7b252/comments", "author": null, "committer": null, "parents": [{"sha": "3d7f68c6d99dedb9c00f7fc97156815bf6acaf50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d7f68c6d99dedb9c00f7fc97156815bf6acaf50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d7f68c6d99dedb9c00f7fc97156815bf6acaf50"}], "stats": {"total": 92, "additions": 62, "deletions": 30}, "files": [{"sha": "281eff73f8662c77081fa89acbf1b99902d1a11c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c17c0c7a524d2b1eb96cf0edc8a72299fea7b252/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c17c0c7a524d2b1eb96cf0edc8a72299fea7b252/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c17c0c7a524d2b1eb96cf0edc8a72299fea7b252", "patch": "@@ -1,3 +1,19 @@\n+2016-12-15  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.h (FPU_FL_VFPv2) New feature bit.\n+\t(FPU_FL_VFPv3, FPU_FL_VFPv4, FPU_FL_VFPv5, FPU_FL_ARMv8): Likewise.\n+\t(FPU_VFPv2, FPU_VFPv3, FPU_VFPv4, FPU_VFPv5, FPU_ARMv8): New helper\n+\tmacros.\n+\t(FPU_DBL, FPU_D32, FPU_NEON, FPU_CRYPTO, FPU_FP16): Likewise.\n+\t(TARGET_FPU_REV): Delete.\n+\t(TARGET_VFP3): Use feature bits.\n+\t(TARGET_VFP5): Likewise.\n+\t(TARGET_FMA): Likewise.\n+\t(TARGET_FPU_ARMV8): Likewise.\n+\t(struct arm_fpu_desc): Delete rev field.\n+\t* arm-fpus.def: Delete REV entry, use new feature bits and macros.\n+\t* arm.c (all_fpus): Delete rev field.\n+\n 2016-12-15  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.h (vfp_reg_type): Delete."}, {"sha": "25e2ebdc3d937b6f12626367b57c2b841a7b2579", "filename": "gcc/config/arm/arm-fpus.def", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c17c0c7a524d2b1eb96cf0edc8a72299fea7b252/gcc%2Fconfig%2Farm%2Farm-fpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c17c0c7a524d2b1eb96cf0edc8a72299fea7b252/gcc%2Fconfig%2Farm%2Farm-fpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-fpus.def?ref=c17c0c7a524d2b1eb96cf0edc8a72299fea7b252", "patch": "@@ -19,31 +19,31 @@\n \n /* Before using #include to read this file, define a macro:\n \n-      ARM_FPU(NAME, REV, FEATURES)\n+      ARM_FPU(NAME, FEATURES)\n \n    The arguments are the fields of struct arm_fpu_desc.\n \n    genopt.sh assumes no whitespace up to the first \",\" in each entry.  */\n \n-ARM_FPU(\"vfp\",\t\t\t2, FPU_FL_DBL)\n-ARM_FPU(\"vfpv2\",\t\t2, FPU_FL_DBL)\n-ARM_FPU(\"vfpv3\",\t\t3, FPU_FL_D32 | FPU_FL_DBL)\n-ARM_FPU(\"vfpv3-fp16\",\t\t3, FPU_FL_D32 | FPU_FL_DBL | FPU_FL_FP16)\n-ARM_FPU(\"vfpv3-d16\",\t\t3, FPU_FL_DBL)\n-ARM_FPU(\"vfpv3-d16-fp16\", \t3, FPU_FL_DBL | FPU_FL_FP16)\n-ARM_FPU(\"vfpv3xd\",\t\t3, FPU_FL_NONE)\n-ARM_FPU(\"vfpv3xd-fp16\",\t\t3, FPU_FL_FP16)\n-ARM_FPU(\"neon\",\t\t\t3, FPU_FL_D32 | FPU_FL_DBL | FPU_FL_NEON)\n-ARM_FPU(\"neon-vfpv3\",\t\t3, FPU_FL_D32 | FPU_FL_DBL | FPU_FL_NEON)\n-ARM_FPU(\"neon-fp16\",\t\t3, FPU_FL_D32 | FPU_FL_DBL | FPU_FL_NEON | FPU_FL_FP16)\n-ARM_FPU(\"vfpv4\",\t\t4, FPU_FL_D32 | FPU_FL_DBL | FPU_FL_FP16)\n-ARM_FPU(\"vfpv4-d16\",\t\t4, FPU_FL_DBL | FPU_FL_FP16)\n-ARM_FPU(\"fpv4-sp-d16\",\t\t4, FPU_FL_FP16)\n-ARM_FPU(\"fpv5-sp-d16\",\t\t5, FPU_FL_FP16)\n-ARM_FPU(\"fpv5-d16\",\t\t5, FPU_FL_DBL | FPU_FL_FP16)\n-ARM_FPU(\"neon-vfpv4\",\t\t4, FPU_FL_D32 | FPU_FL_DBL | FPU_FL_NEON | FPU_FL_FP16)\n-ARM_FPU(\"fp-armv8\",\t\t8, FPU_FL_D32 | FPU_FL_DBL | FPU_FL_FP16)\n-ARM_FPU(\"neon-fp-armv8\", \t8, FPU_FL_D32 | FPU_FL_DBL | FPU_FL_NEON | FPU_FL_FP16)\n-ARM_FPU(\"crypto-neon-fp-armv8\", 8, FPU_FL_D32 | FPU_FL_DBL | FPU_FL_NEON | FPU_FL_FP16 | FPU_FL_CRYPTO)\n+ARM_FPU(\"vfp\",\t\t\tFPU_VFPv2 | FPU_DBL)\n+ARM_FPU(\"vfpv2\",\t\tFPU_VFPv2 | FPU_DBL)\n+ARM_FPU(\"vfpv3\",\t\tFPU_VFPv3 | FPU_D32)\n+ARM_FPU(\"vfpv3-fp16\",\t\tFPU_VFPv3 | FPU_D32 | FPU_FP16)\n+ARM_FPU(\"vfpv3-d16\",\t\tFPU_VFPv3 | FPU_DBL)\n+ARM_FPU(\"vfpv3-d16-fp16\", \tFPU_VFPv3 | FPU_DBL | FPU_FP16)\n+ARM_FPU(\"vfpv3xd\",\t\tFPU_VFPv3)\n+ARM_FPU(\"vfpv3xd-fp16\",\t\tFPU_VFPv3 | FPU_FP16)\n+ARM_FPU(\"neon\",\t\t\tFPU_VFPv3 | FPU_NEON)\n+ARM_FPU(\"neon-vfpv3\",\t\tFPU_VFPv3 | FPU_NEON)\n+ARM_FPU(\"neon-fp16\",\t\tFPU_VFPv3 | FPU_NEON | FPU_FP16)\n+ARM_FPU(\"vfpv4\",\t\tFPU_VFPv4 | FPU_D32 | FPU_FP16)\n+ARM_FPU(\"vfpv4-d16\",\t\tFPU_VFPv4 | FPU_DBL | FPU_FP16)\n+ARM_FPU(\"fpv4-sp-d16\",\t\tFPU_VFPv4 | FPU_FP16)\n+ARM_FPU(\"fpv5-sp-d16\",\t\tFPU_VFPv5 | FPU_FP16)\n+ARM_FPU(\"fpv5-d16\",\t\tFPU_VFPv5 | FPU_DBL | FPU_FP16)\n+ARM_FPU(\"neon-vfpv4\",\t\tFPU_VFPv4 | FPU_NEON | FPU_FP16)\n+ARM_FPU(\"fp-armv8\",\t\tFPU_ARMv8 | FPU_D32 | FPU_FP16)\n+ARM_FPU(\"neon-fp-armv8\", \tFPU_ARMv8 | FPU_NEON | FPU_FP16)\n+ARM_FPU(\"crypto-neon-fp-armv8\", FPU_ARMv8 | FPU_CRYPTO | FPU_FP16)\n /* Compatibility aliases.  */\n-ARM_FPU(\"vfp3\",\t\t\t3, FPU_FL_D32 | FPU_FL_DBL)\n+ARM_FPU(\"vfp3\",\t\t\tFPU_VFPv3 | FPU_D32)"}, {"sha": "e555cf6d08a3d3df7c6953ba1881604d16606655", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c17c0c7a524d2b1eb96cf0edc8a72299fea7b252/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c17c0c7a524d2b1eb96cf0edc8a72299fea7b252/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c17c0c7a524d2b1eb96cf0edc8a72299fea7b252", "patch": "@@ -2323,8 +2323,8 @@ char arm_arch_name[] = \"__ARM_ARCH_PROFILE__\";\n \n const struct arm_fpu_desc all_fpus[] =\n {\n-#define ARM_FPU(NAME, REV, FEATURES) \\\n-  { NAME, REV, FEATURES },\n+#define ARM_FPU(NAME, FEATURES) \\\n+  { NAME, FEATURES },\n #include \"arm-fpus.def\"\n #undef ARM_FPU\n };"}, {"sha": "332f0fabb0425a2b2eddeddf5ee254d991b8c0c1", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c17c0c7a524d2b1eb96cf0edc8a72299fea7b252/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c17c0c7a524d2b1eb96cf0edc8a72299fea7b252/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=c17c0c7a524d2b1eb96cf0edc8a72299fea7b252", "patch": "@@ -164,10 +164,10 @@ extern tree arm_fp16_type_node;\n #define TARGET_VFPD32 (TARGET_FPU_FEATURES & FPU_FL_D32)\n \n /* FPU supports VFPv3 instructions.  */\n-#define TARGET_VFP3 (TARGET_FPU_REV >= 3)\n+#define TARGET_VFP3 (TARGET_FPU_FEATURES & FPU_FL_VFPv3)\n \n /* FPU supports FPv5 instructions.  */\n-#define TARGET_VFP5 (TARGET_FPU_REV >= 5)\n+#define TARGET_VFP5 (TARGET_FPU_FEATURES & FPU_FL_VFPv5)\n \n /* FPU only supports VFP single-precision instructions.  */\n #define TARGET_VFP_SINGLE ((TARGET_FPU_FEATURES & FPU_FL_DBL) == 0)\n@@ -190,10 +190,10 @@ extern tree arm_fp16_type_node;\n   (TARGET_HARD_FLOAT && (TARGET_FP16 && TARGET_VFP5))\n \n /* FPU supports fused-multiply-add operations.  */\n-#define TARGET_FMA (TARGET_FPU_REV >= 4)\n+#define TARGET_FMA (TARGET_FPU_FEATURES & FPU_FL_VFPv4)\n \n /* FPU is ARMv8 compatible.  */\n-#define TARGET_FPU_ARMV8 (TARGET_FPU_REV >= 8)\n+#define TARGET_FPU_ARMV8 (TARGET_FPU_FEATURES & FPU_FL_ARMv8)\n \n /* FPU supports Crypto extensions.  */\n #define TARGET_CRYPTO\t\t\t\t\t\t\t\\\n@@ -341,18 +341,34 @@ typedef unsigned long arm_fpu_feature_set;\n #define FPU_FL_CRYPTO\t(1u << 2)\t/* Crypto extensions.  */\n #define FPU_FL_DBL\t(1u << 3)\t/* Has double precision.  */\n #define FPU_FL_D32\t(1u << 4)\t/* Has 32 double precision regs.  */\n+#define FPU_FL_VFPv2\t(1u << 5)\t/* Has VFPv2 features.  */\n+#define FPU_FL_VFPv3\t(1u << 6)\t/* Has VFPv3 extensions.  */\n+#define FPU_FL_VFPv4\t(1u << 7)\t/* Has VFPv4 extensions.  */\n+#define FPU_FL_VFPv5\t(1u << 8)\t/* Has VFPv5 extensions.  */\n+#define FPU_FL_ARMv8\t(1u << 9)\t/* Has ARMv8 extensions to VFP.  */\n+\n+/* Some useful combinations.  */\n+#define FPU_VFPv2\t(FPU_FL_VFPv2)\n+#define FPU_VFPv3\t(FPU_VFPv2 | FPU_FL_VFPv3)\n+#define FPU_VFPv4\t(FPU_VFPv3 | FPU_FL_VFPv4)\n+#define FPU_VFPv5\t(FPU_VFPv4 | FPU_FL_VFPv5)\n+#define FPU_ARMv8\t(FPU_VFPv5 | FPU_FL_ARMv8)\n+\n+#define FPU_DBL\t\t(FPU_FL_DBL)\n+#define FPU_D32\t\t(FPU_DBL | FPU_FL_D32)\n+#define FPU_NEON\t(FPU_D32 | FPU_FL_NEON)\n+#define FPU_CRYPTO\t(FPU_NEON | FPU_FL_CRYPTO)\n+#define FPU_FP16\t(FPU_FL_FP16)\n \n extern const struct arm_fpu_desc\n {\n   const char *name;\n-  int rev;\n   arm_fpu_feature_set features;\n } all_fpus[];\n \n /* Accessors.  */\n \n #define TARGET_FPU_NAME     (all_fpus[arm_fpu_index].name)\n-#define TARGET_FPU_REV      (all_fpus[arm_fpu_index].rev)\n #define TARGET_FPU_FEATURES (all_fpus[arm_fpu_index].features)\n \n /* Which floating point hardware to schedule for.  */"}]}