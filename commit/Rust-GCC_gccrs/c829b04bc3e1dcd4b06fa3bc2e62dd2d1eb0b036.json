{"sha": "c829b04bc3e1dcd4b06fa3bc2e62dd2d1eb0b036", "node_id": "C_kwDOANBUbNoAKGM4MjliMDRiYzNlMWRjZDRiMDZmYTNiYzJlNjJkZDJkMWViMGIwMzY", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-12T13:18:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-13T19:40:04Z"}, "message": "libstdc++: Allow std::swap to find overload for std::exception_ptr\n\nThe non-member swap for std::exception_ptr is in a nested namespace and\nso can only be found by ADL currently. Add a using-declaration so that\nqualified std::swap calls will use the std::exception_ptr::swap member,\ninstead of the generic std::swap.\n\nThere's no new test for this, because the generic std::swap works, it\njust does more work than is necessary.\n\nAlso tell Doxygen to replace the __exception_ptr namespace with\n\"__unspecified__\" in the generate docs, so the real name is not\ndocumented.\n\nlibstdc++-v3/ChangeLog:\n\n\t* doc/doxygen/user.cfg.in (PREDEFINED): Replace __exception_ptr\n\twith \"__unspecified__\".\n\t* libsupc++/exception_ptr.h: Improve doxygen docs.\n\t(__exception_ptr::swap): Also declare in namespace std.", "tree": {"sha": "8725c00e5962e393828ad784cba95a07874ad977", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8725c00e5962e393828ad784cba95a07874ad977"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c829b04bc3e1dcd4b06fa3bc2e62dd2d1eb0b036", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c829b04bc3e1dcd4b06fa3bc2e62dd2d1eb0b036", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c829b04bc3e1dcd4b06fa3bc2e62dd2d1eb0b036", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c829b04bc3e1dcd4b06fa3bc2e62dd2d1eb0b036/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c470f3ea86a28caacb9e9124307c4a03b2396288", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c470f3ea86a28caacb9e9124307c4a03b2396288", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c470f3ea86a28caacb9e9124307c4a03b2396288"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "57270bdeb7aa532a0da38cd1db6106a3bada2605", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c829b04bc3e1dcd4b06fa3bc2e62dd2d1eb0b036/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c829b04bc3e1dcd4b06fa3bc2e62dd2d1eb0b036/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=c829b04bc3e1dcd4b06fa3bc2e62dd2d1eb0b036", "patch": "@@ -2408,6 +2408,7 @@ PREDEFINED             = __cplusplus=202002L \\\n                          _GLIBCXX_HAVE_BUILTIN_LAUNDER \\\n \t\t\t \"_GLIBCXX_DOXYGEN_ONLY(X)=X \" \\\n \t\t\t __allocator_base=std::__new_allocator \\\n+\t\t\t __exception_ptr=__unspecified__ \\\n \n # If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then this\n # tag can be used to specify a list of macro names that should be expanded. The"}, {"sha": "fd9ceec88d4c50bb4d504eccbc58c70a32f1b17f", "filename": "libstdc++-v3/libsupc++/exception_ptr.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c829b04bc3e1dcd4b06fa3bc2e62dd2d1eb0b036/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c829b04bc3e1dcd4b06fa3bc2e62dd2d1eb0b036/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h?ref=c829b04bc3e1dcd4b06fa3bc2e62dd2d1eb0b036", "patch": "@@ -65,9 +65,12 @@ namespace std _GLIBCXX_VISIBILITY(default)\n \n   using __exception_ptr::exception_ptr;\n \n-  /** Obtain an exception_ptr to the currently handled exception. If there\n-   *  is none, or the currently handled exception is foreign, return the null\n-   *  value.\n+  /** Obtain an exception_ptr to the currently handled exception.\n+   *\n+   * If there is none, or the currently handled exception is foreign,\n+   * return the null value.\n+   *\n+   * @since C++11\n    */\n   exception_ptr current_exception() _GLIBCXX_USE_NOEXCEPT;\n \n@@ -79,10 +82,16 @@ namespace std _GLIBCXX_VISIBILITY(default)\n \n   namespace __exception_ptr\n   {\n-    using std::rethrow_exception;\n+    using std::rethrow_exception; // So that ADL finds it.\n \n     /**\n      *  @brief An opaque pointer to an arbitrary exception.\n+     *\n+     * The actual name of this type is unspecified, so the alias\n+     * `std::exception_ptr` should be used to refer to it.\n+     *\n+     *  @headerfile exception\n+     *  @since C++11 (but usable in C++98 as a GCC extension)\n      *  @ingroup exceptions\n      */\n     class exception_ptr\n@@ -231,6 +240,8 @@ namespace std _GLIBCXX_VISIBILITY(default)\n \n   } // namespace __exception_ptr\n \n+  using __exception_ptr::swap; // So that std::swap(exp1, exp2) finds it.\n+\n   /// Obtain an exception_ptr pointing to a copy of the supplied object.\n #if (__cplusplus >= 201103L && __cpp_rtti) || __cpp_exceptions\n   template<typename _Ex>"}]}