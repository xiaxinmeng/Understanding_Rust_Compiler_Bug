{"sha": "c3f824ce13d83da71f55201f4608db64478e4ef1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNmODI0Y2UxM2Q4M2RhNzFmNTUyMDFmNDYwOGRiNjQ0NzhlNGVmMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-12-11T10:48:56Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-12-11T10:48:56Z"}, "message": "traits.hpp: Qualify types.\n\n2006-12-11  Richard Guenther  <rguenther@suse.de>\n\t    Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/pb_ds/detail/pat_trie_/traits.hpp: Qualify types.\n\t* include/ext/pb_ds/detail/binary_heap_/binary_heap_.hpp: Likewise.\n\t* include/ext/rope: Likewise.\n\t* include/bits/stl_tree.h (struct _Rb_tree): Change the _Link_type\n\ttypedefs to use _Rb_tree_node<_Val> directly.\n\t(_M_get_node, _M_put_node): Use _Link_type.\n\nCo-Authored-By: Paolo Carlini <pcarlini@suse.de>\n\nFrom-SVN: r119732", "tree": {"sha": "2b9fde805462f85bb8f763cf89247e6fbb5ee096", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b9fde805462f85bb8f763cf89247e6fbb5ee096"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3f824ce13d83da71f55201f4608db64478e4ef1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3f824ce13d83da71f55201f4608db64478e4ef1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3f824ce13d83da71f55201f4608db64478e4ef1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3f824ce13d83da71f55201f4608db64478e4ef1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8a4a83ed921b2f28db38cf1e7384f1fec2cd22f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a4a83ed921b2f28db38cf1e7384f1fec2cd22f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a4a83ed921b2f28db38cf1e7384f1fec2cd22f5"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "0b85eadb6a84060f70fe15d0e8be62fd0b51b443", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f824ce13d83da71f55201f4608db64478e4ef1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f824ce13d83da71f55201f4608db64478e4ef1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c3f824ce13d83da71f55201f4608db64478e4ef1", "patch": "@@ -1,3 +1,13 @@\n+2006-12-11  Richard Guenther  <rguenther@suse.de>\n+\t    Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/pb_ds/detail/pat_trie_/traits.hpp: Qualify types.\n+\t* include/ext/pb_ds/detail/binary_heap_/binary_heap_.hpp: Likewise.\n+\t* include/ext/rope: Likewise.\n+\t* include/bits/stl_tree.h (struct _Rb_tree): Change the _Link_type\n+\ttypedefs to use _Rb_tree_node<_Val> directly.\n+\t(_M_get_node, _M_put_node): Use _Link_type.\n+\n 2006-12-10  Paolo Carlini  <pcarlini@suse.de>\n \n \t* src/valarray-inst.cc (__gslice_to_index): Optimize performance."}, {"sha": "d2efb3aa4eb7c7050e447a1e056d3553a5767d78", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f824ce13d83da71f55201f4608db64478e4ef1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f824ce13d83da71f55201f4608db64478e4ef1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=c3f824ce13d83da71f55201f4608db64478e4ef1", "patch": "@@ -326,7 +326,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     protected:\n       typedef _Rb_tree_node_base* _Base_ptr;\n       typedef const _Rb_tree_node_base* _Const_Base_ptr;\n-      typedef _Rb_tree_node<_Val> _Rb_tree_node;\n \n     public:\n       typedef _Key key_type;\n@@ -335,8 +334,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef const value_type* const_pointer;\n       typedef value_type& reference;\n       typedef const value_type& const_reference;\n-      typedef _Rb_tree_node* _Link_type;\n-      typedef const _Rb_tree_node* _Const_Link_type;\n+      typedef _Rb_tree_node<_Val>* _Link_type;\n+      typedef const _Rb_tree_node<_Val>* _Const_Link_type;\n       typedef size_t size_type;\n       typedef ptrdiff_t difference_type;\n       typedef _Alloc allocator_type;\n@@ -354,12 +353,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return allocator_type(_M_get_Node_allocator()); }\n \n     protected:\n-      _Rb_tree_node*\n+      _Link_type\n       _M_get_node()\n       { return _M_impl._Node_allocator::allocate(1); }\n \n       void\n-      _M_put_node(_Rb_tree_node* __p)\n+      _M_put_node(_Link_type __p)\n       { _M_impl._Node_allocator::deallocate(__p, 1); }\n \n       _Link_type"}, {"sha": "b32479b99d1f023b001a37224c25cf05a75315d4", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/binary_heap_.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f824ce13d83da71f55201f4608db64478e4ef1/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fbinary_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f824ce13d83da71f55201f4608db64478e4ef1/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fbinary_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fbinary_heap_.hpp?ref=c3f824ce13d83da71f55201f4608db64478e4ef1", "patch": "@@ -81,7 +81,7 @@ namespace pb_ds\n     entry_cmp<Value_Type, Cmp_Fn, is_simple<Value_Type>::value, Allocator>::type\n \n #define PB_DS_RESIZE_POLICY_DEC\t\\\n-    resize_policy<typename Allocator::size_type>\n+    pb_ds::detail::resize_policy<typename Allocator::size_type>\n \n     /**\n      * class description = \"Base class for some types of h3ap$\">"}, {"sha": "59aa30982684ef964df501f4791defc822894309", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/traits.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f824ce13d83da71f55201f4608db64478e4ef1/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ftraits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f824ce13d83da71f55201f4608db64478e4ef1/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ftraits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ftraits.hpp?ref=c3f824ce13d83da71f55201f4608db64478e4ef1", "patch": "@@ -93,7 +93,7 @@ namespace pb_ds\n       typedef E_Access_Traits e_access_traits;\n \n       typedef\n-      synth_e_access_traits<\n+      pb_ds::detail::synth_e_access_traits<\n \ttype_traits,\n \tfalse,\n \te_access_traits>\n@@ -254,7 +254,7 @@ namespace pb_ds\n       typedef E_Access_Traits e_access_traits;\n \n       typedef\n-      synth_e_access_traits<\n+      pb_ds::detail::synth_e_access_traits<\n \ttype_traits,\n \ttrue,\n \te_access_traits>"}, {"sha": "389fd0958d82bb3fb4771cd34aa5a946b3bdc2af", "filename": "libstdc++-v3/include/ext/rope", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f824ce13d83da71f55201f4608db64478e4ef1/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f824ce13d83da71f55201f4608db64478e4ef1/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope?ref=c3f824ce13d83da71f55201f4608db64478e4ef1", "patch": "@@ -78,8 +78,6 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   using std::size_t;\n   using std::ptrdiff_t;\n   using std::allocator;\n-  using std::iterator;\n-  using std::reverse_iterator;\n   using std::_Destroy;\n \n   // The _S_eos function is used for those functions that\n@@ -165,7 +163,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n   template<class _Sequence, size_t _Buf_sz = 100>\n     class sequence_buffer\n-    : public iterator<std::output_iterator_tag, void, void, void, void>\n+    : public std::iterator<std::output_iterator_tag, void, void, void, void>\n     {\n     public:\n       typedef typename _Sequence::value_type value_type;\n@@ -1023,7 +1021,7 @@ protected:\n   \n   template<class _CharT, class _Alloc>\n     class _Rope_iterator_base\n-    : public iterator<std::random_access_iterator_tag, _CharT>\n+    : public std::iterator<std::random_access_iterator_tag, _CharT>\n     {\n       friend class rope<_CharT, _Alloc>;\n     public:\n@@ -2017,7 +2015,7 @@ protected:\n \t//  but it's harder to make guarantees.\n       }\n \n-      typedef reverse_iterator<const_iterator> const_reverse_iterator;\n+      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;\n \n       const_reverse_iterator\n       rbegin() const\n@@ -2549,7 +2547,7 @@ protected:\n       mutable_end()\n       { return(iterator(this, size())); }\n \n-      typedef reverse_iterator<iterator> reverse_iterator;\n+      typedef std::reverse_iterator<iterator> reverse_iterator;\n       \n       reverse_iterator\n       mutable_rbegin()"}]}