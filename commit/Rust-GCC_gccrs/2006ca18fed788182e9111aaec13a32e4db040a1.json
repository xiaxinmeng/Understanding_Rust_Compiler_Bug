{"sha": "2006ca18fed788182e9111aaec13a32e4db040a1", "node_id": "C_kwDOANBUbNoAKDIwMDZjYTE4ZmVkNzg4MTgyZTkxMTFhYWVjMTNhMzJlNGRiMDQwYTE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2023-02-14T10:23:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-14T10:23:32Z"}, "message": "Merge #1825\n\n1825: Add feature gate for \"rust-intrinsic\". r=CohenArthur a=TuringKi\n\nThis commit implemented a feature gate to check `intrinsics`.\r\n\r\ngcc/rust/ChangeLog:\r\n\r\n\t* checks/errors/rust-feature-gate.cc: Add implementation for `void FeatureGate::visit (AST::ExternBlock &block)`. Add `valid_feature` construction process in `FeatureGate::check`.\r\n\t* checks/errors/rust-feature-gate.h: Add declaration for `void FeatureGate::visit (AST::ExternBlock &block)`. Add private variable `valid_feature`.\r\n\t* checks/errors/rust-feature.h: Change `issue` to `m_issue`.\r\n\r\ngcc/testsuite/ChangeLog:\r\n\r\n\t* rust/compile/const-issue1440.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/feature_intrinsics.rs: New file.\r\n\t* rust/compile/issue-1031.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/issue-1130.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/issue-1131.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/issue-1237.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/issue-1289.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/rust-const-blog-issue.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/torture/intrinsics-3.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/torture/intrinsics-4.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/torture/intrinsics-5.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/torture/intrinsics-6.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/torture/intrinsics-7.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/torture/issue-1024.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/torture/issue-1075.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/torture/issue-1432.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/unsafe10.rs: Add crate feature: `intrinsics`.\r\n\t* rust/execute/torture/atomic_load.rs: Add crate feature: `intrinsics`.\r\n\t* rust/execute/torture/atomic_store.rs: Add crate feature: `intrinsics`.\r\n\t* rust/execute/torture/copy_nonoverlapping1.rs: Add crate feature: `intrinsics`.\r\n\t* rust/execute/torture/issue-1120.rs: Add crate feature: `intrinsics`.\r\n\t* rust/execute/torture/issue-1133.rs: Add crate feature: `intrinsics`.\r\n\t* rust/execute/torture/issue-1232.rs: Add crate feature: `intrinsics`.\r\n\t* rust/execute/torture/slice-magic.rs: Add crate feature: `intrinsics`.\r\n\t* rust/execute/torture/slice-magic2.rs: Add crate feature: `intrinsics`.\r\n\t* rust/execute/torture/str-layout1.rs: Add crate feature: `intrinsics`.\r\n\t* rust/execute/torture/transmute1.rs: Add crate feature: `intrinsics`.\r\n\t* rust/execute/torture/wrapping_op1.rs: Add crate feature: `intrinsics`.\r\n\t* rust/execute/torture/wrapping_op2.rs: Add crate feature: `intrinsics`.\r\n\r\nSigned-off-by: Xiao Ma <mxlol233@outlook.com>\r\n\r\n\n\nCo-authored-by: mxlol233 <mxlol233@outlook.com>", "tree": {"sha": "bed9237305c361b50d76b80daaea9fc2a7044ee4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bed9237305c361b50d76b80daaea9fc2a7044ee4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2006ca18fed788182e9111aaec13a32e4db040a1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj62EkCRBK7hj4Ov3rIwAA/ywIAFLpcERy6RQ+3NQ31lFdnKc+\nfP9kp0vaqN5JY+0Kg7+zoHpO6K4OUWxTNG2QSw5m6RRsHgivc5oL5THpZyPaDFN4\njg6tWTEL6rIU30G2/wbLMML1tDbJZx/oAg6GoTmLlodQE+JqSW35WNgyKI6NgnCY\ngGpEJ9fiaq9H3xyBmZ4Z99vOTc49AXgcM03Y7Onv0AGykjywhqGROmML1187gJbb\nSstteVRIPz7EpSndkOGCyxFxYm0gKXRYLsnBV7+UHGx7ejcmVXRzLR0oos0W6eJS\nFa2nfjGZ14lP771tF4h+8o3qcIa0HWfYlSV5jv+TiLaF/TodSQnv1JthzHGjNcM=\n=XoLc\n-----END PGP SIGNATURE-----\n", "payload": "tree bed9237305c361b50d76b80daaea9fc2a7044ee4\nparent cc23831ec66ac39f8955b1915fd7f6585dbccbe9\nparent debb72b0e9cc9ae0cbd151fb809d3f2fda0b4785\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1676370212 +0000\ncommitter GitHub <noreply@github.com> 1676370212 +0000\n\nMerge #1825\n\n1825: Add feature gate for \"rust-intrinsic\". r=CohenArthur a=TuringKi\n\nThis commit implemented a feature gate to check `intrinsics`.\r\n\r\ngcc/rust/ChangeLog:\r\n\r\n\t* checks/errors/rust-feature-gate.cc: Add implementation for `void FeatureGate::visit (AST::ExternBlock &block)`. Add `valid_feature` construction process in `FeatureGate::check`.\r\n\t* checks/errors/rust-feature-gate.h: Add declaration for `void FeatureGate::visit (AST::ExternBlock &block)`. Add private variable `valid_feature`.\r\n\t* checks/errors/rust-feature.h: Change `issue` to `m_issue`.\r\n\r\ngcc/testsuite/ChangeLog:\r\n\r\n\t* rust/compile/const-issue1440.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/feature_intrinsics.rs: New file.\r\n\t* rust/compile/issue-1031.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/issue-1130.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/issue-1131.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/issue-1237.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/issue-1289.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/rust-const-blog-issue.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/torture/intrinsics-3.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/torture/intrinsics-4.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/torture/intrinsics-5.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/torture/intrinsics-6.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/torture/intrinsics-7.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/torture/issue-1024.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/torture/issue-1075.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/torture/issue-1432.rs: Add crate feature: `intrinsics`.\r\n\t* rust/compile/unsafe10.rs: Add crate feature: `intrinsics`.\r\n\t* rust/execute/torture/atomic_load.rs: Add crate feature: `intrinsics`.\r\n\t* rust/execute/torture/atomic_store.rs: Add crate feature: `intrinsics`.\r\n\t* rust/execute/torture/copy_nonoverlapping1.rs: Add crate feature: `intrinsics`.\r\n\t* rust/execute/torture/issue-1120.rs: Add crate feature: `intrinsics`.\r\n\t* rust/execute/torture/issue-1133.rs: Add crate feature: `intrinsics`.\r\n\t* rust/execute/torture/issue-1232.rs: Add crate feature: `intrinsics`.\r\n\t* rust/execute/torture/slice-magic.rs: Add crate feature: `intrinsics`.\r\n\t* rust/execute/torture/slice-magic2.rs: Add crate feature: `intrinsics`.\r\n\t* rust/execute/torture/str-layout1.rs: Add crate feature: `intrinsics`.\r\n\t* rust/execute/torture/transmute1.rs: Add crate feature: `intrinsics`.\r\n\t* rust/execute/torture/wrapping_op1.rs: Add crate feature: `intrinsics`.\r\n\t* rust/execute/torture/wrapping_op2.rs: Add crate feature: `intrinsics`.\r\n\r\nSigned-off-by: Xiao Ma <mxlol233@outlook.com>\r\n\r\n\n\nCo-authored-by: mxlol233 <mxlol233@outlook.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2006ca18fed788182e9111aaec13a32e4db040a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2006ca18fed788182e9111aaec13a32e4db040a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2006ca18fed788182e9111aaec13a32e4db040a1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc23831ec66ac39f8955b1915fd7f6585dbccbe9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc23831ec66ac39f8955b1915fd7f6585dbccbe9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc23831ec66ac39f8955b1915fd7f6585dbccbe9"}, {"sha": "debb72b0e9cc9ae0cbd151fb809d3f2fda0b4785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/debb72b0e9cc9ae0cbd151fb809d3f2fda0b4785", "html_url": "https://github.com/Rust-GCC/gccrs/commit/debb72b0e9cc9ae0cbd151fb809d3f2fda0b4785"}], "stats": {"total": 133, "additions": 122, "deletions": 11}, "files": [{"sha": "bd01b52c7ff399fdf191bb05c15b8cc1ae4506d0", "filename": "gcc/rust/checks/errors/rust-feature-gate.cc", "status": "modified", "additions": 53, "deletions": 8, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.cc?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -17,14 +17,15 @@\n // <http://www.gnu.org/licenses/>.\n \n #include \"rust-feature-gate.h\"\n-#include \"rust-feature.h\"\n+#include \"rust-abi.h\"\n \n namespace Rust {\n \n void\n FeatureGate::check (AST::Crate &crate)\n {\n-  std::vector<Feature> valid_features;\n+  valid_features.clear ();\n+\n   for (const auto &attr : crate.inner_attrs)\n     {\n       if (attr.get_path ().as_string () == \"feature\")\n@@ -39,25 +40,69 @@ FeatureGate::check (AST::Crate &crate)\n \t\toption.parse_to_meta_item ());\n \t      for (const auto &item : meta_item->get_items ())\n \t\t{\n-\t\t  const auto &name = item->as_string ();\n-\t\t  auto tname = Feature::as_name (name);\n+\t\t  const auto &name_str = item->as_string ();\n+\t\t  auto tname = Feature::as_name (name_str);\n \t\t  if (!tname.is_none ())\n-\t\t    valid_features.push_back (Feature::create (tname.get ()));\n+\t\t    {\n+\t\t      auto name = tname.get ();\n+\t\t      valid_features.insert (name);\n+\t\t    }\n+\n \t\t  else\n \t\t    rust_error_at (item->get_locus (), \"unknown feature '%s'\",\n-\t\t\t\t   name.c_str ());\n+\t\t\t\t   name_str.c_str ());\n \t\t}\n \t    }\n \t}\n     }\n-  valid_features.shrink_to_fit ();\n \n-  // TODO (mxlol233): add the real feature gate stuff.\n   auto &items = crate.items;\n   for (auto it = items.begin (); it != items.end (); it++)\n     {\n       auto &item = *it;\n       item->accept_vis (*this);\n     }\n }\n+\n+void\n+FeatureGate::gate (Feature::Name name, Location loc,\n+\t\t   const std::string &error_msg)\n+{\n+  if (!valid_features.count (name))\n+    {\n+      auto feature = Feature::create (name);\n+      auto issue = feature.issue ();\n+      if (issue > 0)\n+\t{\n+\t  const char *fmt_str\n+\t    = \"%s. see issue %ld \"\n+\t      \"<https://github.com/rust-lang/rust/issues/%ld> for more \"\n+\t      \"information. add `#![feature(%s)]` to the crate attributes to \"\n+\t      \"enable.\";\n+\t  rust_error_at (loc, fmt_str, error_msg.c_str (), issue, issue,\n+\t\t\t feature.as_string ().c_str ());\n+\t}\n+      else\n+\t{\n+\t  const char *fmt_str\n+\t    = \"%s. add `#![feature(%s)]` to the crate attributes to enable.\";\n+\t  rust_error_at (loc, fmt_str, error_msg.c_str (),\n+\t\t\t feature.as_string ().c_str ());\n+\t}\n+    }\n+}\n+\n+void\n+FeatureGate::visit (AST::ExternBlock &block)\n+{\n+  if (block.has_abi ())\n+    {\n+      const auto abi = block.get_abi ();\n+\n+      if (get_abi_from_string (abi) == ABI::INTRINSIC)\n+\tgate (Feature::Name::INTRINSICS, block.get_locus (),\n+\t      \"intrinsics are subject to change\");\n+    }\n+}\n+\n } // namespace Rust\n\\ No newline at end of file"}, {"sha": "6768c4c24985f19f701c26e95c0dce7d6877d967", "filename": "gcc/rust/checks/errors/rust-feature-gate.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.h?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -21,6 +21,7 @@\n \n #include \"rust-ast-visitor.h\"\n #include \"rust-ast-full.h\"\n+#include \"rust-feature.h\"\n \n namespace Rust {\n \n@@ -136,7 +137,7 @@ class FeatureGate : public AST::ASTVisitor\n   void visit (AST::TraitImpl &impl) override {}\n   void visit (AST::ExternalStaticItem &item) override {}\n   void visit (AST::ExternalFunctionItem &item) override {}\n-  void visit (AST::ExternBlock &block) override {}\n+  void visit (AST::ExternBlock &block) override;\n   void visit (AST::MacroMatchFragment &match) override {}\n   void visit (AST::MacroMatchRepetition &match) override {}\n   void visit (AST::MacroMatcher &matcher) override {}\n@@ -186,6 +187,10 @@ class FeatureGate : public AST::ASTVisitor\n   void visit (AST::SliceType &type) override {}\n   void visit (AST::InferredType &type) override {}\n   void visit (AST::BareFunctionType &type) override {}\n+\n+private:\n+  void gate (Feature::Name name, Location loc, const std::string &error_msg);\n+  std::set<Feature::Name> valid_features;\n };\n } // namespace Rust\n #endif\n\\ No newline at end of file"}, {"sha": "7bd76c093f2966ee199553e01d8e51bfc89b74f8", "filename": "gcc/rust/checks/errors/rust-feature.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature.h?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -47,6 +47,7 @@ class Feature\n   Name name () { return m_name; }\n   const std::string &description () { return m_description; }\n   State state () { return m_state; }\n+  uint64_t issue () { return m_issue; }\n \n   static Optional<Name> as_name (const std::string &name);\n   static Feature create (Name name);\n@@ -57,15 +58,15 @@ class Feature\n \t   const Optional<CompileOptions::Edition> &edition,\n \t   const char *description)\n     : m_state (state), m_name (name), m_name_str (name_str),\n-      m_rustc_since (rustc_since), issue (issue_number), edition (edition),\n+      m_rustc_since (rustc_since), m_issue (issue_number), edition (edition),\n       m_description (description)\n   {}\n \n   State m_state;\n   Name m_name;\n   std::string m_name_str;\n   std::string m_rustc_since;\n-  uint64_t issue;\n+  uint64_t m_issue;\n   Optional<CompileOptions::Edition> edition;\n   std::string m_description;\n "}, {"sha": "9ad76a96b2adf470a7ac2a3ef0737b16e6354f6f", "filename": "gcc/testsuite/rust/compile/const-issue1440.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst-issue1440.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst-issue1440.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst-issue1440.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,4 +1,5 @@\n // { dg-additional-options \"-w\" }\n+#![feature(intrinsics)]\n \n mod intrinsics {\n     extern \"rust-intrinsic\" {"}, {"sha": "5eb7ffed8645bb4e1d3bed08176c79300ae84aaa", "filename": "gcc/testsuite/rust/compile/feature_intrinsics.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffeature_intrinsics.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffeature_intrinsics.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffeature_intrinsics.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -0,0 +1,7 @@\n+\n+extern \"rust-intrinsic\" { //{ dg-error \"intrinsics are subject to change.\" \"\" { target *-*-* }  }\n+    pub fn sqrtf32(x: f32) -> f32;\n+}\n+\n+fn main() {\n+}"}, {"sha": "a9049de96fba562734bfb3837a4c7010b2bc8b79", "filename": "gcc/testsuite/rust/compile/issue-1031.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1031.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1031.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1031.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,3 +1,5 @@\n+#![feature(intrinsics)]\n+\n extern \"rust-intrinsic\" {\n     #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     pub fn offset<T>(dst: *const T, offset: isize) -> *const T;"}, {"sha": "6d265cb6044ae6e475830deafea9cdea91951ce2", "filename": "gcc/testsuite/rust/compile/issue-1130.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1130.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1130.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1130.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,4 +1,6 @@\n // { dg-additional-options \"-w\" }\n+#![feature(intrinsics)]\n+\n mod mem {\n     extern \"rust-intrinsic\" {\n         fn size_of<T>() -> usize;"}, {"sha": "5cb9caf81f0a00ae29f191b1794034d940471f72", "filename": "gcc/testsuite/rust/compile/issue-1131.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1131.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1131.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1131.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,3 +1,5 @@\n+#![feature(intrinsics)]\n+\n extern \"rust-intrinsic\" {\n     fn size_of<T>() -> usize;\n     fn offset<T>(dst: *const T, offset: isize) -> *const T;"}, {"sha": "54a51df156fbbb273806b39ed52e9744c081fd8d", "filename": "gcc/testsuite/rust/compile/issue-1237.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1237.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1237.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1237.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,4 +1,6 @@\n // { dg-additional-options \"-w\" }\n+#![feature(intrinsics)]\n+\n mod intrinsics {\n     extern \"rust-intrinsic\" {\n         pub fn offset<T>(ptr: *const T, count: isize) -> *const T;"}, {"sha": "3d7716a1d8caa26d35c052ff80664e002611c173", "filename": "gcc/testsuite/rust/compile/issue-1289.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1289.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1289.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1289.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,3 +1,5 @@\n+#![feature(intrinsics)]\n+\n extern \"C\" {\n     fn printf(s: *const i8, ...);\n }"}, {"sha": "679a2ae8c2b0c48c523a0573f8fbd61bf4a6b53c", "filename": "gcc/testsuite/rust/compile/rust-const-blog-issue.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Frust-const-blog-issue.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Frust-const-blog-issue.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Frust-const-blog-issue.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,4 +1,6 @@\n // { dg-excess-errors \"accessing value of\"  }\n+#![feature(intrinsics)]\n+\n mod mem {\n     extern \"rust-intrinsic\" {\n         #[rustc_const_stable(feature = \"const_transmute\", since = \"1.46.0\")]"}, {"sha": "1601ab6d5b7e9193ea4d0ca996919e8518d37149", "filename": "gcc/testsuite/rust/compile/torture/intrinsics-3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-3.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,3 +1,5 @@\n+#![feature(intrinsics)]\n+\n extern \"rust-intrinsic\" {\n     fn not_an_intrinsic();\n }"}, {"sha": "1f6c0d6608a2e62c8ae5e718c1a1a29086ddfbb2", "filename": "gcc/testsuite/rust/compile/torture/intrinsics-4.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-4.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,3 +1,5 @@\n+#![feature(intrinsics)]\n+\n #[lang = \"sized\"]\n pub trait Sized {}\n "}, {"sha": "7a62cca280cab246a0af5a1f2844f85b089e124d", "filename": "gcc/testsuite/rust/compile/torture/intrinsics-5.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-5.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,3 +1,5 @@\n+#![feature(intrinsics)]\n+\n #[lang = \"sized\"]\n pub trait Sized {}\n "}, {"sha": "4e510e110877bd9d2d287c1c4d4921ba70d145f8", "filename": "gcc/testsuite/rust/compile/torture/intrinsics-6.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-6.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,3 +1,5 @@\n+#![feature(intrinsics)]\n+\n extern \"rust-intrinsic\" {\n     pub fn unchecked_add<T>(x: T, y: T) -> T;\n     pub fn unchecked_sub<T>(x: T, y: T) -> T;"}, {"sha": "da85fff5cd6800e41b9dd1dffcbcdc4a16ecf341", "filename": "gcc/testsuite/rust/compile/torture/intrinsics-7.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-7.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-7.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-7.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,3 +1,5 @@\n+#![feature(intrinsics)]\n+\n extern \"rust-intrinsic\" {\n     pub fn unchecked_add<T>(x: T, y: T) -> T;\n     // { dg-error \"unchecked operation intrinsics can only be used with basic integer types .got .NotAdd..\" \"\" { target *-*-* } .-1 }"}, {"sha": "a8503cebf533bc5cc2e640d2db056d445975c891", "filename": "gcc/testsuite/rust/compile/torture/issue-1024.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1024.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1024.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1024.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,3 +1,5 @@\n+#![feature(intrinsics)]\n+\n extern \"rust-intrinsic\" {\n     pub fn size_of<T>() -> usize;\n }"}, {"sha": "201a241d45d9a2ef791bea4fa43de2d260322d97", "filename": "gcc/testsuite/rust/compile/torture/issue-1075.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1075.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1075.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1075.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,4 +1,6 @@\n // { dg-additional-options \"-w\" }\n+#![feature(intrinsics)]\n+\n extern \"rust-intrinsic\" {\n     #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     pub fn offset<T>(dst: *const T, offset: isize) -> *const T;"}, {"sha": "822ca41c5ad3c0da48277e6cb2880234f384cce9", "filename": "gcc/testsuite/rust/compile/torture/issue-1432.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1432.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1432.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1432.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,4 +1,5 @@\n // { dg-additional-options \"-w\" }\n+#![feature(intrinsics)]\n mod intrinsics {\n     extern \"rust-intrinsic\" {\n         #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]"}, {"sha": "927e69728c96571375e1e3b10e3bb8d591bad8d1", "filename": "gcc/testsuite/rust/compile/unsafe10.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe10.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe10.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe10.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,3 +1,5 @@\n+#![feature(intrinsics)]\n+\n extern \"rust-intrinsic\" {\n     pub fn rotate_left<T>(l: T, r: T) -> T;\n }"}, {"sha": "b66c4641424a92c2a558526fb10d550dd8b0503e", "filename": "gcc/testsuite/rust/execute/torture/atomic_load.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fatomic_load.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fatomic_load.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fatomic_load.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,3 +1,5 @@\n+#![feature(intrinsics)]\n+\n #[lang = \"sized\"]\n pub trait Sized {}\n "}, {"sha": "dcbb2a90f19907c0a377c9fca39e09a9f4782b95", "filename": "gcc/testsuite/rust/execute/torture/atomic_store.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fatomic_store.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fatomic_store.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fatomic_store.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,3 +1,5 @@\n+#![feature(intrinsics)]\n+\n #[lang = \"sized\"]\n pub trait Sized {}\n "}, {"sha": "39afd3424a404da0d424db4e35e59f16bae3d5a9", "filename": "gcc/testsuite/rust/execute/torture/copy_nonoverlapping1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcopy_nonoverlapping1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcopy_nonoverlapping1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcopy_nonoverlapping1.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,3 +1,5 @@\n+#![feature(intrinsics)]\n+\n extern \"rust-intrinsic\" {\n     pub fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n }"}, {"sha": "59792b29a291e0c4168e186ea8864c2d926caa59", "filename": "gcc/testsuite/rust/execute/torture/issue-1120.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1120.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1120.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1120.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,4 +1,6 @@\n // { dg-additional-options \"-w\" }\n+#![feature(intrinsics)]\n+\n extern \"rust-intrinsic\" {\n     #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     pub fn offset<T>(dst: *const T, offset: isize) -> *const T;"}, {"sha": "8679bb932242afedc993c58b70e52fcf0f874aa5", "filename": "gcc/testsuite/rust/execute/torture/issue-1133.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1133.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1133.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1133.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,4 +1,6 @@\n // { dg-additional-options \"-w\" }\n+#![feature(intrinsics)]\n+\n extern \"rust-intrinsic\" {\n     #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     pub fn offset<T>(dst: *const T, offset: isize) -> *const T;"}, {"sha": "ce53da2d0339f0db6c59af3645c07014f212242f", "filename": "gcc/testsuite/rust/execute/torture/issue-1232.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1232.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1232.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1232.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,5 +1,7 @@\n // { dg-additional-options \"-w\" }\n // { dg-output \"slice_access=3\\r*\\n\" }\n+#![feature(intrinsics)]\n+\n extern \"rust-intrinsic\" {\n     #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     fn offset<T>(dst: *const T, offset: isize) -> *const T;"}, {"sha": "b52aa3df510470b5ed02c4d12f9f62607a641627", "filename": "gcc/testsuite/rust/execute/torture/slice-magic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,4 +1,6 @@\n // { dg-additional-options \"-w\" }\n+#![feature(intrinsics)]\n+\n extern \"rust-intrinsic\" {\n     #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     pub fn offset<T>(dst: *const T, offset: isize) -> *const T;"}, {"sha": "cdc39f3dccae3fa5bea65e9ed913d31da47f9e20", "filename": "gcc/testsuite/rust/execute/torture/slice-magic2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic2.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,4 +1,6 @@\n // { dg-additional-options \"-w\" }\n+#![feature(intrinsics)]\n+\n extern \"rust-intrinsic\" {\n     #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     pub fn offset<T>(dst: *const T, offset: isize) -> *const T;"}, {"sha": "c9bcf1631e21e4e648d6e8d22ac792d08760d77e", "filename": "gcc/testsuite/rust/execute/torture/str-layout1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fstr-layout1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fstr-layout1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fstr-layout1.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,5 +1,7 @@\n // { dg-additional-options \"-w\" }\n // { dg-output \"t1sz=5 t2sz=10\\r*\" }\n+#![feature(intrinsics)]\n+\n mod mem {\n     extern \"rust-intrinsic\" {\n         #[rustc_const_stable(feature = \"const_transmute\", since = \"1.46.0\")]"}, {"sha": "40dcfdee0b3d433878571b00dbac36a401c70a59", "filename": "gcc/testsuite/rust/execute/torture/transmute1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftransmute1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftransmute1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftransmute1.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,4 +1,5 @@\n // { dg-additional-options \"-w\" }\n+#![feature(intrinsics)]\n \n extern \"rust-intrinsic\" {\n     fn transmute<T, U>(value: T) -> U;"}, {"sha": "ab4afd7ddde84395d16ea3bde5237c782abd3ec8", "filename": "gcc/testsuite/rust/execute/torture/wrapping_op1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fwrapping_op1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fwrapping_op1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fwrapping_op1.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,3 +1,5 @@\n+#![feature(intrinsics)]\n+\n extern \"rust-intrinsic\" {\n     pub fn wrapping_add<T>(l: T, r: T) -> T;\n }"}, {"sha": "b24ebce56f1667a66c28af72d114758db57257ac", "filename": "gcc/testsuite/rust/execute/torture/wrapping_op2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fwrapping_op2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2006ca18fed788182e9111aaec13a32e4db040a1/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fwrapping_op2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fwrapping_op2.rs?ref=2006ca18fed788182e9111aaec13a32e4db040a1", "patch": "@@ -1,3 +1,5 @@\n+#![feature(intrinsics)]\n+\n extern \"rust-intrinsic\" {\n     pub fn wrapping_add<T>(l: T, r: T) -> T;\n     pub fn wrapping_sub<T>(l: T, r: T) -> T;"}]}