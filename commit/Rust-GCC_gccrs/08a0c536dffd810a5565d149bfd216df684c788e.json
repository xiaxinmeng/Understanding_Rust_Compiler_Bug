{"sha": "08a0c536dffd810a5565d149bfd216df684c788e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhhMGM1MzZkZmZkODEwYTU1NjVkMTQ5YmZkMjE2ZGY2ODRjNzg4ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-01-14T10:50:18Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-01-14T10:50:18Z"}, "message": "re PR middle-end/19084 (ICE: internal consistency failure)\n\n\tPR middle-end/19084\n\tPR rtl-optimization/19348\n\t* recog.c (peephole2_optimize): Do global life update if some peephole\n\tdecides it doesn't need at least one of its inputs and that change\n\tinfluences liveness at the start of the basic block.\n\n\t* basic-block.h (EXECUTE_IF_AND_COMPL_IN_REG_SET): Needs 2 REGSET\n\targuments instead of 1.\n\n\t* gcc.dg/20050111-1.c: New test.\n\t* gcc.c-torture/execute/20050111-1.c: New test.\n\nFrom-SVN: r93639", "tree": {"sha": "a1913e93e194d26049b54e754c3bab349f78f636", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1913e93e194d26049b54e754c3bab349f78f636"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08a0c536dffd810a5565d149bfd216df684c788e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08a0c536dffd810a5565d149bfd216df684c788e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08a0c536dffd810a5565d149bfd216df684c788e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08a0c536dffd810a5565d149bfd216df684c788e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a0afbdb682e3ae83ae087a69f3a975ad23582069", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0afbdb682e3ae83ae087a69f3a975ad23582069", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0afbdb682e3ae83ae087a69f3a975ad23582069"}], "stats": {"total": 99, "additions": 96, "deletions": 3}, "files": [{"sha": "91796254cdc7c52c13b26b139f916ed28bd1d4d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08a0c536dffd810a5565d149bfd216df684c788e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08a0c536dffd810a5565d149bfd216df684c788e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08a0c536dffd810a5565d149bfd216df684c788e", "patch": "@@ -1,3 +1,14 @@\n+2005-01-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/19084\n+\tPR rtl-optimization/19348\n+\t* recog.c (peephole2_optimize): Do global life update if some peephole\n+\tdecides it doesn't need at least one of its inputs and that change\n+\tinfluences liveness at the start of the basic block.\n+\n+\t* basic-block.h (EXECUTE_IF_AND_COMPL_IN_REG_SET): Needs 2 REGSET\n+\targuments instead of 1.\n+\n 2005-01-14  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR middle-end/18820"}, {"sha": "bfeac26d7f762584cd64d64a75bfa4f61835df63", "filename": "gcc/basic-block.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08a0c536dffd810a5565d149bfd216df684c788e/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08a0c536dffd810a5565d149bfd216df684c788e/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=08a0c536dffd810a5565d149bfd216df684c788e", "patch": "@@ -98,8 +98,8 @@ typedef bitmap_iterator reg_set_iterator;\n /* Loop over all registers in REGSET1 and REGSET2, starting with MIN, setting\n    REGNUM to the register number and executing CODE for all registers that are\n    set in the first regset and not set in the second.  */\n-#define EXECUTE_IF_AND_COMPL_IN_REG_SET(REGSET, MIN, REGNUM, RSI)\t\\\n-  EXECUTE_IF_AND_COMPL_IN_BITMAP (REGSET, MIN, REGNUM, RSI)\n+#define EXECUTE_IF_AND_COMPL_IN_REG_SET(REGSET1, REGSET2, MIN, REGNUM, RSI) \\\n+  EXECUTE_IF_AND_COMPL_IN_BITMAP (REGSET1, REGSET2, MIN, REGNUM, RSI)\n \n /* Loop over all registers in REGSET1 and REGSET2, starting with MIN, setting\n    REGNUM to the register number and executing CODE for all registers that are"}, {"sha": "6fc3cf9ad647d4a526799ee133288368e8ed917c", "filename": "gcc/recog.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08a0c536dffd810a5565d149bfd216df684c788e/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08a0c536dffd810a5565d149bfd216df684c788e/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=08a0c536dffd810a5565d149bfd216df684c788e", "patch": "@@ -2968,6 +2968,7 @@ peephole2_optimize (FILE *dump_file ATTRIBUTE_UNUSED)\n   bool changed;\n #endif\n   bool do_cleanup_cfg = false;\n+  bool do_global_life_update = false;\n   bool do_rebuild_jump_labels = false;\n \n   /* Initialize the regsets we're going to use.  */\n@@ -2986,6 +2987,8 @@ peephole2_optimize (FILE *dump_file ATTRIBUTE_UNUSED)\n   FOR_EACH_BB_REVERSE (bb)\n     {\n       struct propagate_block_info *pbi;\n+      reg_set_iterator rsi;\n+      unsigned int j;\n \n       /* Indicate that all slots except the last holds invalid data.  */\n       for (i = 0; i < MAX_INSNS_PER_PEEP2; ++i)\n@@ -3207,6 +3210,15 @@ peephole2_optimize (FILE *dump_file ATTRIBUTE_UNUSED)\n \t    break;\n \t}\n \n+      /* Some peepholes can decide the don't need one or more of their\n+\t inputs.  If this happens, local life update is not enough.  */\n+      EXECUTE_IF_AND_COMPL_IN_BITMAP (bb->global_live_at_start, live,\n+\t\t\t\t      0, j, rsi)\n+\t{\n+\t  do_global_life_update = true;\n+\t  break;\n+\t}\n+\n       free_propagate_block_info (pbi);\n     }\n \n@@ -3223,8 +3235,10 @@ peephole2_optimize (FILE *dump_file ATTRIBUTE_UNUSED)\n   if (do_cleanup_cfg)\n     {\n       cleanup_cfg (0);\n-      update_life_info (0, UPDATE_LIFE_GLOBAL_RM_NOTES, PROP_DEATH_NOTES);\n+      do_global_life_update = true;\n     }\n+  if (do_global_life_update)\n+    update_life_info (0, UPDATE_LIFE_GLOBAL_RM_NOTES, PROP_DEATH_NOTES);\n #ifdef HAVE_conditional_execution\n   else\n     {"}, {"sha": "2d14c7d4e8704980c1fb5756068b075fbd2e0c3a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08a0c536dffd810a5565d149bfd216df684c788e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08a0c536dffd810a5565d149bfd216df684c788e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=08a0c536dffd810a5565d149bfd216df684c788e", "patch": "@@ -1,5 +1,10 @@\n 2005-01-14  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/19084\n+\tPR rtl-optimization/19348\n+\t* gcc.dg/20050111-1.c: New test.\n+\t* gcc.c-torture/execute/20050111-1.c: New test.\n+\n \t* gcc.dg/i386-asm-4.c: New test.\n \n 2005-01-14  Eric Botcazou  <ebotcazou@libertysurf.fr>"}, {"sha": "d6089f1bd8de43e4c143c30cf3df6a7d966149f1", "filename": "gcc/testsuite/gcc.c-torture/execute/20050111-1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08a0c536dffd810a5565d149bfd216df684c788e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050111-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08a0c536dffd810a5565d149bfd216df684c788e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050111-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050111-1.c?ref=08a0c536dffd810a5565d149bfd216df684c788e", "patch": "@@ -0,0 +1,39 @@\n+/* PR middle-end/19084, rtl-optimization/19348 */\n+\n+unsigned int\n+foo (unsigned long long x)\n+{\n+  unsigned int u;\n+\n+  if (x == 0)\n+    return 0;\n+  u = (unsigned int) (x >> 32);\n+  return u;\n+}\n+\n+unsigned long long\n+bar (unsigned short x)\n+{\n+  return (unsigned long long) x << 32;\n+}\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  if (sizeof (long long) != 8)\n+    return 0;\n+\n+  if (foo (0) != 0)\n+    abort ();\n+  if (foo (0xffffffffULL) != 0)\n+    abort ();\n+  if (foo (0x25ff00ff00ULL) != 0x25)\n+    abort ();\n+  if (bar (0) != 0)\n+    abort ();\n+  if (bar (0x25) != 0x2500000000ULL)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "0cc4b7e195f8c4f291f2032ff5e1b3b491bdced3", "filename": "gcc/testsuite/gcc.dg/20050111-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08a0c536dffd810a5565d149bfd216df684c788e/gcc%2Ftestsuite%2Fgcc.dg%2F20050111-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08a0c536dffd810a5565d149bfd216df684c788e/gcc%2Ftestsuite%2Fgcc.dg%2F20050111-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20050111-1.c?ref=08a0c536dffd810a5565d149bfd216df684c788e", "patch": "@@ -0,0 +1,24 @@\n+/* PR middle-end/19084, rtl-optimization/19348 */\n+/* { dg-do compile } */\n+/* The following ensures that this test is compiled with -O2, unless\n+   on i?86 or x86_64 with -m32 option.  */\n+/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -march=i686\" { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2\" { target lp64 } } */\n+\n+unsigned int\n+foo (unsigned long long x)\n+{\n+  unsigned int u;\n+\n+  if (x == 0)\n+    return 0;\n+  u = (unsigned int) (x >> 32);\n+  return u;\n+}\n+\n+unsigned long long\n+bar (unsigned short x)\n+{\n+  return (unsigned long long) x << 32;\n+}"}]}