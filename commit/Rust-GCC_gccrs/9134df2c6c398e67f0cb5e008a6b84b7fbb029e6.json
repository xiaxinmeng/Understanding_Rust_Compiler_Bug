{"sha": "9134df2c6c398e67f0cb5e008a6b84b7fbb029e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTEzNGRmMmM2YzM5OGU2N2YwY2I1ZTAwOGE2Yjg0YjdmYmIwMjllNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-11-06T14:47:43Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-11-06T14:47:43Z"}, "message": "PR82816: Widening multiplies of bitfields\n\nIn this PR we tried to create a widening multiply of two 3-bit numbers,\nbut that isn't a widening multiply at the optab/rtl level, since both\nthe input and output still have the same mode.\n\nWe could trap this either in is_widening_mult_p or (as the patch does)\nin the routines that actually ask for an optab.  The latter seemed\nmore natural since is_widening_mult_p doesn't otherwise care about modes.\n\n2017-11-03  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\tPR tree-optimization/82816\n\t* tree-ssa-math-opts.c (convert_mult_to_widen): Return false\n\tif the modes of the two types are the same.\n\t(convert_plusminus_to_widen): Likewise.\n\ngcc/testsuite/\n\t* gcc.c-torture/compile/pr82816.c: New test.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r254454", "tree": {"sha": "df2bd2f49e457ed3f8d475a648f204ea8935d5e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df2bd2f49e457ed3f8d475a648f204ea8935d5e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9134df2c6c398e67f0cb5e008a6b84b7fbb029e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9134df2c6c398e67f0cb5e008a6b84b7fbb029e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9134df2c6c398e67f0cb5e008a6b84b7fbb029e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9134df2c6c398e67f0cb5e008a6b84b7fbb029e6/comments", "author": null, "committer": null, "parents": [{"sha": "962b96688689a73ddf5fb97d9c63514f98b49d27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/962b96688689a73ddf5fb97d9c63514f98b49d27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/962b96688689a73ddf5fb97d9c63514f98b49d27"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "4ff37f4fad504d9cdfac51b7df183e1e78f76508", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9134df2c6c398e67f0cb5e008a6b84b7fbb029e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9134df2c6c398e67f0cb5e008a6b84b7fbb029e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9134df2c6c398e67f0cb5e008a6b84b7fbb029e6", "patch": "@@ -1,3 +1,12 @@\n+2017-11-06  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\tPR tree-optimization/82816\n+\t* tree-ssa-math-opts.c (convert_mult_to_widen): Return false\n+\tif the modes of the two types are the same.\n+\t(convert_plusminus_to_widen): Likewise.\n+\n 2017-11-06  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* config/rs6000/altivec.md (*p9_vadu<mode>3) Rename to"}, {"sha": "d098cfc27ca1519121344698db1de75002d5ea17", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9134df2c6c398e67f0cb5e008a6b84b7fbb029e6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9134df2c6c398e67f0cb5e008a6b84b7fbb029e6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9134df2c6c398e67f0cb5e008a6b84b7fbb029e6", "patch": "@@ -1,3 +1,9 @@\n+2017-11-06  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* gcc.c-torture/compile/pr82816.c: New test.\n+\n 2017-11-06  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/sad-vectorize-1.c: New file."}, {"sha": "8e9bd001bac25e5726397fbf981b8d8c3c0a1090", "filename": "gcc/testsuite/gcc.c-torture/compile/pr82816.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9134df2c6c398e67f0cb5e008a6b84b7fbb029e6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr82816.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9134df2c6c398e67f0cb5e008a6b84b7fbb029e6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr82816.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr82816.c?ref=9134df2c6c398e67f0cb5e008a6b84b7fbb029e6", "patch": "@@ -0,0 +1,12 @@\n+struct A\n+{\n+  int b:3;\n+} d, e;\n+\n+int c;\n+\n+void f ()\n+{\n+  char g = d.b * e.b;\n+  c = g;\n+}"}, {"sha": "5986ac1da38c3edfadb258af4572fbc77af6d746", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9134df2c6c398e67f0cb5e008a6b84b7fbb029e6/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9134df2c6c398e67f0cb5e008a6b84b7fbb029e6/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=9134df2c6c398e67f0cb5e008a6b84b7fbb029e6", "patch": "@@ -3259,6 +3259,9 @@ convert_mult_to_widen (gimple *stmt, gimple_stmt_iterator *gsi)\n \n   to_mode = SCALAR_INT_TYPE_MODE (type);\n   from_mode = SCALAR_INT_TYPE_MODE (type1);\n+  if (to_mode == from_mode)\n+    return false;\n+\n   from_unsigned1 = TYPE_UNSIGNED (type1);\n   from_unsigned2 = TYPE_UNSIGNED (type2);\n \n@@ -3449,6 +3452,9 @@ convert_plusminus_to_widen (gimple_stmt_iterator *gsi, gimple *stmt,\n \n   to_mode = SCALAR_TYPE_MODE (type);\n   from_mode = SCALAR_TYPE_MODE (type1);\n+  if (to_mode == from_mode)\n+    return false;\n+\n   from_unsigned1 = TYPE_UNSIGNED (type1);\n   from_unsigned2 = TYPE_UNSIGNED (type2);\n   optype = type1;"}]}