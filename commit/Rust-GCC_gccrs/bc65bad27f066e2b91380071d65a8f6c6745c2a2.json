{"sha": "bc65bad27f066e2b91380071d65a8f6c6745c2a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM2NWJhZDI3ZjA2NmUyYjkxMzgwMDcxZDY1YThmNmM2NzQ1YzJhMg==", "commit": {"author": {"name": "Mike Gulick", "email": "mgulick@mathworks.com", "date": "2018-11-27T16:04:31Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-11-27T16:04:31Z"}, "message": "PR preprocessor/83173: Enhance -fdump-internal-locations output\n\ngcc/ChangeLog:\n2018-11-27  Mike Gulick  <mgulick@mathworks.com>\n\n\tPR preprocessor/83173\n\t* input.c (dump_location_info): Dump reason and included_from\n\tfields from line_map_ordinary struct.  Fix indentation when\n\tlocation > 5 digits.\n\t* diagnostic-show-locus.c (num_digits, num_digits): Move to\n\tdiagnostic.c to allow it to be utilized by input.c.\n\t* diagnostic.c (num_digits, selftest::test_num_digits): Moved\n\there.\n\t(selftest::diagnostic_c_tests): Run selftest::test_num_digits.\n\t* diagnostic.h (num_digits): Add extern definition.\n\nlibcpp/ChangeLog:\n2018-11-27  Mike Gulick  <mgulick@mathworks.com>\n\n\tPR preprocessor/83173\n\t* location-example.txt: Update example -fdump-internal-locations\n\toutput.\n\nFrom-SVN: r266520", "tree": {"sha": "8fd44fa810e725cd4e7434022b0220e3c931a500", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fd44fa810e725cd4e7434022b0220e3c931a500"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc65bad27f066e2b91380071d65a8f6c6745c2a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc65bad27f066e2b91380071d65a8f6c6745c2a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc65bad27f066e2b91380071d65a8f6c6745c2a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc65bad27f066e2b91380071d65a8f6c6745c2a2/comments", "author": {"login": "mgulick", "id": 4109840, "node_id": "MDQ6VXNlcjQxMDk4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4109840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgulick", "html_url": "https://github.com/mgulick", "followers_url": "https://api.github.com/users/mgulick/followers", "following_url": "https://api.github.com/users/mgulick/following{/other_user}", "gists_url": "https://api.github.com/users/mgulick/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgulick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgulick/subscriptions", "organizations_url": "https://api.github.com/users/mgulick/orgs", "repos_url": "https://api.github.com/users/mgulick/repos", "events_url": "https://api.github.com/users/mgulick/events{/privacy}", "received_events_url": "https://api.github.com/users/mgulick/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fb51a3a867e20f574bde3b929ec9ccfba6cc374b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb51a3a867e20f574bde3b929ec9ccfba6cc374b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb51a3a867e20f574bde3b929ec9ccfba6cc374b"}], "stats": {"total": 485, "additions": 293, "deletions": 192}, "files": [{"sha": "8ca260ec47cd2d89aa62e00564eeee31522cc671", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc65bad27f066e2b91380071d65a8f6c6745c2a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc65bad27f066e2b91380071d65a8f6c6745c2a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc65bad27f066e2b91380071d65a8f6c6745c2a2", "patch": "@@ -1,3 +1,16 @@\n+2018-11-27  Mike Gulick  <mgulick@mathworks.com>\n+\n+\tPR preprocessor/83173\n+\t* input.c (dump_location_info): Dump reason and included_from\n+\tfields from line_map_ordinary struct.  Fix indentation when\n+\tlocation > 5 digits.\n+\t* diagnostic-show-locus.c (num_digits, num_digits): Move to\n+\tdiagnostic.c to allow it to be utilized by input.c.\n+\t* diagnostic.c (num_digits, selftest::test_num_digits): Moved\n+\there.\n+\t(selftest::diagnostic_c_tests): Run selftest::test_num_digits.\n+\t* diagnostic.h (num_digits): Add extern definition.\n+\n 2018-11-27  Fredrik Noring  <noring@nocrew.org>\n \n \t* config/mips/mips.c (mips_reorg_process_insns)"}, {"sha": "65fb102a81779c0ff29a16b492be6c339d4a8572", "filename": "gcc/diagnostic-show-locus.c", "status": "modified", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc65bad27f066e2b91380071d65a8f6c6745c2a2/gcc%2Fdiagnostic-show-locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc65bad27f066e2b91380071d65a8f6c6745c2a2/gcc%2Fdiagnostic-show-locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.c?ref=bc65bad27f066e2b91380071d65a8f6c6745c2a2", "patch": "@@ -819,56 +819,6 @@ fixit_cmp (const void *p_a, const void *p_b)\n   return hint_a->get_start_loc () - hint_b->get_start_loc ();\n }\n \n-/* Get the number of digits in the decimal representation\n-   of VALUE.  */\n-\n-static int\n-num_digits (int value)\n-{\n-  /* Perhaps simpler to use log10 for this, but doing it this way avoids\n-     using floating point.  */\n-  gcc_assert (value >= 0);\n-\n-  if (value == 0)\n-    return 1;\n-\n-  int digits = 0;\n-  while (value > 0)\n-    {\n-      digits++;\n-      value /= 10;\n-    }\n-  return digits;\n-}\n-\n-\n-#if CHECKING_P\n-\n-/* Selftest for num_digits.  */\n-\n-static void\n-test_num_digits ()\n-{\n-  ASSERT_EQ (1, num_digits (0));\n-  ASSERT_EQ (1, num_digits (9));\n-  ASSERT_EQ (2, num_digits (10));\n-  ASSERT_EQ (2, num_digits (99));\n-  ASSERT_EQ (3, num_digits (100));\n-  ASSERT_EQ (3, num_digits (999));\n-  ASSERT_EQ (4, num_digits (1000));\n-  ASSERT_EQ (4, num_digits (9999));\n-  ASSERT_EQ (5, num_digits (10000));\n-  ASSERT_EQ (5, num_digits (99999));\n-  ASSERT_EQ (6, num_digits (100000));\n-  ASSERT_EQ (6, num_digits (999999));\n-  ASSERT_EQ (7, num_digits (1000000));\n-  ASSERT_EQ (7, num_digits (9999999));\n-  ASSERT_EQ (8, num_digits (10000000));\n-  ASSERT_EQ (8, num_digits (99999999));\n-}\n-\n-#endif /* #if CHECKING_P */\n-\n /* Implementation of class layout.  */\n \n /* Constructor for class layout.\n@@ -3761,7 +3711,6 @@ void\n diagnostic_show_locus_c_tests ()\n {\n   test_line_span ();\n-  test_num_digits ();\n \n   test_layout_range_for_single_point ();\n   test_layout_range_for_single_line ();"}, {"sha": "1b572aec6de17ab4b0b189e7876acc6f35ab173e", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc65bad27f066e2b91380071d65a8f6c6745c2a2/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc65bad27f066e2b91380071d65a8f6c6745c2a2/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=bc65bad27f066e2b91380071d65a8f6c6745c2a2", "patch": "@@ -1035,6 +1035,27 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n   return true;\n }\n \n+/* Get the number of digits in the decimal representation of VALUE.  */\n+\n+int\n+num_digits (int value)\n+{\n+  /* Perhaps simpler to use log10 for this, but doing it this way avoids\n+     using floating point.  */\n+  gcc_assert (value >= 0);\n+\n+  if (value == 0)\n+    return 1;\n+\n+  int digits = 0;\n+  while (value > 0)\n+    {\n+      digits++;\n+      value /= 10;\n+    }\n+  return digits;\n+}\n+\n /* Given a partial pathname as input, return another pathname that\n    shares no directory elements with the pathname of __FILE__.  This\n    is used by fancy_abort() to print `Internal compiler error in expr.c'\n@@ -1785,6 +1806,29 @@ test_diagnostic_get_location_text ()\n   progname = old_progname;\n }\n \n+/* Selftest for num_digits.  */\n+\n+static void\n+test_num_digits ()\n+{\n+  ASSERT_EQ (1, num_digits (0));\n+  ASSERT_EQ (1, num_digits (9));\n+  ASSERT_EQ (2, num_digits (10));\n+  ASSERT_EQ (2, num_digits (99));\n+  ASSERT_EQ (3, num_digits (100));\n+  ASSERT_EQ (3, num_digits (999));\n+  ASSERT_EQ (4, num_digits (1000));\n+  ASSERT_EQ (4, num_digits (9999));\n+  ASSERT_EQ (5, num_digits (10000));\n+  ASSERT_EQ (5, num_digits (99999));\n+  ASSERT_EQ (6, num_digits (100000));\n+  ASSERT_EQ (6, num_digits (999999));\n+  ASSERT_EQ (7, num_digits (1000000));\n+  ASSERT_EQ (7, num_digits (9999999));\n+  ASSERT_EQ (8, num_digits (10000000));\n+  ASSERT_EQ (8, num_digits (99999999));\n+}\n+\n /* Run all of the selftests within this file.  */\n \n void\n@@ -1796,6 +1840,8 @@ diagnostic_c_tests ()\n   test_print_parseable_fixits_remove ();\n   test_print_parseable_fixits_replace ();\n   test_diagnostic_get_location_text ();\n+  test_num_digits ();\n+\n }\n \n } // namespace selftest"}, {"sha": "596717e331c5ae856439a7bef30b44861e6977ec", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc65bad27f066e2b91380071d65a8f6c6745c2a2/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc65bad27f066e2b91380071d65a8f6c6745c2a2/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=bc65bad27f066e2b91380071d65a8f6c6745c2a2", "patch": "@@ -421,4 +421,7 @@ extern char *build_message_string (const char *, ...) ATTRIBUTE_PRINTF_1;\n extern void diagnostic_output_format_init (diagnostic_context *,\n \t\t\t\t\t   enum diagnostics_output_format);\n \n+/* Compute the number of digits in the decimal representation of an integer.  */\n+extern int num_digits (int);\n+\n #endif /* ! GCC_DIAGNOSTIC_H */"}, {"sha": "6ce9782d3a8f7b458c9b775084fb75f297ef6a6e", "filename": "gcc/input.c", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc65bad27f066e2b91380071d65a8f6c6745c2a2/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc65bad27f066e2b91380071d65a8f6c6745c2a2/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=bc65bad27f066e2b91380071d65a8f6c6745c2a2", "patch": "@@ -21,6 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"intl.h\"\n+#include \"diagnostic.h\"\n #include \"diagnostic-core.h\"\n #include \"selftest.h\"\n #include \"cpplib.h\"\n@@ -1067,6 +1068,37 @@ dump_location_info (FILE *stream)\n \t       map->m_column_and_range_bits - map->m_range_bits);\n       fprintf (stream, \"  range bits: %i\\n\",\n \t       map->m_range_bits);\n+      const char * reason;\n+      switch (map->reason) {\n+      case LC_ENTER:\n+\treason = \"LC_ENTER\";\n+\tbreak;\n+      case LC_LEAVE:\n+\treason = \"LC_LEAVE\";\n+\tbreak;\n+      case LC_RENAME:\n+\treason = \"LC_RENAME\";\n+\tbreak;\n+      case LC_RENAME_VERBATIM:\n+\treason = \"LC_RENAME_VERBATIM\";\n+\tbreak;\n+      case LC_ENTER_MACRO:\n+\treason = \"LC_RENAME_MACRO\";\n+\tbreak;\n+      default:\n+\treason = \"Unknown\";\n+      }\n+      fprintf (stream, \"  reason: %d (%s)\\n\", map->reason, reason);\n+\n+      const line_map_ordinary *includer_map\n+\t= linemap_included_from_linemap (line_table, map);\n+      fprintf (stream, \"  included from location: %d\",\n+\t       linemap_included_from (map));\n+      if (includer_map) {\n+\tfprintf (stream, \" (in ordinary map %d)\",\n+\t\t int (includer_map - line_table->info_ordinary.maps));\n+      }\n+      fprintf (stream, \"\\n\");\n \n       /* Render the span of source lines that this \"map\" covers.  */\n       for (location_t loc = MAP_START_LOCATION (map);\n@@ -1100,7 +1132,14 @@ dump_location_info (FILE *stream)\n \t      if (max_col > line_text.length ())\n \t\tmax_col = line_text.length () + 1;\n \n-\t      int indent = 14 + strlen (exploc.file);\n+\t      int len_lnum = num_digits (exploc.line);\n+\t      if (len_lnum < 3)\n+\t\tlen_lnum = 3;\n+\t      int len_loc = num_digits (loc);\n+\t      if (len_loc < 5)\n+\t\tlen_loc = 5;\n+\n+\t      int indent = 6 + strlen (exploc.file) + len_lnum + len_loc;\n \n \t      /* Thousands.  */\n \t      if (end_location > 999)"}, {"sha": "74a956c0377fa9557209e692182904cf67575b93", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc65bad27f066e2b91380071d65a8f6c6745c2a2/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc65bad27f066e2b91380071d65a8f6c6745c2a2/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=bc65bad27f066e2b91380071d65a8f6c6745c2a2", "patch": "@@ -1,3 +1,9 @@\n+2018-11-27  Mike Gulick  <mgulick@mathworks.com>\n+\n+\tPR preprocessor/83173\n+\t* location-example.txt: Update example -fdump-internal-locations\n+\toutput.\n+\n 2018-11-27  Mike Gulick  <mgulick@mathworks.com>\n \n \tPR preprocessor/83173"}, {"sha": "f6d98e2d228f66063d8ef30de8df620ad0aa5bdd", "filename": "libcpp/location-example.txt", "status": "modified", "additions": 185, "deletions": 140, "changes": 325, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc65bad27f066e2b91380071d65a8f6c6745c2a2/libcpp%2Flocation-example.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc65bad27f066e2b91380071d65a8f6c6745c2a2/libcpp%2Flocation-example.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flocation-example.txt?ref=bc65bad27f066e2b91380071d65a8f6c6745c2a2", "patch": "@@ -33,8 +33,11 @@ ORDINARY MAP: 0\n   location_t interval: 32 <= loc < 64\n   file: test.c\n   starting at line: 1\n-  column bits: 12\n+  column and range bits: 12\n+  column bits: 7\n   range bits: 5\n+  reason: 0 (LC_ENTER)\n+  included from location: 0\n test.c:  1|loc:   32|#include \"test.h\"\n                     |69269258258148147\n                     |46802468024680246\n@@ -43,186 +46,228 @@ ORDINARY MAP: 1\n   location_t interval: 64 <= loc < 96\n   file: <built-in>\n   starting at line: 0\n+  column and range bits: 0\n   column bits: 0\n   range bits: 0\n+  reason: 2 (LC_RENAME)\n+  included from location: 0\n \n ORDINARY MAP: 2\n   location_t interval: 96 <= loc < 128\n   file: <command-line>\n   starting at line: 0\n+  column and range bits: 0\n   column bits: 0\n   range bits: 0\n+  reason: 2 (LC_RENAME)\n+  included from location: 0\n \n ORDINARY MAP: 3\n-  location_t interval: 128 <= loc < 160128\n+  location_t interval: 128 <= loc < 250240\n   file: /usr/include/stdc-predef.h\n   starting at line: 1\n-  column bits: 12\n+  column and range bits: 12\n+  column bits: 7\n   range bits: 5\n+  reason: 0 (LC_ENTER)\n+  included from location: 127 (in ordinary map 2)\n (contents of /usr/include/stdc-predef.h snipped for brevity)\n \n ORDINARY MAP: 4\n-  location_t interval: 160128 <= loc < 160160\n+  location_t interval: 250240 <= loc < 250272\n   file: <command-line>\n   starting at line: 32\n-  column bits: 12\n+  column and range bits: 12\n+  column bits: 7\n   range bits: 5\n+  reason: 1 (LC_LEAVE)\n+  included from location: 0\n \n ORDINARY MAP: 5\n-  location_t interval: 160160 <= loc < 164256\n+  location_t interval: 250272 <= loc < 254368\n   file: test.c\n   starting at line: 1\n-  column bits: 12\n+  column and range bits: 12\n+  column bits: 7\n   range bits: 5\n-test.c:  1|loc:160160|#include \"test.h\"\n-                    |00000000000000000\n-                    |12223334445556667\n-                    |92582581481470470\n-                    |24680246802468024\n+  reason: 2 (LC_RENAME)\n+  included from location: 0\n+test.c:  1|loc:250272|#include \"test.h\"\n+                     |00000000000000000\n+                     |33344445556667778\n+                     |03603692692582581\n+                     |46802468024680246\n \n ORDINARY MAP: 6\n-  location_t interval: 164256 <= loc < 173280\n+  location_t interval: 254368 <= loc < 266720\n   file: test.h\n   starting at line: 1\n-  column bits: 12\n+  column and range bits: 12\n+  column bits: 7\n   range bits: 5\n-test.h:  1|loc:164256|extern int foo ();\n-                    |444444444444444444\n-                    |233344455566677788\n-                    |825814814704703603\n-                    |802468024680246802\n-test.h:  2|loc:168352|\n-                    |\n-                    |\n-                    |\n-                    |\n-test.h:  3|loc:172448|#define PLUS(A, B) A + B\n-                    |222222222222222223333333\n-                    |455566677788889990001112\n-                    |814704703603692692582581\n-                    |024680246802468024680246\n+  reason: 0 (LC_ENTER)\n+  included from location: 250272 (in ordinary map 5)\n+test.h:  1|loc:254368|extern int foo ();\n+                     |444444444444444444\n+                     |444455566677788899\n+                     |036926925825814814\n+                     |024680246802468024\n+test.h:  2|loc:258464|\n+                     |\n+                     |\n+                     |\n+                     |\n+test.h:  3|loc:262560|#define PLUS(A, B) A + B\n+                     |222222222222233333333333\n+                     |566677788899900011122223\n+                     |925825814814704703603692\n+                     |246802468024680246802468\n+test.h:  4|loc:266656|\n+                     |\n+                     |\n+                     |\n+                     |\n \n ORDINARY MAP: 7\n-  location_t interval: 173280 <= loc < 202016\n+  location_t interval: 266720 <= loc < 299520\n   file: test.c\n   starting at line: 2\n-  column bits: 12\n+  column and range bits: 12\n+  column bits: 7\n   range bits: 5\n-test.c:  2|loc:173280|\n-                    |\n-                    |\n-                    |\n-                    |\n-test.c:  3|loc:177376|int\n-                    |777\n-                    |444\n-                    |047\n-                    |802\n-test.c:  4|loc:181472|main (int argc, char **argv)\n-                    |1111111111111111222222222222\n-                    |5556666777888999000111222333\n-                    |0360369269258258148147047036\n-                    |4680246802468024680246802468\n-test.c:  5|loc:185568|{\n-                    |5\n-                    |6\n-                    |0\n-                    |0\n-test.c:  6|loc:189664|  int a = PLUS (1,2);\n-                    |999999999900000000000\n-                    |677788899900011122233\n-                    |926925825814814704703\n-                    |680246802468024680246\n-test.c:  7|loc:193760|  int b = PLUS (3,4);\n-                    |333333344444444444444\n-                    |788899900011122233344\n-                    |925825814814704703603\n-                    |246802468024680246802\n-test.c:  8|loc:197856|  return 0;\n-                    |77778888888\n-                    |89990001112\n-                    |82581481470\n-                    |80246802468\n-test.c:  9|loc:201952|}\n-                    |1\n-                    |9\n-                    |8\n-                    |4\n+  reason: 1 (LC_LEAVE)\n+  included from location: 0\n+test.c:  2|loc:266720|\n+                     |\n+                     |\n+                     |\n+                     |\n+test.c:  3|loc:270816|int\n+                     |000\n+                     |889\n+                     |481\n+                     |802\n+test.c:  4|loc:274912|main (int argc, char **argv)\n+                     |4455555555555555555555555555\n+                     |9900011122223334445556667778\n+                     |4704703603692692582581481470\n+                     |4680246802468024680246802468\n+test.c:  5|loc:279008|{\n+                     |9\n+                     |0\n+                     |4\n+                     |0\n+test.c:  6|loc:283104|  int a = PLUS (1,2);\n+                     |333333333333333333333\n+                     |112222333444555666777\n+                     |360369269258258148147\n+                     |680246802468024680246\n+test.c:  7|loc:287200|  int b = PLUS (3,4);\n+                     |777777777777777777777\n+                     |222333444555666777888\n+                     |369269258258148147047\n+                     |246802468024680246802\n+test.c:  8|loc:291296|  return 0;\n+                     |11111111111\n+                     |33344455566\n+                     |26925825814\n+                     |80246802468\n+test.c:  9|loc:295392|}\n+                     |5\n+                     |4\n+                     |2\n+                     |4\n+test.c: 10|loc:299488|\n+                     |\n+                     |\n+                     |\n+                     |\n \n UNALLOCATED LOCATIONS\n-  location_t interval: 202016 <= loc < 2147483633\n+  location_t interval: 299520 <= loc < 2147483632\n \n-MACRO 1: PLUS (7 tokens)\n-  location_t interval: 2147483633 <= loc < 2147483640\n-test.c:7:11: note: expansion point is location 194115\n-   int b = PLUS (3,4);\n-           ^~~~\n+MACRO 3: PLUS (7 tokens)\n+  location_t interval: 2147483632 <= loc < 2147483639\n+test.c:7:11: note: expansion point is location 287555\n+    7 |   int b = PLUS (3,4);\n+      |           ^~~~\n+  map->start_location: 2147483632\n+  macro_locations:\n+    0: 287744, 263200\n+test.c:7:17: note: token 0 has x-location == 287744\n+    7 |   int b = PLUS (3,4);\n+      |                 ^\n+test.c:7:17: note: token 0 has y-location == 263200\n+    1: 263264, 263264\n+In file included from test.c:1:\n+test.h:3:22: note: token 1 has x-location == y-location == 263264\n+    3 | #define PLUS(A, B) A + B\n+      |                      ^\n+    2: 287808, 263328\n+test.c:7:19: note: token 2 has x-location == 287808\n+    7 |   int b = PLUS (3,4);\n+      |                   ^\n+test.c:7:19: note: token 2 has y-location == 263328\n+    3: 0, 0\n+cc1: note: token 3 has x-location == y-location == 0\n+    4: 0, 0\n+cc1: note: token 4 has x-location == y-location == 0\n+    5: 0, 0\n+cc1: note: token 5 has x-location == y-location == 0\n+    6: 0, 0\n+cc1: note: token 6 has x-location == y-location == 0\n+\n+MACRO 2: PLUS (7 tokens)\n+  location_t interval: 2147483639 <= loc < 2147483646\n+test.c:6:11: note: expansion point is location 283459\n+    6 |   int a = PLUS (1,2);\n+      |           ^~~~\n+  map->start_location: 2147483639\n+  macro_locations:\n+    0: 283648, 263200\n+test.c:6:17: note: token 0 has x-location == 283648\n+    6 |   int a = PLUS (1,2);\n+      |                 ^\n+test.c:6:17: note: token 0 has y-location == 263200\n+    1: 263264, 263264\n+In file included from test.c:1:\n+test.h:3:22: note: token 1 has x-location == y-location == 263264\n+    3 | #define PLUS(A, B) A + B\n+      |                      ^\n+    2: 283712, 263328\n+test.c:6:19: note: token 2 has x-location == 283712\n+    6 |   int a = PLUS (1,2);\n+      |                   ^\n+test.c:6:19: note: token 2 has y-location == 263328\n+    3: 0, 0\n+cc1: note: token 3 has x-location == y-location == 0\n+    4: 0, 0\n+cc1: note: token 4 has x-location == y-location == 0\n+    5: 0, 0\n+cc1: note: token 5 has x-location == y-location == 0\n+    6: 0, 0\n+cc1: note: token 6 has x-location == y-location == 0\n \n-  map->start_location: 2147483633\n+MACRO 1: __GCC_IEC_559_COMPLEX (1 tokens)\n+  location_t interval: 2147483646 <= loc < 2147483647\n+In file included from <command-line>:31:\n+/usr/include/stdc-predef.h:45:6: note: expansion point is location 180564\n+   45 | # if __GCC_IEC_559_COMPLEX > 0\n+      |      ^~~~~~~~~~~~~~~~~~~~~\n+  map->start_location: 2147483646\n   macro_locations:\n-    0: 194304, 173088\n-test.c:7:17: note: token 0 has x-location == 194304\n-   int b = PLUS (3,4);\n-                 ^\n-\n-test.c:7:17: note: token 0 has y-location == 173088\n-    1: 173152, 173152\n-In file included from test.c:1:0:\n-test.h:3:22: note: token 1 has x-location == y-location == 173152\n- #define PLUS(A, B) A + B\n-                      ^\n-\n-    2: 194368, 173216\n-test.c:7:19: note: token 2 has x-location == 194368\n-   int b = PLUS (3,4);\n-                   ^\n-\n-test.c:7:19: note: token 2 has y-location == 173216\n-    3: 0, 2947526575\n-cc1: note: token 3 has x-location == 0\n-cc1: note: token 3 has y-location == 2947526575\n-    4: 2947526575, 2947526575\n-x-location == y-location == 2947526575 encodes token # 800042942\n-    5: 2947526575, 2947526575\n-x-location == y-location == 2947526575 encodes token # 800042942\n-    6: 2947526575, 2947526575\n-x-location == y-location == 2947526575 encodes token # 800042942\n-\n-MACRO 0: PLUS (7 tokens)\n-  location_t interval: 2147483640 <= loc < 2147483647\n-test.c:6:11: note: expansion point is location 190019\n-   int a = PLUS (1,2);\n-           ^~~~\n-\n-  map->start_location: 2147483640\n+    0: 1, 1\n+<built-in>: note: token 0 has x-location == y-location == 1\n+\n+MACRO 0: __GCC_IEC_559 (1 tokens)\n+  location_t interval: 2147483647 <= loc < 2147483648\n+/usr/include/stdc-predef.h:37:6: note: expansion point is location 147788\n+   37 | # if __GCC_IEC_559 > 0\n+      |      ^~~~~~~~~~~~~\n+  map->start_location: 2147483647\n   macro_locations:\n-    0: 190208, 173088\n-test.c:6:17: note: token 0 has x-location == 190208\n-   int a = PLUS (1,2);\n-                 ^\n-\n-test.c:6:17: note: token 0 has y-location == 173088\n-    1: 173152, 173152\n-In file included from test.c:1:0:\n-test.h:3:22: note: token 1 has x-location == y-location == 173152\n- #define PLUS(A, B) A + B\n-                      ^\n-\n-    2: 190272, 173216\n-test.c:6:19: note: token 2 has x-location == 190272\n-   int a = PLUS (1,2);\n-                   ^\n-\n-test.c:6:19: note: token 2 has y-location == 173216\n-    3: 0, 2947526575\n-cc1: note: token 3 has x-location == 0\n-cc1: note: token 3 has y-location == 2947526575\n-    4: 2947526575, 2947526575\n-x-location == y-location == 2947526575 encodes token # 800042935\n-    5: 2947526575, 2947526575\n-x-location == y-location == 2947526575 encodes token # 800042935\n-    6: 2947526575, 2947526575\n-x-location == y-location == 2947526575 encodes token # 800042935\n+    0: 1, 1\n+<built-in>: note: token 0 has x-location == y-location == 1\n \n MAX_LOCATION_T\n   location_t interval: 2147483647 <= loc < 2147483648"}]}