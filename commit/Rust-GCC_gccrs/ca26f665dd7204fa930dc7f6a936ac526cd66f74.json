{"sha": "ca26f665dd7204fa930dc7f6a936ac526cd66f74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EyNmY2NjVkZDcyMDRmYTkzMGRjN2Y2YTkzNmFjNTI2Y2Q2NmY3NA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2012-08-02T16:20:22Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2012-08-02T16:20:22Z"}, "message": "arm.c (arm_gen_constant): Use UBFX for some AND operations when available.\n\n\t* arm.c (arm_gen_constant): Use UBFX for some AND operations when\n\tavailable.\n\nFrom-SVN: r190088", "tree": {"sha": "b69bf3d483cf99ad25f1bb911f848e36d4080b2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b69bf3d483cf99ad25f1bb911f848e36d4080b2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca26f665dd7204fa930dc7f6a936ac526cd66f74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca26f665dd7204fa930dc7f6a936ac526cd66f74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca26f665dd7204fa930dc7f6a936ac526cd66f74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca26f665dd7204fa930dc7f6a936ac526cd66f74/comments", "author": null, "committer": null, "parents": [{"sha": "8812aab189d4519c0bb3f853867a2e12af0b6504", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8812aab189d4519c0bb3f853867a2e12af0b6504", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8812aab189d4519c0bb3f853867a2e12af0b6504"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "578b0a05485416f2f361be7f314c3ea284b8ba52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca26f665dd7204fa930dc7f6a936ac526cd66f74/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca26f665dd7204fa930dc7f6a936ac526cd66f74/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca26f665dd7204fa930dc7f6a936ac526cd66f74", "patch": "@@ -1,3 +1,8 @@\n+2012-08-02  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.c (arm_gen_constant): Use UBFX for some AND operations when\n+\tavailable.\n+\n 2012-08-02  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-into-ssa.c (struct common_info_d): New struct."}, {"sha": "00ccb9280de7dfbeac7074fab8923a6135123661", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca26f665dd7204fa930dc7f6a936ac526cd66f74/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca26f665dd7204fa930dc7f6a936ac526cd66f74/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=ca26f665dd7204fa930dc7f6a936ac526cd66f74", "patch": "@@ -2982,6 +2982,31 @@ arm_gen_constant (enum rtx_code code, enum machine_mode mode, rtx cond,\n       return 1;\n     }\n \n+  /* On targets with UXTH/UBFX, we can deal with AND (2^N)-1 in a single\n+     insn.  */\n+  if (code == AND && (i = exact_log2 (remainder + 1)) > 0\n+      && (arm_arch_thumb2 || (i == 16 && arm_arch6 && mode == SImode)))\n+    {\n+      if (generate)\n+\t{\n+\t  if (mode == SImode && i == 16)\n+\t    /* Use UXTH in preference to UBFX, since on Thumb2 it's a \n+\t       smaller insn.  */\n+\t    emit_constant_insn (cond,\n+\t\t\t\tgen_zero_extendhisi2\n+\t\t\t\t(target, gen_lowpart (HImode, source)));\n+\t  else\n+\t    /* Extz only supports SImode, but we can coerce the operands\n+\t       into that mode.  */\n+\t    emit_constant_insn (cond,\n+\t\t\t\tgen_extzv_t2 (gen_lowpart (mode, target),\n+\t\t\t\t\t      gen_lowpart (mode, source),\n+\t\t\t\t\t      GEN_INT (i), const0_rtx));\n+\t}\n+\n+      return 1;\n+    }\n+\n   /* Calculate a few attributes that may be useful for specific\n      optimizations.  */\n   /* Count number of leading zeros.  */"}]}