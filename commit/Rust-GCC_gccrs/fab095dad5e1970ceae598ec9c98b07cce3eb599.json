{"sha": "fab095dad5e1970ceae598ec9c98b07cce3eb599", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFiMDk1ZGFkNWUxOTcwY2VhZTU5OGVjOWM5OGIwN2NjZTNlYjU5OQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-02-13T00:16:38Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-02-13T00:16:38Z"}, "message": "Daily bump.", "tree": {"sha": "be76877333db8e8f816872e041e014d555692fd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be76877333db8e8f816872e041e014d555692fd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fab095dad5e1970ceae598ec9c98b07cce3eb599", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fab095dad5e1970ceae598ec9c98b07cce3eb599", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fab095dad5e1970ceae598ec9c98b07cce3eb599", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fab095dad5e1970ceae598ec9c98b07cce3eb599/comments", "author": null, "committer": null, "parents": [{"sha": "eb64b0b285b4fda9e8eeda4c2f370e636b1ab2ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb64b0b285b4fda9e8eeda4c2f370e636b1ab2ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb64b0b285b4fda9e8eeda4c2f370e636b1ab2ae"}], "stats": {"total": 321, "additions": 320, "deletions": 1}, "files": [{"sha": "ad85986fe3b1ce87d76d43478894f55386051404", "filename": "gcc/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab095dad5e1970ceae598ec9c98b07cce3eb599/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab095dad5e1970ceae598ec9c98b07cce3eb599/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fab095dad5e1970ceae598ec9c98b07cce3eb599", "patch": "@@ -1,3 +1,54 @@\n+2021-02-12  Martin Sebor  <msebor@redhat.com>\n+\n+\t* tree-pretty-print.c (print_generic_expr_to_str): Update comment.\n+\n+2021-02-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* rtl-ssa/accesses.cc (function_info::make_use_available): Use\n+\tm_temp_obstack rather than m_obstack to allocate the temporary use.\n+\n+2021-02-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* df-problems.c (df_lr_bb_local_compute): Treat partial definitions\n+\tas read-modify operations.\n+\n+2021-02-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/38474\n+\t* ipa-fnsummary.c (unmodified_parm_1): Only walk when\n+\tfbi->aa_walk_budget is bigger than zero.  Update\n+\tfbi->aa_walk_budget.\n+\t(param_change_prob): Likewise.\n+\t* ipa-prop.c (detect_type_change_from_memory_writes):\n+\tProperly account walk_aliased_vdefs.\n+\t(parm_preserved_before_stmt_p): Canonicalize updates.\n+\t(parm_ref_data_preserved_p): Likewise.\n+\t(parm_ref_data_pass_through_p): Likewise.\n+\t(determine_known_aggregate_parts): Account own alias queries.\n+\n+2021-02-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* opts-common.c (decode_cmdline_option): Release werror_arg.\n+\t* opts.c (gen_producer_string): Release output of\n+\tgen_command_line_string.\n+\n+2021-02-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/38474\n+\t* params.opt (-param=max-store-chains-to-track=): New param.\n+\t(-param=max-stores-to-track=): Likewise.\n+\t* doc/invoke.texi (max-store-chains-to-track): Document.\n+\t(max-stores-to-track): Likewise.\n+\t* gimple-ssa-store-merging.c (pass_store_merging::m_n_chains):\n+\tNew.\n+\t(pass_store_merging::m_n_stores): Likewise.\n+\t(pass_store_merging::terminate_and_process_chain): Update\n+\tm_n_stores and m_n_chains.\n+\t(pass_store_merging::process_store): Likewise.   Terminate\n+\toldest chains if the number of stores or chains get too large.\n+\t(imm_store_chain_info::terminate_and_process_chain): Dump\n+\tchain length.\n+\n 2021-02-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/i386/winnt.c (i386_pe_seh_unwind_emit): When switching to"}, {"sha": "fb87102372284577b646ea35bcb602fdb83d1908", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab095dad5e1970ceae598ec9c98b07cce3eb599/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab095dad5e1970ceae598ec9c98b07cce3eb599/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=fab095dad5e1970ceae598ec9c98b07cce3eb599", "patch": "@@ -1 +1 @@\n-20210212\n+20210213"}, {"sha": "52faefaa2ae8f112890672e57d836249c41f0ff7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab095dad5e1970ceae598ec9c98b07cce3eb599/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab095dad5e1970ceae598ec9c98b07cce3eb599/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fab095dad5e1970ceae598ec9c98b07cce3eb599", "patch": "@@ -1,3 +1,7 @@\n+2021-02-12  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* repinfo.ads, repinfo.adb (*SO_Ref*): Restore.\n+\n 2021-02-03  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (components_to_record): If the first component"}, {"sha": "59f6d921055328c3990510ec88f34c582902bd9f", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab095dad5e1970ceae598ec9c98b07cce3eb599/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab095dad5e1970ceae598ec9c98b07cce3eb599/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=fab095dad5e1970ceae598ec9c98b07cce3eb599", "patch": "@@ -1,3 +1,30 @@\n+2021-02-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/98969\n+\t* engine.cc (readability): Add names for the various arbitrary\n+\tvalues.  Handle NOP_EXPR and INTEGER_CST.\n+\t(readability_comparator): Combine the readability tests for\n+\ttree and stack depth, rather than performing them sequentially.\n+\t(impl_region_model_context::on_state_leak): Strip off top-level\n+\tcasts.\n+\t* region-model.cc (region_model::get_representative_path_var): Add\n+\ttype-checking, moving the bulk of the implementation to...\n+\t(region_model::get_representative_path_var_1): ...here.  Respect\n+\ttypes in casts by recursing and re-adding the cast, rather than\n+\tmerely stripping them off.  Use the correct type when handling\n+\tregion_svalue.\n+\t(region_model::get_representative_tree): Strip off any top-level\n+\tcast.\n+\t(region_model::get_representative_path_var): Add type-checking,\n+\tmoving the bulk of the implementation to...\n+\t(region_model::get_representative_path_var_1): ...here.\n+\t* region-model.h (region_model::get_representative_path_var_1):\n+\tNew decl\n+\t(region_model::get_representative_path_var_1): New decl.\n+\t* store.cc (append_pathvar_with_type): New.\n+\t(binding_cluster::get_representative_path_vars): Cast path_vars\n+\tto the correct type when adding them to *OUT_PVS.\n+\n 2021-02-09  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/98575"}, {"sha": "1d580d9041cca9e4f7645f127744a611fe870876", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab095dad5e1970ceae598ec9c98b07cce3eb599/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab095dad5e1970ceae598ec9c98b07cce3eb599/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=fab095dad5e1970ceae598ec9c98b07cce3eb599", "patch": "@@ -1,3 +1,9 @@\n+2021-02-12  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/99055\n+\t* c-warn.c (warn_parm_array_mismatch): Free strings returned from\n+\tprint_generic_expr_to_str.\n+\n 2021-02-10  Richard Biener  <rguenther@suse.de>\n \n \t* c-common.c (parse_optimize_options): Free decoded_options."}, {"sha": "d5997a68fce647e841dd1b8ef7b4c22c358edce0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab095dad5e1970ceae598ec9c98b07cce3eb599/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab095dad5e1970ceae598ec9c98b07cce3eb599/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fab095dad5e1970ceae598ec9c98b07cce3eb599", "patch": "@@ -1,3 +1,66 @@\n+2021-02-12  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* module.cc (module_state::write_cluster): Check bindings for\n+\timported using-decls.\n+\n+2021-02-12  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99040\n+\t* module.cc (trees_in::decl_value): Call add_module_namespace_decl\n+\tfor new namespace-scope entities.\n+\t(module_state::read_cluster): Don't call add_module_decl here.\n+\t* name-lookup.h (add_module_decl): Rename to ...\n+\t(add_module_namespace_decl): ... this.\n+\t* name-lookup.c (newbinding_bookkeeping): Move into ...\n+\t(do_pushdecl): ... here.  Its only remaining caller.\n+\t(add_module_decl): Rename to ...\n+\t(add_module_namespace_decl): ... here.  Add checking-assert for\n+\tcircularity. Don't call newbinding_bookkeeping, just extern_c\n+\tchecking and incomplete var checking.\n+\n+2021-02-12  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99039\n+\tPR c++/99040\n+\t* cp-tree.h (CPTI_GLOBAL_TYPE): Delete.\n+\t(global_type_node): Delete.\n+\t(IDENTIFIER_TYPE_VALUE): Delete.\n+\t(IDENTIFIER_HAS_TYPE_VALUE): Delete.\n+\t(get_type_value): Delete.\n+\t* name-lookup.h (identifier_type_value): Delete.\n+\t* name-lookup.c (check_module_override): Don't\n+\tSET_IDENTIFIER_TYPE_VALUE here.\n+\t(do_pushdecl): Nor here.\n+\t(identifier_type_value_1, identifier_type_value): Delete.\n+\t(set_identifier_type_value_with_scope): Only\n+\tSET_IDENTIFIER_TYPE_VALUE for local and class scopes.\n+\t(pushdecl_nanmespace_level): Remove shadow stack nadgering.\n+\t(do_pushtag): Use REAL_IDENTIFIER_TYPE_VALUE.\n+\t* call.c (check_dtor_name): Use lookup_name.\n+\t* decl.c (cxx_init_decl_processing): Drop global_type_node.\n+\t* decl2.c (cplus_decl_attributes): Don't SET_IDENTIFIER_TYPE_VALUE\n+\there.\n+\t* init.c (get_type_value): Delete.\n+\t* pt.c (instantiate_class_template_1): Don't call pushtag or\n+\tSET_IDENTIFIER_TYPE_VALUE here.\n+\t(tsubst): Assert never an identifier.\n+\t(dependent_type_p): Drop global_type_node assert.\n+\t* typeck.c (error_args_num): Don't use IDENTIFIER_HAS_TYPE_VALUE\n+\tto determine ctorness.\n+\n+2021-02-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/97742\n+\t* parser.c (cp_parser_requirement_seq): Stop iterating after reaching\n+\tCPP_EOF.\n+\n+2021-02-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/97246\n+\tPR c++/94546\n+\t* pt.c (extract_fnparm_pack): Check DECL_PACK_P here.\n+\t(register_parameter_specializations): Not here.\n+\n 2021-02-11  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/95888"}, {"sha": "9a34dd6012179360aa9b0713ffd261726052a740", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab095dad5e1970ceae598ec9c98b07cce3eb599/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab095dad5e1970ceae598ec9c98b07cce3eb599/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fab095dad5e1970ceae598ec9c98b07cce3eb599", "patch": "@@ -1,3 +1,9 @@\n+2021-02-12  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/99043\n+\t* trans-expr.c (gfc_conv_procedure_call): Don't reset\n+\trank of assumed-rank array.\n+\n 2021-02-11  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/98897"}, {"sha": "f3630486104ca79cf833e4e04aa82474543041e4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab095dad5e1970ceae598ec9c98b07cce3eb599/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab095dad5e1970ceae598ec9c98b07cce3eb599/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fab095dad5e1970ceae598ec9c98b07cce3eb599", "patch": "@@ -1,3 +1,62 @@\n+2021-02-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/rtl/aarch64/multi-subreg-1.c: Add dg-do compile directive\n+\tand restrict the test to aarch64-*-* target only.\n+\n+2021-02-12  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/modules/pr99039_a.C: New.\n+\t* g++.dg/modules/pr99039_b.C: New.\n+\n+2021-02-12  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99040\n+\t* g++.dg/modules/pr99040_a.C: New.\n+\t* g++.dg/modules/pr99040_b.C: New.\n+\t* g++.dg/modules/pr99040_c.C: New.\n+\t* g++.dg/modules/pr99040_d.C: New.\n+\n+2021-02-12  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99039\n+\tPR c++/99040\n+\t* g++.dg/lookup/pr99039.C: New.\n+\n+2021-02-12  Steve Kargl  <sgk@troutmask.apl.washington.edu>\n+\n+\tPR libfortran/95647\n+\t* gfortran.dg/ieee/ieee_12.f90: New test.\n+\n+2021-02-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/rtl/aarch64/multi-subreg-1.c: New test.\n+\n+2021-02-12  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/98931\n+\t* gcc.target/arm/pr98931.c: Add -mthumb\n+\n+2021-02-12  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/99043\n+\t* gfortran.dg/assumed_rank_20.f90: New test.\n+\n+2021-02-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/97742\n+\t* g++.dg/cpp2a/concepts-requires24.C: New test.\n+\n+2021-02-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/97246\n+\t* g++.dg/cpp2a/lambda-generic-variadic21.C: New test.\n+\n+2021-02-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/98969\n+\t* g++.dg/analyzer/pr99064.C: New test.\n+\t* gcc.dg/analyzer/pr98969.c: New test.\n+\n 2021-02-11  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/95888"}, {"sha": "6b072d1c4127c2f96091ba63de2b8ffa1bc6a255", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab095dad5e1970ceae598ec9c98b07cce3eb599/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab095dad5e1970ceae598ec9c98b07cce3eb599/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=fab095dad5e1970ceae598ec9c98b07cce3eb599", "patch": "@@ -1,3 +1,9 @@\n+2021-02-12  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* configure.ac: Check for objcopy --add-gnu-debuglink by using\n+\tobjcopy --help.\n+\t* configure: Regenerate\n+\n 2021-01-18  Ian Lance Taylor  <iant@golang.org>\n \n \t* Makefile.am (%_dwz): If dwz fails, use uncompressed debug info."}, {"sha": "114518f75ef2879d55e47215e10f3b670fb6c905", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab095dad5e1970ceae598ec9c98b07cce3eb599/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab095dad5e1970ceae598ec9c98b07cce3eb599/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=fab095dad5e1970ceae598ec9c98b07cce3eb599", "patch": "@@ -1,3 +1,9 @@\n+2021-02-12  Steve Kargl  <sgk@troutmask.apl.washington.edu>\n+\n+\tPR libfortran/95647\n+\t* ieee/ieee_arithmetic.F90: Flip interfaces of operators .eq. to\n+\t== and .ne. to /= .\n+\n 2021-02-11  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/98825"}, {"sha": "a8938d130bc3f5d958e8a2b7bbd7c05d2e686ee5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab095dad5e1970ceae598ec9c98b07cce3eb599/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab095dad5e1970ceae598ec9c98b07cce3eb599/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fab095dad5e1970ceae598ec9c98b07cce3eb599", "patch": "@@ -1,3 +1,94 @@\n+2021-02-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/88881\n+\t* src/c++17/fs_ops.cc (fs::symlink_status): Re-enable workaround.\n+\n+2021-02-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/status_cxx2014.xml: Document implementation\n+\tspecific properties of std::experimental::filesystem::rename.\n+\t* doc/xml/manual/status_cxx2017.xml: Document implementation\n+\tspecific properties of std::filesystem::rename.\n+\t* doc/html/*: Regenerate.\n+\t* src/c++17/fs_ops.cc (fs::rename): Implement correct behaviour\n+\tfor directories on Windows.\n+\t* src/filesystem/ops-common.h (__gnu_posix::rename): Use\n+\tMoveFileExW on Windows.\n+\t* testsuite/27_io/filesystem/operations/rename.cc: New test.\n+\t* testsuite/experimental/filesystem/operations/rename.cc: New test.\n+\n+2021-02-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/util/testsuite_fs.h (nonexistent_path): Add\n+\trandom number to the path.\n+\n+2021-02-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/internet (address_v6::to_string): Include\n+\tscope ID in string.\n+\t* testsuite/experimental/net/internet/address/v6/members.cc:\n+\tTest to_string() results.\n+\n+2021-02-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/internet (address_v6::any): Avoid using\n+\tmemcpy in constexpr function.\n+\t(address_v6::loopback): Likewise.\n+\t(make_address_v6): Fix missing return statements on error paths.\n+\t* include/experimental/io_context: Avoid -Wdangling-else\n+\twarning.\n+\t* testsuite/experimental/net/internet/address/v4/members.cc:\n+\tRemove unused variables.\n+\t* testsuite/experimental/net/internet/address/v6/members.cc:\n+\tNew test.\n+\n+2021-02-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/shared_ptr_base.h (__shared_ptr::_M_get_deleter):\n+\tAdd unused attribute to parameter.\n+\t* src/c++11/shared_ptr.cc (_Sp_make_shared_tag::_S_eq):\n+\tLikewise.\n+\n+2021-02-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/27_io/basic_ostream/emit/1.cc: Expect test to fail\n+\tif -fno-rtti is used.\n+\t* testsuite/30_threads/async/forced_unwind.cc: Expect test\n+\tto abort if -fno-rtti is used.\n+\n+2021-02-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/util/testsuite_allocator.h (memory_resource):\n+\tRemove requirement for RTTI and exceptions to be enabled.\n+\n+2021-02-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/27_io/basic_istringstream/rdbuf/char/2832.cc: Use\n+\tstatic_cast when RTTI is disabled.\n+\t* testsuite/27_io/basic_istringstream/rdbuf/wchar_t/2832.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_ostringstream/rdbuf/char/2832.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_ostringstream/rdbuf/wchar_t/2832.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_stringstream/str/char/2.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_stringstream/str/wchar_t/2.cc:\n+\tLikewise.\n+\n+2021-02-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/ostream (__syncbuf_base::_S_get): Mark parameter\n+\tas unused and only use dynamic_cast when RTTI is enabled.\n+\n+2021-02-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/99077\n+\t* src/c++11/cxx11-ios_failure.cc (__ios_failure(const char*, int)):\n+\tChange int parameter to error_code, to match std::ios_failure.\n+\t(__throw_ios_failure(const char*, int)): Construct error_code\n+\tfrom int parameter.\n+\n 2021-02-11  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* libsupc++/eh_ptr.cc (_GLIBCXX_EH_PTR_RELOPS_COMPAT): Define"}]}