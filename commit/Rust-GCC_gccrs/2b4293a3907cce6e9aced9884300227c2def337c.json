{"sha": "2b4293a3907cce6e9aced9884300227c2def337c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI0MjkzYTM5MDdjY2U2ZTlhY2VkOTg4NDMwMDIyN2MyZGVmMzM3Yw==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2015-03-03T11:25:04Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2015-03-03T11:25:04Z"}, "message": "re PR target/64331 (regcprop propagates registers noted as REG_DEAD)\n\ngcc/\n\tPR target/64331\n\t* config/avr/avr.c (context.h, tree-pass.h): Include them.\n\t(avr_pass_data_recompute_notes): New static variable.\n\t(avr_pass_recompute_notes): New class.\n\t(avr_register_passes): New static function.\n\t(avr_option_override): Call it.\ngcc/testsuite/\n\tPR target/64331\n\t* gcc.target/avr/torture/pr64331.c: New test.\n\nFrom-SVN: r221143", "tree": {"sha": "c535a224fe287ccd0858abd076395d0a288e0c75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c535a224fe287ccd0858abd076395d0a288e0c75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b4293a3907cce6e9aced9884300227c2def337c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b4293a3907cce6e9aced9884300227c2def337c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b4293a3907cce6e9aced9884300227c2def337c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b4293a3907cce6e9aced9884300227c2def337c/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3882207695588de867178df85b1e2511ccd7fb26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3882207695588de867178df85b1e2511ccd7fb26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3882207695588de867178df85b1e2511ccd7fb26"}], "stats": {"total": 107, "additions": 107, "deletions": 0}, "files": [{"sha": "9eef7746f5f00c67491237a04e1879af8a54fbe2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4293a3907cce6e9aced9884300227c2def337c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4293a3907cce6e9aced9884300227c2def337c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b4293a3907cce6e9aced9884300227c2def337c", "patch": "@@ -1,3 +1,12 @@\n+2015-03-03  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/64331\n+\t* config/avr/avr.c (context.h, tree-pass.h): Include them.\n+\t(avr_pass_data_recompute_notes): New static variable.\n+\t(avr_pass_recompute_notes): New class.\n+\t(avr_register_passes): New static function.\n+\t(avr_option_override): Call it.\n+\n 2015-03-03  Georg-Johann Lay  <avr@gjlay.de>\n \n \tFix various problems with specs file generation."}, {"sha": "827b2800597f17915855bdda9d139ee30e43756b", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4293a3907cce6e9aced9884300227c2def337c/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4293a3907cce6e9aced9884300227c2def337c/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=2b4293a3907cce6e9aced9884300227c2def337c", "patch": "@@ -81,6 +81,8 @@\n #include \"basic-block.h\"\n #include \"df.h\"\n #include \"builtins.h\"\n+#include \"context.h\"\n+#include \"tree-pass.h\"\n \n /* Maximal allowed offset for an address in the LD command */\n #define MAX_LD_OFFSET(MODE) (64 - (signed)GET_MODE_SIZE (MODE))\n@@ -329,6 +331,55 @@ avr_to_int_mode (rtx x)\n }\n \n \n+static const pass_data avr_pass_data_recompute_notes =\n+{\n+  RTL_PASS,      // type\n+  \"\",            // name (will be patched)\n+  OPTGROUP_NONE, // optinfo_flags\n+  TV_DF_SCAN,    // tv_id\n+  0,             // properties_required\n+  0,             // properties_provided\n+  0,             // properties_destroyed\n+  0,             // todo_flags_start\n+  TODO_df_finish | TODO_df_verify // todo_flags_finish\n+};\n+\n+\n+class avr_pass_recompute_notes : public rtl_opt_pass\n+{\n+public:\n+  avr_pass_recompute_notes (gcc::context *ctxt, const char *name)\n+    : rtl_opt_pass (avr_pass_data_recompute_notes, ctxt)\n+  {\n+    this->name = name;\n+  }\n+\n+  virtual unsigned int execute (function*)\n+  {\n+    df_note_add_problem ();\n+    df_analyze ();\n+\n+    return 0;\n+  }\n+}; // avr_pass_recompute_notes\n+\n+\n+static void\n+avr_register_passes (void)\n+{\n+  /* This avr-specific pass (re)computes insn notes, in particular REG_DEAD\n+     notes which are used by `avr.c::reg_unused_after' and branch offset\n+     computations.  These notes must be correct, i.e. there must be no\n+     dangling REG_DEAD notes; otherwise wrong code might result, cf. PR64331.\n+\n+     DF needs (correct) CFG, hence right before free_cfg is the last\n+     opportunity to rectify notes.  */\n+\n+  register_pass (new avr_pass_recompute_notes (g, \"avr-notes-free-cfg\"),\n+                 PASS_POS_INSERT_BEFORE, \"*free_cfg\", 1);\n+}\n+\n+\n /* Implement `TARGET_OPTION_OVERRIDE'.  */\n \n static void\n@@ -411,6 +462,11 @@ avr_option_override (void)\n   init_machine_status = avr_init_machine_status;\n \n   avr_log_set_avr_log();\n+\n+  /* Register some avr-specific pass(es).  There is no canonical place for\n+     pass registration.  This function is convenient.  */\n+\n+  avr_register_passes ();\n }\n \n /* Function to set up the backend function structure.  */"}, {"sha": "ecc4cc42b3134ff227d26b67b222d42a1a65f527", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4293a3907cce6e9aced9884300227c2def337c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4293a3907cce6e9aced9884300227c2def337c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2b4293a3907cce6e9aced9884300227c2def337c", "patch": "@@ -1,3 +1,8 @@\n+2015-03-03  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/64331\n+\t* gcc.target/avr/torture/pr64331.c: New test.\n+\n 2015-03-03  Martin Liska  <mliska@suse.cz>\n \t    Jan Hubicka   <hubicka@ucw.cz>\n "}, {"sha": "1934ccfd29477a91b4cc1eadc56575d52bff09cd", "filename": "gcc/testsuite/gcc.target/avr/torture/pr64331.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4293a3907cce6e9aced9884300227c2def337c/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fpr64331.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4293a3907cce6e9aced9884300227c2def337c/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fpr64331.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fpr64331.c?ref=2b4293a3907cce6e9aced9884300227c2def337c", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+\n+typedef struct\n+{\n+  unsigned a, b;\n+} T2;\n+\n+\n+__attribute__((__noinline__, __noclone__))\n+void foo2 (T2 *t, int x)\n+{\n+  if (x != t->a)\n+    {\n+      t->a = x;\n+  \n+      if (x && x == t->b)\n+\tt->a = 20;\n+    }\n+}\n+\n+\n+T2 t;\n+\n+int main (void)\n+{\n+  t.a = 1;\n+  t.b = 1234;\n+\n+  foo2 (&t, 1234);\n+\n+  if (t.a != 20)\n+    __builtin_abort();\n+\n+  __builtin_exit (0);\n+\n+  return 0;\n+}"}]}