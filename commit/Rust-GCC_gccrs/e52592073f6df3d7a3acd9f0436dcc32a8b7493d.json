{"sha": "e52592073f6df3d7a3acd9f0436dcc32a8b7493d", "node_id": "C_kwDOANBUbNoAKGU1MjU5MjA3M2Y2ZGYzZDdhM2FjZDlmMDQzNmRjYzMyYThiNzQ5M2Q", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-07-01T09:17:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-07-01T09:17:41Z"}, "message": "wide-int: Fix up wi::shifted_mask [PR106144]\n\nAs the following self-test testcase shows, wi::shifted_mask sometimes\ndoesn't create canonicalized wide_ints, which then fail to compare equal\nto canonicalized wide_ints with the same value.\nIn particular, wi::mask (128, false, 128) gives { -1 } with len 1 and prec 128,\nwhile wi::shifted_mask (0, 128, false, 128) gives { -1, -1 } with len 2\nand prec 128.\nThe problem is that the code is written with the assumption that there are\n3 bit blocks (or 2 if start is 0), but doesn't consider the possibility\nwhere there are 2 bit blocks (or 1 if start is 0) where the highest block\nisn't present.  In that case, there is the optional block of negate ? 0 : -1\nelts, followed by just one elt (either one from the if (shift) or just\nnegate ? -1 : 0) and the rest is implicit sign-extension.\nOnly if end < prec there is 1 or more bits above it that have different bit\nvalue and so we need to emit all the elts till end and then one more elt.\n\nif (end == prec) would work too, because we have:\n  if (width > prec - start)\n    width = prec - start;\n  unsigned int end = start + width;\nso end is guaranteed to be end <= prec, dunno what is preferred.\n\n2022-07-01  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/106144\n\t* wide-int.cc (wi::shifted_mask): If end >= prec, return right after\n\temitting element for shift or if shift is 0 first element after start.\n\t(wide_int_cc_tests): Add tests for equivalency of wi::mask and\n\twi::shifted_mask with 0 start.", "tree": {"sha": "c2022395f9ad647bab36be832ba3f651ef774953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2022395f9ad647bab36be832ba3f651ef774953"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e52592073f6df3d7a3acd9f0436dcc32a8b7493d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e52592073f6df3d7a3acd9f0436dcc32a8b7493d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e52592073f6df3d7a3acd9f0436dcc32a8b7493d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e52592073f6df3d7a3acd9f0436dcc32a8b7493d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17419b61edd350147b0cc10c3da0b8461e51a42c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17419b61edd350147b0cc10c3da0b8461e51a42c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17419b61edd350147b0cc10c3da0b8461e51a42c"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "1fee0788554693a887430592c04fed42cf26cd5f", "filename": "gcc/wide-int.cc", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52592073f6df3d7a3acd9f0436dcc32a8b7493d/gcc%2Fwide-int.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52592073f6df3d7a3acd9f0436dcc32a8b7493d/gcc%2Fwide-int.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int.cc?ref=e52592073f6df3d7a3acd9f0436dcc32a8b7493d", "patch": "@@ -842,6 +842,13 @@ wi::shifted_mask (HOST_WIDE_INT *val, unsigned int start, unsigned int width,\n \tval[i++] = negate ? block : ~block;\n     }\n \n+  if (end >= prec)\n+    {\n+      if (!shift)\n+\tval[i++] = negate ? 0 : -1;\n+      return i;\n+    }\n+\n   while (i < end / HOST_BITS_PER_WIDE_INT)\n     /* 1111111 */\n     val[i++] = negate ? 0 : -1;\n@@ -853,7 +860,7 @@ wi::shifted_mask (HOST_WIDE_INT *val, unsigned int start, unsigned int width,\n       HOST_WIDE_INT block = (HOST_WIDE_INT_1U << shift) - 1;\n       val[i++] = negate ? ~block : block;\n     }\n-  else if (end < prec)\n+  else\n     val[i++] = negate ? -1 : 0;\n \n   return i;\n@@ -2583,6 +2590,10 @@ wide_int_cc_tests ()\n   run_all_wide_int_tests <widest_int> ();\n   test_overflow ();\n   test_round_for_mask ();\n+  ASSERT_EQ (wi::mask (128, false, 128),\n+\t     wi::shifted_mask (0, 128, false, 128));\n+  ASSERT_EQ (wi::mask (128, true, 128),\n+\t     wi::shifted_mask (0, 128, true, 128));\n }\n \n } // namespace selftest"}]}