{"sha": "bd8a2482569900a114d631f9c38353d3a96a1d85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ4YTI0ODI1Njk5MDBhMTE0ZDYzMWY5YzM4MzUzZDNhOTZhMWQ4NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-12-03T18:06:40Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-12-03T18:06:40Z"}, "message": "Don't install unnecessary ARRAY_REF element sizes\n\nEven EXACT_DIV_EXPR doesn't distribute across addition for wrapping\ntypes, so in general we can't fold EXACT_DIV_EXPRs of POLY_INT_CSTs\nat compile time.  This was causing an ICE when trying to gimplify the\nelement size field in an ARRAY_REF.\n\nIf the result of that EXACT_DIV_EXPR is an invariant, we don't bother\nrecording it in the ARRAY_REF and simply read the element size from the\nelement type.  This avoids the overhead of doing:\n\n      /* ??? tree_ssa_useless_type_conversion will eliminate casts to\n\t sizetype from another type of the same width and signedness.  */\n      if (TREE_TYPE (aligned_size) != sizetype)\n\taligned_size = fold_convert_loc (loc, sizetype, aligned_size);\n      return size_binop_loc (loc, MULT_EXPR, aligned_size,\n\t\t\t     size_int (TYPE_ALIGN_UNIT (elmt_type)));\n\neach time array_ref_element_size is called.\n\nSo rather than read array_ref_element_size, do some arithmetic on it,\nand only then check whether the result is an invariant, we might as\nwell check whether the element size is an invariant to start with.\nWe're then directly testing whether array_ref_element_size gives\na reusable value.\n\nFor consistency, the patch makes the same change for the offset field\nin a COMPONENT_REF, although I don't think that can trigger yet.\n\n2019-12-03  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* gimplify.c (gimplify_compound_lval): Don't gimplify and install\n\tan array element size if array_element_size is already an invariant.\n\tSimilarly don't gimplify and install a field offset if\n\tcomponent_ref_field_offset is already an invariant.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/acle/general-c/struct_1.c: New test.\n\nFrom-SVN: r278942", "tree": {"sha": "0f1dac36e3df9cab6b3e4a4ff088a07ec4b2e2fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f1dac36e3df9cab6b3e4a4ff088a07ec4b2e2fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd8a2482569900a114d631f9c38353d3a96a1d85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd8a2482569900a114d631f9c38353d3a96a1d85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd8a2482569900a114d631f9c38353d3a96a1d85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd8a2482569900a114d631f9c38353d3a96a1d85/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2c98350fcb269a653b11f73ca0175679aa29977a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c98350fcb269a653b11f73ca0175679aa29977a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c98350fcb269a653b11f73ca0175679aa29977a"}], "stats": {"total": 58, "additions": 41, "deletions": 17}, "files": [{"sha": "430aedbcb0527b1d3446774011f97dd6d00d570d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd8a2482569900a114d631f9c38353d3a96a1d85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd8a2482569900a114d631f9c38353d3a96a1d85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd8a2482569900a114d631f9c38353d3a96a1d85", "patch": "@@ -1,3 +1,10 @@\n+2019-12-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gimplify.c (gimplify_compound_lval): Don't gimplify and install\n+\tan array element size if array_element_size is already an invariant.\n+\tSimilarly don't gimplify and install a field offset if\n+\tcomponent_ref_field_offset is already an invariant.\n+\n 2019-12-03  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* cfgexpand.c (discover_nonconstant_array_refs_r): If an access"}, {"sha": "9073680cb3179f196979a0ea10b8db0188462eb8", "filename": "gcc/gimplify.c", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd8a2482569900a114d631f9c38353d3a96a1d85/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd8a2482569900a114d631f9c38353d3a96a1d85/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=bd8a2482569900a114d631f9c38353d3a96a1d85", "patch": "@@ -2987,17 +2987,18 @@ gimplify_compound_lval (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \n \t  if (TREE_OPERAND (t, 3) == NULL_TREE)\n \t    {\n-\t      tree elmt_type = TREE_TYPE (TREE_TYPE (TREE_OPERAND (t, 0)));\n-\t      tree elmt_size = unshare_expr (array_ref_element_size (t));\n-\t      tree factor = size_int (TYPE_ALIGN_UNIT (elmt_type));\n-\n-\t      /* Divide the element size by the alignment of the element\n-\t\t type (above).  */\n-\t      elmt_size\n-\t\t= size_binop_loc (loc, EXACT_DIV_EXPR, elmt_size, factor);\n-\n+\t      tree elmt_size = array_ref_element_size (t);\n \t      if (!is_gimple_min_invariant (elmt_size))\n \t\t{\n+\t\t  elmt_size = unshare_expr (elmt_size);\n+\t\t  tree elmt_type = TREE_TYPE (TREE_TYPE (TREE_OPERAND (t, 0)));\n+\t\t  tree factor = size_int (TYPE_ALIGN_UNIT (elmt_type));\n+\n+\t\t  /* Divide the element size by the alignment of the element\n+\t\t     type (above).  */\n+\t\t  elmt_size = size_binop_loc (loc, EXACT_DIV_EXPR,\n+\t\t\t\t\t      elmt_size, factor);\n+\n \t\t  TREE_OPERAND (t, 3) = elmt_size;\n \t\t  tret = gimplify_expr (&TREE_OPERAND (t, 3), pre_p,\n \t\t\t\t\tpost_p, is_gimple_reg,\n@@ -3017,16 +3018,18 @@ gimplify_compound_lval (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t  /* Set the field offset into T and gimplify it.  */\n \t  if (TREE_OPERAND (t, 2) == NULL_TREE)\n \t    {\n-\t      tree offset = unshare_expr (component_ref_field_offset (t));\n-\t      tree field = TREE_OPERAND (t, 1);\n-\t      tree factor\n-\t\t= size_int (DECL_OFFSET_ALIGN (field) / BITS_PER_UNIT);\n-\n-\t      /* Divide the offset by its alignment.  */\n-\t      offset = size_binop_loc (loc, EXACT_DIV_EXPR, offset, factor);\n-\n+\t      tree offset = component_ref_field_offset (t);\n \t      if (!is_gimple_min_invariant (offset))\n \t\t{\n+\t\t  offset = unshare_expr (offset);\n+\t\t  tree field = TREE_OPERAND (t, 1);\n+\t\t  tree factor\n+\t\t    = size_int (DECL_OFFSET_ALIGN (field) / BITS_PER_UNIT);\n+\n+\t\t  /* Divide the offset by its alignment.  */\n+\t\t  offset = size_binop_loc (loc, EXACT_DIV_EXPR,\n+\t\t\t\t\t   offset, factor);\n+\n \t\t  TREE_OPERAND (t, 2) = offset;\n \t\t  tret = gimplify_expr (&TREE_OPERAND (t, 2), pre_p,\n \t\t\t\t\tpost_p, is_gimple_reg,"}, {"sha": "39e8ace59f7981f19ac3e9fdae3a835b13452cb3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd8a2482569900a114d631f9c38353d3a96a1d85/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd8a2482569900a114d631f9c38353d3a96a1d85/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bd8a2482569900a114d631f9c38353d3a96a1d85", "patch": "@@ -1,3 +1,7 @@\n+2019-12-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/acle/general-c/struct_1.c: New test.\n+\n 2019-12-03  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/acle/general/deref_1.c: New test."}, {"sha": "1ebc229250eb1ecafd7fef04a85f6e098de57a06", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/struct_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd8a2482569900a114d631f9c38353d3a96a1d85/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fstruct_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd8a2482569900a114d631f9c38353d3a96a1d85/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fstruct_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fstruct_1.c?ref=bd8a2482569900a114d631f9c38353d3a96a1d85", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-options \"-std=c99\" } */\n+\n+#include <arm_sve.h>\n+\n+void\n+f (svint8_t a, svint8_t b)\n+{\n+  /* Not supported, but mustn't ICE.  */\n+  (svint8x2_t) { a, b };\n+}"}]}