{"sha": "28290cb50c7dbf87458befeb3e295b5cb13560b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgyOTBjYjUwYzdkYmY4NzQ1OGJlZmViM2UyOTViNWNiMTM1NjBiNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-15T07:10:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-15T08:54:24Z"}, "message": "tree-optimization/97482 - fix split_constant_offset of nop-conversions\n\nsplit_constant_offset is confused about a nop-conversion from\nunsigned long to sizetype and tries to prove non-overflowing\nof the inner operation.  Obviously the conversion could have been\nelided so make sure split_constant_offset handles this properly.\n\nIt also makes sure that convert_to_ptrofftype does not introduce\nconversions not necessary which in this case is the source for\nthe unnecessary conversion.\n\n2020-10-15  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/97482\n\t* tree-data-ref.c (split_constant_offset_1): Handle\n\ttrivial conversions better.\n\t* fold-const.c (convert_to_ptrofftype_loc): Elide conversion\n\tif the offset is already ptrofftype_p.\n\n\t* gcc.dg/vect/pr97428.c: New testcase.", "tree": {"sha": "5ddc99caf2358cf5ec76d0136e54f00256b62430", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ddc99caf2358cf5ec76d0136e54f00256b62430"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28290cb50c7dbf87458befeb3e295b5cb13560b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28290cb50c7dbf87458befeb3e295b5cb13560b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28290cb50c7dbf87458befeb3e295b5cb13560b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28290cb50c7dbf87458befeb3e295b5cb13560b5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee21a5f3979adab95069f363b078812a54c5b59f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee21a5f3979adab95069f363b078812a54c5b59f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee21a5f3979adab95069f363b078812a54c5b59f"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "ebd32bb2e04584c9e0d9624e01494c7c71ec285c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28290cb50c7dbf87458befeb3e295b5cb13560b5/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28290cb50c7dbf87458befeb3e295b5cb13560b5/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=28290cb50c7dbf87458befeb3e295b5cb13560b5", "patch": "@@ -15489,6 +15489,8 @@ ptr_difference_const (tree e1, tree e2, poly_int64_pod *diff)\n tree\n convert_to_ptrofftype_loc (location_t loc, tree off)\n {\n+  if (ptrofftype_p (TREE_TYPE (off)))\n+    return off;\n   return fold_convert_loc (loc, sizetype, off);\n }\n "}, {"sha": "b5b02dca9de64d1215ddcc885c80845168a6a233", "filename": "gcc/testsuite/gcc.dg/vect/pr97428.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28290cb50c7dbf87458befeb3e295b5cb13560b5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97428.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28290cb50c7dbf87458befeb3e295b5cb13560b5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97428.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97428.c?ref=28290cb50c7dbf87458befeb3e295b5cb13560b5", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+\n+typedef struct { double re, im; } dcmlx_t;\n+typedef struct { double re[4], im[4]; } dcmlx4_t;\n+\n+void foo_i2(dcmlx4_t dst[], const dcmlx_t src[], int n)\n+{\n+  for (int i = 0; i < n; ++i) {\n+    dcmlx_t s00 = src[i*4+0];\n+    dcmlx_t s01 = src[i*4+1];\n+    dcmlx_t s02 = src[i*4+2];\n+    dcmlx_t s03 = src[i*4+3];\n+\n+    dcmlx_t s10 = src[i*4+0+n];\n+    dcmlx_t s11 = src[i*4+1+n];\n+    dcmlx_t s12 = src[i*4+2+n];\n+    dcmlx_t s13 = src[i*4+3+n];\n+\n+    dst[i*2+0].re[0] = s00.re;\n+    dst[i*2+0].re[1] = s01.re;\n+    dst[i*2+0].re[2] = s02.re;\n+    dst[i*2+0].re[3] = s03.re;\n+    dst[i*2+0].im[0] = s00.im;\n+    dst[i*2+0].im[1] = s01.im;\n+    dst[i*2+0].im[2] = s02.im;\n+    dst[i*2+0].im[3] = s03.im;\n+\n+    dst[i*2+1].re[0] = s10.re;\n+    dst[i*2+1].re[1] = s11.re;\n+    dst[i*2+1].re[2] = s12.re;\n+    dst[i*2+1].re[3] = s13.re;\n+    dst[i*2+1].im[0] = s10.im;\n+    dst[i*2+1].im[1] = s11.im;\n+    dst[i*2+1].im[2] = s12.im;\n+    dst[i*2+1].im[3] = s13.im;\n+  }\n+}\n+\n+/* The first step to produce optimal code is to appropriately detect the\n+   load and store groups.  */\n+/* { dg-final { scan-tree-dump \"Detected interleaving load of size 8\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"Detected interleaving store of size 16\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump-not \"gap of 6 elements\" \"vect\" } } */"}, {"sha": "3bf460cccfd9d59ab8b563bfd632bc2f61c8e328", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28290cb50c7dbf87458befeb3e295b5cb13560b5/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28290cb50c7dbf87458befeb3e295b5cb13560b5/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=28290cb50c7dbf87458befeb3e295b5cb13560b5", "patch": "@@ -754,7 +754,9 @@ split_constant_offset_1 (tree type, tree op0, enum tree_code code, tree op1,\n \t    && TYPE_PRECISION (type) >= TYPE_PRECISION (itype)\n \t    && (POINTER_TYPE_P (type) || INTEGRAL_TYPE_P (type)))\n \t  {\n-\t    if (INTEGRAL_TYPE_P (itype) && TYPE_OVERFLOW_WRAPS (itype))\n+\t    if (INTEGRAL_TYPE_P (itype) && TYPE_OVERFLOW_WRAPS (itype)\n+\t\t&& (TYPE_PRECISION (type) > TYPE_PRECISION (itype)\n+\t\t    || TYPE_UNSIGNED (itype) != TYPE_UNSIGNED (type)))\n \t      {\n \t\t/* Split the unconverted operand and try to prove that\n \t\t   wrapping isn't a problem.  */"}]}