{"sha": "91b16af14cb4f7cdf6414b1314c35202d5883fd9", "node_id": "C_kwDOANBUbNoAKDkxYjE2YWYxNGNiNGY3Y2RmNjQxNGIxMzE0YzM1MjAyZDU4ODNmZDk", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-02T11:13:43Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-02T11:13:43Z"}, "message": "Fixup name canonicalization for impl blocks\n\nWhen we generate the path for impl items we need to base this of the Self\ntype but this was ignoring cases like pointers, references or slices. This\nmeant generic slices had the same path has generic pointers etc. The only\nreason we didn't end up with a linker symbol clash is due to the symbol\nhash.", "tree": {"sha": "6ac31cb5ba06995459ea6d979f5a520de2f5a60b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ac31cb5ba06995459ea6d979f5a520de2f5a60b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91b16af14cb4f7cdf6414b1314c35202d5883fd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91b16af14cb4f7cdf6414b1314c35202d5883fd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91b16af14cb4f7cdf6414b1314c35202d5883fd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91b16af14cb4f7cdf6414b1314c35202d5883fd9/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0866a4fbc6e7f70cd3708467419c60af8c6104f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0866a4fbc6e7f70cd3708467419c60af8c6104f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0866a4fbc6e7f70cd3708467419c60af8c6104f2"}], "stats": {"total": 58, "additions": 35, "deletions": 23}, "files": [{"sha": "603037e8d8fd93b3d21945ec6711e16897f7ca58", "filename": "gcc/rust/resolve/rust-ast-resolve-item.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b16af14cb4f7cdf6414b1314c35202d5883fd9/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b16af14cb4f7cdf6414b1314c35202d5883fd9/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc?ref=91b16af14cb4f7cdf6414b1314c35202d5883fd9", "patch": "@@ -613,6 +613,7 @@ ResolveItem::visit (AST::InherentImpl &impl_block)\n       resolver->get_name_scope ().pop ();\n       return;\n     }\n+  rust_assert (!self_cpath.is_empty ());\n \n   // Setup paths\n   bool canonicalize_type_args = !impl_block.has_generics ();\n@@ -637,6 +638,7 @@ ResolveItem::visit (AST::InherentImpl &impl_block)\n \t= CanonicalPath::new_seg (impl_block.get_node_id (), seg_buf);\n       cpath = canonical_prefix.append (seg);\n     }\n+\n   // done setup paths\n \n   auto Self"}, {"sha": "2b5c68447a08a107853bfdb8e85e0ace473bd37c", "filename": "gcc/rust/resolve/rust-ast-resolve-type.cc", "status": "modified", "additions": 32, "deletions": 17, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b16af14cb4f7cdf6414b1314c35202d5883fd9/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b16af14cb4f7cdf6414b1314c35202d5883fd9/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc?ref=91b16af14cb4f7cdf6414b1314c35202d5883fd9", "patch": "@@ -209,43 +209,58 @@ ResolveTypeToCanonicalPath::visit (AST::SliceType &slice)\n void\n ResolveType::visit (AST::ReferenceType &type)\n {\n-  type.get_type_referenced ()->accept_vis (*this);\n-\n-  if (canonical_path != nullptr && canonical_path->size () > 0)\n+  CanonicalPath path = CanonicalPath::create_empty ();\n+  resolved_node\n+    = ResolveType::go (type.get_type_referenced ().get (), type.get_node_id (),\n+\t\t       canonicalize_type_with_generics, &path);\n+  if (canonical_path != nullptr)\n     {\n-      std::string seg = canonical_path->get ();\n-      *canonical_path = CanonicalPath::new_seg (type.get_node_id (), \"&\" + seg);\n+      std::string ref_type_str = type.is_mut () ? \"mut\" : \"\";\n+      std::string ref_path = \"&\" + ref_type_str + \" \" + path.get ();\n+      *canonical_path = canonical_path->append (\n+\tCanonicalPath::new_seg (type.get_node_id (), ref_path));\n     }\n }\n \n void\n ResolveType::visit (AST::RawPointerType &type)\n {\n-  type.get_type_pointed_to ()->accept_vis (*this);\n-\n-  if (canonical_path != nullptr && canonical_path->size () > 0)\n+  CanonicalPath path = CanonicalPath::create_empty ();\n+  resolved_node\n+    = ResolveType::go (type.get_type_pointed_to ().get (), type.get_node_id (),\n+\t\t       canonicalize_type_with_generics, &path);\n+  if (canonical_path != nullptr)\n     {\n-      std::string seg = canonical_path->get ();\n-      *canonical_path = CanonicalPath::new_seg (type.get_node_id (), \"*\" + seg);\n+      std::string ptr_type_str\n+\t= type.get_pointer_type () == AST::RawPointerType::CONST ? \"const\"\n+\t\t\t\t\t\t\t\t : \"mut\";\n+      std::string ptr_path = \"*\" + ptr_type_str + \" \" + path.get ();\n+      *canonical_path = canonical_path->append (\n+\tCanonicalPath::new_seg (type.get_node_id (), ptr_path));\n     }\n }\n \n void\n ResolveType::visit (AST::InferredType &type)\n-{\n-  ok = true;\n-}\n+{}\n \n void\n ResolveType::visit (AST::NeverType &type)\n-{\n-  ok = true;\n-}\n+{}\n \n void\n ResolveType::visit (AST::SliceType &type)\n {\n-  type.get_elem_type ()->accept_vis (*this);\n+  CanonicalPath path = CanonicalPath::create_empty ();\n+  resolved_node\n+    = ResolveType::go (type.get_elem_type ().get (), type.get_node_id (),\n+\t\t       canonicalize_type_with_generics, &path);\n+  if (canonical_path != nullptr)\n+    {\n+      std::string slice_path = \"[\" + path.get () + \"]\";\n+      *canonical_path = canonical_path->append (\n+\tCanonicalPath::new_seg (type.get_node_id (), slice_path));\n+    }\n }\n \n ResolveRelativeTypePath::ResolveRelativeTypePath (CanonicalPath qualified_path)"}, {"sha": "d10cec2835bd6765e5710cf8010183a6c00f35b0", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b16af14cb4f7cdf6414b1314c35202d5883fd9/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b16af14cb4f7cdf6414b1314c35202d5883fd9/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=91b16af14cb4f7cdf6414b1314c35202d5883fd9", "patch": "@@ -211,15 +211,12 @@ class ResolveType : public ResolverBase\n     ResolveType resolver (parent, canonicalize_type_with_generics,\n \t\t\t  canonical_path);\n     type->accept_vis (resolver);\n-    if (!resolver.ok)\n-      rust_error_at (type->get_locus (), \"unresolved type\");\n \n     return resolver.resolved_node;\n   };\n \n   void visit (AST::BareFunctionType &fntype) override\n   {\n-    ok = true;\n     for (auto &param : fntype.get_function_params ())\n       ResolveType::go (param.get_type ().get (), fntype.get_node_id ());\n \n@@ -253,8 +250,6 @@ class ResolveType : public ResolverBase\n \treturn;\n       }\n \n-    ok = !rel_canonical_path.is_empty ();\n-\n     // lets try and resolve in one go else leave it up to the type resolver to\n     // figure outer\n \n@@ -331,7 +326,7 @@ class ResolveType : public ResolverBase\n \n   void visit (AST::QualifiedPathInType &path) override\n   {\n-    ok = ResolveRelativeTypePath::go (path);\n+    ResolveRelativeTypePath::go (path);\n   }\n \n   void visit (AST::ArrayType &type) override;"}]}