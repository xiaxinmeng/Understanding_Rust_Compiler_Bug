{"sha": "bbf974160054c4b8aa3f0f49084bb46521195a51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJmOTc0MTYwMDU0YzRiOGFhM2YwZjQ5MDg0YmI0NjUyMTE5NWE1MQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2017-06-06T19:18:37Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2017-06-06T19:18:37Z"}, "message": "re PR fortran/80975 (matmul for zero-length arrays)\n\n2017-06-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/80975\n\t* m4/matmul_internal.m4:  Move zeroing before early return.\n\t* generated/matmul_c10.c: Regenerated.\n\t* generated/matmul_c16.c: Regenerated.\n\t* generated/matmul_c4.c: Regenerated.\n\t* generated/matmul_c8.c: Regenerated.\n\t* generated/matmul_i1.c: Regenerated.\n\t* generated/matmul_i16.c: Regenerated.\n\t* generated/matmul_i2.c: Regenerated.\n\t* generated/matmul_i4.c: Regenerated.\n\t* generated/matmul_i8.c: Regenerated.\n\t* generated/matmul_r10.c: Regenerated.\n\t* generated/matmul_r16.c: Regenerated.\n\t* generated/matmul_r4.c: Regenerated.\n\t* generated/matmul_r8.c: Regenerated.\n\t* generated/matmulavx128_c10.c: Regenerated.\n\t* generated/matmulavx128_c16.c: Regenerated.\n\t* generated/matmulavx128_c4.c: Regenerated.\n\t* generated/matmulavx128_c8.c: Regenerated.\n\t* generated/matmulavx128_i1.c: Regenerated.\n\t* generated/matmulavx128_i16.c: Regenerated.\n\t* generated/matmulavx128_i2.c: Regenerated.\n\t* generated/matmulavx128_i4.c: Regenerated.\n\t* generated/matmulavx128_i8.c: Regenerated.\n\t* generated/matmulavx128_r10.c: Regenerated.\n\t* generated/matmulavx128_r16.c: Regenerated.\n\t* generated/matmulavx128_r4.c: Regenerated.\n\t* generated/matmulavx128_r8.c: Regenerated.\n\n2017-06-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/80975\n\t* gfortran.dg/matmul_16.f90: New test.\n\t* gfortran.dg/inline_matmul_18.f90: New test.\n\nFrom-SVN: r248932", "tree": {"sha": "e57ebf929cb76799e8529696691471054a402b8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e57ebf929cb76799e8529696691471054a402b8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbf974160054c4b8aa3f0f49084bb46521195a51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbf974160054c4b8aa3f0f49084bb46521195a51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbf974160054c4b8aa3f0f49084bb46521195a51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbf974160054c4b8aa3f0f49084bb46521195a51/comments", "author": null, "committer": null, "parents": [{"sha": "dc949728324201174ce6000933435a8d0392799e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc949728324201174ce6000933435a8d0392799e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc949728324201174ce6000933435a8d0392799e"}], "stats": {"total": 986, "additions": 526, "deletions": 460}, "files": [{"sha": "74c974c19199d997a99c043112f333836c6e93ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -1,3 +1,9 @@\n+2017-06-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/80975\n+\t* gfortran.dg/matmul_16.f90: New test.\n+\t* gfortran.dg/inline_matmul_18.f90: New test.\n+\n 2017-06-06  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/79983"}, {"sha": "c846733c8c24eca123782625f864508b213df12f", "filename": "gcc/testsuite/gfortran.dg/inline_matmul_18.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_18.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_18.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_18.f90?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do  run }\n+! { dg-options \"-O -finline-matmul-limit=100 -fdump-tree-optimized\" }\n+! PR 80975 - this did not zero the result array in the library version;\n+! make sure this also doesn't happen in the inline version.\n+program bogus_matmul\n+  implicit none\n+  real :: M(3,0), v(0), w(3)\n+\n+  w = 7\n+  w = matmul(M,v)\n+  if( any(w .ne. 0) ) then\n+    call abort\n+  end if\n+end program bogus_matmul\n+! { dg-final { scan-tree-dump-times \"matmul_r4\" 0 \"optimized\" } }\n+"}, {"sha": "9def133634478a5215100bd48b1ae1d1fed79e48", "filename": "gcc/testsuite/gfortran.dg/matmul_16.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_16.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_16.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_16.f90?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do  run }\n+! { dg-options \"-finline-matmul-limit=0\" }\n+! PR 80975 - this did not zero the result array\n+program bogus_matmul\n+  implicit none\n+  real :: M(3,0), v(0), w(3)\n+\n+  w = 7\n+  w = matmul(M,v)\n+  if( any(w .ne. 0) ) then\n+    call abort\n+  end if\n+end program bogus_matmul"}, {"sha": "1f5a0264172cd337671b9d464d3bbdde14a2b9cb", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -1,3 +1,34 @@\n+2017-06-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/80975\n+\t* m4/matmul_internal.m4:  Move zeroing before early return.\n+\t* generated/matmul_c10.c: Regenerated.\n+        * generated/matmul_c16.c: Regenerated.\n+        * generated/matmul_c4.c: Regenerated.\n+        * generated/matmul_c8.c: Regenerated.\n+        * generated/matmul_i1.c: Regenerated.\n+        * generated/matmul_i16.c: Regenerated.\n+        * generated/matmul_i2.c: Regenerated.\n+        * generated/matmul_i4.c: Regenerated.\n+        * generated/matmul_i8.c: Regenerated.\n+        * generated/matmul_r10.c: Regenerated.\n+        * generated/matmul_r16.c: Regenerated.\n+        * generated/matmul_r4.c: Regenerated.\n+        * generated/matmul_r8.c: Regenerated.\n+        * generated/matmulavx128_c10.c: Regenerated.\n+        * generated/matmulavx128_c16.c: Regenerated.\n+        * generated/matmulavx128_c4.c: Regenerated.\n+        * generated/matmulavx128_c8.c: Regenerated.\n+        * generated/matmulavx128_i1.c: Regenerated.\n+        * generated/matmulavx128_i16.c: Regenerated.\n+        * generated/matmulavx128_i2.c: Regenerated.\n+        * generated/matmulavx128_i4.c: Regenerated.\n+        * generated/matmulavx128_i8.c: Regenerated.\n+        * generated/matmulavx128_r10.c: Regenerated.\n+        * generated/matmulavx128_r16.c: Regenerated.\n+        * generated/matmulavx128_r4.c: Regenerated.\n+        * generated/matmulavx128_r8.c: Regenerated.\n+\n 2017-05-29  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/53029"}, {"sha": "4e156ba2ee247137f07268caeaa2bfe1c58997cc", "filename": "libgfortran/generated/matmul_c10.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmul_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmul_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c10.c?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -307,6 +307,11 @@ matmul_c10_avx (gfc_array_c10 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_10)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -319,11 +324,6 @@ matmul_c10_avx (gfc_array_c10 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_10));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_10)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -859,6 +859,11 @@ matmul_c10_avx2 (gfc_array_c10 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_10)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -871,11 +876,6 @@ matmul_c10_avx2 (gfc_array_c10 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_10));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_10)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -1411,6 +1411,11 @@ matmul_c10_avx512f (gfc_array_c10 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_10)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -1423,11 +1428,6 @@ matmul_c10_avx512f (gfc_array_c10 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_10));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_10)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -1977,6 +1977,11 @@ matmul_c10_vanilla (gfc_array_c10 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_10)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -1989,11 +1994,6 @@ matmul_c10_vanilla (gfc_array_c10 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_10));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_10)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -2603,6 +2603,11 @@ matmul_c10 (gfc_array_c10 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_10)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -2615,11 +2620,6 @@ matmul_c10 (gfc_array_c10 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_10));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_10)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)"}, {"sha": "162e564f260f6a3b3671235bd1c14995f907d810", "filename": "libgfortran/generated/matmul_c16.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmul_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmul_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c16.c?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -307,6 +307,11 @@ matmul_c16_avx (gfc_array_c16 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_16)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -319,11 +324,6 @@ matmul_c16_avx (gfc_array_c16 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_16));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_16)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -859,6 +859,11 @@ matmul_c16_avx2 (gfc_array_c16 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_16)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -871,11 +876,6 @@ matmul_c16_avx2 (gfc_array_c16 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_16));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_16)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -1411,6 +1411,11 @@ matmul_c16_avx512f (gfc_array_c16 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_16)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -1423,11 +1428,6 @@ matmul_c16_avx512f (gfc_array_c16 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_16));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_16)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -1977,6 +1977,11 @@ matmul_c16_vanilla (gfc_array_c16 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_16)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -1989,11 +1994,6 @@ matmul_c16_vanilla (gfc_array_c16 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_16));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_16)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -2603,6 +2603,11 @@ matmul_c16 (gfc_array_c16 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_16)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -2615,11 +2620,6 @@ matmul_c16 (gfc_array_c16 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_16));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_16)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)"}, {"sha": "43a0288f2cbd6eef966e3a67342c69c1adbd6407", "filename": "libgfortran/generated/matmul_c4.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmul_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmul_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c4.c?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -307,6 +307,11 @@ matmul_c4_avx (gfc_array_c4 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_4)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -319,11 +324,6 @@ matmul_c4_avx (gfc_array_c4 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_4));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_4)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -859,6 +859,11 @@ matmul_c4_avx2 (gfc_array_c4 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_4)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -871,11 +876,6 @@ matmul_c4_avx2 (gfc_array_c4 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_4));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_4)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -1411,6 +1411,11 @@ matmul_c4_avx512f (gfc_array_c4 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_4)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -1423,11 +1428,6 @@ matmul_c4_avx512f (gfc_array_c4 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_4));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_4)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -1977,6 +1977,11 @@ matmul_c4_vanilla (gfc_array_c4 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_4)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -1989,11 +1994,6 @@ matmul_c4_vanilla (gfc_array_c4 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_4));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_4)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -2603,6 +2603,11 @@ matmul_c4 (gfc_array_c4 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_4)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -2615,11 +2620,6 @@ matmul_c4 (gfc_array_c4 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_4));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_4)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)"}, {"sha": "6efdca10bafe07c03048039e256ed23ee97ed508", "filename": "libgfortran/generated/matmul_c8.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmul_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmul_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c8.c?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -307,6 +307,11 @@ matmul_c8_avx (gfc_array_c8 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_8)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -319,11 +324,6 @@ matmul_c8_avx (gfc_array_c8 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_8));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_8)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -859,6 +859,11 @@ matmul_c8_avx2 (gfc_array_c8 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_8)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -871,11 +876,6 @@ matmul_c8_avx2 (gfc_array_c8 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_8));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_8)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -1411,6 +1411,11 @@ matmul_c8_avx512f (gfc_array_c8 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_8)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -1423,11 +1428,6 @@ matmul_c8_avx512f (gfc_array_c8 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_8));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_8)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -1977,6 +1977,11 @@ matmul_c8_vanilla (gfc_array_c8 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_8)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -1989,11 +1994,6 @@ matmul_c8_vanilla (gfc_array_c8 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_8));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_8)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -2603,6 +2603,11 @@ matmul_c8 (gfc_array_c8 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_8)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -2615,11 +2620,6 @@ matmul_c8 (gfc_array_c8 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_8));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_8)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)"}, {"sha": "a658c456663772cbeef1268c054a7c898ff96ff2", "filename": "libgfortran/generated/matmul_i1.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmul_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmul_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i1.c?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -307,6 +307,11 @@ matmul_i1_avx (gfc_array_i1 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_1)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -319,11 +324,6 @@ matmul_i1_avx (gfc_array_i1 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_1));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_1)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -859,6 +859,11 @@ matmul_i1_avx2 (gfc_array_i1 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_1)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -871,11 +876,6 @@ matmul_i1_avx2 (gfc_array_i1 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_1));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_1)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -1411,6 +1411,11 @@ matmul_i1_avx512f (gfc_array_i1 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_1)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -1423,11 +1428,6 @@ matmul_i1_avx512f (gfc_array_i1 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_1));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_1)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -1977,6 +1977,11 @@ matmul_i1_vanilla (gfc_array_i1 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_1)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -1989,11 +1994,6 @@ matmul_i1_vanilla (gfc_array_i1 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_1));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_1)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -2603,6 +2603,11 @@ matmul_i1 (gfc_array_i1 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_1)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -2615,11 +2620,6 @@ matmul_i1 (gfc_array_i1 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_1));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_1)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)"}, {"sha": "447112be70f6ee8fb62e1a007c8f0dc113ab4b7c", "filename": "libgfortran/generated/matmul_i16.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmul_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmul_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i16.c?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -307,6 +307,11 @@ matmul_i16_avx (gfc_array_i16 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_16)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -319,11 +324,6 @@ matmul_i16_avx (gfc_array_i16 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_16));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_16)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -859,6 +859,11 @@ matmul_i16_avx2 (gfc_array_i16 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_16)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -871,11 +876,6 @@ matmul_i16_avx2 (gfc_array_i16 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_16));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_16)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -1411,6 +1411,11 @@ matmul_i16_avx512f (gfc_array_i16 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_16)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -1423,11 +1428,6 @@ matmul_i16_avx512f (gfc_array_i16 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_16));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_16)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -1977,6 +1977,11 @@ matmul_i16_vanilla (gfc_array_i16 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_16)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -1989,11 +1994,6 @@ matmul_i16_vanilla (gfc_array_i16 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_16));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_16)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -2603,6 +2603,11 @@ matmul_i16 (gfc_array_i16 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_16)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -2615,11 +2620,6 @@ matmul_i16 (gfc_array_i16 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_16));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_16)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)"}, {"sha": "4e2165131f5b4a6643c5da17b2d9aa69cce71a64", "filename": "libgfortran/generated/matmul_i2.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmul_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmul_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i2.c?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -307,6 +307,11 @@ matmul_i2_avx (gfc_array_i2 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_2)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -319,11 +324,6 @@ matmul_i2_avx (gfc_array_i2 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_2));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_2)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -859,6 +859,11 @@ matmul_i2_avx2 (gfc_array_i2 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_2)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -871,11 +876,6 @@ matmul_i2_avx2 (gfc_array_i2 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_2));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_2)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -1411,6 +1411,11 @@ matmul_i2_avx512f (gfc_array_i2 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_2)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -1423,11 +1428,6 @@ matmul_i2_avx512f (gfc_array_i2 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_2));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_2)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -1977,6 +1977,11 @@ matmul_i2_vanilla (gfc_array_i2 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_2)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -1989,11 +1994,6 @@ matmul_i2_vanilla (gfc_array_i2 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_2));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_2)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -2603,6 +2603,11 @@ matmul_i2 (gfc_array_i2 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_2)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -2615,11 +2620,6 @@ matmul_i2 (gfc_array_i2 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_2));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_2)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)"}, {"sha": "5331e945926cc8dc4a27101db43fb7a458a02ad6", "filename": "libgfortran/generated/matmul_i4.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmul_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmul_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i4.c?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -307,6 +307,11 @@ matmul_i4_avx (gfc_array_i4 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_4)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -319,11 +324,6 @@ matmul_i4_avx (gfc_array_i4 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_4));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_4)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -859,6 +859,11 @@ matmul_i4_avx2 (gfc_array_i4 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_4)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -871,11 +876,6 @@ matmul_i4_avx2 (gfc_array_i4 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_4));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_4)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -1411,6 +1411,11 @@ matmul_i4_avx512f (gfc_array_i4 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_4)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -1423,11 +1428,6 @@ matmul_i4_avx512f (gfc_array_i4 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_4));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_4)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -1977,6 +1977,11 @@ matmul_i4_vanilla (gfc_array_i4 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_4)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -1989,11 +1994,6 @@ matmul_i4_vanilla (gfc_array_i4 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_4));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_4)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -2603,6 +2603,11 @@ matmul_i4 (gfc_array_i4 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_4)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -2615,11 +2620,6 @@ matmul_i4 (gfc_array_i4 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_4));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_4)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)"}, {"sha": "d150e699f2f97fb0934ef425217225ff39044da6", "filename": "libgfortran/generated/matmul_i8.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmul_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmul_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i8.c?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -307,6 +307,11 @@ matmul_i8_avx (gfc_array_i8 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_8)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -319,11 +324,6 @@ matmul_i8_avx (gfc_array_i8 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_8));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_8)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -859,6 +859,11 @@ matmul_i8_avx2 (gfc_array_i8 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_8)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -871,11 +876,6 @@ matmul_i8_avx2 (gfc_array_i8 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_8));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_8)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -1411,6 +1411,11 @@ matmul_i8_avx512f (gfc_array_i8 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_8)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -1423,11 +1428,6 @@ matmul_i8_avx512f (gfc_array_i8 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_8));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_8)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -1977,6 +1977,11 @@ matmul_i8_vanilla (gfc_array_i8 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_8)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -1989,11 +1994,6 @@ matmul_i8_vanilla (gfc_array_i8 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_8));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_8)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -2603,6 +2603,11 @@ matmul_i8 (gfc_array_i8 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_8)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -2615,11 +2620,6 @@ matmul_i8 (gfc_array_i8 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_8));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_8)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)"}, {"sha": "5407615fc3785faaa6dd2729b3dc9ee9fd7a0b3b", "filename": "libgfortran/generated/matmul_r10.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmul_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmul_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r10.c?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -307,6 +307,11 @@ matmul_r10_avx (gfc_array_r10 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_10)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -319,11 +324,6 @@ matmul_r10_avx (gfc_array_r10 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_10));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_10)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -859,6 +859,11 @@ matmul_r10_avx2 (gfc_array_r10 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_10)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -871,11 +876,6 @@ matmul_r10_avx2 (gfc_array_r10 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_10));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_10)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -1411,6 +1411,11 @@ matmul_r10_avx512f (gfc_array_r10 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_10)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -1423,11 +1428,6 @@ matmul_r10_avx512f (gfc_array_r10 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_10));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_10)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -1977,6 +1977,11 @@ matmul_r10_vanilla (gfc_array_r10 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_10)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -1989,11 +1994,6 @@ matmul_r10_vanilla (gfc_array_r10 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_10));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_10)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -2603,6 +2603,11 @@ matmul_r10 (gfc_array_r10 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_10)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -2615,11 +2620,6 @@ matmul_r10 (gfc_array_r10 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_10));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_10)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)"}, {"sha": "1254ec11fa598b3ad15dfc0a64c317b825f19271", "filename": "libgfortran/generated/matmul_r16.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmul_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmul_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r16.c?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -307,6 +307,11 @@ matmul_r16_avx (gfc_array_r16 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_16)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -319,11 +324,6 @@ matmul_r16_avx (gfc_array_r16 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_16));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_16)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -859,6 +859,11 @@ matmul_r16_avx2 (gfc_array_r16 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_16)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -871,11 +876,6 @@ matmul_r16_avx2 (gfc_array_r16 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_16));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_16)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -1411,6 +1411,11 @@ matmul_r16_avx512f (gfc_array_r16 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_16)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -1423,11 +1428,6 @@ matmul_r16_avx512f (gfc_array_r16 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_16));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_16)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -1977,6 +1977,11 @@ matmul_r16_vanilla (gfc_array_r16 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_16)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -1989,11 +1994,6 @@ matmul_r16_vanilla (gfc_array_r16 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_16));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_16)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -2603,6 +2603,11 @@ matmul_r16 (gfc_array_r16 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_16)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -2615,11 +2620,6 @@ matmul_r16 (gfc_array_r16 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_16));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_16)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)"}, {"sha": "5d13e6713d6e810d865eb59c4951a2e6a5e59b11", "filename": "libgfortran/generated/matmul_r4.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmul_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmul_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r4.c?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -307,6 +307,11 @@ matmul_r4_avx (gfc_array_r4 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_4)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -319,11 +324,6 @@ matmul_r4_avx (gfc_array_r4 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_4));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_4)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -859,6 +859,11 @@ matmul_r4_avx2 (gfc_array_r4 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_4)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -871,11 +876,6 @@ matmul_r4_avx2 (gfc_array_r4 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_4));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_4)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -1411,6 +1411,11 @@ matmul_r4_avx512f (gfc_array_r4 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_4)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -1423,11 +1428,6 @@ matmul_r4_avx512f (gfc_array_r4 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_4));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_4)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -1977,6 +1977,11 @@ matmul_r4_vanilla (gfc_array_r4 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_4)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -1989,11 +1994,6 @@ matmul_r4_vanilla (gfc_array_r4 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_4));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_4)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -2603,6 +2603,11 @@ matmul_r4 (gfc_array_r4 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_4)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -2615,11 +2620,6 @@ matmul_r4 (gfc_array_r4 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_4));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_4)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)"}, {"sha": "e835ed17169cf18ccc900d9b3e1faf75b41bd9ac", "filename": "libgfortran/generated/matmul_r8.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmul_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmul_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r8.c?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -307,6 +307,11 @@ matmul_r8_avx (gfc_array_r8 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_8)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -319,11 +324,6 @@ matmul_r8_avx (gfc_array_r8 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_8));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_8)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -859,6 +859,11 @@ matmul_r8_avx2 (gfc_array_r8 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_8)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -871,11 +876,6 @@ matmul_r8_avx2 (gfc_array_r8 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_8));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_8)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -1411,6 +1411,11 @@ matmul_r8_avx512f (gfc_array_r8 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_8)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -1423,11 +1428,6 @@ matmul_r8_avx512f (gfc_array_r8 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_8));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_8)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -1977,6 +1977,11 @@ matmul_r8_vanilla (gfc_array_r8 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_8)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -1989,11 +1994,6 @@ matmul_r8_vanilla (gfc_array_r8 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_8));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_8)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -2603,6 +2603,11 @@ matmul_r8 (gfc_array_r8 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_8)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -2615,11 +2620,6 @@ matmul_r8 (gfc_array_r8 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_8));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_8)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)"}, {"sha": "ac8a013b864a0e301ed2a674d2e70fe94283a55a", "filename": "libgfortran/generated/matmulavx128_c10.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmulavx128_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmulavx128_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmulavx128_c10.c?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -272,6 +272,11 @@ matmul_c10_avx128_fma3 (gfc_array_c10 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_10)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -284,11 +289,6 @@ matmul_c10_avx128_fma3 (gfc_array_c10 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_10));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_10)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -825,6 +825,11 @@ matmul_c10_avx128_fma4 (gfc_array_c10 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_10)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -837,11 +842,6 @@ matmul_c10_avx128_fma4 (gfc_array_c10 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_10));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_10)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)"}, {"sha": "6af99bec4346985b88028b6469c2d4fae5cd52d5", "filename": "libgfortran/generated/matmulavx128_c16.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmulavx128_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmulavx128_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmulavx128_c16.c?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -272,6 +272,11 @@ matmul_c16_avx128_fma3 (gfc_array_c16 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_16)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -284,11 +289,6 @@ matmul_c16_avx128_fma3 (gfc_array_c16 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_16));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_16)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -825,6 +825,11 @@ matmul_c16_avx128_fma4 (gfc_array_c16 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_16)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -837,11 +842,6 @@ matmul_c16_avx128_fma4 (gfc_array_c16 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_16));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_16)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)"}, {"sha": "0e358be89c375ae38257bd2a43b8f12274433d22", "filename": "libgfortran/generated/matmulavx128_c4.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmulavx128_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmulavx128_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmulavx128_c4.c?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -272,6 +272,11 @@ matmul_c4_avx128_fma3 (gfc_array_c4 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_4)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -284,11 +289,6 @@ matmul_c4_avx128_fma3 (gfc_array_c4 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_4));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_4)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -825,6 +825,11 @@ matmul_c4_avx128_fma4 (gfc_array_c4 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_4)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -837,11 +842,6 @@ matmul_c4_avx128_fma4 (gfc_array_c4 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_4));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_4)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)"}, {"sha": "c4416b17562b675f1f40339ddb74579fc3425e4a", "filename": "libgfortran/generated/matmulavx128_c8.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmulavx128_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmulavx128_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmulavx128_c8.c?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -272,6 +272,11 @@ matmul_c8_avx128_fma3 (gfc_array_c8 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_8)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -284,11 +289,6 @@ matmul_c8_avx128_fma3 (gfc_array_c8 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_8));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_8)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -825,6 +825,11 @@ matmul_c8_avx128_fma4 (gfc_array_c8 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_COMPLEX_8)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -837,11 +842,6 @@ matmul_c8_avx128_fma4 (gfc_array_c8 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_COMPLEX_8));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_COMPLEX_8)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)"}, {"sha": "011de3ab5c3d80ec24f6a500459b5056474b68d5", "filename": "libgfortran/generated/matmulavx128_i1.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmulavx128_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmulavx128_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmulavx128_i1.c?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -272,6 +272,11 @@ matmul_i1_avx128_fma3 (gfc_array_i1 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_1)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -284,11 +289,6 @@ matmul_i1_avx128_fma3 (gfc_array_i1 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_1));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_1)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -825,6 +825,11 @@ matmul_i1_avx128_fma4 (gfc_array_i1 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_1)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -837,11 +842,6 @@ matmul_i1_avx128_fma4 (gfc_array_i1 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_1));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_1)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)"}, {"sha": "3a8b48a670f754f3e18b64d50ee2f0e24cba7a2f", "filename": "libgfortran/generated/matmulavx128_i16.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmulavx128_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmulavx128_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmulavx128_i16.c?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -272,6 +272,11 @@ matmul_i16_avx128_fma3 (gfc_array_i16 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_16)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -284,11 +289,6 @@ matmul_i16_avx128_fma3 (gfc_array_i16 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_16));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_16)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -825,6 +825,11 @@ matmul_i16_avx128_fma4 (gfc_array_i16 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_16)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -837,11 +842,6 @@ matmul_i16_avx128_fma4 (gfc_array_i16 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_16));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_16)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)"}, {"sha": "738f64222db8d874308aa32f3df26d054c456569", "filename": "libgfortran/generated/matmulavx128_i2.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmulavx128_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmulavx128_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmulavx128_i2.c?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -272,6 +272,11 @@ matmul_i2_avx128_fma3 (gfc_array_i2 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_2)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -284,11 +289,6 @@ matmul_i2_avx128_fma3 (gfc_array_i2 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_2));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_2)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -825,6 +825,11 @@ matmul_i2_avx128_fma4 (gfc_array_i2 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_2)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -837,11 +842,6 @@ matmul_i2_avx128_fma4 (gfc_array_i2 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_2));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_2)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)"}, {"sha": "6c3bb7cd876a6080f5282156a417410b92e15e15", "filename": "libgfortran/generated/matmulavx128_i4.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmulavx128_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmulavx128_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmulavx128_i4.c?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -272,6 +272,11 @@ matmul_i4_avx128_fma3 (gfc_array_i4 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_4)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -284,11 +289,6 @@ matmul_i4_avx128_fma3 (gfc_array_i4 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_4));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_4)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -825,6 +825,11 @@ matmul_i4_avx128_fma4 (gfc_array_i4 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_4)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -837,11 +842,6 @@ matmul_i4_avx128_fma4 (gfc_array_i4 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_4));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_4)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)"}, {"sha": "58bdf2ca2424bae82f73aa115156c8f427dc2345", "filename": "libgfortran/generated/matmulavx128_i8.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmulavx128_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmulavx128_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmulavx128_i8.c?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -272,6 +272,11 @@ matmul_i8_avx128_fma3 (gfc_array_i8 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_8)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -284,11 +289,6 @@ matmul_i8_avx128_fma3 (gfc_array_i8 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_8));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_8)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -825,6 +825,11 @@ matmul_i8_avx128_fma4 (gfc_array_i8 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_INTEGER_8)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -837,11 +842,6 @@ matmul_i8_avx128_fma4 (gfc_array_i8 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_INTEGER_8));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_INTEGER_8)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)"}, {"sha": "72277faada3cc9ecee14c706e1453d0cce033850", "filename": "libgfortran/generated/matmulavx128_r10.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmulavx128_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmulavx128_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmulavx128_r10.c?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -272,6 +272,11 @@ matmul_r10_avx128_fma3 (gfc_array_r10 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_10)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -284,11 +289,6 @@ matmul_r10_avx128_fma3 (gfc_array_r10 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_10));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_10)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -825,6 +825,11 @@ matmul_r10_avx128_fma4 (gfc_array_r10 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_10)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -837,11 +842,6 @@ matmul_r10_avx128_fma4 (gfc_array_r10 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_10));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_10)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)"}, {"sha": "a6e11785299ba8af94be53fb2c90a7890a0650d0", "filename": "libgfortran/generated/matmulavx128_r16.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmulavx128_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmulavx128_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmulavx128_r16.c?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -272,6 +272,11 @@ matmul_r16_avx128_fma3 (gfc_array_r16 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_16)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -284,11 +289,6 @@ matmul_r16_avx128_fma3 (gfc_array_r16 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_16));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_16)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -825,6 +825,11 @@ matmul_r16_avx128_fma4 (gfc_array_r16 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_16)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -837,11 +842,6 @@ matmul_r16_avx128_fma4 (gfc_array_r16 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_16));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_16)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)"}, {"sha": "b981053606e935cd6aa87ca40bbd9cef16aec43f", "filename": "libgfortran/generated/matmulavx128_r4.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmulavx128_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmulavx128_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmulavx128_r4.c?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -272,6 +272,11 @@ matmul_r4_avx128_fma3 (gfc_array_r4 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_4)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -284,11 +289,6 @@ matmul_r4_avx128_fma3 (gfc_array_r4 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_4));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_4)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -825,6 +825,11 @@ matmul_r4_avx128_fma4 (gfc_array_r4 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_4)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -837,11 +842,6 @@ matmul_r4_avx128_fma4 (gfc_array_r4 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_4));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_4)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)"}, {"sha": "6392b7b1cb5f452d5b265f6bde2bbad337e0446a", "filename": "libgfortran/generated/matmulavx128_r8.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmulavx128_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fgenerated%2Fmatmulavx128_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmulavx128_r8.c?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -272,6 +272,11 @@ matmul_r8_avx128_fma3 (gfc_array_r8 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_8)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -284,11 +289,6 @@ matmul_r8_avx128_fma3 (gfc_array_r8 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_8));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_8)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)\n@@ -825,6 +825,11 @@ matmul_r8_avx128_fma4 (gfc_array_r8 * const restrict retarray,\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = (GFC_REAL_8)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -837,11 +842,6 @@ matmul_r8_avx128_fma4 (gfc_array_r8 * const restrict retarray,\n \n       t1 = malloc (t1_dim * sizeof(GFC_REAL_8));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = (GFC_REAL_8)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)"}, {"sha": "e20f9224b61c17fa0a01d95de89159487715552d", "filename": "libgfortran/m4/matmul_internal.m4", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fm4%2Fmatmul_internal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf974160054c4b8aa3f0f49084bb46521195a51/libgfortran%2Fm4%2Fmatmul_internal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fmatmul_internal.m4?ref=bbf974160054c4b8aa3f0f49084bb46521195a51", "patch": "@@ -223,6 +223,11 @@ sinclude(`matmul_asm_'rtype_code`.m4')dnl\n       b_offset = 1 + b_dim1;\n       b -= b_offset;\n \n+      /* Empty c first.  */\n+      for (j=1; j<=n; j++)\n+\tfor (i=1; i<=m; i++)\n+\t  c[i + j * c_dim1] = ('rtype_name`)0;\n+\n       /* Early exit if possible */\n       if (m == 0 || n == 0 || k == 0)\n \treturn;\n@@ -235,11 +240,6 @@ sinclude(`matmul_asm_'rtype_code`.m4')dnl\n \n       t1 = malloc (t1_dim * sizeof('rtype_name`));\n \n-      /* Empty c first.  */\n-      for (j=1; j<=n; j++)\n-\tfor (i=1; i<=m; i++)\n-\t  c[i + j * c_dim1] = ('rtype_name`)0;\n-\n       /* Start turning the crank. */\n       i1 = n;\n       for (jj = 1; jj <= i1; jj += 512)"}]}