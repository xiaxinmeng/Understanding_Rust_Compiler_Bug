{"sha": "dfe08bc4ef2810b98e0ce8ffca4155ad304e0429", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZlMDhiYzRlZjI4MTBiOThlMGNlOGZmY2E0MTU1YWQzMDRlMDQyOQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2016-10-21T12:33:01Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2016-10-21T12:33:01Z"}, "message": "make tablejump_p return the label as a rtx_insn *\n\ngcc/ChangeLog:\n\n2016-10-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* cfgcleanup.c (merge_blocks_move_successor_nojumps): Adjust.\n\t(outgoing_edges_match): Likewise.\n\t(try_crossjump_to_edge): Likewise.\n\t* cfgrtl.c (try_redirect_by_replacing_jump): Likewise.\n\t(rtl_tidy_fallthru_edge): Likewise.\n\t* rtl.h (tablejump_p): Adjust prototype.\n\t* rtlanal.c (tablejump_p): Return the label as a rtx_insn *.\n\nFrom-SVN: r241402", "tree": {"sha": "7505bb0ce717bce964eebacad7985b4354429147", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7505bb0ce717bce964eebacad7985b4354429147"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfe08bc4ef2810b98e0ce8ffca4155ad304e0429", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfe08bc4ef2810b98e0ce8ffca4155ad304e0429", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfe08bc4ef2810b98e0ce8ffca4155ad304e0429", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfe08bc4ef2810b98e0ce8ffca4155ad304e0429/comments", "author": null, "committer": null, "parents": [{"sha": "04a121a757f20a4807d47e1d0c7418145b147d69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a121a757f20a4807d47e1d0c7418145b147d69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04a121a757f20a4807d47e1d0c7418145b147d69"}], "stats": {"total": 59, "additions": 34, "deletions": 25}, "files": [{"sha": "b2582a7ecc33670db6345b0e0d3be27721c97a86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe08bc4ef2810b98e0ce8ffca4155ad304e0429/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe08bc4ef2810b98e0ce8ffca4155ad304e0429/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfe08bc4ef2810b98e0ce8ffca4155ad304e0429", "patch": "@@ -1,3 +1,13 @@\n+2016-10-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* cfgcleanup.c (merge_blocks_move_successor_nojumps): Adjust.\n+\t(outgoing_edges_match): Likewise.\n+\t(try_crossjump_to_edge): Likewise.\n+\t* cfgrtl.c (try_redirect_by_replacing_jump): Likewise.\n+\t(rtl_tidy_fallthru_edge): Likewise.\n+\t* rtl.h (tablejump_p): Adjust prototype.\n+\t* rtlanal.c (tablejump_p): Return the label as a rtx_insn *.\n+\n 2016-10-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* rtl.h (label_ref_label): New function."}, {"sha": "c67b4d707f226e56b272a913f6f7851ceae4f85f", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe08bc4ef2810b98e0ce8ffca4155ad304e0429/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe08bc4ef2810b98e0ce8ffca4155ad304e0429/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=dfe08bc4ef2810b98e0ce8ffca4155ad304e0429", "patch": "@@ -688,7 +688,7 @@ static void\n merge_blocks_move_successor_nojumps (basic_block a, basic_block b)\n {\n   rtx_insn *barrier, *real_b_end;\n-  rtx label;\n+  rtx_insn *label;\n   rtx_jump_table_data *table;\n \n   /* If we are partitioning hot/cold basic blocks, we don't want to\n@@ -709,7 +709,7 @@ merge_blocks_move_successor_nojumps (basic_block a, basic_block b)\n   /* If there is a jump table following block B temporarily add the jump table\n      to block B so that it will also be moved to the correct location.  */\n   if (tablejump_p (BB_END (b), &label, &table)\n-      && prev_active_insn (as_a<rtx_insn *> (label)) == BB_END (b))\n+      && prev_active_insn (label) == BB_END (b))\n     {\n       BB_END (b) = table;\n     }\n@@ -1697,7 +1697,7 @@ outgoing_edges_match (int mode, basic_block bb1, basic_block bb2)\n   /* Check whether there are tablejumps in the end of BB1 and BB2.\n      Return true if they are identical.  */\n     {\n-      rtx label1, label2;\n+      rtx_insn *label1, *label2;\n       rtx_jump_table_data *table1, *table2;\n \n       if (tablejump_p (BB_END (bb1), &label1, &table1)\n@@ -1994,7 +1994,7 @@ try_crossjump_to_edge (int mode, edge e1, edge e2,\n      they have been already compared for equivalence in outgoing_edges_match ()\n      so replace the references to TABLE1 by references to TABLE2.  */\n   {\n-      rtx label1, label2;\n+      rtx_insn *label1, *label2;\n       rtx_jump_table_data *table1, *table2;\n \n       if (tablejump_p (BB_END (osrc1), &label1, &table1)"}, {"sha": "813f7cee092e50efd1c03b359dde7c5b45d00b97", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe08bc4ef2810b98e0ce8ffca4155ad304e0429/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe08bc4ef2810b98e0ce8ffca4155ad304e0429/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=dfe08bc4ef2810b98e0ce8ffca4155ad304e0429", "patch": "@@ -1101,7 +1101,7 @@ try_redirect_by_replacing_jump (edge e, basic_block target, bool in_cfglayout)\n     {\n       rtx_code_label *target_label = block_label (target);\n       rtx_insn *barrier;\n-      rtx label;\n+      rtx_insn *label;\n       rtx_jump_table_data *table;\n \n       emit_jump_insn_after_noloc (targetm.gen_jump (target_label), insn);\n@@ -1773,7 +1773,7 @@ rtl_tidy_fallthru_edge (edge e)\n       && (any_uncondjump_p (q)\n \t  || single_succ_p (b)))\n     {\n-      rtx label;\n+      rtx_insn *label;\n       rtx_jump_table_data *table;\n \n       if (tablejump_p (q, &label, &table))\n@@ -1786,8 +1786,7 @@ rtl_tidy_fallthru_edge (edge e)\n \t  PUT_CODE (label, NOTE);\n \t  NOTE_KIND (label) = NOTE_INSN_DELETED_LABEL;\n \t  NOTE_DELETED_LABEL_NAME (label) = name;\n-\t  rtx_insn *lab = safe_as_a <rtx_insn *> (label);\n-\t  reorder_insns (lab, lab, PREV_INSN (q));\n+\t  reorder_insns (label, label, PREV_INSN (q));\n \t  delete_insn (table);\n \t}\n "}, {"sha": "d054c6c905d9c36ad1dee3d7e07e52cad9d4b229", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe08bc4ef2810b98e0ce8ffca4155ad304e0429/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe08bc4ef2810b98e0ce8ffca4155ad304e0429/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=dfe08bc4ef2810b98e0ce8ffca4155ad304e0429", "patch": "@@ -3040,7 +3040,7 @@ extern rtx replace_rtx (rtx, rtx, rtx, bool = false);\n extern void replace_label (rtx *, rtx, rtx, bool);\n extern void replace_label_in_insn (rtx_insn *, rtx, rtx, bool);\n extern bool rtx_referenced_p (const_rtx, const_rtx);\n-extern bool tablejump_p (const rtx_insn *, rtx *, rtx_jump_table_data **);\n+extern bool tablejump_p (const rtx_insn *, rtx_insn **, rtx_jump_table_data **);\n extern int computed_jump_p (const rtx_insn *);\n extern bool tls_referenced_p (const_rtx);\n "}, {"sha": "4e600c0de6d87b9fb80a5155f30607d547df5788", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe08bc4ef2810b98e0ce8ffca4155ad304e0429/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe08bc4ef2810b98e0ce8ffca4155ad304e0429/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=dfe08bc4ef2810b98e0ce8ffca4155ad304e0429", "patch": "@@ -3103,26 +3103,26 @@ rtx_referenced_p (const_rtx x, const_rtx body)\n    *LABELP and the jump table to *TABLEP.  LABELP and TABLEP may be NULL.  */\n \n bool\n-tablejump_p (const rtx_insn *insn, rtx *labelp, rtx_jump_table_data **tablep)\n+tablejump_p (const rtx_insn *insn, rtx_insn **labelp,\n+\t     rtx_jump_table_data **tablep)\n {\n-  rtx label;\n-  rtx_insn *table;\n-\n   if (!JUMP_P (insn))\n     return false;\n \n-  label = JUMP_LABEL (insn);\n-  if (label != NULL_RTX && !ANY_RETURN_P (label)\n-      && (table = NEXT_INSN (as_a <rtx_insn *> (label))) != NULL_RTX\n-      && JUMP_TABLE_DATA_P (table))\n-    {\n-      if (labelp)\n-\t*labelp = label;\n-      if (tablep)\n-\t*tablep = as_a <rtx_jump_table_data *> (table);\n-      return true;\n-    }\n-  return false;\n+  rtx target = JUMP_LABEL (insn);\n+  if (target == NULL_RTX || ANY_RETURN_P (target))\n+    return false;\n+\n+  rtx_insn *label = as_a<rtx_insn *> (target);\n+  rtx_insn *table = next_insn (label);\n+  if (table == NULL_RTX || !JUMP_TABLE_DATA_P (table))\n+    return false;\n+\n+  if (labelp)\n+    *labelp = label;\n+  if (tablep)\n+    *tablep = as_a <rtx_jump_table_data *> (table);\n+  return true;\n }\n \n /* A subroutine of computed_jump_p, return 1 if X contains a REG or MEM or"}]}