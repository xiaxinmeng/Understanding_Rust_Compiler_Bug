{"sha": "01005550377ff17716e6ad57c62df726877ab79f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDEwMDU1NTAzNzdmZjE3NzE2ZTZhZDU3YzYyZGY3MjY4NzdhYjc5Zg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-03T10:07:49Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-03T15:22:04Z"}, "message": "Do not assume loop header threading in backward threader.\n\nThe registry's thread_through_all_blocks() has a may_peel_loop_headers\nargument.  When refactoring the backward threader code, I removed this\nargument for the local passthru method because it was always TRUE.  This\nmay not necessarily be true in the future, if the backward threader is\ncalled from another context.  This patch removes the default definition,\nin favor of an argument that is exactly the same as the identically\nnamed function in tree-ssa-threadupdate.c.  I think this also makes it\nless confusing when looking at both methods across the source base.\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* tree-ssa-threadbackward.c (back_threader::thread_through_all_blocks):\n\tAdd may_peel_loop_headers.\n\t(back_threader_registry::thread_through_all_blocks): Same.\n\t(try_thread_blocks): Pass may_peel_loop_headers argument.\n\t(pass_early_thread_jumps::execute): Same.", "tree": {"sha": "51d3c834eb82b6fe444f28e1f473d79e85d2cf22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51d3c834eb82b6fe444f28e1f473d79e85d2cf22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01005550377ff17716e6ad57c62df726877ab79f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01005550377ff17716e6ad57c62df726877ab79f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01005550377ff17716e6ad57c62df726877ab79f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01005550377ff17716e6ad57c62df726877ab79f/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62099645c204f64cbf2546fc7c2cd0428c4990e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62099645c204f64cbf2546fc7c2cd0428c4990e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62099645c204f64cbf2546fc7c2cd0428c4990e0"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "2fa22f8e328a141f7dd33063b88434bec37562d2", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01005550377ff17716e6ad57c62df726877ab79f/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01005550377ff17716e6ad57c62df726877ab79f/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=01005550377ff17716e6ad57c62df726877ab79f", "patch": "@@ -53,7 +53,7 @@ class back_threader_registry\n public:\n   back_threader_registry (int max_allowable_paths);\n   bool register_path (const vec<basic_block> &, edge taken);\n-  bool thread_through_all_blocks ();\n+  bool thread_through_all_blocks (bool may_peel_loop_headers);\n private:\n   jump_thread_path_registry m_lowlevel_registry;\n   const int m_max_allowable_paths;\n@@ -80,7 +80,7 @@ class back_threader\n   back_threader (bool speed_p);\n   ~back_threader ();\n   void maybe_thread_block (basic_block bb);\n-  bool thread_through_all_blocks ();\n+  bool thread_through_all_blocks (bool may_peel_loop_headers);\n private:\n   void find_paths (basic_block bb, tree name);\n   void maybe_register_path (edge taken_edge);\n@@ -497,9 +497,9 @@ back_threader::maybe_thread_block (basic_block bb)\n // Perform the actual jump threading for the all queued paths.\n \n bool\n-back_threader::thread_through_all_blocks ()\n+back_threader::thread_through_all_blocks (bool may_peel_loop_headers)\n {\n-  return m_registry.thread_through_all_blocks ();\n+  return m_registry.thread_through_all_blocks (may_peel_loop_headers);\n }\n \n // Dump a sequence of BBs through the CFG.\n@@ -553,9 +553,9 @@ back_threader_registry::back_threader_registry (int max_allowable_paths)\n }\n \n bool\n-back_threader_registry::thread_through_all_blocks ()\n+back_threader_registry::thread_through_all_blocks (bool may_peel_loop_headers)\n {\n-  return m_lowlevel_registry.thread_through_all_blocks (true);\n+  return m_lowlevel_registry.thread_through_all_blocks (may_peel_loop_headers);\n }\n \n /* Examine jump threading path PATH and return TRUE if it is profitable to\n@@ -947,7 +947,7 @@ try_thread_blocks (function *fun)\n       if (EDGE_COUNT (bb->succs) > 1)\n \tthreader.maybe_thread_block (bb);\n     }\n-  return threader.thread_through_all_blocks ();\n+  return threader.thread_through_all_blocks (/*peel_loop_headers=*/true);\n }\n \n unsigned int\n@@ -1016,7 +1016,7 @@ pass_early_thread_jumps::execute (function *fun)\n       if (EDGE_COUNT (bb->succs) > 1)\n \tthreader.maybe_thread_block (bb);\n     }\n-  threader.thread_through_all_blocks ();\n+  threader.thread_through_all_blocks (/*peel_loop_headers=*/true);\n \n   loop_optimizer_finalize ();\n   return 0;"}]}