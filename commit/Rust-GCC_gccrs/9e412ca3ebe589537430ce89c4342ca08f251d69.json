{"sha": "9e412ca3ebe589537430ce89c4342ca08f251d69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU0MTJjYTNlYmU1ODk1Mzc0MzBjZTg5YzQzNDJjYTA4ZjI1MWQ2OQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2012-04-21T18:55:18Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2012-04-21T18:55:18Z"}, "message": "re PR bootstrap/53021 (bootstrap failure on Linux/ia32)\n\ngcc/\n\tPR bootstrap/53021\n\t* rtl.def (ADDRESS): Use \"i\" rather than \"w\".\n\t* rtl.h (find_base_term): Delete.\n\t(may_be_sp_based_p): Declare.\n\t* rtl.c (rtx_code_size): Remove ADDRESS special case.\n\t* alias.h (UNIQUE_BASE_VALUE_SP, UNIQUE_BASE_VALUE_ARGP)\n\t(UNIQUE_BASE_VALUE_FP, UNIQUE_BASE_VALUE_HFP): Move to...\n\t* alias.c: ...here.\n\t(find_base_term): Make static.\n\t(may_be_sp_based_p): New function.\n\t* dse.c (record_store): Use it.\n\t* store-motion.c (store_killed_in_insn): Likewise.\n\nFrom-SVN: r186657", "tree": {"sha": "b0d6f2ebda9f50cb79a963c6fdd93ec04cda0025", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0d6f2ebda9f50cb79a963c6fdd93ec04cda0025"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e412ca3ebe589537430ce89c4342ca08f251d69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e412ca3ebe589537430ce89c4342ca08f251d69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e412ca3ebe589537430ce89c4342ca08f251d69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e412ca3ebe589537430ce89c4342ca08f251d69/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1410c222604e2182f74242026fd924c717ced000", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1410c222604e2182f74242026fd924c717ced000", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1410c222604e2182f74242026fd924c717ced000"}], "stats": {"total": 65, "additions": 40, "deletions": 25}, "files": [{"sha": "9133f1bb7bfaf0db98626c628cc16cd01467de91", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e412ca3ebe589537430ce89c4342ca08f251d69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e412ca3ebe589537430ce89c4342ca08f251d69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e412ca3ebe589537430ce89c4342ca08f251d69", "patch": "@@ -1,3 +1,18 @@\n+2012-04-21  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR bootstrap/53021\n+\t* rtl.def (ADDRESS): Use \"i\" rather than \"w\".\n+\t* rtl.h (find_base_term): Delete.\n+\t(may_be_sp_based_p): Declare.\n+\t* rtl.c (rtx_code_size): Remove ADDRESS special case.\n+\t* alias.h (UNIQUE_BASE_VALUE_SP, UNIQUE_BASE_VALUE_ARGP)\n+\t(UNIQUE_BASE_VALUE_FP, UNIQUE_BASE_VALUE_HFP): Move to...\n+\t* alias.c: ...here.\n+\t(find_base_term): Make static.\n+\t(may_be_sp_based_p): New function.\n+\t* dse.c (record_store): Use it.\n+\t* store-motion.c (store_killed_in_insn): Likewise.\n+\n 2012-04-21  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* fold-const.c (fold_checksum_tree): Fix VECTOR_CST case."}, {"sha": "8366f9c3a5e16aa4919b0e64efda645f1cc13c8a", "filename": "gcc/alias.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e412ca3ebe589537430ce89c4342ca08f251d69/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e412ca3ebe589537430ce89c4342ca08f251d69/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=9e412ca3ebe589537430ce89c4342ca08f251d69", "patch": "@@ -228,6 +228,13 @@ static int unique_id;\n    array.  */\n static GTY((deletable)) VEC(rtx,gc) *old_reg_base_value;\n \n+/* Values of XINT (address, 0) of Pmode ADDRESS rtxes for special\n+   registers.  */\n+#define UNIQUE_BASE_VALUE_SP\t-1\n+#define UNIQUE_BASE_VALUE_ARGP\t-2\n+#define UNIQUE_BASE_VALUE_FP\t-3\n+#define UNIQUE_BASE_VALUE_HFP\t-4\n+\n #define static_reg_base_value \\\n   (this_target_rtl->x_static_reg_base_value)\n \n@@ -1584,7 +1591,7 @@ rtx_equal_for_memref_p (const_rtx x, const_rtx y)\n   return 1;\n }\n \n-rtx\n+static rtx\n find_base_term (rtx x)\n {\n   cselib_val *val;\n@@ -1740,6 +1747,16 @@ find_base_term (rtx x)\n     }\n }\n \n+/* Return true if accesses to address X may alias accesses based\n+   on the stack pointer.  */\n+\n+bool\n+may_be_sp_based_p (rtx x)\n+{\n+  rtx base = find_base_term (x);\n+  return !base || base == static_reg_base_value[STACK_POINTER_REGNUM];\n+}\n+\n /* Return 0 if the addresses X and Y are known to point to different\n    objects, 1 if they might be pointers to the same object.  */\n "}, {"sha": "9e0d1872658d506a78d02d0602ce3f2cb77aab0d", "filename": "gcc/alias.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e412ca3ebe589537430ce89c4342ca08f251d69/gcc%2Falias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e412ca3ebe589537430ce89c4342ca08f251d69/gcc%2Falias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.h?ref=9e412ca3ebe589537430ce89c4342ca08f251d69", "patch": "@@ -51,11 +51,4 @@ extern int nonoverlapping_memrefs_p (const_rtx, const_rtx, bool);\n    memory barriers, including an address of SCRATCH.  */\n #define ALIAS_SET_MEMORY_BARRIER\t((alias_set_type) -1)\n \n-/* Values of XWINT (address, 0) of Pmode ADDRESS rtxes for special\n-   registers.  */\n-#define UNIQUE_BASE_VALUE_SP\t-1\n-#define UNIQUE_BASE_VALUE_ARGP\t-2\n-#define UNIQUE_BASE_VALUE_FP\t-3\n-#define UNIQUE_BASE_VALUE_HFP\t-4\n-\n #endif /* GCC_ALIAS_H */"}, {"sha": "19d938301bb989e82040c198fd72ba0e1c17190e", "filename": "gcc/dse.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e412ca3ebe589537430ce89c4342ca08f251d69/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e412ca3ebe589537430ce89c4342ca08f251d69/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=9e412ca3ebe589537430ce89c4342ca08f251d69", "patch": "@@ -1499,11 +1499,7 @@ record_store (rtx body, bb_info_t bb_info)\n     }\n   else\n     {\n-      rtx base_term = find_base_term (XEXP (mem, 0));\n-      if (!base_term\n-\t  || (GET_CODE (base_term) == ADDRESS\n-\t      && GET_MODE (base_term) == Pmode\n-\t      && XWINT (base_term, 0) == UNIQUE_BASE_VALUE_SP))\n+      if (may_be_sp_based_p (XEXP (mem, 0)))\n \tinsn_info->stack_pointer_based = true;\n       insn_info->contains_cselib_groups = true;\n "}, {"sha": "ec48839f61e1ac137eda3b15d71f8f4917193f3c", "filename": "gcc/rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e412ca3ebe589537430ce89c4342ca08f251d69/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e412ca3ebe589537430ce89c4342ca08f251d69/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=9e412ca3ebe589537430ce89c4342ca08f251d69", "patch": "@@ -111,7 +111,7 @@ const enum rtx_class rtx_class[NUM_RTX_CODE] = {\n const unsigned char rtx_code_size[NUM_RTX_CODE] = {\n #define DEF_RTL_EXPR(ENUM, NAME, FORMAT, CLASS)\t\t\t\t\\\n   (((ENUM) == CONST_INT || (ENUM) == CONST_DOUBLE\t\t\t\\\n-    || (ENUM) == CONST_FIXED || (ENUM) == ADDRESS)\t\t\t\\\n+    || (ENUM) == CONST_FIXED)\t\t\t\t\t\t\\\n    ? RTX_HDR_SIZE + (sizeof FORMAT - 1) * sizeof (HOST_WIDE_INT)\t\\\n    : RTX_HDR_SIZE + (sizeof FORMAT - 1) * sizeof (rtunion)),\n "}, {"sha": "955e8e4709b64e892cd3a2055e32e01dccca8179", "filename": "gcc/rtl.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e412ca3ebe589537430ce89c4342ca08f251d69/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e412ca3ebe589537430ce89c4342ca08f251d69/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=9e412ca3ebe589537430ce89c4342ca08f251d69", "patch": "@@ -110,7 +110,7 @@ DEF_RTL_EXPR(INSN_LIST, \"insn_list\", \"ue\", RTX_EXTRA)\n DEF_RTL_EXPR(SEQUENCE, \"sequence\", \"E\", RTX_EXTRA)\n \n /* Represents a non-global base address.  This is only used in alias.c.  */\n-DEF_RTL_EXPR(ADDRESS, \"address\", \"w\", RTX_EXTRA)\n+DEF_RTL_EXPR(ADDRESS, \"address\", \"i\", RTX_EXTRA)\n \n /* ----------------------------------------------------------------------\n    Expression types used for things in the instruction chain."}, {"sha": "1da1792d1a31d72a429b583066701712a69527a6", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e412ca3ebe589537430ce89c4342ca08f251d69/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e412ca3ebe589537430ce89c4342ca08f251d69/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=9e412ca3ebe589537430ce89c4342ca08f251d69", "patch": "@@ -2597,7 +2597,7 @@ extern void init_alias_analysis (void);\n extern void end_alias_analysis (void);\n extern void vt_equate_reg_base_value (const_rtx, const_rtx);\n extern bool memory_modified_in_insn_p (const_rtx, const_rtx);\n-extern rtx find_base_term (rtx);\n+extern bool may_be_sp_based_p (rtx);\n extern rtx gen_hard_reg_clobber (enum machine_mode, unsigned int);\n extern rtx get_reg_known_value (unsigned int);\n extern bool get_reg_known_equiv_p (unsigned int);"}, {"sha": "e00cb16d16f690e50f44e56ab175f9ef35b60173", "filename": "gcc/store-motion.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e412ca3ebe589537430ce89c4342ca08f251d69/gcc%2Fstore-motion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e412ca3ebe589537430ce89c4342ca08f251d69/gcc%2Fstore-motion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstore-motion.c?ref=9e412ca3ebe589537430ce89c4342ca08f251d69", "patch": "@@ -395,7 +395,7 @@ store_killed_in_pat (const_rtx x, const_rtx pat, int after)\n static bool\n store_killed_in_insn (const_rtx x, const_rtx x_regs, const_rtx insn, int after)\n {\n-  const_rtx reg, base, note, pat;\n+  const_rtx reg, note, pat;\n \n   if (! NONDEBUG_INSN_P (insn))\n     return false;\n@@ -410,14 +410,8 @@ store_killed_in_insn (const_rtx x, const_rtx x_regs, const_rtx insn, int after)\n       /* But even a const call reads its parameters.  Check whether the\n \t base of some of registers used in mem is stack pointer.  */\n       for (reg = x_regs; reg; reg = XEXP (reg, 1))\n-\t{\n-\t  base = find_base_term (XEXP (reg, 0));\n-\t  if (!base\n-\t      || (GET_CODE (base) == ADDRESS\n-\t\t  && GET_MODE (base) == Pmode\n-\t\t  && XEXP (base, 0) == stack_pointer_rtx))\n-\t    return true;\n-\t}\n+\tif (may_be_sp_based_p (XEXP (reg, 0)))\n+\t  return true;\n \n       return false;\n     }"}]}