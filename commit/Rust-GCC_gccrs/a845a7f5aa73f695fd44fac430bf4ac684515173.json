{"sha": "a845a7f5aa73f695fd44fac430bf4ac684515173", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg0NWE3ZjVhYTczZjY5NWZkNDRmYWM0MzBiZjRhYzY4NDUxNTE3Mw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2012-05-01T21:25:15Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-05-01T21:25:15Z"}, "message": "re PR c/37303 (const compound initializers in structs are written to .data instead of .rodata)\n\ngcc/:\n\tPR c/37303\n\t* c-decl.c (build_compound_literal): Make the decl readonly if it\n\tan array of a readonly type.\n\t* gimplify.c (gimplify_compound_literal_expr): Add fallback\n\tparameter.  Change all callers.  If the decl is not addressable\n\tand is not an l-value, make it readonly.\ngcc/testsuite:\n\tPR c/37303\n\t* gcc.dg/pr37303.c: New test.\n\nFrom-SVN: r187027", "tree": {"sha": "ed944aa62023941006f92af1582be1c26ecce946", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed944aa62023941006f92af1582be1c26ecce946"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a845a7f5aa73f695fd44fac430bf4ac684515173", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a845a7f5aa73f695fd44fac430bf4ac684515173", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a845a7f5aa73f695fd44fac430bf4ac684515173", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a845a7f5aa73f695fd44fac430bf4ac684515173/comments", "author": null, "committer": null, "parents": [{"sha": "b7a9facb2c4308b738b0785a291ae31f02d30b76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7a9facb2c4308b738b0785a291ae31f02d30b76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7a9facb2c4308b738b0785a291ae31f02d30b76"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "5cf6a8ff960eaa5280a6ddd888cbde20413fe55b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a845a7f5aa73f695fd44fac430bf4ac684515173/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a845a7f5aa73f695fd44fac430bf4ac684515173/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a845a7f5aa73f695fd44fac430bf4ac684515173", "patch": "@@ -1,3 +1,12 @@\n+2012-05-01  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR c/37303\n+\t* c-decl.c (build_compound_literal): Make the decl readonly if it\n+\tan array of a readonly type.\n+\t* gimplify.c (gimplify_compound_literal_expr): Add fallback\n+\tparameter.  Change all callers.  If the decl is not addressable\n+\tand is not an l-value, make it readonly.\n+\n 2012-05-01  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* ira.c (allocated_reg_info_size): New static variable."}, {"sha": "158b3ad0f195116ed7b7a4fca93451b465551fb7", "filename": "gcc/c-decl.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a845a7f5aa73f695fd44fac430bf4ac684515173/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a845a7f5aa73f695fd44fac430bf4ac684515173/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=a845a7f5aa73f695fd44fac430bf4ac684515173", "patch": "@@ -4622,7 +4622,9 @@ build_compound_literal (location_t loc, tree type, tree init, bool non_const)\n   TREE_USED (decl) = 1;\n   DECL_READ_P (decl) = 1;\n   TREE_TYPE (decl) = type;\n-  TREE_READONLY (decl) = TYPE_READONLY (type);\n+  TREE_READONLY (decl) = (TYPE_READONLY (type)\n+\t\t\t  || (TREE_CODE (type) == ARRAY_TYPE\n+\t\t\t      && TYPE_READONLY (TREE_TYPE (type))));\n   store_init_value (loc, decl, init, NULL_TREE);\n \n   if (TREE_CODE (type) == ARRAY_TYPE && !COMPLETE_TYPE_P (type))"}, {"sha": "9c58a38b927ec7f7c84efd71b50482fb674c99e0", "filename": "gcc/gimplify.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a845a7f5aa73f695fd44fac430bf4ac684515173/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a845a7f5aa73f695fd44fac430bf4ac684515173/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=a845a7f5aa73f695fd44fac430bf4ac684515173", "patch": "@@ -3756,7 +3756,8 @@ rhs_predicate_for (tree lhs)\n    decl instead.  */\n \n static enum gimplify_status\n-gimplify_compound_literal_expr (tree *expr_p, gimple_seq *pre_p)\n+gimplify_compound_literal_expr (tree *expr_p, gimple_seq *pre_p,\n+\t\t\t\tfallback_t fallback)\n {\n   tree decl_s = COMPOUND_LITERAL_EXPR_DECL_EXPR (*expr_p);\n   tree decl = DECL_EXPR_DECL (decl_s);\n@@ -3775,6 +3776,12 @@ gimplify_compound_literal_expr (tree *expr_p, gimple_seq *pre_p)\n       && !needs_to_live_in_memory (decl))\n     DECL_GIMPLE_REG_P (decl) = 1;\n \n+  /* If the decl is not addressable, then it is being used in some\n+     expression or on the right hand side of a statement, and it can\n+     be put into a readonly data section.  */\n+  if (!TREE_ADDRESSABLE (decl) && (fallback & fb_lvalue) == 0)\n+    TREE_READONLY (decl) = 1;\n+\n   /* This decl isn't mentioned in the enclosing block, so add it to the\n      list of temps.  FIXME it seems a bit of a kludge to say that\n      anonymous artificial vars aren't pushed, but everything else is.  */\n@@ -7071,7 +7078,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t  break;\n \n \tcase COMPOUND_LITERAL_EXPR:\n-\t  ret = gimplify_compound_literal_expr (expr_p, pre_p);\n+\t  ret = gimplify_compound_literal_expr (expr_p, pre_p, fallback);\n \t  break;\n \n \tcase MODIFY_EXPR:"}, {"sha": "8f32793b77da32c04e76fb79814f2bc104fb4ba8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a845a7f5aa73f695fd44fac430bf4ac684515173/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a845a7f5aa73f695fd44fac430bf4ac684515173/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a845a7f5aa73f695fd44fac430bf4ac684515173", "patch": "@@ -1,3 +1,8 @@\n+2012-05-01  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR c/37303\n+\t* gcc.dg/pr37303.c: New test.\n+\n 2012-05-01  Richard Henderson  <rth@redhat.com>\n \n \t* lib/target-supports.exp"}, {"sha": "434fc9d24adb34e9d3421b8d6114d87998454f1b", "filename": "gcc/testsuite/gcc.dg/pr37303.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a845a7f5aa73f695fd44fac430bf4ac684515173/gcc%2Ftestsuite%2Fgcc.dg%2Fpr37303.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a845a7f5aa73f695fd44fac430bf4ac684515173/gcc%2Ftestsuite%2Fgcc.dg%2Fpr37303.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr37303.c?ref=a845a7f5aa73f695fd44fac430bf4ac684515173", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile { target *-*-elf* *-*-linux-gnu* } } */\n+/* { dg-options \"-std=c99\" }\n+/* { dg-final { scan-assembler \"rodata\" } } */\n+\n+struct S { const int *x; } s = { (const int[]){1, 2, 3} };"}]}