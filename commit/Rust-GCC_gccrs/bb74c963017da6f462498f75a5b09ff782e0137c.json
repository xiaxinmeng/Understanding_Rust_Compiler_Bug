{"sha": "bb74c963017da6f462498f75a5b09ff782e0137c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI3NGM5NjMwMTdkYTZmNDYyNDk4Zjc1YTViMDlmZjc4MmUwMTM3Yw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-08-17T22:23:49Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-08-17T22:23:49Z"}, "message": "cpperror.c (print_location): Don't take a file name; use the line map instead.\n\n\t* cpperror.c (print_location):  Don't take a file name; use the\n\tline map instead.\n\t(_cpp_begin_message): Similarly.\n\t(cpp_ice, cpp_fatal, cpp_error, cpp_error_with_line, cpp_warning,\n\tcpp_warning_with_line, cpp_pedwarn, cpp_pedwarn_with_line): Update.\n\t(cpp_pedwarn_with_file_and_line): Remove.\n\t* cppfiles.c (stack_include_file): Update; set filename to stdin\n\there when appropriate.\n\t* cpphash.h (struct cpp_buffer): Remove nominal_fname.\n\t(_cpp_begin_message): Don't take a file name.\n\t* cppinit.c: Add comment.\n\t* cpplex.c: Fix end-of-directive indicator.\n\t* cpplib.c: Don't include intl.h.\n\t(run_directive, do_diagnostic): Update.\n\t(do_line): Update to not use nominal_fname.\n\t(cpp_push_buffer): Don't take a filename.\n\t* cpplib.h (struct ht): Remove.\n\t(cpp_push_buffer): Don't take a filename.\n\t(cpp_pedwarn_with_file_and_line): Remove.\n\t* cppmacro.c (struct cpp_macro): Remove file.\n\t(builtin_macro): Update.\n\t(_cpp_create_definition): Update.\n\t* cppmain.c: Correct comment.\n\t* fix-header.c (read_scan_file): Update.\n\nFrom-SVN: r44986", "tree": {"sha": "1119c95193138295f135f3d1be8fd1f94c827ca3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1119c95193138295f135f3d1be8fd1f94c827ca3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb74c963017da6f462498f75a5b09ff782e0137c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb74c963017da6f462498f75a5b09ff782e0137c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb74c963017da6f462498f75a5b09ff782e0137c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb74c963017da6f462498f75a5b09ff782e0137c/comments", "author": null, "committer": null, "parents": [{"sha": "c009f01f06d52c7f4e44e666688e7e88409a501c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c009f01f06d52c7f4e44e666688e7e88409a501c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c009f01f06d52c7f4e44e666688e7e88409a501c"}], "stats": {"total": 219, "additions": 85, "deletions": 134}, "files": [{"sha": "4272041fdd117f3dc22288dd8cfc74b9e488bf73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb74c963017da6f462498f75a5b09ff782e0137c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb74c963017da6f462498f75a5b09ff782e0137c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb74c963017da6f462498f75a5b09ff782e0137c", "patch": "@@ -1,3 +1,30 @@\n+2001-08-17  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cpperror.c (print_location):  Don't take a file name; use the\n+\tline map instead.\n+\t(_cpp_begin_message): Similarly.\n+\t(cpp_ice, cpp_fatal, cpp_error, cpp_error_with_line, cpp_warning,\n+\tcpp_warning_with_line, cpp_pedwarn, cpp_pedwarn_with_line): Update.\n+\t(cpp_pedwarn_with_file_and_line): Remove.\n+\t* cppfiles.c (stack_include_file): Update; set filename to stdin\n+\there when appropriate.\n+\t* cpphash.h (struct cpp_buffer): Remove nominal_fname.\n+\t(_cpp_begin_message): Don't take a file name.\n+\t* cppinit.c: Add comment.\n+\t* cpplex.c: Fix end-of-directive indicator.\n+\t* cpplib.c: Don't include intl.h.\n+\t(run_directive, do_diagnostic): Update.\n+\t(do_line): Update to not use nominal_fname.\n+\t(cpp_push_buffer): Don't take a filename.\n+\t* cpplib.h (struct ht): Remove.\n+\t(cpp_push_buffer): Don't take a filename.\n+\t(cpp_pedwarn_with_file_and_line): Remove.\n+\t* cppmacro.c (struct cpp_macro): Remove file.\n+\t(builtin_macro): Update.\n+\t(_cpp_create_definition): Update.\n+\t* cppmain.c: Correct comment.\n+\t* fix-header.c (read_scan_file): Update.\n+\n 2001-08-17  Kazu Hirata  <kazu@hxi.com>\n \n \t* sbitmap.c: Fix comment formatting."}, {"sha": "84d1c837e23c7b1f40a0b182b9ec2565ca89eca4", "filename": "gcc/cpperror.c", "status": "modified", "additions": 25, "deletions": 82, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb74c963017da6f462498f75a5b09ff782e0137c/gcc%2Fcpperror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb74c963017da6f462498f75a5b09ff782e0137c/gcc%2Fcpperror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpperror.c?ref=bb74c963017da6f462498f75a5b09ff782e0137c", "patch": "@@ -30,7 +30,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #include \"intl.h\"\n \n static void print_location\t\tPARAMS ((cpp_reader *,\n-\t\t\t\t\t\t const char *,\n \t\t\t\t\t\t const cpp_lexer_pos *));\n \n /* Don't remove the blank before do, as otherwise the exgettext\n@@ -39,9 +38,8 @@ static void print_location\t\tPARAMS ((cpp_reader *,\n  do { vfprintf (stderr, _(msgid), ap); putc ('\\n', stderr); } while (0)\n \n static void\n-print_location (pfile, filename, pos)\n+print_location (pfile, pos)\n      cpp_reader *pfile;\n-     const char *filename;\n      const cpp_lexer_pos *pos;\n {\n   cpp_buffer *buffer = pfile->buffer;\n@@ -50,47 +48,28 @@ print_location (pfile, filename, pos)\n     fprintf (stderr, \"%s: \", progname);\n   else\n     {\n-      unsigned int line, col = 0;\n-      enum cpp_buffer_type type = buffer->type;\n-\n-      /* For _Pragma buffers, we want to print the location as\n-\t \"foo.c:5:8: _Pragma:\", where foo.c is the containing buffer.\n-\t For diagnostics relating to command line options, we want to\n-\t print \"<command line>:\" with no line number.  */\n-      if (type == BUF_CL_OPTION || type == BUF_BUILTIN)\n-\tline = 0;\n-      else\n-\t{\n-\t  const struct line_map *map;\n-\n-\t  if (type == BUF_PRAGMA)\n-\t    buffer = buffer->prev;\n-\n-\t  if (pos == 0)\n-\t    pos = cpp_get_line (pfile);\n-\t  map = lookup_line (&pfile->line_maps, pos->line);\n-\t  line = SOURCE_LINE (map, pos->line);\n-\t  if (filename == 0)\n-\t    filename = map->to_file;\n+      unsigned int line, col;\n+      const struct line_map *map;\n \n-\t  col = pos->col;\n-\t  if (col == 0)\n-\t    col = 1;\n+      if (pos == 0)\n+\tpos = cpp_get_line (pfile);\n+      map = lookup_line (&pfile->line_maps, pos->line);\n \n-\t  print_containing_files (&pfile->line_maps, map);\n-\t}\n+      print_containing_files (&pfile->line_maps, map);\n \n-      if (filename == 0)\n-\tfilename = buffer->nominal_fname;\n+      line = SOURCE_LINE (map, pos->line);\n+      col = pos->col;\n+      if (col == 0)\n+\tcol = 1;\n \n       if (line == 0)\n-\tfprintf (stderr, \"%s:\", filename);\n+\tfprintf (stderr, \"%s:\", map->to_file);\n       else if (CPP_OPTION (pfile, show_column) == 0)\n-\tfprintf (stderr, \"%s:%u:\", filename, line);\n+\tfprintf (stderr, \"%s:%u:\", map->to_file, line);\n       else\n-\tfprintf (stderr, \"%s:%u:%u:\", filename, line, col);\n+\tfprintf (stderr, \"%s:%u:%u:\", map->to_file, line, col);\n \n-      if (type == BUF_PRAGMA)\n+      if (buffer->type == BUF_PRAGMA)\n \tfprintf (stderr, \"_Pragma:\");\n       fputc (' ', stderr);\n     }\n@@ -101,10 +80,9 @@ print_location (pfile, filename, pos)\n    If it returns 0, this error has been suppressed.  */\n \n int\n-_cpp_begin_message (pfile, code, file, pos)\n+_cpp_begin_message (pfile, code, pos)\n      cpp_reader *pfile;\n      enum error_type code;\n-     const char *file;\n      const cpp_lexer_pos *pos;\n {\n   int is_warning = 0;\n@@ -149,7 +127,7 @@ _cpp_begin_message (pfile, code, file, pos)\n       break;\n     }\n \n-  print_location (pfile, file, pos);\n+  print_location (pfile, pos);\n   if (is_warning)\n     fputs (_(\"warning: \"), stderr);\n \n@@ -177,7 +155,7 @@ cpp_ice VPARAMS ((cpp_reader *pfile, const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  if (_cpp_begin_message (pfile, ICE, NULL, 0))\n+  if (_cpp_begin_message (pfile, ICE, 0))\n     v_message (msgid, ap);\n   va_end(ap);\n }\n@@ -204,7 +182,7 @@ cpp_fatal VPARAMS ((cpp_reader *pfile, const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  if (_cpp_begin_message (pfile, FATAL, NULL, 0))\n+  if (_cpp_begin_message (pfile, FATAL, 0))\n     v_message (msgid, ap);\n   va_end(ap);\n }\n@@ -225,7 +203,7 @@ cpp_error VPARAMS ((cpp_reader * pfile, const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  if (_cpp_begin_message (pfile, ERROR, NULL, 0))\n+  if (_cpp_begin_message (pfile, ERROR, 0))\n     v_message (msgid, ap);\n   va_end(ap);\n }\n@@ -254,7 +232,7 @@ cpp_error_with_line VPARAMS ((cpp_reader *pfile, int line, int column,\n \n   pos.line = line;\n   pos.col = column;\n-  if (_cpp_begin_message (pfile, ERROR, NULL, &pos))\n+  if (_cpp_begin_message (pfile, ERROR, &pos))\n     v_message (msgid, ap);\n   va_end(ap);\n }\n@@ -284,7 +262,7 @@ cpp_warning VPARAMS ((cpp_reader * pfile, const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  if (_cpp_begin_message (pfile, WARNING, NULL, 0))\n+  if (_cpp_begin_message (pfile, WARNING, 0))\n     v_message (msgid, ap);\n   va_end(ap);\n }\n@@ -313,7 +291,7 @@ cpp_warning_with_line VPARAMS ((cpp_reader * pfile, int line, int column,\n \n   pos.line = line;\n   pos.col = column;\n-  if (_cpp_begin_message (pfile, WARNING, NULL, &pos))\n+  if (_cpp_begin_message (pfile, WARNING, &pos))\n     v_message (msgid, ap);\n   va_end(ap);\n }\n@@ -334,7 +312,7 @@ cpp_pedwarn VPARAMS ((cpp_reader * pfile, const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  if (_cpp_begin_message (pfile, PEDWARN, NULL, 0))\n+  if (_cpp_begin_message (pfile, PEDWARN, 0))\n     v_message (msgid, ap);\n   va_end(ap);\n }\n@@ -363,42 +341,7 @@ cpp_pedwarn_with_line VPARAMS ((cpp_reader * pfile, int line, int column,\n \n   pos.line = line;\n   pos.col = column;\n-  if (_cpp_begin_message (pfile, PEDWARN, NULL, &pos))\n-    v_message (msgid, ap);\n-  va_end(ap);\n-}\n-\n-/* Report a warning (or an error if pedantic_errors)\n-   giving specified file name and line number, not current.  */\n-\n-void\n-cpp_pedwarn_with_file_and_line VPARAMS ((cpp_reader *pfile,\n-\t\t\t\t\t const char *file, int line, int col,\n-\t\t\t\t\t const char *msgid, ...))\n-{\n-#ifndef ANSI_PROTOTYPES\n-  cpp_reader *pfile;\n-  const char *file;\n-  int line;\n-  int col;\n-  const char *msgid;\n-#endif\n-  va_list ap;\n-  cpp_lexer_pos pos;\n-  \n-  VA_START (ap, msgid);\n-\n-#ifndef ANSI_PROTOTYPES\n-  pfile = va_arg (ap, cpp_reader *);\n-  file = va_arg (ap, const char *);\n-  line = va_arg (ap, int);\n-  col = va_arg (ap, int);\n-  msgid = va_arg (ap, const char *);\n-#endif\n-\n-  pos.line = line;\n-  pos.col = col;\n-  if (_cpp_begin_message (pfile, PEDWARN, file, &pos))\n+  if (_cpp_begin_message (pfile, PEDWARN, &pos))\n     v_message (msgid, ap);\n   va_end(ap);\n }"}, {"sha": "237e84f024a629b8516dfc290cb3c1cdf07b00c3", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb74c963017da6f462498f75a5b09ff782e0137c/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb74c963017da6f462498f75a5b09ff782e0137c/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=bb74c963017da6f462498f75a5b09ff782e0137c", "patch": "@@ -287,6 +287,7 @@ stack_include_file (pfile, inc)\n   size_t len = 0;\n   cpp_buffer *fp;\n   int sysp, deps_sysp;\n+  const char *filename;\n \n   /* We'll try removing deps_sysp after the release of 3.0.  */\n   deps_sysp = pfile->system_include_depth != 0;\n@@ -326,7 +327,7 @@ stack_include_file (pfile, inc)\n     }\n \n   /* Push a buffer.  */\n-  fp = cpp_push_buffer (pfile, inc->buffer, len, BUF_FILE, inc->name, 0);\n+  fp = cpp_push_buffer (pfile, inc->buffer, len, BUF_FILE, 0);\n   fp->inc = inc;\n   fp->inc->refcnt++;\n \n@@ -336,7 +337,10 @@ stack_include_file (pfile, inc)\n   pfile->include_depth++;\n \n   /* Generate the call back.  */\n-  _cpp_do_file_change (pfile, LC_ENTER, fp->nominal_fname, 1, sysp);\n+  filename = inc->name;\n+  if (*filename == '\\0')\n+    filename = _(\"<stdin>\");\n+  _cpp_do_file_change (pfile, LC_ENTER, filename, 1, sysp);\n }\n \n /* Read the file referenced by INC into the file cache."}, {"sha": "0a24f4d6c5c873a92e7b27c6da6bce4a4e959e97", "filename": "gcc/cpphash.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb74c963017da6f462498f75a5b09ff782e0137c/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb74c963017da6f462498f75a5b09ff782e0137c/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=bb74c963017da6f462498f75a5b09ff782e0137c", "patch": "@@ -176,9 +176,6 @@ struct cpp_buffer\n \n   const unsigned char *buf;\t /* entire buffer */\n \n-  /* Filename specified with #line command.  */\n-  const char *nominal_fname;\n-\n   /* Pointer into the include table.  Used for include_next and\n      to record control macros. */\n   struct include_file *inc;\n@@ -375,7 +372,7 @@ extern unsigned char _cpp_trigraph_map[UCHAR_MAX + 1];\n /* In cpperror.c  */\n enum error_type { WARNING = 0, WARNING_SYSHDR, PEDWARN, ERROR, FATAL, ICE };\n extern int _cpp_begin_message PARAMS ((cpp_reader *, enum error_type,\n-\t\t\t\t       const char *, const cpp_lexer_pos *));\n+\t\t\t\t       const cpp_lexer_pos *));\n \n /* In cppmacro.c */\n extern void _cpp_free_definition\tPARAMS ((cpp_hashnode *));"}, {"sha": "4a78a938987ea89a352dc470a7dd868e6889cd8e", "filename": "gcc/cppinit.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb74c963017da6f462498f75a5b09ff782e0137c/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb74c963017da6f462498f75a5b09ff782e0137c/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=bb74c963017da6f462498f75a5b09ff782e0137c", "patch": "@@ -861,7 +861,7 @@ init_standard_includes (pfile)\n \t  || (CPP_OPTION (pfile, cplusplus)\n \t      && !CPP_OPTION (pfile, no_standard_cplusplus_includes)))\n \t{\n-\t  char *str = xstrdup (update_path (p->fname, p->component));\n+\t  char *str = update_path (p->fname, p->component);\n \t  append_include_chain (pfile, str, SYSTEM, p->cxx_aware);\n \t}\n     }\n@@ -939,6 +939,9 @@ cpp_start_read (pfile, fname)\n   if (!_cpp_read_file (pfile, fname))\n     return 0;\n \n+  /* FIXME: we want to set up linemaps with _(\"<builtin>\") and\n+     _(\"<command line>\") somewhere round here.  Harder than it looks.  */\n+\n   /* If already preprocessed, don't install __LINE__, etc., and ignore\n      command line definitions and assertions.  Handle -U's, -D's and\n      -A's in the order they were seen.  */"}, {"sha": "e1657a783cecbb08230d39196a5828bef85ffb8f", "filename": "gcc/cpplex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb74c963017da6f462498f75a5b09ff782e0137c/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb74c963017da6f462498f75a5b09ff782e0137c/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=bb74c963017da6f462498f75a5b09ff782e0137c", "patch": "@@ -894,7 +894,7 @@ _cpp_lex_token (pfile, result)\n \t in-progress directives and arguments have been taken care of.\n \t Decrement the line to terminate an in-progress directive.  */\n       if (pfile->state.in_directive)\n-\tpfile->line--;\n+\tpfile->lexer_pos.output_line = pfile->line--;\n       else if (! pfile->state.parsing_args)\n \t{\n \t  /* Non-empty files should end in a newline.  Don't warn for"}, {"sha": "eab9f31c3d6fe71221a718d8e84b7447e1825b10", "filename": "gcc/cpplib.c", "status": "modified", "additions": 13, "deletions": 27, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb74c963017da6f462498f75a5b09ff782e0137c/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb74c963017da6f462498f75a5b09ff782e0137c/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=bb74c963017da6f462498f75a5b09ff782e0137c", "patch": "@@ -24,7 +24,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n #include \"cpplib.h\"\n #include \"cpphash.h\"\n-#include \"intl.h\"\n #include \"obstack.h\"\n \n /* Chained list of answers to an assertion.  */\n@@ -403,7 +402,7 @@ run_directive (pfile, dir_no, type, buf, count)\n {\n   cpp_buffer *buffer;\n \n-  buffer = cpp_push_buffer (pfile, (const U_CHAR *) buf, count, type, 0, 1);\n+  buffer = cpp_push_buffer (pfile, (const U_CHAR *) buf, count, type, 1);\n   start_directive (pfile);\n   pfile->state.prevent_expansion++;\n   pfile->directive = &dtable[dir_no];\n@@ -710,11 +709,11 @@ static void\n do_line (pfile)\n      cpp_reader *pfile;\n {\n-  cpp_buffer *buffer = pfile->buffer;\n-  enum lc_reason reason = LC_RENAME;\n-  unsigned long new_lineno;\n-  unsigned int cap, sysp = pfile->map->sysp;\n   cpp_token token;\n+  const char *new_file = pfile->map->to_file;\n+  unsigned long new_lineno;\n+  unsigned int cap, new_sysp = pfile->map->sysp;\n+  enum lc_reason reason = LC_RENAME;\n \n   /* C99 raised the minimum limit on #line numbers.  */\n   cap = CPP_OPTION (pfile, c99) ? 2147483647 : 32767;\n@@ -736,20 +735,20 @@ do_line (pfile)\n   cpp_get_token (pfile, &token);\n   if (token.type == CPP_STRING)\n     {\n-      buffer->nominal_fname = (const char *) token.val.str.text;\n+      new_file = (const char *) token.val.str.text;\n \n       /* Only accept flags for the # 55 form.  */\n       if (pfile->state.line_extension)\n \t{\n \t  int flag;\n \n-\t  sysp = 0;\n+\t  new_sysp = 0;\n \t  flag = read_flag (pfile, 0);\n \t  if (flag == 1)\n \t    {\n \t      reason = LC_ENTER;\n \t      /* Fake an include for cpp_included ().  */\n-\t      _cpp_fake_include (pfile, buffer->nominal_fname);\n+\t      _cpp_fake_include (pfile, new_file);\n \t      flag = read_flag (pfile, flag);\n \t    }\n \t  else if (flag == 2)\n@@ -759,10 +758,10 @@ do_line (pfile)\n \t    }\n \t  if (flag == 3)\n \t    {\n-\t      sysp = 1;\n+\t      new_sysp = 1;\n \t      flag = read_flag (pfile, flag);\n \t      if (flag == 4)\n-\t\tsysp = 2;\n+\t\tnew_sysp = 2;\n \t    }\n \t}\n       check_eol (pfile);\n@@ -775,8 +774,7 @@ do_line (pfile)\n     }\n \n   end_directive (pfile, 1);\n-  _cpp_do_file_change (pfile, reason, (const char *) buffer->nominal_fname,\n-\t\t       new_lineno, sysp);\n+  _cpp_do_file_change (pfile, reason, new_file, new_lineno, new_sysp);\n }\n \n /* Arrange the file_change callback.  pfile->line has changed to\n@@ -809,7 +807,7 @@ do_diagnostic (pfile, code, print_dir)\n      enum error_type code;\n      int print_dir;\n {\n-  if (_cpp_begin_message (pfile, code, NULL, 0))\n+  if (_cpp_begin_message (pfile, code, 0))\n     {\n       if (print_dir)\n \tfprintf (stderr, \"#%s \", pfile->directive->name);\n@@ -1737,23 +1735,15 @@ cpp_set_callbacks (pfile, cb)\n    doesn't fail.  It does not generate a file change call back; that\n    is the responsibility of the caller.  */\n cpp_buffer *\n-cpp_push_buffer (pfile, buffer, len, type, filename, return_at_eof)\n+cpp_push_buffer (pfile, buffer, len, type, return_at_eof)\n      cpp_reader *pfile;\n      const U_CHAR *buffer;\n      size_t len;\n      enum cpp_buffer_type type;\n-     const char *filename;\n      int return_at_eof;\n {\n   cpp_buffer *new = xobnew (&pfile->buffer_ob, cpp_buffer);\n \n-  if (type == BUF_BUILTIN)\n-    filename = _(\"<builtin>\");\n-  else if (type == BUF_CL_OPTION)\n-    filename = _(\"<command line>\");\n-  else if (type == BUF_PRAGMA)\n-    filename = \"<_Pragma>\";\n-\n   /* Clears, amongst other things, if_stack and mi_cmacro.  */\n   memset (new, 0, sizeof (cpp_buffer));\n \n@@ -1768,10 +1758,6 @@ cpp_push_buffer (pfile, buffer, len, type, filename, return_at_eof)\n      options don't do trigraph and escaped newline processing.  */\n   new->from_stage3 = type != BUF_FILE || CPP_OPTION (pfile, preprocessed);\n \n-  if (*filename == '\\0')\n-    new->nominal_fname = _(\"<stdin>\");\n-  else\n-    new->nominal_fname = filename;\n   new->type = type;\n   new->prev = pfile->buffer;\n   new->pfile = pfile;"}, {"sha": "9fc058d50afaf020cb15201bd2f29f220b0e5dea", "filename": "gcc/cpplib.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb74c963017da6f462498f75a5b09ff782e0137c/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb74c963017da6f462498f75a5b09ff782e0137c/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=bb74c963017da6f462498f75a5b09ff782e0137c", "patch": "@@ -47,7 +47,6 @@ typedef struct cpp_callbacks cpp_callbacks;\n \n struct answer;\n struct file_name_map_list;\n-struct ht;\n \n /* The first two groups, apart from '=', can appear in preprocessor\n    expressions.  This allows a lookup table to be implemented in\n@@ -542,8 +541,7 @@ extern void cpp_unassert PARAMS ((cpp_reader *, const char *));\n \n extern cpp_buffer *cpp_push_buffer PARAMS ((cpp_reader *,\n \t\t\t\t\t    const unsigned char *, size_t,\n-\t\t\t\t\t    enum cpp_buffer_type,\n-\t\t\t\t\t    const char *, int));\n+\t\t\t\t\t    enum cpp_buffer_type, int));\n extern int cpp_defined PARAMS ((cpp_reader *, const unsigned char *, int));\n \n /* N.B. The error-message-printer prototypes have not been nicely\n@@ -570,8 +568,6 @@ extern void cpp_warning_with_line PARAMS ((cpp_reader *, int, int, const char *m\n   ATTRIBUTE_PRINTF_4;\n extern void cpp_pedwarn_with_line PARAMS ((cpp_reader *, int, int, const char *msgid, ...))\n   ATTRIBUTE_PRINTF_4;\n-extern void cpp_pedwarn_with_file_and_line PARAMS ((cpp_reader *, const char *, int, int, const char *msgid, ...))\n-  ATTRIBUTE_PRINTF_5;\n extern void cpp_error_from_errno PARAMS ((cpp_reader *, const char *));\n extern void cpp_notice_from_errno PARAMS ((cpp_reader *, const char *));\n "}, {"sha": "bc12913d8a64400f180c3f38be49dad4c1feebf1", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb74c963017da6f462498f75a5b09ff782e0137c/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb74c963017da6f462498f75a5b09ff782e0137c/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=bb74c963017da6f462498f75a5b09ff782e0137c", "patch": "@@ -33,7 +33,6 @@ struct cpp_macro\n {\n   cpp_hashnode **params;\t/* Parameters, if any.  */\n   cpp_token *expansion;\t\t/* First token of replacement list.   */\n-  const char *file;\t\t/* Defined in file name.  */\n   unsigned int line;\t\t/* Starting line number.  */\n   unsigned int count;\t\t/* Number of tokens in expansion.  */\n   unsigned short paramc;\t/* Number of parameters.  */\n@@ -152,13 +151,13 @@ builtin_macro (pfile, token)\n     case BT_BASE_FILE:\n       {\n \tconst char *name;\n-\tcpp_buffer *buffer = pfile->buffer;\n+\tconst struct line_map *map = pfile->map;\n \n \tif (node->value.builtin == BT_BASE_FILE)\n-\t  while (buffer->prev)\n-\t    buffer = buffer->prev;\n+\t  while (! MAIN_FILE_P (map))\n+\t    map = INCLUDED_FROM (&pfile->line_maps, map);\n \n-\tname = buffer->nominal_fname;\n+\tname = map->to_file;\n \tmake_string_token (&pfile->ident_pool, token,\n \t\t\t   (const unsigned char *) name, strlen (name));\n       }\n@@ -1372,7 +1371,6 @@ _cpp_create_definition (pfile, node)\n \n   macro = (cpp_macro *) _cpp_pool_alloc (&pfile->macro_pool,\n \t\t\t\t\t sizeof (cpp_macro));\n-  macro->file = pfile->buffer->nominal_fname;\n   macro->line = pfile->directive_pos.line;\n   macro->params = 0;\n   macro->paramc = 0;\n@@ -1476,9 +1474,7 @@ _cpp_create_definition (pfile, node)\n \t\t\t\t \"\\\"%s\\\" redefined\", NODE_NAME (node));\n \n \t  if (node->type == NT_MACRO && !(node->flags & NODE_BUILTIN))\n-\t    cpp_pedwarn_with_file_and_line (pfile,\n-\t\t\t\t\t    node->value.macro->file,\n-\t\t\t\t\t    node->value.macro->line, 1,\n+\t    cpp_pedwarn_with_line (pfile, node->value.macro->line, 1,\n \t\t\t    \"this is the location of the previous definition\");\n \t}\n       _cpp_free_definition (node);"}, {"sha": "b116615590862316f100d7096c96c1e20057b965", "filename": "gcc/cppmain.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb74c963017da6f462498f75a5b09ff782e0137c/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb74c963017da6f462498f75a5b09ff782e0137c/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=bb74c963017da6f462498f75a5b09ff782e0137c", "patch": "@@ -419,8 +419,7 @@ cb_file_change (pfile, map)\n   print.map = map;\n }\n \n-/* Copy a #pragma directive to the preprocessed output.  LINE is the\n-   line of the current source file, not the logical line.  */\n+/* Copy a #pragma directive to the preprocessed output.  */\n static void\n cb_def_pragma (pfile, line)\n      cpp_reader *pfile;"}, {"sha": "2d7f8d4e59eea754525a9b7825ba304903c9f67c", "filename": "gcc/fix-header.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb74c963017da6f462498f75a5b09ff782e0137c/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb74c963017da6f462498f75a5b09ff782e0137c/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=bb74c963017da6f462498f75a5b09ff782e0137c", "patch": "@@ -658,7 +658,7 @@ read_scan_file (in_fname, argc, argv)\n \n       /* Scan the macro expansion of \"getchar();\".  */\n       cpp_push_buffer (scan_in, getchar_call, sizeof(getchar_call) - 1,\n-\t\t       BUF_BUILTIN, in_fname, 1);\n+\t\t       BUF_BUILTIN, 1);\n       for (;;)\n \t{\n \t  cpp_token t;"}]}