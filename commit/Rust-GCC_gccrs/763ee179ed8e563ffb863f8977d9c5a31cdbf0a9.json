{"sha": "763ee179ed8e563ffb863f8977d9c5a31cdbf0a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYzZWUxNzllZDhlNTYzZmZiODYzZjg5NzdkOWM1YTMxY2RiZjBhOQ==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2004-05-28T22:31:44Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2004-05-28T22:31:44Z"}, "message": "target-supports.exp (check_vmx_hw_available): New.\n\n2004-05-28  Janis Johnson  <janis187@us.ibm.com>\n\n\t* lib/target-supports.exp (check_vmx_hw_available): New.\n\t* gcc.dg/vmx/vmx.exp: Use it to determine default action.\n\nFrom-SVN: r82390", "tree": {"sha": "e4f1a8ac4d361c9b4f857cb67566844a6b2a358b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4f1a8ac4d361c9b4f857cb67566844a6b2a358b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/763ee179ed8e563ffb863f8977d9c5a31cdbf0a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/763ee179ed8e563ffb863f8977d9c5a31cdbf0a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/763ee179ed8e563ffb863f8977d9c5a31cdbf0a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/763ee179ed8e563ffb863f8977d9c5a31cdbf0a9/comments", "author": null, "committer": null, "parents": [{"sha": "8dc84ef1bfe97bbdc9b33ccd01643900ddd2d722", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dc84ef1bfe97bbdc9b33ccd01643900ddd2d722", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dc84ef1bfe97bbdc9b33ccd01643900ddd2d722"}], "stats": {"total": 77, "additions": 71, "deletions": 6}, "files": [{"sha": "53b52bf058f3a87582c28f036cb6b084225c32b2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763ee179ed8e563ffb863f8977d9c5a31cdbf0a9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763ee179ed8e563ffb863f8977d9c5a31cdbf0a9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=763ee179ed8e563ffb863f8977d9c5a31cdbf0a9", "patch": "@@ -1,4 +1,7 @@\n-2004-05-28  Janis Johnson  <janis187@us.ibm.com\n+2004-05-28  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* lib/target-supports.exp (check_vmx_hw_available): New.\n+\t* gcc.dg/vmx/vmx.exp: Use it to determine default action.\n \n \t* lib/target-supports.exp (check_alias_available,\n \tcheck_iconv_available, check_named_sections_available): Use"}, {"sha": "f1b761c7a2a6c90e93258863b3ee8eefa36b4961", "filename": "gcc/testsuite/gcc.dg/vmx/vmx.exp", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763ee179ed8e563ffb863f8977d9c5a31cdbf0a9/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvmx.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763ee179ed8e563ffb863f8977d9c5a31cdbf0a9/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvmx.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvmx.exp?ref=763ee179ed8e563ffb863f8977d9c5a31cdbf0a9", "patch": "@@ -19,9 +19,9 @@\n # Load support procs.\n load_lib gcc-dg.exp\n \n-# Only run this test on PowerPC targets with Altivec support.\n-# For now, that's powerpc*-*-*altivec*.  FIXME: generalize.\n-if {![istarget powerpc*-*-*altivec*]} {\n+# Skip these tests for non-PowerPC targets and for Aix, where AltiVec\n+# is not yet supported.\n+if {![istarget powerpc*-*-*] || [istarget powerpc*-*-aix*]} {\n     return\n }\n \n@@ -33,10 +33,15 @@ if ![info exists DEFAULT_VMXCFLAGS] then {\n     set DEFAULT_VMXCFLAGS \"-maltivec -mabi=altivec -std=gnu99\"\n }\n \n-# Default action in this directory is 'run'.\n+# If the target system supports AltiVec instructions, the default action\n+# for a test is 'run', otherwise it's 'compile'.\n global dg-do-what-default\n set save-dg-do-what-default ${dg-do-what-default}\n-set dg-do-what-default run\n+if { [check_vmx_hw_available ] } {\n+  set dg-do-what-default run\n+} else {\n+  set dg-do-what-default compile\n+}\n \n # Initialize `dg'.\n dg-init"}, {"sha": "aee7016bf8708c0cd80ce4c6ce38053db473dd9e", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763ee179ed8e563ffb863f8977d9c5a31cdbf0a9/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763ee179ed8e563ffb863f8977d9c5a31cdbf0a9/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=763ee179ed8e563ffb863f8977d9c5a31cdbf0a9", "patch": "@@ -280,3 +280,60 @@ proc check_named_sections_available { } {\n     verbose \"check_named_sections_available  returning $answer\" 2\n     return $answer\n }\n+\n+# Return 1 if the target supports executing AltiVec instructions, 0\n+# otherwise.  Cache the result.\n+\n+proc check_vmx_hw_available { } {\n+    global vmx_hw_available_saved\n+    global tool\n+\n+    if [info exists vmx_hw_available_saved] {\n+\tverbose \"check_hw_available  returning saved $vmx_hw_available_saved\" 2\n+    } else {\n+\tset vmx_hw_available_saved 0\n+\n+\t# Some simulators are known to not support VMX instructions.\n+\tif { [istarget powerpc-*-eabi] || [istarget powerpc*-*-eabispe] } {\n+\t    verbose \"check_hw_available  returning 0\" 2\n+\t    return $vmx_hw_available_saved\n+\t}\n+\n+\t# Set up, compile, and execute a test program containing VMX\n+\t# instructions.  Include the current process ID in the file\n+\t# names to prevent conflicts with invocations for multiple\n+\t# testsuites.\n+\tset src vmx[pid].c\n+\tset exe vmx[pid].x\n+\n+\tset f [open $src \"w\"]\n+\tputs $f \"int main() {\"\n+\tputs $f \"#ifdef __MACH__\"\n+\tputs $f \"  asm volatile (\\\"vor v0,v0,v0\\\");\"\n+\tputs $f \"#else\"\n+\tputs $f \"  asm volatile (\\\"vor 0,0,0\\\");\"\n+\tputs $f \"#endif\"\n+\tputs $f \"  return 0; }\"\n+\tclose $f\n+\n+\tverbose \"check_vmx_hw_available  compiling testfile $src\" 2\n+\tset lines [${tool}_target_compile $src $exe executable \"\"]\n+\tfile delete $src\n+\n+\tif [string match \"\" $lines] then {\n+\t    # No error message, compilation succeeded.\n+\t    set result [${tool}_load \"./$exe\" \"\" \"\"]\n+\t    set status [lindex $result 0]\n+\t    remote_file build delete $exe\n+\t    verbose \"check_vmx_hw_available testfile status is <$status>\" 2\n+\n+\t    if { $status == \"pass\" } then {\n+\t\tset vmx_hw_available_saved 1\n+\t    }\n+\t} else {\n+\t    verbose \"check_vmx_hw_availalble testfile compilation failed\" 2\n+\t}\n+    }\n+\n+    return $vmx_hw_available_saved\n+}"}]}