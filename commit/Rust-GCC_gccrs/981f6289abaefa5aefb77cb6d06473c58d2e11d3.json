{"sha": "981f6289abaefa5aefb77cb6d06473c58d2e11d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgxZjYyODlhYmFlZmE1YWVmYjc3Y2I2ZDA2NDczYzU4ZDJlMTFkMw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-09-15T22:48:06Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-09-15T22:48:06Z"}, "message": "ChangeLog: Follow spelling conventions.\n\n\t* ChangeLog: Follow spelling conventions.\n\t* ChangeLog.0: Likewise.\n\t* ChangeLog.1: Likewise.\n\t* ChangeLog.2: Likewise.\n\t* ChangeLog.4: Likewise.\n\t* ChangeLog.6: Likewise.\n\t* config.gcc: Likewise.\n\t* dwarfout.c: Likewise.\n\t* reload1.c: Likewise.\n\t* simplify-rtx.c: Likewise.\n\t* unwind-sjlj.c: Likewise.\n\t* config/avr/avr.h: Likewise.\n\t* config/d30v/d30v.h: Likewise.\n\t* config/frv/frv.c: Likewise.\n\t* config/frv/frv.h: Likewise.\n\t* config/ip2k/ip2k.h: Likewise.\n\t* config/m88k/m88k-move.sh: Likewise.\n\t* config/stormy16/stormy16.c: Likewise.\n\t* config/stormy16/stormy16.h: Likewise.\n\t* doc/extend.texi: Likewise.\n\t* doc/interface.texi: Likewise.\n\t* doc/invoke.texi: Likewise.\n\t* doc/md.texi: Likewise.\n\t* doc/rtl.texi: Likewise.\n\t* doc/tm.texi: Likewise.\n\t* doc/trouble.texi: Likewise.\n\t* ginclude/float.h: Likewise.\n\t* treelang/treelang.texi: Likewise.\n\nFrom-SVN: r57179", "tree": {"sha": "28007d4004633363bcf80433f7aa22989ce61c32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28007d4004633363bcf80433f7aa22989ce61c32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/981f6289abaefa5aefb77cb6d06473c58d2e11d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/981f6289abaefa5aefb77cb6d06473c58d2e11d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/981f6289abaefa5aefb77cb6d06473c58d2e11d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/981f6289abaefa5aefb77cb6d06473c58d2e11d3/comments", "author": null, "committer": null, "parents": [{"sha": "6578c58188414177d4ade5b13fe7f7800744acb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6578c58188414177d4ade5b13fe7f7800744acb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6578c58188414177d4ade5b13fe7f7800744acb0"}], "stats": {"total": 153, "additions": 92, "deletions": 61}, "files": [{"sha": "48f733f59bb3322134b76fc04409bb6d0a007f68", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -1,3 +1,34 @@\n+2002-09-15  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* ChangeLog: Follow spelling conventions.\n+\t* ChangeLog.0: Likewise.\n+\t* ChangeLog.1: Likewise.\n+\t* ChangeLog.2: Likewise.\n+\t* ChangeLog.4: Likewise.\n+\t* ChangeLog.6: Likewise.\n+\t* config.gcc: Likewise.\n+\t* dwarfout.c: Likewise.\n+\t* reload1.c: Likewise.\n+\t* simplify-rtx.c: Likewise.\n+\t* unwind-sjlj.c: Likewise.\n+\t* config/avr/avr.h: Likewise.\n+\t* config/d30v/d30v.h: Likewise.\n+\t* config/frv/frv.c: Likewise.\n+\t* config/frv/frv.h: Likewise.\n+\t* config/ip2k/ip2k.h: Likewise.\n+\t* config/m88k/m88k-move.sh: Likewise.\n+\t* config/stormy16/stormy16.c: Likewise.\n+\t* config/stormy16/stormy16.h: Likewise.\n+\t* doc/extend.texi: Likewise.\n+\t* doc/interface.texi: Likewise.\n+\t* doc/invoke.texi: Likewise.\n+\t* doc/md.texi: Likewise.\n+\t* doc/rtl.texi: Likewise.\n+\t* doc/tm.texi: Likewise.\n+\t* doc/trouble.texi: Likewise.\n+\t* ginclude/float.h: Likewise.\n+\t* treelang/treelang.texi: Likewise.\n+\n 2002-09-15  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* i386-protos.h (i386_pe_dllexport_name_p,\n@@ -15272,7 +15303,7 @@ Sat May  4 13:20:54 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \tconfig/sparc/ultra1_2.md, config/sparc/ultra3.md: ... into here.\n \n \t* config/sparc/sparc.c (LEAF_REGISTERS): Do not do ifdef\n-\tchecks on it, always defined for Sparc.\n+\tchecks on it, always defined for SPARC.\n \n \t* config/sparc/sparc.h (REG_ALLOC_ORDER, REG_LEAF_ALLOC_ORDER):\n \tTweak, and add more detailed comments.\n@@ -15962,7 +15993,7 @@ Tue Apr 30 09:31:59 2002  Jeffrey A Law  (law@redhat.com)\n \n \t2001-09-25  David S. Miller  <davem@redhat.com>\n \n-\tConvert all of Sparc scheduling to DFA\n+\tConvert all of SPARC scheduling to DFA\n \t* config/sparc/sparc.md: Kill all define_function_unit\n \tdirectives and replace with DFA equivalent.\n \t* config/sparc/sparc.c (ultrasparc_adjust_cost,\n@@ -16695,7 +16726,7 @@ objc:\n \n \tPR target/6420\n \t* config/sparc/sparc.h (FUNCTION_OK_FOR_SIBCALL): Return false if\n-\t32-bit Sparc and current_function_returns_struct is true.\n+\t32-bit SPARC and current_function_returns_struct is true.\n \n Wed Apr 24 13:48:25 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \n@@ -18138,7 +18169,7 @@ Tue Apr  9 09:35:45 2002  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \tPR target/6082\n \t* config/sparc/freebsd.h (SPARC_DEFAULT_CMODEL): Set to CM_MEDLOW\n \n-\tMake init_priority work on Sparc when using GNU ld.\n+\tMake init_priority work on SPARC when using GNU ld.\n \t* config/sparc/linux.h, config/sparc/linux64.h,\n \tconfig/sparc/netbsd-elf.h, config/sparc/freebsd.h\n \t(CTORS_SECTION_ASM_OP, DTORS_SECTION_ASM_OP): Undefine."}, {"sha": "c9d6a1543abba5488e5255a293ffd5f441706f30", "filename": "gcc/ChangeLog.0", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2FChangeLog.0", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2FChangeLog.0", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.0?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -4435,7 +4435,7 @@ Sun May  3 23:57:25 1998  Robert Lipe  <robertl@dgii.com>\n \n Sun May  3 13:51:34 1998  Richard Henderson  <rth@cygnus.com>\n \n-\tSupport for official Sparc V9 ABI:\n+\tSupport for official SPARC V9 ABI:\n \t* sparc.c (sparc_override_options): Force stack bias off for !arch64.\n \tCare for flag_pcc_struct_return default.\n \t(output_move_quad): Rewrite to move by halves on v9 and in the"}, {"sha": "f9e4494d713851fd7d955afe5aaf78cf45e7cc41", "filename": "gcc/ChangeLog.1", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2FChangeLog.1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2FChangeLog.1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.1?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -7018,7 +7018,7 @@ Thu Jan  7 03:08:17 1999  Richard Henderson  <rth@cygnus.com>\n Thu Jan  7 03:03:42 1999  Stan Cox  <scox@cygnus.com>\n \t\t\t  Richard Henderson  <rth@cygnus.com>\n \n-\tSupport for Hypersparc and Sparclite86x:\n+\tSupport for HyperSPARC and SPARClite86x:\n \t* sparc.h (TARGET_CPU_hypersparc, TARGET_CPU_sparclite86x): New.\n \t(CPP_CPU32_DEFAULT_SPEC): Fix up for the new targets.\n \t(ASM_CPU32_DEFAULT_SPEC): Likewise.\n@@ -15068,7 +15068,7 @@ Mon Aug 10 19:02:55 1998  John Carr  <jfc@mit.edu>\n Mon Aug 10 04:28:13 1998  David S. Miller  <davem@pierdol.cobaltmicro.com>\n \t\t\t  Richard Henderson  <rth@cygnus.com>\n \n-\tRewrite Sparc backend for better code generation and\n+\tRewrite SPARC backend for better code generation and\n \timproved sparc64 support.\n \t* config/sparc/sp64-elf.h: Set JUMP_TABLES_IN_TEXT_SECTION to\n \tzero.\n@@ -15155,7 +15155,7 @@ Mon Aug 10 04:28:13 1998  David S. Miller  <davem@pierdol.cobaltmicro.com>\n \t(define_function_unit ieu1): New, executes compare, call, and\n \tuncond_branch type insns.\n \t(define_function_units for type fdivs, fdivd, fsqrt): These\n-\texecute in the fpu multiply unit not the adder on UltraSparc.\n+\texecute in the fpu multiply unit not the adder on UltraSPARC.\n \t(define_expand cmpdi): Disallow TARGET_V8PLUS.\n \t(define_insn cmpsi_insn): Rename to cmpsi_insn_sp32.\n \t(define_insn cmpsi_insn_sp64): New, same as sp32 variant except it\n@@ -15570,7 +15570,7 @@ Mon Jul 27 14:22:36 1998  Dave Brolley  <brolley@cygnus.com>\n \n Mon Jul 27 11:43:54 1998  Stan Cox  <scox@cygnus.com>\n \n-\t* longlong.h (count_leading_zeros): Sparclite scan instruction was\n+\t* longlong.h (count_leading_zeros): SPARClite scan instruction was\n \tbeing invoked incorrectly.\n \n \t* i386.c (ix86_prologue): Added SUBTARGET_PROLOGUE invocation."}, {"sha": "7d08524a3476cab4f732337cf499730a3850e50c", "filename": "gcc/ChangeLog.2", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2FChangeLog.2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2FChangeLog.2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.2?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -3184,13 +3184,13 @@ Wed Nov  3 15:11:27 1999  David S. Miller  <davem@redhat.com>\n \n \t* config/sparc/sparc.md: Remove insn type fpsqrt, add fpsqrts\n \tand fpsqrtd.  Use them and create fdiv function unit to more\n-\taccurately represent fpu sqrt pipeline semantics on UltraSparc.\n+\taccurately represent fpu sqrt pipeline semantics on UltraSPARC.\n \t* config/sparc/sparc.c: Account for fpsqrt{s,d} changes.\n \n Wed Nov  3 15:11:27 1999  Matteo Frigo <athena@fftw.org>\n \n \t* config/sparc/sparc.md: Adjust FADD/FMUL result latencies to\n-\t3 on UltraSparc.\n+\t3 on UltraSPARC.\n \t* config/sparc/sparc.c (ultra_schedule_insn): Insert launched\n \tinsn into ready list, do not use just a raw swap.\n "}, {"sha": "02db4642c53828e03e89f3d5345691bdc95cf745", "filename": "gcc/ChangeLog.4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2FChangeLog.4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2FChangeLog.4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.4?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -3247,7 +3247,7 @@ Wed Nov 22 00:52:55 2000  J\"orn Rennecke <amylaar@redhat.com>\n \n 2000-11-21  Jakub Jelinek  <jakub@redhat.com>\n \n-\t* configure.in (HAVE_AS_DWARF2_DEBUG_LINE): Sparc has .file/.loc\n+\t* configure.in (HAVE_AS_DWARF2_DEBUG_LINE): SPARC has .file/.loc\n \tsupport in as as well.\n \t* configure: Regenerate.\n "}, {"sha": "21a3fbb9c1049a6aa12f52f9fc8452bba97e77eb", "filename": "gcc/ChangeLog.6", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2FChangeLog.6", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2FChangeLog.6", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.6?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -6891,7 +6891,7 @@ Sat Nov  3 10:37:56 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n 2001-11-01  David S. Miller  <davem@redhat.com>\n \n \t* doc/install.texi (Specific, sparc-sun-solaris2*): Bring\n-\t64-bit Sparc description more in line with reality.\n+\t64-bit SPARC description more in line with reality.\n \n 2001-11-01  Joseph S. Myers  <jsm28@cam.ac.uk>\n "}, {"sha": "517170d1a63188c7cd13d54f8fd7fc0ea92c160d", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -2330,17 +2330,17 @@ sparc-*-elf*)\n \ttmake_file=\"sparc/t-elf sparc/t-crtfm\"\n \textra_parts=\"crti.o crtn.o crtbegin.o crtend.o\"\n \t;;\n-sparc-*-linux*aout*)\t\t# Sparc's running GNU/Linux, a.out\n+sparc-*-linux*aout*)\t\t# SPARC's running GNU/Linux, a.out\n \ttm_file=\"aoutos.h sparc/sparc.h sparc/aout.h sparc/linux-aout.h\"\n \tgnu_ld=yes\n \t;;\n-sparc-*-linux*libc1*)\t# Sparc's running GNU/Linux, libc5\n+sparc-*-linux*libc1*)\t# SPARC's running GNU/Linux, libc5\n \ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/linux.h\"\n \ttmake_file=\"t-slibgcc-elf-ver t-linux t-linux-gnulibc1 sparc/t-crtfm\"\n \textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n \tgnu_ld=yes\n \t;;\n-sparc-*-linux*)\t\t# Sparc's running GNU/Linux, libc6\n+sparc-*-linux*)\t\t# SPARC's running GNU/Linux, libc6\n \ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/linux.h\"\n \ttmake_file=\"t-slibgcc-elf-ver t-linux sparc/t-crtfm\"\n \t;;\n@@ -2524,7 +2524,7 @@ sparc64-*-freebsd*|ultrasparc-*-freebsd*)\n \t\t*) echo \"$with_cpu not supported for freebsd target\"; exit 1 ;;\n \tesac\n \t;;\n-sparc64-*-linux*)\t\t# 64-bit Sparc's running GNU/Linux\n+sparc64-*-linux*)\t\t# 64-bit SPARC's running GNU/Linux\n \ttmake_file=\"t-slibgcc-elf-ver t-linux sparc/t-linux64 sparc/t-crtfm\"\n \ttm_file=\"sparc/biarch64.h ${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/linux64.h\"\n \t;;"}, {"sha": "aec89b2615519af9633eb0e8e376033bb172578f", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -675,7 +675,7 @@ enum reg_class {\n    machines allow copying all registers to and from memory, but\n    require a scratch register for stores to some memory locations\n    (e.g., those with symbolic address on the RT, and those with\n-   certain symbolic address on the Sparc when compiling PIC).  In\n+   certain symbolic address on the SPARC when compiling PIC).  In\n    some cases, both an intermediate and a scratch register are\n    required.\n "}, {"sha": "ff3f31a6ac88b5715d630c6ec514daeac89b1a5c", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -823,7 +823,7 @@ extern enum reg_class reg_class_from_letter[256];\n    registers, but not memory.  Some machines allow copying all registers to and\n    from memory, but require a scratch register for stores to some memory\n    locations (e.g., those with symbolic address on the RT, and those with\n-   certain symbolic address on the Sparc when compiling PIC).  In some cases,\n+   certain symbolic address on the SPARC when compiling PIC).  In some cases,\n    both an intermediate and a scratch register are required.\n \n    You should define these macros to indicate to the reload phase that it may\n@@ -1109,7 +1109,7 @@ typedef struct d30v_stack {\n \n /* If defined, a C expression that produces the machine-specific code to setup\n    the stack so that arbitrary frames can be accessed.  For example, on the\n-   Sparc, we must flush all of the register windows to the stack before we can\n+   SPARC, we must flush all of the register windows to the stack before we can\n    access arbitrary stack frames.  This macro will seldom need to be defined.  */\n /* #define SETUP_FRAME_ADDRESSES() */\n \n@@ -2415,7 +2415,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* #define EXTRA_CC_MODES */\n \n /* Returns a mode from class `MODE_CC' to be used when comparison operation\n-   code OP is applied to rtx X and Y.  For example, on the Sparc,\n+   code OP is applied to rtx X and Y.  For example, on the SPARC,\n    `SELECT_CC_MODE' is defined as (see *note Jump Patterns::.  for a\n    description of the reason for this definition)\n \n@@ -2453,7 +2453,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n    You need not define this macro if it would always returns zero or if the\n    floating-point format is anything other than `IEEE_FLOAT_FORMAT'.  For\n-   example, here is the definition used on the Sparc, where floating-point\n+   example, here is the definition used on the SPARC, where floating-point\n    inequality comparisons are always given `CCFPEmode':\n \n         #define REVERSIBLE_CC_MODE(MODE)  ((MODE) != CCFPEmode)  */"}, {"sha": "9689283944e86c46213bd954e0692749ac6015cd", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -7629,7 +7629,7 @@ frv_initialize_trampoline (addr, fnaddr, static_chain)\n    registers, but not memory.  Some machines allow copying all registers to and\n    from memory, but require a scratch register for stores to some memory\n    locations (e.g., those with symbolic address on the RT, and those with\n-   certain symbolic address on the Sparc when compiling PIC).  In some cases,\n+   certain symbolic address on the SPARC when compiling PIC).  In some cases,\n    both an intermediate and a scratch register are required.\n \n    You should define these macros to indicate to the reload phase that it may"}, {"sha": "c093bd0362ebeb3c827b9e0d3ee1525367ae5106", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -2568,7 +2568,7 @@ __asm__(\"\\n\"\t\t\t\t\t\t\t\t\\\n \n \f\n /* Returns a mode from class `MODE_CC' to be used when comparison operation\n-   code OP is applied to rtx X and Y.  For example, on the Sparc,\n+   code OP is applied to rtx X and Y.  For example, on the SPARC,\n    `SELECT_CC_MODE' is defined as (see *note Jump Patterns::.  for a\n    description of the reason for this definition)\n \n@@ -2594,7 +2594,7 @@ __asm__(\"\\n\"\t\t\t\t\t\t\t\t\\\n \n    You need not define this macro if it would always returns zero or if the\n    floating-point format is anything other than `IEEE_FLOAT_FORMAT'.  For\n-   example, here is the definition used on the Sparc, where floating-point\n+   example, here is the definition used on the SPARC, where floating-point\n    inequality comparisons are always given `CCFPEmode':\n \n         #define REVERSIBLE_CC_MODE(MODE)  ((MODE) != CCFPEmode)  */"}, {"sha": "054d86c564bad0d7d042030019d7916ad003206d", "filename": "gcc/config/ip2k/ip2k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fconfig%2Fip2k%2Fip2k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fconfig%2Fip2k%2Fip2k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.h?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -801,7 +801,7 @@ enum reg_class {\n    machines allow copying all registers to and from memory, but\n    require a scratch register for stores to some memory locations\n    (e.g., those with symbolic address on the RT, and those with\n-   certain symbolic address on the Sparc when compiling PIC).  In\n+   certain symbolic address on the SPARC when compiling PIC).  In\n    some cases, both an intermediate and a scratch register are\n    required.\n "}, {"sha": "874bc364ae5cda65325d6b2545d14dd30dbe8513", "filename": "gcc/config/m88k/m88k-move.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fconfig%2Fm88k%2Fm88k-move.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fconfig%2Fm88k%2Fm88k-move.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k-move.sh?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -44,7 +44,7 @@\n #\t27-Aug-90   Vince Guarna/Tom Wood   \n #\t\t\tVersion 3 assembler syntax (-abi).\n #\t16-Aug-90   Ron Guilmette\n-#\t\t\tAvoid problems on a Sparc.  The common\n+#\t\t\tAvoid problems on a SPARC.  The common\n #\t\t\tdenominator among shells seems to be '...\\'\n #\t\t\trather than '...\\\\'.\n #\t15-Aug-90   Ron Guilmette"}, {"sha": "7b77d767c425ea51e9373b5b865b744fd1908a69", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -407,7 +407,7 @@ xstormy16_output_cbranch_si (op, label, reversed, insn)\n    registers, but not memory.  Some machines allow copying all registers to and\n    from memory, but require a scratch register for stores to some memory\n    locations (e.g., those with symbolic address on the RT, and those with\n-   certain symbolic address on the Sparc when compiling PIC).  In some cases,\n+   certain symbolic address on the SPARC when compiling PIC).  In some cases,\n    both an intermediate and a scratch register are required.\n \n    You should define these macros to indicate to the reload phase that it may"}, {"sha": "32b0e877f5443874fe1242a63fa9472f78fa3c67", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -576,7 +576,7 @@ enum reg_class\n    registers, but not memory.  Some machines allow copying all registers to and\n    from memory, but require a scratch register for stores to some memory\n    locations (e.g., those with symbolic address on the RT, and those with\n-   certain symbolic address on the Sparc when compiling PIC).  In some cases,\n+   certain symbolic address on the SPARC when compiling PIC).  In some cases,\n    both an intermediate and a scratch register are required.\n \n    You should define these macros to indicate to the reload phase that it may\n@@ -841,7 +841,7 @@ enum reg_class\n \n /* If defined, a C expression that produces the machine-specific code to setup\n    the stack so that arbitrary frames can be accessed.  For example, on the\n-   Sparc, we must flush all of the register windows to the stack before we can\n+   SPARC, we must flush all of the register windows to the stack before we can\n    access arbitrary stack frames.  This macro will seldom need to be defined.  */\n /* #define SETUP_FRAME_ADDRESSES() */\n \n@@ -2189,7 +2189,7 @@ do {\t\t\t\t\t\t\t\\\n /* #define EXTRA_CC_MODES */\n \n /* Returns a mode from class `MODE_CC' to be used when comparison operation\n-   code OP is applied to rtx X and Y.  For example, on the Sparc,\n+   code OP is applied to rtx X and Y.  For example, on the SPARC,\n    `SELECT_CC_MODE' is defined as (see *note Jump Patterns::.  for a\n    description of the reason for this definition)\n \n@@ -2227,7 +2227,7 @@ do {\t\t\t\t\t\t\t\\\n \n    You need not define this macro if it would always returns zero or if the\n    floating-point format is anything other than `IEEE_FLOAT_FORMAT'.  For\n-   example, here is the definition used on the Sparc, where floating-point\n+   example, here is the definition used on the SPARC, where floating-point\n    inequality comparisons are always given `CCFPEmode':\n \n         #define REVERSIBLE_CC_MODE(MODE)  ((MODE) != CCFPEmode)  */"}, {"sha": "e9fef2548f41d052a6a824cfdc109d0087abb353", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -3235,7 +3235,7 @@ typedef int more_aligned_int __attribute__ ((aligned (8)));\n @noindent\n force the compiler to insure (as far as it can) that each variable whose\n type is @code{struct S} or @code{more_aligned_int} will be allocated and\n-aligned @emph{at least} on a 8-byte boundary.  On a Sparc, having all\n+aligned @emph{at least} on a 8-byte boundary.  On a SPARC, having all\n variables of type @code{struct S} aligned to 8-byte boundaries allows\n the compiler to use the @code{ldd} and @code{std} (doubleword load and\n store) instructions when copying one variable of type @code{struct S} to\n@@ -4140,7 +4140,7 @@ being used for other purposes in the preceding functions.\n Global register variables may not have initial values, because an\n executable file has no means to supply initial contents for a register.\n \n-On the Sparc, there are reports that g3 @dots{} g7 are suitable\n+On the SPARC, there are reports that g3 @dots{} g7 are suitable\n registers, but certain library functions, such as @code{getwd}, as well\n as the subroutines for division and remainder, modify g3 and g4.  g1 and\n g2 are local temporaries."}, {"sha": "c554434c4475313ab1c3163f6a732cb674136acc", "filename": "gcc/doc/interface.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fdoc%2Finterface.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fdoc%2Finterface.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finterface.texi?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -57,7 +57,7 @@ compiler for the system.  We may implement register argument passing on\n certain machines once we have a complete GNU system so that we can\n compile the libraries with GCC@.\n \n-On some machines (particularly the Sparc), certain types of arguments\n+On some machines (particularly the SPARC), certain types of arguments\n are passed ``by invisible reference''.  This means that the value is\n stored in memory, and the address of the memory location is passed to\n the subroutine."}, {"sha": "80970f8122d37edc5255ec3e39f89c154bfdb08a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -3725,7 +3725,7 @@ in the output file.\n \n Use these options on systems where the linker can perform optimizations\n to improve locality of reference in the instruction space.  HPPA\n-processors running HP-UX and Sparc processors running Solaris 2 have\n+processors running HP-UX and SPARC processors running Solaris 2 have\n linkers with such optimizations.  Other systems using the ELF object format\n as well as AIX may have these optimizations in the future.\n \n@@ -5363,7 +5363,7 @@ With @option{-mfaster-structs}, the compiler assumes that structures\n should have 8 byte alignment.  This enables the use of pairs of\n @code{ldd} and @code{std} instructions for copies in structure\n assignment, in place of twice as many @code{ld} and @code{st} pairs.\n-However, the use of this changed alignment directly violates the Sparc\n+However, the use of this changed alignment directly violates the SPARC\n ABI@.  Thus, it's intended only for use on targets where the developer\n acknowledges that their resulting code will not be directly in line with\n the rules of the ABI@.\n@@ -5395,11 +5395,11 @@ They have been replaced with @option{-mcpu=xxx}.\n These two options select the processor for which the code is optimized.\n \n With @option{-mcypress} (the default), the compiler optimizes code for the\n-Cypress CY7C602 chip, as used in the SparcStation/SparcServer 3xx series.\n-This is also appropriate for the older SparcStation 1, 2, IPX etc.\n+Cypress CY7C602 chip, as used in the SPARCStation/SPARCServer 3xx series.\n+This is also appropriate for the older SPARCStation 1, 2, IPX etc.\n \n-With @option{-msupersparc} the compiler optimizes code for the SuperSparc cpu, as\n-used in the SparcStation 10, 1000 and 2000 series.  This flag also enables use\n+With @option{-msupersparc} the compiler optimizes code for the SuperSPARC cpu, as\n+used in the SPARCStation 10, 1000 and 2000 series.  This flag also enables use\n of the full SPARC v8 instruction set.\n \n These options are deprecated and will be deleted in a future GCC release.\n@@ -10027,7 +10027,7 @@ loader is not part of GCC; it is part of the operating system).  If\n the GOT size for the linked executable exceeds a machine-specific\n maximum size, you get an error message from the linker indicating that\n @option{-fpic} does not work; in that case, recompile with @option{-fPIC}\n-instead.  (These maximums are 16k on the m88k, 8k on the Sparc, and 32k\n+instead.  (These maximums are 16k on the m88k, 8k on the SPARC, and 32k\n on the m68k and RS/6000.  The 386 has no such limit.)\n \n Position-independent code requires special support, and therefore works\n@@ -10040,7 +10040,7 @@ position-independent.\n If supported for the target machine, emit position-independent code,\n suitable for dynamic linking and avoiding any limit on the size of the\n global offset table.  This option makes a difference on the m68k, m88k,\n-and the Sparc.\n+and the SPARC.\n \n Position-independent code requires special support, and therefore works\n only on certain machines."}, {"sha": "db640753f9d9ab9e38384343b0d241711180ef27", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -3480,7 +3480,7 @@ multiple condition registers, use a pseudo register.\n @findex next_cc0_user\n On some machines, the type of branch instruction generated may depend on\n the way the condition code was produced; for example, on the 68k and\n-Sparc, setting the condition code directly from an add or subtract\n+SPARC, setting the condition code directly from an add or subtract\n instruction does not clear the overflow bit the way that a test\n instruction does, so a different branch instruction must be used for\n some conditional branches.  For machines that use @code{(cc0)}, the set\n@@ -3499,7 +3499,7 @@ different formats of the condition code register.\n Registers used to store the condition code value should have a mode that\n is in class @code{MODE_CC}.  Normally, it will be @code{CCmode}.  If\n additional modes are required (as for the add example mentioned above in\n-the Sparc), define the macro @code{EXTRA_CC_MODES} to list the\n+the SPARC), define the macro @code{EXTRA_CC_MODES} to list the\n additional modes required (@pxref{Condition Code}).  Also define\n @code{SELECT_CC_MODE} to choose a mode given an operand of a compare.\n \n@@ -3511,7 +3511,7 @@ be specified at that time.\n If the cases that require different modes would be made by instruction\n combination, the macro @code{SELECT_CC_MODE} determines which machine\n mode should be used for the comparison result.  The patterns should be\n-written using that mode.  To support the case of the add on the Sparc\n+written using that mode.  To support the case of the add on the SPARC\n discussed above, we have the pattern\n \n @smallexample\n@@ -3525,7 +3525,7 @@ discussed above, we have the pattern\n   \"@dots{}\")\n @end smallexample\n \n-The @code{SELECT_CC_MODE} macro on the Sparc returns @code{CC_NOOVmode}\n+The @code{SELECT_CC_MODE} macro on the SPARC returns @code{CC_NOOVmode}\n for comparisons whose argument is a @code{plus}.\n \n @node Looping Patterns"}, {"sha": "1c9a4e4923084365580bbbfebb569d78938cbd40", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -1545,7 +1545,7 @@ preferable approach if only a small subset of instructions modify the\n condition code.  Other machines store condition codes in general\n registers; in such cases a pseudo register should be used.\n \n-Some machines, such as the Sparc and RS/6000, have two sets of\n+Some machines, such as the SPARC and RS/6000, have two sets of\n arithmetic instructions, one that sets and one that does not set the\n condition code.  This is best handled by normally generating the\n instruction that does not set the condition code, and making a pattern"}, {"sha": "6977f5646c4172a3a93c7fcf28691cc4b517b6f5", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -2410,7 +2410,7 @@ from memory or even from other types of registers.  An example is the\n from general registers, but not memory.  Some machines allow copying all\n registers to and from memory, but require a scratch register for stores\n to some memory locations (e.g., those with symbolic address on the RT,\n-and those with certain symbolic address on the Sparc when compiling\n+and those with certain symbolic address on the SPARC when compiling\n PIC)@.  In some cases, both an intermediate and a scratch register are\n required.\n \n@@ -2790,7 +2790,7 @@ address of the stack word that points to the previous frame.\n @item SETUP_FRAME_ADDRESSES\n If defined, a C expression that produces the machine-specific code to\n setup the stack so that arbitrary frames can be accessed.  For example,\n-on the Sparc, we must flush all of the register windows to the stack\n+on the SPARC, we must flush all of the register windows to the stack\n before we can access arbitrary stack frames.  You will seldom need to\n define this macro.\n \n@@ -5094,7 +5094,7 @@ automatically defined by @command{configure}, with value @samp{1}.\n @item SELECT_CC_MODE (@var{op}, @var{x}, @var{y})\n Returns a mode from class @code{MODE_CC} to be used when comparison\n operation code @var{op} is applied to rtx @var{x} and @var{y}.  For\n-example, on the Sparc, @code{SELECT_CC_MODE} is defined as (see\n+example, on the SPARC, @code{SELECT_CC_MODE} is defined as (see\n @pxref{Jump Patterns} for a description of the reason for this\n definition)\n \n@@ -5138,7 +5138,7 @@ then @code{REVERSIBLE_CC_MODE (@var{mode})} must be zero.\n \n You need not define this macro if it would always returns zero or if the\n floating-point format is anything other than @code{IEEE_FLOAT_FORMAT}.\n-For example, here is the definition used on the Sparc, where floating-point\n+For example, here is the definition used on the SPARC, where floating-point\n inequality comparisons are always given @code{CCFPEmode}:\n \n @smallexample"}, {"sha": "d6ba63259d6a3e3bf10b87840f909af4cebe712b", "filename": "gcc/doc/trouble.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fdoc%2Ftrouble.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fdoc%2Ftrouble.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftrouble.texi?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -163,7 +163,7 @@ Naturally, this does not happen when you use GCC@.\n You must specify all three options explicitly.\n \n @item\n-On a Sparc, GCC aligns all values of type @code{double} on an 8-byte\n+On a SPARC, GCC aligns all values of type @code{double} on an 8-byte\n boundary, and it expects every @code{double} to be so aligned.  The Sun\n compiler usually gives @code{double} values 8-byte alignment, with one\n exception: function arguments of type @code{double} may not be aligned.\n@@ -202,7 +202,7 @@ Storing into the pointer can be done likewise with the same union.\n @item\n On Solaris, the @code{malloc} function in the @file{libmalloc.a} library\n may allocate memory that is only 4 byte aligned.  Since GCC on the\n-Sparc assumes that doubles are 8 byte aligned, this may result in a\n+SPARC assumes that doubles are 8 byte aligned, this may result in a\n fatal signal if doubles are stored in memory allocated by the\n @file{libmalloc.a} library.\n \n@@ -219,7 +219,7 @@ when linking, compile and link against the file\n @file{mit/util/misc/dlsym.c} from the MIT version of X windows.\n \n @item\n-The 128-bit long double format that the Sparc port supports currently\n+The 128-bit long double format that the SPARC port supports currently\n works by using the architecturally defined quad-word floating point\n instructions.  Since there is no hardware that supports these\n instructions they must be emulated by the operating system.  Long"}, {"sha": "ebf5995ca625af979cbc8a791a8ecd7a019c5b3b", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -43,7 +43,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n  The generation of DWARF debugging information by the GNU version 2.x C\n  compiler has now been tested rather extensively for m88k, i386, i860, and\n- Sparc targets.  The DWARF output of the GNU C compiler appears to inter-\n+ SPARC targets.  The DWARF output of the GNU C compiler appears to inter-\n  operate well with the standard SVR4 SDB debugger on these kinds of target\n  systems (but of course, there are no guarantees).\n "}, {"sha": "f501a8abe93b27e3f30fae6d14e9244a8b11761f", "filename": "gcc/ginclude/float.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fginclude%2Ffloat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fginclude%2Ffloat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Ffloat.h?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -57,7 +57,7 @@ Boston, MA 02111-1307, USA.  */\n #define DBL_DIG\t\t__DBL_DIG__\n #define LDBL_DIG\t__LDBL_DIG__\n \n-/* Minimum int x such that FLT_RADIX**(x-1) is a normalised float, emin */\n+/* Minimum int x such that FLT_RADIX**(x-1) is a normalized float, emin */\n #undef FLT_MIN_EXP\n #undef DBL_MIN_EXP\n #undef LDBL_MIN_EXP"}, {"sha": "c188aec2c0e37d36cd77ed38c623e5422468d52e", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -3411,7 +3411,7 @@ set_offsets_for_label (insn)\n }\n \n /* See if anything that happened changes which eliminations are valid.\n-   For example, on the Sparc, whether or not the frame pointer can\n+   For example, on the SPARC, whether or not the frame pointer can\n    be eliminated can depend on what registers have been used.  We need\n    not check some conditions again (such as flag_omit_frame_pointer)\n    since they can't have changed.  */"}, {"sha": "5d58bdae5d50846c9f995d2c2ee694925c995047", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -2582,7 +2582,7 @@ simplify_subreg (outermode, op, innermode, byte)\n \n       /* ??? We do allow it if the current REG is not valid for\n \t its mode.  This is a kludge to work around how float/complex\n-\t arguments are passed on 32-bit Sparc and should be fixed.  */\n+\t arguments are passed on 32-bit SPARC and should be fixed.  */\n       if (HARD_REGNO_MODE_OK (final_regno, outermode)\n \t  || ! HARD_REGNO_MODE_OK (REGNO (op), innermode))\n \t{"}, {"sha": "c2c480f5c0ad20d3998b8353791ff4f14baa6b97", "filename": "gcc/treelang/treelang.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Ftreelang%2Ftreelang.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Ftreelang%2Ftreelang.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreelang.texi?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -451,7 +451,7 @@ later. The list of keywords follows:\n @{ - used to start the statements in a function\n @} - used to end the statements in a function\n ( - start list of function arguments, or to change the precedence of operators in an expression\n-) - end list or prioritised operators in expression\n+) - end list or prioritized operators in expression\n , - used to separate parameters in a function prototype or in a function call \n ; - used to end a statement\n + - addition"}, {"sha": "2293075e86e2096d9b3355a41f6d851f3a33b655", "filename": "gcc/unwind-sjlj.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Funwind-sjlj.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981f6289abaefa5aefb77cb6d06473c58d2e11d3/gcc%2Funwind-sjlj.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-sjlj.c?ref=981f6289abaefa5aefb77cb6d06473c58d2e11d3", "patch": "@@ -251,7 +251,7 @@ uw_init_context (struct _Unwind_Context *context)\n }\n \n /* ??? There appear to be bugs in integrate.c wrt __builtin_longjmp and\n-   virtual-stack-vars.  An inline version of this segfaults on Sparc.  */\n+   virtual-stack-vars.  An inline version of this segfaults on SPARC.  */\n #define uw_install_context(CURRENT, TARGET)\t\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\"}]}