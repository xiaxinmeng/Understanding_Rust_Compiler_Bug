{"sha": "e9c4fbe9c1eff61ffe2aa31c67cef2ffd346f674", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTljNGZiZTljMWVmZjYxZmZlMmFhMzFjNjdjZWYyZmZkMzQ2ZjY3NA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2017-01-23T16:17:33Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2017-01-23T16:17:33Z"}, "message": "re PR rtl-optimization/78634 (30% performance drop after r242832.)\n\n\tPR rtl-optimization/78634\n\t* config/i386/i386.c (ix86_max_noce_ifcvt_seq_cost): New function.\n\t(TARGET_MAX_NOCE_IFCVT_SEQ_COST): Define.\n\t* ifcvt.c (noce_try_cmove): Add missing cost check.\n\ntestsuite/\n\tPR rtl-optimization/78634\n\t* gcc.target/i386/funcspec-11.c: Also pass -mtune=i686.\n\nFrom-SVN: r244816", "tree": {"sha": "7bf4e542d8044a3f0fe9963033e40db0f94ed55e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bf4e542d8044a3f0fe9963033e40db0f94ed55e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9c4fbe9c1eff61ffe2aa31c67cef2ffd346f674", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9c4fbe9c1eff61ffe2aa31c67cef2ffd346f674", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9c4fbe9c1eff61ffe2aa31c67cef2ffd346f674", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9c4fbe9c1eff61ffe2aa31c67cef2ffd346f674/comments", "author": null, "committer": null, "parents": [{"sha": "8539a302cdc56a76a797a18a83d5d68d9cd9f94a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8539a302cdc56a76a797a18a83d5d68d9cd9f94a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8539a302cdc56a76a797a18a83d5d68d9cd9f94a"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "35694c29b99518e7808634257f434634faba9e5e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c4fbe9c1eff61ffe2aa31c67cef2ffd346f674/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c4fbe9c1eff61ffe2aa31c67cef2ffd346f674/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9c4fbe9c1eff61ffe2aa31c67cef2ffd346f674", "patch": "@@ -1,3 +1,10 @@\n+2017-01-23  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR rtl-optimization/78634\n+\t* config/i386/i386.c (ix86_max_noce_ifcvt_seq_cost): New function.\n+\t(TARGET_MAX_NOCE_IFCVT_SEQ_COST): Define.\n+\t* ifcvt.c (noce_try_cmove): Add missing cost check.\n+\n 2017-01-23  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/70754"}, {"sha": "15498a954ea60148a6332d84f7a8fd01bdd852d8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c4fbe9c1eff61ffe2aa31c67cef2ffd346f674/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c4fbe9c1eff61ffe2aa31c67cef2ffd346f674/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e9c4fbe9c1eff61ffe2aa31c67cef2ffd346f674", "patch": "@@ -50486,6 +50486,28 @@ ix86_spill_class (reg_class_t rclass, machine_mode mode)\n   return NO_REGS;\n }\n \n+/* Implement TARGET_MAX_NOCE_IFCVT_SEQ_COST.  Like the default implementation,\n+   but returns a lower bound.  */\n+\n+static unsigned int\n+ix86_max_noce_ifcvt_seq_cost (edge e)\n+{\n+  bool predictable_p = predictable_edge_p (e);\n+\n+  enum compiler_param param\n+    = (predictable_p\n+       ? PARAM_MAX_RTL_IF_CONVERSION_PREDICTABLE_COST\n+       : PARAM_MAX_RTL_IF_CONVERSION_UNPREDICTABLE_COST);\n+\n+  /* If we have a parameter set, use that, otherwise take a guess using\n+     BRANCH_COST.  */\n+  if (global_options_set.x_param_values[param])\n+    return PARAM_VALUE (param);\n+  else\n+    return BRANCH_COST (true, predictable_p) * COSTS_N_INSNS (2);\n+}\n+\n+\n /* Implement targetm.vectorize.init_cost.  */\n \n static void *\n@@ -52035,6 +52057,8 @@ ix86_run_selftests (void)\n #undef TARGET_EXPAND_DIVMOD_LIBFUNC\n #define TARGET_EXPAND_DIVMOD_LIBFUNC ix86_expand_divmod_libfunc\n \n+#undef TARGET_MAX_NOCE_IFCVT_SEQ_COST\n+#define TARGET_MAX_NOCE_IFCVT_SEQ_COST ix86_max_noce_ifcvt_seq_cost\n #if CHECKING_P\n #undef TARGET_RUN_TARGET_SELFTESTS\n #define TARGET_RUN_TARGET_SELFTESTS selftest::ix86_run_selftests"}, {"sha": "e2d6c6fcc51015c38fcb82ab404bdb7e7aece5b3", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c4fbe9c1eff61ffe2aa31c67cef2ffd346f674/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c4fbe9c1eff61ffe2aa31c67cef2ffd346f674/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=e9c4fbe9c1eff61ffe2aa31c67cef2ffd346f674", "patch": "@@ -1826,7 +1826,7 @@ noce_try_cmove (struct noce_if_info *if_info)\n \t    noce_emit_move_insn (if_info->x, target);\n \n \t  seq = end_ifcvt_sequence (if_info);\n-\t  if (!seq)\n+\t  if (!seq || !noce_conversion_profitable_p (seq, if_info))\n \t    return FALSE;\n \n \t  emit_insn_before_setloc (seq, if_info->jump,"}, {"sha": "5bdeda872232b8356157ef0ccceb557fe5c67b9b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c4fbe9c1eff61ffe2aa31c67cef2ffd346f674/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c4fbe9c1eff61ffe2aa31c67cef2ffd346f674/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e9c4fbe9c1eff61ffe2aa31c67cef2ffd346f674", "patch": "@@ -1,3 +1,8 @@\n+2017-01-23  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR rtl-optimization/78634\n+\t* gcc.target/i386/funcspec-11.c: Also pass -mtune=i686.\n+\n 2017-01-23  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/70754"}, {"sha": "fc79ac507426861e2bf467758f6f8aa22f8805b0", "filename": "gcc/testsuite/gcc.target/i386/funcspec-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c4fbe9c1eff61ffe2aa31c67cef2ffd346f674/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c4fbe9c1eff61ffe2aa31c67cef2ffd346f674/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-11.c?ref=e9c4fbe9c1eff61ffe2aa31c67cef2ffd346f674", "patch": "@@ -1,7 +1,7 @@\n /* PR target/36936 */\n /* { dg-do compile } */\n /* { dg-require-effective-target ia32 } */\n-/* { dg-options \"-O2 -march=i386\" } */\n+/* { dg-options \"-O2 -march=i386 -mtune=i686\" } */\n /* { dg-final { scan-assembler \"cmov\" } } */\n \n extern int foo (int) __attribute__((__target__(\"arch=i686\")));"}]}