{"sha": "4f15b6a282bc4c11ee8b32dac4f05aab10ce3e10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYxNWI2YTI4MmJjNGMxMWVlOGIzMmRhYzRmMDVhYWIxMGNlM2UxMA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2017-10-04T12:00:34Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-10-04T12:00:34Z"}, "message": "New target check: vect_peeling_profitable\n\ngcc/ChangeLog:\n\n2017-10-04  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* doc/sourcebuild.texi: Document vect_peeling_profitable.\n\ngcc/testsuite/ChangeLog:\n\n2017-10-04  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* g++.dg/vect/slp-pr56812.cc: xfail for targets which don't want\n\tvector loop peeling.\n\t* lib/target-supports.exp (check_effective_target_vect_peeling_profitable):\n\tNew proc.\n\nFrom-SVN: r253407", "tree": {"sha": "e2cff2f4ad2fc459a9fb658dd4c251145353c6e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2cff2f4ad2fc459a9fb658dd4c251145353c6e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f15b6a282bc4c11ee8b32dac4f05aab10ce3e10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f15b6a282bc4c11ee8b32dac4f05aab10ce3e10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f15b6a282bc4c11ee8b32dac4f05aab10ce3e10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f15b6a282bc4c11ee8b32dac4f05aab10ce3e10/comments", "author": null, "committer": null, "parents": [{"sha": "30d027da83cdcc174747ce19381525a16c4a4503", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30d027da83cdcc174747ce19381525a16c4a4503", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30d027da83cdcc174747ce19381525a16c4a4503"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "7ad2fe0ba9b3ffe4743daea2da7b02502402197e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f15b6a282bc4c11ee8b32dac4f05aab10ce3e10/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f15b6a282bc4c11ee8b32dac4f05aab10ce3e10/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f15b6a282bc4c11ee8b32dac4f05aab10ce3e10", "patch": "@@ -1,3 +1,7 @@\n+2017-10-04  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* doc/sourcebuild.texi: Document vect_peeling_profitable.\n+\n 2017-10-04  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* doc/sourcebuild.texi: Document vect_intdouble_cvt and"}, {"sha": "1646d0a99911aa7b2e66762e5907fbb0454ed00d", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f15b6a282bc4c11ee8b32dac4f05aab10ce3e10/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f15b6a282bc4c11ee8b32dac4f05aab10ce3e10/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=4f15b6a282bc4c11ee8b32dac4f05aab10ce3e10", "patch": "@@ -1404,6 +1404,9 @@ Target supports a vector misalign access.\n @item vect_no_align\n Target does not support a vector alignment mechanism.\n \n+@item vect_peeling_profitable\n+Target might require to peel loops for alignment purposes.\n+\n @item vect_no_int_min_max\n Target does not support a vector min and max instruction on @code{int}.\n "}, {"sha": "62991d5583e167be8ec4bf712f63a1c190127a17", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f15b6a282bc4c11ee8b32dac4f05aab10ce3e10/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f15b6a282bc4c11ee8b32dac4f05aab10ce3e10/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4f15b6a282bc4c11ee8b32dac4f05aab10ce3e10", "patch": "@@ -1,3 +1,10 @@\n+2017-10-04  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* g++.dg/vect/slp-pr56812.cc: xfail for targets which don't want\n+\tvector loop peeling.\n+\t* lib/target-supports.exp (check_effective_target_vect_peeling_profitable):\n+\tNew proc.\n+\n 2017-10-04  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* gcc.dg/vect/pr66251.c: Replace vect_floatint_cvt with"}, {"sha": "8b24b337efa602198c96504cbe647cfc3b1cd5ff", "filename": "gcc/testsuite/g++.dg/vect/slp-pr56812.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f15b6a282bc4c11ee8b32dac4f05aab10ce3e10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fslp-pr56812.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f15b6a282bc4c11ee8b32dac4f05aab10ce3e10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fslp-pr56812.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fslp-pr56812.cc?ref=4f15b6a282bc4c11ee8b32dac4f05aab10ce3e10", "patch": "@@ -17,4 +17,6 @@ void mydata::Set (float x)\n     data[i] = x;\r\n }\r\n \r\n-/* { dg-final { scan-tree-dump-times \"basic block vectorized\" 1 \"slp1\" } } */\r\n+/* For targets without vector loop peeling the loop becomes cheap\r\n+   enough to be vectorized.  */\r\n+/* { dg-final { scan-tree-dump-times \"basic block vectorized\" 1 \"slp1\" { xfail { ! vect_peeling_profitable } } } } */\r"}, {"sha": "b6f9e51c4817cf8235c8e33b14e2763308eb482a", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f15b6a282bc4c11ee8b32dac4f05aab10ce3e10/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f15b6a282bc4c11ee8b32dac4f05aab10ce3e10/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=4f15b6a282bc4c11ee8b32dac4f05aab10ce3e10", "patch": "@@ -3277,6 +3277,28 @@ proc check_effective_target_vect_floatuint_cvt { } {\n     return $et_vect_floatuint_cvt_saved($et_index)\n }\n \n+# Return 1 if peeling for alignment might be profitable on the target\n+#\n+\n+proc check_effective_target_vect_peeling_profitable { } {\n+    global et_vect_peeling_profitable_saved\n+    global et_index\n+\n+    if [info exists et_vect_peeling_profitable_saved($et_index)] {\n+\tverbose \"check_effective_target_vect_peeling_profitable: using cached result\" 2\n+    } else {\n+\tset et_vect_peeling_profitable_saved($et_index) 1\n+        if { ([istarget s390*-*-*]\n+\t      && [check_effective_target_s390_vx]) } {\n+\t    set et_vect_peeling_profitable_saved($et_index) 0\n+        }\n+    }\n+\n+    verbose \"check_effective_target_vect_peeling_profitable:\\\n+\t     returning $et_vect_peeling_profitable_saved($et_index)\" 2\n+    return $et_vect_peeling_profitable_saved($et_index)\n+}\n+\n # Return 1 if the target supports #pragma omp declare simd, 0 otherwise.\n #\n # This won't change for different subtargets so cache the result."}]}