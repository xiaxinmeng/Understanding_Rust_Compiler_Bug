{"sha": "dd6fe7d4a205dce721999955cd81355588180866", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ2ZmU3ZDRhMjA1ZGNlNzIxOTk5OTU1Y2Q4MTM1NTU4ODE4MDg2Ng==", "commit": {"author": {"name": "Hale Wang", "email": "hale.wang@arm.com", "date": "2014-06-20T04:52:11Z"}, "committer": {"name": "Zhenqiang Chen", "email": "zqchen@gcc.gnu.org", "date": "2014-06-20T04:52:11Z"}, "message": "re PR lto/61123 (With LTO, -fno-short-enums is ignored, resulting in ABI mis-matching in linking.)\n\nc-family/ChangeLog\n2014-06-20 Hale Wang <hale.wang@arm.com>\n\n\tPR lto/61123\n\t* c.opt (fshort-enums): Add to LTO.\n\t* c.opt (fshort-wchar): Likewise.\n\ntestsuite/ChangeLog\n2014-06-20 Hale Wang <hale.wang@arm.com>\n\n\t* gcc.target/arm/lto/: New folder to verify the LTO option.\n\t* gcc.target/arm/lto/pr61123-enum-size_0.c: New test case.\n\t* gcc.target/arm/lto/pr61123-enum-size_1.c: Likewise.\n\t* gcc.target/arm/lto/lto.exp: New exp file used to test LTO option.\n\t* lib/lto.exp (object-readelf): New procedure.\n\nFrom-SVN: r211832", "tree": {"sha": "94837c60008e70507f8d4044f13dc46961cc59ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94837c60008e70507f8d4044f13dc46961cc59ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd6fe7d4a205dce721999955cd81355588180866", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd6fe7d4a205dce721999955cd81355588180866", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd6fe7d4a205dce721999955cd81355588180866", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd6fe7d4a205dce721999955cd81355588180866/comments", "author": null, "committer": null, "parents": [{"sha": "9981da24c04c6899b608076a6d8cfbb7c4be2073", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9981da24c04c6899b608076a6d8cfbb7c4be2073", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9981da24c04c6899b608076a6d8cfbb7c4be2073"}], "stats": {"total": 183, "additions": 181, "deletions": 2}, "files": [{"sha": "d195db74d5a081de0028cd1a92d1b45e7ea5d41f", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd6fe7d4a205dce721999955cd81355588180866/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd6fe7d4a205dce721999955cd81355588180866/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=dd6fe7d4a205dce721999955cd81355588180866", "patch": "@@ -1,3 +1,9 @@\n+2014-06-20 Hale Wang <hale.wang@arm.com>\n+\n+\tPR lto/61123\n+\t* c.opt (fshort-enums): Add to LTO.\n+\t* c.opt (fshort-wchar): Likewise.\n+\n 2014-06-16  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/60439"}, {"sha": "73abd26159a501773623e319ce9cf4aad4b6c113", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd6fe7d4a205dce721999955cd81355588180866/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd6fe7d4a205dce721999955cd81355588180866/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=dd6fe7d4a205dce721999955cd81355588180866", "patch": "@@ -1197,11 +1197,11 @@ C ObjC C++ ObjC++ LTO Optimization Var(flag_short_double)\n Use the same size for double as for float\n \n fshort-enums\n-C ObjC C++ ObjC++ Optimization Var(flag_short_enums)\n+C ObjC C++ ObjC++ LTO Optimization Var(flag_short_enums)\n Use the narrowest integer type possible for enumeration types\n \n fshort-wchar\n-C ObjC C++ ObjC++ Optimization Var(flag_short_wchar)\n+C ObjC C++ ObjC++ LTO Optimization Var(flag_short_wchar)\n Force the underlying type for \\\"wchar_t\\\" to be \\\"unsigned short\\\"\n \n fsigned-bitfields"}, {"sha": "d6002c1f97284350466837a1c1d2d7f3a9b29535", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd6fe7d4a205dce721999955cd81355588180866/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd6fe7d4a205dce721999955cd81355588180866/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dd6fe7d4a205dce721999955cd81355588180866", "patch": "@@ -1,3 +1,11 @@\n+2014-06-20 Hale Wang <hale.wang@arm.com>\n+\n+\t* gcc.target/arm/lto/: New folder to verify the LTO option.\n+\t* gcc.target/arm/lto/pr61123-enum-size_0.c: New test case.\n+\t* gcc.target/arm/lto/pr61123-enum-size_1.c: Likewise.\n+\t* gcc.target/arm/lto/lto.exp: New exp file used to test LTO option.\n+\t* lib/lto.exp (object-readelf): New procedure.\n+\n 2014-06-19  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/61454"}, {"sha": "7513411731f15bc046cf188ba4a39fbe09d3a07f", "filename": "gcc/testsuite/gcc.target/arm/lto/lto.exp", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd6fe7d4a205dce721999955cd81355588180866/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flto%2Flto.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd6fe7d4a205dce721999955cd81355588180866/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flto%2Flto.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flto%2Flto.exp?ref=dd6fe7d4a205dce721999955cd81355588180866", "patch": "@@ -0,0 +1,59 @@\n+# Copyright (C) 2009-2014 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+#\n+# Contributed by Diego Novillo <dnovillo@google.com>\n+\n+\n+# Test link-time optimization across multiple files.\n+#\n+# Programs are broken into multiple files.  Each one is compiled\n+# separately with LTO information.  The final executable is generated\n+# by collecting all the generated object files using regular LTO or WHOPR.\n+\n+if $tracelevel then {\n+    strace $tracelevel\n+}\n+\n+# Load procedures from common libraries.\n+load_lib standard.exp\n+load_lib gcc.exp\n+\n+# Load the language-independent compabibility support procedures.\n+load_lib lto.exp\n+\n+# If LTO has not been enabled, bail.\n+if { ![check_effective_target_lto] } {\n+    return\n+}\n+\n+gcc_init\n+lto_init no-mathlib\n+\n+# Define an identifier for use with this suite to avoid name conflicts\n+# with other lto tests running at the same time.\n+set sid \"c_lto\"\n+\n+# Main loop.\n+foreach src [lsort [find $srcdir/$subdir *_0.c]] {\n+    # If we're only testing specific files and this isn't one of them, skip it.\n+    if ![runtest_file_p $runtests $src] then {\n+\tcontinue\n+    }\n+\n+    lto-execute $src $sid\n+}\n+\n+lto_finish"}, {"sha": "c23f9d857605022b90eee65ea87b6c33152f0f3c", "filename": "gcc/testsuite/gcc.target/arm/lto/pr61123-enum-size_0.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd6fe7d4a205dce721999955cd81355588180866/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flto%2Fpr61123-enum-size_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd6fe7d4a205dce721999955cd81355588180866/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flto%2Fpr61123-enum-size_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flto%2Fpr61123-enum-size_0.c?ref=dd6fe7d4a205dce721999955cd81355588180866", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-lto-do link } */\n+/* { dg-lto-options { { -fno-short-enums -Wl,-Ur,--no-enum-size-warning -Os -nostdlib -flto } } } */\n+\n+#include <stdlib.h>\n+\n+enum enum_size_attribute\n+{\n+  small_size, int_size\n+};\n+\n+struct debug_ABI_enum_size\n+{\n+  enum enum_size_attribute es;\n+};\n+\n+int\n+foo1 (struct debug_ABI_enum_size *x)\n+{\n+  return sizeof (x->es);\n+}\n+\n+/* { dg-final { object-readelf Tag_ABI_enum_size int { target arm_eabi } } } */"}, {"sha": "9561efaf3e700ac8e106022ef610712b398ccf9e", "filename": "gcc/testsuite/gcc.target/arm/lto/pr61123-enum-size_1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd6fe7d4a205dce721999955cd81355588180866/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flto%2Fpr61123-enum-size_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd6fe7d4a205dce721999955cd81355588180866/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flto%2Fpr61123-enum-size_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flto%2Fpr61123-enum-size_1.c?ref=dd6fe7d4a205dce721999955cd81355588180866", "patch": "@@ -0,0 +1,5 @@\n+int\n+foo2 (int y)\n+{\n+  return y*10;\n+}"}, {"sha": "5182558c7b72cf5974144ba8ce75591c0483ca32", "filename": "gcc/testsuite/lib/lto.exp", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd6fe7d4a205dce721999955cd81355588180866/gcc%2Ftestsuite%2Flib%2Flto.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd6fe7d4a205dce721999955cd81355588180866/gcc%2Ftestsuite%2Flib%2Flto.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Flto.exp?ref=dd6fe7d4a205dce721999955cd81355588180866", "patch": "@@ -650,3 +650,82 @@ proc scan-symbol { args } {\n \tfail \"scan-symbol $args\"\n     }\n }\n+\n+# Call pass if object readelf is ok, otherwise fail.\n+# example: /* { dg-final { object-readelf Tag_ABI_enum_size int} } */\n+proc object-readelf { args } {\n+    global readelf\n+    global base_dir\n+    upvar 2 execname execname\n+\n+    if { [llength $args] < 2 } {\n+\terror \"object-readelf: too few arguments\"\n+\treturn\n+    }\n+    if { [llength $args] > 3 } {\n+\terror \"object-readelf: too many arguments\"\n+\treturn\n+    }\n+    if { [llength $args] >= 3 } {\n+\tswitch [dg-process-target [lindex $args 2]] {\n+\t    \"S\" { }\n+\t    \"N\" { return }\n+\t    \"F\" { setup_xfail \"*-*-*\" }\n+\t    \"P\" { }\n+\t}\n+    }\n+\n+    # Find size like we find g++ in g++.exp.\n+    if ![info exists readelf]  {\n+\tset readelf [findfile $base_dir/../../../binutils/readelf \\\n+\t\t$base_dir/../../../binutils/readelf \\\n+\t\t[findfile $base_dir/../../readelf $base_dir/../../readelf \\\n+\t\t[findfile $base_dir/readelf $base_dir/readelf \\\n+\t\t[transform readelf]]]]\n+\tverbose -log \"readelf is $readelf\"\n+    }\n+\n+    set what [lindex $args 0]\n+    set with [lindex $args 1]\n+\n+    if ![file_on_host exists $execname] {\n+\tverbose -log \"$execname does not exist\"\n+\tunresolved \"object-readelf $what \"\n+\treturn\n+    }\n+\n+    set output [remote_exec host \"$readelf -A\" \"$execname\"]\n+    set status [lindex $output 0]\n+    if { $status != 0 } {\n+\tverbose -log \"object-readelf: $readelf failed\"\n+\tunresolved \"object-readelf $what $execname\"\n+\treturn\n+    }\n+\n+    set text [lindex $output 1]\n+    set lines [split $text \"\\n\"]\n+\n+    set done 0\n+    set i 0\n+    while { !$done } {\n+\tset line_tex [lindex $lines $i]\n+\tif { [llength ${line_tex}] > 1} {\n+\t    incr i\n+\t    if [regexp -- $what $line_tex] {\n+\t        set match [regexp -- $with $line_tex]\n+\t\tset done 1\n+\t    }\n+\t} else {\n+\t    set done 1\n+\t}\n+    }\n+\n+    verbose -log \"$what size is $with;\"\n+    if { $match == 1 } {\n+\tpass \"object-readelf $what size is correct.\"\n+    } else {\n+\tfail \"object-readelf $what size is incorrect.\"\n+    }\n+}\n+\n+"}]}