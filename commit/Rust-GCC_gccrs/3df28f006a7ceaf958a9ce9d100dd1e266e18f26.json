{"sha": "3df28f006a7ceaf958a9ce9d100dd1e266e18f26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RmMjhmMDA2YTdjZWFmOTU4YTljZTlkMTAwZGQxZTI2NmUxOGYyNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-09-30T16:21:03Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-30T16:21:03Z"}, "message": "Remove global call sets: postreload.c\n\nThe \"|= fixed_regs\" in reload_combine isn't necessary, since the\nset is only used to determine which values have changed (rather than,\nfor example, which registers are available for use).\n\nIn reload_cse_move2add we can be accurate about which registers\nare still available.  BLKmode indicates a continuation of the\nprevious register, and since clobbers_reg_p handles multi-register\nvalues, it's enough to skip over BLKmode entries and just test the\nstart register.\n\n2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* postreload.c (reload_combine_recognize_pattern): Use crtl->abi\n\twhen deciding whether a register is free for use after RA.\n\t(reload_combine): Remove unnecessary use of fixed_reg_set.\n\t(reload_cse_move2add): Use insn_callee_abi to get the ABI of the\n\tcall insn target.  Use reg_mode when testing whether a register\n\tis no longer available.\n\nFrom-SVN: r276328", "tree": {"sha": "ebe1e2ff7e6b3f96657d2c4f32da863ed2ea8fa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebe1e2ff7e6b3f96657d2c4f32da863ed2ea8fa9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3df28f006a7ceaf958a9ce9d100dd1e266e18f26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3df28f006a7ceaf958a9ce9d100dd1e266e18f26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3df28f006a7ceaf958a9ce9d100dd1e266e18f26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3df28f006a7ceaf958a9ce9d100dd1e266e18f26/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a1e6ee38e708ef2bdef4dfbb99473344bd56fa2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1e6ee38e708ef2bdef4dfbb99473344bd56fa2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1e6ee38e708ef2bdef4dfbb99473344bd56fa2f"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "208d32fe28c8d7cf16e89d6c3c540a8ebec07126", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df28f006a7ceaf958a9ce9d100dd1e266e18f26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df28f006a7ceaf958a9ce9d100dd1e266e18f26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3df28f006a7ceaf958a9ce9d100dd1e266e18f26", "patch": "@@ -1,3 +1,12 @@\n+2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* postreload.c (reload_combine_recognize_pattern): Use crtl->abi\n+\twhen deciding whether a register is free for use after RA.\n+\t(reload_combine): Remove unnecessary use of fixed_reg_set.\n+\t(reload_cse_move2add): Use insn_callee_abi to get the ABI of the\n+\tcall insn target.  Use reg_mode when testing whether a register\n+\tis no longer available.\n+\n 2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* target.def (return_call_with_max_clobbers): Delete."}, {"sha": "e66377e6cba50be268196c05a007a2fa2de8197d", "filename": "gcc/postreload.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df28f006a7ceaf958a9ce9d100dd1e266e18f26/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df28f006a7ceaf958a9ce9d100dd1e266e18f26/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=3df28f006a7ceaf958a9ce9d100dd1e266e18f26", "patch": "@@ -1136,7 +1136,8 @@ reload_combine_recognize_pattern (rtx_insn *insn)\n \t      if (TEST_HARD_REG_BIT (reg_class_contents[INDEX_REG_CLASS], i)\n \t\t  && reg_state[i].use_index == RELOAD_COMBINE_MAX_USES\n \t\t  && reg_state[i].store_ruid <= reg_state[regno].use_ruid\n-\t\t  && (call_used_or_fixed_reg_p (i) || df_regs_ever_live_p (i))\n+\t\t  && (crtl->abi->clobbers_full_reg_p (i)\n+\t\t      || df_regs_ever_live_p (i))\n \t\t  && (!frame_pointer_needed || i != HARD_FRAME_POINTER_REGNUM)\n \t\t  && !fixed_regs[i] && !global_regs[i]\n \t\t  && hard_regno_nregs (i, GET_MODE (reg)) == 1\n@@ -1332,9 +1333,6 @@ reload_combine (void)\n \t{\n \t  rtx link;\n \t  HARD_REG_SET used_regs = insn_callee_abi (insn).full_reg_clobbers ();\n-\t  /* ??? This preserves traditional behavior; it might not be\n-\t     needed.  */\n-\t  used_regs |= fixed_reg_set;\n \n \t  for (r = 0; r < FIRST_PSEUDO_REGISTER; r++)\n \t    if (TEST_HARD_REG_BIT (used_regs, r))\n@@ -2126,12 +2124,13 @@ reload_cse_move2add (rtx_insn *first)\n \t unknown values.  */\n       if (CALL_P (insn))\n \t{\n+\t  function_abi callee_abi = insn_callee_abi (insn);\n \t  for (i = FIRST_PSEUDO_REGISTER - 1; i >= 0; i--)\n-\t    {\n-\t      if (call_used_or_fixed_reg_p (i))\n-\t\t/* Reset the information about this register.  */\n-\t\treg_mode[i] = VOIDmode;\n-\t    }\n+\t    if (reg_mode[i] != VOIDmode\n+\t\t&& reg_mode[i] != BLKmode\n+\t\t&& callee_abi.clobbers_reg_p (reg_mode[i], i))\n+\t      /* Reset the information about this register.  */\n+\t      reg_mode[i] = VOIDmode;\n \t}\n     }\n   return changed;"}]}