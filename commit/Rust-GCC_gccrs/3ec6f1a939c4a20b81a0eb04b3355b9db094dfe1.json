{"sha": "3ec6f1a939c4a20b81a0eb04b3355b9db094dfe1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VjNmYxYTkzOWM0YTIwYjgxYTBlYjA0YjMzNTViOWRiMDk0ZGZlMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-02-18T23:39:28Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-02-18T23:39:28Z"}, "message": "sparc.c (eligible_for_epilogue_delay): Don't put assignments from FP constants sonce 'Y' output code can't handle it.\n\n\t* config/sparc/sparc.c (eligible_for_epilogue_delay): Don't put\n\tassignments from FP constants sonce 'Y' output code can't handle it.\n\t(eligible_for_sibcall_delay): Likewise.\n\nFrom-SVN: r39854", "tree": {"sha": "485167bf51d20fe68e51b2e086db1aaa3e8688b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/485167bf51d20fe68e51b2e086db1aaa3e8688b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ec6f1a939c4a20b81a0eb04b3355b9db094dfe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ec6f1a939c4a20b81a0eb04b3355b9db094dfe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ec6f1a939c4a20b81a0eb04b3355b9db094dfe1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ec6f1a939c4a20b81a0eb04b3355b9db094dfe1/comments", "author": null, "committer": null, "parents": [{"sha": "63c499dc554635235a4a2a7519f1fa0c2458913f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63c499dc554635235a4a2a7519f1fa0c2458913f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63c499dc554635235a4a2a7519f1fa0c2458913f"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "e35a5af6f5572f641895257dedd451a37708799c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ec6f1a939c4a20b81a0eb04b3355b9db094dfe1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ec6f1a939c4a20b81a0eb04b3355b9db094dfe1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ec6f1a939c4a20b81a0eb04b3355b9db094dfe1", "patch": "@@ -1,5 +1,9 @@\n Sun Feb 18 15:45:17 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* config/sparc/sparc.c (eligible_for_epilogue_delay): Don't put\n+\tassignments from FP constants sonce 'Y' output code can't handle it.\n+\t(eligible_for_sibcall_delay): Likewise.\n+\n \t* flow.c (print_rtl_and_abort_fcn): Renamed from print_rtl_and_abort.\n \tCall fancy_abort directly, passing args.\n \t(print_rtl_and_abort): Now a macro, like fancy_abort."}, {"sha": "2072fec8932624cc61428037d90390d59e129cfd", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ec6f1a939c4a20b81a0eb04b3355b9db094dfe1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ec6f1a939c4a20b81a0eb04b3355b9db094dfe1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=3ec6f1a939c4a20b81a0eb04b3355b9db094dfe1", "patch": "@@ -2414,7 +2414,8 @@ eligible_for_epilogue_delay (trial, slot)\n   src = SET_SRC (pat);\n \n   /* This matches \"*return_[qhs]i\" or even \"*return_di\" on TARGET_ARCH64.  */\n-  if (arith_operand (src, GET_MODE (src)))\n+  if (GET_MODE_CLASS (GET_MODE (src)) != MODE_FLOAT\n+      && arith_operand (src, GET_MODE (src)))\n     {\n       if (TARGET_ARCH64)\n         return GET_MODE_SIZE (GET_MODE (src)) <= GET_MODE_SIZE (DImode);\n@@ -2423,7 +2424,8 @@ eligible_for_epilogue_delay (trial, slot)\n     }\n \n   /* This matches \"*return_di\".  */\n-  else if (arith_double_operand (src, GET_MODE (src)))\n+  else if (GET_MODE_CLASS (GET_MODE (src)) != MODE_FLOAT\n+\t   && arith_double_operand (src, GET_MODE (src)))\n     return GET_MODE_SIZE (GET_MODE (src)) <= GET_MODE_SIZE (DImode);\n \n   /* This matches \"*return_sf_no_fpu\".  */\n@@ -2520,15 +2522,17 @@ eligible_for_sibcall_delay (trial)\n \n   src = SET_SRC (pat);\n \n-  if (arith_operand (src, GET_MODE (src)))\n+  if (GET_MODE_CLASS (GET_MODE (src)) != MODE_FLOAT\n+      && arith_operand (src, GET_MODE (src)))\n     {\n       if (TARGET_ARCH64)\n         return GET_MODE_SIZE (GET_MODE (src)) <= GET_MODE_SIZE (DImode);\n       else\n         return GET_MODE_SIZE (GET_MODE (src)) <= GET_MODE_SIZE (SImode);\n     }\n \n-  else if (arith_double_operand (src, GET_MODE (src)))\n+  else if (GET_MODE_CLASS (GET_MODE (src)) != MODE_FLOAT\n+\t   && arith_double_operand (src, GET_MODE (src)))\n     return GET_MODE_SIZE (GET_MODE (src)) <= GET_MODE_SIZE (DImode);\n \n   else if (! TARGET_FPU && restore_operand (SET_DEST (pat), SFmode)"}]}