{"sha": "d9a72d17e64f6a1b50ef859dadcf86551de1b265", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlhNzJkMTdlNjRmNmExYjUwZWY4NTlkYWRjZjg2NTUxZGUxYjI2NQ==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2014-09-12T10:42:47Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2014-09-12T10:42:47Z"}, "message": "tree.c (integer_each_onep): New function.\n\n2014-09-12  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* tree.c (integer_each_onep): New function.\n\t* tree.h (integer_each_onep): Declare it.\n\t* fold-const.c (fold_binary_loc): Use it for ~A + 1 to -A and\n\t-A - 1 to ~A.  Disable (X & 1) ^ 1, (X ^ 1) & 1 and ~X & 1 to\n\t(X & 1) == 0 for vector and complex.\ngcc/testsuite/\n\t* gcc.dg/vec-andxor1.c: New file.\n\nFrom-SVN: r215209", "tree": {"sha": "27bbde3457695f894291e97fcc17689a975b4a96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27bbde3457695f894291e97fcc17689a975b4a96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9a72d17e64f6a1b50ef859dadcf86551de1b265", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9a72d17e64f6a1b50ef859dadcf86551de1b265", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9a72d17e64f6a1b50ef859dadcf86551de1b265", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9a72d17e64f6a1b50ef859dadcf86551de1b265/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e4a9c55ade081438460f6b0db8afbaad34b05d35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4a9c55ade081438460f6b0db8afbaad34b05d35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4a9c55ade081438460f6b0db8afbaad34b05d35"}], "stats": {"total": 59, "additions": 55, "deletions": 4}, "files": [{"sha": "98586be01d1c52c34d4a6973b518b57bd852093a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a72d17e64f6a1b50ef859dadcf86551de1b265/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a72d17e64f6a1b50ef859dadcf86551de1b265/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9a72d17e64f6a1b50ef859dadcf86551de1b265", "patch": "@@ -1,3 +1,11 @@\n+2014-09-12  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* tree.c (integer_each_onep): New function.\n+\t* tree.h (integer_each_onep): Declare it.\n+\t* fold-const.c (fold_binary_loc): Use it for ~A + 1 to -A and\n+\t-A - 1 to ~A.  Disable (X & 1) ^ 1, (X ^ 1) & 1 and ~X & 1 to\n+\t(X & 1) == 0 for vector and complex.\n+\n 2014-09-12  Wilco Dijkstra  <wilco.dijkstra@arm.com>\n \n \t* gcc/config/aarch64/aarch64.c (cortexa57_regmove_cost): New cost table"}, {"sha": "f7bf5254e1807291b2bc8ab3b5d1add73b9ed1aa", "filename": "gcc/fold-const.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a72d17e64f6a1b50ef859dadcf86551de1b265/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a72d17e64f6a1b50ef859dadcf86551de1b265/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=d9a72d17e64f6a1b50ef859dadcf86551de1b265", "patch": "@@ -10092,7 +10092,7 @@ fold_binary_loc (location_t loc,\n \t{\n \t  /* Convert ~A + 1 to -A.  */\n \t  if (TREE_CODE (arg0) == BIT_NOT_EXPR\n-\t      && integer_onep (arg1))\n+\t      && integer_each_onep (arg1))\n \t    return fold_build1_loc (loc, NEGATE_EXPR, type,\n \t\t\t\tfold_convert_loc (loc, type,\n \t\t\t\t\t\t  TREE_OPERAND (arg0, 0)));\n@@ -10619,9 +10619,8 @@ fold_binary_loc (location_t loc,\n \t\t\t    fold_convert_loc (loc, type,\n \t\t\t\t\t      TREE_OPERAND (arg0, 0)));\n       /* Convert -A - 1 to ~A.  */\n-      if (TREE_CODE (type) != COMPLEX_TYPE\n-\t  && TREE_CODE (arg0) == NEGATE_EXPR\n-\t  && integer_onep (arg1)\n+      if (TREE_CODE (arg0) == NEGATE_EXPR\n+\t  && integer_each_onep (arg1)\n \t  && !TYPE_OVERFLOW_TRAPS (type))\n \treturn fold_build1_loc (loc, BIT_NOT_EXPR, type,\n \t\t\t    fold_convert_loc (loc, type,\n@@ -11384,6 +11383,7 @@ fold_binary_loc (location_t loc,\n \n       /* Fold (X & 1) ^ 1 as (X & 1) == 0.  */\n       if (TREE_CODE (arg0) == BIT_AND_EXPR\n+\t  && INTEGRAL_TYPE_P (type)\n \t  && integer_onep (TREE_OPERAND (arg0, 1))\n \t  && integer_onep (arg1))\n \treturn fold_build2_loc (loc, EQ_EXPR, type, arg0,\n@@ -11494,6 +11494,7 @@ fold_binary_loc (location_t loc,\n \n       /* Fold (X ^ 1) & 1 as (X & 1) == 0.  */\n       if (TREE_CODE (arg0) == BIT_XOR_EXPR\n+\t  && INTEGRAL_TYPE_P (type)\n \t  && integer_onep (TREE_OPERAND (arg0, 1))\n \t  && integer_onep (arg1))\n \t{\n@@ -11507,6 +11508,7 @@ fold_binary_loc (location_t loc,\n \t}\n       /* Fold ~X & 1 as (X & 1) == 0.  */\n       if (TREE_CODE (arg0) == BIT_NOT_EXPR\n+\t  && INTEGRAL_TYPE_P (type)\n \t  && integer_onep (arg1))\n \t{\n \t  tree tem2;"}, {"sha": "fb727bf046484c2ce34ca5733905735b5e91aa91", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a72d17e64f6a1b50ef859dadcf86551de1b265/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a72d17e64f6a1b50ef859dadcf86551de1b265/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d9a72d17e64f6a1b50ef859dadcf86551de1b265", "patch": "@@ -1,3 +1,7 @@\n+2014-09-12  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* gcc.dg/vec-andxor1.c: New file.\n+\n 2014-09-11  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR target/58757"}, {"sha": "4aa454e663bcdbdf803ce66c69e7a5bb845d9348", "filename": "gcc/testsuite/gcc.dg/vec-andxor1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a72d17e64f6a1b50ef859dadcf86551de1b265/gcc%2Ftestsuite%2Fgcc.dg%2Fvec-andxor1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a72d17e64f6a1b50ef859dadcf86551de1b265/gcc%2Ftestsuite%2Fgcc.dg%2Fvec-andxor1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvec-andxor1.c?ref=d9a72d17e64f6a1b50ef859dadcf86551de1b265", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O\" } */\n+\n+typedef int vec __attribute__((vector_size(4*sizeof(int))));\n+\n+__attribute__((noinline,noclone))\n+void f (vec *x) {\n+  *x = (*x & 1) ^ 1;\n+}\n+\n+int main() {\n+  vec x = { 1, 2, 3, 4 };\n+  f(&x);\n+  if (x[0] != 0 || x[1] != 1)\n+    __builtin_abort();\n+  return 0;\n+}"}, {"sha": "6ad05756df00b25db24de08e94650c8fbdbc9416", "filename": "gcc/tree.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a72d17e64f6a1b50ef859dadcf86551de1b265/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a72d17e64f6a1b50ef859dadcf86551de1b265/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=d9a72d17e64f6a1b50ef859dadcf86551de1b265", "patch": "@@ -2169,6 +2169,21 @@ integer_onep (const_tree expr)\n     }\n }\n \n+/* Return 1 if EXPR is the integer constant one.  For complex and vector,\n+   return 1 if every piece is the integer constant one.  */\n+\n+int\n+integer_each_onep (const_tree expr)\n+{\n+  STRIP_NOPS (expr);\n+\n+  if (TREE_CODE (expr) == COMPLEX_CST)\n+    return (integer_onep (TREE_REALPART (expr))\n+\t    && integer_onep (TREE_IMAGPART (expr)));\n+  else\n+    return integer_onep (expr);\n+}\n+\n /* Return 1 if EXPR is an integer containing all 1's in as much precision as\n    it contains, or a complex or vector whose subparts are such integers.  */\n "}, {"sha": "93a12d403402ecacfe039cd8fdd8ba28eb2cd7a7", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9a72d17e64f6a1b50ef859dadcf86551de1b265/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9a72d17e64f6a1b50ef859dadcf86551de1b265/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=d9a72d17e64f6a1b50ef859dadcf86551de1b265", "patch": "@@ -3947,6 +3947,11 @@ extern int integer_zerop (const_tree);\n \n extern int integer_onep (const_tree);\n \n+/* integer_onep (tree x) is nonzero if X is an integer constant of value 1, or\n+   a vector or complex where each part is 1.  */\n+\n+extern int integer_each_onep (const_tree);\n+\n /* integer_all_onesp (tree x) is nonzero if X is an integer constant\n    all of whose significant bits are 1.  */\n "}]}