{"sha": "a5d3586a9b159dd7c93992875b89605bedd0a60a", "node_id": "C_kwDOANBUbNoAKGE1ZDM1ODZhOWIxNTlkZDdjOTM5OTI4NzViODk2MDViZWRkMGE2MGE", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-10-05T16:24:42Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-02-21T11:36:32Z"}, "message": "gccrs: Support looking up super traits for trait items\n\nWhen supporting calls to super traits we need to allow lookups based on\nthe super traits as specified on the TraitReferences.\n\nFixes #1555\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-hir-trait-ref.h (lookup_trait_item): Add lookup\n\tin super_trait.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/torture/issue-1555.rs: New test.", "tree": {"sha": "b019a09ec6c7ad201fa8e02afd0086722c8e9d9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b019a09ec6c7ad201fa8e02afd0086722c8e9d9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5d3586a9b159dd7c93992875b89605bedd0a60a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5d3586a9b159dd7c93992875b89605bedd0a60a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5d3586a9b159dd7c93992875b89605bedd0a60a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5d3586a9b159dd7c93992875b89605bedd0a60a/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31b77593edbf623fb8f84e35baeb927fdd7c55b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31b77593edbf623fb8f84e35baeb927fdd7c55b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31b77593edbf623fb8f84e35baeb927fdd7c55b6"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "7eeb33003876e8cb34146c1e96068fb3ca058735", "filename": "gcc/rust/typecheck/rust-hir-trait-ref.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d3586a9b159dd7c93992875b89605bedd0a60a/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d3586a9b159dd7c93992875b89605bedd0a60a/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-ref.h?ref=a5d3586a9b159dd7c93992875b89605bedd0a60a", "patch": "@@ -336,6 +336,15 @@ class TraitReference\n \t    return true;\n \t  }\n       }\n+\n+    // lookup super traits\n+    for (const auto &super_trait : super_traits)\n+      {\n+\tbool found = super_trait->lookup_trait_item (ident, ref);\n+\tif (found)\n+\t  return true;\n+      }\n+\n     return false;\n   }\n \n@@ -351,6 +360,16 @@ class TraitReference\n \tif (ident.compare (item.get_identifier ()) == 0)\n \t  return &item;\n       }\n+\n+    // lookup super traits\n+    for (const auto &super_trait : super_traits)\n+      {\n+\tconst TraitItemReference *res\n+\t  = super_trait->lookup_trait_item (ident, type);\n+\tif (!res->is_error ())\n+\t  return res;\n+      }\n+\n     return &TraitItemReference::error_node ();\n   }\n "}, {"sha": "adb489116488130ed259e515d7eb47d74e469077", "filename": "gcc/testsuite/rust/compile/torture/issue-1555.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d3586a9b159dd7c93992875b89605bedd0a60a/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1555.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d3586a9b159dd7c93992875b89605bedd0a60a/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1555.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1555.rs?ref=a5d3586a9b159dd7c93992875b89605bedd0a60a", "patch": "@@ -0,0 +1,48 @@\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+struct Foo(i32);\n+trait Bar {\n+    fn baz(&self);\n+}\n+\n+trait Baz: Bar {\n+    fn qux(&self);\n+}\n+\n+impl Bar for Foo {\n+    fn baz(&self) {\n+        unsafe {\n+            let a = \"baz %i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, self.0);\n+        }\n+    }\n+}\n+\n+impl Baz for Foo {\n+    fn qux(&self) {\n+        unsafe {\n+            let a = \"qux %i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, self.0);\n+        }\n+    }\n+}\n+\n+fn static_dispatch<T: Baz>(t: &T) {\n+    t.baz();\n+    t.qux();\n+}\n+\n+pub fn main() {\n+    let a;\n+    a = &Foo(123);\n+\n+    static_dispatch(a);\n+}"}]}