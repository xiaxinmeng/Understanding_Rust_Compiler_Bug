{"sha": "a849584587c317e47f7581df2181efabb948d08f", "node_id": "C_kwDOANBUbNoAKGE4NDk1ODQ1ODdjMzE3ZTQ3Zjc1ODFkZjIxODFlZmFiYjk0OGQwOGY", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-04-27T13:29:34Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-04-27T14:48:32Z"}, "message": "libstdc++: Add pretty printer for std::atomic\n\nFor the atomic specializations for shared_ptr and weak_ptr we can reuse\nthe existing SharedPointerPrinter, with a small tweak.\n\nlibstdc++-v3/ChangeLog:\n\n\t* python/libstdcxx/v6/printers.py (SharedPointerPrinter): Add\n\tsupport for atomic<shared_ptr<T>> and atomic<weak_ptr<T>>.\n\t(StdAtomicPrinter): New printer.\n\t(build_libstdcxx_dictionary): Register new printer.\n\t* testsuite/libstdc++-prettyprinters/cxx11.cc: Test std::atomic.\n\t* testsuite/libstdc++-prettyprinters/cxx20.cc: Test atomic smart\n\tpointers.", "tree": {"sha": "25e717b9a3eecc1afebb29cbe0aee70ee9967a54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25e717b9a3eecc1afebb29cbe0aee70ee9967a54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a849584587c317e47f7581df2181efabb948d08f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a849584587c317e47f7581df2181efabb948d08f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a849584587c317e47f7581df2181efabb948d08f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a849584587c317e47f7581df2181efabb948d08f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e07ea03fce26197d31a9654f4ba217e842049d65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e07ea03fce26197d31a9654f4ba217e842049d65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e07ea03fce26197d31a9654f4ba217e842049d65"}], "stats": {"total": 72, "additions": 69, "deletions": 3}, "files": [{"sha": "0bd793c0897577181ab96cbd9e3b22528b4da17a", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 50, "deletions": 3, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a849584587c317e47f7581df2181efabb948d08f/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a849584587c317e47f7581df2181efabb948d08f/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=a849584587c317e47f7581df2181efabb948d08f", "patch": "@@ -218,7 +218,7 @@ def __next__(self):\n         return ('get()', val)\n \n class SharedPointerPrinter:\n-    \"Print a shared_ptr or weak_ptr\"\n+    \"Print a shared_ptr, weak_ptr, atomic<shared_ptr>, or atomic<weak_ptr>\"\n \n     def __init__ (self, typename, val):\n         self.typename = strip_versioned_namespace(typename)\n@@ -228,17 +228,29 @@ def __init__ (self, typename, val):\n     def children (self):\n         return SmartPtrIterator(self.pointer)\n \n+    # Return the _Sp_counted_base<>* that holds the refcounts.\n+    def _get_refcounts (self):\n+        if self.typename == 'std::atomic':\n+            # A tagged pointer is stored as uintptr_t.\n+            ptr_val = self.val['_M_refcount']['_M_val']['_M_i']\n+            ptr_val = ptr_val - (ptr_val % 2) # clear lock bit\n+            ptr_type = find_type(self.val['_M_refcount'].type, 'pointer')\n+            return ptr_val.cast(ptr_type)\n+        return self.val['_M_refcount']['_M_pi']\n+\n     def to_string (self):\n         state = 'empty'\n-        refcounts = self.val['_M_refcount']['_M_pi']\n+        refcounts = self._get_refcounts()\n+        targ = self.val.type.template_argument(0)\n+\n         if refcounts != 0:\n             usecount = refcounts['_M_use_count']\n             weakcount = refcounts['_M_weak_count']\n             if usecount == 0:\n                 state = 'expired, weak count %d' % weakcount\n             else:\n                 state = 'use count %d, weak count %d' % (usecount, weakcount - 1)\n-        return '%s<%s> (%s)' % (self.typename, str(self.val.type.template_argument(0)), state)\n+        return '%s<%s> (%s)' % (self.typename, str(targ), state)\n \n def _tuple_impl_get(val):\n     \"Return the tuple element stored in a _Tuple_impl<N, T> base class.\"\n@@ -1708,6 +1720,40 @@ def children(self):\n     def display_hint(self):\n         return 'array'\n \n+class StdAtomicPrinter:\n+    \"Print a std:atomic\"\n+\n+    def __init__(self, typename, val):\n+        self.typename = typename\n+        self.val = val\n+        self.shptr_printer = None\n+        self.value_type = self.val.type.template_argument(0)\n+        if self.value_type.tag is not None:\n+            typ = strip_versioned_namespace(self.value_type.tag)\n+            if typ.startswith('std::shared_ptr<') or typ.startswith('std::weak_ptr<'):\n+                impl = val['_M_impl']\n+                self.shptr_printer = SharedPointerPrinter(typename, impl)\n+                self.children = self._shptr_children\n+\n+    def _shptr_children(self):\n+        return SmartPtrIterator(self.shptr_printer.pointer)\n+\n+    def to_string(self):\n+        if self.shptr_printer is not None:\n+            return self.shptr_printer.to_string()\n+\n+        if self.value_type.code == gdb.TYPE_CODE_INT:\n+            val = self.val['_M_i']\n+        elif self.value_type.code == gdb.TYPE_CODE_FLT:\n+            val = self.val['_M_fp']\n+        elif self.value_type.code == gdb.TYPE_CODE_PTR:\n+            val = self.val['_M_b']['_M_p']\n+        elif self.value_type.code == gdb.TYPE_CODE_BOOL:\n+            val = self.val['_M_base']['_M_i']\n+        else:\n+            val = self.val['_M_i']\n+        return '%s<%s> = { %s }' % (self.typename, str(self.value_type), val)\n+\n # A \"regular expression\" printer which conforms to the\n # \"SubPrettyPrinter\" protocol from gdb.printing.\n class RxPrinter(object):\n@@ -2175,6 +2221,7 @@ def build_libstdcxx_dictionary ():\n \n     libstdcxx_printer.add_version('std::', 'initializer_list',\n                                   StdInitializerListPrinter)\n+    libstdcxx_printer.add_version('std::', 'atomic', StdAtomicPrinter)\n \n     # std::regex components\n     libstdcxx_printer.add_version('std::__detail::', '_State',"}, {"sha": "f97640a01891ddb24f42b043d5ce3b858d712887", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/cxx11.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a849584587c317e47f7581df2181efabb948d08f/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a849584587c317e47f7581df2181efabb948d08f/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc?ref=a849584587c317e47f7581df2181efabb948d08f", "patch": "@@ -26,6 +26,7 @@\n #include <iostream>\n #include <future>\n #include <initializer_list>\n+#include <atomic>\n #include \"../util/testsuite_allocator.h\" // NullablePointer\n \n typedef std::tuple<int, int> ExTuple;\n@@ -197,6 +198,15 @@ main()\n   std::initializer_list<int> il = {3, 4};\n   // { dg-final { note-test il {std::initializer_list of length 2 = {3, 4}} } }\n \n+  std::atomic<int> ai{100};\n+  // { dg-final { note-test ai {std::atomic<int> = { 100 }} } }\n+  long l{};\n+  std::atomic<long*> ap{&l};\n+  // { dg-final { regexp-test ap {std::atomic.long \\*. = { 0x.* }} } }\n+  struct Value { int i, j; };\n+  std::atomic<Value> av{{8, 9}};\n+  // { dg-final { note-test av {std::atomic<Value> = { {i = 8, j = 9} }} } }\n+\n   placeholder(\"\"); // Mark SPOT\n   use(efl);\n   use(fl);"}, {"sha": "f027d0eae38866cdc64af6aca64ccbff8fac77cf", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/cxx20.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a849584587c317e47f7581df2181efabb948d08f/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a849584587c317e47f7581df2181efabb948d08f/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx20.cc?ref=a849584587c317e47f7581df2181efabb948d08f", "patch": "@@ -21,6 +21,7 @@\n #include <array>\n #include <compare>\n #include <iostream>\n+#include <memory>\n #include <span>\n \n struct X\n@@ -65,6 +66,14 @@ main()\n   static_assert(s2.extent == std::size_t(2));\n // { dg-final { note-test s2 {std::span of length 2 = {3, 4}} } }\n \n+  std::atomic<std::shared_ptr<int>> spe;\n+// { dg-final { note-test spe {std::atomic<std::shared_ptr<int>> (empty) = {get() = 0x0}} } }\n+  std::atomic<std::shared_ptr<int>> sp1 = std::make_shared<int>(1);\n+  std::atomic<std::shared_ptr<int>> sp2 = sp1.load();\n+  std::atomic<std::weak_ptr<int>> wp{sp2.load()};\n+// { dg-final { regexp-test sp1 {std::atomic.std::shared_ptr.int.. \\(use count 2, weak count 1\\) = {get\\(\\) = 0x.*}} } }\n+// { dg-final { regexp-test wp {std::atomic.std::weak_ptr.int.. \\(use count 2, weak count 1\\) = {get\\(\\) = 0x.*}} } }\n+\n   std::cout << \"\\n\";\n   return 0;\t\t\t// Mark SPOT\n }"}]}