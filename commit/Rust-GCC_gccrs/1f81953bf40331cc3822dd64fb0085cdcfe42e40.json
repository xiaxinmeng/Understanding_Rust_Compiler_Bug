{"sha": "1f81953bf40331cc3822dd64fb0085cdcfe42e40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY4MTk1M2JmNDAzMzFjYzM4MjJkZDY0ZmIwMDg1Y2RjZmU0MmU0MA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-12-20T10:01:02Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-12-20T10:01:02Z"}, "message": "re PR c++/46904 (g++.dg/tree-prof/(indir-call-prof.C|inline_mismatch_args.C) fail on powerpc-apple-darwin9)\n\n\n\tPR c++/46904\n\tPR middle-end/46916\n\tPR target/46950\n\t* config/darwin.c (generating_for_darwin_version): New var.\n\t(darwin_text_section): Remove.\n\t(darwin_rodata_section): Do not check function section here.\n\t(darwin_emit_unwind_label): Do not emit for Darwin >= 9.\n\tEmit distinct labels for successive calls for the same decl.\n\t(darwin_override_options): Set generating_for_darwin_version.\n\tAdd FIXME and disable -freorder-blocks-and-partition.\n\tSuppress automatic asynchronous unwind tables for m32.\n\tSwitch off -freorder-blocks-and-partition when unwind tables\n\twill be generated.  Update to use generating_for_darwin_version.\n\t(darwin_function_section): Check for cases that need to be placed\n\tin coalesced sections.\n\t* config/darwin-sections.def: Define hot, cold, startup and exit sections\n\tfor both coalesced and regular code.\n\t* config/darwin.h (USE_SELECT_SECTION_FOR_FUNCTIONS): Delete.\n\t* config/darwin10.h (TARGET_ASM_EMIT_UNWIND_LABEL): Delete.\n\nFrom-SVN: r168083", "tree": {"sha": "66092cda5751ac5a0efe044ef1182237e52e7f58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66092cda5751ac5a0efe044ef1182237e52e7f58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f81953bf40331cc3822dd64fb0085cdcfe42e40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f81953bf40331cc3822dd64fb0085cdcfe42e40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f81953bf40331cc3822dd64fb0085cdcfe42e40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f81953bf40331cc3822dd64fb0085cdcfe42e40/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "308e6f3a18de9e221825ef8b3eefa5c94a3ec853", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/308e6f3a18de9e221825ef8b3eefa5c94a3ec853", "html_url": "https://github.com/Rust-GCC/gccrs/commit/308e6f3a18de9e221825ef8b3eefa5c94a3ec853"}], "stats": {"total": 215, "additions": 159, "deletions": 56}, "files": [{"sha": "17cb2eadf7dfad000c2da48d6588ea833669582d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f81953bf40331cc3822dd64fb0085cdcfe42e40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f81953bf40331cc3822dd64fb0085cdcfe42e40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f81953bf40331cc3822dd64fb0085cdcfe42e40", "patch": "@@ -1,3 +1,25 @@\n+2010-12-20  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\tPR c++/46904\n+\tPR middle-end/46916\n+\tPR target/46950\n+\t* config/darwin.c (generating_for_darwin_version): New var.\n+\t(darwin_text_section): Remove.\n+\t(darwin_rodata_section): Do not check function section here.\n+\t(darwin_emit_unwind_label): Do not emit for Darwin >= 9.\n+\tEmit distinct labels for successive calls for the same decl.\n+\t(darwin_override_options): Set generating_for_darwin_version.\n+\tAdd FIXME and disable -freorder-blocks-and-partition.\n+\tSuppress automatic asynchronous unwind tables for m32.\n+\tSwitch off -freorder-blocks-and-partition when unwind tables\n+\twill be generated.  Update to use generating_for_darwin_version.\n+\t(darwin_function_section): Check for cases that need to be placed\n+\tin coalesced sections.\n+\t* config/darwin-sections.def: Define hot, cold, startup and exit sections\n+\tfor both coalesced and regular code.\n+\t* config/darwin.h (USE_SELECT_SECTION_FOR_FUNCTIONS): Delete.\n+\t* config/darwin10.h (TARGET_ASM_EMIT_UNWIND_LABEL): Delete.\n+\t\n 2010-12-20  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* doc/cppopts.texi: Use @var when appropriate."}, {"sha": "d6151977744f678b6a5ec5b25ee81dd74eb49660", "filename": "gcc/config/darwin-sections.def", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f81953bf40331cc3822dd64fb0085cdcfe42e40/gcc%2Fconfig%2Fdarwin-sections.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f81953bf40331cc3822dd64fb0085cdcfe42e40/gcc%2Fconfig%2Fdarwin-sections.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-sections.def?ref=1f81953bf40331cc3822dd64fb0085cdcfe42e40", "patch": "@@ -34,6 +34,24 @@ DEF_SECTION (text_unlikely_coal_section, SECTION_CODE|SECTION_NO_ANCHOR,\n \t     \".section __TEXT,__text_unlikely_coal,\"\n \t     \"coalesced,pure_instructions\", 0)\n \n+DEF_SECTION (text_hot_section, SECTION_CODE,\n+\t     \".section __TEXT,__text_hot,regular,pure_instructions\", 0)\n+DEF_SECTION (text_cold_section, SECTION_CODE,\n+\t     \".section __TEXT,__text_cold,regular,pure_instructions\", 0)\n+DEF_SECTION (text_startup_section, SECTION_CODE,\n+\t     \".section __TEXT,__text_startup,regular,pure_instructions\", 0)\n+DEF_SECTION (text_exit_section, SECTION_CODE,\n+\t     \".section __TEXT,__text_exit,regular,pure_instructions\", 0)\n+\n+DEF_SECTION (text_hot_coal_section, SECTION_CODE,\n+\t     \".section __TEXT,__text_hot_coal,coalesced,pure_instructions\", 0)\n+DEF_SECTION (text_cold_coal_section, SECTION_CODE,\n+\t     \".section __TEXT,__text_cold_coal,coalesced,pure_instructions\", 0)\n+DEF_SECTION (text_startup_coal_section, SECTION_CODE,\n+\t     \".section __TEXT,__text_stt_coal,coalesced,pure_instructions\", 0)\n+DEF_SECTION (text_exit_coal_section, SECTION_CODE,\n+\t     \".section __TEXT,__text_exit_coal,coalesced,pure_instructions\", 0)\n+\n /* const */\n DEF_SECTION (const_section, 0, \".const\", 0)\n DEF_SECTION (const_coal_section, SECTION_NO_ANCHOR,"}, {"sha": "d9185dbeb762fabe02c0ee0fb9991302f1cedcdb", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 118, "deletions": 50, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f81953bf40331cc3822dd64fb0085cdcfe42e40/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f81953bf40331cc3822dd64fb0085cdcfe42e40/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=1f81953bf40331cc3822dd64fb0085cdcfe42e40", "patch": "@@ -90,6 +90,9 @@ int darwin_emit_branch_islands = false;\n    functions).  */\n int darwin_running_cxx;\n \n+/* Some code-gen now depends on OS major version numbers (at least).  */\n+int generating_for_darwin_version ;\n+\n /* Section names.  */\n section * darwin_sections[NUM_DARWIN_SECTIONS];\n \n@@ -1144,19 +1147,6 @@ darwin_mark_decl_preserved (const char *name)\n   fputc ('\\n', asm_out_file);\n }\n \n-static section *\n-darwin_text_section (int reloc, int weak)\n-{\n-  if (reloc)\n-    return (weak\n-\t    ? darwin_sections[text_unlikely_coal_section]\n-\t    : unlikely_text_section ());\n-  else\n-    return (weak\n-\t    ? darwin_sections[text_coal_section]\n-\t    : text_section);\n-}\n-\n static section *\n darwin_rodata_section (int weak, bool zsize)\n {\n@@ -1267,17 +1257,7 @@ machopic_select_section (tree decl,\n   switch (categorize_decl_for_section (decl, reloc))\n     {\n     case SECCAT_TEXT:\n-      {\n-\tstruct cgraph_node *node;\n-\tif (decl && TREE_CODE (decl) == FUNCTION_DECL\n-\t    && (node = cgraph_get_node (decl)) != NULL)\n-\t  base_section = darwin_function_section (decl,\n-\t\t\t\t\t\t  node->frequency,\n-\t\t\t\t\t\t  node->only_called_at_startup,\n-\t\t\t\t\t\t  node->only_called_at_exit);\n-\tif (!base_section)\n-          base_section = darwin_text_section (reloc, weak);\n-      }\n+      gcc_unreachable ();\n       break;\n \n     case SECCAT_RODATA:\n@@ -1684,12 +1664,37 @@ darwin_handle_weak_import_attribute (tree *node, tree name,\n void\n darwin_emit_unwind_label (FILE *file, tree decl, int for_eh, int empty)\n {\n-  char *lab;\n-\n-  if (! for_eh)\n+  char *lab ;\n+  char buf[32];\n+  static int invok_count = 0;\n+  static tree last_fun_decl = NULL_TREE;\n+  \n+  /* We use the linker to emit the .eh labels for Darwin 9 and above.  */\n+  if (! for_eh || generating_for_darwin_version >= 9)\n     return;\n \n-  lab = concat (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)), \".eh\", NULL);\n+  /* FIXME: This only works when the eh for all sections of a function is \n+     emitted at the same time.  If that changes, we would need to use a lookup\n+     table of some form to determine what to do.  Also, we should emit the\n+     unadorned label for the partition containing the public label for a\n+     function.  This is of limited use, probably, since we do not currently\n+     enable partitioning.  */\n+  strcpy (buf, \".eh\");\n+  if (decl && TREE_CODE (decl) == FUNCTION_DECL) \n+    {\n+      if (decl == last_fun_decl)\n+        {\n+\t  invok_count++;\n+\t  snprintf (buf, 31, \"$$part$$%d.eh\", invok_count);\n+\t}\n+      else\n+\t{\n+\t  last_fun_decl = decl;\n+\t  invok_count = 0;\n+\t}\n+    }\n+\n+  lab = concat (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)), buf, NULL);\n \n   if (TREE_PUBLIC (decl))\n     {\n@@ -2551,21 +2556,61 @@ darwin_kextabi_p (void) {\n void\n darwin_override_options (void)\n {\n-  bool darwin9plus = (darwin_macosx_version_min\n-\t\t      && strverscmp (darwin_macosx_version_min, \"10.5\") >= 0);\n+  /* Keep track of which (major) version we're generating code for.  */\n+  if (darwin_macosx_version_min)\n+    {\n+      if (strverscmp (darwin_macosx_version_min, \"10.6\") >= 0)\n+\tgenerating_for_darwin_version = 10;\n+      else if (strverscmp (darwin_macosx_version_min, \"10.5\") >= 0)\n+\tgenerating_for_darwin_version = 9;\n+\n+      /* Earlier versions are not specifically accounted, until required.  */\n+    }\n \n   /* Don't emit DWARF3/4 unless specifically selected.  This is a \n      workaround for tool bugs.  */\n   if (!global_options_set.x_dwarf_strict) \n     dwarf_strict = 1;\n \n-  /* Disable -freorder-blocks-and-partition for darwin_emit_unwind_label.  */\n-  if (flag_reorder_blocks_and_partition \n-      && (targetm.asm_out.emit_unwind_label == darwin_emit_unwind_label))\n+  /* FIXME: Darwin cannot support multiple function sections until (a) the new code\n+     atoms created have a proper start label and (b) there are suitable pubnames \n+     emitted.  This applies to all current Darwin versions (OSX <= 10.6.5).  */\n+  if (global_options.x_flag_reorder_blocks_and_partition)\n+    {\n+      inform (input_location,\n+\t      \"-freorder-blocks-and-partition is currently disabled for this \"\n+\t      \"platform\");\n+      flag_reorder_blocks_and_partition = 0;\n+      flag_reorder_blocks = 1;\n+    }\n+\n+  /* Do not allow unwind tables to be generated by default for m32.  \n+     fnon-call-exceptions will override this, regardless of what we do.  */\n+  if (generating_for_darwin_version < 10\n+      && !global_options_set.x_flag_asynchronous_unwind_tables\n+      && !TARGET_64BIT)\n+    global_options.x_flag_asynchronous_unwind_tables = 0;\n+\n+  /* Disable -freorder-blocks-and-partition when unwind tables are being emitted\n+     for Darwin < 10 (OSX 10.6).  \n+     The strategy is, \"Unless the User has specifically set/unset an unwind flag\n+     we will switch off -freorder-blocks-and-partition when unwind tables will be\n+     generated\".  If the User specifically sets flags... we assume (s)he knows\n+     why...  */\n+   if (generating_for_darwin_version < 10\n+       && global_options_set.x_flag_reorder_blocks_and_partition\n+       && ((global_options.x_flag_exceptions \t\t/* User, c++, java */\n+\t    && !global_options_set.x_flag_exceptions) \t/* User specified... */\n+\t   || (global_options.x_flag_unwind_tables\n+\t\t&& !global_options_set.x_flag_unwind_tables)\n+\t   || (global_options.x_flag_non_call_exceptions\n+\t\t&& !global_options_set.x_flag_non_call_exceptions)\n+\t   || (global_options.x_flag_asynchronous_unwind_tables\n+\t\t&& !global_options_set.x_flag_asynchronous_unwind_tables)))\n     {\n       inform (input_location,\n-              \"-freorder-blocks-and-partition does not work with exceptions \"\n-              \"on this architecture\");\n+\t      \"-freorder-blocks-and-partition does not work with exceptions \"\n+\t      \"on this architecture\");\n       flag_reorder_blocks_and_partition = 0;\n       flag_reorder_blocks = 1;\n     }\n@@ -2590,7 +2635,7 @@ darwin_override_options (void)\n     }\n \n   if (flag_var_tracking\n-      && darwin9plus\n+      && (generating_for_darwin_version >= 9)\n       && debug_info_level >= DINFO_LEVEL_NORMAL\n       && debug_hooks->var_location != do_nothing_debug_hooks.var_location)\n     flag_var_tracking_uninit = 1;\n@@ -2608,7 +2653,7 @@ darwin_override_options (void)\n     }\n \n   /* It is assumed that branch island stubs are needed for earlier systems.  */\n-  if (!darwin9plus)\n+  if (generating_for_darwin_version < 9)\n     darwin_emit_branch_islands = true;\n   else\n     emit_aligned_common = true; /* Later systems can support aligned common.  */\n@@ -2968,33 +3013,56 @@ section *\n darwin_function_section (tree decl, enum node_frequency freq,\n \t\t\t  bool startup, bool exit)\n {\n+  /* Decide if we need to put this in a coalescable section.  */\n+  bool weak = (decl \n+\t       && DECL_WEAK (decl)\n+\t       && (!DECL_ATTRIBUTES (decl)\n+\t\t   || !lookup_attribute (\"weak_import\", \n+\t\t\t\t\t  DECL_ATTRIBUTES (decl))));\n+\n+  /* If there is a specified section name, we should not be trying to\n+     override.  */\n+  if (decl && DECL_SECTION_NAME (decl) != NULL_TREE)\n+    return get_named_section (decl, NULL, 0);\n+\n+  /* Default when there is no function re-ordering.  */\n   if (!flag_reorder_functions)\n-    return NULL;\n+    return (weak)\n+\t    ? darwin_sections[text_coal_section]\n+\t    : text_section;\n+\n   /* Startup code should go to startup subsection unless it is\n      unlikely executed (this happens especially with function splitting\n-     where we can split away unnecesary parts of static constructors.  */\n+     where we can split away unnecesary parts of static constructors).  */\n   if (startup && freq != NODE_FREQUENCY_UNLIKELY_EXECUTED)\n-    return get_named_text_section\n-\t     (decl, \"__TEXT,__startup,regular,pure_instructions\", \"_startup\");\n+    return (weak)\n+\t    ? darwin_sections[text_startup_coal_section]\n+\t    : darwin_sections[text_startup_section];\n \n   /* Similarly for exit.  */\n   if (exit && freq != NODE_FREQUENCY_UNLIKELY_EXECUTED)\n-    return get_named_text_section (decl,\n-\t\t\t\t   \"__TEXT,__exit,regular,pure_instructions\",\n-\t\t\t\t   \"_exit\");\n+    return (weak)\n+\t    ? darwin_sections[text_exit_coal_section]\n+\t    : darwin_sections[text_exit_section];\n \n   /* Group cold functions together, similarly for hot code.  */\n   switch (freq)\n     {\n       case NODE_FREQUENCY_UNLIKELY_EXECUTED:\n-\treturn get_named_text_section\n-\t\t (decl,\n-\t          \"__TEXT,__unlikely,regular,pure_instructions\", \"_unlikely\");\n+\treturn (weak)\n+\t\t? darwin_sections[text_cold_coal_section]\n+\t\t: darwin_sections[text_cold_section];\n+\tbreak;\n       case NODE_FREQUENCY_HOT:\n-\treturn get_named_text_section\n-\t\t (decl, \"__TEXT,__hot,regular,pure_instructions\", \"_hot\");\n+\treturn (weak)\n+\t\t? darwin_sections[text_hot_coal_section]\n+\t\t: darwin_sections[text_hot_section];\n+\tbreak;\n       default:\n-\treturn NULL;\n+\treturn (weak)\n+\t\t? darwin_sections[text_coal_section]\n+\t\t: text_section;\n+\tbreak;\n     }\n }\n "}, {"sha": "9092d6be397239075a04033e7e119c22d9d46c02", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f81953bf40331cc3822dd64fb0085cdcfe42e40/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f81953bf40331cc3822dd64fb0085cdcfe42e40/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=1f81953bf40331cc3822dd64fb0085cdcfe42e40", "patch": "@@ -669,7 +669,7 @@ extern GTY(()) section * darwin_sections[NUM_DARWIN_SECTIONS];\n \n #undef\tTARGET_ASM_SELECT_SECTION\n #define TARGET_ASM_SELECT_SECTION machopic_select_section\n-#define USE_SELECT_SECTION_FOR_FUNCTIONS\n+\n #undef\tTARGET_ASM_FUNCTION_SECTION\n #define TARGET_ASM_FUNCTION_SECTION darwin_function_section\n "}, {"sha": "65ba2632a8f2cdc1a21815fb16d133cc8248c976", "filename": "gcc/config/darwin10.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f81953bf40331cc3822dd64fb0085cdcfe42e40/gcc%2Fconfig%2Fdarwin10.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f81953bf40331cc3822dd64fb0085cdcfe42e40/gcc%2Fconfig%2Fdarwin10.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin10.h?ref=1f81953bf40331cc3822dd64fb0085cdcfe42e40", "patch": "@@ -23,8 +23,3 @@ unwinder in libSystem is fixed to digest new epilog unwinding notes. */\n \n #undef LIB_SPEC\n #define LIB_SPEC \"%{!static:-no_compact_unwind -lSystem}\"\n-\n-/* Unwind labels are no longer required in darwin10.  */\n-\n-#undef TARGET_ASM_EMIT_UNWIND_LABEL\n-#define TARGET_ASM_EMIT_UNWIND_LABEL default_emit_unwind_label"}]}