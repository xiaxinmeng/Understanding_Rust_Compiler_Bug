{"sha": "49de156a6adb50e0624479f22c20141cadef812d", "node_id": "C_kwDOANBUbNoAKDQ5ZGUxNTZhNmFkYjUwZTA2MjQ0NzlmMjJjMjAxNDFjYWRlZjgxMmQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-10T10:46:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-10T10:46:52Z"}, "message": "i386: Fix up ix86_expand_int_sse_cmp [PR107585]\n\nThe following patch fixes ICE on the testcase.  I've used GEN_INT\nincorrectly thinking the code punts on the problematic boundaries.\nIt does, but only for LE and GE, i.e. signed comparisons, for unsigned\nthe boundaries are 0 and unsigned maximum, so when say unsigned char\nadds one to 127 or subtracts one from 128 we need to canonicalize it.\n\n2022-11-10  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/107585\n\tPR target/107546\n\t* config/i386/i386-expand.cc (ix86_expand_int_sse_cmp): Use\n\tgen_int_mode rather than GEN_INT.\n\n\t* gcc.dg/pr107585.c: New test.", "tree": {"sha": "bfc6a7124dc43f0b477a5706f5c9823cd9a90315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfc6a7124dc43f0b477a5706f5c9823cd9a90315"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49de156a6adb50e0624479f22c20141cadef812d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49de156a6adb50e0624479f22c20141cadef812d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49de156a6adb50e0624479f22c20141cadef812d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49de156a6adb50e0624479f22c20141cadef812d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9072763f4f17e600a980ff510b2baf8ad8ada1b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9072763f4f17e600a980ff510b2baf8ad8ada1b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9072763f4f17e600a980ff510b2baf8ad8ada1b5"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "acf9e00d4906b7d6de22ee8d4d517d2f224922b2", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49de156a6adb50e0624479f22c20141cadef812d/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49de156a6adb50e0624479f22c20141cadef812d/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=49de156a6adb50e0624479f22c20141cadef812d", "patch": "@@ -4540,7 +4540,8 @@ ix86_expand_int_sse_cmp (rtx dest, enum rtx_code code, rtx cop0, rtx cop1,\n \t\t  rtvec v = rtvec_alloc (n_elts);\n \t\t  for (i = 0; i < n_elts; ++i)\n \t\t    RTVEC_ELT (v, i)\n-\t\t      = GEN_INT (INTVAL (CONST_VECTOR_ELT (cop1, i)) + 1);\n+\t\t      = gen_int_mode (INTVAL (CONST_VECTOR_ELT (cop1, i)) + 1,\n+\t\t\t\t      eltmode);\n \t\t  cop1 = gen_rtx_CONST_VECTOR (mode, v);\n \t\t  std::swap (cop0, cop1);\n \t\t  code = code == LE ? GT : GTU;\n@@ -4584,7 +4585,8 @@ ix86_expand_int_sse_cmp (rtx dest, enum rtx_code code, rtx cop0, rtx cop1,\n \t\t  rtvec v = rtvec_alloc (n_elts);\n \t\t  for (i = 0; i < n_elts; ++i)\n \t\t    RTVEC_ELT (v, i)\n-\t\t      = GEN_INT (INTVAL (CONST_VECTOR_ELT (cop1, i)) - 1);\n+\t\t      = gen_int_mode (INTVAL (CONST_VECTOR_ELT (cop1, i)) - 1,\n+\t\t\t\t      eltmode);\n \t\t  cop1 = gen_rtx_CONST_VECTOR (mode, v);\n \t\t  code = code == GE ? GT : GTU;\n \t\t  break;"}, {"sha": "820e04b6537c712e96b6f3f28dd19acda53dec63", "filename": "gcc/testsuite/gcc.dg/pr107585.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49de156a6adb50e0624479f22c20141cadef812d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107585.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49de156a6adb50e0624479f22c20141cadef812d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107585.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107585.c?ref=49de156a6adb50e0624479f22c20141cadef812d", "patch": "@@ -0,0 +1,13 @@\n+/* PR target/107585 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef unsigned char __attribute__((__vector_size__ (16))) V;\n+char c;\n+void bar (int);\n+\n+void\n+foo (void)\n+{\n+  bar (((V) (c <= (V){127}))[2]);\n+}"}]}