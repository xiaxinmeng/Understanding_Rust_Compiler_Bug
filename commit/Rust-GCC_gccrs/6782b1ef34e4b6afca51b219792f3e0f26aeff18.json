{"sha": "6782b1ef34e4b6afca51b219792f3e0f26aeff18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc4MmIxZWYzNGU0YjZhZmNhNTFiMjE5NzkyZjNlMGYyNmFlZmYxOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-17T07:27:38Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-17T07:27:38Z"}, "message": "[multiple changes]\n\n2014-07-17  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_disp.adb: Minor reformatting.\n\t* exp_disp.adb: Minor code reorganization.\n\n2014-07-17  Thomas Quinot  <quinot@adacore.com>\n\n\t* gnat_rm.texi, freeze.adb (Check_Component_Storage_Order): Do not\n\trequire an explicit SSO attribute definition clause on a composite type\n\tjust because one of its components has one.\n\n2014-07-17  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_attr.adb (Analyze_Attribute, case Loop_Entry): Rewrite\n\tattribute out of existence if the enclosing pragma is ignored.\n\t* sem_util.adb: Minor reformatting.\n\n2014-07-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_aggr.adb (Expand_Array_Aggregate): Handle properly an\n\tarray aggregate expanded into assignments when it appears as a\n\tlocal declaration in an inlined body.\n\n2014-07-17  Doug Rupp  <rupp@adacore.com>\n\n\t* init.c [__ANDROID__]: Modify for ZCX.\n\t* exp_aggr.adb: Minor reformatting\n\t* sigtramp-armvxw.c, sigtramp-ppcvxw.c: Update comments.\n\n2014-07-17  Robert Dewar  <dewar@adacore.com>\n\n\t* a-strunb-shared.ads, a-stwiun-shared.ads, a-stzunb-shared.ads,\n\texp_ch7.adb, g-pehage.ads, g-socket.ads, gnat_ugn.texi, gnat_ugx.texi,\n\tscng.adb: Remove incorrect usage \"allow to\" and \"allows to\".\n\n2014-07-17  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_dist.adb: Minor reformatting.\n\nFrom-SVN: r212737", "tree": {"sha": "b6b5735de0927822e0ecb101202cf01e7f7e5288", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6b5735de0927822e0ecb101202cf01e7f7e5288"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6782b1ef34e4b6afca51b219792f3e0f26aeff18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6782b1ef34e4b6afca51b219792f3e0f26aeff18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6782b1ef34e4b6afca51b219792f3e0f26aeff18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6782b1ef34e4b6afca51b219792f3e0f26aeff18/comments", "author": null, "committer": null, "parents": [{"sha": "6ccdd977051143e03a166c8994fd2519a0a7c5f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ccdd977051143e03a166c8994fd2519a0a7c5f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ccdd977051143e03a166c8994fd2519a0a7c5f0"}], "stats": {"total": 1153, "additions": 570, "deletions": 583}, "files": [{"sha": "9b591d88ad3e768c208ed336f6e0ac2ec14b8066", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6782b1ef34e4b6afca51b219792f3e0f26aeff18", "patch": "@@ -1,3 +1,42 @@\n+2014-07-17  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_disp.adb: Minor reformatting.\n+\t* exp_disp.adb: Minor code reorganization.\n+\n+2014-07-17  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* gnat_rm.texi, freeze.adb (Check_Component_Storage_Order): Do not\n+\trequire an explicit SSO attribute definition clause on a composite type\n+\tjust because one of its components has one.\n+\n+2014-07-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute, case Loop_Entry): Rewrite\n+\tattribute out of existence if the enclosing pragma is ignored.\n+\t* sem_util.adb: Minor reformatting.\n+\n+2014-07-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_aggr.adb (Expand_Array_Aggregate): Handle properly an\n+\tarray aggregate expanded into assignments when it appears as a\n+\tlocal declaration in an inlined body.\n+\n+2014-07-17  Doug Rupp  <rupp@adacore.com>\n+\n+\t* init.c [__ANDROID__]: Modify for ZCX.\n+\t* exp_aggr.adb: Minor reformatting\n+\t* sigtramp-armvxw.c, sigtramp-ppcvxw.c: Update comments.\n+\n+2014-07-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-strunb-shared.ads, a-stwiun-shared.ads, a-stzunb-shared.ads,\n+\texp_ch7.adb, g-pehage.ads, g-socket.ads, gnat_ugn.texi, gnat_ugx.texi,\n+\tscng.adb: Remove incorrect usage \"allow to\" and \"allows to\".\n+\n+2014-07-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_dist.adb: Minor reformatting.\n+\n 2014-07-17  Bob Duff  <duff@adacore.com>\n \n \t* gnat_ugn.texi: Improve documentation of Unrestricted_Access."}, {"sha": "1a00780fad79cec2b5c5569027045235c6787663", "filename": "gcc/ada/a-strunb-shared.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fa-strunb-shared.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fa-strunb-shared.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strunb-shared.ads?ref=6782b1ef34e4b6afca51b219792f3e0f26aeff18", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -64,9 +64,9 @@\n    --     preallocated memory can used later by Append/Insert operations\n    --     without reallocation.\n \n-   --  Reference counting uses GCC builtin atomic operations, which allows to\n-   --  safely share internal data between Ada tasks. Nevertheless, this doesn't\n-   --  make objects of Unbounded_String thread-safe: each instance can't be\n+   --  Reference counting uses GCC builtin atomic operations, which allows safe\n+   --  sharing of internal data between Ada tasks. Nevertheless, this does not\n+   --  make objects of Unbounded_String thread-safe: an instance cannot be\n    --  accessed by several tasks simultaneously.\n \n with Ada.Strings.Maps;"}, {"sha": "20c2d426c1ffa4184628dc54822c1d12a0b4ee29", "filename": "gcc/ada/a-stwiun-shared.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fa-stwiun-shared.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fa-stwiun-shared.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stwiun-shared.ads?ref=6782b1ef34e4b6afca51b219792f3e0f26aeff18", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -471,10 +471,10 @@ private\n    --     preallocated memory can used later by Append/Insert operations\n    --     without reallocation.\n \n-   --  Reference counting uses GCC builtin atomic operations, which allows to\n-   --  safely share internal data between Ada tasks. Nevertheless, this not\n-   --  make objects of Unbounded_Wide_String thread-safe, so each instance\n-   --  can't be accessed by several tasks simultaneously.\n+   --  Reference counting uses GCC builtin atomic operations, which allows safe\n+   --  sharing of internal data between Ada tasks. Nevertheless, this does not\n+   --  make objects of Unbounded_String thread-safe: an instance cannot be\n+   --  accessed by several tasks simultaneously.\n \n    pragma Stream_Convert (Unbounded_Wide_String, To_Unbounded, To_Wide_String);\n    --  Provide stream routines without dragging in Ada.Streams"}, {"sha": "3c9e016c07b2819a7e3dc7af587772d5ef503e3c", "filename": "gcc/ada/a-stzunb-shared.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fa-stzunb-shared.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fa-stzunb-shared.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stzunb-shared.ads?ref=6782b1ef34e4b6afca51b219792f3e0f26aeff18", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -485,10 +485,10 @@ private\n    --     preallocated memory can used later by Append/Insert operations\n    --     without reallocation.\n \n-   --  Reference counting uses GCC builtin atomic operations, which allows to\n-   --  safely share internal data between Ada tasks. Nevertheless, this not\n-   --  make objects of Unbounded_Wide_Wide_String thread-safe, so each instance\n-   --  can't be accessed by several tasks simultaneously.\n+   --  Reference counting uses GCC builtin atomic operations, which allows safe\n+   --  sharing of internal data between Ada tasks. Nevertheless, this does not\n+   --  make objects of Unbounded_String thread-safe: an instance cannot be\n+   --  accessed by several tasks simultaneously.\n \n    pragma Stream_Convert\n      (Unbounded_Wide_Wide_String, To_Unbounded, To_Wide_Wide_String);"}, {"sha": "c3d7a1f1d07594bd4f747b3527e953e695d905cc", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=6782b1ef34e4b6afca51b219792f3e0f26aeff18", "patch": "@@ -5235,7 +5235,17 @@ package body Exp_Aggr is\n              Scalar_Comp => Is_Scalar_Type (Ctyp));\n       end;\n \n-      if Comes_From_Source (Tmp) then\n+      --  If the aggregate is the expression in a declaration, the expanded\n+      --  code must be inserted after it. The defining entity might not come\n+      --  from source if this is part of an inlined body, but the declaration\n+      --  itself will.\n+\n+      if Comes_From_Source (Tmp)\n+        or else\n+          (Nkind (Parent (N)) = N_Object_Declaration\n+            and then Comes_From_Source (Parent (N))\n+            and then Tmp = Defining_Entity (Parent (N)))\n+      then\n          declare\n             Node_After : constant Node_Id := Next (Parent_Node);\n "}, {"sha": "b98362fc70e053c2f544c1f8d620604e61359398", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=6782b1ef34e4b6afca51b219792f3e0f26aeff18", "patch": "@@ -215,7 +215,7 @@ package body Exp_Ch7 is\n    --    A classwide type can always potentially have controlled components\n    --    but the record controller of the corresponding actual type may not\n    --    be known at compile time so the dispatch table contains a special\n-   --    field that allows to compute the offset of the record controller\n+   --    field that allows computation of the offset of the record controller\n    --    dynamically. See s-finimp.Deep_Tag_Attach and a-tags.RC_Offset.\n \n    --  Here is a simple example of the expansion of a controlled block :"}, {"sha": "e1032bbf4c1423074d2fb37e5d8469d27964f57c", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 388, "deletions": 475, "changes": 863, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=6782b1ef34e4b6afca51b219792f3e0f26aeff18", "patch": "@@ -90,13 +90,13 @@ package body Exp_Disp is\n    --  an alias of a predefined dispatching primitive (i.e. through a renaming)\n \n    function New_Value (From : Node_Id) return Node_Id;\n-   --  From is the original Expression. New_Value is equivalent to a call\n-   --  to Duplicate_Subexpr with an explicit dereference when From is an\n-   --  access parameter.\n+   --  From is the original Expression. New_Value is equivalent to a call to\n+   --  Duplicate_Subexpr with an explicit dereference when From is an access\n+   --  parameter.\n \n    function Original_View_In_Visible_Part (Typ : Entity_Id) return Boolean;\n-   --  Check if the type has a private view or if the public view appears\n-   --  in the visible part of a package spec.\n+   --  Check if the type has a private view or if the public view appears in\n+   --  the visible part of a package spec.\n \n    function Prim_Op_Kind\n      (Prim : Entity_Id;\n@@ -131,10 +131,10 @@ package body Exp_Disp is\n          return;\n       end if;\n \n-      --  Apply_Tag_Checks is called directly from the semantics, so we need\n-      --  a check to see whether expansion is active before proceeding. In\n-      --  addition, there is no need to expand the call when compiling under\n-      --  restriction No_Dispatching_Calls; the semantic analyzer has\n+      --  Apply_Tag_Checks is called directly from the semantics, so we\n+      --  need a check to see whether expansion is active before proceeding.\n+      --  In addition, there is no need to expand the call when compiling\n+      --  under restriction No_Dispatching_Calls; the semantic analyzer has\n       --  previously notified the violation of this restriction.\n \n       if not Expander_Active\n@@ -221,11 +221,10 @@ package body Exp_Disp is\n             elsif Find_Controlling_Arg (Param) = Ctrl_Arg then\n                null;\n \n-            --  \"=\" is the only dispatching operation allowed to get\n-            --  operands with incompatible tags (it just returns false).\n-            --  We use Duplicate_Subexpr_Move_Checks instead of calling\n-            --  Relocate_Node because the value will be duplicated to\n-            --  check the tags.\n+            --  \"=\" is the only dispatching operation allowed to get operands\n+            --  with incompatible tags (it just returns false). We use\n+            --  Duplicate_Subexpr_Move_Checks instead of calling Relocate_Node\n+            --  because the value will be duplicated to check the tags.\n \n             elsif Subp = Eq_Prim_Op then\n                null;\n@@ -251,6 +250,7 @@ package body Exp_Disp is\n \n             else\n                --  Generate code for tag equality check\n+\n                --  Perhaps should have Checks.Apply_Tag_Equality_Check???\n \n                Insert_Action (Ctrl_Arg,\n@@ -347,8 +347,8 @@ package body Exp_Disp is\n                Build_Dispatch_Tables\n                  (Declarations (Proper_Body (Unit (Library_Unit (D)))));\n \n-            --  Handle full type declarations and derivations of library\n-            --  level tagged types\n+            --  Handle full type declarations and derivations of library level\n+            --  tagged types\n \n             elsif Nkind_In (D, N_Full_Type_Declaration,\n                                N_Derived_Type_Definition)\n@@ -497,7 +497,7 @@ package body Exp_Disp is\n       Set_Can_Never_Be_Null (Anon_Type);\n \n       --  Decorate the size and alignment attributes of the anonymous access\n-      --  type, as required by gigi.\n+      --  type, as required by the back end.\n \n       Layout_Type (Anon_Type);\n \n@@ -537,8 +537,7 @@ package body Exp_Disp is\n          CPP_Typ  := Enclosing_CPP_Parent (Typ);\n          Tag_Comp := First_Tag_Component (CPP_Typ);\n \n-         --  If the number of primitives is already set in the tag component\n-         --  then use it\n+         --  If number of primitives already set in the tag component, use it\n \n          if Present (Tag_Comp)\n            and then DT_Entry_Count (Tag_Comp) /= No_Uint\n@@ -693,8 +692,8 @@ package body Exp_Disp is\n          return;\n       end if;\n \n-      --  Expand_Dispatching_Call is called directly from the semantics,\n-      --  so we only proceed if the expander is active.\n+      --  Expand_Dispatching_Call is called directly from the semantics, so we\n+      --  only proceed if the expander is active.\n \n       if not Expander_Active\n \n@@ -1069,8 +1068,8 @@ package body Exp_Disp is\n          Set_SCIL_Node (SCIL_Related_Node, SCIL_Node);\n       end if;\n \n-      --  Suppress all checks during the analysis of the expanded code\n-      --  to avoid the generation of spurious warnings under ZFP run-time.\n+      --  Suppress all checks during the analysis of the expanded code to avoid\n+      --  the generation of spurious warnings under ZFP run-time.\n \n       Analyze_And_Resolve (Call_Node, Call_Typ, Suppress => All_Checks);\n    end Expand_Dispatching_Call;\n@@ -1246,9 +1245,8 @@ package body Exp_Disp is\n \n          Analyze (N);\n \n-         --  If the target is a class-wide interface we change the type of the\n-         --  data returned by IW_Convert to indicate that this is a dispatching\n-         --  call.\n+         --  If target is a class-wide interface, change the type of the data\n+         --  returned by IW_Convert to indicate this is a dispatching call.\n \n          declare\n             New_Itype : Entity_Id;\n@@ -1277,8 +1275,8 @@ package body Exp_Disp is\n \n       if not Is_Access_Type (Etype (N)) then\n \n-         --  Statically displace the pointer to the object to reference\n-         --  the component containing the secondary dispatch table.\n+         --  Statically displace the pointer to the object to reference the\n+         --  component containing the secondary dispatch table.\n \n          Rewrite (N,\n            Convert_Tag_To_Interface (Class_Wide_Type (Iface_Typ),\n@@ -1337,9 +1335,9 @@ package body Exp_Disp is\n               Make_Simple_Return_Statement (Loc,\n                 Unchecked_Convert_To (Etype (N),\n                   Make_Attribute_Reference (Loc,\n-                    Prefix =>\n+                    Prefix         =>\n                       Make_Selected_Component (Loc,\n-                        Prefix =>\n+                        Prefix        =>\n                           Unchecked_Convert_To\n                             (Defining_Identifier (New_Typ_Decl),\n                              Make_Identifier (Loc, Name_uO)),\n@@ -1360,8 +1358,7 @@ package body Exp_Disp is\n                                        (RTE (RE_Null_Address), Loc)),\n \n                  Then_Statements => New_List (\n-                   Make_Simple_Return_Statement (Loc,\n-                     Make_Null (Loc))),\n+                   Make_Simple_Return_Statement (Loc, Make_Null (Loc))),\n                  Else_Statements => Stats));\n             end if;\n \n@@ -1496,17 +1493,17 @@ package body Exp_Disp is\n             if Actual_Typ = Formal_Typ then\n                null;\n \n-            --  No need to displace the pointer if the interface type is\n-            --  a parent of the type of the actual because in this case the\n+            --  No need to displace the pointer if the interface type is a\n+            --  parent of the type of the actual because in this case the\n             --  interface primitives are located in the primary dispatch table.\n \n             elsif Is_Ancestor (Formal_Typ, Actual_Typ,\n                                Use_Full_View => True)\n             then\n                null;\n \n-            --  Implicit conversion to the class-wide formal type to force\n-            --  the displacement of the pointer.\n+            --  Implicit conversion to the class-wide formal type to force the\n+            --  displacement of the pointer.\n \n             else\n                --  Normally, expansion of actuals for calls to build-in-place\n@@ -1571,10 +1568,11 @@ package body Exp_Disp is\n \n                if From_Limited_With (Actual_Typ) then\n \n-                  --  If the type of the actual parameter comes from a limited\n-                  --  with-clause and the non-limited view is already available\n-                  --  we replace the anonymous access type by a duplicate\n-                  --  declaration whose designated type is the non-limited view\n+                  --  If the type of the actual parameter comes from a\n+                  --  limited with-clause and the non-limited view is already\n+                  --  available, we replace the anonymous access type by\n+                  --  a duplicate declaration whose designated type is the\n+                  --  non-limited view.\n \n                   if Ekind (Actual_DDT) = E_Incomplete_Type\n                     and then Present (Non_Limited_View (Actual_DDT))\n@@ -1962,12 +1960,12 @@ package body Exp_Disp is\n \n             Thunk_Code :=\n               Make_Subprogram_Body (Loc,\n-                Specification =>\n+                Specification              =>\n                   Make_Function_Specification (Loc,\n                     Defining_Unit_Name       => Thunk_Id,\n                     Parameter_Specifications => Formals,\n                     Result_Definition        => Result_Def),\n-                Declarations => Decl,\n+                Declarations               => Decl,\n                 Handled_Statement_Sequence =>\n                   Make_Handled_Sequence_Of_Statements (Loc,\n                     Statements => New_List (\n@@ -2007,9 +2005,7 @@ package body Exp_Disp is\n \n       E := Next_Entity (Typ);\n       while Present (E) loop\n-         if Ekind (E) = E_Function\n-           and then Is_Constructor (E)\n-         then\n+         if Ekind (E) = E_Function and then Is_Constructor (E) then\n             return True;\n          end if;\n \n@@ -2026,7 +2022,7 @@ package body Exp_Disp is\n    function Has_DT (Typ : Entity_Id) return Boolean is\n    begin\n       return not Is_Interface (Typ)\n-               and then not Restriction_Active (No_Dispatching_Calls);\n+        and then not Restriction_Active (No_Dispatching_Calls);\n    end Has_DT;\n \n    ----------------------------------\n@@ -2143,15 +2139,15 @@ package body Exp_Disp is\n    begin\n       --  In VM targets we don't restrict the functionality of this test to\n       --  compiling in Ada 2005 mode since in VM targets any tagged type has\n-      --  these primitives\n+      --  these primitives.\n \n       return (Ada_Version >= Ada_2005 or else not Tagged_Type_Expansion)\n-        and then (Chars (E) = Name_uDisp_Asynchronous_Select or else\n-                  Chars (E) = Name_uDisp_Conditional_Select  or else\n-                  Chars (E) = Name_uDisp_Get_Prim_Op_Kind    or else\n-                  Chars (E) = Name_uDisp_Get_Task_Id         or else\n-                  Chars (E) = Name_uDisp_Requeue             or else\n-                  Chars (E) = Name_uDisp_Timed_Select);\n+        and then Nam_In (Chars (E), Name_uDisp_Asynchronous_Select,\n+                                    Name_uDisp_Conditional_Select,\n+                                    Name_uDisp_Get_Prim_Op_Kind,\n+                                    Name_uDisp_Get_Task_Id,\n+                                    Name_uDisp_Requeue,\n+                                    Name_uDisp_Timed_Select);\n    end Is_Predefined_Interface_Primitive;\n \n    ----------------------------------------\n@@ -2234,13 +2230,15 @@ package body Exp_Disp is\n       if Is_Interface (Typ) then\n          return\n            Make_Subprogram_Body (Loc,\n-             Specification => Make_Disp_Asynchronous_Select_Spec (Typ),\n-             Declarations  => New_List,\n+             Specification              =>\n+               Make_Disp_Asynchronous_Select_Spec (Typ),\n+             Declarations               => New_List,\n              Handled_Statement_Sequence =>\n                Make_Handled_Sequence_Of_Statements (Loc,\n-                 New_List (Make_Assignment_Statement (Loc,\n-                   Name       => Make_Identifier (Loc, Name_uF),\n-                   Expression => New_Occurrence_Of (Standard_False, Loc)))));\n+                 New_List (\n+                   Make_Assignment_Statement (Loc,\n+                     Name       => Make_Identifier (Loc, Name_uF),\n+                     Expression => New_Occurrence_Of (Standard_False, Loc)))));\n       end if;\n \n       if Is_Concurrent_Record_Type (Typ) then\n@@ -2261,24 +2259,22 @@ package body Exp_Disp is\n          else\n             Tag_Node :=\n               Make_Attribute_Reference (Loc,\n-                Prefix => New_Occurrence_Of (Typ, Loc),\n+                Prefix         => New_Occurrence_Of (Typ, Loc),\n                 Attribute_Name => Name_Tag);\n          end if;\n \n          Append_To (Decls,\n            Make_Object_Declaration (Loc,\n              Defining_Identifier =>\n                Make_Defining_Identifier (Loc, Name_uI),\n-             Object_Definition =>\n+             Object_Definition   =>\n                New_Occurrence_Of (Standard_Integer, Loc),\n-             Expression =>\n+             Expression          =>\n                Make_Function_Call (Loc,\n-                 Name =>\n+                 Name                   =>\n                    New_Occurrence_Of (RTE (RE_Get_Entry_Index), Loc),\n                  Parameter_Associations =>\n-                   New_List (\n-                     Tag_Node,\n-                     Make_Identifier (Loc, Name_uS)))));\n+                   New_List (Tag_Node, Make_Identifier (Loc, Name_uS)))));\n \n          if Ekind (Conc_Typ) = E_Protected_Type then\n \n@@ -2288,9 +2284,8 @@ package body Exp_Disp is\n             Com_Block := Make_Temporary (Loc, 'B');\n             Append_To (Decls,\n               Make_Object_Declaration (Loc,\n-                Defining_Identifier =>\n-                  Com_Block,\n-                Object_Definition =>\n+                Defining_Identifier => Com_Block,\n+                Object_Definition   =>\n                   New_Occurrence_Of (RTE (RE_Communication_Block), Loc)));\n \n             --  Build T._object'Access for calls below\n@@ -2320,7 +2315,7 @@ package body Exp_Disp is\n \n                   Append_To (Stmts,\n                     Make_Procedure_Call_Statement (Loc,\n-                      Name =>\n+                      Name                   =>\n                         New_Occurrence_Of (RTE (RE_Protected_Entry_Call), Loc),\n                       Parameter_Associations =>\n                         New_List (\n@@ -2351,10 +2346,9 @@ package body Exp_Disp is\n                 Expression =>\n                   Make_Unchecked_Type_Conversion (Loc,\n                     Subtype_Mark =>\n-                      New_Occurrence_Of (\n-                        RTE (RE_Dummy_Communication_Block), Loc),\n-                    Expression =>\n-                      New_Occurrence_Of (Com_Block, Loc))));\n+                      New_Occurrence_Of\n+                        (RTE (RE_Dummy_Communication_Block), Loc),\n+                    Expression   => New_Occurrence_Of (Com_Block, Loc))));\n \n             --  Generate:\n             --    F := False;\n@@ -2380,7 +2374,7 @@ package body Exp_Disp is\n \n             Append_To (Stmts,\n               Make_Procedure_Call_Statement (Loc,\n-                Name =>\n+                Name                   =>\n                   New_Occurrence_Of (RTE (RE_Task_Entry_Call), Loc),\n                 Parameter_Associations =>\n                   New_List (\n@@ -2391,7 +2385,7 @@ package body Exp_Disp is\n                     Make_Unchecked_Type_Conversion (Loc,  --  entry index\n                       Subtype_Mark =>\n                         New_Occurrence_Of (RTE (RE_Task_Entry_Index), Loc),\n-                      Expression => Make_Identifier (Loc, Name_uI)),\n+                      Expression   => Make_Identifier (Loc, Name_uI)),\n \n                     Make_Identifier (Loc, Name_uP),       --  parameter block\n                     New_Occurrence_Of                     --  Asynchronous_Call\n@@ -2442,38 +2436,29 @@ package body Exp_Disp is\n       Append_List_To (Params, New_List (\n \n         Make_Parameter_Specification (Loc,\n-          Defining_Identifier =>\n-            Make_Defining_Identifier (Loc, Name_uT),\n-          Parameter_Type =>\n-            New_Occurrence_Of (Typ, Loc),\n-          In_Present  => True,\n-          Out_Present => True),\n+          Defining_Identifier => Make_Defining_Identifier (Loc, Name_uT),\n+          Parameter_Type      => New_Occurrence_Of (Typ, Loc),\n+          In_Present          => True,\n+          Out_Present         => True),\n \n         Make_Parameter_Specification (Loc,\n-          Defining_Identifier =>\n-            Make_Defining_Identifier (Loc, Name_uS),\n-          Parameter_Type =>\n-            New_Occurrence_Of (Standard_Integer, Loc)),\n+          Defining_Identifier => Make_Defining_Identifier (Loc, Name_uS),\n+          Parameter_Type      => New_Occurrence_Of (Standard_Integer, Loc)),\n \n         Make_Parameter_Specification (Loc,\n-          Defining_Identifier =>\n-            Make_Defining_Identifier (Loc, Name_uP),\n-          Parameter_Type =>\n-            New_Occurrence_Of (RTE (RE_Address), Loc)),\n+          Defining_Identifier => Make_Defining_Identifier (Loc, Name_uP),\n+          Parameter_Type      => New_Occurrence_Of (RTE (RE_Address), Loc)),\n \n         Make_Parameter_Specification (Loc,\n-          Defining_Identifier =>\n-            Make_Defining_Identifier (Loc, Name_uB),\n-          Parameter_Type =>\n+          Defining_Identifier => Make_Defining_Identifier (Loc, Name_uB),\n+          Parameter_Type      =>\n             New_Occurrence_Of (RTE (RE_Dummy_Communication_Block), Loc),\n-          Out_Present => True),\n+          Out_Present         => True),\n \n         Make_Parameter_Specification (Loc,\n-          Defining_Identifier =>\n-            Make_Defining_Identifier (Loc, Name_uF),\n-          Parameter_Type =>\n-            New_Occurrence_Of (Standard_Boolean, Loc),\n-          Out_Present => True)));\n+          Defining_Identifier => Make_Defining_Identifier (Loc, Name_uF),\n+          Parameter_Type      => New_Occurrence_Of (Standard_Boolean, Loc),\n+          Out_Present         => True)));\n \n       return\n         Make_Procedure_Specification (Loc,\n@@ -2573,10 +2558,9 @@ package body Exp_Disp is\n       if Is_Interface (Typ) then\n          return\n            Make_Subprogram_Body (Loc,\n-             Specification =>\n+             Specification              =>\n                Make_Disp_Conditional_Select_Spec (Typ),\n-             Declarations =>\n-               No_List,\n+             Declarations               => No_List,\n              Handled_Statement_Sequence =>\n                Make_Handled_Sequence_Of_Statements (Loc,\n                  New_List (Make_Assignment_Statement (Loc,\n@@ -2595,9 +2579,8 @@ package body Exp_Disp is\n \n          Append_To (Decls,\n            Make_Object_Declaration (Loc,\n-             Defining_Identifier =>\n-               Make_Defining_Identifier (Loc, Name_uI),\n-             Object_Definition =>\n+             Defining_Identifier => Make_Defining_Identifier (Loc, Name_uI),\n+             Object_Definition   =>\n                New_Occurrence_Of (Standard_Integer, Loc)));\n \n          --  Generate:\n@@ -2622,9 +2605,8 @@ package body Exp_Disp is\n          Blk_Nam := Make_Temporary (Loc, 'B');\n          Append_To (Decls,\n            Make_Object_Declaration (Loc,\n-             Defining_Identifier =>\n-               Blk_Nam,\n-             Object_Definition =>\n+             Defining_Identifier => Blk_Nam,\n+             Object_Definition   =>\n                New_Occurrence_Of (RTE (RE_Communication_Block), Loc)));\n \n          --  Generate:\n@@ -2641,21 +2623,20 @@ package body Exp_Disp is\n          else\n             Tag_Node :=\n               Make_Attribute_Reference (Loc,\n-                Prefix => New_Occurrence_Of (Typ, Loc),\n+                Prefix         => New_Occurrence_Of (Typ, Loc),\n                 Attribute_Name => Name_Tag);\n          end if;\n \n          Append_To (Stmts,\n            Make_Assignment_Statement (Loc,\n-             Name => Make_Identifier (Loc, Name_uI),\n+             Name       => Make_Identifier (Loc, Name_uI),\n              Expression =>\n                Make_Function_Call (Loc,\n-                 Name =>\n+                 Name                   =>\n                    New_Occurrence_Of (RTE (RE_Get_Entry_Index), Loc),\n-                 Parameter_Associations =>\n-                   New_List (\n-                     Tag_Node,\n-                     Make_Identifier (Loc, Name_uS)))));\n+                 Parameter_Associations => New_List (\n+                   Tag_Node,\n+                   Make_Identifier (Loc, Name_uS)))));\n \n          if Ekind (Conc_Typ) = E_Protected_Type then\n \n@@ -2684,10 +2665,9 @@ package body Exp_Disp is\n \n                   Append_To (Stmts,\n                     Make_Procedure_Call_Statement (Loc,\n-                      Name =>\n+                      Name                   =>\n                         New_Occurrence_Of (RTE (RE_Protected_Entry_Call), Loc),\n-                      Parameter_Associations =>\n-                        New_List (\n+                      Parameter_Associations => New_List (\n                           Obj_Ref,\n \n                           Make_Unchecked_Type_Conversion (Loc,  --  entry index\n@@ -2710,11 +2690,10 @@ package body Exp_Disp is\n \n                   Append_To (Stmts,\n                     Make_Procedure_Call_Statement (Loc,\n-                      Name =>\n+                      Name                   =>\n                         New_Occurrence_Of\n                           (RTE (RE_Protected_Single_Entry_Call), Loc),\n-                      Parameter_Associations =>\n-                        New_List (\n+                      Parameter_Associations => New_List (\n                           Obj_Ref,\n \n                           Make_Attribute_Reference (Loc,\n@@ -2740,10 +2719,9 @@ package body Exp_Disp is\n                   Make_Op_Not (Loc,\n                     Right_Opnd =>\n                       Make_Function_Call (Loc,\n-                        Name =>\n+                        Name                   =>\n                           New_Occurrence_Of (RTE (RE_Cancelled), Loc),\n-                        Parameter_Associations =>\n-                          New_List (\n+                        Parameter_Associations => New_List (\n                             New_Occurrence_Of (Blk_Nam, Loc))))));\n          else\n             pragma Assert (Ekind (Conc_Typ) = E_Task_Type);\n@@ -2761,10 +2739,9 @@ package body Exp_Disp is\n \n             Append_To (Stmts,\n               Make_Procedure_Call_Statement (Loc,\n-                Name =>\n+                Name                   =>\n                   New_Occurrence_Of (RTE (RE_Task_Entry_Call), Loc),\n-                Parameter_Associations =>\n-                  New_List (\n+                Parameter_Associations => New_List (\n \n                     Make_Selected_Component (Loc,         -- T._task_id\n                       Prefix        => Make_Identifier (Loc, Name_uT),\n@@ -2828,38 +2805,29 @@ package body Exp_Disp is\n       Append_List_To (Params, New_List (\n \n         Make_Parameter_Specification (Loc,\n-          Defining_Identifier =>\n-            Make_Defining_Identifier (Loc, Name_uT),\n-          Parameter_Type =>\n-            New_Occurrence_Of (Typ, Loc),\n-          In_Present  => True,\n-          Out_Present => True),\n+          Defining_Identifier => Make_Defining_Identifier (Loc, Name_uT),\n+          Parameter_Type      => New_Occurrence_Of (Typ, Loc),\n+          In_Present          => True,\n+          Out_Present         => True),\n \n         Make_Parameter_Specification (Loc,\n-          Defining_Identifier =>\n-            Make_Defining_Identifier (Loc, Name_uS),\n-          Parameter_Type =>\n-            New_Occurrence_Of (Standard_Integer, Loc)),\n+          Defining_Identifier => Make_Defining_Identifier (Loc, Name_uS),\n+          Parameter_Type      => New_Occurrence_Of (Standard_Integer, Loc)),\n \n         Make_Parameter_Specification (Loc,\n-          Defining_Identifier =>\n-            Make_Defining_Identifier (Loc, Name_uP),\n-          Parameter_Type =>\n-            New_Occurrence_Of (RTE (RE_Address), Loc)),\n+          Defining_Identifier => Make_Defining_Identifier (Loc, Name_uP),\n+          Parameter_Type      => New_Occurrence_Of (RTE (RE_Address), Loc)),\n \n         Make_Parameter_Specification (Loc,\n-          Defining_Identifier =>\n-            Make_Defining_Identifier (Loc, Name_uC),\n-          Parameter_Type =>\n+          Defining_Identifier => Make_Defining_Identifier (Loc, Name_uC),\n+          Parameter_Type      =>\n             New_Occurrence_Of (RTE (RE_Prim_Op_Kind), Loc),\n-          Out_Present => True),\n+          Out_Present         => True),\n \n         Make_Parameter_Specification (Loc,\n-          Defining_Identifier =>\n-            Make_Defining_Identifier (Loc, Name_uF),\n-          Parameter_Type =>\n-            New_Occurrence_Of (Standard_Boolean, Loc),\n-          Out_Present => True)));\n+          Defining_Identifier => Make_Defining_Identifier (Loc, Name_uF),\n+          Parameter_Type      => New_Occurrence_Of (Standard_Boolean, Loc),\n+          Out_Present         => True)));\n \n       return\n         Make_Procedure_Specification (Loc,\n@@ -2871,9 +2839,7 @@ package body Exp_Disp is\n    -- Make_Disp_Get_Prim_Op_Kind_Body --\n    -------------------------------------\n \n-   function Make_Disp_Get_Prim_Op_Kind_Body\n-     (Typ : Entity_Id) return Node_Id\n-   is\n+   function Make_Disp_Get_Prim_Op_Kind_Body (Typ : Entity_Id) return Node_Id is\n       Loc      : constant Source_Ptr := Sloc (Typ);\n       Tag_Node : Node_Id;\n \n@@ -2883,10 +2849,9 @@ package body Exp_Disp is\n       if Is_Interface (Typ) then\n          return\n            Make_Subprogram_Body (Loc,\n-             Specification =>\n+             Specification              =>\n                Make_Disp_Get_Prim_Op_Kind_Spec (Typ),\n-             Declarations =>\n-               New_List,\n+             Declarations               => New_List,\n              Handled_Statement_Sequence =>\n                Make_Handled_Sequence_Of_Statements (Loc,\n                  New_List (Make_Null_Statement (Loc))));\n@@ -2907,22 +2872,20 @@ package body Exp_Disp is\n       else\n          Tag_Node :=\n            Make_Attribute_Reference (Loc,\n-             Prefix => New_Occurrence_Of (Typ, Loc),\n+             Prefix         => New_Occurrence_Of (Typ, Loc),\n              Attribute_Name => Name_Tag);\n       end if;\n \n       return\n         Make_Subprogram_Body (Loc,\n-          Specification =>\n+          Specification              =>\n             Make_Disp_Get_Prim_Op_Kind_Spec (Typ),\n-          Declarations =>\n-            New_List,\n+          Declarations               => New_List,\n           Handled_Statement_Sequence =>\n             Make_Handled_Sequence_Of_Statements (Loc,\n               New_List (\n                 Make_Assignment_Statement (Loc,\n-                  Name =>\n-                    Make_Identifier (Loc, Name_uC),\n+                  Name       => Make_Identifier (Loc, Name_uC),\n                   Expression =>\n                     Make_Function_Call (Loc,\n                       Name =>\n@@ -2941,8 +2904,7 @@ package body Exp_Disp is\n    is\n       Loc    : constant Source_Ptr := Sloc (Typ);\n       Def_Id : constant Node_Id    :=\n-                 Make_Defining_Identifier (Loc,\n-                   Name_uDisp_Get_Prim_Op_Kind);\n+                 Make_Defining_Identifier (Loc, Name_uDisp_Get_Prim_Op_Kind);\n       Params : constant List_Id    := New_List;\n \n    begin\n@@ -2955,25 +2917,20 @@ package body Exp_Disp is\n       Append_List_To (Params, New_List (\n \n         Make_Parameter_Specification (Loc,\n-          Defining_Identifier =>\n-            Make_Defining_Identifier (Loc, Name_uT),\n-          Parameter_Type =>\n-            New_Occurrence_Of (Typ, Loc),\n-          In_Present  => True,\n-          Out_Present => True),\n+          Defining_Identifier => Make_Defining_Identifier (Loc, Name_uT),\n+          Parameter_Type      => New_Occurrence_Of (Typ, Loc),\n+          In_Present          => True,\n+          Out_Present         => True),\n \n         Make_Parameter_Specification (Loc,\n-          Defining_Identifier =>\n-            Make_Defining_Identifier (Loc, Name_uS),\n-          Parameter_Type =>\n-            New_Occurrence_Of (Standard_Integer, Loc)),\n+          Defining_Identifier => Make_Defining_Identifier (Loc, Name_uS),\n+          Parameter_Type      => New_Occurrence_Of (Standard_Integer, Loc)),\n \n         Make_Parameter_Specification (Loc,\n-          Defining_Identifier =>\n-            Make_Defining_Identifier (Loc, Name_uC),\n-          Parameter_Type =>\n+          Defining_Identifier => Make_Defining_Identifier (Loc, Name_uC),\n+          Parameter_Type      =>\n             New_Occurrence_Of (RTE (RE_Prim_Op_Kind), Loc),\n-          Out_Present => True)));\n+          Out_Present         => True)));\n \n       return\n         Make_Procedure_Specification (Loc,\n@@ -3004,9 +2961,8 @@ package body Exp_Disp is\n            Make_Simple_Return_Statement (Loc,\n              Expression =>\n                Make_Unchecked_Type_Conversion (Loc,\n-                 Subtype_Mark =>\n-                   New_Occurrence_Of (RTE (RE_Address), Loc),\n-                 Expression =>\n+                 Subtype_Mark => New_Occurrence_Of (RTE (RE_Address), Loc),\n+                 Expression   =>\n                    Make_Selected_Component (Loc,\n                      Prefix        => Make_Identifier (Loc, Name_uT),\n                      Selector_Name => Make_Identifier (Loc, Name_uTask_Id))));\n@@ -3019,19 +2975,15 @@ package body Exp_Disp is\n \n          Ret :=\n            Make_Simple_Return_Statement (Loc,\n-             Expression =>\n-               New_Occurrence_Of (RTE (RE_Null_Address), Loc));\n+             Expression => New_Occurrence_Of (RTE (RE_Null_Address), Loc));\n       end if;\n \n       return\n         Make_Subprogram_Body (Loc,\n-          Specification =>\n-            Make_Disp_Get_Task_Id_Spec (Typ),\n-          Declarations =>\n-            New_List,\n+          Specification              => Make_Disp_Get_Task_Id_Spec (Typ),\n+          Declarations               => New_List,\n           Handled_Statement_Sequence =>\n-            Make_Handled_Sequence_Of_Statements (Loc,\n-              New_List (Ret)));\n+            Make_Handled_Sequence_Of_Statements (Loc, New_List (Ret)));\n    end Make_Disp_Get_Task_Id_Body;\n \n    --------------------------------\n@@ -3048,15 +3000,13 @@ package body Exp_Disp is\n \n       return\n         Make_Function_Specification (Loc,\n-          Defining_Unit_Name =>\n+          Defining_Unit_Name       =>\n             Make_Defining_Identifier (Loc, Name_uDisp_Get_Task_Id),\n           Parameter_Specifications => New_List (\n             Make_Parameter_Specification (Loc,\n-              Defining_Identifier =>\n-                Make_Defining_Identifier (Loc, Name_uT),\n-              Parameter_Type =>\n-                New_Occurrence_Of (Typ, Loc))),\n-          Result_Definition =>\n+              Defining_Identifier => Make_Defining_Identifier (Loc, Name_uT),\n+              Parameter_Type      => New_Occurrence_Of (Typ, Loc))),\n+          Result_Definition        =>\n             New_Occurrence_Of (RTE (RE_Address), Loc));\n    end Make_Disp_Get_Task_Id_Spec;\n \n@@ -3082,10 +3032,8 @@ package body Exp_Disp is\n       then\n          return\n            Make_Subprogram_Body (Loc,\n-             Specification =>\n-               Make_Disp_Requeue_Spec (Typ),\n-             Declarations =>\n-               No_List,\n+             Specification              => Make_Disp_Requeue_Spec (Typ),\n+             Declarations               => No_List,\n              Handled_Statement_Sequence =>\n                Make_Handled_Sequence_Of_Statements (Loc,\n                  New_List (Make_Null_Statement (Loc))));\n@@ -3125,8 +3073,8 @@ package body Exp_Disp is\n \n                     Make_Procedure_Call_Statement (Loc,\n                       Name =>\n-                        New_Occurrence_Of (\n-                          RTE (RE_Requeue_Protected_Entry), Loc),\n+                        New_Occurrence_Of\n+                          (RTE (RE_Requeue_Protected_Entry), Loc),\n                       Parameter_Associations =>\n                         New_List (\n \n@@ -3140,7 +3088,7 @@ package body Exp_Disp is\n                           Make_Attribute_Reference (Loc,      -- O._object'Acc\n                             Attribute_Name =>\n                               Name_Unchecked_Access,\n-                            Prefix =>\n+                            Prefix         =>\n                               Make_Selected_Component (Loc,\n                                 Prefix        =>\n                                   Make_Identifier (Loc, Name_uO),\n@@ -3149,8 +3097,8 @@ package body Exp_Disp is\n \n                           Make_Unchecked_Type_Conversion (Loc,  -- entry index\n                             Subtype_Mark =>\n-                              New_Occurrence_Of (\n-                                RTE (RE_Protected_Entry_Index), Loc),\n+                              New_Occurrence_Of\n+                                (RTE (RE_Protected_Entry_Index), Loc),\n                             Expression => Make_Identifier (Loc, Name_uI)),\n \n                           Make_Identifier (Loc, Name_uA)))),   -- abort status\n@@ -3162,30 +3110,29 @@ package body Exp_Disp is\n \n                     Make_Procedure_Call_Statement (Loc,\n                       Name =>\n-                        New_Occurrence_Of (\n-                          RTE (RE_Requeue_Task_To_Protected_Entry), Loc),\n+                        New_Occurrence_Of\n+                          (RTE (RE_Requeue_Task_To_Protected_Entry), Loc),\n                       Parameter_Associations =>\n                         New_List (\n \n                           Make_Attribute_Reference (Loc,     -- O._object'Acc\n-                            Attribute_Name =>\n-                              Name_Unchecked_Access,\n-                            Prefix =>\n+                            Attribute_Name => Name_Unchecked_Access,\n+                            Prefix         =>\n                               Make_Selected_Component (Loc,\n-                                Prefix =>\n+                                Prefix        =>\n                                   Make_Identifier (Loc, Name_uO),\n                                 Selector_Name =>\n                                   Make_Identifier (Loc, Name_uObject))),\n \n                           Make_Unchecked_Type_Conversion (Loc, -- entry index\n                             Subtype_Mark =>\n-                              New_Occurrence_Of (\n-                                RTE (RE_Protected_Entry_Index), Loc),\n-                            Expression =>\n-                              Make_Identifier (Loc, Name_uI)),\n+                              New_Occurrence_Of\n+                                (RTE (RE_Protected_Entry_Index), Loc),\n+                            Expression   => Make_Identifier (Loc, Name_uI)),\n \n                           Make_Identifier (Loc, Name_uA)))))); -- abort status\n          end if;\n+\n       else\n          pragma Assert (Is_Task_Type (Conc_Typ));\n \n@@ -3240,7 +3187,8 @@ package body Exp_Disp is\n                --  Call to Requeue_Task_Entry\n \n                Make_Procedure_Call_Statement (Loc,\n-                 Name => New_Occurrence_Of (RTE (RE_Requeue_Task_Entry), Loc),\n+                 Name                   =>\n+                   New_Occurrence_Of (RTE (RE_Requeue_Task_Entry), Loc),\n \n                  Parameter_Associations => New_List (\n \n@@ -3261,10 +3209,8 @@ package body Exp_Disp is\n \n       return\n         Make_Subprogram_Body (Loc,\n-          Specification =>\n-            Make_Disp_Requeue_Spec (Typ),\n-          Declarations =>\n-            New_List,\n+          Specification              => Make_Disp_Requeue_Spec (Typ),\n+          Declarations               => New_List,\n           Handled_Statement_Sequence =>\n             Make_Handled_Sequence_Of_Statements (Loc, Stmts));\n    end Make_Disp_Requeue_Body;\n@@ -3296,39 +3242,38 @@ package body Exp_Disp is\n           Defining_Unit_Name =>\n             Make_Defining_Identifier (Loc, Name_uDisp_Requeue),\n \n-          Parameter_Specifications =>\n-            New_List (\n+          Parameter_Specifications => New_List (\n \n               Make_Parameter_Specification (Loc,             --  O\n                 Defining_Identifier =>\n                   Make_Defining_Identifier (Loc, Name_uO),\n-                Parameter_Type =>\n+                Parameter_Type      =>\n                   New_Occurrence_Of (Typ, Loc),\n-                In_Present  => True,\n-                Out_Present => True),\n+                In_Present          => True,\n+                Out_Present         => True),\n \n               Make_Parameter_Specification (Loc,             --  F\n                 Defining_Identifier =>\n                   Make_Defining_Identifier (Loc, Name_uF),\n-                Parameter_Type =>\n+                Parameter_Type      =>\n                   New_Occurrence_Of (Standard_Boolean, Loc)),\n \n               Make_Parameter_Specification (Loc,             --  P\n                 Defining_Identifier =>\n                   Make_Defining_Identifier (Loc, Name_uP),\n-                Parameter_Type =>\n+                Parameter_Type      =>\n                   New_Occurrence_Of (RTE (RE_Address), Loc)),\n \n               Make_Parameter_Specification (Loc,             --  I\n                 Defining_Identifier =>\n                   Make_Defining_Identifier (Loc, Name_uI),\n-                Parameter_Type =>\n+                Parameter_Type      =>\n                   New_Occurrence_Of (Standard_Integer, Loc)),\n \n               Make_Parameter_Specification (Loc,             --  A\n                 Defining_Identifier =>\n                   Make_Defining_Identifier (Loc, Name_uA),\n-                Parameter_Type =>\n+                Parameter_Type      =>\n                   New_Occurrence_Of (Standard_Boolean, Loc))));\n    end Make_Disp_Requeue_Spec;\n \n@@ -3429,10 +3374,8 @@ package body Exp_Disp is\n       if Is_Interface (Typ) then\n          return\n            Make_Subprogram_Body (Loc,\n-             Specification =>\n-               Make_Disp_Timed_Select_Spec (Typ),\n-             Declarations =>\n-               New_List,\n+             Specification              => Make_Disp_Timed_Select_Spec (Typ),\n+             Declarations               => New_List,\n              Handled_Statement_Sequence =>\n                Make_Handled_Sequence_Of_Statements (Loc,\n                  New_List (\n@@ -3493,10 +3436,9 @@ package body Exp_Disp is\n              Expression =>\n                Make_Function_Call (Loc,\n                  Name => New_Occurrence_Of (RTE (RE_Get_Entry_Index), Loc),\n-                 Parameter_Associations =>\n-                   New_List (\n-                     Tag_Node,\n-                     Make_Identifier (Loc, Name_uS)))));\n+                 Parameter_Associations => New_List (\n+                   Tag_Node,\n+                   Make_Identifier (Loc, Name_uS)))));\n \n          --  Protected case\n \n@@ -3539,21 +3481,19 @@ package body Exp_Disp is\n                       Name =>\n                         New_Occurrence_Of\n                           (RTE (RE_Timed_Protected_Entry_Call), Loc),\n-                      Parameter_Associations =>\n-                        New_List (\n-                          Obj_Ref,\n+                      Parameter_Associations => New_List (\n+                        Obj_Ref,\n \n-                          Make_Unchecked_Type_Conversion (Loc,  --  entry index\n-                            Subtype_Mark =>\n-                              New_Occurrence_Of\n-                                (RTE (RE_Protected_Entry_Index), Loc),\n-                            Expression =>\n-                              Make_Identifier (Loc, Name_uI)),\n+                        Make_Unchecked_Type_Conversion (Loc,  --  entry index\n+                          Subtype_Mark =>\n+                            New_Occurrence_Of\n+                              (RTE (RE_Protected_Entry_Index), Loc),\n+                          Expression   => Make_Identifier (Loc, Name_uI)),\n \n-                          Make_Identifier (Loc, Name_uP),   --  parameter block\n-                          Make_Identifier (Loc, Name_uD),   --  delay\n-                          Make_Identifier (Loc, Name_uM),   --  delay mode\n-                          Make_Identifier (Loc, Name_uF)))); --  status flag\n+                        Make_Identifier (Loc, Name_uP),   --  parameter block\n+                        Make_Identifier (Loc, Name_uD),   --  delay\n+                        Make_Identifier (Loc, Name_uM),   --  delay mode\n+                        Make_Identifier (Loc, Name_uF)))); --  status flag\n \n                when others =>\n                   raise Program_Error;\n@@ -3579,24 +3519,23 @@ package body Exp_Disp is\n \n             Append_To (Stmts,\n               Make_Procedure_Call_Statement (Loc,\n-                Name =>\n+                Name                   =>\n                   New_Occurrence_Of (RTE (RE_Timed_Task_Entry_Call), Loc),\n-                Parameter_Associations =>\n-                  New_List (\n \n-                    Make_Selected_Component (Loc,         --  T._task_id\n-                      Prefix        => Make_Identifier (Loc, Name_uT),\n-                      Selector_Name => Make_Identifier (Loc, Name_uTask_Id)),\n+                Parameter_Associations => New_List (\n+                  Make_Selected_Component (Loc,         --  T._task_id\n+                    Prefix        => Make_Identifier (Loc, Name_uT),\n+                    Selector_Name => Make_Identifier (Loc, Name_uTask_Id)),\n \n-                    Make_Unchecked_Type_Conversion (Loc,  --  entry index\n-                      Subtype_Mark =>\n-                        New_Occurrence_Of (RTE (RE_Task_Entry_Index), Loc),\n-                      Expression   => Make_Identifier (Loc, Name_uI)),\n+                  Make_Unchecked_Type_Conversion (Loc,  --  entry index\n+                    Subtype_Mark =>\n+                      New_Occurrence_Of (RTE (RE_Task_Entry_Index), Loc),\n+                    Expression   => Make_Identifier (Loc, Name_uI)),\n \n-                    Make_Identifier (Loc, Name_uP),       --  parameter block\n-                    Make_Identifier (Loc, Name_uD),       --  delay\n-                    Make_Identifier (Loc, Name_uM),       --  delay mode\n-                    Make_Identifier (Loc, Name_uF))));    --  status flag\n+                  Make_Identifier (Loc, Name_uP),       --  parameter block\n+                  Make_Identifier (Loc, Name_uD),       --  delay\n+                  Make_Identifier (Loc, Name_uM),       --  delay mode\n+                  Make_Identifier (Loc, Name_uF))));    --  status flag\n          end if;\n \n       else\n@@ -3647,51 +3586,38 @@ package body Exp_Disp is\n       Append_List_To (Params, New_List (\n \n         Make_Parameter_Specification (Loc,\n-          Defining_Identifier =>\n-            Make_Defining_Identifier (Loc, Name_uT),\n-          Parameter_Type =>\n-            New_Occurrence_Of (Typ, Loc),\n-          In_Present  => True,\n-          Out_Present => True),\n+          Defining_Identifier => Make_Defining_Identifier (Loc, Name_uT),\n+          Parameter_Type      => New_Occurrence_Of (Typ, Loc),\n+          In_Present          => True,\n+          Out_Present         => True),\n \n         Make_Parameter_Specification (Loc,\n-          Defining_Identifier =>\n-            Make_Defining_Identifier (Loc, Name_uS),\n-          Parameter_Type =>\n-            New_Occurrence_Of (Standard_Integer, Loc)),\n+          Defining_Identifier => Make_Defining_Identifier (Loc, Name_uS),\n+          Parameter_Type      => New_Occurrence_Of (Standard_Integer, Loc)),\n \n         Make_Parameter_Specification (Loc,\n-          Defining_Identifier =>\n-            Make_Defining_Identifier (Loc, Name_uP),\n-          Parameter_Type =>\n-            New_Occurrence_Of (RTE (RE_Address), Loc)),\n+          Defining_Identifier => Make_Defining_Identifier (Loc, Name_uP),\n+          Parameter_Type      => New_Occurrence_Of (RTE (RE_Address), Loc)),\n \n         Make_Parameter_Specification (Loc,\n-          Defining_Identifier =>\n-            Make_Defining_Identifier (Loc, Name_uD),\n-          Parameter_Type =>\n-            New_Occurrence_Of (Standard_Duration, Loc)),\n+          Defining_Identifier => Make_Defining_Identifier (Loc, Name_uD),\n+          Parameter_Type      => New_Occurrence_Of (Standard_Duration, Loc)),\n \n         Make_Parameter_Specification (Loc,\n-          Defining_Identifier =>\n-            Make_Defining_Identifier (Loc, Name_uM),\n-          Parameter_Type =>\n-            New_Occurrence_Of (Standard_Integer, Loc)),\n+          Defining_Identifier => Make_Defining_Identifier (Loc, Name_uM),\n+          Parameter_Type      => New_Occurrence_Of (Standard_Integer, Loc)),\n \n         Make_Parameter_Specification (Loc,\n-          Defining_Identifier =>\n-            Make_Defining_Identifier (Loc, Name_uC),\n-          Parameter_Type =>\n+          Defining_Identifier => Make_Defining_Identifier (Loc, Name_uC),\n+          Parameter_Type      =>\n             New_Occurrence_Of (RTE (RE_Prim_Op_Kind), Loc),\n-          Out_Present => True)));\n+          Out_Present         => True)));\n \n       Append_To (Params,\n         Make_Parameter_Specification (Loc,\n-          Defining_Identifier =>\n-            Make_Defining_Identifier (Loc, Name_uF),\n-          Parameter_Type =>\n-            New_Occurrence_Of (Standard_Boolean, Loc),\n-          Out_Present => True));\n+          Defining_Identifier => Make_Defining_Identifier (Loc, Name_uF),\n+          Parameter_Type      => New_Occurrence_Of (Standard_Boolean, Loc),\n+          Out_Present         => True));\n \n       return\n         Make_Procedure_Specification (Loc,\n@@ -3704,17 +3630,17 @@ package body Exp_Disp is\n    -------------\n \n    --  The frontend supports two models for expanding dispatch tables\n-   --  associated with library-level defined tagged types: statically\n-   --  and non-statically allocated dispatch tables. In the former case\n-   --  the object containing the dispatch table is constant and it is\n-   --  initialized by means of a positional aggregate. In the latter case,\n-   --  the object containing the dispatch table is a variable which is\n-   --  initialized by means of assignments.\n+   --  associated with library-level defined tagged types: statically and\n+   --  non-statically allocated dispatch tables. In the former case the object\n+   --  containing the dispatch table is constant and it is initialized by means\n+   --  of a positional aggregate. In the latter case, the object containing\n+   --  the dispatch table is a variable which is initialized by means of\n+   --  assignments.\n \n    --  In case of locally defined tagged types, the object containing the\n-   --  object containing the dispatch table is always a variable (instead\n-   --  of a constant). This is currently required to give support to late\n-   --  overriding of primitives. For example:\n+   --  object containing the dispatch table is always a variable (instead of a\n+   --  constant). This is currently required to give support to late overriding\n+   --  of primitives. For example:\n \n    --     procedure Example is\n    --        package Pkg is\n@@ -3826,15 +3752,14 @@ package body Exp_Disp is\n               or else not Used_As_Generic_Actual (T)\n             then\n                return False;\n-\n             else\n                Gen_Par := Generic_Parent (Parent (Current_Scope));\n             end if;\n \n             F :=\n               First\n                 (Generic_Formal_Declarations\n-                     (Unit_Declaration_Node (Gen_Par)));\n+                   (Unit_Declaration_Node (Gen_Par)));\n             while Present (F) loop\n                if Ekind (Defining_Identifier (F)) = E_Incomplete_Type then\n                   return True;\n@@ -3864,28 +3789,27 @@ package body Exp_Disp is\n             Error_Msg_NE\n               (\"declaration must appear after completion of type &\", N, Typ);\n             Error_Msg_NE\n-              (\"\\which is an untagged type in the profile of\"\n-               & \" primitive operation & declared#\", N, Subp);\n+              (\"\\which is an untagged type in the profile of \"\n+               & \"primitive operation & declared#\", N, Subp);\n \n          else\n             Comp := Private_Component (Typ);\n \n             if not Is_Tagged_Type (Typ)\n               and then Present (Comp)\n               and then not Is_Frozen (Comp)\n-              and then\n-                not Is_Actual_For_Formal_Incomplete_Type (Comp)\n+              and then not Is_Actual_For_Formal_Incomplete_Type (Comp)\n             then\n                Error_Msg_Sloc := Sloc (Subp);\n                Error_Msg_Node_2 := Subp;\n                Error_Msg_Name_1 := Chars (Tagged_Type);\n                Error_Msg_NE\n                  (\"declaration must appear after completion of type &\",\n-                   N, Comp);\n+                  N, Comp);\n                Error_Msg_NE\n-                 (\"\\which is a component of untagged type& in the profile of\"\n-               & \" primitive & of type % that is frozen by the declaration \",\n-                   N, Typ);\n+                 (\"\\which is a component of untagged type& in the profile \"\n+                  & \"of primitive & of type % that is frozen by the \"\n+                  & \"declaration \", N, Typ);\n             end if;\n          end if;\n       end Check_Premature_Freezing;\n@@ -4081,8 +4005,7 @@ package body Exp_Disp is\n             end loop;\n \n             New_Node :=\n-              Make_Aggregate (Loc,\n-                Expressions => Prim_Ops_Aggr_List);\n+              Make_Aggregate (Loc, Expressions => Prim_Ops_Aggr_List);\n \n             --  Remember aggregates initializing dispatch tables\n \n@@ -4162,7 +4085,7 @@ package body Exp_Disp is\n \n          Append_To (DT_Aggr_List,\n            Make_Attribute_Reference (Loc,\n-             Prefix => New_Occurrence_Of (Predef_Prims, Loc),\n+             Prefix         => New_Occurrence_Of (Predef_Prims, Loc),\n              Attribute_Name => Name_Address));\n \n          --  Note: The correct value of Offset_To_Top will be set by the init\n@@ -4224,7 +4147,7 @@ package body Exp_Disp is\n \n                         Append_To (OSD_Aggr_List,\n                           Make_Component_Association (Loc,\n-                            Choices => New_List (\n+                            Choices    => New_List (\n                               Make_Integer_Literal (Loc,\n                                 DT_Position (Prim_Alias))),\n                             Expression =>\n@@ -4249,7 +4172,7 @@ package body Exp_Disp is\n                   Make_Subtype_Indication (Loc,\n                     Subtype_Mark =>\n                       New_Occurrence_Of (RTE (RE_Object_Specific_Data), Loc),\n-                    Constraint =>\n+                    Constraint   =>\n                       Make_Index_Or_Discriminant_Constraint (Loc,\n                         Constraints => New_List (\n                           Make_Integer_Literal (Loc, Nb_Prim)))),\n@@ -4258,14 +4181,14 @@ package body Exp_Disp is\n                   Make_Aggregate (Loc,\n                     Component_Associations => New_List (\n                       Make_Component_Association (Loc,\n-                        Choices => New_List (\n+                        Choices    => New_List (\n                           New_Occurrence_Of\n                             (RTE_Record_Component (RE_OSD_Num_Prims), Loc)),\n                         Expression =>\n                           Make_Integer_Literal (Loc, Nb_Prim)),\n \n                       Make_Component_Association (Loc,\n-                        Choices => New_List (\n+                        Choices    => New_List (\n                           New_Occurrence_Of\n                             (RTE_Record_Component (RE_OSD_Table), Loc)),\n                         Expression => Make_Aggregate (Loc,\n@@ -4277,7 +4200,7 @@ package body Exp_Disp is\n                 Chars      => Name_Alignment,\n                 Expression =>\n                   Make_Attribute_Reference (Loc,\n-                    Prefix =>\n+                    Prefix         =>\n                       New_Occurrence_Of (RTE (RE_Integer_Address), Loc),\n                     Attribute_Name => Name_Alignment)));\n \n@@ -4286,7 +4209,7 @@ package body Exp_Disp is\n \n             Append_To (DT_Aggr_List,\n               Make_Attribute_Reference (Loc,\n-                Prefix => New_Occurrence_Of (OSD, Loc),\n+                Prefix         => New_Occurrence_Of (OSD, Loc),\n                 Attribute_Name => Name_Address));\n          end if;\n \n@@ -4675,15 +4598,16 @@ package body Exp_Disp is\n             --  Build the secondary table containing pointers to thunks\n \n             Make_Secondary_DT\n-             (Typ             => Typ,\n-              Iface           => Base_Type (Related_Type (Node (AI_Tag_Comp))),\n-              Suffix_Index    => Suffix_Index,\n-              Num_Iface_Prims => UI_To_Int\n-                                   (DT_Entry_Count (Node (AI_Tag_Comp))),\n-              Iface_DT_Ptr    => Node (AI_Tag_Elmt),\n+             (Typ              => Typ,\n+              Iface            => Base_Type\n+                                    (Related_Type (Node (AI_Tag_Comp))),\n+              Suffix_Index     => Suffix_Index,\n+              Num_Iface_Prims  => UI_To_Int\n+                                    (DT_Entry_Count (Node (AI_Tag_Comp))),\n+              Iface_DT_Ptr     => Node (AI_Tag_Elmt),\n               Predef_Prims_Ptr => Node (Next_Elmt (AI_Tag_Elmt)),\n-              Build_Thunks    => True,\n-              Result          => Result);\n+              Build_Thunks     => True,\n+              Result           => Result);\n \n             --  Skip secondary dispatch table referencing thunks to predefined\n             --  primitives.\n@@ -4762,7 +4686,7 @@ package body Exp_Disp is\n                 Chars      => Name_Alignment,\n                 Expression =>\n                   Make_Attribute_Reference (Loc,\n-                    Prefix =>\n+                    Prefix         =>\n                       New_Occurrence_Of (RTE (RE_Integer_Address), Loc),\n                     Attribute_Name => Name_Alignment)));\n \n@@ -4774,12 +4698,12 @@ package body Exp_Disp is\n                 Expression =>\n                   Unchecked_Convert_To (RTE (RE_Tag),\n                     Make_Attribute_Reference (Loc,\n-                      Prefix =>\n+                      Prefix         =>\n                         Make_Selected_Component (Loc,\n-                          Prefix => New_Occurrence_Of (DT, Loc),\n-                        Selector_Name =>\n-                          New_Occurrence_Of\n-                            (RTE_Record_Component (RE_NDT_Prims_Ptr), Loc)),\n+                          Prefix        => New_Occurrence_Of (DT, Loc),\n+                          Selector_Name =>\n+                            New_Occurrence_Of\n+                              (RTE_Record_Component (RE_NDT_Prims_Ptr), Loc)),\n                       Attribute_Name => Name_Address))));\n \n             Set_Is_Statically_Allocated (DT_Ptr,\n@@ -4821,16 +4745,17 @@ package body Exp_Disp is\n                   Make_Subtype_Indication (Loc,\n                     Subtype_Mark =>\n                       New_Occurrence_Of (RTE (RE_Dispatch_Table_Wrapper), Loc),\n-                    Constraint => Make_Index_Or_Discriminant_Constraint (Loc,\n-                                    Constraints => DT_Constr_List))));\n+                    Constraint   =>\n+                      Make_Index_Or_Discriminant_Constraint (Loc,\n+                        Constraints => DT_Constr_List))));\n \n             Append_To (Result,\n               Make_Attribute_Definition_Clause (Loc,\n                 Name       => New_Occurrence_Of (DT, Loc),\n                 Chars      => Name_Alignment,\n                 Expression =>\n                   Make_Attribute_Reference (Loc,\n-                    Prefix =>\n+                    Prefix         =>\n                       New_Occurrence_Of (RTE (RE_Integer_Address), Loc),\n                     Attribute_Name => Name_Alignment)));\n \n@@ -4842,12 +4767,12 @@ package body Exp_Disp is\n                 Expression =>\n                   Unchecked_Convert_To (RTE (RE_Tag),\n                     Make_Attribute_Reference (Loc,\n-                      Prefix =>\n+                      Prefix         =>\n                         Make_Selected_Component (Loc,\n-                          Prefix => New_Occurrence_Of (DT, Loc),\n-                        Selector_Name =>\n-                          New_Occurrence_Of\n-                            (RTE_Record_Component (RE_Prims_Ptr), Loc)),\n+                          Prefix        => New_Occurrence_Of (DT, Loc),\n+                          Selector_Name =>\n+                            New_Occurrence_Of\n+                              (RTE_Record_Component (RE_Prims_Ptr), Loc)),\n                       Attribute_Name => Name_Address))));\n \n             Set_Is_Statically_Allocated (DT_Ptr,\n@@ -4868,16 +4793,16 @@ package body Exp_Disp is\n                 Defining_Identifier =>\n                   Node (Next_Elmt (First_Elmt (Access_Disp_Table (Typ)))),\n                 Constant_Present    => True,\n-                Object_Definition   => New_Occurrence_Of\n-                                            (RTE (RE_Address), Loc),\n+                Object_Definition   =>\n+                  New_Occurrence_Of (RTE (RE_Address), Loc),\n                 Expression =>\n                   Make_Attribute_Reference (Loc,\n-                    Prefix =>\n+                    Prefix         =>\n                       Make_Selected_Component (Loc,\n-                        Prefix => New_Occurrence_Of (DT, Loc),\n-                      Selector_Name =>\n-                        New_Occurrence_Of\n-                          (RTE_Record_Component (RE_Predef_Prims), Loc)),\n+                        Prefix        => New_Occurrence_Of (DT, Loc),\n+                        Selector_Name =>\n+                          New_Occurrence_Of\n+                            (RTE_Record_Component (RE_Predef_Prims), Loc)),\n                     Attribute_Name => Name_Address)));\n          end if;\n       end if;\n@@ -4893,8 +4818,7 @@ package body Exp_Disp is\n           Object_Definition   => New_Occurrence_Of (Standard_String, Loc),\n           Expression =>\n             Make_String_Literal (Loc,\n-              Fully_Qualified_Name_String (First_Subtype (Typ)))));\n-\n+              Strval => Fully_Qualified_Name_String (First_Subtype (Typ)))));\n       Set_Is_Statically_Allocated (Exname);\n       Set_Is_True_Constant (Exname);\n \n@@ -4977,7 +4901,7 @@ package body Exp_Disp is\n       else\n          Append_To (TSD_Aggr_List,\n            Make_Attribute_Reference (Loc,\n-             Prefix => New_Occurrence_Of (Typ, Loc),\n+             Prefix         => New_Occurrence_Of (Typ, Loc),\n              Attribute_Name => Name_Alignment));\n       end if;\n \n@@ -5020,14 +4944,13 @@ package body Exp_Disp is\n         and then not Has_External_Tag_Rep_Clause (Typ)\n       then\n          declare\n-            Exname      : constant Entity_Id :=\n-                            Make_Defining_Identifier (Loc,\n-                              New_External_Name (Tname, 'A'));\n-\n-            Full_Name   : constant String_Id :=\n+            Exname    : constant Entity_Id :=\n+                          Make_Defining_Identifier (Loc,\n+                            Chars => New_External_Name (Tname, 'A'));\n+            Full_Name : constant String_Id :=\n                             Fully_Qualified_Name_String (First_Subtype (Typ));\n-            Str1_Id     : String_Id;\n-            Str2_Id     : String_Id;\n+            Str1_Id   : String_Id;\n+            Str2_Id   : String_Id;\n \n          begin\n             --  Generate:\n@@ -5058,11 +4981,10 @@ package body Exp_Disp is\n                                             (Standard_String, Loc),\n                    Expression =>\n                      Make_Op_Concat (Loc,\n-                       Left_Opnd =>\n-                         Make_String_Literal (Loc, Str1_Id),\n+                       Left_Opnd  => Make_String_Literal (Loc, Str1_Id),\n                        Right_Opnd =>\n                          Make_Op_Concat (Loc,\n-                           Left_Opnd =>\n+                           Left_Opnd  =>\n                              Make_Function_Call (Loc,\n                                Name =>\n                                  New_Occurrence_Of\n@@ -5078,20 +5000,18 @@ package body Exp_Disp is\n                  Make_Object_Declaration (Loc,\n                    Defining_Identifier => Exname,\n                    Constant_Present    => True,\n-                   Object_Definition   => New_Occurrence_Of\n-                                            (Standard_String, Loc),\n-                   Expression =>\n+                   Object_Definition   =>\n+                     New_Occurrence_Of (Standard_String, Loc),\n+                   Expression          =>\n                      Make_Op_Concat (Loc,\n-                       Left_Opnd =>\n-                         Make_String_Literal (Loc, Str1_Id),\n-                       Right_Opnd =>\n-                         Make_String_Literal (Loc, Str2_Id))));\n+                       Left_Opnd  => Make_String_Literal (Loc, Str1_Id),\n+                       Right_Opnd => Make_String_Literal (Loc, Str2_Id))));\n             end if;\n \n             New_Node :=\n               Unchecked_Convert_To (RTE (RE_Cstring_Ptr),\n                 Make_Attribute_Reference (Loc,\n-                  Prefix => New_Occurrence_Of (Exname, Loc),\n+                  Prefix         => New_Occurrence_Of (Exname, Loc),\n                   Attribute_Name => Name_Address));\n          end;\n \n@@ -5160,7 +5080,7 @@ package body Exp_Disp is\n                New_Node :=\n                  Unchecked_Convert_To (RTE (RE_Cstring_Ptr),\n                    Make_Attribute_Reference (Loc,\n-                     Prefix => New_Occurrence_Of (E, Loc),\n+                     Prefix         => New_Occurrence_Of (E, Loc),\n                      Attribute_Name => Name_Address));\n             end if;\n          end;\n@@ -5174,7 +5094,7 @@ package body Exp_Disp is\n          Append_To (TSD_Aggr_List,\n            Unchecked_Convert_To (RTE (RE_Tag_Ptr),\n              Make_Attribute_Reference (Loc,\n-               Prefix => New_Occurrence_Of (HT_Link, Loc),\n+               Prefix         => New_Occurrence_Of (HT_Link, Loc),\n                Attribute_Name => Name_Address)));\n       else\n          Append_To (TSD_Aggr_List,\n@@ -5195,7 +5115,7 @@ package body Exp_Disp is\n                 or else Is_Shared_Passive (Typ)\n                 or else\n                   ((Is_Remote_Types (Typ)\n-                      or else Is_Remote_Call_Interface (Typ))\n+                     or else Is_Remote_Call_Interface (Typ))\n                    and then Original_View_In_Visible_Part (Typ))\n                 or else not Comes_From_Source (Typ));\n \n@@ -5209,13 +5129,10 @@ package body Exp_Disp is\n       if RTE_Record_Component_Available (RE_Type_Is_Abstract) then\n          declare\n             Type_Is_Abstract : Entity_Id;\n-\n          begin\n-            Type_Is_Abstract :=\n-              Boolean_Literals (Is_Abstract_Type (Typ));\n-\n+            Type_Is_Abstract := Boolean_Literals (Is_Abstract_Type (Typ));\n             Append_To (TSD_Aggr_List,\n-               New_Occurrence_Of (Type_Is_Abstract, Loc));\n+              New_Occurrence_Of (Type_Is_Abstract, Loc));\n          end;\n       end if;\n \n@@ -5224,7 +5141,6 @@ package body Exp_Disp is\n \n       declare\n          Needs_Fin : Entity_Id;\n-\n       begin\n          Needs_Fin := Boolean_Literals (Needs_Finalization (Typ));\n          Append_To (TSD_Aggr_List, New_Occurrence_Of (Needs_Fin, Loc));\n@@ -5267,7 +5183,7 @@ package body Exp_Disp is\n                         Size_Comp :=\n                           Unchecked_Convert_To (RTE (RE_Size_Ptr),\n                             Make_Attribute_Reference (Loc,\n-                              Prefix => New_Occurrence_Of (Prim, Loc),\n+                              Prefix         => New_Occurrence_Of (Prim, Loc),\n                               Attribute_Name => Name_Unrestricted_Access));\n                      end if;\n \n@@ -5395,24 +5311,23 @@ package body Exp_Disp is\n                      Make_Subtype_Indication (Loc,\n                        Subtype_Mark =>\n                          New_Occurrence_Of (RTE (RE_Interface_Data), Loc),\n-                       Constraint => Make_Index_Or_Discriminant_Constraint\n-                         (Loc,\n-                          Constraints => New_List (\n-                            Make_Integer_Literal (Loc, Num_Ifaces)))),\n+                       Constraint   =>\n+                         Make_Index_Or_Discriminant_Constraint (Loc,\n+                           Constraints => New_List (\n+                             Make_Integer_Literal (Loc, Num_Ifaces)))),\n \n-                   Expression => Make_Aggregate (Loc,\n+                   Expression           => Make_Aggregate (Loc,\n                      Expressions => New_List (\n                        Make_Integer_Literal (Loc, Num_Ifaces),\n-                       Make_Aggregate (Loc,\n-                         Expressions => TSD_Ifaces_List)))));\n+                       Make_Aggregate (Loc, TSD_Ifaces_List)))));\n \n                Append_To (Result,\n                  Make_Attribute_Definition_Clause (Loc,\n                    Name       => New_Occurrence_Of (ITable, Loc),\n                    Chars      => Name_Alignment,\n                    Expression =>\n                      Make_Attribute_Reference (Loc,\n-                       Prefix =>\n+                       Prefix         =>\n                          New_Occurrence_Of (RTE (RE_Integer_Address), Loc),\n                        Attribute_Name => Name_Alignment)));\n \n@@ -5460,7 +5375,7 @@ package body Exp_Disp is\n                 Chars      => Name_Alignment,\n                 Expression =>\n                   Make_Attribute_Reference (Loc,\n-                    Prefix =>\n+                    Prefix         =>\n                       New_Occurrence_Of (RTE (RE_Integer_Address), Loc),\n                     Attribute_Name => Name_Alignment)));\n \n@@ -5469,7 +5384,7 @@ package body Exp_Disp is\n \n             Append_To (TSD_Aggr_List,\n               Make_Attribute_Reference (Loc,\n-                Prefix => New_Occurrence_Of (SSD, Loc),\n+                Prefix         => New_Occurrence_Of (SSD, Loc),\n                 Attribute_Name => Name_Unchecked_Access));\n          else\n             Append_To (TSD_Aggr_List, Make_Null (Loc));\n@@ -5572,7 +5487,8 @@ package body Exp_Disp is\n           Chars      => Name_Alignment,\n           Expression =>\n             Make_Attribute_Reference (Loc,\n-              Prefix => New_Occurrence_Of (RTE (RE_Integer_Address), Loc),\n+              Prefix         =>\n+                New_Occurrence_Of (RTE (RE_Integer_Address), Loc),\n               Attribute_Name => Name_Alignment)));\n \n       --  Initialize or declare the dispatch table object\n@@ -5585,7 +5501,7 @@ package body Exp_Disp is\n \n          New_Node :=\n            Make_Attribute_Reference (Loc,\n-             Prefix => New_Occurrence_Of (TSD, Loc),\n+             Prefix         => New_Occurrence_Of (TSD, Loc),\n              Attribute_Name => Name_Address);\n \n          Append_To (DT_Constr_List, New_Node);\n@@ -5601,9 +5517,8 @@ package body Exp_Disp is\n          if not Building_Static_DT (Typ) then\n             Append_To (Result,\n               Make_Assignment_Statement (Loc,\n-                Name => New_Occurrence_Of (DT, Loc),\n-                Expression => Make_Aggregate (Loc,\n-                  Expressions => DT_Aggr_List)));\n+                Name       => New_Occurrence_Of (DT, Loc),\n+                Expression => Make_Aggregate (Loc, DT_Aggr_List)));\n \n          --  In case of library level tagged types we declare and export now\n          --  the constant object containing the dummy dispatch table. There\n@@ -5623,16 +5538,15 @@ package body Exp_Disp is\n                 Constant_Present    => True,\n                 Object_Definition   =>\n                   New_Occurrence_Of (RTE (RE_No_Dispatch_Table_Wrapper), Loc),\n-                Expression => Make_Aggregate (Loc,\n-                  Expressions => DT_Aggr_List)));\n+                Expression          => Make_Aggregate (Loc, DT_Aggr_List)));\n \n             Append_To (Result,\n               Make_Attribute_Definition_Clause (Loc,\n                 Name       => New_Occurrence_Of (DT, Loc),\n                 Chars      => Name_Alignment,\n                 Expression =>\n                   Make_Attribute_Reference (Loc,\n-                    Prefix =>\n+                    Prefix         =>\n                       New_Occurrence_Of (RTE (RE_Integer_Address), Loc),\n                     Attribute_Name => Name_Alignment)));\n \n@@ -5725,7 +5639,8 @@ package body Exp_Disp is\n                      New_Node :=\n                        Unchecked_Convert_To (RTE (RE_Prim_Ptr),\n                          Make_Attribute_Reference (Loc,\n-                           Prefix => New_Occurrence_Of (Prim_Table (J), Loc),\n+                           Prefix         =>\n+                             New_Occurrence_Of (Prim_Table (J), Loc),\n                            Attribute_Name => Name_Unrestricted_Access));\n                   else\n                      New_Node := Make_Null (Loc);\n@@ -5751,8 +5666,8 @@ package body Exp_Disp is\n                    Defining_Identifier => Predef_Prims,\n                    Aliased_Present     => True,\n                    Constant_Present    => Building_Static_DT (Typ),\n-                   Object_Definition   => New_Occurrence_Of\n-                                           (Defining_Identifier (Decl), Loc),\n+                   Object_Definition   =>\n+                     New_Occurrence_Of (Defining_Identifier (Decl), Loc),\n                    Expression => New_Node));\n \n                --  Remember aggregates initializing dispatch tables\n@@ -5765,7 +5680,7 @@ package body Exp_Disp is\n                    Chars      => Name_Alignment,\n                    Expression =>\n                      Make_Attribute_Reference (Loc,\n-                       Prefix =>\n+                       Prefix         =>\n                          New_Occurrence_Of (RTE (RE_Integer_Address), Loc),\n                        Attribute_Name => Name_Alignment)));\n             end;\n@@ -5805,7 +5720,7 @@ package body Exp_Disp is\n \n          Append_To (DT_Aggr_List,\n            Make_Attribute_Reference (Loc,\n-             Prefix => New_Occurrence_Of (Predef_Prims, Loc),\n+             Prefix         => New_Occurrence_Of (Predef_Prims, Loc),\n              Attribute_Name => Name_Address));\n \n          --  Offset_To_Top\n@@ -5816,7 +5731,7 @@ package body Exp_Disp is\n \n          Append_To (DT_Aggr_List,\n            Make_Attribute_Reference (Loc,\n-             Prefix => New_Occurrence_Of (TSD, Loc),\n+             Prefix         => New_Occurrence_Of (TSD, Loc),\n              Attribute_Name => Name_Address));\n \n          --  Stage 2: Initialize the table of user-defined primitive operations\n@@ -5883,7 +5798,8 @@ package body Exp_Disp is\n                      New_Node :=\n                        Unchecked_Convert_To (RTE (RE_Prim_Ptr),\n                          Make_Attribute_Reference (Loc,\n-                           Prefix => New_Occurrence_Of (Prim_Table (J), Loc),\n+                           Prefix         =>\n+                             New_Occurrence_Of (Prim_Table (J), Loc),\n                            Attribute_Name => Name_Unrestricted_Access));\n                   else\n                      New_Node := Make_Null (Loc);\n@@ -5911,9 +5827,8 @@ package body Exp_Disp is\n          if not Building_Static_DT (Typ) then\n             Append_To (Result,\n               Make_Assignment_Statement (Loc,\n-                Name => New_Occurrence_Of (DT, Loc),\n-                Expression => Make_Aggregate (Loc,\n-                  Expressions => DT_Aggr_List)));\n+                Name       => New_Occurrence_Of (DT, Loc),\n+                Expression => Make_Aggregate (Loc, DT_Aggr_List)));\n \n          --  In case of library level tagged types we declare now and export\n          --  the constant object containing the dispatch table.\n@@ -5930,16 +5845,15 @@ package body Exp_Disp is\n                                       (RTE (RE_Dispatch_Table_Wrapper), Loc),\n                     Constraint   => Make_Index_Or_Discriminant_Constraint (Loc,\n                                       Constraints => DT_Constr_List)),\n-                Expression => Make_Aggregate (Loc,\n-                  Expressions => DT_Aggr_List)));\n+                Expression          => Make_Aggregate (Loc, DT_Aggr_List)));\n \n             Append_To (Result,\n               Make_Attribute_Definition_Clause (Loc,\n                 Name       => New_Occurrence_Of (DT, Loc),\n                 Chars      => Name_Alignment,\n                 Expression =>\n                   Make_Attribute_Reference (Loc,\n-                    Prefix =>\n+                    Prefix         =>\n                       New_Occurrence_Of (RTE (RE_Integer_Address), Loc),\n                     Attribute_Name => Name_Alignment)));\n \n@@ -5956,12 +5870,11 @@ package body Exp_Disp is\n       then\n          Append_To (Result,\n            Make_Assignment_Statement (Loc,\n-             Name =>\n+             Name       =>\n                Make_Indexed_Component (Loc,\n-                 Prefix =>\n+                 Prefix      =>\n                    Make_Selected_Component (Loc,\n-                     Prefix =>\n-                       New_Occurrence_Of (TSD, Loc),\n+                     Prefix        => New_Occurrence_Of (TSD, Loc),\n                      Selector_Name =>\n                        New_Occurrence_Of\n                          (RTE_Record_Component (RE_Tags_Table), Loc)),\n@@ -6011,15 +5924,15 @@ package body Exp_Disp is\n                       Old_Tag_Node =>\n                         New_Occurrence_Of\n                           (Node\n-                           (Next_Elmt\n-                            (First_Elmt\n-                             (Access_Disp_Table (Parent_Typ)))), Loc),\n+                            (Next_Elmt\n+                              (First_Elmt\n+                                (Access_Disp_Table (Parent_Typ)))), Loc),\n                       New_Tag_Node =>\n                         New_Occurrence_Of\n                           (Node\n-                           (Next_Elmt\n-                            (First_Elmt\n-                             (Access_Disp_Table (Typ)))), Loc)));\n+                            (Next_Elmt\n+                              (First_Elmt\n+                                (Access_Disp_Table (Typ)))), Loc)));\n \n                   if Nb_Prims /= 0 then\n                      Append_To (Elab_Code,\n@@ -6028,8 +5941,8 @@ package body Exp_Disp is\n                          Old_Tag_Node =>\n                            New_Occurrence_Of\n                              (Node\n-                              (First_Elmt\n-                               (Access_Disp_Table (Parent_Typ))), Loc),\n+                               (First_Elmt\n+                                 (Access_Disp_Table (Parent_Typ))), Loc),\n                          New_Tag_Node => New_Occurrence_Of (DT_Ptr, Loc),\n                          Num_Prims    => Nb_Prims));\n                   end if;\n@@ -6042,14 +5955,15 @@ package body Exp_Disp is\n                declare\n                   Sec_DT_Ancestor : Elmt_Id :=\n                                       Next_Elmt\n-                                       (Next_Elmt\n-                                        (First_Elmt\n-                                          (Access_Disp_Table (Parent_Typ))));\n+                                        (Next_Elmt\n+                                           (First_Elmt\n+                                              (Access_Disp_Table\n+                                                 (Parent_Typ))));\n                   Sec_DT_Typ      : Elmt_Id :=\n                                       Next_Elmt\n-                                       (Next_Elmt\n-                                         (First_Elmt\n-                                           (Access_Disp_Table (Typ))));\n+                                        (Next_Elmt\n+                                           (First_Elmt\n+                                              (Access_Disp_Table (Typ))));\n \n                   procedure Copy_Secondary_DTs (Typ : Entity_Id);\n                   --  Local procedure required to climb through the ancestors\n@@ -6256,7 +6170,8 @@ package body Exp_Disp is\n       then\n          Append_To (Elab_Code,\n            Make_Procedure_Call_Statement (Loc,\n-             Name => New_Occurrence_Of (RTE (RE_Register_Tag), Loc),\n+             Name                   =>\n+               New_Occurrence_Of (RTE (RE_Register_Tag), Loc),\n              Parameter_Associations =>\n                New_List (New_Occurrence_Of (DT_Ptr, Loc))));\n       end if;\n@@ -6439,7 +6354,7 @@ package body Exp_Disp is\n \n                         Append_To (OSD_Aggr_List,\n                           Make_Component_Association (Loc,\n-                            Choices => New_List (\n+                            Choices    => New_List (\n                               Make_Integer_Literal (Loc,\n                                 DT_Position (Prim_Alias))),\n                             Expression =>\n@@ -6452,6 +6367,7 @@ package body Exp_Disp is\n \n                   Next_Elmt (Prim_Elmt);\n                end loop;\n+\n                pragma Assert (Count = Nb_Prim);\n             end;\n \n@@ -6466,7 +6382,7 @@ package body Exp_Disp is\n                   Make_Subtype_Indication (Loc,\n                     Subtype_Mark =>\n                       New_Occurrence_Of (RTE (RE_Object_Specific_Data), Loc),\n-                    Constraint =>\n+                    Constraint   =>\n                       Make_Index_Or_Discriminant_Constraint (Loc,\n                         Constraints => New_List (\n                           Make_Integer_Literal (Loc, Nb_Prim)))),\n@@ -6475,14 +6391,14 @@ package body Exp_Disp is\n                   Make_Aggregate (Loc,\n                     Component_Associations => New_List (\n                       Make_Component_Association (Loc,\n-                        Choices => New_List (\n+                        Choices    => New_List (\n                           New_Occurrence_Of\n                             (RTE_Record_Component (RE_OSD_Num_Prims), Loc)),\n                         Expression =>\n                           Make_Integer_Literal (Loc, Nb_Prim)),\n \n                       Make_Component_Association (Loc,\n-                        Choices => New_List (\n+                        Choices    => New_List (\n                           New_Occurrence_Of\n                             (RTE_Record_Component (RE_OSD_Table), Loc)),\n                         Expression => Make_Aggregate (Loc,\n@@ -7171,8 +7087,7 @@ package body Exp_Disp is\n       Set_Ekind        (DT_Ptr, E_Variable);\n       Set_Related_Type (DT_Ptr, Typ);\n \n-      --  Notify the back end that the types are associated with a dispatch\n-      --  table\n+      --  Notify back end that the types are associated with a dispatch table\n \n       Set_Is_Dispatch_Table_Entity (RTE (RE_Prim_Ptr));\n       Set_Is_Dispatch_Table_Entity (RTE (RE_Predef_Prims_Table_Ptr));\n@@ -7307,9 +7222,8 @@ package body Exp_Disp is\n \n          Suffix_Index := 1;\n \n-         --  Note: The value of Suffix_Index must be in sync with the\n-         --  Suffix_Index values of secondary dispatch tables generated\n-         --  by Make_DT.\n+         --  Note: The value of Suffix_Index must be in sync with the values of\n+         --  Suffix_Index in secondary dispatch tables generated by Make_DT.\n \n          if Is_CPP_Class (Typ) then\n             AI_Tag_Comp := First_Elmt (Typ_Comps);\n@@ -7318,8 +7232,7 @@ package body Exp_Disp is\n                  (Typ, Related_Type (Node (AI_Tag_Comp)), Suffix_Index);\n                Typ_Name := Name_Find;\n \n-               --  Declare variables that will store the copy of the C++\n-               --  secondary tags.\n+               --  Declare variables to store copy of the C++ secondary tags\n \n                Iface_DT_Ptr :=\n                  Make_Defining_Identifier (Loc,\n@@ -7528,6 +7441,7 @@ package body Exp_Disp is\n             --  Add the freezing nodes of these declarations; required to avoid\n             --  generating these freezing nodes in wrong scopes (for example in\n             --  the IC routine of a derivation of Typ).\n+\n             --  What is an \"IC routine\"? Is \"init_proc\" meant here???\n \n             Append_List_To (Result, Freeze_Entity (DT_Prims, Typ));\n@@ -7573,9 +7487,7 @@ package body Exp_Disp is\n       Res : constant Node_Id := Duplicate_Subexpr (From);\n    begin\n       if Is_Access_Type (Etype (From)) then\n-         return\n-           Make_Explicit_Dereference (Sloc (From),\n-             Prefix => Res);\n+         return Make_Explicit_Dereference (Sloc (From), Prefix => Res);\n       else\n          return Res;\n       end if;\n@@ -7786,6 +7698,7 @@ package body Exp_Disp is\n          end if;\n \n       --  Ada 2005 (AI-251): Primitive associated with an interface type\n+\n       --  Generate the code of the thunk only if the interface type is not an\n       --  immediate ancestor of Typ; otherwise the dispatch table associated\n       --  with the interface is the primary dispatch table and we have nothing\n@@ -7914,9 +7827,8 @@ package body Exp_Disp is\n       --  predefined primitives\n \n       procedure Validate_Position (Prim : Entity_Id);\n-      --  Check that the position assigned to Prim is completely safe\n-      --  (it has not been assigned to a previously defined primitive\n-      --   operation of Typ)\n+      --  Check that position assigned to Prim is completely safe (it has not\n+      --  been assigned to a previously defined primitive operation of Typ).\n \n       ------------------------\n       -- In_Predef_Prims_DT --\n@@ -8011,7 +7923,6 @@ package body Exp_Disp is\n                and then not Is_Predefined_Dispatching_Alias (Op)\n                and then not Is_Predefined_Dispatching_Alias (Prim)\n             then\n-\n                --  Handle aliased subprograms\n \n                declare\n@@ -8074,9 +7985,8 @@ package body Exp_Disp is\n       --  Set the DT_Position for each primitive operation. Perform some sanity\n       --  checks to avoid building inconsistent dispatch tables.\n \n-      --  First stage: Set the DTC entity of all the primitive operations. This\n-      --  is required to properly read the DT_Position attribute in the latter\n-      --  stages.\n+      --  First stage: Set DTC entity of all the primitive operations. This is\n+      --  required to properly read the DT_Position attribute in latter stages.\n \n       Prim_Elmt  := First_Prim;\n       Count_Prim := 0;\n@@ -8261,9 +8171,9 @@ package body Exp_Disp is\n             Next_Elmt (Prim_Elmt);\n          end loop;\n \n-         --  Third stage: Fix the position of all the new primitives.\n-         --  Entries associated with primitives covering interfaces\n-         --  are handled in a latter round.\n+         --  Third stage: Fix the position of all the new primitives. Entries\n+         --  associated with primitives covering interfaces are handled in a\n+         --  latter round.\n \n          Prim_Elmt := First_Prim;\n          while Present (Prim_Elmt) loop\n@@ -8297,8 +8207,8 @@ package body Exp_Disp is\n       end;\n \n       --  Fourth stage: Complete the decoration of primitives covering\n-      --  interfaces (that is, propagate the DT_Position attribute\n-      --  from the aliased primitive)\n+      --  interfaces (that is, propagate the DT_Position attribute from\n+      --  the aliased primitive)\n \n       Prim_Elmt := First_Prim;\n       while Present (Prim_Elmt) loop\n@@ -8332,10 +8242,10 @@ package body Exp_Disp is\n          Next_Elmt (Prim_Elmt);\n       end loop;\n \n-      --  Generate listing showing the contents of the dispatch tables.\n-      --  This action is done before some further static checks because\n-      --  in case of critical errors caused by a wrong dispatch table\n-      --  we need to see the contents of such table.\n+      --  Generate listing showing the contents of the dispatch tables. This\n+      --  action is done before some further static checks because in case of\n+      --  critical errors caused by a wrong dispatch table we need to see the\n+      --  contents of such table.\n \n       if Debug_Flag_ZZ then\n          Write_DT (Typ);\n@@ -8349,8 +8259,8 @@ package body Exp_Disp is\n       while Present (Prim_Elmt) loop\n          Prim := Node (Prim_Elmt);\n \n-         --  At this point all the primitives MUST have a position\n-         --  in the dispatch table.\n+         --  At this point all the primitives MUST have a position in the\n+         --  dispatch table.\n \n          if DT_Position (Prim) = No_Uint then\n             raise Program_Error;\n@@ -8364,8 +8274,8 @@ package body Exp_Disp is\n             DT_Length := UI_To_Int (DT_Position (Prim));\n          end if;\n \n-         --  Ensure that the assigned position to non-predefined\n-         --  dispatching operations in the dispatch table is correct.\n+         --  Ensure that the assigned position to non-predefined dispatching\n+         --  operations in the dispatch table is correct.\n \n          if not Is_Predefined_Dispatching_Operation (Prim)\n            and then not Is_Predefined_Dispatching_Alias (Prim)\n@@ -8391,8 +8301,8 @@ package body Exp_Disp is\n          --  excluded from this check because interfaces must be visible in\n          --  the public and private part (RM 7.3 (7.3/2))\n \n-         --  We disable this check in Relaxed_RM_Semantics mode, to\n-         --  accommodate legacy Ada code.\n+         --  We disable this check in Relaxed_RM_Semantics mode, to accommodate\n+         --  legacy Ada code.\n \n          if not Relaxed_RM_Semantics\n            and then Is_Abstract_Type (Typ)\n@@ -8409,9 +8319,8 @@ package body Exp_Disp is\n            and then Original_View_In_Visible_Part (Typ)\n          then\n             --  We exclude Input and Output stream operations because\n-            --  Limited_Controlled inherits useless Input and Output\n-            --  stream operations from Root_Controlled, which can\n-            --  never be overridden.\n+            --  Limited_Controlled inherits useless Input and Output stream\n+            --  operations from Root_Controlled, which can never be overridden.\n \n             if not Is_TSS (Prim, TSS_Stream_Input)\n                  and then\n@@ -8464,6 +8373,10 @@ package body Exp_Disp is\n       --  Duplicate the parameters profile of the imported C++ constructor\n       --  adding an access to the object as an additional parameter.\n \n+      ----------------------------\n+      -- Gen_Parameters_Profile --\n+      ----------------------------\n+\n       function Gen_Parameters_Profile (E : Entity_Id) return List_Id is\n          Loc   : constant Source_Ptr := Sloc (E);\n          Parms : List_Id;\n@@ -8682,10 +8595,10 @@ package body Exp_Disp is\n                end;\n             end if;\n \n-            --  If this constructor has parameters and all its parameters\n-            --  have defaults then it covers the default constructor. The\n-            --  semantic analyzer ensures that only one constructor with\n-            --  defaults covers the default constructor.\n+            --  If this constructor has parameters and all its parameters have\n+            --  defaults then it covers the default constructor. The semantic\n+            --  analyzer ensures that only one constructor with defaults covers\n+            --  the default constructor.\n \n             if Present (Parameter_Specifications (Parent (E)))\n               and then Needs_No_Actuals (E)\n@@ -8935,7 +8848,7 @@ package body Exp_Disp is\n          end if;\n \n          --  Display the final position of this primitive in its associated\n-         --  (primary or secondary) dispatch table\n+         --  (primary or secondary) dispatch table.\n \n          if Present (DTC_Entity (Prim))\n            and then DT_Position (Prim) /= No_Uint"}, {"sha": "78778a07a726f1e4cd9ab19efab5ac1b3e6d1be0", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=6782b1ef34e4b6afca51b219792f3e0f26aeff18", "patch": "@@ -1162,18 +1162,15 @@ package body Exp_Dist is\n \n       return\n         Make_Procedure_Call_Statement (Loc,\n-          Name =>\n-            New_Occurrence_Of\n-              (RTE (RE_NVList_Add_Item), Loc),\n+          Name                   =>\n+            New_Occurrence_Of (RTE (RE_NVList_Add_Item), Loc),\n           Parameter_Associations => New_List (\n             New_Occurrence_Of (NVList, Loc),\n             Make_Function_Call (Loc,\n-              Name =>\n-                New_Occurrence_Of\n-                  (RTE (RE_To_PolyORB_String), Loc),\n+              Name                   =>\n+                New_Occurrence_Of (RTE (RE_To_PolyORB_String), Loc),\n               Parameter_Associations => New_List (\n-                Make_String_Literal (Loc,\n-                  Strval => Parameter_Name_String))),\n+                Make_String_Literal (Loc, Strval => Parameter_Name_String))),\n             New_Occurrence_Of (Any, Loc),\n             Parameter_Mode));\n    end Add_Parameter_To_NVList;"}, {"sha": "26e2e0d3a4ee84101a947d4cb586819c9fe7de14", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=6782b1ef34e4b6afca51b219792f3e0f26aeff18", "patch": "@@ -1131,36 +1131,33 @@ package body Freeze is\n                      Attribute_Scalar_Storage_Order);\n       Comp_ADC_Present := Present (Comp_ADC);\n \n-      --  Case of enclosing type not having explicit SSO: component cannot\n-      --  have it either.\n+      --  Case of record or array component: check storage order compatibility\n \n-      if No (ADC) then\n-         if Comp_ADC_Present then\n-            Error_Msg_N\n-              (\"composite type must have explicit scalar storage order\",\n-               Err_Node);\n-         end if;\n-\n-      --  Case of enclosing type having explicit SSO: check compatible\n-      --  attribute on Comp_Type if composite.\n-\n-      elsif Is_Record_Type (Comp_Type) or else Is_Array_Type (Comp_Type) then\n+      if Is_Record_Type (Comp_Type) or else Is_Array_Type (Comp_Type) then\n          Comp_SSO_Differs :=\n            Reverse_Storage_Order (Encl_Type)\n              /=\n            Reverse_Storage_Order (Comp_Type);\n \n+         --  Parent and extension must have same storage order\n+\n          if Present (Comp) and then Chars (Comp) = Name_uParent then\n             if Comp_SSO_Differs then\n                Error_Msg_N\n                  (\"record extension must have same scalar storage order as \"\n                   & \"parent\", Err_Node);\n             end if;\n \n-         elsif No (Comp_ADC) then\n+         --  If enclosing composite has explicit SSO then nested composite must\n+         --  have explicit SSO as well.\n+\n+         elsif Present (ADC) and then No (Comp_ADC) then\n             Error_Msg_N (\"nested composite must have explicit scalar \"\n                          & \"storage order\", Err_Node);\n \n+         --  If component and composite SSO differs, check that component\n+         --  falls on byte boundaries and isn't packed.\n+\n          elsif Comp_SSO_Differs then\n \n             --  Component SSO differs from enclosing composite:\n@@ -1182,10 +1179,10 @@ package body Freeze is\n             end if;\n          end if;\n \n-      --  Enclosing type has explicit SSO, non-composite component must not\n+      --  Enclosing type has explicit SSO: non-composite component must not\n       --  be aliased.\n \n-      elsif Component_Aliased then\n+      elsif Present (ADC) and then Component_Aliased then\n          Error_Msg_N\n            (\"aliased component not permitted for type with \"\n             & \"explicit Scalar_Storage_Order\", Err_Node);"}, {"sha": "67875a663557bc5fea840bb4093012c6b5b49d97", "filename": "gcc/ada/g-pehage.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fg-pehage.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fg-pehage.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-pehage.ads?ref=6782b1ef34e4b6afca51b219792f3e0f26aeff18", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2010, AdaCore                     --\n+--                     Copyright (C) 2002-2014, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -121,8 +121,8 @@ package GNAT.Perfect_Hash_Generators is\n    --  Raised after Tries unsuccessful runs\n \n    procedure Compute (Position : String := Default_Position);\n-   --  Compute the hash function. Position allows to define selection of\n-   --  character positions used in the word hash function. Positions can be\n+   --  Compute the hash function. Position allows the definition of selection\n+   --  of character positions used in the word hash function. Positions can be\n    --  separated by commas and ranges like x-y may be used. Character '$'\n    --  represents the final character of a word. With an empty position, the\n    --  generator automatically produces positions to reduce the memory usage."}, {"sha": "7df5af0eeee2bd4843b8fa23bd01fdc11bf19dd1", "filename": "gcc/ada/g-socket.ads", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fg-socket.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fg-socket.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.ads?ref=6782b1ef34e4b6afca51b219792f3e0f26aeff18", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2013, AdaCore                     --\n+--                     Copyright (C) 2001-2014, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -759,8 +759,8 @@ package GNAT.Sockets is\n       end case;\n    end record;\n \n-   --  A request flag allows to specify the type of message transmissions or\n-   --  receptions. A request flag can be combination of zero or more\n+   --  A request flag allows specification of the type of message transmissions\n+   --  or receptions. A request flag can be combination of zero or more\n    --  predefined request flags.\n \n    type Request_Flag_Type is private;\n@@ -904,7 +904,7 @@ package GNAT.Sockets is\n    --  Item'First - 1 when the socket has been closed by peer. This is not\n    --  an error, and no exception is raised in this case unless Item'First\n    --  is Stream_Element_Offset'First, in which case Constraint_Error is\n-   --  raised. Flags allows to control the reception. Raise Socket_Error on\n+   --  raised. Flags allows control of the reception. Raise Socket_Error on\n    --  error.\n \n    procedure Receive_Socket\n@@ -916,7 +916,7 @@ package GNAT.Sockets is\n    --  Receive message from Socket. If Socket is not connection-oriented, the\n    --  source address From of the message is filled in. Last is the index\n    --  value such that Item (Last) is the last character assigned. Flags\n-   --  allows to control the reception. Raises Socket_Error on error.\n+   --  allows control of the reception. Raises Socket_Error on error.\n \n    procedure Receive_Vector\n      (Socket : Socket_Type;\n@@ -958,7 +958,7 @@ package GNAT.Sockets is\n       Last   : out Ada.Streams.Stream_Element_Offset;\n       Flags  : Request_Flag_Type := No_Request_Flag);\n    --  Transmit a message over a socket. Upon return, Last is set to the index\n-   --  within Item of the last element transmitted. Flags allows to control\n+   --  within Item of the last element transmitted. Flags allows control of\n    --  the transmission. Raises Socket_Error on any detected error condition.\n \n    procedure Send_Socket\n@@ -968,7 +968,7 @@ package GNAT.Sockets is\n       To     : Sock_Addr_Type;\n       Flags  : Request_Flag_Type := No_Request_Flag);\n    --  Transmit a message over a datagram socket. The destination address is\n-   --  To. Flags allows to control the transmission. Raises Socket_Error on\n+   --  To. Flags allows control of the transmission. Raises Socket_Error on\n    --  error.\n \n    procedure Send_Vector\n@@ -1027,8 +1027,8 @@ package GNAT.Sockets is\n    --  subprogram when the stream is not needed anymore.\n \n    type Socket_Set_Type is limited private;\n-   --  This type allows to manipulate sets of sockets. It allows to wait for\n-   --  events on multiple endpoints at one time. This type has default\n+   --  This type allows manipulation of sets of sockets. It allows waiting\n+   --  for events on multiple endpoints at one time. This type has default\n    --  initialization, and the default value is the empty set.\n    --\n    --  Note: This type used to contain a pointer to dynamically allocated\n@@ -1072,8 +1072,8 @@ package GNAT.Sockets is\n    --  Check_Selector provides the very same behaviour. The only difference is\n    --  that it does not watch for exception events. Note that on some platforms\n    --  it is kept process blocking on purpose. The timeout parameter allows the\n-   --  user to have the behaviour he wants. Abort_Selector allows to safely\n-   --  abort a blocked Check_Selector call. A special socket is opened by\n+   --  user to have the behaviour he wants. Abort_Selector allows the safe\n+   --  abort of a blocked Check_Selector call. A special socket is opened by\n    --  Create_Selector and included in each call to Check_Selector.\n    --\n    --  Abort_Selector causes an event to occur on this descriptor in order to"}, {"sha": "854e26e0f93e5203411820678057c7bf20f68c77", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=6782b1ef34e4b6afca51b219792f3e0f26aeff18", "patch": "@@ -9303,9 +9303,8 @@ that make up scalar components are ordered within S:\n    --  the former is used.\n @end smallexample\n \n-Other properties are\n-as for standard representation attribute @code{Bit_Order}, as defined by\n-Ada RM 13.5.3(4). The default is @code{System.Default_Bit_Order}.\n+Other properties are as for standard representation attribute @code{Bit_Order},\n+as defined by Ada RM 13.5.3(4). The default is @code{System.Default_Bit_Order}.\n \n For a record type @var{S}, if @code{@var{S}'Scalar_Storage_Order} is\n specified explicitly, it shall be equal to @code{@var{S}'Bit_Order}. Note:\n@@ -9316,18 +9315,15 @@ specified explicitly and set to the same value.\n For a record extension, the derived type shall have the same scalar storage\n order as the parent type.\n \n-If a component of @var{S} has itself a record or array type, then it shall also\n-have a @code{Scalar_Storage_Order} attribute definition clause. In addition,\n-if the component is a packed array, or does not start on a byte boundary, then\n-the scalar storage order specified for S and for the nested component type shall\n-be identical.\n+If a component of @var{S} is of a record or array type, then that type shall\n+also have a @code{Scalar_Storage_Order} attribute definition clause.\n \n-If @var{S} appears as the type of a record or array component, the enclosing\n-record or array shall also have a @code{Scalar_Storage_Order} attribute\n-definition clause.\n+A component of a record or array type that is a packed array, or that\n+does not start on a byte boundary, must have the same scalar storage order\n+as the enclosing record or array type.\n \n-No component of a type that has a @code{Scalar_Storage_Order} attribute\n-definition may be aliased.\n+No component of a type that has an explicit @code{Scalar_Storage_Order}\n+attribute definition may be aliased.\n \n A confirming @code{Scalar_Storage_Order} attribute definition clause (i.e.\n with a value equal to @code{System.Default_Bit_Order}) has no effect."}, {"sha": "2132a8bd32dd9c66b6a56ec4e18bf4ea1dc0c1e2", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=6782b1ef34e4b6afca51b219792f3e0f26aeff18", "patch": "@@ -1,3 +1,4 @@\n+\n \\input texinfo   @c -*-texinfo-*-\n @c %**start of header\n \n@@ -18765,11 +18766,11 @@ leak.\n \n @noindent\n @code{gnatmem} makes use of the output created by the special version of\n-allocation and deallocation routines that record call information. This\n-allows to obtain accurate dynamic memory usage history at a minimal cost to\n-the execution speed. Note however, that @code{gnatmem} is not supported on\n-all platforms (currently, it is supported on AIX, HP-UX, GNU/Linux,\n-Solaris and Windows NT/2000/XP (x86).\n+allocation and deallocation routines that record call information. This allows\n+it to obtain accurate dynamic memory usage history at a minimal cost to the\n+execution speed. Note however, that @code{gnatmem} is not supported on all\n+platforms (currently, it is supported on AIX, HP-UX, GNU/Linux, Solaris and\n+Windows NT/2000/XP (x86).\n \n @noindent\n The @code{gnatmem} command has the form\n@@ -18894,8 +18895,8 @@ Do the @code{gnatmem} processing starting from @file{file}, rather than\n @item -m n\n @cindex @option{-m} (@code{gnatmem})\n This switch causes @code{gnatmem} to mask the allocation roots that have less\n-than n leaks. The default value is 1. Specifying the value of 0 will allow to\n-examine even the roots that didn't result in leaks.\n+than n leaks.  The default value is 1. Specifying the value of 0 will allow\n+examination of even the roots that did not result in leaks.\n \n @item -s order\n @cindex @option{-s} (@code{gnatmem})\n@@ -21636,9 +21637,9 @@ breakpoint condition (before the @code{if}).\n @item task @var{taskno}\n @cindex Task switching\n \n-This command allows to switch to the task referred by @var{taskno}. In\n-particular, This allows to browse the backtrace of the specified\n-task. It is advised to switch back to the original task before\n+This command allows switching to the task referred by @var{taskno}. In\n+particular, this allows browsing of the backtrace of the specified\n+task. It is advisable to switch back to the original task before\n continuing execution otherwise the scheduling of the program may be\n perturbed.\n @end table"}, {"sha": "587638ba14864aaf24253bea3202a09c0a089475", "filename": "gcc/ada/init.c", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=6782b1ef34e4b6afca51b219792f3e0f26aeff18", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2013, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2014, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -1922,7 +1922,7 @@ __gnat_error_handler (int sig, siginfo_t *si, void *sc)\n   #include \"sigtramp.h\"\n \n   __gnat_sigtramp (sig, (void *)si, (void *)sc,\n-\t\t   (sighandler_t *)&__gnat_map_signal);\n+\t\t   (__sigtramphandler_t *)&__gnat_map_signal);\n \n #else\n   __gnat_map_signal (sig, si, sc);\n@@ -2372,12 +2372,23 @@ __gnat_install_handler (void)\n /*******************/\n \n #include <signal.h>\n-#include <stdlib.h>\n+#include \"sigtramp.h\"\n+\n+#define HAVE_GNAT_ADJUST_CONTEXT_FOR_RAISE\n+\n+void\n+__gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED, void *ucontext)\n+{\n+  mcontext_t *mcontext = &((ucontext_t *) ucontext)->uc_mcontext;\n+\n+  /* ARM Bump has to be an even number because of odd/even architecture.  */\n+  ((mcontext_t *) mcontext)->arm_pc += 2;\n+}\n \n static void\n-__gnat_error_handler (int sig,\n-\t\t      siginfo_t *si ATTRIBUTE_UNUSED,\n-\t\t      void *ucontext ATTRIBUTE_UNUSED)\n+__gnat_map_signal (int sig,\n+\t\t   siginfo_t *si ATTRIBUTE_UNUSED,\n+\t\t   void *ucontext ATTRIBUTE_UNUSED)\n {\n   struct Exception_Data *exception;\n   const char *msg;\n@@ -2407,6 +2418,17 @@ __gnat_error_handler (int sig,\n   Raise_From_Signal_Handler (exception, msg);\n }\n \n+static void\n+__gnat_error_handler (int sig,\n+\t\t      siginfo_t *si ATTRIBUTE_UNUSED,\n+\t\t      void *ucontext ATTRIBUTE_UNUSED)\n+{\n+  __gnat_adjust_context_for_raise (sig, ucontext);\n+\n+  __gnat_sigtramp (sig, (void *) si, (void *) ucontext,\n+\t\t   (__sigtramphandler_t *)&__gnat_map_signal);\n+}\n+\n /* This must be in keeping with System.OS_Interface.Alternate_Stack_Size.  */\n char __gnat_alternate_stack[16 * 1024];\n "}, {"sha": "8ccdda628a5d35afd9f6f31178654b9299ceca2c", "filename": "gcc/ada/scng.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fscng.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fscng.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscng.adb?ref=6782b1ef34e4b6afca51b219792f3e0f26aeff18", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -67,7 +67,7 @@ package body Scng is\n    procedure Accumulate_Token_Checksum;\n    pragma Inline (Accumulate_Token_Checksum);\n    --  Called after each numeric literal and identifier/keyword. For keywords,\n-   --  the token used is Tok_Identifier. This allows to detect additional\n+   --  the token used is Tok_Identifier. This allows detection of additional\n    --  spaces added in sources when using the builder switch -m.\n \n    procedure Accumulate_Token_Checksum_GNAT_6_3;"}, {"sha": "48d442bb20cf2fbb115b3efd21003fee3599c6eb", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=6782b1ef34e4b6afca51b219792f3e0f26aeff18", "patch": "@@ -3904,10 +3904,10 @@ package body Sem_Attr is\n          Context           : constant Node_Id := Parent (N);\n          Attr              : Node_Id;\n          Enclosing_Loop    : Node_Id;\n-         In_Loop_Assertion : Boolean   := False;\n          Loop_Id           : Entity_Id := Empty;\n          Scop              : Entity_Id;\n          Stmt              : Node_Id;\n+         Enclosing_Pragma  : Node_Id   := Empty;\n \n       --  Start of processing for Loop_Entry\n \n@@ -4025,7 +4025,7 @@ package body Sem_Attr is\n                                Name_Assert_And_Cut,\n                                Name_Assume)\n             then\n-               In_Loop_Assertion := True;\n+               Enclosing_Pragma := Original_Node (Stmt);\n \n             --  Locate the enclosing loop (if any). Note that Ada 2012 array\n             --  iteration may be expanded into several nested loops, we are\n@@ -4060,12 +4060,11 @@ package body Sem_Attr is\n             --  purpose if they appear in an appropriate location in a loop,\n             --  which was already checked by the top level pragma circuit).\n \n-         if not In_Loop_Assertion then\n-            Error_Attr\n-              (\"attribute % must appear within appropriate pragma\", N);\n+         if No (Enclosing_Pragma) then\n+            Error_Attr (\"attribute% must appear within appropriate pragma\", N);\n          end if;\n \n-         --  A Loop_Entry that applies to a given loop statement shall not\n+         --  A Loop_Entry that applies to a given loop statement must not\n          --  appear within a body of accept statement, if this construct is\n          --  itself enclosed by the given loop statement.\n \n@@ -4074,10 +4073,8 @@ package body Sem_Attr is\n \n             if Ekind (Scop) = E_Loop and then Scop = Loop_Id then\n                exit;\n-\n             elsif Ekind_In (Scop, E_Block, E_Loop, E_Return_Statement) then\n                null;\n-\n             else\n                Error_Attr\n                  (\"attribute % cannot appear in body or accept statement\", N);\n@@ -4101,14 +4098,28 @@ package body Sem_Attr is\n             null;\n \n          elsif Present (Enclosing_Loop)\n-                 and then Entity (Identifier (Enclosing_Loop)) /= Loop_Id\n+           and then Entity (Identifier (Enclosing_Loop)) /= Loop_Id\n          then\n-            Error_Attr_P (\"prefix of attribute % that applies to \"\n-              & \"outer loop must denote an entity\");\n+            Error_Attr_P\n+              (\"prefix of attribute % that applies to \"\n+               & \"outer loop must denote an entity\");\n \n          elsif Is_Potentially_Unevaluated (P) then\n-            Error_Attr_P (\"prefix of attribute % that is potentially \"\n-              & \"unevaluated must denote an entity\");\n+            Error_Attr_P\n+              (\"prefix of attribute % that is potentially \"\n+               & \"unevaluated must denote an entity\");\n+         end if;\n+\n+         --  Finally, if the Loop_Entry attribute appears within a pragma\n+         --  that is ignored, we replace P'Loop_Entity by P to avoid useless\n+         --  generation of the loop entity variable. Note that in this case\n+         --  the expression won't be executed anyway, and this substitution\n+         --  keeps types happy!\n+\n+         --  We should really do this in the expander, but it's easier here\n+\n+         if Is_Ignored (Enclosing_Pragma) then\n+            Rewrite (N, Relocate_Node (P));\n          end if;\n       end Loop_Entry;\n "}, {"sha": "b2544d6f79fc038545ebc32be8b34138d956dc80", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=6782b1ef34e4b6afca51b219792f3e0f26aeff18", "patch": "@@ -14669,6 +14669,7 @@ package body Sem_Util is\n \n       return Name;\n    end Original_Aspect_Name;\n+\n    --------------------------------------\n    -- Original_Corresponding_Operation --\n    --------------------------------------"}, {"sha": "cbe774ff60704afedbdee3767c83ecd16323ba93", "filename": "gcc/ada/sigtramp-armvxw.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fsigtramp-armvxw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fsigtramp-armvxw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsigtramp-armvxw.c?ref=6782b1ef34e4b6afca51b219792f3e0f26aeff18", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                         Asm Implementation File                          *\n  *                                                                          *\n- *           Copyright (C) 2013, Free Software Foundation, Inc.             *\n+ *           Copyright (C) 2014, Free Software Foundation, Inc.             *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -49,7 +49,7 @@\n    sequences.  The general idea is to establish CFA as sigcontext->sc_pregs\n    and state where to find the registers as offsets from there.\n \n-   As of today, we support a single stub, providing CFI info for common\n+   As of today, we support a stub providing CFI info for common\n    registers (GPRs, LR, ...). We might need variants with support for floating\n    point or altivec registers as well at some point.\n \n@@ -75,7 +75,7 @@\n \n extern void __gnat_sigtramp_common\n (int signo, void *siginfo, void *sigcontext,\n- sighandler_t * handler, void * sc_pregs);\n+ __sigtramphandler_t * handler, void * sc_pregs);\n \n \n /* -------------------------------------\n@@ -85,11 +85,11 @@ extern void __gnat_sigtramp_common\n    We enforce optimization to minimize the overhead of the extra layer.  */\n \n void __gnat_sigtramp (int signo, void *si, void *sc,\n-\t\t      sighandler_t * handler)\n+\t\t      __sigtramphandler_t * handler)\n      __attribute__((optimize(2)));\n \n void __gnat_sigtramp (int signo, void *si, void *sc,\n-\t\t      sighandler_t * handler)\n+\t\t      __sigtramphandler_t * handler)\n {\n   struct sigcontext * sctx = (struct sigcontext *) sc;\n "}, {"sha": "ff2f0a8792b3a21365b0e9ccf9a4d1a4527d4288", "filename": "gcc/ada/sigtramp-ppcvxw.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fsigtramp-ppcvxw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6782b1ef34e4b6afca51b219792f3e0f26aeff18/gcc%2Fada%2Fsigtramp-ppcvxw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsigtramp-ppcvxw.c?ref=6782b1ef34e4b6afca51b219792f3e0f26aeff18", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                         Asm Implementation File                          *\n  *                                                                          *\n- *         Copyright (C) 2011-2013, Free Software Foundation, Inc.          *\n+ *         Copyright (C) 2011-2014, Free Software Foundation, Inc.          *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -49,7 +49,7 @@\n    sequences.  The general idea is to establish CFA as sigcontext->sc_pregs\n    and state where to find the registers as offsets from there.\n \n-   As of today, we support a single stub, providing CFI info for common\n+   As of today, we support a stub providing CFI info for common\n    registers (GPRs, LR, ...). We might need variants with support for floating\n    point or altivec registers as well at some point.\n \n@@ -75,7 +75,7 @@\n \n extern void __gnat_sigtramp_common\n (int signo, void *siginfo, void *sigcontext,\n- sighandler_t * handler, void * sc_pregs);\n+ __sigtramphandler_t * handler, void * sc_pregs);\n \n \n /* -------------------------------------\n@@ -85,11 +85,11 @@ extern void __gnat_sigtramp_common\n    We enforce optimization to minimize the overhead of the extra layer.  */\n \n void __gnat_sigtramp (int signo, void *si, void *sc,\n-\t\t      sighandler_t * handler)\n+\t\t      __sigtramphandler_t * handler)\n      __attribute__((optimize(2)));\n \n void __gnat_sigtramp (int signo, void *si, void *sc,\n-\t\t      sighandler_t * handler)\n+\t\t      __sigtramphandler_t * handler)\n {\n   struct sigcontext * sctx = (struct sigcontext *) sc;\n "}]}