{"sha": "862e1e62fcf86a05434abd3b83a7ad89c39c6f44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYyZTFlNjJmY2Y4NmEwNTQzNGFiZDNiODNhN2FkODljMzljNmY0NA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2006-01-04T01:04:51Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-01-04T01:04:51Z"}, "message": "re PR c++/25492 (friend class nested in derived class problem)\n\n\tPR c++/25492\n\t* name-lookup.c (push_class_level_binding): When a derived class\n\tprovides a type binding, eliminate any type binding from a base\n\tclass. \n\tPR c++/25625\n\t* repo.c (repo_emit_p): Always instantiate static data members\n\tinitialized by constant expressions, so that there values are\n\tavailable.\n\tPR c++/25492\n\t* g++.dg/lookup/friend9.C: New test.\n\tPR c++/25625\n\t* g++.dg/template/repo5.C: New test.\n\nFrom-SVN: r109307", "tree": {"sha": "777031142703d177a212c16367bd180fc4f36a18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/777031142703d177a212c16367bd180fc4f36a18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/862e1e62fcf86a05434abd3b83a7ad89c39c6f44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/862e1e62fcf86a05434abd3b83a7ad89c39c6f44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/862e1e62fcf86a05434abd3b83a7ad89c39c6f44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/862e1e62fcf86a05434abd3b83a7ad89c39c6f44/comments", "author": null, "committer": null, "parents": [{"sha": "8f9f2d0f2b81add413c0ab207392d75c5788931e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f9f2d0f2b81add413c0ab207392d75c5788931e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f9f2d0f2b81add413c0ab207392d75c5788931e"}], "stats": {"total": 68, "additions": 67, "deletions": 1}, "files": [{"sha": "9102cbc1bd3725c91dbc4582a135073bc3e6be95", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862e1e62fcf86a05434abd3b83a7ad89c39c6f44/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862e1e62fcf86a05434abd3b83a7ad89c39c6f44/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=862e1e62fcf86a05434abd3b83a7ad89c39c6f44", "patch": "@@ -1,3 +1,15 @@\n+2006-01-03  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/25492\n+\t* name-lookup.c (push_class_level_binding): When a derived class\n+\tprovides a type binding, eliminate any type binding from a base\n+\tclass. \n+\n+\tPR c++/25625\n+\t* repo.c (repo_emit_p): Always instantiate static data members\n+\tinitialized by constant expressions, so that there values are\n+\tavailable.\n+\n 2006-01-02  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/25635"}, {"sha": "ec662e6566af1aefbc6cefd2f3ac76f90e5756aa", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862e1e62fcf86a05434abd3b83a7ad89c39c6f44/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862e1e62fcf86a05434abd3b83a7ad89c39c6f44/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=862e1e62fcf86a05434abd3b83a7ad89c39c6f44", "patch": "@@ -2669,7 +2669,13 @@ push_class_level_binding (tree name, tree x)\n \t      INHERITED_VALUE_BINDING_P (binding) = 0;\n \t    }\n \t  else\n-\t    old_decl = bval;\n+\t    {\n+\t      old_decl = bval;\n+\t      /* Any inherited type declaration is hidden by the type\n+\t\t declaration in the derived class.  */\n+\t      if (TREE_CODE (x) == TYPE_DECL && DECL_ARTIFICIAL (x))\n+\t\tbinding->type = NULL_TREE;\n+\t    }\n \t}\n       else if (TREE_CODE (x) == OVERLOAD && is_overloaded_fn (bval))\n \told_decl = bval;"}, {"sha": "ad01010c363142417925cb28b5a67dbb11a4db00", "filename": "gcc/cp/repo.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862e1e62fcf86a05434abd3b83a7ad89c39c6f44/gcc%2Fcp%2Frepo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862e1e62fcf86a05434abd3b83a7ad89c39c6f44/gcc%2Fcp%2Frepo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frepo.c?ref=862e1e62fcf86a05434abd3b83a7ad89c39c6f44", "patch": "@@ -298,6 +298,12 @@ repo_emit_p (tree decl)\n \t  && (!TYPE_LANG_SPECIFIC (type)\n \t      || !CLASSTYPE_TEMPLATE_INSTANTIATION (type)))\n \treturn 2;\n+      /* Static data members initialized by constant expressions must\n+\t be processed where needed so that their definitions are\n+\t available.  */\n+      if (DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl)\n+\t  && DECL_CLASS_SCOPE_P (decl))\n+\treturn 2;\n     }\n   else if (!DECL_TEMPLATE_INSTANTIATION (decl))\n     return 2;"}, {"sha": "e02c3c7a5104debeed5be6b3804c4adf5fe3e394", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862e1e62fcf86a05434abd3b83a7ad89c39c6f44/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862e1e62fcf86a05434abd3b83a7ad89c39c6f44/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=862e1e62fcf86a05434abd3b83a7ad89c39c6f44", "patch": "@@ -1,3 +1,11 @@\n+2006-01-03  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/25492\n+\t* g++.dg/lookup/friend9.C: New test.\n+\n+\tPR c++/25625\n+\t* g++.dg/template/repo5.C: New test.\n+\n 2006-01-03  Steven G. Kargl  <kargls@comcast.net>\n \n \tPR fortran/25101"}, {"sha": "caf685c3eced4e43ad4e84554065575e68521102", "filename": "gcc/testsuite/g++.dg/lookup/friend9.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862e1e62fcf86a05434abd3b83a7ad89c39c6f44/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ffriend9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862e1e62fcf86a05434abd3b83a7ad89c39c6f44/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ffriend9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Ffriend9.C?ref=862e1e62fcf86a05434abd3b83a7ad89c39c6f44", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/25492\n+\n+class Base {\n+public:\n+  class Nested {};\n+};\n+\n+class Derived:public Base {\n+public:\n+  class Nested {\n+  public:\n+    void m();\n+  };\n+  class AnotherNested {\n+    friend class Nested;\n+    AnotherNested() {}\n+  };\n+};\n+\n+void Derived::Nested::m() {\n+  Derived::AnotherNested instance;\n+\n+}"}, {"sha": "5b76f43f733f78576fc46730dc2eeab20158ac81", "filename": "gcc/testsuite/g++.dg/template/repo5.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862e1e62fcf86a05434abd3b83a7ad89c39c6f44/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frepo5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862e1e62fcf86a05434abd3b83a7ad89c39c6f44/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frepo5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frepo5.C?ref=862e1e62fcf86a05434abd3b83a7ad89c39c6f44", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/25625\n+// { dg-options \"-frepo\" } \n+\n+template< typename T, T N > struct integral_c {\n+  static const T value = N;\n+  typedef integral_c< T, value + 1 > next;\n+};\n+template< typename T, T N > T const integral_c< T, N >::value;\n+integral_c<int,0> a;\n+\n+int main () {}"}]}