{"sha": "950f6c851965c50f4460a9b5230b0425c4c77a06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTUwZjZjODUxOTY1YzUwZjQ0NjBhOWI1MjMwYjA0MjVjNGM3N2EwNg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-09-02T15:22:21Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-09-02T15:22:21Z"}, "message": "Improvements to typed_splay_tree\n\nThis patch adds foreach, max and min methods to\nclass typed_splay_tree, along with the start of a selftest\nsuite.\n\ngcc/ChangeLog:\n\t* Makefile.in (OBJS): Add typed-splay-tree.o.\n\t* selftest-run-tests.c (selftest::run_tests): Call\n\ttyped_splay_tree_c_tests.\n\t* selftest.h (typed_splay_tree_c_tests): New decl.\n\t* typed-splay-tree.c: New file.\n\t* typed-splay-tree.h (typed_splay_tree::foreach_fn): New typedef.\n\t(typed_splay_tree::max): New method.\n\t(typed_splay_tree::min): New method.\n\t(typed_splay_tree::foreach): New method.\n\t(typed_splay_tree::closure): New struct.\n\t(typed_splay_tree::inner_foreach_fn): New function.\n\nFrom-SVN: r239958", "tree": {"sha": "f23ce1600b7221b1811026f2b18b32e392b338c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f23ce1600b7221b1811026f2b18b32e392b338c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/950f6c851965c50f4460a9b5230b0425c4c77a06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/950f6c851965c50f4460a9b5230b0425c4c77a06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/950f6c851965c50f4460a9b5230b0425c4c77a06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/950f6c851965c50f4460a9b5230b0425c4c77a06/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a81036247b70013eeb764e4c0e2f65c52d6142b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a81036247b70013eeb764e4c0e2f65c52d6142b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a81036247b70013eeb764e4c0e2f65c52d6142b"}], "stats": {"total": 158, "additions": 158, "deletions": 0}, "files": [{"sha": "cae775f393d2b483901f75bc86043a689ea5d666", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950f6c851965c50f4460a9b5230b0425c4c77a06/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950f6c851965c50f4460a9b5230b0425c4c77a06/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=950f6c851965c50f4460a9b5230b0425c4c77a06", "patch": "@@ -1,3 +1,17 @@\n+2016-09-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* Makefile.in (OBJS): Add typed-splay-tree.o.\n+\t* selftest-run-tests.c (selftest::run_tests): Call\n+\ttyped_splay_tree_c_tests.\n+\t* selftest.h (typed_splay_tree_c_tests): New decl.\n+\t* typed-splay-tree.c: New file.\n+\t* typed-splay-tree.h (typed_splay_tree::foreach_fn): New typedef.\n+\t(typed_splay_tree::max): New method.\n+\t(typed_splay_tree::min): New method.\n+\t(typed_splay_tree::foreach): New method.\n+\t(typed_splay_tree::closure): New struct.\n+\t(typed_splay_tree::inner_foreach_fn): New function.\n+\n 2016-09-02  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \t* ipa-cp.c (ipcp_store_bits_results): Change option name from"}, {"sha": "b38a0c15998ccc35d49884b8fa4dc21ebc9b7a25", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950f6c851965c50f4460a9b5230b0425c4c77a06/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950f6c851965c50f4460a9b5230b0425c4c77a06/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=950f6c851965c50f4460a9b5230b0425c4c77a06", "patch": "@@ -1542,6 +1542,7 @@ OBJS = \\\n \ttree-vectorizer.o \\\n \ttree-vrp.o \\\n \ttree.o \\\n+\ttyped-splay-tree.o \\\n \tvaltrack.o \\\n \tvalue-prof.o \\\n \tvar-tracking.o \\"}, {"sha": "e20bbd0f568fb16c48d074340ca9c946de40cd2a", "filename": "gcc/selftest-run-tests.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950f6c851965c50f4460a9b5230b0425c4c77a06/gcc%2Fselftest-run-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950f6c851965c50f4460a9b5230b0425c4c77a06/gcc%2Fselftest-run-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest-run-tests.c?ref=950f6c851965c50f4460a9b5230b0425c4c77a06", "patch": "@@ -56,6 +56,7 @@ selftest::run_tests ()\n   ggc_tests_c_tests ();\n   sreal_c_tests ();\n   fibonacci_heap_c_tests ();\n+  typed_splay_tree_c_tests ();\n \n   /* Mid-level data structures.  */\n   input_c_tests ();"}, {"sha": "54a33f903e2374992455853c6844980cd44b5167", "filename": "gcc/selftest.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950f6c851965c50f4460a9b5230b0425c4c77a06/gcc%2Fselftest.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950f6c851965c50f4460a9b5230b0425c4c77a06/gcc%2Fselftest.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest.h?ref=950f6c851965c50f4460a9b5230b0425c4c77a06", "patch": "@@ -166,6 +166,7 @@ extern void selftest_c_tests ();\n extern void spellcheck_c_tests ();\n extern void spellcheck_tree_c_tests ();\n extern void sreal_c_tests ();\n+extern void typed_splay_tree_c_tests ();\n extern void tree_c_tests ();\n extern void tree_cfg_c_tests ();\n extern void vec_c_tests ();"}, {"sha": "33992c1f8c06b5c4dd3b1183e861afe91ce7c7e0", "filename": "gcc/typed-splay-tree.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950f6c851965c50f4460a9b5230b0425c4c77a06/gcc%2Ftyped-splay-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950f6c851965c50f4460a9b5230b0425c4c77a06/gcc%2Ftyped-splay-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftyped-splay-tree.c?ref=950f6c851965c50f4460a9b5230b0425c4c77a06", "patch": "@@ -0,0 +1,79 @@\n+/* Selftests for typed-splay-tree.h.\n+   Copyright (C) 2016 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"typed-splay-tree.h\"\n+#include \"selftest.h\"\n+\n+#if CHECKING_P\n+\n+namespace selftest {\n+\n+/* Callback for use by test_str_to_int.  */\n+\n+static int\n+append_cb (const char *, int value, void *user_data)\n+{\n+  auto_vec <int> *vec = (auto_vec <int> *)user_data;\n+  vec->safe_push (value);\n+  return 0;\n+}\n+\n+/* Test of typed_splay_tree <const char *, int>.  */\n+\n+static void\n+test_str_to_int ()\n+{\n+  typed_splay_tree <const char *, int> t (strcmp, NULL, NULL);\n+\n+  t.insert (\"a\", 1);\n+  t.insert (\"b\", 2);\n+  t.insert (\"c\", 3);\n+\n+  ASSERT_EQ (1, t.lookup (\"a\"));\n+  ASSERT_EQ (2, t.lookup (\"b\"));\n+  ASSERT_EQ (3, t.lookup (\"c\"));\n+\n+  ASSERT_EQ (2, t.predecessor (\"c\"));\n+  ASSERT_EQ (3, t.successor (\"b\"));\n+  ASSERT_EQ (1, t.min ());\n+  ASSERT_EQ (3, t.max ());\n+\n+  /* Test foreach by appending to a vec, and verifying the vec.  */\n+  auto_vec <int> v;\n+  t.foreach (append_cb, &v);\n+  ASSERT_EQ (3, v.length ());\n+  ASSERT_EQ (1, v[0]);\n+  ASSERT_EQ (2, v[1]);\n+  ASSERT_EQ (3, v[2]);\n+}\n+\n+/* Run all of the selftests within this file.  */\n+\n+void\n+typed_splay_tree_c_tests ()\n+{\n+  test_str_to_int ();\n+}\n+\n+} // namespace selftest\n+\n+#endif /* #if CHECKING_P */"}, {"sha": "7b8afef2b1de11d98f79d482e4d82a9a397ba7f5", "filename": "gcc/typed-splay-tree.h", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950f6c851965c50f4460a9b5230b0425c4c77a06/gcc%2Ftyped-splay-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950f6c851965c50f4460a9b5230b0425c4c77a06/gcc%2Ftyped-splay-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftyped-splay-tree.h?ref=950f6c851965c50f4460a9b5230b0425c4c77a06", "patch": "@@ -33,6 +33,7 @@ class typed_splay_tree\n   typedef int (*compare_fn) (key_type, key_type);\n   typedef void (*delete_key_fn) (key_type);\n   typedef void (*delete_value_fn) (value_type);\n+  typedef int (*foreach_fn) (key_type, value_type, void *);\n \n   typed_splay_tree (compare_fn,\n \t\t    delete_key_fn,\n@@ -43,8 +44,23 @@ class typed_splay_tree\n   value_type predecessor (key_type k);\n   value_type successor (key_type k);\n   void insert (key_type k, value_type v);\n+  value_type max ();\n+  value_type min ();\n+  int foreach (foreach_fn, void *);\n \n  private:\n+  /* Helper type for typed_splay_tree::foreach.  */\n+  struct closure\n+  {\n+    closure (foreach_fn outer_cb, void *outer_user_data)\n+    : m_outer_cb (outer_cb), m_outer_user_data (outer_user_data) {}\n+\n+    foreach_fn m_outer_cb;\n+    void *m_outer_user_data;\n+  };\n+\n+  static int inner_foreach_fn (splay_tree_node node, void *user_data);\n+\n   static value_type node_to_value (splay_tree_node node);\n \n  private:\n@@ -120,6 +136,52 @@ typed_splay_tree<KEY_TYPE, VALUE_TYPE>::insert (key_type key,\n \t\t     (splay_tree_value)value);\n }\n \n+/* Get the value with maximal key.  */\n+\n+template <typename KEY_TYPE, typename VALUE_TYPE>\n+inline VALUE_TYPE\n+typed_splay_tree<KEY_TYPE, VALUE_TYPE>::max ()\n+{\n+  return node_to_value (splay_tree_max (m_inner));\n+}\n+\n+/* Get the value with minimal key.  */\n+\n+template <typename KEY_TYPE, typename VALUE_TYPE>\n+inline VALUE_TYPE\n+typed_splay_tree<KEY_TYPE, VALUE_TYPE>::min ()\n+{\n+  return node_to_value (splay_tree_min (m_inner));\n+}\n+\n+/* Call OUTER_CB, passing it the OUTER_USER_DATA, for every node,\n+   following an in-order traversal.  If OUTER_CB ever returns a non-zero\n+   value, the iteration ceases immediately, and the value is returned.\n+   Otherwise, this function returns 0.  */\n+\n+template <typename KEY_TYPE, typename VALUE_TYPE>\n+inline int\n+typed_splay_tree<KEY_TYPE, VALUE_TYPE>::foreach (foreach_fn outer_cb,\n+\t\t\t\t\t\t void *outer_user_data)\n+{\n+  closure c (outer_cb, outer_user_data);\n+\n+  return splay_tree_foreach (m_inner, inner_foreach_fn, &c);\n+}\n+\n+/* Helper function for typed_splay_tree::foreach.  */\n+\n+template <typename KEY_TYPE, typename VALUE_TYPE>\n+int\n+typed_splay_tree<KEY_TYPE, VALUE_TYPE>::inner_foreach_fn (splay_tree_node node,\n+\t\t\t\t\t\t\t  void *user_data)\n+{\n+  closure *c = (closure *)user_data;\n+\n+  return c->m_outer_cb ((KEY_TYPE)node->key, (VALUE_TYPE)node->value,\n+\t\t\tc->m_outer_user_data);\n+}\n+\n /* Internal function for converting from splay_tree_node to\n    VALUE_TYPE.  */\n template <typename KEY_TYPE, typename VALUE_TYPE>"}]}