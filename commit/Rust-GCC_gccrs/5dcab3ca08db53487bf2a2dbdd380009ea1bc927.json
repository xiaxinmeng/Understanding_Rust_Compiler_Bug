{"sha": "5dcab3ca08db53487bf2a2dbdd380009ea1bc927", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRjYWIzY2EwOGRiNTM0ODdiZjJhMmRiZGQzODAwMDllYTFiYzkyNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-05T14:12:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-05T14:12:04Z"}, "message": "[multiple changes]\n\n2011-09-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_disp.adb (Find_Controlling_Arg): Add checks for\n\tinterface type conversions, that are expanded into dereferences.\n\n2011-09-05  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper):\n\tExamine the parameter and return profile of a subprogram and swap\n\tany incomplete types coming from a limited context with their\n\tcorresponding non-limited views.\n\t(Exchange_Limited_Views): New routine.\n\n2011-09-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Prepare_Private_Subtype_Completion): Set parent\n\tof internal entity to the subtype declaration, so that when\n\tentities are subsequently exchanged in a package body, the tree\n\tremains properly formatted for ASIS.\n\nFrom-SVN: r178548", "tree": {"sha": "10a248965adffdb9d24321bdf442196138ddcebf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10a248965adffdb9d24321bdf442196138ddcebf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5dcab3ca08db53487bf2a2dbdd380009ea1bc927", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dcab3ca08db53487bf2a2dbdd380009ea1bc927", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dcab3ca08db53487bf2a2dbdd380009ea1bc927", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dcab3ca08db53487bf2a2dbdd380009ea1bc927/comments", "author": null, "committer": null, "parents": [{"sha": "8da1a312964053d22469519475e61573d8ebf2a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8da1a312964053d22469519475e61573d8ebf2a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8da1a312964053d22469519475e61573d8ebf2a5"}], "stats": {"total": 124, "additions": 123, "deletions": 1}, "files": [{"sha": "bceb63248ed6c22f556956867d685a18e7212ce1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dcab3ca08db53487bf2a2dbdd380009ea1bc927/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dcab3ca08db53487bf2a2dbdd380009ea1bc927/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5dcab3ca08db53487bf2a2dbdd380009ea1bc927", "patch": "@@ -1,3 +1,23 @@\n+2011-09-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_disp.adb (Find_Controlling_Arg): Add checks for\n+\tinterface type conversions, that are expanded into dereferences.\n+\n+2011-09-05  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper):\n+\tExamine the parameter and return profile of a subprogram and swap\n+\tany incomplete types coming from a limited context with their\n+\tcorresponding non-limited views.\n+\t(Exchange_Limited_Views): New routine.\n+\n+2011-09-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Prepare_Private_Subtype_Completion): Set parent\n+\tof internal entity to the subtype declaration, so that when\n+\tentities are subsequently exchanged in a package body, the tree\n+\tremains properly formatted for ASIS.\n+\n 2011-09-05  Johannes Kanig  <kanig@adacore.com>\n \n \t* g-comlin.adb (Set_Usage): Additional optional argument to set help"}, {"sha": "c42e37c7204e264abe3013278f61716e0dc042f5", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dcab3ca08db53487bf2a2dbdd380009ea1bc927/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dcab3ca08db53487bf2a2dbdd380009ea1bc927/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=5dcab3ca08db53487bf2a2dbdd380009ea1bc927", "patch": "@@ -17052,13 +17052,16 @@ package body Sem_Ch3 is\n \n          --  The Base_Type is already completed, we can complete the subtype\n          --  now. We have to create a new entity with the same name, Thus we\n-         --  can't use Create_Itype.\n+         --  can't use Create_Itype. The entity may be exchanged when entering\n+         --  exiting a package body, so it has to have a proper parent field,\n+         --  so that the tree is always properly formatted for ASIS.\n \n          --  This is messy, should be fixed ???\n \n          Full := Make_Defining_Identifier (Sloc (Id), Chars (Id));\n          Set_Is_Itype (Full);\n          Set_Associated_Node_For_Itype (Full, Related_Nod);\n+         Set_Parent (Full, Parent (Id));\n          Complete_Private_Subtype (Id, Full, Full_B, Related_Nod);\n       end if;\n "}, {"sha": "fbfef08266514f73c523c6b7c5862e141264b401", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dcab3ca08db53487bf2a2dbdd380009ea1bc927/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dcab3ca08db53487bf2a2dbdd380009ea1bc927/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=5dcab3ca08db53487bf2a2dbdd380009ea1bc927", "patch": "@@ -1727,6 +1727,11 @@ package body Sem_Ch6 is\n       --  mechanism is used to find the corresponding spec of the primitive\n       --  body.\n \n+      procedure Exchange_Limited_Views (Subp_Id : Entity_Id);\n+      --  Ada 2012 (AI05-0151): Detect whether the profile of Subp_Id contains\n+      --  incomplete types coming from a limited context and swap their limited\n+      --  views with the non-limited ones.\n+\n       function Is_Private_Concurrent_Primitive\n         (Subp_Id : Entity_Id) return Boolean;\n       --  Determine whether subprogram Subp_Id is a primitive of a concurrent\n@@ -2092,6 +2097,65 @@ package body Sem_Ch6 is\n          return Spec_N;\n       end Disambiguate_Spec;\n \n+      ----------------------------\n+      -- Exchange_Limited_Views --\n+      ----------------------------\n+\n+      procedure Exchange_Limited_Views (Subp_Id : Entity_Id) is\n+         procedure Detect_And_Exchange (Id : Entity_Id);\n+         --  Determine whether Id's type denotes an incomplete type associated\n+         --  with a limited with clause and exchange the limited view with the\n+         --  non-limited one.\n+\n+         -------------------------\n+         -- Detect_And_Exchange --\n+         -------------------------\n+\n+         procedure Detect_And_Exchange (Id : Entity_Id) is\n+            Typ : constant Entity_Id := Etype (Id);\n+\n+         begin\n+            if Ekind (Typ) = E_Incomplete_Type\n+              and then From_With_Type (Typ)\n+              and then Present (Non_Limited_View (Typ))\n+            then\n+               Set_Etype (Id, Non_Limited_View (Typ));\n+            end if;\n+         end Detect_And_Exchange;\n+\n+         --  Local variables\n+\n+         Formal : Entity_Id;\n+\n+      --  Start of processing for Exchange_Limited_Views\n+\n+      begin\n+         if No (Subp_Id) then\n+            return;\n+\n+         --  Do not process subprogram bodies as they already use the non-\n+         --  limited view of types.\n+\n+         elsif not Ekind_In (Subp_Id, E_Function, E_Procedure) then\n+            return;\n+         end if;\n+\n+         --  Examine all formals and swap views when applicable\n+\n+         Formal := First_Formal (Subp_Id);\n+         while Present (Formal) loop\n+            Detect_And_Exchange (Formal);\n+\n+            Next_Formal (Formal);\n+         end loop;\n+\n+         --  Process the return type of a function\n+\n+         if Ekind (Subp_Id) = E_Function then\n+            Detect_And_Exchange (Subp_Id);\n+         end if;\n+      end Exchange_Limited_Views;\n+\n       -------------------------------------\n       -- Is_Private_Concurrent_Primitive --\n       -------------------------------------\n@@ -2726,6 +2790,15 @@ package body Sem_Ch6 is\n            (Sloc (N), Spec_Id, Prot_Typ, N, Declarations (N));\n       end if;\n \n+      --  Ada 2012 (AI05-0151): Incomplete types coming from a limited context\n+      --  may now appear in parameter and result profiles. Since the analysis\n+      --  of a subprogram body may use the parameter and result profile of the\n+      --  spec, swap any limited views with their non-limited counterpart.\n+\n+      if Ada_Version >= Ada_2012 then\n+         Exchange_Limited_Views (Spec_Id);\n+      end if;\n+\n       --  Analyze the declarations (this call will analyze the precondition\n       --  Check pragmas we prepended to the list, as well as the declaration\n       --  of the _Postconditions procedure)."}, {"sha": "2d80676791cc9ed6c2580d8403f542df42e72e5d", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dcab3ca08db53487bf2a2dbdd380009ea1bc927/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dcab3ca08db53487bf2a2dbdd380009ea1bc927/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=5dcab3ca08db53487bf2a2dbdd380009ea1bc927", "patch": "@@ -1616,6 +1616,32 @@ package body Sem_Disp is\n       then\n          return Controlling_Argument (Orig_Node);\n \n+      --  Type conversions are dynamically tagged if the target type, or its\n+      --  designated type, are classwide. An interface conversion expands into\n+      --  a dereference, so test must be performed on the original node.\n+\n+      elsif Nkind (Orig_Node) = N_Type_Conversion\n+        and then Nkind (N) = N_Explicit_Dereference\n+        and then Is_Controlling_Actual (N)\n+      then\n+         declare\n+            Target_Type : constant Entity_Id :=\n+                             Entity (Subtype_Mark (Orig_Node));\n+\n+         begin\n+            if Is_Class_Wide_Type (Target_Type) then\n+               return N;\n+\n+            elsif Is_Access_Type (Target_Type)\n+              and then Is_Class_Wide_Type (Designated_Type (Target_Type))\n+            then\n+               return N;\n+\n+            else\n+               return Empty;\n+            end if;\n+         end;\n+\n       --  Normal case\n \n       elsif Is_Controlling_Actual (N)"}]}