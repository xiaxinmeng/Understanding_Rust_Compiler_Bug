{"sha": "8d3f5a93c3b37ed56d86208c365f2d95b8181255", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQzZjVhOTNjM2IzN2VkNTZkODYyMDhjMzY1ZjJkOTViODE4MTI1NQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "francois.cppdevs@free.fr", "date": "2010-01-26T19:05:43Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2010-01-26T19:05:43Z"}, "message": "allocator.xml: Minor updates and fixes.\n\n2010-01-26  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n\n\t* doc/xml/manual/allocator.xml: Minor updates and fixes.\n\t* doc/xml/manual/containers.xml: Likewise.\n\t* doc/xml/manual/using.xml: Likewise.\n\t* doc/xml/manual/locale.xml: Likewise.\n\t* doc/xml/manual/appendix_contributing.xml: Likewise.\n\nFrom-SVN: r156258", "tree": {"sha": "16f85ad38538f9a7cbc5fbbd8521d28dde3bc5b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16f85ad38538f9a7cbc5fbbd8521d28dde3bc5b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d3f5a93c3b37ed56d86208c365f2d95b8181255", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d3f5a93c3b37ed56d86208c365f2d95b8181255", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d3f5a93c3b37ed56d86208c365f2d95b8181255", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d3f5a93c3b37ed56d86208c365f2d95b8181255/comments", "author": null, "committer": null, "parents": [{"sha": "31660932a6ccaae6bc4f16c45f8f20e518159ae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31660932a6ccaae6bc4f16c45f8f20e518159ae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31660932a6ccaae6bc4f16c45f8f20e518159ae0"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "4263844279f49505587d0e70458b7d7861d9bc5a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3f5a93c3b37ed56d86208c365f2d95b8181255/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3f5a93c3b37ed56d86208c365f2d95b8181255/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8d3f5a93c3b37ed56d86208c365f2d95b8181255", "patch": "@@ -1,3 +1,11 @@\n+2010-01-26  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n+\n+\t* doc/xml/manual/allocator.xml: Minor updates and fixes.\n+\t* doc/xml/manual/containers.xml: Likewise.\n+\t* doc/xml/manual/using.xml: Likewise.\n+\t* doc/xml/manual/locale.xml: Likewise.\n+\t* doc/xml/manual/appendix_contributing.xml: Likewise.\n+\n 2010-01-26  Daniel Frey  <d.frey@gmx.de>\n \n \t* include/std/functional: Use enable_if instead of __enable_if\n@@ -35,7 +43,7 @@\n \n 2010-01-21  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n-        PR libstdc++/42201\n+\tPR libstdc++/42201\n \t* include/std/future: Update to latest WP.\n \t* src/functexcept.cc (__throw_future_error): Use make_error_code.\n \t* testsuite/30_threads/async/any.cc: New.\n@@ -70,7 +78,7 @@\n \t* testsuite/30_threads/unique_future/cons/copy_neg.cc: Adjust.\n \t* testsuite/30_threads/unique_future/cons/move.cc: Adjust.\n \t* testsuite/30_threads/unique_future/requirements/\n-        explicit_instantiation.cc: Adjust.\n+\texplicit_instantiation.cc: Adjust.\n \t* testsuite/30_threads/unique_future/members/is_ready.cc: Remove.\n \t* testsuite/30_threads/unique_future/members/has_value.cc: Remove.\n \t* testsuite/30_threads/unique_future/members/has_exception.cc: Remove."}, {"sha": "2f2b03849aa8d265b609becb003f89644639ba76", "filename": "libstdc++-v3/doc/xml/manual/allocator.xml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3f5a93c3b37ed56d86208c365f2d95b8181255/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fallocator.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3f5a93c3b37ed56d86208c365f2d95b8181255/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fallocator.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fallocator.xml?ref=8d3f5a93c3b37ed56d86208c365f2d95b8181255", "patch": "@@ -81,7 +81,7 @@\n    </itemizedlist>\n \n    <para> \n-     Complete details cam be found in the C++ standard, look in\n+     Complete details can be found in the C++ standard, look in\n      <constant>[20.4 Memory]</constant>.\n    </para>\n \n@@ -146,7 +146,7 @@\n \n    <para>\n      The only allocator interface that\n-     is support is the standard C++ interface. As such, all STL\n+     is supported is the standard C++ interface. As such, all STL\n      containers have been adjusted, and all external allocators have\n      been modified to support this change.   \n    </para>\n@@ -202,7 +202,7 @@\n        </para>\n        <para>\n        This test shows the ability of the allocator to reclaim memory\n-     on a pre-thread basis, as well as measuring thread contention\n+     on a per-thread basis, as well as measuring thread contention\n      for memory resources. \n      Test source \n     <ulink url=\"http://gcc.gnu.org/viewcvs/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/insert_erase/associative.cc?view=markup\">here</ulink>.\n@@ -447,8 +447,8 @@\n    <para>The <varname>thr</varname> boolean determines whether the\n    pool should be manipulated atomically or not.  When\n    <varname>thr</varname> = <constant>true</constant>, the allocator\n-   is is thread-safe, while <varname>thr</varname> =\n-   <constant>false</constant>, and is slightly faster but unsafe for\n+   is thread-safe, while <varname>thr</varname> =\n+   <constant>false</constant>, is slightly faster but unsafe for\n    multiple threads.\n    </para>\n "}, {"sha": "d77f2a045705045210139826671e6dd5eb411713", "filename": "libstdc++-v3/doc/xml/manual/appendix_contributing.xml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3f5a93c3b37ed56d86208c365f2d95b8181255/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fappendix_contributing.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3f5a93c3b37ed56d86208c365f2d95b8181255/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fappendix_contributing.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fappendix_contributing.xml?ref=8d3f5a93c3b37ed56d86208c365f2d95b8181255", "patch": "@@ -172,7 +172,7 @@\n       <listitem>\n \t<para> \n \t  A ChangeLog entry as plain text; see the various\n-\t  ChangeLog files for format and content. If using you are\n+\t  ChangeLog files for format and content. If you are\n \t  using emacs as your editor, simply position the insertion\n \t  point at the beginning of your change and hit CX-4a to bring\n \t  up the appropriate ChangeLog entry. See--magic! Similar"}, {"sha": "909d52008bd656bd0be7b7c2405f1bfe72e998f8", "filename": "libstdc++-v3/doc/xml/manual/containers.xml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3f5a93c3b37ed56d86208c365f2d95b8181255/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fcontainers.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3f5a93c3b37ed56d86208c365f2d95b8181255/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fcontainers.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fcontainers.xml?ref=8d3f5a93c3b37ed56d86208c365f2d95b8181255", "patch": "@@ -170,7 +170,7 @@\n \t  <code>end()</code>, then the item being inserted should have\n \t  a key greater than all the other keys in the container.  The\n \t  item will be inserted at the end of the container, becoming\n-\t  the new entry at <code>end()</code>.  \n+\t  the new entry before <code>end()</code>.  \n       </para>\n       </listitem>\n       <listitem>\n@@ -286,7 +286,7 @@\n    </para>\n    <para>\n      The problem is that <code>vector&lt;bool&gt;</code> doesn't\n-     behave like a normal vector anymore.  There have been recent\n+     behave like a normal vector anymore.  There have been\n      journal articles which discuss the problems (the ones by Herb\n      Sutter in the May and July/August 1999 issues of C++ Report cover\n      it well).  Future revisions of the ISO C++ Standard will change"}, {"sha": "cfb074d51956d30349eb2beb6a7e3bcb42346a52", "filename": "libstdc++-v3/doc/xml/manual/locale.xml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3f5a93c3b37ed56d86208c365f2d95b8181255/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Flocale.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3f5a93c3b37ed56d86208c365f2d95b8181255/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Flocale.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Flocale.xml?ref=8d3f5a93c3b37ed56d86208c365f2d95b8181255", "patch": "@@ -38,8 +38,8 @@ class facet\n \n <para>\n Facets actually implement locale functionality. For instance, a facet\n-called numpunct is the data objects that can be used to query for the\n-thousands separator is in the German locale.\n+called numpunct is the data object that can be used to query for the\n+thousands separator in the locale.\n </para>\n \n <para>"}, {"sha": "7db334facb2b8185ff410d4e7e0ebb84cd38db75", "filename": "libstdc++-v3/doc/xml/manual/using.xml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3f5a93c3b37ed56d86208c365f2d95b8181255/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3f5a93c3b37ed56d86208c365f2d95b8181255/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml?ref=8d3f5a93c3b37ed56d86208c365f2d95b8181255", "patch": "@@ -655,7 +655,7 @@ same translation unit:\n \t(&lt;math.h&gt; in this case), the symbols will be available\n \tin the global namespace and perhaps in\n \tnamespace <code>std::</code> (but this is no longer a firm\n-\trequirement.) One the other hand, including the C++-style\n+\trequirement.) On the other hand, including the C++-style\n \theader (&lt;cmath&gt;) guarantees that the entities will be\n \tfound in namespace std and perhaps in the global namespace.\n       </para>\n@@ -808,7 +808,7 @@ and <code>__gnu_pbds</code>.\n std::string;</code>) This approach works well for individual source files, but\n should not be used in a global context, like header files.\n \t  </para></listitem> <listitem><para>use a <emphasis>fully\n-qualified name</emphasis>for each library symbol\n+qualified name</emphasis> for each library symbol\n (i.e. <code>std::string</code>, <code>std::cout</code>) Always can be\n used, and usually enhanced, by strategic use of typedefs. (In the\n cases where the qualified verbiage becomes unwieldy.)"}]}