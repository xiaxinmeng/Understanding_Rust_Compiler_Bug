{"sha": "4db3bddcbe4773beea800c88ff740c9f5ee900c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRiM2JkZGNiZTQ3NzNiZWVhODAwYzg4ZmY3NDBjOWY1ZWU5MDBjNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-08-31T22:54:44Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-08-31T22:54:44Z"}, "message": "(store_split_bit_field): Always adjust arg to extract_fixed_bit_field\nin BYTES_BIG_ENDIAN case.\n\nFrom-SVN: r8005", "tree": {"sha": "436cb4e5b3a2f75dc0c85f64d225144fd1c1beb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/436cb4e5b3a2f75dc0c85f64d225144fd1c1beb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4db3bddcbe4773beea800c88ff740c9f5ee900c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4db3bddcbe4773beea800c88ff740c9f5ee900c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4db3bddcbe4773beea800c88ff740c9f5ee900c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4db3bddcbe4773beea800c88ff740c9f5ee900c5/comments", "author": null, "committer": null, "parents": [{"sha": "56929fbd6563f5f8d940fb4a2ce7dd22159e4250", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56929fbd6563f5f8d940fb4a2ce7dd22159e4250", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56929fbd6563f5f8d940fb4a2ce7dd22159e4250"}], "stats": {"total": 19, "additions": 6, "deletions": 13}, "files": [{"sha": "86612597f2d17e69c9f45645b31dbf1c32e52f4c", "filename": "gcc/expmed.c", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db3bddcbe4773beea800c88ff740c9f5ee900c5/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db3bddcbe4773beea800c88ff740c9f5ee900c5/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=4db3bddcbe4773beea800c88ff740c9f5ee900c5", "patch": "@@ -740,19 +740,12 @@ store_split_bit_field (op0, bitsize, bitpos, value, align)\n \t\t\t >> (bitsize - bitsdone - thissize))\n \t\t\t& (((HOST_WIDE_INT) 1 << thissize) - 1));\n       else\n-\t{\n-\t  /* The args are chosen so that the last part\n-\t     includes the lsb.  */\n-\t  int bit_offset = 0;\n-\t  /* If the value isn't in memory, then it must be right aligned\n-\t     if a register, so skip past the padding on the left.  If it\n-\t     is in memory, then there is no padding on the left.  */\n-\t  if (GET_CODE (value) != MEM)\n-\t    bit_offset = BITS_PER_WORD - bitsize;\n-\t  part = extract_fixed_bit_field (word_mode, value, 0, thissize,\n-\t\t\t\t\t  bit_offset + bitsdone,\n-\t\t\t\t\t  NULL_RTX, 1, align);\n-\t}\n+\t/* The args are chosen so that the last part includes the lsb.\n+\t   Give extract_bit_field the value it needs (with endianness\n+\t   compensation) to fetch the piece we want.  */\n+\tpart = extract_fixed_bit_field (word_mode, value, 0, thissize,\n+\t\t\t\t\tBITS_PER_WORD - bitsize + bitsdone,\n+\t\t\t\t\tNULL_RTX, 1, align);\n #else\n       /* Fetch successively more significant portions.  */\n       if (GET_CODE (value) == CONST_INT)"}]}