{"sha": "558740bf3d958eb4b2f2bcc72eed6fc05dd7c0e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU4NzQwYmYzZDk1OGViNGIyZjJiY2M3MmVlZDZmYzA1ZGQ3YzBlMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-02-13T22:35:54Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-02-13T22:35:54Z"}, "message": "i386.md (mul patterns): Allow memory operand to be first; add expanders where needed; fix constraints.\n\n\t* i386.md (mul patterns): Allow memory operand to be first;\n\tadd expanders where needed; fix constraints.\n\t(min?f_nonieee, max?f_nonieee, SSE TImode patterns):\n\tAllow memory operand to be the first.\n\n\t* i386.c (ix86_prepare_fp_compare_args): Fix condition for swapping\n\toperands.\n\nFrom-SVN: r49747", "tree": {"sha": "81687220b683f16e23567a788223f8f80529f8b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81687220b683f16e23567a788223f8f80529f8b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/558740bf3d958eb4b2f2bcc72eed6fc05dd7c0e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/558740bf3d958eb4b2f2bcc72eed6fc05dd7c0e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/558740bf3d958eb4b2f2bcc72eed6fc05dd7c0e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/558740bf3d958eb4b2f2bcc72eed6fc05dd7c0e3/comments", "author": null, "committer": null, "parents": [{"sha": "21117a1708776b7a9544408d9e744703d4f7efbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21117a1708776b7a9544408d9e744703d4f7efbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21117a1708776b7a9544408d9e744703d4f7efbf"}], "stats": {"total": 277, "additions": 215, "deletions": 62}, "files": [{"sha": "16340b695e05d4bd725b769bc04d42e786f3e64e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/558740bf3d958eb4b2f2bcc72eed6fc05dd7c0e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/558740bf3d958eb4b2f2bcc72eed6fc05dd7c0e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=558740bf3d958eb4b2f2bcc72eed6fc05dd7c0e3", "patch": "@@ -1,3 +1,13 @@\n+Wed Feb 13 23:34:30 CET 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.md (mul patterns): Allow memory operand to be first;\n+\tadd expanders where needed; fix constraints.\n+\t(min?f_nonieee, max?f_nonieee, SSE TImode patterns):\n+\tAllow memory operand to be the first.\n+\n+\t* i386.c (ix86_prepare_fp_compare_args): Fix condition for swapping\n+\toperands.\n+\n 2002-02-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/5681:"}, {"sha": "e038e5cc7efc913cdd01af0f3c6657f56e59e5c2", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/558740bf3d958eb4b2f2bcc72eed6fc05dd7c0e3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/558740bf3d958eb4b2f2bcc72eed6fc05dd7c0e3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=558740bf3d958eb4b2f2bcc72eed6fc05dd7c0e3", "patch": "@@ -7137,7 +7137,7 @@ ix86_prepare_fp_compare_args (code, pop0, pop1)\n   /* Try to rearrange the comparison to make it cheaper.  */\n   if (ix86_fp_comparison_cost (code)\n       > ix86_fp_comparison_cost (swap_condition (code))\n-      && (GET_CODE (op0) == REG || !reload_completed))\n+      && (GET_CODE (op1) == REG || !no_new_pseudos))\n     {\n       rtx tmp;\n       tmp = op0, op0 = op1, op1 = tmp;"}, {"sha": "cdacbbd901997b7b6ef402120d7d1c80b882e392", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 204, "deletions": 61, "changes": 265, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/558740bf3d958eb4b2f2bcc72eed6fc05dd7c0e3/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/558740bf3d958eb4b2f2bcc72eed6fc05dd7c0e3/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=558740bf3d958eb4b2f2bcc72eed6fc05dd7c0e3", "patch": "@@ -7334,116 +7334,218 @@\n    (set_attr \"prefix_0f\" \"0,0,1\")\n    (set_attr \"mode\" \"HI\")])\n \n-(define_insn \"mulqi3\"\n+(define_expand \"mulqi3\"\n+  [(parallel [(set (match_operand:QI 0 \"register_operand\" \"\")\n+\t\t   (mult:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")\n+\t\t\t    (match_operand:QI 2 \"register_operand\" \"\")))\n+\t      (clobber (reg:CC 17))])]\n+  \"TARGET_QIMODE_MATH\"\n+  \"\")\n+\n+(define_insn \"*mulqi3_1\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=a\")\n-\t(mult:QI (match_operand:QI 1 \"register_operand\" \"%0\")\n+\t(mult:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0\")\n \t\t (match_operand:QI 2 \"nonimmediate_operand\" \"qm\")))\n    (clobber (reg:CC 17))]\n-  \"TARGET_QIMODE_MATH\"\n+  \"TARGET_QIMODE_MATH\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"mul{b}\\t%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"umulqihi3\"\n+(define_expand \"umulqihi3\"\n+  [(parallel [(set (match_operand:HI 0 \"register_operand\" \"\")\n+\t\t   (mult:HI (zero_extend:HI\n+\t\t\t      (match_operand:QI 1 \"nonimmediate_operand\" \"\"))\n+\t\t\t    (zero_extend:HI\n+\t\t\t      (match_operand:QI 2 \"register_operand\" \"\"))))\n+\t      (clobber (reg:CC 17))])]\n+  \"TARGET_QIMODE_MATH\"\n+  \"\")\n+\n+(define_insn \"*umulqihi3_1\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=a\")\n-\t(mult:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"%0\"))\n+\t(mult:HI (zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"%0\"))\n \t\t (zero_extend:HI (match_operand:QI 2 \"nonimmediate_operand\" \"qm\"))))\n    (clobber (reg:CC 17))]\n-  \"TARGET_QIMODE_MATH\"\n+  \"TARGET_QIMODE_MATH\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"mul{b}\\t%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"mulqihi3\"\n+(define_expand \"mulqihi3\"\n+  [(parallel [(set (match_operand:HI 0 \"register_operand\" \"\")\n+\t\t   (mult:HI (sign_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"\"))\n+\t\t\t    (sign_extend:HI (match_operand:QI 2 \"register_operand\" \"\"))))\n+\t      (clobber (reg:CC 17))])]\n+  \"TARGET_QIMODE_MATH\"\n+  \"\")\n+\n+(define_insn \"*mulqihi3_insn\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=a\")\n-\t(mult:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"%0\"))\n+\t(mult:HI (sign_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"%0\"))\n \t\t (sign_extend:HI (match_operand:QI 2 \"nonimmediate_operand\" \"qm\"))))\n    (clobber (reg:CC 17))]\n-  \"TARGET_QIMODE_MATH\"\n+  \"TARGET_QIMODE_MATH\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"imul{b}\\t%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"umulditi3\"\n+(define_expand \"umulditi3\"\n+  [(parallel [(set (match_operand:TI 0 \"register_operand\" \"\")\n+\t\t   (mult:TI (zero_extend:TI\n+\t\t\t      (match_operand:DI 1 \"nonimmediate_operand\" \"\"))\n+\t\t\t    (zero_extend:TI\n+\t\t\t      (match_operand:DI 2 \"register_operand\" \"\"))))\n+\t      (clobber (reg:CC 17))])]\n+  \"TARGET_64BIT\"\n+  \"\")\n+\n+(define_insn \"*umulditi3_insn\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=A\")\n-\t(mult:TI (zero_extend:TI (match_operand:DI 1 \"register_operand\" \"%0\"))\n+\t(mult:TI (zero_extend:TI (match_operand:DI 1 \"nonimmediate_operand\" \"%0\"))\n \t\t (zero_extend:TI (match_operand:DI 2 \"nonimmediate_operand\" \"rm\"))))\n    (clobber (reg:CC 17))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"mul{q}\\t%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"ppro_uops\" \"few\")\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"mode\" \"DI\")])\n \n ;; We can't use this pattern in 64bit mode, since it results in two separate 32bit registers\n-(define_insn \"umulsidi3\"\n+(define_expand \"umulsidi3\"\n+  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t\t   (mult:DI (zero_extend:DI\n+\t\t\t      (match_operand:SI 1 \"nonimmediate_operand\" \"\"))\n+\t\t\t    (zero_extend:DI\n+\t\t\t      (match_operand:SI 2 \"register_operand\" \"\"))))\n+\t      (clobber (reg:CC 17))])]\n+  \"!TARGET_64BIT\"\n+  \"\")\n+\n+(define_insn \"*umulsidi3_insn\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=A\")\n-\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"%0\"))\n+\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"%0\"))\n \t\t (zero_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"rm\"))))\n    (clobber (reg:CC 17))]\n-  \"!TARGET_64BIT\"\n+  \"!TARGET_64BIT\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"mul{l}\\t%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"ppro_uops\" \"few\")\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"mulditi3\"\n+(define_expand \"mulditi3\"\n+  [(parallel [(set (match_operand:TI 0 \"register_operand\" \"\")\n+\t\t   (mult:TI (sign_extend:TI\n+\t\t\t      (match_operand:DI 1 \"nonimmediate_operand\" \"\"))\n+\t\t\t    (sign_extend:TI\n+\t\t\t      (match_operand:DI 2 \"register_operand\" \"\"))))\n+\t      (clobber (reg:CC 17))])]\n+  \"TARGET_64BIT\"\n+  \"\")\n+\n+(define_insn \"*mulditi3_insn\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=A\")\n-\t(mult:TI (sign_extend:TI (match_operand:DI 1 \"register_operand\" \"%0\"))\n+\t(mult:TI (sign_extend:TI (match_operand:DI 1 \"nonimmediate_operand\" \"%0\"))\n \t\t (sign_extend:TI (match_operand:DI 2 \"nonimmediate_operand\" \"rm\"))))\n    (clobber (reg:CC 17))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"imul{q}\\t%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"mulsidi3\"\n+(define_expand \"mulsidi3\"\n+  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t\t   (mult:DI (sign_extend:DI\n+\t\t\t      (match_operand:SI 1 \"nonimmediate_operand\" \"\"))\n+\t\t\t    (sign_extend:DI\n+\t\t\t      (match_operand:SI 2 \"register_operand\" \"\"))))\n+\t      (clobber (reg:CC 17))])]\n+  \"!TARGET_64BIT\"\n+  \"\")\n+\n+(define_insn \"*mulsidi3_insn\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=A\")\n-\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"%0\"))\n+\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"%0\"))\n \t\t (sign_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"rm\"))))\n    (clobber (reg:CC 17))]\n-  \"!TARGET_64BIT\"\n+  \"!TARGET_64BIT\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"imul{l}\\t%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_expand \"umuldi3_highpart\"\n+  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t\t   (truncate:DI\n+\t\t     (lshiftrt:TI\n+\t\t       (mult:TI (zero_extend:TI\n+\t\t\t\t  (match_operand:DI 1 \"nonimmediate_operand\" \"\"))\n+\t\t\t\t(zero_extend:TI\n+\t\t\t\t  (match_operand:DI 2 \"register_operand\" \"\")))\n+\t\t       (const_int 64))))\n+\t      (clobber (match_scratch:DI 3 \"\"))\n+\t      (clobber (reg:CC 17))])]\n+  \"TARGET_64BIT\"\n+  \"\")\n+\n (define_insn \"*umuldi3_highpart_rex64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n \t(truncate:DI\n \t  (lshiftrt:TI\n \t    (mult:TI (zero_extend:TI\n-\t\t       (match_operand:DI 1 \"register_operand\" \"%a\"))\n+\t\t       (match_operand:DI 1 \"nonimmediate_operand\" \"%a\"))\n \t\t     (zero_extend:TI\n \t\t       (match_operand:DI 2 \"nonimmediate_operand\" \"rm\")))\n \t    (const_int 64))))\n-   (clobber (match_scratch:DI 3 \"=a\"))\n+   (clobber (match_scratch:DI 3 \"=1\"))\n    (clobber (reg:CC 17))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"mul{q}\\t%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"ppro_uops\" \"few\")\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"umulsi3_highpart\"\n+(define_expand \"umulsi3_highpart\"\n+  [(parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t\t   (truncate:SI\n+\t\t     (lshiftrt:DI\n+\t\t       (mult:DI (zero_extend:DI\n+\t\t\t\t  (match_operand:SI 1 \"nonimmediate_operand\" \"\"))\n+\t\t\t\t(zero_extend:DI\n+\t\t\t\t  (match_operand:SI 2 \"register_operand\" \"\")))\n+\t\t       (const_int 32))))\n+\t      (clobber (match_scratch:SI 3 \"\"))\n+\t      (clobber (reg:CC 17))])]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"*umulsi3_highpart_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(truncate:SI\n \t  (lshiftrt:DI\n \t    (mult:DI (zero_extend:DI\n-\t\t       (match_operand:SI 1 \"register_operand\" \"%a\"))\n+\t\t       (match_operand:SI 1 \"nonimmediate_operand\" \"%a\"))\n \t\t     (zero_extend:DI\n \t\t       (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n \t    (const_int 32))))\n-   (clobber (match_scratch:SI 3 \"=a\"))\n+   (clobber (match_scratch:SI 3 \"=1\"))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM\"\n   \"mul{l}\\t%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"ppro_uops\" \"few\")\n@@ -7455,48 +7557,78 @@\n \t(zero_extend:DI (truncate:SI\n \t  (lshiftrt:DI\n \t    (mult:DI (zero_extend:DI\n-\t\t       (match_operand:SI 1 \"register_operand\" \"%a\"))\n+\t\t       (match_operand:SI 1 \"nonimmediate_operand\" \"%a\"))\n \t\t     (zero_extend:DI\n \t\t       (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n \t    (const_int 32)))))\n-   (clobber (match_scratch:SI 3 \"=a\"))\n+   (clobber (match_scratch:SI 3 \"=1\"))\n    (clobber (reg:CC 17))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"mul{l}\\t%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"ppro_uops\" \"few\")\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_expand \"smuldi3_highpart\"\n+  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+\t\t   (truncate:DI\n+\t\t     (lshiftrt:TI\n+\t\t       (mult:TI (sign_extend:TI\n+\t\t\t\t  (match_operand:DI 1 \"nonimmediate_operand\" \"\"))\n+\t\t\t\t(sign_extend:TI\n+\t\t\t\t  (match_operand:DI 2 \"register_operand\" \"\")))\n+\t\t       (const_int 64))))\n+\t      (clobber (match_scratch:DI 3 \"\"))\n+\t      (clobber (reg:CC 17))])]\n+  \"TARGET_64BIT\"\n+  \"\")\n+\n (define_insn \"*smuldi3_highpart_rex64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n \t(truncate:DI\n \t  (lshiftrt:TI\n \t    (mult:TI (sign_extend:TI\n-\t\t       (match_operand:DI 1 \"register_operand\" \"%a\"))\n+\t\t       (match_operand:DI 1 \"nonimmediate_operand\" \"%a\"))\n \t\t     (sign_extend:TI\n \t\t       (match_operand:DI 2 \"nonimmediate_operand\" \"rm\")))\n \t    (const_int 64))))\n-   (clobber (match_scratch:DI 3 \"=a\"))\n+   (clobber (match_scratch:DI 3 \"=1\"))\n    (clobber (reg:CC 17))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"imul{q}\\t%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"ppro_uops\" \"few\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"smulsi3_highpart\"\n+(define_expand \"smulsi3_highpart\"\n+  [(parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t\t   (truncate:SI\n+\t\t     (lshiftrt:DI\n+\t\t       (mult:DI (sign_extend:DI\n+\t\t\t\t  (match_operand:SI 1 \"nonimmediate_operand\" \"\"))\n+\t\t\t\t(sign_extend:DI\n+\t\t\t\t  (match_operand:SI 2 \"register_operand\" \"\")))\n+\t\t       (const_int 32))))\n+\t      (clobber (match_scratch:SI 3 \"\"))\n+\t      (clobber (reg:CC 17))])]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"*smulsi3_highpart_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(truncate:SI\n \t  (lshiftrt:DI\n \t    (mult:DI (sign_extend:DI\n-\t\t       (match_operand:SI 1 \"register_operand\" \"%a\"))\n+\t\t       (match_operand:SI 1 \"nonimmediate_operand\" \"%a\"))\n \t\t     (sign_extend:DI\n \t\t       (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n \t    (const_int 32))))\n-   (clobber (match_scratch:SI 3 \"=a\"))\n+   (clobber (match_scratch:SI 3 \"=1\"))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM\"\n   \"imul{l}\\t%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"ppro_uops\" \"few\")\n@@ -7507,13 +7639,14 @@\n \t(zero_extend:DI (truncate:SI\n \t  (lshiftrt:DI\n \t    (mult:DI (sign_extend:DI\n-\t\t       (match_operand:SI 1 \"register_operand\" \"%a\"))\n+\t\t       (match_operand:SI 1 \"nonimmediate_operand\" \"%a\"))\n \t\t     (sign_extend:DI\n \t\t       (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n \t    (const_int 32)))))\n-   (clobber (match_scratch:SI 3 \"=a\"))\n+   (clobber (match_scratch:SI 3 \"=1\"))\n    (clobber (reg:CC 17))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"imul{l}\\t%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"ppro_uops\" \"few\")\n@@ -15975,12 +16108,13 @@\n \n (define_insn \"*minsf_nonieee\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=x#f,f#x\")\n-\t(if_then_else:SF (lt (match_operand:SF 1 \"register_operand\" \"%0,0\")\n+\t(if_then_else:SF (lt (match_operand:SF 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t\t     (match_operand:SF 2 \"nonimmediate_operand\" \"xm#f,f#x\"))\n \t\t\t (match_dup 1)\n \t\t\t (match_dup 2)))\n    (clobber (reg:CC 17))]\n-  \"TARGET_SSE && !TARGET_IEEE_FP\"\n+  \"TARGET_SSE && !TARGET_IEEE_FP\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"#\")\n \n (define_split\n@@ -16057,12 +16191,13 @@\n \n (define_insn \"*mindf_nonieee\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=Y#f,f#Y\")\n-\t(if_then_else:DF (lt (match_operand:DF 1 \"register_operand\" \"%0,0\")\n+\t(if_then_else:DF (lt (match_operand:DF 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t\t     (match_operand:DF 2 \"nonimmediate_operand\" \"Ym#f,f#Y\"))\n \t\t\t (match_dup 1)\n \t\t\t (match_dup 2)))\n    (clobber (reg:CC 17))]\n-  \"TARGET_SSE2 && TARGET_SSE_MATH && !TARGET_IEEE_FP\"\n+  \"TARGET_SSE2 && TARGET_SSE_MATH && !TARGET_IEEE_FP\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"#\")\n \n (define_split\n@@ -16138,12 +16273,13 @@\n \n (define_insn \"*maxsf_nonieee\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=x#f,f#x\")\n-\t(if_then_else:SF (gt (match_operand:SF 1 \"register_operand\" \"%0,0\")\n+\t(if_then_else:SF (gt (match_operand:SF 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t\t     (match_operand:SF 2 \"nonimmediate_operand\" \"xm#f,f#x\"))\n \t\t\t (match_dup 1)\n \t\t\t (match_dup 2)))\n    (clobber (reg:CC 17))]\n-  \"TARGET_SSE && !TARGET_IEEE_FP\"\n+  \"TARGET_SSE && !TARGET_IEEE_FP\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"#\")\n \n (define_split\n@@ -16218,12 +16354,13 @@\n \n (define_insn \"*maxdf_nonieee\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=Y#f,f#Y\")\n-\t(if_then_else:DF (gt (match_operand:DF 1 \"register_operand\" \"%0,0\")\n+\t(if_then_else:DF (gt (match_operand:DF 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t\t     (match_operand:DF 2 \"nonimmediate_operand\" \"Ym#f,f#Y\"))\n \t\t\t (match_dup 1)\n \t\t\t (match_dup 2)))\n    (clobber (reg:CC 17))]\n-  \"TARGET_SSE2 && TARGET_SSE_MATH && !TARGET_IEEE_FP\"\n+  \"TARGET_SSE2 && TARGET_SSE_MATH && !TARGET_IEEE_FP\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"#\")\n \n (define_split\n@@ -18239,17 +18376,19 @@\n \n (define_insn \"sse_andti3\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=x\")\n-        (and:TI (match_operand:TI 1 \"register_operand\" \"%0\")\n+        (and:TI (match_operand:TI 1 \"nonimmediate_operand\" \"%0\")\n \t\t(match_operand:TI 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE && !TARGET_SSE2\"\n+  \"TARGET_SSE && !TARGET_SSE2\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"andps\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sse\")])\n \n (define_insn \"*sse_andti3_sse2\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=x\")\n-        (and:TI (match_operand:TI 1 \"register_operand\" \"%0\")\n+        (and:TI (match_operand:TI 1 \"nonimmediate_operand\" \"%0\")\n \t\t(match_operand:TI 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE2\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"pand\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sse\")])\n \n@@ -18319,17 +18458,19 @@\n \n (define_insn \"sse_iorti3\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=x\")\n-        (ior:TI (match_operand:TI 1 \"register_operand\" \"%0\")\n+        (ior:TI (match_operand:TI 1 \"nonimmediate_operand\" \"%0\")\n \t\t(match_operand:TI 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE && !TARGET_SSE2\"\n+  \"TARGET_SSE && !TARGET_SSE2\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"orps\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sse\")])\n \n (define_insn \"*sse_iorti3_sse2\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=x\")\n-        (ior:TI (match_operand:TI 1 \"register_operand\" \"%0\")\n+        (ior:TI (match_operand:TI 1 \"nonimmediate_operand\" \"%0\")\n \t\t(match_operand:TI 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE2\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"por\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sse\")])\n \n@@ -18367,17 +18508,19 @@\n \n (define_insn \"sse_xorti3\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=x\")\n-        (xor:TI (match_operand:TI 1 \"register_operand\" \"%0\")\n+        (xor:TI (match_operand:TI 1 \"nonimmediate_operand\" \"%0\")\n \t\t(match_operand:TI 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE && !TARGET_SSE2\"\n+  \"TARGET_SSE && !TARGET_SSE2\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"xorps\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sse\")])\n \n (define_insn \"*sse_xorti3_sse2\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=x\")\n-        (xor:TI (match_operand:TI 1 \"register_operand\" \"%0\")\n+        (xor:TI (match_operand:TI 1 \"nonimmediate_operand\" \"%0\")\n \t\t(match_operand:TI 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE2\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"pxor\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sse\")])\n "}]}