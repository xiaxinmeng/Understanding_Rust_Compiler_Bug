{"sha": "c4f81e4a6b4a1ff4774c8836de4a7241c57b278f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRmODFlNGE2YjRhMWZmNDc3NGM4ODM2ZGU0YTcyNDFjNTdiMjc4Zg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-07-25T22:23:09Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-07-25T22:23:09Z"}, "message": "predict.c (estimate_probability): Avoid duplicated predictions.\n\n\t* predict.c (estimate_probability): Avoid duplicated predictions.\n\n\t* loop.c (find_and_verify_loops): Grok multiple barriers.\n\nFrom-SVN: r44369", "tree": {"sha": "bdf6f2181d743e47072722caa34cbf4c83b53189", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdf6f2181d743e47072722caa34cbf4c83b53189"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4f81e4a6b4a1ff4774c8836de4a7241c57b278f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4f81e4a6b4a1ff4774c8836de4a7241c57b278f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4f81e4a6b4a1ff4774c8836de4a7241c57b278f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4f81e4a6b4a1ff4774c8836de4a7241c57b278f/comments", "author": null, "committer": null, "parents": [{"sha": "472385a25f9771ac1171369f7b38d6e8845cc8cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/472385a25f9771ac1171369f7b38d6e8845cc8cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/472385a25f9771ac1171369f7b38d6e8845cc8cf"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "52a3abdfeacb155709d0c14af1201bb6be68154b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f81e4a6b4a1ff4774c8836de4a7241c57b278f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f81e4a6b4a1ff4774c8836de4a7241c57b278f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4f81e4a6b4a1ff4774c8836de4a7241c57b278f", "patch": "@@ -1,3 +1,9 @@\n+Thu Jul 26 00:19:30 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* predict.c (estimate_probability): Avoid duplicated predictions.\n+\n+\t* loop.c (find_and_verify_loops): Grok multiple barriers.\n+\n Wed Jul 25 18:00:05 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* config/alpha/alpha.c (print_operand, case '/'): Don't write '/'."}, {"sha": "3584fe4c91b769717aaeae14e5ee6d85c2743d55", "filename": "gcc/loop.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f81e4a6b4a1ff4774c8836de4a7241c57b278f/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f81e4a6b4a1ff4774c8836de4a7241c57b278f/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=c4f81e4a6b4a1ff4774c8836de4a7241c57b278f", "patch": "@@ -2676,6 +2676,14 @@ find_and_verify_loops (f, loops)\n \t\t  = JUMP_LABEL (insn) ? JUMP_LABEL (insn) : get_last_insn ();\n \t\tstruct loop *target_loop = uid_loop[INSN_UID (target)];\n \t\trtx loc, loc2;\n+\t\trtx tmp;\n+\n+\t\t/* Search for possible garbage past the conditional jumps\n+\t\t   and look for latest barrier.  */\n+\t\tfor (tmp = last_insn_to_move;\n+\t\t     tmp && GET_CODE (tmp) != CODE_LABEL; tmp = NEXT_INSN (tmp))\n+\t\t  if (GET_CODE (tmp) == BARRIER)\n+\t\t    last_insn_to_move = tmp;\n \n \t\tfor (loc = target; loc; loc = PREV_INSN (loc))\n \t\t  if (GET_CODE (loc) == BARRIER"}, {"sha": "de1a1417503b2b13876e2d01dcf2c4309ae94ccd", "filename": "gcc/predict.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f81e4a6b4a1ff4774c8836de4a7241c57b278f/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f81e4a6b4a1ff4774c8836de4a7241c57b278f/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=c4f81e4a6b4a1ff4774c8836de4a7241c57b278f", "patch": "@@ -255,6 +255,7 @@ estimate_probability (loops_info)\n {\n   sbitmap *dominators, *post_dominators;\n   int i;\n+  int found_noreturn = 0;\n \n   dominators = sbitmap_vector_alloc (n_basic_blocks, n_basic_blocks);\n   post_dominators = sbitmap_vector_alloc (n_basic_blocks, n_basic_blocks);\n@@ -309,9 +310,15 @@ estimate_probability (loops_info)\n       /* If block has no sucessor, predict all possible paths to\n          it as improbable, as the block contains a call to a noreturn\n \t function and thus can be executed only once.  */\n-      if (bb->succ == NULL)\n+      if (bb->succ == NULL && !found_noreturn)\n \t{\n \t  int y;\n+\n+\t  /* ??? Postdominator claims each noreturn block to be postdominated\n+\t     by each, so we need to run only once.  This needs to be changed\n+\t     once postdominace algorithm is updated to say something more sane.\n+\t     */\n+\t  found_noreturn = 1;\n \t  for (y = 0; y < n_basic_blocks; y++)\n \t    if (!TEST_BIT (post_dominators[y], i))\n \t      {"}]}