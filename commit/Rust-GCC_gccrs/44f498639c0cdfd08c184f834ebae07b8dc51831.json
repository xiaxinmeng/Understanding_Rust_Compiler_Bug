{"sha": "44f498639c0cdfd08c184f834ebae07b8dc51831", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRmNDk4NjM5YzBjZGZkMDhjMTg0ZjgzNGViYWUwN2I4ZGM1MTgzMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-06-22T23:19:22Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-06-22T23:19:22Z"}, "message": "predict.c (block_info_def): Add nvisited.\n\n\t* predict.c (block_info_def): Add nvisited.\n\t(propagate_freq): Count nvisited; re-queue delayed blocks; handle\n\tirreducible regions.\n\n\t* flow.c (dump_edge_info): Dump the probability of edge.\n\t(combine_predictions_for_insn): Dump the basic block.\n\nFrom-SVN: r43522", "tree": {"sha": "c3b8dc5d3334900b7a57bc7c6d62b8c578b99af6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3b8dc5d3334900b7a57bc7c6d62b8c578b99af6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44f498639c0cdfd08c184f834ebae07b8dc51831", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44f498639c0cdfd08c184f834ebae07b8dc51831", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44f498639c0cdfd08c184f834ebae07b8dc51831", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44f498639c0cdfd08c184f834ebae07b8dc51831/comments", "author": null, "committer": null, "parents": [{"sha": "c6922dda98f68745808490b6bad4fbde131c96a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6922dda98f68745808490b6bad4fbde131c96a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6922dda98f68745808490b6bad4fbde131c96a1"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "48cffe464051531a07310f26e76160615dc0777a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f498639c0cdfd08c184f834ebae07b8dc51831/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f498639c0cdfd08c184f834ebae07b8dc51831/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44f498639c0cdfd08c184f834ebae07b8dc51831", "patch": "@@ -1,3 +1,12 @@\n+Sat Jun 23 01:16:42 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* predict.c (block_info_def): Add nvisited.\n+\t(propagate_freq): Count nvisited; re-queue delayed blocks; handle\n+\tirreducible regions.\n+\n+\t* flow.c (dump_edge_info): Dump the probability of edge.\n+\t(combine_predictions_for_insn): Dump the basic block.\n+\n 2001-06-22  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* doc/gcc.texi: Update documentation of source files of C"}, {"sha": "5c0c6d72ad40cae6b9e384a629d0146a7a34affe", "filename": "gcc/flow.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f498639c0cdfd08c184f834ebae07b8dc51831/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f498639c0cdfd08c184f834ebae07b8dc51831/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=44f498639c0cdfd08c184f834ebae07b8dc51831", "patch": "@@ -6405,6 +6405,9 @@ dump_edge_info (file, e, do_succ)\n   else\n     fprintf (file, \" %d\", side->index);\n \n+  if (e->probability)\n+    fprintf (file, \" [%.1f%%] \", e->probability * 100.0 / REG_BR_PROB_BASE);\n+\n   if (e->count)\n     {\n       fprintf (file, \" count:\");"}, {"sha": "2bf13b3c537883fbbb591e92c9656f262c0e41bf", "filename": "gcc/predict.c", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f498639c0cdfd08c184f834ebae07b8dc51831/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f498639c0cdfd08c184f834ebae07b8dc51831/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=44f498639c0cdfd08c184f834ebae07b8dc51831", "patch": "@@ -215,7 +215,8 @@ combine_predictions_for_insn (insn, bb)\n   int best_predictor = END_PREDICTORS;\n \n   if (rtl_dump_file)\n-    fprintf (rtl_dump_file, \"Predictions for insn %i\\n\", INSN_UID (insn));\n+    fprintf (rtl_dump_file, \"Predictions for insn %i bb %i\\n\", INSN_UID (insn),\n+\t     bb->index);\n \n   /* We implement \"first match\" heuristics and use probability guessed\n      by predictor with smallest index.  In future we will use better\n@@ -541,6 +542,10 @@ typedef struct block_info_def\n \n   /* True if block already converted.  */\n   int visited:1;\n+\n+  /* Number of block proceeded before adding basic block to the queue.  Used\n+     to recognize irregular regions.  */\n+  int nvisited;\n } *block_info;\n \n /* Similar information for edges.  */\n@@ -567,6 +572,7 @@ propagate_freq (head)\n   basic_block last = bb;\n   edge e;\n   basic_block nextbb;\n+  int nvisited = 0;\n \n   BLOCK_INFO (head)->frequency = 1;\n   for (; bb; bb = nextbb)\n@@ -581,12 +587,39 @@ propagate_freq (head)\n \t{\n \t  for (e = bb->pred; e; e = e->pred_next)\n \t    if (!BLOCK_INFO (e->src)->visited && !EDGE_INFO (e)->back_edge)\n+\t      break;\n+\n+\t  /* We didn't proceeded all predecesors of edge e yet.  These may\n+\t     be waiting in the queue or we may hit irreducible region.\n+\n+\t     To avoid infinite looping on irrecudible regions, count number\n+\t     of block proceeded at the time basic block has been queued.  In the\n+\t     case number didn't changed, we've hit irreducible region and we\n+\t     forget the backward edge.  This can increase time complexity\n+\t     by the number of irreducible blocks, but in same way standard the\n+\t     loop does, so it should not result in noticeable slowodwn.\n+\n+\t     Alternativly we may distinquish backward and cross edges in the\n+\t     DFS tree by preprocesing pass and ignore existence of non-loop\n+\t     backward edges.  */\n+\t  if (e && BLOCK_INFO (bb)->nvisited != nvisited)\n+\t    {\n+\t      if (!nextbb)\n+\t\tnextbb = e->dest;\n+\t      else\n+\t\tBLOCK_INFO (last)->next = e->dest;\n+\t      BLOCK_INFO (last)->nvisited = nvisited;\n+\t      last = e->dest;\n \t      continue;\n+\t    }\n+\t  else if (e && rtl_dump_file)\n+\t    fprintf (rtl_dump_file, \"Irreducible region hit, ignoring edge to bb %i\\n\",\n+\t\t     bb->index);\n \n \t  for (e = bb->pred; e; e = e->pred_next)\n \t    if (EDGE_INFO (e)->back_edge)\n \t      cyclic_probability += EDGE_INFO (e)->back_edge_prob;\n-\t    else\n+\t    else if (BLOCK_INFO (e->src)->visited)\n \t      frequency += (e->probability\n \t\t\t    * BLOCK_INFO (e->src)->frequency /\n \t\t\t    REG_BR_PROB_BASE);\n@@ -616,8 +649,10 @@ propagate_freq (head)\n \t      nextbb = e->dest;\n \t    else\n \t      BLOCK_INFO (last)->next = e->dest;\n+\t    BLOCK_INFO (last)->nvisited = nvisited;\n \t    last = e->dest;\n \t  }\n+      nvisited ++;\n     }\n }\n "}]}