{"sha": "0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYzZDI3ZjAxYTVkODZiM2Y3YTkzMjNkMmI3ZmUxYWExMWY2YWQyYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-12-12T15:58:49Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-12-12T15:58:49Z"}, "message": "re PR libstdc++/64276 (would be better to use __cpp_exceptions rather than __EXCEPTIONS to determine whether exceptions are available)\n\n\tPR libstdc++/64276\n\t* doc/doxygen/user.cfg.in: Define __cpp_exceptions and __cpp_rtti.\n\t* doc/html/manual/using_exceptions.html: Regenerate.\n\t* doc/xml/manual/using_exceptions.xml: Use SD-6 feature-testing\n\tmacros, __cpp_exceptions and __cpp_rtti, instead of __EXCEPTIONS and\n\t__GXX_RTTI.\n\t* include/bits/c++config: Likewise.\n\t* include/bits/locale_classes.tcc: Likewise.\n\t* include/bits/shared_ptr.h: Likewise.\n\t* include/bits/shared_ptr_base.h: Likewise.\n\t* include/debug/formatter.h: Likewise.\n\t* include/experimental/any: Likewise.\n\t* include/ext/rope: Likewise.\n\t* include/ext/ropeimpl.h: Likewise.\n\t* include/std/functional: Likewise.\n\t* include/tr1/functional: Likewise.\n\t* include/tr1/shared_ptr.h: Likewise.\n\t* libsupc++/eh_call.cc: Likewise.\n\t* libsupc++/eh_personality.cc: Likewise.\n\t* libsupc++/exception_defines.h: Likewise.\n\t* libsupc++/exception_ptr.h: Likewise.\n\t* libsupc++/guard.cc: Likewise.\n\t* libsupc++/pbase_type_info.cc: Likewise.\n\t* libsupc++/pointer_type_info.cc: Likewise.\n\t* libsupc++/vterminate.cc: Likewise.\n\t* src/c++11/thread.cc: Likewise.\n\nFrom-SVN: r218679", "tree": {"sha": "a9b9668f40f36dc496d6b038eeb7f0d316b8f099", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9b9668f40f36dc496d6b038eeb7f0d316b8f099"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4db4954fc5495758817fdc8c0dc3d29f82509589", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4db4954fc5495758817fdc8c0dc3d29f82509589", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4db4954fc5495758817fdc8c0dc3d29f82509589"}], "stats": {"total": 141, "additions": 84, "deletions": 57}, "files": [{"sha": "7c3910362a3c7dabe121d9967a605fae93cbb89c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "patch": "@@ -5,6 +5,33 @@\n \tdisabled.\n \t* testsuite/18_support/exception_ptr/64241.cc: New.\n \n+\tPR libstdc++/64276\n+\t* doc/doxygen/user.cfg.in: Define __cpp_exceptions and __cpp_rtti.\n+\t* doc/html/manual/using_exceptions.html: Regenerate.\n+\t* doc/xml/manual/using_exceptions.xml: Use SD-6 feature-testing\n+\tmacros, __cpp_exceptions and __cpp_rtti, instead of __EXCEPTIONS and\n+\t__GXX_RTTI.\n+\t* include/bits/c++config: Likewise.\n+\t* include/bits/locale_classes.tcc: Likewise.\n+\t* include/bits/shared_ptr.h: Likewise.\n+\t* include/bits/shared_ptr_base.h: Likewise.\n+\t* include/debug/formatter.h: Likewise.\n+\t* include/experimental/any: Likewise.\n+\t* include/ext/rope: Likewise.\n+\t* include/ext/ropeimpl.h: Likewise.\n+\t* include/std/functional: Likewise.\n+\t* include/tr1/functional: Likewise.\n+\t* include/tr1/shared_ptr.h: Likewise.\n+\t* libsupc++/eh_call.cc: Likewise.\n+\t* libsupc++/eh_personality.cc: Likewise.\n+\t* libsupc++/exception_defines.h: Likewise.\n+\t* libsupc++/exception_ptr.h: Likewise.\n+\t* libsupc++/guard.cc: Likewise.\n+\t* libsupc++/pbase_type_info.cc: Likewise.\n+\t* libsupc++/pointer_type_info.cc: Likewise.\n+\t* libsupc++/vterminate.cc: Likewise.\n+\t* src/c++11/thread.cc: Likewise.\n+\n 2014-12-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/stl_iterator.h (make_reverse_iterator): LWG DR 2285."}, {"sha": "019462e92ad7d8b46ed0ec580691292f2f63e21d", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "patch": "@@ -2142,8 +2142,8 @@ PREDEFINED             = __cplusplus=201103L \\\n                          _GLIBCXX_USE_C99_STDINT_TR1 \\\n                          _GLIBCXX_USE_SCHED_YIELD \\\n                          _GLIBCXX_USE_NANOSLEEP \\\n-                         __EXCEPTIONS \\\n-                         __GXX_RTTI \\\n+                         __cpp_exceptions \\\n+                         __cpp_rtti \\\n                          ATOMIC_INT_LOCK_FREE \\\n                          PB_DS_DATA_TRUE_INDICATOR \\\n                          PB_DS_STATIC_ASSERT=// \\"}, {"sha": "f1dd0996758f14a86ce204bc6641fe97ec2f456a", "filename": "libstdc++-v3/doc/html/manual/using_exceptions.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing_exceptions.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing_exceptions.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing_exceptions.html?ref=0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "patch": "@@ -151,7 +151,7 @@\n     and <code class=\"literal\">__throw_exception_again</code>. They are defined\n     as follows.\n   </p><pre class=\"programlisting\">\n-#ifdef __EXCEPTIONS\n+#if __cpp_exceptions\n # define __try      try\n # define __catch(X) catch(X)\n # define __throw_exception_again throw\n@@ -165,7 +165,7 @@\n   class <code class=\"classname\">exception</code>, there exists a corresponding\n   function with C language linkage. An example:\n </p><pre class=\"programlisting\">\n-#ifdef __EXCEPTIONS\n+#if __cpp_exceptions\n   void __throw_bad_exception(void)\n   { throw bad_exception(); }\n #else\n@@ -310,4 +310,4 @@\n \t<a class=\"link\" href=\"http://gcc.gnu.org/PR25191\" target=\"_top\">\n       GCC Bug 25191: exception_defines.h #defines try/catch\n \t</a>\n-      </em>. </span></p></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"using_concurrency.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"using.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"debug.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Concurrency\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../index.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Debugging Support</td></tr></table></div></body></html>\n\\ No newline at end of file\n+      </em>. </span></p></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"using_concurrency.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"using.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"debug.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Concurrency\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../index.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Debugging Support</td></tr></table></div></body></html>"}, {"sha": "840c12b972b3a3138304bb621b13e338482f1377", "filename": "libstdc++-v3/doc/xml/manual/using_exceptions.xml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing_exceptions.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing_exceptions.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing_exceptions.xml?ref=0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "patch": "@@ -251,7 +251,7 @@ exception neutrality and exception safety.\n   </para>\n \n <programlisting>\n-#ifdef __EXCEPTIONS\n+#if __cpp_exceptions\n # define __try      try\n # define __catch(X) catch(X)\n # define __throw_exception_again throw\n@@ -269,7 +269,7 @@ exception neutrality and exception safety.\n </para>\n \n <programlisting>\n-#ifdef __EXCEPTIONS\n+#if __cpp_exceptions\n   void __throw_bad_exception(void)\n   { throw bad_exception(); }\n #else"}, {"sha": "337f1e51c634dd801e065d2afdcd469dc17f60a6", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "patch": "@@ -121,7 +121,7 @@\n #endif\n \n #ifndef _GLIBCXX_THROW_OR_ABORT\n-# if __EXCEPTIONS\n+# if __cpp_exceptions\n #  define _GLIBCXX_THROW_OR_ABORT(_EXC) (throw (_EXC))\n # else\n #  define _GLIBCXX_THROW_OR_ABORT(_EXC) (__builtin_abort())"}, {"sha": "9ca324103e2dd5d7e29b3db434afbaa4613443b8", "filename": "libstdc++-v3/include/bits/locale_classes.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc?ref=0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "patch": "@@ -106,7 +106,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const size_t __i = _Facet::id._M_id();\n       const locale::facet** __facets = __loc._M_impl->_M_facets;\n       return (__i < __loc._M_impl->_M_facets_size\n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n \t      && dynamic_cast<const _Facet*>(__facets[__i]));\n #else\n               && static_cast<const _Facet*>(__facets[__i]));\n@@ -135,7 +135,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const locale::facet** __facets = __loc._M_impl->_M_facets;\n       if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])\n         __throw_bad_cast();\n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n       return dynamic_cast<const _Facet&>(*__facets[__i]);\n #else\n       return static_cast<const _Facet&>(*__facets[__i]);"}, {"sha": "59f8567c20be7a63caec17d1663811a152b610e3", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "patch": "@@ -75,7 +75,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline _Del*\n     get_deleter(const __shared_ptr<_Tp, _Lp>& __p) noexcept\n     {\n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n       return static_cast<_Del*>(__p._M_get_deleter(typeid(_Del)));\n #else\n       return 0;"}, {"sha": "737a1a2553fd56145a721f37674add32cffba65b", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "patch": "@@ -476,7 +476,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       virtual void*\n       _M_get_deleter(const std::type_info& __ti) noexcept\n       {\n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 2400. shared_ptr's get_deleter() should use addressof()\n         return __ti == typeid(_Deleter)\n@@ -544,7 +544,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       virtual void*\n       _M_get_deleter(const std::type_info& __ti) noexcept\n       {\n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n \tif (__ti == typeid(_Sp_make_shared_tag))\n \t  return const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());\n #endif\n@@ -1087,7 +1087,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \towner_before(__weak_ptr<_Tp1, _Lp> const& __rhs) const\n \t{ return _M_refcount._M_less(__rhs._M_refcount); }\n \n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n     protected:\n       // This constructor is non-standard, it is used by allocate_shared.\n       template<typename _Alloc, typename... _Args>"}, {"sha": "78386c2712d329a7b60a442d585cb62e8f794dcd", "filename": "libstdc++-v3/include/debug/formatter.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h?ref=0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "patch": "@@ -218,7 +218,7 @@ namespace __gnu_debug\n         {\n \t  _M_variant._M_iterator._M_name = __name;\n \t  _M_variant._M_iterator._M_address = &__it;\n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n \t  _M_variant._M_iterator._M_type = &typeid(__it);\n #else\n \t  _M_variant._M_iterator._M_type = 0;\n@@ -228,7 +228,7 @@ namespace __gnu_debug\n \t                    typename _Sequence::iterator>::\n \t      __value ? __mutable_iterator : __const_iterator;\n \t  _M_variant._M_iterator._M_sequence = __it._M_get_sequence();\n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n \t  _M_variant._M_iterator._M_seq_type = &typeid(_Sequence);\n #else\n \t  _M_variant._M_iterator._M_seq_type = 0;\n@@ -256,7 +256,7 @@ namespace __gnu_debug\n \t{\n \t  _M_variant._M_iterator._M_name = __name;\n \t  _M_variant._M_iterator._M_address = &__it;\n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n \t  _M_variant._M_iterator._M_type = &typeid(__it);\n #else\n \t  _M_variant._M_iterator._M_type = 0;\n@@ -266,7 +266,7 @@ namespace __gnu_debug\n \t                    typename _Sequence::local_iterator>::\n \t      __value ? __mutable_iterator : __const_iterator;\n \t  _M_variant._M_iterator._M_sequence = __it._M_get_sequence();\n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n \t  _M_variant._M_iterator._M_seq_type = &typeid(_Sequence);\n #else\n \t  _M_variant._M_iterator._M_seq_type = 0;\n@@ -291,7 +291,7 @@ namespace __gnu_debug\n         {\n \t  _M_variant._M_iterator._M_name = __name;\n \t  _M_variant._M_iterator._M_address = &__it;\n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n \t  _M_variant._M_iterator._M_type = &typeid(__it);\n #else\n \t  _M_variant._M_iterator._M_type = 0;\n@@ -308,7 +308,7 @@ namespace __gnu_debug\n         {\n \t  _M_variant._M_iterator._M_name = __name;\n \t  _M_variant._M_iterator._M_address = &__it;\n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n \t  _M_variant._M_iterator._M_type = &typeid(__it);\n #else\n \t  _M_variant._M_iterator._M_type = 0;\n@@ -325,7 +325,7 @@ namespace __gnu_debug\n         {\n \t  _M_variant._M_iterator._M_name = __name;\n \t  _M_variant._M_iterator._M_address = &__it;\n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n \t  _M_variant._M_iterator._M_type = &typeid(__it);\n #else\n \t  _M_variant._M_iterator._M_type = 0;\n@@ -345,7 +345,7 @@ namespace __gnu_debug\n \t  _M_variant._M_sequence._M_name = __name;\n \t  _M_variant._M_sequence._M_address =\n \t    static_cast<const _Sequence*>(&__seq);\n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n \t  _M_variant._M_sequence._M_type = &typeid(_Sequence);\n #else\n \t  _M_variant._M_sequence._M_type = 0;\n@@ -358,7 +358,7 @@ namespace __gnu_debug\n         {\n \t  _M_variant._M_sequence._M_name = __name;\n \t  _M_variant._M_sequence._M_address = &__seq;\n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n \t  _M_variant._M_sequence._M_type = &typeid(_Sequence);\n #else\n \t  _M_variant._M_sequence._M_type = 0;"}, {"sha": "87dd7a16019f75a78a3c30f1c80bc6c4626e01ff", "filename": "libstdc++-v3/include/experimental/any", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany?ref=0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "patch": "@@ -74,7 +74,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   [[gnu::noreturn]] inline void __throw_bad_any_cast()\n   {\n-#ifdef __EXCEPTIONS\n+#if __cpp_exceptions\n     throw bad_any_cast{};\n #else\n     __builtin_abort();\n@@ -111,7 +111,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t     _Manager_internal<_Tp>,\n \t\t\t\t     _Manager_external<_Tp>>;\n \n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n     // When RTTI is disabled __any_caster assumes the manager is either\n     // _Manager_internal or _Manager_external, so this type must not be used.\n     template<typename _Tp, typename _Alloc>\n@@ -169,7 +169,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template <typename _Allocator>\n       any(allocator_arg_t, const _Allocator&) noexcept : any() { }\n \n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n     /// Construct with a copy of @p __value as the contained object.\n     template <typename _Allocator, typename _ValueType,\n \t      typename _Tp = _Decay<_ValueType>,\n@@ -249,7 +249,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     /// Reports whether there is a contained object or not.\n     bool empty() const noexcept { return _M_manager == nullptr; }\n \n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n     /// The @c typeid of the contained object, or @c typeid(void) if empty.\n     const type_info& type() const noexcept\n     {\n@@ -281,7 +281,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _Tp>\n       friend void* __any_caster(const any* __any)\n       {\n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n \tif (__any->type() != typeid(_Tp))\n \t  return nullptr;\n #else\n@@ -335,7 +335,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n       };\n \n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n     // Manage external contained object using an allocator\n     template<typename _Tp, typename _Alloc>\n       struct _Manager_alloc\n@@ -446,7 +446,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n   // @}\n \n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n   template<typename _Tp, typename _Alloc>\n     struct any::_Manager_alloc<_Tp, _Alloc>::_Data\n     {\n@@ -524,7 +524,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__arg->_M_obj = const_cast<_Tp*>(__ptr);\n \tbreak;\n       case _Op_get_type_info:\n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n \t__arg->_M_typeinfo = &typeid(_Tp);\n #endif\n \tbreak;\n@@ -550,7 +550,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__arg->_M_obj = const_cast<_Tp*>(__ptr);\n \tbreak;\n       case _Op_get_type_info:\n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n \t__arg->_M_typeinfo = &typeid(_Tp);\n #endif\n \tbreak;\n@@ -563,7 +563,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     }\n \n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n   template<typename _Tp, typename _Alloc>\n     void\n     any::_Manager_alloc<_Tp, _Alloc>::"}, {"sha": "28593c8789ba9b3d86eca015930ab3c7963b89a3", "filename": "libstdc++-v3/include/ext/rope", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope?ref=0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "patch": "@@ -923,7 +923,7 @@ protected:\n \n       ~_Rope_self_destruct_ptr()\n       { _Rope_RopeRep<_CharT, _Alloc>::_S_unref(_M_ptr); }\n-#ifdef __EXCEPTIONS\n+#if __cpp_exceptions\n       _Rope_self_destruct_ptr() : _M_ptr(0) { };\n #else\n       _Rope_self_destruct_ptr() { };"}, {"sha": "935f4ef947aeefa3af547164662d1b2dc8da25c4", "filename": "libstdc++-v3/include/ext/ropeimpl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h?ref=0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "patch": "@@ -1223,7 +1223,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \t\t__result = _S_concat(__forest[__i], __result);\n \t\t__forest[__i]->_M_unref_nonnil();\n-#if !defined(__GC) && defined(__EXCEPTIONS)\n+#if !defined(__GC) && __cpp_exceptions\n \t\t__forest[__i] = 0;\n #endif\n \t      }"}, {"sha": "5f76766490a7019fb631454166fb37b1df1ef931", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "patch": "@@ -1733,7 +1733,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \t{\n \t  switch (__op)\n \t    {\n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n \t    case __get_type_info:\n \t      __dest._M_access<const type_info*>() = &typeid(_Functor);\n \t      break;\n@@ -1799,7 +1799,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \t{\n \t  switch (__op)\n \t    {\n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n \t    case __get_type_info:\n \t      __dest._M_access<const type_info*>() = &typeid(_Functor);\n \t      break;\n@@ -1936,7 +1936,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n       {\n \tswitch (__op)\n \t  {\n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n \t  case __get_type_info:\n \t    __dest._M_access<const type_info*>() = &typeid(_Functor);\n \t    break;\n@@ -2198,7 +2198,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n        */\n       _Res operator()(_ArgTypes... __args) const;\n \n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n       // [3.7.2.5] function target access\n       /**\n        *  @brief Determine the type of the target of this function object\n@@ -2271,7 +2271,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n       return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);\n     }\n \n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n   template<typename _Res, typename... _ArgTypes>\n     const type_info&\n     function<_Res(_ArgTypes...)>::"}, {"sha": "90ded0b97ed314feadd8ac6884c489895f0a4557", "filename": "libstdc++-v3/include/tr1/functional", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional?ref=0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "patch": "@@ -1659,7 +1659,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{\n \t  switch (__op)\n \t    {\n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n \t    case __get_type_info:\n \t      __dest._M_access<const type_info*>() = &typeid(_Functor);\n \t      break;\n@@ -1725,7 +1725,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{\n \t  switch (__op)\n \t    {\n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n \t    case __get_type_info:\n \t      __dest._M_access<const type_info*>() = &typeid(_Functor);\n \t      break;\n@@ -1859,7 +1859,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n         switch (__op)\n \t  {\n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n \t  case __get_type_info:\n \t    __dest._M_access<const type_info*>() = &typeid(_Functor);\n \t    break;\n@@ -2066,7 +2066,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        */\n       _Res operator()(_ArgTypes... __args) const;\n \n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n       // [3.7.2.5] function target access\n       /**\n        *  @brief Determine the type of the target of this function object\n@@ -2146,7 +2146,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return _M_invoker(_M_functor, __args...);\n     }\n \n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n   template<typename _Res, typename... _ArgTypes>\n     const type_info&\n     function<_Res(_ArgTypes...)>::"}, {"sha": "13ea0f603483c69e04b6ed1b52514b726b42a7bb", "filename": "libstdc++-v3/include/tr1/shared_ptr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fshared_ptr.h?ref=0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "patch": "@@ -259,7 +259,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       virtual void*\n       _M_get_deleter(const std::type_info& __ti)\n       {\n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n         return __ti == typeid(_Deleter) ? &_M_del : 0;\n #else\n         return 0;\n@@ -788,7 +788,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline _Del*\n     get_deleter(const __shared_ptr<_Tp, _Lp>& __p)\n     {\n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n       return static_cast<_Del*>(__p._M_get_deleter(typeid(_Del)));\n #else\n       return 0;"}, {"sha": "d204ddb49c84987895cad8d8aee14286292d844a", "filename": "libstdc++-v3/libsupc++/eh_call.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_call.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_call.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_call.cc?ref=0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "patch": "@@ -149,7 +149,7 @@ __cxa_call_unexpected(void* exc_obj_in)\n \t}\n \n       // If the exception spec allows std::bad_exception, throw that.\n-#ifdef __EXCEPTIONS\n+#if __cpp_exceptions\n       if (bad_exception_allowed)\n \tthrow std::bad_exception();\n #endif"}, {"sha": "915f9ae189b37ab9638909418cd18058a31b319f", "filename": "libstdc++-v3/libsupc++/eh_personality.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc?ref=0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "patch": "@@ -551,7 +551,7 @@ PERSONALITY_FUNCTION (int version,\n       else if (!foreign_exception)\n \tthrown_ptr = __get_object_from_ue (ue_header);\n #else\n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n       // During forced unwinding, match a magic exception type.\n       if (actions & _UA_FORCE_UNWIND)\n \t{\n@@ -777,7 +777,7 @@ __cxa_call_unexpected (void *exc_obj_in)\n       // If the exception spec allows std::bad_exception, throw that.\n       // We don't have a thrown object to compare against, but since\n       // bad_exception doesn't have virtual bases, that's OK; just pass 0.\n-#if defined(__EXCEPTIONS) && defined(__GXX_RTTI)\n+#if __cpp_exceptions && __cpp_rtti\n       const std::type_info &bad_exc = typeid (std::bad_exception);\n       if (check_exception_spec (&info, &bad_exc, 0, xh_switch_value))\n \tthrow std::bad_exception();"}, {"sha": "768c14296e9d8f0b01c1ee1900a68ba33759d4f8", "filename": "libstdc++-v3/libsupc++/exception_defines.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_defines.h?ref=0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "patch": "@@ -30,7 +30,7 @@\n #ifndef _EXCEPTION_DEFINES_H\n #define _EXCEPTION_DEFINES_H 1\n \n-#ifndef __EXCEPTIONS\n+#if ! __cpp_exceptions\n // Iff -fno-exceptions, transform error handling code to work without it.\n # define __try      if (true)\n # define __catch(X) if (false)"}, {"sha": "7775278d52b1598abb9f6ddfdcbe1cd416233cc7", "filename": "libstdc++-v3/libsupc++/exception_ptr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h?ref=0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "patch": "@@ -168,7 +168,7 @@ namespace std\n     exception_ptr \n     make_exception_ptr(_Ex __ex) _GLIBCXX_USE_NOEXCEPT\n     {\n-#ifdef __EXCEPTIONS\n+#if __cpp_exceptions\n       try\n \t{\n \t  throw __ex;"}, {"sha": "3f9c7a6a1935c584729e74c422796309e0c41aa5", "filename": "libstdc++-v3/libsupc++/guard.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc?ref=0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "patch": "@@ -203,7 +203,7 @@ namespace __cxxabiv1\n   static inline void\n   throw_recursive_init_exception()\n   {\n-#ifdef __EXCEPTIONS\n+#if __cpp_exceptions\n \tthrow __gnu_cxx::recursive_init_error();\n #else\n \t// Use __builtin_trap so we don't require abort()."}, {"sha": "4bd8b9f52800a449673a3fb820d12fae7d781d84", "filename": "libstdc++-v3/libsupc++/pbase_type_info.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpbase_type_info.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpbase_type_info.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpbase_type_info.cc?ref=0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "patch": "@@ -37,7 +37,7 @@ __do_catch (const type_info *thr_type,\n   if (*this == *thr_type)\n     return true;      // same type\n \n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n   if (typeid (*this) != typeid (*thr_type))\n     return false;     // not both same kind of pointers\n #endif"}, {"sha": "61cff0c86402cd7543e9dcdda670744636e54c25", "filename": "libstdc++-v3/libsupc++/pointer_type_info.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpointer_type_info.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpointer_type_info.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpointer_type_info.cc?ref=0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "patch": "@@ -40,7 +40,7 @@ __pointer_catch (const __pbase_type_info *thrown_type,\n                  void **thr_obj,\n                  unsigned outer) const\n {\n-#ifdef __GXX_RTTI\n+#if __cpp_rtti\n   if (outer < 2 && *__pointee == typeid (void))\n     {\n       // conversion to void"}, {"sha": "7a4c49bce251a94b4fefd169d4a5cb87f5ddd37a", "filename": "libstdc++-v3/libsupc++/vterminate.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvterminate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvterminate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvterminate.cc?ref=0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "patch": "@@ -78,7 +78,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t// If the exception is derived from std::exception, we can\n \t// give more information.\n \t__try { __throw_exception_again; }\n-#ifdef __EXCEPTIONS\n+#if __cpp_exceptions\n \t__catch(const exception& exc)\n \t  {\n \t    char const *w = exc.what();"}, {"sha": "2c89d03ed901abbcd2bf288b25c397735f6834f3", "filename": "libstdc++-v3/src/c++11/thread.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fthread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fthread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fthread.cc?ref=0f3d27f01a5d86b3f7a9323d2b7fe1aa11f6ad2b", "patch": "@@ -130,7 +130,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   thread::_M_start_thread(__shared_base_type __b)\n   {\n     if (!__gthread_active_p())\n-#if __EXCEPTIONS\n+#if __cpp_exceptions\n       throw system_error(make_error_code(errc::operation_not_permitted),\n \t\t\t \"Enable multithreading to use std::thread\");\n #else"}]}