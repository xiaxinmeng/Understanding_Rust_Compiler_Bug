{"sha": "f2b00d2ba461d6dafdeccf6d93828b349b5e7f76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJiMDBkMmJhNDYxZDZkYWZkZWNjZjZkOTM4MjhiMzQ5YjVlN2Y3Ng==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2019-06-03T11:28:28Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2019-06-03T11:28:28Z"}, "message": "tree-vrp.h (value_range_base::nonzero_p): New.\n\n\t* tree-vrp.h (value_range_base::nonzero_p): New.\n\t(value_range_base::set_nonnull): Rename to...\n\t(value_range_base::set_nonzero): ...this.\n\t(value_range_base::set_null): Rename to...\n\t(value_range_base::set_zero): ...this.\n\t(value_range::set_nonnull): Remove.\n\t(value_range::set_null): Remove.\n\t* tree-vrp.c (range_is_null): Remove.\n\t(range_is_nonnull): Remove.\n\t(extract_range_from_binary_expr): Use value_range_base::*zero_p\n\tinstead of range_is_*null.\n\t(extract_range_from_unary_expr): Same.\n\t(value_range_base::set_nonnull): Rename to...\n\t(value_range_base::set_nonzero): ...this.\n\t(value_range::set_nonnull): Remove.\n\t(value_range_base::set_null): Rename to...\n\t(value_range_base::set_zero): ...this.\n\t(value_range::set_null): Remove.\n\t(extract_range_from_binary_expr): Rename set_*null uses to\n\tset_*zero.\n\t(extract_range_from_unary_expr): Same.\n\t(union_helper): Same.\n\t* vr-values.c (get_value_range): Use set_*zero instead of\n\tset_*null.\n\t(vr_values::extract_range_from_binary_expr): Same.\n\t(vr_values::extract_range_basic): Same.\n\nFrom-SVN: r271865", "tree": {"sha": "207b3e75858642d677836e0e269fe0285e6eead6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/207b3e75858642d677836e0e269fe0285e6eead6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2b00d2ba461d6dafdeccf6d93828b349b5e7f76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2b00d2ba461d6dafdeccf6d93828b349b5e7f76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2b00d2ba461d6dafdeccf6d93828b349b5e7f76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2b00d2ba461d6dafdeccf6d93828b349b5e7f76/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49f3f450046a63b5de61be28eb6023d86e0c950e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49f3f450046a63b5de61be28eb6023d86e0c950e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49f3f450046a63b5de61be28eb6023d86e0c950e"}], "stats": {"total": 141, "additions": 81, "deletions": 60}, "files": [{"sha": "b4c38d6ea9546a0da1ec0048c146e424c2c4cc1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b00d2ba461d6dafdeccf6d93828b349b5e7f76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b00d2ba461d6dafdeccf6d93828b349b5e7f76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2b00d2ba461d6dafdeccf6d93828b349b5e7f76", "patch": "@@ -1,3 +1,31 @@\n+2019-06-03  Aldy Hernandez  <aldyh@redhat.com>\n+\t* tree-vrp.h (value_range_base::nonzero_p): New.\n+\t(value_range_base::set_nonnull): Rename to...\n+\t(value_range_base::set_nonzero): ...this.\n+\t(value_range_base::set_null): Rename to...\n+\t(value_range_base::set_zero): ...this.\n+\t(value_range::set_nonnull): Remove.\n+\t(value_range::set_null): Remove.\n+\t* tree-vrp.c (range_is_null): Remove.\n+\t(range_is_nonnull): Remove.\n+\t(extract_range_from_binary_expr): Use value_range_base::*zero_p\n+\tinstead of range_is_*null.\n+\t(extract_range_from_unary_expr): Same.\n+\t(value_range_base::set_nonnull): Rename to...\n+\t(value_range_base::set_nonzero): ...this.\n+\t(value_range::set_nonnull): Remove.\n+\t(value_range_base::set_null): Rename to...\n+\t(value_range_base::set_zero): ...this.\n+\t(value_range::set_null): Remove.\n+\t(extract_range_from_binary_expr): Rename set_*null uses to\n+\tset_*zero.\n+\t(extract_range_from_unary_expr): Same.\n+\t(union_helper): Same.\n+\t* vr-values.c (get_value_range): Use set_*zero instead of\n+\tset_*null.\n+\t(vr_values::extract_range_from_binary_expr): Same.\n+\t(vr_values::extract_range_basic): Same.\n+\n 2019-06-03  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \tPR driver/90684"}, {"sha": "fdda64c30d55b0123b3762f652494170e9b5d598", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 22, "deletions": 51, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b00d2ba461d6dafdeccf6d93828b349b5e7f76/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b00d2ba461d6dafdeccf6d93828b349b5e7f76/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=f2b00d2ba461d6dafdeccf6d93828b349b5e7f76", "patch": "@@ -776,32 +776,19 @@ value_range::set (tree val)\n   set (VR_RANGE, val, val, NULL);\n }\n \n-/* Set value range VR to a non-NULL range of type TYPE.  */\n+/* Set value range VR to a nonzero range of type TYPE.  */\n \n void\n-value_range_base::set_nonnull (tree type)\n+value_range_base::set_nonzero (tree type)\n {\n   tree zero = build_int_cst (type, 0);\n   set (VR_ANTI_RANGE, zero, zero);\n }\n \n-void\n-value_range::set_nonnull (tree type)\n-{\n-  tree zero = build_int_cst (type, 0);\n-  set (VR_ANTI_RANGE, zero, zero, NULL);\n-}\n-\n-/* Set value range VR to a NULL range of type TYPE.  */\n-\n-void\n-value_range_base::set_null (tree type)\n-{\n-  set (build_int_cst (type, 0));\n-}\n+/* Set value range VR to a ZERO range of type TYPE.  */\n \n void\n-value_range::set_null (tree type)\n+value_range_base::set_zero (tree type)\n {\n   set (build_int_cst (type, 0));\n }\n@@ -830,22 +817,6 @@ vrp_bitmap_equal_p (const_bitmap b1, const_bitmap b2)\n \t      && bitmap_equal_p (b1, b2)));\n }\n \n-/* Return true if VR is [0, 0].  */\n-\n-static inline bool\n-range_is_null (const value_range_base *vr)\n-{\n-  return vr->zero_p ();\n-}\n-\n-static inline bool\n-range_is_nonnull (const value_range_base *vr)\n-{\n-  return (vr->kind () == VR_ANTI_RANGE\n-\t  && vr->min () == vr->max ()\n-\t  && integer_zerop (vr->min ()));\n-}\n-\n /* Return true if max and min of VR are INTEGER_CST.  It's not necessary\n    a singleton.  */\n \n@@ -1583,9 +1554,9 @@ extract_range_from_binary_expr (value_range_base *vr,\n      code is EXACT_DIV_EXPR.  We could mask out bits in the resulting\n      range, but then we also need to hack up vrp_union.  It's just\n      easier to special case when vr0 is ~[0,0] for EXACT_DIV_EXPR.  */\n-  if (code == EXACT_DIV_EXPR && range_is_nonnull (&vr0))\n+  if (code == EXACT_DIV_EXPR && vr0.nonzero_p ())\n     {\n-      vr->set_nonnull (expr_type);\n+      vr->set_nonzero (expr_type);\n       return;\n     }\n \n@@ -1663,9 +1634,9 @@ extract_range_from_binary_expr (value_range_base *vr,\n \t     If both are null, then the result is null. Otherwise they\n \t     are varying.  */\n \t  if (!range_includes_zero_p (&vr0) && !range_includes_zero_p (&vr1))\n-\t    vr->set_nonnull (expr_type);\n-\t  else if (range_is_null (&vr0) && range_is_null (&vr1))\n-\t    vr->set_null (expr_type);\n+\t    vr->set_nonzero (expr_type);\n+\t  else if (vr0.zero_p () && vr1.zero_p ())\n+\t    vr->set_zero (expr_type);\n \t  else\n \t    vr->set_varying ();\n \t}\n@@ -1692,9 +1663,9 @@ extract_range_from_binary_expr (value_range_base *vr,\n \t      && (flag_delete_null_pointer_checks\n \t\t  || (range_int_cst_p (&vr1)\n \t\t      && !tree_int_cst_sign_bit (vr1.max ()))))\n-\t    vr->set_nonnull (expr_type);\n-\t  else if (range_is_null (&vr0) && range_is_null (&vr1))\n-\t    vr->set_null (expr_type);\n+\t    vr->set_nonzero (expr_type);\n+\t  else if (vr0.zero_p () && vr1.zero_p ())\n+\t    vr->set_zero (expr_type);\n \t  else\n \t    vr->set_varying ();\n \t}\n@@ -1703,9 +1674,9 @@ extract_range_from_binary_expr (value_range_base *vr,\n \t  /* For pointer types, we are really only interested in asserting\n \t     whether the expression evaluates to non-NULL.  */\n \t  if (!range_includes_zero_p (&vr0) && !range_includes_zero_p (&vr1))\n-\t    vr->set_nonnull (expr_type);\n-\t  else if (range_is_null (&vr0) || range_is_null (&vr1))\n-\t    vr->set_null (expr_type);\n+\t    vr->set_nonzero (expr_type);\n+\t  else if (vr0.zero_p () || vr1.zero_p ())\n+\t    vr->set_zero (expr_type);\n \t  else\n \t    vr->set_varying ();\n \t}\n@@ -1898,7 +1869,7 @@ extract_range_from_binary_expr (value_range_base *vr,\n       bool extra_range_p;\n \n       /* Special case explicit division by zero as undefined.  */\n-      if (range_is_null (&vr1))\n+      if (vr1.zero_p ())\n \t{\n \t  vr->set_undefined ();\n \t  return;\n@@ -1937,7 +1908,7 @@ extract_range_from_binary_expr (value_range_base *vr,\n     }\n   else if (code == TRUNC_MOD_EXPR)\n     {\n-      if (range_is_null (&vr1))\n+      if (vr1.zero_p ())\n \t{\n \t  vr->set_undefined ();\n \t  return;\n@@ -2141,9 +2112,9 @@ extract_range_from_unary_expr (value_range_base *vr,\n       if (POINTER_TYPE_P (type) || POINTER_TYPE_P (op0_type))\n \t{\n \t  if (!range_includes_zero_p (&vr0))\n-\t    vr->set_nonnull (type);\n-\t  else if (range_is_null (&vr0))\n-\t    vr->set_null (type);\n+\t    vr->set_nonzero (type);\n+\t  else if (vr0.zero_p ())\n+\t    vr->set_zero (type);\n \t  else\n \t    vr->set_varying ();\n \t  return;\n@@ -6152,7 +6123,7 @@ value_range_base::union_helper (const value_range_base *vr0,\n \t\tvr1->kind (), vr1->min (), vr1->max ());\n \n   /* Work on a temporary so we can still use vr0 when union returns varying.  */\n-  value_range tem;\n+  value_range_base tem;\n   tem.set_and_canonicalize (vr0type, vr0min, vr0max);\n \n   /* Failed to find an efficient meet.  Before giving up and setting\n@@ -6162,7 +6133,7 @@ value_range_base::union_helper (const value_range_base *vr0,\n       && range_includes_zero_p (vr0) == 0\n       && range_includes_zero_p (vr1) == 0)\n     {\n-      tem.set_nonnull (vr0->type ());\n+      tem.set_nonzero (vr0->type ());\n       return tem;\n     }\n "}, {"sha": "435df4227f7acac1e1ffcd1d53b48819b0d84e84", "filename": "gcc/tree-vrp.h", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b00d2ba461d6dafdeccf6d93828b349b5e7f76/gcc%2Ftree-vrp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b00d2ba461d6dafdeccf6d93828b349b5e7f76/gcc%2Ftree-vrp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.h?ref=f2b00d2ba461d6dafdeccf6d93828b349b5e7f76", "patch": "@@ -46,8 +46,8 @@ class GTY((for_user)) value_range_base\n \n   void set (value_range_kind, tree, tree);\n   void set (tree);\n-  void set_nonnull (tree);\n-  void set_null (tree);\n+  void set_nonzero (tree);\n+  void set_zero (tree);\n \n   enum value_range_kind kind () const;\n   tree min () const;\n@@ -72,6 +72,7 @@ class GTY((for_user)) value_range_base\n   bool may_contain_p (tree) const;\n   void set_and_canonicalize (enum value_range_kind, tree, tree);\n   bool zero_p () const;\n+  bool nonzero_p () const;\n   bool singleton_p (tree *result = NULL) const;\n   void dump (FILE *) const;\n \n@@ -118,8 +119,6 @@ class GTY((user)) value_range : public value_range_base\n   /* Deep-copies equiv bitmap argument.  */\n   void set (value_range_kind, tree, tree, bitmap = NULL);\n   void set (tree);\n-  void set_nonnull (tree);\n-  void set_null (tree);\n \n   bool operator== (const value_range &) const /* = delete */;\n   bool operator!= (const value_range &) const /* = delete */;\n@@ -222,6 +221,16 @@ value_range_base::zero_p () const\n \t  && integer_zerop (m_max));\n }\n \n+/* Return TRUE if range is nonzero.  */\n+\n+inline bool\n+value_range_base::nonzero_p () const\n+{\n+  return (m_kind == VR_ANTI_RANGE\n+\t  && integer_zerop (m_min)\n+\t  && integer_zerop (m_max));\n+}\n+\n extern void dump_value_range (FILE *, const value_range *);\n extern void dump_value_range (FILE *, const value_range_base *);\n "}, {"sha": "b401516ae8e465490ccd5a8ab42056f7513aeca7", "filename": "gcc/vr-values.c", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b00d2ba461d6dafdeccf6d93828b349b5e7f76/gcc%2Fvr-values.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b00d2ba461d6dafdeccf6d93828b349b5e7f76/gcc%2Fvr-values.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.c?ref=f2b00d2ba461d6dafdeccf6d93828b349b5e7f76", "patch": "@@ -118,7 +118,10 @@ vr_values::get_value_range (const_tree var)\n \t  if (POINTER_TYPE_P (TREE_TYPE (sym))\n \t      && (nonnull_arg_p (sym)\n \t\t  || get_ptr_nonnull (var)))\n-\t    vr->set_nonnull (TREE_TYPE (sym));\n+\t    {\n+\t      vr->set_nonzero (TREE_TYPE (sym));\n+\t      vr->equiv_clear ();\n+\t    }\n \t  else if (INTEGRAL_TYPE_P (TREE_TYPE (sym)))\n \t    {\n \t      get_range_info (var, *vr);\n@@ -130,7 +133,10 @@ vr_values::get_value_range (const_tree var)\n \t}\n       else if (TREE_CODE (sym) == RESULT_DECL\n \t       && DECL_BY_REFERENCE (sym))\n-\tvr->set_nonnull (TREE_TYPE (sym));\n+\t{\n+\t  vr->set_nonzero (TREE_TYPE (sym));\n+\t  vr->equiv_clear ();\n+\t}\n     }\n \n   return vr;\n@@ -858,7 +864,10 @@ vr_values::extract_range_from_binary_expr (value_range *vr,\n \t  || (vr1.kind () == VR_ANTI_RANGE\n \t      && vr1.min () == op0\n \t      && vr1.min () == vr1.max ())))\n-      vr->set_nonnull (expr_type);\n+    {\n+      vr->set_nonzero (expr_type);\n+      vr->equiv_clear ();\n+    }\n }\n \n /* Extract range information from a unary expression CODE OP0 based on\n@@ -1085,7 +1094,8 @@ vr_values::extract_range_basic (value_range *vr, gimple *stmt)\n \t      && TREE_CODE (SSA_NAME_VAR (arg)) == PARM_DECL\n \t      && cfun->after_inlining)\n \t    {\n-\t      vr->set_null (type);\n+\t      vr->set_zero (type);\n+\t      vr->equiv_clear ();\n \t      return;\n \t    }\n \t  break;\n@@ -1392,7 +1402,10 @@ vr_values::extract_range_basic (value_range *vr, gimple *stmt)\n       && gimple_stmt_nonnegative_warnv_p (stmt, &sop))\n     set_value_range_to_nonnegative (vr, type);\n   else if (vrp_stmt_computes_nonzero (stmt))\n-    vr->set_nonnull (type);\n+    {\n+      vr->set_nonzero (type);\n+      vr->equiv_clear ();\n+    }\n   else\n     vr->set_varying ();\n }"}]}