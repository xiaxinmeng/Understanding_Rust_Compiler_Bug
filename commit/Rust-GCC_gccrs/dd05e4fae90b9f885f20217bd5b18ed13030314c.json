{"sha": "dd05e4fae90b9f885f20217bd5b18ed13030314c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQwNWU0ZmFlOTBiOWY4ODVmMjAyMTdiZDViMThlZDEzMDMwMzE0Yw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-03-08T19:21:13Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-03-08T19:21:13Z"}, "message": "builtins.c (expand_builtin_strlen): Be prepared for strlensi to fail.\n\n        * builtins.c (expand_builtin_strlen): Be prepared for strlensi\n        to fail.  Don't pre-expand the source operand.\n\nFrom-SVN: r32429", "tree": {"sha": "b064edc6151023284dca585689e2a55c65ba133e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b064edc6151023284dca585689e2a55c65ba133e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd05e4fae90b9f885f20217bd5b18ed13030314c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd05e4fae90b9f885f20217bd5b18ed13030314c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd05e4fae90b9f885f20217bd5b18ed13030314c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd05e4fae90b9f885f20217bd5b18ed13030314c/comments", "author": null, "committer": null, "parents": [{"sha": "c5aa680d463b578fa3bc62a6b3f7952f4bcaad2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5aa680d463b578fa3bc62a6b3f7952f4bcaad2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5aa680d463b578fa3bc62a6b3f7952f4bcaad2a"}], "stats": {"total": 59, "additions": 37, "deletions": 22}, "files": [{"sha": "b3a8130d86c7e4821c0bca2b30ecfbf3773f66b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd05e4fae90b9f885f20217bd5b18ed13030314c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd05e4fae90b9f885f20217bd5b18ed13030314c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd05e4fae90b9f885f20217bd5b18ed13030314c", "patch": "@@ -1,3 +1,10 @@\n+2000-03-08  Richard Henderson  <rth@cygnus.com>\n+\n+\t* builtins.c (expand_builtin_strlen): Be prepared for strlensi\n+\tto fail.  Don't pre-expand the source operand.\n+\n+\t* i386.md (strlensi): Initialize eoschar and align before use.\n+\n 2000-03-08  Jason Merrill  <jason@casey.cygnus.com>\n \n \t* expr.c (expand_expr, case ARRAY_REF): Still check for missing"}, {"sha": "c75d2fb44ae10bc35000fa36fd8a1e9e3fa2b144", "filename": "gcc/builtins.c", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd05e4fae90b9f885f20217bd5b18ed13030314c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd05e4fae90b9f885f20217bd5b18ed13030314c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=dd05e4fae90b9f885f20217bd5b18ed13030314c", "patch": "@@ -1334,13 +1334,14 @@ expand_builtin_strlen (exp, target, mode)\n     return 0;\n   else\n     {\n+      rtx pat;\n       tree src = TREE_VALUE (arglist);\n       tree len = c_strlen (src);\n \n       int align\n \t= get_pointer_alignment (src, BIGGEST_ALIGNMENT) / BITS_PER_UNIT;\n \n-      rtx result, src_rtx, char_rtx;\n+      rtx result, src_reg, char_rtx, before_strlen;\n       enum machine_mode insn_mode = value_mode, char_mode;\n       enum insn_code icode = CODE_FOR_nothing;\n \n@@ -1352,8 +1353,7 @@ expand_builtin_strlen (exp, target, mode)\n       if (align == 0)\n \treturn 0;\n \n-      /* Call a function if we can't compute strlen in the right mode.  */\n-\n+      /* Bail out if we can't compute strlen in the right mode.  */\n       while (insn_mode != VOIDmode)\n \t{\n \t  icode = strlen_optab->handlers[(int) insn_mode].insn_code;\n@@ -1373,21 +1373,19 @@ expand_builtin_strlen (exp, target, mode)\n \t     && REGNO (result) >= FIRST_PSEUDO_REGISTER))\n \tresult = gen_reg_rtx (insn_mode);\n \n-      /* Make sure the operands are acceptable to the predicates.  */\n-\n-      if (! (*insn_data[(int)icode].operand[0].predicate) (result, insn_mode))\n-\tresult = gen_reg_rtx (insn_mode);\n-      src_rtx = memory_address (BLKmode,\n-\t\t\t\texpand_expr (src, NULL_RTX, ptr_mode,\n-\t\t\t\t\t     EXPAND_NORMAL));\n+      /* Make a place to hold the source address.  We will not expand\n+\t the actual source until we are sure that the expansion will\n+\t not fail -- there are trees that cannot be expanded twice.  */\n+      src_reg = gen_reg_rtx (Pmode);\n \n-      if (! (*insn_data[(int)icode].operand[1].predicate) (src_rtx, Pmode))\n-\tsrc_rtx = copy_to_mode_reg (Pmode, src_rtx);\n+      /* Mark the beginning of the strlen sequence so we can emit the\n+\t source operand later.  */\n+      before_strlen = get_last_insn();\n \n       /* Check the string is readable and has an end.  */\n       if (current_function_check_memory_usage)\n \temit_library_call (chkr_check_str_libfunc, 1, VOIDmode, 2,\n-\t\t\t   src_rtx, Pmode,\n+\t\t\t   src_reg, Pmode,\n \t\t\t   GEN_INT (MEMORY_USE_RO),\n \t\t\t   TYPE_MODE (integer_type_node));\n \n@@ -1396,20 +1394,30 @@ expand_builtin_strlen (exp, target, mode)\n       if (! (*insn_data[(int)icode].operand[2].predicate) (char_rtx, char_mode))\n \tchar_rtx = copy_to_mode_reg (char_mode, char_rtx);\n \n-      emit_insn (GEN_FCN (icode) (result,\n-\t\t\t\t  gen_rtx_MEM (BLKmode, src_rtx),\n-\t\t\t\t  char_rtx, GEN_INT (align)));\n+      pat = GEN_FCN (icode) (result, gen_rtx_MEM (BLKmode, src_reg),\n+\t\t\t     char_rtx, GEN_INT (align));\n+      if (! pat)\n+\treturn 0;\n+      emit_insn (pat);\n+\n+      /* Now that we are assured of success, expand the source.  */\n+      start_sequence ();\n+      pat = expand_expr (src, src_reg, ptr_mode, EXPAND_SUM);\n+      if (pat != src_reg)\n+\temit_move_insn (src_reg, pat);\n+      pat = gen_sequence ();\n+      end_sequence ();\n+      emit_insn_after (pat, before_strlen);\n \n       /* Return the value in the proper mode for this function.  */\n       if (GET_MODE (result) == value_mode)\n-\treturn result;\n+\ttarget = result;\n       else if (target != 0)\n-\t{\n-\t  convert_move (target, result, 0);\n-\t  return target;\n-\t}\n+\tconvert_move (target, result, 0);\n       else\n-\treturn convert_to_mode (value_mode, result, 0);\n+\ttarget = convert_to_mode (value_mode, result, 0);\n+\n+      return target;\n     }\n }\n "}]}