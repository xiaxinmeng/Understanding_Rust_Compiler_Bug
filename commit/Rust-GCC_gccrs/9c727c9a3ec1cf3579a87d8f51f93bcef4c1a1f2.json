{"sha": "9c727c9a3ec1cf3579a87d8f51f93bcef4c1a1f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM3MjdjOWEzZWMxY2YzNTc5YTg3ZDhmNTFmOTNiY2VmNGMxYTFmMg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2009-06-16T16:55:41Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2009-06-16T16:55:41Z"}, "message": "toplev.h (floor_log2): If GCC_VERSION >= 3004, declare as static inline, not extern inline.\n\n\t* toplev.h (floor_log2): If GCC_VERSION >= 3004, declare as static\n\tinline, not extern inline.\n\t(exact_log2): Likewise.\n\t* toplev.c (floor_log2): Only define if GCC_VERSION < 3004. Don't\n\ttest CLZ_HWI.\n\t(exact_log2): Likewise, but don't test CTZ_HWI.\n\nFrom-SVN: r148540", "tree": {"sha": "e1b61088472cacd295a32462679586101359162e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1b61088472cacd295a32462679586101359162e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c727c9a3ec1cf3579a87d8f51f93bcef4c1a1f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c727c9a3ec1cf3579a87d8f51f93bcef4c1a1f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c727c9a3ec1cf3579a87d8f51f93bcef4c1a1f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c727c9a3ec1cf3579a87d8f51f93bcef4c1a1f2/comments", "author": null, "committer": null, "parents": [{"sha": "5fd8300bd5fda7ade5791662c5909094b22850ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fd8300bd5fda7ade5791662c5909094b22850ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fd8300bd5fda7ade5791662c5909094b22850ab"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "e87c4feb33f8dd6e34db4c54f3431e4a4bbe49f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c727c9a3ec1cf3579a87d8f51f93bcef4c1a1f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c727c9a3ec1cf3579a87d8f51f93bcef4c1a1f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c727c9a3ec1cf3579a87d8f51f93bcef4c1a1f2", "patch": "@@ -1,3 +1,12 @@\n+2009-06-16  Ian Lance Taylor  <iant@google.com>\n+\n+\t* toplev.h (floor_log2): If GCC_VERSION >= 3004, declare as static\n+\tinline, not extern inline.\n+\t(exact_log2): Likewise.\n+\t* toplev.c (floor_log2): Only define if GCC_VERSION < 3004. Don't\n+\ttest CLZ_HWI.\n+\t(exact_log2): Likewise, but don't test CTZ_HWI.\n+\n 2009-06-16  Ian Lance Taylor  <iant@google.com>\n \n \t* bitmap.c (bitmap_clear): Don't declare as inline."}, {"sha": "483623882bf28e97adde22627431ff4072810464", "filename": "gcc/toplev.c", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c727c9a3ec1cf3579a87d8f51f93bcef4c1a1f2/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c727c9a3ec1cf3579a87d8f51f93bcef4c1a1f2/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=9c727c9a3ec1cf3579a87d8f51f93bcef4c1a1f2", "patch": "@@ -532,11 +532,11 @@ read_integral_parameter (const char *p, const char *pname, const int  defval)\n   return atoi (p);\n }\n \n-/* When compiling with a recent enough GCC, we use the GNU C \"extern inline\"\n-   for floor_log2 and exact_log2; see toplev.h.  That construct, however,\n-   conflicts with the ISO C++ One Definition Rule.   */\n+#if GCC_VERSION < 3004\n \n-#if GCC_VERSION < 3004 || !defined (__cplusplus)\n+/* The functions floor_log2 and exact_log2 are defined as inline\n+   functions in toplev.h if GCC_VERSION >= 3004.  The definitions here\n+   are used for older versions of gcc.  */\n \n /* Given X, an unsigned number, return the largest int Y such that 2**Y <= X.\n    If X is 0, return -1.  */\n@@ -549,9 +549,6 @@ floor_log2 (unsigned HOST_WIDE_INT x)\n   if (x == 0)\n     return -1;\n \n-#ifdef CLZ_HWI\n-  t = HOST_BITS_PER_WIDE_INT - 1 - (int) CLZ_HWI (x);\n-#else\n   if (HOST_BITS_PER_WIDE_INT > 64)\n     if (x >= (unsigned HOST_WIDE_INT) 1 << (t + 64))\n       t += 64;\n@@ -568,7 +565,6 @@ floor_log2 (unsigned HOST_WIDE_INT x)\n     t += 2;\n   if (x >= ((unsigned HOST_WIDE_INT) 1) << (t + 1))\n     t += 1;\n-#endif\n \n   return t;\n }\n@@ -581,14 +577,10 @@ exact_log2 (unsigned HOST_WIDE_INT x)\n {\n   if (x != (x & -x))\n     return -1;\n-#ifdef CTZ_HWI\n-  return x ? CTZ_HWI (x) : -1;\n-#else\n   return floor_log2 (x);\n-#endif\n }\n \n-#endif /*  GCC_VERSION < 3004 || !defined (__cplusplus)  */\n+#endif /* GCC_VERSION < 3004 */\n \n /* Handler for fatal signals, such as SIGSEGV.  These are transformed\n    into ICE messages, which is much more user friendly.  In case the"}, {"sha": "cca68675f877d3352e1ab1303d325b46c13e7728", "filename": "gcc/toplev.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c727c9a3ec1cf3579a87d8f51f93bcef4c1a1f2/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c727c9a3ec1cf3579a87d8f51f93bcef4c1a1f2/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=9c727c9a3ec1cf3579a87d8f51f93bcef4c1a1f2", "patch": "@@ -169,14 +169,17 @@ extern void decode_d_option\t\t(const char *);\n extern bool fast_math_flags_set_p\t(void);\n extern bool fast_math_flags_struct_set_p (struct cl_optimization *);\n \n+/* Inline versions of the above for speed.  */\n+#if GCC_VERSION < 3004\n+\n /* Return log2, or -1 if not exact.  */\n extern int exact_log2                  (unsigned HOST_WIDE_INT);\n \n /* Return floor of log2, with -1 for zero.  */\n extern int floor_log2                  (unsigned HOST_WIDE_INT);\n \n-/* Inline versions of the above for speed.  */\n-#if GCC_VERSION >= 3004\n+#else /* GCC_VERSION >= 3004 */\n+\n # if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG\n #  define CLZ_HWI __builtin_clzl\n #  define CTZ_HWI __builtin_ctzl\n@@ -188,17 +191,18 @@ extern int floor_log2                  (unsigned HOST_WIDE_INT);\n #  define CTZ_HWI __builtin_ctz\n # endif\n \n-extern inline int\n+static inline int\n floor_log2 (unsigned HOST_WIDE_INT x)\n {\n   return x ? HOST_BITS_PER_WIDE_INT - 1 - (int) CLZ_HWI (x) : -1;\n }\n \n-extern inline int\n+static inline int\n exact_log2 (unsigned HOST_WIDE_INT x)\n {\n   return x == (x & -x) && x ? (int) CTZ_HWI (x) : -1;\n }\n+\n #endif /* GCC_VERSION >= 3004 */\n \n /* Functions used to get and set GCC's notion of in what directory"}]}