{"sha": "f327a48e6ed515dea67126a5a5b77a894f750f25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMyN2E0OGU2ZWQ1MTVkZWE2NzEyNmE1YTViNzdhODk0Zjc1MGYyNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-10-29T17:51:24Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-10-29T17:51:24Z"}, "message": "i386.md (lshlv16qi3): Remove expander.\n\n\t* config/i386/i386.md (lshlv16qi3): Remove expander.\n\t(lshrv16qi3): New expander.\n\t(<shift_insn>v16qi3): Macroize expander from ashrv16qi3 and lshrv16qi3\n\tusing any_shiftrt code iterator. Cleanup.\n\t(ashlv16qi3): Cleanup.\n\t(ashrv2di3): Ditto.\n\nFrom-SVN: r180657", "tree": {"sha": "97bfe0d7a7237d8fd5ed8b0f7d75d0497ffab3e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97bfe0d7a7237d8fd5ed8b0f7d75d0497ffab3e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f327a48e6ed515dea67126a5a5b77a894f750f25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f327a48e6ed515dea67126a5a5b77a894f750f25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f327a48e6ed515dea67126a5a5b77a894f750f25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f327a48e6ed515dea67126a5a5b77a894f750f25/comments", "author": null, "committer": null, "parents": [{"sha": "d1fecc879e4bce769a48f56f415b4ae3884eba56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1fecc879e4bce769a48f56f415b4ae3884eba56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1fecc879e4bce769a48f56f415b4ae3884eba56"}], "stats": {"total": 120, "additions": 58, "deletions": 62}, "files": [{"sha": "0e3ea111143717ff69242e248da44cba5969a150", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f327a48e6ed515dea67126a5a5b77a894f750f25/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f327a48e6ed515dea67126a5a5b77a894f750f25/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f327a48e6ed515dea67126a5a5b77a894f750f25", "patch": "@@ -1,7 +1,17 @@\n+2011-10-29  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (lshlv16qi3): Remove expander.\n+\t(lshrv16qi3): New expander.\n+\t(<shift_insn>v16qi3): Macroize expander from ashrv16qi3 and lshrv16qi3\n+\tusing any_shiftrt code iterator. Cleanup.\n+\t(ashlv16qi3): Cleanup.\n+\t(ashrv2di3): Ditto.\n+\n 2011-10-29  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR target/50691\n-\tconfig/pa/pa.c (emit_move_sequence): Legitimize TLS symbol references.\n+\t* config/pa/pa.c (emit_move_sequence): Legitimize TLS symbol\n+\treferences.\n \t(pa_legitimate_constant_p): Return false for TLS_MODEL_GLOBAL_DYNAMIC\n \tand TLS_MODEL_LOCAL_DYNAMIC symbol references.\n \n@@ -94,7 +104,7 @@\n \t* Makefile.in (MOSTLYCLEANFILES): Add gcc-ar/nm/ranlib.\n \t(native): Add gcc-ar, gcc-nm, gcc-ranlib.\n \t(AR_LIBS, gcc-ar, gcc-ar.o, gcc-ranlib, gcc-ranlib.o,\n-         gcc-nm, gcc-nm.o, gcc-ranlib.c, gcc-nm.c): Add.\n+\tgcc-nm, gcc-nm.o, gcc-ranlib.c, gcc-nm.c): Add.\n \t(install): Depend on install-gcc-ar.\n \t(install-gcc-ar): Add.\n \t(uninstall): Uninstall gcc-ar, gcc-nm, gcc-ranlib."}, {"sha": "c5ef4984832c1db65f5078c76427f2b065b73f9d", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 46, "deletions": 60, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f327a48e6ed515dea67126a5a5b77a894f750f25/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f327a48e6ed515dea67126a5a5b77a894f750f25/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=f327a48e6ed515dea67126a5a5b77a894f750f25", "patch": "@@ -5940,8 +5940,9 @@\n \n (define_expand \"<code><mode>3\"\n   [(set (match_operand:VI8_AVX2 0 \"register_operand\" \"\")\n-\t(maxmin:VI8_AVX2 (match_operand:VI8_AVX2 1 \"register_operand\" \"\")\n-\t\t\t (match_operand:VI8_AVX2 2 \"register_operand\" \"\")))]\n+\t(maxmin:VI8_AVX2\n+\t  (match_operand:VI8_AVX2 1 \"register_operand\" \"\")\n+\t  (match_operand:VI8_AVX2 2 \"register_operand\" \"\")))]\n   \"TARGET_SSE4_2\"\n {\n   enum rtx_code code;\n@@ -5974,8 +5975,9 @@\n \n (define_expand \"<code><mode>3\"\n   [(set (match_operand:VI124_128 0 \"register_operand\" \"\")\n-\t(smaxmin:VI124_128 (match_operand:VI124_128 1 \"nonimmediate_operand\" \"\")\n-\t\t\t   (match_operand:VI124_128 2 \"nonimmediate_operand\" \"\")))]\n+\t(smaxmin:VI124_128\n+\t  (match_operand:VI124_128 1 \"nonimmediate_operand\" \"\")\n+\t  (match_operand:VI124_128 2 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_SSE2\"\n {\n   if (TARGET_SSE4_1 || <MODE>mode == V8HImode)\n@@ -6043,8 +6045,9 @@\n \n (define_expand \"<code><mode>3\"\n   [(set (match_operand:VI124_128 0 \"register_operand\" \"\")\n-\t(umaxmin:VI124_128 (match_operand:VI124_128 1 \"nonimmediate_operand\" \"\")\n-\t\t\t   (match_operand:VI124_128 2 \"nonimmediate_operand\" \"\")))]\n+\t(umaxmin:VI124_128\n+\t  (match_operand:VI124_128 1 \"nonimmediate_operand\" \"\")\n+\t  (match_operand:VI124_128 2 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_SSE2\"\n {\n   if (TARGET_SSE4_1 || <MODE>mode == V16QImode)\n@@ -11382,73 +11385,60 @@\n    (set_attr \"prefix_extra\" \"2\")\n    (set_attr \"mode\" \"TI\")])\n \n-;; SSE2 doesn't have some shift varients, so define versions for XOP\n+;; SSE2 doesn't have some shift variants, so define versions for XOP\n (define_expand \"ashlv16qi3\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"\")\n \t(ashift:V16QI\n \t  (match_operand:V16QI 1 \"register_operand\" \"\")\n \t  (match_operand:SI 2 \"nonmemory_operand\" \"\")))]\n   \"TARGET_XOP\"\n {\n-  rtvec vs = rtvec_alloc (16);\n-  rtx par = gen_rtx_PARALLEL (V16QImode, vs);\n   rtx reg = gen_reg_rtx (V16QImode);\n+  rtx par;\n   int i;\n-  for (i = 0; i < 16; i++)\n-    RTVEC_ELT (vs, i) = operands[2];\n \n-  emit_insn (gen_vec_initv16qi (reg, par));\n-  emit_insn (gen_xop_ashlv16qi3 (operands[0], operands[1], reg));\n-  DONE;\n-})\n-\n-(define_expand \"lshlv16qi3\"\n-  [(match_operand:V16QI 0 \"register_operand\" \"\")\n-   (match_operand:V16QI 1 \"register_operand\" \"\")\n-   (match_operand:SI 2 \"nonmemory_operand\" \"\")]\n-  \"TARGET_XOP\"\n-{\n-  rtvec vs = rtvec_alloc (16);\n-  rtx par = gen_rtx_PARALLEL (V16QImode, vs);\n-  rtx reg = gen_reg_rtx (V16QImode);\n-  int i;\n+  par = gen_rtx_PARALLEL (V16QImode, rtvec_alloc (16));\n   for (i = 0; i < 16; i++)\n-    RTVEC_ELT (vs, i) = operands[2];\n+    XVECEXP (par, 0, i) = operands[2];\n \n   emit_insn (gen_vec_initv16qi (reg, par));\n-  emit_insn (gen_xop_lshlv16qi3 (operands[0], operands[1], reg));\n+  emit_insn (gen_xop_ashlv16qi3 (operands[0], operands[1], reg));\n   DONE;\n })\n \n-(define_expand \"ashrv16qi3\"\n+(define_expand \"<shift_insn>v16qi3\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"\")\n-\t(ashiftrt:V16QI\n+\t(any_shiftrt:V16QI\n \t  (match_operand:V16QI 1 \"register_operand\" \"\")\n \t  (match_operand:SI 2 \"nonmemory_operand\" \"\")))]\n   \"TARGET_XOP\"\n {\n-  rtvec vs = rtvec_alloc (16);\n-  rtx par = gen_rtx_PARALLEL (V16QImode, vs);\n   rtx reg = gen_reg_rtx (V16QImode);\n+  rtx par;\n+  bool negate = false;\n+  rtx (*shift_insn)(rtx, rtx, rtx);\n   int i;\n-  rtx ele = ((CONST_INT_P (operands[2]))\n-\t     ? GEN_INT (- INTVAL (operands[2]))\n-\t     : operands[2]);\n \n+  if (CONST_INT_P (operands[2]))\n+    operands[2] = GEN_INT (-INTVAL (operands[2]));\n+  else\n+    negate = true;\n+\n+  par = gen_rtx_PARALLEL (V16QImode, rtvec_alloc (16));\n   for (i = 0; i < 16; i++)\n-    RTVEC_ELT (vs, i) = ele;\n+    XVECEXP (par, 0, i) = operands[2];\n \n   emit_insn (gen_vec_initv16qi (reg, par));\n \n-  if (!CONST_INT_P (operands[2]))\n-    {\n-      rtx neg = gen_reg_rtx (V16QImode);\n-      emit_insn (gen_negv16qi2 (neg, reg));\n-      emit_insn (gen_xop_ashlv16qi3 (operands[0], operands[1], neg));\n-    }\n+  if (negate)\n+    emit_insn (gen_negv16qi2 (reg, reg));\n+\n+  if (<CODE> == LSHIFTRT)\n+    shift_insn = gen_xop_lshlv16qi3;\n   else\n-    emit_insn (gen_xop_ashlv16qi3 (operands[0], operands[1], reg));\n+    shift_insn = gen_xop_ashlv16qi3;\n \n+  emit_insn (shift_insn (operands[0], operands[1], reg));\n   DONE;\n })\n \n@@ -11459,29 +11449,25 @@\n \t  (match_operand:DI 2 \"nonmemory_operand\" \"\")))]\n   \"TARGET_XOP\"\n {\n-  rtvec vs = rtvec_alloc (2);\n-  rtx par = gen_rtx_PARALLEL (V2DImode, vs);\n   rtx reg = gen_reg_rtx (V2DImode);\n-  rtx ele;\n+  rtx par;\n+  bool negate = false;\n+  int i;\n \n   if (CONST_INT_P (operands[2]))\n-    ele = GEN_INT (- INTVAL (operands[2]));\n-  else if (GET_MODE (operands[2]) != DImode)\n-    {\n-      rtx move = gen_reg_rtx (DImode);\n-      ele = gen_reg_rtx (DImode);\n-      convert_move (move, operands[2], false);\n-      emit_insn (gen_negdi2 (ele, move));\n-    }\n+    operands[2] = GEN_INT (-INTVAL (operands[2]));\n   else\n-    {\n-      ele = gen_reg_rtx (DImode);\n-      emit_insn (gen_negdi2 (ele, operands[2]));\n-    }\n+    negate = true;\n+\n+  par = gen_rtx_PARALLEL (V2DImode, rtvec_alloc (2));\n+  for (i = 0; i < 2; i++)\n+    XVECEXP (par, 0, i) = operands[2];\n \n-  RTVEC_ELT (vs, 0) = ele;\n-  RTVEC_ELT (vs, 1) = ele;\n   emit_insn (gen_vec_initv2di (reg, par));\n+\n+  if (negate)\n+    emit_insn (gen_negv2di2 (reg, reg));\n+\n   emit_insn (gen_xop_ashlv2di3 (operands[0], operands[1], reg));\n   DONE;\n })"}]}