{"sha": "6d6d0fa07e124c351a01f4cadcfc16ef215817ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ2ZDBmYTA3ZTEyNGMzNTFhMDFmNGNhZGNmYzE2ZWYyMTU4MTdhZA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1997-10-26T16:56:15Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-10-26T16:56:15Z"}, "message": "toplev.c (flag_rerun_loop_opt): New variable.\n\n        * toplev.c (flag_rerun_loop_opt): New variable.\n        (f_options): Handle -frerun-loop-opt.\n        (rest_of_compilation): If -frerun-loop-opt, then run the loop\n        optimizer twice.\n        (main): Enable -frerun-loop-opt by default for -O2 or greater.\n\nFrom-SVN: r16180", "tree": {"sha": "724455a715ab23442474adb49157e2a8343b4856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/724455a715ab23442474adb49157e2a8343b4856"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d6d0fa07e124c351a01f4cadcfc16ef215817ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d6d0fa07e124c351a01f4cadcfc16ef215817ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d6d0fa07e124c351a01f4cadcfc16ef215817ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d6d0fa07e124c351a01f4cadcfc16ef215817ad/comments", "author": null, "committer": null, "parents": [{"sha": "da0af5a56fc0b83f9c7f7eaa4038a4a627f4cfbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da0af5a56fc0b83f9c7f7eaa4038a4a627f4cfbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da0af5a56fc0b83f9c7f7eaa4038a4a627f4cfbc"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "9ad14ce343468aa4d5fd97472a3de461484d68cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d6d0fa07e124c351a01f4cadcfc16ef215817ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d6d0fa07e124c351a01f4cadcfc16ef215817ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d6d0fa07e124c351a01f4cadcfc16ef215817ad", "patch": "@@ -1,5 +1,11 @@\n Sun Oct 26 09:21:40 1997  Jeffrey A Law  (law@cygnus.com)\n \n+\t* toplev.c (flag_rerun_loop_opt): New variable.\n+\t(f_options): Handle -frerun-loop-opt.\n+\t(rest_of_compilation): If -frerun-loop-opt, then run the loop\n+\toptimizer twice.\n+\t(main): Enable -frerun-loop-opt by default for -O2 or greater.\n+\n \t* loop.c (simplify_giv_expr): Adding two invariants results\n \tin an invariant.\n "}, {"sha": "34ec2187a44de258e5a4a6360ee63a11ecd27aed", "filename": "gcc/invoke.texi", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d6d0fa07e124c351a01f4cadcfc16ef215817ad/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d6d0fa07e124c351a01f4cadcfc16ef215817ad/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=6d6d0fa07e124c351a01f4cadcfc16ef215817ad", "patch": "@@ -149,7 +149,7 @@ in the following sections.\n -fkeep-inline-functions  -fno-default-inline\n -fno-defer-pop  -fno-function-cse\n -fno-inline  -fno-peephole  -fomit-frame-pointer -fregmove\n--frerun-cse-after-loop  -fschedule-insns\n+-frerun-cse-after-loop  -frerun-loop-opt -fschedule-insns\n -fschedule-insns2  -fstrength-reduce  -fthread-jumps\n -funroll-all-loops  -funroll-loops\n -fmove-all-movables  -freduce-all-givs\n@@ -245,6 +245,10 @@ in the following sections.\n -msoft-float  -mhard-float\n -mbsd  -mxopen  -mno-symrename\n \n+@emph{MN10300 Options}\n+-mmult-bug\n+-mno-mult-bug\n+\n @emph{M32R/D Options}\n -mcode-model=@var{model type}  -msdata=@var{sdata type}\n -G @var{num}\n@@ -2165,6 +2169,9 @@ body of the @code{if}.\n Re-run common subexpression elimination after loop optimizations has been\n performed.\n \n+@item -frerun-loop-opt\n+Run the loop optimizer twice.\n+\n @item -fexpensive-optimizations\n Perform a number of minor optimizations that are relatively expensive.\n \n@@ -2798,6 +2805,7 @@ that macro, which enables you to change the defaults.\n * Convex Options::\n * AMD29K Options::\n * ARM Options::\n+* MN10300 Options::\n * M32R/D Options::\n * M88K Options::\n * RS/6000 and PowerPC Options::\n@@ -3437,6 +3445,21 @@ suppresses this pass.  The post-processor is never run when the\n compiler is built for cross-compilation.\n @end table\n \n+@node MN10300 Options\n+@subsection MN10300 Options\n+@cindex MN10300 options\n+These @samp{-m} options are defined for Matsushita MN10300 architectures:\n+\n+@table @code\n+@item -mmult-bug\n+Generate code to avoid bugs in the multiply instructions for the MN10300\n+processors.  This is the default.\n+\n+@item -mno-mult-bug\n+Do not generate code to avoid bugs in the multiply instructions for the\n+MN10300 processors.\n+@end table\n+\n @node M32R/D Options\n @subsection M32R/D Options\n @cindex M32R/D options"}, {"sha": "c36554f1c83e75ca9209fa76d4ccd78dfd3ddd29", "filename": "gcc/toplev.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d6d0fa07e124c351a01f4cadcfc16ef215817ad/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d6d0fa07e124c351a01f4cadcfc16ef215817ad/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=6d6d0fa07e124c351a01f4cadcfc16ef215817ad", "patch": "@@ -505,6 +505,10 @@ int flag_syntax_only = 0;\n \n static int flag_rerun_cse_after_loop;\n \n+/* Nonzero means to run loop optimizations twice.  */\n+\n+static int flag_rerun_loop_opt;\n+\n /* Nonzero for -finline-functions: ok to inline functions that look like\n    good inline candidates.  */\n \n@@ -707,6 +711,7 @@ struct { char *string; int *variable; int on_value;} f_options[] =\n   {\"reg-struct-return\", &flag_pcc_struct_return, 0},\n   {\"delayed-branch\", &flag_delayed_branch, 1},\n   {\"rerun-cse-after-loop\", &flag_rerun_cse_after_loop, 1},\n+  {\"rerun-loop-opt\", &flag_rerun_loop_opt, 1},\n   {\"pretend-float\", &flag_pretend_float, 1},\n   {\"schedule-insns\", &flag_schedule_insns, 1},\n   {\"schedule-insns2\", &flag_schedule_insns_after_reload, 1},\n@@ -3262,6 +3267,27 @@ rest_of_compilation (decl)\n     {\n       TIMEVAR (loop_time,\n \t       {\n+\t\t int save_flag_unroll_loops;\n+\t\t int save_flag_unroll_all_loops;\n+\n+\t\t if (flag_rerun_loop_opt)\n+\t\t   {\n+\t\t      /* We only want to perform unrolling once.  */\n+\t\t      save_flag_unroll_loops = flag_unroll_loops;\n+\t\t      save_flag_unroll_all_loops = flag_unroll_all_loops;\n+\t\t      flag_unroll_loops = 0;\n+\t\t      flag_unroll_all_loops = 0;\n+\n+\t\t      loop_optimize (insns, loop_dump_file);\n+\n+\t\t      /* The regscan pass may not be necessary, but let's\n+\t\t\t be safe until we can prove otherwise.  */\n+\t\t      reg_scan (insns, max_reg_num (), 1);\n+\n+\t\t      /* Restore loop unrolling flags.  */\n+\t\t      flag_unroll_loops = save_flag_unroll_loops;\n+\t\t      flag_unroll_all_loops = save_flag_unroll_all_loops;\n+\t\t   }\n \t\t loop_optimize (insns, loop_dump_file);\n \t       });\n     }\n@@ -3819,6 +3845,7 @@ main (argc, argv, envp)\n       flag_expensive_optimizations = 1;\n       flag_strength_reduce = 1;\n       flag_rerun_cse_after_loop = 1;\n+      flag_rerun_loop_opt = 1;\n       flag_caller_saves = 1;\n       flag_force_mem = 1;\n #ifdef INSN_SCHEDULING"}]}