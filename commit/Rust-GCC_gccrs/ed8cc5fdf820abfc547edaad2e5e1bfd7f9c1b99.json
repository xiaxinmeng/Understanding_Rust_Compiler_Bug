{"sha": "ed8cc5fdf820abfc547edaad2e5e1bfd7f9c1b99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ4Y2M1ZmRmODIwYWJmYzU0N2VkYWFkMmU1ZTFiZmQ3ZjljMWI5OQ==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "2001-01-17T08:13:06Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2001-01-17T08:13:06Z"}, "message": "prims.cc (init_prim_class): Deleted.\n\n2001-01-16  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n\t* prims.cc (init_prim_class): Deleted.\n\t(DECLARE_PRIM_TYPE): Rewritten.\n\t* java/lang/Class.h (stdio.h): Include removed.\n\t(stddef.h): Included.\n\t(java/lang/reflect/Modifier.h): Likewise.\n\t(Class): Contructor now takes arguments, initializes fields.\n\t(initializePrim): Prototype deleted.\n\t* java/lang/natClass.cc (initializePrim): Deleted.\n\n(http://sources.redhat.com/ml/java-patches/2001-q1/msg00081.html)\n\nFrom-SVN: r39088", "tree": {"sha": "cfe0de1a60892065af8b8023b24409d4a4026f27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfe0de1a60892065af8b8023b24409d4a4026f27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed8cc5fdf820abfc547edaad2e5e1bfd7f9c1b99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed8cc5fdf820abfc547edaad2e5e1bfd7f9c1b99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed8cc5fdf820abfc547edaad2e5e1bfd7f9c1b99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed8cc5fdf820abfc547edaad2e5e1bfd7f9c1b99/comments", "author": null, "committer": null, "parents": [{"sha": "d34786e3fe35c316fa46da13d80a30cf3bf25ee5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d34786e3fe35c316fa46da13d80a30cf3bf25ee5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d34786e3fe35c316fa46da13d80a30cf3bf25ee5"}], "stats": {"total": 106, "additions": 34, "deletions": 72}, "files": [{"sha": "f958cd00c9aebf04a962d4a7b987dfbec8bd7158", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8cc5fdf820abfc547edaad2e5e1bfd7f9c1b99/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8cc5fdf820abfc547edaad2e5e1bfd7f9c1b99/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ed8cc5fdf820abfc547edaad2e5e1bfd7f9c1b99", "patch": "@@ -1,3 +1,14 @@\n+2001-01-16  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* prims.cc (init_prim_class): Deleted.\n+\t(DECLARE_PRIM_TYPE): Rewritten.\n+\t* java/lang/Class.h (stdio.h): Include removed.\n+\t(stddef.h): Included.\n+\t(java/lang/reflect/Modifier.h): Likewise.\n+\t(Class): Contructor now takes arguments, initializes fields.\n+\t(initializePrim): Prototype deleted.\n+\t* java/lang/natClass.cc (initializePrim): Deleted.\n+\n 2001-01-16  Warren Levy  <warrenl@redhat.com>\n \n \t* java/math/BigInteger.java: Update Copyright year."}, {"sha": "febe74816f9feef24bf79642385a5bd794e7b5ca", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 20, "deletions": 36, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8cc5fdf820abfc547edaad2e5e1bfd7f9c1b99/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8cc5fdf820abfc547edaad2e5e1bfd7f9c1b99/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=ed8cc5fdf820abfc547edaad2e5e1bfd7f9c1b99", "patch": "@@ -14,10 +14,11 @@ details.  */\n \n #pragma interface\n \n-#include <stdio.h>\n+#include <stddef.h>\n #include <java/lang/Object.h>\n #include <java/lang/String.h>\n #include <java/net/URL.h>\n+#include <java/lang/reflect/Modifier.h>\n \n // We declare these here to avoid including gcj/cni.h.\n extern \"C\" void _Jv_InitClass (jclass klass);\n@@ -173,7 +174,10 @@ class java::lang::Class : public java::lang::Object\n \n   jboolean isAssignableFrom (jclass cls);\n   jboolean isInstance (jobject obj);\n-  jboolean isInterface (void);\n+  jboolean isInterface (void)\n+  {\n+    return (accflags & java::lang::reflect::Modifier::INTERFACE) != 0;\n+  }\n   \n   inline jboolean isPrimitive (void)\n     {\n@@ -192,52 +196,32 @@ class java::lang::Class : public java::lang::Object\n   // finalization\n   void finalize ();\n \n-  // For the initialization of primitive types: some constructors as\n-  // required by prims.cc:init_prim_class(), and the prototype of\n-  // method to perform a lightweight initialization of a Class object.\n-  Class (void) {}\n-  Class (const Class& x) : Object () {\n+  // This constructor is used to create Class object for the primitive\n+  // types.\n+  Class (jobject cname, jbyte sig, jint len, jobject array_vtable) {\n     \n+    using namespace java::lang::reflect;\n+    _Jv_Utf8Const *_Jv_makeUtf8Const (char *s, int len);\n+\n     // C++ ctors are fixing the vtbl in a way that doesn't fit Java.\n     // We can fix the C++ compiler, or we can hack our runtime. What's\n     // below fix the vtable so that it starts at -2.\n     void *p =  ((void **)this)[0];\n     ((void **)this)[0] = (void *)((char *)p-2*sizeof (void *));\n \n-    _Jv_VTable *avtable = x.vtable;\n-\n-    // We must initialize every field of the class.  We do this in\n-    // the same order they are declared in Class.h.\n-    next = NULL;\n-    name = x.name;\n-    accflags = x.accflags;\n-    superclass = NULL;\n-    constants.size = 0;\n-    constants.tags = NULL;\n-    constants.data = NULL;\n-    methods = NULL;\n-    method_count = x.method_count;\n-    vtable_method_count = 0;\n-    fields = NULL;\n-    size_in_bytes = x.size_in_bytes;\n-    field_count = 0;\n-    static_field_count = 0;\n+    // We must initialize every field of the class.  We do this in the\n+    // same order they are declared in Class.h, except for fields that\n+    // are initialized to NULL.\n+    name = _Jv_makeUtf8Const ((char *) cname, -1);\n+    accflags = Modifier::PUBLIC | Modifier::FINAL | Modifier::ABSTRACT;\n+    method_count = sig;\n+    size_in_bytes = len;\n     vtable = JV_PRIMITIVE_VTABLE;\n-    interfaces = NULL;\n-    loader = NULL;\n-    interface_count = 0;\n     state = JV_STATE_DONE;\n-    thread = NULL;\n     depth = -1;\n-    ancestors = NULL;\n-    idt = NULL;\n-\n     if (method_count != 'V')\n-      _Jv_NewArrayClass (this, NULL, avtable);\n-    else\n-      arrayclass = NULL;\n+      _Jv_NewArrayClass (this, NULL, (_Jv_VTable *) array_vtable);\n   }\n-  void initializePrim (jobject cname, jbyte sig, jint len, jobject avtable);\n \n   static java::lang::Class class$;\n "}, {"sha": "2d8a1254542f79c88280fa670b1c1505d53ba15f", "filename": "libjava/java/lang/natClass.cc", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8cc5fdf820abfc547edaad2e5e1bfd7f9c1b99/libjava%2Fjava%2Flang%2FnatClass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8cc5fdf820abfc547edaad2e5e1bfd7f9c1b99/libjava%2Fjava%2Flang%2FnatClass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClass.cc?ref=ed8cc5fdf820abfc547edaad2e5e1bfd7f9c1b99", "patch": "@@ -633,12 +633,6 @@ java::lang::Class::isInstance (jobject obj)\n   return _Jv_IsAssignableFrom (this, JV_CLASS (obj));\n }\n \n-jboolean\n-java::lang::Class::isInterface (void)\n-{\n-  return (accflags & java::lang::reflect::Modifier::INTERFACE) != 0;\n-}\n-\n jobject\n java::lang::Class::newInstance (void)\n {\n@@ -1408,20 +1402,3 @@ java::lang::Class::getPrivateMethod (jstring name, JArray<jclass> *param_types)\n     }\n   JvThrow (new java::lang::NoSuchMethodException);\n }\n-\n-// Perform a lightweight initialization of a Class object, for the\n-// purpose of creating the Class object of primitive types.\n-\n-void\n-java::lang::Class::initializePrim (jobject cname, jbyte sig, jint len, jobject avtable)\n-{\n-  using namespace java::lang::reflect;\n-\n-  name = _Jv_makeUtf8Const ((char *) cname, -1);\n-  accflags = Modifier::PUBLIC | Modifier::FINAL | Modifier::ABSTRACT;\n-  method_count = sig;\n-  size_in_bytes = len;\n-  // We temporarily store `avtable' in the `vtable' field, so that the\n-  // copy constructor can correctly invoke _Jv_FindArrayClass.\n-  vtable = (_Jv_VTable *) avtable;\n-}"}, {"sha": "85264bb2cce00fc7f7442a57503275ae0b7558d1", "filename": "libjava/prims.cc", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8cc5fdf820abfc547edaad2e5e1bfd7f9c1b99/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8cc5fdf820abfc547edaad2e5e1bfd7f9c1b99/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=ed8cc5fdf820abfc547edaad2e5e1bfd7f9c1b99", "patch": "@@ -510,21 +510,11 @@ _Jv_NewMultiArray (jclass array_type, jint dimensions, ...)\n \n \f\n \n-// Initialize Class object for primitive types. The `return' statement\n-// does the actuall job.\n-static java::lang::Class\n-init_prim_class (jobject cname, jbyte sig, jint len, jobject array_vtable)\n-{\n-  static java::lang::Class iclass;\n-  iclass.initializePrim (cname, sig, len, array_vtable);\n-  return iclass;\n-}\n-  \n #define DECLARE_PRIM_TYPE(NAME, SIG, LEN)\t\t\t\t\\\n   _Jv_ArrayVTable _Jv_##NAME##VTable;\t\t\t\t\t\\\n-  java::lang::Class _Jv_##NAME##Class = \t\t\t\t\\\n-    init_prim_class ((jobject) #NAME, (jbyte) SIG,\t\t\t\\\n-                     (jint) LEN, (jobject) &_Jv_##NAME##VTable);\n+  java::lang::Class _Jv_##NAME##Class ((jobject) #NAME,\t\t\t\\\n+\t\t\t\t       (jbyte) SIG, (jint) LEN,\t\t\\\n+\t\t\t\t       (jobject) &_Jv_##NAME##VTable);\n \n DECLARE_PRIM_TYPE(byte, 'B', 1);\n DECLARE_PRIM_TYPE(short, 'S', 2);"}]}