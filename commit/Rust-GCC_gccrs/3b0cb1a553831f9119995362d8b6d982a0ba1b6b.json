{"sha": "3b0cb1a553831f9119995362d8b6d982a0ba1b6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IwY2IxYTU1MzgzMWY5MTE5OTk1MzYyZDhiNmQ5ODJhMGJhMWI2Yg==", "commit": {"author": {"name": "Aaron Sawdey", "email": "acsawdey@linux.vnet.ibm.com", "date": "2018-01-02T23:01:43Z"}, "committer": {"name": "Aaron Sawdey", "email": "acsawdey@gcc.gnu.org", "date": "2018-01-02T23:01:43Z"}, "message": "rs6000-string.c (expand_block_move): Allow the use of unaligned VSX load/store on P8/P9.\n\n2018-01-02  Aaron Sawdey  <acsawdey@linux.vnet.ibm.com>\n\n        * config/rs6000/rs6000-string.c (expand_block_move): Allow the use of\n        unaligned VSX load/store on P8/P9.\n        (expand_block_clear): Allow the use of unaligned VSX\n\tload/store on P8/P9.\n\nFrom-SVN: r256112", "tree": {"sha": "3f83fbdb295a628cd6b19b4102ccd6e25271c357", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f83fbdb295a628cd6b19b4102ccd6e25271c357"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b0cb1a553831f9119995362d8b6d982a0ba1b6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b0cb1a553831f9119995362d8b6d982a0ba1b6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b0cb1a553831f9119995362d8b6d982a0ba1b6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b0cb1a553831f9119995362d8b6d982a0ba1b6b/comments", "author": null, "committer": null, "parents": [{"sha": "6012c652c778abaf9fb07fb1628435ff055dd349", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6012c652c778abaf9fb07fb1628435ff055dd349", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6012c652c778abaf9fb07fb1628435ff055dd349"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "b9775434b700706a7d8b288b467bbcea36291165", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0cb1a553831f9119995362d8b6d982a0ba1b6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0cb1a553831f9119995362d8b6d982a0ba1b6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b0cb1a553831f9119995362d8b6d982a0ba1b6b", "patch": "@@ -1,3 +1,10 @@\n+2018-01-02  Aaron Sawdey  <acsawdey@linux.vnet.ibm.com>\n+\n+        * config/rs6000/rs6000-string.c (expand_block_move): Allow the use of\n+        unaligned VSX load/store on P8/P9.\n+        (expand_block_clear): Allow the use of unaligned VSX\n+\tload/store on P8/P9.\n+\n 2018-01-02  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000-p8swap.c (swap_feeds_both_load_and_store):"}, {"sha": "23de92572b777f4b7c348e4e8584341c16208814", "filename": "gcc/config/rs6000/rs6000-string.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0cb1a553831f9119995362d8b6d982a0ba1b6b/gcc%2Fconfig%2Frs6000%2Frs6000-string.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0cb1a553831f9119995362d8b6d982a0ba1b6b/gcc%2Fconfig%2Frs6000%2Frs6000-string.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-string.c?ref=3b0cb1a553831f9119995362d8b6d982a0ba1b6b", "patch": "@@ -73,7 +73,7 @@ expand_block_clear (rtx operands[])\n      When optimize_size, avoid any significant code bloat; calling\n      memset is about 4 instructions, so allow for one instruction to\n      load zero and three to do clearing.  */\n-  if (TARGET_ALTIVEC && align >= 128)\n+  if (TARGET_ALTIVEC && (align >= 128 || TARGET_EFFICIENT_UNALIGNED_VSX))\n     clear_step = 16;\n   else if (TARGET_POWERPC64 && (align >= 64 || !STRICT_ALIGNMENT))\n     clear_step = 8;\n@@ -90,7 +90,7 @@ expand_block_clear (rtx operands[])\n       machine_mode mode = BLKmode;\n       rtx dest;\n \n-      if (bytes >= 16 && TARGET_ALTIVEC && align >= 128)\n+      if (bytes >= 16 && TARGET_ALTIVEC && (align >= 128 || TARGET_EFFICIENT_UNALIGNED_VSX))\n \t{\n \t  clear_bytes = 16;\n \t  mode = V4SImode;\n@@ -1260,7 +1260,7 @@ expand_block_move (rtx operands[])\n \n       /* Altivec first, since it will be faster than a string move\n \t when it applies, and usually not significantly larger.  */\n-      if (TARGET_ALTIVEC && bytes >= 16 && align >= 128)\n+      if (TARGET_ALTIVEC && bytes >= 16 && (TARGET_EFFICIENT_UNALIGNED_VSX || align >= 128))\n \t{\n \t  move_bytes = 16;\n \t  mode = V4SImode;"}]}