{"sha": "4f660b159f4a050bc631930d20643d5533541d46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY2NjBiMTU5ZjRhMDUwYmM2MzE5MzBkMjA2NDNkNTUzMzU0MWQ0Ng==", "commit": {"author": {"name": "Radovan Obradovic", "email": "robradovic@mips.com", "date": "2014-04-24T09:34:15Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2014-04-24T09:34:15Z"}, "message": "-fuse-caller-save - Add new reg-note REG_CALL_DECL\n\n2014-04-24  Radovan Obradovic  <robradovic@mips.com>\n            Tom de Vries  <tom@codesourcery.com>\n\n\t* reg-notes.def (REG_NOTE (CALL_DECL)): New reg-note REG_CALL_DECL.\n\t* calls.c (expand_call, emit_library_call_value_1): Add REG_CALL_DECL\n\treg-note.\n\t* combine.c (distribute_notes): Handle REG_CALL_DECL reg-note.\n\t* emit-rtl.c (try_split): Same.\n\nCo-Authored-By: Tom de Vries <tom@codesourcery.com>\n\nFrom-SVN: r209744", "tree": {"sha": "12104592791a836124a5fa50178055b2071db3fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12104592791a836124a5fa50178055b2071db3fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f660b159f4a050bc631930d20643d5533541d46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f660b159f4a050bc631930d20643d5533541d46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f660b159f4a050bc631930d20643d5533541d46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f660b159f4a050bc631930d20643d5533541d46/comments", "author": null, "committer": null, "parents": [{"sha": "d996e61aaabdcd98f1a24adf5d7c19d3e76f48e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d996e61aaabdcd98f1a24adf5d7c19d3e76f48e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d996e61aaabdcd98f1a24adf5d7c19d3e76f48e0"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "662e08377eed463b0cd2327fe20d50c9d57df2e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f660b159f4a050bc631930d20643d5533541d46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f660b159f4a050bc631930d20643d5533541d46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f660b159f4a050bc631930d20643d5533541d46", "patch": "@@ -1,3 +1,12 @@\n+2014-04-24  Radovan Obradovic  <robradovic@mips.com>\n+            Tom de Vries  <tom@codesourcery.com>\n+\n+\t* reg-notes.def (REG_NOTE (CALL_DECL)): New reg-note REG_CALL_DECL.\n+\t* calls.c (expand_call, emit_library_call_value_1): Add REG_CALL_DECL\n+\treg-note.\n+\t* combine.c (distribute_notes): Handle REG_CALL_DECL reg-note.\n+\t* emit-rtl.c (try_split): Same.\n+\n 2014-04-24  Radovan Obradovic  <robradovic@mips.com>\n             Tom de Vries  <tom@codesourcery.com>\n "}, {"sha": "e798c7a03494576c4f9c446bc34f6758a3977dbf", "filename": "gcc/calls.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f660b159f4a050bc631930d20643d5533541d46/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f660b159f4a050bc631930d20643d5533541d46/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=4f660b159f4a050bc631930d20643d5533541d46", "patch": "@@ -3178,6 +3178,19 @@ expand_call (tree exp, rtx target, int ignore)\n \t\t   next_arg_reg, valreg, old_inhibit_defer_pop, call_fusage,\n \t\t   flags, args_so_far);\n \n+      if (flag_use_caller_save)\n+\t{\n+\t  rtx last, datum = NULL_RTX;\n+\t  if (fndecl != NULL_TREE)\n+\t    {\n+\t      datum = XEXP (DECL_RTL (fndecl), 0);\n+\t      gcc_assert (datum != NULL_RTX\n+\t\t\t  && GET_CODE (datum) == SYMBOL_REF);\n+\t    }\n+\t  last = last_call_insn ();\n+\t  add_reg_note (last, REG_CALL_DECL, datum);\n+\t}\n+\n       /* If the call setup or the call itself overlaps with anything\n \t of the argument setup we probably clobbered our call address.\n \t In that case we can't do sibcalls.  */\n@@ -4205,6 +4218,14 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n \t       valreg,\n \t       old_inhibit_defer_pop + 1, call_fusage, flags, args_so_far);\n \n+  if (flag_use_caller_save)\n+    {\n+      rtx last, datum = orgfun;\n+      gcc_assert (GET_CODE (datum) == SYMBOL_REF);\n+      last = last_call_insn ();\n+      add_reg_note (last, REG_CALL_DECL, datum);\n+    }\n+\n   /* Right-shift returned value if necessary.  */\n   if (!pcc_struct_value\n       && TYPE_MODE (tfom) != BLKmode"}, {"sha": "e051f5e4d1fe38067e266826181366e450c3d2a4", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f660b159f4a050bc631930d20643d5533541d46/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f660b159f4a050bc631930d20643d5533541d46/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=4f660b159f4a050bc631930d20643d5533541d46", "patch": "@@ -13269,6 +13269,7 @@ distribute_notes (rtx notes, rtx from_insn, rtx i3, rtx i2, rtx elim_i2,\n \tcase REG_NORETURN:\n \tcase REG_SETJMP:\n \tcase REG_TM:\n+\tcase REG_CALL_DECL:\n \t  /* These notes must remain with the call.  It should not be\n \t     possible for both I2 and I3 to be a call.  */\n \t  if (CALL_P (i3))"}, {"sha": "e3fd0a5132b41311f9581fb320b6b04cd90fdc8f", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f660b159f4a050bc631930d20643d5533541d46/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f660b159f4a050bc631930d20643d5533541d46/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=4f660b159f4a050bc631930d20643d5533541d46", "patch": "@@ -3427,6 +3427,7 @@ try_split (rtx pat, rtx trial, int last)\n   int probability;\n   rtx insn_last, insn;\n   int njumps = 0;\n+  rtx call_insn = NULL_RTX;\n \n   /* We're not good at redistributing frame information.  */\n   if (RTX_FRAME_RELATED_P (trial))\n@@ -3499,6 +3500,9 @@ try_split (rtx pat, rtx trial, int last)\n \t  {\n \t    rtx next, *p;\n \n+\t    gcc_assert (call_insn == NULL_RTX);\n+\t    call_insn = insn;\n+\n \t    /* Add the old CALL_INSN_FUNCTION_USAGE to whatever the\n \t       target may have explicitly specified.  */\n \t    p = &CALL_INSN_FUNCTION_USAGE (insn);\n@@ -3571,6 +3575,11 @@ try_split (rtx pat, rtx trial, int last)\n \t  fixup_args_size_notes (NULL_RTX, insn_last, INTVAL (XEXP (note, 0)));\n \t  break;\n \n+\tcase REG_CALL_DECL:\n+\t  gcc_assert (call_insn != NULL_RTX);\n+\t  add_reg_note (call_insn, REG_NOTE_KIND (note), XEXP (note, 0));\n+\t  break;\n+\n \tdefault:\n \t  break;\n \t}"}, {"sha": "831fe82272aa2b4dfd91d7c28fadf6ba60e33a29", "filename": "gcc/reg-notes.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f660b159f4a050bc631930d20643d5533541d46/gcc%2Freg-notes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f660b159f4a050bc631930d20643d5533541d46/gcc%2Freg-notes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-notes.def?ref=4f660b159f4a050bc631930d20643d5533541d46", "patch": "@@ -211,3 +211,8 @@ REG_NOTE (ARGS_SIZE)\n    that the return value of a call can be used to reinitialize a\n    pseudo reg.  */\n REG_NOTE (RETURNED)\n+\n+/* Used to mark a call with the function decl called by the call.\n+   The decl might not be available in the call due to splitting of the call\n+   insn.  This note is a SYMBOL_REF.  */\n+REG_NOTE (CALL_DECL)"}]}