{"sha": "cff48d8f76463f870df7340253373b7c84b52f7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZmNDhkOGY3NjQ2M2Y4NzBkZjczNDAyNTMzNzNiN2M4NGI1MmY3Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-06-30T16:19:11Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-06-30T16:19:11Z"}, "message": "rtl.def (CONSTANT_P_RTX): New.\n\n        * rtl.def (CONSTANT_P_RTX): New.\n        * rtl.h (CONSTANT_P): Recognize it.\n        * cse.c (fold_rtx): Eliminate it.\n        * expr.c (can_handle_constant_p): New variable.\n        (init_expr_once): Initialize it.\n        (expand_builtin): Generate CONSTANT_P_RTX if the expression is not\n        immediately recognizable as a constant.\n\nFrom-SVN: r20846", "tree": {"sha": "5176e675ace86f9c1b331ce84ab33709cfe7e130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5176e675ace86f9c1b331ce84ab33709cfe7e130"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cff48d8f76463f870df7340253373b7c84b52f7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff48d8f76463f870df7340253373b7c84b52f7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cff48d8f76463f870df7340253373b7c84b52f7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff48d8f76463f870df7340253373b7c84b52f7f/comments", "author": null, "committer": null, "parents": [{"sha": "84001dd054fd6514c6104b829320733db1ec7cd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84001dd054fd6514c6104b829320733db1ec7cd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84001dd054fd6514c6104b829320733db1ec7cd7"}], "stats": {"total": 79, "additions": 72, "deletions": 7}, "files": [{"sha": "59396a032a4de439f49faf7d4719d61361e9f4a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff48d8f76463f870df7340253373b7c84b52f7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff48d8f76463f870df7340253373b7c84b52f7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cff48d8f76463f870df7340253373b7c84b52f7f", "patch": "@@ -1,3 +1,19 @@\n+Tue Jun 30 16:01:01 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* rtl.def (CONSTANT_P_RTX): New.\n+\t* rtl.h (CONSTANT_P): Recognize it.\n+\t* cse.c (fold_rtx): Eliminate it.\n+\t* expr.c (can_handle_constant_p): New variable.\n+\t(init_expr_once): Initialize it.\n+\t(expand_builtin): Generate CONSTANT_P_RTX if the expression is not\n+\timmediately recognizable as a constant.\n+\n+\t* alpha.c (reg_or_6bit_operand): Recognize CONSTANT_P_RTX.\n+\t(reg_or_8bit_operand, cint8_operand, add_operand): Likewise.\n+\t(sext_add_operand, and_operand, or_operand): Likewise.\n+\t(reg_or_cint_operand, some_operand, input_operand): Likewise.\n+\t* alpha.h (PREDICATE_CODES): Add CONSTANT_P_RTX where needed.\n+\n 1998-06-30  Benjamin Kosnik  <bkoz@bliss.nabi.net>\n \n         * dbxout.c (dbxout_type_methods): Remove warn_template_debugging."}, {"sha": "bd2aa567d23a0098de5bab111f222a97dbea4f92", "filename": "gcc/cse.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff48d8f76463f870df7340253373b7c84b52f7f/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff48d8f76463f870df7340253373b7c84b52f7f/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=cff48d8f76463f870df7340253373b7c84b52f7f", "patch": "@@ -5715,6 +5715,12 @@ fold_rtx (x, insn)\n \t\t\t\t\tconst_arg1 ? const_arg1 : folded_arg1,\n \t\t\t\t\tconst_arg2 ? const_arg2 : XEXP (x, 2));\n       break;\n+\n+    case 'x':\n+      /* Always eliminate CONSTANT_P_RTX at this stage. */\n+      if (code == CONSTANT_P_RTX)\n+\treturn (const_arg0 ? const1_rtx : const0_rtx);\n+      break;\n     }\n \n   return new ? new : x;"}, {"sha": "79c1f9257bd463e6b7c547ad7795410c861d812b", "filename": "gcc/expr.c", "status": "modified", "additions": 43, "deletions": 6, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff48d8f76463f870df7340253373b7c84b52f7f/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff48d8f76463f870df7340253373b7c84b52f7f/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=cff48d8f76463f870df7340253373b7c84b52f7f", "patch": "@@ -104,6 +104,11 @@ static rtx saveregs_value;\n /* Similarly for __builtin_apply_args.  */\n static rtx apply_args_value;\n \n+/* Nonzero if the machine description has been fixed to accept\n+   CONSTANT_P_RTX patterns.  We will emit a warning and continue\n+   if we find we must actually use such a beast.  */\n+static int can_handle_constant_p;\n+\n /* Don't check memory usage, since code is being emitted to check a memory\n    usage.  Used when flag_check_memory_usage is true, to avoid infinite\n    recursion.  */\n@@ -239,6 +244,7 @@ init_expr_once ()\n {\n   rtx insn, pat;\n   enum machine_mode mode;\n+  int num_clobbers;\n   rtx mem, mem1;\n   char *free_point;\n \n@@ -263,7 +269,6 @@ init_expr_once ()\n     {\n       int regno;\n       rtx reg;\n-      int num_clobbers;\n \n       direct_load[(int) mode] = direct_store[(int) mode] = 0;\n       PUT_MODE (mem, mode);\n@@ -304,10 +309,18 @@ init_expr_once ()\n \t  }\n     }\n \n+  /* Find out if CONSTANT_P_RTX is accepted.  */\n+  SET_DEST (pat) = gen_rtx_REG (TYPE_MODE (integer_type_node),\n+\t\t\t        FIRST_PSEUDO_REGISTER);\n+  SET_SRC (pat) = gen_rtx_CONSTANT_P_RTX (TYPE_MODE (integer_type_node),\n+\t\t\t\t\t  SET_DEST (pat));\n+  if (recog (pat, insn, &num_clobbers) >= 0)\n+    can_handle_constant_p = 1;\n+\n   end_sequence ();\n   obfree (free_point);\n }\n-      \n+\n /* This is run at the start of compiling a function.  */\n \n void\n@@ -8566,10 +8579,34 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t  tree arg = TREE_VALUE (arglist);\n \n \t  STRIP_NOPS (arg);\n-\t  return (TREE_CODE_CLASS (TREE_CODE (arg)) == 'c'\n-\t\t  || (TREE_CODE (arg) == ADDR_EXPR\n-\t\t      && TREE_CODE (TREE_OPERAND (arg, 0)) == STRING_CST)\n-\t\t  ? const1_rtx : const0_rtx);\n+\t  if (really_constant_p (arg)\n+\t      || (TREE_CODE (arg) == ADDR_EXPR\n+\t\t  && TREE_CODE (TREE_OPERAND (arg, 0)) == STRING_CST))\n+\t    return const1_rtx;\n+\n+\t  /* Only emit CONSTANT_P_RTX if CSE will be run. \n+\t     Moreover, we don't want to expand trees that have side effects,\n+\t     as the original __builtin_constant_p did not evaluate its      \n+\t     argument at all, and we would break existing usage by changing \n+\t     this.  This quirk was generally useful, eliminating a bit of hair\n+\t     in the writing of the macros that use this function.  Now the    \n+\t     same thing can be better accomplished in an inline function.  */\n+\n+\t  if (! cse_not_expected && ! TREE_SIDE_EFFECTS (arg))\n+\t    {\n+\t      /* Lazy fixup of old code: issue a warning and fail the test.  */\n+\t      if (! can_handle_constant_p)\n+\t\t{\n+\t\t  warning (\"Delayed evaluation of __builtin_constant_p not supported on this target.\");\n+\t\t  warning (\"Please report this as a bug to egcs-bugs@cygnus.com.\");\n+\t\t  return const0_rtx;\n+\t\t}\n+\t      return gen_rtx_CONSTANT_P_RTX (TYPE_MODE (integer_type_node),\n+\t\t\t\t             expand_expr (arg, NULL_RTX,\n+\t\t\t\t\t\t\t  VOIDmode, 0));\n+\t    }\n+\n+\t  return const0_rtx;\n \t}\n \n     case BUILT_IN_FRAME_ADDRESS:"}, {"sha": "1e45157b450da3d14e6171e7725566bcb7bfa15b", "filename": "gcc/rtl.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff48d8f76463f870df7340253373b7c84b52f7f/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff48d8f76463f870df7340253373b7c84b52f7f/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=cff48d8f76463f870df7340253373b7c84b52f7f", "patch": "@@ -842,6 +842,11 @@ DEF_RTL_EXPR(RANGE_VAR, \"range_var\", \"eti\", 'x')\n    0 is the live bitmap.  Operand 1 is the original block number.  */\n DEF_RTL_EXPR(RANGE_LIVE, \"range_live\", \"bi\", 'x')\n \n+/* A unary `__builtin_constant_p' expression.  These are only emitted\n+   during RTL generation, and then only if optimize > 0.  They are\n+   eliminated by the first CSE pass. */\n+DEF_RTL_EXPR(CONSTANT_P_RTX, \"constant_p\", \"e\", 'x')\n+\n /*\n Local variables:\n mode:c"}, {"sha": "94a8360b3143dd9d888700f70b66afbb2ffc18d3", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff48d8f76463f870df7340253373b7c84b52f7f/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff48d8f76463f870df7340253373b7c84b52f7f/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=cff48d8f76463f870df7340253373b7c84b52f7f", "patch": "@@ -219,7 +219,8 @@ typedef struct rtvec_def{\n #define CONSTANT_P(X)   \\\n   (GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n    || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST_DOUBLE\t\t\\\n-   || GET_CODE (X) == CONST || GET_CODE (X) == HIGH)\n+   || GET_CODE (X) == CONST || GET_CODE (X) == HIGH\t\t\t\\\n+   || GET_CODE (X) == CONSTANT_P_RTX)\n \n /* General accessor macros for accessing the fields of an rtx.  */\n "}]}