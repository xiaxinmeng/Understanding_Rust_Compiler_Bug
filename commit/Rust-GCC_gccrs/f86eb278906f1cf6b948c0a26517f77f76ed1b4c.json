{"sha": "f86eb278906f1cf6b948c0a26517f77f76ed1b4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg2ZWIyNzg5MDZmMWNmNmI5NDhjMGEyNjUxN2Y3N2Y3NmVkMWI0Yw==", "commit": {"author": {"name": "Vincent Celier", "email": "celier@adacore.com", "date": "2007-08-14T08:48:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-14T08:48:16Z"}, "message": "gnatls.adb: (Corresponding_Sdep_Entry): Always return a value\n\n2007-08-14  Vincent Celier  <celier@adacore.com>\n\n\t* gnatls.adb: (Corresponding_Sdep_Entry): Always return a value\n\t(Output_Source): Do nothing if parameter is No_Sdep_Id\n\n\t* make.adb (Gnatmake): Do not rebuild an archive simply because a\n\tshared library it imports has a later time stamp.\n\t(Check): Resolve the symbolic links in the path name of the object\n\tdirectory.\n\tCheck that the ALI file is in the correct object directory\n\tCheck if a file name does not correspond to the mapping of units\n\tto file names.\n\t(Display_Version): New procedure\n\t(Initialize): Process switches --version and --help\n\tUse type Path_Name_Type for path name\n\nFrom-SVN: r127453", "tree": {"sha": "08270055329a5fa9fa474c6f1bc0b35005e977d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08270055329a5fa9fa474c6f1bc0b35005e977d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f86eb278906f1cf6b948c0a26517f77f76ed1b4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f86eb278906f1cf6b948c0a26517f77f76ed1b4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f86eb278906f1cf6b948c0a26517f77f76ed1b4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f86eb278906f1cf6b948c0a26517f77f76ed1b4c/comments", "author": {"login": "vcelier", "id": 8888056, "node_id": "MDQ6VXNlcjg4ODgwNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/8888056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vcelier", "html_url": "https://github.com/vcelier", "followers_url": "https://api.github.com/users/vcelier/followers", "following_url": "https://api.github.com/users/vcelier/following{/other_user}", "gists_url": "https://api.github.com/users/vcelier/gists{/gist_id}", "starred_url": "https://api.github.com/users/vcelier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vcelier/subscriptions", "organizations_url": "https://api.github.com/users/vcelier/orgs", "repos_url": "https://api.github.com/users/vcelier/repos", "events_url": "https://api.github.com/users/vcelier/events{/privacy}", "received_events_url": "https://api.github.com/users/vcelier/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7a912730535b73d3bece5a80a91efca68b6cb74a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a912730535b73d3bece5a80a91efca68b6cb74a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a912730535b73d3bece5a80a91efca68b6cb74a"}], "stats": {"total": 535, "additions": 411, "deletions": 124}, "files": [{"sha": "bd6af56f9c67fb572d500ad4565cc724b570cd10", "filename": "gcc/ada/gnatls.adb", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f86eb278906f1cf6b948c0a26517f77f76ed1b4c/gcc%2Fada%2Fgnatls.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f86eb278906f1cf6b948c0a26517f77f76ed1b4c/gcc%2Fada%2Fgnatls.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatls.adb?ref=f86eb278906f1cf6b948c0a26517f77f76ed1b4c", "patch": "@@ -263,6 +263,7 @@ procedure Gnatls is\n       Write_Eol;\n       Error_Msg (\"wrong ALI format, can't find dependency line for $ in {\");\n       Exit_Program (E_Fatal);\n+      return No_Sdep_Id;\n    end Corresponding_Sdep_Entry;\n \n    -------------------------\n@@ -899,13 +900,21 @@ procedure Gnatls is\n    -------------------\n \n    procedure Output_Source (Sdep_I : Sdep_Id) is\n-      Stamp       : constant Time_Stamp_Type := Sdep.Table (Sdep_I).Stamp;\n-      Checksum    : constant Word            := Sdep.Table (Sdep_I).Checksum;\n-      FS          : File_Name_Type           := Sdep.Table (Sdep_I).Sfile;\n+      Stamp       : Time_Stamp_Type;\n+      Checksum    : Word;\n+      FS          : File_Name_Type;\n       Status      : File_Status;\n       Object_Name : String_Access;\n \n    begin\n+      if Sdep_I = No_Sdep_Id then\n+         return;\n+      end if;\n+\n+      Stamp    := Sdep.Table (Sdep_I).Stamp;\n+      Checksum := Sdep.Table (Sdep_I).Checksum;\n+      FS       := Sdep.Table (Sdep_I).Sfile;\n+\n       if Print_Source then\n          Find_Status (FS, Stamp, Checksum, Status);\n          Get_Name_String (FS);"}, {"sha": "aa8e5f7d2f280f5d599f590eba1490e8aec4018c", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 399, "deletions": 121, "changes": 520, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f86eb278906f1cf6b948c0a26517f77f76ed1b4c/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f86eb278906f1cf6b948c0a26517f77f76ed1b4c/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=f86eb278906f1cf6b948c0a26517f77f76ed1b4c", "patch": "@@ -63,9 +63,9 @@ with Ada.Exceptions;            use Ada.Exceptions;\n with Ada.Command_Line;          use Ada.Command_Line;\n \n with GNAT.Directory_Operations; use GNAT.Directory_Operations;\n+with GNAT.Case_Util;            use GNAT.Case_Util;\n+with GNAT.OS_Lib;               use GNAT.OS_Lib;\n \n-with System.Case_Util;          use System.Case_Util;\n-with System.OS_Lib;             use System.OS_Lib;\n with System.HTable;\n \n package body Make is\n@@ -179,7 +179,7 @@ package body Make is\n \n    package Q is new Table.Table (\n      Table_Component_Type => Q_Record,\n-     Table_Index_Type     => Integer,\n+     Table_Index_Type     => Natural,\n      Table_Low_Bound      => 0,\n      Table_Initial        => 4000,\n      Table_Increment      => 100,\n@@ -392,6 +392,8 @@ package body Make is\n \n    Shared_String           : aliased String := \"-shared\";\n    Force_Elab_Flags_String : aliased String := \"-F\";\n+   Version_Switch          : constant String := \"--version\";\n+   Help_Switch             : constant String := \"--help\";\n \n    No_Shared_Switch : aliased Argument_List := (1 .. 0 => null);\n    Shared_Switch    : aliased Argument_List := (1 => Shared_String'Access);\n@@ -466,6 +468,9 @@ package body Make is\n    --  A table to keep dependencies, to be able to decide if an executable\n    --  is obsolete. More explanation needed ???\n \n+--     procedure Add_Dependency (S : File_Name_Type; On : File_Name_Type);\n+--     --  Add one entry in table Dependencies\n+\n    ----------------------------\n    -- Arguments and Switches --\n    ----------------------------\n@@ -483,7 +488,7 @@ package body Make is\n    Arguments_Project : Project_Id;\n    --  Project id, if any, of the source to be compiled\n \n-   Arguments_Path_Name : File_Name_Type;\n+   Arguments_Path_Name : Path_Name_Type;\n    --  Full path of the source to be compiled, when Arguments_Project is not\n    --  No_Project.\n \n@@ -504,6 +509,9 @@ package body Make is\n    -- Misc Routines --\n    -------------------\n \n+   procedure Display_Version;\n+   --  Display version when switch --version is used\n+\n    procedure List_Depend;\n    --  Prints to standard output the list of object dependencies. This list\n    --  can be used directly in a Makefile. A call to Compile_Sources must\n@@ -512,11 +520,6 @@ package body Make is\n    --  no additional ALI files should be scanned between the two calls (i.e.\n    --  between the call to Compile_Sources and List_Depend.)\n \n-   procedure Inform (N : Name_Id; Msg : String);\n-   procedure Inform (N : File_Name_Type; Msg : String);\n-   procedure Inform (Msg : String);\n-   --  Prints out the program name followed by a colon, N (if present) and Msg\n-\n    procedure List_Bad_Compilations;\n    --  Prints out the list of all files for which the compilation failed\n \n@@ -650,11 +653,11 @@ package body Make is\n    --  Given by the command line. Will be used, if non null\n \n    Gcc_Path        : String_Access :=\n-                       System.OS_Lib.Locate_Exec_On_Path (Gcc.all);\n+                       GNAT.OS_Lib.Locate_Exec_On_Path (Gcc.all);\n    Gnatbind_Path   : String_Access :=\n-                       System.OS_Lib.Locate_Exec_On_Path (Gnatbind.all);\n+                       GNAT.OS_Lib.Locate_Exec_On_Path (Gnatbind.all);\n    Gnatlink_Path   : String_Access :=\n-                       System.OS_Lib.Locate_Exec_On_Path (Gnatlink.all);\n+                       GNAT.OS_Lib.Locate_Exec_On_Path (Gnatlink.all);\n    --  Path for compiler, binder, linker programs, defaulted now for gnatdist.\n    --  Changed later if overridden on command line.\n \n@@ -1018,6 +1021,16 @@ package body Make is\n       Last_Argument := Last_Argument + Args'Length;\n    end Add_Arguments;\n \n+--     --------------------\n+--     -- Add_Dependency --\n+--     --------------------\n+--\n+--     procedure Add_Dependency (S : File_Name_Type; On : File_Name_Type) is\n+--     begin\n+--        Dependencies.Increment_Last;\n+--        Dependencies.Table (Dependencies.Last) := (S, On);\n+--     end Add_Dependency;\n+\n    ----------------------------\n    -- Add_Library_Search_Dir --\n    ----------------------------\n@@ -1315,15 +1328,15 @@ package body Make is\n       Bind_Last := Bind_Last + 1;\n       Bind_Args (Bind_Last) := new String'(Name_Buffer (1 .. Name_Len));\n \n-      System.OS_Lib.Normalize_Arguments (Bind_Args (Args'First .. Bind_Last));\n+      GNAT.OS_Lib.Normalize_Arguments (Bind_Args (Args'First .. Bind_Last));\n \n       Display (Gnatbind.all, Bind_Args (Args'First .. Bind_Last));\n \n       if Gnatbind_Path = null then\n          Make_Failed (\"error, unable to locate \", Gnatbind.all);\n       end if;\n \n-      System.OS_Lib.Spawn\n+      GNAT.OS_Lib.Spawn\n         (Gnatbind_Path.all, Bind_Args (Args'First .. Bind_Last), Success);\n \n       if not Success then\n@@ -1536,6 +1549,10 @@ package body Make is\n       Switch_Found : Boolean;\n       --  True if a given switch has been found\n \n+      ALI_Project : Project_Id;\n+      --  If the ALI file is in the object directory of a project, this is\n+      --  the project id.\n+\n    --  Start of processing for Check\n \n    begin\n@@ -1779,6 +1796,228 @@ package body Make is\n                      Verbose_Msg (New_Spec, \"old spec missing\");\n                   end if;\n                end if;\n+\n+            elsif Main_Project /= No_Project then\n+\n+               --  Check if a file name does not correspond to the mapping of\n+               --  units to file names.\n+\n+               declare\n+                  WR        : With_Record;\n+                  Unit_Name : Name_Id;\n+                  UID       : Prj.Unit_Index;\n+                  U_Data    : Unit_Data;\n+\n+               begin\n+                  U_Chk :\n+                  for U in ALIs.Table (ALI).First_Unit ..\n+                           ALIs.Table (ALI).Last_Unit\n+                  loop\n+                     W_Check :\n+                     for W in Units.Table (U).First_With\n+                          ..\n+                        Units.Table (U).Last_With\n+                     loop\n+                        WR := Withs.Table (W);\n+\n+                        if WR.Sfile /= No_File then\n+                           Get_Name_String (WR.Uname);\n+                           Name_Len := Name_Len - 2;\n+                           Unit_Name := Name_Find;\n+\n+                           UID := Units_Htable.Get\n+                                   (Project_Tree.Units_HT, Unit_Name);\n+\n+                           if UID /= Prj.No_Unit_Index then\n+                              U_Data := Project_Tree.Units.Table (UID);\n+\n+                              if U_Data.File_Names (Body_Part).Name /= WR.Sfile\n+                                and then\n+                                  U_Data.File_Names (Specification).Name /=\n+                                                                       WR.Sfile\n+                              then\n+                                 ALI := No_ALI_Id;\n+\n+                                 Verbose_Msg\n+                                   (Unit_Name, \" sources does not include \",\n+                                    Name_Id (WR.Sfile));\n+\n+                                 return;\n+                              end if;\n+                           end if;\n+                        end if;\n+                     end loop W_Check;\n+                  end loop U_Chk;\n+               end;\n+\n+               --  Check that the ALI file is in the correct object directory.\n+               --  If it is in the object directory of a project that is\n+               --  extended and it depends on a source that is in one of its\n+               --  extending projects, then the ALI file is not in the correct\n+               --  object directory.\n+\n+               --  First, find the project of this ALI file. As there may be\n+               --  several projects with the same object directory, we first\n+               --  need to find the project of the source.\n+\n+               ALI_Project := No_Project;\n+\n+               declare\n+                  Udata : Prj.Unit_Data;\n+\n+               begin\n+                  for U in 1 .. Unit_Table.Last (Project_Tree.Units) loop\n+                     Udata := Project_Tree.Units.Table (U);\n+\n+                     if Udata.File_Names (Body_Part).Name = Source_File then\n+                        ALI_Project := Udata.File_Names (Body_Part).Project;\n+                        exit;\n+\n+                     elsif\n+                       Udata.File_Names (Specification).Name = Source_File\n+                     then\n+                        ALI_Project :=\n+                          Udata.File_Names (Specification).Project;\n+                        exit;\n+                     end if;\n+                  end loop;\n+               end;\n+\n+               if ALI_Project = No_Project then\n+                  return;\n+               end if;\n+\n+               declare\n+                  Obj_Dir : Path_Name_Type;\n+                  Res_Obj_Dir : constant String :=\n+                                  Normalize_Pathname\n+                                    (Dir_Name\n+                                      (Get_Name_String (Full_Lib_File)),\n+                                     Resolve_Links  => True,\n+                                     Case_Sensitive => False);\n+\n+               begin\n+                  Name_Len := 0;\n+                  Add_Str_To_Name_Buffer (Res_Obj_Dir);\n+\n+                  if Name_Len > 1 and then\n+                    (Name_Buffer (Name_Len) = '/' or else\n+                       Name_Buffer (Name_Len) = Directory_Separator)\n+                  then\n+                     Name_Len := Name_Len - 1;\n+                  end if;\n+\n+                  Obj_Dir := Name_Find;\n+\n+                  while ALI_Project /= No_Project and then\n+                    Obj_Dir /=\n+                      Project_Tree.Projects.Table\n+                        (ALI_Project).Object_Directory\n+                  loop\n+                     ALI_Project :=\n+                       Project_Tree.Projects.Table (ALI_Project).Extended_By;\n+                  end loop;\n+               end;\n+\n+               if ALI_Project = No_Project then\n+                  ALI := No_ALI_Id;\n+\n+                  Verbose_Msg\n+                    (Lib_File, \" wrong object directory\");\n+                  return;\n+               end if;\n+\n+               --  If the ALI project is not extended, then it must be in\n+               --  the correct object directory.\n+\n+               if Project_Tree.Projects.Table (ALI_Project).Extended_By =\n+                 No_Project\n+               then\n+                  return;\n+               end if;\n+\n+               --  Count the extending projects\n+\n+               declare\n+                  Num_Ext : Natural;\n+                  Proj    : Project_Id;\n+\n+               begin\n+                  Num_Ext := 0;\n+                  Proj := ALI_Project;\n+                  loop\n+                     Proj := Project_Tree.Projects.Table (Proj).Extended_By;\n+                     exit when Proj = No_Project;\n+                     Num_Ext := Num_Ext + 1;\n+                  end loop;\n+\n+                  --  Make a list of the extending projects\n+\n+                  declare\n+                     Projects : array (1 .. Num_Ext) of Project_Id;\n+                     Dep      : Sdep_Record;\n+                     OK       : Boolean := True;\n+\n+                  begin\n+                     Proj := ALI_Project;\n+                     for J in Projects'Range loop\n+                        Proj := Project_Tree.Projects.Table (Proj).Extended_By;\n+                        Projects (J) := Proj;\n+                     end loop;\n+\n+                     --  Now check if any of the dependant sources are in\n+                     --  any of these extending projects.\n+\n+                     D_Chk :\n+                     for D in ALIs.Table (ALI).First_Sdep ..\n+                       ALIs.Table (ALI).Last_Sdep\n+                     loop\n+                        Dep := Sdep.Table (D);\n+\n+                        Proj := No_Project;\n+\n+                        Unit_Loop :\n+                        for\n+                          UID in 1 .. Unit_Table.Last (Project_Tree.Units)\n+                        loop\n+                           if Project_Tree.Units.Table (UID).\n+                             File_Names (Body_Part).Name = Dep.Sfile\n+                           then\n+                              Proj := Project_Tree.Units.Table (UID).\n+                                File_Names (Body_Part).Project;\n+\n+                           elsif Project_Tree.Units.Table (UID).\n+                             File_Names (Specification).Name = Dep.Sfile\n+                           then\n+                              Proj := Project_Tree.Units.Table (UID).\n+                                File_Names (Specification).Project;\n+                           end if;\n+\n+                           --  If a source is in a project, check if it is one\n+                           --  in the list.\n+\n+                           if Proj /= No_Project then\n+                              for J in Projects'Range loop\n+                                 if Proj = Projects (J) then\n+                                    OK := False;\n+                                    exit D_Chk;\n+                                 end if;\n+                              end loop;\n+\n+                              exit Unit_Loop;\n+                           end if;\n+                        end loop Unit_Loop;\n+                     end loop D_Chk;\n+\n+                     --  If one of the dependent sources is in one project of\n+                     --  the list, then we must recompile.\n+\n+                     if not OK then\n+                        ALI := No_ALI_Id;\n+                        Verbose_Msg (Lib_File, \" wrong object directory\");\n+                     end if;\n+                  end;\n+               end;\n             end if;\n          end if;\n       end if;\n@@ -2033,7 +2272,7 @@ package body Make is\n                Add_Arguments (The_Saved_Gcc_Switches.all);\n \n             elsif not Project_Tree.Projects.Table\n-                         (Arguments_Project).Externally_Built\n+                        (Arguments_Project).Externally_Built\n             then\n                --  We get the project directory for the relative path\n                --  switches and arguments.\n@@ -2570,7 +2809,7 @@ package body Make is\n                Prj.Env.Set_Ada_Paths (Arguments_Project, Project_Tree, True);\n \n                if not Unique_Compile\n-                 and then MLib.Tgt.Support_For_Libraries /= MLib.Tgt.None\n+                 and then MLib.Tgt.Support_For_Libraries /= Prj.None\n                then\n                   declare\n                      The_Data : Project_Data :=\n@@ -2609,13 +2848,12 @@ package body Make is\n \n                Change_To_Object_Directory (Arguments_Project);\n \n-               Pid := Compile (Arguments_Path_Name, Lib_File, Source_Index,\n-                               Arguments (1 .. Last_Argument));\n-\n-               --  Register compiled unit into Full_Source_File as this is the\n-               --  variable used to report errors.\n-\n-               Full_Source_File := Arguments_Path_Name;\n+               Pid :=\n+                 Compile\n+                   (File_Name_Type (Arguments_Path_Name),\n+                    Lib_File,\n+                    Source_Index,\n+                    Arguments (1 .. Last_Argument));\n                Process_Created := True;\n             end if;\n \n@@ -2817,8 +3055,7 @@ package body Make is\n          Comp_Last := Comp_Last + 1;\n          Comp_Args (Comp_Last) := new String'(Name_Buffer (1 .. Name_Len));\n \n-         System.OS_Lib.Normalize_Arguments\n-           (Comp_Args (Args'First .. Comp_Last));\n+         GNAT.OS_Lib.Normalize_Arguments (Comp_Args (Args'First .. Comp_Last));\n \n          Comp_Last := Comp_Last + 1;\n          Comp_Args (Comp_Last) := new String'(\"-gnatez\");\n@@ -2830,7 +3067,7 @@ package body Make is\n          end if;\n \n          return\n-           System.OS_Lib.Non_Blocking_Spawn\n+           GNAT.OS_Lib.Non_Blocking_Spawn\n              (Gcc_Path.all, Comp_Args (Args'First .. Comp_Last));\n       end Compile;\n \n@@ -3150,7 +3387,6 @@ package body Make is\n                         if Process_Created then\n                            if Pid = Invalid_Pid then\n                               Record_Failure (Full_Source_File, Source_Unit);\n-\n                            else\n                               Add_Process\n                                 (Pid,\n@@ -3309,7 +3545,7 @@ package body Make is\n                         if Main_Project /= No_Project then\n                            declare\n                               Unit_Name : Name_Id;\n-                              Uid       : Prj.Unit_Id;\n+                              Uid       : Prj.Unit_Index;\n                               Udata     : Unit_Data;\n \n                            begin\n@@ -3320,7 +3556,7 @@ package body Make is\n                                 Units_Htable.Get\n                                   (Project_Tree.Units_HT, Unit_Name);\n \n-                              if Uid /= Prj.No_Unit then\n+                              if Uid /= Prj.No_Unit_Index then\n                                  Udata := Project_Tree.Units.Table (Uid);\n \n                                  if Udata.File_Names (Body_Part).Name /=\n@@ -3365,7 +3601,8 @@ package body Make is\n                               Debug_Msg (\"Skipping internal file:\", Sfile);\n \n                            else\n-                              Insert_Q (Sfile, Uname, Source_Index);\n+                              Insert_Q\n+                                (Sfile, Withs.Table (K).Uname, Source_Index);\n                               Mark (Sfile, Source_Index);\n                            end if;\n                         end if;\n@@ -3507,7 +3744,7 @@ package body Make is\n       Last   : Natural := 0;\n \n       function Absolute_Path\n-        (Path    : File_Name_Type;\n+        (Path    : Path_Name_Type;\n          Project : Project_Id) return String;\n       --  Returns an absolute path for a configuration pragmas file\n \n@@ -3516,7 +3753,7 @@ package body Make is\n       -------------------\n \n       function Absolute_Path\n-        (Path    : File_Name_Type;\n+        (Path    : Path_Name_Type;\n          Project : Project_Id) return String\n       is\n       begin\n@@ -3597,9 +3834,8 @@ package body Make is\n             declare\n                Path : constant String :=\n                         Absolute_Path\n-                          (File_Name_Type (Global_Attribute.Value),\n+                          (Path_Name_Type (Global_Attribute.Value),\n                            Global_Attribute.Project);\n-\n             begin\n                if not Is_Regular_File (Path) then\n                   Make_Failed\n@@ -3636,9 +3872,8 @@ package body Make is\n             declare\n                Path : constant String :=\n                         Absolute_Path\n-                          (File_Name_Type (Local_Attribute.Value),\n+                          (Path_Name_Type (Local_Attribute.Value),\n                            Local_Attribute.Project);\n-\n             begin\n                if not Is_Regular_File (Path) then\n                   Make_Failed\n@@ -3825,6 +4060,26 @@ package body Make is\n       Display_Executed_Programs := Display;\n    end Display_Commands;\n \n+   ---------------------\n+   -- Display_Version --\n+   ---------------------\n+\n+   procedure Display_Version is\n+   begin\n+      Write_Str (\"GNATMAKE \");\n+      Write_Str (Gnatvsn.Gnat_Version_String);\n+      Write_Eol;\n+\n+      Write_Str (\"Copyright (C) 1995-\");\n+      Write_Str (Gnatvsn.Current_Year);\n+      Write_Str (\", Free Software Foundation, Inc.\");\n+      Write_Eol;\n+\n+      Write_Str (Gnatvsn.Gnat_Free_Software);\n+      Write_Eol;\n+      Write_Eol;\n+   end Display_Version;\n+\n    -------------\n    -- Empty_Q --\n    -------------\n@@ -3870,6 +4125,7 @@ package body Make is\n          Name_Len := 0;\n          Add_Str_To_Name_Buffer (Name (First .. Name'Last));\n          F2 := Name_Find;\n+\n       else\n          F2 := F;\n       end if;\n@@ -4019,15 +4275,13 @@ package body Make is\n                      Real_Path :=\n                        Locate_Regular_File\n                          (Main &\n-                          Get_Name_String\n-                            (Data.Naming.Ada_Body_Suffix),\n+                          Body_Suffix_Of (Project_Tree, \"ada\", Data.Naming),\n                           \"\");\n                      if Real_Path = null then\n                         Real_Path :=\n                           Locate_Regular_File\n                             (Main &\n-                             Get_Name_String\n-                               (Data.Naming.Ada_Spec_Suffix),\n+                             Spec_Suffix_Of (Project_Tree, \"ada\", Data.Naming),\n                              \"\");\n                      end if;\n \n@@ -4140,6 +4394,7 @@ package body Make is\n \n       begin\n          Tempdir.Create_Temp_File (Mapping_FD, Mapping_Path);\n+         Record_Temp_File (Mapping_Path);\n \n          if Mapping_FD /= Invalid_FD then\n \n@@ -4150,15 +4405,14 @@ package body Make is\n             loop\n                declare\n                   Unit : constant Unit_Data := Project_Tree.Units.Table (J);\n-\n                begin\n                   if Unit.Name /= No_Name then\n \n                      --  If there is a body, put it in the mapping\n \n                      if Unit.File_Names (Body_Part).Name /= No_File\n-                       and then Unit.File_Names (Body_Part).Project\n-                       /= No_Project\n+                       and then Unit.File_Names (Body_Part).Project /=\n+                                                            No_Project\n                      then\n                         Get_Name_String (Unit.Name);\n                         Name_Buffer (Name_Len + 1 .. Name_Len + 2) := \"%b\";\n@@ -4175,15 +4429,15 @@ package body Make is\n \n                      elsif Unit.File_Names (Specification).Name /= No_File\n                        and then Unit.File_Names (Specification).Project /=\n-                                                          No_Project\n+                                                                No_Project\n                      then\n                         Get_Name_String (Unit.Name);\n                         Name_Buffer (Name_Len + 1 .. Name_Len + 2) := \"%s\";\n                         Name_Len := Name_Len + 2;\n                         ALI_Unit := Name_Find;\n                         ALI_Name :=\n                           Lib_File_Name\n-                           (Unit.File_Names (Specification).Display_Name);\n+                            (Unit.File_Names (Specification).Display_Name);\n                         ALI_Project :=\n                           Unit.File_Names (Specification).Project;\n \n@@ -4712,26 +4966,26 @@ package body Make is\n                                            not Unique_Compile);\n \n             The_Packages : constant Package_Id :=\n-                                      Project_Tree.Projects.Table\n-                                        (Main_Project).Decl.Packages;\n+                             Project_Tree.Projects.Table\n+                               (Main_Project).Decl.Packages;\n \n             Builder_Package : constant Prj.Package_Id :=\n-                                      Prj.Util.Value_Of\n-                                        (Name        => Name_Builder,\n-                                         In_Packages => The_Packages,\n-                                         In_Tree     => Project_Tree);\n+                                Prj.Util.Value_Of\n+                                  (Name        => Name_Builder,\n+                                   In_Packages => The_Packages,\n+                                   In_Tree     => Project_Tree);\n \n             Binder_Package : constant Prj.Package_Id :=\n-                                      Prj.Util.Value_Of\n-                                        (Name        => Name_Binder,\n-                                         In_Packages => The_Packages,\n-                                         In_Tree     => Project_Tree);\n+                               Prj.Util.Value_Of\n+                                 (Name        => Name_Binder,\n+                                  In_Packages => The_Packages,\n+                                  In_Tree     => Project_Tree);\n \n             Linker_Package : constant Prj.Package_Id :=\n-                                      Prj.Util.Value_Of\n-                                        (Name        => Name_Linker,\n-                                         In_Packages => The_Packages,\n-                                         In_Tree     => Project_Tree);\n+                               Prj.Util.Value_Of\n+                                 (Name        => Name_Linker,\n+                                  In_Packages => The_Packages,\n+                                  In_Tree     => Project_Tree);\n \n          begin\n             --  We fail if we cannot find the main source file\n@@ -4902,6 +5156,7 @@ package body Make is\n \n       begin\n          Targparm.Get_Target_Parameters;\n+\n       exception\n          when Unrecoverable_Error =>\n             Make_Failed (\"*** make failed.\");\n@@ -4943,7 +5198,7 @@ package body Make is\n          --  so that the library is generated.\n \n          if not Unique_Compile\n-           and then MLib.Tgt.Support_For_Libraries /= MLib.Tgt.None\n+           and then MLib.Tgt.Support_For_Libraries /= Prj.None\n          then\n             for Proj in Project_Table.First ..\n                         Project_Table.Last (Project_Tree.Projects)\n@@ -5135,9 +5390,9 @@ package body Make is\n          Gnatlink := Saved_Gnatlink;\n       end if;\n \n-      Gcc_Path       := System.OS_Lib.Locate_Exec_On_Path (Gcc.all);\n-      Gnatbind_Path  := System.OS_Lib.Locate_Exec_On_Path (Gnatbind.all);\n-      Gnatlink_Path  := System.OS_Lib.Locate_Exec_On_Path (Gnatlink.all);\n+      Gcc_Path       := GNAT.OS_Lib.Locate_Exec_On_Path (Gcc.all);\n+      Gnatbind_Path  := GNAT.OS_Lib.Locate_Exec_On_Path (Gnatbind.all);\n+      Gnatlink_Path  := GNAT.OS_Lib.Locate_Exec_On_Path (Gnatlink.all);\n \n       --  If we have specified -j switch both from the project file\n       --  and on the command line, the one from the command line takes\n@@ -5325,7 +5580,7 @@ package body Make is\n                --  have been regenerated.\n \n                if Main_Project /= No_Project\n-                 and then MLib.Tgt.Support_For_Libraries /= MLib.Tgt.None\n+                 and then MLib.Tgt.Support_For_Libraries /= Prj.None\n                  and then (Do_Bind_Step\n                              or Unique_Compile_All_Projects\n                              or not Compile_Only)\n@@ -5403,10 +5658,13 @@ package body Make is\n                                   Project_Table.Last (Project_Tree.Projects)\n                      loop\n                         if Project_Tree.Projects.Table (Proj1).Library\n+                          and then\n+                            Project_Tree.Projects.Table (Proj1).Library_Kind /=\n+                                                                        Static\n                           and then not Project_Tree.Projects.Table\n-                            (Proj1).Need_To_Build_Lib\n+                                         (Proj1).Need_To_Build_Lib\n                           and then not Project_Tree.Projects.Table\n-                            (Proj1).Externally_Built\n+                                         (Proj1).Externally_Built\n                         then\n                            declare\n                               List    : Project_List;\n@@ -5416,7 +5674,7 @@ package body Make is\n \n                               Lib_Timestamp1 : constant Time_Stamp_Type :=\n                                                  Project_Tree.Projects.Table\n-                                                   (Proj1). Library_TS;\n+                                                   (Proj1).Library_TS;\n \n                            begin\n                               List := Project_Tree.Projects.Table (Proj1).\n@@ -5593,11 +5851,13 @@ package body Make is\n                   end if;\n \n                   if Executable_Stamp (1) = ' ' then\n-                     Verbose_Msg (Executable, \"missing.\", Prefix => \"  \");\n+                     if not No_Main_Subprogram then\n+                        Verbose_Msg (Executable, \"missing.\", Prefix => \"  \");\n+                     end if;\n \n                   elsif Youngest_Obj_Stamp (1) = ' ' then\n                      Verbose_Msg\n-                       (Youngest_Obj_File, \"missing.\", Prefix => \"  \");\n+                       (Youngest_Obj_File, \"missing.\",  Prefix => \"  \");\n \n                   elsif Youngest_Obj_Stamp > Executable_Stamp then\n                      Verbose_Msg\n@@ -5672,7 +5932,7 @@ package body Make is\n                --  ensuring that the shared version of libgcc will be used.\n \n                if Main_Project /= No_Project\n-                 and then MLib.Tgt.Support_For_Libraries /= MLib.Tgt.None\n+                 and then MLib.Tgt.Support_For_Libraries /= Prj.None\n                then\n                   for Proj in Project_Table.First ..\n                         Project_Table.Last (Project_Tree.Projects)\n@@ -5783,7 +6043,7 @@ package body Make is\n                   Library_Paths.Set_Last (0);\n                   Library_Projs.Init;\n \n-                  if MLib.Tgt.Support_For_Libraries /= MLib.Tgt.None then\n+                  if MLib.Tgt.Support_For_Libraries /= Prj.None then\n                      --  Check for library projects\n \n                      for Proj1 in Project_Table.First ..\n@@ -6255,39 +6515,6 @@ package body Make is\n       return (B and Ada_Lib_Dir) /= 0;\n    end In_Ada_Lib_Dir;\n \n-   ------------\n-   -- Inform --\n-   ------------\n-\n-   procedure Inform (N : Name_Id; Msg : String) is\n-   begin\n-      Osint.Write_Program_Name;\n-\n-      Write_Str (\": \");\n-\n-      if N /= No_Name then\n-         Write_Str (\"\"\"\");\n-         Write_Name (N);\n-         Write_Str (\"\"\" \");\n-      end if;\n-\n-      Write_Str (Msg);\n-      Write_Eol;\n-   end Inform;\n-\n-   procedure Inform (N : File_Name_Type; Msg : String) is\n-   begin\n-      Inform (Name_Id (N), Msg);\n-   end Inform;\n-\n-   procedure Inform (Msg : String) is\n-   begin\n-      Osint.Write_Program_Name;\n-      Write_Str (\": \");\n-      Write_Str (Msg);\n-      Write_Eol;\n-   end Inform;\n-\n    -----------------------\n    -- Init_Mapping_File --\n    -----------------------\n@@ -6322,8 +6549,14 @@ package body Make is\n            (FD,\n             The_Mapping_File_Names\n               (No_Project, Last_Mapping_File_Names (No_Project)));\n+\n          if FD = Invalid_FD then\n             Make_Failed (\"disk full\");\n+\n+         else\n+            Record_Temp_File\n+              (The_Mapping_File_Names\n+                 (No_Project, Last_Mapping_File_Names (No_Project)));\n          end if;\n \n          Close (FD, Status);\n@@ -6355,6 +6588,8 @@ package body Make is\n \n    procedure Initialize is\n    begin\n+      Prj.Set_Mode (Ada_Only);\n+\n       --  Override default initialization of Check_Object_Consistency\n       --  since this is normally False for GNATBIND, but is True for\n       --  GNATMAKE since we do not need to check source consistency\n@@ -6428,9 +6663,49 @@ package body Make is\n \n       --  Scan the switches and arguments\n \n-      Scan_Args : for Next_Arg in 1 .. Argument_Count loop\n-         Scan_Make_Arg (Argument (Next_Arg), And_Save => True);\n-      end loop Scan_Args;\n+      declare\n+         Args                   : Argument_List (1 .. Argument_Count);\n+         Version_Switch_Present : Boolean := False;\n+         Help_Switch_Present    : Boolean := False;\n+\n+      begin\n+         --  First, scan to detect --version and/or --help\n+\n+         for Next_Arg in 1 .. Argument_Count loop\n+            Args (Next_Arg) := new String'(Argument (Next_Arg));\n+\n+            if Args (Next_Arg).all = Version_Switch then\n+               Version_Switch_Present := True;\n+            elsif Args (Next_Arg).all = Help_Switch then\n+               Help_Switch_Present := True;\n+            end if;\n+         end loop;\n+\n+         --  If --version was used, display version and exit\n+\n+         if Version_Switch_Present then\n+            Set_Standard_Output;\n+            Display_Version;\n+            Exit_Program (E_Success);\n+         end if;\n+\n+         --  If --help was used, display help and exit\n+\n+         if Help_Switch_Present then\n+            Set_Standard_Output;\n+            Makeusg;\n+            Write_Eol;\n+            Write_Line (\"Report bugs to report@adacore.com\");\n+            Exit_Program (E_Success);\n+         end if;\n+\n+         --  Scan again the switch and arguments, now that we are sure that\n+         --  they do not include --version or --help.\n+\n+         Scan_Args : for Next_Arg in Args'Range loop\n+            Scan_Make_Arg (Args (Next_Arg).all, And_Save => True);\n+         end loop Scan_Args;\n+      end;\n \n       if Commands_To_Stdout then\n          Set_Standard_Output;\n@@ -6581,6 +6856,7 @@ package body Make is\n       --  Make sure no project object directory is recorded\n \n       Project_Of_Current_Object_Directory := No_Project;\n+\n    end Initialize;\n \n    ----------------------------\n@@ -6810,6 +7086,7 @@ package body Make is\n                Name_Len := 0;\n                Add_Str_To_Name_Buffer (Name (First .. Name'Last));\n                F2 := Name_Find;\n+\n             else\n                F2 := F;\n             end if;\n@@ -6837,7 +7114,7 @@ package body Make is\n                                  Get_Name_String (Source_File);\n             Saved_Verbosity  : constant Verbosity := Current_Verbosity;\n             Project          : Project_Id         := No_Project;\n-            Path_Name        : File_Name_Type     := No_File;\n+            Path_Name        : Path_Name_Type     := No_Path;\n             Data             : Project_Data;\n \n          begin\n@@ -6917,15 +7194,15 @@ package body Make is\n \n       Link_Args (2 .. Args'Length + 1) :=  Args;\n \n-      System.OS_Lib.Normalize_Arguments (Link_Args);\n+      GNAT.OS_Lib.Normalize_Arguments (Link_Args);\n \n       Display (Gnatlink.all, Link_Args);\n \n       if Gnatlink_Path = null then\n          Make_Failed (\"error, unable to locate \", Gnatlink.all);\n       end if;\n \n-      System.OS_Lib.Spawn (Gnatlink_Path.all, Link_Args, Success);\n+      GNAT.OS_Lib.Spawn (Gnatlink_Path.all, Link_Args, Success);\n    end Link;\n \n    ---------------------------\n@@ -7056,9 +7333,10 @@ package body Make is\n          declare\n             Real_Path : constant String :=\n               Normalize_Pathname\n-                (Dir, Get_Name_String\n+                (Dir,\n+                 Get_Name_String\n                    (Project_Tree.Projects.Table\n-                                  (Main_Project).Display_Directory));\n+                                   (Main_Project).Display_Directory));\n \n          begin\n             if Real_Path'Length = 0 then\n@@ -7123,7 +7401,7 @@ package body Make is\n          List := Project_Tree.Project_Lists.Table (List).Next;\n          Recursive_Compute_Depth\n            (Project => Proj,\n-            Depth   => Depth + 1);\n+            Depth => Depth + 1);\n       end loop;\n \n       --  Visit a project being extended, if any\n@@ -7151,9 +7429,9 @@ package body Make is\n       Exit_Program (E_Fatal);\n    end Report_Compilation_Failed;\n \n-   -----------------------\n-   -- Sigint_Intercpted --\n-   -----------------------\n+   ------------------------\n+   -- Sigint_Intercepted --\n+   ------------------------\n \n    procedure Sigint_Intercepted is\n    begin\n@@ -7596,7 +7874,7 @@ package body Make is\n          then\n             Unique_Compile_All_Projects := True;\n             Unique_Compile   := True;\n-            Compile_Only     := True;\n+            Compile_Only := True;\n             Do_Bind_Step     := False;\n             Do_Link_Step     := False;\n \n@@ -7680,8 +7958,8 @@ package body Make is\n             Operating_Mode := Check_Semantics;\n             Check_Object_Consistency := False;\n             Compile_Only             := True;\n-            Do_Bind_Step             := False;\n-            Do_Link_Step             := False;\n+            Do_Bind_Step                 := False;\n+            Do_Link_Step                 := False;\n \n          elsif Argv (2 .. Argv'Last) = \"nostdlib\" then\n \n@@ -7764,9 +8042,9 @@ package body Make is\n             Name        : String (1 .. Source_File_Name'Length + 3);\n             Last        : Positive := Source_File_Name'Length;\n             Spec_Suffix : constant String :=\n-                            Get_Name_String (Naming.Ada_Spec_Suffix);\n+                            Spec_Suffix_Of (Project_Tree, \"ada\", Naming);\n             Body_Suffix : constant String :=\n-                            Get_Name_String (Naming.Ada_Body_Suffix);\n+                            Body_Suffix_Of (Project_Tree, \"ada\", Naming);\n             Truncated   : Boolean := False;\n \n          begin"}]}