{"sha": "490ceeb4f3ec2a5faa2f265beb68366fbe0c83f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkwY2VlYjRmM2VjMmE1ZmFhMmYyNjViZWI2ODM2NmZiZTBjODNmOQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2004-07-16T12:51:21Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-07-16T12:51:21Z"}, "message": "s390.md: Changed every occurence of BASE_REGISTER to BASE_REGNUM.\n\n2004-07-16  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* config/s390/s390.md: Changed every occurence of BASE_REGISTER\n\tto BASE_REGNUM.\n\t* config/s390/s390.c: Likewise.\n\t* config/s390/s390.h: Likewise.\n\nFrom-SVN: r84817", "tree": {"sha": "1be1409e2710a3191951c8dd8282d56ea89c93e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1be1409e2710a3191951c8dd8282d56ea89c93e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/490ceeb4f3ec2a5faa2f265beb68366fbe0c83f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/490ceeb4f3ec2a5faa2f265beb68366fbe0c83f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/490ceeb4f3ec2a5faa2f265beb68366fbe0c83f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/490ceeb4f3ec2a5faa2f265beb68366fbe0c83f9/comments", "author": null, "committer": null, "parents": [{"sha": "5eb00b77df434bba33479b977ae62f956d27b56f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eb00b77df434bba33479b977ae62f956d27b56f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5eb00b77df434bba33479b977ae62f956d27b56f"}], "stats": {"total": 61, "additions": 34, "deletions": 27}, "files": [{"sha": "44d87efaebf2e3461a19fc59a1fb09fe1d685b86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/490ceeb4f3ec2a5faa2f265beb68366fbe0c83f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/490ceeb4f3ec2a5faa2f265beb68366fbe0c83f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=490ceeb4f3ec2a5faa2f265beb68366fbe0c83f9", "patch": "@@ -1,3 +1,10 @@\n+2004-07-16  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* config/s390/s390.md: Changed every occurence of BASE_REGISTER\n+\tto BASE_REGNUM.\n+\t* config/s390/s390.c: Likewise.\n+\t* config/s390/s390.h: Likewise.\n+\n 2004-07-16  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.md (addsi3, adddi3): Remove special handling"}, {"sha": "cde728a4a3aabeba8f4222c7c85950905d619eb9", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/490ceeb4f3ec2a5faa2f265beb68366fbe0c83f9/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/490ceeb4f3ec2a5faa2f265beb68366fbe0c83f9/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=490ceeb4f3ec2a5faa2f265beb68366fbe0c83f9", "patch": "@@ -1193,7 +1193,7 @@ general_s_operand (register rtx op, enum machine_mode mode,\n \t   is true.  This prevents compares between two literal pool\n \t   entries from being accepted.  */\n \tif (!allow_immediate\n-\t    && addr.base && REGNO (addr.base) == BASE_REGISTER)\n+\t    && addr.base && REGNO (addr.base) == BASE_REGNUM)\n \t  return 0;\n \treturn 1;\n \n@@ -2155,9 +2155,9 @@ s390_decompose_address (register rtx addr, struct s390_address *out)\n     {\n       /* Either base or index must be free to hold the base register.  */\n       if (!base)\n-        base = gen_rtx_REG (Pmode, BASE_REGISTER);\n+        base = gen_rtx_REG (Pmode, BASE_REGNUM);\n       else if (!indx)\n-        indx = gen_rtx_REG (Pmode, BASE_REGISTER);\n+        indx = gen_rtx_REG (Pmode, BASE_REGNUM);\n       else\n         return FALSE;\n \n@@ -2180,11 +2180,11 @@ s390_decompose_address (register rtx addr, struct s390_address *out)\n \t    else\n \t      return FALSE;\n \n-\t    base = gen_rtx_REG (Pmode, BASE_REGISTER);\n+\t    base = gen_rtx_REG (Pmode, BASE_REGNUM);\n \t    break;\n \n \t  case UNSPEC_LTREL_BASE:\n-\t    base = gen_rtx_REG (Pmode, BASE_REGISTER);\n+\t    base = gen_rtx_REG (Pmode, BASE_REGNUM);\n \t    break;\n \n \t  default:\n@@ -2194,7 +2194,7 @@ s390_decompose_address (register rtx addr, struct s390_address *out)\n       if (GET_CODE (base) != REG || GET_MODE (base) != Pmode)\n \treturn FALSE;\n \n-      if (REGNO (base) == BASE_REGISTER\n+      if (REGNO (base) == BASE_REGNUM\n \t  || REGNO (base) == STACK_POINTER_REGNUM\n \t  || REGNO (base) == FRAME_POINTER_REGNUM\n \t  || ((reload_completed || reload_in_progress)\n@@ -2220,11 +2220,11 @@ s390_decompose_address (register rtx addr, struct s390_address *out)\n \t    else\n \t      return FALSE;\n \n-\t    indx = gen_rtx_REG (Pmode, BASE_REGISTER);\n+\t    indx = gen_rtx_REG (Pmode, BASE_REGNUM);\n \t    break;\n \n \t  case UNSPEC_LTREL_BASE:\n-\t    indx = gen_rtx_REG (Pmode, BASE_REGISTER);\n+\t    indx = gen_rtx_REG (Pmode, BASE_REGNUM);\n \t    break;\n \n \t  default:\n@@ -2234,7 +2234,7 @@ s390_decompose_address (register rtx addr, struct s390_address *out)\n       if (GET_CODE (indx) != REG || GET_MODE (indx) != Pmode)\n \treturn FALSE;\n \n-      if (REGNO (indx) == BASE_REGISTER\n+      if (REGNO (indx) == BASE_REGNUM\n \t  || REGNO (indx) == STACK_POINTER_REGNUM\n \t  || REGNO (indx) == FRAME_POINTER_REGNUM\n \t  || ((reload_completed || reload_in_progress)\n@@ -5268,15 +5268,15 @@ s390_optimize_prolog (bool base_used)\n   /* Do a final recompute of the frame-related data.  */\n \n   s390_frame_info (base_used, cfun->machine->save_return_addr_p);\n-  regs_ever_live[BASE_REGISTER] = base_used;\n+  regs_ever_live[BASE_REGNUM] = base_used;\n   regs_ever_live[RETURN_REGNUM] = cfun->machine->save_return_addr_p;\n   regs_ever_live[STACK_POINTER_REGNUM] = cfun->machine->frame_size > 0;\n \n   /* If all special registers are in fact used, there's nothing we\n      can do, so no point in walking the insn list.  */\n \n-  if (cfun->machine->first_save_gpr <= BASE_REGISTER \n-      && cfun->machine->last_save_gpr >= BASE_REGISTER\n+  if (cfun->machine->first_save_gpr <= BASE_REGNUM \n+      && cfun->machine->last_save_gpr >= BASE_REGNUM\n       && (TARGET_CPU_ZARCH \n           || (cfun->machine->first_save_gpr <= RETURN_REGNUM \n               && cfun->machine->last_save_gpr >= RETURN_REGNUM)))\n@@ -5306,7 +5306,7 @@ s390_optimize_prolog (bool base_used)\n \n \t  if (GET_CODE (base) != REG || off < 0)\n \t    continue;\n-\t  if (first > BASE_REGISTER || last < BASE_REGISTER)\n+\t  if (first > BASE_REGNUM || last < BASE_REGNUM)\n \t    continue;\n \n \t  if (cfun->machine->first_save_gpr != -1)\n@@ -5323,13 +5323,13 @@ s390_optimize_prolog (bool base_used)\n \n       if (GET_CODE (PATTERN (insn)) == SET\n \t  && GET_CODE (SET_SRC (PATTERN (insn))) == REG\n-\t  && REGNO (SET_SRC (PATTERN (insn))) == BASE_REGISTER\n+\t  && REGNO (SET_SRC (PATTERN (insn))) == BASE_REGNUM\n \t  && GET_CODE (SET_DEST (PATTERN (insn))) == MEM)\n \t{\n \t  set = PATTERN (insn);\n \t  offset = const0_rtx;\n \t  base = eliminate_constant_term (XEXP (SET_DEST (set), 0), &offset);\n-\t  off = INTVAL (offset) - BASE_REGISTER * UNITS_PER_WORD;\n+\t  off = INTVAL (offset) - BASE_REGNUM * UNITS_PER_WORD;\n \n \t  if (GET_CODE (base) != REG || off < 0)\n \t    continue;\n@@ -5358,7 +5358,7 @@ s390_optimize_prolog (bool base_used)\n \n \t  if (GET_CODE (base) != REG || off < 0)\n \t    continue;\n-\t  if (first > BASE_REGISTER || last < BASE_REGISTER)\n+\t  if (first > BASE_REGNUM || last < BASE_REGNUM)\n \t    continue;\n \n \t  if (cfun->machine->first_restore_gpr != -1)\n@@ -5375,13 +5375,13 @@ s390_optimize_prolog (bool base_used)\n \n       if (GET_CODE (PATTERN (insn)) == SET\n \t  && GET_CODE (SET_DEST (PATTERN (insn))) == REG\n-\t  && REGNO (SET_DEST (PATTERN (insn))) == BASE_REGISTER\n+\t  && REGNO (SET_DEST (PATTERN (insn))) == BASE_REGNUM\n \t  && GET_CODE (SET_SRC (PATTERN (insn))) == MEM)\n \t{\n \t  set = PATTERN (insn);\n \t  offset = const0_rtx;\n \t  base = eliminate_constant_term (XEXP (SET_SRC (set), 0), &offset);\n-\t  off = INTVAL (offset) - BASE_REGISTER * UNITS_PER_WORD;\n+\t  off = INTVAL (offset) - BASE_REGNUM * UNITS_PER_WORD;\n \n \t  if (GET_CODE (base) != REG || off < 0)\n \t    continue;\n@@ -5479,7 +5479,7 @@ s390_reorg (void)\n       /* If we made it up to here, both conditions are satisfied.\n \t Finish up literal pool related changes.  */\n       if ((pool_overflow || pool->size > 0)\n-\t   && REGNO (cfun->machine->base_reg) == BASE_REGISTER)\n+\t   && REGNO (cfun->machine->base_reg) == BASE_REGNUM)\n \tbase_used = true;\n \n       if (pool_overflow)\n@@ -5584,7 +5584,7 @@ s390_frame_info (int base_used, int return_addr_used)\n     live_regs[PIC_OFFSET_TABLE_REGNUM] = \n     regs_ever_live[PIC_OFFSET_TABLE_REGNUM];\n \n-  live_regs[BASE_REGISTER] = base_used;\n+  live_regs[BASE_REGNUM] = base_used;\n   live_regs[RETURN_REGNUM] = return_addr_used;\n   live_regs[STACK_POINTER_REGNUM] = cfun->machine->frame_size > 0;\n \n@@ -5842,7 +5842,7 @@ s390_emit_prologue (void)\n   if (current_function_is_leaf && !regs_ever_live[5])\n     cfun->machine->base_reg = gen_rtx_REG (Pmode, 5);\n   else\n-    cfun->machine->base_reg = gen_rtx_REG (Pmode, BASE_REGISTER);\n+    cfun->machine->base_reg = gen_rtx_REG (Pmode, BASE_REGNUM);\n \n   regs_ever_live[REGNO (cfun->machine->base_reg)] = 1;\n \n@@ -5856,7 +5856,7 @@ s390_emit_prologue (void)\n \n   /* We need to update regs_ever_live to avoid data-flow problems.  */\n \n-  regs_ever_live[BASE_REGISTER] = 1;\n+  regs_ever_live[BASE_REGNUM] = 1;\n   regs_ever_live[RETURN_REGNUM] = !TARGET_CPU_ZARCH \n \t\t\t\t  || cfun->machine->save_return_addr_p;\n   regs_ever_live[STACK_POINTER_REGNUM] = cfun->machine->frame_size > 0;\n@@ -6167,7 +6167,7 @@ s390_emit_epilogue (bool sibcall)\n \t     restored in any case.  */\n \t  if (i == STACK_POINTER_REGNUM\n               || i == RETURN_REGNUM\n-              || i == BASE_REGISTER\n+              || i == BASE_REGNUM\n               || (flag_pic && i == (int)PIC_OFFSET_TABLE_REGNUM))\n \t    continue;\n \n@@ -6187,7 +6187,7 @@ s390_emit_epilogue (bool sibcall)\n \t     this will do good for scheduling.  */\n \n \t  if (cfun->machine->save_return_addr_p\n-\t      || (cfun->machine->first_restore_gpr < BASE_REGISTER\n+\t      || (cfun->machine->first_restore_gpr < BASE_REGNUM\n \t\t  && cfun->machine->last_restore_gpr > RETURN_REGNUM))\n \t    {\n \t      int return_regnum = find_unused_clobbered_reg();"}, {"sha": "3c32f0c1588f5f0151f5dbc796ffd88dfb050d71", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/490ceeb4f3ec2a5faa2f265beb68366fbe0c83f9/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/490ceeb4f3ec2a5faa2f265beb68366fbe0c83f9/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=490ceeb4f3ec2a5faa2f265beb68366fbe0c83f9", "patch": "@@ -300,7 +300,7 @@ if (INTEGRAL_MODE_P (MODE) &&\t        \t    \t\\\n #define FRAME_REG_P(X)\t\t(REG_P (X) && FRAME_REGNO_P (REGNO (X)))\n \n #define SIBCALL_REGNUM 1\n-#define BASE_REGISTER 13\n+#define BASE_REGNUM 13\n #define RETURN_REGNUM 14\n #define CC_REGNUM 33\n "}, {"sha": "3f38542bd9a980d9a7d401580d8600c8e6694986", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/490ceeb4f3ec2a5faa2f265beb68366fbe0c83f9/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/490ceeb4f3ec2a5faa2f265beb68366fbe0c83f9/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=490ceeb4f3ec2a5faa2f265beb68366fbe0c83f9", "patch": "@@ -7441,7 +7441,7 @@\n      base to the third.  */\n   emit_move_insn (operand_subword (operands[0], 2, 0,\n                   TARGET_64BIT ? OImode : TImode),\n-                  gen_rtx_REG (Pmode, BASE_REGISTER));\n+                  gen_rtx_REG (Pmode, BASE_REGNUM));\n   emit_move_insn (temp, gen_rtx_MEM (Pmode, operands[1]));\n   emit_move_insn (operand_subword (operands[0], 0, 0,\n                  TARGET_64BIT ? OImode : TImode),\n@@ -7458,7 +7458,7 @@\n   \"\"\n {\n   rtx temp = gen_reg_rtx (Pmode);\n-  rtx base = gen_rtx_REG (Pmode, BASE_REGISTER);\n+  rtx base = gen_rtx_REG (Pmode, BASE_REGNUM);\n \n   /* Restore the backchain from the first word, sp from the second and the\n      literal pool base from the third.  */"}]}