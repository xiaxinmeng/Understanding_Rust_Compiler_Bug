{"sha": "8559f9bb2f3d3bb300d21df3ad41901dc6619121", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU1OWY5YmIyZjNkM2JiMzAwZDIxZGYzYWQ0MTkwMWRjNjYxOTEyMQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2000-08-20T21:51:19Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2000-08-20T21:51:19Z"}, "message": "Adler32.java: Make private variables really private\n\n2000-08-20  Mark Wielaard  <mark@klomp.org>\n\n    * java/util/zip/Adler32.java: Make private variables really private\n    * java/util/zip/CRC32.java: Make private variables really private\n    * java/util/zip/CheckedInputStream.java: skip() could skip to much bytes\n    * java/util/zip/InflaterInputStream.java: skip() could skip to much bytes\n    * java/util/zip/ZipEntry.java: setCompressedSize() didn't check input\n    * java/util/zip/ZipFile.java: size() new 1.2 method\n    * java/util/zip/ZipInputStream.java: Use createZipEntry not new ZipEntry.\n    since 1.2 available() always returns just 1 or 0 when closed\n\nFrom-SVN: r35826", "tree": {"sha": "f8b19485e6bf07c2c6401e9250d3f27bdbc43fd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8b19485e6bf07c2c6401e9250d3f27bdbc43fd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8559f9bb2f3d3bb300d21df3ad41901dc6619121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8559f9bb2f3d3bb300d21df3ad41901dc6619121", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8559f9bb2f3d3bb300d21df3ad41901dc6619121", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8559f9bb2f3d3bb300d21df3ad41901dc6619121/comments", "author": null, "committer": null, "parents": [{"sha": "3cb553b4684a17ca436be66895be0aeaee83644f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cb553b4684a17ca436be66895be0aeaee83644f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cb553b4684a17ca436be66895be0aeaee83644f"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "f6fede309c04b055f4de5fbe14db7e3c2633b38a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8559f9bb2f3d3bb300d21df3ad41901dc6619121/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8559f9bb2f3d3bb300d21df3ad41901dc6619121/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=8559f9bb2f3d3bb300d21df3ad41901dc6619121", "patch": "@@ -1,3 +1,14 @@\n+2000-08-20  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/util/zip/Adler32.java: Make private variables really private\n+\t* java/util/zip/CRC32.java: Make private variables really private\n+\t* java/util/zip/CheckedInputStream.java: skip() could skip to much bytes\n+\t* java/util/zip/InflaterInputStream.java: skip() could skip to much bytes\n+\t* java/util/zip/ZipEntry.java: setCompressedSize() didn't check input\n+\t* java/util/zip/ZipFile.java: size() new 1.2 method\n+\t* java/util/zip/ZipInputStream.java: Use createZipEntry not new ZipEntry.\n+    since 1.2 available() always returns just 1 or 0 when closed\n+\n Sun Aug 20 12:33:43 2000  Anthony Green  <green@redhat.com>\n \n \t* java/util/jar/JarFile.java: Don't call"}, {"sha": "e7afeabde164ce2487292e3b5e981ecd45b8fc1a", "filename": "libjava/java/util/zip/Adler32.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8559f9bb2f3d3bb300d21df3ad41901dc6619121/libjava%2Fjava%2Futil%2Fzip%2FAdler32.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8559f9bb2f3d3bb300d21df3ad41901dc6619121/libjava%2Fjava%2Futil%2Fzip%2FAdler32.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FAdler32.java?ref=8559f9bb2f3d3bb300d21df3ad41901dc6619121", "patch": "@@ -24,8 +24,8 @@ public class Adler32 implements Checksum\n {\n   private static int BASE = 65521; /* largest prime smaller than 65536 */\n \n-  int s1;\n-  int s2;\n+  private int s1;\n+  private int s2;\n \n   public Adler32 ()\n   {"}, {"sha": "1abbcad1d9779c6cb76ed451c42de890cb9ed981", "filename": "libjava/java/util/zip/CRC32.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8559f9bb2f3d3bb300d21df3ad41901dc6619121/libjava%2Fjava%2Futil%2Fzip%2FCRC32.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8559f9bb2f3d3bb300d21df3ad41901dc6619121/libjava%2Fjava%2Futil%2Fzip%2FCRC32.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FCRC32.java?ref=8559f9bb2f3d3bb300d21df3ad41901dc6619121", "patch": "@@ -22,9 +22,9 @@\n \n public class CRC32 implements Checksum\n {\n-  int crc = 0;\n+  private int crc = 0;\n \n-  static int[] crc_table = make_crc_table();\n+  private static int[] crc_table = make_crc_table();\n \n   /* Make the table for a fast CRC. */\n   static int[] make_crc_table ()"}, {"sha": "0901743e6a7ece70aca667d6af036beeb6d0bdd5", "filename": "libjava/java/util/zip/CheckedInputStream.java", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8559f9bb2f3d3bb300d21df3ad41901dc6619121/libjava%2Fjava%2Futil%2Fzip%2FCheckedInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8559f9bb2f3d3bb300d21df3ad41901dc6619121/libjava%2Fjava%2Futil%2Fzip%2FCheckedInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FCheckedInputStream.java?ref=8559f9bb2f3d3bb300d21df3ad41901dc6619121", "patch": "@@ -69,6 +69,7 @@ public long skip (long n) throws IOException\n \t  break;\n \tn -= r;\n \ts += r;\n+\tmin = (int) Math.min(n, 1024);\n \tsum.update(buf, 0, r);\n       }\n "}, {"sha": "92b897a32e452609b84996886b8ec6f8dfd961fc", "filename": "libjava/java/util/zip/InflaterInputStream.java", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8559f9bb2f3d3bb300d21df3ad41901dc6619121/libjava%2Fjava%2Futil%2Fzip%2FInflaterInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8559f9bb2f3d3bb300d21df3ad41901dc6619121/libjava%2Fjava%2Futil%2Fzip%2FInflaterInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FInflaterInputStream.java?ref=8559f9bb2f3d3bb300d21df3ad41901dc6619121", "patch": "@@ -93,6 +93,7 @@ public long skip (long n) throws IOException\n \t  break;\n \tn -= r;\n \ts += r;\n+\tmin = (int) Math.min(n, 1024);\n       }\n \n     return s;"}, {"sha": "99cb3aacb2212f6cc85c7083c5bf66c18a9e3e1f", "filename": "libjava/java/util/zip/ZipEntry.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8559f9bb2f3d3bb300d21df3ad41901dc6619121/libjava%2Fjava%2Futil%2Fzip%2FZipEntry.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8559f9bb2f3d3bb300d21df3ad41901dc6619121/libjava%2Fjava%2Futil%2Fzip%2FZipEntry.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FZipEntry.java?ref=8559f9bb2f3d3bb300d21df3ad41901dc6619121", "patch": "@@ -102,7 +102,7 @@ public void setComment (String comment)\n   \n   public void setCompressedSize (long compressedSize)\n   {\n-    if (size < 0 || size > 0xffffffffL)\n+    if (compressedSize < 0 || compressedSize > 0xffffffffL)\n       throw new IllegalArgumentException ();\n     this.compressedSize = compressedSize;\n   }"}, {"sha": "43d72267aea46eb019f70798af5296cab2b2abdd", "filename": "libjava/java/util/zip/ZipFile.java", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8559f9bb2f3d3bb300d21df3ad41901dc6619121/libjava%2Fjava%2Futil%2Fzip%2FZipFile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8559f9bb2f3d3bb300d21df3ad41901dc6619121/libjava%2Fjava%2Futil%2Fzip%2FZipFile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FZipFile.java?ref=8559f9bb2f3d3bb300d21df3ad41901dc6619121", "patch": "@@ -141,6 +141,13 @@ public InputStream getInputStream(ZipEntry ze)  throws IOException\n \n   public String getName () { return name; }\n \n+  public int size () {\n+    if (entries == null)\n+      throw new IllegalStateException(\"ZipFile already closed\");\n+    else\n+      return numEntries;\n+  }\n+\n   private int readu2 () throws IOException\n   {\n     int byte0 = file.read();"}, {"sha": "79efb59f06c5b89081d3c4f7b1780d6f8781c0ae", "filename": "libjava/java/util/zip/ZipInputStream.java", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8559f9bb2f3d3bb300d21df3ad41901dc6619121/libjava%2Fjava%2Futil%2Fzip%2FZipInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8559f9bb2f3d3bb300d21df3ad41901dc6619121/libjava%2Fjava%2Futil%2Fzip%2FZipInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FZipInputStream.java?ref=8559f9bb2f3d3bb300d21df3ad41901dc6619121", "patch": "@@ -89,7 +89,7 @@ public ZipEntry getNextEntry () throws IOException\n     int extraLength = readu2();\n     byte[] bname = new byte[filenameLength];\n     readFully(bname);\n-    ZipEntry entry = new ZipEntry(new String(bname, \"8859_1\"));\n+    ZipEntry entry = createZipEntry(new String(bname, \"8859_1\"));\n     if (extraLength > 0)\n       {\n \tbyte[] bextra = new byte[extraLength];\n@@ -160,6 +160,13 @@ public long skip (long n)  throws IOException\n     return count;\n   }\n \n+  public int available() {\n+    if (closed)\n+      return 0;\n+    else\n+      return 1;\n+  }\n+\n   private void readFully (byte[] b)  throws IOException\n   {\n     int off = 0;\n@@ -222,6 +229,7 @@ public void closeEntry ()  throws IOException\n   public void close ()  throws IOException\n   {\n     current = null;\n+    closed = true;\n     super.close();\n   }\n \n@@ -231,4 +239,6 @@ public void close ()  throws IOException\n   private int avail;\n   // Number of bytes we can read from underlying stream.\n   private int compressed_bytes;\n+  // Is this ZipInputStream closed? Set by the close() method.\n+  private boolean closed = false;\n }"}]}