{"sha": "7ec491c07be298679b27d5939accc30de01d62d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VjNDkxYzA3YmUyOTg2NzliMjdkNTkzOWFjY2MzMGRlMDFkNjJkMA==", "commit": {"author": {"name": "Mikhail Maltsev", "email": "maltsevm@gmail.com", "date": "2015-10-21T21:16:31Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-10-21T21:16:31Z"}, "message": "[PATCH 1/9] ENABLE_CHECKING refactoring\n\ngcc/\n\t* config.in: Regenerate.\n\t* configure: Regenerate.\n\t* configure.ac (CHECKING_P): Define.\n\t* system.h: Use CHECKING_P.\n\nlibcpp/\n\t* config.in: Regenerate.\n\t* configure: Regenerate.\n\t* configure.ac (CHECKING_P): Define.\n\t* system.h (fancy_abort): Declare.\n\t(abort): Define.\n\t(gcc_assert): Define. Use CHECKING_P.\n\nFrom-SVN: r229149", "tree": {"sha": "0e7336163388dbd3f57d87088d5662843ae8a6fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e7336163388dbd3f57d87088d5662843ae8a6fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ec491c07be298679b27d5939accc30de01d62d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ec491c07be298679b27d5939accc30de01d62d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ec491c07be298679b27d5939accc30de01d62d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ec491c07be298679b27d5939accc30de01d62d0/comments", "author": {"login": "miyuki", "id": 4668268, "node_id": "MDQ6VXNlcjQ2NjgyNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/4668268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miyuki", "html_url": "https://github.com/miyuki", "followers_url": "https://api.github.com/users/miyuki/followers", "following_url": "https://api.github.com/users/miyuki/following{/other_user}", "gists_url": "https://api.github.com/users/miyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/miyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miyuki/subscriptions", "organizations_url": "https://api.github.com/users/miyuki/orgs", "repos_url": "https://api.github.com/users/miyuki/repos", "events_url": "https://api.github.com/users/miyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/miyuki/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "74bb77094f3b512e146f61c2e218c842f4a8d53b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74bb77094f3b512e146f61c2e218c842f4a8d53b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74bb77094f3b512e146f61c2e218c842f4a8d53b"}], "stats": {"total": 74, "additions": 66, "deletions": 8}, "files": [{"sha": "f12681937f676ff7fd568c3e16e6bbceecc0761a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec491c07be298679b27d5939accc30de01d62d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec491c07be298679b27d5939accc30de01d62d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ec491c07be298679b27d5939accc30de01d62d0", "patch": "@@ -1,3 +1,10 @@\n+2015-10-21  Mikhail Maltsev  <maltsevm@gmail.com>\n+\n+\t* config.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.ac (CHECKING_P): Define.\n+\t* system.h: Use CHECKING_P.\n+\n 2015-10-11  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/67056"}, {"sha": "48d7e6441e6bed5c1f82f1ea26c75ccc09ef647a", "filename": "gcc/config.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec491c07be298679b27d5939accc30de01d62d0/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec491c07be298679b27d5939accc30de01d62d0/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=7ec491c07be298679b27d5939accc30de01d62d0", "patch": "@@ -30,6 +30,13 @@\n #endif\n \n \n+/* Define to 1 if you want more run-time sanity checks. This one gets a grab\n+   bag of miscellaneous but relatively cheap checks. */\n+#ifndef USED_FOR_TARGET\n+#undef CHECKING_P\n+#endif\n+\n+\n /* Define 0/1 to force the choice for exception handling model. */\n #ifndef USED_FOR_TARGET\n #undef CONFIG_SJLJ_EXCEPTIONS"}, {"sha": "3122499da26d2e8597095941073fbbbef046ca89", "filename": "gcc/configure", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec491c07be298679b27d5939accc30de01d62d0/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec491c07be298679b27d5939accc30de01d62d0/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=7ec491c07be298679b27d5939accc30de01d62d0", "patch": "@@ -7096,7 +7096,12 @@ if test x$ac_checking != x ; then\n \n $as_echo \"#define ENABLE_CHECKING 1\" >>confdefs.h\n \n+  $as_echo \"#define CHECKING_P 1\" >>confdefs.h\n+\n   nocommon_flag=-fno-common\n+else\n+  $as_echo \"#define CHECKING_P 0\" >>confdefs.h\n+\n fi\n \n if test x$ac_df_checking != x ; then\n@@ -18385,7 +18390,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18388 \"configure\"\n+#line 18393 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18491,7 +18496,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18494 \"configure\"\n+#line 18499 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "a30bb3b89e819db3722a6a207d246354e746465c", "filename": "gcc/configure.ac", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec491c07be298679b27d5939accc30de01d62d0/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec491c07be298679b27d5939accc30de01d62d0/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=7ec491c07be298679b27d5939accc30de01d62d0", "patch": "@@ -569,7 +569,12 @@ if test x$ac_checking != x ; then\n   AC_DEFINE(ENABLE_CHECKING, 1,\n [Define if you want more run-time sanity checks.  This one gets a grab\n    bag of miscellaneous but relatively cheap checks.])\n+  AC_DEFINE(CHECKING_P, 1,\n+[Define to 1 if you want more run-time sanity checks.  This one gets a grab\n+   bag of miscellaneous but relatively cheap checks.])\n   nocommon_flag=-fno-common\n+else\n+  AC_DEFINE(CHECKING_P, 0)\n fi\n AC_SUBST(nocommon_flag)\n if test x$ac_df_checking != x ; then"}, {"sha": "f9c7e2a612893814dabc06988b94f4625fdf25f3", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec491c07be298679b27d5939accc30de01d62d0/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec491c07be298679b27d5939accc30de01d62d0/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=7ec491c07be298679b27d5939accc30de01d62d0", "patch": "@@ -714,13 +714,11 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n #define gcc_assert(EXPR) ((void)(0 && (EXPR)))\n #endif\n \n-#ifdef ENABLE_CHECKING\n+#if CHECKING_P\n #define gcc_checking_assert(EXPR) gcc_assert (EXPR)\n-#define CHECKING_P 1\n #else\n /* N.B.: in release build EXPR is not evaluated.  */\n #define gcc_checking_assert(EXPR) ((void)(0 && (EXPR)))\n-#define CHECKING_P 1\n #endif\n \n /* Use gcc_unreachable() to mark unreachable locations (like an"}, {"sha": "972e9a5606fd45446ef4647f590ff780ae712a35", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec491c07be298679b27d5939accc30de01d62d0/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec491c07be298679b27d5939accc30de01d62d0/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=7ec491c07be298679b27d5939accc30de01d62d0", "patch": "@@ -1,3 +1,12 @@\n+2015-10-21  Mikhail Maltsev  <maltsevm@gmail.com>\n+\n+\t* config.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.ac (CHECKING_P): Define.\n+\t* system.h (fancy_abort): Declare.\n+\t(abort): Define.\n+\t(gcc_assert): Define. Use CHECKING_P.\n+\n 2015-10-13  Mikhail Maltsev  <maltsevm@gmail.com>\n \n \t* system.h (CHECKING_P, gcc_checking_assert): Define."}, {"sha": "5865eb363fc84d84e19a60ac876d38b3a4a7178a", "filename": "libcpp/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec491c07be298679b27d5939accc30de01d62d0/libcpp%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec491c07be298679b27d5939accc30de01d62d0/libcpp%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfig.in?ref=7ec491c07be298679b27d5939accc30de01d62d0", "patch": "@@ -3,6 +3,9 @@\n /* Define if building universal (internal helper macro) */\n #undef AC_APPLE_UNIVERSAL_BUILD\n \n+/* Define to 1 if you want more run-time sanity checks. */\n+#undef CHECKING_P\n+\n /* Define to one of `_getb67', `GETB67', `getb67' for Cray-2 and Cray-YMP\n    systems. This function is required for `alloca.c' support on those systems.\n    */"}, {"sha": "1c70c75eb4457ceca767e3c5e8a92e72e120cad8", "filename": "libcpp/configure", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec491c07be298679b27d5939accc30de01d62d0/libcpp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec491c07be298679b27d5939accc30de01d62d0/libcpp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure?ref=7ec491c07be298679b27d5939accc30de01d62d0", "patch": "@@ -7300,6 +7300,11 @@ if test x$ac_checking != x ; then\n \n $as_echo \"#define ENABLE_CHECKING 1\" >>confdefs.h\n \n+  $as_echo \"#define CHECKING_P 1\" >>confdefs.h\n+\n+else\n+  $as_echo \"#define CHECKING_P 0\" >>confdefs.h\n+\n fi\n \n if test x$ac_valgrind_checking != x ; then"}, {"sha": "3fcbe84f33e9e61753d3c34701ee141b45e2d68e", "filename": "libcpp/configure.ac", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec491c07be298679b27d5939accc30de01d62d0/libcpp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec491c07be298679b27d5939accc30de01d62d0/libcpp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure.ac?ref=7ec491c07be298679b27d5939accc30de01d62d0", "patch": "@@ -166,6 +166,10 @@ IFS=\"$ac_save_IFS\"\n if test x$ac_checking != x ; then\n   AC_DEFINE(ENABLE_CHECKING, 1,\n [Define if you want more run-time sanity checks.])\n+  AC_DEFINE(CHECKING_P, 1,\n+[Define to 1 if you want more run-time sanity checks.])\n+else\n+  AC_DEFINE(CHECKING_P, 0)\n fi\n \n if test x$ac_valgrind_checking != x ; then"}, {"sha": "2250f10459c28430a6beef2e3e182087f6e114e9", "filename": "libcpp/system.h", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec491c07be298679b27d5939accc30de01d62d0/libcpp%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec491c07be298679b27d5939accc30de01d62d0/libcpp%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fsystem.h?ref=7ec491c07be298679b27d5939accc30de01d62d0", "patch": "@@ -391,13 +391,28 @@ extern void abort (void);\n #define __builtin_expect(a, b) (a)\n #endif\n \n-#ifdef ENABLE_CHECKING\n+/* Redefine abort to report an internal error w/o coredump, and\n+   reporting the location of the error in the source file.  */\n+extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n+#define abort() fancy_abort (__FILE__, __LINE__, __FUNCTION__)\n+\n+/* Use gcc_assert(EXPR) to test invariants.  */\n+#if ENABLE_ASSERT_CHECKING\n+#define gcc_assert(EXPR) \t\t\t\t\t\t\\\n+   ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, __FUNCTION__), 0 : 0))\n+#elif (GCC_VERSION >= 4005)\n+#define gcc_assert(EXPR) \t\t\t\t\t\t\\\n+  ((void)(__builtin_expect (!(EXPR), 0) ? __builtin_unreachable (), 0 : 0))\n+#else\n+/* Include EXPR, so that unused variable warnings do not occur.  */\n+#define gcc_assert(EXPR) ((void)(0 && (EXPR)))\n+#endif\n+\n+#if CHECKING_P\n #define gcc_checking_assert(EXPR) gcc_assert (EXPR)\n-#define CHECKING_P 1\n #else\n /* N.B.: in release build EXPR is not evaluated.  */\n #define gcc_checking_assert(EXPR) ((void)(0 && (EXPR)))\n-#define CHECKING_P 1\n #endif\n \n /* Provide a fake boolean type.  We make no attempt to use the"}]}