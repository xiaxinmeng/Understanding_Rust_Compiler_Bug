{"sha": "0d87d3076f3e9f8a1e85bdbf8304cf708d2ce370", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ4N2QzMDc2ZjNlOWY4YTFlODViZGJmODMwNGNmNzA4ZDJjZTM3MA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-07-12T21:32:48Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-07-12T21:32:48Z"}, "message": "trans-expr.c (conv_isocbinding_procedure): Generate\n\n2012-07-12  Tobias Burnus  <burnus@net-b.de>\n\n        * trans-expr.c (conv_isocbinding_procedure): Generate\n        * c_f_pointer code\n        inline.\n\n2012-07-12  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.dg/c_f_pointer_shape_tests_5.f90: New.\n        * gfortran.dg/c_f_pointer_tests_3.f90: Update\n        scan-tree-dump-times pattern.\n\nFrom-SVN: r189442", "tree": {"sha": "20b86c9f95b47862549f96115f64e8277ecfd139", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20b86c9f95b47862549f96115f64e8277ecfd139"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d87d3076f3e9f8a1e85bdbf8304cf708d2ce370", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d87d3076f3e9f8a1e85bdbf8304cf708d2ce370", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d87d3076f3e9f8a1e85bdbf8304cf708d2ce370", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d87d3076f3e9f8a1e85bdbf8304cf708d2ce370/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e098c1696289d3d935d13ebed803c5b32045ba6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e098c1696289d3d935d13ebed803c5b32045ba6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e098c1696289d3d935d13ebed803c5b32045ba6d"}], "stats": {"total": 176, "additions": 151, "deletions": 25}, "files": [{"sha": "f6be5bde2cc11150413656d8d113f0a7ddb05d15", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d87d3076f3e9f8a1e85bdbf8304cf708d2ce370/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d87d3076f3e9f8a1e85bdbf8304cf708d2ce370/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0d87d3076f3e9f8a1e85bdbf8304cf708d2ce370", "patch": "@@ -1,3 +1,8 @@\n+2012-07-12  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-expr.c (conv_isocbinding_procedure): Generate c_f_pointer code\n+\tinline.\n+\n 2012-07-11  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* trans.c: Do not include defaults.h."}, {"sha": "34e0f699cd253c2233c85be28ab1fe517e8413aa", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 102, "deletions": 21, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d87d3076f3e9f8a1e85bdbf8304cf708d2ce370/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d87d3076f3e9f8a1e85bdbf8304cf708d2ce370/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=0d87d3076f3e9f8a1e85bdbf8304cf708d2ce370", "patch": "@@ -3307,40 +3307,121 @@ conv_isocbinding_procedure (gfc_se * se, gfc_symbol * sym,\n   \n       return 1;\n     }\n-  else if ((sym->intmod_sym_id == ISOCBINDING_F_POINTER\n-\t    && arg->next->expr->rank == 0)\n+  else if (sym->intmod_sym_id == ISOCBINDING_F_POINTER\n \t   || sym->intmod_sym_id == ISOCBINDING_F_PROCPOINTER)\n     {\n-      /* Convert c_f_pointer if fptr is a scalar\n-\t and convert c_f_procpointer.  */\n+      /* Convert c_f_pointer and c_f_procpointer.  */\n       gfc_se cptrse;\n       gfc_se fptrse;\n+      gfc_se shapese;\n+      gfc_ss *ss, *shape_ss;\n+      tree desc, dim, tmp, stride, offset;\n+      stmtblock_t body, block;\n+      gfc_loopinfo loop;\n \n       gfc_init_se (&cptrse, NULL);\n       gfc_conv_expr (&cptrse, arg->expr);\n       gfc_add_block_to_block (&se->pre, &cptrse.pre);\n       gfc_add_block_to_block (&se->post, &cptrse.post);\n \n       gfc_init_se (&fptrse, NULL);\n-      if (sym->intmod_sym_id == ISOCBINDING_F_POINTER\n-\t  || gfc_is_proc_ptr_comp (arg->next->expr, NULL))\n-\tfptrse.want_pointer = 1;\n+      if (arg->next->expr->rank == 0)\n+\t{\n+\t  if (sym->intmod_sym_id == ISOCBINDING_F_POINTER\n+\t      || gfc_is_proc_ptr_comp (arg->next->expr, NULL))\n+\t    fptrse.want_pointer = 1;\n+\n+\t  gfc_conv_expr (&fptrse, arg->next->expr);\n+\t  gfc_add_block_to_block (&se->pre, &fptrse.pre);\n+\t  gfc_add_block_to_block (&se->post, &fptrse.post);\n+\t  if (arg->next->expr->symtree->n.sym->attr.proc_pointer\n+\t      && arg->next->expr->symtree->n.sym->attr.dummy)\n+\t    fptrse.expr = build_fold_indirect_ref_loc (input_location,\n+\t\t\t\t\t\t       fptrse.expr);\n+     \t  se->expr = fold_build2_loc (input_location, MODIFY_EXPR,\n+\t\t\t\t      TREE_TYPE (fptrse.expr),\n+\t\t\t\t      fptrse.expr,\n+\t\t\t\t      fold_convert (TREE_TYPE (fptrse.expr),\n+\t\t\t\t\t\t    cptrse.expr));\n+\t  return 1;\n+\t}\n \n-      gfc_conv_expr (&fptrse, arg->next->expr);\n-      gfc_add_block_to_block (&se->pre, &fptrse.pre);\n-      gfc_add_block_to_block (&se->post, &fptrse.post);\n-      \n-      if (arg->next->expr->symtree->n.sym->attr.proc_pointer\n-\t  && arg->next->expr->symtree->n.sym->attr.dummy)\n-\tfptrse.expr = build_fold_indirect_ref_loc (input_location,\n-\t\t\t\t\t\t   fptrse.expr);\n-      \n-      se->expr = fold_build2_loc (input_location, MODIFY_EXPR,\n-\t\t\t\t  TREE_TYPE (fptrse.expr),\n-\t\t\t\t  fptrse.expr,\n-\t\t\t\t  fold_convert (TREE_TYPE (fptrse.expr),\n-\t\t\t\t\t\tcptrse.expr));\n+      gfc_start_block (&block);\n+\n+      /* Get the descriptor of the Fortran pointer.  */\n+      ss = gfc_walk_expr (arg->next->expr);\n+      gcc_assert (ss != gfc_ss_terminator);\n+      fptrse.descriptor_only = 1;\n+      gfc_conv_expr_descriptor (&fptrse, arg->next->expr, ss);\n+      gfc_add_block_to_block (&block, &fptrse.pre);\n+      desc = fptrse.expr;\n+\n+      /* Set data value, dtype, and offset.  */\n+      tmp = GFC_TYPE_ARRAY_DATAPTR_TYPE (TREE_TYPE (desc));\n+      gfc_conv_descriptor_data_set (&block, desc,\n+\t\t\t\t    fold_convert (tmp, cptrse.expr));\n+      gfc_add_modify (&block, gfc_conv_descriptor_dtype (desc),\n+\t\t      gfc_get_dtype (TREE_TYPE (desc)));\n+\n+      /* Start scalarization of the bounds, using the shape argument.  */\n+\n+      shape_ss = gfc_walk_expr (arg->next->next->expr);\n+      gcc_assert (shape_ss != gfc_ss_terminator);\n+      gfc_init_se (&shapese, NULL);\n+\n+      gfc_init_loopinfo (&loop);\n+      gfc_add_ss_to_loop (&loop, shape_ss);\n+      gfc_conv_ss_startstride (&loop);\n+      gfc_conv_loop_setup (&loop, &arg->next->expr->where);\n+      gfc_mark_ss_chain_used (shape_ss, 1);\n+\n+      gfc_copy_loopinfo_to_se (&shapese, &loop);\n+      shapese.ss = shape_ss;\n+\n+      stride = gfc_create_var (gfc_array_index_type, \"stride\");\n+      offset = gfc_create_var (gfc_array_index_type, \"offset\");\n+      gfc_add_modify (&block, stride, gfc_index_one_node);\n+      gfc_add_modify (&block, offset, gfc_index_zero_node);\n+\n+      /* Loop body.  */\n+      gfc_start_scalarized_body (&loop, &body);\n+\n+      dim = fold_build2_loc (input_location, MINUS_EXPR, gfc_array_index_type,\n+\t\t\t     loop.loopvar[0], loop.from[0]);\n+\n+      /* Set bounds and stride. */\n+      gfc_conv_descriptor_lbound_set (&body, desc, dim, gfc_index_one_node);\n+      gfc_conv_descriptor_stride_set (&body, desc, dim, stride);\n+\n+      gfc_conv_expr (&shapese, arg->next->next->expr);\n+      gfc_add_block_to_block (&body, &shapese.pre);\n+      gfc_conv_descriptor_ubound_set (&body, desc, dim, shapese.expr);\n+      gfc_add_block_to_block (&body, &shapese.post);\n+\n+      /* Calculate offset. */\n+      gfc_add_modify (&body, offset,\n+\t\t      fold_build2_loc (input_location, PLUS_EXPR,\n+\t\t\t\t       gfc_array_index_type, offset, stride));\n+      /* Update stride.  */\n+      gfc_add_modify (&body, stride,\n+\t\t      fold_build2_loc (input_location, MULT_EXPR,\n+\t\t\t\t       gfc_array_index_type, stride,\n+\t\t\t\t       fold_convert (gfc_array_index_type,\n+\t\t\t\t\t\t     shapese.expr)));\n+      /* Finish scalarization loop.  */ \n+      gfc_trans_scalarizing_loops (&loop, &body);\n+      gfc_add_block_to_block (&block, &loop.pre);\n+      gfc_add_block_to_block (&block, &loop.post);\n+      gfc_add_block_to_block (&block, &fptrse.post);\n+      gfc_cleanup_loop (&loop);\n+      gfc_free_ss (ss);\n+\n+      gfc_add_modify (&block, offset, \n+\t\t      fold_build1_loc (input_location, NEGATE_EXPR,\n+\t\t\t\t       gfc_array_index_type, offset));\n+      gfc_conv_descriptor_offset_set (&block, desc, offset);\n \n+      se->expr = gfc_finish_block (&block);\n       return 1;\n     }\n   else if (sym->intmod_sym_id == ISOCBINDING_ASSOCIATED)"}, {"sha": "8cb337b11af327a5f668d3b48a267b0e1a7a763a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d87d3076f3e9f8a1e85bdbf8304cf708d2ce370/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d87d3076f3e9f8a1e85bdbf8304cf708d2ce370/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0d87d3076f3e9f8a1e85bdbf8304cf708d2ce370", "patch": "@@ -1,3 +1,9 @@\n+2012-07-12  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/c_f_pointer_shape_tests_5.f90: New.\n+\t* gfortran.dg/c_f_pointer_tests_3.f90: Update\n+\tscan-tree-dump-times pattern.\n+\n 2012-07-11  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* g++.dg/debug/dwarf2/pubnames-2.C: Allow for / comments."}, {"sha": "f3e17892bf929977c1c6bb379e3694530ff41e79", "filename": "gcc/testsuite/gfortran.dg/c_f_pointer_shape_tests_5.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d87d3076f3e9f8a1e85bdbf8304cf708d2ce370/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_shape_tests_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d87d3076f3e9f8a1e85bdbf8304cf708d2ce370/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_shape_tests_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_shape_tests_5.f90?ref=0d87d3076f3e9f8a1e85bdbf8304cf708d2ce370", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do run }\n+!\n+! Check that C_F_Pointer works with a noncontiguous SHAPE argument\n+!\n+use iso_c_binding\n+type(c_ptr) :: x\n+integer, target :: array(3)\n+integer, pointer :: ptr(:,:)\n+integer, pointer :: ptr2(:,:,:)\n+integer :: myshape(5)\n+\n+array = [22,33,44]\n+x = c_loc(array)\n+myshape = [1,2,3,4,1]\n+\n+call c_f_pointer(x, ptr, shape=myshape(1:4:2))\n+if (any (lbound(ptr) /= [ 1, 1])) call abort ()\n+if (any (ubound(ptr) /= [ 1, 3])) call abort ()\n+if (any (shape(ptr) /= [ 1, 3])) call abort ()\n+if (any (ptr(1,:) /= array)) call abort()\n+\n+call c_f_pointer(x, ptr2, shape=myshape([1,3,1]))\n+if (any (lbound(ptr2) /= [ 1, 1, 1])) call abort ()\n+if (any (ubound(ptr2) /= [ 1, 3, 1])) call abort ()\n+if (any (shape(ptr2) /= [ 1, 3, 1])) call abort ()\n+if (any (ptr2(1,:,1) /= array)) call abort()\n+end"}, {"sha": "29072b814f74342b22d37747877e04492dc66d23", "filename": "gcc/testsuite/gfortran.dg/c_f_pointer_tests_3.f90", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d87d3076f3e9f8a1e85bdbf8304cf708d2ce370/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_tests_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d87d3076f3e9f8a1e85bdbf8304cf708d2ce370/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_tests_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_tests_3.f90?ref=0d87d3076f3e9f8a1e85bdbf8304cf708d2ce370", "patch": "@@ -21,14 +21,21 @@ program test\n   call c_f_procpointer(cfunptr, fprocptr)\n end program test\n \n-! Make sure there is only a single function call:\n-! { dg-final { scan-tree-dump-times \"c_f\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"c_f_pointer\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"c_f_pointer_i4\" 1 \"original\" } }\n+! Make sure there is no function call:\n+! { dg-final { scan-tree-dump-times \"c_f\" 0 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"c_f_pointer\" 0 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"c_f_pointer_i4\" 0 \"original\" } }\n !\n ! Check scalar c_f_pointer\n ! { dg-final { scan-tree-dump-times \"  fptr = .integer.kind=4. .. cptr\" 1 \"original\" } }\n !\n+! Array c_f_pointer:\n+!\n+! { dg-final { scan-tree-dump-times \" fptr_array.data = cptr;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \" fptr_array.dim\\\\\\[S..\\\\\\].lbound = 1;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \" fptr_array.dim\\\\\\[S..\\\\\\].ubound = \" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \" fptr_array.dim\\\\\\[S..\\\\\\].stride = \" 1 \"original\" } }\n+!\n ! Check c_f_procpointer\n ! { dg-final { scan-tree-dump-times \"  fprocptr = .integer.kind=4. .\\\\*<.*>. ... cfunptr;\" 1 \"original\" } }\n !"}]}