{"sha": "beb5d0f44c0d60a05204f3661275ebb770038a6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmViNWQwZjQ0YzBkNjBhMDUyMDRmMzY2MTI3NWViYjc3MDAzOGE2YQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2006-09-30T00:39:20Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-09-30T00:39:20Z"}, "message": "constructor_destructor_no_store_hash_fn_imps.hpp: Formating fixes.\n\n2006-09-29  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tconstructor_destructor_no_store_hash_fn_imps.hpp: Formating fixes.\n\t* include/ext/pb_ds/detail/basic_tree_policy/\n\tnull_node_metadata.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/const_point_iterator.hpp: Same.\n\t* include/ext/pb_ds/detail/basic_types.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_policy/\n\tmtf_lu_policy_imp.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_policy/\n\tcounter_lu_metadata.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_policy/\n\tsample_update_policy.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_policy/\n\tcounter_lu_policy_imp.hpp: Same.\n\t* include/ext/pb_ds/list_update_policy.hpp: Same.\n\nFrom-SVN: r117328", "tree": {"sha": "4d8c1b2f11542e2e8817aa21e0146bb2e9230b4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d8c1b2f11542e2e8817aa21e0146bb2e9230b4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/beb5d0f44c0d60a05204f3661275ebb770038a6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beb5d0f44c0d60a05204f3661275ebb770038a6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beb5d0f44c0d60a05204f3661275ebb770038a6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beb5d0f44c0d60a05204f3661275ebb770038a6a/comments", "author": null, "committer": null, "parents": [{"sha": "2e67b7183999a1dc2dab6c00be4360792cf942c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e67b7183999a1dc2dab6c00be4360792cf942c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e67b7183999a1dc2dab6c00be4360792cf942c7"}], "stats": {"total": 436, "additions": 122, "deletions": 314}, "files": [{"sha": "43570848a373806c5804cee61ccd96c2e7f9a61a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb5d0f44c0d60a05204f3661275ebb770038a6a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb5d0f44c0d60a05204f3661275ebb770038a6a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=beb5d0f44c0d60a05204f3661275ebb770038a6a", "patch": "@@ -1,3 +1,21 @@\n+2006-09-29  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tconstructor_destructor_no_store_hash_fn_imps.hpp: Formating fixes.\n+\t* include/ext/pb_ds/detail/basic_tree_policy/\n+\tnull_node_metadata.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/const_point_iterator.hpp: Same.\n+--\t* include/ext/pb_ds/detail/basic_types.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_policy/\n+\tmtf_lu_policy_imp.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_policy/\n+\tcounter_lu_metadata.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_policy/\n+\tsample_update_policy.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_policy/\n+\tcounter_lu_policy_imp.hpp: Same.\n+\t* include/ext/pb_ds/list_update_policy.hpp: Same.\t\n+\n 2006-09-29  Benjamin Kosnik  <bkoz@redhat.com>\n             Howard Hinnant  <hhinnant@apple.com>\n             Paolo Carlini  <pcarlini@suse.de>"}, {"sha": "23991987097a7f4bb05fefd8d0dc165fa33fe08d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/basic_tree_policy/null_node_metadata.hpp", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb5d0f44c0d60a05204f3661275ebb770038a6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbasic_tree_policy%2Fnull_node_metadata.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb5d0f44c0d60a05204f3661275ebb770038a6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbasic_tree_policy%2Fnull_node_metadata.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbasic_tree_policy%2Fnull_node_metadata.hpp?ref=beb5d0f44c0d60a05204f3661275ebb770038a6a", "patch": "@@ -53,31 +53,21 @@ namespace pb_ds\n {\n   namespace detail\n   {\n-\n     template<typename Key, class Data, class Allocator>\n     struct dumconst_node_iterator\n     {\n     private:\n-      typedef\n-      typename types_traits<\n-      Key,\n-      Data,\n-      Allocator,\n-      false>::pointer\n-      const_iterator;\n+      typedef typename types_traits<Key, Data, Allocator, false>::pointer const_iterator;\n \n     public:\n       typedef const_iterator value_type;\n-\n       typedef const_iterator const_reference;\n-\n       typedef const_reference reference;\n     };\n \n     struct null_node_metadata\n     { };\n-\n   } // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_NULL_NODE_METADATA_HPP\n+#endif "}, {"sha": "817ea25b5f2c4385e29c7b9e5c3d1b35510b1237", "filename": "libstdc++-v3/include/ext/pb_ds/detail/basic_types.hpp", "status": "modified", "additions": 54, "deletions": 185, "changes": 239, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb5d0f44c0d60a05204f3661275ebb770038a6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbasic_types.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb5d0f44c0d60a05204f3661275ebb770038a6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbasic_types.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbasic_types.hpp?ref=beb5d0f44c0d60a05204f3661275ebb770038a6a", "patch": "@@ -56,64 +56,34 @@ namespace pb_ds\n {\n   namespace detail\n   {\n-\n-    template<typename Key, class Mapped, class Allocator, bool Store_Hash>\n+    template<typename Key, typename Mapped, typename Allocator, bool Store_Hash>\n     struct value_type_base;\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\\\n-    template<typename Key, class Mapped, class Allocator>\n+#define PB_DS_CLASS_T_DEC \\\n+    template<typename Key, typename Mapped, typename Allocator>\n \n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-    value_type_base<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\tMapped,\t\t\\\n-\t\t\t\t\t\tAllocator,\t\\\n-\t\t\t\t\t\tfalse>\n+#define PB_DS_CLASS_C_DEC \\\n+    value_type_base<Key, Mapped, Allocator, false>\n \n     /**\n      * Specialization of value_type_base for the case where the hash value\n-     *    is not stored alongside each value.\n+     * is not stored alongside each value.\n      **/\n-    template<typename Key, class Mapped, class Allocator>\n-    struct value_type_base<\n-      Key,\n-      Mapped,\n-      Allocator,\n-      false>\n+    template<typename Key, typename Mapped, typename Allocator>\n+    struct value_type_base<Key, Mapped, Allocator, false>\n     {\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tMapped>::other\n-      mapped_type_allocator;\n-\n+      typedef typename Allocator::template rebind<Mapped>::other mapped_type_allocator;\n       typedef typename mapped_type_allocator::value_type mapped_type;\n-\n       typedef typename mapped_type_allocator::pointer mapped_pointer;\n-\n-      typedef\n-      typename mapped_type_allocator::const_pointer\n-      const_mapped_pointer;\n-\n+      typedef typename mapped_type_allocator::const_pointer const_mapped_pointer;\n       typedef typename mapped_type_allocator::reference mapped_reference;\n+      typedef typename mapped_type_allocator::const_reference const_mapped_reference;\n \n-      typedef\n-      typename mapped_type_allocator::const_reference\n-      const_mapped_reference;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tstd::pair<const Key, Mapped> >::other\n-      value_type_allocator;\n-\n+      typedef typename Allocator::template rebind<std::pair<const Key, Mapped> >::other value_type_allocator;\n       typedef typename value_type_allocator::value_type value_type;\n-\n       typedef typename value_type_allocator::pointer pointer;\n-\n       typedef typename value_type_allocator::const_pointer const_pointer;\n-\n       typedef typename value_type_allocator::reference reference;\n-\n       typedef typename value_type_allocator::const_reference const_reference;\n \n       struct stored_value_type\n@@ -123,255 +93,154 @@ namespace pb_ds\n     };\n \n #undef PB_DS_CLASS_T_DEC\n-\n #undef PB_DS_CLASS_C_DEC\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\\\n-    template<typename Key, class Mapped, class Allocator>\n+#define PB_DS_CLASS_T_DEC \\\n+    template<typename Key, typename Mapped, typename Allocator>\n \n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-    value_type_base<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\tMapped,\t\t\\\n-\t\t\t\t\t\tAllocator,\t\\\n-\t\t\t\t\t\ttrue>\n+#define PB_DS_CLASS_C_DEC \\\n+    value_type_base<Key, Mapped, Allocator, true>\n \n     /**\n      * Specialization of value_type_base for the case where the hash value\n-     *    is stored alongside each value.\n+     * is stored alongside each value.\n      **/\n-    template<typename Key, class Mapped, class Allocator>\n-    struct value_type_base<\n-      Key,\n-      Mapped,\n-      Allocator,\n-      true>\n+    template<typename Key, typename Mapped, typename Allocator>\n+    struct value_type_base<Key, Mapped, Allocator, true>\n     {\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tMapped>::other\n-      mapped_type_allocator;\n-\n+      typedef typename Allocator::template rebind<Mapped>::other mapped_type_allocator;\n       typedef typename mapped_type_allocator::value_type mapped_type;\n-\n       typedef typename mapped_type_allocator::pointer mapped_pointer;\n-\n-      typedef\n-      typename mapped_type_allocator::const_pointer\n-      const_mapped_pointer;\n-\n+      typedef typename mapped_type_allocator::const_pointer const_mapped_pointer;\n       typedef typename mapped_type_allocator::reference mapped_reference;\n+      typedef typename mapped_type_allocator::const_reference const_mapped_reference;\n \n-      typedef\n-      typename mapped_type_allocator::const_reference\n-      const_mapped_reference;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tstd::pair<const Key, Mapped> >::other\n-      value_type_allocator;\n-\n+      typedef typename Allocator::template rebind<std::pair<const Key, Mapped> >::other value_type_allocator;\n       typedef typename value_type_allocator::value_type value_type;\n-\n       typedef typename value_type_allocator::pointer pointer;\n-\n       typedef typename value_type_allocator::const_pointer const_pointer;\n-\n       typedef typename value_type_allocator::reference reference;\n-\n       typedef typename value_type_allocator::const_reference const_reference;\n \n       struct stored_value_type\n       {\n \tvalue_type m_value;\n-\n \ttypename Allocator::size_type m_hash;\n       };\n     };\n \n #undef PB_DS_CLASS_T_DEC\n-\n #undef PB_DS_CLASS_C_DEC\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-    template<typename Key, class Allocator>\n+#define PB_DS_CLASS_T_DEC \\\n+    template<typename Key, typename Allocator>\n \n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\t\\\n-    value_type_base<\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\t\\\n-\t\t\t\t\t\tnull_mapped_type,\t\\\n-\t\t\t\t\t\tAllocator,\t\t\\\n-\t\t\t\t\t\tfalse>\n+#define PB_DS_CLASS_C_DEC \\\n+    value_type_base<Key, null_mapped_type, Allocator, false>\n \n     /**\n      * Specialization of value_type_base for the case where the hash value\n-     *    is not stored alongside each value.\n+     * is not stored alongside each value.\n      **/\n-    template<typename Key, class Allocator>\n-    struct value_type_base<\n-      Key,\n-      null_mapped_type,\n-      Allocator,\n-      false>\n+    template<typename Key, typename Allocator>\n+    struct value_type_base<Key, null_mapped_type, Allocator, false>\n     {\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tnull_mapped_type>::other\n-      mapped_type_allocator;\n-\n+      typedef typename Allocator::template rebind<null_mapped_type>::other mapped_type_allocator;\n       typedef typename mapped_type_allocator::value_type mapped_type;\n-\n       typedef typename mapped_type_allocator::pointer mapped_pointer;\n-\n-      typedef\n-      typename mapped_type_allocator::const_pointer\n-      const_mapped_pointer;\n-\n+      typedef typename mapped_type_allocator::const_pointer const_mapped_pointer;\n       typedef typename mapped_type_allocator::reference mapped_reference;\n-\n-      typedef\n-      typename mapped_type_allocator::const_reference\n-      const_mapped_reference;\n+      typedef typename mapped_type_allocator::const_reference const_mapped_reference;\n \n       typedef Key value_type;\n \n-      typedef\n-      typename Allocator::template rebind<\n-\tvalue_type>::other\n-      value_type_allocator;\n-\n+      typedef typename Allocator::template rebind<value_type>::other value_type_allocator;\n       typedef typename value_type_allocator::pointer pointer;\n-\n       typedef typename value_type_allocator::const_pointer const_pointer;\n-\n       typedef typename value_type_allocator::reference reference;\n-\n       typedef typename value_type_allocator::const_reference const_reference;\n \n       struct stored_value_type\n       {\n-\tKey m_value;\n+\tvalue_type m_value;\n       };\n \n-    public:\n       static null_mapped_type s_null_mapped;\n     };\n \n     PB_DS_CLASS_T_DEC\n     null_mapped_type PB_DS_CLASS_C_DEC::s_null_mapped;\n \n #undef PB_DS_CLASS_T_DEC\n-\n #undef PB_DS_CLASS_C_DEC\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-    template<typename Key, class Allocator>\n+#define PB_DS_CLASS_T_DEC \\\n+    template<typename Key, typename Allocator>\n \n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\t\\\n-    value_type_base<\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\t\\\n-\t\t\t\t\t\tnull_mapped_type,\t\\\n-\t\t\t\t\t\tAllocator,\t\t\\\n-\t\t\t\t\t\ttrue>\n+#define PB_DS_CLASS_C_DEC \\\n+    value_type_base<Key, null_mapped_type, Allocator, true>\n \n     /**\n      * Specialization of value_type_base for the case where the hash value\n-     *    is stored alongside each value.\n+     * is stored alongside each value.\n      **/\n-    template<typename Key, class Allocator>\n-    struct value_type_base<\n-      Key,\n-      null_mapped_type,\n-      Allocator,\n-      true>\n+    template<typename Key, typename Allocator>\n+    struct value_type_base<Key, null_mapped_type, Allocator, true>\n     {\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tnull_mapped_type>::other\n-      mapped_type_allocator;\n-\n+      typedef typename Allocator::template rebind<null_mapped_type>::other mapped_type_allocator;\n       typedef typename mapped_type_allocator::value_type mapped_type;\n-\n       typedef typename mapped_type_allocator::pointer mapped_pointer;\n-\n-      typedef\n-      typename mapped_type_allocator::const_pointer\n-      const_mapped_pointer;\n-\n+      typedef typename mapped_type_allocator::const_pointer const_mapped_pointer;\n       typedef typename mapped_type_allocator::reference mapped_reference;\n-\n-      typedef\n-      typename mapped_type_allocator::const_reference\n-      const_mapped_reference;\n+      typedef typename mapped_type_allocator::const_reference const_mapped_reference;\n \n       typedef Key value_type;\n \n-      typedef\n-      typename Allocator::template rebind<\n-\tKey>::other\n-      value_type_allocator;\n-\n+      typedef typename Allocator::template rebind<value_type>::other value_type_allocator;\n       typedef typename value_type_allocator::pointer pointer;\n-\n       typedef typename value_type_allocator::const_pointer const_pointer;\n-\n       typedef typename value_type_allocator::reference reference;\n-\n       typedef typename value_type_allocator::const_reference const_reference;\n \n       struct stored_value_type\n       {\n-\tKey m_value;\n-\n+\tvalue_type m_value;\n \ttypename Allocator::size_type m_hash;\n       };\n \n-    public:\n       static null_mapped_type s_null_mapped;\n     };\n \n     PB_DS_CLASS_T_DEC\n     null_mapped_type PB_DS_CLASS_C_DEC::s_null_mapped;\n \n #undef PB_DS_CLASS_T_DEC\n-\n #undef PB_DS_CLASS_C_DEC\n \n-    template<typename Key, class Mapped>\n+    template<typename Key, typename Mapped>\n     struct no_throw_copies;\n \n-    template<typename Key, class Mapped>\n+    template<typename Key, typename Mapped>\n     struct no_throw_copies\n     {\n       typedef\n-      integral_constant<int,\n-\t\t\t\t       is_simple<Key>::value&& \n-      is_simple<Mapped>::value>\n+      integral_constant<int, is_simple<Key>::value && is_simple<Mapped>::value>\n       indicator;\n     };\n \n     template<typename Key>\n-    struct no_throw_copies<\n-      Key,\n-      null_mapped_type>\n+    struct no_throw_copies<Key, null_mapped_type>\n     {\n-      typedef\n-      integral_constant<int,\n-\t\t\t\t       is_simple<Key>::value>\n-      indicator;\n+      typedef integral_constant<int, is_simple<Key>::value> indicator;\n     };\n \n     template<typename Size_Type>\n     struct comp_hash_\n     {\n-      typedef std::pair< Size_Type, Size_Type> comp_hash;\n+      typedef std::pair<Size_Type, Size_Type> comp_hash;\n     };\n-\n   } // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_BASIC_TYPES_HPP\n+#endif \n "}, {"sha": "3a50cd6c4b1ea1ce6d487fc87decaaadaf5fe21c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/const_point_iterator.hpp", "status": "modified", "additions": 12, "deletions": 37, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb5d0f44c0d60a05204f3661275ebb770038a6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconst_point_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb5d0f44c0d60a05204f3661275ebb770038a6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconst_point_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconst_point_iterator.hpp?ref=beb5d0f44c0d60a05204f3661275ebb770038a6a", "patch": "@@ -55,29 +55,15 @@ namespace pb_ds\n {\n   namespace detail\n   {\n-\n-#define PB_DS_CLASS_T_DEC \\\n-    template<typename Value_Type, typename Entry, bool Simple, class Allocator>\n-\n-#define PB_DS_CLASS_C_DEC \\\n-    binary_heap_const_point_iterator_<Value_Type, Entry, Simple, Allocator>\n-\n     // Const point-type iterator.\n-    template<typename Value_Type,\n-\t     typename Entry,\n-\t     bool Simple,\n-\t     class Allocator>\n+    template<typename Value_Type, typename Entry, bool Simple, \n+\t     typename Allocator>\n     class binary_heap_const_point_iterator_\n     {\n-\n     protected:\n-      typedef\n-      typename Allocator::template rebind<\n-      Entry>::other::pointer\n-      entry_pointer;\n+      typedef typename Allocator::template rebind<Entry>::other::pointer entry_pointer;\n \n     public:\n-\n       // Category.\n       typedef trivial_iterator_tag iterator_category;\n \n@@ -88,31 +74,24 @@ namespace pb_ds\n       typedef Value_Type value_type;\n \n       // Iterator's pointer type.\n-      typedef\n-      typename Allocator::template rebind<\n-\tvalue_type>::other::pointer\n+      typedef typename Allocator::template rebind<value_type>::other::pointer\n       pointer;\n \n       // Iterator's const pointer type.\n       typedef\n-      typename Allocator::template rebind<\n-\tvalue_type>::other::const_pointer\n+      typename Allocator::template rebind<value_type>::other::const_pointer\n       const_pointer;\n \n       // Iterator's reference type.\n       typedef\n-      typename Allocator::template rebind<\n-\tvalue_type>::other::reference\n+      typename Allocator::template rebind<value_type>::other::reference\n       reference;\n \n       // Iterator's const reference type.\n       typedef\n-      typename Allocator::template rebind<\n-\tvalue_type>::other::const_reference\n+      typename Allocator::template rebind<value_type>::other::const_reference\n       const_reference;\n \n-    public:\n-\n       inline\n       binary_heap_const_point_iterator_(entry_pointer p_e) : m_p_e(p_e)\n       { }\n@@ -123,7 +102,7 @@ namespace pb_ds\n \n       // Copy constructor.\n       inline\n-      binary_heap_const_point_iterator_(const PB_DS_CLASS_C_DEC& other)\n+      binary_heap_const_point_iterator_(const binary_heap_const_point_iterator_& other)\n       : m_p_e(other.m_p_e)\n       { }\n \n@@ -132,25 +111,25 @@ namespace pb_ds\n       operator->() const\n       {\n \t_GLIBCXX_DEBUG_ASSERT(m_p_e != NULL);\n-\treturn to_ptr(integral_constant<int,Simple>());\n+\treturn to_ptr(integral_constant<int, Simple>());\n       }\n \n       // Access.\n       inline const_reference\n       operator*() const\n       {\n \t_GLIBCXX_DEBUG_ASSERT(m_p_e != NULL);\n-\treturn *to_ptr(integral_constant<int,Simple>());\n+\treturn *to_ptr(integral_constant<int, Simple>());\n       }\n \n       // Compares content to a different iterator object.\n       inline bool\n-      operator==(const PB_DS_CLASS_C_DEC& other) const\n+      operator==(const binary_heap_const_point_iterator_& other) const\n       { return m_p_e == other.m_p_e; }\n \n       // Compares content (negatively) to a different iterator object.\n       inline bool\n-      operator!=(const PB_DS_CLASS_C_DEC& other) const\n+      operator!=(const binary_heap_const_point_iterator_& other) const\n       { return m_p_e != other.m_p_e; }\n \n     private:\n@@ -165,10 +144,6 @@ namespace pb_ds\n     public:\n       entry_pointer m_p_e;\n     };\n-\n-#undef PB_DS_CLASS_T_DEC\n-#undef PB_DS_CLASS_C_DEC\n-\n   } // namespace detail\n } // namespace pb_ds\n "}, {"sha": "f2b41b37bca63c9a3ff1a2e1e2ebe6f98887b471", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/constructor_destructor_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb5d0f44c0d60a05204f3661275ebb770038a6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb5d0f44c0d60a05204f3661275ebb770038a6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp?ref=beb5d0f44c0d60a05204f3661275ebb770038a6a", "patch": "@@ -48,7 +48,8 @@\n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n-constructor_insert_new_imp(const_mapped_reference r_val, size_type pos, integral_constant<int,false>)\n+constructor_insert_new_imp(const_mapped_reference r_val, size_type pos, \n+\t\t\t   false_type)\n {\n   // Following lines might throw an exception.\n   entry_pointer p = get_entry(r_val, traits_base::s_no_throw_copies_indicator);"}, {"sha": "d8cd28916831a57163d1f6a3f7004c8a30043b07", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_policy/counter_lu_metadata.hpp", "status": "modified", "additions": 14, "deletions": 50, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb5d0f44c0d60a05204f3661275ebb770038a6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fcounter_lu_metadata.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb5d0f44c0d60a05204f3661275ebb770038a6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fcounter_lu_metadata.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fcounter_lu_metadata.hpp?ref=beb5d0f44c0d60a05204f3661275ebb770038a6a", "patch": "@@ -48,81 +48,45 @@ namespace pb_ds\n {\n   namespace detail\n   {\n-\n     template<typename Size_Type>\n     class counter_lu_policy_base;\n \n-    // A list-update metadata type that moves elements to the front of the list based on the counter algorithm.\n+    // A list-update metadata type that moves elements to the front of\n+    // the list based on the counter algorithm.\n     template<typename Size_Type = size_t>\n     class counter_lu_metadata\n     {\n-\n     public:\n-\n       typedef Size_Type size_type;\n \n     private:\n       counter_lu_metadata(size_type init_count) : m_count(init_count)\n       { }\n \n-    private:\n-      mutable size_type m_count;\n+      friend class counter_lu_policy_base<size_type>;\n \n-      friend class counter_lu_policy_base<Size_Type>;\n+      mutable size_type m_count;\n     };\n \n-    template<typename Size_Type>\n-    class counter_lu_policy_base;\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-    template<typename Size_Type>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-    counter_lu_policy_base<\t\t\t\t\t\\\n-\t\t\t\t\t\tSize_Type>\n-\n     template<typename Size_Type>\n     class counter_lu_policy_base\n     {\n     protected:\n       typedef Size_Type size_type;\n \n-    protected:\n-      counter_lu_metadata<\n-      Size_Type>\n-      operator()(size_type max_size) const;\n+      counter_lu_metadata<size_type>\n+      operator()(size_type max_size) const\n+      { return counter_lu_metadata<Size_Type>(rand() % max_size); }\n \n       template<typename Metadata_Reference>\n       bool\n-      operator()(Metadata_Reference r_data, size_type m_max_count) const;\n+      operator()(Metadata_Reference r_data, size_type m_max_count) const\n+      {\n+\tif (++r_data.m_count != m_max_count)\n+\t  return false;\n+\tr_data.m_count = 0;\n+\treturn true;\n+      }\n     };\n-\n-    PB_DS_CLASS_T_DEC\n-    counter_lu_metadata<\n-      Size_Type>\n-    PB_DS_CLASS_C_DEC::\n-    operator()(size_type m_max_count) const\n-    {\n-      return (counter_lu_metadata<Size_Type>(rand() % m_max_count));\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    template<typename Metadata_Reference>\n-    inline bool\n-    PB_DS_CLASS_C_DEC::\n-    operator()(Metadata_Reference r_data, size_type m_max_count) const\n-    {\n-      if (++r_data.m_count != m_max_count)\n-\treturn (false);\n-\n-      r_data.m_count = 0;\n-\n-      return (true);\n-    }\n-\n   } // namespace detail\n } // namespace pb_ds\n-\n-#undef PB_DS_CLASS_T_DEC\n-\n-#undef PB_DS_CLASS_C_DEC"}, {"sha": "42e1bdf2836c353b923ecf1b1d45083b41eb2b1b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_policy/counter_lu_policy_imp.hpp", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb5d0f44c0d60a05204f3661275ebb770038a6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fcounter_lu_policy_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb5d0f44c0d60a05204f3661275ebb770038a6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fcounter_lu_policy_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fcounter_lu_policy_imp.hpp?ref=beb5d0f44c0d60a05204f3661275ebb770038a6a", "patch": "@@ -45,18 +45,13 @@\n  */\n \n PB_DS_CLASS_T_DEC\n-detail::counter_lu_metadata<\n-  typename Allocator::size_type>\n+detail::counter_lu_metadata<typename Allocator::size_type>\n PB_DS_CLASS_C_DEC::\n operator()() const\n-{\n-  return (base_type::operator()(max_count));\n-}\n+{ return (base_type::operator()(max_count)); }\n \n PB_DS_CLASS_T_DEC\n bool\n PB_DS_CLASS_C_DEC::\n operator()(metadata_reference r_data) const\n-{\n-  return (base_type::operator()(r_data, max_count));\n-}\n+{ return (base_type::operator()(r_data, max_count)); }"}, {"sha": "8f9d9460df21081a49e47f8ec2d18c8dc69168e6", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_policy/mtf_lu_policy_imp.hpp", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb5d0f44c0d60a05204f3661275ebb770038a6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fmtf_lu_policy_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb5d0f44c0d60a05204f3661275ebb770038a6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fmtf_lu_policy_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fmtf_lu_policy_imp.hpp?ref=beb5d0f44c0d60a05204f3661275ebb770038a6a", "patch": "@@ -51,15 +51,11 @@ PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::metadata_type\n PB_DS_CLASS_C_DEC::\n operator()() const\n-{\n-  return s_metadata;\n-}\n+{ return s_metadata; }\n \n PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n operator()(metadata_reference /*r_data*/) const\n-{\n-  return true;\n-}\n+{ return true; }\n "}, {"sha": "8cfc1f2310d1692784a0cc9db51a2c9089b723c8", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_policy/sample_update_policy.hpp", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb5d0f44c0d60a05204f3661275ebb770038a6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fsample_update_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb5d0f44c0d60a05204f3661275ebb770038a6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fsample_update_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_policy%2Fsample_update_policy.hpp?ref=beb5d0f44c0d60a05204f3661275ebb770038a6a", "patch": "@@ -48,36 +48,33 @@\n #define PB_DS_SAMPLE_UPDATE_POLICY_HPP\n \n // A sample list-update policy.\n-class sample_update_policy\n+struct sample_update_policy\n {\n-\n-public:\n-\n   // Default constructor.\n   sample_update_policy();\n \n   // Copy constructor.\n-  sample_update_policy(const sample_update_policy& other);\n+  sample_update_policy(const sample_update_policy&);\n \n   // Swaps content.\n   inline void\n   swap(sample_update_policy& other);\n \n protected:\n-\n   // Metadata on which this functor operates.\n   typedef some_metadata_type metadata_type;\n \n-protected:\n-\n   // Creates a metadata object.\n   metadata_type\n   operator()() const;\n \n-  // Decides whether a metadata object should be moved to the front of the list. A list-update based containers object will call this method to decide whether to move a node to the front of the list. The method shoule return true if the node should be moved to the front of the list.\n+  // Decides whether a metadata object should be moved to the front of\n+  // the list. A list-update based containers object will call this\n+  // method to decide whether to move a node to the front of the\n+  // list. The method shoule return true if the node should be moved\n+  // to the front of the list.\n   bool\n-  operator()(metadata_reference r_data) const;\n-\n+  operator()(metadata_reference) const;\n };\n \n-#endif // #ifndef PB_DS_SAMPLE_UPDATE_POLICY_HPP\n+#endif "}, {"sha": "cfe2a2c375e105269a3b5f68c05e11ffda573ed5", "filename": "libstdc++-v3/include/ext/pb_ds/list_update_policy.hpp", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb5d0f44c0d60a05204f3661275ebb770038a6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Flist_update_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb5d0f44c0d60a05204f3661275ebb770038a6a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Flist_update_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Flist_update_policy.hpp?ref=beb5d0f44c0d60a05204f3661275ebb770038a6a", "patch": "@@ -78,7 +78,8 @@ namespace pb_ds\n     metadata_type\n     operator()() const;\n       \n-    // Decides whether a metadata object should be moved to the front of the list.\n+    // Decides whether a metadata object should be moved to the front\n+    // of the list.\n     inline bool\n     operator()(metadata_reference r_metadata) const;\n       \n@@ -94,7 +95,8 @@ namespace pb_ds\n #define PB_DS_CLASS_T_DEC template<size_t Max_Count, class Allocator>\n #define PB_DS_CLASS_C_DEC counter_lu_policy<Max_Count, Allocator>\n \n-  // A list-update policy that moves elements to the front of the list based on the counter algorithm.\n+  // A list-update policy that moves elements to the front of the list\n+  // based on the counter algorithm.\n   template<size_t Max_Count = 5, typename Allocator = std::allocator<char> >\n   class counter_lu_policy \n   : private detail::counter_lu_policy_base<typename Allocator::size_type>\n@@ -120,7 +122,8 @@ namespace pb_ds\n     metadata_type\n     operator()() const;\n \n-    // Decides whether a metadata object should be moved to the front of the list.\n+    // Decides whether a metadata object should be moved to the front\n+    // of the list.\n     bool\n     operator()(metadata_reference r_metadata) const;\n "}]}