{"sha": "dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM5MGNjOGMyM2YxZTE4ZjY3ZThmNGQ0YTZkYTQxYmY2YTA0YTE0Nw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2019-05-15T15:39:38Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2019-05-15T15:39:38Z"}, "message": "i386: Add tests for MMX intrinsic emulations with SSE\n\nTest MMX intrinsics with -msse2 in 32-bit mode and -msse2 -mno-mmx in\n64-bit mode.\n\n\tPR target/89021\n\t* gcc.target/i386/mmx-vals.h: New file.\n\t* gcc.target/i386/sse2-mmx-2.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-3.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-4.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-5.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-6.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-7.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-8.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-9.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-10.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-11.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-12.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-13.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-14.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-15.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-16.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-17.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-18a.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-18b.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-18c.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-19a.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-18b.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-19c.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-19d.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-19e.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-20.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-21.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-22.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-cvtpi2ps.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-cvtps2pi.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-cvttps2pi.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-maskmovq.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-packssdw.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-packsswb.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-packuswb.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-paddb.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-paddd.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-paddq.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-paddsb.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-paddsw.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-paddusb.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-paddusw.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-paddw.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-pand.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-pandn.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-pavgb.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-pavgw.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-pcmpeqb.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-pcmpeqd.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-pcmpeqw.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-pcmpgtb.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-pcmpgtd.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-pcmpgtw.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-pextrw.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-pinsrw.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-pmaddwd.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-pmaxsw.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-pmaxub.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-pminsw.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-pminub.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-pmovmskb.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-pmulhuw.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-pmulhw.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-pmullw.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-pmuludq.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-por.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-psadbw.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-pshufw.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-pslld.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-pslldi.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-psllq.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-psllqi.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-psllw.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-psllwi.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-psrad.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-psradi.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-psraw.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-psrawi.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-psrld.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-psrldi.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-psrlq.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-psrlqi.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-psrlw.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-psrlwi.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-psubb.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-psubd.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-psubq.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-psubusb.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-psubusw.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-psubw.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-punpckhbw.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-punpckhdq.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-punpckhwd.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-punpcklbw.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-punpckldq.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-punpcklwd.c: Likewise.\n\t* gcc.target/i386/sse2-mmx-pxor.c: Likewise.\n\nFrom-SVN: r271254", "tree": {"sha": "ceeaff0b05483c0f02544dec6b7f44d02716a925", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ceeaff0b05483c0f02544dec6b7f44d02716a925"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0cfa5d9c595bc2566e0030ea30a9cfd83652e046", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cfa5d9c595bc2566e0030ea30a9cfd83652e046", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cfa5d9c595bc2566e0030ea30a9cfd83652e046"}], "stats": {"total": 5241, "additions": 5241, "deletions": 0}, "files": [{"sha": "a85e383f8580f1654020fef6a142450fd61a06fa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -1,3 +1,104 @@\n+2019-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/89021\n+\t* gcc.target/i386/mmx-vals.h: New file.\n+\t* gcc.target/i386/sse2-mmx-2.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-3.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-4.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-5.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-6.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-7.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-8.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-9.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-10.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-11.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-12.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-13.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-14.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-15.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-16.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-17.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-18a.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-18b.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-18c.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-19a.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-18b.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-19c.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-19d.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-19e.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-20.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-21.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-22.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-cvtpi2ps.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-cvtps2pi.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-cvttps2pi.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-maskmovq.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-packssdw.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-packsswb.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-packuswb.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-paddb.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-paddd.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-paddq.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-paddsb.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-paddsw.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-paddusb.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-paddusw.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-paddw.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-pand.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-pandn.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-pavgb.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-pavgw.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-pcmpeqb.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-pcmpeqd.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-pcmpeqw.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-pcmpgtb.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-pcmpgtd.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-pcmpgtw.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-pextrw.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-pinsrw.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-pmaddwd.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-pmaxsw.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-pmaxub.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-pminsw.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-pminub.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-pmovmskb.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-pmulhuw.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-pmulhw.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-pmullw.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-pmuludq.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-por.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-psadbw.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-pshufw.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-pslld.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-pslldi.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-psllq.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-psllqi.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-psllw.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-psllwi.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-psrad.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-psradi.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-psraw.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-psrawi.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-psrld.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-psrldi.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-psrlq.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-psrlqi.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-psrlw.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-psrlwi.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-psubb.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-psubd.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-psubq.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-psubusb.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-psubusw.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-psubw.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-punpckhbw.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-punpckhdq.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-punpckhwd.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-punpcklbw.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-punpckldq.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-punpcklwd.c: Likewise.\n+\t* gcc.target/i386/sse2-mmx-pxor.c: Likewise.\n+\n 2019-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/89021"}, {"sha": "62d0c1cb514d3c0748ba88e9d401d1d52dc259da", "filename": "gcc/testsuite/gcc.target/i386/mmx-vals.h", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmmx-vals.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmmx-vals.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmmx-vals.h?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,77 @@\n+/* Routine to check correctness of the results */\n+\n+__attribute__((unused))\n+static int\n+saturate_b (int i)\n+{\n+  if (i > 127)\n+    i = 127;\n+  else if (i < -128)\n+    i = -128;\n+  return i;\n+}\n+\n+__attribute__((unused))\n+static int\n+saturate_w (int i)\n+{\n+  if (i > 32767)\n+    i = 32767;\n+  else if (i < -32768)\n+    i = -32768;\n+  return i;\n+}\n+\n+__attribute__((unused))\n+static int\n+saturate_ub (int i)\n+{\n+  if (i > 255)\n+    i = 255;\n+  else if (i < 0)\n+    i = 0;\n+  return i;\n+}\n+\n+__attribute__((unused))\n+static int\n+saturate_uw (int i)\n+{\n+  if (i > 65535)\n+    i = 65535;\n+  else if (i < 0)\n+    i = 0;\n+  return i;\n+}\n+\n+static long long MMXops[] =\n+{\n+  0x3467512347612976LL, 0x000000000000000eLL,\n+  0x3467512347612976LL, 0x0000000000000014LL,\n+  0x3467512347612976LL, 0x000000000000003cLL,\n+  0x0000000000000000LL, 0xFFFFFFFFFFFFFFFFLL,\n+  0xFFFFFFFFFFFFFFFFLL, 0x0000000000000000LL,\n+  0x0000000000000001LL, 0x1000000000000000LL,\n+  0x1000000000000000LL, 0x0000000000000001LL,\n+  0xFF00FF00FF00FF00LL, 0x00FF00FF00FF00FFLL,\n+  0xFFFFFFFFFFFFFFFFLL, 0x0101010101010101LL,\n+  0x0101010101010101LL, 0xFFFFFFFFFFFFFFFFLL,\n+  0x0123456789ABCDEFLL, 0x0123456789ABCDEFLL,\n+  0x3467512347612976LL, 0x1839876340879234LL,\n+  0x0000000000000000LL, 0x0000000000000000LL,\n+  0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL,\n+  0x7F7F7F7F7F7F7F7FLL, 0x7F7F7F7F7F7F7F7FLL,\n+  0x7F7F7F7F7F7F7F7FLL, 0x0101010101010101LL,\n+  0x7F7F7F7F7F7F7F7FLL, 0x4782082349761237LL,\n+  0x0000000000000000LL, 0x7F7F7F7F7F7F7F7FLL,\n+  0x8080808080808080LL, 0x8080808080808080LL,\n+  0x0101010101010101LL, 0x8080808080808080LL,\n+  0x8080808080808080LL, 0x0000000000000000LL,\n+  0x2372347120982458LL, 0x8080808080808080LL,\n+  0xFFFFFFFFFFFFFFFFLL, 0x8080808080808080LL,\n+  0x7F7F7F7F7F7F7F7FLL, 0xFFFFFFFFFFFFFFFFLL,\n+  0x8080808080808080LL, 0x7F7F7F7F7F7F7F7FLL,\n+  0xFFFFFFFFFFFFFFFFLL, 0x7F7F7F7F7F7F7F7FLL\n+};\n+\n+#define MMX_num_ops (sizeof (MMXops) / sizeof (MMXops[0]))"}, {"sha": "4da7ed3a3e91440916cd8cc3239ed9d5178766ed", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-10.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-10.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_from_int  (long long *ll1, long long *r)\n+{\n+  int i1 = *(int *) ll1;\n+  *(__m64 *) r = _m_from_int (i1);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *ll1, long long *r)\n+{\n+  int *res = (int *) r;\n+  res[0] = *(int *) ll1;\n+  res[1] = 0;\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i++)\n+    {\n+      test_from_int (&MMXops[i], &r);\n+      compute_correct_result (&MMXops[i], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "6737ec5f2d4c6f6d6553b2354733dbc8f326cfb1", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-11.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-11.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2 -mno-mmx\" } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_from_long_long  (long long *ll1, long long *r)\n+{\n+  *(__m64 *) r = _mm_cvtsi64_m64 (*ll1);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *ll1, long long *r)\n+{\n+  *r = *ll1;\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i++)\n+    {\n+      test_from_long_long (&MMXops[i], &r);\n+      compute_correct_result (&MMXops[i], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "b626daa0aab9ddd166d0d18d46249bf70f5855de", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-12.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-12.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_to_int  (long long *ll1, long long *r)\n+{\n+  __m64 m = *(__m64 *) ll1; \n+  *(int *) r = _m_to_int (m);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *ll1, long long *r)\n+{\n+  int *i1 = (int *) ll1;\n+  *(int *) r = *i1;\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r = 0, ck = 0;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i++)\n+    {\n+      test_to_int (&MMXops[i], &r);\n+      compute_correct_result (&MMXops[i], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "fd1eed66daa7486a5fd32701a3b4c0855e27939b", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-13.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-13.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2 -mno-mmx\" } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_to_long_long  (long long *ll1, long long *r)\n+{\n+  __m64 m = *(__m64 *) ll1; \n+  *r = _mm_cvtm64_si64 (m);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *ll1, long long *r)\n+{\n+  *r = *ll1;\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i++)\n+    {\n+      test_to_long_long (&MMXops[i], &r);\n+      compute_correct_result (&MMXops[i], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "bc21ba711da533174a68bacf5eb262e01f7ed557", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-14.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-14.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_setzero (long long *r)\n+{\n+  *(__m64 *) r = _mm_setzero_si64 ();\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *r)\n+{\n+  *r = 0x0LL;\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  long long r, ck;\n+\n+  /* Run the MMX tests */\n+  test_setzero (&r);\n+  compute_correct_result (&ck);\n+  if (ck != r)\n+    abort ();\n+}"}, {"sha": "ab8451b591da14a6a1e555edd1b9a42cc8a6d87f", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-15.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-15.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_set (int x, int y, long long *r)\n+{\n+  *(__m64 *) r = _mm_set_pi32 (x, y);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (int x, int y, long long *res_p)\n+{\n+  int *res = (int *) res_p;\n+  res[0] = y;\n+  res[1] = x;\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int x, y;\n+  long long r, ck;\n+\n+  /* Run the MMX tests */\n+  x = 0x0badbeef;\n+  y = 0x0badfeed;\n+  test_set (x, y, &r);\n+  compute_correct_result (x, y, &ck);\n+  if (ck != r)\n+    abort ();\n+}"}, {"sha": "b348b9f1c64f407a55208600aaa2ab6923299da3", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-16.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-16.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_set (int i0, int i1, int i2, int i3, long long *r)\n+{\n+  *(__m64 *) r = _mm_set_pi16 (i0, i1, i2, i3);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (int i0, int i1, int i2, int i3, long long *res_p)\n+{\n+  short *res = (short *) res_p;\n+  res[0] = i3;\n+  res[1] = i2;\n+  res[2] = i1;\n+  res[3] = i0;\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  short i0, i1, i2, i3;\n+  long long r, ck;\n+\n+  /* Run the MMX tests */\n+  i0 = 0x0bad;\n+  i1 = 0xbeef;\n+  i2 = 0x0bad;\n+  i3 = 0xfeed;\n+  test_set (i0, i1, i2, i3, &r);\n+  compute_correct_result (i0, i1, i2, i3, &ck);\n+  if (ck != r)\n+    abort ();\n+}"}, {"sha": "756cbeb33da26d6aa3588dfc7960ee3fc47b2d31", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-17.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-17.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_set (char i0, char i1, char i2, char i3,\n+\t  char i4, char i5, char i6, char i7, long long *r)\n+{\n+  *(__m64 *) r = _mm_set_pi8 (i0, i1, i2, i3, i4, i5, i6, i7);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (char i0, char i1, char i2, char i3,\n+\t\t\tchar i4, char i5, char i6, char i7,\n+\t\t\tlong long *res_p)\n+{\n+  char *res = (char *) res_p;\n+  res[0] = i7;\n+  res[1] = i6;\n+  res[2] = i5;\n+  res[3] = i4;\n+  res[4] = i3;\n+  res[5] = i2;\n+  res[6] = i1;\n+  res[7] = i0;\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  char i0, i1, i2, i3, i4, i5, i6, i7;\n+  long long r, ck;\n+\n+  /* Run the MMX tests */\n+  i0 = 0x12;\n+  i1 = 0x34;\n+  i2 = 0x56;\n+  i3 = 0x78;\n+  i4 = 0x90;\n+  i5 = 0xab;\n+  i6 = 0xcd;\n+  i7 = 0xef;\n+  test_set (i0, i1, i2, i3, i4, i5, i6, i7, &r);\n+  compute_correct_result (i0, i1, i2, i3, i4, i5, i6, i7, &ck);\n+  if (ck != r)\n+    abort ();\n+}"}, {"sha": "3505a5c0cf445f75b66179e4bb8acd9f7c162984", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-18a.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-18a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-18a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-18a.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -msse2 -mno-mmx -mno-avx512vl\" } */\n+/* { dg-final { scan-assembler-times \"pshufd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movd\" 1 } } */\n+/* { dg-final { scan-assembler-not \"movl\" } } */\n+\n+#include <mmintrin.h>\n+\n+__m64\n+foo (int i)\n+{\n+  __v2si x = { i, i };\n+  return (__m64) x;\n+}"}, {"sha": "9b267b173465cec3458b527332fd1ef9e7a35ca0", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-18b.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-18b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-18b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-18b.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mno-mmx -mavx512bw -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"pbroadcastd\" 1 } } */\n+/* { dg-final { scan-assembler-not \"movd\" } } */\n+/* { dg-final { scan-assembler-not \"movl\" } } */\n+\n+#include \"sse2-mmx-18a.c\""}, {"sha": "394f05b6b49b71f4c1c0d639c1af76d7b305666c", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-18c.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-18c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-18c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-18c.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mno-mmx -mavx512bw -mno-avx512vl\" } */\n+/* { dg-final { scan-assembler-times \"pshufd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movd\" 1 } } */\n+/* { dg-final { scan-assembler-not \"movl\" } } */\n+\n+#include \"sse2-mmx-18a.c\""}, {"sha": "9715ace241f8f03dfc9f3b175005f24777ff6d34", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-19a.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-19a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-19a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-19a.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -msse2 -mno-mmx -mno-avx -mtune=intel\" } */\n+/* { dg-final { scan-assembler-times \"pshuflw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movd\" 1 } } */\n+/* { dg-final { scan-assembler-not \"movl\" } } */\n+\n+#include <mmintrin.h>\n+\n+__m64\n+foo (short i)\n+{\n+  __v4hi x = { i, i, i, i };\n+  return (__m64) x;\n+}"}, {"sha": "a6d42313336f2622e4577554f89bd4e0f27318e7", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-19b.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-19b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-19b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-19b.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mno-mmx -mavx512bw -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"pbroadcastw\" 1 } } */\n+/* { dg-final { scan-assembler-not \"movd\" } } */\n+/* { dg-final { scan-assembler-not \"movl\" } } */\n+\n+#include \"sse2-mmx-19a.c\""}, {"sha": "b02dc8c2ffd13c685fc222c53d7ae1e7fee4a986", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-19c.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-19c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-19c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-19c.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mno-mmx -mavx -mno-avx2 -mtune=intel\" } */\n+/* { dg-final { scan-assembler-times \"pshuflw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movd\" 1 } } */\n+/* { dg-final { scan-assembler-not \"movl\" } } */\n+\n+#include \"sse2-mmx-19a.c\""}, {"sha": "54691883c9caa97f3108ad3cb1dcfbef23cf7c3c", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-19d.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-19d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-19d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-19d.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mno-mmx -mavx512bw -mno-avx512vl -mtune=intel\" } */\n+/* { dg-final { scan-assembler-times \"pbroadcastw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movd\" 1 } } */\n+/* { dg-final { scan-assembler-not \"movl\" } } */\n+\n+#include \"sse2-mmx-19a.c\""}, {"sha": "8be973cc4fcf10fe0769aebf96eb3b40bdb66036", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-19e.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-19e.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-19e.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-19e.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mno-mmx -mavx2 -mno-avx512f -mtune=intel\" } */\n+/* { dg-final { scan-assembler-times \"pbroadcastw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movd\" 1 } } */\n+/* { dg-final { scan-assembler-not \"movl\" } } */\n+\n+#include \"sse2-mmx-19a.c\""}, {"sha": "e4cee2da83e75c9ba83e48f39b2f95d9e5f3da76", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-2.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -msse2 -mno-mmx\" } */\n+/* { dg-final { scan-assembler-not \"%xmm\" } } */\n+/* { dg-final { scan-assembler-not \"%mm\" } } */\n+\n+#include <mmintrin.h>\n+\n+float\n+foo (__m64 x)\n+{\n+  return ((__v2sf) x)[0];\n+}"}, {"sha": "173fa154d400f2855ea97b75c0161a911c6190e2", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-20.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-20.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -msse2 -mno-mmx\" } */\n+/* { dg-final { scan-assembler-times \"movd\" 1 } } */\n+/* { dg-final { scan-assembler-not \"%mm\" } } */\n+\n+#include <mmintrin.h>\n+\n+int\n+foo (__m64 x)\n+{\n+  return ((__v2si) x)[0];\n+}"}, {"sha": "8f5341e2de633bb2031f7346c0ed8962911b74ab", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-21.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-21.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -msse2 -mno-mmx\" } */\n+/* { dg-final { scan-assembler-times \"pshufd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movd\" 1 } } */\n+/* { dg-final { scan-assembler-not \"%mm\" } } */\n+\n+#include <mmintrin.h>\n+\n+int\n+foo (__m64 x)\n+{\n+  return ((__v2si) x)[1];\n+}"}, {"sha": "94fa5874365166b13de7d1331455ae2056a2ff8a", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-22.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-22.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include <mmintrin.h>\n+\n+void\n+foo (void)\n+{\n+  _mm_empty ();\n+}\n+\n+/* { dg-final { scan-assembler-times \"emms\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-not \"emms\" { target { ! ia32 } } } } */"}, {"sha": "77f518b6c5fe113a5512cb05d08ae8bbccc19cac", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-3.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -msse2 -mno-mmx\" } */\n+/* { dg-final { scan-assembler \"cvtdq2ps\" } } */\n+/* { dg-final { scan-assembler-not \"cvtpi2ps\" } } */\n+/* { dg-final { scan-assembler-not \"%mm\" } } */\n+\n+#include <xmmintrin.h>\n+\n+__m128\n+foo (__m128 i1, __m64 i2)\n+{\n+  return _mm_cvtpi32_ps (i1, i2);\n+}"}, {"sha": "d923724fc1c1a7c9094b89f8a29b1fb070f74e61", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-4.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-4.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -msse2 -mno-mmx\" } */\n+\n+#include \"mmx-4.c\""}, {"sha": "1953dc89bb146dc80ad2ecbec433dd6921f144cc", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-5.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-5.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -msse2 -mno-mmx\" } */\n+/* { dg-final { scan-assembler-not \"%mm\" } } */\n+\n+#include <xmmintrin.h>\n+\n+int\n+foo (__m64 i)\n+{\n+  return _m_pextrw (i, 2);\n+}"}, {"sha": "f73444f493b604e5c9ea430df4a49f46dd735abb", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-6.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-6.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -msse2 -mno-mmx\" } */\n+/* { dg-final { scan-assembler-not \"%mm\" } } */\n+\n+#include <xmmintrin.h>\n+\n+__m64\n+foo (__m64 i, int w)\n+{\n+  return _m_pinsrw (i, w, 2);\n+}"}, {"sha": "6ea491d27154551c6dfb109cc80d96bf05ab4242", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-7.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-7.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -msse2 -mno-mmx\" } */\n+/* { dg-final { scan-assembler \"movnti\" } } */\n+/* { dg-final { scan-assembler-not \"movntq\" } } */\n+/* { dg-final { scan-assembler-not \"%mm\" } } */\n+\n+#include <xmmintrin.h>\n+\n+void\n+foo (__m64 *p, __m64 i)\n+{\n+  _mm_stream_pi (p, i);\n+}"}, {"sha": "342c2fa4f256a5e36974b1a1abd527201ad34078", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-8.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-8.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -msse2 -mno-mmx\" } */\n+\n+#include \"mmx-8.c\""}, {"sha": "f0bf7256c0e639a08a4cf35914d30d707df66714", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-9.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-9.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -msse2 -mno-mmx\" } */\n+/* { dg-require-effective-target sse2 } */\n+\n+#include \"sse2-check.h\"\n+\n+#include <string.h>\n+\n+#define FLOAT_X\t2.3456\n+#define FLOAT_Y\t-4.5987\n+\n+static float expected_x = FLOAT_X;\n+static float expected_y = FLOAT_Y;\n+static __v2sf expected1 = { FLOAT_X, FLOAT_Y };\n+static __v2sf expected2 = { FLOAT_X, 0 };\n+static __v2sf expected3 = { FLOAT_X, FLOAT_X };\n+\n+float\n+__attribute__((noinline, noclone))\n+foo1 (__m64 x)\n+{\n+  return ((__v2sf) x)[0];\n+}\n+\n+float\n+__attribute__((noinline, noclone))\n+foo2 (__m64 x)\n+{\n+  return ((__v2sf) x)[1];\n+}\n+\n+__m64\n+__attribute__((noinline, noclone))\n+foo3 (float x)\n+{\n+  return __extension__ (__m64) (__v2sf) { x, 0 };\n+}\n+\n+__m64\n+__attribute__((noinline, noclone))\n+foo4 (float x)\n+{\n+  return __extension__ (__m64) (__v2sf) { x, x };\n+}\n+\n+__m64\n+__attribute__((noinline, noclone))\n+foo5 (float x, float y)\n+{\n+  return __extension__ (__m64) (__v2sf) { x, y };\n+}\n+\n+void\n+__attribute__((noinline))\n+sse2_test (void)\n+{\n+  __m64 res;\n+  float x;\n+\n+  x = foo1 ((__m64) expected1);\n+  if (x != expected_x)\n+    abort ();\n+\n+  x = foo2 ((__m64) expected1);\n+  if (x != expected_y)\n+    abort ();\n+\n+  res = foo3 (FLOAT_X); \n+  if (memcmp (&res, &expected2, sizeof (res)))\n+    abort ();\n+\n+  res = foo4 (FLOAT_X); \n+  if (memcmp (&res, &expected3, sizeof (res)))\n+    abort ();\n+\n+  res = foo5 (FLOAT_X, FLOAT_Y); \n+  if (memcmp (&res, &expected1, sizeof (res)))\n+    abort ();\n+}"}, {"sha": "4ab38d6f0159b6cb6384766f05ae5fde7e43c16c", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-cvtpi2ps.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-cvtpi2ps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-cvtpi2ps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-cvtpi2ps.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include <string.h>\n+#include \"sse2-check.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_cvtpi32_ps (__m128 *i1, __m64 *i2, __m128 *r)\n+{\n+  *(__m128 *) r = _mm_cvtpi32_ps (*i1, *i2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (__m128 *dst_p, __m64 *src_p, __m128 *res_p)\n+{\n+  int *src = (int *) src_p;\n+  float *res = (float *) res_p;\n+  *res_p = *dst_p;\n+  int i;\n+  __m128 r;\n+  for (i = 0; i < 2; i++)\n+    {\n+      r = _mm_cvt_si2ss (*dst_p, src[i]);\n+      res[i] = ((__v4sf) r)[0];\n+    }\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  __m128 r, ck;\n+  __v4sf x = { 1.99f, -3.9f, -4.9f, 3.8f };\n+  __v2si y = { 30, -39 };\n+\n+  /* Run the MMX tests */\n+  test_cvtpi32_ps ((__m128 *) &x, (__m64 *) &y, &r);\n+  compute_correct_result ((__m128 *) &x, (__m64 *) &y, &ck);\n+  if (memcmp (&ck, &r, sizeof (r)))\n+    abort ();\n+}"}, {"sha": "6084c9ff3d5702570b531cb1a0274b53dc14db9b", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-cvtps2pi.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-cvtps2pi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-cvtps2pi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-cvtps2pi.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_cvtps_pi32 (__m128 *src_p, long long *r)\n+{\n+  *(__m64 *) r = _mm_cvtps_pi32 (*src_p);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (__m128 *src_p, long long *res_p)\n+{\n+  __v4sf *src = (__v4sf *) src_p;\n+  int *res = (int *) res_p;\n+  int i;\n+  for (i = 0; i < 2; i++)\n+    res[i] = _mm_cvt_ss2si (_mm_set_ss ((*src)[i]));\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  long long r, ck;\n+  __v4sf x = { 1.99f, -3.9f, -4.9f, 3.8f };\n+\n+  /* Run the MMX tests */\n+  test_cvtps_pi32 ((__m128 *) &x, &r);\n+  compute_correct_result ((__m128 *) &x, &ck);\n+  if (ck != r)\n+    abort ();\n+}"}, {"sha": "6f12b2f064f4637ef2c17462ca4b6dc43a6975bd", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-cvttps2pi.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-cvttps2pi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-cvttps2pi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-cvttps2pi.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_cvttps_pi32 (__m128 *src_p, long long *r)\n+{\n+  *(__m64 *) r = _mm_cvttps_pi32 (*src_p);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (__m128 *src_p, long long *res_p)\n+{\n+  __v4sf *src = (__v4sf *) src_p;\n+  int *res = (int *) res_p;\n+  int i;\n+  for (i = 0; i < 2; i++)\n+    res[i] = _mm_cvtt_ss2si (_mm_set_ss ((*src)[i]));\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  long long r, ck;\n+  __v4sf x = { 1.99f, -3.9f, -4.9f, 3.8f };\n+\n+  /* Run the MMX tests */\n+  test_cvttps_pi32 ((__m128 *) &x, &r);\n+  compute_correct_result ((__m128 *) &x, &ck);\n+  if (ck != r)\n+    abort ();\n+}"}, {"sha": "037f665f1178a11ac0d3fb9733abd0592cf9cd96", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-maskmovq.c", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-maskmovq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-maskmovq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-maskmovq.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,102 @@\n+/* { dg-do run { target mmap } } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include <unistd.h>\n+#include <sys/mman.h>\n+#ifndef MAP_ANONYMOUS\n+#define MAP_ANONYMOUS MAP_ANON\n+#endif\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_maskmovq  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+   _m_maskmovq (t1, t2, (char *) r);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  char *dst = (char *) dst_p;\n+  char *src = (char *) src_p;\n+  char *res = (char *) res_p;\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    if ((src[i] & 0x80) != 0)\n+      res[i] = dst[i];\n+}\n+\n+static void\n+do_maskmovq_test (long long *r)\n+{\n+  int i;\n+  long long ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i++)\n+    {\n+      r[0] = -1LL;\n+      ck = -1LL;\n+      test_maskmovq (&MMXops[i], &MMXops[i], r);\n+      compute_correct_result (&MMXops[i], &MMXops[i], &ck);\n+      if (*r != ck)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  char *buf;\n+  long long *r;\n+  size_t page_size = sysconf(_SC_PAGESIZE);\n+\n+  buf = mmap (0, 3 * page_size, PROT_READ | PROT_WRITE,\n+\t      MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);\n+  if (buf == MAP_FAILED)\n+    {\n+      perror (\"mmap\");\n+      abort ();\n+    }\n+\n+  if (mprotect (buf, page_size, PROT_NONE))\n+    {\n+      perror (\"mprotect\");\n+      abort ();\n+    }\n+\n+  if (mprotect (buf + 2 * page_size, page_size, PROT_NONE))\n+    {\n+      perror (\"mprotect\");\n+      abort ();\n+    }\n+\n+  r = (long long *) (buf + page_size);\n+  do_maskmovq_test (r);\n+\n+  r = (long long *) (buf + page_size + 3);\n+  do_maskmovq_test (r);\n+\n+  r = (long long *) (buf + page_size + 11);\n+  do_maskmovq_test (r);\n+\n+  r = (long long *) (buf + 2 * page_size - 16);\n+  do_maskmovq_test (r);\n+\n+  r = (long long *) (buf + 2 * page_size - 16 + 3);\n+  do_maskmovq_test (r);\n+\n+  r = (long long *) (buf + 2 * page_size - 16 + 8);\n+  do_maskmovq_test (r);\n+}"}, {"sha": "ef5fded45689bb3c7ee98f7fc162aa1de1e83131", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-packssdw.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-packssdw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-packssdw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-packssdw.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_packssdw  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_packssdw (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  int *dst = (int *) dst_p;\n+  int *src = (int *) src_p;\n+  short *res = (short *) res_p;\n+  int i;\n+\n+  for (i = 0; i < 2; i++)\n+    {\n+      res[i] = saturate_w (dst[i]);\n+      res[i + 2] = saturate_w (src[i]);\n+    }\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_packssdw (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "bcc34040b2baf1241f8f3f4ccda73b948a9033fc", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-packsswb.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-packsswb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-packsswb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-packsswb.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_packsswb  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_packsswb (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  short *dst = (short *) dst_p;\n+  short *src = (short *) src_p;\n+  char *res = (char *) res_p;\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      res[i] = saturate_b (dst[i]);\n+      res[i + 4] = saturate_b (src[i]);\n+    }\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_packsswb (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "ac2da068d643f95f6d46f8fb0ec684f99bc045f2", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-packuswb.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-packuswb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-packuswb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-packuswb.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_packuswb  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_packuswb (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  short *dst = (short *) dst_p;\n+  short *src = (short *) src_p;\n+  unsigned char *res = (unsigned char *) res_p;\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      res[i] = saturate_ub (dst[i]);\n+      res[i + 4] = saturate_ub (src[i]);\n+    }\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_packuswb (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "b12534908ec74a2a244b27c8d66f058118c384ac", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-paddb.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddb.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_paddb  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_paddb (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  char *dst = (char *) dst_p;\n+  char *src = (char *) src_p;\n+  char *res = (char *) res_p;\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    res[i] = dst[i] + src[i];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_paddb (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "d71b21713a60d50fc8fa807d400ed1ba29339831", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-paddd.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddd.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_paddd  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_paddd (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  int *dst = (int *) dst_p;\n+  int *src = (int *) src_p;\n+  int *res = (int *) res_p;\n+  int i;\n+  for (i = 0; i < 2; i++)\n+    res[i] = dst[i] + src[i];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_paddd (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "b015393cf03db492e8d7e7f3fe0ad151c59421f9", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-paddq.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddq.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_paddq  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _mm_add_si64 (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  res_p[0] = dst_p[0] + src_p[0];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_paddq (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "f8236beef32f6907a5cb4e45380cb963f2bcfe18", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-paddsb.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddsb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddsb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddsb.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_paddsb  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_paddsb (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  char *dst = (char *) dst_p;\n+  char *src = (char *) src_p;\n+  char *res = (char *) res_p;\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    res[i] = saturate_b (dst[i] + src[i]);\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_paddsb (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "cc52fe65e66e111b645da65d4a342d23c71e34b0", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-paddsw.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddsw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddsw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddsw.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_paddsw  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_paddsw (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  short *dst = (short *) dst_p;\n+  short *src = (short *) src_p;\n+  short *res = (short *) res_p;\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    res[i] = saturate_w (dst[i] + src[i]);\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_paddsw (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "c802bcf4d1022f6d33978c215b62eb657acc6752", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-paddusb.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddusb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddusb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddusb.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_paddusb  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_paddusb (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  unsigned char *dst = (unsigned char *) dst_p;\n+  unsigned char *src = (unsigned char *) src_p;\n+  unsigned char *res = (unsigned char *) res_p;\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    res[i] = saturate_ub (dst[i] + src[i]);\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_paddusb (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "c0f3c8601fb6589d062c62eba829fbc1e8774396", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-paddusw.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddusw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddusw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddusw.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_paddusw  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_paddusw (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  unsigned short *dst = (unsigned short *) dst_p;\n+  unsigned short *src = (unsigned short *) src_p;\n+  unsigned short *res = (unsigned short *) res_p;\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    res[i] = saturate_uw (dst[i] + src[i]);\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_paddusw (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "6921ae8da3c1684e0b63d110c1a56af3ae0a0111", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-paddw.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-paddw.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_paddw  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_paddw (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  short *dst = (short *) dst_p;\n+  short *src = (short *) src_p;\n+  short *res = (short *) res_p;\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    res[i] = dst[i] + src[i];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_paddw (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "0047a7e4d935cd9814bee6892f8ee0c9311f0cc1", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-pand.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pand.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_pand  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_pand (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (unsigned long long *dst,\n+\t\t\tunsigned long long *src,\n+\t\t\tunsigned long long *res)\n+{\n+  res[0] = dst[0] & src[0];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_pand (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "a0cce55a4ea885a5c9d640eefdb623b79ddaf67f", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-pandn.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pandn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pandn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pandn.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_pandn  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_pandn (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (unsigned long long *dst,\n+\t\t\tunsigned long long *src,\n+\t\t\tunsigned long long *res)\n+{\n+  res[0] = ~dst[0] & src[0];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_pandn (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "fbb586e1d21e66cf750a3c32fdbee3e08bd5c619", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-pavgb.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pavgb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pavgb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pavgb.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_pavgb  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_pavgb (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  unsigned char *dst = (unsigned char *) dst_p;\n+  unsigned char *src = (unsigned char *) src_p;\n+  unsigned char *res = (unsigned char *) res_p;\n+  int i;\n+  unsigned int tmp;\n+  for (i = 0; i < 8; i++)\n+    {\n+      tmp = dst[i] + src[i] + 1;\n+      res[i] = tmp >> 1;\n+    }\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_pavgb (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "81cdc213541f0b93b6cbe958756f91f555d088aa", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-pavgw.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pavgw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pavgw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pavgw.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_pavgw  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_pavgw (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  unsigned short *dst = (unsigned short *) dst_p;\n+  unsigned short *src = (unsigned short *) src_p;\n+  unsigned short *res = (unsigned short *) res_p;\n+  int i;\n+  unsigned int tmp;\n+  for (i = 0; i < 4; i++)\n+    {\n+      tmp = dst[i] + src[i] + 1;\n+      res[i] = tmp >> 1;\n+    }\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_pavgw (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "d355ba0a757b6ef86d6a924aba96fe5a123311b6", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-pcmpeqb.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pcmpeqb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pcmpeqb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pcmpeqb.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_pcmpeqb  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_pcmpeqb (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  char *dst = (char *) dst_p;\n+  char *src = (char *) src_p;\n+  char *res = (char *) res_p;\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    res[i] = dst[i] == src[i] ? -1 : 0;\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_pcmpeqb (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "bd896249212aafe2ddfc941a5b4453d5adcbccdb", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-pcmpeqd.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pcmpeqd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pcmpeqd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pcmpeqd.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_pcmpeqd  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_pcmpeqd (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  int *dst = (int *) dst_p;\n+  int *src = (int *) src_p;\n+  int *res = (int *) res_p;\n+  int i;\n+  for (i = 0; i < 2; i++)\n+    res[i] = dst[i] == src[i] ? -1 : 0;\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_pcmpeqd (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "ae15437f1cbc2703062f9b522b5ec77cb6ce32aa", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-pcmpeqw.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pcmpeqw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pcmpeqw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pcmpeqw.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_pcmpeqw  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_pcmpeqw (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  short *dst = (short *) dst_p;\n+  short *src = (short *) src_p;\n+  short *res = (short *) res_p;\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    res[i] = dst[i] == src[i] ? -1 : 0;\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_pcmpeqw (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "f175c698803467bd03952e4ca9704674fc866c56", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-pcmpgtb.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pcmpgtb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pcmpgtb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pcmpgtb.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_pcmpgtb  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_pcmpgtb (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  char *dst = (char *) dst_p;\n+  char *src = (char *) src_p;\n+  char *res = (char *) res_p;\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    res[i] = dst[i] > src[i] ? -1 : 0;\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_pcmpgtb (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "451afb54c3dfbdcba07f46fba092da88134b83c1", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-pcmpgtd.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pcmpgtd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pcmpgtd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pcmpgtd.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_pcmpgtd  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_pcmpgtd (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  int *dst = (int *) dst_p;\n+  int *src = (int *) src_p;\n+  int *res = (int *) res_p;\n+  int i;\n+  for (i = 0; i < 2; i++)\n+    res[i] = dst[i] > src[i] ? -1 : 0;\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_pcmpgtd (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "f3ebe8eedb9cfe9b37c3e57370431996daad5592", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-pcmpgtw.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pcmpgtw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pcmpgtw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pcmpgtw.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_pcmpgtw  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_pcmpgtw (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  short *dst = (short *) dst_p;\n+  short *src = (short *) src_p;\n+  short *res = (short *) res_p;\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    res[i] = dst[i] > src[i] ? -1 : 0;\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_pcmpgtw (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "bb48740a7ca21df571b9ac0548539dd83ce5878c", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-pextrw.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pextrw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pextrw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pextrw.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include <string.h>\n+#include \"sse2-check.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_pextrw (__m64 *i, unsigned int imm, int *r)\n+{\n+  switch (imm)\n+    {\n+    case 0:\n+      *r = _m_pextrw (*i, 0);\n+      break;\n+    case 1:\n+      *r = _m_pextrw (*i, 1);\n+      break;\n+    case 2:\n+      *r = _m_pextrw (*i, 2);\n+      break;\n+    case 3:\n+      *r = _m_pextrw (*i, 3);\n+      break;\n+    default:\n+      break;\n+    }\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (__m64 *src_p, unsigned int imm, int *res_p)\n+{\n+  short *src = (short *) src_p;\n+  if (imm < 4)\n+    *res_p = src[imm];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int r, ck;\n+  int i;\n+  int failed = 0;\n+  __v4hi y = { 3320, -3339, 48, 4392 };\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < 4; i++)\n+    {\n+      test_pextrw ((__m64 *) &y, i, &r);\n+      compute_correct_result ((__m64 *) &y, i, &ck);\n+      if (r != ck)\n+\tfailed++;\n+    }\n+\n+  if (failed)\n+    abort ();\n+}"}, {"sha": "c25ddd96daa4568a148fb252ac49f868a4f07507", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-pinsrw.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pinsrw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pinsrw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pinsrw.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include <string.h>\n+#include \"sse2-check.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_pinsrw  (__m64 *i, int val, unsigned int imm, int *r)\n+{\n+  switch (imm)\n+    {\n+    case 0:\n+       *(__m64 *) r = _m_pinsrw  (*i, val, 0);\n+      break;\n+    case 1:\n+       *(__m64 *) r = _m_pinsrw  (*i, val, 1);\n+      break;\n+    case 2:\n+       *(__m64 *) r = _m_pinsrw  (*i, val, 2);\n+      break;\n+    case 3:\n+       *(__m64 *) r = _m_pinsrw  (*i, val, 3);\n+      break;\n+    default:\n+      break;\n+    }\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (__m64 *src_p, int val, unsigned int imm,\n+\t\t\tint *res_p)\n+{\n+  short *res = (short *) res_p;\n+  *(__m64 *) res_p = *src_p;\n+  if (imm < 4)\n+    res[imm] = val;\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int r, ck;\n+  int i;\n+  int failed = 0;\n+  __v4hi y = { 3320, -3339, 48, 4392 };\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < 4; i++)\n+    {\n+      test_pinsrw  ((__m64 *) &y, 0x1234, i, &r);\n+      compute_correct_result ((__m64 *) &y, 0x1234, i, &ck);\n+      if (r != ck)\n+\tfailed++;\n+    }\n+\n+  if (failed)\n+    abort ();\n+}"}, {"sha": "1eace62088ac14b90b22ad52708bcf6fed6aa90a", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-pmaddwd.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pmaddwd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pmaddwd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pmaddwd.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_pmaddwd  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_pmaddwd (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  short *dst = (short *) dst_p;\n+  short *src = (short *) src_p;\n+  int *res = (int *) res_p;\n+  res[0] = dst[0] * src[0] + dst[1] * src[1];\n+  res[1] = dst[2] * src[2] + dst[3] * src[3];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_pmaddwd (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "ec3b68f09d5da514122df752f4388bdf9695e945", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-pmaxsw.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pmaxsw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pmaxsw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pmaxsw.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_pmaxsw  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_pmaxsw (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  short *dst = (short *) dst_p;\n+  short *src = (short *) src_p;\n+  short *res = (short *) res_p;\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    res[i] = dst[i] > src[i] ? dst[i] : src[i];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_pmaxsw (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "085d6a0eaf510cdae9b579e5683d266edec4f736", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-pmaxub.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pmaxub.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pmaxub.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pmaxub.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_pmaxub  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_pmaxub (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  unsigned char *dst = (unsigned char *) dst_p;\n+  unsigned char *src = (unsigned char *) src_p;\n+  unsigned char *res = (unsigned char *) res_p;\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    res[i] = dst[i] > src[i] ? dst[i] : src[i];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_pmaxub (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "f64d9b2e2b7791a1f4bc2e5e19ea14be03f83655", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-pminsw.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pminsw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pminsw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pminsw.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_pminsw  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_pminsw (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  short *dst = (short *) dst_p;\n+  short *src = (short *) src_p;\n+  short *res = (short *) res_p;\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    res[i] = dst[i] < src[i] ? dst[i] : src[i];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_pminsw (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "372e5ef8764afec196fabe85e74d0c823403ad9d", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-pminub.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pminub.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pminub.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pminub.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_pminub  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_pminub (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  unsigned char *dst = (unsigned char *) dst_p;\n+  unsigned char *src = (unsigned char *) src_p;\n+  unsigned char *res = (unsigned char *) res_p;\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    res[i] = dst[i] < src[i] ? dst[i] : src[i];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_pminub (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "46b18d2055810ef645b64b7bd757e8ed3eec2f84", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-pmovmskb.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pmovmskb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pmovmskb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pmovmskb.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_pmovmskb  (long long *ll1, int *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  *r = _m_pmovmskb (t1);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *src_p, int *res_p)\n+{\n+  char *src = (char *) src_p;\n+  int i;\n+  int res = 0;\n+  for (i = 0; i < 8; i++)\n+    res |= ((src[i] & 0x80) >> 7) << i;\n+  *res_p = res;\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  int r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i++)\n+    {\n+      test_pmovmskb (&MMXops[i], &r);\n+      compute_correct_result (&MMXops[i], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "0f8fcbe02b87ddc76162a329f558f06f8e75bf26", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-pmulhuw.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pmulhuw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pmulhuw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pmulhuw.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_pmulhuw  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_pmulhuw (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  unsigned short *dst = (unsigned short *) dst_p;\n+  unsigned short *src = (unsigned short *) src_p;\n+  unsigned short *res = (unsigned short *) res_p;\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    {\n+      unsigned int t = dst[i] * src[i];\n+      res[i] = t >> 16;\n+    }\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_pmulhuw (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "b89c58f3b6dd5f5e274a79d4419d4a837b77d1fa", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-pmulhw.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pmulhw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pmulhw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pmulhw.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_pmulhw  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_pmulhw (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  short *dst = (short *) dst_p;\n+  short *src = (short *) src_p;\n+  short *res = (short *) res_p;\n+  int tmp;\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    {\n+      tmp = dst[i] * src[i];\n+      tmp >>= 16;\n+      res[i] = tmp;\n+    }\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_pmulhw (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "13b896225607765c9dabff610172c91aaaf03241", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-pmullw.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pmullw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pmullw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pmullw.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_pmullw  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_pmullw (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  short *dst = (short *) dst_p;\n+  short *src = (short *) src_p;\n+  short *res = (short *) res_p;\n+  int tmp;\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    {\n+      tmp = dst[i] * src[i];\n+      res[i] = tmp;\n+    }\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_pmullw (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "819e0e13c0316c1d886bf7623bedceea150e47b1", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-pmuludq.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pmuludq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pmuludq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pmuludq.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_pmuludq  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _mm_mul_su32 (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  unsigned int *dst = (unsigned int*) dst_p;\n+  unsigned int *src = (unsigned int *) src_p;\n+  unsigned long long *res = (unsigned long long *) res_p;\n+  res[0] = dst[0];\n+  res[0] *= src[0];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_pmuludq (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "9dc6072fffa2d03f01e0046c6d5120d44a6f9c1a", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-por.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-por.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-por.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-por.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_por  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_por (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (unsigned long long *dst,\n+\t\t\tunsigned long long *src,\n+\t\t\tunsigned long long *res)\n+{\n+  res[0] = dst[0] | src[0];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_por (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "223d3b280bdbf877b1e20b01f0e500de473537a6", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-psadbw.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psadbw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psadbw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psadbw.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_psadbw  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_psadbw (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  unsigned char *dst = (unsigned char *) dst_p;\n+  unsigned char *src = (unsigned char *) src_p;\n+  unsigned short *res = (unsigned short *) res_p;\n+  int i;\n+  int tmp;\n+  unsigned int sum = 0;\n+  for (i = 0; i < 8; i++)\n+    {\n+      tmp = dst[i] - src[i];\n+      if (tmp < 0)\n+\ttmp = -tmp;\n+      sum += tmp;\n+    }\n+  res[0] = sum;\n+  for (i = 1; i < 4; i++)\n+    res[i] = 0;\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_psadbw (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "b7236586216b8dc4d4a274dcb38b61b23bbda6d6", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-pshufw.c", "status": "added", "additions": 248, "deletions": 0, "changes": 248, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pshufw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pshufw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pshufw.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,248 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_pshufw  (long long *ll1, unsigned int imm, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  switch (imm)\n+    {\n+    case 0:\n+      *(__m64 *) r = _m_pshufw (t1, 0);\n+      break;\n+    case 1:\n+      *(__m64 *) r = _m_pshufw (t1, 1);\n+      break;\n+    case 2:\n+      *(__m64 *) r = _m_pshufw (t1, 2);\n+      break;\n+    case 3:\n+      *(__m64 *) r = _m_pshufw (t1, 3);\n+      break;\n+    case 4:\n+      *(__m64 *) r = _m_pshufw (t1, 4);\n+      break;\n+    case 5:\n+      *(__m64 *) r = _m_pshufw (t1, 5);\n+      break;\n+    case 6:\n+      *(__m64 *) r = _m_pshufw (t1, 6);\n+      break;\n+    case 7:\n+      *(__m64 *) r = _m_pshufw (t1, 7);\n+      break;\n+    case 8:\n+      *(__m64 *) r = _m_pshufw (t1, 8);\n+      break;\n+    case 9:\n+      *(__m64 *) r = _m_pshufw (t1, 9);\n+      break;\n+    case 10:\n+      *(__m64 *) r = _m_pshufw (t1, 10);\n+      break;\n+    case 11:\n+      *(__m64 *) r = _m_pshufw (t1, 11);\n+      break;\n+    case 12:\n+      *(__m64 *) r = _m_pshufw (t1, 12);\n+      break;\n+    case 13:\n+      *(__m64 *) r = _m_pshufw (t1, 13);\n+      break;\n+    case 14:\n+      *(__m64 *) r = _m_pshufw (t1, 14);\n+      break;\n+    case 15:\n+      *(__m64 *) r = _m_pshufw (t1, 15);\n+      break;\n+    case 16:\n+      *(__m64 *) r = _m_pshufw (t1, 16);\n+      break;\n+    case 17:\n+      *(__m64 *) r = _m_pshufw (t1, 17);\n+      break;\n+    case 18:\n+      *(__m64 *) r = _m_pshufw (t1, 18);\n+      break;\n+    case 19:\n+      *(__m64 *) r = _m_pshufw (t1, 19);\n+      break;\n+    case 20:\n+      *(__m64 *) r = _m_pshufw (t1, 20);\n+      break;\n+    case 21:\n+      *(__m64 *) r = _m_pshufw (t1, 21);\n+      break;\n+    case 22:\n+      *(__m64 *) r = _m_pshufw (t1, 22);\n+      break;\n+    case 23:\n+      *(__m64 *) r = _m_pshufw (t1, 23);\n+      break;\n+    case 24:\n+      *(__m64 *) r = _m_pshufw (t1, 24);\n+      break;\n+    case 25:\n+      *(__m64 *) r = _m_pshufw (t1, 25);\n+      break;\n+    case 26:\n+      *(__m64 *) r = _m_pshufw (t1, 26);\n+      break;\n+    case 27:\n+      *(__m64 *) r = _m_pshufw (t1, 27);\n+      break;\n+    case 28:\n+      *(__m64 *) r = _m_pshufw (t1, 28);\n+      break;\n+    case 29:\n+      *(__m64 *) r = _m_pshufw (t1, 29);\n+      break;\n+    case 30:\n+      *(__m64 *) r = _m_pshufw (t1, 30);\n+      break;\n+    case 31:\n+      *(__m64 *) r = _m_pshufw (t1, 31);\n+      break;\n+    case 32:\n+      *(__m64 *) r = _m_pshufw (t1, 32);\n+      break;\n+    case 33:\n+      *(__m64 *) r = _m_pshufw (t1, 33);\n+      break;\n+    case 34:\n+      *(__m64 *) r = _m_pshufw (t1, 34);\n+      break;\n+    case 35:\n+      *(__m64 *) r = _m_pshufw (t1, 35);\n+      break;\n+    case 36:\n+      *(__m64 *) r = _m_pshufw (t1, 36);\n+      break;\n+    case 37:\n+      *(__m64 *) r = _m_pshufw (t1, 37);\n+      break;\n+    case 38:\n+      *(__m64 *) r = _m_pshufw (t1, 38);\n+      break;\n+    case 39:\n+      *(__m64 *) r = _m_pshufw (t1, 39);\n+      break;\n+    case 40:\n+      *(__m64 *) r = _m_pshufw (t1, 40);\n+      break;\n+    case 41:\n+      *(__m64 *) r = _m_pshufw (t1, 41);\n+      break;\n+    case 42:\n+      *(__m64 *) r = _m_pshufw (t1, 42);\n+      break;\n+    case 43:\n+      *(__m64 *) r = _m_pshufw (t1, 43);\n+      break;\n+    case 44:\n+      *(__m64 *) r = _m_pshufw (t1, 44);\n+      break;\n+    case 45:\n+      *(__m64 *) r = _m_pshufw (t1, 45);\n+      break;\n+    case 46:\n+      *(__m64 *) r = _m_pshufw (t1, 46);\n+      break;\n+    case 47:\n+      *(__m64 *) r = _m_pshufw (t1, 47);\n+      break;\n+    case 48:\n+      *(__m64 *) r = _m_pshufw (t1, 48);\n+      break;\n+    case 49:\n+      *(__m64 *) r = _m_pshufw (t1, 49);\n+      break;\n+    case 50:\n+      *(__m64 *) r = _m_pshufw (t1, 50);\n+      break;\n+    case 51:\n+      *(__m64 *) r = _m_pshufw (t1, 51);\n+      break;\n+    case 52:\n+      *(__m64 *) r = _m_pshufw (t1, 52);\n+      break;\n+    case 53:\n+      *(__m64 *) r = _m_pshufw (t1, 53);\n+      break;\n+    case 54:\n+      *(__m64 *) r = _m_pshufw (t1, 54);\n+      break;\n+    case 55:\n+      *(__m64 *) r = _m_pshufw (t1, 55);\n+      break;\n+    case 56:\n+      *(__m64 *) r = _m_pshufw (t1, 56);\n+      break;\n+    case 57:\n+      *(__m64 *) r = _m_pshufw (t1, 57);\n+      break;\n+    case 58:\n+      *(__m64 *) r = _m_pshufw (t1, 58);\n+      break;\n+    case 59:\n+      *(__m64 *) r = _m_pshufw (t1, 59);\n+      break;\n+    case 60:\n+      *(__m64 *) r = _m_pshufw (t1, 60);\n+      break;\n+    case 61:\n+      *(__m64 *) r = _m_pshufw (t1, 61);\n+      break;\n+    case 62:\n+      *(__m64 *) r = _m_pshufw (t1, 62);\n+      break;\n+    case 63:\n+      *(__m64 *) r = _m_pshufw (t1, 63);\n+      break;\n+    default:\n+      break;\n+    }\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *src_p, unsigned int imm,\n+\t\t\tlong long *res_p)\n+{\n+  unsigned long long src = *(unsigned long long *) src_p;\n+  unsigned short *res = (unsigned short *) res_p;\n+  int i;\n+  unsigned int shift;\n+  for (i = 0; i < 4; i++)\n+    {\n+      shift = ((imm >> (2 * i)) & 0x3) * 16;\n+      res[i] = (src >> shift) & 0xffff;\n+    }\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i++)\n+    {\n+      if (i > 63)\n+\tbreak;\n+      test_pshufw (&MMXops[i], i, &r);\n+      compute_correct_result (&MMXops[i], i, &ck);\n+      if (ck != r)\n+\t  fail++;\n+      }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "86983c0b8486db03c170835809931f3b74fa3e10", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-pslld.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pslld.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pslld.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pslld.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_pslld  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_pslld (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  unsigned int *dst = (unsigned int *) dst_p;\n+  unsigned int *src = (unsigned int *) src_p;\n+  unsigned int *res = (unsigned int *) res_p;\n+  int i;\n+  if (src[1] || src[0] > 31)\n+    for (i = 0; i < 2; i++)\n+      res[i] = 0;\n+  else\n+    for (i = 0; i < 2; i++)\n+      res[i] = dst[i] << src[0];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_pslld (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "07f0ae9d83c9f348a6e67a213e86f1a49a3eda74", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-pslldi.c", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pslldi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pslldi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pslldi.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,153 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_psllwi  (long long *ll1, unsigned int imm, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  switch (imm)\n+    {\n+    case 0:\n+      *(__m64 *) r = _m_pslldi (t1, 0);\n+      break;\n+    case 1:\n+      *(__m64 *) r = _m_pslldi (t1, 1);\n+      break;\n+    case 2:\n+      *(__m64 *) r = _m_pslldi (t1, 2);\n+      break;\n+    case 3:\n+      *(__m64 *) r = _m_pslldi (t1, 3);\n+      break;\n+    case 4:\n+      *(__m64 *) r = _m_pslldi (t1, 4);\n+      break;\n+    case 5:\n+      *(__m64 *) r = _m_pslldi (t1, 5);\n+      break;\n+    case 6:\n+      *(__m64 *) r = _m_pslldi (t1, 6);\n+      break;\n+    case 7:\n+      *(__m64 *) r = _m_pslldi (t1, 7);\n+      break;\n+    case 8:\n+      *(__m64 *) r = _m_pslldi (t1, 8);\n+      break;\n+    case 9:\n+      *(__m64 *) r = _m_pslldi (t1, 9);\n+      break;\n+    case 10:\n+      *(__m64 *) r = _m_pslldi (t1, 10);\n+      break;\n+    case 11:\n+      *(__m64 *) r = _m_pslldi (t1, 11);\n+      break;\n+    case 12:\n+      *(__m64 *) r = _m_pslldi (t1, 12);\n+      break;\n+    case 13:\n+      *(__m64 *) r = _m_pslldi (t1, 13);\n+      break;\n+    case 14:\n+      *(__m64 *) r = _m_pslldi (t1, 14);\n+      break;\n+    case 15:\n+      *(__m64 *) r = _m_pslldi (t1, 15);\n+      break;\n+    case 16:\n+      *(__m64 *) r = _m_pslldi (t1, 16);\n+      break;\n+    case 17:\n+      *(__m64 *) r = _m_pslldi (t1, 17);\n+      break;\n+    case 18:\n+      *(__m64 *) r = _m_pslldi (t1, 18);\n+      break;\n+    case 19:\n+      *(__m64 *) r = _m_pslldi (t1, 19);\n+      break;\n+    case 20:\n+      *(__m64 *) r = _m_pslldi (t1, 20);\n+      break;\n+    case 21:\n+      *(__m64 *) r = _m_pslldi (t1, 21);\n+      break;\n+    case 22:\n+      *(__m64 *) r = _m_pslldi (t1, 22);\n+      break;\n+    case 23:\n+      *(__m64 *) r = _m_pslldi (t1, 23);\n+      break;\n+    case 24:\n+      *(__m64 *) r = _m_pslldi (t1, 24);\n+      break;\n+    case 25:\n+      *(__m64 *) r = _m_pslldi (t1, 25);\n+      break;\n+    case 26:\n+      *(__m64 *) r = _m_pslldi (t1, 26);\n+      break;\n+    case 27:\n+      *(__m64 *) r = _m_pslldi (t1, 27);\n+      break;\n+    case 28:\n+      *(__m64 *) r = _m_pslldi (t1, 28);\n+      break;\n+    case 29:\n+      *(__m64 *) r = _m_pslldi (t1, 29);\n+      break;\n+    case 30:\n+      *(__m64 *) r = _m_pslldi (t1, 30);\n+      break;\n+    case 31:\n+      *(__m64 *) r = _m_pslldi (t1, 31);\n+      break;\n+    default:\n+      *(__m64 *) r = _m_pslldi (t1, 32);\n+      break;\n+    }\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *src_p, unsigned int imm,\n+\t\t\tlong long *res_p)\n+{\n+  unsigned int *src = (unsigned int *) src_p;\n+  unsigned int *res = (unsigned int *) res_p;\n+  int i;\n+  if (imm > 31)\n+    for (i = 0; i < 2; i++)\n+      res[i] = 0;\n+  else\n+    for (i = 0; i < 2; i++)\n+      res[i] = src[i] << imm;\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  unsigned int count;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i++)\n+    {\n+      count = MMXops[i];\n+      test_psllwi (&MMXops[i], count, &r);\n+      compute_correct_result (&MMXops[i], count, &ck);\n+      if (ck != r)\n+\t  fail++;\n+      }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "37d2e0b22cce592fe2234f55ea72cce7b7704de5", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-psllq.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psllq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psllq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psllq.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_psllq  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_psllq (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (unsigned long long *dst,\n+\t\t\tunsigned long long *src,\n+\t\t\tunsigned long long *res)\n+{\n+  if (src[0] > 63)\n+    res[0] = 0;\n+  else\n+    res[0] = dst[0] << src[0];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_psllq (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "655b369e04f1954c9cf46551833161cca2731280", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-psllqi.c", "status": "added", "additions": 245, "deletions": 0, "changes": 245, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psllqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psllqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psllqi.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,245 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_psllwi  (long long *ll1, unsigned int imm, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  switch (imm)\n+    {\n+    case 0:\n+      *(__m64 *) r = _m_psllqi (t1, 0);\n+      break;\n+    case 1:\n+      *(__m64 *) r = _m_psllqi (t1, 1);\n+      break;\n+    case 2:\n+      *(__m64 *) r = _m_psllqi (t1, 2);\n+      break;\n+    case 3:\n+      *(__m64 *) r = _m_psllqi (t1, 3);\n+      break;\n+    case 4:\n+      *(__m64 *) r = _m_psllqi (t1, 4);\n+      break;\n+    case 5:\n+      *(__m64 *) r = _m_psllqi (t1, 5);\n+      break;\n+    case 6:\n+      *(__m64 *) r = _m_psllqi (t1, 6);\n+      break;\n+    case 7:\n+      *(__m64 *) r = _m_psllqi (t1, 7);\n+      break;\n+    case 8:\n+      *(__m64 *) r = _m_psllqi (t1, 8);\n+      break;\n+    case 9:\n+      *(__m64 *) r = _m_psllqi (t1, 9);\n+      break;\n+    case 10:\n+      *(__m64 *) r = _m_psllqi (t1, 10);\n+      break;\n+    case 11:\n+      *(__m64 *) r = _m_psllqi (t1, 11);\n+      break;\n+    case 12:\n+      *(__m64 *) r = _m_psllqi (t1, 12);\n+      break;\n+    case 13:\n+      *(__m64 *) r = _m_psllqi (t1, 13);\n+      break;\n+    case 14:\n+      *(__m64 *) r = _m_psllqi (t1, 14);\n+      break;\n+    case 15:\n+      *(__m64 *) r = _m_psllqi (t1, 15);\n+      break;\n+    case 16:\n+      *(__m64 *) r = _m_psllqi (t1, 16);\n+      break;\n+    case 17:\n+      *(__m64 *) r = _m_psllqi (t1, 17);\n+      break;\n+    case 18:\n+      *(__m64 *) r = _m_psllqi (t1, 18);\n+      break;\n+    case 19:\n+      *(__m64 *) r = _m_psllqi (t1, 19);\n+      break;\n+    case 20:\n+      *(__m64 *) r = _m_psllqi (t1, 20);\n+      break;\n+    case 21:\n+      *(__m64 *) r = _m_psllqi (t1, 21);\n+      break;\n+    case 22:\n+      *(__m64 *) r = _m_psllqi (t1, 22);\n+      break;\n+    case 23:\n+      *(__m64 *) r = _m_psllqi (t1, 23);\n+      break;\n+    case 24:\n+      *(__m64 *) r = _m_psllqi (t1, 24);\n+      break;\n+    case 25:\n+      *(__m64 *) r = _m_psllqi (t1, 25);\n+      break;\n+    case 26:\n+      *(__m64 *) r = _m_psllqi (t1, 26);\n+      break;\n+    case 27:\n+      *(__m64 *) r = _m_psllqi (t1, 27);\n+      break;\n+    case 28:\n+      *(__m64 *) r = _m_psllqi (t1, 28);\n+      break;\n+    case 29:\n+      *(__m64 *) r = _m_psllqi (t1, 29);\n+      break;\n+    case 30:\n+      *(__m64 *) r = _m_psllqi (t1, 30);\n+      break;\n+    case 31:\n+      *(__m64 *) r = _m_psllqi (t1, 31);\n+      break;\n+    case 32:\n+      *(__m64 *) r = _m_psllqi (t1, 32);\n+      break;\n+    case 33:\n+      *(__m64 *) r = _m_psllqi (t1, 33);\n+      break;\n+    case 34:\n+      *(__m64 *) r = _m_psllqi (t1, 34);\n+      break;\n+    case 35:\n+      *(__m64 *) r = _m_psllqi (t1, 35);\n+      break;\n+    case 36:\n+      *(__m64 *) r = _m_psllqi (t1, 36);\n+      break;\n+    case 37:\n+      *(__m64 *) r = _m_psllqi (t1, 37);\n+      break;\n+    case 38:\n+      *(__m64 *) r = _m_psllqi (t1, 38);\n+      break;\n+    case 39:\n+      *(__m64 *) r = _m_psllqi (t1, 39);\n+      break;\n+    case 40:\n+      *(__m64 *) r = _m_psllqi (t1, 40);\n+      break;\n+    case 41:\n+      *(__m64 *) r = _m_psllqi (t1, 41);\n+      break;\n+    case 42:\n+      *(__m64 *) r = _m_psllqi (t1, 42);\n+      break;\n+    case 43:\n+      *(__m64 *) r = _m_psllqi (t1, 43);\n+      break;\n+    case 44:\n+      *(__m64 *) r = _m_psllqi (t1, 44);\n+      break;\n+    case 45:\n+      *(__m64 *) r = _m_psllqi (t1, 45);\n+      break;\n+    case 46:\n+      *(__m64 *) r = _m_psllqi (t1, 46);\n+      break;\n+    case 47:\n+      *(__m64 *) r = _m_psllqi (t1, 47);\n+      break;\n+    case 48:\n+      *(__m64 *) r = _m_psllqi (t1, 48);\n+      break;\n+    case 49:\n+      *(__m64 *) r = _m_psllqi (t1, 49);\n+      break;\n+    case 50:\n+      *(__m64 *) r = _m_psllqi (t1, 50);\n+      break;\n+    case 51:\n+      *(__m64 *) r = _m_psllqi (t1, 51);\n+      break;\n+    case 52:\n+      *(__m64 *) r = _m_psllqi (t1, 52);\n+      break;\n+    case 53:\n+      *(__m64 *) r = _m_psllqi (t1, 53);\n+      break;\n+    case 54:\n+      *(__m64 *) r = _m_psllqi (t1, 54);\n+      break;\n+    case 55:\n+      *(__m64 *) r = _m_psllqi (t1, 55);\n+      break;\n+    case 56:\n+      *(__m64 *) r = _m_psllqi (t1, 56);\n+      break;\n+    case 57:\n+      *(__m64 *) r = _m_psllqi (t1, 57);\n+      break;\n+    case 58:\n+      *(__m64 *) r = _m_psllqi (t1, 58);\n+      break;\n+    case 59:\n+      *(__m64 *) r = _m_psllqi (t1, 59);\n+      break;\n+    case 60:\n+      *(__m64 *) r = _m_psllqi (t1, 60);\n+      break;\n+    case 61:\n+      *(__m64 *) r = _m_psllqi (t1, 61);\n+      break;\n+    case 62:\n+      *(__m64 *) r = _m_psllqi (t1, 62);\n+      break;\n+    case 63:\n+      *(__m64 *) r = _m_psllqi (t1, 63);\n+      break;\n+    default:\n+      *(__m64 *) r = _m_psllqi (t1, 64);\n+      break;\n+    }\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (unsigned long long *src, unsigned int imm,\n+\t\t\tunsigned long long *res)\n+{\n+  int i;\n+  if (imm > 63)\n+    res[0] = 0;\n+  else\n+    res[0] = src[0] << imm;\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  unsigned int count;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i++)\n+    {\n+      count = MMXops[i];\n+      test_psllwi (&MMXops[i], count, &r);\n+      compute_correct_result (&MMXops[i], count, &ck);\n+      if (ck != r)\n+\t  fail++;\n+      }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "7c27d1441851ca671ec34e5a53715e10ee89c7da", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-psllw.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psllw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psllw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psllw.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_psllw  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_psllw (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  unsigned short *dst = (unsigned short *) dst_p;\n+  unsigned int *src = (unsigned int *) src_p;\n+  unsigned short *res = (unsigned short *) res_p;\n+  int i;\n+  if (src[1] || src[0] > 15)\n+    for (i = 0; i < 4; i++)\n+      res[i] = 0;\n+  else\n+    for (i = 0; i < 4; i++)\n+      res[i] = dst[i] << src[0];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_psllw (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "458463b20730dfbce9e9c11bccabd0a7480e6650", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-psllwi.c", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psllwi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psllwi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psllwi.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,105 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_psllwi  (long long *ll1, unsigned int imm, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  switch (imm)\n+    {\n+    case 0:\n+      *(__m64 *) r = _m_psllwi (t1, 0);\n+      break;\n+    case 1:\n+      *(__m64 *) r = _m_psllwi (t1, 1);\n+      break;\n+    case 2:\n+      *(__m64 *) r = _m_psllwi (t1, 2);\n+      break;\n+    case 3:\n+      *(__m64 *) r = _m_psllwi (t1, 3);\n+      break;\n+    case 4:\n+      *(__m64 *) r = _m_psllwi (t1, 4);\n+      break;\n+    case 5:\n+      *(__m64 *) r = _m_psllwi (t1, 5);\n+      break;\n+    case 6:\n+      *(__m64 *) r = _m_psllwi (t1, 6);\n+      break;\n+    case 7:\n+      *(__m64 *) r = _m_psllwi (t1, 7);\n+      break;\n+    case 8:\n+      *(__m64 *) r = _m_psllwi (t1, 8);\n+      break;\n+    case 9:\n+      *(__m64 *) r = _m_psllwi (t1, 9);\n+      break;\n+    case 10:\n+      *(__m64 *) r = _m_psllwi (t1, 10);\n+      break;\n+    case 11:\n+      *(__m64 *) r = _m_psllwi (t1, 11);\n+      break;\n+    case 12:\n+      *(__m64 *) r = _m_psllwi (t1, 12);\n+      break;\n+    case 13:\n+      *(__m64 *) r = _m_psllwi (t1, 13);\n+      break;\n+    case 14:\n+      *(__m64 *) r = _m_psllwi (t1, 14);\n+      break;\n+    case 15:\n+      *(__m64 *) r = _m_psllwi (t1, 15);\n+      break;\n+    default:\n+      *(__m64 *) r = _m_psllwi (t1, 16);\n+      break;\n+    }\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *src_p, unsigned int imm,\n+\t\t\tlong long *res_p)\n+{\n+  unsigned short *src = (unsigned short *) src_p;\n+  unsigned short *res = (unsigned short *) res_p;\n+  int i;\n+  if (imm > 15)\n+    for (i = 0; i < 4; i++)\n+      res[i] = 0;\n+  else\n+    for (i = 0; i < 4; i++)\n+      res[i] = src[i] << imm;\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  unsigned int count;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i++)\n+    {\n+      count = MMXops[i];\n+      test_psllwi (&MMXops[i], count, &r);\n+      compute_correct_result (&MMXops[i], count, &ck);\n+      if (ck != r)\n+\t  fail++;\n+      }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "494bcb4ccbd5a7cf51a2f861ceccbb1e111c91be", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-psrad.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psrad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psrad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psrad.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_psrad  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_psrad (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  int *dst = (int *) dst_p;\n+  unsigned int *src = (unsigned int *) src_p;\n+  int *res = (int *) res_p;\n+  int i;\n+  if (src[1] || src[0] > 31)\n+    for (i = 0; i < 2; i++)\n+      res[i] = dst[i] < 0 ? -1 : 0;\n+  else\n+    for (i = 0; i < 2; i++)\n+      res[i] = dst[i] >> src[0];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_psrad (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "4ae2ac848bc83fa44a13a5d52d49100e6b103970", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-psradi.c", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psradi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psradi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psradi.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,153 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_psradi  (long long *ll1, unsigned int imm, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  switch (imm)\n+    {\n+    case 0:\n+      *(__m64 *) r = _m_psradi (t1, 0);\n+      break;\n+    case 1:\n+      *(__m64 *) r = _m_psradi (t1, 1);\n+      break;\n+    case 2:\n+      *(__m64 *) r = _m_psradi (t1, 2);\n+      break;\n+    case 3:\n+      *(__m64 *) r = _m_psradi (t1, 3);\n+      break;\n+    case 4:\n+      *(__m64 *) r = _m_psradi (t1, 4);\n+      break;\n+    case 5:\n+      *(__m64 *) r = _m_psradi (t1, 5);\n+      break;\n+    case 6:\n+      *(__m64 *) r = _m_psradi (t1, 6);\n+      break;\n+    case 7:\n+      *(__m64 *) r = _m_psradi (t1, 7);\n+      break;\n+    case 8:\n+      *(__m64 *) r = _m_psradi (t1, 8);\n+      break;\n+    case 9:\n+      *(__m64 *) r = _m_psradi (t1, 9);\n+      break;\n+    case 10:\n+      *(__m64 *) r = _m_psradi (t1, 10);\n+      break;\n+    case 11:\n+      *(__m64 *) r = _m_psradi (t1, 11);\n+      break;\n+    case 12:\n+      *(__m64 *) r = _m_psradi (t1, 12);\n+      break;\n+    case 13:\n+      *(__m64 *) r = _m_psradi (t1, 13);\n+      break;\n+    case 14:\n+      *(__m64 *) r = _m_psradi (t1, 14);\n+      break;\n+    case 15:\n+      *(__m64 *) r = _m_psradi (t1, 15);\n+      break;\n+    case 16:\n+      *(__m64 *) r = _m_psradi (t1, 16);\n+      break;\n+    case 17:\n+      *(__m64 *) r = _m_psradi (t1, 17);\n+      break;\n+    case 18:\n+      *(__m64 *) r = _m_psradi (t1, 18);\n+      break;\n+    case 19:\n+      *(__m64 *) r = _m_psradi (t1, 19);\n+      break;\n+    case 20:\n+      *(__m64 *) r = _m_psradi (t1, 20);\n+      break;\n+    case 21:\n+      *(__m64 *) r = _m_psradi (t1, 21);\n+      break;\n+    case 22:\n+      *(__m64 *) r = _m_psradi (t1, 22);\n+      break;\n+    case 23:\n+      *(__m64 *) r = _m_psradi (t1, 23);\n+      break;\n+    case 24:\n+      *(__m64 *) r = _m_psradi (t1, 24);\n+      break;\n+    case 25:\n+      *(__m64 *) r = _m_psradi (t1, 25);\n+      break;\n+    case 26:\n+      *(__m64 *) r = _m_psradi (t1, 26);\n+      break;\n+    case 27:\n+      *(__m64 *) r = _m_psradi (t1, 27);\n+      break;\n+    case 28:\n+      *(__m64 *) r = _m_psradi (t1, 28);\n+      break;\n+    case 29:\n+      *(__m64 *) r = _m_psradi (t1, 29);\n+      break;\n+    case 30:\n+      *(__m64 *) r = _m_psradi (t1, 30);\n+      break;\n+    case 31:\n+      *(__m64 *) r = _m_psradi (t1, 31);\n+      break;\n+    default:\n+      *(__m64 *) r = _m_psradi (t1, 32);\n+      break;\n+    }\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *src_p, unsigned int imm,\n+\t\t\tlong long *res_p)\n+{\n+  int *src = (int *) src_p;\n+  int *res = (int *) res_p;\n+  int i;\n+  if (imm > 31)\n+    for (i = 0; i < 2; i++)\n+      res[i] = src[i] < 0 ? -1 : 0;\n+  else\n+    for (i = 0; i < 2; i++)\n+      res[i] = src[i] >> imm;\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  unsigned int count;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i++)\n+    {\n+      count = MMXops[i];\n+      test_psradi (&MMXops[i], count, &r);\n+      compute_correct_result (&MMXops[i], count, &ck);\n+      if (ck != r)\n+\t  fail++;\n+      }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "dd097f2e16b8dab743c72487f75ab0a566f9a689", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-psraw.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psraw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psraw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psraw.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_psraw  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_psraw (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  short *dst = (short *) dst_p;\n+  unsigned int *src = (unsigned int *) src_p;\n+  short *res = (short *) res_p;\n+  int i;\n+  if (src[1] || src[0] > 15)\n+    for (i = 0; i < 4; i++)\n+      res[i] = dst[i] < 0 ? -1 : 0;\n+  else\n+    for (i = 0; i < 4; i++)\n+      res[i] = dst[i] >> src[0];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_psraw (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "30a2d8bd08b437d2f9bc9a27fb0ac2ca00e41c49", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-psrawi.c", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psrawi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psrawi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psrawi.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,105 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_psrawi  (long long *ll1, unsigned int imm, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  switch (imm)\n+    {\n+    case 0:\n+      *(__m64 *) r = _m_psrawi (t1, 0);\n+      break;\n+    case 1:\n+      *(__m64 *) r = _m_psrawi (t1, 1);\n+      break;\n+    case 2:\n+      *(__m64 *) r = _m_psrawi (t1, 2);\n+      break;\n+    case 3:\n+      *(__m64 *) r = _m_psrawi (t1, 3);\n+      break;\n+    case 4:\n+      *(__m64 *) r = _m_psrawi (t1, 4);\n+      break;\n+    case 5:\n+      *(__m64 *) r = _m_psrawi (t1, 5);\n+      break;\n+    case 6:\n+      *(__m64 *) r = _m_psrawi (t1, 6);\n+      break;\n+    case 7:\n+      *(__m64 *) r = _m_psrawi (t1, 7);\n+      break;\n+    case 8:\n+      *(__m64 *) r = _m_psrawi (t1, 8);\n+      break;\n+    case 9:\n+      *(__m64 *) r = _m_psrawi (t1, 9);\n+      break;\n+    case 10:\n+      *(__m64 *) r = _m_psrawi (t1, 10);\n+      break;\n+    case 11:\n+      *(__m64 *) r = _m_psrawi (t1, 11);\n+      break;\n+    case 12:\n+      *(__m64 *) r = _m_psrawi (t1, 12);\n+      break;\n+    case 13:\n+      *(__m64 *) r = _m_psrawi (t1, 13);\n+      break;\n+    case 14:\n+      *(__m64 *) r = _m_psrawi (t1, 14);\n+      break;\n+    case 15:\n+      *(__m64 *) r = _m_psrawi (t1, 15);\n+      break;\n+    default:\n+      *(__m64 *) r = _m_psrawi (t1, 16);\n+      break;\n+    }\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *src_p, unsigned int imm,\n+\t\t\tlong long *res_p)\n+{\n+  short *src = (short *) src_p;\n+  short *res = (short *) res_p;\n+  int i;\n+  if (imm > 15)\n+    for (i = 0; i < 4; i++)\n+      res[i] = src[i] < 0 ? -1 : 0;\n+  else\n+    for (i = 0; i < 4; i++)\n+      res[i] = src[i] >> imm;\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  unsigned int count;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i++)\n+    {\n+      count = MMXops[i];\n+      test_psrawi (&MMXops[i], count, &r);\n+      compute_correct_result (&MMXops[i], count, &ck);\n+      if (ck != r)\n+\t  fail++;\n+      }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "3858be180a82786abe7ea002ff8aa76b00a3e1aa", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-psrld.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psrld.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psrld.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psrld.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_psrld  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_psrld (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  int *dst = (int *) dst_p;\n+  unsigned int *src = (unsigned int *) src_p;\n+  int *res = (int *) res_p;\n+  int i;\n+  if (src[1] || src[0] > 31)\n+    for (i = 0; i < 2; i++)\n+      res[i] = 0;\n+  else\n+    for (i = 0; i < 2; i++)\n+      res[i] = dst[i] >> src[0];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_psrld (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "9315b6f013793a5917435b3437cc0a8b5396d80e", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-psrldi.c", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psrldi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psrldi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psrldi.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,153 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_psrldi  (long long *ll1, unsigned int imm, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  switch (imm)\n+    {\n+    case 0:\n+      *(__m64 *) r = _m_psrldi (t1, 0);\n+      break;\n+    case 1:\n+      *(__m64 *) r = _m_psrldi (t1, 1);\n+      break;\n+    case 2:\n+      *(__m64 *) r = _m_psrldi (t1, 2);\n+      break;\n+    case 3:\n+      *(__m64 *) r = _m_psrldi (t1, 3);\n+      break;\n+    case 4:\n+      *(__m64 *) r = _m_psrldi (t1, 4);\n+      break;\n+    case 5:\n+      *(__m64 *) r = _m_psrldi (t1, 5);\n+      break;\n+    case 6:\n+      *(__m64 *) r = _m_psrldi (t1, 6);\n+      break;\n+    case 7:\n+      *(__m64 *) r = _m_psrldi (t1, 7);\n+      break;\n+    case 8:\n+      *(__m64 *) r = _m_psrldi (t1, 8);\n+      break;\n+    case 9:\n+      *(__m64 *) r = _m_psrldi (t1, 9);\n+      break;\n+    case 10:\n+      *(__m64 *) r = _m_psrldi (t1, 10);\n+      break;\n+    case 11:\n+      *(__m64 *) r = _m_psrldi (t1, 11);\n+      break;\n+    case 12:\n+      *(__m64 *) r = _m_psrldi (t1, 12);\n+      break;\n+    case 13:\n+      *(__m64 *) r = _m_psrldi (t1, 13);\n+      break;\n+    case 14:\n+      *(__m64 *) r = _m_psrldi (t1, 14);\n+      break;\n+    case 15:\n+      *(__m64 *) r = _m_psrldi (t1, 15);\n+      break;\n+    case 16:\n+      *(__m64 *) r = _m_psrldi (t1, 16);\n+      break;\n+    case 17:\n+      *(__m64 *) r = _m_psrldi (t1, 17);\n+      break;\n+    case 18:\n+      *(__m64 *) r = _m_psrldi (t1, 18);\n+      break;\n+    case 19:\n+      *(__m64 *) r = _m_psrldi (t1, 19);\n+      break;\n+    case 20:\n+      *(__m64 *) r = _m_psrldi (t1, 20);\n+      break;\n+    case 21:\n+      *(__m64 *) r = _m_psrldi (t1, 21);\n+      break;\n+    case 22:\n+      *(__m64 *) r = _m_psrldi (t1, 22);\n+      break;\n+    case 23:\n+      *(__m64 *) r = _m_psrldi (t1, 23);\n+      break;\n+    case 24:\n+      *(__m64 *) r = _m_psrldi (t1, 24);\n+      break;\n+    case 25:\n+      *(__m64 *) r = _m_psrldi (t1, 25);\n+      break;\n+    case 26:\n+      *(__m64 *) r = _m_psrldi (t1, 26);\n+      break;\n+    case 27:\n+      *(__m64 *) r = _m_psrldi (t1, 27);\n+      break;\n+    case 28:\n+      *(__m64 *) r = _m_psrldi (t1, 28);\n+      break;\n+    case 29:\n+      *(__m64 *) r = _m_psrldi (t1, 29);\n+      break;\n+    case 30:\n+      *(__m64 *) r = _m_psrldi (t1, 30);\n+      break;\n+    case 31:\n+      *(__m64 *) r = _m_psrldi (t1, 31);\n+      break;\n+    default:\n+      *(__m64 *) r = _m_psrldi (t1, 32);\n+      break;\n+    }\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *src_p, unsigned int imm,\n+\t\t\tlong long *res_p)\n+{\n+  int *src = (int *) src_p;\n+  int *res = (int *) res_p;\n+  int i;\n+  if (imm > 31)\n+    for (i = 0; i < 2; i++)\n+      res[i] = 0;\n+  else\n+    for (i = 0; i < 2; i++)\n+      res[i] = src[i] >> imm;\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  unsigned int count;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i++)\n+    {\n+      count = MMXops[i];\n+      test_psrldi (&MMXops[i], count, &r);\n+      compute_correct_result (&MMXops[i], count, &ck);\n+      if (ck != r)\n+\t  fail++;\n+      }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "064fb4aab7e3c4e412f5277351bdfffe55879ed4", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-psrlq.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psrlq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psrlq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psrlq.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_psrlq  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_psrlq (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (unsigned long long *dst,\n+\t\t\tunsigned long long *src,\n+\t\t\tunsigned long long *res)\n+{\n+  if (src[0] > 63)\n+    res[0] = 0;\n+  else\n+    res[0] = dst[0] >> src[0];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_psrlq (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "35de178efea6d8ec80d90d41d1732ac9fc8e6e34", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-psrlqi.c", "status": "added", "additions": 245, "deletions": 0, "changes": 245, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psrlqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psrlqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psrlqi.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,245 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_psllwi  (long long *ll1, unsigned int imm, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  switch (imm)\n+    {\n+    case 0:\n+      *(__m64 *) r = _m_psrlqi (t1, 0);\n+      break;\n+    case 1:\n+      *(__m64 *) r = _m_psrlqi (t1, 1);\n+      break;\n+    case 2:\n+      *(__m64 *) r = _m_psrlqi (t1, 2);\n+      break;\n+    case 3:\n+      *(__m64 *) r = _m_psrlqi (t1, 3);\n+      break;\n+    case 4:\n+      *(__m64 *) r = _m_psrlqi (t1, 4);\n+      break;\n+    case 5:\n+      *(__m64 *) r = _m_psrlqi (t1, 5);\n+      break;\n+    case 6:\n+      *(__m64 *) r = _m_psrlqi (t1, 6);\n+      break;\n+    case 7:\n+      *(__m64 *) r = _m_psrlqi (t1, 7);\n+      break;\n+    case 8:\n+      *(__m64 *) r = _m_psrlqi (t1, 8);\n+      break;\n+    case 9:\n+      *(__m64 *) r = _m_psrlqi (t1, 9);\n+      break;\n+    case 10:\n+      *(__m64 *) r = _m_psrlqi (t1, 10);\n+      break;\n+    case 11:\n+      *(__m64 *) r = _m_psrlqi (t1, 11);\n+      break;\n+    case 12:\n+      *(__m64 *) r = _m_psrlqi (t1, 12);\n+      break;\n+    case 13:\n+      *(__m64 *) r = _m_psrlqi (t1, 13);\n+      break;\n+    case 14:\n+      *(__m64 *) r = _m_psrlqi (t1, 14);\n+      break;\n+    case 15:\n+      *(__m64 *) r = _m_psrlqi (t1, 15);\n+      break;\n+    case 16:\n+      *(__m64 *) r = _m_psrlqi (t1, 16);\n+      break;\n+    case 17:\n+      *(__m64 *) r = _m_psrlqi (t1, 17);\n+      break;\n+    case 18:\n+      *(__m64 *) r = _m_psrlqi (t1, 18);\n+      break;\n+    case 19:\n+      *(__m64 *) r = _m_psrlqi (t1, 19);\n+      break;\n+    case 20:\n+      *(__m64 *) r = _m_psrlqi (t1, 20);\n+      break;\n+    case 21:\n+      *(__m64 *) r = _m_psrlqi (t1, 21);\n+      break;\n+    case 22:\n+      *(__m64 *) r = _m_psrlqi (t1, 22);\n+      break;\n+    case 23:\n+      *(__m64 *) r = _m_psrlqi (t1, 23);\n+      break;\n+    case 24:\n+      *(__m64 *) r = _m_psrlqi (t1, 24);\n+      break;\n+    case 25:\n+      *(__m64 *) r = _m_psrlqi (t1, 25);\n+      break;\n+    case 26:\n+      *(__m64 *) r = _m_psrlqi (t1, 26);\n+      break;\n+    case 27:\n+      *(__m64 *) r = _m_psrlqi (t1, 27);\n+      break;\n+    case 28:\n+      *(__m64 *) r = _m_psrlqi (t1, 28);\n+      break;\n+    case 29:\n+      *(__m64 *) r = _m_psrlqi (t1, 29);\n+      break;\n+    case 30:\n+      *(__m64 *) r = _m_psrlqi (t1, 30);\n+      break;\n+    case 31:\n+      *(__m64 *) r = _m_psrlqi (t1, 31);\n+      break;\n+    case 32:\n+      *(__m64 *) r = _m_psrlqi (t1, 32);\n+      break;\n+    case 33:\n+      *(__m64 *) r = _m_psrlqi (t1, 33);\n+      break;\n+    case 34:\n+      *(__m64 *) r = _m_psrlqi (t1, 34);\n+      break;\n+    case 35:\n+      *(__m64 *) r = _m_psrlqi (t1, 35);\n+      break;\n+    case 36:\n+      *(__m64 *) r = _m_psrlqi (t1, 36);\n+      break;\n+    case 37:\n+      *(__m64 *) r = _m_psrlqi (t1, 37);\n+      break;\n+    case 38:\n+      *(__m64 *) r = _m_psrlqi (t1, 38);\n+      break;\n+    case 39:\n+      *(__m64 *) r = _m_psrlqi (t1, 39);\n+      break;\n+    case 40:\n+      *(__m64 *) r = _m_psrlqi (t1, 40);\n+      break;\n+    case 41:\n+      *(__m64 *) r = _m_psrlqi (t1, 41);\n+      break;\n+    case 42:\n+      *(__m64 *) r = _m_psrlqi (t1, 42);\n+      break;\n+    case 43:\n+      *(__m64 *) r = _m_psrlqi (t1, 43);\n+      break;\n+    case 44:\n+      *(__m64 *) r = _m_psrlqi (t1, 44);\n+      break;\n+    case 45:\n+      *(__m64 *) r = _m_psrlqi (t1, 45);\n+      break;\n+    case 46:\n+      *(__m64 *) r = _m_psrlqi (t1, 46);\n+      break;\n+    case 47:\n+      *(__m64 *) r = _m_psrlqi (t1, 47);\n+      break;\n+    case 48:\n+      *(__m64 *) r = _m_psrlqi (t1, 48);\n+      break;\n+    case 49:\n+      *(__m64 *) r = _m_psrlqi (t1, 49);\n+      break;\n+    case 50:\n+      *(__m64 *) r = _m_psrlqi (t1, 50);\n+      break;\n+    case 51:\n+      *(__m64 *) r = _m_psrlqi (t1, 51);\n+      break;\n+    case 52:\n+      *(__m64 *) r = _m_psrlqi (t1, 52);\n+      break;\n+    case 53:\n+      *(__m64 *) r = _m_psrlqi (t1, 53);\n+      break;\n+    case 54:\n+      *(__m64 *) r = _m_psrlqi (t1, 54);\n+      break;\n+    case 55:\n+      *(__m64 *) r = _m_psrlqi (t1, 55);\n+      break;\n+    case 56:\n+      *(__m64 *) r = _m_psrlqi (t1, 56);\n+      break;\n+    case 57:\n+      *(__m64 *) r = _m_psrlqi (t1, 57);\n+      break;\n+    case 58:\n+      *(__m64 *) r = _m_psrlqi (t1, 58);\n+      break;\n+    case 59:\n+      *(__m64 *) r = _m_psrlqi (t1, 59);\n+      break;\n+    case 60:\n+      *(__m64 *) r = _m_psrlqi (t1, 60);\n+      break;\n+    case 61:\n+      *(__m64 *) r = _m_psrlqi (t1, 61);\n+      break;\n+    case 62:\n+      *(__m64 *) r = _m_psrlqi (t1, 62);\n+      break;\n+    case 63:\n+      *(__m64 *) r = _m_psrlqi (t1, 63);\n+      break;\n+    default:\n+      *(__m64 *) r = _m_psrlqi (t1, 64);\n+      break;\n+    }\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (unsigned long long *src, unsigned int imm,\n+\t\t\tunsigned long long *res)\n+{\n+  int i;\n+  if (imm > 63)\n+    res[0] = 0;\n+  else\n+    res[0] = src[0] >> imm;\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  unsigned int count;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i++)\n+    {\n+      count = MMXops[i];\n+      test_psllwi (&MMXops[i], count, &r);\n+      compute_correct_result (&MMXops[i], count, &ck);\n+      if (ck != r)\n+\t  fail++;\n+      }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "d2c1680ba5d281cd7db2aa17fb3a299631e052d6", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-psrlw.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psrlw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psrlw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psrlw.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_psrlw  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_psrlw (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  short *dst = (short *) dst_p;\n+  unsigned int *src = (unsigned int *) src_p;\n+  short *res = (short *) res_p;\n+  int i;\n+  if (src[1] || src[0] > 15)\n+    for (i = 0; i < 4; i++)\n+      res[i] = 0;\n+  else\n+    for (i = 0; i < 4; i++)\n+      res[i] = dst[i] >> src[0];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_psrlw (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "0dbffa5629901519046509f46aa63c6d8f80ad22", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-psrlwi.c", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psrlwi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psrlwi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psrlwi.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,105 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_psrlwi  (long long *ll1, unsigned int imm, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  switch (imm)\n+    {\n+    case 0:\n+      *(__m64 *) r = _m_psrlwi (t1, 0);\n+      break;\n+    case 1:\n+      *(__m64 *) r = _m_psrlwi (t1, 1);\n+      break;\n+    case 2:\n+      *(__m64 *) r = _m_psrlwi (t1, 2);\n+      break;\n+    case 3:\n+      *(__m64 *) r = _m_psrlwi (t1, 3);\n+      break;\n+    case 4:\n+      *(__m64 *) r = _m_psrlwi (t1, 4);\n+      break;\n+    case 5:\n+      *(__m64 *) r = _m_psrlwi (t1, 5);\n+      break;\n+    case 6:\n+      *(__m64 *) r = _m_psrlwi (t1, 6);\n+      break;\n+    case 7:\n+      *(__m64 *) r = _m_psrlwi (t1, 7);\n+      break;\n+    case 8:\n+      *(__m64 *) r = _m_psrlwi (t1, 8);\n+      break;\n+    case 9:\n+      *(__m64 *) r = _m_psrlwi (t1, 9);\n+      break;\n+    case 10:\n+      *(__m64 *) r = _m_psrlwi (t1, 10);\n+      break;\n+    case 11:\n+      *(__m64 *) r = _m_psrlwi (t1, 11);\n+      break;\n+    case 12:\n+      *(__m64 *) r = _m_psrlwi (t1, 12);\n+      break;\n+    case 13:\n+      *(__m64 *) r = _m_psrlwi (t1, 13);\n+      break;\n+    case 14:\n+      *(__m64 *) r = _m_psrlwi (t1, 14);\n+      break;\n+    case 15:\n+      *(__m64 *) r = _m_psrlwi (t1, 15);\n+      break;\n+    default:\n+      *(__m64 *) r = _m_psrlwi (t1, 16);\n+      break;\n+    }\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *src_p, unsigned int imm,\n+\t\t\tlong long *res_p)\n+{\n+  short *src = (short *) src_p;\n+  short *res = (short *) res_p;\n+  int i;\n+  if (imm > 15)\n+    for (i = 0; i < 4; i++)\n+      res[i] = 0;\n+  else\n+    for (i = 0; i < 4; i++)\n+      res[i] = src[i] >> imm;\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  unsigned int count;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i++)\n+    {\n+      count = MMXops[i];\n+      test_psrlwi (&MMXops[i], count, &r);\n+      compute_correct_result (&MMXops[i], count, &ck);\n+      if (ck != r)\n+\t  fail++;\n+      }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "de0076a1654c5dd4677ebfbf4ea09ac5124d90fd", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-psubb.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psubb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psubb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psubb.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_psubb  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_psubb (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  char *dst = (char *) dst_p;\n+  char *src = (char *) src_p;\n+  char *res = (char *) res_p;\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    res[i] = dst[i] - src[i];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_psubb (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "344f632b6d60749abb855cdc13eff00203cf9417", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-psubd.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psubd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psubd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psubd.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_psubd  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_psubd (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  int *dst = (int *) dst_p;\n+  int *src = (int *) src_p;\n+  int *res = (int *) res_p;\n+  int i;\n+  for (i = 0; i < 2; i++)\n+    res[i] = dst[i] - src[i];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_psubd (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "613f302bf6a7540d6b77bf3b248d0577de870903", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-psubq.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psubq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psubq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psubq.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_psubq  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _mm_sub_si64 (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  res_p[0] = dst_p[0] - src_p[0];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_psubq (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "ad6112a5d33b53a794352a45cd1ca6c91daa8da7", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-psubusb.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psubusb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psubusb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psubusb.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_psubusb  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_psubusb (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  unsigned char *dst = (unsigned char *) dst_p;\n+  unsigned char *src = (unsigned char *) src_p;\n+  unsigned char *res = (unsigned char *) res_p;\n+  int i;\n+  for (i = 0; i < 8; i++)\n+    res[i] = saturate_ub (dst[i] - src[i]);\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_psubusb (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "8a8a9c0fb4d6b6d89ed8dd88260d40c1715dc400", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-psubusw.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psubusw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psubusw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psubusw.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_psubusw  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_psubusw (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  unsigned short *dst = (unsigned short *) dst_p;\n+  unsigned short *src = (unsigned short *) src_p;\n+  unsigned short *res = (unsigned short *) res_p;\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    res[i] = saturate_uw (dst[i] - src[i]);\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_psubusw (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "4d53c8c419a2a55f9f58c7a8394317bbb2f97e2c", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-psubw.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psubw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psubw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-psubw.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_psubw  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_psubw (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  short *dst = (short *) dst_p;\n+  short *src = (short *) src_p;\n+  short *res = (short *) res_p;\n+  int i;\n+  for (i = 0; i < 4; i++)\n+    res[i] = dst[i] - src[i];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_psubw (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "07281f2c3a3d6a73835a89314bc4e31b611a9206", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-punpckhbw.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-punpckhbw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-punpckhbw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-punpckhbw.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_punpckhbw  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_punpckhbw (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  char *dst = (char *) dst_p;\n+  char *src = (char *) src_p;\n+  char *res = (char *) res_p;\n+  res[0] = dst[4];\n+  res[1] = src[4];\n+  res[2] = dst[5];\n+  res[3] = src[5];\n+  res[4] = dst[6];\n+  res[5] = src[6];\n+  res[6] = dst[7];\n+  res[7] = src[7];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_punpckhbw (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "6c67af92b19feda9b0c9a4d2084a67a04e002e4a", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-punpckhdq.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-punpckhdq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-punpckhdq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-punpckhdq.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_punpckhdq  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_punpckhdq (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  int *dst = (int *) dst_p;\n+  int *src = (int *) src_p;\n+  int *res = (int *) res_p;\n+  res[0] = dst[1];\n+  res[1] = src[1];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_punpckhdq (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "b6c348323eae82a45ee619f3344d55879d669d8a", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-punpckhwd.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-punpckhwd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-punpckhwd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-punpckhwd.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_punpckhwd  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_punpckhwd (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  short *dst = (short *) dst_p;\n+  short *src = (short *) src_p;\n+  short *res = (short *) res_p;\n+  res[0] = dst[2];\n+  res[1] = src[2];\n+  res[2] = dst[3];\n+  res[3] = src[3];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_punpckhwd (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "dcf6d3f25bba93f8b9eee75484ef2ff4dec6e135", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-punpcklbw.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-punpcklbw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-punpcklbw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-punpcklbw.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_punpcklbw  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_punpcklbw (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  char *dst = (char *) dst_p;\n+  char *src = (char *) src_p;\n+  char *res = (char *) res_p;\n+  res[0] = dst[0];\n+  res[1] = src[0];\n+  res[2] = dst[1];\n+  res[3] = src[1];\n+  res[4] = dst[2];\n+  res[5] = src[2];\n+  res[6] = dst[3];\n+  res[7] = src[3];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_punpcklbw (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "463c6d2c9892970796b4c894d38c970f8d061b7a", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-punpckldq.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-punpckldq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-punpckldq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-punpckldq.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_punpckldq  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_punpckldq (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  int *dst = (int *) dst_p;\n+  int *src = (int *) src_p;\n+  int *res = (int *) res_p;\n+  res[0] = dst[0];\n+  res[1] = src[0];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_punpckldq (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "acd62f5bd746df979bae87227c62bda5ff591b94", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-punpcklwd.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-punpcklwd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-punpcklwd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-punpcklwd.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_punpcklwd  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_punpcklwd (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (long long *dst_p, long long *src_p,\n+\t\t\tlong long *res_p)\n+{\n+  short *dst = (short *) dst_p;\n+  short *src = (short *) src_p;\n+  short *res = (short *) res_p;\n+  res[0] = dst[0];\n+  res[1] = src[0];\n+  res[2] = dst[1];\n+  res[3] = src[1];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_punpcklwd (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "be632989c3558488d4a05513a4fea3a8e0eddb96", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-pxor.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pxor.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pxor.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-pxor.c?ref=dc90cc8c23f1e18f67e8f4d4a6da41bf6a04a147", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-strict-aliasing -msse2\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target { ! ia32 } } } */\n+\n+#include \"sse2-check.h\"\n+#include \"mmx-vals.h\"\n+\n+__attribute__((noinline, noclone))\n+static void\n+test_pxor  (long long *ll1, long long *ll2, long long *r)\n+{\n+  __m64 t1 = *(__m64 *) ll1;\n+  __m64 t2 = *(__m64 *) ll2;\n+  *(__m64 *) r = _m_pxor (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (unsigned long long *dst,\n+\t\t\tunsigned long long *src,\n+\t\t\tunsigned long long *res)\n+{\n+  res[0] = dst[0] ^ src[0];\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  int i;\n+  long long r, ck;\n+  int fail = 0;\n+\n+  /* Run the MMX tests */\n+  for (i = 0; i < MMX_num_ops; i += 2)\n+    {\n+      test_pxor (&MMXops[i], &MMXops[i + 1], &r);\n+      compute_correct_result (&MMXops[i], &MMXops[i + 1], &ck);\n+      if (ck != r)\n+\tfail++;\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}]}