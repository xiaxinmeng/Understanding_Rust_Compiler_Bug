{"sha": "368b7a304e674df0e140b6dc164e670650c56486", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY4YjdhMzA0ZTY3NGRmMGUxNDBiNmRjMTY0ZTY3MDY1MGM1NjQ4Ng==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-07-14T23:57:34Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-07-14T23:57:34Z"}, "message": "re PR libstdc++/16505 ([3.4 only] std::uninitialized_fill_n() incorrect signature)\n\n2004-07-14  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/16505\n\t* include/bits/stl_uninitialized.h (uninitialized_fill_n): Fix\n\tthe signature to return void, as per 20.4.4.3.\n\t* include/bits/stl_vector.h (vector::vector(size_type,\n\tconst value_type&, const allocator_type&), vector::vector(size_type),\n\tvector::_M_initialize_dispatch): Adjust callers.\n\t* include/bits/vector.tcc (vector<>::_M_fill_assign,\n\tvector<>::_M_fill_insert): Likewise.\n\t* testsuite/20_util/memory/16505.cc: New.\n\nFrom-SVN: r84720", "tree": {"sha": "810e6e95b8bb967e4488292e927010f0ff3f9e78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/810e6e95b8bb967e4488292e927010f0ff3f9e78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/368b7a304e674df0e140b6dc164e670650c56486", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/368b7a304e674df0e140b6dc164e670650c56486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/368b7a304e674df0e140b6dc164e670650c56486", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/368b7a304e674df0e140b6dc164e670650c56486/comments", "author": null, "committer": null, "parents": [{"sha": "7ae4ad2898ab2f7f2afbadae3cdc4d24221eb034", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ae4ad2898ab2f7f2afbadae3cdc4d24221eb034", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ae4ad2898ab2f7f2afbadae3cdc4d24221eb034"}], "stats": {"total": 96, "additions": 69, "deletions": 27}, "files": [{"sha": "6c8101f247642930a06bf61e031709259df2ef98", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/368b7a304e674df0e140b6dc164e670650c56486/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/368b7a304e674df0e140b6dc164e670650c56486/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=368b7a304e674df0e140b6dc164e670650c56486", "patch": "@@ -1,3 +1,15 @@\n+2004-07-14  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/16505\n+\t* include/bits/stl_uninitialized.h (uninitialized_fill_n): Fix\n+\tthe signature to return void, as per 20.4.4.3.\n+\t* include/bits/stl_vector.h (vector::vector(size_type,\n+\tconst value_type&, const allocator_type&), vector::vector(size_type),\n+\tvector::_M_initialize_dispatch): Adjust callers.\n+\t* include/bits/vector.tcc (vector<>::_M_fill_assign,\n+\tvector<>::_M_fill_insert): Likewise.\n+\t* testsuite/20_util/memory/16505.cc: New.\n+\n 2004-07-14  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/22_locale/locale/cons/12658_thread-1.cc,"}, {"sha": "898658c9df2ca1c7a0dea30623b953e29dc3e458", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/368b7a304e674df0e140b6dc164e670650c56486/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/368b7a304e674df0e140b6dc164e670650c56486/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=368b7a304e674df0e140b6dc164e670650c56486", "patch": "@@ -82,7 +82,7 @@ namespace std\n       _ForwardIterator __cur = __result;\n       try\n \t{\n-\t  for ( ; __first != __last; ++__first, ++__cur)\n+\t  for (; __first != __last; ++__first, ++__cur)\n \t    std::_Construct(&*__cur, *__first);\n \t  return __cur;\n \t}\n@@ -145,7 +145,7 @@ namespace std\n       _ForwardIterator __cur = __first;\n       try\n \t{\n-\t  for ( ; __cur != __last; ++__cur)\n+\t  for (; __cur != __last; ++__cur)\n \t    std::_Construct(&*__cur, __x);\n \t}\n       catch(...)\n@@ -190,7 +190,7 @@ namespace std\n       _ForwardIterator __cur = __first;\n       try\n \t{\n-\t  for ( ; __n > 0; --__n, ++__cur)\n+\t  for (; __n > 0; --__n, ++__cur)\n \t    std::_Construct(&*__cur, __x);\n \t  return __cur;\n \t}\n@@ -206,17 +206,17 @@ namespace std\n    *  @param  first  An input iterator.\n    *  @param  n      The number of copies to make.\n    *  @param  x      The source value.\n-   *  @return   first+n\n+   *  @return   Nothing.\n    *\n    *  Like fill_n(), but does not require an initialized output range.\n   */\n   template<typename _ForwardIterator, typename _Size, typename _Tp>\n-    inline _ForwardIterator\n+    inline void\n     uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)\n     {\n       typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;\n       typedef typename __type_traits<_ValueType>::is_POD_type _Is_POD;\n-      return std::__uninitialized_fill_n_aux(__first, __n, __x, _Is_POD());\n+      std::__uninitialized_fill_n_aux(__first, __n, __x, _Is_POD());\n     }\n \n   // Extensions: __uninitialized_copy_copy, __uninitialized_copy_fill,"}, {"sha": "2e958459487be7d3b2e84e1e2092912109631f38", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/368b7a304e674df0e140b6dc164e670650c56486/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/368b7a304e674df0e140b6dc164e670650c56486/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=368b7a304e674df0e140b6dc164e670650c56486", "patch": "@@ -118,7 +118,8 @@ namespace _GLIBCXX_STD\n \n       void\n       _M_deallocate(_Tp* __p, size_t __n)\n-      { if (__p)\n+      {\n+\tif (__p)\n \t  _M_impl.deallocate(__p, __n);\n       }\n     };\n@@ -198,9 +199,10 @@ namespace _GLIBCXX_STD\n       vector(size_type __n, const value_type& __value,\n \t     const allocator_type& __a = allocator_type())\n       : _Base(__n, __a)\n-      { this->_M_impl._M_finish = std::uninitialized_fill_n(this->\n-\t\t\t\t\t\t\t    _M_impl._M_start,\n-\t\t\t\t\t\t\t    __n, __value); }\n+      {\n+\tstd::uninitialized_fill_n(this->_M_impl._M_start, __n, __value);\n+\tthis->_M_impl._M_finish = this->_M_impl._M_start + __n;\n+      }\n \n       /**\n        *  @brief  Create a %vector with default elements.\n@@ -212,10 +214,10 @@ namespace _GLIBCXX_STD\n       explicit\n       vector(size_type __n)\n       : _Base(__n, allocator_type())\n-      { this->_M_impl._M_finish = std::uninitialized_fill_n(this->\n-\t\t\t\t\t\t\t    _M_impl._M_start,\n-\t\t\t\t\t\t\t    __n,\n-\t\t\t\t\t\t\t    value_type()); }\n+      {\n+\tstd::uninitialized_fill_n(this->_M_impl._M_start, __n, value_type());\n+\tthis->_M_impl._M_finish = this->_M_impl._M_start + __n;\t\n+      }\n \n       /**\n        *  @brief  %Vector copy constructor.\n@@ -231,8 +233,7 @@ namespace _GLIBCXX_STD\n       { this->_M_impl._M_finish = std::uninitialized_copy(__x.begin(),\n \t\t\t\t\t\t\t  __x.end(),\n \t\t\t\t\t\t\t  this->\n-\t\t\t\t\t\t\t  _M_impl._M_start);\n-      }\n+\t\t\t\t\t\t\t  _M_impl._M_start); }\n \n       /**\n        *  @brief  Builds a %vector from a range.\n@@ -777,9 +778,8 @@ namespace _GLIBCXX_STD\n         {\n \t  this->_M_impl._M_start = _M_allocate(__n);\n \t  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;\n-\t  this->_M_impl._M_finish = std::uninitialized_fill_n(this->\n-\t\t\t\t\t\t\t      _M_impl._M_start,\n-\t\t\t\t\t\t\t      __n, __value);\n+\t  std::uninitialized_fill_n(this->_M_impl._M_start, __n, __value);\n+\t  this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;\n \t}\n \n       // Called by the range constructor to implement [23.1.1]/9"}, {"sha": "5337035a93744eecad26abdd68a1bb8dd6fae3d9", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/368b7a304e674df0e140b6dc164e670650c56486/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/368b7a304e674df0e140b6dc164e670650c56486/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=368b7a304e674df0e140b6dc164e670650c56486", "patch": "@@ -176,10 +176,9 @@ namespace _GLIBCXX_STD\n       else if (__n > size())\n \t{\n \t  std::fill(begin(), end(), __val);\n-\t  this->_M_impl._M_finish = std::uninitialized_fill_n(this->\n-\t\t\t\t\t\t\t      _M_impl._M_finish,\n-\t\t\t\t\t\t\t      __n - size(),\n-\t\t\t\t\t\t\t      __val);\n+\t  std::uninitialized_fill_n(this->_M_impl._M_finish,\n+\t\t\t\t    __n - size(), __val);\n+\t  this->_M_impl._M_finish += __n - size();\n \t}\n       else\n         erase(fill_n(begin(), __n, __val), end());\n@@ -336,15 +335,15 @@ namespace _GLIBCXX_STD\n \t\t{\n \t\t  __new_finish = std::uninitialized_copy(begin(), __position,\n \t\t\t\t\t\t\t __new_start);\n-\t\t  __new_finish = std::uninitialized_fill_n(__new_finish, __n,\n-\t\t\t\t\t\t\t   __x);\n+\t\t  std::uninitialized_fill_n(__new_finish, __n, __x);\n+\t\t  __new_finish += __n;\n \t\t  __new_finish = std::uninitialized_copy(__position, end(),\n \t\t\t\t\t\t\t __new_finish);\n \t\t}\n \t      catch(...)\n \t\t{\n-\t\t  std::_Destroy(__new_start,__new_finish);\n-\t\t  _M_deallocate(__new_start.base(),__len);\n+\t\t  std::_Destroy(__new_start, __new_finish);\n+\t\t  _M_deallocate(__new_start.base(), __len);\n \t\t  __throw_exception_again;\n \t\t}\n \t      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish);"}, {"sha": "87ef178c9bff949203e3e1d3ada4cfbdd96d87c3", "filename": "libstdc++-v3/testsuite/20_util/memory/16505.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/368b7a304e674df0e140b6dc164e670650c56486/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmemory%2F16505.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/368b7a304e674df0e140b6dc164e670650c56486/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmemory%2F16505.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmemory%2F16505.cc?ref=368b7a304e674df0e140b6dc164e670650c56486", "patch": "@@ -0,0 +1,31 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.4 specialized algorithms\n+\n+// { dg-do compile }\n+\n+#include <memory>\n+\n+// libstdc++/16505\n+\n+struct S { };\n+\n+template\n+  void\n+  std::uninitialized_fill_n<S*, int, S>(S*, int, const S&);"}]}