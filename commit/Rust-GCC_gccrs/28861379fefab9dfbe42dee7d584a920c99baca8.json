{"sha": "28861379fefab9dfbe42dee7d584a920c99baca8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg4NjEzNzlmZWZhYjlkZmJlNDJkZWU3ZDU4NGE5MjBjOTliYWNhOA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@purist.soma.redhat.com", "date": "2000-07-26T20:55:48Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-07-26T20:55:48Z"}, "message": "misc-inst.cc (std): Remove instantiations.\n\n\n2000-07-26  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* src/misc-inst.cc (std): Remove instantiations.\n\n\t* acinclude.m4: Add forward-looking bits for autoconf.\n\t* aclocal.m4: Regenerate.\n\n\t* bits/ostream.tcc (ostream::operator<<): Fix const char* case.\n\nFrom-SVN: r35267", "tree": {"sha": "904247b8540e9c3d63e7c2506fcdd342fc3a1209", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/904247b8540e9c3d63e7c2506fcdd342fc3a1209"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28861379fefab9dfbe42dee7d584a920c99baca8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28861379fefab9dfbe42dee7d584a920c99baca8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28861379fefab9dfbe42dee7d584a920c99baca8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28861379fefab9dfbe42dee7d584a920c99baca8/comments", "author": null, "committer": null, "parents": [{"sha": "6a1fa5f9720c606a11459a006ae9d44741068b74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a1fa5f9720c606a11459a006ae9d44741068b74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a1fa5f9720c606a11459a006ae9d44741068b74"}], "stats": {"total": 2023, "additions": 1027, "deletions": 996}, "files": [{"sha": "0c1d4176f9c871301acd65882ee177b47d5e9803", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28861379fefab9dfbe42dee7d584a920c99baca8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28861379fefab9dfbe42dee7d584a920c99baca8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=28861379fefab9dfbe42dee7d584a920c99baca8", "patch": "@@ -1,3 +1,12 @@\n+2000-07-26  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n+\n+\t* src/misc-inst.cc (std): Remove instantiations.\n+\n+\t* acinclude.m4: Add forward-looking bits for autoconf.\n+\t* aclocal.m4: Regenerate.\n+\n+\t* bits/ostream.tcc (ostream::operator<<): Fix const char* case.\n+\n 2000-07-25  Benjamin Kosnik  <bkoz@gnu.org>\n \n \t* configure.in: Change AM_PROG_LIBTOOL to AC_PROG_LIBTOOL. Change"}, {"sha": "bce263df423191a7ae06a823025e46883664c8c4", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28861379fefab9dfbe42dee7d584a920c99baca8/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28861379fefab9dfbe42dee7d584a920c99baca8/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=28861379fefab9dfbe42dee7d584a920c99baca8", "patch": "@@ -30,6 +30,12 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n \n   AM_INIT_AUTOMAKE(libstdc++, 2.90.8)\n \n+  # Never versions of autoconf add an underscore to these functions.\n+  # Prevent future problems ...\n+  ifdef([AC_PROG_CC_G],[],[define([AC_PROG_CC_G],defn([_AC_PROG_CC_G]))])\n+  ifdef([AC_PROG_CC_GNU],[],[define([AC_PROG_CC_GNU],defn([_AC_PROG_CC_GNU]))])\n+  ifdef([AC_PROG_CXX_G],[],[define([AC_PROG_CXX_G],defn([_AC_PROG_CXX_G]))])\n+  ifdef([AC_PROG_CXX_GNU],[],[define([AC_PROG_CXX_GNU],defn([_AC_PROG_CXX_GNU]))])\n \n #  AC_PROG_CC\n \n@@ -1515,7 +1521,7 @@ dnl Then, if any (well almost any) other make is called, and GNU make also\n dnl exists, then the other make wraps the GNU make.\n dnl\n dnl @author John Darrington <j.darrington@elvis.murdoch.edu.au>\n-dnl @version $Id: acinclude.m4,v 1.46 2000/07/24 16:33:55 bkoz Exp $\n+dnl @version $Id: acinclude.m4,v 1.47 2000/07/26 06:51:37 bkoz Exp $\n dnl\n dnl #### Changes for libstdc++-v3:  reformatting and linewrapping; prepending\n dnl #### GLIBCPP_ to the macro name; adding the :-make fallback in the"}, {"sha": "e131dd376922cbd4ffc711a27db0012354210fcd", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28861379fefab9dfbe42dee7d584a920c99baca8/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28861379fefab9dfbe42dee7d584a920c99baca8/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=28861379fefab9dfbe42dee7d584a920c99baca8", "patch": "@@ -42,6 +42,12 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n \n   AM_INIT_AUTOMAKE(libstdc++, 2.90.8)\n \n+  # Never versions of autoconf add an underscore to these functions.\n+  # Prevent future problems ...\n+  ifdef([AC_PROG_CC_G],[],[define([AC_PROG_CC_G],defn([_AC_PROG_CC_G]))])\n+  ifdef([AC_PROG_CC_GNU],[],[define([AC_PROG_CC_GNU],defn([_AC_PROG_CC_GNU]))])\n+  ifdef([AC_PROG_CXX_G],[],[define([AC_PROG_CXX_G],defn([_AC_PROG_CXX_G]))])\n+  ifdef([AC_PROG_CXX_GNU],[],[define([AC_PROG_CXX_GNU],defn([_AC_PROG_CXX_GNU]))])\n \n #  AC_PROG_CC\n \n@@ -1527,7 +1533,7 @@ dnl Then, if any (well almost any) other make is called, and GNU make also\n dnl exists, then the other make wraps the GNU make.\n dnl\n dnl @author John Darrington <j.darrington@elvis.murdoch.edu.au>\n-dnl @version $Id: acinclude.m4,v 1.46 2000/07/24 16:33:55 bkoz Exp $\n+dnl @version $Id: acinclude.m4,v 1.47 2000/07/26 06:51:37 bkoz Exp $\n dnl\n dnl #### Changes for libstdc++-v3:  reformatting and linewrapping; prepending\n dnl #### GLIBCPP_ to the macro name; adding the :-make fallback in the"}, {"sha": "7f76b0d0e80693cae0cdda107300d481a1d9802e", "filename": "libstdc++-v3/bits/ostream.tcc", "status": "modified", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28861379fefab9dfbe42dee7d584a920c99baca8/libstdc%2B%2B-v3%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28861379fefab9dfbe42dee7d584a920c99baca8/libstdc%2B%2B-v3%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fostream.tcc?ref=28861379fefab9dfbe42dee7d584a920c99baca8", "patch": "@@ -196,7 +196,7 @@ namespace std {\n \t    ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;\n \t    if (__fmt & ios_base::oct || __fmt & ios_base::hex)\n \t      __f = _M_fnumput->put(*this, *this, this->fill(), \n-\t\t\t\t    static_cast<unsigned long long>(__n)).failed();\n+\t\t\t       static_cast<unsigned long long>(__n)).failed();\n \t    else\n \t      __f = _M_fnumput->put(*this, *this, this->fill(), __n).failed();\n \n@@ -585,36 +585,46 @@ namespace std {\n \n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>&\n-    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* /*__s*/)\n+    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)\n     {\n-#if 0\n-      typedef basic_ostream<_CharT, _Traits>   \t\t__ostream_type;\n-      typedef typename _Traits::state_type              __state_type;\n-      typedef codecvt<char, _CharT, __state_type>       __codecvt_type;\n-      typedef typename __ostream_type::char_type\t__char_type;\n-\n+      typedef basic_ostream<_CharT, _Traits> __ostream_type;\n+#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+// 167.  Improper use of traits_type::length()\n+      typedef char_traits<char>\t\t     __ctraits_type;\n+#endif\n       __ostream_type::sentry __cerb(__out);\n       if (__cerb)\n \t{\n-\t  const __codecvt_type* __fcvt = &use_facet<__codecvt_type>(__out.getloc());\n+\t  size_t __clen = __ctraits_type::length(__s);\n+\t  _CharT __ws[__clen + 1];\n+\t  for (size_t  __i = 0; __i <= __clen; ++__i)\n+\t    __ws[__i] = __out.widen(__s[__i]);\n+\t  _CharT* __str = __ws;\n+\t  \n \t  try {\n-\t    streamsize __n = char_traits<char>::length(__s);\n-\t    __char_type __conv[__n];\n-\t    __state_type __state_cur;\n-\t    __char_type __pbuf[__n];\t      \n-\t    __char_type* __pend;\n-\t    char* __send;\n-\t    __fcvt->out(__state_cur, \n-\t\t\t__pbuf, __pbuf + __n,\n-\t\t\tconst_cast<const __char_type*&>(__pend),\n-\t\t\tconst_cast<char*>(__s), \n-\t\t\tconst_cast<char*>(__s + __n),\n-\t\t\t__send);\n-\t    __out.write(__pbuf, __n);\n+\t    streamsize __len = static_cast<streamsize>(__clen);\n+\t    streamsize __w = __out.width();\n+\t    _CharT __pads[__w];\n+\n+\t    if (__w > __len)\n+\t      {\n+\t\t_S_pad_char(__out, __pads, __ws, __w, __len);\n+\t\t__str = __pads;\n+\t\t__len = __w;\n+\t      }\n+\t    __out.write(__str, __len);\n+\t    __out.width(0);\n+\t  }\n+\t  catch(exception& __fail){\n+\t    // 27.6.1.2.1 Common requirements.\n+\t    // Turn this on without causing an ios::failure to be thrown.\n+\t    __out.setstate(ios_base::badbit);\n+\t    if ((__out.exceptions() & ios_base::badbit) != 0)\n+\t      throw;\n \t  }\n-#endif\n-\t  return __out;\n \t}\n+      return __out;\n+    }\n \n   // Partial specializationss\n   template<class _Traits>"}, {"sha": "e62bf33fa48b020a14bb3ddb69ab40abd2b133fe", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 970, "deletions": 964, "changes": 1934, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28861379fefab9dfbe42dee7d584a920c99baca8/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28861379fefab9dfbe42dee7d584a920c99baca8/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=28861379fefab9dfbe42dee7d584a920c99baca8"}, {"sha": "4bab493033683eee95029ac891b3a9a6eb5c52c9", "filename": "libstdc++-v3/src/misc-inst.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28861379fefab9dfbe42dee7d584a920c99baca8/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28861379fefab9dfbe42dee7d584a920c99baca8/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc?ref=28861379fefab9dfbe42dee7d584a920c99baca8", "patch": "@@ -123,9 +123,6 @@ namespace std {\n   template ostream& operator<<(ostream&, const char*);\n   template ostream& operator<<(ostream&, const unsigned char*);\n   template ostream& operator<<(ostream&, const signed char*);\n-  // template ostream& operator<<(ostream&, _Setfill<char>);\n-  // template ostream& operator<<(ostream&, _Setw);\n-  // template _Setfill<char> setfill(char);\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template class basic_ostream<wchar_t>;\n   template wostream& endl(wostream&);\n@@ -135,9 +132,6 @@ namespace std {\n   template wostream& operator<<(wostream&, char);\n   template wostream& operator<<(wostream&, const wchar_t*);\n   template wostream& operator<<(wostream&, const char*);\n-  // template wostream& operator<<(wostream&, _Setfill<wchar_t>);\n-  // template wostream& operator<<(wostream&, _Setw);\n-  // template _Setfill<wchar_t> setfill(wchar_t);\n #endif\n   \n "}]}