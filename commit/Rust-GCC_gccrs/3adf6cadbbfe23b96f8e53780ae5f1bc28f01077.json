{"sha": "3adf6cadbbfe23b96f8e53780ae5f1bc28f01077", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FkZjZjYWRiYmZlMjNiOTZmOGU1Mzc4MGFlNWYxYmMyOGYwMTA3Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-05-20T22:06:40Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-05-20T22:06:40Z"}, "message": "istream.tcc (operator>>(basic_istream<>&, basic_string<>&)): Use a temporary buffer, thus avoiding reallocation for common case.\n\n2004-05-20  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/istream.tcc (operator>>(basic_istream<>&,\n\tbasic_string<>&)): Use a temporary buffer, thus avoiding\n\treallocation for common case.\n\t* testsuite/21_strings/basic_string/inserters_extractors/char/11.cc:\n\tNew.\n\t* testsuite/21_strings/basic_string/inserters_extractors/wchar_t/11.cc:\n\tLikewise.\n\n\t* include/bits/istream.tcc: Const-ification of a few variables.\n\n\t* include/bits/ostream.tcc: Trivial formatting fixes and\n\tconst-ification of some variables.\n\nFrom-SVN: r82070", "tree": {"sha": "55473afcedd65e7d1365380c1abb7e2c8759c1cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55473afcedd65e7d1365380c1abb7e2c8759c1cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3adf6cadbbfe23b96f8e53780ae5f1bc28f01077", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3adf6cadbbfe23b96f8e53780ae5f1bc28f01077", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3adf6cadbbfe23b96f8e53780ae5f1bc28f01077", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3adf6cadbbfe23b96f8e53780ae5f1bc28f01077/comments", "author": null, "committer": null, "parents": [{"sha": "b8850dd24642e8db12cb09726aaad3295c0b10c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8850dd24642e8db12cb09726aaad3295c0b10c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8850dd24642e8db12cb09726aaad3295c0b10c4"}], "stats": {"total": 247, "additions": 219, "deletions": 28}, "files": [{"sha": "1baf1dede9bec729be744453b4d8c106125424e6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adf6cadbbfe23b96f8e53780ae5f1bc28f01077/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adf6cadbbfe23b96f8e53780ae5f1bc28f01077/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3adf6cadbbfe23b96f8e53780ae5f1bc28f01077", "patch": "@@ -1,3 +1,18 @@\n+2004-05-20  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/istream.tcc (operator>>(basic_istream<>&,\n+\tbasic_string<>&)): Use a temporary buffer, thus avoiding\n+\treallocation for common case.\n+\t* testsuite/21_strings/basic_string/inserters_extractors/char/11.cc:\n+\tNew.\n+\t* testsuite/21_strings/basic_string/inserters_extractors/wchar_t/11.cc:\n+\tLikewise.\n+\n+\t* include/bits/istream.tcc: Const-ification of a few variables.\n+\n+\t* include/bits/ostream.tcc: Trivial formatting fixes and\n+\tconst-ification of some variables.\n+\n 2004-05-20  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/15123"}, {"sha": "5469005a67fdd04649de863cd236bc6e7de3c8f6", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adf6cadbbfe23b96f8e53780ae5f1bc28f01077/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adf6cadbbfe23b96f8e53780ae5f1bc28f01077/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=3adf6cadbbfe23b96f8e53780ae5f1bc28f01077", "patch": "@@ -478,7 +478,7 @@ namespace std\n \t{\n \t  try\n \t    {\n-\t      int_type __cb = this->rdbuf()->sbumpc();\n+\t      const int_type __cb = this->rdbuf()->sbumpc();\n \t      // 27.6.1.1 paragraph 3\n \t      if (!traits_type::eq_int_type(__cb, traits_type::eof()))\n \t\t{\n@@ -876,7 +876,8 @@ namespace std\n \t  if (!this->fail())\n \t    {\n \t      // 136.  seekp, seekg setting wrong streams?\n-\t      pos_type __p = this->rdbuf()->pubseekpos(__pos, ios_base::in);\n+\t      const pos_type __p = this->rdbuf()->pubseekpos(__pos,\n+\t\t\t\t\t\t\t     ios_base::in);\n \n \t      // 129. Need error indication from seekp() and seekg()\n \t      if (__p == pos_type(off_type(-1)))\n@@ -903,8 +904,8 @@ namespace std\n \t  if (!this->fail())\n \t    {\n \t      // 136.  seekp, seekg setting wrong streams?\n-\t      pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,\n-\t\t\t\t\t\t       ios_base::in);\n+\t      const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,\n+\t\t\t\t\t\t\t     ios_base::in);\n \n \t      // 129. Need error indication from seekp() and seekg()\n \t      if (__p == pos_type(off_type(-1)))\n@@ -924,13 +925,15 @@ namespace std\n     operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)\n     {\n       typedef basic_istream<_CharT, _Traits>\t\t__istream_type;\n+      typedef typename __istream_type::int_type         __int_type;\n+\n       typename __istream_type::sentry __cerb(__in, false);\n       if (__cerb)\n \t{\n \t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try\n \t    {\n-\t      typename __istream_type::int_type __cb = __in.rdbuf()->sbumpc();\n+\t      const __int_type __cb = __in.rdbuf()->sbumpc();\n \t      if (!_Traits::eq_int_type(__cb, _Traits::eof()))\n \t\t__c = _Traits::to_char_type(__cb);\n \t      else\n@@ -1043,11 +1046,13 @@ namespace std\n \t{\n \t  try\n \t    {\n+\t      // Avoid reallocation for common case.\n \t      __str.erase();\n-\t      streamsize __w = __in.width();\n-\t      __size_type __n;\n-\t      __n = __w > 0 ? static_cast<__size_type>(__w) : __str.max_size();\n-\n+\t      _CharT __buf[128];\n+\t      __size_type __len = 0;\t      \n+\t      const streamsize __w = __in.width();\n+\t      const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)\n+\t\t                              : __str.max_size();\n \t      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());\n \t      const __int_type __eof = _Traits::eof();\n \t      __streambuf_type* __sb = __in.rdbuf();\n@@ -1057,10 +1062,17 @@ namespace std\n \t\t     && !_Traits::eq_int_type(__c, __eof)\n \t\t     && !__ct.is(ctype_base::space, _Traits::to_char_type(__c)))\n \t\t{\n-\t\t  __str += _Traits::to_char_type(__c);\n+\t\t  if (__len == sizeof(__buf) / sizeof(_CharT))\n+\t\t    {\n+\t\t      __str.append(__buf, sizeof(__buf) / sizeof(_CharT));\n+\t\t      __len = 0;\n+\t\t    }\n+\t\t  __buf[__len++] = _Traits::to_char_type(__c);\n \t\t  ++__extracted;\n \t\t  __c = __sb->snextc();\n \t\t}\n+\t      __str.append(__buf, __len);\n+\n \t      if (_Traits::eq_int_type(__c, __eof))\n \t\t__err |= ios_base::eofbit;\n \t      __in.width(0);\n@@ -1102,7 +1114,7 @@ namespace std\n \t{\n \t  try\n \t    {\n-\t      // Avoid reallocation for common case.\t      \n+\t      // Avoid reallocation for common case.\n \t      __str.erase();\n \t      _CharT __buf[128];\n \t      __size_type __len = 0;"}, {"sha": "5510ea3ecc46852c7a74116a49cf7499fa56dc26", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adf6cadbbfe23b96f8e53780ae5f1bc28f01077/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adf6cadbbfe23b96f8e53780ae5f1bc28f01077/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=3adf6cadbbfe23b96f8e53780ae5f1bc28f01077", "patch": "@@ -1,6 +1,6 @@\n // ostream classes -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -129,12 +129,13 @@ namespace std\n \t  try\n \t    {\n \t      bool __b = false;\n-\t      char_type __c = this->fill();\n-\t      ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;\n+\t      const char_type __c = this->fill();\n+\t      const ios_base::fmtflags __fmt = (this->flags()\n+\t\t\t\t\t\t& ios_base::basefield);\n \t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n \t      if ((__fmt & ios_base::oct) || (__fmt & ios_base::hex))\n \t\t{\n-\t\t  unsigned long __l = static_cast<unsigned long>(__n);\n+\t\t  const unsigned long __l = static_cast<unsigned long>(__n);\n \t\t  __b = __np.put(*this, *this, __c, __l).failed();\n \t\t}\n \t      else\n@@ -186,13 +187,14 @@ namespace std\n \t  try\n \t    {\n \t      bool __b = false;\n-\t      char_type __c = this->fill();\n-\t      ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;\n+\t      const char_type __c = this->fill();\n+\t      const ios_base::fmtflags __fmt = (this->flags()\n+\t\t\t\t\t\t& ios_base::basefield);\n \t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n \t      if ((__fmt & ios_base::oct) || (__fmt & ios_base::hex))\n \t\t{\n-\t\t  unsigned long long __l;\n-\t\t  __l = static_cast<unsigned long long>(__n);\n+\t\t  const unsigned long long __l = (static_cast<\n+\t\t\t\t\t\t  unsigned long long>(__n));\n \t\t  __b = __np.put(*this, *this, __c, __l).failed();\n \t\t}\n \t      else\n@@ -342,7 +344,7 @@ namespace std\n \t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try\n \t    {\n-\t      int_type __put = this->rdbuf()->sputc(__c);\n+\t      const int_type __put = this->rdbuf()->sputc(__c);\n \t      if (traits_type::eq_int_type(__put, traits_type::eof()))\n \t\t__err |= ios_base::badbit;\n \t    }\n@@ -426,7 +428,8 @@ namespace std\n \t    {\n \t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t      // 136.  seekp, seekg setting wrong streams?\n-\t      pos_type __p = this->rdbuf()->pubseekpos(__pos, ios_base::out);\n+\t      const pos_type __p = this->rdbuf()->pubseekpos(__pos,\n+\t\t\t\t\t\t\t     ios_base::out);\n \n \t      // 129. Need error indication from seekp() and seekg()\n \t      if (__p == pos_type(off_type(-1)))\n@@ -452,8 +455,8 @@ namespace std\n \t    {\n \t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t      // 136.  seekp, seekg setting wrong streams?\n-\t      pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,\n-\t\t\t\t\t\t       ios_base::out);\n+\t      const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,\n+\t\t\t\t\t\t\t     ios_base::out);\n \n \t      // 129. Need error indication from seekp() and seekg()\n \t      if (__p == pos_type(off_type(-1)))\n@@ -542,8 +545,9 @@ namespace std\n \t      streamsize __len = static_cast<streamsize>(_Traits::length(__s));\n \t      if (__w > __len)\n \t\t{\n-\t\t  _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\n-\t\t\t\t\t\t\t\t       * __w));\n+\t\t  _CharT* __cs = (static_cast<\n+\t\t\t\t  _CharT*>(__builtin_alloca(sizeof(_CharT)\n+\t\t\t\t\t\t\t    * __w)));\n \t\t  __pad<_CharT, _Traits>::_S_pad(__out, __out.fill(), __cs,\n \t\t\t\t\t\t __s, __w, __len, false);\n \t\t  __s = __cs;\n@@ -585,8 +589,9 @@ namespace std\n \t      streamsize __len = static_cast<streamsize>(__clen);\n \t      if (__w > __len)\n \t\t{\n-\t\t  _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\n-\t\t\t\t\t\t\t\t       * __w));\n+\t\t  _CharT* __cs = (static_cast<\n+\t\t\t\t  _CharT*>(__builtin_alloca(sizeof(_CharT)\n+\t\t\t\t\t\t\t    * __w)));\n \t\t  __pad<_CharT, _Traits>::_S_pad(__out, __out.fill(), __cs,\n \t\t\t\t\t\t __ws, __w, __len, false);\n \t\t  __str = __cs;\n@@ -653,7 +658,8 @@ namespace std\n \t  // 25. String operator<< uses width() value wrong\n \t  if (__w > __len)\n \t    {\n-\t      _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __w));\n+\t      _CharT* __cs = (static_cast<\n+\t\t\t      _CharT*>(__builtin_alloca(sizeof(_CharT) * __w)));\n \t      __pad<_CharT, _Traits>::_S_pad(__out, __out.fill(), __cs, __s,\n \t\t\t\t\t     __w, __len, false);\n \t      __s = __cs;"}, {"sha": "cee596e5b99ce3d88cf064198fb8be5b6e4d040f", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/char/11.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adf6cadbbfe23b96f8e53780ae5f1bc28f01077/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adf6cadbbfe23b96f8e53780ae5f1bc28f01077/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F11.cc?ref=3adf6cadbbfe23b96f8e53780ae5f1bc28f01077", "patch": "@@ -0,0 +1,79 @@\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.7.9 inserters and extractors\n+\n+#include <istream>\n+#include <string>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+string prepare(string::size_type len, unsigned nchunks)\n+{\n+  string ret;\n+  for (unsigned i = 0; i < nchunks; ++i)\n+    {\n+      for (string::size_type j = 0; j < len; ++j)\n+\tret.push_back('a' + rand() % 26);\n+      len *= 2;\n+      ret.push_back(' ');\n+    }\n+  return ret;\n+}\n+\n+void check(istream& stream, const string& str)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  string chunk;\n+  string::size_type index = 0, index_new = 0;\n+\n+  while (stream >> chunk)\n+    {\n+      index_new = str.find(' ', index);\n+      VERIFY( !str.compare(index, index_new - index, chunk) );\n+      index = index_new + 1;\n+    }\n+  VERIFY( stream.eof() );\n+}\n+\n+// istream& operator>>(istream&, string&)\n+void test01()\n+{\n+  const char filename[] = \"inserters_extractors-3.txt\";\n+\n+  const string data = prepare(666, 10);\n+\n+  ofstream ofstrm;\n+  ofstrm.open(filename);\n+  ofstrm.write(data.data(), data.size());\n+  ofstrm.close();\n+\n+  ifstream ifstrm;\n+  ifstrm.open(filename);\n+  check(ifstrm, data);\n+  ifstrm.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ac2e8c3a0e2c3beb6e5100c9f975b30b0915468e", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/wchar_t/11.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adf6cadbbfe23b96f8e53780ae5f1bc28f01077/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adf6cadbbfe23b96f8e53780ae5f1bc28f01077/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F11.cc?ref=3adf6cadbbfe23b96f8e53780ae5f1bc28f01077", "patch": "@@ -0,0 +1,79 @@\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.7.9 inserters and extractors\n+\n+#include <istream>\n+#include <string>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+wstring prepare(wstring::size_type len, unsigned nchunks)\n+{\n+  wstring ret;\n+  for (unsigned i = 0; i < nchunks; ++i)\n+    {\n+      for (wstring::size_type j = 0; j < len; ++j)\n+\tret.push_back(L'a' + rand() % 26);\n+      len *= 2;\n+      ret.push_back(L' ');\n+    }\n+  return ret;\n+}\n+\n+void check(wistream& stream, const wstring& str)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  wstring chunk;\n+  wstring::size_type index = 0, index_new = 0;\n+\n+  while (stream >> chunk)\n+    {\n+      index_new = str.find(L' ', index);\n+      VERIFY( !str.compare(index, index_new - index, chunk) );\n+      index = index_new + 1;\n+    }\n+  VERIFY( stream.eof() );\n+}\n+\n+// istream& operator>>(istream&, string&)\n+void test01()\n+{\n+  const char filename[] = \"inserters_extractors-3.txt\";\n+\n+  const wstring data = prepare(666, 10);\n+\n+  wofstream ofstrm;\n+  ofstrm.open(filename);\n+  ofstrm.write(data.data(), data.size());\n+  ofstrm.close();\n+\n+  wifstream ifstrm;\n+  ifstrm.open(filename);\n+  check(ifstrm, data);\n+  ifstrm.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}