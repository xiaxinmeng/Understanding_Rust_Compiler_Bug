{"sha": "ce2d32cd37c98b11b3f022695f9cfba0faf9151b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UyZDMyY2QzN2M5OGIxMWIzZjAyMjY5NWY5Y2ZiYTBmYWY5MTUxYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-10-28T20:42:29Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-10-28T20:42:29Z"}, "message": "builtins.c (get_memory_rtx): Handle POINTERS_EXTEND_UNSIGNED case.\n\n\t* builtins.c (get_memory_rtx): Handle POINTERS_EXTEND_UNSIGNED case.\n\t(expand_builtin_apply, expand_builtin_return): Likewise.\n\t(expand_builtin_va_arg, expand_builtin_va_copy): Likewise.\n\nFrom-SVN: r46598", "tree": {"sha": "ecb90e14f51eb8bdd8ee1e70a0d371c225c9e681", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecb90e14f51eb8bdd8ee1e70a0d371c225c9e681"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce2d32cd37c98b11b3f022695f9cfba0faf9151b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce2d32cd37c98b11b3f022695f9cfba0faf9151b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce2d32cd37c98b11b3f022695f9cfba0faf9151b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce2d32cd37c98b11b3f022695f9cfba0faf9151b/comments", "author": null, "committer": null, "parents": [{"sha": "ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff7cc30768b33d4124a232f7f19cd1bc0fd62b51"}], "stats": {"total": 44, "additions": 38, "deletions": 6}, "files": [{"sha": "e6d48285cafe2f37c2383ae34836cac3722ebba4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2d32cd37c98b11b3f022695f9cfba0faf9151b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2d32cd37c98b11b3f022695f9cfba0faf9151b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce2d32cd37c98b11b3f022695f9cfba0faf9151b", "patch": "@@ -1,3 +1,9 @@\n+Sun Oct 28 15:45:16 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* builtins.c (get_memory_rtx): Handle POINTERS_EXTEND_UNSIGNED case.\n+\t(expand_builtin_apply, expand_builtin_return): Likewise.\n+\t(expand_builtin_va_arg, expand_builtin_va_copy): Likewise.\n+\n 2001-10-28  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* ChangeLog.0, ChangeLog.1, ChangeLog.2, ChangeLog.3, ChangeLog.4,"}, {"sha": "28be3422f58677d0ea813d1253702a36819bae1f", "filename": "gcc/builtins.c", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2d32cd37c98b11b3f022695f9cfba0faf9151b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2d32cd37c98b11b3f022695f9cfba0faf9151b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=ce2d32cd37c98b11b3f022695f9cfba0faf9151b", "patch": "@@ -722,11 +722,15 @@ static rtx\n get_memory_rtx (exp)\n      tree exp;\n {\n-  rtx mem = gen_rtx_MEM (BLKmode,\n-\t\t\t memory_address (BLKmode,\n-\t\t\t\t\t expand_expr (exp, NULL_RTX,\n-\t\t\t\t\t\t      ptr_mode, EXPAND_SUM)));\n+  rtx addr = expand_expr (exp, NULL_RTX, ptr_mode, EXPAND_SUM);\n+  rtx mem;\n \n+#ifdef POINTERS_EXTEND_UNSIGNED\n+  if (GET_MODE (addr) != Pmode)\n+    addr = convert_memory_address (Pmode, addr);\n+#endif\n+\n+  mem = gen_rtx_MEM (BLKmode, memory_address (BLKmode, addr));\n   set_mem_attributes (mem, exp, 0);\n \n   /* Get an expression we can use to find the attributes to assign to MEM.\n@@ -1048,13 +1052,17 @@ expand_builtin_apply (function, arguments, argsize)\n   rtx old_stack_level = 0;\n   rtx call_fusage = 0;\n \n+#ifdef POINTERS_EXTEND_UNSIGNED\n+  if (GET_MODE (arguments) != Pmode)\n+    arguments = convert_memory_address (Pmode, arguments);\n+#endif\n+\n   /* Create a block where the return registers can be saved.  */\n   result = assign_stack_local (BLKmode, apply_result_size (), -1);\n \n   /* Fetch the arg pointer from the ARGUMENTS block.  */\n   incoming_args = gen_reg_rtx (Pmode);\n-  emit_move_insn (incoming_args,\n-\t\t  gen_rtx_MEM (Pmode, arguments));\n+  emit_move_insn (incoming_args, gen_rtx_MEM (Pmode, arguments));\n #ifndef STACK_GROWS_DOWNWARD\n   incoming_args = expand_simple_binop (Pmode, MINUS, incoming_args, argsize,\n \t\t\t\t       incoming_args, 0, OPTAB_LIB_WIDEN);\n@@ -1218,6 +1226,11 @@ expand_builtin_return (result)\n   rtx reg;\n   rtx call_fusage = 0;\n \n+#ifdef POINTERS_EXTEND_UNSIGNED\n+  if (GET_MODE (result) != Pmode)\n+    result = convert_memory_address (Pmode, result);\n+#endif\n+\n   apply_result_size ();\n   result = gen_rtx_MEM (BLKmode, result);\n \n@@ -2959,6 +2972,11 @@ expand_builtin_va_arg (valist, type)\n #endif\n     }\n \n+#ifdef POINTERS_EXTEND_UNSIGNED\n+  if (GET_MODE (addr) != Pmode)\n+    addr = convert_memory_address (Pmode, addr);\n+#endif\n+\n   result = gen_rtx_MEM (TYPE_MODE (type), addr);\n   set_mem_alias_set (result, get_varargs_alias_set ());\n \n@@ -3018,6 +3036,14 @@ expand_builtin_va_copy (arglist)\n       size = expand_expr (TYPE_SIZE_UNIT (va_list_type_node), NULL_RTX,\n \t\t\t  VOIDmode, EXPAND_NORMAL);\n \n+#ifdef POINTERS_EXTEND_UNSIGNED\n+      if (GET_MODE (dstb) != Pmode)\n+\tdstb = convert_memory_address (Pmode, dstb);\n+\n+      if (GET_MODE (srcb) != Pmode)\n+\tsrcb = convert_memory_address (Pmode, srcb);\n+#endif\n+\n       /* \"Dereference\" to BLKmode memories.  */\n       dstb = gen_rtx_MEM (BLKmode, dstb);\n       set_mem_alias_set (dstb, get_alias_set (TREE_TYPE (TREE_TYPE (dst))));"}]}