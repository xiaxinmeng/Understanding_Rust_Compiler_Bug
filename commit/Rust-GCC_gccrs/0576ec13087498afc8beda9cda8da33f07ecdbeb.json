{"sha": "0576ec13087498afc8beda9cda8da33f07ecdbeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU3NmVjMTMwODc0OThhZmM4YmVkYTljZGE4ZGEzM2YwN2VjZGJlYg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-04-26T08:34:06Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-04-26T08:34:06Z"}, "message": "mangle.c (write_chars): New macro.\n\ncp:\n\t* mangle.c (write_chars): New macro.\n\t(hwint_to_ascii): New function\n\t(write_number): Use it.\n\t(write_integer_cst): Deal with really big numbers.\ntestsuite:\n\t* g++.old-deja/g++.pt/mangle2.C: New test.\n\nFrom-SVN: r41584", "tree": {"sha": "57ec9557a296544a9c561271ab13d8230ec7a18b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57ec9557a296544a9c561271ab13d8230ec7a18b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0576ec13087498afc8beda9cda8da33f07ecdbeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0576ec13087498afc8beda9cda8da33f07ecdbeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0576ec13087498afc8beda9cda8da33f07ecdbeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0576ec13087498afc8beda9cda8da33f07ecdbeb/comments", "author": null, "committer": null, "parents": [{"sha": "cc6e9bc399d78744000d23307cbf09d3bf35ffff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc6e9bc399d78744000d23307cbf09d3bf35ffff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc6e9bc399d78744000d23307cbf09d3bf35ffff"}], "stats": {"total": 187, "additions": 158, "deletions": 29}, "files": [{"sha": "d6c2f48853c935300cadd556f1dbfd49e5e52bdd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0576ec13087498afc8beda9cda8da33f07ecdbeb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0576ec13087498afc8beda9cda8da33f07ecdbeb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0576ec13087498afc8beda9cda8da33f07ecdbeb", "patch": "@@ -1,3 +1,10 @@\n+2001-04-26  Nathan Sidwell <nathan@codesourcery.com>\n+\n+\t* mangle.c (write_chars): New macro.\n+\t(hwint_to_ascii): New function\n+\t(write_number): Use it.\n+\t(write_integer_cst): Deal with really big numbers.\n+\n 2001-04-25  Mark Mitchell  <mark@codesourcery.com>\n \n \t* optimize.c (maybe_clone_body): Copy TREE_PUBLIC before emitting"}, {"sha": "e193f0013758b47d06f5cc4728dda0084f2f30e3", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 107, "deletions": 29, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0576ec13087498afc8beda9cda8da33f07ecdbeb/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0576ec13087498afc8beda9cda8da33f07ecdbeb/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=0576ec13087498afc8beda9cda8da33f07ecdbeb", "patch": "@@ -153,6 +153,7 @@ static void write_prefix PARAMS ((tree));\n static void write_template_prefix PARAMS ((tree));\n static void write_unqualified_name PARAMS ((tree));\n static void write_source_name PARAMS ((tree));\n+static int hwint_to_ascii PARAMS ((unsigned HOST_WIDE_INT, unsigned int, char *, unsigned));\n static void write_number PARAMS ((unsigned HOST_WIDE_INT, int,\n \t\t\t\t  unsigned int));\n static void write_integer_cst PARAMS ((tree));\n@@ -198,6 +199,10 @@ static void write_java_integer_type_codes PARAMS ((tree));\n #define write_char(CHAR)                                              \\\n   obstack_1grow (&G.name_obstack, (CHAR))\n \n+/* Append a sized buffer to the end of the mangled representation. */\n+#define write_chars(CHAR, LEN)                                        \\\n+  obstack_grow (&G.name_obstack, (CHAR), (LEN))\n+\n /* Append a NUL-terminated string to the end of the mangled\n    representation.  */\n #define write_string(STRING)                                          \\\n@@ -1013,6 +1018,38 @@ write_source_name (identifier)\n   write_identifier (IDENTIFIER_POINTER (identifier));\n }\n \n+/* Convert NUMBER to ascii using base BASE and generating at least\n+   MIN_DIGITS characters. BUFFER points to the _end_ of the buffer\n+   into which to store the characters. Returns the number of\n+   characters generated (these will be layed out in advance of where\n+   BUFFER points).  */\n+\n+static int\n+hwint_to_ascii (number, base, buffer, min_digits)\n+     unsigned HOST_WIDE_INT number;\n+     unsigned int base;\n+     char *buffer;\n+     unsigned min_digits;\n+{\n+  static const char base_digits[] = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n+  unsigned digits = 0;\n+  \n+  while (number)\n+    {\n+      unsigned HOST_WIDE_INT d = number / base;\n+      \n+      *--buffer = base_digits[number - d * base];\n+      digits++;\n+      number = d;\n+    }\n+  while (digits < min_digits)\n+    {\n+      *--buffer = base_digits[0];\n+      digits++;\n+    }\n+  return digits;\n+}\n+\n /* Non-terminal <number>.\n \n      <number> ::= [n] </decimal integer/>  */\n@@ -1023,50 +1060,91 @@ write_number (number, unsigned_p, base)\n      int unsigned_p;\n      unsigned int base;\n {\n-  static const char digits[] = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n-  unsigned HOST_WIDE_INT n;\n-  unsigned HOST_WIDE_INT m = 1;\n+  char buffer[sizeof (HOST_WIDE_INT) * 8];\n+  unsigned count = 0;\n \n   if (!unsigned_p && (HOST_WIDE_INT) number < 0)\n     {\n       write_char ('n');\n       number = -((HOST_WIDE_INT) number);\n     }\n-  \n-  /* Figure out how many digits there are.  */\n-  n = number;\n-  while (n >= base)\n-    {\n-      n /= base;\n-      m *= base;\n-    }\n-\n-  /* Write them out.  */\n-  while (m > 0)\n-    {\n-      int digit = number / m;\n-      write_char (digits[digit]);\n-      number -= digit * m;\n-      m /= base;\n-    }\n-\n-  my_friendly_assert (number == 0, 20000407);\n+  count = hwint_to_ascii (number, base, buffer + sizeof (buffer), 1);\n+  write_chars (buffer + sizeof (buffer) - count, count);\n }\n \n-/* Write out an integeral CST in decimal.  */\n+/* Write out an integral CST in decimal. Most numbers are small, and\n+   representable in a HOST_WIDE_INT. Occasionally we'll have numbers\n+   bigger than that, which we must deal with. */\n \n static inline void\n write_integer_cst (cst)\n      tree cst;\n {\n-  if (tree_int_cst_sgn (cst) >= 0) \n+  int sign = tree_int_cst_sgn (cst);\n+\n+  if (TREE_INT_CST_HIGH (cst) + (sign < 0))\n     {\n-      if (TREE_INT_CST_HIGH (cst) != 0)\n-\tsorry (\"mangling very large integers\");\n-      write_unsigned_number (TREE_INT_CST_LOW (cst));\n+      /* A bignum. We do this in chunks, each of which fits in a\n+\t HOST_WIDE_INT. */\n+      char buffer[sizeof (HOST_WIDE_INT) * 8 * 2];\n+      unsigned HOST_WIDE_INT chunk;\n+      unsigned chunk_digits;\n+      char *ptr = buffer + sizeof (buffer);\n+      unsigned count = 0;\n+      tree n, base, type;\n+      int done;\n+\n+      /* HOST_WIDE_INT must be at least 32 bits, so 10^9 is\n+\t representable. */\n+      chunk = 1000000000;\n+      chunk_digits = 9;\n+      \n+      if (sizeof (HOST_WIDE_INT) >= 8)\n+\t{\n+\t  /* It is at least 64 bits, so 10^18 is representable. */\n+\t  chunk_digits = 18;\n+\t  chunk *= chunk;\n+\t}\n+      \n+      type = signed_or_unsigned_type (1, TREE_TYPE (cst));\n+      base = build_int_2 (chunk, 0);\n+      n = build_int_2 (TREE_INT_CST_LOW (cst), TREE_INT_CST_HIGH (cst));\n+      TREE_TYPE (n) = TREE_TYPE (base) = type;\n+\n+      if (sign < 0)\n+\t{\n+\t  write_char ('n');\n+\t  n = fold (build1 (NEGATE_EXPR, type, n));\n+\t}\n+      do\n+\t{\n+\t  tree d = fold (build (FLOOR_DIV_EXPR, type, n, base));\n+\t  tree tmp = fold (build (MULT_EXPR, type, d, base));\n+\t  unsigned c;\n+\t  \n+\t  done = integer_zerop (d);\n+\t  tmp = fold (build (MINUS_EXPR, type, n, tmp));\n+\t  c = hwint_to_ascii (TREE_INT_CST_LOW (tmp), 10, ptr,\n+\t\t\t\tdone ? 1 : chunk_digits);\n+\t  ptr -= c;\n+\t  count += c;\n+\t  n = d;\n+\t}\n+      while (!done);\n+      write_chars (ptr, count);\n+    }\n+  else \n+    {\n+      /* A small num.  */\n+      unsigned HOST_WIDE_INT low = TREE_INT_CST_LOW (cst);\n+      \n+      if (sign < 0)\n+\t{\n+\t  write_char ('n');\n+\t  low = -low;\n+\t}\n+      write_unsigned_number (low);\n     }\n-  else\n-    write_signed_number (tree_low_cst (cst, 0));\n }\n \n /* Non-terminal <identifier>."}, {"sha": "8025228b6f6486e5b8670c2b2b09431ede86d48a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0576ec13087498afc8beda9cda8da33f07ecdbeb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0576ec13087498afc8beda9cda8da33f07ecdbeb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0576ec13087498afc8beda9cda8da33f07ecdbeb", "patch": "@@ -1,3 +1,7 @@\n+2001-04-26  Nathan Sidwell <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.pt/mangle2.C: New test.\n+\n 2001-04-25  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-format.c (check_format_info_recurse): Handle"}, {"sha": "a7b95b1a4080b5607d61d006d332b8f107fc3c1f", "filename": "gcc/testsuite/g++.old-deja/g++.pt/mangle2.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0576ec13087498afc8beda9cda8da33f07ecdbeb/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmangle2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0576ec13087498afc8beda9cda8da33f07ecdbeb/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmangle2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmangle2.C?ref=0576ec13087498afc8beda9cda8da33f07ecdbeb", "patch": "@@ -0,0 +1,40 @@\n+// Build don't link:\n+// \n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 25 April 2001 <nathan@codesourcery.com>\n+// Origin:pcarlini@unitus.it\n+\n+// Bug 2559. We hadn't implemented code to mangle numbers bigger than\n+// HOST_WIDE_INT.\n+\n+template<class T, T min_val, T max_val>\n+class integer_traits_base\n+{\n+public:\n+static const bool is_integral = true;\n+};\n+\n+template<class T>\n+class integer_traits\n+{\n+public:\n+static const bool is_integral = false;\n+};\n+\n+template<>\n+class integer_traits<long long>\n+: public integer_traits_base<long long, (-9223372036854775807LL - 1),\n+9223372036854775807LL>\n+{ };\n+\n+integer_traits<long long> f;\n+\n+template <class T, T value> T foo () \n+{\n+  return value;\n+}\n+\n+void x ()\n+{\n+  foo<long long, -9223372036854775807LL> ();\n+}"}]}