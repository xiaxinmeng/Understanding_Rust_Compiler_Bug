{"sha": "e5cfd2f7706dc0748ed60d7f728fa8061204b9d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVjZmQyZjc3MDZkYzA3NDhlZDYwZDdmNzI4ZmE4MDYxMjA0YjlkNw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2006-02-15T09:38:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:38:53Z"}, "message": "exp_ch9.adb (Expand_N_Protected_Type_Declaration): When creating the components of the corresponding record...\n\n2006-02-13  Ed Schonberg  <schonberg@adacore.com>\n\t    Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch9.adb (Expand_N_Protected_Type_Declaration): When creating the\n\tcomponents of the corresponding record, take into account component\n\tdefinitions that are access definitions.\n\t(Expand_N_Asynchronous_Select): A delay unit statement rewritten as a\n\tprocedure is not considered a dispatching call and will be expanded\n\tproperly.\n\nFrom-SVN: r111063", "tree": {"sha": "bc25580ab347061e17967a10ba4452e7845ddccb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc25580ab347061e17967a10ba4452e7845ddccb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5cfd2f7706dc0748ed60d7f728fa8061204b9d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5cfd2f7706dc0748ed60d7f728fa8061204b9d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5cfd2f7706dc0748ed60d7f728fa8061204b9d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5cfd2f7706dc0748ed60d7f728fa8061204b9d7/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c8ef728f432bcc51464d574189ef68f515ea3ef7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8ef728f432bcc51464d574189ef68f515ea3ef7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8ef728f432bcc51464d574189ef68f515ea3ef7"}], "stats": {"total": 76, "additions": 49, "deletions": 27}, "files": [{"sha": "bc673d7f4c84d82a35ae54d48642b911ca5702ec", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 49, "deletions": 27, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cfd2f7706dc0748ed60d7f728fa8061204b9d7/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cfd2f7706dc0748ed60d7f728fa8061204b9d7/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=e5cfd2f7706dc0748ed60d7f728fa8061204b9d7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -113,9 +113,9 @@ package body Exp_Ch9 is\n    --  select statements. Astat is the accept statement.\n \n    function Build_Barrier_Function\n-     (N    : Node_Id;\n-      Ent  : Entity_Id;\n-      Pid  : Node_Id) return Node_Id;\n+     (N   : Node_Id;\n+      Ent : Entity_Id;\n+      Pid : Node_Id) return Node_Id;\n    --  Build the function body returning the value of the barrier expression\n    --  for the specified entry body.\n \n@@ -902,9 +902,9 @@ package body Exp_Ch9 is\n    ----------------------------\n \n    function Build_Barrier_Function\n-     (N    : Node_Id;\n-      Ent  : Entity_Id;\n-      Pid  : Node_Id) return Node_Id\n+     (N   : Node_Id;\n+      Ent : Entity_Id;\n+      Pid : Node_Id) return Node_Id\n    is\n       Loc         : constant Source_Ptr := Sloc (N);\n       Ent_Formals : constant Node_Id    := Entry_Body_Formal_Part (N);\n@@ -1580,7 +1580,7 @@ package body Exp_Ch9 is\n \n       --  Return if no interface primitive can be overriden\n \n-      if not Present (First_Param) then\n+      if No (First_Param) then\n          return Empty;\n       end if;\n \n@@ -3815,7 +3815,7 @@ package body Exp_Ch9 is\n          --  allowed to modify queue orders for a given priority at will!\n \n          if Opt.Task_Dispatching_Policy = 'F' and then\n-           not Present (Handled_Statement_Sequence (N))\n+           No (Handled_Statement_Sequence (N))\n          then\n             Set_Handled_Statement_Sequence (N,\n               Make_Handled_Sequence_Of_Statements (Loc,\n@@ -4858,9 +4858,11 @@ package body Exp_Ch9 is\n       if Nkind (Ecall) = N_Procedure_Call_Statement then\n          if Ada_Version >= Ada_05\n            and then\n-             (not Present (Original_Node (Ecall))\n+             (No (Original_Node (Ecall))\n                 or else\n-              Nkind (Original_Node (Ecall)) /= N_Delay_Relative_Statement)\n+                  (Nkind (Original_Node (Ecall)) /= N_Delay_Relative_Statement\n+                     and then\n+                   Nkind (Original_Node (Ecall)) /= N_Delay_Until_Statement))\n          then\n             Extract_Dispatching_Call (Ecall, Call_Ent, Obj, Actuals, Formals);\n \n@@ -6818,7 +6820,6 @@ package body Exp_Ch9 is\n       Cdecls       : List_Id;\n       Discr_Map    : constant Elist_Id := New_Elmt_List;\n       Priv         : Node_Id;\n-      Pent         : Entity_Id;\n       New_Priv     : Node_Id;\n       Comp         : Node_Id;\n       Comp_Id      : Entity_Id;\n@@ -7024,21 +7025,42 @@ package body Exp_Ch9 is\n          while Present (Priv) loop\n \n             if Nkind (Priv) = N_Component_Declaration then\n-               Pent := Defining_Identifier (Priv);\n-               New_Priv :=\n-                 Make_Component_Declaration (Loc,\n-                   Defining_Identifier =>\n-                     Make_Defining_Identifier (Sloc (Pent), Chars (Pent)),\n-                   Component_Definition =>\n-                     Make_Component_Definition (Sloc (Pent),\n-                       Aliased_Present    => False,\n-                       Subtype_Indication =>\n-                         New_Copy_Tree (Subtype_Indication\n-                                         (Component_Definition (Priv)),\n-                                        Discr_Map)),\n-                   Expression => Expression (Priv));\n \n-               Append_To (Cdecls, New_Priv);\n+               --  The component definition consists of a subtype indication,\n+               --  or (in Ada 2005) an access definition. Make a copy of the\n+               --  proper definition.\n+\n+               declare\n+                  Old_Comp : constant Node_Id   := Component_Definition (Priv);\n+                  Pent     : constant Entity_Id := Defining_Identifier (Priv);\n+                  New_Comp : Node_Id;\n+\n+               begin\n+                  if Present (Subtype_Indication (Old_Comp)) then\n+                     New_Comp :=\n+                       Make_Component_Definition (Sloc (Pent),\n+                         Aliased_Present    => False,\n+                         Subtype_Indication =>\n+                           New_Copy_Tree (Subtype_Indication (Old_Comp),\n+                                           Discr_Map));\n+                  else\n+                     New_Comp :=\n+                       Make_Component_Definition (Sloc (Pent),\n+                         Aliased_Present    => False,\n+                         Access_Definition  =>\n+                           New_Copy_Tree (Access_Definition (Old_Comp),\n+                                           Discr_Map));\n+                  end if;\n+\n+                  New_Priv :=\n+                    Make_Component_Declaration (Loc,\n+                      Defining_Identifier =>\n+                        Make_Defining_Identifier (Sloc (Pent), Chars (Pent)),\n+                      Component_Definition => New_Comp,\n+                      Expression => Expression (Priv));\n+\n+                  Append_To (Cdecls, New_Priv);\n+               end;\n \n             elsif Nkind (Priv) = N_Subprogram_Declaration then\n \n@@ -7131,7 +7153,7 @@ package body Exp_Ch9 is\n                Wrap_Spec := Empty;\n \n                if Nkind (Vis_Decl) = N_Entry_Declaration\n-                 and then not Present (Discrete_Subtype_Definition (Vis_Decl))\n+                 and then No (Discrete_Subtype_Definition (Vis_Decl))\n                then\n                   Wrap_Spec :=\n                     Build_Wrapper_Spec (Loc,"}]}