{"sha": "96127a4100e8a62c3dc009b5f06199bf24275bf3", "node_id": "C_kwDOANBUbNoAKDk2MTI3YTQxMDBlOGE2MmMzZGMwMDliNWYwNjE5OWJmMjQyNzViZjM", "commit": {"author": {"name": "Florian Weimer", "email": "fweimer@redhat.com", "date": "2023-01-03T15:47:31Z"}, "committer": {"name": "Florian Weimer", "email": "fweimer@redhat.com", "date": "2023-01-03T15:47:31Z"}, "message": "Revert \"libgcc: Specialize execute_cfa_program in DWARF unwinder for alignments\"\n\nThis reverts commit cb775ecd6e437de8fdba9a3f173f3787e90e98f2.", "tree": {"sha": "e563a3c0fc42c117e1b52e59d6fd9a20c269e7e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e563a3c0fc42c117e1b52e59d6fd9a20c269e7e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96127a4100e8a62c3dc009b5f06199bf24275bf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96127a4100e8a62c3dc009b5f06199bf24275bf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96127a4100e8a62c3dc009b5f06199bf24275bf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96127a4100e8a62c3dc009b5f06199bf24275bf3/comments", "author": {"login": "fweimer-rh", "id": 75532728, "node_id": "MDQ6VXNlcjc1NTMyNzI4", "avatar_url": "https://avatars.githubusercontent.com/u/75532728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fweimer-rh", "html_url": "https://github.com/fweimer-rh", "followers_url": "https://api.github.com/users/fweimer-rh/followers", "following_url": "https://api.github.com/users/fweimer-rh/following{/other_user}", "gists_url": "https://api.github.com/users/fweimer-rh/gists{/gist_id}", "starred_url": "https://api.github.com/users/fweimer-rh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fweimer-rh/subscriptions", "organizations_url": "https://api.github.com/users/fweimer-rh/orgs", "repos_url": "https://api.github.com/users/fweimer-rh/repos", "events_url": "https://api.github.com/users/fweimer-rh/events{/privacy}", "received_events_url": "https://api.github.com/users/fweimer-rh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fweimer-rh", "id": 75532728, "node_id": "MDQ6VXNlcjc1NTMyNzI4", "avatar_url": "https://avatars.githubusercontent.com/u/75532728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fweimer-rh", "html_url": "https://github.com/fweimer-rh", "followers_url": "https://api.github.com/users/fweimer-rh/followers", "following_url": "https://api.github.com/users/fweimer-rh/following{/other_user}", "gists_url": "https://api.github.com/users/fweimer-rh/gists{/gist_id}", "starred_url": "https://api.github.com/users/fweimer-rh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fweimer-rh/subscriptions", "organizations_url": "https://api.github.com/users/fweimer-rh/orgs", "repos_url": "https://api.github.com/users/fweimer-rh/repos", "events_url": "https://api.github.com/users/fweimer-rh/events{/privacy}", "received_events_url": "https://api.github.com/users/fweimer-rh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3009222b7bb26654c1e93d34e65e8f80ae20595", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3009222b7bb26654c1e93d34e65e8f80ae20595", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3009222b7bb26654c1e93d34e65e8f80ae20595"}], "stats": {"total": 643, "additions": 289, "deletions": 354}, "files": [{"sha": "011478c88dad3b2a083f2e5491c323a78b521e15", "filename": "gcc/c-family/c-cppbuiltin.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96127a4100e8a62c3dc009b5f06199bf24275bf3/gcc%2Fc-family%2Fc-cppbuiltin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96127a4100e8a62c3dc009b5f06199bf24275bf3/gcc%2Fc-family%2Fc-cppbuiltin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.cc?ref=96127a4100e8a62c3dc009b5f06199bf24275bf3", "patch": "@@ -1527,8 +1527,6 @@ c_cpp_builtins (cpp_reader *pfile)\n \t  builtin_define_with_int_value (\"__LIBGCC_DWARF_REG_SIZES_CONSTANT__\",\n \t\t\t\t\t value);\n       }\n-      builtin_define_with_int_value (\"__LIBGCC_DWARF_CIE_DATA_ALIGNMENT__\",\n-\t\t\t\t     DWARF_CIE_DATA_ALIGNMENT);\n #ifdef EH_RETURN_STACKADJ_RTX\n       cpp_define (pfile, \"__LIBGCC_EH_RETURN_STACKADJ_RTX__\");\n #endif"}, {"sha": "dd97b7866686a361b255b9dd1afaa95bbb0c6af5", "filename": "libgcc/unwind-dw2-execute_cfa.h", "status": "removed", "additions": 0, "deletions": 322, "changes": 322, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3009222b7bb26654c1e93d34e65e8f80ae20595/libgcc%2Funwind-dw2-execute_cfa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3009222b7bb26654c1e93d34e65e8f80ae20595/libgcc%2Funwind-dw2-execute_cfa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2-execute_cfa.h?ref=b3009222b7bb26654c1e93d34e65e8f80ae20595", "patch": "@@ -1,322 +0,0 @@\n-/* DWARF2 exception handling CFA execution engine.\n-   Copyright (C) 1997-2022 Free Software Foundation, Inc.\n-\n-   This file is part of GCC.\n-\n-   GCC is free software; you can redistribute it and/or modify it\n-   under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3, or (at your option)\n-   any later version.\n-\n-   GCC is distributed in the hope that it will be useful, but WITHOUT\n-   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n-   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n-   License for more details.\n-\n-   Under Section 7 of GPL version 3, you are granted additional\n-   permissions described in the GCC Runtime Library Exception, version\n-   3.1, as published by the Free Software Foundation.\n-\n-   You should have received a copy of the GNU General Public License and\n-   a copy of the GCC Runtime Library Exception along with this program;\n-   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-   <http://www.gnu.org/licenses/>.  */\n-\n-/* This file is included from unwind-dw2.c to specialize the code for certain\n-   values of DATA_ALIGN and CODE_ALIGN.  These macros must be defined prior to\n-   including this file.  */\n-\n-{\n-  struct frame_state_reg_info *unused_rs = NULL;\n-\n-  /* Don't allow remember/restore between CIE and FDE programs.  */\n-  fs->regs.prev = NULL;\n-\n-  /* The comparison with the return address uses < rather than <= because\n-     we are only interested in the effects of code before the call; for a\n-     noreturn function, the return address may point to unrelated code with\n-     a different stack configuration that we are not interested in.  We\n-     assume that the call itself is unwind info-neutral; if not, or if\n-     there are delay instructions that adjust the stack, these must be\n-     reflected at the point immediately before the call insn.\n-     In signal frames, return address is after last completed instruction,\n-     so we add 1 to return address to make the comparison <=.  */\n-  while (insn_ptr < insn_end\n-\t && fs->pc < context->ra + _Unwind_IsSignalFrame (context))\n-    {\n-      unsigned char insn = *insn_ptr++;\n-      _uleb128_t reg, utmp;\n-      _sleb128_t offset, stmp;\n-\n-      if ((insn & 0xc0) == DW_CFA_advance_loc)\n-\tfs->pc += (insn & 0x3f) * CODE_ALIGN;\n-      else if ((insn & 0xc0) == DW_CFA_offset)\n-\t{\n-\t  reg = insn & 0x3f;\n-\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n-\t  offset = (_Unwind_Sword) utmp * DATA_ALIGN;\n-\t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n-\t  if (UNWIND_COLUMN_IN_RANGE (reg))\n-\t    {\n-\t      fs->regs.how[reg] = REG_SAVED_OFFSET;\n-\t      fs->regs.reg[reg].loc.offset = offset;\n-\t    }\n-\t}\n-      else if ((insn & 0xc0) == DW_CFA_restore)\n-\t{\n-\t  reg = insn & 0x3f;\n-\t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n-\t  if (UNWIND_COLUMN_IN_RANGE (reg))\n-\t    fs->regs.how[reg] = REG_UNSAVED;\n-\t}\n-      else switch (insn)\n-\t{\n-\tcase DW_CFA_set_loc:\n-\t  {\n-\t    _Unwind_Ptr pc;\n-\n-\t    insn_ptr = read_encoded_value (context, fs->fde_encoding,\n-\t\t\t\t\t   insn_ptr, &pc);\n-\t    fs->pc = (void *) pc;\n-\t  }\n-\t  break;\n-\n-\tcase DW_CFA_advance_loc1:\n-\t  fs->pc += read_1u (insn_ptr) * CODE_ALIGN;\n-\t  insn_ptr += 1;\n-\t  break;\n-\tcase DW_CFA_advance_loc2:\n-\t  fs->pc += read_2u (insn_ptr) * CODE_ALIGN;\n-\t  insn_ptr += 2;\n-\t  break;\n-\tcase DW_CFA_advance_loc4:\n-\t  fs->pc += read_4u (insn_ptr) * CODE_ALIGN;\n-\t  insn_ptr += 4;\n-\t  break;\n-\n-\tcase DW_CFA_offset_extended:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n-\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n-\t  offset = (_Unwind_Sword) utmp * DATA_ALIGN;\n-\t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n-\t  if (UNWIND_COLUMN_IN_RANGE (reg))\n-\t    {\n-\t      fs->regs.how[reg] = REG_SAVED_OFFSET;\n-\t      fs->regs.reg[reg].loc.offset = offset;\n-\t    }\n-\t  break;\n-\n-\tcase DW_CFA_restore_extended:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n-\t  /* FIXME, this is wrong; the CIE might have said that the\n-\t     register was saved somewhere.  */\n-\t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n-\t  if (UNWIND_COLUMN_IN_RANGE (reg))\n-\t    fs->regs.how[reg] = REG_UNSAVED;\n-\t  break;\n-\n-\tcase DW_CFA_same_value:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n-\t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n-\t  if (UNWIND_COLUMN_IN_RANGE (reg))\n-\t    fs->regs.how[reg] = REG_UNSAVED;\n-\t  break;\n-\n-\tcase DW_CFA_undefined:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n-\t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n-\t  if (UNWIND_COLUMN_IN_RANGE (reg))\n-\t    fs->regs.how[reg] = REG_UNDEFINED;\n-\t  break;\n-\n-\tcase DW_CFA_nop:\n-\t  break;\n-\n-\tcase DW_CFA_register:\n-\t  {\n-\t    _uleb128_t reg2;\n-\t    insn_ptr = read_uleb128 (insn_ptr, &reg);\n-\t    insn_ptr = read_uleb128 (insn_ptr, &reg2);\n-\t    reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n-\t    if (UNWIND_COLUMN_IN_RANGE (reg))\n-\t      {\n-\t\tfs->regs.how[reg] = REG_SAVED_REG;\n-\t        fs->regs.reg[reg].loc.reg = (_Unwind_Word)reg2;\n-\t      }\n-\t  }\n-\t  break;\n-\n-\tcase DW_CFA_remember_state:\n-\t  {\n-\t    struct frame_state_reg_info *new_rs;\n-\t    if (unused_rs)\n-\t      {\n-\t\tnew_rs = unused_rs;\n-\t\tunused_rs = unused_rs->prev;\n-\t      }\n-\t    else\n-\t      new_rs = alloca (sizeof (struct frame_state_reg_info));\n-\n-\t    *new_rs = fs->regs;\n-\t    fs->regs.prev = new_rs;\n-\t  }\n-\t  break;\n-\n-\tcase DW_CFA_restore_state:\n-\t  {\n-\t    struct frame_state_reg_info *old_rs = fs->regs.prev;\n-\t    fs->regs = *old_rs;\n-\t    old_rs->prev = unused_rs;\n-\t    unused_rs = old_rs;\n-\t  }\n-\t  break;\n-\n-\tcase DW_CFA_def_cfa:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n-\t  fs->regs.cfa_reg = (_Unwind_Word)utmp;\n-\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n-\t  fs->regs.cfa_offset = (_Unwind_Word)utmp;\n-\t  fs->regs.cfa_how = CFA_REG_OFFSET;\n-\t  break;\n-\n-\tcase DW_CFA_def_cfa_register:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n-\t  fs->regs.cfa_reg = (_Unwind_Word)utmp;\n-\t  fs->regs.cfa_how = CFA_REG_OFFSET;\n-\t  break;\n-\n-\tcase DW_CFA_def_cfa_offset:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n-\t  fs->regs.cfa_offset = utmp;\n-\t  /* cfa_how deliberately not set.  */\n-\t  break;\n-\n-\tcase DW_CFA_def_cfa_expression:\n-\t  fs->regs.cfa_exp = insn_ptr;\n-\t  fs->regs.cfa_how = CFA_EXP;\n-\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n-\t  insn_ptr += utmp;\n-\t  break;\n-\n-\tcase DW_CFA_expression:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n-\t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n-\t  if (UNWIND_COLUMN_IN_RANGE (reg))\n-\t    {\n-\t      fs->regs.how[reg] = REG_SAVED_EXP;\n-\t      fs->regs.reg[reg].loc.exp = insn_ptr;\n-\t    }\n-\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n-\t  insn_ptr += utmp;\n-\t  break;\n-\n-\t  /* Dwarf3.  */\n-\tcase DW_CFA_offset_extended_sf:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n-\t  insn_ptr = read_sleb128 (insn_ptr, &stmp);\n-\t  offset = stmp * DATA_ALIGN;\n-\t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n-\t  if (UNWIND_COLUMN_IN_RANGE (reg))\n-\t    {\n-\t      fs->regs.how[reg] = REG_SAVED_OFFSET;\n-\t      fs->regs.reg[reg].loc.offset = offset;\n-\t    }\n-\t  break;\n-\n-\tcase DW_CFA_def_cfa_sf:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n-\t  fs->regs.cfa_reg = (_Unwind_Word)utmp;\n-\t  insn_ptr = read_sleb128 (insn_ptr, &stmp);\n-\t  fs->regs.cfa_offset = (_Unwind_Sword)stmp;\n-\t  fs->regs.cfa_how = CFA_REG_OFFSET;\n-\t  fs->regs.cfa_offset *= DATA_ALIGN;\n-\t  break;\n-\n-\tcase DW_CFA_def_cfa_offset_sf:\n-\t  insn_ptr = read_sleb128 (insn_ptr, &stmp);\n-\t  fs->regs.cfa_offset = (_Unwind_Sword)stmp;\n-\t  fs->regs.cfa_offset *= DATA_ALIGN;\n-\t  /* cfa_how deliberately not set.  */\n-\t  break;\n-\n-\tcase DW_CFA_val_offset:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n-\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n-\t  offset = (_Unwind_Sword) utmp * DATA_ALIGN;\n-\t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n-\t  if (UNWIND_COLUMN_IN_RANGE (reg))\n-\t    {\n-\t      fs->regs.how[reg] = REG_SAVED_VAL_OFFSET;\n-\t      fs->regs.reg[reg].loc.offset = offset;\n-\t    }\n-\t  break;\n-\n-\tcase DW_CFA_val_offset_sf:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n-\t  insn_ptr = read_sleb128 (insn_ptr, &stmp);\n-\t  offset = stmp * DATA_ALIGN;\n-\t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n-\t  if (UNWIND_COLUMN_IN_RANGE (reg))\n-\t    {\n-\t      fs->regs.how[reg] = REG_SAVED_VAL_OFFSET;\n-\t      fs->regs.reg[reg].loc.offset = offset;\n-\t    }\n-\t  break;\n-\n-\tcase DW_CFA_val_expression:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n-\t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n-\t  if (UNWIND_COLUMN_IN_RANGE (reg))\n-\t    {\n-\t      fs->regs.how[reg] = REG_SAVED_VAL_EXP;\n-\t      fs->regs.reg[reg].loc.exp = insn_ptr;\n-\t    }\n-\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n-\t  insn_ptr += utmp;\n-\t  break;\n-\n-\tcase DW_CFA_GNU_window_save:\n-#if defined (__aarch64__) && !defined (__ILP32__)\n-\t  /* This CFA is multiplexed with Sparc.  On AArch64 it's used to toggle\n-\t     return address signing status.  */\n-\t  reg = DWARF_REGNUM_AARCH64_RA_STATE;\n-\t  gcc_assert (fs->regs.how[reg] == REG_UNSAVED);\n-\t  fs->regs.reg[reg].loc.offset ^= 1;\n-#else\n-\t  /* ??? Hardcoded for SPARC register window configuration.  */\n-\t  if (__LIBGCC_DWARF_FRAME_REGISTERS__ >= 32)\n-\t    for (reg = 16; reg < 32; ++reg)\n-\t      {\n-\t\tfs->regs.how[reg] = REG_SAVED_OFFSET;\n-\t\tfs->regs.reg[reg].loc.offset = (reg - 16) * sizeof (void *);\n-\t      }\n-#endif\n-\t  break;\n-\n-\tcase DW_CFA_GNU_args_size:\n-\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n-\t  context->args_size = (_Unwind_Word)utmp;\n-\t  break;\n-\n-\tcase DW_CFA_GNU_negative_offset_extended:\n-\t  /* Obsoleted by DW_CFA_offset_extended_sf, but used by\n-\t     older PowerPC code.  */\n-\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n-\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n-\t  offset = (_Unwind_Word) utmp * DATA_ALIGN;\n-\t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n-\t  if (UNWIND_COLUMN_IN_RANGE (reg))\n-\t    {\n-\t      fs->regs.how[reg] = REG_SAVED_OFFSET;\n-\t      fs->regs.reg[reg].loc.offset = -offset;\n-\t    }\n-\t  break;\n-\n-\tdefault:\n-\t  gcc_unreachable ();\n-\t}\n-    }\n-}\n-\n-#undef DATA_ALIGN\n-#undef CODE_ALIGN"}, {"sha": "c370121bb2945e0f05dfff03cd3f9fdb765e84c4", "filename": "libgcc/unwind-dw2.c", "status": "modified", "additions": 289, "deletions": 30, "changes": 319, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96127a4100e8a62c3dc009b5f06199bf24275bf3/libgcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96127a4100e8a62c3dc009b5f06199bf24275bf3/libgcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2.c?ref=96127a4100e8a62c3dc009b5f06199bf24275bf3", "patch": "@@ -960,43 +960,302 @@ execute_stack_op (const unsigned char *op_ptr, const unsigned char *op_end,\n    instruction sequence to decode, current register information and\n    CIE info, and the PC range to evaluate.  */\n \n-static void  __attribute__ ((__noinline__))\n-execute_cfa_program_generic (const unsigned char *insn_ptr,\n-\t\t\t     const unsigned char *insn_end,\n-\t\t\t     struct _Unwind_Context *context,\n-\t\t\t     _Unwind_FrameState *fs)\n-{\n-#define DATA_ALIGN fs->data_align\n-#define CODE_ALIGN fs->code_align\n-#include \"unwind-dw2-execute_cfa.h\"\n-}\n-\n-static inline void\n-execute_cfa_program_specialized (const unsigned char *insn_ptr,\n-\t\t\t\t const unsigned char *insn_end,\n-\t\t\t\t struct _Unwind_Context *context,\n-\t\t\t\t _Unwind_FrameState *fs)\n-{\n-#define DATA_ALIGN __LIBGCC_DWARF_CIE_DATA_ALIGNMENT__\n-  /* GCC always uses 1 even on architectures with a fixed instruction\n-     width.  */\n-#define CODE_ALIGN 1\n-#include \"unwind-dw2-execute_cfa.h\"\n-}\n-\n static void\n execute_cfa_program (const unsigned char *insn_ptr,\n \t\t     const unsigned char *insn_end,\n \t\t     struct _Unwind_Context *context,\n \t\t     _Unwind_FrameState *fs)\n {\n-  if (fs->data_align == __LIBGCC_DWARF_CIE_DATA_ALIGNMENT__\n-      && fs->code_align == 1)\n-    execute_cfa_program_specialized (insn_ptr, insn_end, context, fs);\n-  else\n-    execute_cfa_program_generic (insn_ptr, insn_end, context, fs);\n-}\n+  struct frame_state_reg_info *unused_rs = NULL;\n+\n+  /* Don't allow remember/restore between CIE and FDE programs.  */\n+  fs->regs.prev = NULL;\n+\n+  /* The comparison with the return address uses < rather than <= because\n+     we are only interested in the effects of code before the call; for a\n+     noreturn function, the return address may point to unrelated code with\n+     a different stack configuration that we are not interested in.  We\n+     assume that the call itself is unwind info-neutral; if not, or if\n+     there are delay instructions that adjust the stack, these must be\n+     reflected at the point immediately before the call insn.\n+     In signal frames, return address is after last completed instruction,\n+     so we add 1 to return address to make the comparison <=.  */\n+  while (insn_ptr < insn_end\n+\t && fs->pc < context->ra + _Unwind_IsSignalFrame (context))\n+    {\n+      unsigned char insn = *insn_ptr++;\n+      _uleb128_t reg, utmp;\n+      _sleb128_t offset, stmp;\n+\n+      if ((insn & 0xc0) == DW_CFA_advance_loc)\n+\tfs->pc += (insn & 0x3f) * fs->code_align;\n+      else if ((insn & 0xc0) == DW_CFA_offset)\n+\t{\n+\t  reg = insn & 0x3f;\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n+\t  offset = (_Unwind_Sword) utmp * fs->data_align;\n+\t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n+\t  if (UNWIND_COLUMN_IN_RANGE (reg))\n+\t    {\n+\t      fs->regs.how[reg] = REG_SAVED_OFFSET;\n+\t      fs->regs.reg[reg].loc.offset = offset;\n+\t    }\n+\t}\n+      else if ((insn & 0xc0) == DW_CFA_restore)\n+\t{\n+\t  reg = insn & 0x3f;\n+\t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n+\t  if (UNWIND_COLUMN_IN_RANGE (reg))\n+\t    fs->regs.how[reg] = REG_UNSAVED;\n+\t}\n+      else switch (insn)\n+\t{\n+\tcase DW_CFA_set_loc:\n+\t  {\n+\t    _Unwind_Ptr pc;\n+\n+\t    insn_ptr = read_encoded_value (context, fs->fde_encoding,\n+\t\t\t\t\t   insn_ptr, &pc);\n+\t    fs->pc = (void *) pc;\n+\t  }\n+\t  break;\n+\n+\tcase DW_CFA_advance_loc1:\n+\t  fs->pc += read_1u (insn_ptr) * fs->code_align;\n+\t  insn_ptr += 1;\n+\t  break;\n+\tcase DW_CFA_advance_loc2:\n+\t  fs->pc += read_2u (insn_ptr) * fs->code_align;\n+\t  insn_ptr += 2;\n+\t  break;\n+\tcase DW_CFA_advance_loc4:\n+\t  fs->pc += read_4u (insn_ptr) * fs->code_align;\n+\t  insn_ptr += 4;\n+\t  break;\n+\n+\tcase DW_CFA_offset_extended:\n+\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n+\t  offset = (_Unwind_Sword) utmp * fs->data_align;\n+\t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n+\t  if (UNWIND_COLUMN_IN_RANGE (reg))\n+\t    {\n+\t      fs->regs.how[reg] = REG_SAVED_OFFSET;\n+\t      fs->regs.reg[reg].loc.offset = offset;\n+\t    }\n+\t  break;\n+\n+\tcase DW_CFA_restore_extended:\n+\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n+\t  /* FIXME, this is wrong; the CIE might have said that the\n+\t     register was saved somewhere.  */\n+\t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n+\t  if (UNWIND_COLUMN_IN_RANGE (reg))\n+\t    fs->regs.how[reg] = REG_UNSAVED;\n+\t  break;\n+\n+\tcase DW_CFA_same_value:\n+\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n+\t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n+\t  if (UNWIND_COLUMN_IN_RANGE (reg))\n+\t    fs->regs.how[reg] = REG_UNSAVED;\n+\t  break;\n+\n+\tcase DW_CFA_undefined:\n+\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n+\t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n+\t  if (UNWIND_COLUMN_IN_RANGE (reg))\n+\t    fs->regs.how[reg] = REG_UNDEFINED;\n+\t  break;\n+\n+\tcase DW_CFA_nop:\n+\t  break;\n+\n+\tcase DW_CFA_register:\n+\t  {\n+\t    _uleb128_t reg2;\n+\t    insn_ptr = read_uleb128 (insn_ptr, &reg);\n+\t    insn_ptr = read_uleb128 (insn_ptr, &reg2);\n+\t    reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n+\t    if (UNWIND_COLUMN_IN_RANGE (reg))\n+\t      {\n+\t\tfs->regs.how[reg] = REG_SAVED_REG;\n+\t        fs->regs.reg[reg].loc.reg = (_Unwind_Word)reg2;\n+\t      }\n+\t  }\n+\t  break;\n+\n+\tcase DW_CFA_remember_state:\n+\t  {\n+\t    struct frame_state_reg_info *new_rs;\n+\t    if (unused_rs)\n+\t      {\n+\t\tnew_rs = unused_rs;\n+\t\tunused_rs = unused_rs->prev;\n+\t      }\n+\t    else\n+\t      new_rs = alloca (sizeof (struct frame_state_reg_info));\n+\n+\t    *new_rs = fs->regs;\n+\t    fs->regs.prev = new_rs;\n+\t  }\n+\t  break;\n \n+\tcase DW_CFA_restore_state:\n+\t  {\n+\t    struct frame_state_reg_info *old_rs = fs->regs.prev;\n+\t    fs->regs = *old_rs;\n+\t    old_rs->prev = unused_rs;\n+\t    unused_rs = old_rs;\n+\t  }\n+\t  break;\n+\n+\tcase DW_CFA_def_cfa:\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n+\t  fs->regs.cfa_reg = (_Unwind_Word)utmp;\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n+\t  fs->regs.cfa_offset = (_Unwind_Word)utmp;\n+\t  fs->regs.cfa_how = CFA_REG_OFFSET;\n+\t  break;\n+\n+\tcase DW_CFA_def_cfa_register:\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n+\t  fs->regs.cfa_reg = (_Unwind_Word)utmp;\n+\t  fs->regs.cfa_how = CFA_REG_OFFSET;\n+\t  break;\n+\n+\tcase DW_CFA_def_cfa_offset:\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n+\t  fs->regs.cfa_offset = utmp;\n+\t  /* cfa_how deliberately not set.  */\n+\t  break;\n+\n+\tcase DW_CFA_def_cfa_expression:\n+\t  fs->regs.cfa_exp = insn_ptr;\n+\t  fs->regs.cfa_how = CFA_EXP;\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n+\t  insn_ptr += utmp;\n+\t  break;\n+\n+\tcase DW_CFA_expression:\n+\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n+\t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n+\t  if (UNWIND_COLUMN_IN_RANGE (reg))\n+\t    {\n+\t      fs->regs.how[reg] = REG_SAVED_EXP;\n+\t      fs->regs.reg[reg].loc.exp = insn_ptr;\n+\t    }\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n+\t  insn_ptr += utmp;\n+\t  break;\n+\n+\t  /* Dwarf3.  */\n+\tcase DW_CFA_offset_extended_sf:\n+\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n+\t  insn_ptr = read_sleb128 (insn_ptr, &stmp);\n+\t  offset = stmp * fs->data_align;\n+\t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n+\t  if (UNWIND_COLUMN_IN_RANGE (reg))\n+\t    {\n+\t      fs->regs.how[reg] = REG_SAVED_OFFSET;\n+\t      fs->regs.reg[reg].loc.offset = offset;\n+\t    }\n+\t  break;\n+\n+\tcase DW_CFA_def_cfa_sf:\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n+\t  fs->regs.cfa_reg = (_Unwind_Word)utmp;\n+\t  insn_ptr = read_sleb128 (insn_ptr, &stmp);\n+\t  fs->regs.cfa_offset = (_Unwind_Sword)stmp;\n+\t  fs->regs.cfa_how = CFA_REG_OFFSET;\n+\t  fs->regs.cfa_offset *= fs->data_align;\n+\t  break;\n+\n+\tcase DW_CFA_def_cfa_offset_sf:\n+\t  insn_ptr = read_sleb128 (insn_ptr, &stmp);\n+\t  fs->regs.cfa_offset = (_Unwind_Sword)stmp;\n+\t  fs->regs.cfa_offset *= fs->data_align;\n+\t  /* cfa_how deliberately not set.  */\n+\t  break;\n+\n+\tcase DW_CFA_val_offset:\n+\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n+\t  offset = (_Unwind_Sword) utmp * fs->data_align;\n+\t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n+\t  if (UNWIND_COLUMN_IN_RANGE (reg))\n+\t    {\n+\t      fs->regs.how[reg] = REG_SAVED_VAL_OFFSET;\n+\t      fs->regs.reg[reg].loc.offset = offset;\n+\t    }\n+\t  break;\n+\n+\tcase DW_CFA_val_offset_sf:\n+\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n+\t  insn_ptr = read_sleb128 (insn_ptr, &stmp);\n+\t  offset = stmp * fs->data_align;\n+\t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n+\t  if (UNWIND_COLUMN_IN_RANGE (reg))\n+\t    {\n+\t      fs->regs.how[reg] = REG_SAVED_VAL_OFFSET;\n+\t      fs->regs.reg[reg].loc.offset = offset;\n+\t    }\n+\t  break;\n+\n+\tcase DW_CFA_val_expression:\n+\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n+\t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n+\t  if (UNWIND_COLUMN_IN_RANGE (reg))\n+\t    {\n+\t      fs->regs.how[reg] = REG_SAVED_VAL_EXP;\n+\t      fs->regs.reg[reg].loc.exp = insn_ptr;\n+\t    }\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n+\t  insn_ptr += utmp;\n+\t  break;\n+\n+\tcase DW_CFA_GNU_window_save:\n+#if defined (__aarch64__) && !defined (__ILP32__)\n+\t  /* This CFA is multiplexed with Sparc.  On AArch64 it's used to toggle\n+\t     return address signing status.  */\n+\t  reg = DWARF_REGNUM_AARCH64_RA_STATE;\n+\t  gcc_assert (fs->regs.how[reg] == REG_UNSAVED);\n+\t  fs->regs.reg[reg].loc.offset ^= 1;\n+#else\n+\t  /* ??? Hardcoded for SPARC register window configuration.  */\n+\t  if (__LIBGCC_DWARF_FRAME_REGISTERS__ >= 32)\n+\t    for (reg = 16; reg < 32; ++reg)\n+\t      {\n+\t\tfs->regs.how[reg] = REG_SAVED_OFFSET;\n+\t\tfs->regs.reg[reg].loc.offset = (reg - 16) * sizeof (void *);\n+\t      }\n+#endif\n+\t  break;\n+\n+\tcase DW_CFA_GNU_args_size:\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n+\t  context->args_size = (_Unwind_Word)utmp;\n+\t  break;\n+\n+\tcase DW_CFA_GNU_negative_offset_extended:\n+\t  /* Obsoleted by DW_CFA_offset_extended_sf, but used by\n+\t     older PowerPC code.  */\n+\t  insn_ptr = read_uleb128 (insn_ptr, &reg);\n+\t  insn_ptr = read_uleb128 (insn_ptr, &utmp);\n+\t  offset = (_Unwind_Word) utmp * fs->data_align;\n+\t  reg = DWARF_REG_TO_UNWIND_COLUMN (reg);\n+\t  if (UNWIND_COLUMN_IN_RANGE (reg))\n+\t    {\n+\t      fs->regs.how[reg] = REG_SAVED_OFFSET;\n+\t      fs->regs.reg[reg].loc.offset = -offset;\n+\t    }\n+\t  break;\n+\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+    }\n+}\n \f\n /* Given the _Unwind_Context CONTEXT for a stack frame, look up the FDE for\n    its caller and decode it into FS.  This function also sets the"}]}