{"sha": "caaf9e66c498d9d6dc8be665d820ab45afa406ae", "node_id": "C_kwDOANBUbNoAKGNhYWY5ZTY2YzQ5OGQ5ZDZkYzhiZTY2NWQ4MjBhYjQ1YWZhNDA2YWU", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-08-31T14:04:54Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-08-31T14:04:54Z"}, "message": "libstdc++: Add test for std::con/disjunction's short circuiting\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/20_util/logical_traits/requirements/short_circuit.cc: New test.", "tree": {"sha": "1501ff0207bbf18287c79320748fe7c782df96ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1501ff0207bbf18287c79320748fe7c782df96ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/caaf9e66c498d9d6dc8be665d820ab45afa406ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caaf9e66c498d9d6dc8be665d820ab45afa406ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caaf9e66c498d9d6dc8be665d820ab45afa406ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caaf9e66c498d9d6dc8be665d820ab45afa406ae/comments", "author": null, "committer": null, "parents": [{"sha": "e47df5eb56c4e7aca0d3e50826e5aaa1887fa446", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e47df5eb56c4e7aca0d3e50826e5aaa1887fa446", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e47df5eb56c4e7aca0d3e50826e5aaa1887fa446"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "86996b27fa5d6f958dc6f051387da21592f71550", "filename": "libstdc++-v3/testsuite/20_util/logical_traits/requirements/short_circuit.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caaf9e66c498d9d6dc8be665d820ab45afa406ae/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Flogical_traits%2Frequirements%2Fshort_circuit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caaf9e66c498d9d6dc8be665d820ab45afa406ae/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Flogical_traits%2Frequirements%2Fshort_circuit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Flogical_traits%2Frequirements%2Fshort_circuit.cc?ref=caaf9e66c498d9d6dc8be665d820ab45afa406ae", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile { target c++17 } }\n+\n+#include <type_traits>\n+\n+template<class T> struct A { using type = typename T::type; };\n+using invalid = A<void>;\n+\n+// [meta.logical]/3: For a specialization conjunction<B_1, ..., B_n>, if\n+// there is a template type argument B_i for which bool(B_i::value) is false,\n+// then instantiating conjunction<B_1, ..., B_n>::value does not require the\n+// instantiation of B_j::value for j > i.\n+\n+static_assert(!std::conjunction_v<std::false_type, invalid>);\n+static_assert(!std::conjunction_v<std::false_type, invalid, invalid>);\n+static_assert(!std::conjunction_v<std::true_type, std::false_type, invalid>);\n+static_assert(!std::conjunction_v<std::true_type, std::false_type, invalid, invalid>);\n+\n+// [meta.logical]/8: For a specialization disjunction<B_1, ..., B_n>, if\n+// there is a template type argument B_i for which bool(B_i::value) is true,\n+// then instantiating disjunction<B_1, ..., B_n>::value does not require the\n+// instantiation of B_j::value for j > i.\n+\n+static_assert(std::disjunction_v<std::true_type, invalid>);\n+static_assert(std::disjunction_v<std::true_type, invalid, invalid>);\n+static_assert(std::disjunction_v<std::false_type, std::true_type, invalid>);\n+static_assert(std::disjunction_v<std::false_type, std::true_type, invalid, invalid>);"}]}