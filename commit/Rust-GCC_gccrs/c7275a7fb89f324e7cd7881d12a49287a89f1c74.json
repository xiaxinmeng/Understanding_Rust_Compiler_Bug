{"sha": "c7275a7fb89f324e7cd7881d12a49287a89f1c74", "node_id": "C_kwDOANBUbNoAKGM3Mjc1YTdmYjg5ZjMyNGU3Y2Q3ODgxZDEyYTQ5Mjg3YTg5ZjFjNzQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-13T15:01:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-13T15:01:35Z"}, "message": "Merge #922\n\n922: Support inline never and always options r=philberty a=philberty\n\nThis maps over to DECL_UNINLINEABLE and to use the GCC attribute\r\nalways_inline.\r\n\r\nFixes #921\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "118e4dc6e60678194b65ccd9d097c465ed46a18d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/118e4dc6e60678194b65ccd9d097c465ed46a18d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7275a7fb89f324e7cd7881d12a49287a89f1c74", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiCR1PCRBK7hj4Ov3rIwAAzMYIAAxATEYgFzlMYNNfNM31zk9j\nfy3v8tncnMzyhQHGealYchIcWb/54344PjNbuKrfJ/9r4fqwuugwFFkxBarK2keR\nL1hnwBfHrZU9p53fYeXEQdleMxwHOqCwOwRSLjK7JdvYG34u64Cg8FVWoYjTXYfZ\nSBdhmbTlSeyMKJCgewglM3gsNXr5hijKF4T4ntAtQ0RsQEP+mSR3PDd02NyOcPIi\noRIs6sX/bvSYLdh1+rEHLJWKG23zZQgdObOZvuHbdajh8oV4k3Cmt1AcH+KTemVR\nwrG+pHeTv1RN1GN8goyxjfLr0xR4qo4vF2ImUk+c6iRNsj0wCf1VH4c1CjknSCw=\n=lEm/\n-----END PGP SIGNATURE-----\n", "payload": "tree 118e4dc6e60678194b65ccd9d097c465ed46a18d\nparent b71cc52613219f353b054eb5520cd3886f354c10\nparent 112f2841ee3adac146d1c04703fa36068adfdefc\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1644764495 +0000\ncommitter GitHub <noreply@github.com> 1644764495 +0000\n\nMerge #922\n\n922: Support inline never and always options r=philberty a=philberty\n\nThis maps over to DECL_UNINLINEABLE and to use the GCC attribute\r\nalways_inline.\r\n\r\nFixes #921\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7275a7fb89f324e7cd7881d12a49287a89f1c74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7275a7fb89f324e7cd7881d12a49287a89f1c74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7275a7fb89f324e7cd7881d12a49287a89f1c74/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b71cc52613219f353b054eb5520cd3886f354c10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b71cc52613219f353b054eb5520cd3886f354c10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b71cc52613219f353b054eb5520cd3886f354c10"}, {"sha": "112f2841ee3adac146d1c04703fa36068adfdefc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/112f2841ee3adac146d1c04703fa36068adfdefc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/112f2841ee3adac146d1c04703fa36068adfdefc"}], "stats": {"total": 96, "additions": 82, "deletions": 14}, "files": [{"sha": "33e4c267f12be9c49460eaf5db65da1a6743430d", "filename": "gcc/rust/backend/rust-compile-base.cc", "status": "modified", "additions": 55, "deletions": 13, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7275a7fb89f324e7cd7881d12a49287a89f1c74/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7275a7fb89f324e7cd7881d12a49287a89f1c74/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.cc?ref=c7275a7fb89f324e7cd7881d12a49287a89f1c74", "patch": "@@ -30,12 +30,14 @@ namespace Compile {\n \n void\n HIRCompileBase::setup_attributes_on_fndecl (\n-  tree fndecl, bool is_main_entry_point, bool has_visibility,\n+  tree fndecl, bool is_main_entry_point, HIR::Visibility &visibility,\n   const HIR::FunctionQualifiers &qualifiers, const AST::AttrVec &attrs)\n {\n   // if its the main fn or pub visibility mark its as DECL_PUBLIC\n   // please see https://github.com/Rust-GCC/gccrs/pull/137\n-  if (is_main_entry_point || has_visibility)\n+  bool is_pub\n+    = visibility.get_vis_type () != HIR::Visibility::PublicVisType::NONE;\n+  if (is_main_entry_point || is_pub)\n     {\n       TREE_PUBLIC (fndecl) = 1;\n     }\n@@ -52,19 +54,59 @@ HIRCompileBase::setup_attributes_on_fndecl (\n       bool is_inline = attr.get_path ().as_string ().compare (\"inline\") == 0;\n       if (is_inline)\n \t{\n-\t  DECL_DECLARED_INLINE_P (fndecl) = 1;\n-\n-\t  // do we want to force inline regardless of optimisation level?\n-\t  // https://gcc.gnu.org/onlinedocs/gcc/Inline.html\n-\t  //\n-\t  // /* Add attribute \"always_inline\": */\n-\t  // DECL_ATTRIBUTES (fndecl)\n-\t  //   = tree_cons (get_identifier (\"always_inline\"), NULL,\n-\t  //       \t DECL_ATTRIBUTES (fndecl));\n+\t  handle_inline_attribute_on_fndecl (fndecl, attr);\n \t}\n     }\n }\n \n+void\n+HIRCompileBase::handle_inline_attribute_on_fndecl (tree fndecl,\n+\t\t\t\t\t\t   const AST::Attribute &attr)\n+{\n+  // simple #[inline]\n+  if (!attr.has_attr_input ())\n+    {\n+      DECL_DECLARED_INLINE_P (fndecl) = 1;\n+      return;\n+    }\n+\n+  const AST::AttrInput &input = attr.get_attr_input ();\n+  bool is_token_tree\n+    = input.get_attr_input_type () == AST::AttrInput::AttrInputType::TOKEN_TREE;\n+  rust_assert (is_token_tree);\n+  const auto &option = static_cast<const AST::DelimTokenTree &> (input);\n+  AST::AttrInputMetaItemContainer *meta_item = option.parse_to_meta_item ();\n+  if (meta_item->get_items ().size () != 1)\n+    {\n+      rust_error_at (attr.get_locus (), \"invalid number of arguments\");\n+      return;\n+    }\n+\n+  const std::string inline_option\n+    = meta_item->get_items ().at (0)->as_string ();\n+\n+  // we only care about NEVER and ALWAYS else its an error\n+  bool is_always = inline_option.compare (\"always\") == 0;\n+  bool is_never = inline_option.compare (\"never\") == 0;\n+\n+  // #[inline(never)]\n+  if (is_never)\n+    {\n+      DECL_UNINLINABLE (fndecl) = 1;\n+    }\n+  // #[inline(always)]\n+  else if (is_always)\n+    {\n+      DECL_DECLARED_INLINE_P (fndecl) = 1;\n+      DECL_ATTRIBUTES (fndecl) = tree_cons (get_identifier (\"always_inline\"),\n+\t\t\t\t\t    NULL, DECL_ATTRIBUTES (fndecl));\n+    }\n+  else\n+    {\n+      rust_error_at (attr.get_locus (), \"unknown inline option\");\n+    }\n+}\n+\n void\n HIRCompileBase::setup_abi_options (tree fndecl, ABI abi)\n {\n@@ -278,8 +320,8 @@ HIRCompileBase::compile_function (\n   unsigned int flags = 0;\n   tree fndecl = ctx->get_backend ()->function (compiled_fn_type, ir_symbol_name,\n \t\t\t\t\t       asm_name, flags, locus);\n-  setup_attributes_on_fndecl (fndecl, is_main_fn, !visibility.is_error (),\n-\t\t\t      qualifiers, outer_attrs);\n+  setup_attributes_on_fndecl (fndecl, is_main_fn, visibility, qualifiers,\n+\t\t\t      outer_attrs);\n   setup_abi_options (fndecl, fntype->get_abi ());\n \n   // insert into the context"}, {"sha": "5d27f7b113042c02d72425bc600c8d01ced3c847", "filename": "gcc/rust/backend/rust-compile-base.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7275a7fb89f324e7cd7881d12a49287a89f1c74/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7275a7fb89f324e7cd7881d12a49287a89f1c74/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.h?ref=c7275a7fb89f324e7cd7881d12a49287a89f1c74", "patch": "@@ -71,9 +71,12 @@ class HIRCompileBase : public HIR::HIRFullVisitorBase\n \t\t\t\t       tree expression, Location locus);\n \n   static void setup_attributes_on_fndecl (\n-    tree fndecl, bool is_main_entry_point, bool has_visibility,\n+    tree fndecl, bool is_main_entry_point, HIR::Visibility &visibility,\n     const HIR::FunctionQualifiers &qualifiers, const AST::AttrVec &attrs);\n \n+  static void handle_inline_attribute_on_fndecl (tree fndecl,\n+\t\t\t\t\t\t const AST::Attribute &attr);\n+\n   static void setup_abi_options (tree fndecl, ABI abi);\n \n   static tree address_expression (tree, Location);"}, {"sha": "ffde1caa522a827fe5958ac60c0c9f35f88ea9ce", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7275a7fb89f324e7cd7881d12a49287a89f1c74/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7275a7fb89f324e7cd7881d12a49287a89f1c74/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=c7275a7fb89f324e7cd7881d12a49287a89f1c74", "patch": "@@ -632,6 +632,8 @@ struct Visibility\n     return Visibility (IN_PATH, std::move (in_path));\n   }\n \n+  PublicVisType get_vis_type () const { return public_vis_type; }\n+\n   std::string as_string () const;\n \n protected:"}, {"sha": "df2486fa57e0cf6041365b41ab7c215c5db8d469", "filename": "gcc/testsuite/rust/compile/inline_1.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7275a7fb89f324e7cd7881d12a49287a89f1c74/gcc%2Ftestsuite%2Frust%2Fcompile%2Finline_1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7275a7fb89f324e7cd7881d12a49287a89f1c74/gcc%2Ftestsuite%2Frust%2Fcompile%2Finline_1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Finline_1.rs?ref=c7275a7fb89f324e7cd7881d12a49287a89f1c74", "patch": "@@ -0,0 +1,15 @@\n+#[inline]\n+fn test_a() {}\n+\n+// { dg-final { scan-tree-dump-times {always_inline} 1 gimple } }\n+#[inline(always)]\n+fn test_b() {}\n+\n+#[inline(never)]\n+fn test_c() {}\n+\n+fn main() {\n+    test_a();\n+    test_b();\n+    test_c();\n+}"}, {"sha": "3665fdac80452b87957624353003bae6a7d30552", "filename": "gcc/testsuite/rust/compile/inline_2.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7275a7fb89f324e7cd7881d12a49287a89f1c74/gcc%2Ftestsuite%2Frust%2Fcompile%2Finline_2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7275a7fb89f324e7cd7881d12a49287a89f1c74/gcc%2Ftestsuite%2Frust%2Fcompile%2Finline_2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Finline_2.rs?ref=c7275a7fb89f324e7cd7881d12a49287a89f1c74", "patch": "@@ -0,0 +1,6 @@\n+// { dg-additional-options \"-w\" }\n+#[inline(A)] // { dg-error \"unknown inline option\" }\n+fn test_a() {}\n+\n+#[inline(A, B)] // { dg-error \"invalid number of arguments\" }\n+fn test_b() {}"}]}