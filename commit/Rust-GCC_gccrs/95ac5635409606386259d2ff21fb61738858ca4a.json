{"sha": "95ac5635409606386259d2ff21fb61738858ca4a", "node_id": "C_kwDOANBUbNoAKDk1YWM1NjM1NDA5NjA2Mzg2MjU5ZDJmZjIxZmI2MTczODg1OGNhNGE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-01T19:48:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-01T19:48:03Z"}, "message": "libcpp: Fix up padding handling in funlike_invocation_p [PR104147]\n\nAs mentioned in the PR, in some cases we preprocess incorrectly when we\nencounter an identifier which is defined as function-like macro, followed\nby at least 2 CPP_PADDING tokens and then some other identifier.\nOn the following testcase, the problem is in the 3rd funlike_invocation_p,\nthe tokens are CPP_NAME Y, CPP_PADDING (the pfile->avoid_paste shared token),\nCPP_PADDING (one created with padding_token, val.source is non-NULL and\nval.source->flags & PREV_WHITE is non-zero) and then another CPP_NAME.\nfunlike_invocation_p remembers there was a padding token, but remembers the\nfirst one because of its condition, then the next token is the CPP_NAME,\nwhich is not CPP_OPEN_PAREN, so the CPP_NAME token is backed up, but as we\ncan't easily backup more tokens, it pushes into a new context the padding\ntoken (the pfile->avoid_paste one).  The net effect is that when Y is not\ndefined as fun-like macro, we read Y, avoid_paste, padding_token, Y,\nwhile if Y is fun-like macro, we read Y, avoid_paste, avoid_paste, Y\n(the second avoid_paste is because that is how we handle end of a context).\nNow, for stringify_arg that is unfortunately a significant difference,\nwhich handles CPP_PADDING tokens with:\n      if (token->type == CPP_PADDING)\n        {\n          if (source == NULL\n              || (!(source->flags & PREV_WHITE)\n                  && token->val.source == NULL))\n            source = token->val.source;\n          continue;\n        }\nand later on\n      /* Leading white space?  */\n      if (dest - 1 != BUFF_FRONT (pfile->u_buff))\n        {\n          if (source == NULL)\n            source = token;\n          if (source->flags & PREV_WHITE)\n            *dest++ = ' ';\n        }\n      source = NULL;\n(and c-ppoutput.cc has similar code).\nSo, when Y is not fun-like macro, ' ' is added because padding_token's\nval.source->flags & PREV_WHITE is non-zero, while when it is fun-like\nmacro, we don't add ' ' in between, because source is NULL and so\nused from the next token (CPP_NAME Y), which doesn't have PREV_WHITE set.\n\nNow, the funlike_invocation_p condition\n       if (padding == NULL\n           || (!(padding->flags & PREV_WHITE) && token->val.source == NULL))\n        padding = token;\nlooks very similar to that in stringify_arg/c-ppoutput.cc, so I assume\nthe intent was to prefer do the same thing and pick the right padding.\nBut there are significant differences.  Both stringify_arg and c-ppoutput.cc\ndon't remember the CPP_PADDING token, but its val.source instead, while\nin funlike_invocation_p we want to remember the padding token that has the\nsignificant information for stringify_arg/c-ppoutput.cc.\nSo, IMHO we want to overwrite padding if:\n1) padding == NULL (remember that there was any padding at all)\n2) padding->val.source == NULL (this matches the source == NULL\n   case in stringify_arg)\n3) !(padding->val.source->flags & PREV_WHITE) && token->val.source == NULL\n   (this matches the !(source->flags & PREV_WHITE) && token->val.source == NULL\n   case in stringify_arg)\n\n2022-02-01  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR preprocessor/104147\n\t* macro.cc (funlike_invocation_p): For padding prefer a token\n\twith val.source non-NULL especially if it has PREV_WHITE set\n\ton val.source->flags.  Add gcc_assert that CPP_PADDING tokens\n\tdon't have PREV_WHITE set in flags.\n\n\t* c-c++-common/cpp/pr104147.c: New test.", "tree": {"sha": "a697e6af813f252c3cb7cca735ecbb2e8dace291", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a697e6af813f252c3cb7cca735ecbb2e8dace291"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95ac5635409606386259d2ff21fb61738858ca4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95ac5635409606386259d2ff21fb61738858ca4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95ac5635409606386259d2ff21fb61738858ca4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95ac5635409606386259d2ff21fb61738858ca4a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efc46b550f035281e51c340f73fbc9a79655e852", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc46b550f035281e51c340f73fbc9a79655e852", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efc46b550f035281e51c340f73fbc9a79655e852"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "4ee237ed6babf823bec8fdd412c29c573e754f69", "filename": "gcc/testsuite/c-c++-common/cpp/pr104147.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ac5635409606386259d2ff21fb61738858ca4a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr104147.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ac5635409606386259d2ff21fb61738858ca4a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr104147.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr104147.c?ref=95ac5635409606386259d2ff21fb61738858ca4a", "patch": "@@ -0,0 +1,27 @@\n+/* PR preprocessor/104147 */\n+/* { dg-do run } */\n+\n+#define X(x,y) \tx y\n+#define STR_(x) #x\n+#define STR(x) \tSTR_(x)\n+const char *str =\n+STR(X(Y,Y))\n+#define Y()\n+STR(X(Y,Y))\n+#undef Y\n+STR(X(Y,Y))\n+#define Y()\n+STR(X(Y,Y))\n+STR(X(Y,\n+Y))\n+STR(X(Y\n+,Y))\n+;\n+\n+int\n+main ()\n+{\n+  if (__builtin_strcmp (str, \"Y YY YY YY YY YY Y\") != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "8ebf360c03c6c0a2ab50f0eb9eaee452ee2991d4", "filename": "libcpp/macro.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ac5635409606386259d2ff21fb61738858ca4a/libcpp%2Fmacro.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ac5635409606386259d2ff21fb61738858ca4a/libcpp%2Fmacro.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.cc?ref=95ac5635409606386259d2ff21fb61738858ca4a", "patch": "@@ -1373,8 +1373,11 @@ funlike_invocation_p (cpp_reader *pfile, cpp_hashnode *node,\n       token = cpp_get_token (pfile);\n       if (token->type != CPP_PADDING)\n \tbreak;\n+      gcc_assert ((token->flags & PREV_WHITE) == 0);\n       if (padding == NULL\n-\t  || (!(padding->flags & PREV_WHITE) && token->val.source == NULL))\n+\t  || padding->val.source == NULL\n+\t  || (!(padding->val.source->flags & PREV_WHITE)\n+\t      && token->val.source == NULL))\n \tpadding = token;\n     }\n "}]}