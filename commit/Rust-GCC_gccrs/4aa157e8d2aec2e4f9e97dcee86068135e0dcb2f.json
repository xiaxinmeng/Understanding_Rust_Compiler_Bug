{"sha": "4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFhMTU3ZThkMmFlYzJlNGY5ZTk3ZGNlZTg2MDY4MTM1ZTBkY2IyZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-13T18:00:31Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-13T18:00:31Z"}, "message": "Allow single-element interleaving for non-power-of-2 strides\n\nThis allows LD3 to be used for isolated a[i * 3] accesses, in a similar\nway to the current a[i * 2] and a[i * 4] for LD2 and LD4 respectively.\nGiven the problems with the cost model underestimating the cost of\nelementwise accesses, the patch continues to reject the VMAT_ELEMENTWISE\ncases that are currently rejected.\n\n2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* tree-vect-data-refs.c (vect_analyze_group_access_1): Allow\n\tsingle-element interleaving even if the size is not a power of 2.\n\t* tree-vect-stmts.c (get_load_store_type): Disallow elementwise\n\taccesses for single-element interleaving if the group size is\n\tnot a power of 2.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/struct_vect_18.c: New test.\n\t* gcc.target/aarch64/sve/struct_vect_18_run.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_19.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_19_run.c: Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r256634", "tree": {"sha": "99c1b77bf8b46d8dacdacdaaeba64d79aaf2f997", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99c1b77bf8b46d8dacdacdaaeba64d79aaf2f997"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f/comments", "author": null, "committer": null, "parents": [{"sha": "bb6c2b68d6961dfe98bece34e4418d7287ce7089", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb6c2b68d6961dfe98bece34e4418d7287ce7089", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb6c2b68d6961dfe98bece34e4418d7287ce7089"}], "stats": {"total": 196, "additions": 192, "deletions": 4}, "files": [{"sha": "73bfb41ce16129c0033e6bc77dd799d6c3826ac6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f", "patch": "@@ -1,3 +1,13 @@\n+2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* tree-vect-data-refs.c (vect_analyze_group_access_1): Allow\n+\tsingle-element interleaving even if the size is not a power of 2.\n+\t* tree-vect-stmts.c (get_load_store_type): Disallow elementwise\n+\taccesses for single-element interleaving if the group size is\n+\tnot a power of 2.\n+\n 2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "72da41973ead1b9fd1e333a75414d6ae2c1205c1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f", "patch": "@@ -1,3 +1,12 @@\n+2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* gcc.target/aarch64/sve/struct_vect_18.c: New test.\n+\t* gcc.target/aarch64/sve/struct_vect_18_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_19.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_19_run.c: Likewise.\n+\n 2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "67b08d19dc9ddd144cda4b8b64da810f97edc478", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_18.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_18.c?ref=4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#define N 2000\n+\n+#define TEST_LOOP(NAME, TYPE)\t\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\t\\\n+  NAME (TYPE *restrict dest, TYPE *restrict src)\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      dest[i] += src[i * 3];\t\t\t\t\t\\\n+  }\n+\n+#define TEST(NAME) \\\n+  TEST_LOOP (NAME##_i8, signed char) \\\n+  TEST_LOOP (NAME##_i16, unsigned short) \\\n+  TEST_LOOP (NAME##_f32, float) \\\n+  TEST_LOOP (NAME##_f64, double)\n+\n+TEST (test)\n+\n+/* Check the vectorized loop.  */\n+/* { dg-final { scan-assembler-times {\\tld1b\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld3b\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst1b\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld3h\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld3w\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst1w\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld3d\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst1d\\t} 1 } } */\n+\n+/* Check the scalar tail.  */\n+/* { dg-final { scan-assembler-times {\\tldrb\\tw} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tstrb\\tw} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tldrh\\tw} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tstrh\\tw} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tldr\\ts} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tstr\\ts} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tldr\\td} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tstr\\td} 1 } } */"}, {"sha": "9698216ddfbefa289b35dca127913fcb05affb88", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_18_run.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_18_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_18_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_18_run.c?ref=4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"struct_vect_18.c\"\n+\n+#undef TEST_LOOP\n+#define TEST_LOOP(NAME, TYPE)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    TYPE out[N];\t\t\t\t\t\\\n+    TYPE in[N * 3];\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tout[i] = i * 7 / 2;\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < N * 3; ++i)\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tin[i] = i * 9 / 2;\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+    NAME (out, in);\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tTYPE expected = i * 7 / 2 + in[i * 3];\t\t\\\n+\tif (out[i] != expected)\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+  }\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  TEST (test);\n+  return 0;\n+}"}, {"sha": "3754190230fe39669dd1f73a40322da7b1467450", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_19.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_19.c?ref=4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#define TEST_LOOP(NAME, TYPE)\t\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\t\\\n+  NAME (TYPE *restrict dest, TYPE *restrict src, int n)\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\\\n+      dest[i] += src[i * 3];\t\t\t\t\t\\\n+  }\n+\n+#define TEST(NAME) \\\n+  TEST_LOOP (NAME##_i8, signed char) \\\n+  TEST_LOOP (NAME##_i16, unsigned short) \\\n+  TEST_LOOP (NAME##_f32, float) \\\n+  TEST_LOOP (NAME##_f64, double)\n+\n+TEST (test)\n+\n+/* Check the vectorized loop.  */\n+/* { dg-final { scan-assembler-times {\\tld1b\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld3b\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst1b\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld3h\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld3w\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst1w\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld3d\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst1d\\t} 1 } } */\n+\n+/* Check the scalar tail.  */\n+/* { dg-final { scan-assembler-times {\\tldrb\\tw} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tstrb\\tw} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tldrh\\tw} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tstrh\\tw} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tldr\\ts} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tstr\\ts} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tldr\\td} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tstr\\td} 1 } } */"}, {"sha": "1d0325f75138c3d4e370ced11ce9af9df226b325", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_19_run.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_19_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_19_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_19_run.c?ref=4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"struct_vect_19.c\"\n+\n+#define N 1000\n+\n+#undef TEST_LOOP\n+#define TEST_LOOP(NAME, TYPE)\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    TYPE out[N];\t\t\t\t\\\n+    TYPE in[N * 3];\t\t\t\t\\\n+    int counts[] = { 0, 1, N - 1 };\t\t\\\n+    for (int j = 0; j < 3; ++j)\t\t\t\\\n+      {\t\t\t\t\t\t\\\n+\tint count = counts[j];\t\t\t\\\n+\tfor (int i = 0; i < N; ++i)\t\t\\\n+\t  {\t\t\t\t\t\\\n+\t    out[i] = i * 7 / 2;\t\t\t\\\n+\t    asm volatile (\"\" ::: \"memory\");\t\\\n+\t  }\t\t\t\t\t\\\n+\tfor (int i = 0; i < N * 3; ++i)\t\t\\\n+\t  {\t\t\t\t\t\\\n+\t    in[i] = i * 9 / 2;\t\t\t\\\n+\t    asm volatile (\"\" ::: \"memory\");\t\\\n+\t  }\t\t\t\t\t\\\n+\tNAME (out, in, count);\t\t\t\\\n+\tfor (int i = 0; i < N; ++i)\t\t\\\n+\t  {\t\t\t\t\t\\\n+\t    TYPE expected = i * 7 / 2;\t\t\\\n+\t    if (i < count)\t\t\t\\\n+\t      expected += in[i * 3];\t\t\\\n+\t    if (out[i] != expected)\t\t\\\n+\t      __builtin_abort ();\t\t\\\n+\t    asm volatile (\"\" ::: \"memory\");\t\\\n+\t  }\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\\\n+  }\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  TEST (test);\n+  return 0;\n+}"}, {"sha": "59462be4295e4b55f2a4881e9cdea8b27742d034", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f", "patch": "@@ -2427,11 +2427,10 @@ vect_analyze_group_access_1 (struct data_reference *dr)\n \t element of the group that is accessed in the loop.  */\n \n       /* Gaps are supported only for loads. STEP must be a multiple of the type\n-\t size.  The size of the group must be a power of 2.  */\n+\t size.  */\n       if (DR_IS_READ (dr)\n \t  && (dr_step % type_size) == 0\n-\t  && groupsize > 0\n-\t  && pow2p_hwi (groupsize))\n+\t  && groupsize > 0)\n \t{\n \t  GROUP_FIRST_ELEMENT (vinfo_for_stmt (stmt)) = stmt;\n \t  GROUP_SIZE (vinfo_for_stmt (stmt)) = groupsize;"}, {"sha": "e4d20514c00db75a299f366bb77076b5e3b9d197", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f", "patch": "@@ -2176,7 +2176,10 @@ get_load_store_type (gimple *stmt, tree vectype, bool slp, bool masked_p,\n      cost of using elementwise accesses.  This check preserves the\n      traditional behavior until that can be fixed.  */\n   if (*memory_access_type == VMAT_ELEMENTWISE\n-      && !STMT_VINFO_STRIDED_P (stmt_info))\n+      && !STMT_VINFO_STRIDED_P (stmt_info)\n+      && !(stmt == GROUP_FIRST_ELEMENT (stmt_info)\n+\t   && !GROUP_NEXT_ELEMENT (stmt_info)\n+\t   && !pow2p_hwi (GROUP_SIZE (stmt_info))))\n     {\n       if (dump_enabled_p ())\n \tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,"}]}