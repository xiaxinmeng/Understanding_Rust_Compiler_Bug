{"sha": "7457466941a2a06b99731bb7ed3ab90ba37b8110", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ1NzQ2Njk0MWEyYTA2Yjk5NzMxYmI3ZWQzYWI5MGJhMzdiODExMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-05-04T13:31:02Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-05-04T13:31:02Z"}, "message": "re PR tree-optimization/65935 (433.milc in SPEC CPU 2006 is miscompiled)\n\n2015-05-04  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/65935\n\t* tree-vect-slp.c (vect_build_slp_tree): If we swapped operands\n\tthen make sure to apply that swapping to the IL.\n\n\t* gcc.dg/vect/bb-slp-pr65935.c: New testcase.\n\nFrom-SVN: r222764", "tree": {"sha": "b4165f54c0015b1933b734920539b2fae5aa2aaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4165f54c0015b1933b734920539b2fae5aa2aaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7457466941a2a06b99731bb7ed3ab90ba37b8110", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7457466941a2a06b99731bb7ed3ab90ba37b8110", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7457466941a2a06b99731bb7ed3ab90ba37b8110", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7457466941a2a06b99731bb7ed3ab90ba37b8110/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a6c014db508f18416e5863907db1b628acfe021b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6c014db508f18416e5863907db1b628acfe021b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6c014db508f18416e5863907db1b628acfe021b"}], "stats": {"total": 90, "additions": 88, "deletions": 2}, "files": [{"sha": "9ba7b943efc5669f51305e87fb28941aae0815fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7457466941a2a06b99731bb7ed3ab90ba37b8110/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7457466941a2a06b99731bb7ed3ab90ba37b8110/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7457466941a2a06b99731bb7ed3ab90ba37b8110", "patch": "@@ -1,3 +1,9 @@\n+2015-05-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/65935\n+\t* tree-vect-slp.c (vect_build_slp_tree): If we swapped operands\n+\tthen make sure to apply that swapping to the IL.\n+\n 2015-05-04  Jakub Jelinek  <jakub@redhat.com>\n \n \t* Makefile.in (PATCHLEVEL_c): New variable."}, {"sha": "719e013cbcc7bf95965ec2e80f4f7cec3891973d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7457466941a2a06b99731bb7ed3ab90ba37b8110/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7457466941a2a06b99731bb7ed3ab90ba37b8110/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7457466941a2a06b99731bb7ed3ab90ba37b8110", "patch": "@@ -1,3 +1,8 @@\n+2015-05-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/65935\n+\t* gcc.dg/vect/bb-slp-pr65935.c: New testcase.\n+\n 2015-05-03  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/binary_op.inc: Call CHECK"}, {"sha": "057dc20544d126c84ce9ec0b9401d4e07df8ecbe", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-pr65935.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7457466941a2a06b99731bb7ed3ab90ba37b8110/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr65935.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7457466941a2a06b99731bb7ed3ab90ba37b8110/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr65935.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr65935.c?ref=7457466941a2a06b99731bb7ed3ab90ba37b8110", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-O3\" } */\n+/* { dg-require-effective-target vect_double } */\n+\n+#include \"tree-vect.h\"\n+\n+extern void abort (void);\n+extern void *malloc (__SIZE_TYPE__);\n+\n+struct site {\n+    struct {\n+\tstruct {\n+\t    double real;\n+\t    double imag;\n+\t} e[3][3];\n+    } link[32];\n+    double phase[32];\n+} *lattice;\n+int sites_on_node;\n+\n+void rephase (void)\n+{\n+  int i,j,k,dir;\n+  struct site *s;\n+  for(i=0,s=lattice;i<sites_on_node;i++,s++)\n+    for(dir=0;dir<32;dir++)\n+      for(j=0;j<3;j++)for(k=0;k<3;k++)\n+\t{\n+\t  s->link[dir].e[j][k].real *= s->phase[dir];\n+\t  s->link[dir].e[j][k].imag *= s->phase[dir];\n+\t}\n+}\n+\n+int main()\n+{\n+  int i,j,k;\n+  check_vect ();\n+  sites_on_node = 1;\n+  lattice = malloc (sizeof (struct site) * sites_on_node);\n+  for (i = 0; i < 32; ++i)\n+    {\n+      lattice->phase[i] = i;\n+      for (j = 0; j < 3; ++j)\n+\tfor (k = 0; k < 3; ++k)\n+\t  {\n+\t    lattice->link[i].e[j][k].real = 1.0;\n+\t    lattice->link[i].e[j][k].imag = 1.0;\n+\t    __asm__ volatile (\"\" : : : \"memory\");\n+\t  }\n+    }\n+  rephase ();\n+  for (i = 0; i < 32; ++i)\n+    for (j = 0; j < 3; ++j)\n+      for (k = 0; k < 3; ++k)\n+\tif (lattice->link[i].e[j][k].real != i\n+\t    || lattice->link[i].e[j][k].imag != i)\n+\t  abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"basic block vectorized\" 1 \"slp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"slp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"slp2\" } } */"}, {"sha": "2b8f9bde5ae9d062bbcb031feae55e92fc8d7336", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7457466941a2a06b99731bb7ed3ab90ba37b8110/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7457466941a2a06b99731bb7ed3ab90ba37b8110/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=7457466941a2a06b99731bb7ed3ab90ba37b8110", "patch": "@@ -1081,13 +1081,25 @@ vect_build_slp_tree (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n \t\tdump_printf (MSG_NOTE, \"%d \", j);\n \t      }\n \t  dump_printf (MSG_NOTE, \"\\n\");\n-\t  /* And try again ... */\n+\t  /* And try again with scratch 'matches' ... */\n+\t  bool *tem = XALLOCAVEC (bool, group_size);\n \t  if (vect_build_slp_tree (loop_vinfo, bb_vinfo, &child,\n \t\t\t\t   group_size, max_nunits, loads,\n \t\t\t\t   vectorization_factor,\n-\t\t\t\t   matches, npermutes, &this_tree_size,\n+\t\t\t\t   tem, npermutes, &this_tree_size,\n \t\t\t\t   max_tree_size))\n \t    {\n+\t      /* ... so if successful we can apply the operand swapping\n+\t\t to the GIMPLE IL.  This is necessary because for example\n+\t\t vect_get_slp_defs uses operand indexes and thus expects\n+\t\t canonical operand order.  */\n+\t      for (j = 0; j < group_size; ++j)\n+\t\tif (!matches[j])\n+\t\t  {\n+\t\t    gimple stmt = SLP_TREE_SCALAR_STMTS (*node)[j];\n+\t\t    swap_ssa_operands (stmt, gimple_assign_rhs1_ptr (stmt),\n+\t\t\t\t       gimple_assign_rhs2_ptr (stmt));\n+\t\t  }\n \t      oprnd_info->def_stmts = vNULL;\n \t      SLP_TREE_CHILDREN (*node).quick_push (child);\n \t      continue;"}]}