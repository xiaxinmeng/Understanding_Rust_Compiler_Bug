{"sha": "ea2c1a6d673c443effb1adbc652143c2b3934a5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEyYzFhNmQ2NzNjNDQzZWZmYjFhZGJjNjUyMTQzYzJiMzkzNGE1ZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2012-04-01T22:04:54Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2012-04-01T22:04:54Z"}, "message": "re PR libstdc++/52591 ([C++0x] [4.7 Regression] moving std::vector relies on movable elements)\n\n\tPR libstdc++/52591\n\t* include/bits/stl_vector.h (vector::operator=(vector&&)): Dispatch\n\tto _M_move_assign depending on whether allocator is moved.\n\t(vector::_M_move_assign): Add overloaded functions.\n\t* testsuite/23_containers/vector/52591.cc: New.\n\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n\tAdjust dg-error line number.\n\t* testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\nFrom-SVN: r186057", "tree": {"sha": "9c3ee73c94a8d2af8568e44388d7d72df4b572dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c3ee73c94a8d2af8568e44388d7d72df4b572dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea2c1a6d673c443effb1adbc652143c2b3934a5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea2c1a6d673c443effb1adbc652143c2b3934a5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea2c1a6d673c443effb1adbc652143c2b3934a5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea2c1a6d673c443effb1adbc652143c2b3934a5d/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "181c9de2a6d42430f66fe1374d84208703bd0ac3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/181c9de2a6d42430f66fe1374d84208703bd0ac3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/181c9de2a6d42430f66fe1374d84208703bd0ac3"}], "stats": {"total": 127, "additions": 98, "deletions": 29}, "files": [{"sha": "66bf6defff146b2cd16a3520447d3c63dfbdba2d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2c1a6d673c443effb1adbc652143c2b3934a5d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2c1a6d673c443effb1adbc652143c2b3934a5d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ea2c1a6d673c443effb1adbc652143c2b3934a5d", "patch": "@@ -1,3 +1,19 @@\n+2012-04-01  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/52591\n+\t* include/bits/stl_vector.h (vector::operator=(vector&&)): Dispatch\n+\tto _M_move_assign depending on whether allocator is moved.\n+\t(vector::_M_move_assign): Add overloaded functions.\n+\t* testsuite/23_containers/vector/52591.cc: New.\n+\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n+\tAdjust dg-error line number.\n+\t* testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\n 2012-04-01  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/std/functional (__callable_functor): Overload for"}, {"sha": "31660d3a22f0fe97e3afed389dfc3ec97c38b7d5", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 40, "deletions": 25, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2c1a6d673c443effb1adbc652143c2b3934a5d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2c1a6d673c443effb1adbc652143c2b3934a5d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=ea2c1a6d673c443effb1adbc652143c2b3934a5d", "patch": "@@ -428,36 +428,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief  %Vector move assignment operator.\n        *  @param  __x  A %vector of identical element and allocator types.\n        *\n-       *  The contents of @a __x are moved into this %vector (without copying).\n+       *  The contents of @a __x are moved into this %vector (without copying,\n+       *  if the allocators permit it).\n        *  @a __x is a valid, but unspecified %vector.\n        */\n       vector&\n       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())\n       {\n-\tif (_Alloc_traits::_S_propagate_on_move_assign())\n-\t  {\n-\t    // We're moving the rvalue's allocator so can move the data too.\n-\t    const vector __tmp(std::move(*this));     // discard existing data\n-\t    this->_M_impl._M_swap_data(__x._M_impl);\n-\t    std::__alloc_on_move(_M_get_Tp_allocator(),\n-\t\t\t\t __x._M_get_Tp_allocator());\n-\t  }\n-\telse if (_Alloc_traits::_S_always_equal()\n-\t         || __x._M_get_Tp_allocator() == this->_M_get_Tp_allocator())\n-\t  {\n-\t    // The rvalue's allocator can free our storage and vice versa,\n-\t    // so can swap the data storage after destroying our contents.\n-\t    this->clear();\n-\t    this->_M_impl._M_swap_data(__x._M_impl);\n-\t  }\n-\telse\n-\t  {\n-\t    // The rvalue's allocator cannot be moved, or is not equal,\n-\t    // so we need to individually move each element.\n-\t    this->assign(std::__make_move_if_noexcept_iterator(__x.begin()),\n-\t\t\t std::__make_move_if_noexcept_iterator(__x.end()));\n-\t    __x.clear();\n-\t  }\n+        constexpr bool __move_storage =\n+          _Alloc_traits::_S_propagate_on_move_assign()\n+          || _Alloc_traits::_S_always_equal();\n+        _M_move_assign(std::move(__x),\n+                       integral_constant<bool, __move_storage>());\n \treturn *this;\n       }\n \n@@ -1363,6 +1345,39 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tstd::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());\n \tthis->_M_impl._M_finish = __pos;\n       }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    private:\n+      // Constant-time move assignment when source object's memory can be\n+      // moved, either because the source's allocator will move too\n+      // or because the allocators are equal.\n+      void\n+      _M_move_assign(vector&& __x, std::true_type) noexcept\n+      {\n+\tconst vector __tmp(std::move(*this));\n+\tthis->_M_impl._M_swap_data(__x._M_impl);\n+\tif (_Alloc_traits::_S_propagate_on_move_assign())\n+\t  std::__alloc_on_move(_M_get_Tp_allocator(),\n+\t\t\t       __x._M_get_Tp_allocator());\n+      }\n+\n+      // Do move assignment when it might not be possible to move source\n+      // object's memory, resulting in a linear-time operation.\n+      void\n+      _M_move_assign(vector&& __x, std::false_type)\n+      {\n+\tif (__x._M_get_Tp_allocator() == this->_M_get_Tp_allocator())\n+\t  _M_move_assign(std::move(__x), std::true_type());\n+\telse\n+\t  {\n+\t    // The rvalue's allocator cannot be moved and is not equal,\n+\t    // so we need to individually move each element.\n+\t    this->assign(std::__make_move_if_noexcept_iterator(__x.begin()),\n+\t\t\t std::__make_move_if_noexcept_iterator(__x.end()));\n+\t    __x.clear();\n+\t  }\n+      }\n+#endif\n     };\n \n "}, {"sha": "c018c7268809ac234e1e3dd9c38243dbd71191c2", "filename": "libstdc++-v3/testsuite/23_containers/vector/52591.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2c1a6d673c443effb1adbc652143c2b3934a5d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F52591.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2c1a6d673c443effb1adbc652143c2b3934a5d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F52591.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F52591.cc?ref=ea2c1a6d673c443effb1adbc652143c2b3934a5d", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// libstdc++/52591\n+\n+#include <vector>\n+\n+// As an extension we allow move-assignment of std::vector when the element\n+// type is not MoveAssignable, as long as the allocator type propagates or\n+// is known to always compare equal.\n+\n+struct C\n+{\n+    C& operator=(C&&) = delete;\n+};\n+\n+void test01()\n+{\n+    std::vector<C> a;\n+    a = std::vector<C>();\n+}"}, {"sha": "644750ccfe613d0e71af170e117b9c491f9dd80e", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2c1a6d673c443effb1adbc652143c2b3934a5d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2c1a6d673c443effb1adbc652143c2b3934a5d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=ea2c1a6d673c443effb1adbc652143c2b3934a5d", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1251 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1233 }\n \n #include <vector>\n "}, {"sha": "bbd4cfe182927f0c73de7acfcb6be5a8ac3d538d", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2c1a6d673c443effb1adbc652143c2b3934a5d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2c1a6d673c443effb1adbc652143c2b3934a5d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=ea2c1a6d673c443effb1adbc652143c2b3934a5d", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1181 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1163 }\n \n #include <vector>\n "}, {"sha": "d2282ccc05e3b775efe4e623dc3c4f0c9f37c1b9", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2c1a6d673c443effb1adbc652143c2b3934a5d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2c1a6d673c443effb1adbc652143c2b3934a5d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=ea2c1a6d673c443effb1adbc652143c2b3934a5d", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1181 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1163 }\n \n #include <vector>\n #include <utility>"}, {"sha": "d2cde66953d4c3d46ee94e7fb45f1db60264ca2d", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2c1a6d673c443effb1adbc652143c2b3934a5d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2c1a6d673c443effb1adbc652143c2b3934a5d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=ea2c1a6d673c443effb1adbc652143c2b3934a5d", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1292 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1274 }\n \n #include <vector>\n "}]}