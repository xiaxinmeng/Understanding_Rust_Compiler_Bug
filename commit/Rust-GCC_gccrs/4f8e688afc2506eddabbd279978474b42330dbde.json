{"sha": "4f8e688afc2506eddabbd279978474b42330dbde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY4ZTY4OGFmYzI1MDZlZGRhYmJkMjc5OTc4NDc0YjQyMzMwZGJkZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-08-07T22:32:46Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-08-07T22:32:46Z"}, "message": "internal/syscall/unix: fix syscalls for alpha, ia64, s390\n    \n    Also change the configure script to set GOARCH correctly for ia64, and\n    add ia64 as a processor to match.sh and gotest.\n    \n    Reviewed-on: https://go-review.googlesource.com/25549\n\nFrom-SVN: r239225", "tree": {"sha": "8e220f52080a004ca3ebfa32b8532ab4dcd54c5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e220f52080a004ca3ebfa32b8532ab4dcd54c5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f8e688afc2506eddabbd279978474b42330dbde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f8e688afc2506eddabbd279978474b42330dbde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f8e688afc2506eddabbd279978474b42330dbde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f8e688afc2506eddabbd279978474b42330dbde/comments", "author": null, "committer": null, "parents": [{"sha": "531e5ae3cc5fbf208c6d149be1191552134a8d65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/531e5ae3cc5fbf208c6d149be1191552134a8d65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/531e5ae3cc5fbf208c6d149be1191552134a8d65"}], "stats": {"total": 66, "additions": 59, "deletions": 7}, "files": [{"sha": "a5d7f51f1adcbb037932ae1de0d6cc5310f7ace7", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8e688afc2506eddabbd279978474b42330dbde/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8e688afc2506eddabbd279978474b42330dbde/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=4f8e688afc2506eddabbd279978474b42330dbde", "patch": "@@ -1,4 +1,4 @@\n-b50a0c3fa975186f934b76e25dae42eb65148d67\n+eeeeff3e3dd6c09aaefdf13cce99a5beff47a095\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "756f62e137c2dcbace195a2a403d4aeabbed207f", "filename": "libgo/configure", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8e688afc2506eddabbd279978474b42330dbde/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8e688afc2506eddabbd279978474b42330dbde/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=4f8e688afc2506eddabbd279978474b42330dbde", "patch": "@@ -660,6 +660,8 @@ LIBGO_IS_MIPS_FALSE\n LIBGO_IS_MIPS_TRUE\n LIBGO_IS_M68K_FALSE\n LIBGO_IS_M68K_TRUE\n+LIBGO_IS_IA64_FALSE\n+LIBGO_IS_IA64_TRUE\n LIBGO_IS_ARM64_FALSE\n LIBGO_IS_ARM64_TRUE\n LIBGO_IS_ARM_FALSE\n@@ -11128,7 +11130,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11131 \"configure\"\n+#line 11133 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11234,7 +11236,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11237 \"configure\"\n+#line 11239 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -13635,6 +13637,7 @@ is_386=no\n is_alpha=no\n is_arm=no\n is_arm64=no\n+is_ia64=no\n is_m68k=no\n mips_abi=unknown\n is_ppc=no\n@@ -13679,6 +13682,10 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n       GOARCH=amd64\n     fi\n     ;;\n+  ia64-*-*)\n+    is_ia64=yes\n+    GOARCH=ia64\n+    ;;\n   m68k*-*-*)\n     is_m68k=yes\n     GOARCH=m68k\n@@ -13848,6 +13855,14 @@ else\n   LIBGO_IS_ARM64_FALSE=\n fi\n \n+ if test $is_ia64 = yes; then\n+  LIBGO_IS_IA64_TRUE=\n+  LIBGO_IS_IA64_FALSE='#'\n+else\n+  LIBGO_IS_IA64_TRUE='#'\n+  LIBGO_IS_IA64_FALSE=\n+fi\n+\n  if test $is_m68k = yes; then\n   LIBGO_IS_M68K_TRUE=\n   LIBGO_IS_M68K_FALSE='#'\n@@ -15799,6 +15814,10 @@ if test -z \"${LIBGO_IS_ARM64_TRUE}\" && test -z \"${LIBGO_IS_ARM64_FALSE}\"; then\n   as_fn_error \"conditional \\\"LIBGO_IS_ARM64\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${LIBGO_IS_IA64_TRUE}\" && test -z \"${LIBGO_IS_IA64_FALSE}\"; then\n+  as_fn_error \"conditional \\\"LIBGO_IS_IA64\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n if test -z \"${LIBGO_IS_M68K_TRUE}\" && test -z \"${LIBGO_IS_M68K_FALSE}\"; then\n   as_fn_error \"conditional \\\"LIBGO_IS_M68K\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"}, {"sha": "21ece733f34be4a2c9e964b47e89e894db927314", "filename": "libgo/configure.ac", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8e688afc2506eddabbd279978474b42330dbde/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8e688afc2506eddabbd279978474b42330dbde/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=4f8e688afc2506eddabbd279978474b42330dbde", "patch": "@@ -191,6 +191,7 @@ is_386=no\n is_alpha=no\n is_arm=no\n is_arm64=no\n+is_ia64=no\n is_m68k=no\n mips_abi=unknown\n is_ppc=no\n@@ -229,6 +230,10 @@ changequote([,])dnl\n       GOARCH=amd64\n     fi\n     ;;\n+  ia64-*-*)\n+    is_ia64=yes\n+    GOARCH=ia64\n+    ;;\n   m68k*-*-*)\n     is_m68k=yes\n     GOARCH=m68k\n@@ -311,6 +316,7 @@ AM_CONDITIONAL(LIBGO_IS_386, test $is_386 = yes)\n AM_CONDITIONAL(LIBGO_IS_ALPHA, test $is_alpha = yes)\n AM_CONDITIONAL(LIBGO_IS_ARM, test $is_arm = yes)\n AM_CONDITIONAL(LIBGO_IS_ARM64, test $is_arm64 = yes)\n+AM_CONDITIONAL(LIBGO_IS_IA64, test $is_ia64 = yes)\n AM_CONDITIONAL(LIBGO_IS_M68K, test $is_m68k = yes)\n AM_CONDITIONAL(LIBGO_IS_MIPS, test $mips_abi != unknown)\n AM_CONDITIONAL(LIBGO_IS_MIPSO32, test $mips_abi = o32)"}, {"sha": "9587b5aa4caf004945f33f5fd01884f72b893c5b", "filename": "libgo/go/internal/syscall/unix/getrandom_linux_alpha.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8e688afc2506eddabbd279978474b42330dbde/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fgetrandom_linux_alpha.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8e688afc2506eddabbd279978474b42330dbde/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fgetrandom_linux_alpha.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fgetrandom_linux_alpha.go?ref=4f8e688afc2506eddabbd279978474b42330dbde", "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package unix\n+\n+// Linux getrandom system call number.\n+// See GetRandom in getrandom_linux.go.\n+const randomTrap uintptr = 511"}, {"sha": "d20ba238fcfb79dc44d071023cc54619e8d7039c", "filename": "libgo/go/internal/syscall/unix/getrandom_linux_ia64.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8e688afc2506eddabbd279978474b42330dbde/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fgetrandom_linux_ia64.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8e688afc2506eddabbd279978474b42330dbde/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fgetrandom_linux_ia64.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fgetrandom_linux_ia64.go?ref=4f8e688afc2506eddabbd279978474b42330dbde", "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package unix\n+\n+// Linux getrandom system call number.\n+// See GetRandom in getrandom_linux.go.\n+const randomTrap uintptr = 1339"}, {"sha": "e3bc4ee355c0910116521bf51c1eb5e3c84bfc56", "filename": "libgo/go/internal/syscall/unix/getrandom_linux_s390.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8e688afc2506eddabbd279978474b42330dbde/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fgetrandom_linux_s390.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8e688afc2506eddabbd279978474b42330dbde/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fgetrandom_linux_s390.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fgetrandom_linux_s390.go?ref=4f8e688afc2506eddabbd279978474b42330dbde", "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package unix\n+\n+// Linux getrandom system call number.\n+// See GetRandom in getrandom_linux.go.\n+const randomTrap uintptr = 349"}, {"sha": "f626112642b8e047283ff1fca35b1b424ba53029", "filename": "libgo/match.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8e688afc2506eddabbd279978474b42330dbde/libgo%2Fmatch.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8e688afc2506eddabbd279978474b42330dbde/libgo%2Fmatch.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmatch.sh?ref=4f8e688afc2506eddabbd279978474b42330dbde", "patch": "@@ -116,7 +116,7 @@ for f in $gofiles; do\n \tandroid | darwin | dragonfly | freebsd | linux | nacl | netbsd | openbsd | plan9 | solaris | windows)\n \t    tag1=nonmatchingtag\n \t    ;;\n-\t386 | amd64 | amd64p32 | arm | armbe | arm64 | arm64be | alpha | m68k | ppc64 | ppc64le | mips | mipsle | mips64 | mips64le | mips64p32 | mips64p32le | mipso32 | mipsn32 | mipsn64 | mipso64 | ppc | s390 | s390x | sparc | sparc64)\n+\t386 | amd64 | amd64p32 | arm | armbe | arm64 | arm64be | alpha | ia64 | m68k | ppc64 | ppc64le | mips | mipsle | mips64 | mips64le | mips64p32 | mips64p32le | mipso32 | mipsn32 | mipsn64 | mipso64 | ppc | s390 | s390x | sparc | sparc64)\n \t    tag1=nonmatchingtag\n \t    ;;\n     esac\n@@ -128,7 +128,7 @@ for f in $gofiles; do\n \tandroid | darwin | dragonfly | freebsd | linux | nacl | netbsd | openbsd | plan9 | solaris | windows)\n \t    tag2=nonmatchingtag\n \t    ;;\n-\t386 | amd64 | amd64p32 | arm | armbe | arm64 | arm64be | alpha | m68k | ppc64 | ppc64le | mips | mipsle | mips64 | mips64le | mips64p32 | mips64p32le | mipso32 | mipsn32 | mipsn64 | mipso64 | ppc | s390 | s390x | sparc | sparc64)\n+\t386 | amd64 | amd64p32 | arm | armbe | arm64 | arm64be | alpha | ia64 | m68k | ppc64 | ppc64le | mips | mipsle | mips64 | mips64le | mips64p32 | mips64p32le | mipso32 | mipsn32 | mipsn64 | mipso64 | ppc | s390 | s390x | sparc | sparc64)\n \t    tag2=nonmatchingtag\n \t    ;;\n     esac"}, {"sha": "77722c2dd0f2fa95f14600d3c44d362440b93cec", "filename": "libgo/testsuite/gotest", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8e688afc2506eddabbd279978474b42330dbde/libgo%2Ftestsuite%2Fgotest", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8e688afc2506eddabbd279978474b42330dbde/libgo%2Ftestsuite%2Fgotest", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Ftestsuite%2Fgotest?ref=4f8e688afc2506eddabbd279978474b42330dbde", "patch": "@@ -295,7 +295,7 @@ x)\n \t    android | darwin | dragonfly | freebsd | linux | nacl | netbsd | openbsd | plan9 | solaris | windows)\n \t\ttag1=nonmatchingtag\n \t\t;;\n-\t    386 | amd64 | amd64p32 | arm | armbe | arm64 | arm64be | alpha | m68k | ppc64 | ppc64le | mips | mipsle | mips64 | mips64le | mips64p32 | mips64p32le | mipso32 | mipsn32 | mipsn64 | mipso64 | ppc | s390 | s390x | sparc | sparc64)\n+\t    386 | amd64 | amd64p32 | arm | armbe | arm64 | arm64be | alpha | ia64 | m68k | ppc64 | ppc64le | mips | mipsle | mips64 | mips64le | mips64p32 | mips64p32le | mipso32 | mipsn32 | mipsn64 | mipso64 | ppc | s390 | s390x | sparc | sparc64)\n \t\ttag1=nonmatchingtag\n \t\t;;\n \t    esac\n@@ -307,7 +307,7 @@ x)\n \t    android | darwin | dragonfly | freebsd | linux | nacl | netbsd | openbsd | plan9 | solaris | windows)\n \t\ttag2=nonmatchingtag\n \t\t;;\n-\t    386 | amd64 | amd64p32 | arm | armbe | arm64 | arm64be | alpha | m68k | ppc64 | ppc64le | mips | mipsle | mips64 | mips64le | mips64p32 | mips64p32le | mipso32 | mipsn32 | mipsn64 | mipso64 | ppc | s390 | s390x | sparc | sparc64)\n+\t    386 | amd64 | amd64p32 | arm | armbe | arm64 | arm64be | alpha | ia64 | m68k | ppc64 | ppc64le | mips | mipsle | mips64 | mips64le | mips64p32 | mips64p32le | mipso32 | mipsn32 | mipsn64 | mipso64 | ppc | s390 | s390x | sparc | sparc64)\n \t\ttag2=nonmatchingtag\n \t\t;;\n \t    esac"}]}