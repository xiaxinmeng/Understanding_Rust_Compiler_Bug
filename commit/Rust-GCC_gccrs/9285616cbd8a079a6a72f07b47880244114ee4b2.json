{"sha": "9285616cbd8a079a6a72f07b47880244114ee4b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI4NTYxNmNiZDhhMDc5YTZhNzJmMDdiNDc4ODAyNDQxMTRlZTRiMg==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2017-06-01T08:36:57Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-06-01T08:36:57Z"}, "message": "DWARF: for variants, produce unsigned discr. when debug type is unsigned\n\nIn Ada, the Character type is supposed to be unsigned.  However,\ndepending on the sign of C char types, GNAT can materialize it as a\nsigned type for code generation purposes.  When this is the case, GNAT\nalso attach a debug type to it so it is represented as an unsigned base\ntype in the debug information.\n\nThis change adapts record variant parts processing in the DWARF back-end\nso that when the debug type of discriminant is unsigned while\ndiscriminant values are signed themselves, we output unsigned\ndiscriminant values in DWARF.\n\ngcc/\n\n\t* dwarf2out.c (get_discr_value): Call the get_debug_type hook on\n\tthe type of the input discriminant value.  Convert the\n\tdiscriminant value of signedness vary.\n\ngcc/testsuite/\n\n\t* gnat.dg/debug11.adb: New testcase.\n\nFrom-SVN: r248773", "tree": {"sha": "cdd7675142b8599bcec2e279fab4666ff82886c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdd7675142b8599bcec2e279fab4666ff82886c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9285616cbd8a079a6a72f07b47880244114ee4b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9285616cbd8a079a6a72f07b47880244114ee4b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9285616cbd8a079a6a72f07b47880244114ee4b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9285616cbd8a079a6a72f07b47880244114ee4b2/comments", "author": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3fa4634c9250a7e0c51c1eac04d98b2fae032c60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa4634c9250a7e0c51c1eac04d98b2fae032c60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fa4634c9250a7e0c51c1eac04d98b2fae032c60"}], "stats": {"total": 64, "additions": 59, "deletions": 5}, "files": [{"sha": "789095ee8448f1d0b55d40c72f641410ac9c3224", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9285616cbd8a079a6a72f07b47880244114ee4b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9285616cbd8a079a6a72f07b47880244114ee4b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9285616cbd8a079a6a72f07b47880244114ee4b2", "patch": "@@ -1,3 +1,9 @@\n+2017-06-01  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* dwarf2out.c (get_discr_value): Call the get_debug_type hook on\n+\tthe type of the input discriminant value.  Convert the\n+\tdiscriminant value of signedness vary.\n+\n 2017-06-01  Volker Reichelt  <v.reichelt@netcologne.de>\n \n \t* doc/invoke.texi (-Wcatch-value): Document new shortcut."}, {"sha": "7983f52c5efff88a4d6bfd913f7fb368cde5ef94", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9285616cbd8a079a6a72f07b47880244114ee4b2/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9285616cbd8a079a6a72f07b47880244114ee4b2/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=9285616cbd8a079a6a72f07b47880244114ee4b2", "patch": "@@ -23701,14 +23701,33 @@ analyze_discr_in_predicate (tree operand, tree struct_type)\n static bool\n get_discr_value (tree src, dw_discr_value *dest)\n {\n-  bool is_unsigned = TYPE_UNSIGNED (TREE_TYPE (src));\n+  tree discr_type = TREE_TYPE (src);\n \n-  if (TREE_CODE (src) != INTEGER_CST\n-      || !(is_unsigned ? tree_fits_uhwi_p (src) : tree_fits_shwi_p (src)))\n+  if (lang_hooks.types.get_debug_type)\n+    {\n+      tree debug_type = lang_hooks.types.get_debug_type (discr_type);\n+      if (debug_type != NULL)\n+\tdiscr_type = debug_type;\n+    }\n+\n+  if (TREE_CODE (src) != INTEGER_CST || !INTEGRAL_TYPE_P (discr_type))\n+    return false;\n+\n+  /* Signedness can vary between the original type and the debug type. This\n+     can happen for character types in Ada for instance: the character type\n+     used for code generation can be signed, to be compatible with the C one,\n+     but from a debugger point of view, it must be unsigned.  */\n+  bool is_orig_unsigned = TYPE_UNSIGNED (TREE_TYPE (src));\n+  bool is_debug_unsigned = TYPE_UNSIGNED (discr_type);\n+\n+  if (is_orig_unsigned != is_debug_unsigned)\n+    src = fold_convert (discr_type, src);\n+\n+  if (!(is_debug_unsigned ? tree_fits_uhwi_p (src) : tree_fits_shwi_p (src)))\n     return false;\n \n-  dest->pos = is_unsigned;\n-  if (is_unsigned)\n+  dest->pos = is_debug_unsigned;\n+  if (is_debug_unsigned)\n     dest->v.uval = tree_to_uhwi (src);\n   else\n     dest->v.sval = tree_to_shwi (src);"}, {"sha": "1390c6a4371ea982deb01cbc1bf72c180426a02d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9285616cbd8a079a6a72f07b47880244114ee4b2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9285616cbd8a079a6a72f07b47880244114ee4b2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9285616cbd8a079a6a72f07b47880244114ee4b2", "patch": "@@ -1,3 +1,7 @@\n+2017-06-01  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* gnat.dg/debug11.adb: New testcase.\n+\n 2017-06-01  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/66313"}, {"sha": "5f60697a53634cd82e1734b57d1dad03fc732301", "filename": "gcc/testsuite/gnat.dg/debug11.adb", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9285616cbd8a079a6a72f07b47880244114ee4b2/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9285616cbd8a079a6a72f07b47880244114ee4b2/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug11.adb?ref=9285616cbd8a079a6a72f07b47880244114ee4b2", "patch": "@@ -0,0 +1,25 @@\n+--  { dg-options \"-cargs -O0 -g -dA -fgnat-encodings=minimal -margs\" }\n+--\n+--  This testcase checks that in the DWARF description of the variant type\n+--  below, the C discriminant is properly described as unsigned, hence the 0x5a\n+--  ('Z') and 0x80 (128) values in the DW_AT_discr_list attribute. If it was\n+--  described as signed, we would have instead 90 and -128.\n+--\n+--  { dg-final { scan-assembler-times \"0x5a.*DW_AT_discr_list\" 1 } }\n+--  { dg-final { scan-assembler-times \"0x80.*DW_AT_discr_list\" 1 } }\n+\n+with Ada.Text_IO;\n+\n+procedure Debug11 is\n+   type Rec_Type (C : Character) is record\n+      case C is\n+         when 'Z' .. Character'Val (128) => I : Integer;\n+         when others                     => null;\n+      end case;\n+   end record;\n+   --  R : Rec_Type := ('Z', 2);\n+   R : Rec_Type ('Z');\n+begin\n+   R.I := 0;\n+   Ada.Text_IO.Put_Line (\"\" & R.C);\n+end Debug11;"}]}