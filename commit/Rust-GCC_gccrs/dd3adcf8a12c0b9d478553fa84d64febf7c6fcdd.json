{"sha": "dd3adcf8a12c0b9d478553fa84d64febf7c6fcdd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQzYWRjZjhhMTJjMGI5ZDQ3ODU1M2ZhODRkNjRmZWJmN2M2ZmNkZA==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "drow@mvista.com", "date": "2004-01-17T22:14:17Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2004-01-17T22:14:17Z"}, "message": "* rtl.h (emit_insn_before_sameloc, emit_jump_insn_before_sameloc)\n\t(emit_call_insn_before_sameloc, emit_insn_after_sameloc)\n\t(emit_jump_insn_after_sameloc, emit_call_insn_after_sameloc): New\n\tmacros.\n\t* reload1.c (emit_reload_insns): Use them.\n\t* emit-rtl.c (emit_insn_before_sameloc, emit_insn_after_sameloc)\n\t(emit_jump_insn_after_sameloc, emit_call_insn_after_sameloc): Check\n\tfor NULL PATTERN.\n\nFrom-SVN: r76062", "tree": {"sha": "26fe26b671e75ed353a65429f329946b27e76929", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26fe26b671e75ed353a65429f329946b27e76929"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd3adcf8a12c0b9d478553fa84d64febf7c6fcdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd3adcf8a12c0b9d478553fa84d64febf7c6fcdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd3adcf8a12c0b9d478553fa84d64febf7c6fcdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd3adcf8a12c0b9d478553fa84d64febf7c6fcdd/comments", "author": null, "committer": null, "parents": [{"sha": "589fe865e0e273a6694757ddd4bae1df884e6a6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/589fe865e0e273a6694757ddd4bae1df884e6a6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/589fe865e0e273a6694757ddd4bae1df884e6a6d"}], "stats": {"total": 60, "additions": 48, "deletions": 12}, "files": [{"sha": "3f71bd5fd00d18a4521e6bd0541c71b319bdc667", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd3adcf8a12c0b9d478553fa84d64febf7c6fcdd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd3adcf8a12c0b9d478553fa84d64febf7c6fcdd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd3adcf8a12c0b9d478553fa84d64febf7c6fcdd", "patch": "@@ -1,3 +1,14 @@\n+2004-01-17  Daniel Jacobowitz  <drow@mvista.com>\n+\n+\t* rtl.h (emit_insn_before_sameloc, emit_jump_insn_before_sameloc)\n+\t(emit_call_insn_before_sameloc, emit_insn_after_sameloc)\n+\t(emit_jump_insn_after_sameloc, emit_call_insn_after_sameloc): New\n+\tmacros.\n+\t* reload1.c (emit_reload_insns): Use them.\n+\t* emit-rtl.c (emit_insn_before_sameloc, emit_insn_after_sameloc)\n+\t(emit_jump_insn_after_sameloc, emit_call_insn_after_sameloc): Check\n+\tfor NULL PATTERN.\n+\n 2004-01-17  Daniel Jacobowitz  <drow@mvista.com>\n \n \t* final.c (SEEN_BB, SEEN_NOTE, SEEN_EMITTED): Define."}, {"sha": "a77b9d1e0e9d1654aff6f7591bb87109111c3774", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd3adcf8a12c0b9d478553fa84d64febf7c6fcdd/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd3adcf8a12c0b9d478553fa84d64febf7c6fcdd/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=dd3adcf8a12c0b9d478553fa84d64febf7c6fcdd", "patch": "@@ -4383,6 +4383,9 @@ emit_insn_after_setloc (rtx pattern, rtx after, int loc)\n {\n   rtx last = emit_insn_after (pattern, after);\n \n+  if (pattern == NULL_RTX)\n+    return last;\n+\n   after = NEXT_INSN (after);\n   while (1)\n     {\n@@ -4401,6 +4404,9 @@ emit_jump_insn_after_setloc (rtx pattern, rtx after, int loc)\n {\n   rtx last = emit_jump_insn_after (pattern, after);\n \n+  if (pattern == NULL_RTX)\n+    return last;\n+\n   after = NEXT_INSN (after);\n   while (1)\n     {\n@@ -4419,6 +4425,9 @@ emit_call_insn_after_setloc (rtx pattern, rtx after, int loc)\n {\n   rtx last = emit_call_insn_after (pattern, after);\n \n+  if (pattern == NULL_RTX)\n+    return last;\n+\n   after = NEXT_INSN (after);\n   while (1)\n     {\n@@ -4438,6 +4447,9 @@ emit_insn_before_setloc (rtx pattern, rtx before, int loc)\n   rtx first = PREV_INSN (before);\n   rtx last = emit_insn_before (pattern, before);\n \n+  if (pattern == NULL_RTX)\n+    return last;\n+\n   first = NEXT_INSN (first);\n   while (1)\n     {"}, {"sha": "1df667e8f88828ba48aa70c8b493ca030985f7f2", "filename": "gcc/reload1.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd3adcf8a12c0b9d478553fa84d64febf7c6fcdd/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd3adcf8a12c0b9d478553fa84d64febf7c6fcdd/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=dd3adcf8a12c0b9d478553fa84d64febf7c6fcdd", "patch": "@@ -1,6 +1,6 @@\n /* Reload pseudo regs into hard regs for insns that require hard regs.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -6963,25 +6963,25 @@ emit_reload_insns (struct insn_chain *chain)\n      reloads for the operand.  The RELOAD_OTHER output reloads are\n      output in descending order by reload number.  */\n \n-  emit_insn_before (other_input_address_reload_insns, insn);\n-  emit_insn_before (other_input_reload_insns, insn);\n+  emit_insn_before_sameloc (other_input_address_reload_insns, insn);\n+  emit_insn_before_sameloc (other_input_reload_insns, insn);\n \n   for (j = 0; j < reload_n_operands; j++)\n     {\n-      emit_insn_before (inpaddr_address_reload_insns[j], insn);\n-      emit_insn_before (input_address_reload_insns[j], insn);\n-      emit_insn_before (input_reload_insns[j], insn);\n+      emit_insn_before_sameloc (inpaddr_address_reload_insns[j], insn);\n+      emit_insn_before_sameloc (input_address_reload_insns[j], insn);\n+      emit_insn_before_sameloc (input_reload_insns[j], insn);\n     }\n \n-  emit_insn_before (other_operand_reload_insns, insn);\n-  emit_insn_before (operand_reload_insns, insn);\n+  emit_insn_before_sameloc (other_operand_reload_insns, insn);\n+  emit_insn_before_sameloc (operand_reload_insns, insn);\n \n   for (j = 0; j < reload_n_operands; j++)\n     {\n-      rtx x = emit_insn_after (outaddr_address_reload_insns[j], insn);\n-      x = emit_insn_after (output_address_reload_insns[j], x);\n-      x = emit_insn_after (output_reload_insns[j], x);\n-      emit_insn_after (other_output_reload_insns[j], x);\n+      rtx x = emit_insn_after_sameloc (outaddr_address_reload_insns[j], insn);\n+      x = emit_insn_after_sameloc (output_address_reload_insns[j], x);\n+      x = emit_insn_after_sameloc (output_reload_insns[j], x);\n+      emit_insn_after_sameloc (other_output_reload_insns[j], x);\n     }\n \n   /* For all the spill regs newly reloaded in this instruction,"}, {"sha": "fbd8eca337fd1ff6bda73ccb65dbbbca4b3b5884", "filename": "gcc/rtl.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd3adcf8a12c0b9d478553fa84d64febf7c6fcdd/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd3adcf8a12c0b9d478553fa84d64febf7c6fcdd/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=dd3adcf8a12c0b9d478553fa84d64febf7c6fcdd", "patch": "@@ -1573,6 +1573,19 @@ extern rtx next_label (rtx);\n extern rtx next_cc0_user (rtx);\n extern rtx prev_cc0_setter (rtx);\n \n+#define emit_insn_before_sameloc(INSN, BEFORE) \\\n+  emit_insn_before_setloc (INSN, BEFORE, INSN_LOCATOR (BEFORE))\n+#define emit_jump_insn_before_sameloc(INSN, BEFORE) \\\n+  emit_jump_insn_before_setloc (INSN, BEFORE, INSN_LOCATOR (BEFORE))\n+#define emit_call_insn_before_sameloc(INSN, BEFORE) \\\n+  emit_call_insn_before_setloc (INSN, BEFORE, INSN_LOCATOR (BEFORE))\n+#define emit_insn_after_sameloc(INSN, AFTER) \\\n+  emit_insn_after_setloc (INSN, AFTER, INSN_LOCATOR (AFTER))\n+#define emit_jump_insn_after_sameloc(INSN, AFTER) \\\n+  emit_jump_insn_after_setloc (INSN, AFTER, INSN_LOCATOR (AFTER))\n+#define emit_call_insn_after_sameloc(INSN, AFTER) \\\n+  emit_call_insn_after_setloc (INSN, AFTER, INSN_LOCATOR (AFTER))\n+\n /* In cfglayout.c  */\n extern tree choose_inner_scope (tree, tree);\n extern int insn_line (rtx);"}]}