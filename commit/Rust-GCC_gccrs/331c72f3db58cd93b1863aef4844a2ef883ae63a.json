{"sha": "331c72f3db58cd93b1863aef4844a2ef883ae63a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMxYzcyZjNkYjU4Y2Q5M2IxODYzYWVmNDg0NGEyZWY4ODNhZTYzYQ==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2004-07-10T22:55:40Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-07-10T22:55:40Z"}, "message": "trans-array.c (gfc_build_null_descriptor): New function.\n\n\t* trans-array.c (gfc_build_null_descriptor): New function.\n\t(gfc_trans_static_array_pointer): Use it.\n\t* trans-array.h (gfc_build_null_descriptor): Add prototype.\n\t* trans-expr.c (gfc_conv_structure): Handle array pointers.\ntestsuite/\n\t* gfortran.fortran-torture/execute/der_init_5.f90: Enable more tests.\n\nFrom-SVN: r84477", "tree": {"sha": "034a0384236929485e40eb708eba4ee38fc03fdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/034a0384236929485e40eb708eba4ee38fc03fdb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/331c72f3db58cd93b1863aef4844a2ef883ae63a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/331c72f3db58cd93b1863aef4844a2ef883ae63a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/331c72f3db58cd93b1863aef4844a2ef883ae63a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/331c72f3db58cd93b1863aef4844a2ef883ae63a/comments", "author": null, "committer": null, "parents": [{"sha": "53814b8fe83f2f579f213e919b40c2793e824892", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53814b8fe83f2f579f213e919b40c2793e824892", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53814b8fe83f2f579f213e919b40c2793e824892"}], "stats": {"total": 89, "additions": 55, "deletions": 34}, "files": [{"sha": "813e7c0d400581cc3776ae6a43586c604cd74c58", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331c72f3db58cd93b1863aef4844a2ef883ae63a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331c72f3db58cd93b1863aef4844a2ef883ae63a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=331c72f3db58cd93b1863aef4844a2ef883ae63a", "patch": "@@ -1,3 +1,10 @@\n+2004-07-10  Paul Brook  <paul@codesourcery.com>\n+\n+\t* trans-array.c (gfc_build_null_descriptor): New function.\n+\t(gfc_trans_static_array_pointer): Use it.\n+\t* trans-array.h (gfc_build_null_descriptor): Add prototype.\n+\t* trans-expr.c (gfc_conv_structure): Handle array pointers.\n+\n 2004-07-10  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \t\n \tPR fortran/16336"}, {"sha": "62ecafe767dda0c24e80f5878e7499c05c20625d", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331c72f3db58cd93b1863aef4844a2ef883ae63a/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331c72f3db58cd93b1863aef4844a2ef883ae63a/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=331c72f3db58cd93b1863aef4844a2ef883ae63a", "patch": "@@ -288,27 +288,26 @@ gfc_conv_descriptor_ubound (tree desc, tree dim)\n }\n \n \n-/* Generate an initializer for a static pointer or allocatable array.  */\n+/* Build an null array descriptor constructor.  */\n \n-void\n-gfc_trans_static_array_pointer (gfc_symbol * sym)\n+tree\n+gfc_build_null_descriptor (tree type)\n {\n-  tree tmp;\n   tree field;\n-  tree type;\n+  tree tmp;\n \n-  assert (TREE_STATIC (sym->backend_decl));\n-  /* Just zero the data member.  */\n-  type = TREE_TYPE (sym->backend_decl);\n   assert (GFC_DESCRIPTOR_TYPE_P (type));\n   assert (DATA_FIELD == 0);\n   field = TYPE_FIELDS (type);\n \n+  /* Set a NULL data pointer.  */\n   tmp = tree_cons (field, null_pointer_node, NULL_TREE);\n   tmp = build1 (CONSTRUCTOR, type, tmp);\n   TREE_CONSTANT (tmp) = 1;\n   TREE_INVARIANT (tmp) = 1;\n-  DECL_INITIAL (sym->backend_decl) = tmp;\n+  /* All other fields are ignored.  */\n+\n+  return tmp;\n }\n \n \n@@ -422,6 +421,20 @@ gfc_add_ss_to_loop (gfc_loopinfo * loop, gfc_ss * head)\n }\n \n \n+/* Generate an initializer for a static pointer or allocatable array.  */\n+\n+void\n+gfc_trans_static_array_pointer (gfc_symbol * sym)\n+{\n+  tree type;\n+\n+  assert (TREE_STATIC (sym->backend_decl));\n+  /* Just zero the data member.  */\n+  type = TREE_TYPE (sym->backend_decl);\n+  DECL_INITIAL (sym->backend_decl) =gfc_build_null_descriptor (type);\n+}\n+\n+\n /* Generate code to allocate an array temporary, or create a variable to\n    hold the data.  */\n "}, {"sha": "ee7db9beaee67362b8e59cf539c73701c1a19e2b", "filename": "gcc/fortran/trans-array.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331c72f3db58cd93b1863aef4844a2ef883ae63a/gcc%2Ffortran%2Ftrans-array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331c72f3db58cd93b1863aef4844a2ef883ae63a/gcc%2Ffortran%2Ftrans-array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.h?ref=331c72f3db58cd93b1863aef4844a2ef883ae63a", "patch": "@@ -73,6 +73,8 @@ void gfc_trans_scalarized_loop_boundary (gfc_loopinfo *, stmtblock_t *);\n void gfc_conv_loop_setup (gfc_loopinfo *);\n /* Resolve array assignment dependencies.  */\n void gfc_conv_resolve_dependencies (gfc_loopinfo *, gfc_ss *, gfc_ss *);\n+/* Build an null array descriptor constructor.  */\n+tree gfc_build_null_descriptor (tree);\n \n /* Get a single array element.  */\n void gfc_conv_array_ref (gfc_se *, gfc_array_ref *);"}, {"sha": "a8412bdcf28119cf4025c46d3cb5c5519bbe2726", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331c72f3db58cd93b1863aef4844a2ef883ae63a/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331c72f3db58cd93b1863aef4844a2ef883ae63a/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=331c72f3db58cd93b1863aef4844a2ef883ae63a", "patch": "@@ -1379,7 +1379,6 @@ gfc_conv_structure (gfc_se * se, gfc_expr * expr, int init)\n   tree val;\n   gfc_se cse;\n   tree type;\n-  tree arraytype;\n \n   assert (expr->expr_type == EXPR_STRUCTURE || expr->expr_type == EXPR_NULL);\n   type = gfc_typenode_for_spec (&expr->ts);\n@@ -1397,32 +1396,28 @@ gfc_conv_structure (gfc_se * se, gfc_expr * expr, int init)\n       /* Evaluate the expression for this component.  */\n       if (init)\n \t{\n-\t  if (!cm->pointer)\n+\t  if (cm->dimension)\n \t    {\n-\t      /* Initializing a non-pointer element.  */\n-\t      if (cm->dimension)\n-\t\t{\n-\t\t  arraytype = TREE_TYPE (cm->backend_decl);\n-\t\t  cse.expr = gfc_conv_array_initializer (arraytype, c->expr);\n-\t\t}\n-\t      else if (cm->ts.type == BT_DERIVED)\n-\t\tgfc_conv_structure (&cse, c->expr, 1);\n-\t      else\n-\t\tgfc_conv_expr (&cse, c->expr);\n+\t      tree arraytype;\n+\t      arraytype = TREE_TYPE (cm->backend_decl);\n \n+\t      /* Arrays need special handling.  */\n+\t      if (cm->pointer)\n+\t\tcse.expr = gfc_build_null_descriptor (arraytype);\n+\t      else\n+\t\tcse.expr = gfc_conv_array_initializer (arraytype, c->expr);\n \t    }\n-\t  else\n+\t  else if (cm->pointer)\n \t    {\n-\t      /* Pointer components may only be initialized to\n-\t\t NULL. This should have been enforced by the frontend.  */\n-\t      if (cm->dimension)\n-\t\t{\n-\t\t  gfc_todo_error (\"Initialization of pointer members\");\n-\t\t}\n-\t      else\n-\t\tcse.expr = fold_convert (TREE_TYPE (cm->backend_decl), \n-\t\t\t\t\t null_pointer_node);\n+\t      /* Pointer components may only be initialized to NULL.  */\n+\t      assert (c->expr->expr_type == EXPR_NULL);\n+\t      cse.expr = fold_convert (TREE_TYPE (cm->backend_decl), \n+\t\t\t\t       null_pointer_node);\n \t    }\n+\t  else if (cm->ts.type == BT_DERIVED)\n+\t    gfc_conv_structure (&cse, c->expr, 1);\n+\t  else\n+\t    gfc_conv_expr (&cse, c->expr);\n \t}\n       else\n \t{"}, {"sha": "497eca53383df5877a0c329ecc39a443622ca3ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331c72f3db58cd93b1863aef4844a2ef883ae63a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331c72f3db58cd93b1863aef4844a2ef883ae63a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=331c72f3db58cd93b1863aef4844a2ef883ae63a", "patch": "@@ -1,3 +1,7 @@\n+2004-07-10  Paul Brook  <paul@codesourcery.com>\n+\n+\t* gfortran.fortran-torture/execute/der_init_5.f90: Enable more tests.\n+\n 2004-07-10  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/15969"}, {"sha": "c81d9260e557df410cb287e27a04199af0c4c748", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/der_init_5.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331c72f3db58cd93b1863aef4844a2ef883ae63a/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fder_init_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331c72f3db58cd93b1863aef4844a2ef883ae63a/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fder_init_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fder_init_5.f90?ref=331c72f3db58cd93b1863aef4844a2ef883ae63a", "patch": "@@ -5,12 +5,12 @@ program der_init_5\n   type t\n      type(t), pointer :: a => NULL()\n      real, pointer :: b => NULL()\n-!     character, pointer :: c => NULL()\n-!     integer, pointer, dimension(:) :: d => NULL()\n+     character, pointer :: c => NULL()\n+     integer, pointer, dimension(:) :: d => NULL()\n   end type t\n   type (t) :: p\n   if (associated(p%a)) call abort()\n   if (associated(p%b)) call abort()\n !  if (associated(p%c)) call abort()\n-!  if (associated(p%d)) call abort()\n+  if (associated(p%d)) call abort()\n end"}]}