{"sha": "a5d83d61416423fd29146e2743e2d68a467131b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVkODNkNjE0MTY0MjNmZDI5MTQ2ZTI3NDNlMmQ2OGE0NjcxMzFiOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-14T10:09:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-14T10:09:30Z"}, "message": "[multiple changes]\n\n2010-06-14  Robert Dewar  <dewar@adacore.com>\n\n\t* opt.ads, sem.adb, sem_elab.adb: Minor reformatting\n\n2010-06-14  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_aggr.adb (Has_Address_Clause): Moved to Exp_Util, and there it\n\tis renamed as Has_Following_Address_Clause.\n\t* exp_ch3.adb (Needs_Simple_Initialization): Add Consider_IS argument\n\tto allow the caller to avoid Initialize_Scalars having an effect.\n\t(Expand_N_Object_Declaration): Do not do Initialize_Scalars stuff for\n\tscalars with an address clause specified.\n\t* exp_ch3.ads (Needs_Simple_Initialization): Add Consider_IS argument\n\tto allow the caller to avoid Initialize_Scalars having an effect.\n\t* exp_util.adb (Has_Following_Address_Clause): Moved here from Exp_Aggr\n\t(where it was called Has_Address_Clause).\n\t* exp_util.ads (Has_Following_Address_Clause): Moved here from Exp_Aggr\n\t(where it was called Has_Address_Clause).\n\t* freeze.adb (Warn_Overlay): Suppress message about overlaying causing\n\tproblems for Initialize_Scalars (since we no longer initialize objects\n\twith an address clause.\n\n2010-06-14  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_prag.adb (Expand_Pragma_Check): Set Loc of generated code from\n\tcondition.\n\n2010-06-14  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Set Debug_Info_Needed\n\ton the entity of an implicitly generated postcondition procedure.\n\n2010-06-14  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch7.adb (Preserve_Full_Attributes): Propagate\n\tDiscriminant_Constraint elist from full view to private view.\n\nFrom-SVN: r160720", "tree": {"sha": "35b9368d0b998fbaf7bbcf8ec4e412bbf25e9bac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35b9368d0b998fbaf7bbcf8ec4e412bbf25e9bac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5d83d61416423fd29146e2743e2d68a467131b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5d83d61416423fd29146e2743e2d68a467131b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5d83d61416423fd29146e2743e2d68a467131b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5d83d61416423fd29146e2743e2d68a467131b8/comments", "author": null, "committer": null, "parents": [{"sha": "be8e26ba4e36a447fea9fa0f3e842dddd7c23e14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be8e26ba4e36a447fea9fa0f3e842dddd7c23e14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be8e26ba4e36a447fea9fa0f3e842dddd7c23e14"}], "stats": {"total": 170, "additions": 119, "deletions": 51}, "files": [{"sha": "3b5d5f6fd4b367f72270558386c26dae49f7ea48", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d83d61416423fd29146e2743e2d68a467131b8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d83d61416423fd29146e2743e2d68a467131b8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a5d83d61416423fd29146e2743e2d68a467131b8", "patch": "@@ -1,3 +1,40 @@\n+2010-06-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* opt.ads, sem.adb, sem_elab.adb: Minor reformatting\n+\n+2010-06-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_aggr.adb (Has_Address_Clause): Moved to Exp_Util, and there it\n+\tis renamed as Has_Following_Address_Clause.\n+\t* exp_ch3.adb (Needs_Simple_Initialization): Add Consider_IS argument\n+\tto allow the caller to avoid Initialize_Scalars having an effect.\n+\t(Expand_N_Object_Declaration): Do not do Initialize_Scalars stuff for\n+\tscalars with an address clause specified.\n+\t* exp_ch3.ads (Needs_Simple_Initialization): Add Consider_IS argument\n+\tto allow the caller to avoid Initialize_Scalars having an effect.\n+\t* exp_util.adb (Has_Following_Address_Clause): Moved here from Exp_Aggr\n+\t(where it was called Has_Address_Clause).\n+\t* exp_util.ads (Has_Following_Address_Clause): Moved here from Exp_Aggr\n+\t(where it was called Has_Address_Clause).\n+\t* freeze.adb (Warn_Overlay): Suppress message about overlaying causing\n+\tproblems for Initialize_Scalars (since we no longer initialize objects\n+\twith an address clause.\n+\n+2010-06-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_prag.adb (Expand_Pragma_Check): Set Loc of generated code from\n+\tcondition.\n+\n+2010-06-14  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Set Debug_Info_Needed\n+\ton the entity of an implicitly generated postcondition procedure.\n+\n+2010-06-14  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch7.adb (Preserve_Full_Attributes): Propagate\n+\tDiscriminant_Constraint elist from full view to private view.\n+\n 2010-06-14  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_res.adb: Minor reformatting"}, {"sha": "dc6c8bb90d07768042f94a4d7a0ca7e67aa91174", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 9, "deletions": 36, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d83d61416423fd29146e2743e2d68a467131b8/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d83d61416423fd29146e2743e2d68a467131b8/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=a5d83d61416423fd29146e2743e2d68a467131b8", "patch": "@@ -4122,12 +4122,6 @@ package body Exp_Aggr is\n       --  array sub-aggregate we start the computation from. Dim is the\n       --  dimension corresponding to the sub-aggregate.\n \n-      function Has_Address_Clause (D : Node_Id) return Boolean;\n-      --  If the aggregate is the expression in an object declaration, it\n-      --  cannot be expanded in place. This function does a lookahead in the\n-      --  current declarative part to find an address clause for the object\n-      --  being declared.\n-\n       function In_Place_Assign_OK return Boolean;\n       --  Simple predicate to determine whether an aggregate assignment can\n       --  be done in place, because none of the new values can depend on the\n@@ -4434,35 +4428,6 @@ package body Exp_Aggr is\n          end if;\n       end Compute_Others_Present;\n \n-      ------------------------\n-      -- Has_Address_Clause --\n-      ------------------------\n-\n-      function Has_Address_Clause (D : Node_Id) return Boolean is\n-         Id   : constant Entity_Id := Defining_Identifier (D);\n-         Decl : Node_Id;\n-\n-      begin\n-         Decl := Next (D);\n-         while Present (Decl) loop\n-            if Nkind (Decl) = N_At_Clause\n-               and then Chars (Identifier (Decl)) = Chars (Id)\n-            then\n-               return True;\n-\n-            elsif Nkind (Decl) = N_Attribute_Definition_Clause\n-               and then Chars (Decl) = Name_Address\n-               and then Chars (Name (Decl)) = Chars (Id)\n-            then\n-               return True;\n-            end if;\n-\n-            Next (Decl);\n-         end loop;\n-\n-         return False;\n-      end Has_Address_Clause;\n-\n       ------------------------\n       -- In_Place_Assign_OK --\n       ------------------------\n@@ -5162,6 +5127,8 @@ package body Exp_Aggr is\n          Build_Activation_Chain_Entity (N);\n       end if;\n \n+      --  Should document these individual tests ???\n+\n       if not Has_Default_Init_Comps (N)\n          and then Comes_From_Source (Parent (N))\n          and then Nkind (Parent (N)) = N_Object_Declaration\n@@ -5170,7 +5137,13 @@ package body Exp_Aggr is\n          and then N = Expression (Parent (N))\n          and then not Is_Bit_Packed_Array (Typ)\n          and then not Has_Controlled_Component (Typ)\n-         and then not Has_Address_Clause (Parent (N))\n+\n+      --  If the aggregate is the expression in an object declaration, it\n+      --  cannot be expanded in place. Lookahead in the current declarative\n+      --  part to find an address clause for the object being declared. If\n+      --  one is present, we cannot build in place. Unclear comment???\n+\n+         and then not Has_Following_Address_Clause (Parent (N))\n       then\n          Tmp := Defining_Identifier (Parent (N));\n          Set_No_Initialization (Parent (N));"}, {"sha": "e36c8dcf24f0e5024ee60b4a9242e2bbcc866393", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d83d61416423fd29146e2743e2d68a467131b8/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d83d61416423fd29146e2743e2d68a467131b8/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=a5d83d61416423fd29146e2743e2d68a467131b8", "patch": "@@ -4466,7 +4466,10 @@ package body Exp_Ch3 is\n          --  it will be assigned subsequently. In particular, there is no point\n          --  in applying Initialize_Scalars to such a temporary.\n \n-         elsif Needs_Simple_Initialization (Typ)\n+         elsif Needs_Simple_Initialization\n+                 (Typ,\n+                  Initialize_Scalars\n+                    and then not Has_Following_Address_Clause (N))\n            and then not Is_Internal (Def_Id)\n            and then not Has_Init_Expression (N)\n          then\n@@ -8145,7 +8148,14 @@ package body Exp_Ch3 is\n    -- Needs_Simple_Initialization --\n    ---------------------------------\n \n-   function Needs_Simple_Initialization (T : Entity_Id) return Boolean is\n+   function Needs_Simple_Initialization\n+     (T           : Entity_Id;\n+      Consider_IS : Boolean := True) return Boolean\n+   is\n+      Consider_IS_NS : constant Boolean :=\n+                         Normalize_Scalars\n+                           or (Initialize_Scalars and Consider_IS);\n+\n    begin\n       --  Check for private type, in which case test applies to the underlying\n       --  type of the private type.\n@@ -8167,7 +8177,7 @@ package body Exp_Ch3 is\n       --  types.\n \n       elsif Is_Access_Type (T)\n-        or else (Init_Or_Norm_Scalars and then (Is_Scalar_Type (T)))\n+        or else (Consider_IS_NS and then (Is_Scalar_Type (T)))\n       then\n          return True;\n \n@@ -8176,7 +8186,7 @@ package body Exp_Ch3 is\n       --  expanding an aggregate (since in the latter case they will be\n       --  filled with appropriate initializing values before they are used).\n \n-      elsif Init_Or_Norm_Scalars\n+      elsif Consider_IS_NS\n         and then\n           (Root_Type (T) = Standard_String\n              or else Root_Type (T) = Standard_Wide_String"}, {"sha": "9b838b0b652bb109c0483a76b73645fea244c01b", "filename": "gcc/ada/exp_ch3.ads", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d83d61416423fd29146e2743e2d68a467131b8/gcc%2Fada%2Fexp_ch3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d83d61416423fd29146e2743e2d68a467131b8/gcc%2Fada%2Fexp_ch3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.ads?ref=a5d83d61416423fd29146e2743e2d68a467131b8", "patch": "@@ -126,14 +126,18 @@ package Exp_Ch3 is\n    --  then tags components located at variable positions of Target are\n    --  initialized.\n \n-   function Needs_Simple_Initialization (T : Entity_Id) return Boolean;\n+   function Needs_Simple_Initialization\n+     (T           : Entity_Id;\n+      Consider_IS : Boolean := True) return Boolean;\n    --  Certain types need initialization even though there is no specific\n    --  initialization routine. In this category are access types (which need\n    --  initializing to null), packed array types whose implementation is a\n    --  modular type, and all scalar types if Normalize_Scalars is set, as well\n    --  as private types whose underlying type is present and meets any of these\n    --  criteria. Finally, descendants of String and Wide_String also need\n-   --  initialization in Initialize/Normalize_Scalars mode.\n+   --  initialization in Initialize/Normalize_Scalars mode. Consider_IS is\n+   --  normally True. If it is False, the Initialize_Scalars is not considered\n+   --  in determining whether simple initialization is needed.\n \n    function Get_Simple_Init_Val\n      (T    : Entity_Id;"}, {"sha": "7ff2f77eedb9ba07e736e8e92a50fb9a182b232d", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d83d61416423fd29146e2743e2d68a467131b8/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d83d61416423fd29146e2743e2d68a467131b8/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=a5d83d61416423fd29146e2743e2d68a467131b8", "patch": "@@ -269,8 +269,8 @@ package body Exp_Prag is\n    --------------------------\n \n    procedure Expand_Pragma_Check (N : Node_Id) is\n-      Loc  : constant Source_Ptr := Sloc (N);\n       Cond : constant Node_Id    := Arg2 (N);\n+      Loc  : constant Source_Ptr := Sloc (Cond);\n       Nam  : constant Name_Id    := Chars (Arg1 (N));\n       Msg  : Node_Id;\n "}, {"sha": "1fc19daaefede0bfc0f488a6503dc8d6e96757d6", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d83d61416423fd29146e2743e2d68a467131b8/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d83d61416423fd29146e2743e2d68a467131b8/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=a5d83d61416423fd29146e2743e2d68a467131b8", "patch": "@@ -2143,6 +2143,37 @@ package body Exp_Util is\n       return False;\n    end Has_Controlled_Coextensions;\n \n+   ------------------------\n+   -- Has_Address_Clause --\n+   ------------------------\n+\n+   --  Should this function check the private part in a package ???\n+\n+   function Has_Following_Address_Clause (D : Node_Id) return Boolean is\n+      Id   : constant Entity_Id := Defining_Identifier (D);\n+      Decl : Node_Id;\n+\n+   begin\n+      Decl := Next (D);\n+      while Present (Decl) loop\n+         if Nkind (Decl) = N_At_Clause\n+           and then Chars (Identifier (Decl)) = Chars (Id)\n+         then\n+            return True;\n+\n+         elsif Nkind (Decl) = N_Attribute_Definition_Clause\n+           and then Chars (Decl) = Name_Address\n+           and then Chars (Name (Decl)) = Chars (Id)\n+         then\n+            return True;\n+         end if;\n+\n+         Next (Decl);\n+      end loop;\n+\n+      return False;\n+   end Has_Following_Address_Clause;\n+\n    --------------------\n    -- Homonym_Number --\n    --------------------"}, {"sha": "b036338da972767280f9236b4a1a88c836cc4ffd", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d83d61416423fd29146e2743e2d68a467131b8/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d83d61416423fd29146e2743e2d68a467131b8/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=a5d83d61416423fd29146e2743e2d68a467131b8", "patch": "@@ -444,6 +444,11 @@ package Exp_Util is\n    --  Determine whether a record type has anonymous access discriminants with\n    --  a controlled designated type.\n \n+   function Has_Following_Address_Clause (D : Node_Id) return Boolean;\n+   --  D is the node for an object declaration. This function searches the\n+   --  current declarative part to look for an address clause for the object\n+   --  being declared, and returns True if one is found.\n+\n    function Homonym_Number (Subp : Entity_Id) return Nat;\n    --  Here subp is the entity for a subprogram. This routine returns the\n    --  homonym number used to disambiguate overloaded subprograms in the same"}, {"sha": "e29904f158f4fdb7c1f70d8b1de19236f4ca1cd4", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d83d61416423fd29146e2743e2d68a467131b8/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d83d61416423fd29146e2743e2d68a467131b8/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=a5d83d61416423fd29146e2743e2d68a467131b8", "patch": "@@ -5659,16 +5659,18 @@ package body Freeze is\n \n       --  We only give the warning for non-imported entities of a type for\n       --  which a non-null base init proc is defined, or for objects of access\n-      --  types with implicit null initialization, or when Initialize_Scalars\n+      --  types with implicit null initialization, or when Normalize_Scalars\n       --  applies and the type is scalar or a string type (the latter being\n       --  tested for because predefined String types are initialized by inline\n-      --  code rather than by an init_proc).\n+      --  code rather than by an init_proc). Note that we do not give the\n+      --  warning for Initialize_Scalars, since we suppressed initialization\n+      --  in this case.\n \n       if Present (Expr)\n         and then not Is_Imported (Ent)\n         and then (Has_Non_Null_Base_Init_Proc (Typ)\n                     or else Is_Access_Type (Typ)\n-                    or else (Init_Or_Norm_Scalars\n+                    or else (Normalize_Scalars\n                               and then (Is_Scalar_Type (Typ)\n                                          or else Is_String_Type (Typ))))\n       then"}, {"sha": "4581116670c0e7f0f14db5aedc87af5eda813477", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d83d61416423fd29146e2743e2d68a467131b8/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d83d61416423fd29146e2743e2d68a467131b8/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=a5d83d61416423fd29146e2743e2d68a467131b8", "patch": "@@ -183,8 +183,8 @@ package Opt is\n \n    Bind_For_Library : Boolean := False;\n    --  GNATBIND\n-   --  Set to True if the binder needs to generate a file designed for\n-   --  building a library. May be set to True by Gnatbind.Scan_Bind_Arg.\n+   --  Set to True if the binder needs to generate a file designed for building\n+   --  a library. May be set to True by Gnatbind.Scan_Bind_Arg.\n \n    Bind_Only : Boolean := False;\n    --  GNATMAKE, GPRMAKE, GPRBUILD"}, {"sha": "79cb3ee1a9dd8ac6d138bb88cc3ccd81c33b2897", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d83d61416423fd29146e2743e2d68a467131b8/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d83d61416423fd29146e2743e2d68a467131b8/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=a5d83d61416423fd29146e2743e2d68a467131b8", "patch": "@@ -1936,7 +1936,6 @@ package body Sem is\n \n             if Is_Child_Unit (Cunit_Entity (Main_Unit)) then\n                Child := Cunit_Entity (Main_Unit);\n-\n                while Is_Child_Unit (Child) loop\n                   Parent_CU :=\n                     Cunit (Get_Cunit_Entity_Unit_Number (Scope (Child)));"}, {"sha": "16cd00983bcde86050abbe4cf71e1158876f0287", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d83d61416423fd29146e2743e2d68a467131b8/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d83d61416423fd29146e2743e2d68a467131b8/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=a5d83d61416423fd29146e2743e2d68a467131b8", "patch": "@@ -2030,10 +2030,13 @@ package body Sem_Ch6 is\n          end if;\n       end if;\n \n-      --  Mark presence of postcondition proc in current scope\n+      --  Mark presence of postcondition procedure in current scope and mark\n+      --  the procedure itself as needing debug info. The latter is important\n+      --  when analyzing decision coverage (for example, for MC/DC coverage).\n \n       if Chars (Body_Id) = Name_uPostconditions then\n          Set_Has_Postconditions (Current_Scope);\n+         Set_Debug_Info_Needed (Body_Id);\n       end if;\n \n       --  Place subprogram on scope stack, and make formals visible. If there"}, {"sha": "c4310cd35f937353aa95a3483f38807ddfb7d3e9", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d83d61416423fd29146e2743e2d68a467131b8/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d83d61416423fd29146e2743e2d68a467131b8/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=a5d83d61416423fd29146e2743e2d68a467131b8", "patch": "@@ -2032,6 +2032,10 @@ package body Sem_Ch7 is\n             end if;\n \n             Set_Has_Discriminants (Priv, Has_Discriminants (Full));\n+            if Has_Discriminants (Full) then\n+               Set_Discriminant_Constraint (Priv,\n+                 Discriminant_Constraint (Full));\n+            end if;\n          end if;\n       end Preserve_Full_Attributes;\n "}, {"sha": "a07e9839d1b9fdfab7411dab60276843203c51a2", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5d83d61416423fd29146e2743e2d68a467131b8/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5d83d61416423fd29146e2743e2d68a467131b8/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=a5d83d61416423fd29146e2743e2d68a467131b8", "patch": "@@ -1892,7 +1892,7 @@ package body Sem_Elab is\n       elsif In_Task_Activation then\n          return;\n \n-      --  Nothing to do if call is within a generic unit.\n+      --  Nothing to do if call is within a generic unit\n \n       elsif Inside_A_Generic then\n          return;"}]}