{"sha": "b8ecdc772703729b75fba8b4bb94acfcb6f7cfae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhlY2RjNzcyNzAzNzI5Yjc1ZmJhOGI0YmI5NGFjZmNiNmY3Y2ZhZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-03-19T19:42:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-03-19T20:10:56Z"}, "message": "libstdc++: Add std::is_scoped_enum for C++23\n\nImplement this C++23 feature, as proposed by P1048R1.\n\nThis implementation assumes that a C++23 compiler supports concepts\nalready. I don't see any point in using preprocessor hacks to detect\ncompilers which define __cplusplus to a post-C++20 value but don't\nsupport concepts yet.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/type_traits (is_scoped_enum): Define.\n\t* include/std/version (__cpp_lib_is_scoped_enum): Define.\n\t* testsuite/20_util/is_scoped_enum/value.cc: New test.\n\t* testsuite/20_util/is_scoped_enum/version.cc: New test.", "tree": {"sha": "facc3bcfc113aa641b95ae9c9cc5ca2b5833b40d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/facc3bcfc113aa641b95ae9c9cc5ca2b5833b40d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8ecdc772703729b75fba8b4bb94acfcb6f7cfae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8ecdc772703729b75fba8b4bb94acfcb6f7cfae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8ecdc772703729b75fba8b4bb94acfcb6f7cfae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8ecdc772703729b75fba8b4bb94acfcb6f7cfae/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83855386c41b78c92f4445e4d0e6397372136c90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83855386c41b78c92f4445e4d0e6397372136c90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83855386c41b78c92f4445e4d0e6397372136c90"}], "stats": {"total": 107, "additions": 107, "deletions": 0}, "files": [{"sha": "eeab1ca65fc8e81d3e3fd58e3686dc42802ec08c", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ecdc772703729b75fba8b4bb94acfcb6f7cfae/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ecdc772703729b75fba8b4bb94acfcb6f7cfae/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=b8ecdc772703729b75fba8b4bb94acfcb6f7cfae", "patch": "@@ -3279,6 +3279,23 @@ template <typename _From, typename _To>\n     inline constexpr bool is_unbounded_array_v\n       = is_unbounded_array<_Tp>::value;\n \n+#if __cplusplus > 202002L\n+#define __cpp_lib_is_scoped_enum 202011L\n+\n+  template<typename _Tp>\n+    struct is_scoped_enum\n+    : false_type\n+    { };\n+\n+  template<typename _Tp> requires __is_enum(_Tp)\n+    struct is_scoped_enum<_Tp>\n+    : __not_<is_convertible<_Tp, __underlying_type(_Tp)>>::type\n+    { };\n+\n+  template<typename _Tp>\n+    inline constexpr bool is_scoped_enum_v = is_scoped_enum<_Tp>::value;\n+#endif // C++23\n+\n #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n \n #define __cpp_lib_is_constant_evaluated 201811L"}, {"sha": "cb25148fca5ff9473255f8a8c64be20a8b8c1232", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ecdc772703729b75fba8b4bb94acfcb6f7cfae/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ecdc772703729b75fba8b4bb94acfcb6f7cfae/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=b8ecdc772703729b75fba8b4bb94acfcb6f7cfae", "patch": "@@ -259,6 +259,7 @@\n \n #if __cplusplus > 202002L\n // c++2b\n+#define __cpp_lib_is_scoped_enum 202011L\n #define __cpp_lib_string_contains 202011L\n #define __cpp_lib_to_underlying 202102L\n #endif // C++2b"}, {"sha": "bab7263ae4a2c34aea40c1942fa3af5fc9506edc", "filename": "libstdc++-v3/testsuite/20_util/is_scoped_enum/value.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ecdc772703729b75fba8b4bb94acfcb6f7cfae/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_scoped_enum%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ecdc772703729b75fba8b4bb94acfcb6f7cfae/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_scoped_enum%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_scoped_enum%2Fvalue.cc?ref=b8ecdc772703729b75fba8b4bb94acfcb6f7cfae", "patch": "@@ -0,0 +1,62 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do compile { target c++23 } }\n+\n+#include <type_traits>\n+\n+#ifndef __cpp_lib_is_scoped_enum\n+# error \"Feature test macro for is_scoped_enum is missing in <type_traits>\"\n+#elif __cpp_lib_is_scoped_enum < 202011L\n+# error \"Feature test macro for is_scoped_enum has wrong value in <type_traits>\"\n+#endif\n+\n+#include <testsuite_tr1.h>\n+\n+template<typename T>\n+  concept Is_scoped_enum\n+    = __gnu_test::test_category<std::is_scoped_enum, T>(true);\n+\n+void\n+test01()\n+{\n+  enum class E { e1, e2 };\n+  static_assert( Is_scoped_enum<E> );\n+  enum class Ec : char { e1, e2 };\n+  static_assert( Is_scoped_enum<Ec> );\n+\n+  // negative tests\n+  enum U { u1, u2 };\n+  static_assert( ! Is_scoped_enum<U> );\n+  enum F : int { f1, f2 };\n+  static_assert( ! Is_scoped_enum<F> );\n+  struct S { };\n+  static_assert( ! Is_scoped_enum<S> );\n+\n+  static_assert( ! Is_scoped_enum<int> );\n+  static_assert( ! Is_scoped_enum<int[]> );\n+  static_assert( ! Is_scoped_enum<int[2]> );\n+  static_assert( ! Is_scoped_enum<int[][2]> );\n+  static_assert( ! Is_scoped_enum<int[2][3]> );\n+  static_assert( ! Is_scoped_enum<int*> );\n+  static_assert( ! Is_scoped_enum<int&> );\n+  static_assert( ! Is_scoped_enum<int*&> );\n+  static_assert( ! Is_scoped_enum<int()> );\n+  static_assert( ! Is_scoped_enum<int(*)()> );\n+  static_assert( ! Is_scoped_enum<int(&)()> );\n+}"}, {"sha": "ed78fce5fbec99873881ca6ee6ecf117d5cd137f", "filename": "libstdc++-v3/testsuite/20_util/is_scoped_enum/version.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ecdc772703729b75fba8b4bb94acfcb6f7cfae/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_scoped_enum%2Fversion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ecdc772703729b75fba8b4bb94acfcb6f7cfae/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_scoped_enum%2Fversion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_scoped_enum%2Fversion.cc?ref=b8ecdc772703729b75fba8b4bb94acfcb6f7cfae", "patch": "@@ -0,0 +1,27 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do compile { target c++23 } }\n+\n+#include <version>\n+\n+#ifndef __cpp_lib_is_scoped_enum\n+# error \"Feature test macro for is_scoped_enum is missing in <version>\"\n+#elif __cpp_lib_is_scoped_enum < 202011L\n+# error \"Feature test macro for is_scoped_enum has wrong value in <version>\"\n+#endif"}]}