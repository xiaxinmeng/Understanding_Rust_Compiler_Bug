{"sha": "8405874a0e2db1806332ead2dcf3e9ec563075aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQwNTg3NGEwZTJkYjE4MDYzMzJlYWQyZGNmM2U5ZWM1NjMwNzVhYQ==", "commit": {"author": {"name": "Mark Eggleston", "email": "mark.eggleston@codethink.com", "date": "2019-12-19T15:13:25Z"}, "committer": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2019-12-19T15:13:25Z"}, "message": "Prevent conversion of character data in array constructors.\n\n   \nFix for PR fortran/92896 [10 Regression] [DEC] ICE in reduce_unary, at\nfortran/arith.c:1283.\n    \nThis was caused by an unintended side affect of \"Allow CHARACTER literals\nin assignments and data statements\" (revision 277975). If the conversion\noccurs in a array constructor it is rejected.\n\nFrom-SVN: r279583", "tree": {"sha": "90a26d11226d612f5fda08c8d2c36feb304072ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90a26d11226d612f5fda08c8d2c36feb304072ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8405874a0e2db1806332ead2dcf3e9ec563075aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8405874a0e2db1806332ead2dcf3e9ec563075aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8405874a0e2db1806332ead2dcf3e9ec563075aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8405874a0e2db1806332ead2dcf3e9ec563075aa/comments", "author": {"login": "markeggleston", "id": 42180582, "node_id": "MDQ6VXNlcjQyMTgwNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/42180582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markeggleston", "html_url": "https://github.com/markeggleston", "followers_url": "https://api.github.com/users/markeggleston/followers", "following_url": "https://api.github.com/users/markeggleston/following{/other_user}", "gists_url": "https://api.github.com/users/markeggleston/gists{/gist_id}", "starred_url": "https://api.github.com/users/markeggleston/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markeggleston/subscriptions", "organizations_url": "https://api.github.com/users/markeggleston/orgs", "repos_url": "https://api.github.com/users/markeggleston/repos", "events_url": "https://api.github.com/users/markeggleston/events{/privacy}", "received_events_url": "https://api.github.com/users/markeggleston/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa0e90e7bff935856212b64236cd540acccc66a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa0e90e7bff935856212b64236cd540acccc66a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa0e90e7bff935856212b64236cd540acccc66a0"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "7a71c70a6e9698f4d930c17f13693693642d68bf", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8405874a0e2db1806332ead2dcf3e9ec563075aa/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8405874a0e2db1806332ead2dcf3e9ec563075aa/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8405874a0e2db1806332ead2dcf3e9ec563075aa", "patch": "@@ -1,3 +1,17 @@\n+2019-12-19 Mark Eggleston  <mark.eggleston@codethink.com>\n+\n+\tPR fortran/92896\n+\t* array.c (walk_array_constructor): Replace call to gfc_convert_type\n+\twith call to gfc_convert_type_warn with new argument set to true.\n+\t(check_element_type): Replace call to cfg_convert_type with call to\n+\tgfc_convert_type_warn with new argument set to true.\n+\t* gfortran.h: Add argument \"array\" to gfc_convert_type_warn default\n+\tvalue set to false.\n+\t*intrinsic.c (gfc_convert_type_warn): Update description of arguments.\n+\tAdd new argument to argument list. Add check for conversion to numeric\n+\tor logical from character and array set to true, i.e. if conversion\n+\tfrom character is in an array constructor reject it, goto bad.\n+\n 2019-12-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/92977"}, {"sha": "bfd461252d8b490cf2f389e467caf1557b5609ad", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8405874a0e2db1806332ead2dcf3e9ec563075aa/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8405874a0e2db1806332ead2dcf3e9ec563075aa/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=8405874a0e2db1806332ead2dcf3e9ec563075aa", "patch": "@@ -1185,9 +1185,10 @@ walk_array_constructor (gfc_typespec *ts, gfc_constructor_base head)\n \t  if (m == MATCH_ERROR)\n \t    return m;\n \t}\n-      else if (!gfc_convert_type (e, ts, 1) && e->ts.type != BT_UNKNOWN)\n+      else if (!gfc_convert_type_warn (e, ts, 1, 1, true)\n+\t       && e->ts.type != BT_UNKNOWN)\n \treturn MATCH_ERROR;\n-  }\n+    }\n   return MATCH_YES;\n }\n \n@@ -1386,7 +1387,7 @@ check_element_type (gfc_expr *expr, bool convert)\n     return 0;\n \n   if (convert)\n-    return gfc_convert_type(expr, &constructor_ts, 1) ? 0 : 1;\n+    return gfc_convert_type_warn (expr, &constructor_ts, 1, 1, true) ? 0 : 1;\n \n   gfc_error (\"Element in %s array constructor at %L is %s\",\n \t     gfc_typename (&constructor_ts), &expr->where,"}, {"sha": "a266edb8ed826d0569b61cf124af7c9fb8712643", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8405874a0e2db1806332ead2dcf3e9ec563075aa/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8405874a0e2db1806332ead2dcf3e9ec563075aa/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=8405874a0e2db1806332ead2dcf3e9ec563075aa", "patch": "@@ -3189,7 +3189,8 @@ void gfc_intrinsic_done_1 (void);\n char gfc_type_letter (bt, bool logical_equals_int = false);\n gfc_symbol * gfc_get_intrinsic_sub_symbol (const char *);\n bool gfc_convert_type (gfc_expr *, gfc_typespec *, int);\n-bool gfc_convert_type_warn (gfc_expr *, gfc_typespec *, int, int);\n+bool gfc_convert_type_warn (gfc_expr *, gfc_typespec *, int, int,\n+\t\t\t    bool array = false);\n bool gfc_convert_chartype (gfc_expr *, gfc_typespec *);\n int gfc_generic_intrinsic (const char *);\n int gfc_specific_intrinsic (const char *);"}, {"sha": "c913f5ab152fc4f8f73c3e31ce60bcb168f26fd7", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8405874a0e2db1806332ead2dcf3e9ec563075aa/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8405874a0e2db1806332ead2dcf3e9ec563075aa/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=8405874a0e2db1806332ead2dcf3e9ec563075aa", "patch": "@@ -5096,10 +5096,15 @@ gfc_convert_type (gfc_expr *expr, gfc_typespec *ts, int eflag)\n      1 Generate a gfc_error()\n      2 Generate a gfc_internal_error().\n \n-   'wflag' controls the warning related to conversion.  */\n+   'wflag' controls the warning related to conversion.\n+\n+   'array' indicates whether the conversion is in an array constructor.\n+   Non-standard conversion from character to numeric not allowed if true.\n+*/\n \n bool\n-gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n+gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag,\n+\t\t       bool array)\n {\n   gfc_intrinsic_sym *sym;\n   gfc_typespec from_ts;\n@@ -5142,6 +5147,12 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n       && gfc_compare_types (&expr->ts, ts))\n     return true;\n \n+  /* If array is true then conversion is in an array constructor where\n+     non-standard conversion is not allowed.  */\n+  if (array && from_ts.type == BT_CHARACTER\n+      && (gfc_numeric_ts (ts) || ts->type == BT_LOGICAL))\n+    goto bad;\n+\n   sym = find_conv (&expr->ts, ts);\n   if (sym == NULL)\n     goto bad;"}, {"sha": "4e75067e9ceb843a63ff1a44ee6784aca627ae60", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8405874a0e2db1806332ead2dcf3e9ec563075aa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8405874a0e2db1806332ead2dcf3e9ec563075aa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8405874a0e2db1806332ead2dcf3e9ec563075aa", "patch": "@@ -1,3 +1,8 @@\n+2019-12-19 Mark Eggleston  <mark.eggleston@codethink.com>\n+\n+\tPR fortran/92896\n+\t* gfortran.dg/no_char_conversion_in_array_constructor.f90: New test.\n+\n 2019-12-19  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/mixed_size_9.c: New test."}, {"sha": "7dc4624b8b17a23d9db21a882cafd2b5ab9044ac", "filename": "gcc/testsuite/gfortran.dg/no_char_conversion_in_array_constructor.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8405874a0e2db1806332ead2dcf3e9ec563075aa/gcc%2Ftestsuite%2Fgfortran.dg%2Fno_char_conversion_in_array_constructor.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8405874a0e2db1806332ead2dcf3e9ec563075aa/gcc%2Ftestsuite%2Fgfortran.dg%2Fno_char_conversion_in_array_constructor.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fno_char_conversion_in_array_constructor.f90?ref=8405874a0e2db1806332ead2dcf3e9ec563075aa", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do compile }\n+! { dg-options \"-fdec-char-conversions\" }\n+\n+program p\n+   print *, -[integer :: 1, [integer(8) :: '2']] ! { dg-error \"Cannot convert\" }\n+   print *, -[real :: 1, [real(8) :: '2']]       ! { dg-error \"Cannot convert\" }\n+   print *, -[complex :: 1, [complex(8) :: '2']] ! { dg-error \"Cannot convert\" }\n+   print *, [logical :: 1, [logical(8) :: '2']]  ! { dg-error \"Cannot convert\" }\n+end\n+"}]}