{"sha": "2433310da1b2b5f0d00dfff01731b3cbfe405960", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQzMzMxMGRhMWIyYjVmMGQwMGRmZmYwMTczMWIzY2JmZTQwNTk2MA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2010-05-17T20:28:56Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2010-05-17T20:28:56Z"}, "message": "re PR target/44074 (Solaris 2.9 x86 Sun assembler doesn't like rep/lock prefixes on same line)\n\n\tPR target/44074\n\t* configure.ac (HAVE_AS_IX86_REP_LOCK_PREFIX): New test.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\t* config/i386/i386.c (print_operand) <case ;>: Also print ; if\n\t!HAVE_AS_IX86_REP_LOCK_PREFIX.\n\tDon't emit whitespace.\n\t* config/i386/i386.md (*rep_movdi_rex64): Use {%;} after rep.\n\t(*rep_movsi): Likewise.\n\t(*rep_movsi_rex64): Likewise.\n\t(*rep_movqi): Likewise.\n\t(*rep_movqi_rex64): Likewise.\n\t(*rep_stosdi_rex64): Likewise.\n\t(*rep_stossi): Likewise.\n\t(*rep_stossi_rex64): Likewise.\n\t(*rep_stosqi): Likewise.\n\t(*rep_stosqi_rex64): Likewise.\n\t(*cmpstrnqi_nz_1): Use {%;} after repz.\n\t(*cmpstrnqi_nz_rex_1): Likewise.\n\t(*cmpstrnqi_1): Likewise.\n\t(*cmpstrnqi_rex_1): Likewise.\n\t(*strlenqi_1): Use {%;} after repnz.\n\t(*strlenqi_rex_1): Likewise.\n\t* config/i386/sync.md (memory_barrier_nosse): Replace {%;| } by {%;} .\n\t(*sync_compare_and_swap<mode>): Likewise.\n\t(sync_double_compare_and_swap<mode>): Likewise.\n\t(*sync_double_compare_and_swapdi_pic): Likewise.\n\t(sync_old_add<mode>): Likewise.\n\t(sync_add<mode>): Likewise.\n\t(sync_sub<mode>): Likewise.\n\t(sync_<code><mode>): Likewise.\n\nFrom-SVN: r159512", "tree": {"sha": "138f930705ab7ab9cd6f8a9659d2f3d7927c2c74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/138f930705ab7ab9cd6f8a9659d2f3d7927c2c74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2433310da1b2b5f0d00dfff01731b3cbfe405960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2433310da1b2b5f0d00dfff01731b3cbfe405960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2433310da1b2b5f0d00dfff01731b3cbfe405960", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2433310da1b2b5f0d00dfff01731b3cbfe405960/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "94ea69392c7feedc84b0ab3f7674c9470ed252b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94ea69392c7feedc84b0ab3f7674c9470ed252b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94ea69392c7feedc84b0ab3f7674c9470ed252b3"}], "stats": {"total": 153, "additions": 117, "deletions": 36}, "files": [{"sha": "1e4e35d9fcd3a1a9dca4cf96e5307ea54023b73f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2433310da1b2b5f0d00dfff01731b3cbfe405960/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2433310da1b2b5f0d00dfff01731b3cbfe405960/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2433310da1b2b5f0d00dfff01731b3cbfe405960", "patch": "@@ -1,3 +1,37 @@\n+2010-05-17  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR target/44074\n+\t* configure.ac (HAVE_AS_IX86_REP_LOCK_PREFIX): New test.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\t* config/i386/i386.c (print_operand) <case ;>: Also print ; if\n+\t!HAVE_AS_IX86_REP_LOCK_PREFIX.\n+\tDon't emit whitespace.\n+\t* config/i386/i386.md (*rep_movdi_rex64): Use {%;} after rep.\n+\t(*rep_movsi): Likewise.\n+\t(*rep_movsi_rex64): Likewise.\n+\t(*rep_movqi): Likewise.\n+\t(*rep_movqi_rex64): Likewise.\n+\t(*rep_stosdi_rex64): Likewise.\n+\t(*rep_stossi): Likewise.\n+\t(*rep_stossi_rex64): Likewise.\n+\t(*rep_stosqi): Likewise.\n+\t(*rep_stosqi_rex64): Likewise.\n+\t(*cmpstrnqi_nz_1): Use {%;} after repz.\n+\t(*cmpstrnqi_nz_rex_1): Likewise.\n+\t(*cmpstrnqi_1): Likewise.\n+\t(*cmpstrnqi_rex_1): Likewise.\n+\t(*strlenqi_1): Use {%;} after repnz.\n+\t(*strlenqi_rex_1): Likewise.\n+\t* config/i386/sync.md (memory_barrier_nosse): Replace {%;| } by {%;} .\n+\t(*sync_compare_and_swap<mode>): Likewise.\n+\t(sync_double_compare_and_swap<mode>): Likewise.\n+\t(*sync_double_compare_and_swapdi_pic): Likewise.\n+\t(sync_old_add<mode>): Likewise.\n+\t(sync_add<mode>): Likewise.\n+\t(sync_sub<mode>): Likewise.\n+\t(sync_<code><mode>): Likewise.\n+\n 2010-05-17  Martin Jambor  <mjambor@suse.cz>\n \n \t* cgraph.h (cgraph_indirect_call_info): New fields anc_offset,"}, {"sha": "64632e87407f4e4f3e8bdb71291f9570b8f7adc8", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2433310da1b2b5f0d00dfff01731b3cbfe405960/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2433310da1b2b5f0d00dfff01731b3cbfe405960/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=2433310da1b2b5f0d00dfff01731b3cbfe405960", "patch": "@@ -309,6 +309,12 @@\n #endif\n \n \n+/* Define true if the assembler supports 'rep <insn>, lock <insn>'. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_IX86_REP_LOCK_PREFIX\n+#endif\n+\n+\n /* Define if your assembler supports the sahf mnemonic. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_IX86_SAHF"}, {"sha": "a54651da4e71884a7fb0dc961d5db07e442046ac", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2433310da1b2b5f0d00dfff01731b3cbfe405960/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2433310da1b2b5f0d00dfff01731b3cbfe405960/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2433310da1b2b5f0d00dfff01731b3cbfe405960", "patch": "@@ -12056,10 +12056,8 @@ print_operand (FILE *file, rtx x, int code)\n \t  return;\n \n \tcase ';':\n-#if TARGET_MACHO\n-\t  fputs (\" ; \", file);\n-#else\n-\t  putc (' ', file);\n+#if TARGET_MACHO || !HAVE_AS_IX86_REP_LOCK_PREFIX\n+\t  fputs (\";\", file);\n #endif\n \t  return;\n "}, {"sha": "35b2f215f28b1dc1754ae93a7c11bea57ce090c5", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2433310da1b2b5f0d00dfff01731b3cbfe405960/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2433310da1b2b5f0d00dfff01731b3cbfe405960/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=2433310da1b2b5f0d00dfff01731b3cbfe405960", "patch": "@@ -15865,7 +15865,7 @@\n \t(mem:BLK (match_dup 4)))\n    (use (match_dup 5))]\n   \"TARGET_64BIT\"\n-  \"rep movsq\"\n+  \"rep{%;} movsq\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"both\")\n@@ -15884,7 +15884,7 @@\n \t(mem:BLK (match_dup 4)))\n    (use (match_dup 5))]\n   \"!TARGET_64BIT\"\n-  \"rep movs{l|d}\"\n+  \"rep{%;} movs{l|d}\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"both\")\n@@ -15903,7 +15903,7 @@\n \t(mem:BLK (match_dup 4)))\n    (use (match_dup 5))]\n   \"TARGET_64BIT\"\n-  \"rep movs{l|d}\"\n+  \"rep{%;} movs{l|d}\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"both\")\n@@ -15920,7 +15920,7 @@\n \t(mem:BLK (match_dup 4)))\n    (use (match_dup 5))]\n   \"!TARGET_64BIT\"\n-  \"rep movsb\"\n+  \"rep{%;} movsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"both\")\n@@ -15937,7 +15937,7 @@\n \t(mem:BLK (match_dup 4)))\n    (use (match_dup 5))]\n   \"TARGET_64BIT\"\n-  \"rep movsb\"\n+  \"rep{%;} movsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"both\")\n@@ -16118,7 +16118,7 @@\n    (use (match_operand:DI 2 \"register_operand\" \"a\"))\n    (use (match_dup 4))]\n   \"TARGET_64BIT\"\n-  \"rep stosq\"\n+  \"rep{%;} stosq\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"store\")\n@@ -16135,7 +16135,7 @@\n    (use (match_operand:SI 2 \"register_operand\" \"a\"))\n    (use (match_dup 4))]\n   \"!TARGET_64BIT\"\n-  \"rep stos{l|d}\"\n+  \"rep{%;} stos{l|d}\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"store\")\n@@ -16152,7 +16152,7 @@\n    (use (match_operand:SI 2 \"register_operand\" \"a\"))\n    (use (match_dup 4))]\n   \"TARGET_64BIT\"\n-  \"rep stos{l|d}\"\n+  \"rep{%;} stos{l|d}\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"store\")\n@@ -16168,7 +16168,7 @@\n    (use (match_operand:QI 2 \"register_operand\" \"a\"))\n    (use (match_dup 4))]\n   \"!TARGET_64BIT\"\n-  \"rep stosb\"\n+  \"rep{%;} stosb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"store\")\n@@ -16184,7 +16184,7 @@\n    (use (match_operand:QI 2 \"register_operand\" \"a\"))\n    (use (match_dup 4))]\n   \"TARGET_64BIT\"\n-  \"rep stosb\"\n+  \"rep{%;} stosb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"store\")\n@@ -16300,7 +16300,7 @@\n    (clobber (match_operand:SI 1 \"register_operand\" \"=D\"))\n    (clobber (match_operand:SI 2 \"register_operand\" \"=c\"))]\n   \"!TARGET_64BIT\"\n-  \"repz cmpsb\"\n+  \"repz{%;} cmpsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"QI\")\n    (set_attr \"prefix_rep\" \"1\")])\n@@ -16315,7 +16315,7 @@\n    (clobber (match_operand:DI 1 \"register_operand\" \"=D\"))\n    (clobber (match_operand:DI 2 \"register_operand\" \"=c\"))]\n   \"TARGET_64BIT\"\n-  \"repz cmpsb\"\n+  \"repz{%;} cmpsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"QI\")\n    (set_attr \"prefix_rex\" \"0\")\n@@ -16351,7 +16351,7 @@\n    (clobber (match_operand:SI 1 \"register_operand\" \"=D\"))\n    (clobber (match_operand:SI 2 \"register_operand\" \"=c\"))]\n   \"!TARGET_64BIT\"\n-  \"repz cmpsb\"\n+  \"repz{%;} cmpsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"QI\")\n    (set_attr \"prefix_rep\" \"1\")])\n@@ -16369,7 +16369,7 @@\n    (clobber (match_operand:DI 1 \"register_operand\" \"=D\"))\n    (clobber (match_operand:DI 2 \"register_operand\" \"=c\"))]\n   \"TARGET_64BIT\"\n-  \"repz cmpsb\"\n+  \"repz{%;} cmpsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"QI\")\n    (set_attr \"prefix_rex\" \"0\")\n@@ -16417,7 +16417,7 @@\n    (clobber (match_operand:SI 1 \"register_operand\" \"=D\"))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_64BIT\"\n-  \"repnz scasb\"\n+  \"repnz{%;} scasb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"QI\")\n    (set_attr \"prefix_rep\" \"1\")])\n@@ -16431,7 +16431,7 @@\n    (clobber (match_operand:DI 1 \"register_operand\" \"=D\"))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\"\n-  \"repnz scasb\"\n+  \"repnz{%;} scasb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"QI\")\n    (set_attr \"prefix_rex\" \"0\")"}, {"sha": "22f36487579cef8053e18076d07c427a3c2e95e3", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2433310da1b2b5f0d00dfff01731b3cbfe405960/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2433310da1b2b5f0d00dfff01731b3cbfe405960/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=2433310da1b2b5f0d00dfff01731b3cbfe405960", "patch": "@@ -1,5 +1,5 @@\n ;; GCC machine description for i386 synchronization instructions.\n-;; Copyright (C) 2005, 2006, 2007, 2008, 2009\n+;; Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n ;; Free Software Foundation, Inc.\n ;;\n ;; This file is part of GCC.\n@@ -47,7 +47,7 @@\n \t(unspec:BLK [(match_dup 0)] UNSPEC_MFENCE))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!(TARGET_64BIT || TARGET_SSE2)\"\n-  \"lock{%;| }or{l}\\t{$0, (%%esp)|DWORD PTR [esp], 0}\"\n+  \"lock{%;} or{l}\\t{$0, (%%esp)|DWORD PTR [esp], 0}\"\n   [(set_attr \"memory\" \"unknown\")])\n \n ;; ??? It would be possible to use cmpxchg8b on pentium for DImode\n@@ -115,7 +115,7 @@\n             [(match_dup 1) (match_dup 2) (match_dup 3)] UNSPECV_CMPXCHG)\n           (match_dup 2)))]\n   \"TARGET_CMPXCHG\"\n-  \"lock{%;| }cmpxchg{<imodesuffix>}\\t{%3, %1|%1, %3}\")\n+  \"lock{%;} cmpxchg{<imodesuffix>}\\t{%3, %1|%1, %3}\")\n \n (define_insn \"sync_double_compare_and_swap<mode>\"\n   [(set (match_operand:DCASMODE 0 \"register_operand\" \"=A\")\n@@ -134,7 +134,7 @@\n \t    UNSPECV_CMPXCHG)\n           (match_dup 2)))]\n   \"\"\n-  \"lock{%;| }cmpxchg<doublemodesuffix>b\\t%1\")\n+  \"lock{%;} cmpxchg<doublemodesuffix>b\\t%1\")\n \n ;; Theoretically we'd like to use constraint \"r\" (any reg) for operand\n ;; 3, but that includes ecx.  If operand 3 and 4 are the same (like when\n@@ -162,7 +162,7 @@\n \t    UNSPECV_CMPXCHG)\n \t  (match_dup 2)))]\n   \"!TARGET_64BIT && TARGET_CMPXCHG8B && flag_pic\"\n-  \"xchg{l}\\t%%ebx, %3\\;lock{%;| }cmpxchg8b\\t%1\\;xchg{l}\\t%%ebx, %3\")\n+  \"xchg{l}\\t%%ebx, %3\\;lock{%;} cmpxchg8b\\t%1\\;xchg{l}\\t%%ebx, %3\")\n \n (define_insn \"sync_old_add<mode>\"\n   [(set (match_operand:SWI 0 \"register_operand\" \"=<r>\")\n@@ -173,7 +173,7 @@\n \t\t  (match_operand:SWI 2 \"register_operand\" \"0\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_XADD\"\n-  \"lock{%;| }xadd{<imodesuffix>}\\t{%0, %1|%1, %0}\")\n+  \"lock{%;} xadd{<imodesuffix>}\\t{%0, %1|%1, %0}\")\n \n ;; Recall that xchg implicitly sets LOCK#, so adding it again wastes space.\n (define_insn \"sync_lock_test_and_set<mode>\"\n@@ -197,15 +197,15 @@\n   if (TARGET_USE_INCDEC)\n     {\n       if (operands[1] == const1_rtx)\n-\treturn \"lock{%;| }inc{<imodesuffix>}\\t%0\";\n+\treturn \"lock{%;} inc{<imodesuffix>}\\t%0\";\n       if (operands[1] == constm1_rtx)\n-\treturn \"lock{%;| }dec{<imodesuffix>}\\t%0\";\n+\treturn \"lock{%;} dec{<imodesuffix>}\\t%0\";\n     }\n \n   if (x86_maybe_negate_const_int (&operands[1], <MODE>mode))\n-    return \"lock{%;| }sub{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n+    return \"lock{%;} sub{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n \n-  return \"lock{%;| }add{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n+  return \"lock{%;} add{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n })\n \n (define_insn \"sync_sub<mode>\"\n@@ -220,12 +220,12 @@\n   if (TARGET_USE_INCDEC)\n     {\n       if (operands[1] == const1_rtx)\n-\treturn \"lock{%;| }dec{<imodesuffix>}\\t%0\";\n+\treturn \"lock{%;} dec{<imodesuffix>}\\t%0\";\n       if (operands[1] == constm1_rtx)\n-\treturn \"lock{%;| }inc{<imodesuffix>}\\t%0\";\n+\treturn \"lock{%;} inc{<imodesuffix>}\\t%0\";\n     }\n \n-  return \"lock{%;| }sub{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n+  return \"lock{%;} sub{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n })\n \n (define_insn \"sync_<code><mode>\"\n@@ -236,4 +236,4 @@\n \t  UNSPECV_LOCK))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n-  \"lock{%;| }<logic>{<imodesuffix>}\\t{%1, %0|%0, %1}\")\n+  \"lock{%;} <logic>{<imodesuffix>}\\t{%1, %0|%0, %1}\")"}, {"sha": "2384f4249172d2d4ec3f527f6726dc1f7da98514", "filename": "gcc/configure", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2433310da1b2b5f0d00dfff01731b3cbfe405960/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2433310da1b2b5f0d00dfff01731b3cbfe405960/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=2433310da1b2b5f0d00dfff01731b3cbfe405960", "patch": "@@ -23228,7 +23228,7 @@ $as_echo \"#define HAVE_AS_IX86_DIFF_SECT_DELTA 1\" >>confdefs.h\n \n fi\n \n-    # This one is used unconditionally by i386.[ch]; it is to be defined\n+    # These two are used unconditionally by i386.[ch]; it is to be defined\n     # to 1 if the feature is present, 0 otherwise.\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for GOTOFF in data\" >&5\n $as_echo_n \"checking assembler for GOTOFF in data... \" >&6; }\n@@ -23269,6 +23269,40 @@ cat >>confdefs.h <<_ACEOF\n #define HAVE_AS_GOTOFF_IN_DATA `if test $gcc_cv_as_ix86_gotoff_in_data = yes; then echo 1; else echo 0; fi`\n _ACEOF\n \n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for rep and lock prefix\" >&5\n+$as_echo_n \"checking assembler for rep and lock prefix... \" >&6; }\n+if test \"${gcc_cv_as_ix86_rep_lock_prefix+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_ix86_rep_lock_prefix=no\n+  if test x$gcc_cv_as != x; then\n+    echo 'rep movsl\n+\t lock orl $0, (%esp)' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags  -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_ix86_rep_lock_prefix=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_ix86_rep_lock_prefix\" >&5\n+$as_echo \"$gcc_cv_as_ix86_rep_lock_prefix\" >&6; }\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_AS_IX86_REP_LOCK_PREFIX `if test $gcc_cv_as_ix86_rep_lock_prefix = yes; then echo 1; else echo 0; fi`\n+_ACEOF\n+\n+\n     ;;\n \n   ia64*-*-*)"}, {"sha": "743798e23cb73daa6d5aed47cdf3698455b7a1f4", "filename": "gcc/configure.ac", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2433310da1b2b5f0d00dfff01731b3cbfe405960/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2433310da1b2b5f0d00dfff01731b3cbfe405960/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=2433310da1b2b5f0d00dfff01731b3cbfe405960", "patch": "@@ -3276,7 +3276,7 @@ foo:\tnop\n       [AC_DEFINE(HAVE_AS_IX86_DIFF_SECT_DELTA, 1,\n         [Define if your assembler supports the subtraction of symbols in different sections.])])\n \n-    # This one is used unconditionally by i386.[ch]; it is to be defined\n+    # These two are used unconditionally by i386.[ch]; it is to be defined\n     # to 1 if the feature is present, 0 otherwise.\n     gcc_GAS_CHECK_FEATURE([GOTOFF in data],\n         gcc_cv_as_ix86_gotoff_in_data, [2,11,0],,\n@@ -3288,6 +3288,15 @@ foo:\tnop\n     AC_DEFINE_UNQUOTED(HAVE_AS_GOTOFF_IN_DATA,\n       [`if test $gcc_cv_as_ix86_gotoff_in_data = yes; then echo 1; else echo 0; fi`],\n       [Define true if the assembler supports '.long foo@GOTOFF'.])\n+\n+    gcc_GAS_CHECK_FEATURE([rep and lock prefix],\n+        gcc_cv_as_ix86_rep_lock_prefix,,,\n+\t[rep movsl\n+\t lock orl $0, (%esp)])\n+    AC_DEFINE_UNQUOTED(HAVE_AS_IX86_REP_LOCK_PREFIX,\n+      [`if test $gcc_cv_as_ix86_rep_lock_prefix = yes; then echo 1; else echo 0; fi`],\n+      [Define true if the assembler supports 'rep <insn>, lock <insn>'.])\n+\n     ;;\n \n   ia64*-*-*)"}]}