{"sha": "4b6c5340748f9914998e4beafe3832acfe5d8aae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI2YzUzNDA3NDhmOTkxNDk5OGU0YmVhZmUzODMyYWNmZTVkOGFhZQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2001-08-08T10:36:07Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2001-08-08T10:36:07Z"}, "message": "Use cselib for alias analysis in sched_ebb\n\nFrom-SVN: r44716", "tree": {"sha": "043435f05bd853f32bf16fc32dbdcd90257371a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/043435f05bd853f32bf16fc32dbdcd90257371a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b6c5340748f9914998e4beafe3832acfe5d8aae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b6c5340748f9914998e4beafe3832acfe5d8aae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b6c5340748f9914998e4beafe3832acfe5d8aae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b6c5340748f9914998e4beafe3832acfe5d8aae/comments", "author": null, "committer": null, "parents": [{"sha": "d26f648a0a049e90d2a9e572238e57ae1f93ba27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d26f648a0a049e90d2a9e572238e57ae1f93ba27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d26f648a0a049e90d2a9e572238e57ae1f93ba27"}], "stats": {"total": 62, "additions": 53, "deletions": 9}, "files": [{"sha": "4b5de1919db7375f1610f23c112272206e74f17d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6c5340748f9914998e4beafe3832acfe5d8aae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6c5340748f9914998e4beafe3832acfe5d8aae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b6c5340748f9914998e4beafe3832acfe5d8aae", "patch": "@@ -5,6 +5,15 @@\n \n \t* config/ia64/ia64.md (cond_opsi2_internal, cond_opsi2_internal_b):\n \tTurn into define_insn_and_split.\n+\t\n+\t* sched-deps.c: Include \"cselib.h\".\n+\t(add_insn_mem_dependence, sched_analyze_1, sched_analyze_2):\n+\tUse cselib to turn memory addresses into VALUEs.\n+\t(sched_analyze): Call cselib_init/cselib_finish if necessary.\n+\t* sched-int.h (struct sched_info): New member USE_CSELIB.\n+\t* sched-ebb.c (ebb_sched_info): Initialize it.\n+\t* sched-rgn.c (rgn_sched_info): Likewise.\n+\t* Makefile.in (sched-deps.o): Update dependencies.\n \n 2001-08-08  Graham Stott  <grahams@redhat.com>\n "}, {"sha": "266201b73a985c2e3f39a0fccf9cae2cf1877f87", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6c5340748f9914998e4beafe3832acfe5d8aae/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6c5340748f9914998e4beafe3832acfe5d8aae/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=4b6c5340748f9914998e4beafe3832acfe5d8aae", "patch": "@@ -1529,7 +1529,7 @@ haifa-sched.o : haifa-sched.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) sched-int.h \\\n    $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h $(TM_P_H)\n sched-deps.o : sched-deps.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) sched-int.h \\\n    $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h flags.h insn-config.h function.h \\\n-   $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h $(TM_P_H)\n+   $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h cselib.h $(PARAMS_H) $(TM_P_H)\n sched-rgn.o : sched-rgn.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) sched-int.h \\\n    $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h flags.h insn-config.h function.h \\\n    $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h $(TM_P_H)"}, {"sha": "3662b7a7ec441d6e503c0c370b2225e0586422be", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6c5340748f9914998e4beafe3832acfe5d8aae/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6c5340748f9914998e4beafe3832acfe5d8aae/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=4b6c5340748f9914998e4beafe3832acfe5d8aae", "patch": "@@ -39,6 +39,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"recog.h\"\n #include \"sched-int.h\"\n #include \"params.h\"\n+#include \"cselib.h\"\n \n extern char *reg_known_equiv_p;\n extern rtx *reg_known_value;\n@@ -482,6 +483,11 @@ add_insn_mem_dependence (deps, insn_list, mem_list, insn, mem)\n   link = alloc_INSN_LIST (insn, *insn_list);\n   *insn_list = link;\n \n+  if (current_sched_info->use_cselib)\n+    {\n+      mem = shallow_copy_rtx (mem);\n+      XEXP (mem, 0) = cselib_subst_to_values (XEXP (mem, 0));\n+    }\n   link = alloc_EXPR_LIST (VOIDmode, mem, *mem_list);\n   *mem_list = link;\n \n@@ -676,6 +682,14 @@ sched_analyze_1 (deps, x, insn)\n   else if (GET_CODE (dest) == MEM)\n     {\n       /* Writing memory.  */\n+      rtx t = dest;\n+\n+      if (current_sched_info->use_cselib)\n+\t{\n+\t  t = shallow_copy_rtx (dest);\n+\t  cselib_lookup (XEXP (t, 0), Pmode, 1);\n+\t  XEXP (t, 0) = cselib_subst_to_values (XEXP (t, 0));\n+\t}\n \n       if (deps->pending_lists_length > MAX_PENDING_LIST_LENGTH)\n \t{\n@@ -695,7 +709,7 @@ sched_analyze_1 (deps, x, insn)\n \t  pending_mem = deps->pending_read_mems;\n \t  while (pending)\n \t    {\n-\t      if (anti_dependence (XEXP (pending_mem, 0), dest))\n+\t      if (anti_dependence (XEXP (pending_mem, 0), t))\n \t\tadd_dependence (insn, XEXP (pending, 0), REG_DEP_ANTI);\n \n \t      pending = XEXP (pending, 1);\n@@ -706,7 +720,7 @@ sched_analyze_1 (deps, x, insn)\n \t  pending_mem = deps->pending_write_mems;\n \t  while (pending)\n \t    {\n-\t      if (output_dependence (XEXP (pending_mem, 0), dest))\n+\t      if (output_dependence (XEXP (pending_mem, 0), t))\n \t\tadd_dependence (insn, XEXP (pending, 0), REG_DEP_OUTPUT);\n \n \t      pending = XEXP (pending, 1);\n@@ -838,12 +852,19 @@ sched_analyze_2 (deps, x, insn)\n \t/* Reading memory.  */\n \trtx u;\n \trtx pending, pending_mem;\n+\trtx t = x;\n \n+\tif (current_sched_info->use_cselib)\n+\t  {\n+\t    t = shallow_copy_rtx (t);\n+\t    cselib_lookup (XEXP (t, 0), Pmode, 1);\n+\t    XEXP (t, 0) = cselib_subst_to_values (XEXP (t, 0));\n+\t  }\n \tpending = deps->pending_read_insns;\n \tpending_mem = deps->pending_read_mems;\n \twhile (pending)\n \t  {\n-\t    if (read_dependence (XEXP (pending_mem, 0), x))\n+\t    if (read_dependence (XEXP (pending_mem, 0), t))\n \t      add_dependence (insn, XEXP (pending, 0), REG_DEP_ANTI);\n \n \t    pending = XEXP (pending, 1);\n@@ -855,7 +876,7 @@ sched_analyze_2 (deps, x, insn)\n \twhile (pending)\n \t  {\n \t    if (true_dependence (XEXP (pending_mem, 0), VOIDmode,\n-\t\t\t\t x, rtx_varies_p))\n+\t\t\t\t t, rtx_varies_p))\n \t      add_dependence (insn, XEXP (pending, 0), 0);\n \n \t    pending = XEXP (pending, 1);\n@@ -1237,6 +1258,9 @@ sched_analyze (deps, head, tail)\n   register rtx u;\n   rtx loop_notes = 0;\n \n+  if (current_sched_info->use_cselib)\n+    cselib_init ();\n+\n   for (insn = head;; insn = NEXT_INSN (insn))\n     {\n       if (GET_CODE (insn) == INSN || GET_CODE (insn) == JUMP_INSN)\n@@ -1386,8 +1410,14 @@ sched_analyze (deps, head, tail)\n \t  CONST_OR_PURE_CALL_P (loop_notes) = CONST_OR_PURE_CALL_P (insn);\n \t}\n \n+      if (current_sched_info->use_cselib)\n+\tcselib_process_insn (insn);\n       if (insn == tail)\n-\treturn;\n+\t{\n+\t  if (current_sched_info->use_cselib)\n+\t    cselib_finish ();\n+\t  return;\n+\t}\n     }\n   abort ();\n }"}, {"sha": "50e456d6f588b740fc2ac3bd460be1b4c7b6bead", "filename": "gcc/sched-ebb.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6c5340748f9914998e4beafe3832acfe5d8aae/gcc%2Fsched-ebb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6c5340748f9914998e4beafe3832acfe5d8aae/gcc%2Fsched-ebb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-ebb.c?ref=4b6c5340748f9914998e4beafe3832acfe5d8aae", "patch": "@@ -193,7 +193,7 @@ static struct sched_info ebb_sched_info =\n \n   NULL, NULL,\n   NULL, NULL,\n-  0\n+  0, 1\n };\n \f\n /* Schedule a single extended basic block, defined by the boundaries HEAD"}, {"sha": "124ba3e76b8c6b2b99e2bdbf3a0cced561688627", "filename": "gcc/sched-int.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6c5340748f9914998e4beafe3832acfe5d8aae/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6c5340748f9914998e4beafe3832acfe5d8aae/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=4b6c5340748f9914998e4beafe3832acfe5d8aae", "patch": "@@ -146,7 +146,12 @@ struct sched_info\n   rtx head, tail;\n \n   /* If nonzero, enables an additional sanity check in schedule_block.  */\n-  int queue_must_finish_empty;\n+  unsigned int queue_must_finish_empty:1;\n+  /* Nonzero if we should use cselib for better alias analysis.  This\n+     must be 0 if the dependency information is used after sched_analyze\n+     has completed, e.g. if we're using it to initialize state for successor\n+     blocks in region scheduling.  */\n+  unsigned int use_cselib:1;\n };\n \n extern struct sched_info *current_sched_info;"}, {"sha": "daa7ab579c4a067856fcc149cc98ce156b44b8b8", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6c5340748f9914998e4beafe3832acfe5d8aae/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6c5340748f9914998e4beafe3832acfe5d8aae/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=4b6c5340748f9914998e4beafe3832acfe5d8aae", "patch": "@@ -2352,7 +2352,7 @@ static struct sched_info region_sched_info =\n \n   NULL, NULL,\n   NULL, NULL,\n-  0\n+  0, 0\n };\n \n /* Add dependences so that branches are scheduled to run last in their"}]}