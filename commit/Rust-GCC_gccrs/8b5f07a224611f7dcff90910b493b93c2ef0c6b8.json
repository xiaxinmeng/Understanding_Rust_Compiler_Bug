{"sha": "8b5f07a224611f7dcff90910b493b93c2ef0c6b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI1ZjA3YTIyNDYxMWY3ZGNmZjkwOTEwYjQ5M2I5M2MyZWYwYzZiOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-08-29T16:11:19Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-08-29T16:11:19Z"}, "message": "PR libstdc++/23578 (DR 464 [Ready])\n\n2005-08-29  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/23578 (DR 464 [Ready])\n\t* include/bits/stl_map.h (class map): Add at(const key_type&)\n\tmember functions.\n\t* include/bits/stl_vector.h (class vector): Add data() member\n\tfunctions.\n\t* include/debug/map.h (class map): Adjust consistently.\n\t* include/debug/vector (class vector): Likewise.\n\t* testsuite/23_containers/map/element_access/1.cc: New.\n\t* testsuite/23_containers/vector/data_access/1.cc: Likewise.\n\t* docs/html/ext/howto.html: Add an entry for DR 464.\n\nFrom-SVN: r103609", "tree": {"sha": "2b1fe6e112b8d923fc0d3d94777e5e410738eee2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b1fe6e112b8d923fc0d3d94777e5e410738eee2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b5f07a224611f7dcff90910b493b93c2ef0c6b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b5f07a224611f7dcff90910b493b93c2ef0c6b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b5f07a224611f7dcff90910b493b93c2ef0c6b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b5f07a224611f7dcff90910b493b93c2ef0c6b8/comments", "author": null, "committer": null, "parents": [{"sha": "332a1c2e39a0dff10f4d869c01a57cdab2615f20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/332a1c2e39a0dff10f4d869c01a57cdab2615f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/332a1c2e39a0dff10f4d869c01a57cdab2615f20"}], "stats": {"total": 201, "additions": 201, "deletions": 0}, "files": [{"sha": "a69c4ce46fb9fd2c635a2ef3b2bb9bb195d2af7b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5f07a224611f7dcff90910b493b93c2ef0c6b8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5f07a224611f7dcff90910b493b93c2ef0c6b8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8b5f07a224611f7dcff90910b493b93c2ef0c6b8", "patch": "@@ -1,3 +1,16 @@\n+2005-08-29  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/23578 (DR 464 [Ready])\n+\t* include/bits/stl_map.h (class map): Add at(const key_type&)\n+\tmember functions.\n+\t* include/bits/stl_vector.h (class vector): Add data() member\n+\tfunctions.\n+\t* include/debug/map.h (class map): Adjust consistently.\n+\t* include/debug/vector (class vector): Likewise.\n+\t* testsuite/23_containers/map/element_access/1.cc: New.\n+\t* testsuite/23_containers/vector/data_access/1.cc: Likewise.\n+\t* docs/html/ext/howto.html: Add an entry for DR 464.\n+\n 2005-08-26  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/20534 (contd)"}, {"sha": "85161964e5f31f5c14e885a2f1c6fc80e0dd38ca", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5f07a224611f7dcff90910b493b93c2ef0c6b8/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5f07a224611f7dcff90910b493b93c2ef0c6b8/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=8b5f07a224611f7dcff90910b493b93c2ef0c6b8", "patch": "@@ -520,6 +520,13 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n     </dt>\n     <dd>Don't fail if the next pointer is null and newoff is zero.\n     </dd>\n+\n+    <dt><a href=\"lwg-active.html#464\">464</a>:\n+        <em>Suggestion for new member functions in standard containers</em>\n+    </dt>\n+    <dd>Add <code>data()</code> to <code>std::vector</code> and\n+        <code>at(const key_type&amp;)</code> to <code>std::map</code>.\n+    </dd>\n <!--\n     <dt><a href=\"lwg-defects.html#\"></a>:\n         <em></em>"}, {"sha": "81bfc251fface03a2810c35b801691a290e51058", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5f07a224611f7dcff90910b493b93c2ef0c6b8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5f07a224611f7dcff90910b493b93c2ef0c6b8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=8b5f07a224611f7dcff90910b493b93c2ef0c6b8", "patch": "@@ -61,6 +61,7 @@\n #ifndef _MAP_H\n #define _MAP_H 1\n \n+#include <bits/functexcept.h>\n #include <bits/concept_check.h>\n \n namespace _GLIBCXX_STD\n@@ -348,6 +349,33 @@ namespace _GLIBCXX_STD\n \treturn (*__i).second;\n       }\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // DR 464. Suggestion for new member functions in standard containers.\n+      /**\n+       *  @brief  Access to %map data.\n+       *  @param  k  The key for which data should be retrieved.\n+       *  @return  A reference to the data whose key is equivalent to k, if\n+       *           such a data is present in the map.\n+       *  @throw  std::out_of_range  If no such data is present.\n+       */\n+      mapped_type&\n+      at(const key_type& __k)\n+      {\n+\titerator __i = lower_bound(__k);\n+\tif (__i == end() || key_comp()(__k, (*__i).first))\n+\t  __throw_out_of_range(__N(\"map::at\"));\n+\treturn (*__i).second;\n+      }\n+\n+      const mapped_type&\n+      at(const key_type& __k) const\n+      {\n+\tconst_iterator __i = lower_bound(__k);\n+\tif (__i == end() || key_comp()(__k, (*__i).first))\n+\t  __throw_out_of_range(__N(\"map::at\"));\n+\treturn (*__i).second;\n+      }\n+\n       // modifiers\n       /**\n        *  @brief Attempts to insert a std::pair into the %map."}, {"sha": "94acec2fb2c3e2ab1fa55ee87a4c7613d98758e7", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5f07a224611f7dcff90910b493b93c2ef0c6b8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5f07a224611f7dcff90910b493b93c2ef0c6b8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=8b5f07a224611f7dcff90910b493b93c2ef0c6b8", "patch": "@@ -568,6 +568,21 @@ namespace _GLIBCXX_STD\n       back() const\n       { return *(end() - 1); }\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // DR 464. Suggestion for new member functions in standard containers.\n+      // data access\n+      /**\n+       *   Returns a pointer such that [data(), data() + size()) is a valid\n+       *   range.  For a non-empty %vector, data() == &front().\n+       */\n+      pointer\n+      data()\n+      { return pointer(this->_M_impl._M_start); }\n+\n+      const_pointer\n+      data() const\n+      { return const_pointer(this->_M_impl._M_start); }\n+\n       // [23.2.4.3] modifiers\n       /**\n        *  @brief  Add data to the end of the %vector."}, {"sha": "e0722db6c4f4b37a629c22568fc978fe20ba1013", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5f07a224611f7dcff90910b493b93c2ef0c6b8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5f07a224611f7dcff90910b493b93c2ef0c6b8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=8b5f07a224611f7dcff90910b493b93c2ef0c6b8", "patch": "@@ -142,6 +142,10 @@ namespace __gnu_debug_def\n       // 23.3.1.2 element access:\n       using _Base::operator[];\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // DR 464. Suggestion for new member functions in standard containers.\n+      using _Base::at;\n+\n       // modifiers:\n       std::pair<iterator, bool>\n       insert(const value_type& __x)"}, {"sha": "f2b36182423f009d43310a57acb7f5d32858e1bf", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5f07a224611f7dcff90910b493b93c2ef0c6b8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5f07a224611f7dcff90910b493b93c2ef0c6b8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=8b5f07a224611f7dcff90910b493b93c2ef0c6b8", "patch": "@@ -230,6 +230,10 @@ namespace __gnu_debug_def\n \treturn _Base::back();\n       }\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // DR 464. Suggestion for new member functions in standard containers.\n+      using _Base::data;\n+\n       // 23.2.4.3 modifiers:\n       void\n       push_back(const _Tp& __x)"}, {"sha": "5bc464aafdd27c3642605e309dacd8c0af28a38f", "filename": "libstdc++-v3/testsuite/23_containers/map/element_access/1.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5f07a224611f7dcff90910b493b93c2ef0c6b8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Felement_access%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5f07a224611f7dcff90910b493b93c2ef0c6b8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Felement_access%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Felement_access%2F1.cc?ref=8b5f07a224611f7dcff90910b493b93c2ef0c6b8", "patch": "@@ -0,0 +1,79 @@\n+// 2005-08-29  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <map>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/23578\n+void test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+  typedef std::map<int, double> map_type;\n+\n+  {\n+    map_type m;\n+    m[0] = 1.5;\n+\n+    double& rd = m.at(0);\n+    VERIFY( rd == 1.5 );\n+    try\n+      {\n+\tm.at(1);\n+      }\n+    catch(std::out_of_range& obj)\n+      {\n+\t// Expected.\n+      }\n+    catch(...)\n+      {\n+\t// Failed.\n+\tthrow;\n+      }    \n+  }\n+\n+  {\n+    map_type m;\n+    m[1] = 2.5;\n+    const map_type cm(m);\n+\n+    const double& crd = cm.at(1);\n+    VERIFY( crd == 2.5 );\n+    try\n+      {\n+\tcm.at(0);\n+      }\n+    catch(std::out_of_range& obj)\n+      {\n+\t// Expected.\n+      }\n+    catch(...)\n+      {\n+\t// Failed.\n+\tthrow;\n+      }    \n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "41d5819aee887d5aacf96fe09367c18b3893ed24", "filename": "libstdc++-v3/testsuite/23_containers/vector/data_access/1.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5f07a224611f7dcff90910b493b93c2ef0c6b8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdata_access%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5f07a224611f7dcff90910b493b93c2ef0c6b8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdata_access%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdata_access%2F1.cc?ref=8b5f07a224611f7dcff90910b493b93c2ef0c6b8", "patch": "@@ -0,0 +1,51 @@\n+// 2005-08-29  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/23578\n+void test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+  typedef std::vector<int> vector_type;\n+\n+  {\n+    const int A[] = { 0, 1, 2, 3, 4 };    \n+    vector_type v(A, A + 5);\n+    VERIFY( v.data() == &v.front() );\n+    int* pi = v.data();\n+    VERIFY( *pi == 0 );\n+  }\n+\n+  {\n+    const int A[] = { 4, 3, 2, 1, 0 };    \n+    const vector_type cv(A, A + 5);\n+    VERIFY( cv.data() == &cv.front() );\n+    const int* pci = cv.data();\n+    VERIFY( *pci == 4 );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}