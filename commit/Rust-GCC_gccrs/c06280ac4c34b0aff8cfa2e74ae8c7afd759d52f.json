{"sha": "c06280ac4c34b0aff8cfa2e74ae8c7afd759d52f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA2MjgwYWM0YzM0YjBhZmY4Y2ZhMmU3NGFlOGM3YWZkNzU5ZDUyZg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-06-03T20:37:24Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-06-03T20:40:34Z"}, "message": "c++: more constrained nested partial specialization\n\nWhen checking that a constrained partial specialization is more\nconstrained than the primary template, we pass only the innermost level\nof generic template arguments to strictly_subsumes.  This leads to us\ndoing a nonsensical substitution from normalize_concept_check if the\nfull set of template arguments has multiple levels, and it ultimately\ncauses strictly_subsumes to sometimes erroneously return false as in the\ntestcase below.\n\ngcc/cp/ChangeLog:\n\n\t* pt.c (process_partial_specialization): Pass the full set of\n\tgeneric template arguments to strictly_subsumes.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-partial-spec8.C: New test.", "tree": {"sha": "23209ade8805880d036eb64aed9ecc4f95270a42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23209ade8805880d036eb64aed9ecc4f95270a42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c06280ac4c34b0aff8cfa2e74ae8c7afd759d52f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c06280ac4c34b0aff8cfa2e74ae8c7afd759d52f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c06280ac4c34b0aff8cfa2e74ae8c7afd759d52f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c06280ac4c34b0aff8cfa2e74ae8c7afd759d52f/comments", "author": null, "committer": null, "parents": [{"sha": "aee69073cdb8086d393f12474c6177e75467ceaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aee69073cdb8086d393f12474c6177e75467ceaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aee69073cdb8086d393f12474c6177e75467ceaa"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "c07a48f1261b60c8c21960cb305358560f262846", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c06280ac4c34b0aff8cfa2e74ae8c7afd759d52f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c06280ac4c34b0aff8cfa2e74ae8c7afd759d52f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c06280ac4c34b0aff8cfa2e74ae8c7afd759d52f", "patch": "@@ -5062,7 +5062,7 @@ process_partial_specialization (tree decl)\n   if (comp_template_args (inner_args, INNERMOST_TEMPLATE_ARGS (main_args))\n       && (!flag_concepts\n \t  || !strictly_subsumes (current_template_constraints (),\n-\t\t\t\t inner_args, maintmpl)))\n+\t\t\t\t main_args, maintmpl)))\n     {\n       if (!flag_concepts)\n         error (\"partial specialization %q+D does not specialize \""}, {"sha": "873cf44e40762b473f0958759160fef16191ae7c", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-partial-spec8.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c06280ac4c34b0aff8cfa2e74ae8c7afd759d52f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-partial-spec8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c06280ac4c34b0aff8cfa2e74ae8c7afd759d52f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-partial-spec8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-partial-spec8.C?ref=c06280ac4c34b0aff8cfa2e74ae8c7afd759d52f", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile { target c++20 } }\n+\n+template<int M, int N>\n+concept equal = M == N;\n+\n+template<int M>\n+struct traits\n+{\n+  template<int N> requires equal<M, N>\n+    struct foo {};\n+\n+  template<int N> requires equal<M, N> && (M >= 0) // { dg-bogus \"not more constrained\" }\n+    struct foo<N> {};\n+};"}]}