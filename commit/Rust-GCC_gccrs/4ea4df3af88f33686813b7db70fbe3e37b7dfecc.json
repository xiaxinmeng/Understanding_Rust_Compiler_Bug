{"sha": "4ea4df3af88f33686813b7db70fbe3e37b7dfecc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVhNGRmM2FmODhmMzM2ODY4MTNiN2RiNzBmYmUzZTM3YjdkZmVjYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-04-14T09:20:18Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-17T08:14:10Z"}, "message": "[Ada] Couple of small tweaks related to integer conversions\n\n2020-06-17  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_attr.adb (Get_Integer_Type): Use standard types without\n\ta specific size.\n\t* sem_res.adb (Resolve_Unchecked_Type_Conversion): Remove a\n\tredundant intermediate conversion to Universal_Integer.", "tree": {"sha": "2ae2de613708ba0668fbe8bc618fe7014934098e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ae2de613708ba0668fbe8bc618fe7014934098e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ea4df3af88f33686813b7db70fbe3e37b7dfecc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ea4df3af88f33686813b7db70fbe3e37b7dfecc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ea4df3af88f33686813b7db70fbe3e37b7dfecc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ea4df3af88f33686813b7db70fbe3e37b7dfecc/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3a2dc654c8e9474dbf0de2da168cd7816eae813", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a2dc654c8e9474dbf0de2da168cd7816eae813", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3a2dc654c8e9474dbf0de2da168cd7816eae813"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "888b112d80ed0cf94a26da0131b46c5815891c3e", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ea4df3af88f33686813b7db70fbe3e37b7dfecc/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ea4df3af88f33686813b7db70fbe3e37b7dfecc/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=4ea4df3af88f33686813b7db70fbe3e37b7dfecc", "patch": "@@ -1756,17 +1756,17 @@ package body Exp_Attr is\n       begin\n          --  We need to accommodate unsigned values\n \n-         if Siz < 8 then\n-            Int_Typ := Standard_Integer_8;\n+         if Siz < RM_Size (Standard_Short_Short_Integer) then\n+            Int_Typ := Standard_Short_Short_Integer;\n \n-         elsif Siz < 16 then\n-            Int_Typ := Standard_Integer_16;\n+         elsif Siz < RM_Size (Standard_Short_Integer) then\n+            Int_Typ := Standard_Short_Integer;\n \n-         elsif Siz < 32 then\n-            Int_Typ := Standard_Integer_32;\n+         elsif Siz < RM_Size (Standard_Integer) then\n+            Int_Typ := Standard_Integer;\n \n          else\n-            Int_Typ := Standard_Integer_64;\n+            Int_Typ := Standard_Long_Long_Integer;\n          end if;\n \n          return Int_Typ;"}, {"sha": "7e6535028892763c047496ece8ea89baf17ad9b2", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ea4df3af88f33686813b7db70fbe3e37b7dfecc/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ea4df3af88f33686813b7db70fbe3e37b7dfecc/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=4ea4df3af88f33686813b7db70fbe3e37b7dfecc", "patch": "@@ -11998,6 +11998,18 @@ package body Sem_Res is\n \n       Resolve (Operand, Opnd_Type);\n \n+      --  If the expression is a conversion to universal integer of an\n+      --  an expression with an integer type, then we can eliminate the\n+      --  intermediate conversion to universal integer.\n+\n+      if Nkind (Operand) = N_Type_Conversion\n+        and then Entity (Subtype_Mark (Operand)) = Universal_Integer\n+        and then Is_Integer_Type (Etype (Expression (Operand)))\n+      then\n+         Rewrite (Operand, Relocate_Node (Expression (Operand)));\n+         Analyze_And_Resolve (Operand);\n+      end if;\n+\n       --  In an inlined context, the unchecked conversion may be applied\n       --  to a literal, in which case its type is the type of the context.\n       --  (In other contexts conversions cannot apply to literals)."}]}