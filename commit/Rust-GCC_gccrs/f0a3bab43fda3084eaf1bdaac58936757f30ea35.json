{"sha": "f0a3bab43fda3084eaf1bdaac58936757f30ea35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBhM2JhYjQzZmRhMzA4NGVhZjFiZGFhYzU4OTM2NzU3ZjMwZWEzNQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-08-31T20:42:10Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-09-02T20:59:35Z"}, "message": "d: __vectors unsupported in hardware should be rejected at compile-time.\n\ngcc/d/ChangeLog:\n\n\tPR d/96869\n\t* d-builtins.cc (build_frontend_type): Don't expose intrinsics that\n\tuse unsupported vector types.\n\t* d-target.cc (Target::isVectorTypeSupported): Restrict to supporting\n\tonly if TARGET_VECTOR_MODE_SUPPORTED_P is true.  Don't allow complex\n\tor boolean vector types.\n\ngcc/testsuite/ChangeLog:\n\n\tPR d/96869\n\t* gdc.dg/simd.d: Removed.\n\t* gdc.dg/cast1.d: New test.\n\t* gdc.dg/gdc213.d: Compile with target vect_sizes_16B_8B.\n\t* gdc.dg/gdc284.d: Likewise.\n\t* gdc.dg/gdc67.d: Likewise.\n\t* gdc.dg/pr96869.d: New test.\n\t* gdc.dg/simd1.d: New test.\n\t* gdc.dg/simd10447.d: New test.\n\t* gdc.dg/simd12776.d: New test.\n\t* gdc.dg/simd13841.d: New test.\n\t* gdc.dg/simd13927.d: New test.\n\t* gdc.dg/simd15123.d: New test.\n\t* gdc.dg/simd15144.d: New test.\n\t* gdc.dg/simd16087.d: New test.\n\t* gdc.dg/simd16697.d: New test.\n\t* gdc.dg/simd17237.d: New test.\n\t* gdc.dg/simd17695.d: New test.\n\t* gdc.dg/simd17720a.d: New test.\n\t* gdc.dg/simd17720b.d: New test.\n\t* gdc.dg/simd19224.d: New test.\n\t* gdc.dg/simd19627.d: New test.\n\t* gdc.dg/simd19628.d: New test.\n\t* gdc.dg/simd19629.d: New test.\n\t* gdc.dg/simd19630.d: New test.\n\t* gdc.dg/simd2a.d: New test.\n\t* gdc.dg/simd2b.d: New test.\n\t* gdc.dg/simd2c.d: New test.\n\t* gdc.dg/simd2d.d: New test.\n\t* gdc.dg/simd2e.d: New test.\n\t* gdc.dg/simd2f.d: New test.\n\t* gdc.dg/simd2g.d: New test.\n\t* gdc.dg/simd2h.d: New test.\n\t* gdc.dg/simd2i.d: New test.\n\t* gdc.dg/simd2j.d: New test.\n\t* gdc.dg/simd7951.d: New test.\n\t* gdc.dg/torture/array2.d: New test.\n\t* gdc.dg/torture/array3.d: New test.\n\t* gdc.dg/torture/simd16488a.d: New test.\n\t* gdc.dg/torture/simd16488b.d: New test.\n\t* gdc.dg/torture/simd16703.d: New test.\n\t* gdc.dg/torture/simd19223.d: New test.\n\t* gdc.dg/torture/simd19607.d: New test.\n\t* gdc.dg/torture/simd3.d: New test.\n\t* gdc.dg/torture/simd4.d: New test.\n\t* gdc.dg/torture/simd7411.d: New test.\n\t* gdc.dg/torture/simd7413a.d: New test.\n\t* gdc.dg/torture/simd7413b.d: New test.\n\t* gdc.dg/torture/simd7414.d: New test.\n\t* gdc.dg/torture/simd9200.d: New test.\n\t* gdc.dg/torture/simd9304.d: New test.\n\t* gdc.dg/torture/simd9449.d: New test.\n\t* gdc.dg/torture/simd9910.d: New test.", "tree": {"sha": "5b4f301d8476d90129ead7b606ce8b2058ba4e8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b4f301d8476d90129ead7b606ce8b2058ba4e8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0a3bab43fda3084eaf1bdaac58936757f30ea35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0a3bab43fda3084eaf1bdaac58936757f30ea35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0a3bab43fda3084eaf1bdaac58936757f30ea35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0a3bab43fda3084eaf1bdaac58936757f30ea35/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c285126cc0af8891a29e136be4b10ed27caef470", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c285126cc0af8891a29e136be4b10ed27caef470", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c285126cc0af8891a29e136be4b10ed27caef470"}], "stats": {"total": 4036, "additions": 2076, "deletions": 1960}, "files": [{"sha": "e3d7adc2deb55ac3834155c51ea7c031b0327dfc", "filename": "gcc/d/d-builtins.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Fd%2Fd-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Fd%2Fd-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-builtins.cc?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -208,7 +208,7 @@ build_frontend_type (tree type)\n \tbreak;\n \n       dtype = dtype->sarrayOf (nunits)->addMod (mod);\n-      if (dtype->nextOf ()->isTypeBasic () == NULL)\n+      if (target.isVectorTypeSupported (dtype->size (), dtype->nextOf ()))\n \tbreak;\n \n       dtype = (TypeVector::create (dtype))->addMod (mod);"}, {"sha": "4a38cca56b4df200c9459b881bbfd4023cd90177", "filename": "gcc/d/d-target.cc", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Fd%2Fd-target.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Fd%2Fd-target.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-target.cc?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -247,16 +247,17 @@ Target::isVectorTypeSupported (int sz, Type *type)\n   if (type == Type::tvoid)\n     type = Type::tuns8;\n \n-  /* No support for non-trivial types.  */\n-  if (!type->isTypeBasic ())\n+  /* No support for non-trivial types, complex types, or booleans.  */\n+  if (!type->isTypeBasic () || type->iscomplex () || type->ty == Tbool)\n     return 3;\n \n-  /* If there is no hardware support, check if we can safely emulate it.  */\n-  tree ctype = build_ctype (type);\n-  machine_mode mode = TYPE_MODE (ctype);\n+  /* In [simd/vector extensions], which vector types are supported depends on\n+     the target.  The implementation is expected to only support the vector\n+     types that are implemented in the target's hardware.  */\n+  unsigned HOST_WIDE_INT nunits = sz / type->size ();\n+  tree ctype = build_vector_type (build_ctype (type), nunits);\n \n-  if (!targetm.vector_mode_supported_p (mode)\n-      && !targetm.scalar_mode_supported_p (as_a <scalar_mode> (mode)))\n+  if (!targetm.vector_mode_supported_p (TYPE_MODE (ctype)))\n     return 3;\n \n   return 0;"}, {"sha": "3fe7d99c0318751573ebacbab0ddf52f8f6aad54", "filename": "gcc/testsuite/gdc.dg/cast1.d", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fcast1.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fcast1.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fcast1.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile }\n+float bug8060(float x)\n+{\n+    int i = *cast(int*)&x;\n+    ++i;\n+    return *cast(float*)&i;\n+}"}, {"sha": "c5bd1df8dbc67906e9c62cdf23dd930b64de08c6", "filename": "gcc/testsuite/gdc.dg/gdc213.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc213.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc213.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc213.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -1,6 +1,6 @@\n // https://bugzilla.gdcproject.org/show_bug.cgi?id=213\n-// { dg-options \"-Wno-psabi\" }\n-// { dg-do compile }\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n \n import core.simd;\n "}, {"sha": "0c39217a37b8db2ee52d006bd4e30552ab7c03b9", "filename": "gcc/testsuite/gdc.dg/gdc284.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc284.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc284.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc284.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -1,6 +1,6 @@\n // https://bugzilla.gdcproject.org/show_bug.cgi?id=284\n-// { dg-options \"-Wno-psabi\" }\n-// { dg-do compile }\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n \n alias v284 = __vector(int[2]);\n "}, {"sha": "a309a4bff5f7dbc1edaa7cb9024d6ded89cc3f29", "filename": "gcc/testsuite/gdc.dg/gdc67.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc67.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc67.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fgdc67.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -1,4 +1,5 @@\n // https://bugzilla.gdcproject.org/show_bug.cgi?id=67\n-// { dg-do compile }\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n \n __vector(float[4])[2] d;  // ICE"}, {"sha": "c4ace30a546e81a09dccf522bfb36fc92cdaf76b", "filename": "gcc/testsuite/gdc.dg/pr96869.d", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fpr96869.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fpr96869.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr96869.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,32 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96869\n+// { dg-do compile }\n+\n+__vector(float[0]) var01;\n+// { dg-error \"0 byte vector type __vector\\\\\\(float\\\\\\[0\\\\\\]\\\\\\) is not supported on this platform\" \"\" { target *-*-* } .-1 }\n+__vector(float[3]) var02;\n+// { dg-error \"12 byte vector type __vector\\\\\\(float\\\\\\[3\\\\\\]\\\\\\) is not supported on this platform\" \"\" { target *-*-* } .-1 }\n+__vector(float[][4]) var03;\n+// { dg-error \"vector type __vector\\\\\\(float\\\\\\[\\\\\\]\\\\\\[4\\\\\\]\\\\\\) is not supported on this platform\" \"\" { target *-*-* } .-1 }\n+__vector(float[4][4]) var04;\n+// { dg-error \"vector type __vector\\\\\\(float\\\\\\[4\\\\\\]\\\\\\[4\\\\\\]\\\\\\) is not supported on this platform\" \"\" { target *-*-* } .-1 }\n+__vector(float[float][4]) var05;\n+// { dg-error \"vector type __vector\\\\\\(float\\\\\\[float\\\\\\]\\\\\\[4\\\\\\]\\\\\\) is not supported on this platform\" \"\" { target *-*-* } .-1 }\n+__vector(float function()[4]) var06;\n+// { dg-error \"vector type __vector\\\\\\(float function\\\\\\(\\\\\\)\\\\\\[4\\\\\\]\\\\\\) is not supported on this platform\" \"\" { target *-*-* } .-1 }\n+__vector(float delegate()[4]) var07;\n+// { dg-error \"vector type __vector\\\\\\(float delegate\\\\\\(\\\\\\)\\\\\\[4\\\\\\]\\\\\\) is not supported on this platform\" \"\" { target *-*-* } .-1 }\n+enum E { a, b, c }\n+__vector(E[4]) var08;\n+// { dg-error \"vector type __vector\\\\\\(E\\\\\\[4\\\\\\]\\\\\\) is not supported on this platform\" \"\" { target *-*-* } .-1 }\n+struct S { float a; }\n+__vector(S[4]) var09;\n+// { dg-error \"vector type __vector\\\\\\(S\\\\\\[4\\\\\\]\\\\\\) is not supported on this platform\" \"\" { target *-*-* } .-1 }\n+class C { float a; }\n+__vector(C[4]) var10;\n+// { dg-error \"vector type __vector\\\\\\(C\\\\\\[4\\\\\\]\\\\\\) is not supported on this platform\" \"\" { target *-*-* } .-1 }\n+__vector(cfloat[4]) var11;\n+// { dg-error \"vector type __vector\\\\\\(cfloat\\\\\\[4\\\\\\]\\\\\\) is not supported on this platform\" \"\" { target *-*-* } .-1 }\n+__vector(bool[4]) var12;\n+// { dg-error \"vector type __vector\\\\\\(bool\\\\\\[4\\\\\\]\\\\\\) is not supported on this platform\" \"\" { target *-*-* } .-1 }\n+__vector(real[128]) var13;\n+// { dg-error \"vector type __vector\\\\\\(real\\\\\\[128\\\\\\]\\\\\\) is not supported on this platform\" \"\" { target *-*-* } .-1 }"}, {"sha": "40d5b5700c31bb7902429141583cfde0ad23a4ad", "filename": "gcc/testsuite/gdc.dg/simd.d", "status": "removed", "additions": 0, "deletions": 1947, "changes": 1947, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c285126cc0af8891a29e136be4b10ed27caef470/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c285126cc0af8891a29e136be4b10ed27caef470/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd.d?ref=c285126cc0af8891a29e136be4b10ed27caef470", "patch": "@@ -1,1947 +0,0 @@\n-// { dg-options \"-Wno-psabi\" }\n-// { dg-do run { target hw } }\n-import core.simd;\n-import core.stdc.string;\n-\n-alias TypeTuple(T...) = T;\n-\n-/*****************************************/\n-// https://issues.dlang.org/show_bug.cgi?id=16087\n-\n-static assert(void8.sizeof == 8);\n-static assert(float2.sizeof == 8);\n-static assert(byte8.sizeof == 8);\n-static assert(ubyte8.sizeof == 8);\n-static assert(short4.sizeof == 8);\n-static assert(ushort4.sizeof == 8);\n-static assert(int2.sizeof == 8);\n-static assert(uint2.sizeof == 8);\n-\n-static assert(void16.alignof == 16);\n-static assert(double2.alignof == 16);\n-static assert(float4.alignof == 16);\n-static assert(byte16.alignof == 16);\n-static assert(ubyte16.alignof == 16);\n-static assert(short8.alignof == 16);\n-static assert(ushort8.alignof == 16);\n-static assert(int4.alignof == 16);\n-static assert(uint4.alignof == 16);\n-static assert(long2.alignof == 16);\n-static assert(ulong2.alignof == 16);\n-\n-static assert(void16.sizeof == 16);\n-static assert(double2.sizeof == 16);\n-static assert(float4.sizeof == 16);\n-static assert(byte16.sizeof == 16);\n-static assert(ubyte16.sizeof == 16);\n-static assert(short8.sizeof == 16);\n-static assert(ushort8.sizeof == 16);\n-static assert(int4.sizeof == 16);\n-static assert(uint4.sizeof == 16);\n-static assert(long2.sizeof == 16);\n-static assert(ulong2.sizeof == 16);\n-\n-static assert(void32.alignof == 32);\n-static assert(double4.alignof == 32);\n-static assert(float8.alignof == 32);\n-static assert(byte32.alignof == 32);\n-static assert(ubyte32.alignof == 32);\n-static assert(short16.alignof == 32);\n-static assert(ushort16.alignof == 32);\n-static assert(int8.alignof == 32);\n-static assert(uint8.alignof == 32);\n-static assert(long4.alignof == 32);\n-static assert(ulong4.alignof == 32);\n-\n-static assert(void32.sizeof == 32);\n-static assert(double4.sizeof == 32);\n-static assert(float8.sizeof == 32);\n-static assert(byte32.sizeof == 32);\n-static assert(ubyte32.sizeof == 32);\n-static assert(short16.sizeof == 32);\n-static assert(ushort16.sizeof == 32);\n-static assert(int8.sizeof == 32);\n-static assert(uint8.sizeof == 32);\n-static assert(long4.sizeof == 32);\n-static assert(ulong4.sizeof == 32);\n-\n-/*****************************************/\n-\n-void test1()\n-{\n-    void16 v1 = void,v2 = void;\n-    byte16 b;\n-    v2 = b;\n-    v1 = v2;\n-    static assert(!__traits(compiles, v1 + v2));\n-    static assert(!__traits(compiles, v1 - v2));\n-    static assert(!__traits(compiles, v1 * v2));\n-    static assert(!__traits(compiles, v1 / v2));\n-    static assert(!__traits(compiles, v1 % v2));\n-    static assert(!__traits(compiles, v1 & v2));\n-    static assert(!__traits(compiles, v1 | v2));\n-    static assert(!__traits(compiles, v1 ^ v2));\n-    static assert(!__traits(compiles, v1 ~ v2));\n-    static assert(!__traits(compiles, v1 ^^ v2));\n-    static assert(!__traits(compiles, v1 is v2));\n-    static assert(!__traits(compiles, v1 !is v2));\n-    static assert(!__traits(compiles, v1 == v2));\n-    static assert(!__traits(compiles, v1 != v2));\n-    static assert(!__traits(compiles, v1 < v2));\n-    static assert(!__traits(compiles, v1 > v2));\n-    static assert(!__traits(compiles, v1 <= v2));\n-    static assert(!__traits(compiles, v1 >= v2));\n-    static assert(!__traits(compiles, v1 <> v2));\n-    static assert(!__traits(compiles, v1 !< v2));\n-    static assert(!__traits(compiles, v1 !> v2));\n-    static assert(!__traits(compiles, v1 !<> v2));\n-    static assert(!__traits(compiles, v1 <>= v2));\n-    static assert(!__traits(compiles, v1 !<= v2));\n-    static assert(!__traits(compiles, v1 !>= v2));\n-    static assert(!__traits(compiles, v1 !<>= v2));\n-    static assert(!__traits(compiles, v1 << 1));\n-    static assert(!__traits(compiles, v1 >> 1));\n-    static assert(!__traits(compiles, v1 >>> 1));\n-    static assert(!__traits(compiles, v1 && v2));\n-    static assert(!__traits(compiles, v1 || v2));\n-    static assert(!__traits(compiles, ~v1));\n-    static assert(!__traits(compiles, -v1));\n-    static assert(!__traits(compiles, +v1));\n-    static assert(!__traits(compiles, !v1));\n-\n-    static assert(!__traits(compiles, v1 += v2));\n-    static assert(!__traits(compiles, v1 -= v2));\n-    static assert(!__traits(compiles, v1 *= v2));\n-    static assert(!__traits(compiles, v1 /= v2));\n-    static assert(!__traits(compiles, v1 %= v2));\n-    static assert(!__traits(compiles, v1 &= v2));\n-    static assert(!__traits(compiles, v1 |= v2));\n-    static assert(!__traits(compiles, v1 ^= v2));\n-    static assert(!__traits(compiles, v1 ~= v2));\n-    static assert(!__traits(compiles, v1 ^^= v2));\n-    static assert(!__traits(compiles, v1 <<= 1));\n-    static assert(!__traits(compiles, v1 >>= 1));\n-    static assert(!__traits(compiles, v1 >>>= 1));\n-\n-    //  A cast from vector to non-vector is allowed only when the target is same size Tsarray.\n-    static assert(!__traits(compiles, cast(byte)v1));       // 1byte\n-    static assert(!__traits(compiles, cast(short)v1));      // 2byte\n-    static assert(!__traits(compiles, cast(int)v1));        // 4byte\n-    static assert(!__traits(compiles, cast(long)v1));       // 8byte\n-    static assert(!__traits(compiles, cast(float)v1));      // 4byte\n-    static assert(!__traits(compiles, cast(double)v1));     // 8byte\n-    static assert(!__traits(compiles, cast(int[2])v1));     // 8byte Tsarray\n-    static assert( __traits(compiles, cast(int[4])v1));     // 16byte Tsarray, OK\n-    static assert( __traits(compiles, cast(long[2])v1));    // 16byte Tsarray, OK\n-}\n-\n-/*****************************************/\n-\n-void test2()\n-{\n-    byte16 v1, v2 = 1, v3 = 1;\n-    v1 = v2;\n-    v1 = v2 + v3;\n-    v1 = v2 - v3;\n-    v1 = v2 * v3;\n-    v1 = v2 / v3;\n-    v1 = v2 % v3;\n-    v1 = v2 & v3;\n-    v1 = v2 | v3;\n-    v1 = v2 ^ v3;\n-    static assert(!__traits(compiles, v1 ~ v2));\n-    static assert(!__traits(compiles, v1 ^^ v2));\n-    static assert(!__traits(compiles, v1 is v2));\n-    static assert(!__traits(compiles, v1 !is v2));\n-    static assert(!__traits(compiles, v1 == v2));\n-    static assert(!__traits(compiles, v1 != v2));\n-    static assert(!__traits(compiles, v1 < v2));\n-    static assert(!__traits(compiles, v1 > v2));\n-    static assert(!__traits(compiles, v1 <= v2));\n-    static assert(!__traits(compiles, v1 >= v2));\n-    static assert(!__traits(compiles, v1 <> v2));\n-    static assert(!__traits(compiles, v1 !< v2));\n-    static assert(!__traits(compiles, v1 !> v2));\n-    static assert(!__traits(compiles, v1 !<> v2));\n-    static assert(!__traits(compiles, v1 <>= v2));\n-    static assert(!__traits(compiles, v1 !<= v2));\n-    static assert(!__traits(compiles, v1 !>= v2));\n-    static assert(!__traits(compiles, v1 !<>= v2));\n-    v1 = v2 << 1;\n-    v1 = v2 >> 1;\n-    v1 = v2 >>> 1;\n-    static assert(!__traits(compiles, v1 && v2));\n-    static assert(!__traits(compiles, v1 || v2));\n-    v1 = ~v2;\n-    v1 = -v2;\n-    v1 = +v2;\n-    static assert(!__traits(compiles, !v1));\n-\n-    v1 += v2;\n-    v1 -= v2;\n-    v1 *= v2;\n-    v1 /= v2;\n-    v1 %= v2;\n-    v1 &= v2;\n-    v1 |= v2;\n-    v1 ^= v2;\n-    static assert(!__traits(compiles, v1 ~= v2));\n-    static assert(!__traits(compiles, v1 ^^= v2));\n-    v1 <<= 1;\n-    v1 >>= 1;\n-    v1 >>>= 1;\n-\n-    //  A cast from vector to non-vector is allowed only when the target is same size Tsarray.\n-    static assert(!__traits(compiles, cast(byte)v1));       // 1byte\n-    static assert(!__traits(compiles, cast(short)v1));      // 2byte\n-    static assert(!__traits(compiles, cast(int)v1));        // 4byte\n-    static assert(!__traits(compiles, cast(long)v1));       // 8byte\n-    static assert(!__traits(compiles, cast(float)v1));      // 4byte\n-    static assert(!__traits(compiles, cast(double)v1));     // 8byte\n-    static assert(!__traits(compiles, cast(int[2])v1));     // 8byte Tsarray\n-    static assert( __traits(compiles, cast(int[4])v1));     // 16byte Tsarray, OK\n-    static assert( __traits(compiles, cast(long[2])v1));    // 16byte Tsarray, OK\n-}\n-\n-/*****************************************/\n-\n-void test2b()\n-{\n-    ubyte16 v1, v2 = 1, v3 = 1;\n-    v1 = v2;\n-    v1 = v2 + v3;\n-    v1 = v2 - v3;\n-    v1 = v2 * v3;\n-    v1 = v2 / v3;\n-    v1 = v2 % v3;\n-    v1 = v2 & v3;\n-    v1 = v2 | v3;\n-    v1 = v2 ^ v3;\n-    static assert(!__traits(compiles, v1 ~ v2));\n-    static assert(!__traits(compiles, v1 ^^ v2));\n-    static assert(!__traits(compiles, v1 is v2));\n-    static assert(!__traits(compiles, v1 !is v2));\n-    static assert(!__traits(compiles, v1 == v2));\n-    static assert(!__traits(compiles, v1 != v2));\n-    static assert(!__traits(compiles, v1 < v2));\n-    static assert(!__traits(compiles, v1 > v2));\n-    static assert(!__traits(compiles, v1 <= v2));\n-    static assert(!__traits(compiles, v1 >= v2));\n-    static assert(!__traits(compiles, v1 <> v2));\n-    static assert(!__traits(compiles, v1 !< v2));\n-    static assert(!__traits(compiles, v1 !> v2));\n-    static assert(!__traits(compiles, v1 !<> v2));\n-    static assert(!__traits(compiles, v1 <>= v2));\n-    static assert(!__traits(compiles, v1 !<= v2));\n-    static assert(!__traits(compiles, v1 !>= v2));\n-    static assert(!__traits(compiles, v1 !<>= v2));\n-    v1 = v2 << 1;\n-    v1 = v2 >> 1;\n-    v1 = v2 >>> 1;\n-    static assert(!__traits(compiles, v1 && v2));\n-    static assert(!__traits(compiles, v1 || v2));\n-    v1 = ~v2;\n-    v1 = -v2;\n-    v1 = +v2;\n-    static assert(!__traits(compiles, !v1));\n-\n-    v1 += v2;\n-    v1 -= v2;\n-    v1 *= v2;\n-    v1 /= v2;\n-    v1 %= v2;\n-    v1 &= v2;\n-    v1 |= v2;\n-    v1 ^= v2;\n-    static assert(!__traits(compiles, v1 ~= v2));\n-    static assert(!__traits(compiles, v1 ^^= v2));\n-    v1 <<= 1;\n-    v1 >>= 1;\n-    v1 >>>= 1;\n-\n-    //  A cast from vector to non-vector is allowed only when the target is same size Tsarray.\n-    static assert(!__traits(compiles, cast(byte)v1));       // 1byte\n-    static assert(!__traits(compiles, cast(short)v1));      // 2byte\n-    static assert(!__traits(compiles, cast(int)v1));        // 4byte\n-    static assert(!__traits(compiles, cast(long)v1));       // 8byte\n-    static assert(!__traits(compiles, cast(float)v1));      // 4byte\n-    static assert(!__traits(compiles, cast(double)v1));     // 8byte\n-    static assert(!__traits(compiles, cast(int[2])v1));     // 8byte Tsarray\n-    static assert( __traits(compiles, cast(int[4])v1));     // 16byte Tsarray, OK\n-    static assert( __traits(compiles, cast(long[2])v1));    // 16byte Tsarray, OK\n-}\n-\n-/*****************************************/\n-\n-void test2c()\n-{\n-    short8 v1, v2 = 1, v3 = 1;\n-    v1 = v2;\n-    v1 = v2 + v3;\n-    v1 = v2 - v3;\n-    v1 = v2 * v3;\n-    v1 = v2 / v3;\n-    v1 = v2 % v3;\n-    v1 = v2 & v3;\n-    v1 = v2 | v3;\n-    v1 = v2 ^ v3;\n-    static assert(!__traits(compiles, v1 ~ v2));\n-    static assert(!__traits(compiles, v1 ^^ v2));\n-    static assert(!__traits(compiles, v1 is v2));\n-    static assert(!__traits(compiles, v1 !is v2));\n-    static assert(!__traits(compiles, v1 == v2));\n-    static assert(!__traits(compiles, v1 != v2));\n-    static assert(!__traits(compiles, v1 < v2));\n-    static assert(!__traits(compiles, v1 > v2));\n-    static assert(!__traits(compiles, v1 <= v2));\n-    static assert(!__traits(compiles, v1 >= v2));\n-    static assert(!__traits(compiles, v1 <> v2));\n-    static assert(!__traits(compiles, v1 !< v2));\n-    static assert(!__traits(compiles, v1 !> v2));\n-    static assert(!__traits(compiles, v1 !<> v2));\n-    static assert(!__traits(compiles, v1 <>= v2));\n-    static assert(!__traits(compiles, v1 !<= v2));\n-    static assert(!__traits(compiles, v1 !>= v2));\n-    static assert(!__traits(compiles, v1 !<>= v2));\n-    v1 = v2 << 1;\n-    v1 = v2 >> 1;\n-    v1 = v2 >>> 1;\n-    static assert(!__traits(compiles, v1 && v2));\n-    static assert(!__traits(compiles, v1 || v2));\n-    v1 = ~v2;\n-    v1 = -v2;\n-    v1 = +v2;\n-    static assert(!__traits(compiles, !v1));\n-\n-    v1 += v2;\n-    v1 -= v2;\n-    v1 *= v2;\n-    v1 /= v2;\n-    v1 %= v2;\n-    v1 &= v2;\n-    v1 |= v2;\n-    v1 ^= v2;\n-    static assert(!__traits(compiles, v1 ~= v2));\n-    static assert(!__traits(compiles, v1 ^^= v2));\n-    v1 <<= 1;\n-    v1 >>= 1;\n-    v1 >>>= 1;\n-    v1 = v1 * 3;\n-\n-    //  A cast from vector to non-vector is allowed only when the target is same size Tsarray.\n-    static assert(!__traits(compiles, cast(byte)v1));       // 1byte\n-    static assert(!__traits(compiles, cast(short)v1));      // 2byte\n-    static assert(!__traits(compiles, cast(int)v1));        // 4byte\n-    static assert(!__traits(compiles, cast(long)v1));       // 8byte\n-    static assert(!__traits(compiles, cast(float)v1));      // 4byte\n-    static assert(!__traits(compiles, cast(double)v1));     // 8byte\n-    static assert(!__traits(compiles, cast(int[2])v1));     // 8byte Tsarray\n-    static assert( __traits(compiles, cast(int[4])v1));     // 16byte Tsarray, OK\n-    static assert( __traits(compiles, cast(long[2])v1));    // 16byte Tsarray, OK\n-}\n-\n-/*****************************************/\n-\n-void test2d()\n-{\n-    ushort8 v1, v2 = 1, v3 = 1;\n-    v1 = v2;\n-    v1 = v2 + v3;\n-    v1 = v2 - v3;\n-    v1 = v2 * v3;\n-    v1 = v2 / v3;\n-    v1 = v2 % v3;\n-    v1 = v2 & v3;\n-    v1 = v2 | v3;\n-    v1 = v2 ^ v3;\n-    static assert(!__traits(compiles, v1 ~ v2));\n-    static assert(!__traits(compiles, v1 ^^ v2));\n-    static assert(!__traits(compiles, v1 is v2));\n-    static assert(!__traits(compiles, v1 !is v2));\n-    static assert(!__traits(compiles, v1 == v2));\n-    static assert(!__traits(compiles, v1 != v2));\n-    static assert(!__traits(compiles, v1 < v2));\n-    static assert(!__traits(compiles, v1 > v2));\n-    static assert(!__traits(compiles, v1 <= v2));\n-    static assert(!__traits(compiles, v1 >= v2));\n-    static assert(!__traits(compiles, v1 <> v2));\n-    static assert(!__traits(compiles, v1 !< v2));\n-    static assert(!__traits(compiles, v1 !> v2));\n-    static assert(!__traits(compiles, v1 !<> v2));\n-    static assert(!__traits(compiles, v1 <>= v2));\n-    static assert(!__traits(compiles, v1 !<= v2));\n-    static assert(!__traits(compiles, v1 !>= v2));\n-    static assert(!__traits(compiles, v1 !<>= v2));\n-    v1 = v2 << 1;\n-    v1 = v2 >> 1;\n-    v1 = v2 >>> 1;\n-    static assert(!__traits(compiles, v1 && v2));\n-    static assert(!__traits(compiles, v1 || v2));\n-    v1 = ~v2;\n-    v1 = -v2;\n-    v1 = +v2;\n-    static assert(!__traits(compiles, !v1));\n-\n-    v1 += v2;\n-    v1 -= v2;\n-    v1 *= v2;\n-    v1 /= v2;\n-    v1 %= v2;\n-    v1 &= v2;\n-    v1 |= v2;\n-    v1 ^= v2;\n-    static assert(!__traits(compiles, v1 ~= v2));\n-    static assert(!__traits(compiles, v1 ^^= v2));\n-    v1 <<= 1;\n-    v1 >>= 1;\n-    v1 >>>= 1;\n-\n-    //  A cast from vector to non-vector is allowed only when the target is same size Tsarray.\n-    static assert(!__traits(compiles, cast(byte)v1));       // 1byte\n-    static assert(!__traits(compiles, cast(short)v1));      // 2byte\n-    static assert(!__traits(compiles, cast(int)v1));        // 4byte\n-    static assert(!__traits(compiles, cast(long)v1));       // 8byte\n-    static assert(!__traits(compiles, cast(float)v1));      // 4byte\n-    static assert(!__traits(compiles, cast(double)v1));     // 8byte\n-    static assert(!__traits(compiles, cast(int[2])v1));     // 8byte Tsarray\n-    static assert( __traits(compiles, cast(int[4])v1));     // 16byte Tsarray, OK\n-    static assert( __traits(compiles, cast(long[2])v1));    // 16byte Tsarray, OK\n-}\n-\n-/*****************************************/\n-\n-void test2e()\n-{\n-    int4 v1, v2 = 1, v3 = 1;\n-    v1 = v2;\n-    v1 = v2 + v3;\n-    v1 = v2 - v3;\n-    v1 = v2 * v3;\n-    v1 = v2 / v3;\n-    v1 = v2 % v3;\n-    v1 = v2 & v3;\n-    v1 = v2 | v3;\n-    v1 = v2 ^ v3;\n-    static assert(!__traits(compiles, v1 ~ v2));\n-    static assert(!__traits(compiles, v1 ^^ v2));\n-    static assert(!__traits(compiles, v1 is v2));\n-    static assert(!__traits(compiles, v1 !is v2));\n-    static assert(!__traits(compiles, v1 == v2));\n-    static assert(!__traits(compiles, v1 != v2));\n-    static assert(!__traits(compiles, v1 < v2));\n-    static assert(!__traits(compiles, v1 > v2));\n-    static assert(!__traits(compiles, v1 <= v2));\n-    static assert(!__traits(compiles, v1 >= v2));\n-    static assert(!__traits(compiles, v1 <> v2));\n-    static assert(!__traits(compiles, v1 !< v2));\n-    static assert(!__traits(compiles, v1 !> v2));\n-    static assert(!__traits(compiles, v1 !<> v2));\n-    static assert(!__traits(compiles, v1 <>= v2));\n-    static assert(!__traits(compiles, v1 !<= v2));\n-    static assert(!__traits(compiles, v1 !>= v2));\n-    static assert(!__traits(compiles, v1 !<>= v2));\n-    v1 = v2 << 1;\n-    v1 = v2 >> 1;\n-    v1 = v2 >>> 1;\n-    static assert(!__traits(compiles, v1 && v2));\n-    static assert(!__traits(compiles, v1 || v2));\n-    v1 = ~v2;\n-    v1 = -v2;\n-    v1 = +v2;\n-    static assert(!__traits(compiles, !v1));\n-\n-    v1 += v2;\n-    v1 -= v2;\n-    v1 *= v2;\n-    v1 /= v2;\n-    v1 %= v2;\n-    v1 &= v2;\n-    v1 |= v2;\n-    v1 ^= v2;\n-    static assert(!__traits(compiles, v1 ~= v2));\n-    static assert(!__traits(compiles, v1 ^^= v2));\n-    v1 <<= 1;\n-    v1 >>= 1;\n-    v1 >>>= 1;\n-\n-    //  A cast from vector to non-vector is allowed only when the target is same size Tsarray.\n-    static assert(!__traits(compiles, cast(byte)v1));       // 1byte\n-    static assert(!__traits(compiles, cast(short)v1));      // 2byte\n-    static assert(!__traits(compiles, cast(int)v1));        // 4byte\n-    static assert(!__traits(compiles, cast(long)v1));       // 8byte\n-    static assert(!__traits(compiles, cast(float)v1));      // 4byte\n-    static assert(!__traits(compiles, cast(double)v1));     // 8byte\n-    static assert(!__traits(compiles, cast(int[2])v1));     // 8byte Tsarray\n-    static assert( __traits(compiles, cast(int[4])v1));     // 16byte Tsarray, OK\n-    static assert( __traits(compiles, cast(long[2])v1));    // 16byte Tsarray, OK\n-}\n-\n-/*****************************************/\n-\n-void test2f()\n-{\n-    uint4 v1, v2 = 1, v3 = 1;\n-    v1 = v2;\n-    v1 = v2 + v3;\n-    v1 = v2 - v3;\n-    v1 = v2 * v3;\n-    v1 = v2 / v3;\n-    v1 = v2 % v3;\n-    v1 = v2 & v3;\n-    v1 = v2 | v3;\n-    v1 = v2 ^ v3;\n-    static assert(!__traits(compiles, v1 ~ v2));\n-    static assert(!__traits(compiles, v1 ^^ v2));\n-    static assert(!__traits(compiles, v1 is v2));\n-    static assert(!__traits(compiles, v1 !is v2));\n-    static assert(!__traits(compiles, v1 == v2));\n-    static assert(!__traits(compiles, v1 != v2));\n-    static assert(!__traits(compiles, v1 < v2));\n-    static assert(!__traits(compiles, v1 > v2));\n-    static assert(!__traits(compiles, v1 <= v2));\n-    static assert(!__traits(compiles, v1 >= v2));\n-    static assert(!__traits(compiles, v1 <> v2));\n-    static assert(!__traits(compiles, v1 !< v2));\n-    static assert(!__traits(compiles, v1 !> v2));\n-    static assert(!__traits(compiles, v1 !<> v2));\n-    static assert(!__traits(compiles, v1 <>= v2));\n-    static assert(!__traits(compiles, v1 !<= v2));\n-    static assert(!__traits(compiles, v1 !>= v2));\n-    static assert(!__traits(compiles, v1 !<>= v2));\n-    v1 = v2 << 1;\n-    v1 = v2 >> 1;\n-    v1 = v2 >>> 1;\n-    static assert(!__traits(compiles, v1 && v2));\n-    static assert(!__traits(compiles, v1 || v2));\n-    v1 = ~v2;\n-    v1 = -v2;\n-    v1 = +v2;\n-    static assert(!__traits(compiles, !v1));\n-\n-    v1 += v2;\n-    v1 -= v2;\n-    v1 *= v2;\n-    v1 /= v2;\n-    v1 %= v2;\n-    v1 &= v2;\n-    v1 |= v2;\n-    v1 ^= v2;\n-    static assert(!__traits(compiles, v1 ~= v2));\n-    static assert(!__traits(compiles, v1 ^^= v2));\n-    v1 <<= 1;\n-    v1 >>= 1;\n-    v1 >>>= 1;\n-\n-    //  A cast from vector to non-vector is allowed only when the target is same size Tsarray.\n-    static assert(!__traits(compiles, cast(byte)v1));       // 1byte\n-    static assert(!__traits(compiles, cast(short)v1));      // 2byte\n-    static assert(!__traits(compiles, cast(int)v1));        // 4byte\n-    static assert(!__traits(compiles, cast(long)v1));       // 8byte\n-    static assert(!__traits(compiles, cast(float)v1));      // 4byte\n-    static assert(!__traits(compiles, cast(double)v1));     // 8byte\n-    static assert(!__traits(compiles, cast(int[2])v1));     // 8byte Tsarray\n-    static assert( __traits(compiles, cast(int[4])v1));     // 16byte Tsarray, OK\n-    static assert( __traits(compiles, cast(long[2])v1));    // 16byte Tsarray, OK\n-}\n-\n-/*****************************************/\n-\n-void test2g()\n-{\n-    long2 v1, v2 = 1, v3 = 1;\n-    v1 = v2;\n-    v1 = v2 + v3;\n-    v1 = v2 - v3;\n-    v1 = v2 * v3;\n-    v1 = v2 / v3;\n-    v1 = v2 % v3;\n-    v1 = v2 & v3;\n-    v1 = v2 | v3;\n-    v1 = v2 ^ v3;\n-    static assert(!__traits(compiles, v1 ~ v2));\n-    static assert(!__traits(compiles, v1 ^^ v2));\n-    static assert(!__traits(compiles, v1 is v2));\n-    static assert(!__traits(compiles, v1 !is v2));\n-    static assert(!__traits(compiles, v1 == v2));\n-    static assert(!__traits(compiles, v1 != v2));\n-    static assert(!__traits(compiles, v1 < v2));\n-    static assert(!__traits(compiles, v1 > v2));\n-    static assert(!__traits(compiles, v1 <= v2));\n-    static assert(!__traits(compiles, v1 >= v2));\n-    static assert(!__traits(compiles, v1 <> v2));\n-    static assert(!__traits(compiles, v1 !< v2));\n-    static assert(!__traits(compiles, v1 !> v2));\n-    static assert(!__traits(compiles, v1 !<> v2));\n-    static assert(!__traits(compiles, v1 <>= v2));\n-    static assert(!__traits(compiles, v1 !<= v2));\n-    static assert(!__traits(compiles, v1 !>= v2));\n-    static assert(!__traits(compiles, v1 !<>= v2));\n-    v1 = v2 << 1;\n-    v1 = v2 >> 1;\n-    v1 = v2 >>> 1;\n-    static assert(!__traits(compiles, v1 && v2));\n-    static assert(!__traits(compiles, v1 || v2));\n-    v1 = ~v2;\n-    v1 = -v2;\n-    v1 = +v2;\n-    static assert(!__traits(compiles, !v1));\n-\n-    v1 += v2;\n-    v1 -= v2;\n-    v1 *= v2;\n-    v1 /= v2;\n-    v1 %= v2;\n-    v1 &= v2;\n-    v1 |= v2;\n-    v1 ^= v2;\n-    static assert(!__traits(compiles, v1 ~= v2));\n-    static assert(!__traits(compiles, v1 ^^= v2));\n-    v1 <<= 1;\n-    v1 >>= 1;\n-    v1 >>>= 1;\n-\n-    //  A cast from vector to non-vector is allowed only when the target is same size Tsarray.\n-    static assert(!__traits(compiles, cast(byte)v1));       // 1byte\n-    static assert(!__traits(compiles, cast(short)v1));      // 2byte\n-    static assert(!__traits(compiles, cast(int)v1));        // 4byte\n-    static assert(!__traits(compiles, cast(long)v1));       // 8byte\n-    static assert(!__traits(compiles, cast(float)v1));      // 4byte\n-    static assert(!__traits(compiles, cast(double)v1));     // 8byte\n-    static assert(!__traits(compiles, cast(int[2])v1));     // 8byte Tsarray\n-    static assert( __traits(compiles, cast(int[4])v1));     // 16byte Tsarray, OK\n-    static assert( __traits(compiles, cast(long[2])v1));    // 16byte Tsarray, OK\n-}\n-\n-/*****************************************/\n-\n-void test2h()\n-{\n-    ulong2 v1, v2 = 1, v3 = 1;\n-    v1 = v2;\n-    v1 = v2 + v3;\n-    v1 = v2 - v3;\n-    v1 = v2 * v3;\n-    v1 = v2 / v3;\n-    v1 = v2 % v3;\n-    v1 = v2 & v3;\n-    v1 = v2 | v3;\n-    v1 = v2 ^ v3;\n-    static assert(!__traits(compiles, v1 ~ v2));\n-    static assert(!__traits(compiles, v1 ^^ v2));\n-    static assert(!__traits(compiles, v1 is v2));\n-    static assert(!__traits(compiles, v1 !is v2));\n-    static assert(!__traits(compiles, v1 == v2));\n-    static assert(!__traits(compiles, v1 != v2));\n-    static assert(!__traits(compiles, v1 < v2));\n-    static assert(!__traits(compiles, v1 > v2));\n-    static assert(!__traits(compiles, v1 <= v2));\n-    static assert(!__traits(compiles, v1 >= v2));\n-    static assert(!__traits(compiles, v1 <> v2));\n-    static assert(!__traits(compiles, v1 !< v2));\n-    static assert(!__traits(compiles, v1 !> v2));\n-    static assert(!__traits(compiles, v1 !<> v2));\n-    static assert(!__traits(compiles, v1 <>= v2));\n-    static assert(!__traits(compiles, v1 !<= v2));\n-    static assert(!__traits(compiles, v1 !>= v2));\n-    static assert(!__traits(compiles, v1 !<>= v2));\n-    v1 = v2 << 1;\n-    v1 = v2 >> 1;\n-    v1 = v2 >>> 1;\n-    static assert(!__traits(compiles, v1 && v2));\n-    static assert(!__traits(compiles, v1 || v2));\n-    v1 = ~v2;\n-    v1 = -v2;\n-    v1 = +v2;\n-    static assert(!__traits(compiles, !v1));\n-\n-    v1 += v2;\n-    v1 -= v2;\n-    v1 *= v2;\n-    v1 /= v2;\n-    v1 %= v2;\n-    v1 &= v2;\n-    v1 |= v2;\n-    v1 ^= v2;\n-    static assert(!__traits(compiles, v1 ~= v2));\n-    static assert(!__traits(compiles, v1 ^^= v2));\n-    v1 <<= 1;\n-    v1 >>= 1;\n-    v1 >>>= 1;\n-\n-    //  A cast from vector to non-vector is allowed only when the target is same size Tsarray.\n-    static assert(!__traits(compiles, cast(byte)v1));       // 1byte\n-    static assert(!__traits(compiles, cast(short)v1));      // 2byte\n-    static assert(!__traits(compiles, cast(int)v1));        // 4byte\n-    static assert(!__traits(compiles, cast(long)v1));       // 8byte\n-    static assert(!__traits(compiles, cast(float)v1));      // 4byte\n-    static assert(!__traits(compiles, cast(double)v1));     // 8byte\n-    static assert(!__traits(compiles, cast(int[2])v1));     // 8byte Tsarray\n-    static assert( __traits(compiles, cast(int[4])v1));     // 16byte Tsarray, OK\n-    static assert( __traits(compiles, cast(long[2])v1));    // 16byte Tsarray, OK\n-}\n-\n-/*****************************************/\n-\n-void test2i()\n-{\n-    float4 v1, v2 = 1, v3 = 1;\n-    v1 = v2;\n-    v1 = v2 + v3;\n-    v1 = v2 - v3;\n-    v1 = v2 * v3;\n-    v1 = v2 / v3;\n-    static assert(!__traits(compiles, v1 % v2));\n-    static assert(!__traits(compiles, v1 & v2));\n-    static assert(!__traits(compiles, v1 | v2));\n-    static assert(!__traits(compiles, v1 ^ v2));\n-    static assert(!__traits(compiles, v1 ~ v2));\n-    static assert(!__traits(compiles, v1 ^^ v2));\n-    static assert(!__traits(compiles, v1 is v2));\n-    static assert(!__traits(compiles, v1 !is v2));\n-    static assert(!__traits(compiles, v1 == v2));\n-    static assert(!__traits(compiles, v1 != v2));\n-    static assert(!__traits(compiles, v1 < v2));\n-    static assert(!__traits(compiles, v1 > v2));\n-    static assert(!__traits(compiles, v1 <= v2));\n-    static assert(!__traits(compiles, v1 >= v2));\n-    static assert(!__traits(compiles, v1 <> v2));\n-    static assert(!__traits(compiles, v1 !< v2));\n-    static assert(!__traits(compiles, v1 !> v2));\n-    static assert(!__traits(compiles, v1 !<> v2));\n-    static assert(!__traits(compiles, v1 <>= v2));\n-    static assert(!__traits(compiles, v1 !<= v2));\n-    static assert(!__traits(compiles, v1 !>= v2));\n-    static assert(!__traits(compiles, v1 !<>= v2));\n-    static assert(!__traits(compiles, v1 << 1));\n-    static assert(!__traits(compiles, v1 >> 1));\n-    static assert(!__traits(compiles, v1 >>> 1));\n-    static assert(!__traits(compiles, v1 && v2));\n-    static assert(!__traits(compiles, v1 || v2));\n-    static assert(!__traits(compiles, ~v1));\n-    v1 = -v2;\n-    v1 = +v2;\n-    static assert(!__traits(compiles, !v1));\n-\n-    v1 += v2;\n-    v1 -= v2;\n-    v1 *= v2;\n-    v1 /= v2;\n-    static assert(!__traits(compiles, v1 %= v2));\n-    static assert(!__traits(compiles, v1 &= v2));\n-    static assert(!__traits(compiles, v1 |= v2));\n-    static assert(!__traits(compiles, v1 ^= v2));\n-    static assert(!__traits(compiles, v1 ~= v2));\n-    static assert(!__traits(compiles, v1 ^^= v2));\n-    static assert(!__traits(compiles, v1 <<= 1));\n-    static assert(!__traits(compiles, v1 >>= 1));\n-    static assert(!__traits(compiles, v1 >>>= 1));\n-\n-    //  A cast from vector to non-vector is allowed only when the target is same size Tsarray.\n-    static assert(!__traits(compiles, cast(byte)v1));       // 1byte\n-    static assert(!__traits(compiles, cast(short)v1));      // 2byte\n-    static assert(!__traits(compiles, cast(int)v1));        // 4byte\n-    static assert(!__traits(compiles, cast(long)v1));       // 8byte\n-    static assert(!__traits(compiles, cast(float)v1));      // 4byte\n-    static assert(!__traits(compiles, cast(double)v1));     // 8byte\n-    static assert(!__traits(compiles, cast(int[2])v1));     // 8byte Tsarray\n-    static assert( __traits(compiles, cast(int[4])v1));     // 16byte Tsarray, OK\n-    static assert( __traits(compiles, cast(long[2])v1));    // 16byte Tsarray, OK\n-}\n-\n-/*****************************************/\n-\n-void test2j()\n-{\n-    double2 v1, v2 = 1, v3 = 1;\n-    v1 = v2;\n-    v1 = v2 + v3;\n-    v1 = v2 - v3;\n-    v1 = v2 * v3;\n-    v1 = v2 / v3;\n-    static assert(!__traits(compiles, v1 % v2));\n-    static assert(!__traits(compiles, v1 & v2));\n-    static assert(!__traits(compiles, v1 | v2));\n-    static assert(!__traits(compiles, v1 ^ v2));\n-    static assert(!__traits(compiles, v1 ~ v2));\n-    static assert(!__traits(compiles, v1 ^^ v2));\n-    static assert(!__traits(compiles, v1 is v2));\n-    static assert(!__traits(compiles, v1 !is v2));\n-    static assert(!__traits(compiles, v1 == v2));\n-    static assert(!__traits(compiles, v1 != v2));\n-    static assert(!__traits(compiles, v1 < v2));\n-    static assert(!__traits(compiles, v1 > v2));\n-    static assert(!__traits(compiles, v1 <= v2));\n-    static assert(!__traits(compiles, v1 >= v2));\n-    static assert(!__traits(compiles, v1 <> v2));\n-    static assert(!__traits(compiles, v1 !< v2));\n-    static assert(!__traits(compiles, v1 !> v2));\n-    static assert(!__traits(compiles, v1 !<> v2));\n-    static assert(!__traits(compiles, v1 <>= v2));\n-    static assert(!__traits(compiles, v1 !<= v2));\n-    static assert(!__traits(compiles, v1 !>= v2));\n-    static assert(!__traits(compiles, v1 !<>= v2));\n-    static assert(!__traits(compiles, v1 << 1));\n-    static assert(!__traits(compiles, v1 >> 1));\n-    static assert(!__traits(compiles, v1 >>> 1));\n-    static assert(!__traits(compiles, v1 && v2));\n-    static assert(!__traits(compiles, v1 || v2));\n-    static assert(!__traits(compiles, ~v1));\n-    v1 = -v2;\n-    v1 = +v2;\n-    static assert(!__traits(compiles, !v1));\n-\n-    v1 += v2;\n-    v1 -= v2;\n-    v1 *= v2;\n-    v1 /= v2;\n-    static assert(!__traits(compiles, v1 %= v2));\n-    static assert(!__traits(compiles, v1 &= v2));\n-    static assert(!__traits(compiles, v1 |= v2));\n-    static assert(!__traits(compiles, v1 ^= v2));\n-    static assert(!__traits(compiles, v1 ~= v2));\n-    static assert(!__traits(compiles, v1 ^^= v2));\n-    static assert(!__traits(compiles, v1 <<= 1));\n-    static assert(!__traits(compiles, v1 >>= 1));\n-    static assert(!__traits(compiles, v1 >>>= 1));\n-\n-    //  A cast from vector to non-vector is allowed only when the target is same size Tsarray.\n-    static assert(!__traits(compiles, cast(byte)v1));       // 1byte\n-    static assert(!__traits(compiles, cast(short)v1));      // 2byte\n-    static assert(!__traits(compiles, cast(int)v1));        // 4byte\n-    static assert(!__traits(compiles, cast(long)v1));       // 8byte\n-    static assert(!__traits(compiles, cast(float)v1));      // 4byte\n-    static assert(!__traits(compiles, cast(double)v1));     // 8byte\n-    static assert(!__traits(compiles, cast(int[2])v1));     // 8byte Tsarray\n-    static assert( __traits(compiles, cast(int[4])v1));     // 16byte Tsarray, OK\n-    static assert( __traits(compiles, cast(long[2])v1));    // 16byte Tsarray, OK\n-}\n-\n-/*****************************************/\n-\n-void test4()\n-{\n-    int4 c = 7;\n-    (cast(int[4])c)[3] = 4;\n-    (cast(int*)&c)[2] = 4;\n-    c.array[1] = 4;\n-    c.ptr[3] = 4;\n-    assert(c.length == 4);\n-}\n-\n-/*****************************************/\n-\n-void BaseTypeOfVector(T : __vector(T[N]), size_t N)(int i)\n-{\n-    assert(is(T == int));\n-    assert(N == 4);\n-}\n-\n-\n-void test7411()\n-{\n-    BaseTypeOfVector!(__vector(int[4]))(3);\n-}\n-\n-/*****************************************/\n-// https://issues.dlang.org/show_bug.cgi?id=7951\n-\n-float[4] test7951()\n-{\n-    float4 v1;\n-    float4 v2;\n-\n-    return cast(float[4])(v1+v2);\n-}\n-\n-/*****************************************/\n-\n-void test7951_2()\n-{\n-    float[4] v1 = [1,2,3,4];\n-    float[4] v2 = [1,2,3,4];\n-    float4 f1, f2, f3;\n-    f1.array = v1;\n-    f2.array = v2;\n-    f3 = f1 + f2;\n-}\n-\n-/*****************************************/\n-\n-immutable ulong2 gulong2 = 0x8000_0000_0000_0000;\n-immutable uint4 guint4 = 0x8000_0000;\n-immutable ushort8 gushort8 = 0x8000;\n-immutable ubyte16 gubyte16 = 0x80;\n-\n-immutable long2 glong2 = 0x7000_0000_0000_0000;\n-immutable int4 gint4 = 0x7000_0000;\n-immutable short8 gshort8 = 0x7000;\n-immutable byte16 gbyte16 = 0x70;\n-\n-immutable float4 gfloat4 = 4.0;\n-immutable double2 gdouble2 = 8.0;\n-\n-void test7414()\n-{\n-    immutable ulong2 lulong2 = 0x8000_0000_0000_0000;\n-    assert(memcmp(&lulong2, &gulong2, gulong2.sizeof) == 0);\n-\n-    immutable uint4 luint4 = 0x8000_0000;\n-    assert(memcmp(&luint4, &guint4, guint4.sizeof) == 0);\n-\n-    immutable ushort8 lushort8 = 0x8000;\n-    assert(memcmp(&lushort8, &gushort8, gushort8.sizeof) == 0);\n-\n-    immutable ubyte16 lubyte16 = 0x80;\n-    assert(memcmp(&lubyte16, &gubyte16, gubyte16.sizeof) == 0);\n-\n-\n-    immutable long2 llong2 = 0x7000_0000_0000_0000;\n-    assert(memcmp(&llong2, &glong2, glong2.sizeof) == 0);\n-\n-    immutable int4 lint4 = 0x7000_0000;\n-    assert(memcmp(&lint4, &gint4, gint4.sizeof) == 0);\n-\n-    immutable short8 lshort8 = 0x7000;\n-    assert(memcmp(&lshort8, &gshort8, gshort8.sizeof) == 0);\n-\n-    immutable byte16 lbyte16 = 0x70;\n-    assert(memcmp(&lbyte16, &gbyte16, gbyte16.sizeof) == 0);\n-\n-\n-    immutable float4 lfloat4 = 4.0;\n-    assert(memcmp(&lfloat4, &gfloat4, gfloat4.sizeof) == 0);\n-\n-    immutable double2 ldouble2 = 8.0;\n-    assert(memcmp(&ldouble2, &gdouble2, gdouble2.sizeof) == 0);\n-}\n-\n-/*****************************************/\n-\n-void test7413()\n-{\n-    byte16 b = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16];\n-    assert(b.array[0] == 1);\n-    assert(b.array[1] == 2);\n-    assert(b.array[2] == 3);\n-    assert(b.array[3] == 4);\n-    assert(b.array[4] == 5);\n-    assert(b.array[5] == 6);\n-    assert(b.array[6] == 7);\n-    assert(b.array[7] == 8);\n-    assert(b.array[8] == 9);\n-    assert(b.array[9] == 10);\n-    assert(b.array[10] == 11);\n-    assert(b.array[11] == 12);\n-    assert(b.array[12] == 13);\n-    assert(b.array[13] == 14);\n-    assert(b.array[14] == 15);\n-    assert(b.array[15] == 16);\n-\n-    ubyte16 ub = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16];\n-    assert(ub.array[0] == 1);\n-    assert(ub.array[1] == 2);\n-    assert(ub.array[2] == 3);\n-    assert(ub.array[3] == 4);\n-    assert(ub.array[4] == 5);\n-    assert(ub.array[5] == 6);\n-    assert(ub.array[6] == 7);\n-    assert(ub.array[7] == 8);\n-    assert(ub.array[8] == 9);\n-    assert(ub.array[9] == 10);\n-    assert(ub.array[10] == 11);\n-    assert(ub.array[11] == 12);\n-    assert(ub.array[12] == 13);\n-    assert(ub.array[13] == 14);\n-    assert(ub.array[14] == 15);\n-    assert(ub.array[15] == 16);\n-\n-    short8 s = [1,2,3,4,5,6,7,8];\n-    assert(s.array[0] == 1);\n-    assert(s.array[1] == 2);\n-    assert(s.array[2] == 3);\n-    assert(s.array[3] == 4);\n-    assert(s.array[4] == 5);\n-    assert(s.array[5] == 6);\n-    assert(s.array[6] == 7);\n-    assert(s.array[7] == 8);\n-\n-    ushort8 us = [1,2,3,4,5,6,7,8];\n-    assert(us.array[0] == 1);\n-    assert(us.array[1] == 2);\n-    assert(us.array[2] == 3);\n-    assert(us.array[3] == 4);\n-    assert(us.array[4] == 5);\n-    assert(us.array[5] == 6);\n-    assert(us.array[6] == 7);\n-    assert(us.array[7] == 8);\n-\n-    int4 i = [1,2,3,4];\n-    assert(i.array[0] == 1);\n-    assert(i.array[1] == 2);\n-    assert(i.array[2] == 3);\n-    assert(i.array[3] == 4);\n-\n-    uint4 ui = [1,2,3,4];\n-    assert(ui.array[0] == 1);\n-    assert(ui.array[1] == 2);\n-    assert(ui.array[2] == 3);\n-    assert(ui.array[3] == 4);\n-\n-    long2 l = [1,2];\n-    assert(l.array[0] == 1);\n-    assert(l.array[1] == 2);\n-\n-    ulong2 ul = [1,2];\n-    assert(ul.array[0] == 1);\n-    assert(ul.array[1] == 2);\n-\n-    float4 f = [1,2,3,4];\n-    assert(f.array[0] == 1);\n-    assert(f.array[1] == 2);\n-    assert(f.array[2] == 3);\n-    assert(f.array[3] == 4);\n-\n-    double2 d = [1,2];\n-    assert(d.array[0] == 1);\n-    assert(d.array[1] == 2);\n-}\n-\n-/*****************************************/\n-\n-byte16 b = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16];\n-ubyte16 ub = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16];\n-short8 s = [1,2,3,4,5,6,7,8];\n-ushort8 us = [1,2,3,4,5,6,7,8];\n-int4 i = [1,2,3,4];\n-uint4 ui = [1,2,3,4];\n-long2 l = [1,2];\n-ulong2 ul = [1,2];\n-float4 f = [1,2,3,4];\n-double2 d = [1,2];\n-\n-void test7413_2()\n-{\n-    assert(b.array[0] == 1);\n-    assert(b.array[1] == 2);\n-    assert(b.array[2] == 3);\n-    assert(b.array[3] == 4);\n-    assert(b.array[4] == 5);\n-    assert(b.array[5] == 6);\n-    assert(b.array[6] == 7);\n-    assert(b.array[7] == 8);\n-    assert(b.array[8] == 9);\n-    assert(b.array[9] == 10);\n-    assert(b.array[10] == 11);\n-    assert(b.array[11] == 12);\n-    assert(b.array[12] == 13);\n-    assert(b.array[13] == 14);\n-    assert(b.array[14] == 15);\n-    assert(b.array[15] == 16);\n-\n-    assert(ub.array[0] == 1);\n-    assert(ub.array[1] == 2);\n-    assert(ub.array[2] == 3);\n-    assert(ub.array[3] == 4);\n-    assert(ub.array[4] == 5);\n-    assert(ub.array[5] == 6);\n-    assert(ub.array[6] == 7);\n-    assert(ub.array[7] == 8);\n-    assert(ub.array[8] == 9);\n-    assert(ub.array[9] == 10);\n-    assert(ub.array[10] == 11);\n-    assert(ub.array[11] == 12);\n-    assert(ub.array[12] == 13);\n-    assert(ub.array[13] == 14);\n-    assert(ub.array[14] == 15);\n-    assert(ub.array[15] == 16);\n-\n-    assert(s.array[0] == 1);\n-    assert(s.array[1] == 2);\n-    assert(s.array[2] == 3);\n-    assert(s.array[3] == 4);\n-    assert(s.array[4] == 5);\n-    assert(s.array[5] == 6);\n-    assert(s.array[6] == 7);\n-    assert(s.array[7] == 8);\n-\n-    assert(us.array[0] == 1);\n-    assert(us.array[1] == 2);\n-    assert(us.array[2] == 3);\n-    assert(us.array[3] == 4);\n-    assert(us.array[4] == 5);\n-    assert(us.array[5] == 6);\n-    assert(us.array[6] == 7);\n-    assert(us.array[7] == 8);\n-\n-    assert(i.array[0] == 1);\n-    assert(i.array[1] == 2);\n-    assert(i.array[2] == 3);\n-    assert(i.array[3] == 4);\n-\n-    assert(ui.array[0] == 1);\n-    assert(ui.array[1] == 2);\n-    assert(ui.array[2] == 3);\n-    assert(ui.array[3] == 4);\n-\n-    assert(l.array[0] == 1);\n-    assert(l.array[1] == 2);\n-\n-    assert(ul.array[0] == 1);\n-    assert(ul.array[1] == 2);\n-\n-    assert(f.array[0] == 1);\n-    assert(f.array[1] == 2);\n-    assert(f.array[2] == 3);\n-    assert(f.array[3] == 4);\n-\n-    assert(d.array[0] == 1);\n-    assert(d.array[1] == 2);\n-}\n-\n-/*****************************************/\n-\n-float bug8060(float x) {\n-    int i = *cast(int*)&x;\n-    ++i;\n-    return *cast(float*)&i;\n-}\n-\n-/*****************************************/\n-// https://issues.dlang.org/show_bug.cgi?id=9200\n-\n-void bar9200(double[2] a)\n-{\n-    assert(a[0] == 1);\n-    assert(a[1] == 2);\n-}\n-\n-double2 * v9200(double2* a)\n-{\n-    return a;\n-}\n-\n-void test9200()\n-{\n-    double2 a = [1, 2];\n-\n-    *v9200(&a) = a;\n-\n-    bar9200(a.array);\n-}\n-\n-/*****************************************/\n-// https://issues.dlang.org/show_bug.cgi?id=9304\n-// https://issues.dlang.org/show_bug.cgi?id=9322\n-\n-float4 foo9304(float4 a)\n-{\n-    return -a;\n-}\n-\n-\n-void test9304()\n-{\n-    auto a = foo9304([0, 1, 2, 3]);\n-    assert(a.array == [0,-1,-2,-3]);\n-}\n-\n-/*****************************************/\n-\n-void test9910()\n-{\n-    float4 f = [1, 1, 1, 1];\n-    auto works = f + 3;\n-    auto bug = 3 + f;\n-\n-    assert (works.array == [4,4,4,4]);\n-    assert (bug.array == [4,4,4,4]);    // no property 'array' for type 'int'\n-}\n-\n-/*****************************************/\n-\n-bool normalize(double[] range, double sum = 1)\n-{\n-    double s = 0;\n-    const length = range.length;\n-    foreach (e; range)\n-    {\n-        s += e;\n-    }\n-    if (s == 0)\n-    {\n-        return false;\n-    }\n-    return true;\n-}\n-\n-void test12852()\n-{\n-    double[3] range = [0.0, 0.0, 0.0];\n-    assert(normalize(range[]) == false);\n-    range[1] = 3.0;\n-    assert(normalize(range[]) == true);\n-}\n-\n-/*****************************************/\n-\n-void test9449()\n-{\n-    ubyte16[1] table;\n-}\n-\n-/*****************************************/\n-\n-void test9449_2()\n-{\n-    float[4][2] m = [[2.0, 1, 3, 4], [5.0, 6, 7, 8]];   // segfault\n-\n-    assert(m[0][0] == 2.0);\n-    assert(m[0][1] == 1);\n-    assert(m[0][2] == 3);\n-    assert(m[0][3] == 4);\n-\n-    assert(m[1][0] == 5.0);\n-    assert(m[1][1] == 6);\n-    assert(m[1][2] == 7);\n-    assert(m[1][3] == 8);\n-}\n-\n-/*****************************************/\n-// https://issues.dlang.org/show_bug.cgi?id=13841\n-\n-void test13841()\n-{\n-    alias Vector16s = TypeTuple!(\n-        void16,  byte16,  short8,  int4,  long2,\n-                ubyte16, ushort8, uint4, ulong2, float4, double2);\n-    foreach (V1; Vector16s)\n-    {\n-        foreach (V2; Vector16s)\n-        {\n-            V1 v1 = void;\n-            V2 v2 = void;\n-            static if (is(V1 == V2))\n-            {\n-                static assert( is(typeof(true ? v1 : v2) == V1));\n-            }\n-            else\n-            {\n-                static assert(!is(typeof(true ? v1 : v2)));\n-            }\n-        }\n-    }\n-}\n-\n-/*****************************************/\n-// https://issues.dlang.org/show_bug.cgi?id=12776\n-\n-void test12776()\n-{\n-    alias Vector16s = TypeTuple!(\n-        void16,  byte16,  short8,  int4,  long2,\n-                ubyte16, ushort8, uint4, ulong2, float4, double2);\n-    foreach (V; Vector16s)\n-    {\n-        static assert(is(typeof(                   V .init) ==                    V ));\n-        static assert(is(typeof(             const(V).init) ==              const(V)));\n-        static assert(is(typeof(       inout(      V).init) ==        inout(      V)));\n-        static assert(is(typeof(       inout(const V).init) ==        inout(const V)));\n-        static assert(is(typeof(shared(            V).init) == shared(            V)));\n-        static assert(is(typeof(shared(      const V).init) == shared(      const V)));\n-        static assert(is(typeof(shared(inout       V).init) == shared(inout       V)));\n-        static assert(is(typeof(shared(inout const V).init) == shared(inout const V)));\n-        static assert(is(typeof(         immutable(V).init) ==          immutable(V)));\n-    }\n-}\n-\n-/*****************************************/\n-\n-void foo13988(double[] arr)\n-{\n-    static ulong repr(double d) { return *cast(ulong*)&d; }\n-    foreach (x; arr)\n-        assert(repr(arr[0]) == *cast(ulong*)&(arr[0]));\n-}\n-\n-\n-void test13988()\n-{\n-    double[] arr = [3.0];\n-    foo13988(arr);\n-}\n-\n-/*****************************************/\n-// https://issues.dlang.org/show_bug.cgi?id=15123\n-\n-void test15123()\n-{\n-    alias Vector16s = TypeTuple!(\n-        void16,  byte16,  short8,  int4,  long2,\n-                ubyte16, ushort8, uint4, ulong2, float4, double2);\n-    foreach (V; Vector16s)\n-    {\n-        auto x = V.init;\n-    }\n-}\n-\n-/*****************************************/\n-// https://issues.dlang.org/show_bug.cgi?id=15144\n-\n-void test15144()\n-{\n-        enum      ubyte16 csXMM1 = ['a','b','c',0,0,0,0,0];\n-        __gshared ubyte16 csXMM2 = ['a','b','c',0,0,0,0,0];\n-        immutable ubyte16 csXMM3 = ['a','b','c',0,0,0,0,0];\n-}\n-\n-/*****************************************/\n-// https://issues.dlang.org/show_bug.cgi?id=13927\n-\n-void test13927(ulong2 a)\n-{\n-    ulong2 b = [long.min, long.min];\n-    auto tmp = a - b;\n-}\n-\n-/*****************************************/\n-// https://issues.dlang.org/show_bug.cgi?id=16488\n-\n-void foo_byte16(byte t, byte s)\n-{\n-    byte16 f = s;\n-    auto p = cast(byte*)&f;\n-    foreach (i; 0 .. 16)\n-        assert(p[i] == s);\n-}\n-\n-void foo_ubyte16(ubyte t, ubyte s)\n-{\n-    ubyte16 f = s;\n-    auto p = cast(ubyte*)&f;\n-    foreach (i; 0 .. 16)\n-        assert(p[i] == s);\n-}\n-\n-\n-void foo_short8(short t, short s)\n-{\n-    short8 f = s;\n-    auto p = cast(short*)&f;\n-    foreach (i; 0 .. 8)\n-        assert(p[i] == s);\n-}\n-\n-void foo_ushort8(ushort t, ushort s)\n-{\n-    ushort8 f = s;\n-    auto p = cast(ushort*)&f;\n-    foreach (i; 0 .. 8)\n-        assert(p[i] == s);\n-}\n-\n-\n-void foo_int4(int t, int s)\n-{\n-    int4 f = s;\n-    auto p = cast(int*)&f;\n-    foreach (i; 0 .. 4)\n-        assert(p[i] == s);\n-}\n-\n-void foo_uint4(uint t, uint s, uint u)\n-{\n-    uint4 f = s;\n-    auto p = cast(uint*)&f;\n-    foreach (i; 0 .. 4)\n-        assert(p[i] == s);\n-}\n-\n-\n-void foo_long2(long t, long s, long u)\n-{\n-    long2 f = s;\n-    auto p = cast(long*)&f;\n-    foreach (i; 0 .. 2)\n-        assert(p[i] == s);\n-}\n-\n-void foo_ulong2(ulong t, ulong s)\n-{\n-    ulong2 f = s;\n-    auto p = cast(ulong*)&f;\n-    foreach (i; 0 .. 2)\n-        assert(p[i] == s);\n-}\n-\n-void foo_float4(float t, float s)\n-{\n-    float4 f = s;\n-    auto p = cast(float*)&f;\n-    foreach (i; 0 .. 4)\n-        assert(p[i] == s);\n-}\n-\n-void foo_double2(double t, double s, double u)\n-{\n-    double2 f = s;\n-    auto p = cast(double*)&f;\n-    foreach (i; 0 .. 2)\n-        assert(p[i] == s);\n-}\n-\n-\n-void test16448()\n-{\n-    foo_byte16(5, -10);\n-    foo_ubyte16(5, 11);\n-\n-    foo_short8(5, -6);\n-    foo_short8(5, 7);\n-\n-    foo_int4(5, -6);\n-    foo_uint4(5, 0x12345678, 22);\n-\n-    foo_long2(5, -6, 1);\n-    foo_ulong2(5, 0x12345678_87654321L);\n-\n-    foo_float4(5, -6);\n-    foo_double2(5, -6, 2);\n-}\n-\n-/*****************************************/\n-\n-void foo_byte32(byte t, byte s)\n-{\n-    byte32 f = s;\n-    auto p = cast(byte*)&f;\n-    foreach (i; 0 .. 32)\n-        assert(p[i] == s);\n-}\n-\n-void foo_ubyte32(ubyte t, ubyte s)\n-{\n-    ubyte32 f = s;\n-    auto p = cast(ubyte*)&f;\n-    foreach (i; 0 .. 32)\n-        assert(p[i] == s);\n-}\n-\n-void foo_short16(short t, short s)\n-{\n-    short16 f = s;\n-    auto p = cast(short*)&f;\n-    foreach (i; 0 .. 16)\n-        assert(p[i] == s);\n-}\n-\n-void foo_ushort16(ushort t, ushort s)\n-{\n-    ushort16 f = s;\n-    auto p = cast(ushort*)&f;\n-    foreach (i; 0 .. 16)\n-        assert(p[i] == s);\n-}\n-\n-void foo_int8(int t, int s)\n-{\n-    int8 f = s;\n-    auto p = cast(int*)&f;\n-    foreach (i; 0 .. 8)\n-        assert(p[i] == s);\n-}\n-\n-void foo_uint8(uint t, uint s, uint u)\n-{\n-    uint8 f = s;\n-    auto p = cast(uint*)&f;\n-    foreach (i; 0 .. 8)\n-        assert(p[i] == s);\n-}\n-\n-void foo_long4(long t, long s, long u)\n-{\n-    long4 f = s;\n-    auto p = cast(long*)&f;\n-    foreach (i; 0 .. 4)\n-        assert(p[i] == s);\n-}\n-\n-void foo_ulong4(ulong t, ulong s)\n-{\n-    ulong4 f = s;\n-    auto p = cast(ulong*)&f;\n-    foreach (i; 0 .. 4)\n-        assert(p[i] == s);\n-}\n-\n-void foo_float8(float t, float s)\n-{\n-    float8 f = s;\n-    auto p = cast(float*)&f;\n-    foreach (i; 0 .. 8)\n-        assert(p[i] == s);\n-}\n-\n-void foo_double4(double t, double s, double u)\n-{\n-    double4 f = s;\n-    auto p = cast(double*)&f;\n-    foreach (i; 0 .. 4)\n-        assert(p[i] == s);\n-}\n-\n-void test16448_32()\n-{\n-    import core.cpuid;\n-    if (!core.cpuid.avx)\n-        return;\n-\n-    foo_byte32(5, -10);\n-    foo_ubyte32(5, 11);\n-\n-    foo_short16(5, -6);\n-    foo_short16(5, 7);\n-\n-    foo_int8(5, -6);\n-    foo_uint8(5, 0x12345678, 22);\n-\n-    foo_long4(5, -6, 1);\n-    foo_ulong4(5, 0x12345678_87654321L);\n-\n-    foo_float8(5, -6);\n-    foo_double4(5, -6, 2);\n-}\n-\n-\n-/*****************************************/\n-// https://issues.dlang.org/show_bug.cgi?id=16703\n-\n-float index(float4 f4, size_t i)\n-{\n-    return f4[i];\n-    //return (*cast(float[4]*)&f4)[2];\n-}\n-\n-float[4] slice(float4 f4)\n-{\n-    return f4[];\n-}\n-\n-float slice2(float4 f4, size_t lwr, size_t upr, size_t i)\n-{\n-    float[] fa = f4[lwr .. upr];\n-    return fa[i];\n-}\n-\n-void test16703()\n-{\n-    float4 f4 = [1,2,3,4];\n-    assert(index(f4, 0) == 1);\n-    assert(index(f4, 1) == 2);\n-    assert(index(f4, 2) == 3);\n-    assert(index(f4, 3) == 4);\n-\n-    float[4] fsa = slice(f4);\n-    assert(fsa == [1.0f,2,3,4]);\n-\n-    assert(slice2(f4, 1, 3, 0) == 2);\n-    assert(slice2(f4, 1, 3, 1) == 3);\n-}\n-\n-/*****************************************/\n-\n-struct Sunsto\n-{\n-  align (1): // make sure f4 is misaligned\n-    byte b;\n-    union\n-    {\n-        float4 f4;\n-        ubyte[16] a;\n-    }\n-}\n-\n-ubyte[16] foounsto()\n-{\n-    float4 vf = 6;\n-    Sunsto s;\n-    s.f4 = vf * 2;\n-    vf = s.f4;\n-\n-    return s.a;\n-}\n-\n-void testOPvecunsto()\n-{\n-    auto a = foounsto();\n-    version (LittleEndian)\n-        assert(a == [0, 0, 64, 65, 0, 0, 64, 65, 0, 0, 64, 65, 0, 0, 64, 65]);\n-    version (BigEndian)\n-        assert(a == [65, 64, 0, 0, 65, 64, 0, 0, 65, 64, 0, 0, 65, 64, 0, 0]);\n-}\n-\n-/*****************************************/\n-// https://issues.dlang.org/show_bug.cgi?id=10447\n-\n-void test10447()\n-{\n-    immutable __vector(double[2]) a = [1.0, 2.0];\n-    __vector(double[2]) r;\n-    r += a;\n-    r = r * a;\n-}\n-\n-/*****************************************/\n-// https://issues.dlang.org/show_bug.cgi?id=17237\n-\n-struct S17237\n-{\n-    bool a;\n-    struct\n-    {\n-        bool b;\n-        int8 c;\n-    }\n-}\n-\n-static assert(S17237.a.offsetof == 0);\n-static assert(S17237.b.offsetof == 32);\n-static assert(S17237.c.offsetof == 64);\n-\n-/*****************************************/\n-// https://issues.dlang.org/show_bug.cgi?id=16697\n-\n-static assert(!is(float == __vector));\n-static assert(!is(float[1] == __vector));\n-static assert(!is(float[4] == __vector));\n-static assert( is(__vector(float[4]) == __vector));\n-static assert(!is(__vector(float[3]) == __vector));\n-static assert(!is(__vector(float[5]) == __vector));\n-static assert( is(__vector(float[4]) X == __vector) && is(X == float[4]));\n-static assert( is(__vector(byte[16]) X == __vector) && is(X == byte[16]));\n-\n-/*****************************************/\n-// https://issues.dlang.org/show_bug.cgi?id=17720\n-\n-void test17720()\n-{\n-    alias Vector16s = TypeTuple!(\n-        void16,  byte16,  short8,  int4,  long2,\n-                ubyte16, ushort8, uint4, ulong2, float4, double2);\n-    alias Vector32s = TypeTuple!(\n-        void32,  byte32,  short16,  int8,  long4,\n-                ubyte32, ushort16, uint8, ulong4, float8, double4);\n-\n-    // OK: __vector(T) -> __vector(void[]) of same size.\n-    // NG: __vector(T) -> __vector(void[]) of different size.\n-    // NG: explicit cast __vector(T) -> __vector(void[]) of different size.\n-    foreach (V; Vector16s)\n-    {\n-        static assert( __traits(compiles, { void16 v = V.init; }));\n-        static assert(!__traits(compiles, { void32 v = V.init; }));\n-        static assert(!__traits(compiles, { void32 v = cast(void32)V.init; }));\n-    }\n-    foreach (V; Vector32s)\n-    {\n-        static assert( __traits(compiles, { void32 v = V.init; }));\n-        static assert(!__traits(compiles, { void16 v = V.init; }));\n-        static assert(!__traits(compiles, { void16 v = cast(void16)V.init; }));\n-    }\n-\n-    // NG: __vector(T) -> __vector(T) of same size.\n-    // OK: explicit cast __vector(T) -> __vector(T) of same size.\n-    // NG: __vector(T) -> __vector(T) of different size.\n-    // NG: explicit cast __vector(T) -> __vector(T) of different size.\n-    foreach (V; Vector16s)\n-    {\n-        static if (is(V == double2))\n-        {\n-            static assert(!__traits(compiles, { long2 v = V.init; }));\n-            static assert( __traits(compiles, { long2 v = cast(long2)V.init; }));\n-        }\n-        else\n-        {\n-            static assert(!__traits(compiles, { double2 v = V.init; }));\n-            static assert( __traits(compiles, { double2 v = cast(double2)V.init; }));\n-        }\n-        static assert(!__traits(compiles, { double4 v = V.init; }));\n-        static assert(!__traits(compiles, { double4 v = cast(double4)V.init; }));\n-    }\n-    foreach (V; Vector32s)\n-    {\n-        static if (is(V == double4))\n-        {\n-            static assert(!__traits(compiles, { long4 v = V.init; }));\n-            static assert( __traits(compiles, { long4 v = cast(long4)V.init; }));\n-        }\n-        else\n-        {\n-            static assert(!__traits(compiles, { double4 v = V.init; }));\n-            static assert( __traits(compiles, { double4 v = cast(double4)V.init; }));\n-        }\n-        static assert(!__traits(compiles, { double2 v = V.init; }));\n-        static assert(!__traits(compiles, { double2 v = cast(double2)V.init; }));\n-    }\n-}\n-\n-/*****************************************/\n-// https://issues.dlang.org/show_bug.cgi?id=17695\n-\n-void test17695(__vector(ubyte[16]) a)\n-{\n-    auto b = -a;\n-}\n-\n-/*****************************************/\n-// https://issues.dlang.org/show_bug.cgi?id=19223\n-\n-int test19223a(const int[4] x)\n-{\n-    int sum = 0;\n-    foreach (i; x) sum += i;\n-    return sum;\n-}\n-\n-void test19223()\n-{\n-    int4 v1 = int4.init;\n-    assert(test19223a(v1.array) == 0);\n-    assert(test19223a(int4.init.array) == 0);\n-}\n-\n-/*****************************************/\n-// https://issues.dlang.org/show_bug.cgi?id=19224\n-\n-float test19224(const float[4] val)\n-{\n-    float sum = 0;\n-    foreach (x; val) sum += x;\n-    return sum;\n-}\n-\n-enum x19224 = test19224(float4.init.array);\n-static assert(x19224 is float.nan);\n-\n-enum y19224 = test19224(float4(1).array);\n-static assert(y19224 == 4);\n-\n-/*****************************************/\n-// https://issues.dlang.org/show_bug.cgi?id=19607\n-\n-int test19607a(const int[4] x)\n-{\n-    int sum = 0;\n-    foreach (i; x) sum += i;\n-    return sum;\n-}\n-\n-void test19607()\n-{\n-    int4 v1 = 1;\n-    assert(test19607a(v1.array) == 4);\n-    assert(test19607a(int4(2).array) == 8);\n-}\n-\n-/*****************************************/\n-// https://issues.dlang.org/show_bug.cgi?id=19627\n-\n-enum int[4] fail19627 = cast(int[4])int4(0);\n-\n-/*****************************************/\n-// https://issues.dlang.org/show_bug.cgi?id=19628\n-\n-enum ice19628a = int4.init[0];\n-enum ice19628b = int4.init.array[0];\n-enum ice19628c = (cast(int[4])int4.init.array)[0];\n-enum ice19628d = (cast(int[4])int4.init)[0];\n-\n-enum int4 v19628a = int4.init;\n-enum idx19628a = v19628a[0];\n-static assert(idx19628a == 0);\n-\n-enum int[4] v19628b = int4.init.array;\n-enum idx19628b = v19628b[0];\n-static assert(idx19628b == 0);\n-\n-enum int[4] v19628c = cast(int[4])int4.init.array;\n-enum idx19628c = v19628c[0];\n-static assert(idx19628c == 0);\n-\n-enum int[4] v19628d = cast(int[4])int4.init;\n-enum idx19628d = v19628d[0];\n-static assert(idx19628d == 0);\n-\n-immutable int4 v19628e = int4.init;\n-immutable idx19628e = v19628e[0];\n-static assert(idx19628e == 0);\n-\n-immutable int[4] v19628f = int4.init.array;\n-immutable idx19628f = v19628f[0];\n-static assert(idx19628f == 0);\n-\n-immutable int[4] v19628g = cast(int[4])int4.init.array;\n-immutable idx19628g = v19628g[0];\n-static assert(idx19628g == 0);\n-\n-immutable idx19628h = v19628h[0];\n-immutable int[4] v19628h = cast(int[4])int4.init;\n-static assert(idx19628h == 0);\n-\n-/*****************************************/\n-// https://issues.dlang.org/show_bug.cgi?id=19629\n-\n-enum fail19629a = int4(0)[0];\n-enum fail19629b = int4(0).array[0];\n-enum fail19629c = (cast(int[4])int4(0).array)[0];\n-enum fail19628d = (cast(int[4])int4(0))[0];\n-\n-enum int4 v19629a = int4(0);\n-enum idx19629a = v19629a[0];\n-static assert(idx19629a == 0);\n-\n-enum int[4] v19629b = int4(0).array;\n-enum idx19629b = v19629b[0];\n-static assert(idx19629b == 0);\n-\n-enum int[4] v19629c = cast(int[4])int4(0).array;\n-enum idx19629c = v19629c[0];\n-static assert(idx19629c == 0);\n-\n-enum int[4] v19629d = cast(int[4])int4(0);\n-enum idx19629d = v19629d[0];\n-static assert(idx19629d == 0);\n-\n-immutable int4 v19629e = int4(0);\n-immutable idx19629e = v19629e[0];\n-static assert(idx19629e == 0);\n-\n-immutable int[4] v19629f = int4(0).array;\n-immutable idx19629f = v19629f[0];\n-static assert(idx19629f == 0);\n-\n-immutable int[4] v19629g = cast(int[4])int4(0).array;\n-immutable idx19629g = v19629g[0];\n-static assert(idx19629g == 0);\n-\n-immutable int[4] v19629h = cast(int[4])int4(0);\n-immutable idx19629h = v19629h[0];\n-static assert(idx19629h == 0);\n-\n-/*****************************************/\n-// https://issues.dlang.org/show_bug.cgi?id=19630\n-\n-enum fail19630a = int4.init[1..2];\n-enum fail19630b = int4.init.array[1..2];\n-enum fail19630c = (cast(int[4])int4.init.array)[1..2];\n-enum fail19630d = (cast(int[4])int4.init)[1..2];\n-enum fail19630e = int4(0)[1..2];\n-enum fail19630f = int4(0).array[1..2];\n-enum fail19630g = (cast(int[4])int4(0).array)[1..2];\n-enum fail19630h = (cast(int[4])int4(0))[1..2];\n-\n-enum int4 v19630a = int4.init;\n-enum slice19630a = v19630a[1..2];\n-static assert(slice19630a == [0]);\n-\n-enum int[4] v19630b = int4.init.array;\n-enum slice19630b = v19630b[1..2];\n-static assert(slice19630b == [0]);\n-\n-enum int[4] v19630c = cast(int[4])int4.init.array;\n-enum slice19630c = v19630c[1..2];\n-static assert(slice19630c == [0]);\n-\n-enum int[4] v19630d = cast(int[4])int4.init;\n-enum slice19630d = v19630d[1..2];\n-static assert(slice19630d == [0]);\n-\n-enum int4 v19630e = int4(0);\n-enum slice19630e = v19630e[1..2];\n-static assert(slice19630e == [0]);\n-\n-enum int[4] v19630f = int4(0).array;\n-enum slice19630f = v19630f[1..2];\n-static assert(slice19630f == [0]);\n-\n-enum int[4] v19630g = cast(int[4])int4(0).array;\n-enum slice19630g = v19630g[1..2];\n-static assert(slice19630g == [0]);\n-\n-enum int[4] v19630h = cast(int[4])int4(0);\n-enum slice19630h = v19630h[1..2];\n-static assert(slice19630h == [0]);\n-\n-immutable int4 v19630i = int4.init;\n-immutable slice19630i = v19630i[1..2];\n-static assert(slice19630i == [0]);\n-\n-immutable int[4] v19630j = int4.init.array;\n-immutable slice19630j = v19630j[1..2];\n-static assert(slice19630j == [0]);\n-\n-immutable int[4] v19630k = cast(int[4])int4.init.array;\n-immutable slice19630k = v19630k[1..2];\n-static assert(slice19630k == [0]);\n-\n-immutable int[4] v19630l = cast(int[4])int4.init;\n-immutable slice19630l = v19630l[1..2];\n-static assert(slice19630l == [0]);\n-\n-immutable int4 v19630m = int4(0);\n-immutable slice19630m = v19630m[1..2];\n-static assert(slice19630m == [0]);\n-\n-immutable int[4] v19630n = int4(0).array;\n-immutable slice19630n = v19630n[1..2];\n-static assert(slice19630n == [0]);\n-\n-immutable int[4] v19630o = cast(int[4])int4(0).array;\n-immutable slice19630o = v19630o[1..2];\n-static assert(slice19630o == [0]);\n-\n-immutable int[4] v19630p = cast(int[4])int4(0);\n-immutable slice19630p = v19630p[1..2];\n-static assert(slice19630p == [0]);\n-\n-/*****************************************/\n-\n-int main()\n-{\n-    test1();\n-    test2();\n-    test2b();\n-    test2c();\n-    test2d();\n-    test2e();\n-    test2f();\n-    test2g();\n-    test2h();\n-    test2i();\n-    test2j();\n-\n-    test4();\n-    test7411();\n-\n-    test7951();\n-    test7951_2();\n-    test7414();\n-    test7413();\n-    test7413_2();\n-    test9200();\n-    test9304();\n-    test9910();\n-    test12852();\n-    test9449();\n-    test9449_2();\n-    test13988();\n-    test16448();\n-    test16448_32();\n-    test16703();\n-    testOPvecunsto();\n-    test10447();\n-\n-    test19223();\n-    test19607();\n-\n-    return 0;\n-}"}, {"sha": "374dcae5e944d05c3337ea5ce4dcbe51f9788be0", "filename": "gcc/testsuite/gdc.dg/simd1.d", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd1.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd1.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd1.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,71 @@\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+void test1()\n+{\n+    void16 v1 = void,v2 = void;\n+    byte16 b;\n+    v2 = b;\n+    v1 = v2;\n+    static assert(!__traits(compiles, v1 + v2));\n+    static assert(!__traits(compiles, v1 - v2));\n+    static assert(!__traits(compiles, v1 * v2));\n+    static assert(!__traits(compiles, v1 / v2));\n+    static assert(!__traits(compiles, v1 % v2));\n+    static assert(!__traits(compiles, v1 & v2));\n+    static assert(!__traits(compiles, v1 | v2));\n+    static assert(!__traits(compiles, v1 ^ v2));\n+    static assert(!__traits(compiles, v1 ~ v2));\n+    static assert(!__traits(compiles, v1 ^^ v2));\n+    static assert(!__traits(compiles, v1 is v2));\n+    static assert(!__traits(compiles, v1 !is v2));\n+    static assert(!__traits(compiles, v1 == v2));\n+    static assert(!__traits(compiles, v1 != v2));\n+    static assert(!__traits(compiles, v1 < v2));\n+    static assert(!__traits(compiles, v1 > v2));\n+    static assert(!__traits(compiles, v1 <= v2));\n+    static assert(!__traits(compiles, v1 >= v2));\n+    static assert(!__traits(compiles, v1 <> v2));\n+    static assert(!__traits(compiles, v1 !< v2));\n+    static assert(!__traits(compiles, v1 !> v2));\n+    static assert(!__traits(compiles, v1 !<> v2));\n+    static assert(!__traits(compiles, v1 <>= v2));\n+    static assert(!__traits(compiles, v1 !<= v2));\n+    static assert(!__traits(compiles, v1 !>= v2));\n+    static assert(!__traits(compiles, v1 !<>= v2));\n+    static assert(!__traits(compiles, v1 << 1));\n+    static assert(!__traits(compiles, v1 >> 1));\n+    static assert(!__traits(compiles, v1 >>> 1));\n+    static assert(!__traits(compiles, v1 && v2));\n+    static assert(!__traits(compiles, v1 || v2));\n+    static assert(!__traits(compiles, ~v1));\n+    static assert(!__traits(compiles, -v1));\n+    static assert(!__traits(compiles, +v1));\n+    static assert(!__traits(compiles, !v1));\n+\n+    static assert(!__traits(compiles, v1 += v2));\n+    static assert(!__traits(compiles, v1 -= v2));\n+    static assert(!__traits(compiles, v1 *= v2));\n+    static assert(!__traits(compiles, v1 /= v2));\n+    static assert(!__traits(compiles, v1 %= v2));\n+    static assert(!__traits(compiles, v1 &= v2));\n+    static assert(!__traits(compiles, v1 |= v2));\n+    static assert(!__traits(compiles, v1 ^= v2));\n+    static assert(!__traits(compiles, v1 ~= v2));\n+    static assert(!__traits(compiles, v1 ^^= v2));\n+    static assert(!__traits(compiles, v1 <<= 1));\n+    static assert(!__traits(compiles, v1 >>= 1));\n+    static assert(!__traits(compiles, v1 >>>= 1));\n+\n+    //  A cast from vector to non-vector is allowed only when the target is same size Tsarray.\n+    static assert(!__traits(compiles, cast(byte)v1));       // 1byte\n+    static assert(!__traits(compiles, cast(short)v1));      // 2byte\n+    static assert(!__traits(compiles, cast(int)v1));        // 4byte\n+    static assert(!__traits(compiles, cast(long)v1));       // 8byte\n+    static assert(!__traits(compiles, cast(float)v1));      // 4byte\n+    static assert(!__traits(compiles, cast(double)v1));     // 8byte\n+    static assert(!__traits(compiles, cast(int[2])v1));     // 8byte Tsarray\n+    static assert( __traits(compiles, cast(int[4])v1));     // 16byte Tsarray, OK\n+    static assert( __traits(compiles, cast(long[2])v1));    // 16byte Tsarray, OK\n+}"}, {"sha": "e0064c423068ff5132f9d3d8fefba1834ba0357d", "filename": "gcc/testsuite/gdc.dg/simd10447.d", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd10447.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd10447.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd10447.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,11 @@\n+// https://issues.dlang.org/show_bug.cgi?id=10447\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+\n+void test10447()\n+{\n+    immutable __vector(double[2]) a = [1.0, 2.0];\n+    __vector(double[2]) r;\n+    r += a;\n+    r = r * a;\n+}"}, {"sha": "52c10af4c3425145ac6a7afeb0e8f752fb091533", "filename": "gcc/testsuite/gdc.dg/simd12776.d", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd12776.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd12776.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd12776.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,25 @@\n+// https://issues.dlang.org/show_bug.cgi?id=12776\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+alias TypeTuple(T...) = T;\n+\n+void test12776()\n+{\n+    alias Vector16s = TypeTuple!(\n+        void16,  byte16,  short8,  int4,  long2,\n+                ubyte16, ushort8, uint4, ulong2, float4, double2);\n+    foreach (V; Vector16s)\n+    {\n+        static assert(is(typeof(                   V .init) ==                    V ));\n+        static assert(is(typeof(             const(V).init) ==              const(V)));\n+        static assert(is(typeof(       inout(      V).init) ==        inout(      V)));\n+        static assert(is(typeof(       inout(const V).init) ==        inout(const V)));\n+        static assert(is(typeof(shared(            V).init) == shared(            V)));\n+        static assert(is(typeof(shared(      const V).init) == shared(      const V)));\n+        static assert(is(typeof(shared(inout       V).init) == shared(inout       V)));\n+        static assert(is(typeof(shared(inout const V).init) == shared(inout const V)));\n+        static assert(is(typeof(         immutable(V).init) ==          immutable(V)));\n+    }\n+}"}, {"sha": "1e75026b523be1b253d2463ff46cc596f1c06131", "filename": "gcc/testsuite/gdc.dg/simd13841.d", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd13841.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd13841.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd13841.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,29 @@\n+// https://issues.dlang.org/show_bug.cgi?id=13841\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+alias TypeTuple(T...) = T;\n+\n+void test13841()\n+{\n+    alias Vector16s = TypeTuple!(\n+        void16,  byte16,  short8,  int4,  long2,\n+                ubyte16, ushort8, uint4, ulong2, float4, double2);\n+    foreach (V1; Vector16s)\n+    {\n+        foreach (V2; Vector16s)\n+        {\n+            V1 v1 = void;\n+            V2 v2 = void;\n+            static if (is(V1 == V2))\n+            {\n+                static assert( is(typeof(true ? v1 : v2) == V1));\n+            }\n+            else\n+            {\n+                static assert(!is(typeof(true ? v1 : v2)));\n+            }\n+        }\n+    }\n+}"}, {"sha": "7fad993872bbcd1f512db45febba24ffcb382f08", "filename": "gcc/testsuite/gdc.dg/simd13927.d", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd13927.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd13927.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd13927.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,10 @@\n+// https://issues.dlang.org/show_bug.cgi?id=13927\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+void test13927(ulong2 a)\n+{\n+    ulong2 b = [long.min, long.min];\n+    auto tmp = a - b;\n+}"}, {"sha": "fbbaf867cd86b63b677af7d6dc3c3ed8904ef36a", "filename": "gcc/testsuite/gdc.dg/simd13927b.d", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd13927b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd13927b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd13927b.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,12 @@\n+// https://issues.dlang.org/show_bug.cgi?id=13927\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+alias double8 = __vector(double[8]);\n+\n+void test13927(double8 a)\n+{\n+    double8 b = [long.min, long.min, long.max, long.max];\n+    auto tmp = a - b;\n+}"}, {"sha": "b3ec16c4e6a6dd604067d16273c3ad8f605ec252", "filename": "gcc/testsuite/gdc.dg/simd15123.d", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd15123.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd15123.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd15123.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,17 @@\n+// https://issues.dlang.org/show_bug.cgi?id=15123\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+alias TypeTuple(T...) = T;\n+\n+void test15123()\n+{\n+    alias Vector16s = TypeTuple!(\n+        void16,  byte16,  short8,  int4,  long2,\n+                ubyte16, ushort8, uint4, ulong2, float4, double2);\n+    foreach (V; Vector16s)\n+    {\n+        auto x = V.init;\n+    }\n+}"}, {"sha": "80e0748361d9203ad19a5e8e577060bb96e1796d", "filename": "gcc/testsuite/gdc.dg/simd15144.d", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd15144.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd15144.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd15144.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,11 @@\n+// https://issues.dlang.org/show_bug.cgi?id=15144\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+void test15144()\n+{\n+        enum      ubyte16 csXMM1 = ['a','b','c',0,0,0,0,0];\n+        __gshared ubyte16 csXMM2 = ['a','b','c',0,0,0,0,0];\n+        immutable ubyte16 csXMM3 = ['a','b','c',0,0,0,0,0];\n+}"}, {"sha": "b4a5823f4d8befeb98deafd32a4136130748d060", "filename": "gcc/testsuite/gdc.dg/simd16087.d", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd16087.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd16087.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd16087.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,98 @@\n+// https://issues.dlang.org/show_bug.cgi?id=16087\n+// { dg-do compile }\n+import core.simd;\n+\n+static if (__traits(compiles, void8))   static assert(void8.alignof == 8);\n+static if (__traits(compiles, double1)) static assert(double1.alignof == 8);\n+static if (__traits(compiles, float2))  static assert(float2.alignof == 8);\n+static if (__traits(compiles, byte8))   static assert(byte8.alignof == 8);\n+static if (__traits(compiles, ubyte8))  static assert(ubyte8.alignof == 8);\n+static if (__traits(compiles, short4))  static assert(short4.alignof == 8);\n+static if (__traits(compiles, ushort4)) static assert(ushort4.alignof == 8);\n+static if (__traits(compiles, int2))    static assert(int2.alignof == 8);\n+static if (__traits(compiles, uint2))   static assert(uint2.alignof == 8);\n+static if (__traits(compiles, long1))   static assert(long1.alignof == 8);\n+static if (__traits(compiles, ulong1))  static assert(ulong1.alignof == 8);\n+\n+static if (__traits(compiles, void8))   static assert(void8.sizeof == 8);\n+static if (__traits(compiles, double1)) static assert(double1.sizeof == 8);\n+static if (__traits(compiles, float2))  static assert(float2.sizeof == 8);\n+static if (__traits(compiles, byte8))   static assert(byte8.sizeof == 8);\n+static if (__traits(compiles, ubyte8))  static assert(ubyte8.sizeof == 8);\n+static if (__traits(compiles, short4))  static assert(short4.sizeof == 8);\n+static if (__traits(compiles, ushort4)) static assert(ushort4.sizeof == 8);\n+static if (__traits(compiles, int2))    static assert(int2.sizeof == 8);\n+static if (__traits(compiles, uint2))   static assert(uint2.sizeof == 8);\n+static if (__traits(compiles, long1))   static assert(long1.sizeof == 8);\n+static if (__traits(compiles, ulong1))  static assert(ulong1.sizeof == 8);\n+\n+static if (__traits(compiles, void16))  static assert(void16.alignof == 16);\n+static if (__traits(compiles, double2)) static assert(double2.alignof == 16);\n+static if (__traits(compiles, float4))  static assert(float4.alignof == 16);\n+static if (__traits(compiles, byte16))  static assert(byte16.alignof == 16);\n+static if (__traits(compiles, ubyte16)) static assert(ubyte16.alignof == 16);\n+static if (__traits(compiles, short8))  static assert(short8.alignof == 16);\n+static if (__traits(compiles, ushort8)) static assert(ushort8.alignof == 16);\n+static if (__traits(compiles, int4))    static assert(int4.alignof == 16);\n+static if (__traits(compiles, uint4))   static assert(uint4.alignof == 16);\n+static if (__traits(compiles, long2))   static assert(long2.alignof == 16);\n+static if (__traits(compiles, ulong2))  static assert(ulong2.alignof == 16);\n+\n+static if (__traits(compiles, void16))  static assert(void16.sizeof == 16);\n+static if (__traits(compiles, double2)) static assert(double2.sizeof == 16);\n+static if (__traits(compiles, float4))  static assert(float4.sizeof == 16);\n+static if (__traits(compiles, byte16))  static assert(byte16.sizeof == 16);\n+static if (__traits(compiles, ubyte16)) static assert(ubyte16.sizeof == 16);\n+static if (__traits(compiles, short8))  static assert(short8.sizeof == 16);\n+static if (__traits(compiles, ushort8)) static assert(ushort8.sizeof == 16);\n+static if (__traits(compiles, int4))    static assert(int4.sizeof == 16);\n+static if (__traits(compiles, uint4))   static assert(uint4.sizeof == 16);\n+static if (__traits(compiles, long2))   static assert(long2.sizeof == 16);\n+static if (__traits(compiles, ulong2))  static assert(ulong2.sizeof == 16);\n+static if (__traits(compiles, void32))   static assert(void32.alignof == 32);\n+static if (__traits(compiles, double4))  static assert(double4.alignof == 32);\n+static if (__traits(compiles, float8))   static assert(float8.alignof == 32);\n+static if (__traits(compiles, byte32))   static assert(byte32.alignof == 32);\n+static if (__traits(compiles, ubyte32))  static assert(ubyte32.alignof == 32);\n+static if (__traits(compiles, short16))  static assert(short16.alignof == 32);\n+static if (__traits(compiles, ushort16)) static assert(ushort16.alignof == 32);\n+static if (__traits(compiles, int8))     static assert(int8.alignof == 32);\n+static if (__traits(compiles, uint8))    static assert(uint8.alignof == 32);\n+static if (__traits(compiles, long4))    static assert(long4.alignof == 32);\n+static if (__traits(compiles, ulong4))   static assert(ulong4.alignof == 32);\n+\n+static if (__traits(compiles, void32))   static assert(void32.sizeof == 32);\n+static if (__traits(compiles, double4))  static assert(double4.sizeof == 32);\n+static if (__traits(compiles, float8))   static assert(float8.sizeof == 32);\n+static if (__traits(compiles, byte32))   static assert(byte32.sizeof == 32);\n+static if (__traits(compiles, ubyte32))  static assert(ubyte32.sizeof == 32);\n+static if (__traits(compiles, short16))  static assert(short16.sizeof == 32);\n+static if (__traits(compiles, ushort16)) static assert(ushort16.sizeof == 32);\n+static if (__traits(compiles, int8))     static assert(int8.sizeof == 32);\n+static if (__traits(compiles, uint8))    static assert(uint8.sizeof == 32);\n+static if (__traits(compiles, long4))    static assert(long4.sizeof == 32);\n+static if (__traits(compiles, ulong4))   static assert(ulong4.sizeof == 32);\n+\n+static if (__traits(compiles, void64))   static assert(void64.alignof == 64);\n+static if (__traits(compiles, double8))  static assert(double8.alignof == 64);\n+static if (__traits(compiles, float16))  static assert(float16.alignof == 64);\n+static if (__traits(compiles, byte64))   static assert(byte64.alignof == 64);\n+static if (__traits(compiles, ubyte64))  static assert(ubyte64.alignof == 64);\n+static if (__traits(compiles, short32))  static assert(short32.alignof == 64);\n+static if (__traits(compiles, ushort32)) static assert(ushort32.alignof == 64);\n+static if (__traits(compiles, int16))    static assert(int16.alignof == 64);\n+static if (__traits(compiles, uint16))   static assert(uint16.alignof == 64);\n+static if (__traits(compiles, long8))    static assert(long8.alignof == 64);\n+static if (__traits(compiles, ulong8))   static assert(ulong8.alignof == 64);\n+\n+static if (__traits(compiles, void64))   static assert(void64.sizeof == 64);\n+static if (__traits(compiles, double8))  static assert(double8.sizeof == 64);\n+static if (__traits(compiles, float16))  static assert(float16.sizeof == 64);\n+static if (__traits(compiles, byte64))   static assert(byte64.sizeof == 64);\n+static if (__traits(compiles, ubyte64))  static assert(ubyte64.sizeof == 64);\n+static if (__traits(compiles, short32))  static assert(short32.sizeof == 64);\n+static if (__traits(compiles, ushort32)) static assert(ushort32.sizeof == 64);\n+static if (__traits(compiles, int16))    static assert(int16.sizeof == 64);\n+static if (__traits(compiles, uint16))   static assert(uint16.sizeof == 64);\n+static if (__traits(compiles, long8))    static assert(long8.sizeof == 64);\n+static if (__traits(compiles, ulong8))   static assert(ulong8.sizeof == 64);"}, {"sha": "8ef343d153fe5507a310cf05986f936e5c6141e9", "filename": "gcc/testsuite/gdc.dg/simd16697.d", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd16697.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd16697.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd16697.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,12 @@\n+// https://issues.dlang.org/show_bug.cgi?id=16697\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+\n+static assert(!is(float == __vector));\n+static assert(!is(float[1] == __vector));\n+static assert(!is(float[4] == __vector));\n+static assert( is(__vector(float[4]) == __vector));\n+static assert(!is(__vector(float[3]) == __vector));\n+static assert(!is(__vector(float[5]) == __vector));\n+static assert( is(__vector(float[4]) X == __vector) && is(X == float[4]));\n+static assert( is(__vector(byte[16]) X == __vector) && is(X == byte[16]));"}, {"sha": "a98323570944a6be77de83e8e4664daa1fc3afed", "filename": "gcc/testsuite/gdc.dg/simd17237.d", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd17237.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd17237.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd17237.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,18 @@\n+// https://issues.dlang.org/show_bug.cgi?id=17237\n+// { dg-additional-options \"-mavx2\" { target avx2_runtime } }\n+// { dg-do compile { target { avx2_runtime || vect_sizes_32B_16B } } }\n+import core.simd;\n+\n+struct S17237\n+{\n+    bool a;\n+    struct\n+    {\n+        bool b;\n+        int8 c;\n+    }\n+}\n+\n+static assert(S17237.a.offsetof == 0);\n+static assert(S17237.b.offsetof == 32);\n+static assert(S17237.c.offsetof == 64);"}, {"sha": "5d45584712c7ab4ed65feee5a83628b4098b0164", "filename": "gcc/testsuite/gdc.dg/simd17695.d", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd17695.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd17695.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd17695.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,8 @@\n+// https://issues.dlang.org/show_bug.cgi?id=17695\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+\n+void test17695(__vector(ubyte[16]) a)\n+{\n+    auto b = -a;\n+}"}, {"sha": "d1608969f7b97cec0aa60a92edad1258f99cb079", "filename": "gcc/testsuite/gdc.dg/simd17720a.d", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd17720a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd17720a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd17720a.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,43 @@\n+// https://issues.dlang.org/show_bug.cgi?id=17720\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+alias TypeTuple(T...) = T;\n+\n+void test17720()\n+{\n+    alias Vector16s = TypeTuple!(\n+        void16,  byte16,  short8,  int4,  long2,\n+                ubyte16, ushort8, uint4, ulong2, float4, double2);\n+\n+    // OK: __vector(T) -> __vector(void[]) of same size.\n+    // NG: __vector(T) -> __vector(void[]) of different size.\n+    // NG: explicit cast __vector(T) -> __vector(void[]) of different size.\n+    foreach (V; Vector16s)\n+    {\n+        static assert( __traits(compiles, { void16 v = V.init; }));\n+        static assert(!__traits(compiles, { void32 v = V.init; }));\n+        static assert(!__traits(compiles, { void32 v = cast(void32)V.init; }));\n+    }\n+\n+    // NG: __vector(T) -> __vector(T) of same size.\n+    // OK: explicit cast __vector(T) -> __vector(T) of same size.\n+    // NG: __vector(T) -> __vector(T) of different size.\n+    // NG: explicit cast __vector(T) -> __vector(T) of different size.\n+    foreach (V; Vector16s)\n+    {\n+        static if (is(V == double2))\n+        {\n+            static assert(!__traits(compiles, { long2 v = V.init; }));\n+            static assert( __traits(compiles, { long2 v = cast(long2)V.init; }));\n+        }\n+        else\n+        {\n+            static assert(!__traits(compiles, { double2 v = V.init; }));\n+            static assert( __traits(compiles, { double2 v = cast(double2)V.init; }));\n+        }\n+        static assert(!__traits(compiles, { double4 v = V.init; }));\n+        static assert(!__traits(compiles, { double4 v = cast(double4)V.init; }));\n+    }\n+}"}, {"sha": "c0d4153fca0a59a33c3b6cd2008431dea6a3e88a", "filename": "gcc/testsuite/gdc.dg/simd17720b.d", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd17720b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd17720b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd17720b.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,43 @@\n+// https://issues.dlang.org/show_bug.cgi?id=17720\n+// { dg-additional-options \"-mavx2\" { target avx2_runtime } }\n+// { dg-do compile { target { avx2_runtime || vect_sizes_32B_16B } } }\n+import core.simd;\n+\n+alias TypeTuple(T...) = T;\n+\n+void test17720()\n+{\n+    alias Vector32s = TypeTuple!(\n+        void32,  byte32,  short16,  int8,  long4,\n+                ubyte32, ushort16, uint8, ulong4, float8, double4);\n+\n+    // OK: __vector(T) -> __vector(void[]) of same size.\n+    // NG: __vector(T) -> __vector(void[]) of different size.\n+    // NG: explicit cast __vector(T) -> __vector(void[]) of different size.\n+    foreach (V; Vector32s)\n+    {\n+        static assert( __traits(compiles, { void32 v = V.init; }));\n+        static assert(!__traits(compiles, { void16 v = V.init; }));\n+        static assert(!__traits(compiles, { void16 v = cast(void16)V.init; }));\n+    }\n+\n+    // NG: __vector(T) -> __vector(T) of same size.\n+    // OK: explicit cast __vector(T) -> __vector(T) of same size.\n+    // NG: __vector(T) -> __vector(T) of different size.\n+    // NG: explicit cast __vector(T) -> __vector(T) of different size.\n+    foreach (V; Vector32s)\n+    {\n+        static if (is(V == double4))\n+        {\n+            static assert(!__traits(compiles, { long4 v = V.init; }));\n+            static assert( __traits(compiles, { long4 v = cast(long4)V.init; }));\n+        }\n+        else\n+        {\n+            static assert(!__traits(compiles, { double4 v = V.init; }));\n+            static assert( __traits(compiles, { double4 v = cast(double4)V.init; }));\n+        }\n+        static assert(!__traits(compiles, { double2 v = V.init; }));\n+        static assert(!__traits(compiles, { double2 v = cast(double2)V.init; }));\n+    }\n+}"}, {"sha": "c9d42aa2af23f9bea8a51f78b48224925094294c", "filename": "gcc/testsuite/gdc.dg/simd19224.d", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd19224.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd19224.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd19224.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,17 @@\n+// https://issues.dlang.org/show_bug.cgi?id=19224\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+float test19224(const float[4] val)\n+{\n+    float sum = 0;\n+    foreach (x; val) sum += x;\n+    return sum;\n+}\n+\n+enum x19224 = test19224(float4.init.array);\n+static assert(x19224 is float.nan);\n+\n+enum y19224 = test19224(float4(1).array);\n+static assert(y19224 == 4);"}, {"sha": "a26bb3642c6931bb6a53eb2bf6778bc04c6a9be4", "filename": "gcc/testsuite/gdc.dg/simd19627.d", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd19627.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd19627.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd19627.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,6 @@\n+// https://issues.dlang.org/show_bug.cgi?id=19627\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+enum int[4] fail19627 = cast(int[4])int4(0);"}, {"sha": "2c5ddf102d279a3ed7abbd05f9442c99c4d8dae4", "filename": "gcc/testsuite/gdc.dg/simd19628.d", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd19628.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd19628.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd19628.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,41 @@\n+// https://issues.dlang.org/show_bug.cgi?id=19628\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+enum ice19628a = int4.init[0];\n+enum ice19628b = int4.init.array[0];\n+enum ice19628c = (cast(int[4])int4.init.array)[0];\n+enum ice19628d = (cast(int[4])int4.init)[0];\n+\n+enum int4 v19628a = int4.init;\n+enum idx19628a = v19628a[0];\n+static assert(idx19628a == 0);\n+\n+enum int[4] v19628b = int4.init.array;\n+enum idx19628b = v19628b[0];\n+static assert(idx19628b == 0);\n+\n+enum int[4] v19628c = cast(int[4])int4.init.array;\n+enum idx19628c = v19628c[0];\n+static assert(idx19628c == 0);\n+\n+enum int[4] v19628d = cast(int[4])int4.init;\n+enum idx19628d = v19628d[0];\n+static assert(idx19628d == 0);\n+\n+immutable int4 v19628e = int4.init;\n+immutable idx19628e = v19628e[0];\n+static assert(idx19628e == 0);\n+\n+immutable int[4] v19628f = int4.init.array;\n+immutable idx19628f = v19628f[0];\n+static assert(idx19628f == 0);\n+\n+immutable int[4] v19628g = cast(int[4])int4.init.array;\n+immutable idx19628g = v19628g[0];\n+static assert(idx19628g == 0);\n+\n+immutable idx19628h = v19628h[0];\n+immutable int[4] v19628h = cast(int[4])int4.init;\n+static assert(idx19628h == 0);"}, {"sha": "7a9e2b71db9b36b04e729734d86dcedb8fb8073c", "filename": "gcc/testsuite/gdc.dg/simd19629.d", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd19629.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd19629.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd19629.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,41 @@\n+// https://issues.dlang.org/show_bug.cgi?id=19629\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+enum fail19629a = int4(0)[0];\n+enum fail19629b = int4(0).array[0];\n+enum fail19629c = (cast(int[4])int4(0).array)[0];\n+enum fail19628d = (cast(int[4])int4(0))[0];\n+\n+enum int4 v19629a = int4(0);\n+enum idx19629a = v19629a[0];\n+static assert(idx19629a == 0);\n+\n+enum int[4] v19629b = int4(0).array;\n+enum idx19629b = v19629b[0];\n+static assert(idx19629b == 0);\n+\n+enum int[4] v19629c = cast(int[4])int4(0).array;\n+enum idx19629c = v19629c[0];\n+static assert(idx19629c == 0);\n+\n+enum int[4] v19629d = cast(int[4])int4(0);\n+enum idx19629d = v19629d[0];\n+static assert(idx19629d == 0);\n+\n+immutable int4 v19629e = int4(0);\n+immutable idx19629e = v19629e[0];\n+static assert(idx19629e == 0);\n+\n+immutable int[4] v19629f = int4(0).array;\n+immutable idx19629f = v19629f[0];\n+static assert(idx19629f == 0);\n+\n+immutable int[4] v19629g = cast(int[4])int4(0).array;\n+immutable idx19629g = v19629g[0];\n+static assert(idx19629g == 0);\n+\n+immutable int[4] v19629h = cast(int[4])int4(0);\n+immutable idx19629h = v19629h[0];\n+static assert(idx19629h == 0);"}, {"sha": "0d45d28f47add82934acd0a16fb7e6e57a32a448", "filename": "gcc/testsuite/gdc.dg/simd19630.d", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd19630.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd19630.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd19630.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,77 @@\n+// https://issues.dlang.org/show_bug.cgi?id=19630\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+enum fail19630a = int4.init[1..2];\n+enum fail19630b = int4.init.array[1..2];\n+enum fail19630c = (cast(int[4])int4.init.array)[1..2];\n+enum fail19630d = (cast(int[4])int4.init)[1..2];\n+enum fail19630e = int4(0)[1..2];\n+enum fail19630f = int4(0).array[1..2];\n+enum fail19630g = (cast(int[4])int4(0).array)[1..2];\n+enum fail19630h = (cast(int[4])int4(0))[1..2];\n+\n+enum int4 v19630a = int4.init;\n+enum slice19630a = v19630a[1..2];\n+static assert(slice19630a == [0]);\n+\n+enum int[4] v19630b = int4.init.array;\n+enum slice19630b = v19630b[1..2];\n+static assert(slice19630b == [0]);\n+\n+enum int[4] v19630c = cast(int[4])int4.init.array;\n+enum slice19630c = v19630c[1..2];\n+static assert(slice19630c == [0]);\n+\n+enum int[4] v19630d = cast(int[4])int4.init;\n+enum slice19630d = v19630d[1..2];\n+static assert(slice19630d == [0]);\n+\n+enum int4 v19630e = int4(0);\n+enum slice19630e = v19630e[1..2];\n+static assert(slice19630e == [0]);\n+\n+enum int[4] v19630f = int4(0).array;\n+enum slice19630f = v19630f[1..2];\n+static assert(slice19630f == [0]);\n+\n+enum int[4] v19630g = cast(int[4])int4(0).array;\n+enum slice19630g = v19630g[1..2];\n+static assert(slice19630g == [0]);\n+\n+enum int[4] v19630h = cast(int[4])int4(0);\n+enum slice19630h = v19630h[1..2];\n+static assert(slice19630h == [0]);\n+\n+immutable int4 v19630i = int4.init;\n+immutable slice19630i = v19630i[1..2];\n+static assert(slice19630i == [0]);\n+\n+immutable int[4] v19630j = int4.init.array;\n+immutable slice19630j = v19630j[1..2];\n+static assert(slice19630j == [0]);\n+\n+immutable int[4] v19630k = cast(int[4])int4.init.array;\n+immutable slice19630k = v19630k[1..2];\n+static assert(slice19630k == [0]);\n+\n+immutable int[4] v19630l = cast(int[4])int4.init;\n+immutable slice19630l = v19630l[1..2];\n+static assert(slice19630l == [0]);\n+\n+immutable int4 v19630m = int4(0);\n+immutable slice19630m = v19630m[1..2];\n+static assert(slice19630m == [0]);\n+\n+immutable int[4] v19630n = int4(0).array;\n+immutable slice19630n = v19630n[1..2];\n+static assert(slice19630n == [0]);\n+\n+immutable int[4] v19630o = cast(int[4])int4(0).array;\n+immutable slice19630o = v19630o[1..2];\n+static assert(slice19630o == [0]);\n+\n+immutable int[4] v19630p = cast(int[4])int4(0);\n+immutable slice19630p = v19630p[1..2];\n+static assert(slice19630p == [0]);"}, {"sha": "b630a473b18be764c792a970d7f7e86fc2c90fa6", "filename": "gcc/testsuite/gdc.dg/simd2a.d", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2a.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,69 @@\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+void test2a()\n+{\n+    byte16 v1, v2 = 1, v3 = 1;\n+    v1 = v2;\n+    v1 = v2 + v3;\n+    v1 = v2 - v3;\n+    v1 = v2 * v3;\n+    v1 = v2 / v3;\n+    v1 = v2 % v3;\n+    v1 = v2 & v3;\n+    v1 = v2 | v3;\n+    v1 = v2 ^ v3;\n+    static assert(!__traits(compiles, v1 ~ v2));\n+    static assert(!__traits(compiles, v1 ^^ v2));\n+    static assert(!__traits(compiles, v1 is v2));\n+    static assert(!__traits(compiles, v1 !is v2));\n+    static assert(!__traits(compiles, v1 == v2));\n+    static assert(!__traits(compiles, v1 != v2));\n+    static assert(!__traits(compiles, v1 < v2));\n+    static assert(!__traits(compiles, v1 > v2));\n+    static assert(!__traits(compiles, v1 <= v2));\n+    static assert(!__traits(compiles, v1 >= v2));\n+    static assert(!__traits(compiles, v1 <> v2));\n+    static assert(!__traits(compiles, v1 !< v2));\n+    static assert(!__traits(compiles, v1 !> v2));\n+    static assert(!__traits(compiles, v1 !<> v2));\n+    static assert(!__traits(compiles, v1 <>= v2));\n+    static assert(!__traits(compiles, v1 !<= v2));\n+    static assert(!__traits(compiles, v1 !>= v2));\n+    static assert(!__traits(compiles, v1 !<>= v2));\n+    v1 = v2 << 1;\n+    v1 = v2 >> 1;\n+    v1 = v2 >>> 1;\n+    static assert(!__traits(compiles, v1 && v2));\n+    static assert(!__traits(compiles, v1 || v2));\n+    v1 = ~v2;\n+    v1 = -v2;\n+    v1 = +v2;\n+    static assert(!__traits(compiles, !v1));\n+\n+    v1 += v2;\n+    v1 -= v2;\n+    v1 *= v2;\n+    v1 /= v2;\n+    v1 %= v2;\n+    v1 &= v2;\n+    v1 |= v2;\n+    v1 ^= v2;\n+    static assert(!__traits(compiles, v1 ~= v2));\n+    static assert(!__traits(compiles, v1 ^^= v2));\n+    v1 <<= 1;\n+    v1 >>= 1;\n+    v1 >>>= 1;\n+\n+    //  A cast from vector to non-vector is allowed only when the target is same size Tsarray.\n+    static assert(!__traits(compiles, cast(byte)v1));       // 1byte\n+    static assert(!__traits(compiles, cast(short)v1));      // 2byte\n+    static assert(!__traits(compiles, cast(int)v1));        // 4byte\n+    static assert(!__traits(compiles, cast(long)v1));       // 8byte\n+    static assert(!__traits(compiles, cast(float)v1));      // 4byte\n+    static assert(!__traits(compiles, cast(double)v1));     // 8byte\n+    static assert(!__traits(compiles, cast(int[2])v1));     // 8byte Tsarray\n+    static assert( __traits(compiles, cast(int[4])v1));     // 16byte Tsarray, OK\n+    static assert( __traits(compiles, cast(long[2])v1));    // 16byte Tsarray, OK\n+}"}, {"sha": "35c42880ce2d4cd9e2c690f2166fc6b2a249c9c0", "filename": "gcc/testsuite/gdc.dg/simd2b.d", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2b.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,69 @@\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+void test2b()\n+{\n+    ubyte16 v1, v2 = 1, v3 = 1;\n+    v1 = v2;\n+    v1 = v2 + v3;\n+    v1 = v2 - v3;\n+    v1 = v2 * v3;\n+    v1 = v2 / v3;\n+    v1 = v2 % v3;\n+    v1 = v2 & v3;\n+    v1 = v2 | v3;\n+    v1 = v2 ^ v3;\n+    static assert(!__traits(compiles, v1 ~ v2));\n+    static assert(!__traits(compiles, v1 ^^ v2));\n+    static assert(!__traits(compiles, v1 is v2));\n+    static assert(!__traits(compiles, v1 !is v2));\n+    static assert(!__traits(compiles, v1 == v2));\n+    static assert(!__traits(compiles, v1 != v2));\n+    static assert(!__traits(compiles, v1 < v2));\n+    static assert(!__traits(compiles, v1 > v2));\n+    static assert(!__traits(compiles, v1 <= v2));\n+    static assert(!__traits(compiles, v1 >= v2));\n+    static assert(!__traits(compiles, v1 <> v2));\n+    static assert(!__traits(compiles, v1 !< v2));\n+    static assert(!__traits(compiles, v1 !> v2));\n+    static assert(!__traits(compiles, v1 !<> v2));\n+    static assert(!__traits(compiles, v1 <>= v2));\n+    static assert(!__traits(compiles, v1 !<= v2));\n+    static assert(!__traits(compiles, v1 !>= v2));\n+    static assert(!__traits(compiles, v1 !<>= v2));\n+    v1 = v2 << 1;\n+    v1 = v2 >> 1;\n+    v1 = v2 >>> 1;\n+    static assert(!__traits(compiles, v1 && v2));\n+    static assert(!__traits(compiles, v1 || v2));\n+    v1 = ~v2;\n+    v1 = -v2;\n+    v1 = +v2;\n+    static assert(!__traits(compiles, !v1));\n+\n+    v1 += v2;\n+    v1 -= v2;\n+    v1 *= v2;\n+    v1 /= v2;\n+    v1 %= v2;\n+    v1 &= v2;\n+    v1 |= v2;\n+    v1 ^= v2;\n+    static assert(!__traits(compiles, v1 ~= v2));\n+    static assert(!__traits(compiles, v1 ^^= v2));\n+    v1 <<= 1;\n+    v1 >>= 1;\n+    v1 >>>= 1;\n+\n+    //  A cast from vector to non-vector is allowed only when the target is same size Tsarray.\n+    static assert(!__traits(compiles, cast(byte)v1));       // 1byte\n+    static assert(!__traits(compiles, cast(short)v1));      // 2byte\n+    static assert(!__traits(compiles, cast(int)v1));        // 4byte\n+    static assert(!__traits(compiles, cast(long)v1));       // 8byte\n+    static assert(!__traits(compiles, cast(float)v1));      // 4byte\n+    static assert(!__traits(compiles, cast(double)v1));     // 8byte\n+    static assert(!__traits(compiles, cast(int[2])v1));     // 8byte Tsarray\n+    static assert( __traits(compiles, cast(int[4])v1));     // 16byte Tsarray, OK\n+    static assert( __traits(compiles, cast(long[2])v1));    // 16byte Tsarray, OK\n+}"}, {"sha": "2f19e75a35b820b6f880c44ffdf840891fbdd2e0", "filename": "gcc/testsuite/gdc.dg/simd2c.d", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2c.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2c.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2c.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,70 @@\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+void test2c()\n+{\n+    short8 v1, v2 = 1, v3 = 1;\n+    v1 = v2;\n+    v1 = v2 + v3;\n+    v1 = v2 - v3;\n+    v1 = v2 * v3;\n+    v1 = v2 / v3;\n+    v1 = v2 % v3;\n+    v1 = v2 & v3;\n+    v1 = v2 | v3;\n+    v1 = v2 ^ v3;\n+    static assert(!__traits(compiles, v1 ~ v2));\n+    static assert(!__traits(compiles, v1 ^^ v2));\n+    static assert(!__traits(compiles, v1 is v2));\n+    static assert(!__traits(compiles, v1 !is v2));\n+    static assert(!__traits(compiles, v1 == v2));\n+    static assert(!__traits(compiles, v1 != v2));\n+    static assert(!__traits(compiles, v1 < v2));\n+    static assert(!__traits(compiles, v1 > v2));\n+    static assert(!__traits(compiles, v1 <= v2));\n+    static assert(!__traits(compiles, v1 >= v2));\n+    static assert(!__traits(compiles, v1 <> v2));\n+    static assert(!__traits(compiles, v1 !< v2));\n+    static assert(!__traits(compiles, v1 !> v2));\n+    static assert(!__traits(compiles, v1 !<> v2));\n+    static assert(!__traits(compiles, v1 <>= v2));\n+    static assert(!__traits(compiles, v1 !<= v2));\n+    static assert(!__traits(compiles, v1 !>= v2));\n+    static assert(!__traits(compiles, v1 !<>= v2));\n+    v1 = v2 << 1;\n+    v1 = v2 >> 1;\n+    v1 = v2 >>> 1;\n+    static assert(!__traits(compiles, v1 && v2));\n+    static assert(!__traits(compiles, v1 || v2));\n+    v1 = ~v2;\n+    v1 = -v2;\n+    v1 = +v2;\n+    static assert(!__traits(compiles, !v1));\n+\n+    v1 += v2;\n+    v1 -= v2;\n+    v1 *= v2;\n+    v1 /= v2;\n+    v1 %= v2;\n+    v1 &= v2;\n+    v1 |= v2;\n+    v1 ^= v2;\n+    static assert(!__traits(compiles, v1 ~= v2));\n+    static assert(!__traits(compiles, v1 ^^= v2));\n+    v1 <<= 1;\n+    v1 >>= 1;\n+    v1 >>>= 1;\n+    v1 = v1 * 3;\n+\n+    //  A cast from vector to non-vector is allowed only when the target is same size Tsarray.\n+    static assert(!__traits(compiles, cast(byte)v1));       // 1byte\n+    static assert(!__traits(compiles, cast(short)v1));      // 2byte\n+    static assert(!__traits(compiles, cast(int)v1));        // 4byte\n+    static assert(!__traits(compiles, cast(long)v1));       // 8byte\n+    static assert(!__traits(compiles, cast(float)v1));      // 4byte\n+    static assert(!__traits(compiles, cast(double)v1));     // 8byte\n+    static assert(!__traits(compiles, cast(int[2])v1));     // 8byte Tsarray\n+    static assert( __traits(compiles, cast(int[4])v1));     // 16byte Tsarray, OK\n+    static assert( __traits(compiles, cast(long[2])v1));    // 16byte Tsarray, OK\n+}"}, {"sha": "9d378e4cdbaa579dde556a288ad279f91b6e47d4", "filename": "gcc/testsuite/gdc.dg/simd2d.d", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2d.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2d.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2d.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,69 @@\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+void test2d()\n+{\n+    ushort8 v1, v2 = 1, v3 = 1;\n+    v1 = v2;\n+    v1 = v2 + v3;\n+    v1 = v2 - v3;\n+    v1 = v2 * v3;\n+    v1 = v2 / v3;\n+    v1 = v2 % v3;\n+    v1 = v2 & v3;\n+    v1 = v2 | v3;\n+    v1 = v2 ^ v3;\n+    static assert(!__traits(compiles, v1 ~ v2));\n+    static assert(!__traits(compiles, v1 ^^ v2));\n+    static assert(!__traits(compiles, v1 is v2));\n+    static assert(!__traits(compiles, v1 !is v2));\n+    static assert(!__traits(compiles, v1 == v2));\n+    static assert(!__traits(compiles, v1 != v2));\n+    static assert(!__traits(compiles, v1 < v2));\n+    static assert(!__traits(compiles, v1 > v2));\n+    static assert(!__traits(compiles, v1 <= v2));\n+    static assert(!__traits(compiles, v1 >= v2));\n+    static assert(!__traits(compiles, v1 <> v2));\n+    static assert(!__traits(compiles, v1 !< v2));\n+    static assert(!__traits(compiles, v1 !> v2));\n+    static assert(!__traits(compiles, v1 !<> v2));\n+    static assert(!__traits(compiles, v1 <>= v2));\n+    static assert(!__traits(compiles, v1 !<= v2));\n+    static assert(!__traits(compiles, v1 !>= v2));\n+    static assert(!__traits(compiles, v1 !<>= v2));\n+    v1 = v2 << 1;\n+    v1 = v2 >> 1;\n+    v1 = v2 >>> 1;\n+    static assert(!__traits(compiles, v1 && v2));\n+    static assert(!__traits(compiles, v1 || v2));\n+    v1 = ~v2;\n+    v1 = -v2;\n+    v1 = +v2;\n+    static assert(!__traits(compiles, !v1));\n+\n+    v1 += v2;\n+    v1 -= v2;\n+    v1 *= v2;\n+    v1 /= v2;\n+    v1 %= v2;\n+    v1 &= v2;\n+    v1 |= v2;\n+    v1 ^= v2;\n+    static assert(!__traits(compiles, v1 ~= v2));\n+    static assert(!__traits(compiles, v1 ^^= v2));\n+    v1 <<= 1;\n+    v1 >>= 1;\n+    v1 >>>= 1;\n+\n+    //  A cast from vector to non-vector is allowed only when the target is same size Tsarray.\n+    static assert(!__traits(compiles, cast(byte)v1));       // 1byte\n+    static assert(!__traits(compiles, cast(short)v1));      // 2byte\n+    static assert(!__traits(compiles, cast(int)v1));        // 4byte\n+    static assert(!__traits(compiles, cast(long)v1));       // 8byte\n+    static assert(!__traits(compiles, cast(float)v1));      // 4byte\n+    static assert(!__traits(compiles, cast(double)v1));     // 8byte\n+    static assert(!__traits(compiles, cast(int[2])v1));     // 8byte Tsarray\n+    static assert( __traits(compiles, cast(int[4])v1));     // 16byte Tsarray, OK\n+    static assert( __traits(compiles, cast(long[2])v1));    // 16byte Tsarray, OK\n+}"}, {"sha": "30d7c1aa1653cc5831e617250dd1a3509d28b9cc", "filename": "gcc/testsuite/gdc.dg/simd2e.d", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2e.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2e.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2e.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,69 @@\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+void test2e()\n+{\n+    int4 v1, v2 = 1, v3 = 1;\n+    v1 = v2;\n+    v1 = v2 + v3;\n+    v1 = v2 - v3;\n+    v1 = v2 * v3;\n+    v1 = v2 / v3;\n+    v1 = v2 % v3;\n+    v1 = v2 & v3;\n+    v1 = v2 | v3;\n+    v1 = v2 ^ v3;\n+    static assert(!__traits(compiles, v1 ~ v2));\n+    static assert(!__traits(compiles, v1 ^^ v2));\n+    static assert(!__traits(compiles, v1 is v2));\n+    static assert(!__traits(compiles, v1 !is v2));\n+    static assert(!__traits(compiles, v1 == v2));\n+    static assert(!__traits(compiles, v1 != v2));\n+    static assert(!__traits(compiles, v1 < v2));\n+    static assert(!__traits(compiles, v1 > v2));\n+    static assert(!__traits(compiles, v1 <= v2));\n+    static assert(!__traits(compiles, v1 >= v2));\n+    static assert(!__traits(compiles, v1 <> v2));\n+    static assert(!__traits(compiles, v1 !< v2));\n+    static assert(!__traits(compiles, v1 !> v2));\n+    static assert(!__traits(compiles, v1 !<> v2));\n+    static assert(!__traits(compiles, v1 <>= v2));\n+    static assert(!__traits(compiles, v1 !<= v2));\n+    static assert(!__traits(compiles, v1 !>= v2));\n+    static assert(!__traits(compiles, v1 !<>= v2));\n+    v1 = v2 << 1;\n+    v1 = v2 >> 1;\n+    v1 = v2 >>> 1;\n+    static assert(!__traits(compiles, v1 && v2));\n+    static assert(!__traits(compiles, v1 || v2));\n+    v1 = ~v2;\n+    v1 = -v2;\n+    v1 = +v2;\n+    static assert(!__traits(compiles, !v1));\n+\n+    v1 += v2;\n+    v1 -= v2;\n+    v1 *= v2;\n+    v1 /= v2;\n+    v1 %= v2;\n+    v1 &= v2;\n+    v1 |= v2;\n+    v1 ^= v2;\n+    static assert(!__traits(compiles, v1 ~= v2));\n+    static assert(!__traits(compiles, v1 ^^= v2));\n+    v1 <<= 1;\n+    v1 >>= 1;\n+    v1 >>>= 1;\n+\n+    //  A cast from vector to non-vector is allowed only when the target is same size Tsarray.\n+    static assert(!__traits(compiles, cast(byte)v1));       // 1byte\n+    static assert(!__traits(compiles, cast(short)v1));      // 2byte\n+    static assert(!__traits(compiles, cast(int)v1));        // 4byte\n+    static assert(!__traits(compiles, cast(long)v1));       // 8byte\n+    static assert(!__traits(compiles, cast(float)v1));      // 4byte\n+    static assert(!__traits(compiles, cast(double)v1));     // 8byte\n+    static assert(!__traits(compiles, cast(int[2])v1));     // 8byte Tsarray\n+    static assert( __traits(compiles, cast(int[4])v1));     // 16byte Tsarray, OK\n+    static assert( __traits(compiles, cast(long[2])v1));    // 16byte Tsarray, OK\n+}"}, {"sha": "f8448801dbaa277ee9ea9cf50ac599cdfcab8425", "filename": "gcc/testsuite/gdc.dg/simd2f.d", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2f.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2f.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2f.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,69 @@\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+void test2f()\n+{\n+    uint4 v1, v2 = 1, v3 = 1;\n+    v1 = v2;\n+    v1 = v2 + v3;\n+    v1 = v2 - v3;\n+    v1 = v2 * v3;\n+    v1 = v2 / v3;\n+    v1 = v2 % v3;\n+    v1 = v2 & v3;\n+    v1 = v2 | v3;\n+    v1 = v2 ^ v3;\n+    static assert(!__traits(compiles, v1 ~ v2));\n+    static assert(!__traits(compiles, v1 ^^ v2));\n+    static assert(!__traits(compiles, v1 is v2));\n+    static assert(!__traits(compiles, v1 !is v2));\n+    static assert(!__traits(compiles, v1 == v2));\n+    static assert(!__traits(compiles, v1 != v2));\n+    static assert(!__traits(compiles, v1 < v2));\n+    static assert(!__traits(compiles, v1 > v2));\n+    static assert(!__traits(compiles, v1 <= v2));\n+    static assert(!__traits(compiles, v1 >= v2));\n+    static assert(!__traits(compiles, v1 <> v2));\n+    static assert(!__traits(compiles, v1 !< v2));\n+    static assert(!__traits(compiles, v1 !> v2));\n+    static assert(!__traits(compiles, v1 !<> v2));\n+    static assert(!__traits(compiles, v1 <>= v2));\n+    static assert(!__traits(compiles, v1 !<= v2));\n+    static assert(!__traits(compiles, v1 !>= v2));\n+    static assert(!__traits(compiles, v1 !<>= v2));\n+    v1 = v2 << 1;\n+    v1 = v2 >> 1;\n+    v1 = v2 >>> 1;\n+    static assert(!__traits(compiles, v1 && v2));\n+    static assert(!__traits(compiles, v1 || v2));\n+    v1 = ~v2;\n+    v1 = -v2;\n+    v1 = +v2;\n+    static assert(!__traits(compiles, !v1));\n+\n+    v1 += v2;\n+    v1 -= v2;\n+    v1 *= v2;\n+    v1 /= v2;\n+    v1 %= v2;\n+    v1 &= v2;\n+    v1 |= v2;\n+    v1 ^= v2;\n+    static assert(!__traits(compiles, v1 ~= v2));\n+    static assert(!__traits(compiles, v1 ^^= v2));\n+    v1 <<= 1;\n+    v1 >>= 1;\n+    v1 >>>= 1;\n+\n+    //  A cast from vector to non-vector is allowed only when the target is same size Tsarray.\n+    static assert(!__traits(compiles, cast(byte)v1));       // 1byte\n+    static assert(!__traits(compiles, cast(short)v1));      // 2byte\n+    static assert(!__traits(compiles, cast(int)v1));        // 4byte\n+    static assert(!__traits(compiles, cast(long)v1));       // 8byte\n+    static assert(!__traits(compiles, cast(float)v1));      // 4byte\n+    static assert(!__traits(compiles, cast(double)v1));     // 8byte\n+    static assert(!__traits(compiles, cast(int[2])v1));     // 8byte Tsarray\n+    static assert( __traits(compiles, cast(int[4])v1));     // 16byte Tsarray, OK\n+    static assert( __traits(compiles, cast(long[2])v1));    // 16byte Tsarray, OK\n+}"}, {"sha": "8e8bc15623c95847728d8022100555914b04153e", "filename": "gcc/testsuite/gdc.dg/simd2g.d", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2g.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2g.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2g.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,69 @@\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+void test2g()\n+{\n+    long2 v1, v2 = 1, v3 = 1;\n+    v1 = v2;\n+    v1 = v2 + v3;\n+    v1 = v2 - v3;\n+    v1 = v2 * v3;\n+    v1 = v2 / v3;\n+    v1 = v2 % v3;\n+    v1 = v2 & v3;\n+    v1 = v2 | v3;\n+    v1 = v2 ^ v3;\n+    static assert(!__traits(compiles, v1 ~ v2));\n+    static assert(!__traits(compiles, v1 ^^ v2));\n+    static assert(!__traits(compiles, v1 is v2));\n+    static assert(!__traits(compiles, v1 !is v2));\n+    static assert(!__traits(compiles, v1 == v2));\n+    static assert(!__traits(compiles, v1 != v2));\n+    static assert(!__traits(compiles, v1 < v2));\n+    static assert(!__traits(compiles, v1 > v2));\n+    static assert(!__traits(compiles, v1 <= v2));\n+    static assert(!__traits(compiles, v1 >= v2));\n+    static assert(!__traits(compiles, v1 <> v2));\n+    static assert(!__traits(compiles, v1 !< v2));\n+    static assert(!__traits(compiles, v1 !> v2));\n+    static assert(!__traits(compiles, v1 !<> v2));\n+    static assert(!__traits(compiles, v1 <>= v2));\n+    static assert(!__traits(compiles, v1 !<= v2));\n+    static assert(!__traits(compiles, v1 !>= v2));\n+    static assert(!__traits(compiles, v1 !<>= v2));\n+    v1 = v2 << 1;\n+    v1 = v2 >> 1;\n+    v1 = v2 >>> 1;\n+    static assert(!__traits(compiles, v1 && v2));\n+    static assert(!__traits(compiles, v1 || v2));\n+    v1 = ~v2;\n+    v1 = -v2;\n+    v1 = +v2;\n+    static assert(!__traits(compiles, !v1));\n+\n+    v1 += v2;\n+    v1 -= v2;\n+    v1 *= v2;\n+    v1 /= v2;\n+    v1 %= v2;\n+    v1 &= v2;\n+    v1 |= v2;\n+    v1 ^= v2;\n+    static assert(!__traits(compiles, v1 ~= v2));\n+    static assert(!__traits(compiles, v1 ^^= v2));\n+    v1 <<= 1;\n+    v1 >>= 1;\n+    v1 >>>= 1;\n+\n+    //  A cast from vector to non-vector is allowed only when the target is same size Tsarray.\n+    static assert(!__traits(compiles, cast(byte)v1));       // 1byte\n+    static assert(!__traits(compiles, cast(short)v1));      // 2byte\n+    static assert(!__traits(compiles, cast(int)v1));        // 4byte\n+    static assert(!__traits(compiles, cast(long)v1));       // 8byte\n+    static assert(!__traits(compiles, cast(float)v1));      // 4byte\n+    static assert(!__traits(compiles, cast(double)v1));     // 8byte\n+    static assert(!__traits(compiles, cast(int[2])v1));     // 8byte Tsarray\n+    static assert( __traits(compiles, cast(int[4])v1));     // 16byte Tsarray, OK\n+    static assert( __traits(compiles, cast(long[2])v1));    // 16byte Tsarray, OK\n+}"}, {"sha": "f7542e83b8ca44a353a626d14df5637069706df5", "filename": "gcc/testsuite/gdc.dg/simd2h.d", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2h.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2h.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2h.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,69 @@\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+void test2h()\n+{\n+    ulong2 v1, v2 = 1, v3 = 1;\n+    v1 = v2;\n+    v1 = v2 + v3;\n+    v1 = v2 - v3;\n+    v1 = v2 * v3;\n+    v1 = v2 / v3;\n+    v1 = v2 % v3;\n+    v1 = v2 & v3;\n+    v1 = v2 | v3;\n+    v1 = v2 ^ v3;\n+    static assert(!__traits(compiles, v1 ~ v2));\n+    static assert(!__traits(compiles, v1 ^^ v2));\n+    static assert(!__traits(compiles, v1 is v2));\n+    static assert(!__traits(compiles, v1 !is v2));\n+    static assert(!__traits(compiles, v1 == v2));\n+    static assert(!__traits(compiles, v1 != v2));\n+    static assert(!__traits(compiles, v1 < v2));\n+    static assert(!__traits(compiles, v1 > v2));\n+    static assert(!__traits(compiles, v1 <= v2));\n+    static assert(!__traits(compiles, v1 >= v2));\n+    static assert(!__traits(compiles, v1 <> v2));\n+    static assert(!__traits(compiles, v1 !< v2));\n+    static assert(!__traits(compiles, v1 !> v2));\n+    static assert(!__traits(compiles, v1 !<> v2));\n+    static assert(!__traits(compiles, v1 <>= v2));\n+    static assert(!__traits(compiles, v1 !<= v2));\n+    static assert(!__traits(compiles, v1 !>= v2));\n+    static assert(!__traits(compiles, v1 !<>= v2));\n+    v1 = v2 << 1;\n+    v1 = v2 >> 1;\n+    v1 = v2 >>> 1;\n+    static assert(!__traits(compiles, v1 && v2));\n+    static assert(!__traits(compiles, v1 || v2));\n+    v1 = ~v2;\n+    v1 = -v2;\n+    v1 = +v2;\n+    static assert(!__traits(compiles, !v1));\n+\n+    v1 += v2;\n+    v1 -= v2;\n+    v1 *= v2;\n+    v1 /= v2;\n+    v1 %= v2;\n+    v1 &= v2;\n+    v1 |= v2;\n+    v1 ^= v2;\n+    static assert(!__traits(compiles, v1 ~= v2));\n+    static assert(!__traits(compiles, v1 ^^= v2));\n+    v1 <<= 1;\n+    v1 >>= 1;\n+    v1 >>>= 1;\n+\n+    //  A cast from vector to non-vector is allowed only when the target is same size Tsarray.\n+    static assert(!__traits(compiles, cast(byte)v1));       // 1byte\n+    static assert(!__traits(compiles, cast(short)v1));      // 2byte\n+    static assert(!__traits(compiles, cast(int)v1));        // 4byte\n+    static assert(!__traits(compiles, cast(long)v1));       // 8byte\n+    static assert(!__traits(compiles, cast(float)v1));      // 4byte\n+    static assert(!__traits(compiles, cast(double)v1));     // 8byte\n+    static assert(!__traits(compiles, cast(int[2])v1));     // 8byte Tsarray\n+    static assert( __traits(compiles, cast(int[4])v1));     // 16byte Tsarray, OK\n+    static assert( __traits(compiles, cast(long[2])v1));    // 16byte Tsarray, OK\n+}"}, {"sha": "2e3587dce7707fd0f35976d971d6b3ed4771d2e6", "filename": "gcc/testsuite/gdc.dg/simd2i.d", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2i.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2i.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2i.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,69 @@\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+void test2i()\n+{\n+    float4 v1, v2 = 1, v3 = 1;\n+    v1 = v2;\n+    v1 = v2 + v3;\n+    v1 = v2 - v3;\n+    v1 = v2 * v3;\n+    v1 = v2 / v3;\n+    static assert(!__traits(compiles, v1 % v2));\n+    static assert(!__traits(compiles, v1 & v2));\n+    static assert(!__traits(compiles, v1 | v2));\n+    static assert(!__traits(compiles, v1 ^ v2));\n+    static assert(!__traits(compiles, v1 ~ v2));\n+    static assert(!__traits(compiles, v1 ^^ v2));\n+    static assert(!__traits(compiles, v1 is v2));\n+    static assert(!__traits(compiles, v1 !is v2));\n+    static assert(!__traits(compiles, v1 == v2));\n+    static assert(!__traits(compiles, v1 != v2));\n+    static assert(!__traits(compiles, v1 < v2));\n+    static assert(!__traits(compiles, v1 > v2));\n+    static assert(!__traits(compiles, v1 <= v2));\n+    static assert(!__traits(compiles, v1 >= v2));\n+    static assert(!__traits(compiles, v1 <> v2));\n+    static assert(!__traits(compiles, v1 !< v2));\n+    static assert(!__traits(compiles, v1 !> v2));\n+    static assert(!__traits(compiles, v1 !<> v2));\n+    static assert(!__traits(compiles, v1 <>= v2));\n+    static assert(!__traits(compiles, v1 !<= v2));\n+    static assert(!__traits(compiles, v1 !>= v2));\n+    static assert(!__traits(compiles, v1 !<>= v2));\n+    static assert(!__traits(compiles, v1 << 1));\n+    static assert(!__traits(compiles, v1 >> 1));\n+    static assert(!__traits(compiles, v1 >>> 1));\n+    static assert(!__traits(compiles, v1 && v2));\n+    static assert(!__traits(compiles, v1 || v2));\n+    static assert(!__traits(compiles, ~v1));\n+    v1 = -v2;\n+    v1 = +v2;\n+    static assert(!__traits(compiles, !v1));\n+\n+    v1 += v2;\n+    v1 -= v2;\n+    v1 *= v2;\n+    v1 /= v2;\n+    static assert(!__traits(compiles, v1 %= v2));\n+    static assert(!__traits(compiles, v1 &= v2));\n+    static assert(!__traits(compiles, v1 |= v2));\n+    static assert(!__traits(compiles, v1 ^= v2));\n+    static assert(!__traits(compiles, v1 ~= v2));\n+    static assert(!__traits(compiles, v1 ^^= v2));\n+    static assert(!__traits(compiles, v1 <<= 1));\n+    static assert(!__traits(compiles, v1 >>= 1));\n+    static assert(!__traits(compiles, v1 >>>= 1));\n+\n+    //  A cast from vector to non-vector is allowed only when the target is same size Tsarray.\n+    static assert(!__traits(compiles, cast(byte)v1));       // 1byte\n+    static assert(!__traits(compiles, cast(short)v1));      // 2byte\n+    static assert(!__traits(compiles, cast(int)v1));        // 4byte\n+    static assert(!__traits(compiles, cast(long)v1));       // 8byte\n+    static assert(!__traits(compiles, cast(float)v1));      // 4byte\n+    static assert(!__traits(compiles, cast(double)v1));     // 8byte\n+    static assert(!__traits(compiles, cast(int[2])v1));     // 8byte Tsarray\n+    static assert( __traits(compiles, cast(int[4])v1));     // 16byte Tsarray, OK\n+    static assert( __traits(compiles, cast(long[2])v1));    // 16byte Tsarray, OK\n+}"}, {"sha": "7b60784858013b03dfb3286ce635758dd57fc139", "filename": "gcc/testsuite/gdc.dg/simd2j.d", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2j.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2j.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd2j.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,69 @@\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+void test2j()\n+{\n+    double2 v1, v2 = 1, v3 = 1;\n+    v1 = v2;\n+    v1 = v2 + v3;\n+    v1 = v2 - v3;\n+    v1 = v2 * v3;\n+    v1 = v2 / v3;\n+    static assert(!__traits(compiles, v1 % v2));\n+    static assert(!__traits(compiles, v1 & v2));\n+    static assert(!__traits(compiles, v1 | v2));\n+    static assert(!__traits(compiles, v1 ^ v2));\n+    static assert(!__traits(compiles, v1 ~ v2));\n+    static assert(!__traits(compiles, v1 ^^ v2));\n+    static assert(!__traits(compiles, v1 is v2));\n+    static assert(!__traits(compiles, v1 !is v2));\n+    static assert(!__traits(compiles, v1 == v2));\n+    static assert(!__traits(compiles, v1 != v2));\n+    static assert(!__traits(compiles, v1 < v2));\n+    static assert(!__traits(compiles, v1 > v2));\n+    static assert(!__traits(compiles, v1 <= v2));\n+    static assert(!__traits(compiles, v1 >= v2));\n+    static assert(!__traits(compiles, v1 <> v2));\n+    static assert(!__traits(compiles, v1 !< v2));\n+    static assert(!__traits(compiles, v1 !> v2));\n+    static assert(!__traits(compiles, v1 !<> v2));\n+    static assert(!__traits(compiles, v1 <>= v2));\n+    static assert(!__traits(compiles, v1 !<= v2));\n+    static assert(!__traits(compiles, v1 !>= v2));\n+    static assert(!__traits(compiles, v1 !<>= v2));\n+    static assert(!__traits(compiles, v1 << 1));\n+    static assert(!__traits(compiles, v1 >> 1));\n+    static assert(!__traits(compiles, v1 >>> 1));\n+    static assert(!__traits(compiles, v1 && v2));\n+    static assert(!__traits(compiles, v1 || v2));\n+    static assert(!__traits(compiles, ~v1));\n+    v1 = -v2;\n+    v1 = +v2;\n+    static assert(!__traits(compiles, !v1));\n+\n+    v1 += v2;\n+    v1 -= v2;\n+    v1 *= v2;\n+    v1 /= v2;\n+    static assert(!__traits(compiles, v1 %= v2));\n+    static assert(!__traits(compiles, v1 &= v2));\n+    static assert(!__traits(compiles, v1 |= v2));\n+    static assert(!__traits(compiles, v1 ^= v2));\n+    static assert(!__traits(compiles, v1 ~= v2));\n+    static assert(!__traits(compiles, v1 ^^= v2));\n+    static assert(!__traits(compiles, v1 <<= 1));\n+    static assert(!__traits(compiles, v1 >>= 1));\n+    static assert(!__traits(compiles, v1 >>>= 1));\n+\n+    //  A cast from vector to non-vector is allowed only when the target is same size Tsarray.\n+    static assert(!__traits(compiles, cast(byte)v1));       // 1byte\n+    static assert(!__traits(compiles, cast(short)v1));      // 2byte\n+    static assert(!__traits(compiles, cast(int)v1));        // 4byte\n+    static assert(!__traits(compiles, cast(long)v1));       // 8byte\n+    static assert(!__traits(compiles, cast(float)v1));      // 4byte\n+    static assert(!__traits(compiles, cast(double)v1));     // 8byte\n+    static assert(!__traits(compiles, cast(int[2])v1));     // 8byte Tsarray\n+    static assert( __traits(compiles, cast(int[4])v1));     // 16byte Tsarray, OK\n+    static assert( __traits(compiles, cast(long[2])v1));    // 16byte Tsarray, OK\n+}"}, {"sha": "99ce1510f8f921098c87303a43f6a3922516f773", "filename": "gcc/testsuite/gdc.dg/simd7951.d", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd7951.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd7951.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd7951.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,22 @@\n+// https://issues.dlang.org/show_bug.cgi?id=7951\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+import core.simd;\n+\n+float[4] test7951()\n+{\n+    float4 v1;\n+    float4 v2;\n+\n+    return cast(float[4])(v1+v2);\n+}\n+\n+void test7951_2()\n+{\n+    float[4] v1 = [1,2,3,4];\n+    float[4] v2 = [1,2,3,4];\n+    float4 f1, f2, f3;\n+    f1.array = v1;\n+    f2.array = v2;\n+    f3 = f1 + f2;\n+}"}, {"sha": "71d5f4c57bfb6287824ae2768f9831c66979dc67", "filename": "gcc/testsuite/gdc.dg/torture/array2.d", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Farray2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Farray2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Farray2.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do run }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+bool normalize(double[] range, double sum = 1)\n+{\n+    double s = 0;\n+    const length = range.length;\n+    foreach (e; range)\n+    {\n+        s += e;\n+    }\n+    if (s == 0)\n+    {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void main()\n+{\n+    double[3] range = [0.0, 0.0, 0.0];\n+    assert(normalize(range[]) == false);\n+    range[1] = 3.0;\n+    assert(normalize(range[]) == true);\n+}"}, {"sha": "4a6b6db0483fd53e7b016e6a34ded4abfd48ac6b", "filename": "gcc/testsuite/gdc.dg/torture/array3.d", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Farray3.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Farray3.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Farray3.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do run }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+void foo13988(double[] arr)\n+{\n+    static ulong repr(double d) { return *cast(ulong*)&d; }\n+    foreach (x; arr)\n+        assert(repr(arr[0]) == *cast(ulong*)&(arr[0]));\n+}\n+\n+void main()\n+{\n+    double[] arr = [3.0];\n+    foo13988(arr);\n+}"}, {"sha": "5578f78aba71b8784ff1449dd682a31d35bcb043", "filename": "gcc/testsuite/gdc.dg/torture/simd16488a.d", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd16488a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd16488a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd16488a.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,106 @@\n+// https://issues.dlang.org/show_bug.cgi?id=16488\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do run { target { avx_runtime || vect_sizes_16B_8B } } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+import core.simd;\n+\n+void foo_byte16(byte t, byte s)\n+{\n+    byte16 f = s;\n+    auto p = cast(byte*)&f;\n+    foreach (i; 0 .. 16)\n+        assert(p[i] == s);\n+}\n+\n+void foo_ubyte16(ubyte t, ubyte s)\n+{\n+    ubyte16 f = s;\n+    auto p = cast(ubyte*)&f;\n+    foreach (i; 0 .. 16)\n+        assert(p[i] == s);\n+}\n+\n+\n+void foo_short8(short t, short s)\n+{\n+    short8 f = s;\n+    auto p = cast(short*)&f;\n+    foreach (i; 0 .. 8)\n+        assert(p[i] == s);\n+}\n+\n+void foo_ushort8(ushort t, ushort s)\n+{\n+    ushort8 f = s;\n+    auto p = cast(ushort*)&f;\n+    foreach (i; 0 .. 8)\n+        assert(p[i] == s);\n+}\n+\n+\n+void foo_int4(int t, int s)\n+{\n+    int4 f = s;\n+    auto p = cast(int*)&f;\n+    foreach (i; 0 .. 4)\n+        assert(p[i] == s);\n+}\n+\n+void foo_uint4(uint t, uint s, uint u)\n+{\n+    uint4 f = s;\n+    auto p = cast(uint*)&f;\n+    foreach (i; 0 .. 4)\n+        assert(p[i] == s);\n+}\n+\n+\n+void foo_long2(long t, long s, long u)\n+{\n+    long2 f = s;\n+    auto p = cast(long*)&f;\n+    foreach (i; 0 .. 2)\n+        assert(p[i] == s);\n+}\n+\n+void foo_ulong2(ulong t, ulong s)\n+{\n+    ulong2 f = s;\n+    auto p = cast(ulong*)&f;\n+    foreach (i; 0 .. 2)\n+        assert(p[i] == s);\n+}\n+\n+void foo_float4(float t, float s)\n+{\n+    float4 f = s;\n+    auto p = cast(float*)&f;\n+    foreach (i; 0 .. 4)\n+        assert(p[i] == s);\n+}\n+\n+void foo_double2(double t, double s, double u)\n+{\n+    double2 f = s;\n+    auto p = cast(double*)&f;\n+    foreach (i; 0 .. 2)\n+        assert(p[i] == s);\n+}\n+\n+void main()\n+{\n+    foo_byte16(5, -10);\n+    foo_ubyte16(5, 11);\n+\n+    foo_short8(5, -6);\n+    foo_short8(5, 7);\n+\n+    foo_int4(5, -6);\n+    foo_uint4(5, 0x12345678, 22);\n+\n+    foo_long2(5, -6, 1);\n+    foo_ulong2(5, 0x12345678_87654321L);\n+\n+    foo_float4(5, -6);\n+    foo_double2(5, -6, 2);\n+}"}, {"sha": "52027a2aa2399e72b05c44f0cf944182a7747eba", "filename": "gcc/testsuite/gdc.dg/torture/simd16488b.d", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd16488b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd16488b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd16488b.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,103 @@\n+// https://issues.dlang.org/show_bug.cgi?id=16488\n+// { dg-additional-options \"-mavx2\" { target avx2_runtime } }\n+// { dg-do run { target { avx2_runtime || vect_sizes_32B_16B } } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+import core.simd;\n+\n+void foo_byte32(byte t, byte s)\n+{\n+    byte32 f = s;\n+    auto p = cast(byte*)&f;\n+    foreach (i; 0 .. 32)\n+        assert(p[i] == s);\n+}\n+\n+void foo_ubyte32(ubyte t, ubyte s)\n+{\n+    ubyte32 f = s;\n+    auto p = cast(ubyte*)&f;\n+    foreach (i; 0 .. 32)\n+        assert(p[i] == s);\n+}\n+\n+void foo_short16(short t, short s)\n+{\n+    short16 f = s;\n+    auto p = cast(short*)&f;\n+    foreach (i; 0 .. 16)\n+        assert(p[i] == s);\n+}\n+\n+void foo_ushort16(ushort t, ushort s)\n+{\n+    ushort16 f = s;\n+    auto p = cast(ushort*)&f;\n+    foreach (i; 0 .. 16)\n+        assert(p[i] == s);\n+}\n+\n+void foo_int8(int t, int s)\n+{\n+    int8 f = s;\n+    auto p = cast(int*)&f;\n+    foreach (i; 0 .. 8)\n+        assert(p[i] == s);\n+}\n+\n+void foo_uint8(uint t, uint s, uint u)\n+{\n+    uint8 f = s;\n+    auto p = cast(uint*)&f;\n+    foreach (i; 0 .. 8)\n+        assert(p[i] == s);\n+}\n+\n+void foo_long4(long t, long s, long u)\n+{\n+    long4 f = s;\n+    auto p = cast(long*)&f;\n+    foreach (i; 0 .. 4)\n+        assert(p[i] == s);\n+}\n+\n+void foo_ulong4(ulong t, ulong s)\n+{\n+    ulong4 f = s;\n+    auto p = cast(ulong*)&f;\n+    foreach (i; 0 .. 4)\n+        assert(p[i] == s);\n+}\n+\n+void foo_float8(float t, float s)\n+{\n+    float8 f = s;\n+    auto p = cast(float*)&f;\n+    foreach (i; 0 .. 8)\n+        assert(p[i] == s);\n+}\n+\n+void foo_double4(double t, double s, double u)\n+{\n+    double4 f = s;\n+    auto p = cast(double*)&f;\n+    foreach (i; 0 .. 4)\n+        assert(p[i] == s);\n+}\n+\n+void main()\n+{\n+    foo_byte32(5, -10);\n+    foo_ubyte32(5, 11);\n+\n+    foo_short16(5, -6);\n+    foo_short16(5, 7);\n+\n+    foo_int8(5, -6);\n+    foo_uint8(5, 0x12345678, 22);\n+\n+    foo_long4(5, -6, 1);\n+    foo_ulong4(5, 0x12345678_87654321L);\n+\n+    foo_float8(5, -6);\n+    foo_double4(5, -6, 2);\n+}"}, {"sha": "5b9e0156e33ab6d3de65d1cbaa65b1bf4ca41ca4", "filename": "gcc/testsuite/gdc.dg/torture/simd16703.d", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd16703.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd16703.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd16703.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,36 @@\n+// https://issues.dlang.org/show_bug.cgi?id=16703\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do run { target { avx_runtime || vect_sizes_16B_8B } } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+import core.simd;\n+\n+float index(float4 f4, size_t i)\n+{\n+    return f4[i];\n+}\n+\n+float[4] slice(float4 f4)\n+{\n+    return f4[];\n+}\n+\n+float slice2(float4 f4, size_t lwr, size_t upr, size_t i)\n+{\n+    float[] fa = f4[lwr .. upr];\n+    return fa[i];\n+}\n+\n+void main()\n+{\n+    float4 f4 = [1,2,3,4];\n+    assert(index(f4, 0) == 1);\n+    assert(index(f4, 1) == 2);\n+    assert(index(f4, 2) == 3);\n+    assert(index(f4, 3) == 4);\n+\n+    float[4] fsa = slice(f4);\n+    assert(fsa == [1.0f,2,3,4]);\n+\n+    assert(slice2(f4, 1, 3, 0) == 2);\n+    assert(slice2(f4, 1, 3, 1) == 3);\n+}"}, {"sha": "f63ec58c06d63065ff1ae4aafd56c430f8d366cd", "filename": "gcc/testsuite/gdc.dg/torture/simd19223.d", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd19223.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd19223.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd19223.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,19 @@\n+// https://issues.dlang.org/show_bug.cgi?id=19223\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do run { target { avx_runtime || vect_sizes_16B_8B } } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+import core.simd;\n+\n+int test19223a(const int[4] x)\n+{\n+    int sum = 0;\n+    foreach (i; x) sum += i;\n+    return sum;\n+}\n+\n+void main()\n+{\n+    int4 v1 = int4.init;\n+    assert(test19223a(v1.array) == 0);\n+    assert(test19223a(int4.init.array) == 0);\n+}"}, {"sha": "68ee72e5cebe8ec7f8e2e1e69c1693a53927775d", "filename": "gcc/testsuite/gdc.dg/torture/simd19607.d", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd19607.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd19607.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd19607.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,19 @@\n+// https://issues.dlang.org/show_bug.cgi?id=19607\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do run { target { avx_runtime || vect_sizes_16B_8B } } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+import core.simd;\n+\n+int test19607a(const int[4] x)\n+{\n+    int sum = 0;\n+    foreach (i; x) sum += i;\n+    return sum;\n+}\n+\n+void main()\n+{\n+    int4 v1 = 1;\n+    assert(test19607a(v1.array) == 4);\n+    assert(test19607a(int4(2).array) == 8);\n+}"}, {"sha": "7ce26793e7afb2a76fd5d4959be42b632bd8480f", "filename": "gcc/testsuite/gdc.dg/torture/simd3.d", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd3.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd3.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd3.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,34 @@\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do run { target { avx_runtime || vect_sizes_16B_8B } } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+import core.simd;\n+\n+struct Sunsto\n+{\n+  align (1): // make sure f4 is misaligned\n+    byte b;\n+    union\n+    {\n+        float4 f4;\n+        ubyte[16] a;\n+    }\n+}\n+\n+ubyte[16] foounsto()\n+{\n+    float4 vf = 6;\n+    Sunsto s;\n+    s.f4 = vf * 2;\n+    vf = s.f4;\n+\n+    return s.a;\n+}\n+\n+void main()\n+{\n+    auto a = foounsto();\n+    version (LittleEndian)\n+        assert(a == [0, 0, 64, 65, 0, 0, 64, 65, 0, 0, 64, 65, 0, 0, 64, 65]);\n+    version (BigEndian)\n+        assert(a == [65, 64, 0, 0, 65, 64, 0, 0, 65, 64, 0, 0, 65, 64, 0, 0]);\n+}"}, {"sha": "30b52192f188ce4bd7cd37cddf2fd55c61a3755c", "filename": "gcc/testsuite/gdc.dg/torture/simd4.d", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd4.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd4.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd4.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,14 @@\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do run { target { avx_runtime || vect_sizes_16B_8B } } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+import core.simd;\n+\n+void main()\n+{\n+    int4 c = 7;\n+    (cast(int[4])c)[3] = 4;\n+    (cast(int*)&c)[2] = 4;\n+    c.array[1] = 4;\n+    c.ptr[3] = 4;\n+    assert(c.length == 4);\n+}"}, {"sha": "2ed74ff472f08f2facd1133ce4a87bb1743f54b2", "filename": "gcc/testsuite/gdc.dg/torture/simd7411.d", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd7411.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd7411.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd7411.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,16 @@\n+// https://issues.dlang.org/show_bug.cgi?id=7411\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do run { target { avx_runtime || vect_sizes_16B_8B } } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+import core.simd;\n+\n+void BaseTypeOfVector(T : __vector(T[N]), size_t N)(int i)\n+{\n+    assert(is(T == int));\n+    assert(N == 4);\n+}\n+\n+void main()\n+{\n+    BaseTypeOfVector!(__vector(int[4]))(3);\n+}"}, {"sha": "13bd69a122f84b5e22b1880661c9bcaeb351b90b", "filename": "gcc/testsuite/gdc.dg/torture/simd7413a.d", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd7413a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd7413a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd7413a.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,95 @@\n+// https://issues.dlang.org/show_bug.cgi?id=7413\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do run { target { avx_runtime || vect_sizes_16B_8B } } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+import core.simd;\n+\n+void main()\n+{\n+    byte16 b = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16];\n+    assert(b.array[0] == 1);\n+    assert(b.array[1] == 2);\n+    assert(b.array[2] == 3);\n+    assert(b.array[3] == 4);\n+    assert(b.array[4] == 5);\n+    assert(b.array[5] == 6);\n+    assert(b.array[6] == 7);\n+    assert(b.array[7] == 8);\n+    assert(b.array[8] == 9);\n+    assert(b.array[9] == 10);\n+    assert(b.array[10] == 11);\n+    assert(b.array[11] == 12);\n+    assert(b.array[12] == 13);\n+    assert(b.array[13] == 14);\n+    assert(b.array[14] == 15);\n+    assert(b.array[15] == 16);\n+\n+    ubyte16 ub = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16];\n+    assert(ub.array[0] == 1);\n+    assert(ub.array[1] == 2);\n+    assert(ub.array[2] == 3);\n+    assert(ub.array[3] == 4);\n+    assert(ub.array[4] == 5);\n+    assert(ub.array[5] == 6);\n+    assert(ub.array[6] == 7);\n+    assert(ub.array[7] == 8);\n+    assert(ub.array[8] == 9);\n+    assert(ub.array[9] == 10);\n+    assert(ub.array[10] == 11);\n+    assert(ub.array[11] == 12);\n+    assert(ub.array[12] == 13);\n+    assert(ub.array[13] == 14);\n+    assert(ub.array[14] == 15);\n+    assert(ub.array[15] == 16);\n+\n+    short8 s = [1,2,3,4,5,6,7,8];\n+    assert(s.array[0] == 1);\n+    assert(s.array[1] == 2);\n+    assert(s.array[2] == 3);\n+    assert(s.array[3] == 4);\n+    assert(s.array[4] == 5);\n+    assert(s.array[5] == 6);\n+    assert(s.array[6] == 7);\n+    assert(s.array[7] == 8);\n+\n+    ushort8 us = [1,2,3,4,5,6,7,8];\n+    assert(us.array[0] == 1);\n+    assert(us.array[1] == 2);\n+    assert(us.array[2] == 3);\n+    assert(us.array[3] == 4);\n+    assert(us.array[4] == 5);\n+    assert(us.array[5] == 6);\n+    assert(us.array[6] == 7);\n+    assert(us.array[7] == 8);\n+\n+    int4 i = [1,2,3,4];\n+    assert(i.array[0] == 1);\n+    assert(i.array[1] == 2);\n+    assert(i.array[2] == 3);\n+    assert(i.array[3] == 4);\n+\n+    uint4 ui = [1,2,3,4];\n+    assert(ui.array[0] == 1);\n+    assert(ui.array[1] == 2);\n+    assert(ui.array[2] == 3);\n+    assert(ui.array[3] == 4);\n+\n+    long2 l = [1,2];\n+    assert(l.array[0] == 1);\n+    assert(l.array[1] == 2);\n+\n+    ulong2 ul = [1,2];\n+    assert(ul.array[0] == 1);\n+    assert(ul.array[1] == 2);\n+\n+    float4 f = [1,2,3,4];\n+    assert(f.array[0] == 1);\n+    assert(f.array[1] == 2);\n+    assert(f.array[2] == 3);\n+    assert(f.array[3] == 4);\n+\n+    double2 d = [1,2];\n+    assert(d.array[0] == 1);\n+    assert(d.array[1] == 2);\n+}"}, {"sha": "c1ee6aa7c76163640d3098fd4fb3385e85577813", "filename": "gcc/testsuite/gdc.dg/torture/simd7413b.d", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd7413b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd7413b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd7413b.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,95 @@\n+// https://issues.dlang.org/show_bug.cgi?id=7413\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do run { target { avx_runtime || vect_sizes_16B_8B } } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+import core.simd;\n+\n+byte16 b = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16];\n+ubyte16 ub = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16];\n+short8 s = [1,2,3,4,5,6,7,8];\n+ushort8 us = [1,2,3,4,5,6,7,8];\n+int4 i = [1,2,3,4];\n+uint4 ui = [1,2,3,4];\n+long2 l = [1,2];\n+ulong2 ul = [1,2];\n+float4 f = [1,2,3,4];\n+double2 d = [1,2];\n+\n+void main()\n+{\n+    assert(b.array[0] == 1);\n+    assert(b.array[1] == 2);\n+    assert(b.array[2] == 3);\n+    assert(b.array[3] == 4);\n+    assert(b.array[4] == 5);\n+    assert(b.array[5] == 6);\n+    assert(b.array[6] == 7);\n+    assert(b.array[7] == 8);\n+    assert(b.array[8] == 9);\n+    assert(b.array[9] == 10);\n+    assert(b.array[10] == 11);\n+    assert(b.array[11] == 12);\n+    assert(b.array[12] == 13);\n+    assert(b.array[13] == 14);\n+    assert(b.array[14] == 15);\n+    assert(b.array[15] == 16);\n+\n+    assert(ub.array[0] == 1);\n+    assert(ub.array[1] == 2);\n+    assert(ub.array[2] == 3);\n+    assert(ub.array[3] == 4);\n+    assert(ub.array[4] == 5);\n+    assert(ub.array[5] == 6);\n+    assert(ub.array[6] == 7);\n+    assert(ub.array[7] == 8);\n+    assert(ub.array[8] == 9);\n+    assert(ub.array[9] == 10);\n+    assert(ub.array[10] == 11);\n+    assert(ub.array[11] == 12);\n+    assert(ub.array[12] == 13);\n+    assert(ub.array[13] == 14);\n+    assert(ub.array[14] == 15);\n+    assert(ub.array[15] == 16);\n+\n+    assert(s.array[0] == 1);\n+    assert(s.array[1] == 2);\n+    assert(s.array[2] == 3);\n+    assert(s.array[3] == 4);\n+    assert(s.array[4] == 5);\n+    assert(s.array[5] == 6);\n+    assert(s.array[6] == 7);\n+    assert(s.array[7] == 8);\n+\n+    assert(us.array[0] == 1);\n+    assert(us.array[1] == 2);\n+    assert(us.array[2] == 3);\n+    assert(us.array[3] == 4);\n+    assert(us.array[4] == 5);\n+    assert(us.array[5] == 6);\n+    assert(us.array[6] == 7);\n+    assert(us.array[7] == 8);\n+\n+    assert(i.array[0] == 1);\n+    assert(i.array[1] == 2);\n+    assert(i.array[2] == 3);\n+    assert(i.array[3] == 4);\n+\n+    assert(ui.array[0] == 1);\n+    assert(ui.array[1] == 2);\n+    assert(ui.array[2] == 3);\n+    assert(ui.array[3] == 4);\n+\n+    assert(l.array[0] == 1);\n+    assert(l.array[1] == 2);\n+\n+    assert(ul.array[0] == 1);\n+    assert(ul.array[1] == 2);\n+\n+    assert(f.array[0] == 1);\n+    assert(f.array[1] == 2);\n+    assert(f.array[2] == 3);\n+    assert(f.array[3] == 4);\n+\n+    assert(d.array[0] == 1);\n+    assert(d.array[1] == 2);\n+}"}, {"sha": "c4359405dd5f08ae51b5ea18614afbd241c5719d", "filename": "gcc/testsuite/gdc.dg/torture/simd7414.d", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd7414.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd7414.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd7414.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,54 @@\n+// https://issues.dlang.org/show_bug.cgi?id=7414\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do run { target { avx_runtime || vect_sizes_16B_8B } } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+import core.simd;\n+import core.stdc.string;\n+\n+immutable ulong2 gulong2 = 0x8000_0000_0000_0000;\n+immutable uint4 guint4 = 0x8000_0000;\n+immutable ushort8 gushort8 = 0x8000;\n+immutable ubyte16 gubyte16 = 0x80;\n+\n+immutable long2 glong2 = 0x7000_0000_0000_0000;\n+immutable int4 gint4 = 0x7000_0000;\n+immutable short8 gshort8 = 0x7000;\n+immutable byte16 gbyte16 = 0x70;\n+\n+immutable float4 gfloat4 = 4.0;\n+immutable double2 gdouble2 = 8.0;\n+\n+void main()\n+{\n+    immutable ulong2 lulong2 = 0x8000_0000_0000_0000;\n+    assert(memcmp(&lulong2, &gulong2, gulong2.sizeof) == 0);\n+\n+    immutable uint4 luint4 = 0x8000_0000;\n+    assert(memcmp(&luint4, &guint4, guint4.sizeof) == 0);\n+\n+    immutable ushort8 lushort8 = 0x8000;\n+    assert(memcmp(&lushort8, &gushort8, gushort8.sizeof) == 0);\n+\n+    immutable ubyte16 lubyte16 = 0x80;\n+    assert(memcmp(&lubyte16, &gubyte16, gubyte16.sizeof) == 0);\n+\n+\n+    immutable long2 llong2 = 0x7000_0000_0000_0000;\n+    assert(memcmp(&llong2, &glong2, glong2.sizeof) == 0);\n+\n+    immutable int4 lint4 = 0x7000_0000;\n+    assert(memcmp(&lint4, &gint4, gint4.sizeof) == 0);\n+\n+    immutable short8 lshort8 = 0x7000;\n+    assert(memcmp(&lshort8, &gshort8, gshort8.sizeof) == 0);\n+\n+    immutable byte16 lbyte16 = 0x70;\n+    assert(memcmp(&lbyte16, &gbyte16, gbyte16.sizeof) == 0);\n+\n+\n+    immutable float4 lfloat4 = 4.0;\n+    assert(memcmp(&lfloat4, &gfloat4, gfloat4.sizeof) == 0);\n+\n+    immutable double2 ldouble2 = 8.0;\n+    assert(memcmp(&ldouble2, &gdouble2, gdouble2.sizeof) == 0);\n+}"}, {"sha": "04dfc5d4d51814e0b8ee8890dc0a6af24e45923f", "filename": "gcc/testsuite/gdc.dg/torture/simd9200.d", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd9200.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd9200.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd9200.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,25 @@\n+// https://issues.dlang.org/show_bug.cgi?id=9200\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do run { target { avx_runtime || vect_sizes_16B_8B } } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+import core.simd;\n+\n+void bar9200(double[2] a)\n+{\n+    assert(a[0] == 1);\n+    assert(a[1] == 2);\n+}\n+\n+double2 * v9200(double2* a)\n+{\n+    return a;\n+}\n+\n+void main()\n+{\n+    double2 a = [1, 2];\n+\n+    *v9200(&a) = a;\n+\n+    bar9200(a.array);\n+}"}, {"sha": "275e88968de92c5d84a02b8a608bd5ba5b5a4676", "filename": "gcc/testsuite/gdc.dg/torture/simd9304.d", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd9304.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd9304.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd9304.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,17 @@\n+// https://issues.dlang.org/show_bug.cgi?id=9304\n+// https://issues.dlang.org/show_bug.cgi?id=9322\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do run { target { avx_runtime || vect_sizes_16B_8B } } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+import core.simd;\n+\n+float4 foo9304(float4 a)\n+{\n+    return -a;\n+}\n+\n+void main()\n+{\n+    auto a = foo9304([0, 1, 2, 3]);\n+    assert(a.array == [0,-1,-2,-3]);\n+}"}, {"sha": "54f6f436f52bb564d3e3eb76df61525b847d9729", "filename": "gcc/testsuite/gdc.dg/torture/simd9449.d", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd9449.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd9449.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd9449.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,31 @@\n+// https://issues.dlang.org/show_bug.cgi?id=9449\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do run { target { avx_runtime || vect_sizes_16B_8B } } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+import core.simd;\n+\n+void test9449()\n+{\n+    ubyte16[1] table;\n+}\n+\n+void test9449_2()\n+{\n+    float[4][2] m = [[2.0, 1, 3, 4], [5.0, 6, 7, 8]];   // segfault\n+\n+    assert(m[0][0] == 2.0);\n+    assert(m[0][1] == 1);\n+    assert(m[0][2] == 3);\n+    assert(m[0][3] == 4);\n+\n+    assert(m[1][0] == 5.0);\n+    assert(m[1][1] == 6);\n+    assert(m[1][2] == 7);\n+    assert(m[1][3] == 8);\n+}\n+\n+void main()\n+{\n+    test9449();\n+    test9449_2();\n+}"}, {"sha": "749ca4d5e088aa813a243cbe7405179ebd5fa59c", "filename": "gcc/testsuite/gdc.dg/torture/simd9910.d", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd9910.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0a3bab43fda3084eaf1bdaac58936757f30ea35/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd9910.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fsimd9910.d?ref=f0a3bab43fda3084eaf1bdaac58936757f30ea35", "patch": "@@ -0,0 +1,15 @@\n+// https://issues.dlang.org/show_bug.cgi?id=9910\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do run { target { avx_runtime || vect_sizes_16B_8B } } }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+import core.simd;\n+\n+void main()\n+{\n+    float4 f = [1, 1, 1, 1];\n+    auto works = f + 3;\n+    auto bug = 3 + f;\n+\n+    assert (works.array == [4,4,4,4]);\n+    assert (bug.array == [4,4,4,4]);    // no property 'array' for type 'int'\n+}"}]}