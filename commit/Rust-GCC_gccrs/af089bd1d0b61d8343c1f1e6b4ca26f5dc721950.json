{"sha": "af089bd1d0b61d8343c1f1e6b4ca26f5dc721950", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYwODliZDFkMGI2MWQ4MzQzYzFmMWU2YjRjYTI2ZjVkYzcyMTk1MA==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1997-06-06T21:14:24Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1997-06-06T21:14:24Z"}, "message": "(REG_SET_TO_HARD_REG_SET): Fix typo.\n\n(EXECUTE_IF_SET_IN_REG_SET): Fix setting of scan_rs_.\n(EXECUTE_IF_SET_AND_RESET_IN_REG_SET): Likewise.\n(EXECUTE_IF_AND_IN_REG_SET): Likewise.\n\nFrom-SVN: r14165", "tree": {"sha": "69276880248cc4a73450d333844c685a3ec42cb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69276880248cc4a73450d333844c685a3ec42cb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af089bd1d0b61d8343c1f1e6b4ca26f5dc721950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af089bd1d0b61d8343c1f1e6b4ca26f5dc721950", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af089bd1d0b61d8343c1f1e6b4ca26f5dc721950", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af089bd1d0b61d8343c1f1e6b4ca26f5dc721950/comments", "author": null, "committer": null, "parents": [{"sha": "a86202361ec068a3bd7c8614e5178a189e217cf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a86202361ec068a3bd7c8614e5178a189e217cf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a86202361ec068a3bd7c8614e5178a189e217cf7"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "2aa092a25034d78281a6611bf094dd367c5f0829", "filename": "gcc/basic-block.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af089bd1d0b61d8343c1f1e6b4ca26f5dc721950/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af089bd1d0b61d8343c1f1e6b4ca26f5dc721950/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=af089bd1d0b61d8343c1f1e6b4ca26f5dc721950", "patch": "@@ -1,5 +1,5 @@\n /* Define control and data flow tables, and regsets.\n-   Copyright (C) 1987 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -117,7 +117,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   int i_;\t\t\t\t\t\t\t\t\\\n   CLEAR_HARD_REG_SET (TO);\t\t\t\t\t\t\\\n-  for (i_ = 0; i < FIRST_PSEUDO_REGISTER; i++)\t\t\t\t\\\n+  for (i_ = 0; i_ < FIRST_PSEUDO_REGISTER; i_++)\t\t\t\\\n     if (REGNO_REG_SET_P (FROM, i_))\t\t\t\t\t\\\n       SET_HARD_REG_BIT (TO, i_);\t\t\t\t\t\\\n } while (0)\n@@ -126,10 +126,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n    register number and executing CODE for all registers that are set. */\n #define EXECUTE_IF_SET_IN_REG_SET(REGSET, MIN, REGNUM, CODE)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  register REGSET_ELT_TYPE *scan_rs_ = (REGSET);\t\t\t\\\n-  register int i_;\t\t\t\t\t\t\t\\\n+  register int i_ = (MIN) / REGSET_ELT_BITS;\t\t\t\t\\\n   register int shift_ = (MIN) % REGSET_ELT_BITS;\t\t\t\\\n-  for (i_ = (MIN) / REGSET_ELT_BITS; i_ < regset_size; i_++)\t\t\\\n+  register REGSET_ELT_TYPE *scan_rs_ = (REGSET) + i_;\t\t\t\\\n+  for ( ; i_ < regset_size; i_++)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       REGSET_ELT_TYPE word_ = *scan_rs_++;\t\t\t\t\\\n       if (word_)\t\t\t\t\t\t\t\\\n@@ -156,10 +156,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Like EXECUTE_IF_SET_IN_REG_SET, but also clear the register set.  */\n #define EXECUTE_IF_SET_AND_RESET_IN_REG_SET(REGSET, MIN, REGNUM, CODE)\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  register REGSET_ELT_TYPE *scan_rs_ = (REGSET);\t\t\t\\\n-  register int i_;\t\t\t\t\t\t\t\\\n+  register int i_ = (MIN) / REGSET_ELT_BITS;\t\t\t\t\\\n   register int shift_ = (MIN) % REGSET_ELT_BITS;\t\t\t\\\n-  for (i_ = (MIN) / REGSET_ELT_BITS; i_ < regset_size; i_++)\t\t\\\n+  register REGSET_ELT_TYPE *scan_rs_ = (REGSET) + i_;\t\t\t\\\n+  for ( ; i_ < regset_size; i_++)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       REGSET_ELT_TYPE word_ = *scan_rs_++;\t\t\t\t\\\n       if (word_)\t\t\t\t\t\t\t\\\n@@ -189,11 +189,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n    set in both regsets. */\n #define EXECUTE_IF_AND_IN_REG_SET(REGSET1, REGSET2, MIN, REGNUM, CODE)\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  register REGSET_ELT_TYPE *scan_rs1_ = (REGSET1);\t\t\t\\\n-  register REGSET_ELT_TYPE *scan_rs2_ = (REGSET2);\t\t\t\\\n-  register int i_;\t\t\t\t\t\t\t\\\n+  register int i_ = (MIN) / REGSET_ELT_BITS;\t\t\t\t\\\n   register int shift_ = (MIN) % REGSET_ELT_BITS;\t\t\t\\\n-  for (i_ = (MIN) / REGSET_ELT_BITS; i_ < regset_size; i_++)\t\t\\\n+  register REGSET_ELT_TYPE *scan_rs1_ = (REGSET1) + i_;\t\t\t\\\n+  register REGSET_ELT_TYPE *scan_rs2_ = (REGSET2) + i_;\t\t\t\\\n+  for ( ; i_ < regset_size; i_++)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       REGSET_ELT_TYPE word_ = *scan_rs1_++ & *scan_rs2_++;\t\t\\\n       if (word_)\t\t\t\t\t\t\t\\"}]}