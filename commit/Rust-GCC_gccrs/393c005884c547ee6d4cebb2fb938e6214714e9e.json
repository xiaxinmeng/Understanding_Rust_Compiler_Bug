{"sha": "393c005884c547ee6d4cebb2fb938e6214714e9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkzYzAwNTg4NGM1NDdlZTZkNGNlYmIyZmI5MzhlNjIxNDcxNGU5ZQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2008-01-30T08:00:51Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2008-01-30T08:00:51Z"}, "message": "fixdfdi.h (__fixunstfdi, __fixtfdi): Rearrange the overflow check to make it easier to read.\n\n2008-01-30  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* config/s390/fixdfdi.h (__fixunstfdi, __fixtfdi): Rearrange\n\tthe overflow check to make it easier to read.\n\t(__fixtfdi): Change the type of the ll member in union\n\tlong_double to UDItype_x.\n\n2008-01-30  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* gcc.target/s390/tf_to_di-1.c: New testcase.\n\nFrom-SVN: r131957", "tree": {"sha": "4acc05569093f04c2196aa7a4d7d564d139579f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4acc05569093f04c2196aa7a4d7d564d139579f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/393c005884c547ee6d4cebb2fb938e6214714e9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/393c005884c547ee6d4cebb2fb938e6214714e9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/393c005884c547ee6d4cebb2fb938e6214714e9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/393c005884c547ee6d4cebb2fb938e6214714e9e/comments", "author": null, "committer": null, "parents": [{"sha": "a99d95a270cabbbf43024c32ac6225da13e4aad1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a99d95a270cabbbf43024c32ac6225da13e4aad1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a99d95a270cabbbf43024c32ac6225da13e4aad1"}], "stats": {"total": 91, "additions": 77, "deletions": 14}, "files": [{"sha": "176a1372e662353b13ec27e37694817adf4e7221", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393c005884c547ee6d4cebb2fb938e6214714e9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393c005884c547ee6d4cebb2fb938e6214714e9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=393c005884c547ee6d4cebb2fb938e6214714e9e", "patch": "@@ -1,3 +1,10 @@\n+2008-01-30  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* config/s390/fixdfdi.h (__fixunstfdi, __fixtfdi): Rearrange\n+\tthe overflow check to make it easier to read.\n+\t(__fixtfdi): Change the type of the ll member in union\n+\tlong_double to UDItype_x.\n+\n 2008-01-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/34969"}, {"sha": "865bf46b99fa4e68da9df7f13d6dc5296d292e95", "filename": "gcc/config/s390/fixdfdi.h", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393c005884c547ee6d4cebb2fb938e6214714e9e/gcc%2Fconfig%2Fs390%2Ffixdfdi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393c005884c547ee6d4cebb2fb938e6214714e9e/gcc%2Fconfig%2Fs390%2Ffixdfdi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Ffixdfdi.h?ref=393c005884c547ee6d4cebb2fb938e6214714e9e", "patch": "@@ -77,13 +77,15 @@ __fixunstfdi (long double a1)\n     if ((EXPD(dl1) == 0x7fff) && !FRACD_ZERO_P (dl1))\n       return 0x0ULL;\n \n-    /* If the upper ll part of the mantissa isn't\n-       zeroed out after shifting the number would be to large.  */\n-    if (exp >= -HIGH_LL_FRAC_BITS)\n-      return 0xFFFFFFFFFFFFFFFFULL;\n-\n+    /* One extra bit is needed for the unit bit which is appended by\n+       MANTD_HIGH_LL on the left of the matissa.  */\n     exp += HIGH_LL_FRAC_BITS + 1;\n \n+    /* If the result would still need a left shift it will be too large\n+       to be represented.  */\n+    if (exp > 0)\n+      return 0xFFFFFFFFFFFFFFFFULL;\n+\n     l = MANTD_LOW_LL (dl1) >> (HIGH_LL_FRAC_BITS + 1)\n         | MANTD_HIGH_LL (dl1) << (64 - (HIGH_LL_FRAC_BITS + 1));\n \n@@ -117,7 +119,7 @@ union double_long {\n   struct {\n       SItype_x i[4]; /* 32 bit parts: 0 upper ... 3 lowest */\n     } l;\n-  DItype_x ll[2];   /* 64 bit parts: 0 upper, 1 lower */\n+  UDItype_x ll[2];   /* 64 bit parts: 0 upper, 1 lower */\n };\n \n DItype_x __fixtfdi (long double a1);\n@@ -136,7 +138,7 @@ __fixtfdi (long double a1)\n     if (!EXPD (dl1))\n       return 0;\n \n-    /* The exponent - considered the binary point at the right end of \n+    /* The exponent - considered the binary point at the right end of\n        the mantissa.  */\n     exp = EXPD (dl1) - EXPONENT_BIAS - MANTISSA_BITS;\n \n@@ -149,17 +151,21 @@ __fixtfdi (long double a1)\n     if ((EXPD(dl1) == 0x7fff) && !FRACD_ZERO_P (dl1))\n       return 0x8000000000000000ULL;\n \n-    /* If the upper ll part of the mantissa isn't\n-       zeroed out after shifting the number would be to large.  */\n-    if (exp >= -HIGH_LL_FRAC_BITS)\n+    /* One extra bit is needed for the unit bit which is appended by\n+       MANTD_HIGH_LL on the left of the matissa.  */\n+    exp += HIGH_LL_FRAC_BITS + 1;\n+\n+    /* If the result would still need a left shift it will be too large\n+       to be represented.  Compared to the unsigned variant we have to\n+       take care that there is still space for the sign bit to be\n+       applied.  So we can only go on if there is a right-shift by one\n+       or more.  */\n+    if (exp >= 0)\n       {\n-\tl = (long long)1 << 63; /* long int min */\n+\tl = 1ULL << 63; /* long long min */\n \treturn SIGND (dl1) ? l : l - 1;\n       }\n \n-    /* The extra bit is needed for the sign bit.  */\n-    exp += HIGH_LL_FRAC_BITS + 1;\n-\n     l = MANTD_LOW_LL (dl1) >> (HIGH_LL_FRAC_BITS + 1)\n         | MANTD_HIGH_LL (dl1) << (64 - (HIGH_LL_FRAC_BITS + 1));\n "}, {"sha": "3cee20a403ccdffbaffa4009b9bf36f663489dfe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393c005884c547ee6d4cebb2fb938e6214714e9e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393c005884c547ee6d4cebb2fb938e6214714e9e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=393c005884c547ee6d4cebb2fb938e6214714e9e", "patch": "@@ -1,3 +1,7 @@\n+2008-01-30  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* gcc.target/s390/tf_to_di-1.c: New testcase.\n+\n 2008-01-30  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/34975"}, {"sha": "d79e6f3502e2f0fc2d0bf00c15eed21114a143f6", "filename": "gcc/testsuite/gcc.target/s390/tf_to_di-1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393c005884c547ee6d4cebb2fb938e6214714e9e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Ftf_to_di-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393c005884c547ee6d4cebb2fb938e6214714e9e/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Ftf_to_di-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Ftf_to_di-1.c?ref=393c005884c547ee6d4cebb2fb938e6214714e9e", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-options \"-O0 -mlong-double-128\" } */\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+void\n+check_ll (long double ld, long long ll)\n+{\n+  if ((long long)ld != ll)\n+    {\n+      printf (\"ld: %Lf expect: %lld result: %lld\\n\",\n+\t      ld, ll, (long long)ld);\n+      abort ();\n+    }\n+}\n+\n+void\n+check_ull (long double ld, unsigned long long ull)\n+{\n+  if ((unsigned long long)ld != ull)\n+    {\n+      printf (\"ld: %Lf expect: %llu result: %llu\\n\",\n+\t      ld, ull, (unsigned long long)ld);\n+      abort ();\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  const long long ll_max = (long long)((1ULL << 63) - 1);\n+  const long long ll_min = -ll_max - 1;\n+\n+  check_ll (206.23253, 206LL);\n+  check_ull (206.23253, 206ULL);\n+  check_ll ((long double)ll_max, ll_max);\n+  check_ull ((long double)ll_max, ll_max);\n+  check_ll ((long double)ll_min, ll_min);\n+  check_ll (0.0, 0);\n+  check_ull (0.0, 0);\n+  check_ll (-1.0, -1);\n+  check_ll ((long double)0xffffffffffffffffULL, ll_max);\n+  check_ull ((long double)0xffffffffffffffffULL, 0xffffffffffffffffULL);\n+\n+  return 0;\n+}"}]}