{"sha": "1e2c0906eeaf6050034a17d06c9d40c16a3f29cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUyYzA5MDZlZWFmNjA1MDAzNGExN2QwNmM5ZDQwYzE2YTNmMjljZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-05-31T14:14:42Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-05-31T14:14:42Z"}, "message": "basic_string.h (front, back): Add.\n\n2010-05-31  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/basic_string.h (front, back): Add.\n\t* include/debug/string: Adjust.\n\t* include/ext/vstring.h (front, back): Tweak the implementation\n\tto follow more closely the letter of the specs.\n\t* testsuite/21_strings/basic_string/element_access/char/\n\tfront_back.cc: New.\n\t* testsuite/21_strings/basic_string/element_access/wchar_t/\n\tfront_back.cc: Likewise.\n\t* config/abi/pre/gnu.ver: Export new symbols.\n\t* testsuite/util/testsuite_abi.cc: Adjust.\n\t* configure.ac: Bump minor version to 6:15:0.\n\t* configure: Regenerate.\n\nFrom-SVN: r160071", "tree": {"sha": "7e03ee0ccbc4d0692ccc1eb272a0551cde8653f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e03ee0ccbc4d0692ccc1eb272a0551cde8653f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e2c0906eeaf6050034a17d06c9d40c16a3f29cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2c0906eeaf6050034a17d06c9d40c16a3f29cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e2c0906eeaf6050034a17d06c9d40c16a3f29cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2c0906eeaf6050034a17d06c9d40c16a3f29cd/comments", "author": null, "committer": null, "parents": [{"sha": "877a19bfb8f34344702b206a549c61f7466fdf01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/877a19bfb8f34344702b206a549c61f7466fdf01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/877a19bfb8f34344702b206a549c61f7466fdf01"}], "stats": {"total": 197, "additions": 182, "deletions": 15}, "files": [{"sha": "4932edd52c89660816b22624a4fb59e272f6e3b9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2c0906eeaf6050034a17d06c9d40c16a3f29cd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2c0906eeaf6050034a17d06c9d40c16a3f29cd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1e2c0906eeaf6050034a17d06c9d40c16a3f29cd", "patch": "@@ -1,3 +1,18 @@\n+2010-05-31  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/basic_string.h (front, back): Add.\n+\t* include/debug/string: Adjust.\n+\t* include/ext/vstring.h (front, back): Tweak the implementation\n+\tto follow more closely the letter of the specs.\n+\t* testsuite/21_strings/basic_string/element_access/char/\n+\tfront_back.cc: New.\n+\t* testsuite/21_strings/basic_string/element_access/wchar_t/\n+\tfront_back.cc: Likewise.\n+\t* config/abi/pre/gnu.ver: Export new symbols.\n+\t* testsuite/util/testsuite_abi.cc: Adjust.\n+\t* configure.ac: Bump minor version to 6:15:0.\n+\t* configure: Regenerate.\n+\n 2010-05-28  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_vector.h (vector<>::data): Fix return type"}, {"sha": "6375b88ff0574fafcbcb0bde4351928b9c3ddc13", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2c0906eeaf6050034a17d06c9d40c16a3f29cd/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2c0906eeaf6050034a17d06c9d40c16a3f29cd/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=1e2c0906eeaf6050034a17d06c9d40c16a3f29cd", "patch": "@@ -185,7 +185,10 @@ GLIBCXX_3.4 {\n     # where it is used for size_type on LLP64 platforms.\n     _ZNSsC[12][EI][PRjmvyN]*;\n     _ZNSsD*;\n-    _ZNSs[0-58-9][a-z]*;\n+    _ZNSs[0-58-9]a*;\n+    _ZNSs5beginEv;\n+    _ZNSs[0-58-9][c-e]*;\n+    _ZNSs[0-58-9][g-z]*;\n #   _ZNSs[67][a-z]*E[PRcjmvy]*;\n     _ZNSs6appendE[PRcjmvy]*;\n     _ZNSs6assignE[PRcjmvy]*;\n@@ -219,9 +222,12 @@ GLIBCXX_3.4 {\n     _ZNSsaSE[PRc]*;\n     _ZNSsixE*;\n     _ZNSspLE[PRc]*;\n-    _ZNKSs[0-9][a-b]*;\n-    _ZNKSs[0-9][d-z]*;\n+    _ZNKSs[0-3][a-b]*;\n+    _ZNKSs[5-9][a-b]*;\n+    _ZNKSs[0-9][d-e]*;\n+    _ZNKSs[0-9][g-z]*;\n     _ZNKSs[0-9][0-9][a-z]*;\n+    _ZNKSs4find*;\n     _ZNKSs[a-z]*;\n     _ZNKSs4_Rep12_M_is_leakedEv;\n     _ZNKSs4_Rep12_M_is_sharedEv;\n@@ -240,7 +246,10 @@ GLIBCXX_3.4 {\n     # std::wstring\n     _ZNSbIwSt11char_traitsIwESaIwEEC[12][EI][PRjmvyN]*;\n     _ZNSbIwSt11char_traitsIwESaIwEED*;\n-    _ZNSbIwSt11char_traitsIwESaIwEE[0-58-9][a-z]*;\n+    _ZNSbIwSt11char_traitsIwESaIwEE[0-58-9]a*;\n+    _ZNSbIwSt11char_traitsIwESaIwEE5beginEv;\n+    _ZNSbIwSt11char_traitsIwESaIwEE[0-58-9][c-e]*;\n+    _ZNSbIwSt11char_traitsIwESaIwEE[0-58-9][g-z]*;\n #   _ZNSbIwSt11char_traitsIwESaIwEE[67][a-b]*E[PRwjmvy]*;\n     _ZNSbIwSt11char_traitsIwESaIwEE6appendE[PRwjmvy]*;\n     _ZNSbIwSt11char_traitsIwESaIwEE6assignE[PRwjmvy]*;\n@@ -274,10 +283,13 @@ GLIBCXX_3.4 {\n     _ZNSbIwSt11char_traitsIwESaIwEEaSE[PRw]*;\n     _ZNSbIwSt11char_traitsIwESaIwEEixE*;\n     _ZNSbIwSt11char_traitsIwESaIwEEpLE[PRw]*;\n-    _ZNKSbIwSt11char_traitsIwESaIwEE[0-9][a-b]*;\n-    _ZNKSbIwSt11char_traitsIwESaIwEE[0-9][d-z]*;\n+    _ZNKSbIwSt11char_traitsIwESaIwEE[0-3][a-b]*;\n+    _ZNKSbIwSt11char_traitsIwESaIwEE[5-9][a-b]*;\n+    _ZNKSbIwSt11char_traitsIwESaIwEE[0-9][d-e]*;\n+    _ZNKSbIwSt11char_traitsIwESaIwEE[0-9][g-z]*;\n     _ZNKSbIwSt11char_traitsIwESaIwEE[0-9][0-9][a-z]*;\n     _ZNKSbIwSt11char_traitsIwESaIwEE[a-z]*;\n+    _ZNKSbIwSt11char_traitsIwESaIwEE4find*;\n     _ZNKSbIwSt11char_traitsIwESaIwEE4_Rep12_M_is_leakedEv;\n     _ZNKSbIwSt11char_traitsIwESaIwEE4_Rep12_M_is_sharedEv;\n     _ZNKSbIwSt11char_traitsIwESaIwEE6_M_repEv;\n@@ -1150,6 +1162,19 @@ GLIBCXX_3.4.14 {\n \n } GLIBCXX_3.4.13;\n \n+GLIBCXX_3.4.15 {\n+\n+    # string|wstring front and back member functions\n+    _ZNSs5frontEv;\n+    _ZNKSs5frontEv;\n+    _ZNSbIwSt11char_traitsIwESaIwEE5frontEv;\n+    _ZNKSbIwSt11char_traitsIwESaIwEE5frontEv;\n+    _ZNSs4backEv;\n+    _ZNKSs4backEv;\n+    _ZNSbIwSt11char_traitsIwESaIwEE4backEv;\n+    _ZNKSbIwSt11char_traitsIwESaIwEE4backEv;\n+\n+} GLIBCXX_3.4.14;\n \n # Symbols in the support library (libsupc++) have their own tag.\n CXXABI_1.3 {"}, {"sha": "9fee0007fbd91fc4b22e2fa9771387b05b65048f", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2c0906eeaf6050034a17d06c9d40c16a3f29cd/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2c0906eeaf6050034a17d06c9d40c16a3f29cd/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=1e2c0906eeaf6050034a17d06c9d40c16a3f29cd", "patch": "@@ -2789,7 +2789,7 @@ ac_config_headers=\"$ac_config_headers config.h\"\n ### am handles this now?  ORIGINAL_LD_FOR_MULTILIBS=$LD\n \n # For libtool versioning info, format is CURRENT:REVISION:AGE\n-libtool_VERSION=6:14:0\n+libtool_VERSION=6:15:0\n \n \n # Find the rest of the source tree framework."}, {"sha": "2d99a236440a4a00485b3267250e5fa4ff8bfd4a", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2c0906eeaf6050034a17d06c9d40c16a3f29cd/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2c0906eeaf6050034a17d06c9d40c16a3f29cd/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=1e2c0906eeaf6050034a17d06c9d40c16a3f29cd", "patch": "@@ -12,7 +12,7 @@ AC_CONFIG_HEADER(config.h)\n ### am handles this now?  ORIGINAL_LD_FOR_MULTILIBS=$LD\n \n # For libtool versioning info, format is CURRENT:REVISION:AGE\n-libtool_VERSION=6:14:0\n+libtool_VERSION=6:15:0\n AC_SUBST(libtool_VERSION)\n \n # Find the rest of the source tree framework."}, {"sha": "fe9e1a3519c38f6fd17738ade497352f8e49a2aa", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2c0906eeaf6050034a17d06c9d40c16a3f29cd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2c0906eeaf6050034a17d06c9d40c16a3f29cd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=1e2c0906eeaf6050034a17d06c9d40c16a3f29cd", "patch": "@@ -851,6 +851,40 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \treturn _M_data()[__n];\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  Returns a read/write reference to the data at the first\n+       *  element of the %string.\n+       */\n+      reference\n+      front()\n+      { return operator[](0); }\n+\n+      /**\n+       *  Returns a read-only (constant) reference to the data at the first\n+       *  element of the %string.\n+       */\n+      const_reference\n+      front() const\n+      { return operator[](0); }\n+\n+      /**\n+       *  Returns a read/write reference to the data at the last\n+       *  element of the %string.\n+       */\n+      reference\n+      back()\n+      { return operator[](this->size() - 1); }\n+\n+      /**\n+       *  Returns a read-only (constant) reference to the data at the\n+       *  last element of the %string.\n+       */\n+      const_reference\n+      back() const\n+      { return operator[](this->size() - 1); }\n+#endif\n+\n       /**\n        *  @brief  Provides access to the data contained in the %string.\n        *  @param n The index of the character to access."}, {"sha": "fe31ffb99ed3b2fca97bc17af49318da04eb6fa3", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2c0906eeaf6050034a17d06c9d40c16a3f29cd/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2c0906eeaf6050034a17d06c9d40c16a3f29cd/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=1e2c0906eeaf6050034a17d06c9d40c16a3f29cd", "patch": "@@ -262,6 +262,11 @@ namespace __gnu_debug\n \n     using _Base::at;\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    using _Base::front;\n+    using _Base::back;\n+#endif\n+\n     // 21.3.5 modifiers:\n     basic_string&\n     operator+=(const basic_string& __str)"}, {"sha": "dffd35a19e3de1652dc2d2e8bb7f4365f236e300", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2c0906eeaf6050034a17d06c9d40c16a3f29cd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2c0906eeaf6050034a17d06c9d40c16a3f29cd/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=1e2c0906eeaf6050034a17d06c9d40c16a3f29cd", "patch": "@@ -62,8 +62,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       typedef _Alloc\t\t\t\t\t    allocator_type;\n       typedef typename _CharT_alloc_type::size_type\t    size_type;\n       typedef typename _CharT_alloc_type::difference_type   difference_type;\n-      typedef typename _CharT_alloc_type::reference\t    reference;\n-      typedef typename _CharT_alloc_type::const_reference   const_reference;\n+      typedef value_type&               \t            reference;\n+      typedef const value_type&                             const_reference;\n       typedef typename _CharT_alloc_type::pointer\t    pointer;\n       typedef typename _CharT_alloc_type::const_pointer\t    const_pointer;\n       typedef __gnu_cxx::__normal_iterator<pointer, __versa_string>  iterator;\n@@ -598,31 +598,31 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n        */\n       reference\n       front()\n-      { return *begin(); }\n+      { return operator[](0); }\n \n       /**\n        *  Returns a read-only (constant) reference to the data at the first\n        *  element of the %string.\n        */\n       const_reference\n       front() const\n-      { return *begin(); }\n+      { return operator[](0); }\n \n       /**\n        *  Returns a read/write reference to the data at the last\n        *  element of the %string.\n        */\n       reference\n       back()\n-      { return *(end() - 1); }\n+      { return operator[](this->size() - 1); }\n \n       /**\n        *  Returns a read-only (constant) reference to the data at the\n        *  last element of the %string.\n        */\n       const_reference\n       back() const\n-      { return *(end() - 1); }\n+      { return operator[](this->size() - 1); }\n #endif\n \n       // Modifiers:"}, {"sha": "a7c1386ae9da48f7557f3022280fc2834729e19d", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/element_access/char/front_back.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2c0906eeaf6050034a17d06c9d40c16a3f29cd/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2Ffront_back.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2c0906eeaf6050034a17d06c9d40c16a3f29cd/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2Ffront_back.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2Ffront_back.cc?ref=1e2c0906eeaf6050034a17d06c9d40c16a3f29cd", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-string-conversions \"\" }\n+\n+// 2010-05-31  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::string str(\"ramifications\");\n+  const std::string cstr(\"melodien\");\n+\n+  VERIFY( str.front() == 'r' );\n+  VERIFY( str.back() == 's' );\n+  VERIFY( cstr.front() == 'm' );\n+  VERIFY( cstr.back() == 'n' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "60b09606fe1ac3e73a78db800bc5ce1af339fee3", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/element_access/wchar_t/front_back.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2c0906eeaf6050034a17d06c9d40c16a3f29cd/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2Ffront_back.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2c0906eeaf6050034a17d06c9d40c16a3f29cd/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2Ffront_back.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2Ffront_back.cc?ref=1e2c0906eeaf6050034a17d06c9d40c16a3f29cd", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-string-conversions \"\" }\n+\n+// 2010-05-31  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::wstring str(L\"ramifications\");\n+  const std::wstring cstr(L\"melodien\");\n+\n+  VERIFY( str.front() == L'r' );\n+  VERIFY( str.back() == L's' );\n+  VERIFY( cstr.front() == L'm' );\n+  VERIFY( cstr.back() == L'n' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "d3c73f662b0c59e205f3533ac4bc5d9dd0f75456", "filename": "libstdc++-v3/testsuite/util/testsuite_abi.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2c0906eeaf6050034a17d06c9d40c16a3f29cd/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2c0906eeaf6050034a17d06c9d40c16a3f29cd/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc?ref=1e2c0906eeaf6050034a17d06c9d40c16a3f29cd", "patch": "@@ -1,6 +1,7 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+// Free Software Foundation, Inc.\n \n // This library is free software; you can redistribute it and/or\n // modify it under the terms of the GNU General Public License as\n@@ -186,6 +187,7 @@ check_version(symbol& test, bool added)\n       known_versions.push_back(\"GLIBCXX_3.4.12\");\n       known_versions.push_back(\"GLIBCXX_3.4.13\");\n       known_versions.push_back(\"GLIBCXX_3.4.14\");\n+      known_versions.push_back(\"GLIBCXX_3.4.15\");\n       known_versions.push_back(\"GLIBCXX_LDBL_3.4\");\n       known_versions.push_back(\"GLIBCXX_LDBL_3.4.7\");\n       known_versions.push_back(\"GLIBCXX_LDBL_3.4.10\");"}]}