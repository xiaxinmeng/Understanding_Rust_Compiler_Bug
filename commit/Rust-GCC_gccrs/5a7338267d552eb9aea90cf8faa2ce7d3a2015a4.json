{"sha": "5a7338267d552eb9aea90cf8faa2ce7d3a2015a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE3MzM4MjY3ZDU1MmViOWFlYTkwY2Y4ZmFhMmNlN2QzYTIwMTVhNA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2010-04-29T21:37:01Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-04-29T21:37:01Z"}, "message": "re PR target/42895 (Low registers are preferred than register ip in thumb2 mode)\n\n\tPR target/42895\n\t* doc/tm.texi (ADJUST_REG_ALLOC_ORDER): Renamed from\n\tORDER_REGS_FOR_LOCAL_ALLOC.  All instances of this macro changed.\n\t(HONOR_REG_ALLOC_ORDER): Describe new macro.\n\t* ira.c (setup_alloc_regs): Use ADJUST_REG_ALLOC_ORDER if defined.\n\t* ira-color.c (assign_hard_reg): Take prologue/epilogue costs into\n\taccount only if HONOR_REG_ALLOC_ORDER is not defined.\n\t* config/arm/arm.h (HONOR_REG_ALLOC_ORDER): Define.\n\t* system.h (ORDER_REGS_FOR_LOCAL_ALLOC): Poison.\n\nFrom-SVN: r158911", "tree": {"sha": "e02eed9bc7c37428344f533ee75aa2a75b30fdf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e02eed9bc7c37428344f533ee75aa2a75b30fdf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4/comments", "author": null, "committer": null, "parents": [{"sha": "eece1eb9acd1262e3b462ef9a1a09013e420bfed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eece1eb9acd1262e3b462ef9a1a09013e420bfed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eece1eb9acd1262e3b462ef9a1a09013e420bfed"}], "stats": {"total": 60, "additions": 44, "deletions": 16}, "files": [{"sha": "74b960b5c2d9396e91ab92f0526395e709de325c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a7338267d552eb9aea90cf8faa2ce7d3a2015a4", "patch": "@@ -1,3 +1,15 @@\n+2010-04-29  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\tPR target/42895\n+\t* doc/tm.texi (ADJUST_REG_ALLOC_ORDER): Renamed from\n+\tORDER_REGS_FOR_LOCAL_ALLOC.  All instances of this macro changed.\n+\t(HONOR_REG_ALLOC_ORDER): Describe new macro.\n+\t* ira.c (setup_alloc_regs): Use ADJUST_REG_ALLOC_ORDER if defined.\n+\t* ira-color.c (assign_hard_reg): Take prologue/epilogue costs into\n+\taccount only if HONOR_REG_ALLOC_ORDER is not defined.\n+\t* config/arm/arm.h (HONOR_REG_ALLOC_ORDER): Define.\n+\t* system.h (ORDER_REGS_FOR_LOCAL_ALLOC): Poison.\n+\t\n 2010-04-29  Jon Grant <04@jguk.org>\n \t\n \t* collect2.c (vflag): Change type from int to bool."}, {"sha": "ca46db1cca2659b39d3de91afbe4ba74cc30c09c", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=5a7338267d552eb9aea90cf8faa2ce7d3a2015a4", "patch": "@@ -1121,7 +1121,11 @@ extern int arm_structure_size_boundary;\n }\n \n /* Use different register alloc ordering for Thumb.  */\n-#define ORDER_REGS_FOR_LOCAL_ALLOC arm_order_regs_for_local_alloc ()\n+#define ADJUST_REG_ALLOC_ORDER arm_order_regs_for_local_alloc ()\n+\n+/* Tell IRA to use the order we define rather than messing it up with its\n+   own cost calculations.  */\n+#define HONOR_REG_ALLOC_ORDER\n \n /* Interrupt functions can only use registers that have already been\n    saved by the prologue, even if they would normally be"}, {"sha": "67e0c8f04f1d30ac97d9787573e284d62f754b29", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=5a7338267d552eb9aea90cf8faa2ce7d3a2015a4", "patch": "@@ -232,7 +232,7 @@ extern GTY(()) section *progmem_section;\n     32,33,34,35\t\t\t\t\t\\\n     }\n \n-#define ORDER_REGS_FOR_LOCAL_ALLOC order_regs_for_local_alloc ()\n+#define ADJUST_REG_ALLOC_ORDER order_regs_for_local_alloc ()\n \n \n #define HARD_REGNO_NREGS(REGNO, MODE) ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)"}, {"sha": "9be3eb8cae8c604a3fc0cb819bdfbafd970f38fb", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=5a7338267d552eb9aea90cf8faa2ce7d3a2015a4", "patch": "@@ -955,7 +955,7 @@ enum target_cpu_default\n    registers listed in CALL_USED_REGISTERS, keeping the others\n    available for storage of persistent values.\n \n-   The ORDER_REGS_FOR_LOCAL_ALLOC actually overwrite the order,\n+   The ADJUST_REG_ALLOC_ORDER actually overwrite the order,\n    so this is just empty initializer for array.  */\n \n #define REG_ALLOC_ORDER \t\t\t\t\t\\\n@@ -964,11 +964,11 @@ enum target_cpu_default\n    33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,  \\\n    48, 49, 50, 51, 52 }\n \n-/* ORDER_REGS_FOR_LOCAL_ALLOC is a macro which permits reg_alloc_order\n+/* ADJUST_REG_ALLOC_ORDER is a macro which permits reg_alloc_order\n    to be rearranged based on a particular function.  When using sse math,\n    we want to allocate SSE before x87 registers and vice versa.  */\n \n-#define ORDER_REGS_FOR_LOCAL_ALLOC x86_order_regs_for_local_alloc ()\n+#define ADJUST_REG_ALLOC_ORDER x86_order_regs_for_local_alloc ()\n \n \n #define OVERRIDE_ABI_FORMAT(FNDECL) ix86_call_abi_override (FNDECL)"}, {"sha": "f5f0bd4e4df1e81df4c14f44165bf264bfa2c159", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=5a7338267d552eb9aea90cf8faa2ce7d3a2015a4", "patch": "@@ -2059,12 +2059,12 @@ enum reg_class\n   182,183,184,185,186,187\t\t\t\t\t\t\\\n }\n \n-/* ORDER_REGS_FOR_LOCAL_ALLOC is a macro which permits reg_alloc_order\n+/* ADJUST_REG_ALLOC_ORDER is a macro which permits reg_alloc_order\n    to be rearranged based on a particular function.  On the mips16, we\n    want to allocate $24 (T_REG) before other registers for\n    instructions for which it is possible.  */\n \n-#define ORDER_REGS_FOR_LOCAL_ALLOC mips_order_regs_for_local_alloc ()\n+#define ADJUST_REG_ALLOC_ORDER mips_order_regs_for_local_alloc ()\n \n /* True if VALUE is an unsigned 6-bit number.  */\n "}, {"sha": "bf2ecc023ff52b9f2a0cc07720e74ea73eec1cea", "filename": "gcc/config/picochip/picochip.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.h?ref=5a7338267d552eb9aea90cf8faa2ce7d3a2015a4", "patch": "@@ -261,7 +261,7 @@ extern enum picochip_dfa_type picochip_schedule_type;\n /* We can dynamically change the REG_ALLOC_ORDER using the following hook.\n    It would be desirable to change it for leaf functions so we can put\n    r12 at the end of this list.*/\n-#define ORDER_REGS_FOR_LOCAL_ALLOC picochip_order_regs_for_local_alloc ()\n+#define ADJUST_REG_ALLOC_ORDER picochip_order_regs_for_local_alloc ()\n \n /* How Values Fit in Registers  */\n "}, {"sha": "bd9daa519776f4deddabf2f8afcc55fcccf4539c", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=5a7338267d552eb9aea90cf8faa2ce7d3a2015a4", "patch": "@@ -1181,7 +1181,7 @@ extern enum reg_class sparc_regno_reg_class[FIRST_PSEUDO_REGISTER];\n   96, 97, 98, 99,\t\t\t/* %fcc0-3 */\t\\\n   100, 0, 14, 30, 31, 101}\t\t/* %icc, %g0, %o6, %i6, %i7, %sfp */\n \n-#define ORDER_REGS_FOR_LOCAL_ALLOC order_regs_for_local_alloc ()\n+#define ADJUST_REG_ALLOC_ORDER order_regs_for_local_alloc ()\n \n extern char sparc_leaf_regs[];\n #define LEAF_REGISTERS sparc_leaf_regs"}, {"sha": "d7cab5a1ed20b93393a0f0598361620823b47eae", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=5a7338267d552eb9aea90cf8faa2ce7d3a2015a4", "patch": "@@ -286,7 +286,7 @@ extern unsigned xtensa_current_frame_size;\n    incoming argument in a2 is live throughout the function and\n    local-alloc decides to use a2, then the incoming argument must\n    either be spilled or copied to another register.  To get around\n-   this, we define ORDER_REGS_FOR_LOCAL_ALLOC to redefine\n+   this, we define ADJUST_REG_ALLOC_ORDER to redefine\n    reg_alloc_order for leaf functions such that lowest numbered\n    registers are used first with the exception that the incoming\n    argument registers are not used until after other register choices\n@@ -300,7 +300,7 @@ extern unsigned xtensa_current_frame_size;\n   35, \\\n }\n \n-#define ORDER_REGS_FOR_LOCAL_ALLOC order_regs_for_local_alloc ()\n+#define ADJUST_REG_ALLOC_ORDER order_regs_for_local_alloc ()\n \n /* For Xtensa, the only point of this is to prevent GCC from otherwise\n    giving preference to call-used registers.  To minimize window"}, {"sha": "6582ab1cd91aa7636bcf84729d36d77496e088f5", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=5a7338267d552eb9aea90cf8faa2ce7d3a2015a4", "patch": "@@ -2092,7 +2092,7 @@ machines, define @code{REG_ALLOC_ORDER} to be an initializer that lists\n the highest numbered allocable register first.\n @end defmac\n \n-@defmac ORDER_REGS_FOR_LOCAL_ALLOC\n+@defmac ADJUST_REG_ALLOC_ORDER\n A C statement (sans semicolon) to choose the order in which to allocate\n hard registers for pseudo-registers local to a basic block.\n \n@@ -2106,6 +2106,15 @@ The macro body should not assume anything about the contents of\n On most machines, it is not necessary to define this macro.\n @end defmac\n \n+@defmac HONOR_REG_ALLOC_ORDER\n+Normally, IRA tries to estimate the costs for saving a register in the\n+prologue and restoring it in the epilogue.  This discourages it from\n+using call-saved registers.  If a machine wants to ensure that IRA\n+allocates registers in the order given by REG_ALLOC_ORDER even if some\n+call-saved registers appear earlier than call-used ones, this macro\n+should be defined.\n+@end defmac\n+\n @defmac IRA_HARD_REGNO_ADD_COST_MULTIPLIER (@var{regno})\n In some case register allocation order is not enough for the\n Integrated Register Allocator (@acronym{IRA}) to generate a good code."}, {"sha": "47aacfe4520d6e854d1a2bdc8b3e56b2a4dd0424", "filename": "gcc/ira-color.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4/gcc%2Fira-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4/gcc%2Fira-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-color.c?ref=5a7338267d552eb9aea90cf8faa2ce7d3a2015a4", "patch": "@@ -586,6 +586,7 @@ assign_hard_reg (ira_allocno_t allocno, bool retry_p)\n \tcontinue;\n       cost = costs[i];\n       full_cost = full_costs[i];\n+#ifndef HONOR_REG_ALLOC_ORDER\n       if (! allocated_hardreg_p[hard_regno]\n \t  && ira_hard_reg_not_in_set_p (hard_regno, mode, call_used_reg_set))\n \t/* We need to save/restore the hard register in\n@@ -598,6 +599,7 @@ assign_hard_reg (ira_allocno_t allocno, bool retry_p)\n \t  cost += add_cost;\n \t  full_cost += add_cost;\n \t}\n+#endif\n       if (min_cost > cost)\n \tmin_cost = cost;\n       if (min_full_cost > full_cost)"}, {"sha": "8e34392adc35ecb1ba345f85adabc83a592af94e", "filename": "gcc/ira.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=5a7338267d552eb9aea90cf8faa2ce7d3a2015a4", "patch": "@@ -431,9 +431,6 @@ setup_class_hard_regs (void)\n   HARD_REG_SET processed_hard_reg_set;\n \n   ira_assert (SHRT_MAX >= FIRST_PSEUDO_REGISTER);\n-  /* We could call ORDER_REGS_FOR_LOCAL_ALLOC here (it is usually\n-     putting hard callee-used hard registers first).  But our\n-     heuristics work better.  */\n   for (cl = (int) N_REG_CLASSES - 1; cl >= 0; cl--)\n     {\n       COPY_HARD_REG_SET (temp_hard_regset, reg_class_contents[cl]);\n@@ -490,6 +487,9 @@ setup_available_class_regs (void)\n static void\n setup_alloc_regs (bool use_hard_frame_p)\n {\n+#ifdef ADJUST_REG_ALLOC_ORDER\n+  ADJUST_REG_ALLOC_ORDER;\n+#endif\n   COPY_HARD_REG_SET (no_unit_alloc_regs, fixed_reg_set);\n   if (! use_hard_frame_p)\n     SET_HARD_REG_BIT (no_unit_alloc_regs, HARD_FRAME_POINTER_REGNUM);"}, {"sha": "e764e584c2db4183e9558b3a881037ba5f068a4b", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7338267d552eb9aea90cf8faa2ce7d3a2015a4/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=5a7338267d552eb9aea90cf8faa2ce7d3a2015a4", "patch": "@@ -761,7 +761,8 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tTARGET_ASM_EXCEPTION_SECTION TARGET_ASM_EH_FRAME_SECTION\t   \\\n \tSMALL_ARG_MAX ASM_OUTPUT_SHARED_BSS ASM_OUTPUT_SHARED_COMMON\t   \\\n \tASM_OUTPUT_SHARED_LOCAL ASM_MAKE_LABEL_LINKONCE\t\t\t   \\\n-\tSTACK_CHECK_PROBE_INTERVAL STACK_CHECK_PROBE_LOAD\n+\tSTACK_CHECK_PROBE_INTERVAL STACK_CHECK_PROBE_LOAD\t\t   \\\n+\tORDER_REGS_FOR_LOCAL_ALLOC\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}]}