{"sha": "aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWEyYjc0MTRiMGVjNGExYzE4OTk4NTYxYjRhZWRkM2FiYmYwOWRiZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-09-27T17:27:43Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-09-27T17:27:43Z"}, "message": "allocator.h (allocator_arg_t, [...]): Add.\n\n2010-09-27  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/allocator.h (allocator_arg_t, allocator_arg,\n\tuses_allocator): Add.\n\t* testsuite/20_util/uses_allocator/value.cc: New.\n\t* testsuite/20_util/uses_allocator/requirements/typedefs.cc: Likewise.\n\t* testsuite/20_util/uses_allocator/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* include/bits/stl_queue.h (uses_allocator<queue>,\n\tuses_allocator<priority_queue>): Add.\n\t* include/bits/stl_stack.h (uses_allocator<stack>): Likewise.\n\n\t* include/bits/stl_pair.h (piecewise_construct): Add.\n\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust dg-error\n\tline number.\n\nFrom-SVN: r164654", "tree": {"sha": "e814b2297b9bdbc7c65042472861e403c24dfb16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e814b2297b9bdbc7c65042472861e403c24dfb16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf/comments", "author": null, "committer": null, "parents": [{"sha": "fa2ea33de80cd95b2a1d1a759b2271cb8d7e32db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa2ea33de80cd95b2a1d1a759b2271cb8d7e32db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa2ea33de80cd95b2a1d1a759b2271cb8d7e32db"}], "stats": {"total": 246, "additions": 223, "deletions": 23}, "files": [{"sha": "23908a25dcb267c488708ec74ce0437c6fc85faa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf", "patch": "@@ -1,3 +1,19 @@\n+2010-09-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/allocator.h (allocator_arg_t, allocator_arg,\n+\tuses_allocator): Add.\n+\t* testsuite/20_util/uses_allocator/value.cc: New.\n+\t* testsuite/20_util/uses_allocator/requirements/typedefs.cc: Likewise.\n+\t* testsuite/20_util/uses_allocator/requirements/\n+\texplicit_instantiation.cc: Likewise.\n+\t* include/bits/stl_queue.h (uses_allocator<queue>,\n+\tuses_allocator<priority_queue>): Add.\n+\t* include/bits/stl_stack.h (uses_allocator<stack>): Likewise.\n+\n+\t* include/bits/stl_pair.h (piecewise_construct): Add.\n+\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust dg-error\n+\tline number.\n+\n 2010-09-27  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/c_std/cmath (__pow_helper): Remove."}, {"sha": "2d7a4e129aced8a7d2a74532f06408595811218d", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 69, "deletions": 22, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf", "patch": "@@ -47,6 +47,10 @@\n // Define the base class to std::allocator.\n #include <bits/c++allocator.h>\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#include <type_traits>\n+#endif\n+\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n@@ -177,28 +181,71 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-   // A very basic implementation for now.  In general we have to wait for\n-   // the availability of the infrastructure described in N2983:  we should\n-   // try when either T has a move constructor which cannot throw or T is\n-   // CopyContructible.\n-   // NB: This code doesn't properly belong here, we should find a more\n-   // suited place common to std::vector and std::deque.\n-   template<typename _Tp,\n-\t    bool = __has_trivial_copy(typename _Tp::value_type)>\n-     struct __shrink_to_fit\n-     { static void _S_do_it(_Tp&) { } };\n-\n-   template<typename _Tp>\n-     struct __shrink_to_fit<_Tp, true>\n-     {\n-       static void\n-       _S_do_it(_Tp& __v)\n-       {\n-\t __try\n-\t   { _Tp(__v).swap(__v); }\n-\t __catch(...) { }\n-       }\n-     };\n+  // A very basic implementation for now.  In general we have to wait for\n+  // the availability of the infrastructure described in N2983:  we should\n+  // try when either T has a move constructor which cannot throw or T is\n+  // CopyContructible.\n+  // NB: This code doesn't properly belong here, we should find a more\n+  // suited place common to std::vector and std::deque.\n+  template<typename _Tp,\n+\t   bool = __has_trivial_copy(typename _Tp::value_type)>\n+    struct __shrink_to_fit\n+    { static void _S_do_it(_Tp&) { } };\n+\n+  template<typename _Tp>\n+    struct __shrink_to_fit<_Tp, true>\n+    {\n+      static void\n+      _S_do_it(_Tp& __v)\n+      {\n+\t__try\n+\t  { _Tp(__v).swap(__v); }\n+\t__catch(...) { }\n+      }\n+    };\n+\n+\n+  /// [allocator.tag]\n+  struct allocator_arg_t { };\n+\n+  static const allocator_arg_t allocator_arg = allocator_arg_t();\n+\n+  template<typename _Tp>\n+    class __has_allocator_type\n+    : public __sfinae_types\n+    {\n+      template<typename _Up>\n+        struct _Wrap_type\n+\t{ };\n+\n+      template<typename _Up>\n+        static __one __test(_Wrap_type<typename _Up::allocator_type>*);\n+\n+      template<typename _Up>\n+        static __two __test(...);\n+\n+    public:\n+      static const bool __value = sizeof(__test<_Tp>(0)) == 1;\n+    };\n+\n+  template<typename _Tp, typename _Alloc,\n+\t   bool = __has_allocator_type<_Tp>::__value>\n+    struct __uses_allocator_helper\n+    : public false_type { };\n+\n+  template<typename _Tp, typename _Alloc>\n+    struct __uses_allocator_helper<_Tp, _Alloc, true>\n+    : public integral_constant<bool, is_convertible<_Alloc,\n+\t\t\t\t     typename _Tp::allocator_type>::value>\n+    { };\n+\n+  /// [allocator.uses.trait]\n+  template<typename _Tp, typename _Alloc>\n+    struct uses_allocator\n+    : public integral_constant<bool,\n+\t\t\t       __uses_allocator_helper<_Tp, _Alloc>::value>\n+    { };\n+\n #endif\n \n _GLIBCXX_END_NAMESPACE"}, {"sha": "f4b339db91afac83e67c6aae7a9683aed286c68b", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf", "patch": "@@ -68,6 +68,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n   struct piecewise_construct_t { };\n \n+  static const piecewise_construct_t piecewise_construct\n+    = piecewise_construct_t();\n+\n   // forward declarations\n   template<typename...>\n     class tuple;"}, {"sha": "85a06abe12f5a01f592b908a9ec6ca5474bf5fdd", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf", "patch": "@@ -307,6 +307,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     inline void\n     swap(queue<_Tp, _Seq>& __x, queue<_Tp, _Seq>& __y)\n     { __x.swap(__y); }\n+\n+  template<typename _Tp, typename _Seq, typename _Alloc>\n+    struct uses_allocator<queue<_Tp, _Seq>, _Alloc>\n+    : public uses_allocator<_Seq, _Alloc>::type { };\n #endif\n \n   /**\n@@ -536,6 +540,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     swap(priority_queue<_Tp, _Sequence, _Compare>& __x,\n \t priority_queue<_Tp, _Sequence, _Compare>& __y)\n     { __x.swap(__y); }\n+\n+  template<typename _Tp, typename _Sequence, typename _Compare,\n+\t   typename _Alloc>\n+    struct uses_allocator<priority_queue<_Tp, _Sequence, _Compare>, _Alloc>\n+    : public uses_allocator<_Sequence, _Alloc>::type { };\n #endif\n \n _GLIBCXX_END_NAMESPACE"}, {"sha": "7312a35e9ded4753774cd34213dc8f337382e0ae", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf", "patch": "@@ -282,6 +282,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     inline void\n     swap(stack<_Tp, _Seq>& __x, stack<_Tp, _Seq>& __y)\n     { __x.swap(__y); }\n+\n+  template<typename _Tp, typename _Seq, typename _Alloc>\n+    struct uses_allocator<stack<_Tp, _Seq>, _Alloc>\n+    : public uses_allocator<_Seq, _Alloc>::type { };\n #endif\n \n _GLIBCXX_END_NAMESPACE"}, {"sha": "5a43088c42c6cd62f3b6882bc15b337cc8e35258", "filename": "libstdc++-v3/testsuite/20_util/uses_allocator/requirements/explicit_instantiation.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Frequirements%2Fexplicit_instantiation.cc?ref=aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2010-09-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct uses_allocator<test_type, test_type>;\n+}"}, {"sha": "fad654d590c792da21e122ba4c2e47bbbcc0a99e", "filename": "libstdc++-v3/testsuite/20_util/uses_allocator/requirements/typedefs.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Frequirements%2Ftypedefs.cc?ref=aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// 2010-09-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::uses_allocator<int, int>       test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "5a7b0a8daf1ab27e3900d82828548c9e8ca44321", "filename": "libstdc++-v3/testsuite/20_util/uses_allocator/value.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fvalue.cc?ref=aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf", "patch": "@@ -0,0 +1,59 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2010-09-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+struct MyAlloc { };\n+\n+struct MyDerivedAlloc\n+: public MyAlloc { };\n+\n+struct UA { };\n+\n+struct UB { typedef int             allocator_type; };\n+\n+struct UC { typedef MyAlloc         allocator_type; };\n+\n+struct UD { typedef MyDerivedAlloc  allocator_type; };\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::uses_allocator;\n+  using namespace __gnu_test;\n+\n+  // Positive tests.\n+  VERIFY( (test_relationship<uses_allocator, UC, MyAlloc>(true)) );\n+  VERIFY( (test_relationship<uses_allocator, UC, MyDerivedAlloc>(true)));\n+\n+  // Negative tests.\n+  VERIFY( (test_relationship<uses_allocator, UA, MyAlloc>(false)) );\n+  VERIFY( (test_relationship<uses_allocator, UB, MyAlloc>(false)) );\n+  VERIFY( (test_relationship<uses_allocator, UD, MyAlloc>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fbb24c002f4b0ccddbfa265046d4310dd5445642", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/comparison/cmp_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc?ref=aa2b7414b0ec4a1c18998561b4aedd3abbf09dbf", "patch": "@@ -48,4 +48,4 @@ main()\n // { dg-warning \"note\" \"\" { target *-*-* } 1027 }\n // { dg-warning \"note\" \"\" { target *-*-* } 340 }\n // { dg-warning \"note\" \"\" { target *-*-* } 290 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 197 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 200 }"}]}