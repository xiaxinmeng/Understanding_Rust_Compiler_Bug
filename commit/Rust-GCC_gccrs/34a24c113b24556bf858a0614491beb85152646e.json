{"sha": "34a24c113b24556bf858a0614491beb85152646e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRhMjRjMTEzYjI0NTU2YmY4NThhMDYxNDQ5MWJlYjg1MTUyNjQ2ZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-03-15T20:14:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-03-15T20:14:49Z"}, "message": "re PR middle-end/29719 (newlib targets ICEs in expand_builtin_int_roundingfn)\n\n2007-03-15  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/29719\n\tPR middle-end/31161\n\t* builtins.c (expand_builtin_int_roundingfn): Always fall\n\tback to floor/ceil and its variants even if they may be\n\tnot available.\n\t(expand_builtin_cexpi): As a fallback if we\n\tdon't have builtins for sincos or cexp create a function\n\tdeclaration for cexp and expand to a call to that.\n\nFrom-SVN: r122958", "tree": {"sha": "7340698850120ae209ffafffbe6cb9c4642fe593", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7340698850120ae209ffafffbe6cb9c4642fe593"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34a24c113b24556bf858a0614491beb85152646e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a24c113b24556bf858a0614491beb85152646e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34a24c113b24556bf858a0614491beb85152646e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a24c113b24556bf858a0614491beb85152646e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49ea3702aa813f8181f4803830e0506abbd19e7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49ea3702aa813f8181f4803830e0506abbd19e7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49ea3702aa813f8181f4803830e0506abbd19e7a"}], "stats": {"total": 82, "additions": 76, "deletions": 6}, "files": [{"sha": "760143ef04fc249d326d3d90090909da444974eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a24c113b24556bf858a0614491beb85152646e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a24c113b24556bf858a0614491beb85152646e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34a24c113b24556bf858a0614491beb85152646e", "patch": "@@ -1,3 +1,14 @@\n+2007-03-15  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/29719\n+\tPR middle-end/31161\n+\t* builtins.c (expand_builtin_cexpi): As a fallback if we\n+\tdon't have builtins for sincos or cexp create a function\n+\tdeclaration for cexp and expand to a call to that.\n+\t(expand_builtin_int_roundingfn): Always fall\n+\tback to floor/ceil and its variants even if they may be\n+\tnot available.\n+\n 2007-03-15  Steven Bosscher  <steven@gcc.gnu.org>\n \n \tPR middle-end/31159"}, {"sha": "1e45ed0527145e9d8370e2b57664c8d8a55f55fc", "filename": "gcc/builtins.c", "status": "modified", "additions": 65, "deletions": 6, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a24c113b24556bf858a0614491beb85152646e/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a24c113b24556bf858a0614491beb85152646e/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=34a24c113b24556bf858a0614491beb85152646e", "patch": "@@ -2376,9 +2376,6 @@ expand_builtin_cexpi (tree exp, rtx target, rtx subtarget)\n       tree call, fn = NULL_TREE, narg;\n       tree ctype = build_complex_type (type);\n \n-      /* We can expand via the C99 cexp function.  */\n-      gcc_assert (TARGET_C99_FUNCTIONS);\n-\n       if (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_CEXPIF)\n \tfn = built_in_decls[BUILT_IN_CEXPF];\n       else if (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_CEXPI)\n@@ -2387,6 +2384,26 @@ expand_builtin_cexpi (tree exp, rtx target, rtx subtarget)\n \tfn = built_in_decls[BUILT_IN_CEXPL];\n       else\n \tgcc_unreachable ();\n+\n+      /* If we don't have a decl for cexp create one.  This is the\n+\t friendliest fallback if the user calls __builtin_cexpi\n+\t without full target C99 function support.  */\n+      if (fn == NULL_TREE)\n+\t{\n+\t  tree fntype;\n+\t  const char *name = NULL;\n+\n+\t  if (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_CEXPIF)\n+\t    name = \"cexpf\";\n+\t  else if (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_CEXPI)\n+\t    name = \"cexp\";\n+\t  else if (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_CEXPIL)\n+\t    name = \"cexpl\";\n+\n+\t  fntype = build_function_type_list (ctype, ctype, NULL_TREE);\n+\t  fn = build_fn_decl (name, fntype);\n+\t}\n+\n       narg = fold_build2 (COMPLEX_EXPR, ctype,\n \t\t\t  build_real (type, dconst0), arg);\n \n@@ -2480,9 +2497,51 @@ expand_builtin_int_roundingfn (tree exp, rtx target, rtx subtarget)\n \n   /* Fall back to floating point rounding optab.  */\n   fallback_fndecl = mathfn_built_in (TREE_TYPE (arg), fallback_fn);\n-  /* We shouldn't get here on targets without TARGET_C99_FUNCTIONS.\n-     ??? Perhaps convert (int)floorf(x) into (int)floor((double)x).  */\n-  gcc_assert (fallback_fndecl != NULL_TREE);\n+\n+  /* For non-C99 targets we may end up without a fallback fndecl here\n+     if the user called __builtin_lfloor directly.  In this case emit\n+     a call to the floor/ceil variants nevertheless.  This should result\n+     in the best user experience for not full C99 targets.  */\n+  if (fallback_fndecl == NULL_TREE)\n+    {\n+      tree fntype;\n+      const char *name = NULL;\n+\n+      switch (DECL_FUNCTION_CODE (fndecl))\n+\t{\n+\tcase BUILT_IN_LCEIL:\n+\tcase BUILT_IN_LLCEIL:\n+\t  name = \"ceil\";\n+\t  break;\n+\tcase BUILT_IN_LCEILF:\n+\tcase BUILT_IN_LLCEILF:\n+\t  name = \"ceilf\";\n+\t  break;\n+\tcase BUILT_IN_LCEILL:\n+\tcase BUILT_IN_LLCEILL:\n+\t  name = \"ceill\";\n+\t  break;\n+\tcase BUILT_IN_LFLOOR:\n+\tcase BUILT_IN_LLFLOOR:\n+\t  name = \"floor\";\n+\t  break;\n+\tcase BUILT_IN_LFLOORF:\n+\tcase BUILT_IN_LLFLOORF:\n+\t  name = \"floorf\";\n+\t  break;\n+\tcase BUILT_IN_LFLOORL:\n+\tcase BUILT_IN_LLFLOORL:\n+\t  name = \"floorl\";\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+\n+      fntype = build_function_type_list (TREE_TYPE (arg),\n+\t\t\t\t\t TREE_TYPE (arg), NULL_TREE);\n+      fallback_fndecl = build_fn_decl (name, fntype);\n+    }\n+\n   exp = build_call_expr (fallback_fndecl, 1, arg);\n \n   tmp = expand_normal (exp);"}]}