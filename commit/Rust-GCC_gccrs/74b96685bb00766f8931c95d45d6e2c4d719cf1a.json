{"sha": "74b96685bb00766f8931c95d45d6e2c4d719cf1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRiOTY2ODViYjAwNzY2Zjg5MzFjOTVkNDVkNmUyYzRkNzE5Y2YxYQ==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2019-07-10T09:00:48Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-10T09:00:48Z"}, "message": "[Ada] Fix crashes on ownership checking in SPARK\n\nCode that violates the conditions for ownership checking should lead to\nerror messages pointing to the violations instead of crashes.\n\nThere is no impact on compilation, only GNATprove.\n\n2019-07-10  Yannick Moy  <moy@adacore.com>\n\ngcc/ada/\n\n\t* sem_spark.adb (Get_Root_Object): Replace precondition by error\n\tmessage.\n\t(Read_Indexes): Replace precondition by error message.\n\t(Check_Callable_Body): Check only traversal function returns an\n\tanonymous access type.\n\t(Check_Expression): Issue error on unexpected expression as\n\tpath.\n\t* sem_util.adb (First_Global): Fix access to global on\n\tentry/task.\n\nFrom-SVN: r273329", "tree": {"sha": "c6d62cb0553dd1c03f98c9d4090d3d85718f21ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6d62cb0553dd1c03f98c9d4090d3d85718f21ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74b96685bb00766f8931c95d45d6e2c4d719cf1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74b96685bb00766f8931c95d45d6e2c4d719cf1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74b96685bb00766f8931c95d45d6e2c4d719cf1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74b96685bb00766f8931c95d45d6e2c4d719cf1a/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a6446841aa17a717f2f04ec22e507c86c864355", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a6446841aa17a717f2f04ec22e507c86c864355", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a6446841aa17a717f2f04ec22e507c86c864355"}], "stats": {"total": 57, "additions": 53, "deletions": 4}, "files": [{"sha": "a5ba51343ef38d9012b564bd3ac73f6b4ab87855", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74b96685bb00766f8931c95d45d6e2c4d719cf1a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74b96685bb00766f8931c95d45d6e2c4d719cf1a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=74b96685bb00766f8931c95d45d6e2c4d719cf1a", "patch": "@@ -1,3 +1,15 @@\n+2019-07-10  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_spark.adb (Get_Root_Object): Replace precondition by error\n+\tmessage.\n+\t(Read_Indexes): Replace precondition by error message.\n+\t(Check_Callable_Body): Check only traversal function returns an\n+\tanonymous access type.\n+\t(Check_Expression): Issue error on unexpected expression as\n+\tpath.\n+\t* sem_util.adb (First_Global): Fix access to global on\n+\tentry/task.\n+\n 2019-07-10  Javier Miranda  <miranda@adacore.com>\n \n \t* exp_ch6.adb (Is_Class_Wide_Interface_Type): New subprogram."}, {"sha": "af7dcd5f256b495ee9952ed9e6bbebc1da7d234b", "filename": "gcc/ada/sem_spark.adb", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74b96685bb00766f8931c95d45d6e2c4d719cf1a/gcc%2Fada%2Fsem_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74b96685bb00766f8931c95d45d6e2c4d719cf1a/gcc%2Fada%2Fsem_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_spark.adb?ref=74b96685bb00766f8931c95d45d6e2c4d719cf1a", "patch": "@@ -714,7 +714,6 @@ package body Sem_SPARK is\n    function Get_Root_Object\n      (Expr              : Node_Id;\n       Through_Traversal : Boolean := True) return Entity_Id;\n-   pragma Precondition (Is_Path_Expression (Expr));\n    --  Return the root of the path expression Expr, or Empty for an allocator,\n    --  NULL, or a function call. Through_Traversal is True if it should follow\n    --  through calls to traversal functions.\n@@ -1311,6 +1310,15 @@ package body Sem_SPARK is\n \n       Inside_Elaboration := False;\n \n+      if Ekind (Spec_Id) = E_Function\n+        and then Is_Anonymous_Access_Type (Etype (Spec_Id))\n+        and then not Is_Traversal_Function (Spec_Id)\n+      then\n+         Error_Msg_N (\"anonymous access type for result only allowed for \"\n+                      & \"traveral functions\", Spec_Id);\n+         return;\n+      end if;\n+\n       --  Save environment and put a new one in place\n \n       Move_Env (Current_Perm_Env, Saved_Env);\n@@ -1451,7 +1459,6 @@ package body Sem_SPARK is\n       --  Call Read_Expression on every expression in the list L\n \n       procedure Read_Indexes (Expr : Node_Id);\n-      pragma Precondition (Is_Path_Expression (Expr));\n       --  When processing a path, the index expressions and function call\n       --  arguments occurring on the path should be analyzed in Read mode.\n \n@@ -1562,6 +1569,11 @@ package body Sem_SPARK is\n       --  Start of processing for Read_Indexes\n \n       begin\n+         if not Is_Path_Expression (Expr) then\n+            Error_Msg_N (\"name expected here for move/borrow/observe\", Expr);\n+            return;\n+         end if;\n+\n          case N_Subexpr'(Nkind (Expr)) is\n             when N_Identifier\n                | N_Expanded_Name\n@@ -1710,7 +1722,10 @@ package body Sem_SPARK is\n       --  Expressions that are not path expressions should only be analyzed in\n       --  Read mode.\n \n-      pragma Assert (Mode = Read);\n+      if Mode /= Read then\n+         Error_Msg_N (\"name expected here for move/borrow/observe\", Expr);\n+         return;\n+      end if;\n \n       --  Special handling for nodes that may contain evaluated expressions in\n       --  the form of constraints.\n@@ -3484,6 +3499,11 @@ package body Sem_SPARK is\n       Through_Traversal : Boolean := True) return Entity_Id\n    is\n    begin\n+      if not Is_Path_Expression (Expr) then\n+         Error_Msg_N (\"name expected here for path\", Expr);\n+         return Empty;\n+      end if;\n+\n       case Nkind (Expr) is\n          when N_Expanded_Name\n             | N_Identifier"}, {"sha": "1c266341dfd3457469f408a91f778546bf763f0a", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74b96685bb00766f8931c95d45d6e2c4d719cf1a/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74b96685bb00766f8931c95d45d6e2c4d719cf1a/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=74b96685bb00766f8931c95d45d6e2c4d719cf1a", "patch": "@@ -8713,7 +8713,24 @@ package body Sem_Util is\n       --  case, it can only be located on the body entity.\n \n       if Refined then\n-         Body_Id := Subprogram_Body_Entity (Subp);\n+         if Is_Subprogram_Or_Generic_Subprogram (Subp) then\n+            Body_Id := Subprogram_Body_Entity (Subp);\n+\n+         elsif Is_Entry (Subp)\n+           or else Is_Task_Type (Subp)\n+         then\n+            Body_Id := Corresponding_Body (Parent (Subp));\n+\n+         --  ??? It should be possible to retrieve the Refined_Global on the\n+         --  task body associated to the task object. This is not yet possible.\n+\n+         elsif Is_Single_Task_Object (Subp) then\n+            Body_Id := Empty;\n+\n+         else\n+            Body_Id := Empty;\n+         end if;\n+\n          if Present (Body_Id) then\n             Global := Get_Pragma (Body_Id, Pragma_Refined_Global);\n          end if;"}]}