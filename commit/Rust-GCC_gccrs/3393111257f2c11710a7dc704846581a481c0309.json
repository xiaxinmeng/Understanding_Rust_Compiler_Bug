{"sha": "3393111257f2c11710a7dc704846581a481c0309", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM5MzExMTI1N2YyYzExNzEwYTdkYzcwNDg0NjU4MWE0ODFjMDMwOQ==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2008-05-20T12:50:03Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-20T12:50:03Z"}, "message": "2008-05-20  Javier Miranda  <miranda@adacore.com>\n\t    Ed Schonberg  <schonberg@adacore.com>\n\t    Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch3.adb\n\t(Analyze_Object_Declaration): Fix over-conservative condition\n\trestricting use of predefined assignment with tagged types that have\n\tconvention CPP.\n\t(Analyze_Object_Declaration): Relax the check regarding deferred\n\tconstants declared in scopes other than packages since they can be\n\tcompleted with pragma Import.\n\tAdd missing escaping of all-caps word 'CPP' in error messages.\n\t(Build_Discriminated_Subtype): Do not inherit representation clauses\n\tfrom parent type if subtype already carries them, because they are\n\tinherited earlier during derivation and already include those that may\n\tcome from a partial view.\n\n\t* sem_ch9.adb, sem_ch5.adb, sem_ch6.adb (Analyze_Subprogram_Body):\n\tCheck the declarations of a subprogram body for proper deferred\n\tconstant completion.\n\n\t* sem_ch7.ads, sem_ch7.adb\n\t(Inspect_Deferred_Constant_Completion): Moved to sem_util.\n\nFrom-SVN: r135638", "tree": {"sha": "e95ee33f3a1608a26e20f6a70edd8aff99af7f13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e95ee33f3a1608a26e20f6a70edd8aff99af7f13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3393111257f2c11710a7dc704846581a481c0309", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3393111257f2c11710a7dc704846581a481c0309", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3393111257f2c11710a7dc704846581a481c0309", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3393111257f2c11710a7dc704846581a481c0309/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "de5cd98e3ba2dd0303d2242c9431343aef530441", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de5cd98e3ba2dd0303d2242c9431343aef530441", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de5cd98e3ba2dd0303d2242c9431343aef530441"}], "stats": {"total": 211, "additions": 116, "deletions": 95}, "files": [{"sha": "1b367373720f2a7b2c0cd76f6c64f556d12180ca", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 108, "deletions": 51, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3393111257f2c11710a7dc704846581a481c0309/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3393111257f2c11710a7dc704846581a481c0309/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=3393111257f2c11710a7dc704846581a481c0309", "patch": "@@ -2404,16 +2404,34 @@ package body Sem_Ch3 is\n \n          if Is_Imported (Defining_Identifier (N))\n            and then\n-            (T = RTE (RE_Tag)\n-              or else (Present (Full_View (T))\n-                        and then Full_View (T) = RTE (RE_Tag)))\n+             (T = RTE (RE_Tag)\n+               or else\n+                 (Present (Full_View (T))\n+                   and then Full_View (T) = RTE (RE_Tag)))\n          then\n             null;\n \n-         elsif not Is_Package_Or_Generic_Package (Current_Scope) then\n+         --  A deferred constant may appear in the declarative part of the\n+         --  following constructs:\n+\n+         --     blocks\n+         --     entry bodies\n+         --     extended return statements\n+         --     package specs\n+         --     package bodies\n+         --     subprogram bodies\n+         --     task bodies\n+\n+         --  When declared inside a package spec, a deferred constant must be\n+         --  completed by a full constant declaration or pragma Import. In all\n+         --  other cases, the only proper completion is pragma Import. Extended\n+         --  return statements are flagged as invalid contexts because they do\n+         --  not have a declarative part and so cannot accommodate the pragma.\n+\n+         elsif Ekind (Current_Scope) = E_Return_Statement then\n             Error_Msg_N\n               (\"invalid context for deferred constant declaration (RM 7.4)\",\n-                N);\n+               N);\n             Error_Msg_N\n               (\"\\declaration requires an initialization expression\",\n                 N);\n@@ -2482,10 +2500,16 @@ package body Sem_Ch3 is\n          --  (primitive that is not available in CPP tagged types).\n \n          if Is_Class_Wide_Type (Act_T)\n-           and then Convention (Act_T) = Convention_CPP\n+           and then\n+             (Is_CPP_Class (Root_Type (Etype (Act_T)))\n+               or else\n+                 (Present (Full_View (Root_Type (Etype (Act_T))))\n+                    and then\n+                      Is_CPP_Class (Full_View (Root_Type (Etype (Act_T))))))\n          then\n             Error_Msg_N\n-              (\"predefined assignment not available in CPP tagged types\", E);\n+              (\"predefined assignment not available for 'C'P'P tagged types\",\n+               E);\n          end if;\n \n          Mark_Coextensions (N, E);\n@@ -3844,8 +3868,9 @@ package body Sem_Ch3 is\n \n                Validate_Access_Type_Declaration (T, N);\n \n-               --  If we are in a Remote_Call_Interface package and define\n-               --  a RACW, Read and Write attribute must be added.\n+               --  If we are in a Remote_Call_Interface package and define a\n+               --  RACW, then calling stubs and specific stream attributes\n+               --  must be added.\n \n                if Is_Remote\n                  and then Is_Remote_Access_To_Class_Wide_Type (Def_Id)\n@@ -3908,10 +3933,10 @@ package body Sem_Ch3 is\n          B : constant Entity_Id := Base_Type (T);\n \n       begin\n-         --  In the case where the base type is different from the first\n-         --  subtype, we pre-allocate a freeze node, and set the proper link\n-         --  to the first subtype. Freeze_Entity will use this preallocated\n-         --  freeze node when it freezes the entity.\n+         --  In the case where the base type differs from the first subtype, we\n+         --  pre-allocate a freeze node, and set the proper link to the first\n+         --  subtype. Freeze_Entity will use this preallocated freeze node when\n+         --  it freezes the entity.\n \n          if B /= T then\n             Ensure_Freeze_Node (B);\n@@ -3929,11 +3954,11 @@ package body Sem_Ch3 is\n       if T /= Def_Id and then Is_Private_Type (Def_Id) then\n          Process_Full_View (N, T, Def_Id);\n \n-         --  Record the reference. The form of this is a little strange,\n-         --  since the full declaration has been swapped in. So the first\n-         --  parameter here represents the entity to which a reference is\n-         --  made which is the \"real\" entity, i.e. the one swapped in,\n-         --  and the second parameter provides the reference location.\n+         --  Record the reference. The form of this is a little strange, since\n+         --  the full declaration has been swapped in. So the first parameter\n+         --  here represents the entity to which a reference is made which is\n+         --  the \"real\" entity, i.e. the one swapped in, and the second\n+         --  parameter provides the reference location.\n \n          --  Also, we want to kill Has_Pragma_Unreferenced temporarily here\n          --  since we don't want a complaint about the full type being an\n@@ -3985,12 +4010,12 @@ package body Sem_Ch3 is\n    procedure Analyze_Variant_Part (N : Node_Id) is\n \n       procedure Non_Static_Choice_Error (Choice : Node_Id);\n-      --  Error routine invoked by the generic instantiation below when\n-      --  the variant part has a non static choice.\n+      --  Error routine invoked by the generic instantiation below when the\n+      --  variant part has a non static choice.\n \n       procedure Process_Declarations (Variant : Node_Id);\n-      --  Analyzes all the declarations associated with a Variant.\n-      --  Needed by the generic instantiation below.\n+      --  Analyzes all the declarations associated with a Variant. Needed by\n+      --  the generic instantiation below.\n \n       package Variant_Choices_Processing is new\n         Generic_Choices_Processing\n@@ -4097,9 +4122,9 @@ package body Sem_Ch3 is\n          Index := First (Subtype_Marks (Def));\n       end if;\n \n-      --  Find proper names for the implicit types which may be public.\n-      --  in case of anonymous arrays we use the name of the first object\n-      --  of that type as prefix.\n+      --  Find proper names for the implicit types which may be public. In case\n+      --  of anonymous arrays we use the name of the first object of that type\n+      --  as prefix.\n \n       if No (T) then\n          Related_Id :=  Defining_Identifier (P);\n@@ -4120,9 +4145,9 @@ package body Sem_Ch3 is\n          --        type Table is array (Index) of ...\n          --     end;\n \n-         --  This is currently required by the expander to generate the\n-         --  internally generated equality subprogram of records with variant\n-         --  parts in which the etype of some component is such private type.\n+         --  This is currently required by the expander for the internally\n+         --  generated equality subprogram of records with variant parts in\n+         --  which the etype of some component is such private type.\n \n          if Ekind (Current_Scope) = E_Package\n            and then In_Private_Part (Current_Scope)\n@@ -4195,9 +4220,9 @@ package body Sem_Ch3 is\n \n          Set_Parent (Element_Type, Parent (T));\n \n-         --  Ada 2005 (AI-230): In case of components that are anonymous\n-         --  access types the level of accessibility depends on the enclosing\n-         --  type declaration\n+         --  Ada 2005 (AI-230): In case of components that are anonymous access\n+         --  types the level of accessibility depends on the enclosing type\n+         --  declaration\n \n          Set_Scope (Element_Type, Current_Scope); -- Ada 2005 (AI-230)\n \n@@ -4296,8 +4321,8 @@ package body Sem_Ch3 is\n \n          if Null_Exclusion_Present (Component_Definition (Def))\n \n-            --  No need to check itypes because in their case this check\n-            --  was done at their point of creation\n+            --  No need to check itypes because in their case this check was\n+            --  done at their point of creation\n \n            and then not Is_Itype (Element_Type)\n          then\n@@ -4331,8 +4356,8 @@ package body Sem_Ch3 is\n          end if;\n       end if;\n \n-      --  A syntax error in the declaration itself may lead to an empty\n-      --  index list, in which case do a minimal patch.\n+      --  A syntax error in the declaration itself may lead to an empty index\n+      --  list, in which case do a minimal patch.\n \n       if No (First_Index (T)) then\n          Error_Msg_N (\"missing index definition in array type declaration\", T);\n@@ -7631,7 +7656,16 @@ package body Sem_Ch3 is\n \n       Set_First_Entity      (Def_Id, First_Entity   (T));\n       Set_Last_Entity       (Def_Id, Last_Entity    (T));\n-      Set_First_Rep_Item    (Def_Id, First_Rep_Item (T));\n+\n+      --  If the subtype is the completion of a private declaration, there may\n+      --  have been representation clauses for the partial view, and they must\n+      --  be preserved. Build_Derived_Type chains the inherited clauses with\n+      --  the ones appearing on the extension. If this comes from a subtype\n+      --  declaration, all clauses are inherited.\n+\n+      if No (First_Rep_Item (Def_Id)) then\n+         Set_First_Rep_Item    (Def_Id, First_Rep_Item (T));\n+      end if;\n \n       if Is_Tagged_Type (T) then\n          Set_Is_Tagged_Type  (Def_Id);\n@@ -9922,7 +9956,7 @@ package body Sem_Ch3 is\n                --  discriminant is declared in the private entity.\n \n                or else (Is_Private_Type (Typ)\n-                        and then Chars (Discrim_Scope) = Chars (Typ))\n+                         and then Chars (Discrim_Scope) = Chars (Typ))\n \n                --  Or we are constrained the corresponding record of a\n                --  synchronized type that completes a private declaration.\n@@ -9935,7 +9969,7 @@ package body Sem_Ch3 is\n                --  discriminant found belongs to the root type.\n \n                or else (Is_Class_Wide_Type (Typ)\n-                        and then Etype (Typ) = Discrim_Scope));\n+                         and then Etype (Typ) = Discrim_Scope));\n \n             return True;\n          end if;\n@@ -12892,6 +12926,31 @@ package body Sem_Ch3 is\n       New_Id   : Entity_Id;\n       Prev_Par : Node_Id;\n \n+      procedure Tag_Mismatch;\n+      --  Diagnose a tagged partial view whose full view is untagged;\n+      --  We post the message on the full view, with a reference to\n+      --  the previous partial view. The partial view can be private\n+      --  or incomplete, and these are handled in a different manner,\n+      --  so we determine the position of the error message from the\n+      --  respective slocs of both.\n+\n+      ------------------\n+      -- Tag_Mismatch --\n+      ------------------\n+\n+      procedure Tag_Mismatch is\n+      begin\n+         if Sloc (Prev) < Sloc (Id) then\n+            Error_Msg_NE\n+              (\"full declaration of } must be a tagged type \", Id, Prev);\n+         else\n+            Error_Msg_NE\n+              (\"full declaration of } must be a tagged type \", Prev, Id);\n+         end if;\n+      end Tag_Mismatch;\n+\n+   --  Start processing for Find_Type_Name\n+\n    begin\n       --  Find incomplete declaration, if one was given\n \n@@ -13024,7 +13083,7 @@ package body Sem_Ch3 is\n             New_Id := Prev;\n          end if;\n \n-         --  Verify that full declaration conforms to incomplete one\n+         --  Verify that full declaration conforms to partial one\n \n          if Is_Incomplete_Or_Private_Type (Prev)\n            and then Present (Discriminant_Specifications (Prev_Par))\n@@ -13048,9 +13107,10 @@ package body Sem_Ch3 is\n             end if;\n          end if;\n \n-         --  A prior untagged private type can have an associated class-wide\n+         --  A prior untagged partial view can have an associated class-wide\n          --  type due to use of the class attribute, and in this case also the\n-         --  full type is required to be tagged.\n+         --  full type is required to be tagged. This Ada95 usage is deprecated\n+         --  in favor of incomplete tagged declarations but we check for it.\n \n          if Is_Type (Prev)\n            and then (Is_Tagged_Type (Prev)\n@@ -13066,8 +13126,7 @@ package body Sem_Ch3 is\n                if No (Interface_List (N))\n                  and then not Error_Posted (N)\n                then\n-                  Error_Msg_NE\n-                    (\"full declaration of } must be a tagged type \", Id, Prev);\n+                  Tag_Mismatch;\n                end if;\n \n             elsif Nkind (Type_Definition (N)) = N_Record_Definition then\n@@ -13076,8 +13135,7 @@ package body Sem_Ch3 is\n                --  or private declaration) requires the same on the full one.\n \n                if not Tagged_Present (Type_Definition (N)) then\n-                  Error_Msg_NE\n-                    (\"full declaration of } must be tagged\", Prev, Id);\n+                  Tag_Mismatch;\n                   Set_Is_Tagged_Type (Id);\n                   Set_Primitive_Operations (Id, New_Elmt_List);\n                end if;\n@@ -13092,9 +13150,7 @@ package body Sem_Ch3 is\n                end if;\n \n             else\n-               Error_Msg_NE\n-                 (\"full declaration of } must be a tagged type\", Prev, Id);\n-\n+               Tag_Mismatch;\n             end if;\n          end if;\n \n@@ -17074,11 +17130,12 @@ package body Sem_Ch3 is\n \n          elsif Has_Controlled_Component (Etype (Component))\n            or else (Chars (Component) /= Name_uParent\n-                    and then Is_Controlled (Etype (Component)))\n+                     and then Is_Controlled (Etype (Component)))\n          then\n             Set_Has_Controlled_Component (T, True);\n-            Final_Storage_Only := Final_Storage_Only\n-              and then Finalize_Storage_Only (Etype (Component));\n+            Final_Storage_Only :=\n+              Final_Storage_Only\n+                and then Finalize_Storage_Only (Etype (Component));\n             Ctrl_Components := True;\n          end if;\n "}, {"sha": "e5de05b3a5883c831ebd51717b050ff5b29cfeab", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3393111257f2c11710a7dc704846581a481c0309/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3393111257f2c11710a7dc704846581a481c0309/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=3393111257f2c11710a7dc704846581a481c0309", "patch": "@@ -870,6 +870,7 @@ package body Sem_Ch5 is\n          if Present (Decls) then\n             Analyze_Declarations (Decls);\n             Check_Completion;\n+            Inspect_Deferred_Constant_Completion (Decls);\n          end if;\n \n          Analyze (HSS);"}, {"sha": "b4b1dcf9e04f48d01387fe00929c5743e5e4368e", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3393111257f2c11710a7dc704846581a481c0309/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3393111257f2c11710a7dc704846581a481c0309/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=3393111257f2c11710a7dc704846581a481c0309", "patch": "@@ -1257,10 +1257,10 @@ package body Sem_Ch6 is\n \n    procedure Analyze_Subprogram_Body (N : Node_Id) is\n       Loc          : constant Source_Ptr := Sloc (N);\n+      Body_Deleted : constant Boolean    := False;\n       Body_Spec    : constant Node_Id    := Specification (N);\n       Body_Id      : Entity_Id           := Defining_Entity (Body_Spec);\n       Prev_Id      : constant Entity_Id  := Current_Entity_In_Scope (Body_Id);\n-      Body_Deleted : constant Boolean    := False;\n       Conformant   : Boolean;\n       HSS          : Node_Id;\n       Missing_Ret  : Boolean;\n@@ -1369,7 +1369,8 @@ package body Sem_Ch6 is\n          Plist : List_Id;\n \n          function Is_Inline_Pragma (N : Node_Id) return Boolean;\n-         --  Simple predicate, used twice.\n+         --  True when N is a pragma Inline or Inline_Awlays that applies\n+         --  to this subprogram.\n \n          -----------------------\n          --  Is_Inline_Pragma --\n@@ -2045,6 +2046,7 @@ package body Sem_Ch6 is\n       --  Check completion, and analyze the statements\n \n       Check_Completion;\n+      Inspect_Deferred_Constant_Completion (Declarations (N));\n       Analyze (HSS);\n \n       --  Deal with end of scope processing for the body"}, {"sha": "ee3300bb9385a63654c99c299a19df914fded707", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3393111257f2c11710a7dc704846581a481c0309/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3393111257f2c11710a7dc704846581a481c0309/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=3393111257f2c11710a7dc704846581a481c0309", "patch": "@@ -100,12 +100,6 @@ package body Sem_Ch7 is\n    --  created at the beginning of the corresponding package body and inserted\n    --  before other body declarations.\n \n-   procedure Inspect_Deferred_Constant_Completion (Decls : List_Id);\n-   --  Examines the deferred constants in the private part of the package\n-   --  specification, or in a package body. Emits the error message\n-   --  \"constant declaration requires initialization expression\" if not\n-   --  completed by an Import pragma.\n-\n    procedure Install_Package_Entity (Id : Entity_Id);\n    --  Supporting procedure for Install_{Visible,Private}_Declarations.\n    --  Places one entity on its visibility chain, and recurses on the visible\n@@ -1604,41 +1598,6 @@ package body Sem_Ch7 is\n       Set_Homonym     (Full_Id, H2);\n    end Exchange_Declarations;\n \n-   ------------------------------------------\n-   -- Inspect_Deferred_Constant_Completion --\n-   ------------------------------------------\n-\n-   procedure Inspect_Deferred_Constant_Completion (Decls : List_Id) is\n-      Decl   : Node_Id;\n-\n-   begin\n-      Decl := First (Decls);\n-      while Present (Decl) loop\n-\n-         --  Deferred constant signature\n-\n-         if Nkind (Decl) = N_Object_Declaration\n-           and then Constant_Present (Decl)\n-           and then No (Expression (Decl))\n-\n-            --  No need to check internally generated constants\n-\n-           and then Comes_From_Source (Decl)\n-\n-            --  The constant is not completed. A full object declaration\n-            --  or a pragma Import complete a deferred constant.\n-\n-           and then not Has_Completion (Defining_Identifier (Decl))\n-         then\n-            Error_Msg_N\n-              (\"constant declaration requires initialization expression\",\n-              Defining_Identifier (Decl));\n-         end if;\n-\n-         Decl := Next (Decl);\n-      end loop;\n-   end Inspect_Deferred_Constant_Completion;\n-\n    ----------------------------\n    -- Install_Package_Entity --\n    ----------------------------"}, {"sha": "0445b2429492ec21429c90c1c92962f9b3751924", "filename": "gcc/ada/sem_ch7.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3393111257f2c11710a7dc704846581a481c0309/gcc%2Fada%2Fsem_ch7.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3393111257f2c11710a7dc704846581a481c0309/gcc%2Fada%2Fsem_ch7.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.ads?ref=3393111257f2c11710a7dc704846581a481c0309", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "9482b565febd796bc22f4b514d9108bb413c3e95", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3393111257f2c11710a7dc704846581a481c0309/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3393111257f2c11710a7dc704846581a481c0309/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=3393111257f2c11710a7dc704846581a481c0309", "patch": "@@ -795,6 +795,7 @@ package body Sem_Ch9 is\n \n       if Present (Decls) then\n          Analyze_Declarations (Decls);\n+         Inspect_Deferred_Constant_Completion (Decls);\n       end if;\n \n       if Present (Stats) then\n@@ -1908,6 +1909,7 @@ package body Sem_Ch9 is\n       Last_E := Last_Entity (Spec_Id);\n \n       Analyze_Declarations (Decls);\n+      Inspect_Deferred_Constant_Completion (Decls);\n \n       --  For visibility purposes, all entities in the body are private. Set\n       --  First_Private_Entity accordingly, if there was no private part in the"}]}