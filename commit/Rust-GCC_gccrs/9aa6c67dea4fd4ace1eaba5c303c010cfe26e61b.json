{"sha": "9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b", "node_id": "C_kwDOANBUbNoAKDlhYTZjNjdkZWE0ZmQ0YWNlMWVhYmE1YzMwM2MwMTBjZmUyNmU2MWI", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-07T06:16:01Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T05:58:41Z"}, "message": "RISC-V: Add vwsubu.wx C API tests\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/vwsubu_wx-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsubu_wx-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsubu_wx-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsubu_wx_m-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsubu_wx_m-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsubu_wx_m-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsubu_wx_mu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsubu_wx_mu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsubu_wx_mu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsubu_wx_tu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsubu_wx_tu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsubu_wx_tu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsubu_wx_tum-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsubu_wx_tum-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsubu_wx_tum-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsubu_wx_tumu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsubu_wx_tumu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwsubu_wx_tumu-3.c: New test.", "tree": {"sha": "2f7a8a445ed2ac2a1920cc7176a981bcc889697a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f7a8a445ed2ac2a1920cc7176a981bcc889697a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1e42094e7ac684e556e3a1246516bce5ed5ecee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1e42094e7ac684e556e3a1246516bce5ed5ecee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1e42094e7ac684e556e3a1246516bce5ed5ecee"}], "stats": {"total": 1998, "additions": 1998, "deletions": 0}, "files": [{"sha": "7c41784b3ec760001bc6ced359dbc79790570b0d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsubu_wx-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx-1.c?ref=9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwsubu_wx_u16mf4(vuint16mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf4(op1,0xAA,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwsubu_wx_u16mf2(vuint16mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf2(op1,0xAA,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwsubu_wx_u16m1(vuint16m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m1(op1,0xAA,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwsubu_wx_u16m2(vuint16m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m2(op1,0xAA,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwsubu_wx_u16m4(vuint16m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m4(op1,0xAA,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwsubu_wx_u16m8(vuint16m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m8(op1,0xAA,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwsubu_wx_u32mf2(vuint32mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32mf2(op1,0xAA,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwsubu_wx_u32m1(vuint32m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m1(op1,0xAA,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwsubu_wx_u32m2(vuint32m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m2(op1,0xAA,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwsubu_wx_u32m4(vuint32m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m4(op1,0xAA,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwsubu_wx_u32m8(vuint32m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m8(op1,0xAA,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwsubu_wx_u64m1(vuint64m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m1(op1,0xAA,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwsubu_wx_u64m2(vuint64m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m2(op1,0xAA,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwsubu_wx_u64m4(vuint64m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m4(op1,0xAA,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwsubu_wx_u64m8(vuint64m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m8(op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "bd00cca488b0872493880c61b1d747e0cdd32da1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsubu_wx-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx-2.c?ref=9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwsubu_wx_u16mf4(vuint16mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf4(op1,0xAA,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwsubu_wx_u16mf2(vuint16mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf2(op1,0xAA,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwsubu_wx_u16m1(vuint16m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m1(op1,0xAA,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwsubu_wx_u16m2(vuint16m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m2(op1,0xAA,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwsubu_wx_u16m4(vuint16m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m4(op1,0xAA,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwsubu_wx_u16m8(vuint16m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m8(op1,0xAA,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwsubu_wx_u32mf2(vuint32mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32mf2(op1,0xAA,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwsubu_wx_u32m1(vuint32m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m1(op1,0xAA,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwsubu_wx_u32m2(vuint32m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m2(op1,0xAA,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwsubu_wx_u32m4(vuint32m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m4(op1,0xAA,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwsubu_wx_u32m8(vuint32m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m8(op1,0xAA,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwsubu_wx_u64m1(vuint64m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m1(op1,0xAA,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwsubu_wx_u64m2(vuint64m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m2(op1,0xAA,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwsubu_wx_u64m4(vuint64m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m4(op1,0xAA,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwsubu_wx_u64m8(vuint64m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m8(op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "b3773e65fd1d89bfc25c4e44763fe88d02137e89", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsubu_wx-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx-3.c?ref=9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwsubu_wx_u16mf4(vuint16mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf4(op1,0xAA,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwsubu_wx_u16mf2(vuint16mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf2(op1,0xAA,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwsubu_wx_u16m1(vuint16m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m1(op1,0xAA,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwsubu_wx_u16m2(vuint16m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m2(op1,0xAA,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwsubu_wx_u16m4(vuint16m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m4(op1,0xAA,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwsubu_wx_u16m8(vuint16m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m8(op1,0xAA,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwsubu_wx_u32mf2(vuint32mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32mf2(op1,0xAA,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwsubu_wx_u32m1(vuint32m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m1(op1,0xAA,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwsubu_wx_u32m2(vuint32m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m2(op1,0xAA,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwsubu_wx_u32m4(vuint32m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m4(op1,0xAA,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwsubu_wx_u32m8(vuint32m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m8(op1,0xAA,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwsubu_wx_u64m1(vuint64m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m1(op1,0xAA,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwsubu_wx_u64m2(vuint64m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m2(op1,0xAA,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwsubu_wx_u64m4(vuint64m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m4(op1,0xAA,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwsubu_wx_u64m8(vuint64m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m8(op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "92ee0af56bda9f257d33ffac4c07946fd3e3878e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsubu_wx_m-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_m-1.c?ref=9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwsubu_wx_u16mf4_m(vbool64_t mask,vuint16mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf4_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwsubu_wx_u16mf2_m(vbool32_t mask,vuint16mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf2_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwsubu_wx_u16m1_m(vbool16_t mask,vuint16m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m1_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwsubu_wx_u16m2_m(vbool8_t mask,vuint16m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m2_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwsubu_wx_u16m4_m(vbool4_t mask,vuint16m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m4_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwsubu_wx_u16m8_m(vbool2_t mask,vuint16m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m8_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwsubu_wx_u32mf2_m(vbool64_t mask,vuint32mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32mf2_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwsubu_wx_u32m1_m(vbool32_t mask,vuint32m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m1_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwsubu_wx_u32m2_m(vbool16_t mask,vuint32m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m2_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwsubu_wx_u32m4_m(vbool8_t mask,vuint32m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m4_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwsubu_wx_u32m8_m(vbool4_t mask,vuint32m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m8_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwsubu_wx_u64m1_m(vbool64_t mask,vuint64m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m1_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwsubu_wx_u64m2_m(vbool32_t mask,vuint64m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m2_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwsubu_wx_u64m4_m(vbool16_t mask,vuint64m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m4_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwsubu_wx_u64m8_m(vbool8_t mask,vuint64m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m8_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "593f65f8e6d4bbf39a400c5c60000a1fbb5dcc5b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsubu_wx_m-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_m-2.c?ref=9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwsubu_wx_u16mf4_m(vbool64_t mask,vuint16mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf4_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwsubu_wx_u16mf2_m(vbool32_t mask,vuint16mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf2_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwsubu_wx_u16m1_m(vbool16_t mask,vuint16m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m1_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwsubu_wx_u16m2_m(vbool8_t mask,vuint16m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m2_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwsubu_wx_u16m4_m(vbool4_t mask,vuint16m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m4_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwsubu_wx_u16m8_m(vbool2_t mask,vuint16m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m8_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwsubu_wx_u32mf2_m(vbool64_t mask,vuint32mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32mf2_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwsubu_wx_u32m1_m(vbool32_t mask,vuint32m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m1_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwsubu_wx_u32m2_m(vbool16_t mask,vuint32m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m2_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwsubu_wx_u32m4_m(vbool8_t mask,vuint32m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m4_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwsubu_wx_u32m8_m(vbool4_t mask,vuint32m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m8_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwsubu_wx_u64m1_m(vbool64_t mask,vuint64m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m1_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwsubu_wx_u64m2_m(vbool32_t mask,vuint64m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m2_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwsubu_wx_u64m4_m(vbool16_t mask,vuint64m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m4_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwsubu_wx_u64m8_m(vbool8_t mask,vuint64m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m8_m(mask,op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "04cc98d1eea7edc35cfd3e24fb55a862662c6063", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsubu_wx_m-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_m-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_m-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_m-3.c?ref=9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwsubu_wx_u16mf4_m(vbool64_t mask,vuint16mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf4_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwsubu_wx_u16mf2_m(vbool32_t mask,vuint16mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf2_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwsubu_wx_u16m1_m(vbool16_t mask,vuint16m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m1_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwsubu_wx_u16m2_m(vbool8_t mask,vuint16m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m2_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwsubu_wx_u16m4_m(vbool4_t mask,vuint16m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m4_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwsubu_wx_u16m8_m(vbool2_t mask,vuint16m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m8_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwsubu_wx_u32mf2_m(vbool64_t mask,vuint32mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32mf2_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwsubu_wx_u32m1_m(vbool32_t mask,vuint32m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m1_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwsubu_wx_u32m2_m(vbool16_t mask,vuint32m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m2_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwsubu_wx_u32m4_m(vbool8_t mask,vuint32m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m4_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwsubu_wx_u32m8_m(vbool4_t mask,vuint32m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m8_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwsubu_wx_u64m1_m(vbool64_t mask,vuint64m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m1_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwsubu_wx_u64m2_m(vbool32_t mask,vuint64m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m2_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwsubu_wx_u64m4_m(vbool16_t mask,vuint64m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m4_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwsubu_wx_u64m8_m(vbool8_t mask,vuint64m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m8_m(mask,op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "3ae20d21bcdb47c87db6cd851ab9dba1b3bed2d6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsubu_wx_mu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_mu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_mu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_mu-1.c?ref=9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwsubu_wx_u16mf4_mu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf4_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwsubu_wx_u16mf2_mu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf2_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwsubu_wx_u16m1_mu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m1_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwsubu_wx_u16m2_mu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m2_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwsubu_wx_u16m4_mu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m4_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwsubu_wx_u16m8_mu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m8_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwsubu_wx_u32mf2_mu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32mf2_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwsubu_wx_u32m1_mu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m1_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwsubu_wx_u32m2_mu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m2_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwsubu_wx_u32m4_mu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m4_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwsubu_wx_u32m8_mu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m8_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwsubu_wx_u64m1_mu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m1_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwsubu_wx_u64m2_mu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m2_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwsubu_wx_u64m4_mu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m4_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwsubu_wx_u64m8_mu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m8_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "68fcc3b789e91ba8cf2b1692ddb2596c81193cfa", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsubu_wx_mu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_mu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_mu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_mu-2.c?ref=9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwsubu_wx_u16mf4_mu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf4_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwsubu_wx_u16mf2_mu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf2_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwsubu_wx_u16m1_mu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m1_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwsubu_wx_u16m2_mu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m2_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwsubu_wx_u16m4_mu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m4_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwsubu_wx_u16m8_mu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m8_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwsubu_wx_u32mf2_mu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32mf2_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwsubu_wx_u32m1_mu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m1_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwsubu_wx_u32m2_mu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m2_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwsubu_wx_u32m4_mu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m4_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwsubu_wx_u32m8_mu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m8_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwsubu_wx_u64m1_mu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m1_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwsubu_wx_u64m2_mu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m2_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwsubu_wx_u64m4_mu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m4_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwsubu_wx_u64m8_mu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m8_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "a8f29a9dff68655bbc2795b674dc04ecd4066f07", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsubu_wx_mu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_mu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_mu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_mu-3.c?ref=9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwsubu_wx_u16mf4_mu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf4_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwsubu_wx_u16mf2_mu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf2_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwsubu_wx_u16m1_mu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m1_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwsubu_wx_u16m2_mu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m2_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwsubu_wx_u16m4_mu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m4_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwsubu_wx_u16m8_mu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m8_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwsubu_wx_u32mf2_mu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32mf2_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwsubu_wx_u32m1_mu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m1_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwsubu_wx_u32m2_mu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m2_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwsubu_wx_u32m4_mu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m4_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwsubu_wx_u32m8_mu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m8_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwsubu_wx_u64m1_mu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m1_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwsubu_wx_u64m2_mu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m2_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwsubu_wx_u64m4_mu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m4_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwsubu_wx_u64m8_mu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m8_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "6b5e8ae5d808358e128148bd437929f5b87cbebf", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsubu_wx_tu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_tu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_tu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_tu-1.c?ref=9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwsubu_wx_u16mf4_tu(vuint16mf4_t merge,vuint16mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf4_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwsubu_wx_u16mf2_tu(vuint16mf2_t merge,vuint16mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf2_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwsubu_wx_u16m1_tu(vuint16m1_t merge,vuint16m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m1_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwsubu_wx_u16m2_tu(vuint16m2_t merge,vuint16m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m2_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwsubu_wx_u16m4_tu(vuint16m4_t merge,vuint16m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m4_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwsubu_wx_u16m8_tu(vuint16m8_t merge,vuint16m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m8_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwsubu_wx_u32mf2_tu(vuint32mf2_t merge,vuint32mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32mf2_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwsubu_wx_u32m1_tu(vuint32m1_t merge,vuint32m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m1_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwsubu_wx_u32m2_tu(vuint32m2_t merge,vuint32m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m2_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwsubu_wx_u32m4_tu(vuint32m4_t merge,vuint32m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m4_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwsubu_wx_u32m8_tu(vuint32m8_t merge,vuint32m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m8_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwsubu_wx_u64m1_tu(vuint64m1_t merge,vuint64m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m1_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwsubu_wx_u64m2_tu(vuint64m2_t merge,vuint64m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m2_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwsubu_wx_u64m4_tu(vuint64m4_t merge,vuint64m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m4_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwsubu_wx_u64m8_tu(vuint64m8_t merge,vuint64m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m8_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "07cfee7b0c72fc444ed71e48763ad470369df92b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsubu_wx_tu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_tu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_tu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_tu-2.c?ref=9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwsubu_wx_u16mf4_tu(vuint16mf4_t merge,vuint16mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf4_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwsubu_wx_u16mf2_tu(vuint16mf2_t merge,vuint16mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf2_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwsubu_wx_u16m1_tu(vuint16m1_t merge,vuint16m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m1_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwsubu_wx_u16m2_tu(vuint16m2_t merge,vuint16m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m2_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwsubu_wx_u16m4_tu(vuint16m4_t merge,vuint16m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m4_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwsubu_wx_u16m8_tu(vuint16m8_t merge,vuint16m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m8_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwsubu_wx_u32mf2_tu(vuint32mf2_t merge,vuint32mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32mf2_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwsubu_wx_u32m1_tu(vuint32m1_t merge,vuint32m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m1_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwsubu_wx_u32m2_tu(vuint32m2_t merge,vuint32m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m2_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwsubu_wx_u32m4_tu(vuint32m4_t merge,vuint32m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m4_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwsubu_wx_u32m8_tu(vuint32m8_t merge,vuint32m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m8_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwsubu_wx_u64m1_tu(vuint64m1_t merge,vuint64m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m1_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwsubu_wx_u64m2_tu(vuint64m2_t merge,vuint64m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m2_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwsubu_wx_u64m4_tu(vuint64m4_t merge,vuint64m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m4_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwsubu_wx_u64m8_tu(vuint64m8_t merge,vuint64m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m8_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "c8d1ccb1c56fcceee0ae720d0705573da060a78e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsubu_wx_tu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_tu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_tu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_tu-3.c?ref=9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwsubu_wx_u16mf4_tu(vuint16mf4_t merge,vuint16mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf4_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwsubu_wx_u16mf2_tu(vuint16mf2_t merge,vuint16mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf2_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwsubu_wx_u16m1_tu(vuint16m1_t merge,vuint16m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m1_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwsubu_wx_u16m2_tu(vuint16m2_t merge,vuint16m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m2_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwsubu_wx_u16m4_tu(vuint16m4_t merge,vuint16m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m4_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwsubu_wx_u16m8_tu(vuint16m8_t merge,vuint16m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m8_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwsubu_wx_u32mf2_tu(vuint32mf2_t merge,vuint32mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32mf2_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwsubu_wx_u32m1_tu(vuint32m1_t merge,vuint32m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m1_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwsubu_wx_u32m2_tu(vuint32m2_t merge,vuint32m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m2_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwsubu_wx_u32m4_tu(vuint32m4_t merge,vuint32m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m4_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwsubu_wx_u32m8_tu(vuint32m8_t merge,vuint32m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m8_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwsubu_wx_u64m1_tu(vuint64m1_t merge,vuint64m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m1_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwsubu_wx_u64m2_tu(vuint64m2_t merge,vuint64m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m2_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwsubu_wx_u64m4_tu(vuint64m4_t merge,vuint64m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m4_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwsubu_wx_u64m8_tu(vuint64m8_t merge,vuint64m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m8_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "7e5ed5faabee27de1f3467c64ab372d76ff6b478", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsubu_wx_tum-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_tum-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_tum-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_tum-1.c?ref=9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwsubu_wx_u16mf4_tum(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf4_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwsubu_wx_u16mf2_tum(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf2_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwsubu_wx_u16m1_tum(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m1_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwsubu_wx_u16m2_tum(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m2_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwsubu_wx_u16m4_tum(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m4_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwsubu_wx_u16m8_tum(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m8_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwsubu_wx_u32mf2_tum(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32mf2_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwsubu_wx_u32m1_tum(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m1_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwsubu_wx_u32m2_tum(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m2_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwsubu_wx_u32m4_tum(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m4_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwsubu_wx_u32m8_tum(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m8_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwsubu_wx_u64m1_tum(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m1_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwsubu_wx_u64m2_tum(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m2_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwsubu_wx_u64m4_tum(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m4_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwsubu_wx_u64m8_tum(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m8_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "1ba985e96fcd1376e5ebed0a27e41dc259dda3ec", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsubu_wx_tum-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_tum-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_tum-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_tum-2.c?ref=9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwsubu_wx_u16mf4_tum(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf4_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwsubu_wx_u16mf2_tum(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf2_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwsubu_wx_u16m1_tum(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m1_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwsubu_wx_u16m2_tum(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m2_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwsubu_wx_u16m4_tum(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m4_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwsubu_wx_u16m8_tum(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m8_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwsubu_wx_u32mf2_tum(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32mf2_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwsubu_wx_u32m1_tum(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m1_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwsubu_wx_u32m2_tum(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m2_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwsubu_wx_u32m4_tum(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m4_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwsubu_wx_u32m8_tum(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m8_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwsubu_wx_u64m1_tum(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m1_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwsubu_wx_u64m2_tum(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m2_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwsubu_wx_u64m4_tum(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m4_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwsubu_wx_u64m8_tum(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m8_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "2d367ef5c0fda0f46a88e41ff7d148872f8404f3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsubu_wx_tum-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_tum-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_tum-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_tum-3.c?ref=9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwsubu_wx_u16mf4_tum(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf4_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwsubu_wx_u16mf2_tum(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf2_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwsubu_wx_u16m1_tum(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m1_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwsubu_wx_u16m2_tum(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m2_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwsubu_wx_u16m4_tum(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m4_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwsubu_wx_u16m8_tum(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m8_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwsubu_wx_u32mf2_tum(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32mf2_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwsubu_wx_u32m1_tum(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m1_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwsubu_wx_u32m2_tum(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m2_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwsubu_wx_u32m4_tum(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m4_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwsubu_wx_u32m8_tum(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m8_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwsubu_wx_u64m1_tum(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m1_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwsubu_wx_u64m2_tum(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m2_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwsubu_wx_u64m4_tum(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m4_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwsubu_wx_u64m8_tum(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m8_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "98b345e9161b263f109f84784fd5d7779add7294", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsubu_wx_tumu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_tumu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_tumu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_tumu-1.c?ref=9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwsubu_wx_u16mf4_tumu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf4_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwsubu_wx_u16mf2_tumu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf2_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwsubu_wx_u16m1_tumu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m1_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwsubu_wx_u16m2_tumu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m2_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwsubu_wx_u16m4_tumu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m4_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwsubu_wx_u16m8_tumu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m8_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwsubu_wx_u32mf2_tumu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32mf2_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwsubu_wx_u32m1_tumu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m1_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwsubu_wx_u32m2_tumu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m2_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwsubu_wx_u32m4_tumu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m4_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwsubu_wx_u32m8_tumu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m8_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwsubu_wx_u64m1_tumu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m1_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwsubu_wx_u64m2_tumu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m2_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwsubu_wx_u64m4_tumu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m4_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwsubu_wx_u64m8_tumu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m8_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "e70a1b92e1b960308f911a1395aa23d2ed978bcc", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsubu_wx_tumu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_tumu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_tumu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_tumu-2.c?ref=9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwsubu_wx_u16mf4_tumu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf4_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwsubu_wx_u16mf2_tumu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf2_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwsubu_wx_u16m1_tumu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m1_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwsubu_wx_u16m2_tumu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m2_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwsubu_wx_u16m4_tumu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m4_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwsubu_wx_u16m8_tumu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m8_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwsubu_wx_u32mf2_tumu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32mf2_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwsubu_wx_u32m1_tumu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m1_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwsubu_wx_u32m2_tumu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m2_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwsubu_wx_u32m4_tumu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m4_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwsubu_wx_u32m8_tumu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m8_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwsubu_wx_u64m1_tumu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m1_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwsubu_wx_u64m2_tumu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m2_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwsubu_wx_u64m4_tumu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m4_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwsubu_wx_u64m8_tumu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m8_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "e47c4fe0329163fe321ab6ff9f856afda7a6e8c4", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwsubu_wx_tumu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_tumu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_tumu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwsubu_wx_tumu-3.c?ref=9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwsubu_wx_u16mf4_tumu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf4_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwsubu_wx_u16mf2_tumu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16mf2_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwsubu_wx_u16m1_tumu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m1_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwsubu_wx_u16m2_tumu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m2_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwsubu_wx_u16m4_tumu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m4_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwsubu_wx_u16m8_tumu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u16m8_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwsubu_wx_u32mf2_tumu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32mf2_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwsubu_wx_u32m1_tumu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m1_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwsubu_wx_u32m2_tumu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m2_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwsubu_wx_u32m4_tumu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m4_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwsubu_wx_u32m8_tumu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u32m8_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwsubu_wx_u64m1_tumu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m1_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwsubu_wx_u64m2_tumu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m2_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwsubu_wx_u64m4_tumu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m4_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwsubu_wx_u64m8_tumu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vwsubu_wx_u64m8_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwsubu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}]}