{"sha": "1f8aec0030448f6a432414ebde4d610ab73b19db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY4YWVjMDAzMDQ0OGY2YTQzMjQxNGViZGU0ZDYxMGFiNzNiMTlkYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-02-12T17:36:58Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-02-12T17:36:58Z"}, "message": "re PR c++/56291 (ICE for C++11 in output_constructor_regular_field, at varasm.c:4821)\n\n\tPR c++/56291\n\t* semantics.c (sort_constexpr_mem_initializers): Handle\n\tvptr out of order.\n\nFrom-SVN: r195986", "tree": {"sha": "1c7b1a72ec37a3de802956d092fbf0c696470590", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c7b1a72ec37a3de802956d092fbf0c696470590"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f8aec0030448f6a432414ebde4d610ab73b19db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f8aec0030448f6a432414ebde4d610ab73b19db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f8aec0030448f6a432414ebde4d610ab73b19db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f8aec0030448f6a432414ebde4d610ab73b19db/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bf94424ce151e33c75157aea2428977df01590e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf94424ce151e33c75157aea2428977df01590e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf94424ce151e33c75157aea2428977df01590e8"}], "stats": {"total": 56, "additions": 44, "deletions": 12}, "files": [{"sha": "0d4d5cfb27bbfbad131c66ccbee385cabc4c6903", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8aec0030448f6a432414ebde4d610ab73b19db/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8aec0030448f6a432414ebde4d610ab73b19db/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1f8aec0030448f6a432414ebde4d610ab73b19db", "patch": "@@ -1,3 +1,9 @@\n+2013-02-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/56291\n+\t* semantics.c (sort_constexpr_mem_initializers): Handle\n+\tvptr out of order.\n+\n 2013-02-09  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/56268"}, {"sha": "e31ae301b8ed4ec85c0b1f612a51b62878e656af", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8aec0030448f6a432414ebde4d610ab73b19db/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8aec0030448f6a432414ebde4d610ab73b19db/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=1f8aec0030448f6a432414ebde4d610ab73b19db", "patch": "@@ -5948,31 +5948,39 @@ check_constexpr_ctor_body (tree last, tree list)\n /* V is a vector of constructor elements built up for the base and member\n    initializers of a constructor for TYPE.  They need to be in increasing\n    offset order, which they might not be yet if TYPE has a primary base\n-   which is not first in the base-clause.  */\n+   which is not first in the base-clause or a vptr and at least one base\n+   all of which are non-primary.  */\n \n static vec<constructor_elt, va_gc> *\n sort_constexpr_mem_initializers (tree type, vec<constructor_elt, va_gc> *v)\n {\n   tree pri = CLASSTYPE_PRIMARY_BINFO (type);\n+  tree field_type;\n   constructor_elt elt;\n   int i;\n \n-  if (pri == NULL_TREE\n-      || pri == BINFO_BASE_BINFO (TYPE_BINFO (type), 0))\n+  if (pri)\n+    field_type = BINFO_TYPE (pri);\n+  else if (TYPE_CONTAINS_VPTR_P (type))\n+    field_type = vtbl_ptr_type_node;\n+  else\n     return v;\n \n-  /* Find the element for the primary base and move it to the beginning of\n-     the vec.  */\n+  /* Find the element for the primary base or vptr and move it to the\n+     beginning of the vec.  */\n   vec<constructor_elt, va_gc> &vref = *v;\n-  pri = BINFO_TYPE (pri);\n-  for (i = 1; ; ++i)\n-    if (TREE_TYPE (vref[i].index) == pri)\n+  for (i = 0; ; ++i)\n+    if (TREE_TYPE (vref[i].index) == field_type)\n       break;\n \n-  elt = vref[i];\n-  for (; i > 0; --i)\n-    vref[i] = vref[i-1];\n-  vref[0] = elt;\n+  if (i > 0)\n+    {\n+      elt = vref[i];\n+      for (; i > 0; --i)\n+\tvref[i] = vref[i-1];\n+      vref[0] = elt;\n+    }\n+\n   return v;\n }\n "}, {"sha": "32cee9698415f52b65c0b6e6f4e85ff97fb34fa7", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-virtual4.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8aec0030448f6a432414ebde4d610ab73b19db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-virtual4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8aec0030448f6a432414ebde4d610ab73b19db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-virtual4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-virtual4.C?ref=1f8aec0030448f6a432414ebde4d610ab73b19db", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/56291\n+// { dg-options -std=c++11 }\n+\n+class Base\n+{\n+public:\n+ constexpr Base() : v(1) {};\n+ int v;\n+};\n+\n+class Derived : public Base\n+{\n+public:\n+ constexpr Derived() : Base() {};\n+ virtual void function();\n+};\n+\n+Derived d;"}]}