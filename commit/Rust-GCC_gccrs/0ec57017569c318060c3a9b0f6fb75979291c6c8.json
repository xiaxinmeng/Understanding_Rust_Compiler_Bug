{"sha": "0ec57017569c318060c3a9b0f6fb75979291c6c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVjNTcwMTc1NjljMzE4MDYwYzNhOWIwZjZmYjc1OTc5MjkxYzZjOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-08-27T01:41:17Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-08-27T01:41:17Z"}, "message": "Stop sharing binfos for indirect virtual bases.\n\n\t* tree.c (propagate_binfo_offsets): Unshare vbases, too.\n\t(layout_basetypes): Likewise.\n\t(unshare_base_binfos): Copy vbases, too.\n\t* cp-tree.h (BINFO_VIA_PUBLIC, BINFO_BASEINIT_MARKED,\n\tBINFO_VBASE_INIT_MARKED): Remove obsolete macros.\n\t(BINFO_PUSHDECLS_MARKED, SET_BINFO_PUSHDECLS_MARKED,\n\tCLEAR_BINFO_PUSHDECLS_MARKED): New macros.\n\t* search.c (lookup_field, lookup_fnfields, lookup_member): Remove\n\treference to BINFO_VIA_PUBLIC.\n\t(marked_pushdecls_p, unmarked_pushdecls_p): New fns.\n\t(push_class_decls): Use them.\n\t(dfs_pushdecls): Use SET_BINFO_PUSHDECLS_MARKED.\n\t(dfs_compress_decls): Use CLEAR_BINFO_PUSHDECLS_MARKED.\n\nFrom-SVN: r22017", "tree": {"sha": "9aeb96010eb77e1a52847d09d87204cb2f6a7c79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9aeb96010eb77e1a52847d09d87204cb2f6a7c79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ec57017569c318060c3a9b0f6fb75979291c6c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ec57017569c318060c3a9b0f6fb75979291c6c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ec57017569c318060c3a9b0f6fb75979291c6c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ec57017569c318060c3a9b0f6fb75979291c6c8/comments", "author": null, "committer": null, "parents": [{"sha": "1ca7641e55b83022d3374d71a69f27003e52b8c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ca7641e55b83022d3374d71a69f27003e52b8c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ca7641e55b83022d3374d71a69f27003e52b8c3"}], "stats": {"total": 96, "additions": 56, "deletions": 40}, "files": [{"sha": "0f546a2730c996f39efa243a05407ee221f7d5d2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ec57017569c318060c3a9b0f6fb75979291c6c8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ec57017569c318060c3a9b0f6fb75979291c6c8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0ec57017569c318060c3a9b0f6fb75979291c6c8", "patch": "@@ -1,3 +1,20 @@\n+1998-08-27  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\tStop sharing binfos for indirect virtual bases.\n+\t* tree.c (propagate_binfo_offsets): Unshare vbases, too.\n+\t(layout_basetypes): Likewise.\n+\t(unshare_base_binfos): Copy vbases, too.\n+\t* cp-tree.h (BINFO_VIA_PUBLIC, BINFO_BASEINIT_MARKED,\n+\tBINFO_VBASE_INIT_MARKED): Remove obsolete macros.\n+\t(BINFO_PUSHDECLS_MARKED, SET_BINFO_PUSHDECLS_MARKED,\n+\tCLEAR_BINFO_PUSHDECLS_MARKED): New macros.\n+\t* search.c (lookup_field, lookup_fnfields, lookup_member): Remove\n+\treference to BINFO_VIA_PUBLIC.\n+\t(marked_pushdecls_p, unmarked_pushdecls_p): New fns.\n+\t(push_class_decls): Use them.\n+\t(dfs_pushdecls): Use SET_BINFO_PUSHDECLS_MARKED.\n+\t(dfs_compress_decls): Use CLEAR_BINFO_PUSHDECLS_MARKED.\n+\n 1998-08-27  Mark Mitchell  <mark@markmitchell.com>\n \n \t* decl.c (build_enumerator): Set DECL_CONTEXT for the"}, {"sha": "85d983cca3ae4e77cde7f3b812e0ab7036174f4e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ec57017569c318060c3a9b0f6fb75979291c6c8/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ec57017569c318060c3a9b0f6fb75979291c6c8/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0ec57017569c318060c3a9b0f6fb75979291c6c8", "patch": "@@ -42,17 +42,18 @@ Boston, MA 02111-1307, USA.  */\n       TYPE_USES_COMPLEX_INHERITANCE (in _TYPE).\n       C_DECLARED_LABEL_FLAG.\n    2: IDENTIFIER_OPNAME_P.\n+      BINFO_VBASE_MARKED.\n       BINFO_FIELDS_MARKED.\n       TYPE_VIRTUAL_P.\n       PARM_DECL_EXPR (in SAVE_EXPR).\n    3: TYPE_USES_VIRTUAL_BASECLASSES (in a class TYPE).\n       BINFO_VTABLE_PATH_MARKED.\n+      BINFO_PUSHDECLS_MARKED.\n       (TREE_REFERENCE_EXPR) (in NON_LVALUE_EXPR) (commented-out).\n    4: BINFO_NEW_VTABLE_MARKED.\n       TREE_HAS_CONSTRUCTOR (in INDIRECT_REF, SAVE_EXPR, CONSTRUCTOR,\n           or FIELD_DECL).\n-   5: BINFO_VIA_PUBLIC.\n-      BINFO_VBASE_INIT_MARKED.\n+   5: Not used.\n    6: Not used.\n \n    Usage of TYPE_LANG_FLAG_?:\n@@ -965,10 +966,6 @@ struct lang_type\n \f\n /* Additional macros for inheritance information.  */\n \n-/* When following an binfo-specific chain, this is the cumulative\n-   via-public flag.  */\n-#define BINFO_VIA_PUBLIC(NODE) TREE_LANG_FLAG_5 (NODE)\n-\n #ifdef MI_MATRIX\n /* When building a matrix to determine by a single lookup\n    whether one class is derived from another or not,\n@@ -985,12 +982,6 @@ struct lang_type\n #define SET_BINFO_MARKED(NODE) (TREE_VIA_VIRTUAL(NODE)?SET_CLASSTYPE_MARKED(BINFO_TYPE(NODE)):(TREE_LANG_FLAG_0(NODE)=1))\n #define CLEAR_BINFO_MARKED(NODE) (TREE_VIA_VIRTUAL(NODE)?CLEAR_CLASSTYPE_MARKED(BINFO_TYPE(NODE)):(TREE_LANG_FLAG_0(NODE)=0))\n \n-/* Nonzero means marked in building initialization list.  */\n-#define BINFO_BASEINIT_MARKED(NODE) CLASSTYPE_MARKED2 (BINFO_TYPE (NODE))\n-/* Modifier macros */\n-#define SET_BINFO_BASEINIT_MARKED(NODE) SET_CLASSTYPE_MARKED2 (BINFO_TYPE (NODE))\n-#define CLEAR_BINFO_BASEINIT_MARKED(NODE) CLEAR_CLASSTYPE_MARKED2 (BINFO_TYPE (NODE))\n-\n /* Nonzero means marked in search through virtual inheritance hierarchy.  */\n #define BINFO_VBASE_MARKED(NODE) CLASSTYPE_MARKED2 (BINFO_TYPE (NODE))\n /* Modifier macros */\n@@ -1015,11 +1006,10 @@ struct lang_type\n #define SET_BINFO_NEW_VTABLE_MARKED(NODE) (TREE_VIA_VIRTUAL(NODE)?SET_CLASSTYPE_MARKED4(BINFO_TYPE(NODE)):(TREE_LANG_FLAG_4(NODE)=1))\n #define CLEAR_BINFO_NEW_VTABLE_MARKED(NODE) (TREE_VIA_VIRTUAL(NODE)?CLEAR_CLASSTYPE_MARKED4(BINFO_TYPE(NODE)):(TREE_LANG_FLAG_4(NODE)=0))\n \n-/* Nonzero means this class has initialized its virtual baseclasses.  */\n-#define BINFO_VBASE_INIT_MARKED(NODE) \\\n-  (TREE_VIA_VIRTUAL(NODE)?CLASSTYPE_MARKED5(BINFO_TYPE(NODE)):TREE_LANG_FLAG_5(NODE))\n-#define SET_BINFO_VBASE_INIT_MARKED(NODE) (TREE_VIA_VIRTUAL(NODE)?SET_CLASSTYPE_MARKED5(BINFO_TYPE(NODE)):(TREE_LANG_FLAG_5(NODE)=1))\n-#define CLEAR_BINFO_VBASE_INIT_MARKED(NODE) (TREE_VIA_VIRTUAL(NODE)?CLEAR_CLASSTYPE_MARKED5(BINFO_TYPE(NODE)):(TREE_LANG_FLAG_5(NODE)=0))\n+/* Nonzero means this class has done dfs_pushdecls.  */\n+#define BINFO_PUSHDECLS_MARKED(NODE) BINFO_VTABLE_PATH_MARKED (NODE)\n+#define SET_BINFO_PUSHDECLS_MARKED(NODE) SET_BINFO_VTABLE_PATH_MARKED (NODE)\n+#define CLEAR_BINFO_PUSHDECLS_MARKED(NODE) CLEAR_BINFO_VTABLE_PATH_MARKED (NODE)\n \f\n /* Accessor macros for the vfield slots in structures.  */\n "}, {"sha": "1d0f1c34920e986f24ca60fc7536c085e29a1967", "filename": "gcc/cp/search.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ec57017569c318060c3a9b0f6fb75979291c6c8/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ec57017569c318060c3a9b0f6fb75979291c6c8/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=0ec57017569c318060c3a9b0f6fb75979291c6c8", "patch": "@@ -1223,7 +1223,6 @@ lookup_field (xbasetype, name, protect, want_type)\n     {\n       type = xbasetype;\n       basetype_path = TYPE_BINFO (type);\n-      BINFO_VIA_PUBLIC (basetype_path) = 1;\n       BINFO_INHERITANCE_CHAIN (basetype_path) = NULL_TREE;\n     }\n   else\n@@ -1852,7 +1851,6 @@ lookup_fnfields (basetype_path, name, complain)\n     {\n       basetype_chain = CLASSTYPE_BINFO_AS_LIST (type);\n       TREE_VIA_PUBLIC (basetype_chain) = 1;\n-      BINFO_VIA_PUBLIC (basetype_path) = 1;\n       BINFO_INHERITANCE_CHAIN (basetype_path) = NULL_TREE;\n     }\n   else\n@@ -2018,7 +2016,6 @@ lookup_member (xbasetype, name, protect, want_type)\n   else if (IS_AGGR_TYPE_CODE (TREE_CODE (xbasetype)))\n     {\n       basetype_path = TYPE_BINFO (xbasetype);\n-      BINFO_VIA_PUBLIC (basetype_path) = 1;\n       BINFO_INHERITANCE_CHAIN (basetype_path) = NULL_TREE;\n     }\n   else\n@@ -2652,6 +2649,10 @@ static int marked_new_vtablep (binfo) tree binfo;\n { return BINFO_NEW_VTABLE_MARKED (binfo); }\n static int unmarked_new_vtablep (binfo) tree binfo;\n { return BINFO_NEW_VTABLE_MARKED (binfo) == 0; }\n+static int marked_pushdecls_p (binfo) tree binfo;\n+{ return BINFO_PUSHDECLS_MARKED (binfo); }\n+static int unmarked_pushdecls_p (binfo) tree binfo;\n+{ return BINFO_PUSHDECLS_MARKED (binfo) == 0; }\n \n #if 0\n static int dfs_search_slot_nonempty_p (binfo) tree binfo;\n@@ -3611,7 +3612,10 @@ dfs_pushdecls (binfo)\n \t  methods++;\n \t}\n     }\n-  SET_BINFO_MARKED (binfo);\n+\n+  /* We can't just use BINFO_MARKED because envelope_add_decl uses\n+     DERIVED_FROM_P, which calls get_base_distance.  */\n+  SET_BINFO_PUSHDECLS_MARKED (binfo);\n }\n \n /* Consolidate unique (by name) member functions.  */\n@@ -3653,7 +3657,7 @@ dfs_compress_decls (binfo)\n \t    }\n \t}\n     }\n-  CLEAR_BINFO_MARKED (binfo);\n+  CLEAR_BINFO_PUSHDECLS_MARKED (binfo);\n }\n \n /* When entering the scope of a class, we cache all of the\n@@ -3671,11 +3675,11 @@ push_class_decls (type)\n   search_stack = push_search_level (search_stack, &search_obstack);\n \n   /* Push class fields into CLASS_VALUE scope, and mark.  */\n-  dfs_walk (TYPE_BINFO (type), dfs_pushdecls, unmarkedp);\n+  dfs_walk (TYPE_BINFO (type), dfs_pushdecls, unmarked_pushdecls_p);\n \n   /* Compress fields which have only a single entry\n      by a given name, and unmark.  */\n-  dfs_walk (TYPE_BINFO (type), dfs_compress_decls, markedp);\n+  dfs_walk (TYPE_BINFO (type), dfs_compress_decls, marked_pushdecls_p);\n \n   /* Open up all the closed envelopes and push the contained decls into\n      class scope.  */"}, {"sha": "6f33ec86d10b029b1110d340e500da4890424490", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ec57017569c318060c3a9b0f6fb75979291c6c8/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ec57017569c318060c3a9b0f6fb75979291c6c8/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=0ec57017569c318060c3a9b0f6fb75979291c6c8", "patch": "@@ -584,7 +584,10 @@ propagate_binfo_offsets (binfo, offset)\n       tree base_binfo = TREE_VEC_ELT (binfos, i);\n \n       if (TREE_VIA_VIRTUAL (base_binfo))\n-\ti += 1;\n+\t{\n+\t  i += 1;\n+\t  unshare_base_binfos (base_binfo);\n+\t}\t  \n       else\n \t{\n \t  int j;\n@@ -639,16 +642,16 @@ unshare_base_binfos (base_binfo)\n \t   j >= 0; j--)\n \t{\n \t  tree base_base_binfo = TREE_VEC_ELT (base_binfos, j);\n-\t  if (! TREE_VIA_VIRTUAL (base_base_binfo))\n-\t    TREE_VEC_ELT (base_binfos, j)\n-\t      = make_binfo (BINFO_OFFSET (base_base_binfo),\n-\t\t\t    base_base_binfo,\n-\t\t\t    BINFO_VTABLE (base_base_binfo),\n-\t\t\t    BINFO_VIRTUALS (base_base_binfo),\n-\t\t\t    chain);\n+\t  TREE_VEC_ELT (base_binfos, j)\n+\t    = make_binfo (BINFO_OFFSET (base_base_binfo),\n+\t\t\t  base_base_binfo,\n+\t\t\t  BINFO_VTABLE (base_base_binfo),\n+\t\t\t  BINFO_VIRTUALS (base_base_binfo),\n+\t\t\t  chain);\n \t  chain = TREE_VEC_ELT (base_binfos, j);\n \t  TREE_VIA_PUBLIC (chain) = TREE_VIA_PUBLIC (base_base_binfo);\n \t  TREE_VIA_PROTECTED (chain) = TREE_VIA_PROTECTED (base_base_binfo);\n+\t  TREE_VIA_VIRTUAL (chain) = TREE_VIA_VIRTUAL (base_base_binfo);\n \t  BINFO_INHERITANCE_CHAIN (chain) = base_binfo;\n \t}\n \n@@ -754,14 +757,16 @@ layout_basetypes (rec, max)\n       tree field = TYPE_FIELDS (rec);\n \n       if (TREE_VIA_VIRTUAL (base_binfo))\n-\tcontinue;\n-\n-      my_friendly_assert (TREE_TYPE (field) == basetype, 23897);\n-      BINFO_OFFSET (base_binfo)\n-\t= size_int (CEIL (TREE_INT_CST_LOW (DECL_FIELD_BITPOS (field)),\n-\t\t\t  BITS_PER_UNIT));\n-      unshare_base_binfos (base_binfo);\n-      TYPE_FIELDS (rec) = TREE_CHAIN (field);\n+\tunshare_base_binfos (base_binfo);\n+      else\n+\t{\n+\t  my_friendly_assert (TREE_TYPE (field) == basetype, 23897);\n+\t  BINFO_OFFSET (base_binfo)\n+\t    = size_int (CEIL (TREE_INT_CST_LOW (DECL_FIELD_BITPOS (field)),\n+\t\t\t      BITS_PER_UNIT));\n+\t  unshare_base_binfos (base_binfo);\n+\t  TYPE_FIELDS (rec) = TREE_CHAIN (field);\n+\t}\n     }\n \n   for (vbase_types = CLASSTYPE_VBASECLASSES (rec); vbase_types;"}]}