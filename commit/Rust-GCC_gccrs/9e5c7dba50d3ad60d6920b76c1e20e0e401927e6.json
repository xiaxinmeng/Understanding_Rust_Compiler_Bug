{"sha": "9e5c7dba50d3ad60d6920b76c1e20e0e401927e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU1YzdkYmE1MGQzYWQ2MGQ2OTIwYjc2YzFlMjBlMGU0MDE5MjdlNg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-12-12T23:16:35Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-12-12T23:16:35Z"}, "message": "Named locale support for ctype<char>.\n\n\n2001-12-12  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tNamed locale support for ctype<char>.\n\t* config/locale/c_locale_gnu.h (_GLIBCPP_C_LOCALE_GNU): New.\n\t* config/os/gnu-linux/bits/ctype_noninline.h (ctype<char>): Add\n\tdefinitions for alternate constructor.\n\t* config/os/solaris/solaris2.7/bits/ctype_noninline.h (ctype): Same.\n\t* config/os/solaris/solaris2.6/bits/ctype_noninline.h (ctype): Same.\n\t* config/os/solaris/solaris2.5/bits/ctype_noninline.h (ctype): Same.\n\t* config/os/newlib/bits/ctype_noninline.h (ctype): Same.\n\t* config/os/irix/irix6.5/bits/ctype_noninline.h (ctype): Same.\n\t* config/os/irix/irix5.2/bits/ctype_noninline.h (ctype): Same.\n\t* config/os/hpux/bits/ctype_noninline.h (ctype): Same.\n\t* config/os/generic/bits/ctype_noninline.h (ctype): Same.\n\t* config/os/djgpp/bits/ctype_noninline.h (ctype): Same.\n\t* config/os/bsd/netbsd/bits/ctype_noninline.h (ctype): Same.\n\t* config/os/bsd/freebsd/bits/ctype_noninline.h (ctype): Same.\n\t* config/os/aix/bits/ctype_noninline.h (ctype): Same.\n\t* include/bits/locale_facets.h (ctype<_CharT>): Remove dummy\n\tdefinitions for all virtual functions. These are now explicitly\n\tundefined for non-required factets, ie any non-char, non-wchar_t\n\tinstantiations.\n\t* src/localename.cc (locale::_Impl::_Impl(string, size_t): Named\n\tlocales use alternate constructor for ctype facet.\n\t* include/bits/locale_facets.h (ctype<char>::ctype(__c_locale, const\n\tmask*, bool, size_t): Add.\n\t(ctype<wchar_t>::ctype(__c_locale, size_t): Add.\n\t* src/locale.cc (ctype<wchar_t>::ctype(__c_locale, size_t)): Add\n\tdefinition.\n\n\t* testsuite/22_locale/ctype_members_char.cc (test02): Add, mark\n\tXFAIL for non-gnu locale models.\n\nFrom-SVN: r47953", "tree": {"sha": "730003a3ac41256c22a9fa2ccf2908348ac6572c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/730003a3ac41256c22a9fa2ccf2908348ac6572c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/comments", "author": null, "committer": null, "parents": [{"sha": "63de15a4b4f6f9e9422f21289ebe12a06c8fe30a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63de15a4b4f6f9e9422f21289ebe12a06c8fe30a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63de15a4b4f6f9e9422f21289ebe12a06c8fe30a"}], "stats": {"total": 402, "additions": 298, "deletions": 104}, "files": [{"sha": "3ce299eebb0b6bfd6e29ba8f1e811859283dfb64", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9e5c7dba50d3ad60d6920b76c1e20e0e401927e6", "patch": "@@ -1,3 +1,36 @@\n+2001-12-12  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tNamed locale support for ctype<char>.\n+\t* config/locale/c_locale_gnu.h (_GLIBCPP_C_LOCALE_GNU): New.\n+\t* config/os/gnu-linux/bits/ctype_noninline.h (ctype<char>): Add\n+\tdefinitions for alternate constructor.\n+\t* config/os/solaris/solaris2.7/bits/ctype_noninline.h (ctype): Same.\n+\t* config/os/solaris/solaris2.6/bits/ctype_noninline.h (ctype): Same.\n+\t* config/os/solaris/solaris2.5/bits/ctype_noninline.h (ctype): Same.\n+\t* config/os/newlib/bits/ctype_noninline.h (ctype): Same.\n+\t* config/os/irix/irix6.5/bits/ctype_noninline.h (ctype): Same.\n+\t* config/os/irix/irix5.2/bits/ctype_noninline.h (ctype): Same.\n+\t* config/os/hpux/bits/ctype_noninline.h (ctype): Same.\n+\t* config/os/generic/bits/ctype_noninline.h (ctype): Same.\n+\t* config/os/djgpp/bits/ctype_noninline.h (ctype): Same.\n+\t* config/os/bsd/netbsd/bits/ctype_noninline.h (ctype): Same.\n+\t* config/os/bsd/freebsd/bits/ctype_noninline.h (ctype): Same.\n+\t* config/os/aix/bits/ctype_noninline.h (ctype): Same.\n+\t* include/bits/locale_facets.h (ctype<_CharT>): Remove dummy\n+\tdefinitions for all virtual functions. These are now explicitly\n+\tundefined for non-required factets, ie any non-char, non-wchar_t\n+\tinstantiations.\n+\t* src/localename.cc (locale::_Impl::_Impl(string, size_t): Named\n+\tlocales use alternate constructor for ctype facet.\n+\t* include/bits/locale_facets.h (ctype<char>::ctype(__c_locale, const\n+\tmask*, bool, size_t): Add.\n+\t(ctype<wchar_t>::ctype(__c_locale, size_t): Add.\n+\t* src/locale.cc (ctype<wchar_t>::ctype(__c_locale, size_t)): Add\n+\tdefinition.\n+\n+\t* testsuite/22_locale/ctype_members_char.cc (test02): Add, mark\n+\tXFAIL for non-gnu locale models.\n+\n 2001-12-12  Philip Martin  <philip@codematters.co.uk>\n             Ross Smith     <r-smith@ihug.co.nz>\n             Paolo Carlini  <pcarlini@unitus.it>"}, {"sha": "3ce1781e23be3092a01b0d51898015b53bb659ce", "filename": "libstdc++-v3/config/locale/c_locale_gnu.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_gnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_gnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_gnu.h?ref=9e5c7dba50d3ad60d6920b76c1e20e0e401927e6", "patch": "@@ -38,12 +38,9 @@\n #include <iconv.h>\t\t// For codecvt using iconv, iconv_t\n #include <libintl.h> \t\t// For messages\n \n+#define _GLIBCPP_C_LOCALE_GNU 1\n+\n namespace std\n {\n   typedef __locale_t\t\t__c_locale;\n }\n-\n-\n-\n-\n-"}, {"sha": "2e13e3f59885b80c04ae149600859842f35079a3", "filename": "libstdc++-v3/config/os/aix/bits/ctype_noninline.h", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fbits%2Fctype_noninline.h?ref=9e5c7dba50d3ad60d6920b76c1e20e0e401927e6", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,11 +33,18 @@\n   \n // Information as gleaned from /usr/include/ctype.h\n   \n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n+\t\t     size_t __refs) \n+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(NULL), _M_tolower(NULL),\n+  _M_ctable(NULL), _M_table(__table == 0 ? _M_ctable: __table) \n+  { }\n+\n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-    : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n-      _M_toupper(NULL), _M_tolower(NULL),\n-      _M_ctable(NULL), _M_table(__table == 0 ? _M_ctable: __table) \n-    { }\n+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(NULL), _M_tolower(NULL),\n+  _M_ctable(NULL), _M_table(__table == 0 ? _M_ctable: __table) \n+  { }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "3aee4dabe3f7623cc638c854eb1f7214f051603f", "filename": "libstdc++-v3/config/os/bsd/freebsd/bits/ctype_noninline.h", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fbits%2Fctype_noninline.h?ref=9e5c7dba50d3ad60d6920b76c1e20e0e401927e6", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,11 +33,18 @@\n   \n // Information as gleaned from /usr/include/ctype.h\n   \n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n+\t\t     size_t __refs) \n+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(NULL), _M_tolower(NULL),\n+  _M_ctable(NULL), _M_table(__table == 0 ? _M_ctable: __table) \n+  { }\n+\n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-    : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n-      _M_toupper(NULL), _M_tolower(NULL),\n-      _M_ctable(NULL), _M_table(__table == 0 ? _M_ctable: __table) \n-    { }\n+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(NULL), _M_tolower(NULL),\n+  _M_ctable(NULL), _M_table(__table == 0 ? _M_ctable: __table) \n+  { }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "dcadbbed26bd05bc6822c731832f4cbae777c1b1", "filename": "libstdc++-v3/config/os/bsd/netbsd/bits/ctype_noninline.h", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fbits%2Fctype_noninline.h?ref=9e5c7dba50d3ad60d6920b76c1e20e0e401927e6", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,11 +33,18 @@\n   \n // Information as gleaned from /usr/include/ctype.h\n   \n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n+\t\t     size_t __refs) \n+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(NULL), _M_tolower(NULL),\n+  _M_ctable(NULL), _M_table(__table == 0 ? (_ctype_ + 1) : __table) \n+  { }\n+\n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-    : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n-      _M_toupper(NULL), _M_tolower(NULL),\n-      _M_ctable(NULL), _M_table(__table == 0 ? (_ctype_ + 1) : __table) \n-    { }\n+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(NULL), _M_tolower(NULL),\n+  _M_ctable(NULL), _M_table(__table == 0 ? (_ctype_ + 1) : __table) \n+  { }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "2b075733a96a0692448fef9bc662baaf0a699480", "filename": "libstdc++-v3/config/os/djgpp/bits/ctype_noninline.h", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fbits%2Fctype_noninline.h?ref=9e5c7dba50d3ad60d6920b76c1e20e0e401927e6", "patch": "@@ -33,15 +33,19 @@\n   \n // Information as gleaned from DJGPP <ctype.h>\n \n+  ctype<char>::ctype(__c_locale, const mask* __table = 0, bool __del = false, \n+\t\t     size_t __refs = 0) \n+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(__dj_ctype_toupper), _M_tolower(__dj_ctype_tolower),\n+  _M_ctable(NULL), _M_table(__table == 0 ? __dj_ctype_flags : __table) \n+  { }\n+\n   ctype<char>::ctype(const mask* __table = 0, bool __del = false, \n-\tsize_t __refs = 0) \n-    : __ctype_abstract_base<char>(__refs), \n-      _M_del(__table != 0 && __del), \n-      _M_toupper(__dj_ctype_toupper), \n-      _M_tolower(__dj_ctype_tolower),\n-      _M_ctable(NULL), \n-      _M_table(__table == 0 ? __dj_ctype_flags : __table) \n-    { }\n+\t\t     size_t __refs = 0) \n+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(__dj_ctype_toupper), _M_tolower(__dj_ctype_tolower),\n+  _M_ctable(NULL), _M_table(__table == 0 ? __dj_ctype_flags : __table) \n+  { }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "2b629a6e01d4a457ad16ae7d5cd88f400c96e14c", "filename": "libstdc++-v3/config/os/generic/bits/ctype_noninline.h", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fctype_noninline.h?ref=9e5c7dba50d3ad60d6920b76c1e20e0e401927e6", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997-2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,11 +33,18 @@\n   \n // Information as gleaned from /usr/include/ctype.h\n   \n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n+\t\t     size_t __refs) \n+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(NULL), _M_tolower(NULL), _M_ctable(NULL), \n+  _M_table(__table == 0 ? _M_ctable : __table) \n+  { }\n+\n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-    : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n-      _M_toupper(NULL), _M_tolower(NULL),\n-      _M_ctable(NULL), _M_table(__table == 0 ? _M_ctable: __table) \n-    { }\n+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(NULL), _M_tolower(NULL), _M_ctable(NULL), \n+  _M_table(__table == 0 ? _M_ctable : __table) \n+  { }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "8ec057dfb4756410cb12164652fb38d50faafb8d", "filename": "libstdc++-v3/config/os/gnu-linux/bits/ctype_inline.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_inline.h?ref=9e5c7dba50d3ad60d6920b76c1e20e0e401927e6", "patch": "@@ -66,7 +66,3 @@\n       ++__low;\n     return __low;\n   }\n-\n-\n-\n-"}, {"sha": "54a56e09d9faf5d3bb0d4b276891fe82e5da3a55", "filename": "libstdc++-v3/config/os/gnu-linux/bits/ctype_noninline.h", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_noninline.h?ref=9e5c7dba50d3ad60d6920b76c1e20e0e401927e6", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997-2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,6 +39,24 @@\n   using _C_legacy::__ctype_b;\n #endif\n \n+#if _GLIBCPP_C_LOCALE_GNU\n+  ctype<char>::ctype(__c_locale __cloc, const mask* __table, bool __del, \n+\t\t     size_t __refs) \n+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(__cloc ? __cloc->__ctype_toupper : __ctype_toupper), \n+  _M_tolower(__cloc ? __cloc->__ctype_tolower : __ctype_tolower),\n+  _M_ctable(__ctype_b), \n+  _M_table(__table ? __table : (__cloc ? __cloc->__ctype_b : __ctype_b))\n+  { }\n+#else\n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n+\t\t     size_t __refs) \n+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(__ctype_toupper), _M_tolower(__ctype_tolower),\n+  _M_ctable(__ctype_b), _M_table(__table ? __table : __ctype_b)\n+  { }\n+#endif\n+\n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) : \n   __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(__ctype_toupper), _M_tolower(__ctype_tolower),"}, {"sha": "7dbaced5a1d54eb22318639cbea559c258868411", "filename": "libstdc++-v3/config/os/hpux/bits/ctype_noninline.h", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fbits%2Fctype_noninline.h?ref=9e5c7dba50d3ad60d6920b76c1e20e0e401927e6", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997-2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,11 +33,18 @@\n   \n // Information as gleaned from /usr/include/ctype.h\n   \n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n+\t\t     size_t __refs) \n+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(NULL), _M_tolower(NULL), _M_ctable(NULL), \n+  _M_table(__table == 0 ? _M_ctable: __table) \n+  { }\n+\n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-    : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n-      _M_toupper(NULL), _M_tolower(NULL),\n-      _M_ctable(NULL), _M_table(__table == 0 ? _M_ctable: __table) \n-    { }\n+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(NULL), _M_tolower(NULL), _M_ctable(NULL), \n+  _M_table(__table == 0 ? _M_ctable: __table) \n+  { }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "dbf13ee60d50b7466b634f6aa4673e45e9f91ac9", "filename": "libstdc++-v3/config/os/irix/irix5.2/bits/ctype_noninline.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fbits%2Fctype_noninline.h?ref=9e5c7dba50d3ad60d6920b76c1e20e0e401927e6", "patch": "@@ -33,10 +33,17 @@\n   \n // Information as gleaned from /usr/include/ctype.h\n \n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n+\t\t     size_t __refs)\n+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(NULL), _M_tolower(NULL), _M_ctable(NULL), \n+  _M_table(!__table ? __ctype : __table)\n+  { }\n+\n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n   : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n-    _M_toupper(NULL), _M_tolower(NULL), _M_ctable(NULL), \n-    _M_table(!__table ? __ctype : __table)\n+  _M_toupper(NULL), _M_tolower(NULL), _M_ctable(NULL), \n+  _M_table(!__table ? __ctype : __table)\n   { }\n \n   char"}, {"sha": "a2f5e10ec44704a01e93b65576fab567b35d694f", "filename": "libstdc++-v3/config/os/irix/irix6.5/bits/ctype_noninline.h", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fbits%2Fctype_noninline.h?ref=9e5c7dba50d3ad60d6920b76c1e20e0e401927e6", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,12 +33,20 @@\n   \n // Information as gleaned from /usr/include/ctype.h\n \n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n+\t\t     size_t __refs)\n+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(NULL), _M_tolower(NULL), _M_ctable(NULL), \n+  _M_table(!__table ? \n+\t   (const mask*) (__libc_attr._ctype_tbl->_class + 1) : __table) \n+  { }\n+\n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n   : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n-    _M_toupper(NULL), _M_tolower(NULL), _M_ctable(NULL), \n-    _M_table(!__table ? \n-             (const mask*) (__libc_attr._ctype_tbl->_class + 1) : __table) \n-    { }\n+  _M_toupper(NULL), _M_tolower(NULL), _M_ctable(NULL), \n+  _M_table(!__table ? \n+\t   (const mask*) (__libc_attr._ctype_tbl->_class + 1) : __table) \n+  { }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "ed2867f8f9242978f32b7a7ea9a8019b210431a7", "filename": "libstdc++-v3/config/os/newlib/bits/ctype_noninline.h", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fbits%2Fctype_noninline.h?ref=9e5c7dba50d3ad60d6920b76c1e20e0e401927e6", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,11 +33,18 @@\n   \n // Information as gleaned from /usr/include/ctype.h\n   \n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n+\t\t     size_t __refs) \n+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(NULL), _M_tolower(NULL), _M_ctable(_ctype_), \n+  _M_table(__table == 0 ? _M_ctable : __table) \n+  { }\n+\n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-    : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n-      _M_toupper(NULL), _M_tolower(NULL),\n-      _M_ctable(_ctype_), _M_table(__table == 0 ? _M_ctable: __table) \n-    { }\n+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(NULL), _M_tolower(NULL), _M_ctable(_ctype_), \n+  _M_table(__table == 0 ? _M_ctable : __table) \n+  { }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "a7ec22329cb4148bf499458a53bf160394271405", "filename": "libstdc++-v3/config/os/solaris/solaris2.5/bits/ctype_noninline.h", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fctype_noninline.h?ref=9e5c7dba50d3ad60d6920b76c1e20e0e401927e6", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 2000 Cygnus Solutions\n+// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,11 +33,18 @@\n   \n // Information as gleaned from /usr/include/ctype.h\n   \n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n+\t\t     size_t __refs) \n+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(NULL), _M_tolower(NULL), _M_ctable(__ctype), \n+  _M_table(__table == 0 ? _M_ctable: __table) \n+  { }\n+\n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-    : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n-      _M_toupper(NULL), _M_tolower(NULL),\n-      _M_ctable(__ctype), _M_table(__table == 0 ? _M_ctable: __table) \n-    { }\n+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(NULL), _M_tolower(NULL), _M_ctable(__ctype), \n+  _M_table(__table == 0 ? _M_ctable: __table) \n+  { }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "7f702a496421840fef0447d9e7ee23fc6c2c3686", "filename": "libstdc++-v3/config/os/solaris/solaris2.6/bits/ctype_noninline.h", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fctype_noninline.h?ref=9e5c7dba50d3ad60d6920b76c1e20e0e401927e6", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997-1999, 2000 Cygnus Solutions\n+// Copyright (C) 1997-2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,11 +33,18 @@\n   \n // Information as gleaned from /usr/include/ctype.h\n   \n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n+\t\t     size_t __refs) \n+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(__trans_upper), _M_tolower(__trans_lower), \n+  _M_ctable(__ctype_mask), _M_table(__table == 0 ? _M_ctable: __table) \n+  { }\n+\n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n-    : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n-      _M_toupper(__trans_upper), _M_tolower(__trans_lower),\n-      _M_ctable(__ctype_mask), _M_table(__table == 0 ? _M_ctable: __table) \n-    { }\n+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(__trans_upper), _M_tolower(__trans_lower), \n+  _M_ctable(__ctype_mask), _M_table(__table == 0 ? _M_ctable: __table) \n+  { }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "73951815bde32c06aa3b2448b4b1ef1f78780ef0", "filename": "libstdc++-v3/config/os/solaris/solaris2.7/bits/ctype_noninline.h", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fctype_noninline.h?ref=9e5c7dba50d3ad60d6920b76c1e20e0e401927e6", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997-1999, 2000 Cygnus Solutions\n+// Copyright (C) 1997-2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,11 +33,18 @@\n   \n // Information as gleaned from /usr/include/ctype.h\n   \n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n+\t\t     size_t __refs)\n+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(__trans_upper), _M_tolower(__trans_lower),\n+  _M_ctable(__ctype_mask), _M_table(__table == 0 ? _M_ctable: __table) \n+  { }\n+\n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n-    : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n-      _M_toupper(__trans_upper), _M_tolower(__trans_lower),\n-      _M_ctable(__ctype_mask), _M_table(__table == 0 ? _M_ctable: __table) \n-    { }\n+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(__trans_upper), _M_tolower(__trans_lower),\n+  _M_ctable(__ctype_mask), _M_table(__table == 0 ? _M_ctable: __table) \n+  { }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "967f399de0d81cd28c7ef00298e87d91a6bb90bd", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 23, "deletions": 28, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=9e5c7dba50d3ad60d6920b76c1e20e0e401927e6", "patch": "@@ -175,63 +175,51 @@ namespace std\n \n    protected:\n       virtual \n-      ~ctype() { }\n+      ~ctype();\n \n       virtual bool \n-      do_is(mask __m, char_type __c) const\n-      { return false; }\n+      do_is(mask __m, char_type __c) const;\n \n       virtual const char_type*\n-      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const\n-      { return __hi; }\n+      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;\n \n       virtual const char_type*\n-      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const\n-      { return __hi; }\n+      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;\n \n       virtual const char_type*\n       do_scan_not(mask __m, const char_type* __lo,\n-\t\t  const char_type* __hi) const\n-      { return __hi; }\n+\t\t  const char_type* __hi) const;\n \n       virtual char_type \n-      do_toupper(char_type __c) const\n-      { return __c; }\n+      do_toupper(char_type __c) const;\n \n       virtual const char_type*\n-      do_toupper(char_type* __lo, const char_type* __hi) const\n-      { return __hi; }\n+      do_toupper(char_type* __lo, const char_type* __hi) const;\n \n       virtual char_type \n-      do_tolower(char_type __c) const\n-      { return __c; }\n+      do_tolower(char_type __c) const;\n \n       virtual const char_type*\n-      do_tolower(char_type* __lo, const char_type* __hi) const\n-      { return __hi; }\n-      \n+      do_tolower(char_type* __lo, const char_type* __hi) const;\n+\n       virtual char_type \n-      do_widen(char __c) const\n-      { return char_type(); }\n+      do_widen(char __c) const;\n \n       virtual const char*\n-      do_widen(const char* __lo, const char* __hi, char_type* __dest) const\n-      { return __hi; }\n+      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;\n \n       virtual char \n-      do_narrow(char_type, char __dfault) const\n-      { return __dfault; }\n+      do_narrow(char_type, char __dfault) const;\n \n       virtual const char_type*\n       do_narrow(const char_type* __lo, const char_type* __hi,\n-\t\tchar __dfault, char* __dest) const\n-      { return __hi; }\n+\t\tchar __dfault, char* __dest) const;\n     };\n \n   template<typename _CharT>\n     locale::id ctype<_CharT>::id;\n \n-  // 22.2.1.3  ctype specializations\n+  // 22.2.1.3  ctype<char> specialization.\n   template<>\n     class ctype<char> : public __ctype_abstract_base<char>\n     {\n@@ -254,6 +242,10 @@ namespace std\n       explicit \n       ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);\n \n+      explicit \n+      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false, \n+\t    size_t __refs = 0);\n+\n       inline bool \n       is(mask __m, char __c) const;\n  \n@@ -322,7 +314,7 @@ namespace std\n     use_facet<ctype<char> >(const locale& __loc);\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n-  // ctype<wchar_t> specialization\n+  // 22.2.1.3  ctype<wchar_t> specialization\n   template<>\n     class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>\n     {\n@@ -337,6 +329,9 @@ namespace std\n       explicit \n       ctype(size_t __refs = 0);\n \n+      explicit \n+      ctype(__c_locale __cloc, size_t __refs = 0);\n+\n     protected:\n       __wmask_type\n       _M_convert_to_wmask(const mask __m) const;"}, {"sha": "d827a2564366104aa40cc9eb2c5001e27e503a4d", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=9e5c7dba50d3ad60d6920b76c1e20e0e401927e6", "patch": "@@ -484,8 +484,11 @@ namespace std\n \n   // NB: These ctype<wchar_t> methods are not configuration-specific,\n   // unlike the ctype<char> bits.\n-  ctype<wchar_t>::ctype(size_t __refs) : __ctype_abstract_base<wchar_t>(__refs)\n-  { }\n+  ctype<wchar_t>::ctype(size_t __refs) \n+  : __ctype_abstract_base<wchar_t>(__refs) { }\n+\n+  ctype<wchar_t>::ctype(__c_locale /*__cloc*/, size_t __refs) \n+  : __ctype_abstract_base<wchar_t>(__refs) { }\n \n   wchar_t\n   ctype<wchar_t>::do_toupper(wchar_t __c) const"}, {"sha": "2bd34cd4ac8cf4bcf50d91b96958618dadd98f95", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=9e5c7dba50d3ad60d6920b76c1e20e0e401927e6", "patch": "@@ -92,7 +92,7 @@ namespace std\n     // Construct all standard facets and add them to _M_facets.\n     // XXX How to deal cleanly, consistently with null (\"C\") __cloc?\n     _M_init_facet(new std::collate<char>(__cloc));\n-    _M_init_facet(new std::ctype<char>);\n+    _M_init_facet(new std::ctype<char>(__cloc));\n     _M_init_facet(new codecvt<char, char, mbstate_t>);\n     _M_init_facet(new moneypunct<char, false>(__cloc));\n     _M_init_facet(new moneypunct<char, true>(__cloc));\n@@ -108,7 +108,7 @@ namespace std\n     \n #ifdef  _GLIBCPP_USE_WCHAR_T\n     _M_init_facet(new std::collate<wchar_t>(__cloc));\n-    _M_init_facet(new std::ctype<wchar_t>);\n+    _M_init_facet(new std::ctype<wchar_t>(__cloc));\n     _M_init_facet(new codecvt<wchar_t, char, mbstate_t>);\n     _M_init_facet(new moneypunct<wchar_t, false>(__cloc));\n     _M_init_facet(new moneypunct<wchar_t, true>(__cloc));"}, {"sha": "7a9c1c9662b358474a99ab0206cae143657edff0", "filename": "libstdc++-v3/testsuite/22_locale/ctype_members_char.cc", "status": "modified", "additions": 72, "deletions": 2, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5c7dba50d3ad60d6920b76c1e20e0e401927e6/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_members_char.cc?ref=9e5c7dba50d3ad60d6920b76c1e20e0e401927e6", "patch": "@@ -30,9 +30,14 @@\n // 22.2.1.3.2 ctype<char> members\n \n #include <locale>\n-// NB: Don't include any other headers in this file.\n+#include <vector>\n+//#include <iostream>\n+//#include <iomanip>\n #include <testsuite_hooks.h>\n \n+// XXX This test (test02) is not working for non-glibc locale models.\n+// { dg-do run { xfail *-*-* } }\n+\n class gnu_ctype: public std::ctype<char> { };\n \n void test01()\n@@ -168,7 +173,72 @@ void test01()\n #endif\n }\n \n-int main() {\n+// libstdc++/4456, libstdc++/4457, libstdc++/4458\n+void test02()\n+{\n+  using namespace std;\n+  typedef ctype_base::mask \tmask;\n+  typedef vector<mask> \t\tvector_type;\n+\n+  bool test = true;\n+\n+  //  const int max = numeric_limits<char>::max();\n+  const int max = 255;\n+  const int ctype_mask_max = 10;\n+  vector_type v_c(max);\n+  vector_type v_de(max);\n+\n+  // \"C\"\n+  locale loc_c = locale::classic();\n+  const ctype<char>& ctype_c = use_facet<ctype<char> >(loc_c); \n+  for (int i = 0; i < max; ++i)\n+    {\n+      char c = static_cast<char>(i);\n+      mask mask_test = static_cast<mask>(0);\n+      mask mask_is = static_cast<mask>(0);\n+      for (int j = 0; j <= ctype_mask_max; ++j)\n+\t{\n+\t  mask_test = static_cast<mask>(1 << j);\n+\t  if (ctype_c.is(mask_test, c))\n+\t    mask_is |= mask_test;\n+\t}\n+      v_c[i] = mask_is;\n+    }   \n+\n+  // \"de_DE\"\n+  locale loc_de(\"de_DE\");\n+  const ctype<char>& ctype_de = use_facet<ctype<char> >(loc_de); \n+  for (int i = 0; i < max; ++i)\n+    {\n+      char c = static_cast<char>(i);\n+      mask mask_test = static_cast<mask>(0);\n+      mask mask_is = static_cast<mask>(0);\n+      for (int j = 0; j <= ctype_mask_max; ++j)\n+\t{\n+\t  mask_test = static_cast<mask>(1 << j);\n+\t  if (ctype_de.is(mask_test, c))\n+\t    mask_is |= mask_test;\n+\t}\n+      v_de[i] = mask_is;\n+    }   \n+\n+#if QUANNUM_VERBOSE_LYRICALLY_ADEPT_BAY_AREA_MCS_MODE\n+    for (int i = 0; i < max; ++i)\n+    {\n+      char mark = v_c[i] == v_de[i] ? ' ' : '-';\n+      cout << i << ' ' << mark << ' ' << static_cast<char>(i) << '\\t' ;\n+      cout << \"v_c: \" << setw(4) << v_c[i] << '\\t';\n+      cout << \"v_de: \" << setw(4) << v_de[i] << endl;\n+    }\n+    cout << (v_c == v_de) << endl;\n+#endif\n+\n+  VERIFY( v_c != v_de );\n+}\n+\n+int main() \n+{\n   test01();\n+  test02();\n   return 0;\n }"}]}