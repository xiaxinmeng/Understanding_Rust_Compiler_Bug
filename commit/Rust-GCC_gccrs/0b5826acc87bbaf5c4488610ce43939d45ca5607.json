{"sha": "0b5826acc87bbaf5c4488610ce43939d45ca5607", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI1ODI2YWNjODdiYmFmNWM0NDg4NjEwY2U0MzkzOWQ0NWNhNTYwNw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-12-23T16:07:16Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-12-23T16:07:16Z"}, "message": "arc.c (arc_hard_regno_mode_ok): Const-ify.\n\n\t* arc.c (arc_hard_regno_mode_ok): Const-ify.\n\t* arc.h (arc_hard_regno_mode_ok): Likewise.\n\t* i386.c (x86_64_reg_class_name): Make static.\n\t* m68k.c (regno_reg_class): Const-ify.\n\t* m68k.h (regno_reg_class): Likewise.\n\t* mcore.c (reg_class_from_letter): Likewise.\n\t* mcore.h (reg_class_from_letter): Likewise.\n\t* sh.c (reg_class_from_letter, ashiftrt_insns, shift_insns,\n\text_shift_insns, ext_shift_amounts): Likewise.\n\t* sh.h (reg_class_from_letter): Likewise.\n\t* sparc.c (hard_regno_mode_classes, hard_32bit_mode_classes,\n\thard_64bit_mode_classes): Likewise.\n\t* sparc.h (hard_regno_mode_classes): Likewise.\n\n\t* gcc.c (modify_target): Make static.\n\t* gengenrtl.c (defs, formats): Likewise.\n\t* reload1.c (elim_table_1, init_elim_table): Const-ify.\n\t* tradcpp.c (directive, directive_table, handle_directive,\n\tskip_if_group, run_directive): Likewise.\n\ncp:\n\t* decl2.c (lang_f_options): Const-ify.\n\nf:\n\t* com.c (ffecom_gfrt_volatile_, ffecom_gfrt_complex_,\n\tffecom_gfrt_const_, ffecom_gfrt_type_): Const-ify.\n\njava:\n\t* Make-lang.in (keyword.h): Pass -C to gperf to const-ify\n\tthe static arrays that are output.\n\t* jvspec.c (jvgenmain_spec): Make static.\n\t* keyword.gperf (struct java_keyword, java_keyword): Const-ify.\n\t* keyword.h: Regenerate.\n\t* lang.c (string_option, process_option_with_no, lang_f_options,\n\tlang_W_options): Const-ify.\n\t* lex.c (java_lex): Likewise.\n\nFrom-SVN: r48290", "tree": {"sha": "3a92e39c3950a0111e36bf45eea110d72fbf1e8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a92e39c3950a0111e36bf45eea110d72fbf1e8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b5826acc87bbaf5c4488610ce43939d45ca5607", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b5826acc87bbaf5c4488610ce43939d45ca5607", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b5826acc87bbaf5c4488610ce43939d45ca5607", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b5826acc87bbaf5c4488610ce43939d45ca5607/comments", "author": null, "committer": null, "parents": [{"sha": "14aacce76e18b19ea57b6f6dbeda4cad4b634b1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14aacce76e18b19ea57b6f6dbeda4cad4b634b1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14aacce76e18b19ea57b6f6dbeda4cad4b634b1a"}], "stats": {"total": 173, "additions": 111, "deletions": 62}, "files": [{"sha": "cf93c45b7b81df741ed15c2ef6c3fa2b67890c27", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b5826acc87bbaf5c4488610ce43939d45ca5607", "patch": "@@ -1,3 +1,25 @@\n+2001-12-23  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* arc.c (arc_hard_regno_mode_ok): Const-ify.\n+\t* arc.h (arc_hard_regno_mode_ok): Likewise.\n+\t* i386.c (x86_64_reg_class_name): Make static.\n+\t* m68k.c (regno_reg_class): Const-ify.\n+\t* m68k.h (regno_reg_class): Likewise.\n+\t* mcore.c (reg_class_from_letter): Likewise.\n+\t* mcore.h (reg_class_from_letter): Likewise.\n+\t* sh.c (reg_class_from_letter, ashiftrt_insns, shift_insns,\n+\text_shift_insns, ext_shift_amounts): Likewise.\n+\t* sh.h (reg_class_from_letter): Likewise.\n+\t* sparc.c (hard_regno_mode_classes, hard_32bit_mode_classes,\n+\thard_64bit_mode_classes): Likewise.\n+\t* sparc.h (hard_regno_mode_classes): Likewise.\n+\n+\t* gcc.c (modify_target): Make static.\n+\t* gengenrtl.c (defs, formats): Likewise.\n+\t* reload1.c (elim_table_1, init_elim_table): Const-ify.\n+\t* tradcpp.c (directive, directive_table, handle_directive,\n+\tskip_if_group, run_directive): Likewise.\n+\n 2001-12-23  Richard Henderson  <rth@redhat.com>\n \n \t* calls.c (expand_call): Don't turn off ECF_LIBCALL_BLOCK for"}, {"sha": "6a31b6cef8975245009044e81fb0175eeb4ae9d8", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=0b5826acc87bbaf5c4488610ce43939d45ca5607", "patch": "@@ -251,7 +251,7 @@ enum arc_mode_class {\n \n /* Value is 1 if register/mode pair is acceptable on arc.  */\n \n-unsigned int arc_hard_regno_mode_ok[] = {\n+const unsigned int arc_hard_regno_mode_ok[] = {\n   T_MODES, T_MODES, T_MODES, T_MODES, T_MODES, T_MODES, T_MODES, T_MODES,\n   T_MODES, T_MODES, T_MODES, T_MODES, T_MODES, T_MODES, T_MODES, T_MODES,\n   T_MODES, T_MODES, T_MODES, T_MODES, T_MODES, T_MODES, T_MODES, D_MODES,"}, {"sha": "5188d09e81a2f7cd060d8c6d699fd4ad08678054", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=0b5826acc87bbaf5c4488610ce43939d45ca5607", "patch": "@@ -397,7 +397,7 @@ if (GET_MODE_CLASS (MODE) == MODE_INT\t\t\\\n ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n \n /* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.  */\n-extern unsigned int arc_hard_regno_mode_ok[];\n+extern const unsigned int arc_hard_regno_mode_ok[];\n extern unsigned int arc_mode_class[];\n #define HARD_REGNO_MODE_OK(REGNO, MODE) \\\n ((arc_hard_regno_mode_ok[REGNO] & arc_mode_class[MODE]) != 0)"}, {"sha": "b65cd1c3014347234fdeb207ebdd8f7b981d5459", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0b5826acc87bbaf5c4488610ce43939d45ca5607", "patch": "@@ -746,7 +746,7 @@ enum x86_64_reg_class\n     X86_64_X87UP_CLASS,\n     X86_64_MEMORY_CLASS\n   };\n-const char * const x86_64_reg_class_name[] =\n+static const char * const x86_64_reg_class_name[] =\n    {\"no\", \"integer\", \"integerSI\", \"sse\", \"sseSF\", \"sseDF\", \"sseup\", \"x87\", \"x87up\", \"no\"};\n \n #define MAX_CLASSES 4"}, {"sha": "42c4f7cc287823bf7ce7648cfa9facbbcb8e5400", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=0b5826acc87bbaf5c4488610ce43939d45ca5607", "patch": "@@ -47,7 +47,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Index into this array by (register number >> 3) to find the\n    smallest class which contains that register.  */\n-enum reg_class regno_reg_class[]\n+const enum reg_class regno_reg_class[]\n   = { DATA_REGS, ADDR_REGS, FP_REGS,\n       LO_FPA_REGS, LO_FPA_REGS, FPA_REGS, FPA_REGS };\n "}, {"sha": "76b10b0276148a70f9d8e76d073d4637e6b77066", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=0b5826acc87bbaf5c4488610ce43939d45ca5607", "patch": "@@ -749,7 +749,7 @@ enum reg_class { NO_REGS, LO_FPA_REGS, FPA_REGS, FP_REGS,\n    reg number REGNO.  This could be a conditional expression\n    or could index an array.  */\n \n-extern enum reg_class regno_reg_class[];\n+extern const enum reg_class regno_reg_class[];\n #define REGNO_REG_CLASS(REGNO) (regno_reg_class[(REGNO)>>3])\n \n #endif /* SUPPORT_SUN_FPA */"}, {"sha": "2b6d1e8cedf2c0dfbe1dde5908cafd1d91c7e9a0", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=0b5826acc87bbaf5c4488610ce43939d45ca5607", "patch": "@@ -73,7 +73,7 @@ int regno_reg_class[FIRST_PSEUDO_REGISTER] =\n \n /* Provide reg_class from a letter such as appears in the machine\n    description.  */\n-enum reg_class reg_class_from_letter[] =\n+const enum reg_class reg_class_from_letter[] =\n {\n   /* a */ LRW_REGS, /* b */ ONLYR1_REGS, /* c */ C_REGS,  /* d */ NO_REGS,\n   /* e */ NO_REGS, /* f */ NO_REGS, /* g */ NO_REGS, /* h */ NO_REGS,"}, {"sha": "420124fdccb5b6589f97137279a1e38815e69619", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=0b5826acc87bbaf5c4488610ce43939d45ca5607", "patch": "@@ -544,7 +544,7 @@ extern int regno_reg_class[FIRST_PSEUDO_REGISTER];\n \n /* Get reg_class from a letter such as appears in the machine \n    description.  */\n-extern enum reg_class reg_class_from_letter[];\n+extern const enum reg_class reg_class_from_letter[];\n \n #define REG_CLASS_FROM_LETTER(C) \\\n    ( ISLOWER (C) ? reg_class_from_letter[(C) - 'a'] : NO_REGS )"}, {"sha": "675109a2278d02431c7e349e717d6fc98d5977ef", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=0b5826acc87bbaf5c4488610ce43939d45ca5607", "patch": "@@ -122,7 +122,7 @@ char fp_reg_names[][5] =\n /* Provide reg_class from a letter such as appears in the machine\n    description.  */\n \n-enum reg_class reg_class_from_letter[] =\n+const enum reg_class reg_class_from_letter[] =\n {\n   /* a */ ALL_REGS, /* b */ NO_REGS, /* c */ FPSCR_REGS, /* d */ DF_REGS,\n   /* e */ NO_REGS, /* f */ FP_REGS, /* g */ NO_REGS, /* h */ NO_REGS,\n@@ -957,11 +957,11 @@ output_file_start (file)\n }\n \f\n /* Actual number of instructions used to make a shift by N.  */\n-static char ashiftrt_insns[] =\n+static const char ashiftrt_insns[] =\n   { 0,1,2,3,4,5,8,8,8,8,8,8,8,8,8,8,2,3,4,5,8,8,8,8,8,8,8,8,8,8,8,2};\n \n /* Left shift and logical right shift are the same.  */\n-static char shift_insns[]    =\n+static const char shift_insns[]    =\n   { 0,1,1,2,2,3,3,4,1,2,2,3,3,4,3,3,1,2,2,3,3,4,3,3,2,3,3,4,4,4,3,3};\n \n /* Individual shift amounts needed to get the above length sequences.\n@@ -982,10 +982,10 @@ static short shift_amounts[32][5] = {\n    might be clobbered.  This is typically used when combined with some\n    kind of sign or zero extension.  */\n    \n-static char ext_shift_insns[]    =\n+static const char ext_shift_insns[]    =\n   { 0,1,1,2,2,3,2,2,1,2,2,3,3,3,2,2,1,2,2,3,3,4,3,3,2,3,3,4,4,4,3,3};\n \n-static short ext_shift_amounts[32][4] = {\n+static const short ext_shift_amounts[32][4] = {\n   {0}, {1}, {2}, {2, 1},\n   {2, 2}, {2, 1, 2}, {8, -2}, {8, -1},\n   {8}, {8, 1}, {8, 2}, {8, 1, 2},"}, {"sha": "979e83b9ce72c303eb62ca8cf98c3292a3b36966", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=0b5826acc87bbaf5c4488610ce43939d45ca5607", "patch": "@@ -829,7 +829,7 @@ extern int regno_reg_class[FIRST_PSEUDO_REGISTER];\n \n /* Get reg_class from a letter such as appears in the machine\n    description.  */\n-extern enum reg_class reg_class_from_letter[];\n+extern const enum reg_class reg_class_from_letter[];\n \n #define REG_CLASS_FROM_LETTER(C) \\\n    ( ISLOWER (C) ? reg_class_from_letter[(C)-'a'] : NO_REGS )"}, {"sha": "8914a8b331494ceb66baaea895fda1fa80dcc89f", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=0b5826acc87bbaf5c4488610ce43939d45ca5607", "patch": "@@ -3070,9 +3070,9 @@ enum sparc_mode_class {\n    they cross fixed registers).  */\n \n /* This points to either the 32 bit or the 64 bit version.  */\n-int *hard_regno_mode_classes;\n+const int *hard_regno_mode_classes;\n \n-static int hard_32bit_mode_classes[] = {\n+static const int hard_32bit_mode_classes[] = {\n   S_MODES, S_MODES, T_MODES, S_MODES, T_MODES, S_MODES, D_MODES, S_MODES,\n   T_MODES, S_MODES, T_MODES, S_MODES, D_MODES, S_MODES, D_MODES, S_MODES,\n   T_MODES, S_MODES, T_MODES, S_MODES, T_MODES, S_MODES, D_MODES, S_MODES,\n@@ -3097,7 +3097,7 @@ static int hard_32bit_mode_classes[] = {\n   CC_MODES\n };\n \n-static int hard_64bit_mode_classes[] = {\n+static const int hard_64bit_mode_classes[] = {\n   D_MODES, D_MODES, T_MODES, D_MODES, T_MODES, D_MODES, T_MODES, D_MODES,\n   O_MODES, D_MODES, T_MODES, D_MODES, T_MODES, D_MODES, T_MODES, D_MODES,\n   T_MODES, D_MODES, T_MODES, D_MODES, T_MODES, D_MODES, T_MODES, D_MODES,"}, {"sha": "e18fb14bfae499d55a6631bfebe464ee2e3d42a3", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=0b5826acc87bbaf5c4488610ce43939d45ca5607", "patch": "@@ -1091,7 +1091,7 @@ while (0)\n \n /* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.\n    See sparc.c for how we initialize this.  */\n-extern int *hard_regno_mode_classes;\n+extern const int *hard_regno_mode_classes;\n extern int sparc_mode_class[];\n \n /* ??? Because of the funny way we pass parameters we should allow certain"}, {"sha": "6614ddb74fd1e1af75c881712f2d6bd815b78d4f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0b5826acc87bbaf5c4488610ce43939d45ca5607", "patch": "@@ -1,3 +1,7 @@\n+2001-12-23  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* decl2.c (lang_f_options): Const-ify.\n+\n 2001-12-20  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* config-lang.in (diff_excludes): Remove."}, {"sha": "cde4e698655eccf21c6f4ad82c7af9a2ca738e92", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=0b5826acc87bbaf5c4488610ce43939d45ca5607", "patch": "@@ -406,7 +406,7 @@ int flag_enforce_eh_specs = 1;\n     if `-fSTRING' is seen as an option.\n    (If `-fno-STRING' is seen as an option, the opposite value is stored.)  */\n \n-static struct { const char *const string; int *variable; int on_value;}\n+static const struct { const char *const string; int *const variable; const int on_value;}\n lang_f_options[] =\n {\n   /* C/C++ options.  */"}, {"sha": "dce48534fd9f8047d8ee5581fd8abffca0cc37f5", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=0b5826acc87bbaf5c4488610ce43939d45ca5607", "patch": "@@ -1,3 +1,8 @@\n+Sun Dec 23 10:45:09 2001  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* com.c (ffecom_gfrt_volatile_, ffecom_gfrt_complex_,\n+\tffecom_gfrt_const_, ffecom_gfrt_type_): Const-ify.\n+\n Sat Dec 22 16:01:51 2001  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* bld.c (ffebld_arity_op_): Declare array size explicitly."}, {"sha": "823f18dff113c6ea47121075a8a139439c443989", "filename": "gcc/f/com.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=0b5826acc87bbaf5c4488610ce43939d45ca5607", "patch": "@@ -437,7 +437,7 @@ static const char *const ffecom_gfrt_name_[FFECOM_gfrt]\n \n /* Whether the function returns.  */\n \n-static bool ffecom_gfrt_volatile_[FFECOM_gfrt]\n+static const bool ffecom_gfrt_volatile_[FFECOM_gfrt]\n =\n {\n #define DEFGFRT(CODE,NAME,TYPE,ARGS,VOLATILE,COMPLEX,CONST) VOLATILE,\n@@ -447,7 +447,7 @@ static bool ffecom_gfrt_volatile_[FFECOM_gfrt]\n \n /* Whether the function returns type complex.  */\n \n-static bool ffecom_gfrt_complex_[FFECOM_gfrt]\n+static const bool ffecom_gfrt_complex_[FFECOM_gfrt]\n =\n {\n #define DEFGFRT(CODE,NAME,TYPE,ARGS,VOLATILE,COMPLEX,CONST) COMPLEX,\n@@ -458,7 +458,7 @@ static bool ffecom_gfrt_complex_[FFECOM_gfrt]\n /* Whether the function is const\n    (i.e., has no side effects and only depends on its arguments).  */\n \n-static bool ffecom_gfrt_const_[FFECOM_gfrt]\n+static const bool ffecom_gfrt_const_[FFECOM_gfrt]\n =\n {\n #define DEFGFRT(CODE,NAME,TYPE,ARGS,VOLATILE,COMPLEX,CONST) CONST,\n@@ -468,7 +468,7 @@ static bool ffecom_gfrt_const_[FFECOM_gfrt]\n \n /* Type code for the function return value.  */\n \n-static ffecomRttype_ ffecom_gfrt_type_[FFECOM_gfrt]\n+static const ffecomRttype_ ffecom_gfrt_type_[FFECOM_gfrt]\n =\n {\n #define DEFGFRT(CODE,NAME,TYPE,ARGS,VOLATILE,COMPLEX,CONST) TYPE,"}, {"sha": "3d22c8c408b0e57771d0eb1651a13cd93f570a45", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=0b5826acc87bbaf5c4488610ce43939d45ca5607", "patch": "@@ -234,7 +234,7 @@ static const char *cross_compile = \"0\";\n    switch.  The only case we support now is simply appending or deleting a\n    string to or from the end of the first part of the configuration name.  */\n \n-const struct modify_target\n+static const struct modify_target\n {\n   const char *const sw;\n   const enum add_del {ADD, DELETE} add_del;"}, {"sha": "157baf179e026ae3c81f00cecc6b9798dde46bbb", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=0b5826acc87bbaf5c4488610ce43939d45ca5607", "patch": "@@ -100,12 +100,12 @@ struct rtx_definition\n \n #define DEF_RTL_EXPR(ENUM, NAME, FORMAT, CLASS) { STRINGX(ENUM), NAME, FORMAT },\n \n-const struct rtx_definition defs[] = \n+static const struct rtx_definition defs[] = \n {  \n #include \"rtl.def\"\t\t/* rtl expressions are documented here */\n };\n \n-const char *formats[NUM_RTX_CODE];\n+static const char *formats[NUM_RTX_CODE];\n \n static const char *type_from_format\tPARAMS ((int));\n static const char *accessor_from_format\tPARAMS ((int));"}, {"sha": "71b1a100a7c6e2fe2a6b07e582e079af1e2ea6e2", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=0b5826acc87bbaf5c4488610ce43939d45ca5607", "patch": "@@ -1,3 +1,14 @@\n+2001-12-23  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Make-lang.in (keyword.h): Pass -C to gperf to const-ify\n+\tthe static arrays that are output.\n+\t* jvspec.c (jvgenmain_spec): Make static.\n+\t* keyword.gperf (struct java_keyword, java_keyword): Const-ify.\n+\t* keyword.h: Regenerate.\n+\t* lang.c (string_option, process_option_with_no, lang_f_options,\n+\tlang_W_options): Const-ify.\n+\t* lex.c (java_lex): Likewise.\n+\n 2001-12-21  Richard Henderson  <rth@redhat.com>\n \n \t* boehm.c (PROCEDURE_OBJECT_DESCRIPTOR): Merge into .."}, {"sha": "194bdfa9116058cb22a411dc4ad43082ab98ca56", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=0b5826acc87bbaf5c4488610ce43939d45ca5607", "patch": "@@ -90,7 +90,7 @@ $(srcdir)/java/parse-scan.c:  $(srcdir)/java/parse-scan.y\n \n $(srcdir)/java/keyword.h: $(srcdir)/java/keyword.gperf\n \t(cd $(srcdir)/java || exit 1; \\\n-\tgperf -L C -F ', 0' -p -t -j1 -i 1 -g -o -N java_keyword -k1,4,$$ \\\n+\tgperf -L C -C -F ', 0' -p -t -j1 -i 1 -g -o -N java_keyword -k1,4,$$ \\\n \t\tkeyword.gperf > k$$$$.h || { \\\n \techo \"Please update gperf from ftp://ftp.gnu.org/pub/gnu/gperf/\" >&2; \\\n \trm -f k$$$$.h; \\"}, {"sha": "dba2ee6929f46378c38cd66485d8c42617a332b8", "filename": "gcc/java/jvspec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fjava%2Fjvspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fjava%2Fjvspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvspec.c?ref=0b5826acc87bbaf5c4488610ce43939d45ca5607", "patch": "@@ -53,7 +53,7 @@ int lang_specific_extra_outfiles = 0;\n /* True if we should add -shared-libgcc to the command-line.  */\n int shared_libgcc = 1;\n \n-const char jvgenmain_spec[] =\n+static const char jvgenmain_spec[] =\n   \"jvgenmain %{D*} %b %{!pipe:%u.i} |\\n\\\n    cc1 %{!pipe:%U.i} %1 \\\n \t\t   %{!Q:-quiet} -dumpbase %b.c %{d*} %{m*} %{a*}\\"}, {"sha": "4256ca7fe3c92aa1d8b84cae30ce0eb83ceae08b", "filename": "gcc/java/keyword.gperf", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fjava%2Fkeyword.gperf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fjava%2Fkeyword.gperf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fkeyword.gperf?ref=0b5826acc87bbaf5c4488610ce43939d45ca5607", "patch": "@@ -25,15 +25,15 @@ of Sun Microsystems, Inc. in the United States and other countries.\n The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n %}\n-struct java_keyword { const char *const name; int token; };\n+struct java_keyword { const char *const name; const int token; };\n #ifdef __GNUC__\n __inline\n #endif\n static unsigned int hash\t\tPARAMS ((const char *, unsigned int));\n #ifdef __GNUC__\n __inline\n #endif\n-struct java_keyword *java_keyword\tPARAMS ((const char *, unsigned int));\n+const struct java_keyword *java_keyword\tPARAMS ((const char *, unsigned int));\n %%\n abstract, ABSTRACT_TK\n default, DEFAULT_TK"}, {"sha": "a2bc12dc5348b752333c45520b5c7bfba6522309", "filename": "gcc/java/keyword.h", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fjava%2Fkeyword.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fjava%2Fkeyword.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fkeyword.h?ref=0b5826acc87bbaf5c4488610ce43939d45ca5607", "patch": "@@ -1,5 +1,5 @@\n-/* C code produced by gperf version 2.7 */\n-/* Command-line: gperf -L C -F , 0 -p -t -j1 -i 1 -g -o -N java_keyword -k1,4,$ keyword.gperf  */\n+/* C code produced by gperf version 2.7.2 */\n+/* Command-line: gperf -L C -C -F ', 0' -p -t -j1 -i 1 -g -o -N java_keyword -k'1,4,$' keyword.gperf  */\n /* Keyword definition for the GNU compiler for the Java(TM) language.\n    Copyright (C) 1997, 1998 Free Software Foundation, Inc.\n    Contributed by Alexandre Petit-Bianco (apbianco@cygnus.com)\n@@ -25,15 +25,15 @@ Java and all Java-based marks are trademarks or registered trademarks\n of Sun Microsystems, Inc. in the United States and other countries.\n The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n-struct java_keyword { const char *const name; int token; };\n+struct java_keyword { const char *const name; const int token; };\n #ifdef __GNUC__\n __inline\n #endif\n static unsigned int hash\t\tPARAMS ((const char *, unsigned int));\n #ifdef __GNUC__\n __inline\n #endif\n-struct java_keyword *java_keyword\tPARAMS ((const char *, unsigned int));\n+const struct java_keyword *java_keyword\tPARAMS ((const char *, unsigned int));\n \n #define TOTAL_KEYWORDS 51\n #define MIN_WORD_LENGTH 2\n@@ -44,13 +44,17 @@ struct java_keyword *java_keyword\tPARAMS ((const char *, unsigned int));\n \n #ifdef __GNUC__\n __inline\n+#else\n+#ifdef __cplusplus\n+inline\n+#endif\n #endif\n static unsigned int\n hash (str, len)\n      register const char *str;\n      register unsigned int len;\n {\n-  static unsigned char asso_values[] =\n+  static const unsigned char asso_values[] =\n     {\n       96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n       96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n@@ -98,14 +102,15 @@ hash (str, len)\n #ifdef __GNUC__\n __inline\n #endif\n-struct java_keyword *\n+const struct java_keyword *\n java_keyword (str, len)\n      register const char *str;\n      register unsigned int len;\n {\n-  static struct java_keyword wordlist[] =\n+  static const struct java_keyword wordlist[] =\n     {\n-      {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0},\n+      {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0},\n+      {\"\", 0},\n       {\"else\", ELSE_TK},\n       {\"true\", TRUE_TK},\n       {\"case\", CASE_TK},\n@@ -163,12 +168,14 @@ java_keyword (str, len)\n       {\"instanceof\", INSTANCEOF_TK},\n       {\"\", 0},\n       {\"throw\", THROW_TK},\n-      {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0},\n+      {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0},\n+      {\"\", 0},\n       {\"native\", NATIVE_TK},\n       {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0},\n       {\"import\", IMPORT_TK},\n-      {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0},\n-      {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0},\n+      {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0},\n+      {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0},\n+      {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0},\n       {\"goto\", GOTO_TK}\n     };\n "}, {"sha": "0486abd08f0c67da266a8606d751e6a27aec5026", "filename": "gcc/java/lang.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=0b5826acc87bbaf5c4488610ce43939d45ca5607", "patch": "@@ -43,9 +43,9 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n struct string_option\n {\n-  const char *string;\n-  int *variable;\n-  int on_value;\n+  const char *const string;\n+  int *const variable;\n+  const int on_value;\n };\n \n static const char *java_init PARAMS ((const char *));\n@@ -56,8 +56,8 @@ static void put_decl_string PARAMS ((const char *, int));\n static void put_decl_node PARAMS ((tree));\n static void java_dummy_print PARAMS ((diagnostic_context *, const char *));\n static void lang_print_error PARAMS ((diagnostic_context *, const char *));\n-static int process_option_with_no PARAMS ((char *,\n-\t\t\t\t\t   struct string_option *,\n+static int process_option_with_no PARAMS ((const char *,\n+\t\t\t\t\t   const struct string_option *,\n \t\t\t\t\t   int));\n \n #ifndef TARGET_OBJECT_SUFFIX\n@@ -166,7 +166,7 @@ static int version_flag = 0;\n     if `-fSTRING' is seen as an option.\n    (If `-fno-STRING' is seen as an option, the opposite value is stored.)  */\n \n-static struct string_option\n+static const struct string_option\n lang_f_options[] =\n {\n   {\"emit-class-file\", &flag_emit_class_files, 1},\n@@ -182,7 +182,7 @@ lang_f_options[] =\n   {\"indirect-dispatch\", &flag_indirect_dispatch, 1}\n };\n \n-static struct string_option\n+static const struct string_option\n lang_W_options[] =\n {\n   { \"redundant-modifiers\", &flag_redundant, 1 },\n@@ -222,8 +222,8 @@ const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n    Return 1 if option found, 0 otherwise.  */\n static int\n process_option_with_no (p, table, table_size)\n-     char *p;\n-     struct string_option *table;\n+     const char *p;\n+     const struct string_option *table;\n      int table_size;\n {\n   int j;"}, {"sha": "2fc64dc18821efd4fa7c848292961d3bdaace99d", "filename": "gcc/java/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fjava%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Fjava%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.c?ref=0b5826acc87bbaf5c4488610ce43939d45ca5607", "patch": "@@ -1567,7 +1567,7 @@ java_lex (java_lval)\n      this is an identifier (possibly not respecting formation rule).  */\n   if (all_ascii)\n     {\n-      struct java_keyword *kw;\n+      const struct java_keyword *kw;\n       if ((kw=java_keyword (string, ascii_index)))\n \t{\n \t  JAVA_LEX_KW (string);"}, {"sha": "451a0906052380d618ee0e55dce9f01c58cf504a", "filename": "gcc/reload1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=0b5826acc87bbaf5c4488610ce43939d45ca5607", "patch": "@@ -323,10 +323,10 @@ static struct elim_table *reg_eliminate = 0;\n \n /* This is an intermediate structure to initialize the table.  It has\n    exactly the members provided by ELIMINABLE_REGS.  */\n-static struct elim_table_1\n+static const struct elim_table_1\n {\n-  int from;\n-  int to;\n+  const int from;\n+  const int to;\n } reg_eliminate_1[] =\n \n /* If a set of eliminable registers was specified, define the table from it.\n@@ -3486,7 +3486,7 @@ init_elim_table ()\n {\n   struct elim_table *ep;\n #ifdef ELIMINABLE_REGS\n-  struct elim_table_1 *ep1;\n+  const struct elim_table_1 *ep1;\n #endif\n \n   if (!reg_eliminate)"}, {"sha": "11c5fd3c5c0733b40dc418e2c6aff375b4ad755f", "filename": "gcc/tradcpp.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Ftradcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5826acc87bbaf5c4488610ce43939d45ca5607/gcc%2Ftradcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftradcpp.c?ref=0b5826acc87bbaf5c4488610ce43939d45ca5607", "patch": "@@ -310,11 +310,11 @@ HASHNODE *hashtab[HASHSIZE];\n /* `struct directive' defines one #-directive, including how to handle it.  */\n \n struct directive {\n-  int length;\t\t\t/* Length of name */\n-  void (*func) PARAMS ((U_CHAR *, U_CHAR *, FILE_BUF *));\n+  const int length;\t\t/* Length of name */\n+  void (*const func) PARAMS ((U_CHAR *, U_CHAR *, FILE_BUF *));\n   \t\t\t\t/* Function to handle directive */\n-  const char *name;\t\t/* Name of directive */\n-  enum node_type type;\t\t/* Code which describes which directive. */\n+  const char *const name;\t/* Name of directive */\n+  const enum node_type type;\t/* Code which describes which directive. */\n };\n \n /* Last arg to output_line_command.  */\n@@ -446,7 +446,7 @@ int main\t\tPARAMS ((int, char **));\n \n /* Here is the actual list of #-directives, most-often-used first.  */\n \n-struct directive directive_table[] = {\n+static const struct directive directive_table[] = {\n   {  6, do_define,  \"define\",  T_DEFINE  },\n   {  7, do_include, \"include\", T_INCLUDE },\n   {  5, do_endif,   \"endif\",   T_ENDIF   },\n@@ -1904,7 +1904,7 @@ handle_directive (ip, op)\n      FILE_BUF *ip, *op;\n {\n   U_CHAR *bp, *cp;\n-  struct directive *kt;\n+  const struct directive *kt;\n   int ident_length;\n   U_CHAR *resume_p;\n \n@@ -3684,7 +3684,7 @@ skip_if_group (ip, any)\n {\n   U_CHAR *bp = ip->bufp, *cp;\n   U_CHAR *endb = ip->buf + ip->length;\n-  struct directive *kt;\n+  const struct directive *kt;\n   IF_STACK_FRAME *save_if_stack = if_stack; /* don't pop past here */\n   U_CHAR *beg_of_line = bp;\n \n@@ -5117,7 +5117,7 @@ run_directive (str, len, type)\n      size_t len;\n      enum node_type type;\n {\n-  struct directive *kt;\n+  const struct directive *kt;\n   FILE_BUF *ip = &instack[++indepth];\n   ip->fname = \"*command line*\";\n "}]}