{"sha": "2e4ceca56c268b4d4d4aa093f9227b70bd2d6580", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU0Y2VjYTU2YzI2OGI0ZDRkNGFhMDkzZjkyMjdiNzBiZDJkNjU4MA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2013-11-14T18:22:30Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2013-11-14T18:22:30Z"}, "message": "function.c (assign_parms): Use all.reg_parm_stack_space instead of re-evaluating REG_PARM_STACK_SPACE...\n\n2013-11-14  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n\t    Alan Modra  <amodra@gmail.com>\n\n\t* function.c (assign_parms): Use all.reg_parm_stack_space instead\n\tof re-evaluating REG_PARM_STACK_SPACE target macro.\n\t(locate_and_pad_parm): New parameter REG_PARM_STACK_SPACE.  Use it\n\tinstead of evaluating target macro REG_PARM_STACK_SPACE every time.\n\t(assign_parm_find_entry_rtl): Update call.\n\t* calls.c (initialize_argument_information): Update call.\n\t(emit_library_call_value_1): Likewise.\n\t* expr.h (locate_and_pad_parm): Update prototype.\n\nCo-Authored-By: Alan Modra <amodra@gmail.com>\n\nFrom-SVN: r204798", "tree": {"sha": "ab23e8dc36fda4a57ede610548ba1d5e93c14f3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab23e8dc36fda4a57ede610548ba1d5e93c14f3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e4ceca56c268b4d4d4aa093f9227b70bd2d6580", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e4ceca56c268b4d4d4aa093f9227b70bd2d6580", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e4ceca56c268b4d4d4aa093f9227b70bd2d6580", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e4ceca56c268b4d4d4aa093f9227b70bd2d6580/comments", "author": null, "committer": null, "parents": [{"sha": "a79730506d9d3cffe3536b4f5099c25db8d01afa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a79730506d9d3cffe3536b4f5099c25db8d01afa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a79730506d9d3cffe3536b4f5099c25db8d01afa"}], "stats": {"total": 52, "additions": 27, "deletions": 25}, "files": [{"sha": "cc088e04db7febc4b8ec921cf080d82fd4460cd0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4ceca56c268b4d4d4aa093f9227b70bd2d6580/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4ceca56c268b4d4d4aa093f9227b70bd2d6580/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e4ceca56c268b4d4d4aa093f9227b70bd2d6580", "patch": "@@ -1,3 +1,15 @@\n+2013-11-14  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\t    Alan Modra  <amodra@gmail.com>\n+\n+\t* function.c (assign_parms): Use all.reg_parm_stack_space instead\n+\tof re-evaluating REG_PARM_STACK_SPACE target macro.\n+\t(locate_and_pad_parm): New parameter REG_PARM_STACK_SPACE.  Use it\n+\tinstead of evaluating target macro REG_PARM_STACK_SPACE every time.\n+\t(assign_parm_find_entry_rtl): Update call.\n+\t* calls.c (initialize_argument_information): Update call.\n+\t(emit_library_call_value_1): Likewise.\n+\t* expr.h (locate_and_pad_parm): Update prototype.\n+\n 2013-11-14  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* calls.c (store_unaligned_arguments_into_pseudos): Skip PARALLEL"}, {"sha": "4dcdb27c1c156bbb20cdd7c718fb66babe6e12e3", "filename": "gcc/calls.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4ceca56c268b4d4d4aa093f9227b70bd2d6580/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4ceca56c268b4d4d4aa093f9227b70bd2d6580/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=2e4ceca56c268b4d4d4aa093f9227b70bd2d6580", "patch": "@@ -1326,6 +1326,7 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n #else\n \t\t\t     args[i].reg != 0,\n #endif\n+\t\t\t     reg_parm_stack_space,\n \t\t\t     args[i].pass_on_stack ? 0 : args[i].partial,\n \t\t\t     fndecl, args_size, &args[i].locate);\n #ifdef BLOCK_REG_PADDING\n@@ -3736,7 +3737,8 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n #else\n \t\t\t   argvec[count].reg != 0,\n #endif\n-\t\t\t   0, NULL_TREE, &args_size, &argvec[count].locate);\n+\t\t\t   reg_parm_stack_space, 0,\n+\t\t\t   NULL_TREE, &args_size, &argvec[count].locate);\n \n       if (argvec[count].reg == 0 || argvec[count].partial != 0\n \t  || reg_parm_stack_space > 0)\n@@ -3823,7 +3825,7 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n #else\n \t\t\t       argvec[count].reg != 0,\n #endif\n-\t\t\t       argvec[count].partial,\n+\t\t\t       reg_parm_stack_space, argvec[count].partial,\n \t\t\t       NULL_TREE, &args_size, &argvec[count].locate);\n \t  args_size.constant += argvec[count].locate.size.constant;\n \t  gcc_assert (!argvec[count].locate.size.var);"}, {"sha": "2923b81b85baef397d27437eece931a3ba472561", "filename": "gcc/expr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4ceca56c268b4d4d4aa093f9227b70bd2d6580/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4ceca56c268b4d4d4aa093f9227b70bd2d6580/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=2e4ceca56c268b4d4d4aa093f9227b70bd2d6580", "patch": "@@ -521,8 +521,8 @@ extern rtx expand_divmod (int, enum tree_code, enum machine_mode, rtx, rtx,\n \t\t\t  rtx, int);\n #endif\n \n-extern void locate_and_pad_parm (enum machine_mode, tree, int, int, tree,\n-\t\t\t\t struct args_size *,\n+extern void locate_and_pad_parm (enum machine_mode, tree, int, int, int,\n+\t\t\t\t tree, struct args_size *,\n \t\t\t\t struct locate_and_pad_arg_data *);\n \n /* Return the CODE_LABEL rtx for a LABEL_DECL, creating it if necessary.  */"}, {"sha": "9c7a9844b7f866b95c761018b663f97401cab664", "filename": "gcc/function.c", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4ceca56c268b4d4d4aa093f9227b70bd2d6580/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4ceca56c268b4d4d4aa093f9227b70bd2d6580/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=2e4ceca56c268b4d4d4aa093f9227b70bd2d6580", "patch": "@@ -2515,6 +2515,7 @@ assign_parm_find_entry_rtl (struct assign_parm_data_all *all,\n     }\n \n   locate_and_pad_parm (data->promoted_mode, data->passed_type, in_regs,\n+\t\t       all->reg_parm_stack_space,\n \t\t       entry_parm ? data->partial : 0, current_function_decl,\n \t\t       &all->stack_args_size, &data->locate);\n \n@@ -3503,11 +3504,7 @@ assign_parms (tree fndecl)\n   /* Adjust function incoming argument size for alignment and\n      minimum length.  */\n \n-#ifdef REG_PARM_STACK_SPACE\n-  crtl->args.size = MAX (crtl->args.size,\n-\t\t\t\t    REG_PARM_STACK_SPACE (fndecl));\n-#endif\n-\n+  crtl->args.size = MAX (crtl->args.size, all.reg_parm_stack_space);\n   crtl->args.size = CEIL_ROUND (crtl->args.size,\n \t\t\t\t\t   PARM_BOUNDARY / BITS_PER_UNIT);\n \n@@ -3711,6 +3708,9 @@ gimplify_parameters (void)\n    IN_REGS is nonzero if the argument will be passed in registers.  It will\n    never be set if REG_PARM_STACK_SPACE is not defined.\n \n+   REG_PARM_STACK_SPACE is the number of bytes of stack space reserved\n+   for arguments which are passed in registers.\n+\n    FNDECL is the function in which the argument was defined.\n \n    There are two types of rounding that are done.  The first, controlled by\n@@ -3731,19 +3731,16 @@ gimplify_parameters (void)\n \n void\n locate_and_pad_parm (enum machine_mode passed_mode, tree type, int in_regs,\n-\t\t     int partial, tree fndecl ATTRIBUTE_UNUSED,\n+\t\t     int reg_parm_stack_space, int partial,\n+\t\t     tree fndecl ATTRIBUTE_UNUSED,\n \t\t     struct args_size *initial_offset_ptr,\n \t\t     struct locate_and_pad_arg_data *locate)\n {\n   tree sizetree;\n   enum direction where_pad;\n   unsigned int boundary, round_boundary;\n-  int reg_parm_stack_space = 0;\n   int part_size_in_regs;\n \n-#ifdef REG_PARM_STACK_SPACE\n-  reg_parm_stack_space = REG_PARM_STACK_SPACE (fndecl);\n-\n   /* If we have found a stack parm before we reach the end of the\n      area reserved for registers, skip that area.  */\n   if (! in_regs)\n@@ -3761,7 +3758,6 @@ locate_and_pad_parm (enum machine_mode passed_mode, tree type, int in_regs,\n \t    initial_offset_ptr->constant = reg_parm_stack_space;\n \t}\n     }\n-#endif /* REG_PARM_STACK_SPACE */\n \n   part_size_in_regs = (reg_parm_stack_space == 0 ? partial : 0);\n \n@@ -3824,11 +3820,7 @@ locate_and_pad_parm (enum machine_mode passed_mode, tree type, int in_regs,\n \n   locate->slot_offset.constant += part_size_in_regs;\n \n-  if (!in_regs\n-#ifdef REG_PARM_STACK_SPACE\n-      || REG_PARM_STACK_SPACE (fndecl) > 0\n-#endif\n-     )\n+  if (!in_regs || reg_parm_stack_space > 0)\n     pad_to_arg_alignment (&locate->slot_offset, boundary,\n \t\t\t  &locate->alignment_pad);\n \n@@ -3848,11 +3840,7 @@ locate_and_pad_parm (enum machine_mode passed_mode, tree type, int in_regs,\n     pad_below (&locate->offset, passed_mode, sizetree);\n \n #else /* !ARGS_GROW_DOWNWARD */\n-  if (!in_regs\n-#ifdef REG_PARM_STACK_SPACE\n-      || REG_PARM_STACK_SPACE (fndecl) > 0\n-#endif\n-      )\n+  if (!in_regs || reg_parm_stack_space > 0)\n     pad_to_arg_alignment (initial_offset_ptr, boundary,\n \t\t\t  &locate->alignment_pad);\n   locate->slot_offset = *initial_offset_ptr;"}]}