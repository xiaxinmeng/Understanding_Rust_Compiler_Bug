{"sha": "b1cf82933e894cbdb21d63653c20258dc8c87997", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFjZjgyOTMzZTg5NGNiZGIyMWQ2MzY1M2MyMDI1OGRjOGM4Nzk5Nw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-12-08T11:26:35Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-12-08T11:26:35Z"}, "message": "combine: Fix PR83304\n\nIn PR83304 two insns are combined, where the I2 uses a register that\nhas a REG_DEAD note on an insn after I2 but before I3.  In such a case\nmove_deaths should move that death note.  But move_deaths only looks\nat the reg_stat[regno].last_death insn, and that field can be zeroed\nout (previously, use_crosses_set_p would prevent the combination in\nthis case).\n\nIf the last_death field is zero it means \"unknown\", not \"no death\", so\nwe have to find if there is a REG_DEAD note.\n\n\n\tPR rtl-optimization/83304\n\t* combine.c (move_deaths): If we do not know where a register died,\n\tsearch for it.\n\nFrom-SVN: r255506", "tree": {"sha": "2485c2d642b628103a2d85dd86d4c6aeb9dc1714", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2485c2d642b628103a2d85dd86d4c6aeb9dc1714"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1cf82933e894cbdb21d63653c20258dc8c87997", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1cf82933e894cbdb21d63653c20258dc8c87997", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1cf82933e894cbdb21d63653c20258dc8c87997", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1cf82933e894cbdb21d63653c20258dc8c87997/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "da472c1b3bc8b2289f93cacaf75472556a3d85cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da472c1b3bc8b2289f93cacaf75472556a3d85cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da472c1b3bc8b2289f93cacaf75472556a3d85cd"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "dcd1fb685331d1a3f0cda09385303eff0819362a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1cf82933e894cbdb21d63653c20258dc8c87997/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1cf82933e894cbdb21d63653c20258dc8c87997/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1cf82933e894cbdb21d63653c20258dc8c87997", "patch": "@@ -1,3 +1,9 @@\n+2017-12-08  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR rtl-optimization/83304\n+\t* combine.c (move_deaths): If we do not know where a register died,\n+\tsearch for it.\n+\n 2017-12-08  Richard Biener  <rguenther@suse.de>\n \n \t* gimple-loop-interchange.cc (tree_loop_interchange::interchange):"}, {"sha": "786a84010d8e0eb8feef3c28fa025892f64411eb", "filename": "gcc/combine.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1cf82933e894cbdb21d63653c20258dc8c87997/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1cf82933e894cbdb21d63653c20258dc8c87997/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=b1cf82933e894cbdb21d63653c20258dc8c87997", "patch": "@@ -13876,6 +13876,26 @@ move_deaths (rtx x, rtx maybe_kill_insn, int from_luid, rtx_insn *to_insn,\n       unsigned int regno = REGNO (x);\n       rtx_insn *where_dead = reg_stat[regno].last_death;\n \n+      /* If we do not know where the register died, it may still die between\n+\t FROM_LUID and TO_INSN.  If so, find it.  This is PR83304.  */\n+      if (!where_dead)\n+\t{\n+\t  rtx_insn *insn = prev_real_insn (to_insn);\n+\t  while (insn\n+\t\t && BLOCK_FOR_INSN (insn) == BLOCK_FOR_INSN (to_insn)\n+\t\t && DF_INSN_LUID (insn) >= from_luid)\n+\t    {\n+\t      if (dead_or_set_regno_p (insn, regno))\n+\t\t{\n+\t\t  if (find_regno_note (insn, REG_DEAD, regno))\n+\t\t    where_dead = insn;\n+\t\t  break;\n+\t\t}\n+\n+\t      insn = prev_real_insn (insn);\n+\t    }\n+\t}\n+\n       /* Don't move the register if it gets killed in between from and to.  */\n       if (maybe_kill_insn && reg_set_p (x, maybe_kill_insn)\n \t  && ! reg_referenced_p (x, maybe_kill_insn))"}]}