{"sha": "c8dc49fb0318088e30040d1162cea181931f1ab4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhkYzQ5ZmIwMzE4MDg4ZTMwMDQwZDExNjJjZWExODE5MzFmMWFiNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-10-12T14:28:05Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-10-12T14:28:05Z"}, "message": "syscall, internal/syscall/unix: Fix getrandom, clone on sparc64\n    \n    Since sparc is a valid architecture, the name of\n    getrandom_linux_sparc.go means that it will be ignored on sparc64,\n    even though it's whitelisted with a +build line.\n    \n    On SPARC, clone has a unique return value convention which requires\n    some inline assembly to convert it to the normal convention.\n    \n    Reviewed-on: https://go-review.googlesource.com/30873\n\nFrom-SVN: r241051", "tree": {"sha": "bcfc25031f13595df938603e4e0d86327cfde9a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcfc25031f13595df938603e4e0d86327cfde9a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8dc49fb0318088e30040d1162cea181931f1ab4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8dc49fb0318088e30040d1162cea181931f1ab4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8dc49fb0318088e30040d1162cea181931f1ab4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8dc49fb0318088e30040d1162cea181931f1ab4/comments", "author": null, "committer": null, "parents": [{"sha": "a25f5b28d740a5ae7a81608e0b10df94f110d7a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a25f5b28d740a5ae7a81608e0b10df94f110d7a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a25f5b28d740a5ae7a81608e0b10df94f110d7a5"}], "stats": {"total": 176, "additions": 147, "deletions": 29}, "files": [{"sha": "d022604cc465d3b2f85e1fb127f93fa410477e0d", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8dc49fb0318088e30040d1162cea181931f1ab4/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8dc49fb0318088e30040d1162cea181931f1ab4/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=c8dc49fb0318088e30040d1162cea181931f1ab4", "patch": "@@ -1,4 +1,4 @@\n-03e53c928ebaa15a915eb1e1b07f193d83fc2852\n+d56717f8c434b3d6b753c027487681769e201e14\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "b4243e77ae89fbb54701c0a4e538a8e857587eb4", "filename": "libgo/Makefile.am", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8dc49fb0318088e30040d1162cea181931f1ab4/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8dc49fb0318088e30040d1162cea181931f1ab4/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=c8dc49fb0318088e30040d1162cea181931f1ab4", "patch": "@@ -736,6 +736,12 @@ s-epoll: Makefile\n \t$(SHELL) $(srcdir)/mvifdiff.sh epoll.go.tmp epoll.go\n \t$(STAMP) $@\n \n+if LIBGO_IS_LINUX\n+syscall_lib_clone_lo = syscall/clone_linux.lo\n+else\n+syscall_lib_clone_lo =\n+endif\n+\n libgo_go_objs = \\\n \tbufio.lo \\\n \tbytes.lo \\\n@@ -767,6 +773,7 @@ libgo_go_objs = \\\n \tstrings/index.lo \\\n \tsync.lo \\\n \tsyscall.lo \\\n+\t$(syscall_lib_clone_lo) \\\n \tsyscall/errno.lo \\\n \tsyscall/signame.lo \\\n \tsyscall/wait.lo \\\n@@ -2534,6 +2541,9 @@ syscall.lo.dep: $(srcdir)/go/syscall/*.go $(extra_go_files_syscall)\n \t$(BUILDDEPS)\n syscall.lo:\n \t$(BUILDPACKAGE)\n+syscall/clone_linux.lo: go/syscall/clone_linux.c runtime.inc\n+\t@$(MKDIR_P) syscall\n+\t$(LTCOMPILE) -c -o $@ $<\n syscall/errno.lo: go/syscall/errno.c runtime.inc\n \t@$(MKDIR_P) syscall\n \t$(LTCOMPILE) -c -o $@ $<"}, {"sha": "5c824e5c0b371af1dab36317c01cf38715887368", "filename": "libgo/Makefile.in", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8dc49fb0318088e30040d1162cea181931f1ab4/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8dc49fb0318088e30040d1162cea181931f1ab4/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=c8dc49fb0318088e30040d1162cea181931f1ab4", "patch": "@@ -168,21 +168,22 @@ libnetgo_a_DEPENDENCIES = netgo.o\n am_libnetgo_a_OBJECTS =\n libnetgo_a_OBJECTS = $(am_libnetgo_a_OBJECTS)\n LTLIBRARIES = $(toolexeclib_LTLIBRARIES)\n-am__DEPENDENCIES_1 = bufio.lo bytes.lo bytes/index.lo context.lo \\\n+@LIBGO_IS_LINUX_TRUE@am__DEPENDENCIES_1 = syscall/clone_linux.lo\n+am__DEPENDENCIES_2 = bufio.lo bytes.lo bytes/index.lo context.lo \\\n \tcrypto.lo encoding.lo errors.lo expvar.lo flag.lo fmt.lo \\\n \thash.lo html.lo image.lo io.lo log.lo math.lo mime.lo net.lo \\\n \tos.lo path.lo reflect-go.lo reflect/makefunc_ffi_c.lo \\\n \tregexp.lo runtime-go.lo sort.lo strconv.lo strings.lo \\\n-\tstrings/index.lo sync.lo syscall.lo syscall/errno.lo \\\n-\tsyscall/signame.lo syscall/wait.lo testing.lo time-go.lo \\\n-\tunicode.lo archive/tar.lo archive/zip.lo compress/bzip2.lo \\\n-\tcompress/flate.lo compress/gzip.lo compress/lzw.lo \\\n-\tcompress/zlib.lo container/heap.lo container/list.lo \\\n-\tcontainer/ring.lo crypto/aes.lo crypto/cipher.lo crypto/des.lo \\\n-\tcrypto/dsa.lo crypto/ecdsa.lo crypto/elliptic.lo \\\n-\tcrypto/hmac.lo crypto/md5.lo crypto/rand.lo crypto/rc4.lo \\\n-\tcrypto/rsa.lo crypto/sha1.lo crypto/sha256.lo crypto/sha512.lo \\\n-\tcrypto/subtle.lo crypto/tls.lo crypto/x509.lo \\\n+\tstrings/index.lo sync.lo syscall.lo $(am__DEPENDENCIES_1) \\\n+\tsyscall/errno.lo syscall/signame.lo syscall/wait.lo testing.lo \\\n+\ttime-go.lo unicode.lo archive/tar.lo archive/zip.lo \\\n+\tcompress/bzip2.lo compress/flate.lo compress/gzip.lo \\\n+\tcompress/lzw.lo compress/zlib.lo container/heap.lo \\\n+\tcontainer/list.lo container/ring.lo crypto/aes.lo \\\n+\tcrypto/cipher.lo crypto/des.lo crypto/dsa.lo crypto/ecdsa.lo \\\n+\tcrypto/elliptic.lo crypto/hmac.lo crypto/md5.lo crypto/rand.lo \\\n+\tcrypto/rc4.lo crypto/rsa.lo crypto/sha1.lo crypto/sha256.lo \\\n+\tcrypto/sha512.lo crypto/subtle.lo crypto/tls.lo crypto/x509.lo \\\n \tcrypto/x509/pkix.lo database/sql.lo database/sql/driver.lo \\\n \tdebug/dwarf.lo debug/elf.lo debug/gosym.lo debug/macho.lo \\\n \tdebug/pe.lo debug/plan9obj.lo encoding/ascii85.lo \\\n@@ -217,12 +218,12 @@ am__DEPENDENCIES_1 = bufio.lo bytes.lo bytes/index.lo context.lo \\\n \ttext/scanner.lo text/tabwriter.lo text/template.lo \\\n \ttext/template/parse.lo testing/iotest.lo testing/quick.lo \\\n \tunicode/utf16.lo unicode/utf8.lo\n-am__DEPENDENCIES_2 =\n-am__DEPENDENCIES_3 = $(am__DEPENDENCIES_1) \\\n-\t../libbacktrace/libbacktrace.la $(am__DEPENDENCIES_2) \\\n-\t$(am__DEPENDENCIES_2) $(am__DEPENDENCIES_2) \\\n-\t$(am__DEPENDENCIES_2) $(am__DEPENDENCIES_2)\n-libgo_llgo_la_DEPENDENCIES = $(am__DEPENDENCIES_3)\n+am__DEPENDENCIES_3 =\n+am__DEPENDENCIES_4 = $(am__DEPENDENCIES_2) \\\n+\t../libbacktrace/libbacktrace.la $(am__DEPENDENCIES_3) \\\n+\t$(am__DEPENDENCIES_3) $(am__DEPENDENCIES_3) \\\n+\t$(am__DEPENDENCIES_3) $(am__DEPENDENCIES_3)\n+libgo_llgo_la_DEPENDENCIES = $(am__DEPENDENCIES_4)\n @HAVE_SYS_MMAN_H_FALSE@am__objects_1 = mem_posix_memalign.lo\n @HAVE_SYS_MMAN_H_TRUE@am__objects_1 = mem.lo\n @LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_FALSE@am__objects_2 = netpoll_kqueue.lo\n@@ -272,7 +273,7 @@ libgo_llgo_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \\\n \t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\\n \t$(libgo_llgo_la_LDFLAGS) $(LDFLAGS) -o $@\n @GOC_IS_LLGO_TRUE@am_libgo_llgo_la_rpath = -rpath $(toolexeclibdir)\n-libgo_la_DEPENDENCIES = $(am__DEPENDENCIES_3)\n+libgo_la_DEPENDENCIES = $(am__DEPENDENCIES_4)\n am_libgo_la_OBJECTS = $(am__objects_6)\n libgo_la_OBJECTS = $(am_libgo_la_OBJECTS)\n libgo_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n@@ -948,6 +949,8 @@ SYSINFO_FLAGS = \\\n \t$(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\\n \t$(CPPFLAGS) $(OSCFLAGS) -O\n \n+@LIBGO_IS_LINUX_FALSE@syscall_lib_clone_lo = \n+@LIBGO_IS_LINUX_TRUE@syscall_lib_clone_lo = syscall/clone_linux.lo\n libgo_go_objs = \\\n \tbufio.lo \\\n \tbytes.lo \\\n@@ -979,6 +982,7 @@ libgo_go_objs = \\\n \tstrings/index.lo \\\n \tsync.lo \\\n \tsyscall.lo \\\n+\t$(syscall_lib_clone_lo) \\\n \tsyscall/errno.lo \\\n \tsyscall/signame.lo \\\n \tsyscall/wait.lo \\\n@@ -5109,6 +5113,9 @@ syscall.lo.dep: $(srcdir)/go/syscall/*.go $(extra_go_files_syscall)\n \t$(BUILDDEPS)\n syscall.lo:\n \t$(BUILDPACKAGE)\n+syscall/clone_linux.lo: go/syscall/clone_linux.c runtime.inc\n+\t@$(MKDIR_P) syscall\n+\t$(LTCOMPILE) -c -o $@ $<\n syscall/errno.lo: go/syscall/errno.c runtime.inc\n \t@$(MKDIR_P) syscall\n \t$(LTCOMPILE) -c -o $@ $<"}, {"sha": "4874ec1bd8602514398dbdc1da53bcb41f86d657", "filename": "libgo/go/internal/syscall/unix/getrandom_linux_sparcx.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8dc49fb0318088e30040d1162cea181931f1ab4/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fgetrandom_linux_sparcx.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8dc49fb0318088e30040d1162cea181931f1ab4/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fgetrandom_linux_sparcx.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fsyscall%2Funix%2Fgetrandom_linux_sparcx.go?ref=c8dc49fb0318088e30040d1162cea181931f1ab4", "previous_filename": "libgo/go/internal/syscall/unix/getrandom_linux_sparc.go"}, {"sha": "a1a15ea05d8da710b55922852ee3c021a08855ef", "filename": "libgo/go/syscall/clone_linux.c", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8dc49fb0318088e30040d1162cea181931f1ab4/libgo%2Fgo%2Fsyscall%2Fclone_linux.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8dc49fb0318088e30040d1162cea181931f1ab4/libgo%2Fgo%2Fsyscall%2Fclone_linux.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fclone_linux.c?ref=c8dc49fb0318088e30040d1162cea181931f1ab4", "patch": "@@ -0,0 +1,100 @@\n+/* clone_linux.c -- consistent wrapper around Linux clone syscall\n+\n+   Copyright 2016 The Go Authors. All rights reserved.\n+   Use of this source code is governed by a BSD-style\n+   license that can be found in the LICENSE file.  */\n+\n+#include <errno.h>\n+#include <asm/ptrace.h>\n+#include <sys/syscall.h>\n+\n+#include \"runtime.h\"\n+\n+long rawClone (unsigned long flags, void *child_stack, void *ptid, void *ctid, struct pt_regs *regs) __asm__ (GOSYM_PREFIX \"syscall.rawClone\");\n+\n+long\n+rawClone (unsigned long flags, void *child_stack, void *ptid, void *ctid, struct pt_regs *regs)\n+{\n+#if defined(__arc__) || defined(__aarch64__) || defined(__arm__) || defined(__mips__) || defined(__hppa__) || defined(__powerpc__) || defined(__score__) || defined(__i386__) || defined(__xtensa__)\n+  // CLONE_BACKWARDS\n+  return syscall(__NR_clone, flags, child_stack, ptid, regs, ctid);\n+#elif defined(__s390__) || defined(__cris__)\n+  // CLONE_BACKWARDS2\n+  return syscall(__NR_clone, child_stack, flags, ptid, ctid, regs);\n+#elif defined(__microblaze__)\n+  // CLONE_BACKWARDS3\n+  return syscall(__NR_clone, flags, child_stack, 0, ptid, ctid, regs);\n+#elif defined(__sparc__)\n+\n+  /* SPARC has a unique return value convention:\n+\n+     Parent -->  %o0 == child's  pid, %o1 == 0\n+     Child  -->  %o0 == parent's pid, %o1 == 1\n+\n+     Translate this to look like a normal clone.  */\n+\n+# if defined(__arch64__)\n+\n+#  define SYSCALL_STRING\t\t\t\t\t\t\\\n+\t\"ta\t0x6d;\"\t\t\t\t\t\t\t\\\n+\t\"bcc,pt\t%%xcc, 1f;\"\t\t\t\t\t\t\\\n+\t\" mov\t0, %%g1;\"\t\t\t\t\t\t\\\n+\t\"sub\t%%g0, %%o0, %%o0;\"\t\t\t\t\t\\\n+\t\"mov\t1, %%g1;\"\t\t\t\t\t\t\\\n+\t\"1:\"\n+\n+#  define SYSCALL_CLOBBERS\t\t\t\t\t\t\\\n+\t\"f0\", \"f1\", \"f2\", \"f3\", \"f4\", \"f5\", \"f6\", \"f7\",\t\t\t\\\n+\t\"f8\", \"f9\", \"f10\", \"f11\", \"f12\", \"f13\", \"f14\", \"f15\",\t\t\\\n+\t\"f16\", \"f17\", \"f18\", \"f19\", \"f20\", \"f21\", \"f22\", \"f23\",\t\t\\\n+\t\"f24\", \"f25\", \"f26\", \"f27\", \"f28\", \"f29\", \"f30\", \"f31\",\t\t\\\n+\t\"f32\", \"f34\", \"f36\", \"f38\", \"f40\", \"f42\", \"f44\", \"f46\",\t\t\\\n+\t\"f48\", \"f50\", \"f52\", \"f54\", \"f56\", \"f58\", \"f60\", \"f62\",\t\t\\\n+\t\"cc\", \"memory\"\n+\n+# else /* __arch64__ */\n+\n+#  define SYSCALL_STRING\t\t\t\t\t\t\\\n+\t\"ta\t0x10;\"\t\t\t\t\t\t\t\\\n+\t\"bcc\t1f;\"\t\t\t\t\t\t\t\\\n+\t\" mov\t0, %%g1;\"\t\t\t\t\t\t\\\n+\t\"sub\t%%g0, %%o0, %%o0;\"\t\t\t\t\t\\\n+\t\"mov\t1, %%g1;\"\t\t\t\t\t\t\\\n+\t\"1:\"\n+\n+#  define SYSCALL_CLOBBERS\t\t\t\t\t\t\\\n+\t\"f0\", \"f1\", \"f2\", \"f3\", \"f4\", \"f5\", \"f6\", \"f7\",\t\t\t\\\n+\t\"f8\", \"f9\", \"f10\", \"f11\", \"f12\", \"f13\", \"f14\", \"f15\",\t\t\\\n+\t\"f16\", \"f17\", \"f18\", \"f19\", \"f20\", \"f21\", \"f22\", \"f23\",\t\t\\\n+\t\"f24\", \"f25\", \"f26\", \"f27\", \"f28\", \"f29\", \"f30\", \"f31\",\t\t\\\n+\t\"cc\", \"memory\"\n+\n+# endif /* __arch64__ */\n+\n+  register long o0 __asm__ (\"o0\") = (long)flags;\n+  register long o1 __asm__ (\"o1\") = (long)child_stack;\n+  register long o2 __asm__ (\"o2\") = (long)ptid;\n+  register long o3 __asm__ (\"o3\") = (long)ctid;\n+  register long o4 __asm__ (\"o4\") = (long)regs;\n+  register long g1 __asm__ (\"g1\") = __NR_clone;\n+\n+  __asm __volatile (SYSCALL_STRING :\n+\t\t    \"=r\" (g1), \"=r\" (o0), \"=r\" (o1) :\n+\t\t    \"0\" (g1), \"1\" (o0), \"2\" (o1),\n+\t\t    \"r\" (o2), \"r\" (o3), \"r\" (o4) :\n+\t\t    SYSCALL_CLOBBERS);\n+\n+  if (__builtin_expect(g1 != 0, 0))\n+    {\n+      errno = -o0;\n+      o0 = -1L;\n+    }\n+  else\n+    o0 &= (o1 - 1);\n+\n+  return o0;\n+\n+#else\n+  return syscall(__NR_clone, flags, child_stack, ptid, ctid, regs);\n+#endif\n+}"}, {"sha": "83d9c1ca2dbab2755b37290f43159fb4db4e6636", "filename": "libgo/go/syscall/exec_linux.go", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8dc49fb0318088e30040d1162cea181931f1ab4/libgo%2Fgo%2Fsyscall%2Fexec_linux.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8dc49fb0318088e30040d1162cea181931f1ab4/libgo%2Fgo%2Fsyscall%2Fexec_linux.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fexec_linux.go?ref=c8dc49fb0318088e30040d1162cea181931f1ab4", "patch": "@@ -7,7 +7,6 @@\n package syscall\n \n import (\n-\t\"runtime\"\n \t\"unsafe\"\n )\n \n@@ -49,6 +48,9 @@ type SysProcAttr struct {\n func runtime_BeforeFork()\n func runtime_AfterFork()\n \n+// Implemented in clone_linux.c\n+func rawClone(flags _C_ulong, child_stack *byte, ptid *Pid_t, ctid *Pid_t, regs unsafe.Pointer) _C_long\n+\n // Fork, dup fd onto 0..len(fd), and exec(argv0, argvv, envv) in child.\n // If a dup or exec fails, write the errno error to pipe.\n // (Pipe is close-on-exec so if exec succeeds, it will be closed.)\n@@ -64,6 +66,7 @@ func forkAndExecInChild(argv0 *byte, argv, envv []*byte, chroot, dir *byte, attr\n \t// declarations require heap allocation (e.g., err1).\n \tvar (\n \t\tr1     uintptr\n+\t\tr2     _C_long\n \t\terr1   Errno\n \t\terr2   Errno\n \t\tnextfd int\n@@ -98,20 +101,16 @@ func forkAndExecInChild(argv0 *byte, argv, envv []*byte, chroot, dir *byte, attr\n \t// About to call fork.\n \t// No more allocation or calls of non-assembly functions.\n \truntime_BeforeFork()\n-\tif runtime.GOARCH == \"s390x\" || runtime.GOARCH == \"s390\" {\n-\t\tr1, _, err1 = RawSyscall6(SYS_CLONE, 0, uintptr(SIGCHLD)|sys.Cloneflags, 0, 0, 0, 0)\n-\t} else {\n-\t\tr1, _, err1 = RawSyscall6(SYS_CLONE, uintptr(SIGCHLD)|sys.Cloneflags, 0, 0, 0, 0, 0)\n-\t}\n-\tif err1 != 0 {\n+\tr2 = rawClone(_C_ulong(uintptr(SIGCHLD)|sys.Cloneflags), nil, nil, nil, unsafe.Pointer(nil))\n+\tif r2 < 0 {\n \t\truntime_AfterFork()\n-\t\treturn 0, err1\n+\t\treturn 0, GetErrno()\n \t}\n \n-\tif r1 != 0 {\n+\tif r2 != 0 {\n \t\t// parent; return PID\n \t\truntime_AfterFork()\n-\t\tpid = int(r1)\n+\t\tpid = int(r2)\n \n \t\tif sys.UidMappings != nil || sys.GidMappings != nil {\n \t\t\tClose(p[0])"}, {"sha": "f79b5cfd7d8491e88edebd7f2526482be75862da", "filename": "libgo/mksysinfo.sh", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8dc49fb0318088e30040d1162cea181931f1ab4/libgo%2Fmksysinfo.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8dc49fb0318088e30040d1162cea181931f1ab4/libgo%2Fmksysinfo.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmksysinfo.sh?ref=c8dc49fb0318088e30040d1162cea181931f1ab4", "patch": "@@ -349,8 +349,10 @@ fi\n sizeof_long=`grep '^const ___SIZEOF_LONG__ = ' gen-sysinfo.go | sed -e 's/.*= //'`\n if test \"$sizeof_long\" = \"4\"; then\n   echo \"type _C_long int32\" >> ${OUT}\n+  echo \"type _C_ulong uint32\" >> ${OUT}\n elif test \"$sizeof_long\" = \"8\"; then\n   echo \"type _C_long int64\" >> ${OUT}\n+  echo \"type _C_ulong uint64\" >> ${OUT}\n else\n   echo 1>&2 \"mksysinfo.sh: could not determine size of long (got $sizeof_long)\"\n   exit 1"}]}