{"sha": "da8f950b26fef3318eb6b05da1ca9d321486b54c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE4Zjk1MGIyNmZlZjMzMThlYjZiMDVkYTFjYTlkMzIxNDg2YjU0Yw==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-04-02T19:34:55Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-04-05T10:01:47Z"}, "message": "Address 'gcc/rust/typecheck/rust-tyty.h' '-Werror=unused-parameter' diagnostics [#336]\n\n    In file included from [...]/gcc/rust/typecheck/rust-hir-type-check.h:24,\n                     from [...]/gcc/rust/resolve/rust-name-resolver.h:24,\n                     from [...]/gcc/rust/resolve/rust-ast-resolve.h:22,\n                     from [...]/gcc/rust/rust-session-manager.cc:36:\n    [...]/gcc/rust/typecheck/rust-tyty.h: In constructor \u2018Rust::TyTy::USizeType::USizeType(Rust::HirId, std::set<unsigned int>)\u2019:\n    [...]/gcc/rust/typecheck/rust-tyty.h:972:41: error: unused parameter \u2018refs\u2019 [-Werror=unused-parameter]\n      972 |   USizeType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n          |                         ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    [...]/gcc/rust/typecheck/rust-tyty.h: In constructor \u2018Rust::TyTy::USizeType::USizeType(Rust::HirId, Rust::HirId, std::set<unsigned int>)\u2019:\n    [...]/gcc/rust/typecheck/rust-tyty.h:976:55: error: unused parameter \u2018refs\u2019 [-Werror=unused-parameter]\n      976 |   USizeType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n          |                                       ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    [...]/gcc/rust/typecheck/rust-tyty.h: In constructor \u2018Rust::TyTy::ISizeType::ISizeType(Rust::HirId, std::set<unsigned int>)\u2019:\n    [...]/gcc/rust/typecheck/rust-tyty.h:994:41: error: unused parameter \u2018refs\u2019 [-Werror=unused-parameter]\n      994 |   ISizeType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n          |                         ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    [...]/gcc/rust/typecheck/rust-tyty.h: In constructor \u2018Rust::TyTy::ISizeType::ISizeType(Rust::HirId, Rust::HirId, std::set<unsigned int>)\u2019:\n    [...]/gcc/rust/typecheck/rust-tyty.h:998:55: error: unused parameter \u2018refs\u2019 [-Werror=unused-parameter]\n      998 |   ISizeType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n          |                                       ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    [...]/gcc/rust/typecheck/rust-tyty.h: In constructor \u2018Rust::TyTy::CharType::CharType(Rust::HirId, std::set<unsigned int>)\u2019:\n    [...]/gcc/rust/typecheck/rust-tyty.h:1016:40: error: unused parameter \u2018refs\u2019 [-Werror=unused-parameter]\n     1016 |   CharType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n          |                        ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    [...]/gcc/rust/typecheck/rust-tyty.h: In constructor \u2018Rust::TyTy::CharType::CharType(Rust::HirId, Rust::HirId, std::set<unsigned int>)\u2019:\n    [...]/gcc/rust/typecheck/rust-tyty.h:1020:54: error: unused parameter \u2018refs\u2019 [-Werror=unused-parameter]\n     1020 |   CharType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n          |                                      ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    [...]/gcc/rust/typecheck/rust-tyty.h: In constructor \u2018Rust::TyTy::ReferenceType::ReferenceType(Rust::HirId, Rust::TyTy::TyVar, std::set<unsigned int>)\u2019:\n    [...]/gcc/rust/typecheck/rust-tyty.h:1040:34: error: unused parameter \u2018refs\u2019 [-Werror=unused-parameter]\n     1040 |                  std::set<HirId> refs = std::set<HirId> ())\n          |                  ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    [...]/gcc/rust/typecheck/rust-tyty.h: In constructor \u2018Rust::TyTy::ReferenceType::ReferenceType(Rust::HirId, Rust::HirId, Rust::TyTy::TyVar, std::set<unsigned int>)\u2019:\n    [...]/gcc/rust/typecheck/rust-tyty.h:1045:34: error: unused parameter \u2018refs\u2019 [-Werror=unused-parameter]\n     1045 |                  std::set<HirId> refs = std::set<HirId> ())\n          |                  ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    [...]/gcc/rust/typecheck/rust-tyty.h: In constructor \u2018Rust::TyTy::StrType::StrType(Rust::HirId, std::set<unsigned int>)\u2019:\n    [...]/gcc/rust/typecheck/rust-tyty.h:1070:39: error: unused parameter \u2018refs\u2019 [-Werror=unused-parameter]\n     1070 |   StrType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n          |                       ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    [...]/gcc/rust/typecheck/rust-tyty.h: In constructor \u2018Rust::TyTy::StrType::StrType(Rust::HirId, Rust::HirId, std::set<unsigned int>)\u2019:\n    [...]/gcc/rust/typecheck/rust-tyty.h:1074:53: error: unused parameter \u2018refs\u2019 [-Werror=unused-parameter]\n     1074 |   StrType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n          |                                     ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~", "tree": {"sha": "34ae5b35b9d607f102ae275bc3e979f675801e67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34ae5b35b9d607f102ae275bc3e979f675801e67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da8f950b26fef3318eb6b05da1ca9d321486b54c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da8f950b26fef3318eb6b05da1ca9d321486b54c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da8f950b26fef3318eb6b05da1ca9d321486b54c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da8f950b26fef3318eb6b05da1ca9d321486b54c/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb8b27a423d9c74f05e742895febfebc7ce3cb37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb8b27a423d9c74f05e742895febfebc7ce3cb37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb8b27a423d9c74f05e742895febfebc7ce3cb37"}], "stats": {"total": 51, "additions": 40, "deletions": 11}, "files": [{"sha": "8ba9a9cdb3fe8037082b06d67ac99a5a8ff0cdae", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 40, "deletions": 11, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8f950b26fef3318eb6b05da1ca9d321486b54c/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8f950b26fef3318eb6b05da1ca9d321486b54c/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=da8f950b26fef3318eb6b05da1ca9d321486b54c", "patch": "@@ -971,11 +971,17 @@ class USizeType : public BaseType\n public:\n   USizeType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::USIZE)\n-  {}\n+  {\n+    //TODO unused; should 'refs' be passed as the last argument to the 'BaseType' constructor call?  Potential change in behavior (if 'refs' is provided by caller)?\n+    (void) refs;\n+  }\n \n   USizeType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::USIZE)\n-  {}\n+  {\n+    //TODO unused; should 'refs' be passed as the last argument to the 'BaseType' constructor call?  Potential change in behavior (if 'refs' is provided by caller)?\n+    (void) refs;\n+  }\n \n   void accept_vis (TyVisitor &vis) override;\n \n@@ -993,11 +999,17 @@ class ISizeType : public BaseType\n public:\n   ISizeType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::ISIZE)\n-  {}\n+  {\n+    //TODO unused; should 'refs' be passed as the last argument to the 'BaseType' constructor call?  Potential change in behavior (if 'refs' is provided by caller)?\n+    (void) refs;\n+  }\n \n   ISizeType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::ISIZE)\n-  {}\n+  {\n+    //TODO unused; should 'refs' be passed as the last argument to the 'BaseType' constructor call?  Potential change in behavior (if 'refs' is provided by caller)?\n+    (void) refs;\n+  }\n \n   void accept_vis (TyVisitor &vis) override;\n \n@@ -1015,12 +1027,17 @@ class CharType : public BaseType\n public:\n   CharType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::CHAR)\n-  {}\n+  {\n+    //TODO unused; should 'refs' be passed as the last argument to the 'BaseType' constructor call?  Potential change in behavior (if 'refs' is provided by caller)?\n+    (void) refs;\n+  }\n \n   CharType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::CHAR)\n-\n-  {}\n+  {\n+    //TODO unused; should 'refs' be passed as the last argument to the 'BaseType' constructor call?  Potential change in behavior (if 'refs' is provided by caller)?\n+    (void) refs;\n+  }\n \n   void accept_vis (TyVisitor &vis) override;\n \n@@ -1039,12 +1056,18 @@ class ReferenceType : public BaseType\n   ReferenceType (HirId ref, TyVar base,\n \t\t std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::REF), base (base)\n-  {}\n+  {\n+    //TODO unused; should 'refs' be passed as the last argument to the 'BaseType' constructor call?  Potential change in behavior (if 'refs' is provided by caller)?\n+    (void) refs;\n+  }\n \n   ReferenceType (HirId ref, HirId ty_ref, TyVar base,\n \t\t std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::REF), base (base)\n-  {}\n+  {\n+    //TODO unused; should 'refs' be passed as the last argument to the 'BaseType' constructor call?  Potential change in behavior (if 'refs' is provided by caller)?\n+    (void) refs;\n+  }\n \n   BaseType *get_base () const;\n \n@@ -1069,11 +1092,17 @@ class StrType : public BaseType\n public:\n   StrType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::STR)\n-  {}\n+  {\n+    //TODO unused; should 'refs' be passed as the last argument to the 'BaseType' constructor call?  Potential change in behavior (if 'refs' is provided by caller)?\n+    (void) refs;\n+  }\n \n   StrType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::STR)\n-  {}\n+  {\n+    //TODO unused; should 'refs' be passed as the last argument to the 'BaseType' constructor call?  Potential change in behavior (if 'refs' is provided by caller)?\n+    (void) refs;\n+  }\n \n   std::string get_name () const override final { return as_string (); }\n "}]}