{"sha": "3b0eee5d58175e688fe3fe6f7538db7b96e7f9b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IwZWVlNWQ1ODE3NWU2ODhmZTNmZTZmNzUzOGRiN2I5NmU3ZjliOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2011-08-27T10:44:00Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-08-27T10:44:00Z"}, "message": "sse.md (*absneg<mode>2): Fix split condition.\n\n\t* config/i386/sse.md (*absneg<mode>2): Fix split condition.\n\t(vec_extract_lo_<mode>): Prevent both operands in memory.\n\t(vec_extract_lo_v16hi): Ditto.\n\t(*vec_extract_v4sf_mem): Add TARGET_SSE insn constraint.\n\n\t* config/i386/sse.md (mulv16qi3): Attach REG_EQUAL note.\n\t(*sse2_mulv4si3): Ditto.\n\t(mulv2di3): Ditto.\n\t* config/i386/i386.c (legitimize_tls_address): Change REG_EQIV\n\tnotes to REG_EQUAL.\n\nFrom-SVN: r178132", "tree": {"sha": "90a03f17b60baaf7d5bf48876a3f0c5103628510", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90a03f17b60baaf7d5bf48876a3f0c5103628510"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b0eee5d58175e688fe3fe6f7538db7b96e7f9b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b0eee5d58175e688fe3fe6f7538db7b96e7f9b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b0eee5d58175e688fe3fe6f7538db7b96e7f9b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b0eee5d58175e688fe3fe6f7538db7b96e7f9b8/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b807694e275968b94ea4363e032c057ada5a5da9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b807694e275968b94ea4363e032c057ada5a5da9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b807694e275968b94ea4363e032c057ada5a5da9"}], "stats": {"total": 48, "additions": 36, "deletions": 12}, "files": [{"sha": "b1cde85e4a712d4f934a3332b90a2114a88a71dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0eee5d58175e688fe3fe6f7538db7b96e7f9b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0eee5d58175e688fe3fe6f7538db7b96e7f9b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b0eee5d58175e688fe3fe6f7538db7b96e7f9b8", "patch": "@@ -1,9 +1,24 @@\n+2011-08-27  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (*absneg<mode>2): Fix split condition.\n+\t(vec_extract_lo_<mode>): Prevent both operands in memory.\n+\t(vec_extract_lo_v16hi): Ditto.\n+\t(*vec_extract_v4sf_mem): Add TARGET_SSE insn constraint.\n+\n+2011-08-27  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (mulv16qi3): Attach REG_EQUAL note.\n+\t(*sse2_mulv4si3): Ditto.\n+\t(mulv2di3): Ditto.\n+\t* config/i386/i386.c (legitimize_tls_address): Change REG_EQIV\n+\tnotes to REG_EQUAL.\n+\n 2011-08-27  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/50202\n \t* config/i386/sse.md (sse4_2_pcmpestr): Emit NOTE_INSN_DELETED note\n \twhen all outputs are unused.\n-\t(sse4_2_pcmpestr): Ditto.\n+\t(sse4_2_pcmpistr): Ditto.\n \n 2011-08-26  Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "bfb42a4e4214d676803cc0a702d82e9544c8b60a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0eee5d58175e688fe3fe6f7538db7b96e7f9b8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0eee5d58175e688fe3fe6f7538db7b96e7f9b8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3b0eee5d58175e688fe3fe6f7538db7b96e7f9b8", "patch": "@@ -12268,7 +12268,7 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n \t  tp = get_thread_pointer (true);\n \t  dest = force_reg (Pmode, gen_rtx_PLUS (Pmode, tp, dest));\n \n-\t  set_unique_reg_note (get_last_insn (), REG_EQUIV, x);\n+\t  set_unique_reg_note (get_last_insn (), REG_EQUAL, x);\n \t}\n       else\n \t{\n@@ -12315,7 +12315,7 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n \t    emit_insn (gen_tls_dynamic_gnu2_32 (base, tmp, pic));\n \n \t  tp = get_thread_pointer (true);\n-\t  set_unique_reg_note (get_last_insn (), REG_EQUIV,\n+\t  set_unique_reg_note (get_last_insn (), REG_EQUAL,\n \t\t\t       gen_rtx_MINUS (Pmode, tmp, tp));\n \t}\n       else\n@@ -12331,7 +12331,7 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n \t      insns = get_insns ();\n \t      end_sequence ();\n \n-\t      /* Attach a unique REG_EQUIV, to allow the RTL optimizers to\n+\t      /* Attach a unique REG_EQUAL, to allow the RTL optimizers to\n \t\t share the LD_BASE result with other LD model accesses.  */\n \t      eqv = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, const0_rtx),\n \t\t\t\t    UNSPEC_TLS_LD_BASE);\n@@ -12352,7 +12352,7 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n \t{\n \t  dest = force_reg (Pmode, gen_rtx_PLUS (Pmode, dest, tp));\n \n-\t  set_unique_reg_note (get_last_insn (), REG_EQUIV, x);\n+\t  set_unique_reg_note (get_last_insn (), REG_EQUAL, x);\n \t}\n       break;\n "}, {"sha": "fa22e9a11dbc0808e4fffd5922c919dfd116a993", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0eee5d58175e688fe3fe6f7538db7b96e7f9b8/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0eee5d58175e688fe3fe6f7538db7b96e7f9b8/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=3b0eee5d58175e688fe3fe6f7538db7b96e7f9b8", "patch": "@@ -648,7 +648,7 @@\n    (use (match_operand:VF 2 \"nonimmediate_operand\"    \"xm,0, xm,x\"))]\n   \"TARGET_SSE\"\n   \"#\"\n-  \"reload_completed\"\n+  \"&& reload_completed\"\n   [(const_int 0)]\n {\n   enum rtx_code absneg_op;\n@@ -3708,7 +3708,7 @@\n \t(vec_select:<ssehalfvecmode>\n \t  (match_operand:VI8F_256 1 \"nonimmediate_operand\" \"xm,x\")\n \t  (parallel [(const_int 0) (const_int 1)])))]\n-  \"TARGET_AVX\"\n+  \"TARGET_AVX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n@@ -3742,7 +3742,7 @@\n \t  (match_operand:VI4F_256 1 \"nonimmediate_operand\" \"xm,x\")\n \t  (parallel [(const_int 0) (const_int 1)\n \t\t     (const_int 2) (const_int 3)])))]\n-  \"TARGET_AVX\"\n+  \"TARGET_AVX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n@@ -3779,7 +3779,7 @@\n \t\t     (const_int 2) (const_int 3)\n \t\t     (const_int 4) (const_int 5)\n \t\t     (const_int 6) (const_int 7)])))]\n-  \"TARGET_AVX\"\n+  \"TARGET_AVX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n@@ -3822,7 +3822,7 @@\n \t\t     (const_int 10) (const_int 11)\n \t\t     (const_int 12) (const_int 13)\n \t\t     (const_int 14) (const_int 15)])))]\n-  \"TARGET_AVX\"\n+  \"TARGET_AVX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n@@ -3876,9 +3876,9 @@\n        (vec_select:SF\n \t (match_operand:V4SF 1 \"memory_operand\" \"o\")\n \t (parallel [(match_operand 2 \"const_0_to_3_operand\" \"n\")])))]\n-  \"\"\n+  \"TARGET_SSE\"\n   \"#\"\n-  \"reload_completed\"\n+  \"&& reload_completed\"\n   [(const_int 0)]\n {\n   int i = INTVAL (operands[2]);\n@@ -4726,6 +4726,9 @@\n \n   /* Extract the even bytes and merge them back together.  */\n   ix86_expand_vec_extract_even_odd (operands[0], t[5], t[4], 0);\n+\n+  set_unique_reg_note (get_last_insn (), REG_EQUAL,\n+\t\t       gen_rtx_MULT (V16QImode, operands[1], operands[2]));\n   DONE;\n })\n \n@@ -5179,6 +5182,9 @@\n \n   /* Merge the parts back together.  */\n   emit_insn (gen_vec_interleave_lowv4si (op0, t5, t6));\n+\n+  set_unique_reg_note (get_last_insn (), REG_EQUAL,\n+\t\t       gen_rtx_MULT (V4SImode, operands[1], operands[2]));\n   DONE;\n })\n \n@@ -5261,6 +5267,9 @@\n       emit_insn (gen_addv2di3 (t6, t1, t4));\n       emit_insn (gen_addv2di3 (op0, t6, t5));\n     }\n+\n+  set_unique_reg_note (get_last_insn (), REG_EQUAL,\n+\t\t       gen_rtx_MULT (V2DImode, operands[1], operands[2]));\n   DONE;\n })\n "}]}