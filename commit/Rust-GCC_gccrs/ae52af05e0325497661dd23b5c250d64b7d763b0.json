{"sha": "ae52af05e0325497661dd23b5c250d64b7d763b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU1MmFmMDVlMDMyNTQ5NzY2MWRkMjNiNWMyNTBkNjRiN2Q3NjNiMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-06-27T19:19:18Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-06-27T19:19:18Z"}, "message": "parser.c (cp_parser_check_for_invalid_template_id): tag_type parm.\n\n\t* parser.c (cp_parser_check_for_invalid_template_id): tag_type parm.\n\t(cp_parser_simple_type_specifier, cp_parser_class_head): Adjust.\n\t(cp_parser_elaborated_type_specifier): Adjust.\n\t* decl.c (duplicate_decls): Return error_mark_node on template\n\tmismatch.\n\nFrom-SVN: r189025", "tree": {"sha": "08122aded3c3507e845d04fc40532dd8e0a2adcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08122aded3c3507e845d04fc40532dd8e0a2adcb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae52af05e0325497661dd23b5c250d64b7d763b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae52af05e0325497661dd23b5c250d64b7d763b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae52af05e0325497661dd23b5c250d64b7d763b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae52af05e0325497661dd23b5c250d64b7d763b0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b298aa9b28071d113229192d5d2ea7399f67cb48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b298aa9b28071d113229192d5d2ea7399f67cb48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b298aa9b28071d113229192d5d2ea7399f67cb48"}], "stats": {"total": 42, "additions": 32, "deletions": 10}, "files": [{"sha": "00e9ca07cf81536d5a1ac39c1f6c97657f6f8b67", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae52af05e0325497661dd23b5c250d64b7d763b0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae52af05e0325497661dd23b5c250d64b7d763b0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ae52af05e0325497661dd23b5c250d64b7d763b0", "patch": "@@ -1,5 +1,11 @@\n 2012-06-27  Jason Merrill  <jason@redhat.com>\n \n+\t* parser.c (cp_parser_check_for_invalid_template_id): tag_type parm.\n+\t(cp_parser_simple_type_specifier, cp_parser_class_head): Adjust.\n+\t(cp_parser_elaborated_type_specifier): Adjust.\n+\t* decl.c (duplicate_decls): Return error_mark_node on template\n+\tmismatch.\n+\n \tPR c++/53563\n \t* parser.c (cp_parser_template_id): Add tag_type parm.\n \t(cp_parser_template_name): Likewise."}, {"sha": "ab560199cedd41ad59c105f05079cf0b326fd0fc", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae52af05e0325497661dd23b5c250d64b7d763b0/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae52af05e0325497661dd23b5c250d64b7d763b0/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ae52af05e0325497661dd23b5c250d64b7d763b0", "patch": "@@ -1463,6 +1463,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t    {\n \t      error (\"declaration of template %q#D\", newdecl);\n \t      error (\"conflicts with previous declaration %q+#D\", olddecl);\n+\t      return error_mark_node;\n \t    }\n \t  else if (TREE_CODE (DECL_TEMPLATE_RESULT (olddecl)) == FUNCTION_DECL\n \t\t   && TREE_CODE (DECL_TEMPLATE_RESULT (newdecl)) == FUNCTION_DECL"}, {"sha": "027a7b9d07afcdb7de006561d5d3a4a2ef830e9a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae52af05e0325497661dd23b5c250d64b7d763b0/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae52af05e0325497661dd23b5c250d64b7d763b0/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ae52af05e0325497661dd23b5c250d64b7d763b0", "patch": "@@ -2278,7 +2278,7 @@ static bool cp_parser_check_type_definition\n static void cp_parser_check_for_definition_in_return_type\n   (cp_declarator *, tree, location_t type_location);\n static void cp_parser_check_for_invalid_template_id\n-  (cp_parser *, tree, location_t location);\n+  (cp_parser *, tree, enum tag_types, location_t location);\n static bool cp_parser_non_integral_constant_expression\n   (cp_parser *, non_integral_constant);\n static void cp_parser_diagnose_invalid_type_name\n@@ -2551,7 +2551,9 @@ cp_parser_check_for_definition_in_return_type (cp_declarator *declarator,\n \n static void\n cp_parser_check_for_invalid_template_id (cp_parser* parser,\n-\t\t\t\t\t tree type, location_t location)\n+\t\t\t\t\t tree type,\n+\t\t\t\t\t enum tag_types tag_type,\n+\t\t\t\t\t location_t location)\n {\n   cp_token_position start = 0;\n \n@@ -2560,7 +2562,12 @@ cp_parser_check_for_invalid_template_id (cp_parser* parser,\n       if (TYPE_P (type))\n \terror_at (location, \"%qT is not a template\", type);\n       else if (TREE_CODE (type) == IDENTIFIER_NODE)\n-\terror_at (location, \"%qE is not a template\", type);\n+\t{\n+\t  if (tag_type != none_type)\n+\t    error_at (location, \"%qE is not a class template\", type);\n+\t  else\n+\t    error_at (location, \"%qE is not a template\", type);\n+\t}\n       else\n \terror_at (location, \"invalid template-id\");\n       /* Remember the location of the invalid \"<\".  */\n@@ -13668,7 +13675,8 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n       /* There is no valid C++ program where a non-template type is\n \t followed by a \"<\".  That usually indicates that the user thought\n \t that the type was a template.  */\n-      cp_parser_check_for_invalid_template_id (parser, type, token->location);\n+      cp_parser_check_for_invalid_template_id (parser, type, none_type,\n+\t\t\t\t\t       token->location);\n \n       return TYPE_NAME (type);\n     }\n@@ -13770,6 +13778,7 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n \t followed by a \"<\".  That usually indicates that the user\n \t thought that the type was a template.  */\n       cp_parser_check_for_invalid_template_id (parser, TREE_TYPE (type),\n+\t\t\t\t\t       none_type,\n \t\t\t\t\t       token->location);\n     }\n \n@@ -14273,7 +14282,8 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n \n   /* A \"<\" cannot follow an elaborated type specifier.  If that\n      happens, the user was probably trying to form a template-id.  */\n-  cp_parser_check_for_invalid_template_id (parser, type, token->location);\n+  cp_parser_check_for_invalid_template_id (parser, type, tag_type,\n+\t\t\t\t\t   token->location);\n \n   return type;\n }\n@@ -18429,6 +18439,7 @@ cp_parser_class_head (cp_parser* parser,\n   if (id)\n     {\n       cp_parser_check_for_invalid_template_id (parser, id,\n+\t\t\t\t\t       class_key,\n                                                type_start_token->location);\n     }\n   virt_specifiers = cp_parser_virt_specifier_seq_opt (parser);"}, {"sha": "4217e6a6675f240158e8de11b1f67aa071039d06", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae52af05e0325497661dd23b5c250d64b7d763b0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae52af05e0325497661dd23b5c250d64b7d763b0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ae52af05e0325497661dd23b5c250d64b7d763b0", "patch": "@@ -1,5 +1,9 @@\n 2012-06-27  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/override2.C: Adjust.\n+\t* g++.dg/template/error5.C: Adjust.\n+\t* g++.dg/parse/crash28.C: Adjust.\n+\n \tPR c++/53563\n \t* g++.dg/parse/template27.C: New.\n \t* g++.dg/template/crash74.C: Adjust expected output."}, {"sha": "4d5a412baf5e1375f1fa5905e1e0872196075f30", "filename": "gcc/testsuite/g++.dg/cpp0x/override2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae52af05e0325497661dd23b5c250d64b7d763b0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverride2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae52af05e0325497661dd23b5c250d64b7d763b0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverride2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverride2.C?ref=ae52af05e0325497661dd23b5c250d64b7d763b0", "patch": "@@ -18,7 +18,7 @@ template <class T> struct B4 final {};\n \n template <class T> struct B5 final {};\n \n-struct undeclared<int> final { }; // { dg-error \"not a template\" }\n+struct undeclared<int> final { }; // { dg-error \"not a class template\" }\n \n struct D5 : B3<D5> {};\n "}, {"sha": "68a975915cbc96a139a43d53f343883e77c88241", "filename": "gcc/testsuite/g++.dg/parse/crash28.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae52af05e0325497661dd23b5c250d64b7d763b0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae52af05e0325497661dd23b5c250d64b7d763b0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash28.C?ref=ae52af05e0325497661dd23b5c250d64b7d763b0", "patch": "@@ -5,10 +5,10 @@\n // Origin:Andrew Pinski <pinskia@gcc.gnu.org>\n //        Volker Reichelt <reichelt@gcc.gnu.org>\n \n-template <class _Tp> class insert_iterator<slist<_Tp> > {}; // { dg-error \"not a template|not declared in this scope|expected unqualified-id|extra\" }\n+template <class _Tp> class insert_iterator<slist<_Tp> > {}; // { dg-error \"not a class template|not declared in this scope|expected unqualified-id|extra\" }\n template <class _Value> class insert_iterator<int > { // { dg-error \"template\" }\n   hash_set<_Value>;\n };\n \n-template<int> struct A<X<> > {}; // { dg-error \"not a template|not declared in this scope|expected unqualified-id|extra\" }\n+template<int> struct A<X<> > {}; // { dg-error \"not a class template|not declared in this scope|expected unqualified-id|extra\" }\n struct A {};"}, {"sha": "72d3c29b8fd5c6a5048404491d63b48d0c96c0eb", "filename": "gcc/testsuite/g++.dg/template/error5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae52af05e0325497661dd23b5c250d64b7d763b0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae52af05e0325497661dd23b5c250d64b7d763b0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror5.C?ref=ae52af05e0325497661dd23b5c250d64b7d763b0", "patch": "@@ -1,6 +1,6 @@\n template <typename T>\n-struct X<T*> { // { dg-error \"not a template\" }\n+struct X<T*> { // { dg-error \"not a class template\" }\n    typedef int Y;\n };\n \n-extern struct Z<int> s; // { dg-error \"not a template\" }\n+extern struct Z<int> s; // { dg-error \"not a class template\" }"}]}