{"sha": "d67ab5eef80ed2d4891562bf5ff791c1b2af4a97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY3YWI1ZWVmODBlZDJkNDg5MTU2MmJmNWZmNzkxYzFiMmFmNGE5Nw==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2006-03-22T19:09:11Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2006-03-22T19:09:11Z"}, "message": "[multiple changes]\n\n2006-03-22  Thomas Koenig  <Thomas.Koenig@onlien.de>\n\n\tPR fortran/19303\n\t* gfortran.h (gfc_option_t):  Add record_marker.\n\t* lang.opt:  Add -frecord-marker=4 and -frecord-marker=8.\n\t* trans-decl.c:  Add gfor_fndecl_set_record_marker.\n\t(gfc_build_builtin_function_decls): Set\n\tgfor_fndecl_set_record_marker.\n\t(gfc_generate_function_code):  If we are in the main program\n\tand -frecord-marker was provided, call set_record_marker.\n\t* options.c (gfc_handle_option):  Add handling for\n\t-frecord-marker=4 and -frecord-marker=8.\n\t* invoke.texi:  Document -frecord-marker.\n\n2006-03-22  Thomas Koenig  <Thomas.Koenig@onlien.de>\n\n\tPR fortran/19303\n\t* libgfortran.h (compile_options_t):  Add record_marker.\n\t* runtime/compile_options.c (set_record_marker):\n\tNew function.\n\t* io/open.c:  If we have four-byte record markers, use\n\tGFC_INTEGER_4_HUGE as default record length.\n\t* io/file_pos.c (unformatted_backspace):  Handle\n\tdifferent size record markers.\n\t* io/transfer.c (us_read):  Likewise.\n\t(us_write):  Likewise.\n\t(next_record_r):  Likewise.\n\t(write_us_marker):  Likewise.\n\t(next_record_w):  Likewise.\n\n2006-03-22  Thomas Koenig  <Thomas.Koenig@online.de>\n\n\tPR fortran/19303\n\t* gfortran.dg/record_marker_1.f90:  New test case.\n\t* gfortran.dg/record_marker_2.f:  New test case.\n\t* gfortran.dg/record_marker_3.f90:  New test case.\n\nFrom-SVN: r112290", "tree": {"sha": "ddee91463b1c5b5ef8aaf5e8a3581d490478bed9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddee91463b1c5b5ef8aaf5e8a3581d490478bed9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/comments", "author": null, "committer": null, "parents": [{"sha": "4dc7782d15938a44634f16465a4dab55a25d70d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dc7782d15938a44634f16465a4dab55a25d70d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dc7782d15938a44634f16465a4dab55a25d70d2"}], "stats": {"total": 507, "additions": 480, "deletions": 27}, "files": [{"sha": "da2cc08106245711a560f047e2594888b77f584f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d67ab5eef80ed2d4891562bf5ff791c1b2af4a97", "patch": "@@ -1,7 +1,21 @@\n+2006-03-22  Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+\tPR fortran/19303\n+\t* gfortran.h (gfc_option_t):  Add record_marker.\n+\t* lang.opt:  Add -frecord-marker=4 and -frecord-marker=8.\n+\t* trans-decl.c:  Add gfor_fndecl_set_record_marker.\n+\t(gfc_build_builtin_function_decls): Set\n+\tgfor_fndecl_set_record_marker.\n+\t(gfc_generate_function_code):  If we are in the main program\n+\tand -frecord-marker was provided, call set_record_marker.\n+\t* options.c (gfc_handle_option):  Add handling for\n+\t-frecord-marker=4 and -frecord-marker=8.\n+\t* invoke.texi:  Document -frecord-marker.\n+\n 2006-03-22  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/17298\n-\t*trans-intrinsic.c (gfc_conv_intrinsic_array_transfer): New\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_array_transfer): New\n \tfunction to implement array valued TRANSFER intrinsic.\n \t(gfc_conv_intrinsic_function): Call the new function if TRANSFER\n \tand non-null se->ss."}, {"sha": "3e673a8ccf51651e93df5a254b07e00e30fc122a", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=d67ab5eef80ed2d4891562bf5ff791c1b2af4a97", "patch": "@@ -1641,6 +1641,7 @@ typedef struct\n   int warn_nonstd_intrinsics;\n   int fshort_enums;\n   int convert;\n+  int record_marker;\n }\n gfc_option_t;\n "}, {"sha": "e95b32b70acc1c4af775bc77d5771d4e257170f4", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=d67ab5eef80ed2d4891562bf5ff791c1b2af4a97", "patch": "@@ -145,7 +145,7 @@ by type.  Explanations are in the following sections.\n @item Runtime Options\n @xref{Runtime Options,,Options for influencing runtime behavior}.\n @gccoptlist{\n--fconvert=@var{conversion}}\n+-fconvert=@var{conversion} -frecord-marker=@var{length}}\n \n @item Code Generation Options\n @xref{Code Gen Options,,Options for Code Generation Conventions}.\n@@ -613,6 +613,17 @@ representation for unformatted files.\n @emph{This option has an effect only when used in the main program.\n The @code{CONVERT} specifier and the GFORTRAN_CONVERT_UNIT environment\n variable override the default specified by -fconvert.}\n+\n+@cindex -frecord-marker=@var{length}\n+@item -frecord-marker=@var{length}\n+Specify the length of record markers for unformatted files.\n+Valid values for @var{length} are 4 and 8.  Default is whatever\n+@code{off_t} is specified to be on that particular system.\n+Note that specifying @var{length} as 4 limits the record\n+length of unformatted files to 2 GB.  This option does not\n+extend the maximum possible record length on systems where\n+@code{off_t} is a four_byte quantity.\n+\n @end table\n \n @node Code Gen Options"}, {"sha": "853653abfeb6a0f17ee3307cd18fc22b50fedce8", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=d67ab5eef80ed2d4891562bf5ff791c1b2af4a97", "patch": "@@ -233,4 +233,12 @@ fconvert=swap\n Fortran RejectNegative\n Swap endianness for unformatted files\n \n+frecord-marker=4\n+Fortran RejectNegative\n+Use a 4-byte record marker for unformatted files\n+\n+frecord-marker=8\n+Fortran RejectNegative\n+Use an 8-byte record marker for unformatted files\n+\n ; This comment is to ensure we retain the blank line above."}, {"sha": "18d56c560b04d875cd2297a98c313dfda621ba93", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=d67ab5eef80ed2d4891562bf5ff791c1b2af4a97", "patch": "@@ -615,6 +615,14 @@ gfc_handle_option (size_t scode, const char *arg, int value)\n     case OPT_fconvert_swap:\n       gfc_option.convert = CONVERT_SWAP;\n       break;\n+\n+    case OPT_frecord_marker_4:\n+      gfc_option.record_marker = 4;\n+      break;\n+\n+    case OPT_frecord_marker_8:\n+      gfc_option.record_marker = 8;\n+      break;\n     }\n \n   return result;"}, {"sha": "2a9c0dbc32f8ecea10f099b771e26508bbe82be3", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=d67ab5eef80ed2d4891562bf5ff791c1b2af4a97", "patch": "@@ -93,6 +93,7 @@ tree gfor_fndecl_runtime_error;\n tree gfor_fndecl_set_fpe;\n tree gfor_fndecl_set_std;\n tree gfor_fndecl_set_convert;\n+tree gfor_fndecl_set_record_marker;\n tree gfor_fndecl_ctime;\n tree gfor_fndecl_fdate;\n tree gfor_fndecl_ttynam;\n@@ -2297,6 +2298,10 @@ gfc_build_builtin_function_decls (void)\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"set_convert\")),\n \t\t\t\t     void_type_node, 1, gfc_c_int_type_node);\n \n+  gfor_fndecl_set_record_marker =\n+    gfc_build_library_function_decl (get_identifier (PREFIX(\"set_record_marker\")),\n+\t\t\t\t     void_type_node, 1, gfc_c_int_type_node);\n+\n   gfor_fndecl_in_pack = gfc_build_library_function_decl (\n         get_identifier (PREFIX(\"internal_pack\")),\n         pvoid_type_node, 1, pvoid_type_node);\n@@ -2943,6 +2948,21 @@ gfc_generate_function_code (gfc_namespace * ns)\n       gfc_add_expr_to_block (&body, tmp);\n     }\n \n+  /* If this is the main program and an -frecord-marker option was provided,\n+     add a call to set_record_marker.  */\n+\n+  if (sym->attr.is_main_program && gfc_option.record_marker != 0)\n+    {\n+      tree arglist, gfc_c_int_type_node;\n+\n+      gfc_c_int_type_node = gfc_get_int_type (gfc_c_int_kind);\n+      arglist = gfc_chainon_list (NULL_TREE,\n+\t\t\t\t  build_int_cst (gfc_c_int_type_node,\n+\t\t\t\t\t\t gfc_option.record_marker));\n+      tmp = build_function_call_expr (gfor_fndecl_set_record_marker, arglist);\n+      gfc_add_expr_to_block (&body, tmp);\n+\n+    }\n \n   if (TREE_TYPE (DECL_RESULT (fndecl)) != void_type_node\n       && sym->attr.subroutine)"}, {"sha": "0c83ee3680d7e5433fe6908a433ba70262f8592e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d67ab5eef80ed2d4891562bf5ff791c1b2af4a97", "patch": "@@ -1,3 +1,10 @@\n+2006-03-22  Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+\tPR fortran/19303\n+\t* gfortran.dg/record_marker_1.f90:  New test case.\n+\t* gfortran.dg/record_marker_2.f:  New test case.\n+\t* gfortran.dg/record_marker_3.f90:  New test case.\n+\n 2006-03-22  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/17298"}, {"sha": "8312171d474b7389b7230b271cfe303fabc09b55", "filename": "gcc/testsuite/gfortran.dg/record_marker_1.f90", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/gcc%2Ftestsuite%2Fgfortran.dg%2Frecord_marker_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/gcc%2Ftestsuite%2Fgfortran.dg%2Frecord_marker_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frecord_marker_1.f90?ref=d67ab5eef80ed2d4891562bf5ff791c1b2af4a97", "patch": "@@ -0,0 +1,38 @@\n+! { dg-do run }\n+! { dg-options \"-frecord-marker=4\" }\n+\n+program main\n+  implicit none\n+  integer :: i1, i2, i3\n+\n+  open(15,form=\"UNFORMATTED\")\n+  write (15) 1\n+  close (15)\n+  open (15,form=\"UNFORMATTED\",access=\"DIRECT\",recl=4)\n+  i1 = 1\n+  i2 = 2\n+  i3 = 3\n+  read (15,rec=1) i1\n+  read (15,rec=2) i2\n+  read (15,rec=3) i3\n+  close (15, status=\"DELETE\")\n+  if (i1 /= 4) call abort\n+  if (i2 /= 1) call abort\n+  if (i3 /= 4) call abort\n+\n+  open(15,form=\"UNFORMATTED\",convert=\"SWAP\")\n+  write (15) 1\n+  close (15)\n+  open (15,form=\"UNFORMATTED\",access=\"DIRECT\",convert=\"SWAP\",recl=4)\n+  i1 = 1\n+  i2 = 2\n+  i3 = 3\n+  read (15,rec=1) i1\n+  read (15,rec=2) i2\n+  read (15,rec=3) i3\n+  close(15,status=\"DELETE\")\n+  if (i1 /= 4) call abort\n+  if (i2 /= 1) call abort\n+  if (i3 /= 4) call abort\n+\n+end program main"}, {"sha": "725af120d336827763c9fca2281eee7d97724f3f", "filename": "gcc/testsuite/gfortran.dg/record_marker_2.f", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/gcc%2Ftestsuite%2Fgfortran.dg%2Frecord_marker_2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/gcc%2Ftestsuite%2Fgfortran.dg%2Frecord_marker_2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frecord_marker_2.f?ref=d67ab5eef80ed2d4891562bf5ff791c1b2af4a97", "patch": "@@ -0,0 +1,83 @@\n+! { dg-do run }\n+! { dg-options \"-frecord-marker=4\" }\n+! This file is all about BACKSPACE\n+! Adapted from gfortran.dg/backspace.f\n+\n+      integer i, n, nr\n+      real x(10), y(10)\n+\n+! PR libfortran/20068\n+      open (20, status='scratch')\n+      write (20,*) 1\n+      write (20,*) 2\n+      write (20,*) 3\n+      rewind (20)\n+      read (20,*) i\n+      if (i .ne. 1) call abort\n+      backspace (20)\n+      read (20,*) i\n+      if (i .ne. 1) call abort\n+      close (20)\n+\n+! PR libfortran/20125\n+      open (20, status='scratch')\n+      write (20,*) 7\n+      backspace (20)\n+      read (20,*) i\n+      if (i .ne. 7) call abort\n+      close (20)\n+\n+      open (20, status='scratch', form='unformatted')\n+      write (20) 8\n+      backspace (20)\n+      read (20) i\n+      if (i .ne. 8) call abort\n+      close (20)\n+\n+! PR libfortran/20471\n+      do n = 1, 10\n+        x(n) = sqrt(real(n))\n+      end do\n+      open (3, form='unformatted', status='scratch')\n+      write (3) (x(n),n=1,10)\n+      backspace (3)\n+      rewind (3)\n+      read (3) (y(n),n=1,10)\n+\n+      do n = 1, 10\n+        if (abs(x(n)-y(n)) > 0.00001) call abort\n+      end do\n+      close (3)\n+\n+! PR libfortran/20156\n+      open (3, form='unformatted', status='scratch')\n+      do i = 1, 5\n+        x(1) = i\n+        write (3) n, (x(n),n=1,10)\n+      end do\n+      nr = 0\n+      rewind (3)\n+  20  continue\n+      read (3,end=30,err=90) n, (x(n),n=1,10)\n+      nr = nr + 1\n+      goto 20\n+  30  continue\n+      if (nr .ne. 5) call abort\n+\n+      do i = 1, nr+1\n+        backspace (3)\n+      end do\n+\n+      do i = 1, nr\n+        read(3,end=70,err=90) n, (x(n),n=1,10)\n+        if (abs(x(1) - i) .gt. 0.001) call abort\n+      end do\n+      close (3)\n+      stop\n+\n+  70  continue\n+      call abort\n+  90  continue\n+      call abort\n+\n+      end"}, {"sha": "7459d7210a47742cec140c3d12fd4ef975afab3b", "filename": "gcc/testsuite/gfortran.dg/record_marker_3.f90", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/gcc%2Ftestsuite%2Fgfortran.dg%2Frecord_marker_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/gcc%2Ftestsuite%2Fgfortran.dg%2Frecord_marker_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frecord_marker_3.f90?ref=d67ab5eef80ed2d4891562bf5ff791c1b2af4a97", "patch": "@@ -0,0 +1,38 @@\n+! { dg-do run }\n+! { dg-options \"-frecord-marker=8\" }\n+\n+program main\n+  implicit none\n+  integer (kind=8) :: i1, i2, i3\n+\n+  open(15,form=\"UNFORMATTED\")\n+  write (15) 1_8\n+  close (15)\n+  open (15,form=\"UNFORMATTED\",access=\"DIRECT\",recl=8)\n+  i1 = 1\n+  i2 = 2\n+  i3 = 3\n+  read (15,rec=1) i1\n+  read (15,rec=2) i2\n+  read (15,rec=3) i3\n+  close (15, status=\"DELETE\")\n+  if (i1 /= 8) call abort\n+  if (i2 /= 1) call abort\n+  if (i3 /= 8) call abort\n+\n+  open(15,form=\"UNFORMATTED\",convert=\"SWAP\")\n+  write (15) 1_8\n+  close (15)\n+  open (15,form=\"UNFORMATTED\",access=\"DIRECT\",convert=\"SWAP\",recl=8)\n+  i1 = 1\n+  i2 = 2\n+  i3 = 3\n+  read (15,rec=1) i1\n+  read (15,rec=2) i2\n+  read (15,rec=3) i3\n+  close(15,status=\"DELETE\")\n+  if (i1 /= 8) call abort\n+  if (i2 /= 1) call abort\n+  if (i3 /= 8) call abort\n+\n+end program main"}, {"sha": "bfb7627d765092094f067708473b5e156a876bc8", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=d67ab5eef80ed2d4891562bf5ff791c1b2af4a97", "patch": "@@ -1,3 +1,19 @@\n+2006-03-22  Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+\tPR fortran/19303\n+\t* libgfortran.h (compile_options_t):  Add record_marker.\n+\t* runtime/compile_options.c (set_record_marker):\n+\tNew function.\n+\t* io/open.c:  If we have four-byte record markers, use\n+\tGFC_INTEGER_4_HUGE as default record length.\n+\t* io/file_pos.c (unformatted_backspace):  Handle\n+\tdifferent size record markers.\n+\t* io/transfer.c (us_read):  Likewise.\n+\t(us_write):  Likewise.\n+\t(next_record_r):  Likewise.\n+\t(write_us_marker):  Likewise.\n+\t(next_record_w):  Likewise.\n+\n 2006-03-20  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \tPR fortran/20935"}, {"sha": "fd6333a667e889f7df98f3cfc81f96234c526446", "filename": "libgfortran/io/file_pos.c", "status": "modified", "additions": 56, "deletions": 6, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/libgfortran%2Fio%2Ffile_pos.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/libgfortran%2Fio%2Ffile_pos.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ffile_pos.c?ref=d67ab5eef80ed2d4891562bf5ff791c1b2af4a97", "patch": "@@ -104,21 +104,71 @@ static void\n unformatted_backspace (st_parameter_filepos *fpp, gfc_unit *u)\n {\n   gfc_offset m, new;\n-  int length;\n+  GFC_INTEGER_4 m4;\n+  GFC_INTEGER_8 m8;\n+  int length, length_read;\n   char *p;\n \n-  length = sizeof (gfc_offset);\n+  if (compile_options.record_marker == 0)\n+    length = sizeof (gfc_offset);\n+  else\n+    length = compile_options.record_marker;\n+\n+  length_read = length;\n \n-  p = salloc_r_at (u->s, &length,\n+  p = salloc_r_at (u->s, &length_read,\n \t\t   file_position (u->s) - length);\n-  if (p == NULL)\n+  if (p == NULL || length_read != length)\n     goto io_error;\n \n   /* Only CONVERT_NATIVE and CONVERT_SWAP are valid here.  */\n   if (u->flags.convert == CONVERT_NATIVE)\n-    memcpy (&m, p, sizeof (gfc_offset));\n+    {\n+      switch (compile_options.record_marker)\n+\t{\n+\tcase 0:\n+\t  memcpy (&m, p, sizeof(gfc_offset));\n+\t  break;\n+\n+\tcase sizeof(GFC_INTEGER_4):\n+\t  memcpy (&m4, p, sizeof (m4));\n+\t  m = m4;\n+\t  break;\n+\n+\tcase sizeof(GFC_INTEGER_8):\n+\t  memcpy (&m8, p, sizeof (m8));\n+\t  m = m8;\n+\t  break;\n+\n+\tdefault:\n+\t  runtime_error (\"Illegal value for record marker\");\n+\t  break;\n+\t}\n+    }\n   else\n-    reverse_memcpy (&m, p, sizeof (gfc_offset));\n+    {\n+      switch (compile_options.record_marker)\n+\t{\n+\tcase 0:\n+\t  reverse_memcpy (&m, p, sizeof(gfc_offset));\n+\t  break;\n+\n+\tcase sizeof(GFC_INTEGER_4):\n+\t  reverse_memcpy (&m4, p, sizeof (m4));\n+\t  m = m4;\n+\t  break;\n+\n+\tcase sizeof(GFC_INTEGER_8):\n+\t  reverse_memcpy (&m8, p, sizeof (m8));\n+\t  m = m8;\n+\t  break;\n+\n+\tdefault:\n+\t  runtime_error (\"Illegal value for record marker\");\n+\t  break;\n+\t}\n+\n+    }\n \n   if ((new = file_position (u->s) - m - 2*length) < 0)\n     new = 0;"}, {"sha": "24713b76f495d6355700cab0dc1ba80a2b30415c", "filename": "libgfortran/io/open.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/libgfortran%2Fio%2Fopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/libgfortran%2Fio%2Fopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fopen.c?ref=d67ab5eef80ed2d4891562bf5ff791c1b2af4a97", "patch": "@@ -399,7 +399,26 @@ new_unit (st_parameter_open *opp, gfc_unit *u, unit_flags * flags)\n   if ((opp->common.flags & IOPARM_OPEN_HAS_RECL_IN))\n     u->recl = opp->recl_in;\n   else\n-    u->recl = max_offset;\n+    {\n+      switch (compile_options.record_marker)\n+\t{\n+\tcase 0:\n+\t  u->recl = max_offset;\n+\t  break;\n+\n+\tcase sizeof (GFC_INTEGER_4):\n+\t  u->recl = GFC_INTEGER_4_HUGE;\n+\t  break;\n+\n+\tcase sizeof (GFC_INTEGER_8):\n+\t  u->recl = max_offset;\n+\t  break;\n+\n+\tdefault:\n+\t  runtime_error (\"Illegal value for record marker\");\n+\t  break;\n+\t}\n+    }\n \n   /* If the file is direct access, calculate the maximum record number\n      via a division now instead of letting the multiplication overflow"}, {"sha": "32e3881c27f790acc2a2e472ee90dc665b37a213", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 131, "deletions": 18, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=d67ab5eef80ed2d4891562bf5ff791c1b2af4a97", "patch": "@@ -1230,12 +1230,21 @@ us_read (st_parameter_dt *dtp)\n {\n   char *p;\n   int n;\n+  int nr;\n+  GFC_INTEGER_4 i4;\n+  GFC_INTEGER_8 i8;\n   gfc_offset i;\n \n   if (dtp->u.p.current_unit->endfile == AT_ENDFILE)\n     return;\n \n-  n = sizeof (gfc_offset);\n+  if (compile_options.record_marker == 0)\n+    n = sizeof (gfc_offset);\n+  else\n+    n = compile_options.record_marker;\n+\n+  nr = n;\n+\n   p = salloc_r (dtp->u.p.current_unit->s, &n);\n \n   if (n == 0)\n@@ -1244,18 +1253,58 @@ us_read (st_parameter_dt *dtp)\n       return;  /* end of file */\n     }\n \n-  if (p == NULL || n != sizeof (gfc_offset))\n+  if (p == NULL || n != nr)\n     {\n       generate_error (&dtp->common, ERROR_BAD_US, NULL);\n       return;\n     }\n \n   /* Only CONVERT_NATIVE and CONVERT_SWAP are valid here.  */\n   if (dtp->u.p.current_unit->flags.convert == CONVERT_NATIVE)\n-    memcpy (&i, p, sizeof (gfc_offset));\n+    {\n+      switch (compile_options.record_marker)\n+\t{\n+\tcase 0:\n+\t  memcpy (&i, p, sizeof(gfc_offset));\n+\t  break;\n+\n+\tcase sizeof(GFC_INTEGER_4):\n+\t  memcpy (&i4, p, sizeof (i4));\n+\t  i = i4;\n+\t  break;\n+\n+\tcase sizeof(GFC_INTEGER_8):\n+\t  memcpy (&i8, p, sizeof (i8));\n+\t  i = i8;\n+\t  break;\n+\n+\tdefault:\n+\t  runtime_error (\"Illegal value for record marker\");\n+\t  break;\n+\t}\n+    }\n   else\n-    reverse_memcpy (&i, p, sizeof (gfc_offset));\n-    \n+      switch (compile_options.record_marker)\n+\t{\n+\tcase 0:\n+\t  reverse_memcpy (&i, p, sizeof(gfc_offset));\n+\t  break;\n+\n+\tcase sizeof(GFC_INTEGER_4):\n+\t  reverse_memcpy (&i4, p, sizeof (i4));\n+\t  i = i4;\n+\t  break;\n+\n+\tcase sizeof(GFC_INTEGER_8):\n+\t  reverse_memcpy (&i8, p, sizeof (i8));\n+\t  i = i8;\n+\t  break;\n+\n+\tdefault:\n+\t  runtime_error (\"Illegal value for record marker\");\n+\t  break;\n+\t}\n+\n   dtp->u.p.current_unit->bytes_left = i;\n }\n \n@@ -1270,7 +1319,11 @@ us_write (st_parameter_dt *dtp)\n   gfc_offset dummy;\n \n   dummy = 0;\n-  nbytes = sizeof (gfc_offset);\n+\n+  if (compile_options.record_marker == 0)\n+    nbytes = sizeof (gfc_offset);\n+  else\n+    nbytes = compile_options.record_marker ;\n \n   if (swrite (dtp->u.p.current_unit->s, &dummy, &nbytes) != 0)\n     generate_error (&dtp->common, ERROR_OS, NULL);\n@@ -1673,7 +1726,9 @@ next_record_r (st_parameter_dt *dtp)\n     case UNFORMATTED_SEQUENTIAL:\n \n       /* Skip over tail */\n-      dtp->u.p.current_unit->bytes_left += sizeof (gfc_offset);\n+      dtp->u.p.current_unit->bytes_left +=\n+\tcompile_options.record_marker == 0 ?\n+\tsizeof (gfc_offset) : compile_options.record_marker;\n       \n       /* Fall through...  */\n \n@@ -1773,20 +1828,72 @@ next_record_r (st_parameter_dt *dtp)\n \n \n /* Small utility function to write a record marker, taking care of\n-   byte swapping.  */\n+   byte swapping and of choosing the correct size.  */\n \n inline static int\n write_us_marker (st_parameter_dt *dtp, const gfc_offset buf)\n {\n-  size_t len = sizeof (gfc_offset);\n+  size_t len;\n+  GFC_INTEGER_4 buf4;\n+  GFC_INTEGER_8 buf8;\n+  char p[sizeof (GFC_INTEGER_8)];\n+\n+  if (compile_options.record_marker == 0)\n+    len = sizeof (gfc_offset);\n+  else\n+    len = compile_options.record_marker;\n+\n   /* Only CONVERT_NATIVE and CONVERT_SWAP are valid here.  */\n   if (dtp->u.p.current_unit->flags.convert == CONVERT_NATIVE)\n-    return swrite (dtp->u.p.current_unit->s, &buf, &len);\n-  else {\n-    gfc_offset p;\n-    reverse_memcpy (&p, &buf, sizeof (gfc_offset));\n-    return swrite (dtp->u.p.current_unit->s, &p, &len);\n-  }\n+    {\n+      switch (compile_options.record_marker)\n+\t{\n+\tcase 0:\n+\t  return swrite (dtp->u.p.current_unit->s, &buf, &len);\n+\t  break;\n+\n+\tcase sizeof (GFC_INTEGER_4):\n+\t  buf4 = buf;\n+\t  return swrite (dtp->u.p.current_unit->s, &buf4, &len);\n+\t  break;\n+\n+\tcase sizeof (GFC_INTEGER_8):\n+\t  buf8 = buf;\n+\t  return swrite (dtp->u.p.current_unit->s, &buf8, &len);\n+\t  break;\n+\n+\tdefault:\n+\t  runtime_error (\"Illegal value for record marker\");\n+\t  break;\n+\t}\n+    }\n+  else\n+    {\n+      switch (compile_options.record_marker)\n+\t{\n+\tcase 0:\n+\t  reverse_memcpy (p, &buf, sizeof (gfc_offset));\n+\t  return swrite (dtp->u.p.current_unit->s, p, &len);\n+\t  break;\n+\n+\tcase sizeof (GFC_INTEGER_4):\n+\t  buf4 = buf;\n+\t  reverse_memcpy (p, &buf4, sizeof (GFC_INTEGER_4));\n+\t  return swrite (dtp->u.p.current_unit->s, p, &len);\n+\t  break;\n+\n+\tcase sizeof (GFC_INTEGER_8):\n+\t  buf8 = buf;\n+\t  reverse_memcpy (p, &buf8, sizeof (GFC_INTEGER_4));\n+\t  return swrite (dtp->u.p.current_unit->s, p, &len);\n+\t  break;\n+\n+\tdefault:\n+\t  runtime_error (\"Illegal value for record marker\");\n+\t  break;\n+\t}\n+    }\n+\n }\n \n \n@@ -1798,6 +1905,7 @@ next_record_w (st_parameter_dt *dtp, int done)\n   gfc_offset c, m, record, max_pos;\n   int length;\n   char *p;\n+  size_t record_marker;\n \n   /* Zero counters for X- and T-editing.  */\n   max_pos = dtp->u.p.max_pos;\n@@ -1830,19 +1938,24 @@ next_record_w (st_parameter_dt *dtp, int done)\n       if (write_us_marker (dtp, m) != 0)\n \tgoto io_error;\n \n+      if (compile_options.record_marker == 4)\n+\trecord_marker = sizeof(GFC_INTEGER_4);\n+      else\n+\trecord_marker = sizeof (gfc_offset);\n+\n       /* Seek to the head and overwrite the bogus length with the real\n \t length.  */\n \n-      if (sseek (dtp->u.p.current_unit->s, c - m - sizeof (gfc_offset))\n-\t\t == FAILURE)\n+      if (sseek (dtp->u.p.current_unit->s, c - m - record_marker)\n+\t  == FAILURE)\n \tgoto io_error;\n \n       if (write_us_marker (dtp, m) != 0)\n \tgoto io_error;\n \n       /* Seek past the end of the current record.  */\n \n-      if (sseek (dtp->u.p.current_unit->s, c + sizeof (gfc_offset)) == FAILURE)\n+      if (sseek (dtp->u.p.current_unit->s, c + record_marker) == FAILURE)\n \tgoto io_error;\n \n       break;"}, {"sha": "8a57bfaf17c6c46051e1df552261210d953f9e31", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=d67ab5eef80ed2d4891562bf5ff791c1b2af4a97", "patch": "@@ -338,6 +338,7 @@ typedef struct\n   int allow_std;\n   int pedantic;\n   int convert;\n+  size_t record_marker;\n }\n compile_options_t;\n "}, {"sha": "fb6ac509f135b9125a0152e6a8b990e2726f20cd", "filename": "libgfortran/runtime/compile_options.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/libgfortran%2Fruntime%2Fcompile_options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ab5eef80ed2d4891562bf5ff791c1b2af4a97/libgfortran%2Fruntime%2Fcompile_options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fcompile_options.c?ref=d67ab5eef80ed2d4891562bf5ff791c1b2af4a97", "patch": "@@ -74,3 +74,29 @@ set_convert (int conv)\n {\n   compile_options.convert = conv;\n }\n+\n+extern void set_record_marker (int);\n+export_proto (set_record_marker);\n+\n+\n+void\n+set_record_marker (int val)\n+{\n+\n+  switch(val)\n+    {\n+    case 4:\n+      if (sizeof (GFC_INTEGER_4) != sizeof (gfc_offset))\n+\tcompile_options.record_marker = sizeof (GFC_INTEGER_4);\n+      break;\n+\n+    case 8:\n+      if (sizeof (GFC_INTEGER_8) != sizeof (gfc_offset))\n+\tcompile_options.record_marker = sizeof (GFC_INTEGER_8);\n+      break;\n+\n+    default:\n+      runtime_error (\"Invalid value for record marker\");\n+      break;\n+    }\n+}"}]}