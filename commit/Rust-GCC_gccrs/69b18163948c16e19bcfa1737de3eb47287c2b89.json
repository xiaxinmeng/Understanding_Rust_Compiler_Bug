{"sha": "69b18163948c16e19bcfa1737de3eb47287c2b89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjliMTgxNjM5NDhjMTZlMTliY2ZhMTczN2RlM2ViNDcyODdjMmI4OQ==", "commit": {"author": {"name": "Christian Bruel", "email": "christian.bruel@st.com", "date": "2010-01-26T07:20:27Z"}, "committer": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2010-01-26T07:20:27Z"}, "message": "fix PR target/42841\n\nFrom-SVN: r156229", "tree": {"sha": "c1c2d90051c036dc5c61a7c5c12e7a4dadf44572", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1c2d90051c036dc5c61a7c5c12e7a4dadf44572"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69b18163948c16e19bcfa1737de3eb47287c2b89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69b18163948c16e19bcfa1737de3eb47287c2b89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69b18163948c16e19bcfa1737de3eb47287c2b89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69b18163948c16e19bcfa1737de3eb47287c2b89/comments", "author": null, "committer": null, "parents": [{"sha": "79b754d47ff5fef99fe57b3579ef37f135a6dc6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79b754d47ff5fef99fe57b3579ef37f135a6dc6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79b754d47ff5fef99fe57b3579ef37f135a6dc6e"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "ca8d69a9c5c2e3a7b6404b8345ffa0d2bbcf419a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b18163948c16e19bcfa1737de3eb47287c2b89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b18163948c16e19bcfa1737de3eb47287c2b89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69b18163948c16e19bcfa1737de3eb47287c2b89", "patch": "@@ -1,3 +1,10 @@\n+2010-01-25  Christian Bruel  <christian.bruel@st.com>\n+\n+\tPR target/42841\n+\t* config/sh/sh.c (find_barrier): Increase length for non delayed\n+\tconditional branches.\n+\t(sh_insn_length_adjustment): Use JUMP_TABLE_DATA_P.\n+\n 2010-01-24  David S. Miller  <davem@davemloft.net>\n \n \t* gcc/config/sparc/sysv4.h (TARGET_ASM_NAMED_SECTION): Only"}, {"sha": "283bb0ad98a4e879475fdf24b4560c64c65373de", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b18163948c16e19bcfa1737de3eb47287c2b89/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b18163948c16e19bcfa1737de3eb47287c2b89/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=69b18163948c16e19bcfa1737de3eb47287c2b89", "patch": "@@ -4567,6 +4567,13 @@ find_barrier (int num_mova, rtx mova, rtx from)\n \t       && ! TARGET_SMALLCODE)\n \tnew_align = 4;\n \n+      /* There is a possibility that a bf is transformed into a bf/s by the\n+\t delay slot scheduler.  */\n+      if (JUMP_P (from) && !JUMP_TABLE_DATA_P (from) \n+\t  && get_attr_type (from) == TYPE_CBRANCH\n+\t  && GET_CODE (PATTERN (NEXT_INSN (PREV_INSN (from)))) != SEQUENCE)\n+\tinc += 2;\n+\n       if (found_si)\n \t{\n \t  count_si += inc;\n@@ -9271,19 +9278,15 @@ sh_insn_length_adjustment (rtx insn)\n \t&& GET_CODE (PATTERN (insn)) != USE\n \t&& GET_CODE (PATTERN (insn)) != CLOBBER)\n        || CALL_P (insn)\n-       || (JUMP_P (insn)\n-\t   && GET_CODE (PATTERN (insn)) != ADDR_DIFF_VEC\n-\t   && GET_CODE (PATTERN (insn)) != ADDR_VEC))\n+       || (JUMP_P (insn) && !JUMP_TABLE_DATA_P (insn)))\n       && GET_CODE (PATTERN (NEXT_INSN (PREV_INSN (insn)))) != SEQUENCE\n       && get_attr_needs_delay_slot (insn) == NEEDS_DELAY_SLOT_YES)\n     return 2;\n \n   /* SH2e has a bug that prevents the use of annulled branches, so if\n      the delay slot is not filled, we'll have to put a NOP in it.  */\n   if (sh_cpu_attr == CPU_SH2E\n-      && JUMP_P (insn)\n-      && GET_CODE (PATTERN (insn)) != ADDR_DIFF_VEC\n-      && GET_CODE (PATTERN (insn)) != ADDR_VEC\n+      && JUMP_P (insn) && !JUMP_TABLE_DATA_P (insn)\n       && get_attr_type (insn) == TYPE_CBRANCH\n       && GET_CODE (PATTERN (NEXT_INSN (PREV_INSN (insn)))) != SEQUENCE)\n     return 2;"}]}