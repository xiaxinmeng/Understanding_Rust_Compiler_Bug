{"sha": "66168f96f07b12bbe0beb6e0e988818f624d56bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYxNjhmOTZmMDdiMTJiYmUwYmViNmUwZTk4ODgxOGY2MjRkNTZiZA==", "commit": {"author": {"name": "Indu Bhagat", "email": "indu.bhagat@oracle.com", "date": "2021-04-30T15:03:52Z"}, "committer": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2021-05-20T19:39:33Z"}, "message": "dwarf: new dwarf_debuginfo_p predicate\n\nThis patch introduces a dwarf_debuginfo_p predicate that abstracts and\nreplaces complex checks on write_symbols.\n\ngcc/c-family/ChangeLog:\n\n\t* c-lex.c (init_c_lex): Use dwarf_debuginfo_p.\n\ngcc/ChangeLog:\n\n\t* config/c6x/c6x.c (c6x_output_file_unwind): Use dwarf_debuginfo_p.\n\t* config/darwin.c (darwin_override_options): Likewise.\n\t* config/i386/cygming.h (DBX_REGISTER_NUMBER): Likewise.\n\t* config/i386/darwin.h (DBX_REGISTER_NUMBER): Likewise.\n\t(DWARF2_FRAME_REG_OUT): Likewise.\n\t* config/mips/mips.c (mips_output_filename): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_xcoff_declare_function_name):\n\tLikewise.\n\t(rs6000_dbx_register_number): Likewise.\n\t* dbxout.c: Include flags.h.\n\t* dwarf2cfi.c (cfi_label_required_p): Likewise.\n\t(dwarf2out_do_frame): Likewise.\n\t* except.c: Include flags.h.\n\t* final.c (dwarf2_debug_info_emitted_p): Likewise.\n\t(final_scan_insn_1): Likewise.\n\t* flags.h (dwarf_debuginfo_p): New function declaration.\n\t* opts.c (dwarf_debuginfo_p): New function definition.\n\t* targhooks.c (default_debug_unwind_info): Use dwarf_debuginfo_p.\n\t* toplev.c (process_options): Likewise.", "tree": {"sha": "4b09439fc1f33061c948f45fb183af4c4df48081", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b09439fc1f33061c948f45fb183af4c4df48081"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66168f96f07b12bbe0beb6e0e988818f624d56bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66168f96f07b12bbe0beb6e0e988818f624d56bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66168f96f07b12bbe0beb6e0e988818f624d56bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66168f96f07b12bbe0beb6e0e988818f624d56bd/comments", "author": {"login": "ibhagatgnu", "id": 51812649, "node_id": "MDQ6VXNlcjUxODEyNjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/51812649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibhagatgnu", "html_url": "https://github.com/ibhagatgnu", "followers_url": "https://api.github.com/users/ibhagatgnu/followers", "following_url": "https://api.github.com/users/ibhagatgnu/following{/other_user}", "gists_url": "https://api.github.com/users/ibhagatgnu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibhagatgnu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibhagatgnu/subscriptions", "organizations_url": "https://api.github.com/users/ibhagatgnu/orgs", "repos_url": "https://api.github.com/users/ibhagatgnu/repos", "events_url": "https://api.github.com/users/ibhagatgnu/events{/privacy}", "received_events_url": "https://api.github.com/users/ibhagatgnu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "459d84e9b6e925922246b6aff76a5202b1d4d4ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/459d84e9b6e925922246b6aff76a5202b1d4d4ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/459d84e9b6e925922246b6aff76a5202b1d4d4ba"}], "stats": {"total": 70, "additions": 40, "deletions": 30}, "files": [{"sha": "c44e7a134899f32e2603e6b8d3489e8b72062fdd", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=66168f96f07b12bbe0beb6e0e988818f624d56bd", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stor-layout.h\"\n #include \"c-pragma.h\"\n #include \"debug.h\"\n+#include \"flags.h\"\n #include \"file-prefix-map.h\" /* remap_macro_filename()  */\n #include \"langhooks.h\"\n #include \"attribs.h\"\n@@ -87,8 +88,7 @@ init_c_lex (void)\n \n   /* Set the debug callbacks if we can use them.  */\n   if ((debug_info_level == DINFO_LEVEL_VERBOSE\n-       && (write_symbols == DWARF2_DEBUG\n-\t   || write_symbols == VMS_AND_DWARF2_DEBUG))\n+       && dwarf_debuginfo_p ())\n       || flag_dump_go_spec != NULL)\n     {\n       cb->define = cb_define;"}, {"sha": "ce4949516cfab28cadb058af2f137b2fdea2bc5c", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=66168f96f07b12bbe0beb6e0e988818f624d56bd", "patch": "@@ -59,6 +59,7 @@\n #include \"regrename.h\"\n #include \"dumpfile.h\"\n #include \"builtins.h\"\n+#include \"flags.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -439,8 +440,7 @@ c6x_output_file_unwind (FILE * f)\n     {\n       if (flag_unwind_tables || flag_exceptions)\n \t{\n-\t  if (write_symbols == DWARF2_DEBUG\n-\t      || write_symbols == VMS_AND_DWARF2_DEBUG)\n+\t  if (dwarf_debuginfo_p ())\n \t    asm_fprintf (f, \"\\t.cfi_sections .debug_frame, .c6xabi.exidx\\n\");\n \t  else\n \t    asm_fprintf (f, \"\\t.cfi_sections .c6xabi.exidx\\n\");"}, {"sha": "b160c23ea56c6d5046e164fdba9b445bd96be35f", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=66168f96f07b12bbe0beb6e0e988818f624d56bd", "patch": "@@ -46,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"lto-section-names.h\"\n #include \"intl.h\"\n #include \"optabs.h\"\n+#include \"flags.h\"\n \n /* Fix and Continue.\n \n@@ -3347,7 +3348,7 @@ darwin_override_options (void)\n       && generating_for_darwin_version >= 9\n       && (flag_gtoggle ? (debug_info_level == DINFO_LEVEL_NONE)\n       : (debug_info_level >= DINFO_LEVEL_NORMAL))\n-      && write_symbols == DWARF2_DEBUG)\n+      && dwarf_debuginfo_p ())\n     flag_var_tracking_uninit = flag_var_tracking;\n \n   /* Final check on PCI options; for Darwin these are not dependent on the PIE"}, {"sha": "ac458cdfee15e4417113162a62ebbe971a82e28e", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=66168f96f07b12bbe0beb6e0e988818f624d56bd", "patch": "@@ -82,7 +82,7 @@ along with GCC; see the file COPYING3.  If not see\n #undef DBX_REGISTER_NUMBER\n #define DBX_REGISTER_NUMBER(n)\t\t\t\t\\\n   (TARGET_64BIT ? dbx64_register_map[n]\t\t\t\\\n-   : (write_symbols == DWARF2_DEBUG\t\t\t\\\n+   : (dwarf_debuginfo_p ()\t\t\t\t\\\n       ? svr4_dbx_register_map[n] : dbx_register_map[n]))\n \n /* Map gcc register number to DWARF 2 CFA column number. For 32 bit"}, {"sha": "5312003a321089a02b804d296c3b208d53fd51d0", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=66168f96f07b12bbe0beb6e0e988818f624d56bd", "patch": "@@ -275,13 +275,13 @@ along with GCC; see the file COPYING3.  If not see\n #undef DBX_REGISTER_NUMBER\n #define DBX_REGISTER_NUMBER(n) \t\t\t\t\t\\\n   (TARGET_64BIT ? dbx64_register_map[n]\t\t\t\t\\\n-   : write_symbols == DWARF2_DEBUG ? svr4_dbx_register_map[n]\t\\\n+   : dwarf_debuginfo_p () ? svr4_dbx_register_map[n]\t\t\\\n    : dbx_register_map[n])\n \n /* Unfortunately, the 32-bit EH information also doesn't use the standard\n    DWARF register numbers.  */\n #define DWARF2_FRAME_REG_OUT(n, for_eh)\t\t\t\t\t\\\n-  (! (for_eh) || write_symbols != DWARF2_DEBUG || TARGET_64BIT ? (n)\t\\\n+  (! (for_eh) || !dwarf_debuginfo_p () || TARGET_64BIT ? (n)\t\\\n    : (n) == 5 ? 4\t\t\t\t\t\t\t\\\n    : (n) == 4 ? 5\t\t\t\t\t\t\t\\\n    : (n) >= 11 && (n) <= 18 ? (n) + 1\t\t\t\t\t\\"}, {"sha": "1f1475cf40089a8894685ab05b19d18dc3acb389", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=66168f96f07b12bbe0beb6e0e988818f624d56bd", "patch": "@@ -65,6 +65,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"context.h\"\n #include \"builtins.h\"\n #include \"rtl-iter.h\"\n+#include \"flags.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -9489,7 +9490,7 @@ mips_output_filename (FILE *stream, const char *name)\n {\n   /* If we are emitting DWARF-2, let dwarf2out handle the \".file\"\n      directives.  */\n-  if (write_symbols == DWARF2_DEBUG)\n+  if (dwarf_debuginfo_p ())\n     return;\n   else if (mips_output_filename_first_time)\n     {"}, {"sha": "af3cc90d7fd4b939b9d7400cd10831be7de18da9", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=66168f96f07b12bbe0beb6e0e988818f624d56bd", "patch": "@@ -21588,7 +21588,7 @@ rs6000_xcoff_declare_function_name (FILE *file, const char *name, tree decl)\n     {\n       if (write_symbols == DBX_DEBUG || write_symbols == XCOFF_DEBUG)\n \txcoffout_declare_function (file, decl, buffer);\n-      else if (write_symbols == DWARF2_DEBUG)\n+      else if (dwarf_debuginfo_p ())\n \t{\n \t  name = (*targetm.strip_name_encoding) (name);\n \t  fprintf (file, \"\\t.function .%s,.%s,2,0\\n\", name, name);\n@@ -23747,7 +23747,7 @@ rs6000_dbx_register_number (unsigned int regno, unsigned int format)\n {\n   /* On some platforms, we use the standard DWARF register\n      numbering for .debug_info and .debug_frame.  */\n-  if ((format == 0 && write_symbols == DWARF2_DEBUG) || format == 1)\n+  if ((format == 0 && dwarf_debuginfo_p ()) || format == 1)\n     {\n #ifdef RS6000_USE_DWARF_NUMBERING\n       if (regno <= 31)"}, {"sha": "6be282714cfe36d3ac1ab791ebb0113ba8794bd6", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=66168f96f07b12bbe0beb6e0e988818f624d56bd", "patch": "@@ -92,6 +92,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"expr.h\"\n #include \"file-prefix-map.h\" /* remap_debug_filename()  */\n+#include \"flags.h\"\n \n #ifdef XCOFF_DEBUGGING_INFO\n #include \"xcoffout.h\""}, {"sha": "c27ac1960b0b5b78bcce0594e029ce2e94edbfa6", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=66168f96f07b12bbe0beb6e0e988818f624d56bd", "patch": "@@ -39,7 +39,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"expr.h\"\t\t/* init_return_column_size */\n #include \"output.h\"\t\t/* asm_out_file */\n #include \"debug.h\"\t\t/* dwarf2out_do_frame, dwarf2out_do_cfi_asm */\n-\n+#include \"flags.h\"\t\t/* dwarf_debuginfo_p */\n \n /* ??? Poison these here until it can be done generically.  They've been\n    totally replaced in this file; make sure it stays that way.  */\n@@ -2289,8 +2289,7 @@ cfi_label_required_p (dw_cfi_ref cfi)\n \n   if (dwarf_version == 2\n       && debug_info_level > DINFO_LEVEL_TERSE\n-      && (write_symbols == DWARF2_DEBUG\n-\t  || write_symbols == VMS_AND_DWARF2_DEBUG))\n+      && dwarf_debuginfo_p ())\n     {\n       switch (cfi->dw_cfi_opc)\n \t{\n@@ -3557,9 +3556,9 @@ bool\n dwarf2out_do_frame (void)\n {\n   /* We want to emit correct CFA location expressions or lists, so we\n-     have to return true if we're going to output debug info, even if\n+     have to return true if we're going to generate debug info, even if\n      we're not going to output frame or unwind info.  */\n-  if (write_symbols == DWARF2_DEBUG || write_symbols == VMS_AND_DWARF2_DEBUG)\n+  if (dwarf_debuginfo_p ())\n     return true;\n \n   if (saved_do_cfi_asm > 0)"}, {"sha": "d481a5ecb4e06e21c6fbb1cdb4e550c80d802e3f", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=66168f96f07b12bbe0beb6e0e988818f624d56bd", "patch": "@@ -144,6 +144,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"builtins.h\"\n #include \"tree-hash-traits.h\"\n+#include \"flags.h\"\n \n static GTY(()) int call_site_base;\n "}, {"sha": "38c3d70417056d9f3c17246e865d80374ffe9138", "filename": "gcc/final.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=66168f96f07b12bbe0beb6e0e988818f624d56bd", "patch": "@@ -1428,7 +1428,8 @@ asm_str_count (const char *templ)\n static bool\n dwarf2_debug_info_emitted_p (tree decl)\n {\n-  if (write_symbols != DWARF2_DEBUG && write_symbols != VMS_AND_DWARF2_DEBUG)\n+  /* When DWARF2 debug info is not generated internally.  */\n+  if (!dwarf_debuginfo_p ())\n     return false;\n \n   if (DECL_IGNORED_P (decl))\n@@ -2306,10 +2307,8 @@ final_scan_insn_1 (rtx_insn *insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n \t  break;\n \n \tcase NOTE_INSN_BLOCK_BEG:\n-\t  if (debug_info_level == DINFO_LEVEL_NORMAL\n-\t      || debug_info_level == DINFO_LEVEL_VERBOSE\n-\t      || write_symbols == DWARF2_DEBUG\n-\t      || write_symbols == VMS_AND_DWARF2_DEBUG\n+\t  if (debug_info_level >= DINFO_LEVEL_NORMAL\n+\t      || dwarf_debuginfo_p ()\n \t      || write_symbols == VMS_DEBUG)\n \t    {\n \t      int n = BLOCK_NUMBER (NOTE_BLOCK (insn));\n@@ -2344,10 +2343,8 @@ final_scan_insn_1 (rtx_insn *insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n \tcase NOTE_INSN_BLOCK_END:\n \t  maybe_output_next_view (seen);\n \n-\t  if (debug_info_level == DINFO_LEVEL_NORMAL\n-\t      || debug_info_level == DINFO_LEVEL_VERBOSE\n-\t      || write_symbols == DWARF2_DEBUG\n-\t      || write_symbols == VMS_AND_DWARF2_DEBUG\n+\t  if (debug_info_level >= DINFO_LEVEL_NORMAL\n+\t      || dwarf_debuginfo_p ()\n \t      || write_symbols == VMS_DEBUG)\n \t    {\n \t      int n = BLOCK_NUMBER (NOTE_BLOCK (insn));"}, {"sha": "cc7b79b14938118dedfc7b8ee166490da8b7b6ad", "filename": "gcc/flags.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=66168f96f07b12bbe0beb6e0e988818f624d56bd", "patch": "@@ -40,6 +40,10 @@ unsigned int debug_set_count (uint32_t w_symbols);\n \n const char * debug_set_names (uint32_t w_symbols);\n \n+/* Return true iff DWARF2 debug info is enabled.  */\n+\n+extern bool dwarf_debuginfo_p ();\n+\n extern void strip_off_ending (char *, int);\n extern int base_of_path (const char *path, const char **base_out);\n "}, {"sha": "a751d95d32b082c4c51844ff779c8a7cd74afb09", "filename": "gcc/opts.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=66168f96f07b12bbe0beb6e0e988818f624d56bd", "patch": "@@ -126,6 +126,14 @@ debug_set_names (uint32_t w_symbols)\n   return df_set_names;\n }\n \n+/* Return TRUE iff dwarf2 debug info is enabled.  */\n+\n+bool\n+dwarf_debuginfo_p ()\n+{\n+  return (write_symbols & DWARF2_DEBUG);\n+}\n+\n /* Parse the -femit-struct-debug-detailed option value\n    and set the flag variables. */\n "}, {"sha": "08f676b31f692e2b8daa49ee6452964a91105f6b", "filename": "gcc/targhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=66168f96f07b12bbe0beb6e0e988818f624d56bd", "patch": "@@ -2062,7 +2062,7 @@ default_debug_unwind_info (void)\n \n   /* Otherwise, only turn it on if dwarf2 debugging is enabled.  */\n #ifdef DWARF2_DEBUGGING_INFO\n-  if (write_symbols == DWARF2_DEBUG || write_symbols == VMS_AND_DWARF2_DEBUG)\n+  if (dwarf_debuginfo_p ())\n     return UI_DWARF2;\n #endif\n "}, {"sha": "6a6ebe9bb8cd7143cc40fc68641a387a9eff03c0", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66168f96f07b12bbe0beb6e0e988818f624d56bd/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=66168f96f07b12bbe0beb6e0e988818f624d56bd", "patch": "@@ -1527,8 +1527,7 @@ process_options (void)\n     debug_nonbind_markers_p\n       = (optimize\n \t && debug_info_level >= DINFO_LEVEL_NORMAL\n-\t && (write_symbols == DWARF2_DEBUG\n-\t     || write_symbols == VMS_AND_DWARF2_DEBUG)\n+\t && dwarf_debuginfo_p ()\n \t && !(flag_selective_scheduling || flag_selective_scheduling2));\n \n   if (dwarf2out_as_loc_support == AUTODETECT_VALUE)\n@@ -1543,8 +1542,7 @@ process_options (void)\n       debug_variable_location_views\n \t= (flag_var_tracking\n \t   && debug_info_level >= DINFO_LEVEL_NORMAL\n-\t   && (write_symbols == DWARF2_DEBUG\n-\t       || write_symbols == VMS_AND_DWARF2_DEBUG)\n+\t   && dwarf_debuginfo_p ()\n \t   && !dwarf_strict\n \t   && dwarf2out_as_loc_support\n \t   && dwarf2out_as_locview_support);"}]}