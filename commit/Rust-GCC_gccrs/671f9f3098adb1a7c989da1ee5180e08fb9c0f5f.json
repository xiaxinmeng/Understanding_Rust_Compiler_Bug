{"sha": "671f9f3098adb1a7c989da1ee5180e08fb9c0f5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcxZjlmMzA5OGFkYjFhN2M5ODlkYTFlZTUxODBlMDhmYjljMGY1Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-09-10T18:01:23Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-09-10T18:01:23Z"}, "message": "gimple-iterator.c (gimple_find_edge_insert_loc): Use gimple_seq_empty_p to test for no PHI nodes.\n\n* gimple-iterator.c (gimple_find_edge_insert_loc): Use\n        gimple_seq_empty_p to test for no PHI nodes.\n        * tree-cfg.c (split_critical_edges): Likewise.\n\nFrom-SVN: r151602", "tree": {"sha": "1e26e005ab17ad875a7ffd828f74f03b4a8e883a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e26e005ab17ad875a7ffd828f74f03b4a8e883a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/671f9f3098adb1a7c989da1ee5180e08fb9c0f5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/671f9f3098adb1a7c989da1ee5180e08fb9c0f5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/671f9f3098adb1a7c989da1ee5180e08fb9c0f5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/671f9f3098adb1a7c989da1ee5180e08fb9c0f5f/comments", "author": null, "committer": null, "parents": [{"sha": "15a15e8dc42b58e92b64924e8c15adceaff9a5ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15a15e8dc42b58e92b64924e8c15adceaff9a5ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15a15e8dc42b58e92b64924e8c15adceaff9a5ae"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "8cef08e48dc5c8bd65f3371ffaa0e1de63dbd4e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671f9f3098adb1a7c989da1ee5180e08fb9c0f5f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671f9f3098adb1a7c989da1ee5180e08fb9c0f5f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=671f9f3098adb1a7c989da1ee5180e08fb9c0f5f", "patch": "@@ -1,3 +1,9 @@\n+2009-09-10  Richard Henderson  <rth@redhat.com>\n+\n+\t* gimple-iterator.c (gimple_find_edge_insert_loc): Use\n+\tgimple_seq_empty_p to test for no PHI nodes.\n+\t* tree-cfg.c (split_critical_edges): Likewise.\n+\n 2009-09-10  Richard Henderson  <rth@redhat.com>\n \n \t* c-common.h (c_dialect_cxx, c_dialect_objc): Boolify."}, {"sha": "47aed5ce4c9f3f7c2891b5a06cc1195c5afe1d36", "filename": "gcc/gimple-iterator.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671f9f3098adb1a7c989da1ee5180e08fb9c0f5f/gcc%2Fgimple-iterator.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671f9f3098adb1a7c989da1ee5180e08fb9c0f5f/gcc%2Fgimple-iterator.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-iterator.c?ref=671f9f3098adb1a7c989da1ee5180e08fb9c0f5f", "patch": "@@ -623,9 +623,9 @@ gimple_find_edge_insert_loc (edge e, gimple_stmt_iterator *gsi,\n      would have to examine the PHIs to prove that none of them used\n      the value set by the statement we want to insert on E.  That\n      hardly seems worth the effort.  */\n-restart:\n+ restart:\n   if (single_pred_p (dest)\n-      && ! phi_nodes (dest)\n+      && gimple_seq_empty_p (phi_nodes (dest))\n       && dest != EXIT_BLOCK_PTR)\n     {\n       *gsi = gsi_start_bb (dest);"}, {"sha": "1357064e2887fd43212551917df9735ee703b8ff", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671f9f3098adb1a7c989da1ee5180e08fb9c0f5f/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671f9f3098adb1a7c989da1ee5180e08fb9c0f5f/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=671f9f3098adb1a7c989da1ee5180e08fb9c0f5f", "patch": "@@ -7250,7 +7250,7 @@ split_critical_edges (void)\n \t     Go ahead and split them too.  This matches the logic in\n \t     gimple_find_edge_insert_loc.  */\n \t  else if ((!single_pred_p (e->dest)\n-\t            || phi_nodes (e->dest)\n+\t            || !gimple_seq_empty_p (phi_nodes (e->dest))\n \t            || e->dest == EXIT_BLOCK_PTR)\n \t\t   && e->src != ENTRY_BLOCK_PTR\n \t           && !(e->flags & EDGE_ABNORMAL))"}]}