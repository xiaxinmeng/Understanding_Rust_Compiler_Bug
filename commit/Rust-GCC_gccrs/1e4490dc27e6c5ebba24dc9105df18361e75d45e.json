{"sha": "1e4490dc27e6c5ebba24dc9105df18361e75d45e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU0NDkwZGMyN2U2YzVlYmJhMjRkYzkxMDVkZjE4MzYxZTc1ZDQ1ZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-03-07T19:54:02Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-03-07T19:54:02Z"}, "message": "re PR target/70064 (Wrong code with custom flags and quite big testcase @ i686)\n\n\tPR target/70064\n\t* config/i386/i386.h (machine_function): Add\n\tpc_thunk_call_expanded flag.\n\t(ix86_pc_thunk_call_expanded): New define.\n\t* config/i386/i386.md (set_got, set_got_labelled): New expanders.\n\t(*set_got): Rename insn pattern from set_got.\n\t(*set_got_labelled): Rename inst pattern from set_got_labelled.\n\t* config/i386/i386.c (ix86_compute_frame_layout): Use\n\tix86_pc_thunk_call_expanded to prevent red-zone.\n\nFrom-SVN: r234050", "tree": {"sha": "260c1fe513dc63c24316c16397bfe6bc87724b81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/260c1fe513dc63c24316c16397bfe6bc87724b81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e4490dc27e6c5ebba24dc9105df18361e75d45e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e4490dc27e6c5ebba24dc9105df18361e75d45e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e4490dc27e6c5ebba24dc9105df18361e75d45e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e4490dc27e6c5ebba24dc9105df18361e75d45e/comments", "author": null, "committer": null, "parents": [{"sha": "96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed"}], "stats": {"total": 86, "additions": 64, "deletions": 22}, "files": [{"sha": "38c47b69656068261d94444375185818d9b22bbe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4490dc27e6c5ebba24dc9105df18361e75d45e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4490dc27e6c5ebba24dc9105df18361e75d45e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e4490dc27e6c5ebba24dc9105df18361e75d45e", "patch": "@@ -1,3 +1,15 @@\n+2016-03-07  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/70064\n+\t* config/i386/i386.h (machine_function): Add\n+\tpc_thunk_call_expanded flag.\n+\t(ix86_pc_thunk_call_expanded): New define.\n+\t* config/i386/i386.md (set_got, set_got_labelled): New expanders.\n+\t(*set_got): Rename insn pattern from set_got.\n+\t(*set_got_labelled): Rename inst pattern from set_got_labelled.\n+\t* config/i386/i386.c (ix86_compute_frame_layout): Use\n+\tix86_pc_thunk_call_expanded to prevent red-zone.\n+\n 2016-03-07  Martin Jambor  <mjambor@suse.cz>\n \n \t* hsa.h (hsa_get_ctor_statements): Declare.\n@@ -26,7 +38,7 @@\n \t-fno-branch-count-reg.\n \n 2016-02-26  Richard Biener  <rguenther@suse.de>\n-            Jeff Law  <law@redhat.com>\n+\t    Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/69740\n \t* cfghooks.c (remove_edge): Request loop fixups if we delete\n@@ -86,11 +98,11 @@\n 2016-03-05  Venkataramanan Kumar  <Venkataramanan.kumar@amd.com>\n \n \tFix sseimul type attribute.\n-\t* config/i386/znver1.md \n+\t* config/i386/znver1.md\n \t(znver1_sseimul, znver1_sseimul_avx256, znver1_sseimul_load,\n \tznver1_sseimul_avx256_load) : Fix the type attribute.\n-\t(znver1_sseimul_di,\n-\tznver1_sseimul_load_di): Fix type attribute, pipe usage and latency. \n+\t(znver1_sseimul_di, znver1_sseimul_load_di): Fix type attribute,\n+\tpipe usage and latency.\n \n 2016-03-05  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -220,8 +232,8 @@\n \t* gimplify.c (gimplify_decl_expr): For decls with REFERENCE_TYPE, also\n \tgimplify_type_sizes the type they refer to.\n \t(omp_notice_variable): Handle reference vars to VLAs.\n-\t* omp-low.c (lower_omp_target): Emit setup of OMP_CLAUSE_PRIVATE reference\n-\tto VLA decls in the second pass instead of first pass.\n+\t* omp-low.c (lower_omp_target): Emit setup of OMP_CLAUSE_PRIVATE\n+\treference to VLA decls in the second pass instead of first pass.\n \n 2016-03-02  Tom de Vries  <tom@codesourcery.com>\n \n@@ -264,7 +276,7 @@\n \t* config.gcc (mep-*-elf): Add newlib-stdint.h to tm_file.\n \n 2016-03-02  Richard Biener  <rguenther@suse.de>\n-\tUros Bizjak  <ubizjak@gmail.com>\n+\t    Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/67278\n \t* config/i386/i386.c (type_natural_mode): Handle XFmode vectors.\n@@ -307,7 +319,8 @@\n \t* tree-ssa-threadbackward.c (fsm_find_control_statement_thread_paths):\n \tDo count some PHIs in the thread path against the insn count.  Decrease\n \tfinal statement count by one as the control statement in the last\n-\tblock will get removed.  Remove special cased code for handling PHIs\t\tin the last block.\n+\tblock will get removed.  Remove special cased code for handling PHIs\n+\tin the last block.\n \n 2016-03-01  Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "5155a00ccc9359bcbfb11b65e92ed09e2c6ebd06", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4490dc27e6c5ebba24dc9105df18361e75d45e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4490dc27e6c5ebba24dc9105df18361e75d45e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1e4490dc27e6c5ebba24dc9105df18361e75d45e", "patch": "@@ -11103,18 +11103,7 @@ output_set_got (rtx dest, rtx label)\n \n   xops[1] = gen_rtx_SYMBOL_REF (Pmode, GOT_SYMBOL_NAME);\n \n-  if (!flag_pic)\n-    {\n-      if (TARGET_MACHO)\n-\t/* We don't need a pic base, we're not producing pic.  */\n-\tgcc_unreachable ();\n-\n-      xops[2] = gen_rtx_LABEL_REF (Pmode, label ? label : gen_label_rtx ());\n-      output_asm_insn (\"mov%z0\\t{%2, %0|%0, %2}\", xops);\n-      targetm.asm_out.internal_label (asm_out_file, \"L\",\n-\t\t\t\t      CODE_LABEL_NUMBER (XEXP (xops[2], 0)));\n-    }\n-  else\n+  if (flag_pic)\n     {\n       char name[32];\n       get_pc_thunk_name (name, REGNO (dest));\n@@ -11139,6 +11128,17 @@ output_set_got (rtx dest, rtx label)\n \t\t\t\t\t   CODE_LABEL_NUMBER (label));\n #endif\n     }\n+  else\n+    {\n+      if (TARGET_MACHO)\n+\t/* We don't need a pic base, we're not producing pic.  */\n+\tgcc_unreachable ();\n+\n+      xops[2] = gen_rtx_LABEL_REF (Pmode, label ? label : gen_label_rtx ());\n+      output_asm_insn (\"mov%z0\\t{%2, %0|%0, %2}\", xops);\n+      targetm.asm_out.internal_label (asm_out_file, \"L\",\n+\t\t\t\t      CODE_LABEL_NUMBER (XEXP (xops[2], 0)));\n+    }\n \n   if (!TARGET_MACHO)\n     output_asm_insn (\"add%z0\\t{%1, %0|%0, %1}\", xops);\n@@ -11524,6 +11524,7 @@ ix86_compute_frame_layout (struct ix86_frame *frame)\n   if (ix86_using_red_zone ()\n       && crtl->sp_is_unchanging\n       && crtl->is_leaf\n+      && !ix86_pc_thunk_call_expanded\n       && !ix86_current_function_calls_tls_descriptor)\n     {\n       frame->red_zone_size = to_allocate;"}, {"sha": "027adb1108b3051fe22b94595f4bc0fdf1e5f701", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4490dc27e6c5ebba24dc9105df18361e75d45e/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4490dc27e6c5ebba24dc9105df18361e75d45e/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=1e4490dc27e6c5ebba24dc9105df18361e75d45e", "patch": "@@ -2494,6 +2494,10 @@ struct GTY(()) machine_function {\n      expander to determine the style used.  */\n   BOOL_BITFIELD use_fast_prologue_epilogue : 1;\n \n+  /* Nonzero if the current function calls pc thunk and\n+     must not use the red zone.  */\n+  BOOL_BITFIELD pc_thunk_call_expanded : 1;\n+\n   /* If true, the current function needs the default PIC register, not\n      an alternate register (on x86) and must not use the red zone (on\n      x86_64), even if it's a leaf function.  We don't want the\n@@ -2533,6 +2537,7 @@ struct GTY(()) machine_function {\n #define ix86_varargs_fpr_size (cfun->machine->varargs_fpr_size)\n #define ix86_optimize_mode_switching (cfun->machine->optimize_mode_switching)\n #define ix86_current_function_needs_cld (cfun->machine->needs_cld)\n+#define ix86_pc_thunk_call_expanded (cfun->machine->pc_thunk_call_expanded)\n #define ix86_tls_descriptor_calls_expanded_in_cfun \\\n   (cfun->machine->tls_descriptor_call_expanded_p)\n /* Since tls_descriptor_call_expanded is not cleared, even if all TLS"}, {"sha": "cb8bcecf630f648c2f78e41b9a7ed3d20b68ea46", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4490dc27e6c5ebba24dc9105df18361e75d45e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4490dc27e6c5ebba24dc9105df18361e75d45e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1e4490dc27e6c5ebba24dc9105df18361e75d45e", "patch": "@@ -12470,7 +12470,18 @@\n   \"\"\n   \"ix86_expand_prologue (); DONE;\")\n \n-(define_insn \"set_got\"\n+(define_expand \"set_got\"\n+  [(parallel\n+     [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t   (unspec:SI [(const_int 0)] UNSPEC_SET_GOT))\n+      (clobber (reg:CC FLAGS_REG))])]\n+  \"!TARGET_64BIT\"\n+{\n+  if (flag_pic && !TARGET_VXWORKS_RTP)\n+    ix86_pc_thunk_call_expanded = true;\n+})\n+\n+(define_insn \"*set_got\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(unspec:SI [(const_int 0)] UNSPEC_SET_GOT))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -12479,7 +12490,19 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"12\")])\n \n-(define_insn \"set_got_labelled\"\n+(define_expand \"set_got_labelled\"\n+  [(parallel\n+     [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t   (unspec:SI [(label_ref (match_operand 1))]\n+\t\t      UNSPEC_SET_GOT))\n+      (clobber (reg:CC FLAGS_REG))])]\n+  \"!TARGET_64BIT\"\n+{\n+  if (flag_pic && !TARGET_VXWORKS_RTP)\n+    ix86_pc_thunk_call_expanded = true;\n+})\n+\n+(define_insn \"*set_got_labelled\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(unspec:SI [(label_ref (match_operand 1))]\n \t UNSPEC_SET_GOT))"}]}