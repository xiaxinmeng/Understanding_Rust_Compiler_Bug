{"sha": "b1bb81608e684070fd15bb378fb38fc7527e406f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFiYjgxNjA4ZTY4NDA3MGZkMTViYjM3OGZiMzhmYzc1MjdlNDA2Zg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-08-08T20:16:53Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-08-08T20:16:53Z"}, "message": "rs6000: Use iterators in more DFP patterns\n\nI noticed some patterns in dfp.md could use the D64_D128 iterator but\ndon't yet.  This converts all remaining simple cases.\n\n\n\t* config/rs6000/dfp.md (D64_D128): Move earlier in the file.\n\t(dfp_suffix): Ditto.\n\t(adddd3, addtd3): Merge to ...\n\t(add<mode>3 for D64_D128): ... this.\n\t(subdd3, subtd3): Merge to ...\n\t(sub<mode>3 for D64_D128): ... this.\n\t(muldd3, multd3): Merge to ...\n\t(mul<mode>3 for D64_D128): ... this.\n\t(divdd3, divtd3): Merge to ...\n\t(div<mode>3 for D64_D128): ... this.\n\t(*cmpdd_internal1, *cmptd_internal1): Merge to ...\n\t(*cmp<mode>_internal1 for D64_D128): ... this.\n\t(ftruncdd2, ftrunctd2): Merge to ...\n\t(ftrunc<mode>2 for D64_D128): ... this.\n\t(fixdddi2, fixtddi2): Merge to ...\n\t(fix<mode>di2 for D64_D128): ... this.\n\nFrom-SVN: r274217", "tree": {"sha": "c91f49fa017898d09d38a7991665a9f7f9a049ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c91f49fa017898d09d38a7991665a9f7f9a049ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1bb81608e684070fd15bb378fb38fc7527e406f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1bb81608e684070fd15bb378fb38fc7527e406f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1bb81608e684070fd15bb378fb38fc7527e406f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1bb81608e684070fd15bb378fb38fc7527e406f/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e98c3ee9712a360b4f470f930ac0c68863db1d3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e98c3ee9712a360b4f470f930ac0c68863db1d3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e98c3ee9712a360b4f470f930ac0c68863db1d3f"}], "stats": {"total": 157, "additions": 58, "deletions": 99}, "files": [{"sha": "f9ebc668e621f8db67195a04953c5b473f20ce1f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1bb81608e684070fd15bb378fb38fc7527e406f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1bb81608e684070fd15bb378fb38fc7527e406f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1bb81608e684070fd15bb378fb38fc7527e406f", "patch": "@@ -1,3 +1,22 @@\n+2019-08-08  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/dfp.md (D64_D128): Move earlier in the file.\n+\t(dfp_suffix): Ditto.\n+\t(adddd3, addtd3): Merge to ...\n+\t(add<mode>3 for D64_D128): ... this.\n+\t(subdd3, subtd3): Merge to ...\n+\t(sub<mode>3 for D64_D128): ... this.\n+\t(muldd3, multd3): Merge to ...\n+\t(mul<mode>3 for D64_D128): ... this.\n+\t(divdd3, divtd3): Merge to ...\n+\t(div<mode>3 for D64_D128): ... this.\n+\t(*cmpdd_internal1, *cmptd_internal1): Merge to ...\n+\t(*cmp<mode>_internal1 for D64_D128): ... this.\n+\t(ftruncdd2, ftrunctd2): Merge to ...\n+\t(ftrunc<mode>2 for D64_D128): ... this.\n+\t(fixdddi2, fixtddi2): Merge to ...\n+\t(fix<mode>di2 for D64_D128): ... this.\n+\n 2019-08-08  Jim Wilson  <jimw@sifive.com>\n \n \tPR target/91229"}, {"sha": "61ede5d2445b3a265fbc2cd027195fd2d9b87084", "filename": "gcc/config/rs6000/dfp.md", "status": "modified", "additions": 39, "deletions": 99, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1bb81608e684070fd15bb378fb38fc7527e406f/gcc%2Fconfig%2Frs6000%2Fdfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1bb81608e684070fd15bb378fb38fc7527e406f/gcc%2Fconfig%2Frs6000%2Fdfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdfp.md?ref=b1bb81608e684070fd15bb378fb38fc7527e406f", "patch": "@@ -28,6 +28,12 @@\n    UNSPEC_MOVSD_STORE\n   ])\n \n+; Either of the two decimal modes.\n+(define_mode_iterator D64_D128 [DD TD])\n+\n+(define_mode_attr dfp_suffix [(DD \"\")\n+\t\t\t      (TD \"q\")])\n+\n \n (define_insn \"movsd_store\"\n   [(set (match_operand:DD 0 \"nonimmediate_operand\" \"=m\")\n@@ -150,84 +156,44 @@\n   [(set_attr \"type\" \"dfp\")\n    (set_attr \"length\" \"8\")])\n \n-(define_insn \"adddd3\"\n-  [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=d\")\n-\t(plus:DD (match_operand:DD 1 \"gpc_reg_operand\" \"%d\")\n-\t\t (match_operand:DD 2 \"gpc_reg_operand\" \"d\")))]\n-  \"TARGET_DFP\"\n-  \"dadd %0,%1,%2\"\n-  [(set_attr \"type\" \"dfp\")])\n-\n-(define_insn \"addtd3\"\n-  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=d\")\n-\t(plus:TD (match_operand:TD 1 \"gpc_reg_operand\" \"%d\")\n-\t\t (match_operand:TD 2 \"gpc_reg_operand\" \"d\")))]\n-  \"TARGET_DFP\"\n-  \"daddq %0,%1,%2\"\n-  [(set_attr \"type\" \"dfp\")])\n-\n-(define_insn \"subdd3\"\n-  [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=d\")\n-\t(minus:DD (match_operand:DD 1 \"gpc_reg_operand\" \"d\")\n-\t\t  (match_operand:DD 2 \"gpc_reg_operand\" \"d\")))]\n-  \"TARGET_DFP\"\n-  \"dsub %0,%1,%2\"\n-  [(set_attr \"type\" \"dfp\")])\n-\n-(define_insn \"subtd3\"\n-  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=d\")\n-\t(minus:TD (match_operand:TD 1 \"gpc_reg_operand\" \"d\")\n-\t\t  (match_operand:TD 2 \"gpc_reg_operand\" \"d\")))]\n-  \"TARGET_DFP\"\n-  \"dsubq %0,%1,%2\"\n-  [(set_attr \"type\" \"dfp\")])\n-\n-(define_insn \"muldd3\"\n-  [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=d\")\n-\t(mult:DD (match_operand:DD 1 \"gpc_reg_operand\" \"%d\")\n-\t\t (match_operand:DD 2 \"gpc_reg_operand\" \"d\")))]\n-  \"TARGET_DFP\"\n-  \"dmul %0,%1,%2\"\n-  [(set_attr \"type\" \"dfp\")])\n-\n-(define_insn \"multd3\"\n-  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=d\")\n-\t(mult:TD (match_operand:TD 1 \"gpc_reg_operand\" \"%d\")\n-\t\t (match_operand:TD 2 \"gpc_reg_operand\" \"d\")))]\n+(define_insn \"add<mode>3\"\n+  [(set (match_operand:D64_D128 0 \"gpc_reg_operand\" \"=d\")\n+\t(plus:D64_D128 (match_operand:D64_D128 1 \"gpc_reg_operand\" \"%d\")\n+\t\t       (match_operand:D64_D128 2 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n-  \"dmulq %0,%1,%2\"\n+  \"dadd<dfp_suffix> %0,%1,%2\"\n   [(set_attr \"type\" \"dfp\")])\n \n-(define_insn \"divdd3\"\n-  [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=d\")\n-\t(div:DD (match_operand:DD 1 \"gpc_reg_operand\" \"d\")\n-\t\t(match_operand:DD 2 \"gpc_reg_operand\" \"d\")))]\n+(define_insn \"sub<mode>3\"\n+  [(set (match_operand:D64_D128 0 \"gpc_reg_operand\" \"=d\")\n+\t(minus:D64_D128 (match_operand:D64_D128 1 \"gpc_reg_operand\" \"d\")\n+\t\t\t(match_operand:D64_D128 2 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n-  \"ddiv %0,%1,%2\"\n+  \"dsub<dfp_suffix> %0,%1,%2\"\n   [(set_attr \"type\" \"dfp\")])\n \n-(define_insn \"divtd3\"\n-  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=d\")\n-\t(div:TD (match_operand:TD 1 \"gpc_reg_operand\" \"d\")\n-\t\t(match_operand:TD 2 \"gpc_reg_operand\" \"d\")))]\n+(define_insn \"mul<mode>3\"\n+  [(set (match_operand:D64_D128 0 \"gpc_reg_operand\" \"=d\")\n+\t(mult:D64_D128 (match_operand:D64_D128 1 \"gpc_reg_operand\" \"%d\")\n+\t\t       (match_operand:D64_D128 2 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n-  \"ddivq %0,%1,%2\"\n+  \"dmul<dfp_suffix> %0,%1,%2\"\n   [(set_attr \"type\" \"dfp\")])\n \n-(define_insn \"*cmpdd_internal1\"\n-  [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n-\t(compare:CCFP (match_operand:DD 1 \"gpc_reg_operand\" \"d\")\n-\t\t      (match_operand:DD 2 \"gpc_reg_operand\" \"d\")))]\n+(define_insn \"div<mode>3\"\n+  [(set (match_operand:D64_D128 0 \"gpc_reg_operand\" \"=d\")\n+\t(div:D64_D128 (match_operand:D64_D128 1 \"gpc_reg_operand\" \"d\")\n+\t\t      (match_operand:D64_D128 2 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n-  \"dcmpu %0,%1,%2\"\n+  \"ddiv<dfp_suffix> %0,%1,%2\"\n   [(set_attr \"type\" \"dfp\")])\n \n-(define_insn \"*cmptd_internal1\"\n+(define_insn \"*cmp<mode>_internal1\"\n   [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n-\t(compare:CCFP (match_operand:TD 1 \"gpc_reg_operand\" \"d\")\n-\t\t      (match_operand:TD 2 \"gpc_reg_operand\" \"d\")))]\n+\t(compare:CCFP (match_operand:D64_D128 1 \"gpc_reg_operand\" \"d\")\n+\t\t      (match_operand:D64_D128 2 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n-  \"dcmpuq %0,%1,%2\"\n+  \"dcmpu<dfp_suffix> %0,%1,%2\"\n   [(set_attr \"type\" \"dfp\")])\n \n (define_insn \"floatdidd2\"\n@@ -244,46 +210,25 @@\n   \"dcffixq %0,%1\"\n   [(set_attr \"type\" \"dfp\")])\n \n-;; Convert a decimal64 to a decimal64 whose value is an integer.\n-;; This is the first stage of converting it to an integer type.\n-\n-(define_insn \"ftruncdd2\"\n-  [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=d\")\n-\t(fix:DD (match_operand:DD 1 \"gpc_reg_operand\" \"d\")))]\n-  \"TARGET_DFP\"\n-  \"drintn. 0,%0,%1,1\"\n-  [(set_attr \"type\" \"dfp\")])\n-\n-;; Convert a decimal64 whose value is an integer to an actual integer.\n-;; This is the second stage of converting decimal float to integer type.\n-\n-(define_insn \"fixdddi2\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d\")\n-\t(fix:DI (match_operand:DD 1 \"gpc_reg_operand\" \"d\")))]\n-  \"TARGET_DFP\"\n-  \"dctfix %0,%1\"\n-  [(set_attr \"type\" \"dfp\")])\n-\n-;; Convert a decimal128 to a decimal128 whose value is an integer.\n+;; Convert a decimal64/128 to a decimal64/128 whose value is an integer.\n ;; This is the first stage of converting it to an integer type.\n \n-(define_insn \"ftrunctd2\"\n-  [(set (match_operand:TD 0 \"gpc_reg_operand\" \"=d\")\n-\t(fix:TD (match_operand:TD 1 \"gpc_reg_operand\" \"d\")))]\n+(define_insn \"ftrunc<mode>2\"\n+  [(set (match_operand:D64_D128 0 \"gpc_reg_operand\" \"=d\")\n+\t(fix:D64_D128 (match_operand:D64_D128 1 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n-  \"drintnq. 0,%0,%1,1\"\n+  \"drintn<dfp_suffix>. 0,%0,%1,1\"\n   [(set_attr \"type\" \"dfp\")])\n \n-;; Convert a decimal128 whose value is an integer to an actual integer.\n+;; Convert a decimal64/128 whose value is an integer to an actual integer.\n ;; This is the second stage of converting decimal float to integer type.\n \n-(define_insn \"fixtddi2\"\n+(define_insn \"fix<mode>di2\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d\")\n-\t(fix:DI (match_operand:TD 1 \"gpc_reg_operand\" \"d\")))]\n+\t(fix:DI (match_operand:D64_D128 1 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_DFP\"\n-  \"dctfixq %0,%1\"\n+  \"dctfix<dfp_suffix> %0,%1\"\n   [(set_attr \"type\" \"dfp\")])\n-\n \f\n ;; Decimal builtin support\n \n@@ -298,11 +243,6 @@\n \n (define_code_iterator DFP_TEST [eq lt gt unordered])\n \n-(define_mode_iterator D64_D128 [DD TD])\n-\n-(define_mode_attr dfp_suffix [(DD \"\")\n-\t\t\t      (TD \"q\")])\n-\n (define_insn \"dfp_ddedpd_<mode>\"\n   [(set (match_operand:D64_D128 0 \"gpc_reg_operand\" \"=d\")\n \t(unspec:D64_D128 [(match_operand:QI 1 \"const_0_to_3_operand\" \"i\")"}]}