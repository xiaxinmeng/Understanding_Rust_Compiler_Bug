{"sha": "5b37e8664b05336df60996a2411b4d61a852c613", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIzN2U4NjY0YjA1MzM2ZGY2MDk5NmEyNDExYjRkNjFhODUyYzYxMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2016-05-02T13:16:22Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2016-05-02T13:16:22Z"}, "message": "omp-low.c (struct oacc_loop): Add 'inner' field.\n\n\tgcc/\n\t* omp-low.c (struct oacc_loop): Add 'inner' field.\n\t(new_oacc_loop_raw): Initialize it to zero.\n\t(oacc_loop_fixed_partitions): Initialize it.\n\t(oacc_loop_auto_partitions): Partition outermost loop to outermost\n\tavailable partitioning.\n\n\tgcc/testsuite/\n\t* c-c++-common/goacc/loop-auto-1.c: Adjust expected warnings.\n\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/loop-auto-1.c: Adjust\n\texpected partitioning.\n\nFrom-SVN: r235756", "tree": {"sha": "87acdea4347b49c250d21fc4ba6bac0ece39f7c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87acdea4347b49c250d21fc4ba6bac0ece39f7c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b37e8664b05336df60996a2411b4d61a852c613", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b37e8664b05336df60996a2411b4d61a852c613", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b37e8664b05336df60996a2411b4d61a852c613", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b37e8664b05336df60996a2411b4d61a852c613/comments", "author": null, "committer": null, "parents": [{"sha": "87cdf04b1adacaf5dc161d2c0c1f990f4a36d67f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87cdf04b1adacaf5dc161d2c0c1f990f4a36d67f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87cdf04b1adacaf5dc161d2c0c1f990f4a36d67f"}], "stats": {"total": 131, "additions": 88, "deletions": 43}, "files": [{"sha": "ff0b573b0c927ed2d906b77cf3c2edd3777ef067", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b37e8664b05336df60996a2411b4d61a852c613/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b37e8664b05336df60996a2411b4d61a852c613/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b37e8664b05336df60996a2411b4d61a852c613", "patch": "@@ -1,3 +1,11 @@\n+2016-05-02  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* omp-low.c (struct oacc_loop): Add 'inner' field.\n+\t(new_oacc_loop_raw): Initialize it to zero.\n+\t(oacc_loop_fixed_partitions): Initialize it.\n+\t(oacc_loop_auto_partitions): Partition outermost loop to outermost\n+\tavailable partitioning.\n+\n 2016-05-02  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.md (mulsidi3): Change operand 0 predicate to"}, {"sha": "e4a1e4746db2e397343339a85669d03e3a371790", "filename": "gcc/omp-low.c", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b37e8664b05336df60996a2411b4d61a852c613/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b37e8664b05336df60996a2411b4d61a852c613/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=5b37e8664b05336df60996a2411b4d61a852c613", "patch": "@@ -241,6 +241,7 @@ struct oacc_loop\n   tree routine;  /* Pseudo-loop enclosing a routine.  */\n \n   unsigned mask;   /* Partitioning mask.  */\n+  unsigned inner;  /* Partitioning of inner loops.  */\n   unsigned flags;  /* Partitioning flags.  */\n   unsigned ifns;   /* Contained loop abstraction functions.  */\n   tree chunk_size; /* Chunk size.  */\n@@ -18921,7 +18922,7 @@ new_oacc_loop_raw (oacc_loop *parent, location_t loc)\n   memset (loop->tails, 0, sizeof (loop->tails));\n   loop->routine = NULL_TREE;\n \n-  loop->mask = loop->flags = 0;\n+  loop->mask = loop->flags = loop->inner = 0;\n   loop->ifns = 0;\n   loop->chunk_size = 0;\n   loop->head_end = NULL;\n@@ -19449,8 +19450,11 @@ oacc_loop_fixed_partitions (oacc_loop *loop, unsigned outer_mask)\n   mask_all |= this_mask;\n   \n   if (loop->child)\n-    mask_all |= oacc_loop_fixed_partitions (loop->child,\n-\t\t\t\t\t    outer_mask | this_mask);\n+    {\n+      loop->inner = oacc_loop_fixed_partitions (loop->child,\n+\t\t\t\t\t\touter_mask | this_mask); \n+      mask_all |= loop->inner;\n+    }\n \n   if (loop->sibling)\n     mask_all |= oacc_loop_fixed_partitions (loop->sibling, outer_mask);\n@@ -19466,7 +19470,7 @@ oacc_loop_fixed_partitions (oacc_loop *loop, unsigned outer_mask)\n static unsigned\n oacc_loop_auto_partitions (oacc_loop *loop, unsigned outer_mask)\n {\n-  unsigned inner_mask = 0;\n+  bool assign = (loop->flags & OLF_AUTO) && (loop->flags & OLF_INDEPENDENT);\n   bool noisy = true;\n \n #ifdef ACCEL_COMPILER\n@@ -19475,16 +19479,33 @@ oacc_loop_auto_partitions (oacc_loop *loop, unsigned outer_mask)\n   noisy = false;\n #endif\n \n+  if (assign && outer_mask < GOMP_DIM_MASK (GOMP_DIM_MAX - 1))\n+    {\n+      /* Allocate the outermost loop at the outermost available\n+\t level.  */\n+      unsigned this_mask = outer_mask + 1;\n+\n+      if (!(this_mask & loop->inner))\n+\tloop->mask = this_mask;\n+    }\n+\n   if (loop->child)\n-    inner_mask |= oacc_loop_auto_partitions (loop->child,\n-\t\t\t\t\t     outer_mask | loop->mask);\n+    {\n+      unsigned child_mask = outer_mask | loop->mask;\n+\n+      if (loop->mask || assign)\n+\tchild_mask |= GOMP_DIM_MASK (GOMP_DIM_MAX);\n \n-  if ((loop->flags & OLF_AUTO) && (loop->flags & OLF_INDEPENDENT))\n+      loop->inner = oacc_loop_auto_partitions (loop->child, child_mask);\n+    }\n+\n+  if (assign && !loop->mask)\n     {\n+      /* Allocate the loop at the innermost available level.  */\n       unsigned this_mask = 0;\n       \n       /* Determine the outermost partitioning used within this loop. */\n-      this_mask = inner_mask | GOMP_DIM_MASK (GOMP_DIM_MAX);\n+      this_mask = loop->inner | GOMP_DIM_MASK (GOMP_DIM_MAX);\n       this_mask = (this_mask & -this_mask);\n \n       /* Pick the partitioning just inside that one.  */\n@@ -19497,17 +19518,20 @@ oacc_loop_auto_partitions (oacc_loop *loop, unsigned outer_mask)\n \twarning_at (loop->loc, 0,\n \t\t    \"insufficient partitioning available to parallelize loop\");\n \n-      if (dump_file)\n-\tfprintf (dump_file, \"Auto loop %s:%d assigned %d\\n\",\n-\t\t LOCATION_FILE (loop->loc), LOCATION_LINE (loop->loc),\n-\t\t this_mask);\n-\n       loop->mask = this_mask;\n     }\n-  inner_mask |= loop->mask;\n+\n+  if (assign && dump_file)\n+    fprintf (dump_file, \"Auto loop %s:%d assigned %d\\n\",\n+\t     LOCATION_FILE (loop->loc), LOCATION_LINE (loop->loc),\n+\t     loop->mask);\n+\n+  unsigned inner_mask = 0;\n   \n   if (loop->sibling)\n     inner_mask |= oacc_loop_auto_partitions (loop->sibling, outer_mask);\n+  \n+  inner_mask |= loop->inner | loop->mask;\n \n   return inner_mask;\n }"}, {"sha": "27a5972024ea7deea77ad677e045a9b74b1582cc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b37e8664b05336df60996a2411b4d61a852c613/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b37e8664b05336df60996a2411b4d61a852c613/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5b37e8664b05336df60996a2411b4d61a852c613", "patch": "@@ -1,3 +1,7 @@\n+2016-05-02  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* c-c++-common/goacc/loop-auto-1.c: Adjust expected warnings.\n+\n 2016-05-02  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/70851"}, {"sha": "33d53409fe3a678961b3a38a4eb04bb8f206057e", "filename": "gcc/testsuite/c-c++-common/goacc/loop-auto-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b37e8664b05336df60996a2411b4d61a852c613/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Floop-auto-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b37e8664b05336df60996a2411b4d61a852c613/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Floop-auto-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Floop-auto-1.c?ref=5b37e8664b05336df60996a2411b4d61a852c613", "patch": "@@ -186,10 +186,10 @@ void Worker (void)\n \tfor (int jx = 0; jx < 10; jx++) {}\n       }\n \n-#pragma acc loop auto /* { dg-warning \"insufficient partitioning\" } */\n+#pragma acc loop auto\n     for (int ix = 0; ix < 10; ix++)\n       {\n-#pragma acc loop auto\n+#pragma acc loop auto /* { dg-warning \"insufficient partitioning\" } */\n \tfor (int jx = 0; jx < 10; jx++)\n \t  {\n #pragma acc loop auto\n@@ -214,10 +214,10 @@ void Vector (void)\n #pragma acc loop auto\n     for (int ix = 0; ix < 10; ix++) {}\n \n-#pragma acc loop auto /* { dg-warning \"insufficient partitioning\" } */\n+#pragma acc loop auto\n     for (int ix = 0; ix < 10; ix++)\n       {\n-#pragma acc loop auto\n+#pragma acc loop auto /* { dg-warning \"insufficient partitioning\" } */\n \tfor (int jx = 0; jx < 10; jx++) {}\n       }\n }"}, {"sha": "9de04f57d73c1c81b899418eac00e85cdddc6d8e", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b37e8664b05336df60996a2411b4d61a852c613/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b37e8664b05336df60996a2411b4d61a852c613/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=5b37e8664b05336df60996a2411b4d61a852c613", "patch": "@@ -1,3 +1,8 @@\n+2016-05-02  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-auto-1.c: Adjust\n+\texpected partitioning.\n+\n 2016-04-29  Cesar Philippidis  <cesar@codesourcery.com>\n \n \tPR middle-end/70626"}, {"sha": "8a755b88038d46eeb2986a3f39f93b41a8317929", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-auto-1.c", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b37e8664b05336df60996a2411b4d61a852c613/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-auto-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b37e8664b05336df60996a2411b4d61a852c613/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-auto-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-auto-1.c?ref=5b37e8664b05336df60996a2411b4d61a852c613", "patch": "@@ -103,9 +103,11 @@ int vector_1 (int *ary, int size)\n   \n #pragma acc parallel num_workers (32) vector_length(32) copy(ary[0:size]) firstprivate (size)\n   {\n+#pragma acc loop gang\n+    for (int jx = 0; jx < 1; jx++)\n #pragma acc loop auto\n-    for (int ix = 0; ix < size; ix++)\n-      ary[ix] = place ();\n+      for (int ix = 0; ix < size; ix++)\n+\tary[ix] = place ();\n   }\n \n   return check (ary, size, 0, 0, 1);\n@@ -118,7 +120,7 @@ int vector_2 (int *ary, int size)\n #pragma acc parallel num_workers (32) vector_length(32) copy(ary[0:size]) firstprivate (size)\n   {\n #pragma acc loop worker\n-    for (int jx = 0; jx <  size  / 64; jx++)\n+    for (int jx = 0; jx < size  / 64; jx++)\n #pragma acc loop auto\n       for (int ix = 0; ix < 64; ix++)\n \tary[ix + jx * 64] = place ();\n@@ -133,30 +135,16 @@ int worker_1 (int *ary, int size)\n   \n #pragma acc parallel num_workers (32) vector_length(32) copy(ary[0:size]) firstprivate (size)\n   {\n+#pragma acc loop gang\n+    for (int kx = 0; kx < 1; kx++)\n #pragma acc loop auto\n-    for (int jx = 0; jx <  size  / 64; jx++)\n+      for (int jx = 0; jx <  size  / 64; jx++)\n #pragma acc loop vector\n-      for (int ix = 0; ix < 64; ix++)\n-\tary[ix + jx * 64] = place ();\n-  }\n-\n-  return check (ary, size, 0, 1, 1);\n-}\n-\n-int worker_2 (int *ary, int size)\n-{\n-  clear (ary, size);\n-  \n-#pragma acc parallel num_workers (32) vector_length(32) copy(ary[0:size]) firstprivate (size)\n-  {\n-#pragma acc loop auto\n-    for (int jx = 0; jx <  size  / 64; jx++)\n-#pragma acc loop auto\n-      for (int ix = 0; ix < 64; ix++)\n-\tary[ix + jx * 64] = place ();\n+\tfor (int ix = 0; ix < 64; ix++)\n+\t  ary[ix + jx * 64] = place ();\n   }\n \n-  return check (ary, size, 0, 1, 1);\n+  return check (ary, size, 0,  1, 1);\n }\n \n int gang_1 (int *ary, int size)\n@@ -193,6 +181,22 @@ int gang_2 (int *ary, int size)\n   return check (ary, size, 1, 1, 1);\n }\n \n+int gang_3 (int *ary, int size)\n+{\n+  clear (ary, size);\n+  \n+#pragma acc parallel num_workers (32) vector_length(32) copy(ary[0:size]) firstprivate (size)\n+  {\n+#pragma acc loop auto\n+    for (int jx = 0; jx <  size  / 64; jx++)\n+#pragma acc loop auto\n+      for (int ix = 0; ix < 64; ix++)\n+\tary[ix + jx * 64] = place ();\n+  }\n+\n+  return check (ary, size, 1, 0, 1);\n+}\n+\n #define N (32*32*32)\n int main ()\n {\n@@ -214,13 +218,13 @@ int main ()\n \n   if (worker_1 (ary,  N))\n     return 1;\n-  if (worker_2 (ary,  N))\n-    return 1;\n   \n   if (gang_1 (ary,  N))\n     return 1;\n   if (gang_2 (ary,  N))\n     return 1;\n+  if (gang_3 (ary,  N))\n+    return 1;\n \n   return 0;\n }"}]}