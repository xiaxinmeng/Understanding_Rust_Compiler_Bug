{"sha": "1c2871213e18fe5a0c1cf7e6c517adf9680e48b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMyODcxMjEzZTE4ZmU1YTBjMWNmN2U2YzUxN2FkZjk2ODBlNDhiNg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2005-11-21T07:55:31Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2005-11-21T07:55:31Z"}, "message": "predicates.md (ax_reg_operand): New predicate.\n\n\t* config/i386/predicates.md (ax_reg_operand): New predicate.\n\t(memory_displacement_only_operand): New predicate.\n\t* config/i386/i386.md (\"modrm\" attribute): Return 0 if one\n\toperand is AX register and the other operand is memory operand\n\twith displacement only.\n\nFrom-SVN: r107283", "tree": {"sha": "373b638db8f3a2c8da7c1035822fdb7c0223e660", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/373b638db8f3a2c8da7c1035822fdb7c0223e660"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c2871213e18fe5a0c1cf7e6c517adf9680e48b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c2871213e18fe5a0c1cf7e6c517adf9680e48b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c2871213e18fe5a0c1cf7e6c517adf9680e48b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c2871213e18fe5a0c1cf7e6c517adf9680e48b6/comments", "author": null, "committer": null, "parents": [{"sha": "ffbc33cc0fabe09294749e262d78e1a4d14c6092", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffbc33cc0fabe09294749e262d78e1a4d14c6092", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffbc33cc0fabe09294749e262d78e1a4d14c6092"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "c9e309ad0dd481b2e4118321d7dedaed0f149e78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2871213e18fe5a0c1cf7e6c517adf9680e48b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2871213e18fe5a0c1cf7e6c517adf9680e48b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c2871213e18fe5a0c1cf7e6c517adf9680e48b6", "patch": "@@ -1,3 +1,11 @@\n+2005-11-21  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* config/i386/predicates.md (ax_reg_operand): New predicate.\n+\t(memory_displacement_only_operand): New predicate.\n+\t* config/i386/i386.md (\"modrm\" attribute): Return 0 if one\n+\toperand is AX register and the other operand is memory operand\n+\twith displacement only.\n+\n 2005-11-21  Uros Bizjak  <uros@kss-loka.si>\n \n \t* fold-const.c (fold_binary) <RDIV_EXPR>: Optimize A / A to 1.0 "}, {"sha": "00ba8293e2cc23d90772d739ace09a97e3315e03", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2871213e18fe5a0c1cf7e6c517adf9680e48b6/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2871213e18fe5a0c1cf7e6c517adf9680e48b6/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1c2871213e18fe5a0c1cf7e6c517adf9680e48b6", "patch": "@@ -314,8 +314,12 @@\n \t      (not (match_operand 0 \"memory_operand\" \"\")))\n \t   (const_int 0)\n \t (and (eq_attr \"type\" \"imov\")\n-\t      (and (match_operand 0 \"register_operand\" \"\")\n-\t           (match_operand 1 \"immediate_operand\" \"\")))\n+\t      (ior (and (match_operand 0 \"register_operand\" \"\")\n+\t\t\t(match_operand 1 \"immediate_operand\" \"\"))\n+\t\t   (ior (and (match_operand 0 \"ax_reg_operand\" \"\")\n+\t\t\t     (match_operand 1 \"memory_displacement_only_operand\" \"\"))\n+\t\t\t(and (match_operand 0 \"memory_displacement_only_operand\" \"\")\n+\t\t\t     (match_operand 1 \"ax_reg_operand\" \"\")))))\n \t   (const_int 0)\n \t (and (eq_attr \"type\" \"call\")\n \t      (match_operand 0 \"constant_call_address_operand\" \"\"))"}, {"sha": "4a7d88a7f5d378d7b61a5fda8a757d88ac4ceda3", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2871213e18fe5a0c1cf7e6c517adf9680e48b6/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2871213e18fe5a0c1cf7e6c517adf9680e48b6/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=1c2871213e18fe5a0c1cf7e6c517adf9680e48b6", "patch": "@@ -75,6 +75,11 @@\n   return REGNO (op) > LAST_VIRTUAL_REGISTER || REGNO (op) < 4;\n })\n \n+;; Return true if op is the AX register.\n+(define_predicate \"ax_reg_operand\"\n+  (and (match_code \"reg\")\n+       (match_test \"REGNO (op) == 0\")))\n+\n ;; Return true if op is the flags register.\n (define_predicate \"flags_reg_operand\"\n   (and (match_code \"reg\")\n@@ -741,6 +746,22 @@\n   return parts.disp != NULL_RTX;\n })\n \n+;; Returns 1 if OP is memory operand with a displacement only.\n+(define_predicate \"memory_displacement_only_operand\"\n+  (match_operand 0 \"memory_operand\")\n+{\n+  struct ix86_address parts;\n+  int ok;\n+\n+  ok = ix86_decompose_address (XEXP (op, 0), &parts);\n+  gcc_assert (ok);\n+\n+  if (parts.base || parts.index)\n+    return 0;\n+\n+  return parts.disp != NULL_RTX;\n+})\n+\n ;; Returns 1 if OP is memory operand that cannot be represented\n ;; by the modRM array.\n (define_predicate \"long_memory_operand\""}]}