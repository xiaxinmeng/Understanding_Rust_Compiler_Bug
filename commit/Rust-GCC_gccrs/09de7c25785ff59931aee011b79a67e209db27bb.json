{"sha": "09de7c25785ff59931aee011b79a67e209db27bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDlkZTdjMjU3ODVmZjU5OTMxYWVlMDExYjc5YTY3ZTIwOWRiMjdiYg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2015-01-02T17:42:52Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2015-01-02T17:42:52Z"}, "message": "single.c (_gfortran_caf_co_reduce): New function.\n\n2015-01-02  Tobias Burnus  <burnus@net-b.de>\n\n        * caf/single.c (_gfortran_caf_co_reduce): New function.\n        * caf/libcaf.h (_gfortran_caf_co_reduce): New prototype.\n\n2015-01-02  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.dg/coarray/collectives_4.f90: New.\n\nFrom-SVN: r219148", "tree": {"sha": "c343efaeaf68d7d672806ad72bfa945ce5a90841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c343efaeaf68d7d672806ad72bfa945ce5a90841"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09de7c25785ff59931aee011b79a67e209db27bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09de7c25785ff59931aee011b79a67e209db27bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09de7c25785ff59931aee011b79a67e209db27bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09de7c25785ff59931aee011b79a67e209db27bb/comments", "author": null, "committer": null, "parents": [{"sha": "6e4d8cb651033fc7c0c6815686211f5f5d94881a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e4d8cb651033fc7c0c6815686211f5f5d94881a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e4d8cb651033fc7c0c6815686211f5f5d94881a"}], "stats": {"total": 1607, "additions": 831, "deletions": 776}, "files": [{"sha": "9e54b6f2bd05ff4f23406200caf6b4880de247e1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09de7c25785ff59931aee011b79a67e209db27bb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09de7c25785ff59931aee011b79a67e209db27bb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=09de7c25785ff59931aee011b79a67e209db27bb", "patch": "@@ -14,7 +14,7 @@\n \t* interface.c (is_procptr_result): New function to check if an\n \texpression is a procedure-pointer result.\n \t(compare_actual_formal): Use it.\n-\n+^L\n Copyright (C) 2015 Free Software Foundation, Inc.\n \n Copying and distribution of this file, with or without modification,"}, {"sha": "a47a1a18ede4046c8726af3295814d6882820bbb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09de7c25785ff59931aee011b79a67e209db27bb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09de7c25785ff59931aee011b79a67e209db27bb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=09de7c25785ff59931aee011b79a67e209db27bb", "patch": "@@ -1,3 +1,7 @@\n+2015-01-02  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/coarray/collectives_4.f90: New.\n+\n 2015-01-02  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/57562\n@@ -18,7 +22,7 @@\n \n \tPR fortran/60507\n \t* gfortran.dg/dummy_procedure_11.f90: New.\n-\n+^L\n Copyright (C) 2015 Free Software Foundation, Inc.\n \n Copying and distribution of this file, with or without modification,"}, {"sha": "6e7be46eb3c48ef7f03e8f0d08a59c9b207d242d", "filename": "gcc/testsuite/gfortran.dg/coarray/collectives_4.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09de7c25785ff59931aee011b79a67e209db27bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fcollectives_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09de7c25785ff59931aee011b79a67e209db27bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fcollectives_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fcollectives_4.f90?ref=09de7c25785ff59931aee011b79a67e209db27bb", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do run }\n+!\n+! CO_REDUCE\n+!\n+implicit none (type, external)\n+intrinsic :: co_reduce\n+integer :: stat\n+integer :: i4, i4_2, i\n+\n+i4 = 21 * this_image()\n+i4_2 = 21\n+do i = 2, num_images()\n+  i4_2 = i4_2 * 21 * i\n+end do\n+call co_reduce(i4, op_i4, stat=stat)\n+if (stat /= 0) call abort()\n+if (i4_2 /= i4) call abort()\n+\n+contains\n+  pure integer function op_i4(a,b)\n+    integer, value :: a, b\n+    op_i4 = a * b\n+  end function op_i4\n+end"}, {"sha": "4a4ea96c86dba1e0c4213d0ec42a6ff169ade132", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 774, "changes": 778, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09de7c25785ff59931aee011b79a67e209db27bb/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09de7c25785ff59931aee011b79a67e209db27bb/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=09de7c25785ff59931aee011b79a67e209db27bb", "patch": "@@ -1,779 +1,9 @@\n-2014-11-28  Bernd Schmidt  <bernds@codesourcery.com>\n+2015-01-02  Tobias Burnus  <burnus@net-b.de>\n \n-        * Makefile.am (AM_CFLAGS): Add -DLIBGFOR_MINIMAL if LIBGFOR_MINIMAL.\n-        (gfor_io_src, gfor_heper_src, gfor_src): Split into minimal and\n-        always included sources.\n-        * Makefile.in: Regenerate.\n-        * configure.ac (LIBGFOR_MINIMAL): New AM_CONDITIONAL.\n-        * configure: Regenerate.\n-        * caf/single.c (caf_runtime_error): Don't print messages if\n-        LIBGFOR_MINIMAL.\n-        * runtime/compile_options.c (fatal_error_in_progress,\n-        show_signal, backtrace_handler, maybe_find_addr2line): Guard with\n-        !defined LIBGFOR_MINIMAL.\n-        (set_options): Likewise for the backtrace code.\n-        * runtime/minimal.c: New file.\n-\n-2014-11-25  Uros Bizjak  <ubizjak@gmail.com>\n-\n-\t* intrinsics/env.c (getenv): Remove unused variable res_len.\n-\n-2014-11-24  John David Anglin  <danglin@gcc.gnu.org>\n-\n-\t* configure.ac: Guard include of <ieeefp.h>.\n-\t* configure: Rebuilt.\n-\n-2014-11-21  H.J. Lu  <hongjiu.lu@intel.com>\n-\n-\tPR bootstrap/63784\n-\t* configure: Regenerated.\n-\n-2014-11-16  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR libfortran/60324\n-\t* intrinsics/random.c (kiss_size): Rename to KISS_SIZE, make it a\n-\tmacro instead of a variable.\n-\t(random_seed_i4): Make seed correct size, remove assert, KISS_SIZE\n-\trelated changes.\n-\t(random_seed_i8): KISS_SIZE related changes.\n-\n-2014-11-13  Marek Polacek  <polacek@redhat.com>\n-\n-\t* intrinsics/access.c: Include <stdlib.h>.\n-\t* intrinsics/chdir.c: Likewise.\n-\t* intrinsics/chmod.c: Likewise.\n-\t* intrinsics/link.c: Likewise.\n-\t* intrinsics/perror.c: Likewise.\n-\t* intrinsics/rename.c: Likewise.\n-\t* intrinsics/symlnk.c: Likewise.\n-\t* intrinsics/unlink.c: Likewise.\n-\n-2014-11-13  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR libfortran/60324\n-\t* configure: Regenerated.\n-\t* configure.ac (AM_CFLAGS): Add Werror=vla.\n-\t* libgfortran.h (gfc_alloca): Remove macro.\n-\t(fc_strdup_notrim): New prototype.\n-\t* intrinsics/access.c (access_func): Use fc_strdup rather than\n-\tstack allocation.\n-\t* intrinsics/chdir.c (chdir_i4_sub): Likewise.\n-\t(chdir_i8_sub): Likewise.\n-\t* intrinsics/chmod.c (chmod_internal): New function, move logic\n-\there.\n-\t(chmod_func): Call chmod_internal.\n-\t* intrinsics/env.c (getenv): Use fc_strdup rather than stack\n-\tallocation.\n-\t(get_environment_variable_i4): Likewise.\n-\t* intrinsics/execute_command_line.c (execute_command_line):\n-\tLikewise.\n-\t* intrinsics/hostnm.c (hostnm_0): New function, use static buffer\n-\trather than VLA.\n-\t(hostnm_i4_sub): Call hostnm_0.\n-\t(hostnm_i8_sub): Likewise.\n-\t(hostnm): Likewise.\n-\t* intrinsics/link.c (link_internal): New function, use fc_strdup\n-\trather than stack allocation.\n-\t(link_i4_sub): Call link_internal.\n-\t(link_i8_sub): Likewise.\n-\t(link_i4): Likewise.\n-\t(link_i8): Likewise.\n-\t* intrinsics/perror.c (perror_sub): Use fc_strdup rather than\n-\tstack allocation.\n-\t* intrinsics/random.c (random_seed_i4): Use static buffer rather\n-\tthan VLA, use _Static_assert to make sure it's big enough.\n-\t* intrinsics/rename.c (rename_internal): New function, use\n-\tfc_strdup rather than stack allocation.\n-\t(rename_i4_sub): Call rename_internal.\n-\t(rename_i8_sub): Likewise.\n-\t(rename_i4): Likewise.\n-\t(rename_i8): Likewise.\n-\t* intrinsics/stat.c (stat_i4_sub_0): Use fc_strdup rather than\n-\tstack allocation.\n-\t(stat_i8_sub_0): Likewise.\n-\t* intrinsics/symlink.c (symlnk_internal): New function, use\n-\tfc_strdup rather than stack allocation.\n-\t(symlnk_i4_sub): Call symlnk_internal.\n-\t(symlnk_i8_sub): Likewise.\n-\t(symlnk_i4): Likewise.\n-\t(symlnk_i8): Likewise.\n-\t* intrinsics/system.c (system_sub): Use fc_strdup rather than\n-\tstack allocation.\n-\t* intrinsics/unlink.c (unlink_i4_sub): Likewise.\n-\t* io/file_pos.c (READ_CHUNK): Make it a macro rather than variable.\n-\t* io/list_read.c (nml_get_obj_data): Use fixed stack buffer, fall\n-\tback to xmalloc/free for large sizes.\n-\t* io/read.c (read_f): Likewise.\n-\t* io/transfer.c (MAX_READ): Make it a macro rather than variable.\n-\t(WRITE_CHUNK): Likewise.\n-\t* io/write_float.def (write_float): Use fixed stack buffer, fall\n-\tback to xmalloc/free for large sizes.\n-\t* runtime/string.c (fc_strdup_notrim): New function.\n-\n-2014-11-11  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\tPR target/63610\n-\t* configure: Regenerate.\n-\n-2014-11-10  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR libfortran/47007\n-\tPR libfortran/61847\n-\t* config.h.in: Regenerated.\n-\t* configure: Regenerated.\n-\t* configure.ac (AC_CHECK_HEADERS_ONCE): Check for xlocale.h.\n-\t(AC_CHECK_FUNCS_ONCE): Check for newlocale, freelocale, uselocale,\n-\tstrerror_l.\n-\t* io/io.h (locale.h): Include.\n-\t(xlocale.h): Include if present.\n-\t(c_locale): New variable.\n-\t(old_locale): New variable.\n-\t(old_locale_ctr): New variable.\n-\t(old_locale_lock): New variable.\n-\t(st_parameter_dt): Add old_locale member.\n-\t* io/transfer.c (data_transfer_init): Set locale to \"C\" if doing\n-\tformatted transfer.\n-\t(finalize_transfer): Reset locale to previous.\n-\t* io/unit.c (c_locale): New variable.\n-\t(old_locale): New variable.\n-\t(old_locale_ctr): New variable.\n-\t(old_locale_lock): New variable.\n-\t(init_units): Init c_locale, init old_locale_lock.\n-\t(close_units): Free c_locale.\n-\t* runtime/error.c (locale.h): Include.\n-\t(xlocale.h): Include if present.\n-\t(gf_strerror): Use strerror_l if available. Reset locale to\n-\tLC_GLOBAL_LOCALE for strerror_r branch.\n-\n-2014-10-20  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR libfortran/63589\n-\t* configure.ac: Check for strtok_r.\n-\t* runtime/main.c (gfstrtok_r): Fallback implementation of\n-\tstrtok_r.\n-\t(find_addr2line): Use strtok_r to split PATH.\n-\t* config.h.in: Regenerated.\n-\t* configure: Regenerated.\n-\n-2014-10-09  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\t* ieee/ieee_helper.c (ieee_is_finite_*, ieee_is_nan_*,\n-\tieee_is_negative_*, ieee_is_normal_*, ieee_copy_sign_*,\n-\tieee_unordered_*, ieee_logb_*, ieee_rint_*, ieee_scalb_*,\n-\tieee_rem_*, ieee_next_after_*): Remove functions.\n-\t* gfortran.map (GFORTRAN_1.5): Remove corresponding symbols.\n-\n-2014-10-05  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\n-\tPR libgfortran/63460\n-\t* io/unit.c (init_units): Initialize the DELIM flag to\n-\tUNSPECIFIED for the STDIN unit so that the flag is\n-\tcorrectly set later.\n-\n-2014-10-01  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\t* intrinsics/pack_generic.c (pack_s_internal): Fix\n-\t-Wmaybe-uninitialized warning.\n-\t* m4/unpack.m4 (unpack0_'rtype_code`): Likewise.\n-\t(unpack1_'rtype_code`): Likewise.\n-\t* generated/unpack_*.m4: Regenerated.\n-\n-2014-09-30  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\t* configure.ac (AM_CFLAGS): Add\n-\t-Werror=implicit-function-declaration.\n-\t* Makefile.in: Regenerated.\n-\t* aclocal.m4: Regenerated.\n-\t* configure: Regenerated.\n-\n-2014-09-25  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* caf/libcaf.h (_gfortran_caf_co_broadcast): New prototype.\n-\t* caf/single.c (_gfortran_caf_co_broadcast): New.\n-\n-2014-09-18  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR libfortran/62768\n-\t* io/inquire.c (inquire_via_unit): Use gfc_unit.filename also when\n-\tHAVE_TTYNAME{_R} is not defined.\n-\n-2014-09-17  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR libfortran/62768\n-\t* io/io.h (gfc_unit): Store C string for the filename.\n-\t* io/close.c (st_close): Use gfc_unit.filename.\n-\t* io/inquire.c (inquire_via_unit): Likewise.\n-\t* io/open.c (new_unit): Likewise.\n-\t(already_open): Likewise, unlink file before freeing filename.\n-\t* io/unit.c (init_units): Likewise.\n-\t(close_unit_1): Likewise.\n-\t(filename_from_unit): Likewise.\n-\t* io/unix.c (compare_file_filename): Likewise.\n-\t(find_file0): Likewise.\n-\t(delete_file): Likewise.\n-\n-2014-09-10  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\t* io/transfer.c (read_block_form): Fix pad status check (found by\n-\tThomas Schwinge with -Wlogical-not-parentheses).\n-\n-2014-08-31  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* caf/libcaf.h (_gfortran_caf_send, _gfortran_caf_get,\n-\t_gfortran_caf_sendget): Update prototype.\n-\t* caf/single.c (_gfortran_caf_send, _gfortran_caf_get,\n-\t_gfortran_caf_sendget): Handle may_require_tmp.\n-\n-2014-08-20  Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR libgfortran/62188\n-\t* m4/bessel.m4: Avoid indexing off the end of an array.\n-\t* generated/bessel_r10.c: Regenerated.\n-\t* generated/bessel_r16.c: Ditto.\n-\t* generated/bessel_r4.c: Ditto.\n-\t* generated/bessel_r8.c: Ditto.\n-\n-2014-08-14  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* caf/libcaf.h (caf_register_t): Update for critical.\n-\t(_gfortran_caf_critical, _gfortran_caf_end_critical): Remove.\n-\t(_gfortran_caf_lock, _gfortran_caf_unlock): Add.\n-\t* caf/single.c (_gfortran_caf_register): Handle locking\n-\tvariables.\n-\t(_gfortran_caf_sendget): Re-name args for consistency.\n-\t(_gfortran_caf_lock, _gfortran_caf_unlock): Add.\n-\n-2014-08-04  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* runtime/memory.c (xmallocarray): Avoid division for the common case.\n-\n-2014-07-20  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\n-\tPR libgfortran/61632\n-\t* io/format.c (format_error): Avoid invalid string pointer by\n-\tusing the fortran string length values to generate error string.\n-\t(parse_format): Allocate the null terminator for the format\n-\tstring.\n-\n-2014-07-12  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* caf/libcaf.h (_gfortran_caf_atomic_define,\n-\t_gfortran_caf_atomic_ref, _gfortran_caf_atomic_op,\n-\t_gfortran_caf_atomic_cas): New prototypes.\n-\t* caf/single.c (_gfortran_caf_atomic_define,\n-\t_gfortran_caf_atomic_ref, _gfortran_caf_atomic_op,\n-\t_gfortran_caf_atomic_cas): New functions.\n-\n-2014-07-10  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\t* config/fpu-*.h (get_fpu_rounding_mode, set_fpu_rounding_mode,\n-\tsupport_fpu_rounding_mode): Clean up, mark unreachable code as such.\n-\n-2014-07-09  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\t* libgfortran.h (support_fpu_underflow_control,\n-\tget_fpu_underflow_mode, set_fpu_underflow_mode): New prototypes.\n-\t* config/fpu-*.h (support_fpu_underflow_control,\n-\tget_fpu_underflow_mode, set_fpu_underflow_mode):\n-\tNew functions.\n-\t* ieee/ieee_arithmetic.F90: Support underflow control.\n-\n-2014-07-08  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n-\n-\t* config/fpu-sysv.h (get_fpu_rounding_mode): Use FP_RN, FP_RP,\n-\tFP_RM, FP_RZ unconditionally.\n-\t(set_fpu_rounding_mode): Likewise.\n-\n-2014-07-07  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\t* libgfortran.h: Assume __GNUC__.\n-\n-2014-07-07  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\t* runtime/stop.c: Use C11 _Noreturn.\n-\t* libgfortran.h: Use C11 _Noreturn in prototypes.\n-\tMove REALPART, IMAGPART and COMPLEX_ASSIGN macros...\n-\t* intrinsics/c99_functions.c: ... here.\n-\n-2014-07-07  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\t* config/fpu-387.h, config/fpu-aix.h, config/fpu-sysv.h,\n-\tconfig/fpu-glibc.h: Use static assertions.\n-\n-2014-07-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n-\n-\t* configure, config.h.in: Regenerate.\n-\t* config/fpu-sysv.h: Include <assert.h>.\n-\n-2014-07-02  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\t* config/fpu-glibc.h: Fix comment about FE_DENORMAL.\n-\n-2014-07-02  Uros Bizjak  <ubizjak@gmail.com>\n-\n-\t* configure.host (ieee_flags): Add -mieee for alpha*.\n-\n-\t* config/fpu-glibc.h (support_fpu_rounding_mode): Correctly handle\n-\tGFC_FPE_UPWARD, GFC_FPE_DOWNWARD and GFC_FPE_TOWARDZERO.\n-\t* config/fpu-aix.h (support_fpu_rounding_mode): Ditto.\n-\n-2014-06-29  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\t* config/fpu-387.h (my_fenv_t): Amend structure so it also works\n-\ton mingw32.\n-\n-2014-06-28  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\n-\tPR libgfortran/61640\n-\t* io/list_read.c (next_char_internal): Adjust the read length to\n-\ta single wide character. (eat_spaces): Add missing paren.\n-\t* io/unix.c (mem_read4): Use the correct mem_alloc function for\n-\twide character internal reads.\n-\n-2014-06-28  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\tPR fortran/29383\n-\t* configure.host: Add checks for IEEE support, rework priorities.\n-\t* configure.ac: Define IEEE_SUPPORT, check for fpsetsticky and\n-\tfpresetsticky.\n-\t* configure: Regenerate.\n-\t* Makefile.am: Build new ieee files, install IEEE_* modules.\n-\t* Makefile.in: Regenerate.\n-\t* gfortran.map (GFORTRAN_1.6): Add new symbols.\n-\t* libgfortran.h (get_fpu_trap_exceptions, set_fpu_trap_exceptions,\n-\tsupport_fpu_trap, set_fpu_except_flags, support_fpu_flag,\n-\tsupport_fpu_rounding_mode, get_fpu_state, set_fpu_state): New\n-\tprototypes.\n-\t* config/fpu-*.h (get_fpu_trap_exceptions,\n-\tset_fpu_trap_exceptions, support_fpu_trap, set_fpu_except_flags,\n-\tsupport_fpu_flag, support_fpu_rounding_mode, get_fpu_state,\n-\tset_fpu_state): New functions.\n-\t* ieee/ieee_features.F90: New file.\n-\t* ieee/ieee_exceptions.F90: New file.\n-\t* ieee/ieee_arithmetic.F90: New file.\n-\t* ieee/ieee_helper.c: New file.\n-\n-2014-06-26  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\n-\tPR libgfortran/61499\n-\t* io/list_read.c (eat_spaces): Use a 'for' loop instead of\n-\t'while' loop to skip the loop if there are no bytes left in the\n-\tstring. Only seek if actual spaces can be skipped.\n-\n-2014-06-25  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* caf/single.c (assign_char4_from_char1, assign_char1_from_char4,\n-\tconvert_type): New static functions.\n-\t(_gfortran_caf_get, _gfortran_caf_send): Use them.\n-\n-2014-06-19  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* caf/single.c (_gfortran_caf_co_sum, _gfortran_caf_co_max,\n-\t_gfortran_caf_co_min): Fix stat setting.\n-\n-2014-06-17  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* caf/libcaf.h (gfc_descriptor_t): New typedef.\n-\t(caf_vector_t): Update.\n-\t(_gfortran_caf_co_sum, _gfortran_caf_co_max, _gfortran_caf_co_min):\n-\tRemove vector-subscript argument.\n-\t(_gfortran_caf_co_send, _gfortran_caf_co_get,\n-\t_gfortran_caf_co_sendget): New.\n-\t* caf/single.c (_gfortran_caf_co_sum, _gfortran_caf_co_max,\n-\t_gfortran_caf_co_min): Remove vector-subscript argument.\n-\t(_gfortran_caf_co_send, _gfortran_caf_co_get,\n-\t_gfortran_caf_co_sendget): New.\n-\n-2014-06-17  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\t* libgfortran.h (xmallocarray): New prototype.\n-\t* runtime/memory.c (xmallocarray): New function.\n-\t(xcalloc): Check for nonzero separately instead of multiplying.\n-\t* generated/*.c: Regenerated.\n-\t* intrinsics/cshift0.c (cshift0): Call xmallocarray instead of\n-\txmalloc.\n-\t* intrinsics/eoshift0.c (eoshift0): Likewise.\n-\t* intrinsics/eoshift2.c (eoshift2): Likewise.\n-\t* intrinsics/pack_generic.c (pack_internal): Likewise.\n-\t(pack_s_internal): Likewise.\n-\t* intrinsics/reshape_generic.c (reshape_internal): Likewise.\n-\t* intrinsics/spread_generic.c (spread_internal): Likewise.\n-\t(spread_internal_scalar): Likewise.\n-\t* intrinsics/string_intrinsics_inc.c (string_trim): Likewise.\n-\t(string_minmax): Likewise.\n-\t* intrinsics/transpose_generic.c (transpose_internal): Likewise.\n-\t* intrinsics/unpack_generic.c (unpack_internal): Likewise.\n-\t* io/list_read.c (nml_touch_nodes): Don't cast xmalloc return value.\n-\t* io/transfer.c (st_set_nml_var): Call xmallocarray instead of\n-\txmalloc.\n-\t* io/unit.c (get_internal_unit): Likewise.\n-\t(filename_from_unit): Don't cast xmalloc return value.\n-\t* io/write.c (nml_write_obj): Likewise, formatting.\n-\t* m4/bessel.m4 (bessel_jn_r'rtype_kind`): Call xmallocarray\n-\tinstead of xmalloc.\n-\t(besse_yn_r'rtype_kind`): Likewise.\n-\t* m4/cshift1.m4 (cshift1): Likewise.\n-\t* m4/eoshift1.m4 (eoshift1): Likewise.\n-\t* m4/eoshift3.m4 (eoshift3): Likewise.\n-\t* m4/iforeach.m4: Likewise.\n-\t* m4/ifunction.m4: Likewise.\n-\t* m4/ifunction_logical.m4 (name`'rtype_qual`_'atype_code):\n-\tLikewise.\n-\t* m4/in_pack.m4 (internal_pack_'rtype_ccode`): Likewise.\n-\t* m4/matmul.m4 (matmul_'rtype_code`): Likewise.\n-\t* m4/matmull.m4 (matmul_'rtype_code`): Likewise.\n-\t* m4/pack.m4 (pack_'rtype_code`): Likewise.\n-\t* m4/reshape.m4 (reshape_'rtype_ccode`): Likewise.\n-\t* m4/shape.m4 (shape_'rtype_kind`): Likewise.\n-\t* m4/spread.m4 (spread_'rtype_code`): Likewise.\n-\t(spread_scalar_'rtype_code`): Likewise.\n-\t* m4/transpose.m4 (transpose_'rtype_code`): Likewise.\n-\t* m4/unpack.m4 (unpack0_'rtype_code`): Likewise.\n-\t(unpack1_'rtype_code`): Likewise.\n-\t* runtime/convert_char.c (convert_char1_to_char4): Likewise.\n-\t(convert_char4_to_char1): Simplify.\n-\t* runtime/environ.c (init_unformatted): Call xmallocarray instead\n-\tof xmalloc.\n-\t* runtime/in_pack_generic.c (internal_pack): Likewise.\n-\n-2014-06-15  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\tPR libfortran/60468\n-\t* configure.ac: Include <math.h> when checking for fp_except_t\n-\tand fp_rnd_t types.\n-\t* configure: Regenerate.\n-\n-2014-06-08  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR libfortran/56981\n-\t* io/unix.h (struct stream_vtable): Add new member function,\n-\tmarkeor.\n-\t(smarkeor): New inline function.\n-\t(flush_if_unbuffered): Remove prototype.\n-\t* io/unix.c (raw_markeor): New function.\n-\t(raw_vtable): Initialize markeor member.\n-\t(buf_markeor): New function.\n-\t(buf_vtable): Initialize markeor member.\n-\t(mem_vtable): Likewise.\n-\t(mem4_vtable): Likewise.\n-\t(flush_if_unbuffered): Remove function.\n-\t* io/transfer.c (next_record): Call smarkeor instead of\n-\tflush_if_unbuffered.\n-\n-2014-05-27  Uros Bizjak  <ubizjak@gmail.com>\n-\n-\t* intrinsics/getcwd.c: Include stdlib.h.\n-\n-2014-05-26  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\t* libgfortran.h (xrealloc): New prototype.\n-\t* runtime/memory.c (xrealloc): New function.\n-\t* io/fbuf.c (fbuf_alloc): Use xrealloc.\n-\t* io/list_read.c (push_char_default): Likewise.\n-\t(push_char4): Likewise.\n-\n-2014-05-26  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR libfortran/61310\n-\t* intrinsics/ctime.c (strctime): Rename to gf_ctime, use snprintf\n-\tinstead of strftime.\n-\t(fdate): Use gf_ctime.\n-\t(fdate_sub): Likewise.\n-\t(ctime): Likewise.\n-\t(ctime_sub): Likewise.\n-\n-2014-05-26  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\n-\tPR libgfortran/55117\n-\t* io/list_read.c (extended_look_ahead): New helper function to\n-\tscan the namelist name and look for matches with the new '+'\n-\textended type parent indicator.  (str_comp_extended): New\n-\thelper function to compare the namelist name with the varname\n-\tnamelist. (find_nml_name): Use the new helper functions to match\n-\tthe extended type varnames.\n-\n-2014-05-23  Jerry DeLisle  <jvdelisle@gcc.gnu>\n-\n-\tPR libfortran/61173\n-\t* io/list_read.c (eat_spaces): If the next character pointed to\n-\tis a space, don't seek, must be at the end.\n-\n-2014-05-23  Hans-Peter Nilsson  <hp@axis.com>\n-\n-\t* configure.ac [with_newlib] (HAVE_STRNLEN, HAVE_STRNDUP): Define.\n-\t* configure: Regenerate.\n-\n-2014-05-23  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR libfortran/60324\n-\t* runtime/string.c: Include stdlib.h.\n-\n-2014-05-22  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR libfortran/60324\n-\t* config.h.in: Regenerated.\n-\t* configure: Regenerated.\n-\t* configure.ac (AC_CHECK_FUNCS_ONCE): Check for strnlen and\n-\tstrndup.\n-\t* libgfortran.h (fc_strdup): New prototype.\n-\t* runtime/string.c (strnlen): New fallback function.\n-\t(strndup): New fallback function.\n-\t(fc_strdup): New function.\n-\t* io/close.c (st_close): Use fc_strdup.\n-\t* io/open.c (new_unit): Likewise.\n-\t(already_open): Likewise.\n-\t* io/unit.c (filename_from_unit): Likewise.\n-\t* io/unix.c (unpack_filename): Remove function.\n-\t(regular_file): Rename to regular_file2, add path argument.\n-\t(regular_file): New function calling regular_file2.\n-\t(compare_file_filename): Use fc_strdup.\n-\t(find_file): Likewise.\n-\t(delete_file): Likewise.\n-\t(file_exists): Likewise.\n-\t(file_size): Likewise.\n-\t(inquire_sequential): Likewise.\n-\t(inquire_direct): Likewise.\n-\t(inquire_formatted): Likewise.\n-\t(inquire_access): Likewise.\n-\t* io/unix.h (unpack_filename): Remove prototype.\n-\t* runtime/main.c (please_free_exe_path_when_done): Change type to\n-\tbool.\n-\t(store_exe_path): Use malloced buffer, grow as needed.\n-\n-2014-05-17  Jerry DeLisle  <jvdelisle@gcc.gnu>\n-\n-\tPR libfortran/52539\n-\t* io/io.h (gfc_unit): New function pointers *next_char_fn_ptr\n-\tand *push_char_fn_ptr.\n-\t*io/list_read.c (next_char): Create macro with this name to call\n-\tthe new function pointer. Split the original next_char function\n-\tinto three new functions. (next_char_default, next_char_internal,\n-\tnext_char_utf8): New functions. (push_char): Create macro with\n-\tthis name to call new function pointer. Split the original\n-\tpush_char into three new functions. (push_char_default,\n-\tpush_char_internal, push_char4): New functions. (set_workers):\n-\tNew function to initilize the function pointers depending on the\n-\ttype of IO to be performed. (list_formatted_read_scalar): Use\n-\tset_workers function. (finish_list_read): Likewise.\n-\t(namelist_read): Likewise.\n-\t(nml_get_obj_data): Use push_char_default.\n-\n-2014-05-16  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR libfortran/61187\n-\t* io/unix.c (raw_close): Check if s->fd is -1.\n-\t(fd_to_stream): Check return value of fstat(), handle error.\n-\n-2014-05-12  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\tPR libfortran/61035\n-\t* intrinsics/getcwd.c (getcwd_i4_sub): Avoid potentially large\n-\tstack allocation, avoid extra copying in the common case.\n-\n-2014-05-12  Janne Blomqvist  <jb@gcc.gnu.org>\n-\n-\t* configure.ac (AM_CFLAGS): Use -std=gnu11.\n-\t(CFLAGS): Likewise.\n-\t* configure: Regenerated.\n-\n-2014-05-11  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* caf/libcaf.h (_gfortran_caf_num_images): Change type of\n-\tsecond argument to int.\n-\t* caf/mpi.c (_gfortran_caf_num_images): Ditto.\n-\t* caf/single.c (_gfortran_caf_num_images): Ditto.\n-\n-2014-05-08  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* caf/libcaf.h (caf_vector_t, _gfortran_caf_co_sum,\n-\t_gfortran_caf_co_min, _gfortran_caf_co_max): Declare\n-\t* caf/single.c\n-\n-2014-05-06  Jerry DeLisle  <jvdelisle@gcc.gnu>\n-\n-\tPR libfortran/61049\n-\t* io/list_read.c (list_formatted_read_scalar): Use eat_separator\n-\tand delete extraneous code.\n-\n-2014-04-30  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* caf/libcaf.h (_gfortran_caf_this_image, _gfortran_caf_num_images):\n-\tNew prototypes.\n-\t(_gfortran_caf_init): Change prototype.\n-\t(mpi_token_t): New typedef.\n-\t(TOKEN): New define.\n-\t* caf/mpi.c (_gfortran_caf_this_image, _gfortran_caf_num_images):\n-\tNew functions.\n-\t(_gfortran_caf_init): Update.\n-\t(_gfortran_caf_finalize, _gfortran_caf_register,\n-\t_gfortran_caf_deregister): Use mpi_token_t.\n-\t* caf/single.c (_gfortran_caf_this_image, _gfortran_caf_num_images):\n-\tNew functions.\n-\t(_gfortran_caf_init): Update.\n-\t(_gfortran_caf_finalize, _gfortran_caf_register,\n-\t_gfortran_caf_deregister): Use mpi_token_t, simplify.\n-\n-2014-04-26  Jerry DeLisle  <jvdelisle@gcc.gnu>\n-\n-\tPR libfortran/52539\n-\t* io/list_read.c: Add uchar typedef. (push_char4): New function\n-\tto save kind=4 character. (next_char_utf8): New function to read\n-\ta single UTF-8 encoded character value. (read_chracter): Update\n-\tto use the new functions for reading UTF-8 strings.\n-\t(list_formatted_read_scalar): Update to handle list directed\n-\treads of UTF-8 strings. (nml_read_obj): Likewise update for\n-\tUTF-8 strings in namelists.\n-\t* io/write.c (nml_write_obj): Add kind=4 character support for\n-\tnamelist writes.\n-\n-2014-04-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n-\n-\t* configure.ac: Quote usage of ac_cv_func_clock_gettime in if test.\n-\t* configure: Regenerate.\n-\n-2014-04-22  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n-\n-\t* config/fpu-387.h [__sun__ && __svr4__]: Remove SSE execution\n-\tcheck.\n-\n-2014-04-11  Jerry DeLisle  <jvdelisle@gcc.gnu>\n-\n-\tPR libfortran/60810\n-\tio/unit.c (is_trim_ok): If internal unit is array, do not trim.\n-\n-2014-03-21  Jerry DeLisle  <jvdelisle@gcc.gnu>\n-\n-\tPR libfortran/60148\n-\t* io/transfer.c (data_transfer_init): If std= was specified, set\n-\tdelim status to DELIM_NONE of no other was specified.\n-\n-2014-03-18  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n-\n-\t* configure.ac: Check for presence of fcntl.\n-\t* configure: Regenerate.\n-\t* config.h.in: Regenerate.\n-\t* io/unix.c (set_close_on_exec): Check for HAVE_FCNTL.\n-\n-2014-03-17  Jerry DeLisle  <jvdelisle@gcc.gnu>\n-\n-\tPR libfortran/48600\n-\t* io/list_read.c (list_formatted_read_scalar): Do not use\n-\teat_separator. Explicitly set the comma and end-of-line flags.\n-\tCheck for END condition from finish_separator.\n-\n-2014-03-15  Jerry DeLisle  <jvdelisle@gcc.gnu>\n-\n-\tPR libfortran/58324\n-\t* io/list_read.c (finish_list_read): Read one character to check\n-\tfor the end of the file.  If it is the end, then issue the file\n-\tend error message.  If not, use eat_line to reach the end\n-\twithout giving error.  The next attempt to read will then\n-\tissue the error as described above.\n-\n-2014-03-12  Jerry DeLisle  <jvdelisle@gcc.gnu>\n-\n-\tPR libfortran/38199\n-\t* io/read.c (read_decimal): Quickly skip spaces to avoid calls\n-\tto next_char.\n-\t* io/unit.c (is_trim_ok): New helper function to check various\n-\tconditions to see if its OK to trim the internal unit string.\n-\t(get_internal_unit): Use LEN_TRIM to shorten selected internal\n-\tunit strings for optimizing READ. Enable this optimization for\n-\tformatted READ.\n-\t* io/list_read.c (finish_list_read): Don't call eat_line for\n-\tinternal units.\n-\n-2014-03-08  Jerry DeLisle  <jvdelisle@gcc.gnu>\n-\n-\tPR libfortran/38199\n-\t* io/list_read.c (next_char): Mark unlikely error checks.\n-\t(eat_spaces): For character array reading, skip ahead over\n-\tspaces rather than call next_char multiple times.\n-\n-2014-03-08  Tobias Burnus  <burnus@net-b.de>\n-\n-\t* libgfortran.h (unlikely, likely): Add usage comment.\n-\n-2014-03-08  Dominique d'Humieres  <dominiq@lps.ens.fr>\n-\n-\tPR libgfortran/60128\n-\t* io/write_float.def (output_float): Remove unused variable\n-\tnzero_real. Replace a double space with a single one.\n-\t(determine_en_precision): Fix wrong handling of the EN format.\n-\n-2014-03-03  Jerry DeLisle  <jvdelisle@gcc.gnu>\n-\n-\tPR libfortran/60148\n-\t* io/inquire.c (inquire_via_unit): In the case of\n-\tDELIM_UNSPECIFIED set inquire return string to \"NONE\".\n-\t* io/list_read.c (read_character): In the case of DELIM_NONE and\n-\tnamelists, complete the character read using the namelist\n-\tvariable length.\n-\t* io/open.c (new_unit): Don't set delim status to none if not\n-\tspecified so that DELIM_UNSPECIFIED can be used later.\n-\t* io/transfer.c (data_transfer_init): For namelist I/O, if the\n-\tunit delim status is unspecified set the current status to quote.\n-\tOtherwise, set current status to the unit status.\n-\t* io/unit.c (get_internel_unit, init_unit): Remember to set\n-\tflags_delim initially to DELIM_UNSPECIFIED so defaults come out\n-\tcorrectly.\n-\t* io/write.c (write_character): Add a new function argument\n-\t\"mode\" to signify that raw output is to be used vs output with\n-\tdelimiters. If the mode is set to DELIM (1) proceed with\n-\tdelimiters. (list_formatted_write_scalar): Write the separator\n-\tonly if a delimiter was previously specified. Update the call to\n-\twrite_character with the mode argument given.\n-\t(namelist_write_newline): Use the mode argument. (nml_write_obj):\n-\tUse the mode argument. Remove use of tmp_delim. Write the\n-\tsemi-colon or comma correctly only when needed with using\n-\tdelimiters. Cleanup whitespace.\n-\t(namelist_write): If delim is not specified in namelist I/O,\n-\tdefault\tto using quotes. Get rid of the tmp_delim variable and\n-\tuse the new mode argument in write_character.\n-\n-2014-02-21  Tobias Burnus  <burnus@net-b.de>\n-\n-\tPR fortran/60286\n-\t* libgfortran/io/inquire.c (yes, no): New static const char vars.\n-\t(inquire_via_unit): Use them. Use OPEN mode instead of using\n-\tPOSIX's access to query about write=, read= and readwrite=.\n-\n-2014-01-20  Jerry DeLisle  <jvdelisle@gcc.gnu>\n-\t    Dominique d'Humieres  <dominiq@lps.ens.fr>\n-\n-\t* io/write_float.def (output_float): Remove inadvertent test\n-\tcode from previous patch.\n-\n-2014-01-19  Jerry DeLisle  <jvdelisle@gcc.gnu>\n-\t    Dominique d'Humieres  <dominiq@lps.ens.fr>\n-\n-\tPR libfortran/59771\n-\tPR libfortran/59774\n-\tPR libfortran/59836\n-\t* io/write_float.def (output_float): Fix wrong handling of the\n-\tFw.0 format.\n-\t(output_float_FMT_G_): Fixes rounding issues with -m32.\n-\n-2014-01-11  Jerry DeLisle  <jvdelisle@gcc.gnu>\n-\t    Dominique d'Humieres  <dominiq@lps.ens.fr>\n-\t    Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR libfortran/59700\n-\tPR libfortran/59764\n-\t* io/io.h (struct st_parameter_dt): Assign expanded_read flag to\n-\tunused bit. Define new variable line_buffer_pos.\n-\t* io/list_read.c (free_saved, next_char, l_push_char,\n-\tread_logical, read_real): Replace use of item_count with\n-\tline_buffer_pos for line_buffer look ahead.\n-\t(read_logical, read_integer, parse_real, read_real, check_type):\n-\tAdjust location of free_line to after generating error messages\n-\tto retain the correct item count for the message.\n-\n-2014-01-02  Richard Sandiford  <rdsandiford@googlemail.com>\n-\n-\tUpdate copyright years\n+\t* caf/single.c (_gfortran_caf_co_reduce): New function.\n+\t* caf/libcaf.h (_gfortran_caf_co_reduce): New prototype.\n ^L\n-Copyright (C) 2013-2014 Free Software Foundation, Inc.\n+Copyright (C) 2015 Free Software Foundation, Inc.\n \n Copying and distribution of this file, with or without modification,\n are permitted in any medium without royalty provided the copyright"}, {"sha": "42b00c77fc84bdd418f1d7106586bcfbaed04dfc", "filename": "libgfortran/ChangeLog-2014", "status": "added", "additions": 780, "deletions": 0, "changes": 780, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09de7c25785ff59931aee011b79a67e209db27bb/libgfortran%2FChangeLog-2014", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09de7c25785ff59931aee011b79a67e209db27bb/libgfortran%2FChangeLog-2014", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog-2014?ref=09de7c25785ff59931aee011b79a67e209db27bb", "patch": "@@ -0,0 +1,780 @@\n+2014-11-28  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* Makefile.am (AM_CFLAGS): Add -DLIBGFOR_MINIMAL if LIBGFOR_MINIMAL.\n+\t(gfor_io_src, gfor_heper_src, gfor_src): Split into minimal and\n+\talways included sources.\n+\t* Makefile.in: Regenerate.\n+\t* configure.ac (LIBGFOR_MINIMAL): New AM_CONDITIONAL.\n+\t* configure: Regenerate.\n+\t* caf/single.c (caf_runtime_error): Don't print messages if\n+\tLIBGFOR_MINIMAL.\n+\t* runtime/compile_options.c (fatal_error_in_progress,\n+\tshow_signal, backtrace_handler, maybe_find_addr2line): Guard with\n+\t!defined LIBGFOR_MINIMAL.\n+\t(set_options): Likewise for the backtrace code.\n+\t* runtime/minimal.c: New file.\n+\n+2014-11-25  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* intrinsics/env.c (getenv): Remove unused variable res_len.\n+\n+2014-11-24  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* configure.ac: Guard include of <ieeefp.h>.\n+\t* configure: Rebuilt.\n+\n+2014-11-21  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR bootstrap/63784\n+\t* configure: Regenerated.\n+\n+2014-11-16  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/60324\n+\t* intrinsics/random.c (kiss_size): Rename to KISS_SIZE, make it a\n+\tmacro instead of a variable.\n+\t(random_seed_i4): Make seed correct size, remove assert, KISS_SIZE\n+\trelated changes.\n+\t(random_seed_i8): KISS_SIZE related changes.\n+\n+2014-11-13  Marek Polacek  <polacek@redhat.com>\n+\n+\t* intrinsics/access.c: Include <stdlib.h>.\n+\t* intrinsics/chdir.c: Likewise.\n+\t* intrinsics/chmod.c: Likewise.\n+\t* intrinsics/link.c: Likewise.\n+\t* intrinsics/perror.c: Likewise.\n+\t* intrinsics/rename.c: Likewise.\n+\t* intrinsics/symlnk.c: Likewise.\n+\t* intrinsics/unlink.c: Likewise.\n+\n+2014-11-13  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/60324\n+\t* configure: Regenerated.\n+\t* configure.ac (AM_CFLAGS): Add Werror=vla.\n+\t* libgfortran.h (gfc_alloca): Remove macro.\n+\t(fc_strdup_notrim): New prototype.\n+\t* intrinsics/access.c (access_func): Use fc_strdup rather than\n+\tstack allocation.\n+\t* intrinsics/chdir.c (chdir_i4_sub): Likewise.\n+\t(chdir_i8_sub): Likewise.\n+\t* intrinsics/chmod.c (chmod_internal): New function, move logic\n+\there.\n+\t(chmod_func): Call chmod_internal.\n+\t* intrinsics/env.c (getenv): Use fc_strdup rather than stack\n+\tallocation.\n+\t(get_environment_variable_i4): Likewise.\n+\t* intrinsics/execute_command_line.c (execute_command_line):\n+\tLikewise.\n+\t* intrinsics/hostnm.c (hostnm_0): New function, use static buffer\n+\trather than VLA.\n+\t(hostnm_i4_sub): Call hostnm_0.\n+\t(hostnm_i8_sub): Likewise.\n+\t(hostnm): Likewise.\n+\t* intrinsics/link.c (link_internal): New function, use fc_strdup\n+\trather than stack allocation.\n+\t(link_i4_sub): Call link_internal.\n+\t(link_i8_sub): Likewise.\n+\t(link_i4): Likewise.\n+\t(link_i8): Likewise.\n+\t* intrinsics/perror.c (perror_sub): Use fc_strdup rather than\n+\tstack allocation.\n+\t* intrinsics/random.c (random_seed_i4): Use static buffer rather\n+\tthan VLA, use _Static_assert to make sure it's big enough.\n+\t* intrinsics/rename.c (rename_internal): New function, use\n+\tfc_strdup rather than stack allocation.\n+\t(rename_i4_sub): Call rename_internal.\n+\t(rename_i8_sub): Likewise.\n+\t(rename_i4): Likewise.\n+\t(rename_i8): Likewise.\n+\t* intrinsics/stat.c (stat_i4_sub_0): Use fc_strdup rather than\n+\tstack allocation.\n+\t(stat_i8_sub_0): Likewise.\n+\t* intrinsics/symlink.c (symlnk_internal): New function, use\n+\tfc_strdup rather than stack allocation.\n+\t(symlnk_i4_sub): Call symlnk_internal.\n+\t(symlnk_i8_sub): Likewise.\n+\t(symlnk_i4): Likewise.\n+\t(symlnk_i8): Likewise.\n+\t* intrinsics/system.c (system_sub): Use fc_strdup rather than\n+\tstack allocation.\n+\t* intrinsics/unlink.c (unlink_i4_sub): Likewise.\n+\t* io/file_pos.c (READ_CHUNK): Make it a macro rather than variable.\n+\t* io/list_read.c (nml_get_obj_data): Use fixed stack buffer, fall\n+\tback to xmalloc/free for large sizes.\n+\t* io/read.c (read_f): Likewise.\n+\t* io/transfer.c (MAX_READ): Make it a macro rather than variable.\n+\t(WRITE_CHUNK): Likewise.\n+\t* io/write_float.def (write_float): Use fixed stack buffer, fall\n+\tback to xmalloc/free for large sizes.\n+\t* runtime/string.c (fc_strdup_notrim): New function.\n+\n+2014-11-11  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR target/63610\n+\t* configure: Regenerate.\n+\n+2014-11-10  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/47007\n+\tPR libfortran/61847\n+\t* config.h.in: Regenerated.\n+\t* configure: Regenerated.\n+\t* configure.ac (AC_CHECK_HEADERS_ONCE): Check for xlocale.h.\n+\t(AC_CHECK_FUNCS_ONCE): Check for newlocale, freelocale, uselocale,\n+\tstrerror_l.\n+\t* io/io.h (locale.h): Include.\n+\t(xlocale.h): Include if present.\n+\t(c_locale): New variable.\n+\t(old_locale): New variable.\n+\t(old_locale_ctr): New variable.\n+\t(old_locale_lock): New variable.\n+\t(st_parameter_dt): Add old_locale member.\n+\t* io/transfer.c (data_transfer_init): Set locale to \"C\" if doing\n+\tformatted transfer.\n+\t(finalize_transfer): Reset locale to previous.\n+\t* io/unit.c (c_locale): New variable.\n+\t(old_locale): New variable.\n+\t(old_locale_ctr): New variable.\n+\t(old_locale_lock): New variable.\n+\t(init_units): Init c_locale, init old_locale_lock.\n+\t(close_units): Free c_locale.\n+\t* runtime/error.c (locale.h): Include.\n+\t(xlocale.h): Include if present.\n+\t(gf_strerror): Use strerror_l if available. Reset locale to\n+\tLC_GLOBAL_LOCALE for strerror_r branch.\n+\n+2014-10-20  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/63589\n+\t* configure.ac: Check for strtok_r.\n+\t* runtime/main.c (gfstrtok_r): Fallback implementation of\n+\tstrtok_r.\n+\t(find_addr2line): Use strtok_r to split PATH.\n+\t* config.h.in: Regenerated.\n+\t* configure: Regenerated.\n+\n+2014-10-09  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* ieee/ieee_helper.c (ieee_is_finite_*, ieee_is_nan_*,\n+\tieee_is_negative_*, ieee_is_normal_*, ieee_copy_sign_*,\n+\tieee_unordered_*, ieee_logb_*, ieee_rint_*, ieee_scalb_*,\n+\tieee_rem_*, ieee_next_after_*): Remove functions.\n+\t* gfortran.map (GFORTRAN_1.5): Remove corresponding symbols.\n+\n+2014-10-05  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/63460\n+\t* io/unit.c (init_units): Initialize the DELIM flag to\n+\tUNSPECIFIED for the STDIN unit so that the flag is\n+\tcorrectly set later.\n+\n+2014-10-01  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* intrinsics/pack_generic.c (pack_s_internal): Fix\n+\t-Wmaybe-uninitialized warning.\n+\t* m4/unpack.m4 (unpack0_'rtype_code`): Likewise.\n+\t(unpack1_'rtype_code`): Likewise.\n+\t* generated/unpack_*.m4: Regenerated.\n+\n+2014-09-30  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* configure.ac (AM_CFLAGS): Add\n+\t-Werror=implicit-function-declaration.\n+\t* Makefile.in: Regenerated.\n+\t* aclocal.m4: Regenerated.\n+\t* configure: Regenerated.\n+\n+2014-09-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* caf/libcaf.h (_gfortran_caf_co_broadcast): New prototype.\n+\t* caf/single.c (_gfortran_caf_co_broadcast): New.\n+\n+2014-09-18  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/62768\n+\t* io/inquire.c (inquire_via_unit): Use gfc_unit.filename also when\n+\tHAVE_TTYNAME{_R} is not defined.\n+\n+2014-09-17  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/62768\n+\t* io/io.h (gfc_unit): Store C string for the filename.\n+\t* io/close.c (st_close): Use gfc_unit.filename.\n+\t* io/inquire.c (inquire_via_unit): Likewise.\n+\t* io/open.c (new_unit): Likewise.\n+\t(already_open): Likewise, unlink file before freeing filename.\n+\t* io/unit.c (init_units): Likewise.\n+\t(close_unit_1): Likewise.\n+\t(filename_from_unit): Likewise.\n+\t* io/unix.c (compare_file_filename): Likewise.\n+\t(find_file0): Likewise.\n+\t(delete_file): Likewise.\n+\n+2014-09-10  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* io/transfer.c (read_block_form): Fix pad status check (found by\n+\tThomas Schwinge with -Wlogical-not-parentheses).\n+\n+2014-08-31  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* caf/libcaf.h (_gfortran_caf_send, _gfortran_caf_get,\n+\t_gfortran_caf_sendget): Update prototype.\n+\t* caf/single.c (_gfortran_caf_send, _gfortran_caf_get,\n+\t_gfortran_caf_sendget): Handle may_require_tmp.\n+\n+2014-08-20  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR libgfortran/62188\n+\t* m4/bessel.m4: Avoid indexing off the end of an array.\n+\t* generated/bessel_r10.c: Regenerated.\n+\t* generated/bessel_r16.c: Ditto.\n+\t* generated/bessel_r4.c: Ditto.\n+\t* generated/bessel_r8.c: Ditto.\n+\n+2014-08-14  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* caf/libcaf.h (caf_register_t): Update for critical.\n+\t(_gfortran_caf_critical, _gfortran_caf_end_critical): Remove.\n+\t(_gfortran_caf_lock, _gfortran_caf_unlock): Add.\n+\t* caf/single.c (_gfortran_caf_register): Handle locking\n+\tvariables.\n+\t(_gfortran_caf_sendget): Re-name args for consistency.\n+\t(_gfortran_caf_lock, _gfortran_caf_unlock): Add.\n+\n+2014-08-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* runtime/memory.c (xmallocarray): Avoid division for the common case.\n+\n+2014-07-20  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/61632\n+\t* io/format.c (format_error): Avoid invalid string pointer by\n+\tusing the fortran string length values to generate error string.\n+\t(parse_format): Allocate the null terminator for the format\n+\tstring.\n+\n+2014-07-12  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* caf/libcaf.h (_gfortran_caf_atomic_define,\n+\t_gfortran_caf_atomic_ref, _gfortran_caf_atomic_op,\n+\t_gfortran_caf_atomic_cas): New prototypes.\n+\t* caf/single.c (_gfortran_caf_atomic_define,\n+\t_gfortran_caf_atomic_ref, _gfortran_caf_atomic_op,\n+\t_gfortran_caf_atomic_cas): New functions.\n+\n+2014-07-10  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* config/fpu-*.h (get_fpu_rounding_mode, set_fpu_rounding_mode,\n+\tsupport_fpu_rounding_mode): Clean up, mark unreachable code as such.\n+\n+2014-07-09  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* libgfortran.h (support_fpu_underflow_control,\n+\tget_fpu_underflow_mode, set_fpu_underflow_mode): New prototypes.\n+\t* config/fpu-*.h (support_fpu_underflow_control,\n+\tget_fpu_underflow_mode, set_fpu_underflow_mode):\n+\tNew functions.\n+\t* ieee/ieee_arithmetic.F90: Support underflow control.\n+\n+2014-07-08  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config/fpu-sysv.h (get_fpu_rounding_mode): Use FP_RN, FP_RP,\n+\tFP_RM, FP_RZ unconditionally.\n+\t(set_fpu_rounding_mode): Likewise.\n+\n+2014-07-07  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* libgfortran.h: Assume __GNUC__.\n+\n+2014-07-07  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* runtime/stop.c: Use C11 _Noreturn.\n+\t* libgfortran.h: Use C11 _Noreturn in prototypes.\n+\tMove REALPART, IMAGPART and COMPLEX_ASSIGN macros...\n+\t* intrinsics/c99_functions.c: ... here.\n+\n+2014-07-07  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* config/fpu-387.h, config/fpu-aix.h, config/fpu-sysv.h,\n+\tconfig/fpu-glibc.h: Use static assertions.\n+\n+2014-07-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure, config.h.in: Regenerate.\n+\t* config/fpu-sysv.h: Include <assert.h>.\n+\n+2014-07-02  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* config/fpu-glibc.h: Fix comment about FE_DENORMAL.\n+\n+2014-07-02  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* configure.host (ieee_flags): Add -mieee for alpha*.\n+\n+\t* config/fpu-glibc.h (support_fpu_rounding_mode): Correctly handle\n+\tGFC_FPE_UPWARD, GFC_FPE_DOWNWARD and GFC_FPE_TOWARDZERO.\n+\t* config/fpu-aix.h (support_fpu_rounding_mode): Ditto.\n+\n+2014-06-29  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* config/fpu-387.h (my_fenv_t): Amend structure so it also works\n+\ton mingw32.\n+\n+2014-06-28  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/61640\n+\t* io/list_read.c (next_char_internal): Adjust the read length to\n+\ta single wide character. (eat_spaces): Add missing paren.\n+\t* io/unix.c (mem_read4): Use the correct mem_alloc function for\n+\twide character internal reads.\n+\n+2014-06-28  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/29383\n+\t* configure.host: Add checks for IEEE support, rework priorities.\n+\t* configure.ac: Define IEEE_SUPPORT, check for fpsetsticky and\n+\tfpresetsticky.\n+\t* configure: Regenerate.\n+\t* Makefile.am: Build new ieee files, install IEEE_* modules.\n+\t* Makefile.in: Regenerate.\n+\t* gfortran.map (GFORTRAN_1.6): Add new symbols.\n+\t* libgfortran.h (get_fpu_trap_exceptions, set_fpu_trap_exceptions,\n+\tsupport_fpu_trap, set_fpu_except_flags, support_fpu_flag,\n+\tsupport_fpu_rounding_mode, get_fpu_state, set_fpu_state): New\n+\tprototypes.\n+\t* config/fpu-*.h (get_fpu_trap_exceptions,\n+\tset_fpu_trap_exceptions, support_fpu_trap, set_fpu_except_flags,\n+\tsupport_fpu_flag, support_fpu_rounding_mode, get_fpu_state,\n+\tset_fpu_state): New functions.\n+\t* ieee/ieee_features.F90: New file.\n+\t* ieee/ieee_exceptions.F90: New file.\n+\t* ieee/ieee_arithmetic.F90: New file.\n+\t* ieee/ieee_helper.c: New file.\n+\n+2014-06-26  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/61499\n+\t* io/list_read.c (eat_spaces): Use a 'for' loop instead of\n+\t'while' loop to skip the loop if there are no bytes left in the\n+\tstring. Only seek if actual spaces can be skipped.\n+\n+2014-06-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* caf/single.c (assign_char4_from_char1, assign_char1_from_char4,\n+\tconvert_type): New static functions.\n+\t(_gfortran_caf_get, _gfortran_caf_send): Use them.\n+\n+2014-06-19  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* caf/single.c (_gfortran_caf_co_sum, _gfortran_caf_co_max,\n+\t_gfortran_caf_co_min): Fix stat setting.\n+\n+2014-06-17  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* caf/libcaf.h (gfc_descriptor_t): New typedef.\n+\t(caf_vector_t): Update.\n+\t(_gfortran_caf_co_sum, _gfortran_caf_co_max, _gfortran_caf_co_min):\n+\tRemove vector-subscript argument.\n+\t(_gfortran_caf_co_send, _gfortran_caf_co_get,\n+\t_gfortran_caf_co_sendget): New.\n+\t* caf/single.c (_gfortran_caf_co_sum, _gfortran_caf_co_max,\n+\t_gfortran_caf_co_min): Remove vector-subscript argument.\n+\t(_gfortran_caf_co_send, _gfortran_caf_co_get,\n+\t_gfortran_caf_co_sendget): New.\n+\n+2014-06-17  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* libgfortran.h (xmallocarray): New prototype.\n+\t* runtime/memory.c (xmallocarray): New function.\n+\t(xcalloc): Check for nonzero separately instead of multiplying.\n+\t* generated/*.c: Regenerated.\n+\t* intrinsics/cshift0.c (cshift0): Call xmallocarray instead of\n+\txmalloc.\n+\t* intrinsics/eoshift0.c (eoshift0): Likewise.\n+\t* intrinsics/eoshift2.c (eoshift2): Likewise.\n+\t* intrinsics/pack_generic.c (pack_internal): Likewise.\n+\t(pack_s_internal): Likewise.\n+\t* intrinsics/reshape_generic.c (reshape_internal): Likewise.\n+\t* intrinsics/spread_generic.c (spread_internal): Likewise.\n+\t(spread_internal_scalar): Likewise.\n+\t* intrinsics/string_intrinsics_inc.c (string_trim): Likewise.\n+\t(string_minmax): Likewise.\n+\t* intrinsics/transpose_generic.c (transpose_internal): Likewise.\n+\t* intrinsics/unpack_generic.c (unpack_internal): Likewise.\n+\t* io/list_read.c (nml_touch_nodes): Don't cast xmalloc return value.\n+\t* io/transfer.c (st_set_nml_var): Call xmallocarray instead of\n+\txmalloc.\n+\t* io/unit.c (get_internal_unit): Likewise.\n+\t(filename_from_unit): Don't cast xmalloc return value.\n+\t* io/write.c (nml_write_obj): Likewise, formatting.\n+\t* m4/bessel.m4 (bessel_jn_r'rtype_kind`): Call xmallocarray\n+\tinstead of xmalloc.\n+\t(besse_yn_r'rtype_kind`): Likewise.\n+\t* m4/cshift1.m4 (cshift1): Likewise.\n+\t* m4/eoshift1.m4 (eoshift1): Likewise.\n+\t* m4/eoshift3.m4 (eoshift3): Likewise.\n+\t* m4/iforeach.m4: Likewise.\n+\t* m4/ifunction.m4: Likewise.\n+\t* m4/ifunction_logical.m4 (name`'rtype_qual`_'atype_code):\n+\tLikewise.\n+\t* m4/in_pack.m4 (internal_pack_'rtype_ccode`): Likewise.\n+\t* m4/matmul.m4 (matmul_'rtype_code`): Likewise.\n+\t* m4/matmull.m4 (matmul_'rtype_code`): Likewise.\n+\t* m4/pack.m4 (pack_'rtype_code`): Likewise.\n+\t* m4/reshape.m4 (reshape_'rtype_ccode`): Likewise.\n+\t* m4/shape.m4 (shape_'rtype_kind`): Likewise.\n+\t* m4/spread.m4 (spread_'rtype_code`): Likewise.\n+\t(spread_scalar_'rtype_code`): Likewise.\n+\t* m4/transpose.m4 (transpose_'rtype_code`): Likewise.\n+\t* m4/unpack.m4 (unpack0_'rtype_code`): Likewise.\n+\t(unpack1_'rtype_code`): Likewise.\n+\t* runtime/convert_char.c (convert_char1_to_char4): Likewise.\n+\t(convert_char4_to_char1): Simplify.\n+\t* runtime/environ.c (init_unformatted): Call xmallocarray instead\n+\tof xmalloc.\n+\t* runtime/in_pack_generic.c (internal_pack): Likewise.\n+\n+2014-06-15  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR libfortran/60468\n+\t* configure.ac: Include <math.h> when checking for fp_except_t\n+\tand fp_rnd_t types.\n+\t* configure: Regenerate.\n+\n+2014-06-08  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/56981\n+\t* io/unix.h (struct stream_vtable): Add new member function,\n+\tmarkeor.\n+\t(smarkeor): New inline function.\n+\t(flush_if_unbuffered): Remove prototype.\n+\t* io/unix.c (raw_markeor): New function.\n+\t(raw_vtable): Initialize markeor member.\n+\t(buf_markeor): New function.\n+\t(buf_vtable): Initialize markeor member.\n+\t(mem_vtable): Likewise.\n+\t(mem4_vtable): Likewise.\n+\t(flush_if_unbuffered): Remove function.\n+\t* io/transfer.c (next_record): Call smarkeor instead of\n+\tflush_if_unbuffered.\n+\n+2014-05-27  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* intrinsics/getcwd.c: Include stdlib.h.\n+\n+2014-05-26  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* libgfortran.h (xrealloc): New prototype.\n+\t* runtime/memory.c (xrealloc): New function.\n+\t* io/fbuf.c (fbuf_alloc): Use xrealloc.\n+\t* io/list_read.c (push_char_default): Likewise.\n+\t(push_char4): Likewise.\n+\n+2014-05-26  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/61310\n+\t* intrinsics/ctime.c (strctime): Rename to gf_ctime, use snprintf\n+\tinstead of strftime.\n+\t(fdate): Use gf_ctime.\n+\t(fdate_sub): Likewise.\n+\t(ctime): Likewise.\n+\t(ctime_sub): Likewise.\n+\n+2014-05-26  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/55117\n+\t* io/list_read.c (extended_look_ahead): New helper function to\n+\tscan the namelist name and look for matches with the new '+'\n+\textended type parent indicator.  (str_comp_extended): New\n+\thelper function to compare the namelist name with the varname\n+\tnamelist. (find_nml_name): Use the new helper functions to match\n+\tthe extended type varnames.\n+\n+2014-05-23  Jerry DeLisle  <jvdelisle@gcc.gnu>\n+\n+\tPR libfortran/61173\n+\t* io/list_read.c (eat_spaces): If the next character pointed to\n+\tis a space, don't seek, must be at the end.\n+\n+2014-05-23  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* configure.ac [with_newlib] (HAVE_STRNLEN, HAVE_STRNDUP): Define.\n+\t* configure: Regenerate.\n+\n+2014-05-23  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/60324\n+\t* runtime/string.c: Include stdlib.h.\n+\n+2014-05-22  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/60324\n+\t* config.h.in: Regenerated.\n+\t* configure: Regenerated.\n+\t* configure.ac (AC_CHECK_FUNCS_ONCE): Check for strnlen and\n+\tstrndup.\n+\t* libgfortran.h (fc_strdup): New prototype.\n+\t* runtime/string.c (strnlen): New fallback function.\n+\t(strndup): New fallback function.\n+\t(fc_strdup): New function.\n+\t* io/close.c (st_close): Use fc_strdup.\n+\t* io/open.c (new_unit): Likewise.\n+\t(already_open): Likewise.\n+\t* io/unit.c (filename_from_unit): Likewise.\n+\t* io/unix.c (unpack_filename): Remove function.\n+\t(regular_file): Rename to regular_file2, add path argument.\n+\t(regular_file): New function calling regular_file2.\n+\t(compare_file_filename): Use fc_strdup.\n+\t(find_file): Likewise.\n+\t(delete_file): Likewise.\n+\t(file_exists): Likewise.\n+\t(file_size): Likewise.\n+\t(inquire_sequential): Likewise.\n+\t(inquire_direct): Likewise.\n+\t(inquire_formatted): Likewise.\n+\t(inquire_access): Likewise.\n+\t* io/unix.h (unpack_filename): Remove prototype.\n+\t* runtime/main.c (please_free_exe_path_when_done): Change type to\n+\tbool.\n+\t(store_exe_path): Use malloced buffer, grow as needed.\n+\n+2014-05-17  Jerry DeLisle  <jvdelisle@gcc.gnu>\n+\n+\tPR libfortran/52539\n+\t* io/io.h (gfc_unit): New function pointers *next_char_fn_ptr\n+\tand *push_char_fn_ptr.\n+\t*io/list_read.c (next_char): Create macro with this name to call\n+\tthe new function pointer. Split the original next_char function\n+\tinto three new functions. (next_char_default, next_char_internal,\n+\tnext_char_utf8): New functions. (push_char): Create macro with\n+\tthis name to call new function pointer. Split the original\n+\tpush_char into three new functions. (push_char_default,\n+\tpush_char_internal, push_char4): New functions. (set_workers):\n+\tNew function to initilize the function pointers depending on the\n+\ttype of IO to be performed. (list_formatted_read_scalar): Use\n+\tset_workers function. (finish_list_read): Likewise.\n+\t(namelist_read): Likewise.\n+\t(nml_get_obj_data): Use push_char_default.\n+\n+2014-05-16  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/61187\n+\t* io/unix.c (raw_close): Check if s->fd is -1.\n+\t(fd_to_stream): Check return value of fstat(), handle error.\n+\n+2014-05-12  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/61035\n+\t* intrinsics/getcwd.c (getcwd_i4_sub): Avoid potentially large\n+\tstack allocation, avoid extra copying in the common case.\n+\n+2014-05-12  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* configure.ac (AM_CFLAGS): Use -std=gnu11.\n+\t(CFLAGS): Likewise.\n+\t* configure: Regenerated.\n+\n+2014-05-11  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* caf/libcaf.h (_gfortran_caf_num_images): Change type of\n+\tsecond argument to int.\n+\t* caf/mpi.c (_gfortran_caf_num_images): Ditto.\n+\t* caf/single.c (_gfortran_caf_num_images): Ditto.\n+\n+2014-05-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* caf/libcaf.h (caf_vector_t, _gfortran_caf_co_sum,\n+\t_gfortran_caf_co_min, _gfortran_caf_co_max): Declare\n+\t* caf/single.c\n+\n+2014-05-06  Jerry DeLisle  <jvdelisle@gcc.gnu>\n+\n+\tPR libfortran/61049\n+\t* io/list_read.c (list_formatted_read_scalar): Use eat_separator\n+\tand delete extraneous code.\n+\n+2014-04-30  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* caf/libcaf.h (_gfortran_caf_this_image, _gfortran_caf_num_images):\n+\tNew prototypes.\n+\t(_gfortran_caf_init): Change prototype.\n+\t(mpi_token_t): New typedef.\n+\t(TOKEN): New define.\n+\t* caf/mpi.c (_gfortran_caf_this_image, _gfortran_caf_num_images):\n+\tNew functions.\n+\t(_gfortran_caf_init): Update.\n+\t(_gfortran_caf_finalize, _gfortran_caf_register,\n+\t_gfortran_caf_deregister): Use mpi_token_t.\n+\t* caf/single.c (_gfortran_caf_this_image, _gfortran_caf_num_images):\n+\tNew functions.\n+\t(_gfortran_caf_init): Update.\n+\t(_gfortran_caf_finalize, _gfortran_caf_register,\n+\t_gfortran_caf_deregister): Use mpi_token_t, simplify.\n+\n+2014-04-26  Jerry DeLisle  <jvdelisle@gcc.gnu>\n+\n+\tPR libfortran/52539\n+\t* io/list_read.c: Add uchar typedef. (push_char4): New function\n+\tto save kind=4 character. (next_char_utf8): New function to read\n+\ta single UTF-8 encoded character value. (read_chracter): Update\n+\tto use the new functions for reading UTF-8 strings.\n+\t(list_formatted_read_scalar): Update to handle list directed\n+\treads of UTF-8 strings. (nml_read_obj): Likewise update for\n+\tUTF-8 strings in namelists.\n+\t* io/write.c (nml_write_obj): Add kind=4 character support for\n+\tnamelist writes.\n+\n+2014-04-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* configure.ac: Quote usage of ac_cv_func_clock_gettime in if test.\n+\t* configure: Regenerate.\n+\n+2014-04-22  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config/fpu-387.h [__sun__ && __svr4__]: Remove SSE execution\n+\tcheck.\n+\n+2014-04-11  Jerry DeLisle  <jvdelisle@gcc.gnu>\n+\n+\tPR libfortran/60810\n+\tio/unit.c (is_trim_ok): If internal unit is array, do not trim.\n+\n+2014-03-21  Jerry DeLisle  <jvdelisle@gcc.gnu>\n+\n+\tPR libfortran/60148\n+\t* io/transfer.c (data_transfer_init): If std= was specified, set\n+\tdelim status to DELIM_NONE of no other was specified.\n+\n+2014-03-18  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* configure.ac: Check for presence of fcntl.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\t* io/unix.c (set_close_on_exec): Check for HAVE_FCNTL.\n+\n+2014-03-17  Jerry DeLisle  <jvdelisle@gcc.gnu>\n+\n+\tPR libfortran/48600\n+\t* io/list_read.c (list_formatted_read_scalar): Do not use\n+\teat_separator. Explicitly set the comma and end-of-line flags.\n+\tCheck for END condition from finish_separator.\n+\n+2014-03-15  Jerry DeLisle  <jvdelisle@gcc.gnu>\n+\n+\tPR libfortran/58324\n+\t* io/list_read.c (finish_list_read): Read one character to check\n+\tfor the end of the file.  If it is the end, then issue the file\n+\tend error message.  If not, use eat_line to reach the end\n+\twithout giving error.  The next attempt to read will then\n+\tissue the error as described above.\n+\n+2014-03-12  Jerry DeLisle  <jvdelisle@gcc.gnu>\n+\n+\tPR libfortran/38199\n+\t* io/read.c (read_decimal): Quickly skip spaces to avoid calls\n+\tto next_char.\n+\t* io/unit.c (is_trim_ok): New helper function to check various\n+\tconditions to see if its OK to trim the internal unit string.\n+\t(get_internal_unit): Use LEN_TRIM to shorten selected internal\n+\tunit strings for optimizing READ. Enable this optimization for\n+\tformatted READ.\n+\t* io/list_read.c (finish_list_read): Don't call eat_line for\n+\tinternal units.\n+\n+2014-03-08  Jerry DeLisle  <jvdelisle@gcc.gnu>\n+\n+\tPR libfortran/38199\n+\t* io/list_read.c (next_char): Mark unlikely error checks.\n+\t(eat_spaces): For character array reading, skip ahead over\n+\tspaces rather than call next_char multiple times.\n+\n+2014-03-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* libgfortran.h (unlikely, likely): Add usage comment.\n+\n+2014-03-08  Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\n+\tPR libgfortran/60128\n+\t* io/write_float.def (output_float): Remove unused variable\n+\tnzero_real. Replace a double space with a single one.\n+\t(determine_en_precision): Fix wrong handling of the EN format.\n+\n+2014-03-03  Jerry DeLisle  <jvdelisle@gcc.gnu>\n+\n+\tPR libfortran/60148\n+\t* io/inquire.c (inquire_via_unit): In the case of\n+\tDELIM_UNSPECIFIED set inquire return string to \"NONE\".\n+\t* io/list_read.c (read_character): In the case of DELIM_NONE and\n+\tnamelists, complete the character read using the namelist\n+\tvariable length.\n+\t* io/open.c (new_unit): Don't set delim status to none if not\n+\tspecified so that DELIM_UNSPECIFIED can be used later.\n+\t* io/transfer.c (data_transfer_init): For namelist I/O, if the\n+\tunit delim status is unspecified set the current status to quote.\n+\tOtherwise, set current status to the unit status.\n+\t* io/unit.c (get_internel_unit, init_unit): Remember to set\n+\tflags_delim initially to DELIM_UNSPECIFIED so defaults come out\n+\tcorrectly.\n+\t* io/write.c (write_character): Add a new function argument\n+\t\"mode\" to signify that raw output is to be used vs output with\n+\tdelimiters. If the mode is set to DELIM (1) proceed with\n+\tdelimiters. (list_formatted_write_scalar): Write the separator\n+\tonly if a delimiter was previously specified. Update the call to\n+\twrite_character with the mode argument given.\n+\t(namelist_write_newline): Use the mode argument. (nml_write_obj):\n+\tUse the mode argument. Remove use of tmp_delim. Write the\n+\tsemi-colon or comma correctly only when needed with using\n+\tdelimiters. Cleanup whitespace.\n+\t(namelist_write): If delim is not specified in namelist I/O,\n+\tdefault\tto using quotes. Get rid of the tmp_delim variable and\n+\tuse the new mode argument in write_character.\n+\n+2014-02-21  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/60286\n+\t* libgfortran/io/inquire.c (yes, no): New static const char vars.\n+\t(inquire_via_unit): Use them. Use OPEN mode instead of using\n+\tPOSIX's access to query about write=, read= and readwrite=.\n+\n+2014-01-20  Jerry DeLisle  <jvdelisle@gcc.gnu>\n+\t    Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\n+\t* io/write_float.def (output_float): Remove inadvertent test\n+\tcode from previous patch.\n+\n+2014-01-19  Jerry DeLisle  <jvdelisle@gcc.gnu>\n+\t    Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\n+\tPR libfortran/59771\n+\tPR libfortran/59774\n+\tPR libfortran/59836\n+\t* io/write_float.def (output_float): Fix wrong handling of the\n+\tFw.0 format.\n+\t(output_float_FMT_G_): Fixes rounding issues with -m32.\n+\n+2014-01-11  Jerry DeLisle  <jvdelisle@gcc.gnu>\n+\t    Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\t    Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR libfortran/59700\n+\tPR libfortran/59764\n+\t* io/io.h (struct st_parameter_dt): Assign expanded_read flag to\n+\tunused bit. Define new variable line_buffer_pos.\n+\t* io/list_read.c (free_saved, next_char, l_push_char,\n+\tread_logical, read_real): Replace use of item_count with\n+\tline_buffer_pos for line_buffer look ahead.\n+\t(read_logical, read_integer, parse_real, read_real, check_type):\n+\tAdjust location of free_line to after generating error messages\n+\tto retain the correct item count for the message.\n+\n+2014-01-02  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tUpdate copyright years\n+^L\n+Copyright (C) 2014 Free Software Foundation, Inc.\n+\n+Copying and distribution of this file, with or without modification,\n+are permitted in any medium without royalty provided the copyright\n+notice and this notice are preserved."}, {"sha": "625078cdcbbd2d5c30afd4fc394a6e23fe5f1945", "filename": "libgfortran/caf/libcaf.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09de7c25785ff59931aee011b79a67e209db27bb/libgfortran%2Fcaf%2Flibcaf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09de7c25785ff59931aee011b79a67e209db27bb/libgfortran%2Fcaf%2Flibcaf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Flibcaf.h?ref=09de7c25785ff59931aee011b79a67e209db27bb", "patch": "@@ -110,6 +110,8 @@ void _gfortran_caf_co_broadcast (gfc_descriptor_t *, int, int *, char *, int);\n void _gfortran_caf_co_sum (gfc_descriptor_t *, int, int *, char *, int);\n void _gfortran_caf_co_min (gfc_descriptor_t *, int, int *, char *, int, int);\n void _gfortran_caf_co_max (gfc_descriptor_t *, int, int *, char *, int, int);\n+void _gfortran_caf_co_reduce (gfc_descriptor_t *, void* (*) (void *, void*),\n+\t\t\t      int, int, int *, char *, int, int);\n \n void _gfortran_caf_get (caf_token_t, size_t, int, gfc_descriptor_t *,\n                         caf_vector_t *, gfc_descriptor_t *, int, int, bool);"}, {"sha": "2a553723465a6d74d78bb7c8803ac3043f4063b9", "filename": "libgfortran/caf/single.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09de7c25785ff59931aee011b79a67e209db27bb/libgfortran%2Fcaf%2Fsingle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09de7c25785ff59931aee011b79a67e209db27bb/libgfortran%2Fcaf%2Fsingle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Fsingle.c?ref=09de7c25785ff59931aee011b79a67e209db27bb", "patch": "@@ -254,6 +254,21 @@ _gfortran_caf_co_max (gfc_descriptor_t *a __attribute__ ((unused)),\n }\n \n \n+void\n+_gfortran_caf_co_reduce (gfc_descriptor_t *a __attribute__ ((unused)),\n+                        void * (*opr) (void *, void *)\n+                               __attribute__ ((unused)),\n+                        int opr_flags __attribute__ ((unused)),\n+                        int result_image __attribute__ ((unused)),\n+                        int *stat, char *errmsg __attribute__ ((unused)),\n+                        int a_len __attribute__ ((unused)),\n+                        int errmsg_len __attribute__ ((unused)))\n+ {\n+   if (stat)\n+     *stat = 0;\n+ }\n+\n+\n static void\n assign_char4_from_char1 (size_t dst_size, size_t src_size, uint32_t *dst,\n \t\t\t unsigned char *src)"}]}