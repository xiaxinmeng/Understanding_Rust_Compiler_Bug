{"sha": "940b29aa635f6844c5de0cff75526c5994b79a18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQwYjI5YWE2MzVmNjg0NGM1ZGUwY2ZmNzU1MjZjNTk5NGI3OWExOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-07-31T13:36:12Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-07-31T13:36:12Z"}, "message": "jump.c (duplicate_loop_exit_test): Better test for jumps entering the loop; create loop pre_header.\n\n\t* jump.c (duplicate_loop_exit_test): Better test for jumps\n\tentering the loop; create loop pre_header.\n\nFrom-SVN: r44512", "tree": {"sha": "04d23a0a7c5e6d0c065f15b3a5ac8b34efc0196f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04d23a0a7c5e6d0c065f15b3a5ac8b34efc0196f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/940b29aa635f6844c5de0cff75526c5994b79a18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/940b29aa635f6844c5de0cff75526c5994b79a18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/940b29aa635f6844c5de0cff75526c5994b79a18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/940b29aa635f6844c5de0cff75526c5994b79a18/comments", "author": null, "committer": null, "parents": [{"sha": "20dde49d1f94e2a4e2b85ef3c769e5a0fd549b7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20dde49d1f94e2a4e2b85ef3c769e5a0fd549b7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20dde49d1f94e2a4e2b85ef3c769e5a0fd549b7a"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "461b9023af3154406165b04dc67ddf16f4c420af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940b29aa635f6844c5de0cff75526c5994b79a18/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940b29aa635f6844c5de0cff75526c5994b79a18/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=940b29aa635f6844c5de0cff75526c5994b79a18", "patch": "@@ -1,3 +1,8 @@\n+Tue Jul 31 15:33:27 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* jump.c (duplicate_loop_exit_test): Better test for jumps\n+\tentering the loop; create loop pre_header.\n+\n 2001-07-31 Hartmut Penner <hpenner@de.ibm.com>\n \n         * doc/install.texi: Add s390 and s390x as new targets."}, {"sha": "dd099f2a84098633325b536905cb78e898a86cd5", "filename": "gcc/jump.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940b29aa635f6844c5de0cff75526c5994b79a18/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940b29aa635f6844c5de0cff75526c5994b79a18/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=940b29aa635f6844c5de0cff75526c5994b79a18", "patch": "@@ -305,6 +305,7 @@ duplicate_loop_exit_test (loop_start)\n   rtx lastexit;\n   int max_reg = max_reg_num ();\n   rtx *reg_map = 0;\n+  rtx loop_pre_header_label;\n \n   /* Scan the exit code.  We do not perform this optimization if any insn:\n \n@@ -405,6 +406,7 @@ duplicate_loop_exit_test (loop_start)\n \t    reg_map[REGNO (reg)] = gen_reg_rtx (GET_MODE (reg));\n \t  }\n       }\n+  loop_pre_header_label = gen_label_rtx ();\n \n   /* Now copy each insn.  */\n   for (insn = exitcode; insn != lastexit; insn = NEXT_INSN (insn))\n@@ -475,9 +477,14 @@ duplicate_loop_exit_test (loop_start)\n \t\t  /* The jump_insn after loop_start should be followed\n \t\t     by barrier and loopback label.  */\n \t\t  if (prev_nonnote_insn (label)\n-\t\t      && (PREV_INSN (prev_nonnote_insn (label))\n-\t\t\t  == NEXT_INSN (loop_start)))\n-\t\t    predict_insn_def (copy, PRED_LOOP_HEADER, TAKEN);\n+\t\t      && (prev_nonnote_insn (prev_nonnote_insn (label))\n+\t\t\t  == next_nonnote_insn (loop_start)))\n+\t\t    {\n+\t\t      predict_insn_def (copy, PRED_LOOP_HEADER, TAKEN);\n+\t\t      /* To keep pre-header, we need to redirect all loop\n+\t\t         entrances before the LOOP_BEG note.  */\n+\t\t      redirect_jump (copy, loop_pre_header_label, 0);\n+\t\t    }\n \t\t  else\n \t\t    predict_insn_def (copy, PRED_LOOP_HEADER, NOT_TAKEN);\n \t\t}\n@@ -512,6 +519,8 @@ duplicate_loop_exit_test (loop_start)\n       emit_barrier_before (loop_start);\n     }\n \n+  emit_label_before (loop_pre_header_label, loop_start);\n+\n   /* Now scan from the first insn we copied to the last insn we copied\n      (copy) for new pseudo registers.  Do this after the code to jump to\n      the end label since that might create a new pseudo too.  */"}]}