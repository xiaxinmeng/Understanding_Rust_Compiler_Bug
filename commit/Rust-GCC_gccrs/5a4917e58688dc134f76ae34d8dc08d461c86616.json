{"sha": "5a4917e58688dc134f76ae34d8dc08d461c86616", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE0OTE3ZTU4Njg4ZGMxMzRmNzZhZTM0ZDhkYzA4ZDQ2MWM4NjYxNg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-05-11T22:49:29Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-05-11T22:49:29Z"}, "message": "[multiple changes]\n\nThu Feb 12 16:29:01 1998  Ian Lance Taylor  <ian@cygnus.com>\n        * getopt.h: Update to latest FSF version.\nFri Nov  7 10:34:09 1997  Rob Savoye  <rob@darkstar.cygnus.com>\n        * libiberty.h: Add extern \"C\" { so it can be used with C++\n        programs.\nThu Aug 28 19:41:42 1997  Andrew Cagney  <cagney@b1.cygnus.com>\n        * libiberty.h (dupargv): Add prototype.\nBring over from devo.\n\nFrom-SVN: r19687", "tree": {"sha": "85cb20d93cf5580bd8b63fc0e5a0efbad62e64a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85cb20d93cf5580bd8b63fc0e5a0efbad62e64a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a4917e58688dc134f76ae34d8dc08d461c86616", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a4917e58688dc134f76ae34d8dc08d461c86616", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a4917e58688dc134f76ae34d8dc08d461c86616", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a4917e58688dc134f76ae34d8dc08d461c86616/comments", "author": null, "committer": null, "parents": [{"sha": "0aadd65786d24e00be1c63b742fecfed10c82591", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aadd65786d24e00be1c63b742fecfed10c82591", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aadd65786d24e00be1c63b742fecfed10c82591"}], "stats": {"total": 177, "additions": 162, "deletions": 15}, "files": [{"sha": "985d9f1d94ff5639259128605fe1a18a8b873a77", "filename": "include/ChangeLog", "status": "modified", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a4917e58688dc134f76ae34d8dc08d461c86616/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a4917e58688dc134f76ae34d8dc08d461c86616/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=5a4917e58688dc134f76ae34d8dc08d461c86616", "patch": "@@ -1,3 +1,127 @@\n+Tue Feb 24 13:05:02 1998  Doug Evans  <devans@canuck.cygnus.com>\n+\n+\t* dis-asm.h (disassemble_info): Member `symbol' renamed to `symbols'\n+\tand made an \"asymbol **\".  New member num_symbols.\n+\t(INIT_DISASSEMBLE_INFO_NO_ARCH): Update.\n+\n+Tue Feb 17 12:32:18 1998  Andrew Cagney  <cagney@b1.cygnus.com>\n+\n+\t* remote-sim.h (sim_fetch_register, sim_store_register): Add\n+ \tregister length parameter.  Functions return actual length of\n+ \tregister.\n+\n+Thu Feb 12 16:29:01 1998  Ian Lance Taylor  <ian@cygnus.com>\n+\n+\t* getopt.h: Update to latest FSF version.\n+\n+Wed Feb 11 16:56:06 1998  Doug Evans  <devans@canuck.cygnus.com>\n+\n+\t* symcat.h: New file.\n+\n+Mon Feb  2 17:13:31 1998  Steve Haworth  <steve@pm.cse.rmit.EDU.AU>\n+\n+\t* dis-asm.h (print_insn_tic30): Declare.\n+\n+Thu Jan 22 16:23:59 1998  Fred Fish <fnf@cygnus.com>\n+\n+\t* dis-asm.h: Add flag INSN_HAS_RELOC to tell disassembly \n+\tfunction there is a reloc on this line.\n+\n+Mon Dec  8 11:22:23 1997  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* dis-asm.h: Remove prototype of disasm_symaddr() as this function\n+\tno longer exists.\n+\n+Tue Dec  2 10:20:53 1997  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* dis-asm.h (disasm_symaddr): New prototype.\n+\n+Mon Dec  1 20:24:18 1997  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* coff/sh.h (R_SH_SWITCH8): New.\n+\n+Mon Dec  1 11:29:35 1997  Doug Evans  <devans@canuck.cygnus.com>\n+\n+\t* callback.h (CB_SYSCALL): Comment out arg names in prototypes.\n+\n+Wed Nov 26 16:47:58 1997  Michael Meissner  <meissner@cygnus.com>\n+\n+\t* callback.h (CB_SYSCALL): Consistantly use names for prototype\n+\targuments.\n+\n+Wed Nov 26 11:39:30 1997  Doug Evans  <devans@canuck.cygnus.com>\n+\n+\t* callback.h (CB_SYSCALL): Change byte count arguments to\n+\t{read,write}_mem to `int'.  New member `magic'.\n+\t(CB_SYSCALL_MAGIC,CB_SYSCALL_INIT): New macros.\n+\n+Tue Nov 25 01:35:52 1997  Doug Evans  <devans@seba.cygnus.com>\n+\n+\t* callback.h (struct stat): Move forward decl up.\n+\t(host_callback): Pass stat struct pointer to stat,fstat.\n+\t(CB_SYS_nnn): Reorganize.\n+\t(CB_SYSCALL): New members p1,p2.\n+\t(cb_host_to_target_stat): Delete fourth arg.\n+\n+Sat Nov 22 23:34:15 1997  Andrew Cagney  <cagney@b1.cygnus.com>\n+\n+\t* remote-sim.h (sim_stop_reason): Clarify sim_signalled SIGRC\n+ \targument.\n+\n+Mon Nov 17 14:00:51 1997  Doug Evans  <devans@seba.cygnus.com>\n+\n+\t* callback.h (CB_TARGET_DEFS_MAP): Renamed from target_defs_map.\n+\t(host_callback): Add stat, fstat, syscall_map, errno_map, open_map,\n+\tsignal_map, stat_map.\n+\t(errn_map,open_map): Renamed to cb_init_foo_map.\n+\t(cb_host_to_target_errno,cb_target_to_host_open): Renamed from\n+\thost_to_target_errno,target_to_host_open.\n+\t(cb_read_target_syscall_maps): Add prototype.\n+\t(cb_target_to_host_syscall): Likewise.\n+\t(cb_host_to_target_stat): Likewise.\n+\t(cb_syscall): Likewise.\n+\t(CB_SYS_{exit,open,close,read,write,lseek,unlink,getpid,kill,fstat,\n+\targvlen,argv,chdir,stat,chmod,utime,time}): Define.\n+\t(CB_SYSCALL): New type.\n+\t(CB_RC): New enum.\n+\n+Fri Nov  7 10:34:09 1997  Rob Savoye  <rob@darkstar.cygnus.com>\n+\n+\t* libiberty.h: Add extern \"C\" { so it can be used with C++\n+\tprograms.\n+\t* remote-sim.h:  Add extern \"C\" { so it can be used with C++\n+\tprograms.\n+\n+Tue Oct 14 16:07:51 1997  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* dis-asm.h (struct disassemble_info): New field\n+\t'symbol_at_address_func'.\n+\t(INIT_DISASSEMBLE_INFO_NO_ARCH): Initialise new field with\n+\tgeneric_symbol_at_address. \n+\n+Mon Oct 13 10:17:15 1997  Andrew Cagney  <cagney@b1.cygnus.com>\n+\n+\t* remote-sim.h: Clarify sim_read, sim_write MEM argument.\n+\n+Wed Sep 24 18:03:10 1997  Stu Grossman  <grossman@babylon-5.cygnus.com>\n+\n+\t* remote-sim.h (SIM_RC):  Add a bunch of new return codes for\n+\tbreakpoint stuff.\n+\t* Add functions to tell the simulator to set/clear/enable/disable\n+\tintrinsic breakpoints.\n+\n+Thu Aug 28 19:41:42 1997  Andrew Cagney  <cagney@b1.cygnus.com>\n+\n+\t* libiberty.h (dupargv): Add prototype.\n+\n+Tue Aug 26 12:25:49 1997  Andrew Cagney  <cagney@b1.cygnus.com>\n+\n+\t* remote-sim.h (sim_create_inferior): Add ABFD arg. Document.\n+\n+Mon Aug 25 10:50:51 1997  Andrew Cagney  <cagney@b1.cygnus.com>\n+\n+\t* remote-sim.h (sim_open): Add ABFD arg. Document.\n+\n Fri Aug  8 16:43:56 1997  Doug Evans  <dje@canuck.cygnus.com>\n \n \t* dis-asm.h (arc_get_disassembler): Declare.\n@@ -206,6 +330,10 @@ Mon Sep 30 13:56:11 1996  Fred Fish  <fnf@cygnus.com>\n \n \t* libiberty.h: Remove #ifndef PRIVATE_XMALLOC.\n \n+Sat Aug 31 13:27:06 1996  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* dis-asm.h (print_insn_v850): Declare.\n+\n Tue Aug 13 16:10:30 1996  Stu Grossman  (grossman@critters.cygnus.com)\n \n \t* obstack.h:  Change bcopy to memcpy.  Works better on Posix"}, {"sha": "c4adc30bbbac02416757dfc51f8d94b59ba9f847", "filename": "include/getopt.h", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a4917e58688dc134f76ae34d8dc08d461c86616/include%2Fgetopt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a4917e58688dc134f76ae34d8dc08d461c86616/include%2Fgetopt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fgetopt.h?ref=5a4917e58688dc134f76ae34d8dc08d461c86616", "patch": "@@ -1,19 +1,23 @@\n /* Declarations for getopt.\n-   Copyright (C) 1989, 1990, 1991, 1992, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1989,90,91,92,93,94,96,97 Free Software Foundation, Inc.\n \n-   This program is free software; you can redistribute it and/or\n-   modify it under the terms of the GNU Library General Public License\n-   as published by the Free Software Foundation; either version 2, or\n-   (at your option) any later version.\n+   NOTE: The canonical source of this file is maintained with the GNU C Library.\n+   Bugs can be reported to bug-glibc@prep.ai.mit.edu.\n+\n+   This program is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 2, or (at your option) any\n+   later version.\n \n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU Library General Public License for more details.\n+   GNU General Public License for more details.\n \n-   You should have received a copy of the GNU Library General Public License\n+   You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n-   Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n+   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+   USA.  */\n \n #ifndef _GETOPT_H\n #define _GETOPT_H 1\n@@ -36,7 +40,7 @@ extern char *optarg;\n \n    On entry to `getopt', zero means this is the first call; initialize.\n \n-   When `getopt' returns EOF, this is the index of the first of the\n+   When `getopt' returns -1, this is the index of the first of the\n    non-option elements that the caller should itself scan.\n \n    Otherwise, `optind' communicates from one call to the next\n@@ -76,7 +80,7 @@ extern int optopt;\n \n struct option\n {\n-#if\t__STDC__\n+#if defined (__STDC__) && __STDC__\n   const char *name;\n #else\n   char *name;\n@@ -94,15 +98,15 @@ struct option\n #define required_argument\t1\n #define optional_argument\t2\n \n-#if __STDC__\n-#if defined(__GNU_LIBRARY__)\n+#if defined (__STDC__) && __STDC__\n+#ifdef __GNU_LIBRARY__\n /* Many other libraries have conflicting prototypes for getopt, with\n    differences in the consts, in stdlib.h.  To avoid compilation\n    errors, only prototype getopt for the GNU C library.  */\n extern int getopt (int argc, char *const *argv, const char *shortopts);\n #else /* not __GNU_LIBRARY__ */\n extern int getopt ();\n-#endif /* not __GNU_LIBRARY__ */\n+#endif /* __GNU_LIBRARY__ */\n extern int getopt_long (int argc, char *const *argv, const char *shortopts,\n \t\t        const struct option *longopts, int *longind);\n extern int getopt_long_only (int argc, char *const *argv,\n@@ -120,10 +124,10 @@ extern int getopt_long ();\n extern int getopt_long_only ();\n \n extern int _getopt_internal ();\n-#endif /* not __STDC__ */\n+#endif /* __STDC__ */\n \n #ifdef\t__cplusplus\n }\n #endif\n \n-#endif /* _GETOPT_H */\n+#endif /* getopt.h */"}, {"sha": "951e156569a236cbb3bcfd22a602e27f3fb44f1c", "filename": "include/libiberty.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a4917e58688dc134f76ae34d8dc08d461c86616/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a4917e58688dc134f76ae34d8dc08d461c86616/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=5a4917e58688dc134f76ae34d8dc08d461c86616", "patch": "@@ -10,6 +10,10 @@\n #ifndef LIBIBERTY_H\n #define LIBIBERTY_H\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n #include \"ansidecl.h\"\n \n /* Build an argument vector from a string.  Allocates memory using\n@@ -21,6 +25,12 @@ extern char **buildargv PARAMS ((char *));\n \n extern void freeargv PARAMS ((char **));\n \n+/* Duplicate an argument vector. Allocates memory using malloc.  Use\n+   freeargv to free the vector.  */\n+\n+extern char **dupargv PARAMS ((char **));\n+\n+\n /* Return the last component of a path name.  Note that we can't use a\n    prototype here because the parameter is declared inconsistently\n    across different systems, sometimes as \"char *\" and sometimes as\n@@ -158,4 +168,9 @@ extern int pexecute PARAMS ((const char *, char * const *, const char *,\n \n extern int pwait PARAMS ((int, int *, int));\n \n+#ifdef __cplusplus\n+}\n+#endif\n+\n+\n #endif /* ! defined (LIBIBERTY_H) */"}]}