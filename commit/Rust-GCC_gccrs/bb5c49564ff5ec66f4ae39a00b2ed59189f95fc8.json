{"sha": "bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI1YzQ5NTY0ZmY1ZWM2NmY0YWUzOWEwMGIyZWQ1OTE4OWY5NWZjOA==", "commit": {"author": {"name": "Mikhail Maltsev", "email": "maltsevm@gmail.com", "date": "2015-06-06T05:39:16Z"}, "committer": {"name": "Mikhail Maltsev", "email": "miyuki@gcc.gnu.org", "date": "2015-06-06T05:39:16Z"}, "message": "Promote types of rtl expressions to rtx_insn in gen_split and gen_peephole2\n\n\t* combine.c (combine_split_insns): Remove cast.\n\t* config/bfin/bfin.c (hwloop_fail): Add cast in try_split call.\n\t* config/sh/sh.c (sh_try_split_insn_simple): Remove cast.\n\t* config/sh/sh_treg_combine.cc (sh_treg_combine::execute): Add cast.\n\t* emit-rtl.c (try_split): Promote type of trial argument to rtx_insn.\n\t* genemit.c (gen_split): Change return type of generated functions to\n\trtx_insn.\n\t* genrecog.c (get_failure_return): Use NULL instead of NULL_RTX.\n\t(print_subroutine_start): Promote rtx to rtx_insn in gen_split_* and\n\tgen_peephole2_* functions.\n\t(print_subroutine, main): Likewise.\n\t* recog.c (peephole2_optimize): Remove cast.\n\t(peep2_next_insn): Promote return type to rtx_insn.\n\t* recog.h (peep2_next_insn): Fix prototype.\n\t* rtl.h (try_split, split_insns): Likewise.\n\nFrom-SVN: r224183", "tree": {"sha": "59990e06cf8ced52d365080821323351c4790c1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59990e06cf8ced52d365080821323351c4790c1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8/comments", "author": {"login": "miyuki", "id": 4668268, "node_id": "MDQ6VXNlcjQ2NjgyNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/4668268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miyuki", "html_url": "https://github.com/miyuki", "followers_url": "https://api.github.com/users/miyuki/followers", "following_url": "https://api.github.com/users/miyuki/following{/other_user}", "gists_url": "https://api.github.com/users/miyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/miyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miyuki/subscriptions", "organizations_url": "https://api.github.com/users/miyuki/orgs", "repos_url": "https://api.github.com/users/miyuki/repos", "events_url": "https://api.github.com/users/miyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/miyuki/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2bc43588affbcf4370c8f82e8797618e37dbe90d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bc43588affbcf4370c8f82e8797618e37dbe90d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bc43588affbcf4370c8f82e8797618e37dbe90d"}], "stats": {"total": 90, "additions": 55, "deletions": 35}, "files": [{"sha": "b7676aad413de84509bddf9503b005c6f91e5c26", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8", "patch": "@@ -1,3 +1,21 @@\n+2015-06-06  Mikhail Maltsev  <maltsevm@gmail.com>\n+\n+\t* combine.c (combine_split_insns): Remove cast.\n+\t* config/bfin/bfin.c (hwloop_fail): Add cast in try_split call.\n+\t* config/sh/sh.c (sh_try_split_insn_simple): Remove cast.\n+\t* config/sh/sh_treg_combine.cc (sh_treg_combine::execute): Add cast.\n+\t* emit-rtl.c (try_split): Promote type of trial argument to rtx_insn.\n+\t* genemit.c (gen_split): Change return type of generated functions to\n+\trtx_insn.\n+\t* genrecog.c (get_failure_return): Use NULL instead of NULL_RTX.\n+\t(print_subroutine_start): Promote rtx to rtx_insn in gen_split_* and\n+\tgen_peephole2_* functions.\n+\t(print_subroutine, main): Likewise.\n+\t* recog.c (peephole2_optimize): Remove cast.\n+\t(peep2_next_insn): Promote return type to rtx_insn.\n+\t* recog.h (peep2_next_insn): Fix prototype.\n+\t* rtl.h (try_split, split_insns): Likewise.\n+\n 2015-06-06  DJ Delorie  <dj@redhat.com>\n \n \t* config/msp430/msp430.c (msp430_asm_integer): Support addition"}, {"sha": "8a9ab7aadb4cbabd9b192c6fb847350dc2f58b1f", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8", "patch": "@@ -554,7 +554,7 @@ combine_split_insns (rtx pattern, rtx_insn *insn)\n   rtx_insn *ret;\n   unsigned int nregs;\n \n-  ret = safe_as_a <rtx_insn *> (split_insns (pattern, insn));\n+  ret = split_insns (pattern, insn);\n   nregs = max_reg_num ();\n   if (nregs > reg_stat.length ())\n     reg_stat.safe_grow_cleared (nregs);"}, {"sha": "7b570cd1342cb6e5edf53ef8c84eba78453548a4", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8", "patch": "@@ -3877,7 +3877,7 @@ hwloop_fail (hwloop_info loop)\n   else\n     {\n       splitting_loops = 1;  \n-      try_split (PATTERN (insn), insn, 1);\n+      try_split (PATTERN (insn), safe_as_a <rtx_insn *> (insn), 1);\n       splitting_loops = 0;\n     }\n }"}, {"sha": "3b63014cb136917c2468611f313c2ab3e7bf4ead", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8", "patch": "@@ -14236,7 +14236,7 @@ sh_try_split_insn_simple (rtx_insn* i, rtx_insn* curr_insn, int n = 0)\n       fprintf (dump_file, \"\\n\");\n     }\n \n-  rtx_insn* seq = safe_as_a<rtx_insn*> (split_insns (PATTERN (i), curr_insn));\n+  rtx_insn* seq = split_insns (PATTERN (i), curr_insn);\n \n   if (seq == NULL)\n     return std::make_pair (i, i);"}, {"sha": "c09a4c330ee028903180ffca93bcbd1746c94ac8", "filename": "gcc/config/sh/sh_treg_combine.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8/gcc%2Fconfig%2Fsh%2Fsh_treg_combine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8/gcc%2Fconfig%2Fsh%2Fsh_treg_combine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh_treg_combine.cc?ref=bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8", "patch": "@@ -1612,7 +1612,7 @@ sh_treg_combine::execute (function *fun)\n \tlog_msg (\"trying to split insn:\\n\");\n \tlog_insn (*i);\n \tlog_msg (\"\\n\");\n-\ttry_split (PATTERN (*i), *i, 0);\n+\ttry_split (PATTERN (*i), safe_as_a <rtx_insn *> (*i), 0);\n       }\n \n   m_touched_insns.clear ();"}, {"sha": "7bb2c771f9097a575bf8297accddb0013931eb61", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8", "patch": "@@ -3653,9 +3653,8 @@ mark_label_nuses (rtx x)\n    returns TRIAL.  If the insn to be returned can be split, it will be.  */\n \n rtx_insn *\n-try_split (rtx pat, rtx uncast_trial, int last)\n+try_split (rtx pat, rtx_insn *trial, int last)\n {\n-  rtx_insn *trial = as_a <rtx_insn *> (uncast_trial);\n   rtx_insn *before = PREV_INSN (trial);\n   rtx_insn *after = NEXT_INSN (trial);\n   rtx note;\n@@ -3674,7 +3673,7 @@ try_split (rtx pat, rtx uncast_trial, int last)\n     split_branch_probability = XINT (note, 0);\n   probability = split_branch_probability;\n \n-  seq = safe_as_a <rtx_insn *> (split_insns (pat, trial));\n+  seq = split_insns (pat, trial);\n \n   split_branch_probability = -1;\n "}, {"sha": "e5b39fdd47ee2b8c9785d86d243e5c82c825117e", "filename": "gcc/genemit.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8", "patch": "@@ -568,23 +568,25 @@ gen_split (rtx split)\n   /* Output the prototype, function name and argument declarations.  */\n   if (GET_CODE (split) == DEFINE_PEEPHOLE2)\n     {\n-      printf (\"extern rtx gen_%s_%d (rtx_insn *, rtx *);\\n\",\n+      printf (\"extern rtx_insn *gen_%s_%d (rtx_insn *, rtx *);\\n\",\n \t      name, insn_code_number);\n-      printf (\"rtx\\ngen_%s_%d (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands%s)\\n\",\n+      printf (\"rtx_insn *\\ngen_%s_%d (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands%s)\\n\",\n \t      name, insn_code_number, unused);\n     }\n   else\n     {\n-      printf (\"extern rtx gen_split_%d (rtx_insn *, rtx *);\\n\", insn_code_number);\n-      printf (\"rtx\\ngen_split_%d (rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands%s)\\n\",\n+      printf (\"extern rtx_insn *gen_split_%d (rtx_insn *, rtx *);\\n\",\n+\t      insn_code_number);\n+      printf (\"rtx_insn *\\ngen_split_%d \"\n+\t      \"(rtx_insn *curr_insn ATTRIBUTE_UNUSED, rtx *operands%s)\\n\",\n \t      insn_code_number, unused);\n     }\n   printf (\"{\\n\");\n \n   /* Declare all local variables.  */\n   for (i = 0; i < stats.num_operand_vars; i++)\n     printf (\"  rtx operand%d;\\n\", i);\n-  printf (\"  rtx _val = 0;\\n\");\n+  printf (\"  rtx_insn *_val = NULL;\\n\");\n \n   if (GET_CODE (split) == DEFINE_PEEPHOLE2)\n     output_peephole2_scratches (split);"}, {"sha": "217eb500751d02bed84b7395d78b2622bb365422", "filename": "gcc/genrecog.c", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8", "patch": "@@ -4307,7 +4307,7 @@ get_failure_return (routine_type type)\n \n     case SPLIT:\n     case PEEPHOLE2:\n-      return \"NULL_RTX\";\n+      return \"NULL\";\n     }\n   gcc_unreachable ();\n }\n@@ -5061,7 +5061,7 @@ print_subroutine_start (output_state *os, state *s, position *root)\n   if (os->type == SUBPATTERN || os->type == RECOG)\n     printf (\"  int res ATTRIBUTE_UNUSED;\\n\");\n   else\n-    printf (\"  rtx res ATTRIBUTE_UNUSED;\\n\");\n+    printf (\"  rtx_insn *res ATTRIBUTE_UNUSED;\\n\");\n }\n \n /* Output the definition of pattern routine ROUTINE.  */\n@@ -5111,7 +5111,7 @@ print_pattern (output_state *os, pattern_routine *routine)\n static void\n print_subroutine (output_state *os, state *s, int proc_id)\n {\n-  /* For now, the top-level functions take a plain \"rtx\", and perform a\n+  /* For now, the top-level \"recog\" takes a plain \"rtx\", and performs a\n      checked cast to \"rtx_insn *\" for use throughout the rest of the\n      function and the code it calls.  */\n   const char *insn_param\n@@ -5134,29 +5134,31 @@ print_subroutine (output_state *os, state *s, int proc_id)\n \n     case SPLIT:\n       if (proc_id)\n-\tprintf (\"static rtx\\nsplit_%d\", proc_id);\n+\tprintf (\"static rtx_insn *\\nsplit_%d\", proc_id);\n       else\n-\tprintf (\"rtx\\nsplit_insns\");\n-      printf (\" (rtx x1 ATTRIBUTE_UNUSED, %s ATTRIBUTE_UNUSED)\\n\",\n-\t      insn_param);\n+\tprintf (\"rtx_insn *\\nsplit_insns\");\n+      printf (\" (rtx x1 ATTRIBUTE_UNUSED, rtx_insn *insn ATTRIBUTE_UNUSED)\\n\");\n       break;\n \n     case PEEPHOLE2:\n       if (proc_id)\n-\tprintf (\"static rtx\\npeephole2_%d\", proc_id);\n+\tprintf (\"static rtx_insn *\\npeephole2_%d\", proc_id);\n       else\n-\tprintf (\"rtx\\npeephole2_insns\");\n+\tprintf (\"rtx_insn *\\npeephole2_insns\");\n       printf (\" (rtx x1 ATTRIBUTE_UNUSED,\\n\"\n-\t      \"\\t%s ATTRIBUTE_UNUSED,\\n\"\n-\t      \"\\tint *pmatch_len_ ATTRIBUTE_UNUSED)\\n\", insn_param);\n+\t      \"\\trtx_insn *insn ATTRIBUTE_UNUSED,\\n\"\n+\t      \"\\tint *pmatch_len_ ATTRIBUTE_UNUSED)\\n\");\n       break;\n     }\n   print_subroutine_start (os, s, &root_pos);\n   if (proc_id == 0)\n     {\n       printf (\"  recog_data.insn = NULL;\\n\");\n-      printf (\"  rtx_insn *insn ATTRIBUTE_UNUSED;\\n\");\n-      printf (\"  insn = safe_as_a <rtx_insn *> (uncast_insn);\\n\");\n+      if (os->type == RECOG)\n+\t{\n+\t  printf (\"  rtx_insn *insn ATTRIBUTE_UNUSED;\\n\");\n+\t  printf (\"  insn = safe_as_a <rtx_insn *> (uncast_insn);\\n\");\n+\t}\n     }\n   print_state (os, s, 2, true);\n   printf (\"}\\n\");\n@@ -5323,7 +5325,7 @@ main (int argc, char **argv)\n \n \t  /* Declare the gen_split routine that we'll call if the\n \t     pattern matches.  The definition comes from insn-emit.c.  */\n-\t  printf (\"extern rtx gen_split_%d (rtx_insn *, rtx *);\\n\",\n+\t  printf (\"extern rtx_insn *gen_split_%d (rtx_insn *, rtx *);\\n\",\n \t\t  next_insn_code);\n \t  break;\n \n@@ -5335,7 +5337,7 @@ main (int argc, char **argv)\n \n \t  /* Declare the gen_peephole2 routine that we'll call if the\n \t     pattern matches.  The definition comes from insn-emit.c.  */\n-\t  printf (\"extern rtx gen_peephole2_%d (rtx_insn *, rtx *);\\n\",\n+\t  printf (\"extern rtx_insn *gen_peephole2_%d (rtx_insn *, rtx *);\\n\",\n \t\t  next_insn_code);\n \t  break;\n "}, {"sha": "b1b9c22775319c70dcd34a986ff01b74826dd2ae", "filename": "gcc/recog.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8", "patch": "@@ -3080,7 +3080,7 @@ peep2_buf_position (int n)\n    does not exist.  Used by the recognizer to find the next insn to match\n    in a multi-insn pattern.  */\n \n-rtx\n+rtx_insn *\n peep2_next_insn (int n)\n {\n   gcc_assert (n <= peep2_current_count);\n@@ -3653,8 +3653,7 @@ peephole2_optimize (void)\n \n \t  /* Match the peephole.  */\n \t  head = peep2_insn_data[peep2_current].insn;\n-\t  attempt = safe_as_a <rtx_insn *> (\n-\t\t      peephole2_insns (PATTERN (head), head, &match_len));\n+\t  attempt = peephole2_insns (PATTERN (head), head, &match_len);\n \t  if (attempt != NULL)\n \t    {\n \t      rtx_insn *last = peep2_attempt (bb, head, match_len, attempt);"}, {"sha": "ce931ebdf5a8a0bfdd1cfa2b69f532ad0ac9c438", "filename": "gcc/recog.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8", "patch": "@@ -139,14 +139,14 @@ extern void preprocess_constraints (int, int, const char **,\n \t\t\t\t    operand_alternative *);\n extern const operand_alternative *preprocess_insn_constraints (int);\n extern void preprocess_constraints (rtx_insn *);\n-extern rtx peep2_next_insn (int);\n+extern rtx_insn *peep2_next_insn (int);\n extern int peep2_regno_dead_p (int, int);\n extern int peep2_reg_dead_p (int, rtx);\n #ifdef CLEAR_HARD_REG_SET\n extern rtx peep2_find_free_register (int, int, const char *,\n \t\t\t\t     machine_mode, HARD_REG_SET *);\n #endif\n-extern rtx peephole2_insns (rtx, rtx, int *);\n+extern rtx_insn *peephole2_insns (rtx, rtx_insn *, int *);\n \n extern int store_data_bypass_p (rtx_insn *, rtx_insn *);\n extern int if_test_bypass_p (rtx_insn *, rtx_insn *);"}, {"sha": "2c190ec5d1651ad8d068c36b410cc105b9fe11cf", "filename": "gcc/rtl.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8", "patch": "@@ -2831,11 +2831,11 @@ extern rtx_insn *delete_related_insns (rtx);\n extern rtx *find_constant_term_loc (rtx *);\n \n /* In emit-rtl.c  */\n-extern rtx_insn *try_split (rtx, rtx, int);\n+extern rtx_insn *try_split (rtx, rtx_insn *, int);\n extern int split_branch_probability;\n \n-/* In unknown file  */\n-extern rtx split_insns (rtx, rtx);\n+/* In insn-recog.c (generated by genrecog).  */\n+extern rtx_insn *split_insns (rtx, rtx_insn *);\n \n /* In simplify-rtx.c  */\n extern rtx simplify_const_unary_operation (enum rtx_code, machine_mode,"}]}