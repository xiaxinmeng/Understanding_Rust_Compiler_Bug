{"sha": "733f53f5f8ac2517dfff82c483cf0a49bc05d3a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMzZjUzZjVmOGFjMjUxN2RmZmY4MmM0ODNjZjBhNDliYzA1ZDNhNg==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-02-20T00:14:03Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-02-20T00:14:03Z"}, "message": "sparc.c (sparc_cpu_string,sparc_cpu): New globals.\n\n\t* sparc/sparc.c (sparc_cpu_string,sparc_cpu): New globals.\n\t(sparc_override_options): Set ISA and CPU from sparc_cpu_string.\n\tDelete tests for v9 switches if not v9.\n\nFrom-SVN: r11318", "tree": {"sha": "986d98ee29e42b9bb4641266fb14feed98d68116", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/986d98ee29e42b9bb4641266fb14feed98d68116"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/733f53f5f8ac2517dfff82c483cf0a49bc05d3a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/733f53f5f8ac2517dfff82c483cf0a49bc05d3a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/733f53f5f8ac2517dfff82c483cf0a49bc05d3a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/733f53f5f8ac2517dfff82c483cf0a49bc05d3a6/comments", "author": null, "committer": null, "parents": [{"sha": "1b11c012788b93e3034c678d8a753297050957c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b11c012788b93e3034c678d8a753297050957c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b11c012788b93e3034c678d8a753297050957c5"}], "stats": {"total": 91, "additions": 69, "deletions": 22}, "files": [{"sha": "1c5b54ebf59072c4133c1580275a15320ecedcf8", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 69, "deletions": 22, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/733f53f5f8ac2517dfff82c483cf0a49bc05d3a6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/733f53f5f8ac2517dfff82c483cf0a49bc05d3a6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=733f53f5f8ac2517dfff82c483cf0a49bc05d3a6", "patch": "@@ -111,39 +111,86 @@ static void sparc_init_modes ();\n \f\n /* Option handling.  */\n \n+/* This is assigned the value of -mcpu=.  */\n+char *sparc_cpu_string;\n+\n+/* CPU type.  This is set from TARGET_CPU_DEFAULT and -mcpu=.  */\n+enum attr_cpu sparc_cpu;\n+\n /* Validate and override various options, and do some machine dependent\n    initialization.  */\n \n void\n sparc_override_options ()\n {\n-  /* Check for any conflicts in the choice of options.  */\n-  /* ??? This stuff isn't really usable yet.  */\n-\n-  if (! TARGET_ARCH64)\n+  /* Map TARGET_CPU_DEFAULT to value for -mcpu=.  */\n+  static struct cpu_default {\n+    int cpu;\n+    char *name;\n+  } cpu_default[] = {\n+    { TARGET_CPU_sparc, \"common\" },\n+    { TARGET_CPU_sparclet, \"sparclet\" },\n+    { TARGET_CPU_sparclite, \"sparclite\" },\n+    { TARGET_CPU_sparc64, \"v9\" },\n+    { 0, 0 }\n+  };\n+  struct cpu_default *m;\n+  /* Map -mcpu= names to internally usable values.  */\n+  static struct cpu_table {\n+    char *name;\n+    enum attr_cpu cpu;\n+    int disable;\n+    int enable;\n+  } cpu_table[] = {\n+    { \"common\",     CPU_COMMON, MASK_ISA, 0 },\n+    { \"cypress\",    CPU_CYPRESS, MASK_ISA, 0 },\n+    /* generic v8 */\n+    { \"v8\",         CPU_V8, MASK_ISA, MASK_V8 },\n+    /* TI TMS390Z55 supersparc */\n+    { \"supersparc\", CPU_SUPERSPARC, MASK_ISA, MASK_V8 },\n+    { \"sparclite\",  CPU_SPARCLITE, MASK_ISA, MASK_SPARCLITE },\n+    /* The Fujitsu MB86930 is the original sparclite chip, with no fpu.\n+       The Fujitsu MB86934 is the recent sparclite chip, with an fpu.  */\n+    { \"f930\",       CPU_SPARCLITE, MASK_ISA+MASK_FPU, MASK_SPARCLITE },\n+    { \"f934\",       CPU_SPARCLITE, MASK_ISA,          MASK_SPARCLITE+MASK_FPU },\n+    /* TEMIC sparclet */\n+    { \"sparclet\",   CPU_SPARCLET, MASK_ISA, MASK_SPARCLET },\n+    /* generic v9 */\n+    { \"v9\",         CPU_V9, MASK_ISA, MASK_V9 },\n+    /* TI ultrasparc */\n+    { \"ultrasparc\", CPU_ULTRASPARC, MASK_ISA, MASK_V9 },\n+    { 0 }\n+  };\n+  struct cpu_table *p;\n+\n+  /* If -mcpu=foo wasn't specified, set the default.  */\n+  if (! sparc_cpu_string)\n     {\n-      if (target_flags & MASK_CODE_MODEL)\n-\terror (\"code model support is only available with -mv9\");\n-      if (TARGET_INT64)\n-\terror (\"-mint64 is only available with -mv9\");\n-      if (TARGET_LONG64)\n-\terror (\"-mlong64 is only available with -mv9\");\n-      if (TARGET_PTR64)\n-\terror (\"-mptr64 is only available with -mv9\");\n-      if (TARGET_STACK_BIAS)\n-\terror (\"-mstack-bias is only available with -mv9\");\n+      for (m = &cpu_default[0]; m->name; ++m)\n+\tif (m->cpu == TARGET_CPU_DEFAULT)\n+\t  break;\n+      if (! m->name)\n+\tabort ();\n+      sparc_cpu_string = m->name;\n     }\n-  else\n+\n+  /* Set cpu type and isa flags.  */\n+  for (p = &cpu_table[0]; p->name; ++p)\n     {\n-      /* ??? Are there any options that aren't usable with v9.\n-\t -munaligned-doubles?  */\n+      if (strcmp (p->name, sparc_cpu_string) == 0)\n+\t{\n+\t  sparc_cpu = p->cpu;\n+\t  target_flags &= ~p->disable;\n+\t  target_flags |= p->enable;\n+\t  break;\n+\t}\n     }\n+  if (! p->name)\n+    error (\"bad value (%s) for -mcpu= switch\", sparc_cpu_string);\n \n-  /* Check for conflicts in cpu specification.\n-     If we use -mcpu=xxx, this can be removed.  */\n-\n-  if ((TARGET_V8 != 0) + (TARGET_SPARCLITE != 0) + (TARGET_V9 != 0) > 1)\n-    error (\"conflicting architectures defined\");\n+  if ((sparc_cpu == CPU_V9 || sparc_cpu == CPU_ULTRASPARC)\n+      && TARGET_ARCH32)\n+    target_flags |= MASK_DEPRECATED_V8_INSNS;\n \n   /* Do various machine dependent initializations.  */\n   sparc_init_modes ();"}]}