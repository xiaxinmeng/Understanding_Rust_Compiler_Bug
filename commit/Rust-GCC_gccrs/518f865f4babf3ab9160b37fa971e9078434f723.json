{"sha": "518f865f4babf3ab9160b37fa971e9078434f723", "node_id": "C_kwDOANBUbNoAKDUxOGY4NjVmNGJhYmYzYWI5MTYwYjM3ZmE5NzFlOTA3ODQzNGY3MjM", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-04T08:28:44Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-04T08:28:44Z"}, "message": "simplify-rtx: Fix vec_select index check\n\nVector lane indices follow memory (array) order, so lane 0 corresponds\nto the high element rather than the low element on big-endian targets.\n\nThis was causing quite a few execution failures on aarch64_be,\nsuch as gcc.c-torture/execute/pr47538.c.\n\ngcc/\n\t* simplify-rtx.c (simplify_context::simplify_gen_vec_select): Assert\n\tthat the operand has a vector mode.  Use subreg_lowpart_offset\n\tto test whether an index corresponds to the low part.\n\ngcc/testsuite/\n\t* gcc.dg/rtl/aarch64/big-endian-cse-1.c: New test.", "tree": {"sha": "7b6dd77e9b45f71b5b73ae220577613ec7124b93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b6dd77e9b45f71b5b73ae220577613ec7124b93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/518f865f4babf3ab9160b37fa971e9078434f723", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/518f865f4babf3ab9160b37fa971e9078434f723", "html_url": "https://github.com/Rust-GCC/gccrs/commit/518f865f4babf3ab9160b37fa971e9078434f723", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/518f865f4babf3ab9160b37fa971e9078434f723/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95318d469f4d293446b4fd38d527fd5d64ce0b70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95318d469f4d293446b4fd38d527fd5d64ce0b70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95318d469f4d293446b4fd38d527fd5d64ce0b70"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "9038affa0367164c94602acb2be76639f13c2cb4", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/518f865f4babf3ab9160b37fa971e9078434f723/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/518f865f4babf3ab9160b37fa971e9078434f723/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=518f865f4babf3ab9160b37fa971e9078434f723", "patch": "@@ -7622,15 +7622,15 @@ simplify_context::lowpart_subreg (machine_mode outer_mode, rtx expr,\n \n /* Generate RTX to select element at INDEX out of vector OP.  */\n \n-rtx simplify_context::simplify_gen_vec_select (rtx op, unsigned int index)\n+rtx\n+simplify_context::simplify_gen_vec_select (rtx op, unsigned int index)\n {\n+  gcc_assert (VECTOR_MODE_P (GET_MODE (op)));\n \n-  if (!VECTOR_MODE_P (GET_MODE (op)))\n-    return NULL_RTX;\n-\n-  machine_mode imode = GET_MODE_INNER (GET_MODE (op));\n+  scalar_mode imode = GET_MODE_INNER (GET_MODE (op));\n \n-  if (index == 0)\n+  if (known_eq (index * GET_MODE_SIZE (imode),\n+\t\tsubreg_lowpart_offset (imode, GET_MODE (op))))\n     {\n       rtx res = lowpart_subreg (imode, op, GET_MODE (op));\n       if (res)"}, {"sha": "1559a489f253b5f7d5f41589913e950da4499380", "filename": "gcc/testsuite/gcc.dg/rtl/aarch64/big-endian-cse-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/518f865f4babf3ab9160b37fa971e9078434f723/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Faarch64%2Fbig-endian-cse-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/518f865f4babf3ab9160b37fa971e9078434f723/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Faarch64%2Fbig-endian-cse-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Faarch64%2Fbig-endian-cse-1.c?ref=518f865f4babf3ab9160b37fa971e9078434f723", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile { target aarch64*-*-* } } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O3 -mbig-endian\" } */\n+\n+void __RTL (startwith (\"vregs\")) foo (void *ptr1, void *ptr2)\n+{\n+  (function \"foo\"\n+    (param \"ptr1\"\n+      (DECL_RTL (reg/v:DI <0> [ ptr1 ]))\n+      (DECL_RTL_INCOMING (reg:DI x0 [ ptr1 ]))\n+    ) ;; param \"ptr1\"\n+    (param \"ptr2\"\n+      (DECL_RTL (reg/v:DI <1> [ ptr2 ]))\n+      (DECL_RTL_INCOMING (reg:DI x1 [ ptr2 ]))\n+    ) ;; param \"ptr2\"\n+    (insn-chain\n+      (block 2\n+\t(edge-from entry (flags \"FALLTHRU\"))\n+\t(cnote 3 [bb 2] NOTE_INSN_BASIC_BLOCK)\n+\t(insn 4 (set (reg:DI <0>) (reg:DI x0)))\n+\t(insn 5 (set (reg:DI <1>) (reg:DI x1)))\n+\t(insn 6 (set (reg:V2SI <2>)\n+\t\t     (const_vector:V2SI [(const_int 1)\n+\t\t\t\t\t (const_int 0)])) (nil))\n+\t(insn 7 (set (mem:V2SI (reg:DI <0>) [1 ptr1+0 S8 A8])\n+\t\t     (reg:V2SI <2>)))\n+\t(insn 8 (set (reg:V4SI <3>)\n+\t\t     (const_vector:V4SI [(const_int 1)\n+\t\t\t\t\t (const_int 1)\n+\t\t\t\t\t (const_int 1)\n+\t\t\t\t\t (const_int 1)])) (nil))\n+\t(insn 9 (set (reg:SI <4>) (subreg:SI (reg:V4SI <3>) 12))\n+\t\t(expr_list:REG_EQUAL (const_int 1) (nil)))\n+\t(insn 10 (set (mem:SI (reg:DI <1>) [1 ptr2+0 S4 A4])\n+\t\t      (reg:SI <4>)))\n+\t(edge-to exit (flags \"FALLTHRU\"))\n+      ) ;; block 2\n+    ) ;; insn-chain\n+  ) ;; function\n+}\n+\n+/* { dg-final { scan-assembler-not {\\tstr\\twzr,} } } */"}]}