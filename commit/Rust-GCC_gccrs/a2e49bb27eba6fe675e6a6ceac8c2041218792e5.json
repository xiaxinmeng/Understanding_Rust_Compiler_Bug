{"sha": "a2e49bb27eba6fe675e6a6ceac8c2041218792e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJlNDliYjI3ZWJhNmZlNjc1ZTZhNmNlYWM4YzIwNDEyMTg3OTJlNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-07-28T16:40:21Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-07-28T16:40:21Z"}, "message": "predicates.md (pic_32bit_opreand): Do not define as special predicate.\n\n\t* config/i386/predicates.md (pic_32bit_opreand): Do not define as\n\tspecial predicate.  Remove explicit mode checks.\n\nFrom-SVN: r176879", "tree": {"sha": "764b3278ef865d4ffba0b139235985353870b748", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/764b3278ef865d4ffba0b139235985353870b748"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2e49bb27eba6fe675e6a6ceac8c2041218792e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2e49bb27eba6fe675e6a6ceac8c2041218792e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2e49bb27eba6fe675e6a6ceac8c2041218792e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2e49bb27eba6fe675e6a6ceac8c2041218792e5/comments", "author": null, "committer": null, "parents": [{"sha": "b388214880aab8692ddb35a63b067a01f552080c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b388214880aab8692ddb35a63b067a01f552080c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b388214880aab8692ddb35a63b067a01f552080c"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "7fdc1e5be8beb73a64adc5e42fac1d87c83e3827", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2e49bb27eba6fe675e6a6ceac8c2041218792e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2e49bb27eba6fe675e6a6ceac8c2041218792e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2e49bb27eba6fe675e6a6ceac8c2041218792e5", "patch": "@@ -1,8 +1,12 @@\n+2011-07-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/predicates.md (pic_32bit_opreand): Do not define as\n+\tspecial predicate.  Remove explicit mode checks.\n+\n 2011-07-28  Jakub Jelinek  <jakub@redhat.com>\n \n-\t* dwarf2out.c (resolve_addr): For -gdwarf-2 don't\n-\toptimize DW_AT_data_member_location containing just\n-\tDW_OP_plus_uconst.\n+\t* dwarf2out.c (resolve_addr): For -gdwarf-2 don't optimize\n+\tDW_AT_data_member_location containing just DW_OP_plus_uconst.\n \n \tPR debug/49871\n \t* dwarf2out.c (size_of_die, value_format, output_die): Use\n@@ -38,7 +42,7 @@\n \n \t* config/arm/vfp.md (\"*movdf_vfp\"): Handle the VFP constraints\n \tbefore the core constraints. Adjust attributes.\n-\t(*thumb2_movdf_vfp\"): Likewise.\n+\t(\"*thumb2_movdf_vfp\"): Likewise.\n \n 2011-07-28  Kai Tietz  <ktietz@redhat.com>\n \n@@ -178,8 +182,8 @@\n \n 2011-07-27  Uros Bizjak  <ubizjak@gmail.com>\n \n-\t* config/i386/predicates.md (x86_64_movabs_operand): Reject\n-\tpic32_bit_operand RTXes.\n+\t* config/i386/predicates.md (x86_64_movabs_operand): Return false\n+\tfor pic_32bit_operand RTXes.\n \t* config/i386/i386.c (ix86_expand_move): Check x86_64_movabs_operand\n \tin DImode.\n "}, {"sha": "f7a08ffa20597d38709ed24c03ac4788f121e72d", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2e49bb27eba6fe675e6a6ceac8c2041218792e5/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2e49bb27eba6fe675e6a6ceac8c2041218792e5/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=a2e49bb27eba6fe675e6a6ceac8c2041218792e5", "patch": "@@ -366,15 +366,12 @@\n \n ;; Return true when operand is PIC expression that can be computed by lea\n ;; operation.\n-(define_special_predicate \"pic_32bit_operand\"\n+(define_predicate \"pic_32bit_operand\"\n   (match_code \"const,symbol_ref,label_ref\")\n {\n-  if (GET_MODE (op) != SImode\n-      && GET_MODE (op) != DImode)\n-    return false;\n-\n   if (!flag_pic)\n     return false;\n+\n   /* Rule out relocations that translate into 64bit constants.  */\n   if (TARGET_64BIT && GET_CODE (op) == CONST)\n     {\n@@ -386,6 +383,7 @@\n \t      || XINT (op, 1) == UNSPEC_GOT))\n \treturn false;\n     }\n+\n   return symbolic_operand (op, mode);\n })\n "}]}