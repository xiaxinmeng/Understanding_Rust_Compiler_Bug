{"sha": "a6bda7d08bba0105f6e490bcbb8287684643990f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZiZGE3ZDA4YmJhMDEwNWY2ZTQ5MGJjYmI4Mjg3Njg0NjQzOTkwZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-10-11T10:04:55Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-10-11T10:04:55Z"}, "message": "moveable.cc: Fix and extend.\n\n2007-10-11  Paolo Carlini  <pcarlini@suse.de>\n\n\t* testsuite/25_algorithms/heap/moveable.cc: Fix and extend.\n\nFrom-SVN: r129231", "tree": {"sha": "298bdd21ad6cee52e60d1d5496b0308ea69e3037", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/298bdd21ad6cee52e60d1d5496b0308ea69e3037"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6bda7d08bba0105f6e490bcbb8287684643990f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6bda7d08bba0105f6e490bcbb8287684643990f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6bda7d08bba0105f6e490bcbb8287684643990f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6bda7d08bba0105f6e490bcbb8287684643990f/comments", "author": null, "committer": null, "parents": [{"sha": "1ef40d6b95a5180ab9e812a1df23e792db0d67b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef40d6b95a5180ab9e812a1df23e792db0d67b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ef40d6b95a5180ab9e812a1df23e792db0d67b1"}], "stats": {"total": 92, "additions": 59, "deletions": 33}, "files": [{"sha": "32449299b3e72ae2ccddfff97c57aaca6a8177f0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bda7d08bba0105f6e490bcbb8287684643990f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bda7d08bba0105f6e490bcbb8287684643990f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a6bda7d08bba0105f6e490bcbb8287684643990f", "patch": "@@ -1,3 +1,7 @@\n+2007-10-11  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* testsuite/25_algorithms/heap/moveable.cc: Fix and extend.\n+\n 2007-10-11  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \tPR libstdc++/33578"}, {"sha": "fe18dbf1e4d5ee37851d0f8ff7dd415bccedbdb7", "filename": "libstdc++-v3/testsuite/25_algorithms/heap/moveable.cc", "status": "modified", "additions": 55, "deletions": 33, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bda7d08bba0105f6e490bcbb8287684643990f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bda7d08bba0105f6e490bcbb8287684643990f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fmoveable.cc?ref=a6bda7d08bba0105f6e490bcbb8287684643990f", "patch": "@@ -34,82 +34,104 @@ using __gnu_test::random_access_iterator_wrapper;\n using __gnu_test::rvalstruct;\n \n typedef test_container<rvalstruct, random_access_iterator_wrapper> container;\n+typedef test_container<int, random_access_iterator_wrapper> container_ref;\n \n bool test __attribute__((unused)) = true;\n \n-\n void \n check_make(int* array, int length)\n {\n   rvalstruct makeheap[9];\n+  int        makeheap_ref[9];\n   std::copy(array, array + length, makeheap);\n+  std::copy(array, array + length, makeheap_ref);  \n   container makecon(makeheap, makeheap + length);\n+  container_ref makecon_ref(makeheap_ref, makeheap_ref + length);\n   std::make_heap(makecon.begin(), makecon.end());\n-  VERIFY(std::__is_heap(makecon.begin(), makecon.end()));\n-  for(int z = 0; z < length; ++z)\n-    VERIFY(makeheap[z].valid);\n+  std::make_heap(makecon_ref.begin(), makecon_ref.end());\n+  for (int z = 0; z < length; ++z)\n+    VERIFY( makeheap[z] == makeheap_ref[z] );\n+  VERIFY( std::__is_heap(makecon.begin(), makecon.end()) );\n+  for (int z = 0; z < length; ++z)\n+    VERIFY( makeheap[z].valid );\n }\n \n void\n check_pop(int* array, int length)\n {\n   rvalstruct popheap[9];\n-  std::copy(array, array + length, popheap);   \n+  int        popheap_ref[9];\n+  std::copy(array, array + length, popheap);\n+  std::copy(array, array + length, popheap_ref);\n   container popcon(popheap, popheap + length);\n+  container_ref popcon_ref(popheap_ref, popheap_ref + length);\n   std::pop_heap(popcon.begin(), popcon.end());\n-  VERIFY(std::__is_heap(popheap, popheap + length - 1));\n-  for(int z = 0; z < length; ++z)\n-    VERIFY(popheap[z].val <= popheap[length-1].val && popheap[z].valid);\n+  std::pop_heap(popcon_ref.begin(), popcon_ref.end());\n+  for (int z = 0; z < length; ++z)\n+    VERIFY( popheap[z] == popheap_ref[z] );\n+  VERIFY( (std::__is_heap(popheap, popheap + length - 1)) );\n+  for (int z = 0; z < length; ++z)\n+    VERIFY( popheap[z].val <= popheap[length-1].val && popheap[z].valid );\n }\n \n void\n check_sort(int* array, int length)\n {\n   rvalstruct sortheap[9];\n-  std::copy(array, array + length, sortheap);   \n+  int        sortheap_ref[9];\n+  std::copy(array, array + length, sortheap);\n+  std::copy(array, array + length, sortheap_ref);\n   container sortcon(sortheap, sortheap + length);\n+  container_ref sortcon_ref(sortheap_ref, sortheap_ref + length);\n   std::sort_heap(sortcon.begin(), sortcon.end());\n-  for(int z = 0; z < length - 1; ++z)\n-    VERIFY(sortheap[z].val <= sortheap[z + 1].val && sortheap[z].valid);\n-  VERIFY(sortheap[length - 1].valid);\n+  std::sort_heap(sortcon_ref.begin(), sortcon_ref.end());\n+  for (int z = 0; z < length; ++z)\n+    VERIFY( sortheap[z] == sortheap_ref[z] );\n+  for (int z = 0; z < length - 1; ++z)\n+    VERIFY( sortheap[z].val <= sortheap[z + 1].val && sortheap[z].valid );\n+  VERIFY( sortheap[length - 1].valid );\n }\n \n void\n check_push(int* array, int pushval, int length)\n {\n   rvalstruct pushheap[10];\n+  int        pushheap_ref[10];\n   std::copy(array, array + length, pushheap);\n+  std::copy(array, array + length, pushheap_ref);  \n   pushheap[length] = pushval;\n-  container pushcon(pushheap, pushheap + length);\n+  pushheap_ref[length] = pushval;\n+  container pushcon(pushheap, pushheap + length + 1);\n+  container_ref pushcon_ref(pushheap_ref, pushheap_ref + length + 1);\n   std::push_heap(pushcon.begin(), pushcon.end());\n-  VERIFY(std::__is_heap(pushheap, pushheap + length));\n-  for(int z = 0; z < length ; ++z)\n-    VERIFY(pushheap[z].valid);\n+  std::push_heap(pushcon_ref.begin(), pushcon_ref.end());\n+  for (int z = 0; z < length + 1; ++z)\n+    VERIFY( pushheap[z] == pushheap_ref[z] );\n+  VERIFY( std::__is_heap(pushheap, pushheap + length + 1) );\n+  for (int z = 0; z < length + 1; ++z)\n+    VERIFY( pushheap[z].valid );\n }\n \n-\n void\n test01()\n {\n   int array[9];\n-  for(int i = 1; i < 9; ++i)\n-  {\n-    for(int z = 0; z < i; ++z)\n-      array[i] = i;\n-    while(std::next_permutation(array, array + i))\n+  for (int i = 1; i < 9; ++i)\n     {\n-      check_make(array, i);\n-      if(std::__is_heap(array, array + i))\n-      {\n-        check_pop(array, i);\n-        check_sort(array, i);\n-        for(int pushval = -1; pushval <= i; ++pushval)\n-        {\n-          check_push(array, pushval, i);\n-        }\n-      }\n+      for(int z = 0; z < i; ++z)\n+\tarray[z] = z;\n+      while (std::next_permutation(array, array + i))\n+\t{\n+\t  check_make(array, i);\n+\t  if (std::__is_heap(array, array + i))\n+\t    {\n+\t      check_pop(array, i);\n+\t      check_sort(array, i);\n+\t      for (int pushval = -1; pushval <= i; ++pushval)\n+\t\tcheck_push(array, pushval, i);\n+\t    }\n+\t}\n     }\n-  }\n }\n \n int"}]}