{"sha": "23517e6b4ea01d0af35984f8473a235a29ff93c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM1MTdlNmI0ZWEwMWQwYWYzNTk4NGY4NDczYTIzNWEyOWZmOTNjNw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-10-20T14:30:52Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-10-20T14:30:52Z"}, "message": "typeck.c (composite_pointer_type): Add comment about DR 195\n\ncp:\n\t* typeck.c (composite_pointer_type): Add comment about DR 195\n\t(build_reinterpret_cast_1): Add for_reinterpret_cast_p parameter.\n\tAllow function pointer conversions that DR195 suggests.\n\t(build_reinterpret_cast, build_c_cast): Update\n\tbuild_reinterpret_cast_1 calls.\ntestsuite:\n\t* g++.dg/conversion/dr195.C: New.\n\t* g++.old-deja/g++.mike/p10148.C: Remove ill-formed cast.\n\nFrom-SVN: r89334", "tree": {"sha": "ba3327f2ab451820b06d2c428829a4bcd7de53f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba3327f2ab451820b06d2c428829a4bcd7de53f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23517e6b4ea01d0af35984f8473a235a29ff93c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23517e6b4ea01d0af35984f8473a235a29ff93c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23517e6b4ea01d0af35984f8473a235a29ff93c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23517e6b4ea01d0af35984f8473a235a29ff93c7/comments", "author": null, "committer": null, "parents": [{"sha": "d0edbeeca0a741b5edbeaea909f27fe09478143e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0edbeeca0a741b5edbeaea909f27fe09478143e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0edbeeca0a741b5edbeaea909f27fe09478143e"}], "stats": {"total": 67, "additions": 63, "deletions": 4}, "files": [{"sha": "6dc5345e2822584050d4df8533a2dabc99371e9a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23517e6b4ea01d0af35984f8473a235a29ff93c7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23517e6b4ea01d0af35984f8473a235a29ff93c7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=23517e6b4ea01d0af35984f8473a235a29ff93c7", "patch": "@@ -1,3 +1,11 @@\n+2004-10-20  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* typeck.c (composite_pointer_type): Add comment about DR 195\n+\t(build_reinterpret_cast_1): Add for_reinterpret_cast_p parameter.\n+\tAllow function pointer conversions that DR195 suggests.\n+\t(build_reinterpret_cast, build_c_cast): Update\n+\tbuild_reinterpret_cast_1 calls. \n+\n 2004-10-20  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* call.c, typeck.c: Fix comment typos."}, {"sha": "1c76944606cf264867b5ac28b147f97ad1a74b7f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23517e6b4ea01d0af35984f8473a235a29ff93c7/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23517e6b4ea01d0af35984f8473a235a29ff93c7/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=23517e6b4ea01d0af35984f8473a235a29ff93c7", "patch": "@@ -507,6 +507,8 @@ composite_pointer_type (tree t1, tree t2, tree arg1, tree arg2,\n       tree result_type;\n \n       if (pedantic && TYPE_PTRFN_P (t2))\n+\t/* Although DR195 suggests allowing this when no precision is\n+\t   lost, that is only allowed in a reinterpret_cast.  */\n \tpedwarn (\"ISO C++ forbids %s between pointer of type %<void *%> \"\n                  \"and pointer-to-function\", location);\n       result_type \n@@ -4803,7 +4805,7 @@ convert_member_func_to_ptr (tree type, tree expr)\n \n static tree\n build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n-\t\t\t  bool *valid_p)\n+\t\t\t  bool for_reinterpret_ref_p, bool *valid_p)\n {\n   tree intype;\n \n@@ -4843,7 +4845,7 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n       expr = build_unary_op (ADDR_EXPR, expr, 0);\n       if (expr != error_mark_node)\n \texpr = build_reinterpret_cast_1\n-\t  (build_pointer_type (TREE_TYPE (type)), expr, c_cast_p,\n+\t  (build_pointer_type (TREE_TYPE (type)), expr, c_cast_p, true,\n \t   valid_p);\n       if (expr != error_mark_node)\n \texpr = build_indirect_ref (expr, 0);\n@@ -4922,7 +4924,24 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n \t   || (TYPE_PTRFN_P (intype) && TYPE_PTROBV_P (type)))\n     {\n       if (pedantic || !c_cast_p)\n-\tpedwarn (\"ISO C++ forbids casting between pointer-to-function and pointer-to-object\");\n+\t{\n+\t  /* DR 195 suggests allowing such casts if they do not lose\n+\t     precision.  We allow conversion to pointer-to-void, if it\n+\t     does not lose precision, and we allow conversion from\n+\t     pointer-to-void regardless, so that one may convert\n+\t     back again without warning.  Such conversions are not\n+\t     permitted when we are recursively called to deal with\n+\t     reinterpretting reference casts. */\n+\t  if (!for_reinterpret_ref_p && VOID_TYPE_P (TREE_TYPE (type)))\n+\t    {\n+\t      if (TYPE_PRECISION (type) < TYPE_PRECISION (intype))\n+\t\twarning (\"conversion from %qT to %qT loses precision\",\n+\t\t\t intype, type);\n+\t    }\n+\t  else if (for_reinterpret_ref_p || !VOID_TYPE_P (TREE_TYPE (intype)))\n+\t    pedwarn (\"ISO C++ forbids casting between pointer-to-function and pointer-to-object\");\n+\t}\n+      \n       expr = decl_constant_value (expr);\n       return fold_if_not_in_template (build_nop (type, expr));\n     }\n@@ -4955,6 +4974,7 @@ build_reinterpret_cast (tree type, tree expr)\n     }\n \n   return build_reinterpret_cast_1 (type, expr, /*c_cast_p=*/false,\n+\t\t\t\t   /*for_reinterpret_ref=*/false,\n \t\t\t\t   /*valid_p=*/NULL);\n }\n \n@@ -5157,6 +5177,7 @@ build_c_cast (tree type, tree expr)\n   /* Or a reinterpret_cast.  */\n   if (!valid_p)\n     result = build_reinterpret_cast_1 (type, value, /*c_cast_p=*/true,\n+\t\t\t\t       /*for_reinterpret_ref_p=*/false,\n \t\t\t\t       &valid_p);\n   /* The static_cast or reinterpret_cast may be followed by a\n      const_cast.  */"}, {"sha": "04c73cd9989c5459858f15510e9671cd11e2233f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23517e6b4ea01d0af35984f8473a235a29ff93c7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23517e6b4ea01d0af35984f8473a235a29ff93c7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=23517e6b4ea01d0af35984f8473a235a29ff93c7", "patch": "@@ -1,3 +1,8 @@\n+2004-10-20  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.dg/conversion/dr195.C: New.\n+\t* g++.old-deja/g++.mike/p10148.C: Remove ill-formed cast.\n+\n 2004-10-20  Ben Elliston  <bje@au.ibm.com>\n \t    Devang Patel  <dpatel@apple.com>\n "}, {"sha": "e6cf18e4ae4bbe885a2ec6fe6a6d4485912de0c2", "filename": "gcc/testsuite/g++.dg/conversion/dr195.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23517e6b4ea01d0af35984f8473a235a29ff93c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fdr195.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23517e6b4ea01d0af35984f8473a235a29ff93c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fdr195.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fdr195.C?ref=23517e6b4ea01d0af35984f8473a235a29ff93c7", "patch": "@@ -0,0 +1,25 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 20 Oct 2004 <nathan@codesourcery.com>\n+\n+// DR 195 allows conversions between function and object pointers\n+// under some circumstances.\n+\n+typedef void (*PF)(void);\n+typedef void *PV;\n+typedef int *PO;\n+\n+\n+void foo ()\n+{\n+  PF pf;\n+  PV pv;\n+  PO po;\n+\n+  pf = reinterpret_cast <PF>(pv);\n+  pv = reinterpret_cast <PV>(pf);\n+  pf = reinterpret_cast <PF>(po); // { dg-error \"casting between\" \"\" }\n+  po = reinterpret_cast <PO>(pf); // { dg-error \"casting between\" \"\" }\n+\n+  pv = pf; // { dg-error \"invalid conversion\" \"\" }\n+  pf = pv; // { dg-error \"invalid conversion\" \"\" }\n+}"}, {"sha": "6661e6bf91ecd67c56db19d955d017ea530bf64e", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p10148.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23517e6b4ea01d0af35984f8473a235a29ff93c7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp10148.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23517e6b4ea01d0af35984f8473a235a29ff93c7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp10148.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp10148.C?ref=23517e6b4ea01d0af35984f8473a235a29ff93c7", "patch": "@@ -23,7 +23,7 @@ public:\n };\n \n void TCRCB::eat () {\n- void *vp = (TIRD*)this->itc;\n+ void *vp = (void *)((TIRD*)this)->itc;\n  this->itc();\n }\n "}]}