{"sha": "9a7049fd649430ab0d377546585a9907d62b2655", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE3MDQ5ZmQ2NDk0MzBhYjBkMzc3NTQ2NTg1YTk5MDdkNjJiMjY1NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-23T09:42:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-23T09:42:45Z"}, "message": "[multiple changes]\n\n2013-04-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Object_Declarations): Undo previous patch.\n\t* exp_util.adb (Expand_Subtype_From_Expr): If the expression\n\tis a source entity and the declaration is for an aliased\n\tunconstrained array, create a new subtype so that the flag\n\tIs_Constr_Subt_For_UN_Aliased does not pollute other entities.\n\n2013-04-23  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* aspects.adb: Move tables Base_Aspect and Inherited_Aspect\n\tfrom the spec to the body.\n\t(Find_Aspect): Update the call to Get_Aspect_Id.\n\t(Get_Aspect_Id): New version that takes an aspect specification.\n\t* aspects.ads: Reorganize all aspect related tables.\n\t(Get_Aspect_Id): New version that takes an aspect specification.\n\t* par_sco.adb (Traverse_Aspects): Update the call to Get_Aspect_Id.\n\t* sem_ch12.adb (Analyze_Generic_Subprogram_Declaration): Update\n\tthe call to Get_Aspect_Id.\n\t* sem_ch13.adb (Analyze_Aspect_At_Freeze_Point): Update the\n\tcall to Get_Aspect_Id.\t(Analyze_Aspect_Specifications): Update\n\tthe call to Get_Aspect_Id. Update the call to Impl_Defined_Aspect.\n\nFrom-SVN: r198179", "tree": {"sha": "51d67dc9317f561f2663363fb5e91355a21ef29e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51d67dc9317f561f2663363fb5e91355a21ef29e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a7049fd649430ab0d377546585a9907d62b2655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a7049fd649430ab0d377546585a9907d62b2655", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a7049fd649430ab0d377546585a9907d62b2655", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a7049fd649430ab0d377546585a9907d62b2655/comments", "author": null, "committer": null, "parents": [{"sha": "a532f98bcadefa3f4a87c48be174ef38d43fb6ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a532f98bcadefa3f4a87c48be174ef38d43fb6ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a532f98bcadefa3f4a87c48be174ef38d43fb6ba"}], "stats": {"total": 548, "additions": 292, "deletions": 256}, "files": [{"sha": "5bdc8f8a9986a39133a6027d2aca5667953ea7bc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7049fd649430ab0d377546585a9907d62b2655/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7049fd649430ab0d377546585a9907d62b2655/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9a7049fd649430ab0d377546585a9907d62b2655", "patch": "@@ -1,3 +1,26 @@\n+2013-04-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Object_Declarations): Undo previous patch.\n+\t* exp_util.adb (Expand_Subtype_From_Expr): If the expression\n+\tis a source entity and the declaration is for an aliased\n+\tunconstrained array, create a new subtype so that the flag\n+\tIs_Constr_Subt_For_UN_Aliased does not pollute other entities.\n+\n+2013-04-23  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* aspects.adb: Move tables Base_Aspect and Inherited_Aspect\n+\tfrom the spec to the body.\n+\t(Find_Aspect): Update the call to Get_Aspect_Id.\n+\t(Get_Aspect_Id): New version that takes an aspect specification.\n+\t* aspects.ads: Reorganize all aspect related tables.\n+\t(Get_Aspect_Id): New version that takes an aspect specification.\n+\t* par_sco.adb (Traverse_Aspects): Update the call to Get_Aspect_Id.\n+\t* sem_ch12.adb (Analyze_Generic_Subprogram_Declaration): Update\n+\tthe call to Get_Aspect_Id.\n+\t* sem_ch13.adb (Analyze_Aspect_At_Freeze_Point): Update the\n+\tcall to Get_Aspect_Id.\t(Analyze_Aspect_Specifications): Update\n+\tthe call to Get_Aspect_Id. Update the call to Impl_Defined_Aspect.\n+\n 2013-04-23  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_prag.adb (Fix_Error): Rewrite to do more accurate job"}, {"sha": "f63cd2b387a5c331de8f0268399560f4caef392f", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7049fd649430ab0d377546585a9907d62b2655/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7049fd649430ab0d377546585a9907d62b2655/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=9a7049fd649430ab0d377546585a9907d62b2655", "patch": "@@ -39,6 +39,36 @@ with GNAT.HTable;           use GNAT.HTable;\n \n package body Aspects is\n \n+   --  The following array indicates aspects that a subtype inherits from its\n+   --  base type. True means that the subtype inherits the aspect from its base\n+   --  type. False means it is not inherited.\n+\n+   Base_Aspect : constant array (Aspect_Id) of Boolean :=\n+     (Aspect_Atomic                  => True,\n+      Aspect_Atomic_Components       => True,\n+      Aspect_Constant_Indexing       => True,\n+      Aspect_Default_Iterator        => True,\n+      Aspect_Discard_Names           => True,\n+      Aspect_Independent_Components  => True,\n+      Aspect_Iterator_Element        => True,\n+      Aspect_Type_Invariant          => True,\n+      Aspect_Unchecked_Union         => True,\n+      Aspect_Variable_Indexing       => True,\n+      Aspect_Volatile                => True,\n+      others                         => False);\n+\n+   --  The following array indicates type aspects that are inherited and apply\n+   --  to the class-wide type as well.\n+\n+   Inherited_Aspect : constant array (Aspect_Id) of Boolean :=\n+     (Aspect_Constant_Indexing    => True,\n+      Aspect_Default_Iterator     => True,\n+      Aspect_Implicit_Dereference => True,\n+      Aspect_Iterator_Element     => True,\n+      Aspect_Remote_Types         => True,\n+      Aspect_Variable_Indexing    => True,\n+      others                      => False);\n+\n    procedure Set_Aspect_Specifications_No_Check (N : Node_Id; L : List_Id);\n    --  Same as Set_Aspect_Specifications, but does not contain the assertion\n    --  that checks that N does not already have aspect specifications. This\n@@ -140,7 +170,7 @@ package body Aspects is\n       Item := First_Rep_Item (Owner);\n       while Present (Item) loop\n          if Nkind (Item) = N_Aspect_Specification\n-           and then Get_Aspect_Id (Chars (Identifier (Item))) = A\n+           and then Get_Aspect_Id (Item) = A\n          then\n             return Item;\n          end if;\n@@ -163,7 +193,7 @@ package body Aspects is\n       if Permits_Aspect_Specifications (Decl) then\n          Spec := First (Aspect_Specifications (Decl));\n          while Present (Spec) loop\n-            if Get_Aspect_Id (Chars (Identifier (Spec))) = A then\n+            if Get_Aspect_Id (Spec) = A then\n                return Spec;\n             end if;\n \n@@ -208,6 +238,12 @@ package body Aspects is\n       return Aspect_Id_Hash_Table.Get (Name);\n    end Get_Aspect_Id;\n \n+   function Get_Aspect_Id (Aspect : Node_Id) return Aspect_Id is\n+   begin\n+      pragma Assert (Nkind (Aspect) = N_Aspect_Specification);\n+      return Aspect_Id_Hash_Table.Get (Chars (Identifier (Aspect)));\n+   end Get_Aspect_Id;\n+\n    ----------------\n    -- Has_Aspect --\n    ----------------"}, {"sha": "ee8676af33039a261a74c5d75bffaf6be9a948a1", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 210, "deletions": 235, "changes": 445, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7049fd649430ab0d377546585a9907d62b2655/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7049fd649430ab0d377546585a9907d62b2655/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=9a7049fd649430ab0d377546585a9907d62b2655", "patch": "@@ -196,89 +196,59 @@ package Aspects is\n    --  The following array indicates aspects that accept 'Class\n \n    Class_Aspect_OK : constant array (Aspect_Id) of Boolean :=\n-                       (Aspect_Invariant      => True,\n-                        Aspect_Pre            => True,\n-                        Aspect_Predicate      => True,\n-                        Aspect_Post           => True,\n-                        Aspect_Type_Invariant => True,\n-                        others                => False);\n-\n-   --  The following array indicates aspects that a subtype inherits from\n-   --  its base type. True means that the subtype inherits the aspect from\n-   --  its base type. False means it is not inherited.\n-\n-   Base_Aspect : constant array (Aspect_Id) of Boolean :=\n-                   (Aspect_Atomic                  => True,\n-                    Aspect_Atomic_Components       => True,\n-                    Aspect_Discard_Names           => True,\n-                    Aspect_Independent_Components  => True,\n-                    Aspect_Iterator_Element        => True,\n-                    Aspect_Constant_Indexing       => True,\n-                    Aspect_Default_Iterator        => True,\n-                    Aspect_Type_Invariant          => True,\n-                    Aspect_Unchecked_Union         => True,\n-                    Aspect_Variable_Indexing       => True,\n-                    Aspect_Volatile                => True,\n-                    others                         => False);\n+     (Aspect_Invariant      => True,\n+      Aspect_Pre            => True,\n+      Aspect_Predicate      => True,\n+      Aspect_Post           => True,\n+      Aspect_Type_Invariant => True,\n+      others                => False);\n \n    --  The following array identifies all implementation defined aspects\n \n-   Impl_Defined_Aspects : constant array (Aspect_Id) of Boolean :=\n-                            (Aspect_Abstract_State           => True,\n-                             Aspect_Ada_2005                 => True,\n-                             Aspect_Ada_2012                 => True,\n-                             Aspect_Compiler_Unit            => True,\n-                             Aspect_Contract_Cases           => True,\n-                             Aspect_Depends                  => True,\n-                             Aspect_Dimension                => True,\n-                             Aspect_Dimension_System         => True,\n-                             Aspect_Favor_Top_Level          => True,\n-                             Aspect_Ghost                    => True,\n-                             Aspect_Global                   => True,\n-                             Aspect_Inline_Always            => True,\n-                             Aspect_Invariant                => True,\n-                             Aspect_Lock_Free                => True,\n-                             Aspect_Object_Size              => True,\n-                             Aspect_Persistent_BSS           => True,\n-                             Aspect_Predicate                => True,\n-                             Aspect_Preelaborate_05          => True,\n-                             Aspect_Pure_05                  => True,\n-                             Aspect_Pure_12                  => True,\n-                             Aspect_Pure_Function            => True,\n-                             Aspect_Remote_Access_Type       => True,\n-                             Aspect_Scalar_Storage_Order     => True,\n-                             Aspect_Shared                   => True,\n-                             Aspect_Simple_Storage_Pool      => True,\n-                             Aspect_Simple_Storage_Pool_Type => True,\n-                             Aspect_Suppress_Debug_Info      => True,\n-                             Aspect_Test_Case                => True,\n-                             Aspect_Universal_Aliasing       => True,\n-                             Aspect_Universal_Data           => True,\n-                             Aspect_Unmodified               => True,\n-                             Aspect_Unreferenced             => True,\n-                             Aspect_Unreferenced_Objects     => True,\n-                             Aspect_Value_Size               => True,\n-                             Aspect_Warnings                 => True,\n-                             others                          => False);\n+   Implementation_Defined_Aspect : constant array (Aspect_Id) of Boolean :=\n+     (Aspect_Abstract_State           => True,\n+      Aspect_Ada_2005                 => True,\n+      Aspect_Ada_2012                 => True,\n+      Aspect_Compiler_Unit            => True,\n+      Aspect_Contract_Cases           => True,\n+      Aspect_Depends                  => True,\n+      Aspect_Dimension                => True,\n+      Aspect_Dimension_System         => True,\n+      Aspect_Favor_Top_Level          => True,\n+      Aspect_Ghost                    => True,\n+      Aspect_Global                   => True,\n+      Aspect_Inline_Always            => True,\n+      Aspect_Invariant                => True,\n+      Aspect_Lock_Free                => True,\n+      Aspect_Object_Size              => True,\n+      Aspect_Persistent_BSS           => True,\n+      Aspect_Predicate                => True,\n+      Aspect_Preelaborate_05          => True,\n+      Aspect_Pure_05                  => True,\n+      Aspect_Pure_12                  => True,\n+      Aspect_Pure_Function            => True,\n+      Aspect_Remote_Access_Type       => True,\n+      Aspect_Scalar_Storage_Order     => True,\n+      Aspect_Shared                   => True,\n+      Aspect_Simple_Storage_Pool      => True,\n+      Aspect_Simple_Storage_Pool_Type => True,\n+      Aspect_Suppress_Debug_Info      => True,\n+      Aspect_Test_Case                => True,\n+      Aspect_Universal_Aliasing       => True,\n+      Aspect_Universal_Data           => True,\n+      Aspect_Unmodified               => True,\n+      Aspect_Unreferenced             => True,\n+      Aspect_Unreferenced_Objects     => True,\n+      Aspect_Value_Size               => True,\n+      Aspect_Warnings                 => True,\n+      others                          => False);\n \n    --  The following array indicates aspects for which multiple occurrences of\n    --  the same aspect attached to the same declaration are allowed.\n \n    No_Duplicates_Allowed : constant array (Aspect_Id) of Boolean :=\n-                             (Aspect_Test_Case      => False,\n-                              others                => True);\n-\n-   --  The following array indicates type aspects that are inherited and apply\n-   --  to the class-wide type as well.\n-\n-   Inherited_Aspect : constant array (Aspect_Id) of Boolean :=\n-                        (Aspect_Constant_Indexing    => True,\n-                         Aspect_Default_Iterator     => True,\n-                         Aspect_Implicit_Dereference => True,\n-                         Aspect_Iterator_Element     => True,\n-                         Aspect_Remote_Types         => True,\n-                         Aspect_Variable_Indexing    => True,\n-                         others                      => False);\n+     (Aspect_Test_Case => False,\n+      others           => True);\n \n    --  The following subtype defines aspects corresponding to library unit\n    --  pragmas, these can only validly appear as aspects for library units,\n@@ -311,179 +281,184 @@ package Aspects is\n    --  The following array indicates what argument type is required\n \n    Aspect_Argument : constant array (Aspect_Id) of Aspect_Expression :=\n-                       (No_Aspect                      => Optional,\n-                        Aspect_Abstract_State          => Expression,\n-                        Aspect_Address                 => Expression,\n-                        Aspect_Alignment               => Expression,\n-                        Aspect_Attach_Handler          => Expression,\n-                        Aspect_Bit_Order               => Expression,\n-                        Aspect_Component_Size          => Expression,\n-                        Aspect_Constant_Indexing       => Name,\n-                        Aspect_Contract_Cases          => Expression,\n-                        Aspect_Convention              => Name,\n-                        Aspect_CPU                     => Expression,\n-                        Aspect_Default_Component_Value => Expression,\n-                        Aspect_Default_Iterator        => Name,\n-                        Aspect_Default_Value           => Expression,\n-                        Aspect_Depends                 => Expression,\n-                        Aspect_Dimension               => Expression,\n-                        Aspect_Dimension_System        => Expression,\n-                        Aspect_Dispatching_Domain      => Expression,\n-                        Aspect_Dynamic_Predicate       => Expression,\n-                        Aspect_External_Name           => Expression,\n-                        Aspect_External_Tag            => Expression,\n-                        Aspect_Global                  => Expression,\n-                        Aspect_Implicit_Dereference    => Name,\n-                        Aspect_Input                   => Name,\n-                        Aspect_Interrupt_Priority      => Expression,\n-                        Aspect_Invariant               => Expression,\n-                        Aspect_Iterator_Element        => Name,\n-                        Aspect_Link_Name               => Expression,\n-                        Aspect_Machine_Radix           => Expression,\n-                        Aspect_Object_Size             => Expression,\n-                        Aspect_Output                  => Name,\n-                        Aspect_Post                    => Expression,\n-                        Aspect_Postcondition           => Expression,\n-                        Aspect_Pre                     => Expression,\n-                        Aspect_Precondition            => Expression,\n-                        Aspect_Predicate               => Expression,\n-                        Aspect_Priority                => Expression,\n-                        Aspect_Read                    => Name,\n-                        Aspect_Relative_Deadline       => Expression,\n-                        Aspect_Scalar_Storage_Order    => Expression,\n-                        Aspect_Simple_Storage_Pool     => Name,\n-                        Aspect_Size                    => Expression,\n-                        Aspect_Small                   => Expression,\n-                        Aspect_Static_Predicate        => Expression,\n-                        Aspect_Storage_Pool            => Name,\n-                        Aspect_Storage_Size            => Expression,\n-                        Aspect_Stream_Size             => Expression,\n-                        Aspect_Suppress                => Name,\n-                        Aspect_Synchronization         => Name,\n-                        Aspect_Test_Case               => Expression,\n-                        Aspect_Type_Invariant          => Expression,\n-                        Aspect_Unsuppress              => Name,\n-                        Aspect_Value_Size              => Expression,\n-                        Aspect_Variable_Indexing       => Name,\n-                        Aspect_Warnings                => Name,\n-                        Aspect_Write                   => Name,\n-\n-                        Library_Unit_Aspects           => Optional,\n-                        Boolean_Aspects                => Optional);\n+     (No_Aspect                      => Optional,\n+      Aspect_Abstract_State          => Expression,\n+      Aspect_Address                 => Expression,\n+      Aspect_Alignment               => Expression,\n+      Aspect_Attach_Handler          => Expression,\n+      Aspect_Bit_Order               => Expression,\n+      Aspect_Component_Size          => Expression,\n+      Aspect_Constant_Indexing       => Name,\n+      Aspect_Contract_Cases          => Expression,\n+      Aspect_Convention              => Name,\n+      Aspect_CPU                     => Expression,\n+      Aspect_Default_Component_Value => Expression,\n+      Aspect_Default_Iterator        => Name,\n+      Aspect_Default_Value           => Expression,\n+      Aspect_Depends                 => Expression,\n+      Aspect_Dimension               => Expression,\n+      Aspect_Dimension_System        => Expression,\n+      Aspect_Dispatching_Domain      => Expression,\n+      Aspect_Dynamic_Predicate       => Expression,\n+      Aspect_External_Name           => Expression,\n+      Aspect_External_Tag            => Expression,\n+      Aspect_Global                  => Expression,\n+      Aspect_Implicit_Dereference    => Name,\n+      Aspect_Input                   => Name,\n+      Aspect_Interrupt_Priority      => Expression,\n+      Aspect_Invariant               => Expression,\n+      Aspect_Iterator_Element        => Name,\n+      Aspect_Link_Name               => Expression,\n+      Aspect_Machine_Radix           => Expression,\n+      Aspect_Object_Size             => Expression,\n+      Aspect_Output                  => Name,\n+      Aspect_Post                    => Expression,\n+      Aspect_Postcondition           => Expression,\n+      Aspect_Pre                     => Expression,\n+      Aspect_Precondition            => Expression,\n+      Aspect_Predicate               => Expression,\n+      Aspect_Priority                => Expression,\n+      Aspect_Read                    => Name,\n+      Aspect_Relative_Deadline       => Expression,\n+      Aspect_Scalar_Storage_Order    => Expression,\n+      Aspect_Simple_Storage_Pool     => Name,\n+      Aspect_Size                    => Expression,\n+      Aspect_Small                   => Expression,\n+      Aspect_Static_Predicate        => Expression,\n+      Aspect_Storage_Pool            => Name,\n+      Aspect_Storage_Size            => Expression,\n+      Aspect_Stream_Size             => Expression,\n+      Aspect_Suppress                => Name,\n+      Aspect_Synchronization         => Name,\n+      Aspect_Test_Case               => Expression,\n+      Aspect_Type_Invariant          => Expression,\n+      Aspect_Unsuppress              => Name,\n+      Aspect_Value_Size              => Expression,\n+      Aspect_Variable_Indexing       => Name,\n+      Aspect_Warnings                => Name,\n+      Aspect_Write                   => Name,\n+\n+      Boolean_Aspects                => Optional,\n+      Library_Unit_Aspects           => Optional);\n \n    -----------------------------------------\n    -- Table Linking Names and Aspect_Id's --\n    -----------------------------------------\n \n    --  Table linking aspect names and id's\n \n-   Aspect_Names : constant array (Aspect_Id) of Name_Id := (\n-     No_Aspect                           => No_Name,\n-     Aspect_Abstract_State               => Name_Abstract_State,\n-     Aspect_Ada_2005                     => Name_Ada_2005,\n-     Aspect_Ada_2012                     => Name_Ada_2012,\n-     Aspect_Address                      => Name_Address,\n-     Aspect_Alignment                    => Name_Alignment,\n-     Aspect_All_Calls_Remote             => Name_All_Calls_Remote,\n-     Aspect_Asynchronous                 => Name_Asynchronous,\n-     Aspect_Atomic                       => Name_Atomic,\n-     Aspect_Atomic_Components            => Name_Atomic_Components,\n-     Aspect_Attach_Handler               => Name_Attach_Handler,\n-     Aspect_Bit_Order                    => Name_Bit_Order,\n-     Aspect_Compiler_Unit                => Name_Compiler_Unit,\n-     Aspect_Component_Size               => Name_Component_Size,\n-     Aspect_Constant_Indexing            => Name_Constant_Indexing,\n-     Aspect_Contract_Cases               => Name_Contract_Cases,\n-     Aspect_Convention                   => Name_Convention,\n-     Aspect_CPU                          => Name_CPU,\n-     Aspect_Default_Iterator             => Name_Default_Iterator,\n-     Aspect_Default_Value                => Name_Default_Value,\n-     Aspect_Default_Component_Value      => Name_Default_Component_Value,\n-     Aspect_Depends                      => Name_Depends,\n-     Aspect_Dimension                    => Name_Dimension,\n-     Aspect_Dimension_System             => Name_Dimension_System,\n-     Aspect_Discard_Names                => Name_Discard_Names,\n-     Aspect_Dispatching_Domain           => Name_Dispatching_Domain,\n-     Aspect_Dynamic_Predicate            => Name_Dynamic_Predicate,\n-     Aspect_Elaborate_Body               => Name_Elaborate_Body,\n-     Aspect_External_Name                => Name_External_Name,\n-     Aspect_External_Tag                 => Name_External_Tag,\n-     Aspect_Export                       => Name_Export,\n-     Aspect_Favor_Top_Level              => Name_Favor_Top_Level,\n-     Aspect_Ghost                        => Name_Ghost,\n-     Aspect_Global                       => Name_Global,\n-     Aspect_Implicit_Dereference         => Name_Implicit_Dereference,\n-     Aspect_Import                       => Name_Import,\n-     Aspect_Independent                  => Name_Independent,\n-     Aspect_Independent_Components       => Name_Independent_Components,\n-     Aspect_Inline                       => Name_Inline,\n-     Aspect_Inline_Always                => Name_Inline_Always,\n-     Aspect_Input                        => Name_Input,\n-     Aspect_Interrupt_Handler            => Name_Interrupt_Handler,\n-     Aspect_Interrupt_Priority           => Name_Interrupt_Priority,\n-     Aspect_Invariant                    => Name_Invariant,\n-     Aspect_Iterator_Element             => Name_Iterator_Element,\n-     Aspect_Link_Name                    => Name_Link_Name,\n-     Aspect_Lock_Free                    => Name_Lock_Free,\n-     Aspect_Machine_Radix                => Name_Machine_Radix,\n-     Aspect_No_Return                    => Name_No_Return,\n-     Aspect_Object_Size                  => Name_Object_Size,\n-     Aspect_Output                       => Name_Output,\n-     Aspect_Pack                         => Name_Pack,\n-     Aspect_Persistent_BSS               => Name_Persistent_BSS,\n-     Aspect_Post                         => Name_Post,\n-     Aspect_Postcondition                => Name_Postcondition,\n-     Aspect_Pre                          => Name_Pre,\n-     Aspect_Precondition                 => Name_Precondition,\n-     Aspect_Predicate                    => Name_Predicate,\n-     Aspect_Preelaborable_Initialization => Name_Preelaborable_Initialization,\n-     Aspect_Preelaborate                 => Name_Preelaborate,\n-     Aspect_Preelaborate_05              => Name_Preelaborate_05,\n-     Aspect_Priority                     => Name_Priority,\n-     Aspect_Pure                         => Name_Pure,\n-     Aspect_Pure_05                      => Name_Pure_05,\n-     Aspect_Pure_12                      => Name_Pure_12,\n-     Aspect_Pure_Function                => Name_Pure_Function,\n-     Aspect_Read                         => Name_Read,\n-     Aspect_Relative_Deadline            => Name_Relative_Deadline,\n-     Aspect_Remote_Access_Type           => Name_Remote_Access_Type,\n-     Aspect_Remote_Call_Interface        => Name_Remote_Call_Interface,\n-     Aspect_Remote_Types                 => Name_Remote_Types,\n-     Aspect_Scalar_Storage_Order         => Name_Scalar_Storage_Order,\n-     Aspect_Shared                       => Name_Shared,\n-     Aspect_Shared_Passive               => Name_Shared_Passive,\n-     Aspect_Simple_Storage_Pool          => Name_Simple_Storage_Pool,\n-     Aspect_Simple_Storage_Pool_Type     => Name_Simple_Storage_Pool_Type,\n-     Aspect_Size                         => Name_Size,\n-     Aspect_Small                        => Name_Small,\n-     Aspect_Static_Predicate             => Name_Static_Predicate,\n-     Aspect_Storage_Pool                 => Name_Storage_Pool,\n-     Aspect_Storage_Size                 => Name_Storage_Size,\n-     Aspect_Stream_Size                  => Name_Stream_Size,\n-     Aspect_Suppress                     => Name_Suppress,\n-     Aspect_Suppress_Debug_Info          => Name_Suppress_Debug_Info,\n-     Aspect_Synchronization              => Name_Synchronization,\n-     Aspect_Test_Case                    => Name_Test_Case,\n-     Aspect_Type_Invariant               => Name_Type_Invariant,\n-     Aspect_Unchecked_Union              => Name_Unchecked_Union,\n-     Aspect_Universal_Aliasing           => Name_Universal_Aliasing,\n-     Aspect_Universal_Data               => Name_Universal_Data,\n-     Aspect_Unmodified                   => Name_Unmodified,\n-     Aspect_Unreferenced                 => Name_Unreferenced,\n-     Aspect_Unreferenced_Objects         => Name_Unreferenced_Objects,\n-     Aspect_Unsuppress                   => Name_Unsuppress,\n-     Aspect_Value_Size                   => Name_Value_Size,\n-     Aspect_Variable_Indexing            => Name_Variable_Indexing,\n-     Aspect_Volatile                     => Name_Volatile,\n-     Aspect_Volatile_Components          => Name_Volatile_Components,\n-     Aspect_Warnings                     => Name_Warnings,\n-     Aspect_Write                        => Name_Write);\n+   Aspect_Names : constant array (Aspect_Id) of Name_Id :=\n+     (No_Aspect                           => No_Name,\n+      Aspect_Abstract_State               => Name_Abstract_State,\n+      Aspect_Ada_2005                     => Name_Ada_2005,\n+      Aspect_Ada_2012                     => Name_Ada_2012,\n+      Aspect_Address                      => Name_Address,\n+      Aspect_Alignment                    => Name_Alignment,\n+      Aspect_All_Calls_Remote             => Name_All_Calls_Remote,\n+      Aspect_Asynchronous                 => Name_Asynchronous,\n+      Aspect_Atomic                       => Name_Atomic,\n+      Aspect_Atomic_Components            => Name_Atomic_Components,\n+      Aspect_Attach_Handler               => Name_Attach_Handler,\n+      Aspect_Bit_Order                    => Name_Bit_Order,\n+      Aspect_Compiler_Unit                => Name_Compiler_Unit,\n+      Aspect_Component_Size               => Name_Component_Size,\n+      Aspect_Constant_Indexing            => Name_Constant_Indexing,\n+      Aspect_Contract_Cases               => Name_Contract_Cases,\n+      Aspect_Convention                   => Name_Convention,\n+      Aspect_CPU                          => Name_CPU,\n+      Aspect_Default_Iterator             => Name_Default_Iterator,\n+      Aspect_Default_Value                => Name_Default_Value,\n+      Aspect_Default_Component_Value      => Name_Default_Component_Value,\n+      Aspect_Depends                      => Name_Depends,\n+      Aspect_Dimension                    => Name_Dimension,\n+      Aspect_Dimension_System             => Name_Dimension_System,\n+      Aspect_Discard_Names                => Name_Discard_Names,\n+      Aspect_Dispatching_Domain           => Name_Dispatching_Domain,\n+      Aspect_Dynamic_Predicate            => Name_Dynamic_Predicate,\n+      Aspect_Elaborate_Body               => Name_Elaborate_Body,\n+      Aspect_External_Name                => Name_External_Name,\n+      Aspect_External_Tag                 => Name_External_Tag,\n+      Aspect_Export                       => Name_Export,\n+      Aspect_Favor_Top_Level              => Name_Favor_Top_Level,\n+      Aspect_Ghost                        => Name_Ghost,\n+      Aspect_Global                       => Name_Global,\n+      Aspect_Implicit_Dereference         => Name_Implicit_Dereference,\n+      Aspect_Import                       => Name_Import,\n+      Aspect_Independent                  => Name_Independent,\n+      Aspect_Independent_Components       => Name_Independent_Components,\n+      Aspect_Inline                       => Name_Inline,\n+      Aspect_Inline_Always                => Name_Inline_Always,\n+      Aspect_Input                        => Name_Input,\n+      Aspect_Interrupt_Handler            => Name_Interrupt_Handler,\n+      Aspect_Interrupt_Priority           => Name_Interrupt_Priority,\n+      Aspect_Invariant                    => Name_Invariant,\n+      Aspect_Iterator_Element             => Name_Iterator_Element,\n+      Aspect_Link_Name                    => Name_Link_Name,\n+      Aspect_Lock_Free                    => Name_Lock_Free,\n+      Aspect_Machine_Radix                => Name_Machine_Radix,\n+      Aspect_No_Return                    => Name_No_Return,\n+      Aspect_Object_Size                  => Name_Object_Size,\n+      Aspect_Output                       => Name_Output,\n+      Aspect_Pack                         => Name_Pack,\n+      Aspect_Persistent_BSS               => Name_Persistent_BSS,\n+      Aspect_Post                         => Name_Post,\n+      Aspect_Postcondition                => Name_Postcondition,\n+      Aspect_Pre                          => Name_Pre,\n+      Aspect_Precondition                 => Name_Precondition,\n+      Aspect_Predicate                    => Name_Predicate,\n+      Aspect_Preelaborable_Initialization => Name_Preelaborable_Initialization,\n+      Aspect_Preelaborate                 => Name_Preelaborate,\n+      Aspect_Preelaborate_05              => Name_Preelaborate_05,\n+      Aspect_Priority                     => Name_Priority,\n+      Aspect_Pure                         => Name_Pure,\n+      Aspect_Pure_05                      => Name_Pure_05,\n+      Aspect_Pure_12                      => Name_Pure_12,\n+      Aspect_Pure_Function                => Name_Pure_Function,\n+      Aspect_Read                         => Name_Read,\n+      Aspect_Relative_Deadline            => Name_Relative_Deadline,\n+      Aspect_Remote_Access_Type           => Name_Remote_Access_Type,\n+      Aspect_Remote_Call_Interface        => Name_Remote_Call_Interface,\n+      Aspect_Remote_Types                 => Name_Remote_Types,\n+      Aspect_Scalar_Storage_Order         => Name_Scalar_Storage_Order,\n+      Aspect_Shared                       => Name_Shared,\n+      Aspect_Shared_Passive               => Name_Shared_Passive,\n+      Aspect_Simple_Storage_Pool          => Name_Simple_Storage_Pool,\n+      Aspect_Simple_Storage_Pool_Type     => Name_Simple_Storage_Pool_Type,\n+      Aspect_Size                         => Name_Size,\n+      Aspect_Small                        => Name_Small,\n+      Aspect_Static_Predicate             => Name_Static_Predicate,\n+      Aspect_Storage_Pool                 => Name_Storage_Pool,\n+      Aspect_Storage_Size                 => Name_Storage_Size,\n+      Aspect_Stream_Size                  => Name_Stream_Size,\n+      Aspect_Suppress                     => Name_Suppress,\n+      Aspect_Suppress_Debug_Info          => Name_Suppress_Debug_Info,\n+      Aspect_Synchronization              => Name_Synchronization,\n+      Aspect_Test_Case                    => Name_Test_Case,\n+      Aspect_Type_Invariant               => Name_Type_Invariant,\n+      Aspect_Unchecked_Union              => Name_Unchecked_Union,\n+      Aspect_Universal_Aliasing           => Name_Universal_Aliasing,\n+      Aspect_Universal_Data               => Name_Universal_Data,\n+      Aspect_Unmodified                   => Name_Unmodified,\n+      Aspect_Unreferenced                 => Name_Unreferenced,\n+      Aspect_Unreferenced_Objects         => Name_Unreferenced_Objects,\n+      Aspect_Unsuppress                   => Name_Unsuppress,\n+      Aspect_Value_Size                   => Name_Value_Size,\n+      Aspect_Variable_Indexing            => Name_Variable_Indexing,\n+      Aspect_Volatile                     => Name_Volatile,\n+      Aspect_Volatile_Components          => Name_Volatile_Components,\n+      Aspect_Warnings                     => Name_Warnings,\n+      Aspect_Write                        => Name_Write);\n \n    function Get_Aspect_Id (Name : Name_Id) return Aspect_Id;\n    pragma Inline (Get_Aspect_Id);\n    --  Given a name Nam, returns the corresponding aspect id value. If the name\n    --  does not match any aspect, then No_Aspect is returned as the result.\n \n+   function Get_Aspect_Id (Aspect : Node_Id) return Aspect_Id;\n+   pragma Inline (Get_Aspect_Id);\n+   --  Given an aspect specification, return the corresponding aspect_id value.\n+   --  If the name does not match any aspect, return No_Aspect.\n+\n    ---------------------------------------------------\n    -- Handling of Aspect Specifications in the Tree --\n    ---------------------------------------------------"}, {"sha": "778f15946fbab569a62059a240b733b1b4a0d313", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7049fd649430ab0d377546585a9907d62b2655/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7049fd649430ab0d377546585a9907d62b2655/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=9a7049fd649430ab0d377546585a9907d62b2655", "patch": "@@ -2040,8 +2040,20 @@ package body Exp_Util is\n                    Make_Literal_Range (Loc,\n                      Literal_Typ => Exp_Typ)))));\n \n+      --  If the type of the expression is an internally generated type it\n+      --  may not be necessary to create a new subtype. However there are\n+      --  two exceptions : references to the current instances, and aliased\n+      --  array object declarations, for which the back-end needs to create\n+      --  a template.\n+\n       elsif Is_Constrained (Exp_Typ)\n         and then not Is_Class_Wide_Type (Unc_Type)\n+        and then\n+          (Nkind (N) /= N_Object_Declaration\n+             or else not Is_Entity_Name (Expression (N))\n+             or else not Comes_From_Source (Entity (Expression (N)))\n+             or else not Is_Array_Type (Exp_Typ)\n+             or else not Aliased_Present (N))\n       then\n          if Is_Itype (Exp_Typ) then\n \n@@ -2066,7 +2078,7 @@ package body Exp_Util is\n                   end if;\n                end;\n \n-            --  No need to generate a new one (new what???)\n+            --  No need to generate a new subtype\n \n             else\n                T := Exp_Typ;"}, {"sha": "29c2daa89e144597d65a29a1fb440549508f26d9", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7049fd649430ab0d377546585a9907d62b2655/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7049fd649430ab0d377546585a9907d62b2655/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=9a7049fd649430ab0d377546585a9907d62b2655", "patch": "@@ -1454,7 +1454,7 @@ package body Par_SCO is\n \n             C1 := ASCII.NUL;\n \n-            case Get_Aspect_Id (Chars (Identifier (AN))) is\n+            case Get_Aspect_Id (AN) is\n \n                --  Aspects rewritten into pragmas controlled by a Check_Policy:\n                --  Current_Pragma_Sloc must be set to the sloc of the aspect"}, {"sha": "db3072682b78c6059fd7d3c3955126eb47dc6809", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7049fd649430ab0d377546585a9907d62b2655/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7049fd649430ab0d377546585a9907d62b2655/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=9a7049fd649430ab0d377546585a9907d62b2655", "patch": "@@ -3244,9 +3244,7 @@ package body Sem_Ch12 is\n          begin\n             Aspect := First (Aspect_Specifications (N));\n             while Present (Aspect) loop\n-               if Get_Aspect_Id (Chars (Identifier (Aspect)))\n-                  /= Aspect_Warnings\n-               then\n+               if Get_Aspect_Id (Aspect) /= Aspect_Warnings then\n                   Analyze (Expression (Aspect));\n                end if;\n                Next (Aspect);"}, {"sha": "b144411e7cd1937cef23670b7cad70698cb79960", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7049fd649430ab0d377546585a9907d62b2655/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7049fd649430ab0d377546585a9907d62b2655/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=9a7049fd649430ab0d377546585a9907d62b2655", "patch": "@@ -878,7 +878,7 @@ package body Sem_Ch13 is\n            and then Entity (ASN) = E\n            and then Is_Delayed_Aspect (ASN)\n          then\n-            A_Id := Get_Aspect_Id (Chars (Identifier (ASN)));\n+            A_Id := Get_Aspect_Id (ASN);\n \n             case A_Id is\n \n@@ -1081,7 +1081,7 @@ package body Sem_Ch13 is\n \n             --  Check restriction No_Implementation_Aspect_Specifications\n \n-            if Impl_Defined_Aspects (A_Id) then\n+            if Implementation_Defined_Aspect (A_Id) then\n                Check_Restriction\n                  (No_Implementation_Aspect_Specifications, Aspect);\n             end if;\n@@ -1103,9 +1103,8 @@ package body Sem_Ch13 is\n             if No_Duplicates_Allowed (A_Id) then\n                Anod := First (L);\n                while Anod /= Aspect loop\n-                  if Same_Aspect\n-                      (A_Id, Get_Aspect_Id (Chars (Identifier (Anod))))\n-                    and then Comes_From_Source (Aspect)\n+                  if Comes_From_Source (Aspect)\n+                    and then Same_Aspect (A_Id, Get_Aspect_Id (Anod))\n                   then\n                      Error_Msg_Name_1 := Nam;\n                      Error_Msg_Sloc := Sloc (Anod);\n@@ -1131,7 +1130,7 @@ package body Sem_Ch13 is\n \n             --  Check some general restrictions on language defined aspects\n \n-            if not Impl_Defined_Aspects (A_Id) then\n+            if not Implementation_Defined_Aspect (A_Id) then\n                Error_Msg_Name_1 := Nam;\n \n                --  Not allowed for renaming declarations"}, {"sha": "9a687dbfaa77c80e3d05fd9b023c9e509eed7a98", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7049fd649430ab0d377546585a9907d62b2655/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7049fd649430ab0d377546585a9907d62b2655/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=9a7049fd649430ab0d377546585a9907d62b2655", "patch": "@@ -3404,14 +3404,7 @@ package body Sem_Ch3 is\n \n             Set_Is_Constr_Subt_For_U_Nominal (Act_T);\n \n-            --  If the expression is a source entity its type is defined\n-            --  elsewhere. Otherwise it is a just-created subtype, and the\n-            --  back-end may need to create a template for it.\n-\n-            if Aliased_Present (N)\n-              and then (not Is_Entity_Name (E)\n-                         or else not Comes_From_Source (E))\n-            then\n+            if Aliased_Present (N) then\n                Set_Is_Constr_Subt_For_UN_Aliased (Act_T);\n             end if;\n "}]}