{"sha": "e392d367936c4ccf9a8378f56bafd4c7af6d94dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM5MmQzNjc5MzZjNGNjZjlhODM3OGY1NmJhZmQ0YzdhZjZkOTRkZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-01-03T16:44:55Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-01-03T16:44:55Z"}, "message": "h8300-protos.h: Add a prototype for h8300_current_function_interrupt_function_p.\n\n\t* config/h8300/h8300-protos.h: Add a prototype for\n\th8300_current_function_interrupt_function_p.\n\t* config/h8300/h8300.c (interrupt_handler): Remove.\n\t(os_task): Likewise.\n\t(monitor): Likewise.\n\t(pragma_interrupt): New.\n\t(WORD_REG_USED): Use\n\th8300_current_function_interrupt_function_p.\n\t(dosize): Likewise.\n\t(h8300_output_function_prologue): Likewise.\n\tDo not set interrupt_handler, os_task, monitor.\n\t(h8300_output_function_prologue): Use\n\th8300_current_function_interrupt_function_p.\n\tDo not set interrupt_handler, os_task, monitor.\n\t(h8300_current_function_interrupt_function_p): New.\n\t(h8300_pr_interrupt): Set pragma_interrupt.\n\t(h8300_insert_attributes): Reset pragma_interrupt.\n\nFrom-SVN: r60836", "tree": {"sha": "3ffd02fb5cbafc3c40d562c6600cc7497a8473c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ffd02fb5cbafc3c40d562c6600cc7497a8473c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e392d367936c4ccf9a8378f56bafd4c7af6d94dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e392d367936c4ccf9a8378f56bafd4c7af6d94dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e392d367936c4ccf9a8378f56bafd4c7af6d94dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e392d367936c4ccf9a8378f56bafd4c7af6d94dd/comments", "author": null, "committer": null, "parents": [{"sha": "d3974db05a7a0f19df74c4b9938ad71810309837", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3974db05a7a0f19df74c4b9938ad71810309837", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3974db05a7a0f19df74c4b9938ad71810309837"}], "stats": {"total": 74, "additions": 44, "deletions": 30}, "files": [{"sha": "df4f2b161164c69c7936f0e529a78f1956780346", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e392d367936c4ccf9a8378f56bafd4c7af6d94dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e392d367936c4ccf9a8378f56bafd4c7af6d94dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e392d367936c4ccf9a8378f56bafd4c7af6d94dd", "patch": "@@ -1,3 +1,23 @@\n+2003-01-03  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300-protos.h: Add a prototype for\n+\th8300_current_function_interrupt_function_p.\n+\t* config/h8300/h8300.c (interrupt_handler): Remove.\n+\t(os_task): Likewise.\n+\t(monitor): Likewise.\n+\t(pragma_interrupt): New.\n+\t(WORD_REG_USED): Use\n+\th8300_current_function_interrupt_function_p.\n+\t(dosize): Likewise.\n+\t(h8300_output_function_prologue): Likewise.\n+\tDo not set interrupt_handler, os_task, monitor.\n+\t(h8300_output_function_prologue): Use\n+\th8300_current_function_interrupt_function_p.\n+\tDo not set interrupt_handler, os_task, monitor.\n+\t(h8300_current_function_interrupt_function_p): New.\n+\t(h8300_pr_interrupt): Set pragma_interrupt.\n+\t(h8300_insert_attributes): Reset pragma_interrupt.\n+\n 2003-01-03  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n \n \t* doc/install.texi (Configuration): Fix markup for reference to"}, {"sha": "1ea1ab2664ae44f4fb052a0800bab652df74aed7", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e392d367936c4ccf9a8378f56bafd4c7af6d94dd/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e392d367936c4ccf9a8378f56bafd4c7af6d94dd/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=e392d367936c4ccf9a8378f56bafd4c7af6d94dd", "patch": "@@ -90,6 +90,7 @@ extern int h8300_tiny_data_p PARAMS ((tree));\n #endif /* TREE_CODE */\n \n extern void h8300_init_once PARAMS ((void));\n+extern int h8300_current_function_interrupt_function_p PARAMS ((void));\n extern void asm_file_start PARAMS ((FILE *));\n extern void asm_file_end PARAMS ((FILE *));\n extern int h8300_initial_elimination_offset PARAMS ((int, int));"}, {"sha": "5e4063cf53c551713e6fd020c6f8f94cb903e509", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 23, "deletions": 30, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e392d367936c4ccf9a8378f56bafd4c7af6d94dd/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e392d367936c4ccf9a8378f56bafd4c7af6d94dd/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=e392d367936c4ccf9a8378f56bafd4c7af6d94dd", "patch": "@@ -74,17 +74,8 @@ static const char *h8300_strip_name_encoding PARAMS ((const char *));\n /* CPU_TYPE, says what cpu we're compiling for.  */\n int cpu_type;\n \n-/* True if the current function is an interrupt handler\n-   (either via #pragma or an attribute specification).  */\n-static int interrupt_handler;\n-\n-/* True if the current function is an OS Task\n-   (via an attribute specification).  */\n-static int os_task;\n-\n-/* True if the current function is a monitor\n-   (via an attribute specification).  */\n-static int monitor;\n+/* True if a #pragma interrupt has been seen for the current function.  */\n+static int pragma_interrupt;\n \n /* True if a #pragma saveall has been seen for the current function.  */\n static int pragma_saveall;\n@@ -383,10 +374,11 @@ byte_reg (x, b)\n        /* Save the frame pointer if it was used.  */\t\t\t\\\n        || (regno == FRAME_POINTER_REGNUM && regs_ever_live[regno])\t\\\n        /* Save any register used in an interrupt handler.  */\t\t\\\n-       || (interrupt_handler && regs_ever_live[regno])\t\t\t\\\n+       || (h8300_current_function_interrupt_function_p ()\t\t\\\n+\t   && regs_ever_live[regno])\t\t\t\t\t\\\n        /* Save call clobbered registers in non-leaf interrupt\t\t\\\n \t  handlers.  */\t\t\t\t\t\t\t\\\n-       || (interrupt_handler\t\t\t\t\t\t\\\n+       || (h8300_current_function_interrupt_function_p ()\t\t\\\n \t   && call_used_regs[regno]\t\t\t\t\t\\\n \t   && !current_function_is_leaf)))\n \n@@ -408,7 +400,7 @@ dosize (file, sign, size)\n      subs since this shouldn't happen often.  */\n   if ((TARGET_H8300 && size <= 4)\n       || ((TARGET_H8300H || TARGET_H8300S) && size <= 8)\n-      || (TARGET_H8300 && interrupt_handler)\n+      || (TARGET_H8300 && h8300_current_function_interrupt_function_p ())\n       || (TARGET_H8300 && current_function_needs_context\n \t  && sign < 0))\n     {\n@@ -530,17 +522,11 @@ h8300_output_function_prologue (file, size)\n   int saved_regs;\n   int n_regs;\n \n-  /* Note a function with the interrupt attribute and set interrupt_handler\n-     accordingly.  */\n-  if (h8300_interrupt_function_p (current_function_decl))\n-    interrupt_handler = 1;\n-\n   /* If the current function has the OS_Task attribute set, then\n      we have a naked prologue.  */\n   if (h8300_os_task_function_p (current_function_decl))\n     {\n       fprintf (file, \";OS_Task prologue\\n\");\n-      os_task = 1;\n       return;\n     }\n \n@@ -550,8 +536,6 @@ h8300_output_function_prologue (file, size)\n \t like interrupt functions, except the prologue must\n \t mask interrupts.  */\n       fprintf (file, \";monitor prologue\\n\");\n-      interrupt_handler = 1;\n-      monitor = 1;\n       if (TARGET_H8300)\n \t{\n \t  fprintf (file, \"\\tsubs\\t#2,sp\\n\");\n@@ -657,7 +641,7 @@ h8300_output_function_epilogue (file, size)\n   int saved_regs;\n   int n_regs;\n \n-  if (os_task)\n+  if (h8300_os_task_function_p (current_function_decl))\n     {\n       /* OS_Task epilogues are nearly naked -- they just have an\n \t rts instruction.  */\n@@ -668,7 +652,7 @@ h8300_output_function_epilogue (file, size)\n \n   /* Monitor epilogues are the same as interrupt function epilogues.\n      Just make a note that we're in a monitor epilogue.  */\n-  if (monitor)\n+  if (h8300_monitor_function_p (current_function_decl))\n     fprintf (file, \";monitor epilogue\\n\");\n \n   /* If the last insn was a BARRIER, we don't have to write any code.  */\n@@ -733,18 +717,25 @@ h8300_output_function_epilogue (file, size)\n   if (frame_pointer_needed)\n     pop (file, FRAME_POINTER_REGNUM);\n \n-  if (interrupt_handler)\n+  if (h8300_current_function_interrupt_function_p ())\n     fprintf (file, \"\\trte\\n\");\n   else\n     fprintf (file, \"\\trts\\n\");\n \n  out:\n-  interrupt_handler = 0;\n-  os_task = 0;\n-  monitor = 0;\n   pragma_saveall = 0;\n }\n \n+/* Return nonzero if the current function is an interrupt\n+   function.  */\n+\n+int\n+h8300_current_function_interrupt_function_p ()\n+{\n+  return (h8300_interrupt_function_p (current_function_decl)\n+\t  || h8300_monitor_function_p (current_function_decl));\n+}\n+\n /* Output assembly code for the start of the file.  */\n \n void\n@@ -1078,7 +1069,7 @@ void\n h8300_pr_interrupt (pfile)\n      struct cpp_reader *pfile ATTRIBUTE_UNUSED;\n {\n-  interrupt_handler = 1;\n+  pragma_interrupt = 1;\n }\n \n void\n@@ -3878,10 +3869,12 @@ h8300_insert_attributes (node, attributes)\n      tree node;\n      tree *attributes;\n {\n-  if (!interrupt_handler\n+  if (!pragma_interrupt\n       || TREE_CODE (node) != FUNCTION_DECL)\n     return;\n \n+  pragma_interrupt = 0;\n+\n   /* Add an 'interrupt_handler' attribute.  */\n   *attributes = tree_cons (get_identifier (\"interrupt_handler\"),\n \t\t\t   NULL, *attributes);"}]}