{"sha": "9c0c77d279c6f0ea6c9d687dd9f7a1b5080b5d31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMwYzc3ZDI3OWM2ZjBlYTZjOWQ2ODdkZDlmN2ExYjUwODBiNWQzMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-02-09T07:47:07Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-02-09T07:47:07Z"}, "message": "re PR tree-optimization/69823 (internal compiler error: in create_pw_aff_from_tree, at graphite-sese-to-poly.c:445)\n\n2017-02-09  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/69823\n\t* graphite-scop-detection.c (scop_detection::harmful_loop_in_region):\n\tProperly enumerate all BBs in the region.  Use auto_vec/auto_bitmap.\n\n\t* gcc.dg/graphite/pr69823.c: New testcase.\n\nFrom-SVN: r245295", "tree": {"sha": "72c926305ff123ca491ea3b041191a8c89bf8d6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72c926305ff123ca491ea3b041191a8c89bf8d6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c0c77d279c6f0ea6c9d687dd9f7a1b5080b5d31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0c77d279c6f0ea6c9d687dd9f7a1b5080b5d31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c0c77d279c6f0ea6c9d687dd9f7a1b5080b5d31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0c77d279c6f0ea6c9d687dd9f7a1b5080b5d31/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3a9abd2302fd87b38ed5a02a998560a5a58c9255", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a9abd2302fd87b38ed5a02a998560a5a58c9255", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a9abd2302fd87b38ed5a02a998560a5a58c9255"}], "stats": {"total": 79, "additions": 44, "deletions": 35}, "files": [{"sha": "fcbb10ce4eecdf91b414293fc311f132d4938b27", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0c77d279c6f0ea6c9d687dd9f7a1b5080b5d31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0c77d279c6f0ea6c9d687dd9f7a1b5080b5d31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c0c77d279c6f0ea6c9d687dd9f7a1b5080b5d31", "patch": "@@ -1,3 +1,9 @@\n+2017-02-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69823\n+\t* graphite-scop-detection.c (scop_detection::harmful_loop_in_region):\n+\tProperly enumerate all BBs in the region.  Use auto_vec/auto_bitmap.\n+\n 2017-02-09  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* config/arc/arc-c.def: Add __NPS400__ definition."}, {"sha": "c372141addf5968902a5297a6acd42c3c678ac92", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 13, "deletions": 35, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0c77d279c6f0ea6c9d687dd9f7a1b5080b5d31/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0c77d279c6f0ea6c9d687dd9f7a1b5080b5d31/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=9c0c77d279c6f0ea6c9d687dd9f7a1b5080b5d31", "patch": "@@ -1062,35 +1062,18 @@ scop_detection::harmful_loop_in_region (sese_l scop) const\n \t       print_sese (dump_file, scop));\n   gcc_assert (dominated_by_p (CDI_DOMINATORS, exit_bb, entry_bb));\n \n-  int depth = bb_dom_dfs_in (CDI_DOMINATORS, exit_bb)\n-    - bb_dom_dfs_in (CDI_DOMINATORS, entry_bb);\n+  auto_vec<basic_block> worklist;\n+  auto_bitmap loops;\n \n-  gcc_assert (depth > 0);\n-\n-  vec<basic_block> dom\n-      = get_dominated_to_depth (CDI_DOMINATORS, entry_bb, depth);\n-  int i;\n-  basic_block bb;\n-  bitmap loops = BITMAP_ALLOC (NULL);\n-  FOR_EACH_VEC_ELT (dom, i, bb)\n+  worklist.safe_push (entry_bb);\n+  while (! worklist.is_empty ())\n     {\n+      basic_block bb = worklist.pop ();\n       DEBUG_PRINT (dp << \"Visiting bb_\" << bb->index << \"\\n\");\n \n-      /* We don't want to analyze any bb outside sese.  */\n-      if (!dominated_by_p (CDI_POST_DOMINATORS, bb, exit_bb))\n-\tcontinue;\n-\n-      /* Basic blocks dominated by the scop->exit are not in the scop.  */\n-      if (bb != exit_bb && dominated_by_p (CDI_DOMINATORS, bb, exit_bb))\n-\tcontinue;\n-\n       /* The basic block should not be part of an irreducible loop.  */\n       if (bb->flags & BB_IRREDUCIBLE_LOOP)\n-\t{\n-\t  dom.release ();\n-\t  BITMAP_FREE (loops);\n-\t  return true;\n-\t}\n+\treturn true;\n \n       /* Check for unstructured control flow: CFG not generated by structured\n \t if-then-else.  */\n@@ -1114,13 +1097,14 @@ scop_detection::harmful_loop_in_region (sese_l scop) const\n \t     any loop fully contained in the scop: other bbs are checked below\n \t     in loop_is_valid_in_scop.  */\n \t  if (harmful_stmt_in_bb (scop, bb))\n-\t    {\n-\t      dom.release ();\n-\t      BITMAP_FREE (loops);\n-\t      return true;\n-\t    }\n+\t    return true;\n \t}\n \n+      if (bb != exit_bb)\n+\tfor (basic_block dom = first_dom_son (CDI_DOMINATORS, bb);\n+\t     dom;\n+\t     dom = next_dom_son (CDI_DOMINATORS, dom))\n+\t  worklist.safe_push (dom);\n     }\n \n   /* Go through all loops and check that they are still valid in the combined\n@@ -1133,15 +1117,9 @@ scop_detection::harmful_loop_in_region (sese_l scop) const\n       gcc_assert (loop->num == (int) j);\n \n       if (!loop_is_valid_in_scop (loop, scop))\n-\t{\n-\t  dom.release ();\n-\t  BITMAP_FREE (loops);\n-\t  return true;\n-\t}\n+\treturn true;\n     }\n \n-  dom.release ();\n-  BITMAP_FREE (loops);\n   return false;\n }\n "}, {"sha": "aeba293c41d2e35cd245bdefeadaebf3198f76c4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0c77d279c6f0ea6c9d687dd9f7a1b5080b5d31/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0c77d279c6f0ea6c9d687dd9f7a1b5080b5d31/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c0c77d279c6f0ea6c9d687dd9f7a1b5080b5d31", "patch": "@@ -1,3 +1,8 @@\n+2017-02-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69823\n+\t* gcc.dg/graphite/pr69823.c: New testcase.\n+\n 2017-02-08  Pat Haugen  <pthaugen@us.ibm.com>\n \n \tPR target/78604"}, {"sha": "6f2d35e5aabaf5d08b3b0b1d30cf70066c001cd0", "filename": "gcc/testsuite/gcc.dg/graphite/pr69823.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0c77d279c6f0ea6c9d687dd9f7a1b5080b5d31/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr69823.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0c77d279c6f0ea6c9d687dd9f7a1b5080b5d31/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr69823.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr69823.c?ref=9c0c77d279c6f0ea6c9d687dd9f7a1b5080b5d31", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -floop-nest-optimize\" } */\n+\n+void\n+foo (int c, int *p, int *a1, int *a2, int *a3)\n+{\n+  int i;\n+\n+  if (c)\n+    {\n+      for (i = 0; i < 8; i++)\n+\ta1[i] = 1;\n+\n+      if (*p)\n+\t*a2 = 0;\n+    }\n+\n+  for (i = 0; i < 8; i++)\n+    a3[i] = 0;\n+}"}]}