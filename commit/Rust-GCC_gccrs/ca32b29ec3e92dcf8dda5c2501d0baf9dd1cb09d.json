{"sha": "ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "node_id": "C_kwDOANBUbNoAKGNhMzJiMjllYzNlOTJkY2Y4ZGRhNWMyNTAxZDBiYWY5ZGQxY2IwOWQ", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-13T17:46:26Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-05-16T08:38:46Z"}, "message": "Use more ARRAY_SIZE.\n\ngcc/ada/ChangeLog:\n\n\t* locales.c (iso_639_1_to_639_3): Use ARRAY_SIZE.\n\t(language_name_to_639_3): Likewise.\n\t(country_name_to_3166): Likewise.\n\ngcc/analyzer/ChangeLog:\n\n\t* engine.cc (exploded_node::get_dot_fillcolor): Use ARRAY_SIZE.\n\t* function-set.cc (test_stdio_example): Likewise.\n\t* sm-file.cc (get_file_using_fns): Likewise.\n\t* sm-malloc.cc (malloc_state_machine::unaffected_by_call_p): Likewise.\n\t* sm-signal.cc (get_async_signal_unsafe_fns): Likewise.\n\ngcc/ChangeLog:\n\n\t* attribs.cc (diag_attr_exclusions): Use ARRAY_SIZE.\n\t(decls_mismatched_attributes): Likewise.\n\t* builtins.cc (c_strlen): Likewise.\n\t* cfg.cc (DEF_BASIC_BLOCK_FLAG): Likewise.\n\t* common/config/aarch64/aarch64-common.cc (aarch64_option_init_struct): Likewise.\n\t* config/aarch64/aarch64-builtins.cc (aarch64_lookup_simd_builtin_type): Likewise.\n\t(aarch64_init_simd_builtin_types): Likewise.\n\t(aarch64_init_builtin_rsqrt): Likewise.\n\t* config/aarch64/aarch64.cc (is_madd_op): Likewise.\n\t* config/arm/arm-builtins.cc (arm_lookup_simd_builtin_type): Likewise.\n\t(arm_init_simd_builtin_types): Likewise.\n\t* config/avr/gen-avr-mmcu-texi.cc (mcus[ARRAY_SIZE): Likewise.\n\t(c_prefix): Likewise.\n\t(main): Likewise.\n\t* config/c6x/c6x.cc (N_SAVE_ORDER): Likewise.\n\t* config/darwin-c.cc (darwin_register_frameworks): Likewise.\n\t* config/gcn/mkoffload.cc (process_obj): Likewise.\n\t* config/i386/i386-builtins.cc (get_builtin_code_for_version): Likewise.\n\t(fold_builtin_cpu): Likewise.\n\t* config/m32c/m32c.cc (PUSHM_N): Likewise.\n\t* config/nvptx/mkoffload.cc (process): Likewise.\n\t* config/rs6000/driver-rs6000.cc (host_detect_local_cpu): Likewise.\n\t* config/s390/s390.cc (NR_C_MODES): Likewise.\n\t* config/tilepro/gen-mul-tables.cc (find_sequences): Likewise.\n\t(create_insn_code_compression_table): Likewise.\n\t* config/vms/vms.cc (NBR_CRTL_NAMES): Likewise.\n\t* diagnostic-format-json.cc (json_from_expanded_location): Likewise.\n\t* dwarf2out.cc (ARRAY_SIZE): Likewise.\n\t* genhooks.cc (emit_documentation): Likewise.\n\t(emit_init_macros): Likewise.\n\t* gimple-ssa-sprintf.cc (format_floating): Likewise.\n\t* gimple-ssa-warn-access.cc (memmodel_name): Likewise.\n\t* godump.cc (keyword_hash_init): Likewise.\n\t* hash-table.cc (hash_table_higher_prime_index): Likewise.\n\t* input.cc (for_each_line_table_case): Likewise.\n\t* ipa-free-lang-data.cc (free_lang_data): Likewise.\n\t* ipa-inline.cc (sanitize_attrs_match_for_inline_p): Likewise.\n\t* optc-save-gen.awk: Likewise.\n\t* spellcheck.cc (test_metric_conditions): Likewise.\n\t* tree-vect-slp-patterns.cc (sizeof): Likewise.\n\t(ARRAY_SIZE): Likewise.\n\t* tree.cc (build_common_tree_nodes): Likewise.\n\ngcc/c-family/ChangeLog:\n\n\t* c-common.cc (ARRAY_SIZE): Use ARRAY_SIZE.\n\t(c_common_nodes_and_builtins): Likewise.\n\t* c-format.cc (check_tokens): Likewise.\n\t(check_plain): Likewise.\n\t* c-pragma.cc (c_pp_lookup_pragma): Likewise.\n\t(init_pragma): Likewise.\n\t* known-headers.cc (get_string_macro_hint): Likewise.\n\t(get_stdlib_header_for_name): Likewise.\n\t* c-attribs.cc: Likewise.\n\ngcc/c/ChangeLog:\n\n\t* c-decl.cc (match_builtin_function_types): Use ARRAY_SIZE.\n\ngcc/cp/ChangeLog:\n\n\t* module.cc (depset::entity_kind_name): Use ARRAY_SIZE.\n\t* name-lookup.cc (get_std_name_hint): Likewise.\n\t* parser.cc (cp_parser_new): Likewise.\n\ngcc/fortran/ChangeLog:\n\n\t* frontend-passes.cc (gfc_code_walker): Use ARRAY_SIZE.\n\t* openmp.cc (gfc_match_omp_context_selector_specification): Likewise.\n\t* trans-intrinsic.cc (conv_intrinsic_ieee_builtin): Likewise.\n\t* trans-types.cc (gfc_get_array_descr_info): Likewise.\n\ngcc/jit/ChangeLog:\n\n\t* jit-builtins.cc (find_builtin_by_name): Use ARRAY_SIZE.\n\t(get_string_for_type_id): Likewise.\n\t* jit-recording.cc (recording::context::context): Likewise.\n\ngcc/lto/ChangeLog:\n\n\t* lto-common.cc (lto_resolution_read): Use ARRAY_SIZE.\n\t* lto-lang.cc (lto_init): Likewise.", "tree": {"sha": "6a832b897b459fde27de4725ccce563deb22825c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a832b897b459fde27de4725ccce563deb22825c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4fb9f4f9a10d825302cfb5a0ecefa796570d8bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4fb9f4f9a10d825302cfb5a0ecefa796570d8bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4fb9f4f9a10d825302cfb5a0ecefa796570d8bc"}], "stats": {"total": 215, "additions": 94, "deletions": 121}, "files": [{"sha": "01cb45bc21f08f33327491c0563b07a042ea0e87", "filename": "gcc/ada/locales.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fada%2Flocales.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fada%2Flocales.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flocales.c?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -35,6 +35,8 @@\n #include <ctype.h>\n #include <stddef.h>\n \n+#define ARRAY_SIZE(a) (sizeof (a) / sizeof ((a)[0]))\n+\n typedef char char4 [4];\n \n /* Table containing equivalences between ISO_639_1 codes and their ISO_639_3\n@@ -649,7 +651,7 @@ str_get_last_byte (char *lc_all) {\n \n static char*\n iso_639_1_to_639_3(char* iso_639_1_code) {\n-  int len = sizeof(iso_639)/sizeof(iso_639[0]);\n+  int len = ARRAY_SIZE (iso_639);\n   char **p = iso_639;\n   int j;\n \n@@ -673,7 +675,7 @@ iso_639_1_to_639_3(char* iso_639_1_code) {\n \n static char*\n language_name_to_639_3(char* name) {\n-  int len = sizeof(iso_639)/sizeof(iso_639[0]);\n+  int len = ARRAY_SIZE (iso_639);\n   char **p = iso_639;\n   int j;\n \n@@ -695,7 +697,7 @@ language_name_to_639_3(char* name) {\n \n static char*\n country_name_to_3166 (char* name) {\n-  int len = sizeof(iso_3166)/sizeof(iso_3166[0]);\n+  int len = ARRAY_SIZE (iso_3166);\n   char **p = iso_3166;\n   int j;\n "}, {"sha": "24dd5983230a09cf99846ddaef6886972a7c4d62", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -1139,7 +1139,7 @@ exploded_node::get_dot_fillcolor () const\n \t= {\"azure\", \"coral\", \"cornsilk\", \"lightblue\", \"yellow\",\n \t   \"honeydew\", \"lightpink\", \"lightsalmon\", \"palegreen1\",\n \t   \"wheat\", \"seashell\"};\n-      const int num_colors = sizeof (colors) / sizeof (colors[0]);\n+      const int num_colors = ARRAY_SIZE (colors);\n       return colors[total_sm_state % num_colors];\n     }\n   else"}, {"sha": "be04186ed0dc7d83110eb101f17497f34c8faa57", "filename": "gcc/analyzer/function-set.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fanalyzer%2Ffunction-set.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fanalyzer%2Ffunction-set.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Ffunction-set.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -166,7 +166,7 @@ test_stdio_example ()\n     \"getwc_unlocked\",\n     \"putc_unlocked\"\n   };\n-  const size_t count = sizeof(example) / sizeof (example[0]);\n+  const size_t count = ARRAY_SIZE (example);\n   function_set fs (example, count);\n   fs.assert_sorted ();\n   fs.assert_sane ();"}, {"sha": "3a45e627b35b5498319f1bdc08d945da3962a801", "filename": "gcc/analyzer/sm-file.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fanalyzer%2Fsm-file.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fanalyzer%2Fsm-file.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-file.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -329,8 +329,7 @@ get_file_using_fns ()\n     \"ungetc\",\n     \"vfprintf\"\n   };\n-  const size_t count\n-    = sizeof(funcnames) / sizeof (funcnames[0]);\n+  const size_t count = ARRAY_SIZE (funcnames);\n   function_set fs (funcnames, count);\n   return fs;\n }"}, {"sha": "20c1677c498ccda2e4a2ccd7c80bc3c90f121cd4", "filename": "gcc/analyzer/sm-malloc.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fanalyzer%2Fsm-malloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fanalyzer%2Fsm-malloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-malloc.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -2054,8 +2054,7 @@ malloc_state_machine::unaffected_by_call_p (tree fndecl)\n     /* This array must be kept sorted.  */\n     \"strsep\",\n   };\n-  const size_t count\n-    = sizeof(funcnames) / sizeof (funcnames[0]);\n+  const size_t count = ARRAY_SIZE (funcnames);\n   function_set fs (funcnames, count);\n \n   if (fs.contains_decl_p (fndecl))"}, {"sha": "9b0213e89b755e9d667ae49cdd5229546f0d966e", "filename": "gcc/analyzer/sm-signal.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fanalyzer%2Fsm-signal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fanalyzer%2Fsm-signal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-signal.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -309,8 +309,7 @@ get_async_signal_unsafe_fns ()\n     \"vsnprintf\",\n     \"vsprintf\"\n   };\n-  const size_t count\n-    = sizeof(async_signal_unsafe_fns) / sizeof (async_signal_unsafe_fns[0]);\n+  const size_t count = ARRAY_SIZE (async_signal_unsafe_fns);\n   function_set fs (async_signal_unsafe_fns, count);\n   return fs;\n }"}, {"sha": "6d4a30dc41258485de121e1c15c749813457f50e", "filename": "gcc/attribs.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fattribs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fattribs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -499,7 +499,7 @@ diag_attr_exclusions (tree last_decl, tree node, tree attrname,\n \n   /* Iterate over the mutually exclusive attribute names and verify\n      that the symbol doesn't contain it.  */\n-  for (unsigned i = 0; i != sizeof attrs / sizeof *attrs; ++i)\n+  for (unsigned i = 0; i != ARRAY_SIZE (attrs); ++i)\n     {\n       if (!attrs[i])\n \tcontinue;\n@@ -2106,7 +2106,7 @@ decls_mismatched_attributes (tree tmpl, tree decl, tree attrlist,\n   };\n \n   for (unsigned i = 0; i != 2; ++i)\n-    for (unsigned j = 0; j != sizeof whitelist / sizeof *whitelist; ++j)\n+    for (unsigned j = 0; j != ARRAY_SIZE (whitelist); ++j)\n       if (lookup_attribute (whitelist[j], tmpl_attrs[i])\n \t  || lookup_attribute (whitelist[j], decl_attrs[i]))\n \treturn 0;"}, {"sha": "b9d89b409b8f5527bc524b52b13ab85d8b98fdb4", "filename": "gcc/builtins.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fbuiltins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fbuiltins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -613,7 +613,7 @@ c_strlen (tree arg, int only_value, c_strlen_data *data, unsigned eltsize)\n   if (eltsize != tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (src)))))\n     return NULL_TREE;\n \n-  /* Set MAXELTS to sizeof (SRC) / sizeof (*SRC) - 1, the maximum possible\n+  /* Set MAXELTS to ARRAY_SIZE (SRC) - 1, the maximum possible\n      length of SRC.  Prefer TYPE_SIZE() to TREE_STRING_LENGTH() if possible\n      in case the latter is less than the size of the array, such as when\n      SRC refers to a short string literal used to initialize a large array."}, {"sha": "e50e79e0cd1ceace86a6266216e929cb47c9a6e6", "filename": "gcc/c-family/c-attribs.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fc-family%2Fc-attribs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fc-family%2Fc-attribs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -4952,8 +4952,7 @@ handle_access_attribute (tree node[3], tree name, tree args, int flags,\n   int imode;\n \n   {\n-    const int nmodes =\n-      sizeof attr_access::mode_names / sizeof *attr_access::mode_names;\n+    const int nmodes = ARRAY_SIZE (attr_access::mode_names);\n \n     for (imode = 0; imode != nmodes; ++imode)\n       if (!strncmp (ps, attr_access::mode_names[imode],"}, {"sha": "c9c9e720bc806abd83a7bc0a61b609369e07456f", "filename": "gcc/c-family/c-common.cc", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fc-family%2Fc-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fc-family%2Fc-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -602,8 +602,7 @@ const struct c_common_resword c_common_reswords[] =\n   { \"null_resettable\",\tRID_NULL_RESETTABLE,\tD_OBJC },\n };\n \n-const unsigned int num_c_common_reswords =\n-  sizeof c_common_reswords / sizeof (struct c_common_resword);\n+const unsigned int num_c_common_reswords = ARRAY_SIZE (c_common_reswords);\n \n /* Return identifier for address space AS.  */\n \n@@ -4482,9 +4481,7 @@ c_common_nodes_and_builtins (void)\n \n   /* Make fileptr_type_node a distinct void * type until\n      FILE type is defined.  Likewise for const struct tm*.  */\n-  for (unsigned i = 0;\n-       i < sizeof (builtin_structptr_types) / sizeof (builtin_structptr_type);\n-       ++i)\n+  for (unsigned i = 0; i < ARRAY_SIZE (builtin_structptr_types); ++i)\n     builtin_structptr_types[i].node\n       = build_variant_type_copy (builtin_structptr_types[i].base);\n "}, {"sha": "25b1c1d0f15d4bb0cb1bbf19e048513348517e15", "filename": "gcc/c-family/c-format.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fc-family%2Fc-format.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fc-family%2Fc-format.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -3189,7 +3189,7 @@ check_tokens (const token_t *tokens, unsigned ntoks,\n   else\n     {\n       /* Diagnose some common misspellings.  */\n-      for (unsigned i = 0; i != sizeof badwords / sizeof *badwords; ++i)\n+      for (unsigned i = 0; i != ARRAY_SIZE (badwords); ++i)\n \t{\n \t  unsigned badwlen = strspn (badwords[i].name, \" -\");\n \t  if (wlen >= badwlen\n@@ -3384,14 +3384,14 @@ check_plain (location_t format_string_loc, tree format_string_cst,\n \n   if (ISPUNCT (format_chars[0]))\n     {\n-      size_t nelts = sizeof c_opers / sizeof *c_opers;\n+      size_t nelts = ARRAY_SIZE (c_opers);\n       if (const char *ret = check_tokens (c_opers, nelts,\n \t\t\t\t\t  format_string_loc, format_string_cst,\n \t\t\t\t\t  orig_format_chars, format_chars,\n \t\t\t\t\t  baltoks))\n \treturn ret;\n \n-      nelts = c_dialect_cxx () ? sizeof cxx_opers / sizeof *cxx_opers : 0;\n+      nelts = c_dialect_cxx () ? ARRAY_SIZE (cxx_opers) : 0;\n       if (const char *ret = check_tokens (cxx_opers, nelts,\n \t\t\t\t\t  format_string_loc, format_string_cst,\n \t\t\t\t\t  orig_format_chars, format_chars,\n@@ -3401,14 +3401,14 @@ check_plain (location_t format_string_loc, tree format_string_cst,\n \n   if (ISALPHA (format_chars[0]))\n     {\n-      size_t nelts = sizeof c_keywords / sizeof *c_keywords;\n+      size_t nelts = ARRAY_SIZE (c_keywords);\n       if (const char *ret = check_tokens (c_keywords, nelts,\n \t\t\t\t\t  format_string_loc, format_string_cst,\n \t\t\t\t\t  orig_format_chars, format_chars,\n \t\t\t\t\t  baltoks))\n \treturn ret;\n \n-      nelts = c_dialect_cxx () ? sizeof cxx_keywords / sizeof *cxx_keywords : 0;\n+      nelts = c_dialect_cxx () ? ARRAY_SIZE (cxx_keywords) : 0;\n       if (const char *ret = check_tokens (cxx_keywords, nelts,\n \t\t\t\t\t  format_string_loc, format_string_cst,\n \t\t\t\t\t  orig_format_chars, format_chars,\n@@ -3527,7 +3527,7 @@ check_plain (location_t format_string_loc, tree format_string_cst,\n \t  && ISALPHA (format_chars[1]))\n \t{\n \t  /* Diagnose a subset of contractions that are best avoided.  */\n-\t  for (unsigned i = 0; i != sizeof contrs / sizeof *contrs; ++i)\n+\t  for (unsigned i = 0; i != ARRAY_SIZE (contrs); ++i)\n \t    {\n \t      const char *apos = strchr (contrs[i].name, '\\'');\n \t      gcc_assert (apos != NULL);"}, {"sha": "cc05b2580fa1c11f632c0a55079535ef63942f63", "filename": "gcc/c-family/c-pragma.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fc-family%2Fc-pragma.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fc-family%2Fc-pragma.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -1400,8 +1400,8 @@ static const struct omp_pragma_def omp_pragmas_simd[] = {\n void\n c_pp_lookup_pragma (unsigned int id, const char **space, const char **name)\n {\n-  const int n_oacc_pragmas = sizeof (oacc_pragmas) / sizeof (*oacc_pragmas);\n-  const int n_omp_pragmas = sizeof (omp_pragmas) / sizeof (*omp_pragmas);\n+  const int n_oacc_pragmas = ARRAY_SIZE (oacc_pragmas);\n+  const int n_omp_pragmas = ARRAY_SIZE (omp_pragmas);\n   const int n_omp_pragmas_simd = sizeof (omp_pragmas_simd)\n \t\t\t\t / sizeof (*omp_pragmas);\n   int i;\n@@ -1576,8 +1576,7 @@ init_pragma (void)\n {\n   if (flag_openacc)\n     {\n-      const int n_oacc_pragmas\n-\t= sizeof (oacc_pragmas) / sizeof (*oacc_pragmas);\n+      const int n_oacc_pragmas = ARRAY_SIZE (oacc_pragmas);\n       int i;\n \n       for (i = 0; i < n_oacc_pragmas; ++i)\n@@ -1587,7 +1586,7 @@ init_pragma (void)\n \n   if (flag_openmp)\n     {\n-      const int n_omp_pragmas = sizeof (omp_pragmas) / sizeof (*omp_pragmas);\n+      const int n_omp_pragmas = ARRAY_SIZE (omp_pragmas);\n       int i;\n \n       for (i = 0; i < n_omp_pragmas; ++i)"}, {"sha": "01c86b27dc86c70c2af95e0845251905a0ecb619", "filename": "gcc/c-family/known-headers.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fc-family%2Fknown-headers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fc-family%2Fknown-headers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fknown-headers.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -79,8 +79,7 @@ get_string_macro_hint (const char *name, enum stdlib lib)\n   if ((lib == STDLIB_C && flag_isoc99)\n       || (lib == STDLIB_CPLUSPLUS && cxx_dialect >= cxx11 ))\n     {\n-      const size_t num_c99_cxx11_macros\n-\t= sizeof (c99_cxx11_macros) / sizeof (c99_cxx11_macros[0]);\n+      const size_t num_c99_cxx11_macros = ARRAY_SIZE (c99_cxx11_macros);\n       for (size_t i = 0; i < num_c99_cxx11_macros; i++)\n \tif (strcmp (name, c99_cxx11_macros[i]) == 0)\n \t  return lib == STDLIB_C ? \"<inttypes.h>\" : \"<cinttypes>\";\n@@ -204,7 +203,7 @@ get_stdlib_header_for_name (const char *name, enum stdlib lib)\n     {\"WCHAR_MAX\", {\"<wchar.h>\", \"<cwchar>\"} },\n     {\"WCHAR_MIN\", {\"<wchar.h>\", \"<cwchar>\"} }\n   };\n-  const size_t num_hints = sizeof (hints) / sizeof (hints[0]);\n+  const size_t num_hints = ARRAY_SIZE (hints);\n   for (size_t i = 0; i < num_hints; i++)\n     if (strcmp (name, hints[i].name) == 0)\n       return hints[i].header[lib];"}, {"sha": "e49879ab2864359babfbcf615a5644de91ba9856", "filename": "gcc/c/c-decl.cc", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fc%2Fc-decl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fc%2Fc-decl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -1658,7 +1658,7 @@ c_bind (location_t loc, tree decl, bool is_global)\n    Used only by match_builtin_function_types.  */\n \n static const unsigned builtin_structptr_type_count\n-  = sizeof builtin_structptr_types / sizeof builtin_structptr_types[0];\n+  = ARRAY_SIZE (builtin_structptr_types);\n \n static GTY(()) tree last_structptr_types[builtin_structptr_type_count];\n \n@@ -1705,10 +1705,8 @@ match_builtin_function_types (tree newtype, tree oldtype,\n   tree newargs = TYPE_ARG_TYPES (newtype);\n   tree tryargs = newargs;\n \n-  const unsigned nlst\n-    = sizeof last_structptr_types / sizeof last_structptr_types[0];\n-  const unsigned nbst\n-    = sizeof builtin_structptr_types / sizeof builtin_structptr_types[0];\n+  const unsigned nlst = ARRAY_SIZE (last_structptr_types);\n+  const unsigned nbst = ARRAY_SIZE (builtin_structptr_types);\n \n   gcc_checking_assert (nlst == nbst);\n "}, {"sha": "bbd01ba21bb084eee4feefb9eee547c4a3d1da98", "filename": "gcc/cfg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fcfg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fcfg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -787,7 +787,7 @@ dump_bb_info (FILE *outf, basic_block bb, int indent, dump_flags_t flags,\n       NULL\n #undef DEF_BASIC_BLOCK_FLAG\n     };\n-  const unsigned n_bitnames = sizeof (bb_bitnames) / sizeof (char *);\n+  const unsigned n_bitnames = ARRAY_SIZE (bb_bitnames);\n   bool first;\n   char *s_indent = (char *) alloca ((size_t) indent + 1);\n   memset ((void *) s_indent, ' ', (size_t) indent);"}, {"sha": "7fac90d313b4bd85991b64fc363550f0168828b1", "filename": "gcc/common/config/aarch64/aarch64-common.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -314,8 +314,7 @@ aarch64_option_init_struct (struct gcc_options *opts ATTRIBUTE_UNUSED)\n        pop and attribute change (arm_neon headers, lto etc all cause this to\n        happen quite frequently).  It is a trade-off between time and space and\n        so time won.  */\n-    int n_extensions\n-      = sizeof (all_extensions) / sizeof (struct aarch64_option_extension);\n+    int n_extensions = ARRAY_SIZE (all_extensions);\n     qsort (&all_extensions_by_on, n_extensions,\n \t   sizeof (struct aarch64_option_extension), opt_ext_cmp);\n }"}, {"sha": "e0a741ac663188713e21f457affa57217d074783", "filename": "gcc/config/aarch64/aarch64-builtins.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -832,7 +832,7 @@ aarch64_lookup_simd_builtin_type (machine_mode mode,\n \t\t\t\t  enum aarch64_type_qualifiers q)\n {\n   int i;\n-  int nelts = sizeof (aarch64_simd_types) / sizeof (aarch64_simd_types[0]);\n+  int nelts = ARRAY_SIZE (aarch64_simd_types);\n \n   /* Non-poly scalar modes map to standard types not in the table.  */\n   if (q != qualifier_poly && !VECTOR_MODE_P (mode))\n@@ -869,7 +869,7 @@ static void\n aarch64_init_simd_builtin_types (void)\n {\n   int i;\n-  int nelts = sizeof (aarch64_simd_types) / sizeof (aarch64_simd_types[0]);\n+  int nelts = ARRAY_SIZE (aarch64_simd_types);\n   tree tdecl;\n \n   /* Init all the element types built by the front-end.  */\n@@ -1434,7 +1434,7 @@ aarch64_init_builtin_rsqrt (void)\n   };\n \n   builtin_decls_data *bdd = bdda;\n-  builtin_decls_data *bdd_end = bdd + (sizeof (bdda) / sizeof (builtin_decls_data));\n+  builtin_decls_data *bdd_end = bdd + (ARRAY_SIZE (bdda));\n \n   for (; bdd < bdd_end; bdd++)\n   {"}, {"sha": "2902f94f9a46d4e1ee5ee5f9dfdf1285f63c5ea0", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -20755,7 +20755,7 @@ is_madd_op (enum attr_type t1)\n     TYPE_SMMLA, TYPE_UMLAL, TYPE_UMLALS,TYPE_SMLSD, TYPE_SMLSDX, TYPE_SMLSLD\n   };\n \n-  for (i = 0; i < sizeof (mlatypes) / sizeof (enum attr_type); i++)\n+  for (i = 0; i < ARRAY_SIZE (mlatypes); i++)\n     {\n       if (t1 == mlatypes[i])\n \treturn true;"}, {"sha": "d917137e5ee06193fc113ef69f3fff74649827a7", "filename": "gcc/config/arm/arm-builtins.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Farm%2Farm-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Farm%2Farm-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -1471,7 +1471,7 @@ arm_lookup_simd_builtin_type (machine_mode mode,\n \t\t\t      enum arm_type_qualifiers q)\n {\n   int i;\n-  int nelts = sizeof (arm_simd_types) / sizeof (arm_simd_types[0]);\n+  int nelts = ARRAY_SIZE (arm_simd_types);\n \n   /* Non-poly scalar modes map to standard types not in the table.  */\n   if (q != qualifier_poly && !VECTOR_MODE_P (mode))\n@@ -1503,7 +1503,7 @@ static void\n arm_init_simd_builtin_types (void)\n {\n   int i;\n-  int nelts = sizeof (arm_simd_types) / sizeof (arm_simd_types[0]);\n+  int nelts = ARRAY_SIZE (arm_simd_types);\n   tree tdecl;\n \n   /* Poly types are a world of their own.  In order to maintain legacy"}, {"sha": "a44e18e4c351a298ddea9bd45025d83e34627cb5", "filename": "gcc/config/avr/gen-avr-mmcu-texi.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-texi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-texi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-texi.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -23,10 +23,12 @@\n \n #define IN_GEN_AVR_MMCU_TEXI\n \n+#define ARRAY_SIZE(a) (sizeof (a) / sizeof ((a)[0]))\n+\n #include \"avr-devices.cc\"\n \n static const avr_mcu_t*\n-mcus[sizeof avr_mcu_types / sizeof avr_mcu_types[0]];\n+mcus[ARRAY_SIZE (avr_mcu_types)];\n \n static int letter (char c)\n {\n@@ -56,7 +58,7 @@ c_prefix (const char *str)\n       \"attiny\", \"atmega\", \"atxmega\", \"ata\", \"at90\"\n     };\n \n-  int i, n = (int) (sizeof (prefixes) / sizeof (*prefixes));\n+  int i, n = (int) (ARRAY_SIZE (prefixes));\n \n   for (i = 0; i < n; i++)\n     if (str_prefix_p (str, prefixes[i]))\n@@ -185,7 +187,7 @@ int main (void)\n \t  print_mcus (n_mcus);\n \t  n_mcus = 0;\n \n-\t  for (i = 0; i < sizeof (avr_texinfo) / sizeof (*avr_texinfo); i++)\n+\t  for (i = 0; i < ARRAY_SIZE (avr_texinfo); i++)\n \t    if (arch_id == avr_texinfo[i].arch_id)\n \t      printf (\"@item %s\\n%s\\n\", mcu->name, avr_texinfo[i].texinfo);\n \t}"}, {"sha": "dc01a6e47c44cf140791e40fce33c17aaf41df16", "filename": "gcc/config/c6x/c6x.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Fc6x%2Fc6x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Fc6x%2Fc6x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -2580,7 +2580,7 @@ static unsigned reg_save_order[] =\n   REG_B14, REG_A15\n };\n \n-#define N_SAVE_ORDER (sizeof reg_save_order / sizeof *reg_save_order)\n+#define N_SAVE_ORDER (ARRAY_SIZE (reg_save_order))\n \n /* Compute the layout of the stack frame and store it in FRAME.  */\n "}, {"sha": "9203c84d2c26c7ff0136884e9522604033f3bd99", "filename": "gcc/config/darwin-c.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Fdarwin-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Fdarwin-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-c.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -505,7 +505,7 @@ darwin_register_frameworks (const char *sysroot,\n       size_t i;\n \n       /* Setup default search path for frameworks.  */\n-      for (i=0; i<sizeof (framework_defaults)/sizeof(const char *); ++i)\n+      for (i = 0; i < ARRAY_SIZE (framework_defaults); ++i)\n \t{\n \t  char *str;\n \t  if (sysroot)"}, {"sha": "9db2124b12989f71fab5a052e3fc56dfe17294d6", "filename": "gcc/config/gcn/mkoffload.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Fgcn%2Fmkoffload.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Fgcn%2Fmkoffload.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fmkoffload.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -723,7 +723,7 @@ process_obj (FILE *in, FILE *cfile)\n \t   \"  unsigned global_variable_count;\\n\"\n \t   \"} target_data = {\\n\"\n \t   \"  &gcn_image,\\n\"\n-\t   \"  sizeof (gcn_kernels) / sizeof (gcn_kernels[0]),\\n\"\n+\t   \"  ARRAY_SIZE (gcn_kernels),\\n\"\n \t   \"  gcn_kernels,\\n\"\n \t   \"  gcn_num_vars\\n\"\n \t   \"};\\n\\n\");"}, {"sha": "96743e6122d9a1e20598f932f74f148ce53d262f", "filename": "gcc/config/i386/i386-builtins.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Fi386%2Fi386-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Fi386%2Fi386-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtins.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -1936,8 +1936,7 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n \n   enum feature_priority priority = P_NONE;\n \n-  static unsigned int NUM_FEATURES\n-    = sizeof (isa_names_table) / sizeof (_isa_names_table);\n+  static unsigned int NUM_FEATURES = ARRAY_SIZE (isa_names_table);\n \n   unsigned int i;\n \n@@ -2290,8 +2289,7 @@ fold_builtin_cpu (tree fndecl, tree *args)\n       tree final;\n \n       unsigned int field_val = 0;\n-      unsigned int NUM_ISA_NAMES\n-\t= sizeof (isa_names_table) / sizeof (struct _isa_names_table);\n+      unsigned int NUM_ISA_NAMES = ARRAY_SIZE (isa_names_table);\n \n       for (i = 0; i < NUM_ISA_NAMES; i++)\n \tif (strcmp (isa_names_table[i].name,"}, {"sha": "5a19faa063cffcef0cea52311b2afeea483ef65c", "filename": "gcc/config/m32c/m32c.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Fm32c%2Fm32c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Fm32c%2Fm32c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -1090,7 +1090,7 @@ static struct\n   { FB_REGNO, 0x01, 2, 4 }\n };\n \n-#define PUSHM_N (sizeof(pushm_info)/sizeof(pushm_info[0]))\n+#define PUSHM_N (ARRAY_SIZE (pushm_info))\n \n /* Returns TRUE if we need to save/restore the given register.  We\n    save everything for exception handlers, so that any register can be"}, {"sha": "fa3b4b768214eabaceb7881a0c04b1685cc2a122", "filename": "gcc/config/nvptx/mkoffload.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Fnvptx%2Fmkoffload.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Fnvptx%2Fmkoffload.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fmkoffload.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -316,11 +316,11 @@ process (FILE *in, FILE *out)\n \t   \"  const struct nvptx_fn *fn_names;\\n\"\n \t   \"  unsigned fn_num;\\n\"\n \t   \"} target_data = {\\n\"\n-\t   \"  ptx_objs, sizeof (ptx_objs) / sizeof (ptx_objs[0]),\\n\"\n+\t   \"  ptx_objs, ARRAY_SIZE (ptx_objs),\\n\"\n \t   \"  var_mappings,\"\n-\t   \"  sizeof (var_mappings) / sizeof (var_mappings[0]),\\n\"\n+\t   \"  ARRAY_SIZE (var_mappings),\\n\"\n \t   \"  func_mappings,\"\n-\t   \"  sizeof (func_mappings) / sizeof (func_mappings[0])\\n\"\n+\t   \"  ARRAY_SIZE (func_mappings)\\n\"\n \t   \"};\\n\\n\");\n \n   fprintf (out, \"#ifdef __cplusplus\\n\""}, {"sha": "b871f0a36a8a2e4a0bb62276475283d6b7d656dc", "filename": "gcc/config/rs6000/driver-rs6000.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Frs6000%2Fdriver-rs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Frs6000%2Fdriver-rs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdriver-rs6000.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -599,7 +599,7 @@ host_detect_local_cpu (int argc, const char **argv)\n \n   if (assembler)\n     {\n-      for (i = 0; i < sizeof (asm_names) / sizeof (asm_names[0]); i++)\n+      for (i = 0; i < ARRAY_SIZE (asm_names); i++)\n \t{\n \t  if (!asm_names[i].cpu || !strcmp (asm_names[i].cpu, cpu))\n \t    return asm_names[i].asm_sw;"}, {"sha": "d46aba66a917cbe8e1e7b48fbc30a897efc1d121", "filename": "gcc/config/s390/s390.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Fs390%2Fs390.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Fs390%2Fs390.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -8769,7 +8769,7 @@ static machine_mode constant_modes[] =\n   QImode,\n   V1QImode\n };\n-#define NR_C_MODES (sizeof (constant_modes) / sizeof (constant_modes[0]))\n+#define NR_C_MODES (ARRAY_SIZE (constant_modes))\n \n struct constant\n {"}, {"sha": "798766a723b7f0d3c54cd60533104680d4856def", "filename": "gcc/config/tilepro/gen-mul-tables.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Ftilepro%2Fgen-mul-tables.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Ftilepro%2Fgen-mul-tables.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Fgen-mul-tables.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -462,7 +462,7 @@ find_sequences (ExpressionTree &s, ExpressionTreeMap &best_solution)\n   const Operator *const prev_op = s.m_exprs[num_vals - 1].m_op;\n   const int prev_top_index = (prev_op != NULL) ? prev_op->m_top_index : -1;\n \n-  for (size_t f = 0; f < sizeof ops / sizeof ops[0]; f++)\n+  for (size_t f = 0; f < ARRAY_SIZE (ops); f++)\n     {\n       const Operator *const op = &ops[f];\n \n@@ -564,7 +564,7 @@ create_insn_code_compression_table ()\n   printf (\"const enum insn_code %s_multiply_insn_seq_decode_opcode[] = {\\n\"\n \t  \"  CODE_FOR_nothing /* must be first */ \", ARCH);\n \n-  for (size_t i = 0; i < sizeof ops / sizeof ops[0]; i++)\n+  for (size_t i = 0; i < ARRAY_SIZE (ops); i++)\n     {\n       Operator *op = &ops[i];\n       int index = -1;"}, {"sha": "d0d44bad2ce0dc71b51641ba4971d5a5e95feea5", "filename": "gcc/config/vms/vms.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Fvms%2Fvms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fconfig%2Fvms%2Fvms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -99,7 +99,7 @@ static const struct vms_crtl_name vms_crtl_names[] =\n \n /* Number of entires in the above array.  */\n \n-#define NBR_CRTL_NAMES (sizeof (vms_crtl_names) / sizeof (*vms_crtl_names))\n+#define NBR_CRTL_NAMES (ARRAY_SIZE (vms_crtl_names))\n \n /* List of aliased identifiers.  They must be persistent across gc.  */\n "}, {"sha": "d1dc73724d13380d78c7be9fb686b587efde4a47", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -2619,7 +2619,7 @@ depset::entity_kind_name () const\n     {\"decl\", \"specialization\", \"partial\", \"using\",\n      \"namespace\", \"redirect\", \"binding\"};\n   entity_kind kind = get_entity_kind ();\n-  gcc_checking_assert (kind < sizeof (names) / sizeof(names[0]));\n+  gcc_checking_assert (kind < ARRAY_SIZE (names));\n   return names[kind];\n }\n "}, {"sha": "421bf2e4f7ac57bb57cac2cf6c3aeb07f77a155b", "filename": "gcc/cp/name-lookup.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fcp%2Fname-lookup.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fcp%2Fname-lookup.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -6918,7 +6918,7 @@ get_std_name_hint (const char *name)\n     /* <vector>.  */\n     {\"vector\", \"<vector>\", cxx98},\n   };\n-  const size_t num_hints = sizeof (hints) / sizeof (hints[0]);\n+  const size_t num_hints = ARRAY_SIZE (hints);\n   for (size_t i = 0; i < num_hints; i++)\n     {\n       if (strcmp (name, hints[i].name) == 0)"}, {"sha": "7d94e475a09bcbba40bd86d9e3c1bc24b5b419c4", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -4200,7 +4200,7 @@ cp_parser_new (cp_lexer *lexer)\n {\n   /* Initialize the binops_by_token so that we can get the tree\n      directly from the token.  */\n-  for (unsigned i = 0; i < sizeof (binops) / sizeof (binops[0]); i++)\n+  for (unsigned i = 0; i < ARRAY_SIZE (binops); i++)\n     binops_by_token[binops[i].token_type] = binops[i];\n \n   cp_parser *parser = ggc_cleared_alloc<cp_parser> ();"}, {"sha": "62594ebb4d782aa4edab7d817225c318d42b908b", "filename": "gcc/diagnostic-format-json.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fdiagnostic-format-json.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fdiagnostic-format-json.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-format-json.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -62,7 +62,7 @@ json_from_expanded_location (diagnostic_context *context, location_t loc)\n     {\"byte-column\", DIAGNOSTICS_COLUMN_UNIT_BYTE}\n   };\n   int the_column = INT_MIN;\n-  for (int i = 0; i != sizeof column_fields / sizeof (*column_fields); ++i)\n+  for (int i = 0; i != ARRAY_SIZE (column_fields); ++i)\n     {\n       context->column_unit = column_fields[i].unit;\n       const int col = diagnostic_converted_column (context, exploc);"}, {"sha": "4ef644c5fae640a3d9d784f5367dafbebfb3d35b", "filename": "gcc/dwarf2out.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fdwarf2out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fdwarf2out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -13532,8 +13532,7 @@ static const dwarf_qual_info_t dwarf_qual_info[] =\n   { TYPE_QUAL_RESTRICT, DW_TAG_restrict_type },\n   { TYPE_QUAL_ATOMIC, DW_TAG_atomic_type }\n };\n-static const unsigned int dwarf_qual_info_size\n-  = sizeof (dwarf_qual_info) / sizeof (dwarf_qual_info[0]);\n+static const unsigned int dwarf_qual_info_size = ARRAY_SIZE (dwarf_qual_info);\n \n /* If DIE is a qualified DIE of some base DIE with the same parent,\n    return the base DIE, otherwise return NULL.  Set MASK to the"}, {"sha": "612c12d233d108bfcb4ba240a6145e9755205f87", "filename": "gcc/fortran/frontend-passes.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Ffortran%2Ffrontend-passes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Ffortran%2Ffrontend-passes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -5654,9 +5654,7 @@ gfc_code_walker (gfc_code **c, walk_code_fn_t codefn, walk_expr_fn_t exprfn,\n \t\t  WALK_SUBEXPR (co->ext.omp_clauses->detach);\n \t\t  for (idx = 0; idx < OMP_IF_LAST; idx++)\n \t\t    WALK_SUBEXPR (co->ext.omp_clauses->if_exprs[idx]);\n-\t\t  for (idx = 0;\n-\t\t       idx < sizeof (list_types) / sizeof (list_types[0]);\n-\t\t       idx++)\n+\t\t  for (idx = 0; idx < ARRAY_SIZE (list_types); idx++)\n \t\t    for (n = co->ext.omp_clauses->lists[list_types[idx]];\n \t\t\t n; n = n->next)\n \t\t      WALK_SUBEXPR (n->expr);"}, {"sha": "8643e43005ff5868e55e155754a7d5b4c5db510e", "filename": "gcc/fortran/openmp.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Ffortran%2Fopenmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Ffortran%2Fopenmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -4902,8 +4902,7 @@ gfc_match_omp_context_selector_specification (gfc_omp_declare_variant *odv)\n       match m;\n       const char *selector_sets[] = { \"construct\", \"device\",\n \t\t\t\t      \"implementation\", \"user\" };\n-      const int selector_set_count\n-\t= sizeof (selector_sets) / sizeof (*selector_sets);\n+      const int selector_set_count = ARRAY_SIZE (selector_sets);\n       int i;\n       char buf[GFC_MAX_SYMBOL_LEN + 1];\n "}, {"sha": "6884060fd6faf7560b185000527eae95d9de6a6b", "filename": "gcc/fortran/trans-intrinsic.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Ffortran%2Ftrans-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Ffortran%2Ftrans-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -9784,7 +9784,7 @@ conv_intrinsic_ieee_builtin (gfc_se * se, gfc_expr * expr,\n \t\t\t     enum built_in_function code, int nargs)\n {\n   tree args[2];\n-  gcc_assert ((unsigned) nargs <= sizeof(args)/sizeof(args[0]));\n+  gcc_assert ((unsigned) nargs <= ARRAY_SIZE (args));\n \n   conv_ieee_function_args (se, expr, args, nargs);\n   se->expr = build_call_expr_loc_array (input_location,"}, {"sha": "3742bf312cda5680a4aa75104c2e5938a9165144", "filename": "gcc/fortran/trans-types.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Ffortran%2Ftrans-types.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Ffortran%2Ftrans-types.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -3420,7 +3420,7 @@ gfc_get_array_descr_info (const_tree type, struct array_descr_info *info)\n     }\n \n   rank = GFC_TYPE_ARRAY_RANK (type);\n-  if (rank >= (int) (sizeof (info->dimen) / sizeof (info->dimen[0])))\n+  if (rank >= (int) (ARRAY_SIZE (info->dimen)))\n     return false;\n \n   etype = GFC_TYPE_ARRAY_DATAPTR_TYPE (type);"}, {"sha": "6bae85d7b8dcf1b69513beee4e9b0ea0be960319", "filename": "gcc/genhooks.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fgenhooks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fgenhooks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenhooks.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -128,7 +128,7 @@ emit_documentation (const char *in_fname)\n     }\n   fclose (f);\n   /* For each hook in hook_array, if it is a start hook, store its position.  */\n-  for (i = 0; i < (int) (sizeof hook_array / sizeof hook_array[0]); i++)\n+  for (i = 0; i < (int) (ARRAY_SIZE (hook_array)); i++)\n     {\n       struct s_hook sh, *shp;\n       void *p;\n@@ -223,7 +223,7 @@ emit_documentation (const char *in_fname)\n \t      /* POD-valued hooks sometimes come in groups with common\n \t\t documentation.*/\n \t      for (j = i + 1;\n-\t\t   j < (int) (sizeof hook_array / sizeof hook_array[0])\n+\t\t   j < (int) (ARRAY_SIZE (hook_array))\n \t\t   && hook_array[j].doc == 0 && hook_array[j].type; j++)\n \t\t{\n \t\t  char *namex = upstrdup (hook_array[j].name);\n@@ -246,8 +246,7 @@ emit_documentation (const char *in_fname)\n \t\t  printf (\"\\n@end %s\", deftype);\n \t\t}\n \t    }\n-\t  if (++i >= (int) (sizeof hook_array / sizeof hook_array[0])\n-\t      || !hook_array[i].doc)\n+\t  if (++i >= (int) (ARRAY_SIZE (hook_array)) || !hook_array[i].doc)\n \t    break;\n \t  free (name);\n \t  sh.name = name = upstrdup (hook_array[i].name);\n@@ -270,7 +269,7 @@ emit_init_macros (const char *docname)\n \n   for (print_nest = 0; print_nest <= MAX_NEST; print_nest++)\n     {\n-      for (i = 0; i < (int) (sizeof hook_array / sizeof hook_array[0]); i++)\n+      for (i = 0; i < (int) (ARRAY_SIZE (hook_array)); i++)\n \t{\n \t  char *name = upstrdup (hook_array[i].name);\n "}, {"sha": "8202129667e41e2e36100478384747009c250f00", "filename": "gcc/gimple-ssa-sprintf.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fgimple-ssa-sprintf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fgimple-ssa-sprintf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -1953,7 +1953,7 @@ format_floating (const directive &dir, tree arg, pointer_query &)\n       &res.range.min, &res.range.max\n     };\n \n-    for (int i = 0; i != sizeof minmax / sizeof *minmax; ++i)\n+    for (int i = 0; i != ARRAY_SIZE (minmax); ++i)\n       {\n \t/* Convert the GCC real value representation with the precision\n \t   of the real type to the mpfr_t format rounding down in the"}, {"sha": "9357a4e576ad9b1b8b692bc04bdef35186744af8", "filename": "gcc/gimple-ssa-warn-access.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fgimple-ssa-warn-access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fgimple-ssa-warn-access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-access.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -2853,7 +2853,7 @@ memmodel_name (unsigned HOST_WIDE_INT val)\n {\n   val = memmodel_base (val);\n \n-  for (unsigned i = 0; i != sizeof memory_models / sizeof *memory_models; ++i)\n+  for (unsigned i = 0; i != ARRAY_SIZE (memory_models); ++i)\n     {\n       if (val == memory_models[i].modval)\n \treturn memory_models[i].modname;"}, {"sha": "2ae0bcc9672802fcb0e45480f2bb1a163bed7f7d", "filename": "gcc/godump.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fgodump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fgodump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgodump.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -1326,7 +1326,7 @@ static void\n keyword_hash_init (class godump_container *container)\n {\n   size_t i;\n-  size_t count = sizeof (keywords) / sizeof (keywords[0]);\n+  size_t count = ARRAY_SIZE (keywords);\n   void **slot;\n \n   for (i = 0; i < count; i++)"}, {"sha": "1015c1ee6e9335e738ec1fdd01303945a0a9f032", "filename": "gcc/hash-table.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fhash-table.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fhash-table.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-table.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -84,7 +84,7 @@ unsigned int\n hash_table_higher_prime_index (unsigned long n)\n {\n   unsigned int low = 0;\n-  unsigned int high = sizeof (prime_tab) / sizeof (prime_tab[0]);\n+  unsigned int high = ARRAY_SIZE (prime_tab);\n \n   while (low != high)\n     {"}, {"sha": "58beba0507255eae46a0cd13d8575542ee73db10", "filename": "gcc/input.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Finput.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Finput.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -3724,8 +3724,7 @@ for_each_line_table_case (void (*testcase) (const line_table_case &))\n     {\n       /* ...and use each of the \"interesting\" location values as\n \t the starting location within line_table.  */\n-      const int num_boundary_locations\n-\t= sizeof (boundary_locations) / sizeof (boundary_locations[0]);\n+      const int num_boundary_locations = ARRAY_SIZE (boundary_locations);\n       for (int loc_idx = 0; loc_idx < num_boundary_locations; loc_idx++)\n \t{\n \t  line_table_case c (default_range_bits, boundary_locations[loc_idx]);"}, {"sha": "f99f7be1c587b5523d29904474df58cef1b06402", "filename": "gcc/ipa-free-lang-data.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fipa-free-lang-data.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fipa-free-lang-data.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-free-lang-data.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -1109,9 +1109,7 @@ free_lang_data (void)\n   free_lang_data_in_cgraph (&fld);\n \n   /* Create gimple variants for common types.  */\n-  for (unsigned i = 0;\n-       i < sizeof (builtin_structptr_types) / sizeof (builtin_structptr_type);\n-       ++i)\n+  for (unsigned i = 0; i < ARRAY_SIZE (builtin_structptr_types); ++i)\n     builtin_structptr_types[i].node = builtin_structptr_types[i].base;\n \n   /* Reset some langhooks.  Do not reset types_compatible_p, it may"}, {"sha": "22a009b7435b5b1d1cc599a6ac840e3da42e818d", "filename": "gcc/ipa-inline.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fipa-inline.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fipa-inline.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -278,7 +278,7 @@ sanitize_attrs_match_for_inline_p (const_tree caller, const_tree callee)\n       SANITIZE_POINTER_SUBTRACT\n     };\n \n-  for (unsigned i = 0; i < sizeof (codes) / sizeof (codes[0]); i++)\n+  for (unsigned i = 0; i < ARRAY_SIZE (codes); i++)\n     if (sanitize_flags_p (codes[i], caller)\n \t!= sanitize_flags_p (codes[i], callee))\n       return false;"}, {"sha": "fb86c77d0fe1c9d52ab48dad62997e20782c2466", "filename": "gcc/jit/jit-builtins.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fjit%2Fjit-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fjit%2Fjit-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-builtins.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -109,9 +109,7 @@ find_builtin_by_name (const char *in_name,\n \n      We start at index 1 to skip the initial entry (BUILT_IN_NONE), which\n      has a NULL name.  */\n-  for (unsigned int i = 1;\n-       i < sizeof (builtin_data) / sizeof (builtin_data[0]);\n-       i++)\n+  for (unsigned int i = 1; i < ARRAY_SIZE (builtin_data); i++)\n     {\n       const struct builtin_data& bd = builtin_data[i];\n       if (matches_builtin (in_name, bd))\n@@ -320,7 +318,7 @@ static const char * const type_names[] = {\n static const char *\n get_string_for_type_id (enum jit_builtin_type type_id)\n {\n-  gcc_assert (type_id < sizeof (type_names)/sizeof(type_names[0]));\n+  gcc_assert (type_id < ARRAY_SIZE (type_names));\n   return type_names[type_id];\n }\n "}, {"sha": "4305a961489b67012f057e87f64c1608c2b24260", "filename": "gcc/jit/jit-recording.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fjit%2Fjit-recording.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fjit%2Fjit-recording.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -568,9 +568,7 @@ recording::context::context (context *parent_ctxt)\n   if (parent_ctxt)\n     {\n       /* Inherit options from parent.  */\n-      for (unsigned i = 0;\n-\t   i < sizeof (m_str_options) / sizeof (m_str_options[0]);\n-\t   i++)\n+      for (unsigned i = 0; i < ARRAY_SIZE (m_str_options); i++)\n \t{\n \t  const char *parent_opt = parent_ctxt->m_str_options[i];\n \t  m_str_options[i] = parent_opt ? xstrdup (parent_opt) : NULL;"}, {"sha": "d8d0404c54e4f096b48e55bd6e4e948ffee7fa42", "filename": "gcc/lto/lto-common.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Flto%2Flto-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Flto%2Flto-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-common.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -2104,8 +2104,7 @@ lto_resolution_read (splay_tree file_ids, FILE *resolution, lto_file *file)\n       char r_str[27];\n       enum ld_plugin_symbol_resolution r = (enum ld_plugin_symbol_resolution) 0;\n       unsigned int j;\n-      unsigned int lto_resolution_str_len\n-\t= sizeof (lto_resolution_str) / sizeof (char *);\n+      unsigned int lto_resolution_str_len = ARRAY_SIZE (lto_resolution_str);\n       res_pair rp;\n \n       t = fscanf (resolution, \"%u \" HOST_WIDE_INT_PRINT_HEX_PURE"}, {"sha": "972a0336f759799cfc88ed33afb058c873219128", "filename": "gcc/lto/lto-lang.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Flto%2Flto-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Flto%2Flto-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -1319,9 +1319,7 @@ lto_init (void)\n      distinction should only be relevant to the front-end, so we\n      always use the C definition here in lto1.\n      Likewise for const struct tm*.  */\n-  for (unsigned i = 0;\n-       i < sizeof (builtin_structptr_types) / sizeof (builtin_structptr_type);\n-       ++i)\n+  for (unsigned i = 0; i < ARRAY_SIZE (builtin_structptr_types); ++i)\n     {\n       gcc_assert (builtin_structptr_types[i].node\n \t\t  == builtin_structptr_types[i].base);"}, {"sha": "233d1fbb637b4267a5004f6e422791f9a0873996", "filename": "gcc/optc-save-gen.awk", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Foptc-save-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Foptc-save-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-save-gen.awk?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -1104,7 +1104,7 @@ for (i = 0; i < n_target_val; i++) {\n }\n \n if (has_target_explicit_mask) {\n-\tprint \"  for (size_t i = 0; i < sizeof (ptr1->explicit_mask) / sizeof (ptr1->explicit_mask[0]); i++)\";\n+\tprint \"  for (size_t i = 0; i < ARRAY_SIZE (ptr1->explicit_mask); i++)\";\n \tprint \"    if (ptr1->explicit_mask[i] != ptr2->explicit_mask[i])\";\n \tprint \"      return false;\"\n }\n@@ -1152,7 +1152,7 @@ for (i = 0; i < n_target_val; i++) {\n \tprint \"  hstate.add_hwi (ptr->\" name\");\";\n }\n if (has_target_explicit_mask) {\n-\tprint \"  for (size_t i = 0; i < sizeof (ptr->explicit_mask) / sizeof (ptr->explicit_mask[0]); i++)\";\n+\tprint \"  for (size_t i = 0; i < ARRAY_SIZE (ptr->explicit_mask); i++)\";\n \tprint \"    hstate.add_hwi (ptr->explicit_mask[i]);\";\n }\n \n@@ -1192,7 +1192,7 @@ for (i = 0; i < n_target_val; i++) {\n }\n \n if (has_target_explicit_mask) {\n-\tprint \"  for (size_t i = 0; i < sizeof (ptr->explicit_mask) / sizeof (ptr->explicit_mask[0]); i++)\";\n+\tprint \"  for (size_t i = 0; i < ARRAY_SIZE (ptr->explicit_mask); i++)\";\n \tprint \"    bp_pack_value (bp, ptr->explicit_mask[i], 64);\";\n }\n \n@@ -1235,7 +1235,7 @@ for (i = 0; i < n_target_val; i++) {\n }\n \n if (has_target_explicit_mask) {\n-\tprint \"  for (size_t i = 0; i < sizeof (ptr->explicit_mask) / sizeof (ptr->explicit_mask[0]); i++)\";\n+\tprint \"  for (size_t i = 0; i < ARRAY_SIZE (ptr->explicit_mask); i++)\";\n \tprint \"    ptr->explicit_mask[i] = bp_unpack_value (bp, 64);\";\n }\n \n@@ -1317,7 +1317,7 @@ for (i = 0; i < n_opt_val; i++) {\n \telse\n \t\tprint \"  hstate.add_hwi (ptr->\" name\");\";\n }\n-print \"  for (size_t i = 0; i < sizeof (ptr->explicit_mask) / sizeof (ptr->explicit_mask[0]); i++)\";\n+print \"  for (size_t i = 0; i < ARRAY_SIZE (ptr->explicit_mask); i++)\";\n print \"    hstate.add_hwi (ptr->explicit_mask[i]);\";\n print \"  return hstate.end ();\";\n print \"}\";\n@@ -1346,7 +1346,7 @@ for (i = 0; i < n_opt_val; i++) {\n \t\tprint \"    return false;\";\n \t}\n }\n-print \"  for (size_t i = 0; i < sizeof (ptr1->explicit_mask) / sizeof (ptr1->explicit_mask[0]); i++)\";\n+print \"  for (size_t i = 0; i < ARRAY_SIZE (ptr1->explicit_mask); i++)\";\n print \"    if (ptr1->explicit_mask[i] != ptr2->explicit_mask[i])\";\n print \"      return false;\"\n print \"  return true;\";\n@@ -1380,7 +1380,7 @@ for (i = 0; i < n_opt_val; i++) {\n \t\t}\n \t}\n }\n-print \"  for (size_t i = 0; i < sizeof (ptr->explicit_mask) / sizeof (ptr->explicit_mask[0]); i++)\";\n+print \"  for (size_t i = 0; i < ARRAY_SIZE (ptr->explicit_mask); i++)\";\n print \"    bp_pack_value (bp, ptr->explicit_mask[i], 64);\";\n print \"}\";\n \n@@ -1412,7 +1412,7 @@ for (i = 0; i < n_opt_val; i++) {\n \t\t}\n \t}\n }\n-print \"  for (size_t i = 0; i < sizeof (ptr->explicit_mask) / sizeof (ptr->explicit_mask[0]); i++)\";\n+print \"  for (size_t i = 0; i < ARRAY_SIZE (ptr->explicit_mask); i++)\";\n print \"    ptr->explicit_mask[i] = bp_unpack_value (bp, 64);\";\n print \"}\";\n print \"/* Free heap memory used by optimization options  */\";"}, {"sha": "c7bb0122545a0403b88d609b60e5193b769f7a6e", "filename": "gcc/spellcheck.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fspellcheck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Fspellcheck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fspellcheck.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -489,7 +489,7 @@ static const char * const test_data[] = {\n static void\n test_metric_conditions ()\n {\n-  const int num_test_cases = sizeof (test_data) / sizeof (test_data[0]);\n+  const int num_test_cases = ARRAY_SIZE (test_data);\n \n   for (int i = 0; i < num_test_cases; i++)\n     {"}, {"sha": "a6b0d106d5ffbeeb8f0e00dd1f61116518c2738d", "filename": "gcc/tree-vect-slp-patterns.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Ftree-vect-slp-patterns.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Ftree-vect-slp-patterns.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp-patterns.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -1637,4 +1637,4 @@ vect_pattern_decl_t slp_patterns[]\n #undef SLP_PATTERN\n \n /* Set the number of SLP pattern matchers available.  */\n-size_t num__slp_patterns = sizeof(slp_patterns)/sizeof(vect_pattern_decl_t);\n+size_t num__slp_patterns = ARRAY_SIZE (slp_patterns);"}, {"sha": "df441c6b2232b28032ce9e0b1c3a656883c49ff7", "filename": "gcc/tree.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d/gcc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.cc?ref=ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d", "patch": "@@ -9408,9 +9408,7 @@ build_common_tree_nodes (bool signed_char)\n   ptr_type_node = build_pointer_type (void_type_node);\n   const_ptr_type_node\n     = build_pointer_type (build_type_variant (void_type_node, 1, 0));\n-  for (unsigned i = 0;\n-       i < sizeof (builtin_structptr_types) / sizeof (builtin_structptr_type);\n-       ++i)\n+  for (unsigned i = 0; i < ARRAY_SIZE (builtin_structptr_types); ++i)\n     builtin_structptr_types[i].node = builtin_structptr_types[i].base;\n \n   pointer_sized_int_node = build_nonstandard_integer_type (POINTER_SIZE, 1);"}]}