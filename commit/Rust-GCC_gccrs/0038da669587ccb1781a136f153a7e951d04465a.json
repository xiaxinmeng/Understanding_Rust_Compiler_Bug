{"sha": "0038da669587ccb1781a136f153a7e951d04465a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAzOGRhNjY5NTg3Y2NiMTc4MWExMzZmMTUzYTdlOTUxZDA0NDY1YQ==", "commit": {"author": {"name": "Ilya Enkovich", "email": "ilya.enkovich@intel.com", "date": "2013-10-30T09:08:14Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-10-30T09:08:14Z"}, "message": "ipa.c (cgraph_build_static_cdtor_1): Support contructors with \"chkp ctor\" and \"bnd_legacy\" attributes.\n\n        * ipa.c (cgraph_build_static_cdtor_1): Support contructors\n        with \"chkp ctor\" and \"bnd_legacy\" attributes.\n        * gimplify.c (gimplify_init_constructor): Avoid infinite\n        loop during gimplification of bounds initializer.\n\nFrom-SVN: r204198", "tree": {"sha": "2f282bf555c7fcc5e94fbb7502b91ea8a817b400", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f282bf555c7fcc5e94fbb7502b91ea8a817b400"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0038da669587ccb1781a136f153a7e951d04465a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0038da669587ccb1781a136f153a7e951d04465a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0038da669587ccb1781a136f153a7e951d04465a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0038da669587ccb1781a136f153a7e951d04465a/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2017035a605bee47b3f4fdf6723fa7dabed2763c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2017035a605bee47b3f4fdf6723fa7dabed2763c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2017035a605bee47b3f4fdf6723fa7dabed2763c"}], "stats": {"total": 50, "additions": 42, "deletions": 8}, "files": [{"sha": "e391718c74878985ef5da0473cfb9eb29802ac2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0038da669587ccb1781a136f153a7e951d04465a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0038da669587ccb1781a136f153a7e951d04465a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0038da669587ccb1781a136f153a7e951d04465a", "patch": "@@ -1,3 +1,10 @@\n+2013-10-30  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* ipa.c (cgraph_build_static_cdtor_1): Support contructors\n+\twith \"chkp ctor\" and \"bnd_legacy\" attributes.\n+\t* gimplify.c (gimplify_init_constructor): Avoid infinite\n+\tloop during gimplification of bounds initializer.\n+\n 2013-10-30  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \t* c-family/c-common.c (handle_bnd_variable_size_attribute): New."}, {"sha": "1f18466fa8786ced2ca8f7fbac737471551fb381", "filename": "gcc/gimplify.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0038da669587ccb1781a136f153a7e951d04465a/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0038da669587ccb1781a136f153a7e951d04465a/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=0038da669587ccb1781a136f153a7e951d04465a", "patch": "@@ -4080,10 +4080,19 @@ gimplify_init_constructor (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t   individual element initialization.  Also don't do this for small\n \t   all-zero initializers (which aren't big enough to merit\n \t   clearing), and don't try to make bitwise copies of\n-\t   TREE_ADDRESSABLE types.  */\n+\t   TREE_ADDRESSABLE types.\n+\n+\t   We cannot apply such transformation when compiling chkp static\n+\t   initializer because creation of initializer image in the memory\n+\t   will require static initialization of bounds for it.  It should\n+\t   result in another gimplification of similar initializer and we\n+\t   may fall into infinite loop.  */\n \tif (valid_const_initializer\n \t    && !(cleared || num_nonzero_elements == 0)\n-\t    && !TREE_ADDRESSABLE (type))\n+\t    && !TREE_ADDRESSABLE (type)\n+\t    && (!current_function_decl\n+\t\t|| !lookup_attribute (\"chkp ctor\",\n+\t\t\t\t      DECL_ATTRIBUTES (current_function_decl))))\n \t  {\n \t    HOST_WIDE_INT size = int_size_in_bytes (type);\n \t    unsigned int align;"}, {"sha": "9600b48c67484cc60d01abc7b868fdd7926172a8", "filename": "gcc/ipa.c", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0038da669587ccb1781a136f153a7e951d04465a/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0038da669587ccb1781a136f153a7e951d04465a/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=0038da669587ccb1781a136f153a7e951d04465a", "patch": "@@ -1260,9 +1260,11 @@ make_pass_ipa_whole_program_visibility (gcc::context *ctxt)\n }\n \n /* Generate and emit a static constructor or destructor.  WHICH must\n-   be one of 'I' (for a constructor) or 'D' (for a destructor).  BODY\n-   is a STATEMENT_LIST containing GENERIC statements.  PRIORITY is the\n-   initialization priority for this constructor or destructor. \n+   be one of 'I' (for a constructor), 'D' (for a destructor), 'P'\n+   (for chp static vars constructor) or 'B' (for chkp static bounds\n+   constructor).  BODY is a STATEMENT_LIST containing GENERIC\n+   statements.  PRIORITY is the initialization priority for this\n+   constructor or destructor.\n \n    FINAL specify whether the externally visible name for collect2 should\n    be produced. */\n@@ -1321,6 +1323,20 @@ cgraph_build_static_cdtor_1 (char which, tree body, int priority, bool final)\n       DECL_STATIC_CONSTRUCTOR (decl) = 1;\n       decl_init_priority_insert (decl, priority);\n       break;\n+    case 'P':\n+      DECL_STATIC_CONSTRUCTOR (decl) = 1;\n+      DECL_ATTRIBUTES (decl) = tree_cons (get_identifier (\"chkp ctor\"),\n+\t\t\t\t\t  NULL,\n+\t\t\t\t\t  NULL_TREE);\n+      decl_init_priority_insert (decl, priority);\n+      break;\n+    case 'B':\n+      DECL_STATIC_CONSTRUCTOR (decl) = 1;\n+      DECL_ATTRIBUTES (decl) = tree_cons (get_identifier (\"bnd_legacy\"),\n+\t\t\t\t\t  NULL,\n+\t\t\t\t\t  NULL_TREE);\n+      decl_init_priority_insert (decl, priority);\n+      break;\n     case 'D':\n       DECL_STATIC_DESTRUCTOR (decl) = 1;\n       decl_fini_priority_insert (decl, priority);\n@@ -1338,9 +1354,11 @@ cgraph_build_static_cdtor_1 (char which, tree body, int priority, bool final)\n }\n \n /* Generate and emit a static constructor or destructor.  WHICH must\n-   be one of 'I' (for a constructor) or 'D' (for a destructor).  BODY\n-   is a STATEMENT_LIST containing GENERIC statements.  PRIORITY is the\n-   initialization priority for this constructor or destructor.  */\n+   be one of 'I' (for a constructor), 'D' (for a destructor), 'P'\n+   (for chkp static vars constructor) or 'B' (for chkp static bounds\n+   constructor).  BODY is a STATEMENT_LIST containing GENERIC\n+   statements.  PRIORITY is the initialization priority for this\n+   constructor or destructor.  */\n \n void\n cgraph_build_static_cdtor (char which, tree body, int priority)"}]}