{"sha": "6c47a87b661598cfba79925a6fdd1ebf7737bbdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM0N2E4N2I2NjE1OThjZmJhNzk5MjVhNmZkZDFlYmY3NzM3YmJkYw==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2019-07-03T13:08:01Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2019-07-03T13:08:01Z"}, "message": "PR debug/90981 Empty .debug_addr crashes -gdwarf-5 -gsplit-dwarf\n\nEven if there was no, or an empty address list we would try to generate\na header for the .debug_addr section with -gdwarf-5 and -gsplit-dwarf.\nThe skeleton DIE would also get a (dangling) DW_AT_addr_base in that case.\n\n\tPR debug/90981\n\t* dwarf2out.c (add_top_level_skeleton_die_attrs): Only add\n\tDW_AT_addr_base if there is actually a .debug_addr section with\n\taddresses.\n\t(output_addr_table): Add DWARF5 table header generation here after\n\tchecking there are actually any addresses from...\n\t(dwarf2out_finish): ...here.\n\t* testsuite/g++.dg/pr90981.C: New test.\n\nFrom-SVN: r273008", "tree": {"sha": "e36f5f063bdecf137efda15a7a9e9412f796c7a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e36f5f063bdecf137efda15a7a9e9412f796c7a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c47a87b661598cfba79925a6fdd1ebf7737bbdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c47a87b661598cfba79925a6fdd1ebf7737bbdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c47a87b661598cfba79925a6fdd1ebf7737bbdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c47a87b661598cfba79925a6fdd1ebf7737bbdc/comments", "author": null, "committer": null, "parents": [{"sha": "cc49641a7132b66a8fdf26038aa1343e60473eaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc49641a7132b66a8fdf26038aa1343e60473eaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc49641a7132b66a8fdf26038aa1343e60473eaa"}], "stats": {"total": 70, "additions": 45, "deletions": 25}, "files": [{"sha": "2152c2f770fd784d67b69971af20f99a45702bff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c47a87b661598cfba79925a6fdd1ebf7737bbdc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c47a87b661598cfba79925a6fdd1ebf7737bbdc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c47a87b661598cfba79925a6fdd1ebf7737bbdc", "patch": "@@ -1,3 +1,14 @@\n+2019-07-03  Mark Wielaard  <mark@klomp.org>\n+\n+\tPR debug/90981\n+\t* dwarf2out.c (add_top_level_skeleton_die_attrs): Only add\n+\tDW_AT_addr_base if there is actually a .debug_addr section with\n+\taddresses.\n+\t(output_addr_table): Add DWARF5 table header generation here after\n+\tchecking there are actually any addresses from...\n+\t(dwarf2out_finish): ...here.\n+\t* testsuite/g++.dg/pr90981.C: New test.\n+\n 2019-07-03  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/91069"}, {"sha": "2c4cc6ccf899b7044bae31fa398ad9aac112bcf3", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c47a87b661598cfba79925a6fdd1ebf7737bbdc/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c47a87b661598cfba79925a6fdd1ebf7737bbdc/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=6c47a87b661598cfba79925a6fdd1ebf7737bbdc", "patch": "@@ -11196,7 +11196,8 @@ add_top_level_skeleton_die_attrs (dw_die_ref die)\n   if (comp_dir != NULL)\n     add_skeleton_AT_string (die, DW_AT_comp_dir, comp_dir);\n   add_AT_pubnames (die);\n-  add_AT_lineptr (die, dwarf_AT (DW_AT_addr_base), debug_addr_section_label);\n+  if (addr_index_table != NULL && addr_index_table->size () > 0)\n+    add_AT_lineptr (die, dwarf_AT (DW_AT_addr_base), debug_addr_section_label);\n }\n \n /* Output skeleton debug sections that point to the dwo file.  */\n@@ -29109,6 +29110,30 @@ output_addr_table (void)\n     return;\n \n   switch_to_section (debug_addr_section);\n+  /* GNU DebugFission https://gcc.gnu.org/wiki/DebugFission\n+     which GCC uses to implement -gsplit-dwarf as DWARF GNU extension\n+     before DWARF5, didn't have a header for .debug_addr units.\n+     DWARF5 specifies a small header when address tables are used.  */\n+  if (dwarf_version >= 5)\n+    {\n+      unsigned int last_idx = 0;\n+      unsigned long addrs_length;\n+\n+      addr_index_table->traverse_noresize\n+\t<unsigned int *, count_index_addrs> (&last_idx);\n+      addrs_length = last_idx * DWARF2_ADDR_SIZE + 4;\n+\n+      if (DWARF_INITIAL_LENGTH_SIZE - DWARF_OFFSET_SIZE == 4)\n+\tdw2_asm_output_data (4, 0xffffffff,\n+\t\t\t     \"Escape value for 64-bit DWARF extension\");\n+      dw2_asm_output_data (DWARF_OFFSET_SIZE, addrs_length,\n+\t\t\t   \"Length of Address Unit\");\n+      dw2_asm_output_data (2, 5, \"DWARF addr version\");\n+      dw2_asm_output_data (1, DWARF2_ADDR_SIZE, \"Size of Address\");\n+      dw2_asm_output_data (1, 0, \"Size of Segment Descriptor\");\n+    }\n+  ASM_OUTPUT_LABEL (asm_out_file, debug_addr_section_label);\n+\n   addr_index_table\n     ->traverse_noresize<unsigned int *, output_addr_table_entry> (&index);\n }\n@@ -31631,30 +31656,6 @@ dwarf2out_finish (const char *filename)\n \t\t\t    ranges_section_label);\n \t}\n \n-      switch_to_section (debug_addr_section);\n-      /* GNU DebugFission https://gcc.gnu.org/wiki/DebugFission\n-\t which GCC uses to implement -gsplit-dwarf as DWARF GNU extension\n-\t before DWARF5, didn't have a header for .debug_addr units.\n-\t DWARF5 specifies a small header when address tables are used.  */\n-      if (dwarf_version >= 5)\n-\t{\n-\t  unsigned int last_idx = 0;\n-\t  unsigned long addrs_length;\n-\n-\t  addr_index_table->traverse_noresize\n-\t    <unsigned int *, count_index_addrs> (&last_idx);\n-\t  addrs_length = last_idx * DWARF2_ADDR_SIZE + 4;\n-\n-\t  if (DWARF_INITIAL_LENGTH_SIZE - DWARF_OFFSET_SIZE == 4)\n-\t    dw2_asm_output_data (4, 0xffffffff,\n-\t\t\t\t \"Escape value for 64-bit DWARF extension\");\n-\t  dw2_asm_output_data (DWARF_OFFSET_SIZE, addrs_length,\n-\t\t\t       \"Length of Address Unit\");\n-\t  dw2_asm_output_data (2, 5, \"DWARF addr version\");\n-\t  dw2_asm_output_data (1, DWARF2_ADDR_SIZE, \"Size of Address\");\n-\t  dw2_asm_output_data (1, 0, \"Size of Segment Descriptor\");\n-\t}\n-      ASM_OUTPUT_LABEL (asm_out_file, debug_addr_section_label);\n       output_addr_table ();\n     }\n "}, {"sha": "5a273027908b462e7a32ce559a9494fbcd3dc753", "filename": "gcc/testsuite/g++.dg/pr90981.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c47a87b661598cfba79925a6fdd1ebf7737bbdc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr90981.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c47a87b661598cfba79925a6fdd1ebf7737bbdc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr90981.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr90981.C?ref=6c47a87b661598cfba79925a6fdd1ebf7737bbdc", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g -gdwarf-5 -gsplit-dwarf\" } */\n+\n+/* No addresses in the DWARF, so no .debug_addr section,\n+   don't crash trying to generate an addr index header anyway.  */\n+\n+namespace { struct t {}; }\n+t f () { return t (); }"}]}