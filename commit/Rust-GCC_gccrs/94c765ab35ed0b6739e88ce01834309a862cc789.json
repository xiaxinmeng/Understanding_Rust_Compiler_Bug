{"sha": "94c765ab35ed0b6739e88ce01834309a862cc789", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRjNzY1YWIzNWVkMGI2NzM5ZTg4Y2UwMTgzNDMwOWE4NjJjYzc4OQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@arc.com", "date": "2012-10-15T12:44:40Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2012-10-15T12:44:40Z"}, "message": "genoutput.c (process_template): Process '*' in '@' alternatives.\n\n\t* genoutput.c (process_template): Process '*' in '@' alternatives.\n\t* doc/md.texi (node Output Statement): Provide example for the above.\n\nFrom-SVN: r192457", "tree": {"sha": "4deb78426b9c9cb2f9d67c7e7b56ac4f7299338e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4deb78426b9c9cb2f9d67c7e7b56ac4f7299338e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94c765ab35ed0b6739e88ce01834309a862cc789", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94c765ab35ed0b6739e88ce01834309a862cc789", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94c765ab35ed0b6739e88ce01834309a862cc789", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94c765ab35ed0b6739e88ce01834309a862cc789/comments", "author": null, "committer": null, "parents": [{"sha": "c3dc2ac8f43fe6870a2fee7c301645699db1ff56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3dc2ac8f43fe6870a2fee7c301645699db1ff56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3dc2ac8f43fe6870a2fee7c301645699db1ff56"}], "stats": {"total": 87, "additions": 79, "deletions": 8}, "files": [{"sha": "37d9b001a3c929c3cd2f072c9ccc2d282b0db413", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94c765ab35ed0b6739e88ce01834309a862cc789/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94c765ab35ed0b6739e88ce01834309a862cc789/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=94c765ab35ed0b6739e88ce01834309a862cc789", "patch": "@@ -1,3 +1,8 @@\n+2012-10-15  J\"orn Rennecke  <joern.rennecke@arc.com>\n+\n+\t* genoutput.c (process_template): Process '*' in '@' alternatives.\n+\t* doc/md.texi (node Output Statement): Provide example for the above.\n+\n 2012-10-15  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/54920"}, {"sha": "6a1db6ad607d2fb22374aa9264294a20e65f2b9f", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94c765ab35ed0b6739e88ce01834309a862cc789/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94c765ab35ed0b6739e88ce01834309a862cc789/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=94c765ab35ed0b6739e88ce01834309a862cc789", "patch": "@@ -665,6 +665,22 @@ as follows, having the output control string start with a @samp{@@}:\n @end group\n @end smallexample\n \n+If you just need a little bit of C code in one (or a few) alternatives,\n+you can use @samp{*} inside of a @samp{@@} multi-alternative template:\n+\n+@smallexample\n+@group\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"general_operand\" \"=r,<,m\")\n+        (const_int 0))]\n+  \"\"\n+  \"@@\n+   clrreg %0\n+   * return stack_mem_p (operands[0]) ? \\\"push 0\\\" : \\\"clrmem %0\\\";\n+   clrmem %0\")\n+@end group\n+@end smallexample\n+\n @node Predicates\n @section Predicates\n @cindex predicates"}, {"sha": "d736d2c027f0827d4f7c0698ef33d0519a3fd086", "filename": "gcc/genoutput.c", "status": "modified", "additions": 58, "deletions": 8, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94c765ab35ed0b6739e88ce01834309a862cc789/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94c765ab35ed0b6739e88ce01834309a862cc789/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=94c765ab35ed0b6739e88ce01834309a862cc789", "patch": "@@ -1,6 +1,6 @@\n /* Generate code from to output assembler insns as recognized from rtl.\n    Copyright (C) 1987, 1988, 1992, 1994, 1995, 1997, 1998, 1999, 2000, 2002,\n-   2003, 2004, 2005, 2007, 2008, 2009, 2010, 2012\n+   2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011, 2012\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -662,19 +662,55 @@ process_template (struct data *d, const char *template_code)\n      list of assembler code templates, one for each alternative.  */\n   else if (template_code[0] == '@')\n     {\n-      d->template_code = 0;\n-      d->output_format = INSN_OUTPUT_FORMAT_MULTI;\n+      int found_star = 0;\n \n-      printf (\"\\nstatic const char * const output_%d[] = {\\n\", d->code_number);\n+      for (cp = &template_code[1]; *cp; )\n+\t{\n+\t  while (ISSPACE (*cp))\n+\t    cp++;\n+\t  if (*cp == '*')\n+\t    found_star = 1;\n+\t  while (!IS_VSPACE (*cp) && *cp != '\\0')\n+\t    ++cp;\n+\t}\n+      d->template_code = 0;\n+      if (found_star)\n+\t{\n+\t  d->output_format = INSN_OUTPUT_FORMAT_FUNCTION;\n+\t  puts (\"\\nstatic const char *\");\n+\t  printf (\"output_%d (rtx *operands ATTRIBUTE_UNUSED, \"\n+\t\t  \"rtx insn ATTRIBUTE_UNUSED)\\n\", d->code_number);\n+\t  puts (\"{\");\n+\t  puts (\"  switch (which_alternative)\\n    {\");\n+\t}\n+      else\n+\t{\n+\t  d->output_format = INSN_OUTPUT_FORMAT_MULTI;\n+\t  printf (\"\\nstatic const char * const output_%d[] = {\\n\",\n+\t\t  d->code_number);\n+\t}\n \n       for (i = 0, cp = &template_code[1]; *cp; )\n \t{\n-\t  const char *ep, *sp;\n+\t  const char *ep, *sp, *bp;\n \n \t  while (ISSPACE (*cp))\n \t    cp++;\n \n-\t  printf (\"  \\\"\");\n+\t  bp = cp;\n+\t  if (found_star)\n+\t    {\n+\t      printf (\"    case %d:\", i);\n+\t      if (*cp == '*')\n+\t\t{\n+\t\t  printf (\"\\n      \");\n+\t\t  cp++;\n+\t\t}\n+\t      else\n+\t\tprintf (\" return \\\"\");\n+\t    }\n+\t  else\n+\t    printf (\"  \\\"\");\n \n \t  for (ep = sp = cp; !IS_VSPACE (*ep) && *ep != '\\0'; ++ep)\n \t    if (!ISSPACE (*ep))\n@@ -690,7 +726,18 @@ process_template (struct data *d, const char *template_code)\n \t      cp++;\n \t    }\n \n-\t  printf (\"\\\",\\n\");\n+\t  if (!found_star)\n+\t    puts (\"\\\",\");\n+\t  else if (*bp != '*')\n+\t    puts (\"\\\";\");\n+\t  else\n+\t    {\n+\t      /* The usual action will end with a return.\n+\t\t If there is neither break or return at the end, this is\n+\t\t assumed to be intentional; this allows to have multiple\n+\t\t consecutive alternatives share some code.  */\n+\t      puts (\"\");\n+\t    }\n \t  i++;\n \t}\n       if (i == 1)\n@@ -700,7 +747,10 @@ process_template (struct data *d, const char *template_code)\n \terror_with_line (d->lineno,\n \t\t\t \"wrong number of alternatives in the output template\");\n \n-      printf (\"};\\n\");\n+      if (found_star)\n+\tputs (\"      default: gcc_unreachable ();\\n    }\\n}\");\n+      else\n+\tprintf (\"};\\n\");\n     }\n   else\n     {"}]}