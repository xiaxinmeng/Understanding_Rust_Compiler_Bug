{"sha": "27a804bc62805aedb1b097a00eb2c0059244680a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdhODA0YmM2MjgwNWFlZGIxYjA5N2EwMGViMmMwMDU5MjQ0NjgwYQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-02-10T17:07:10Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-02-11T03:17:43Z"}, "message": "c, c++: Plug -Wduplicated-cond memory leaks [PR99057]\n\nFreeing the condition chain needs to use vec_free which does ->release,\nor we leak memory.\n\ngcc/c/ChangeLog:\n\n\t* c-parser.c (c_parser_if_statement): Use vec_free.\n\ngcc/cp/ChangeLog:\n\n\t* parser.c (cp_parser_selection_statement): Use vec_free.", "tree": {"sha": "e01d31872c8d23236b943ecd2b633600e9dae569", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e01d31872c8d23236b943ecd2b633600e9dae569"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27a804bc62805aedb1b097a00eb2c0059244680a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27a804bc62805aedb1b097a00eb2c0059244680a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27a804bc62805aedb1b097a00eb2c0059244680a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27a804bc62805aedb1b097a00eb2c0059244680a/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b37c3ea8ab037292b0fcd62d4193ba1c2e657fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b37c3ea8ab037292b0fcd62d4193ba1c2e657fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b37c3ea8ab037292b0fcd62d4193ba1c2e657fe"}], "stats": {"total": 45, "additions": 15, "deletions": 30}, "files": [{"sha": "2a49d07bab4c0b5ece796c1bd515a2f5c7cad775", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a804bc62805aedb1b097a00eb2c0059244680a/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a804bc62805aedb1b097a00eb2c0059244680a/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=27a804bc62805aedb1b097a00eb2c0059244680a", "patch": "@@ -6499,12 +6499,9 @@ c_parser_if_statement (c_parser *parser, bool *if_p, vec<tree> *chain)\n \t\tchain->safe_push (cond);\n \t    }\n \t  else if (!c_parser_next_token_is_keyword (parser, RID_IF))\n-\t    {\n-\t      /* This is if-else without subsequent if.  Zap the condition\n-\t\t chain; we would have already warned at this point.  */\n-\t      delete chain;\n-\t      chain = NULL;\n-\t    }\n+\t    /* This is if-else without subsequent if.  Zap the condition\n+\t       chain; we would have already warned at this point.  */\n+\t    vec_free (chain);\n \t}\n       second_body = c_parser_else_body (parser, else_tinfo, chain);\n       /* Set IF_P to true to indicate that this if statement has an\n@@ -6524,12 +6521,9 @@ c_parser_if_statement (c_parser *parser, bool *if_p, vec<tree> *chain)\n \t\t    \"suggest explicit braces to avoid ambiguous %<else%>\");\n \n       if (warn_duplicated_cond)\n-\t{\n-\t  /* This if statement does not have an else clause.  We don't\n-\t     need the condition chain anymore.  */\n-\t  delete chain;\n-\t  chain = NULL;\n-\t}\n+\t/* This if statement does not have an else clause.  We don't\n+\t   need the condition chain anymore.  */\n+\tvec_free (chain);\n     }\n   c_finish_if_stmt (loc, cond, first_body, second_body);\n   add_stmt (c_end_compound_stmt (loc, block, flag_isoc99));"}, {"sha": "d68dcb7d74fc949368c9bf31cedb35012e815985", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a804bc62805aedb1b097a00eb2c0059244680a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a804bc62805aedb1b097a00eb2c0059244680a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=27a804bc62805aedb1b097a00eb2c0059244680a", "patch": "@@ -12247,12 +12247,9 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p,\n \t\t       \"init-statement in selection statements only available \"\n \t\t       \"with %<-std=c++17%> or %<-std=gnu++17%>\");\n \t    if (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))\n-\t      {\n-\t\t/* A non-empty init-statement can have arbitrary side\n-\t\t   effects.  */\n-\t\tdelete chain;\n-\t\tchain = NULL;\n-\t      }\n+\t      /* A non-empty init-statement can have arbitrary side\n+\t\t effects.  */\n+\t      vec_free (chain);\n \t    cp_parser_init_statement (parser, &decl);\n \t  }\n \n@@ -12343,13 +12340,10 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p,\n \t\t      }\n \t\t    else if (!cp_lexer_next_token_is_keyword (parser->lexer,\n \t\t\t\t\t\t\t      RID_IF))\n-\t\t      {\n-\t\t\t/* This is if-else without subsequent if.  Zap the\n-\t\t\t   condition chain; we would have already warned at\n-\t\t\t   this point.  */\n-\t\t\tdelete chain;\n-\t\t\tchain = NULL;\n-\t\t      }\n+\t\t      /* This is if-else without subsequent if.  Zap the\n+\t\t\t condition chain; we would have already warned at\n+\t\t\t this point.  */\n+\t\t      vec_free (chain);\n \t\t  }\n \t\tbegin_else_clause (statement);\n \t\t/* Parse the else-clause.  */\n@@ -12384,11 +12378,8 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p,\n \t\t\t      \"suggest explicit braces to avoid ambiguous\"\n \t\t\t      \" %<else%>\");\n \t\tif (warn_duplicated_cond)\n-\t\t  {\n-\t\t    /* We don't need the condition chain anymore.  */\n-\t\t    delete chain;\n-\t\t    chain = NULL;\n-\t\t  }\n+\t\t  /* We don't need the condition chain anymore.  */\n+\t\t  vec_free (chain);\n \t      }\n \n \t    /* Now we're all done with the if-statement.  */"}]}