{"sha": "c8abc684266b1a9b2059f9d3263c4bc5d60c10af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhhYmM2ODQyNjZiMWE5YjIwNTlmOWQzMjYzYzRiYzVkNjBjMTBhZg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-04-11T21:46:28Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-04-11T21:46:28Z"}, "message": "cpp.texi (-Wtraditional): Update description.\n\n\t* cpp.texi (-Wtraditional): Update description.\n\n\t* invoke.texi (-Wtraditional): Likewise.\n\nFrom-SVN: r41272", "tree": {"sha": "9024d420eda993e06ad9d09ad2b40a28e687d140", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9024d420eda993e06ad9d09ad2b40a28e687d140"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8abc684266b1a9b2059f9d3263c4bc5d60c10af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8abc684266b1a9b2059f9d3263c4bc5d60c10af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8abc684266b1a9b2059f9d3263c4bc5d60c10af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8abc684266b1a9b2059f9d3263c4bc5d60c10af/comments", "author": null, "committer": null, "parents": [{"sha": "76cf1895c3ea095117630e27d7bab1a014eee6d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76cf1895c3ea095117630e27d7bab1a014eee6d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76cf1895c3ea095117630e27d7bab1a014eee6d0"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "40ca684ba3e029901f7c901a4494dabd90e15d99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8abc684266b1a9b2059f9d3263c4bc5d60c10af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8abc684266b1a9b2059f9d3263c4bc5d60c10af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8abc684266b1a9b2059f9d3263c4bc5d60c10af", "patch": "@@ -1,3 +1,9 @@\n+2001-04-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* cpp.texi (-Wtraditional): Update description.\n+\n+\t* invoke.texi (-Wtraditional): Likewise.\n+\n 2001-04-11  Jim Wilson  <wilson@redhat.com>\n \n \t* config/ia64/ia64.h (FUNCTION_ARG_BOUNDARY): Return 128 if argument"}, {"sha": "622e4b51253c76344277e8f7571eee81f99235a4", "filename": "gcc/cpp.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8abc684266b1a9b2059f9d3263c4bc5d60c10af/gcc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8abc684266b1a9b2059f9d3263c4bc5d60c10af/gcc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpp.texi?ref=c8abc684266b1a9b2059f9d3263c4bc5d60c10af", "patch": "@@ -3339,7 +3339,8 @@ Requests @samp{-Wcomment}, @samp{-Wtrigraphs}, and @samp{-Wwhite-space}\n @item -Wtraditional\n @findex -Wtraditional\n Warn about certain constructs that behave differently in traditional and\n-ISO C@.\n+ISO C@.  Also warn about ISO C constructs that have no traditional C\n+equivalent, and/or problematic constructs which should be avoided.\n \n @itemize @bullet\n @item\n@@ -3368,10 +3369,9 @@ The unary plus operator.\n The `U' integer constant suffix.  (Traditonal C does support the `L'\n suffix on integer constants.)  Note, these suffixes appear in macros\n defined in the system headers of most modern systems, e.g. the _MIN/_MAX\n-macros in limits.h.  Use of these macros can lead to spurious warnings\n-as they do not necessarily reflect whether the code in question is any\n-less portable to traditional C given that suitable backup definitions\n-are provided.\n+macros in limits.h.  Use of these macros in user code might normally\n+lead to spurious warnings, however gcc's integrated preprocessor has\n+enough context to avoid warning in these cases.\n @end itemize\n \n @item -Wundef"}, {"sha": "595c99071cdd32105efe6d55db862798c43746d2", "filename": "gcc/invoke.texi", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8abc684266b1a9b2059f9d3263c4bc5d60c10af/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8abc684266b1a9b2059f9d3263c4bc5d60c10af/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=c8abc684266b1a9b2059f9d3263c4bc5d60c10af", "patch": "@@ -2055,7 +2055,8 @@ probably mistaken.\n \n @item -Wtraditional (C only)\n Warn about certain constructs that behave differently in traditional and\n-ISO C.\n+ISO C.  Also warn about ISO C constructs that have no traditional C\n+equivalent, and/or problematic constructs which should be avoided.\n \n @itemize @bullet\n @item\n@@ -2085,9 +2086,9 @@ The `U' integer constant suffix, or the `F' or `L' floating point\n constant suffixes.  (Traditonal C does support the `L' suffix on integer\n constants.)  Note, these suffixes appear in macros defined in the system\n headers of most modern systems, e.g. the _MIN/_MAX macros in limits.h.\n-Use of these macros can lead to spurious warnings as they do not\n-necessarily reflect whether the code in question is any less portable to\n-traditional C given that suitable backup definitions are provided.\n+Use of these macros in user code might normally lead to spurious\n+warnings, however gcc's integrated preprocessor has enough context to\n+avoid warning in these cases.\n \n @item\n A function declared external in one block and then used after the end of"}]}