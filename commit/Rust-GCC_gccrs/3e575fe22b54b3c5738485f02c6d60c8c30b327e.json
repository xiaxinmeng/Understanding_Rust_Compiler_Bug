{"sha": "3e575fe22b54b3c5738485f02c6d60c8c30b327e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U1NzVmZTIyYjU0YjNjNTczODQ4NWYwMmM2ZDYwYzhjMzBiMzI3ZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2012-05-31T05:30:07Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2012-05-31T05:30:07Z"}, "message": "ira.c (setup_allocno_and_important_classes): Use ira_class_hard_regs_num to check whether a class has any allocatable registers.\n\ngcc/\n\t* ira.c (setup_allocno_and_important_classes): Use\n\tira_class_hard_regs_num to check whether a class has any\n\tallocatable registers.\n\t(ira_init_register_move_cost): Likewise.\n\nFrom-SVN: r188045", "tree": {"sha": "2181fb681213f31365e065e94fcc9aa6ad3fa167", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2181fb681213f31365e065e94fcc9aa6ad3fa167"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e575fe22b54b3c5738485f02c6d60c8c30b327e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e575fe22b54b3c5738485f02c6d60c8c30b327e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e575fe22b54b3c5738485f02c6d60c8c30b327e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e575fe22b54b3c5738485f02c6d60c8c30b327e/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed9e2ed0aa5f80cef689aa291da9952167aba5dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed9e2ed0aa5f80cef689aa291da9952167aba5dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed9e2ed0aa5f80cef689aa291da9952167aba5dc"}], "stats": {"total": 74, "additions": 33, "deletions": 41}, "files": [{"sha": "2f1610b0d0578b9fb351daab63bb2ffd9dbfc3ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e575fe22b54b3c5738485f02c6d60c8c30b327e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e575fe22b54b3c5738485f02c6d60c8c30b327e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e575fe22b54b3c5738485f02c6d60c8c30b327e", "patch": "@@ -1,3 +1,10 @@\n+2012-05-31  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* ira.c (setup_allocno_and_important_classes): Use\n+\tira_class_hard_regs_num to check whether a class has any\n+\tallocatable registers.\n+\t(ira_init_register_move_cost): Likewise.\n+\n 2012-05-31  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* ira.c (init_move_cost): Adjust local variable names to match"}, {"sha": "b6ce1e98f47e42976146e08aefd545834d64ed17", "filename": "gcc/ira.c", "status": "modified", "additions": 26, "deletions": 41, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e575fe22b54b3c5738485f02c6d60c8c30b327e/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e575fe22b54b3c5738485f02c6d60c8c30b327e/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=3e575fe22b54b3c5738485f02c6d60c8c30b327e", "patch": "@@ -970,39 +970,32 @@ setup_allocno_and_important_classes (void)\n      registers.  */\n   ira_allocno_classes_num = 0;\n   for (i = 0; (cl = classes[i]) != LIM_REG_CLASSES; i++)\n-    {\n-      COPY_HARD_REG_SET (temp_hard_regset, reg_class_contents[cl]);\n-      AND_COMPL_HARD_REG_SET (temp_hard_regset, no_unit_alloc_regs);\n-      if (hard_reg_set_empty_p (temp_hard_regset))\n-\tcontinue;\n+    if (ira_class_hard_regs_num[cl] > 0)\n       ira_allocno_classes[ira_allocno_classes_num++] = (enum reg_class) cl;\n-    }\n   ira_important_classes_num = 0;\n   /* Add non-allocno classes containing to non-empty set of\n      allocatable hard regs.  */\n   for (cl = 0; cl < N_REG_CLASSES; cl++)\n-    {\n-      COPY_HARD_REG_SET (temp_hard_regset, reg_class_contents[cl]);\n-      AND_COMPL_HARD_REG_SET (temp_hard_regset, no_unit_alloc_regs);\n-      if (! hard_reg_set_empty_p (temp_hard_regset))\n-\t{\n-\t  set_p = false;\n-\t  for (j = 0; j < ira_allocno_classes_num; j++)\n-\t    {\n-\t      COPY_HARD_REG_SET (temp_hard_regset2,\n-\t\t\t\t reg_class_contents[ira_allocno_classes[j]]);\n-\t      AND_COMPL_HARD_REG_SET (temp_hard_regset2, no_unit_alloc_regs);\n-\t      if ((enum reg_class) cl == ira_allocno_classes[j])\n-\t\tbreak;\n-\t      else if (hard_reg_set_subset_p (temp_hard_regset,\n-\t\t\t\t\t      temp_hard_regset2))\n-\t\tset_p = true;\n-\t    }\n-\t  if (set_p && j >= ira_allocno_classes_num)\n-\t    ira_important_classes[ira_important_classes_num++]\n-\t      = (enum reg_class) cl;\n-\t}\n-    }\n+    if (ira_class_hard_regs_num[cl] > 0)\n+      {\n+\tCOPY_HARD_REG_SET (temp_hard_regset, reg_class_contents[cl]);\n+\tAND_COMPL_HARD_REG_SET (temp_hard_regset, no_unit_alloc_regs);\n+\tset_p = false;\n+\tfor (j = 0; j < ira_allocno_classes_num; j++)\n+\t  {\n+\t    COPY_HARD_REG_SET (temp_hard_regset2,\n+\t\t\t       reg_class_contents[ira_allocno_classes[j]]);\n+\t    AND_COMPL_HARD_REG_SET (temp_hard_regset2, no_unit_alloc_regs);\n+\t    if ((enum reg_class) cl == ira_allocno_classes[j])\n+\t      break;\n+\t    else if (hard_reg_set_subset_p (temp_hard_regset,\n+\t\t\t\t\t    temp_hard_regset2))\n+\t      set_p = true;\n+\t  }\n+\tif (set_p && j >= ira_allocno_classes_num)\n+\t  ira_important_classes[ira_important_classes_num++]\n+\t    = (enum reg_class) cl;\n+      }\n   /* Now add allocno classes to the important classes.  */\n   for (j = 0; j < ira_allocno_classes_num; j++)\n     ira_important_classes[ira_important_classes_num++]\n@@ -1575,15 +1568,10 @@ ira_init_register_move_cost (enum machine_mode mode)\n   memcpy (ira_max_register_move_cost[mode], ira_register_move_cost[mode],\n \t  sizeof (move_table) * N_REG_CLASSES);\n   for (cl1 = 0; cl1 < N_REG_CLASSES; cl1++)\n-    {\n-      /* Some subclasses are to small to have enough registers to hold\n-\t a value of MODE.  Just ignore them.  */\n-      if (ira_reg_class_max_nregs[cl1][mode] > ira_class_hard_regs_num[cl1])\n-\tcontinue;\n-      COPY_HARD_REG_SET (temp_hard_regset, reg_class_contents[cl1]);\n-      AND_COMPL_HARD_REG_SET (temp_hard_regset, no_unit_alloc_regs);\n-      if (hard_reg_set_empty_p (temp_hard_regset))\n-\tcontinue;\n+    /* Some subclasses are to small to have enough registers to hold\n+       a value of MODE.  Just ignore them.  */\n+    if (ira_class_hard_regs_num[cl1] > 0\n+\t&& ira_reg_class_max_nregs[cl1][mode] <= ira_class_hard_regs_num[cl1])\n       for (cl2 = 0; cl2 < N_REG_CLASSES; cl2++)\n \tif (hard_reg_set_subset_p (reg_class_contents[cl1],\n \t\t\t\t   reg_class_contents[cl2]))\n@@ -1598,7 +1586,6 @@ ira_init_register_move_cost (enum machine_mode mode)\n \t\tira_max_register_move_cost[mode][cl3][cl2]\n \t\t  = ira_register_move_cost[mode][cl3][cl1];\n \t    }\n-    }\n   ira_may_move_in_cost[mode]\n     = (move_table *) xmalloc (sizeof (move_table) * N_REG_CLASSES);\n   memcpy (ira_may_move_in_cost[mode], may_move_in_cost[mode],\n@@ -1619,9 +1606,7 @@ ira_init_register_move_cost (enum machine_mode mode)\n     {\n       for (cl2 = 0; cl2 < N_REG_CLASSES; cl2++)\n \t{\n-\t  COPY_HARD_REG_SET (temp_hard_regset, reg_class_contents[cl2]);\n-\t  AND_COMPL_HARD_REG_SET (temp_hard_regset, no_unit_alloc_regs);\n-\t  if (hard_reg_set_empty_p (temp_hard_regset))\n+\t  if (ira_class_hard_regs_num[cl2] == 0)\n \t    continue;\n \t  if (ira_class_subset_p[cl1][cl2])\n \t    ira_may_move_in_cost[mode][cl1][cl2] = 0;"}]}