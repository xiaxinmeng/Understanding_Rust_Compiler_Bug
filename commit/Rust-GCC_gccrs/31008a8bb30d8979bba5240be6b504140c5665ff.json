{"sha": "31008a8bb30d8979bba5240be6b504140c5665ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEwMDhhOGJiMzBkODk3OWJiYTUyNDBiZTZiNTA0MTQwYzU2NjVmZg==", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2020-12-16T06:28:44Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2020-12-16T08:12:08Z"}, "message": "rs6000: Use subreg for QI/HI vector init\n\nThis patch is to use paradoxical subreg instead of\nzero_extend for promoting QI/HI to SI/DI when we\nwant to construct one vector with these modes.\nSince we do the gpr->vsx movement and vector merge\nor pack later, the high part is useless and safe to\nuse paradoxical subreg.  It can avoid useless rlwinms\ngenerated for signed cases.\n\nBootstrapped/regtested on powerpc64le-linux-gnu P9.\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000.c (rs6000_expand_vector_init): Use\n\tparadoxical subreg instead of zero_extend for QI/HI promotion.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/pr96933-1.c: Adjusted to check no rlwinm.\n\t* gcc.target/powerpc/pr96933-2.c: Likewise.", "tree": {"sha": "bfe0ba276beb88f025a38c239bc54a981c05734e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfe0ba276beb88f025a38c239bc54a981c05734e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31008a8bb30d8979bba5240be6b504140c5665ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31008a8bb30d8979bba5240be6b504140c5665ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31008a8bb30d8979bba5240be6b504140c5665ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31008a8bb30d8979bba5240be6b504140c5665ff/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3bac40469b7052bfadc21cad0e53f40b147e937", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3bac40469b7052bfadc21cad0e53f40b147e937", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3bac40469b7052bfadc21cad0e53f40b147e937"}], "stats": {"total": 16, "additions": 5, "deletions": 11}, "files": [{"sha": "cf172138c2d1bc74f43dc78def8f4fceafcd3f11", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31008a8bb30d8979bba5240be6b504140c5665ff/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31008a8bb30d8979bba5240be6b504140c5665ff/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=31008a8bb30d8979bba5240be6b504140c5665ff", "patch": "@@ -6806,17 +6806,9 @@ rs6000_expand_vector_init (rtx target, rtx vals)\n       /* Force the values into word_mode registers.  */\n       for (i = 0; i < n_elts; i++)\n \t{\n-\t  rtx tmp = force_reg (GET_MODE_INNER (mode), XVECEXP (vals, 0, i));\n-\t  if (TARGET_POWERPC64)\n-\t    {\n-\t      op[i] = gen_reg_rtx (DImode);\n-\t      emit_insn (gen_zero_extendqidi2 (op[i], tmp));\n-\t    }\n-\t  else\n-\t    {\n-\t      op[i] = gen_reg_rtx (SImode);\n-\t      emit_insn (gen_zero_extendqisi2 (op[i], tmp));\n-\t    }\n+\t  rtx tmp = force_reg (inner_mode, XVECEXP (vals, 0, i));\n+\t  machine_mode tmode = TARGET_POWERPC64 ? DImode : SImode;\n+\t  op[i] = simplify_gen_subreg (tmode, tmp, inner_mode, 0);\n \t}\n \n       /* Take unsigned char big endianness on 64bit as example for below"}, {"sha": "71d72084413e527153678bf3aa451bff39223f59", "filename": "gcc/testsuite/gcc.target/powerpc/pr96933-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31008a8bb30d8979bba5240be6b504140c5665ff/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96933-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31008a8bb30d8979bba5240be6b504140c5665ff/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96933-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96933-1.c?ref=31008a8bb30d8979bba5240be6b504140c5665ff", "patch": "@@ -13,3 +13,4 @@\n /* { dg-final { scan-assembler-times {\\mvpkudum\\M} 12 } } */\n /* { dg-final { scan-assembler-not {\\mstb\\M} } } */\n /* { dg-final { scan-assembler-not {\\msth\\M} } } */\n+/* { dg-final { scan-assembler-not {\\mrlwinm\\M} } } */"}, {"sha": "9fa15125d8d6bd63adb80188a0592dec75918262", "filename": "gcc/testsuite/gcc.target/powerpc/pr96933-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31008a8bb30d8979bba5240be6b504140c5665ff/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96933-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31008a8bb30d8979bba5240be6b504140c5665ff/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96933-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96933-2.c?ref=31008a8bb30d8979bba5240be6b504140c5665ff", "patch": "@@ -13,3 +13,4 @@\n /* { dg-final { scan-assembler-times {\\mxxpermdi\\M} 4 } } */\n /* { dg-final { scan-assembler-not {\\mstb\\M} } } */\n /* { dg-final { scan-assembler-not {\\msth\\M} } } */\n+/* { dg-final { scan-assembler-not {\\mrlwinm\\M} } } */"}]}