{"sha": "c7501e00efae2c0150db641fd5184732f52e8b88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc1MDFlMDBlZmFlMmMwMTUwZGI2NDFmZDUxODQ3MzJmNTJlOGI4OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-05-26T08:43:17Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-05-26T08:43:17Z"}, "message": "* config/i386/sse.md\n\t(<mask_codefor>avx512vl_shuf_<shuffletype>32x4_1<mask_name>): Rename\n\tto ...\n\t(avx512vl_shuf_<shuffletype>32x4_1<mask_name>): ... this.\n\t(*avx_vperm_broadcast_v4sf): Use v constraint instead of x.  Use\n\tmaybe_evex prefix instead of vex.\n\t(*avx_vperm_broadcast_<mode>): Use v constraint instead of x.  Handle\n\tEXT_REX_SSE_REG_P (op0) case in the splitter.\n\n\t* gcc.target/i386/avx512vl-vbroadcast-3.c: New test.\n\nFrom-SVN: r236763", "tree": {"sha": "44ddf7f88963394ad8a528b0a0365b2dfd4765ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44ddf7f88963394ad8a528b0a0365b2dfd4765ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7501e00efae2c0150db641fd5184732f52e8b88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7501e00efae2c0150db641fd5184732f52e8b88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7501e00efae2c0150db641fd5184732f52e8b88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7501e00efae2c0150db641fd5184732f52e8b88/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca449d267c6268d1887874866280e6a54005f623", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca449d267c6268d1887874866280e6a54005f623", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca449d267c6268d1887874866280e6a54005f623"}], "stats": {"total": 206, "additions": 200, "deletions": 6}, "files": [{"sha": "0bdd47e998a286ea79acd8766a3d8790c6c62dbe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7501e00efae2c0150db641fd5184732f52e8b88/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7501e00efae2c0150db641fd5184732f52e8b88/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7501e00efae2c0150db641fd5184732f52e8b88", "patch": "@@ -1,3 +1,14 @@\n+2016-05-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/sse.md\n+\t(<mask_codefor>avx512vl_shuf_<shuffletype>32x4_1<mask_name>): Rename\n+\tto ...\n+\t(avx512vl_shuf_<shuffletype>32x4_1<mask_name>): ... this.\n+\t(*avx_vperm_broadcast_v4sf): Use v constraint instead of x.  Use\n+\tmaybe_evex prefix instead of vex.\n+\t(*avx_vperm_broadcast_<mode>): Use v constraint instead of x.  Handle\n+\tEXT_REX_SSE_REG_P (op0) case in the splitter.\n+\n 2016-05-25  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/71272"}, {"sha": "c681098469c016a8ed25bc225e113cfb1d28fb99", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7501e00efae2c0150db641fd5184732f52e8b88/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7501e00efae2c0150db641fd5184732f52e8b88/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=c7501e00efae2c0150db641fd5184732f52e8b88", "patch": "@@ -12399,7 +12399,7 @@\n   DONE;\n })\n \n-(define_insn \"<mask_codefor>avx512vl_shuf_<shuffletype>32x4_1<mask_name>\"\n+(define_insn \"avx512vl_shuf_<shuffletype>32x4_1<mask_name>\"\n   [(set (match_operand:VI4F_256 0 \"register_operand\" \"=v\")\n \t(vec_select:VI4F_256\n \t  (vec_concat:<ssedoublemode>\n@@ -17283,9 +17283,9 @@\n ;; If it so happens that the input is in memory, use vbroadcast.\n ;; Otherwise use vpermilp (and in the case of 256-bit modes, vperm2f128).\n (define_insn \"*avx_vperm_broadcast_v4sf\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x,x\")\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=v,v,v\")\n \t(vec_select:V4SF\n-\t  (match_operand:V4SF 1 \"nonimmediate_operand\" \"m,o,x\")\n+\t  (match_operand:V4SF 1 \"nonimmediate_operand\" \"m,o,v\")\n \t  (match_parallel 2 \"avx_vbroadcast_operand\"\n \t    [(match_operand 3 \"const_int_operand\" \"C,n,n\")])))]\n   \"TARGET_AVX\"\n@@ -17307,13 +17307,13 @@\n   [(set_attr \"type\" \"ssemov,ssemov,sselog1\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"0,0,1\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"SF,SF,V4SF\")])\n \n (define_insn_and_split \"*avx_vperm_broadcast_<mode>\"\n-  [(set (match_operand:VF_256 0 \"register_operand\" \"=x,x,x\")\n+  [(set (match_operand:VF_256 0 \"register_operand\" \"=v,v,v\")\n \t(vec_select:VF_256\n-\t  (match_operand:VF_256 1 \"nonimmediate_operand\" \"m,o,?x\")\n+\t  (match_operand:VF_256 1 \"nonimmediate_operand\" \"m,o,?v\")\n \t  (match_parallel 2 \"avx_vbroadcast_operand\"\n \t    [(match_operand 3 \"const_int_operand\" \"C,n,n\")])))]\n   \"TARGET_AVX\"\n@@ -17345,6 +17345,23 @@\n \n       /* Shuffle the lane we care about into both lanes of the dest.  */\n       mask = (elt / (<ssescalarnum> / 2)) * 0x11;\n+      if (EXT_REX_SSE_REG_P (op0))\n+\t{\n+\t  /* There is no EVEX VPERM2F128, but we can use either VBROADCASTSS\n+\t     or VSHUFF128.  */\n+\t  gcc_assert (<MODE>mode == V8SFmode);\n+\t  if ((mask & 1) == 0)\n+\t    emit_insn (gen_avx2_vec_dupv8sf (op0,\n+\t\t\t\t\t     gen_lowpart (V4SFmode, op0)));\n+\t  else\n+\t    emit_insn (gen_avx512vl_shuf_f32x4_1 (op0, op0, op0,\n+\t\t\t\t\t\t  GEN_INT (4), GEN_INT (5),\n+\t\t\t\t\t\t  GEN_INT (6), GEN_INT (7),\n+\t\t\t\t\t\t  GEN_INT (12), GEN_INT (13),\n+\t\t\t\t\t\t  GEN_INT (14), GEN_INT (15)));\n+\t  DONE;\n+\t}\n+\n       emit_insn (gen_avx_vperm2f128<mode>3 (op0, op0, op0, GEN_INT (mask)));\n       DONE;\n     }"}, {"sha": "fc925c325d49cd4cffb71a810079306ab4386cda", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7501e00efae2c0150db641fd5184732f52e8b88/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7501e00efae2c0150db641fd5184732f52e8b88/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7501e00efae2c0150db641fd5184732f52e8b88", "patch": "@@ -1,3 +1,7 @@\n+2016-05-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.target/i386/avx512vl-vbroadcast-3.c: New test.\n+\n 2016-05-26  Jiong Wang  <jiong.wang@arm.com>\n \n \t* gcc.target/aarch64/simd/vmul_elem_1.c: Force result variables to be"}, {"sha": "d981fe45e19b3395ae0c7bbf694b85cd17a63411", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vbroadcast-3.c", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7501e00efae2c0150db641fd5184732f52e8b88/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vbroadcast-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7501e00efae2c0150db641fd5184732f52e8b88/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vbroadcast-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vbroadcast-3.c?ref=c7501e00efae2c0150db641fd5184732f52e8b88", "patch": "@@ -0,0 +1,162 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx512vl -masm=att\" } */\n+\n+typedef float V1 __attribute__((vector_size (16)));\n+typedef float V2 __attribute__((vector_size (32)));\n+typedef int V4 __attribute__((vector_size (16)));\n+typedef int V5 __attribute__((vector_size (32)));\n+\n+void\n+f1 (V1 x)\n+{\n+  register V1 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a = __builtin_shuffle (a, (V4) { 0, 0, 0, 0 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f2 (V1 x)\n+{\n+  register V1 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a = __builtin_shuffle (a, (V4) { 1, 1, 1, 1 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f3 (V1 x)\n+{\n+  register V1 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a = __builtin_shuffle (a, (V4) { 2, 2, 2, 2 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f4 (V1 x)\n+{\n+  register V1 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a = __builtin_shuffle (a, (V4) { 3, 3, 3, 3 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f5 (V1 *x)\n+{\n+  register V1 a __asm (\"xmm16\");\n+  a = __builtin_shuffle (*x, (V4) { 0, 0, 0, 0 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f6 (V1 *x)\n+{\n+  register V1 a __asm (\"xmm16\");\n+  a = __builtin_shuffle (*x, (V4) { 1, 1, 1, 1 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f7 (V1 *x)\n+{\n+  register V1 a __asm (\"xmm16\");\n+  a = __builtin_shuffle (*x, (V4) { 2, 2, 2, 2 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f8 (V1 *x)\n+{\n+  register V1 a __asm (\"xmm16\");\n+  a = __builtin_shuffle (*x, (V4) { 3, 3, 3, 3 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f9 (V2 x)\n+{\n+  register V2 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a = __builtin_shuffle (a, (V5) { 0, 0, 0, 0, 0, 0, 0, 0 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f10 (V2 x)\n+{\n+  register V2 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a = __builtin_shuffle (a, (V5) { 1, 1, 1, 1, 1, 1, 1, 1 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f11 (V2 x)\n+{\n+  register V2 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a = __builtin_shuffle (a, (V5) { 4, 4, 4, 4, 4, 4, 4, 4 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f12 (V2 x)\n+{\n+  register V2 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a = __builtin_shuffle (a, (V5) { 5, 5, 5, 5, 5, 5, 5, 5 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f13 (V2 *x)\n+{\n+  register V2 a __asm (\"xmm16\");\n+  a = __builtin_shuffle (*x, (V5) { 0, 0, 0, 0, 0, 0, 0, 0 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f14 (V2 *x)\n+{\n+  register V2 a __asm (\"xmm16\");\n+  a = __builtin_shuffle (*x, (V5) { 1, 1, 1, 1, 1, 1, 1, 1 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f15 (V2 *x)\n+{\n+  register V2 a __asm (\"xmm16\");\n+  a = __builtin_shuffle (*x, (V5) { 4, 4, 4, 4, 4, 4, 4, 4 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f16 (V2 *x)\n+{\n+  register V2 a __asm (\"xmm16\");\n+  a = __builtin_shuffle (*x, (V5) { 5, 5, 5, 5, 5, 5, 5, 5 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vbroadcastss\\[^\\n\\r]*%rdi\\[^\\n\\r]*%xmm16\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcastss\\[^\\n\\r]*%xmm16\\[^\\n\\r]*%ymm16\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcastss\\[^\\n\\r]*%rdi\\[^\\n\\r]*%ymm16\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpermilps\\[^\\n\\r]*\\\\\\$0\\[^\\n\\r]*%xmm16\\[^\\n\\r]*%xmm16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermilps\\[^\\n\\r]*\\\\\\$85\\[^\\n\\r]*%xmm16\\[^\\n\\r]*%xmm16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermilps\\[^\\n\\r]*\\\\\\$170\\[^\\n\\r]*%xmm16\\[^\\n\\r]*%xmm16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermilps\\[^\\n\\r]*\\\\\\$255\\[^\\n\\r]*%xmm16\\[^\\n\\r]*%xmm16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermilps\\[^\\n\\r]*\\\\\\$0\\[^\\n\\r]*%ymm16\\[^\\n\\r]*%ymm16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermilps\\[^\\n\\r]*\\\\\\$85\\[^\\n\\r]*%ymm16\\[^\\n\\r]*%ymm16\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vshuff32x4\\[^\\n\\r]*\\\\\\$3\\[^\\n\\r]*%ymm16\\[^\\n\\r]*%ymm16\\[^\\n\\r]*%ymm16\" 2 } } */"}]}