{"sha": "4f8b89f092467f9550cb2aa873c2e30ac809c08a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY4Yjg5ZjA5MjQ2N2Y5NTUwY2IyYWE4NzNjMmUzMGFjODA5YzA4YQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-05-21T12:01:00Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-05-21T12:01:00Z"}, "message": "re PR tree-optimization/90510 (Unnecessary permutation)\n\n2019-05-21  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/90510\n\t* fold-const.c (fold_read_from_vector): New function.\n\t* fold-const.h (fold_read_from_vector): Declare.\n\t* match.pd (VEC_PERM_EXPR): Build BIT_INSERT_EXPRs for\n\tsingle-element insert permutations.  Canonicalize selector\n\tfurther and fix issue with last commit.\n\n\t* gcc.target/i386/pr90510.c: New testcase.\n\nFrom-SVN: r271463", "tree": {"sha": "d44631d84c87d1c813dd1788c15ca29337dbdf91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d44631d84c87d1c813dd1788c15ca29337dbdf91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f8b89f092467f9550cb2aa873c2e30ac809c08a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f8b89f092467f9550cb2aa873c2e30ac809c08a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f8b89f092467f9550cb2aa873c2e30ac809c08a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f8b89f092467f9550cb2aa873c2e30ac809c08a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b0657dce501046ebe11b7ba30653a41221f4797", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b0657dce501046ebe11b7ba30653a41221f4797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b0657dce501046ebe11b7ba30653a41221f4797"}], "stats": {"total": 115, "additions": 109, "deletions": 6}, "files": [{"sha": "cd55c4dffadbdb11290bee74c13d5da63cc5798a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8b89f092467f9550cb2aa873c2e30ac809c08a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8b89f092467f9550cb2aa873c2e30ac809c08a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f8b89f092467f9550cb2aa873c2e30ac809c08a", "patch": "@@ -1,3 +1,12 @@\n+2019-05-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/90510\n+\t* fold-const.c (fold_read_from_vector): New function.\n+\t* fold-const.h (fold_read_from_vector): Declare.\n+\t* match.pd (VEC_PERM_EXPR): Build BIT_INSERT_EXPRs for\n+\tsingle-element insert permutations.  Canonicalize selector\n+\tfurther and fix issue with last commit.\n+\n 2019-05-21  Vladislav Ivanishin  <vlad@ispras.ru>\n \n \t* tree-cfg.h (split_critical_edges): Add for_edge_insertion_p"}, {"sha": "42289013cc11b65efafbc4780c8f34899596d0db", "filename": "gcc/fold-const.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8b89f092467f9550cb2aa873c2e30ac809c08a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8b89f092467f9550cb2aa873c2e30ac809c08a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=4f8b89f092467f9550cb2aa873c2e30ac809c08a", "patch": "@@ -13793,6 +13793,28 @@ fold_read_from_constant_string (tree exp)\n   return NULL;\n }\n \n+/* Folds a read from vector element at IDX of vector ARG.  */\n+\n+tree\n+fold_read_from_vector (tree arg, poly_uint64 idx)\n+{\n+  unsigned HOST_WIDE_INT i;\n+  if (known_lt (idx, TYPE_VECTOR_SUBPARTS (TREE_TYPE (arg)))\n+      && known_ge (idx, 0u)\n+      && idx.is_constant (&i))\n+    {\n+      if (TREE_CODE (arg) == VECTOR_CST)\n+\treturn VECTOR_CST_ELT (arg, i);\n+      else if (TREE_CODE (arg) == CONSTRUCTOR)\n+\t{\n+\t  if (i >= CONSTRUCTOR_NELTS (arg))\n+\t    return build_zero_cst (TREE_TYPE (TREE_TYPE (arg)));\n+\t  return CONSTRUCTOR_ELT (arg, i)->value;\n+\t}\n+    }\n+  return NULL_TREE;\n+}\n+\n /* Return the tree for neg (ARG0) when ARG0 is known to be either\n    an integer constant, real, or fixed-point constant.\n "}, {"sha": "2a69bf9163db2b2184132c4373003692171f405c", "filename": "gcc/fold-const.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8b89f092467f9550cb2aa873c2e30ac809c08a/gcc%2Ffold-const.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8b89f092467f9550cb2aa873c2e30ac809c08a/gcc%2Ffold-const.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.h?ref=4f8b89f092467f9550cb2aa873c2e30ac809c08a", "patch": "@@ -100,6 +100,7 @@ extern tree fold_bit_and_mask (tree, tree, enum tree_code,\n \t\t\t       tree, enum tree_code, tree, tree,\n \t\t\t       tree, enum tree_code, tree, tree, tree *);\n extern tree fold_read_from_constant_string (tree);\n+extern tree fold_read_from_vector (tree, poly_uint64);\n #if GCC_VEC_PERN_INDICES_H\n extern tree fold_vec_perm (tree, tree, tree, const vec_perm_indices &);\n #endif"}, {"sha": "f9bc097c49122bf1b4bcf0b12b09840daf7b8fbc", "filename": "gcc/match.pd", "status": "modified", "additions": 50, "deletions": 6, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8b89f092467f9550cb2aa873c2e30ac809c08a/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8b89f092467f9550cb2aa873c2e30ac809c08a/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=4f8b89f092467f9550cb2aa873c2e30ac809c08a", "patch": "@@ -5406,6 +5406,11 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t       op0 = op1;\n \t       sel.rotate_inputs (1);\n \t     }\n+\t   else if (known_ge (poly_uint64 (sel[0]), nelts))\n+\t     {\n+\t       std::swap (op0, op1);\n+\t       sel.rotate_inputs (1);\n+\t     }\n          }\n        gassign *def;\n        tree cop0 = op0, cop1 = op1;\n@@ -5429,9 +5434,46 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n      (with\n       {\n \tbool changed = (op0 == op1 && !single_arg);\n+\ttree ins = NULL_TREE;\n+\tunsigned at = 0;\n+\n+\t/* See if the permutation is performing a single element\n+\t   insert from a CONSTRUCTOR or constant and use a BIT_INSERT_EXPR\n+\t   in that case.  But only if the vector mode is supported,\n+\t   otherwise this is invalid GIMPLE.  */\n+        if (TYPE_MODE (type) != BLKmode\n+\t    && (TREE_CODE (cop0) == VECTOR_CST\n+\t\t|| TREE_CODE (cop0) == CONSTRUCTOR\n+\t\t|| TREE_CODE (cop1) == VECTOR_CST\n+\t\t|| TREE_CODE (cop1) == CONSTRUCTOR))\n+          {\n+\t    if (sel.series_p (1, 1, nelts + 1, 1))\n+\t      {\n+\t        /* After canonicalizing the first elt to come from the\n+\t\t   first vector we only can insert the first elt from\n+\t\t   the first vector.  */\n+\t        at = 0;\n+\t\tins = fold_read_from_vector (cop0, 0);\n+\t        op0 = op1;\n+\t      }\n+\t    else\n+\t      {\n+\t        unsigned int encoded_nelts = sel.encoding ().encoded_nelts ();\n+\t\tfor (at = 0; at < encoded_nelts; ++at)\n+\t\t  if (maybe_ne (sel[at], at))\n+\t\t    break;\n+\t\tif (at < encoded_nelts && sel.series_p (at + 1, 1, at + 1, 1))\n+\t\t  {\n+\t\t    if (known_lt (at, nelts))\n+\t\t      ins = fold_read_from_vector (cop0, sel[at]);\n+\t\t    else\n+\t\t      ins = fold_read_from_vector (cop1, sel[at] - nelts);\n+\t\t  }\n+\t      }\n+\t  }\n \n \t/* Generate a canonical form of the selector.  */\n-\tif (sel.encoding () != builder)\n+\tif (!ins && sel.encoding () != builder)\n \t  {\n \t    /* Some targets are deficient and fail to expand a single\n \t       argument permutation while still allowing an equivalent\n@@ -5450,10 +5492,12 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t\t     so use the preferred form.  */\n \t\t  op2 = vec_perm_indices_to_tree (TREE_TYPE (op2), sel);\n \t      }\n-\t    /* Differences in the encoder do not necessarily mean\n-\t       differences in the resulting vector.  */\n-\t    changed = !operand_equal_p (op2, oldop2, 0);\n+\t    if (!operand_equal_p (op2, oldop2, 0))\n+\t      changed = true;\n \t  }\n       }\n-      (if (changed)\n-       (vec_perm { op0; } { op1; } { op2; })))))))))\n+      (if (ins)\n+       (bit_insert { op0; } { ins; }\n+         { bitsize_int (at * tree_to_uhwi (TYPE_SIZE (TREE_TYPE (type)))); })\n+       (if (changed)\n+        (vec_perm { op0; } { op1; } { op2; }))))))))))"}, {"sha": "d68685ba9dbded804c3854e228bc95dda62ac816", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8b89f092467f9550cb2aa873c2e30ac809c08a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8b89f092467f9550cb2aa873c2e30ac809c08a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4f8b89f092467f9550cb2aa873c2e30ac809c08a", "patch": "@@ -1,3 +1,8 @@\n+2019-05-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/90510\n+\t* gcc.target/i386/pr90510.c: New testcase.\n+\n 2019-05-21  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.target/i386/pr90500-1.c: Add missing '\"\"'."}, {"sha": "a3c11a45bf46d566fb27940ef42f4c7b25956cdd", "filename": "gcc/testsuite/gcc.target/i386/pr90510.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8b89f092467f9550cb2aa873c2e30ac809c08a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90510.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8b89f092467f9550cb2aa873c2e30ac809c08a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90510.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr90510.c?ref=4f8b89f092467f9550cb2aa873c2e30ac809c08a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2 -fdump-tree-optimized\" } */\n+\n+typedef double __v2df __attribute__ ((__vector_size__ (16)));\n+typedef long long __v2di __attribute__ ((__vector_size__ (16)));\n+\n+__v2df\n+_mm_add_sd_A (__v2df x, __v2df y)\n+{\n+  double tem = x[0] + y[0];\n+  return __builtin_shuffle ( x, (__v2df) { tem, tem }, (__v2di) { 2, 1 } );\n+}\n+\n+__v2df\n+_mm_add_sd_B (__v2df x, __v2df y)\n+{\n+  __v2df z = { (x[0] + y[0]), x[1] };\n+  return z;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"BIT_INSERT_EXPR\" 2 \"optimized\" } } */\n+/* { dg-final { scan-assembler-not \"unpck\" } } */"}]}