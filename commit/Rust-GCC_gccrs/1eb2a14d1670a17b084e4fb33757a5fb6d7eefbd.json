{"sha": "1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWViMmExNGQxNjcwYTE3YjA4NGU0ZmIzMzc1N2E1ZmI2ZDdlZWZiZA==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2011-05-26T20:15:22Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-05-26T20:15:22Z"}, "message": "detect C++ errors to fix 2288 and 18770\n\ndetect C++ errors to fix 2288 and 18770\ngcc/cp/\n\tPR c++/2288\n\tPR c++/18770\n\t* name-lookup.h (enum scope_kind): Add sk_cond.\n\t* name-lookup.c (pushdecl_maybe_friend): Get scope of shadowed local.\n\tDetect and report error for redeclaration from for-init or if\n\tor switch condition.\n\t(begin_scope): Handle sk_cond.\n\t* semantics.c (begin_if_stmt): Use sk_cond.\n\t(begin switch_stmt): Ditto.\ngcc/testsuite/\n\tPR c++/2288\n\tPR c++/18770\n\t* g++.old-deja/g++.jason/cond.C: Remove xfails.\n\t* g++.dg/parse/pr18770.C: New test.\n\t* g++.dg/cpp0x/range-for5.C: Add dg-error marker.\n\nCo-Authored-By: Nathan Froyd <froydnj@codesourcery.com>\n\nFrom-SVN: r174307", "tree": {"sha": "d67de4f1d33d599df36d693a0e3561ed970648d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d67de4f1d33d599df36d693a0e3561ed970648d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd/comments", "author": null, "committer": null, "parents": [{"sha": "6a1a787e415ffbb0023dd66c7cf4ebd3475b8c7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a1a787e415ffbb0023dd66c7cf4ebd3475b8c7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a1a787e415ffbb0023dd66c7cf4ebd3475b8c7f"}], "stats": {"total": 241, "additions": 231, "deletions": 10}, "files": [{"sha": "605289fa68fb628b916bcca4804f1f5b855ac28b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd", "patch": "@@ -1,3 +1,16 @@\n+2011-05-26  Janis Johnson  <janis187@us.ibm.com>\n+\t    Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\tPR c++/2288\n+\tPR c++/18770\n+\t* name-lookup.h (enum scope_kind): Add sk_cond.\n+\t* name-lookup.c (pushdecl_maybe_friend): Get scope of shadowed local.\n+\tDetect and report error for redeclaration from for-init or if\n+\tor switch condition.\n+\t(begin_scope): Handle sk_cond.\n+\t* semantics.c (begin_if_stmt): Use sk_cond.\n+\t(begin switch_stmt): Ditto.\n+\n 2011-05-26  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/48211"}, {"sha": "3d07ff65ccedf62e2fa4ebf022de069759441623", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd", "patch": "@@ -935,8 +935,15 @@ pushdecl_maybe_friend_1 (tree x, bool is_friend)\n       else\n \t{\n \t  /* Here to install a non-global value.  */\n-\t  tree oldlocal = innermost_non_namespace_value (name);\n \t  tree oldglobal = IDENTIFIER_NAMESPACE_VALUE (name);\n+\t  tree oldlocal = NULL_TREE;\n+\t  cxx_scope *oldscope = NULL;\n+\t  cxx_binding *oldbinding = outer_binding (name, NULL, true);\n+\t  if (oldbinding)\n+\t    {\n+\t      oldlocal = oldbinding->value;\n+\t      oldscope = oldbinding->scope;\n+\t    }\n \n \t  if (need_new_binding)\n \t    {\n@@ -1065,6 +1072,20 @@ pushdecl_maybe_friend_1 (tree x, bool is_friend)\n \t\t       }\n \t\t   }\n \t\t}\n+\t      /* Error if redeclaring a local declared in a\n+\t\t for-init-statement or in the condition of an if or\n+\t\t switch statement when the new declaration is in the\n+\t\t outermost block of the controlled statement.\n+\t\t Redeclaring a variable from a for or while condition is\n+\t\t detected elsewhere.  */\n+\t      else if (TREE_CODE (oldlocal) == VAR_DECL\n+\t\t       && oldscope == current_binding_level->level_chain\n+\t\t       && (oldscope->kind == sk_cond\n+\t\t\t   || oldscope->kind == sk_for))\n+\t\t{\n+\t\t  error (\"redeclaration of %q#D\", x);\n+\t\t  error (\"%q+#D previously declared here\", oldlocal);\n+\t\t}\n \n \t      if (warn_shadow && !nowarn)\n \t\t{\n@@ -1424,6 +1445,7 @@ begin_scope (scope_kind kind, tree entity)\n     case sk_try:\n     case sk_catch:\n     case sk_for:\n+    case sk_cond:\n     case sk_class:\n     case sk_scoped_enum:\n     case sk_function_parms:"}, {"sha": "009b5d982f10bb6aa6643f0f352f8e5927af0122", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd", "patch": "@@ -109,6 +109,8 @@ typedef enum scope_kind {\n   sk_catch,\t     /* A catch-block.  */\n   sk_for,\t     /* The scope of the variable declared in a\n \t\t\tfor-init-statement.  */\n+  sk_cond,\t     /* The scope of the variable declared in the condition\n+\t\t\tof an if or switch statement.  */\n   sk_function_parms, /* The scope containing function parameters.  */\n   sk_class,\t     /* The scope containing the members of a class.  */\n   sk_scoped_enum,    /* The scope containing the enumertors of a C++0x"}, {"sha": "7833d765e1b930f45c82a3f2906636aab8793106", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd", "patch": "@@ -656,7 +656,7 @@ tree\n begin_if_stmt (void)\n {\n   tree r, scope;\n-  scope = do_pushlevel (sk_block);\n+  scope = do_pushlevel (sk_cond);\n   r = build_stmt (input_location, IF_STMT, NULL_TREE,\n \t\t  NULL_TREE, NULL_TREE, scope);\n   begin_cond (&IF_COND (r));\n@@ -1013,7 +1013,7 @@ begin_switch_stmt (void)\n {\n   tree r, scope;\n \n-  scope = do_pushlevel (sk_block);\n+  scope = do_pushlevel (sk_cond);\n   r = build_stmt (input_location, SWITCH_STMT, NULL_TREE, NULL_TREE, NULL_TREE, scope);\n \n   begin_cond (&SWITCH_STMT_COND (r));"}, {"sha": "949474f225da4b403101317d47c3ecd4f1645bfc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd", "patch": "@@ -1,3 +1,12 @@\n+2011-05-26  Janis Johnson  <janis187@us.ibm.com>\n+\t    Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\tPR c++/2288\n+\tPR c++/18770\n+\t* g++.old-deja/g++.jason/cond.C: Remove xfails.\n+\t* g++.dg/parse/pr18770.C: New test.\n+\t* g++.dg/cpp0x/range-for5.C: Add dg-error marker.\n+\n 2011-05-26  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/48955"}, {"sha": "fd6f7618f98033f920fb85a77d8d1f87a6c86c65", "filename": "gcc/testsuite/g++.dg/cpp0x/range-for5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for5.C?ref=1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd", "patch": "@@ -47,8 +47,8 @@ void test1()\n \n   //Check the correct scopes\n   int i;\n-  for (int i : a)\n+  for (int i : a)\t\t// { dg-error \"previously declared\" }\n   {\n-    int i;\n+    int i;\t\t\t// { dg-error \"redeclaration\" }\n   }\n }"}, {"sha": "df57be4b29c382e616e78aab57fa96d2c7295ac9", "filename": "gcc/testsuite/g++.dg/parse/pr18770.C", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr18770.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr18770.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr18770.C?ref=1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd", "patch": "@@ -0,0 +1,175 @@\n+/* { dg-do compile } */\n+\n+/* The ISO C++ standard says, in Section 3.3.2 sentence 4, that a name\n+   declared in the for-init-statement or in the condition of an if, for\n+   while, or switch statement can't be redeclared in the outermost block\n+   of the controlled statement.  (Note, this is not an error in C.)  */\n+\n+extern void foo (int);\n+extern int j;\n+\n+void\n+e0 (void)\n+{\n+  for (int i = 0;\t// { dg-error \"previously declared here\" \"prev\" }\n+       i < 10; ++i)\n+    {\n+      int i = 2;\t// { dg-error \"redeclaration\" \"redecl\" }\n+      foo (i);\n+    }\n+}\n+\n+void\n+e1 (void)\n+{\n+  int i;\n+  for (i = 0;\n+       int k = j; i++)\t// { dg-error \"previously declared here\" \"prev\" }\n+    {\n+      int k = 2;\t// { dg-error \"redeclaration\" \"redecl\" }\n+      foo (k);\n+    }\n+}\n+\n+void\n+e2 (void)\n+{\n+  if (int i = 1)\t// { dg-error \"previously declared here\" \"prev\" }\n+    {\n+      int i = 2;\t// { dg-error \"redeclaration\" \"redecl\" }\n+      foo (i);\n+    }\n+}\n+\n+void\n+e3 (void)\n+{\n+  if (int i = 1)\t// { dg-error \"previously declared here\" \"prev\" }\n+    {\n+      foo (i);\n+    }\n+  else\n+    {\n+      int i = 2;\t// { dg-error \"redeclaration\" \"redecl\" }\n+      foo (i);\n+    }\n+}\n+\n+void\n+e4 (void)\n+{\n+  while (int i = 1)\t// { dg-error \"previously declared here\" \"prev\" }\n+    {\n+      int i = 2;\t// { dg-error \"redeclaration\" \"redecl\" }\n+      foo (i);\n+    }\n+}\n+\n+void\n+e5 (void)\n+{\n+  switch (int i = j)\t// { dg-error \"previously declared here\" \"prev\" }\n+    {\n+    int i;\t\t// { dg-error \"redeclaration\" \"redecl\" }\n+    default:\n+      {\n+        i = 2;\n+        foo (i);\n+      }\n+    }\n+}\n+\n+void\n+f0 (void)\n+{\n+  for (int i = 0; i < 10; ++i)\n+    {\n+      foo (i);\n+      {\n+        int i = 2;\t// OK, not outermost block.\n+        foo (i);\n+      }\n+    }\n+}\n+\n+void\n+f1 (void)\n+{\n+  int i;\n+  for (i = 0; int k = j; i++)\n+    {\n+      foo (k);\n+      {\n+\tint k = 2;\t// OK, not outermost block.\n+\tfoo (k);\n+      }\n+    }\n+}\n+\n+void\n+f2 (void)\n+{\n+  if (int i = 1)\n+    {\n+      foo (i);\n+      {\n+\tint i = 2;\t// OK, not outermost block.\n+\tfoo (i);\n+      }\n+    }\n+}\n+\n+void\n+f3 (void)\n+{\n+  if (int i = 1)\n+    {\n+      foo (i);\n+    }\n+  else\n+    {\n+      foo (i+2);\n+      {\n+\tint i = 2;\t// OK, not outermost block.\n+\tfoo (i);\n+      }\n+    }\n+}\n+\n+void\n+f4 (void)\n+{\n+  while (int i = 1)\n+    {\n+      foo (i);\n+      {\n+\tint i = 2;\t// OK, not outermost block.\n+\tfoo (i);\n+      }\n+    }\n+}\n+\n+void\n+f5 (void)\n+{\n+  switch (int i = j)\n+    {\n+    default:\n+      {\n+        int i = 2;\t// OK, not outermost block.\n+        foo (i);\n+      }\n+    }\n+}\n+\n+void\n+f6 (void)\n+{\n+  int i = 1;\n+\n+  for (int j = 0; j < 10; j++)\n+    {\n+      int i = 2;\t// OK, not variable from for-init.\n+      foo (i);\n+    }\n+}"}, {"sha": "a6e5ba0db2bbd8046114680fdc90cdab9c4692ca", "filename": "gcc/testsuite/g++.old-deja/g++.jason/cond.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcond.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcond.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcond.C?ref=1eb2a14d1670a17b084e4fb33757a5fb6d7eefbd", "patch": "@@ -6,14 +6,14 @@ int main()\n {\n   float i;\n   \n-  if (int i = 1)\t\t// { dg-error \"\" \"\" { xfail *-*-* } } , \n+  if (int i = 1)\t\t// { dg-error \"previously\" }\n     {\n-      char i;\t\t\t// { dg-error \"\" \"\" { xfail *-*-* } } , \n+      char i;\t\t\t// { dg-error \"redeclaration\" } \n       char j;\n     }\n   else\n     {\n-      short i;\t\t\t// { dg-error \"\" \"\" { xfail *-*-* } } , \n+      short i;\t\t\t// { dg-error \"redeclaration\" }\n       char j;\n     }\n \n@@ -27,10 +27,10 @@ int main()\n       int i;\t\t\t// { dg-error \"redeclaration\" }\n     }\n \n-  switch (int i = 0)\t\t// { dg-error \"\" \"\" { xfail *-*-* } } \n+  switch (int i = 0)\t\t// { dg-error \"previously\" }\n     {\n     default:\n-      int i;\t\t\t// { dg-error \"\" \"\" { xfail *-*-* } } \n+      int i;\t\t\t// { dg-error \"redeclaration\" } \n     }\n \n   if (struct A { operator int () { return 1; } } *foo = new A) // { dg-error \"defined\" } "}]}