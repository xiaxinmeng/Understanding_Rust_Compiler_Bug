{"sha": "85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVjMWI2ZDdjODU1ZmQxYjc2YTM4NWFmMmI3ZjJjNTZiZjNiN2YxMQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2017-06-14T10:20:07Z"}, "committer": {"name": "Naveen H.S", "email": "naveenh@gcc.gnu.org", "date": "2017-06-14T10:20:07Z"}, "message": "re PR target/71663 (aarch64 Vector initialization can be improved slightly)\n\n\nPR target/71663\ngcc\n\t* config/aarch64/aarch64.c (aarch64_expand_vector_init):\n\tImprove vector initialization code gen for only variable case.\n\ngcc/testsuite\n\t* gcc.target/aarch64/vect-init-1.c: Newtestcase.\n\t* gcc.target/aarch64/vect-init-2.c: Likewise.\n\t* gcc.target/aarch64/vect-init-3.c: Likewise.\n\t* gcc.target/aarch64/vect-init-4.c: Likewise.\n\t* gcc.target/aarch64/vect-init-5.c: Likewise.\n\n\nCo-Authored-By: Naveen H.S <Naveen.Hurugalawadi@cavium.com>\n\nFrom-SVN: r249187", "tree": {"sha": "602c57f01303056a37e94a03f95b559c01a14a08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/602c57f01303056a37e94a03f95b559c01a14a08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bee9e49f6ccbb2abcfc5fb9f2d16d82132eb6e81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bee9e49f6ccbb2abcfc5fb9f2d16d82132eb6e81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bee9e49f6ccbb2abcfc5fb9f2d16d82132eb6e81"}], "stats": {"total": 132, "additions": 128, "deletions": 4}, "files": [{"sha": "8205b0e984a5f9cf37bd7cb9d1f2e1c2c91964d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11", "patch": "@@ -1,3 +1,10 @@\n+2017-06-14  Andrew Pinski  <apinski@cavium.com>\n+\t    Naveen H.S  <Naveen.Hurugalawadi@cavium.com>\n+\n+\tPR target/71663\n+\t* config/aarch64/aarch64.c (aarch64_expand_vector_init):\n+\tImprove vector initialization code gen for only variable case. \n+\n 2017-06-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/driver-sparc.c (cpu_names): Add SPARC-T5 entry."}, {"sha": "239ba72570ff11d9f6b89154bde8edf417b3b153", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 51, "deletions": 4, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11", "patch": "@@ -11707,6 +11707,57 @@ aarch64_expand_vector_init (rtx target, rtx vals)\n       return;\n     }\n \n+  enum insn_code icode = optab_handler (vec_set_optab, mode);\n+  gcc_assert (icode != CODE_FOR_nothing);\n+\n+  /* If there are only variable elements, try to optimize\n+     the insertion using dup for the most common element\n+     followed by insertions.  */\n+\n+  /* The algorithm will fill matches[*][0] with the earliest matching element,\n+     and matches[X][1] with the count of duplicate elements (if X is the\n+     earliest element which has duplicates).  */\n+\n+  if (n_var == n_elts && n_elts <= 16)\n+    {\n+      int matches[16][2] = {0};\n+      for (int i = 0; i < n_elts; i++)\n+\t{\n+\t  for (int j = 0; j <= i; j++)\n+\t    {\n+\t      if (rtx_equal_p (XVECEXP (vals, 0, i), XVECEXP (vals, 0, j)))\n+\t\t{\n+\t\t  matches[i][0] = j;\n+\t\t  matches[j][1]++;\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t}\n+      int maxelement = 0;\n+      int maxv = 0;\n+      for (int i = 0; i < n_elts; i++)\n+\tif (matches[i][1] > maxv)\n+\t  {\n+\t    maxelement = i;\n+\t    maxv = matches[i][1];\n+\t  }\n+\n+      /* Create a duplicate of the most common element.  */\n+      rtx x = copy_to_mode_reg (inner_mode, XVECEXP (vals, 0, maxelement));\n+      aarch64_emit_move (target, gen_rtx_VEC_DUPLICATE (mode, x));\n+\n+      /* Insert the rest.  */\n+      for (int i = 0; i < n_elts; i++)\n+\t{\n+\t  rtx x = XVECEXP (vals, 0, i);\n+\t  if (matches[i][0] == maxelement)\n+\t    continue;\n+\t  x = copy_to_mode_reg (inner_mode, x);\n+\t  emit_insn (GEN_FCN (icode) (target, x, GEN_INT (i)));\n+\t}\n+      return;\n+    }\n+\n   /* Initialise a vector which is part-variable.  We want to first try\n      to build those lanes which are constant in the most efficient way we\n      can.  */\n@@ -11740,10 +11791,6 @@ aarch64_expand_vector_init (rtx target, rtx vals)\n     }\n \n   /* Insert the variable lanes directly.  */\n-\n-  enum insn_code icode = optab_handler (vec_set_optab, mode);\n-  gcc_assert (icode != CODE_FOR_nothing);\n-\n   for (int i = 0; i < n_elts; i++)\n     {\n       rtx x = XVECEXP (vals, 0, i);"}, {"sha": "a41cecf173d705aeb3cf76631d14dd010b696e01", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11", "patch": "@@ -1,3 +1,13 @@\n+2017-06-14  Andrew Pinski  <apinski@cavium.com>\n+\t    Naveen H.S  <Naveen.Hurugalawadi@cavium.com>\n+\n+\tPR target/71663\n+\t* gcc.target/aarch64/vect-init-1.c: Newtestcase.\n+\t* gcc.target/aarch64/vect-init-2.c: Likewise.\n+\t* gcc.target/aarch64/vect-init-3.c: Likewise.\n+\t* gcc.target/aarch64/vect-init-4.c: Likewise.\n+\t* gcc.target/aarch64/vect-init-5.c: Likewise.\n+\n 2017-06-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58541"}, {"sha": "90ba3ae3b99823200719552cf2d912076cc3f13c", "filename": "gcc/testsuite/gcc.target/aarch64/vect-init-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-init-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-init-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-init-1.c?ref=85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#define vector __attribute__((vector_size(16)))\n+\n+vector float combine (float a, float b, float c, float d)\n+{\n+  return (vector float) { a, b, c, d };\n+}\n+\n+/* { dg-final { scan-assembler-not \"movi\\t\" } } */\n+/* { dg-final { scan-assembler-not \"orr\\t\" } } */"}, {"sha": "04446754cb79e52719799f2faeaaf2636e09d657", "filename": "gcc/testsuite/gcc.target/aarch64/vect-init-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-init-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-init-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-init-2.c?ref=85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#define vector __attribute__((vector_size(16)))\n+\n+vector float combine (float a, float b, float d)\n+{\n+  return (vector float) { a, b, a, d };\n+}\n+\n+/* { dg-final { scan-assembler-not \"movi\\t\" } } */\n+/* { dg-final { scan-assembler-not \"orr\\t\" } } */"}, {"sha": "b5822b7fcb7b836c9e26b9590b42fd1a393b8a0b", "filename": "gcc/testsuite/gcc.target/aarch64/vect-init-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-init-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-init-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-init-3.c?ref=85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#define vector __attribute__((vector_size(16)))\n+\n+vector float combine (float a, float b)\n+{\n+  return (vector float) { a, b, a, b };\n+}\n+\n+/* { dg-final { scan-assembler-not \"movi\\t\" } } */\n+/* { dg-final { scan-assembler-not \"orr\\t\" } } */"}, {"sha": "09a00958f14aa08abe73015b1b44772faca9a21a", "filename": "gcc/testsuite/gcc.target/aarch64/vect-init-4.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-init-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-init-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-init-4.c?ref=85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#define vector __attribute__((vector_size(16)))\n+\n+vector float combine (float a, float b)\n+{\n+  return (vector float) { a, b, b, a };\n+}\n+\n+/* { dg-final { scan-assembler-not \"movi\\t\" } } */\n+/* { dg-final { scan-assembler-not \"orr\\t\" } } */"}, {"sha": "76d5502d54b4d5dc5e539090474300095147ef47", "filename": "gcc/testsuite/gcc.target/aarch64/vect-init-5.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-init-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-init-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-init-5.c?ref=85c1b6d7c855fd1b76a385af2b7f2c56bf3b7f11", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#define vector __attribute__((vector_size(16)))\n+\n+vector float combine (float a, float b)\n+{\n+  return (vector float) { a, b, a, a };\n+}\n+\n+/* { dg-final { scan-assembler-not \"movi\\t\" } } */\n+/* { dg-final { scan-assembler-not \"orr\\t\" } } */"}]}