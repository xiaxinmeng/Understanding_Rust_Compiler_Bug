{"sha": "fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU5MDdjMWZkMmYzMmNlM2JkNjJmYWYxYmQ4M2MzNmY4MGZhNjQxNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-11-29T14:33:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-11-29T14:33:27Z"}, "message": "re PR target/54700 (Optimize away x<0 as mask argument of a blend.)\n\n\tPR target/54700\n\t* config/i386/sse.md (ssebytemode): Add V16SI, V8SI and V4SI entries.\n\t(ssefltmodesuffix, ssefltvecmode): New define_mode_attrs.\n\t(*<sse4_1>_blendv<ssemodesuffix><avxsizesuffix>_lt,\n\t*<sse4_1>_blendv<ssefltmodesuffix><avxsizesuffix>_ltint,\n\t*<sse4_1_avx2>_pblendvb_lt): New define_insns.\n\n\t* g++.target/i386/sse4_1-pr54700-1.C: New test.\n\t* g++.target/i386/sse4_1-pr54700-2.C: New test.\n\t* g++.target/i386/avx-pr54700-1.C: New test.\n\t* g++.target/i386/avx-pr54700-2.C: New test.\n\t* g++.target/i386/avx2-pr54700-1.C: New test.\n\t* g++.target/i386/avx2-pr54700-2.C: New test.\n\t* g++.target/i386/sse4_1-check.h: New file.\n\t* g++.target/i386/avx-check.h: New file.\n\t* g++.target/i386/avx2-check.h: New file.\n\t* g++.target/i386/m128-check.h: New file.\n\t* g++.target/i386/m256-check.h: New file.\n\t* g++.target/i386/avx-os-support.h: New file.\n\nFrom-SVN: r266621", "tree": {"sha": "351830f5adba5d433867f9262397b5cef2762e66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/351830f5adba5d433867f9262397b5cef2762e66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f06e47d7b644b4598a85f89eb76c13298e6e5d9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f06e47d7b644b4598a85f89eb76c13298e6e5d9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f06e47d7b644b4598a85f89eb76c13298e6e5d9f"}], "stats": {"total": 405, "additions": 404, "deletions": 1}, "files": [{"sha": "928c37c6b2e118fd21260750a79e7607f6fd2351", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414", "patch": "@@ -1,5 +1,12 @@\n 2018-11-29  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/54700\n+\t* config/i386/sse.md (ssebytemode): Add V16SI, V8SI and V4SI entries.\n+\t(ssefltmodesuffix, ssefltvecmode): New define_mode_attrs.\n+\t(*<sse4_1>_blendv<ssemodesuffix><avxsizesuffix>_lt,\n+\t*<sse4_1>_blendv<ssefltmodesuffix><avxsizesuffix>_ltint,\n+\t*<sse4_1_avx2>_pblendvb_lt): New define_insns.\n+\n \tPR target/88152\n \t* tree.h (build_uniform_cst, uniform_integer_cst_p): Declare.\n \t* tree.c (build_uniform_cst, uniform_integer_cst_p): New functions."}, {"sha": "3f3b1c97ad5d6be7772cf283a2fa4ae9fa0ac3b3", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 77, "deletions": 1, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414", "patch": "@@ -601,7 +601,8 @@\n    (V4DI \"V8DI\") (V8DI \"V16DI\")])\n \n (define_mode_attr ssebytemode\n-  [(V8DI \"V64QI\") (V4DI \"V32QI\") (V2DI \"V16QI\")])\n+  [(V8DI \"V64QI\") (V4DI \"V32QI\") (V2DI \"V16QI\")\n+   (V16SI \"V64QI\") (V8SI \"V32QI\") (V4SI \"V16QI\")])\n \n ;; All 128bit vector integer modes\n (define_mode_iterator VI_128 [V16QI V8HI V4SI V2DI])\n@@ -15681,6 +15682,60 @@\n \t       ]\n \t       (const_string \"<ssevecmode>\")))])\n \n+(define_insn \"*<sse4_1>_blendv<ssemodesuffix><avxsizesuffix>_lt\"\n+  [(set (match_operand:VF_128_256 0 \"register_operand\" \"=Yr,*x,x\")\n+\t(unspec:VF_128_256\n+\t  [(match_operand:VF_128_256 1 \"register_operand\" \"0,0,x\")\n+\t   (match_operand:VF_128_256 2 \"vector_operand\" \"YrBm,*xBm,xm\")\n+\t   (subreg:VF_128_256\n+\t     (lt:<sseintvecmode>\n+\t       (match_operand:<sseintvecmode> 3 \"register_operand\" \"Yz,Yz,x\")\n+\t       (match_operand:<sseintvecmode> 4 \"const0_operand\" \"C,C,C\")) 0)]\n+\t  UNSPEC_BLENDV))]\n+  \"TARGET_SSE4_1\"\n+  \"@\n+   blendv<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n+   blendv<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n+   vblendv<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"ssemov\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix_data16\" \"1,1,*\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n+   (set_attr \"btver2_decode\" \"vector,vector,vector\") \n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_mode_attr ssefltmodesuffix\n+  [(V2DI \"pd\") (V4DI \"pd\") (V4SI \"ps\") (V8SI \"ps\")])\n+\n+(define_mode_attr ssefltvecmode\n+  [(V2DI \"V2DF\") (V4DI \"V4DF\") (V4SI \"V4SF\") (V8SI \"V8SF\")])\n+\n+(define_insn \"*<sse4_1>_blendv<ssefltmodesuffix><avxsizesuffix>_ltint\"\n+  [(set (match_operand:<ssebytemode> 0 \"register_operand\" \"=Yr,*x,x\")\n+\t(unspec:<ssebytemode>\n+\t  [(match_operand:<ssebytemode> 1 \"register_operand\" \"0,0,x\")\n+\t   (match_operand:<ssebytemode> 2 \"vector_operand\" \"YrBm,*xBm,xm\")\n+\t   (subreg:<ssebytemode>\n+\t     (lt:VI48_AVX\n+\t       (match_operand:VI48_AVX 3 \"register_operand\" \"Yz,Yz,x\")\n+\t       (match_operand:VI48_AVX 4 \"const0_operand\" \"C,C,C\")) 0)]\n+\t  UNSPEC_BLENDV))]\n+  \"TARGET_SSE4_1\"\n+  \"@\n+   blendv<ssefltmodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n+   blendv<ssefltmodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n+   vblendv<ssefltmodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"ssemov\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix_data16\" \"1,1,*\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n+   (set_attr \"btver2_decode\" \"vector,vector,vector\") \n+   (set_attr \"mode\" \"<ssefltvecmode>\")])\n+\n (define_insn \"<sse4_1>_dp<ssemodesuffix><avxsizesuffix>\"\n   [(set (match_operand:VF_128_256 0 \"register_operand\" \"=Yr,*x,x\")\n \t(unspec:VF_128_256\n@@ -15779,6 +15834,27 @@\n    (set_attr \"btver2_decode\" \"vector,vector,vector\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"*<sse4_1_avx2>_pblendvb_lt\"\n+  [(set (match_operand:VI1_AVX2 0 \"register_operand\" \"=Yr,*x,x\")\n+\t(unspec:VI1_AVX2\n+\t  [(match_operand:VI1_AVX2 1 \"register_operand\"  \"0,0,x\")\n+\t   (match_operand:VI1_AVX2 2 \"vector_operand\" \"YrBm,*xBm,xm\")\n+\t   (lt:VI1_AVX2 (match_operand:VI1_AVX2 3 \"register_operand\" \"Yz,Yz,x\")\n+\t\t\t(match_operand:VI1_AVX2 4 \"const0_operand\" \"C,C,C\"))]\n+\t  UNSPEC_BLENDV))]\n+  \"TARGET_SSE4_1\"\n+  \"@\n+   pblendvb\\t{%3, %2, %0|%0, %2, %3}\n+   pblendvb\\t{%3, %2, %0|%0, %2, %3}\n+   vpblendvb\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"*,*,1\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n+   (set_attr \"btver2_decode\" \"vector,vector,vector\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"sse4_1_pblendw\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=Yr,*x,x\")\n \t(vec_merge:V8HI"}, {"sha": "abf89361fbea2a4dfe067b82e0434c6238104c9c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414", "patch": "@@ -1,5 +1,19 @@\n 2018-11-29  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/54700\n+\t* g++.target/i386/sse4_1-pr54700-1.C: New test.\n+\t* g++.target/i386/sse4_1-pr54700-2.C: New test.\n+\t* g++.target/i386/avx-pr54700-1.C: New test.\n+\t* g++.target/i386/avx-pr54700-2.C: New test.\n+\t* g++.target/i386/avx2-pr54700-1.C: New test.\n+\t* g++.target/i386/avx2-pr54700-2.C: New test.\n+\t* g++.target/i386/sse4_1-check.h: New file.\n+\t* g++.target/i386/avx-check.h: New file.\n+\t* g++.target/i386/avx2-check.h: New file.\n+\t* g++.target/i386/m128-check.h: New file.\n+\t* g++.target/i386/m256-check.h: New file.\n+\t* g++.target/i386/avx-os-support.h: New file.\n+\n \tPR target/88152\n \t* g++.dg/tree-ssa/pr88152-1.C: New test.\n \t* g++.dg/tree-ssa/pr88152-2.C: New test."}, {"sha": "1e0f632598469519ea63cd30dcdc7ff9c4d77fd0", "filename": "gcc/testsuite/g++.target/i386/avx-check.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx-check.h?ref=fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414", "patch": "@@ -0,0 +1 @@\n+#include \"../../gcc.target/i386/avx-check.h\""}, {"sha": "fd846ed753e862ccf779ebde2f62dac095a96648", "filename": "gcc/testsuite/g++.target/i386/avx-os-support.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx-os-support.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx-os-support.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx-os-support.h?ref=fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414", "patch": "@@ -0,0 +1 @@\n+#include \"../../gcc.target/i386/avx-os-support.h\""}, {"sha": "ef696886ce67f7a9e872eedeaef3f60ba5888c0c", "filename": "gcc/testsuite/g++.target/i386/avx-pr54700-1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx-pr54700-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx-pr54700-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx-pr54700-1.C?ref=fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414", "patch": "@@ -0,0 +1,9 @@\n+/* PR target/54700 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -std=c++14 -mavx -mno-xop -mno-avx2\" } */\n+/* { dg-final { scan-assembler-not \"vpcmpgt\\[bdq]\" } } */\n+/* { dg-final { scan-assembler-times \"vpblendvb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vblendvps\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vblendvpd\" 4 } } */\n+\n+#include \"sse4_1-pr54700-1.C\""}, {"sha": "e3556f312179b531a67ee46f004d4c54b0bd64c4", "filename": "gcc/testsuite/g++.target/i386/avx-pr54700-2.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx-pr54700-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx-pr54700-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx-pr54700-2.C?ref=fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414", "patch": "@@ -0,0 +1,8 @@\n+/* PR target/54700 */\n+/* { dg-do run { target avx } } */\n+/* { dg-options \"-O2 -std=c++14 -mavx -mno-xop -mno-avx2\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_1-pr54700-2.C\""}, {"sha": "a63e191e4e6155a9d4b5ba5c6f5612270aee012d", "filename": "gcc/testsuite/g++.target/i386/avx2-check.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx2-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx2-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx2-check.h?ref=fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414", "patch": "@@ -0,0 +1 @@\n+#include \"../../gcc.target/i386/avx2-check.h\""}, {"sha": "b685c2aa28bb820a2d7a3f49351b09df3f491419", "filename": "gcc/testsuite/g++.target/i386/avx2-pr54700-1.C", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx2-pr54700-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx2-pr54700-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx2-pr54700-1.C?ref=fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414", "patch": "@@ -0,0 +1,69 @@\n+/* PR target/54700 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -std=c++14 -mavx2 -mno-xop -mno-avx512f\" } */\n+/* { dg-final { scan-assembler-not \"vpcmpgt\\[bdq]\" } } */\n+/* { dg-final { scan-assembler-times \"vpblendvb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vblendvps\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vblendvpd\" 4 } } */\n+\n+#include <x86intrin.h>\n+\n+__attribute__((noipa)) __v32qi\n+f1 (__v32qi a, __v32qi b, __v32qi c)\n+{\n+  return a < 0 ? b : c;\n+}\n+\n+__attribute__((noipa)) __v32qi\n+f2 (__v32qi a, __v32qi b, __v32qi c)\n+{\n+  return a >= 0 ? b : c;\n+}\n+\n+__attribute__((noipa)) __v8si\n+f3 (__v8si a, __v8si b, __v8si c)\n+{\n+  return a < 0 ? b : c;\n+}\n+\n+__attribute__((noipa)) __v8si\n+f4 (__v8si a, __v8si b, __v8si c)\n+{\n+  return a >= 0 ? b : c;\n+}\n+\n+__attribute__((noipa)) __v4di\n+f5 (__v4di a, __v4di b, __v4di c)\n+{\n+  return a < 0 ? b : c;\n+}\n+\n+__attribute__((noipa)) __v4di\n+f6 (__v4di a, __v4di b, __v4di c)\n+{\n+  return a >= 0 ? b : c;\n+}\n+\n+__attribute__((noipa)) __v8sf\n+f7 (__v8si a, __v8sf b, __v8sf c)\n+{\n+  return a < 0 ? b : c;\n+}\n+\n+__attribute__((noipa)) __v8sf\n+f8 (__v8si a, __v8sf b, __v8sf c)\n+{\n+  return a >= 0 ? b : c;\n+}\n+\n+__attribute__((noipa)) __v4df\n+f9 (__v4di a, __v4df b, __v4df c)\n+{\n+  return a < 0 ? b : c;\n+}\n+\n+__attribute__((noipa)) __v4df\n+f10 (__v4di a, __v4df b, __v4df c)\n+{\n+  return a >= 0 ? b : c;\n+}"}, {"sha": "c9054e5dee7bf762fde3a210e79ddb1aac54e3d1", "filename": "gcc/testsuite/g++.target/i386/avx2-pr54700-2.C", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx2-pr54700-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx2-pr54700-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx2-pr54700-2.C?ref=fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414", "patch": "@@ -0,0 +1,72 @@\n+/* PR target/54700 */\n+/* { dg-do run { target avx2 } } */\n+/* { dg-options \"-O2 -std=c++14 -mavx2 -mno-xop -mno-avx512f\" } */\n+\n+#include \"avx2-check.h\"\n+\n+#define TEST avx2_test\n+\n+#include \"avx2-pr54700-1.C\"\n+\n+static void\n+TEST ()\n+{\n+  __v32qi v32qia = { -128, 12, -1, 127, 115, 0, -19, 125, -125, 12, 0, -37, 37, 15, 98, -105,\n+\t\t     0, 1, 2, 3, -1, -2, -3, -4, 4, -5, 5, -6, 6, -7, 7, -8 };\n+  __v32qi v32qib = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\n+\t\t     -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16 };\n+  __v32qi v32qic = { 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n+\t\t     -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32 };\n+  __v32qi v32qie = { 1, 18, 3, 20, 21, 22, 7, 24, 9, 26, 27, 12, 29, 30, 31, 16,\n+\t\t     -17, -18, -19, -20, -5, -6, -7, -8, -25, -10, -27, -12, -29, -14, -31, -16 };\n+  __v32qi v32qif = { 17, 2, 19, 4, 5, 6, 23, 8, 25, 10, 11, 28, 13, 14, 15, 32,\n+\t\t     -1, -2, -3, -4, -21, -22, -23, -24, -9, -26, -11, -28, -13, -30, -15, -32 };\n+  __v32qi v32qir = f1 (v32qia, v32qib, v32qic);\n+  if (__builtin_memcmp (&v32qir, &v32qie, sizeof (__v32qi)))\n+    __builtin_abort ();\n+  v32qir = f2 (v32qia, v32qib, v32qic);\n+  if (__builtin_memcmp (&v32qir, &v32qif, sizeof (__v32qi)))\n+    __builtin_abort ();\n+  __v8si v8sia = { __INT_MAX__, -__INT_MAX__ - 1, -32, 12, __INT_MAX__ - 2, -__INT_MAX__, 15, -1 };\n+  __v8si v8sib = { 1, 2, 3, 4, -1, -2, -3, -4 };\n+  __v8si v8sic = { 5, 6, 7, 8, -5, -6, -7, -8 };\n+  __v8si v8sie = { 5, 2, 3, 8, -5, -2, -7, -4 };\n+  __v8si v8sif = { 1, 6, 7, 4, -1, -6, -3, -8 };\n+  __v8si v8sir = f3 (v8sia, v8sib, v8sic);\n+  if (__builtin_memcmp (&v8sir, &v8sie, sizeof (__v8si)))\n+    __builtin_abort ();\n+  v8sir = f4 (v8sia, v8sib, v8sic);\n+  if (__builtin_memcmp (&v8sir, &v8sif, sizeof (__v8si)))\n+    __builtin_abort ();\n+  __v4di v4dia = { -__LONG_LONG_MAX__, 1000LL * __INT_MAX__, __LONG_LONG_MAX__, -2 };\n+  __v4di v4dib = { 1, 2, -1, -2 };\n+  __v4di v4dic = { 3, 4, -3, -4 };\n+  __v4di v4die = { 1, 4, -3, -2 };\n+  __v4di v4dif = { 3, 2, -1, -4 };\n+  __v4di v4dir = f5 (v4dia, v4dib, v4dic);\n+  if (__builtin_memcmp (&v4dir, &v4die, sizeof (__v4di)))\n+    __builtin_abort ();\n+  v4dir = f6 (v4dia, v4dib, v4dic);\n+  if (__builtin_memcmp (&v4dir, &v4dif, sizeof (__v4di)))\n+    __builtin_abort ();\n+  __v8sf v8sfb = { 1.0f, 2.0f, 3.0f, 4.0f, -1.0f, -2.0f, -3.0f, -4.0f };\n+  __v8sf v8sfc = { 5.0f, 6.0f, 7.0f, 8.0f, -5.0f, -6.0f, -7.0f, -8.0f };\n+  __v8sf v8sfe = { 5.0f, 2.0f, 3.0f, 8.0f, -5.0f, -2.0f, -7.0f, -4.0f };\n+  __v8sf v8sff = { 1.0f, 6.0f, 7.0f, 4.0f, -1.0f, -6.0f, -3.0f, -8.0f };\n+  __v8sf v8sfr = f7 (v8sia, v8sfb, v8sfc);\n+  if (__builtin_memcmp (&v8sfr, &v8sfe, sizeof (__v8sf)))\n+    __builtin_abort ();\n+  v8sfr = f8 (v8sia, v8sfb, v8sfc);\n+  if (__builtin_memcmp (&v8sfr, &v8sff, sizeof (__v8sf)))\n+    __builtin_abort ();\n+  __v4df v4dfb = { 1.0, 2.0, -1.0, -2.0 };\n+  __v4df v4dfc = { 3.0, 4.0, -3.0, -4.0 };\n+  __v4df v4dfe = { 1.0, 4.0, -3.0, -2.0 };\n+  __v4df v4dff = { 3.0, 2.0, -1.0, -4.0 };\n+  __v4df v4dfr = f9 (v4dia, v4dfb, v4dfc);\n+  if (__builtin_memcmp (&v4dfr, &v4dfe, sizeof (__v4df)))\n+    __builtin_abort ();\n+  v4dfr = f10 (v4dia, v4dfb, v4dfc);\n+  if (__builtin_memcmp (&v4dfr, &v4dff, sizeof (__v4df)))\n+    __builtin_abort ();\n+}"}, {"sha": "ce554fd4daf567911d5b36b7957a4025cb1b579f", "filename": "gcc/testsuite/g++.target/i386/m128-check.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fm128-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fm128-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fm128-check.h?ref=fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414", "patch": "@@ -0,0 +1 @@\n+#include \"../../gcc.target/i386/m128-check.h\""}, {"sha": "e85125439b919bc5aff1f481e66361e7de7488cd", "filename": "gcc/testsuite/g++.target/i386/m256-check.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fm256-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fm256-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fm256-check.h?ref=fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414", "patch": "@@ -0,0 +1 @@\n+#include \"../../gcc.target/i386/m256-check.h\""}, {"sha": "330ec54468d6fa9c08b910cadd0cd753d53c5180", "filename": "gcc/testsuite/g++.target/i386/sse4_1-check.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fsse4_1-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fsse4_1-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fsse4_1-check.h?ref=fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414", "patch": "@@ -0,0 +1 @@\n+#include \"../../gcc.target/i386/sse4_1-check.h\""}, {"sha": "2b5cdb14b13a8bdba5706a5823ba2b799ba9c34a", "filename": "gcc/testsuite/g++.target/i386/sse4_1-pr54700-1.C", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fsse4_1-pr54700-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fsse4_1-pr54700-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fsse4_1-pr54700-1.C?ref=fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414", "patch": "@@ -0,0 +1,69 @@\n+/* PR target/54700 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -std=c++14 -msse4 -mno-avx -mno-xop\" } */\n+/* { dg-final { scan-assembler-not \"pcmpgt\\[bdq]\" } } */\n+/* { dg-final { scan-assembler-times \"pblendvb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"blendvps\" 4 } } */\n+/* { dg-final { scan-assembler-times \"blendvpd\" 4 } } */\n+\n+#include <x86intrin.h>\n+\n+__attribute__((noipa)) __v16qi\n+f1 (__v16qi a, __v16qi b, __v16qi c)\n+{\n+  return a < 0 ? b : c;\n+}\n+\n+__attribute__((noipa)) __v16qi\n+f2 (__v16qi a, __v16qi b, __v16qi c)\n+{\n+  return a >= 0 ? b : c;\n+}\n+\n+__attribute__((noipa)) __v4si\n+f3 (__v4si a, __v4si b, __v4si c)\n+{\n+  return a < 0 ? b : c;\n+}\n+\n+__attribute__((noipa)) __v4si\n+f4 (__v4si a, __v4si b, __v4si c)\n+{\n+  return a >= 0 ? b : c;\n+}\n+\n+__attribute__((noipa)) __v2di\n+f5 (__v2di a, __v2di b, __v2di c)\n+{\n+  return a < 0 ? b : c;\n+}\n+\n+__attribute__((noipa)) __v2di\n+f6 (__v2di a, __v2di b, __v2di c)\n+{\n+  return a >= 0 ? b : c;\n+}\n+\n+__attribute__((noipa)) __v4sf\n+f7 (__v4si a, __v4sf b, __v4sf c)\n+{\n+  return a < 0 ? b : c;\n+}\n+\n+__attribute__((noipa)) __v4sf\n+f8 (__v4si a, __v4sf b, __v4sf c)\n+{\n+  return a >= 0 ? b : c;\n+}\n+\n+__attribute__((noipa)) __v2df\n+f9 (__v2di a, __v2df b, __v2df c)\n+{\n+  return a < 0 ? b : c;\n+}\n+\n+__attribute__((noipa)) __v2df\n+f10 (__v2di a, __v2df b, __v2df c)\n+{\n+  return a >= 0 ? b : c;\n+}"}, {"sha": "cef7d9764f8db2a6c51499991e45efcaf3f96d48", "filename": "gcc/testsuite/g++.target/i386/sse4_1-pr54700-2.C", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fsse4_1-pr54700-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fsse4_1-pr54700-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fsse4_1-pr54700-2.C?ref=fe907c1fd2f32ce3bd62faf1bd83c36f80fa6414", "patch": "@@ -0,0 +1,73 @@\n+/* PR target/54700 */\n+/* { dg-do run { target sse4 } } */\n+/* { dg-options \"-O2 -std=c++14 -msse4 -mno-avx -mno-xop\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include \"sse4_1-pr54700-1.C\"\n+\n+static void\n+TEST ()\n+{\n+  __v16qi v16qia = { -128, 12, -1, 127, 115, 0, -19, 125, -125, 12, 0, -37, 37, 15, 98, -105 };\n+  __v16qi v16qib = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };\n+  __v16qi v16qic = { 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 };\n+  __v16qi v16qie = { 1, 18, 3, 20, 21, 22, 7, 24, 9, 26, 27, 12, 29, 30, 31, 16 };\n+  __v16qi v16qif = { 17, 2, 19, 4, 5, 6, 23, 8, 25, 10, 11, 28, 13, 14, 15, 32 };\n+  __v16qi v16qir = f1 (v16qia, v16qib, v16qic);\n+  if (__builtin_memcmp (&v16qir, &v16qie, sizeof (__v16qi)))\n+    __builtin_abort ();\n+  v16qir = f2 (v16qia, v16qib, v16qic);\n+  if (__builtin_memcmp (&v16qir, &v16qif, sizeof (__v16qi)))\n+    __builtin_abort ();\n+  __v4si v4sia = { __INT_MAX__, -__INT_MAX__ - 1, -32, 12 };\n+  __v4si v4sib = { 1, 2, 3, 4 };\n+  __v4si v4sic = { 5, 6, 7, 8 };\n+  __v4si v4sie = { 5, 2, 3, 8 };\n+  __v4si v4sif = { 1, 6, 7, 4 };\n+  __v4si v4sir = f3 (v4sia, v4sib, v4sic);\n+  if (__builtin_memcmp (&v4sir, &v4sie, sizeof (__v4si)))\n+    __builtin_abort ();\n+  v4sir = f4 (v4sia, v4sib, v4sic);\n+  if (__builtin_memcmp (&v4sir, &v4sif, sizeof (__v4si)))\n+    __builtin_abort ();\n+  __v2di v2dia = { -__LONG_LONG_MAX__, 1000LL * __INT_MAX__ };\n+  __v2di v2dib = { 1, 2 };\n+  __v2di v2dic = { 3, 4 };\n+  __v2di v2die = { 1, 4 };\n+  __v2di v2dif = { 3, 2 };\n+  __v2di v2dir = f5 (v2dia, v2dib, v2dic);\n+  if (__builtin_memcmp (&v2dir, &v2die, sizeof (__v2di)))\n+    __builtin_abort ();\n+  v2dir = f6 (v2dia, v2dib, v2dic);\n+  if (__builtin_memcmp (&v2dir, &v2dif, sizeof (__v2di)))\n+    __builtin_abort ();\n+  __v4sf v4sfb = { 1.0f, 2.0f, 3.0f, 4.0f };\n+  __v4sf v4sfc = { 5.0f, 6.0f, 7.0f, 8.0f };\n+  __v4sf v4sfe = { 5.0f, 2.0f, 3.0f, 8.0f };\n+  __v4sf v4sff = { 1.0f, 6.0f, 7.0f, 4.0f };\n+  __v4sf v4sfr = f7 (v4sia, v4sfb, v4sfc);\n+  if (__builtin_memcmp (&v4sfr, &v4sfe, sizeof (__v4sf)))\n+    __builtin_abort ();\n+  v4sfr = f8 (v4sia, v4sfb, v4sfc);\n+  if (__builtin_memcmp (&v4sfr, &v4sff, sizeof (__v4sf)))\n+    __builtin_abort ();\n+  __v2df v2dfb = { 1.0, 2.0 };\n+  __v2df v2dfc = { 3.0, 4.0 };\n+  __v2df v2dfe = { 1.0, 4.0 };\n+  __v2df v2dff = { 3.0, 2.0 };\n+  __v2df v2dfr = f9 (v2dia, v2dfb, v2dfc);\n+  if (__builtin_memcmp (&v2dfr, &v2dfe, sizeof (__v2df)))\n+    __builtin_abort ();\n+  v2dfr = f10 (v2dia, v2dfb, v2dfc);\n+  if (__builtin_memcmp (&v2dfr, &v2dff, sizeof (__v2df)))\n+    __builtin_abort ();\n+}"}]}