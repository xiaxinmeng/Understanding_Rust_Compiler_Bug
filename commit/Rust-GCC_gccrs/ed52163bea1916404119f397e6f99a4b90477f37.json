{"sha": "ed52163bea1916404119f397e6f99a4b90477f37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ1MjE2M2JlYTE5MTY0MDQxMTlmMzk3ZTZmOTlhNGI5MDQ3N2YzNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-09-14T03:45:44Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-09-14T03:45:44Z"}, "message": "compiler: fix check for notinheap conversion\n    \n    A normal pointer may not be converted to a notinheap pointer.  We were\n    erroneously permitting a conversion from a normal pointer to a\n    notinheap unsafe.Pointer, which is useless since unsafe.Pointer is not\n    marked notinheap.  Correct the test to permit a conversion from\n    unsafe.Pointer to a notinheap pointer, which is the same test that the\n    gc compiler uses.\n    \n    The test case for this is in the 1.9 runtime package.\n    \n    Reviewed-on: https://go-review.googlesource.com/62731\n\nFrom-SVN: r252745", "tree": {"sha": "9e211125ff0ef3b98eea862b4f6ee608402e7012", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e211125ff0ef3b98eea862b4f6ee608402e7012"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed52163bea1916404119f397e6f99a4b90477f37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed52163bea1916404119f397e6f99a4b90477f37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed52163bea1916404119f397e6f99a4b90477f37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed52163bea1916404119f397e6f99a4b90477f37/comments", "author": null, "committer": null, "parents": [{"sha": "09abdb23cd62999602f2dba8783017ebbb096c1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09abdb23cd62999602f2dba8783017ebbb096c1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09abdb23cd62999602f2dba8783017ebbb096c1f"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "c4600de4cc8410c91be8c1e1f830a14a58437469", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed52163bea1916404119f397e6f99a4b90477f37/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed52163bea1916404119f397e6f99a4b90477f37/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=ed52163bea1916404119f397e6f99a4b90477f37", "patch": "@@ -1,4 +1,4 @@\n-52ebad939927e6cbfb48dd277cef8db451e36533\n+8c6d9ff6f60b737d1e96c0dab0b4e67402bf3316\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "cdf1f402834042c90993ccfb554ab988bfd2f01f", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed52163bea1916404119f397e6f99a4b90477f37/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed52163bea1916404119f397e6f99a4b90477f37/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=ed52163bea1916404119f397e6f99a4b90477f37", "patch": "@@ -747,16 +747,16 @@ Type::are_convertible(const Type* lhs, const Type* rhs, std::string* reason)\n     return true;\n \n   // A pointer to a regular type may not be converted to a pointer to\n-  // a type that may not live in the heap, except when converting to\n+  // a type that may not live in the heap, except when converting from\n   // unsafe.Pointer.\n   if (lhs->points_to() != NULL\n       && rhs->points_to() != NULL\n-      && !rhs->points_to()->in_heap()\n-      && lhs->points_to()->in_heap()\n-      && !lhs->is_unsafe_pointer_type())\n+      && !lhs->points_to()->in_heap()\n+      && rhs->points_to()->in_heap()\n+      && !rhs->is_unsafe_pointer_type())\n     {\n       if (reason != NULL)\n-\treason->assign(_(\"conversion from notinheap type to normal type\"));\n+\treason->assign(_(\"conversion from normal type to notinheap type\"));\n       return false;\n     }\n "}]}