{"sha": "64b33a7e1eb495404a6a74b8b69368580b1ee874", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRiMzNhN2UxZWI0OTU0MDRhNmE3NGI4YjY5MzY4NTgwYjFlZTg3NA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-01-07T08:09:51Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-01-07T08:09:51Z"}, "message": "re PR fortran/41872 (wrong-code: Issues with allocatable scalars)\n\n2010-01-07  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/41872\n        * trans-decl.c (gfc_trans_deferred_vars): Don't initialize\n        allocatable scalars with SAVE attribute.\n\n2010-01-07  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/41872\n        * gfortran.dg/allocatable_scalar_7.f90: New test.\n\nFrom-SVN: r155687", "tree": {"sha": "f1a8315beebebdf1fc7c30f8ca16dd1af9944b99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1a8315beebebdf1fc7c30f8ca16dd1af9944b99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64b33a7e1eb495404a6a74b8b69368580b1ee874", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64b33a7e1eb495404a6a74b8b69368580b1ee874", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64b33a7e1eb495404a6a74b8b69368580b1ee874", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64b33a7e1eb495404a6a74b8b69368580b1ee874/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2e8e6a99ee156e8cd15b5e4b9a0eeaa49e2a970b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e8e6a99ee156e8cd15b5e4b9a0eeaa49e2a970b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e8e6a99ee156e8cd15b5e4b9a0eeaa49e2a970b"}], "stats": {"total": 96, "additions": 70, "deletions": 26}, "files": [{"sha": "43a3af2fe19c3096c3f616233cb44be93fcc654c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64b33a7e1eb495404a6a74b8b69368580b1ee874/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64b33a7e1eb495404a6a74b8b69368580b1ee874/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=64b33a7e1eb495404a6a74b8b69368580b1ee874", "patch": "@@ -1,3 +1,9 @@\n+2010-01-07  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/41872\n+\t* trans-decl.c (gfc_trans_deferred_vars): Don't initialize\n+\tallocatable scalars with SAVE attribute.\n+\n 2010-01-05  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/42517"}, {"sha": "cf9bef31d93770869e6040680dc88417eca45c74", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 32, "deletions": 25, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64b33a7e1eb495404a6a74b8b69368580b1ee874/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64b33a7e1eb495404a6a74b8b69368580b1ee874/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=64b33a7e1eb495404a6a74b8b69368580b1ee874", "patch": "@@ -3188,31 +3188,38 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, tree fnbody)\n \t       || (sym->ts.type == BT_CLASS\n \t\t   && sym->ts.u.derived->components->attr.allocatable))\n \t{\n-\t  /* Nullify and automatic deallocation of allocatable scalars.  */\n-\t  tree tmp;\n-\t  gfc_expr *e;\n-\t  gfc_se se;\n-\t  stmtblock_t block;\n-\n-\t  e = gfc_lval_expr_from_sym (sym);\n-\t  if (sym->ts.type == BT_CLASS)\n-\t    gfc_add_component_ref (e, \"$data\");\n-\n-\t  gfc_init_se (&se, NULL);\n-\t  se.want_pointer = 1;\n-\t  gfc_conv_expr (&se, e);\n-\t  gfc_free_expr (e);\n-\n-\t  /* Nullify when entering the scope.  */\n-\t  gfc_start_block (&block);\n-\t  gfc_add_modify (&block, se.expr, fold_convert (TREE_TYPE (se.expr),\n-\t\t\t\t\t\t\t null_pointer_node));\n-\t  gfc_add_expr_to_block (&block, fnbody);\n-\n-\t  /* Deallocate when leaving the scope. Nullifying is not needed.  */\n-\t  tmp = gfc_deallocate_with_status (se.expr, NULL_TREE, true, NULL);\n-\t  gfc_add_expr_to_block (&block, tmp);\n-\t  fnbody = gfc_finish_block (&block);\n+\t  if (!sym->attr.save)\n+\t    {\n+\t      /* Nullify and automatic deallocation of allocatable\n+\t\t scalars.  */\n+\t      tree tmp;\n+\t      gfc_expr *e;\n+\t      gfc_se se;\n+\t      stmtblock_t block;\n+\n+\t      e = gfc_lval_expr_from_sym (sym);\n+\t      if (sym->ts.type == BT_CLASS)\n+\t\tgfc_add_component_ref (e, \"$data\");\n+\n+\t      gfc_init_se (&se, NULL);\n+\t      se.want_pointer = 1;\n+\t      gfc_conv_expr (&se, e);\n+\t      gfc_free_expr (e);\n+\n+\t      /* Nullify when entering the scope.  */\n+\t      gfc_start_block (&block);\n+\t      gfc_add_modify (&block, se.expr,\n+\t\t\t      fold_convert (TREE_TYPE (se.expr),\n+\t\t\t\t\t    null_pointer_node));\n+\t      gfc_add_expr_to_block (&block, fnbody);\n+\n+\t      /* Deallocate when leaving the scope. Nullifying is not\n+\t\t needed.  */\n+\t      tmp = gfc_deallocate_with_status (se.expr, NULL_TREE, true,\n+\t\t\t\t\t\tNULL);\n+\t      gfc_add_expr_to_block (&block, tmp);\n+\t      fnbody = gfc_finish_block (&block);\n+\t    }\n \t}\n       else if (sym->ts.type == BT_CHARACTER)\n \t{"}, {"sha": "6e0a9038ba8b63fb24aeb78df3910d5c04f94746", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64b33a7e1eb495404a6a74b8b69368580b1ee874/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64b33a7e1eb495404a6a74b8b69368580b1ee874/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=64b33a7e1eb495404a6a74b8b69368580b1ee874", "patch": "@@ -1,9 +1,14 @@\n+2010-01-07  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/41872\n+\t* gfortran.dg/allocatable_scalar_7.f90: New test.\n+\n 2010-01-06  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.c-torture/compile/pr42632.c: New testcase.\n \n 2010-01-05  H.J. Lu  <hongjiu.lu@intel.com>\n- \n+\n \tPR target/42542\n \t* gcc.target/i386/pr42542-4.c: New.\n \t* gcc.target/i386/pr42542-4a.c: Likewise."}, {"sha": "001dd241b940b80ffdba5659120e8fcee21111f7", "filename": "gcc/testsuite/gfortran.dg/allocatable_scalar_7.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64b33a7e1eb495404a6a74b8b69368580b1ee874/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64b33a7e1eb495404a6a74b8b69368580b1ee874/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_7.f90?ref=64b33a7e1eb495404a6a74b8b69368580b1ee874", "patch": "@@ -0,0 +1,26 @@\n+! { dg-do run }\n+!\n+! PR fortran/41872\n+!\n+! Allocatable scalars with SAVE\n+!\n+program test\n+  implicit none\n+  call sub (0)\n+  call sub (1)\n+  call sub (2)\n+contains\n+  subroutine sub (no)\n+    integer, intent(in) :: no\n+    integer, allocatable, save :: a\n+    if (no == 0) then\n+      if (allocated (a)) call abort ()\n+      allocate (a)\n+    else if (no == 1) then\n+      if (.not. allocated (a)) call abort ()\n+      deallocate (a)\n+    else\n+      if (allocated (a)) call abort ()\n+    end if\n+  end subroutine sub\n+end program test"}]}