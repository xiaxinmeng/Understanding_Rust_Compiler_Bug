{"sha": "9f6177175d92b4d7827cd9de3240be354b2aa47b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY2MTc3MTc1ZDkyYjRkNzgyN2NkOWRlMzI0MGJlMzU0YjJhYTQ3Yg==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gnu.ai.mit.edu", "date": "1997-09-30T03:36:39Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-09-30T03:36:39Z"}, "message": "Makefile.in (parse.o, decl.o): Also depend on $(srcdir)/../except.h $(srcdir)/../output.h.\n\nMon Sep 29 19:57:51 1997  H.J. Lu  (hjl@gnu.ai.mit.edu)\n\n\t* Makefile.in (parse.o, decl.o): Also depend on\n\t$(srcdir)/../except.h $(srcdir)/../output.h.\n\t(decl2.o): Also depend on $(srcdir)/../expr.h ../insn-codes.h\n\t$(srcdir)/../except.h $(srcdir)/../output.h.\n\t(typeck.o, init.o): Also depend on $(srcdir)/../expr.h\n\t../insn-codes.h.\n\n\t* call.c, cp-tree.h, decl.c, tree.c: Finish prototyping.\n\n\t* expr.c (cplus_expand_expr): Make it static.\n\n\t* decl2.c, init.c, typeck.c: Include \"expr.h\".\n\t(expand_expr): Use proper values when calling the function.\n\nFrom-SVN: r15801", "tree": {"sha": "3cc206011afb7e47eb6d1b156f7c6ce23549aec9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cc206011afb7e47eb6d1b156f7c6ce23549aec9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f6177175d92b4d7827cd9de3240be354b2aa47b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f6177175d92b4d7827cd9de3240be354b2aa47b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f6177175d92b4d7827cd9de3240be354b2aa47b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f6177175d92b4d7827cd9de3240be354b2aa47b/comments", "author": null, "committer": null, "parents": [{"sha": "3a6eabfad6aae7e06cee8d7c12995e2ca423e84b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a6eabfad6aae7e06cee8d7c12995e2ca423e84b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a6eabfad6aae7e06cee8d7c12995e2ca423e84b"}], "stats": {"total": 73, "additions": 57, "deletions": 16}, "files": [{"sha": "27de63673793fced17b2020b98811d49b16b56f2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6177175d92b4d7827cd9de3240be354b2aa47b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6177175d92b4d7827cd9de3240be354b2aa47b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9f6177175d92b4d7827cd9de3240be354b2aa47b", "patch": "@@ -1,3 +1,19 @@\n+Mon Sep 29 19:57:51 1997  H.J. Lu  (hjl@gnu.ai.mit.edu)\n+\n+\t* Makefile.in (parse.o, decl.o): Also depend on\n+\t$(srcdir)/../except.h $(srcdir)/../output.h.\n+\t(decl2.o): Also depend on $(srcdir)/../expr.h ../insn-codes.h\n+\t$(srcdir)/../except.h $(srcdir)/../output.h.\n+\t(typeck.o, init.o): Also depend on $(srcdir)/../expr.h\n+\t../insn-codes.h.\n+\n+\t* call.c, cp-tree.h, decl.c, tree.c: Finish prototyping.\n+\n+\t* expr.c (cplus_expand_expr): Make it static. \n+\n+\t* decl2.c, init.c, typeck.c: Include \"expr.h\".\n+\t(expand_expr): Use proper values when calling the function.\n+\n Mon Sep 29 11:05:54 1997  Alexandre Oliva  <oliva@dcc.unicamp.br>\n \n \t* lang-options.h: new -Wold-style-cast flag."}, {"sha": "4b73de9ec49266989dd895fc05cf26d6fbd9e34d", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6177175d92b4d7827cd9de3240be354b2aa47b/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6177175d92b4d7827cd9de3240be354b2aa47b/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=9f6177175d92b4d7827cd9de3240be354b2aa47b", "patch": "@@ -197,7 +197,8 @@ CXX_TREE_H = $(TREE_H) cp-tree.h cp-tree.def\n PARSE_H = $(srcdir)/parse.h\n PARSE_C = $(srcdir)/parse.c\n \n-parse.o : $(PARSE_C) $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h lex.h\n+parse.o : $(PARSE_C) $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h lex.h \\\n+\t$(srcdir)/../except.h $(srcdir)/../output.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(BIG_SWITCHFLAG) \\\n   `echo $(PARSE_C) | sed 's,^\\./,,'`\n \n@@ -230,15 +231,19 @@ spew.o : spew.c $(CONFIG_H) $(CXX_TREE_H) \\\n lex.o : lex.c $(CONFIG_H) $(CXX_TREE_H) \\\n   $(PARSE_H) input.c $(srcdir)/../flags.h hash.h lex.h $(srcdir)/../c-pragma.h\n decl.o : decl.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h \\\n-  lex.h decl.h $(srcdir)/../stack.h\n+  lex.h decl.h $(srcdir)/../stack.h $(srcdir)/../output.h  \\\n+  $(srcdir)/../except.h\n decl2.o : decl2.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h \\\n-  lex.h decl.h\n+  lex.h decl.h $(srcdir)/../expr.h ../insn-codes.h $(srcdir)/../except.h \\\n+  $(srcdir)/../output.h $(srcdir)/../except.h\n typeck2.o : typeck2.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h\n-typeck.o : typeck.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h $(RTL_H)\n+typeck.o : typeck.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h $(RTL_H) \\\n+  $(srcdir)/../expr.h ../insn-codes.h\n class.o : class.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h\n call.o : call.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h class.h\n friend.o : friend.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h $(RTL_H)\n-init.o : init.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h $(RTL_H)\n+init.o : init.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h $(RTL_H) \\\n+  $(srcdir)/../expr.h ../insn-codes.h\n method.o : method.c $(CONFIG_H) $(CXX_TREE_H) class.h\n cvt.o : cvt.c $(CONFIG_H) $(CXX_TREE_H) class.h\n search.o : search.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../stack.h $(srcdir)/../flags.h"}, {"sha": "e232a382d8b9a351ec660ff1fbfe63e6c94b18ba", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6177175d92b4d7827cd9de3240be354b2aa47b/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6177175d92b4d7827cd9de3240be354b2aa47b/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=9f6177175d92b4d7827cd9de3240be354b2aa47b", "patch": "@@ -102,6 +102,7 @@ static tree non_reference PROTO((tree));\n static tree build_conv PROTO((enum tree_code, tree, tree));\n static void print_n_candidates PROTO((struct candidate *, int));\n static tree default_parm_conversions PROTO((tree, tree *));\n+static int is_subseq PROTO((tree, tree));\n \n #define EVIL_RETURN(ARG)\t((ARG).code = EVIL_CODE, (ARG))\n #define STD_RETURN(ARG)\t\t((ARG).code = STD_CODE, (ARG))"}, {"sha": "f91e680a74c5c57177029f483690c0833763cfdf", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6177175d92b4d7827cd9de3240be354b2aa47b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6177175d92b4d7827cd9de3240be354b2aa47b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9f6177175d92b4d7827cd9de3240be354b2aa47b", "patch": "@@ -2204,7 +2204,6 @@ extern void expand_throw\t\t\tPROTO((tree));\n extern tree build_throw\t\t\t\tPROTO((tree));\n \n /* in expr.c */\n-/* skip cplus_expand_expr */\n extern void init_cplus_expand\t\t\tPROTO((void));\n extern void fixup_result_decl\t\t\tPROTO((tree, struct rtx_def *));\n extern int extract_init\t\t\t\tPROTO((tree, tree));\n@@ -2289,6 +2288,7 @@ extern tree snarf_defarg\t\t\tPROTO((void));\n extern void add_defarg_fn\t\t\tPROTO((tree));\n extern void do_pending_defargs\t\t\tPROTO((void));\n extern int identifier_type\t\t\tPROTO((tree));\n+extern void yyhook\t\t\t\tPROTO((int));\n \n /* in method.c */\n extern void init_method\t\t\t\tPROTO((void));"}, {"sha": "e9b8de3f372a4fbde22129c8eea6808011a84d76", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6177175d92b4d7827cd9de3240be354b2aa47b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6177175d92b4d7827cd9de3240be354b2aa47b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9f6177175d92b4d7827cd9de3240be354b2aa47b", "patch": "@@ -42,6 +42,14 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"except.h\"\n \n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n+#ifdef NEED_DECLARATION_FREE\n+extern void free\tPROTO((void *));\n+#endif\n+\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n "}, {"sha": "50317675642b1c2395b6be7c45719e055de2293e", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6177175d92b4d7827cd9de3240be354b2aa47b/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6177175d92b4d7827cd9de3240be354b2aa47b/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=9f6177175d92b4d7827cd9de3240be354b2aa47b", "patch": "@@ -37,8 +37,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"lex.h\"\n #include \"output.h\"\n #include \"except.h\"\n-\n-extern tree get_file_function_name ();\n+#include \"expr.h\"\n \n #ifdef HAVE_STDLIB_H\n #include <stdlib.h>\n@@ -3130,7 +3129,7 @@ finish_file ()\n \t\t  expand_expr (expand_vec_init (decl, TREE_VEC_ELT (init, 0),\n \t\t\t\t\t\tTREE_VEC_ELT (init, 1),\n \t\t\t\t\t\tTREE_VEC_ELT (init, 2), 0),\n-\t\t\t       const0_rtx, VOIDmode, 0);\n+\t\t\t       const0_rtx, VOIDmode, EXPAND_NORMAL);\n \t\t}\n \t      else\n \t\texpand_assignment (decl, init, 0, 0);"}, {"sha": "a14695ddd51ff03fbc4c2e829d88f9b526fbc967", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6177175d92b4d7827cd9de3240be354b2aa47b/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6177175d92b4d7827cd9de3240be354b2aa47b/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=9f6177175d92b4d7827cd9de3240be354b2aa47b", "patch": "@@ -30,10 +30,12 @@ Boston, MA 02111-1307, USA.  */\n \n static tree extract_aggr_init PROTO((tree, tree));\n static tree extract_scalar_init PROTO((tree, tree));\n+static rtx cplus_expand_expr PROTO((tree, rtx, enum machine_mode,\n+\t\t\t\t    enum expand_modifier));\n \n /* Hook used by expand_expr to expand language-specific tree codes.  */\n \n-rtx\n+static rtx\n cplus_expand_expr (exp, target, tmode, modifier)\n      tree exp;\n      rtx target;"}, {"sha": "826c52067b1419cd703872a7e094d482db3a6403", "filename": "gcc/cp/init.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6177175d92b4d7827cd9de3240be354b2aa47b/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6177175d92b4d7827cd9de3240be354b2aa47b/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=9f6177175d92b4d7827cd9de3240be354b2aa47b", "patch": "@@ -29,6 +29,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"output.h\"\n #include \"except.h\"\n+#include \"expr.h\"\n \n extern void compiler_error ();\n \n@@ -1433,7 +1434,7 @@ expand_aggr_init_1 (binfo, true_exp, exp, init, alias_this, flags)\n \t\t    /* Unify the initialization targets.  */\n \t\t    DECL_RTL (TREE_OPERAND (init, 0)) = DECL_RTL (exp);\n \t\t  else\n-\t\t    DECL_RTL (TREE_OPERAND (init, 0)) = expand_expr (exp, NULL_RTX, VOIDmode, 0);\n+\t\t    DECL_RTL (TREE_OPERAND (init, 0)) = expand_expr (exp, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n \n \t\t  expand_expr_stmt (init);\n \t\t  return;\n@@ -1472,7 +1473,7 @@ expand_aggr_init_1 (binfo, true_exp, exp, init, alias_this, flags)\n \t      if (exp == DECL_RESULT (current_function_decl))\n \t\tDECL_INITIAL (exp) = init;\n \t      TREE_SIDE_EFFECTS (init) = 1;\n-\t      expand_expr (init, const0_rtx, VOIDmode, 0);\n+\t      expand_expr (init, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \t      free_temp_slots ();\n \t      return;\n \t    }\n@@ -2649,7 +2650,7 @@ build_new (placement, decl, init, use_global_new)\n \t      do_pending_stack_adjust ();\n \t      start_sequence_for_rtl_expr (xval);\n \t      emit_note (0, -1);\n-\t      rtxval = expand_expr (alloc_expr, NULL_RTX, VOIDmode, 0);\n+\t      rtxval = expand_expr (alloc_expr, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n \t      do_pending_stack_adjust ();\n \t      TREE_SIDE_EFFECTS (xval) = 1;\n \t      RTL_EXPR_SEQUENCE (xval) = get_insns ();\n@@ -3107,7 +3108,7 @@ expand_vec_init (decl, base, maxindex, init, from_array)\n \t      (rval,\n \t       build_binary_op (MINUS_EXPR, maxindex, iterator, 1),\n \t       type);\n-\t    expand_expr (e1, const0_rtx, VOIDmode, 0);\n+\t    expand_expr (e1, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \t    RTL_EXPR_SEQUENCE (cleanup) = get_insns ();\n \t    end_sequence ();\n "}, {"sha": "665354352b6508e5133e4daeff57e040c7670c24", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6177175d92b4d7827cd9de3240be354b2aa47b/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6177175d92b4d7827cd9de3240be354b2aa47b/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=9f6177175d92b4d7827cd9de3240be354b2aa47b", "patch": "@@ -32,6 +32,14 @@ Boston, MA 02111-1307, USA.  */\n #include <varargs.h>\n #endif\n \n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n+#ifdef NEED_DECLARATION_FREE\n+extern void free\tPROTO((void *));\n+#endif\n+\n extern void compiler_error ();\n \n static tree get_identifier_list PROTO((tree));"}, {"sha": "971cab4a17aa3722d83990d7e7e59306e4b18293", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6177175d92b4d7827cd9de3240be354b2aa47b/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6177175d92b4d7827cd9de3240be354b2aa47b/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=9f6177175d92b4d7827cd9de3240be354b2aa47b", "patch": "@@ -36,6 +36,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"cp-tree.h\"\n #include \"flags.h\"\n #include \"output.h\"\n+#include \"expr.h\"\n \n #ifdef HAVE_STRING_H\n #include <string.h>\n@@ -5645,7 +5646,7 @@ expand_target_expr (t)\n   do_pending_stack_adjust ();\n   start_sequence_for_rtl_expr (xval);\n   emit_note (0, -1);\n-  rtxval = expand_expr (t, NULL_RTX, VOIDmode, 0);\n+  rtxval = expand_expr (t, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n   do_pending_stack_adjust ();\n   TREE_SIDE_EFFECTS (xval) = 1;\n   RTL_EXPR_SEQUENCE (xval) = get_insns ();\n@@ -7119,7 +7120,7 @@ c_expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n       if (o[i] != TREE_VALUE (tail))\n \t{\n \t  expand_expr (build_modify_expr (o[i], NOP_EXPR, TREE_VALUE (tail)),\n-\t\t       const0_rtx, VOIDmode, 0);\n+\t\t       const0_rtx, VOIDmode, EXPAND_NORMAL);\n \t  free_temp_slots ();\n \t}\n       /* Detect modification of read-only values."}]}