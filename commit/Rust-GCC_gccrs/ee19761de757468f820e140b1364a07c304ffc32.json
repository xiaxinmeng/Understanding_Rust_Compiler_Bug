{"sha": "ee19761de757468f820e140b1364a07c304ffc32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUxOTc2MWRlNzU3NDY4ZjgyMGUxNDBiMTM2NGEwN2MzMDRmZmMzMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-09-17T08:42:07Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-09-17T08:42:07Z"}, "message": "basic_file_stdio.cc (__basic_file<>::close)): Don't call unnecessarily sync, that is fflush...\n\n2004-09-17  Paolo Carlini  <pcarlini@suse.de>\n\t    Andrea Arcangeli  <andrea@suse.de>\n\n\t* config/io/basic_file_stdio.cc (__basic_file<>::close)): Don't\n\tcall unnecessarily sync, that is fflush: the library, since 3.4.0\n\tdoes not use buffered fread/fwrite.\n\t* include/bits/fstream.tcc (basic_filebuf<>::overflow): Likewise.\n\nCo-Authored-By: Andrea Arcangeli <andrea@suse.de>\n\nFrom-SVN: r87636", "tree": {"sha": "0537a78e73d12f3fa97136c05db17217802c0f61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0537a78e73d12f3fa97136c05db17217802c0f61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee19761de757468f820e140b1364a07c304ffc32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee19761de757468f820e140b1364a07c304ffc32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee19761de757468f820e140b1364a07c304ffc32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee19761de757468f820e140b1364a07c304ffc32/comments", "author": null, "committer": null, "parents": [{"sha": "4ec7afd748c72bfdcc0aa684c90d6dda478b7a2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ec7afd748c72bfdcc0aa684c90d6dda478b7a2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ec7afd748c72bfdcc0aa684c90d6dda478b7a2b"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "acc46b7349b5934d416dfa4739ad98c5cb18b6ae", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee19761de757468f820e140b1364a07c304ffc32/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee19761de757468f820e140b1364a07c304ffc32/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ee19761de757468f820e140b1364a07c304ffc32", "patch": "@@ -1,3 +1,11 @@\n+2004-09-17  Paolo Carlini  <pcarlini@suse.de>\n+\t    Andrea Arcangeli  <andrea@suse.de>\n+\n+\t* config/io/basic_file_stdio.cc (__basic_file<>::close)): Don't\n+\tcall unnecessarily sync, that is fflush: the library, since 3.4.0\n+\tdoes not use buffered fread/fwrite.\n+\t* include/bits/fstream.tcc (basic_filebuf<>::overflow): Likewise.\n+\n 2004-09-15  Mark Mitchell  <mark@codesourcery.com>\n \n \t* config/cpu/arm/cxxabi_tweaks.h (__cxa_cdtor_return_type):"}, {"sha": "0a4e154ebbc9c054c953cc076a27775ef08f33d6", "filename": "libstdc++-v3/config/io/basic_file_stdio.cc", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee19761de757468f820e140b1364a07c304ffc32/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee19761de757468f820e140b1364a07c304ffc32/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc?ref=ee19761de757468f820e140b1364a07c304ffc32", "patch": "@@ -259,23 +259,21 @@ namespace std\n     __basic_file* __ret = static_cast<__basic_file*>(NULL);\n     if (this->is_open())\n       {\n-\t// In general, no need to zero errno in advance if checking\n-\t// for error first. However, C89/C99 (at variance with IEEE\n-\t// 1003.1, f.i.) do not mandate that fclose/fflush must set\n-\t// errno upon error.\n-\tint __err;\n-\terrno = 0;\n+\tint __err = 0;\n \tif (_M_cfile_created)\n-\t  do\n-\t    __err = fclose(_M_cfile);\n-\t  while (__err && errno == EINTR);\n-\telse\n-\t  do\n-\t    __err = this->sync();\n-\t  while (__err && errno == EINTR);\n+\t  {\n+\t    // In general, no need to zero errno in advance if checking\n+\t    // for error first. However, C89/C99 (at variance with IEEE\n+\t    // 1003.1, f.i.) do not mandate that fclose must set errno\n+\t    // upon error.\n+\t    errno = 0;\n+\t    do\n+\t      __err = fclose(_M_cfile);\n+\t    while (__err && errno == EINTR);\n+\t  }\n+\t_M_cfile = 0;\n \tif (!__err)\n \t  __ret = this;\n-\t_M_cfile = 0;\n       }\n     return __ret;\n   }"}, {"sha": "d3ea37ffab11e79b8e93922ad0e467c87692fe8d", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee19761de757468f820e140b1364a07c304ffc32/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee19761de757468f820e140b1364a07c304ffc32/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=ee19761de757468f820e140b1364a07c304ffc32", "patch": "@@ -396,8 +396,7 @@ namespace std\n \t      // Convert pending sequence to external representation,\n \t      // and output.\n \t      if (_M_convert_to_external(this->pbase(),\n-\t\t\t\t\t this->pptr() - this->pbase())\n-\t\t  && (!__testeof || !_M_file.sync()))\n+\t\t\t\t\t this->pptr() - this->pbase()))\n \t\t{\n \t\t  _M_set_buffer(0);\n \t\t  __ret = traits_type::not_eof(__c);\n@@ -792,7 +791,6 @@ namespace std\n     {\n       // Make sure that the internal buffer resyncs its idea of\n       // the file position with the external file.\n-      // NB: _M_file.sync() will be called within.\n       int __ret = 0;\n       if (this->pbase() < this->pptr())\n \t{"}]}