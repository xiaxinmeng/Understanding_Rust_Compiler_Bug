{"sha": "b2858c9f3ed8275a61ee02421b8fc51ab070c79e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI4NThjOWYzZWQ4Mjc1YTYxZWUwMjQyMWI4ZmM1MWFiMDcwYzc5ZQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-06-03T08:24:50Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-06-03T08:24:50Z"}, "message": "re PR c/64223 (same warning repeated twice with same line number)\n\n\tPR c/64223\n\tPR c/29358\n\t* tree.c (attribute_value_equal): Handle attribute format.\n\t(cmp_attrib_identifiers): Factor out of lookup_ident_attribute.\n\n\t* gcc.dg/pr64223-1.c: New test.\n\t* gcc.dg/pr64223-2.c: New test.\n\nFrom-SVN: r224062", "tree": {"sha": "d4477da9734232d08a6931b572a242888d3bc413", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4477da9734232d08a6931b572a242888d3bc413"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2858c9f3ed8275a61ee02421b8fc51ab070c79e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2858c9f3ed8275a61ee02421b8fc51ab070c79e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2858c9f3ed8275a61ee02421b8fc51ab070c79e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2858c9f3ed8275a61ee02421b8fc51ab070c79e/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4da60082232bc3dbf5782687e9f0ff25d733de10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4da60082232bc3dbf5782687e9f0ff25d733de10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4da60082232bc3dbf5782687e9f0ff25d733de10"}], "stats": {"total": 142, "additions": 106, "deletions": 36}, "files": [{"sha": "ad33c67fa127118a74280dd11b5053dd756ab3d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2858c9f3ed8275a61ee02421b8fc51ab070c79e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2858c9f3ed8275a61ee02421b8fc51ab070c79e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2858c9f3ed8275a61ee02421b8fc51ab070c79e", "patch": "@@ -1,3 +1,10 @@\n+2015-06-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/64223\n+\tPR c/29358\n+\t* tree.c (attribute_value_equal): Handle attribute format.\n+\t(cmp_attrib_identifiers): Factor out of lookup_ident_attribute.\n+\n 2015-06-03  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/63916"}, {"sha": "d3280fc20f34bd94e9d4bdd9df4d8bf9a82b5b84", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2858c9f3ed8275a61ee02421b8fc51ab070c79e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2858c9f3ed8275a61ee02421b8fc51ab070c79e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b2858c9f3ed8275a61ee02421b8fc51ab070c79e", "patch": "@@ -1,3 +1,10 @@\n+2015-06-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/64223\n+\tPR c/29358\n+\t* gcc.dg/pr64223-1.c: New test.\n+\t* gcc.dg/pr64223-2.c: New test.\n+\n 2015-06-03  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/63916"}, {"sha": "015bfd87fb9592ea4eff0ca398f4883fee708b0e", "filename": "gcc/testsuite/gcc.dg/pr64223-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2858c9f3ed8275a61ee02421b8fc51ab070c79e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64223-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2858c9f3ed8275a61ee02421b8fc51ab070c79e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64223-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64223-1.c?ref=b2858c9f3ed8275a61ee02421b8fc51ab070c79e", "patch": "@@ -0,0 +1,12 @@\n+/* PR c/64223: Test for duplicated warnings.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wformat\" } */\n+\n+int printf (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2)));\n+\n+void\n+foo (void)\n+{\n+  printf (\"%d\\n\", 0UL); /* { dg-bogus \"expects argument of type.*expects argument of type\" } */\n+ /* { dg-warning \"expects argument of type\" \"\" { target *-*-* } 10 } */\n+}"}, {"sha": "2a1627e99b261d93f5fa606b60f75629d5d31fd7", "filename": "gcc/testsuite/gcc.dg/pr64223-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2858c9f3ed8275a61ee02421b8fc51ab070c79e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64223-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2858c9f3ed8275a61ee02421b8fc51ab070c79e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64223-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64223-2.c?ref=b2858c9f3ed8275a61ee02421b8fc51ab070c79e", "patch": "@@ -0,0 +1,13 @@\n+/* PR c/64223: Test for duplicated warnings.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wformat\" } */\n+\n+int myprintf (const char *, ...) __attribute__ ((__format__ (printf, 1, 2)));\n+int myprintf (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2)));\n+\n+void\n+foo (void)\n+{\n+  myprintf (\"%d\\n\", 0UL); /* { dg-bogus \"expects argument of type.*expects argument of type\" } */\n+ /* { dg-warning \"expects argument of type\" \"\" { target *-*-* } 11 } */\n+}"}, {"sha": "805e2cc42c9b2303457e9066c124d985ecbbb962", "filename": "gcc/tree.c", "status": "modified", "additions": 67, "deletions": 36, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2858c9f3ed8275a61ee02421b8fc51ab070c79e/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2858c9f3ed8275a61ee02421b8fc51ab070c79e/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=b2858c9f3ed8275a61ee02421b8fc51ab070c79e", "patch": "@@ -4871,9 +4871,53 @@ simple_cst_list_equal (const_tree l1, const_tree l2)\n   return l1 == l2;\n }\n \n+/* Compare two identifier nodes representing attributes.  Either one may\n+   be in wrapped __ATTR__ form.  Return true if they are the same, false\n+   otherwise.  */\n+\n+static bool\n+cmp_attrib_identifiers (const_tree attr1, const_tree attr2)\n+{\n+  /* Make sure we're dealing with IDENTIFIER_NODEs.  */\n+  gcc_checking_assert (TREE_CODE (attr1) == IDENTIFIER_NODE\n+\t\t       && TREE_CODE (attr2) == IDENTIFIER_NODE);\n+\n+  /* Identifiers can be compared directly for equality.  */\n+  if (attr1 == attr2)\n+    return true;\n+\n+  /* If they are not equal, they may still be one in the form\n+     'text' while the other one is in the form '__text__'.  TODO:\n+     If we were storing attributes in normalized 'text' form, then\n+     this could all go away and we could take full advantage of\n+     the fact that we're comparing identifiers. :-)  */\n+  const size_t attr1_len = IDENTIFIER_LENGTH (attr1);\n+  const size_t attr2_len = IDENTIFIER_LENGTH (attr2);\n+\n+  if (attr2_len == attr1_len + 4)\n+    {\n+      const char *p = IDENTIFIER_POINTER (attr2);\n+      const char *q = IDENTIFIER_POINTER (attr1);\n+      if (p[0] == '_' && p[1] == '_'\n+\t  && p[attr2_len - 2] == '_' && p[attr2_len - 1] == '_'\n+\t  && strncmp (q, p + 2, attr1_len) == 0)\n+\treturn true;;\n+    }\n+  else if (attr2_len + 4 == attr1_len)\n+    {\n+      const char *p = IDENTIFIER_POINTER (attr2);\n+      const char *q = IDENTIFIER_POINTER (attr1);\n+      if (q[0] == '_' && q[1] == '_'\n+\t  && q[attr1_len - 2] == '_' && q[attr1_len - 1] == '_'\n+\t  && strncmp (q + 2, p, attr2_len) == 0)\n+\treturn true;\n+    }\n+\n+  return false;\n+}\n+\n /* Compare two attributes for their value identity.  Return true if the\n-   attribute values are known to be equal; otherwise return false.\n-*/\n+   attribute values are known to be equal; otherwise return false.  */\n \n bool\n attribute_value_equal (const_tree attr1, const_tree attr2)\n@@ -4883,10 +4927,25 @@ attribute_value_equal (const_tree attr1, const_tree attr2)\n \n   if (TREE_VALUE (attr1) != NULL_TREE\n       && TREE_CODE (TREE_VALUE (attr1)) == TREE_LIST\n-      && TREE_VALUE (attr2) != NULL\n+      && TREE_VALUE (attr2) != NULL_TREE\n       && TREE_CODE (TREE_VALUE (attr2)) == TREE_LIST)\n-    return (simple_cst_list_equal (TREE_VALUE (attr1),\n-\t\t\t\t   TREE_VALUE (attr2)) == 1);\n+    {\n+      /* Handle attribute format.  */\n+      if (is_attribute_p (\"format\", TREE_PURPOSE (attr1)))\n+\t{\n+\t  attr1 = TREE_VALUE (attr1);\n+\t  attr2 = TREE_VALUE (attr2);\n+\t  /* Compare the archetypes (printf/scanf/strftime/...).  */\n+\t  if (!cmp_attrib_identifiers (TREE_VALUE (attr1),\n+\t\t\t\t       TREE_VALUE (attr2)))\n+\t    return false;\n+\t  /* Archetypes are the same.  Compare the rest.  */\n+\t  return (simple_cst_list_equal (TREE_CHAIN (attr1),\n+\t\t\t\t\t TREE_CHAIN (attr2)) == 1);\n+\t}\n+      return (simple_cst_list_equal (TREE_VALUE (attr1),\n+\t\t\t\t     TREE_VALUE (attr2)) == 1);\n+    }\n \n   if ((flag_openmp || flag_openmp_simd)\n       && TREE_VALUE (attr1) && TREE_VALUE (attr2)\n@@ -6037,38 +6096,10 @@ lookup_ident_attribute (tree attr_identifier, tree list)\n       gcc_checking_assert (TREE_CODE (get_attribute_name (list))\n \t\t\t   == IDENTIFIER_NODE);\n \n-      /* Identifiers can be compared directly for equality.  */\n-      if (attr_identifier == get_attribute_name (list))\n+      if (cmp_attrib_identifiers (attr_identifier,\n+\t\t\t\t  get_attribute_name (list)))\n+\t/* Found it.  */\n \tbreak;\n-\n-      /* If they are not equal, they may still be one in the form\n-\t 'text' while the other one is in the form '__text__'.  TODO:\n-\t If we were storing attributes in normalized 'text' form, then\n-\t this could all go away and we could take full advantage of\n-\t the fact that we're comparing identifiers. :-)  */\n-      {\n-\tsize_t attr_len = IDENTIFIER_LENGTH (attr_identifier);\n-\tsize_t ident_len = IDENTIFIER_LENGTH (get_attribute_name (list));\n-\n-\tif (ident_len == attr_len + 4)\n-\t  {\n-\t    const char *p = IDENTIFIER_POINTER (get_attribute_name (list));\n-\t    const char *q = IDENTIFIER_POINTER (attr_identifier);\n-\t    if (p[0] == '_' && p[1] == '_'\n-\t\t&& p[ident_len - 2] == '_' && p[ident_len - 1] == '_'\n-\t\t&& strncmp (q, p + 2, attr_len) == 0)\n-\t      break;\n-\t  }\n-\telse if (ident_len + 4 == attr_len)\n-\t  {\n-\t    const char *p = IDENTIFIER_POINTER (get_attribute_name (list));\n-\t    const char *q = IDENTIFIER_POINTER (attr_identifier);\n-\t    if (q[0] == '_' && q[1] == '_'\n-\t\t&& q[attr_len - 2] == '_' && q[attr_len - 1] == '_'\n-\t\t&& strncmp (q + 2, p, ident_len) == 0)\n-\t      break;\n-\t  }\n-      }\n       list = TREE_CHAIN (list);\n     }\n "}]}