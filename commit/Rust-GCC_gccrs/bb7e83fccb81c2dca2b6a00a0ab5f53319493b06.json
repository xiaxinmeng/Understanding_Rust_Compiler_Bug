{"sha": "bb7e83fccb81c2dca2b6a00a0ab5f53319493b06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI3ZTgzZmNjYjgxYzJkY2EyYjZhMDBhMGFiNWY1MzMxOTQ5M2IwNg==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2014-08-01T02:52:52Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2014-08-01T02:52:52Z"}, "message": "Convert tree-ssa-tail-merge to inchash\n\ngcc/:\n\n2014-07-31  Andi Kleen  <ak@linux.intel.com>\n\n\t* tree-ssa-tail-merge.c (same_succ_hash): Convert to inchash.\n\nFrom-SVN: r213400", "tree": {"sha": "30f1f591ebd0e2b0bc1967ad4f6c0f84fb8c4a52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30f1f591ebd0e2b0bc1967ad4f6c0f84fb8c4a52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb7e83fccb81c2dca2b6a00a0ab5f53319493b06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb7e83fccb81c2dca2b6a00a0ab5f53319493b06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb7e83fccb81c2dca2b6a00a0ab5f53319493b06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb7e83fccb81c2dca2b6a00a0ab5f53319493b06/comments", "author": null, "committer": null, "parents": [{"sha": "4e44a6e8bda25afc8a097222fe3e5c4ef66a0e8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e44a6e8bda25afc8a097222fe3e5c4ef66a0e8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e44a6e8bda25afc8a097222fe3e5c4ef66a0e8a"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "13e0c5e5a30ece7fa53f633bdbd7c21a88db369c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb7e83fccb81c2dca2b6a00a0ab5f53319493b06/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb7e83fccb81c2dca2b6a00a0ab5f53319493b06/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb7e83fccb81c2dca2b6a00a0ab5f53319493b06", "patch": "@@ -1,3 +1,7 @@\n+2014-07-31  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* tree-ssa-tail-merge.c (same_succ_hash): Convert to inchash.\n+\n 2014-07-31  Andi Kleen  <ak@linux.intel.com>\n \n \t* tree-ssa-sccvn.c (vn_reference_op_compute_hash): Convert to"}, {"sha": "5615c7914213933357cb39972c678b85a2f3a1e1", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb7e83fccb81c2dca2b6a00a0ab5f53319493b06/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb7e83fccb81c2dca2b6a00a0ab5f53319493b06/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=bb7e83fccb81c2dca2b6a00a0ab5f53319493b06", "patch": "@@ -451,7 +451,7 @@ stmt_update_dep_bb (gimple stmt)\n static hashval_t\n same_succ_hash (const_same_succ e)\n {\n-  hashval_t hashval = bitmap_hash (e->succs);\n+  inchash::hash hstate (bitmap_hash (e->succs));\n   int flags;\n   unsigned int i;\n   unsigned int first = bitmap_first_set_bit (e->bbs);\n@@ -472,37 +472,35 @@ same_succ_hash (const_same_succ e)\n \tcontinue;\n       size++;\n \n-      hashval = iterative_hash_hashval_t (gimple_code (stmt), hashval);\n+      hstate.add_int (gimple_code (stmt));\n       if (is_gimple_assign (stmt))\n-\thashval = iterative_hash_hashval_t (gimple_assign_rhs_code (stmt),\n-\t\t\t\t\t    hashval);\n+\thstate.add_int (gimple_assign_rhs_code (stmt));\n       if (!is_gimple_call (stmt))\n \tcontinue;\n       if (gimple_call_internal_p (stmt))\n-\thashval = iterative_hash_hashval_t\n-\t  ((hashval_t) gimple_call_internal_fn (stmt), hashval);\n+        hstate.add_int (gimple_call_internal_fn (stmt));\n       else\n \t{\n-\t  hashval = iterative_hash_expr (gimple_call_fn (stmt), hashval);\n+\t  inchash::add_expr (gimple_call_fn (stmt), hstate);\n \t  if (gimple_call_chain (stmt))\n-\t    hashval = iterative_hash_expr (gimple_call_chain (stmt), hashval);\n+\t    inchash::add_expr (gimple_call_chain (stmt), hstate);\n \t}\n       for (i = 0; i < gimple_call_num_args (stmt); i++)\n \t{\n \t  arg = gimple_call_arg (stmt, i);\n \t  arg = vn_valueize (arg);\n-\t  hashval = iterative_hash_expr (arg, hashval);\n+\t  inchash::add_expr (arg, hstate);\n \t}\n     }\n \n-  hashval = iterative_hash_hashval_t (size, hashval);\n+  hstate.add_int (size);\n   BB_SIZE (bb) = size;\n \n   for (i = 0; i < e->succ_flags.length (); ++i)\n     {\n       flags = e->succ_flags[i];\n       flags = flags & ~(EDGE_TRUE_VALUE | EDGE_FALSE_VALUE);\n-      hashval = iterative_hash_hashval_t (flags, hashval);\n+      hstate.add_int (flags);\n     }\n \n   EXECUTE_IF_SET_IN_BITMAP (e->succs, 0, s, bs)\n@@ -521,7 +519,7 @@ same_succ_hash (const_same_succ e)\n \t}\n     }\n \n-  return hashval;\n+  return hstate.end ();\n }\n \n /* Returns true if E1 and E2 have 2 successors, and if the successor flags"}]}