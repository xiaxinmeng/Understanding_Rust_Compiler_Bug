{"sha": "a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc1YmZhYTZjZGVhMmRkN2MyZThhYzJhYTRmNTIyNjdiMzIxMzM2Mg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-10-08T15:17:32Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-10-08T15:17:32Z"}, "message": "Makefile.in (TM_H): Include $(FLAGS_H) instead of options.h.\n\n\t* Makefile.in (TM_H): Include $(FLAGS_H) instead of options.h.\n\t(TREE_H): Include $(FLAGS_H) instead of options.h.\n\t(opts-common.o): Depend on $(FLAGS_H) instead of options.h.\n\t* c-objc-common.h (LANG_HOOKS_INIT_OPTIONS_STRUCT): Define.\n\t* common.opt (flag_complex_method, flag_evaluation_order,\n\tflag_ira_algorithm, flag_ira_region, flag_warn_unused_result): New\n\tVariable declarations.\n\t* configure.ac (tm_include_list): Include flags.h instead of\n\toptions.h.\n\t* configure: Regenerate.\n\t* flags.h: Condition out contents for target libraries.  Include\n\toptions.h at end of file.\n\t(flag_complex_method, flag_ira_algorithm, flag_ira_region,\n\tflag_evaluation_order, flag_warn_unused_result): Remove.\n\t* gcc.c (main): Intialize global_options with global_options_init.\n\t* langhooks-def.h (lhd_init_options_struct): Declare.\n\t(LANG_HOOKS_INIT_OPTIONS_STRUCT): Define.\n\t(LANG_HOOKS_INITIALIZER): Include LANG_HOOKS_INIT_OPTIONS_STRUCT.\n\t* langhooks.c (lhd_init_options_struct): New.\n\t* langhooks.h (struct lang_hooks): Add init_options_struct.\n\tUpdate comment on init_options.\n\t* optc-gen.awk: Generate initializer for global_options_init, not\n\tglobal_options.\n\t* opth-gen.awk: Condition out structure declarations for target\n\tlibraries.  Declare global_options_init.\n\t* opts-common.c: Include flags.h instead of options.h.\n\t* opts.c (flag_warn_unused_result): Remove.\n\t(read_cmdline_options): Take gcc_options parameters.  Pass them to\n\tread_cmdline_option.\n\t(initial_lang_mask, initial_min_crossjump_insns,\n\tinitial_max_fields_for_field_sensitive,\n\tinitial_loop_invariant_max_bbs_in_loop): Define at file scope.\n\t(init_options_once): New.  Split out of decode_options.\n\t(init_options_struct): New.  Split out of decode_options.\n\t(decode_cmdline_options_to_array_default_mask): New.\n\t(default_options_optimization): New.  Split out of decode_options.\n\t(decode_options): Move most code to other functions.  Update call\n\tto read_cmdline_options.\n\t(finish_options): New.  Split out of decode_options.\n\t* opts.h (decode_options): Add gcc_options parameters.\n\t(init_options_once, init_options_struct,\n\tdecode_cmdline_options_to_array_default_mask): New.\n\t* toplev.c (flag_complex_method, flag_ira_algorithm,\n\tflag_ira_region, flag_evaluation_order): Remove.\n\t(general_init): Use global_options_init for initial flag values\n\tfor global_dc.\n\t(toplev_main): Call init_options_once, init_options_struct,\n\tlang_hooks.init_options_struct,\n\tdecode_cmdline_options_to_array_default_mask and\n\tlang_hooks.init_option before decode_options.  Update arguments to\n\tdecode_options.\n\t* tree.h: Include flags.h instead of options.h.\n\nada:\n\t* gcc-interface/misc.c (gnat_init_options_struct): New.  Split out\n\tfrom gnat_init_options.\n\t(LANG_HOOKS_INIT_OPTIONS_STRUCT): Define.\n\nc-family:\n\t* c-common.c (parse_optimize_options): Call\n\tdecode_cmdline_options_to_array_default_mask before\n\tdecode_options.  Update arguments to decode_options.\n\t* c-common.h (c_common_init_options_struct): Declare.\n\t* c-opts.c (c_common_init_options_struct): New.  Split out from\n\tc_common_init_options.\n\ncp:\n\t* cp-objcp-common.h (LANG_HOOKS_INIT_OPTIONS_STRUCT): Define.\n\nfortran:\n\t* f95-lang.c (LANG_HOOKS_INIT_OPTIONS_STRUCT): Define.\n\t* gfortran.h (gfc_init_options_struct): Declare.\n\t* options.c (gfc_init_options_struct): New.  Split out from\n\tgfc_init_options.\n\njava:\n\t* lang.c (java_init_options_struct): New.  Split out from\n\tjava_init_options.\n\t(LANG_HOOKS_INIT_OPTIONS_STRUCT): Define.\n\nlto:\n\t* lto-lang.c (lto_init_options): Change to\n\tlto_init_options_struct.  Update parameters.\n\t(LANG_HOOKS_INIT_OPTIONS): Don't define.\n\t(LANG_HOOKS_INIT_OPTIONS_STRUCT): Define.\n\nFrom-SVN: r165189", "tree": {"sha": "d7c6e9b6d0c3fea0b0d512fb08735055168c35e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7c6e9b6d0c3fea0b0d512fb08735055168c35e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e899aa1613680d530fad1848a13ff91236b91b44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e899aa1613680d530fad1848a13ff91236b91b44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e899aa1613680d530fad1848a13ff91236b91b44"}], "stats": {"total": 562, "additions": 398, "deletions": 164}, "files": [{"sha": "12eb6d7d7604139d424857f014b7107fa17e6c53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -1,3 +1,58 @@\n+2010-10-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* Makefile.in (TM_H): Include $(FLAGS_H) instead of options.h.\n+\t(TREE_H): Include $(FLAGS_H) instead of options.h.\n+\t(opts-common.o): Depend on $(FLAGS_H) instead of options.h.\n+\t* c-objc-common.h (LANG_HOOKS_INIT_OPTIONS_STRUCT): Define.\n+\t* common.opt (flag_complex_method, flag_evaluation_order,\n+\tflag_ira_algorithm, flag_ira_region, flag_warn_unused_result): New\n+\tVariable declarations.\n+\t* configure.ac (tm_include_list): Include flags.h instead of\n+\toptions.h.\n+\t* configure: Regenerate.\n+\t* flags.h: Condition out contents for target libraries.  Include\n+\toptions.h at end of file.\n+\t(flag_complex_method, flag_ira_algorithm, flag_ira_region,\n+\tflag_evaluation_order, flag_warn_unused_result): Remove.\n+\t* gcc.c (main): Intialize global_options with global_options_init.\n+\t* langhooks-def.h (lhd_init_options_struct): Declare.\n+\t(LANG_HOOKS_INIT_OPTIONS_STRUCT): Define.\n+\t(LANG_HOOKS_INITIALIZER): Include LANG_HOOKS_INIT_OPTIONS_STRUCT.\n+\t* langhooks.c (lhd_init_options_struct): New.\n+\t* langhooks.h (struct lang_hooks): Add init_options_struct.\n+\tUpdate comment on init_options.\n+\t* optc-gen.awk: Generate initializer for global_options_init, not\n+\tglobal_options.\n+\t* opth-gen.awk: Condition out structure declarations for target\n+\tlibraries.  Declare global_options_init.\n+\t* opts-common.c: Include flags.h instead of options.h.\n+\t* opts.c (flag_warn_unused_result): Remove.\n+\t(read_cmdline_options): Take gcc_options parameters.  Pass them to\n+\tread_cmdline_option.\n+\t(initial_lang_mask, initial_min_crossjump_insns,\n+\tinitial_max_fields_for_field_sensitive,\n+\tinitial_loop_invariant_max_bbs_in_loop): Define at file scope.\n+\t(init_options_once): New.  Split out of decode_options.\n+\t(init_options_struct): New.  Split out of decode_options.\n+\t(decode_cmdline_options_to_array_default_mask): New.\n+\t(default_options_optimization): New.  Split out of decode_options.\n+\t(decode_options): Move most code to other functions.  Update call\n+\tto read_cmdline_options.\n+\t(finish_options): New.  Split out of decode_options.\n+\t* opts.h (decode_options): Add gcc_options parameters.\n+\t(init_options_once, init_options_struct,\n+\tdecode_cmdline_options_to_array_default_mask): New.\n+\t* toplev.c (flag_complex_method, flag_ira_algorithm,\n+\tflag_ira_region, flag_evaluation_order): Remove.\n+\t(general_init): Use global_options_init for initial flag values\n+\tfor global_dc.\n+\t(toplev_main): Call init_options_once, init_options_struct,\n+\tlang_hooks.init_options_struct,\n+\tdecode_cmdline_options_to_array_default_mask and\n+\tlang_hooks.init_option before decode_options.  Update arguments to\n+\tdecode_options.\n+\t* tree.h: Include flags.h instead of options.h.\n+\n 2010-10-08  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/rx/rx.c (TARGET_EXCEPT_UNWIND_INFO): Define."}, {"sha": "9f157b7848055ef9121dac5c7e2959cdcd841cac", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -823,7 +823,7 @@ CONFIG_H  = config.h  $(host_xm_file_list)\n TCONFIG_H = tconfig.h $(xm_file_list)\n TM_P_H    = tm_p.h    $(tm_p_file_list)\n GTM_H     = tm.h      $(tm_file_list) insn-constants.h\n-TM_H      = $(GTM_H) insn-flags.h options.h\n+TM_H      = $(GTM_H) insn-flags.h $(FLAGS_H)\n \n # Variables for version information.\n BASEVER     := $(srcdir)/BASE-VER  # 4.x.y\n@@ -884,7 +884,7 @@ BUILTINS_DEF = builtins.def sync-builtins.def omp-builtins.def\n TREE_H = tree.h all-tree.def tree.def c-family/c-common.def \\\n \t$(lang_tree_files) $(MACHMODE_H) tree-check.h $(BUILTINS_DEF) \\\n \t$(INPUT_H) statistics.h $(VEC_H) treestruct.def $(HASHTAB_H) \\\n-\tdouble-int.h alias.h $(SYMTAB_H) options.h vecir.h \\\n+\tdouble-int.h alias.h $(SYMTAB_H) $(FLAGS_H) vecir.h \\\n \t$(REAL_H) $(FIXED_VALUE_H)\n REGSET_H = regset.h $(BITMAP_H) hard-reg-set.h\n BASIC_BLOCK_H = basic-block.h $(PREDICT_H) $(VEC_H) $(FUNCTION_H) cfghooks.h\n@@ -2821,7 +2821,7 @@ opts.o : opts.c opts.h options.h $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) $(CONFIG_H) $(\n    output.h $(DIAGNOSTIC_H) $(TM_P_H) $(INSN_ATTR_H) intl.h $(TARGET_H) \\\n    $(FLAGS_H) $(PARAMS_H) $(TREE_PASS_H) $(DBGCNT_H) debug.h \\\n    $(PLUGIN_H) $(EXCEPT_H) $(LTO_STREAMER_H) opts-diagnostic.h\n-opts-common.o : opts-common.c opts.h options.h $(CONFIG_H) $(SYSTEM_H) \\\n+opts-common.o : opts-common.c opts.h $(FLAGS_H) $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h intl.h $(DIAGNOSTIC_H) $(TM_H)\n targhooks.o : targhooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n    $(EXPR_H) $(TM_H) $(RTL_H) $(TM_P_H) $(FUNCTION_H) output.h $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) \\"}, {"sha": "3001f2e01c3835b6c4e10ba4f0ceb164f9223678", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -1,3 +1,9 @@\n+2010-10-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc-interface/misc.c (gnat_init_options_struct): New.  Split out\n+\tfrom gnat_init_options.\n+\t(LANG_HOOKS_INIT_OPTIONS_STRUCT): Define.\n+\n 2010-10-08  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_aux.adb: Cleanup Is_Immutably_Limited_Type."}, {"sha": "4bb0e6194bafba17aab0c355e0404610524635f3", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -62,6 +62,7 @@\n \n static bool gnat_init\t\t\t(void);\n static unsigned int gnat_option_lang_mask (void);\n+static void gnat_init_options_struct\t(struct gcc_options *);\n static void gnat_init_options\t\t(unsigned int,\n \t\t\t\t\t struct cl_decoded_option *);\n static bool gnat_handle_option\t\t(size_t, const char *, int, int,\n@@ -91,6 +92,8 @@ static tree gnat_eh_personality\t\t(void);\n #define LANG_HOOKS_INIT\t\t\tgnat_init\n #undef  LANG_HOOKS_OPTION_LANG_MASK\n #define LANG_HOOKS_OPTION_LANG_MASK\tgnat_option_lang_mask\n+#undef  LANG_HOOKS_INIT_OPTIONS_STRUCT\n+#define LANG_HOOKS_INIT_OPTIONS_STRUCT\tgnat_init_options_struct\n #undef  LANG_HOOKS_INIT_OPTIONS\n #define LANG_HOOKS_INIT_OPTIONS\t\tgnat_init_options\n #undef  LANG_HOOKS_HANDLE_OPTION\n@@ -256,6 +259,15 @@ gnat_option_lang_mask (void)\n   return CL_Ada;\n }\n \n+/* Initialize options structure OPTS.  */\n+\n+static void\n+gnat_init_options_struct (struct gcc_options *opts)\n+{\n+  /* Uninitialized really means uninitialized in Ada.  */\n+  opts->x_flag_zero_initialized_in_bss = 0;\n+}\n+\n /* Initialize for option processing.  */\n \n static void\n@@ -298,9 +310,6 @@ gnat_init_options (unsigned int decoded_options_count,\n   gnat_argv = (char **) xmalloc (sizeof (save_argv[0]));\n   gnat_argv[0] = xstrdup (save_argv[0]);     /* name of the command */\n   gnat_argc = 1;\n-\n-  /* Uninitialized really means uninitialized in Ada.  */\n-  flag_zero_initialized_in_bss = 0;\n }\n \n /* Ada code requires variables for these settings rather than elements"}, {"sha": "77908955dfb30c21515bc74eaf778e13f635fb88", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -1,3 +1,12 @@\n+2010-10-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c (parse_optimize_options): Call\n+\tdecode_cmdline_options_to_array_default_mask before\n+\tdecode_options.  Update arguments to decode_options.\n+\t* c-common.h (c_common_init_options_struct): Declare.\n+\t* c-opts.c (c_common_init_options_struct): New.  Split out from\n+\tc_common_init_options.\n+\n 2010-10-06  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tImplemented fast enumeration for Objective-C."}, {"sha": "ff3526b03c307508d7f413393b0e77992e8d77ae", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -7802,8 +7802,11 @@ parse_optimize_options (tree args, bool attr_p)\n   saved_flag_strict_aliasing = flag_strict_aliasing;\n \n   /* Now parse the options.  */\n-  decode_options (opt_argc, opt_argv, &decoded_options,\n-\t\t  &decoded_options_count);\n+  decode_cmdline_options_to_array_default_mask (opt_argc, opt_argv,\n+\t\t\t\t\t\t&decoded_options,\n+\t\t\t\t\t\t&decoded_options_count);\n+  decode_options (&global_options, &global_options_set,\n+\t\t  decoded_options, decoded_options_count);\n \n   targetm.override_options_after_change();\n "}, {"sha": "3236e856a09bffc1d1e186fe7e4522de5a9fa35c", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -743,6 +743,7 @@ extern tree build_va_arg (location_t, tree, tree);\n extern unsigned int c_common_option_lang_mask (void);\n extern void c_common_initialize_diagnostics (diagnostic_context *);\n extern bool c_common_complain_wrong_lang_p (const struct cl_option *);\n+extern void c_common_init_options_struct (struct gcc_options *);\n extern void c_common_init_options (unsigned int, struct cl_decoded_option *);\n extern bool c_common_post_options (const char **);\n extern bool c_common_init (void);"}, {"sha": "3df0492788e9924eb90c3fe0c2f7ee922a6f062e", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -273,6 +273,19 @@ c_common_complain_wrong_lang_p (const struct cl_option *option)\n   return true;\n }\n \n+/* Initialize options structure OPTS.  */\n+void\n+c_common_init_options_struct (struct gcc_options *opts)\n+{\n+  opts->x_flag_exceptions = c_dialect_cxx ();\n+  opts->x_warn_pointer_arith = c_dialect_cxx ();\n+  opts->x_warn_write_strings = c_dialect_cxx ();\n+  opts->x_flag_warn_unused_result = true;\n+\n+  /* By default, C99-like requirements for complex multiply and divide.  */\n+  opts->x_flag_complex_method = 2;\n+}\n+\n /* Common initialization before calling option handlers.  */\n void\n c_common_init_options (unsigned int decoded_options_count,\n@@ -294,14 +307,6 @@ c_common_init_options (unsigned int decoded_options_count,\n      before passing on command-line options to cpplib.  */\n   cpp_opts->warn_dollars = 0;\n \n-  flag_exceptions = c_dialect_cxx ();\n-  warn_pointer_arith = c_dialect_cxx ();\n-  warn_write_strings = c_dialect_cxx();\n-  flag_warn_unused_result = true;\n-\n-  /* By default, C99-like requirements for complex multiply and divide.  */\n-  flag_complex_method = 2;\n-\n   deferred_opts = XNEWVEC (struct deferred_opt, decoded_options_count);\n \n   if (c_language == clk_c)"}, {"sha": "dbbd50a729de296a32057e69601120c029134cce", "filename": "gcc/c-objc-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fc-objc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fc-objc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.h?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -33,6 +33,8 @@ along with GCC; see the file COPYING3.  If not see\n #define LANG_HOOKS_OPTION_LANG_MASK c_common_option_lang_mask\n #undef LANG_HOOKS_COMPLAIN_WRONG_LANG_P\n #define LANG_HOOKS_COMPLAIN_WRONG_LANG_P c_common_complain_wrong_lang_p\n+#undef LANG_HOOKS_INIT_OPTIONS_STRUCT\n+#define LANG_HOOKS_INIT_OPTIONS_STRUCT c_common_init_options_struct\n #undef LANG_HOOKS_INIT_OPTIONS\n #define LANG_HOOKS_INIT_OPTIONS c_common_init_options\n #undef LANG_HOOKS_INITIALIZE_DIAGNOSTICS"}, {"sha": "b0e40c15f5d890872f736ca7849f4df5c8e1e903", "filename": "gcc/common.opt", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -32,6 +32,29 @@ int optimize\n Variable\n int optimize_size\n \n+; 0 means straightforward implementation of complex divide acceptable.\n+; 1 means wide ranges of inputs must work for complex divide.\n+; 2 means C99-like requirements for complex multiply and divide.\n+Variable\n+int flag_complex_method = 1\n+\n+; Nonzero if subexpressions must be evaluated from left-to-right.\n+Variable\n+int flag_evaluation_order = 0\n+\n+; Set the default region and algorithm for the integrated register\n+; allocator.\n+\n+Variable\n+enum ira_algorithm flag_ira_algorithm = IRA_ALGORITHM_CB\n+\n+Variable\n+enum ira_region flag_ira_region = IRA_REGION_MIXED\n+\n+; Language specific warning pass for unused results.\n+Variable\n+bool flag_warn_unused_result = false\n+\n ###\n Driver\n "}, {"sha": "27962d5402f3a35044e686a1af5039caa6f10824", "filename": "gcc/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -10843,7 +10843,7 @@ tmake_file=\"${tmake_file_}\"\n out_object_file=`basename $out_file .c`.o\n \n tm_file_list=\"options.h\"\n-tm_include_list=\"options.h insn-constants.h\"\n+tm_include_list=\"flags.h insn-constants.h\"\n for f in $tm_file; do\n   case $f in\n     ./* )"}, {"sha": "1534f7ff149bedf5a1ed7f50a8c195bcb6498fd5", "filename": "gcc/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -1609,7 +1609,7 @@ tmake_file=\"${tmake_file_}\"\n out_object_file=`basename $out_file .c`.o\n \n tm_file_list=\"options.h\"\n-tm_include_list=\"options.h insn-constants.h\"\n+tm_include_list=\"flags.h insn-constants.h\"\n for f in $tm_file; do\n   case $f in\n     ./* )"}, {"sha": "c3beeaf0ece69be38366664010327bd7471b342c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -1,3 +1,7 @@\n+2010-10-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* cp-objcp-common.h (LANG_HOOKS_INIT_OPTIONS_STRUCT): Define.\n+\n 2010-10-07  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* cp-tree.def: Changed type of AT_ENCODE_EXPR from tcc_unary to"}, {"sha": "6566a28b0edecb82d1fbc977d2bba9a56c69f5ec", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -45,6 +45,8 @@ extern bool cp_function_decl_explicit_p (tree decl);\n #define LANG_HOOKS_OPTION_LANG_MASK c_common_option_lang_mask\n #undef LANG_HOOKS_COMPLAIN_WRONG_LANG_P\n #define LANG_HOOKS_COMPLAIN_WRONG_LANG_P c_common_complain_wrong_lang_p\n+#undef LANG_HOOKS_INIT_OPTIONS_STRUCT\n+#define LANG_HOOKS_INIT_OPTIONS_STRUCT c_common_init_options_struct\n #undef LANG_HOOKS_INIT_OPTIONS\n #define LANG_HOOKS_INIT_OPTIONS c_common_init_options\n #undef LANG_HOOKS_INITIALIZE_DIAGNOSTICS"}, {"sha": "99b69812e8d1ca11ca90366bd1a03b58fd6d533e", "filename": "gcc/flags.h", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -23,7 +23,8 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_FLAGS_H\n \n #include \"coretypes.h\"\n-#include \"options.h\"\n+\n+#if !defined(IN_LIBGCC2) && !defined(IN_TARGET_LIBS) && !defined(IN_RTS)\n \n enum debug_info_type\n {\n@@ -147,12 +148,6 @@ extern int flag_print_asm_name;\n \f\n /* Now the symbols that are set with `-f' switches.  */\n \n-/* 0 means straightforward implementation of complex divide acceptable.\n-   1 means wide ranges of inputs must work for complex divide.\n-   2 means C99-like requirements for complex multiply and divide.  */\n-\n-extern int flag_complex_method;\n-\n /* Nonzero if we are only using compiler to check syntax errors.  */\n \n extern int rtl_dump_and_exit;\n@@ -201,8 +196,6 @@ enum ira_algorithm\n   IRA_ALGORITHM_PRIORITY\n };\n \n-extern enum ira_algorithm flag_ira_algorithm;\n-\n /* The regions used for the integrated register allocator (IRA).  */\n enum ira_region\n {\n@@ -211,8 +204,6 @@ enum ira_region\n   IRA_REGION_MIXED\n };\n \n-extern enum ira_region flag_ira_region;\n-\n /* The options for excess precision.  */\n enum excess_precision\n {\n@@ -269,12 +260,6 @@ extern struct target_flag_state *this_target_flag_state;\n #define flag_excess_precision \\\n   (this_target_flag_state->x_flag_excess_precision)\n \n-/* Nonzero if subexpressions must be evaluated from left-to-right.  */\n-extern int flag_evaluation_order;\n-\n-/* Whether to run the warn_unused_result attribute pass.  */\n-extern bool flag_warn_unused_result;\n-\n /* Nonzero if we dump in VCG format, not plain text.  */\n extern int dump_for_graph;\n \n@@ -369,4 +354,10 @@ enum warn_strict_overflow_code\n /* Whether to emit an overflow warning whose code is C.  */\n #define issue_strict_overflow_warning(c) (warn_strict_overflow >= (int) (c))\n \n+#endif\n+\n+/* This is included last because options may use types declared\n+   above.  */\n+#include \"options.h\"\n+\n #endif /* ! GCC_FLAGS_H */"}, {"sha": "3a2af6704b14b916e66527b99131d2907cf4411c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -1,3 +1,10 @@\n+2010-10-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* f95-lang.c (LANG_HOOKS_INIT_OPTIONS_STRUCT): Define.\n+\t* gfortran.h (gfc_init_options_struct): Declare.\n+\t* options.c (gfc_init_options_struct): New.  Split out from\n+\tgfc_init_options.\n+\n 2010-10-07  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/45933"}, {"sha": "57696e5a2b74428e8b0a3adabbb1d61600d3d90e", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -102,6 +102,7 @@ static void gfc_init_ts (void);\n #undef LANG_HOOKS_FINISH\n #undef LANG_HOOKS_WRITE_GLOBALS\n #undef LANG_HOOKS_OPTION_LANG_MASK\n+#undef LANG_HOOKS_INIT_OPTIONS_STRUCT\n #undef LANG_HOOKS_INIT_OPTIONS\n #undef LANG_HOOKS_HANDLE_OPTION\n #undef LANG_HOOKS_POST_OPTIONS\n@@ -132,6 +133,7 @@ static void gfc_init_ts (void);\n #define LANG_HOOKS_FINISH               gfc_finish\n #define LANG_HOOKS_WRITE_GLOBALS\tgfc_write_global_declarations\n #define LANG_HOOKS_OPTION_LANG_MASK\tgfc_option_lang_mask\n+#define LANG_HOOKS_INIT_OPTIONS_STRUCT  gfc_init_options_struct\n #define LANG_HOOKS_INIT_OPTIONS         gfc_init_options\n #define LANG_HOOKS_HANDLE_OPTION        gfc_handle_option\n #define LANG_HOOKS_POST_OPTIONS\t\tgfc_post_options"}, {"sha": "8a415f40196d32d7cdd04c5757cba3806fe69a83", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -2398,6 +2398,7 @@ int get_c_kind (const char *, CInteropKind_t *);\n \n /* options.c */\n unsigned int gfc_option_lang_mask (void);\n+void gfc_init_options_struct (struct gcc_options *);\n void gfc_init_options (unsigned int,\n \t\t       struct cl_decoded_option *);\n bool gfc_handle_option (size_t, const char *, int, int,"}, {"sha": "a65a63ab48cbd4ca4b5207d263d44568abb6ff82", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -62,6 +62,14 @@ gfc_option_lang_mask (void)\n   return CL_Fortran;\n }\n \n+/* Initialize options structure OPTS.  */\n+\n+void\n+gfc_init_options_struct (struct gcc_options *opts)\n+{\n+  opts->x_flag_errno_math = 0;\n+  opts->x_flag_associative_math = -1;\n+}\n \n /* Get ready for options handling. Keep in sync with\n    libgfortran/runtime/compile_options.c (init_compile_options). */\n@@ -145,14 +153,8 @@ gfc_init_options (unsigned int decoded_options_count,\n   gfc_option.rtcheck = 0;\n   gfc_option.coarray = GFC_FCOARRAY_NONE;\n \n-  flag_errno_math = 0;\n-  flag_associative_math = -1;\n-\n   set_default_std_flags ();\n \n-  /* -fshort-enums can be default on some targets.  */\n-  flag_short_enums = targetm.default_short_enums ();\n-\n   /* Initialize cpp-related options.  */\n   gfc_cpp_init_options (decoded_options_count, decoded_options);\n }"}, {"sha": "cde61aff9ab83dd6cdcc75ae55289b2a99ba0f51", "filename": "gcc/gcc.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -6135,6 +6135,8 @@ main (int argc, char **argv)\n   if (argv != old_argv)\n     at_file_supplied = true;\n \n+  global_options = global_options_init;\n+\n   decode_cmdline_options_to_array (argc, CONST_CAST2 (const char **, char **,\n \t\t\t\t\t\t      argv),\n \t\t\t\t   CL_DRIVER,"}, {"sha": "1c737c641803df5a6ff6e395dc7fd3076279ca20", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -1,3 +1,9 @@\n+2010-10-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* lang.c (java_init_options_struct): New.  Split out from\n+\tjava_init_options.\n+\t(LANG_HOOKS_INIT_OPTIONS_STRUCT): Define.\n+\n 2010-10-04  Andi Kleen <ak@linux.intel.com>\n \n \t* Make-lang.in (xgcj, jc1, jcf-dump, jvgenmain):"}, {"sha": "fbe25ad2e5e224903b1115ac4b9bc6632a1897f9", "filename": "gcc/java/lang.c", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -48,6 +48,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n static bool java_init (void);\n static void java_finish (void);\n static unsigned int java_option_lang_mask (void);\n+static void java_init_options_struct (struct gcc_options *);\n static void java_init_options (unsigned int, struct cl_decoded_option *);\n static bool java_post_options (const char **);\n \n@@ -126,6 +127,8 @@ struct GTY(()) language_function {\n #define LANG_HOOKS_FINISH java_finish\n #undef LANG_HOOKS_OPTION_LANG_MASK\n #define LANG_HOOKS_OPTION_LANG_MASK java_option_lang_mask\n+#undef LANG_HOOKS_INIT_OPTIONS_STRUCT\n+#define LANG_HOOKS_INIT_OPTIONS_STRUCT java_init_options_struct\n #undef LANG_HOOKS_INIT_OPTIONS\n #define LANG_HOOKS_INIT_OPTIONS java_init_options\n #undef LANG_HOOKS_HANDLE_OPTION\n@@ -535,23 +538,29 @@ java_option_lang_mask (void)\n   return CL_Java;\n }\n \n+/* Initialize options structure OPTS.  */\n+\n static void\n-java_init_options (unsigned int decoded_options_count ATTRIBUTE_UNUSED,\n-\t\t   struct cl_decoded_option *decoded_options ATTRIBUTE_UNUSED)\n+java_init_options_struct (struct gcc_options *opts)\n {\n-  flag_bounds_check = 1;\n-  flag_exceptions = 1;\n-  flag_non_call_exceptions = 1;\n+  opts->x_flag_bounds_check = 1;\n+  opts->x_flag_exceptions = 1;\n+  opts->x_flag_non_call_exceptions = 1;\n \n   /* In Java floating point operations never trap.  */\n-  flag_trapping_math = 0;\n+  opts->x_flag_trapping_math = 0;\n \n   /* In Java arithmetic overflow always wraps around.  */\n-  flag_wrapv = 1;\n+  opts->x_flag_wrapv = 1;\n \n   /* Java requires left-to-right evaluation of subexpressions.  */\n-  flag_evaluation_order = 1;\n+  opts->x_flag_evaluation_order = 1;\n+}\n \n+static void\n+java_init_options (unsigned int decoded_options_count ATTRIBUTE_UNUSED,\n+\t\t   struct cl_decoded_option *decoded_options ATTRIBUTE_UNUSED)\n+{\n   jcf_path_init ();\n }\n "}, {"sha": "469cc46cbce0bf4d715db4057f9ff1f15ccc7833", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -65,6 +65,7 @@ extern tree lhd_builtin_function (tree);\n \n /* Declarations of default tree inlining hooks.  */\n extern void lhd_initialize_diagnostics (diagnostic_context *);\n+extern void lhd_init_options_struct (struct gcc_options *);\n extern void lhd_init_options (unsigned int,\n \t\t\t      struct cl_decoded_option *);\n extern bool lhd_complain_wrong_lang_p (const struct cl_option *);\n@@ -87,6 +88,7 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n #define LANG_HOOKS_FINISH\t\tlhd_do_nothing\n #define LANG_HOOKS_PARSE_FILE\t\tlhd_do_nothing_i\n #define LANG_HOOKS_OPTION_LANG_MASK\thook_uint_void_0\n+#define LANG_HOOKS_INIT_OPTIONS_STRUCT\tlhd_init_options_struct\n #define LANG_HOOKS_INIT_OPTIONS\t\tlhd_init_options\n #define LANG_HOOKS_INITIALIZE_DIAGNOSTICS lhd_initialize_diagnostics\n #define LANG_HOOKS_COMPLAIN_WRONG_LANG_P lhd_complain_wrong_lang_p\n@@ -262,6 +264,7 @@ extern void lhd_end_section (void);\n   LANG_HOOKS_FREE_LANG_DATA, \\\n   LANG_HOOKS_TREE_SIZE, \\\n   LANG_HOOKS_OPTION_LANG_MASK, \\\n+  LANG_HOOKS_INIT_OPTIONS_STRUCT, \\\n   LANG_HOOKS_INIT_OPTIONS, \\\n   LANG_HOOKS_INITIALIZE_DIAGNOSTICS, \\\n   LANG_HOOKS_COMPLAIN_WRONG_LANG_P, \\"}, {"sha": "2217a248a738eeef5b7a694c98136df83a8c2c6a", "filename": "gcc/langhooks.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -337,6 +337,12 @@ lhd_initialize_diagnostics (diagnostic_context *ctx ATTRIBUTE_UNUSED)\n {\n }\n \n+/* Called to perform language-specific options initialization of OPTS.  */\n+void\n+lhd_init_options_struct (struct gcc_options *opts ATTRIBUTE_UNUSED)\n+{\n+}\n+\n /* Called to perform language-specific options initialization.  */\n void\n lhd_init_options (unsigned int decoded_options_count ATTRIBUTE_UNUSED,"}, {"sha": "1af12be3b51ce3221a8702a8dc4ec233cde58458", "filename": "gcc/langhooks.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -267,8 +267,12 @@ struct lang_hooks\n      of options.  */\n   unsigned int (*option_lang_mask) (void);\n \n+  /* Initialize variables in an options structure.  */\n+  void (*init_options_struct) (struct gcc_options *opts);\n+\n   /* After the initialize_diagnostics hook is called, do any simple\n-     initialization needed before any calls to handle_option.  */\n+     initialization needed before any calls to handle_option, other\n+     than that done by the init_options_struct hook.  */\n   void (*init_options) (unsigned int decoded_options_count,\n \t\t\tstruct cl_decoded_option *decoded_options);\n "}, {"sha": "d901164eb7f1a114ae656b795926347ba31d2d57", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -1,3 +1,10 @@\n+2010-10-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* lto-lang.c (lto_init_options): Change to\n+\tlto_init_options_struct.  Update parameters.\n+\t(LANG_HOOKS_INIT_OPTIONS): Don't define.\n+\t(LANG_HOOKS_INIT_OPTIONS_STRUCT): Define.\n+\n 2010-10-06  Jan Hubicka  <jh@suse.cz>\n \n \t* lto.c (lto_balanced_map): Fix accounting of program size."}, {"sha": "eeebe05efb0dfd3cda82c2e2aafd67926899a5a3", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -639,14 +639,13 @@ lto_complain_wrong_lang_p (const struct cl_option *option ATTRIBUTE_UNUSED)\n }\n \n static void\n-lto_init_options (unsigned int decoded_options_count ATTRIBUTE_UNUSED,\n-\t\t  struct cl_decoded_option *decoded_options ATTRIBUTE_UNUSED)\n+lto_init_options_struct (struct gcc_options *opts)\n {\n   /* By default, C99-like requirements for complex multiply and divide.\n      ???  Until the complex method is encoded in the IL this is the only\n      safe choice.  This will pessimize Fortran code with LTO unless\n      people specify a complex method manually or use -ffast-math.  */\n-  flag_complex_method = 2;\n+  opts->x_flag_complex_method = 2;\n }\n \n /* Handle command-line option SCODE.  If the option takes an argument, it is\n@@ -1162,8 +1161,8 @@ static void lto_init_ts (void)\n #define LANG_HOOKS_OPTION_LANG_MASK lto_option_lang_mask\n #undef LANG_HOOKS_COMPLAIN_WRONG_LANG_P\n #define LANG_HOOKS_COMPLAIN_WRONG_LANG_P lto_complain_wrong_lang_p\n-#undef LANG_HOOKS_INIT_OPTIONS\n-#define LANG_HOOKS_INIT_OPTIONS lto_init_options\n+#undef LANG_HOOKS_INIT_OPTIONS_STRUCT\n+#define LANG_HOOKS_INIT_OPTIONS_STRUCT lto_init_options_struct\n #undef LANG_HOOKS_HANDLE_OPTION\n #define LANG_HOOKS_HANDLE_OPTION lto_handle_option\n #undef LANG_HOOKS_POST_OPTIONS"}, {"sha": "ba2238aeebfbc6ea6048ba8fc773b76ea943e2e5", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -83,7 +83,7 @@ print \"#endif /* GCC_DRIVER */\"\n print \"\"\n \n have_save = 0;\n-print \"struct gcc_options global_options =\\n{\"\n+print \"const struct gcc_options global_options_init =\\n{\"\n for (i = 0; i < n_extra_vars; i++) {\n \tvar = extra_vars[i]\n \tinit = extra_vars[i]\n@@ -138,6 +138,7 @@ for (i = 0; i < n_opts; i++) {\n }\n print \"};\"\n print \"\"\n+print \"struct gcc_options global_options;\"\n print \"struct gcc_options global_options_set;\"\n print \"\"\n "}, {"sha": "789f9bf3486d30d9550152c8436457927efaf9d8", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -73,6 +73,7 @@ print \"\"\n \n have_save = 0;\n \n+print \"#if !defined(IN_LIBGCC2) && !defined(IN_TARGET_LIBS) && !defined(IN_RTS)\"\n print \"#ifndef GENERATOR_FILE\"\n print \"struct gcc_options\\n{\"\n print \"#endif\"\n@@ -125,9 +126,11 @@ for (i = 0; i < n_opts; i++) {\n print \"#ifndef GENERATOR_FILE\"\n print \"};\"\n print \"extern struct gcc_options global_options;\"\n+print \"extern const struct gcc_options global_options_init;\"\n print \"extern struct gcc_options global_options_set;\"\n print \"#define target_flags_explicit global_options_set.x_target_flags\"\n print \"#endif\"\n+print \"#endif\"\n print \"\"\n \n # All of the optimization switches gathered together so they can be saved and restored."}, {"sha": "553e8b19b89855067ad442700096ae2111e6db24", "filename": "gcc/opts-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -22,7 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intl.h\"\n #include \"coretypes.h\"\n #include \"opts.h\"\n-#include \"options.h\"\n+#include \"flags.h\"\n #include \"diagnostic.h\"\n #include \"tm.h\" /* For SWITCH_TAKES_ARG, WORD_SWITCH_TAKES_ARG and\n \t\t   TARGET_OPTION_TRANSLATE_TABLE.  */"}, {"sha": "efee21e23235c02f6944dfb3583e1fd59e262f4f", "filename": "gcc/opts.c", "status": "modified", "additions": 142, "deletions": 84, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -353,9 +353,6 @@ DEF_VEC_ALLOC_P(const_char_p,heap);\n \n static VEC(const_char_p,heap) *ignored_options;\n \n-/* Language specific warning pass for unused results.  */\n-bool flag_warn_unused_result = false;\n-\n /* Input file names.  */\n const char **in_fnames;\n unsigned num_in_fnames;\n@@ -613,11 +610,14 @@ flag_instrument_functions_exclude_p (tree fndecl)\n }\n \n \n-/* Handle the vector of command line options.  LANG_MASK\n-   contains has a single bit set representing the current\n-   language.  HANDLERS describes what functions to call for the options.  */\n+/* Handle the vector of command line options, storing the results of\n+   processing DECODED_OPTIONS and DECODED_OPTIONS_COUNT in OPTS and\n+   OPTS_SET.  LANG_MASK contains has a single bit set representing the\n+   current language.  HANDLERS describes what functions to call for\n+   the options.  */\n static void\n-read_cmdline_options (struct cl_decoded_option *decoded_options,\n+read_cmdline_options (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\t      struct cl_decoded_option *decoded_options,\n \t\t      unsigned int decoded_options_count,\n \t\t      unsigned int lang_mask,\n \t\t      const struct cl_option_handlers *handlers)\n@@ -628,6 +628,11 @@ read_cmdline_options (struct cl_decoded_option *decoded_options,\n     {\n       if (decoded_options[i].opt_index == OPT_SPECIAL_input_file)\n \t{\n+\t  /* Input files should only ever appear on the main command\n+\t     line.  */\n+\t  gcc_assert (opts == &global_options);\n+\t  gcc_assert (opts_set == &global_options_set);\n+\n \t  if (main_input_filename == NULL)\n \t    {\n \t      main_input_filename = decoded_options[i].arg;\n@@ -638,76 +643,104 @@ read_cmdline_options (struct cl_decoded_option *decoded_options,\n \t  continue;\n \t}\n \n-      read_cmdline_option (&global_options, &global_options_set,\n+      read_cmdline_option (opts, opts_set,\n \t\t\t   decoded_options + i, lang_mask, handlers,\n \t\t\t   global_dc);\n     }\n }\n \n-/* Parse command line options and set default flag values.  Do minimal\n-   options processing.  The decoded options are placed in *DECODED_OPTIONS\n-   and *DECODED_OPTIONS_COUNT.  */\n+/* Language mask determined at initialization.  */\n+static unsigned int initial_lang_mask;\n+\n+/* Initial values of parameters we reset.  */\n+static int initial_min_crossjump_insns;\n+static int initial_max_fields_for_field_sensitive;\n+static int initial_loop_invariant_max_bbs_in_loop;\n+\n+/* Initialize global options-related settings at start-up.  */\n+\n void\n-decode_options (unsigned int argc, const char **argv,\n-\t\tstruct cl_decoded_option **decoded_options,\n-\t\tunsigned int *decoded_options_count)\n+init_options_once (void)\n {\n-  static bool first_time_p = true;\n-  static int initial_min_crossjump_insns;\n-  static int initial_max_fields_for_field_sensitive;\n-  static int initial_loop_invariant_max_bbs_in_loop;\n-  static unsigned int initial_lang_mask;\n-  struct cl_option_handlers handlers;\n+  /* Perform language-specific options initialization.  */\n+  initial_lang_mask = lang_hooks.option_lang_mask ();\n+\n+  lang_hooks.initialize_diagnostics (global_dc);\n+\n+  /* Save initial values of parameters we reset.  */\n+  initial_min_crossjump_insns\n+    = compiler_params[PARAM_MIN_CROSSJUMP_INSNS].value;\n+  initial_max_fields_for_field_sensitive\n+    = compiler_params[PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE].value;\n+  initial_loop_invariant_max_bbs_in_loop\n+    = compiler_params[PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP].value;\n+}\n \n-  unsigned int i, lang_mask;\n+/* Initialize OPTS and OPTS_SET before using them in parsing options.  */\n+\n+void\n+init_options_struct (struct gcc_options *opts, struct gcc_options *opts_set)\n+{\n+  *opts = global_options_init;\n+  memset (opts_set, 0, sizeof (*opts_set));\n+\n+  /* Use priority coloring if cover classes is not defined for the\n+     target.  */\n+  if (targetm.ira_cover_classes == NULL)\n+    opts->x_flag_ira_algorithm = IRA_ALGORITHM_PRIORITY;\n+\n+  /* Initialize whether `char' is signed.  */\n+  opts->x_flag_signed_char = DEFAULT_SIGNED_CHAR;\n+  /* Set this to a special \"uninitialized\" value.  The actual default\n+     is set after target options have been processed.  */\n+  opts->x_flag_short_enums = 2;\n+\n+  /* Initialize target_flags before targetm.target_option.optimization\n+     so the latter can modify it.  */\n+  opts->x_target_flags = targetm.default_target_flags;\n+\n+  /* Some targets have ABI-specified unwind tables.  */\n+  opts->x_flag_unwind_tables = targetm.unwind_tables_default;\n+}\n+\n+/* Decode command-line options to an array, like\n+   decode_cmdline_options_to_array and with the same arguments but\n+   using the default lang_mask.  */\n+\n+void\n+decode_cmdline_options_to_array_default_mask (unsigned int argc,\n+\t\t\t\t\t      const char **argv, \n+\t\t\t\t\t      struct cl_decoded_option **decoded_options,\n+\t\t\t\t\t      unsigned int *decoded_options_count)\n+{\n+  decode_cmdline_options_to_array (argc, argv,\n+\t\t\t\t   initial_lang_mask | CL_COMMON | CL_TARGET,\n+\t\t\t\t   decoded_options, decoded_options_count);\n+}\n+\n+/* Default the options in OPTS and OPTS_SET based on the optimization\n+   settings in DECODED_OPTIONS and DECODED_OPTIONS_COUNT.  */\n+static void\n+default_options_optimization (struct gcc_options *opts,\n+\t\t\t      struct gcc_options *opts_set,\n+\t\t\t      struct cl_decoded_option *decoded_options,\n+\t\t\t      unsigned int decoded_options_count)\n+{\n+  unsigned int i;\n   int opt1;\n   int opt2;\n   int opt3;\n   int opt1_max;\n   int ofast = 0;\n-  enum unwind_info_type ui_except;\n-\n-  if (first_time_p)\n-    {\n-      /* Perform language-specific options initialization.  */\n-      initial_lang_mask = lang_mask = lang_hooks.option_lang_mask ();\n-\n-      lang_hooks.initialize_diagnostics (global_dc);\n-\n-      /* Save initial values of parameters we reset.  */\n-      initial_min_crossjump_insns\n-\t= compiler_params[PARAM_MIN_CROSSJUMP_INSNS].value;\n-      initial_max_fields_for_field_sensitive\n-\t= compiler_params[PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE].value;\n-      initial_loop_invariant_max_bbs_in_loop\n-\t= compiler_params[PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP].value;\n-    }\n-  else\n-    lang_mask = initial_lang_mask;\n-\n-  decode_cmdline_options_to_array (argc, argv,\n-\t\t\t\t   lang_mask | CL_COMMON | CL_TARGET,\n-\t\t\t\t   decoded_options, decoded_options_count);\n-  if (first_time_p)\n-    /* Perform language-specific options initialization.  */\n-    lang_hooks.init_options (*decoded_options_count, *decoded_options);\n \n-  handlers.unknown_option_callback = unknown_option_callback;\n-  handlers.wrong_lang_callback = complain_wrong_lang;\n-  handlers.post_handling_callback = post_handling_callback;\n-  handlers.num_handlers = 3;\n-  handlers.handlers[0].handler = lang_handle_option;\n-  handlers.handlers[0].mask = lang_mask;\n-  handlers.handlers[1].handler = common_handle_option;\n-  handlers.handlers[1].mask = CL_COMMON;\n-  handlers.handlers[2].handler = target_handle_option;\n-  handlers.handlers[2].mask = CL_TARGET;\n+  gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set = &global_options_set);\n \n   /* Scan to see what optimization level has been specified.  That will\n      determine the default value of many flags.  */\n-  for (i = 1; i < *decoded_options_count; i++)\n+  for (i = 1; i < decoded_options_count; i++)\n     {\n-      struct cl_decoded_option *opt = &(*decoded_options)[i];\n+      struct cl_decoded_option *opt = &decoded_options[i];\n       switch (opt->opt_index)\n \t{\n \tcase OPT_O:\n@@ -755,11 +788,6 @@ decode_options (unsigned int argc, const char **argv,\n \t}\n     }\n \n-  /* Use priority coloring if cover classes is not defined for the\n-     target.  */\n-  if (targetm.ira_cover_classes == NULL)\n-    flag_ira_algorithm = IRA_ALGORITHM_PRIORITY;\n-\n   /* -O1 optimizations.  */\n   opt1 = (optimize >= 1);\n   flag_defer_pop = opt1;\n@@ -879,38 +907,68 @@ decode_options (unsigned int argc, const char **argv,\n       targetm.handle_ofast ();\n     }\n \n+  /* Allow default optimizations to be specified on a per-machine basis.  */\n+  targetm.target_option.optimization (optimize, optimize_size);\n+}\n+\n+static void finish_options (struct gcc_options *, struct gcc_options *);\n+\n+/* Parse command line options and set default flag values.  Do minimal\n+   options processing.  The decoded options are in *DECODED_OPTIONS\n+   and *DECODED_OPTIONS_COUNT.  */\n+void\n+decode_options (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t\tstruct cl_decoded_option *decoded_options,\n+\t\tunsigned int decoded_options_count)\n+{\n+  struct cl_option_handlers handlers;\n+\n+  unsigned int lang_mask;\n+\n+  lang_mask = initial_lang_mask;\n+\n+  handlers.unknown_option_callback = unknown_option_callback;\n+  handlers.wrong_lang_callback = complain_wrong_lang;\n+  handlers.post_handling_callback = post_handling_callback;\n+  handlers.num_handlers = 3;\n+  handlers.handlers[0].handler = lang_handle_option;\n+  handlers.handlers[0].mask = lang_mask;\n+  handlers.handlers[1].handler = common_handle_option;\n+  handlers.handlers[1].mask = CL_COMMON;\n+  handlers.handlers[2].handler = target_handle_option;\n+  handlers.handlers[2].mask = CL_TARGET;\n+\n   /* Enable -Werror=coverage-mismatch by default */\n   enable_warning_as_error (\"coverage-mismatch\", 1, lang_mask, &handlers,\n \t\t\t   global_dc);\n \n-  if (first_time_p)\n-    {\n-      /* Initialize whether `char' is signed.  */\n-      flag_signed_char = DEFAULT_SIGNED_CHAR;\n-      /* Set this to a special \"uninitialized\" value.  The actual default is\n-\t set after target options have been processed.  */\n-      flag_short_enums = 2;\n-\n-      /* Initialize target_flags before\n-\t targetm.target_option.optimization so the latter can modify\n-\t it.  */\n-      target_flags = targetm.default_target_flags;\n-\n-      /* Some targets have ABI-specified unwind tables.  */\n-      flag_unwind_tables = targetm.unwind_tables_default;\n-    }\n+  default_options_optimization (opts, opts_set,\n+\t\t\t\tdecoded_options, decoded_options_count);\n \n #ifdef ENABLE_LTO\n   /* Clear any options currently held for LTO.  */\n   lto_clear_user_options ();\n #endif\n \n-  /* Allow default optimizations to be specified on a per-machine basis.  */\n-  targetm.target_option.optimization (optimize, optimize_size);\n-\n-  read_cmdline_options (*decoded_options, *decoded_options_count, lang_mask,\n+  read_cmdline_options (opts, opts_set,\n+\t\t\tdecoded_options, decoded_options_count, lang_mask,\n \t\t\t&handlers);\n \n+  finish_options (opts, opts_set);\n+}\n+\n+/* After all options have been read into OPTS and OPTS_SET, finalize\n+   settings of those options and diagnose incompatible\n+   combinations.  */\n+static void\n+finish_options (struct gcc_options *opts, struct gcc_options *opts_set)\n+{\n+  static bool first_time_p = true;\n+  enum unwind_info_type ui_except;\n+\n+  gcc_assert (opts == &global_options);\n+  gcc_assert (opts_set = &global_options_set);\n+\n   if (dump_base_name && ! IS_ABSOLUTE_PATH (dump_base_name))\n     {\n       /* First try to make DUMP_BASE_NAME relative to the DUMP_DIR_NAME"}, {"sha": "a1ab4cb6ca9fd757eca34ecf979a31add1d3932f", "filename": "gcc/opts.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -208,9 +208,17 @@ extern void decode_cmdline_options_to_array (unsigned int argc,\n \t\t\t\t\t     unsigned int lang_mask,\n \t\t\t\t\t     struct cl_decoded_option **decoded_options,\n \t\t\t\t\t     unsigned int *decoded_options_count);\n-extern void decode_options (unsigned int argc, const char **argv,\n-\t\t\t    struct cl_decoded_option **decoded_options,\n-\t\t\t    unsigned int *decoded_options_count);\n+extern void init_options_once (void);\n+extern void init_options_struct (struct gcc_options *opts,\n+\t\t\t\t struct gcc_options *opts_set);\n+extern void decode_cmdline_options_to_array_default_mask (unsigned int argc,\n+\t\t\t\t\t\t\t  const char **argv, \n+\t\t\t\t\t\t\t  struct cl_decoded_option **decoded_options,\n+\t\t\t\t\t\t\t  unsigned int *decoded_options_count);\n+extern void decode_options (struct gcc_options *opts,\n+\t\t\t    struct gcc_options *opts_set,\n+\t\t\t    struct cl_decoded_option *decoded_options,\n+\t\t\t    unsigned int decoded_options_count);\n extern int option_enabled (int opt_idx, void *opts);\n extern bool get_option_state (struct gcc_options *, int,\n \t\t\t      struct cl_option_state *);"}, {"sha": "a6c13f11e6aca179ba09a0b91b6a36497565cfb8", "filename": "gcc/toplev.c", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -198,12 +198,6 @@ unsigned local_tick;\n \n /* -f flags.  */\n \n-/* 0 means straightforward implementation of complex divide acceptable.\n-   1 means wide ranges of inputs must work for complex divide.\n-   2 means C99-like requirements for complex multiply and divide.  */\n-\n-int flag_complex_method = 1;\n-\n /* Nonzero means we should be saving declaration info into a .X file.  */\n \n int flag_gen_aux_info = 0;\n@@ -229,12 +223,6 @@ int flag_next_runtime = 0;\n \n enum tls_model flag_tls_default = TLS_MODEL_GLOBAL_DYNAMIC;\n \n-/* Set the default region and algorithm for the integrated register\n-   allocator.  */\n-\n-enum ira_algorithm flag_ira_algorithm = IRA_ALGORITHM_CB;\n-enum ira_region flag_ira_region = IRA_REGION_MIXED;\n-\n /* Set the default for excess precision.  */\n \n enum excess_precision flag_excess_precision_cmdline = EXCESS_PRECISION_DEFAULT;\n@@ -293,9 +281,6 @@ typedef struct\n }\n lang_independent_options;\n \n-/* Nonzero if subexpressions must be evaluated from left-to-right.  */\n-int flag_evaluation_order = 0;\n-\n /* The user symbol prefix after having resolved same.  */\n const char *user_label_prefix;\n \n@@ -1661,8 +1646,10 @@ general_init (const char *argv0)\n   /* Set a default printer.  Language specific initializations will\n      override it later.  */\n   pp_format_decoder (global_dc->printer) = &default_tree_printer;\n-  global_dc->show_option_requested = flag_diagnostics_show_option;\n-  global_dc->show_column = flag_show_column;\n+  global_dc->show_option_requested\n+    = global_options_init.x_flag_diagnostics_show_option;\n+  global_dc->show_column\n+    = global_options_init.x_flag_show_column;\n   global_dc->internal_error = plugins_internal_error_function;\n   global_dc->option_enabled = option_enabled;\n   global_dc->option_state = &global_options;\n@@ -2395,10 +2382,29 @@ toplev_main (int argc, char **argv)\n   /* Initialization of GCC's environment, and diagnostics.  */\n   general_init (argv[0]);\n \n+  /* One-off initialization of options that does not need to be\n+     repeated when options are added for particular functions.  */\n+  init_options_once ();\n+\n+  /* Initialize global options structures; this must be repeated for\n+     each structure used for parsing options.  */\n+  init_options_struct (&global_options, &global_options_set);\n+  lang_hooks.init_options_struct (&global_options);\n+\n+  /* Convert the options to an array.  */\n+  decode_cmdline_options_to_array_default_mask (argc,\n+\t\t\t\t\t\tCONST_CAST2 (const char **,\n+\t\t\t\t\t\t\t     char **, argv),\n+\t\t\t\t\t\t&save_decoded_options,\n+\t\t\t\t\t\t&save_decoded_options_count);\n+\n+  /* Perform language-specific options initialization.  */\n+  lang_hooks.init_options (save_decoded_options_count, save_decoded_options);\n+\n   /* Parse the options and do minimal processing; basically just\n      enough to default flags appropriately.  */\n-  decode_options (argc, CONST_CAST2 (const char **, char **, argv),\n-\t\t  &save_decoded_options, &save_decoded_options_count);\n+  decode_options (&global_options, &global_options_set,\n+\t\t  save_decoded_options, save_decoded_options_count);\n \n   init_local_tick ();\n "}, {"sha": "330c84909736e9d3aeee1816fbcdc41d70d0953f", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a75bfaa6cdea2dd7c2e8ac2aa4f52267b3213362", "patch": "@@ -32,7 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"real.h\"\n #include \"fixed-value.h\"\n #include \"alias.h\"\n-#include \"options.h\"\n+#include \"flags.h\"\n \n /* Codes of tree nodes */\n "}]}