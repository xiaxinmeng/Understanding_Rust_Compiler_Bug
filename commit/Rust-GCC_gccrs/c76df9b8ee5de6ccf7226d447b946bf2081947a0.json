{"sha": "c76df9b8ee5de6ccf7226d447b946bf2081947a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc2ZGY5YjhlZTVkZTZjY2Y3MjI2ZDQ0N2I5NDZiZjIwODE5NDdhMA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-20T12:53:02Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-20T12:53:33Z"}, "message": "Remove unused code\n\nThis was part of basing the rust front-end off the gccgo and this was a dup\nof rust-object-export.c.", "tree": {"sha": "1c23e61aeda517aa300cf947c6fa891d3d49067f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c23e61aeda517aa300cf947c6fa891d3d49067f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c76df9b8ee5de6ccf7226d447b946bf2081947a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c76df9b8ee5de6ccf7226d447b946bf2081947a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c76df9b8ee5de6ccf7226d447b946bf2081947a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c76df9b8ee5de6ccf7226d447b946bf2081947a0/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02713d245aaffd45d8daaf8c914b1dda5baa6eb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02713d245aaffd45d8daaf8c914b1dda5baa6eb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02713d245aaffd45d8daaf8c914b1dda5baa6eb4"}], "stats": {"total": 195, "additions": 0, "deletions": 195}, "files": [{"sha": "427fbe0c136491f7b4af2621617f4ffecfe5a184", "filename": "gcc/rust/rust-backend.c", "status": "removed", "additions": 0, "deletions": 195, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02713d245aaffd45d8daaf8c914b1dda5baa6eb4/gcc%2Frust%2Frust-backend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02713d245aaffd45d8daaf8c914b1dda5baa6eb4/gcc%2Frust%2Frust-backend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-backend.c?ref=02713d245aaffd45d8daaf8c914b1dda5baa6eb4", "patch": "@@ -1,195 +0,0 @@\n-/* rust-backend.c -- Rust frontend interface to gcc backend.\n-   Copyright (C) 2010-2020 Free Software Foundation, Inc.\n-\n-   This file is part of GCC.\n-\n-   GCC is free software; you can redistribute it and/or modify it under\n-   the terms of the GNU General Public License as published by the Free\n-   Software Foundation; either version 3, or (at your option) any later\n-   version.\n-\n-   GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-   WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-   for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with GCC; see the file COPYING3.  If not see\n-   <http://www.gnu.org/licenses/>.  */\n-\n-#include \"config.h\"\n-#include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"target.h\"\n-#include \"tree.h\"\n-#include \"memmodel.h\"\n-#include \"tm_p.h\"\n-#include \"diagnostic.h\"\n-#include \"simple-object.h\"\n-#include \"stor-layout.h\"\n-#include \"intl.h\"\n-#include \"output.h\" /* for assemble_string */\n-#include \"common/common-target.h\"\n-//#include \"rust-c.h\" // import no longer exists, so hopefully not broken\n-\n-// satisfy intellisense\n-#include \"options.h\"\n-\n-/* The segment name we pass to simple_object_start_read to find Rust\n-   export data.  */\n-\n-#ifndef RUST_EXPORT_SEGMENT_NAME\n-#define RUST_EXPORT_SEGMENT_NAME \"__GNU_RUST\"\n-#endif\n-\n-/* The section name we use when reading and writing export data.  */\n-\n-#ifndef RUST_EXPORT_SECTION_NAME\n-#define RUST_EXPORT_SECTION_NAME \".rust_export\"\n-#endif\n-\n-#ifndef TARGET_AIX\n-#define TARGET_AIX 0\n-#endif\n-\n-/* This file holds all the cases where the Rust frontend needs\n-   information from gcc's backend.  */\n-\n-/* Return whether or not GCC has reported any errors.  */\n-\n-bool\n-saw_errors (void)\n-{\n-  return errorcount != 0 || sorrycount != 0;\n-}\n-\n-/* Return the alignment in bytes of a struct field of type T.  */\n-\n-unsigned int\n-rust_field_alignment (tree t)\n-{\n-  unsigned int v;\n-\n-  v = TYPE_ALIGN (t);\n-\n-#ifdef BIGGEST_FIELD_ALIGNMENT\n-  if (v > BIGGEST_FIELD_ALIGNMENT)\n-    v = BIGGEST_FIELD_ALIGNMENT;\n-#endif\n-\n-#ifdef ADJUST_FIELD_ALIGN\n-  v = ADJUST_FIELD_ALIGN (NULL_TREE, t, v);\n-#endif\n-\n-  return v / BITS_PER_UNIT;\n-}\n-\n-/* This is called by the Rust frontend proper if the unsafe package was\n-   imported.  When that happens we cannot do type-based alias\n-   analysis.  */\n-// TODO: this should be removed, as it only pertains to Go, not Rust\n-void\n-rust_imported_unsafe (void)\n-{\n-  flag_strict_aliasing = false;\n-  TREE_OPTIMIZATION (optimization_default_node)->x_flag_strict_aliasing = false;\n-\n-  /* Let the backend know that the options have changed.  */\n-  targetm.override_options_after_change ();\n-}\n-\n-/* This is called by the Rust frontend proper to add data to the\n-   section containing Rust export data.  */\n-\n-void\n-rust_write_export_data (const char *bytes, unsigned int size)\n-{\n-  static section *sec;\n-\n-  if (sec == NULL)\n-    {\n-      gcc_assert (targetm_common.have_named_sections);\n-      sec = get_section (RUST_EXPORT_SECTION_NAME,\n-\t\t\t TARGET_AIX ? SECTION_EXCLUDE : SECTION_DEBUG, NULL);\n-    }\n-\n-  switch_to_section (sec);\n-  assemble_string (bytes, size);\n-}\n-\n-/* The rust_read_export_data function is called by the Rust frontend\n-   proper to read Rust export data from an object file.  FD is a file\n-   descriptor open for reading.  OFFSET is the offset within the file\n-   where the object file starts; this will be 0 except when reading an\n-   archive.  On success this returns NULL and sets *PBUF to a buffer\n-   allocated using malloc, of size *PLEN, holding the export data.  If\n-   the data is not found, this returns NULL and sets *PBUF to NULL and\n-   *PLEN to 0.  If some error occurs, this returns an error message\n-   and sets *PERR to an errno value or 0 if there is no relevant\n-   errno.  */\n-\n-const char *\n-rust_read_export_data (int fd, off_t offset, char **pbuf, size_t *plen,\n-\t\t       int *perr)\n-{\n-  simple_object_read *sobj;\n-  const char *errmsg;\n-  off_t sec_offset;\n-  off_t sec_length;\n-  int found;\n-  char *buf;\n-  ssize_t c;\n-\n-  *pbuf = NULL;\n-  *plen = 0;\n-\n-  sobj = simple_object_start_read (fd, offset, RUST_EXPORT_SEGMENT_NAME,\n-\t\t\t\t   &errmsg, perr);\n-  if (sobj == NULL)\n-    {\n-      /* If we get an error here, just pretend that we didn't find any\n-\t export data.  This is the right thing to do if the error is\n-\t that the file was not recognized as an object file.  This\n-\t will ignore file I/O errors, but it's not too big a deal\n-\t because we will wind up giving some other error later.  */\n-      return NULL;\n-    }\n-\n-  found = simple_object_find_section (sobj, RUST_EXPORT_SECTION_NAME,\n-\t\t\t\t      &sec_offset, &sec_length, &errmsg, perr);\n-  simple_object_release_read (sobj);\n-  if (!found)\n-    return errmsg;\n-\n-  if (lseek (fd, offset + sec_offset, SEEK_SET) < 0)\n-    {\n-      *perr = errno;\n-      return _ (\"lseek failed while reading export data\");\n-    }\n-\n-  buf = XNEWVEC (char, sec_length);\n-  if (buf == NULL)\n-    {\n-      *perr = errno;\n-      return _ (\"memory allocation failed while reading export data\");\n-    }\n-\n-  c = read (fd, buf, sec_length);\n-  if (c < 0)\n-    {\n-      *perr = errno;\n-      free (buf);\n-      return _ (\"read failed while reading export data\");\n-    }\n-\n-  if (c < sec_length)\n-    {\n-      free (buf);\n-      return _ (\"short read while reading export data\");\n-    }\n-\n-  *pbuf = buf;\n-  *plen = sec_length;\n-\n-  return NULL;\n-}"}]}