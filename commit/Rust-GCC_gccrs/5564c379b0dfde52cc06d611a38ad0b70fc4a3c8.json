{"sha": "5564c379b0dfde52cc06d611a38ad0b70fc4a3c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU2NGMzNzliMGRmZGU1MmNjMDZkNjExYTM4YWQwYjcwZmM0YTNjOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-11-26T12:15:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-11-26T12:15:43Z"}, "message": "re PR testsuite/66799 (gcc.dg/vect/pr20122.c FAILs)\n\n2015-11-26  Richard Biener  <rguenther@suse.de>\n\n\tPR testsuite/66799\n\t* gcc.dg/vect/pr20122.c (main): Do not align Kernel, do not\n\tvectorize init loop and adjust expected outcome.\n\nFrom-SVN: r230943", "tree": {"sha": "e4e353074feceb80a8752b7beb42dba84be6de9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4e353074feceb80a8752b7beb42dba84be6de9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5564c379b0dfde52cc06d611a38ad0b70fc4a3c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5564c379b0dfde52cc06d611a38ad0b70fc4a3c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5564c379b0dfde52cc06d611a38ad0b70fc4a3c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5564c379b0dfde52cc06d611a38ad0b70fc4a3c8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "89a01fcf4cff990c0d25d048ae01abb476070d05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89a01fcf4cff990c0d25d048ae01abb476070d05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89a01fcf4cff990c0d25d048ae01abb476070d05"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "faae5f79dfd3b05175bdefce5b9dfe3d6aeeb47e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5564c379b0dfde52cc06d611a38ad0b70fc4a3c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5564c379b0dfde52cc06d611a38ad0b70fc4a3c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5564c379b0dfde52cc06d611a38ad0b70fc4a3c8", "patch": "@@ -1,3 +1,9 @@\n+2015-11-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/66799\n+\t* gcc.dg/vect/pr20122.c (main): Do not align Kernel, do not\n+\tvectorize init loop and adjust expected outcome.\n+\n 2015-11-26  Richard Biener  <rguenther@suse.de>\n \n \tPR testsuite/67203"}, {"sha": "4f1b7bd6c1e723405b6625f7c7c890a46d3272bc", "filename": "gcc/testsuite/gcc.dg/vect/pr20122.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5564c379b0dfde52cc06d611a38ad0b70fc4a3c8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr20122.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5564c379b0dfde52cc06d611a38ad0b70fc4a3c8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr20122.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr20122.c?ref=5564c379b0dfde52cc06d611a38ad0b70fc4a3c8", "patch": "@@ -36,20 +36,23 @@ int main (int argc, char **argv)\n {\n     check_vect ();\n \n-    short Kernel[8][24] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+    short Kernel[8][24];\n     int k,i;\n \n     for (k = 0; k<8; k++)\n-        for (i = 0; i<24; i++)\n-            Kernel[k][i] = 0;\n+      for (i = 0; i<24; i++)\n+\t{\n+\t  Kernel[k][i] = 0;\n+\t  /* Don't get into the game of versioning vs. peeling.  */\n+\t  __asm__ volatile (\"\" : : : \"memory\");\n+\t}\n \n     VecBug(Kernel);\n     VecBug2(Kernel);\n \n     return 0;\n }\n \n-/* The loops in VecBug and VecBug2 require versioning for alignment.\n-   The loop in main is aligned.  */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" } } */\n+/* The loops in VecBug and VecBug2 require versioning for alignment.  */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" } } */\n /*  { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 2 \"vect\" { target { vect_no_align && { ! vect_hw_misalign } } } } } */"}]}