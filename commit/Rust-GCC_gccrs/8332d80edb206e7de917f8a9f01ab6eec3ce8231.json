{"sha": "8332d80edb206e7de917f8a9f01ab6eec3ce8231", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMzMmQ4MGVkYjIwNmU3ZGU5MTdmOGE5ZjAxYWI2ZWVjM2NlODIzMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-22T23:09:40Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-22T23:09:40Z"}, "message": "Correctly handle tuple assignment to _ at global scope.\n\nFrom-SVN: r168184", "tree": {"sha": "fa5330368071f721abd72882ca2f588bb8a56dbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa5330368071f721abd72882ca2f588bb8a56dbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8332d80edb206e7de917f8a9f01ab6eec3ce8231", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8332d80edb206e7de917f8a9f01ab6eec3ce8231", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8332d80edb206e7de917f8a9f01ab6eec3ce8231", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8332d80edb206e7de917f8a9f01ab6eec3ce8231/comments", "author": null, "committer": null, "parents": [{"sha": "0bfe3fa10f5d5f3dfdc854f5991f83b469e54603", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bfe3fa10f5d5f3dfdc854f5991f83b469e54603", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bfe3fa10f5d5f3dfdc854f5991f83b469e54603"}], "stats": {"total": 60, "additions": 46, "deletions": 14}, "files": [{"sha": "f4b01be8c93452c88fc71e6e804194fb5950c1b7", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 45, "deletions": 14, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8332d80edb206e7de917f8a9f01ab6eec3ce8231/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8332d80edb206e7de917f8a9f01ab6eec3ce8231/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=8332d80edb206e7de917f8a9f01ab6eec3ce8231", "patch": "@@ -1654,8 +1654,18 @@ Parse::init_vars_from_map(const Typed_identifier_list* vars, Type* type,\n \n   if (!this->gogo_->in_global_scope())\n     this->gogo_->add_statement(s);\n-  else\n+  else if (!val_no->is_sink())\n     val_no->var_value()->add_preinit_statement(s);\n+  else if (!no->is_sink())\n+    no->var_value()->add_preinit_statement(s);\n+  else\n+    {\n+      // Execute the map index expression just so that we can fail if\n+      // the map is nil.\n+      Named_object* dummy = this->create_dummy_global(Type::lookup_bool_type(),\n+\t\t\t\t\t\t      NULL, location);\n+      dummy->var_value()->add_preinit_statement(s);\n+    }\n \n   return true;\n }\n@@ -1705,8 +1715,16 @@ Parse::init_vars_from_receive(const Typed_identifier_list* vars, Type* type,\n \n   if (!this->gogo_->in_global_scope())\n     this->gogo_->add_statement(s);\n-  else\n+  else if (!val_no->is_sink())\n     val_no->var_value()->add_preinit_statement(s);\n+  else if (!no->is_sink())\n+    no->var_value()->add_preinit_statement(s);\n+  else\n+    {\n+      Named_object* dummy = this->create_dummy_global(Type::lookup_bool_type(),\n+\t\t\t\t\t\t      NULL, location);\n+      dummy->var_value()->add_preinit_statement(s);\n+    }\n \n   return true;\n }\n@@ -1757,8 +1775,15 @@ Parse::init_vars_from_type_guard(const Typed_identifier_list* vars,\n \n   if (!this->gogo_->in_global_scope())\n     this->gogo_->add_statement(s);\n-  else\n+  else if (!val_no->is_sink())\n     val_no->var_value()->add_preinit_statement(s);\n+  else if (!no->is_sink())\n+    no->var_value()->add_preinit_statement(s);\n+  else\n+    {\n+      Named_object* dummy = this->create_dummy_global(type, NULL, location);\n+      dummy->var_value()->add_preinit_statement(s);\n+    }\n \n   return true;\n }\n@@ -1780,17 +1805,7 @@ Parse::init_var(const Typed_identifier& tid, Type* type, Expression* init,\n \t  if (!this->gogo_->in_global_scope())\n \t    this->gogo_->add_statement(Statement::make_statement(init));\n \t  else\n-\t    {\n-\t      // Create a dummy global variable to force the\n-\t      // initializer to be run in the right place.\n-\t      Variable* var = new Variable(type, init, true, false, false,\n-\t\t\t\t\t   location);\n-\t      static int count;\n-\t      char buf[30];\n-\t      snprintf(buf, sizeof buf, \"_.%d\", count);\n-\t      ++count;\n-\t      return this->gogo_->add_variable(buf, var);\n-\t    }\n+\t    return this->create_dummy_global(type, init, location);\n \t}\n       return this->gogo_->add_sink();\n     }\n@@ -1818,6 +1833,22 @@ Parse::init_var(const Typed_identifier& tid, Type* type, Expression* init,\n   return this->gogo_->add_variable(tid.name(), var);\n }\n \n+// Create a dummy global variable to force an initializer to be run in\n+// the right place.  This is used when a sink variable is initialized\n+// at global scope.\n+\n+Named_object*\n+Parse::create_dummy_global(Type* type, Expression* init,\n+\t\t\t   source_location location)\n+{\n+  Variable* var = new Variable(type, init, true, false, false, location);\n+  static int count;\n+  char buf[30];\n+  snprintf(buf, sizeof buf, \"_.%d\", count);\n+  ++count;\n+  return this->gogo_->add_variable(buf, var);\n+}\n+\n // SimpleVarDecl = identifier \":=\" Expression .\n \n // We've already seen the identifier."}, {"sha": "1fa931957553b93e2cbc3ac109e9182dc3d99f57", "filename": "gcc/go/gofrontend/parse.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8332d80edb206e7de917f8a9f01ab6eec3ce8231/gcc%2Fgo%2Fgofrontend%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8332d80edb206e7de917f8a9f01ab6eec3ce8231/gcc%2Fgo%2Fgofrontend%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.h?ref=8332d80edb206e7de917f8a9f01ab6eec3ce8231", "patch": "@@ -197,6 +197,7 @@ class Parse\n \t\t\t\t source_location);\n   Named_object* init_var(const Typed_identifier&, Type*, Expression*,\n \t\t\t bool is_coloneq, bool type_from_init, bool* is_new);\n+  Named_object* create_dummy_global(Type*, Expression*, source_location);\n   void simple_var_decl_or_assignment(const std::string&, source_location,\n \t\t\t\t     Range_clause*, Type_switch*);\n   void function_decl();"}]}