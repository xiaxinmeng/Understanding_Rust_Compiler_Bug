{"sha": "209d691e03db40324ff03a7ce928730a66c964e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA5ZDY5MWUwM2RiNDAzMjRmZjAzYTdjZTkyODczMGE2NmM5NjRlOQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-04-25T21:47:34Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-04-25T21:47:34Z"}, "message": "Removed __NetBSD__ from conditional.\n\nDeclare strerror if HAVE_STRERROR is defined; otherwise declare\nsys_errlist and sys_nerr.\n(my_strerror): New function.\n(errno): Don't define if already defined as a macro.\n\nFrom-SVN: r9449", "tree": {"sha": "c2cc43835a211aeaa45beef6424ed7e399c25dfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2cc43835a211aeaa45beef6424ed7e399c25dfe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/209d691e03db40324ff03a7ce928730a66c964e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/209d691e03db40324ff03a7ce928730a66c964e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/209d691e03db40324ff03a7ce928730a66c964e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/209d691e03db40324ff03a7ce928730a66c964e9/comments", "author": null, "committer": null, "parents": [{"sha": "d14d353d13ed006cd65c22c97923c0a726a27a3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d14d353d13ed006cd65c22c97923c0a726a27a3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d14d353d13ed006cd65c22c97923c0a726a27a3a"}], "stats": {"total": 80, "additions": 55, "deletions": 25}, "files": [{"sha": "d6d9d4a1fdaa8872ac065ab8104392b9097609f8", "filename": "gcc/protoize.c", "status": "modified", "additions": 55, "deletions": 25, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/209d691e03db40324ff03a7ce928730a66c964e9/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/209d691e03db40324ff03a7ce928730a66c964e9/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=209d691e03db40324ff03a7ce928730a66c964e9", "patch": "@@ -80,12 +80,20 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"getopt.h\"\n #undef getopt\n \n+#ifndef errno\n extern int errno;\n-#if defined(bsd4_4) || defined(__NetBSD__)\n+#endif\n+\n+#ifndef HAVE_STRERROR\n+#if defined(bsd4_4)\n extern const char *const sys_errlist[];\n #else\n extern char *sys_errlist[];\n #endif\n+#else\n+extern char *strerror();\n+#endif\n+\n extern char *version_string;\n \n /* Systems which are compatible only with POSIX 1003.1-1988 (but *not*\n@@ -614,6 +622,28 @@ static char * saved_repl_write_ptr;\n \n static const char *shortpath ();\n \f\n+char *\n+my_strerror(e)\n+     int e;\n+{\n+\n+#ifdef HAVE_STRERROR\n+  return strerror(e);\n+\n+#else\n+\n+  static char buffer[30];\n+  if (!e)\n+    return \"\";\n+\n+  if (e > 0 && e < sys_nerr)\n+    return sys_errlist[e];\n+\n+  sprintf (buffer, \"Unknown error %d\", e);\n+  return buffer;\n+#endif\n+}\n+\f\n /* Allocate some space, but check that the allocation was successful.  */\n /* alloca.c uses this, so don't make it static.  */\n \n@@ -789,7 +819,7 @@ safe_write (desc, ptr, len, out_fname)\n \t  continue;\n #endif\n \tfprintf (stderr, \"%s: error writing file `%s': %s\\n\",\n-\t\t pname, shortpath (NULL, out_fname), sys_errlist[errno]);\n+\t\t pname, shortpath (NULL, out_fname), my_strerror(errno));\n \treturn;\n       }\n     ptr += written;\n@@ -1481,7 +1511,7 @@ find_file (filename, do_not_stat)\n           if (my_stat (filename, &stat_buf) == -1)\n             {\n               fprintf (stderr, \"%s: %s: can't get status: %s\\n\",\n-\t\t       pname, shortpath (NULL, filename), sys_errlist[errno]);\n+\t\t       pname, shortpath (NULL, filename), my_strerror(errno));\n               stat_buf.st_mtime = (time_t) -1;\n             }\n         }\n@@ -2082,7 +2112,7 @@ gen_aux_info_file (base_filename)\n       if (child_pid == -1)\n         {\n           fprintf (stderr, \"%s: could not fork process: %s\\n\",\n-\t\t   pname, sys_errlist[errno]);\n+\t\t   pname, my_strerror(errno));\n           return 0;\n         }\n \n@@ -2110,7 +2140,7 @@ gen_aux_info_file (base_filename)\n         if (wait (&wait_status) == -1)\n           {\n             fprintf (stderr, \"%s: wait failed: %s\\n\",\n-\t\t     pname, sys_errlist[errno]);\n+\t\t     pname, my_strerror(errno));\n             return 0;\n           }\n \tif (WIFSIGNALED (wait_status))\n@@ -2197,7 +2227,7 @@ start_over: ;\n \t{\n \t  fprintf (stderr, \"%s: can't read aux info file `%s': %s\\n\",\n \t\t   pname, shortpath (NULL, aux_info_filename),\n-\t\t   sys_errlist[errno]);\n+\t\t   my_strerror(errno));\n \t  errors++;\n \t  return;\n \t}\n@@ -2225,7 +2255,7 @@ start_over: ;\n \t{\n \t  fprintf (stderr, \"%s: can't read aux info file `%s': %s\\n\",\n \t\t   pname, shortpath (NULL, aux_info_filename),\n-\t\t   sys_errlist[errno]);\n+\t\t   my_strerror(errno));\n \t  errors++;\n \t  return;\n \t}\n@@ -2240,7 +2270,7 @@ start_over: ;\n       {\n         fprintf (stderr, \"%s: can't get status of aux info file `%s': %s\\n\",\n \t\t pname, shortpath (NULL, aux_info_filename),\n-\t\t sys_errlist[errno]);\n+\t\t my_strerror(errno));\n         errors++;\n         return;\n       }\n@@ -2267,7 +2297,7 @@ start_over: ;\n \t  {\n \t    fprintf (stderr, \"%s: can't get status of aux info file `%s': %s\\n\",\n \t\t     pname, shortpath (NULL, base_source_filename),\n-\t\t     sys_errlist[errno]);\n+\t\t     my_strerror(errno));\n \t    errors++;\n \t    return;\n \t  }\n@@ -2288,7 +2318,7 @@ start_over: ;\n       {\n         fprintf (stderr, \"%s: can't open aux info file `%s' for reading: %s\\n\",\n \t\t pname, shortpath (NULL, aux_info_filename),\n-\t\t sys_errlist[errno]);\n+\t\t my_strerror(errno));\n         return;\n       }\n   \n@@ -2304,7 +2334,7 @@ start_over: ;\n       {\n         fprintf (stderr, \"%s: error reading aux info file `%s': %s\\n\",\n \t\t pname, shortpath (NULL, aux_info_filename),\n-\t\t sys_errlist[errno]);\n+\t\t my_strerror(errno));\n         free (aux_info_base);\n         close (aux_info_file);\n         return;\n@@ -2316,7 +2346,7 @@ start_over: ;\n       {\n         fprintf (stderr, \"%s: error closing aux info file `%s': %s\\n\",\n \t\t pname, shortpath (NULL, aux_info_filename),\n-\t\t sys_errlist[errno]);\n+\t\t my_strerror(errno));\n         free (aux_info_base);\n         close (aux_info_file);\n         return;\n@@ -2330,7 +2360,7 @@ start_over: ;\n     if (my_unlink (aux_info_filename) == -1)\n       fprintf (stderr, \"%s: can't delete aux info file `%s': %s\\n\",\n \t       pname, shortpath (NULL, aux_info_filename),\n-\t       sys_errlist[errno]);\n+\t       my_strerror(errno));\n \n   /* Save a pointer into the first line of the aux_info file which\n      contains the filename of the directory from which the compiler\n@@ -2396,7 +2426,7 @@ start_over: ;\n                   {\n                     fprintf (stderr, \"%s: can't delete file `%s': %s\\n\",\n \t\t\t     pname, shortpath (NULL, aux_info_filename),\n-\t\t\t     sys_errlist[errno]);\n+\t\t\t     my_strerror(errno));\n                     return;\n                   }\n \t\tmust_create = 1;\n@@ -2472,15 +2502,15 @@ rename_c_file (hp)\n     {\n       fprintf (stderr, \"%s: warning: can't link file `%s' to `%s': %s\\n\",\n \t       pname, shortpath (NULL, filename),\n-\t       shortpath (NULL, new_filename), sys_errlist[errno]);\n+\t       shortpath (NULL, new_filename), my_strerror(errno));\n       errors++;\n       return;\n     }\n \n   if (my_unlink (filename) == -1)\n     {\n       fprintf (stderr, \"%s: warning: can't delete file `%s': %s\\n\",\n-\t       pname, shortpath (NULL, filename), sys_errlist[errno]);\n+\t       pname, shortpath (NULL, filename), my_strerror(errno));\n       errors++;\n       return;\n     }\n@@ -4176,7 +4206,7 @@ edit_file (hp)\n   if (my_stat ((char *)convert_filename, &stat_buf) == -1)\n     {\n       fprintf (stderr, \"%s: can't get status for file `%s': %s\\n\",\n-\t       pname, shortpath (NULL, convert_filename), sys_errlist[errno]);\n+\t       pname, shortpath (NULL, convert_filename), my_strerror(errno));\n       return;\n     }\n   orig_size = stat_buf.st_size;\n@@ -4211,7 +4241,7 @@ edit_file (hp)\n       {\n         fprintf (stderr, \"%s: can't open file `%s' for reading: %s\\n\",\n \t\t pname, shortpath (NULL, convert_filename),\n-\t\t sys_errlist[errno]);\n+\t\t my_strerror(errno));\n         return;\n       }\n \n@@ -4224,7 +4254,7 @@ edit_file (hp)\n         close (input_file);\n         fprintf (stderr, \"\\n%s: error reading input file `%s': %s\\n\",\n \t\t pname, shortpath (NULL, convert_filename),\n-\t\t sys_errlist[errno]);\n+\t\t my_strerror(errno));\n         return;\n       }\n \n@@ -4257,7 +4287,7 @@ edit_file (hp)\n       {\n         fprintf (stderr, \"%s: can't create/open clean file `%s': %s\\n\",\n \t\t pname, shortpath (NULL, clean_filename),\n-\t\t sys_errlist[errno]);\n+\t\t my_strerror(errno));\n         return;\n       }\n   \n@@ -4366,7 +4396,7 @@ edit_file (hp)\n \t\t       pname,\n \t\t       shortpath (NULL, convert_filename),\n \t\t       shortpath (NULL, new_filename),\n-\t\t       sys_errlist[errno]);\n+\t\t       my_strerror(errno));\n               return;\n             }\n         }\n@@ -4375,7 +4405,7 @@ edit_file (hp)\n   if (my_unlink (convert_filename) == -1)\n     {\n       fprintf (stderr, \"%s: can't delete file `%s': %s\\n\",\n-\t       pname, shortpath (NULL, convert_filename), sys_errlist[errno]);\n+\t       pname, shortpath (NULL, convert_filename), my_strerror(errno));\n       return;\n     }\n \n@@ -4388,7 +4418,7 @@ edit_file (hp)\n       {\n         fprintf (stderr, \"%s: can't create/open output file `%s': %s\\n\",\n \t\t pname, shortpath (NULL, convert_filename),\n-\t\t sys_errlist[errno]);\n+\t\t my_strerror(errno));\n         return;\n       }\n   \n@@ -4414,7 +4444,7 @@ edit_file (hp)\n   /* The cast avoids an erroneous warning on AIX.  */\n   if (my_chmod ((char *)convert_filename, stat_buf.st_mode) == -1)\n     fprintf (stderr, \"%s: can't change mode of file `%s': %s\\n\",\n-\t     pname, shortpath (NULL, convert_filename), sys_errlist[errno]);\n+\t     pname, shortpath (NULL, convert_filename), my_strerror(errno));\n \n   /* Note:  We would try to change the owner and group of the output file\n      to match those of the input file here, except that may not be a good\n@@ -4557,7 +4587,7 @@ main (argc, argv)\n   if (!cwd_buffer)\n     {\n       fprintf (stderr, \"%s: cannot get working directory: %s\\n\",\n-\t       pname, sys_errlist[errno]);\n+\t       pname, my_strerror(errno));\n       exit (1);\n     }\n "}]}