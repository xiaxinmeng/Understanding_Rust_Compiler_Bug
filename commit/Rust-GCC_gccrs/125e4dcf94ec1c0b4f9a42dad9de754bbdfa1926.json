{"sha": "125e4dcf94ec1c0b4f9a42dad9de754bbdfa1926", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI1ZTRkY2Y5NGVjMWMwYjRmOWE0MmRhZDlkZTc1NGJiZGZhMTkyNg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-01-24T19:54:00Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-01-24T19:54:00Z"}, "message": "(struct induction): New fields always_executed and\nauto_inc_opt.\n\nFrom-SVN: r11089", "tree": {"sha": "51ea88e4b803dc7a306373245564583a678e7df8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51ea88e4b803dc7a306373245564583a678e7df8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/125e4dcf94ec1c0b4f9a42dad9de754bbdfa1926", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/125e4dcf94ec1c0b4f9a42dad9de754bbdfa1926", "html_url": "https://github.com/Rust-GCC/gccrs/commit/125e4dcf94ec1c0b4f9a42dad9de754bbdfa1926", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/125e4dcf94ec1c0b4f9a42dad9de754bbdfa1926/comments", "author": null, "committer": null, "parents": [{"sha": "b200d1aa65136d8ced8ca4b9c50d6754d4b685d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b200d1aa65136d8ced8ca4b9c50d6754d4b685d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b200d1aa65136d8ced8ca4b9c50d6754d4b685d4"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "fdb2f1fe32e8a4f79e0f2361588dd20fbe4510ea", "filename": "gcc/loop.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/125e4dcf94ec1c0b4f9a42dad9de754bbdfa1926/gcc%2Floop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/125e4dcf94ec1c0b4f9a42dad9de754bbdfa1926/gcc%2Floop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.h?ref=125e4dcf94ec1c0b4f9a42dad9de754bbdfa1926", "patch": "@@ -75,7 +75,9 @@ struct induction\n \t\t\t\t   even if further info is available.\n \t\t\t\t   Both this and the above can be zero.  */\n   unsigned ignore : 1;\t\t/* 1 prohibits further processing of giv */\n-  unsigned always_computable : 1;/* 1 if this set occurs each iteration */\n+  unsigned always_computable : 1;/* 1 if this value is computable every\n+\t\t\t\t    iteration.  */\n+  unsigned always_executed : 1; /* 1 if this set occurs each iteration.  */\n   unsigned maybe_multiple : 1;\t/* Only used for a biv and  1 if this biv\n \t\t\t\t   update may be done multiple times per\n \t\t\t\t   iteration. */\n@@ -88,6 +90,8 @@ struct induction\n   unsigned maybe_dead : 1;\t/* 1 if this giv might be dead.  In that case,\n \t\t\t\t   we won't use it to eliminate a biv, it\n \t\t\t\t   would probably lose. */\n+  unsigned auto_inc_opt : 1;\t/* 1 if this giv had its increment output next\n+\t\t\t\t   to it to try to form an auto-inc address. */\n   int lifetime;\t\t\t/* Length of life of this giv */\n   int times_used;\t\t/* # times this giv is used. */\n   rtx derive_adjustment;\t/* If nonzero, is an adjustment to be"}]}