{"sha": "a44e0ebb89e453c6663104be721622949f0a885e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ0ZTBlYmI4OWU0NTNjNjY2MzEwNGJlNzIxNjIyOTQ5ZjBhODg1ZQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-02-17T13:42:35Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-02-17T13:42:35Z"}, "message": "[AArch64] PR target/69161: Don't use special predicate for CCmode comparisons in expressions that require matching modes\n\n\tPR target/69161\n\t* config/aarch64/predicates.md (aarch64_comparison_operator_mode):\n\tNew predicate.\n\t(aarch64_comparison_operator): Break overly long line into two.\n\t(aarch64_comparison_operation): Likewise.\n\t* config/aarch64/aarch64.md (cstorecc4): Use\n\taarch64_comparison_operator_mode instead of\n\taarch64_comparison_operator.\n\t(cstore<mode>4): Likewise.\n\t(aarch64_cstore<mode>): Likewise.\n\t(*cstoresi_insn_uxtw): Likewise.\n\t(cstore<mode>_neg): Likewise.\n\t(*cstoresi_neg_uxtw): Likewise.\n\n\t* gcc.c-torture/compile/pr69161.c: New test.\n\nFrom-SVN: r233496", "tree": {"sha": "e0af4443979d7f6854a77a72f719f39a9d8f7c8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0af4443979d7f6854a77a72f719f39a9d8f7c8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a44e0ebb89e453c6663104be721622949f0a885e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a44e0ebb89e453c6663104be721622949f0a885e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a44e0ebb89e453c6663104be721622949f0a885e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a44e0ebb89e453c6663104be721622949f0a885e/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ac4bf40708c5e2f97e5b9e0b066e458c9fe443e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac4bf40708c5e2f97e5b9e0b066e458c9fe443e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac4bf40708c5e2f97e5b9e0b066e458c9fe443e8"}], "stats": {"total": 65, "additions": 57, "deletions": 8}, "files": [{"sha": "6d2a4bd255bcb030b20271bf3dbbdd163c900262", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a44e0ebb89e453c6663104be721622949f0a885e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a44e0ebb89e453c6663104be721622949f0a885e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a44e0ebb89e453c6663104be721622949f0a885e", "patch": "@@ -1,3 +1,19 @@\n+2016-02-17  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/69161\n+\t* config/aarch64/predicates.md (aarch64_comparison_operator_mode):\n+\tNew predicate.\n+\t(aarch64_comparison_operator): Break overly long line into two.\n+\t(aarch64_comparison_operation): Likewise.\n+\t* config/aarch64/aarch64.md (cstorecc4): Use\n+\taarch64_comparison_operator_mode instead of\n+\taarch64_comparison_operator.\n+\t(cstore<mode>4): Likewise.\n+\t(aarch64_cstore<mode>): Likewise.\n+\t(*cstoresi_insn_uxtw): Likewise.\n+\t(cstore<mode>_neg): Likewise.\n+\t(*cstoresi_neg_uxtw): Likewise.\n+\n 2016-02-17  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/69161"}, {"sha": "68676c9bd55421da903d5d40d21eaeba80cb2c4f", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a44e0ebb89e453c6663104be721622949f0a885e/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a44e0ebb89e453c6663104be721622949f0a885e/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=a44e0ebb89e453c6663104be721622949f0a885e", "patch": "@@ -3039,7 +3039,7 @@\n \n (define_expand \"cstorecc4\"\n   [(set (match_operand:SI 0 \"register_operand\")\n-       (match_operator 1 \"aarch64_comparison_operator\"\n+       (match_operator 1 \"aarch64_comparison_operator_mode\"\n \t[(match_operand 2 \"cc_register\")\n          (match_operand 3 \"const0_operand\")]))]\n   \"\"\n@@ -3051,7 +3051,7 @@\n \n (define_expand \"cstore<mode>4\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(match_operator:SI 1 \"aarch64_comparison_operator\"\n+\t(match_operator:SI 1 \"aarch64_comparison_operator_mode\"\n \t [(match_operand:GPF 2 \"register_operand\" \"\")\n \t  (match_operand:GPF 3 \"aarch64_fp_compare_operand\" \"\")]))]\n   \"\"\n@@ -3064,7 +3064,7 @@\n \n (define_insn \"aarch64_cstore<mode>\"\n   [(set (match_operand:ALLI 0 \"register_operand\" \"=r\")\n-\t(match_operator:ALLI 1 \"aarch64_comparison_operator\"\n+\t(match_operator:ALLI 1 \"aarch64_comparison_operator_mode\"\n \t [(match_operand 2 \"cc_register\" \"\") (const_int 0)]))]\n   \"\"\n   \"cset\\\\t%<w>0, %m1\"\n@@ -3109,7 +3109,7 @@\n (define_insn \"*cstoresi_insn_uxtw\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n-\t (match_operator:SI 1 \"aarch64_comparison_operator\"\n+\t (match_operator:SI 1 \"aarch64_comparison_operator_mode\"\n \t  [(match_operand 2 \"cc_register\" \"\") (const_int 0)])))]\n   \"\"\n   \"cset\\\\t%w0, %m1\"\n@@ -3118,7 +3118,7 @@\n \n (define_insn \"cstore<mode>_neg\"\n   [(set (match_operand:ALLI 0 \"register_operand\" \"=r\")\n-\t(neg:ALLI (match_operator:ALLI 1 \"aarch64_comparison_operator\"\n+\t(neg:ALLI (match_operator:ALLI 1 \"aarch64_comparison_operator_mode\"\n \t\t  [(match_operand 2 \"cc_register\" \"\") (const_int 0)])))]\n   \"\"\n   \"csetm\\\\t%<w>0, %m1\"\n@@ -3129,7 +3129,7 @@\n (define_insn \"*cstoresi_neg_uxtw\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n-\t (neg:SI (match_operator:SI 1 \"aarch64_comparison_operator\"\n+\t (neg:SI (match_operator:SI 1 \"aarch64_comparison_operator_mode\"\n \t\t  [(match_operand 2 \"cc_register\" \"\") (const_int 0)]))))]\n   \"\"\n   \"csetm\\\\t%w0, %m1\""}, {"sha": "11868278c3d0a1887c2065568f890c3eb8ff7f0b", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a44e0ebb89e453c6663104be721622949f0a885e/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a44e0ebb89e453c6663104be721622949f0a885e/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=a44e0ebb89e453c6663104be721622949f0a885e", "patch": "@@ -229,10 +229,19 @@\n \n ;; True for integer comparisons and for FP comparisons other than LTGT or UNEQ.\n (define_special_predicate \"aarch64_comparison_operator\"\n-  (match_code \"eq,ne,le,lt,ge,gt,geu,gtu,leu,ltu,unordered,ordered,unlt,unle,unge,ungt\"))\n+  (match_code \"eq,ne,le,lt,ge,gt,geu,gtu,leu,ltu,unordered,\n+\t       ordered,unlt,unle,unge,ungt\"))\n+\n+;; Same as aarch64_comparison_operator but don't ignore the mode.\n+;; RTL SET operations require their operands source and destination have\n+;; the same modes, so we can't ignore the modes there.  See PR target/69161.\n+(define_predicate \"aarch64_comparison_operator_mode\"\n+  (match_code \"eq,ne,le,lt,ge,gt,geu,gtu,leu,ltu,unordered,\n+\t       ordered,unlt,unle,unge,ungt\"))\n \n (define_special_predicate \"aarch64_comparison_operation\"\n-  (match_code \"eq,ne,le,lt,ge,gt,geu,gtu,leu,ltu,unordered,ordered,unlt,unle,unge,ungt\")\n+  (match_code \"eq,ne,le,lt,ge,gt,geu,gtu,leu,ltu,unordered,\n+\t       ordered,unlt,unle,unge,ungt\")\n {\n   if (XEXP (op, 1) != const0_rtx)\n     return false;"}, {"sha": "660d4712b696b0c35eedb732966fdf430130c6de", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a44e0ebb89e453c6663104be721622949f0a885e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a44e0ebb89e453c6663104be721622949f0a885e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a44e0ebb89e453c6663104be721622949f0a885e", "patch": "@@ -1,3 +1,8 @@\n+2016-02-17  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/69161\n+\t* gcc.c-torture/compile/pr69161.c: New test.\n+\n 2016-02-17  David Sherwood  <david.sherwood@arm.com>\n \n \tPR target/69532"}, {"sha": "fdbb63f3335851c2d1537b098f245a9b85ef3695", "filename": "gcc/testsuite/gcc.c-torture/compile/pr69161.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a44e0ebb89e453c6663104be721622949f0a885e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr69161.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a44e0ebb89e453c6663104be721622949f0a885e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr69161.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr69161.c?ref=a44e0ebb89e453c6663104be721622949f0a885e", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/69161.  */\n+\n+char a;\n+int b, c, d, e;\n+\n+void\n+foo (void)\n+{\n+  int f;\n+  for (f = 0; f <= 4; f++)\n+    {\n+      for (d = 0; d < 20; d++)\n+\t{\n+\t  __INTPTR_TYPE__ g = (__INTPTR_TYPE__) & c;\n+\t  b &= (0 != g) > e;\n+\t}\n+      e &= a;\n+    }\n+}"}]}