{"sha": "7c95f621b31f1366bd1276146783103e81b0eb7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M5NWY2MjFiMzFmMTM2NmJkMTI3NjE0Njc4MzEwM2U4MWIwZWI3ZA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-04-26T03:43:17Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-04-26T03:43:17Z"}, "message": "fold-const.c (fold): Prefer fold_convert (negate_expr (...)) to fold (build1 (NEGATE_EXPR, ...)).\n\n\n\t* fold-const.c (fold): Prefer fold_convert (negate_expr (...)) to\n\tfold (build1 (NEGATE_EXPR, ...)).  Optimize X / -1 as -X and\n\tX % -1 as 0.\n\nFrom-SVN: r81177", "tree": {"sha": "e60d57cffadb2517757416b209a15cc1c170da02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e60d57cffadb2517757416b209a15cc1c170da02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c95f621b31f1366bd1276146783103e81b0eb7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c95f621b31f1366bd1276146783103e81b0eb7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c95f621b31f1366bd1276146783103e81b0eb7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c95f621b31f1366bd1276146783103e81b0eb7d/comments", "author": null, "committer": null, "parents": [{"sha": "29c246a7a7c5a90aa45a58924ddd1d6f67d1ba18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29c246a7a7c5a90aa45a58924ddd1d6f67d1ba18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29c246a7a7c5a90aa45a58924ddd1d6f67d1ba18"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "6cb1567b24d27867980f4b4f7e1eaf2a63699eb2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c95f621b31f1366bd1276146783103e81b0eb7d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c95f621b31f1366bd1276146783103e81b0eb7d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c95f621b31f1366bd1276146783103e81b0eb7d", "patch": "@@ -1,3 +1,9 @@\n+2004-04-25  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (fold): Prefer fold_convert (negate_expr (...)) to\n+\tfold (build1 (NEGATE_EXPR, ...)).  Optimize X / -1 as -X and\n+\tX % -1 as 0.\n+\n 2004-04-26  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \tPR bootstrap/15141"}, {"sha": "57ae918392c6179162969c4214f2561fda68cfeb", "filename": "gcc/fold-const.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c95f621b31f1366bd1276146783103e81b0eb7d/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c95f621b31f1366bd1276146783103e81b0eb7d/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=7c95f621b31f1366bd1276146783103e81b0eb7d", "patch": "@@ -6412,7 +6412,7 @@ fold (tree expr)\n \t  /* Transform x * -1.0 into -x.  */\n \t  if (!HONOR_SNANS (TYPE_MODE (TREE_TYPE (arg0)))\n \t      && real_minus_onep (arg1))\n-\t    return fold (build1 (NEGATE_EXPR, type, arg0));\n+\t    return fold_convert (type, negate_expr (arg0));\n \n \t  /* Convert (C1/X)*C2 into (C1*C2)/X.  */\n \t  if (flag_unsafe_math_optimizations\n@@ -6768,9 +6768,9 @@ fold (tree expr)\n \t  if (BUILTIN_EXPONENT_P (fcode))\n \t    {\n \t      tree expfn = TREE_OPERAND (TREE_OPERAND (arg1, 0), 0);\n-\t      tree arg = build1 (NEGATE_EXPR, type,\n-\t\t\t\t TREE_VALUE (TREE_OPERAND (arg1, 1)));\n-\t      tree arglist = build_tree_list (NULL_TREE, fold (arg));\n+\t      tree arg = negate_expr (TREE_VALUE (TREE_OPERAND (arg1, 1)));\n+\t      tree arglist = build_tree_list (NULL_TREE,\n+\t\t\t\t\t      fold_convert (type, arg));\n \t      arg1 = build_function_call_expr (expfn, arglist);\n \t      return fold (build (MULT_EXPR, type, arg0, arg1));\n \t    }\n@@ -6783,7 +6783,7 @@ fold (tree expr)\n \t      tree powfn = TREE_OPERAND (TREE_OPERAND (arg1, 0), 0);\n \t      tree arg10 = TREE_VALUE (TREE_OPERAND (arg1, 1));\n \t      tree arg11 = TREE_VALUE (TREE_CHAIN (TREE_OPERAND (arg1, 1)));\n-\t      tree neg11 = fold (build1 (NEGATE_EXPR, type, arg11));\n+\t      tree neg11 = fold_convert (type, negate_expr (arg11));\n \t      tree arglist = tree_cons(NULL_TREE, arg10,\n \t\t\t\t       build_tree_list (NULL_TREE, neg11));\n \t      arg1 = build_function_call_expr (powfn, arglist);\n@@ -6864,6 +6864,12 @@ fold (tree expr)\n \treturn non_lvalue (fold_convert (type, arg0));\n       if (integer_zerop (arg1))\n \treturn t;\n+      /* X / -1 is -X.  */\n+      if (!TYPE_UNSIGNED (type)\n+\t  && TREE_CODE (arg1) == INTEGER_CST\n+\t  && TREE_INT_CST_LOW (arg1) == (unsigned HOST_WIDE_INT) -1\n+\t  && TREE_INT_CST_HIGH (arg1) == -1)\n+\treturn fold_convert (type, negate_expr (arg0));\n \n       /* If arg0 is a multiple of arg1, then rewrite to the fastest div\n \t operation, EXACT_DIV_EXPR.\n@@ -6890,6 +6896,12 @@ fold (tree expr)\n \treturn omit_one_operand (type, integer_zero_node, arg0);\n       if (integer_zerop (arg1))\n \treturn t;\n+      /* X % -1 is zero.  */\n+      if (!TYPE_UNSIGNED (type)\n+\t  && TREE_CODE (arg1) == INTEGER_CST\n+\t  && TREE_INT_CST_LOW (arg1) == (unsigned HOST_WIDE_INT) -1\n+\t  && TREE_INT_CST_HIGH (arg1) == -1)\n+\treturn omit_one_operand (type, integer_zero_node, arg0);\n \n       if (TREE_CODE (arg1) == INTEGER_CST\n \t  && 0 != (tem = extract_muldiv (TREE_OPERAND (t, 0), arg1,"}]}