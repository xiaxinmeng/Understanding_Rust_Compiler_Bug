{"sha": "bb27f5e9ec3c7ab0f5c859d90c59dd4573b53d97", "node_id": "C_kwDOANBUbNoAKGJiMjdmNWU5ZWMzYzdhYjBmNWM4NTlkOTBjNTlkZDQ1NzNiNTNkOTc", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-04T08:23:24Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-04T10:48:04Z"}, "message": "Convert arrays in ssa pointer_equiv_analyzer to auto_vec's.\n\nThe problem in this PR is an off-by-one bug.  We should've allocated\nnum_ssa_names + 1.  However, in fixing this, I noticed that\nnum_ssa_names can change between queries, so I have replaced the array\nwith an auto_vec and added code to grow the vector as necessary.\n\nTested on x86-64 Linux.\n\n\tPR tree-optimization/103062\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/103062\n\t* value-pointer-equiv.cc (ssa_equiv_stack::ssa_equiv_stack):\n\tIncrease size of allocation by 1.\n\t(ssa_equiv_stack::push_replacement): Grow as needed.\n\t(ssa_equiv_stack::get_replacement): Same.\n\t(pointer_equiv_analyzer::pointer_equiv_analyzer): Same.\n\t(pointer_equiv_analyzer::~pointer_equiv_analyzer): Remove delete.\n\t(pointer_equiv_analyzer::set_global_equiv): Grow as needed.\n\t(pointer_equiv_analyzer::get_equiv): Same.\n\t(pointer_equiv_analyzer::get_equiv_expr): Remove const.\n\t* value-pointer-equiv.h (class pointer_equiv_analyzer): Remove\n\tconst markers.  Use auto_vec instead of tree *.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/pr103062.c: New test.", "tree": {"sha": "7ac127b51f562744c2266093157f407bffc51415", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ac127b51f562744c2266093157f407bffc51415"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb27f5e9ec3c7ab0f5c859d90c59dd4573b53d97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb27f5e9ec3c7ab0f5c859d90c59dd4573b53d97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb27f5e9ec3c7ab0f5c859d90c59dd4573b53d97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb27f5e9ec3c7ab0f5c859d90c59dd4573b53d97/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a45d577b2b05e231e7a9abd43165f1e3120af013", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a45d577b2b05e231e7a9abd43165f1e3120af013", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a45d577b2b05e231e7a9abd43165f1e3120af013"}], "stats": {"total": 56, "additions": 41, "deletions": 15}, "files": [{"sha": "cbc371b4cd547e0be411677731df40011909c558", "filename": "gcc/testsuite/gcc.dg/pr103062.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb27f5e9ec3c7ab0f5c859d90c59dd4573b53d97/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103062.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb27f5e9ec3c7ab0f5c859d90c59dd4573b53d97/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103062.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103062.c?ref=bb27f5e9ec3c7ab0f5c859d90c59dd4573b53d97", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -fno-tree-forwprop\" }\n+\n+void *a, *b, *c;\n+void foo(void) {\n+  c = (void *)((__INTPTR_TYPE__)a & (__INTPTR_TYPE__)b);\n+}"}, {"sha": "f07d5d5c7ce7129c64c37ae364c3471f264b0a83", "filename": "gcc/value-pointer-equiv.cc", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb27f5e9ec3c7ab0f5c859d90c59dd4573b53d97/gcc%2Fvalue-pointer-equiv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb27f5e9ec3c7ab0f5c859d90c59dd4573b53d97/gcc%2Fvalue-pointer-equiv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-pointer-equiv.cc?ref=bb27f5e9ec3c7ab0f5c859d90c59dd4573b53d97", "patch": "@@ -58,7 +58,7 @@ class ssa_equiv_stack\n   void enter (basic_block);\n   void leave (basic_block);\n   void push_replacement (tree name, tree replacement);\n-  tree get_replacement (tree name) const;\n+  tree get_replacement (tree name);\n \n private:\n   auto_vec<std::pair <tree, tree>> m_stack;\n@@ -68,7 +68,7 @@ class ssa_equiv_stack\n \n ssa_equiv_stack::ssa_equiv_stack ()\n {\n-  m_replacements.safe_grow_cleared (num_ssa_names);\n+  m_replacements.safe_grow_cleared (num_ssa_names + 1);\n }\n \n // Pushes a marker at the given point.\n@@ -99,29 +99,38 @@ ssa_equiv_stack::leave (basic_block)\n void\n ssa_equiv_stack::push_replacement (tree name, tree replacement)\n {\n-  tree old = m_replacements[SSA_NAME_VERSION (name)];\n-  m_replacements[SSA_NAME_VERSION (name)] = replacement;\n+  unsigned v = SSA_NAME_VERSION (name);\n+\n+  if (v >= m_replacements.length ())\n+    m_replacements.safe_grow_cleared (num_ssa_names + 1);\n+\n+  tree old = m_replacements[v];\n+  m_replacements[v] = replacement;\n   m_stack.safe_push (std::make_pair (name, old));\n }\n \n // Return the equivalence of NAME.\n \n tree\n-ssa_equiv_stack::get_replacement (tree name) const\n+ssa_equiv_stack::get_replacement (tree name)\n {\n-  return m_replacements[SSA_NAME_VERSION (name)];\n+  unsigned v = SSA_NAME_VERSION (name);\n+\n+  if (v >= m_replacements.length ())\n+    m_replacements.safe_grow_cleared (num_ssa_names + 1);\n+\n+  return m_replacements[v];\n }\n \n pointer_equiv_analyzer::pointer_equiv_analyzer (gimple_ranger *r)\n {\n   m_ranger = r;\n-  m_global_points = new tree[num_ssa_names] ();\n+  m_global_points.safe_grow_cleared (num_ssa_names + 1);\n   m_cond_points = new ssa_equiv_stack;\n }\n \n pointer_equiv_analyzer::~pointer_equiv_analyzer ()\n {\n-  delete[] m_global_points;\n   delete m_cond_points;\n }\n \n@@ -130,7 +139,12 @@ pointer_equiv_analyzer::~pointer_equiv_analyzer ()\n void\n pointer_equiv_analyzer::set_global_equiv (tree ssa, tree pointee)\n {\n-  m_global_points[SSA_NAME_VERSION (ssa)] = pointee;\n+  unsigned v = SSA_NAME_VERSION (ssa);\n+\n+  if (v >= m_global_points.length ())\n+    m_global_points.safe_grow_cleared (num_ssa_names + 1);\n+\n+  m_global_points[v] = pointee;\n }\n \n // Set the conditional pointer equivalency for SSA to POINTEE.\n@@ -146,9 +160,14 @@ pointer_equiv_analyzer::set_cond_equiv (tree ssa, tree pointee)\n // conditional info.\n \n tree\n-pointer_equiv_analyzer::get_equiv (tree ssa) const\n+pointer_equiv_analyzer::get_equiv (tree ssa)\n {\n-  tree ret = m_global_points[SSA_NAME_VERSION (ssa)];\n+  unsigned v = SSA_NAME_VERSION (ssa);\n+\n+  if (v >= m_global_points.length ())\n+    m_global_points.safe_grow_cleared (num_ssa_names + 1);\n+\n+  tree ret = m_global_points[v];\n   if (ret)\n     return ret;\n   return m_cond_points->get_replacement (ssa);\n@@ -211,7 +230,7 @@ pointer_equiv_analyzer::leave (basic_block bb)\n // nor an invariant.\n \n tree\n-pointer_equiv_analyzer::get_equiv_expr (tree_code code, tree expr) const\n+pointer_equiv_analyzer::get_equiv_expr (tree_code code, tree expr)\n {\n   if (code == SSA_NAME)\n     return get_equiv (expr);"}, {"sha": "dc747d0af70d7477739a5593dbc0b98841202fd1", "filename": "gcc/value-pointer-equiv.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb27f5e9ec3c7ab0f5c859d90c59dd4573b53d97/gcc%2Fvalue-pointer-equiv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb27f5e9ec3c7ab0f5c859d90c59dd4573b53d97/gcc%2Fvalue-pointer-equiv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-pointer-equiv.h?ref=bb27f5e9ec3c7ab0f5c859d90c59dd4573b53d97", "patch": "@@ -38,17 +38,17 @@ class pointer_equiv_analyzer\n   void enter (basic_block);\n   void leave (basic_block);\n   void visit_stmt (gimple *stmt);\n-  tree get_equiv (tree ssa) const;\n+  tree get_equiv (tree ssa);\n \n private:\n   void visit_edge (edge e);\n-  tree get_equiv_expr (tree_code code, tree expr) const;\n+  tree get_equiv_expr (tree_code code, tree expr);\n   void set_global_equiv (tree ssa, tree pointee);\n   void set_cond_equiv (tree ssa, tree pointee);\n \n   gimple_ranger *m_ranger;\n   // Global pointer equivalency indexed by SSA_NAME_VERSION.\n-  tree *m_global_points;\n+  auto_vec<tree> m_global_points;\n   // Conditional pointer equivalency.\n   class ssa_equiv_stack *m_cond_points;\n };"}]}