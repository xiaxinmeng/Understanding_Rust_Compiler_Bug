{"sha": "d092f0f60590cffbce8d7cf8128e5b593675be17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA5MmYwZjYwNTkwY2ZmYmNlOGQ3Y2Y4MTI4ZTViNTkzNjc1YmUxNw==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2006-11-17T09:24:01Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2006-11-17T09:24:01Z"}, "message": "tree-ssa-alias.c (new_type_alias): Do not use offset of expr to select subvars of var.\n\n\t* tree-ssa-alias.c (new_type_alias): Do not use offset of expr to\n\tselect subvars of var.\n\nFrom-SVN: r118924", "tree": {"sha": "6417ae015c1813c152e394028dcb7622bc2cebad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6417ae015c1813c152e394028dcb7622bc2cebad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d092f0f60590cffbce8d7cf8128e5b593675be17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d092f0f60590cffbce8d7cf8128e5b593675be17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d092f0f60590cffbce8d7cf8128e5b593675be17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d092f0f60590cffbce8d7cf8128e5b593675be17/comments", "author": null, "committer": null, "parents": [{"sha": "c7b38a8574b6b442b78e40256022ce419ca2eb04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7b38a8574b6b442b78e40256022ce419ca2eb04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7b38a8574b6b442b78e40256022ce419ca2eb04"}], "stats": {"total": 50, "additions": 37, "deletions": 13}, "files": [{"sha": "dc857349ef0d7190b2a85ca4755240697930a433", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d092f0f60590cffbce8d7cf8128e5b593675be17/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d092f0f60590cffbce8d7cf8128e5b593675be17/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d092f0f60590cffbce8d7cf8128e5b593675be17", "patch": "@@ -1,3 +1,8 @@\n+2006-11-17  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\t* tree-ssa-alias.c (new_type_alias): Do not use offset of expr to\n+\tselect subvars of var.\n+\n 2006-11-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/29584"}, {"sha": "275c2449a0db5f3b37ca243b328351522ec42d11", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d092f0f60590cffbce8d7cf8128e5b593675be17/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d092f0f60590cffbce8d7cf8128e5b593675be17/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=d092f0f60590cffbce8d7cf8128e5b593675be17", "patch": "@@ -2755,6 +2755,9 @@ new_type_alias (tree ptr, tree var, tree expr)\n   tree ali = NULL_TREE;\n   HOST_WIDE_INT offset, size, maxsize;\n   tree ref;\n+  VEC (tree, heap) *overlaps = NULL;\n+  subvar_t sv;\n+  unsigned int len;\n \n   gcc_assert (p_ann->symbol_mem_tag == NULL_TREE);\n   gcc_assert (!MTAG_P (var));\n@@ -2767,29 +2770,46 @@ new_type_alias (tree ptr, tree var, tree expr)\n \n   /* Add VAR to the may-alias set of PTR's new symbol tag.  If VAR has\n      subvars, add the subvars to the tag instead of the actual var.  */\n-  if (var_can_have_subvars (var)\n-      && (svars = get_subvars_for_var (var)))\n+  if (var_can_have_subvars (ref)\n+      && (svars = get_subvars_for_var (ref)))\n     {\n-      subvar_t sv;\n-      VEC (tree, heap) *overlaps = NULL;\n-      unsigned int len;\n-\n       for (sv = svars; sv; sv = sv->next)\n \t{\n           bool exact;\n \n           if (overlap_subvar (offset, maxsize, sv->var, &exact))\n             VEC_safe_push (tree, heap, overlaps, sv->var);\n         }\n-      len = VEC_length (tree, overlaps);\n+      gcc_assert (overlaps != NULL);\n+    }\n+  else if (var_can_have_subvars (var)\n+\t   && (svars = get_subvars_for_var (var)))\n+    {\n+      /* If the REF is not a direct access to VAR (e.g., it is a dereference\n+\t of a pointer), we should scan the virtual operands of REF the same\n+\t way as tree-ssa-operands do.  At the moment, this is somewhat\n+\t difficult, so we just give up and add all the subvars of VAR.\n+\t On mem-ssa branch, the scanning for virtual operands have been\n+\t split from the rest of tree-ssa-operands, so it should be much\n+\t easier to fix this problem correctly once mem-ssa is merged.  */\n+      for (sv = svars; sv; sv = sv->next)\n+\tVEC_safe_push (tree, heap, overlaps, sv->var);\n+\n+      gcc_assert (overlaps != NULL);\n+    }\n+  else\n+    ali = add_may_alias_for_new_tag (tag, var);\n+\n+  len = VEC_length (tree, overlaps);\n+  if (len > 0)\n+    {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n-        fprintf (dump_file, \"\\nnumber of overlapping subvars = %u\\n\", len);\n-      gcc_assert (len);\n+\tfprintf (dump_file, \"\\nnumber of overlapping subvars = %u\\n\", len);\n \n       if (len == 1)\n-        ali = add_may_alias_for_new_tag (tag, VEC_index (tree, overlaps, 0));\n+\tali = add_may_alias_for_new_tag (tag, VEC_index (tree, overlaps, 0));\n       else if (len > 1)\n-        {\n+\t{\n \t  unsigned int k;\n \t  tree sv_var;\n \n@@ -2807,9 +2827,8 @@ new_type_alias (tree ptr, tree var, tree expr)\n \t\t}\n \t    }\n \t}\n+      VEC_free (tree, heap, overlaps);\n     }\n-  else\n-    ali = add_may_alias_for_new_tag (tag, var);\n \n   p_ann->symbol_mem_tag = ali;\n   TREE_READONLY (tag) = TREE_READONLY (var);"}]}