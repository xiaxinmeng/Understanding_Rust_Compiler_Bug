{"sha": "4b414c93f0d6e1e70bff5eaca0fb8f066f793883", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI0MTRjOTNmMGQ2ZTFlNzBiZmY1ZWFjYTBmYjhmMDY2Zjc5Mzg4Mw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2010-04-28T08:34:01Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2010-04-28T08:34:01Z"}, "message": "re PR c++/9335 (repeated diagnostic when maximum template depth is exceeded)\n\n2010-04-28  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c++/9335\ncp/\n        * error.c (print_instantiation_partial_context_line): Handle\n\trecursive instantiation.\n        (print_instantiation_partial_context): Likewise.\n\ntestsuite/\n        * g++.dg/template/recurse2.C: Update\n        * g++.dg/template/recurse.C: Update.\n        * g++.dg/template/pr23510.C: Update.\n        * lib/prune.exp: Filter out 'recursively instantiated'.\n\nFrom-SVN: r158823", "tree": {"sha": "8d11fc6717643399c2039596ee4aaf922b4469c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d11fc6717643399c2039596ee4aaf922b4469c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b414c93f0d6e1e70bff5eaca0fb8f066f793883", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b414c93f0d6e1e70bff5eaca0fb8f066f793883", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b414c93f0d6e1e70bff5eaca0fb8f066f793883", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b414c93f0d6e1e70bff5eaca0fb8f066f793883/comments", "author": null, "committer": null, "parents": [{"sha": "012e6a1e049a8b2706203876ee1418140842fcb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/012e6a1e049a8b2706203876ee1418140842fcb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/012e6a1e049a8b2706203876ee1418140842fcb3"}], "stats": {"total": 112, "additions": 78, "deletions": 34}, "files": [{"sha": "03bf79b820a4e463c7cc2d9b566bf6ad6c2e161f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b414c93f0d6e1e70bff5eaca0fb8f066f793883/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b414c93f0d6e1e70bff5eaca0fb8f066f793883/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4b414c93f0d6e1e70bff5eaca0fb8f066f793883", "patch": "@@ -1,3 +1,10 @@\n+2010-04-28  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c++/9335\n+        * error.c (print_instantiation_partial_context_line): Handle\n+\trecursive instantiation.\n+        (print_instantiation_partial_context): Likewise.\n+\n 2010-04-27  Jason Merrill  <jason@redhat.com>\n \n \t* init.c (perform_member_init): Check CLASS_TYPE_P."}, {"sha": "4ac70f74b69a80d00957da0d9551e21a4e51daf1", "filename": "gcc/cp/error.c", "status": "modified", "additions": 59, "deletions": 30, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b414c93f0d6e1e70bff5eaca0fb8f066f793883/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b414c93f0d6e1e70bff5eaca0fb8f066f793883/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=4b414c93f0d6e1e70bff5eaca0fb8f066f793883", "patch": "@@ -2733,31 +2733,45 @@ print_instantiation_full_context (diagnostic_context *context)\n \n static void\n print_instantiation_partial_context_line (diagnostic_context *context,\n-\t\t\t\t\t  const struct tinst_level *t, location_t loc)\n+\t\t\t\t\t  const struct tinst_level *t,\n+\t\t\t\t\t  location_t loc, bool recursive_p)\n {\n   expanded_location xloc;\n   xloc = expand_location (loc);\n \n-  if (t != NULL) {\n-    const char *str;\n-    str = decl_as_string_translate (t->decl,\n-\t\t\t\t    TFF_DECL_SPECIFIERS | TFF_RETURN_TYPE);\n-    if (flag_show_column)\n-      pp_verbatim (context->printer,\n-\t\t   _(\"%s:%d:%d:   instantiated from %qs\\n\"),\n-\t\t   xloc.file, xloc.line, xloc.column, str);\n-    else\n-      pp_verbatim (context->printer,\n-\t\t   _(\"%s:%d:   instantiated from %qs\\n\"),\n-\t\t   xloc.file, xloc.line, str);\n-  } else {\n-    if (flag_show_column)\n-      pp_verbatim (context->printer, _(\"%s:%d:%d:   instantiated from here\"),\n-\t\t   xloc.file, xloc.line, xloc.column);\n-    else\n-      pp_verbatim (context->printer, _(\"%s:%d:   instantiated from here\"),\n-\t\t   xloc.file, xloc.line);\n-  }\n+  if (t != NULL) \n+    {\n+      const char *str;\n+      str = decl_as_string_translate (t->decl,\n+\t\t\t\t      TFF_DECL_SPECIFIERS | TFF_RETURN_TYPE);\n+      if (flag_show_column)\n+\tpp_verbatim (context->printer,\n+\t\t     recursive_p\n+\t\t     ? _(\"%s:%d:%d:   recursively instantiated from %qs\\n\")\n+\t\t     : _(\"%s:%d:%d:   instantiated from %qs\\n\"),\n+\t\t     xloc.file, xloc.line, xloc.column, str);\n+      else\n+\tpp_verbatim (context->printer,\n+\t\t     recursive_p\n+\t\t     ? _(\"%s:%d:   recursively instantiated from %qs\\n\")\n+\t\t     : _(\"%s:%d:   recursively instantiated from %qs\\n\"),\n+\t\t     xloc.file, xloc.line, str);\n+    }\n+  else\n+    {\n+      if (flag_show_column)\n+\tpp_verbatim (context->printer, \n+\t\t     recursive_p\n+\t\t     ? _(\"%s:%d:%d:   recursively instantiated from here\")\n+\t\t     : _(\"%s:%d:%d:   instantiated from here\"),\n+\t\t     xloc.file, xloc.line, xloc.column);\n+      else\n+\tpp_verbatim (context->printer,\n+\t\t     recursive_p\n+\t\t     ? _(\"%s:%d:   recursively instantiated from here\")\n+\t\t     : _(\"%s:%d:   instantiated from here\"),\n+\t\t     xloc.file, xloc.line);\n+    }\n }\n \n /* Same as print_instantiation_full_context but less verbose.  */\n@@ -2769,9 +2783,14 @@ print_instantiation_partial_context (diagnostic_context *context,\n   struct tinst_level *t;\n   int n_total = 0;\n   int n;\n+  location_t prev_loc = loc;\n \n   for (t = t0; t != NULL; t = t->next)\n-    n_total++;\n+    if (prev_loc != t->locus)\n+      {\n+\tprev_loc = t->locus;\n+\tn_total++;\n+      }\n \n   t = t0;\n \n@@ -2781,11 +2800,13 @@ print_instantiation_partial_context (diagnostic_context *context,\n       for (n = 0; n < 5; n++)\n \t{\n \t  gcc_assert (t != NULL);\n-\t  print_instantiation_partial_context_line (context, t, loc);\n+\t  if (loc != t->locus)\n+\t    print_instantiation_partial_context_line (context, t, loc,\n+\t\t\t\t\t\t      /*recursive_p=*/false);\n \t  loc = t->locus;\n \t  t = t->next;\n \t}\n-      if (skip > 1) \n+      if (t != NULL && skip > 1)\n \t{\n \t  expanded_location xloc;\n \t  xloc = expand_location (loc);\n@@ -2799,18 +2820,26 @@ print_instantiation_partial_context (diagnostic_context *context,\n \t\t\t xloc.file, xloc.line, skip);\n \t  \n \t  do {\n-\t      loc = t->locus;\n-\t      t = t->next;\n-\t  } while (--skip > 0);\n+\t    loc = t->locus;\n+\t    t = t->next;\n+\t  } while (t != NULL && --skip > 0);\n \t}\n     }\n   \n-  for (; t != NULL; t = t->next)\n+  while (t != NULL)\n     {\n-      print_instantiation_partial_context_line (context, t, loc);\n+      while (t->next != NULL && t->locus == t->next->locus)\n+\t{\n+\t  loc = t->locus;\n+\t  t = t->next;\n+\t}\n+      print_instantiation_partial_context_line (context, t, loc,\n+\t\t\t\t\t\tt->locus == loc);\n       loc = t->locus;\n+      t = t->next;\n     }\n-  print_instantiation_partial_context_line (context, NULL, loc);\n+  print_instantiation_partial_context_line (context, NULL, loc,\n+\t\t\t\t\t    /*recursive_p=*/false);\n   pp_base_newline (context->printer);\n }\n "}, {"sha": "bb6b97ce7b26e0c9a8b42007b840b6c0f11419fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b414c93f0d6e1e70bff5eaca0fb8f066f793883/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b414c93f0d6e1e70bff5eaca0fb8f066f793883/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4b414c93f0d6e1e70bff5eaca0fb8f066f793883", "patch": "@@ -1,3 +1,11 @@\n+2010-04-28  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c++/9335\n+        * g++.dg/template/recurse2.C: Update\n+        * g++.dg/template/recurse.C: Update.\n+        * g++.dg/template/pr23510.C: Update.\n+        * lib/prune.exp: Filter out 'recursively instantiated'.\n+\n 2010-04-27  Fabien Ch\u00eane  <fabien.chene@gmail.com>\n \n \tPR c++/29043"}, {"sha": "b9e9889e9c0f5f442aaa2a2f9734e977d4e0478b", "filename": "gcc/testsuite/g++.dg/template/pr23510.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b414c93f0d6e1e70bff5eaca0fb8f066f793883/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr23510.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b414c93f0d6e1e70bff5eaca0fb8f066f793883/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr23510.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr23510.C?ref=4b414c93f0d6e1e70bff5eaca0fb8f066f793883", "patch": "@@ -4,7 +4,7 @@ template<unsigned int nFactor>\n struct Factorial\n {\n   enum { nValue = nFactor * Factorial<nFactor - 1>::nValue }; // { dg-error \"depth exceeds maximum\" } \n-  // { dg-message \"skipping 5 instantiation contexts\" \"\" { target *-*-* } 6 } \n+  // { dg-message \"recursively instantiated\" \"\" { target *-*-* } 6 } \n   // { dg-error \"incomplete type\" \"\" { target *-*-* } 6 } \n } \n "}, {"sha": "448c34721c21d2a7d6478228f50c94ba4da99f8c", "filename": "gcc/testsuite/g++.dg/template/recurse.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b414c93f0d6e1e70bff5eaca0fb8f066f793883/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b414c93f0d6e1e70bff5eaca0fb8f066f793883/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse.C?ref=4b414c93f0d6e1e70bff5eaca0fb8f066f793883", "patch": "@@ -8,8 +8,7 @@ template <int I> struct F\n       F<I+1> f;\t\t\t// { dg-error \"incomplete type\" \"incomplete\" }\n \t\t\t\t// { dg-bogus \"exceeds maximum.*exceeds maximum\" \"exceeds\" { xfail *-*-* } 8 }\n                                 // { dg-error \"exceeds maximum\" \"exceeds\" { xfail *-*-* } 8 }\n-      return f()*I;             // { dg-message \"instantiated\" \"recurse\" }\n-      // { dg-message \"skipping 40 instantiation contexts\" \"\" { target *-*-* } 11 }\n+      return f()*I;             // { dg-message \"recursively instantiated\" \"recurse\" }\n     }\n };\n "}, {"sha": "b9767dfb600dd9a019a2ff1a02e2ed76f0584035", "filename": "gcc/testsuite/g++.dg/template/recurse2.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b414c93f0d6e1e70bff5eaca0fb8f066f793883/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b414c93f0d6e1e70bff5eaca0fb8f066f793883/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse2.C?ref=4b414c93f0d6e1e70bff5eaca0fb8f066f793883", "patch": "@@ -3,5 +3,6 @@\n \n template <int N> struct X {\n     static const int value = X<N-1>::value; // { dg-error \"instantiation|incomplete\" }\n+  // { dg-message \"recursively instantiated\" \"\" { target *-*-* } 5 }\n };\n template struct X<1000>;"}, {"sha": "769169d4271b3cb63521d67cbd39f390f0b87b35", "filename": "gcc/testsuite/lib/prune.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b414c93f0d6e1e70bff5eaca0fb8f066f793883/gcc%2Ftestsuite%2Flib%2Fprune.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b414c93f0d6e1e70bff5eaca0fb8f066f793883/gcc%2Ftestsuite%2Flib%2Fprune.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprune.exp?ref=4b414c93f0d6e1e70bff5eaca0fb8f066f793883", "patch": "@@ -22,7 +22,7 @@ proc prune_gcc_output { text } {\n \n     regsub -all \"(^|\\n)(\\[^\\n\\]*: )?In ((static member |lambda )?function|member|method|(copy )?constructor|destructor|instantiation|program|subroutine|block-data)\\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)\\[^\\n\\]*(: )?At (top level|global scope):\\[^\\n\\]*\" $text \"\" text\n-    regsub -all \"(^|\\n)\\[^\\n\\]*:   instantiated from \\[^\\n\\]*\" $text \"\" text\n+    regsub -all \"(^|\\n)\\[^\\n\\]*:   (recursively )?instantiated from \\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)\\[^\\n\\]*:   . skipping \\[0-9\\]* instantiation contexts \\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)    inlined from \\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)collect2: ld returned \\[^\\n\\]*\" $text \"\" text"}]}