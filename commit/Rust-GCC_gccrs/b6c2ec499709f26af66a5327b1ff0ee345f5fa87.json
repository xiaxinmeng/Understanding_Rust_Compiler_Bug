{"sha": "b6c2ec499709f26af66a5327b1ff0ee345f5fa87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZjMmVjNDk5NzA5ZjI2YWY2NmE1MzI3YjFmZjBlZTM0NWY1ZmE4Nw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-04-29T16:38:22Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-19T08:17:18Z"}, "message": "[Ada] AI12-0366 Changes to Big_Integer and Big_Real\n\n2020-06-19  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/a-nbnbin.adb, libgnat/a-nbnbin.ads,\n\tlibgnat/a-nbnbin__gmp.adb, libgnat/a-nbnbre.adb,\n\tlibgnat/a-nbnbre.ads: Update spec according to AI12-0366.", "tree": {"sha": "a5f9ee62055e94570da7f897b37e14623be2caf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5f9ee62055e94570da7f897b37e14623be2caf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6c2ec499709f26af66a5327b1ff0ee345f5fa87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6c2ec499709f26af66a5327b1ff0ee345f5fa87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6c2ec499709f26af66a5327b1ff0ee345f5fa87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6c2ec499709f26af66a5327b1ff0ee345f5fa87/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "545ba471c1444c65549f2b4a1545c0de83b40a78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/545ba471c1444c65549f2b4a1545c0de83b40a78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/545ba471c1444c65549f2b4a1545c0de83b40a78"}], "stats": {"total": 321, "additions": 154, "deletions": 167}, "files": [{"sha": "9c8b7333cb8ab463d8cf616324ffbe59f8834014", "filename": "gcc/ada/libgnat/a-nbnbin.adb", "status": "modified", "additions": 25, "deletions": 30, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c2ec499709f26af66a5327b1ff0ee345f5fa87/gcc%2Fada%2Flibgnat%2Fa-nbnbin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c2ec499709f26af66a5327b1ff0ee345f5fa87/gcc%2Fada%2Flibgnat%2Fa-nbnbin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nbnbin.adb?ref=b6c2ec499709f26af66a5327b1ff0ee345f5fa87", "patch": "@@ -77,7 +77,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \"=\" --\n    ---------\n \n-   function \"=\" (L, R : Big_Integer) return Boolean is\n+   function \"=\" (L, R : Valid_Big_Integer) return Boolean is\n    begin\n       return Big_EQ (Get_Bignum (L), Get_Bignum (R));\n    end \"=\";\n@@ -86,7 +86,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \"<\" --\n    ---------\n \n-   function \"<\" (L, R : Big_Integer) return Boolean is\n+   function \"<\" (L, R : Valid_Big_Integer) return Boolean is\n    begin\n       return Big_LT (Get_Bignum (L), Get_Bignum (R));\n    end \"<\";\n@@ -95,7 +95,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \"<=\" --\n    ----------\n \n-   function \"<=\" (L, R : Big_Integer) return Boolean is\n+   function \"<=\" (L, R : Valid_Big_Integer) return Boolean is\n    begin\n       return Big_LE (Get_Bignum (L), Get_Bignum (R));\n    end \"<=\";\n@@ -104,7 +104,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \">\" --\n    ---------\n \n-   function \">\" (L, R : Big_Integer) return Boolean is\n+   function \">\" (L, R : Valid_Big_Integer) return Boolean is\n    begin\n       return Big_GT (Get_Bignum (L), Get_Bignum (R));\n    end \">\";\n@@ -113,7 +113,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \">=\" --\n    ----------\n \n-   function \">=\" (L, R : Big_Integer) return Boolean is\n+   function \">=\" (L, R : Valid_Big_Integer) return Boolean is\n    begin\n       return Big_GE (Get_Bignum (L), Get_Bignum (R));\n    end \">=\";\n@@ -122,7 +122,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- To_Big_Integer --\n    --------------------\n \n-   function To_Big_Integer (Arg : Integer) return Big_Integer is\n+   function To_Big_Integer (Arg : Integer) return Valid_Big_Integer is\n       Result : Big_Integer;\n    begin\n       Set_Bignum (Result, To_Bignum (Long_Long_Integer (Arg)));\n@@ -148,7 +148,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n       -- To_Big_Integer --\n       --------------------\n \n-      function To_Big_Integer (Arg : Int) return Big_Integer is\n+      function To_Big_Integer (Arg : Int) return Valid_Big_Integer is\n          Result : Big_Integer;\n       begin\n          Set_Bignum (Result, To_Bignum (Long_Long_Integer (Arg)));\n@@ -176,7 +176,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n       -- To_Big_Integer --\n       --------------------\n \n-      function To_Big_Integer (Arg : Int) return Big_Integer is\n+      function To_Big_Integer (Arg : Int) return Valid_Big_Integer is\n          Result : Big_Integer;\n       begin\n          Set_Bignum (Result, To_Bignum (Unsigned_64 (Arg)));\n@@ -201,7 +201,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    Hex_Chars : constant array (0 .. 15) of Character := \"0123456789ABCDEF\";\n \n    function To_String\n-     (Arg : Big_Integer; Width : Field := 0; Base : Number_Base := 10)\n+     (Arg : Valid_Big_Integer; Width : Field := 0; Base : Number_Base := 10)\n       return String\n    is\n       Big_Base : constant Big_Integer := To_Big_Integer (Integer (Base));\n@@ -304,7 +304,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \"+\" --\n    ---------\n \n-   function \"+\" (L : Big_Integer) return Big_Integer is\n+   function \"+\" (L : Valid_Big_Integer) return Valid_Big_Integer is\n       Result : Big_Integer;\n    begin\n       Set_Bignum (Result, new Bignum_Data'(Get_Bignum (L).all));\n@@ -315,7 +315,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \"-\" --\n    ---------\n \n-   function \"-\" (L : Big_Integer) return Big_Integer is\n+   function \"-\" (L : Valid_Big_Integer) return Valid_Big_Integer is\n       Result : Big_Integer;\n    begin\n       Set_Bignum (Result, Big_Neg (Get_Bignum (L)));\n@@ -326,7 +326,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \"abs\" --\n    -----------\n \n-   function \"abs\" (L : Big_Integer) return Big_Integer is\n+   function \"abs\" (L : Valid_Big_Integer) return Valid_Big_Integer is\n       Result : Big_Integer;\n    begin\n       Set_Bignum (Result, Big_Abs (Get_Bignum (L)));\n@@ -337,7 +337,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \"+\" --\n    ---------\n \n-   function \"+\" (L, R : Big_Integer) return Big_Integer is\n+   function \"+\" (L, R : Valid_Big_Integer) return Valid_Big_Integer is\n       Result : Big_Integer;\n    begin\n       Set_Bignum (Result, Big_Add (Get_Bignum (L), Get_Bignum (R)));\n@@ -348,7 +348,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \"-\" --\n    ---------\n \n-   function \"-\" (L, R : Big_Integer) return Big_Integer is\n+   function \"-\" (L, R : Valid_Big_Integer) return Valid_Big_Integer is\n       Result : Big_Integer;\n    begin\n       Set_Bignum (Result, Big_Sub (Get_Bignum (L), Get_Bignum (R)));\n@@ -359,7 +359,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \"*\" --\n    ---------\n \n-   function \"*\" (L, R : Big_Integer) return Big_Integer is\n+   function \"*\" (L, R : Valid_Big_Integer) return Valid_Big_Integer is\n       Result : Big_Integer;\n    begin\n       Set_Bignum (Result, Big_Mul (Get_Bignum (L), Get_Bignum (R)));\n@@ -370,7 +370,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \"/\" --\n    ---------\n \n-   function \"/\" (L, R : Big_Integer) return Big_Integer is\n+   function \"/\" (L, R : Valid_Big_Integer) return Valid_Big_Integer is\n       Result : Big_Integer;\n    begin\n       Set_Bignum (Result, Big_Div (Get_Bignum (L), Get_Bignum (R)));\n@@ -381,7 +381,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \"mod\" --\n    -----------\n \n-   function \"mod\" (L, R : Big_Integer) return Big_Integer is\n+   function \"mod\" (L, R : Valid_Big_Integer) return Valid_Big_Integer is\n       Result : Big_Integer;\n    begin\n       Set_Bignum (Result, Big_Mod (Get_Bignum (L), Get_Bignum (R)));\n@@ -392,7 +392,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \"rem\" --\n    -----------\n \n-   function \"rem\" (L, R : Big_Integer) return Big_Integer is\n+   function \"rem\" (L, R : Valid_Big_Integer) return Valid_Big_Integer is\n       Result : Big_Integer;\n    begin\n       Set_Bignum (Result, Big_Rem (Get_Bignum (L), Get_Bignum (R)));\n@@ -403,16 +403,9 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \"**\" --\n    ----------\n \n-   function \"**\" (L : Big_Integer; R : Natural) return Big_Integer is\n+   function \"**\"\n+     (L : Valid_Big_Integer; R : Natural) return Valid_Big_Integer is\n    begin\n-      --  Explicitly check for validity before allocating Exp so that\n-      --  the call to Get_Bignum below cannot raise an exception before\n-      --  we get a chance to free Exp.\n-\n-      if not Is_Valid (L) then\n-         raise Constraint_Error with \"invalid big integer\";\n-      end if;\n-\n       declare\n          Exp    : Bignum := To_Bignum (Long_Long_Integer (R));\n          Result : Big_Integer;\n@@ -427,21 +420,23 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- Min --\n    ---------\n \n-   function Min (L, R : Big_Integer) return Big_Integer is\n+   function Min (L, R : Valid_Big_Integer) return Valid_Big_Integer is\n      (if L < R then L else R);\n \n    ---------\n    -- Max --\n    ---------\n \n-   function Max (L, R : Big_Integer) return Big_Integer is\n+   function Max (L, R : Valid_Big_Integer) return Valid_Big_Integer is\n      (if L > R then L else R);\n \n    -----------------------------\n    -- Greatest_Common_Divisor --\n    -----------------------------\n \n-   function Greatest_Common_Divisor (L, R : Big_Integer) return Big_Positive is\n+   function Greatest_Common_Divisor\n+     (L, R : Valid_Big_Integer) return Big_Positive\n+   is\n       function GCD (A, B : Big_Integer) return Big_Integer;\n       --  Recursive internal version\n "}, {"sha": "98619aa88cc78317b23064f905fbc43649a5c017", "filename": "gcc/ada/libgnat/a-nbnbin.ads", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c2ec499709f26af66a5327b1ff0ee345f5fa87/gcc%2Fada%2Flibgnat%2Fa-nbnbin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c2ec499709f26af66a5327b1ff0ee345f5fa87/gcc%2Fada%2Flibgnat%2Fa-nbnbin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nbnbin.ads?ref=b6c2ec499709f26af66a5327b1ff0ee345f5fa87", "patch": "@@ -23,24 +23,28 @@ private with System;\n package Ada.Numerics.Big_Numbers.Big_Integers\n   with Preelaborate\n is\n-   type Big_Integer is private with\n-     Integer_Literal => From_String,\n-     Put_Image       => Put_Image;\n+   type Big_Integer is private\n+     with Integer_Literal => From_String,\n+          Put_Image       => Put_Image;\n \n    function Is_Valid (Arg : Big_Integer) return Boolean\n      with Convention => Intrinsic;\n \n-   function \"=\" (L, R : Big_Integer) return Boolean;\n+   subtype Valid_Big_Integer is Big_Integer\n+     with Dynamic_Predicate => Is_Valid (Valid_Big_Integer),\n+          Predicate_Failure => raise Program_Error;\n \n-   function \"<\" (L, R : Big_Integer) return Boolean;\n+   function \"=\" (L, R : Valid_Big_Integer) return Boolean;\n \n-   function \"<=\" (L, R : Big_Integer) return Boolean;\n+   function \"<\" (L, R : Valid_Big_Integer) return Boolean;\n \n-   function \">\" (L, R : Big_Integer) return Boolean;\n+   function \"<=\" (L, R : Valid_Big_Integer) return Boolean;\n \n-   function \">=\" (L, R : Big_Integer) return Boolean;\n+   function \">\" (L, R : Valid_Big_Integer) return Boolean;\n \n-   function To_Big_Integer (Arg : Integer) return Big_Integer;\n+   function \">=\" (L, R : Valid_Big_Integer) return Boolean;\n+\n+   function To_Big_Integer (Arg : Integer) return Valid_Big_Integer;\n \n    subtype Big_Positive is Big_Integer\n      with Dynamic_Predicate =>\n@@ -67,7 +71,7 @@ is\n       type Int is range <>;\n    package Signed_Conversions is\n \n-      function To_Big_Integer (Arg : Int) return Big_Integer;\n+      function To_Big_Integer (Arg : Int) return Valid_Big_Integer;\n \n       function From_Big_Integer (Arg : Big_Integer) return Int\n         with Pre => In_Range (Arg,\n@@ -81,7 +85,7 @@ is\n       type Int is mod <>;\n    package Unsigned_Conversions is\n \n-      function To_Big_Integer (Arg : Int) return Big_Integer;\n+      function To_Big_Integer (Arg : Int) return Valid_Big_Integer;\n \n       function From_Big_Integer (Arg : Big_Integer) return Int\n         with Pre => In_Range (Arg,\n@@ -91,7 +95,7 @@ is\n \n    end Unsigned_Conversions;\n \n-   function To_String (Arg   : Big_Integer;\n+   function To_String (Arg   : Valid_Big_Integer;\n                        Width : Field := 0;\n                        Base  : Number_Base := 10) return String\n      with Post => To_String'Result'First = 1;\n@@ -100,32 +104,32 @@ is\n \n    procedure Put_Image (S : in out Sink'Class; V : Big_Integer);\n \n-   function \"+\" (L : Big_Integer) return Big_Integer;\n+   function \"+\" (L : Valid_Big_Integer) return Valid_Big_Integer;\n \n-   function \"-\" (L : Big_Integer) return Big_Integer;\n+   function \"-\" (L : Valid_Big_Integer) return Valid_Big_Integer;\n \n-   function \"abs\" (L : Big_Integer) return Big_Integer;\n+   function \"abs\" (L : Valid_Big_Integer) return Valid_Big_Integer;\n \n-   function \"+\" (L, R : Big_Integer) return Big_Integer;\n+   function \"+\" (L, R : Valid_Big_Integer) return Valid_Big_Integer;\n \n-   function \"-\" (L, R : Big_Integer) return Big_Integer;\n+   function \"-\" (L, R : Valid_Big_Integer) return Valid_Big_Integer;\n \n-   function \"*\" (L, R : Big_Integer) return Big_Integer;\n+   function \"*\" (L, R : Valid_Big_Integer) return Valid_Big_Integer;\n \n-   function \"/\" (L, R : Big_Integer) return Big_Integer;\n+   function \"/\" (L, R : Valid_Big_Integer) return Valid_Big_Integer;\n \n-   function \"mod\" (L, R : Big_Integer) return Big_Integer;\n+   function \"mod\" (L, R : Valid_Big_Integer) return Valid_Big_Integer;\n \n-   function \"rem\" (L, R : Big_Integer) return Big_Integer;\n+   function \"rem\" (L, R : Valid_Big_Integer) return Valid_Big_Integer;\n \n-   function \"**\" (L : Big_Integer; R : Natural) return Big_Integer;\n+   function \"**\" (L : Valid_Big_Integer; R : Natural) return Valid_Big_Integer;\n \n-   function Min (L, R : Big_Integer) return Big_Integer;\n+   function Min (L, R : Valid_Big_Integer) return Valid_Big_Integer;\n \n-   function Max (L, R : Big_Integer) return Big_Integer;\n+   function Max (L, R : Valid_Big_Integer) return Valid_Big_Integer;\n \n    function Greatest_Common_Divisor\n-     (L, R : Big_Integer) return Big_Positive\n+     (L, R : Valid_Big_Integer) return Big_Positive\n      with Pre => (L /= To_Big_Integer (0) and R /= To_Big_Integer (0))\n        or else (raise Constraint_Error);\n "}, {"sha": "025272f90adaabd82e7ecde9d8341417035ca8a2", "filename": "gcc/ada/libgnat/a-nbnbin__gmp.adb", "status": "modified", "additions": 30, "deletions": 26, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c2ec499709f26af66a5327b1ff0ee345f5fa87/gcc%2Fada%2Flibgnat%2Fa-nbnbin__gmp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c2ec499709f26af66a5327b1ff0ee345f5fa87/gcc%2Fada%2Flibgnat%2Fa-nbnbin__gmp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nbnbin__gmp.adb?ref=b6c2ec499709f26af66a5327b1ff0ee345f5fa87", "patch": "@@ -120,7 +120,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \"=\" --\n    ---------\n \n-   function \"=\" (L, R : Big_Integer) return Boolean is\n+   function \"=\" (L, R : Valid_Big_Integer) return Boolean is\n    begin\n       return mpz_cmp (Get_Mpz (L), Get_Mpz (R)) = 0;\n    end \"=\";\n@@ -129,7 +129,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \"<\" --\n    ---------\n \n-   function \"<\" (L, R : Big_Integer) return Boolean is\n+   function \"<\" (L, R : Valid_Big_Integer) return Boolean is\n    begin\n       return mpz_cmp (Get_Mpz (L), Get_Mpz (R)) < 0;\n    end \"<\";\n@@ -138,7 +138,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \"<=\" --\n    ----------\n \n-   function \"<=\" (L, R : Big_Integer) return Boolean is\n+   function \"<=\" (L, R : Valid_Big_Integer) return Boolean is\n    begin\n       return mpz_cmp (Get_Mpz (L), Get_Mpz (R)) <= 0;\n    end \"<=\";\n@@ -147,7 +147,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \">\" --\n    ---------\n \n-   function \">\" (L, R : Big_Integer) return Boolean is\n+   function \">\" (L, R : Valid_Big_Integer) return Boolean is\n    begin\n       return mpz_cmp (Get_Mpz (L), Get_Mpz (R)) > 0;\n    end \">\";\n@@ -156,7 +156,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \">=\" --\n    ----------\n \n-   function \">=\" (L, R : Big_Integer) return Boolean is\n+   function \">=\" (L, R : Valid_Big_Integer) return Boolean is\n    begin\n       return mpz_cmp (Get_Mpz (L), Get_Mpz (R)) >= 0;\n    end \">=\";\n@@ -165,7 +165,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- To_Big_Integer --\n    --------------------\n \n-   function To_Big_Integer (Arg : Integer) return Big_Integer is\n+   function To_Big_Integer (Arg : Integer) return Valid_Big_Integer is\n       Result : Big_Integer;\n    begin\n       Allocate (Result);\n@@ -177,7 +177,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- To_Integer --\n    ----------------\n \n-   function To_Integer (Arg : Big_Integer) return Integer is\n+   function To_Integer (Arg : Valid_Big_Integer) return Integer is\n    begin\n       return Integer (mpz_get_si (Get_Mpz (Arg)));\n    end To_Integer;\n@@ -192,7 +192,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n       -- To_Big_Integer --\n       --------------------\n \n-      function To_Big_Integer (Arg : Int) return Big_Integer is\n+      function To_Big_Integer (Arg : Int) return Valid_Big_Integer is\n          Result : Big_Integer;\n       begin\n          Allocate (Result);\n@@ -204,7 +204,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n       -- From_Big_Integer --\n       ----------------------\n \n-      function From_Big_Integer (Arg : Big_Integer) return Int is\n+      function From_Big_Integer (Arg : Valid_Big_Integer) return Int is\n       begin\n          return Int (mpz_get_si (Get_Mpz (Arg)));\n       end From_Big_Integer;\n@@ -221,7 +221,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n       -- To_Big_Integer --\n       --------------------\n \n-      function To_Big_Integer (Arg : Int) return Big_Integer is\n+      function To_Big_Integer (Arg : Int) return Valid_Big_Integer is\n          Result : Big_Integer;\n       begin\n          Allocate (Result);\n@@ -233,7 +233,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n       -- From_Big_Integer --\n       ----------------------\n \n-      function From_Big_Integer (Arg : Big_Integer) return Int is\n+      function From_Big_Integer (Arg : Valid_Big_Integer) return Int is\n       begin\n          return Int (mpz_get_ui (Get_Mpz (Arg)));\n       end From_Big_Integer;\n@@ -245,7 +245,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    ---------------\n \n    function To_String\n-     (Arg : Big_Integer; Width : Field := 0; Base : Number_Base := 10)\n+     (Arg : Valid_Big_Integer; Width : Field := 0; Base : Number_Base := 10)\n       return String\n    is\n       function mpz_get_str\n@@ -330,7 +330,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- From_String --\n    -----------------\n \n-   function From_String (Arg : String) return Big_Integer is\n+   function From_String (Arg : String) return Valid_Big_Integer is\n       function mpz_set_str\n         (this : access mpz_t;\n          str  : System.Address;\n@@ -417,7 +417,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \"+\" --\n    ---------\n \n-   function \"+\" (L : Big_Integer) return Big_Integer is\n+   function \"+\" (L : Valid_Big_Integer) return Valid_Big_Integer is\n       Result : Big_Integer;\n    begin\n       Set_Mpz (Result, new mpz_t);\n@@ -429,7 +429,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \"-\" --\n    ---------\n \n-   function \"-\" (L : Big_Integer) return Big_Integer is\n+   function \"-\" (L : Valid_Big_Integer) return Valid_Big_Integer is\n       Result : Big_Integer;\n    begin\n       Allocate (Result);\n@@ -441,7 +441,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \"abs\" --\n    -----------\n \n-   function \"abs\" (L : Big_Integer) return Big_Integer is\n+   function \"abs\" (L : Valid_Big_Integer) return Valid_Big_Integer is\n       procedure mpz_abs (ROP : access mpz_t;  OP : access constant mpz_t);\n       pragma Import (C, mpz_abs, \"__gmpz_abs\");\n \n@@ -456,7 +456,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \"+\" --\n    ---------\n \n-   function \"+\" (L, R : Big_Integer) return Big_Integer is\n+   function \"+\" (L, R : Valid_Big_Integer) return Valid_Big_Integer is\n       procedure mpz_add\n         (ROP : access mpz_t;  OP1, OP2 : access constant mpz_t);\n       pragma Import (C, mpz_add, \"__gmpz_add\");\n@@ -473,7 +473,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \"-\" --\n    ---------\n \n-   function \"-\" (L, R : Big_Integer) return Big_Integer is\n+   function \"-\" (L, R : Valid_Big_Integer) return Valid_Big_Integer is\n       Result : Big_Integer;\n    begin\n       Allocate (Result);\n@@ -485,7 +485,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \"*\" --\n    ---------\n \n-   function \"*\" (L, R : Big_Integer) return Big_Integer is\n+   function \"*\" (L, R : Valid_Big_Integer) return Valid_Big_Integer is\n       procedure mpz_mul\n         (ROP : access mpz_t;  OP1, OP2 : access constant mpz_t);\n       pragma Import (C, mpz_mul, \"__gmpz_mul\");\n@@ -502,7 +502,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \"/\" --\n    ---------\n \n-   function \"/\" (L, R : Big_Integer) return Big_Integer is\n+   function \"/\" (L, R : Valid_Big_Integer) return Valid_Big_Integer is\n       procedure mpz_tdiv_q (Q : access mpz_t;  N, D : access constant mpz_t);\n       pragma Import (C, mpz_tdiv_q, \"__gmpz_tdiv_q\");\n    begin\n@@ -523,7 +523,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \"mod\" --\n    -----------\n \n-   function \"mod\" (L, R : Big_Integer) return Big_Integer is\n+   function \"mod\" (L, R : Valid_Big_Integer) return Valid_Big_Integer is\n       procedure mpz_mod (R : access mpz_t;  N, D : access constant mpz_t);\n       pragma Import (C, mpz_mod, \"__gmpz_mod\");\n       --  result is always non-negative\n@@ -605,7 +605,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \"rem\" --\n    -----------\n \n-   function \"rem\" (L, R : Big_Integer) return Big_Integer is\n+   function \"rem\" (L, R : Valid_Big_Integer) return Valid_Big_Integer is\n       procedure mpz_tdiv_r (R : access mpz_t;  N, D : access constant mpz_t);\n       pragma Import (C, mpz_tdiv_r, \"__gmpz_tdiv_r\");\n       --   R will have the same sign as N.\n@@ -632,7 +632,9 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- \"**\" --\n    ----------\n \n-   function \"**\" (L : Big_Integer; R : Natural) return Big_Integer is\n+   function \"**\"\n+     (L : Valid_Big_Integer; R : Natural) return Valid_Big_Integer\n+   is\n       procedure mpz_pow_ui (ROP : access mpz_t;\n                             BASE : access constant mpz_t;\n                             EXP : unsigned_long);\n@@ -650,21 +652,23 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- Min --\n    ---------\n \n-   function Min (L, R : Big_Integer) return Big_Integer is\n+   function Min (L, R : Valid_Big_Integer) return Valid_Big_Integer is\n      (if L < R then L else R);\n \n    ---------\n    -- Max --\n    ---------\n \n-   function Max (L, R : Big_Integer) return Big_Integer is\n+   function Max (L, R : Valid_Big_Integer) return Valid_Big_Integer is\n      (if L > R then L else R);\n \n    -----------------------------\n    -- Greatest_Common_Divisor --\n    -----------------------------\n \n-   function Greatest_Common_Divisor (L, R : Big_Integer) return Big_Positive is\n+   function Greatest_Common_Divisor\n+     (L, R : Valid_Big_Integer) return Big_Positive\n+   is\n       procedure mpz_gcd\n         (ROP : access mpz_t;  Op1, Op2 : access constant mpz_t);\n       pragma Import (C, mpz_gcd, \"__gmpz_gcd\");"}, {"sha": "1f075df25dd25b5f64c2067d292c9e0ac6d85a94", "filename": "gcc/ada/libgnat/a-nbnbre.adb", "status": "modified", "additions": 31, "deletions": 55, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c2ec499709f26af66a5327b1ff0ee345f5fa87/gcc%2Fada%2Flibgnat%2Fa-nbnbre.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c2ec499709f26af66a5327b1ff0ee345f5fa87/gcc%2Fada%2Flibgnat%2Fa-nbnbre.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nbnbre.adb?ref=b6c2ec499709f26af66a5327b1ff0ee345f5fa87", "patch": "@@ -54,7 +54,7 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    -- \"/\" --\n    ---------\n \n-   function \"/\" (Num, Den : Big_Integer) return Big_Real is\n+   function \"/\" (Num, Den : Valid_Big_Integer) return Valid_Big_Real is\n       Result : Big_Real;\n    begin\n       if Den = To_Big_Integer (0) then\n@@ -71,49 +71,47 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    -- Numerator --\n    ---------------\n \n-   function Numerator (Arg : Big_Real) return Big_Integer is\n-     (if Is_Valid (Arg.Num) then Arg.Num\n-      else raise Constraint_Error with \"invalid big real\");\n+   function Numerator (Arg : Valid_Big_Real) return Valid_Big_Integer is\n+     (Arg.Num);\n \n    -----------------\n    -- Denominator --\n    -----------------\n \n-   function Denominator (Arg : Big_Real) return Big_Positive is\n-     (if Is_Valid (Arg.Den) then Arg.Den\n-      else raise Constraint_Error with \"invalid big real\");\n+   function Denominator (Arg : Valid_Big_Real) return Big_Positive is\n+     (Arg.Den);\n \n    ---------\n    -- \"=\" --\n    ---------\n \n-   function \"=\" (L, R : Big_Real) return Boolean is\n+   function \"=\" (L, R : Valid_Big_Real) return Boolean is\n      (abs L.Num = abs R.Num and then L.Den = R.Den);\n \n    ---------\n    -- \"<\" --\n    ---------\n \n-   function \"<\" (L, R : Big_Real) return Boolean is\n+   function \"<\" (L, R : Valid_Big_Real) return Boolean is\n      (abs L.Num * R.Den < abs R.Num * L.Den);\n \n    ----------\n    -- \"<=\" --\n    ----------\n \n-   function \"<=\" (L, R : Big_Real) return Boolean is (not (R < L));\n+   function \"<=\" (L, R : Valid_Big_Real) return Boolean is (not (R < L));\n \n    ---------\n    -- \">\" --\n    ---------\n \n-   function \">\" (L, R : Big_Real) return Boolean is (R < L);\n+   function \">\" (L, R : Valid_Big_Real) return Boolean is (R < L);\n \n    ----------\n    -- \">=\" --\n    ----------\n \n-   function \">=\" (L, R : Big_Real) return Boolean is (not (L < R));\n+   function \">=\" (L, R : Valid_Big_Real) return Boolean is (not (L < R));\n \n    -----------------------\n    -- Float_Conversions --\n@@ -125,7 +123,7 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n       -- To_Big_Real --\n       -----------------\n \n-      function To_Big_Real (Arg : Num) return Big_Real is\n+      function To_Big_Real (Arg : Num) return Valid_Big_Real is\n       begin\n          return From_String (Arg'Image);\n       end To_Big_Real;\n@@ -151,7 +149,7 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n       -- To_Big_Real --\n       -----------------\n \n-      function To_Big_Real (Arg : Num) return Big_Real is\n+      function To_Big_Real (Arg : Num) return Valid_Big_Real is\n       begin\n          return From_String (Arg'Image);\n       end To_Big_Real;\n@@ -172,8 +170,10 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    ---------------\n \n    function To_String\n-     (Arg : Big_Real; Fore : Field := 2; Aft : Field := 3; Exp : Field := 0)\n-      return String\n+     (Arg  : Valid_Big_Real;\n+      Fore : Field := 2;\n+      Aft  : Field := 3;\n+      Exp  : Field := 0) return String\n    is\n       Zero : constant Big_Integer := To_Big_Integer (0);\n       Ten  : constant Big_Integer := To_Big_Integer (10);\n@@ -379,7 +379,7 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    -- From_Quotient_String --\n    --------------------------\n \n-   function From_Quotient_String (Arg : String) return Big_Real is\n+   function From_Quotient_String (Arg : String) return Valid_Big_Real is\n       Index : Natural := 0;\n    begin\n       for J in Arg'First + 1 .. Arg'Last - 1 loop\n@@ -413,13 +413,9 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    -- \"+\" --\n    ---------\n \n-   function \"+\" (L : Big_Real) return Big_Real is\n+   function \"+\" (L : Valid_Big_Real) return Valid_Big_Real is\n       Result : Big_Real;\n    begin\n-      if not Is_Valid (L) then\n-         raise Constraint_Error with \"invalid big real\";\n-      end if;\n-\n       Result.Num := L.Num;\n       Result.Den := L.Den;\n       return Result;\n@@ -429,29 +425,23 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    -- \"-\" --\n    ---------\n \n-   function \"-\" (L : Big_Real) return Big_Real is\n-     (if Is_Valid (L) then (Num => -L.Num, Den => L.Den)\n-      else raise Constraint_Error with \"invalid big real\");\n+   function \"-\" (L : Valid_Big_Real) return Valid_Big_Real is\n+     (Num => -L.Num, Den => L.Den);\n \n    -----------\n    -- \"abs\" --\n    -----------\n \n-   function \"abs\" (L : Big_Real) return Big_Real is\n-     (if Is_Valid (L) then (Num => abs L.Num, Den => L.Den)\n-      else raise Constraint_Error with \"invalid big real\");\n+   function \"abs\" (L : Valid_Big_Real) return Valid_Big_Real is\n+     (Num => abs L.Num, Den => L.Den);\n \n    ---------\n    -- \"+\" --\n    ---------\n \n-   function \"+\" (L, R : Big_Real) return Big_Real is\n+   function \"+\" (L, R : Valid_Big_Real) return Valid_Big_Real is\n       Result : Big_Real;\n    begin\n-      if not Is_Valid (L) or not Is_Valid (R) then\n-         raise Constraint_Error with \"invalid big real\";\n-      end if;\n-\n       Result.Num := L.Num * R.Den + R.Num * L.Den;\n       Result.Den := L.Den * R.Den;\n       Normalize (Result);\n@@ -462,13 +452,9 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    -- \"-\" --\n    ---------\n \n-   function \"-\" (L, R : Big_Real) return Big_Real is\n+   function \"-\" (L, R : Valid_Big_Real) return Valid_Big_Real is\n       Result : Big_Real;\n    begin\n-      if not Is_Valid (L) or not Is_Valid (R) then\n-         raise Constraint_Error with \"invalid big real\";\n-      end if;\n-\n       Result.Num := L.Num * R.Den - R.Num * L.Den;\n       Result.Den := L.Den * R.Den;\n       Normalize (Result);\n@@ -479,13 +465,9 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    -- \"*\" --\n    ---------\n \n-   function \"*\" (L, R : Big_Real) return Big_Real is\n+   function \"*\" (L, R : Valid_Big_Real) return Valid_Big_Real is\n       Result : Big_Real;\n    begin\n-      if not Is_Valid (L) or not Is_Valid (R) then\n-         raise Constraint_Error with \"invalid big real\";\n-      end if;\n-\n       Result.Num := L.Num * R.Num;\n       Result.Den := L.Den * R.Den;\n       Normalize (Result);\n@@ -496,13 +478,9 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    -- \"/\" --\n    ---------\n \n-   function \"/\" (L, R : Big_Real) return Big_Real is\n+   function \"/\" (L, R : Valid_Big_Real) return Valid_Big_Real is\n       Result : Big_Real;\n    begin\n-      if not Is_Valid (L) or not Is_Valid (R) then\n-         raise Constraint_Error with \"invalid big real\";\n-      end if;\n-\n       Result.Num := L.Num * R.Den;\n       Result.Den := L.Den * R.Num;\n       Normalize (Result);\n@@ -513,13 +491,9 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    -- \"**\" --\n    ----------\n \n-   function \"**\" (L : Big_Real; R : Integer) return Big_Real is\n+   function \"**\" (L : Valid_Big_Real; R : Integer) return Valid_Big_Real is\n       Result : Big_Real;\n    begin\n-      if not Is_Valid (L) then\n-         raise Constraint_Error with \"invalid big real\";\n-      end if;\n-\n       if R = 0 then\n          Result.Num := To_Big_Integer (1);\n          Result.Den := To_Big_Integer (1);\n@@ -542,13 +516,15 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    -- Min --\n    ---------\n \n-   function Min (L, R : Big_Real) return Big_Real is (if L < R then L else R);\n+   function Min (L, R : Valid_Big_Real) return Valid_Big_Real is\n+     (if L < R then L else R);\n \n    ---------\n    -- Max --\n    ---------\n \n-   function Max (L, R : Big_Real) return Big_Real is (if L > R then L else R);\n+   function Max (L, R : Valid_Big_Real) return Valid_Big_Real is\n+     (if L > R then L else R);\n \n    ---------------\n    -- Normalize --"}, {"sha": "2915db025b62cca44a3f8bbdaa76e5e6bba1f54d", "filename": "gcc/ada/libgnat/a-nbnbre.ads", "status": "modified", "additions": 39, "deletions": 31, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c2ec499709f26af66a5327b1ff0ee345f5fa87/gcc%2Fada%2Flibgnat%2Fa-nbnbre.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c2ec499709f26af66a5327b1ff0ee345f5fa87/gcc%2Fada%2Flibgnat%2Fa-nbnbre.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nbnbre.ads?ref=b6c2ec499709f26af66a5327b1ff0ee345f5fa87", "patch": "@@ -29,36 +29,44 @@ is\n    function Is_Valid (Arg : Big_Real) return Boolean\n      with Convention => Intrinsic;\n \n-   function \"/\" (Num, Den : Big_Integers.Big_Integer) return Big_Real;\n---   with Pre => (if Big_Integers.\"=\" (Den, Big_Integers.To_Big_Integer (0))\n---                then raise Constraint_Error);\n+   subtype Valid_Big_Real is Big_Real\n+     with Dynamic_Predicate => Is_Valid (Valid_Big_Real),\n+          Predicate_Failure => raise Program_Error;\n \n-   function Numerator (Arg : Big_Real) return Big_Integers.Big_Integer;\n+   function \"/\"\n+     (Num, Den : Big_Integers.Valid_Big_Integer) return Valid_Big_Real;\n+--   with Pre => (Big_Integers.\"/=\" (Den, Big_Integers.To_Big_Integer (0))\n+--                or else Constraint_Error);\n \n-   function Denominator (Arg : Big_Real) return Big_Integers.Big_Positive\n+   function Numerator\n+     (Arg : Valid_Big_Real) return Big_Integers.Valid_Big_Integer;\n+\n+   function Denominator (Arg : Valid_Big_Real) return Big_Integers.Big_Positive\n      with Post =>\n-       (Arg = To_Real (0)) or else\n-       (Big_Integers.\"=\"\n-         (Big_Integers.Greatest_Common_Divisor\n-           (Numerator (Arg), Denominator'Result),\n-          Big_Integers.To_Big_Integer (1)));\n+       (if Arg = To_Real (0)\n+        then Big_Integers.\"=\" (Denominator'Result,\n+                               Big_Integers.To_Big_Integer (1))\n+        else Big_Integers.\"=\"\n+               (Big_Integers.Greatest_Common_Divisor\n+                 (Numerator (Arg), Denominator'Result),\n+                Big_Integers.To_Big_Integer (1)));\n \n    function To_Big_Real\n      (Arg : Big_Integers.Big_Integer)\n-     return Big_Real is (Arg / Big_Integers.To_Big_Integer (1));\n+     return Valid_Big_Real is (Arg / Big_Integers.To_Big_Integer (1));\n \n-   function To_Real (Arg : Integer) return Big_Real is\n+   function To_Real (Arg : Integer) return Valid_Big_Real is\n      (Big_Integers.To_Big_Integer (Arg) / Big_Integers.To_Big_Integer (1));\n \n-   function \"=\" (L, R : Big_Real) return Boolean;\n+   function \"=\" (L, R : Valid_Big_Real) return Boolean;\n \n-   function \"<\" (L, R : Big_Real) return Boolean;\n+   function \"<\" (L, R : Valid_Big_Real) return Boolean;\n \n-   function \"<=\" (L, R : Big_Real) return Boolean;\n+   function \"<=\" (L, R : Valid_Big_Real) return Boolean;\n \n-   function \">\" (L, R : Big_Real) return Boolean;\n+   function \">\" (L, R : Valid_Big_Real) return Boolean;\n \n-   function \">=\" (L, R : Big_Real) return Boolean;\n+   function \">=\" (L, R : Valid_Big_Real) return Boolean;\n \n    function In_Range (Arg, Low, High : Big_Real) return Boolean is\n      (Low <= Arg and then Arg <= High);\n@@ -67,7 +75,7 @@ is\n       type Num is digits <>;\n    package Float_Conversions is\n \n-      function To_Big_Real (Arg : Num) return Big_Real;\n+      function To_Big_Real (Arg : Num) return Valid_Big_Real;\n \n       function From_Big_Real (Arg : Big_Real) return Num\n         with Pre => In_Range (Arg,\n@@ -81,7 +89,7 @@ is\n       type Num is delta <>;\n    package Fixed_Conversions is\n \n-      function To_Big_Real (Arg : Num) return Big_Real;\n+      function To_Big_Real (Arg : Num) return Valid_Big_Real;\n \n       function From_Big_Real (Arg : Big_Real) return Num\n         with Pre => In_Range (Arg,\n@@ -91,7 +99,7 @@ is\n \n    end Fixed_Conversions;\n \n-   function To_String (Arg  : Big_Real;\n+   function To_String (Arg  : Valid_Big_Real;\n                        Fore : Field := 2;\n                        Aft  : Field := 3;\n                        Exp  : Field := 0) return String\n@@ -103,29 +111,29 @@ is\n      (Big_Integers.To_String (Numerator (Arg)) & \" / \"\n       & Big_Integers.To_String (Denominator (Arg)));\n \n-   function From_Quotient_String (Arg : String) return Big_Real;\n+   function From_Quotient_String (Arg : String) return Valid_Big_Real;\n \n    procedure Put_Image (S : in out Sink'Class; V : Big_Real);\n \n-   function \"+\" (L : Big_Real) return Big_Real;\n+   function \"+\" (L : Valid_Big_Real) return Valid_Big_Real;\n \n-   function \"-\" (L : Big_Real) return Big_Real;\n+   function \"-\" (L : Valid_Big_Real) return Valid_Big_Real;\n \n-   function \"abs\" (L : Big_Real) return Big_Real;\n+   function \"abs\" (L : Valid_Big_Real) return Valid_Big_Real;\n \n-   function \"+\" (L, R : Big_Real) return Big_Real;\n+   function \"+\" (L, R : Valid_Big_Real) return Valid_Big_Real;\n \n-   function \"-\" (L, R : Big_Real) return Big_Real;\n+   function \"-\" (L, R : Valid_Big_Real) return Valid_Big_Real;\n \n-   function \"*\" (L, R : Big_Real) return Big_Real;\n+   function \"*\" (L, R : Valid_Big_Real) return Valid_Big_Real;\n \n-   function \"/\" (L, R : Big_Real) return Big_Real;\n+   function \"/\" (L, R : Valid_Big_Real) return Valid_Big_Real;\n \n-   function \"**\" (L : Big_Real; R : Integer) return Big_Real;\n+   function \"**\" (L : Valid_Big_Real; R : Integer) return Valid_Big_Real;\n \n-   function Min (L, R : Big_Real) return Big_Real;\n+   function Min (L, R : Valid_Big_Real) return Valid_Big_Real;\n \n-   function Max (L, R : Big_Real) return Big_Real;\n+   function Max (L, R : Valid_Big_Real) return Valid_Big_Real;\n \n private\n "}]}