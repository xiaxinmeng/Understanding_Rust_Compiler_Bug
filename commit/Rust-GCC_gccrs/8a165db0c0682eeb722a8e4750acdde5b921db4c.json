{"sha": "8a165db0c0682eeb722a8e4750acdde5b921db4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGExNjVkYjBjMDY4MmVlYjcyMmE4ZTQ3NTBhY2RkZTViOTIxZGI0Yw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2008-02-11T00:01:33Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2008-02-11T00:01:33Z"}, "message": "Convert documentation to DocBook.\n\n2008-02-10  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tConvert documentation to DocBook.\n\t* doc/Makefile.am (doc-doxygen-html): Changed to doc-html-doxygen.\n\t(doc-doxygen-man): Changed to doc-man-doxygen.\n\t(doc-performance): Changed to doc-html-performance.\n\t(doc-xml-doxygen): New.\n\t(doc-xml-single): New.\n\t(doc-xml-validate): New.\n\t(doc-html): New.\n\t(doc-html-single): New.\n\t(doc-fo): New.\n\t(doc-pdf): New.\n\t(doc-pdf-fop-xml): New.\n\t(doc-pdf-fop-fo): New.\n\t(doc-pdf-xmlto): New.\n\t(doc-pdf-xmlroff): New.\n\t(doc-pdf-prince): New.\n\t* doc/xml: New directory.\n\t* doc/xml/authors.xml: New.\n\t* doc/xml/images: New directory.\n\t* doc/xml/images/confdeps.png: Add.\n\t* doc/xml/images/confdeps.dot: Add.\n\t* doc/xml/faq.xml: New.\n\t* doc/xml/api.xml: New.\n\t* doc/xml/gnu: New directory.\n\t* doc/xml/gnu/gpl-3.0.xml: New.\n\t* doc/xml/gnu/fdl-1.2.xml: New.\n\t* doc/xml/gnu/gpl-2.0.xml: New.\n\t* doc/xml/manual: New directory.\n\t* doc/xml/manual/mt_allocator.xml: New.\n\t* doc/xml/manual/allocator.xml: New.\n\t* doc/xml/manual/ctype.xml: New.\n\t* doc/xml/manual/numerics.xml: New.\n\t* doc/xml/manual/codecvt.xml: New.\n\t* doc/xml/manual/concurrency.xml: New.\n\t* doc/xml/manual/backwards_compatibility.xml: New.\n\t* doc/xml/manual/intro.xml: New.\n\t* doc/xml/manual/shared_ptr.xml: New.\n\t* doc/xml/manual/abi.xml: New.\n\t* doc/xml/manual/status_cxxtr1.xml: New.\n\t* doc/xml/manual/auto_ptr.xml: New.\n\t* doc/xml/manual/build.xml: New.\n\t* doc/xml/manual/internals.xml: New.\n\t* doc/xml/manual/parallel_mode.xml: New.\n\t* doc/xml/manual/status_cxx1998.xml: New.\n\t* doc/xml/manual/containers.xml: New.\n\t* doc/xml/manual/io.xml: New.\n\t* doc/xml/manual/appendix_porting.xml: New.\n\t* doc/xml/manual/utilities.xml: New.\n\t* doc/xml/manual/bitmap_allocator.xml: New.\n\t* doc/xml/manual/support.xml: New.\n\t* doc/xml/manual/configure.xml: New.\n\t* doc/xml/manual/build_hacking.xml: New.\n\t* doc/xml/manual/evolution.xml: New.\n\t* doc/xml/manual/using.xml: New.\n\t* doc/xml/manual/debug.xml: New.\n\t* doc/xml/manual/localization.xml: New.\n\t* doc/xml/manual/strings.xml: New.\n\t* doc/xml/manual/debug_mode.xml: New.\n\t* doc/xml/manual/locale.xml: New.\n\t* doc/xml/manual/extensions.xml: New.\n\t* doc/xml/manual/appendix_contributing.xml: New.\n\t* doc/xml/manual/messages.xml: New.\n\t* doc/xml/manual/diagnostics.xml: New.\n\t* doc/xml/manual/appendix_free.xml: New.\n\t* doc/xml/manual/algorithms.xml: New.\n\t* doc/xml/manual/iterators.xml: New.\n\t* doc/xml/manual/spine.xml: New.\n\t* doc/xml/manual/test.xml: New.\n\t* doc/xml/manual/status_cxx200x.xml: New.\n\t* doc/xml/spine.xml: New.\n\n\t* doc/xml/book.txml: New. Template file.\n\t* doc/xml/chapter.txml: Same.\n\t* doc/xml/class.txml: Same.\n\n\t* doc/doxygen/guide.html: Removed, integrated into other docs.\n\t* doc/doxygen/user.cfg.in: Clean up XML generation.\n\t* doc/doxygen/run_doxygen: Move to..\t\n\t* scripts/run_doxygen: ...here.\n\t\n\t* configure: Regenerate.\n\t* Makefile.in: Regenerate.\n\t* src/Makefile.in: Regenerate.\n\t* doc/Makefile.in: Regenerate.\t\n\t* po/Makefile.in: Regenerate.\n\t* libmath/Makefile.in: Regenerate.\n\t* include/Makefile.in: Regenerate.\n\t* libsupc++/Makefile.in: Regenerate.\n\t* testsuite/Makefile.in: Regenerate.\n\t* aclocal.m4: Regenerate.\n\nFrom-SVN: r132226", "tree": {"sha": "9c37bc44363d015d83f53e9ff733daf4affc1973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c37bc44363d015d83f53e9ff733daf4affc1973"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a165db0c0682eeb722a8e4750acdde5b921db4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a165db0c0682eeb722a8e4750acdde5b921db4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a165db0c0682eeb722a8e4750acdde5b921db4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a165db0c0682eeb722a8e4750acdde5b921db4c/comments", "author": null, "committer": null, "parents": [{"sha": "71a9ddca7abcc5bf6ec2d0d895c778b8abcbedf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71a9ddca7abcc5bf6ec2d0d895c778b8abcbedf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71a9ddca7abcc5bf6ec2d0d895c778b8abcbedf5"}], "stats": {"total": 102574, "additions": 65303, "deletions": 37271}, "files": [{"sha": "25c802e338f12ce2f392af86d6b3d40a555dda2a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -1,3 +1,96 @@\n+2008-02-10  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tConvert documentation to DocBook.\n+\t* doc/Makefile.am (doc-doxygen-html): Changed to doc-html-doxygen.\n+\t(doc-doxygen-man): Changed to doc-man-doxygen.\n+\t(doc-performance): Changed to doc-html-performance.\n+\t(doc-xml-doxygen): New.\n+\t(doc-xml-single): New.\n+\t(doc-xml-validate): New.\n+\t(doc-html): New.\n+\t(doc-html-single): New.\n+\t(doc-fo): New.\n+\t(doc-pdf): New.\n+\t(doc-pdf-fop-xml): New.\n+\t(doc-pdf-fop-fo): New.\n+\t(doc-pdf-xmlto): New.\n+\t(doc-pdf-xmlroff): New.\n+\t(doc-pdf-prince): New.\n+\t* doc/xml: New directory.\n+\t* doc/xml/authors.xml: New.\n+\t* doc/xml/images: New directory.\n+\t* doc/xml/images/confdeps.png: Add.\n+\t* doc/xml/images/confdeps.dot: Add.\n+\t* doc/xml/faq.xml: New.\n+\t* doc/xml/api.xml: New.\n+\t* doc/xml/gnu: New directory.\n+\t* doc/xml/gnu/gpl-3.0.xml: New.\n+\t* doc/xml/gnu/fdl-1.2.xml: New.\n+\t* doc/xml/gnu/gpl-2.0.xml: New.\n+\t* doc/xml/manual: New directory.\n+\t* doc/xml/manual/mt_allocator.xml: New.\n+\t* doc/xml/manual/allocator.xml: New.\n+\t* doc/xml/manual/ctype.xml: New.\n+\t* doc/xml/manual/numerics.xml: New.\n+\t* doc/xml/manual/codecvt.xml: New.\n+\t* doc/xml/manual/concurrency.xml: New.\n+\t* doc/xml/manual/backwards_compatibility.xml: New.\n+\t* doc/xml/manual/intro.xml: New.\n+\t* doc/xml/manual/shared_ptr.xml: New.\n+\t* doc/xml/manual/abi.xml: New.\n+\t* doc/xml/manual/status_cxxtr1.xml: New.\n+\t* doc/xml/manual/auto_ptr.xml: New.\n+\t* doc/xml/manual/build.xml: New.\n+\t* doc/xml/manual/internals.xml: New.\n+\t* doc/xml/manual/parallel_mode.xml: New.\n+\t* doc/xml/manual/status_cxx1998.xml: New.\n+\t* doc/xml/manual/containers.xml: New.\n+\t* doc/xml/manual/io.xml: New.\n+\t* doc/xml/manual/appendix_porting.xml: New.\n+\t* doc/xml/manual/utilities.xml: New.\n+\t* doc/xml/manual/bitmap_allocator.xml: New.\n+\t* doc/xml/manual/support.xml: New.\n+\t* doc/xml/manual/configure.xml: New.\n+\t* doc/xml/manual/build_hacking.xml: New.\n+\t* doc/xml/manual/evolution.xml: New.\n+\t* doc/xml/manual/using.xml: New.\n+\t* doc/xml/manual/debug.xml: New.\n+\t* doc/xml/manual/localization.xml: New.\n+\t* doc/xml/manual/strings.xml: New.\n+\t* doc/xml/manual/debug_mode.xml: New.\n+\t* doc/xml/manual/locale.xml: New.\n+\t* doc/xml/manual/extensions.xml: New.\n+\t* doc/xml/manual/appendix_contributing.xml: New.\n+\t* doc/xml/manual/messages.xml: New.\n+\t* doc/xml/manual/diagnostics.xml: New.\n+\t* doc/xml/manual/appendix_free.xml: New.\n+\t* doc/xml/manual/algorithms.xml: New.\n+\t* doc/xml/manual/iterators.xml: New.\n+\t* doc/xml/manual/spine.xml: New.\n+\t* doc/xml/manual/test.xml: New.\n+\t* doc/xml/manual/status_cxx200x.xml: New.\n+\t* doc/xml/spine.xml: New.\n+\n+\t* doc/xml/book.txml: New. Template file.\n+\t* doc/xml/chapter.txml: Same.\n+\t* doc/xml/class.txml: Same.\n+\n+\t* doc/doxygen/guide.html: Removed, integrated into other docs.\n+\t* doc/doxygen/user.cfg.in: Clean up XML generation\n+\t* doc/doxygen/run_doxygen: Move to..\t\n+\t* scripts/run_doxygen: ...here.\n+\t\n+\t* configure: Regenerate.\n+\t* Makefile.in: Regenerate.\n+\t* src/Makefile.in: Regenerate.\n+\t* doc/Makefile.in: Regenerate.\t\n+\t* po/Makefile.in: Regenerate.\n+\t* libmath/Makefile.in: Regenerate.\n+\t* include/Makefile.in: Regenerate.\n+\t* libsupc++/Makefile.in: Regenerate.\n+\t* testsuite/Makefile.in: Regenerate.\n+\t* aclocal.m4: Regenerate.\n+\n 2008-02-10  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/16251"}, {"sha": "9b3aa2c8398ce1fe2873adfee62e67e49621768b", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 79, "deletions": 90, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -1,8 +1,8 @@\n-# Makefile.in generated by automake 1.9.6 from Makefile.am.\n+# Makefile.in generated by automake 1.10 from Makefile.am.\n # @configure_input@\n \n # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n-# 2003, 2004, 2005  Free Software Foundation, Inc.\n+# 2003, 2004, 2005, 2006  Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n@@ -13,15 +13,11 @@\n # PARTICULAR PURPOSE.\n \n @SET_MAKE@\n-srcdir = @srcdir@\n-top_srcdir = @top_srcdir@\n VPATH = @srcdir@\n pkgdatadir = $(datadir)/@PACKAGE@\n pkglibdir = $(libdir)/@PACKAGE@\n pkgincludedir = $(includedir)/@PACKAGE@\n-top_builddir = .\n am__cd = CDPATH=\"$${ZSH_VERSION+.}$(PATH_SEPARATOR)\" && cd\n-INSTALL = @INSTALL@\n install_sh_DATA = $(install_sh) -c -m 644\n install_sh_PROGRAM = $(install_sh) -c\n install_sh_SCRIPT = $(install_sh) -c\n@@ -63,7 +59,7 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/enable.m4 \\\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\\n- configure.lineno configure.status.lineno\n+ configure.lineno config.status.lineno\n CONFIG_HEADER = config.h\n CONFIG_CLEAN_FILES = scripts/testsuite_flags\n depcomp =\n@@ -78,10 +74,13 @@ MULTIDO = true\n MULTICLEAN = true\n RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \\\n \thtml-recursive info-recursive install-data-recursive \\\n-\tinstall-exec-recursive install-info-recursive \\\n-\tinstall-recursive installcheck-recursive installdirs-recursive \\\n-\tpdf-recursive ps-recursive uninstall-info-recursive \\\n-\tuninstall-recursive\n+\tinstall-dvi-recursive install-exec-recursive \\\n+\tinstall-html-recursive install-info-recursive \\\n+\tinstall-pdf-recursive install-ps-recursive install-recursive \\\n+\tinstallcheck-recursive installdirs-recursive pdf-recursive \\\n+\tps-recursive uninstall-recursive\n+RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive\t\\\n+  distclean-recursive maintainer-clean-recursive\n ETAGS = etags\n CTAGS = ctags\n DIST_SUBDIRS = include libsupc++ libmath doc src po testsuite\n@@ -142,42 +141,13 @@ ECHO_C = @ECHO_C@\n ECHO_N = @ECHO_N@\n ECHO_T = @ECHO_T@\n EGREP = @EGREP@\n-ENABLE_PARALLEL_FALSE = @ENABLE_PARALLEL_FALSE@\n-ENABLE_PARALLEL_TRUE = @ENABLE_PARALLEL_TRUE@\n-ENABLE_SYMVERS_DARWIN_FALSE = @ENABLE_SYMVERS_DARWIN_FALSE@\n-ENABLE_SYMVERS_DARWIN_TRUE = @ENABLE_SYMVERS_DARWIN_TRUE@\n-ENABLE_SYMVERS_FALSE = @ENABLE_SYMVERS_FALSE@\n-ENABLE_SYMVERS_GNU_FALSE = @ENABLE_SYMVERS_GNU_FALSE@\n-ENABLE_SYMVERS_GNU_NAMESPACE_FALSE = @ENABLE_SYMVERS_GNU_NAMESPACE_FALSE@\n-ENABLE_SYMVERS_GNU_NAMESPACE_TRUE = @ENABLE_SYMVERS_GNU_NAMESPACE_TRUE@\n-ENABLE_SYMVERS_GNU_TRUE = @ENABLE_SYMVERS_GNU_TRUE@\n-ENABLE_SYMVERS_TRUE = @ENABLE_SYMVERS_TRUE@\n-ENABLE_VISIBILITY_FALSE = @ENABLE_VISIBILITY_FALSE@\n-ENABLE_VISIBILITY_TRUE = @ENABLE_VISIBILITY_TRUE@\n ERROR_CONSTANTS_SRCDIR = @ERROR_CONSTANTS_SRCDIR@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n FGREP = @FGREP@\n-GLIBCXX_BUILD_DEBUG_FALSE = @GLIBCXX_BUILD_DEBUG_FALSE@\n-GLIBCXX_BUILD_DEBUG_TRUE = @GLIBCXX_BUILD_DEBUG_TRUE@\n-GLIBCXX_BUILD_PCH_FALSE = @GLIBCXX_BUILD_PCH_FALSE@\n-GLIBCXX_BUILD_PCH_TRUE = @GLIBCXX_BUILD_PCH_TRUE@\n-GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE = @GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE@\n-GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE = @GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE@\n-GLIBCXX_C_HEADERS_C_FALSE = @GLIBCXX_C_HEADERS_C_FALSE@\n-GLIBCXX_C_HEADERS_C_GLOBAL_FALSE = @GLIBCXX_C_HEADERS_C_GLOBAL_FALSE@\n-GLIBCXX_C_HEADERS_C_GLOBAL_TRUE = @GLIBCXX_C_HEADERS_C_GLOBAL_TRUE@\n-GLIBCXX_C_HEADERS_C_STD_FALSE = @GLIBCXX_C_HEADERS_C_STD_FALSE@\n-GLIBCXX_C_HEADERS_C_STD_TRUE = @GLIBCXX_C_HEADERS_C_STD_TRUE@\n-GLIBCXX_C_HEADERS_C_TRUE = @GLIBCXX_C_HEADERS_C_TRUE@\n-GLIBCXX_C_HEADERS_EXTRA_FALSE = @GLIBCXX_C_HEADERS_EXTRA_FALSE@\n-GLIBCXX_C_HEADERS_EXTRA_TRUE = @GLIBCXX_C_HEADERS_EXTRA_TRUE@\n-GLIBCXX_HOSTED_FALSE = @GLIBCXX_HOSTED_FALSE@\n-GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n-GLIBCXX_LDBL_COMPAT_FALSE = @GLIBCXX_LDBL_COMPAT_FALSE@\n-GLIBCXX_LDBL_COMPAT_TRUE = @GLIBCXX_LDBL_COMPAT_TRUE@\n GREP = @GREP@\n+INSTALL = @INSTALL@\n INSTALL_DATA = @INSTALL_DATA@\n INSTALL_PROGRAM = @INSTALL_PROGRAM@\n INSTALL_SCRIPT = @INSTALL_SCRIPT@\n@@ -194,9 +164,8 @@ LN_S = @LN_S@\n LTLIBICONV = @LTLIBICONV@\n LTLIBOBJS = @LTLIBOBJS@\n MAINT = @MAINT@\n-MAINTAINER_MODE_FALSE = @MAINTAINER_MODE_FALSE@\n-MAINTAINER_MODE_TRUE = @MAINTAINER_MODE_TRUE@\n MAKEINFO = @MAKEINFO@\n+MKDIR_P = @MKDIR_P@\n NM = @NM@\n OBJEXT = @OBJEXT@\n OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n@@ -222,13 +191,13 @@ USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n-ac_ct_AR = @ac_ct_AR@\n-ac_ct_AS = @ac_ct_AS@\n+abs_builddir = @abs_builddir@\n+abs_srcdir = @abs_srcdir@\n+abs_top_builddir = @abs_top_builddir@\n+abs_top_srcdir = @abs_top_srcdir@\n ac_ct_CC = @ac_ct_CC@\n ac_ct_CXX = @ac_ct_CXX@\n ac_ct_DUMPBIN = @ac_ct_DUMPBIN@\n-ac_ct_RANLIB = @ac_ct_RANLIB@\n-ac_ct_STRIP = @ac_ct_STRIP@\n am__leading_dot = @am__leading_dot@\n am__tar = @am__tar@\n am__untar = @am__untar@\n@@ -239,8 +208,12 @@ build_alias = @build_alias@\n build_cpu = @build_cpu@\n build_os = @build_os@\n build_vendor = @build_vendor@\n+builddir = @builddir@\n check_msgfmt = @check_msgfmt@\n datadir = @datadir@\n+datarootdir = @datarootdir@\n+docdir = @docdir@\n+dvidir = @dvidir@\n enable_shared = @enable_shared@\n enable_static = @enable_static@\n exec_prefix = @exec_prefix@\n@@ -260,29 +233,36 @@ host_alias = @host_alias@\n host_cpu = @host_cpu@\n host_os = @host_os@\n host_vendor = @host_vendor@\n+htmldir = @htmldir@\n includedir = @includedir@\n infodir = @infodir@\n install_sh = @install_sh@\n libdir = @libdir@\n libexecdir = @libexecdir@\n libtool_VERSION = @libtool_VERSION@\n+localedir = @localedir@\n localstatedir = @localstatedir@\n lt_ECHO = @lt_ECHO@\n mandir = @mandir@\n mkdir_p = @mkdir_p@\n multi_basedir = @multi_basedir@\n oldincludedir = @oldincludedir@\n+pdfdir = @pdfdir@\n port_specific_symbol_files = @port_specific_symbol_files@\n prefix = @prefix@\n program_transform_name = @program_transform_name@\n+psdir = @psdir@\n sbindir = @sbindir@\n sharedstatedir = @sharedstatedir@\n+srcdir = @srcdir@\n sysconfdir = @sysconfdir@\n target = @target@\n target_alias = @target_alias@\n target_cpu = @target_cpu@\n target_os = @target_os@\n target_vendor = @target_vendor@\n+top_builddir = @top_builddir@\n+top_srcdir = @top_srcdir@\n toplevel_srcdir = @toplevel_srcdir@\n \n # May be used by various substitution variables.\n@@ -397,7 +377,7 @@ $(ACLOCAL_M4): @MAINTAINER_MODE_TRUE@ $(am__aclocal_m4_deps)\n config.h: stamp-h1\n \t@if test ! -f $@; then \\\n \t  rm -f stamp-h1; \\\n-\t  $(MAKE) stamp-h1; \\\n+\t  $(MAKE) $(AM_MAKEFLAGS) stamp-h1; \\\n \telse :; fi\n \n stamp-h1: $(srcdir)/config.h.in $(top_builddir)/config.status\n@@ -438,7 +418,6 @@ distclean-multi:\n \t$(MULTICLEAN) $(AM_MAKEFLAGS) DO=distclean multi-clean # $(MAKE)\n maintainer-clean-multi:\n \t$(MULTICLEAN) $(AM_MAKEFLAGS) DO=maintainer-clean multi-clean # $(MAKE)\n-uninstall-info-am:\n \n # This directory's subdirectories are mostly independent; you can cd\n # into them and run `make' without going through this Makefile.\n@@ -471,8 +450,7 @@ $(RECURSIVE_TARGETS):\n \t  $(MAKE) $(AM_MAKEFLAGS) \"$$target-am\" || exit 1; \\\n \tfi; test -z \"$$fail\"\n \n-mostlyclean-recursive clean-recursive distclean-recursive \\\n-maintainer-clean-recursive:\n+$(RECURSIVE_CLEAN_TARGETS):\n \t@failcom='exit 1'; \\\n \tfor f in x $$MAKEFLAGS; do \\\n \t  case $$f in \\\n@@ -545,24 +523,22 @@ distclean-tags:\n \n distdir: $(DISTFILES)\n \t$(am__remove_distdir)\n-\tmkdir $(distdir)\n-\t$(mkdir_p) $(distdir)/.. $(distdir)/../config $(distdir)/scripts\n-\t@srcdirstrip=`echo \"$(srcdir)\" | sed 's|.|.|g'`; \\\n-\ttopsrcdirstrip=`echo \"$(top_srcdir)\" | sed 's|.|.|g'`; \\\n-\tlist='$(DISTFILES)'; for file in $$list; do \\\n-\t  case $$file in \\\n-\t    $(srcdir)/*) file=`echo \"$$file\" | sed \"s|^$$srcdirstrip/||\"`;; \\\n-\t    $(top_srcdir)/*) file=`echo \"$$file\" | sed \"s|^$$topsrcdirstrip/|$(top_builddir)/|\"`;; \\\n-\t  esac; \\\n+\ttest -d $(distdir) || mkdir $(distdir)\n+\t@srcdirstrip=`echo \"$(srcdir)\" | sed 's/[].[^$$\\\\*]/\\\\\\\\&/g'`; \\\n+\ttopsrcdirstrip=`echo \"$(top_srcdir)\" | sed 's/[].[^$$\\\\*]/\\\\\\\\&/g'`; \\\n+\tlist='$(DISTFILES)'; \\\n+\t  dist_files=`for file in $$list; do echo $$file; done | \\\n+\t  sed -e \"s|^$$srcdirstrip/||;t\" \\\n+\t      -e \"s|^$$topsrcdirstrip/|$(top_builddir)/|;t\"`; \\\n+\tcase $$dist_files in \\\n+\t  */*) $(MKDIR_P) `echo \"$$dist_files\" | \\\n+\t\t\t   sed '/\\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \\\n+\t\t\t   sort -u` ;; \\\n+\tesac; \\\n+\tfor file in $$dist_files; do \\\n \t  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \\\n-\t  dir=`echo \"$$file\" | sed -e 's,/[^/]*$$,,'`; \\\n-\t  if test \"$$dir\" != \"$$file\" && test \"$$dir\" != \".\"; then \\\n-\t    dir=\"/$$dir\"; \\\n-\t    $(mkdir_p) \"$(distdir)$$dir\"; \\\n-\t  else \\\n-\t    dir=''; \\\n-\t  fi; \\\n \t  if test -d $$d/$$file; then \\\n+\t    dir=`echo \"/$$file\" | sed -e 's,/[^/]*$$,,'`; \\\n \t    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \\\n \t      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \\\n \t    fi; \\\n@@ -576,22 +552,24 @@ distdir: $(DISTFILES)\n \tlist='$(DIST_SUBDIRS)'; for subdir in $$list; do \\\n \t  if test \"$$subdir\" = .; then :; else \\\n \t    test -d \"$(distdir)/$$subdir\" \\\n-\t    || $(mkdir_p) \"$(distdir)/$$subdir\" \\\n+\t    || $(MKDIR_P) \"$(distdir)/$$subdir\" \\\n \t    || exit 1; \\\n \t    distdir=`$(am__cd) $(distdir) && pwd`; \\\n \t    top_distdir=`$(am__cd) $(top_distdir) && pwd`; \\\n \t    (cd $$subdir && \\\n \t      $(MAKE) $(AM_MAKEFLAGS) \\\n \t        top_distdir=\"$$top_distdir\" \\\n \t        distdir=\"$$distdir/$$subdir\" \\\n+\t\tam__remove_distdir=: \\\n+\t\tam__skip_length_check=: \\\n \t        distdir) \\\n \t      || exit 1; \\\n \t  fi; \\\n \tdone\n \t-find $(distdir) -type d ! -perm -777 -exec chmod a+rwx {} \\; -o \\\n \t  ! -type d ! -perm -444 -links 1 -exec chmod a+r {} \\; -o \\\n \t  ! -type d ! -perm -400 -exec chmod a+r {} \\; -o \\\n-\t  ! -type d ! -perm -444 -exec $(SHELL) $(install_sh) -c -m a+r {} {} \\; \\\n+\t  ! -type d ! -perm -444 -exec $(install_sh) -c -m a+r {} {} \\; \\\n \t|| chmod -R a+r $(distdir)\n dist-gzip: distdir\n \ttardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz\n@@ -666,7 +644,7 @@ distcheck: dist\n \t$(am__remove_distdir)\n \t@(echo \"$(distdir) archives ready for distribution: \"; \\\n \t  list='$(DIST_ARCHIVES)'; for i in $$list; do echo $$i; done) | \\\n-\t  sed -e '1{h;s/./=/g;p;x;}' -e '$${p;x;}'\n+\t  sed -e 1h -e 1s/./=/g -e 1p -e 1x -e '$$p' -e '$$x'\n distuninstallcheck:\n \t@cd $(distuninstallcheck_dir) \\\n \t&& test `$(distuninstallcheck_listfiles) | wc -l` -le 1 \\\n@@ -736,12 +714,20 @@ info-am:\n \n install-data-am:\n \n+install-dvi: install-dvi-recursive\n+\n install-exec-am: install-multi\n \n+install-html: install-html-recursive\n+\n install-info: install-info-recursive\n \n install-man:\n \n+install-pdf: install-pdf-recursive\n+\n+install-ps: install-ps-recursive\n+\n installcheck-am:\n \n maintainer-clean: maintainer-clean-multi maintainer-clean-recursive\n@@ -762,26 +748,29 @@ ps: ps-recursive\n \n ps-am:\n \n-uninstall-am: uninstall-info-am\n-\n-uninstall-info: uninstall-info-recursive\n-\n-.PHONY: $(RECURSIVE_TARGETS) CTAGS GTAGS all all-am all-multi \\\n-\tam--refresh check check-am clean clean-generic clean-libtool \\\n-\tclean-multi clean-recursive ctags ctags-recursive dist \\\n-\tdist-all dist-bzip2 dist-gzip dist-shar dist-tarZ dist-zip \\\n-\tdistcheck distclean distclean-generic distclean-hdr \\\n-\tdistclean-libtool distclean-multi distclean-recursive \\\n-\tdistclean-tags distcleancheck distdir distuninstallcheck dvi \\\n-\tdvi-am html html-am info info-am install install-am \\\n-\tinstall-data install-data-am install-exec install-exec-am \\\n-\tinstall-info install-info-am install-man install-multi \\\n-\tinstall-strip installcheck installcheck-am installdirs \\\n-\tinstalldirs-am maintainer-clean maintainer-clean-generic \\\n-\tmaintainer-clean-multi maintainer-clean-recursive mostlyclean \\\n-\tmostlyclean-generic mostlyclean-libtool mostlyclean-multi \\\n-\tmostlyclean-recursive pdf pdf-am ps ps-am tags tags-recursive \\\n-\tuninstall uninstall-am uninstall-info-am\n+uninstall-am:\n+\n+.MAKE: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) all-multi \\\n+\tclean-multi distclean-multi install-am install-multi \\\n+\tinstall-strip maintainer-clean-multi mostlyclean-multi\n+\n+.PHONY: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) CTAGS GTAGS \\\n+\tall all-am all-multi am--refresh check check-am clean \\\n+\tclean-generic clean-libtool clean-multi ctags ctags-recursive \\\n+\tdist dist-all dist-bzip2 dist-gzip dist-shar dist-tarZ \\\n+\tdist-zip distcheck distclean distclean-generic distclean-hdr \\\n+\tdistclean-libtool distclean-multi distclean-tags \\\n+\tdistcleancheck distdir distuninstallcheck dvi dvi-am html \\\n+\thtml-am info info-am install install-am install-data \\\n+\tinstall-data-am install-dvi install-dvi-am install-exec \\\n+\tinstall-exec-am install-html install-html-am install-info \\\n+\tinstall-info-am install-man install-multi install-pdf \\\n+\tinstall-pdf-am install-ps install-ps-am install-strip \\\n+\tinstallcheck installcheck-am installdirs installdirs-am \\\n+\tmaintainer-clean maintainer-clean-generic \\\n+\tmaintainer-clean-multi mostlyclean mostlyclean-generic \\\n+\tmostlyclean-libtool mostlyclean-multi pdf pdf-am ps ps-am tags \\\n+\ttags-recursive uninstall uninstall-am\n \n \n # Handy forwarding targets."}, {"sha": "552822f13ed9dc61811517a51663888207c7150f", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 84, "deletions": 75, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -1,7 +1,7 @@\n-# generated automatically by aclocal 1.9.6 -*- Autoconf -*-\n+# generated automatically by aclocal 1.10 -*- Autoconf -*-\n \n # Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-# 2005  Free Software Foundation, Inc.\n+# 2005, 2006  Free Software Foundation, Inc.\n # This file is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n@@ -11,7 +11,12 @@\n # even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n # PARTICULAR PURPOSE.\n \n-# Copyright (C) 2002, 2003, 2005  Free Software Foundation, Inc.\n+m4_if(m4_PACKAGE_VERSION, [2.61],,\n+[m4_fatal([this file was generated for autoconf 2.61.\n+You have another version of autoconf.  If you want to use that,\n+you should regenerate the build system entirely.], [63])])\n+\n+# Copyright (C) 2002, 2003, 2005, 2006  Free Software Foundation, Inc.\n #\n # This file is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n@@ -21,14 +26,29 @@\n # ----------------------------\n # Automake X.Y traces this macro to ensure aclocal.m4 has been\n # generated from the m4 files accompanying Automake X.Y.\n-AC_DEFUN([AM_AUTOMAKE_VERSION], [am__api_version=\"1.9\"])\n+# (This private macro should not be called outside this file.)\n+AC_DEFUN([AM_AUTOMAKE_VERSION],\n+[am__api_version='1.10'\n+dnl Some users find AM_AUTOMAKE_VERSION and mistake it for a way to\n+dnl require some minimum version.  Point them to the right macro.\n+m4_if([$1], [1.10], [],\n+      [AC_FATAL([Do not call $0, use AM_INIT_AUTOMAKE([$1]).])])dnl\n+])\n+\n+# _AM_AUTOCONF_VERSION(VERSION)\n+# -----------------------------\n+# aclocal traces this macro to find the Autoconf version.\n+# This is a private macro too.  Using m4_define simplifies\n+# the logic in aclocal, which can simply ignore this definition.\n+m4_define([_AM_AUTOCONF_VERSION], [])\n \n # AM_SET_CURRENT_AUTOMAKE_VERSION\n # -------------------------------\n-# Call AM_AUTOMAKE_VERSION so it can be traced.\n+# Call AM_AUTOMAKE_VERSION and AM_AUTOMAKE_VERSION so they can be traced.\n # This function is AC_REQUIREd by AC_INIT_AUTOMAKE.\n AC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION],\n-\t [AM_AUTOMAKE_VERSION([1.9.6])])\n+[AM_AUTOMAKE_VERSION([1.10])dnl\n+_AM_AUTOCONF_VERSION(m4_PACKAGE_VERSION)])\n \n # AM_AUX_DIR_EXPAND                                         -*- Autoconf -*-\n \n@@ -85,14 +105,14 @@ am_aux_dir=`cd $ac_aux_dir && pwd`\n \n # AM_CONDITIONAL                                            -*- Autoconf -*-\n \n-# Copyright (C) 1997, 2000, 2001, 2003, 2004, 2005\n+# Copyright (C) 1997, 2000, 2001, 2003, 2004, 2005, 2006\n # Free Software Foundation, Inc.\n #\n # This file is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n \n-# serial 7\n+# serial 8\n \n # AM_CONDITIONAL(NAME, SHELL-CONDITION)\n # -------------------------------------\n@@ -101,8 +121,10 @@ AC_DEFUN([AM_CONDITIONAL],\n [AC_PREREQ(2.52)dnl\n  ifelse([$1], [TRUE],  [AC_FATAL([$0: invalid condition: $1])],\n \t[$1], [FALSE], [AC_FATAL([$0: invalid condition: $1])])dnl\n-AC_SUBST([$1_TRUE])\n-AC_SUBST([$1_FALSE])\n+AC_SUBST([$1_TRUE])dnl\n+AC_SUBST([$1_FALSE])dnl\n+_AM_SUBST_NOTMAKE([$1_TRUE])dnl\n+_AM_SUBST_NOTMAKE([$1_FALSE])dnl\n if $2; then\n   $1_TRUE=\n   $1_FALSE='#'\n@@ -118,8 +140,8 @@ fi])])\n \n # Do all the work for Automake.                             -*- Autoconf -*-\n \n-# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n-# Free Software Foundation, Inc.\n+# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n+# 2005, 2006 Free Software Foundation, Inc.\n #\n # This file is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n@@ -142,16 +164,20 @@ fi])])\n # arguments mandatory, and then we can depend on a new Autoconf\n # release and drop the old call support.\n AC_DEFUN([AM_INIT_AUTOMAKE],\n-[AC_PREREQ([2.58])dnl\n+[AC_PREREQ([2.60])dnl\n dnl Autoconf wants to disallow AM_ names.  We explicitly allow\n dnl the ones we care about.\n m4_pattern_allow([^AM_[A-Z]+FLAGS$])dnl\n AC_REQUIRE([AM_SET_CURRENT_AUTOMAKE_VERSION])dnl\n AC_REQUIRE([AC_PROG_INSTALL])dnl\n-# test to see if srcdir already configured\n-if test \"`cd $srcdir && pwd`\" != \"`pwd`\" &&\n-   test -f $srcdir/config.status; then\n-  AC_MSG_ERROR([source directory already configured; run \"make distclean\" there first])\n+if test \"`cd $srcdir && pwd`\" != \"`pwd`\"; then\n+  # Use -I$(srcdir) only when $(srcdir) != ., so that make's output\n+  # is not polluted with repeated \"-I.\"\n+  AC_SUBST([am__isrc], [' -I$(srcdir)'])_AM_SUBST_NOTMAKE([am__isrc])dnl\n+  # test to see if srcdir already configured\n+  if test -f $srcdir/config.status; then\n+    AC_MSG_ERROR([source directory already configured; run \"make distclean\" there first])\n+  fi\n fi\n \n # test whether we have cygpath\n@@ -171,6 +197,9 @@ m4_ifval([$2],\n  AC_SUBST([PACKAGE], [$1])dnl\n  AC_SUBST([VERSION], [$2])],\n [_AM_SET_OPTIONS([$1])dnl\n+dnl Diagnose old-style AC_INIT with new-style AM_AUTOMAKE_INIT.\n+m4_if(m4_ifdef([AC_PACKAGE_NAME], 1)m4_ifdef([AC_PACKAGE_VERSION], 1), 11,,\n+  [m4_fatal([AC_INIT should be called with package and version arguments])])dnl\n  AC_SUBST([PACKAGE], ['AC_PACKAGE_TARNAME'])dnl\n  AC_SUBST([VERSION], ['AC_PACKAGE_VERSION'])])dnl\n \n@@ -206,6 +235,10 @@ AC_PROVIDE_IFELSE([AC_PROG_CXX],\n                   [_AM_DEPENDENCIES(CXX)],\n                   [define([AC_PROG_CXX],\n                           defn([AC_PROG_CXX])[_AM_DEPENDENCIES(CXX)])])dnl\n+AC_PROVIDE_IFELSE([AC_PROG_OBJC],\n+                  [_AM_DEPENDENCIES(OBJC)],\n+                  [define([AC_PROG_OBJC],\n+                          defn([AC_PROG_OBJC])[_AM_DEPENDENCIES(OBJC)])])dnl\n ])\n ])\n \n@@ -241,7 +274,7 @@ echo \"timestamp for $1\" >`AS_DIRNAME([$1])`/stamp-h[]$_am_stamp_count])\n # Define $install_sh.\n AC_DEFUN([AM_PROG_INSTALL_SH],\n [AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl\n-install_sh=${install_sh-\"$am_aux_dir/install-sh\"}\n+install_sh=${install_sh-\"\\$(SHELL) $am_aux_dir/install-sh\"}\n AC_SUBST(install_sh)])\n \n # Add --enable-maintainer-mode option to configure.         -*- Autoconf -*-\n@@ -275,14 +308,14 @@ AU_DEFUN([jm_MAINTAINER_MODE], [AM_MAINTAINER_MODE])\n \n # Fake the existence of programs that GNU maintainers use.  -*- Autoconf -*-\n \n-# Copyright (C) 1997, 1999, 2000, 2001, 2003, 2005\n+# Copyright (C) 1997, 1999, 2000, 2001, 2003, 2004, 2005\n # Free Software Foundation, Inc.\n #\n # This file is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n \n-# serial 4\n+# serial 5\n \n # AM_MISSING_PROG(NAME, PROGRAM)\n # ------------------------------\n@@ -298,6 +331,7 @@ AC_SUBST($1)])\n # If it does, set am_missing_run to use it, otherwise, to nothing.\n AC_DEFUN([AM_MISSING_HAS_RUN],\n [AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl\n+AC_REQUIRE_AUX_FILE([missing])dnl\n test x\"${MISSING+set}\" = xset || MISSING=\"\\${SHELL} $am_aux_dir/missing\"\n # Use eval to expand $SHELL\n if eval \"$MISSING --run true\"; then\n@@ -308,68 +342,31 @@ else\n fi\n ])\n \n-# Copyright (C) 2003, 2004, 2005  Free Software Foundation, Inc.\n+# Copyright (C) 2003, 2004, 2005, 2006  Free Software Foundation, Inc.\n #\n # This file is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n \n # AM_PROG_MKDIR_P\n # ---------------\n-# Check whether `mkdir -p' is supported, fallback to mkinstalldirs otherwise.\n-#\n-# Automake 1.8 used `mkdir -m 0755 -p --' to ensure that directories\n-# created by `make install' are always world readable, even if the\n-# installer happens to have an overly restrictive umask (e.g. 077).\n-# This was a mistake.  There are at least two reasons why we must not\n-# use `-m 0755':\n-#   - it causes special bits like SGID to be ignored,\n-#   - it may be too restrictive (some setups expect 775 directories).\n-#\n-# Do not use -m 0755 and let people choose whatever they expect by\n-# setting umask.\n-#\n-# We cannot accept any implementation of `mkdir' that recognizes `-p'.\n-# Some implementations (such as Solaris 8's) are not thread-safe: if a\n-# parallel make tries to run `mkdir -p a/b' and `mkdir -p a/c'\n-# concurrently, both version can detect that a/ is missing, but only\n-# one can create it and the other will error out.  Consequently we\n-# restrict ourselves to GNU make (using the --version option ensures\n-# this.)\n+# Check for `mkdir -p'.\n AC_DEFUN([AM_PROG_MKDIR_P],\n-[if mkdir -p --version . >/dev/null 2>&1 && test ! -d ./--version; then\n-  # We used to keeping the `.' as first argument, in order to\n-  # allow $(mkdir_p) to be used without argument.  As in\n-  #   $(mkdir_p) $(somedir)\n-  # where $(somedir) is conditionally defined.  However this is wrong\n-  # for two reasons:\n-  #  1. if the package is installed by a user who cannot write `.'\n-  #     make install will fail,\n-  #  2. the above comment should most certainly read\n-  #     $(mkdir_p) $(DESTDIR)$(somedir)\n-  #     so it does not work when $(somedir) is undefined and\n-  #     $(DESTDIR) is not.\n-  #  To support the latter case, we have to write\n-  #     test -z \"$(somedir)\" || $(mkdir_p) $(DESTDIR)$(somedir),\n-  #  so the `.' trick is pointless.\n-  mkdir_p='mkdir -p --'\n-else\n-  # On NextStep and OpenStep, the `mkdir' command does not\n-  # recognize any option.  It will interpret all options as\n-  # directories to create, and then abort because `.' already\n-  # exists.\n-  for d in ./-p ./--version;\n-  do\n-    test -d $d && rmdir $d\n-  done\n-  # $(mkinstalldirs) is defined by Automake if mkinstalldirs exists.\n-  if test -f \"$ac_aux_dir/mkinstalldirs\"; then\n-    mkdir_p='$(mkinstalldirs)'\n-  else\n-    mkdir_p='$(install_sh) -d'\n-  fi\n-fi\n-AC_SUBST([mkdir_p])])\n+[AC_PREREQ([2.60])dnl\n+AC_REQUIRE([AC_PROG_MKDIR_P])dnl\n+dnl Automake 1.8 to 1.9.6 used to define mkdir_p.  We now use MKDIR_P,\n+dnl while keeping a definition of mkdir_p for backward compatibility.\n+dnl @MKDIR_P@ is magic: AC_OUTPUT adjusts its value for each Makefile.\n+dnl However we cannot define mkdir_p as $(MKDIR_P) for the sake of\n+dnl Makefile.ins that do not define MKDIR_P, so we do our own\n+dnl adjustment using top_builddir (which is defined more often than\n+dnl MKDIR_P).\n+AC_SUBST([mkdir_p], [\"$MKDIR_P\"])dnl\n+case $mkdir_p in\n+  [[\\\\/$]]* | ?:[[\\\\/]]*) ;;\n+  */*) mkdir_p=\"\\$(top_builddir)/$mkdir_p\" ;;\n+esac\n+])\n \n # Helper functions for option handling.                     -*- Autoconf -*-\n \n@@ -481,9 +478,21 @@ dnl Don't test for $cross_compiling = yes, because it might be `maybe'.\n if test \"$cross_compiling\" != no; then\n   AC_CHECK_TOOL([STRIP], [strip], :)\n fi\n-INSTALL_STRIP_PROGRAM=\"\\${SHELL} \\$(install_sh) -c -s\"\n+INSTALL_STRIP_PROGRAM=\"\\$(install_sh) -c -s\"\n AC_SUBST([INSTALL_STRIP_PROGRAM])])\n \n+# Copyright (C) 2006  Free Software Foundation, Inc.\n+#\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# _AM_SUBST_NOTMAKE(VARIABLE)\n+# ---------------------------\n+# Prevent Automake from outputing VARIABLE = @VARIABLE@ in Makefile.in.\n+# This macro is traced by Automake.\n+AC_DEFUN([_AM_SUBST_NOTMAKE])\n+\n # Check how to create a tarball.                            -*- Autoconf -*-\n \n # Copyright (C) 2004, 2005  Free Software Foundation, Inc."}, {"sha": "bfa9fa0532edae7e7f669ba5fcc928c93de9c0a1", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 30867, "deletions": 36480, "changes": 67347, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c"}, {"sha": "926ceec70a85172d8f1009a2921bd2b14c38a1ad", "filename": "libstdc++-v3/doc/Makefile.am", "status": "modified", "additions": 190, "deletions": 8, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2FMakefile.am?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -23,28 +23,210 @@\n \n include $(top_srcdir)/fragment.am\n \n-# These rules are messy, but are hella worth it.\n-doc-doxygen-html:\n+\n+# Doxygen configuration\n+# Assumes doxygen, graphviz (with dot) installed\n+doc_doxygen_script=${top_srcdir}/scripts/run_doxygen\n+doc-html-doxygen:\n \t-(srcdir=`cd ${top_srcdir}; ${PWD_COMMAND}`; \\\n \t  builddir=`cd ..; ${PWD_COMMAND}`; \\\n-\t  ${SHELL} ${top_srcdir}/doc/doxygen/run_doxygen \\\n+\t  ${SHELL} ${doc_doxygen_script} \\\n \t  --host_alias=${host_alias} --mode=html $${srcdir} $${builddir})\n \n-doc-doxygen-man:\n+doc-man-doxygen:\n \t-(srcdir=`cd ${top_srcdir}; ${PWD_COMMAND}`; \\\n \t  builddir=`cd ..; ${PWD_COMMAND}`; \\\n-\t  ${SHELL} ${top_srcdir}/doc/doxygen/run_doxygen \\\n+\t  ${SHELL} ${doc_doxygen_script} \\\n \t  --host_alias=${host_alias} --mode=man $${srcdir} $${builddir})\n \n+doc-xml-doxygen:\n+\t-(srcdir=`cd ${top_srcdir}; ${PWD_COMMAND}`; \\\n+\t  builddir=`cd ..; ${PWD_COMMAND}`; \\\n+\t  ${SHELL} ${doc_doxygen_script} \\\n+\t  --host_alias=${host_alias} --mode=xml $${srcdir} $${builddir})\n+\n+doxygen_xmldir = ${glibcxx_builddir}/doc/doxygen/xml\n+doc-xml-doxygen-single: doc-xml-doxygen\n+\t@echo \"Generating doxygen xml single file...\"\n+\t$(XSLTPROC) ${doxygen_xmldir}/combine.xslt ${doxygen_xmldir}/spine.xml > ${doxygen_xmldir}/all.xml;\n+\n+\n+# Performance doc and graph configuration.\n+# Assumes pychart, beautiful soup installed.\n # Generates the plots and graphs for performance testing.\n doc_performance_script=${top_srcdir}/scripts/make_graphs.py\n-doc-performance:\n+doc-html-performance:\n \t-@(chmod + ${doc_performance_script}; \\\n \t${doc_performance_script} ${top_srcdir} \\\n \t${glibcxx_builddir}/testsuite \\\n \t${top_srcdir}/testsuite/data/make_graph_htmls.xml \\\n \t${top_srcdir}/testsuite/data/make_graph_test_infos.xml local g++)\n \n+\n+# Docbook configuration.\n+# Assumes\n+# libxslt\n+# docbook-style-xsl\n+# emacs-nxml-mode \n+# xmlto passivetex\n+xml_srcdir = ${glibcxx_srcdir}/doc/xml\n+xml_sources = \\\n+\t${xml_srcdir}/spine.xml \\\n+\t${xml_srcdir}/authors.xml \\\n+\t${xml_srcdir}/manual/spine.xml \\\n+\t${xml_srcdir}/manual/abi.xml \\\n+\t${xml_srcdir}/manual/algorithms.xml \\\n+\t${xml_srcdir}/manual/allocator.xml \\\n+\t${xml_srcdir}/manual/auto_ptr.xml \\\n+\t${xml_srcdir}/manual/backwards_compatibility.xml \\\n+\t${xml_srcdir}/manual/bitmap_allocator.xml \\\n+\t${xml_srcdir}/manual/build.xml \\\n+\t${xml_srcdir}/manual/build_hacking.xml \\\n+\t${xml_srcdir}/manual/codecvt.xml \\\n+\t${xml_srcdir}/manual/concurrency.xml \\\n+\t${xml_srcdir}/manual/configure.xml \\\n+\t${xml_srcdir}/manual/containers.xml \\\n+\t${xml_srcdir}/manual/ctype.xml \\\n+\t${xml_srcdir}/manual/debug_mode.xml \\\n+\t${xml_srcdir}/manual/debug.xml \\\n+\t${xml_srcdir}/manual/diagnostics.xml \\\n+\t${xml_srcdir}/manual/evolution.xml \\\n+\t${xml_srcdir}/manual/extensions.xml \\\n+\t${xml_srcdir}/manual/internals.xml \\\n+\t${xml_srcdir}/manual/intro.xml \\\n+\t${xml_srcdir}/manual/io.xml \\\n+\t${xml_srcdir}/manual/iterators.xml \\\n+\t${xml_srcdir}/manual/locale.xml \\\n+\t${xml_srcdir}/manual/localization.xml \\\n+\t${xml_srcdir}/manual/messages.xml \\\n+\t${xml_srcdir}/manual/mt_allocator.xml \\\n+\t${xml_srcdir}/manual/numerics.xml \\\n+\t${xml_srcdir}/manual/parallel_mode.xml \\\n+\t${xml_srcdir}/manual/internals.xml \\\n+\t${xml_srcdir}/manual/shared_ptr.xml \\\n+\t${xml_srcdir}/manual/spine.xml \\\n+\t${xml_srcdir}/manual/status_cxx1998.xml \\\n+\t${xml_srcdir}/manual/status_cxx200x.xml \\\n+\t${xml_srcdir}/manual/status_cxxtr1.xml \\\n+\t${xml_srcdir}/manual/strings.xml \\\n+\t${xml_srcdir}/manual/support.xml \\\n+\t${xml_srcdir}/manual/test.xml \\\n+\t${xml_srcdir}/manual/using.xml \\\n+\t${xml_srcdir}/manual/utilities.xml \\\n+\t${xml_srcdir}/manual/appendix_free.xml \\\n+\t${xml_srcdir}/manual/appendix_contributing.xml \\\n+\t${xml_srcdir}/manual/appendix_porting.xml \\\n+\t${xml_srcdir}/api.xml \\\n+\t${xml_srcdir}/faq.xml\n+\n+xml_sources_extra = \\\n+\t${xml_srcdir}/gnu/fdl-1.2.xml \\\n+\t${xml_srcdir}/gnu/gpl-2.0.xml\n+\n+xml_noinst = \\\n+\t${xml_srcdir}/book.txml \\\n+\t${xml_srcdir}/chapter.txml \\\n+\t${xml_srcdir}/class.txml\n+\n+\n+XSLTPROC       = xsltproc\n+XSLTPROC_FLAGS = --nonet --xinclude\n+XSL_STYLE_DIR = /usr/share/sgml/docbook/xsl-stylesheets\n+XSL_FO_STYLE = $(XSL_STYLE_DIR)/fo/docbook.xsl\n+XSL_HTML_STYLE = $(XSL_STYLE_DIR)/xhtml/chunk.xsl\n+#XSL_HTML_SINGLE_STYLE = $(XSL_STYLE_DIR)/xhtml/onechunk.xsl\n+XSL_HTML_SINGLE_STYLE = $(XSL_STYLE_DIR)/xhtml/docbook.xsl\n+\n+${glibcxx_builddir}/doc/html:\n+\tmkdir ${glibcxx_builddir}/doc/html\n+\n+${glibcxx_builddir}/doc/pdf:\n+\tmkdir ${glibcxx_builddir}/doc/pdf\n+\n+${glibcxx_builddir}/doc/fo:\n+\tmkdir ${glibcxx_builddir}/doc/fo\n+\n+${glibcxx_builddir}/doc/xml:\n+\tmkdir ${glibcxx_builddir}/doc/xml\n+\n+# Validate existing XML structure.\n+XMLLINT = xmllint\n+#LINT_FLAGS = --debug --nonet --xinclude --nsclean --postvalid --nowarning \n+#LINT_FLAGS = --noblanks --noout --xinclude --postvalid --noent\n+LINT_FLAGS = --postvalid --debug --xinclude --noent --noblanks  --nonet --noout\n+VALID_FLAGS = --dtdvalid http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\n+XMLLINT_FLAGS = $(LINT_FLAGS) $(VALID_FLAGS)\n+doc-xml-validate: $(xml_sources)\n+\t@echo \"Generating XML validation log...\"\n+\t$(XMLLINT) $(XMLLINT_FLAGS) ${top_srcdir}/doc/xml/spine.xml\n+\n+doc-xml-single: $(xml_sources) ${glibcxx_builddir}/doc/xml\n+\t@echo \"Generating XML single...\"\n+\t$(XMLLINT) --xinclude --noent --noblanks \\\n+\t-o ${glibcxx_builddir}/doc/xml/spine-single.xml \\\n+\t${top_srcdir}/doc/xml/spine.xml\n+\n+# HTML, index plus chapters\n+doc-html: $(xml_sources) ${glibcxx_builddir}/doc/html\n+\t@echo \"Generating html files...\"\n+\t$(XSLTPROC) $(XSLTPROC_FLAGS) -o ${glibcxx_builddir}/doc/html/ \\\n+\t$(XSL_HTML_STYLE) ${top_srcdir}/doc/xml/spine.xml\n+\n+# HTML, all one page\n+doc-html-single: $(xml_sources) ${glibcxx_builddir}/doc/html\n+\t@echo \"Generating html single file...\"\n+\t$(XSLTPROC) $(XSLTPROC_FLAGS) -o ${glibcxx_builddir}/doc/html/ \\\n+\t$(XSL_HTML_SINGLE_STYLE) ${top_srcdir}/doc/xml/spine.xml\n+\n+# FO\n+doc-fo: $(xml_sources) ${glibcxx_builddir}/doc/fo\n+\t@echo \"Generating FO files...\"\n+\t$(XSLTPROC) $(XSLTPROC_FLAGS) -o ${glibcxx_builddir}/doc/fo/spine.fo \\\n+\t$(XSL_FO_STYLE) ${top_srcdir}/doc/xml/spine.xml\n+\n+# PDF\n+# Points to current best xml to PDF generation process.\n+doc-pdf: doc-pdf-xmlto\n+\n+# PDF 1\n+# fop\n+FOP = fop\n+FOP_FLAGS = -d -r\n+doc-pdf-fop-xml: $(xml_sources) ${glibcxx_builddir}/doc/pdf \n+\t@echo \"Generating pdf fop files from xml...\"\n+\t$(FOP) $(FOP_FLAGS) -xml ${top_srcdir}/doc/xml/spine.xml \\\n+\t-xsl $(XSL_FO_STYLE) -pdf ${glibcxx_builddir}/doc/pdf/spine.pdf\n+\n+doc-pdf-fop-fo: $(xml_sources) ${glibcxx_builddir}/doc/pdf doc-fo\n+\t@echo \"Generating pdf fop files from fo...\"\n+\t$(FOP) $(FOP_FLAGS) -fo ${glibcxx_builddir}/doc/fo/spine.fo \\\n+\t-pdf ${glibcxx_builddir}/doc/pdf/spine.pdf\n+\n+# PDF 2\n+# xmlto\n+XML2PDF = xmlto\n+XML2PDF_FLAGS = -v pdf --skip-validation -o pdf\n+doc-pdf-xmlto: $(xml_sources) ${glibcxx_builddir}/doc/pdf\n+\t@echo \"Generating pdf xmlto files...\"\n+\t$(XML2PDF) $(XML2PDF_FLAGS) ${top_srcdir}/doc/xml/spine.xml\n+\n+# PDF 3\n+# xmlroff\n+XMLROFF = xmlroff\n+XMLROFF_FLAGS = --format=pdf --backend=cairo --warn=1 --debug=1 --continue\n+doc-pdf-xmlroff: $(xml_sources) doc-fo\n+\t@echo \"Generating pdf xmlroff files...\"\n+\t$(XMLROFF) $(XMLROFF_FLAGS) ${glibcxx_builddir}/doc/fo/spine.fo\n+\n+# PDF 4\n+# prince\n+PRINCE = prince\n+PRINCE_FLAGS = --log prince.log -o pdf/spine.pdf\n+doc-pdf-prince: $(xml_sources) ${glibcxx_builddir}/doc/pdf\n+\t@echo \"Generating pdf prince files...\"\n+\t$(PRINCE) $(PRINCE_FLAGS) ${top_srcdir}/doc/xml/spine.xml\n+\n+\n # No install-pdf, install-html support in automake yet\n install-pdf:\n install-html:\n@@ -55,8 +237,8 @@ install-html:\n \tdoc-doxygen-html doc-doxygen-man doc-performance\n \n # By adding these files here, automake will remove them for 'make clean'\n-CLEANFILES = \n+CLEANFILES = *.log\n \n # To remove directories.\n clean-local:\n-\trm -rf man doxygen\n+\trm -rf man html pdf fo doxygen xml"}, {"sha": "75e838059c4c9debe8ea44de8729ac08ea09b160", "filename": "libstdc++-v3/doc/Makefile.in", "status": "modified", "additions": 230, "deletions": 75, "changes": 305, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2FMakefile.in?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -1,8 +1,8 @@\n-# Makefile.in generated by automake 1.9.6 from Makefile.am.\n+# Makefile.in generated by automake 1.10 from Makefile.am.\n # @configure_input@\n \n # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n-# 2003, 2004, 2005  Free Software Foundation, Inc.\n+# 2003, 2004, 2005, 2006  Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n@@ -13,15 +13,11 @@\n # PARTICULAR PURPOSE.\n \n @SET_MAKE@\n-srcdir = @srcdir@\n-top_srcdir = @top_srcdir@\n VPATH = @srcdir@\n pkgdatadir = $(datadir)/@PACKAGE@\n pkglibdir = $(libdir)/@PACKAGE@\n pkgincludedir = $(includedir)/@PACKAGE@\n-top_builddir = ..\n am__cd = CDPATH=\"$${ZSH_VERSION+.}$(PATH_SEPARATOR)\" && cd\n-INSTALL = @INSTALL@\n install_sh_DATA = $(install_sh) -c -m 644\n install_sh_PROGRAM = $(install_sh) -c\n install_sh_SCRIPT = $(install_sh) -c\n@@ -110,42 +106,13 @@ ECHO_C = @ECHO_C@\n ECHO_N = @ECHO_N@\n ECHO_T = @ECHO_T@\n EGREP = @EGREP@\n-ENABLE_PARALLEL_FALSE = @ENABLE_PARALLEL_FALSE@\n-ENABLE_PARALLEL_TRUE = @ENABLE_PARALLEL_TRUE@\n-ENABLE_SYMVERS_DARWIN_FALSE = @ENABLE_SYMVERS_DARWIN_FALSE@\n-ENABLE_SYMVERS_DARWIN_TRUE = @ENABLE_SYMVERS_DARWIN_TRUE@\n-ENABLE_SYMVERS_FALSE = @ENABLE_SYMVERS_FALSE@\n-ENABLE_SYMVERS_GNU_FALSE = @ENABLE_SYMVERS_GNU_FALSE@\n-ENABLE_SYMVERS_GNU_NAMESPACE_FALSE = @ENABLE_SYMVERS_GNU_NAMESPACE_FALSE@\n-ENABLE_SYMVERS_GNU_NAMESPACE_TRUE = @ENABLE_SYMVERS_GNU_NAMESPACE_TRUE@\n-ENABLE_SYMVERS_GNU_TRUE = @ENABLE_SYMVERS_GNU_TRUE@\n-ENABLE_SYMVERS_TRUE = @ENABLE_SYMVERS_TRUE@\n-ENABLE_VISIBILITY_FALSE = @ENABLE_VISIBILITY_FALSE@\n-ENABLE_VISIBILITY_TRUE = @ENABLE_VISIBILITY_TRUE@\n ERROR_CONSTANTS_SRCDIR = @ERROR_CONSTANTS_SRCDIR@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n FGREP = @FGREP@\n-GLIBCXX_BUILD_DEBUG_FALSE = @GLIBCXX_BUILD_DEBUG_FALSE@\n-GLIBCXX_BUILD_DEBUG_TRUE = @GLIBCXX_BUILD_DEBUG_TRUE@\n-GLIBCXX_BUILD_PCH_FALSE = @GLIBCXX_BUILD_PCH_FALSE@\n-GLIBCXX_BUILD_PCH_TRUE = @GLIBCXX_BUILD_PCH_TRUE@\n-GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE = @GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE@\n-GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE = @GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE@\n-GLIBCXX_C_HEADERS_C_FALSE = @GLIBCXX_C_HEADERS_C_FALSE@\n-GLIBCXX_C_HEADERS_C_GLOBAL_FALSE = @GLIBCXX_C_HEADERS_C_GLOBAL_FALSE@\n-GLIBCXX_C_HEADERS_C_GLOBAL_TRUE = @GLIBCXX_C_HEADERS_C_GLOBAL_TRUE@\n-GLIBCXX_C_HEADERS_C_STD_FALSE = @GLIBCXX_C_HEADERS_C_STD_FALSE@\n-GLIBCXX_C_HEADERS_C_STD_TRUE = @GLIBCXX_C_HEADERS_C_STD_TRUE@\n-GLIBCXX_C_HEADERS_C_TRUE = @GLIBCXX_C_HEADERS_C_TRUE@\n-GLIBCXX_C_HEADERS_EXTRA_FALSE = @GLIBCXX_C_HEADERS_EXTRA_FALSE@\n-GLIBCXX_C_HEADERS_EXTRA_TRUE = @GLIBCXX_C_HEADERS_EXTRA_TRUE@\n-GLIBCXX_HOSTED_FALSE = @GLIBCXX_HOSTED_FALSE@\n-GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n-GLIBCXX_LDBL_COMPAT_FALSE = @GLIBCXX_LDBL_COMPAT_FALSE@\n-GLIBCXX_LDBL_COMPAT_TRUE = @GLIBCXX_LDBL_COMPAT_TRUE@\n GREP = @GREP@\n+INSTALL = @INSTALL@\n INSTALL_DATA = @INSTALL_DATA@\n INSTALL_PROGRAM = @INSTALL_PROGRAM@\n INSTALL_SCRIPT = @INSTALL_SCRIPT@\n@@ -162,9 +129,8 @@ LN_S = @LN_S@\n LTLIBICONV = @LTLIBICONV@\n LTLIBOBJS = @LTLIBOBJS@\n MAINT = @MAINT@\n-MAINTAINER_MODE_FALSE = @MAINTAINER_MODE_FALSE@\n-MAINTAINER_MODE_TRUE = @MAINTAINER_MODE_TRUE@\n MAKEINFO = @MAKEINFO@\n+MKDIR_P = @MKDIR_P@\n NM = @NM@\n OBJEXT = @OBJEXT@\n OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n@@ -190,13 +156,13 @@ USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n-ac_ct_AR = @ac_ct_AR@\n-ac_ct_AS = @ac_ct_AS@\n+abs_builddir = @abs_builddir@\n+abs_srcdir = @abs_srcdir@\n+abs_top_builddir = @abs_top_builddir@\n+abs_top_srcdir = @abs_top_srcdir@\n ac_ct_CC = @ac_ct_CC@\n ac_ct_CXX = @ac_ct_CXX@\n ac_ct_DUMPBIN = @ac_ct_DUMPBIN@\n-ac_ct_RANLIB = @ac_ct_RANLIB@\n-ac_ct_STRIP = @ac_ct_STRIP@\n am__leading_dot = @am__leading_dot@\n am__tar = @am__tar@\n am__untar = @am__untar@\n@@ -207,8 +173,12 @@ build_alias = @build_alias@\n build_cpu = @build_cpu@\n build_os = @build_os@\n build_vendor = @build_vendor@\n+builddir = @builddir@\n check_msgfmt = @check_msgfmt@\n datadir = @datadir@\n+datarootdir = @datarootdir@\n+docdir = @docdir@\n+dvidir = @dvidir@\n enable_shared = @enable_shared@\n enable_static = @enable_static@\n exec_prefix = @exec_prefix@\n@@ -228,29 +198,36 @@ host_alias = @host_alias@\n host_cpu = @host_cpu@\n host_os = @host_os@\n host_vendor = @host_vendor@\n+htmldir = @htmldir@\n includedir = @includedir@\n infodir = @infodir@\n install_sh = @install_sh@\n libdir = @libdir@\n libexecdir = @libexecdir@\n libtool_VERSION = @libtool_VERSION@\n+localedir = @localedir@\n localstatedir = @localstatedir@\n lt_ECHO = @lt_ECHO@\n mandir = @mandir@\n mkdir_p = @mkdir_p@\n multi_basedir = @multi_basedir@\n oldincludedir = @oldincludedir@\n+pdfdir = @pdfdir@\n port_specific_symbol_files = @port_specific_symbol_files@\n prefix = @prefix@\n program_transform_name = @program_transform_name@\n+psdir = @psdir@\n sbindir = @sbindir@\n sharedstatedir = @sharedstatedir@\n+srcdir = @srcdir@\n sysconfdir = @sysconfdir@\n target = @target@\n target_alias = @target_alias@\n target_cpu = @target_cpu@\n target_os = @target_os@\n target_vendor = @target_vendor@\n+top_builddir = @top_builddir@\n+top_srcdir = @top_srcdir@\n toplevel_srcdir = @toplevel_srcdir@\n \n # May be used by various substitution variables.\n@@ -274,11 +251,119 @@ WARN_CXXFLAGS = \\\n # -I/-D flags to pass when compiling.\n AM_CPPFLAGS = $(GLIBCXX_INCLUDES)\n \n+# Doxygen configuration\n+# Assumes doxygen, graphviz (with dot) installed\n+doc_doxygen_script = ${top_srcdir}/scripts/run_doxygen\n+doxygen_xmldir = ${glibcxx_builddir}/doc/doxygen/xml\n+\n+# Performance doc and graph configuration.\n+# Assumes pychart, beautiful soup installed.\n # Generates the plots and graphs for performance testing.\n doc_performance_script = ${top_srcdir}/scripts/make_graphs.py\n \n+# Docbook configuration.\n+# Assumes\n+# libxslt\n+# docbook-style-xsl\n+# emacs-nxml-mode \n+# xmlto passivetex\n+xml_srcdir = ${glibcxx_srcdir}/doc/xml\n+xml_sources = \\\n+\t${xml_srcdir}/spine.xml \\\n+\t${xml_srcdir}/authors.xml \\\n+\t${xml_srcdir}/manual/spine.xml \\\n+\t${xml_srcdir}/manual/abi.xml \\\n+\t${xml_srcdir}/manual/algorithms.xml \\\n+\t${xml_srcdir}/manual/allocator.xml \\\n+\t${xml_srcdir}/manual/auto_ptr.xml \\\n+\t${xml_srcdir}/manual/backwards_compatibility.xml \\\n+\t${xml_srcdir}/manual/bitmap_allocator.xml \\\n+\t${xml_srcdir}/manual/build.xml \\\n+\t${xml_srcdir}/manual/build_hacking.xml \\\n+\t${xml_srcdir}/manual/codecvt.xml \\\n+\t${xml_srcdir}/manual/concurrency.xml \\\n+\t${xml_srcdir}/manual/configure.xml \\\n+\t${xml_srcdir}/manual/containers.xml \\\n+\t${xml_srcdir}/manual/ctype.xml \\\n+\t${xml_srcdir}/manual/debug_mode.xml \\\n+\t${xml_srcdir}/manual/debug.xml \\\n+\t${xml_srcdir}/manual/diagnostics.xml \\\n+\t${xml_srcdir}/manual/evolution.xml \\\n+\t${xml_srcdir}/manual/extensions.xml \\\n+\t${xml_srcdir}/manual/internals.xml \\\n+\t${xml_srcdir}/manual/intro.xml \\\n+\t${xml_srcdir}/manual/io.xml \\\n+\t${xml_srcdir}/manual/iterators.xml \\\n+\t${xml_srcdir}/manual/locale.xml \\\n+\t${xml_srcdir}/manual/localization.xml \\\n+\t${xml_srcdir}/manual/messages.xml \\\n+\t${xml_srcdir}/manual/mt_allocator.xml \\\n+\t${xml_srcdir}/manual/numerics.xml \\\n+\t${xml_srcdir}/manual/parallel_mode.xml \\\n+\t${xml_srcdir}/manual/internals.xml \\\n+\t${xml_srcdir}/manual/shared_ptr.xml \\\n+\t${xml_srcdir}/manual/spine.xml \\\n+\t${xml_srcdir}/manual/status_cxx1998.xml \\\n+\t${xml_srcdir}/manual/status_cxx200x.xml \\\n+\t${xml_srcdir}/manual/status_cxxtr1.xml \\\n+\t${xml_srcdir}/manual/strings.xml \\\n+\t${xml_srcdir}/manual/support.xml \\\n+\t${xml_srcdir}/manual/test.xml \\\n+\t${xml_srcdir}/manual/using.xml \\\n+\t${xml_srcdir}/manual/utilities.xml \\\n+\t${xml_srcdir}/manual/appendix_free.xml \\\n+\t${xml_srcdir}/manual/appendix_contributing.xml \\\n+\t${xml_srcdir}/manual/appendix_porting.xml \\\n+\t${xml_srcdir}/api.xml \\\n+\t${xml_srcdir}/faq.xml\n+\n+xml_sources_extra = \\\n+\t${xml_srcdir}/gnu/fdl-1.2.xml \\\n+\t${xml_srcdir}/gnu/gpl-2.0.xml\n+\n+xml_noinst = \\\n+\t${xml_srcdir}/book.txml \\\n+\t${xml_srcdir}/chapter.txml \\\n+\t${xml_srcdir}/class.txml\n+\n+XSLTPROC = xsltproc\n+XSLTPROC_FLAGS = --nonet --xinclude\n+XSL_STYLE_DIR = /usr/share/sgml/docbook/xsl-stylesheets\n+XSL_FO_STYLE = $(XSL_STYLE_DIR)/fo/docbook.xsl\n+XSL_HTML_STYLE = $(XSL_STYLE_DIR)/xhtml/chunk.xsl\n+#XSL_HTML_SINGLE_STYLE = $(XSL_STYLE_DIR)/xhtml/onechunk.xsl\n+XSL_HTML_SINGLE_STYLE = $(XSL_STYLE_DIR)/xhtml/docbook.xsl\n+\n+# Validate existing XML structure.\n+XMLLINT = xmllint\n+#LINT_FLAGS = --debug --nonet --xinclude --nsclean --postvalid --nowarning \n+#LINT_FLAGS = --noblanks --noout --xinclude --postvalid --noent\n+LINT_FLAGS = --postvalid --debug --xinclude --noent --noblanks  --nonet --noout\n+VALID_FLAGS = --dtdvalid http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\n+XMLLINT_FLAGS = $(LINT_FLAGS) $(VALID_FLAGS)\n+\n+# PDF 1\n+# fop\n+FOP = fop\n+FOP_FLAGS = -d -r\n+\n+# PDF 2\n+# xmlto\n+XML2PDF = xmlto\n+XML2PDF_FLAGS = -v pdf --skip-validation -o pdf\n+\n+# PDF 3\n+# xmlroff\n+XMLROFF = xmlroff\n+XMLROFF_FLAGS = --format=pdf --backend=cairo --warn=1 --debug=1 --continue\n+\n+# PDF 4\n+# prince\n+PRINCE = prince\n+PRINCE_FLAGS = --log prince.log -o pdf/spine.pdf\n+\n # By adding these files here, automake will remove them for 'make clean'\n-CLEANFILES = \n+CLEANFILES = *.log\n all: all-am\n \n .SUFFIXES:\n@@ -317,10 +402,6 @@ mostlyclean-libtool:\n \n clean-libtool:\n \t-rm -rf .libs _libs\n-\n-distclean-libtool:\n-\t-rm -f libtool\n-uninstall-info-am:\n tags: TAGS\n TAGS:\n \n@@ -329,23 +410,21 @@ CTAGS:\n \n \n distdir: $(DISTFILES)\n-\t$(mkdir_p) $(distdir)/..\n-\t@srcdirstrip=`echo \"$(srcdir)\" | sed 's|.|.|g'`; \\\n-\ttopsrcdirstrip=`echo \"$(top_srcdir)\" | sed 's|.|.|g'`; \\\n-\tlist='$(DISTFILES)'; for file in $$list; do \\\n-\t  case $$file in \\\n-\t    $(srcdir)/*) file=`echo \"$$file\" | sed \"s|^$$srcdirstrip/||\"`;; \\\n-\t    $(top_srcdir)/*) file=`echo \"$$file\" | sed \"s|^$$topsrcdirstrip/|$(top_builddir)/|\"`;; \\\n-\t  esac; \\\n+\t@srcdirstrip=`echo \"$(srcdir)\" | sed 's/[].[^$$\\\\*]/\\\\\\\\&/g'`; \\\n+\ttopsrcdirstrip=`echo \"$(top_srcdir)\" | sed 's/[].[^$$\\\\*]/\\\\\\\\&/g'`; \\\n+\tlist='$(DISTFILES)'; \\\n+\t  dist_files=`for file in $$list; do echo $$file; done | \\\n+\t  sed -e \"s|^$$srcdirstrip/||;t\" \\\n+\t      -e \"s|^$$topsrcdirstrip/|$(top_builddir)/|;t\"`; \\\n+\tcase $$dist_files in \\\n+\t  */*) $(MKDIR_P) `echo \"$$dist_files\" | \\\n+\t\t\t   sed '/\\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \\\n+\t\t\t   sort -u` ;; \\\n+\tesac; \\\n+\tfor file in $$dist_files; do \\\n \t  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \\\n-\t  dir=`echo \"$$file\" | sed -e 's,/[^/]*$$,,'`; \\\n-\t  if test \"$$dir\" != \"$$file\" && test \"$$dir\" != \".\"; then \\\n-\t    dir=\"/$$dir\"; \\\n-\t    $(mkdir_p) \"$(distdir)$$dir\"; \\\n-\t  else \\\n-\t    dir=''; \\\n-\t  fi; \\\n \t  if test -d $$d/$$file; then \\\n+\t    dir=`echo \"/$$file\" | sed -e 's,/[^/]*$$,,'`; \\\n \t    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \\\n \t      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \\\n \t    fi; \\\n@@ -391,7 +470,7 @@ clean-am: clean-generic clean-libtool clean-local mostlyclean-am\n \n distclean: distclean-am\n \t-rm -f Makefile\n-distclean-am: clean-am distclean-generic distclean-libtool\n+distclean-am: clean-am distclean-generic\n \n dvi: dvi-am\n \n@@ -405,12 +484,16 @@ info-am:\n \n install-data-am:\n \n+install-dvi: install-dvi-am\n+\n install-exec-am:\n \n install-info: install-info-am\n \n install-man:\n \n+install-ps: install-ps-am\n+\n installcheck-am:\n \n maintainer-clean: maintainer-clean-am\n@@ -429,38 +512,110 @@ ps: ps-am\n \n ps-am:\n \n-uninstall-am: uninstall-info-am\n+uninstall-am:\n+\n+.MAKE: install-am install-strip\n \n .PHONY: all all-am check check-am clean clean-generic clean-libtool \\\n \tclean-local distclean distclean-generic distclean-libtool \\\n \tdistdir dvi dvi-am html html-am info info-am install \\\n-\tinstall-am install-data install-data-am install-exec \\\n-\tinstall-exec-am install-info install-info-am install-man \\\n+\tinstall-am install-data install-data-am install-dvi \\\n+\tinstall-dvi-am install-exec install-exec-am install-html \\\n+\tinstall-html-am install-info install-info-am install-man \\\n+\tinstall-pdf install-pdf-am install-ps install-ps-am \\\n \tinstall-strip installcheck installcheck-am installdirs \\\n \tmaintainer-clean maintainer-clean-generic mostlyclean \\\n \tmostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \\\n-\tuninstall uninstall-am uninstall-info-am\n+\tuninstall uninstall-am\n \n-\n-# These rules are messy, but are hella worth it.\n-doc-doxygen-html:\n+doc-html-doxygen:\n \t-(srcdir=`cd ${top_srcdir}; ${PWD_COMMAND}`; \\\n \t  builddir=`cd ..; ${PWD_COMMAND}`; \\\n-\t  ${SHELL} ${top_srcdir}/doc/doxygen/run_doxygen \\\n+\t  ${SHELL} ${doc_doxygen_script} \\\n \t  --host_alias=${host_alias} --mode=html $${srcdir} $${builddir})\n \n-doc-doxygen-man:\n+doc-man-doxygen:\n \t-(srcdir=`cd ${top_srcdir}; ${PWD_COMMAND}`; \\\n \t  builddir=`cd ..; ${PWD_COMMAND}`; \\\n-\t  ${SHELL} ${top_srcdir}/doc/doxygen/run_doxygen \\\n+\t  ${SHELL} ${doc_doxygen_script} \\\n \t  --host_alias=${host_alias} --mode=man $${srcdir} $${builddir})\n-doc-performance:\n+\n+doc-xml-doxygen:\n+\t-(srcdir=`cd ${top_srcdir}; ${PWD_COMMAND}`; \\\n+\t  builddir=`cd ..; ${PWD_COMMAND}`; \\\n+\t  ${SHELL} ${doc_doxygen_script} \\\n+\t  --host_alias=${host_alias} --mode=xml $${srcdir} $${builddir})\n+doc-xml-doxygen-single: doc-xml-doxygen\n+\t@echo \"Generating doxygen xml single file...\"\n+\t$(XSLTPROC) ${doxygen_xmldir}/combine.xslt ${doxygen_xmldir}/spine.xml > ${doxygen_xmldir}/all.xml;\n+doc-html-performance:\n \t-@(chmod + ${doc_performance_script}; \\\n \t${doc_performance_script} ${top_srcdir} \\\n \t${glibcxx_builddir}/testsuite \\\n \t${top_srcdir}/testsuite/data/make_graph_htmls.xml \\\n \t${top_srcdir}/testsuite/data/make_graph_test_infos.xml local g++)\n \n+${glibcxx_builddir}/doc/html:\n+\tmkdir ${glibcxx_builddir}/doc/html\n+\n+${glibcxx_builddir}/doc/pdf:\n+\tmkdir ${glibcxx_builddir}/doc/pdf\n+\n+${glibcxx_builddir}/doc/fo:\n+\tmkdir ${glibcxx_builddir}/doc/fo\n+\n+${glibcxx_builddir}/doc/xml:\n+\tmkdir ${glibcxx_builddir}/doc/xml\n+doc-xml-validate: $(xml_sources)\n+\t@echo \"Generating XML validation log...\"\n+\t$(XMLLINT) $(XMLLINT_FLAGS) ${top_srcdir}/doc/xml/spine.xml\n+\n+doc-xml-single: $(xml_sources) ${glibcxx_builddir}/doc/xml\n+\t@echo \"Generating XML single...\"\n+\t$(XMLLINT) --xinclude --noent --noblanks \\\n+\t-o ${glibcxx_builddir}/doc/xml/spine-single.xml \\\n+\t${top_srcdir}/doc/xml/spine.xml\n+\n+# HTML, index plus chapters\n+doc-html: $(xml_sources) ${glibcxx_builddir}/doc/html\n+\t@echo \"Generating html files...\"\n+\t$(XSLTPROC) $(XSLTPROC_FLAGS) -o ${glibcxx_builddir}/doc/html/ \\\n+\t$(XSL_HTML_STYLE) ${top_srcdir}/doc/xml/spine.xml\n+\n+# HTML, all one page\n+doc-html-single: $(xml_sources) ${glibcxx_builddir}/doc/html\n+\t@echo \"Generating html single file...\"\n+\t$(XSLTPROC) $(XSLTPROC_FLAGS) -o ${glibcxx_builddir}/doc/html/ \\\n+\t$(XSL_HTML_SINGLE_STYLE) ${top_srcdir}/doc/xml/spine.xml\n+\n+# FO\n+doc-fo: $(xml_sources) ${glibcxx_builddir}/doc/fo\n+\t@echo \"Generating FO files...\"\n+\t$(XSLTPROC) $(XSLTPROC_FLAGS) -o ${glibcxx_builddir}/doc/fo/spine.fo \\\n+\t$(XSL_FO_STYLE) ${top_srcdir}/doc/xml/spine.xml\n+\n+# PDF\n+# Points to current best xml to PDF generation process.\n+doc-pdf: doc-pdf-xmlto\n+doc-pdf-fop-xml: $(xml_sources) ${glibcxx_builddir}/doc/pdf \n+\t@echo \"Generating pdf fop files from xml...\"\n+\t$(FOP) $(FOP_FLAGS) -xml ${top_srcdir}/doc/xml/spine.xml \\\n+\t-xsl $(XSL_FO_STYLE) -pdf ${glibcxx_builddir}/doc/pdf/spine.pdf\n+\n+doc-pdf-fop-fo: $(xml_sources) ${glibcxx_builddir}/doc/pdf doc-fo\n+\t@echo \"Generating pdf fop files from fo...\"\n+\t$(FOP) $(FOP_FLAGS) -fo ${glibcxx_builddir}/doc/fo/spine.fo \\\n+\t-pdf ${glibcxx_builddir}/doc/pdf/spine.pdf\n+doc-pdf-xmlto: $(xml_sources) ${glibcxx_builddir}/doc/pdf\n+\t@echo \"Generating pdf xmlto files...\"\n+\t$(XML2PDF) $(XML2PDF_FLAGS) ${top_srcdir}/doc/xml/spine.xml\n+doc-pdf-xmlroff: $(xml_sources) doc-fo\n+\t@echo \"Generating pdf xmlroff files...\"\n+\t$(XMLROFF) $(XMLROFF_FLAGS) ${glibcxx_builddir}/doc/fo/spine.fo\n+doc-pdf-prince: $(xml_sources) ${glibcxx_builddir}/doc/pdf\n+\t@echo \"Generating pdf prince files...\"\n+\t$(PRINCE) $(PRINCE_FLAGS) ${top_srcdir}/doc/xml/spine.xml\n+\n # No install-pdf, install-html support in automake yet\n install-pdf:\n install-html:\n@@ -472,7 +627,7 @@ install-html:\n \n # To remove directories.\n clean-local:\n-\trm -rf man doxygen\n+\trm -rf man html pdf fo doxygen xml\n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded.\n .NOEXPORT:"}, {"sha": "309ab9ce07c39dcc96e768288e96f77fc90a7455", "filename": "libstdc++-v3/doc/doxygen/guide.html", "status": "removed", "additions": 0, "deletions": 111, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a9ddca7abcc5bf6ec2d0d895c778b8abcbedf5/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fguide.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a9ddca7abcc5bf6ec2d0d895c778b8abcbedf5/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fguide.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fguide.html?ref=71a9ddca7abcc5bf6ec2d0d895c778b8abcbedf5", "patch": "@@ -1,111 +0,0 @@\n-<!DOCTYPE html\n-          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n-          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n-  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n-  <title>Build and Writing Guide for libstdc++ Doxygen</title>\n-  <link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\">\n-</head>\n-\n-<body bgcolor=\"#ffffff\">\n-\n-<h1>libstdc++ Source Documentation</h1>\n-\n-<p>This file is docs/doxygen/guide.html in the libstdc++ source tree.  It\n-   is not included in the generated pages (no real point to doing that).\n-</p>\n-\n-<ul>\n- <li><a href=\"#creating\">Creating the pages</a></li>\n- <li><a href=\"#writing\">Writing the markup</a></li>\n-</ul>\n-\n-<hr />\n-\n-<a name=\"creating\"><h2>Creating the pages</h2></a>\n-<p>The Makefile rules <code>'make doc-doxygen-html'</code>,\n-   and <code>'make doc-doxygen-man'</code> in the libstdc++ build\n-   directory generate the HTML docs, the and the man pages,\n-   respectively.  Prerequisite tools are Bash 2.x,\n-   <a href=\"http://www.doxygen.org/\">\n-   <!-- snagged from the generated page -->\n-   <img src=\"doxygen.png\" alt=\"Doxygen\" align=center border=0 width=110 height=53>\n-   </a>, a working version of <code>g++</code> somewhere in the PATH, and\n-   the <a href=\"http://www.gnu.org/software/coreutils/\">GNU coreutils</a>.\n-\n-   In addition, to generate the pretty pictures and hierarchy graphs, the \n-   <a href=\n-   \"http://www.research.att.com/sw/tools/graphviz/download.html\">Graphviz</a>\n-   package will need to be installed.\n-   (g++ is used to build a program which manipulates man pages.  GNU versions\n-   of find, xargs, and possibly sed and grep are used, just because the GNU\n-   versions make things very easy.)\n-</p>\n-\n-<p>Careful observers will see that the Makefile rules simply call a script\n-   from the source tree, <code>run_doxygen</code>, which does the actual work\n-   of running Doxygen and then (most importantly) massaging the output files.\n-   If for some reason you prefer to not go through the Makefile, you can call\n-   this script directly.  (Start by passing <code>'--help'</code>.)\n-</p>\n-\n-<p>If you wish to tweak the Doxygen settings, do so by editing\n-   <code>docs/doxygen/user.cfg.in</code>.  Notes to v3-hackers are written in\n-   triple-# comments.\n-</p>\n-\n-<a name=\"writing\"><h2>Writing the markup</h2></a>\n-<p>In general, libstdc++ files should be formatted according to the GNU\n-   C++ Coding Standard rules found in the file\n-   <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/C++STYLE\">C++STYLE</a>.\n-   Before any doxygen-specific formatting tweaks are made, please try to make\n-   sure that the initial formatting is sound.\n-</p>\n-\n-<p>Adding Doxygen markup to a file (informally called \"doxygenating\") is very\n-   simple.  The Doxygen manual can be found\n-   <a href=\"http://www.stack.nl/~dimitri/doxygen/download.html#latestman\">here</a>.\n-   We try to use a very-recent version of Doxygen.\n-</p>\n-\n-<h3>Doxygen style guide</h3>\n-<p>[incomplete and constantly evolving]</p>\n-\n-<p>For classes, use deque/vector/list and std::pair as examples.  For\n-   functions, see their member functions, and the free functions in\n-   <code>stl_algobase.h</code>.  Member functions of other container-like\n-   types should read similarly to these member functions.\n-</p>\n-\n-<p>These points accompany the first list in section 3.1 of the Doxygen manual:\n-</p>\n-<ol>\n- <li>Use the Javadoc style...</li>\n- <li>...not the Qt style.  The intermediate *'s are preferred.</li>\n- <li>Use the triple-slash style only for one-line comments (the \"brief\" mode).\n-     Very recent versions of Doxygen permit full-mode comments in triple-slash\n-     blocks, but the formatting still comes out wonky.</li>\n- <li>This is disgusting.  Don't do this.</li>\n-</ol>\n-\n-<p>Use the @-style of commands, not the !-style.  Please be careful about\n-   whitespace in your markup comments.  Most of the time it doesn't matter;\n-   doxygen absorbs most whitespace, and both HTML and *roff are agnostic about\n-   whitespace.  However, in &lt;pre&gt; blocks and @code/@endcode sections,\n-   spacing can have \"interesting\" effects.\n-</p>\n-\n-<p>Use either kind of grouping, as appropriate.  <code>doxygroups.cc</code>\n-   exists for this purpose.  See <code>stl_iterator.h</code> for a good\n-   example of the \"other\" kind of grouping.\n-</p>\n-\n-<p>Please use markup tags like @p and @a when referring to things such as the\n-   names of function parameters.  Use @e for emphasis when necessary.  Use @c\n-   to refer to other standard names.  (Examples of all these abound in the\n-   present code.)\n-</p>\n-\n-</body>\n-</html>"}, {"sha": "8895eabe358a14164fa8e74625b4ff754b7a307c", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -1108,7 +1108,7 @@ MAN_LINKS              = NO\n # generate an XML file that captures the structure of \n # the code including all documentation.\n \n-GENERATE_XML           = NO\n+GENERATE_XML           = @do_xml@\n \n # The XML_OUTPUT tag is used to specify where the XML pages will be put. \n # If a relative path is entered the value of OUTPUT_DIRECTORY will be \n@@ -1120,13 +1120,15 @@ XML_OUTPUT             = xml\n # which can be used by a validating XML parser to check the \n # syntax of the XML files.\n \n+#XML_SCHEMA             = \n XML_SCHEMA             = \n \n # The XML_DTD tag can be used to specify an XML DTD, \n # which can be used by a validating XML parser to check the \n # syntax of the XML files.\n \n XML_DTD                = \n+#XML_DTD                = http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\n \n # If the XML_PROGRAMLISTING tag is set to YES Doxygen will \n # dump the program listings (including syntax highlighting "}, {"sha": "bd38e8392cc79b343daef034e307a5403b73f7d5", "filename": "libstdc++-v3/doc/xml/api.xml", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fapi.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fapi.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fapi.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,94 @@\n+<?xml version='1.0'?>\n+<!DOCTYPE book PUBLIC \"-//OASIS//DTD DocBook XML V4.5//EN\" \n+ \"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\" \n+[ ]>\n+\n+<book>\n+\n+<article id=\"api\" xreflabel=\"API\">\n+<?dbhtml filename=\"api.html\"?>\n+\n+<articleinfo>\n+  <title>API and Source Level Documentation</title>\n+  <copyright>\n+    <year>\n+      2008\n+    </year>\n+    <holder>\n+      <ulink url=\"http://fsf.org\">FSF\n+      </ulink>\n+    </holder>\n+  </copyright>\n+  <legalnotice>\n+    <para>\n+      <ulink url=\"17_intro/license.html\">License \n+      </ulink>\n+    </para>\n+  </legalnotice>\n+</articleinfo>\n+ \n+<para>\n+The GNU C++ library sources have been specially formatted so that with the\n+proper invocation of another tool (Doxygen), a set of HTML pages\n+are generated from the sources files themselves. The resultant\n+documentation is referred to as Source Level Documentation, and is\n+useful for examining the signatures of public member functions for\n+the library classes, finding out what is in a particular include\n+file, looking at inheritance diagrams, etc.\n+</para>\n+\n+<para>\n+The source-level documentation for the most recent releases can be\n+viewed online:\n+</para>\n+\n+<itemizedlist>\n+  <listitem>\n+    <para>\n+      <ulink url=\"libstdc++-html-USERS-3.4/index.html\">for the 3.4 release\n+      </ulink>\n+    </para>\n+  </listitem>\n+  <listitem>\n+    <para>\n+      <ulink url=\"libstdc++-html-USERS-4.1/index.html\">for the 4.1 release\n+      </ulink>\n+    </para>\n+  </listitem>\n+  <listitem>\n+    <para>\n+      <ulink url=\"libstdc++-html-USERS-4.2/index.html\">for the 4.2 release\n+      </ulink>\n+    </para>\n+  </listitem>\n+  <listitem>\n+    <para>\n+      <ulink url=\"latest-doxygen/index.html\">&quot;the latest collection&quot;\n+      </ulink>\n+      (For the main development tree; see the date on the first page.)\n+    </para>\n+  </listitem>\n+</itemizedlist>\n+\n+<para>\n+This generated HTML collection, as above, is also available for download in the libstdc++ snapshots directory at\n+   <literal>&lt;URL:ftp://gcc.gnu.org/pub/gcc/libstdc++/doxygen/&gt;</literal>.\n+   You will almost certainly need to use one of the\n+   <ulink url=\"http://gcc.gnu.org/mirrors.html\">mirror sites</ulink> to download\n+   the tarball.  After unpacking, simply load libstdc++-html-*/index.html\n+   into a browser.\n+</para>\n+\n+<para>\n+Documentation for older releases is available for download only, not\n+online viewing.\n+</para>\n+\n+<para>\n+In addition, an initial set of man pages are also available in the\n+same place as the HTML collections.  Start with C++Intro(3).\n+</para>\n+\n+</article>\n+\n+</book>"}, {"sha": "dfcdf24d1b9cc9ceb62316010f25e5af4931d1ec", "filename": "libstdc++-v3/doc/xml/authors.xml", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fauthors.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fauthors.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fauthors.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,174 @@\n+<authorgroup>\n+\n+<!--\n+  <author>\n+    <firstname>Benjamin</firstname>\n+    <surname>Kosnik</surname>\n+\n+    <affiliation>\n+      <shortaffil>Red Hat</shortaffil>\n+      <orgname>Red Hat, Inc.</orgname>\n+      <address>\n+\t<email>libstdc++@gcc.gnu.org</email>\n+      </address>\n+    </affiliation>\n+\n+    <authorblurb>\n+      <para>\n+      </para>\n+    </authorblurb>\n+  </author>\n+-->\n+\n+  <author>\n+    <firstname>Paolo</firstname>\n+    <surname>Carlini</surname>\n+\n+    <authorblurb>\n+      <para>\n+\tTR1, LWG Active, Closed, Defects lists.\n+      </para>\n+    </authorblurb>\n+  </author>\n+\n+  <author>\n+    <firstname>Phil</firstname>\n+    <surname>Edwards</surname>\n+\n+    <authorblurb>\n+      <para>\n+\tOriginating author, started HOWTO and FAQ, worked on sections\n+\tDemangling, Macros, Strings, Iterators, Backwards\n+\tCompatibility, SGI Extensions, Configure, Build, Install.\n+      </para>\n+    </authorblurb>\n+  </author>\n+\n+  <author>\n+    <firstname>Doug</firstname>\n+    <surname>Gregor</surname>\n+\n+    <authorblurb>\n+      <para>\n+\tDebug Mode, TR1 function objects\n+      </para>\n+    </authorblurb>\n+  </author>\n+\n+  <author>\n+    <firstname>Benjamin</firstname>\n+    <surname>Kosnik</surname>\n+\n+    <authorblurb>\n+      <para>\n+\tAllocators, ABI, API evolution and deprecation history,\n+\tBackwards Compatibility, Thread, Debug Support, Locales,\n+\tFacets, Parallel Mode, Headers, Namespaces, Construction and\n+\tStructure, DocBook conversion and layout.\n+      </para>\n+    </authorblurb>\n+  </author>\n+\n+\n+  <author>\n+    <firstname>Dhruv</firstname>\n+    <surname>Matani</surname>\n+\n+    <authorblurb>\n+      <para>\n+\tbitmap_allocator\n+      </para>\n+    </authorblurb>\n+  </author>\n+\n+  <author>\n+    <firstname>Jason</firstname>\n+    <surname>Merrill</surname>\n+\n+    <authorblurb>\n+      <para>\n+\tLicense, __verbose_terminate_handler\n+      </para>\n+    </authorblurb>\n+  </author>\n+\n+  <author>\n+    <firstname>Mark</firstname>\n+    <surname>Mitchell</surname>\n+\n+    <authorblurb>\n+      <para>\n+\tPorting\n+      </para>\n+    </authorblurb>\n+  </author>\n+\n+  <author>\n+    <firstname>Nathan</firstname>\n+    <surname>Myers</surname>\n+\n+    <authorblurb>\n+      <para>\n+\tReferenced counted string, C++1998 implementation status.\n+      </para>\n+    </authorblurb>\n+  </author>\n+\n+  <author>\n+    <firstname>Felix</firstname>\n+    <surname>Natter</surname>\n+\n+    <authorblurb>\n+      <para>\n+\tNamespace composition, Backwards Compatibility.\n+      </para>\n+    </authorblurb>\n+  </author>\n+\n+\n+  <author>\n+    <firstname>Stefan</firstname>\n+    <surname>Olsson</surname>\n+\n+    <authorblurb>\n+      <para>\n+\tmt_allocator\n+      </para>\n+    </authorblurb>\n+  </author>\n+\n+  <author>\n+    <firstname>Johannes</firstname>\n+    <surname>Singler</surname>\n+\n+    <authorblurb>\n+      <para>\n+\tParallel mode\n+      </para>\n+    </authorblurb>\n+  </author>\n+\n+  <author>\n+    <firstname>Ami</firstname>\n+    <surname>Tavory</surname>\n+\n+    <authorblurb>\n+      <para>\n+\tPolicy Based Datastructures, Associative Containers, Unordered\n+\tContainers.\n+      </para>\n+    </authorblurb>\n+  </author>\n+\n+  <author>\n+    <firstname>Jonathan</firstname>\n+    <surname>Wakely</surname>\n+\n+    <authorblurb>\n+      <para>\n+\tshared_ptr, markup editing and styling\n+      </para>\n+    </authorblurb>\n+  </author>\n+\n+</authorgroup>"}, {"sha": "990ca3bea20f867b25184b1fc4f2e49b4d385496", "filename": "libstdc++-v3/doc/xml/book.txml", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fbook.txml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fbook.txml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fbook.txml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,33 @@\n+<?xml version='1.0'?>\n+<!DOCTYPE book PUBLIC \"-//OASIS//DTD DocBook XML V4.5//EN\" \n+ \"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\" \n+[ ]>\n+\n+<book id=\"api\" xreflabel=\"Source Level Documentation\">\n+<title>Source Level Documentation</title>\n+ \n+<bookinfo>\n+  <copyright>\n+    <year>2007</year>\n+    <holder>\n+      <ulink url=\"fsf.org\">FSF\n+      </ulink>\n+    </holder>\n+  </copyright>\n+  <legalnotice>\n+    <para>\n+      <ulink url=\"17_intro/license.html\">License \n+      </ulink>\n+    </para>\n+  </legalnotice>\n+</bookinfo>\n+\n+<part>\n+<title></title>\n+  <chapter>\n+    <title></title>\n+    <para></para>\n+  </chapter>\n+</part>\n+\n+</book>"}, {"sha": "9cf5b74e8555d1fcb20f0e7bb7d2cd0c7600f142", "filename": "libstdc++-v3/doc/xml/chapter.txml", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fchapter.txml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fchapter.txml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fchapter.txml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,54 @@\n+<?xml version='1.0'?>\n+<!DOCTYPE chapter PUBLIC \"-//OASIS//DTD DocBook XML V4.5//EN\" \n+ \"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\" \n+[ ]>\n+\n+<chapter id=\"manual.intro\" xreflabel=\"Introduction\">\n+ \n+<chapterinfo>\n+  <keywordset>\n+    <keyword>\n+      ISO C++\n+    </keyword>\n+    <keyword>\n+      library\n+    </keyword>\n+  </keywordset>\n+</chapterinfo>\n+\n+<title>Introduction</title>\n+\n+<sect1 id=\"manual.intro.status\" xreflabel=\"Status\">\n+  <title>Status</title>\n+  <para>\n+    The GNU C++ ...\n+  </para>\n+</sect1>\n+\n+<sect1 id=\"manual.intro.setup\" xreflabel=\"Setup\">\n+  <title>Setup</title>\n+  <para>\n+    The GNU C++ ...\n+  </para>\n+  <sect2 id=\"manual.intro.setup.next1\" xreflabel=\"Next1\">\n+    <title>Next1</title>\n+    <para>\n+      The GNU C++ ...\n+    </para>\n+  </sect2>\n+  <sect2 id=\"manual.intro.setup.next2\" xreflabel=\"Next2\">\n+    <title>Next2</title>\n+    <para>\n+      The GNU C++ ...\n+    </para>\n+  </sect2>  \n+</sect1>\n+\n+<sect1 id=\"manual.intro.using\" xreflabel=\"Using\">\n+  <title>Using</title>\n+  <para>\n+    The GNU C++ ...\n+  </para>\n+</sect1>\n+\n+</chapter>"}, {"sha": "4e628f8c7c694428a2dc770c677d56497c4cf148", "filename": "libstdc++-v3/doc/xml/class.txml", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fclass.txml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fclass.txml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fclass.txml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,154 @@\n+<sect1 id=\"manual.util.memory.allocator\" xreflabel=\"allocator\">\n+<?dbhtml filename=\"allocator.html\"?>\n+ \n+<sect1info>\n+  <keywordset>\n+    <keyword>\n+      ISO C++\n+    </keyword>\n+    <keyword>\n+      allocator\n+    </keyword>\n+  </keywordset>\n+</sect1info>\n+\n+<title>allocator</title>\n+\n+<para>\n+</para>\n+\n+<sect2 id=\"allocator.req\" xreflabel=\"allocator.req\">\n+<title>Requirements</title>\n+\n+  <para>\n+  </para>\n+  <itemizedlist>\n+    <listitem>\n+      <para>\n+      </para>\n+    </listitem>\n+    <listitem>\n+      <para>\n+      </para>\n+    </listitem>\n+  </itemizedlist>\n+\n+  <para> \n+  </para>\n+</sect2>\n+\n+<sect2 id=\"allocator.design_issues\" xreflabel=\"allocator.design_issues\">\n+<title>Design Issues</title>\n+\n+  <para>\n+  </para>\n+\n+  <para> \n+  </para>\n+</sect2>\n+\n+<sect2 id=\"allocator.impl\" xreflabel=\"allocator.impl\">\n+<title>Implementation</title>\n+\n+  <sect3>\n+    <title>Interface Design</title>\n+\n+    <para>\n+    </para>\n+    \n+    <para> \n+    </para>\n+  </sect3>\n+\n+  <sect3>\n+    <title>Selecting Default Allocation Strategy</title>\n+\n+    <para> \n+    </para>\n+\n+   <orderedlist>\n+     <listitem>\n+     </listitem>\n+\n+     <listitem>\n+     </listitem>\n+\n+     <listitem>\n+     </listitem>\n+   </orderedlist>\n+  </sect3>\n+\n+  <sect3>\n+    <title>Disabling Memory Caching</title>\n+\n+    <para> \n+    </para>\n+\n+   <para> \n+   </para>\n+  </sect3>\n+</sect2>\n+\n+<sect2 id=\"allocator.using\" xreflabel=\"allocator.using\">\n+<title>Using</title>\n+\n+   <para>\n+   </para>\n+</sect2>\n+\n+<sect2 id=\"allocator.custom\" xreflabel=\"allocator.custom\">\n+<title>Custom Allocators</title>\n+\n+  <para> \n+  </para>\n+\n+   <para> \n+   </para>\n+</sect2>\n+\n+<bibliography id=\"allocator.biblio\" xreflabel=\"allocator.biblio\">\n+<title>Bibliography</title>\n+\n+<!-- \n+  <biblioentry>\n+    <abbrev>\n+    </abbrev>\n+\n+    <title>\n+    </title>\n+\n+    <editor>\n+      <firstname></firstname>\n+      <surname></surname>\n+    </editor>\n+\n+    <author>\n+      <surname></surname>\n+      <firstname></firstname>\n+    </author>\n+\n+    <copyright>\n+      <year></year>\n+      <holder></holder>\n+    </copyright>\n+    <pagenums></pagenums>\n+\n+    <publisher>\n+      <publishername>\n+      </publishername>\n+    </publisher>\n+\n+    <biblioid>\n+      <ulink url=\"\">\n+      </ulink>\n+    </biblioid>\n+\n+  </biblioentry> \n+-->\n+\n+  <biblioentry>\n+  </biblioentry>\n+\n+</bibliography>\n+\n+</sect1>\n\\ No newline at end of file"}, {"sha": "629d1ec12a64cbb1e91af5bccd193832e8ebb794", "filename": "libstdc++-v3/doc/xml/faq.xml", "status": "added", "additions": 1254, "deletions": 0, "changes": 1254, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Ffaq.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Ffaq.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Ffaq.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,1254 @@\n+<?xml version='1.0'?>\n+<!DOCTYPE book PUBLIC \"-//OASIS//DTD DocBook XML V4.5//EN\" \n+ \"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\" \n+[ ]>\n+\n+<book>\n+\n+<article id=\"faq\" xreflabel=\"Frequently Asked Questions\">\n+<?dbhtml filename=\"faq.html\"?>\n+ \n+<articleinfo>\n+  <title>Frequently Asked Questions</title>\n+  <copyright>\n+    <year>\n+      2008\n+    </year>\n+    <holder>\n+      <ulink url=\"http://fsf.org\">FSF</ulink>\n+    </holder>\n+  </copyright>\n+</articleinfo>\n+\n+<!-- FAQ starts here -->\n+<qandaset>\n+\n+<!-- General Information -->\n+<qandadiv id=\"faq.info\" xreflabel=\"General Information\">\n+<title>General Information</title>\n+\n+<qandaentry id=\"faq.what\">\n+  <question id=\"faq.what.q\">\n+    <para>\n+      What is libstdc++?\n+    </para>\n+  </question>\n+  <answer id=\"faq.what.a\">\n+    <para>\n+     The GNU Standard C++ Library v3 is an ongoing project to\n+     implement the ISO 14882 Standard C++ library as described in\n+     chapters 17 through 27 and annex D.  For those who want to see\n+     exactly how far the project has come, or just want the latest\n+     bleeding-edge code, the up-to-date source is available over\n+     anonymous SVN, and can even be browsed over\n+     the <ulink url=\"http://gcc.gnu.org/svn.html\">web</ulink>.\n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.why\">\n+  <question id=\"q-why\">\n+    <para>\n+      Why should I use libstdc++?\n+    </para>\n+  </question>\n+  <answer id=\"a-why\">\n+    <para>\n+    The completion of the ISO C++ standardization gave the C++\n+    community a powerful set of reuseable tools in the form of the C++\n+    Standard Library.  However, all existing C++ implementations are\n+    (as the Draft Standard used to say) <quote>incomplet and\n+    incorrekt</quote>, and many suffer from limitations of the compilers\n+    that use them.\n+    </para> \n+    <para>\n+    The GNU compiler collection\n+    (<command>gcc</command>, <command>g++</command>, etc) is widely\n+    considered to be one of the leading compilers in the world.  Its\n+    development is overseen by the\n+    <ulink url=\"http://gcc.gnu.org/\">GCC team</ulink>.  All of\n+    the rapid development and near-legendary\n+    <ulink url=\"http://gcc.gnu.org/buildstat.html\">portability</ulink>\n+    that are the hallmarks of an open-source project are being\n+    applied to libstdc++.\n+    </para> \n+    <para>\n+    That means that all of the Standard classes and functions will be\n+    freely available and fully compliant. (Such as\n+    <classname>string</classname>,\n+    <classname>vector&lt;&gt;</classname>, iostreams, and algorithms.)\n+    Programmers will no longer need to <quote>roll their own</quote>\n+    nor be worried about platform-specific incompatibilities.\n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.who\">\n+  <question id=\"q-who\">\n+    <para>\n+      Who's in charge of it?\n+    </para>\n+  </question>\n+  <answer id=\"a-who\">\n+    <para>\n+     The libstdc++ project is contributed to by several developers\n+     all over the world, in the same way as GCC or Linux.\n+     Benjamin Kosnik, Gabriel Dos Reis, Phil Edwards, Ulrich Drepper,\n+     Loren James Rittle, and Paolo Carlini are the lead maintainers of\n+     the SVN archive.\n+    </para>\n+    <para>\n+    Development and discussion is held on the libstdc++ mailing\n+    list.  Subscribing to the list, or searching the list\n+    archives, is open to everyone.  You can read instructions for\n+    doing so on the <ulink url=\"http://gcc.gnu.org/libstdc++/\">homepage</ulink>.\n+    If you have questions, ideas, code, or are just curious, sign up!\n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.when\">\n+  <question id=\"q-when\">\n+    <para>\n+      When is libstdc++ going to be finished?\n+    </para>\n+  </question>\n+  <answer id=\"a-when\">\n+    <para>\n+    Nathan Myers gave the best of all possible answers, responding to\n+    a Usenet article asking this question: <emphasis>Sooner, if you\n+    help.</emphasis>\n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.how\">\n+  <question id=\"q-how\">\n+    <para>\n+      How do I contribute to the effort?\n+    </para>\n+  </question>\n+  <answer id=\"a-how\">\n+    <para>\n+    Here is <ulink url=\"../17_intro/contribute.html\">a page devoted to\n+    this topic</ulink>. Subscribing to the mailing list (see above, or\n+    the homepage) is a very good idea if you have something to\n+    contribute, or if you have spare time and want to\n+    help. Contributions don't have to be in the form of source code;\n+    anybody who is willing to help write documentation, for example,\n+    or has found a bug in code that we all thought was working and is\n+    willing to provide details, is more than welcome!\n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.whereis_old\">\n+  <question id=\"q-whereis_old\">\n+    <para>\n+      What happened to the older libg++? I need that!\n+    </para>\n+  </question>\n+  <answer id=\"a-whereis_old\">\n+    <para>\n+    The most recent libg++ README states that libg++ is no longer\n+    being actively maintained.  It should not be used for new\n+    projects, and is only being kicked along to support older code.\n+    </para> \n+    <para>\n+    More information in the <link linkend=\"manual.appendix.porting.backwards\">backwards compatibility documentation</link>\n+    </para>\n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.more_questions\">\n+  <question id=\"q-more_questions\">\n+    <para>\n+      What if I have more questions?\n+    </para>\n+  </question>\n+  <answer id=\"a-more_questions\">\n+    <para>\n+    If you have read the README file, and your question remains\n+    unanswered, then just ask the mailing list. At present, you do not\n+    need to be subscribed to the list to send a message to it.  More\n+    information is available on the homepage (including how to browse\n+    the list archives); to send a message to the list,\n+    use <email>libstdc++@gcc.gnu.org</email>.\n+    </para> \n+\n+    <para> \n+    If you have a question that you think should be included\n+    here, or if you have a question <emphasis>about</emphasis> a question/answer\n+    here, please send email to the libstdc++ mailing list, as above.\n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+</qandadiv>\n+\n+<!-- License -->\n+<qandadiv id=\"faq.license\" xreflabel=\"License QA\">\n+<title>License</title>\n+\n+<qandaentry id=\"faq.license.what\">\n+  <question id=\"q-license.what\">\n+    <para>\n+      What are the license terms for libstdc++?\n+    </para>\n+  </question>\n+  <answer id=\"a-license.what\">\n+    <para>\n+    See <link linkend=\"manual.intro.status.license\">our license description</link>\n+    for these and related questions.\n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.license.any_program\">\n+  <question id=\"q-license.any_program\">\n+    <para>\n+      So any program which uses libstdc++ falls under the GPL?\n+    </para>\n+  </question>\n+  <answer id=\"a-license.any_program\">\n+    <para>\n+     No. The special exception permits use of the library in\n+     proprietary applications.\n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+\n+<qandaentry id=\"faq.license.lgpl\">\n+  <question id=\"q-license.lgpl\">\n+    <para>\n+      How is that different from the GNU {Lesser,Library} GPL?\n+    </para>\n+  </question>\n+  <answer id=\"a-license.lgpl\">\n+    <para>\n+      The LGPL requires that users be able to replace the LGPL code with a\n+     modified version; this is trivial if the library in question is a C\n+     shared library.  But there's no way to make that work with C++, where\n+     much of the library consists of inline functions and templates, which\n+     are expanded inside the code that uses the library.  So to allow people\n+     to replace the library code, someone using the library would have to\n+     distribute their own source, rendering the LGPL equivalent to the GPL.\n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.license.what_restrictions\">\n+  <question id=\"q-license.what_restrictions\">\n+    <para>\n+      I see. So, what restrictions are there on programs that use the library?\n+    </para>\n+  </question>\n+  <answer id=\"a-license.what_restrictions\">\n+    <para>\n+      None.  We encourage such programs to be released as open source,\n+     but we won't punish you or sue you if you choose otherwise.\n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+</qandadiv>\n+\n+<!-- Installation -->\n+<qandadiv id=\"faq.installation\" xreflabel=\"Installation\">\n+<title>Installation</title>\n+\n+<qandaentry id=\"faq.how_to_install\">\n+  <question id=\"q-how_to_install\">\n+    <para>How do I install libstdc++?\n+    </para>\n+  </question>\n+  <answer id=\"a-how_to_install\">\n+    <para>\n+    Often libstdc++ comes pre-installed as an integral part of many\n+    existing Linux and Unix systems, as well as many embedded\n+    development tools. It may be necessary to install extra\n+    development packages to get the headers, or the documentation, or\n+    the source: please consult your vendor for details.\n+    </para> \n+    <para> \n+    To build and install from the GNU GCC sources, please consult the \n+    <ulink url=\"http://gcc.gnu.org/onlinedocs/libstdc++/install.html\">install\n+    documentation</ulink> for detailed\n+    instructions. You may wish to browse those files ahead\n+    of time to get a feel for what's required.\n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.how_to_get_sources\">\n+  <question id=\"q-how_to_get_sources\">\n+    <para>How does one get current libstdc++ sources?\n+    </para>\n+  </question>\n+  <answer id=\"a-how_to_get_sources\">\n+    <para>\n+    Libstdc++ sources for all official releases can be obtained as\n+    part of the GCC sources, available from various sites and\n+    mirrors. A full <ulink url=\"http://gcc.gnu.org/mirrors.html\">list of \n+    download sites</ulink> is provided on the main GCC site.\n+    </para>\n+    <para>\n+    Current libstdc++ sources can always be checked out of the main\n+    GCC source repository using the appropriate version control\n+    tool. At this time, that tool\n+    is <application>Subversion</application>.\n+    </para>\n+    <para>\n+    <application>Subversion</application>, or <acronym>SVN</acronym>, is\n+    one of several revision control packages.  It was selected for GNU\n+    projects because it's free (speech), free (beer), and very high\n+    quality.  The <ulink url=\"http://subversion.tigris.org\"> Subversion\n+    home page</ulink> has a better description.\n+    </para>\n+    <para>\n+    The <quote>anonymous client checkout</quote> feature of SVN is\n+    similar to anonymous FTP in that it allows anyone to retrieve\n+    the latest libstdc++ sources.\n+    </para> \n+    <para>\n+    For more information\n+    see <ulink url=\"http://gcc.gnu.org/svn.html\"><acronym>SVN</acronym>\n+    details</ulink>.\n+    </para>\n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.how_to_test\">\n+  <question id=\"q-how_to_test\">\n+    <para>How do I know if it works?\n+    </para>\n+  </question>\n+  <answer id=\"a-how_to_test\">\n+    <para>\n+    Libstdc++ comes with its own validation testsuite, which includes\n+    conformance testing, regression testing, ABI testing, and\n+    performance testing. Please consult the \n+    <ulink url=\"http://gcc.gnu.org/install/test.html\">testing\n+    documentation</ulink> for more details.\n+    </para> \n+    <para>\n+    If you find bugs in the testsuite programs themselves, or if you\n+    think of a new test program that should be added to the suite,\n+    <emphasis>please</emphasis> write up your idea and send it to the list!\n+    </para>\n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.how_to_set_paths\">\n+  <question id=\"q-how_to_set_paths\">\n+    <para>How do I insure that the dynamically linked library will be found?\n+    </para>\n+  </question>\n+  <answer id=\"a-how_to_set_paths\">\n+    <para>\n+    Depending on your platform and library version, the error message might\n+    be similar to one of the following:\n+    </para> \n+\n+    <screen>\n+    ./a.out: error while loading shared libraries: libstdc++.so.6: cannot open shared object file: No such file or directory\n+\n+    /usr/libexec/ld-elf.so.1: Shared object \"libstdc++.so.6\" not found\n+    </screen>\n+\n+    <para>\n+    This doesn't mean that the shared library isn't installed, only\n+    that the dynamic linker can't find it. When a dynamically-linked\n+    executable is run the linker finds and loads the required shared\n+    libraries by searching a pre-configured list of directories. If\n+    the directory where you've installed libstdc++ is not in this list\n+    then the libraries won't be found. The simplest way to fix this is\n+    to use the <literal>LD_LIBRARY_PATH</literal> environment variable,\n+    which is a colon-separated list of directories in which the linker\n+    will search for shared libraries:\n+    </para> \n+\n+    <screen>\n+    LD_LIBRARY_PATH=${prefix}/lib:$LD_LIBRARY_PATH\n+    export LD_LIBRARY_PATH\n+    </screen>\n+\n+    <para>\n+    The exact environment variable to use will depend on your\n+    platform, e.g. DYLD_LIBRARY_PATH for Darwin,\n+    LD_LIBRARY_PATH_32/LD_LIBRARY_PATH_64 for Solaris 32-/64-bit,\n+    LD_LIBRARYN32_PATH/LD_LIBRARY64_PATH for Irix N32/64-bit ABIs and\n+    SHLIB_PATH for HP-UX.\n+    </para>\n+    <para>\n+    See the man pages for <command>ld</command>, <command>ldd</command>\n+    and <command>ldconfig</command> for more information. The dynamic\n+    linker has different names on different platforms but the man page\n+    is usually called something such as <filename>ld.so/rtld/dld.so</filename>.\n+    </para>\n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.what_is_libsupcxx\">\n+  <question id=\"q-what_is_libsupcxx\">\n+    <para>\n+      What's libsupc++?\n+    </para>\n+  </question>\n+  <answer id=\"a-what_is_libsupcxx\">\n+    <para>\n+      If the only functions from <filename>libstdc++.a</filename>\n+      which you need are language support functions (those listed in\n+      <ulink url=\"../18_support/howto.html\">clause 18</ulink> of the\n+      standard, e.g., <function>new</function> and\n+      <function>delete</function>), then try linking against\n+      <filename>libsupc++.a</filename>, which is a subset of\n+      <filename>libstdc++.a</filename>.  (Using <command>gcc</command>\n+      instead of <command>g++</command> and explicitly linking in\n+      <filename>libsupc++.a</filename> via <literal>-lsupc++</literal>\n+      for the final link step will do it).  This library contains only\n+      those support routines, one per object file.  But if you are\n+      using anything from the rest of the library, such as IOStreams\n+      or vectors, then you'll still need pieces from\n+      <filename>libstdc++.a</filename>.\n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.size\">\n+  <question id=\"q-size\">\n+    <para>\n+      This library is HUGE!\n+    </para>\n+  </question>\n+  <answer id=\"a-size\">\n+    <para>\n+    Usually the size of libraries on disk isn't noticeable.  When a\n+    link editor (or simply <quote>linker</quote>) pulls things from a\n+    static archive library, only the necessary object files are copied\n+    into your executable, not the entire library.  Unfortunately, even\n+    if you only need a single function or variable from an object file,\n+    the entire object file is extracted.  (There's nothing unique to C++\n+    or libstdc++ about this; it's just common behavior, given here\n+    for background reasons.)\n+    </para>\n+    <para>\n+    Some of the object files which make up libstdc++.a are rather large.\n+    If you create a statically-linked executable with\n+    <literal>-static</literal>, those large object files are suddenly part\n+    of your executable.  Historically the best way around this was to\n+    only place a very few functions (often only a single one) in each\n+    source/object file; then extracting a single function is the same\n+    as extracting a single .o file.  For libstdc++ this is only\n+    possible to a certain extent; the object files in question contain\n+    template classes and template functions, pre-instantiated, and\n+    splitting those up causes severe maintenance headaches.\n+    </para> \n+    <para>\n+    On supported platforms, libstdc++ takes advantage of garbage\n+    collection in the GNU linker to get a result similar to separating\n+    each symbol into a separate source and object files. On these platforms,\n+    GNU ld can place each function and variable into its own\n+    section in a .o file.  The GNU linker can then perform garbage\n+    collection on unused sections; this reduces the situation to only\n+    copying needed functions into the executable, as before, but all\n+    happens automatically.\n+    </para>\n+  </answer>\n+</qandaentry>\n+\n+</qandadiv>\n+\n+\n+<!-- Platorm-Specific Issues -->\n+<qandadiv id=\"faq.platform-specific\" xreflabel=\"Platform-Specific Issues\">\n+<title>Platform-Specific Issues</title>\n+\n+<qandaentry id=\"faq.other_compilers\">\n+  <question id=\"q-other_compilers\">\n+    <para>\n+      Can libstdc++ be used with non-GNU compilers?\n+    </para>\n+  </question>\n+  <answer id=\"a-other_compilers\">\n+    <para>\n+    Perhaps.\n+    </para> \n+    <para>\n+    Since the goal of ISO Standardization is for all C++\n+    implementations to be able to share code, libstdc++ should be\n+    usable under any ISO-compliant compiler, at least in theory.\n+    </para> \n+    <para>\n+    However, the reality is that libstdc++ is targeted and optimized\n+    for GCC/g++. This means that often libstdc++ uses specific,\n+    non-standard features of g++ that are not present in older\n+    versions of proprietary compilers. It may take as much as a year or two\n+    after an official release of GCC that contains these features for\n+    proprietary tools support these constructs.\n+    </para>\n+    <para>\n+    In the near past, specific released versions of libstdc++ have\n+    been known to work with versions of the EDG C++ compiler, and\n+    vendor-specific proprietary C++ compilers such as the Intel ICC\n+    C++ compiler.\n+    </para> \n+\n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.solaris_long_long\">\n+  <question id=\"q-solaris_long_long\">\n+    <para>\n+      No 'long long' type on Solaris?\n+    </para>\n+  </question>\n+  <answer id=\"a-solaris_long_long\">\n+    <para>\n+    By default we try to support the C99 <type>long long</type> type.\n+    This requires that certain functions from your C library be present.\n+    </para> \n+    <para> \n+    Up through release 3.0.2 the platform-specific tests performed by\n+    libstdc++ were too general, resulting in a conservative approach\n+    to enabling the <type>long long</type> code paths. The most\n+    commonly reported platform affected was Solaris.\n+    </para> \n+    <para> \n+    This has been fixed for libstdc++ releases greater than 3.0.3.\n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.predefined\">\n+  <question id=\"q-predefined\">\n+    <para>\n+      <constant>_XOPEN_SOURCE</constant> and <constant>_GNU_SOURCE</constant> are always defined?\n+    </para>\n+  </question>\n+  <answer id=\"a-predefined\">\n+      <para>On Solaris, g++ (but not gcc) always defines the preprocessor\n+         macro <constant>_XOPEN_SOURCE</constant>.  On GNU/Linux, the same happens\n+         with <constant>_GNU_SOURCE</constant>.  (This is not an exhaustive list;\n+         other macros and other platforms are also affected.)\n+      </para>\n+      <para>These macros are typically used in C library headers, guarding new\n+         versions of functions from their older versions.  The C++ standard\n+         library includes the C standard library, but it requires the C90\n+         version, which for backwards-compatibility reasons is often not the\n+         default for many vendors.\n+      </para>\n+      <para>More to the point, the C++ standard requires behavior which is only\n+         available on certain platforms after certain symbols are defined.\n+         Usually the issue involves I/O-related typedefs.  In order to\n+         ensure correctness, the compiler simply predefines those symbols.\n+      </para>\n+      <para>Note that it's not enough to #define them only when the library is\n+         being built (during installation).  Since we don't have an 'export'\n+         keyword, much of the library exists as headers, which means that\n+         the symbols must also be defined as your programs are parsed and\n+         compiled.\n+      </para>\n+      <para>To see which symbols are defined, look for CPLUSPLUS_CPP_SPEC in\n+         the gcc config headers for your target (and try changing them to\n+         see what happens when building complicated code).  You can also run\n+         <command>g++ -E -dM - &lt; /dev/null&quot;</command> to display\n+         a list of predefined macros for any particular installation.\n+      </para>\n+      <para>This has been discussed on the mailing lists\n+         <ulink url=\"http://gcc.gnu.org/cgi-bin/htsearch?method=and&amp;format=builtin-long&amp;sort=score&amp;words=_XOPEN_SOURCE+Solaris\">quite a bit</ulink>.\n+      </para>\n+      <para>This method is something of a wart.  We'd like to find a cleaner\n+         solution, but nobody yet has contributed the time.\n+      </para>\n+\n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.darwin_ctype\">\n+  <question id=\"q-darwin_ctype\">\n+    <para>\n+      Mac OS X <filename class=\"headerfile\">ctype.h</filename> is broken! How can I fix it?\n+    </para>\n+  </question>\n+  <answer id=\"a-darwin_ctype\">\n+      <para>This is a long-standing bug in the OS X support.  Fortunately,\n+         the patch is quite simple, and well-known.\n+         <ulink url=\"http://gcc.gnu.org/ml/gcc/2002-03/msg00817.html\"> Here's a\n+         link to the solution</ulink>.\n+      </para>\n+\n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.threads_i386\">\n+  <question id=\"q-threads_i386\">\n+    <para>\n+      Threading is broken on i386?\n+    </para>\n+  </question>\n+  <answer id=\"a-threads_i386\">\n+    <para>\n+    </para> \n+      <para>Support for atomic integer operations is/was broken on i386\n+         platforms.  The assembly code accidentally used opcodes that are\n+         only available on the i486 and later.  So if you configured GCC\n+         to target, for example, i386-linux, but actually used the programs\n+         on an i686, then you would encounter no problems.  Only when\n+         actually running the code on a i386 will the problem appear.\n+      </para>\n+      <para>This is fixed in 3.2.2.\n+      </para>\n+\n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.atomic_mips\">\n+  <question id=\"q-atomic_mips\">\n+    <para>\n+      MIPS atomic operations\n+    </para>\n+  </question>\n+  <answer id=\"a-atomic_mips\">\n+    <para>\n+    The atomic locking routines for MIPS targets requires MIPS II\n+    and later.  A patch went in just after the 3.3 release to\n+    make mips* use the generic implementation instead.  You can also\n+    configure for mipsel-elf as a workaround.\n+    </para>\n+    <para>    \n+    The mips*-*-linux* port continues to use the MIPS II routines, and more\n+    work in this area is expected.\n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.linux_glibc\">\n+  <question id=\"q-linux_glibc\">\n+    <para>\n+      Recent GNU/Linux glibc required?\n+    </para>\n+  </question>\n+  <answer id=\"a-linux_glibc\">\n+      <para>When running on GNU/Linux, libstdc++ 3.2.1 (shared library version\n+         5.0.1) and later uses localization and formatting code from the system\n+         C library (glibc) version 2.2.5.  That version of glibc is over a\n+         year old and contains necessary bugfixes.  Many GNU/Linux distros make\n+         glibc version 2.3.x available now.\n+      </para>\n+      <para>The guideline is simple:  the more recent the C++ library, the\n+         more recent the C library.  (This is also documented in the main\n+         GCC installation instructions.)\n+      </para>\n+\n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.freebsd_wchar\">\n+  <question id=\"q-freebsd_wchar\">\n+    <para>\n+      Can't use wchar_t/wstring on FreeBSD\n+    </para>\n+  </question>\n+  <answer id=\"a-freebsd_wchar\">\n+    <para>\n+    Older versions of FreeBSD's C library do not have sufficient\n+    support for wide character functions, and as a result the\n+    libstdc++ configury decides that wchar_t support should be\n+    disabled. In addition, the libstdc++ platform checks that\n+    enabled <type>wchar_t</type> were quite strict, and not granular\n+    enough to detect when the minimal support to\n+    enable <type>wchar_t</type> and C++ library structures\n+    like <classname>wstring</classname> were present. This impacted Solaris,\n+    Darwin, and BSD varients, and is fixed in libstdc++ versions post 4.1.0.\n+    </para> \n+    <para> \n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+</qandadiv>\n+\n+\n+<!-- Known Bugs -->\n+<qandadiv id=\"faq.known_bugs\" xreflabel=\"Known Bugs\">\n+<title>Known Bugs</title>\n+\n+<qandaentry id=\"faq.what_works\">\n+  <question id=\"q-what_works\">\n+    <para>\n+      What works already?\n+    </para>\n+  </question>\n+  <answer id=\"a-what_works\">\n+    <para>\n+    Short answer: Pretty much everything <emphasis>works</emphasis>\n+    except for some corner cases.  Support for localization\n+    in <classname>locale</classname> may be incomplete on non-GNU\n+    platforms. Also dependant on the underlying platform is support\n+    for <type>wchar_t</type> and <type>long\n+    long</type> specializations, and details of thread support.\n+    </para>\n+    <para>    \n+    Long answer: See the implementation status pages for \n+    <ulink url=\"http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/c++1998_status.html\">C++98</ulink>,\n+    <ulink url=\"http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/tr1_status.html\">TR1</ulink>, and <ulink url=\"http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/c++0x_status.html\">C++0x</ulink>.\n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.standard_bugs\">\n+  <question id=\"q-standard_bugs\">\n+    <para>\n+      Bugs in the ISO C++ language or library specification\n+    </para>\n+  </question>\n+  <answer id=\"a-standard_bugs\">\n+    <para>\n+    Unfortunately, there are some. \n+    </para>\n+    <para>\n+    For those people who are not part of the ISO Library Group\n+    (i.e., nearly all of us needing to read this page in the first\n+    place), a public list of the library defects is occasionally\n+    published <ulink url=\"http://anubis.dkuug.dk/jtc1/sc22/wg21/\">here</ulink>.\n+    Some of these issues have resulted in code changes in libstdc++.\n+    </para> \n+    <para>\n+    If you think you've discovered a new bug that is not listed,\n+    please post a message describing your problem\n+    to <email>libstdc++@gcc.gnu.org</email> or the Usenet group\n+    comp.lang.c++.moderated.\n+    </para>\n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.compiler_bugs\">\n+  <question id=\"q-compiler_bugs\">\n+    <para>\n+      Bugs in the compiler (gcc/g++) and not libstdc++\n+    </para>\n+  </question>\n+  <answer id=\"a-compiler_bugs\">\n+    <para>\n+    On occasion, the compiler is wrong. Please be advised that this\n+    happens much less often than one would think, and avoid jumping to\n+    conclusions.\n+    </para>\n+    <para>\n+    First, examine the ISO C++ standard. Second, try another compiler\n+    or an older version of the GNU compilers. Third, you can find more\n+    information on the libstdc++ and the GCC mailing lists: search\n+    these lists with terms describing your issue.\n+    </para> \n+    <para> \n+    Before reporting a bug, please examine the\n+    <ulink url=\"http://gcc.gnu.org/bugs.html\">bugs database</ulink> with the\n+    category set to <quote>g++</quote>. \n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+</qandadiv>\n+\n+<!-- Known Non-Bugs -->\n+<qandadiv id=\"faq.known_non-bugs\" xreflabel=\"Known Non-Bugs\">\n+<title>Known Non-Bugs</title>\n+\n+<qandaentry id=\"faq.stream_reopening_fails\">\n+  <question id=\"q-stream_reopening_fails\">\n+    <para>\n+      Reopening a stream fails\n+    </para>\n+  </question>\n+  <answer id=\"a-stream_reopening_fails\">\n+    <para>\n+    One of the most-reported non-bug reports. Executing a sequence like:\n+    </para>\n+\n+    <literallayout>\n+    #include &lt;fstream&gt;\n+    ...\n+    std::fstream  fs(<quote>a_file</quote>);\n+    // .\n+    // . do things with fs...\n+    // .\n+    fs.close();\n+    fs.open(<quote>a_new_file</quote>);\n+    </literallayout>\n+    \n+    <para>\n+    All operations on the re-opened <varname>fs</varname> will fail, or at\n+    least act very strangely.  Yes, they often will, especially if\n+    <varname>fs</varname> reached the EOF state on the previous file.  The\n+    reason is that the state flags are <emphasis>not</emphasis> cleared\n+    on a successful call to open().  The standard unfortunately did\n+    not specify behavior in this case, and to everybody's great sorrow,\n+    the <ulink url=\"../ext/howto.html#5\">proposed LWG resolution in\n+      DR #22</ulink> is to leave the flags unchanged.  You must insert a call\n+    to <function>fs.clear()</function> between the calls to close() and open(),\n+    and then everything will work like we all expect it to work.\n+    <emphasis>Update:</emphasis> for GCC 4.0 we implemented the resolution\n+    of <ulink url=\"../ext/howto.html#5\">DR #409</ulink> and open() now calls\n+    <function>clear()</function> on success!\n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.wefcxx_verbose\">\n+  <question id=\"q-wefcxx_verbose\">\n+    <para>\n+      -Weffc++ complains too much\n+    </para>\n+  </question>\n+  <answer id=\"a-wefcxx_verbose\">\n+    <para>\n+    Many warnings are emitted when <literal>-Weffc++</literal> is used.  Making\n+    libstdc++ <literal>-Weffc++</literal>-clean is not a goal of the project,\n+    for a few reasons.  Mainly, that option tries to enforce\n+    object-oriented programming, while the Standard Library isn't\n+    necessarily trying to be OO.\n+    </para> \n+    <para>\n+    We do, however, try to have libstdc++ sources as clean as possible. If\n+    you see some simple changes that pacify <literal>-Weffc++</literal>\n+    without other drawbacks, send us a patch.\n+    </para>\n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.ambiguous_overloads\">\n+  <question id=\"q-ambiguous_overloads\">\n+    <para>\n+      Ambiguous overloads after including an old-style header\n+    </para>\n+  </question>\n+  <answer id=\"a-ambiguous_overloads\">\n+    <para>\n+    Another problem is the <literal>rel_ops</literal> namespace and the template\n+    comparison operator functions contained therein.  If they become\n+    visible in the same namespace as other comparison functions\n+    (e.g., <quote>using</quote> them and the &lt;iterator&gt; header),\n+    then you will suddenly be faced with huge numbers of ambiguity\n+    errors.  This was discussed on the -v3 list; Nathan Myers\n+    <ulink url=\"http://gcc.gnu.org/ml/libstdc++/2001-01/msg00247.html\">sums\n+      things up here</ulink>.  The collisions with vector/string iterator\n+    types have been fixed for 3.1.\n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.v2_headers\">\n+  <question id=\"q-v2_headers\">\n+    <para>\n+      The g++-3 headers are <emphasis>not ours</emphasis>\n+    </para>\n+  </question>\n+  <answer id=\"a-v2_headers\">\n+      <para>\n+\tIf you have found an extremely broken header file which is\n+\tcausing problems for you, look carefully before submitting a\n+\t&quot;high&quot; priority bug report (which you probably\n+\tshouldn't do anyhow; see the last paragraph of the page\n+\tdescribing <ulink url=\"http://gcc.gnu.org/bugs.html\">the GCC\n+\tbug database</ulink>).\n+      </para>\n+      <para>\n+\tIf the headers are in <filename>${prefix}/include/g++-3</filename>, or\n+\tif the installed library's name looks like\n+\t<filename>libstdc++-2.10.a</filename> or\n+\t<filename>libstdc++-libc6-2.10.so</filename>, then you are using the\n+\told libstdc++-v2 library, which is nonstandard and\n+\tunmaintained.  Do not report problems with -v2 to the -v3\n+\tmailing list.\n+      </para>\n+      <para>\n+\tFor GCC versions 3.0 and 3.1 the libstdc++ header files are\n+\tinstalled in <filename>${prefix}/include/g++-v3</filename> (see the\n+\t'v'?).  Starting with version 3.2 the headers are installed in\n+\t<filename>${prefix}/include/c++/${version}</filename> as this prevents\n+\theaders from previous versions being found by mistake.\n+      </para>\n+\n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.boost_concept_checks\">\n+  <question id=\"q-boost_concept_checks\">\n+    <para>\n+      Errors about <emphasis>*Concept</emphasis> and\n+      <emphasis>constraints</emphasis> in the STL\n+    </para>\n+  </question>\n+  <answer id=\"a-boost_concept_checks\">\n+    <para>\n+    If you see compilation errors containing messages about\n+    <errortext>foo Concept </errortext>and something to do with a\n+    <errortext>constraints</errortext> member function, then most\n+    likely you have violated one of the requirements for types used\n+    during instantiation of template containers and functions.  For\n+    example, EqualityComparableConcept appears if your types must be\n+    comparable with == and you have not provided this capability (a\n+    typo, or wrong visibility, or you just plain forgot, etc).\n+    </para>\n+    <para>\n+    More information, including how to optionally enable/disable the\n+    checks, is available\n+    <ulink url=\"../19_diagnostics/howto.html#3\">here</ulink>.\n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.dlopen_crash\">\n+  <question id=\"q-dlopen_crash\">\n+    <para>\n+      Program crashes when using library code in a\n+      dynamically-loaded library\n+    </para>\n+  </question>\n+  <answer id=\"a-dlopen_crash\">\n+    <para>\n+    If you are using the C++ library across dynamically-loaded\n+    objects, make certain that you are passing the correct options\n+    when compiling and linking:\n+    </para>\n+\n+    <literallayout>\n+    // compile your library components\n+    g++ -fPIC -c a.cc\n+    g++ -fPIC -c b.cc\n+    ...\n+    g++ -fPIC -c z.cc\n+\n+    // create your library\n+    g++ -fPIC -shared -rdynamic -o libfoo.so a.o b.o ... z.o\n+\n+    // link the executable\n+    g++ -fPIC -rdynamic -o foo ... -L. -lfoo -ldl\n+    </literallayout>\n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.memory_leaks\">\n+  <question id=\"q-memory_leaks\">\n+    <para>\n+      <quote>Memory leaks</quote> in containers\n+    </para>\n+  </question>\n+  <answer id=\"a-memory_leaks\">\n+    <para>\n+    A few people have reported that the standard containers appear\n+    to leak memory when tested with memory checkers such as\n+    <ulink url=\"http://developer.kde.org/~sewardj/\">valgrind</ulink>.\n+    The library's default allocators keep free memory in a pool\n+    for later reuse, rather than returning it to the OS.  Although\n+    this memory is always reachable by the library and is never\n+    lost, memory debugging tools can report it as a leak.  If you\n+    want to test the library for memory leaks please read\n+    <ulink url=\"../debug.html#mem\">Tips for memory leak hunting</ulink>\n+    first.\n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.list_size_on\">\n+  <question id=\"q-list_size_on\">\n+    <para>\n+      list::size() is O(n)!\n+    </para>\n+  </question>\n+  <answer id=\"a-list_size_on\">\n+    <para>\n+    See\n+    the <ulink url=\"../23_containers/howto.html#6\">Containers</ulink>\n+    chapter.\n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.easy_to_fix\">\n+  <question id=\"q-easy_to_fix\">\n+    <para>\n+      Aw, that's easy to fix!\n+    </para>\n+  </question>\n+  <answer id=\"a-easy_to_fix\">\n+    <para>\n+    If you have found a bug in the library and you think you have\n+    a working fix, then send it in!  The main GCC site has a page\n+    on <ulink url=\"http://gcc.gnu.org/contribute.html\">submitting\n+    patches</ulink> that covers the procedure, but for libstdc++ you\n+    should also send the patch to our mailing list in addition to\n+    the GCC patches mailing list.  The libstdc++\n+    <ulink url=\"../17_intro/contribute.html\">contributors' page</ulink>\n+    also talks about how to submit patches.\n+    </para>\n+    <para>\n+    In addition to the description, the patch, and the ChangeLog\n+    entry, it is a Good Thing if you can additionally create a small\n+    test program to test for the presence of the bug that your\n+    patch fixes.  Bugs have a way of being reintroduced; if an old\n+    bug creeps back in, it will be caught immediately by the\n+    <ulink url=\"#2_4\">testsuite</ulink> -- but only if such a test exists.\n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+</qandadiv>\n+\n+\n+<!-- Miscellaneous -->\n+<qandadiv id=\"faq.misc\" xreflabel=\"Miscellaneous\">\n+<title>Miscellaneous</title>\n+\n+<qandaentry id=\"faq.iterator_as_pod\">\n+  <question id=\"faq.iterator_as_pod_q\">\n+    <para>\n+      string::iterator is not char*; vector&lt;T&gt;::iterator is not T*\n+    </para>\n+  </question>\n+  <answer id=\"faq.iterator_as_pod_a\">\n+    <para>\n+    If you have code that depends on container&lt;T&gt; iterators\n+    being implemented as pointer-to-T, your code is broken. It's\n+    considered a feature, not a bug, that libstdc++ points this out.\n+    </para>\n+    <para>\n+    While there are arguments for iterators to be implemented in\n+    that manner, A) they aren't very good ones in the long term,\n+    and B) they were never guaranteed by the Standard anyway.  The\n+    type-safety achieved by making iterators a real class rather\n+    than a typedef for <type>T*</type> outweighs nearly all opposing\n+    arguments.\n+    </para>\n+    <para>\n+    Code which does assume that a vector iterator <varname>i</varname>\n+    is a pointer can often be fixed by changing <varname>i</varname> in\n+    certain expressions to <varname>&amp;*i</varname>.  Future revisions\n+    of the Standard are expected to bless this usage for\n+    vector&lt;&gt; (but not for basic_string&lt;&gt;).\n+    </para>\n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.what_is_next\">\n+  <question id=\"q-what_is_next\">\n+    <para>\n+      What's next after libstdc++?\n+    </para>\n+  </question>\n+  <answer id=\"a-what_is_next\">\n+      <para>\n+\tHopefully, not much.  The goal of libstdc++ is to produce a\n+\tfully-compliant, fully-portable Standard Library.  After that,\n+\twe're mostly done: there won't <emphasis>be</emphasis> any\n+\tmore compliance work to do.\n+      </para>\n+      <para>\n+\tThere is an effort underway to add significant extensions to\n+\tthe standard library specification.  The latest version of\n+\tthis effort is described in\n+         <ulink url=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1836.pdf\">\n+         The C++ Library Technical Report 1</ulink>.\n+      </para>\n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.sgi_stl\">\n+  <question id=\"q-sgi_stl\">\n+    <para>\n+      What about the STL from SGI?\n+    </para>\n+  </question>\n+  <answer id=\"a-sgi_stl\">\n+    <para>\n+      The <ulink url=\"http://www.sgi.com/tech/stl/\">STL from SGI</ulink>,\n+    version 3.3, was the final merge of the STL codebase.  The\n+    code in libstdc++ contains many fixes and changes, and\n+    the SGI code is no longer under active\n+    development.  We expect that no future merges will take place.\n+    </para>\n+    <para>\n+    In particular, <classname>string</classname> is not from SGI and makes no\n+    use of their &quot;rope&quot; class (which is included as an\n+    optional extension), nor is <classname>valarray</classname> and some others.\n+    Classes like <classname>vector&lt;&gt;</classname> are, but have been\n+    extensively modified.\n+    </para>\n+    <para>\n+    More information on the evolution of libstdc++ can be found at the\n+    <link linkend=\"appendix.porting.api\">API\n+    evolution</link>\n+    and <link linkend=\"manual.appendix.porting.backwards\">backwards\n+    compatibility</link> documentation.\n+    </para>\n+    <para>\n+    The FAQ for SGI's STL (one jump off of their main page) is\n+    still recommended reading.\n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.extensions_and_backwards_compat\">\n+  <question id=\"q-extensions_and_backwards_compat\">\n+    <para>\n+      Extensions and Backward Compatibility\n+    </para>\n+  </question>\n+  <answer id=\"a-extensions_and_backwards_compat\">\n+    <para>\n+      See the <link linkend=\"manual.appendix.porting.backwards\">link</link> on backwards compatiblity and <link linkend=\"appendix.porting.api\">link</link> on evolution.\n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.tr1_support\">\n+  <question id=\"q-tr1_support\">\n+    <para>\n+      Does libstdc++ support TR1?\n+    </para>\n+  </question>\n+  <answer id=\"a-tr1_support\">\n+    <para>\n+    Yes.\n+    </para>\n+    <para>\n+    The C++ Standard Library Technical Report adds many new features to \n+    the library.  The latest version of this effort is described in\n+    <ulink url=\n+\t \"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1836.pdf\">\n+         Technical Report 1</ulink>.\n+    </para>\n+    <para>\n+    The implementation status of TR1 in libstdc++ can be tracked <link\n+    linkend=\"manual.intro.status.standard.tr1\">on the TR1 status\n+    page</link>.\n+    </para>\n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.get_iso_cxx\">\n+  <question id=\"q-get_iso_cxx\">\n+    <para>How do I get a copy of the ISO C++ Standard?\n+    </para>\n+  </question>\n+  <answer id=\"a-get_iso_cxx\">\n+    <para>\n+    Copies of the full ISO 14882 standard are available on line via\n+    the ISO mirror site for committee members.  Non-members, or those\n+    who have not paid for the privilege of sitting on the committee\n+    and sustained their two-meeting commitment for voting rights, may\n+    get a copy of the standard from their respective national\n+    standards organization.  In the USA, this national standards\n+    organization is ANSI and their website is\n+    right <ulink url=\"http://www.ansi.org\">here</ulink>.  (And if\n+    you've already registered with them, clicking this link will take\n+    you to directly to the place where you can\n+    <ulink url=\"http://webstore.ansi.org/ansidocstore/product.asp?sku=ISO%2FIEC+14882%3A2003\">buy the standard on-line</ulink>.\n+    </para>\n+    <para>\n+    Who is your country's member body?  Visit the\n+    <ulink url=\"http://www.iso.ch/\">ISO homepage</ulink> and find out!\n+    </para>\n+    <para>\n+    The 2003 version of the standard (the 1998 version plus TC1) is\n+    available in print, ISBN 0-470-84674-7.\n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.what_is_abi\">\n+  <question id=\"q-what_is_abi\">\n+    <para>\n+      What's an ABI and why is it so messy?\n+    </para>\n+  </question>\n+  <answer id=\"a-what_is_abi\">\n+    <para>\n+    <acronym>ABI</acronym> stands for <quote>Application Binary\n+     Interface</quote>.  Conventionally, it refers to a great\n+    mass of details about how arguments are arranged on the call\n+    stack and/or in registers, and how various types are arranged\n+    and padded in structs.  A single CPU design may suffer\n+    multiple ABIs designed by different development tool vendors\n+    who made different choices, or even by the same vendor for\n+    different target applications or compiler versions.  In ideal\n+    circumstances the CPU designer presents one ABI and all the\n+    OSes and compilers use it.  In practice every ABI omits\n+    details that compiler implementers (consciously or\n+    accidentally) must choose for themselves.\n+    </para>\n+    <para>\n+    That ABI definition suffices for compilers to generate code so a\n+    program can interact safely with an OS and its lowest-level libraries.\n+    Users usually want an ABI to encompass more detail, allowing libraries\n+    built with different compilers (or different releases of the same\n+    compiler!) to be linked together.  For C++, this includes many more\n+    details than for C, and CPU designers (for good reasons elaborated\n+    below) have not stepped up to publish C++ ABIs.  The details include\n+    virtual function implementation, struct inheritance layout, name\n+    mangling, and exception handling.  Such an ABI has been defined for\n+    GNU C++, and is immediately useful for embedded work relying only on\n+    a <quote>free-standing implementation</quote> that doesn't include (much\n+    of) the standard library.  It is a good basis for the work to come.\n+    </para>\n+    <para>\n+    A useful C++ ABI must also incorporate many details of the standard\n+    library implementation.  For a C ABI, the layouts of a few structs\n+    (such as FILE, stat, jmpbuf, and the like) and a few macros suffice.\n+    For C++, the details include the complete set of names of functions\n+    and types used, the offsets of class members and virtual functions,\n+    and the actual definitions of all inlines.  C++ exposes many more\n+    library details to the caller than C does.  It makes defining\n+    a complete ABI a much bigger undertaking, and requires not just\n+    documenting library implementation details, but carefully designing\n+    those details so that future bug fixes and optimizations don't\n+    force breaking the ABI.\n+    </para>\n+    <para>\n+    There are ways to help isolate library implementation details from the\n+    ABI, but they trade off against speed.  Library details used in\n+    inner loops (e.g., getchar) must be exposed and frozen for all\n+    time, but many others may reasonably be kept hidden from user code,\n+    so they may later be changed.  Deciding which, and implementing\n+    the decisions, must happen before you can reasonably document a\n+    candidate C++ ABI that encompasses the standard library.\n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+<qandaentry id=\"faq.size_equals_capacity\">\n+  <question id=\"q-size_equals_capacity\">\n+    <para>\n+      How do I make std::vector&lt;T&gt;::capacity() == std::vector&lt;T&gt;::size?\n+    </para>\n+  </question>\n+  <answer id=\"a-size_equals_capacity\">\n+    <para>\n+    The standard idiom for deallocating a <classname>vector&lt;T&gt;</classname>'s\n+    unused memory is to create a temporary copy of the vector and swap their\n+    contents, e.g. for <classname>vector&lt;T&gt; v</classname>\n+    </para>\n+    <literallayout>\n+     std::vector&lt;T&gt;(v).swap(v);\n+    </literallayout>\n+    <para>\n+    The copy will take O(n) time and the swap is constant time.\n+    </para>\n+    <para>\n+    See <ulink url=\"../21_strings/howto.html#6\">Shrink-to-fit\n+    strings</ulink> for a similar solution for strings.\n+    </para> \n+  </answer>\n+</qandaentry>\n+\n+</qandadiv>\n+\n+\n+<!-- FAQ ends here -->\n+</qandaset>\n+\n+</article>\n+\n+</book>\n\\ No newline at end of file"}, {"sha": "2eecfbb948ab5bd791837ab08fec03db700081e3", "filename": "libstdc++-v3/doc/xml/gnu/fdl-1.2.xml", "status": "added", "additions": 502, "deletions": 0, "changes": 502, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fgnu%2Ffdl-1.2.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fgnu%2Ffdl-1.2.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fgnu%2Ffdl-1.2.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,502 @@\n+<appendix id=\"appendix.gfdl-1.2\">\n+  <title>GNU Free Documentation License</title>\n+  <para>\n+    Copyright (C) 2000, 2001, 2002 Free Software Foundation,\n+    <abbrev>Inc.</abbrev> 51 Franklin <abbrev>St</abbrev>, Fifth Floor,\n+    Boston, <abbrev>MA</abbrev> 02110-1301 <abbrev\n+    role=\"initialism\">USA</abbrev>.  Everyone is permitted to copy and\n+    distribute verbatim copies of this license document, but changing it is\n+    not allowed.\n+  </para>\n+  <bridgehead id=\"Preamble\" renderas=\"sect1\">\n+    0. PREAMBLE\n+  </bridgehead>\n+  <para>\n+    The purpose of this License is to make a manual, textbook, or other\n+    functional and useful document \"free\" in the sense of freedom: to assure\n+    everyone the effective freedom to copy and redistribute it, with or\n+    without modifying it, either commercially or noncommercially.\n+    Secondarily, this License preserves for the author and publisher a way to\n+    get credit for their work, while not being considered responsible for\n+    modifications made by others.\n+  </para>\n+  <para>\n+    This License is a kind of \"copyleft\", which means that derivative works of\n+    the document must themselves be free in the same sense.  It complements\n+    the GNU General Public License, which is a copyleft license designed for\n+    free software.\n+  </para>\n+  <para>\n+    We have designed this License in order to use it for manuals for free\n+    software, because free software needs free documentation: a free program\n+    should come with manuals providing the same freedoms that the software\n+    does.  But this License is not limited to software manuals; it can be used\n+    for any textual work, regardless of subject matter or whether it is\n+    published as a printed book.  We recommend this License principally for\n+    works whose purpose is instruction or reference.</para>\n+  <bridgehead id=\"Definitions\" renderas=\"sect1\">\n+    1. APPLICABILITY AND DEFINITIONS\n+  </bridgehead>\n+  <para>\n+    This License applies to any manual or other work, in any medium, that\n+    contains a notice placed by the copyright holder saying it can be\n+    distributed under the terms of this License.  Such a notice grants a\n+    world-wide, royalty-free license, unlimited in duration, to use that work\n+    under the conditions stated herein.  The \"Document\", below, refers to any\n+    such manual or work.  Any member of the public is a licensee, and is\n+    addressed as \"you\".  You accept the license if you copy, modify or\n+    distribute the work in a way requiring permission under copyright\n+    law.\n+  </para>\n+  <para>\n+    A \"Modified Version\" of the Document means any work containing the\n+    Document or a portion of it, either copied verbatim, or with modifications\n+    and/or translated into another language.\n+  </para>\n+  <para>\n+    A \"Secondary Section\" is a named appendix or a front-matter section of the\n+    Document that deals exclusively with the relationship of the publishers or\n+    authors of the Document to the Document's overall subject (or to related\n+    matters) and contains nothing that could fall directly within that overall\n+    subject.  (Thus, if the Document is in part a textbook of mathematics, a\n+    Secondary Section may not explain any mathematics.)  The relationship\n+    could be a matter of historical connection with the subject or with\n+    related matters, or of legal, commercial, philosophical, ethical or\n+    political position regarding them.\n+  </para>\n+  <para>\n+    The \"Invariant Sections\" are certain Secondary Sections whose titles are\n+    designated, as being those of Invariant Sections, in the notice that says\n+    that the Document is released under this License.  If a section does not\n+    fit the above definition of Secondary then it is not allowed to be\n+    designated as Invariant.  The Document may contain zero Invariant\n+    Sections.  If the Document does not identify any Invariant Sections then\n+    there are none.\n+  </para>\n+  <para>\n+    The \"Cover Texts\" are certain short passages of text that are listed, as\n+    Front-Cover Texts or Back-Cover Texts, in the notice that says that the\n+    Document is released under this License.  A Front-Cover Text may be at\n+    most 5 words, and a Back-Cover Text may be at most 25 words.\n+  </para>\n+  <para>\n+    A \"Transparent\" copy of the Document means a machine-readable copy,\n+    represented in a format whose specification is available to the general\n+    public, that is suitable for revising the document straightforwardly with\n+    generic text editors or (for images composed of pixels) generic paint\n+    programs or (for drawings) some widely available drawing editor, and that\n+    is suitable for input to text formatters or for automatic translation to a\n+    variety of formats suitable for input to text formatters.  A copy made in\n+    an otherwise Transparent file format whose markup, or absence of markup,\n+    has been arranged to thwart or discourage subsequent modification by\n+    readers is not Transparent.  An image format is not Transparent if used\n+    for any substantial amount of text.  A copy that is not \"Transparent\" is\n+    called \"Opaque\".\n+  </para>\n+  <para>\n+    Examples of suitable formats for Transparent copies include plain ASCII\n+    without markup, Texinfo input format, LaTeX input format, SGML or XML\n+    using a publicly available DTD, and standard-conforming simple HTML,\n+    PostScript or PDF designed for human modification.  Examples of\n+    transparent image formats include PNG, XCF and JPG.  Opaque formats\n+    include proprietary formats that can be read and edited only by\n+    proprietary word processors, SGML or XML for which the DTD and/or\n+    processing tools are not generally available, and the machine-generated\n+    HTML, PostScript or PDF produced by some word processors for output\n+    purposes only.\n+  </para>\n+  <para>\n+    The \"Title Page\" means, for a printed book, the title page itself, plus\n+    such following pages as are needed to hold, legibly, the material this\n+    License requires to appear in the title page.  For works in formats which\n+    do not have any title page as such, \"Title Page\" means the text near the\n+    most prominent appearance of the work's title, preceding the beginning of\n+    the body of the text.\n+  </para>\n+  <para>\n+    A section \"Entitled XYZ\" means a named subunit of the Document whose title\n+    either is precisely XYZ or contains XYZ in parentheses following text that\n+    translates XYZ in another language.  (Here XYZ stands for a specific\n+    section name mentioned below, such as \"Acknowledgements\", \"Dedications\",\n+    \"Endorsements\", or \"History\".)  To \"Preserve the Title\" of such a section\n+    when you modify the Document means that it remains a section \"Entitled\n+    XYZ\" according to this definition.\n+  </para>\n+  <para>\n+    The Document may include Warranty Disclaimers next to the notice which\n+    states that this License applies to the Document.  These Warranty\n+    Disclaimers are considered to be included by reference in this License,\n+    but only as regards disclaiming warranties: any other implication that\n+    these Warranty Disclaimers may have is void and has no effect on the\n+    meaning of this License.\n+  </para>\n+  <bridgehead id=\"VerbatimCopying\" renderas=\"sect1\">\n+    2. VERBATIM COPYING\n+  </bridgehead>\n+  <para>\n+    You may copy and distribute the Document in any medium, either\n+    commercially or noncommercially, provided that this License, the copyright\n+    notices, and the license notice saying this License applies to the\n+    Document are reproduced in all copies, and that you add no other\n+    conditions whatsoever to those of this License.  You may not use technical\n+    measures to obstruct or control the reading or further copying of the\n+    copies you make or distribute.  However, you may accept compensation in\n+    exchange for copies.  If you distribute a large enough number of copies\n+    you must also follow the conditions in section 3.\n+  </para>\n+  <para>\n+    You may also lend copies, under the same conditions stated above, and you\n+    may publicly display copies.\n+  </para>\n+  <bridgehead id=\"QuantityCopying\" renderas=\"sect1\">\n+    3. COPYING IN QUANTITY\n+  </bridgehead>\n+  <para>\n+    If you publish printed copies (or copies in media that commonly have\n+    printed covers) of the Document, numbering more than 100, and the\n+    Document's license notice requires Cover Texts, you must enclose the\n+    copies in covers that carry, clearly and legibly, all these Cover Texts:\n+    Front-Cover Texts on the front cover, and Back-Cover Texts on the back\n+    cover.  Both covers must also clearly and legibly identify you as the\n+    publisher of these copies.  The front cover must present the full title\n+    with all words of the title equally prominent and visible.  You may add\n+    other material on the covers in addition.  Copying with changes limited to\n+    the covers, as long as they preserve the title of the Document and satisfy\n+    these conditions, can be treated as verbatim copying in other\n+    respects.\n+  </para>\n+  <para>\n+    If the required texts for either cover are too voluminous to fit legibly,\n+    you should put the first ones listed (as many as fit reasonably) on the\n+    actual cover, and continue the rest onto adjacent pages.\n+  </para>\n+  <para>\n+    If you publish or distribute Opaque copies of the Document numbering more\n+    than 100, you must either include a machine-readable Transparent copy\n+    along with each Opaque copy, or state in or with each Opaque copy a\n+    computer-network location from which the general network-using public has\n+    access to download using public-standard network protocols a complete\n+    Transparent copy of the Document, free of added material.  If you use the\n+    latter option, you must take reasonably prudent steps, when you begin\n+    distribution of Opaque copies in quantity, to ensure that this Transparent\n+    copy will remain thus accessible at the stated location until at least one\n+    year after the last time you distribute an Opaque copy (directly or\n+    through your agents or retailers) of that edition to the public.\n+  </para>\n+  <para>\n+    It is requested, but not required, that you contact the authors of the\n+    Document well before redistributing any large number of copies, to give\n+    them a chance to provide you with an updated version of the\n+    Document.\n+  </para>\n+  <bridgehead id=\"Modifications\" renderas=\"sect1\">\n+    4. MODIFICATIONS\n+  </bridgehead>\n+  <para>\n+    You may copy and distribute a Modified Version of the Document under the\n+    conditions of sections 2 and 3 above, provided that you release the\n+    Modified Version under precisely this License, with the Modified Version\n+    filling the role of the Document, thus licensing distribution and\n+    modification of the Modified Version to whoever possesses a copy of it.\n+    In addition, you must do these things in the Modified Version:\n+  </para>\n+  <orderedlist numeration=\"upperalpha\">\n+    <listitem>\n+      <simpara>\n+        Use in the Title Page (and on the covers, if any) a title distinct\n+        from that of the Document, and from those of previous versions (which\n+        should, if there were any, be listed in the History section of the\n+        Document).  You may use the same title as a previous version if the\n+        original publisher of that version gives permission.\n+        </simpara>\n+    </listitem>\n+    <listitem>\n+      <simpara>\n+        List on the Title Page, as authors, one or more persons or entities\n+        responsible for authorship of the modifications in the Modified\n+        Version, together with at least five of the principal authors of the\n+        Document (all of its principal authors, if it has fewer than five),\n+        unless they release you from this requirement.\n+      </simpara>\n+    </listitem>\n+    <listitem>\n+      <simpara>\n+        State on the Title page the name of the publisher of the Modified\n+        Version, as the publisher.\n+      </simpara>\n+    </listitem>\n+    <listitem>\n+      <simpara>\n+        Preserve all the copyright notices of the Document.\n+      </simpara>\n+    </listitem>\n+    <listitem>\n+      <simpara>\n+        Add an appropriate copyright notice for your modifications adjacent to\n+        the other copyright notices.\n+      </simpara>\n+    </listitem>\n+    <listitem>\n+      <simpara>\n+        Include, immediately after the copyright notices, a license notice\n+        giving the public permission to use the Modified Version under the\n+        terms of this License, in the form shown in the Addendum below.\n+      </simpara>\n+    </listitem>\n+    <listitem>\n+      <simpara>\n+        Preserve in that license notice the full lists of Invariant Sections\n+        and required Cover Texts given in the Document's license notice.\n+      </simpara>\n+    </listitem>\n+    <listitem>\n+      <simpara>\n+        Include an unaltered copy of this License.\n+      </simpara>\n+    </listitem>\n+    <listitem>\n+      <simpara>\n+        Preserve the section Entitled \"History\", Preserve its Title, and add\n+        to it an item stating at least the title, year, new authors, and\n+        publisher of the Modified Version as given on the Title Page.  If\n+        there is no section Entitled \"History\" in the Document, create one\n+        stating the title, year, authors, and publisher of the Document as\n+        given on its Title Page, then add an item describing the Modified\n+        Version as stated in the previous sentence.\n+      </simpara>\n+    </listitem>\n+    <listitem>\n+      <simpara>\n+        Preserve the network location, if any, given in the Document for\n+        public access to a Transparent copy of the Document, and likewise the\n+        network locations given in the Document for previous versions it was\n+        based on.  These may be placed in the \"History\" section.  You may omit\n+        a network location for a work that was published at least four years\n+        before the Document itself, or if the original publisher of the\n+        version it refers to gives permission.\n+      </simpara>\n+    </listitem>\n+    <listitem>\n+      <simpara>\n+        For any section Entitled \"Acknowledgements\" or \"Dedications\", Preserve\n+        the Title of the section, and preserve in the section all the\n+        substance and tone of each of the contributor acknowledgements and/or\n+        dedications given therein.\n+      </simpara>\n+    </listitem>\n+    <listitem>\n+      <simpara>\n+        Preserve all the Invariant Sections of the Document, unaltered in\n+        their text and in their titles.  Section numbers or the equivalent are\n+        not considered part of the section titles.\n+      </simpara>\n+    </listitem>\n+    <listitem>\n+      <simpara>\n+        Delete any section Entitled \"Endorsements\".  Such a section may not be\n+        included in the Modified Version.\n+      </simpara>\n+    </listitem>\n+    <listitem>\n+      <simpara>\n+        Do not retitle any existing section to be Entitled \"Endorsements\" or\n+        to conflict in title with any Invariant Section.\n+      </simpara>\n+    </listitem>\n+    <listitem>\n+      <simpara>\n+        Preserve any Warranty Disclaimers.\n+      </simpara>\n+    </listitem>\n+  </orderedlist>\n+  <para>\n+    If the Modified Version includes new front-matter sections or appendices\n+    that qualify as Secondary Sections and contain no material copied from the\n+    Document, you may at your option designate some or all of these sections\n+    as invariant.  To do this, add their titles to the list of Invariant\n+    Sections in the Modified Version's license notice.  These titles must be\n+    distinct from any other section titles.\n+  </para>\n+  <para>\n+    You may add a section Entitled \"Endorsements\", provided it contains\n+    nothing but endorsements of your Modified Version by various parties--for\n+    example, statements of peer review or that the text has been approved by\n+    an organization as the authoritative definition of a standard.\n+  </para>\n+  <para>\n+    You may add a passage of up to five words as a Front-Cover Text, and a\n+    passage of up to 25 words as a Back-Cover Text, to the end of the list of\n+    Cover Texts in the Modified Version.  Only one passage of Front-Cover Text\n+    and one of Back-Cover Text may be added by (or through arrangements made\n+    by) any one entity.  If the Document already includes a cover text for the\n+    same cover, previously added by you or by arrangement made by the same\n+    entity you are acting on behalf of, you may not add another; but you may\n+    replace the old one, on explicit permission from the previous publisher\n+    that added the old one.\n+  </para>\n+  <para>\n+    The author(s) and publisher(s) of the Document do not by this License give\n+    permission to use their names for publicity for or to assert or imply\n+    endorsement of any Modified Version.\n+  </para>\n+  <bridgehead id=\"Combining\" renderas=\"sect1\">\n+    5. COMBINING DOCUMENTS\n+  </bridgehead>\n+  <para>\n+    You may combine the Document with other documents released under this\n+    License, under the terms defined in section 4 above for modified versions,\n+    provided that you include in the combination all of the Invariant Sections\n+    of all of the original documents, unmodified, and list them all as\n+    Invariant Sections of your combined work in its license notice, and that\n+    you preserve all their Warranty Disclaimers.\n+  </para>\n+  <para>\n+    The combined work need only contain one copy of this License, and multiple\n+    identical Invariant Sections may be replaced with a single copy.  If there\n+    are multiple Invariant Sections with the same name but different contents,\n+    make the title of each such section unique by adding at the end of it, in\n+    parentheses, the name of the original author or publisher of that section\n+    if known, or else a unique number.  Make the same adjustment to the\n+    section titles in the list of Invariant Sections in the license notice of\n+    the combined work.\n+  </para>\n+  <para>\n+    In the combination, you must combine any sections Entitled \"History\" in\n+    the various original documents, forming one section Entitled \"History\";\n+    likewise combine any sections Entitled \"Acknowledgements\", and any\n+    sections Entitled \"Dedications\".  You must delete all sections Entitled\n+    \"Endorsements\".\n+  </para>\n+  <bridgehead id=\"Collections\" renderas=\"sect1\">\n+    6. COLLECTIONS OF DOCUMENTS\n+  </bridgehead>\n+  <para>\n+    You may make a collection consisting of the Document and other documents\n+    released under this License, and replace the individual copies of this\n+    License in the various documents with a single copy that is included in\n+    the collection, provided that you follow the rules of this License for\n+    verbatim copying of each of the documents in all other respects.\n+  </para>\n+  <para>\n+    You may extract a single document from such a collection, and distribute\n+    it individually under this License, provided you insert a copy of this\n+    License into the extracted document, and follow this License in all other\n+    respects regarding verbatim copying of that document.\n+  </para>\n+  <bridgehead id=\"Aggregation\" renderas=\"sect1\">\n+    7. AGGREGATION WITH INDEPENDENT WORKS\n+  </bridgehead>\n+  <para>\n+    A compilation of the Document or its derivatives with other separate and\n+    independent documents or works, in or on a volume of a storage or\n+    distribution medium, is called an \"aggregate\" if the copyright resulting\n+    from the compilation is not used to limit the legal rights of the\n+    compilation's users beyond what the individual works permit.  When the\n+    Document is included in an aggregate, this License does not apply to the\n+    other works in the aggregate which are not themselves derivative works of\n+    the Document.\n+  </para>\n+  <para>\n+    If the Cover Text requirement of section 3 is applicable to these copies\n+    of the Document, then if the Document is less than one half of the entire\n+    aggregate, the Document's Cover Texts may be placed on covers that bracket\n+    the Document within the aggregate, or the electronic equivalent of covers\n+    if the Document is in electronic form.  Otherwise they must appear on\n+    printed covers that bracket the whole aggregate.\n+  </para>\n+  <bridgehead id=\"Translation\" renderas=\"sect1\">\n+    8. TRANSLATION\n+  </bridgehead>\n+  <para>\n+    Translation is considered a kind of modification, so you may distribute\n+    translations of the Document under the terms of section 4.  Replacing\n+    Invariant Sections with translations requires special permission from\n+    their copyright holders, but you may include translations of some or all\n+    Invariant Sections in addition to the original versions of these Invariant\n+    Sections.  You may include a translation of this License, and all the\n+    license notices in the Document, and any Warranty Disclaimers, provided\n+    that you also include the original English version of this License and the\n+    original versions of those notices and disclaimers.  In case of a\n+    disagreement between the translation and the original version of this\n+    License or a notice or disclaimer, the original version will prevail.\n+  </para>\n+  <para>\n+    If a section in the Document is Entitled \"Acknowledgements\",\n+    \"Dedications\", or \"History\", the requirement (section 4) to Preserve its\n+    Title (section 1) will typically require changing the actual title.\n+  </para>\n+  <bridgehead id=\"Termination\" renderas=\"sect1\">\n+    9. TERMINATION\n+  </bridgehead>\n+  <para>\n+    You may not copy, modify, sublicense, or distribute the Document except as\n+    expressly provided for under this License.  Any other attempt to copy,\n+    modify, sublicense or distribute the Document is void, and will\n+    automatically terminate your rights under this License.  However, parties\n+    who have received copies, or rights, from you under this License will not\n+    have their licenses terminated so long as such parties remain in full\n+    compliance.\n+  </para>\n+  <bridgehead id=\"FutureRevisions\" renderas=\"sect1\">\n+    10. FUTURE REVISIONS OF THIS LICENSE\n+  </bridgehead>\n+  <para>\n+    The Free Software Foundation may publish new, revised versions of the GNU\n+    Free Documentation License from time to time.  Such new versions will be\n+    similar in spirit to the present version, but may differ in detail to\n+    address new problems or concerns.  See <ulink\n+    url=\"http://www.gnu.org/copyleft/\">http://www.gnu.org/copyleft/</ulink>.\n+  </para>\n+  <para>\n+    Each version of the License is given a distinguishing version number.  If\n+    the Document specifies that a particular numbered version of this License\n+    \"or any later version\" applies to it, you have the option of following the\n+    terms and conditions either of that specified version or of any later\n+    version that has been published (not as a draft) by the Free Software\n+    Foundation.  If the Document does not specify a version number of this\n+    License, you may choose any version ever published (not as a draft) by the\n+    Free Software Foundation.\n+  </para>\n+  <bridgehead id=\"HowToUse\" renderas=\"sect1\">\n+    ADDENDUM: How to use this License for your documents\n+  </bridgehead>\n+  <para>\n+    To use this License in a document you have written, include a copy of the\n+    License in the document and put the following copyright and license\n+    notices just after the title page:\n+  </para>\n+  <blockquote>\n+    <para>\n+      Copyright (C) YEAR YOUR NAME.\n+    </para>\n+    <para>\n+      Permission is granted to copy, distribute and/or modify this document\n+      under the terms of the GNU Free Documentation License, Version 1.2 or\n+      any later version published by the Free Software Foundation; with no\n+      Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A\n+      copy of the license is included in the section entitled \"GNU Free\n+      Documentation License\".\n+    </para>\n+  </blockquote>\n+  <para>\n+    If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,\n+    replace the \"with...Texts.\" line with this:\n+  </para>\n+  <blockquote>\n+    <para>\n+      with the Invariant Sections being LIST THEIR TITLES, with the\n+      Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.\n+    </para>\n+  </blockquote>\n+  <para>\n+    If you have Invariant Sections without Cover Texts, or some other\n+    combination of the three, merge those two alternatives to suit the\n+    situation.\n+  </para>\n+  <para>\n+    If your document contains nontrivial examples of program code, we\n+    recommend releasing these examples in parallel under your choice of free\n+    software license, such as the GNU General Public License, to permit their\n+    use in free software.\n+  </para>\n+</appendix>"}, {"sha": "151a9523f072266e4a5d28d985dec64c75f63cd9", "filename": "libstdc++-v3/doc/xml/gnu/gpl-2.0.xml", "status": "added", "additions": 366, "deletions": 0, "changes": 366, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fgnu%2Fgpl-2.0.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fgnu%2Fgpl-2.0.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fgnu%2Fgpl-2.0.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,366 @@\n+<?xml version='1.0' encoding='ISO-8859-1'?>\n+<!DOCTYPE appendix PUBLIC \"-//OASIS//DTD DocBook XML V4.5//EN\"\n+  \"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\">\n+<appendix id=\"appendix.gpl-2.0\">\n+  <appendixinfo>\n+    <title>GNU General Public License</title>\n+    <pubdate>Version 2, June 1991</pubdate>\n+    <copyright>\n+      <year>1989, 1991</year>\n+      <holder>Free Software Foundation, Inc.</holder>\n+    </copyright>\n+    <legalnotice id=\"gpl-legalnotice\">\n+      <para>\n+\t<address>Free Software Foundation, Inc. \n+\t  <street>51 Franklin Street, Fifth Floor</street>, \n+\t  <city>Boston</city>, <state>MA</state> <postcode>02110-1301</postcode>\n+\t  <country>USA</country>\n+\t</address>\n+      </para>\n+      <para>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</para>\n+    </legalnotice>\n+    <releaseinfo>Version 2, June 1991</releaseinfo>\n+  </appendixinfo>\n+  <title>GNU General Public License</title>\n+  <section id=\"gpl-1\">\n+    <title>Preamble</title>\n+    <para>The licenses for most software are designed to take away your \n+      freedom to share and change it. By contrast, the GNU General Public License is \n+      intended to guarantee your freedom to share and change \n+      free software - to make sure the software is free for all its users. \n+      This General Public License applies to most of the Free Software \n+      Foundation&apos;s software and to any other program whose authors commit \n+      to using it. (Some other Free Software Foundation software is covered \n+      by the GNU Library General Public License instead.) You can apply it \n+      to your programs, too.</para>\n+\n+    <para>When we speak of free software, we are referring to freedom, not price. \n+      Our General Public Licenses are designed to make sure that you have the \n+      freedom to distribute copies of free software (and charge for this \n+      service if you wish), that you receive source code or can get it if you \n+      want it, that you can change the software or use pieces of it in new free \n+      programs; and that you know you can do these things.</para>\n+\n+    <para>To protect your rights, we need to make restrictions that forbid anyone \n+      to deny you these rights or to ask you to surrender the rights. These \n+      restrictions translate to certain responsibilities for you if you distribute \n+      copies of the software, or if you modify it.</para>\n+\n+    <para>For example, if you distribute copies of such a program, whether gratis or \n+      for a fee, you must give the recipients all the rights that you have. You \n+      must make sure that they, too, receive or can get the source code. And you \n+      must show them these terms so they know their rights.</para>\n+\n+    <para>We protect your rights with two steps:\n+      <orderedlist>\n+\t<listitem>\n+\t  <para>copyright the software, and</para>\n+\t</listitem>\n+\t<listitem>\n+\t  <para>offer you this license which gives you legal permission to copy, \n+\t    distribute and/or modify the software.</para>\n+\t</listitem>\n+      </orderedlist>\n+    </para>\n+\n+    <para>Also, for each author&apos;s protection and ours, we want to make certain that \n+      everyone understands that there is no warranty for this free software. If \n+      the software is modified by someone else and passed on, we want its \n+      recipients to know that what they have is not the original, so that any \n+      problems introduced by others will not reflect on the original authors&apos; \n+      reputations.</para>\n+\n+    <para>Finally, any free program is threatened constantly by software patents. \n+      We wish to avoid the danger that redistributors of a free program will \n+      individually obtain patent licenses, in effect making the program \n+      proprietary. To prevent this, we have made it clear that any patent must be \n+      licensed for everyone&apos;s free use or not licensed at all.</para>\n+\n+    <para>The precise terms and conditions for copying, distribution and modification \n+      follow.</para>\n+  </section>\n+  <section id=\"gpl-2\">\n+    <title>TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION</title>\n+    <section id=\"gpl-2-0\">\n+      <title>Section 0</title>\n+      <para>This License applies to any program or other work which contains a notice \n+\tplaced by the copyright holder saying it may be distributed under the terms \n+\tof this General Public License. The <quote>Program</quote>, below, refers to any such \n+\tprogram or work, and a \n+\t<quote>work based on the Program</quote> means either \n+\tthe Program or any derivative work under copyright law: that is to say, a \n+\twork containing the Program or a portion of it, either verbatim or with \n+\tmodifications and/or translated into another language. (Hereinafter, translation \n+\tis included without limitation in the term \n+\t<quote>modification</quote>.) Each licensee is addressed as <quote>you</quote>.</para>\n+\n+      <para>Activities other than copying, distribution and modification are not covered by \n+\tthis License; they are outside its scope. The act of running the Program is not \n+\trestricted, and the output from the Program is covered only if its contents \n+\tconstitute a work based on the Program (independent of having been made by running \n+\tthe Program). Whether that is true depends on what the Program does.</para>\n+    </section>\n+    <section id=\"gpl-2-1\">\n+      <title>Section 1</title>\n+      <para>You may copy and distribute verbatim copies of the Program&apos;s source code as you \n+\treceive it, in any medium, provided that you conspicuously and appropriately \n+\tpublish on each copy an appropriate copyright notice and disclaimer of warranty; \n+\tkeep intact all the notices that refer to this License and to the absence of any \n+\twarranty; and give any other recipients of the Program a copy of this License \n+\talong with the Program.</para>\n+\n+      <para>You may charge a fee for the physical act of transferring a copy, and you may at \n+\tyour option offer warranty protection in exchange for a fee.</para>\n+    </section>\n+    <section id=\"gpl-2-2\">\n+      <title>Section 2</title>\n+      <para>You may modify your copy or copies of the Program or any portion of it, thus \n+\tforming a work based on the Program, and copy and distribute such modifications \n+\tor work under the terms of \n+\t<link linkend=\"gpl-2-1\">Section 1</link> above, provided \n+\tthat you also meet all of these conditions:\n+\t<orderedlist numeration=\"loweralpha\">\n+\t  <listitem>\n+\t    <para>You must cause the modified files to carry prominent notices stating that \n+\t      you changed the files and the date of any change.</para>\n+\t  </listitem>\n+\t  <listitem>\n+\t    <para>You must cause any work that you distribute or publish, that in whole or \n+\t      in part contains or is derived from the Program or any part thereof, to be \n+\t      licensed as a whole at no charge to all third parties under the terms of \n+\t      this License.</para>\n+\t  </listitem>\n+\t  <listitem>\n+\t    <para>If the modified program normally reads commands interactively when run, you \n+\t      must cause it, when started running for such interactive use in the most \n+\t      ordinary way, to print or display an announcement including an appropriate \n+\t      copyright notice and a notice that there is no warranty (or else, saying \n+\t      that you provide a warranty) and that users may redistribute the program \n+\t      under these conditions, and telling the user how to view a copy of this \n+\t      License. (Exception: If the Program itself is interactive but does not \n+              normally print such an announcement, your work based on the Program is not \n+              required to print an   announcement.)</para>\n+\t  </listitem>\n+\t</orderedlist>\n+      </para>\n+\n+      <para>These requirements apply to the modified work as a whole. If identifiable sections \n+\tof that work are not derived from the Program, and can be reasonably considered \n+\tindependent and separate works in themselves, then this License, and its terms, \n+\tdo not apply to those sections when you distribute them as separate works. But when \n+\tyou distribute the same sections as part of a whole which is a work based on the \n+\tProgram, the distribution of the whole must be on the terms of this License, whose \n+\tpermissions for other licensees extend to the entire whole, and thus to each and \n+\tevery part regardless of who wrote it.</para>\n+\n+      <para>Thus, it is not the intent of this section to claim rights or contest your rights \n+\tto work written entirely by you; rather, the intent is to exercise the right to control \n+\tthe distribution of derivative or collective works based on the Program.</para>\n+\n+      <para>In addition, mere aggregation of another work not based on the Program with the Program \n+\t(or with a work based on the Program) on a volume of a storage or distribution medium \n+\tdoes not bring the other work under the scope of this License.</para>\n+    </section>\n+    <section id=\"gpl-2-3\">\n+      <title>Section 3</title>\n+      <para>You may copy and distribute the Program (or a work based on it, under \n+\t<link linkend=\"gpl-2-2\">Section 2</link> in object code or executable form under the terms of \n+\t<link linkend=\"gpl-2-1\">Sections 1</link> and \n+\t<link linkend=\"gpl-2-2\">2</link> above provided that you also do one of the following:\n+\t<orderedlist numeration=\"loweralpha\">\n+\t  <listitem>\n+\t    <para>Accompany it with the complete corresponding machine-readable source code, which \n+\t      must be distributed under the terms of Sections 1 and 2 above on a medium \n+\t      customarily used for software interchange; or,</para>\n+\t  </listitem>\n+\t  <listitem>\n+\t    <para>Accompany it with a written offer, valid for at least three years, to give any \n+\t      third party, for a charge no more than your cost of physically performing source \n+\t      distribution, a complete machine-readable copy of the corresponding source code, \n+\t      to be distributed under the terms of Sections 1 and 2 above on a medium customarily \n+\t      used for software interchange; or,</para>\n+\t  </listitem>\n+\t  <listitem>\n+\t    <para>Accompany it with the information you received as to the offer to distribute \n+\t      corresponding source code. (This alternative is allowed only for noncommercial \n+\t      distribution and only if you received the program in object code or executable form \n+\t      with such an offer, in accord with Subsection b above.)</para>\n+\t  </listitem>\n+\t</orderedlist>\n+      </para>\n+\n+      <para>The source code for a work means the preferred form of the work for making modifications \n+\tto it. For an executable work, complete source code means all the source code for all modules \n+\tit contains, plus any associated interface definition files, plus the scripts used to control \n+\tcompilation and installation of the executable. However, as a special exception, the source \n+\tcode distributed need not include anything that is normally distributed (in either source or \n+\tbinary form) with the major components (compiler, kernel, and so on) of the operating system \n+\ton which the executable runs, unless that component itself accompanies the executable.</para>\n+\n+      <para>If distribution of executable or object code is made by offering access to copy from a \n+\tdesignated place, then offering equivalent access to copy the source code from the same place \n+\tcounts as distribution of the source code, even though third parties are not compelled to \n+\tcopy the source along with the object code.</para>\n+    </section>\n+    <section id=\"gpl-2-4\">\n+      <title>Section 4</title>\n+      <para>You may not copy, modify, sublicense, or distribute the Program except as expressly provided \n+\tunder this License. Any attempt otherwise to copy, modify, sublicense or distribute the \n+\tProgram is void, and will automatically terminate your rights under this License. However, \n+\tparties who have received copies, or rights, from you under this License will not have their \n+\tlicenses terminated so long as such parties remain in full compliance.</para>\n+    </section>\n+    <section id=\"gpl-2-5\">\n+      <title>Section 5</title>\n+      <para>You are not required to accept this License, since you have not signed it. However, nothing \n+\telse grants you permission to modify or distribute the Program or its derivative works. \n+\tThese actions are prohibited by law if you do not accept this License. Therefore, by modifying \n+\tor distributing the Program (or any work based on the Program), you indicate your acceptance \n+\tof this License to do so, and all its terms and conditions for copying, distributing or \n+\tmodifying the Program or works based on it.</para>\n+    </section>\n+    <section id=\"gpl-2-6\">\n+      <title>Section 6</title>\n+      <para>Each time you redistribute the Program (or any work based on the Program), the recipient \n+\tautomatically receives a license from the original licensor to copy, distribute or modify \n+\tthe Program subject to these terms and conditions. You may not impose any further restrictions \n+\ton the recipients&apos; exercise of the rights granted herein. You are not responsible for enforcing \n+\tcompliance by third parties to this License.</para>\n+    </section>\n+    <section id=\"gpl-2-7\">\n+      <title>Section 7</title>\n+      <para>If, as a consequence of a court judgment or allegation of patent infringement or for any other \n+\treason (not limited to patent issues), conditions are imposed on you (whether by court order, \n+\tagreement or otherwise) that contradict the conditions of this License, they do not excuse you \n+\tfrom the conditions of this License. If you cannot distribute so as to satisfy simultaneously \n+\tyour obligations under this License and any other pertinent obligations, then as a consequence \n+\tyou may not distribute the Program at all. For example, if a patent license would not permit \n+\troyalty-free redistribution of the Program by all those who receive copies directly or \n+\tindirectly through you, then the only way you could satisfy both it and this License would be \n+\tto refrain entirely from distribution of the Program.</para>\n+\n+      <para>If any portion of this section is held invalid or unenforceable under any particular circumstance, \n+\tthe balance of the section is intended to apply and the section as a whole is intended to apply \n+\tin other circumstances.</para>\n+\n+      <para>It is not the purpose of this section to induce you to infringe any patents or other property \n+\tright claims or to contest validity of any such claims; this section has the sole purpose of \n+\tprotecting the integrity of the free software distribution system, which is implemented by public \n+\tlicense practices. Many people have made generous contributions to the wide range of software \n+\tdistributed through that system in reliance on consistent application of that system; it is up \n+\tto the author/donor to decide if he or she is willing to distribute software through any other \n+\tsystem and a licensee cannot impose that choice.</para>\n+\n+      <para>This section is intended to make thoroughly clear what is believed to be a consequence of the \n+\trest of this License.</para>\n+    </section>\n+    <section id=\"gpl-2-8\">\n+      <title>Section 8</title>\n+      <para>If the distribution and/or use of the Program is restricted in certain countries either by patents \n+\tor by copyrighted interfaces, the original copyright holder who places the Program under this License \n+\tmay add an explicit geographical distribution limitation excluding those countries, so that \n+\tdistribution is permitted only in or among countries not thus excluded. In such case, this License \n+\tincorporates the limitation as if written in the body of this License.</para>\n+    </section>\n+    <section id=\"gpl-2-9\">\n+      <title>Section 9</title>\n+      <para>The Free Software Foundation may publish revised and/or new versions of the General Public License \n+\tfrom time to time. Such new versions will be similar in spirit to the present version, but may differ \n+\tin detail to address new problems or concerns.</para>\n+\n+      <para>Each version is given a distinguishing version number. If the Program specifies a version number of \n+\tthis License which applies to it and <quote>any later version</quote>, you have the option of following the terms \n+\tand conditions either of that version or of any later version published by the Free Software \n+\tFoundation. If the Program does not specify a version number of this License, you may choose any \n+\tversion ever published by the Free Software Foundation.</para>\n+    </section>\n+    <section id=\"gpl-2-10\">\n+      <title>Section 10</title>\n+      <para>If you wish to incorporate parts of the Program into other free programs whose distribution \n+\tconditions are different, write to the author to ask for permission. For software which is copyrighted \n+\tby the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions \n+\tfor this. Our decision will be guided by the two goals of preserving the free status of all \n+\tderivatives of our free software and of promoting the sharing and reuse of software generally.</para>\n+    </section>\n+    <section id=\"gpl-2-11\">\n+      <title>NO WARRANTY Section 11</title>\n+      <para>BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT \n+\tPERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR \n+\tOTHER PARTIES PROVIDE THE PROGRAM <quote>AS IS</quote> WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, \n+\tINCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n+\tPURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE \n+\tPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</para>\n+    </section>\n+    <section id=\"gpl-2-12\">\n+      <title>Section 12</title>\n+      <para>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR \n+\tANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU \n+\tFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE \n+\tUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED \n+\tINACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH \n+\tANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH \n+\tDAMAGES.</para>\n+\n+      <para>END OF TERMS AND CONDITIONS</para>\n+    </section>\n+  </section>\n+  <section id=\"gpl-3\">\n+    <title>How to Apply These Terms to Your New Programs</title>\n+    <para>If you develop a new program, and you want it to be of the greatest\n+      possible use to the public, the best way to achieve this is to make it\n+      free software which everyone can redistribute and change under these terms.</para>\n+\n+    <para>To do so, attach the following notices to the program.  It is safest\n+      to attach them to the start of each source file to most effectively\n+      convey the exclusion of warranty; and each file should have at least\n+      the <quote>copyright</quote> line and a pointer to where the full notice is found.</para>\n+\n+    <para>&lt;one line to give the program&apos;s name and a brief idea of what it does.&gt;\n+      Copyright (C) &lt;year&gt;    &lt;name of author&gt;</para>\n+\n+    <para>This program is free software; you can redistribute it and/or modify\n+      it under the terms of the GNU General Public License as published by\n+      the Free Software Foundation; either version 2 of the License, or\n+      (at your option) any later version.</para>\n+\n+    <para>This program is distributed in the hope that it will be useful,\n+      but WITHOUT ANY WARRANTY; without even the implied warranty of\n+      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+      GNU General Public License for more details.</para>\n+\n+    <para>You should have received a copy of the GNU General Public License\n+      along with this program; if not, write to the Free Software\n+      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA</para>\n+\n+    <para>Also add information on how to contact you by electronic and paper mail.</para>\n+\n+    <para>If the program is interactive, make it output a short notice like this\n+      when it starts in an interactive mode:</para>\n+\n+    <para>Gnomovision version 69, Copyright (C) year name of author\n+      Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type <quote>show w</quote>.\n+      This is free software, and you are welcome to redistribute it\n+      under certain conditions; type <quote>show c</quote> for details.</para>\n+\n+    <para>The hypothetical commands <quote>show w</quote> and <quote>show c</quote> should \n+      show the appropriate parts of the General Public License.  Of course, the commands you \n+      use may be called something other than <quote>show w</quote> and <quote>show c</quote>; \n+      they could even be mouse-clicks or menu items--whatever suits your program.</para>\n+\n+    <para>You should also get your employer (if you work as a programmer) or your\n+      school, if any, to sign a <quote>copyright disclaimer</quote> for the program, if\n+      necessary.  Here is a sample; alter the names:</para>\n+\n+    <para>Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n+      <quote>Gnomovision</quote> (which makes passes at compilers) written by James Hacker.</para>\n+\n+    <para>&lt;signature of Ty Coon&gt;, 1 April 1989\n+      Ty Coon, President of Vice</para>\n+\n+    <para>This General Public License does not permit incorporating your program into\n+      proprietary programs.  If your program is a subroutine library, you may\n+      consider it more useful to permit linking proprietary applications with the\n+      library.  If this is what you want to do, use the GNU Library General\n+      Public License instead of this License.</para>\n+  </section>\n+</appendix>"}, {"sha": "317b8559617d1f040421d1fffc3019741b2b2485", "filename": "libstdc++-v3/doc/xml/gnu/gpl-3.0.xml", "status": "added", "additions": 836, "deletions": 0, "changes": 836, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fgnu%2Fgpl-3.0.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fgnu%2Fgpl-3.0.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fgnu%2Fgpl-3.0.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,836 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE appendix PUBLIC \"-//OASIS//DTD DocBook XML V4.5//EN\"\n+  \"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\">\n+<appendix>\n+  <title>\n+    <acronym>GNU</acronym> General Public License version 3\n+  </title>\n+  <para>\n+    Version 3, 29 June 2007\n+  </para>\n+  <para>\n+    Copyright &copy; 2007 Free Software Foundation, Inc.\n+    <ulink url=\"http://fsf.org/\">http://fsf.org/</ulink>\n+  </para>\n+  <para>\n+    Everyone is permitted to copy and distribute verbatim copies of this license\n+    document, but changing it is not allowed.\n+  </para>\n+  <bridgehead id=\"Preamble\" renderas=\"sect1\">\n+    Preamble\n+  </bridgehead>\n+  <para>\n+    The <acronym>GNU</acronym> General Public License is a free, copyleft\n+    license for software and other kinds of works.\n+  </para>\n+  <para>\n+    The licenses for most software and other practical works are designed to\n+    take away your freedom to share and change the works.  By contrast, the\n+    <acronym>GNU</acronym> General Public License is intended to guarantee your\n+    freedom to share and change all versions of a program&mdash;to make sure it\n+    remains free software for all its users.  We, the Free Software Foundation,\n+    use the <acronym>GNU</acronym> General Public License for most of our\n+    software; it applies also to any other work released this way by its\n+    authors.  You can apply it to your programs, too.\n+  </para>\n+  <para>\n+    When we speak of free software, we are referring to freedom, not price.  Our\n+    General Public Licenses are designed to make sure that you have the freedom\n+    to distribute copies of free software (and charge for them if you wish),\n+    that you receive source code or can get it if you want it, that you can\n+    change the software or use pieces of it in new free programs, and that you\n+    know you can do these things.\n+  </para>\n+  <para>\n+    To protect your rights, we need to prevent others from denying you these\n+    rights or asking you to surrender the rights.  Therefore, you have certain\n+    responsibilities if you distribute copies of the software, or if you modify\n+    it: responsibilities to respect the freedom of others.\n+  </para>\n+  <para>\n+    For example, if you distribute copies of such a program, whether gratis or\n+    for a fee, you must pass on to the recipients the same freedoms that you\n+    received.  You must make sure that they, too, receive or can get the source\n+    code.  And you must show them these terms so they know their rights.\n+  </para>\n+  <para>\n+    Developers that use the <acronym>GNU</acronym> <acronym>GPL</acronym>\n+    protect your rights with two steps: (1) assert copyright on the software,\n+    and (2) offer you this License giving you legal permission to copy,\n+    distribute and/or modify it.\n+  </para>\n+  <para>\n+    For the developers&rsquo; and authors&rsquo; protection, the\n+    <acronym>GPL</acronym> clearly explains that there is no warranty for this\n+    free software.  For both users&rsquo; and authors&rsquo; sake, the\n+    <acronym>GPL</acronym> requires that modified versions be marked as changed,\n+    so that their problems will not be attributed erroneously to authors of\n+    previous versions.\n+  </para>\n+  <para>\n+    Some devices are designed to deny users access to install or run modified\n+    versions of the software inside them, although the manufacturer can do so.\n+    This is fundamentally incompatible with the aim of protecting users&rsquo;\n+    freedom to change the software.  The systematic pattern of such abuse occurs\n+    in the area of products for individuals to use, which is precisely where it\n+    is most unacceptable.  Therefore, we have designed this version of the\n+    <acronym>GPL</acronym> to prohibit the practice for those products.  If such\n+    problems arise substantially in other domains, we stand ready to extend this\n+    provision to those domains in future versions of the <acronym>GPL</acronym>,\n+    as needed to protect the freedom of users.\n+  </para>\n+  <para>\n+    Finally, every program is threatened constantly by software patents.  States\n+    should not allow patents to restrict development and use of software on\n+    general-purpose computers, but in those that do, we wish to avoid the\n+    special danger that patents applied to a free program could make it\n+    effectively proprietary.  To prevent this, the <acronym>GPL</acronym>\n+    assures that patents cannot be used to render the program non-free.\n+  </para>\n+  <para>\n+    The precise terms and conditions for copying, distribution and modification\n+    follow.\n+  </para>\n+  <bridgehead>\n+    TERMS AND CONDITIONS\n+  </bridgehead>\n+  <bridgehead id=\"Definitions\" renderas=\"sect1\">\n+    0. Definitions.\n+  </bridgehead>\n+  <para>\n+    &ldquo;This License&rdquo; refers to version 3 of the <acronym>GNU</acronym>\n+    General Public License.\n+  </para>\n+  <para>\n+    &ldquo;Copyright&rdquo; also means copyright-like laws that apply to other\n+    kinds of works, such as semiconductor masks.\n+  </para>\n+  <para>\n+    &ldquo;The Program&rdquo; refers to any copyrightable work licensed under\n+    this License.  Each licensee is addressed as &ldquo;you&rdquo;.\n+    &ldquo;Licensees&rdquo; and &ldquo;recipients&rdquo; may be individuals or\n+    organizations.\n+  </para>\n+  <para>\n+    To &ldquo;modify&rdquo; a work means to copy from or adapt all or part of\n+    the work in a fashion requiring copyright permission, other than the making\n+    of an exact copy.  The resulting work is called a &ldquo;modified\n+    version&rdquo; of the earlier work or a work &ldquo;based on&rdquo; the\n+    earlier work.\n+  </para>\n+  <para>\n+    A &ldquo;covered work&rdquo; means either the unmodified Program or a work\n+    based on the Program.\n+  </para>\n+  <para>\n+    To &ldquo;propagate&rdquo; a work means to do anything with it that, without\n+    permission, would make you directly or secondarily liable for infringement\n+    under applicable copyright law, except executing it on a computer or\n+    modifying a private copy.  Propagation includes copying, distribution (with\n+    or without modification), making available to the public, and in some\n+    countries other activities as well.\n+  </para>\n+  <para>\n+    To &ldquo;convey&rdquo; a work means any kind of propagation that enables\n+    other parties to make or receive copies.  Mere interaction with a user\n+    through a computer network, with no transfer of a copy, is not conveying.\n+  </para>\n+  <para>\n+    An interactive user interface displays &ldquo;Appropriate Legal\n+    Notices&rdquo; to the extent that it includes a convenient and prominently\n+    visible feature that (1) displays an appropriate copyright notice, and (2)\n+    tells the user that there is no warranty for the work (except to the extent\n+    that warranties are provided), that licensees may convey the work under this\n+    License, and how to view a copy of this License.  If the interface presents\n+    a list of user commands or options, such as a menu, a prominent item in the\n+    list meets this criterion.\n+  </para>\n+  <bridgehead id=\"SourceCode\" renderas=\"sect1\">\n+    1. Source Code.\n+  </bridgehead>\n+  <para>\n+    The &ldquo;source code&rdquo; for a work means the preferred form of the\n+    work for making modifications to it.  &ldquo;Object code&rdquo; means any\n+    non-source form of a work.\n+  </para>\n+  <para>\n+    A &ldquo;Standard Interface&rdquo; means an interface that either is an\n+    official standard defined by a recognized standards body, or, in the case of\n+    interfaces specified for a particular programming language, one that is\n+    widely used among developers working in that language.\n+  </para>\n+  <para>\n+    The &ldquo;System Libraries&rdquo; of an executable work include anything,\n+    other than the work as a whole, that (a) is included in the normal form of\n+    packaging a Major Component, but which is not part of that Major Component,\n+    and (b) serves only to enable use of the work with that Major Component, or\n+    to implement a Standard Interface for which an implementation is available\n+    to the public in source code form.  A &ldquo;Major Component&rdquo;, in this\n+    context, means a major essential component (kernel, window system, and so\n+    on) of the specific operating system (if any) on which the executable work\n+    runs, or a compiler used to produce the work, or an object code interpreter\n+    used to run it.\n+  </para>\n+  <para>\n+    The &ldquo;Corresponding Source&rdquo; for a work in object code form means\n+    all the source code needed to generate, install, and (for an executable\n+    work) run the object code and to modify the work, including scripts to\n+    control those activities.  However, it does not include the work&rsquo;s\n+    System Libraries, or general-purpose tools or generally available free\n+    programs which are used unmodified in performing those activities but which\n+    are not part of the work.  For example, Corresponding Source includes\n+    interface definition files associated with source files for the work, and\n+    the source code for shared libraries and dynamically linked subprograms that\n+    the work is specifically designed to require, such as by intimate data\n+    communication or control flow between those subprograms and other parts of\n+    the work.\n+  </para>\n+  <para>\n+    The Corresponding Source need not include anything that users can regenerate\n+    automatically from other parts of the Corresponding Source.\n+  </para>\n+  <para>\n+    The Corresponding Source for a work in source code form is that same work.\n+  </para>\n+  <bridgehead id=\"BasicPermissions\" renderas=\"sect1\">\n+    2. Basic Permissions.\n+  </bridgehead>\n+  <para>\n+    All rights granted under this License are granted for the term of copyright\n+    on the Program, and are irrevocable provided the stated conditions are met.\n+    This License explicitly affirms your unlimited permission to run the\n+    unmodified Program.  The output from running a covered work is covered by\n+    this License only if the output, given its content, constitutes a covered\n+    work.  This License acknowledges your rights of fair use or other\n+    equivalent, as provided by copyright law.\n+  </para>\n+  <para>\n+    You may make, run and propagate covered works that you do not convey,\n+    without conditions so long as your license otherwise remains in force.  You\n+    may convey covered works to others for the sole purpose of having them make\n+    modifications exclusively for you, or provide you with facilities for\n+    running those works, provided that you comply with the terms of this License\n+    in conveying all material for which you do not control copyright.  Those\n+    thus making or running the covered works for you must do so exclusively on\n+    your behalf, under your direction and control, on terms that prohibit them\n+    from making any copies of your copyrighted material outside their\n+    relationship with you.\n+  </para>\n+  <para>\n+    Conveying under any other circumstances is permitted solely under the\n+    conditions stated below.  Sublicensing is not allowed; section 10 makes it\n+    unnecessary.\n+  </para>\n+  <bridgehead id=\"Protecting\" renderas=\"sect1\">\n+    3. Protecting Users&rsquo; Legal Rights From Anti-Circumvention Law.\n+  </bridgehead>\n+  <para>\n+    No covered work shall be deemed part of an effective technological measure\n+    under any applicable law fulfilling obligations under article 11 of the WIPO\n+    copyright treaty adopted on 20 December 1996, or similar laws prohibiting or\n+    restricting circumvention of such measures.\n+  </para>\n+  <para>\n+    When you convey a covered work, you waive any legal power to forbid\n+    circumvention of technological measures to the extent such circumvention is\n+    effected by exercising rights under this License with respect to the covered\n+    work, and you disclaim any intention to limit operation or modification of\n+    the work as a means of enforcing, against the work&rsquo;s users, your or\n+    third parties&rsquo; legal rights to forbid circumvention of technological\n+    measures.\n+  </para>\n+  <bridgehead id=\"ConveyingVerbatim\" renderas=\"sect1\">\n+    4. Conveying Verbatim Copies.\n+  </bridgehead>\n+  <para>\n+    You may convey verbatim copies of the Program&rsquo;s source code as you\n+    receive it, in any medium, provided that you conspicuously and appropriately\n+    publish on each copy an appropriate copyright notice; keep intact all\n+    notices stating that this License and any non-permissive terms added in\n+    accord with section 7 apply to the code; keep intact all notices of the\n+    absence of any warranty; and give all recipients a copy of this License\n+    along with the Program.\n+  </para>\n+  <para>\n+    You may charge any price or no price for each copy that you convey, and you\n+    may offer support or warranty protection for a fee.\n+  </para>\n+  <bridgehead id=\"ConveyingModified\" renderas=\"sect1\">\n+    5. Conveying Modified Source Versions.\n+  </bridgehead>\n+  <para>\n+    You may convey a work based on the Program, or the modifications to produce\n+    it from the Program, in the form of source code under the terms of section\n+    4, provided that you also meet all of these conditions:\n+  </para>\n+  <orderedlist numeration=\"loweralpha\">\n+    <listitem>\n+      <para>\n+        The work must carry prominent notices stating that you modified it, and\n+        giving a relevant date.\n+      </para>\n+    </listitem>\n+    <listitem>\n+      <para>\n+        The work must carry prominent notices stating that it is released under\n+        this License and any conditions added under section 7.  This requirement\n+        modifies the requirement in section 4 to &ldquo;keep intact all\n+        notices&rdquo;.\n+      </para>\n+    </listitem>\n+    <listitem>\n+      <para>\n+        You must license the entire work, as a whole, under this License to\n+        anyone who comes into possession of a copy.  This License will therefore\n+        apply, along with any applicable section 7 additional terms, to the\n+        whole of the work, and all its parts, regardless of how they are\n+        packaged.  This License gives no permission to license the work in any\n+        other way, but it does not invalidate such permission if you have\n+        separately received it.\n+      </para>\n+    </listitem>\n+    <listitem>\n+      <para>\n+        If the work has interactive user interfaces, each must display\n+        Appropriate Legal Notices; however, if the Program has interactive\n+        interfaces that do not display Appropriate Legal Notices, your work need\n+        not make them do so.\n+      </para>\n+    </listitem>\n+  </orderedlist>\n+  <para>\n+    A compilation of a covered work with other separate and independent works,\n+    which are not by their nature extensions of the covered work, and which are\n+    not combined with it such as to form a larger program, in or on a volume of\n+    a storage or distribution medium, is called an &ldquo;aggregate&rdquo; if\n+    the compilation and its resulting copyright are not used to limit the access\n+    or legal rights of the compilation&rsquo;s users beyond what the individual works\n+    permit.  Inclusion of a covered work in an aggregate does not cause\n+    this License to apply to the other parts of the aggregate.\n+  </para>\n+  <bridgehead id=\"ConveyingNonSource\" renderas=\"sect1\">\n+    6. Conveying Non-Source Forms.\n+  </bridgehead>\n+  <para>\n+    You may convey a covered work in object code form under the terms of\n+    sections 4 and 5, provided that you also convey the machine-readable\n+    Corresponding Source under the terms of this License, in one of these ways:\n+  </para>\n+  <orderedlist numeration=\"loweralpha\">\n+    <listitem>\n+      <para>\n+        Convey the object code in, or embodied in, a physical product (including\n+        a physical distribution medium), accompanied by the Corresponding Source\n+        fixed on a durable physical medium customarily used for software\n+        interchange.\n+      </para>\n+    </listitem>\n+    <listitem>\n+      <para>\n+        Convey the object code in, or embodied in, a physical product (including\n+        a physical distribution medium), accompanied by a written offer, valid\n+        for at least three years and valid for as long as you offer spare parts\n+        or customer support for that product model, to give anyone who possesses\n+        the object code either (1) a copy of the Corresponding Source for all\n+        the software in the product that is covered by this License, on a\n+        durable physical medium customarily used for software interchange, for a\n+        price no more than your reasonable cost of physically performing this\n+        conveying of source, or (2) access to copy the Corresponding Source from\n+        a network server at no charge.\n+      </para>\n+    </listitem>\n+    <listitem>\n+      <para>\n+        Convey individual copies of the object code with a copy of the written\n+        offer to provide the Corresponding Source.  This alternative is allowed\n+        only occasionally and noncommercially, and only if you received the\n+        object code with such an offer, in accord with subsection 6b.\n+      </para>\n+    </listitem>\n+    <listitem>\n+      <para>\n+        Convey the object code by offering access from a designated place\n+        (gratis or for a charge), and offer equivalent access to the\n+        Corresponding Source in the same way through the same place at no\n+        further charge.  You need not require recipients to copy the\n+        Corresponding Source along with the object code.  If the place to copy\n+        the object code is a network server, the Corresponding Source may be on\n+        a different server (operated by you or a third party) that supports\n+        equivalent copying facilities, provided you maintain clear directions\n+        next to the object code saying where to find the Corresponding Source.\n+        Regardless of what server hosts the Corresponding Source, you remain\n+        obligated to ensure that it is available for as long as needed to\n+        satisfy these requirements.\n+      </para>\n+    </listitem>\n+    <listitem>\n+      <para>\n+        Convey the object code using peer-to-peer transmission, provided you\n+        inform other peers where the object code and Corresponding Source of the\n+        work are being offered to the general public at no charge under\n+        subsection 6d.\n+      </para>\n+    </listitem>\n+  </orderedlist>\n+  <para>\n+    A separable portion of the object code, whose source code is excluded from\n+    the Corresponding Source as a System Library, need not be included in\n+    conveying the object code work.\n+  </para>\n+  <para>\n+    A &ldquo;User Product&rdquo; is either (1) a &ldquo;consumer product&rdquo;,\n+    which means any tangible personal property which is normally used for\n+    personal, family, or household purposes, or (2) anything designed or sold\n+    for incorporation into a dwelling.  In determining whether a product is a\n+    consumer product, doubtful cases shall be resolved in favor of coverage.\n+    For a particular product received by a particular user, &ldquo;normally\n+    used&rdquo; refers to a typical or common use of that class of product,\n+    regardless of the status of the particular user or of the way in which the\n+    particular user actually uses, or expects or is expected to use, the\n+    product.  A product is a consumer product regardless of whether the product\n+    has substantial commercial, industrial or non-consumer uses, unless such\n+    uses represent the only significant mode of use of the product.\n+  </para>\n+  <para>\n+    &ldquo;Installation Information&rdquo; for a User Product means any methods,\n+    procedures, authorization keys, or other information required to install and\n+    execute modified versions of a covered work in that User Product from a\n+    modified version of its Corresponding Source.  The information must suffice\n+    to ensure that the continued functioning of the modified object code is in\n+    no case prevented or interfered with solely because modification has been\n+    made.\n+  </para>\n+  <para>\n+    If you convey an object code work under this section in, or with, or\n+    specifically for use in, a User Product, and the conveying occurs as part of\n+    a transaction in which the right of possession and use of the User Product\n+    is transferred to the recipient in perpetuity or for a fixed term\n+    (regardless of how the transaction is characterized), the Corresponding\n+    Source conveyed under this section must be accompanied by the Installation\n+    Information.  But this requirement does not apply if neither you nor any\n+    third party retains the ability to install modified object code on the User\n+    Product (for example, the work has been installed in\n+    <acronym>ROM</acronym>).\n+  </para>\n+  <para>\n+    The requirement to provide Installation Information does not include a\n+    requirement to continue to provide support service, warranty, or updates for\n+    a work that has been modified or installed by the recipient, or for the User\n+    Product in which it has been modified or installed.  Access to a network may\n+    be denied when the modification itself materially and adversely affects the\n+    operation of the network or violates the rules and protocols for\n+    communication across the network.\n+  </para>\n+  <para>\n+    Corresponding Source conveyed, and Installation Information provided, in\n+    accord with this section must be in a format that is publicly documented\n+    (and with an implementation available to the public in source code form),\n+    and must require no special password or key for unpacking, reading or\n+    copying.\n+  </para>\n+   <bridgehead id=\"AdditionalTerms\" renderas=\"sect1\">\n+     7. Additional Terms.\n+   </bridgehead>\n+   <para>\n+     &ldquo;Additional permissions&rdquo; are terms that supplement the terms of\n+     this License by making exceptions from one or more of its conditions.\n+     Additional permissions that are applicable to the entire Program shall be\n+     treated as though they were included in this License, to the extent that\n+     they are valid under applicable law.  If additional permissions apply only\n+     to part of the Program, that part may be used separately under those\n+     permissions, but the entire Program remains governed by this License\n+     without regard to the additional permissions.\n+   </para>\n+   <para>\n+     When you convey a copy of a covered work, you may at your option remove any\n+     additional permissions from that copy, or from any part of it.  (Additional\n+     permissions may be written to require their own removal in certain cases\n+     when you modify the work.)  You may place additional permissions on\n+     material, added by you to a covered work, for which you have or can give\n+     appropriate copyright permission.\n+   </para>\n+   <para>\n+     Notwithstanding any other provision of this License, for material you add\n+     to a covered work, you may (if authorized by the copyright holders of that\n+     material) supplement the terms of this License with terms:\n+   </para>\n+   <orderedlist numeration=\"loweralpha\">\n+     <listitem>\n+       <para>\n+         Disclaiming warranty or limiting liability differently from the terms\n+         of sections 15 and 16 of this License; or\n+       </para>\n+     </listitem>\n+     <listitem>\n+       <para>\n+         Requiring preservation of specified reasonable legal notices or author\n+         attributions in that material or in the Appropriate Legal Notices\n+         displayed by works containing it; or\n+       </para>\n+     </listitem>\n+     <listitem>\n+       <para>\n+         Prohibiting misrepresentation of the origin of that material, or\n+         requiring that modified versions of such material be marked in\n+         reasonable ways as different from the original version; or\n+       </para>\n+     </listitem>\n+     <listitem>\n+       <para>\n+         Limiting the use for publicity purposes of names of licensors or\n+         authors of the material; or\n+       </para>\n+     </listitem>\n+     <listitem>\n+       <para>\n+         Declining to grant rights under trademark law for use of some trade\n+         names, trademarks, or service marks; or\n+       </para>\n+     </listitem>\n+     <listitem>\n+       <para>\n+         Requiring indemnification of licensors and authors of that material by\n+         anyone who conveys the material (or modified versions of it) with\n+         contractual assumptions of liability to the recipient, for any\n+         liability that these contractual assumptions directly impose on those\n+         licensors and authors.\n+       </para>\n+     </listitem>\n+   </orderedlist>\n+   <para>\n+     All other non-permissive additional terms are considered &ldquo;further\n+     restrictions&rdquo; within the meaning of section 10.  If the Program as\n+     you received it, or any part of it, contains a notice stating that it is\n+     governed by this License along with a term that is a further restriction,\n+     you may remove that term.  If a license document contains a further\n+     restriction but permits relicensing or conveying under this License, you\n+     may add to a covered work material governed by the terms of that license\n+     document, provided that the further restriction does not survive such\n+     relicensing or conveying.\n+   </para>\n+   <para>\n+     If you add terms to a covered work in accord with this section, you must\n+     place, in the relevant source files, a statement of the additional terms\n+     that apply to those files, or a notice indicating where to find the\n+     applicable terms.\n+   </para>\n+   <para>\n+     Additional terms, permissive or non-permissive, may be stated in the form\n+     of a separately written license, or stated as exceptions; the above\n+     requirements apply either way.\n+   </para>\n+   <bridgehead id=\"Termination\" renderas=\"sect1\">\n+     8. Termination.\n+   </bridgehead>\n+   <para>\n+     You may not propagate or modify a covered work except as expressly provided\n+     under this License.  Any attempt otherwise to propagate or modify it is\n+     void, and will automatically terminate your rights under this License\n+     (including any patent licenses granted under the third paragraph of section\n+     11).\n+   </para>\n+   <para>\n+     However, if you cease all violation of this License, then your license from\n+     a particular copyright holder is reinstated (a) provisionally, unless and\n+     until the copyright holder explicitly and finally terminates your license,\n+     and (b) permanently, if the copyright holder fails to notify you of the\n+     violation by some reasonable means prior to 60 days after the cessation.\n+   </para>\n+   <para>\n+     Moreover, your license from a particular copyright holder is reinstated\n+     permanently if the copyright holder notifies you of the violation by some\n+     reasonable means, this is the first time you have received notice of\n+     violation of this License (for any work) from that copyright holder, and\n+     you cure the violation prior to 30 days after your receipt of the notice.\n+   </para>\n+   <para>\n+     Termination of your rights under this section does not terminate the\n+     licenses of parties who have received copies or rights from you under this\n+     License.  If your rights have been terminated and not permanently\n+     reinstated, you do not qualify to receive new licenses for the same\n+     material under section 10.\n+   </para>\n+   <bridgehead id=\"AcceptanceNotRequired\" renderas=\"sect1\">\n+     9. Acceptance Not Required for Having Copies.\n+   </bridgehead>\n+   <para>\n+     You are not required to accept this License in order to receive or run a\n+     copy of the Program.  Ancillary propagation of a covered work occurring\n+     solely as a consequence of using peer-to-peer transmission to receive a\n+     copy likewise does not require acceptance.  However, nothing other than\n+     this License grants you permission to propagate or modify any covered work.\n+     These actions infringe copyright if you do not accept this License.\n+     Therefore, by modifying or propagating a covered work, you indicate your\n+     acceptance of this License to do so.\n+   </para>\n+   <bridgehead id=\"AutomaticDownstream\" renderas=\"sect1\">\n+     10. Automatic Licensing of Downstream Recipients.\n+   </bridgehead>\n+   <para>\n+     Each time you convey a covered work, the recipient automatically receives a\n+     license from the original licensors, to run, modify and propagate that\n+     work, subject to this License.  You are not responsible for enforcing\n+     compliance by third parties with this License.\n+   </para>\n+   <para>\n+     An &ldquo;entity transaction&rdquo; is a transaction transferring control\n+     of an organization, or substantially all assets of one, or subdividing an\n+     organization, or merging organizations.  If propagation of a covered work\n+     results from an entity transaction, each party to that transaction who\n+     receives a copy of the work also receives whatever licenses to the work the\n+     party&rsquo;s predecessor in interest had or could give under the previous\n+     paragraph, plus a right to possession of the Corresponding Source of the\n+     work from the predecessor in interest, if the predecessor has it or can get\n+     it with reasonable efforts.\n+   </para>\n+   <para>\n+     You may not impose any further restrictions on the exercise of the rights\n+     granted or affirmed under this License.  For example, you may not impose a\n+     license fee, royalty, or other charge for exercise of rights granted under\n+     this License, and you may not initiate litigation (including a cross-claim\n+     or counterclaim in a lawsuit) alleging that any patent claim is infringed\n+     by making, using, selling, offering for sale, or importing the Program or\n+     any portion of it.\n+   </para>\n+  <bridgehead id=\"Patents\" renderas=\"sect1\">\n+    11. Patents.\n+  </bridgehead>\n+  <para>\n+    A &ldquo;contributor&rdquo; is a copyright holder who authorizes use under\n+    this License of the Program or a work on which the Program is based.  The\n+    work thus licensed is called the contributor&rsquo;s &ldquo;contributor\n+    version&rdquo;.\n+  </para>\n+  <para>\n+    A contributor&rsquo;s &ldquo;essential patent claims&rdquo; are all patent\n+    claims owned or controlled by the contributor, whether already acquired or\n+    hereafter acquired, that would be infringed by some manner, permitted by\n+    this License, of making, using, or selling its contributor version, but do\n+    not include claims that would be infringed only as a consequence of further\n+    modification of the contributor version.  For purposes of this definition,\n+    &ldquo;control&rdquo; includes the right to grant patent sublicenses in a\n+    manner consistent with the requirements of this License.\n+  </para>\n+  <para>\n+    Each contributor grants you a non-exclusive, worldwide, royalty-free patent\n+    license under the contributor&rsquo;s essential patent claims, to make, use,\n+    sell, offer for sale, import and otherwise run, modify and propagate the\n+    contents of its contributor version.\n+  </para>\n+  <para>\n+    In the following three paragraphs, a &ldquo;patent license&rdquo; is any\n+    express agreement or commitment, however denominated, not to enforce a\n+    patent (such as an express permission to practice a patent or covenant not\n+    to sue for patent infringement).  To &ldquo;grant&rdquo; such a patent\n+    license to a party means to make such an agreement or commitment not to\n+    enforce a patent against the party.\n+  </para>\n+  <para>\n+    If you convey a covered work, knowingly relying on a patent license, and the\n+    Corresponding Source of the work is not available for anyone to copy, free\n+    of charge and under the terms of this License, through a publicly available\n+    network server or other readily accessible means, then you must either (1)\n+    cause the Corresponding Source to be so available, or (2) arrange to deprive\n+    yourself of the benefit of the patent license for this particular work, or\n+    (3) arrange, in a manner consistent with the requirements of this License,\n+    to extend the patent license to downstream recipients.  &ldquo;Knowingly\n+    relying&rdquo; means you have actual knowledge that, but for the patent\n+    license, your conveying the covered work in a country, or your\n+    recipient&rsquo;s use of the covered work in a country, would infringe one\n+    or more identifiable patents in that country that you have reason to believe\n+    are valid.\n+  </para>\n+  <para>\n+    If, pursuant to or in connection with a single transaction or arrangement,\n+    you convey, or propagate by procuring conveyance of, a covered work, and\n+    grant a patent license to some of the parties receiving the covered work\n+    authorizing them to use, propagate, modify or convey a specific copy of the\n+    covered work, then the patent license you grant is automatically extended to\n+    all recipients of the covered work and works based on it.\n+  </para>\n+  <para>\n+    A patent license is &ldquo;discriminatory&rdquo; if it does not include\n+    within the scope of its coverage, prohibits the exercise of, or is\n+    conditioned on the non-exercise of one or more of the rights that are\n+    specifically granted under this License.  You may not convey a covered work\n+    if you are a party to an arrangement with a third party that is in the\n+    business of distributing software, under which you make payment to the third\n+    party based on the extent of your activity of conveying the work, and under\n+    which the third party grants, to any of the parties who would receive the\n+    covered work from you, a discriminatory patent license (a) in connection\n+    with copies of the covered work conveyed by you (or copies made from those\n+    copies), or (b) primarily for and in connection with specific products or\n+    compilations that contain the covered work, unless you entered into that\n+    arrangement, or that patent license was granted, prior to 28 March 2007.\n+  </para>\n+  <para>\n+    Nothing in this License shall be construed as excluding or limiting any\n+    implied license or other defenses to infringement that may otherwise be\n+    available to you under applicable patent law.\n+  </para>\n+  <bridgehead id=\"NoSurrender\" renderas=\"sect1\">\n+    12. No Surrender of Others&rsquo; Freedom.\n+  </bridgehead>\n+  <para>\n+    If conditions are imposed on you (whether by court order, agreement or\n+    otherwise) that contradict the conditions of this License, they do not\n+    excuse you from the conditions of this License.  If you cannot convey a\n+    covered work so as to satisfy simultaneously your obligations under this\n+    License and any other pertinent obligations, then as a consequence you may\n+    not convey it at all.  For example, if you agree to terms that obligate you\n+    to collect a royalty for further conveying from those to whom you convey the\n+    Program, the only way you could satisfy both those terms and this License\n+    would be to refrain entirely from conveying the Program.\n+  </para>\n+  <bridgehead id=\"UsedWithAGPL\" renderas=\"sect1\">\n+    13. Use with the <acronym>GNU</acronym> Affero General Public License.\n+  </bridgehead>\n+  <para>\n+    Notwithstanding any other provision of this License, you have permission to\n+    link or combine any covered work with a work licensed under version 3 of the\n+    <acronym>GNU</acronym> Affero General Public License into a single combined\n+    work, and to convey the resulting work.  The terms of this License will\n+    continue to apply to the part which is the covered work, but the special\n+    requirements of the <acronym>GNU</acronym> Affero General Public License,\n+    section 13, concerning interaction through a network will apply to the\n+    combination as such.\n+  </para>\n+  <bridgehead id=\"RevisedVersions\" renderas=\"sect1\">\n+    14. Revised Versions of this License.\n+  </bridgehead>\n+  <para>\n+    The Free Software Foundation may publish revised and/or new versions of the\n+    <acronym>GNU</acronym> General Public License from time to time.  Such new\n+    versions will be similar in spirit to the present version, but may differ in\n+    detail to address new problems or concerns.\n+  </para>\n+  <para>\n+    Each version is given a distinguishing version number.  If the Program\n+    specifies that a certain numbered version of the <acronym>GNU</acronym>\n+    General Public License &ldquo;or any later version&rdquo; applies to it, you\n+    have the option of following the terms and conditions either of that\n+    numbered version or of any later version published by the Free Software\n+    Foundation.  If the Program does not specify a version number of the\n+    <acronym>GNU</acronym> General Public License, you may choose any version\n+    ever published by the Free Software Foundation.\n+  </para>\n+  <para>\n+    If the Program specifies that a proxy can decide which future versions of\n+    the <acronym>GNU</acronym> General Public License can be used, that\n+    proxy&rsquo;s public statement of acceptance of a version permanently\n+    authorizes you to choose that version for the Program.\n+  </para>\n+  <para>\n+    Later license versions may give you additional or different permissions.\n+    However, no additional obligations are imposed on any author or copyright\n+    holder as a result of your choosing to follow a later version.\n+  </para>\n+  <bridgehead id=\"WarrantyDisclaimer\" renderas=\"sect1\">\n+    15. Disclaimer of Warranty.\n+  </bridgehead>\n+  <para>\n+    THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE\n+    LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\n+    OTHER PARTIES PROVIDE THE PROGRAM &ldquo;AS IS&rdquo; WITHOUT WARRANTY OF\n+    ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\n+    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n+    THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH\n+    YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL\n+    NECESSARY SERVICING, REPAIR OR CORRECTION.\n+  </para>\n+  <bridgehead id=\"LiabilityLimitation\" renderas=\"sect1\">\n+    16. Limitation of Liability.\n+  </bridgehead>\n+  <para>\n+    IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL\n+    ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE\n+    PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\n+    GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE\n+    OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA\n+    OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\n+    PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\n+    EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\n+    SUCH DAMAGES.\n+  </para>\n+  <bridgehead id=\"InterpretationSecs1516\" renderas=\"sect1\">\n+    17. Interpretation of Sections 15 and 16.\n+  </bridgehead>\n+  <para>\n+    If the disclaimer of warranty and limitation of liability provided above\n+    cannot be given local legal effect according to their terms, reviewing\n+    courts shall apply local law that most closely approximates an absolute\n+    waiver of all civil liability in connection with the Program, unless a\n+    warranty or assumption of liability accompanies a copy of the Program in\n+    return for a fee.\n+  </para>\n+  <bridgehead>\n+    END OF TERMS AND CONDITIONS\n+  </bridgehead>\n+  <bridgehead id=\"HowToApply\" renderas=\"sect1\">\n+    How to Apply These Terms to Your New Programs\n+  </bridgehead>\n+  <para>\n+    If you develop a new program, and you want it to be of the greatest possible\n+    use to the public, the best way to achieve this is to make it free software\n+    which everyone can redistribute and change under these terms.\n+  </para>\n+  <para>\n+    To do so, attach the following notices to the program.  It is safest to\n+    attach them to the start of each source file to most effectively state the\n+    exclusion of warranty; and each file should have at least the\n+    &ldquo;copyright&rdquo; line and a pointer to where the full notice is\n+    found.\n+  </para>\n+  <screen>\n+<replaceable>one line to give the program&rsquo;s name and a brief idea of what it does.</replaceable>\n+Copyright (C) <replaceable>year</replaceable> <replaceable>name of author</replaceable>\n+\n+This program is free software: you can redistribute it and/or modify\n+it under the terms of the <acronym>GNU</acronym> General Public License as published by\n+the Free Software Foundation, either version 3 of the License, or\n+(at your option) any later version.\n+\n+This program is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+<acronym>GNU</acronym> General Public License for more details.\n+\n+You should have received a copy of the <acronym>GNU</acronym> General Public License\n+along with this program.  If not, see <ulink url=\"http://www.gnu.org/licenses/\">http://www.gnu.org/licenses/</ulink>.\n+  </screen>\n+  <para>\n+    Also add information on how to contact you by electronic and paper mail.\n+  </para>\n+  <para>\n+    If the program does terminal interaction, make it output a short notice like\n+    this when it starts in an interactive mode:\n+  </para>\n+  <screen>\n+<replaceable>program</replaceable> Copyright (C) <replaceable>year</replaceable> <replaceable>name of author</replaceable>\n+This program comes with ABSOLUTELY NO WARRANTY; for details type &lsquo;<literal>show w</literal>&rsquo;.\n+This is free software, and you are welcome to redistribute it\n+under certain conditions; type &lsquo;<literal>show c</literal>&rsquo; for details.\n+  </screen>\n+  <para>\n+    The hypothetical commands &lsquo;<literal>show w</literal>&rsquo; and\n+    &lsquo;<literal>show c</literal>&rsquo; should show the appropriate parts of\n+    the General Public License.  Of course, your program&rsquo;s commands might be\n+    different; for a GUI interface, you would use an &ldquo;about box&rdquo;.\n+  </para>\n+  <para>\n+    You should also get your employer (if you work as a programmer) or school,\n+    if any, to sign a &ldquo;copyright disclaimer&rdquo; for the program, if\n+    necessary.  For more information on this, and how to apply and follow the\n+    <acronym>GNU</acronym> <acronym>GPL</acronym>, see\n+    <ulink url=\"http://www.gnu.org/licenses/\">http://www.gnu.org/licenses/</ulink>.\n+  </para>\n+  <para>\n+    The <acronym>GNU</acronym> General Public License does not permit\n+    incorporating your program into proprietary programs.  If your program is a\n+    subroutine library, you may consider it more useful to permit linking\n+    proprietary applications with the library.  If this is what you want to do,\n+    use the <acronym>GNU</acronym> Lesser General Public License instead of this\n+    License.  But first, please read <ulink\n+    url=\"http://www.gnu.org/philosophy/why-not-lgpl.html\">http://www.gnu.org/philosophy/why-not-lgpl.html</ulink>.\n+  </para>\n+</appendix>"}, {"sha": "a62d28ce9ddf00a2689bb05ab892e6e7798e8bb0", "filename": "libstdc++-v3/doc/xml/images/confdeps.dot", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fimages%2Fconfdeps.dot", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fimages%2Fconfdeps.dot", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fimages%2Fconfdeps.dot?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,14 @@\n+# Blatantly ripped out of the graphviz examples and modified.  -pme\n+digraph v3conf {\n+    size=\"6,6\";\n+    node [color=lightblue2, style=filled];\n+    \"aclocal.m4\" -> \"acinclude.m4\";\n+    \"configure\" -> \"aclocal.m4\";\n+    \"configure\" -> \"configure.ac\";\n+    \"configure\" -> \"crossconfig.m4\";\n+    \"configure\" -> \"linkage.m4\";\n+    \"[*/]Makefile.in\" -> \"Makefile.am\";\n+    \"[*/]Makefile.in\" -> \"configure.ac\";\n+    \"config.h.in\" -> \"acconfig.h\";\n+    \"config.h.in\" -> \"configure.ac\";\n+}"}, {"sha": "5075aa869b158b79a04a48023f24817743615807", "filename": "libstdc++-v3/doc/xml/images/confdeps.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fimages%2Fconfdeps.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fimages%2Fconfdeps.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fimages%2Fconfdeps.png?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c"}, {"sha": "c11da9507dbfbfbea99a38774eea77b26d323db3", "filename": "libstdc++-v3/doc/xml/manual/abi.xml", "status": "added", "additions": 1130, "deletions": 0, "changes": 1130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fabi.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fabi.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fabi.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,1130 @@\n+<sect1 id=\"appendix.porting.abi\" xreflabel=\"abi\">\n+<?dbhtml filename=\"abi.html\"?>\n+ \n+<sect1info>\n+  <keywordset>\n+    <keyword>\n+      C++\n+    </keyword>\n+    <keyword>\n+      ABI\n+    </keyword>\n+    <keyword>\n+      version\n+    </keyword>\n+    <keyword>\n+      dynamic\n+    </keyword>\n+    <keyword>\n+      shared\n+    </keyword>\n+  </keywordset>\n+</sect1info>\n+\n+<title>ABI Policy and Guidelines</title>\n+\n+<para>\n+</para>\n+\n+<sect2 id=\"abi.cxx_interface\" xreflabel=\"abi.cxx_interface\">\n+<title>The C++ Interface</title>\n+\n+<para>\n+  C++ applications often dependent on specific language support\n+  routines, say for throwing exceptions, or catching exceptions, and\n+  perhaps also dependent on features in the C++ Standard Library.\n+</para>\n+\n+<para> \n+  The C++ Standard Library has many include files, types defined in\n+  those include files, specific named functions, and other\n+  behavior. The text of these behaviors, as written in source include\n+  files, is called the Application Programing Interface, or API.\n+</para>\n+\n+<para> \n+  Furthermore, C++ source that is compiled into object files is\n+  transformed by the compiler: it arranges objects with specific\n+  alignment and in a particular layout, mangling names according to a\n+  well-defined algorithm, has specific arrangements for the support of\n+  virtual functions, etc. These details are defined as the compiler\n+  Application Binary Interface, or ABI. The GNU C++ compiler uses an\n+  industry-standard C++ ABI starting with version 3. Details can be\n+  found in the <ulink\n+  url=\"http://www.codesourcery.com/cxx-abi/abi.html\"> ABI\n+  specification</ulink>.\n+</para>\n+\n+<para>\n+ The GNU C++ compiler, g++, has a compiler command line option to\n+  switch between various different C++ ABIs. This explicit version\n+  switch is the flag <code>-fabi-version</code>. In addition, some\n+  g++ command line options may change the ABI as a side-effect of\n+  use. Such flags include <code>-fpack-struct</code> and\n+  <code>-fno-exceptions</code>, but include others: see the complete\n+  list in the GCC manual under the heading <ulink url=\"http://gcc.gnu.org/onlinedocs/gcc/Code-Gen-Options.html#Code%20Gen%20Options\">Options\n+  for Code Generation Conventions</ulink>.\n+</para>\n+\n+<para> \n+  The configure options used when building a specific libstdc++\n+  version may also impact the resulting library ABI. The available\n+  configure options, and their impact on the library ABI, are\n+  documented\n+<ulink url=\"http://gcc.gnu.org/onlinedocs/libstdc++/configopts.html\">\n+here</ulink>.\n+</para>\n+\n+<para> Putting all of these ideas together results in the C++ Standard\n+library ABI, which is the compilation of a given library API by a\n+given compiler ABI. In a nutshell:\n+</para>\n+\n+<para>\n+  <quote>\n+    library API + compiler ABI = library ABI\n+  </quote>\n+</para>\n+\n+<para>\n+ The library ABI is mostly of interest for end-users who have\n+ unresolved symbols and are linking dynamically to the C++ Standard\n+ library, and who thus must be careful to compile their application\n+ with a compiler that is compatible with the available C++ Standard\n+ library binary. In this case, compatible is defined with the equation\n+ above: given an application compiled with a given compiler ABI and\n+ library API, it will work correctly with a Standard C++ Library\n+ created with the same constraints.\n+</para>\n+\n+<para>\n+  To use a specific version of the C++ ABI, one must use a\n+  corresponding GNU C++ toolchain (Ie, g++ and libstdc++) that\n+  implements the C++ ABI in question.\n+</para>\n+\n+</sect2>\n+\n+<sect2 id=\"abi.versioning\" xreflabel=\"abi.versioning\">\n+<title>Versioning</title>\n+\n+<para> The C++ interface has evolved throughout the history of the GNU\n+C++ toolchain. With each release, various details have been changed so\n+as to give distinct versions to the C++ interface.\n+</para>\n+  \n+  <sect3 id=\"abi.versioning.goals\" xreflabel=\"abi.versioning.goals\">\n+    <title>Goals</title>\n+\n+<para>Extending existing, stable ABIs. Versioning gives subsequent stable\n+releases series libraries the ability to add new symbols and add\n+functionality, all the while retaining backwards compatibility with\n+the previous releases in the series. Note: the reverse is not true. It\n+is not possible to take binaries linked with the latest version of a\n+release series (if symbols have been added) and expect the initial\n+release of the series to remain link compatible.\n+</para>\n+\n+<para>Allows multiple, incompatible ABIs to coexist at the same time.\n+</para>\n+  </sect3>\n+\n+  <sect3 id=\"abi.versioning.history\" xreflabel=\"abi.versioning.history\">\n+    <title>History</title>\n+\n+<para>\n+ How can this complexity be managed? What does C++ versioning mean?\n+  Because library and compiler changes often make binaries compiled\n+  with one version of the GNU tools incompatible with binaries\n+  compiled with other (either newer or older) versions of the same GNU\n+  tools, specific techniques are used to make managing this complexity\n+  easier.\n+</para>\n+\n+<para>\n+  The following techniques are used:\n+</para>\n+\n+  <orderedlist>\n+\n+    <listitem><para>Release versioning on the libgcc_s.so binary. </para>\n+\n+    <para>This is implemented via file names and the ELF DT_SONAME\n+    mechanism (at least on ELF systems). It is versioned as follows:\n+    </para>\n+\n+    <itemizedlist>\n+    <listitem><para>gcc-3.0.0: libgcc_s.so.1</para></listitem>\n+    <listitem><para>gcc-3.0.1: libgcc_s.so.1</para></listitem>\n+    <listitem><para>gcc-3.0.2: libgcc_s.so.1</para></listitem>\n+    <listitem><para>gcc-3.0.3: libgcc_s.so.1</para></listitem>\n+    <listitem><para>gcc-3.0.4: libgcc_s.so.1</para></listitem>\n+    <listitem><para>gcc-3.1.0: libgcc_s.so.1</para></listitem>\n+    <listitem><para>gcc-3.1.1: libgcc_s.so.1</para></listitem>\n+    <listitem><para>gcc-3.2.0: libgcc_s.so.1</para></listitem>\n+    <listitem><para>gcc-3.2.1: libgcc_s.so.1</para></listitem>\n+    <listitem><para>gcc-3.2.2: libgcc_s.so.1</para></listitem>\n+    <listitem><para>gcc-3.2.3: libgcc_s.so.1</para></listitem>\n+    <listitem><para>gcc-3.3.0: libgcc_s.so.1</para></listitem>\n+    <listitem><para>gcc-3.3.1: libgcc_s.so.1</para></listitem>\n+    <listitem><para>gcc-3.3.2: libgcc_s.so.1</para></listitem>\n+    <listitem><para>gcc-3.3.3: libgcc_s.so.1</para></listitem>\n+    <listitem><para>gcc-3.4.x, gcc-4.0.x, gcc-4.1.x, gcc-4.2.x: on m68k-linux and\n+    hppa-linux this is either libgcc_s.so.1 (when configuring\n+    <code>--with-sjlj-exceptions</code>) or libgcc_s.so.2. For all\n+    others, this is libgcc_s.so.1.  </para>\n+    </listitem> \n+    </itemizedlist>\n+    \n+  </listitem>\n+\n+    <listitem><para>Symbol versioning on the libgcc_s.so binary.</para>\n+\n+    <para>It is versioned with the following labels and version\n+   definitions, where the version definition is the maximum for a\n+   particular release. Labels are cumulative. If a particular release\n+   is not listed, it has the same version labels as the preceeding\n+   release.</para>\n+\n+    <para>This corresponds to the mapfile: gcc/libgcc-std.ver</para>\n+    <itemizedlist>\n+    <listitem><para>gcc-3.0.0: GCC_3.0</para></listitem>\n+    <listitem><para>gcc-3.3.0: GCC_3.3</para></listitem>\n+    <listitem><para>gcc-3.3.1: GCC_3.3.1</para></listitem>\n+    <listitem><para>gcc-3.3.2: GCC_3.3.2</para></listitem>\n+    <listitem><para>gcc-3.3.4: GCC_3.3.4</para></listitem>\n+    <listitem><para>gcc-3.4.0: GCC_3.4</para></listitem>\n+    <listitem><para>gcc-3.4.2: GCC_3.4.2</para></listitem>\n+    <listitem><para>gcc-3.4.4: GCC_3.4.4</para></listitem>\n+    <listitem><para>gcc-4.0.0: GCC_4.0.0</para></listitem>\n+    <listitem><para>gcc-4.1.0: GCC_4.1.0</para></listitem>\n+    <listitem><para>gcc-4.2.0: GCC_4.2.0</para></listitem>\n+    </itemizedlist>\n+    </listitem>\n+\n+    <listitem><para>Release versioning on the libstdc++.so binary, implemented in the same was as the libgcc_s.so binary, above.</para>\n+\n+    <para>It is versioned as follows:\n+    </para>\n+    <itemizedlist>\n+    <listitem><para>gcc-3.0.0: libstdc++.so.3.0.0</para></listitem>\n+    <listitem><para>gcc-3.0.1: libstdc++.so.3.0.1</para></listitem>\n+    <listitem><para>gcc-3.0.2: libstdc++.so.3.0.2</para></listitem>\n+    <listitem><para>gcc-3.0.3: libstdc++.so.3.0.2 (Error should be libstdc++.so.3.0.3)</para></listitem>\n+    <listitem><para>gcc-3.0.4: libstdc++.so.3.0.4</para></listitem>\n+    <listitem><para>gcc-3.1.0: libstdc++.so.4.0.0</para></listitem>\n+    <listitem><para>gcc-3.1.1: libstdc++.so.4.0.1</para></listitem>\n+    <listitem><para>gcc-3.2.0: libstdc++.so.5.0.0</para></listitem>\n+    <listitem><para>gcc-3.2.1: libstdc++.so.5.0.1</para></listitem>\n+    <listitem><para>gcc-3.2.2: libstdc++.so.5.0.2</para></listitem>\n+    <listitem><para>gcc-3.2.3: libstdc++.so.5.0.3 (Not strictly required)</para></listitem>\n+    <listitem><para>gcc-3.3.0: libstdc++.so.5.0.4</para></listitem>\n+    <listitem><para>gcc-3.3.1: libstdc++.so.5.0.5</para></listitem>\n+    <listitem><para>gcc-3.3.2: libstdc++.so.5.0.5</para></listitem>\n+    <listitem><para>gcc-3.3.3: libstdc++.so.5.0.5</para></listitem>\n+    <listitem><para>gcc-3.4.0: libstdc++.so.6.0.0</para></listitem>\n+    <listitem><para>gcc-3.4.1: libstdc++.so.6.0.1</para></listitem>\n+    <listitem><para>gcc-3.4.2: libstdc++.so.6.0.2</para></listitem>\n+    <listitem><para>gcc-3.4.3: libstdc++.so.6.0.3</para></listitem>\n+    <listitem><para>gcc-3.4.4: libstdc++.so.6.0.3</para></listitem>\n+    <listitem><para>gcc-3.4.5: libstdc++.so.6.0.3</para></listitem>\n+    <listitem><para>gcc-3.4.6: libstdc++.so.6.0.3</para></listitem>\n+    <listitem><para>gcc-4.0.0: libstdc++.so.6.0.4</para></listitem>\n+    <listitem><para>gcc-4.0.1: libstdc++.so.6.0.5</para></listitem>\n+    <listitem><para>gcc-4.0.2: libstdc++.so.6.0.6</para></listitem>\n+    <listitem><para>gcc-4.0.3: libstdc++.so.6.0.7</para></listitem>\n+    <listitem><para>gcc-4.1.0: libstdc++.so.6.0.7</para></listitem>\n+    <listitem><para>gcc-4.1.1: libstdc++.so.6.0.8</para></listitem>\n+    <listitem><para>gcc-4.1.2: libstdc++.so.6.0.8</para></listitem>\n+    <listitem><para>gcc-4.2.0: libstdc++.so.6.0.9</para></listitem>\n+    </itemizedlist>\n+    </listitem>\n+\n+    <listitem><para>Symbol versioning on the libstdc++.so binary.</para>\n+\n+    <para>mapfile: libstdc++/config/linker-map.gnu</para>\n+    <para>It is versioned with the following labels and version\n+   definitions, where the version definition is the maximum for a\n+   particular release. Note, only symbol which are newly introduced\n+   will use the maximum version definition. Thus, for release series\n+   with the same label, but incremented version definitions, the later\n+   release has both versions. (An example of this would be the\n+   gcc-3.2.1 release, which has GLIBCPP_3.2.1 for new symbols and\n+   GLIBCPP_3.2 for symbols that were introduced in the gcc-3.2.0\n+   release.) If a particular release is not listed, it has the same\n+   version labels as the preceeding release.\n+   </para>\n+    <itemizedlist>\n+    <listitem><para>gcc-3.0.0: (Error, not versioned)</para></listitem>\n+    <listitem><para>gcc-3.0.1: (Error, not versioned)</para></listitem>\n+    <listitem><para>gcc-3.0.2: (Error, not versioned)</para></listitem>\n+    <listitem><para>gcc-3.0.3: (Error, not versioned)</para></listitem>\n+    <listitem><para>gcc-3.0.4: (Error, not versioned)</para></listitem>\n+    <listitem><para>gcc-3.1.0: GLIBCPP_3.1, CXXABI_1</para></listitem>\n+    <listitem><para>gcc-3.1.1: GLIBCPP_3.1, CXXABI_1</para></listitem>\n+    <listitem><para>gcc-3.2.0: GLIBCPP_3.2, CXXABI_1.2</para></listitem>\n+    <listitem><para>gcc-3.2.1: GLIBCPP_3.2.1, CXXABI_1.2</para></listitem>\n+    <listitem><para>gcc-3.2.2: GLIBCPP_3.2.2, CXXABI_1.2</para></listitem>\n+    <listitem><para>gcc-3.2.3: GLIBCPP_3.2.2, CXXABI_1.2</para></listitem>\n+    <listitem><para>gcc-3.3.0: GLIBCPP_3.2.2, CXXABI_1.2.1</para></listitem>\n+    <listitem><para>gcc-3.3.1: GLIBCPP_3.2.3, CXXABI_1.2.1</para></listitem>\n+    <listitem><para>gcc-3.3.2: GLIBCPP_3.2.3, CXXABI_1.2.1</para></listitem>\n+    <listitem><para>gcc-3.3.3: GLIBCPP_3.2.3, CXXABI_1.2.1</para></listitem>\n+    <listitem><para>gcc-3.4.0: GLIBCXX_3.4, CXXABI_1.3</para></listitem>\n+    <listitem><para>gcc-3.4.1: GLIBCXX_3.4.1, CXXABI_1.3</para></listitem>\n+    <listitem><para>gcc-3.4.2: GLIBCXX_3.4.2</para></listitem>\n+    <listitem><para>gcc-3.4.3: GLIBCXX_3.4.3</para></listitem>\n+    <listitem><para>gcc-4.0.0: GLIBCXX_3.4.4, CXXABI_1.3.1</para></listitem>\n+    <listitem><para>gcc-4.0.1: GLIBCXX_3.4.5</para></listitem>\n+    <listitem><para>gcc-4.0.2: GLIBCXX_3.4.6</para></listitem>\n+    <listitem><para>gcc-4.0.3: GLIBCXX_3.4.7</para></listitem>\n+    <listitem><para>gcc-4.1.1: GLIBCXX_3.4.8</para></listitem>\n+    <listitem><para>gcc-4.2.0: GLIBCXX_3.4.9</para></listitem>\n+    </itemizedlist>\n+    </listitem>\n+  \n+    <listitem>\n+    <para>Incremental bumping of a compiler pre-defined macro,\n+    __GXX_ABI_VERSION. This macro is defined as the version of the\n+    compiler v3 ABI, with g++ 3.0.x being version 100. This macro will\n+    be automatically defined whenever g++ is used (the curious can\n+    test this by invoking g++ with the '-v' flag.)\n+    </para>\n+    \n+    <para>\n+    This macro was defined in the file \"lang-specs.h\" in the gcc/cp directory.\n+    Later versions defined it in \"c-common.c\" in the gcc directory, and from\n+    G++ 3.4 it is defined in c-cppbuiltin.c and its value determined by the\n+    '-fabi-version' command line option.\n+    </para>\n+\n+    <para>\n+    It is versioned as follows, where 'n' is given by '-fabi-version=n':\n+    </para>\n+    <itemizedlist>\n+    <listitem><para>gcc-3.0.x: 100</para></listitem>\n+    <listitem><para>gcc-3.1.x: 100 (Error, should be 101)</para></listitem>\n+    <listitem><para>gcc-3.2.x: 102</para></listitem>\n+    <listitem><para>gcc-3.3.x: 102</para></listitem>\n+    <listitem><para>gcc-3.4.x, gcc-4.0.x, gcc-4.1.x, gcc-4.2.x: 102 (when n=1)</para></listitem>\n+    <listitem><para>gcc-3.4.x, gcc-4.0.x, gcc-4.1.x, gcc-4.2.x: 1000 + n (when n&gt;1)</para></listitem>\n+    <listitem><para>gcc-3.4.x, gcc-4.0.x, gcc-4.1.x, gcc-4.2.x: 999999 (when n=0)</para></listitem>\n+    </itemizedlist>\n+    <para></para>\n+    </listitem>\n+\n+    <listitem>\n+    <para>Changes to the default compiler option for\n+    <code>-fabi-version</code>.\n+    </para>\n+   <para>\n+    It is versioned as follows:\n+    </para>\n+    <itemizedlist>\n+    <listitem><para>gcc-3.0.x: (Error, not versioned) </para></listitem>\n+    <listitem><para>gcc-3.1.x: (Error, not versioned) </para></listitem>\n+    <listitem><para>gcc-3.2.x: <code>-fabi-version=1</code></para></listitem>\n+    <listitem><para>gcc-3.3.x: <code>-fabi-version=1</code></para></listitem>\n+    <listitem><para>gcc-3.4.x, gcc-4.0.x, gcc-4.1.x, gcc-4.2.x: <code>-fabi-version=2</code></para></listitem>\n+    </itemizedlist>\n+    <para></para>\n+    </listitem>\n+\n+   <listitem>\n+    <para>Incremental bumping of a library pre-defined macro. For releases\n+    before 3.4.0, the macro is __GLIBCPP__. For later releases, it's\n+    __GLIBCXX__. (The libstdc++ project generously changed from CPP to\n+    CXX throughout its source to allow the \"C\" pre-processor the CPP\n+    macro namespace.) These macros are defined as the date the library\n+    was released, in compressed ISO date format, as an unsigned long.\n+    </para>\n+\n+    <para>\n+    This macro is defined in the file \"c++config\" in the\n+    \"libstdc++/include/bits\" directory. (Up to gcc-4.1.0, it was\n+    changed every night by an automated script. Since gcc-4.1.0, it is\n+    the same value as gcc/DATESTAMP.)\n+    </para>\n+    <para>\n+    It is versioned as follows:\n+    </para>\n+    <itemizedlist>\n+    <listitem><para>gcc-3.0.0: 20010615</para></listitem>\n+    <listitem><para>gcc-3.0.1: 20010819</para></listitem>\n+    <listitem><para>gcc-3.0.2: 20011023</para></listitem>\n+    <listitem><para>gcc-3.0.3: 20011220</para></listitem>\n+    <listitem><para>gcc-3.0.4: 20020220</para></listitem>\n+    <listitem><para>gcc-3.1.0: 20020514</para></listitem>\n+    <listitem><para>gcc-3.1.1: 20020725</para></listitem>\n+    <listitem><para>gcc-3.2.0: 20020814</para></listitem>\n+    <listitem><para>gcc-3.2.1: 20021119</para></listitem>\n+    <listitem><para>gcc-3.2.2: 20030205</para></listitem>\n+    <listitem><para>gcc-3.2.3: 20030422</para></listitem>\n+    <listitem><para>gcc-3.3.0: 20030513</para></listitem>\n+    <listitem><para>gcc-3.3.1: 20030804</para></listitem>\n+    <listitem><para>gcc-3.3.2: 20031016</para></listitem>\n+    <listitem><para>gcc-3.3.3: 20040214</para></listitem>\n+    <listitem><para>gcc-3.4.0: 20040419</para></listitem>\n+    <listitem><para>gcc-3.4.1: 20040701</para></listitem>\n+    <listitem><para>gcc-3.4.2: 20040906</para></listitem>\n+    <listitem><para>gcc-3.4.3: 20041105</para></listitem>\n+    <listitem><para>gcc-3.4.4: 20050519</para></listitem>\n+    <listitem><para>gcc-3.4.5: 20051201</para></listitem>\n+    <listitem><para>gcc-3.4.6: 20060306</para></listitem>\n+    <listitem><para>gcc-4.0.0: 20050421</para></listitem>\n+    <listitem><para>gcc-4.0.1: 20050707</para></listitem>\n+    <listitem><para>gcc-4.0.2: 20050921</para></listitem>\n+    <listitem><para>gcc-4.0.3: 20060309</para></listitem>\n+    <listitem><para>gcc-4.1.0: 20060228</para></listitem>\n+    <listitem><para>gcc-4.1.1: 20060524</para></listitem>\n+    <listitem><para>gcc-4.1.2: 20070214</para></listitem>\n+    <listitem><para>gcc-4.2.0: 20070514</para></listitem>\n+    </itemizedlist>\n+    <para></para>\n+    </listitem>\n+\n+    <listitem>\n+    <para>\n+    Incremental bumping of a library pre-defined macro,\n+    _GLIBCPP_VERSION. This macro is defined as the released version of\n+    the library, as a string literal. This is only implemented in\n+    gcc-3.1.0 releases and higher, and is deprecated in 3.4 (where it\n+    is called _GLIBCXX_VERSION).\n+    </para>\n+\n+    <para>\n+    This macro is defined in the file \"c++config\" in the\n+    \"libstdc++/include/bits\" directory and is generated\n+    automatically by autoconf as part of the configure-time generation\n+    of config.h.\n+    </para>\n+\n+    <para>\n+    It is versioned as follows:\n+    </para>\n+    <itemizedlist>\n+    <listitem><para>gcc-3.0.0: \"3.0.0\"</para></listitem>\n+    <listitem><para>gcc-3.0.1: \"3.0.0\" (Error, should be \"3.0.1\")</para></listitem>\n+    <listitem><para>gcc-3.0.2: \"3.0.0\" (Error, should be \"3.0.2\")</para></listitem>\n+    <listitem><para>gcc-3.0.3: \"3.0.0\" (Error, should be \"3.0.3\")</para></listitem>\n+    <listitem><para>gcc-3.0.4: \"3.0.0\" (Error, should be \"3.0.4\")</para></listitem>\n+    <listitem><para>gcc-3.1.0: \"3.1.0\"</para></listitem>\n+    <listitem><para>gcc-3.1.1: \"3.1.1\"</para></listitem>\n+    <listitem><para>gcc-3.2.0: \"3.2\"</para></listitem>\n+    <listitem><para>gcc-3.2.1: \"3.2.1\"</para></listitem>\n+    <listitem><para>gcc-3.2.2: \"3.2.2\"</para></listitem>\n+    <listitem><para>gcc-3.2.3: \"3.2.3\"</para></listitem>\n+    <listitem><para>gcc-3.3.0: \"3.3\"</para></listitem>\n+    <listitem><para>gcc-3.3.1: \"3.3.1\"</para></listitem>\n+    <listitem><para>gcc-3.3.2: \"3.3.2\"</para></listitem>\n+    <listitem><para>gcc-3.3.3: \"3.3.3\"</para></listitem>\n+    <listitem><para>gcc-3.4.x: \"version-unused\"</para></listitem>\n+    <listitem><para>gcc-4.0.x: \"version-unused\"</para></listitem>\n+    <listitem><para>gcc-4.1.x: \"version-unused\"</para></listitem>\n+    <listitem><para>gcc-4.2.x: \"version-unused\"</para></listitem>\n+    </itemizedlist>\n+    <para></para>\n+    </listitem>\n+\n+    <listitem>\n+    <para>\n+    Matching each specific C++ compiler release to a specific set of\n+    C++ include files. This is only implemented in gcc-3.1.1 releases\n+    and higher.\n+    </para>\n+    <para>\n+    All C++ includes are installed in include/c++, then nest in a\n+    directory hierarchy corresponding to the C++ compiler's released\n+    version. This version corresponds to the variable \"gcc_version\" in\n+    \"libstdc++/acinclude.m4,\" and more details can be found in that\n+    file's macro GLIBCXX_CONFIGURE (GLIBCPP_CONFIGURE before gcc-3.4.0).\n+    </para>\n+    <para>\n+    C++ includes are versioned as follows:\n+    </para>\n+    <itemizedlist>\n+    <listitem><para>gcc-3.0.0: include/g++-v3</para></listitem>\n+    <listitem><para>gcc-3.0.1: include/g++-v3</para></listitem>\n+    <listitem><para>gcc-3.0.2: include/g++-v3</para></listitem>\n+    <listitem><para>gcc-3.0.3: include/g++-v3</para></listitem>\n+    <listitem><para>gcc-3.0.4: include/g++-v3</para></listitem>\n+    <listitem><para>gcc-3.1.0: include/g++-v3</para></listitem>\n+    <listitem><para>gcc-3.1.1: include/c++/3.1.1</para></listitem>\n+    <listitem><para>gcc-3.2.0: include/c++/3.2</para></listitem>\n+    <listitem><para>gcc-3.2.1: include/c++/3.2.1</para></listitem>\n+    <listitem><para>gcc-3.2.2: include/c++/3.2.2</para></listitem>\n+    <listitem><para>gcc-3.2.3: include/c++/3.2.3</para></listitem>\n+    <listitem><para>gcc-3.3.0: include/c++/3.3</para></listitem>\n+    <listitem><para>gcc-3.3.1: include/c++/3.3.1</para></listitem>\n+    <listitem><para>gcc-3.3.2: include/c++/3.3.2</para></listitem>\n+    <listitem><para>gcc-3.3.3: include/c++/3.3.3</para></listitem>\n+    <listitem><para>gcc-3.4.0: include/c++/3.4.0</para></listitem>\n+    <listitem><para>gcc-3.4.1: include/c++/3.4.1</para></listitem>\n+    <listitem><para>gcc-3.4.2: include/c++/3.4.2</para></listitem>\n+    <listitem><para>gcc-3.4.3: include/c++/3.4.3</para></listitem>\n+    <listitem><para>gcc-3.4.4: include/c++/3.4.4</para></listitem>\n+    <listitem><para>gcc-3.4.5: include/c++/3.4.5</para></listitem>\n+    <listitem><para>gcc-3.4.6: include/c++/3.4.6</para></listitem>\n+    <listitem><para>gcc-4.0.0: include/c++/4.0.0</para></listitem>\n+    <listitem><para>gcc-4.0.1: include/c++/4.0.1</para></listitem>\n+    <listitem><para>gcc-4.0.2: include/c++/4.0.2</para></listitem>\n+    <listitem><para>gcc-4.0.3: include/c++/4.0.3</para></listitem>\n+    <listitem><para>gcc-4.1.0: include/c++/4.1.0</para></listitem>\n+    <listitem><para>gcc-4.1.1: include/c++/4.1.1</para></listitem>\n+    <listitem><para>gcc-4.1.2: include/c++/4.1.2</para></listitem>\n+    <listitem><para>gcc-4.2.0: include/c++/4.2.0</para></listitem>\n+    </itemizedlist>\n+    <para></para>\n+    </listitem>\n+  </orderedlist>\n+\n+<para>\n+  Taken together, these techniques can accurately specify interface\n+  and implementation changes in the GNU C++ tools themselves. Used\n+  properly, they allow both the GNU C++ tools implementation, and\n+  programs using them, an evolving yet controlled development that\n+  maintains backward compatibility.\n+</para>\n+\n+\n+  </sect3>\n+\n+  <sect3 id=\"abi.versioning.prereq\" xreflabel=\"abi.versioning.prereq\">\n+    <title>Prerequisites</title>\n+    <para>\n+      Minimum environment that supports a versioned ABI: A supported\n+      dynamic linker, a GNU linker of sufficient vintage to understand\n+      demangled C++ name globbing (ld), a shared executable compiled\n+      with g++, and shared libraries (libgcc_s, libstdc++) compiled by\n+      a compiler (g++) with a compatible ABI. Phew.\n+    </para>\n+\n+    <para>\n+      On top of all that, an additional constraint: libstdc++ did not\n+      attempt to version symbols (or age gracefully, really) until\n+      version 3.1.0.\n+    </para>\n+\n+    <para>\n+      Most modern Linux and BSD versions, particularly ones using\n+      gcc-3.1.x tools and more recent vintages, will meet the\n+      requirements above.\n+    </para>\n+  </sect3>\n+\n+  <sect3 id=\"abi.versioning.config\" xreflabel=\"abi.versioning.config\">\n+    <title>Configuring</title>\n+\n+    <para>\n+      It turns out that most of the configure options that change\n+      default behavior will impact the mangled names of exported\n+      symbols, and thus impact versioning and compatibility.\n+    </para>\n+\n+    <para>\n+      For more information on configure options, including ABI\n+      impacts, see:\n+      http://gcc.gnu.org/onlinedocs/libstdc++/configopts.html\n+    </para>\n+\n+    <para>\n+      There is one flag that explicitly deals with symbol versioning:\n+      --enable-symvers.\n+    </para>\n+\n+    <para>\n+      In particular, libstdc++/acinclude.m4 has a macro called\n+      GLIBCXX_ENABLE_SYMVERS that defaults to yes (or the argument\n+      passed in via --enable-symvers=foo). At that point, the macro\n+      attempts to make sure that all the requirement for symbol\n+      versioning are in place. For more information, please consult\n+      acinclude.m4.\n+    </para>\n+  </sect3>\n+\n+  <sect3 id=\"abi.versioning.active\" xreflabel=\"abi.versioning.active\">\n+    <title>Checking Active</title>\n+\n+    <para>\n+      When the GNU C++ library is being built with symbol versioning\n+      on, you should see the following at configure time for\n+      libstdc++:\n+    </para>\n+\n+<screen>\n+<computeroutput>\n+  checking versioning on shared library symbols... gnu\n+</computeroutput>\n+</screen>\n+\n+<para>\n+  If you don't see this line in the configure output, or if this line\n+  appears but the last word is 'no', then you are out of luck.\n+</para>\n+\n+<para>\n+  If the compiler is pre-installed, a quick way to test is to compile\n+  the following (or any) simple C++ file and link it to the shared\n+  libstdc++ library:\n+</para>\n+\n+<programlisting>\n+#include &lt;iostream&gt;\n+\n+int main()\n+{ std::cout &lt;&lt; \"hello\" &lt;&lt; std::endl; return 0; }\n+\n+%g++ hello.cc -o hello.out\n+\n+%ldd hello.out\n+        libstdc++.so.5 =&gt; /usr/lib/libstdc++.so.5 (0x00764000)\n+        libm.so.6 =&gt; /lib/tls/libm.so.6 (0x004a8000)\n+        libgcc_s.so.1 =&gt; /mnt/hd/bld/gcc/gcc/libgcc_s.so.1 (0x40016000)\n+        libc.so.6 =&gt; /lib/tls/libc.so.6 (0x0036d000)\n+        /lib/ld-linux.so.2 =&gt; /lib/ld-linux.so.2 (0x00355000)\n+\n+%nm hello.out\n+</programlisting>\n+\n+<para>\n+If you see symbols in the resulting output with \"GLIBCXX_3\" as part\n+of the name, then the executable is versioned. Here's an example:\n+</para>\n+\n+<para>\n+   <code>U _ZNSt8ios_base4InitC1Ev@@GLIBCXX_3.4</code>\n+</para>\n+\n+  </sect3>\n+</sect2>\n+\n+<sect2 id=\"abi.changes_allowed\" xreflabel=\"abi.changes_allowed\">\n+<title>Allowed Changes</title>\n+\n+<para>\n+The following will cause the library minor version number to\n+increase, say from \"libstdc++.so.3.0.4\" to \"libstdc++.so.3.0.5\".\n+</para>\n+<orderedlist>\n+ <listitem><para>Adding an exported global or static data member</para></listitem>\n+ <listitem><para>Adding an exported function, static or non-virtual member function</para></listitem>\n+ <listitem><para>Adding an exported symbol or symbols by additional instantiations</para></listitem>\n+</orderedlist>\n+<para>\n+Other allowed changes are possible.\n+</para>\n+\n+</sect2>\n+\n+<sect2 id=\"abi.changes_no\" xreflabel=\"abi.changes_no\">\n+<title>Prohibited Changes</title>\n+\n+<para>\n+The following non-exhaustive list will cause the library major version\n+number to increase, say from \"libstdc++.so.3.0.4\" to\n+\"libstdc++.so.4.0.0\".\n+</para>\n+\n+<orderedlist>\n+ <listitem><para>Changes in the gcc/g++ compiler ABI</para></listitem>\n+<listitem><para>Changing size of an exported symbol</para></listitem>\n+<listitem><para>Changing alignment of an exported symbol</para></listitem>\n+<listitem><para>Changing the layout of an exported symbol</para></listitem>\n+<listitem><para>Changing mangling on an exported symbol</para></listitem>\n+<listitem><para>Deleting an exported symbol</para></listitem>\n+<listitem><para>Changing the inheritance properties of a type by adding or removing\n+    base classes</para></listitem>\n+<listitem><para>\n+  Changing the size, alignment, or layout of types\n+  specified in the C++ standard. These may not necessarily be\n+  instantiated or otherwise exported in the library binary, and\n+  include all the required locale facets, as well as things like\n+  std::basic_streambuf, et al.\n+</para></listitem>\n+\n+<listitem><para> Adding an explicit copy constructor or destructor to a\n+class that would otherwise have implicit versions. This will change\n+the way the compiler deals with this class in by-value return\n+statements or parameters: instead of being passing instances of this\n+class in registers, the compiler will be forced to use memory. See <ulink url=\"http://www.codesourcery.com/cxx-abi/abi.html#calls\"> this part</ulink>\n+ of the C++ ABI documentation for further details. \n+ </para></listitem>\n+\n+</orderedlist>\n+\n+</sect2>\n+\n+\n+\n+<sect2 id=\"abi.impl\" xreflabel=\"abi.impl\">\n+<title>Implementation</title>\n+\n+<orderedlist>\n+ <listitem>\n+   <para>\n+     Separation of interface and implementation\n+   </para>\n+   <para>\n+     This is accomplished by two techniques that separate the API from\n+     the ABI: forcing undefined references to link against a library\n+     binary for definitions.\n+   </para>\n+\n+<variablelist>\n+  <varlistentry>\n+    <term>Include files have declarations, source files have defines</term>\n+    \n+    <listitem>\n+      <para>\n+\tFor non-templatized types, such as much of <code>class\n+\tlocale</code>, the appropriate standard C++ include, say\n+\t<code>locale</code>, can contain full declarations, while\n+\tvarious source files (say <code> locale.cc, locale_init.cc,\n+\tlocalename.cc</code>) contain definitions.\n+      </para>\n+    </listitem>\n+  </varlistentry>\n+  \n+  <varlistentry>\n+  <term>Extern template on required types</term>\n+\n+   <listitem>\n+     <para>\n+       For parts of the standard that have an explicit list of\n+       required instantiations, the GNU extension syntax <code> extern\n+       template </code> can be used to control where template\n+       definitions reside. By marking required instantiations as\n+       <code> extern template </code> in include files, and providing\n+       explicit instantiations in the appropriate instantiation files,\n+       non-inlined template functions can be versioned. This technique\n+       is mostly used on parts of the standard that require <code>\n+       char</code> and <code> wchar_t</code> instantiations, and\n+       includes <code> basic_string</code>, the locale facets, and the\n+       types in <code> iostreams</code>.\n+     </para>\n+   </listitem>\n+  </varlistentry>\n+\n+ </variablelist>\n+\n+ <para> \n+   In addition, these techniques have the additional benefit that they\n+   reduce binary size, which can increase runtime performance.\n+ </para>\n+ </listitem>\n+\n+ <listitem>\n+   <para>\n+     Namespaces linking symbol definitions to export mapfiles\n+   </para>\n+   <para>\n+     All symbols in the shared library binary are processed by a\n+     linker script at build time that either allows or disallows\n+     external linkage. Because of this, some symbols, regardless of\n+     normal C/C++ linkage, are not visible. Symbols that are internal\n+     have several appealing characteristics: by not exporting the\n+     symbols, there are no relocations when the shared library is\n+     started and thus this makes for faster runtime loading\n+     performance by the underlying dynamic loading mechanism. In\n+     addition, they have the possibility of changing without impacting\n+     ABI compatibility.\n+   </para>\n+\n+<para>The following namespaces are transformed by the mapfile:</para>\n+\n+<variablelist>\n+\n+  <varlistentry>\n+<term><code>namespace std</code></term>\n+<listitem><para> Defaults to exporting all symbols in label\n+<code>GLIBCXX</code> that do not begin with an underscore, ie\n+<code>__test_func</code> would not be exported by default. Select\n+exceptional symbols are allowed to be visible.</para></listitem>\n+  </varlistentry>\n+\n+  <varlistentry>\n+<term><code>namespace __gnu_cxx</code></term>\n+<listitem><para> Defaults to not exporting any symbols in label\n+<code>GLIBCXX</code>, select items are allowed to be visible.</para></listitem>\n+  </varlistentry>\n+\n+  <varlistentry>\n+<term><code>namespace __gnu_internal</code></term>\n+<listitem><para> Defaults to not exported, no items are allowed to be visible.</para></listitem>\n+  </varlistentry>\n+\n+  <varlistentry>\n+<term><code>namespace __cxxabiv1</code>, aliased to <code> namespace abi</code></term>\n+<listitem><para> Defaults to not exporting any symbols in label\n+<code>CXXABI</code>, select items are allowed to be visible.</para></listitem>\n+  </varlistentry>\n+\n+</variablelist>\n+<para>\n+</para>\n+</listitem>\n+\n+ <listitem><para>Freezing the API</para>\n+ <para>Disallowed changes, as above, are not made on a stable release\n+branch. Enforcement tends to be less strict with GNU extensions that\n+standard includes.</para>\n+</listitem>\n+</orderedlist>\n+\n+</sect2>\n+\n+<sect2 id=\"abi.testing\" xreflabel=\"abi.testing\">\n+<title>Testing</title>\n+\n+  <sect3 id=\"abi.testing.single\" xreflabel=\"abi.testing.single\">\n+    <title>Single ABI Testing</title>\n+\n+    <para>\n+      Testing for GNU C++ ABI changes is composed of two distinct\n+      areas: testing the C++ compiler (g++) for compiler changes, and\n+      testing the C++ library (libstdc++) for library changes.\n+    </para>\n+\n+    <para>\n+      Testing the C++ compiler ABI can be done various ways.\n+    </para>\n+\n+    <para>\n+      One.  Intel ABI checker. More information can be obtained <ulink\n+      url=\"http://developer.intel.com/software/products/opensource/\">here.</ulink>\n+    </para>\n+\n+<para>\n+Two.\n+The second is yet unreleased, but has been announced on the gcc\n+mailing list. It is yet unspecified if these tools will be freely\n+available, and able to be included in a GNU project. Please contact\n+Mark Mitchell (mark@codesourcery.com) for more details, and current\n+status.\n+</para>\n+\n+<para>\n+Three.\n+Involves using the vlad.consistency test framework. This has also been\n+discussed on the gcc mailing lists.\n+</para>\n+\n+<para>\n+Testing the C++ library ABI can also be done various ways.\n+</para>\n+\n+<para>\n+One. \n+(Brendan Kehoe, Jeff Law suggestion to run 'make check-c++' two ways, \n+one with a new compiler and an old library, and the other with an old\n+compiler and a new library, and look for testsuite regressions)\n+</para>\n+\n+<para>\n+Details on how to set this kind of test up can be found here:\n+http://gcc.gnu.org/ml/gcc/2002-08/msg00142.html\n+</para>\n+\n+<para>\n+Two.  \n+Use the 'make check-abi' rule in the libstdc++ Makefile. \n+</para>\n+\n+<para>\n+This is a proactive check the library ABI. Currently, exported symbol\n+names that are either weak or defined are checked against a last known\n+good baseline. Currently, this baseline is keyed off of 3.4.0\n+binaries, as this was the last time the .so number was incremented. In\n+addition, all exported names are demangled, and the exported objects\n+are checked to make sure they are the same size as the same object in\n+the baseline.\n+\n+Notice that each baseline is relative to a <emphasis>default</emphasis>\n+configured library and compiler: in particular, if options such as\n+--enable-clocale, or --with-cpu, in case of multilibs, are used at\n+configure time, the check may fail, either because of substantive\n+differences or because of limitations of the current checking\n+machinery.\n+</para>\n+\n+<para>\n+This dataset is insufficient, yet a start. Also needed is a\n+comprehensive check for all user-visible types part of the standard\n+library for sizeof() and alignof() changes. \n+</para>\n+\n+<para>\n+Verifying compatible layouts of objects is not even attempted.  It\n+should be possible to use sizeof, alignof, and offsetof to compute\n+offsets for each structure and type in the standard library, saving to\n+another datafile. Then, compute this in a similar way for new\n+binaries, and look for differences.\n+</para>\n+\n+<para>\n+Another approach might be to use the -fdump-class-hierarchy flag to\n+get information. However, currently this approach gives insufficient\n+data for use in library testing, as class data members, their offsets,\n+and other detailed data is not displayed with this flag.\n+(See g++/7470 on how this was used to find bugs.)\n+</para>\n+\n+<para>\n+Perhaps there are other C++ ABI checkers. If so, please notify\n+us. We'd like to know about them!\n+</para>\n+\n+  </sect3>\n+  <sect3 id=\"abi.testing.multi\" xreflabel=\"abi.testing.multi\">\n+    <title>Multiple ABI Testing</title>\n+<para>\n+A \"C\" application, dynamically linked to two shared libraries, liba,\n+libb. The dependent library liba is C++ shared library compiled with\n+gcc-3.3.x, and uses io, exceptions, locale, etc. The dependent library\n+libb is a C++ shared library compiled with gcc-3.4.x, and also uses io,\n+exceptions, locale, etc.\n+</para>\n+\n+<para> As above, libone is constructed as follows: </para>\n+<programlisting>\n+%$bld/H-x86-gcc-3.4.0/bin/g++ -fPIC -DPIC -c a.cc\n+\n+%$bld/H-x86-gcc-3.4.0/bin/g++ -shared -Wl,-soname -Wl,libone.so.1 -Wl,-O1 -Wl,-z,defs a.o -o libone.so.1.0.0\n+\n+%ln -s libone.so.1.0.0 libone.so\n+\n+%$bld/H-x86-gcc-3.4.0/bin/g++ -c a.cc\n+\n+%ar cru libone.a a.o \n+</programlisting>\n+\n+<para> And, libtwo is constructed as follows: </para>\n+\n+<programlisting>\n+%$bld/H-x86-gcc-3.3.3/bin/g++ -fPIC -DPIC -c b.cc\n+\n+%$bld/H-x86-gcc-3.3.3/bin/g++ -shared -Wl,-soname -Wl,libtwo.so.1 -Wl,-O1 -Wl,-z,defs b.o -o libtwo.so.1.0.0\n+\n+%ln -s libtwo.so.1.0.0 libtwo.so\n+\n+%$bld/H-x86-gcc-3.3.3/bin/g++ -c b.cc\n+\n+%ar cru libtwo.a b.o \n+</programlisting>\n+\n+<para> ...with the resulting libraries looking like </para>\n+\n+<screen>\n+<computeroutput>\n+%ldd libone.so.1.0.0\n+        libstdc++.so.6 =&gt; /usr/lib/libstdc++.so.6 (0x40016000)\n+        libm.so.6 =&gt; /lib/tls/libm.so.6 (0x400fa000)\n+        libgcc_s.so.1 =&gt; /mnt/hd/bld/gcc/gcc/libgcc_s.so.1 (0x4011c000)\n+        libc.so.6 =&gt; /lib/tls/libc.so.6 (0x40125000)\n+        /lib/ld-linux.so.2 =&gt; /lib/ld-linux.so.2 (0x00355000)\n+\n+%ldd libtwo.so.1.0.0\n+        libstdc++.so.5 =&gt; /usr/lib/libstdc++.so.5 (0x40027000)\n+        libm.so.6 =&gt; /lib/tls/libm.so.6 (0x400e1000)\n+        libgcc_s.so.1 =&gt; /mnt/hd/bld/gcc/gcc/libgcc_s.so.1 (0x40103000)\n+        libc.so.6 =&gt; /lib/tls/libc.so.6 (0x4010c000)\n+        /lib/ld-linux.so.2 =&gt; /lib/ld-linux.so.2 (0x00355000)\n+</computeroutput>\n+</screen>\n+\n+<para> \n+  Then, the \"C\" compiler is used to compile a source file that uses\n+  functions from each library.\n+</para>\n+<programlisting>\n+gcc test.c -g -O2 -L. -lone -ltwo /usr/lib/libstdc++.so.5 /usr/lib/libstdc++.so.6\n+</programlisting>\n+\n+<para>\n+  Which gives the expected:\n+</para>\n+\n+<screen>\n+<computeroutput>\n+%ldd a.out\n+        libstdc++.so.5 =&gt; /usr/lib/libstdc++.so.5 (0x00764000)\n+        libstdc++.so.6 =&gt; /usr/lib/libstdc++.so.6 (0x40015000)\n+        libc.so.6 =&gt; /lib/tls/libc.so.6 (0x0036d000)\n+        libm.so.6 =&gt; /lib/tls/libm.so.6 (0x004a8000)\n+        libgcc_s.so.1 =&gt; /mnt/hd/bld/gcc/gcc/libgcc_s.so.1 (0x400e5000)\n+        /lib/ld-linux.so.2 =&gt; /lib/ld-linux.so.2 (0x00355000)\n+</computeroutput>\n+</screen>\n+\n+<para>\n+  This resulting binary, when executed, will be able to safely use\n+  code from both liba, and the dependent libstdc++.so.6, and libb,\n+  with the dependent libstdc++.so.5.\n+</para>\n+  </sect3>\n+</sect2>\n+\n+<sect2 id=\"abi.issues\" xreflabel=\"abi.issues\">\n+<title>Outstanding Issues</title>\n+\n+<para> \n+  Some features in the C++ language make versioning especially\n+  difficult. In particular, compiler generated constructs such as\n+  implicit instantiations for templates, typeinfo information, and\n+  virtual tables all may cause ABI leakage across shared library\n+  boundaries. Because of this, mixing C++ ABI's is not recommended at\n+  this time.\n+</para>\n+\n+<para>\n+  For more background on this issue, see these bugzilla entries:\n+</para>\n+\n+<para>\n+<ulink url=\"http://gcc.gnu.org/PR24660\">24660: versioning weak symbols in libstdc++</ulink>\n+</para>\n+\n+<para>\n+<ulink url=\"http://gcc.gnu.org/PR19664\">19664: libstdc++ headers should have pop/push of the visibility around the declarations</ulink>\n+</para>\n+\n+</sect2>\n+\n+<bibliography id=\"abi.biblio\" xreflabel=\"abi.biblio\">\n+<title>Bibliography</title>\n+\n+  <biblioentry>\n+    <title>\n+      ABIcheck, a vague idea of checking ABI compatibility\n+    </title>\n+\n+    <biblioid>\n+      <ulink url=\"http://abicheck.sourceforge.net/\">\n+      </ulink>\n+    </biblioid>\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      C++ ABI Reference\n+    </title>\n+\n+    <biblioid>\n+      <ulink url=\"http://www.codesourcery.com/cxx-abi\">\n+      </ulink>\n+    </biblioid>\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      Intel\u00ae Compilers for Linux* -Compatibility with the GNU Compilers\n+    </title>\n+\n+    <biblioid>\n+      <ulink url=\"http://developer.intel.com/software/products/compilers/techtopics/LinuxCompilersCompatibility.htm\">\n+      </ulink>\n+    </biblioid>\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      Intel\u00ae Compilers for Linux* -Compatibility with the GNU Compilers\n+    </title>\n+\n+    <biblioid>\n+      <ulink url=\"http://developer.intel.com/software/products/compilers/techtopics/LinuxCompilersCompatibility.htm\">\n+      </ulink>\n+    </biblioid>\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      Sun Solaris 2.9 : Linker and Libraries Guide (document 816-1386)\n+    </title>\n+\n+    <biblioid>\n+      <ulink url=\"http://docs.sun.com/?p=/doc/816-1386&amp;a=load\">\n+      </ulink>\n+    </biblioid>\n+  </biblioentry> \n+\n+\n+  <biblioentry>\n+    <title>\n+      Sun Solaris 2.9 : C++ Migration Guide (document 816-2459)\n+    </title>\n+\n+    <biblioid>\n+      <ulink url=\"http://docs.sun.com/db/prod/solaris.9\">\n+      </ulink>\n+    </biblioid>\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      ELF Symbol Versioning\n+    </title>\n+\n+    <author>\n+      <firstname>Ulrich</firstname>\n+      <surname>Drepper</surname>\n+    </author>\n+ \n+    <biblioid>\n+      <ulink url=\"http://people.redhat.com/drepper/symbol-versioning\">\n+      </ulink>\n+    </biblioid>\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      C++ ABI for the ARM Architecture\n+    </title>\n+\n+    <biblioid>\n+      <ulink url=\"http://www.arm.com/miscPDFs/8033.pdf\">\n+      </ulink>\n+    </biblioid>\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      Dynamic Shared Objects: Survey and Issues\n+    </title>\n+    <subtitle>\n+      ISO C++ J16/06-0046\n+    </subtitle>\n+\n+    <author>\n+      <firstname>Benjamin</firstname>\n+      <surname>Kosnik</surname>\n+    </author>\n+ \n+    <biblioid>\n+      <ulink url=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1976.html\">\n+      </ulink>\n+    </biblioid>\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      Versioning With Namespaces\n+    </title>\n+    <subtitle>\n+      ISO C++ J16/06-0083\n+    </subtitle>\n+\n+    <author>\n+      <firstname>Benjamin</firstname>\n+      <surname>Kosnik</surname>\n+    </author>\n+ \n+    <biblioid>\n+      <ulink url=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2013.html\">\n+      </ulink>\n+    </biblioid>\n+  </biblioentry> \n+\n+</bibliography>\n+\n+</sect1>\n\\ No newline at end of file"}, {"sha": "6f1a16af24fbcf552e2b37568774d994ed6ea6fa", "filename": "libstdc++-v3/doc/xml/manual/algorithms.xml", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Falgorithms.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Falgorithms.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Falgorithms.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,104 @@\n+<?xml version='1.0'?>\n+<!DOCTYPE part PUBLIC \"-//OASIS//DTD DocBook XML V4.5//EN\" \n+ \"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\" \n+[ ]>\n+\n+<part id=\"manual.algorithms\" xreflabel=\"Algorithms\">\n+<?dbhtml filename=\"algorithms.html\"?>\n+ \n+<partinfo>\n+  <keywordset>\n+    <keyword>\n+      ISO C++\n+    </keyword>\n+    <keyword>\n+      library\n+    </keyword>\n+    <keyword>\n+      algorithm\n+    </keyword>\n+  </keywordset>\n+</partinfo>\n+\n+<title>Algorithms</title>\n+\n+<preface>\n+  <title></title>\n+<para>\n+  The neatest accomplishment of the algorithms chapter is that all the\n+  work is done via iterators, not containers directly.  This means two\n+  important things:\n+</para>\n+<orderedlist>\n+      <listitem>\n+\t<para>\n+\t  Anything that behaves like an iterator can be used in one of\n+          these algorithms.  Raw pointers make great candidates, thus\n+          built-in arrays are fine containers, as well as your own iterators.\n+\t</para>\n+      </listitem>\n+      <listitem>\n+\t<para>\n+\t  The algorithms do not (and cannot) affect the container as a\n+          whole; only the things between the two iterator endpoints.  If\n+          you pass a range of iterators only enclosing the middle third of\n+          a container, then anything outside that range is inviolate.\n+\t</para>\n+      </listitem>\n+   </orderedlist>\n+   <para>\n+     Even strings can be fed through the algorithms here, although the\n+     string class has specialized versions of many of these functions\n+     (for example, <code>string::find()</code>).  Most of the examples\n+     on this page will use simple arrays of integers as a playground\n+     for algorithms, just to keep things simple.  The use of\n+     <emphasis>N</emphasis> as a size in the examples is to keep\n+     things easy to read but probably won't be valid code.  You can\n+     use wrappers such as those described in the <ulink\n+     url=\"../23_containers/howto.html\">containers chapter</ulink> to\n+     keep real code readable.\n+   </para>\n+   <para>\n+     The single thing that trips people up the most is the definition\n+     of <emphasis>range</emphasis> used with iterators; the famous\n+     &quot;past-the-end&quot; rule that everybody loves to hate.  The\n+     <ulink url=\"../24_iterators/howto.html#2\">iterators\n+     chapter</ulink> of this document has a complete explanation of\n+     this simple rule that seems to cause so much confusion.  Once you\n+     get <emphasis>range</emphasis> into your head (it's not that\n+     hard, honest!), then the algorithms are a cakewalk.\n+   </para>\n+</preface>\n+\n+<!-- Chapter 01 : Non Modifying -->\n+\n+<!-- Chapter 02 : Mutating -->\n+<chapter id=\"manual.algorithms.mutating\" xreflabel=\"Mutating\">\n+  <title>Mutating</title>\n+\n+  <sect1 id=\"algorithms.mutating.swap\" xreflabel=\"swap\">\n+    <title><function>swap</function></title>\n+\n+    <sect2 id=\"algorithms.swap.specializations\" xreflabel=\"Specializations\">\n+    <title>Specializations</title>\n+\n+   <para>If you call <code> std::swap(x,y); </code> where x and y are standard\n+      containers, then the call will automatically be replaced by a call to\n+      <code> x.swap(y); </code> instead.\n+   </para>\n+   <para>This allows member functions of each container class to take over, and\n+      containers' swap functions should have O(1) complexity according to\n+      the standard.  (And while &quot;should&quot; allows implementations to\n+      behave otherwise and remain compliant, this implementation does in\n+      fact use constant-time swaps.)  This should not be surprising, since\n+      for two containers of the same type to swap contents, only some\n+      internal pointers to storage need to be exchanged.\n+   </para>\n+\n+    </sect2>\n+  </sect1>\n+</chapter>\n+\n+<!-- Chapter 03 : Sorting -->\n+\n+</part>"}, {"sha": "213d82b7e59d5256e4159abaeed0862fc4a6bd06", "filename": "libstdc++-v3/doc/xml/manual/allocator.xml", "status": "added", "additions": 659, "deletions": 0, "changes": 659, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fallocator.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fallocator.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fallocator.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,659 @@\n+<sect1 id=\"manual.util.memory.allocator\" xreflabel=\"Allocator\">\n+<?dbhtml filename=\"allocator.html\"?>\n+ \n+<sect1info>\n+  <keywordset>\n+    <keyword>\n+      ISO C++\n+    </keyword>\n+    <keyword>\n+      allocator\n+    </keyword>\n+  </keywordset>\n+</sect1info>\n+\n+<title>Allocators</title>\n+\n+<para>\n+ Memory management for Standard Library entities is encapsulated in a\n+ class template called <classname>allocator</classname>. The\n+ <classname>allocator</classname> abstraction is used throughout the\n+ library in <classname>string</classname>, container classes,\n+ algorithnms, and parts of iostreams. This class, and base classes of\n+ it, are the superset of available free store (<quote>heap</quote>)\n+ management classes.\n+</para>\n+\n+<sect2 id=\"allocator.req\" xreflabel=\"allocator.req\">\n+<title>Requirements</title>\n+\n+  <para>\n+    The C++ standard only gives a few directives in this area:\n+  </para>\n+   <itemizedlist>\n+     <listitem>\n+      <para>\n+       When you add elements to a container, and the container must\n+       allocate more memory to hold them, the container makes the\n+       request via its <type>Allocator</type> template\n+       parameter, which is usually aliased to\n+       <type>allocator_type</type>.  This includes adding chars\n+       to the string class, which acts as a regular STL container in\n+       this respect.\n+      </para>\n+     </listitem>\n+     <listitem>\n+       <para>\n+       The default <type>Allocator</type> argument of every\n+       container-of-T is <classname>allocator&lt;T&gt;</classname>.\n+       </para>\n+     </listitem>\n+     <listitem>\n+       <para>\n+       The interface of the <classname>allocator&lt;T&gt;</classname> class is\n+         extremely simple.  It has about 20 public declarations (nested\n+         typedefs, member functions, etc), but the two which concern us most\n+         are:\n+       </para>\n+       <programlisting>\n+\t T*    allocate   (size_type n, const void* hint = 0);\n+\t void  deallocate (T* p, size_type n);\n+       </programlisting>\n+\n+       <para>\n+\t The <varname>n</varname> arguments in both those\n+\t functions is a <emphasis>count</emphasis> of the number of\n+\t <type>T</type>'s to allocate space for, <emphasis>not their\n+\t total size</emphasis>.\n+\t (This is a simplification; the real signatures use nested typedefs.)  \n+       </para>\n+     </listitem>\n+     <listitem>\n+       <para>\n+\t The storage is obtained by calling <function>::operator\n+\t new</function>, but it is unspecified when or how\n+\t often this function is called.  The use of the \n+\t <varname>hint</varname> is unspecified, but intended as an\n+\t aid to locality if an implementation so\n+\t desires. <constant>[20.4.1.1]/6</constant>\n+       </para>\n+      </listitem>\n+   </itemizedlist>\n+\n+   <para> \n+     Complete details cam be found in the C++ standard, look in\n+     <constant>[20.4 Memory]</constant>.\n+   </para>\n+\n+</sect2>\n+\n+<sect2 id=\"allocator.design_issues\" xreflabel=\"allocator.design_issues\">\n+<title>Design Issues</title>\n+\n+  <para>\n+    The easiest way of fulfilling the requirements is to call\n+    <function>operator new</function> each time a container needs\n+    memory, and to call <function>operator delete</function> each time\n+    the container releases memory. This method may be <ulink\n+    url=\"http://gcc.gnu.org/ml/libstdc++/2001-05/msg00105.html\">slower</ulink>\n+    than caching the allocations and re-using previously-allocated\n+    memory, but has the advantage of working correctly across a wide\n+    variety of hardware and operating systems, including large\n+    clusters. The <classname>__gnu_cxx::new_allocator</classname>\n+    implements the simple operator new and operator delete semantics,\n+    while <classname>__gnu_cxx::malloc_allocator</classname>\n+    implements much the same thing, only with the C language functions\n+    <function>std::malloc</function> and <function>free</function>.\n+  </para>\n+\n+  <para> \n+    Another approach is to use intelligence within the allocator\n+    class to cache allocations. This extra machinery can take a variety\n+    of forms: a bitmap index, an index into an exponentially increasing\n+    power-of-two-sized buckets, or simpler fixed-size pooling cache.\n+    The cache is shared among all the containers in the program: when\n+    your program's <classname>std::vector&lt;int&gt;</classname> gets\n+  cut in half and frees a bunch of its storage, that memory can be\n+  reused by the private\n+  <classname>std::list&lt;WonkyWidget&gt;</classname> brought in from\n+  a KDE library that you linked against.  And operators\n+  <function>new</function> and <function>delete</function> are not\n+  always called to pass the memory on, either, which is a speed\n+  bonus. Examples of allocators that use these techniques are\n+  <classname>__gnu_cxx::bitmap_allocator</classname>,\n+  <classname>__gnu_cxx::pool_allocator</classname>, and\n+  <classname>__gnu_cxx::__mt_alloc</classname>.\n+  </para>\n+\n+  <para>\n+    Depending on the implementation techniques used, the underlying\n+    operating system, and compilation environment, scaling caching\n+    allocators can be tricky. In particular, order-of-destruction and\n+    order-of-creation for memory pools may be difficult to pin down\n+    with certainty, which may create problems when used with plugins\n+    or loading and unloading shared objects in memory. As such, using\n+    caching allocators on systems that do not support\n+    <function>abi::__cxa_atexit</function> is not recommended.\n+  </para>\n+\n+</sect2>\n+\n+<sect2 id=\"allocator.impl\" xreflabel=\"allocator.impl\">\n+<title>Implementation</title>\n+\n+  <sect3>\n+    <title>Interface Design</title>\n+\n+   <para>\n+     The only allocator interface that\n+     is support is the standard C++ interface. As such, all STL\n+     containers have been adjusted, and all external allocators have\n+     been modified to support this change.   \n+   </para>\n+\n+   <para> \n+     The class <classname>allocator</classname> just has typedef,\n+   constructor, and rebind members. It inherits from one of the\n+   high-speed extension allocators, covered below. Thus, all\n+   allocation and deallocation depends on the base class.\n+   </para>\n+\n+   <para> \n+     The base class that <classname>allocator</classname> is derived from\n+     may not be user-configurable.\n+</para>\n+\n+  </sect3>\n+\n+  <sect3>\n+    <title>Selecting Default Allocation Policy</title>\n+\n+   <para> \n+     It's difficult to pick an allocation strategy that will provide\n+   maximum utility, without excessively penalizing some behavior. In\n+   fact, it's difficult just deciding which typical actions to measure\n+   for speed.\n+   </para>\n+\n+   <para> \n+     Three synthetic benchmarks have been created that provide data\n+     that is used to compare different C++ allocators. These tests are:\n+   </para>\n+\n+   <orderedlist>\n+     <listitem>\n+       <para>\n+       Insertion. \n+       </para>\n+       <para>\n+       Over multiple iterations, various STL container\n+     objects have elements inserted to some maximum amount. A variety\n+     of allocators are tested.  \n+     Test source for <ulink url=\"http://gcc.gnu.org/viewcvs/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/insert/sequence.cc?view=markup\">sequence</ulink>\n+     and <ulink url=\"http://gcc.gnu.org/viewcvs/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/insert/associative.cc?view=markup\">associative</ulink>\n+     containers.\n+       </para>\n+\n+     </listitem>\n+\n+     <listitem>\n+       <para>\n+       Insertion and erasure in a multi-threaded environment.\n+       </para>\n+       <para>\n+       This test shows the ability of the allocator to reclaim memory\n+     on a pre-thread basis, as well as measuring thread contention\n+     for memory resources. \n+     Test source \n+    <ulink url=\"http://gcc.gnu.org/viewcvs/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/insert_erase/associative.cc?view=markup\">here</ulink>.\n+       </para>\n+     </listitem>\n+\n+     <listitem>\n+       <para>\n+\t A threaded producer/consumer model.\n+       </para>\n+       <para>\n+       Test source for\n+     <ulink url=\"http://gcc.gnu.org/viewcvs/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/producer_consumer/sequence.cc?view=markup\">sequence</ulink>\n+     and \n+     <ulink url=\"http://gcc.gnu.org/viewcvs/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/producer_consumer/associative.cc?view=markup\">associative</ulink>\n+     containers.\n+     </para>\n+     </listitem>\n+   </orderedlist>\n+\n+   <para>\n+     The current default choice for\n+     <classname>allocator</classname> is\n+     <classname>__gnu_cxx::new_allocator</classname>.\n+   </para>\n+\n+  </sect3>\n+\n+  <sect3>\n+    <title>Disabling Memory Caching</title>\n+\n+    <para> \n+      In use, <classname>allocator</classname> may allocate and\n+      deallocate using implementation-specified strategies and\n+      heuristics. Because of this, every call to an allocator object's\n+      <function>allocate</function> member function may not actually\n+      call the global operator new. This situation is also duplicated\n+      for calls to the <function>deallocate</function> member\n+      function.\n+    </para>\n+\n+   <para> \n+     This can be confusing. \n+   </para>\n+\n+   <para> \n+     In particular, this can make debugging memory errors more\n+     difficult, especially when using third party tools like valgrind or\n+     debug versions of <function>new</function>.\n+   </para>\n+\n+   <para> \n+     There are various ways to solve this problem. One would be to use\n+     a custom allocator that just called operators\n+     <function>new</function> and <function>delete</function>\n+     directly, for every allocation. (See\n+     <filename>include/ext/new_allocator.h</filename>, for instance.)\n+     However, that option would involve changing source code to use\n+     the a non-default allocator. Another option is to force the\n+     default allocator to remove caching and pools, and to directly\n+     allocate with every call of <function>allocate</function> and\n+     directly deallocate with every call of\n+     <function>deallocate</function>, regardless of efficiency. As it\n+     turns out, this last option is also available.\n+   </para>\n+\n+\n+   <para>\n+     To globally disable memory caching within the library for the\n+     default allocator, merely set\n+     <constant>GLIBCXX_FORCE_NEW</constant> (with any value) in the\n+     system's environment before running the program. If your program\n+     crashes with <constant>GLIBCXX_FORCE_NEW</constant> in the\n+     environment, it likely means that you linked against objects\n+     built against the older library (objects which might still using the\n+     cached allocations...).\n+  </para>\n+\n+  </sect3>\n+\n+</sect2>\n+\n+<sect2 id=\"allocator.using\" xreflabel=\"allocator.using\">\n+<title>Using a Specific Allocator</title>\n+\n+   <para>\n+     You can specify different memory management schemes on a\n+     per-container basis, by overriding the default\n+     <type>Allocator</type> template parameter.  For example, an easy\n+      (but non-portable) method of specifying that only <function>malloc</function> or <function>free</function>\n+      should be used instead of the default node allocator is:\n+   </para>\n+   <programlisting>\n+    std::list &lt;int, __gnu_cxx::malloc_allocator&lt;int&gt; &gt;  malloc_list;</programlisting>\n+    <para>\n+      Likewise, a debugging form of whichever allocator is currently in use:\n+    </para>\n+      <programlisting>\n+    std::deque &lt;int, __gnu_cxx::debug_allocator&lt;std::allocator&lt;int&gt; &gt; &gt;  debug_deque;\n+      </programlisting>\n+</sect2>\n+\n+<sect2 id=\"allocator.custom\" xreflabel=\"allocator.custom\">\n+<title>Custom Allocators</title>\n+\n+  <para> \n+    Writing a portable C++ allocator would dictate that the interface\n+    would look much like the one specified for\n+    <classname>allocator</classname>. Additional member functions, but\n+    not subtractions, would be permissible.\n+  </para>\n+\n+   <para> \n+     Probably the best place to start would be to copy one of the\n+   extension allocators: say a simple one like \n+   <classname>new_allocator</classname>.\n+   </para>\n+\n+</sect2>\n+\n+<sect2 id=\"allocator.ext\" xreflabel=\"allocator.ext\">\n+<title>Extension Allocators</title>\n+\n+  <para> \n+    Several other allocators are provided as part of this\n+    implementation.  The location of the extension allocators and their\n+    names have changed, but in all cases, functionality is\n+    equivalent. Starting with gcc-3.4, all extension allocators are\n+    standard style. Before this point, SGI style was the norm. Because of\n+    this, the number of template arguments also changed. Here's a simple\n+    chart to track the changes.\n+  </para>\n+\n+  <para>\n+    More details on each of these extension allocators follows.\n+  </para>\n+   <orderedlist>\n+     <listitem>\n+       <para>\n+       <classname>new_allocator</classname>\n+       </para>\n+       <para>\n+\t Simply wraps <function>::operator new</function>\n+\t and <function>::operator delete</function>.\n+       </para>\n+     </listitem>\n+     <listitem>\n+       <para>\n+       <classname>malloc_allocator</classname>\n+       </para>\n+       <para>\n+\t Simply wraps <function>malloc</function> and\n+\t <function>free</function>. There is also a hook for an\n+\t out-of-memory handler (for\n+\t <function>new</function>/<function>delete</function> this is\n+\t taken care of elsewhere).\n+       </para>\n+     </listitem>\n+     <listitem>\n+       <para>\n+       <classname>array_allocator</classname>\n+       </para>\n+       <para>\n+\t Allows allocations of known and fixed sizes using existing\n+\t global or external storage allocated via construction of\n+\t <classname>std::tr1::array</classname> objects. By using this\n+\t allocator, fixed size containers (including\n+\t <classname>std::string</classname>) can be used without\n+\t instances calling <function>::operator new</function> and\n+\t <function>::operator delete</function>. This capability\n+\t allows the use of STL abstractions without runtime\n+\t complications or overhead, even in situations such as program\n+\t startup. For usage examples, please consult the testsuite.\n+       </para>\n+     </listitem>\n+     <listitem>\n+       <para>\n+       <classname>debug_allocator</classname>\n+       </para>\n+       <para> \n+\t A wrapper around an arbitrary allocator A.  It passes on\n+\t slightly increased size requests to A, and uses the extra\n+\t memory to store size information.  When a pointer is passed\n+\t to <function>deallocate()</function>, the stored size is\n+\t checked, and <function>assert()</function> is used to\n+\t guarantee they match.\n+       </para>\n+     </listitem>\n+      <listitem>\n+\t<para>\n+\t<classname>throw_allocator</classname>\n+\t</para>\n+\t<para> \n+\t  Includes memory tracking and marking abilities as well as hooks for\n+\t  throwing exceptinos at configurable intervals (including random,\n+\t  all, none). \n+\t</para>\n+      </listitem>\n+     <listitem>\n+       <para>\n+       <classname>__pool_alloc</classname>\n+       </para>\n+       <para> \n+\t A high-performance, single pool allocator.  The reusable\n+\t memory is shared among identical instantiations of this type.\n+\t It calls through <function>::operator new</function> to\n+\t obtain new memory when its lists run out.  If a client\n+\t container requests a block larger than a certain threshold\n+\t size, then the pool is bypassed, and the allocate/deallocate\n+\t request is passed to <function>::operator new</function>\n+\t directly.\n+       </para>\n+\n+       <para> \n+\t Older versions of this class take a boolean template\n+\t parameter, called <varname>thr</varname>, and an integer template\n+\t parameter, called <varname>inst</varname>.\n+       </para>\n+\n+       <para>\n+\t The <varname>inst</varname> number is used to track additional memory\n+      pools.  The point of the number is to allow multiple\n+      instantiations of the classes without changing the semantics at\n+      all.  All three of\n+       </para>\n+\n+   <programlisting>\n+    typedef  __pool_alloc&lt;true,0&gt;    normal;\n+    typedef  __pool_alloc&lt;true,1&gt;    private;\n+    typedef  __pool_alloc&lt;true,42&gt;   also_private;\n+   </programlisting>\n+   <para>\n+     behave exactly the same way.  However, the memory pool for each type\n+      (and remember that different instantiations result in different types)\n+      remains separate.\n+   </para>\n+   <para>\n+     The library uses <emphasis>0</emphasis> in all its instantiations.  If you\n+      wish to keep separate free lists for a particular purpose, use a\n+      different number.\n+   </para>\n+   <para>The <varname>thr</varname> boolean determines whether the\n+   pool should be manipulated atomically or not.  When\n+   <varname>thr</varname> = <constant>true</constant>, the allocator\n+   is is threadsafe, while <varname>thr</varname> =\n+   <constant>false</constant>, and is slightly faster but unsafe for\n+   multiple threads.\n+   </para>\n+\n+   <para>\n+     For thread-enabled configurations, the pool is locked with a\n+     single big lock. In some situations, this implementation detail\n+     may result in severe performance degredation.\n+   </para>\n+\n+   <para>\n+     (Note that the GCC thread abstraction layer allows us to provide\n+     safe zero-overhead stubs for the threading routines, if threads\n+     were disabled at configuration time.)\n+   </para>\n+     </listitem>\n+\n+     <listitem>\n+       <para>\n+       <classname>__mt_alloc</classname>\n+       </para>\n+       <para>\n+\t A high-performance fixed-size allocator with\n+\t exponentially-increasing allocations. It has its own\n+\t documentation, found <ulink\n+\t url=\"../ext/mt_allocator.html\">here</ulink>.\n+       </para>\n+     </listitem>\n+\n+     <listitem>\n+       <para>\n+       <classname>bitmap_allocator</classname>\n+       </para>\n+       <para>\n+\t A high-performance allocator that uses a bit-map to keep track\n+\t of the used and unused memory locations. It has its own\n+\t documentation, found <ulink \n+\t url=\"../ext/ballocator_doc.html\">here</ulink>.\n+       </para>\n+     </listitem>\n+   </orderedlist>\n+</sect2>\n+\n+\n+<bibliography id=\"allocator.biblio\" xreflabel=\"allocator.biblio\">\n+<title>Bibliography</title>\n+\n+  <biblioentry>\n+    <title>\n+    ISO/IEC 14882:1998 Programming languages - C++  \n+    </title>\n+\n+    <abbrev>\n+      isoc++_1998\n+    </abbrev>\n+    <pagenums>20.4 Memory</pagenums>\n+  </biblioentry> \n+  \n+  <biblioentry>\n+    <title>The Standard Librarian: What Are Allocators Good\n+    </title>\n+\n+    <abbrev>\n+      austernm\n+    </abbrev>\n+\n+    <author>\n+      <firstname>Matt</firstname>\n+      <surname>Austern</surname>\n+    </author>\n+\n+    <publisher>\n+      <publishername>\n+\tC/C++ Users Journal\t\n+      </publishername>\n+    </publisher>\n+\n+    <biblioid>\n+      <ulink url=\"http://www.cuj.com/documents/s=8000/cujcexp1812austern/\">\n+      </ulink>\n+    </biblioid>\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>The Hoard Memory Allocator</title>\n+\n+    <abbrev>\n+      emeryb\n+    </abbrev>\n+\n+    <author>\n+      <firstname>Emery</firstname>\n+      <surname>Berger</surname>\n+    </author>\n+\n+    <biblioid>\n+      <ulink url=\"http://www.cs.umass.edu/~emery/hoard/\">\n+      </ulink>\n+    </biblioid>\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>Reconsidering Custom Memory Allocation</title>\n+\n+    <abbrev>\n+      bergerzorn\n+    </abbrev>\n+\n+    <author>\n+      <firstname>Emery</firstname>\n+      <surname>Berger</surname>\n+    </author>\n+    <author>\n+      <firstname>Ben</firstname>\n+      <surname>Zorn</surname>\n+    </author>\n+    <author>\n+      <firstname>Kathryn</firstname>\n+      <surname>McKinley</surname>\n+    </author>\n+\n+    <copyright>\n+      <year>2002</year>\n+      <holder>OOPSLA</holder>\n+    </copyright>\n+\n+    <biblioid>\n+      <ulink url=\"http://www.cs.umass.edu/~emery/pubs/berger-oopsla2002.pdf\">\n+      </ulink>\n+    </biblioid>\n+  </biblioentry> \n+\n+  \n+  <biblioentry>\n+    <title>Allocator Types</title>\n+\n+    <abbrev>\n+      kreftlanger\n+    </abbrev>\n+\n+    <author>\n+      <firstname>Klaus</firstname>\n+      <surname>Kreft</surname>\n+    </author>\n+    <author>\n+      <firstname>Angelika</firstname>\n+      <surname>Langer</surname>\n+    </author>\n+\n+    <publisher>\n+      <publishername>\n+\tC/C++ Users Journal\t\n+      </publishername>\n+    </publisher>\n+\n+    <biblioid>\n+      <ulink url=\"http://www.langer.camelot.de/Articles/C++Report/Allocators/Allocators.html\">\n+      </ulink>\n+    </biblioid>\n+  </biblioentry> \n+  \n+  <biblioentry>\n+    <title>The C++ Programming Language</title>\n+\n+    <abbrev>\n+      tcpl\n+    </abbrev>\n+\n+    <author>\n+      <firstname>Bjarne</firstname>\n+      <surname>Stroustrup</surname>\n+    </author>\n+    <copyright>\n+      <year>2000</year>\n+      <holder></holder>\n+    </copyright>\n+    <pagenums>19.4 Allocators</pagenums>\n+\n+    <publisher>\n+      <publishername>\n+\tAddison Wesley\n+      </publishername>\n+    </publisher>\n+  </biblioentry> \n+  \n+  <biblioentry>\n+    <title>Yalloc: A Recycling C++ Allocator</title>\n+\n+    <abbrev>\n+      yenf\n+    </abbrev>\n+\n+    <author>\n+      <firstname>Felix</firstname>\n+      <surname>Yen</surname>\n+    </author>\n+    <copyright>\n+      <year></year>\n+      <holder></holder>\n+    </copyright>\n+\n+    <biblioid>\n+      <ulink url=\"http://home.earthlink.net/~brimar/yalloc/\">\n+      </ulink>\n+    </biblioid>\n+  </biblioentry> \n+</bibliography>\n+\n+</sect1>"}, {"sha": "033bd7dbbef5cc0769c63fc00be8b02c2fdf4a20", "filename": "libstdc++-v3/doc/xml/manual/appendix_contributing.xml", "status": "added", "additions": 1847, "deletions": 0, "changes": 1847, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fappendix_contributing.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fappendix_contributing.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fappendix_contributing.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,1847 @@\n+<?xml version='1.0'?>\n+<!DOCTYPE appendix PUBLIC \"-//OASIS//DTD DocBook XML V4.5//EN\" \n+ \"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\" \n+[ ]>\n+\n+<appendix id=\"appendix.contrib\" xreflabel=\"Contributing\">\n+<?dbhtml filename=\"appendix_contributing.html\"?>\n+ \n+<appendixinfo>\n+  <keywordset>\n+    <keyword>\n+      ISO C++\n+    </keyword>\n+    <keyword>\n+      library\n+    </keyword>\n+  </keywordset>\n+</appendixinfo>\n+\n+<title>Contributing</title>\n+\n+<para> \n+  The GNU C++ Library follows an open development model. Active\n+  contributors are assigned maintainer-ship responsibility, and given\n+  write access to the source repository. First time contributors\n+  should follow this procedure:\n+</para>\n+\n+<sect1 id=\"contrib.list\" xreflabel=\"Contributor Checklist\">\n+  <title>Contributor Checklist</title>\n+\n+  <sect2 id=\"list.reading\" xreflabel=\"list.reading\">\n+    <title>Reading</title>\n+\n+<itemizedlist>\n+ <listitem><para> Get and read the relevant sections of the C++ language\n+specification. Copies of the full ISO 14882 standard are available on\n+line via the ISO mirror site for committee members. Non-members, or\n+those who have not paid for the privilege of sitting on the committee\n+and sustained their two meeting commitment for voting rights, may get\n+a copy of the standard from their respective national standards\n+organization. In the USA, this national standards organization is ANSI\n+and their web-site is right\n+\n+ <ulink url=\"http://www.ansi.org\">here.</ulink> \n+(And if you've already registered with them, clicking this link will take you to directly to the place where you can \n+<ulink url=\"http://webstore.ansi.org/ansidocstore/product.asp?sku=ISO%2FIEC+14882%3A2003\">buy the standard on-line.)</ulink>\n+</para></listitem>\n+\n+<listitem><para> The library working group bugs, and known defects, can be obtained here:\n+ <ulink url=\"http://www.open-std.org/jtc1/sc22/wg21/\">http://www.open-std.org/jtc1/sc22/wg21 </ulink>\n+</para></listitem>\n+\n+<listitem><para> The newsgroup dedicated to standardization issues is comp.std.c++: this FAQ for this group is quite useful and can be found <ulink url=\"http://www.jamesd.demon.co.uk/csc/faq.html\"> here </ulink>.\n+</para></listitem>\n+\n+ <listitem><para> Peruse the <ulink url=\"http://www.gnu.org/prep/standards_toc.html\">GNU Coding Standards</ulink>, and chuckle when you hit the part about \"Using Languages Other Than C.\" \n+</para></listitem>\n+\n+ <listitem><para> Be familiar with the extensions that preceded these general GNU rules. These style issues for libstdc++ can be found in the file C++STYLE, located in the root level of the distribution, or <ulink url=\"C++STYLE\"> here. </ulink>\n+</para></listitem>\n+\n+ <listitem><para> And last but certainly not least, read the library-specific information found <ulink url=\"../documentation.html\"> here.</ulink>\n+</para></listitem>\n+\n+</itemizedlist>\n+\n+    </sect2>\n+    <sect2 id=\"list.copyright\" xreflabel=\"list.copyright\">\n+      <title>Assignment</title>\n+<para>\n+Small changes can be accepted without a copyright assignment form on\n+file. New code and additions to the library need completed copyright\n+assignment form on file at the FSF. Note: your employer may be required\n+to fill out appropriate disclaimer forms as well. \n+</para>\n+\n+<para> \n+  Historically, the libstdc++ assignment form added the following\n+  question:\n+</para>\n+\n+<para>\n+  <quote>\n+  Which Belgian comic book character is better, Tintin or Asterix, and\n+  why?\n+  </quote>\n+</para>\n+\n+<para>\n+While not strictly necessary, humoring the maintainers and answering\n+this question would be appreciated.\n+</para>\n+\n+<para>\n+For more information about getting a copyright assignment, please see \n+<ulink url=\"http://www.gnu.org/prep/maintain/html_node/Legal-Matters.html\">Legal\n+Matters</ulink>.\n+</para>\n+\n+<para>\n+Please contact Benjamin Kosnik at\n+<email>bkoz+assign@redhat.com</email> if you are confused\n+about the assignment or have general licensing questions. When\n+requesting an assignment form from\n+<email>mailto:assign@gnu.org</email>, please cc the libstdc++\n+maintainer above so that progress can be monitored.\n+</para>\n+    </sect2>\n+\n+    <sect2 id=\"list.getting\" xreflabel=\"list.getting\">\n+      <title>Getting Sources</title>\n+      <para>\n+\t<ulink url=\"http://gcc.gnu.org/svnwrite.html\">Getting write access\n+\t(look for &quot;Write after approval&quot;)</ulink>\n+      </para>\n+    </sect2>\n+\n+    <sect2 id=\"list.patches\" xreflabel=\"list.patches\">\n+      <title>Submitting Patches</title>\n+\n+\n+<para>\n+Every patch must have several pieces of information before it can be\n+properly evaluated. Ideally (and to ensure the fastest possible\n+response from the maintainers) it would have all of these pieces:\n+</para>\n+\n+<itemizedlist>\n+\n+ <listitem><para> A description of the bug and how your patch fixes this bug. For\n+ new features a description of the feature and your implementation. </para></listitem>\n+\n+ <listitem><para> A ChangeLog entry as plain text; see the various ChangeLog files\n+ for format and content. If using you are using emacs as your editor,\n+ simply position the insertion point at the beginning of your change\n+ and hit CX-4a to bring up the appropriate ChangeLog\n+ entry. See--magic! Similar functionality also exists for vi.  </para></listitem>\n+\n+ <listitem><para> A testsuite submission or sample program that will easily and\n+ simply show the existing error or test new functionality.  </para></listitem>\n+\n+ <listitem><para> The patch itself. If you are accessing the SVN repository\n+ use \"svn update; svn diff NEW\"; else, use \"diff -cp OLD NEW\"\n+ ... If your version of diff does not support these options, then\n+ get the latest version of GNU diff. The <ulink url=\"http://gcc.gnu.org/wiki/SvnTricks\">SVN Tricks</ulink> wiki page\n+ has information on customising the output of <code>svn diff</code>.</para></listitem>\n+\n+ <listitem><para> When you have all these pieces, bundle them up in a mail message\n+and send it to libstdc++@gcc.gnu.org. All patches and related\n+discussion should be sent to the libstdc++ mailing list. </para></listitem>\n+\n+</itemizedlist>\n+\n+    </sect2>\n+\n+  </sect1>\n+\n+  <sect1 id=\"contrib.coding_style\" xreflabel=\"Coding Style\">\n+    <title>Coding Style</title>\n+    <para>\n+    </para>\n+    <sect2 id=\"coding_style.bad_identifiers\" xreflabel=\"coding_style.bad\">\n+      <title>Bad Itentifiers</title>\n+<para>\n+Identifiers that conflict and should be avoided.\n+</para>\n+\n+<literallayout>\n+\n+This is the list of names \"reserved to the implementation\" that\n+have been claimed by certain compilers and system headers of interest,\n+and should not be used in the library.  It will grow, of course.\n+We generally are interested in names that are not all-caps, except\n+for those like \"_T\"\n+\n+For Solarix:\n+_B\n+_C\n+_L\n+_N\n+_P\n+_S\n+_U\n+_X\n+_E1\n+..\n+_E24\n+\n+Irix adds:\n+_A\n+_G\n+\n+MS adds:\n+_T\n+\n+BSD adds:\n+__used\n+__unused\n+__inline\n+_Complex\n+__istype\n+__maskrune\n+__tolower\n+__toupper\n+__wchar_t\n+__wint_t\n+_res\n+_res_ext\n+__tg_*\n+\n+For GCC:\n+\n+  [Note that this list is out of date.  It applies to the old\n+  name-mangling; in G++ 3.0 and higher a different name-mangling is\n+  used.  In addition, many of the bugs relating to G++ interpreting\n+  these names as operators have been fixed.]\n+\n+  The full set of __* identifiers (combined from gcc/cp/lex.c and\n+  gcc/cplus-dem.c) that are either old or new, but are definitely \n+  recognized by the demangler, is:\n+\n+__aa\n+__aad\n+__ad\n+__addr\n+__adv\n+__aer\n+__als\n+__alshift\n+__amd\n+__ami\n+__aml\n+__amu\n+__aor\n+__apl\n+__array\n+__ars\n+__arshift\n+__as\n+__bit_and\n+__bit_ior\n+__bit_not\n+__bit_xor\n+__call\n+__cl\n+__cm\n+__cn\n+__co\n+__component\n+__compound\n+__cond\n+__convert\n+__delete\n+__dl\n+__dv\n+__eq\n+__er\n+__ge\n+__gt\n+__indirect\n+__le\n+__ls\n+__lt\n+__max\n+__md\n+__method_call\n+__mi\n+__min\n+__minus\n+__ml\n+__mm\n+__mn\n+__mult\n+__mx\n+__ne\n+__negate\n+__new\n+__nop\n+__nt\n+__nw\n+__oo\n+__op\n+__or\n+__pl\n+__plus\n+__postdecrement\n+__postincrement\n+__pp\n+__pt\n+__rf\n+__rm\n+__rs\n+__sz\n+__trunc_div\n+__trunc_mod\n+__truth_andif\n+__truth_not\n+__truth_orif\n+__vc\n+__vd\n+__vn\n+\n+SGI badnames:\n+__builtin_alloca\n+__builtin_fsqrt\n+__builtin_sqrt\n+__builtin_fabs\n+__builtin_dabs\n+__builtin_cast_f2i\n+__builtin_cast_i2f\n+__builtin_cast_d2ll\n+__builtin_cast_ll2d\n+__builtin_copy_dhi2i\n+__builtin_copy_i2dhi\n+__builtin_copy_dlo2i\n+__builtin_copy_i2dlo\n+__add_and_fetch\n+__sub_and_fetch\n+__or_and_fetch\n+__xor_and_fetch\n+__and_and_fetch\n+__nand_and_fetch\n+__mpy_and_fetch\n+__min_and_fetch\n+__max_and_fetch\n+__fetch_and_add\n+__fetch_and_sub\n+__fetch_and_or\n+__fetch_and_xor\n+__fetch_and_and\n+__fetch_and_nand\n+__fetch_and_mpy\n+__fetch_and_min\n+__fetch_and_max\n+__lock_test_and_set\n+__lock_release\n+__lock_acquire\n+__compare_and_swap\n+__synchronize\n+__high_multiply\n+__unix\n+__sgi\n+__linux__\n+__i386__\n+__i486__\n+__cplusplus\n+__embedded_cplusplus\n+// long double conversion members mangled as __opr\n+// http://gcc.gnu.org/ml/libstdc++/1999-q4/msg00060.html\n+_opr\n+</literallayout>\n+    </sect2>\n+\n+    <sect2 id=\"coding_style.example\" xreflabel=\"coding_style.example\">\n+      <title>By Example</title>\n+<literallayout>\n+\n+This library is written to appropriate C++ coding standards.  As such,\n+it is intended to precede the recommendations of the GNU Coding\n+Standard, which can be referenced in full here:\n+\n+http://www.gnu.org/prep/standards/standards.html#Formatting\n+\n+The rest of this is also interesting reading, but skip the \"Design\n+Advice\" part.\n+\n+The GCC coding conventions are here, and are also useful:\n+http://gcc.gnu.org/codingconventions.html\n+\n+In addition, because it doesn't seem to be stated explicitly anywhere\n+else, there is an 80 column source limit.\n+\n+ChangeLog entries for member functions should use the\n+classname::member function name syntax as follows:\n+\n+1999-04-15  Dennis Ritchie  &lt;dr@att.com&gt;\n+\n+\t* src/basic_file.cc (__basic_file::open): Fix thinko in\n+\t_G_HAVE_IO_FILE_OPEN bits.\n+\n+Notable areas of divergence from what may be previous local practice\n+(particularly for GNU C) include:\n+\n+01. Pointers and references\n+  char* p = \"flop\";\n+  char&amp; c = *p;\n+     -NOT-\n+  char *p = \"flop\";  // wrong\n+  char &amp;c = *p;      // wrong\n+  \n+    Reason: In C++, definitions are mixed with executable code.  Here,       \n+\t    p is being initialized, not *p.  This is near-universal\n+            practice among C++ programmers; it is normal for C hackers\n+            to switch spontaneously as they gain experience.\n+\n+02. Operator names and parentheses\n+  operator==(type)\n+     -NOT-\n+  operator == (type)  // wrong\n+     \n+    Reason: The == is part of the function name.  Separating\n+            it makes the declaration look like an expression. \n+\n+03. Function names and parentheses\n+  void mangle()\n+     -NOT-\n+  void mangle ()  // wrong\n+\n+     Reason: no space before parentheses (except after a control-flow\n+     keyword) is near-universal practice for C++.  It identifies the\n+     parentheses as the function-call operator or declarator, as \n+     opposed to an expression or other overloaded use of parentheses.\n+\n+04. Template function indentation\n+  template&lt;typename T&gt;\n+    void \n+    template_function(args)\n+    { }\n+      -NOT-\n+  template&lt;class T&gt;\n+  void template_function(args) {};\n+  \n+     Reason: In class definitions, without indentation whitespace is\n+             needed both above and below the declaration to distinguish\n+\t     it visually from other members.  (Also, re: \"typename\"\n+\t     rather than \"class\".)  T often could be int, which is \n+\t     not a class.  (\"class\", here, is an anachronism.)\n+\n+05. Template class indentation\n+  template&lt;typename _CharT, typename _Traits&gt;\n+    class basic_ios : public ios_base\n+    {\n+    public:\n+      // Types:\n+    };\n+  -NOT-\n+  template&lt;class _CharT, class _Traits&gt;\n+  class basic_ios : public ios_base\n+    {\n+    public:\n+      // Types:\n+    };\n+  -NOT-\n+  template&lt;class _CharT, class _Traits&gt;\n+    class basic_ios : public ios_base\n+  {\n+    public:\n+      // Types:\n+  };\n+\n+06. Enumerators\n+  enum\n+  {\n+    space = _ISspace,\n+    print = _ISprint,\n+    cntrl = _IScntrl\n+  };\n+  -NOT-\n+  enum { space = _ISspace, print = _ISprint, cntrl = _IScntrl };\n+\n+07. Member initialization lists\n+   All one line, separate from class name.\n+\n+  gribble::gribble() \n+  : _M_private_data(0), _M_more_stuff(0), _M_helper(0);\n+  { }\n+  -NOT-\n+  gribble::gribble() : _M_private_data(0), _M_more_stuff(0), _M_helper(0);\n+  { }\n+\n+08. Try/Catch blocks\n+  try \n+    {\n+      //\n+    }   \n+  catch (...)\n+    {\n+      //\n+    }   \n+  -NOT-\n+  try {\n+    // \n+  } catch(...) { \n+    //\n+  }\n+\n+09. Member functions declarations and definitions\n+   Keywords such as extern, static, export, explicit, inline, etc\n+   go on the line above the function name. Thus\n+\n+  virtual int   \n+  foo()\n+  -NOT-\n+  virtual int foo()\n+\n+\tReason: GNU coding conventions dictate return types for functions\n+     \tare on a separate line than the function name and parameter list\n+     \tfor definitions. For C++, where we have member functions that can\n+    \tbe either inline definitions or declarations, keeping to this\n+     \tstandard allows all member function names for a given class to be\n+\taligned to the same margin, increasing readibility.\n+\n+\n+10. Invocation of member functions with \"this-&gt;\"\n+   For non-uglified names, use this-&gt;name to call the function.\n+\n+  this-&gt;sync()\n+  -NOT-\n+  sync()\n+\n+\tReason: Koenig lookup.\n+\n+11. Namespaces\n+  namespace std\n+  {\n+    blah blah blah;\n+  } // namespace std\n+\n+  -NOT-\n+\n+  namespace std {\n+    blah blah blah;\n+  } // namespace std\n+\n+12. Spacing under protected and private in class declarations:\n+   space above, none below\n+   ie\n+\n+   public:\n+     int foo;\n+\n+   -NOT-\n+   public:\n+   \n+     int foo;\n+\n+13. Spacing WRT return statements.\n+   no extra spacing before returns, no parenthesis\n+   ie\n+\n+   }\n+   return __ret;\n+\n+   -NOT-\n+   }\n+\n+   return __ret;\n+\n+   -NOT-\n+\n+   }\n+   return (__ret);\n+\n+\n+14. Location of global variables.\n+   All global variables of class type, whether in the \"user visable\"\n+   space (e.g., cin) or the implementation namespace, must be defined\n+   as a character array with the appropriate alignment and then later\n+   re-initialized to the correct value.\n+\n+   This is due to startup issues on certain platforms, such as AIX.\n+   For more explanation and examples, see src/globals.cc.  All such\n+   variables should be contained in that file, for simplicity.\n+\n+15. Exception abstractions\n+    Use the exception abstractions found in functexcept.h, which allow\n+    C++ programmers to use this library with -fno-exceptions. (Even if\n+    that is rarely advisable, it's a necessary evil for backwards\n+    compatibility.)\n+\n+16. Exception error messages\n+    All start with the name of the function where the exception is\n+    thrown, and then (optional) descriptive text is added. Example:\n+\n+    __throw_logic_error(__N(\"basic_string::_S_construct NULL not valid\"));\n+\n+    Reason: The verbose terminate handler prints out exception::what(),\n+    as well as the typeinfo for the thrown exception. As this is the\n+    default terminate handler, by putting location info into the\n+    exception string, a very useful error message is printed out for\n+    uncaught exceptions. So useful, in fact, that non-programmers can\n+    give useful error messages, and programmers can intelligently\n+    speculate what went wrong without even using a debugger.\n+\n+17. The doxygen style guide to comments is a separate document,\n+    see index.\n+\n+The library currently has a mixture of GNU-C and modern C++ coding\n+styles.  The GNU C usages will be combed out gradually.\n+\n+Name patterns:\n+\n+For nonstandard names appearing in Standard headers, we are constrained \n+to use names that begin with underscores.  This is called \"uglification\".\n+The convention is:\n+\n+  Local and argument names:  __[a-z].*\n+\n+    Examples:  __count  __ix  __s1  \n+\n+  Type names and template formal-argument names: _[A-Z][^_].*\n+\n+    Examples:  _Helper  _CharT  _N \n+\n+  Member data and function names: _M_.*\n+\n+    Examples:  _M_num_elements  _M_initialize ()\n+\n+  Static data members, constants, and enumerations: _S_.*\n+\n+    Examples: _S_max_elements  _S_default_value\n+\n+Don't use names in the same scope that differ only in the prefix, \n+e.g. _S_top and _M_top.  See BADNAMES for a list of forbidden names.\n+(The most tempting of these seem to be and \"_T\" and \"__sz\".)\n+\n+Names must never have \"__\" internally; it would confuse name\n+unmanglers on some targets.  Also, never use \"__[0-9]\", same reason.\n+\n+--------------------------\n+\n+[BY EXAMPLE]\n+    \n+#ifndef  _HEADER_\n+#define  _HEADER_ 1\n+\n+namespace std\n+{\n+  class gribble\n+  {\n+  public:\n+    gribble() throw();\n+\n+    gribble(const gribble&amp;);\n+\n+    explicit \n+    gribble(int __howmany);\n+\n+    gribble&amp; \n+    operator=(const gribble&amp;);\n+\n+    virtual \n+    ~gribble() throw ();\n+\n+    // Start with a capital letter, end with a period.\n+    inline void  \n+    public_member(const char* __arg) const;\n+\n+    // In-class function definitions should be restricted to one-liners.\n+    int \n+    one_line() { return 0 }\n+\n+    int \n+    two_lines(const char* arg) \n+    { return strchr(arg, 'a'); }\n+\n+    inline int \n+    three_lines();  // inline, but defined below.\n+\n+    // Note indentation.\n+    template&lt;typename _Formal_argument&gt;\n+      void \n+      public_template() const throw();\n+\n+    template&lt;typename _Iterator&gt;\n+      void \n+      other_template();\n+\n+  private:\n+    class _Helper;\n+\n+    int _M_private_data;\n+    int _M_more_stuff;\n+    _Helper* _M_helper;\n+    int _M_private_function();\n+\n+    enum _Enum \n+      { \n+\t_S_one, \n+\t_S_two \n+      };\n+\n+    static void \n+    _S_initialize_library();\n+  };\n+\n+// More-or-less-standard language features described by lack, not presence.\n+# ifndef _G_NO_LONGLONG\n+  extern long long _G_global_with_a_good_long_name;  // avoid globals!\n+# endif\n+\n+  // Avoid in-class inline definitions, define separately;\n+  // likewise for member class definitions:\n+  inline int\n+  gribble::public_member() const\n+  { int __local = 0; return __local; }\n+\n+  class gribble::_Helper\n+  {\n+    int _M_stuff;\n+\n+    friend class gribble;\n+  };\n+}\n+\n+// Names beginning with \"__\": only for arguments and\n+//   local variables; never use \"__\" in a type name, or\n+//   within any name; never use \"__[0-9]\".\n+\n+#endif /* _HEADER_ */\n+\n+\n+namespace std \n+{\n+  template&lt;typename T&gt;  // notice: \"typename\", not \"class\", no space\n+    long_return_value_type&lt;with_many, args&gt;  \n+    function_name(char* pointer,               // \"char *pointer\" is wrong.\n+\t\t  char* argument, \n+\t\t  const Reference&amp; ref)\n+    {\n+      // int a_local;  /* wrong; see below. */\n+      if (test) \n+      { \n+\t  nested code \n+      }\n+    \n+      int a_local = 0;  // declare variable at first use.\n+\n+      //  char a, b, *p;   /* wrong */\n+      char a = 'a';\n+      char b = a + 1;\n+      char* c = \"abc\";  // each variable goes on its own line, always.\n+\n+      // except maybe here...\n+      for (unsigned i = 0, mask = 1; mask; ++i, mask &lt;&lt;= 1) {\n+\t  // ...\n+      }\n+    }\n+  \n+  gribble::gribble()\n+  : _M_private_data(0), _M_more_stuff(0), _M_helper(0);\n+  { }\n+\n+  inline int \n+  gribble::three_lines()\n+  {\n+    // doesn't fit in one line.\n+  }\n+} // namespace std\n+\n+\n+</literallayout>\n+    </sect2>\n+  </sect1>  \n+\n+  <sect1 id=\"contrib.doc_style\" xreflabel=\"Documentation Style\">\n+    <title>Documentation Style</title>\n+    <para>\n+    </para>\n+    <sect2 id=\"doc_style.doxygen\" xreflabel=\"doc_style.doxygen\">\n+      <title>Doxygen</title>\n+    <sect3 id=\"doxygen.generating\" xreflabel=\"doxygen.generating\">\n+      <title>Generating the Doxygen Files</title>\n+\n+<para>The Makefile rules <code>'make doc-doxygen-html'</code>,\n+   and <code>'make doc-doxygen-man'</code> in the libstdc++ build\n+   directory generate the HTML docs, the and the man pages,\n+   respectively.  Prerequisite tools are Bash 2.x,\n+   <ulink url=\"http://www.doxygen.org/\">Doxygen</ulink>, a working version of <code>g++</code> somewhere in the PATH, and\n+   the <ulink url=\"http://www.gnu.org/software/coreutils/\">GNU coreutils</ulink>.\n+\n+   In addition, to generate the pretty pictures and hierarchy graphs, the \n+   <ulink url=\n+   \"http://www.research.att.com/sw/tools/graphviz/download.html\">Graphviz</ulink>\n+   package will need to be installed.\n+   (g++ is used to build a program which manipulates man pages.  GNU versions\n+   of find, xargs, and possibly sed and grep are used, just because the GNU\n+   versions make things very easy.)\n+</para>\n+\n+<para>Careful observers will see that the Makefile rules simply call a script\n+   from the source tree, <code>run_doxygen</code>, which does the actual work\n+   of running Doxygen and then (most importantly) massaging the output files.\n+   If for some reason you prefer to not go through the Makefile, you can call\n+   this script directly.  (Start by passing <code>'--help'</code>.)\n+</para>\n+\n+<para>If you wish to tweak the Doxygen settings, do so by editing\n+   <code>docs/doxygen/user.cfg.in</code>.  Notes to v3-hackers are written in\n+   triple-# comments.\n+</para>\n+\n+    </sect3>\n+\n+    <sect3 id=\"doxygen.markup\" xreflabel=\"doxygen.markup\">\n+      <title>Markup</title>\n+\n+<para>In general, libstdc++ files should be formatted according to the GNU\n+   C++ Coding Standard rules found in the file\n+   <ulink url=\"http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/C++STYLE\">C++STYLE</ulink>.\n+   Before any doxygen-specific formatting tweaks are made, please try to make\n+   sure that the initial formatting is sound.\n+</para>\n+\n+<para>Adding Doxygen markup to a file (informally called \"doxygenating\") is very\n+   simple.  The Doxygen manual can be found\n+   <ulink url=\"http://www.stack.nl/~dimitri/doxygen/download.html#latestman\">here</ulink>.\n+   We try to use a very-recent version of Doxygen.\n+</para>\n+\n+<para>For classes, use deque/vector/list and std::pair as examples.  For\n+   functions, see their member functions, and the free functions in\n+   <code>stl_algobase.h</code>.  Member functions of other container-like\n+   types should read similarly to these member functions.\n+</para>\n+\n+<para>These points accompany the first list in section 3.1 of the Doxygen manual:\n+</para>\n+<orderedlist>\n+ <listitem><para>Use the Javadoc style...</para></listitem>\n+ <listitem><para>...not the Qt style.  The intermediate *'s are preferred.</para></listitem>\n+ <listitem><para>Use the triple-slash style only for one-line comments (the \"brief\" mode).\n+     Very recent versions of Doxygen permit full-mode comments in triple-slash\n+     blocks, but the formatting still comes out wonky.</para></listitem>\n+ <listitem><para>This is disgusting.  Don't do this.</para></listitem>\n+</orderedlist>\n+\n+<para>Use the @-style of commands, not the !-style.  Please be careful about\n+   whitespace in your markup comments.  Most of the time it doesn't matter;\n+   doxygen absorbs most whitespace, and both HTML and *roff are agnostic about\n+   whitespace.  However, in &lt;pre&gt; blocks and @code/@endcode sections,\n+   spacing can have \"interesting\" effects.\n+</para>\n+\n+<para>Use either kind of grouping, as appropriate.  <code>doxygroups.cc</code>\n+   exists for this purpose.  See <code>stl_iterator.h</code> for a good\n+   example of the \"other\" kind of grouping.\n+</para>\n+\n+<para>Please use markup tags like @p and @a when referring to things such as the\n+   names of function parameters.  Use @e for emphasis when necessary.  Use @c\n+   to refer to other standard names.  (Examples of all these abound in the\n+   present code.)\n+</para>\n+\n+    </sect3>\n+\n+    </sect2>\n+\n+    <sect2 id=\"doc_style.docbook\" xreflabel=\"doc_style.docbook\">\n+      <title>Docbook</title>\n+\n+<literallayout>\n+ \n+Which files are important:\n+\n+Main page\n+spine.xml  \t\t- index to documentation set\n+\n+manual/spine.xml  \t- index to manual\n+manual/*.xml  \t\t- chapters and sections of the manual\n+\n+faq.xml  \t\t- index to FAQ\n+api.xml  \t\t- index to source level / API \n+\n+All *.txml files are template xml files, ie otherwise empty files with\n+the correct structure, suitable for filling in.\n+\n+\n+Cannonical Writing Style\n+\n+class template\n+function template\n+member function template\n+(via C++ Templates, Vandevoorde)\n+\n+class in namespace std: allocator, not std::allocator\n+\n+header file: iostream, not &lt;iostream&gt;\n+\n+\n+Translation\n+\n+HTML to XML rough equivalents\n+\n+&lt;p&gt;\t\t\t&lt;para&gt;\n+\n+&lt;pre&gt;\t\t\t&lt;computeroutput&gt;\n+&lt;pre&gt;\t\t\t&lt;programlisting&gt;\n+&lt;pre&gt;\t\t\t&lt;literallayout&gt;\n+\n+&lt;ul&gt;\t\t\t&lt;itemizedlist&gt;\n+&lt;ol&gt;\t\t\t&lt;orderedlist&gt;\n+&lt;il&gt;\t\t\t&lt;listitem&gt;\n+\n+&lt;dl&gt;\t\t\t&lt;variablelist&gt;\n+\n+\t\t\t&lt;varlistentry&gt;\n+&lt;dt&gt; \t\t\t  &lt;term&gt;\n+&lt;/dt&gt;\t\t\t  &lt;/term&gt;\n+&lt;dd&gt;  \t\t\t  &lt;listitem&gt;\n+&lt;/dt&gt;\t\t\t  &lt;/listitem&gt;\n+\t\t\t&lt;/varlistentry&gt;\n+\n+&lt;a href\t\t\t&lt;ulink url\n+&lt;code&gt;\t\t\t&lt;literal&gt;\n+&lt;code&gt;\t\t\t&lt;programlisting&gt;\n+\n+&lt;strong&gt;\t\t&lt;emphasis&gt;\n+&lt;em&gt;\t\t\t&lt;emphasis&gt;\n+&quot;\t\t\t&lt;quote&gt;\n+\n+ctype.h\t\t\t&lt;filename class=\"headerfile\"&gt;&lt;/filename&gt;\n+\n+   \n+build_dir   \t\t&lt;filename class=\"directory\"&gt;path_to_build_dir&lt;/filename&gt;\n+\n+Finer gradations of &lt;code&gt;\n+\n+&lt;classname&gt;\t\t&lt;classname&gt;string&lt;/classname&gt;\n+\t\t\t&lt;classname&gt;vector&lt;&gt;&lt;/classname&gt;\t\t\t\n+\t\t\t&lt;function&gt;fs.clear()&lt;/function&gt;\n+\n+&lt;structname&gt;\n+\n+&lt;function&gt;\t\t&lt;function&gt;clear()&lt;/function&gt;\n+\n+&lt;type&gt;\t\t\t&lt;type&gt;long long&lt;/type&gt;\n+\n+&lt;varname&gt;\t\t&lt;varname&gt;fs&lt;/varname&gt;\n+\n+&lt;literal&gt;\t\t&lt;literal&gt;-Weffc++&lt;/literal&gt; \n+\t\t\t&lt;literal&gt;rel_ops&lt;/literal&gt;\n+\n+&lt;constant&gt;\t\t&lt;constant&gt;_GNU_SOURCE&lt;/constant&gt;\n+\t\t\t&lt;constant&gt;3.0&lt;/constant&gt;\n+\n+&lt;filename&gt;\n+\n+&lt;command&gt;\t\t&lt;command&gt;g++&lt;/command&gt;\n+\n+&lt;errortext&gt;\t\t&lt;errortext&gt;foo Concept &lt;/errortext&gt;\n+\n+\n+General structure\n+\n+&lt;set&gt;\n+  &lt;book&gt;\n+  &lt;/book&gt;\n+\n+  &lt;book&gt;\n+    &lt;chapter&gt;\n+    &lt;/chapter&gt;\n+  &lt;/book&gt;\n+\n+\n+  &lt;book&gt;\t\n+    &lt;part&gt;\n+      &lt;chapter&gt;\n+        &lt;section&gt;\n+        &lt;/section&gt;\n+\n+        &lt;sect1&gt;\n+        &lt;/sect1&gt;\n+\n+        &lt;sect1&gt;\n+          &lt;sect2&gt;\n+          &lt;/sect2&gt;\n+        &lt;/sect1&gt;\n+      &lt;/chapter&gt;\n+\n+      &lt;chapter&gt;\n+      &lt;/chapter&gt;\n+    &lt;/part&gt;  \n+  &lt;/book&gt;\n+\n+\n+&lt;/set&gt;\n+\n+</literallayout>\n+    </sect2>\n+\n+  </sect1>  \n+\n+  <sect1 id=\"contrib.design_notes\" xreflabel=\"Design Notes\">\n+    <title>Design Notes</title>\n+    <para>\n+    </para>\n+\n+<literallayout>\n+\n+The Library\n+-----------\n+\n+This paper is covers two major areas:\n+\n+ - Features and policies not mentioned in the standard that\n+   the quality of the library implementation depends on, including\n+   extensions and \"implementation-defined\" features;\n+\n+ - Plans for required but unimplemented library features and\n+   optimizations to them.\n+\n+Overhead\n+--------\n+\n+The standard defines a large library, much larger than the standard\n+C library.  A naive implementation would suffer substantial overhead\n+in compile time, executable size, and speed, rendering it unusable\n+in many (particularly embedded) applications.  The alternative demands\n+care in construction, and some compiler support, but there is no\n+need for library subsets.\n+\n+What are the sources of this overhead?  There are four main causes:\n+\n+ - The library is specified almost entirely as templates, which\n+   with current compilers must be included in-line, resulting in\n+   very slow builds as tens or hundreds of thousands of lines\n+   of function definitions are read for each user source file.\n+   Indeed, the entire SGI STL, as well as the dos Reis valarray,\n+   are provided purely as header files, largely for simplicity in\n+   porting.  Iostream/locale is (or will be) as large again.\n+\n+ - The library is very flexible, specifying a multitude of hooks\n+   where users can insert their own code in place of defaults.\n+   When these hooks are not used, any time and code expended to\n+   support that flexibility is wasted.\n+\n+ - Templates are often described as causing to \"code bloat\".  In\n+   practice, this refers (when it refers to anything real) to several\n+   independent processes.  First, when a class template is manually\n+   instantiated in its entirely, current compilers place the definitions\n+   for all members in a single object file, so that a program linking\n+   to one member gets definitions of all.  Second, template functions\n+   which do not actually depend on the template argument are, under\n+   current compilers, generated anew for each instantiation, rather\n+   than being shared with other instantiations.  Third, some of the\n+   flexibility mentioned above comes from virtual functions (both in\n+   regular classes and template classes) which current linkers add\n+   to the executable file even when they manifestly cannot be called.\n+\n+ - The library is specified to use a language feature, exceptions,\n+   which in the current gcc compiler ABI imposes a run time and\n+   code space cost to handle the possibility of exceptions even when\n+   they are not used.  Under the new ABI (accessed with -fnew-abi),\n+   there is a space overhead and a small reduction in code efficiency\n+   resulting from lost optimization opportunities associated with\n+   non-local branches associated with exceptions.\n+\n+What can be done to eliminate this overhead?  A variety of coding\n+techniques, and compiler, linker and library improvements and\n+extensions may be used, as covered below.  Most are not difficult,\n+and some are already implemented in varying degrees.\n+\n+Overhead: Compilation Time\n+--------------------------\n+\n+Providing \"ready-instantiated\" template code in object code archives\n+allows us to avoid generating and optimizing template instantiations\n+in each compilation unit which uses them.  However, the number of such\n+instantiations that are useful to provide is limited, and anyway this\n+is not enough, by itself, to minimize compilation time.  In particular,\n+it does not reduce time spent parsing conforming headers.\n+\n+Quicker header parsing will depend on library extensions and compiler\n+improvements.   One approach is some variation on the techniques\n+previously marketed as \"pre-compiled headers\", now standardized as\n+support for the \"export\" keyword.  \"Exported\" template definitions\n+can be placed (once) in a \"repository\" -- really just a library, but\n+of template definitions rather than object code -- to be drawn upon\n+at link time when an instantiation is needed, rather than placed in\n+header files to be parsed along with every compilation unit.\n+\n+Until \"export\" is implemented we can put some of the lengthy template\n+definitions in #if guards or alternative headers so that users can skip\n+over the the full definitions when they need only the ready-instantiated\n+specializations.\n+\n+To be precise, this means that certain headers which define\n+templates which users normally use only for certain arguments\n+can be instrumented to avoid exposing the template definitions\n+to the compiler unless a macro is defined.  For example, in\n+&lt;string&gt;, we might have:\n+\n+   template &lt;class _CharT, ... &gt; class basic_string {\n+     ... // member declarations\n+   };\n+   ... // operator declarations\n+\n+   #ifdef _STRICT_ISO_\n+   # if _G_NO_TEMPLATE_EXPORT\n+   #   include &lt;bits/std_locale.h&gt;  // headers needed by definitions\n+   #   ...\n+   #   include &lt;bits/string.tcc&gt;  // member and global template definitions.\n+   # endif\n+   #endif\n+\n+Users who compile without specifying a strict-ISO-conforming flag\n+would not see many of the template definitions they now see, and rely\n+instead on ready-instantiated specializations in the library.  This\n+technique would be useful for the following substantial components:\n+string, locale/iostreams, valarray.  It would *not* be useful or\n+usable with the following: containers, algorithms, iterators,\n+allocator.  Since these constitute a large (though decreasing)\n+fraction of the library, the benefit the technique offers is\n+limited.\n+\n+The language specifies the semantics of the \"export\" keyword, but\n+the gcc compiler does not yet support it.  When it does, problems\n+with large template inclusions can largely disappear, given some\n+minor library reorganization, along with the need for the apparatus\n+described above.\n+\n+Overhead: Flexibility Cost\n+--------------------------\n+\n+The library offers many places where users can specify operations\n+to be performed by the library in place of defaults.  Sometimes\n+this seems to require that the library use a more-roundabout, and\n+possibly slower, way to accomplish the default requirements than\n+would be used otherwise.\n+\n+The primary protection against this overhead is thorough compiler\n+optimization, to crush out layers of inline function interfaces.\n+Kuck &amp; Associates has demonstrated the practicality of this kind\n+of optimization.\n+\n+The second line of defense against this overhead is explicit\n+specialization.  By defining helper function templates, and writing\n+specialized code for the default case, overhead can be eliminated\n+for that case without sacrificing flexibility.  This takes full\n+advantage of any ability of the optimizer to crush out degenerate\n+code.\n+\n+The library specifies many virtual functions which current linkers\n+load even when they cannot be called.  Some minor improvements to the\n+compiler and to ld would eliminate any such overhead by simply\n+omitting virtual functions that the complete program does not call.\n+A prototype of this work has already been done.  For targets where\n+GNU ld is not used, a \"pre-linker\" could do the same job.\n+\n+The main areas in the standard interface where user flexibility\n+can result in overhead are:\n+\n+ - Allocators:  Containers are specified to use user-definable\n+   allocator types and objects, making tuning for the container\n+   characteristics tricky.\n+\n+ - Locales: the standard specifies locale objects used to implement\n+   iostream operations, involving many virtual functions which use\n+   streambuf iterators.\n+\n+ - Algorithms and containers: these may be instantiated on any type,\n+   frequently duplicating code for identical operations.\n+\n+ - Iostreams and strings: users are permitted to use these on their\n+   own types, and specify the operations the stream must use on these\n+   types.\n+\n+Note that these sources of overhead are _avoidable_.  The techniques\n+to avoid them are covered below.\n+\n+Code Bloat\n+----------\n+\n+In the SGI STL, and in some other headers, many of the templates\n+are defined \"inline\" -- either explicitly or by their placement\n+in class definitions -- which should not be inline.  This is a\n+source of code bloat.  Matt had remarked that he was relying on\n+the compiler to recognize what was too big to benefit from inlining,\n+and generate it out-of-line automatically.  However, this also can\n+result in code bloat except where the linker can eliminate the extra\n+copies.\n+\n+Fixing these cases will require an audit of all inline functions\n+defined in the library to determine which merit inlining, and moving\n+the rest out of line.  This is an issue mainly in chapters 23, 25, and\n+27.  Of course it can be done incrementally, and we should generally\n+accept patches that move large functions out of line and into \".tcc\"\n+files, which can later be pulled into a repository.  Compiler/linker\n+improvements to recognize very large inline functions and move them\n+out-of-line, but shared among compilation units, could make this\n+work unnecessary.\n+\n+Pre-instantiating template specializations currently produces large\n+amounts of dead code which bloats statically linked programs.  The\n+current state of the static library, libstdc++.a, is intolerable on\n+this account, and will fuel further confused speculation about a need\n+for a library \"subset\".  A compiler improvement that treats each\n+instantiated function as a separate object file, for linking purposes,\n+would be one solution to this problem.  An alternative would be to\n+split up the manual instantiation files into dozens upon dozens of\n+little files, each compiled separately, but an abortive attempt at\n+this was done for &lt;string&gt; and, though it is far from complete, it\n+is already a nuisance.  A better interim solution (just until we have\n+\"export\") is badly needed.\n+\n+When building a shared library, the current compiler/linker cannot\n+automatically generate the instantiatiations needed.  This creates a\n+miserable situation; it means any time something is changed in the\n+library, before a shared library can be built someone must manually\n+copy the declarations of all templates that are needed by other parts\n+of the library to an \"instantiation\" file, and add it to the build\n+system to be compiled and linked to the library.  This process is\n+readily automated, and should be automated as soon as possible.\n+Users building their own shared libraries experience identical\n+frustrations.\n+\n+Sharing common aspects of template definitions among instantiations\n+can radically reduce code bloat.  The compiler could help a great\n+deal here by recognizing when a function depends on nothing about\n+a template parameter, or only on its size, and giving the resulting\n+function a link-name \"equate\" that allows it to be shared with other\n+instantiations.  Implementation code could take advantage of the\n+capability by factoring out code that does not depend on the template\n+argument into separate functions to be merged by the compiler.\n+\n+Until such a compiler optimization is implemented, much can be done\n+manually (if tediously) in this direction.  One such optimization is\n+to derive class templates from non-template classes, and move as much\n+implementation as possible into the base class.  Another is to partial-\n+specialize certain common instantiations, such as vector&lt;T*&gt;, to share\n+code for instantiations on all types T.  While these techniques work,\n+they are far from the complete solution that a compiler improvement\n+would afford.\n+\n+Overhead: Expensive Language Features\n+-------------------------------------\n+\n+The main \"expensive\" language feature used in the standard library\n+is exception support, which requires compiling in cleanup code with\n+static table data to locate it, and linking in library code to use\n+the table.  For small embedded programs the amount of such library\n+code and table data is assumed by some to be excessive.  Under the\n+\"new\" ABI this perception is generally exaggerated, although in some\n+cases it may actually be excessive.\n+\n+To implement a library which does not use exceptions directly is\n+not difficult given minor compiler support (to \"turn off\" exceptions\n+and ignore exception constructs), and results in no great library\n+maintenance difficulties.  To be precise, given \"-fno-exceptions\",\n+the compiler should treat \"try\" blocks as ordinary blocks, and\n+\"catch\" blocks as dead code to ignore or eliminate.  Compiler\n+support is not strictly necessary, except in the case of \"function\n+try blocks\"; otherwise the following macros almost suffice:\n+\n+  #define throw(X)\n+  #define try      if (true)\n+  #define catch(X) else if (false)\n+\n+However, there may be a need to use function try blocks in the\n+library implementation, and use of macros in this way can make\n+correct diagnostics impossible.  Furthermore, use of this scheme\n+would require the library to call a function to re-throw exceptions\n+from a try block.  Implementing the above semantics in the compiler\n+is preferable.\n+\n+Given the support above (however implemented) it only remains to\n+replace code that \"throws\" with a call to a well-documented \"handler\"\n+function in a separate compilation unit which may be replaced by\n+the user.  The main source of exceptions that would be difficult\n+for users to avoid is memory allocation failures, but users can\n+define their own memory allocation primitives that never throw.\n+Otherwise, the complete list of such handlers, and which library\n+functions may call them, would be needed for users to be able to\n+implement the necessary substitutes.  (Fortunately, they have the\n+source code.)\n+\n+Opportunities\n+-------------\n+\n+The template capabilities of C++ offer enormous opportunities for\n+optimizing common library operations, well beyond what would be\n+considered \"eliminating overhead\".  In particular, many operations\n+done in Glibc with macros that depend on proprietary language\n+extensions can be implemented in pristine Standard C++.  For example,\n+the chapter 25 algorithms, and even C library functions such as strchr,\n+can be specialized for the case of static arrays of known (small) size.\n+\n+Detailed optimization opportunities are identified below where\n+the component where they would appear is discussed.  Of course new\n+opportunities will be identified during implementation.\n+\n+Unimplemented Required Library Features\n+---------------------------------------\n+\n+The standard specifies hundreds of components, grouped broadly by\n+chapter.  These are listed in excruciating detail in the CHECKLIST\n+file.\n+\n+  17 general\n+  18 support\n+  19 diagnostics\n+  20 utilities\n+  21 string\n+  22 locale\n+  23 containers\n+  24 iterators\n+  25 algorithms\n+  26 numerics\n+  27 iostreams\n+  Annex D  backward compatibility\n+\n+Anyone participating in implementation of the library should obtain\n+a copy of the standard, ISO 14882.   People in the U.S. can obtain an\n+electronic copy for US$18 from ANSI's web site.  Those from other\n+countries should visit http://www.iso.ch/ to find out the location\n+of their country's representation in ISO, in order to know who can\n+sell them a copy.\n+\n+The emphasis in the following sections is on unimplemented features\n+and optimization opportunities.\n+\n+Chapter 17  General\n+-------------------\n+\n+Chapter 17 concerns overall library requirements.\n+\n+The standard doesn't mention threads.  A multi-thread (MT) extension\n+primarily affects operators new and delete (18), allocator (20),\n+string (21), locale (22), and iostreams (27).  The common underlying\n+support needed for this is discussed under chapter 20.\n+\n+The standard requirements on names from the C headers create a\n+lot of work, mostly done.  Names in the C headers must be visible\n+in the std:: and sometimes the global namespace; the names in the\n+two scopes must refer to the same object.  More stringent is that\n+Koenig lookup implies that any types specified as defined in std::\n+really are defined in std::.  Names optionally implemented as\n+macros in C cannot be macros in C++.  (An overview may be read at\n+&lt;http://www.cantrip.org/cheaders.html&gt;).  The scripts \"inclosure\"\n+and \"mkcshadow\", and the directories shadow/ and cshadow/, are the\n+beginning of an effort to conform in this area.\n+\n+A correct conforming definition of C header names based on underlying\n+C library headers, and practical linking of conforming namespaced\n+customer code with third-party C libraries depends ultimately on\n+an ABI change, allowing namespaced C type names to be mangled into\n+type names as if they were global, somewhat as C function names in a\n+namespace, or C++ global variable names, are left unmangled.  Perhaps\n+another \"extern\" mode, such as 'extern \"C-global\"' would be an\n+appropriate place for such type definitions.  Such a type would\n+affect mangling as follows:\n+\n+  namespace A {\n+    struct X {};\n+    extern \"C-global\" {  // or maybe just 'extern \"C\"'\n+      struct Y {};\n+    };\n+  }\n+  void f(A::X*);  // mangles to f__FPQ21A1X\n+  void f(A::Y*);  // mangles to f__FP1Y\n+\n+(It may be that this is really the appropriate semantics for regular\n+'extern \"C\"', and 'extern \"C-global\"', as an extension, would not be\n+necessary.) This would allow functions declared in non-standard C headers\n+(and thus fixable by neither us nor users) to link properly with functions\n+declared using C types defined in properly-namespaced headers.  The\n+problem this solves is that C headers (which C++ programmers do persist\n+in using) frequently forward-declare C struct tags without including\n+the header where the type is defined, as in\n+\n+  struct tm;\n+  void munge(tm*);\n+\n+Without some compiler accommodation, munge cannot be called by correct\n+C++ code using a pointer to a correctly-scoped tm* value.\n+\n+The current C headers use the preprocessor extension \"#include_next\",\n+which the compiler complains about when run \"-pedantic\".\n+(Incidentally, it appears that \"-fpedantic\" is currently ignored,\n+probably a bug.)  The solution in the C compiler is to use\n+\"-isystem\" rather than \"-I\", but unfortunately in g++ this seems\n+also to wrap the whole header in an 'extern \"C\"' block, so it's\n+unusable for C++ headers.  The correct solution appears to be to\n+allow the various special include-directory options, if not given\n+an argument, to affect subsequent include-directory options additively,\n+so that if one said\n+\n+  -pedantic -iprefix $(prefix) \\\n+  -idirafter -ino-pedantic -ino-extern-c -iwithprefix -I g++-v3 \\\n+  -iwithprefix -I g++-v3/ext\n+\n+the compiler would search $(prefix)/g++-v3 and not report\n+pedantic warnings for files found there, but treat files in\n+$(prefix)/g++-v3/ext pedantically.  (The undocumented semantics\n+of \"-isystem\" in g++ stink.  Can they be rescinded?  If not it\n+must be replaced with something more rationally behaved.)\n+\n+All the C headers need the treatment above; in the standard these\n+headers are mentioned in various chapters.  Below, I have only\n+mentioned those that present interesting implementation issues.\n+\n+The components identified as \"mostly complete\", below, have not been\n+audited for conformance.  In many cases where the library passes\n+conformance tests we have non-conforming extensions that must be\n+wrapped in #if guards for \"pedantic\" use, and in some cases renamed\n+in a conforming way for continued use in the implementation regardless\n+of conformance flags.\n+\n+The STL portion of the library still depends on a header\n+stl/bits/stl_config.h full of #ifdef clauses.  This apparatus\n+should be replaced with autoconf/automake machinery.\n+\n+The SGI STL defines a type_traits&lt;&gt; template, specialized for\n+many types in their code including the built-in numeric and\n+pointer types and some library types, to direct optimizations of\n+standard functions.  The SGI compiler has been extended to generate\n+specializations of this template automatically for user types,\n+so that use of STL templates on user types can take advantage of\n+these optimizations.  Specializations for other, non-STL, types\n+would make more optimizations possible, but extending the gcc\n+compiler in the same way would be much better.  Probably the next\n+round of standardization will ratify this, but probably with\n+changes, so it probably should be renamed to place it in the\n+implementation namespace.\n+\n+The SGI STL also defines a large number of extensions visible in\n+standard headers.  (Other extensions that appear in separate headers\n+have been sequestered in subdirectories ext/ and backward/.)  All\n+these extensions should be moved to other headers where possible,\n+and in any case wrapped in a namespace (not std!), and (where kept\n+in a standard header) girded about with macro guards.  Some cannot be\n+moved out of standard headers because they are used to implement\n+standard features.   The canonical method for accommodating these\n+is to use a protected name, aliased in macro guards to a user-space\n+name.  Unfortunately C++ offers no satisfactory template typedef\n+mechanism, so very ad-hoc and unsatisfactory aliasing must be used\n+instead.\n+\n+Implementation of a template typedef mechanism should have the highest\n+priority among possible extensions, on the same level as implementation\n+of the template \"export\" feature.\n+\n+Chapter 18  Language support\n+----------------------------\n+\n+Headers: &lt;limits&gt; &lt;new&gt; &lt;typeinfo&gt; &lt;exception&gt;\n+C headers: &lt;cstddef&gt; &lt;climits&gt; &lt;cfloat&gt;  &lt;cstdarg&gt; &lt;csetjmp&gt;\n+           &lt;ctime&gt;   &lt;csignal&gt; &lt;cstdlib&gt; (also 21, 25, 26)\n+\n+This defines the built-in exceptions, rtti, numeric_limits&lt;&gt;,\n+operator new and delete.  Much of this is provided by the\n+compiler in its static runtime library.\n+\n+Work to do includes defining numeric_limits&lt;&gt; specializations in\n+separate files for all target architectures.  Values for integer types\n+except for bool and wchar_t are readily obtained from the C header\n+&lt;limits.h&gt;, but values for the remaining numeric types (bool, wchar_t,\n+float, double, long double) must be entered manually.  This is\n+largely dog work except for those members whose values are not\n+easily deduced from available documentation.  Also, this involves\n+some work in target configuration to identify the correct choice of\n+file to build against and to install.\n+\n+The definitions of the various operators new and delete must be\n+made thread-safe, which depends on a portable exclusion mechanism,\n+discussed under chapter 20.   Of course there is always plenty of\n+room for improvements to the speed of operators new and delete.\n+\n+&lt;cstdarg&gt;, in Glibc, defines some macros that gcc does not allow to\n+be wrapped into an inline function.  Probably this header will demand\n+attention whenever a new target is chosen.  The functions atexit(),\n+exit(), and abort() in cstdlib have different semantics in C++, so\n+must be re-implemented for C++.\n+\n+Chapter 19  Diagnostics\n+-----------------------\n+\n+Headers: &lt;stdexcept&gt;\n+C headers: &lt;cassert&gt; &lt;cerrno&gt;\n+\n+This defines the standard exception objects, which are \"mostly complete\".\n+Cygnus has a version, and now SGI provides a slightly different one.\n+It makes little difference which we use.\n+\n+The C global name \"errno\", which C allows to be a variable or a macro,\n+is required in C++ to be a macro.  For MT it must typically result in\n+a function call.\n+\n+Chapter 20  Utilities\n+---------------------\n+Headers: &lt;utility&gt; &lt;functional&gt; &lt;memory&gt;\n+C header: &lt;ctime&gt; (also in 18)\n+\n+SGI STL provides \"mostly complete\" versions of all the components\n+defined in this chapter.  However, the auto_ptr&lt;&gt; implementation\n+is known to be wrong.  Furthermore, the standard definition of it\n+is known to be unimplementable as written.  A minor change to the\n+standard would fix it, and auto_ptr&lt;&gt; should be adjusted to match.\n+\n+Multi-threading affects the allocator implementation, and there must\n+be configuration/installation choices for different users' MT\n+requirements.  Anyway, users will want to tune allocator options\n+to support different target conditions, MT or no.\n+\n+The primitives used for MT implementation should be exposed, as an\n+extension, for users' own work.  We need cross-CPU \"mutex\" support,\n+multi-processor shared-memory atomic integer operations, and single-\n+processor uninterruptible integer operations, and all three configurable\n+to be stubbed out for non-MT use, or to use an appropriately-loaded\n+dynamic library for the actual runtime environment, or statically\n+compiled in for cases where the target architecture is known.\n+\n+Chapter 21  String\n+------------------\n+Headers: &lt;string&gt;\n+C headers: &lt;cctype&gt; &lt;cwctype&gt; &lt;cstring&gt; &lt;cwchar&gt; (also in 27)\n+           &lt;cstdlib&gt; (also in 18, 25, 26)\n+\n+We have \"mostly-complete\" char_traits&lt;&gt; implementations.  Many of the\n+char_traits&lt;char&gt; operations might be optimized further using existing\n+proprietary language extensions.\n+\n+We have a \"mostly-complete\" basic_string&lt;&gt; implementation.  The work\n+to manually instantiate char and wchar_t specializations in object\n+files to improve link-time behavior is extremely unsatisfactory,\n+literally tripling library-build time with no commensurate improvement\n+in static program link sizes.  It must be redone.  (Similar work is\n+needed for some components in chapters 22 and 27.)\n+\n+Other work needed for strings is MT-safety, as discussed under the\n+chapter 20 heading.\n+\n+The standard C type mbstate_t from &lt;cwchar&gt; and used in char_traits&lt;&gt;\n+must be different in C++ than in C, because in C++ the default constructor\n+value mbstate_t() must be the \"base\" or \"ground\" sequence state.\n+(According to the likely resolution of a recently raised Core issue,\n+this may become unnecessary.  However, there are other reasons to\n+use a state type not as limited as whatever the C library provides.)\n+If we might want to provide conversions from (e.g.) internally-\n+represented EUC-wide to externally-represented Unicode, or vice-\n+versa, the mbstate_t we choose will need to be more accommodating\n+than what might be provided by an underlying C library.\n+\n+There remain some basic_string template-member functions which do\n+not overload properly with their non-template brethren.  The infamous\n+hack akin to what was done in vector&lt;&gt; is needed, to conform to\n+23.1.1 para 10.  The CHECKLIST items for basic_string marked 'X',\n+or incomplete, are so marked for this reason.\n+\n+Replacing the string iterators, which currently are simple character\n+pointers, with class objects would greatly increase the safety of the\n+client interface, and also permit a \"debug\" mode in which range,\n+ownership, and validity are rigorously checked.  The current use of\n+raw pointers as string iterators is evil.  vector&lt;&gt; iterators need the\n+same treatment.  Note that the current implementation freely mixes\n+pointers and iterators, and that must be fixed before safer iterators\n+can be introduced.\n+\n+Some of the functions in &lt;cstring&gt; are different from the C version.\n+generally overloaded on const and non-const argument pointers.  For\n+example, in &lt;cstring&gt; strchr is overloaded.  The functions isupper\n+etc.  in &lt;cctype&gt; typically implemented as macros in C are functions\n+in C++, because they are overloaded with others of the same name\n+defined in &lt;locale&gt;.\n+\n+Many of the functions required in &lt;cwctype&gt; and &lt;cwchar&gt; cannot be\n+implemented using underlying C facilities on intended targets because\n+such facilities only partly exist.\n+\n+Chapter 22  Locale\n+------------------\n+Headers: &lt;locale&gt;\n+C headers: &lt;clocale&gt;\n+\n+We have a \"mostly complete\" class locale, with the exception of\n+code for constructing, and handling the names of, named locales.\n+The ways that locales are named (particularly when categories\n+(e.g. LC_TIME, LC_COLLATE) are different) varies among all target\n+environments.  This code must be written in various versions and\n+chosen by configuration parameters.\n+\n+Members of many of the facets defined in &lt;locale&gt; are stubs.  Generally,\n+there are two sets of facets: the base class facets (which are supposed\n+to implement the \"C\" locale) and the \"byname\" facets, which are supposed\n+to read files to determine their behavior.  The base ctype&lt;&gt;, collate&lt;&gt;,\n+and numpunct&lt;&gt; facets are \"mostly complete\", except that the table of\n+bitmask values used for \"is\" operations, and corresponding mask values,\n+are still defined in libio and just included/linked.  (We will need to\n+implement these tables independently, soon, but should take advantage\n+of libio where possible.)  The num_put&lt;&gt;::put members for integer types\n+are \"mostly complete\".\n+\n+A complete list of what has and has not been implemented may be\n+found in CHECKLIST.  However, note that the current definition of\n+codecvt&lt;wchar_t,char,mbstate_t&gt; is wrong.  It should simply write\n+out the raw bytes representing the wide characters, rather than\n+trying to convert each to a corresponding single \"char\" value.\n+\n+Some of the facets are more important than others.  Specifically,\n+the members of ctype&lt;&gt;, numpunct&lt;&gt;, num_put&lt;&gt;, and num_get&lt;&gt; facets\n+are used by other library facilities defined in &lt;string&gt;, &lt;istream&gt;,\n+and &lt;ostream&gt;, and the codecvt&lt;&gt; facet is used by basic_filebuf&lt;&gt;\n+in &lt;fstream&gt;, so a conforming iostream implementation depends on\n+these.\n+\n+The \"long long\" type eventually must be supported, but code mentioning\n+it should be wrapped in #if guards to allow pedantic-mode compiling.\n+\n+Performance of num_put&lt;&gt; and num_get&lt;&gt; depend critically on\n+caching computed values in ios_base objects, and on extensions\n+to the interface with streambufs.\n+\n+Specifically: retrieving a copy of the locale object, extracting\n+the needed facets, and gathering data from them, for each call to\n+(e.g.) operator&lt;&lt; would be prohibitively slow.   To cache format\n+data for use by num_put&lt;&gt; and num_get&lt;&gt; we have a _Format_cache&lt;&gt;\n+object stored in the ios_base::pword() array.  This is constructed\n+and initialized lazily, and is organized purely for utility.  It\n+is discarded when a new locale with different facets is imbued.\n+\n+Using only the public interfaces of the iterator arguments to the\n+facet functions would limit performance by forbidding \"vector-style\"\n+character operations.  The streambuf iterator optimizations are\n+described under chapter 24, but facets can also bypass the streambuf\n+iterators via explicit specializations and operate directly on the\n+streambufs, and use extended interfaces to get direct access to the\n+streambuf internal buffer arrays.  These extensions are mentioned\n+under chapter 27.  These optimizations are particularly important\n+for input parsing.\n+\n+Unused virtual members of locale facets can be omitted, as mentioned\n+above, by a smart linker.\n+\n+Chapter 23  Containers\n+----------------------\n+Headers: &lt;deque&gt; &lt;list&gt; &lt;queue&gt; &lt;stack&gt; &lt;vector&gt; &lt;map&gt; &lt;set&gt; &lt;bitset&gt;\n+\n+All the components in chapter 23 are implemented in the SGI STL.\n+They are \"mostly complete\"; they include a large number of\n+nonconforming extensions which must be wrapped.  Some of these\n+are used internally and must be renamed or duplicated.\n+\n+The SGI components are optimized for large-memory environments.  For\n+embedded targets, different criteria might be more appropriate.  Users\n+will want to be able to tune this behavior.  We should provide\n+ways for users to compile the library with different memory usage\n+characteristics.\n+\n+A lot more work is needed on factoring out common code from different\n+specializations to reduce code size here and in chapter 25.  The\n+easiest fix for this would be a compiler/ABI improvement that allows\n+the compiler to recognize when a specialization depends only on the\n+size (or other gross quality) of a template argument, and allow the\n+linker to share the code with similar specializations.  In its\n+absence, many of the algorithms and containers can be partial-\n+specialized, at least for the case of pointers, but this only solves\n+a small part of the problem.  Use of a type_traits-style template\n+allows a few more optimization opportunities, more if the compiler\n+can generate the specializations automatically.\n+\n+As an optimization, containers can specialize on the default allocator\n+and bypass it, or take advantage of details of its implementation\n+after it has been improved upon.\n+\n+Replacing the vector iterators, which currently are simple element\n+pointers, with class objects would greatly increase the safety of the\n+client interface, and also permit a \"debug\" mode in which range,\n+ownership, and validity are rigorously checked.  The current use of\n+pointers for iterators is evil.\n+\n+As mentioned for chapter 24, the deque iterator is a good example of\n+an opportunity to implement a \"staged\" iterator that would benefit\n+from specializations of some algorithms.\n+\n+Chapter 24  Iterators\n+---------------------\n+Headers: &lt;iterator&gt;\n+\n+Standard iterators are \"mostly complete\", with the exception of\n+the stream iterators, which are not yet templatized on the\n+stream type.  Also, the base class template iterator&lt;&gt; appears\n+to be wrong, so everything derived from it must also be wrong,\n+currently.\n+\n+The streambuf iterators (currently located in stl/bits/std_iterator.h,\n+but should be under bits/) can be rewritten to take advantage of\n+friendship with the streambuf implementation.\n+\n+Matt Austern has identified opportunities where certain iterator\n+types, particularly including streambuf iterators and deque\n+iterators, have a \"two-stage\" quality, such that an intermediate\n+limit can be checked much more quickly than the true limit on\n+range operations.  If identified with a member of iterator_traits,\n+algorithms may be specialized for this case.  Of course the\n+iterators that have this quality can be identified by specializing\n+a traits class.\n+\n+Many of the algorithms must be specialized for the streambuf\n+iterators, to take advantage of block-mode operations, in order\n+to allow iostream/locale operations' performance not to suffer.\n+It may be that they could be treated as staged iterators and\n+take advantage of those optimizations.\n+\n+Chapter 25  Algorithms\n+----------------------\n+Headers: &lt;algorithm&gt;\n+C headers: &lt;cstdlib&gt; (also in 18, 21, 26))\n+\n+The algorithms are \"mostly complete\".  As mentioned above, they\n+are optimized for speed at the expense of code and data size.\n+\n+Specializations of many of the algorithms for non-STL types would\n+give performance improvements, but we must use great care not to\n+interfere with fragile template overloading semantics for the\n+standard interfaces.  Conventionally the standard function template\n+interface is an inline which delegates to a non-standard function\n+which is then overloaded (this is already done in many places in\n+the library).  Particularly appealing opportunities for the sake of\n+iostream performance are for copy and find applied to streambuf\n+iterators or (as noted elsewhere) for staged iterators, of which\n+the streambuf iterators are a good example.\n+\n+The bsearch and qsort functions cannot be overloaded properly as\n+required by the standard because gcc does not yet allow overloading\n+on the extern-\"C\"-ness of a function pointer.\n+\n+Chapter 26  Numerics\n+--------------------\n+Headers: &lt;complex&gt; &lt;valarray&gt; &lt;numeric&gt;\n+C headers: &lt;cmath&gt;, &lt;cstdlib&gt; (also 18, 21, 25)\n+\n+Numeric components: Gabriel dos Reis's valarray, Drepper's complex,\n+and the few algorithms from the STL are \"mostly done\".   Of course\n+optimization opportunities abound for the numerically literate.  It\n+is not clear whether the valarray implementation really conforms\n+fully, in the assumptions it makes about aliasing (and lack thereof)\n+in its arguments.\n+\n+The C div() and ldiv() functions are interesting, because they are the\n+only case where a C library function returns a class object by value.\n+Since the C++ type div_t must be different from the underlying C type\n+(which is in the wrong namespace) the underlying functions div() and\n+ldiv() cannot be re-used efficiently.  Fortunately they are trivial to\n+re-implement.\n+\n+Chapter 27  Iostreams\n+---------------------\n+Headers: &lt;iosfwd&gt; &lt;streambuf&gt; &lt;ios&gt; &lt;ostream&gt; &lt;istream&gt; &lt;iostream&gt;\n+         &lt;iomanip&gt; &lt;sstream&gt; &lt;fstream&gt;\n+C headers: &lt;cstdio&gt; &lt;cwchar&gt; (also in 21)\n+\n+Iostream is currently in a very incomplete state.  &lt;iosfwd&gt;, &lt;iomanip&gt;,\n+ios_base, and basic_ios&lt;&gt; are \"mostly complete\".  basic_streambuf&lt;&gt; and\n+basic_ostream&lt;&gt; are well along, but basic_istream&lt;&gt; has had little work\n+done.  The standard stream objects, &lt;sstream&gt; and &lt;fstream&gt; have been\n+started; basic_filebuf&lt;&gt; \"write\" functions have been implemented just\n+enough to do \"hello, world\".\n+\n+Most of the istream and ostream operators &lt;&lt; and &gt;&gt; (with the exception\n+of the op&lt;&lt;(integer) ones) have not been changed to use locale primitives,\n+sentry objects, or char_traits members.\n+\n+All these templates should be manually instantiated for char and\n+wchar_t in a way that links only used members into user programs.\n+\n+Streambuf is fertile ground for optimization extensions.  An extended\n+interface giving iterator access to its internal buffer would be very\n+useful for other library components.\n+\n+Iostream operations (primarily operators &lt;&lt; and &gt;&gt;) can take advantage\n+of the case where user code has not specified a locale, and bypass locale\n+operations entirely.  The current implementation of op&lt;&lt;/num_put&lt;&gt;::put,\n+for the integer types, demonstrates how they can cache encoding details\n+from the locale on each operation.  There is lots more room for\n+optimization in this area.\n+\n+The definition of the relationship between the standard streams\n+cout et al. and stdout et al. requires something like a \"stdiobuf\".\n+The SGI solution of using double-indirection to actually use a\n+stdio FILE object for buffering is unsatisfactory, because it\n+interferes with peephole loop optimizations.\n+\n+The &lt;sstream&gt; header work has begun.  stringbuf can benefit from\n+friendship with basic_string&lt;&gt; and basic_string&lt;&gt;::_Rep to use\n+those objects directly as buffers, and avoid allocating and making\n+copies.\n+\n+The basic_filebuf&lt;&gt; template is a complex beast.  It is specified to\n+use the locale facet codecvt&lt;&gt; to translate characters between native\n+files and the locale character encoding.  In general this involves\n+two buffers, one of \"char\" representing the file and another of\n+\"char_type\", for the stream, with codecvt&lt;&gt; translating.  The process\n+is complicated by the variable-length nature of the translation, and\n+the need to seek to corresponding places in the two representations.\n+For the case of basic_filebuf&lt;char&gt;, when no translation is needed,\n+a single buffer suffices.  A specialized filebuf can be used to reduce\n+code space overhead when no locale has been imbued.  Matt Austern's\n+work at SGI will be useful, perhaps directly as a source of code, or\n+at least as an example to draw on.\n+\n+Filebuf, almost uniquely (cf. operator new), depends heavily on\n+underlying environmental facilities.  In current releases iostream\n+depends fairly heavily on libio constant definitions, but it should\n+be made independent.   It also depends on operating system primitives\n+for file operations.  There is immense room for optimizations using\n+(e.g.) mmap for reading.  The shadow/ directory wraps, besides the\n+standard C headers, the libio.h and unistd.h headers, for use mainly\n+by filebuf.  These wrappings have not been completed, though there\n+is scaffolding in place.\n+\n+The encapulation of certain C header &lt;cstdio&gt; names presents an\n+interesting problem.  It is possible to define an inline std::fprintf()\n+implemented in terms of the 'extern \"C\"' vfprintf(), but there is no\n+standard vfscanf() to use to implement std::fscanf().  It appears that\n+vfscanf but be re-implemented in C++ for targets where no vfscanf\n+extension has been defined.  This is interesting in that it seems\n+to be the only significant case in the C library where this kind of\n+rewriting is necessary.  (Of course Glibc provides the vfscanf()\n+extension.)  (The functions related to exit() must be rewritten\n+for other reasons.)\n+\n+\n+Annex D\n+-------\n+Headers: &lt;strstream&gt;\n+\n+Annex D defines many non-library features, and many minor\n+modifications to various headers, and a complete header.\n+It is \"mostly done\", except that the libstdc++-2 &lt;strstream&gt;\n+header has not been adopted into the library, or checked to\n+verify that it matches the draft in those details that were\n+clarified by the committee.  Certainly it must at least be\n+moved into the std namespace.\n+\n+We still need to wrap all the deprecated features in #if guards\n+so that pedantic compile modes can detect their use.\n+\n+Nonstandard Extensions\n+----------------------\n+Headers: &lt;iostream.h&gt; &lt;strstream.h&gt; &lt;hash&gt; &lt;rbtree&gt;\n+         &lt;pthread_alloc&gt; &lt;stdiobuf&gt; (etc.)\n+\n+User code has come to depend on a variety of nonstandard components\n+that we must not omit.  Much of this code can be adopted from\n+libstdc++-v2 or from the SGI STL.  This particularly includes\n+&lt;iostream.h&gt;, &lt;strstream.h&gt;, and various SGI extensions such\n+as &lt;hash_map.h&gt;.  Many of these are already placed in the\n+subdirectories ext/ and backward/.  (Note that it is better to\n+include them via \"&lt;backward/hash_map.h&gt;\" or \"&lt;ext/hash_map&gt;\" than\n+to search the subdirectory itself via a \"-I\" directive.\n+</literallayout>\n+  </sect1>  \n+\n+</appendix>"}, {"sha": "038d4558e6edad44374b5727cd4933f07c2f9378", "filename": "libstdc++-v3/doc/xml/manual/appendix_free.xml", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fappendix_free.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fappendix_free.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fappendix_free.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,176 @@\n+<?xml version='1.0'?>\n+<!DOCTYPE appendix PUBLIC \"-//OASIS//DTD DocBook XML V4.5//EN\" \n+ \"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\" \n+[ ]>\n+\n+<appendix id=\"appendix.free\" xreflabel=\"Free\">\n+<?dbhtml filename=\"appendix_free.html\"?>\n+\n+<appendixinfo>\n+  <keywordset>\n+    <keyword>\n+      ISO C++\n+    </keyword>\n+    <keyword>\n+      library\n+    </keyword>\n+  </keywordset>\n+</appendixinfo>\n+\n+<title>Free Software Needs Free Documentation</title>\n+\n+<para>\n+The biggest deficiency in free operating systems is not in the\n+software--it is the lack of good free manuals that we can include in\n+these systems.  Many of our most important programs do not come with\n+full manuals.  Documentation is an essential part of any software\n+package; when an important free software package does not come with a\n+free manual, that is a major gap.  We have many such gaps today.\n+</para>\n+\n+<para>\n+Once upon a time, many years ago, I thought I would learn Perl.  I got\n+a copy of a free manual, but I found it hard to read.  When I asked\n+Perl users about alternatives, they told me that there were better\n+introductory manuals--but those were not free.\n+</para>\n+\n+<para>\n+Why was this?  The authors of the good manuals had written them for\n+O'Reilly Associates, which published them with restrictive terms--no\n+copying, no modification, source files not available--which exclude\n+them from the free software community.\n+</para>\n+\n+<para>\n+That wasn't the first time this sort of thing has happened, and (to\n+our community's great loss) it was far from the last.  Proprietary\n+manual publishers have enticed a great many authors to restrict their\n+manuals since then.  Many times I have heard a GNU user eagerly tell\n+me about a manual that he is writing, with which he expects to help\n+the GNU project--and then had my hopes dashed, as he proceeded to\n+explain that he had signed a contract with a publisher that would\n+restrict it so that we cannot use it.\n+</para>\n+\n+<para>\n+Given that writing good English is a rare skill among programmers, we\n+can ill afford to lose manuals this way.\n+</para>\n+\n+<para> \n+  Free documentation, like free software, is a matter of freedom,\n+not price.  The problem with these manuals was not that O'Reilly\n+Associates charged a price for printed copies--that in itself is fine.\n+(The Free Software Foundation <ulink url=\"http://www.gnu.org/doc/doc.html\">sells printed copies</ulink> of\n+free GNU manuals, too.)  But GNU manuals are available in source code\n+form, while these manuals are available only on paper.  GNU manuals\n+come with permission to copy and modify; the Perl manuals do not.\n+These restrictions are the problems.\n+</para>\n+\n+<para>\n+The criterion for a free manual is pretty much the same as for free\n+software: it is a matter of giving all users certain freedoms.\n+Redistribution (including commercial redistribution) must be\n+permitted, so that the manual can accompany every copy of the program,\n+on-line or on paper.  Permission for modification is crucial too.\n+</para>\n+\n+<para>\n+As a general rule, I don't believe that it is essential for people to\n+have permission to modify all sorts of articles and books.  The issues\n+for writings are not necessarily the same as those for software.  For\n+example, I don't think you or I are obliged to give permission to\n+modify articles like this one, which describe our actions and our\n+views.\n+</para>\n+\n+<para>\n+But there is a particular reason why the freedom to modify is crucial\n+for documentation for free software.  When people exercise their right\n+to modify the software, and add or change its features, if they are\n+conscientious they will change the manual too--so they can provide\n+accurate and usable documentation with the modified program.  A manual\n+which forbids programmers to be conscientious and finish the job, or\n+more precisely requires them to write a new manual from scratch if\n+they change the program, does not fill our community's needs.\n+</para>\n+\n+<para>\n+While a blanket prohibition on modification is unacceptable, some\n+kinds of limits on the method of modification pose no problem.  For\n+example, requirements to preserve the original author's copyright\n+notice, the distribution terms, or the list of authors, are ok.  It is\n+also no problem to require modified versions to include notice that\n+they were modified, even to have entire sections that may not be\n+deleted or changed, as long as these sections deal with nontechnical\n+topics.  (Some GNU manuals have them.)\n+</para>\n+\n+<para>\n+These kinds of restrictions are not a problem because, as a practical\n+matter, they don't stop the conscientious programmer from adapting the\n+manual to fit the modified program.  In other words, they don't block\n+the free software community from making full use of the manual.\n+</para>\n+\n+<para>\n+However, it must be possible to modify all the <emphasis>technical</emphasis>\n+content of the manual, and then distribute the result in all the usual\n+media, through all the usual channels; otherwise, the restrictions do\n+block the community, the manual is not free, and so we need another\n+manual.\n+</para>\n+\n+<para>\n+Unfortunately, it is often hard to find someone to write another\n+manual when a proprietary manual exists.  The obstacle is that many\n+users think that a proprietary manual is good enough--so they don't\n+see the need to write a free manual.  They do not see that the free\n+operating system has a gap that needs filling.\n+</para>\n+\n+<para>\n+Why do users think that proprietary manuals are good enough?  Some\n+have not considered the issue.  I hope this article will do something\n+to change that.\n+</para>\n+\n+<para>\n+Other users consider proprietary manuals acceptable for the same\n+reason so many people consider proprietary software acceptable: they\n+judge in purely practical terms, not using freedom as a criterion.\n+These people are entitled to their opinions, but since those opinions\n+spring from values which do not include freedom, they are no guide for\n+those of us who do value freedom.\n+</para>\n+\n+<para>\n+Please spread the word about this issue.  We continue to lose manuals\n+to proprietary publishing.  If we spread the word that proprietary\n+manuals are not sufficient, perhaps the next person who wants to help\n+GNU by writing documentation will realize, before it is too late, that\n+he must above all make it free.\n+</para>\n+\n+<para>\n+We can also encourage commercial publishers to sell free, copylefted\n+manuals instead of proprietary ones.  One way you can help this is to\n+check the distribution terms of a manual before you buy it, and\n+prefer copylefted manuals to non-copylefted ones.\n+</para>\n+<para>\n+[Note: We now maintain a <ulink url=\"http://www.fsf.org/licensing/doc/other-free-books.html\">web page\n+that lists free books available from other publishers</ulink>].\n+</para>\n+    \n+<para>Copyright \u00a9 2004, 2005, 2006, 2007 Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA</para>\n+\n+<para>Verbatim copying and distribution of this entire article are\n+permitted worldwide, without royalty, in any medium, provided this\n+notice is preserved.</para>\n+\n+<para>Report any problems or suggestions to <email>webmaster@fsf.org</email>.</para>\n+\n+</appendix>"}, {"sha": "faa241250131fff462a9aaaa9c999ff82c361710", "filename": "libstdc++-v3/doc/xml/manual/appendix_porting.xml", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fappendix_porting.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fappendix_porting.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fappendix_porting.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,47 @@\n+<?xml version='1.0'?>\n+<!DOCTYPE appendix PUBLIC \"-//OASIS//DTD DocBook XML V4.5//EN\" \n+ \"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\" \n+[ ]>\n+\n+<appendix id=\"appendix.porting\" xreflabel=\"Porting\">\n+<?dbhtml filename=\"appendix_porting.html\"?>\n+ \n+<appendixinfo>\n+  <keywordset>\n+    <keyword>\n+      ISO C++\n+    </keyword>\n+    <keyword>\n+      library\n+    </keyword>\n+  </keywordset>\n+</appendixinfo>\n+\n+<title>Porting and Maintenance</title>\n+\n+  <!-- Hacking the Build System -->\n+  <xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" \n+\t      parse=\"xml\" href=\"build_hacking.xml\">\n+  </xi:include>\n+\n+  <!-- Internals: Porting to New Hardware or Operating Systems -->\n+  <xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" \n+\t      parse=\"xml\" href=\"internals.xml\">\n+  </xi:include>\n+\n+  <!-- ABI Policy and Guidelines -->\n+  <xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" \n+\t      parse=\"xml\" href=\"abi.xml\">\n+  </xi:include>\n+\n+  <!-- API Evolution and Deprecation History -->\n+  <xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" \n+\t      parse=\"xml\" href=\"evolution.xml\">\n+  </xi:include>\n+\n+  <!-- Backwards Compatibility -->\n+  <xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" \n+\t      parse=\"xml\" href=\"backwards_compatibility.xml\">\n+  </xi:include>\n+\n+</appendix>"}, {"sha": "a7a0e97bc6cc4cbeae45a1072ceabdf72425e466", "filename": "libstdc++-v3/doc/xml/manual/auto_ptr.xml", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fauto_ptr.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fauto_ptr.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fauto_ptr.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,133 @@\n+<sect1 id=\"manual.util.memory.auto_ptr\" xreflabel=\"auto_ptr\">\n+<?dbhtml filename=\"auto_ptr.html\"?>\n+ \n+<sect1info>\n+  <keywordset>\n+    <keyword>\n+      ISO C++\n+    </keyword>\n+    <keyword>\n+      auto_ptr\n+    </keyword>\n+  </keywordset>\n+</sect1info>\n+\n+<title>auto_ptr</title>\n+\n+<sect2 id=\"auto_ptr.limitations\" xreflabel=\"auto_ptr.limitations\">\n+<title>Limitations</title>\n+\n+   <para>Explaining all of the fun and delicious things that can\n+   happen with misuse of the <classname>auto_ptr</classname> class\n+   template (called <acronym>AP</acronym> here) would take some\n+   time. Suffice it to say that the use of <acronym>AP</acronym>\n+   safely in the presence of copying has some subtleties.\n+   </para>\n+   <para>\n+     The AP class is a really\n+      nifty idea for a smart pointer, but it is one of the dumbest of\n+      all the smart pointers -- and that's fine.\n+   </para>\n+   <para>\n+     AP is not meant to be a supersmart solution to all resource\n+      leaks everywhere.  Neither is it meant to be an effective form\n+      of garbage collection (although it can help, a little bit).\n+      And it can <emphasis>not</emphasis>be used for arrays!\n+   </para>\n+   <para>\n+     <acronym>AP</acronym> is meant to prevent nasty leaks in the\n+     presence of exceptions.  That's <emphasis>all</emphasis>.  This\n+     code is AP-friendly:\n+   </para>\n+   <programlisting>\n+    // Not a recommend naming scheme, but good for web-based FAQs.\n+    typedef std::auto_ptr&lt;MyClass&gt;  APMC;\n+\n+    extern function_taking_MyClass_pointer (MyClass*);\n+    extern some_throwable_function ();\n+\n+    void func (int data)\n+    {\n+        APMC  ap (new MyClass(data));\n+\n+        some_throwable_function();   // this will throw an exception\n+\n+        function_taking_MyClass_pointer (ap.get());\n+    }\n+   </programlisting>\n+   <para>When an exception gets thrown, the instance of MyClass that's\n+      been created on the heap will be <function>delete</function>'d as the stack is\n+      unwound past <function>func()</function>.\n+   </para>\n+   <para>Changing that code as follows is not <acronym>AP</acronym>-friendly:\n+   </para>\n+   <programlisting>\n+        APMC  ap (new MyClass[22]);\n+   </programlisting>\n+   <para>You will get the same problems as you would without the use\n+      of <acronym>AP</acronym>:\n+   </para>\n+   <programlisting>\n+        char*  array = new char[10];       // array new...\n+        ...\n+        delete array;                      // ...but single-object delete\n+   </programlisting>\n+   <para>\n+     AP cannot tell whether the pointer you've passed at creation points\n+      to one or many things.  If it points to many things, you are about\n+      to die.  AP is trivial to write, however, so you could write your\n+      own <code>auto_array_ptr</code> for that situation (in fact, this has\n+      been done many times; check the mailing lists, Usenet, Boost, etc).\n+   </para>\n+</sect2>\n+ \n+<sect2 id=\"auto_ptr.using\" xreflabel=\"auto_ptr.using\">\n+<title>Use in Containers</title>\n+\n+  <para>\n+  </para>\n+  <para>All of the <ulink url=\"../23_containers/howto.html\">containers</ulink>\n+      described in the standard library require their contained types\n+      to have, among other things, a copy constructor like this:\n+  </para>\n+   <programlisting>\n+    struct My_Type\n+    {\n+        My_Type (My_Type const&amp;);\n+    };\n+   </programlisting>\n+   <para>\n+     Note the const keyword; the object being copied shouldn't change.\n+     The template class <code>auto_ptr</code> (called AP here) does not\n+     meet this requirement.  Creating a new AP by copying an existing\n+     one transfers ownership of the pointed-to object, which means that\n+     the AP being copied must change, which in turn means that the\n+     copy ctors of AP do not take const objects.\n+   </para>\n+   <para>\n+     The resulting rule is simple: <emphasis>Never ever use a\n+     container of auto_ptr objects</emphasis>. The standard says that\n+     <quote>undefined</quote> behavior is the result, but it is\n+     guaranteed to be messy.\n+   </para>\n+   <para>\n+     To prevent you from doing this to yourself, the\n+      <ulink url=\"../19_diagnostics/howto.html#3\">concept checks</ulink> built\n+      in to this implementation will issue an error if you try to\n+      compile code like this:\n+   </para>\n+   <programlisting>\n+    #include &lt;vector&gt;\n+    #include &lt;memory&gt;\n+    \n+    void f()\n+    {\n+        std::vector&lt; std::auto_ptr&lt;int&gt; &gt;   vec_ap_int;\n+    }\n+   </programlisting>\n+   <para>\n+Should you try this with the checks enabled, you will see an error.\n+   </para>\n+</sect2>\n+\n+</sect1>\n\\ No newline at end of file"}, {"sha": "49a0ca813b6342cb688edbd854f6fcc1d329e86c", "filename": "libstdc++-v3/doc/xml/manual/backwards_compatibility.xml", "status": "added", "additions": 1315, "deletions": 0, "changes": 1315, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fbackwards_compatibility.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fbackwards_compatibility.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fbackwards_compatibility.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,1315 @@\n+<sect1 id=\"manual.appendix.porting.backwards\" xreflabel=\"backwards\">\n+<?dbhtml filename=\"backwards.html\"?>\n+ \n+<sect1info>\n+  <keywordset>\n+    <keyword>\n+      ISO C++\n+    </keyword>\n+    <keyword>\n+      backwards\n+    </keyword>\n+  </keywordset>\n+</sect1info>\n+\n+<title>Backwards Compatibility</title>\n+\n+<sect2 id=\"backwards.first\" xreflabel=\"backwards.first\">\n+<title>First</title>\n+\n+<para>The first generation GNU C++ library was called libg++.  It was a\n+separate GNU project, although reliably paired with GCC. Rumors imply\n+that it had a working relationship with at least two kinds of\n+dinosaur.\n+</para>\n+\n+<para>Some background: libg++ was designed and created when there was no\n+ISO standard to provide guidance.  Classes like linked lists are now\n+provided for by <classname>list&lt;T&gt;</classname> and do not need to be\n+created by <function>genclass</function>.  (For that matter, templates exist\n+now and are well-supported, whereas genclass (mostly) predates them.)\n+</para>\n+\n+<para>There are other classes in libg++ that are not specified in the\n+ISO Standard (e.g., statistical analysis).  While there are a lot of\n+really useful things that are used by a lot of people, the Standards\n+Committee couldn't include everything, and so a lot of those\n+<quote>obvious</quote> classes didn't get included.\n+</para>\n+\n+<para>Known Issues include many of the limitations of its immediate ancestor.</para> \n+\n+<para>Portability notes and known implementation limitations are as follows.</para>\n+\n+<sect3>\n+  <title>No <code>ios_base</code></title>\n+\n+<para> At least some older implementations don't have <code>std::ios_base</code>, so you should use <code>std::ios::badbit</code>, <code>std::ios::failbit</code> and <code>std::ios::eofbit</code> and <code>std::ios::goodbit</code>.\n+</para>\n+</sect3>\n+\n+<sect3>\n+<title>No <code>cout</code> in <code>ostream.h</code>, no <code>cin</code> in <code>istream.h</code></title>\n+\n+<para>\n+\tIn earlier versions of the standard,\n+\t<filename class=\"headerfile\">fstream.h</filename>,\n+\t<filename class=\"headerfile\">ostream.h</filename>\n+\tand <filename class=\"headerfile\">istream.h</filename>\n+\tused to define\n+\t<code>cout</code>, <code>cin</code> and so on. ISO C++ specifies that one needs to include\n+\t<filename class=\"headerfile\">iostream</filename>\n+\texplicitly to get the required definitions.\n+ </para>\n+<para> Some include adjustment may be required.</para>\n+\n+<para>This project is no longer maintained or supported, and the sources\n+archived. For the desperate,\n+the <ulink url=\"http://gcc.gnu.org/extensions.html\">GCC extensions\n+page</ulink> describes where to find the last libg++ source. The code is\n+considered replaced and rewritten.\n+</para>\n+</sect3>\n+</sect2>\n+\n+<sect2 id=\"backwards.second\" xreflabel=\"backwards.second\">\n+<title>Second</title>\n+\n+<para> \n+  The second generation GNU C++ library was called libstdc++, or\n+  libstdc++-v2. It spans the time between libg++ and pre-ISO C++\n+  standardization and is usually associated with the following GCC\n+  releases: egcs 1.x, gcc 2.95, and gcc 2.96.\n+</para>\n+\n+<para> \n+  The STL portions of this library are based on SGI/HP STL release 3.11.\n+</para>\n+\n+<para>\n+  This project is no longer maintained or supported, and the sources\n+  archived.  The code is considered replaced and rewritten.\n+</para>\n+\n+<para>\n+  Portability notes and known implementation limitations are as follows.\n+</para>\n+\n+<sect3>\n+  <title>Namespace <code>std::</code> not supported</title>\n+\n+  <para>\n+    Some care is required to support C++ compiler and or library\n+    implementation that do not have the standard library in\n+    <code>namespace std</code>.\n+  </para>\n+\n+  <para>\n+    The following sections list some possible solutions to support compilers\n+    that cannot ignore <code>std::</code>-qualified names.\n+  </para>\n+  \n+  <para> \n+    First, see if the compiler has a flag for this. Namespace\n+    back-portability-issues are generally not a problem for g++\n+    compilers that do not have libstdc++ in <code>std::</code>, as the\n+    compilers use <code>-fno-honor-std</code> (ignore\n+    <code>std::</code>, <code>:: = std::</code>) by default. That is,\n+    the responsibility for enabling or disabling <code>std::</code> is\n+    on the user; the maintainer does not have to care about it. This\n+    probably applies to some other compilers as well.\n+  </para>\n+\n+  <para>\n+    Second, experiment with a variety of pre-processor tricks.\n+  </para>\n+\n+  <para> \n+    By defining <code>std</code> as a macro, fully-qualified namespace\n+    calls become global. Volia.\n+  </para>\n+\t      \n+<programlisting>\n+#ifdef WICKEDLY_OLD_COMPILER\n+# define std\n+#endif\n+</programlisting>\n+\n+  <para>\n+    Thanks to Juergen Heinzl who posted this solution on gnu.gcc.help.\n+  </para>\n+\n+  <para>\n+    Another pre-processor based approach is to define a macro\n+    <code>NAMESPACE_STD</code>, which is defined to either\n+    <quote> </quote> or <quote>std</quote> based on a compile-type\n+    test. On GNU systems, this can be done with autotools by means of\n+    an autoconf test (see below) for <code>HAVE_NAMESPACE_STD</code>,\n+    then using that to set a value for the <code>NAMESPACE_STD</code>\n+    macro.  At that point, one is able to use\n+    <code>NAMESPACE_STD::string</code>, which will evaluate to\n+    <code>std::string</code> or <code>::string</code> (ie, in the\n+    global namespace on systems that do not put <code>string</code> in\n+    <code>std::</code>).\n+  </para>\n+\n+<programlisting>\n+dnl @synopsis AC_CXX_NAMESPACE_STD\n+dnl\n+dnl If the compiler supports namespace std, define\n+dnl HAVE_NAMESPACE_STD.\n+dnl\n+dnl @category Cxx\n+dnl @author Todd Veldhuizen\n+dnl @author Luc Maisonobe &lt;luc@spaceroots.org&gt;\n+dnl @version 2004-02-04\n+dnl @license AllPermissive\n+AC_DEFUN([AC_CXX_NAMESPACE_STD], [\n+  AC_CACHE_CHECK(if g++ supports namespace std,\n+  ac_cv_cxx_have_std_namespace,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_TRY_COMPILE([#include &lt;iostream&gt; \n+                  std::istream&amp; is = std::cin;],,\n+  ac_cv_cxx_have_std_namespace=yes, ac_cv_cxx_have_std_namespace=no)\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_have_std_namespace\" = yes; then\n+    AC_DEFINE(HAVE_NAMESPACE_STD,,[Define if g++ supports namespace std. ])\n+  fi\n+])\n+</programlisting>\n+</sect3>\n+\n+<sect3>\n+<title>Illegal iterator usage</title>\n+<para>\n+  The following illustrate implementation-allowed illegal iterator\n+  use, and then correct use.\n+</para>\n+\n+<itemizedlist> \n+  <listitem>\n+    <para>\n+      you cannot do <code>ostream::operator&lt;&lt;(iterator)</code>\n+      to print the address of the iterator =&gt; use\n+      <code>operator&lt;&lt; &amp;*iterator</code> instead\n+    </para>\n+  </listitem>\n+  <listitem>\n+    <para>\n+      you cannot clear an iterator's reference (<code>iterator =\n+      0</code>) =&gt; use <code>iterator = iterator_type();</code>\n+    </para>\n+  </listitem>\n+  <listitem>\n+    <para>\n+      <code>if (iterator)</code> won't work any more =&gt; use\n+      <code>if (iterator != iterator_type())</code> \n+    </para>\n+  </listitem>\n+</itemizedlist>\n+</sect3>\n+\n+<sect3>\n+  <title><code>isspace</code> from <filename class=\"headerfile\">cctype</filename> is a macro\n+  </title>\n+\n+  <para> \n+    Glibc 2.0.x and 2.1.x define <filename\n+    class=\"headerfile\">ctype.h</filename> functionality as macros\n+    (isspace, isalpha etc.).\n+  </para>\n+\n+  <para>\n+    This implementations of libstdc++, however, keep these functions\n+    as macros, and so it is not back-portable to use fully qualified\n+    names. For example:\n+  </para>\n+\n+<programlisting> \n+#include &lt;cctype&gt; \n+int main() { std::isspace('X'); } \n+</programlisting>\n+\n+<para>\n+  Results in something like this:\n+</para>\n+\n+<programlisting> \n+std:: (__ctype_b[(int) ( ( 'X' ) )] &amp; (unsigned short int) _ISspace ) ; \n+</programlisting>\n+\n+<para> \n+  A solution is to modify a header-file so that the compiler tells\n+  <filename class=\"headerfile\">ctype.h</filename> to define functions\n+  instead of macros:\n+</para>\n+\n+<programlisting>\n+// This keeps isalnum, et al from being propagated as macros. \n+#if __linux__\n+# define __NO_CTYPE 1\n+#endif\n+</programlisting>\n+\n+<para>\n+  Then, include <filename class=\"headerfile\">ctype.h</filename>\n+</para>\n+\n+<para>\n+  Another problem arises if you put a <code>using namespace\n+  std;</code> declaration at the top, and include <filename\n+  class=\"headerfile\">ctype.h</filename>. This will result in\n+  ambiguities between the definitions in the global namespace\n+  (<filename class=\"headerfile\">ctype.h</filename>) and the\n+  definitions in namespace <code>std::</code>\n+  (<code>&lt;cctype&gt;</code>).\n+</para>\n+</sect3>\n+\n+<sect3>\n+<title>No <code>vector::at</code>, <code>deque::at</code>, <code>string::at</code></title>\n+\n+<para>\n+  One solution is to add an autoconf-test for this:\n+</para>\n+\n+<programlisting>\n+AC_MSG_CHECKING(for container::at)\n+AC_TRY_COMPILE(\n+[\n+#include &lt;vector&gt;\n+#include &lt;deque&gt;\n+#include &lt;string&gt;\n+\t\n+using namespace std;\n+],\n+[\n+deque&lt;int&gt; test_deque(3);\n+test_deque.at(2);\n+vector&lt;int&gt; test_vector(2);\n+test_vector.at(1);\n+string test_string(<quote>test_string</quote>);\n+test_string.at(3);\n+],\n+[AC_MSG_RESULT(yes)\n+AC_DEFINE(HAVE_CONTAINER_AT)],\n+[AC_MSG_RESULT(no)])\n+</programlisting>\n+\n+<para>\n+  If you are using other (non-GNU) compilers it might be a good idea\n+  to check for <code>string::at</code> separately.\n+</para>\n+\n+</sect3>\n+\n+<sect3>\n+<title>No <code>std::char_traits&lt;char&gt;::eof</code></title>\n+\n+<para>\n+  Use some kind of autoconf test, plus this:\n+</para>      \n+\n+<programlisting>\n+#ifdef HAVE_CHAR_TRAITS\n+#define CPP_EOF std::char_traits&lt;char&gt;::eof()\n+#else\n+#define CPP_EOF EOF\n+#endif\n+</programlisting>\n+\n+</sect3>\n+\n+<sect3>\n+<title>No <code>string::clear</code></title>\n+\n+<para>\n+  There are two functions for deleting the contents of a string:\n+  <code>clear</code> and <code>erase</code> (the latter returns the\n+  string).\n+</para>\n+      \n+<programlisting>\n+void \n+clear() { _M_mutate(0, this-&gt;size(), 0); }\n+</programlisting>\n+\n+<programlisting>\n+basic_string&amp; \n+erase(size_type __pos = 0, size_type __n = npos)\n+{ \n+  return this-&gt;replace(_M_check(__pos), _M_fold(__pos, __n),\n+                          _M_data(), _M_data()); \n+}\n+</programlisting>\n+\n+<para>\n+  Unfortunately, ut <code>clear</code> is not implemented in this\n+  version, so you should use <code>erase</code> (which is probably\n+  faster than <code>operator=(charT*)</code>).\n+</para>\n+</sect3>\n+\n+<sect3>\n+<title>\n+  Removal of <code>ostream::form</code> and <code>istream::scan</code>\n+  extensions\n+</title>\n+\n+<para> \n+  These are no longer supported. Please use stringstreams instead.\n+</para>\n+</sect3>\n+\n+<sect3>\n+<title>No <code>basic_stringbuf</code>, <code>basic_stringstream</code></title>\n+\n+<para>\n+  Although the ISO standard <code>i/ostringstream</code>-classes are\n+  provided, (<filename class=\"headerfile\">sstream</filename>), for\n+  compatibility with older implementations the pre-ISO\n+  <code>i/ostrstream</code> (<filename\n+  class=\"headerfile\">strstream</filename>) interface is also provided,\n+  with these caveats:\n+</para>\n+\n+<itemizedlist>\n+  <listitem>\n+    <para> \n+      <code>strstream</code> is considered to be deprecated\n+    </para>\n+  </listitem>\n+  <listitem>\n+    <para> \n+      <code>strstream</code> is limited to <code>char</code>\n+    </para>\n+  </listitem>\n+  <listitem>\n+    <para> \n+      with <code>ostringstream</code> you don't have to take care of\n+      terminating the string or freeing its memory \n+    </para>\n+  </listitem>\n+  <listitem>\n+    <para> \n+      <code>istringstream</code> can be re-filled (clear();\n+      str(input);) \n+    </para>\n+  </listitem>\n+</itemizedlist>\n+\n+<para>\n+  You can then use output-stringstreams like this:\n+</para>\n+       \n+<programlisting>\n+#ifdef HAVE_SSTREAM\n+# include &lt;sstream&gt;\n+#else\n+# include &lt;strstream&gt;\n+#endif\n+\n+#ifdef HAVE_SSTREAM\n+  std::ostringstream oss;\n+#else\n+  std::ostrstream oss;\n+#endif\n+\n+oss &lt;&lt; <quote>Name=</quote> &lt;&lt; m_name &lt;&lt; <quote>, number=</quote> &lt;&lt; m_number &lt;&lt; std::endl;\n+...\n+#ifndef HAVE_SSTREAM\n+  oss &lt;&lt; std::ends; // terminate the char*-string\n+#endif\n+\n+// str() returns char* for ostrstream and a string for ostringstream\n+// this also causes ostrstream to think that the buffer's memory\n+// is yours\n+m_label.set_text(oss.str());\n+#ifndef HAVE_SSTREAM\n+  // let the ostrstream take care of freeing the memory\n+  oss.freeze(false);\n+#endif\n+</programlisting>\n+\n+<para>\n+      Input-stringstreams can be used similarly:\n+</para>\n+      \n+<programlisting>\n+std::string input;\n+...\n+#ifdef HAVE_SSTREAM\n+std::istringstream iss(input);\n+#else\n+std::istrstream iss(input.c_str());\n+#endif\n+\n+int i;\n+iss &gt;&gt; i; \n+</programlisting>\n+\n+<para> One (the only?) restriction is that an istrstream cannot be re-filled:\n+</para>\n+      \n+<programlisting>\n+std::istringstream iss(numerator);\n+iss &gt;&gt; m_num;\n+// this is not possible with istrstream\n+iss.clear();\n+iss.str(denominator);\n+iss &gt;&gt; m_den;\n+</programlisting>\n+ \n+<para>\n+If you don't care about speed, you can put these conversions in\n+      a template-function:\n+</para>      \n+<programlisting>\n+template &lt;class X&gt;\n+void fromString(const string&amp; input, X&amp; any)\n+{\n+#ifdef HAVE_SSTREAM\n+std::istringstream iss(input);\n+#else\n+std::istrstream iss(input.c_str());\n+#endif\n+X temp;\n+iss &gt;&gt; temp;\n+if (iss.fail())\n+throw runtime_error(..)\n+any = temp;\n+}\n+</programlisting>\n+\n+<para> \n+  Another example of using stringstreams is in <link\n+  linkend=\"strings.string.shrink\">this howto</link>.\n+</para>\n+\n+<para> There is additional information in the libstdc++-v2 info files, in\n+particular <quote>info iostream</quote>.\n+</para>\n+</sect3>\n+\n+<sect3>\n+  <title>Little or no wide character support</title>\n+  <para>\n+    Classes <classname>wstring</classname> and\n+    <classname>char_traits&lt;wchar_t&gt;</classname> are\n+    not supported.\n+  </para>\n+</sect3>\n+\n+<sect3>\n+  <title>No templatized iostreams</title>\n+  <para>\n+    Classes <classname>wfilebuf</classname> and\n+    <classname>wstringstream</classname> are not supported.\n+  </para>\n+</sect3>\n+\n+<sect3>\n+<title>Thread safety issues</title>\n+\n+  <para>\n+    Earlier GCC releases had a somewhat different approach to\n+    threading configuration and proper compilation.  Before GCC 3.0,\n+    configuration of the threading model was dictated by compiler\n+    command-line options and macros (both of which were somewhat\n+    thread-implementation and port-specific).  There were no\n+    guarantees related to being able to link code compiled with one\n+    set of options and macro setting with another set.\n+  </para>\n+\n+  <para>\n+    For GCC 3.0, configuration of the threading model used with\n+    libraries and user-code is performed when GCC is configured and\n+    built using the --enable-threads and --disable-threads options.\n+    The ABI is stable for symbol name-mangling and limited functional\n+    compatibility exists between code compiled under different\n+    threading models.\n+  </para>\n+\n+   <para>\n+     The libstdc++ library has been designed so that it can be used in\n+     multithreaded applications (with libstdc++-v2 this was only true\n+     of the STL parts.)  The first problem is finding a\n+     <emphasis>fast</emphasis> method of implementation portable to\n+     all platforms.  Due to historical reasons, some of the library is\n+     written against per-CPU-architecture spinlocks and other parts\n+     against the gthr.h abstraction layer which is provided by gcc.  A\n+     minor problem that pops up every so often is different\n+     interpretations of what &quot;thread-safe&quot; means for a\n+     library (not a general program).  We currently use the <ulink\n+     url=\"http://www.sgi.com/tech/stl/thread_safety.html\">same\n+     definition that SGI</ulink> uses for their STL subset.  However,\n+     the exception for read-only containers only applies to the STL\n+     components. This definition is widely-used and something similar\n+     will be used in the next version of the C++ standard library.\n+   </para>\n+\n+   <para>\n+     Here is a small link farm to threads (no pun) in the mail\n+     archives that discuss the threading problem.  Each link is to the\n+     first relevant message in the thread; from there you can use\n+     &quot;Thread Next&quot; to move down the thread.  This farm is in\n+     latest-to-oldest order.\n+   </para>\n+\n+      <itemizedlist>\n+        <listitem>\n+\t  <para>\n+\t    Our threading expert Loren gives a breakdown of <ulink\n+\t    url=\"http://gcc.gnu.org/ml/libstdc++/2001-10/msg00024.html\">the\n+\t    six situations involving threads</ulink> for the 3.0\n+\t    release series.\n+\t  </para>\n+      </listitem>\n+        <listitem>\n+\t  <para>\n+\t    <ulink url=\"http://gcc.gnu.org/ml/libstdc++/2001-05/msg00384.html\">\n+        This message</ulink> inspired a recent updating of issues with\n+        threading and the SGI STL library.  It also contains some\n+        example POSIX-multithreaded STL code.\n+\t  </para>\n+\t</listitem>\n+      </itemizedlist>\n+\n+   <para> \n+     (A large selection of links to older messages has been removed;\n+     many of the messages from 1999 were lost in a disk crash, and the\n+     few people with access to the backup tapes have been too swamped\n+     with work to restore them.  Many of the points have been\n+     superseded anyhow.)\n+   </para>\n+</sect3>\n+\n+</sect2>\n+\n+<sect2 id=\"backwards.third\" xreflabel=\"backwards.third\">\n+<title>Third</title>\n+\n+<para> The third generation GNU C++ library is called libstdc++, or\n+libstdc++-v3.\n+</para>\n+\n+      <para>The subset commonly known as the Standard Template Library\n+         (chapters 23 through 25, mostly) is adapted from the final release\n+         of the SGI STL (version 3.3), with extensive changes.\n+      </para>\n+\n+      <para>A more formal description of the V3 goals can be found in the\n+         official <ulink url=\"../17_intro/DESIGN\">design document</ulink>.\n+      </para>\n+\n+<para>Portability notes and known implementation limitations are as follows.</para>\n+\n+<sect3>\n+<title>Pre-ISO headers moved to backwards or removed</title>\n+\n+<para> The pre-ISO C++ headers\n+      (<code>iostream.h</code>, <code>defalloc.h</code> etc.) are\n+      available, unlike previous libstdc++ versions, but inclusion\n+      generates a warning that you are using deprecated headers.\n+</para>\n+\n+    <para>This compatibility layer is constructed by including the\n+    standard C++ headers, and injecting any items in\n+    <code>std::</code> into the global namespace.\n+   </para>\n+   <para>For those of you new to ISO C++ (welcome, time travelers!), no,\n+      that isn't a typo. Yes, the headers really have new names.\n+      Marshall Cline's C++ FAQ Lite has a good explanation in <ulink url=\"http://www.parashift.com/c++-faq-lite/coding-standards.html#faq-27.4\">item\n+      [27.4]</ulink>.\n+   </para>\n+\n+<para> Some include adjustment may be required. What follows is an\n+autoconf test that defines <code>PRE_STDCXX_HEADERS</code> when they\n+exist.</para>\n+\n+<programlisting>\n+# AC_HEADER_PRE_STDCXX\n+AC_DEFUN([AC_HEADER_PRE_STDCXX], [\n+  AC_CACHE_CHECK(for pre-ISO C++ include files,\n+  ac_cv_cxx_pre_stdcxx,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -Wno-deprecated\"\t\n+\n+  # Omit defalloc.h, as compilation with newer compilers is problematic.\n+  AC_TRY_COMPILE([\n+  #include &lt;new.h&gt;\n+  #include &lt;iterator.h&gt;\n+  #include &lt;alloc.h&gt;\n+  #include &lt;set.h&gt;\n+  #include &lt;hashtable.h&gt;\n+  #include &lt;hash_set.h&gt;\n+  #include &lt;fstream.h&gt;\n+  #include &lt;tempbuf.h&gt;\n+  #include &lt;istream.h&gt;\n+  #include &lt;bvector.h&gt;\n+  #include &lt;stack.h&gt;\n+  #include &lt;rope.h&gt;\n+  #include &lt;complex.h&gt;\n+  #include &lt;ostream.h&gt;\n+  #include &lt;heap.h&gt;\n+  #include &lt;iostream.h&gt;\n+  #include &lt;function.h&gt;\n+  #include &lt;multimap.h&gt;\n+  #include &lt;pair.h&gt;\n+  #include &lt;stream.h&gt;\n+  #include &lt;iomanip.h&gt;\n+  #include &lt;slist.h&gt;\n+  #include &lt;tree.h&gt;\n+  #include &lt;vector.h&gt;\n+  #include &lt;deque.h&gt;\n+  #include &lt;multiset.h&gt;\n+  #include &lt;list.h&gt;\n+  #include &lt;map.h&gt;\n+  #include &lt;algobase.h&gt;\n+  #include &lt;hash_map.h&gt;\n+  #include &lt;algo.h&gt;\n+  #include &lt;queue.h&gt;\n+  #include &lt;streambuf.h&gt;\n+  ],,\n+  ac_cv_cxx_pre_stdcxx=yes, ac_cv_cxx_pre_stdcxx=no)\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_pre_stdcxx\" = yes; then\n+    AC_DEFINE(PRE_STDCXX_HEADERS,,[Define if pre-ISO C++ header files are present. ])\n+  fi\n+])\n+</programlisting>\n+\n+<para>Porting between pre-ISO headers and ISO headers is simple: headers\n+like <filename class=\"headerfile\">vector.h</filename> can be replaced with <filename class=\"headerfile\">vector</filename> and a using\n+directive <code>using namespace std;</code> can be put at the global\n+scope. This should be enough to get this code compiling, assuming the\n+other usage is correct.\n+</para>\n+</sect3>\n+\n+<sect3>\n+<title>Extension headers hash_map, hash_set moved to ext or backwards</title>\n+\n+      <para>At this time most of the features of the SGI STL extension have been\n+         replaced by standardized libraries.\n+         In particular, the unordered_map and unordered_set containers of TR1\n+         are suitable replacement for the non-standard hash_map and hash_set\n+         containers in the SGI STL. \n+      </para>\n+<para> Header files <filename class=\"headerfile\">hash_map</filename> and <filename class=\"headerfile\">hash_set</filename> moved\n+to <filename class=\"headerfile\">ext/hash_map</filename> and  <filename class=\"headerfile\">ext/hash_set</filename>,\n+respectively. At the same time, all types in these files are enclosed\n+in <code>namespace __gnu_cxx</code>. Later versions move deprecate\n+these files, and suggest using TR1's  <filename class=\"headerfile\">unordered_map</filename>\n+and  <filename class=\"headerfile\">unordered_set</filename> instead.\n+</para>\n+\n+      <para>The extensions are no longer in the global or <code>std</code>\n+         namespaces, instead they are declared in the <code>__gnu_cxx</code>\n+         namespace. For maximum portability, consider defining a namespace\n+         alias to use to talk about extensions, e.g.:\n+      </para>\n+      <programlisting>\n+      #ifdef __GNUC__\n+      #if __GNUC__ &lt; 3\n+        #include &lt;hash_map.h&gt;\n+        namespace extension { using ::hash_map; }; // inherit globals\n+      #else\n+        #include &lt;backward/hash_map&gt;\n+        #if __GNUC__ == 3 &amp;&amp; __GNUC_MINOR__ == 0\n+          namespace extension = std;               // GCC 3.0\n+        #else\n+          namespace extension = ::__gnu_cxx;       // GCC 3.1 and later\n+        #endif\n+      #endif\n+      #else      // ...  there are other compilers, right?\n+        namespace extension = std;\n+      #endif\n+\n+      extension::hash_map&lt;int,int&gt; my_map; \n+      </programlisting>\n+      <para>This is a bit cleaner than defining typedefs for all the\n+         instantiations you might need.\n+      </para>\n+ \n+\n+<para>The following autoconf tests check for working HP/SGI hash containers.\n+</para>\n+\n+<programlisting>\n+# AC_HEADER_EXT_HASH_MAP\n+AC_DEFUN([AC_HEADER_EXT_HASH_MAP], [\n+  AC_CACHE_CHECK(for ext/hash_map,\n+  ac_cv_cxx_ext_hash_map,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -Werror\"\t\n+  AC_TRY_COMPILE([#include &lt;ext/hash_map&gt;], [using __gnu_cxx::hash_map;],\n+  ac_cv_cxx_ext_hash_map=yes, ac_cv_cxx_ext_hash_map=no)\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_ext_hash_map\" = yes; then\n+    AC_DEFINE(HAVE_EXT_HASH_MAP,,[Define if ext/hash_map is present. ])\n+  fi\n+])\n+</programlisting>\n+\n+<programlisting>\n+# AC_HEADER_EXT_HASH_SET\n+AC_DEFUN([AC_HEADER_EXT_HASH_SET], [\n+  AC_CACHE_CHECK(for ext/hash_set,\n+  ac_cv_cxx_ext_hash_set,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -Werror\"\t\n+  AC_TRY_COMPILE([#include &lt;ext/hash_set&gt;], [using __gnu_cxx::hash_set;],\n+  ac_cv_cxx_ext_hash_set=yes, ac_cv_cxx_ext_hash_set=no)\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_ext_hash_set\" = yes; then\n+    AC_DEFINE(HAVE_EXT_HASH_SET,,[Define if ext/hash_set is present. ])\n+  fi\n+])\n+</programlisting>\n+</sect3>\n+\n+<sect3>\n+<title>No <code>ios::nocreate/ios::noreplace</code>.\n+</title>\n+\n+<para> The existence of <code>ios::nocreate</code> being used for\n+input-streams has been confirmed, most probably because the author\n+thought it would be more correct to specify nocreate explicitly.  So\n+it can be left out for input-streams.\n+</para>\n+\n+<para>For output streams, <quote>nocreate</quote> is probably the default,\n+unless you specify <code>std::ios::trunc</code> ? To be safe, you can\n+open the file for reading, check if it has been opened, and then\n+decide whether you want to create/replace or not. To my knowledge,\n+even older implementations support <code>app</code>, <code>ate</code>\n+and <code>trunc</code> (except for <code>app</code> ?).\n+</para>\n+</sect3>\n+\n+<sect3>\n+<title>\n+No <code>stream::attach(int fd)</code>\n+</title>\n+\n+<para>\n+      Phil Edwards writes: It was considered and rejected for the ISO\n+      standard.  Not all environments use file descriptors.  Of those\n+      that do, not all of them use integers to represent them.\n+    </para>  \n+\n+<para>\n+      For a portable solution (among systems which use\n+      filedescriptors), you need to implement a subclass of\n+      <code>std::streambuf</code> (or\n+      <code>std::basic_streambuf&lt;..&gt;</code>) which opens a file\n+      given a descriptor, and then pass an instance of this to the\n+      stream-constructor. \n+    </para>\n+\n+<para>\n+      An extension is available that implements this.\n+      <filename class=\"headerfile\">ext/stdio_filebuf.h</filename> contains a derived class called\n+      <ulink url=\"http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/class____gnu__cxx_1_1stdio__filebuf.html\"><code>__gnu_cxx::stdio_filebuf</code></ulink>.\n+      This class can be constructed from a C <code>FILE*</code> or a file\n+      descriptor, and provides the <code>fd()</code> function.\n+    </para>\n+\n+<para>\n+ For another example of this, refer to\n+      <ulink url=\"http://www.josuttis.com/cppcode/fdstream.html\">fdstream example</ulink> \n+      by Nicolai Josuttis.\n+</para>\n+</sect3>\n+\n+<sect3>\n+<title>\n+Support for C++98 dialect.\n+</title>\n+\n+<para>Check for complete library coverage of the C++1998/2003 standard.\n+</para>\n+\n+<programlisting>\n+# AC_HEADER_STDCXX_98\n+AC_DEFUN([AC_HEADER_STDCXX_98], [\n+  AC_CACHE_CHECK(for ISO C++ 98 include files,\n+  ac_cv_cxx_stdcxx_98,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_TRY_COMPILE([\n+    #include &lt;cassert&gt;\n+    #include &lt;cctype&gt;\n+    #include &lt;cerrno&gt;\n+    #include &lt;cfloat&gt;\n+    #include &lt;ciso646&gt;\n+    #include &lt;climits&gt;\n+    #include &lt;clocale&gt;\n+    #include &lt;cmath&gt;\n+    #include &lt;csetjmp&gt;\n+    #include &lt;csignal&gt;\n+    #include &lt;cstdarg&gt;\n+    #include &lt;cstddef&gt;\n+    #include &lt;cstdio&gt;\n+    #include &lt;cstdlib&gt;\n+    #include &lt;cstring&gt;\n+    #include &lt;ctime&gt;\n+\n+    #include &lt;algorithm&gt;\n+    #include &lt;bitset&gt;\n+    #include &lt;complex&gt;\n+    #include &lt;deque&gt;\n+    #include &lt;exception&gt;\n+    #include &lt;fstream&gt;\n+    #include &lt;functional&gt;\n+    #include &lt;iomanip&gt;\n+    #include &lt;ios&gt;\n+    #include &lt;iosfwd&gt;\n+    #include &lt;iostream&gt;\n+    #include &lt;istream&gt;\n+    #include &lt;iterator&gt;\n+    #include &lt;limits&gt;\n+    #include &lt;list&gt;\n+    #include &lt;locale&gt;\n+    #include &lt;map&gt;\n+    #include &lt;memory&gt;\n+    #include &lt;new&gt;\n+    #include &lt;numeric&gt;\n+    #include &lt;ostream&gt;\n+    #include &lt;queue&gt;\n+    #include &lt;set&gt;\n+    #include &lt;sstream&gt;\n+    #include &lt;stack&gt;\n+    #include &lt;stdexcept&gt;\n+    #include &lt;streambuf&gt;\n+    #include &lt;string&gt;\n+    #include &lt;typeinfo&gt;\n+    #include &lt;utility&gt;\n+    #include &lt;valarray&gt;\n+    #include &lt;vector&gt;\n+  ],,\n+  ac_cv_cxx_stdcxx_98=yes, ac_cv_cxx_stdcxx_98=no)\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_stdcxx_98\" = yes; then\n+    AC_DEFINE(STDCXX_98_HEADERS,,[Define if ISO C++ 1998 header files are present. ])\n+  fi\n+])\n+</programlisting>\n+</sect3>\n+\n+<sect3>\n+<title>\n+Support for C++TR1 dialect.\n+</title>\n+\n+<para>Check for library coverage of the TR1 standard.\n+</para>\n+\n+<programlisting>\n+# AC_HEADER_STDCXX_TR1\n+AC_DEFUN([AC_HEADER_STDCXX_TR1], [\n+  AC_CACHE_CHECK(for ISO C++ TR1 include files,\n+  ac_cv_cxx_stdcxx_tr1,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_TRY_COMPILE([\n+  #include &lt;tr1/array&gt;\n+  #include &lt;tr1/ccomplex&gt;\n+  #include &lt;tr1/cctype&gt;\n+  #include &lt;tr1/cfenv&gt;\n+  #include &lt;tr1/cfloat&gt;\n+  #include &lt;tr1/cinttypes&gt;\n+  #include &lt;tr1/climits&gt;\n+  #include &lt;tr1/cmath&gt;\n+  #include &lt;tr1/complex&gt;\n+  #include &lt;tr1/cstdarg&gt;\n+  #include &lt;tr1/cstdbool&gt;\n+  #include &lt;tr1/cstdint&gt;\n+  #include &lt;tr1/cstdio&gt;\n+  #include &lt;tr1/cstdlib&gt;\n+  #include &lt;tr1/ctgmath&gt;\n+  #include &lt;tr1/ctime&gt;\n+  #include &lt;tr1/cwchar&gt;\n+  #include &lt;tr1/cwctype&gt;\n+  #include &lt;tr1/functional&gt;\n+  #include &lt;tr1/memory&gt;\n+  #include &lt;tr1/random&gt;\n+  #include &lt;tr1/regex&gt;\n+  #include &lt;tr1/tuple&gt;\n+  #include &lt;tr1/type_traits&gt;\n+  #include &lt;tr1/unordered_set&gt;\n+  #include &lt;tr1/unordered_map&gt;\n+  #include &lt;tr1/utility&gt;\n+  ],,\n+  ac_cv_cxx_stdcxx_tr1=yes, ac_cv_cxx_stdcxx_tr1=no)\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_stdcxx_tr1\" = yes; then\n+    AC_DEFINE(STDCXX_TR1_HEADERS,,[Define if ISO C++ TR1 header files are present. ])\n+  fi\n+])\n+</programlisting>\n+\n+<para>An alternative is to check just for specific TR1 includes, such as &lt;unordered_map&gt; and &lt;unordered_set&gt;.\n+</para>\n+\n+<programlisting>\n+# AC_HEADER_TR1_UNORDERED_MAP\n+AC_DEFUN([AC_HEADER_TR1_UNORDERED_MAP], [\n+  AC_CACHE_CHECK(for tr1/unordered_map,\n+  ac_cv_cxx_tr1_unordered_map,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_TRY_COMPILE([#include &lt;tr1/unordered_map&gt;], [using std::tr1::unordered_map;],\n+  ac_cv_cxx_tr1_unordered_map=yes, ac_cv_cxx_tr1_unordered_map=no)\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_tr1_unordered_map\" = yes; then\n+    AC_DEFINE(HAVE_TR1_UNORDERED_MAP,,[Define if tr1/unordered_map is present. ])\n+  fi\n+])\n+</programlisting>\n+\n+<programlisting>\n+# AC_HEADER_TR1_UNORDERED_SET\n+AC_DEFUN([AC_HEADER_TR1_UNORDERED_SET], [\n+  AC_CACHE_CHECK(for tr1/unordered_set,\n+  ac_cv_cxx_tr1_unordered_set,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_TRY_COMPILE([#include &lt;tr1/unordered_set&gt;], [using std::tr1::unordered_set;],\n+  ac_cv_cxx_tr1_unordered_set=yes, ac_cv_cxx_tr1_unordered_set=no)\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_tr1_unordered_set\" = yes; then\n+    AC_DEFINE(HAVE_TR1_UNORDERED_SET,,[Define if tr1/unordered_set is present. ])\n+  fi\n+])\n+</programlisting>\n+</sect3>\n+\n+\n+<sect3>\n+<title>\n+Support for C++0x dialect.\n+</title>\n+\n+<para>Check for baseline language coverage in the compiler for the C++0xstandard.\n+</para>\n+\n+<programlisting>\n+# AC_COMPILE_STDCXX_OX\n+AC_DEFUN([AC_COMPILE_STDCXX_0X], [\n+  AC_CACHE_CHECK(if g++ supports C++0x features without additional flags,\n+  ac_cv_cxx_compile_cxx0x_native,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_TRY_COMPILE([\n+  template &lt;typename T&gt;\n+    struct check \n+    {\n+      static_assert(sizeof(int) &lt;= sizeof(T), \"not big enough\");\n+    };\n+\n+    typedef check&lt;check&lt;bool&gt;&gt; right_angle_brackets;\n+\n+    int a;\n+    decltype(a) b;\n+\n+    typedef check&lt;int&gt; check_type;\n+    check_type c;\n+    check_type&amp;&amp; cr = c;],,\n+  ac_cv_cxx_compile_cxx0x_native=yes, ac_cv_cxx_compile_cxx0x_native=no)\n+  AC_LANG_RESTORE\n+  ])\n+\n+  AC_CACHE_CHECK(if g++ supports C++0x features with -std=c++0x,\n+  ac_cv_cxx_compile_cxx0x_cxx,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -std=c++0x\"\t\n+  AC_TRY_COMPILE([\n+  template &lt;typename T&gt;\n+    struct check \n+    {\n+      static_assert(sizeof(int) &lt;= sizeof(T), \"not big enough\");\n+    };\n+\n+    typedef check&lt;check&lt;bool&gt;&gt; right_angle_brackets;\n+\n+    int a;\n+    decltype(a) b;\n+\n+    typedef check&lt;int&gt; check_type;\n+    check_type c;\n+    check_type&amp;&amp; cr = c;],,\n+  ac_cv_cxx_compile_cxx0x_cxx=yes, ac_cv_cxx_compile_cxx0x_cxx=no)\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+  ])\n+\n+  AC_CACHE_CHECK(if g++ supports C++0x features with -std=gnu++0x,\n+  ac_cv_cxx_compile_cxx0x_gxx,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -std=gnu++0x\"\t\n+  AC_TRY_COMPILE([\n+  template &lt;typename T&gt;\n+    struct check \n+    {\n+      static_assert(sizeof(int) &lt;= sizeof(T), \"not big enough\");\n+    };\n+\n+    typedef check&lt;check&lt;bool&gt;&gt; right_angle_brackets;\n+\n+    int a;\n+    decltype(a) b;\n+\n+    typedef check&lt;int&gt; check_type;\n+    check_type c;\n+    check_type&amp;&amp; cr = c;],,\n+  ac_cv_cxx_compile_cxx0x_gxx=yes, ac_cv_cxx_compile_cxx0x_gxx=no)\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+  ])\n+\n+  if test \"$ac_cv_cxx_compile_cxx0x_native\" = yes || \n+     test \"$ac_cv_cxx_compile_cxx0x_cxx\" = yes || \n+     test \"$ac_cv_cxx_compile_cxx0x_gxx\" = yes; then\n+    AC_DEFINE(HAVE_STDCXX_0X,,[Define if g++ supports C++0x features. ])\n+  fi\n+])\n+</programlisting>\n+\n+\n+<para>Check for library coverage of the C++0xstandard.\n+</para>\n+\n+<programlisting>\n+# AC_HEADER_STDCXX_0X\n+AC_DEFUN([AC_HEADER_STDCXX_0X], [\n+  AC_CACHE_CHECK(for ISO C++ 0x include files,\n+  ac_cv_cxx_stdcxx_0x,\n+  [AC_REQUIRE([AC_COMPILE_STDCXX_0X])\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -std=gnu++0x\"\t\n+\n+  AC_TRY_COMPILE([\n+    #include &lt;cassert&gt;\n+    #include &lt;ccomplex&gt;\n+    #include &lt;cctype&gt;\n+    #include &lt;cerrno&gt;\n+    #include &lt;cfenv&gt;\n+    #include &lt;cfloat&gt;\n+    #include &lt;cinttypes&gt;\n+    #include &lt;ciso646&gt;\n+    #include &lt;climits&gt;\n+    #include &lt;clocale&gt;\n+    #include &lt;cmath&gt;\n+    #include &lt;csetjmp&gt;\n+    #include &lt;csignal&gt;\n+    #include &lt;cstdarg&gt;\n+    #include &lt;cstdbool&gt;\n+    #include &lt;cstddef&gt;\n+    #include &lt;cstdint&gt;\n+    #include &lt;cstdio&gt;\n+    #include &lt;cstdlib&gt;\n+    #include &lt;cstring&gt;\n+    #include &lt;ctgmath&gt;\n+    #include &lt;ctime&gt;\n+    #include &lt;cwchar&gt;\n+    #include &lt;cwctype&gt;\n+\n+    #include &lt;algorithm&gt;\n+    #include &lt;array&gt;\n+    #include &lt;bitset&gt;\n+    #include &lt;complex&gt;\n+    #include &lt;deque&gt;\n+    #include &lt;exception&gt;\n+    #include &lt;fstream&gt;\n+    #include &lt;functional&gt;\n+    #include &lt;iomanip&gt;\n+    #include &lt;ios&gt;\n+    #include &lt;iosfwd&gt;\n+    #include &lt;iostream&gt;\n+    #include &lt;istream&gt;\n+    #include &lt;iterator&gt;\n+    #include &lt;limits&gt;\n+    #include &lt;list&gt;\n+    #include &lt;locale&gt;\n+    #include &lt;map&gt;\n+    #include &lt;memory&gt;\n+    #include &lt;new&gt;\n+    #include &lt;numeric&gt;\n+    #include &lt;ostream&gt;\n+    #include &lt;queue&gt;\n+    #include &lt;random&gt;\n+    #include &lt;regex&gt;\n+    #include &lt;set&gt;\n+    #include &lt;sstream&gt;\n+    #include &lt;stack&gt;\n+    #include &lt;stdexcept&gt;\n+    #include &lt;streambuf&gt;\n+    #include &lt;string&gt;\n+    #include &lt;tuple&gt;\n+    #include &lt;typeinfo&gt;\n+    #include &lt;type_traits&gt;\n+    #include &lt;unordered_map&gt;\n+    #include &lt;unordered_set&gt;\n+    #include &lt;utility&gt;\n+    #include &lt;valarray&gt;\n+    #include &lt;vector&gt;\n+  ],,\n+  ac_cv_cxx_stdcxx_0x=yes, ac_cv_cxx_stdcxx_0x=no)\n+  AC_LANG_RESTORE\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  ])\n+  if test \"$ac_cv_cxx_stdcxx_0x\" = yes; then\n+    AC_DEFINE(STDCXX_0X_HEADERS,,[Define if ISO C++ 0x header files are present. ])\n+  fi\n+])\n+</programlisting>\n+\n+<para>As is the case for TR1 support, these autoconf macros can be made for a finer-grained, per-header-file check. For &lt;unordered_map&gt;\n+</para>\n+\n+<programlisting>\n+# AC_HEADER_UNORDERED_MAP\n+AC_DEFUN([AC_HEADER_UNORDERED_MAP], [\n+  AC_CACHE_CHECK(for unordered_map,\n+  ac_cv_cxx_unordered_map,\n+  [AC_REQUIRE([AC_COMPILE_STDCXX_0X])\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -std=gnu++0x\"\t\n+  AC_TRY_COMPILE([#include &lt;unordered_map&gt;], [using std::unordered_map;],\n+  ac_cv_cxx_unordered_map=yes, ac_cv_cxx_unordered_map=no)\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_unordered_map\" = yes; then\n+    AC_DEFINE(HAVE_UNORDERED_MAP,,[Define if unordered_map is present. ])\n+  fi\n+])\n+</programlisting>\n+\n+<programlisting>\n+# AC_HEADER_UNORDERED_SET\n+AC_DEFUN([AC_HEADER_UNORDERED_SET], [\n+  AC_CACHE_CHECK(for unordered_set,\n+  ac_cv_cxx_unordered_set,\n+  [AC_REQUIRE([AC_COMPILE_STDCXX_0X])\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -std=gnu++0x\"\t\n+  AC_TRY_COMPILE([#include &lt;unordered_set&gt;], [using std::unordered_set;],\n+  ac_cv_cxx_unordered_set=yes, ac_cv_cxx_unordered_set=no)\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_unordered_set\" = yes; then\n+    AC_DEFINE(HAVE_UNORDERED_SET,,[Define if unordered_set is present. ])\n+  fi\n+])\n+</programlisting>\n+</sect3>\n+\n+<sect3>\n+<title>\n+  Container::iterator_type is not necessarily Container::value_type*\n+</title>\n+\n+<para>\n+  This is a change in behavior from the previous version. Now, most\n+  <type>iterator_type</type> typedefs in container classes are POD\n+  objects, not <type>value_type</type> pointers.\n+</para>\n+</sect3>\n+\n+</sect2>\n+\n+<bibliography id=\"backwards.biblio\" xreflabel=\"backwards.biblio\">\n+<title>Bibliography</title>\n+\n+  <biblioentry>\n+    <abbrev>\n+      kegel41\n+    </abbrev>\n+\n+    <title>\n+      Migrating to GCC 4.1\n+    </title>\n+\n+    <author>\n+      <firstname>Dan</firstname>\n+      <surname>Kegel</surname>\n+    </author>\n+\n+    <biblioid>\n+      <ulink url=\"http://www.kegel.com/gcc/gcc4.html\">\n+      </ulink>\n+    </biblioid>\n+  </biblioentry> \n+\n+\n+  <biblioentry>\n+    <abbrev>\n+      kegel41\n+    </abbrev>\n+\n+    <title>\n+      Building the Whole Debian Archive with GCC 4.1: A Summary\n+    </title>\n+\n+    <author>\n+      <firstname>Martin</firstname>\n+      <surname>Michlmayr</surname>\n+    </author>\n+\n+    <biblioid>\n+      <ulink url=\"http://lists.debian.org/debian-gcc/2006/03/msg00405.html\">\n+      </ulink>\n+    </biblioid>\n+  </biblioentry> \n+\n+\n+  <biblioentry>\n+    <abbrev>\n+      lbl32\n+    </abbrev>\n+\n+    <title>\n+      Migration guide for GCC-3.2\n+    </title>\n+\n+    <biblioid>\n+      <ulink url=\"http://annwm.lbl.gov/~leggett/Atlas/gcc-3.2.html\">\n+      </ulink>\n+    </biblioid>\n+  </biblioentry> \n+\n+</bibliography>\n+\n+</sect1>\n\\ No newline at end of file"}, {"sha": "e05fc16c56aef1ea044930cb00694f602009aab7", "filename": "libstdc++-v3/doc/xml/manual/bitmap_allocator.xml", "status": "added", "additions": 559, "deletions": 0, "changes": 559, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fbitmap_allocator.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fbitmap_allocator.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fbitmap_allocator.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,559 @@\n+<sect1 id=\"manual.ext.allocator.bitmap\" xreflabel=\"mt allocator\">\n+<?dbhtml filename=\"bitmap_allocator.html\"?>\n+ \n+<sect1info>\n+  <keywordset>\n+    <keyword>\n+      ISO C++\n+    </keyword>\n+    <keyword>\n+      allocator\n+    </keyword>\n+  </keywordset>\n+</sect1info>\n+\n+<title>bitmap_allocator</title>\n+\n+<para>\n+</para>\n+\n+<sect2 id=\"allocator.bitmap.design\" xreflabel=\"allocator.bitmap.design\">\n+<title>Design</title>\n+\n+  <para>\n+    As this name suggests, this allocator uses a bit-map to keep track\n+    of the used and unused memory locations for it's book-keeping\n+    purposes.\n+  </para>\n+  <para>\n+    This allocator will make use of 1 single bit to keep track of\n+    whether it has been allocated or not. A bit 1 indicates free,\n+    while 0 indicates allocated. This has been done so that you can\n+    easily check a collection of bits for a free block. This kind of\n+    Bitmapped strategy works best for single object allocations, and\n+    with the STL type parameterized allocators, we do not need to\n+    choose any size for the block which will be represented by a\n+    single bit. This will be the size of the parameter around which\n+    the allocator has been parameterized. Thus, close to optimal\n+    performance will result. Hence, this should be used for node based\n+    containers which call the allocate function with an argument of 1.\n+  </para>\n+\n+  <para>\n+    The bitmapped allocator's internal pool is exponentially growing.\n+    Meaning that internally, the blocks acquired from the Free List\n+    Store will double every time the bitmapped allocator runs out of\n+    memory.\n+  </para>\n+\n+  <para>\n+    The macro <literal>__GTHREADS</literal> decides whether to use\n+    Mutex Protection around every allocation/deallocation. The state\n+    of the macro is picked up automatically from the gthr abstraction\n+    layer.\n+  </para>\n+\n+</sect2>\n+\n+<sect2 id=\"allocator.bitmap.impl\" xreflabel=\"allocator.bitmap.impl\">\n+<title>Implementation</title>\n+\n+<sect3 id=\"bitmap.impl.free_list_store\" xreflabel=\"Free List Store\">\n+  <title>Free List Store</title>\n+\n+  <para>\n+    The Free List Store (referred to as FLS for the remaining part of this\n+    document) is the Global memory pool that is shared by all instances of\n+    the bitmapped allocator instantiated for any type. This maintains a\n+    sorted order of all free memory blocks given back to it by the\n+    bitmapped allocator, and is also responsible for giving memory to the\n+    bitmapped allocator when it asks for more.\n+  </para>\n+  <para>\n+    Internally, there is a Free List threshold which indicates the\n+    Maximum number of free lists that the FLS can hold internally\n+    (cache).  Currently, this value is set at 64. So, if there are\n+    more than 64 free lists coming in, then some of them will be given\n+    back to the OS using operator delete so that at any given time the\n+    Free List's size does not exceed 64 entries. This is done because\n+    a Binary Search is used to locate an entry in a free list when a\n+    request for memory comes along.  Thus, the run-time complexity of\n+    the search would go up given an increasing size, for 64 entries\n+    however, lg(64) == 6 comparisons are enough to locate the correct\n+    free list if it exists.\n+  </para>  \n+  <para>\n+    Suppose the free list size has reached it's threshold, then the\n+    largest block from among those in the list and the new block will\n+    be selected and given back to the OS. This is done because it\n+    reduces external fragmentation, and allows the OS to use the\n+    larger blocks later in an orderly fashion, possibly merging them\n+    later. Also, on some systems, large blocks are obtained via calls\n+    to mmap, so giving them back to free system resources becomes most\n+    important.\n+  </para>\n+  <para>\n+    The function _S_should_i_give decides the policy that determines\n+    whether the current block of memory should be given to the\n+    allocator for the request that it has made. That's because we may\n+    not always have exact fits for the memory size that the allocator\n+    requests. We do this mainly to prevent external fragmentation at\n+    the cost of a little internal fragmentation. Now, the value of\n+    this internal fragmentation has to be decided by this function. I\n+    can see 3 possibilities right now. Please add more as and when you\n+    find better strategies.\n+  </para>\n+\n+<orderedlist>\n+  <listitem><para>Equal size check. Return true only when the 2 blocks are of equal\n+size.</para></listitem>\n+  <listitem><para>Difference Threshold: Return true only when the _block_size is\n+greater than or equal to the _required_size, and if the _BS is &gt; _RS\n+by a difference of less than some THRESHOLD value, then return true,\n+else return false. </para></listitem>\n+  <listitem><para>Percentage Threshold. Return true only when the _block_size is\n+greater than or equal to the _required_size, and if the _BS is &gt; _RS\n+by a percentage of less than some THRESHOLD value, then return true,\n+else return false.</para></listitem>\n+</orderedlist>\n+\n+  <para>\n+    Currently, (3) is being used with a value of 36% Maximum wastage per\n+    Super Block.\n+  </para>\n+</sect3>\n+\n+<sect3 id=\"bitmap.impl.super_block\" xreflabel=\"Super Block\">\n+  <title>Super Block</title>\n+\n+  <para>\n+    A super block is the block of memory acquired from the FLS from\n+    which the bitmap allocator carves out memory for single objects\n+    and satisfies the user's requests. These super blocks come in\n+    sizes that are powers of 2 and multiples of 32\n+    (_Bits_Per_Block). Yes both at the same time!  That's because the\n+    next super block acquired will be 2 times the previous one, and\n+    also all super blocks have to be multiples of the _Bits_Per_Block\n+    value.\n+  </para>\n+  <para>\n+    How does it interact with the free list store?\n+  </para>\n+  <para>\n+    The super block is contained in the FLS, and the FLS is responsible for\n+    getting / returning Super Bocks to and from the OS using operator new\n+    as defined by the C++ standard.\n+  </para>\n+</sect3>\n+\n+<sect3 id=\"bitmap.impl.super_block_data\" xreflabel=\"Super Block Data\">\n+  <title>Super Block Data Layout</title>\n+  <para>\n+    Each Super Block will be of some size that is a multiple of the\n+    number of Bits Per Block. Typically, this value is chosen as\n+    Bits_Per_Byte x sizeof(size_t). On an x86 system, this gives the\n+    figure 8 x 4 = 32. Thus, each Super Block will be of size 32\n+    x Some_Value. This Some_Value is sizeof(value_type). For now, let\n+    it be called 'K'. Thus, finally, Super Block size is 32 x K bytes.\n+  </para>\n+  <para>\n+    This value of 32 has been chosen because each size_t has 32-bits\n+    and Maximum use of these can be made with such a figure.\n+  </para>\n+  <para>\n+    Consider a block of size 64 ints. In memory, it would look like this:\n+    (assume a 32-bit system where, size_t is a 32-bit entity).\n+  </para>\n+\n+<table frame='all'>\n+<title>Bitmap Allocator Memory Map</title>\n+<tgroup cols='5' align='left' colsep='1' rowsep='1'>\n+<colspec colname='c1'></colspec>\n+<colspec colname='c2'></colspec>\n+<colspec colname='c3'></colspec>\n+<colspec colname='c4'></colspec>\n+<colspec colname='c5'></colspec>\n+\n+<tbody>\n+  <row>\n+    <entry>268</entry>\n+    <entry>0</entry>\n+    <entry>4294967295</entry>\n+    <entry>4294967295</entry>\n+    <entry>Data -&gt; Space for 64 ints</entry>\n+  </row>\n+</tbody>\n+</tgroup>\n+</table>\n+\n+  <para>\n+    The first Column(268) represents the size of the Block in bytes as\n+    seen by the Bitmap Allocator. Internally, a global free list is\n+    used to keep track of the free blocks used and given back by the\n+    bitmap allocator.  It is this Free List Store that is responsible\n+    for writing and managing this information. Actually the number of\n+    bytes allocated in this case would be: 4 + 4 + (4x2) + (64x4) =\n+    272 bytes, but the first 4 bytes are an addition by the Free List\n+    Store, so the Bitmap Allocator sees only 268 bytes. These first 4\n+    bytes about which the bitmapped allocator is not aware hold the\n+    value 268.\n+  </para>\n+\n+  <para>\n+  What do the remaining values represent?</para>\n+  <para>\n+    The 2nd 4 in the expression is the sizeof(size_t) because the\n+    Bitmapped Allocator maintains a used count for each Super Block,\n+    which is initially set to 0 (as indicated in the diagram). This is\n+    incremented every time a block is removed from this super block\n+    (allocated), and decremented whenever it is given back. So, when\n+    the used count falls to 0, the whole super block will be given\n+    back to the Free List Store.\n+  </para>\n+  <para>\n+    The value 4294967295 represents the integer corresponding to the bit\n+    representation of all bits set: 11111111111111111111111111111111.\n+  </para>\n+  <para>\n+    The 3rd 4x2 is size of the bitmap itself, which is the size of 32-bits\n+    x 2,\n+    which is 8-bytes, or 2 x sizeof(size_t).\n+  </para>\n+</sect3>\n+\n+<sect3 id=\"bitmap.impl.max_wasted\" xreflabel=\"Max Wasted Percentage\">\n+  <title>Maximum Wasted Percentage</title>\n+ \n+  <para>\n+    This has nothing to do with the algorithm per-se,\n+    only with some vales that must be chosen correctly to ensure that the\n+    allocator performs well in a real word scenario, and maintains a good\n+    balance between the memory consumption and the allocation/deallocation\n+    speed.\n+  </para>\n+  <para>\n+    The formula for calculating the maximum wastage as a percentage:\n+  </para>\n+\n+  <para>\n+(32 x k + 1) / (2 x (32 x k + 1 + 32 x c)) x 100.\n+  </para>\n+\n+  <para>\n+    Where, k =&gt; The constant overhead per node. eg. for list, it is\n+    8 bytes, and for map it is 12 bytes. c =&gt; The size of the\n+    base type on which the map/list is instantiated. Thus, suppose the\n+    type1 is int and type2 is double, they are related by the relation\n+    sizeof(double) == 2*sizeof(int). Thus, all types must have this\n+    double size relation for this formula to work properly.\n+  </para>\n+  <para>\n+    Plugging-in: For List: k = 8 and c = 4 (int and double), we get:\n+    33.376%\n+  </para>\n+\n+  <para>\n+For map/multimap: k = 12, and c = 4 (int and double), we get: 37.524%\n+  </para>\n+  <para>\n+    Thus, knowing these values, and based on the sizeof(value_type), we may\n+    create a function that returns the Max_Wastage_Percentage for us to use.\n+  </para>\n+\n+</sect3>\n+\n+<sect3 id=\"bitmap.impl.allocate\" xreflabel=\"Allocate\">\n+  <title><function>allocate</function></title>\n+\n+  <para>\n+    The allocate function is specialized for single object allocation\n+    ONLY.  Thus, ONLY if n == 1, will the bitmap_allocator's\n+    specialized algorithm be used. Otherwise, the request is satisfied\n+    directly by calling operator new.\n+  </para>\n+  <para>\n+    Suppose n == 1, then the allocator does the following:\n+  </para>\n+  <orderedlist>\n+    <listitem>\n+      <para>\n+\tChecks to see whether a free block exists somewhere in a region\n+\tof memory close to the last satisfied request. If so, then that\n+\tblock is marked as allocated in the bit map and given to the\n+\tuser. If not, then (2) is executed.\n+    </para>\n+    </listitem>\n+    <listitem>\n+      <para>\n+\tIs there a free block anywhere after the current block right\n+\tup to the end of the memory that we have? If so, that block is\n+\tfound, and the same procedure is applied as above, and\n+\treturned to the user. If not, then (3) is executed.\n+    </para>\n+    </listitem>\n+    <listitem>\n+      <para>\n+\tIs there any block in whatever region of memory that we own\n+\tfree?  This is done by checking\n+      </para>\n+      <itemizedlist>\n+\t<listitem>\n+\t<para>\n+\tThe use count for each super block, and if that fails then\n+\t</para>\n+\t</listitem>\n+\t<listitem>\n+\t<para>\n+\t  The individual bit-maps for each super block.\n+\t</para>\n+\t</listitem>\n+      </itemizedlist>\n+\n+      <para>\n+\tNote: Here we are never touching any of the memory that the\n+\tuser will be given, and we are confining all memory accesses\n+\tto a small region of memory! This helps reduce cache\n+\tmisses. If this succeeds then we apply the same procedure on\n+\tthat bit-map as (1), and return that block of memory to the\n+\tuser. However, if this process fails, then we resort to (4).\n+\t</para>\n+    </listitem>\n+    <listitem>\n+      <para>\n+\tThis process involves Refilling the internal exponentially\n+\tgrowing memory pool. The said effect is achieved by calling\n+\t_S_refill_pool which does the following:\n+      </para>\n+      <itemizedlist>\n+\t<listitem>\n+\t  <para>\n+\t    Gets more memory from the Global Free List of the Required\n+\t    size.  \n+\t  </para>\n+\t</listitem>\n+      <listitem>\n+      <para>\n+      Adjusts the size for the next call to itself. \n+      </para>\n+      </listitem>\n+      <listitem>\n+      <para>\n+      Writes the appropriate headers in the bit-maps.\n+      </para>\n+      </listitem>\n+      <listitem>\n+\t<para>\n+\tSets the use count for that super-block just allocated to 0\n+\t(zero).  \n+      </para>\n+      </listitem>\n+      <listitem>\n+\t<para>\n+\t  All of the above accounts to maintaining the basic invariant\n+\t  for the allocator. If the invariant is maintained, we are\n+\t  sure that all is well. Now, the same process is applied on\n+\t  the newly acquired free blocks, which are dispatched\n+\t  accordingly.  \n+      </para>\n+      </listitem>\n+    </itemizedlist>\n+    </listitem>\n+</orderedlist>\n+\n+<para>\n+Thus, you can clearly see that the allocate function is nothing but a\n+combination of the next-fit and first-fit algorithm optimized ONLY for\n+single object allocations.\n+</para>\n+\n+</sect3>\n+\n+<sect3 id=\"bitmap.impl.deallocate\" xreflabel=\"Deallocate\">\n+  <title><function>deallocate</function></title>\n+  <para>\n+    The deallocate function again is specialized for single objects ONLY.\n+    For all n belonging to &gt; 1, the operator delete is called without\n+    further ado, and the deallocate function returns.\n+  </para>\n+  <para>\n+    However for n == 1, a series of steps are performed:\n+  </para>\n+  \n+  <orderedlist>\n+    <listitem><para>\n+      We first need to locate that super-block which holds the memory\n+      location given to us by the user. For that purpose, we maintain\n+      a static variable _S_last_dealloc_index, which holds the index\n+      into the vector of block pairs which indicates the index of the\n+      last super-block from which memory was freed. We use this\n+      strategy in the hope that the user will deallocate memory in a\n+      region close to what he/she deallocated the last time around. If\n+      the check for belongs_to succeeds, then we determine the bit-map\n+      for the given pointer, and locate the index into that bit-map,\n+      and mark that bit as free by setting it.\n+    </para></listitem>\n+    <listitem><para>\n+      If the _S_last_dealloc_index does not point to the memory block\n+      that we're looking for, then we do a linear search on the block\n+      stored in the vector of Block Pairs. This vector in code is\n+      called _S_mem_blocks. When the corresponding super-block is\n+      found, we apply the same procedure as we did for (1) to mark the\n+      block as free in the bit-map.\n+    </para></listitem>\n+  </orderedlist>\n+\n+  <para>\n+    Now, whenever a block is freed, the use count of that particular\n+    super block goes down by 1. When this use count hits 0, we remove\n+    that super block from the list of all valid super blocks stored in\n+    the vector.  While doing this, we also make sure that the basic\n+    invariant is maintained by making sure that _S_last_request and\n+    _S_last_dealloc_index point to valid locations within the vector.\n+  </para>\n+</sect3>\n+\n+<sect3 id=\"bitmap.impl.questions\" xreflabel=\"Questions\">\n+  <title>Questions</title>\n+\n+  <sect4 id=\"bitmap.impl.question.1\" xreflabel=\"Question 1\">\n+    <title>1</title>\n+    <para>\n+Q1) The \"Data Layout\" section is\n+cryptic. I have no idea of what you are trying to say. Layout of what?\n+The free-list? Each bitmap? The Super Block?\n+    </para>\n+    <para>\n+      The layout of a Super Block of a given\n+size. In the example, a super block of size 32 x 1 is taken. The\n+general formula for calculating the size of a super block is\n+32 x sizeof(value_type) x 2^n, where n ranges from 0 to 32 for 32-bit\n+systems.\n+    </para>\n+  </sect4>\n+\n+  <sect4 id=\"bitmap.impl.question.2\" xreflabel=\"Question 2\">\n+    <title>2</title>\n+    <para>\n+      And since I just mentioned the\n+term `each bitmap', what in the world is meant by it? What does each\n+bitmap manage? How does it relate to the super block? Is the Super\n+Block a bitmap as well?\n+    </para>\n+    <para>\n+      Each bitmap is part of a Super Block which is made up of 3 parts\n+      as I have mentioned earlier.  Re-iterating, 1. The use count,\n+      2. The bit-map for that Super Block. 3.  The actual memory that\n+      will be eventually given to the user. Each bitmap is a multiple\n+      of 32 in size. If there are 32 x (2^3) blocks of single objects\n+      to be given, there will be '32 x (2^3)' bits present.  Each 32\n+      bits managing the allocated / free status for 32 blocks. Since\n+      each size_t contains 32-bits, one size_t can manage up to 32\n+      blocks' status. Each bit-map is made up of a number of size_t,\n+      whose exact number for a super-block of a given size I have just\n+      mentioned.\n+    </para>\n+  </sect4>\n+\n+  <sect4 id=\"bitmap.impl.question.3\" xreflabel=\"Question 3\">\n+    <title>3</title>\n+    <para>\n+      How do the allocate and deallocate functions work in regard to\n+      bitmaps?\n+    </para>\n+    <para>\n+      The allocate and deallocate functions manipulate the bitmaps and\n+      have nothing to do with the memory that is given to the user. As\n+      I have earlier mentioned, a 1 in the bitmap's bit field\n+      indicates free, while a 0 indicates allocated. This lets us\n+      check 32 bits at a time to check whether there is at lease one\n+      free block in those 32 blocks by testing for equality with\n+      (0). Now, the allocate function will given a memory block find\n+      the corresponding bit in the bitmap, and will reset it (i.e.,\n+      make it re-set (0)). And when the deallocate function is called,\n+      it will again set that bit after locating it to indicate that\n+      that particular block corresponding to this bit in the bit-map\n+      is not being used by anyone, and may be used to satisfy future\n+      requests.\n+    </para>\n+    <para>\n+      e.g.: Consider a bit-map of 64-bits as represented below:\n+      1111111111111111111111111111111111111111111111111111111111111111\n+    </para>\n+\n+    <para>\n+      Now, when the first request for allocation of a single object\n+      comes along, the first block in address order is returned. And\n+      since the bit-maps in the reverse order to that of the address\n+      order, the last bit (LSB if the bit-map is considered as a\n+      binary word of 64-bits) is re-set to 0.\n+    </para>\n+\n+    <para>\n+      The bit-map now looks like this:\n+      1111111111111111111111111111111111111111111111111111111111111110\n+    </para>\n+  </sect4>\n+</sect3>\n+\n+<sect3 id=\"bitmap.impl.locality\" xreflabel=\"Locality\">\n+  <title>Locality</title>\n+  <para>\n+    Another issue would be whether to keep the all bitmaps in a\n+    separate area in memory, or to keep them near the actual blocks\n+    that will be given out or allocated for the client. After some\n+    testing, I've decided to keep these bitmaps close to the actual\n+    blocks. This will help in 2 ways.\n+  </para>\n+  \n+  <orderedlist>\n+  <listitem><para>Constant time access for the bitmap themselves, since no kind of\n+look up will be needed to find the correct bitmap list or it's\n+equivalent.</para></listitem>\n+  <listitem><para>And also this would preserve the cache as far as possible.</para></listitem>\n+  </orderedlist>\n+\n+  <para>\n+    So in effect, this kind of an allocator might prove beneficial from a\n+    purely cache point of view. But this allocator has been made to try and\n+    roll out the defects of the node_allocator, wherein the nodes get\n+    skewed about in memory, if they are not returned in the exact reverse\n+    order or in the same order in which they were allocated. Also, the\n+    new_allocator's book keeping overhead is too much for small objects and\n+    single object allocations, though it preserves the locality of blocks\n+    very well when they are returned back to the allocator.\n+  </para>\n+</sect3>\n+\n+<sect3 id=\"bitmap.impl.grow_policy\" xreflabel=\"Grow Policy\">\n+  <title>Overhead and Grow Policy</title>\n+  <para>\n+    Expected overhead per block would be 1 bit in memory. Also, once\n+    the address of the free list has been found, the cost for\n+    allocation/deallocation would be negligible, and is supposed to be\n+    constant time. For these very reasons, it is very important to\n+    minimize the linear time costs, which include finding a free list\n+    with a free block while allocating, and finding the corresponding\n+    free list for a block while deallocating. Therefore, I have\n+    decided that the growth of the internal pool for this allocator\n+    will be exponential as compared to linear for\n+    node_allocator. There, linear time works well, because we are\n+    mainly concerned with speed of allocation/deallocation and memory\n+    consumption, whereas here, the allocation/deallocation part does\n+    have some linear/logarithmic complexity components in it. Thus, to\n+    try and minimize them would be a good thing to do at the cost of a\n+    little bit of memory.\n+  </para>\n+\n+  <para>\n+    Another thing to be noted is the pool size will double every time\n+    the internal pool gets exhausted, and all the free blocks have\n+    been given away. The initial size of the pool would be\n+    sizeof(size_t) x 8 which is the number of bits in an integer,\n+    which can fit exactly in a CPU register. Hence, the term given is\n+    exponential growth of the internal pool.\n+  </para>\n+</sect3>\n+\n+</sect2>\n+ \n+</sect1>\n\\ No newline at end of file"}, {"sha": "d5d78291f4388ddeac94becf3a3cec7c9b73d60a", "filename": "libstdc++-v3/doc/xml/manual/build.xml", "status": "added", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fbuild.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fbuild.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fbuild.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,182 @@\n+<sect1 id=\"manual.intro.setup.build\" xreflabel=\"Building\">\n+<?dbhtml filename=\"build.html\"?>\n+ \n+<sect1info>\n+  <keywordset>\n+    <keyword>\n+      ISO C++\n+    </keyword>\n+    <keyword>\n+      build\n+    </keyword>\n+  </keywordset>\n+</sect1info>\n+\n+<title>Build</title>\n+\n+<para>\n+  Because libstdc++ is part of GCC, the primary source for\n+   installation instructions is\n+   <ulink url=\"http://gcc.gnu.org/install/\">the GCC install page</ulink>.\n+   Additional data is given here only where it applies to libstdc++.\n+</para>\n+\n+<sect2 id=\"build.prereq\" xreflabel=\"build.prereq\">\n+<title>Prerequisites</title>\n+  <para>\n+    The list of software needed to build the library is kept with the\n+    rest of the compiler, at\n+      <ulink url=\"http://gcc.gnu.org/install/prerequisites.html\">\n+      http://gcc.gnu.org/install/prerequisites.html</ulink>.  The same page\n+      also lists the tools you will need if you wish to modify the source.\n+  </para>\n+\n+   <para>As of GCC 4.0.1 the minimum version of binutils required to build\n+      libstdc++ is <code>2.15.90.0.1.1</code>. You can get snapshots\n+      (as well as releases) of binutils from\n+      <ulink url=\"ftp://sources.redhat.com/pub/binutils\">\n+      ftp://sources.redhat.com/pub/binutils</ulink>.\n+      Older releases of libstdc++ do not require such a recent version,\n+      but to take full advantage of useful space-saving features and\n+      bug-fixes you should use a recent binutils if possible.\n+      The configure process will automatically detect and use these\n+      features if the underlying support is present.\n+   </para>\n+\n+   <para>\n+   Finally, a few system-specific requirements: \n+   </para>\n+\n+   <variablelist>\n+      <varlistentry>\n+\t<term>linux</term>\n+\t\n+\t<listitem>\n+\t<para>\n+\t  If gcc 3.1.0 or later on is being used on linux, an attempt\n+\t  will be made to use \"C\" library functionality necessary for\n+\t  C++ named locale support.  For gcc 3.2.1 and later, this\n+\t  means that glibc 2.2.5 or later is required and the \"C\"\n+\t  library de_DE locale information must be installed.\n+\t</para>\n+\n+\t<para>\n+\t  Note however that the sanity checks involving the de_DE\n+\t  locale are skipped when an explicit --enable-clocale=gnu\n+\t  configure option is used: only the basic checks are carried\n+\t  out, defending against misconfigurations.\n+\t</para>\n+\n+\t<para>\n+\t  If the 'gnu' locale model is being used, the following\n+\t  locales are used and tested in the libstdc++ testsuites.\n+\t  The first column is the name of the locale, the second is\n+\t  the character set it is expected to use.\n+\t</para>\n+<programlisting>\n+de_DE               ISO-8859-1\n+de_DE@euro          ISO-8859-15\n+en_HK               ISO-8859-1\n+en_PH               ISO-8859-1\n+en_US               ISO-8859-1\n+en_US.ISO-8859-1    ISO-8859-1\n+en_US.ISO-8859-15   ISO-8859-15\n+en_US.UTF-8         UTF-8\n+es_ES               ISO-8859-1\n+es_MX               ISO-8859-1\n+fr_FR               ISO-8859-1\n+fr_FR@euro          ISO-8859-15\n+is_IS               UTF-8\n+it_IT               ISO-8859-1\n+ja_JP.eucjp         EUC-JP\n+se_NO.UTF-8         UTF-8\n+ta_IN               UTF-8\n+zh_TW               BIG5\n+</programlisting>\n+      <para>Failure to have the underlying \"C\" library locale\n+      information installed will mean that C++ named locales for the\n+      above regions will not work: because of this, the libstdc++\n+      testsuite will skip the named locale tests. If this isn't an\n+      issue, don't worry about it. If named locales are needed, the\n+      underlying locale information must be installed. Note that\n+      rebuilding libstdc++ after the \"C\" locales are installed is not\n+      necessary.\n+      </para>\n+\n+      <para>\n+\tTo install support for locales, do only one of the following:\n+      </para>\n+\n+      <itemizedlist>\n+        <listitem> \n+\t  <para>install all locales</para>\n+\t  <itemizedlist>\n+\t    <listitem>\n+\t      <para>with RedHat Linux:\n+\t      </para>\n+\t      <para> <code> export LC_ALL=C </code> \n+\t      </para>\n+\t      <para> <code> rpm -e glibc-common --nodeps </code> \n+\t      </para>\n+\t      <para> \n+\t\t<code> rpm -i --define \"_install_langs all\"\n+\t\t glibc-common-2.2.5-34.i386.rpm \n+\t\t</code> \n+\t      </para>\n+\t    </listitem>\n+             <listitem> \n+\t     <para>\n+\t       Instructions for other operating systems solicited.\n+\t     </para>\n+\t     </listitem>\n+          </itemizedlist>\n+        </listitem>\n+        <listitem> \n+\t  <para>install just the necessary locales</para>\n+          <itemizedlist>\n+            <listitem>\n+\t      <para>with Debian Linux:</para>\n+\t      <para> Add the above list, as shown, to the file\n+\t      <code>/etc/locale.gen</code> </para>\n+\t      <para> run <code>/usr/sbin/locale-gen</code> </para>\n+\t    </listitem>\n+            <listitem> \n+\t      <para>on most Unix-like operating systems:</para>\n+\t      <para><code> localedef -i de_DE -f ISO-8859-1 de_DE </code></para>\n+\t      <para>(repeat for each entry in the above list) </para>\n+            </listitem>\n+            <listitem> \n+\t    <para>\n+\t       Instructions for other operating systems solicited.\n+\t    </para>\n+\t    </listitem>\n+          </itemizedlist>\n+        </listitem>\n+      </itemizedlist>\n+      </listitem>\n+      </varlistentry>\n+   </variablelist>\n+\n+</sect2>\n+\n+<sect2 id=\"build.configure\" xreflabel=\"build.make\">\n+<title>Make</title>\n+   <para>If you have never done this before, you should read the basic\n+      <ulink url=\"http://gcc.gnu.org/install/\">GCC Installation\n+      Instructions</ulink> first.  Read <emphasis>all of them</emphasis>.\n+      <emphasis>Twice.</emphasis>\n+   </para>\n+   <para>When building libstdc++ you'll have to configure\n+      the entire <emphasis>gccsrcdir</emphasis> directory.  The full list of libstdc++\n+      specific configuration options, not dependent on the specific compiler\n+      release being used, can be found <ulink url=\"configopts.html\">here</ulink>.\n+   </para>\n+   <para>Consider possibly using --enable-languages=c++ to save time by only\n+      building the C++ language parts.\n+   </para>\n+\n+   <programlisting>\n+   cd <emphasis>gccbuilddir</emphasis>\n+   <emphasis>gccsrcdir</emphasis>/configure --prefix=<emphasis>destdir</emphasis> --other-opts...</programlisting>\n+</sect2>\n+</sect1>\n\\ No newline at end of file"}, {"sha": "b420f4f07060c55030f8c29f58dea7fba832862d", "filename": "libstdc++-v3/doc/xml/manual/build_hacking.xml", "status": "added", "additions": 354, "deletions": 0, "changes": 354, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fbuild_hacking.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fbuild_hacking.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fbuild_hacking.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,354 @@\n+<sect1 id=\"appendix.porting.build_hacking\" xreflabel=\"build_hacking\">\n+<?dbhtml filename=\"build_hacking.html\"?>\n+ \n+<sect1info>\n+  <keywordset>\n+    <keyword>\n+      C++\n+    </keyword>\n+    <keyword>\n+      BUILD_HACKING\n+    </keyword>\n+    <keyword>\n+      version\n+    </keyword>\n+    <keyword>\n+      dynamic\n+    </keyword>\n+    <keyword>\n+      shared\n+    </keyword>\n+  </keywordset>\n+</sect1info>\n+\n+<title>Configure and Build Hacking</title>\n+\n+<sect2 id=\"build_hacking.prereq\" xreflabel=\"build_hacking.prereq\">\n+  <title>Prerequisites</title>\n+  <para> \n+    As noted <ulink\n+    url=\"http://gcc.gnu.org/install/prerequisites.html\">previously</ulink>,\n+    certain other tools are necessary for hacking on files that\n+    control configure (<code>configure.ac</code>,\n+    <code>acinclude.m4</code>) and make\n+    (<code>Makefile.am</code>). These additional tools\n+    (<code>automake</code>, and <code>autoconf</code>) are further\n+    described in detail in their respective manuals. All the libraries\n+    in GCC try to stay in sync with each other in terms of versions of\n+    the auto-tools used, so please try to play nicely with the\n+    neighbors.\n+  </para>\n+</sect2>\n+\n+<sect2 id=\"build_hacking.map\" xreflabel=\"build_hacking.map\">\n+  <title>Overview: What Comes from Where</title>\n+  \n+  <screen>\n+  <inlinemediaobject>\n+    <imageobject>\n+      <imagedata fileref=\"../images/confdeps.png\"/>\n+    </imageobject>\n+    <textobject>\n+      <phrase>Dependency Graph Configure to Build Files</phrase>\n+    </textobject>\n+  </inlinemediaobject>\n+  </screen>\n+\n+  <para>\n+    Regenerate all generated files by using the command sequence\n+    <code>\"autoreconf\"</code> at the top level of the libstdc++ source\n+    directory. The following will also work, but is much more complex:\n+    <code>\"aclocal-1.7 &amp;&amp; autoconf-2.59 &amp;&amp;\n+    autoheader-2.59 &amp;&amp; automake-1.7\"</code> The version\n+    numbers may be absent entirely or otherwise vary depending on\n+    <ulink url=\"http://gcc.gnu.org/install/prerequisites.html\">the\n+    current requirements</ulink> and your vendor's choice of\n+    installation names.\n+  </para>\n+</sect2>\n+\n+<sect2 id=\"build_hacking.scripts\" xreflabel=\"build_hacking.scripts\">\n+  <title>Storing Information in non-AC files (like configure.host)</title>\n+\n+  <para>\n+    Until that glorious day when we can use AC_TRY_LINK with a\n+    cross-compiler, we have to hardcode the results of what the tests\n+    would have shown if they could be run.  So we have an inflexible\n+    mess like crossconfig.m4.\n+  </para>\n+\n+  <para>\n+    Wouldn't it be nice if we could store that information in files\n+    like configure.host, which can be modified without needing to\n+    regenerate anything, and can even be tweaked without really\n+    knowing how the configury all works?  Perhaps break the pieces of\n+    crossconfig.m4 out and place them in their appropriate\n+    config/{cpu,os} directory.\n+  </para>\n+\n+  <para>\n+    Alas, writing macros like\n+    \"<code>AC_DEFINE(HAVE_A_NICE_DAY)</code>\" can only be done inside\n+    files which are passed through autoconf.  Files which are pure\n+    shell script can be source'd at configure time.  Files which\n+    contain autoconf macros must be processed with autoconf.  We could\n+    still try breaking the pieces out into \"config/*/cross.m4\" bits,\n+    for instance, but then we would need arguments to aclocal/autoconf\n+    to properly find them all when generating configure.  I would\n+    discourage that.\n+</para>\n+</sect2>\n+\n+<sect2 id=\"build_hacking.conventions\" xreflabel=\"build_hacking.conventions\">\n+  <title>Coding and Commenting Conventions</title>\n+\n+  <para>\n+    Most comments should use {octothorpes, shibboleths, hash marks,\n+    pound signs, whatevers} rather than \"dnl\".  Nearly all comments in\n+    configure.ac should.  Comments inside macros written in ancilliary\n+    .m4 files should.  About the only comments which should\n+    <emphasis>not</emphasis> use #, but use dnl instead, are comments\n+    <emphasis>outside</emphasis> our own macros in the ancilliary\n+    files.  The difference is that # comments show up in\n+    <code>configure</code> (which is most helpful for debugging),\n+    while dnl'd lines just vanish.  Since the macros in ancilliary\n+    files generate code which appears in odd places, their \"outside\"\n+    comments tend to not be useful while reading\n+    <code>configure</code>.\n+  </para>\n+\n+  <para>\n+    Do not use any <code>$target*</code> variables, such as\n+    <code>$target_alias</code>.  The single exception is in\n+    configure.ac, for automake+dejagnu's sake.\n+  </para>\n+</sect2>\n+\n+<sect2 id=\"build_hacking.acinclude\" xreflabel=\"build_hacking.acinclude\">\n+  <title>The acinclude.m4 layout</title>\n+  <para>\n+    The nice thing about acinclude.m4/aclocal.m4 is that macros aren't\n+    actually performed/called/expanded/whatever here, just loaded.  So\n+    we can arrange the contents however we like.  As of this writing,\n+    acinclude.m4 is arranged as follows:\n+  </para>\n+  <programlisting>\n+    GLIBCXX_CHECK_HOST\n+    GLIBCXX_TOPREL_CONFIGURE\n+    GLIBCXX_CONFIGURE\n+  </programlisting>\n+  <para>\n+    All the major variable \"discovery\" is done here.  CXX, multilibs,\n+    etc.\n+  </para>\n+  <programlisting>\n+    fragments included from elsewhere\n+  </programlisting>\n+  <para>\n+    Right now, \"fragments\" == \"the math/linkage bits\".\n+  </para>\n+<programlisting>\n+    GLIBCXX_CHECK_COMPILER_FEATURES\n+    GLIBCXX_CHECK_LINKER_FEATURES\n+    GLIBCXX_CHECK_WCHAR_T_SUPPORT\n+</programlisting>\n+<para>\n+  Next come extra compiler/linker feature tests.  Wide character\n+  support was placed here because I couldn't think of another place\n+  for it.  It will probably get broken apart like the math tests,\n+  because we're still disabling wchars on systems which could actually\n+  support them.\n+</para>\n+<programlisting>\n+    GLIBCXX_CHECK_SETRLIMIT_ancilliary\n+    GLIBCXX_CHECK_SETRLIMIT\n+    GLIBCXX_CHECK_S_ISREG_OR_S_IFREG\n+    GLIBCXX_CHECK_POLL\n+    GLIBCXX_CHECK_WRITEV\n+\n+    GLIBCXX_CONFIGURE_TESTSUITE\n+</programlisting>\n+<para>\n+  Feature tests which only get used in one place.  Here, things used\n+  only in the testsuite, plus a couple bits used in the guts of I/O.\n+</para>\n+<programlisting>\n+    GLIBCXX_EXPORT_INCLUDES\n+    GLIBCXX_EXPORT_FLAGS\n+    GLIBCXX_EXPORT_INSTALL_INFO\n+</programlisting>\n+<para>\n+  Installation variables, multilibs, working with the rest of the\n+  compiler.  Many of the critical variables used in the makefiles are\n+  set here.\n+</para>\n+<programlisting>\n+    GLIBGCC_ENABLE\n+    GLIBCXX_ENABLE_C99\n+    GLIBCXX_ENABLE_CHEADERS\n+    GLIBCXX_ENABLE_CLOCALE\n+    GLIBCXX_ENABLE_CONCEPT_CHECKS\n+    GLIBCXX_ENABLE_CSTDIO\n+    GLIBCXX_ENABLE_CXX_FLAGS\n+    GLIBCXX_ENABLE_C_MBCHAR\n+    GLIBCXX_ENABLE_DEBUG\n+    GLIBCXX_ENABLE_DEBUG_FLAGS\n+    GLIBCXX_ENABLE_LONG_LONG\n+    GLIBCXX_ENABLE_PCH\n+    GLIBCXX_ENABLE_SJLJ_EXCEPTIONS\n+    GLIBCXX_ENABLE_SYMVERS\n+    GLIBCXX_ENABLE_THREADS\n+</programlisting>\n+<para>\n+  All the features which can be controlled with enable/disable\n+  configure options.  Note how they're alphabetized now?  Keep them\n+  like that.  :-)\n+</para>\n+<programlisting>\n+    AC_LC_MESSAGES\n+    libtool bits\n+</programlisting>\n+<para>\n+  Things which we don't seem to use directly, but just has to be\n+  present otherwise stuff magically goes wonky.\n+</para>\n+\n+</sect2>\n+\n+<sect2 id=\"build_hacking.enable\" xreflabel=\"build_hacking.enable\">\n+  <title><constant>GLIBCXX_ENABLE</constant>, the <literal>--enable</literal> maker</title>\n+\n+  <para>\n+    All the GLIBCXX_ENABLE_FOO macros use a common helper,\n+    GLIBCXX_ENABLE.  (You don't have to use it, but it's easy.)  The\n+    helper does two things for us:\n+  </para>\n+\n+<orderedlist>\n+ <listitem>\n+   <para>\n+     Builds the call to the AC_ARG_ENABLE macro, with --help text\n+     properly quoted and aligned.  (Death to changequote!)\n+   </para>\n+ </listitem>\n+ <listitem>\n+   <para>\n+     Checks the result against a list of allowed possibilities, and\n+     signals a fatal error if there's no match.  This means that the\n+     rest of the GLIBCXX_ENABLE_FOO macro doesn't need to test for\n+     strange arguments, nor do we need to protect against\n+     empty/whitespace strings with the <code>\"x$foo\" = \"xbar\"</code>\n+     idiom.\n+   </para>\n+ </listitem>\n+</orderedlist>\n+\n+<para>Doing these things correctly takes some extra autoconf/autom4te code,\n+   which made our macros nearly illegible.  So all the ugliness is factored\n+   out into this one helper macro.\n+</para>\n+\n+<para>Many of the macros take an argument, passed from when they are expanded\n+   in configure.ac.  The argument controls the default value of the\n+   enable/disable switch.  Previously, the arguments themselves had defaults.\n+   Now they don't, because that's extra complexity with zero gain for us.\n+</para>\n+\n+<para>There are three \"overloaded signatures\".  When reading the descriptions\n+   below, keep in mind that the brackets are autoconf's quotation characters,\n+   and that they will be stripped.  Examples of just about everything occur\n+   in acinclude.m4, if you want to look.\n+</para>\n+\n+<programlisting>\n+    GLIBCXX_ENABLE (FEATURE, DEFAULT, HELP-ARG, HELP-STRING)\n+    GLIBCXX_ENABLE (FEATURE, DEFAULT, HELP-ARG, HELP-STRING, permit a|b|c)\n+    GLIBCXX_ENABLE (FEATURE, DEFAULT, HELP-ARG, HELP-STRING, SHELL-CODE-HANDLER)\n+</programlisting>\n+\n+<itemizedlist>\n+ <listitem>\n+   <para>\n+     FEATURE is the string that follows --enable.  The results of the\n+     test (such as it is) will be in the variable $enable_FEATURE,\n+     where FEATURE has been squashed.  Example:\n+     <code>[extra-foo]</code>, controlled by the --enable-extra-foo\n+     option and stored in $enable_extra_foo.\n+   </para>\n+ </listitem>\n+ <listitem>\n+   <para>\n+     DEFAULT is the value to store in $enable_FEATURE if the user does\n+     not pass --enable/--disable.  It should be one of the permitted\n+     values passed later.  Examples: <code>[yes]</code>, or\n+     <code>[bar]</code>, or <code>[$1]</code> (which passes the\n+     argument given to the GLIBCXX_ENABLE_FOO macro as the\n+     default).\n+   </para>\n+   <para>\n+     For cases where we need to probe for particular models of things,\n+     it is useful to have an undocumented \"auto\" value here (see\n+     GLIBCXX_ENABLE_CLOCALE for an example).\n+   </para>\n+ </listitem>\n+ <listitem>\n+   <para>\n+     HELP-ARG is any text to append to the option string itself in the\n+     --help output.  Examples: <code>[]</code> (i.e., an empty string,\n+     which appends nothing), <code>[=BAR]</code>, which produces\n+     <code>--enable-extra-foo=BAR</code>, and\n+     <code>[@&lt;:@=BAR@:&gt;@]</code>, which produces\n+     <code>--enable-extra-foo[=BAR]</code>.  See the difference?  See\n+     what it implies to the user?\n+   </para>\n+   <para>\n+     If you're wondering what that line noise in the last example was,\n+     that's how you embed autoconf special characters in output text.\n+     They're called <ulink\n+     url=\"http://www.gnu.org/software/autoconf/manual/autoconf-2.57/html_node/autoconf_95.html#SEC95\"><emphasis>quadrigraphs</emphasis></ulink>\n+     and you should use them whenever necessary.\n+ </para>\n+ </listitem>\n+ <listitem>\n+   <para>HELP-STRING is what you think it is.  Do not include the\n+   \"default\" text like we used to do; it will be done for you by\n+   GLIBCXX_ENABLE.  By convention, these are not full English\n+   sentences.  Example: [turn on extra foo]\n+   </para>\n+ </listitem>\n+</itemizedlist>\n+\n+<para>\n+  With no other arguments, only the standard autoconf patterns are\n+  allowed: \"<code>--{enable,disable}-foo[={yes,no}]</code>\" The\n+  $enable_FEATURE variable is guaranteed to equal either \"yes\" or \"no\"\n+  after the macro.  If the user tries to pass something else, an\n+  explanatory error message will be given, and configure will halt.\n+</para>\n+\n+<para>\n+  The second signature takes a fifth argument, \"<code>[permit\n+  a | b | c | ...]</code>\"\n+  This allows <emphasis>a</emphasis> or <emphasis>b</emphasis> or\n+  ... after the equals sign in the option, and $enable_FEATURE is\n+  guaranteed to equal one of them after the macro.  Note that if you\n+  want to allow plain --enable/--disable with no \"=whatever\", you must\n+  include \"yes\" and \"no\" in the list of permitted values.  Also note\n+  that whatever you passed as DEFAULT must be in the list.  If the\n+  user tries to pass something not on the list, a semi-explanatory\n+  error message will be given, and configure will halt.  Example:\n+  <code>[permit generic|gnu|ieee_1003.1-2001|yes|no|auto]</code>\n+</para>\n+\n+<para>\n+  The third signature takes a fifth argument.  It is arbitrary shell\n+  code to execute if the user actually passes the enable/disable\n+  option.  (If the user does not, the default is used.  Duh.)  No\n+  argument checking at all is done in this signature.  See\n+  GLIBCXX_ENABLE_CXX_FLAGS for an example of handling, and an error\n+  message.\n+</para>\n+\n+</sect2>\n+\n+</sect1>\n\\ No newline at end of file"}, {"sha": "4c14d6253f0b356e1ca0e5f9db3e149497245a6f", "filename": "libstdc++-v3/doc/xml/manual/codecvt.xml", "status": "added", "additions": 730, "deletions": 0, "changes": 730, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fcodecvt.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fcodecvt.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fcodecvt.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,730 @@\n+<sect1 id=\"manual.localization.facet.codecvt\" xreflabel=\"codecvt\">\n+<?dbhtml filename=\"codecvt.html\"?>\n+ \n+<sect1info>\n+  <keywordset>\n+    <keyword>\n+      ISO C++\n+    </keyword>\n+    <keyword>\n+      codecvt\n+    </keyword>\n+  </keywordset>\n+</sect1info>\n+\n+<title>codecvt</title>\n+\n+<para>\n+The standard class codecvt attempts to address conversions between\n+different character encoding schemes. In particular, the standard\n+attempts to detail conversions between the implementation-defined wide\n+characters (hereafter referred to as wchar_t) and the standard type\n+char that is so beloved in classic <quote>C</quote> (which can now be\n+referred to as narrow characters.)  This document attempts to describe\n+how the GNU libstdc++ implementation deals with the conversion between\n+wide and narrow characters, and also presents a framework for dealing\n+with the huge number of other encodings that iconv can convert,\n+including Unicode and UTF8. Design issues and requirements are\n+addressed, and examples of correct usage for both the required\n+specializations for wide and narrow characters and the\n+implementation-provided extended functionality are given.\n+</para>\n+\n+<sect2 id=\"facet.codecvt.req\" xreflabel=\"facet.codecvt.req\">\n+<title>Requirements</title>\n+\n+<para>\n+Around page 425 of the C++ Standard, this charming heading comes into view:\n+</para>\n+\n+<blockquote>\n+<para>\n+22.2.1.5 - Template class codecvt\n+</para>\n+</blockquote>\n+\n+<para>\n+The text around the codecvt definition gives some clues:\n+</para>\n+\n+<blockquote>\n+<para>\n+<emphasis>\n+-1- The class codecvt&lt;internT,externT,stateT&gt; is for use when\n+converting from one codeset to another, such as from wide characters\n+to multibyte characters, between wide character encodings such as\n+Unicode and EUC. \n+</emphasis>\n+</para>\n+</blockquote>\n+\n+<para> \n+Hmm. So, in some unspecified way, Unicode encodings and\n+translations between other character sets should be handled by this\n+class.  \n+</para>\n+\n+<blockquote>\n+<para>\n+<emphasis>\n+-2- The stateT argument selects the pair of codesets being mapped between. \n+</emphasis>\n+</para>\n+</blockquote>\n+\n+<para>\n+Ah ha! Another clue...\n+</para>\n+\n+<blockquote>\n+<para>\n+<emphasis>\n+-3- The instantiations required in the Table ??\n+(lib.locale.category), namely codecvt&lt;wchar_t,char,mbstate_t&gt; and\n+codecvt&lt;char,char,mbstate_t&gt;, convert the implementation-defined\n+native character set. codecvt&lt;char,char,mbstate_t&gt; implements a\n+degenerate conversion; it does not convert at\n+all. codecvt&lt;wchar_t,char,mbstate_t&gt; converts between the native\n+character sets for tiny and wide characters. Instantiations on\n+mbstate_t perform conversion between encodings known to the library\n+implementor.  Other encodings can be converted by specializing on a\n+user-defined stateT type. The stateT object can contain any state that\n+is useful to communicate to or from the specialized do_convert member.\n+</emphasis>\n+</para>\n+</blockquote>\n+\n+<para>\n+At this point, a couple points become clear:\n+</para>\n+\n+<para>\n+One: The standard clearly implies that attempts to add non-required\n+(yet useful and widely used) conversions need to do so through the\n+third template parameter, stateT.</para>\n+\n+<para>\n+Two: The required conversions, by specifying mbstate_t as the third\n+template parameter, imply an implementation strategy that is mostly\n+(or wholly) based on the underlying C library, and the functions\n+mcsrtombs and wcsrtombs in particular.</para>\n+</sect2>\n+\n+<sect2 id=\"facet.codecvt.design\" xreflabel=\"facet.codecvt.design\">\n+<title>Design</title>\n+\n+<sect3 id=\"codecvt.design.wchar_t_size\" xreflabel=\"codecvt.design.wchar_t_size\">\n+    <title><type>wchar_t</type> Size</title>\n+\n+    <para>\n+      The simple implementation detail of wchar_t's size seems to\n+      repeatedly confound people. Many systems use a two byte,\n+      unsigned integral type to represent wide characters, and use an\n+      internal encoding of Unicode or UCS2. (See AIX, Microsoft NT,\n+      Java, others.) Other systems, use a four byte, unsigned integral\n+      type to represent wide characters, and use an internal encoding\n+      of UCS4. (GNU/Linux systems using glibc, in particular.) The C\n+      programming language (and thus C++) does not specify a specific\n+      size for the type wchar_t.\n+    </para>\n+\n+    <para>\n+      Thus, portable C++ code cannot assume a byte size (or endianness) either.\n+    </para>\n+  </sect3>\n+\n+<sect3 id=\"codecvt.design.unicode\" xreflabel=\"codecvt.design.unicode\">\n+  <title>Support for Unicode</title>\n+  <para>\n+    Probably the most frequently asked question about code conversion\n+    is: &quot;So dudes, what's the deal with Unicode strings?&quot;\n+    The dude part is optional, but apparently the usefulness of\n+    Unicode strings is pretty widely appreciated. Sadly, this specific\n+    encoding (And other useful encodings like UTF8, UCS4, ISO 8859-10,\n+    etc etc etc) are not mentioned in the C++ standard.\n+  </para>\n+\n+  <para>\n+    A couple of comments:\n+  </para>\n+\n+  <para>\n+    The thought that all one needs to convert between two arbitrary\n+    codesets is two types and some kind of state argument is\n+    unfortunate. In particular, encodings may be stateless. The naming\n+    of the third parameter as stateT is unfortunate, as what is really\n+    needed is some kind of generalized type that accounts for the\n+    issues that abstract encodings will need. The minimum information\n+    that is required includes:\n+  </para>\n+\n+  <itemizedlist>\n+    <listitem>\n+      <para>\n+\tIdentifiers for each of the codesets involved in the\n+\tconversion. For example, using the iconv family of functions\n+\tfrom the Single Unix Specification (what used to be called\n+\tX/Open) hosted on the GNU/Linux operating system allows\n+\tbi-directional mapping between far more than the following\n+\ttantalizing possibilities:\n+      </para>\n+\n+      <para>\n+\t(An edited list taken from <code>`iconv --list`</code> on a\n+\tRed Hat 6.2/Intel system:\n+      </para>\n+\n+<blockquote>\n+<programlisting>\n+8859_1, 8859_9, 10646-1:1993, 10646-1:1993/UCS4, ARABIC, ARABIC7,\n+ASCII, EUC-CN, EUC-JP, EUC-KR, EUC-TW, GREEK-CCIcode, GREEK, GREEK7-OLD,\n+GREEK7, GREEK8, HEBREW, ISO-8859-1, ISO-8859-2, ISO-8859-3,\n+ISO-8859-4, ISO-8859-5, ISO-8859-6, ISO-8859-7, ISO-8859-8,\n+ISO-8859-9, ISO-8859-10, ISO-8859-11, ISO-8859-13, ISO-8859-14,\n+ISO-8859-15, ISO-10646, ISO-10646/UCS2, ISO-10646/UCS4,\n+ISO-10646/UTF-8, ISO-10646/UTF8, SHIFT-JIS, SHIFT_JIS, UCS-2, UCS-4,\n+UCS2, UCS4, UNICODE, UNICODEBIG, UNICODELIcodeLE, US-ASCII, US, UTF-8,\n+UTF-16, UTF8, UTF16).\n+</programlisting>\n+</blockquote>\n+\n+<para>\n+For iconv-based implementations, string literals for each of the\n+encodings (ie. &quot;UCS-2&quot; and &quot;UTF-8&quot;) are necessary,\n+although for other,\n+non-iconv implementations a table of enumerated values or some other\n+mechanism may be required.\n+</para>\n+</listitem>\n+\n+<listitem><para>\n+ Maximum length of the identifying string literal.\n+</para></listitem>\n+\n+<listitem><para>\n+ Some encodings require explicit endian-ness. As such, some kind\n+  of endian marker or other byte-order marker will be necessary. See\n+  &quot;Footnotes for C/C++ developers&quot; in Haible for more information on\n+  UCS-2/Unicode endian issues. (Summary: big endian seems most likely,\n+  however implementations, most notably Microsoft, vary.)\n+</para></listitem>\n+\n+<listitem><para>\n+ Types representing the conversion state, for conversions involving\n+  the machinery in the &quot;C&quot; library, or the conversion descriptor, for\n+  conversions using iconv (such as the type iconv_t.)  Note that the\n+  conversion descriptor encodes more information than a simple encoding\n+  state type.\n+</para></listitem>\n+\n+<listitem><para>\n+ Conversion descriptors for both directions of encoding. (ie, both\n+  UCS-2 to UTF-8 and UTF-8 to UCS-2.)\n+</para></listitem>\n+\n+<listitem><para>\n+ Something to indicate if the conversion requested if valid.\n+</para></listitem>\n+\n+<listitem><para>\n+ Something to represent if the conversion descriptors are valid.\n+</para></listitem>\n+\n+<listitem><para>\n+ Some way to enforce strict type checking on the internal and\n+  external types. As part of this, the size of the internal and\n+  external types will need to be known.\n+</para></listitem>\n+</itemizedlist>\n+</sect3>\n+\n+<sect3 id=\"codecvt.design.issues\" xreflabel=\"codecvt.design.issues\">\n+  <title>Other Issues</title>\n+<para>\n+In addition, multi-threaded and multi-locale environments also impact\n+the design and requirements for code conversions. In particular, they\n+affect the required specialization codecvt&lt;wchar_t, char, mbstate_t&gt;\n+when implemented using standard &quot;C&quot; functions.\n+</para>\n+\n+<para>\n+Three problems arise, one big, one of medium importance, and one small. \n+</para>\n+\n+<para>\n+First, the small: mcsrtombs and wcsrtombs may not be multithread-safe\n+on all systems required by the GNU tools. For GNU/Linux and glibc,\n+this is not an issue.\n+</para>\n+\n+<para>\n+Of medium concern, in the grand scope of things, is that the functions\n+used to implement this specialization work on null-terminated\n+strings. Buffers, especially file buffers, may not be null-terminated,\n+thus giving conversions that end prematurely or are otherwise\n+incorrect. Yikes!\n+</para>\n+\n+<para>\n+The last, and fundamental problem, is the assumption of a global\n+locale for all the &quot;C&quot; functions referenced above. For something like\n+C++ iostreams (where codecvt is explicitly used) the notion of\n+multiple locales is fundamental. In practice, most users may not run\n+into this limitation. However, as a quality of implementation issue,\n+the GNU C++ library would like to offer a solution that allows\n+multiple locales and or simultaneous usage with computationally\n+correct results. In short, libstdc++ is trying to offer, as an\n+option, a high-quality implementation, damn the additional complexity!\n+</para>\n+\n+<para>\n+For the required specialization codecvt&lt;wchar_t, char, mbstate_t&gt; ,\n+conversions are made between the internal character set (always UCS4\n+on GNU/Linux) and whatever the currently selected locale for the\n+LC_CTYPE category implements.\n+</para>\n+\n+</sect3>\n+\n+</sect2>\n+\n+<sect2 id=\"facet.codecvt.impl\" xreflabel=\"facet.codecvt.impl\">\n+<title>Implementation</title>\n+\n+<para>\n+The two required specializations are implemented as follows:\n+</para>\n+\n+<para>\n+<code>\n+codecvt&lt;char, char, mbstate_t&gt;\n+</code>\n+</para>\n+<para>\n+This is a degenerate (ie, does nothing) specialization. Implementing\n+this was a piece of cake.\n+</para>\n+\n+<para>\n+<code>\n+codecvt&lt;char, wchar_t, mbstate_t&gt;\n+</code>\n+</para>\n+\n+<para>\n+This specialization, by specifying all the template parameters, pretty\n+much ties the hands of implementors. As such, the implementation is\n+straightforward, involving mcsrtombs for the conversions between char\n+to wchar_t and wcsrtombs for conversions between wchar_t and char.\n+</para>\n+\n+<para>\n+Neither of these two required specializations deals with Unicode\n+characters. As such, libstdc++ implements a partial specialization\n+of the codecvt class with and iconv wrapper class, encoding_state as the\n+third template parameter.\n+</para>\n+\n+<para>\n+This implementation should be standards conformant. First of all, the\n+standard explicitly points out that instantiations on the third\n+template parameter, stateT, are the proper way to implement\n+non-required conversions. Second of all, the standard says (in Chapter\n+17) that partial specializations of required classes are a-ok. Third\n+of all, the requirements for the stateT type elsewhere in the standard\n+(see 21.1.2 traits typedefs) only indicate that this type be copy\n+constructible.\n+</para>\n+\n+<para>\n+As such, the type encoding_state is defined as a non-templatized, POD\n+type to be used as the third type of a codecvt instantiation. This\n+type is just a wrapper class for iconv, and provides an easy interface\n+to iconv functionality.\n+</para>\n+\n+<para>\n+There are two constructors for encoding_state:\n+</para>\n+\n+<para>\n+<code> \n+encoding_state() : __in_desc(0), __out_desc(0)\n+</code>\n+</para>\n+<para>\n+This default constructor sets the internal encoding to some default\n+(currently UCS4) and the external encoding to whatever is returned by\n+nl_langinfo(CODESET).\n+</para>\n+\n+<para>\n+<code> \n+encoding_state(const char* __int, const char* __ext)\n+</code>\n+</para>\n+\n+<para>\n+This constructor takes as parameters string literals that indicate the\n+desired internal and external encoding. There are no defaults for\n+either argument.\n+</para>\n+\n+<para>\n+One of the issues with iconv is that the string literals identifying\n+conversions are not standardized. Because of this, the thought of\n+mandating and or enforcing some set of pre-determined valid\n+identifiers seems iffy: thus, a more practical (and non-migraine\n+inducing) strategy was implemented: end-users can specify any string\n+(subject to a pre-determined length qualifier, currently 32 bytes) for\n+encodings. It is up to the user to make sure that these strings are\n+valid on the target system.\n+</para>\n+  \n+<para>\n+<code> \n+void\n+_M_init()\n+</code>\n+</para>\n+<para>\n+Strangely enough, this member function attempts to open conversion\n+descriptors for a given encoding_state object. If the conversion\n+descriptors are not valid, the conversion descriptors returned will\n+not be valid and the resulting calls to the codecvt conversion\n+functions will return error.\n+</para>\n+\n+<para>\n+<code> \n+bool\n+_M_good()\n+</code>\n+</para>\n+\n+<para>\n+Provides a way to see if the given encoding_state object has been\n+properly initialized. If the string literals describing the desired\n+internal and external encoding are not valid, initialization will\n+fail, and this will return false. If the internal and external\n+encodings are valid, but iconv_open could not allocate conversion\n+descriptors, this will also return false. Otherwise, the object is\n+ready to convert and will return true.\n+</para>\n+\n+<para>\n+<code> \n+encoding_state(const encoding_state&amp;)\n+</code>\n+</para>\n+\n+<para>\n+As iconv allocates memory and sets up conversion descriptors, the copy\n+constructor can only copy the member data pertaining to the internal\n+and external code conversions, and not the conversion descriptors\n+themselves.\n+</para>\n+\n+<para>\n+Definitions for all the required codecvt member functions are provided\n+for this specialization, and usage of codecvt&lt;internal character type,\n+external character type, encoding_state&gt; is consistent with other\n+codecvt usage.\n+</para>\n+\n+</sect2>\n+\n+<sect2 id=\"facet.codecvt.use\" xreflabel=\"facet.codecvt.use\">\n+<title>Use</title>\n+<para>A conversions involving string literal.</para>\n+\n+<programlisting>\n+  typedef codecvt_base::result                  result;\n+  typedef unsigned short                        unicode_t;\n+  typedef unicode_t                             int_type;\n+  typedef char                                  ext_type;\n+  typedef encoding_state                          state_type;\n+  typedef codecvt&lt;int_type, ext_type, state_type&gt; unicode_codecvt;\n+\n+  const ext_type*       e_lit = \"black pearl jasmine tea\";\n+  int                   size = strlen(e_lit);\n+  int_type              i_lit_base[24] = \n+  { 25088, 27648, 24832, 25344, 27392, 8192, 28672, 25856, 24832, 29184, \n+    27648, 8192, 27136, 24832, 29440, 27904, 26880, 28160, 25856, 8192, 29696,\n+    25856, 24832, 2560\n+  };\n+  const int_type*       i_lit = i_lit_base;\n+  const ext_type*       efrom_next;\n+  const int_type*       ifrom_next;\n+  ext_type*             e_arr = new ext_type[size + 1];\n+  ext_type*             eto_next;\n+  int_type*             i_arr = new int_type[size + 1];\n+  int_type*             ito_next;\n+\n+  // construct a locale object with the specialized facet.\n+  locale                loc(locale::classic(), new unicode_codecvt);\n+  // sanity check the constructed locale has the specialized facet.\n+  VERIFY( has_facet&lt;unicode_codecvt&gt;(loc) );\n+  const unicode_codecvt&amp; cvt = use_facet&lt;unicode_codecvt&gt;(loc); \n+  // convert between const char* and unicode strings\n+  unicode_codecvt::state_type state01(\"UNICODE\", \"ISO_8859-1\");\n+  initialize_state(state01);\n+  result r1 = cvt.in(state01, e_lit, e_lit + size, efrom_next, \n+                     i_arr, i_arr + size, ito_next);\n+  VERIFY( r1 == codecvt_base::ok );\n+  VERIFY( !int_traits::compare(i_arr, i_lit, size) ); \n+  VERIFY( efrom_next == e_lit + size );\n+  VERIFY( ito_next == i_arr + size );\n+</programlisting>\n+\n+</sect2>\n+\n+<sect2 id=\"facet.codecvt.future\" xreflabel=\"facet.codecvt.future\">\n+<title>Future</title>\n+<itemizedlist>\n+<listitem>\n+  <para>\n+   a. things that are sketchy, or remain unimplemented:\n+      do_encoding, max_length and length member functions\n+      are only weakly implemented. I have no idea how to do\n+      this correctly, and in a generic manner.  Nathan?\n+</para>\n+</listitem>\n+\n+<listitem>\n+  <para>\n+   b. conversions involving std::string\n+  </para>\n+   <itemizedlist>\n+      <listitem><para>\n+      how should operators != and == work for string of\n+      different/same encoding?\n+      </para></listitem>\n+\n+      <listitem><para>\n+      what is equal? A byte by byte comparison or an\n+      encoding then byte comparison?\n+      </para></listitem>\n+      \n+      <listitem><para>\n+      conversions between narrow, wide, and unicode strings\n+      </para></listitem>\n+   </itemizedlist>\n+</listitem>\n+<listitem><para>\n+   c. conversions involving std::filebuf and std::ostream\n+</para>\n+   <itemizedlist>\n+      <listitem><para>\n+      how to initialize the state object in a\n+      standards-conformant manner?\n+      </para></listitem>\n+\n+                <listitem><para>\n+      how to synchronize the &quot;C&quot; and &quot;C++&quot;\n+      conversion information?\n+      </para></listitem>\n+\n+                <listitem><para>\n+      wchar_t/char internal buffers and conversions between\n+      internal/external buffers?\n+      </para></listitem>\n+   </itemizedlist>\n+</listitem>\n+</itemizedlist>\n+</sect2>\n+\n+\n+<bibliography id=\"facet.codecvt.biblio\" xreflabel=\"facet.codecvt.biblio\">\n+<title>Bibliography</title>\n+\n+  <biblioentry>\n+    <title>\n+      The GNU C Library\n+    </title>\n+\n+    <author>\n+      <surname>McGrath</surname>\n+      <firstname>Roland</firstname>\n+    </author>\n+    <author>\n+      <surname>Drepper</surname>\n+      <firstname>Ulrich</firstname>\n+    </author>\n+\n+    <copyright>\n+      <year>2007</year>\n+      <holder>FSF</holder>\n+    </copyright>\n+    <pagenums>Chapters 6 Character Set Handling and 7 Locales and Internationalization</pagenums>\n+\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      Correspondence\n+    </title>\n+\n+    <author>\n+      <surname>Drepper</surname>\n+      <firstname>Ulrich</firstname>\n+    </author>\n+\n+    <copyright>\n+      <year>2002</year>\n+      <holder></holder>\n+    </copyright>\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      ISO/IEC 14882:1998 Programming languages - C++\n+    </title>\n+\n+    <copyright>\n+      <year>1998</year>\n+      <holder>ISO</holder>\n+    </copyright>\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      ISO/IEC 9899:1999 Programming languages - C\n+    </title>\n+\n+    <copyright>\n+      <year>1999</year>\n+      <holder>ISO</holder>\n+    </copyright>\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      System Interface Definitions, Issue 6 (IEEE Std. 1003.1-200x)\n+    </title>\n+\n+    <copyright>\n+      <year>1999</year>\n+      <holder>\n+      The Open Group/The Institute of Electrical and Electronics Engineers, Inc.</holder>\n+    </copyright>\n+\n+    <biblioid>\n+      <ulink url=\"http://www.opennc.org/austin/docreg.html\">\n+      </ulink>\n+    </biblioid>\n+\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      The C++ Programming Language, Special Edition\n+    </title>\n+    \n+    <author>\n+      <surname>Stroustrup</surname>\n+      <firstname>Bjarne</firstname>\n+    </author>\n+\n+    <copyright>\n+      <year>2000</year>\n+      <holder>Addison Wesley, Inc.</holder>\n+    </copyright>\n+    <pagenums>Appendix D</pagenums>\n+\n+    <publisher>\n+      <publishername>\n+\tAddison Wesley\n+      </publishername>\n+    </publisher>\n+\n+  </biblioentry> \n+\n+\n+  <biblioentry>\n+    <title>\n+      Standard C++ IOStreams and Locales\n+    </title>\n+    <subtitle>\n+      Advanced Programmer's Guide and Reference\n+    </subtitle>\n+    \n+    <author>\n+      <surname>Langer</surname>\n+      <firstname>Angelika</firstname>\n+    </author>\n+\n+    <author>\n+      <surname>Kreft</surname>\n+      <firstname>Klaus</firstname>\n+    </author>\n+\n+    <copyright>\n+      <year>2000</year>\n+      <holder>Addison Wesley Longman, Inc.</holder>\n+    </copyright>\n+\n+    <publisher>\n+      <publishername>\n+\tAddison Wesley Longman\n+      </publishername>\n+    </publisher>\n+\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      A brief description of Normative Addendum 1\n+    </title>\n+\n+    <author>\n+      <surname>Feather</surname>\n+      <firstname>Clive</firstname>\n+    </author>\n+\n+    <pagenums>Extended Character Sets</pagenums>\n+    <biblioid>\n+      <ulink url=\"http://www.lysator.liu.se/c/na1.html\">\n+      </ulink>\n+    </biblioid>\n+\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      The Unicode HOWTO\n+    </title>\n+\n+    <author>\n+      <surname>Haible</surname>\n+      <firstname>Bruno</firstname>\n+    </author>\n+\n+    <biblioid>\n+      <ulink url=\"ftp://ftp.ilog.fr/pub/Users/haible/utf8/Unicode-HOWTO.html\">\n+      </ulink>\n+    </biblioid>\n+\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      UTF-8 and Unicode FAQ for Unix/Linux\n+    </title>\n+\n+    <author>\n+      <surname>Khun</surname>\n+      <firstname>Markus</firstname>\n+    </author>\n+\n+    <biblioid>\n+      <ulink url=\"http://www.cl.cam.ac.uk/~mgk25/unicode.html\">\n+      </ulink>\n+    </biblioid>\n+\n+  </biblioentry> \n+\n+\n+</bibliography>\n+\n+</sect1>\n\\ No newline at end of file"}, {"sha": "5740e4243737d88d5194b29115d56a72d5684bae", "filename": "libstdc++-v3/doc/xml/manual/concurrency.xml", "status": "added", "additions": 334, "deletions": 0, "changes": 334, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconcurrency.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconcurrency.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconcurrency.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,334 @@\n+<?xml version='1.0'?>\n+<!DOCTYPE chapter PUBLIC \"-//OASIS//DTD DocBook XML V4.5//EN\" \n+ \"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\" \n+[ ]>\n+\n+<chapter id=\"manual.ext.concurrency\" xreflabel=\"Concurrency Extensions\">\n+<?dbhtml filename=\"concurrency.html\"?>\n+\n+<chapterinfo>\n+  <keywordset>\n+    <keyword>\n+      ISO C++\n+    </keyword>\n+    <keyword>\n+      library\n+    </keyword>\n+  </keywordset>\n+</chapterinfo>\n+\n+<title>Concurrency</title>\n+\n+<sect1 id=\"manual.ext.concurrency.design\" xreflabel=\"Design\">\n+  <title>Design</title>\n+\n+  <sect2 id=\"manual.ext.concurrency.design.threads\" xreflabel=\"Threads API\">\n+    <title>Interface to Locks and Mutexes</title>\n+\n+<para>The file &lt;ext/concurrence.h&gt; contains all the higher-level\n+constructs for playing with threads. In contrast to the atomics layer,\n+the concurrence layer consists largely of types. All types are defined within <code>namespace __gnu_cxx</code>.\n+</para>\n+\n+<para>\n+These types can be used in a portable manner, regardless of the\n+specific environment. They are carefully designed to provide optimum\n+efficiency and speed, abstracting out underlying thread calls and\n+accesses when compiling for single-threaded situations (even on hosts\n+that support multiple threads.)\n+</para>\n+\n+<para>The enumerated type <code>_Lock_policy</code> details the set of\n+available locking\n+policies: <code>_S_single</code>, <code>_S_mutex</code>,\n+and <code>_S_atomic</code>.\n+</para>\n+\n+<itemizedlist>\n+<listitem><para><code>_S_single</code></para>\n+<para>Indicates single-threaded code that does not need locking.\n+</para>\n+\n+</listitem>\n+<listitem><para><code>_S_mutex</code></para>\n+<para>Indicates multi-threaded code using thread-layer abstractions.\n+</para>\n+</listitem>\n+<listitem><para><code>_S_atomic</code></para>\n+<para>Indicates multi-threaded code using atomic operations.\n+</para>\n+</listitem>\n+</itemizedlist>\n+\n+<para>The compile-time constant <code>__default_lock_policy</code> is set\n+to one of the three values above, depending on characteristics of the\n+host environment and the current compilation flags.\n+</para>\n+\n+<para>Two more datatypes make up the rest of the\n+interface: <code>__mutex</code>, and <code>__scoped_lock</code>.\n+</para>\n+\n+<para>\n+</para>\n+\n+<para>The scoped lock idiom is well-discussed within the C++\n+community. This version takes a <code>__mutex</code> reference, and\n+locks it during construction of <code>__scoped_locke</code> and\n+unlocks it during destruction. This is an efficient way of locking\n+critical sections, while retaining exception-safety.\n+</para>\n+  </sect2>\n+\n+  <sect2 id=\"manual.ext.concurrency.design.atomics\" xreflabel=\"Atomic API\">\n+    <title>Interface to Atomic Functions</title>\n+\n+\n+<para>\n+Two functions and one type form the base of atomic support. \n+</para>\n+\n+\n+<para>The type <code>_Atomic_word</code> is a signed integral type\n+supporting atomic operations.\n+</para>\n+\n+<para>\n+The two functions functions are:\n+</para>\n+\n+<programlisting>\n+_Atomic_word\n+__exchange_and_add_dispatch(volatile _Atomic_word*, int);\n+\n+void\n+__atomic_add_dispatch(volatile _Atomic_word*, int);\n+</programlisting>\n+\n+<para>Both of these functions are declared in the header file\n+&lt;ext/atomicity.h&gt;, and are in <code>namespace __gnu_cxx</code>.\n+</para>\n+\n+<itemizedlist>\n+<listitem><para>\n+<code>\n+__exchange_and_add_dispatch\n+</code>\n+</para>\n+<para>Adds the second argument's value to the first argument. Returns the old value.\n+</para>\n+</listitem>\n+<listitem><para>\n+<code>\n+__atomic_add_dispatch\n+</code>\n+</para>\n+<para>Adds the second argument's value to the first argument. Has no return value.\n+</para>\n+</listitem>\n+</itemizedlist>\n+\n+<para>\n+These functions forward to one of several specialized helper\n+functions, depending on the circumstances. For instance, \n+</para>\n+\n+<para>\n+<code>\n+__exchange_and_add_dispatch\n+</code>\n+</para>\n+\n+<para>\n+Calls through to either of:\n+</para>\n+\n+<itemizedlist>\n+<listitem><para><code>__exchange_and_add</code>\n+</para>\n+<para>Multi-thread version. Inlined if compiler-generated builtin atomics\n+can be used, otherwise resolved at link time to a non-builtin code\n+sequence.\n+</para>\n+</listitem>\n+\n+<listitem><para><code>__exchange_and_add_single</code> \n+</para>\n+<para>Single threaded version. Inlined.</para>\n+</listitem>\n+</itemizedlist>\n+\n+<para>However, only <code>__exchange_and_add_dispatch</code>\n+and <code>__atomic_add_dispatch</code> should be used. These functions\n+can be used in a portable manner, regardless of the specific\n+environment. They are carefully designed to provide optimum efficiency\n+and speed, abstracting out atomic accesses when they are not required\n+(even on hosts that support compiler intrinsics for atomic\n+operations.)\n+</para>\n+\n+<para>\n+In addition, there are two macros\n+</para>\n+\n+<para>\n+<code>\n+_GLIBCXX_READ_MEM_BARRIER \n+</code>\n+</para>\n+<para>\n+<code>\n+_GLIBCXX_WRITE_MEM_BARRIER \n+</code>\n+</para>\n+\n+<para>\n+Which expand to the appropriate write and read barrier required by the\n+host hardware and operating system.\n+</para>\n+  </sect2>\n+\n+</sect1>\n+\n+\n+<sect1 id=\"manual.ext.concurrency.impl\" xreflabel=\"Implementation\">\n+  <title>Implementation</title>\n+  <sect2 id=\"manual.ext.concurrency.impl.atomic_fallbacks\" xreflabel=\"Atomic F\">\n+    <title>Using Builitin Atomic Functions</title>\n+    \n+<para>The functions for atomic operations described above are either\n+implemented via compiler intrinsics (if the underlying host is\n+capable) or by library fallbacks.</para>\n+\n+<para>Compiler intrinsics (builtins) are always preferred.  However, as\n+the compiler builtins for atomics are not universally implemented,\n+using them directly is problematic, and can result in undefined\n+function calls. (An example of an undefined symbol from the use\n+of <code>__sync_fetch_and_add</code> on an unsupported host is a\n+missing reference to <code>__sync_fetch_and_add_4</code>.)\n+</para>\n+\n+<para>In addition, on some hosts the compiler intrinsics are enabled\n+conditionally, via the <code>-march</code> command line flag. This makes\n+usage vary depending on the target hardware and the flags used during\n+compile.\n+</para>\n+\n+<para> If builtins are possible, <code>_GLIBCXX_ATOMIC_BUILTINS</code>\n+will be defined.\n+</para>\n+\n+\n+<para>For the following hosts, intrinsics are enabled by default.\n+</para>\n+\n+<itemizedlist>\n+  <listitem><para>alpha</para></listitem>\n+  <listitem><para>ia64</para></listitem>\n+  <listitem><para>powerpc</para></listitem>\n+  <listitem><para>s390</para></listitem>\n+</itemizedlist>\n+\n+<para>For others, some form of <code>-march</code> may work. On\n+non-ancient x86 hardware, <code>-march=native</code> usually does the\n+trick.</para>\n+\n+<para> For hosts without compiler intrinsics, but with capable\n+hardware, hand-crafted assembly is selected. This is the case for the following hosts:\n+</para>\n+\n+<itemizedlist>\n+  <listitem><para>cris</para></listitem>\n+  <listitem><para>hppa</para></listitem>\n+  <listitem><para>i386</para></listitem>\n+  <listitem><para>i486</para></listitem>\n+  <listitem><para>m48k</para></listitem>\n+  <listitem><para>mips</para></listitem>\n+  <listitem><para>sparc</para></listitem>\n+</itemizedlist>\n+\n+<para>And for the rest, a simulated atomic lock via pthreads.\n+</para>\n+\n+<para> Detailed information about compiler intrinsics for atomic operations can be found in the GCC <ulink url=\"http://gcc.gnu.org/onlinedocs/gcc/Atomic-Builtins.html\"> documentation</ulink>.\n+</para>\n+\n+<para> More details on the library fallbacks from the porting <ulink url=\"http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/porting.html#Thread%20safety\">section</ulink>.\n+</para>\n+\n+\n+  </sect2>\n+  <sect2 id=\"manual.ext.concurrency.impl.thread\" xreflabel=\"Pthread\">\n+    <title>Thread Abstraction</title>\n+\n+<para>A thin layer above IEEE 1003.1 (ie pthreads) is used to abstract\n+the thread interface for GCC. This layer is called \"gthread,\" and is\n+comprised of one header file that wraps the host's default thread layer with\n+a POSIX-like interface.\n+</para>\n+\n+<para> The file &lt;gthr-default.h&gt; points to the deduced wrapper for\n+the current host. In libstdc++ implementation files,\n+&lt;bits/gthr.h&gt; is used to select the proper gthreads file.\n+</para>\n+\n+<para>Within libstdc++ sources, all calls to underlying thread functionality\n+use this layer. More detail as to the specific interface can be found in the source <ulink url=\"http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/gthr_8h-source.html\">documentation</ulink>.\n+</para>\n+\n+<para>By design, the gthread layer is interoperable with the types,\n+functions, and usage found in the usual &lt;pthread.h&gt; file,\n+including <code>pthread_t</code>, <code>pthread_once_t</code>, <code>pthread_create</code>,\n+etc.\n+</para>\n+\n+  </sect2>  \n+</sect1>\n+\n+<sect1 id=\"manual.ext.concurrency.use\" xreflabel=\"Use\">\n+\n+  <title>Use</title>\n+\n+<para>Typical usage of the last two constructs is demonstrated as follows:\n+</para>\n+\n+<programlisting>\n+#include &lt;ext/concurrence.h&gt;\n+\n+namespace\n+{\n+  __gnu_cxx::__mutex safe_base_mutex;\n+} // anonymous namespace\n+\n+namespace other\n+{\n+  void\n+  foo()\n+  {\n+    __gnu_cxx::__scoped_lock sentry(safe_base_mutex);\n+    for (int i = 0; i &lt; max;  ++i)\n+      {\n+\t_Safe_iterator_base* __old = __iter;\n+\t__iter = __iter-&lt;_M_next;\n+\t__old-&lt;_M_detach_single();\n+      }\n+}\n+</programlisting>\n+\n+<para>In this sample code, an anonymous namespace is used to keep\n+the <code>__mutex</code> private to the compilation unit,\n+and <code>__scoped_lock</code> is used to guard access to the critical\n+section within the for loop, locking the mutex on creation and freeing\n+the mutex as control moves out of this block.\n+</para>\n+\n+<para>Several exception classes are used to keep track of\n+concurrence-related errors. These classes\n+are: <code>__concurrence_lock_error</code>, <code>__concurrence_unlock_error</code>, <code>__concurrence_wait_error</code>,\n+and <code>__concurrence_broadcast_error</code>.\n+</para>\n+\n+\n+</sect1>\n+\n+</chapter>"}, {"sha": "a47635cd029901d621de0af574cc7d978c95db84", "filename": "libstdc++-v3/doc/xml/manual/configure.xml", "status": "added", "additions": 318, "deletions": 0, "changes": 318, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,318 @@\n+<sect1 id=\"manual.intro.setup.configure\" xreflabel=\"Configuring\">\n+<?dbhtml filename=\"configure.html\"?>\n+ \n+<sect1info>\n+  <keywordset>\n+    <keyword>\n+      ISO C++\n+    </keyword>\n+    <keyword>\n+      configure\n+    </keyword>\n+    <keyword>\n+      options\n+    </keyword>\n+  </keywordset>\n+</sect1info>\n+\n+<title>Configure</title>\n+\n+<para>\n+  Here are some of the non-obvious options to libstdc++'s configure.\n+  Keep in mind that\n+   <!-- This SECnn should be the \"Choosing Package Options\" section. -->\n+   <ulink url=\"http://www.gnu.org/software/autoconf/manual/autoconf-2.57/html_node/autoconf_131.html#SEC131\">they\n+   all have opposite forms as well</ulink>\n+   (enable/disable and with/without).  The defaults are for <emphasis>current\n+   development sources</emphasis>, which may be different than those for\n+   released versions.\n+</para>\n+<para>The canonical way to find out the configure options that are\n+   available for a given set of libstdc++ sources is to go to the\n+   source directory and then type:<code>  ./configure --help</code>\n+</para>\n+\n+<variablelist>\n+ <varlistentry><term><code>--enable-multilib</code>[default]</term>\n+ <listitem><para>This is part of the generic multilib support for building cross\n+        compilers.  As such, targets like &quot;powerpc-elf&quot; will have\n+        libstdc++ built many different ways:  &quot;-msoft-float&quot;\n+        and not, etc.  A different libstdc++ will be built for each of\n+        the different multilib versions.  This option is on by default.\n+     </para>\n+ </listitem></varlistentry>\n+\n+ <varlistentry><term><code>--enable-sjlj-exceptions</code></term>\n+ <listitem><para>Forces old, set-jump/long-jump exception handling model.  If\n+        at all possible, the new, frame unwinding exception handling routines\n+        should be used instead, as they significantly reduce both\n+        runtime memory usage and executable size. This option can\n+        change the library ABI.\n+     </para>\n+ </listitem></varlistentry>\n+\n+ <varlistentry><term><code>--enable-version-specific-runtime-libs</code></term>\n+ <listitem><para>Specify that run-time libraries should be installed in the\n+        compiler-specific subdirectory (i.e.,\n+        <code>${libdir}/gcc-lib/${target_alias}/${gcc_version}</code>)\n+        instead of <code>${libdir}</code>.  This option is useful if you\n+        intend to use several versions of gcc in parallel.  In addition,\n+        libstdc++'s include files will be installed in\n+        <code>${libdir}/gcc-lib/${target_alias}/${gcc_version}/include/g++</code>,\n+        unless you also specify\n+       <literal>--with-gxx-include-dir=<filename class=\"directory\">dirname</filename></literal> during configuration.\n+     </para>\n+ </listitem></varlistentry>\n+\n+ <varlistentry><term><code>--with-gxx-include-dir=&lt;include-files dir&gt;</code></term>\n+ <listitem><para>Adds support for named libstdc++ include directory.  For instance,\n+        the following puts all the libstdc++ headers into a directory\n+        called &quot;2.97-20001008&quot; instead of the usual\n+        &quot;c++/(version)&quot;.\n+     </para>\n+        <programlisting>\n+   --with-gxx-include-dir=/foo/H-x86-gcc-3-c-gxx-inc/include/2.97-20001008</programlisting> </listitem></varlistentry>\n+\n+ <varlistentry><term><code>--enable-cstdio</code></term>\n+ <listitem><para>This is an abbreviated form of <code>'--enable-cstdio=stdio'</code>\n+        (described next). This option can change the library ABI.\n+     </para>\n+ </listitem></varlistentry>\n+\n+ <varlistentry><term><code>--enable-cstdio=OPTION</code></term>\n+ <listitem><para>Select a target-specific I/O package. At the moment, the only\n+        choice is to use 'stdio', a generic &quot;C&quot; abstraction.\n+        The default is 'stdio'. \n+     </para>\n+ </listitem></varlistentry>\n+\n+ <varlistentry><term><code>--enable-clocale</code></term>\n+ <listitem><para>This is an abbreviated form of <code>'--enable-clocale=generic'</code>\n+        (described next). This option can change the library ABI.\n+     </para>\n+ </listitem></varlistentry>\n+\n+ <varlistentry><term><code>--enable-clocale=OPTION</code></term>\n+ <listitem><para>Select a target-specific underlying locale package.  The\n+        choices are 'ieee_1003.1-2001' to specify an X/Open, Standard Unix\n+        (IEEE Std. 1003.1-2001) model based on langinfo/iconv/catgets,\n+        'gnu' to specify a model based on functionality from the GNU C\n+        library (langinfo/iconv/gettext) (from <ulink url=\"http://sources.redhat.com/glibc/\">glibc</ulink>, the GNU C\n+        library), or 'generic' to use a generic &quot;C&quot;\n+        abstraction which consists of &quot;C&quot; locale info.\n+     </para>\n+\n+     <para>As part of the configuration process, the \"C\" library is\n+      probed both for sufficient vintage, and installed locale\n+      data. If either of these elements are not present, the C++\n+      locale model default to 'generic.' On glibc-based systems of\n+      version 2.2.5 and above with installed locale files, 'gnu' is\n+      automatically selected.\n+     </para>\n+ </listitem></varlistentry>\n+\n+ <varlistentry><term><code>--enable-libstdcxx-allocator</code></term>\n+ <listitem><para>This is an abbreviated form of\n+        <code>'--enable-libstdcxx-allocator=auto'</code> (described\n+        next). This option can change the library ABI.\n+     </para>\n+ </listitem></varlistentry>\n+\n+ <varlistentry><term><code>--enable-libstdcxx-allocator=OPTION  </code></term>\n+ <listitem><para>Select a target-specific underlying std::allocator.  The\n+        choices are 'new' to specify a wrapper for new, 'malloc' to\n+        specify a wrapper for malloc, 'mt' for a fixed power of two allocator\n+        (<ulink url=\"ext/mt_allocator.html\">documented</ulink> under extensions),\n+\t'pool' for the SGI pooled allocator or 'bitmap' for a bitmap allocator.\n+\tThis option can change the library ABI.\n+     </para>\n+ </listitem></varlistentry>\n+\n+ <varlistentry><term><code>--enable-cheaders=OPTION</code></term>\n+ <listitem><para>This allows the user to define the approach taken for C header\n+        compatibility with C++. Options are c, c_std, and c_global.\n+        These correspond to the source directory's include/c,\n+        include/c_std, and include/c_global, and may also include\n+        include/c_compatibility.  The default is c_global.\n+     </para>\n+ </listitem></varlistentry>\n+\n+ <varlistentry><term><code>--enable-threads</code></term>\n+ <listitem><para>This is an abbreviated form of <code>'--enable-threads=yes'</code>\n+        (described next). This option can change the library ABI.\n+     </para>\n+ </listitem></varlistentry>\n+\n+ <varlistentry><term><code>--enable-threads=OPTION</code></term>\n+ <listitem><para>Select a threading library.  A full description is given in the\n+        general <ulink url=\"http://gcc.gnu.org/install/configure.html\">compiler\n+        configuration instructions</ulink>.\n+     </para>\n+ </listitem></varlistentry>\n+\n+ <varlistentry><term><code>--enable-libstdcxx-debug</code></term>\n+ <listitem><para>Build separate debug libraries in addition to what is normally built.\n+        By default, the debug libraries are compiled with \n+        <code> CXXFLAGS='-g3 -O0'</code>\n+        , are installed in <code>${libdir}/debug</code>, and have the\n+        same names and versioning information as the non-debug\n+        libraries. This option is off by default.\n+     </para>\n+     <para>Note this make command, executed in\n+        the build directory, will do much the same thing, without the\n+        configuration difference and without building everything twice: \n+        <code>make CXXFLAGS='-g3 -O0' all</code>\n+     </para>\n+ </listitem></varlistentry>\n+\n+ <varlistentry><term><code>--enable-libstdcxx-debug-flags=FLAGS</code></term>\n+\n+ <listitem><para>This option is only valid when <code> --enable-debug </code>\n+        is also specified, and applies to the debug builds only. With\n+        this option, you can pass a specific string of flags to the\n+        compiler to use when building the debug versions of libstdc++.\n+        FLAGS is a quoted string of options, like\n+     </para>\n+        <programlisting>\n+  --enable-libstdcxx-debug-flags='-g3 -O1 -gdwarf-2'</programlisting>\n+ </listitem></varlistentry>\n+\n+ <varlistentry><term><code>--enable-cxx-flags=FLAGS</code></term>\n+ <listitem><para>With this option, you can pass a string of -f (functionality)\n+        flags to the compiler to use when building libstdc++. This\n+        option can change the library ABI. FLAGS is a quoted string of\n+        options, like\n+     </para>\n+        <programlisting>\n+  --enable-cxx-flags='-fvtable-gc -fomit-frame-pointer -ansi'</programlisting>\n+     <para>\n+        Note that the flags don't necessarily have to all be -f flags,\n+        as shown, but usually those are the ones that will make sense\n+        for experimentation and configure-time overriding.\n+     </para>\n+     <para>The advantage of --enable-cxx-flags over setting CXXFLAGS in\n+        the 'make' environment is that, if files are automatically\n+        rebuilt, the same flags will be used when compiling those files\n+        as well, so that everything matches.\n+     </para>\n+     <para>Fun flags to try might include combinations of\n+     </para>\n+        <programlisting>\n+  -fstrict-aliasing\n+  -fno-exceptions\n+  -ffunction-sections\n+  -fvtable-gc</programlisting>\n+     <para>and opposite forms (-fno-) of the same.  Tell us (the libstdc++\n+        mailing list) if you discover more!\n+     </para>\n+ </listitem></varlistentry>\n+\n+ <varlistentry><term><code>--enable-c99</code></term>\n+ <listitem><para>The &quot;long long&quot; type was introduced in C99, along\n+        with many other functions for wide characters, and math\n+        classification macros, etc.  If enabled, all C99 functions not\n+        specified by the C++ standard will be put into <code>namespace\n+        __gnu_cxx</code>, and then all these names will\n+        be injected into namespace std, so that C99 functions can be\n+        used &quot;as if&quot; they were in the C++ standard (as they\n+        will eventually be in some future revision of the standard,\n+        without a doubt).  By default, C99 support is on, assuming the\n+        configure probes find all the necessary functions and bits\n+        necessary. This option can change the library ABI.\n+    </para>\n+ </listitem></varlistentry>\n+\n+ <varlistentry><term><code>--enable-wchar_t</code>[default]</term>\n+ <listitem><para>Template specializations for the &quot;wchar_t&quot; type are\n+        required for wide character conversion support.  Disabling\n+        wide character specializations may be expedient for initial\n+        porting efforts, but builds only a subset of what is required by\n+        ISO, and is not recommended.  By default, this option is on.\n+        This option can change the library ABI.\n+     </para>\n+ </listitem></varlistentry>\n+\n+ <varlistentry><term><code>--enable-long-long  </code></term>\n+ <listitem><para>The &quot;long long&quot; type was introduced in C99.  It is\n+        provided as a GNU extension to C++98 in g++.  This flag builds\n+        support for &quot;long long&quot; into the library (specialized\n+        templates and the like for iostreams).  This option is on by default:\n+        if enabled, users will have to either use the new-style &quot;C&quot;\n+        headers by default (i.e., &lt;cmath&gt; not &lt;math.h&gt;)\n+        or add appropriate compile-time flags to all compile lines to\n+        allow &quot;C&quot; visibility of this feature (on GNU/Linux,\n+        the flag is -D_ISOC99_SOURCE, which is added automatically via\n+        CPLUSPLUS_CPP_SPEC's addition of _GNU_SOURCE).\n+        This option can change the library ABI. \n+     </para>\n+ </listitem></varlistentry>\n+\n+ <varlistentry><term><code>--enable-fully-dynamic-string</code></term>\n+ <listitem><para>This option enables a special version of basic_string avoiding\n+        the optimization that allocates empty objects in static memory.\n+\tMostly useful together with shared memory allocators, see PR\n+\tlibstdc++/16612 for details.\n+     </para>\n+ </listitem></varlistentry>\n+\n+ <varlistentry><term><code>--enable-concept-checks</code></term>\n+ <listitem><para>This turns on additional compile-time checks for instantiated\n+        library templates, in the form of specialized templates,\n+        <ulink url=\"19_diagnostics/howto.html#3\">described here</ulink>.  They\n+        can help users discover when they break the rules of the STL, before\n+        their programs run.\n+     </para>\n+ </listitem></varlistentry>\n+\n+ <varlistentry><term><code>--enable-symvers[=style]</code></term>\n+\n+ <listitem><para>In 3.1 and later, tries to turn on symbol versioning in the\n+        shared library (if a shared library has been\n+        requested). Values for 'style' that are currently supported\n+        are 'gnu', 'gnu-versioned-namespace', 'darwin', and\n+        'darwin-export'. Both gnu- options require that a recent\n+        version of the GNU linker be in use. Both darwin options are\n+        equivalent. With no style given, the configure script will try\n+        to guess correct defaults for the host system, probe to see if\n+        additional requirements are necessary and present for\n+        activation, and if so, will turn symbol versioning on. This\n+        option can change the library ABI.\n+     </para>\n+\n+ </listitem></varlistentry>\n+\n+ <varlistentry><term><code>--enable-visibility</code></term>\n+ <listitem><para> In 4.2 and later, enables or disables visibility attributes.\n+        If enabled (as by default), and the compiler seems capable of\n+        passing the simple sanity checks thrown at it, adjusts items\n+        in namespace std, namespace std::tr1, and namespace __gnu_cxx\n+        so that -fvisibility options work.\n+    </para>\n+ </listitem></varlistentry>\n+\n+ <varlistentry><term><code>--enable-libstdcxx-pch</code></term>\n+ <listitem><para>In 3.4 and later, tries to turn on the generation of\n+        stdc++.h.gch, a pre-compiled file including all the standard\n+        C++ includes. If enabled (as by default), and the compiler\n+        seems capable of passing the simple sanity checks thrown at\n+        it, try to build stdc++.h.gch as part of the make process. \n+        In addition, this generated file is used later on (by appending <code>\n+        --include bits/stdc++.h </code> to CXXFLAGS) when running the\n+        testsuite.\n+     </para>\n+ </listitem></varlistentry>\n+\n+ <varlistentry><term><code>--disable-hosted-libstdcxx</code></term>\n+ <listitem>\n+   <para>\n+     By default, a complete <emphasis>hosted</emphasis> C++ library is\n+     built.  The C++ Standard also describes a\n+     <emphasis>freestanding</emphasis> environment, in which only a\n+     minimal set of headers are provided.  This option builds such an\n+     environment.\n+     </para>\n+ </listitem></varlistentry>\n+</variablelist>\n+\n+\n+</sect1>\n\\ No newline at end of file"}, {"sha": "a13d52734a42e1821b626dc942b6c8b6e311f82c", "filename": "libstdc++-v3/doc/xml/manual/containers.xml", "status": "added", "additions": 441, "deletions": 0, "changes": 441, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fcontainers.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fcontainers.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fcontainers.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,441 @@\n+<?xml version='1.0'?>\n+<!DOCTYPE part PUBLIC \"-//OASIS//DTD DocBook XML V4.5//EN\" \n+ \"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\" \n+[ ]>\n+\n+<part id=\"manual.containers\" xreflabel=\"Containers\">\n+<?dbhtml filename=\"containers.html\"?>\n+ \n+<partinfo>\n+  <keywordset>\n+    <keyword>\n+      ISO C++\n+    </keyword>\n+    <keyword>\n+      library\n+    </keyword>\n+  </keywordset>\n+</partinfo>\n+\n+<title>Containers</title>\n+\n+<!-- Chapter 01 : Sequences -->\n+<chapter id=\"manual.containers.sequences\" xreflabel=\"Sequences\">\n+  <title>Sequences</title>\n+\n+<sect1 id=\"containers.sequences.list\" xreflabel=\"list\">\n+  <title>list</title>\n+  <sect2 id=\"sequences.list.size\" xreflabel=\"list::size() is O(n)\">\n+    <title>list::size() is O(n)</title>\n+   <para>\n+     Yes it is, and that's okay.  This is a decision that we preserved\n+     when we imported SGI's STL implementation.  The following is\n+     quoted from <ulink\n+     url=\"http://www.sgi.com/tech/stl/FAQ.html\">their FAQ</ulink>:\n+   </para>\n+   <blockquote>\n+     <para>\n+       The size() member function, for list and slist, takes time\n+       proportional to the number of elements in the list.  This was a\n+       deliberate tradeoff.  The only way to get a constant-time\n+       size() for linked lists would be to maintain an extra member\n+       variable containing the list's size.  This would require taking\n+       extra time to update that variable (it would make splice() a\n+       linear time operation, for example), and it would also make the\n+       list larger.  Many list algorithms don't require that extra\n+       word (algorithms that do require it might do better with\n+       vectors than with lists), and, when it is necessary to maintain\n+       an explicit size count, it's something that users can do\n+       themselves.\n+     </para>\n+     <para>\n+       This choice is permitted by the C++ standard. The standard says\n+       that size() <quote>should</quote> be constant time, and\n+       <quote>should</quote> does not mean the same thing as\n+       <quote>shall</quote>.  This is the officially recommended ISO\n+       wording for saying that an implementation is supposed to do\n+       something unless there is a good reason not to.\n+      </para>\n+      <para>\n+\tOne implication of linear time size(): you should never write\n+      </para>\n+         <programlisting>\n+         if (L.size() == 0)\n+             ...\n+\t </programlisting>\n+\n+\t <para>\n+         Instead, you should write\n+\t </para>\n+\n+         <programlisting>\n+         if (L.empty())\n+             ...\n+\t </programlisting>\n+   </blockquote>\n+  </sect2>\n+</sect1>\n+\n+<sect1 id=\"containers.sequences.vector\" xreflabel=\"vector\">\n+  <title>vector</title>\n+  <para>\n+  </para>\n+  <sect2 id=\"sequences.vector.management\" xreflabel=\"Space Overhead Management\">\n+    <title>Space Overhead Management</title>\n+   <para>\n+     In <ulink\n+     url=\"http://gcc.gnu.org/ml/libstdc++/2002-04/msg00105.html\">this\n+     message to the list</ulink>, Daniel Kostecky announced work on an\n+     alternate form of <code>std::vector</code> that would support\n+     hints on the number of elements to be over-allocated.  The design\n+     was also described, along with possible implementation choices.\n+   </para>\n+   <para>\n+     The first two alpha releases were announced <ulink\n+     url=\"http://gcc.gnu.org/ml/libstdc++/2002-07/msg00048.html\">here</ulink>\n+     and <ulink\n+     url=\"http://gcc.gnu.org/ml/libstdc++/2002-07/msg00111.html\">here</ulink>.\n+     The releases themselves are available at\n+      <ulink url=\"http://www.kotelna.sk/dk/sw/caphint/\">\n+      http://www.kotelna.sk/dk/sw/caphint/</ulink>.\n+   </para>\n+\n+  </sect2></sect1>\n+</chapter>\n+\n+<!-- Chapter 02 : Associative -->\n+<chapter id=\"manual.containers.associative\" xreflabel=\"Associative\">\n+  <title>Associative</title>\n+\n+  <sect1 id=\"containers.associative.insert_hints\" xreflabel=\"Insertion Hints\">\n+    <title>Insertion Hints</title>\n+   <para>\n+     Section [23.1.2], Table 69, of the C++ standard lists this\n+     function for all of the associative containers (map, set, etc):\n+   </para>\n+   <programlisting>\n+      a.insert(p,t);\n+   </programlisting>\n+   <para>\n+     where 'p' is an iterator into the container 'a', and 't' is the\n+     item to insert.  The standard says that <quote><code>t</code> is\n+     inserted as close as possible to the position just prior to\n+     <code>p</code>.</quote> (Library DR #233 addresses this topic,\n+     referring to <ulink\n+     url='http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1780.html'>N1780</ulink>.\n+     Since version 4.2 GCC implements the resolution to DR 233, so\n+     that insertions happen as close as possible to the hint. For\n+     earlier releases the hint was only used as described below.\n+   </para>\n+   <para>\n+     Here we'll describe how the hinting works in the libstdc++\n+     implementation, and what you need to do in order to take\n+     advantage of it.  (Insertions can change from logarithmic\n+     complexity to amortized constant time, if the hint is properly\n+     used.)  Also, since the current implementation is based on the\n+     SGI STL one, these points may hold true for other library\n+     implementations also, since the HP/SGI code is used in a lot of\n+     places.\n+   </para>\n+   <para>\n+     In the following text, the phrases <emphasis>greater\n+     than</emphasis> and <emphasis>less than</emphasis> refer to the\n+     results of the strict weak ordering imposed on the container by\n+     its comparison object, which defaults to (basically)\n+     <quote>&lt;</quote>.  Using those phrases is semantically sloppy,\n+     but I didn't want to get bogged down in syntax.  I assume that if\n+     you are intelligent enough to use your own comparison objects,\n+     you are also intelligent enough to assign <quote>greater</quote>\n+     and <quote>lesser</quote> their new meanings in the next\n+     paragraph.  *grin*\n+   </para>\n+   <para>\n+     If the <code>hint</code> parameter ('p' above) is equivalent to:\n+   </para>\n+     <itemizedlist>\n+      <listitem>\n+\t<para>\n+\t  <code>begin()</code>, then the item being inserted should\n+\t  have a key less than all the other keys in the container.\n+\t  The item will be inserted at the beginning of the container,\n+\t  becoming the new entry at <code>begin()</code>.\n+      </para>\n+      </listitem>\n+      <listitem>\n+\t<para>\n+\t  <code>end()</code>, then the item being inserted should have\n+\t  a key greater than all the other keys in the container.  The\n+\t  item will be inserted at the end of the container, becoming\n+\t  the new entry at <code>end()</code>.  \n+      </para>\n+      </listitem>\n+      <listitem>\n+\t<para>\n+\t  neither <code>begin()</code> nor <code>end()</code>, then:\n+\t  Let <code>h</code> be the entry in the container pointed to\n+\t  by <code>hint</code>, that is, <code>h = *hint</code>.  Then\n+\t  the item being inserted should have a key less than that of\n+\t  <code>h</code>, and greater than that of the item preceding\n+\t  <code>h</code>.  The new item will be inserted between\n+\t  <code>h</code> and <code>h</code>'s predecessor.\n+\t  </para>\n+      </listitem>\n+     </itemizedlist>\n+   <para>\n+     For <code>multimap</code> and <code>multiset</code>, the\n+     restrictions are slightly looser: <quote>greater than</quote>\n+     should be replaced by <quote>not less than</quote>and <quote>less\n+     than</quote> should be replaced by <quote>not greater\n+     than.</quote> (Why not replace greater with\n+     greater-than-or-equal-to?  You probably could in your head, but\n+     the mathematicians will tell you that it isn't the same thing.)\n+   </para>\n+   <para>\n+     If the conditions are not met, then the hint is not used, and the\n+     insertion proceeds as if you had called <code> a.insert(t)\n+     </code> instead.  (<emphasis>Note </emphasis> that GCC releases\n+     prior to 3.0.2 had a bug in the case with <code>hint ==\n+     begin()</code> for the <code>map</code> and <code>set</code>\n+     classes.  You should not use a hint argument in those releases.)\n+   </para>\n+   <para>\n+     This behavior goes well with other containers'\n+     <code>insert()</code> functions which take an iterator: if used,\n+     the new item will be inserted before the iterator passed as an\n+     argument, same as the other containers.\n+   </para>\n+   <para>\n+     <emphasis>Note </emphasis> also that the hint in this\n+     implementation is a one-shot.  The older insertion-with-hint\n+     routines check the immediately surrounding entries to ensure that\n+     the new item would in fact belong there.  If the hint does not\n+     point to the correct place, then no further local searching is\n+     done; the search begins from scratch in logarithmic time.\n+   </para>\n+  </sect1>\n+\n+\n+  <sect1 id=\"containers.associative.bitset\" xreflabel=\"bitset\">\n+    <title>bitset</title>\n+    <sect2 id=\"associative.bitset.size_variable\" xreflabel=\"Variable\">\n+      <title>Size Variable</title>\n+      <para>\n+\tNo, you cannot write code of the form\n+      </para>\n+      <!-- Careful, the leading spaces in PRE show up directly. -->\n+   <programlisting>\n+      #include &lt;bitset&gt;\n+\n+      void foo (size_t n)\n+      {\n+          std::bitset&lt;n&gt;   bits;\n+          ....\n+      } \n+   </programlisting>\n+   <para>\n+     because <code>n</code> must be known at compile time.  Your\n+     compiler is correct; it is not a bug.  That's the way templates\n+     work.  (Yes, it <emphasis>is</emphasis> a feature.)\n+   </para>\n+   <para>\n+     There are a couple of ways to handle this kind of thing.  Please\n+     consider all of them before passing judgement.  They include, in\n+     no particular order:\n+   </para>\n+      <itemizedlist>\n+        <listitem><para>A very large N in <code>bitset&lt;N&gt;</code>.</para></listitem>\n+        <listitem><para>A container&lt;bool&gt;.</para></listitem>\n+        <listitem><para>Extremely weird solutions.</para></listitem>\n+      </itemizedlist>\n+   <para>\n+     <emphasis>A very large N in\n+     <code>bitset&lt;N&gt;</code>.&nbsp;&nbsp;</emphasis> It has been\n+     pointed out a few times in newsgroups that N bits only takes up\n+     (N/8) bytes on most systems, and division by a factor of eight is\n+     pretty impressive when speaking of memory.  Half a megabyte given\n+     over to a bitset (recall that there is zero space overhead for\n+     housekeeping info; it is known at compile time exactly how large\n+     the set is) will hold over four million bits.  If you're using\n+     those bits as status flags (e.g.,\n+     <quote>changed</quote>/<quote>unchanged</quote> flags), that's a\n+     <emphasis>lot</emphasis> of state.\n+   </para>\n+   <para>\n+     You can then keep track of the <quote>maximum bit used</quote>\n+     during some testing runs on representative data, make note of how\n+     many of those bits really need to be there, and then reduce N to\n+     a smaller number.  Leave some extra space, of course.  (If you\n+     plan to write code like the incorrect example above, where the\n+     bitset is a local variable, then you may have to talk your\n+     compiler into allowing that much stack space; there may be zero\n+     space overhead, but it's all allocated inside the object.)\n+   </para>\n+   <para>\n+     <emphasis>A container&lt;bool&gt;.&nbsp;&nbsp;</emphasis> The\n+     Committee made provision for the space savings possible with that\n+     (N/8) usage previously mentioned, so that you don't have to do\n+     wasteful things like <code>Container&lt;char&gt;</code> or\n+     <code>Container&lt;short int&gt;</code>.  Specifically,\n+     <code>vector&lt;bool&gt;</code> is required to be specialized for\n+     that space savings.\n+   </para>\n+   <para>\n+     The problem is that <code>vector&lt;bool&gt;</code> doesn't\n+     behave like a normal vector anymore.  There have been recent\n+     journal articles which discuss the problems (the ones by Herb\n+     Sutter in the May and July/August 1999 issues of C++ Report cover\n+     it well).  Future revisions of the ISO C++ Standard will change\n+     the requirement for <code>vector&lt;bool&gt;</code>\n+     specialization.  In the meantime, <code>deque&lt;bool&gt;</code>\n+     is recommended (although its behavior is sane, you probably will\n+     not get the space savings, but the allocation scheme is different\n+     than that of vector).\n+   </para>\n+   <para>\n+     <emphasis>Extremely weird solutions.&nbsp;&nbsp;</emphasis> If\n+     you have access to the compiler and linker at runtime, you can do\n+     something insane, like figuring out just how many bits you need,\n+     then writing a temporary source code file.  That file contains an\n+     instantiation of <code>bitset</code> for the required number of\n+     bits, inside some wrapper functions with unchanging signatures.\n+     Have your program then call the compiler on that file using\n+     Position Independent Code, then open the newly-created object\n+     file and load those wrapper functions.  You'll have an\n+     instantiation of <code>bitset&lt;N&gt;</code> for the exact\n+     <code>N</code> that you need at the time.  Don't forget to delete\n+     the temporary files.  (Yes, this <emphasis>can</emphasis> be, and\n+     <emphasis>has been</emphasis>, done.)\n+   </para>\n+   <!-- I wonder if this next paragraph will get me in trouble... -->\n+   <para>\n+     This would be the approach of either a visionary genius or a\n+     raving lunatic, depending on your programming and management\n+     style.  Probably the latter.\n+   </para>\n+   <para>\n+     Which of the above techniques you use, if any, are up to you and\n+     your intended application.  Some time/space profiling is\n+     indicated if it really matters (don't just guess).  And, if you\n+     manage to do anything along the lines of the third category, the\n+     author would love to hear from you...\n+   </para>\n+   <para>\n+     Also note that the implementation of bitset used in libstdc++ has\n+     <ulink url=\"../ext/sgiexts.html#ch23\">some extensions</ulink>.\n+   </para>\n+\n+    </sect2>\n+    <sect2 id=\"associative.bitset.type_string\" xreflabel=\"Type String\">\n+      <title>Type String</title>\n+      <para>\n+      </para>\n+   <para>\n+     Bitmasks do not take char* nor const char* arguments in their\n+     constructors.  This is something of an accident, but you can read\n+     about the problem: follow the library's <quote>Links</quote> from\n+     the homepage, and from the C++ information <quote>defect\n+     reflector</quote> link, select the library issues list.  Issue\n+     number 116 describes the problem.\n+   </para>\n+   <para>\n+     For now you can simply make a temporary string object using the\n+     constructor expression:\n+   </para>\n+   <programlisting>\n+      std::bitset&lt;5&gt; b ( std::string(<quote>10110</quote>) );\n+   </programlisting>\n+   \n+   <para>\n+     instead of\n+   </para>\n+\n+    <programlisting>\n+      std::bitset&lt;5&gt; b ( <quote>10110</quote> );    // invalid\n+    </programlisting>\n+    </sect2>  \n+  </sect1>\n+\n+</chapter>\n+\n+<!-- Chapter 03 : Interacting with C -->\n+<chapter id=\"manual.containers.c\" xreflabel=\"Interacting with C\">\n+  <title>Interacting with C</title>\n+\n+  <sect1 id=\"containers.c.vs_array\" xreflabel=\"Containers vs. Arrays\">\n+    <title>Containers vs. Arrays</title>\n+   <para>\n+     You're writing some code and can't decide whether to use builtin\n+     arrays or some kind of container.  There are compelling reasons\n+     to use one of the container classes, but you're afraid that\n+     you'll eventually run into difficulties, change everything back\n+     to arrays, and then have to change all the code that uses those\n+     data types to keep up with the change.\n+   </para>\n+   <para>\n+     If your code makes use of the standard algorithms, this isn't as\n+     scary as it sounds.  The algorithms don't know, nor care, about\n+     the kind of <quote>container</quote> on which they work, since\n+     the algorithms are only given endpoints to work with.  For the\n+     container classes, these are iterators (usually\n+     <code>begin()</code> and <code>end()</code>, but not always).\n+     For builtin arrays, these are the address of the first element\n+     and the <ulink\n+     url=\"../24_iterators/howto.html#2\">past-the-end</ulink> element.\n+   </para>\n+   <para>\n+     Some very simple wrapper functions can hide all of that from the\n+     rest of the code.  For example, a pair of functions called\n+     <code>beginof</code> can be written, one that takes an array,\n+     another that takes a vector.  The first returns a pointer to the\n+     first element, and the second returns the vector's\n+     <code>begin()</code> iterator.\n+   </para>\n+   <para>\n+     The functions should be made template functions, and should also\n+     be declared inline.  As pointed out in the comments in the code\n+     below, this can lead to <code>beginof</code> being optimized out\n+     of existence, so you pay absolutely nothing in terms of increased\n+     code size or execution time.\n+   </para>\n+   <para>\n+     The result is that if all your algorithm calls look like\n+   </para>\n+   <programlisting>\n+   std::transform(beginof(foo), endof(foo), beginof(foo), SomeFunction);\n+   </programlisting>\n+   <para>\n+     then the type of foo can change from an array of ints to a vector\n+     of ints to a deque of ints and back again, without ever changing\n+     any client code.\n+   </para>\n+   <para>\n+     This author has a collection of such functions, called\n+     <quote>*of</quote> because they all extend the builtin\n+     <quote>sizeof</quote>.  It started with some Usenet discussions\n+     on a transparent way to find the length of an array.  A\n+     simplified and much-reduced version for easier reading is <ulink\n+     url=\"wrappers_h.txt\">given here</ulink>.\n+   </para>\n+   <para>\n+     Astute readers will notice two things at once: first, that the\n+     container class is still a <code>vector&lt;T&gt;</code> instead\n+     of a more general <code>Container&lt;T&gt;</code>.  This would\n+     mean that three functions for <code>deque</code> would have to be\n+     added, another three for <code>list</code>, and so on.  This is\n+     due to problems with getting template resolution correct; I find\n+     it easier just to give the extra three lines and avoid confusion.\n+   </para>\n+   <para>\n+     Second, the line\n+   </para>\n+   <programlisting>\n+    inline unsigned int lengthof (T (&amp;)[sz]) { return sz; } \n+   </programlisting>\n+   <para>\n+     looks just weird!  Hint:  unused parameters can be left nameless.\n+   </para>\n+  </sect1>\n+  \n+</chapter>\n+\n+</part>"}, {"sha": "8ecd7b9c3d2375a5cd3e9d0f69b78aba7ad93d3f", "filename": "libstdc++-v3/doc/xml/manual/ctype.xml", "status": "added", "additions": 259, "deletions": 0, "changes": 259, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fctype.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fctype.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fctype.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,259 @@\n+<sect1 id=\"manual.localization.facet.ctype\" xreflabel=\"ctype\">\n+<?dbhtml filename=\"ctype.html\"?>\n+ \n+<sect1info>\n+  <keywordset>\n+    <keyword>\n+      ISO C++\n+    </keyword>\n+    <keyword>\n+      ctype\n+    </keyword>\n+  </keywordset>\n+</sect1info>\n+\n+<title>ctype</title>\n+\n+<sect2 id=\"facet.ctype.impl\" xreflabel=\"facet.ctype.impl\">\n+<title>Implementation</title>\n+\n+  <sect3>\n+    <title>Specializations</title>\n+\n+<para>\n+For the required specialization codecvt&lt;wchar_t, char, mbstate_t&gt; ,\n+conversions are made between the internal character set (always UCS4\n+on GNU/Linux) and whatever the currently selected locale for the\n+LC_CTYPE category implements.\n+</para>\n+\n+<para>\n+The two required specializations are implemented as follows:\n+</para>\n+\n+<para>\n+<code>\n+ctype&lt;char&gt;\n+</code>\n+</para>\n+<para>\n+This is simple specialization. Implementing this was a piece of cake.\n+</para>\n+\n+<para>\n+<code>\n+ctype&lt;wchar_t&gt;\n+</code>\n+</para>\n+<para>\n+This specialization, by specifying all the template parameters, pretty\n+much ties the hands of implementors. As such, the implementation is\n+straightforward, involving mcsrtombs for the conversions between char\n+to wchar_t and wcsrtombs for conversions between wchar_t and char.\n+</para>\n+\n+<para>\n+Neither of these two required specializations deals with Unicode\n+characters.\n+</para>\n+\n+  </sect3>\n+</sect2>\n+\n+<sect2 id=\"facet.ctype.future\" xreflabel=\"facet.ctype.future\">\n+<title>Future</title>\n+\n+\n+<itemizedlist>\n+   <listitem>\n+   <para>\n+   How to deal with the global locale issue? \n+   </para></listitem>\n+\n+   <listitem>\n+   <para> \n+   How to deal with different types than char, wchar_t? </para></listitem>\n+\n+   <listitem><para>\n+   Overlap between codecvt/ctype: narrow/widen \n+   </para></listitem>\n+\n+   <listitem>\n+     <para> \n+       Mask typedef in codecvt_base, argument types in codecvt.  what\n+       is know about this type? \n+   </para></listitem>\n+\n+   <listitem>\n+   <para> \n+   Why mask* argument in codecvt?\n+   </para></listitem>\n+   \n+   <listitem>\n+     <para>\n+       Can this be made (more) generic? is there a simple way to\n+       straighten out the configure-time mess that is a by-product of\n+       this class?  \n+   </para></listitem>\n+\n+   <listitem>\n+     <para> \n+       Get the ctype&lt;wchar_t&gt;::mask stuff under control. Need to\n+       make some kind of static table, and not do lookup evertime\n+       somebody hits the do_is... functions. Too bad we can't just\n+       redefine mask for ctype&lt;wchar_t&gt; \n+   </para></listitem>\n+   \n+   <listitem>\n+     <para> \n+       Rename abstract base class. See if just smash-overriding is a\n+       better approach. Clarify, add sanity to naming.\n+     </para>\n+   </listitem>\n+\n+</itemizedlist>\n+\n+\n+</sect2>\n+\n+\n+<bibliography id=\"facet.ctype.biblio\" xreflabel=\"facet.ctype.biblio\">\n+<title>Bibliography</title>\n+\n+  <biblioentry>\n+    <title>\n+      The GNU C Library\n+    </title>\n+\n+    <author>\n+      <surname>McGrath</surname>\n+      <firstname>Roland</firstname>\n+    </author>\n+    <author>\n+      <surname>Drepper</surname>\n+      <firstname>Ulrich</firstname>\n+    </author>\n+\n+    <copyright>\n+      <year>2007</year>\n+      <holder>FSF</holder>\n+    </copyright>\n+    <pagenums>Chapters 6  Character Set Handling and 7 Locales and Internationalization</pagenums>\n+\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      Correspondence\n+    </title>\n+\n+    <author>\n+      <surname>Drepper</surname>\n+      <firstname>Ulrich</firstname>\n+    </author>\n+\n+    <copyright>\n+      <year>2002</year>\n+      <holder></holder>\n+    </copyright>\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      ISO/IEC 14882:1998 Programming languages - C++\n+    </title>\n+\n+    <copyright>\n+      <year>1998</year>\n+      <holder>ISO</holder>\n+    </copyright>\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      ISO/IEC 9899:1999 Programming languages - C\n+    </title>\n+\n+    <copyright>\n+      <year>1999</year>\n+      <holder>ISO</holder>\n+    </copyright>\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      System Interface Definitions, Issue 6 (IEEE Std. 1003.1-200x)\n+    </title>\n+\n+    <copyright>\n+      <year>1999</year>\n+      <holder>\n+      The Open Group/The Institute of Electrical and Electronics Engineers, Inc.</holder>\n+    </copyright>\n+\n+    <biblioid>\n+      <ulink url=\"http://www.opennc.org/austin/docreg.html\">\n+      </ulink>\n+    </biblioid>\n+\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      The C++ Programming Language, Special Edition\n+    </title>\n+    \n+    <author>\n+      <surname>Stroustrup</surname>\n+      <firstname>Bjarne</firstname>\n+    </author>\n+\n+    <copyright>\n+      <year>2000</year>\n+      <holder>Addison Wesley, Inc.</holder>\n+    </copyright>\n+    <pagenums>Appendix D</pagenums>\n+\n+    <publisher>\n+      <publishername>\n+\tAddison Wesley\n+      </publishername>\n+    </publisher>\n+\n+  </biblioentry> \n+\n+\n+  <biblioentry>\n+    <title>\n+      Standard C++ IOStreams and Locales\n+    </title>\n+    <subtitle>\n+      Advanced Programmer's Guide and Reference\n+    </subtitle>\n+    \n+    <author>\n+      <surname>Langer</surname>\n+      <firstname>Angelika</firstname>\n+    </author>\n+\n+    <author>\n+      <surname>Kreft</surname>\n+      <firstname>Klaus</firstname>\n+    </author>\n+\n+    <copyright>\n+      <year>2000</year>\n+      <holder>Addison Wesley Longman, Inc.</holder>\n+    </copyright>\n+\n+    <publisher>\n+      <publishername>\n+\tAddison Wesley Longman\n+      </publishername>\n+    </publisher>\n+\n+  </biblioentry> \n+\n+</bibliography>\n+\n+</sect1>\n\\ No newline at end of file"}, {"sha": "b52a246916191a16db3ffb61c2b91df832955384", "filename": "libstdc++-v3/doc/xml/manual/debug.xml", "status": "added", "additions": 245, "deletions": 0, "changes": 245, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fdebug.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fdebug.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fdebug.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,245 @@\n+<sect1 id=\"manual.intro.using.debug\" xreflabel=\"Debugging Support\">\n+<?dbhtml filename=\"debug.html\"?>\n+ \n+<sect1info>\n+  <keywordset>\n+    <keyword>\n+      C++\n+    </keyword>\n+    <keyword>\n+      debug\n+    </keyword>\n+  </keywordset>\n+</sect1info>\n+\n+<title>Debugging Support</title>\n+\n+<para>\n+  There are numerous things that can be done to improve the ease with\n+  which C++ binaries are debugged when using the GNU tool chain. Here\n+  are some of them.\n+</para>\n+\n+<sect2 id=\"debug.compiler\" xreflabel=\"debug.compiler\">\n+<title>Using <command>g++</command></title>\n+  <para> \n+    Compiler flags determine how debug information is transmitted\n+    between compilation and debug or analysis tools.\n+  </para>\n+  \n+  <para>\n+    The default optimizations and debug flags for a libstdc++ build\n+    are <code>-g -O2</code>. However, both debug and optimization\n+    flags can be varied to change debugging characteristics. For\n+    instance, turning off all optimization via the <code>-g -O0</code>\n+    flag will disable inlining, so that stepping through all\n+    functions, including inlined constructors and destructors, is\n+    possible. In addition,\n+    <code>-fno-eliminate-unused-debug-types</code> can be used when\n+    additional debug information, such as nested class info, is\n+    desired.\n+</para>\n+\n+<para>\n+  Or, the debug format that the compiler and debugger use to\n+  communicate information about source constructs can be changed via\n+  <code> -gdwarf-2 </code> or <code> -gstabs </code> flags: some\n+  debugging formats permit more expressive type and scope information\n+  to be shown in gdb.  The default debug information for a particular\n+  platform can be identified via the value set by the\n+  PREFERRED_DEBUGGING_TYPE macro in the gcc sources.\n+</para>\n+\n+<para>\n+  Many other options are available: please see <ulink\n+  url=\"http://gcc.gnu.org/onlinedocs/gcc/Debugging-Options.html#Debugging%20Options\">\"Options\n+  for Debugging Your Program\"</ulink> in Using the GNU Compiler\n+  Collection (GCC) for a complete list.\n+</para>\n+</sect2>\n+\n+<sect2 id=\"debug.req\" xreflabel=\"debug.req\">\n+<title>Debug Versions of Library Binary Files</title>\n+\n+<para>\n+  If you would like debug symbols in libstdc++, there are two ways to\n+  build libstdc++ with debug flags. The first is to run make from the\n+  toplevel in a freshly-configured tree with\n+</para>\n+<programlisting>\n+     --enable-libstdcxx-debug\n+</programlisting>\n+<para>and perhaps</para>\n+<programlisting>\n+     --enable-libstdcxx-debug-flags='...'\n+</programlisting>\n+<para>\n+  to create a separate debug build. Both the normal build and the\n+  debug build will persist, without having to specify\n+  <code>CXXFLAGS</code>, and the debug library will be installed in a\n+  separate directory tree, in <code>(prefix)/lib/debug</code>. For\n+  more information, look at the <ulink\n+  url=\"configopts.html\">configuration options</ulink> document.\n+</para>\n+\n+<para>\n+  A second approach is to use the configuration flags \n+</para>\n+<programlisting>\n+     make CXXFLAGS='-g3 -O0' all\n+</programlisting>\n+\n+<para>\n+  This quick and dirty approach is often sufficient for quick\n+  debugging tasks, when you cannot or don't want to recompile your\n+  application to use the <ulink url=\"#safe\">debug mode</ulink>.</para>\n+</sect2>\n+ \n+<sect2 id=\"debug.memory\" xreflabel=\"debug.memory\">\n+<title>Memory Leak Hunting</title>\n+\n+<para>\n+  There are various third party memory tracing and debug utilities\n+  that can be used to provide detailed memory allocation information\n+  about C++ code. An exhaustive list of tools is not going to be\n+  attempted, but includes <code>mtrace</code>, <code>valgrind</code>,\n+  <code>mudflap</code>, and the non-free commercial product\n+  <code>purify</code>. In addition, <code>libcwd</code> has a\n+  replacement for the global new and delete operators that can track\n+  memory allocation and deallocation and provide useful memory\n+  statistics.\n+</para>\n+\n+<para>\n+  Regardless of the memory debugging tool being used, there is one\n+  thing of great importance to keep in mind when debugging C++ code\n+  that uses <code>new</code> and <code>delete</code>: there are\n+  different kinds of allocation schemes that can be used by <code>\n+  std::allocator </code>. For implementation details, see the <ulink\n+  url=\"ext/mt_allocator.html\">mt allocator</ulink> documentation and\n+  look specifically for <code>GLIBCXX_FORCE_NEW</code>.\n+</para>\n+\n+<para>\n+  In a nutshell, the default allocator used by <code>\n+  std::allocator</code> is a high-performance pool allocator, and can\n+  give the mistaken impression that in a suspect executable, memory is\n+  being leaked, when in reality the memory \"leak\" is a pool being used\n+  by the library's allocator and is reclaimed after program\n+  termination.\n+</para>\n+\n+<para>\n+  For valgrind, there are some specific items to keep in mind. First\n+  of all, use a version of valgrind that will work with current GNU\n+  C++ tools: the first that can do this is valgrind 1.0.4, but later\n+  versions should work at least as well. Second of all, use a\n+  completely unoptimized build to avoid confusing valgrind. Third, use\n+  GLIBCXX_FORCE_NEW to keep extraneous pool allocation noise from\n+  cluttering debug information.\n+</para>\n+\n+<para>\n+  Fourth, it may be necessary to force deallocation in other libraries\n+  as well, namely the \"C\" library. On linux, this can be accomplished\n+  with the appropriate use of the <code>__cxa_atexit</code> or\n+  <code>atexit</code> functions.\n+</para>\n+\n+<programlisting>\n+   #include &lt;cstdlib&gt;\n+\n+   extern \"C\" void __libc_freeres(void);\n+\n+   void do_something() { }\n+\n+   int main()\n+   {\n+     atexit(__libc_freeres);\n+     do_something();\n+     return 0;\n+   }\n+</programlisting>\n+\n+\n+<para>or, using <code>__cxa_atexit</code>:</para>\n+\n+<programlisting>\n+   extern \"C\" void __libc_freeres(void);\n+   extern \"C\" int __cxa_atexit(void (*func) (void *), void *arg, void *d);\n+\n+   void do_something() { }\n+\n+   int main()\n+   {\n+      extern void* __dso_handle __attribute__ ((__weak__));\n+      __cxa_atexit((void (*) (void *)) __libc_freeres, NULL, \n+                   &amp;__dso_handle ? __dso_handle : NULL);\n+      do_test();\n+      return 0;\n+   }\n+</programlisting>\n+\n+<para>\n+  Suggested valgrind flags, given the suggestions above about setting\n+  up the runtime environment, library, and test file, might be:\n+</para>\n+<programlisting> \n+   valgrind -v --num-callers=20 --leak-check=yes --leak-resolution=high --show-reachable=yes a.out\n+</programlisting>\n+\n+</sect2>\n+\n+<sect2 id=\"debug.gdb\" xreflabel=\"debug.gdb\">\n+<title>Using <command>gdb</command></title>\n+  <para> \n+  </para>\n+\n+<para>\n+  Many options are available for gdb itself: please see <ulink\n+  url=\"http://sources.redhat.com/gdb/current/onlinedocs/gdb_13.html#SEC109\">\n+  \"GDB features for C++\" </ulink> in the gdb documentation. Also\n+  recommended: the other parts of this manual.\n+</para>\n+\n+<para>\n+  These settings can either be switched on in at the gdb command line,\n+  or put into a .gdbint file to establish default debugging\n+  characteristics, like so:\n+</para>\n+\n+<programlisting>\n+   set print pretty on\n+   set print object on\n+   set print static-members on\n+   set print vtbl on\n+   set print demangle on\n+   set demangle-style gnu-v3\n+</programlisting>\n+</sect2>\n+\n+<sect2 id=\"debug.exceptions\" xreflabel=\"debug.exceptions\">\n+<title>Tracking uncaught exceptions</title>\n+<para>\n+  The <link linkend=\"support.termination.verbose\">verbose\n+  termination handler</link> gives information about uncaught\n+  exceptions which are killing the program.  It is described in the\n+  linked-to page.\n+</para>\n+</sect2>\n+\n+<sect2 id=\"debug.debug_mode\" xreflabel=\"debug.debug_mode\">\n+<title>Debug Mode</title>\n+  <para> The <link linkend=\"manual.ext.debug_mode\">Debug Mode</link>\n+  has compile and run-time checks for many containers.\n+  </para>\n+</sect2>\n+\n+<sect2 id=\"debug.compile_time_checks\" xreflabel=\"debug.compile_time_checks\">\n+<title>Compile Time Checking</title>\n+  <para> The <link linkend=\"manual.ext.compile_checks\">Compile-Time\n+  Checks</link> Extension has compile-time checks for many algorithms.\n+  </para>\n+</sect2>\n+\n+</sect1>\n\\ No newline at end of file"}, {"sha": "e5f3becd5908397c7214b32101defbd3ac9850ca", "filename": "libstdc++-v3/doc/xml/manual/debug_mode.xml", "status": "added", "additions": 888, "deletions": 0, "changes": 888, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fdebug_mode.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fdebug_mode.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fdebug_mode.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,888 @@\n+<?xml version='1.0'?>\n+<!DOCTYPE chapter PUBLIC \"-//OASIS//DTD DocBook XML V4.5//EN\" \n+ \"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\" \n+[ ]>\n+\n+<chapter id=\"manual.ext.debug_mode\" xreflabel=\"Debug Mode\">\n+<?dbhtml filename=\"debug_mode.html\"?>\n+ \n+<chapterinfo>\n+  <keywordset>\n+    <keyword>\n+      C++\n+    </keyword>\n+    <keyword>\n+      library\n+    </keyword>\n+    <keyword>\n+      debug\n+    </keyword>\n+  </keywordset>\n+</chapterinfo>\n+\n+<title>Debug Mode</title>\n+\n+<sect1 id=\"manual.ext.debug_mode.intro\" xreflabel=\"Intro\">\n+  <title>Intro</title>\n+  <para>\n+    By default, libstdc++ is built with efficiency in mind, and\n+    therefore performs little or no error checking that is not\n+    required by the C++ standard. This means that programs that\n+    incorrectly use the C++ standard library will exhibit behavior\n+    that is not portable and may not even be predictable, because they\n+    tread into implementation-specific or undefined behavior. To\n+    detect some of these errors before they can become problematic,\n+    libstdc++ offers a debug mode that provides additional checking of\n+    library facilities, and will report errors in the use of libstdc++\n+    as soon as they can be detected by emitting a description of the\n+    problem to standard error and aborting the program.  This debug\n+    mode is available with GCC 3.4.0 and later versions. \n+  </para>\n+\n+  <para>\n+    The libstdc++ debug mode performs checking for many areas of the\n+    C++ standard, but the focus is on checking interactions among\n+    standard iterators, containers, and algorithms, including:\n+  </para>\n+\n+  <itemizedlist>\n+    <listitem><para><emphasis>Safe iterators</emphasis>: Iterators keep track of the\n+    container whose elements they reference, so errors such as\n+    incrementing a past-the-end iterator or dereferencing an iterator\n+    that points to a container that has been destructed are diagnosed\n+    immediately.</para></listitem>\n+    \n+    <listitem><para><emphasis>Algorithm preconditions</emphasis>: Algorithms attempt to\n+    validate their input parameters to detect errors as early as\n+    possible. For instance, the <code>set_intersection</code>\n+    algorithm requires that its iterator\n+    parameters <code>first1</code> and <code>last1</code> form a valid\n+    iterator range, and that the sequence\n+    [<code>first1</code>, <code>last1</code>) is sorted according to\n+    the same predicate that was passed\n+    to <code>set_intersection</code>; the libstdc++ debug mode will\n+    detect an error if the sequence is not sorted or was sorted by a\n+    different predicate.</para></listitem>\n+  </itemizedlist>\n+\n+</sect1>\n+\n+<sect1 id=\"manual.ext.debug_mode.semantics\" xreflabel=\"Semantics\">\n+  <title>Semantics</title>\n+  <para>\n+  </para>\n+\n+<para>A program that uses the C++ standard library correctly\n+  will maintain the same semantics under debug mode as it had with\n+  the normal (release) library. All functional and exception-handling\n+  guarantees made by the normal library also hold for the debug mode\n+  library, with one exception: performance guarantees made by the\n+  normal library may not hold in the debug mode library. For\n+  instance, erasing an element in a <code>std::list</code> is a\n+  constant-time operation in normal library, but in debug mode it is\n+  linear in the number of iterators that reference that particular\n+  list. So while your (correct) program won't change its results, it \n+  is likely to execute more slowly.</para>\n+\n+<para>libstdc++ includes many extensions to the C++ standard library. In\n+  some cases the extensions are obvious, such as the hashed\n+  associative containers, whereas other extensions give predictable\n+  results to behavior that would otherwise be undefined, such as\n+  throwing an exception when a <code>std::basic_string</code> is\n+  constructed from a NULL character pointer. This latter category also\n+  includes implementation-defined and unspecified semantics, such as\n+  the growth rate of a vector. Use of these extensions is not\n+  considered incorrect, so code that relies on them will not be\n+  rejected by debug mode. However, use of these extensions may affect\n+  the portability of code to other implementations of the C++ standard\n+  library, and is therefore somewhat hazardous. For this reason, the\n+  libstdc++ debug mode offers a \"pedantic\" mode (similar to\n+  GCC's <code>-pedantic</code> compiler flag) that attempts to emulate\n+  the semantics guaranteed by the C++ standard. For\n+  instance, constructing a <code>std::basic_string</code> with a NULL\n+  character pointer would result in an exception under normal mode or\n+  non-pedantic debug mode (this is a libstdc++ extension), whereas\n+  under pedantic debug mode libstdc++ would signal an error. To enable\n+  the pedantic debug mode, compile your program with\n+  both <code>-D_GLIBCXX_DEBUG</code>\n+  and <code>-D_GLIBCXX_DEBUG_PEDANTIC</code> .\n+  (N.B. In GCC 3.4.x and 4.0.0, due to a bug,\n+  <code>-D_GLIBXX_DEBUG_PEDANTIC</code> was also needed. The problem has\n+  been fixed in GCC 4.0.1 and later versions.) </para>\n+\n+<para>The following library components provide extra debugging\n+  capabilities in debug mode:</para>\n+<itemizedlist>\n+  <listitem><para><code>std::basic_string</code> (no safe iterators and see note below)</para></listitem>\n+  <listitem><para><code>std::bitset</code></para></listitem>\n+  <listitem><para><code>std::deque</code></para></listitem>\n+  <listitem><para><code>std::list</code></para></listitem>\n+  <listitem><para><code>std::map</code></para></listitem>\n+  <listitem><para><code>std::multimap</code></para></listitem>\n+  <listitem><para><code>std::multiset</code></para></listitem>\n+  <listitem><para><code>std::set</code></para></listitem>\n+  <listitem><para><code>std::vector</code></para></listitem>\n+  <listitem><para><code>std::unordered_map</code></para></listitem>\n+  <listitem><para><code>std::unordered_multimap</code></para></listitem>\n+  <listitem><para><code>std::unordered_set</code></para></listitem>\n+  <listitem><para><code>std::unordered_multiset</code></para></listitem>\n+</itemizedlist>\n+\n+<para>N.B. although there are precondition checks for some string operations,\n+e.g.  <code>operator[]</code>,\n+they will not always be run when using the <code>char</code> and\n+<code>wchar_t</code> specialisations (<code>std::string</code> and\n+<code>std::wstring</code>).  This is because libstdc++ uses GCC's\n+<code>extern template</code> extension to provide explicit instantiations\n+of <code>std::string</code> and <code>std::wstring</code>, and those\n+explicit instantiations don't include the debug-mode checks.  If the\n+containing functions are inlined then the checks will run, so compiling\n+with <code>-O1</code> might be enough to enable them.  Alternatively\n+<code>-D_GLIBCXX_EXTERN_TEMPLATE=0</code> will suppress the declarations\n+of the explicit instantiations and cause the functions to be instantiated\n+with the debug-mode checks included, but this is unsupported and not\n+guaranteed to work.  For full debug-mode support you can use the\n+<code>__gnu_debug::basic_string</code> debugging container directly,\n+which always works correctly.\n+</para>\n+\n+</sect1>\n+\n+<sect1 id=\"manual.ext.debug_mode.using\" xreflabel=\"Using\">\n+  <title>Using</title>\n+  <para>\n+  </para>\n+<sect2 id=\"debug_mode.using.mode\" xreflabel=\"Using Mode\">\n+  <title>Using the Debug Mode</title>\n+\n+<para>To use the libstdc++ debug mode, compile your application with the\n+  compiler flag <code>-D_GLIBCXX_DEBUG</code>. Note that this flag\n+  changes the sizes and behavior of standard class templates such\n+  as <code>std::vector</code>, and therefore you can only link code\n+  compiled with debug mode and code compiled without debug mode if no\n+  instantiation of a container is passed between the two translation\n+  units.</para>\n+\n+<para>By default, error messages are formatted to fit on lines of about\n+  78 characters.  The environment variable\n+  <code>GLIBCXX_DEBUG_MESSAGE_LENGTH</code> can be used to request a\n+  different length.</para>\n+\n+</sect2>\n+\n+<sect2 id=\"debug_mode.using.specific\" xreflabel=\"Using Specific\">\n+  <title>Using a Specific Debug Container</title>\n+<para>When it is not feasible to recompile your entire application, or\n+  only specific containers need checking, debugging containers are\n+  available as GNU extensions. These debugging containers are\n+  functionally equivalent to the standard drop-in containers used in\n+  debug mode, but they are available in a separate namespace as GNU\n+  extensions and may be used in programs compiled with either release\n+  mode or with debug mode. The\n+  following table provides the names and headers of the debugging\n+  containers:\n+</para>\n+\n+<table frame='all'>\n+<title>Debugging Containers</title>\n+<tgroup cols='6' align='left' colsep='1' rowsep='1'>\n+<colspec colname='c1'></colspec>\n+<colspec colname='c2'></colspec>\n+<colspec colname='c3'></colspec>\n+<colspec colname='c4'></colspec>\n+\n+<thead>\n+  <row>\n+    <entry>Container</entry>\n+    <entry>Header</entry>\n+    <entry>Debug container</entry>\n+    <entry>Debug header</entry>\n+  </row>\n+</thead>\n+<tbody>\n+  <row>\n+    <entry><classname>std::bitset</classname></entry>\n+    <entry><filename class=\"headerfile\">bitset</filename></entry>\n+    <entry><classname>__gnu_debug::bitset</classname></entry>\n+    <entry><filename class=\"headerfile\">bitset</filename></entry>\n+  </row>\n+  <row>\n+    <entry><classname>std::deque</classname></entry>\n+    <entry><filename class=\"headerfile\">deque</filename></entry>\n+    <entry><classname>__gnu_debug::deque</classname></entry>\n+    <entry><filename class=\"headerfile\">deque</filename></entry>\n+  </row>\n+  <row>\n+    <entry><classname>std::list</classname></entry>\n+    <entry><filename class=\"headerfile\">list</filename></entry>\n+    <entry><classname>__gnu_debug::list</classname></entry>\n+    <entry><filename class=\"headerfile\">list</filename></entry>\n+  </row>\n+  <row>\n+    <entry><classname>std::map</classname></entry>\n+    <entry><filename class=\"headerfile\">map</filename></entry>\n+    <entry><classname>__gnu_debug::map</classname></entry>\n+    <entry><filename class=\"headerfile\">map</filename></entry>\n+  </row>\n+  <row>\n+    <entry><classname>std::multimap</classname></entry>\n+    <entry><filename class=\"headerfile\">map</filename></entry>\n+    <entry><classname>__gnu_debug::multimap</classname></entry>\n+    <entry><filename class=\"headerfile\">map</filename></entry>\n+  </row>\n+  <row>\n+    <entry><classname>std::multiset</classname></entry>\n+    <entry><filename class=\"headerfile\">set</filename></entry>\n+    <entry><classname>__gnu_debug::multiset</classname></entry>\n+    <entry><filename class=\"headerfile\">set</filename></entry>\n+  </row>\n+  <row>\n+    <entry><classname>std::set</classname></entry>\n+    <entry><filename class=\"headerfile\">set</filename></entry>\n+    <entry><classname>__gnu_debug::set</classname></entry>\n+    <entry><filename class=\"headerfile\">set</filename></entry>\n+  </row>\n+  <row>\n+    <entry><classname>std::string</classname></entry>\n+    <entry><filename class=\"headerfile\">string</filename></entry>\n+    <entry><classname>__gnu_debug::string</classname></entry>\n+    <entry><filename class=\"headerfile\">string</filename></entry>\n+  </row>\n+  <row>\n+    <entry><classname>std::wstring</classname></entry>\n+    <entry><filename class=\"headerfile\">string</filename></entry>\n+    <entry><classname>__gnu_debug::wstring</classname></entry>\n+    <entry><filename class=\"headerfile\">string</filename></entry>\n+  </row>\n+  <row>\n+    <entry><classname>std::basic_string</classname></entry>\n+    <entry><filename class=\"headerfile\">string</filename></entry>\n+    <entry><classname>__gnu_debug::basic_string</classname></entry>\n+    <entry><filename class=\"headerfile\">string</filename></entry>\n+  </row>\n+  <row>\n+    <entry><classname>std::vector</classname></entry>\n+    <entry><filename class=\"headerfile\">vector</filename></entry>\n+    <entry><classname>__gnu_debug::vector</classname></entry>\n+    <entry><filename class=\"headerfile\">vector</filename></entry>\n+  </row>\n+</tbody>\n+</tgroup>\n+</table>\n+\n+<para>In addition, when compiling in C++0x mode, these additional\n+containers have additional debug capability.\n+</para>\n+\n+<table frame='all'>\n+<title>Debugging Containers C++0x</title>\n+<tgroup cols='6' align='left' colsep='1' rowsep='1'>\n+<colspec colname='c1'></colspec>\n+<colspec colname='c2'></colspec>\n+<colspec colname='c3'></colspec>\n+<colspec colname='c4'></colspec>\n+\n+<thead>\n+  <row>\n+    <entry>Container</entry>\n+    <entry>Header</entry>\n+    <entry>Debug container</entry>\n+    <entry>Debug header</entry>\n+  </row>\n+</thead>\n+<tbody>\n+    <row>\n+    <entry><classname>std::unordered_map</classname></entry>\n+    <entry><filename class=\"headerfile\">unordered_map</filename></entry>\n+    <entry><classname>__gnu_debug::unordered_map</classname></entry>\n+    <entry><filename class=\"headerfile\">unordered_map</filename></entry>\n+  </row>\n+  <row>\n+    <entry><classname>std::unordered_multimap</classname></entry>\n+    <entry><filename class=\"headerfile\">unordered_map</filename></entry>\n+    <entry><classname>__gnu_debug::unordered_multimap</classname></entry>\n+    <entry><filename class=\"headerfile\">unordered_map</filename></entry>\n+  </row>\n+  <row>\n+    <entry><classname>std::unordered_set</classname></entry>\n+    <entry><filename class=\"headerfile\">unordered_set</filename></entry>\n+    <entry><classname>__gnu_debug::unordered_set</classname></entry>\n+    <entry><filename class=\"headerfile\">unordered_set</filename></entry>\n+  </row>\n+  <row>\n+    <entry><classname>std::unordered_multiset</classname></entry>\n+    <entry><filename class=\"headerfile\">unordered_set</filename></entry>\n+    <entry><classname>__gnu_debug::unordered_multiset</classname></entry>\n+    <entry><filename class=\"headerfile\">unordered_set</filename></entry>\n+  </row>\n+</tbody>\n+</tgroup>\n+</table>\n+</sect2>\n+</sect1>\n+\n+<sect1 id=\"manual.ext.debug_mode.design\" xreflabel=\"Design\">\n+  <title>Design</title>\n+  <para>\n+  </para>\n+  <sect2 id=\"manual.ext.debug_mode.design.goals\" xreflabel=\"Goals\">\n+    <title>Goals</title>\n+    <para>\n+    </para>\n+<para> The libstdc++ debug mode replaces unsafe (but efficient) standard\n+  containers and iterators with semantically equivalent safe standard\n+  containers and iterators to aid in debugging user programs. The\n+  following goals directed the design of the libstdc++ debug mode:</para>\n+\n+  <itemizedlist>\n+\n+    <listitem><para><emphasis>Correctness</emphasis>: the libstdc++ debug mode must not change\n+    the semantics of the standard library for all cases specified in\n+    the ANSI/ISO C++ standard. The essence of this constraint is that\n+    any valid C++ program should behave in the same manner regardless\n+    of whether it is compiled with debug mode or release mode. In\n+    particular, entities that are defined in namespace std in release\n+    mode should remain defined in namespace std in debug mode, so that\n+    legal specializations of namespace std entities will remain\n+    valid. A program that is not valid C++ (e.g., invokes undefined\n+    behavior) is not required to behave similarly, although the debug\n+    mode will abort with a diagnostic when it detects undefined\n+    behavior.</para></listitem>\n+\n+    <listitem><para><emphasis>Performance</emphasis>: the additional of the libstdc++ debug mode\n+    must not affect the performance of the library when it is compiled\n+    in release mode. Performance of the libstdc++ debug mode is\n+    secondary (and, in fact, will be worse than the release\n+    mode).</para></listitem>\n+\n+    <listitem><para><emphasis>Usability</emphasis>: the libstdc++ debug mode should be easy to\n+    use. It should be easily incorporated into the user's development\n+    environment (e.g., by requiring only a single new compiler switch)\n+    and should produce reasonable diagnostics when it detects a\n+    problem with the user program. Usability also involves detection\n+    of errors when using the debug mode incorrectly, e.g., by linking\n+    a release-compiled object against a debug-compiled object if in\n+    fact the resulting program will not run correctly.</para></listitem>\n+\n+    <listitem><para><emphasis>Minimize recompilation</emphasis>: While it is expected that\n+    users recompile at least part of their program to use debug\n+    mode, the amount of recompilation affects the\n+    detect-compile-debug turnaround time. This indirectly affects the\n+    usefulness of the debug mode, because debugging some applications\n+    may require rebuilding a large amount of code, which may not be\n+    feasible when the suspect code may be very localized. There are\n+    several levels of conformance to this requirement, each with its\n+    own usability and implementation characteristics. In general, the\n+    higher-numbered conformance levels are more usable (i.e., require\n+    less recompilation) but are more complicated to implement than\n+    the lower-numbered conformance levels. \n+      <orderedlist>\n+\t<listitem><para><emphasis>Full recompilation</emphasis>: The user must recompile his or\n+\ther entire application and all C++ libraries it depends on,\n+\tincluding the C++ standard library that ships with the\n+\tcompiler. This must be done even if only a small part of the\n+\tprogram can use debugging features.</para></listitem>\n+\n+\t<listitem><para><emphasis>Full user recompilation</emphasis>: The user must recompile\n+\this or her entire application and all C++ libraries it depends\n+\ton, but not the C++ standard library itself. This must be done\n+\teven if only a small part of the program can use debugging\n+\tfeatures. This can be achieved given a full recompilation\n+\tsystem by compiling two versions of the standard library when\n+\tthe compiler is installed and linking against the appropriate\n+\tone, e.g., a multilibs approach.</para></listitem>\n+\n+\t<listitem><para><emphasis>Partial recompilation</emphasis>: The user must recompile the\n+\tparts of his or her application and the C++ libraries it\n+\tdepends on that will use the debugging facilities\n+\tdirectly. This means that any code that uses the debuggable\n+\tstandard containers would need to be recompiled, but code\n+\tthat does not use them (but may, for instance, use IOStreams)\n+\twould not have to be recompiled.</para></listitem>\n+\n+\t<listitem><para><emphasis>Per-use recompilation</emphasis>: The user must recompile the\n+\tparts of his or her application and the C++ libraries it\n+\tdepends on where debugging should occur, and any other code\n+\tthat interacts with those containers. This means that a set of\n+\ttranslation units that accesses a particular standard\n+\tcontainer instance may either be compiled in release mode (no\n+\tchecking) or debug mode (full checking), but must all be\n+\tcompiled in the same way; a translation unit that does not see\n+\tthat standard container instance need not be recompiled. This\n+\talso means that a translation unit <emphasis>A</emphasis> that contains a\n+\tparticular instantiation\n+\t(say, <code>std::vector&lt;int&gt;</code>) compiled in release\n+\tmode can be linked against a translation unit <emphasis>B</emphasis> that\n+\tcontains the same instantiation compiled in debug mode (a\n+\tfeature not present with partial recompilation). While this\n+\tbehavior is technically a violation of the One Definition\n+\tRule, this ability tends to be very important in\n+\tpractice. The libstdc++ debug mode supports this level of\n+\trecompilation. </para></listitem>\n+\n+\t<listitem><para><emphasis>Per-unit recompilation</emphasis>: The user must only\n+\trecompile the translation units where checking should occur,\n+\tregardless of where debuggable standard containers are\n+\tused. This has also been dubbed \"<code>-g</code> mode\",\n+\tbecause the <code>-g</code> compiler switch works in this way,\n+\temitting debugging information at a per--translation-unit\n+\tgranularity. We believe that this level of recompilation is in\n+\tfact not possible if we intend to supply safe iterators, leave\n+\tthe program semantics unchanged, and not regress in\n+\tperformance under release mode because we cannot associate\n+\textra information with an iterator (to form a safe iterator)\n+\twithout either reserving that space in release mode\n+\t(performance regression) or allocating extra memory associated\n+\twith each iterator with <code>new</code> (changes the program\n+\tsemantics).</para></listitem>\n+      </orderedlist>\n+    </para></listitem>\n+  </itemizedlist>\n+  </sect2>\n+\n+  <sect2 id=\"manual.ext.debug_mode.design.methods\" xreflabel=\"Methods\">\n+    <title>Methods</title>\n+    <para>\n+    </para>\n+<para>This section provides an overall view of the design of the\n+  libstdc++ debug mode and details the relationship between design\n+  decisions and the stated design goals.</para>\n+\n+  <sect3 id=\"debug_mode.design.methods.wrappers\" xreflabel=\"Method Wrapper\">\n+    <title>The Wrapper Model</title>\n+<para>The libstdc++ debug mode uses a wrapper model where the debugging\n+  versions of library components (e.g., iterators and containers) form\n+  a layer on top of the release versions of the library\n+  components. The debugging components first verify that the operation\n+  is correct (aborting with a diagnostic if an error is found) and\n+  will then forward to the underlying release-mode container that will\n+  perform the actual work. This design decision ensures that we cannot\n+  regress release-mode performance (because the release-mode\n+  containers are left untouched) and partially enables <ulink url=\"#mixing\">mixing debug and release code</ulink> at link time,\n+  although that will not be discussed at this time.</para>\n+\n+<para>Two types of wrappers are used in the implementation of the debug\n+  mode: container wrappers and iterator wrappers. The two types of\n+  wrappers interact to maintain relationships between iterators and\n+  their associated containers, which are necessary to detect certain\n+  types of standard library usage errors such as dereferencing\n+  past-the-end iterators or inserting into a container using an\n+  iterator from a different container.</para>\n+\n+  <sect4 id=\"debug_mode.design.methods.safe_iter\" xreflabel=\"Method Safe Iter\">\n+    <title>Safe Iterators</title>\n+<para>Iterator wrappers provide a debugging layer over any iterator that\n+  is attached to a particular container, and will manage the\n+  information detailing the iterator's state (singular,\n+  dereferenceable, etc.) and tracking the container to which the\n+  iterator is attached. Because iterators have a well-defined, common\n+  interface the iterator wrapper is implemented with the iterator\n+  adaptor class template <code>__gnu_debug::_Safe_iterator</code>,\n+  which takes two template parameters:</para>\n+\n+<itemizedlist>\n+  <listitem><para><code>Iterator</code>: The underlying iterator type, which must\n+    be either the <code>iterator</code> or <code>const_iterator</code>\n+    typedef from the sequence type this iterator can reference.</para></listitem>\n+  \n+  <listitem><para><code>Sequence</code>: The type of sequence that this iterator\n+  references. This sequence must be a safe sequence (discussed below)\n+  whose <code>iterator</code> or <code>const_iterator</code> typedef\n+  is the type of the safe iterator.</para></listitem>\n+</itemizedlist>\n+  </sect4>\n+\n+  <sect4 id=\"debug_mode.design.methods.safe_seq\" xreflabel=\"Method Safe Seq\">\n+    <title>Safe Sequences (Containers)</title>\n+\n+<para>Container wrappers provide a debugging layer over a particular\n+  container type. Because containers vary greatly in the member\n+  functions they support and the semantics of those member functions\n+  (especially in the area of iterator invalidation), container\n+  wrappers are tailored to the container they reference, e.g., the\n+  debugging version of <code>std::list</code> duplicates the entire\n+  interface of <code>std::list</code>, adding additional semantic\n+  checks and then forwarding operations to the\n+  real <code>std::list</code> (a public base class of the debugging\n+  version) as appropriate. However, all safe containers inherit from\n+  the class template <code>__gnu_debug::_Safe_sequence</code>,\n+  instantiated with the type of the safe container itself (an instance\n+  of the curiously recurring template pattern).</para>\n+\n+<para>The iterators of a container wrapper will be \n+  <ulink url=\"#safe_iterator\">safe iterators</ulink> that reference sequences\n+  of this type and wrap the iterators provided by the release-mode\n+  base class. The debugging container will use only the safe\n+  iterators within its own interface (therefore requiring the user to\n+  use safe iterators, although this does not change correct user\n+  code) and will communicate with the release-mode base class with\n+  only the underlying, unsafe, release-mode iterators that the base\n+  class exports.</para>\n+\n+<para> The debugging version of <code>std::list</code> will have the\n+  following basic structure:</para>\n+\n+<programlisting>\n+template&lt;typename _Tp, typename _Allocator = allocator&lt;_Tp&gt;\n+  class debug-list :\n+    public release-list&lt;_Tp, _Allocator&gt;,\n+    public __gnu_debug::_Safe_sequence&lt;debug-list&lt;_Tp, _Allocator&gt; &gt;\n+  {\n+    typedef release-list&lt;_Tp, _Allocator&gt; _Base;\n+    typedef debug-list&lt;_Tp, _Allocator&gt;   _Self;\n+\n+  public:\n+    typedef __gnu_debug::_Safe_iterator&lt;typename _Base::iterator, _Self&gt;       iterator;\n+    typedef __gnu_debug::_Safe_iterator&lt;typename _Base::const_iterator, _Self&gt; const_iterator;\n+\n+    // duplicate std::list interface with debugging semantics\n+  };\n+</programlisting>\n+  </sect4>\n+  </sect3>\n+\n+  <sect3 id=\"debug_mode.design.methods.precond\" xreflabel=\"Precondition check\">\n+    <title>Precondition Checking</title>\n+<para>The debug mode operates primarily by checking the preconditions of\n+  all standard library operations that it supports. Preconditions that\n+  are always checked (regardless of whether or not we are in debug\n+  mode) are checked via the <code>__check_xxx</code> macros defined\n+  and documented in the source\n+  file <code>include/debug/debug.h</code>. Preconditions that may or\n+  may not be checked, depending on the debug-mode\n+  macro <code>_GLIBCXX_DEBUG</code>, are checked via\n+  the <code>__requires_xxx</code> macros defined and documented in the\n+  same source file. Preconditions are validated using any additional\n+  information available at run-time, e.g., the containers that are\n+  associated with a particular iterator, the position of the iterator\n+  within those containers, the distance between two iterators that may\n+  form a valid range, etc. In the absence of suitable information,\n+  e.g., an input iterator that is not a safe iterator, these\n+  precondition checks will silently succeed.</para>\n+\n+<para>The majority of precondition checks use the aforementioned macros,\n+  which have the secondary benefit of having prewritten debug\n+  messages that use information about the current status of the\n+  objects involved (e.g., whether an iterator is singular or what\n+  sequence it is attached to) along with some static information\n+  (e.g., the names of the function parameters corresponding to the\n+  objects involved). When not using these macros, the debug mode uses\n+  either the debug-mode assertion\n+  macro <code>_GLIBCXX_DEBUG_ASSERT</code> , its pedantic\n+  cousin <code>_GLIBCXX_DEBUG_PEDASSERT</code>, or the assertion\n+  check macro that supports more advance formulation of error\n+  messages, <code>_GLIBCXX_DEBUG_VERIFY</code>. These macros are\n+  documented more thoroughly in the debug mode source code.</para>\n+  </sect3>\n+\n+  <sect3 id=\"debug_mode.design.methods.coexistence\" xreflabel=\"Coexistence\">\n+    <title>Release- and debug-mode coexistence</title>\n+<para>The libstdc++ debug mode is the first debug mode we know of that\n+  is able to provide the \"Per-use recompilation\" (4) guarantee, that\n+  allows release-compiled and debug-compiled code to be linked and\n+  executed together without causing unpredictable behavior. This\n+  guarantee minimizes the recompilation that users are required to\n+  perform, shortening the detect-compile-debug bughunting cycle\n+  and making the debug mode easier to incorporate into development\n+  environments by minimizing dependencies.</para>\n+\n+<para>Achieving link- and run-time coexistence is not a trivial\n+  implementation task. To achieve this goal we required a small\n+  extension to the GNU C++ compiler (described in the GCC Manual for\n+  C++ Extensions, see <ulink url=\"http://gcc.gnu.org/onlinedocs/gcc/Strong-Using.html\">strong\n+  using</ulink>), and a complex organization of debug- and\n+  release-modes. The end result is that we have achieved per-use\n+  recompilation but have had to give up some checking of the\n+  <code>std::basic_string</code> class template (namely, safe\n+  iterators).\n+</para>\n+\n+ <sect4 id=\"methods.coexistence.compile\" xreflabel=\"Compile\">\n+   <title>Compile-time coexistence of release- and debug-mode components</title>\n+\n+<para>Both the release-mode components and the debug-mode\n+  components need to exist within a single translation unit so that\n+  the debug versions can wrap the release versions. However, only one\n+  of these components should be user-visible at any particular\n+  time with the standard name, e.g., <code>std::list</code>. </para>\n+\n+<para>In release mode, we define only the release-mode version of the\n+  component with its standard name and do not include the debugging\n+  component at all. The release mode version is defined within the\n+  namespace <code>std</code>. Minus the namespace associations, this\n+  method leaves the behavior of release mode completely unchanged from\n+  its behavior prior to the introduction of the libstdc++ debug\n+  mode. Here's an example of what this ends up looking like, in\n+  C++.</para>\n+\n+<programlisting>\n+namespace std\n+{\n+  template&lt;typename _Tp, typename _Alloc = allocator&lt;_Tp&gt; &gt;\n+    class list\n+    {\n+      // ...\n+     };\n+} // namespace std\n+</programlisting>\n+  \n+<para>In debug mode we include the release-mode container (which is now\n+defined in in the namespace <code>__norm</code>) and also the\n+debug-mode container. The debug-mode container is defined within the\n+namespace <code>__debug</code>, which is associated with namespace\n+<code>std</code> via the GNU namespace association extension.  This\n+method allows the debug and release versions of the same component to\n+coexist at compile-time and link-time without causing an unreasonable\n+maintenance burden, while minimizing confusion. Again, this boils down\n+to C++ code as follows:</para>\n+\n+<programlisting>\n+namespace std\n+{\n+  namespace __norm\n+  {\n+    template&lt;typename _Tp, typename _Alloc = allocator&lt;_Tp&gt; &gt;\n+      class list\n+      {\n+        // ...\n+      };\n+  } // namespace __gnu_norm\n+\n+  namespace __debug\n+  {\n+    template&lt;typename _Tp, typename _Alloc = allocator&lt;_Tp&gt; &gt;\n+      class list\n+      : public __norm::list&lt;_Tp, _Alloc&gt;,\n+        public __gnu_debug::_Safe_sequence&lt;list&lt;_Tp, _Alloc&gt; &gt;\n+      {\n+        // ...\n+      };\n+  } // namespace __norm\n+\n+  using namespace __debug __attribute__ ((strong));\n+}\n+</programlisting>\n+ </sect4>\n+\n+ <sect4 id=\"methods.coexistence.link\" xreflabel=\"Link\">\n+   <title>Link- and run-time coexistence of release- and\n+    debug-mode components</title>\n+\n+<para>Because each component has a distinct and separate release and\n+debug implementation, there are are no issues with link-time\n+coexistence: the separate namespaces result in different mangled\n+names, and thus unique linkage.</para>\n+\n+<para>However, components that are defined and used within the C++\n+standard library itself face additional constraints. For instance,\n+some of the member functions of <code> std::moneypunct</code> return\n+<code>std::basic_string</code>. Normally, this is not a problem, but\n+with a mixed mode standard library that could be using either\n+debug-mode or release-mode <code> basic_string</code> objects, things\n+get more complicated.  As the return value of a function is not\n+encoded into the mangled name, there is no way to specify a\n+release-mode or a debug-mode string. In practice, this results in\n+runtime errors. A simplified example of this problem is as follows.\n+</para>\n+\n+<para> Take this translation unit, compiled in debug-mode: </para>\n+<programlisting>\n+// -D_GLIBCXX_DEBUG\n+#include &lt;string&gt;\n+\n+std::string test02();\n+ \n+std::string test01()\n+{\n+  return test02();\n+}\n+ \n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+</programlisting>\n+\n+<para> ... and linked to this translation unit, compiled in release mode:</para>\n+\n+<programlisting>\n+#include &lt;string&gt;\n+ \n+std::string\n+test02()\n+{\n+  return std::string(\"toast\");\n+}\n+</programlisting>\n+\n+<para> For this reason we cannot easily provide safe iterators for\n+  the <code>std::basic_string</code> class template, as it is present\n+  throughout the C++ standard library. For instance, locale facets\n+  define typedefs that include <code>basic_string</code>: in a mixed\n+  debug/release program, should that typedef be based on the\n+  debug-mode <code>basic_string</code> or the\n+  release-mode <code>basic_string</code>? While the answer could be\n+  \"both\", and the difference hidden via renaming a la the\n+  debug/release containers, we must note two things about locale\n+  facets:</para>\n+\n+<orderedlist>\n+  <listitem><para>They exist as shared state: one can create a facet in one\n+  translation unit and access the facet via the same type name in a\n+  different translation unit. This means that we cannot have two\n+  different versions of locale facets, because the types would not be\n+  the same across debug/release-mode translation unit barriers.</para></listitem>\n+\n+  <listitem><para>They have virtual functions returning strings: these functions\n+  mangle in the same way regardless of the mangling of their return\n+  types (see above), and their precise signatures can be relied upon\n+  by users because they may be overridden in derived classes.</para></listitem>\n+</orderedlist>\n+\n+<para>With the design of libstdc++ debug mode, we cannot effectively hide\n+  the differences between debug and release-mode strings from the\n+  user. Failure to hide the differences may result in unpredictable\n+  behavior, and for this reason we have opted to only\n+  perform <code>basic_string</code> changes that do not require ABI\n+  changes. The effect on users is expected to be minimal, as there are\n+  simple alternatives (e.g., <code>__gnu_debug::basic_string</code>),\n+  and the usability benefit we gain from the ability to mix debug- and\n+  release-compiled translation units is enormous.</para>\n+ </sect4>\n+\n+ <sect4 id=\"methods.coexistence.alt\" xreflabel=\"Alternatives\">\n+<title>Alternatives for Coexistence</title>\n+\n+<para>The coexistence scheme above was chosen over many alternatives,\n+  including language-only solutions and solutions that also required\n+  extensions to the C++ front end. The following is a partial list of\n+  solutions, with justifications for our rejection of each.</para>\n+\n+<itemizedlist>\n+  <listitem><para><emphasis>Completely separate debug/release libraries</emphasis>: This is by\n+  far the simplest implementation option, where we do not allow any\n+  coexistence of debug- and release-compiled translation units in a\n+  program. This solution has an extreme negative affect on usability,\n+  because it is quite likely that some libraries an application\n+  depends on cannot be recompiled easily. This would not meet\n+  our <emphasis>usability</emphasis> or <emphasis>minimize recompilation</emphasis> criteria\n+  well.</para></listitem>\n+\n+  <listitem><para><emphasis>Add a <code>Debug</code> boolean template parameter</emphasis>:\n+  Partial specialization could be used to select the debug\n+  implementation when <code>Debug == true</code>, and the state\n+  of <code>_GLIBCXX_DEBUG</code> could decide whether the\n+  default <code>Debug</code> argument is <code>true</code>\n+  or <code>false</code>. This option would break conformance with the\n+  C++ standard in both debug <emphasis>and</emphasis> release modes. This would\n+  not meet our <emphasis>correctness</emphasis> criteria. </para></listitem>\n+\n+  <listitem><para><emphasis>Packaging a debug flag in the allocators</emphasis>: We could\n+    reuse the <code>Allocator</code> template parameter of containers\n+    by adding a sentinel wrapper <code>debug&lt;&gt;</code> that\n+    signals the user's intention to use debugging, and pick up\n+    the <code>debug&lt;&gt;</code> allocator wrapper in a partial\n+    specialization. However, this has two drawbacks: first, there is a\n+    conformance issue because the default allocator would not be the\n+    standard-specified <code>std::allocator&lt;T&gt;</code>. Secondly\n+    (and more importantly), users that specify allocators instead of\n+    implicitly using the default allocator would not get debugging\n+    containers. Thus this solution fails the <emphasis>correctness</emphasis>\n+    criteria.</para></listitem>\n+\n+  <listitem><para><emphasis>Define debug containers in another namespace, and employ\n+      a <code>using</code> declaration (or directive)</emphasis>: This is an\n+      enticing option, because it would eliminate the need for\n+      the <code>link_name</code> extension by aliasing the\n+      templates. However, there is no true template aliasing mechanism\n+      is C++, because both <code>using</code> directives and using\n+      declarations disallow specialization. This method fails\n+      the <emphasis>correctness</emphasis> criteria.</para></listitem>\n+\n+  <listitem><para><emphasis> Use implementation-specific properties of anonymous\n+    namespaces. </emphasis>\n+    See <ulink url=\"http://gcc.gnu.org/ml/libstdc++/2003-08/msg00004.html\"> this post\n+    </ulink>\n+    This method fails the <emphasis>correctness</emphasis> criteria.</para></listitem>\n+\n+  <listitem><para><emphasis>Extension: allow reopening on namespaces</emphasis>: This would\n+    allow the debug mode to effectively alias the\n+    namespace <code>std</code> to an internal namespace, such\n+    as <code>__gnu_std_debug</code>, so that it is completely\n+    separate from the release-mode <code>std</code> namespace. While\n+    this will solve some renaming problems and ensure that\n+    debug- and release-compiled code cannot be mixed unsafely, it ensures that\n+    debug- and release-compiled code cannot be mixed at all. For\n+    instance, the program would have two <code>std::cout</code>\n+    objects! This solution would fails the <emphasis>minimize\n+    recompilation</emphasis> requirement, because we would only be able to\n+    support option (1) or (2).</para></listitem>\n+\n+  <listitem><para><emphasis>Extension: use link name</emphasis>: This option involves\n+    complicated re-naming between debug-mode and release-mode\n+    components at compile time, and then a g++ extension called <emphasis>\n+    link name </emphasis> to recover the original names at link time. There\n+    are two drawbacks to this approach. One, it's very verbose,\n+    relying on macro renaming at compile time and several levels of\n+    include ordering. Two, ODR issues remained with container member\n+    functions taking no arguments in mixed-mode settings resulting in\n+    equivalent link names, <code> vector::push_back() </code> being\n+    one example. \n+    See <ulink url=\"http://gcc.gnu.org/ml/libstdc++/2003-08/msg00177.html\">link\n+    name</ulink> </para></listitem>\n+</itemizedlist>\n+\n+<para>Other options may exist for implementing the debug mode, many of\n+  which have probably been considered and others that may still be\n+  lurking. This list may be expanded over time to include other\n+  options that we could have implemented, but in all cases the full\n+  ramifications of the approach (as measured against the design goals\n+  for a libstdc++ debug mode) should be considered first. The DejaGNU\n+  testsuite includes some testcases that check for known problems with\n+  some solutions (e.g., the <code>using</code> declaration solution\n+  that breaks user specialization), and additional testcases will be\n+  added as we are able to identify other typical problem cases. These\n+  test cases will serve as a benchmark by which we can compare debug\n+  mode implementations.</para>\n+ </sect4>\n+  </sect3>\n+  </sect2>  \n+\n+  <sect2 id=\"manual.ext.debug_mode.design.other\" xreflabel=\"Other\">\n+    <title>Other Implementations</title>\n+    <para>\n+    </para>\n+<para> There are several existing implementations of debug modes for C++\n+  standard library implementations, although none of them directly\n+  supports debugging for programs using libstdc++. The existing\n+  implementations include:</para>\n+<itemizedlist>\n+  <listitem><para><ulink url=\"http://www.mathcs.sjsu.edu/faculty/horstman/safestl.html\">SafeSTL</ulink>:\n+  SafeSTL was the original debugging version of the Standard Template\n+  Library (STL), implemented by Cay S. Horstmann on top of the\n+  Hewlett-Packard STL. Though it inspired much work in this area, it\n+  has not been kept up-to-date for use with modern compilers or C++\n+  standard library implementations.</para></listitem>\n+\n+  <listitem><para><ulink url=\"http://www.stlport.org/\">STLport</ulink>: STLport is a free\n+  implementation of the C++ standard library derived from the <ulink url=\"http://www.sgi.com/tech/stl/\">SGI implementation</ulink>, and\n+  ported to many other platforms. It includes a debug mode that uses a\n+  wrapper model (that in some way inspired the libstdc++ debug mode\n+  design), although at the time of this writing the debug mode is\n+  somewhat incomplete and meets only the \"Full user recompilation\" (2)\n+  recompilation guarantee by requiring the user to link against a\n+  different library in debug mode vs. release mode.</para></listitem>\n+\n+  <listitem><para><ulink url=\"http://www.metrowerks.com/mw/default.htm\">Metrowerks\n+  CodeWarrior</ulink>: The C++ standard library that ships with Metrowerks\n+  CodeWarrior includes a debug mode. It is a full debug-mode\n+  implementation (including debugging for CodeWarrior extensions) and\n+  is easy to use, although it meets only the \"Full recompilation\" (1)\n+  recompilation guarantee.</para></listitem>\n+</itemizedlist>\n+\n+  </sect2>  \n+</sect1>\n+\n+</chapter>"}, {"sha": "f43614c861e7ccccc2f45458da9ada9a33bc7128", "filename": "libstdc++-v3/doc/xml/manual/diagnostics.xml", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fdiagnostics.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fdiagnostics.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fdiagnostics.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,126 @@\n+<?xml version='1.0'?>\n+<!DOCTYPE part PUBLIC \"-//OASIS//DTD DocBook XML V4.5//EN\" \n+ \"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\" \n+[ ]>\n+\n+<part id=\"manual.diagnostics\" xreflabel=\"Diagnostics\">\n+<?dbhtml filename=\"diagnostics.html\"?>\n+ \n+<partinfo>\n+  <keywordset>\n+    <keyword>\n+      ISO C++\n+    </keyword>\n+    <keyword>\n+      library\n+    </keyword>\n+  </keywordset>\n+</partinfo>\n+\n+<title>Diagnostics</title>\n+\n+<chapter id=\"manual.diagnostics.exceptions\" xreflabel=\"Exceptions\">\n+  <title>Exceptions</title>\n+\n+  <sect1 id=\"manual.diagnostics.exceptions.hierarchy\" xreflabel=\"Exception Classes\">\n+    <title>Exception Classes</title>\n+    <para>\n+      All exception objects are defined in one of the standard header\n+      files: <filename>exception</filename>,\n+      <filename>stdexcept</filename>, <filename>new</filename>, and\n+      <filename>typeinfo</filename>.\n+    </para>\n+\n+    <para>\n+      The base exception object is <classname>exception</classname>,\n+      located in <filename>exception</filename>. This object has no\n+      <classname>string</classname> member.\n+    </para>\n+\n+    <para>\n+      Derived from this are several classes that may have a\n+      <classname>string</classname> member: a full heirarchy can be\n+      found in the <ulink url=\"http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/a00233.html\">source documentation</ulink>.\n+    </para>\n+\n+  </sect1>\n+  <sect1 id=\"manual.diagnostics.exceptions.data\" xreflabel=\"Adding Data to Exceptions\">\n+    <title>Adding Data to Exceptions</title>\n+    <para>\n+      The standard exception classes carry with them a single string as\n+      data (usually describing what went wrong or where the 'throw' took\n+    place).  It's good to remember that you can add your own data to\n+    these exceptions when extending the hierarchy:\n+   </para>\n+   <programlisting>\n+   struct My_Exception : public std::runtime_error\n+   {\n+     public:\n+       My_Exception (const string&amp; whatarg)\n+           : std::runtime_error(whatarg), e(errno), id(GetDataBaseID()) { }\n+       int  errno_at_time_of_throw() const { return e; }\n+       DBID id_of_thing_that_threw() const { return id; }\n+     protected:\n+       int    e;\n+       DBID   id;     // some user-defined type\n+   };\n+   </programlisting>\n+\n+  </sect1>  \n+  <sect1 id=\"manual.diagnostics.exceptions.cancellation\" xreflabel=\"Cancellation\">\n+    <title>Cancellation</title>\n+    <para>\n+    </para>\n+  </sect1>  \n+</chapter>\n+\n+<chapter id=\"manual.diagnostics.concept_checking\" xreflabel=\"Concept Checking\">\n+  <title>Concept Checking</title>\n+  <para>\n+    In 1999, SGI added <quote>concept checkers</quote> to their\n+    implementation of the STL: code which checked the template\n+    parameters of instantiated pieces of the STL, in order to insure\n+    that the parameters being used met the requirements of the\n+    standard.  For example, the Standard requires that types passed as\n+    template parameters to <classname>vector</classname> be\n+    &quot;Assignable&quot; (which means what you think it means).  The\n+    checking was done during compilation, and none of the code was\n+    executed at runtime.\n+   </para>\n+   <para>\n+     Unfortunately, the size of the compiler files grew significantly\n+     as a result.  The checking code itself was cumbersome.  And bugs\n+     were found in it on more than one occasion.\n+   </para>\n+   <para>\n+     The primary author of the checking code, Jeremy Siek, had already\n+     started work on a replacement implementation.  The new code has been\n+     formally reviewed and accepted into\n+   <ulink url=\"http://www.boost.org/libs/concept_check/concept_check.htm\">the\n+   Boost libraries</ulink>, and we are pleased to incorporate it into the\n+   GNU C++ library.\n+ </para>\n+ <para>\n+   The new version imposes a much smaller space overhead on the generated\n+   object file.  The checks are also cleaner and easier to read and\n+   understand.\n+ </para>\n+\n+ <para>\n+   They are off by default for all versions of GCC.\n+   They can be enabled at configure time with\n+   <ulink url=\"../configopts.html\"><literal>--enable-concept-checks</literal></ulink>.\n+   You can enable them on a per-translation-unit basis with\n+     <literal>-D_GLIBCXX_CONCEPT_CHECKS</literal>.\n+ </para>\n+ \n+ <para>\n+   Please note that the upcoming C++ standard has first-class\n+   support for template parameter constraints based on concepts in the core\n+   language. This will obviate the need for the library-simulated concept\n+   checking described above.\n+ </para>\n+\n+</chapter>\n+\n+</part>"}, {"sha": "296e228311a4e1146474a6a40a2b89155318b9c7", "filename": "libstdc++-v3/doc/xml/manual/evolution.xml", "status": "added", "additions": 452, "deletions": 0, "changes": 452, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fevolution.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fevolution.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fevolution.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,452 @@\n+<sect1 id=\"appendix.porting.api\" xreflabel=\"api\">\n+<?dbhtml filename=\"api.html\"?>\n+ \n+<sect1info>\n+  <keywordset>\n+    <keyword>ISO C++</keyword>\n+    <keyword>api</keyword>\n+    <keyword>evolution</keyword>\n+    <keyword>deprecation</keyword>\n+    <keyword>history</keyword>\n+  </keywordset>\n+</sect1info>\n+\n+<title>API Evolution and Deprecation History</title>\n+\n+<para>\n+A list of user-visible changes, in cronological order\n+</para>\n+\n+<sect2 id=\"api.rel_300\" xreflabel=\"api.rel_300\">\n+<title><constant>3.0</constant></title>\n+\n+  <para>\n+Extensions moved to <filename class=\"directory\">include/ext</filename>.\n+  </para>\n+\n+<para>\n+Include files from the SGI/HP sources that pre-date the ISO standard\n+are added. These files are placed into\n+the <filename class=\"directory\">include/backward</filename> directory and a deprecated warning\n+is added that notifies on inclusion (<literal>-Wno-deprecated</literal>\n+deactivates the warning.)\n+</para>\n+\n+<para>Deprecated include <filename class=\"headerfile\">backward/strstream</filename> added.</para>\n+\n+<para>Removal of include <filename class=\"headerfile\">builtinbuf.h</filename>, <filename class=\"headerfile\">indstream.h</filename>, <filename class=\"headerfile\">parsestream.h</filename>, <filename class=\"headerfile\">PlotFile.h</filename>, <filename class=\"headerfile\">SFile.h</filename>, <filename class=\"headerfile\">stdiostream.h</filename>, and <filename class=\"headerfile\">stream.h</filename>.\n+</para>\n+\n+\n+\n+</sect2>\n+\n+<sect2 id=\"api.rel_310\" xreflabel=\"api.rel_310\">\n+<title><constant>3.1</constant></title>\n+  <para>\n+  </para>\n+\n+<para>\n+Extensions from SGI/HP moved from <code>namespace std</code>\n+to <code>namespace __gnu_cxx</code>. As part of this, the following\n+new includes are\n+added: <filename class=\"headerfile\">ext/algorithm</filename>, <filename class=\"headerfile\">ext/functional</filename>, <filename class=\"headerfile\">ext/iterator</filename>, <filename class=\"headerfile\">ext/memory</filename>, and <filename class=\"headerfile\">ext/numeric</filename>.\n+</para>\n+\n+<para>\n+Extensions to <code>basic_filebuf</code> introduced: <code>__gnu_cxx::enc_filebuf</code>, and <code>__gnu_cxx::stdio_filebuf</code>.\n+</para>\n+\n+<para>\n+Extensions to tree data structures added in <filename class=\"headerfile\">ext/rb_tree</filename>.\n+</para>\n+\n+<para>\n+Removal of <filename class=\"headerfile\">ext/tree</filename>, moved to <filename class=\"headerfile\">backward/tree.h</filename>.\n+</para>\n+\n+</sect2>\n+\n+<sect2 id=\"api.rel_320\" xreflabel=\"api.rel_320\">\n+<title><constant>3.2</constant></title>\n+  <para>\n+  </para>\n+<para>Symbol versioning introduced for shared library.</para>\n+\n+<para>Removal of include <filename class=\"headerfile\">backward/strstream.h</filename>.</para>\n+\n+<para>Allocator changes. Change <code>__malloc_alloc</code> to <code>malloc_allocator</code> and <code>__new_alloc</code> to <code>new_allocator</code>. </para>\n+\n+   <para> For GCC releases from 2.95 through the 3.1 series, defining\n+   <literal>__USE_MALLOC</literal> on the gcc command line would change the\n+   default allocation strategy to instead use <code> malloc</code> and\n+   <function>free</function>. See \n+   <ulink url=\"../23_containers/howto.html#3\">this note</ulink> \n+   for details as to why this was something needing improvement.\n+   </para> \n+\n+\n+<para>Error handling in iostreams cleaned up, made consistent. </para>\n+\n+\n+</sect2>\n+\n+<sect2 id=\"api.rel_330\" xreflabel=\"api.rel_330\">\n+<title><constant>3.3</constant></title>\n+  <para>\n+  </para>\n+</sect2>\n+\n+<sect2 id=\"api.rel_340\" xreflabel=\"api.rel_340\">\n+<title><constant>3.4</constant></title>\n+  <para>\n+  </para>\n+<para>\n+Large file support.\n+</para>\n+\n+<para> Extensions for generic characters and <code>char_traits</code> added in <filename class=\"headerfile\">ext/pod_char_traits.h</filename>.\n+</para>\n+\n+<para>\n+Support for <code>wchar_t</code> specializations of <code>basic_filebuf</code> enhanced to support <code>UTF-8</code> and <code>Unicode</code>, depending on host. More hosts support basic <code>wchar_t</code> functionality.\n+</para>\n+\n+<para>\n+Support for <code>char_traits</code> beyond builtin types.\n+</para>\n+\n+<para>\n+Conformant <code>allocator</code> class and usage in containers. As\n+part of this, the following extensions are\n+added: <filename class=\"headerfile\">ext/bitmap_allocator.h</filename>, <filename class=\"headerfile\">ext/debug_allocator.h</filename>, <filename class=\"headerfile\">ext/mt_allocator.h</filename>, <filename class=\"headerfile\">ext/malloc_allocator.h</filename>,<filename class=\"headerfile\">ext/new_allocator.h</filename>, <filename class=\"headerfile\">ext/pool_allocator.h</filename>.\n+</para>\n+\n+<para>\n+This is a change from all previous versions, and may require\n+source-level changes due to allocator-related changes to structures\n+names and template parameters, filenames, and file locations. Some,\n+like <code>__simple_alloc, __allocator, __alloc, </code> and <code>\n+_Alloc_traits</code> have been removed.\n+</para>\n+\n+<para>Default behavior of <code>std::allocator</code> has changed.</para>\n+\n+<para>\n+   Previous versions prior to 3.4 cache allocations in a memory\n+   pool, instead of passing through to call the global allocation\n+   operators (ie, <classname>__gnu_cxx::pool_allocator</classname>).  More\n+   recent versions default to the\n+   simpler <classname>__gnu_cxx::new_allocator</classname>.\n+</para>\n+\n+<para> Previously, all allocators were written to the SGI\n+   style, and all STL containers expected this interface. This\n+   interface had a traits class called <code>_Alloc_traits</code> that\n+   attempted to provide more information for compile-time allocation\n+   selection and optimization. This traits class had another allocator\n+   wrapper, <code>__simple_alloc&lt;T,A&gt;</code>, which was a\n+   wrapper around another allocator, A, which itself is an allocator\n+   for instances of T. But wait, there's more:\n+   <code>__allocator&lt;T,A&gt;</code> is another adapter.  Many of\n+   the provided allocator classes were SGI style: such classes can be\n+   changed to a conforming interface with this wrapper:\n+   <code>__allocator&lt;T, __alloc&gt;</code> is thus the same as\n+   <code>allocator&lt;T&gt;</code>.\n+   </para>\n+\n+   <para> The class <classname>allocator</classname> used the typedef\n+   <type>__alloc</type> to select an underlying allocator that\n+   satisfied memory allocation requests. The selection of this\n+   underlying allocator was not user-configurable.\n+   </para>\n+\n+<table frame='all'>\n+<title>Extension Allocators</title>\n+<tgroup cols='4' align='left' colsep='1' rowsep='1'>\n+<colspec colname='c1'></colspec>\n+<colspec colname='c2'></colspec>\n+<colspec colname='c3'></colspec>\n+<colspec colname='c4'></colspec>\n+\n+  <thead>\n+    <row>\n+      <entry>Allocator (3.4)</entry>\n+      <entry>Header (3.4)</entry>\n+      <entry>Allocator (3.[0-3])</entry>\n+      <entry>Header (3.[0-3])</entry>\n+    </row>\n+  </thead>\n+\n+  <tbody>\n+  <row>\n+    <entry><classname>__gnu_cxx::new_allocator&lt;T&gt;</classname></entry>\n+    <entry><filename class=\"headerfile\">ext/new_allocator.h</filename></entry>\n+    <entry><classname>std::__new_alloc</classname></entry>\n+    <entry><filename class=\"headerfile\">memory</filename></entry>\n+  </row>\n+  <row>\n+    <entry><classname>__gnu_cxx::malloc_allocator&lt;T&gt;</classname></entry>\n+    <entry><filename class=\"headerfile\">ext/malloc_allocator.h</filename></entry>\n+    <entry><classname>std::__malloc_alloc_template&lt;int&gt;</classname></entry>\n+    <entry><filename class=\"headerfile\">memory</filename></entry>\n+  </row>\n+  <row>\n+    <entry><classname>__gnu_cxx::debug_allocator&lt;T&gt;</classname></entry>\n+    <entry><filename class=\"headerfile\">ext/debug_allocator.h</filename></entry>\n+    <entry><classname>std::debug_alloc&lt;T&gt;</classname></entry>\n+    <entry><filename class=\"headerfile\">memory</filename></entry>\n+  </row>\n+  <row>\n+    <entry><classname>__gnu_cxx::__pool_alloc&lt;T&gt;</classname></entry>\n+    <entry><filename class=\"headerfile\">ext/pool_allocator.h</filename></entry>\n+    <entry><classname>std::__default_alloc_template&lt;bool,int&gt;</classname></entry>\n+    <entry><filename class=\"headerfile\">memory</filename></entry>\n+  </row>\n+  <row>\n+    <entry><classname>__gnu_cxx::__mt_alloc&lt;T&gt;</classname></entry>\n+    <entry><filename class=\"headerfile\">ext/mt_allocator.h</filename></entry>\n+    <entry> </entry>\n+    <entry> </entry>\n+  </row>\n+  <row>\n+    <entry><classname>__gnu_cxx::bitmap_allocator&lt;T&gt;</classname></entry>\n+    <entry><filename class=\"headerfile\">ext/bitmap_allocator.h</filename></entry>\n+    <entry> </entry>\n+    <entry> </entry>\n+  </row>\n+  </tbody>\n+</tgroup>\n+</table>\n+\n+   <para> Releases after gcc-3.4 have continued to add to the collection\n+   of available allocators. All of these new allocators are\n+   standard-style. The following table includes details, along with\n+   the first released version of GCC that included the extension allocator.\n+   </para>\n+\n+<table frame='all'>\n+<title>Extension Allocators Continued</title>\n+<tgroup cols='3' align='left' colsep='1' rowsep='1'>\n+<colspec colname='c1'></colspec>\n+<colspec colname='c2'></colspec>\n+<colspec colname='c3'></colspec>\n+\n+<thead>\n+  <row>\n+    <entry>Allocator</entry>\n+    <entry>Include</entry>\n+    <entry>Version</entry>\n+  </row>\n+</thead>\n+\n+<tbody>\n+  <row>\n+    <entry><classname>__gnu_cxx::array_allocator&lt;T&gt;</classname></entry>\n+    <entry><filename class=\"headerfile\">ext/array_allocator.h</filename></entry>\n+    <entry>4.0.0</entry>\n+  </row>\n+  <row>\n+    <entry><classname>__gnu_cxx::throw_allocator&lt;T&gt;</classname></entry>\n+    <entry><filename class=\"headerfile\">ext/throw_allocator.h</filename></entry>\n+    <entry>4.2.0</entry>\n+  </row>\n+</tbody>\n+</tgroup>\n+</table>\n+\n+\n+<para>\n+Debug mode first appears.\n+</para>\n+\n+<para>\n+Precompiled header support <acronym>PCH</acronym> support.\n+</para>\n+\n+<para>\n+Macro guard for changed, from <literal>_GLIBCPP_</literal> to <literal>_GLIBCXX_</literal>.\n+</para>\n+\n+<para>\n+Extension <filename class=\"headerfile\">ext/stdio_sync_filebuf.h</filename> added.\n+</para>\n+\n+<para>\n+Extension <filename class=\"headerfile\">ext/demangle.h</filename> added.\n+</para>\n+\n+\n+</sect2>\n+\n+<sect2 id=\"api.rel_400\" xreflabel=\"api.rel_400\">\n+<title><constant>4.0</constant></title>\n+  <para>\n+  </para>\n+<para>\n+TR1 features first appear.\n+</para>\n+\n+<para>\n+Extension allocator <filename class=\"headerfile\">ext/array_allocator.h</filename> added.\n+</para>\n+\n+<para>\n+Extension <code>codecvt</code> specializations moved to <filename class=\"headerfile\">ext/codecvt_specializations.h</filename>.\n+</para>\n+\n+<para>\n+Removal of <filename class=\"headerfile\">ext/demangle.h</filename>.\n+</para>\n+\n+\n+</sect2>\n+\n+<sect2 id=\"api.rel_410\" xreflabel=\"api.rel_410\">\n+<title><constant>4.1</constant></title>\n+  <para>\n+  </para>\n+\n+\n+<para>\n+Removal of <filename class=\"headerfile\">cassert</filename> from all standard headers: now has to be explicitly included for <code>std::assert</code> calls.\n+</para>\n+\n+<para> Extensions for policy-based data structures first added. New includes,\n+types, namespace <code>pb_assoc</code>.\n+</para>\n+\n+\n+\n+<para> Extensions for typelists added in <filename class=\"headerfile\">ext/typelist.h</filename>.\n+</para>\n+\n+<para> Extension for policy-based <code>basic_string</code> first added: <code>__gnu_cxx::__versa_string</code> in <filename class=\"headerfile\">ext/vstring.h</filename>.\n+</para>\n+\n+</sect2>\n+\n+<sect2 id=\"api.rel_420\" xreflabel=\"api.rel_420\">\n+<title><constant>4.2</constant></title>\n+  <para>\n+  </para>\n+\n+\n+<para> Default visibility attributes applied to <code>namespace std</code>. Support for <code>-fvisibility</code>.\n+</para>\n+\n+<para>TR1 <filename class=\"headerfile\">random</filename>, <filename class=\"headerfile\">complex</filename>, and C compatibility headers added.</para>\n+\n+<para> Extensions for concurrent programming consolidated\n+into <filename class=\"headerfile\">ext/concurrence.h</filename> and <filename class=\"headerfile\">ext/atomicity.h</filename>,\n+including change of namespace to <code>__gnu_cxx</code> in some\n+cases. Added types\n+include <code>_Lock_policy</code>, <code>__concurrence_lock_error</code>, <code>__concurrence_unlock_error</code>, <code>__mutex</code>, <code>__scoped_lock</code>.</para>\n+\n+<para> Extensions for type traits consolidated\n+into <filename class=\"headerfile\">ext/type_traits.h</filename>. Additional traits are added\n+(<code>__conditional_type</code>, <code>__enable_if</code>, others.)\n+</para>\n+\n+<para> Extensions for policy-based data structures revised. New includes,\n+types, namespace moved to <code>__pb_ds</code>.\n+</para>\n+\n+<para> Extensions for debug mode modified: now nested in <code>namespace\n+std::__debug</code> and extensions in <code>namespace\n+__gnu_cxx::__debug</code>.</para>\n+\n+<para> Extensions added: <filename class=\"headerfile\">ext/typelist.h</filename>\n+and <filename class=\"headerfile\">ext/throw_allocator.h</filename>.\n+</para>\n+\n+</sect2>\n+\n+<sect2 id=\"api.rel_430\" xreflabel=\"api.rel_430\">\n+<title><constant>4.3</constant></title>\n+  <para>\n+  </para>\n+\n+\n+<para>\n+C++0X features first appear.\n+</para>\n+\n+<para>TR1 <filename class=\"headerfile\">regex</filename> and <filename class=\"headerfile\">cmath</filename>'s mathematical special function added.</para>\n+\n+<para>\n+Backward include edit.\n+</para>\n+<itemizedlist>\n+  <listitem>\n+    <para>Removed</para>\n+  <para>\n+<filename class=\"headerfile\">algobase.h</filename> <filename class=\"headerfile\">algo.h</filename> <filename class=\"headerfile\">alloc.h</filename> <filename class=\"headerfile\">bvector.h</filename> <filename class=\"headerfile\">complex.h</filename>\n+<filename class=\"headerfile\">defalloc.h</filename> <filename class=\"headerfile\">deque.h</filename> <filename class=\"headerfile\">fstream.h</filename> <filename class=\"headerfile\">function.h</filename> <filename class=\"headerfile\">hash_map.h</filename> <filename class=\"headerfile\">hash_set.h</filename>\n+<filename class=\"headerfile\">hashtable.h</filename> <filename class=\"headerfile\">heap.h</filename> <filename class=\"headerfile\">iomanip.h</filename> <filename class=\"headerfile\">iostream.h</filename> <filename class=\"headerfile\">istream.h</filename> <filename class=\"headerfile\">iterator.h</filename>\n+<filename class=\"headerfile\">list.h</filename> <filename class=\"headerfile\">map.h</filename> <filename class=\"headerfile\">multimap.h</filename> <filename class=\"headerfile\">multiset.h</filename> <filename class=\"headerfile\">new.h</filename> <filename class=\"headerfile\">ostream.h</filename> <filename class=\"headerfile\">pair.h</filename> <filename class=\"headerfile\">queue.h</filename> <filename class=\"headerfile\">rope.h</filename> <filename class=\"headerfile\">set.h</filename> <filename class=\"headerfile\">slist.h</filename> <filename class=\"headerfile\">stack.h</filename> <filename class=\"headerfile\">streambuf.h</filename> <filename class=\"headerfile\">stream.h</filename> <filename class=\"headerfile\">tempbuf.h</filename>\n+<filename class=\"headerfile\">tree.h</filename> <filename class=\"headerfile\">vector.h</filename>\n+  </para>\n+  </listitem>\n+  <listitem>\n+    <para>Added</para>\n+  <para>\n+  <filename class=\"headerfile\">hash_map</filename> and <filename class=\"headerfile\">hash_set</filename>\n+  </para>\n+  </listitem>\n+  <listitem>\n+    <para>Added in C++0x</para>\n+  <para>\n+    <filename class=\"headerfile\">auto_ptr.h</filename> and <filename class=\"headerfile\">binders.h</filename>\n+  </para>\n+  </listitem>\n+\n+</itemizedlist>\n+\n+<para>\n+Header dependency streamlining.\n+</para>\n+\n+<itemizedlist>\n+  <listitem><para><filename class=\"headerfile\">algorithm</filename> no longer includes <filename class=\"headerfile\">climits</filename>, <filename class=\"headerfile\">cstring</filename>, or <filename class=\"headerfile\">iosfwd</filename> </para></listitem>\n+  <listitem><para><filename class=\"headerfile\">bitset</filename> no longer includes <filename class=\"headerfile\">istream</filename> or <filename class=\"headerfile\">ostream</filename>, adds <filename class=\"headerfile\">iosfwd</filename> </para></listitem>\n+  <listitem><para><filename class=\"headerfile\">functional</filename> no longer includes <filename class=\"headerfile\">cstddef</filename></para></listitem>\n+  <listitem><para><filename class=\"headerfile\">iomanip</filename> no longer includes <filename class=\"headerfile\">istream</filename>, <filename class=\"headerfile\">istream</filename>, or <filename class=\"headerfile\">functional</filename>, adds <filename class=\"headerfile\">ioswd</filename> </para></listitem>\n+  <listitem><para><filename class=\"headerfile\">numeric</filename> no longer includes <filename class=\"headerfile\">iterator</filename></para></listitem>\n+  <listitem><para><filename class=\"headerfile\">string</filename> no longer includes <filename class=\"headerfile\">algorithm</filename> or <filename class=\"headerfile\">memory</filename></para></listitem>\n+\n+  <listitem><para><filename class=\"headerfile\">valarray</filename> no longer includes <filename class=\"headerfile\">numeric</filename> or <filename class=\"headerfile\">cstdlib</filename></para></listitem>\n+  <listitem><para><filename class=\"headerfile\">tr1/hashtable</filename> no longer includes <filename class=\"headerfile\">memory</filename> or <filename class=\"headerfile\">functional</filename></para></listitem>\n+  <listitem><para><filename class=\"headerfile\">tr1/memory</filename> no longer includes <filename class=\"headerfile\">algorithm</filename></para></listitem>\n+  <listitem><para><filename class=\"headerfile\">tr1/random</filename> no longer includes <filename class=\"headerfile\">algorithm</filename> or <filename class=\"headerfile\">fstream</filename></para></listitem>\n+</itemizedlist>\n+\n+<para>\n+Debug mode for <filename class=\"headerfile\">unordered_map</filename> and <filename class=\"headerfile\">unordered_set</filename>.\n+</para>\n+\n+<para>\n+Parallel mode first appears.\n+</para>\n+\n+<para>Variadic template implementations of items in <filename class=\"headerfile\">tuple</filename> and\n+    <filename class=\"headerfile\">functional</filename>. \n+</para>\n+\n+<para>Default <code>what</code> implementations give more elaborate\n+    exception strings for <code>bad_cast</code>,\n+    <code>bad_typeid</code>, <code>bad_exception</code>, and\n+    <code>bad_alloc</code>.\n+</para>\n+\n+<para>\n+PCH binary files no longer installed. Instead, the source files are installed. \n+</para>\n+\n+<para>\n+Namespace pb_ds moved to __gnu_pb_ds.\n+</para>\n+\n+</sect2>\n+\n+</sect1>\n\\ No newline at end of file"}, {"sha": "517d3bba39fd5f22e1392c09bdce8f3054703551", "filename": "libstdc++-v3/doc/xml/manual/extensions.xml", "status": "added", "additions": 577, "deletions": 0, "changes": 577, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fextensions.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fextensions.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fextensions.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,577 @@\n+<?xml version='1.0'?>\n+<!DOCTYPE part PUBLIC \"-//OASIS//DTD DocBook XML V4.5//EN\" \n+ \"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\" \n+[ ]>\n+\n+<part id=\"manual.ext\" xreflabel=\"Extensions\">\n+<?dbhtml filename=\"extensions.html\"?>\n+ \n+<partinfo>\n+  <keywordset>\n+    <keyword>\n+      ISO C++\n+    </keyword>\n+    <keyword>\n+      library\n+    </keyword>\n+  </keywordset>\n+</partinfo>\n+\n+<title>Extensions</title>\n+\n+<preface>\n+  <title></title>\n+<para>\n+  Here we will make an attempt at describing the non-Standard extensions to\n+  the library.  Some of these are from SGI's STL, some of these are GNU's,\n+  and some just seemed to appear on the doorstep.\n+</para>\n+<para><emphasis>Before</emphasis> you leap in and use any of these\n+extensions, be aware of two things:\n+</para>\n+<orderedlist>\n+   <listitem>\n+     <para>\n+     Non-Standard means exactly that.  \n+     </para>\n+     <para>\n+       The behavior, and the very\n+       existence, of these extensions may change with little or no\n+       warning.  (Ideally, the really good ones will appear in the next\n+       revision of C++.)  Also, other platforms, other compilers, other\n+       versions of g++ or libstdc++ may not recognize these names, or\n+       treat them differently, or... \n+     </para>\n+   </listitem>\n+   <listitem>\n+     <para>\n+       You should know how to <ulink url=\"XXX\">access\n+       these headers properly</ulink>. \n+     </para>\n+   </listitem>\n+</orderedlist>\n+</preface>\n+\n+<!-- Chapter 01 : Compile Time Checks -->\n+<chapter id=\"manual.ext.compile_checks\" xreflabel=\"Compile Time Checks\">\n+  <title>Compile Time Checks</title>\n+  <para>\n+    Also known as concept checking.\n+  </para>\n+   <para>In 1999, SGI added <emphasis>concept checkers</emphasis> to their implementation\n+      of the STL:  code which checked the template parameters of\n+      instantiated pieces of the STL, in order to insure that the parameters\n+      being used met the requirements of the standard.  For example,\n+      the Standard requires that types passed as template parameters to\n+      <code>vector</code> be <quote>Assignable</quote> (which means what you think\n+      it means).  The checking was done during compilation, and none of\n+      the code was executed at runtime.\n+   </para>\n+   <para>Unfortunately, the size of the compiler files grew significantly\n+      as a result.  The checking code itself was cumbersome.  And bugs\n+      were found in it on more than one occasion.\n+   </para>\n+   <para>The primary author of the checking code, Jeremy Siek, had already\n+      started work on a replacement implementation.  The new code has been\n+      formally reviewed and accepted into\n+      <ulink url=\"http://www.boost.org/libs/concept_check/concept_check.htm\">the\n+      Boost libraries</ulink>, and we are pleased to incorporate it into the\n+      GNU C++ library.\n+   </para>\n+   <para>The new version imposes a much smaller space overhead on the generated\n+      object file.  The checks are also cleaner and easier to read and\n+      understand.\n+   </para>\n+   <para>They are off by default for all versions of GCC from 3.0 to 3.4 (the\n+      latest release at the time of writing).\n+      They can be enabled at configure time with\n+      <ulink url=\"../configopts.html\"><literal>--enable-concept-checks</literal></ulink>.\n+      You can enable them on a per-translation-unit basis with\n+      <code>#define _GLIBCXX_CONCEPT_CHECKS</code> for GCC 3.4 and higher\n+      (or with <code>#define _GLIBCPP_CONCEPT_CHECKS</code> for versions\n+      3.1, 3.2 and 3.3).\n+   </para>\n+\n+   <para>Please note that the upcoming C++ standard has first-class\n+   support for template parameter constraints based on concepts in the core\n+   language. This will obviate the need for the library-simulated concept\n+   checking described above.\n+   </para>\n+\n+</chapter>\n+\n+<!-- Chapter 02 : Debug Mode -->\n+<xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" \n+\t    parse=\"xml\" href=\"debug_mode.xml\">\n+</xi:include>\n+\n+<!-- Chapter 03 : Parallel Mode -->\n+<xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" \n+\t    parse=\"xml\" href=\"parallel_mode.xml\">\n+</xi:include>\n+\n+<!-- Chapter 04 : Allocators -->\n+<chapter id=\"manual.ext.allocator\" xreflabel=\"Allocators\">\n+  <title>Allocators</title>\n+\n+  <!-- Section 01 : __mt_alloc -->\n+  <xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" \n+\t      parse=\"xml\" href=\"mt_allocator.xml\">\n+  </xi:include>\n+\n+  <!-- Section 02 : bitmap_allocator -->\n+  <xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" \n+\t      parse=\"xml\" href=\"bitmap_allocator.xml\">\n+  </xi:include>\n+\n+</chapter>\n+\n+<!-- Chapter 05 : Containers -->\n+<chapter id=\"manual.ext.containers\" xreflabel=\"Containers\">\n+  <title>Containers</title>\n+  <para>\n+  </para>\n+  <sect1 id=\"manual.ext.containers.pbds\" xreflabel=\"Policy Based Data Structures\">\n+    <title>Policy Based Data Structures</title>\n+    <para>\n+      <ulink\n+      url=\"http://gcc.gnu.org/onlinedocs/libstdc++/ext/pb_ds/index.html\">More details here</ulink>.\n+    </para>\n+  </sect1>\n+\n+  <sect1 id=\"manual.ext.containers.sgi\" xreflabel=\"SGI ext\">\n+    <title>HP/SGI</title>\n+    <para>\n+    </para>\n+\n+<para>A few extensions and nods to backwards-compatibility have been made with\n+   containers.  Those dealing with older SGI-style allocators are dealt with\n+   elsewhere.  The remaining ones all deal with bits:\n+</para>\n+<para>The old pre-standard <code>bit_vector</code> class is present for\n+   backwards compatibility.  It is simply a typedef for the\n+   <code>vector&lt;bool&gt;</code> specialization.\n+</para>\n+<para>The <code>bitset</code> class has a number of extensions, described in the\n+   rest of this item.  First, we'll mention that this implementation of\n+   <code>bitset&lt;N&gt;</code> is specialized for cases where N number of\n+   bits will fit into a single word of storage.  If your choice of N is\n+   within that range (&lt;=32 on i686-pc-linux-gnu, for example), then all\n+   of the operations will be faster.\n+</para>\n+<para>There are\n+   versions of single-bit test, set, reset, and flip member functions which\n+   do no range-checking.  If we call them member functions of an instantiation\n+   of &quot;bitset&lt;N&gt;,&quot; then their names and signatures are:\n+</para>\n+   <programlisting>\n+   bitset&lt;N&gt;&amp;   _Unchecked_set   (size_t pos);\n+   bitset&lt;N&gt;&amp;   _Unchecked_set   (size_t pos, int val);\n+   bitset&lt;N&gt;&amp;   _Unchecked_reset (size_t pos);\n+   bitset&lt;N&gt;&amp;   _Unchecked_flip  (size_t pos);\n+   bool         _Unchecked_test  (size_t pos);\n+   </programlisting>\n+   <para>Note that these may in fact be removed in the future, although we have\n+   no present plans to do so (and there doesn't seem to be any immediate\n+   reason to).\n+</para>\n+<para>The semantics of member function <code>operator[]</code> are not specified \n+   in the C++ standard.  A long-standing defect report calls for sensible\n+   obvious semantics, which are already implemented here:  <code>op[]</code>\n+   on a const bitset returns a bool, and for a non-const bitset returns a\n+   <code>reference</code> (a nested type).  However, this implementation does\n+   no range-checking on the index argument, which is in keeping with other\n+   containers' <code>op[]</code> requirements.  The defect report's proposed\n+   resolution calls for range-checking to be done.  We'll just wait and see...\n+</para>\n+<para>Finally, two additional searching functions have been added.  They return\n+   the index of the first &quot;on&quot; bit, and the index of the first\n+   &quot;on&quot; bit that is after <code>prev</code>, respectively:\n+</para>\n+   <programlisting>\n+   size_t _Find_first() const;\n+   size_t _Find_next (size_t prev) const;</programlisting>\n+<para>The same caveat given for the _Unchecked_* functions applies here also.\n+</para>\n+  </sect1>\n+\n+\n+  <sect1 id=\"manual.ext.containers.deprecated_sgi\" xreflabel=\"SGI ext dep\">\n+    <title>Deprecated HP/SGI</title>\n+\n+   <para>\n+     The SGI hashing classes <classname>hash_set</classname> and\n+     <classname>hash_set</classname> have been deprecated by the\n+     unordered_set, unordered_multiset, unordered_map,\n+     unordered_multimap containers in TR1 and the upcoming C++0x, and\n+     may be removed in future releases.\n+   </para>\n+\n+   <para>The SGI headers</para>\n+   <programlisting>\n+     &lt;hash_map&gt;\n+     &lt;hash_set&gt;\n+     &lt;rope&gt;\n+     &lt;slist&gt;\n+     &lt;rb_tree&gt;\n+   </programlisting>\n+   <para>are all here;\n+      <code>&lt;hash_map&gt;</code> and <code>&lt;hash_set&gt;</code>\n+      are deprecated but available as backwards-compatible extensions,\n+      as discussed further below.  <code>&lt;rope&gt;</code> is the\n+      SGI specialization for large strings (&quot;rope,&quot;\n+      &quot;large strings,&quot; get it? Love that geeky humor.)\n+      <code>&lt;slist&gt;</code> is a singly-linked list, for when the\n+      doubly-linked <code>list&lt;&gt;</code> is too much space\n+      overhead, and <code>&lt;rb_tree&gt;</code> exposes the red-black\n+      tree classes used in the implementation of the standard maps and\n+      sets.\n+   </para>\n+   <para>Each of the associative containers map, multimap, set, and multiset\n+      have a counterpart which uses a\n+      <ulink url=\"http://www.sgi.com/tech/stl/HashFunction.html\">hashing\n+      function</ulink> to do the arranging, instead of a strict weak ordering\n+      function.  The classes take as one of their template parameters a\n+      function object that will return the hash value; by default, an\n+      instantiation of\n+      <ulink url=\"http://www.sgi.com/tech/stl/hash.html\">hash</ulink>.\n+      You should specialize this functor for your class, or define your own,\n+      before trying to use one of the hashing classes.\n+   </para>\n+   <para>The hashing classes support all the usual associative container\n+      functions, as well as some extra constructors specifying the number\n+      of buckets, etc.\n+   </para>\n+   <para>Why would you want to use a hashing class instead of the\n+      <quote>normal</quote>implementations?  Matt Austern writes:\n+   </para>\n+   <blockquote>\n+     <para>\n+       <emphasis>[W]ith a well chosen hash function, hash tables\n+       generally provide much better average-case performance than\n+       binary search trees, and much worse worst-case performance.  So\n+       if your implementation has hash_map, if you don't mind using\n+       nonstandard components, and if you aren't scared about the\n+       possibility of pathological cases, you'll probably get better\n+       performance from hash_map.\n+     </emphasis>\n+     </para>\n+   </blockquote>\n+\n+  </sect1>  \n+</chapter>\n+\n+<!-- Chapter 06 : Utilities -->\n+<chapter id=\"manual.ext.util\" xreflabel=\"Utilities\">\n+  <title>Utilities</title>\n+  <para>\n+    The &lt;functional&gt; header contains many additional functors\n+    and helper functions, extending section 20.3.  They are\n+    implemented in the file stl_function.h:\n+  </para>\n+  <itemizedlist>\n+  <listitem>\n+  <para><code>identity_element</code> for addition and multiplication. * \n+  </para>\n+  </listitem>\n+  <listitem>\n+    <para>The functor <code>identity</code>, whose <code>operator()</code>\n+      returns the argument unchanged. * \n+  </para>\n+  </listitem>\n+  <listitem>\n+    <para>Composition functors <code>unary_function</code> and\n+      <code>binary_function</code>, and their helpers <code>compose1</code>\n+      and <code>compose2</code>. * \n+    </para>\n+  </listitem>\n+  <listitem>\n+  <para><code>select1st</code> and <code>select2nd</code>, to strip pairs. * \n+  </para>\n+  </listitem>\n+  <listitem><para><code>project1st</code> and <code>project2nd</code>. * </para></listitem>\n+  <listitem><para>A set of functors/functions which always return the same result.  They\n+      are <code>constant_void_fun</code>, <code>constant_binary_fun</code>,\n+      <code>constant_unary_fun</code>, <code>constant0</code>,\n+      <code>constant1</code>, and <code>constant2</code>. * </para></listitem>\n+  <listitem><para>The class <code>subtractive_rng</code>. * </para></listitem>\n+  <listitem><para>mem_fun adaptor helpers <code>mem_fun1</code> and\n+      <code>mem_fun1_ref</code> are provided for backwards compatibility. </para></listitem>\n+</itemizedlist>\n+<para>\n+  20.4.1 can use several different allocators; they are described on the\n+   main extensions page.\n+</para>\n+<para>\n+  20.4.3 is extended with a special version of\n+  <code>get_temporary_buffer</code> taking a second argument.  The\n+  argument is a pointer, which is ignored, but can be used to specify\n+  the template type (instead of using explicit function template\n+  arguments like the standard version does).  That is, in addition to\n+</para>\n+<programlisting>\n+get_temporary_buffer&lt;int&gt;(5);\n+</programlisting>\n+\n+<para>\n+you can also use\n+</para>\n+\n+<programlisting>\n+get_temporary_buffer(5, (int*)0);\n+</programlisting>\n+<para>\n+  A class <code>temporary_buffer</code> is given in stl_tempbuf.h. *\n+</para>\n+<para>\n+  The specialized algorithms of section 20.4.4 are extended with\n+  <code>uninitialized_copy_n</code>. *\n+</para>\n+\n+</chapter>\n+\n+<!-- Chapter 07 : Algorithms -->\n+<chapter id=\"manual.ext.algorithms\" xreflabel=\"Algorithms\">\n+  <title>Algorithms</title>\n+<para>25.1.6 (count, count_if) is extended with two more versions of count\n+   and count_if.  The standard versions return their results.  The\n+   additional signatures return void, but take a final parameter by\n+   reference to which they assign their results, e.g.,\n+</para>\n+   <programlisting>\n+   void count (first, last, value, n);</programlisting>\n+<para>25.2 (mutating algorithms) is extended with two families of signatures,\n+   random_sample and random_sample_n.\n+</para>\n+<para>25.2.1 (copy) is extended with\n+</para>\n+   <programlisting>\n+   copy_n (_InputIter first, _Size count, _OutputIter result);</programlisting>\n+<para>which copies the first 'count' elements at 'first' into 'result'.\n+</para>\n+<para>25.3 (sorting 'n' heaps 'n' stuff) is extended with some helper\n+   predicates.  Look in the doxygen-generated pages for notes on these.\n+</para>\n+   <itemizedlist>\n+    <listitem><para><code>is_heap</code> tests whether or not a range is a heap.</para></listitem>\n+    <listitem><para><code>is_sorted</code> tests whether or not a range is sorted in\n+        nondescending order.</para></listitem>\n+   </itemizedlist>\n+<para>25.3.8 (lexigraphical_compare) is extended with\n+</para>\n+   <programlisting>\n+   lexicographical_compare_3way(_InputIter1 first1, _InputIter1 last1,\n+                                 _InputIter2 first2, _InputIter2 last2)</programlisting>\n+<para>which does... what?\n+</para>\n+\n+</chapter>\n+\n+<!-- Chapter 08 : Numerics -->\n+<chapter id=\"manual.ext.numerics\" xreflabel=\"Numerics\">\n+  <title>Numerics</title>\n+<para>26.4, the generalized numeric operations such as accumulate, are extended\n+   with the following functions:\n+</para>\n+   <programlisting>\n+   power (x, n);\n+   power (x, n, moniod_operation);</programlisting>\n+<para>Returns, in FORTRAN syntax, &quot;x ** n&quot; where n&gt;=0.  In the\n+   case of n == 0, returns the <ulink url=\"#ch20\">identity element</ulink> for the\n+   monoid operation.  The two-argument signature uses multiplication (for\n+   a true &quot;power&quot; implementation), but addition is supported as well.\n+   The operation functor must be associative.\n+</para>\n+<para>The <code>iota</code> function wins the award for Extension With the\n+   Coolest Name.  It &quot;assigns sequentially increasing values to a range.\n+   That is, it assigns value to *first, value + 1 to *(first + 1) and so\n+   on.&quot;  Quoted from SGI documentation.\n+</para>\n+   <programlisting>\n+   void iota(_ForwardIter first, _ForwardIter last, _Tp value);</programlisting>\n+</chapter>\n+\n+<!-- Chapter 09 : Iterators -->\n+<chapter id=\"manual.ext.iterators\" xreflabel=\"Iterators\">\n+  <title>Iterators</title>\n+<para>24.3.2 describes <code>struct iterator</code>, which didn't exist in the\n+   original HP STL implementation (the language wasn't rich enough at the\n+   time).  For backwards compatibility, base classes are provided which\n+   declare the same nested typedefs:\n+</para>\n+   <itemizedlist>\n+    <listitem><para>input_iterator</para></listitem>\n+    <listitem><para>output_iterator</para></listitem>\n+    <listitem><para>forward_iterator</para></listitem>\n+    <listitem><para>bidirectional_iterator</para></listitem>\n+    <listitem><para>random_access_iterator</para></listitem>\n+   </itemizedlist>\n+<para>24.3.4 describes iterator operation <code>distance</code>, which takes\n+   two iterators and returns a result.  It is extended by another signature\n+   which takes two iterators and a reference to a result.  The result is\n+   modified, and the function returns nothing.\n+</para>\n+\n+</chapter>\n+\n+<!-- Chapter 08 : IO -->\n+<chapter id=\"manual.ext.io\" xreflabel=\"IO\">\n+  <title>Input and Output</title>\n+\n+  <para>\n+    Extensions allowing <code>filebuf</code>s to be constructed from\n+    \"C\" types like  FILE*s and file descriptors.\n+  </para>\n+\n+  <sect1 id=\"manual.ext.io.filebuf_derived\" xreflabel=\"Derived filebufs\">\n+    <title>Derived filebufs</title>\n+\n+   <para>The v2 library included non-standard extensions to construct\n+      <code>std::filebuf</code>s from C stdio types such as\n+      <code>FILE*</code>s and POSIX file descriptors.\n+      Today the recommended way to use stdio types with libstdc++\n+      IOStreams is via the <code>stdio_filebuf</code> class (see below),\n+      but earlier releases provided slightly different mechanisms.\n+   </para>\n+   <itemizedlist>\n+     <listitem><para>3.0.x <code>filebuf</code>s have another ctor with this signature:\n+        <code>basic_filebuf(__c_file_type*, ios_base::openmode, int_type);\n+\t</code>\n+         This comes in very handy in a number of places, such as\n+         attaching Unix sockets, pipes, and anything else which uses file\n+         descriptors, into the IOStream buffering classes.  The three\n+         arguments are as follows:\n+         <itemizedlist>\n+          <listitem><para><code>__c_file_type*      F   </code>\n+              // the __c_file_type typedef usually boils down to stdio's FILE\n+          </para></listitem>\n+          <listitem><para><code>ios_base::openmode  M   </code>\n+              // same as all the other uses of openmode\n+          </para></listitem>\n+          <listitem><para><code>int_type            B   </code>\n+              // buffer size, defaults to BUFSIZ if not specified\n+          </para></listitem>\n+         </itemizedlist>\n+         For those wanting to use file descriptors instead of FILE*'s, I\n+         invite you to contemplate the mysteries of C's <code>fdopen()</code>.\n+     </para></listitem>\n+     <listitem><para>In library snapshot 3.0.95 and later, <code>filebuf</code>s bring\n+         back an old extension:  the <code>fd()</code> member function.  The\n+         integer returned from this function can be used for whatever file\n+         descriptors can be used for on your platform.  Naturally, the\n+         library cannot track what you do on your own with a file descriptor,\n+         so if you perform any I/O directly, don't expect the library to be\n+         aware of it.\n+     </para></listitem>\n+     <listitem><para>Beginning with 3.1, the extra <code>filebuf</code> constructor and\n+         the <code>fd()</code> function were removed from the standard\n+         filebuf.  Instead, <code>&lt;ext/stdio_filebuf.h&gt;</code> contains\n+         a derived class called\n+         <ulink url=\"http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/class____gnu__cxx_1_1stdio__filebuf.html\"><code>__gnu_cxx::stdio_filebuf</code></ulink>.\n+         This class can be constructed from a C <code>FILE*</code> or a file\n+         descriptor, and provides the <code>fd()</code> function.\n+     </para></listitem>\n+   </itemizedlist>\n+   <para>If you want to access a <code>filebuf</code>'s file descriptor to\n+      implement file locking (e.g. using the <code>fcntl()</code> system\n+      call) then you might be interested in Henry Suter's\n+      <ulink url=\"http://suter.home.cern.ch/suter/RWLock.html\">RWLock</ulink>\n+      class.\n+   </para>\n+\n+    <para>\n+    </para>\n+  </sect1>\n+</chapter>\n+\n+<!-- Chapter 11 : Demangling -->\n+<chapter id=\"manual.ext.demangle\" xreflabel=\"Demangling\">\n+  <title>Demangling</title>\n+  <para>\n+    Transforming C++ ABI itentifiers (like RTTI symbols) into the\n+    original C++ source identifiers is called\n+    <quote>demangling.</quote>\n+  </para>\n+  <para>\n+    If you have read the <ulink\n+    url=\"http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/namespaceabi.html\">source\n+    documentation for <code>namespace abi</code></ulink> then you are\n+    aware of the cross-vendor C++ ABI in use by GCC.  One of the\n+    exposed functions is used for demangling,\n+    <code>abi::__cxa_demangle</code>.\n+  </para>\n+  <para>\n+    In programs like <command>c++filt</command>, the linker, and other tools\n+    have the ability to decode C++ ABI names, and now so can you.\n+  </para>\n+  <para>\n+    (The function itself might use different demanglers, but that's the\n+    whole point of abstract interfaces.  If we change the implementation,\n+    you won't notice.)\n+  </para>\n+  <para>\n+    Probably the only times you'll be interested in demangling at runtime\n+    are when you're seeing <code>typeid</code> strings in RTTI, or when\n+    you're handling the runtime-support exception classes.  For example:\n+  </para>\n+   <programlisting>\n+#include &lt;exception&gt;\n+#include &lt;iostream&gt;\n+#include &lt;cxxabi.h&gt;\n+\n+struct empty { };\n+\n+template &lt;typename T, int N&gt;\n+  struct bar { };\n+\n+\n+int main()\n+{\n+  int     status;\n+  char   *realname;\n+\n+  // exception classes not in &lt;stdexcept&gt;, thrown by the implementation\n+  // instead of the user\n+  std::bad_exception  e;\n+  realname = abi::__cxa_demangle(e.what(), 0, 0, &amp;status);\n+  std::cout &lt;&lt; e.what() &lt;&lt; \"\\t=&gt; \" &lt;&lt; realname &lt;&lt; \"\\t: \" &lt;&lt; status &lt;&lt; '\\n';\n+  free(realname);\n+\n+\n+  // typeid\n+  bar&lt;empty,17&gt;          u;\n+  const std::type_info  &amp;ti = typeid(u);\n+\n+  realname = abi::__cxa_demangle(ti.name(), 0, 0, &amp;status);\n+  std::cout &lt;&lt; ti.name() &lt;&lt; \"\\t=&gt; \" &lt;&lt; realname &lt;&lt; \"\\t: \" &lt;&lt; status &lt;&lt; '\\n';\n+  free(realname);\n+\n+  return 0;\n+}\n+   </programlisting>\n+   <para>\n+     This prints\n+   </para>\n+\n+   <screen>\n+   <computeroutput>\n+      St13bad_exception       =&gt; std::bad_exception   : 0\n+      3barI5emptyLi17EE       =&gt; bar&lt;empty, 17&gt;       : 0 \n+   </computeroutput>\n+   </screen>\n+\n+   <para>\n+     The demangler interface is described in the source documentation\n+     linked to above.  It is actually written in C, so you don't need to\n+     be writing C++ in order to demangle C++.  (That also means we have to\n+     use crummy memory management facilities, so don't forget to free()\n+     the returned char array.)\n+   </para>\n+</chapter>\n+\n+<!-- Chapter 12 : Concurrency -->\n+<xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" \n+\t    parse=\"xml\" href=\"concurrency.xml\">\n+</xi:include>\n+\n+</part>"}, {"sha": "ccde22791bd9bb5a277eece849582bca4aab79b7", "filename": "libstdc++-v3/doc/xml/manual/internals.xml", "status": "added", "additions": 548, "deletions": 0, "changes": 548, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Finternals.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Finternals.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Finternals.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,548 @@\n+<sect1 id=\"appendix.porting.internals\" xreflabel=\"internals\">\n+<?dbhtml filename=\"internals.html\"?>\n+ \n+<sect1info>\n+  <keywordset>\n+    <keyword>\n+      ISO C++\n+    </keyword>\n+    <keyword>\n+      internals\n+    </keyword>\n+  </keywordset>\n+</sect1info>\n+\n+<title>Porting to New Hardware or Operating Systems</title>\n+\n+<para>\n+</para>\n+\n+\n+<para>This document explains how to port libstdc++ (the GNU C++ library) to\n+a new target.\n+</para>\n+\n+   <para>In order to make the GNU C++ library (libstdc++) work with a new\n+target, you must edit some configuration files and provide some new\n+header files.  Unless this is done, libstdc++ will use generic\n+settings which may not be correct for your target; even if they are\n+correct, they will likely be inefficient.\n+   </para>\n+\n+   <para>Before you get started, make sure that you have a working C library on\n+your target.  The C library need not precisely comply with any\n+particular standard, but should generally conform to the requirements\n+imposed by the ANSI/ISO standard.\n+   </para>\n+\n+   <para>In addition, you should try to verify that the C++ compiler generally\n+works.  It is difficult to test the C++ compiler without a working\n+library, but you should at least try some minimal test cases.\n+   </para>\n+\n+   <para>(Note that what we think of as a \"target,\" the library refers to as\n+a \"host.\"  The comment at the top of <code>configure.ac</code> explains why.)\n+   </para>\n+\n+\n+<sect2 id=\"internals.os\" xreflabel=\"internals.os\">\n+<title>Operating System</title>\n+\n+<para>If you are porting to a new operating system (as opposed to a new chip\n+using an existing operating system), you will need to create a new\n+directory in the <code>config/os</code> hierarchy.  For example, the IRIX\n+configuration files are all in <code>config/os/irix</code>.  There is no set\n+way to organize the OS configuration directory.  For example,\n+<code>config/os/solaris/solaris-2.6</code> and\n+<code>config/os/solaris/solaris-2.7</code> are used as configuration\n+directories for these two versions of Solaris.  On the other hand, both\n+Solaris 2.7 and Solaris 2.8 use the <code>config/os/solaris/solaris-2.7</code>\n+directory.  The important information is that there needs to be a\n+directory under <code>config/os</code> to store the files for your operating\n+system.\n+</para>\n+\n+   <para>You might have to change the <code>configure.host</code> file to ensure that\n+your new directory is activated.  Look for the switch statement that sets\n+<code>os_include_dir</code>, and add a pattern to handle your operating system\n+if the default will not suffice.  The switch statement switches on only\n+the OS portion of the standard target triplet; e.g., the <code>solaris2.8</code>\n+in <code>sparc-sun-solaris2.8</code>.  If the new directory is named after the\n+OS portion of the triplet (the default), then nothing needs to be changed.\n+   </para>\n+\n+   <para>The first file to create in this directory, should be called\n+<code>os_defines.h</code>.  This file contains basic macro definitions\n+that are required to allow the C++ library to work with your C library. \n+   </para>\n+\n+   <para>Several libstdc++ source files unconditionally define the macro\n+<code>_POSIX_SOURCE</code>.  On many systems, defining this macro causes\n+large portions of the C library header files to be eliminated\n+at preprocessing time.  Therefore, you may have to <code>#undef</code> this\n+macro, or define other macros (like <code>_LARGEFILE_SOURCE</code> or\n+<code>__EXTENSIONS__</code>).  You won't know what macros to define or\n+undefine at this point; you'll have to try compiling the library and\n+seeing what goes wrong.  If you see errors about calling functions\n+that have not been declared, look in your C library headers to see if\n+the functions are declared there, and then figure out what macros you\n+need to define.  You will need to add them to the\n+<code>CPLUSPLUS_CPP_SPEC</code> macro in the GCC configuration file for your\n+target.  It will not work to simply define these macros in\n+<code>os_defines.h</code>.\n+   </para>\n+\n+   <para>At this time, there are a few libstdc++-specific macros which may be\n+defined:\n+   </para>\n+\n+   <para><code>_GLIBCXX_USE_C99_CHECK</code> may be defined to 1 to check C99\n+function declarations (which are not covered by specialization below)\n+found in system headers against versions found in the library headers\n+derived from the standard.\n+   </para>\n+\n+   <para><code>_GLIBCXX_USE_C99_DYNAMIC</code> may be defined to an expression that\n+yields 0 if and only if the system headers are exposing proper support\n+for C99 functions (which are not covered by specialization below).  If\n+defined, it must be 0 while bootstrapping the compiler/rebuilding the\n+library.\n+   </para>\n+\n+   <para><code>_GLIBCXX_USE_C99_LONG_LONG_CHECK</code> may be defined to 1 to check\n+the set of C99 long long function declarations found in system headers\n+against versions found in the library headers derived from the\n+standard.\n+\n+   </para>\n+   <para><code>_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC</code> may be defined to an\n+expression that yields 0 if and only if the system headers are\n+exposing proper support for the set of C99 long long functions.  If\n+defined, it must be 0 while bootstrapping the compiler/rebuilding the\n+library.\n+   </para>\n+   <para><code>_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC</code> may be defined to an\n+expression that yields 0 if and only if the system headers\n+are exposing proper support for the related set of macros.  If defined,\n+it must be 0 while bootstrapping the compiler/rebuilding the library.\n+   </para>\n+   <para><code>_GLIBCXX_USE_C99_FLOAT_TRANSCENDENTALS_CHECK</code> may be defined\n+to 1 to check the related set of function declarations found in system\n+headers against versions found in the library headers derived from\n+the standard.\n+   </para>\n+   <para><code>_GLIBCXX_USE_C99_FLOAT_TRANSCENDENTALS_DYNAMIC</code> may be defined\n+to an expression that yields 0 if and only if the system headers\n+are exposing proper support for the related set of functions.  If defined,\n+it must be 0 while bootstrapping the compiler/rebuilding the library.\n+   </para>\n+   <para>Finally, you should bracket the entire file in an include-guard, like\n+this:\n+   </para>\n+\n+<programlisting>     \n+\n+#ifndef _GLIBCXX_OS_DEFINES\n+#define _GLIBCXX_OS_DEFINES\n+...\n+#endif\n+</programlisting>\n+\n+   <para>We recommend copying an existing <code>os_defines.h</code> to use as a\n+starting point.\n+   </para>\n+</sect2>\n+\n+\n+<sect2 id=\"internals.cpu\" xreflabel=\"internals.cpu\">\n+<title>CPU</title>\n+\n+<para>If you are porting to a new chip (as opposed to a new operating system\n+running on an existing chip), you will need to create a new directory in the\n+<code>config/cpu</code> hierarchy.  Much like the <link linkend=\"internals.os\">Operating system</link> setup,\n+there are no strict rules on how to organize the CPU configuration\n+directory, but careful naming choices will allow the configury to find your\n+setup files without explicit help.\n+</para>\n+\n+   <para>We recommend that for a target triplet <code>&lt;CPU&gt;-&lt;vendor&gt;-&lt;OS&gt;</code>, you\n+name your configuration directory <code>config/cpu/&lt;CPU&gt;</code>.  If you do this,\n+the configury will find the directory by itself.  Otherwise you will need to\n+edit the <code>configure.host</code> file and, in the switch statement that sets\n+<code>cpu_include_dir</code>, add a pattern to handle your chip.\n+   </para>\n+\n+   <para>Note that some chip families share a single configuration directory, for\n+example, <code>alpha</code>, <code>alphaev5</code>, and <code>alphaev6</code> all use the\n+<code>config/cpu/alpha</code> directory, and there is an entry in the\n+<code>configure.host</code> switch statement to handle this.\n+   </para>\n+\n+   <para>The <code>cpu_include_dir</code> sets default locations for the files controlling\n+<link linkend=\"internals.thread_safety\">Thread safety</link> and <link linkend=\"internals.numeric_limits\">Numeric limits</link>, if the defaults are not\n+appropriate for your chip.\n+   </para>\n+\n+</sect2>\n+\n+\n+<sect2 id=\"internals.char_types\" xreflabel=\"internals.char_types\">\n+<title>Character Types</title>\n+\n+<para>The library requires that you provide three header files to implement\n+character classification, analogous to that provided by the C libraries\n+<code>&lt;ctype.h&gt;</code> header.  You can model these on the files provided in\n+<code>config/os/generic</code>.  However, these files will almost\n+certainly need some modification.\n+</para>\n+\n+   <para>The first file to write is <code>ctype_base.h</code>.  This file provides\n+some very basic information about character classification.  The libstdc++\n+library assumes that your C library implements <code>&lt;ctype.h&gt;</code> by using\n+a table (indexed by character code) containing integers, where each of\n+these integers is a bit-mask indicating whether the character is\n+upper-case, lower-case, alphabetic, etc.  The <code>ctype_base.h</code>\n+file gives the type of the integer, and the values of the various bit\n+masks.  You will have to peer at your own <code>&lt;ctype.h&gt;</code> to figure out\n+how to define the values required by this file.\n+   </para>\n+\n+   <para>The <code>ctype_base.h</code> header file does not need include guards. \n+It should contain a single <code>struct</code> definition called\n+<code>ctype_base</code>.  This <code>struct</code> should contain two type\n+declarations, and one enumeration declaration, like this example, taken\n+from the IRIX configuration:\n+   </para>\n+\n+<programlisting>\n+  struct ctype_base\n+     {\n+       typedef unsigned int \tmask;\n+       typedef int* \t\t__to_type;\n+     \n+       enum\n+       {\n+         space = _ISspace,\n+         print = _ISprint,\n+         cntrl = _IScntrl,\n+         upper = _ISupper,\n+         lower = _ISlower,\n+         alpha = _ISalpha,\n+         digit = _ISdigit,\n+         punct = _ISpunct,\n+         xdigit = _ISxdigit,\n+         alnum = _ISalnum,\n+         graph = _ISgraph\n+       };\n+     };\n+</programlisting>\n+\n+<para>The <code>mask</code> type is the type of the elements in the table.  If your\n+C library uses a table to map lower-case numbers to upper-case numbers,\n+and vice versa, you should define <code>__to_type</code> to be the type of the\n+elements in that table.  If you don't mind taking a minor performance\n+penalty, or if your library doesn't implement <code>toupper</code> and\n+<code>tolower</code> in this way, you can pick any pointer-to-integer type,\n+but you must still define the type.\n+</para>\n+\n+   <para>The enumeration should give definitions for all the values in the above\n+example, using the values from your native <code>&lt;ctype.h&gt;</code>.  They can\n+be given symbolically (as above), or numerically, if you prefer.  You do\n+not have to include <code>&lt;ctype.h&gt;</code> in this header; it will always be\n+included before <code>ctype_base.h</code> is included.\n+   </para>\n+\n+   <para>The next file to write is <code>ctype_noninline.h</code>, which also does\n+not require include guards.  This file defines a few member functions\n+that will be included in <code>include/bits/locale_facets.h</code>.  The first\n+function that must be written is the <code>ctype&lt;char&gt;::ctype</code>\n+constructor.  Here is the IRIX example:\n+   </para>\n+\n+<programlisting>\n+ctype&lt;char&gt;::ctype(const mask* __table = 0, bool __del = false,\n+           size_t __refs = 0)\n+       : _Ctype_nois&lt;char&gt;(__refs), _M_del(__table != 0 &amp;&amp; __del),\n+         _M_toupper(NULL),\n+         _M_tolower(NULL),\n+         _M_ctable(NULL),\n+         _M_table(!__table\n+                  ? (const mask*) (__libc_attr._ctype_tbl-&gt;_class + 1)\n+                  : __table)\n+       { }\n+</programlisting>\n+\n+<para>There are two parts of this that you might choose to alter. The first,\n+and most important, is the line involving <code>__libc_attr</code>.  That is\n+IRIX system-dependent code that gets the base of the table mapping\n+character codes to attributes.  You need to substitute code that obtains\n+the address of this table on your system.  If you want to use your\n+operating system's tables to map upper-case letters to lower-case, and\n+vice versa, you should initialize <code>_M_toupper</code> and\n+<code>_M_tolower</code> with those tables, in similar fashion.\n+</para>\n+\n+   <para>Now, you have to write two functions to convert from upper-case to\n+lower-case, and vice versa.  Here are the IRIX versions:\n+   </para>\n+\n+<programlisting>\n+     char\n+     ctype&lt;char&gt;::do_toupper(char __c) const\n+     { return _toupper(__c); }\n+     \n+     char\n+     ctype&lt;char&gt;::do_tolower(char __c) const\n+     { return _tolower(__c); }\n+</programlisting>\n+\n+<para>Your C library provides equivalents to IRIX's <code>_toupper</code> and\n+<code>_tolower</code>.  If you initialized <code>_M_toupper</code> and\n+<code>_M_tolower</code> above, then you could use those tables instead.\n+</para>\n+\n+   <para>Finally, you have to provide two utility functions that convert strings\n+of characters.  The versions provided here will always work - but you\n+could use specialized routines for greater performance if you have\n+machinery to do that on your system:\n+   </para>\n+\n+<programlisting>\n+     const char*\n+     ctype&lt;char&gt;::do_toupper(char* __low, const char* __high) const\n+     {\n+       while (__low &lt; __high)\n+         {\n+           *__low = do_toupper(*__low);\n+           ++__low;\n+         }\n+       return __high;\n+     }\n+     \n+     const char*\n+     ctype&lt;char&gt;::do_tolower(char* __low, const char* __high) const\n+     {\n+       while (__low &lt; __high)\n+         {\n+           *__low = do_tolower(*__low);\n+           ++__low;\n+         }\n+       return __high;\n+     }\n+</programlisting>\n+\n+   <para>You must also provide the <code>ctype_inline.h</code> file, which\n+contains a few more functions.  On most systems, you can just copy\n+<code>config/os/generic/ctype_inline.h</code> and use it on your system.\n+   </para>\n+\n+   <para>In detail, the functions provided test characters for particular\n+properties; they are analogous to the functions like <code>isalpha</code> and\n+<code>islower</code> provided by the C library.\n+   </para>\n+\n+   <para>The first function is implemented like this on IRIX:\n+   </para>\n+\n+<programlisting>\n+     bool\n+     ctype&lt;char&gt;::\n+     is(mask __m, char __c) const throw()\n+     { return (_M_table)[(unsigned char)(__c)] &amp; __m; }\n+</programlisting>\n+\n+<para>The <code>_M_table</code> is the table passed in above, in the constructor. \n+This is the table that contains the bitmasks for each character.  The\n+implementation here should work on all systems.\n+</para>\n+\n+   <para>The next function is:\n+   </para>\n+\n+<programlisting>\n+     const char*\n+     ctype&lt;char&gt;::\n+     is(const char* __low, const char* __high, mask* __vec) const throw()\n+     {\n+       while (__low &lt; __high)\n+         *__vec++ = (_M_table)[(unsigned char)(*__low++)];\n+       return __high;\n+     }\n+</programlisting>\n+\n+<para>This function is similar; it copies the masks for all the characters\n+from <code>__low</code> up until <code>__high</code> into the vector given by\n+<code>__vec</code>.\n+</para>\n+\n+   <para>The last two functions again are entirely generic:\n+   </para>\n+\n+<programlisting>\n+     const char*\n+     ctype&lt;char&gt;::\n+     scan_is(mask __m, const char* __low, const char* __high) const throw()\n+     {\n+       while (__low &lt; __high &amp;&amp; !this-&gt;is(__m, *__low))\n+         ++__low;\n+       return __low;\n+     }\n+     \n+     const char*\n+     ctype&lt;char&gt;::\n+     scan_not(mask __m, const char* __low, const char* __high) const throw()\n+     {\n+       while (__low &lt; __high &amp;&amp; this-&gt;is(__m, *__low))\n+         ++__low;\n+       return __low;\n+     }\n+</programlisting>\n+\n+</sect2>\n+\n+\n+<sect2 id=\"internals.thread_safety\" xreflabel=\"internals.thread_safety\">\n+<title>Thread Safety</title>\n+\n+<para>The C++ library string functionality requires a couple of atomic\n+operations to provide thread-safety.  If you don't take any special\n+action, the library will use stub versions of these functions that are\n+not thread-safe.  They will work fine, unless your applications are\n+multi-threaded.\n+</para>\n+\n+   <para>If you want to provide custom, safe, versions of these functions, there\n+are two distinct approaches.  One is to provide a version for your CPU,\n+using assembly language constructs.  The other is to use the\n+thread-safety primitives in your operating system.  In either case, you\n+make a file called <code>atomicity.h</code>, and the variable\n+<code>ATOMICITYH</code> must point to this file.\n+   </para>\n+\n+   <para>If you are using the assembly-language approach, put this code in\n+<code>config/cpu/&lt;chip&gt;/atomicity.h</code>, where chip is the name of\n+your processor (see <link linkend=\"internals.cpu\">CPU</link>).  No additional changes are necessary to\n+locate the file in this case; <code>ATOMICITYH</code> will be set by default.\n+   </para>\n+\n+   <para>If you are using the operating system thread-safety primitives approach,\n+you can also put this code in the same CPU directory, in which case no more\n+work is needed to locate the file.  For examples of this approach,\n+see the <code>atomicity.h</code> file for IRIX or IA64.\n+   </para>\n+\n+   <para>Alternatively, if the primitives are more closely related to the OS\n+than they are to the CPU, you can put the <code>atomicity.h</code> file in\n+the <link linkend=\"internals.os\">Operating system</link> directory instead.  In this case, you must\n+edit <code>configure.host</code>, and in the switch statement that handles\n+operating systems, override the <code>ATOMICITYH</code> variable to point to\n+the appropriate <code>os_include_dir</code>.  For examples of this approach,\n+see the <code>atomicity.h</code> file for AIX.\n+   </para>\n+\n+   <para>With those bits out of the way, you have to actually write\n+<code>atomicity.h</code> itself.  This file should be wrapped in an\n+include guard named <code>_GLIBCXX_ATOMICITY_H</code>.  It should define one\n+type, and two functions.\n+   </para>\n+\n+   <para>The type is <code>_Atomic_word</code>.  Here is the version used on IRIX:\n+   </para>\n+\n+<programlisting>\n+typedef long _Atomic_word;\n+</programlisting>\n+\n+<para>This type must be a signed integral type supporting atomic operations. \n+If you're using the OS approach, use the same type used by your system's\n+primitives.  Otherwise, use the type for which your CPU provides atomic\n+primitives.\n+</para>\n+\n+   <para>Then, you must provide two functions.  The bodies of these functions\n+must be equivalent to those provided here, but using atomic operations:\n+   </para>\n+\n+<programlisting>\n+     static inline _Atomic_word\n+     __attribute__ ((__unused__))\n+     __exchange_and_add (_Atomic_word* __mem, int __val)\n+     {\n+       _Atomic_word __result = *__mem;\n+       *__mem += __val;\n+       return __result;\n+     }\n+     \n+     static inline void\n+     __attribute__ ((__unused__))\n+     __atomic_add (_Atomic_word* __mem, int __val)\n+     {\n+       *__mem += __val;\n+     }\n+</programlisting>\n+\n+</sect2>\n+\n+\n+<sect2 id=\"internals.numeric_limits\" xreflabel=\"internals.numeric_limits\">\n+<title>Numeric Limits</title>\n+\n+<para>The C++ library requires information about the fundamental data types,\n+such as the minimum and maximum representable values of each type. \n+You can define each of these values individually, but it is usually\n+easiest just to indicate how many bits are used in each of the data\n+types and let the library do the rest.  For information about the\n+macros to define, see the top of <code>include/bits/std_limits.h</code>.\n+</para>\n+\n+   <para>If you need to define any macros, you can do so in <code>os_defines.h</code>. \n+However, if all operating systems for your CPU are likely to use the\n+same values, you can provide a CPU-specific file instead so that you\n+do not have to provide the same definitions for each operating system. \n+To take that approach, create a new file called <code>cpu_limits.h</code> in\n+your CPU configuration directory (see <link linkend=\"internals.cpu\">CPU</link>).\n+   </para>\n+\n+</sect2>\n+\n+\n+<sect2 id=\"internals.libtool\" xreflabel=\"internals.libtool\">\n+<title>Libtool</title>\n+\n+<para>The C++ library is compiled, archived and linked with libtool. \n+Explaining the full workings of libtool is beyond the scope of this\n+document, but there are a few, particular bits that are necessary for\n+porting.\n+</para>\n+\n+   <para>Some parts of the libstdc++ library are compiled with the libtool\n+<code>--tags CXX</code> option (the C++ definitions for libtool).  Therefore,\n+<code>ltcf-cxx.sh</code> in the top-level directory needs to have the correct\n+logic to compile and archive objects equivalent to the C version of libtool,\n+<code>ltcf-c.sh</code>.  Some libtool targets have definitions for C but not\n+for C++, or C++ definitions which have not been kept up to date.\n+   </para>\n+\n+   <para>The C++ run-time library contains initialization code that needs to be\n+run as the library is loaded.  Often, that requires linking in special\n+object files when the C++ library is built as a shared library, or\n+taking other system-specific actions.\n+   </para>\n+\n+   <para>The libstdc++ library is linked with the C version of libtool, even\n+though it is a C++ library.  Therefore, the C version of libtool needs to\n+ensure that the run-time library initializers are run.  The usual way to\n+do this is to build the library using <code>gcc -shared</code>.\n+   </para>\n+\n+   <para>If you need to change how the library is linked, look at\n+<code>ltcf-c.sh</code> in the top-level directory.  Find the switch statement\n+that sets <code>archive_cmds</code>.  Here, adjust the setting for your\n+operating system.\n+   </para>\n+\n+\n+</sect2>\n+\n+</sect1>\n\\ No newline at end of file"}, {"sha": "1a51e9e44f915f2663c476c461a284ee63843860", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "added", "additions": 664, "deletions": 0, "changes": 664, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,664 @@\n+<?xml version='1.0'?>\n+<!DOCTYPE part PUBLIC \"-//OASIS//DTD DocBook XML V4.5//EN\" \n+ \"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\" \n+[ ]>\n+\n+<part id=\"manual.intro\" xreflabel=\"Introduction\">\n+<?dbhtml filename=\"intro.html\"?>\n+ \n+<partinfo>\n+  <keywordset>\n+    <keyword>\n+      ISO C++\n+    </keyword>\n+    <keyword>\n+      library\n+    </keyword>\n+  </keywordset>\n+</partinfo>\n+\n+<title>Introduction</title>\n+\n+<!-- Chapter 01 : Status -->\n+<chapter id=\"manual.intro.status\" xreflabel=\"Status\">\n+  <title>Status</title>\n+\n+\n+  <sect1 id=\"manual.intro.status.standard\" xreflabel=\"Implementation Status\">\n+    <title>Implementation Status</title>\n+\n+    <!-- Section 01 : Status C++ 1998 -->\n+    <xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" \n+\t\tparse=\"xml\" href=\"status_cxx1998.xml\">\n+    </xi:include>\n+\n+    <!-- Section 02 : Status C++ TR1 -->\n+    <xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" \n+\t\tparse=\"xml\" href=\"status_cxxtr1.xml\">\n+    </xi:include>\n+\n+    <!-- Section 03 : Status C++ 200x -->\n+    <xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" \n+\t\tparse=\"xml\" href=\"status_cxx200x.xml\">\n+    </xi:include>    \n+  </sect1>\n+\n+  <!-- Section 02 : License -->\n+  <sect1 id=\"manual.intro.status.license\" xreflabel=\"License\">\n+    <title>License</title>\n+    <para>\n+    There are two licenses affecting GNU libstdc++: one for the code,\n+    and one for the documentation.  \n+    </para>\n+\n+    <para>\n+      There is a license section in the FAQ regarding common <link\n+      linkend=\"faq.license\">questions</link>. If you have more\n+      questions, ask the FSF or the <ulink\n+      url=\"http://gcc.gnu.org/lists.html\">gcc mailing list</ulink>.\n+    </para>\n+\n+    <sect2 id=\"manual.intro.status.license.gpl\" xreflabel=\"License GPL\">\n+    <title>The Code: GPL</title>\n+    \n+    <para>\n+      The source code is distributed under the <link\n+      linkend=\"appendix.gpl-2.0\">GNU General Public License version 2</link>,\n+      with the so-called <quote>Runtime Exception</quote>\n+      as follows (or see any header or implementation file):\n+    </para>\n+    \n+    <literallayout>\n+      As a special exception, you may use this file as part of a free software\n+      library without restriction.  Specifically, if other files instantiate\n+      templates or use macros or inline functions from this file, or you compile\n+      this file and link it with other files to produce an executable, this\n+      file does not by itself cause the resulting executable to be covered by\n+      the GNU General Public License.  This exception does not however\n+      invalidate any other reasons why the executable file might be covered by\n+      the GNU General Public License.\n+    </literallayout>\n+    \n+    <para>\n+      Hopefully that text is self-explanatory.  If it isn't, you need to speak\n+      to your lawyer, or the Free Software Foundation.\n+    </para>\n+    </sect2>\n+\n+    <sect2 id=\"manual.intro.status.license.fdl\" xreflabel=\"License FDL\">\n+    <title>The Documentation: GPL, FDL</title>\n+    \n+    <para>\n+      The documentation shipped with the library and made available over\n+      the web, excluding the pages generated from source comments, are\n+      copyrighted by the Free Software Foundation, and placed under the\n+      <link linkend=\"appendix.gfdl-1.2\"> GNU Free Documentation\n+      License version 1.2</link>.  There are no Front-Cover Texts, no\n+      Back-Cover Texts, and no Invariant Sections.\n+    </para>\n+    \n+    <para> \n+      For documentation generated by doxygen or other automated tools\n+      via processing source code comments and markup, the original source\n+      code license applies to the generated files. Thus, the doxygen\n+      documents are licensed <link linkend=\"appendix.gpl-2.0\">GPL</link>.\n+    </para>\n+    \n+    <para>\n+      If you plan on making copies of the documentation, please let us know.\n+      We can probably offer suggestions.\n+    </para>\n+    </sect2>\n+\n+  </sect1>\n+  \n+  <!-- Section 03 : Known Bugs -->\n+  <sect1 id=\"manual.intro.status.bugs\" xreflabel=\"Bugs\">\n+    <title>Bugs</title>\n+\n+    <sect2 id=\"manual.intro.status.bugs.impl\" xreflabel=\"Bugs impl\">\n+      <title>Implementation Bugs</title>\n+    <para>\n+      Information on known bugs, details on efforts to fix them, and\n+      fixed bugs are all available as part of the GCC bug tracking\n+      system, <ulink\n+      url=\"http://gcc.gnu.org/bugzilla\">bugzilla</ulink>, with the\n+      category set to <literal>libstdc++</literal>.\n+    </para>\n+    </sect2>\n+\n+    <sect2 id=\"manual.intro.status.bugs.iso\" xreflabel=\"Bugs iso\">\n+      <title>Standard Bugs</title>\n+      <para>\n+\tEverybody's got issues.  Even the C++ Standard Library.\n+      </para>\n+      <para>\n+\tThe Library Working Group, or LWG, is the ISO subcommittee responsible\n+\tfor making changes to the library.  They periodically publish an\n+\tIssues List containing problems and possible solutions.  As they reach\n+\ta consensus on proposed solutions, we often incorporate the solution.\n+      </para>\n+      <para>\n+\tHere are the issues which have resulted in code changes to the library.\n+\tThe links are to the specific defect reports from a <emphasis>partial\n+\tcopy</emphasis> of the Issues List.  You can read the full version online\n+\tat the <ulink url=\"http://www.open-std.org/jtc1/sc22/wg21/\">ISO C++\n+\tCommittee homepage</ulink>, linked to on the\n+\t<ulink url=\"http://gcc.gnu.org/readings.html\">GCC &quot;Readings&quot;\n+\tpage</ulink>.  If\n+\tyou spend a lot of time reading the issues, we recommend downloading\n+\tthe ZIP file and reading them locally.\n+      </para>\n+      <para>\n+\t(NB: <emphasis>partial copy</emphasis> means that not all\n+\tlinks within the lwg-*.html pages will work.  Specifically,\n+\tlinks to defect reports that have not been accorded full DR\n+\tstatus will probably break.  Rather than trying to mirror the\n+\tentire issues list on our overworked web server, we recommend\n+\tyou go to the LWG homepage instead.)\n+      </para>\n+      <para>\n+\tIf a DR is not listed here, we may simply not have gotten to\n+\tit yet; feel free to submit a patch.  Search the include/bits\n+\tand src directories for appearances of\n+\t<constant>_GLIBCXX_RESOLVE_LIB_DEFECTS</constant> for examples\n+\tof style.  Note that we usually do not make changes to the\n+\tcode until an issue has reached <ulink url=\"lwg-active.html#DR\">DR</ulink> status.\n+      </para>\n+\n+      <variablelist>\n+    <varlistentry><term><ulink url=\"lwg-defects.html#5\">5</ulink>:\n+        <emphasis>string::compare specification questionable</emphasis>\n+    </term>\n+    <listitem><para>This should be two overloaded functions rather than a single function.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#17\">17</ulink>:\n+        <emphasis>Bad bool parsing</emphasis>\n+    </term>\n+    <listitem><para>Apparently extracting Boolean values was messed up...\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#19\">19</ulink>:\n+        <emphasis>&quot;Noconv&quot; definition too vague</emphasis>\n+    </term>\n+    <listitem><para>If <code>codecvt::do_in</code> returns <code>noconv</code> there are\n+        no changes to the values in <code>[to, to_limit)</code>.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#22\">22</ulink>:\n+        <emphasis>Member open vs flags</emphasis>\n+    </term>\n+    <listitem><para>Re-opening a file stream does <emphasis>not</emphasis> clear the state flags.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#25\">25</ulink>:\n+        <emphasis>String operator&lt;&lt; uses width() value wrong</emphasis>\n+    </term>\n+    <listitem><para>Padding issues.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#48\">48</ulink>:\n+        <emphasis>Use of non-existent exception constructor</emphasis>\n+    </term>\n+    <listitem><para>An instance of <code>ios_base::failure</code> is constructed instead.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#49\">49</ulink>:\n+        <emphasis>Underspecification of ios_base::sync_with_stdio</emphasis>\n+    </term>\n+    <listitem><para>The return type is the <emphasis>previous</emphasis> state of synchronization.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#50\">50</ulink>:\n+        <emphasis>Copy constructor and assignment operator of ios_base</emphasis>\n+    </term>\n+    <listitem><para>These members functions are declared <code>private</code> and are\n+        thus inaccessible.  Specifying the correct semantics of\n+        &quot;copying stream state&quot; was deemed too complicated.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#60\">60</ulink>:\n+        <emphasis>What is a formatted input function?</emphasis>\n+    </term>\n+    <listitem><para>This DR made many widespread changes to <code>basic_istream</code>\n+        and <code>basic_ostream</code> all of which have been implemented.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#63\">63</ulink>:\n+        <emphasis>Exception-handling policy for unformatted output</emphasis>\n+    </term>\n+    <listitem><para>Make the policy consistent with that of formatted input, unformatted\n+        input, and formatted output.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#68\">68</ulink>:\n+        <emphasis>Extractors for char* should store null at end</emphasis>\n+    </term>\n+    <listitem><para>And they do now.  An editing glitch in the last item in the list of\n+        [27.6.1.2.3]/7.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#74\">74</ulink>:\n+        <emphasis>Garbled text for codecvt::do_max_length</emphasis>\n+    </term>\n+    <listitem><para>The text of the standard was gibberish.  Typos gone rampant.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#75\">75</ulink>:\n+        <emphasis>Contradiction in codecvt::length's argument types</emphasis>\n+    </term>\n+    <listitem><para>Change the first parameter to <code>stateT&amp;</code> and implement\n+        the new effects paragraph.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#83\">83</ulink>:\n+        <emphasis>string::npos vs. string::max_size()</emphasis>\n+    </term>\n+    <listitem><para>Safety checks on the size of the string should test against\n+        <code>max_size()</code> rather than <code>npos</code>.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#90\">90</ulink>:\n+        <emphasis>Incorrect description of operator&gt;&gt; for strings</emphasis>\n+    </term>\n+    <listitem><para>The effect contain <code>isspace(c,getloc())</code> which must be\n+        replaced by <code>isspace(c,is.getloc())</code>.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#91\">91</ulink>:\n+        <emphasis>Description of operator&gt;&gt; and getline() for string&lt;&gt;\n+\t    might cause endless loop</emphasis>\n+    </term>\n+    <listitem><para>They behave as a formatted input function and as an unformatted\n+        input function, respectively (except that <code>getline</code> is\n+\tnot required to set <code>gcount</code>).\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#103\">103</ulink>:\n+        <emphasis>set::iterator is required to be modifiable, but this allows\n+\t    modification of keys.</emphasis>\n+    </term>\n+    <listitem><para>For associative containers where the value type is the same as\n+        the key type, both <code>iterator</code> and <code>const_iterator\n+\t</code> are constant iterators.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#109\">109</ulink>:\n+        <emphasis>Missing binders for non-const sequence elements</emphasis>\n+    </term>\n+    <listitem><para>The <code>binder1st</code> and <code>binder2nd</code> didn't have an\n+        <code>operator()</code> taking a non-const parameter.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#110\">110</ulink>:\n+        <emphasis>istreambuf_iterator::equal not const</emphasis>\n+    </term>\n+    <listitem><para>This was not a const member function.  Note that the DR says to\n+        replace the function with a const one; we have instead provided an\n+        overloaded version with identical contents.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#117\">117</ulink>:\n+        <emphasis>basic_ostream uses nonexistent num_put member functions</emphasis>\n+    </term>\n+    <listitem><para><code>num_put::put()</code> was overloaded on the wrong types.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#118\">118</ulink>:\n+        <emphasis>basic_istream uses nonexistent num_get member functions</emphasis>\n+    </term>\n+    <listitem><para>Same as 117, but for <code>num_get::get()</code>.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#129\">129</ulink>:\n+        <emphasis>Need error indication from seekp() and seekg()</emphasis>\n+    </term>\n+    <listitem><para>These functions set <code>failbit</code> on error now.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#136\">136</ulink>:\n+        <emphasis>seekp, seekg setting wrong streams?</emphasis>\n+    </term>\n+    <listitem><para><code>seekp</code> should only set the output stream, and\n+        <code>seekg</code> should only set the input stream.\n+    </para></listitem></varlistentry>\n+\n+<!--<varlistentry><term><ulink url=\"lwg-defects.html#159\">159</ulink>:\n+        <emphasis>Strange use of underflow()</emphasis>\n+    </term>\n+    <listitem><para>In fstream.tcc, the basic_filebuf&lt;&gt;::showmanyc() function\n+        should probably not be calling <code>underflow()</code>.\n+    </para></listitem></varlistentry> -->\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#167\">167</ulink>:\n+        <emphasis>Improper use of traits_type::length()</emphasis>\n+    </term>\n+    <listitem><para><code>op&lt;&lt;</code> with a <code>const char*</code> was\n+        calculating an incorrect number of characters to write.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#169\">169</ulink>:\n+        <emphasis>Bad efficiency of overflow() mandated</emphasis>\n+    </term>\n+    <listitem><para>Grow efficiently the internal array object.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#171\">171</ulink>:\n+        <emphasis>Strange seekpos() semantics due to joint position</emphasis>\n+    </term>\n+    <listitem><para>Quite complex to summarize...\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#181\">181</ulink>:\n+        <emphasis>make_pair() unintended behavior</emphasis>\n+    </term>\n+    <listitem><para>This function used to take its arguments as reference-to-const, now\n+        it copies them (pass by value).\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#195\">195</ulink>:\n+        <emphasis>Should basic_istream::sentry's constructor ever set eofbit?</emphasis>\n+    </term>\n+    <listitem><para>Yes, it can, specifically if EOF is reached while skipping whitespace.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#211\">211</ulink>:\n+        <emphasis>operator&gt;&gt;(istream&amp;, string&amp;) doesn't set failbit</emphasis>\n+    </term>\n+    <listitem><para>If nothing is extracted into the string, <code>op&gt;&gt;</code> now\n+        sets <code>failbit</code> (which can cause an exception, etc., etc.).\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#214\">214</ulink>:\n+        <emphasis>set::find() missing const overload</emphasis>\n+    </term>\n+    <listitem><para>Both <code>set</code> and <code>multiset</code> were missing\n+        overloaded find, lower_bound, upper_bound, and equal_range functions\n+        for const instances.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#231\">231</ulink>:\n+        <emphasis>Precision in iostream?</emphasis>\n+    </term>\n+    <listitem><para>For conversion from a floating-point type, <code>str.precision()</code>\n+        is specified in the conversion specification.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-active.html#233\">233</ulink>:\n+        <emphasis>Insertion hints in associative containers</emphasis>\n+    </term>\n+    <listitem><para>Implement N1780, first check before then check after, insert as close\n+        to hint as possible.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#235\">235</ulink>:\n+        <emphasis>No specification of default ctor for reverse_iterator</emphasis>\n+    </term>\n+    <listitem><para>The declaration of <code>reverse_iterator</code> lists a default constructor.\n+        However, no specification is given what this constructor should do.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#241\">241</ulink>:\n+        <emphasis>Does unique_copy() require CopyConstructible and Assignable?</emphasis>\n+    </term>\n+    <listitem><para>Add a helper for forward_iterator/output_iterator, fix the existing\n+        one for input_iterator/output_iterator to not rely on Assignability.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#243\">243</ulink>:\n+        <emphasis>get and getline when sentry reports failure</emphasis>\n+    </term>\n+    <listitem><para>Store a null character only if the character array has a non-zero size.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#251\">251</ulink>:\n+        <emphasis>basic_stringbuf missing allocator_type</emphasis>\n+    </term>\n+    <listitem><para>This nested typedef was originally not specified.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#253\">253</ulink>:\n+        <emphasis>valarray helper functions are almost entirely useless</emphasis>\n+    </term>\n+    <listitem><para>Make the copy constructor and copy-assignment operator declarations\n+        public in gslice_array, indirect_array, mask_array, slice_array; provide\n+\tdefinitions.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#265\">265</ulink>:\n+        <emphasis>std::pair::pair() effects overly restrictive</emphasis>\n+    </term>\n+    <listitem><para>The default ctor would build its members from copies of temporaries;\n+        now it simply uses their respective default ctors.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#266\">266</ulink>:\n+        <emphasis>bad_exception::~bad_exception() missing Effects clause</emphasis>\n+    </term>\n+    <listitem><para>The <code>bad_</code>* classes no longer have destructors (they\n+        are trivial), since no description of them was ever given.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#271\">271</ulink>:\n+        <emphasis>basic_iostream missing typedefs</emphasis>\n+    </term>\n+    <listitem><para>The typedefs it inherits from its base classes can't be used, since\n+        (for example) <code>basic_iostream&lt;T&gt;::traits_type</code> is ambiguous.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#275\">275</ulink>:\n+        <emphasis>Wrong type in num_get::get() overloads</emphasis>\n+    </term>\n+    <listitem><para>Similar to 118.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#280\">280</ulink>:\n+        <emphasis>Comparison of reverse_iterator to const reverse_iterator</emphasis>\n+    </term>\n+    <listitem><para>Add global functions with two template parameters.\n+        (NB: not added for now a templated assignment operator) \n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#292\">292</ulink>:\n+        <emphasis>Effects of a.copyfmt (a)</emphasis>\n+    </term>\n+    <listitem><para>If <code>(this == &amp;rhs)</code> do nothing.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#300\">300</ulink>:\n+        <emphasis>List::merge() specification incomplete</emphasis>\n+    </term>\n+    <listitem><para>If <code>(this == &amp;x)</code> do nothing.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#303\">303</ulink>:\n+        <emphasis>Bitset input operator underspecified</emphasis>\n+    </term>\n+    <listitem><para>Basically, compare the input character to <code>is.widen(0)</code>\n+        and <code>is.widen(1)</code>.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#305\">305</ulink>:\n+        <emphasis>Default behavior of codecvt&lt;wchar_t, char, mbstate_t&gt;::length()</emphasis>\n+    </term>\n+    <listitem><para>Do not specify what <code>codecvt&lt;wchar_t, char, mbstate_t&gt;::do_length</code>\n+        must return.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#328\">328</ulink>:\n+        <emphasis>Bad sprintf format modifier in money_put&lt;&gt;::do_put()</emphasis>\n+    </term>\n+    <listitem><para>Change the format string to &quot;%.0Lf&quot;.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#365\">365</ulink>:\n+        <emphasis>Lack of const-qualification in clause 27</emphasis>\n+    </term>\n+    <listitem><para>Add const overloads of <code>is_open</code>.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#389\">389</ulink>:\n+        <emphasis>Const overload of valarray::operator[] returns by value</emphasis>\n+    </term>\n+    <listitem><para>Change it to return a <code>const T&amp;</code>.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#402\">402</ulink>:\n+        <emphasis>Wrong new expression in [some_]allocator::construct</emphasis>\n+    </term>\n+    <listitem><para>Replace &quot;new&quot; with &quot;::new&quot;.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#409\">409</ulink>:\n+        <emphasis>Closing an fstream should clear the error state</emphasis>\n+    </term>\n+    <listitem><para>Have <code>open</code> clear the error flags.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-active.html#431\">431</ulink>:\n+        <emphasis>Swapping containers with unequal allocators</emphasis>\n+    </term>\n+    <listitem><para>Implement Option 3, as per N1599.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#432\">432</ulink>:\n+        <emphasis>stringbuf::overflow() makes only one write position\n+\t    available</emphasis>\n+    </term>\n+    <listitem><para>Implement the resolution, beyond DR 169.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#434\">434</ulink>:\n+        <emphasis>bitset::to_string() hard to use</emphasis>\n+    </term>\n+    <listitem><para>Add three overloads, taking fewer template arguments.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#438\">438</ulink>:\n+        <emphasis>Ambiguity in the \"do the right thing\" clause</emphasis>\n+    </term>\n+    <listitem><para>Implement the resolution, basically cast less.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#453\">453</ulink>:\n+        <emphasis>basic_stringbuf::seekoff need not always fail for an empty stream</emphasis>\n+    </term>\n+    <listitem><para>Don't fail if the next pointer is null and newoff is zero.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#455\">455</ulink>:\n+        <emphasis>cerr::tie() and wcerr::tie() are overspecified</emphasis>\n+    </term>\n+    <listitem><para>Initialize cerr tied to cout and wcerr tied to wcout.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#464\">464</ulink>:\n+        <emphasis>Suggestion for new member functions in standard containers</emphasis>\n+    </term>\n+    <listitem><para>Add <code>data()</code> to <code>std::vector</code> and\n+        <code>at(const key_type&amp;)</code> to <code>std::map</code>.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#508\">508</ulink>:\n+        <emphasis>Bad parameters for ranlux64_base_01</emphasis>\n+    </term>\n+    <listitem><para>Fix the parameters.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-closed.html#512\">512</ulink>:\n+        <emphasis>Seeding subtract_with_carry_01 from a single unsigned long</emphasis>\n+    </term>\n+    <listitem><para>Construct a <code>linear_congruential</code> engine and seed with it.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-closed.html#526\">526</ulink>:\n+        <emphasis>Is it undefined if a function in the standard changes in\n+\t    parameters?</emphasis>\n+    </term>\n+    <listitem><para>Use &amp;value.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#538\">538</ulink>:\n+        <emphasis>241 again: Does unique_copy() require CopyConstructible\n+\t    and Assignable?</emphasis>\n+    </term>\n+    <listitem><para>In case of input_iterator/output_iterator rely on Assignability of\n+        input_iterator' value_type.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#541\">541</ulink>:\n+        <emphasis>shared_ptr template assignment and void</emphasis>\n+    </term>\n+    <listitem><para>Add an auto_ptr&lt;void&gt; specialization.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#543\">543</ulink>:\n+        <emphasis>valarray slice default constructor</emphasis>\n+    </term>\n+    <listitem><para>Follow the straightforward proposed resolution.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#586\">586</ulink>:\n+        <emphasis>string inserter not a formatted function</emphasis>\n+    </term>\n+    <listitem><para>Change it to be a formatted output function (i.e. catch exceptions).\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-active.html#596\">596</ulink>:\n+        <emphasis>27.8.1.3 Table 112 omits \"a+\" and \"a+b\" modes</emphasis>\n+    </term>\n+    <listitem><para>Add the missing modes to fopen_mode.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-defects.html#660\">660</ulink>:\n+        <emphasis>Missing bitwise operations</emphasis>\n+    </term>\n+    <listitem><para>Add the missing operations.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-active.html#693\">693</ulink>:\n+        <emphasis>std::bitset::all() missing</emphasis>\n+    </term>\n+    <listitem><para>Add it, consistently with the discussion.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-active.html#695\">695</ulink>:\n+        <emphasis>ctype&lt;char&gt;::classic_table() not accessible</emphasis>\n+    </term>\n+    <listitem><para>Make the member functions table and classic_table public.\n+    </para></listitem></varlistentry>\n+  </variablelist>\n+\n+ </sect2>\n+  </sect1>  \n+</chapter>\n+\n+\n+<!-- Chapter 02 : Setup -->\n+<chapter id=\"manual.intro.setup\" xreflabel=\"Setup\">\n+  <title>Setup</title>\n+\n+  <!-- Section 01 : Configure -->\n+  <xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" \n+\t      parse=\"xml\" href=\"configure.xml\">\n+  </xi:include>\n+\n+  <!-- Section 02 : Build -->\n+  <xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" \n+\t      parse=\"xml\" href=\"build.xml\">\n+  </xi:include>\n+\n+  <!-- Section 03 : Test -->\n+  <xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" \n+\t      parse=\"xml\" href=\"test.xml\">\n+  </xi:include>\n+</chapter>\n+\n+\n+<!-- Chapter 03 : Using -->\n+<xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\"\n+\t    parse=\"xml\" href=\"using.xml\">\n+</xi:include>\n+\n+</part>"}, {"sha": "8b6806f90a792634b52503681ccc589b593fc017", "filename": "libstdc++-v3/doc/xml/manual/io.xml", "status": "added", "additions": 665, "deletions": 0, "changes": 665, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fio.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fio.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fio.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,665 @@\n+<?xml version='1.0'?>\n+<!DOCTYPE part PUBLIC \"-//OASIS//DTD DocBook XML V4.5//EN\" \n+ \"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\" \n+[ ]>\n+\n+<part id=\"manual.io\" xreflabel=\"Input and Output\">\n+<?dbhtml filename=\"io.html\"?>\n+ \n+<partinfo>\n+  <keywordset>\n+    <keyword>\n+      ISO C++\n+    </keyword>\n+    <keyword>\n+      library\n+    </keyword>\n+  </keywordset>\n+</partinfo>\n+\n+<title>Input and Output</title>\n+\n+<!-- Chapter 01 : Iostream Objects -->\n+<chapter id=\"manual.io.objects\" xreflabel=\"IO Objects\">\n+  <title>Iostream Objects</title>\n+\n+   <para>To minimize the time you have to wait on the compiler, it's good to\n+      only include the headers you really need.  Many people simply include\n+      &lt;iostream&gt; when they don't need to -- and that can <emphasis>penalize\n+      your runtime as well.</emphasis>  Here are some tips on which header to use\n+      for which situations, starting with the simplest.\n+   </para>\n+   <para><emphasis>&lt;iosfwd&gt;</emphasis> should be included whenever you simply\n+      need the <emphasis>name</emphasis> of an I/O-related class, such as\n+      &quot;ofstream&quot; or &quot;basic_streambuf&quot;.  Like the name\n+      implies, these are forward declarations.  (A word to all you fellow\n+      old school programmers:  trying to forward declare classes like\n+      &quot;class istream;&quot; won't work.  Look in the iosfwd header if\n+      you'd like to know why.)  For example,\n+   </para>\n+   <programlisting>\n+    #include &lt;iosfwd&gt;\n+\n+    class MyClass\n+    {\n+        ....\n+        std::ifstream&amp;   input_file;\n+    };\n+\n+    extern std::ostream&amp; operator&lt;&lt; (std::ostream&amp;, MyClass&amp;);\n+   </programlisting>\n+   <para><emphasis>&lt;ios&gt;</emphasis> declares the base classes for the entire\n+      I/O stream hierarchy, std::ios_base and std::basic_ios&lt;charT&gt;, the\n+      counting types std::streamoff and std::streamsize, the file\n+      positioning type std::fpos, and the various manipulators like\n+      std::hex, std::fixed, std::noshowbase, and so forth.\n+   </para>\n+   <para>The ios_base class is what holds the format flags, the state flags,\n+      and the functions which change them (setf(), width(), precision(),\n+      etc).  You can also store extra data and register callback functions\n+      through ios_base, but that has been historically underused.  Anything\n+      which doesn't depend on the type of characters stored is consolidated\n+      here.\n+   </para>\n+   <para>The template class basic_ios is the highest template class in the\n+      hierarchy; it is the first one depending on the character type, and\n+      holds all general state associated with that type:  the pointer to the\n+      polymorphic stream buffer, the facet information, etc.\n+   </para>\n+   <para><emphasis>&lt;streambuf&gt;</emphasis> declares the template class\n+      basic_streambuf, and two standard instantiations, streambuf and\n+      wstreambuf.  If you need to work with the vastly useful and capable\n+      stream buffer classes, e.g., to create a new form of storage\n+      transport, this header is the one to include.\n+   </para>\n+   <para><emphasis>&lt;istream&gt;</emphasis>/<emphasis>&lt;ostream&gt;</emphasis> are\n+      the headers to include when you are using the &gt;&gt;/&lt;&lt;\n+      interface, or any of the other abstract stream formatting functions.\n+      For example,\n+   </para>\n+   <programlisting>\n+    #include &lt;istream&gt;\n+\n+    std::ostream&amp; operator&lt;&lt; (std::ostream&amp; os, MyClass&amp; c)\n+    {\n+       return os &lt;&lt; c.data1() &lt;&lt; c.data2();\n+    }\n+   </programlisting>\n+   <para>The std::istream and std::ostream classes are the abstract parents of\n+      the various concrete implementations.  If you are only using the\n+      interfaces, then you only need to use the appropriate interface header.\n+   </para>\n+   <para><emphasis>&lt;iomanip&gt;</emphasis> provides &quot;extractors and inserters\n+      that alter information maintained by class ios_base and its derived\n+      classes,&quot; such as std::setprecision and std::setw.  If you need\n+      to write expressions like <code>os &lt;&lt; setw(3);</code> or\n+      <code>is &gt;&gt; setbase(8);</code>, you must include &lt;iomanip&gt;.\n+   </para>\n+   <para><emphasis>&lt;sstream&gt;</emphasis>/<emphasis>&lt;fstream&gt;</emphasis>\n+      declare the six stringstream and fstream classes.  As they are the\n+      standard concrete descendants of istream and ostream, you will already\n+      know about them.\n+   </para>\n+   <para>Finally, <emphasis>&lt;iostream&gt;</emphasis> provides the eight standard\n+      global objects (cin, cout, etc).  To do this correctly, this header\n+      also provides the contents of the &lt;istream&gt; and &lt;ostream&gt;\n+      headers, but nothing else.  The contents of this header look like\n+   </para>\n+   <programlisting>\n+    #include &lt;ostream&gt;\n+    #include &lt;istream&gt;\n+\n+    namespace std\n+    {\n+        extern istream cin;\n+        extern ostream cout;\n+        ....\n+\n+        // this is explained below\n+        <emphasis>static ios_base::Init __foo;</emphasis>    // not its real name\n+    }\n+   </programlisting>\n+   <para>Now, the runtime penalty mentioned previously:  the global objects\n+      must be initialized before any of your own code uses them; this is\n+      guaranteed by the standard.  Like any other global object, they must\n+      be initialized once and only once.  This is typically done with a\n+      construct like the one above, and the nested class ios_base::Init is \n+      specified in the standard for just this reason.\n+   </para>\n+   <para>How does it work?  Because the header is included before any of your\n+      code, the <emphasis>__foo</emphasis> object is constructed before any of\n+      your objects.  (Global objects are built in the order in which they\n+      are declared, and destroyed in reverse order.)  The first time the\n+      constructor runs, the eight stream objects are set up.\n+   </para>\n+   <para>The <code>static</code> keyword means that each object file compiled\n+      from a source file containing &lt;iostream&gt; will have its own\n+      private copy of <emphasis>__foo</emphasis>.  There is no specified order\n+      of construction across object files (it's one of those pesky NP\n+      problems that make life so interesting), so one copy in each object\n+      file means that the stream objects are guaranteed to be set up before\n+      any of your code which uses them could run, thereby meeting the\n+      requirements of the standard.\n+   </para>\n+   <para>The penalty, of course, is that after the first copy of\n+      <emphasis>__foo</emphasis> is constructed, all the others are just wasted\n+      processor time.  The time spent is merely for an increment-and-test\n+      inside a function call, but over several dozen or hundreds of object\n+      files, that time can add up.  (It's not in a tight loop, either.)\n+   </para>\n+   <para>The lesson?  Only include &lt;iostream&gt; when you need to use one of\n+      the standard objects in that source file; you'll pay less startup\n+      time.  Only include the header files you need to in general; your\n+      compile times will go down when there's less parsing work to do.\n+   </para>\n+\n+</chapter>\n+\n+<!-- Chapter 02 : Stream Buffers -->\n+<chapter id=\"manual.io.streambufs\" xreflabel=\"Stream Buffers\">\n+  <title>Stream Buffers</title>\n+\n+  <sect1 id=\"io.streambuf.derived\" xreflabel=\"Derived streambuf Classes\">\n+    <title>Derived streambuf Classes</title>\n+    <para>\n+    </para>\n+\n+   <para>Creating your own stream buffers for I/O can be remarkably easy.\n+      If you are interested in doing so, we highly recommend two very\n+      excellent books:\n+      <ulink url=\"http://www.langer.camelot.de/iostreams.html\">Standard C++\n+      IOStreams and Locales</ulink> by Langer and Kreft, ISBN 0-201-18395-1, and\n+      <ulink url=\"http://www.josuttis.com/libbook/\">The C++ Standard Library</ulink>\n+      by Nicolai Josuttis, ISBN 0-201-37926-0.  Both are published by\n+      Addison-Wesley, who isn't paying us a cent for saying that, honest.\n+   </para>\n+   <para>Here is a simple example, io/outbuf1, from the Josuttis text.  It\n+      transforms everything sent through it to uppercase.  This version\n+      assumes many things about the nature of the character type being\n+      used (for more information, read the books or the newsgroups):\n+   </para>\n+   <programlisting>\n+    #include &lt;iostream&gt;\n+    #include &lt;streambuf&gt;\n+    #include &lt;locale&gt;\n+    #include &lt;cstdio&gt;\n+\n+    class outbuf : public std::streambuf\n+    {\n+      protected:\n+\t/* central output function\n+\t * - print characters in uppercase mode\n+\t */\n+\tvirtual int_type overflow (int_type c) {\n+\t    if (c != EOF) {\n+\t\t// convert lowercase to uppercase\n+\t\tc = std::toupper(static_cast&lt;char&gt;(c),getloc());\n+\n+\t\t// and write the character to the standard output\n+\t\tif (putchar(c) == EOF) {\n+\t\t    return EOF;\n+\t\t}\n+\t    }\n+\t    return c;\n+\t}\n+    };\n+\n+    int main()\n+    {\n+\t// create special output buffer\n+\toutbuf ob;\n+\t// initialize output stream with that output buffer\n+\tstd::ostream out(&amp;ob);\n+\n+\tout &lt;&lt; \"31 hexadecimal: \"\n+\t    &lt;&lt; std::hex &lt;&lt; 31 &lt;&lt; std::endl;\n+\treturn 0;\n+    }\n+   </programlisting>\n+   <para>Try it yourself!  More examples can be found in 3.1.x code, in\n+      <code>include/ext/*_filebuf.h</code>, and on\n+      <ulink url=\"http://www.informatik.uni-konstanz.de/~kuehl/c++/iostream/\">Dietmar\n+      K&uuml;hl's IOStreams page</ulink>.\n+   </para>\n+\n+  </sect1>\n+\n+  <sect1 id=\"io.streambuf.buffering\" xreflabel=\"Buffering\">\n+    <title>Buffering</title>\n+   <para>First, are you sure that you understand buffering?  Particularly\n+      the fact that C++ may not, in fact, have anything to do with it?\n+   </para>\n+   <para>The rules for buffering can be a little odd, but they aren't any\n+      different from those of C.  (Maybe that's why they can be a bit\n+      odd.)  Many people think that writing a newline to an output\n+      stream automatically flushes the output buffer.  This is true only\n+      when the output stream is, in fact, a terminal and not a file\n+      or some other device -- and <emphasis>that</emphasis> may not even be true\n+      since C++ says nothing about files nor terminals.  All of that is\n+      system-dependent.  (The &quot;newline-buffer-flushing only occurring\n+      on terminals&quot; thing is mostly true on Unix systems, though.)\n+   </para>\n+   <para>Some people also believe that sending <code>endl</code> down an\n+      output stream only writes a newline.  This is incorrect; after a\n+      newline is written, the buffer is also flushed.  Perhaps this\n+      is the effect you want when writing to a screen -- get the text\n+      out as soon as possible, etc -- but the buffering is largely\n+      wasted when doing this to a file:\n+   </para>\n+   <programlisting>\n+   output &lt;&lt; &quot;a line of text&quot; &lt;&lt; endl;\n+   output &lt;&lt; some_data_variable &lt;&lt; endl;\n+   output &lt;&lt; &quot;another line of text&quot; &lt;&lt; endl; </programlisting>\n+   <para>The proper thing to do in this case to just write the data out\n+      and let the libraries and the system worry about the buffering.\n+      If you need a newline, just write a newline:\n+   </para>\n+   <programlisting>\n+   output &lt;&lt; &quot;a line of text\\n&quot;\n+          &lt;&lt; some_data_variable &lt;&lt; '\\n'\n+          &lt;&lt; &quot;another line of text\\n&quot;; </programlisting>\n+   <para>I have also joined the output statements into a single statement.\n+      You could make the code prettier by moving the single newline to\n+      the start of the quoted text on the last line, for example.\n+   </para>\n+   <para>If you do need to flush the buffer above, you can send an\n+      <code>endl</code> if you also need a newline, or just flush the buffer\n+      yourself:\n+   </para>\n+   <programlisting>\n+   output &lt;&lt; ...... &lt;&lt; flush;    // can use std::flush manipulator\n+   output.flush();               // or call a member fn </programlisting>\n+   <para>On the other hand, there are times when writing to a file should\n+      be like writing to standard error; no buffering should be done \n+      because the data needs to appear quickly (a prime example is a\n+      log file for security-related information).  The way to do this is\n+      just to turn off the buffering <emphasis>before any I/O operations at\n+      all</emphasis> have been done (note that opening counts as an I/O operation):\n+   </para>\n+   <programlisting>\n+   std::ofstream    os;\n+   std::ifstream    is;\n+   int   i;\n+\n+   os.rdbuf()-&gt;pubsetbuf(0,0);\n+   is.rdbuf()-&gt;pubsetbuf(0,0);\n+\n+   os.open(&quot;/foo/bar/baz&quot;);\n+   is.open(&quot;/qux/quux/quuux&quot;);\n+   ...\n+   os &lt;&lt; &quot;this data is written immediately\\n&quot;;\n+   is &gt;&gt; i;   // and this will probably cause a disk read </programlisting>\n+   <para>Since all aspects of buffering are handled by a streambuf-derived\n+      member, it is necessary to get at that member with <code>rdbuf()</code>.\n+      Then the public version of <code>setbuf</code> can be called.  The \n+      arguments are the same as those for the Standard C I/O Library\n+      function (a buffer area followed by its size).\n+   </para>\n+   <para>A great deal of this is implementation-dependent.  For example,\n+      <code>streambuf</code> does not specify any actions for its own \n+      <code>setbuf()</code>-ish functions; the classes derived from\n+      <code>streambuf</code> each define behavior that &quot;makes \n+      sense&quot; for that class:  an argument of (0,0) turns off buffering\n+      for <code>filebuf</code> but does nothing at all for its siblings\n+      <code>stringbuf</code> and <code>strstreambuf</code>, and specifying\n+      anything other than (0,0) has varying effects.\n+      User-defined classes derived from <code>streambuf</code> can\n+      do whatever they want.  (For <code>filebuf</code> and arguments for\n+      <code>(p,s)</code> other than zeros, libstdc++ does what you'd expect:\n+      the first <code>s</code> bytes of <code>p</code> are used as a buffer,\n+      which you must allocate and deallocate.)\n+   </para>\n+   <para>A last reminder:  there are usually more buffers involved than\n+      just those at the language/library level.  Kernel buffers, disk\n+      buffers, and the like will also have an effect.  Inspecting and\n+      changing those are system-dependent.\n+   </para>\n+\n+  </sect1>\n+</chapter>\n+\n+<!-- Chapter 03 : Memory-based Streams -->\n+<chapter id=\"manual.io.memstreams\" xreflabel=\"Memory Streams\">\n+  <title>Memory Based Streams</title>\n+  <sect1 id=\"manual.io.memstreams.compat\" xreflabel=\"Compatibility strstream\">\n+    <title>Compatibility With strstream</title>\n+    <para>\n+    </para>\n+   <para>Stringstreams (defined in the header <code>&lt;sstream&gt;</code>)\n+      are in this author's opinion one of the coolest things since\n+      sliced time.  An example of their use is in the Received Wisdom\n+      section for Chapter 21 (Strings),\n+      <ulink url=\"../21_strings/howto.html#1.1internal\"> describing how to\n+      format strings</ulink>.\n+   </para>\n+   <para>The quick definition is:  they are siblings of ifstream and ofstream,\n+      and they do for <code>std::string</code> what their siblings do for\n+      files.  All that work you put into writing <code>&lt;&lt;</code> and\n+      <code>&gt;&gt;</code> functions for your classes now pays off\n+      <emphasis>again!</emphasis>  Need to format a string before passing the string\n+      to a function?  Send your stuff via <code>&lt;&lt;</code> to an\n+      ostringstream.  You've read a string as input and need to parse it?\n+      Initialize an istringstream with that string, and then pull pieces\n+      out of it with <code>&gt;&gt;</code>.  Have a stringstream and need to\n+      get a copy of the string inside?  Just call the <code>str()</code>\n+      member function.\n+   </para>\n+   <para>This only works if you've written your\n+      <code>&lt;&lt;</code>/<code>&gt;&gt;</code> functions correctly, though,\n+      and correctly means that they take istreams and ostreams as\n+      parameters, not i<emphasis>f</emphasis>streams and o<emphasis>f</emphasis>streams.  If they\n+      take the latter, then your I/O operators will work fine with\n+      file streams, but with nothing else -- including stringstreams.\n+   </para>\n+   <para>If you are a user of the strstream classes, you need to update\n+      your code.  You don't have to explicitly append <code>ends</code> to\n+      terminate the C-style character array, you don't have to mess with\n+      &quot;freezing&quot; functions, and you don't have to manage the\n+      memory yourself.  The strstreams have been officially deprecated,\n+      which means that 1) future revisions of the C++ Standard won't\n+      support them, and 2) if you use them, people will laugh at you.\n+   </para>\n+\n+\n+  </sect1>\n+</chapter>\n+\n+<!-- Chapter 04 : File-based Streams -->\n+<chapter id=\"manual.io.filestreams\" xreflabel=\"File Streams\">\n+  <title>File Based Streams</title>\n+\n+  <sect1 id=\"manual.io.filestreams.copying_a_file\" xreflabel=\"Copying a File\">\n+  <title>Copying a File</title>\n+  <para>\n+  </para>\n+\n+   <para>So you want to copy a file quickly and easily, and most important,\n+      completely portably.  And since this is C++, you have an open\n+      ifstream (call it IN) and an open ofstream (call it OUT):\n+   </para>\n+   <programlisting>\n+   #include &lt;fstream&gt;\n+\n+   std::ifstream  IN (\"input_file\");\n+   std::ofstream  OUT (\"output_file\"); </programlisting>\n+   <para>Here's the easiest way to get it completely wrong:\n+   </para>\n+   <programlisting>\n+   OUT &lt;&lt; IN;</programlisting>\n+   <para>For those of you who don't already know why this doesn't work\n+      (probably from having done it before), I invite you to quickly\n+      create a simple text file called &quot;input_file&quot; containing\n+      the sentence\n+   </para>\n+      <programlisting>\n+      The quick brown fox jumped over the lazy dog.</programlisting>\n+   <para>surrounded by blank lines.  Code it up and try it.  The contents\n+      of &quot;output_file&quot; may surprise you.\n+   </para>\n+   <para>Seriously, go do it.  Get surprised, then come back.  It's worth it.\n+   </para>\n+   <para>The thing to remember is that the <code>basic_[io]stream</code> classes\n+      handle formatting, nothing else.  In particular, they break up on\n+      whitespace.  The actual reading, writing, and storing of data is\n+      handled by the <code>basic_streambuf</code> family.  Fortunately, the\n+      <code>operator&lt;&lt;</code> is overloaded to take an ostream and\n+      a pointer-to-streambuf, in order to help with just this kind of\n+      &quot;dump the data verbatim&quot; situation.\n+   </para>\n+   <para>Why a <emphasis>pointer</emphasis> to streambuf and not just a streambuf?  Well,\n+      the [io]streams hold pointers (or references, depending on the\n+      implementation) to their buffers, not the actual\n+      buffers.  This allows polymorphic behavior on the part of the buffers\n+      as well as the streams themselves.  The pointer is easily retrieved\n+      using the <code>rdbuf()</code> member function.  Therefore, the easiest\n+      way to copy the file is:\n+   </para>\n+   <programlisting>\n+   OUT &lt;&lt; IN.rdbuf();</programlisting>\n+   <para>So what <emphasis>was</emphasis> happening with OUT&lt;&lt;IN?  Undefined\n+      behavior, since that particular &lt;&lt; isn't defined by the Standard.\n+      I have seen instances where it is implemented, but the character\n+      extraction process removes all the whitespace, leaving you with no\n+      blank lines and only &quot;Thequickbrownfox...&quot;.  With\n+      libraries that do not define that operator, IN (or one of IN's\n+      member pointers) sometimes gets converted to a void*, and the output\n+      file then contains a perfect text representation of a hexadecimal\n+      address (quite a big surprise).  Others don't compile at all.\n+   </para>\n+   <para>Also note that none of this is specific to o<emphasis>*f*</emphasis>streams. \n+      The operators shown above are all defined in the parent \n+      basic_ostream class and are therefore available with all possible\n+      descendants.\n+   </para>\n+\n+  </sect1>\n+\n+  <sect1 id=\"manual.io.filestreams.binary\" xreflabel=\"Binary Input and Output\">\n+    <title>Binary Input and Output</title>\n+    <para>\n+    </para>\n+   <para>The first and most important thing to remember about binary I/O is\n+      that opening a file with <code>ios::binary</code> is not, repeat\n+      <emphasis>not</emphasis>, the only thing you have to do.  It is not a silver\n+      bullet, and will not allow you to use the <code>&lt;&lt;/&gt;&gt;</code>\n+      operators of the normal fstreams to do binary I/O.\n+   </para>\n+   <para>Sorry.  Them's the breaks.\n+   </para>\n+   <para>This isn't going to try and be a complete tutorial on reading and\n+      writing binary files (because &quot;binary&quot;\n+      <ulink url=\"#7\">covers a lot of ground)</ulink>, but we will try and clear\n+      up a couple of misconceptions and common errors.\n+   </para>\n+   <para>First, <code>ios::binary</code> has exactly one defined effect, no more\n+      and no less.  Normal text mode has to be concerned with the newline\n+      characters, and the runtime system will translate between (for\n+      example) '\\n' and the appropriate end-of-line sequence (LF on Unix,\n+      CRLF on DOS, CR on Macintosh, etc).  (There are other things that\n+      normal mode does, but that's the most obvious.)  Opening a file in\n+      binary mode disables this conversion, so reading a CRLF sequence\n+      under Windows won't accidentally get mapped to a '\\n' character, etc.\n+      Binary mode is not supposed to suddenly give you a bitstream, and\n+      if it is doing so in your program then you've discovered a bug in\n+      your vendor's compiler (or some other part of the C++ implementation,\n+      possibly the runtime system).\n+   </para>\n+   <para>Second, using <code>&lt;&lt;</code> to write and <code>&gt;&gt;</code> to\n+      read isn't going to work with the standard file stream classes, even\n+      if you use <code>skipws</code> during reading.  Why not?  Because \n+      ifstream and ofstream exist for the purpose of <emphasis>formatting</emphasis>,\n+      not reading and writing.  Their job is to interpret the data into\n+      text characters, and that's exactly what you don't want to happen\n+      during binary I/O.\n+   </para>\n+   <para>Third, using the <code>get()</code> and <code>put()/write()</code> member\n+      functions still aren't guaranteed to help you.  These are\n+      &quot;unformatted&quot; I/O functions, but still character-based.\n+      (This may or may not be what you want, see below.)\n+   </para>\n+   <para>Notice how all the problems here are due to the inappropriate use\n+      of <emphasis>formatting</emphasis> functions and classes to perform something\n+      which <emphasis>requires</emphasis> that formatting not be done?  There are a\n+      seemingly infinite number of solutions, and a few are listed here:\n+   </para>\n+   <itemizedlist>\n+      <listitem>\n+\t<para><quote>Derive your own fstream-type classes and write your own\n+          &lt;&lt;/&gt;&gt; operators to do binary I/O on whatever data\n+          types you're using.</quote>\n+\t</para>\n+\t<para>\n+\t  This is a Bad Thing, because while\n+          the compiler would probably be just fine with it, other humans\n+          are going to be confused.  The overloaded bitshift operators\n+          have a well-defined meaning (formatting), and this breaks it.\n+\t</para>\n+      </listitem>\n+      <listitem>\n+\t<para>\n+\t  <quote>Build the file structure in memory, then\n+\t  <code>mmap()</code> the file and copy the\n+\t  structure.\n+\t</quote>\n+\t</para>\n+\t<para>\n+\t  Well, this is easy to make work, and easy to break, and is\n+\t  pretty equivalent to using <code>::read()</code> and\n+\t  <code>::write()</code> directly, and makes no use of the\n+\t  iostream library at all...\n+\t  </para>\n+      </listitem>\n+      <listitem>\n+\t<para>\n+\t  <quote>Use streambufs, that's what they're there for.</quote>\n+\t</para>\n+\t<para>\n+          While not trivial for the beginner, this is the best of all\n+          solutions.  The streambuf/filebuf layer is the layer that is\n+          responsible for actual I/O.  If you want to use the C++\n+          library for binary I/O, this is where you start.\n+\t</para>\n+      </listitem>\n+   </itemizedlist>\n+   <para>How to go about using streambufs is a bit beyond the scope of this\n+      document (at least for now), but while streambufs go a long way,\n+      they still leave a couple of things up to you, the programmer.\n+      As an example, byte ordering is completely between you and the\n+      operating system, and you have to handle it yourself.\n+   </para>\n+   <para>Deriving a streambuf or filebuf\n+      class from the standard ones, one that is specific to your data\n+      types (or an abstraction thereof) is probably a good idea, and\n+      lots of examples exist in journals and on Usenet.  Using the\n+      standard filebufs directly (either by declaring your own or by\n+      using the pointer returned from an fstream's <code>rdbuf()</code>)\n+      is certainly feasible as well.\n+   </para>\n+   <para>One area that causes problems is trying to do bit-by-bit operations\n+      with filebufs.  C++ is no different from C in this respect:  I/O\n+      must be done at the byte level.  If you're trying to read or write\n+      a few bits at a time, you're going about it the wrong way.  You\n+      must read/write an integral number of bytes and then process the\n+      bytes.  (For example, the streambuf functions take and return\n+      variables of type <code>int_type</code>.)\n+   </para>\n+   <para>Another area of problems is opening text files in binary mode.\n+      Generally, binary mode is intended for binary files, and opening\n+      text files in binary mode means that you now have to deal with all of \n+      those end-of-line and end-of-file problems that we mentioned before.\n+      An instructive thread from comp.lang.c++.moderated delved off into\n+      this topic starting more or less at\n+      <ulink url=\"http://groups.google.com/groups?oi=djq&amp;selm=an_436187505\">this</ulink>\n+      article and continuing to the end of the thread.  (You'll have to\n+      sort through some flames every couple of paragraphs, but the points\n+      made are good ones.)\n+   </para>\n+ \n+  </sect1>\n+\n+ <sect1 id=\"manual.io.filestreams.binary2\" xreflabel=\"Binary Input and Output\">\n+    <title>More Binary Input and Output</title>\n+   <para>Towards the beginning of February 2001, the subject of\n+      &quot;binary&quot; I/O was brought up in a couple of places at the\n+      same time.  One notable place was Usenet, where James Kanze and\n+      Dietmar K&uuml;hl separately posted articles on why attempting\n+      generic binary I/O was not a good idea.  (Here are copies of\n+      <ulink url=\"binary_iostreams_kanze.txt\">Kanze's article</ulink> and\n+      <ulink url=\"binary_iostreams_kuehl.txt\">K&uuml;hl's article</ulink>.)\n+   </para>\n+   <para>Briefly, the problems of byte ordering and type sizes mean that\n+      the unformatted functions like <code>ostream::put()</code> and\n+      <code>istream::get()</code> cannot safely be used to communicate\n+      between arbitrary programs, or across a network, or from one\n+      invocation of a program to another invocation of the same program\n+      on a different platform, etc.\n+   </para>\n+   <para>The entire Usenet thread is instructive, and took place under the\n+      subject heading &quot;binary iostreams&quot; on both comp.std.c++\n+      and comp.lang.c++.moderated in parallel.  Also in that thread,\n+      Dietmar K&uuml;hl mentioned that he had written a pair of stream\n+      classes that would read and write XDR, which is a good step towards\n+      a portable binary format.\n+   </para>\n+\n+ </sect1>\n+\n+</chapter>\n+\n+<!-- Chapter 03 : Interacting with C -->\n+<chapter id=\"manual.io.c\" xreflabel=\"Interacting with C\">\n+  <title>Interacting with C</title>\n+\n+\n+  <sect1 id=\"manual.io.c.FILE\" xreflabel=\"Using FILE* and file descriptors\">\n+    <title>Using FILE* and file descriptors</title>\n+    <para>\n+      See the <link linkend=\"manual.ext.io\">extensions</link> for using\n+      <type>FILE</type> and <type>file descriptors</type> with\n+      <classname>ofstream</classname> and\n+      <classname>ifstream</classname>.\n+    </para>\n+  </sect1>\n+\n+  <sect1 id=\"manual.io.c.sync\" xreflabel=\"Performance Issues\">\n+    <title>Performance</title>\n+    <para>\n+      Pathetic Performance? Ditch C.\n+    </para>\n+   <para>It sounds like a flame on C, but it isn't.  Really.  Calm down.\n+      I'm just saying it to get your attention.\n+   </para>\n+   <para>Because the C++ library includes the C library, both C-style and\n+      C++-style I/O have to work at the same time.  For example:\n+   </para>\n+   <programlisting>\n+     #include &lt;iostream&gt;\n+     #include &lt;cstdio&gt;\n+\n+     std::cout &lt;&lt; &quot;Hel&quot;;\n+     std::printf (&quot;lo, worl&quot;);\n+     std::cout &lt;&lt; &quot;d!\\n&quot;;\n+   </programlisting>\n+   <para>This must do what you think it does.\n+   </para>\n+   <para>Alert members of the audience will immediately notice that buffering\n+      is going to make a hash of the output unless special steps are taken.\n+   </para>\n+   <para>The special steps taken by libstdc++, at least for version 3.0,\n+      involve doing very little buffering for the standard streams, leaving\n+      most of the buffering to the underlying C library.  (This kind of\n+      thing is tricky to get right.)\n+      The upside is that correctness is ensured.  The downside is that\n+      writing through <code>cout</code> can quite easily lead to awful\n+      performance when the C++ I/O library is layered on top of the C I/O\n+      library (as it is for 3.0 by default).  Some patches have been applied\n+      which improve the situation for 3.1.\n+   </para>\n+   <para>However, the C and C++ standard streams only need to be kept in sync\n+      when both libraries' facilities are in use.  If your program only uses\n+      C++ I/O, then there's no need to sync with the C streams.  The right\n+      thing to do in this case is to call\n+   </para>\n+   <programlisting>\n+     #include <emphasis>any of the I/O headers such as ios, iostream, etc</emphasis>\n+\n+     std::ios::sync_with_stdio(false);\n+   </programlisting>\n+   <para>You must do this before performing any I/O via the C++ stream objects.\n+      Once you call this, the C++ streams will operate independently of the\n+      (unused) C streams.  For GCC 3.x, this means that <code>cout</code> and\n+      company will become fully buffered on their own.\n+   </para>\n+   <para>Note, by the way, that the synchronization requirement only applies to\n+      the standard streams (<code>cin</code>, <code>cout</code>,\n+      <code>cerr</code>,\n+      <code>clog</code>, and their wide-character counterparts).  File stream\n+      objects that you declare yourself have no such requirement and are fully\n+      buffered.\n+   </para>\n+\n+\n+  </sect1>  \n+</chapter>\n+\n+</part>"}, {"sha": "757249d277ea70060193c43723eb69e861339705", "filename": "libstdc++-v3/doc/xml/manual/iterators.xml", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fiterators.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fiterators.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fiterators.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,177 @@\n+<?xml version='1.0'?>\n+<!DOCTYPE part PUBLIC \"-//OASIS//DTD DocBook XML V4.5//EN\" \n+ \"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\" \n+[ ]>\n+\n+<part id=\"manual.iterators\" xreflabel=\"Iterators\">\n+<?dbhtml filename=\"iterators.html\"?>\n+ \n+<partinfo>\n+  <keywordset>\n+    <keyword>\n+      ISO C++\n+    </keyword>\n+    <keyword>\n+      library\n+    </keyword>\n+  </keywordset>\n+</partinfo>\n+\n+<title>Iterators</title>\n+\n+<!-- Chapter 01 : Predefined -->\n+<chapter id=\"manual.iterators.predefined\" xreflabel=\"Predefined\">\n+  <title>Predefined</title>\n+\n+  <sect1 id=\"iterators.predefined.vs_pointers\" xreflabel=\"Versus Pointers\">\n+    <title>Iterators vs. Pointers</title>\n+   <para><ulink url=\"../faq/index.html#5_1\">FAQ 5.1</ulink> points out that iterators\n+      are not implemented as pointers.  They are a generalization of\n+      pointers, but they are implemented in libstdc++ as separate classes.\n+   </para>\n+   <para>Keeping that simple fact in mind as you design your code will\n+      prevent a whole lot of difficult-to-understand bugs.\n+   </para>\n+   <para>You can think of it the other way 'round, even.  Since iterators\n+      are a generalization, that means that <emphasis>pointers</emphasis> are\n+      <emphasis>iterators</emphasis>, and that pointers can be used whenever an\n+      iterator would be.  All those functions in the Algorithms chapter\n+      of the Standard will work just as well on plain arrays and their\n+      pointers.\n+   </para>\n+   <para>That doesn't mean that when you pass in a pointer, it gets wrapped\n+      into some special delegating iterator-to-pointer class with a layer\n+      of overhead.  (If you think that's the case anywhere, you don't\n+      understand templates to begin with...)  Oh, no; if you pass\n+      in a pointer, then the compiler will instantiate that template\n+      using T* as a type, and good old high-speed pointer arithmetic as\n+      its operations, so the resulting code will be doing exactly the same\n+      things as it would be doing if you had hand-coded it yourself (for\n+      the 273rd time).\n+   </para>\n+   <para>How much overhead <emphasis>is</emphasis> there when using an iterator class?\n+      Very little.  Most of the layering classes contain nothing but\n+      typedefs, and typedefs are &quot;meta-information&quot; that simply\n+      tell the compiler some nicknames; they don't create code.  That\n+      information gets passed down through inheritance, so while the\n+      compiler has to do work looking up all the names, your runtime code\n+      does not.  (This has been a prime concern from the beginning.)\n+   </para>\n+ \n+\n+  </sect1>\n+\n+  <sect1 id=\"iterators.predefined.end\" xreflabel=\"end() Is One Past the End\">\n+    <title>One Past the End</title>\n+\n+   <para>This starts off sounding complicated, but is actually very easy,\n+      especially towards the end.  Trust me.\n+   </para>\n+   <para>Beginners usually have a little trouble understand the whole\n+      'past-the-end' thing, until they remember their early algebra classes\n+      (see, they <emphasis>told</emphasis> you that stuff would come in handy!) and\n+      the concept of half-open ranges.\n+   </para>\n+   <para>First, some history, and a reminder of some of the funkier rules in\n+      C and C++ for builtin arrays.  The following rules have always been\n+      true for both languages:\n+   </para>\n+   <orderedlist>\n+      <listitem>\n+\t<para>You can point anywhere in the array, <emphasis>or to the first element\n+          past the end of the array</emphasis>.  A pointer that points to one\n+          past the end of the array is guaranteed to be as unique as a\n+          pointer to somewhere inside the array, so that you can compare\n+          such pointers safely.\n+\t</para>\n+      </listitem>\n+      <listitem>\n+\t<para>You can only dereference a pointer that points into an array.\n+          If your array pointer points outside the array -- even to just\n+          one past the end -- and you dereference it, Bad Things happen.\n+\t</para>\n+      </listitem>\n+      <listitem>\n+\t<para>Strictly speaking, simply pointing anywhere else invokes\n+          undefined behavior.  Most programs won't puke until such a\n+          pointer is actually dereferenced, but the standards leave that\n+          up to the platform.\n+\t</para>\n+      </listitem>\n+   </orderedlist>\n+   <para>The reason this past-the-end addressing was allowed is to make it\n+      easy to write a loop to go over an entire array, e.g.,\n+      while (*d++ = *s++);.\n+   </para>\n+   <para>So, when you think of two pointers delimiting an array, don't think\n+      of them as indexing 0 through n-1.  Think of them as <emphasis>boundary\n+      markers</emphasis>:\n+   </para>\n+   <programlisting>\n+\n+   beginning            end\n+     |                   |\n+     |                   |               This is bad.  Always having to\n+     |                   |               remember to add or subtract one.\n+     |                   |               Off-by-one bugs very common here.\n+     V                   V\n+        array of N elements\n+     |---|---|--...--|---|---|\n+     | 0 | 1 |  ...  |N-2|N-1|\n+     |---|---|--...--|---|---|\n+\n+     ^                       ^\n+     |                       |\n+     |                       |           This is good.  This is safe.  This\n+     |                       |           is guaranteed to work.  Just don't\n+     |                       |           dereference 'end'.\n+   beginning                end\n+\n+   </programlisting>\n+   <para>See?  Everything between the boundary markers is part of the array.\n+      Simple.\n+   </para>\n+   <para>Now think back to your junior-high school algebra course, when you\n+      were learning how to draw graphs.  Remember that a graph terminating\n+      with a solid dot meant, &quot;Everything up through this point,&quot;\n+      and a graph terminating with an open dot meant, &quot;Everything up\n+      to, but not including, this point,&quot; respectively called closed\n+      and open ranges?  Remember how closed ranges were written with\n+      brackets, <emphasis>[a,b]</emphasis>, and open ranges were written with parentheses,\n+      <emphasis>(a,b)</emphasis>?\n+   </para>\n+   <para>The boundary markers for arrays describe a <emphasis>half-open range</emphasis>,\n+      starting with (and including) the first element, and ending with (but\n+      not including) the last element:  <emphasis>[beginning,end)</emphasis>.  See, I\n+      told you it would be simple in the end.\n+   </para>\n+   <para>Iterators, and everything working with iterators, follows this same\n+      time-honored tradition.  A container's <code>begin()</code> method returns\n+      an iterator referring to the first element, and its <code>end()</code>\n+      method returns a past-the-end iterator, which is guaranteed to be\n+      unique and comparable against any other iterator pointing into the\n+      middle of the container.\n+   </para>\n+   <para>Container constructors, container methods, and algorithms, all take\n+      pairs of iterators describing a range of values on which to operate.\n+      All of these ranges are half-open ranges, so you pass the beginning\n+      iterator as the starting parameter, and the one-past-the-end iterator\n+      as the finishing parameter.\n+   </para>\n+   <para>This generalizes very well.  You can operate on sub-ranges quite\n+      easily this way; functions accepting a <emphasis>[first,last)</emphasis> range\n+      don't know or care whether they are the boundaries of an entire {array,\n+      sequence, container, whatever}, or whether they only enclose a few\n+      elements from the center.  This approach also makes zero-length\n+      sequences very simple to recognize:  if the two endpoints compare\n+      equal, then the {array, sequence, container, whatever} is empty.\n+   </para>\n+   <para>Just don't dereference <code>end()</code>.\n+   </para>\n+\n+  </sect1>\n+</chapter>\n+\n+<!-- Chapter 02 : Stream -->\n+\n+</part>"}, {"sha": "a4f20bd974c8bd563fe0f26710c9674c2ab4b541", "filename": "libstdc++-v3/doc/xml/manual/locale.xml", "status": "added", "additions": 653, "deletions": 0, "changes": 653, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Flocale.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Flocale.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Flocale.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,653 @@\n+<sect1 id=\"manual.localization.locales.locale\" xreflabel=\"locale\">\n+<?dbhtml filename=\"locale.html\"?>\n+ \n+<sect1info>\n+  <keywordset>\n+    <keyword>\n+      ISO C++\n+    </keyword>\n+    <keyword>\n+      locale\n+    </keyword>\n+  </keywordset>\n+</sect1info>\n+\n+<title>locale</title>\n+\n+<para>\n+Describes the basic locale object, including nested\n+classes id, facet, and the reference-counted implementation object,\n+class _Impl.\n+</para>\n+\n+<sect2 id=\"locales.locale.req\" xreflabel=\"locales.locale.req\">\n+<title>Requirements</title>\n+\n+<para>\n+Class locale is non-templatized and has two distinct types nested\n+inside of it:\n+</para>\n+\n+<blockquote>\n+<para>\n+<emphasis>\n+class facet\n+22.1.1.1.2 Class locale::facet\n+</emphasis>\n+</para>\n+</blockquote>\n+\n+<para>\n+Facets actually implement locale functionality. For instance, a facet\n+called numpunct is the data objects that can be used to query for the\n+thousands separator is in the German locale.\n+</para>\n+\n+<para>\n+Literally, a facet is strictly defined:\n+</para>\n+\n+<itemizedlist>\n+  <listitem>\n+    <para>\n+      Dontaining the following public data member:\n+    </para>\n+    <para>\n+      <code>static locale::id id;</code>\n+    </para>\n+  </listitem>\n+\n+  <listitem>\n+    <para>\n+      Derived from another facet:\n+    </para>\n+    <para>\n+      <code>class gnu_codecvt: public std::ctype&lt;user-defined-type&gt;</code>\n+    </para>\n+  </listitem>\n+</itemizedlist>\n+\n+<para>\n+Of interest in this class are the memory management options explicitly\n+specified as an argument to facet's constructor. Each constructor of a\n+facet class takes a std::size_t __refs argument: if __refs == 0, the\n+facet is deleted when the locale containing it is destroyed. If __refs\n+== 1, the facet is not destroyed, even when it is no longer\n+referenced.\n+</para>\n+\n+<blockquote>\n+<para>\n+<emphasis>\n+class id\n+22.1.1.1.3 - Class locale::id\n+</emphasis>\n+</para>\n+</blockquote>\n+\n+<para>\n+Provides an index for looking up specific facets.\n+</para>\n+</sect2>\n+\n+<sect2 id=\"locales.locale.design\" xreflabel=\"locales.locale.design\">\n+<title>Design</title>\n+\n+<para>\n+The major design challenge is fitting an object-orientated and\n+non-global locale design ontop of POSIX and other relevant stanards,\n+which include the Single Unix (nee X/Open.)\n+</para>\n+\n+<para>\n+Because C and earlier versions of POSIX falls down so completely,\n+portibility is an issue.\n+</para>\n+\n+</sect2>\n+\n+<sect2 id=\"locales.locale.impl\" xreflabel=\"locales.locale.impl\">\n+<title>Implementation</title>\n+\n+  <sect3 id=\"locale.impl.c\" xreflabel=\"locale.impl.c\">\n+    <title>Interacting with &quot;C&quot; locales</title>\n+\n+<itemizedlist>\n+   <listitem>\n+     <para> \n+       <code>`locale -a`</code> displays available locales. \n+     </para>\n+<blockquote>\n+<programlisting>\n+af_ZA\n+ar_AE\n+ar_AE.utf8\n+ar_BH\n+ar_BH.utf8\n+ar_DZ\n+ar_DZ.utf8\n+ar_EG\n+ar_EG.utf8\n+ar_IN\n+ar_IQ\n+ar_IQ.utf8\n+ar_JO\n+ar_JO.utf8\n+ar_KW\n+ar_KW.utf8\n+ar_LB\n+ar_LB.utf8\n+ar_LY\n+ar_LY.utf8\n+ar_MA\n+ar_MA.utf8\n+ar_OM\n+ar_OM.utf8\n+ar_QA\n+ar_QA.utf8\n+ar_SA\n+ar_SA.utf8\n+ar_SD\n+ar_SD.utf8\n+ar_SY\n+ar_SY.utf8\n+ar_TN\n+ar_TN.utf8\n+ar_YE\n+ar_YE.utf8\n+be_BY\n+be_BY.utf8\n+bg_BG\n+bg_BG.utf8\n+br_FR\n+bs_BA\n+C\n+ca_ES\n+ca_ES@euro\n+ca_ES.utf8\n+ca_ES.utf8@euro\n+cs_CZ\n+cs_CZ.utf8\n+cy_GB\n+da_DK\n+da_DK.iso885915\n+da_DK.utf8\n+de_AT\n+de_AT@euro\n+de_AT.utf8\n+de_AT.utf8@euro\n+de_BE\n+de_BE@euro\n+de_BE.utf8\n+de_BE.utf8@euro\n+de_CH\n+de_CH.utf8\n+de_DE\n+de_DE@euro\n+de_DE.utf8\n+de_DE.utf8@euro\n+de_LU\n+de_LU@euro\n+de_LU.utf8\n+de_LU.utf8@euro\n+el_GR\n+el_GR.utf8\n+en_AU\n+en_AU.utf8\n+en_BW\n+en_BW.utf8\n+en_CA\n+en_CA.utf8\n+en_DK\n+en_DK.utf8\n+en_GB\n+en_GB.iso885915\n+en_GB.utf8\n+en_HK\n+en_HK.utf8\n+en_IE\n+en_IE@euro\n+en_IE.utf8\n+en_IE.utf8@euro\n+en_IN\n+en_NZ\n+en_NZ.utf8\n+en_PH\n+en_PH.utf8\n+en_SG\n+en_SG.utf8\n+en_US\n+en_US.iso885915\n+en_US.utf8\n+en_ZA\n+en_ZA.utf8\n+en_ZW\n+en_ZW.utf8\n+es_AR\n+es_AR.utf8\n+es_BO\n+es_BO.utf8\n+es_CL\n+es_CL.utf8\n+es_CO\n+es_CO.utf8\n+es_CR\n+es_CR.utf8\n+es_DO\n+es_DO.utf8\n+es_EC\n+es_EC.utf8\n+es_ES\n+es_ES@euro\n+es_ES.utf8\n+es_ES.utf8@euro\n+es_GT\n+es_GT.utf8\n+es_HN\n+es_HN.utf8\n+es_MX\n+es_MX.utf8\n+es_NI\n+es_NI.utf8\n+es_PA\n+es_PA.utf8\n+es_PE\n+es_PE.utf8\n+es_PR\n+es_PR.utf8\n+es_PY\n+es_PY.utf8\n+es_SV\n+es_SV.utf8\n+es_US\n+es_US.utf8\n+es_UY\n+es_UY.utf8\n+es_VE\n+es_VE.utf8\n+et_EE\n+et_EE.utf8\n+eu_ES\n+eu_ES@euro\n+eu_ES.utf8\n+eu_ES.utf8@euro\n+fa_IR\n+fi_FI\n+fi_FI@euro\n+fi_FI.utf8\n+fi_FI.utf8@euro\n+fo_FO\n+fo_FO.utf8\n+fr_BE\n+fr_BE@euro\n+fr_BE.utf8\n+fr_BE.utf8@euro\n+fr_CA\n+fr_CA.utf8\n+fr_CH\n+fr_CH.utf8\n+fr_FR\n+fr_FR@euro\n+fr_FR.utf8\n+fr_FR.utf8@euro\n+fr_LU\n+fr_LU@euro\n+fr_LU.utf8\n+fr_LU.utf8@euro\n+ga_IE\n+ga_IE@euro\n+ga_IE.utf8\n+ga_IE.utf8@euro\n+gl_ES\n+gl_ES@euro\n+gl_ES.utf8\n+gl_ES.utf8@euro\n+gv_GB\n+gv_GB.utf8\n+he_IL\n+he_IL.utf8\n+hi_IN\n+hr_HR\n+hr_HR.utf8\n+hu_HU\n+hu_HU.utf8\n+id_ID\n+id_ID.utf8\n+is_IS\n+is_IS.utf8\n+it_CH\n+it_CH.utf8\n+it_IT\n+it_IT@euro\n+it_IT.utf8\n+it_IT.utf8@euro\n+iw_IL\n+iw_IL.utf8\n+ja_JP.eucjp\n+ja_JP.utf8\n+ka_GE\n+kl_GL\n+kl_GL.utf8\n+ko_KR.euckr\n+ko_KR.utf8\n+kw_GB\n+kw_GB.utf8\n+lt_LT\n+lt_LT.utf8\n+lv_LV\n+lv_LV.utf8\n+mi_NZ\n+mk_MK\n+mk_MK.utf8\n+mr_IN\n+ms_MY\n+ms_MY.utf8\n+mt_MT\n+mt_MT.utf8\n+nl_BE\n+nl_BE@euro\n+nl_BE.utf8\n+nl_BE.utf8@euro\n+nl_NL\n+nl_NL@euro\n+nl_NL.utf8\n+nl_NL.utf8@euro\n+nn_NO\n+nn_NO.utf8\n+no_NO\n+no_NO.utf8\n+oc_FR\n+pl_PL\n+pl_PL.utf8\n+POSIX\n+pt_BR\n+pt_BR.utf8\n+pt_PT\n+pt_PT@euro\n+pt_PT.utf8\n+pt_PT.utf8@euro\n+ro_RO\n+ro_RO.utf8\n+ru_RU\n+ru_RU.koi8r\n+ru_RU.utf8\n+ru_UA\n+ru_UA.utf8\n+se_NO\n+sk_SK\n+sk_SK.utf8\n+sl_SI\n+sl_SI.utf8\n+sq_AL\n+sq_AL.utf8\n+sr_YU\n+sr_YU@cyrillic\n+sr_YU.utf8\n+sr_YU.utf8@cyrillic\n+sv_FI\n+sv_FI@euro\n+sv_FI.utf8\n+sv_FI.utf8@euro\n+sv_SE\n+sv_SE.iso885915\n+sv_SE.utf8\n+ta_IN\n+te_IN\n+tg_TJ\n+th_TH\n+th_TH.utf8\n+tl_PH\n+tr_TR\n+tr_TR.utf8\n+uk_UA\n+uk_UA.utf8\n+ur_PK\n+uz_UZ\n+vi_VN\n+vi_VN.tcvn\n+wa_BE\n+wa_BE@euro\n+yi_US\n+zh_CN\n+zh_CN.gb18030\n+zh_CN.gbk\n+zh_CN.utf8\n+zh_HK\n+zh_HK.utf8\n+zh_TW\n+zh_TW.euctw\n+zh_TW.utf8\n+</programlisting>\n+</blockquote>\n+</listitem>\n+   \n+   <listitem>\n+     <para> \n+       <code>`locale`</code> displays environmental variables that\n+       impact how locale(\"\") will be deduced.\n+     </para>\n+<blockquote>\n+<programlisting>\n+LANG=en_US\n+LC_CTYPE=\"en_US\"\n+LC_NUMERIC=\"en_US\"\n+LC_TIME=\"en_US\"\n+LC_COLLATE=\"en_US\"\n+LC_MONETARY=\"en_US\"\n+LC_MESSAGES=\"en_US\"\n+LC_PAPER=\"en_US\"\n+LC_NAME=\"en_US\"\n+LC_ADDRESS=\"en_US\"\n+LC_TELEPHONE=\"en_US\"\n+LC_MEASUREMENT=\"en_US\"\n+LC_IDENTIFICATION=\"en_US\"\n+LC_ALL=\n+</programlisting>\n+</blockquote>\n+</listitem>\n+</itemizedlist>\n+\n+<para>\n+From Josuttis, p. 697-698, which says, that \"there is only *one*\n+relation (of the C++ locale mechanism) to the C locale mechanism: the\n+global C locale is modified if a named C++ locale object is set as the\n+global locale\" (emphasis Paolo), that is:\n+</para>\n+\n+<programlisting>std::locale::global(std::locale(\"\"));</programlisting>\n+\n+<para>affects the C functions as if the following call was made:</para>\n+\n+<programlisting>std::setlocale(LC_ALL, \"\");</programlisting>\n+\n+<para>\n+  On the other hand, there is *no* viceversa, that is, calling\n+  setlocale has *no* whatsoever on the C++ locale mechanism, in\n+  particular on the working of locale(\"\"), which constructs the locale\n+  object from the environment of the running program, that is, in\n+  practice, the set of LC_ALL, LANG, etc. variable of the shell.\n+</para>\n+\n+  </sect3>\n+</sect2>\n+\n+<sect2 id=\"locales.locale.future\" xreflabel=\"locales.locale.future\">\n+<title>Future</title>\n+\n+<itemizedlist>\n+   <listitem>\n+     <para>\n+       Locale initialization: at what point does _S_classic, _S_global\n+       get initialized? Can named locales assume this initialization\n+       has already taken place? \n+     </para>\n+     </listitem>\n+\n+   <listitem>\n+     <para> \n+       Document how named locales error check when filling data\n+       members. Ie, a fr_FR locale that doesn't have\n+       numpunct::truename(): does it use \"true\"? Or is it a blank\n+       string? What's the convention? \n+   </para>\n+   </listitem>\n+\n+   <listitem>\n+     <para> \n+       Explain how locale aliasing happens. When does \"de_DE\" use \"de\"\n+       information? What is the rule for locales composed of just an\n+       ISO language code (say, \"de\") and locales with both an ISO\n+       language code and ISO country code (say, \"de_DE\"). \n+     </para>\n+   </listitem>\n+\n+   <listitem>\n+     <para> \n+       What should non-required facet instantiations do?  If the\n+       generic implemenation is provided, then how to end-users\n+       provide specializations? \n+   </para>\n+   </listitem>\n+</itemizedlist>\n+</sect2>\n+\n+<bibliography id=\"locales.locale.biblio\" xreflabel=\"locales.locale.biblio\">\n+<title>Bibliography</title>\n+\n+  <biblioentry>\n+    <title>\n+      The GNU C Library\n+    </title>\n+\n+    <author>\n+      <surname>McGrath</surname>\n+      <firstname>Roland</firstname>\n+    </author>\n+    <author>\n+      <surname>Drepper</surname>\n+      <firstname>Ulrich</firstname>\n+    </author>\n+\n+    <copyright>\n+      <year>2007</year>\n+      <holder>FSF</holder>\n+    </copyright>\n+    <pagenums>Chapters 6 Character Set Handling and 7 Locales and Internationalization</pagenums>\n+\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      Correspondence\n+    </title>\n+\n+    <author>\n+      <surname>Drepper</surname>\n+      <firstname>Ulrich</firstname>\n+    </author>\n+\n+    <copyright>\n+      <year>2002</year>\n+      <holder></holder>\n+    </copyright>\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      ISO/IEC 14882:1998 Programming languages - C++\n+    </title>\n+\n+    <copyright>\n+      <year>1998</year>\n+      <holder>ISO</holder>\n+    </copyright>\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      ISO/IEC 9899:1999 Programming languages - C\n+    </title>\n+\n+    <copyright>\n+      <year>1999</year>\n+      <holder>ISO</holder>\n+    </copyright>\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      System Interface Definitions, Issue 6 (IEEE Std. 1003.1-200x)\n+    </title>\n+\n+    <copyright>\n+      <year>1999</year>\n+      <holder>\n+      The Open Group/The Institute of Electrical and Electronics Engineers, Inc.</holder>\n+    </copyright>\n+\n+    <biblioid>\n+      <ulink url=\"http://www.opennc.org/austin/docreg.html\">\n+      </ulink>\n+    </biblioid>\n+\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      The C++ Programming Language, Special Edition\n+    </title>\n+    \n+    <author>\n+      <surname>Stroustrup</surname>\n+      <firstname>Bjarne</firstname>\n+    </author>\n+\n+    <copyright>\n+      <year>2000</year>\n+      <holder>Addison Wesley, Inc.</holder>\n+    </copyright>\n+    <pagenums>Appendix D</pagenums>\n+\n+    <publisher>\n+      <publishername>\n+\tAddison Wesley\n+      </publishername>\n+    </publisher>\n+\n+  </biblioentry> \n+\n+\n+  <biblioentry>\n+    <title>\n+      Standard C++ IOStreams and Locales\n+    </title>\n+    <subtitle>\n+      Advanced Programmer's Guide and Reference\n+    </subtitle>\n+    \n+    <author>\n+      <surname>Langer</surname>\n+      <firstname>Angelika</firstname>\n+    </author>\n+\n+    <author>\n+      <surname>Kreft</surname>\n+      <firstname>Klaus</firstname>\n+    </author>\n+\n+    <copyright>\n+      <year>2000</year>\n+      <holder>Addison Wesley Longman, Inc.</holder>\n+    </copyright>\n+\n+    <publisher>\n+      <publishername>\n+\tAddison Wesley Longman\n+      </publishername>\n+    </publisher>\n+\n+  </biblioentry> \n+\n+</bibliography>\n+\n+</sect1>\n\\ No newline at end of file"}, {"sha": "0c6d82ea762594c5601eb195447de8b1757a45b3", "filename": "libstdc++-v3/doc/xml/manual/localization.xml", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Flocalization.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Flocalization.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Flocalization.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,54 @@\n+<?xml version='1.0'?>\n+<!DOCTYPE part PUBLIC \"-//OASIS//DTD DocBook XML V4.5//EN\" \n+ \"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd\" \n+[ ]>\n+\n+<part id=\"manual.localization\" xreflabel=\"Localization\">\n+<?dbhtml filename=\"localization.html\"?>\n+ \n+<partinfo>\n+  <keywordset>\n+    <keyword>\n+      ISO C++\n+    </keyword>\n+    <keyword>\n+      library\n+    </keyword>\n+  </keywordset>\n+</partinfo>\n+\n+<title>Localization</title>\n+\n+<!-- Chapter 01 : Locale -->\n+<chapter id=\"manual.localization.locales\" xreflabel=\"Locales\">\n+  <title>Locales</title>\n+\n+  <!--  Section 01 : locale -->\n+  <xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" \n+\t      parse=\"xml\" href=\"locale.xml\">\n+  </xi:include>\n+</chapter>\n+\n+<!-- Chapter 02 : Facet -->\n+<chapter id=\"manual.localization.facet\" xreflabel=\"facet\">\n+  <title>Facets aka Categories</title>\n+\n+  <!--  Section 01 : ctype -->\n+  <xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" \n+\t      parse=\"xml\" href=\"ctype.xml\">\n+  </xi:include>\n+\n+  <!--  Section 02 : codecvt -->\n+  <xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" \n+\t      parse=\"xml\" href=\"codecvt.xml\">\n+  </xi:include>\n+\n+  <!--  Section 03 : messages  -->\n+  <xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" \n+\t      parse=\"xml\" href=\"messages.xml\">\n+  </xi:include>\n+</chapter>\n+\n+<!-- Chapter 03 : Interacting with C -->\n+\n+</part>"}, {"sha": "d32620fb3ad01c4209be2380f054e7539b8fba06", "filename": "libstdc++-v3/doc/xml/manual/messages.xml", "status": "added", "additions": 604, "deletions": 0, "changes": 604, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fmessages.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fmessages.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fmessages.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,604 @@\n+<sect1 id=\"manual.localization.facet.messages\" xreflabel=\"messages\">\n+<?dbhtml filename=\"messages.html\"?>\n+ \n+<sect1info>\n+  <keywordset>\n+    <keyword>\n+      ISO C++\n+    </keyword>\n+    <keyword>\n+      messages\n+    </keyword>\n+  </keywordset>\n+</sect1info>\n+\n+<title>messages</title>\n+\n+<para>\n+The std::messages facet implements message retrieval functionality\n+equivalent to Java's java.text.MessageFormat .using either GNU gettext\n+or IEEE 1003.1-200 functions.\n+</para>\n+\n+<sect2 id=\"facet.messages.req\" xreflabel=\"facet.messages.req\">\n+<title>Requirements</title>\n+\n+<para>\n+The std::messages facet is probably the most vaguely defined facet in\n+the standard library. It's assumed that this facility was built into\n+the standard library in order to convert string literals from one\n+locale to the other. For instance, converting the \"C\" locale's\n+<code>const char* c = \"please\"</code> to a German-localized <code>\"bitte\"</code>\n+during program execution.\n+</para>\n+\n+<blockquote>\n+<para>\n+22.2.7.1 - Template class messages [lib.locale.messages]\n+</para>\n+</blockquote>\n+\n+<para>\n+This class has three public member functions, which directly\n+correspond to three protected virtual member functions. \n+</para>\n+\n+<para>\n+The public member functions are:\n+</para>\n+\n+<para>\n+<code>catalog open(const string&amp;, const locale&amp;) const</code>\n+</para>\n+\n+<para>\n+<code>string_type get(catalog, int, int, const string_type&amp;) const</code>\n+</para>\n+\n+<para>\n+<code>void close(catalog) const</code>\n+</para>\n+\n+<para>\n+While the virtual functions are:\n+</para>\n+\n+<para>\n+<code>catalog do_open(const string&amp;, const locale&amp;) const</code>\n+</para>\n+<blockquote>\n+<para>\n+<emphasis>\n+-1- Returns: A value that may be passed to get() to retrieve a\n+message, from the message catalog identified by the string name\n+according to an implementation-defined mapping. The result can be used\n+until it is passed to close().  Returns a value less than 0 if no such\n+catalog can be opened.\n+</emphasis>\n+</para>\n+</blockquote>\n+\n+<para>\n+<code>string_type do_get(catalog, int, int, const string_type&amp;) const</code>\n+</para>\n+<blockquote>\n+<para>\n+<emphasis>\n+-3- Requires: A catalog cat obtained from open() and not yet closed. \n+-4- Returns: A message identified by arguments set, msgid, and dfault,\n+according to an implementation-defined mapping. If no such message can\n+be found, returns dfault.\n+</emphasis>\n+</para>\n+</blockquote>\n+\n+<para>\n+<code>void do_close(catalog) const</code>\n+</para>\n+<blockquote>\n+<para>\n+<emphasis>\n+-5- Requires: A catalog cat obtained from open() and not yet closed. \n+-6- Effects: Releases unspecified resources associated with cat. \n+-7- Notes: The limit on such resources, if any, is implementation-defined. \n+</emphasis>\n+</para>\n+</blockquote>\n+\n+\n+</sect2>\n+\n+<sect2 id=\"facet.messages.design\" xreflabel=\"facet.messages.design\">\n+<title>Design</title>\n+\n+<para>\n+A couple of notes on the standard. \n+</para>\n+\n+<para>\n+First, why is <code>messages_base::catalog</code> specified as a typedef\n+to int? This makes sense for implementations that use\n+<code>catopen</code>, but not for others. Fortunately, it's not heavily\n+used and so only a minor irritant. \n+</para>\n+\n+<para>\n+Second, by making the member functions <code>const</code>, it is\n+impossible to save state in them. Thus, storing away information used\n+in the 'open' member function for use in 'get' is impossible. This is\n+unfortunate.\n+</para>\n+\n+<para>\n+The 'open' member function in particular seems to be oddly\n+designed. The signature seems quite peculiar. Why specify a <code>const\n+string&amp; </code> argument, for instance, instead of just <code>const\n+char*</code>? Or, why specify a <code>const locale&amp;</code> argument that is\n+to be used in the 'get' member function? How, exactly, is this locale\n+argument useful? What was the intent? It might make sense if a locale\n+argument was associated with a given default message string in the\n+'open' member function, for instance. Quite murky and unclear, on\n+reflection.\n+</para>\n+\n+<para>\n+Lastly, it seems odd that messages, which explicitly require code\n+conversion, don't use the codecvt facet. Because the messages facet\n+has only one template parameter, it is assumed that ctype, and not\n+codecvt, is to be used to convert between character sets. \n+</para>\n+\n+<para>\n+It is implicitly assumed that the locale for the default message\n+string in 'get' is in the \"C\" locale. Thus, all source code is assumed\n+to be written in English, so translations are always from \"en_US\" to\n+other, explicitly named locales.\n+</para>\n+\n+</sect2>\n+\n+<sect2 id=\"facet.messages.impl\" xreflabel=\"facet.messages.impl\">\n+<title>Implementation</title>\n+\n+  <sect3 id=\"messages.impl.models\" xreflabel=\"messages.impl.models\">\n+  <title>Models</title>\n+  <para>\n+    This is a relatively simple class, on the face of it. The standard\n+    specifies very little in concrete terms, so generic\n+    implementations that are conforming yet do very little are the\n+    norm. Adding functionality that would be useful to programmers and\n+    comparable to Java's java.text.MessageFormat takes a bit of work,\n+    and is highly dependent on the capabilities of the underlying\n+    operating system.\n+  </para>\n+\n+  <para>\n+    Three different mechanisms have been provided, selectable via\n+    configure flags:\n+  </para>\n+\n+<itemizedlist>\n+   <listitem>\n+     <para>\n+       generic\n+     </para>\n+     <para>\n+       This model does very little, and is what is used by default.   \n+     </para>\n+   </listitem>\n+\n+   <listitem>\n+     <para> \n+       gnu\n+     </para>\n+     <para>\n+       The gnu model is complete and fully tested. It's based on the\n+       GNU gettext package, which is part of glibc. It uses the\n+       functions <code>textdomain, bindtextdomain, gettext</code> to\n+       implement full functionality. Creating message catalogs is a\n+       relatively straight-forward process and is lightly documented\n+       below, and fully documented in gettext's distributed\n+       documentation.\n+     </para>\n+   </listitem>\n+\n+   <listitem>\n+     <para> \n+       ieee_1003.1-200x\n+     </para>\n+     <para>\n+       This is a complete, though untested, implementation based on\n+       the IEEE standard. The functions <code>catopen, catgets,\n+       catclose</code> are used to retrieve locale-specific messages\n+       given the appropriate message catalogs that have been\n+       constructed for their use. Note, the script <code>\n+       po2msg.sed</code> that is part of the gettext distribution can\n+       convert gettext catalogs into catalogs that\n+       <code>catopen</code> can use.\n+   </para>\n+   </listitem>\n+</itemizedlist>\n+\n+<para>\n+A new, standards-conformant non-virtual member function signature was\n+added for 'open' so that a directory could be specified with a given\n+message catalog. This simplifies calling conventions for the gnu\n+model.\n+</para>\n+\n+  </sect3>\n+\n+  <sect3 id=\"messages.impl.gnu\" xreflabel=\"messages.impl.gnu\">\n+  <title>The GNU Model</title>\n+\n+  <para>\n+    The messages facet, because it is retrieving and converting\n+    between characters sets, depends on the ctype and perhaps the\n+    codecvt facet in a given locale. In addition, underlying \"C\"\n+    library locale support is necessary for more than just the\n+    <code>LC_MESSAGES</code> mask: <code>LC_CTYPE</code> is also\n+    necessary. To avoid any unpleasantness, all bits of the \"C\" mask\n+    (ie <code>LC_ALL</code>) are set before retrieving messages.\n+  </para>\n+\n+  <para>\n+    Making the message catalogs can be initially tricky, but become\n+    quite simple with practice. For complete info, see the gettext\n+    documentation. Here's an idea of what is required:\n+  </para>\n+\n+<itemizedlist>\n+   <listitem>\n+     <para>\n+       Make a source file with the required string literals that need\n+       to be translated. See <code>intl/string_literals.cc</code> for\n+       an example.\n+     </para>\n+   </listitem>\n+\n+   <listitem>\n+     <para> \n+       Make initial catalog (see \"4 Making the PO Template File\" from\n+       the gettext docs).</para>\n+   <para>\n+   <code> xgettext --c++ --debug string_literals.cc -o libstdc++.pot </code>\n+   </para>\n+   </listitem>\n+   \n+   <listitem>\n+     <para>Make language and country-specific locale catalogs.</para>\n+   <para>\n+   <code>cp libstdc++.pot fr_FR.po</code>\n+   </para>\n+   <para>\n+   <code>cp libstdc++.pot de_DE.po</code>\n+   </para>\n+   </listitem>\n+\n+   <listitem>\n+     <para>\n+       Edit localized catalogs in emacs so that strings are\n+       translated.\n+     </para>\n+   <para>\n+   <code>emacs fr_FR.po</code>\n+   </para>\n+   </listitem>\n+   \n+   <listitem>\n+     <para>Make the binary mo files.</para>\n+   <para>\n+   <code>msgfmt fr_FR.po -o fr_FR.mo</code>\n+   </para>\n+   <para>\n+   <code>msgfmt de_DE.po -o de_DE.mo</code>\n+   </para>\n+   </listitem>\n+\n+   <listitem>\n+     <para>Copy the binary files into the correct directory structure.</para>\n+   <para>\n+   <code>cp fr_FR.mo (dir)/fr_FR/LC_MESSAGES/libstdc++.mo</code>\n+   </para>\n+   <para>\n+   <code>cp de_DE.mo (dir)/de_DE/LC_MESSAGES/libstdc++.mo</code>\n+   </para>\n+   </listitem>\n+\n+   <listitem>\n+     <para>Use the new message catalogs.</para>\n+   <para>\n+   <code>locale loc_de(\"de_DE\");</code>\n+   </para>\n+   <para>\n+   <code>\n+   use_facet&lt;messages&lt;char&gt; &gt;(loc_de).open(\"libstdc++\", locale(), dir);\n+   </code>\n+   </para>\n+   </listitem>\n+</itemizedlist>\n+\n+  </sect3>\n+</sect2>\n+\n+<sect2 id=\"facet.messages.use\" xreflabel=\"facet.messages.use\">\n+<title>Use</title>\n+ <para>\n+   A simple example using the GNU model of message conversion.\n+ </para>\n+\n+<programlisting>\n+#include &lt;iostream&gt;\n+#include &lt;locale&gt;\n+using namespace std;\n+\n+void test01()\n+{\n+  typedef messages&lt;char&gt;::catalog catalog;\n+  const char* dir =\n+  \"/mnt/egcs/build/i686-pc-linux-gnu/libstdc++/po/share/locale\";  \n+  const locale loc_de(\"de_DE\");\n+  const messages&lt;char&gt;&amp; mssg_de = use_facet&lt;messages&lt;char&gt; &gt;(loc_de); \n+\n+  catalog cat_de = mssg_de.open(\"libstdc++\", loc_de, dir);\n+  string s01 = mssg_de.get(cat_de, 0, 0, \"please\");\n+  string s02 = mssg_de.get(cat_de, 0, 0, \"thank you\");\n+  cout &lt;&lt; \"please in german:\" &lt;&lt; s01 &lt;&lt; '\\n';\n+  cout &lt;&lt; \"thank you in german:\" &lt;&lt; s02 &lt;&lt; '\\n';\n+  mssg_de.close(cat_de);\n+}\n+</programlisting>\n+\n+</sect2>\n+\n+<sect2 id=\"facet.messages.future\" xreflabel=\"facet.messages.future\">\n+<title>Future</title>\n+\n+<itemizedlist>\n+<listitem>\n+  <para>\n+    Things that are sketchy, or remain unimplemented:\n+  </para>\n+   <itemizedlist>\n+      <listitem>\n+\t<para>\n+\t  _M_convert_from_char, _M_convert_to_char are in flux,\n+\t  depending on how the library ends up doing character set\n+\t  conversions. It might not be possible to do a real character\n+\t  set based conversion, due to the fact that the template\n+\t  parameter for messages is not enough to instantiate the\n+\t  codecvt facet (1 supplied, need at least 2 but would prefer\n+\t  3).\n+\t</para>\n+      </listitem>\n+\n+      <listitem>\n+\t<para> \n+\t  There are issues with gettext needing the global locale set\n+\t  to extract a message. This dependence on the global locale\n+\t  makes the current \"gnu\" model non MT-safe. Future versions\n+\t  of glibc, ie glibc 2.3.x will fix this, and the C++ library\n+\t  bits are already in place.\n+\t</para>\n+      </listitem>\n+   </itemizedlist>\n+</listitem>\n+\n+<listitem>\n+  <para>  \n+    Development versions of the GNU \"C\" library, glibc 2.3 will allow\n+    a more efficient, MT implementation of std::messages, and will\n+    allow the removal of the _M_name_messages data member. If this is\n+    done, it will change the library ABI. The C++ parts to support\n+    glibc 2.3 have already been coded, but are not in use: once this\n+    version of the \"C\" library is released, the marked parts of the\n+    messages implementation can be switched over to the new \"C\"\n+    library functionality.\n+  </para>\n+</listitem>\n+<listitem>\n+  <para>\n+    At some point in the near future, std::numpunct will probably use\n+    std::messages facilities to implement truename/falename\n+    correctly. This is currently not done, but entries in\n+    libstdc++.pot have already been made for \"true\" and \"false\" string\n+    literals, so all that remains is the std::numpunct coding and the\n+    configure/make hassles to make the installed library search its\n+    own catalog. Currently the libstdc++.mo catalog is only searched\n+    for the testsuite cases involving messages members.\n+  </para>\n+</listitem>\n+\n+<listitem>\n+  <para> The following member functions:</para>\n+\n+   <para>\n+   <code>\n+        catalog \n+        open(const basic_string&lt;char&gt;&amp; __s, const locale&amp; __loc) const\n+   </code>\n+   </para>\n+\n+   <para>\n+   <code>\n+   catalog \n+   open(const basic_string&lt;char&gt;&amp;, const locale&amp;, const char*) const;\n+   </code>\n+   </para>\n+\n+   <para>\n+   Don't actually return a \"value less than 0 if no such catalog\n+   can be opened\" as required by the standard in the \"gnu\"\n+   model. As of this writing, it is unknown how to query to see\n+   if a specified message catalog exists using the gettext\n+   package.\n+   </para>\n+</listitem>\n+</itemizedlist>\n+\n+</sect2>\n+\n+<bibliography id=\"facet.messages.biblio\" xreflabel=\"facet.messages.biblio\">\n+<title>Bibliography</title>\n+\n+  <biblioentry>\n+    <title>\n+      The GNU C Library\n+    </title>\n+\n+    <author>\n+      <surname>McGrath</surname>\n+      <firstname>Roland</firstname>\n+    </author>\n+    <author>\n+      <surname>Drepper</surname>\n+      <firstname>Ulrich</firstname>\n+    </author>\n+\n+    <copyright>\n+      <year>2007</year>\n+      <holder>FSF</holder>\n+    </copyright>\n+    <pagenums>Chapters 6 Character Set Handling, and 7 Locales and Internationalization\n+    </pagenums>\n+\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      Correspondence\n+    </title>\n+\n+    <author>\n+      <surname>Drepper</surname>\n+      <firstname>Ulrich</firstname>\n+    </author>\n+\n+    <copyright>\n+      <year>2002</year>\n+      <holder></holder>\n+    </copyright>\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      ISO/IEC 14882:1998 Programming languages - C++\n+    </title>\n+\n+    <copyright>\n+      <year>1998</year>\n+      <holder>ISO</holder>\n+    </copyright>\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      ISO/IEC 9899:1999 Programming languages - C\n+    </title>\n+\n+    <copyright>\n+      <year>1999</year>\n+      <holder>ISO</holder>\n+    </copyright>\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      System Interface Definitions, Issue 6 (IEEE Std. 1003.1-200x)\n+    </title>\n+\n+    <copyright>\n+      <year>1999</year>\n+      <holder>\n+      The Open Group/The Institute of Electrical and Electronics Engineers, Inc.</holder>\n+    </copyright>\n+\n+    <biblioid>\n+      <ulink url=\"http://www.opennc.org/austin/docreg.html\">\n+      </ulink>\n+    </biblioid>\n+\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      The C++ Programming Language, Special Edition\n+    </title>\n+    \n+    <author>\n+      <surname>Stroustrup</surname>\n+      <firstname>Bjarne</firstname>\n+    </author>\n+\n+    <copyright>\n+      <year>2000</year>\n+      <holder>Addison Wesley, Inc.</holder>\n+    </copyright>\n+    <pagenums>Appendix D</pagenums>\n+\n+    <publisher>\n+      <publishername>\n+\tAddison Wesley\n+      </publishername>\n+    </publisher>\n+\n+  </biblioentry> \n+\n+\n+  <biblioentry>\n+    <title>\n+      Standard C++ IOStreams and Locales\n+    </title>\n+    <subtitle>\n+      Advanced Programmer's Guide and Reference\n+    </subtitle>\n+    \n+    <author>\n+      <surname>Langer</surname>\n+      <firstname>Angelika</firstname>\n+    </author>\n+\n+    <author>\n+      <surname>Kreft</surname>\n+      <firstname>Klaus</firstname>\n+    </author>\n+\n+    <copyright>\n+      <year>2000</year>\n+      <holder>Addison Wesley Longman, Inc.</holder>\n+    </copyright>\n+\n+    <publisher>\n+      <publishername>\n+\tAddison Wesley Longman\n+      </publishername>\n+    </publisher>\n+\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+      Java 2 Platform, Standard Edition, v 1.3.1 API Specification\n+    </title>\n+    <pagenums>java.util.Properties, java.text.MessageFormat,\n+java.util.Locale, java.util.ResourceBundle</pagenums>\n+    <biblioid>\n+      <ulink url=\"http://java.sun.com/j2se/1.3/docs/api\">\n+      </ulink>\n+    </biblioid>\n+  </biblioentry> \n+\n+  <biblioentry>\n+    <title>\n+       GNU gettext tools, version 0.10.38, Native Language Support\n+Library and Tools.\n+    </title>\n+    <biblioid>\n+      <ulink url=\"http://sources.redhat.com/gettext\">\n+      </ulink>\n+    </biblioid>\n+  </biblioentry> \n+\n+</bibliography>\n+\n+</sect1>\n\\ No newline at end of file"}, {"sha": "48f5c2fe502ca3750bfe0f4dfe67b9135b27be5b", "filename": "libstdc++-v3/doc/xml/manual/mt_allocator.xml", "status": "added", "additions": 554, "deletions": 0, "changes": 554, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fmt_allocator.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fmt_allocator.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fmt_allocator.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "patch": "@@ -0,0 +1,554 @@\n+<sect1 id=\"manual.ext.allocator.mt\" xreflabel=\"mt allocator\">\n+<?dbhtml filename=\"mt_allocator.html\"?>\n+ \n+<sect1info>\n+  <keywordset>\n+    <keyword>\n+      ISO C++\n+    </keyword>\n+    <keyword>\n+      allocator\n+    </keyword>\n+  </keywordset>\n+</sect1info>\n+\n+<title>mt_allocator</title>\n+\n+<para>\n+</para>\n+\n+<sect2 id=\"allocator.mt.intro\" xreflabel=\"allocator.mt.intro\">\n+<title>Intro</title>\n+\n+<para> \n+  The mt allocator [hereinafter referred to simply as \"the allocator\"]\n+  is a fixed size (power of two) allocator that was initially\n+  developed specifically to suit the needs of multi threaded\n+  applications [hereinafter referred to as an MT application]. Over\n+  time the allocator has evolved and been improved in many ways, in\n+  particular it now also does a good job in single threaded\n+  applications [hereinafter referred to as a ST application]. (Note:\n+  In this document, when referring to single threaded applications\n+  this also includes applications that are compiled with gcc without\n+  thread support enabled. This is accomplished using ifdef's on\n+  __GTHREADS). This allocator is tunable, very flexible, and capable\n+  of high-performance.\n+</para>\n+\n+<para>\n+  The aim of this document is to describe - from an application point of\n+  view - the \"inner workings\" of the allocator.\n+</para>\n+\n+</sect2>\n+\n+\n+<sect2 id=\"allocator.mt.design_issues\" xreflabel=\"allocator.mt.design_issues\">\n+<title>Design Issues</title>\n+\n+<sect3 id=\"allocator.mt.overview\" xreflabel=\"allocator.mt.overview\">\n+<title>Overview</title>\n+\n+\n+<para> There are three general components to the allocator: a datum\n+describing the characteristics of the memory pool, a policy class\n+containing this pool that links instantiation types to common or\n+individual pools, and a class inheriting from the policy class that is\n+the actual allocator.\n+</para>\n+\n+<para>The datum describing pools characteristics is \n+</para>\n+<programlisting>\n+  template&lt;bool _Thread&gt;\n+    class __pool\n+</programlisting>\n+<para> This class is parametrized on thread support, and is explicitly\n+specialized for both multiple threads (with <code>bool==true</code>)\n+and single threads (via <code>bool==false</code>.) It is possible to\n+use a custom pool datum instead of the default class that is provided.\n+</para>\n+\n+<para> There are two distinct policy classes, each of which can be used\n+with either type of underlying pool datum.\n+</para>\n+\n+<programlisting>\n+  template&lt;bool _Thread&gt;\n+    struct __common_pool_policy\n+\n+  template&lt;typename _Tp, bool _Thread&gt;\n+    struct __per_type_pool_policy\n+</programlisting>\n+\n+<para> The first policy, <code>__common_pool_policy</code>, implements a\n+common pool. This means that allocators that are instantiated with\n+different types, say <code>char</code> and <code>long</code> will both\n+use the same pool. This is the default policy.\n+</para>\n+\n+<para> The second policy, <code>__per_type_pool_policy</code>, implements\n+a separate pool for each instantiating type. Thus, <code>char</code>\n+and <code>long</code> will use separate pools. This allows per-type\n+tuning, for instance.\n+</para>\n+\n+<para> Putting this all together, the actual allocator class is\n+</para>\n+<programlisting>\n+  template&lt;typename _Tp, typename _Poolp = __default_policy&gt;\n+    class __mt_alloc : public __mt_alloc_base&lt;_Tp&gt;,  _Poolp\n+</programlisting>\n+<para> This class has the interface required for standard library allocator\n+classes, namely member functions <code>allocate</code> and\n+<code>deallocate</code>, plus others.\n+</para>\n+\n+</sect3>\n+</sect2>\n+\n+<sect2 id=\"allocator.mt.impl\" xreflabel=\"allocator.mt.impl\">\n+<title>Implementation</title>\n+\n+\n+<sect3 id=\"allocator.mt.tune\" xreflabel=\"allocator.mt.tune\">\n+<title>Tunable Parameters</title>\n+\n+<para>Certain allocation parameters can be modified, or tuned. There\n+exists a nested <code>struct __pool_base::_Tune</code> that contains all\n+these parameters, which include settings for\n+</para>\n+   <itemizedlist>\n+     <listitem><para>Alignment</para></listitem>\n+     <listitem><para>Maximum bytes before calling <code>::operator new</code> directly</para></listitem>\n+     <listitem><para>Minimum bytes</para></listitem>\n+     <listitem><para>Size of underlying global allocations</para></listitem>\n+     <listitem><para>Maximum number of supported threads</para></listitem>\n+     <listitem><para>Migration of deallocations to the global free list</para></listitem>\n+     <listitem><para>Shunt for global <code>new</code> and <code>delete</code></para></listitem>\n+   </itemizedlist>\n+<para>Adjusting parameters for a given instance of an allocator can only\n+happen before any allocations take place, when the allocator itself is\n+initialized. For instance:\n+</para>\n+<programlisting>\n+#include &lt;ext/mt_allocator.h&gt;\n+\n+struct pod\n+{\n+  int i;\n+  int j;\n+};\n+\n+int main()\n+{\n+  typedef pod value_type;\n+  typedef __gnu_cxx::__mt_alloc&lt;value_type&gt; allocator_type;\n+  typedef __gnu_cxx::__pool_base::_Tune tune_type;\n+\n+  tune_type t_default;\n+  tune_type t_opt(16, 5120, 32, 5120, 20, 10, false);\n+  tune_type t_single(16, 5120, 32, 5120, 1, 10, false);\n+\n+  tune_type t;\n+  t = allocator_type::_M_get_options();  \n+  allocator_type::_M_set_options(t_opt);\n+  t = allocator_type::_M_get_options();  \n+\n+  allocator_type a;\n+  allocator_type::pointer p1 = a.allocate(128);\n+  allocator_type::pointer p2 = a.allocate(5128);\n+\n+  a.deallocate(p1, 128);\n+  a.deallocate(p2, 5128);\n+\n+  return 0;\n+}\n+</programlisting>\n+\n+</sect3>\n+\n+<sect3 id=\"allocator.mt.init\" xreflabel=\"allocator.mt.init\">\n+<title>Initialization</title>\n+\n+<para>\n+The static variables (pointers to freelists, tuning parameters etc)\n+are initialized as above, or are set to the global defaults.\n+</para>\n+\n+<para>\n+The very first allocate() call will always call the\n+_S_initialize_once() function.  In order to make sure that this\n+function is called exactly once we make use of a __gthread_once call\n+in MT applications and check a static bool (_S_init) in ST\n+applications.\n+</para>\n+\n+<para>\n+The _S_initialize() function:\n+- If the GLIBCXX_FORCE_NEW environment variable is set, it sets the bool\n+  _S_force_new to true and then returns. This will cause subsequent calls to\n+  allocate() to return memory directly from a new() call, and deallocate will\n+  only do a delete() call.\n+</para>\n+\n+<para>\n+- If the GLIBCXX_FORCE_NEW environment variable is not set, both ST and MT \n+  applications will:\n+  - Calculate the number of bins needed. A bin is a specific power of two size\n+    of bytes. I.e., by default the allocator will deal with requests of up to \n+    128 bytes (or whatever the value of _S_max_bytes is when _S_init() is \n+    called). This means that there will be bins of the following sizes \n+    (in bytes): 1, 2, 4, 8, 16, 32, 64, 128. \n+\n+  - Create the _S_binmap array. All requests are rounded up to the next \n+    \"large enough\" bin. I.e., a request for 29 bytes will cause a block from \n+    the \"32 byte bin\" to be returned to the application. The purpose of \n+    _S_binmap is to speed up the process of finding out which bin to use. \n+    I.e., the value of _S_binmap[ 29 ] is initialized to 5 (bin 5 = 32 bytes).\n+</para>\n+<para>\n+  - Create the _S_bin array. This array consists of bin_records. There will be\n+    as many bin_records in this array as the number of bins that we calculated\n+    earlier. I.e., if _S_max_bytes = 128 there will be 8 entries.\n+    Each bin_record is then initialized:\n+    - bin_record-&gt;first = An array of pointers to block_records. There will be\n+      as many block_records pointers as there are maximum number of threads \n+      (in a ST application there is only 1 thread, in a MT application there \n+      are _S_max_threads).\n+      This holds the pointer to the first free block for each thread in this\n+      bin. I.e., if we would like to know where the first free block of size 32\n+      for thread number 3 is we would look this up by: _S_bin[ 5 ].first[ 3 ]\n+\n+    The above created block_record pointers members are now initialized to \n+    their initial values. I.e. _S_bin[ n ].first[ n ] = NULL;\n+</para>\n+\n+<para>\n+- Additionally a MT application will:\n+  - Create a list of free thread id's. The pointer to the first entry\n+    is stored in _S_thread_freelist_first. The reason for this approach is \n+    that the __gthread_self() call will not return a value that corresponds to \n+    the maximum number of threads allowed but rather a process id number or\n+    something else. So what we do is that we create a list of thread_records.\n+    This list is _S_max_threads long and each entry holds a size_t thread_id\n+    which is initialized to 1, 2, 3, 4, 5 and so on up to _S_max_threads.\n+    Each time a thread calls allocate() or deallocate() we call \n+    _S_get_thread_id() which looks at the value of _S_thread_key which is a\n+    thread local storage pointer. If this is NULL we know that this is a newly\n+    created thread and we pop the first entry from this list and saves the\n+    pointer to this record in the _S_thread_key variable. The next time \n+    we will get the pointer to the thread_record back and we use the \n+    thread_record-&gt;thread_id as identification. I.e., the first thread that \n+    calls allocate will get the first record in this list and thus be thread\n+    number 1 and will then find the pointer to its first free 32 byte block\n+    in _S_bin[ 5 ].first[ 1 ]\n+    When we create the _S_thread_key we also define a destructor \n+    (_S_thread_key_destr) which means that when the thread dies, this\n+    thread_record is returned to the front of this list and the thread id\n+    can then be reused if a new thread is created.\n+    This list is protected by a mutex (_S_thread_freelist_mutex) which is only\n+    locked when records are removed or added to the list.\n+</para>\n+<para>\n+  - Initialize the free and used counters of each bin_record:\n+    - bin_record-&gt;free = An array of size_t. This keeps track of the number\n+      of blocks on a specific thread's freelist in each bin. I.e., if a thread\n+      has 12 32-byte blocks on it's freelists and allocates one of these, this\n+      counter would be decreased to 11.\n+\n+    - bin_record-&gt;used = An array of size_t. This keeps track of the number\n+      of blocks currently in use of this size by this thread. I.e., if a thread\n+      has made 678 requests (and no deallocations...) of 32-byte blocks this\n+      counter will read 678.\n+\n+    The above created arrays are now initialized with their initial values. \n+    I.e. _S_bin[ n ].free[ n ] = 0;\n+</para>\n+<para>\n+  - Initialize the mutex of each bin_record: The bin_record-&gt;mutex\n+    is used to protect the global freelist. This concept of a global\n+    freelist is explained in more detail in the section \"A multi\n+    threaded example\", but basically this mutex is locked whenever a\n+    block of memory is retrieved or returned to the global freelist\n+    for this specific bin. This only occurs when a number of blocks\n+    are grabbed from the global list to a thread specific list or when\n+    a thread decides to return some blocks to the global freelist.\n+</para>\n+\n+</sect3>\n+\n+<sect3 id=\"allocator.mt.deallocation\" xreflabel=\"allocator.mt.deallocation\">\n+<title>Deallocation Notes</title>\n+\n+<para> Notes about deallocation. This allocator does not explicitly\n+release memory. Because of this, memory debugging programs like\n+valgrind or purify may notice leaks: sorry about this\n+inconvenience. Operating systems will reclaim allocated memory at\n+program termination anyway. If sidestepping this kind of noise is\n+desired, there are three options: use an allocator, like\n+<code>new_allocator</code> that releases memory while debugging, use\n+GLIBCXX_FORCE_NEW to bypass the allocator's internal pools, or use a\n+custom pool datum that releases resources on destruction.\n+</para>\n+\n+<para>\n+  On systems with the function <code>__cxa_atexit</code>, the\n+allocator can be forced to free all memory allocated before program\n+termination with the member function\n+<code>__pool_type::_M_destroy</code>. However, because this member\n+function relies on the precise and exactly-conforming ordering of\n+static destructors, including those of a static local\n+<code>__pool</code> object, it should not be used, ever, on systems\n+that don't have the necessary underlying support. In addition, in\n+practice, forcing deallocation can be tricky, as it requires the\n+<code>__pool</code> object to be fully-constructed before the object\n+that uses it is fully constructed. For most (but not all) STL\n+containers, this works, as an instance of the allocator is constructed\n+as part of a container's constructor. However, this assumption is\n+implementation-specific, and subject to change. For an example of a\n+pool that frees memory, see the following\n+    <ulink url=\"http://gcc.gnu.org/viewcvs/trunk/libstdc%2B%2B-v3/testsuite/ext/mt_allocator/deallocate_local-6.cc?view=markup\">\n+    example.</ulink>\n+</para>\n+\n+</sect3>\n+\n+</sect2>\n+\n+<sect2 id=\"allocator.mt.example_single\" xreflabel=\"allocator.mt.example_single\">\n+<title>Single Thread Example</title>\n+\n+<para>\n+Let's start by describing how the data on a freelist is laid out in memory.\n+This is the first two blocks in freelist for thread id 3 in bin 3 (8 bytes):\n+</para>\n+<programlisting>\n++----------------+\n+| next* ---------|--+  (_S_bin[ 3 ].first[ 3 ] points here)\n+|                |  |\n+|                |  |\n+|                |  |\n++----------------+  |\n+| thread_id = 3  |  |\n+|                |  |\n+|                |  |\n+|                |  |\n++----------------+  |\n+| DATA           |  |  (A pointer to here is what is returned to the\n+|                |  |   the application when needed)\n+|                |  |\n+|                |  |\n+|                |  |\n+|                |  |\n+|                |  |\n+|                |  |\n++----------------+  |\n++----------------+  |\n+| next*          |&lt;-+  (If next == NULL it's the last one on the list)\n+|                |\n+|                |\n+|                |\n++----------------+\n+| thread_id = 3  |\n+|                |\n+|                |\n+|                |\n++----------------+\n+| DATA           |\n+|                |\n+|                |\n+|                |\n+|                |\n+|                |\n+|                |\n+|                |\n++----------------+\n+</programlisting>\n+\n+<para>\n+With this in mind we simplify things a bit for a while and say that there is\n+only one thread (a ST application). In this case all operations are made to \n+what is referred to as the global pool - thread id 0 (No thread may be\n+assigned this id since they span from 1 to _S_max_threads in a MT application).\n+</para>\n+<para>\n+When the application requests memory (calling allocate()) we first look at the\n+requested size and if this is &gt; _S_max_bytes we call new() directly and return.\n+</para>\n+<para>\n+If the requested size is within limits we start by finding out from which \n+bin we should serve this request by looking in _S_binmap.\n+</para>\n+<para>\n+A quick look at _S_bin[ bin ].first[ 0 ] tells us if there are any blocks of\n+this size on the freelist (0). If this is not NULL - fine, just remove the\n+block that _S_bin[ bin ].first[ 0 ] points to from the list, \n+update _S_bin[ bin ].first[ 0 ] and return a pointer to that blocks data.\n+</para>\n+<para>\n+If the freelist is empty (the pointer is NULL) we must get memory from the \n+system and build us a freelist within this memory. All requests for new memory\n+is made in chunks of _S_chunk_size. Knowing the size of a block_record and \n+the bytes that this bin stores we then calculate how many blocks we can create \n+within this chunk, build the list, remove the first block, update the pointer\n+(_S_bin[ bin ].first[ 0 ]) and return a pointer to that blocks data. \n+</para>\n+\n+<para>\n+Deallocation is equally simple; the pointer is casted back to a block_record\n+pointer, lookup which bin to use based on the size, add the block to the front \n+of the global freelist and update the pointer as needed \n+(_S_bin[ bin ].first[ 0 ]).\n+</para>\n+\n+<para>\n+The decision to add deallocated blocks to the front of the freelist was made\n+after a set of performance measurements that showed that this is roughly 10%\n+faster than maintaining a set of \"last pointers\" as well.\n+</para>\n+\n+</sect2>\n+\n+<sect2 id=\"allocator.mt.example_multi\" xreflabel=\"allocator.mt.example_multi\">\n+<title>Multiple Thread Example</title>\n+\n+<para>\n+In the ST example we never used the thread_id variable present in each block. \n+Let's start by explaining the purpose of this in a MT application. \n+</para>\n+\n+<para>\n+The concept of \"ownership\" was introduced since many MT applications\n+allocate and deallocate memory to shared containers from different\n+threads (such as a cache shared amongst all threads). This introduces\n+a problem if the allocator only returns memory to the current threads\n+freelist (I.e., there might be one thread doing all the allocation and\n+thus obtaining ever more memory from the system and another thread\n+that is getting a longer and longer freelist - this will in the end\n+consume all available memory).\n+</para>\n+\n+<para>\n+Each time a block is moved from the global list (where ownership is\n+irrelevant), to a threads freelist (or when a new freelist is built\n+from a chunk directly onto a threads freelist or when a deallocation\n+occurs on a block which was not allocated by the same thread id as the\n+one doing the deallocation) the thread id is set to the current one.\n+</para>\n+\n+<para>\n+What's the use? Well, when a deallocation occurs we can now look at\n+the thread id and find out if it was allocated by another thread id\n+and decrease the used counter of that thread instead, thus keeping the\n+free and used counters correct. And keeping the free and used counters\n+corrects is very important since the relationship between these two\n+variables decides if memory should be returned to the global pool or\n+not when a deallocation occurs.\n+</para>\n+\n+<para>\n+When the application requests memory (calling allocate()) we first\n+look at the requested size and if this is &gt;_S_max_bytes we call new()\n+directly and return.\n+</para>\n+\n+<para>\n+If the requested size is within limits we start by finding out from which \n+bin we should serve this request by looking in _S_binmap.\n+</para>\n+\n+<para>\n+A call to _S_get_thread_id() returns the thread id for the calling thread \n+(and if no value has been set in _S_thread_key, a new id is assigned and\n+returned).\n+</para>\n+\n+<para>\n+A quick look at _S_bin[ bin ].first[ thread_id ] tells us if there are\n+any blocks of this size on the current threads freelist. If this is\n+not NULL - fine, just remove the block that _S_bin[ bin ].first[\n+thread_id ] points to from the list, update _S_bin[ bin ].first[\n+thread_id ], update the free and used counters and return a pointer to\n+that blocks data.\n+</para>\n+\n+<para>\n+If the freelist is empty (the pointer is NULL) we start by looking at\n+the global freelist (0). If there are blocks available on the global\n+freelist we lock this bins mutex and move up to block_count (the\n+number of blocks of this bins size that will fit into a _S_chunk_size)\n+or until end of list - whatever comes first - to the current threads\n+freelist and at the same time change the thread_id ownership and\n+update the counters and pointers. When the bins mutex has been\n+unlocked, we remove the block that _S_bin[ bin ].first[ thread_id ]\n+points to from the list, update _S_bin[ bin ].first[ thread_id ],\n+update the free and used counters, and return a pointer to that blocks\n+data.\n+</para>\n+\n+<para>\n+The reason that the number of blocks moved to the current threads\n+freelist is limited to block_count is to minimize the chance that a\n+subsequent deallocate() call will return the excess blocks to the\n+global freelist (based on the _S_freelist_headroom calculation, see\n+below).\n+</para>\n+\n+<para>\n+However if there isn't any memory on the global pool we need to get\n+memory from the system - this is done in exactly the same way as in a\n+single threaded application with one major difference; the list built\n+in the newly allocated memory (of _S_chunk_size size) is added to the\n+current threads freelist instead of to the global.\n+</para>\n+\n+<para>\n+The basic process of a deallocation call is simple: always add the\n+block to the front of the current threads freelist and update the\n+counters and pointers (as described earlier with the specific check of\n+ownership that causes the used counter of the thread that originally\n+allocated the block to be decreased instead of the current threads\n+counter).\n+</para>\n+\n+<para>\n+And here comes the free and used counters to service. Each time a\n+deallocation() call is made, the length of the current threads\n+freelist is compared to the amount memory in use by this thread.\n+</para>\n+\n+<para>\n+Let's go back to the example of an application that has one thread\n+that does all the allocations and one that deallocates. Both these\n+threads use say 516 32-byte blocks that was allocated during thread\n+creation for example.  Their used counters will both say 516 at this\n+point. The allocation thread now grabs 1000 32-byte blocks and puts\n+them in a shared container. The used counter for this thread is now\n+1516.\n+</para>\n+\n+<para>\n+The deallocation thread now deallocates 500 of these blocks. For each\n+deallocation made the used counter of the allocating thread is\n+decreased and the freelist of the deallocation thread gets longer and\n+longer. But the calculation made in deallocate() will limit the length\n+of the freelist in the deallocation thread to _S_freelist_headroom %\n+of it's used counter.  In this case, when the freelist (given that the\n+_S_freelist_headroom is at it's default value of 10%) exceeds 52\n+(516/10) blocks will be returned to the global pool where the\n+allocating thread may pick them up and reuse them.\n+</para>\n+\n+<para>\n+In order to reduce lock contention (since this requires this bins\n+mutex to be locked) this operation is also made in chunks of blocks\n+(just like when chunks of blocks are moved from the global freelist to\n+a threads freelist mentioned above). The \"formula\" used can probably\n+be improved to further reduce the risk of blocks being \"bounced back\n+and forth\" between freelists.\n+</para>\n+\n+</sect2>\n+\n+</sect1>\n\\ No newline at end of file"}, {"sha": "835cd1e745403b8e7aba1dafbde2a492ffc52a68", "filename": "libstdc++-v3/doc/xml/manual/numerics.xml", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fnumerics.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fnumerics.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fnumerics.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c"}, {"sha": "4236f63c8b17e5ce091abd40ca1c6f043d80effc", "filename": "libstdc++-v3/doc/xml/manual/parallel_mode.xml", "status": "added", "additions": 674, "deletions": 0, "changes": 674, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fparallel_mode.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fparallel_mode.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fparallel_mode.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c"}, {"sha": "cd517f1250a80ec00ba03516f2aa7e886a751cbf", "filename": "libstdc++-v3/doc/xml/manual/shared_ptr.xml", "status": "added", "additions": 580, "deletions": 0, "changes": 580, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fshared_ptr.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fshared_ptr.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fshared_ptr.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c"}, {"sha": "4c9c62842a188b1d594f816de418f39371c265f5", "filename": "libstdc++-v3/doc/xml/manual/spine.xml", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fspine.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fspine.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fspine.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c"}, {"sha": "fc22af00d3b804944e5ab877242f8deabd34608d", "filename": "libstdc++-v3/doc/xml/manual/status_cxx1998.xml", "status": "added", "additions": 6153, "deletions": 0, "changes": 6153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx1998.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx1998.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx1998.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c"}, {"sha": "1c6460a5544cd66fed7684b83453b10be404876c", "filename": "libstdc++-v3/doc/xml/manual/status_cxx200x.xml", "status": "added", "additions": 2241, "deletions": 0, "changes": 2241, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx200x.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx200x.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx200x.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c"}, {"sha": "092a78af4581344c7b2350aac0ecd1ce01050109", "filename": "libstdc++-v3/doc/xml/manual/status_cxxtr1.xml", "status": "added", "additions": 2273, "deletions": 0, "changes": 2273, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxxtr1.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxxtr1.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxxtr1.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c"}, {"sha": "d8f2035cb6d6ce96c985ffe63fa8f01b80977d6b", "filename": "libstdc++-v3/doc/xml/manual/strings.xml", "status": "added", "additions": 495, "deletions": 0, "changes": 495, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstrings.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstrings.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstrings.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c"}, {"sha": "551695900280e289f8b48a031499f03f7456de21", "filename": "libstdc++-v3/doc/xml/manual/support.xml", "status": "added", "additions": 448, "deletions": 0, "changes": 448, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fsupport.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fsupport.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fsupport.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c"}, {"sha": "076138d10da39e9c0ddcb50145464ee81ed73ae9", "filename": "libstdc++-v3/doc/xml/manual/test.xml", "status": "added", "additions": 823, "deletions": 0, "changes": 823, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Ftest.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Ftest.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Ftest.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c"}, {"sha": "2782596201f61e692bb68a4f3bbb59f629597d7f", "filename": "libstdc++-v3/doc/xml/manual/using.xml", "status": "added", "additions": 1024, "deletions": 0, "changes": 1024, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c"}, {"sha": "77cdb6427eb20ab2491257d1e46d3fe668682149", "filename": "libstdc++-v3/doc/xml/manual/utilities.xml", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Futilities.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Futilities.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Futilities.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c"}, {"sha": "df30ad93dc4e4302613610397893f91b563af22f", "filename": "libstdc++-v3/doc/xml/spine.xml", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fspine.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fspine.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fspine.xml?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c"}, {"sha": "cf24e6a9c496b5268f2f6440d9cd87975a81de26", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 49, "deletions": 67, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c"}, {"sha": "7c5c8f13c624bd9bc6bc8f867e0d0e6507becda0", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 57, "deletions": 73, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c"}, {"sha": "586ee381576b97edaccf3cec2d35bf0f2fac2cb3", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 59, "deletions": 75, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c"}, {"sha": "30e4472ac901cd31216c7fa60b3d5101056746b6", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 49, "deletions": 66, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c"}, {"sha": "48e40ba86150e8babeafd493b9b88a8be2719c0e", "filename": "libstdc++-v3/scripts/run_doxygen", "status": "renamed", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fscripts%2Frun_doxygen", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fscripts%2Frun_doxygen", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fscripts%2Frun_doxygen?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c", "previous_filename": "libstdc++-v3/doc/doxygen/run_doxygen"}, {"sha": "3c4f74054ac777ff5f745ce47e3d0bb320dbcb43", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 61, "deletions": 76, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c"}, {"sha": "7c34bc04f188e9959e3abad420f53fa04e242a78", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 54, "deletions": 71, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a165db0c0682eeb722a8e4750acdde5b921db4c/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=8a165db0c0682eeb722a8e4750acdde5b921db4c"}]}