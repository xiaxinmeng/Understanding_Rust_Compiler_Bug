{"sha": "1ab2270036dc0f2a13442ce682267bc7433ffb34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFiMjI3MDAzNmRjMGYyYTEzNDQyY2U2ODIyNjdiYzc0MzNmZmIzNA==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-07-26T09:23:21Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-07-26T09:23:21Z"}, "message": "AArch64: correct dot-product RTL patterns for aarch64.\n\nThe previous fix for this problem was wrong due to a subtle difference between\nwhere NEON expects the RMW values and where intrinsics expects them.\n\nThe insn pattern is modeled after the intrinsics and so needs an expand for\nthe vectorizer optab to switch the RTL.\n\nHowever operand[3] is not expected to be written to so the current pattern is\nbogus.\n\nInstead I rewrite the RTL to be in canonical ordering and merge them.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-simd-builtins.def (sdot, udot): Rename to..\n\t(sdot_prod, udot_prod): ... This.\n\t* config/aarch64/aarch64-simd.md (aarch64_<sur>dot<vsi2qi>): Merged\n\tinto...\n\t(<sur>dot_prod<vsi2qi>): ... this.\n\t(aarch64_<sur>dot_lane<vsi2qi>, aarch64_<sur>dot_laneq<vsi2qi>):\n\tChange operands order.\n\t(<sur>sadv16qi): Use new operands order.\n\t* config/aarch64/arm_neon.h (vdot_u32, vdotq_u32, vdot_s32,\n\tvdotq_s32): Use new RTL ordering.", "tree": {"sha": "4ad12bccc165ec641db1d0c97d99193450fec9ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ad12bccc165ec641db1d0c97d99193450fec9ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ab2270036dc0f2a13442ce682267bc7433ffb34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab2270036dc0f2a13442ce682267bc7433ffb34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ab2270036dc0f2a13442ce682267bc7433ffb34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab2270036dc0f2a13442ce682267bc7433ffb34/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2050ac1a547eebe7de4af98b57429a934e75fff4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2050ac1a547eebe7de4af98b57429a934e75fff4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2050ac1a547eebe7de4af98b57429a934e75fff4"}], "stats": {"total": 75, "additions": 31, "deletions": 44}, "files": [{"sha": "402453aa9bba5949da43c984c4603196b1efd092", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab2270036dc0f2a13442ce682267bc7433ffb34/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab2270036dc0f2a13442ce682267bc7433ffb34/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=1ab2270036dc0f2a13442ce682267bc7433ffb34", "patch": "@@ -375,8 +375,8 @@\n   BUILTIN_VSDQ_I_DI (BINOP_UUS, urshl, 0, NONE)\n \n   /* Implemented by <sur><dotprod>_prod<dot_mode>.  */\n-  BUILTIN_VB (TERNOP, sdot, 0, NONE)\n-  BUILTIN_VB (TERNOPU, udot, 0, NONE)\n+  BUILTIN_VB (TERNOP, sdot_prod, 10, NONE)\n+  BUILTIN_VB (TERNOPU, udot_prod, 10, NONE)\n   BUILTIN_VB (TERNOP_SUSS, usdot_prod, 10, NONE)\n   /* Implemented by aarch64_<sur><dotprod>_lane{q}<dot_mode>.  */\n   BUILTIN_VB (QUADOP_LANE, sdot_lane, 0, NONE)"}, {"sha": "13c86984df147f2033b81a2a5278252f5ac52779", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 25, "deletions": 38, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab2270036dc0f2a13442ce682267bc7433ffb34/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab2270036dc0f2a13442ce682267bc7433ffb34/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=1ab2270036dc0f2a13442ce682267bc7433ffb34", "patch": "@@ -587,19 +587,8 @@\n   DONE;\n })\n \n-;; These instructions map to the __builtins for the Dot Product operations.\n-(define_insn \"aarch64_<sur>dot<vsi2qi>\"\n-  [(set (match_operand:VS 0 \"register_operand\" \"=w\")\n-\t(plus:VS (match_operand:VS 1 \"register_operand\" \"0\")\n-\t\t(unspec:VS [(match_operand:<VSI2QI> 2 \"register_operand\" \"w\")\n-\t\t\t    (match_operand:<VSI2QI> 3 \"register_operand\" \"w\")]\n-\t\tDOTPROD)))]\n-  \"TARGET_DOTPROD\"\n-  \"<sur>dot\\\\t%0.<Vtype>, %2.<Vdottype>, %3.<Vdottype>\"\n-  [(set_attr \"type\" \"neon_dot<q>\")]\n-)\n-\n-;; These expands map to the Dot Product optab the vectorizer checks for.\n+;; These expands map to the Dot Product optab the vectorizer checks for\n+;; and to the intrinsics patttern.\n ;; The auto-vectorizer expects a dot product builtin that also does an\n ;; accumulation into the provided register.\n ;; Given the following pattern\n@@ -619,20 +608,17 @@\n ;; ...\n ;;\n ;; and so the vectorizer provides r, in which the result has to be accumulated.\n-(define_expand \"<sur>dot_prod<vsi2qi>\"\n-  [(set (match_operand:VS 0 \"register_operand\")\n-\t(plus:VS (unspec:VS [(match_operand:<VSI2QI> 1 \"register_operand\")\n-\t\t\t    (match_operand:<VSI2QI> 2 \"register_operand\")]\n-\t\t DOTPROD)\n-\t\t(match_operand:VS 3 \"register_operand\")))]\n+(define_insn \"<sur>dot_prod<vsi2qi>\"\n+  [(set (match_operand:VS 0 \"register_operand\" \"=w\")\n+\t(plus:VS\n+\t  (unspec:VS [(match_operand:<VSI2QI> 1 \"register_operand\" \"w\")\n+\t\t      (match_operand:<VSI2QI> 2 \"register_operand\" \"w\")]\n+\t\t      DOTPROD)\n+\t  (match_operand:VS 3 \"register_operand\" \"0\")))]\n   \"TARGET_DOTPROD\"\n-{\n-  emit_insn (\n-    gen_aarch64_<sur>dot<vsi2qi> (operands[3], operands[3], operands[1],\n-\t\t\t\t    operands[2]));\n-  emit_insn (gen_rtx_SET (operands[0], operands[3]));\n-  DONE;\n-})\n+  \"<sur>dot\\\\t%0.<Vtype>, %1.<Vdottype>, %2.<Vdottype>\"\n+  [(set_attr \"type\" \"neon_dot<q>\")]\n+)\n \n ;; These instructions map to the __builtins for the Armv8.6-a I8MM usdot\n ;; (vector) Dot Product operation and the vectorized optab.\n@@ -652,11 +638,12 @@\n ;; indexed operations.\n (define_insn \"aarch64_<sur>dot_lane<vsi2qi>\"\n   [(set (match_operand:VS 0 \"register_operand\" \"=w\")\n-\t(plus:VS (match_operand:VS 1 \"register_operand\" \"0\")\n-\t\t(unspec:VS [(match_operand:<VSI2QI> 2 \"register_operand\" \"w\")\n-\t\t\t    (match_operand:V8QI 3 \"register_operand\" \"<h_con>\")\n-\t\t\t    (match_operand:SI 4 \"immediate_operand\" \"i\")]\n-\t\tDOTPROD)))]\n+\t(plus:VS\n+\t  (unspec:VS [(match_operand:<VSI2QI> 2 \"register_operand\" \"w\")\n+\t\t      (match_operand:V8QI 3 \"register_operand\" \"<h_con>\")\n+\t\t      (match_operand:SI 4 \"immediate_operand\" \"i\")]\n+\t\t      DOTPROD)\n+\t  (match_operand:VS 1 \"register_operand\" \"0\")))]\n   \"TARGET_DOTPROD\"\n   {\n     operands[4] = aarch64_endian_lane_rtx (V8QImode, INTVAL (operands[4]));\n@@ -667,11 +654,12 @@\n \n (define_insn \"aarch64_<sur>dot_laneq<vsi2qi>\"\n   [(set (match_operand:VS 0 \"register_operand\" \"=w\")\n-\t(plus:VS (match_operand:VS 1 \"register_operand\" \"0\")\n-\t\t(unspec:VS [(match_operand:<VSI2QI> 2 \"register_operand\" \"w\")\n-\t\t\t    (match_operand:V16QI 3 \"register_operand\" \"<h_con>\")\n-\t\t\t    (match_operand:SI 4 \"immediate_operand\" \"i\")]\n-\t\tDOTPROD)))]\n+\t(plus:VS\n+\t  (unspec:VS [(match_operand:<VSI2QI> 2 \"register_operand\" \"w\")\n+\t\t      (match_operand:V16QI 3 \"register_operand\" \"<h_con>\")\n+\t\t      (match_operand:SI 4 \"immediate_operand\" \"i\")]\n+\t\t      DOTPROD)\n+\t  (match_operand:VS 1 \"register_operand\" \"0\")))]\n   \"TARGET_DOTPROD\"\n   {\n     operands[4] = aarch64_endian_lane_rtx (V16QImode, INTVAL (operands[4]));\n@@ -944,8 +932,7 @@\n \trtx ones = force_reg (V16QImode, CONST1_RTX (V16QImode));\n \trtx abd = gen_reg_rtx (V16QImode);\n \temit_insn (gen_aarch64_<sur>abdv16qi (abd, operands[1], operands[2]));\n-\temit_insn (gen_aarch64_udotv16qi (operands[0], operands[3],\n-\t\t\t\t\t  abd, ones));\n+\temit_insn (gen_udot_prodv16qi (operands[0], abd, ones, operands[3]));\n \tDONE;\n       }\n     rtx reduc = gen_reg_rtx (V8HImode);"}, {"sha": "313b35fc20eae41b679fce3761ca6aad323a0202", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab2270036dc0f2a13442ce682267bc7433ffb34/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab2270036dc0f2a13442ce682267bc7433ffb34/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=1ab2270036dc0f2a13442ce682267bc7433ffb34", "patch": "@@ -31472,28 +31472,28 @@ __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vdot_u32 (uint32x2_t __r, uint8x8_t __a, uint8x8_t __b)\n {\n-  return __builtin_aarch64_udotv8qi_uuuu (__r, __a, __b);\n+  return __builtin_aarch64_udot_prodv8qi_uuuu (__a, __b, __r);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vdotq_u32 (uint32x4_t __r, uint8x16_t __a, uint8x16_t __b)\n {\n-  return __builtin_aarch64_udotv16qi_uuuu (__r, __a, __b);\n+  return __builtin_aarch64_udot_prodv16qi_uuuu (__a, __b, __r);\n }\n \n __extension__ extern __inline int32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vdot_s32 (int32x2_t __r, int8x8_t __a, int8x8_t __b)\n {\n-  return __builtin_aarch64_sdotv8qi (__r, __a, __b);\n+  return __builtin_aarch64_sdot_prodv8qi (__a, __b, __r);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vdotq_s32 (int32x4_t __r, int8x16_t __a, int8x16_t __b)\n {\n-  return __builtin_aarch64_sdotv16qi (__r, __a, __b);\n+  return __builtin_aarch64_sdot_prodv16qi (__a, __b, __r);\n }\n \n __extension__ extern __inline uint32x2_t"}]}