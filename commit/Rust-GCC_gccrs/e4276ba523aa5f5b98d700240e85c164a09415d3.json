{"sha": "e4276ba523aa5f5b98d700240e85c164a09415d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQyNzZiYTUyM2FhNWY1Yjk4ZDcwMDI0MGU4NWMxNjRhMDk0MTVkMw==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2014-08-23T16:50:22Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2014-08-23T16:50:22Z"}, "message": "cpplib.h (enum c_lang): Add CLK_GNUCXX1Z, CLK_CXX1Z...\n\n\nlibcpp/\n\n2014-08-23  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\t* include/cpplib.h (enum c_lang): Add CLK_GNUCXX1Z, CLK_CXX1Z;\n\tRename CLK_GNUCXX1Y, CLK_CXX1Y to CLK_GNUCXX14, CLK_CXX14;\n\t* init.c (struct lang_flags lang_defaults): Add column for trigraphs;\n\tAdd rows for CLK_GNUCXX1Z, CLK_CXX1Z; (cpp_set_lang): Set trigraphs;\n\t(cpp_init_builtins): Set __cplusplus to 201402L for C++14;\n\tSet __cplusplus to 201500L for C++17.\n\t* expr.c (cpp_classify_number): Change C++1y to C++14 in binary\n\tconstants error message.\n\n\ngcc/c-family/\n\n2014-08-23  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\t* c-common.h (enum cxx_dialect): Add cxx14.\n\t* c-opts.c (set_std_cxx1y): Rename to set_std_cxx14; Use cxx14.\n\t* c-ubsan.c (ubsan_instrument_shift): Change comment and logic from\n\tcxx_dialect == cxx11 || cxx_dialect == cxx1y to cxx_dialect >= cxx11.\n\n\ngcc/cp/\n\n2014-08-23  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\t* decl.c (compute_array_index_type, grokdeclarator,\n\tundeduced_auto_decl): Change from cxx1y to cxx14.\n\t*lambda.c(add_capture()): Change error message from C++1y to C++14.\n\t* parser.c (cp_parser_unqualified_id, cp_parser_pseudo_destructor_name,\n\tcp_parser_lambda_introducer, cp_parser_lambda_declarator_opt,\n\tcp_parser_decltype, cp_parser_conversion_type_id,\n\tcp_parser_simple_type_specifier, cp_parser_type_id_1,\n\tcp_parser_template_type_arg, cp_parser_std_attribute,\n\tcp_parser_template_declaration_after_export): Ditto.\n\t* pt.c (tsubst): Ditto.\n\t* semantics.c (force_paren_expr, finish_decltype_type): Ditto.\n\t* tree.c: Change comment.\n\t* typeck.c (comp_template_parms_position, cxx_sizeof_or_alignof_type,\n\tcp_build_addr_expr_1, maybe_warn_about_useless_cast): Ditto.\n\n\ngcc/\n\n2014-08-23  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\t* doc/invoke.texi: Change c++1y to c++14 and gnu++1y to gnu++14.\n\tDeprecate c++1y. Change language to reflect greater confidence in C++14.\n\n\ngcc/testsuite/\n\n2014-08-23  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\t* g++.dg/cpp0x/cplusplus.C: New.\n\t* g++.dg/cpp0x/cplusplus_0x.C: New.\n\t* g++.dg/cpp0x/auto3.C: Change c++1y to c++14.\n\t* g++.dg/cpp0x/auto41.C: Ditto.\n\t* g++.dg/cpp0x/auto9.C: Ditto.\n\t* g++.dg/cpp0x/initlist26.C: Ditto.\n\t* g++.dg/cpp0x/pr59111.C: Ditto.\n\t* g++.dg/cpp0x/trailing2.C: Ditto.\n\t* g++.dg/cpp1y/attr-deprecated.C: Ditto.\n\t* g++.dg/cpp1y/auto-dtor1.C: Ditto.\n\t* g++.dg/cpp1y/auto-fn1.C: Ditto.\n\t* g++.dg/cpp1y/auto-fn2.C: Ditto.\n\t* g++.dg/cpp1y/auto-fn3.C: Ditto.\n\t* g++.dg/cpp1y/auto-fn4.C: Ditto.\n\t* g++.dg/cpp1y/auto-fn5.C: Ditto.\n\t* g++.dg/cpp1y/auto-fn6.C: Ditto.\n\t* g++.dg/cpp1y/auto-fn7.C: Ditto.\n\t* g++.dg/cpp1y/auto-fn8.C: Ditto.\n\t* g++.dg/cpp1y/auto-fn9.C: Ditto.\n\t* g++.dg/cpp1y/auto-fn10.C: Ditto.\n\t* g++.dg/cpp1y/auto-fn11.C: Ditto.\n\t* g++.dg/cpp1y/auto-fn12.C: Ditto.\n\t* g++.dg/cpp1y/auto-fn13.C: Ditto.\n\t* g++.dg/cpp1y/auto-fn14.C: Ditto.\n\t* g++.dg/cpp1y/auto-fn15.C: Ditto.\n\t* g++.dg/cpp1y/auto-fn16.C: Ditto.\n\t* g++.dg/cpp1y/auto-fn17.C: Ditto.\n\t* g++.dg/cpp1y/auto-fn18.C: Ditto.\n\t* g++.dg/cpp1y/auto-fn19.C: Ditto.\n\t* g++.dg/cpp1y/auto-fn20.C: Ditto.\n\t* g++.dg/cpp1y/auto-fn21.C: Ditto.\n\t* g++.dg/cpp1y/auto-fn22.C: Ditto.\n\t* g++.dg/cpp1y/auto-fn23.C: Ditto.\n\t* g++.dg/cpp1y/auto-fn24.C: Ditto.\n\t* g++.dg/cpp1y/auto-fn25.C: Ditto.\n\t* g++.dg/cpp1y/auto-mangle1.C: Ditto.\n\t* g++.dg/cpp1y/auto-neg1.C: Ditto.\n\t* g++.dg/cpp1y/digit-sep.C: Ditto.\n\t* g++.dg/cpp1y/digit-sep-neg.C: Ditto.\n\t* g++.dg/cpp1y/digit-sep-cxx11-neg.C: Ditto.\n\t* g++.dg/cpp1y/fn-generic-member-ool.C: Ditto.\n\t* g++.dg/cpp1y/lambda-deduce-mult.C: Ditto.\n\t* g++.dg/cpp1y/lambda-generic.C: Ditto.\n\t* g++.dg/cpp1y/lambda-generic-cfun.C: Ditto.\n\t* g++.dg/cpp1y/lambda-generic-dep.C: Ditto.\n\t* g++.dg/cpp1y/lambda-generic-mixed.C: Ditto.\n\t* g++.dg/cpp1y/lambda-generic-udt.C: Ditto.\n\t* g++.dg/cpp1y/lambda-generic-variadic.C: Ditto.\n\t* g++.dg/cpp1y/lambda-generic-vla1.C: Ditto.\n\t* g++.dg/cpp1y/lambda-generic-x.C: Ditto.\n\t* g++.dg/cpp1y/lambda-generic-xcfun.C: Ditto.\n\t* g++.dg/cpp1y/lambda-generic-xudt.C: Ditto.\n\t* g++.dg/cpp1y/lambda-init.C: Ditto.\n\t* g++.dg/cpp1y/lambda-init1.C: Ditto.\n\t* g++.dg/cpp1y/lambda-init2.C: Ditto.\n\t* g++.dg/cpp1y/lambda-init3.C: Ditto.\n\t* g++.dg/cpp1y/lambda-init4.C: Ditto.\n\t* g++.dg/cpp1y/lambda-init5.C: Ditto.\n\t* g++.dg/cpp1y/lambda-init6.C: Ditto.\n\t* g++.dg/cpp1y/lambda-init7.C: Ditto.\n\t* g++.dg/cpp1y/lambda-init8.C: Ditto.\n\t* g++.dg/cpp1y/lambda-init9.C: Ditto.\n\t* g++.dg/cpp1y/mangle1.C: Ditto.\n\t* g++.dg/cpp1y/pr57640.C: Ditto.\n\t* g++.dg/cpp1y/pr57644.C: Ditto.\n\t* g++.dg/cpp1y/pr58500.C: Ditto.\n\t* g++.dg/cpp1y/pr58533.C: Ditto.\n\t* g++.dg/cpp1y/pr58534.C: Ditto.\n\t* g++.dg/cpp1y/pr58535.C: Ditto.\n\t* g++.dg/cpp1y/pr58536.C: Ditto.\n\t* g++.dg/cpp1y/pr58548.C: Ditto.\n\t* g++.dg/cpp1y/pr58549.C: Ditto.\n\t* g++.dg/cpp1y/pr58637.C: Ditto.\n\t* g++.dg/cpp1y/pr58708.C: Ditto.\n\t* g++.dg/cpp1y/pr59110.C: Ditto.\n\t* g++.dg/cpp1y/pr59112.C: Ditto.\n\t* g++.dg/cpp1y/pr59113.C: Ditto.\n\t* g++.dg/cpp1y/pr59629.C: Ditto.\n\t* g++.dg/cpp1y/pr59635.C: Ditto.\n\t* g++.dg/cpp1y/pr59636.C: Ditto.\n\t* g++.dg/cpp1y/pr59638.C: Ditto.\n\t* g++.dg/cpp1y/pr59867.C: Ditto.\n\t* g++.dg/cpp1y/pr60033.C: Ditto.\n\t* g++.dg/cpp1y/pr60052.C: Ditto.\n\t* g++.dg/cpp1y/pr60053.C: Ditto.\n\t* g++.dg/cpp1y/pr60054.C: Ditto.\n\t* g++.dg/cpp1y/pr60064.C: Ditto.\n\t* g++.dg/cpp1y/pr60065.C: Ditto.\n\t* g++.dg/cpp1y/pr60190.C: Ditto.\n\t* g++.dg/cpp1y/pr60311.C: Ditto.\n\t* g++.dg/cpp1y/pr60332.C: Ditto.\n\t* g++.dg/cpp1y/pr60376.C: Ditto.\n\t* g++.dg/cpp1y/pr60377.C: Ditto.\n\t* g++.dg/cpp1y/pr60384.C: Ditto.\n\t* g++.dg/cpp1y/pr60390.C: Ditto.\n\t* g++.dg/cpp1y/pr60391.C: Ditto.\n\t* g++.dg/cpp1y/pr60393.C: Ditto.\n\t* g++.dg/cpp1y/pr60573.C: Ditto.\n\t* g++.dg/cpp1y/pr60626.C: Ditto.\n\t* g++.dg/cpp1y/pr60627.C: Ditto.\n\t* g++.dg/cpp1y/regress1.C: Ditto.\n\t* g++.dg/cpp1y/system-binary-constants-1.C: Ditto.\n\t* g++.dg/cpp1y/udlit-char-template.C: Ditto.\n\t* g++.dg/cpp1y/udlit-char-template-neg.C: Ditto.\n\t* g++.dg/cpp1y/udlit-empty-string-neg.C: Ditto.\n\t* g++.dg/cpp1y/udlit-enc-prefix-neg.C: Ditto.\n\t* g++.dg/cpp1y/udlit-userdef-string.C: Ditto.\n\t* g++.dg/cpp1y/var-templ1.C: Ditto.\n\t* g++.dg/cpp1y/var-templ2.C: Ditto.\n\t* g++.dg/cpp1y/var-templ3.C: Ditto.\n\t* g++.dg/cpp1y/var-templ4.C: Ditto.\n\t* g++.dg/cpp1y/var-templ5.C: Ditto.\n\t* g++.dg/cpp1y/var-templ6.C: Ditto.\n\t* g++.dg/cpp1y/var-templ7.C: Ditto.\n\t* g++.dg/cpp1y/vla1.C: Ditto.\n\t* g++.dg/cpp1y/vla2.C: Ditto.\n\t* g++.dg/cpp1y/vla3.C: Ditto.\n\t* g++.dg/cpp1y/vla4.C: Ditto.\n\t* g++.dg/cpp1y/vla5.C: Ditto.\n\t* g++.dg/cpp1y/vla8.C: Ditto.\n\t* g++.dg/cpp1y/vla9.C: Ditto.\n\t* g++.dg/cpp1y/vla10.C: Ditto.\n\t* g++.dg/cpp1y/vla11.C: Ditto.\n\t* g++.dg/cpp1y/vla12.C: Ditto.\n\t* g++.dg/cpp1y/vla13.C: Ditto.\n\t* g++.dg/cpp1y/vla-initlist1.C: Ditto.\n\t* g++.dg/ext/vector23.C: Ditto.\n\t* g++.dg/ext/vla11.C: Ditto.\n\t* gcc/testsuite/g++.dg/ubsan/cxx1y-vla.C: Ditto.\n\t* g++.dg/warn/Wvla-2.C: Ditto.\n\t* g++.dg/debug/dwarf2/auto1.C: Ditto.\n\t* g++.dg/cpp1z/typename-tmpl-tmpl-parm-ped-neg.C: Ditto.\n\t* g++.dg/cpp1y/cplusplus.C: Check for exact date.\n\t* g++.dg/cpp1y/system-binary-constants-1.C: Check C++14 instead of C++1y\n\tin error message.\n\t* g++.dg/system-binary-constants-1.C: Ditto.\n\t* g++.dg/cpp1y/cplusplus_1y.C: New.\n\t* g++.dg/cpp1z/cplusplus.C: New.\n\t* lib/target-supports.exp:\n\t(check_effective_target_c++1y*): Rename to check_effective_target_c++14*\n\t(check_effective_target_c++11_only): Call check_effective_target_c++14;\n\t(check_effective_target_c++11_down): Ditto.\n\nFrom-SVN: r214400", "tree": {"sha": "90c3d98def13763d69f7b449e3eb35a47b01670a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90c3d98def13763d69f7b449e3eb35a47b01670a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4276ba523aa5f5b98d700240e85c164a09415d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4276ba523aa5f5b98d700240e85c164a09415d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4276ba523aa5f5b98d700240e85c164a09415d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4276ba523aa5f5b98d700240e85c164a09415d3/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5dba8769311c65ca4f289382045075d1d55f7e77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dba8769311c65ca4f289382045075d1d55f7e77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dba8769311c65ca4f289382045075d1d55f7e77"}], "stats": {"total": 692, "additions": 458, "deletions": 234}, "files": [{"sha": "063648dbaf19932bc30a565cd8bec2c2c6d63ca7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,3 +1,8 @@\n+2014-08-23  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\t* doc/invoke.texi: Change c++1y to c++14 and gnu++1y to gnu++14.\n+\tDeprecate c++1y. Change language to reflect greater confidence in C++14.\n+\n 2014-08-23  John David Anglin  <danglin@gcc.gnu.org>\n \n \tPR target/62038"}, {"sha": "8f5bf10556427a751285eaa6482ee46067dad59b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,3 +1,10 @@\n+2014-08-23  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\t* c-common.h (enum cxx_dialect): Add cxx14.\n+\t* c-opts.c (set_std_cxx1y): Rename to set_std_cxx14; Use cxx14.\n+\t* c-ubsan.c (ubsan_instrument_shift): Change comment and logic from\n+\tcxx_dialect == cxx11 || cxx_dialect == cxx1y to cxx_dialect >= cxx11.\n+\n 2014-08-22  Jason Merrill  <jason@redhat.com>\n \n \t* c.opt (std=gnu++17): Fix alias."}, {"sha": "f621a3af040edd6874bbc5736400ebbdbe39d3a3", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -640,8 +640,9 @@ enum cxx_dialect {\n   /* C++11  */\n   cxx0x,\n   cxx11 = cxx0x,\n-  /* C++1y (C++14?) */\n+  /* C++14  */\n   cxx1y,\n+  cxx14 = cxx1y,\n   /* C++1z (C++17?) */\n   cxx1z\n };"}, {"sha": "42f175928fdee8d658129bac46f63a760d82c3e2", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -116,7 +116,7 @@ static bool done_preinclude;\n static void handle_OPT_d (const char *);\n static void set_std_cxx98 (int);\n static void set_std_cxx11 (int);\n-static void set_std_cxx1y (int);\n+static void set_std_cxx14 (int);\n static void set_std_cxx1z (int);\n static void set_std_c89 (int, int);\n static void set_std_c99 (int);\n@@ -702,7 +702,7 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n     case OPT_std_gnu__1y:\n       if (!preprocessing_asm_p)\n \t{\n-\t  set_std_cxx1y (code == OPT_std_c__1y /* ISO */);\n+\t  set_std_cxx14 (code == OPT_std_c__1y /* ISO */);\n \t  if (code == OPT_std_c__1y)\n \t    cpp_opts->ext_numeric_literals = 0;\n \t}\n@@ -1589,29 +1589,30 @@ set_std_cxx11 (int iso)\n \n /* Set the C++ 201y draft standard (without GNU extensions if ISO).  */\n static void\n-set_std_cxx1y (int iso)\n+set_std_cxx14 (int iso)\n {\n-  cpp_set_lang (parse_in, iso ? CLK_CXX1Y: CLK_GNUCXX1Y);\n+  cpp_set_lang (parse_in, iso ? CLK_CXX14: CLK_GNUCXX14);\n   flag_no_gnu_keywords = iso;\n   flag_no_nonansi_builtin = iso;\n   flag_iso = iso;\n   /* C++11 includes the C99 standard library.  */\n   flag_isoc94 = 1;\n   flag_isoc99 = 1;\n-  cxx_dialect = cxx1y;\n+  cxx_dialect = cxx14;\n }\n \n /* Set the C++ 201z draft standard (without GNU extensions if ISO).  */\n static void\n set_std_cxx1z (int iso)\n {\n-  cpp_set_lang (parse_in, iso ? CLK_CXX1Y: CLK_GNUCXX1Y);\n+  cpp_set_lang (parse_in, iso ? CLK_CXX1Z: CLK_GNUCXX1Z);\n   flag_no_gnu_keywords = iso;\n   flag_no_nonansi_builtin = iso;\n   flag_iso = iso;\n   /* C++11 includes the C99 standard library.  */\n   flag_isoc94 = 1;\n   flag_isoc99 = 1;\n+  flag_isoc11 = 1;\n   cxx_dialect = cxx1z;\n }\n "}, {"sha": "f0d9b70062338fbea6e9fa3947a5e9aa393e999b", "filename": "gcc/c-family/c-ubsan.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Fc-family%2Fc-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Fc-family%2Fc-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ubsan.c?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -146,12 +146,12 @@ ubsan_instrument_shift (location_t loc, enum tree_code code,\n \t\t\tbuild_int_cst (TREE_TYPE (tt), 0));\n     }\n \n-  /* For signed x << y, in C++11/C++14, the following:\n+  /* For signed x << y, in C++11 and later, the following:\n      x < 0 || ((unsigned) x >> (precm1 - y))\n      if > 1, is undefined.  */\n   if (code == LSHIFT_EXPR\n       && !TYPE_UNSIGNED (TREE_TYPE (op0))\n-      && (cxx_dialect == cxx11 || cxx_dialect == cxx1y))\n+      && (cxx_dialect >= cxx11))\n     {\n       tree x = fold_build2 (MINUS_EXPR, integer_type_node, precm1, op1);\n       tt = fold_convert_loc (loc, unsigned_type_for (type0), op0);"}, {"sha": "e770ab0d035bab1780f9247c168c60b33d4f7832", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,3 +1,20 @@\n+2014-08-23  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\t* decl.c (compute_array_index_type, grokdeclarator,\n+\tundeduced_auto_decl): Change from cxx1y to cxx14.\n+\t*lambda.c(add_capture()): Change error message from C++1y to C++14.\n+\t* parser.c (cp_parser_unqualified_id, cp_parser_pseudo_destructor_name,\n+\tcp_parser_lambda_introducer, cp_parser_lambda_declarator_opt,\n+\tcp_parser_decltype, cp_parser_conversion_type_id,\n+\tcp_parser_simple_type_specifier, cp_parser_type_id_1,\n+\tcp_parser_template_type_arg, cp_parser_std_attribute,\n+\tcp_parser_template_declaration_after_export): Ditto.\n+\t* pt.c (tsubst): Ditto.\n+\t* semantics.c (force_paren_expr, finish_decltype_type): Ditto.\n+\t* tree.c: Change comment.\n+\t* typeck.c (comp_template_parms_position, cxx_sizeof_or_alignof_type,\n+\tcp_build_addr_expr_1, maybe_warn_about_useless_cast): Ditto.\n+\n 2014-08-23  Jason Merrill  <jason@redhat.com>\n \n \tAllow non-constexpr variable templates."}, {"sha": "e83192ad749be608a21c3668aec25f197cb50711", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -8413,7 +8413,7 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n \t   /* We don't allow VLAs at non-function scopes, or during\n \t      tentative template substitution.  */\n \t   || !at_function_scope_p ()\n-\t   || (cxx_dialect < cxx1y && !(complain & tf_error)))\n+\t   || (cxx_dialect < cxx14 && !(complain & tf_error)))\n     {\n       if (!(complain & tf_error))\n \treturn error_mark_node;\n@@ -8425,7 +8425,7 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n \terror (\"size of array is not an integral constant-expression\");\n       size = integer_one_node;\n     }\n-  else if (cxx_dialect < cxx1y && pedantic && warn_vla != 0)\n+  else if (cxx_dialect < cxx14 && pedantic && warn_vla != 0)\n     {\n       if (name)\n \tpedwarn (input_location, OPT_Wvla, \"ISO C++ forbids variable length array %qD\", name);\n@@ -8483,7 +8483,7 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n \n \t  stabilize_vla_size (itype);\n \n-\t  if (cxx_dialect >= cxx1y && flag_exceptions)\n+\t  if (cxx_dialect >= cxx14 && flag_exceptions)\n \t    {\n \t      /* If the VLA bound is larger than half the address space,\n \t         or less than zero, throw std::bad_array_length.  */\n@@ -8499,7 +8499,7 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n \t\t\t\t\t DECL_ATTRIBUTES\n \t\t\t\t\t   (current_function_decl)))\n \t    {\n-\t      /* From C++1y onwards, we throw an exception on a negative\n+\t      /* From C++14 onwards, we throw an exception on a negative\n \t\t length size of an array; see above.  */\n \n \t      /* We have to add 1 -- in the ubsan routine we generate\n@@ -8628,7 +8628,7 @@ create_array_type_for_decl (tree name, tree type, tree size)\n       return error_mark_node;\n     }\n \n-  if (cxx_dialect >= cxx1y && array_of_runtime_bound_p (type)\n+  if (cxx_dialect >= cxx14 && array_of_runtime_bound_p (type)\n       && (flag_iso || warn_vla > 0))\n     pedwarn (input_location, OPT_Wvla, \"array of array of runtime bound\");\n \n@@ -9648,14 +9648,14 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\tif (current_class_type\n \t\t\t    && LAMBDA_TYPE_P (current_class_type))\n \t\t\t  /* OK for C++11 lambdas.  */;\n-\t\t\telse if (cxx_dialect < cxx1y)\n+\t\t\telse if (cxx_dialect < cxx14)\n \t\t\t  {\n \t\t\t    error (\"%qs function uses \"\n \t\t\t\t   \"%<auto%> type specifier without trailing \"\n \t\t\t\t   \"return type\", name);\n \t\t\t    inform (input_location, \"deduced return type \"\n-\t\t\t\t    \"only available with -std=c++1y or \"\n-\t\t\t\t    \"-std=gnu++1y\");\n+\t\t\t\t    \"only available with -std=c++14 or \"\n+\t\t\t\t    \"-std=gnu++14\");\n \t\t\t  }\n \t\t\telse if (virtualp)\n \t\t\t  {\n@@ -9872,7 +9872,7 @@ grokdeclarator (const cp_declarator *declarator,\n                    : G_(\"cannot declare pointer to qualified function type %qT\"),\n \t\t   type);\n \n-\t  if (cxx_dialect >= cxx1y && array_of_runtime_bound_p (type)\n+\t  if (cxx_dialect >= cxx14 && array_of_runtime_bound_p (type)\n \t      && (flag_iso || warn_vla > 0))\n \t    pedwarn (input_location, OPT_Wvla,\n \t\t     declarator->kind == cdk_reference\n@@ -10229,7 +10229,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t  type = error_mark_node;\n \t}\n \n-      if (cxx_dialect >= cxx1y && array_of_runtime_bound_p (type)\n+      if (cxx_dialect >= cxx14 && array_of_runtime_bound_p (type)\n \t  && (flag_iso || warn_vla > 0))\n \tpedwarn (input_location, OPT_Wvla,\n \t\t \"typedef naming array of runtime bound\");\n@@ -10475,7 +10475,7 @@ grokdeclarator (const cp_declarator *declarator,\n \n       if (type_uses_auto (type))\n \t{\n-\t  if (cxx_dialect >= cxx1y)\n+\t  if (cxx_dialect >= cxx14)\n \t    error (\"%<auto%> parameter not permitted in this context\");\n \t  else\n \t    error (\"parameter declared %<auto%>\");\n@@ -14629,7 +14629,7 @@ fndecl_declared_return_type (tree fn)\n bool\n undeduced_auto_decl (tree decl)\n {\n-  if (cxx_dialect < cxx1y)\n+  if (cxx_dialect < cxx14)\n     return false;\n   return type_uses_auto (TREE_TYPE (decl));\n }"}, {"sha": "0d8d4551a0f6aad6171ee5cc5b6d136390e4c170", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -474,7 +474,7 @@ add_capture (tree lambda, tree id, tree orig_init, bool by_reference_p,\n     }\n   else if (variably_modified_type_p (type, NULL_TREE))\n     {\n-      error (\"capture of variable-size type %qT that is not a C++1y array \"\n+      error (\"capture of variable-size type %qT that is not a C++14 array \"\n \t     \"of runtime bound\", type);\n       if (TREE_CODE (type) == ARRAY_TYPE\n \t  && variably_modified_type_p (TREE_TYPE (type), NULL_TREE))"}, {"sha": "f0beb42cd20b6e100b5e923eaaad21470639335d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -4970,10 +4970,10 @@ cp_parser_unqualified_id (cp_parser* parser,\n \t/* ~auto means the destructor of whatever the object is.  */\n \tif (cp_parser_is_keyword (token, RID_AUTO))\n \t  {\n-\t    if (cxx_dialect < cxx1y)\n+\t    if (cxx_dialect < cxx14)\n \t      pedwarn (input_location, 0,\n \t\t       \"%<~auto%> only available with \"\n-\t\t       \"-std=c++1y or -std=gnu++1y\");\n+\t\t       \"-std=c++14 or -std=gnu++14\");\n \t    cp_lexer_consume_token (parser->lexer);\n \t    return build_nt (BIT_NOT_EXPR, make_auto ());\n \t  }\n@@ -6895,10 +6895,10 @@ cp_parser_pseudo_destructor_name (cp_parser* parser,\n       && cp_lexer_nth_token_is_keyword (parser->lexer, 2, RID_AUTO)\n       && !type_dependent_expression_p (object))\n     {\n-      if (cxx_dialect < cxx1y)\n+      if (cxx_dialect < cxx14)\n \tpedwarn (input_location, 0,\n \t\t \"%<~auto%> only available with \"\n-\t\t \"-std=c++1y or -std=gnu++1y\");\n+\t\t \"-std=c++14 or -std=gnu++14\");\n       cp_lexer_consume_token (parser->lexer);\n       cp_lexer_consume_token (parser->lexer);\n       *scope = NULL_TREE;\n@@ -9058,10 +9058,10 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n \t{\n \t  bool direct, non_constant;\n \t  /* An explicit initializer exists.  */\n-\t  if (cxx_dialect < cxx1y)\n+\t  if (cxx_dialect < cxx14)\n \t    pedwarn (input_location, 0,\n \t\t     \"lambda capture initializers \"\n-\t\t     \"only available with -std=c++1y or -std=gnu++1y\");\n+\t\t     \"only available with -std=c++14 or -std=gnu++14\");\n \t  capture_init_expr = cp_parser_initializer (parser, &direct,\n \t\t\t\t\t\t     &non_constant);\n \t  explicit_init_p = true;\n@@ -9184,10 +9184,10 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n      an opening angle if present.  */\n   if (cp_lexer_next_token_is (parser->lexer, CPP_LESS))\n     {\n-      if (cxx_dialect < cxx1y)\n+      if (cxx_dialect < cxx14)\n \tpedwarn (parser->lexer->next_token->location, 0,\n \t\t \"lambda templates are only available with \"\n-\t\t \"-std=c++1y or -std=gnu++1y\");\n+\t\t \"-std=c++14 or -std=gnu++14\");\n \n       cp_lexer_consume_token (parser->lexer);\n \n@@ -12162,7 +12162,7 @@ cp_parser_decltype (cp_parser *parser)\n     return error_mark_node;\n \n   /* decltype (auto) */\n-  if (cxx_dialect >= cxx1y\n+  if (cxx_dialect >= cxx14\n       && cp_lexer_next_token_is_keyword (parser->lexer, RID_AUTO))\n     {\n       cp_lexer_consume_token (parser->lexer);\n@@ -12345,7 +12345,7 @@ cp_parser_conversion_type_id (cp_parser* parser)\n   if (! cp_parser_uncommitted_to_tentative_parse_p (parser)\n       && type_uses_auto (type_specified))\n     {\n-      if (cxx_dialect < cxx1y)\n+      if (cxx_dialect < cxx14)\n \t{\n \t  error (\"invalid use of %<auto%> in conversion operator\");\n \t  return error_mark_node;\n@@ -14710,17 +14710,17 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n \n \t  if (current_class_type && LAMBDA_TYPE_P (current_class_type))\n \t    {\n-\t      if (cxx_dialect < cxx1y)\n+\t      if (cxx_dialect < cxx14)\n \t\tpedwarn (location_of (type), 0,\n \t\t\t \"use of %<auto%> in lambda parameter declaration \"\n \t\t\t \"only available with \"\n-\t\t\t \"-std=c++1y or -std=gnu++1y\");\n+\t\t\t \"-std=c++14 or -std=gnu++14\");\n \t    }\n-\t  else if (cxx_dialect < cxx1y)\n+\t  else if (cxx_dialect < cxx14)\n \t    pedwarn (location_of (type), 0,\n \t\t     \"use of %<auto%> in parameter declaration \"\n \t\t     \"only available with \"\n-\t\t     \"-std=c++1y or -std=gnu++1y\");\n+\t\t     \"-std=c++14 or -std=gnu++14\");\n \t  else\n \t    pedwarn (location_of (type), OPT_Wpedantic,\n \t\t     \"ISO C++ forbids use of %<auto%> in parameter \"\n@@ -18215,7 +18215,7 @@ cp_parser_type_id_1 (cp_parser* parser, bool is_template_arg,\n   if (type_specifier_seq.type\n       /* None of the valid uses of 'auto' in C++14 involve the type-id\n \t nonterminal, but it is valid in a trailing-return-type.  */\n-      && !(cxx_dialect >= cxx1y && is_trailing_return)\n+      && !(cxx_dialect >= cxx14 && is_trailing_return)\n       && type_uses_auto (type_specifier_seq.type))\n     {\n       /* A type-id with type 'auto' is only ok if the abstract declarator\n@@ -18248,7 +18248,7 @@ static tree cp_parser_template_type_arg (cp_parser *parser)\n     = G_(\"types may not be defined in template arguments\");\n   r = cp_parser_type_id_1 (parser, true, false);\n   parser->type_definition_forbidden_message = saved_message;\n-  if (cxx_dialect >= cxx1y && type_uses_auto (r))\n+  if (cxx_dialect >= cxx14 && type_uses_auto (r))\n     {\n       error (\"invalid use of %<auto%> in template argument\");\n       r = error_mark_node;\n@@ -22104,7 +22104,7 @@ cp_parser_std_attribute (cp_parser *parser)\n       if (is_attribute_p (\"noreturn\", attr_id))\n \tTREE_PURPOSE (TREE_PURPOSE (attribute)) = get_identifier (\"gnu\");\n       /* C++14 deprecated attribute is equivalent to GNU's.  */\n-      else if (cxx_dialect >= cxx1y && is_attribute_p (\"deprecated\", attr_id))\n+      else if (cxx_dialect >= cxx14 && is_attribute_p (\"deprecated\", attr_id))\n \tTREE_PURPOSE (TREE_PURPOSE (attribute)) = get_identifier (\"gnu\");\n     }\n \n@@ -23317,7 +23317,7 @@ cp_parser_template_declaration_after_export (cp_parser* parser, bool member_p)\n \t\t  || !TEMPLATE_PARM_PARAMETER_PACK (DECL_INITIAL (parm)))\n \t\tok = false;\n \t    }\n-\t  else if (num_parms == 2 && cxx_dialect >= cxx1y)\n+\t  else if (num_parms == 2 && cxx_dialect >= cxx14)\n \t    {\n \t      tree parm_type = TREE_VEC_ELT (parameter_list, 0);\n \t      tree type = INNERMOST_TEMPLATE_PARMS (parm_type);\n@@ -23332,7 +23332,7 @@ cp_parser_template_declaration_after_export (cp_parser* parser, bool member_p)\n \t}\n       if (!ok)\n \t{\n-\t  if (cxx_dialect >= cxx1y)\n+\t  if (cxx_dialect >= cxx14)\n \t    error (\"literal operator template %qD has invalid parameter list.\"\n \t\t   \"  Expected non-type template argument pack <char...>\"\n \t\t   \" or <typename CharT, CharT...>\","}, {"sha": "a40f9d2ad7c653306e63e4045bb273941ad320ce", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -2310,10 +2310,10 @@ check_template_variable (tree decl)\n   int wanted = num_template_headers_for_class (ctx);\n   if (!TYPE_P (ctx) || !CLASSTYPE_TEMPLATE_INFO (ctx))\n     {\n-      if (cxx_dialect < cxx1y)\n+      if (cxx_dialect < cxx14)\n         pedwarn (DECL_SOURCE_LOCATION (decl), 0,\n                  \"variable templates only available with \"\n-                 \"-std=c++1y or -std=gnu++1y\");\n+                 \"-std=c++14 or -std=gnu++14\");\n \n       // Namespace-scope variable templates should have a template header.\n       ++wanted;\n@@ -12131,7 +12131,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t  r = cp_build_reference_type (type, TYPE_REF_IS_RVALUE (t));\n \tr = cp_build_qualified_type_real (r, cp_type_quals (t), complain);\n \n-\tif (cxx_dialect >= cxx1y\n+\tif (cxx_dialect >= cxx14\n \t    && !(TREE_CODE (t) == REFERENCE_TYPE && REFERENCE_VLA_OK (t))\n \t    && array_of_runtime_bound_p (type)\n \t    && (flag_iso || warn_vla > 0))"}, {"sha": "a54011f7ce9da4af130d17ba1737b8c9d2446bf6", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1610,7 +1610,7 @@ tree\n force_paren_expr (tree expr)\n {\n   /* This is only needed for decltype(auto) in C++14.  */\n-  if (cxx_dialect < cxx1y)\n+  if (cxx_dialect < cxx14)\n     return expr;\n \n   /* If we're in unevaluated context, we can't be deducing a\n@@ -7064,7 +7064,7 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p,\n \t}\n     }\n \n-  if (cxx_dialect >= cxx1y && array_of_runtime_bound_p (type)\n+  if (cxx_dialect >= cxx14 && array_of_runtime_bound_p (type)\n       && (flag_iso || warn_vla > 0))\n     {\n       if (complain & tf_warning_or_error)"}, {"sha": "d0e11806ef6eac7b933c2c5fd89d4aa8e5956917", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -904,7 +904,7 @@ build_array_of_n_type (tree elt, int n)\n   return build_cplus_array_type (elt, build_index_type (size_int (n - 1)));\n }\n \n-/* True iff T is a C++1y array of runtime bound (VLA).  */\n+/* True iff T is a C++14 array of runtime bound (VLA).  */\n \n bool\n array_of_runtime_bound_p (tree t)"}, {"sha": "05fd48e372dc48035b358d7b1cd67f450e59aa72", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1154,7 +1154,7 @@ comp_template_parms_position (tree t1, tree t2)\n \n   /* In C++14 we can end up comparing 'auto' to a normal template\n      parameter.  Don't confuse them.  */\n-  if (cxx_dialect >= cxx1y && (is_auto (t1) || is_auto (t2)))\n+  if (cxx_dialect >= cxx14 && (is_auto (t1) || is_auto (t2)))\n     return TYPE_IDENTIFIER (t1) == TYPE_IDENTIFIER (t2);\n \n   return true;\n@@ -1566,7 +1566,7 @@ cxx_sizeof_or_alignof_type (tree type, enum tree_code op, bool complain)\n       return value;\n     }\n \n-  if (cxx_dialect >= cxx1y && array_of_runtime_bound_p (type)\n+  if (cxx_dialect >= cxx14 && array_of_runtime_bound_p (type)\n       && (flag_iso || warn_vla > 0))\n     {\n       if (complain)\n@@ -5526,7 +5526,7 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n \n   if (argtype != error_mark_node)\n     {\n-      if (cxx_dialect >= cxx1y && array_of_runtime_bound_p (argtype)\n+      if (cxx_dialect >= cxx14 && array_of_runtime_bound_p (argtype)\n \t  && (flag_iso || warn_vla > 0))\n \t{\n \t  if (complain & tf_warning_or_error)\n@@ -6348,7 +6348,7 @@ maybe_warn_about_useless_cast (tree type, tree expr, tsubst_flags_t complain)\n       /* In C++14 mode, this interacts badly with force_paren_expr.  And it\n \t isn't necessary in any mode, because the code below handles\n \t glvalues properly.  For 4.9, just skip it in C++14 mode.  */\n-      if (cxx_dialect < cxx1y && REFERENCE_REF_P (expr))\n+      if (cxx_dialect < cxx14 && REFERENCE_REF_P (expr))\n \texpr = TREE_OPERAND (expr, 0);\n \n       if ((TREE_CODE (type) == REFERENCE_TYPE"}, {"sha": "83437830d509f2b31a802a454625c4088e61c7da", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1722,13 +1722,23 @@ The name @samp{c++0x} is deprecated.\n GNU dialect of @option{-std=c++11}.\n The name @samp{gnu++0x} is deprecated.\n \n-@item c++1y\n+@item c++14\n+@itemx c++1y\n+The 2014 ISO C++ standard plus amendments.\n+The name @samp{c++1y} is deprecated.\n+\n+@item gnu++14\n+@itemx gnu++1y\n+GNU dialect of @option{-std=c++14}.\n+The name @samp{gnu++1y} is deprecated.\n+\n+@item c++1z\n The next revision of the ISO C++ standard, tentatively planned for\n-2014.  Support is highly experimental, and will almost certainly\n+2017.  Support is highly experimental, and will almost certainly\n change in incompatible ways in future releases.\n \n-@item gnu++1y\n-GNU dialect of @option{-std=c++1y}.  Support is highly experimental,\n+@item gnu++1z\n+GNU dialect of @option{-std=c++1z}.  Support is highly experimental,\n and will almost certainly change in incompatible ways in future\n releases.\n @end table\n@@ -2676,7 +2686,7 @@ When this option is turned off these suffixes are treated\n as C++11 user-defined literal numeric suffixes.\n This is on by default for all pre-C++11 dialects and all GNU dialects:\n @option{-std=c++98}, @option{-std=gnu++98}, @option{-std=gnu++11},\n-@option{-std=gnu++1y}.\n+@option{-std=gnu++14}.\n This option is off by default\n for ISO C++11 onwards (@option{-std=c++11}, ...).\n @end table\n@@ -5510,7 +5520,7 @@ call into a diagnostics message call instead.  When reaching the\n @opindex fsanitize=vla-bound\n This option instructs the compiler to check that the size of a variable\n length array is positive.  This option does not have any effect in\n-@option{-std=c++1y} mode, as the standard requires the exception be thrown\n+@option{-std=c++14} mode, as the standard requires the exception be thrown\n instead.\n \n @item -fsanitize=null"}, {"sha": "e04f5b34e7c72e3fe8173f16bf554d12ef1aa7cb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,3 +1,148 @@\n+2014-08-23  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\t* g++.dg/cpp0x/cplusplus.C: New.\n+\t* g++.dg/cpp0x/cplusplus_0x.C: New.\n+\t* g++.dg/cpp0x/auto3.C: Change c++1y to c++14.\n+\t* g++.dg/cpp0x/auto41.C: Ditto.\n+\t* g++.dg/cpp0x/auto9.C: Ditto.\n+\t* g++.dg/cpp0x/initlist26.C: Ditto.\n+\t* g++.dg/cpp0x/pr59111.C: Ditto.\n+\t* g++.dg/cpp0x/trailing2.C: Ditto.\n+\t* g++.dg/cpp1y/attr-deprecated.C: Ditto.\n+\t* g++.dg/cpp1y/auto-dtor1.C: Ditto.\n+\t* g++.dg/cpp1y/auto-fn1.C: Ditto.\n+\t* g++.dg/cpp1y/auto-fn2.C: Ditto.\n+\t* g++.dg/cpp1y/auto-fn3.C: Ditto.\n+\t* g++.dg/cpp1y/auto-fn4.C: Ditto.\n+\t* g++.dg/cpp1y/auto-fn5.C: Ditto.\n+\t* g++.dg/cpp1y/auto-fn6.C: Ditto.\n+\t* g++.dg/cpp1y/auto-fn7.C: Ditto.\n+\t* g++.dg/cpp1y/auto-fn8.C: Ditto.\n+\t* g++.dg/cpp1y/auto-fn9.C: Ditto.\n+\t* g++.dg/cpp1y/auto-fn10.C: Ditto.\n+\t* g++.dg/cpp1y/auto-fn11.C: Ditto.\n+\t* g++.dg/cpp1y/auto-fn12.C: Ditto.\n+\t* g++.dg/cpp1y/auto-fn13.C: Ditto.\n+\t* g++.dg/cpp1y/auto-fn14.C: Ditto.\n+\t* g++.dg/cpp1y/auto-fn15.C: Ditto.\n+\t* g++.dg/cpp1y/auto-fn16.C: Ditto.\n+\t* g++.dg/cpp1y/auto-fn17.C: Ditto.\n+\t* g++.dg/cpp1y/auto-fn18.C: Ditto.\n+\t* g++.dg/cpp1y/auto-fn19.C: Ditto.\n+\t* g++.dg/cpp1y/auto-fn20.C: Ditto.\n+\t* g++.dg/cpp1y/auto-fn21.C: Ditto.\n+\t* g++.dg/cpp1y/auto-fn22.C: Ditto.\n+\t* g++.dg/cpp1y/auto-fn23.C: Ditto.\n+\t* g++.dg/cpp1y/auto-fn24.C: Ditto.\n+\t* g++.dg/cpp1y/auto-fn25.C: Ditto.\n+\t* g++.dg/cpp1y/auto-mangle1.C: Ditto.\n+\t* g++.dg/cpp1y/auto-neg1.C: Ditto.\n+\t* g++.dg/cpp1y/digit-sep.C: Ditto.\n+\t* g++.dg/cpp1y/digit-sep-neg.C: Ditto.\n+\t* g++.dg/cpp1y/digit-sep-cxx11-neg.C: Ditto.\n+\t* g++.dg/cpp1y/fn-generic-member-ool.C: Ditto.\n+\t* g++.dg/cpp1y/lambda-deduce-mult.C: Ditto.\n+\t* g++.dg/cpp1y/lambda-generic.C: Ditto.\n+\t* g++.dg/cpp1y/lambda-generic-cfun.C: Ditto.\n+\t* g++.dg/cpp1y/lambda-generic-dep.C: Ditto.\n+\t* g++.dg/cpp1y/lambda-generic-mixed.C: Ditto.\n+\t* g++.dg/cpp1y/lambda-generic-udt.C: Ditto.\n+\t* g++.dg/cpp1y/lambda-generic-variadic.C: Ditto.\n+\t* g++.dg/cpp1y/lambda-generic-vla1.C: Ditto.\n+\t* g++.dg/cpp1y/lambda-generic-x.C: Ditto.\n+\t* g++.dg/cpp1y/lambda-generic-xcfun.C: Ditto.\n+\t* g++.dg/cpp1y/lambda-generic-xudt.C: Ditto.\n+\t* g++.dg/cpp1y/lambda-init.C: Ditto.\n+\t* g++.dg/cpp1y/lambda-init1.C: Ditto.\n+\t* g++.dg/cpp1y/lambda-init2.C: Ditto.\n+\t* g++.dg/cpp1y/lambda-init3.C: Ditto.\n+\t* g++.dg/cpp1y/lambda-init4.C: Ditto.\n+\t* g++.dg/cpp1y/lambda-init5.C: Ditto.\n+\t* g++.dg/cpp1y/lambda-init6.C: Ditto.\n+\t* g++.dg/cpp1y/lambda-init7.C: Ditto.\n+\t* g++.dg/cpp1y/lambda-init8.C: Ditto.\n+\t* g++.dg/cpp1y/lambda-init9.C: Ditto.\n+\t* g++.dg/cpp1y/mangle1.C: Ditto.\n+\t* g++.dg/cpp1y/pr57640.C: Ditto.\n+\t* g++.dg/cpp1y/pr57644.C: Ditto.\n+\t* g++.dg/cpp1y/pr58500.C: Ditto.\n+\t* g++.dg/cpp1y/pr58533.C: Ditto.\n+\t* g++.dg/cpp1y/pr58534.C: Ditto.\n+\t* g++.dg/cpp1y/pr58535.C: Ditto.\n+\t* g++.dg/cpp1y/pr58536.C: Ditto.\n+\t* g++.dg/cpp1y/pr58548.C: Ditto.\n+\t* g++.dg/cpp1y/pr58549.C: Ditto.\n+\t* g++.dg/cpp1y/pr58637.C: Ditto.\n+\t* g++.dg/cpp1y/pr58708.C: Ditto.\n+\t* g++.dg/cpp1y/pr59110.C: Ditto.\n+\t* g++.dg/cpp1y/pr59112.C: Ditto.\n+\t* g++.dg/cpp1y/pr59113.C: Ditto.\n+\t* g++.dg/cpp1y/pr59629.C: Ditto.\n+\t* g++.dg/cpp1y/pr59635.C: Ditto.\n+\t* g++.dg/cpp1y/pr59636.C: Ditto.\n+\t* g++.dg/cpp1y/pr59638.C: Ditto.\n+\t* g++.dg/cpp1y/pr59867.C: Ditto.\n+\t* g++.dg/cpp1y/pr60033.C: Ditto.\n+\t* g++.dg/cpp1y/pr60052.C: Ditto.\n+\t* g++.dg/cpp1y/pr60053.C: Ditto.\n+\t* g++.dg/cpp1y/pr60054.C: Ditto.\n+\t* g++.dg/cpp1y/pr60064.C: Ditto.\n+\t* g++.dg/cpp1y/pr60065.C: Ditto.\n+\t* g++.dg/cpp1y/pr60190.C: Ditto.\n+\t* g++.dg/cpp1y/pr60311.C: Ditto.\n+\t* g++.dg/cpp1y/pr60332.C: Ditto.\n+\t* g++.dg/cpp1y/pr60376.C: Ditto.\n+\t* g++.dg/cpp1y/pr60377.C: Ditto.\n+\t* g++.dg/cpp1y/pr60384.C: Ditto.\n+\t* g++.dg/cpp1y/pr60390.C: Ditto.\n+\t* g++.dg/cpp1y/pr60391.C: Ditto.\n+\t* g++.dg/cpp1y/pr60393.C: Ditto.\n+\t* g++.dg/cpp1y/pr60573.C: Ditto.\n+\t* g++.dg/cpp1y/pr60626.C: Ditto.\n+\t* g++.dg/cpp1y/pr60627.C: Ditto.\n+\t* g++.dg/cpp1y/regress1.C: Ditto.\n+\t* g++.dg/cpp1y/system-binary-constants-1.C: Ditto.\n+\t* g++.dg/cpp1y/udlit-char-template.C: Ditto.\n+\t* g++.dg/cpp1y/udlit-char-template-neg.C: Ditto.\n+\t* g++.dg/cpp1y/udlit-empty-string-neg.C: Ditto.\n+\t* g++.dg/cpp1y/udlit-enc-prefix-neg.C: Ditto.\n+\t* g++.dg/cpp1y/udlit-userdef-string.C: Ditto.\n+\t* g++.dg/cpp1y/var-templ1.C: Ditto.\n+\t* g++.dg/cpp1y/var-templ2.C: Ditto.\n+\t* g++.dg/cpp1y/var-templ3.C: Ditto.\n+\t* g++.dg/cpp1y/var-templ4.C: Ditto.\n+\t* g++.dg/cpp1y/var-templ5.C: Ditto.\n+\t* g++.dg/cpp1y/var-templ6.C: Ditto.\n+\t* g++.dg/cpp1y/var-templ7.C: Ditto.\n+\t* g++.dg/cpp1y/vla1.C: Ditto.\n+\t* g++.dg/cpp1y/vla2.C: Ditto.\n+\t* g++.dg/cpp1y/vla3.C: Ditto.\n+\t* g++.dg/cpp1y/vla4.C: Ditto.\n+\t* g++.dg/cpp1y/vla5.C: Ditto.\n+\t* g++.dg/cpp1y/vla8.C: Ditto.\n+\t* g++.dg/cpp1y/vla9.C: Ditto.\n+\t* g++.dg/cpp1y/vla10.C: Ditto.\n+\t* g++.dg/cpp1y/vla11.C: Ditto.\n+\t* g++.dg/cpp1y/vla12.C: Ditto.\n+\t* g++.dg/cpp1y/vla13.C: Ditto.\n+\t* g++.dg/cpp1y/vla-initlist1.C: Ditto.\n+\t* g++.dg/ext/vector23.C: Ditto.\n+\t* g++.dg/ext/vla11.C: Ditto.\n+\t* gcc/testsuite/g++.dg/ubsan/cxx1y-vla.C: Ditto.\n+\t* g++.dg/warn/Wvla-2.C: Ditto.\n+\t* g++.dg/debug/dwarf2/auto1.C: Ditto.\n+\t* g++.dg/cpp1z/typename-tmpl-tmpl-parm-ped-neg.C: Ditto.\n+\t* g++.dg/cpp1y/cplusplus.C: Check for exact date.\n+\t* g++.dg/cpp1y/system-binary-constants-1.C: Check C++14 instead of C++1y\n+\tin error message.\n+\t* g++.dg/system-binary-constants-1.C: Ditto.\n+\t* g++.dg/cpp1y/cplusplus_1y.C: New.\n+\t* g++.dg/cpp1z/cplusplus.C: New.\n+\t* lib/target-supports.exp:\n+\t(check_effective_target_c++1y*): Rename to check_effective_target_c++14*\n+\t(check_effective_target_c++11_only): Call check_effective_target_c++14;\n+\t(check_effective_target_c++11_down): Ditto.\n+\n 2014-08-22  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/62199"}, {"sha": "5bfed1be3cbc3351dce926a4701fc4adb0a93e40", "filename": "gcc/testsuite/g++.dg/cpp0x/auto3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto3.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -19,7 +19,7 @@ A<int> A1;\n // CWG issue 625\n A<auto> A2 = A1;\t\t// { dg-error \"\" }\n \n-auto foo() { }\t\t\t// { dg-error \"auto\" \"\" { target { ! c++1y } } }\n+auto foo() { }\t\t\t// { dg-error \"auto\" \"\" { target { ! c++14 } } }\n \n void bar(auto i)\t\t// { dg-error \"incomplete|auto\" }\n {"}, {"sha": "b1551e2e5805119fe88ec629fc7bcb3611e43808", "filename": "gcc/testsuite/g++.dg/cpp0x/auto41.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto41.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto41.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto41.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/58550\n // { dg-do compile { target c++11 } }\n \n-auto foo();\t\t\t// { dg-error \"auto\" \"\" { target { ! c++1y } } }\n-auto fp = foo;\t\t\t// { dg-error \"auto\" \"\" { target c++1y } }\n+auto foo();\t\t\t// { dg-error \"auto\" \"\" { target { ! c++14 } } }\n+auto fp = foo;\t\t\t// { dg-error \"auto\" \"\" { target c++14 } }"}, {"sha": "0c0f39f02c65c6f350e0e5a56a60a1f1aa89ee3e", "filename": "gcc/testsuite/g++.dg/cpp0x/auto9.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto9.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -15,13 +15,13 @@ const std::type_info &t2 = typeid (auto *);\t// { dg-error \"auto\" }\n \n struct A\n {\n-  operator auto ();\t\t\t\t// { dg-error \"auto\" \"\" { target { ! c++1y } } }\n-  operator auto *();\t\t\t\t// { dg-error \"auto\" \"\" { target { ! c++1y } } }\n+  operator auto ();\t\t\t\t// { dg-error \"auto\" \"\" { target { ! c++14 } } }\n+  operator auto *();\t\t\t\t// { dg-error \"auto\" \"\" { target { ! c++14 } } }\n };\n \n struct A2\n {\n-  operator auto () -> int;\t\t\t// { dg-error \"invalid use of\" \"\" { target { ! c++1y } } }\n+  operator auto () -> int;\t\t\t// { dg-error \"invalid use of\" \"\" { target { ! c++14 } } }\n   operator auto *() -> int;\t\t\t// { dg-error \"auto\" }\n };\n \n@@ -98,8 +98,8 @@ baz (int i, ...)\n template <typename T = auto> struct E {};\t// { dg-error \"invalid use of\" }\n template <class T = auto *> struct F {};\t// { dg-error \"invalid use of|expected\" }\n \n-auto fnlate () -> auto;\t\t\t\t// { dg-error \"invalid use of\" \"\" { target { ! c++1y } } }\n-auto fnlate2 () -> auto *;\t\t\t// { dg-error \"invalid use of|expected\" \"\" { target { ! c++1y } } }\n+auto fnlate () -> auto;\t\t\t\t// { dg-error \"invalid use of\" \"\" { target { ! c++14 } } }\n+auto fnlate2 () -> auto *;\t\t\t// { dg-error \"invalid use of|expected\" \"\" { target { ! c++14 } } }\n \n void\n badthrow () throw (auto)\t\t\t// { dg-error \"invalid use of\" }"}, {"sha": "b2f0ccd3d30afbcc6ff0fd9c44e3900f226367ce", "filename": "gcc/testsuite/g++.dg/cpp0x/cplusplus.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fcplusplus.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fcplusplus.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fcplusplus.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -0,0 +1,5 @@\n+// { dg-do compile { target c++11_only } }\n+\n+#if __cplusplus != 201103L\n+#error \"__cplusplus != 201103L\"\n+#endif"}, {"sha": "6ba2a6cc33301d06f8ad35ab9e5652bd6975a8cc", "filename": "gcc/testsuite/g++.dg/cpp0x/cplusplus_0x.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fcplusplus_0x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fcplusplus_0x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fcplusplus_0x.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+#if __cplusplus != 201103L\n+#error \"__cplusplus != 201103L\"\n+#endif"}, {"sha": "260ddd48f5e6dfe2113ee680834b7f8abc45b5d9", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist26.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist26.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,6 +1,6 @@\n // PR c++/42059\n // { dg-do compile { target c++11 } }\n-// { dg-options \"\" { target { ! c++1y } } }\n+// { dg-options \"\" { target { ! c++14 } } }\n \n void\n foo (int i)"}, {"sha": "62d8e8f86ec95cacec5c3d42b01ae4c7c7506015", "filename": "gcc/testsuite/g++.dg/cpp0x/pr59111.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr59111.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr59111.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr59111.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/59111\n // { dg-do compile { target c++11 } }\n \n-auto& foo();\t// { dg-error \"type specifier without trailing return type\" \"\" { target { ! c++1y } } }\n+auto& foo();\t// { dg-error \"type specifier without trailing return type\" \"\" { target { ! c++14 } } }\n int i = foo();\t// { dg-error \"\" }"}, {"sha": "bfc2712a74a2ac94a3590b3c27030e97ee736437", "filename": "gcc/testsuite/g++.dg/cpp0x/trailing2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing2.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -3,14 +3,14 @@\n // { dg-do compile { target c++11 } }\n \n auto f1 () -> int;\n-auto f2 ();\t\t// { dg-error \"without trailing return type\" \"\" { target { ! c++1y } } }\n+auto f2 ();\t\t// { dg-error \"without trailing return type\" \"\" { target { ! c++14 } } }\n int f3 () -> int;\t// { dg-error \"trailing return type\" }\n auto *f4 () -> int;\t// { dg-error \"trailing return type\" }\n \n struct A\n {\n   auto f5 () const -> int;\n-  auto f6 ();\t\t// { dg-error \"without trailing return type\" \"\" { target { ! c++1y } } }\n+  auto f6 ();\t\t// { dg-error \"without trailing return type\" \"\" { target { ! c++14 } } }\n   int f7 () -> int;\t// { dg-error \"trailing return type\" }\n   auto *f8 () -> int;\t// { dg-error \"trailing return type\" }\n };"}, {"sha": "ec6f232b85863bd9a4660efc7c870645c8a4394d", "filename": "gcc/testsuite/g++.dg/cpp1y/attr-deprecated.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fattr-deprecated.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fattr-deprecated.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fattr-deprecated.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n class [[deprecated]] A\n {"}, {"sha": "9d90a0f20224ac8fec1e0bb53e152ef63d724ea6", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-dtor1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-dtor1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-dtor1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-dtor1.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // DR 1586\n-// { dg-do run { target c++1y } }\n+// { dg-do run { target c++14 } }\n \n template <class T>\n void f (T* p)"}, {"sha": "0df09ab7ab174cd3a0e95149431c0c7a61f128b6", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn1.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n constexpr auto f() { return (char)42; }\n #define SA(X) static_assert ((X),#X)"}, {"sha": "8e08911465db66023a51a5ba2ce1aa58aeea3c61", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn10.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,6 +1,6 @@\n // A template declared with auto should be declared with auto in an\n // explicit instantiation or explicit specialization, too.\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n template <class T>\n auto f(T t) { return t; }"}, {"sha": "b6a4b324b7c08cb4d649f1c54a1cdb40dc47f715", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn11.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n auto f() { return; } \t\t// OK, return type is void\n auto* g() { return; }\t\t// { dg-error \"no value\" }"}, {"sha": "224f2789bcd8f98811c13f553ac9e3660b9a5671", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn12.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-final { scan-assembler \"_ZN1AIiEcvDaEv\" } }\n \n template <class T>"}, {"sha": "96b4b0c64aadd45a45e57270fe5bfd26a23a0967", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn13.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n struct A {\n   template <class T>"}, {"sha": "d82b21fc960fbc742ee65c87198ec413d9da9d0f", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn14.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/56177\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n auto f ();\n auto f () { return 33; }"}, {"sha": "ba9f3579f625054aa28a6d1becc6de0f018aa4ba", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn15.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-options \"-Wno-return-local-addr\" }\n \n template<class,class> struct same_type;"}, {"sha": "46177239ddce2ae5cd2b3e34d577658b1da28c25", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn16.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n template<class,class> struct ST;\n template<class T> struct ST<T,T> {};"}, {"sha": "1647107e54a0240222b2eb95cdb36b43b1a5d253", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn17.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn17.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { target c++1y } }\n+// { dg-do run { target c++14 } }\n \n int c;\n int d;"}, {"sha": "528d3d45ed7a0dee7d2cfd57e1a27257731f4955", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn18.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn18.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n struct A\n {"}, {"sha": "28cea1128669bddbf459e97d0d0c9987b48d6189", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn19.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn19.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n template <class T>\n auto f() { return T::i; }"}, {"sha": "0d39551ff2c75ac1b4229d9ce157c63be37f7197", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn2.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,3 +1,3 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n auto f() { return f(); }\t// { dg-error \"auto\" }"}, {"sha": "a516bcfb0e84cdad033b74816331c780fdc8ca1f", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn20.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn20.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n template <class T>\n auto f(T) { return 42; }"}, {"sha": "4db1c86c8d90432abd76ce1938c249067297ab17", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn21.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn21.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // N3638: decltype(auto) must stand alone\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n void f();\n decltype(auto) g1() { return &f; }"}, {"sha": "b16a7644c0f8146b4b9f61e7b7504e8c5c11c212", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn22.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn22.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n struct A\n {"}, {"sha": "896318ceb0a52f3feeb19158b9d64b62e599131c", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn23.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn23.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/58561\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-options \"-g\" }\n \n auto foo();"}, {"sha": "e9bbc735b4da77f06751c4261491e3ad502d90a2", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn24.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn24.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/60314\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-options \"-g\" }\n \n // fine"}, {"sha": "fdad4653560f7de3a37191472454dcb0584d3d4e", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn25.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn25.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/60574\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-require-effective-target lto }\n // { dg-options \"-flto\" }\n "}, {"sha": "4436e84bcd3e801ab7b9e0d507926df0cd0fc16e", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn3.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n bool b;\n auto f()"}, {"sha": "c2e1893523c378907788ca4f45f1fccde6bce4ad", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn4.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n template <class T>\n constexpr auto f(T t) { return t+1; }"}, {"sha": "17ce4d291249b9129dd192582a86ca60f270374a", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn5.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { target c++1y } }\n+// { dg-do run { target c++14 } }\n \n int i;\n auto& f() { return i; }"}, {"sha": "17ca6f22c50e361a82326ec924900b5390aa5fe6", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn6.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n template <class T, class U> struct ST;\n template <class T> struct ST<T,T> {};"}, {"sha": "3bef5987ac226c49d7c6eeada7f1e364e88fd218", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn7.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n auto f();\n "}, {"sha": "651c66cb297a539a446cc1dea26e60760860a56a", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn8.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n auto f() { return 42; }\t\t// { dg-message \"old declaration .auto\" }\n auto f();\t\t\t// OK"}, {"sha": "54cfa0de4e88700704a765b2c333fa9cf1a7825a", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn9.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-final { scan-assembler \"_Z1fIiERDaRKT_S1_\" } }\n \n template <class T>"}, {"sha": "0cb44599ff2c5b434447c118576b3105d0380975", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-mangle1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-mangle1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-mangle1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-mangle1.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // Mangling for decltype(auto)\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n void f();\n "}, {"sha": "e1973e5d9a441fa6ca84e7439e24aa173bcbfd1e", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-neg1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-neg1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-neg1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-neg1.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/60312\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n template<typename> struct A;\n "}, {"sha": "7c07d6c8b0315289ff499f073b66a3d2d75636cf", "filename": "gcc/testsuite/g++.dg/cpp1y/cplusplus.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fcplusplus.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fcplusplus.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fcplusplus.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14_only } }\n \n-#if __cplusplus <= 201103L\n-#error\n+#if __cplusplus != 201402L\n+#error \"__cplusplus != 201402L\"\n #endif"}, {"sha": "0e8f3eeb8ad72cb2db26d3a4025810e2c4d2613a", "filename": "gcc/testsuite/g++.dg/cpp1y/cplusplus_1y.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fcplusplus_1y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fcplusplus_1y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fcplusplus_1y.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++1y\" }\n+\n+#if __cplusplus != 201402L\n+#error \"__cplusplus != 201402L\"\n+#endif"}, {"sha": "411ba52b5238b6c4008f6f7541471347d529d1d2", "filename": "gcc/testsuite/g++.dg/cpp1y/digit-sep-cxx11-neg.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-cxx11-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-cxx11-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-cxx11-neg.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target { ! c++1y } } }\n+// { dg-do compile { target { ! c++14 } } }\n \n #define assert(E) if(!(E))__builtin_abort();\n "}, {"sha": "3d4c616ccb1c90e5866758d7d12ff7ac6fae8151", "filename": "gcc/testsuite/g++.dg/cpp1y/digit-sep-neg.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-neg.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n int\n main()"}, {"sha": "111e7a55d79dd52321e5e5d983958a6b44b4e76d", "filename": "gcc/testsuite/g++.dg/cpp1y/digit-sep.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n #define assert(E) if(!(E))__builtin_abort();\n "}, {"sha": "60ac52eff5bba671a3285ac8adf6b543e33c6edf", "filename": "gcc/testsuite/g++.dg/cpp1y/fn-generic-member-ool.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffn-generic-member-ool.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffn-generic-member-ool.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffn-generic-member-ool.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // Out-of-line generic member function definitions.\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-options \"\" }\n \n struct A {"}, {"sha": "f1c7ba9482594a69c2bb775a06f5df1d552b3d73", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-deduce-mult.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-deduce-mult.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-deduce-mult.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-deduce-mult.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,7 +1,7 @@\n // Testcase for an extension to allow return type deduction when the lambda\n // contains more than just a single return-statement.\n \n-// { dg-do run { target c++1y } }\n+// { dg-do run { target c++14 } }\n \n bool b;\n template <class T>"}, {"sha": "dd64d560cc01e9ee0810f322ddb676e659571cd2", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-cfun.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-cfun.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-cfun.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-cfun.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // Generic lambda conversion to function ptr test from N3690 5.1.2.6\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-options \"\" }\n \n void f1(int (*)(int)) { }"}, {"sha": "dbf8b70f862a76f6c775dad7ee7520d4613e1eb5", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-dep.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-dep.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-dep.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-dep.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // Generic lambda type dependence test part from N3690 5.1.2.12\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n void f(int, const int (&)[2] = {}) { } // #1\n void f(const int&, const int (&)[1]) { } // #2"}, {"sha": "59b5ccaa957bd87b84fd33392434dc855cf2a5c4", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-mixed.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-mixed.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-mixed.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-mixed.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // Mixed explicit and implicit generic lambda test.\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n int main()\n {"}, {"sha": "3597fa8053a4b0e5fba75fa645324f6b560d1751", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-udt.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-udt.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-udt.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-udt.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,6 +1,6 @@\n // Ensure that generic lambdas properly construct and destroy user types.\n // { dg-options \"-DUSE_AUTO_SYNTAX\" }\n-// { dg-do run { target c++1y } }\n+// { dg-do run { target c++14 } }\n \n int i = 3;\n "}, {"sha": "6d2d250f393c4155ee73a93c928961573462f857", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-variadic.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // Basic generic lambda test\n-// { dg-do run { target c++1y } }\n+// { dg-do run { target c++14 } }\n \n template <typename T, typename U> struct pair {};\n template <typename... T> struct tuple {};"}, {"sha": "90407da97c537db2fe3c0e020edbd1a47db04ebe", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-vla1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-vla1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-vla1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-vla1.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/59271\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n extern \"C\" int printf (const char *, ...);\n "}, {"sha": "5334091ef5f0e2e30d02b97698faebaf21d939d5", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-x.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-x.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // Explicit generic lambda test from N3690 5.1.2.5\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n #include <iostream>\n "}, {"sha": "d8f5ec15aed13159f5291e0807256d5b7e700d85", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-xcfun.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-xcfun.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-xcfun.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-xcfun.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // Explicit generic lambda conversion to function ptr test from N3690 5.1.2.6\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-options \"\" }\n \n void f1(int (*)(int)) { }"}, {"sha": "b3492dd85d3e4ea054b4a9d3f631317d14e4676e", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-xudt.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-xudt.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-xudt.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-xudt.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // Ensure that generic lambdas properly construct and destroy user types.\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-options \"-DUSE_EXPLICIT_TEMPLATE_SYNTAX\" }\n \n #include \"lambda-generic-udt.C\""}, {"sha": "9bd744c362c148ff429e338f19c654dcd8a6b2ae", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // Generic lambda test from N3690 5.1.2.5\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n #include <iostream>\n "}, {"sha": "b474893be8cee44cf63b718080bb57472a93ee5a", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-init.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n-// Test for the explicit initializer extension of C++1y\n-// { dg-do compile { target c++1y } }\n+// Test for the explicit initializer extension of C++14\n+// { dg-do compile { target c++14 } }\n \n int main()\n {"}, {"sha": "e9105fc12978a441042dd912b363bb4b5ec31f4b", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-init1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init1.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,6 +1,6 @@\n // N3648: capture init\n // { dg-options \"-w\" }\n-// { dg-do run { target c++1y } }\n+// { dg-do run { target c++14 } }\n \n int main()\n {"}, {"sha": "e4f31cfa2da248d04e886e90226a0dc87c10cba9", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-init2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init2.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // N3648: redundancy and capture init\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n int main()\n {"}, {"sha": "49ebde7ff6beda778a1e0aec5e743a9c3268f608", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-init3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init3.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,6 +1,6 @@\n // N3648: capture init at non-block scope\n // { dg-options \"-w\" }\n-// { dg-do run { target c++1y } }\n+// { dg-do run { target c++14 } }\n \n int i = 42;\n int j = [x=i]{ return x; }();"}, {"sha": "787ffc0476d6d8e96409703802d20b137a58966a", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-init4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init4.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // N3648: capture init example from paper\n-// { dg-do run { target c++1y } }\n+// { dg-do run { target c++14 } }\n \n int x = 4;\n auto y = [&r = x, x = x+1]()->int {"}, {"sha": "5976de0f0732ca18c72c01b35978695dd94e7cb2", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-init5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init5.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // Test for paren and brace initializers\n-// { dg-do run { target c++1y } }\n+// { dg-do run { target c++14 } }\n \n #include <initializer_list>\n "}, {"sha": "d6c1587487d44fd8a1a4ea19cb703b2df488ea90", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-init6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init6.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // Test that captures are not named in the closure type.\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n int main()\n {"}, {"sha": "c943c48dfb039ac30da7ce120f03e5b81ad61030", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-init7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init7.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/59349\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n int foo () {\n   [bar()]{};\t\t\t// { dg-error \"empty initializer\" }"}, {"sha": "21933bd3e1b1e2acce7fffec5514a292a4d30cd6", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-init8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init8.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // DR1760: \"no additional copy and destruction is performed\"\n-// { dg-do run { target c++1y } }\n+// { dg-do run { target c++14 } }\n \n #include <cassert>\n "}, {"sha": "a86f03e0f1d592f049b6b36de81775fd2aea67ac", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-init9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-init9.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n void f()\n {"}, {"sha": "092b2fa76840b967a0aeabb48ecee16e21356f07", "filename": "gcc/testsuite/g++.dg/cpp1y/mangle1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fmangle1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fmangle1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fmangle1.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // Test that the parens don't show up in the mangling\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-options \"-Wno-return-local-addr\" }\n // { dg-final { scan-assembler \"_Z1gI1AEDTdtfp_1iET_\" } }\n "}, {"sha": "0c76a08aecc15324ec5bab1dbe0123f9203d0a94", "filename": "gcc/testsuite/g++.dg/cpp1y/pr57640.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr57640.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr57640.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr57640.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n #include <chrono>\n "}, {"sha": "ec595a21b7d1c1d0a0ca731f7831f0b9dada03dd", "filename": "gcc/testsuite/g++.dg/cpp1y/pr57644.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr57644.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr57644.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr57644.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n struct Foo\n {"}, {"sha": "bb68cbc1999d85618bf9acb7aa2c80bbdd657493", "filename": "gcc/testsuite/g++.dg/cpp1y/pr58500.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58500.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58500.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58500.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/58500\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-options \"\" }\n \n struct A {};"}, {"sha": "c8a93d3388dc0b9623311069bdad0fac60f40d18", "filename": "gcc/testsuite/g++.dg/cpp1y/pr58533.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58533.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58533.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58533.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/58533\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n void foo()\n {"}, {"sha": "e38e1f3f66795cf6e24a7a42e7d750c7538ab23b", "filename": "gcc/testsuite/g++.dg/cpp1y/pr58534.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58534.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58534.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58534.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/58534\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-options \"\" }\n \n template<typename> void foo(const auto&) {}"}, {"sha": "b36be8f4a452f1b36c5ecaf474569285eb218b56", "filename": "gcc/testsuite/g++.dg/cpp1y/pr58535.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58535.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58535.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58535.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/58535\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-options \"\" }\n \n struct A"}, {"sha": "a4b6f553efdfe53180ec70bb9b9e4fe2b1c7cf4c", "filename": "gcc/testsuite/g++.dg/cpp1y/pr58536.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58536.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58536.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58536.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/58536\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-options \"\" }\n \n struct A"}, {"sha": "6a78de46c3f11e605e034d3c4443dbcb2a786db8", "filename": "gcc/testsuite/g++.dg/cpp1y/pr58548.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58548.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58548.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58548.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/58548\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-options \"\" }\n \n void foo(auto)"}, {"sha": "2f76399d8dd22787ac7c270fc89962bf0a007321", "filename": "gcc/testsuite/g++.dg/cpp1y/pr58549.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58549.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58549.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58549.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/58549\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-options \"\" }\n \n void foo(auto)"}, {"sha": "caa60af6306d3ea3680c52437708fc534cb7bdd1", "filename": "gcc/testsuite/g++.dg/cpp1y/pr58637.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58637.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58637.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58637.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n // PR c++/58637\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n template<> void foo(auto); // { dg-error \"auto|not a template\" }"}, {"sha": "6fc374f1e56a55035121142326f194a776f5b849", "filename": "gcc/testsuite/g++.dg/cpp1y/pr58708.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58708.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58708.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58708.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { target c++1y } }\n+// { dg-do run { target c++14 } }\n \n template<typename, typename>\n   struct is_same"}, {"sha": "dba9cea0dc2f884d1f5e5e180056c9ea7939ace4", "filename": "gcc/testsuite/g++.dg/cpp1y/pr59110.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59110.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59110.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59110.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n // PR c++/59110\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n int i = *(auto*)0; // { dg-error \"\" }"}, {"sha": "fc67e3820d1eaa2a0d68af44ae00a589a53717e1", "filename": "gcc/testsuite/g++.dg/cpp1y/pr59112.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59112.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59112.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59112.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/59112\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n void foo()\n {"}, {"sha": "3d7dd61ac94cb1f8f645d3f8e805e68ec6a790e2", "filename": "gcc/testsuite/g++.dg/cpp1y/pr59113.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59113.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59113.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59113.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/59113\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n void foo()\n {"}, {"sha": "f66e64eb6a2efcdd491d3e0df2a4128b5e8fd39a", "filename": "gcc/testsuite/g++.dg/cpp1y/pr59629.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59629.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59629.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59629.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n // PR c++/59629\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n void foo(int i = []{ auto 0; }()); // { dg-error \"expected|could not convert\" }"}, {"sha": "9af99397dc7626f372ae08ba097007744ab4fbd0", "filename": "gcc/testsuite/g++.dg/cpp1y/pr59635.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59635.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59635.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59635.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/59635\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n auto f = [] (auto, ...) { return 0; };\n "}, {"sha": "847cecdf5a5b9bc85d1d7d7c0ede5105a47eef0e", "filename": "gcc/testsuite/g++.dg/cpp1y/pr59636.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59636.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59636.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59636.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n // PR c++/59636\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n auto f = []() { return []<>() {}; };  // { dg-error \"expected identifier\" }"}, {"sha": "a34b65718654e206ee65303f9b8e489fbd817089", "filename": "gcc/testsuite/g++.dg/cpp1y/pr59638.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59638.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59638.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59638.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/59638\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-options \"\" }\n \n void (*a)(auto);         // { dg-error \"\" }"}, {"sha": "2c4f1d046bf30099e74efa85b7b01d9643975f62", "filename": "gcc/testsuite/g++.dg/cpp1y/pr59867.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59867.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59867.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59867.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/59867\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n using namespace std;\n "}, {"sha": "c083facb43afae66fed245047fd2948e2b6ff6ed", "filename": "gcc/testsuite/g++.dg/cpp1y/pr60033.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60033.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60033.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60033.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/60033\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n template <typename... T>\n auto f(T&&... ts)"}, {"sha": "25d20acdf84a1159b19bbf98ec033cdaa4036b22", "filename": "gcc/testsuite/g++.dg/cpp1y/pr60052.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60052.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60052.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60052.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/60052\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-options \"\" }\n \n struct A"}, {"sha": "a8f5ba1ca3f4007ce7227ab3c9846f7c31820687", "filename": "gcc/testsuite/g++.dg/cpp1y/pr60053.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60053.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60053.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60053.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/60053\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-options \"\" }\n \n struct A"}, {"sha": "f51120f6425149bbe824ca596b6b0302c5e950aa", "filename": "gcc/testsuite/g++.dg/cpp1y/pr60054.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60054.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60054.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60054.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/60054\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n template<typename T> T fooA(T);\n template<typename T> decltype(T{}) fooB(T);"}, {"sha": "add3f05cbbd6d9a8c8c5bd8b21008e542c9ca9dc", "filename": "gcc/testsuite/g++.dg/cpp1y/pr60064.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60064.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60064.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60064.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/60064\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-options \"\" }\n \n class A"}, {"sha": "56505b7bc04068b1aac3c4d4c35fefc9ed44f516", "filename": "gcc/testsuite/g++.dg/cpp1y/pr60065.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60065.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60065.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60065.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/60065\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-options \"\" }\n \n template <int> void foo(auto... x);"}, {"sha": "9e439ceb9eae6fa2f1b3b7b411451e89e9cf0014", "filename": "gcc/testsuite/g++.dg/cpp1y/pr60190.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60190.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60190.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60190.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n // PR c++/60190\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n auto f = []<int>() -> int() {}; // { dg-error \"returning a function|expected\" }"}, {"sha": "6d32831f86644c0398d1b6ac66f95ebed3beb4b4", "filename": "gcc/testsuite/g++.dg/cpp1y/pr60311.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60311.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60311.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60311.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/60311\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n template<void(*)(auto)> struct A {}; // { dg-error \"auto\" }\n "}, {"sha": "e75ab8584e3337c8e72269abd940b2e8f2157ac2", "filename": "gcc/testsuite/g++.dg/cpp1y/pr60332.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60332.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60332.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60332.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/60332\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n void foo();\n "}, {"sha": "9585dd2ca7701f0cc9720c17fb054ab0411bcaf7", "filename": "gcc/testsuite/g++.dg/cpp1y/pr60376.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60376.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60376.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60376.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/60376\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n struct A\n {"}, {"sha": "ab35ba9b1729f319ec8ac7f03b25dc5cdeb65bd6", "filename": "gcc/testsuite/g++.dg/cpp1y/pr60377.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60377.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60377.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60377.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/60377\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-options \"\" }\n \n void foo(auto, void (f*)()); // { dg-error \"expected\" }"}, {"sha": "44806cd69e629f96614a0cba3618ea5d9c13395d", "filename": "gcc/testsuite/g++.dg/cpp1y/pr60384.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60384.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60384.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60384.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/60384\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n template<typename> int foo();\n "}, {"sha": "38d0e4bd6cd333b7c57a14697fbcbe1e8058b357", "filename": "gcc/testsuite/g++.dg/cpp1y/pr60390.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60390.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60390.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60390.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/60390\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-options \"\" }\n \n struct A"}, {"sha": "7e3570498bcd650792224240b4d9795afd19bdc1", "filename": "gcc/testsuite/g++.dg/cpp1y/pr60391.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60391.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60391.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60391.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/60391\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-options \"\" }\n \n namespace N"}, {"sha": "27fe2b722960f7ab424b541e948778f74ac4d1e4", "filename": "gcc/testsuite/g++.dg/cpp1y/pr60393.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60393.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60393.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60393.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/60393\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-options \"\" }\n \n void (*f)(auto) + 0; // { dg-error \"expected\" }"}, {"sha": "da730f80f06002f3f8eecec8171f31fb13fcbc1f", "filename": "gcc/testsuite/g++.dg/cpp1y/pr60573.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60573.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60573.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60573.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/60573\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-options \"\" }\n \n struct A"}, {"sha": "686db7306b932a69691b0414a9737047a3756d8a", "filename": "gcc/testsuite/g++.dg/cpp1y/pr60626.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60626.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60626.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60626.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/60626\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-options \"\" }\n \n struct A {};"}, {"sha": "64eb635922103784ef24fa504b8a14a6a4f4f5f3", "filename": "gcc/testsuite/g++.dg/cpp1y/pr60627.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60627.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60627.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60627.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/60627\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-options \"\" }\n \n template<typename T> void foo(T) {}"}, {"sha": "d4566d0a216fc2bb00dce0244258b0db786619ff", "filename": "gcc/testsuite/g++.dg/cpp1y/regress1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fregress1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fregress1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fregress1.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/60409\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n struct A\n {"}, {"sha": "ec2d5858ea82899832968fe6f5065269074e2200", "filename": "gcc/testsuite/g++.dg/cpp1y/system-binary-constants-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fsystem-binary-constants-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fsystem-binary-constants-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fsystem-binary-constants-1.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // Origin: Dodji Seketeli <dodji@redhat.com>\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n #include \"../system-binary-constants-1.h\"\n \n@@ -9,5 +9,5 @@ foo (void)\n #if BINARY_INT_CONSTANT_IN_SYSTEM_HEADER\n   return 23;\n #endif\n-  return 0b1101; // { dg-bogus \"binary constants are a C..1y feature or GCC extension\" }\n+  return 0b1101; // { dg-bogus \"binary constants are a C..14 feature or GCC extension\" }\n }"}, {"sha": "e77ea45890d52f67e4f95d0d18b3c070ea3ad973", "filename": "gcc/testsuite/g++.dg/cpp1y/udlit-char-template-neg.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template-neg.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target { c++11 && { ! c++1y } } } }\n+// { dg-do compile { target { c++11 && { ! c++14 } } } }\n \n template<typename CharT, CharT... String>\n   int"}, {"sha": "989b9babd1f61052494552ca01727fd2b5c70d8d", "filename": "gcc/testsuite/g++.dg/cpp1y/udlit-char-template.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n template<typename CharT, CharT... String>\n   int"}, {"sha": "1b7f4fa2559e427a500c108b5b7a0ab0fc975044", "filename": "gcc/testsuite/g++.dg/cpp1y/udlit-empty-string-neg.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-empty-string-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-empty-string-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-empty-string-neg.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n int\n operator \"*\"_s(unsigned long long) // { dg-error \"expected empty string after 'operator'\" }"}, {"sha": "039ab2fb45178b7ddcf446c37a02f60519bd2438", "filename": "gcc/testsuite/g++.dg/cpp1y/udlit-enc-prefix-neg.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-enc-prefix-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-enc-prefix-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-enc-prefix-neg.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n int\n operator L\"\"_Ls(unsigned long long) // { dg-error \"invalid encoding prefix in literal operator\" }"}, {"sha": "cad4a1dfc6642021dfcb9b650c79a0be779b383c", "filename": "gcc/testsuite/g++.dg/cpp1y/udlit-userdef-string.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-userdef-string.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-userdef-string.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-userdef-string.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n #include \"complex_literals.h\"\n "}, {"sha": "856198a109740bcc08d03d84368a2845ee7beb3f", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ1.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ1.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,4 @@\n-// { dg-do run }\n-// { dg-options \"-std=c++1y\" }\n+// { dg-do run { target c++14 } }\n \n template<int A, int B>\n   struct S1"}, {"sha": "c734f413145281fedd9dd043bae2499716cebaea", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ2.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ2.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,4 @@\n-// { dg-do compile }\n-// { dg-options \"-std=c++1y\" }\n+// { dg-do compile { target c++14 } }\n \n // Template variables and static member variables of template classes are\n // often confused."}, {"sha": "52ef6688a73974ad16bb36f59fc20f175e1cf93c", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ3.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ3.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,4 @@\n-// { dg-do run }\n-// { dg-options \"-std=c++1y\" }\n+// { dg-do run { target c++14 } }\n \n template<typename T>\n  constexpr int var = sizeof (T);"}, {"sha": "4ad7be68c5cfa74befd6fc9e642ea578cd0788a9", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ4.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ4.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,4 @@\n-// { dg-do run }\n-// { dg-options \"-std=c++1y\" }\n+// { dg-do run { target c++14 } }\n \n template<typename T>\n   constexpr int var = sizeof (T);"}, {"sha": "a10f3888b6e7f5bce5f6ece7420cd9acf267a4cd", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ5.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ5.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,4 @@\n-// { dg-do run }\n-// { dg-options \"-std=c++1y\" }\n+// { dg-do run { target c++14 } }\n \n template<int A, int B>\n   struct S1"}, {"sha": "23ebfbe74f813350f0e9cf3b62658a30cfcfe8cc", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ6.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1y\" }\n+// { dg-do compile { target c++14 } }\n \n template<typename T>\n   constexpr bool Class = __is_class(T);"}, {"sha": "07453af796c86c83f1161e854ed7733231a028c7", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ7.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n template <class T> T var = 0;\n "}, {"sha": "7b7aa9265325f340f07e8c88f6719f533a5f6f31", "filename": "gcc/testsuite/g++.dg/cpp1y/vla-initlist1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla-initlist1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla-initlist1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla-initlist1.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { target c++1y } }\n+// { dg-do run { target c++14 } }\n \n #include <initializer_list>\n "}, {"sha": "cea17ef73754547f6942cdfb0f349def74548de9", "filename": "gcc/testsuite/g++.dg/cpp1y/vla1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla1.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n #include <typeinfo>\n "}, {"sha": "38fb145ae20f244c34ab93b1d115cd167be6cbdf", "filename": "gcc/testsuite/g++.dg/cpp1y/vla10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla10.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/57402\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n int i = 2;\n "}, {"sha": "ca2263528794c00204be622fb91c379a5b5342a7", "filename": "gcc/testsuite/g++.dg/cpp1y/vla11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla11.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/60251\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n void foo(int n)\n {"}, {"sha": "7fc9987367cf16eab34fa4d80d0c4a5b30d3f067", "filename": "gcc/testsuite/g++.dg/cpp1y/vla12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla12.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/60250\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n template<typename> void foo()\n {"}, {"sha": "f5dab26c62158544e2d62f0b2c405d17601b3fe9", "filename": "gcc/testsuite/g++.dg/cpp1y/vla13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla13.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/60227\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n void foo(int n)\n {"}, {"sha": "c9a452d9512a5b8c558ab65fdb7e57952e1496fc", "filename": "gcc/testsuite/g++.dg/cpp1y/vla2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla2.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // N3639 allows initialization and capture of VLAs\n-// { dg-do run { target c++1y } }\n+// { dg-do run { target c++14 } }\n \n void f(int n)\n {"}, {"sha": "a3d8adb05c95149de8258dc5b6eff06e7ae6a4cf", "filename": "gcc/testsuite/g++.dg/cpp1y/vla3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla3.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // Test for throwing bad_array_length on invalid array length\n-// { dg-do run { target c++1y } }\n+// { dg-do run { target c++14 } }\n \n #include <new>\n "}, {"sha": "29df98c7ce45f6af89f02e5c76fc9bbdc86e5fdc", "filename": "gcc/testsuite/g++.dg/cpp1y/vla4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla4.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // Test for range-based for with VLAs.\n-// { dg-do run { target c++1y } }\n+// { dg-do run { target c++14 } }\n \n #include <new>\n "}, {"sha": "cc67a75b5dc1e1759285877b9708f1b6a9af3491", "filename": "gcc/testsuite/g++.dg/cpp1y/vla5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla5.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/55149\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n void test(int n) {\n   int r[n];"}, {"sha": "2c821e14c46b23c9c162c47c1a29569750d5b25c", "filename": "gcc/testsuite/g++.dg/cpp1y/vla8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla8.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/55149\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n template<unsigned int TA>\n  struct SA"}, {"sha": "eb58e1a01f827bbd28ff9a0557e217bd7bbb95e7", "filename": "gcc/testsuite/g++.dg/cpp1y/vla9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla9.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/57408\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n \n template<typename Callable>\n   struct Impl"}, {"sha": "e4b84fd64698b45813c38d4f73a2efcfbc1460a5", "filename": "gcc/testsuite/g++.dg/cpp1z/cplusplus.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fcplusplus.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fcplusplus.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fcplusplus.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++1z\" }\n+\n+#if __cplusplus <= 201402L\n+#error \"__cplusplus <= 201402L\"\n+#endif"}, {"sha": "abd118b633ae0ea159c35e9d374c3af8494ff81a", "filename": "gcc/testsuite/g++.dg/cpp1z/typename-tmpl-tmpl-parm-ped-neg.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ftypename-tmpl-tmpl-parm-ped-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ftypename-tmpl-tmpl-parm-ped-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ftypename-tmpl-tmpl-parm-ped-neg.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++1y_down } }\n+// { dg-do compile { target c++14_down } }\n // { dg-options \"-pedantic\" }\n \n template<typename T>"}, {"sha": "e38334bd23bbefd3bcd690253ed43f5314a57cac", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/auto1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fauto1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fauto1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fauto1.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n // PR c++/53756\n-// { dg-do compile { target c++1y } }\n+// { dg-do compile { target c++14 } }\n // { dg-options \"-g -dA -fno-debug-types-section\" }\n // We're looking for something like\n "}, {"sha": "a50b2860e8b8e76c45c5faed9d14da34666386f8", "filename": "gcc/testsuite/g++.dg/ext/vector23.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector23.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target c++1y } } */\n+/* { dg-do compile { target c++14 } } */\n /* { dg-options \"-Wsign-conversion\" } */\n // Ignore warning on some powerpc-linux configurations.\n // { dg-prune-output \"non-standard ABI extension\" }"}, {"sha": "c283a187d01bf75b3b21fab21b22d66076e97f9f", "filename": "gcc/testsuite/g++.dg/ext/vla11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla11.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,6 +1,6 @@\n // Test that auto works with VLAs.\n // { dg-do compile { target c++11 } }\n-// { dg-options \"\" { target { ! c++1y } } }\n+// { dg-options \"\" { target { ! c++14 } } }\n \n void bar(int n)\n {"}, {"sha": "614f9265d41223658a579c0e10ab3fb0a3815be4", "filename": "gcc/testsuite/g++.dg/system-binary-constants-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fsystem-binary-constants-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fsystem-binary-constants-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fsystem-binary-constants-1.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -14,5 +14,5 @@ foo (void)\n \t\t\t\t\t    warning.  */\n   return 23;\n #endif\n-  return 0b1101; /* { dg-warning \"binary constants are a C..1y feature or GCC extension\" } */\n+  return 0b1101; /* { dg-warning \"binary constants are a C..14 feature or GCC extension\" } */\n }"}, {"sha": "c44ad787c96f60cfa62542e275dcaf2958c410f9", "filename": "gcc/testsuite/g++.dg/ubsan/cxx1y-vla.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx1y-vla.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx1y-vla.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx1y-vla.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=vla-bound -Wall -Wno-unused-variable -std=c++1y\" } */\n+/* { dg-options \"-fsanitize=vla-bound -Wall -Wno-unused-variable -std=c++14\" } */\n /* { dg-shouldfail \"ubsan\" } */\n \n int"}, {"sha": "eacd21237540a583323ed1a4e09a29b939b1ec76", "filename": "gcc/testsuite/g++.dg/warn/Wvla-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvla-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvla-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvla-2.C?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { ! c++1y } } } */\n+/* { dg-do compile { target { ! c++14 } } } */\n /* { dg-options \"-pedantic-errors -Wvla\" } */\n \n void func (int i)"}, {"sha": "f96d78281b4565fba5d775f320a4aaeb907c85f4", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -5683,7 +5683,7 @@ proc check_effective_target_c++ { } {\n }\n \n # Check whether the current active language standard supports the features\n-# of C++11/C++1y by checking for the presence of one of the -std\n+# of C++11/C++14 by checking for the presence of one of the -std\n # flags.  This assumes that the default for the compiler is C++98, and that\n # there will never be multiple -std= arguments on the command line.\n proc check_effective_target_c++11_only { } {\n@@ -5696,28 +5696,29 @@ proc check_effective_target_c++11 { } {\n     if [check_effective_target_c++11_only] {\n \treturn 1\n     }\n-    return [check_effective_target_c++1y]\n+    return [check_effective_target_c++14]\n }\n proc check_effective_target_c++11_down { } {\n     if ![check_effective_target_c++] {\n \treturn 0\n     }\n-    return ![check_effective_target_c++1y]\n+    return ![check_effective_target_c++14]\n }\n \n-proc check_effective_target_c++1y_only { } {\n+proc check_effective_target_c++14_only { } {\n     if ![check_effective_target_c++] {\n \treturn 0\n     }\n     return [check-flags { { } { } { -std=c++1y -std=gnu++1y -std=c++14 -std=gnu++14 } }]\n }\n-proc check_effective_target_c++1y { } {\n-    if [check_effective_target_c++1y_only] {\n+\n+proc check_effective_target_c++14 { } {\n+    if [check_effective_target_c++14_only] {\n \treturn 1\n     }\n     return [check_effective_target_c++1z]\n }\n-proc check_effective_target_c++1y_down { } {\n+proc check_effective_target_c++14_down { } {\n     if ![check_effective_target_c++] {\n \treturn 0\n     }"}, {"sha": "1b4e31d6be20918761bed284d4d2dd023ada340c", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -1,3 +1,14 @@\n+2014-08-23  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\t* include/cpplib.h (enum c_lang): Add CLK_GNUCXX1Z, CLK_CXX1Z;\n+\tRename CLK_GNUCXX1Y, CLK_CXX1Y to CLK_GNUCXX14, CLK_CXX14;\n+\t* init.c (struct lang_flags lang_defaults): Add column for trigraphs;\n+\tAdd rows for CLK_GNUCXX1Z, CLK_CXX1Z; (cpp_set_lang): Set trigraphs;\n+\t(cpp_init_builtins): Set __cplusplus to 201402L for C++14;\n+\tSet __cplusplus to 201500L for C++17.\n+\t* expr.c (cpp_classify_number): Change C++1y to C++14 in binary\n+\tconstants error message.\n+\n 2014-08-20  Marek Polacek  <polacek@redhat.com>\n \n \t* include/cpplib.h (cpp_options): Use signed char."}, {"sha": "07f1b2fb419aec7b44825f6ba4c0626856bf97cc", "filename": "libcpp/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -687,7 +687,7 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token,\n       && CPP_PEDANTIC (pfile))\n     cpp_error_with_line (pfile, CPP_DL_PEDWARN, virtual_location, 0,\n \t\t\t CPP_OPTION (pfile, cplusplus)\n-\t\t\t ? \"binary constants are a C++1y feature \"\n+\t\t\t ? \"binary constants are a C++14 feature \"\n \t\t\t   \"or GCC extension\"\n \t\t\t : \"binary constants are a GCC extension\");\n "}, {"sha": "28fc0f8965f13dc08428bfc2920682e28a55ce27", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -166,7 +166,7 @@ enum cpp_ttype\n enum c_lang {CLK_GNUC89 = 0, CLK_GNUC99, CLK_GNUC11,\n \t     CLK_STDC89, CLK_STDC94, CLK_STDC99, CLK_STDC11,\n \t     CLK_GNUCXX, CLK_CXX98, CLK_GNUCXX11, CLK_CXX11,\n-\t     CLK_GNUCXX1Y, CLK_CXX1Y, CLK_ASM};\n+\t     CLK_GNUCXX14, CLK_CXX14, CLK_GNUCXX1Z, CLK_CXX1Z, CLK_ASM};\n \n /* Payload of a NUMBER, STRING, CHAR or COMMENT token.  */\n struct GTY(()) cpp_string {"}, {"sha": "0d2f73718bec0ed0d36cfc786567a8557893abe4", "filename": "libcpp/init.c", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4276ba523aa5f5b98d700240e85c164a09415d3/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4276ba523aa5f5b98d700240e85c164a09415d3/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=e4276ba523aa5f5b98d700240e85c164a09415d3", "patch": "@@ -90,26 +90,29 @@ struct lang_flags\n   char user_literals;\n   char binary_constants;\n   char digit_separators;\n+  char trigraphs;\n };\n \n static const struct lang_flags lang_defaults[] =\n-{ /*              c99 c++ xnum xid c11 std  //   digr ulit rlit udlit bin_cst dig_sep */\n-  /* GNUC89   */  { 0,  0,  1,   0,  0,  0,   1,   1,   0,   0,   0,    0,      0 },\n-  /* GNUC99   */  { 1,  0,  1,   0,  0,  0,   1,   1,   1,   1,   0,    0,      0 },\n-  /* GNUC11   */  { 1,  0,  1,   0,  1,  0,   1,   1,   1,   1,   0,    0,      0 },\n-  /* STDC89   */  { 0,  0,  0,   0,  0,  1,   0,   0,   0,   0,   0,    0,      0 },\n-  /* STDC94   */  { 0,  0,  0,   0,  0,  1,   0,   1,   0,   0,   0,    0,      0 },\n-  /* STDC99   */  { 1,  0,  1,   0,  0,  1,   1,   1,   0,   0,   0,    0,      0 },\n-  /* STDC11   */  { 1,  0,  1,   0,  1,  1,   1,   1,   1,   0,   0,    0,      0 },\n-  /* GNUCXX   */  { 0,  1,  1,   0,  0,  0,   1,   1,   0,   0,   0,    0,      0 },\n-  /* CXX98    */  { 0,  1,  1,   0,  0,  1,   1,   1,   0,   0,   0,    0,      0 },\n-  /* GNUCXX11 */  { 1,  1,  1,   0,  1,  0,   1,   1,   1,   1,   1,    0,      0 },\n-  /* CXX11    */  { 1,  1,  1,   0,  1,  1,   1,   1,   1,   1,   1,    0,      0 },\n-  /* GNUCXX1Y */  { 1,  1,  1,   0,  1,  0,   1,   1,   1,   1,   1,    1,      1 },\n-  /* CXX1Y    */  { 1,  1,  1,   0,  1,  1,   1,   1,   1,   1,   1,    1,      1 },\n-  /* ASM      */  { 0,  0,  1,   0,  0,  0,   1,   0,   0,   0,   0,    0,      0 }\n+{ /*              c99 c++ xnum xid c11 std // digr ulit rlit udlit bincst digsep trig */\n+  /* GNUC89   */  { 0,  0,  1,  0,  0,  0,  1,  1,  0,   0,   0,    0,     0,     0 },\n+  /* GNUC99   */  { 1,  0,  1,  0,  0,  0,  1,  1,  1,   1,   0,    0,     0,     0 },\n+  /* GNUC11   */  { 1,  0,  1,  0,  1,  0,  1,  1,  1,   1,   0,    0,     0,     0 },\n+  /* STDC89   */  { 0,  0,  0,  0,  0,  1,  0,  0,  0,   0,   0,    0,     0,     1 },\n+  /* STDC94   */  { 0,  0,  0,  0,  0,  1,  0,  1,  0,   0,   0,    0,     0,     1 },\n+  /* STDC99   */  { 1,  0,  1,  0,  0,  1,  1,  1,  0,   0,   0,    0,     0,     1 },\n+  /* STDC11   */  { 1,  0,  1,  0,  1,  1,  1,  1,  1,   0,   0,    0,     0,     1 },\n+  /* GNUCXX   */  { 0,  1,  1,  0,  0,  0,  1,  1,  0,   0,   0,    0,     0,     0 },\n+  /* CXX98    */  { 0,  1,  1,  0,  0,  1,  1,  1,  0,   0,   0,    0,     0,     1 },\n+  /* GNUCXX11 */  { 1,  1,  1,  0,  1,  0,  1,  1,  1,   1,   1,    0,     0,     0 },\n+  /* CXX11    */  { 1,  1,  1,  0,  1,  1,  1,  1,  1,   1,   1,    0,     0,     1 },\n+  /* GNUCXX14 */  { 1,  1,  1,  0,  1,  0,  1,  1,  1,   1,   1,    1,     1,     0 },\n+  /* CXX14    */  { 1,  1,  1,  0,  1,  1,  1,  1,  1,   1,   1,    1,     1,     1 },\n+  /* GNUCXX1Z */  { 1,  1,  1,  0,  1,  0,  1,  1,  1,   1,   1,    1,     1,     0 },\n+  /* CXX1Z    */  { 1,  1,  1,  0,  1,  1,  1,  1,  1,   1,   1,    1,     1,     0 },\n+  /* ASM      */  { 0,  0,  1,  0,  0,  0,  1,  0,  0,   0,   0,    0,     0,     0 }\n   /* xid should be 1 for GNUC99, STDC99, GNUCXX, CXX98, GNUCXX11, CXX11,\n-     GNUCXX1Y, and CXX1Y when no longer experimental (when all uses of\n+     GNUCXX14, and CXX14 when no longer experimental (when all uses of\n      identifiers in the compiler have been audited for correct handling\n      of extended identifiers).  */\n };\n@@ -128,14 +131,14 @@ cpp_set_lang (cpp_reader *pfile, enum c_lang lang)\n   CPP_OPTION (pfile, extended_identifiers)\t = l->extended_identifiers;\n   CPP_OPTION (pfile, c11_identifiers)\t\t = l->c11_identifiers;\n   CPP_OPTION (pfile, std)\t\t\t = l->std;\n-  CPP_OPTION (pfile, trigraphs)\t\t\t = l->std;\n   CPP_OPTION (pfile, cplusplus_comments)\t = l->cplusplus_comments;\n   CPP_OPTION (pfile, digraphs)\t\t\t = l->digraphs;\n   CPP_OPTION (pfile, uliterals)\t\t\t = l->uliterals;\n   CPP_OPTION (pfile, rliterals)\t\t\t = l->rliterals;\n   CPP_OPTION (pfile, user_literals)\t\t = l->user_literals;\n   CPP_OPTION (pfile, binary_constants)\t\t = l->binary_constants;\n   CPP_OPTION (pfile, digit_separators)\t\t = l->digit_separators;\n+  CPP_OPTION (pfile, trigraphs)\t\t\t = l->trigraphs;\n }\n \n /* Initialize library global state.  */\n@@ -489,9 +492,12 @@ cpp_init_builtins (cpp_reader *pfile, int hosted)\n \n   if (CPP_OPTION (pfile, cplusplus))\n     {\n-      if (CPP_OPTION (pfile, lang) == CLK_CXX1Y\n-\t  || CPP_OPTION (pfile, lang) == CLK_GNUCXX1Y)\n-\t_cpp_define_builtin (pfile, \"__cplusplus 201300L\");\n+      if (CPP_OPTION (pfile, lang) == CLK_CXX1Z\n+\t  || CPP_OPTION (pfile, lang) == CLK_GNUCXX1Z)\n+\t_cpp_define_builtin (pfile, \"__cplusplus 201500L\");\n+      else if (CPP_OPTION (pfile, lang) == CLK_CXX14\n+\t  || CPP_OPTION (pfile, lang) == CLK_GNUCXX14)\n+\t_cpp_define_builtin (pfile, \"__cplusplus 201402L\");\n       else if (CPP_OPTION (pfile, lang) == CLK_CXX11\n \t       || CPP_OPTION (pfile, lang) == CLK_GNUCXX11)\n \t_cpp_define_builtin (pfile, \"__cplusplus 201103L\");\n@@ -509,7 +515,9 @@ cpp_init_builtins (cpp_reader *pfile, int hosted)\n     _cpp_define_builtin (pfile, \"__STDC_VERSION__ 199901L\");\n \n   if (CPP_OPTION (pfile, uliterals)\n-      && !CPP_OPTION (pfile, cplusplus))\n+      && !(CPP_OPTION (pfile, cplusplus)\n+\t   && (CPP_OPTION (pfile, lang) == CLK_GNUCXX\n+\t    || CPP_OPTION (pfile, lang) == CLK_CXX98)))\n     {\n       _cpp_define_builtin (pfile, \"__STDC_UTF_16__ 1\");\n       _cpp_define_builtin (pfile, \"__STDC_UTF_32__ 1\");"}]}