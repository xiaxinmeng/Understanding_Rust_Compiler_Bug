{"sha": "a2c76d48b566cbf71672ce4681b9b873d4dd9b13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJjNzZkNDhiNTY2Y2JmNzE2NzJjZTQ2ODFiOWI4NzNkNGRkOWIxMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-16T02:24:10Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-16T02:24:10Z"}, "message": "Rework handling of recursive function types.\n\nFrom-SVN: r167898", "tree": {"sha": "755fec1d83aaf38d3c0f5a0d34829f63e4f407c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/755fec1d83aaf38d3c0f5a0d34829f63e4f407c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2c76d48b566cbf71672ce4681b9b873d4dd9b13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2c76d48b566cbf71672ce4681b9b873d4dd9b13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2c76d48b566cbf71672ce4681b9b873d4dd9b13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2c76d48b566cbf71672ce4681b9b873d4dd9b13/comments", "author": null, "committer": null, "parents": [{"sha": "7892de0c05ab87cf59da5b105b5470e6c6b0ef4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7892de0c05ab87cf59da5b105b5470e6c6b0ef4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7892de0c05ab87cf59da5b105b5470e6c6b0ef4f"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "af541e8eb515558ac876807c70b59bb20528d4f7", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c76d48b566cbf71672ce4681b9b873d4dd9b13/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c76d48b566cbf71672ce4681b9b873d4dd9b13/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=a2c76d48b566cbf71672ce4681b9b873d4dd9b13", "patch": "@@ -6887,11 +6887,17 @@ Named_type::do_get_tree(Gogo* gogo)\n       break;\n \n     case TYPE_FUNCTION:\n-      // Don't recur infinitely if a function type refers to itself.\n-      // Ideally we would build a circular data structure here, but\n-      // GENERIC can't handle them.\n+      // GENERIC can't handle a pointer to a function type whose\n+      // return type is a pointer to the function type itself.  It\n+      // does into infinite loops when walking the types.\n       if (this->seen_)\n-\treturn ptr_type_node;\n+\t{\n+\t  Function_type* fntype = this->type_->function_type();\n+\t  if (fntype->results() != NULL\n+\t      && fntype->results()->size() == 1\n+\t      && fntype->results()->front().type()->forwarded() == this)\n+\t    return ptr_type_node;\n+\t}\n       this->seen_ = true;\n       t = Type::get_named_type_tree(gogo, this->type_);\n       this->seen_ = false;"}]}