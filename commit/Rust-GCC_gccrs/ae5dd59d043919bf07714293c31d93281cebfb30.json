{"sha": "ae5dd59d043919bf07714293c31d93281cebfb30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU1ZGQ1OWQwNDM5MTliZjA3NzE0MjkzYzMxZDkzMjgxY2ViZmIzMA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2006-10-31T17:55:21Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-10-31T17:55:21Z"}, "message": "exp_ch9.adb (Update_Prival_Types): Simplify code for entity references that are private components of the...\n\n2006-10-31  Ed Schonberg  <schonberg@adacore.com>             \n\n        * exp_ch9.adb (Update_Prival_Types): Simplify code for entity\n\treferences that are private components of the protected object.\n\t(Build_Barrier_Function): Set flag Is_Entry_Barrier_Function\n\t(Update_Prival_Subtypes): Add explicit Process argument to Traverse_Proc\n\tinstantiation to deal with warnings.\n\t(Initialize_Protection): If expression for priority is non-static, use\n\tSystem_Priority as its expected type, in case the expression has not\n\tbeen analyzed yet.\n\nFrom-SVN: r118261", "tree": {"sha": "ff764f8779ba95cc1ff88a1a880a365939efa20f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff764f8779ba95cc1ff88a1a880a365939efa20f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae5dd59d043919bf07714293c31d93281cebfb30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5dd59d043919bf07714293c31d93281cebfb30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae5dd59d043919bf07714293c31d93281cebfb30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5dd59d043919bf07714293c31d93281cebfb30/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "02822a92a4880fe678967713c9d4988fe7ca9e55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02822a92a4880fe678967713c9d4988fe7ca9e55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02822a92a4880fe678967713c9d4988fe7ca9e55"}], "stats": {"total": 110, "additions": 80, "deletions": 30}, "files": [{"sha": "3cb895ec439a82468aa56a4498f128e09ba7f8ae", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 80, "deletions": 30, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5dd59d043919bf07714293c31d93281cebfb30/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5dd59d043919bf07714293c31d93281cebfb30/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=ae5dd59d043919bf07714293c31d93281cebfb30", "patch": "@@ -910,13 +910,15 @@ package body Exp_Ch9 is\n       Ent_Formals : constant Node_Id    := Entry_Body_Formal_Part (N);\n       Index_Spec  : constant Node_Id    := Entry_Index_Specification\n                                                            (Ent_Formals);\n-      Op_Decls    : constant List_Id    := New_List;\n-      Bdef        : Entity_Id;\n-      Bspec       : Node_Id;\n+      Op_Decls : constant List_Id := New_List;\n+      Bdef     : Entity_Id;\n+      Bspec    : Node_Id;\n+      EBF      : Node_Id;\n \n    begin\n       Bdef :=\n-        Make_Defining_Identifier (Loc, Chars (Barrier_Function (Ent)));\n+        Make_Defining_Identifier (Loc,\n+          Chars => Chars (Barrier_Function (Ent)));\n       Bspec := Build_Barrier_Function_Specification (Bdef, Loc);\n \n       --  <object pointer declaration>\n@@ -944,7 +946,6 @@ package body Exp_Ch9 is\n             Index_Con : constant Entity_Id :=\n                           Make_Defining_Identifier (Loc,\n                             Chars => New_Internal_Name ('J'));\n-\n          begin\n             Set_Entry_Index_Constant (Index_Id, Index_Con);\n             Append_List_To (Op_Decls,\n@@ -956,7 +957,7 @@ package body Exp_Ch9 is\n       --  processed for the C/Fortran boolean possibility, but this happens\n       --  automatically since the return statement does this normalization.\n \n-      return\n+      EBF :=\n         Make_Subprogram_Body (Loc,\n           Specification => Bspec,\n           Declarations => Op_Decls,\n@@ -965,6 +966,8 @@ package body Exp_Ch9 is\n               Statements => New_List (\n                 Make_Return_Statement (Loc,\n                   Expression => Condition (Ent_Formals)))));\n+      Set_Is_Entry_Barrier_Function (EBF);\n+      return EBF;\n    end Build_Barrier_Function;\n \n    ------------------------------------------\n@@ -2697,6 +2700,12 @@ package body Exp_Ch9 is\n    begin\n       Expand_Call (N);\n \n+      --  If call has been inlined, nothing left to do\n+\n+      if Nkind (N) = N_Block_Statement then\n+         return;\n+      end if;\n+\n       --  Convert entry call to Call_Simple call\n \n       declare\n@@ -4161,7 +4170,6 @@ package body Exp_Ch9 is\n       --  scope.\n \n       if Is_Entity_Name (Cond) then\n-\n          if Entity (Cond) = Standard_False\n               or else\n             Entity (Cond) = Standard_True\n@@ -10494,53 +10502,91 @@ package body Exp_Ch9 is\n       if Present (Pdef)\n         and then Has_Priority_Pragma (Pdef)\n       then\n-         Append_To (Args,\n-           Duplicate_Subexpr_No_Checks\n-             (Expression\n-               (First\n-                 (Pragma_Argument_Associations\n-                   (Find_Task_Or_Protected_Pragma (Pdef, Name_Priority))))));\n+         declare\n+            Prio : constant Node_Id :=\n+                     Expression\n+                       (First\n+                          (Pragma_Argument_Associations\n+                             (Find_Task_Or_Protected_Pragma\n+                                (Pdef, Name_Priority))));\n+            Temp : Entity_Id;\n+\n+         begin\n+            --  If priority is a static expression, then we can duplicate it\n+            --  with no problem and simply append it to the argument list.\n+\n+            if Is_Static_Expression (Prio) then\n+               Append_To (Args,\n+                          Duplicate_Subexpr_No_Checks (Prio));\n+\n+            --  Otherwise, the priority may be a per-object expression, if it\n+            --  depends on a discriminant of the type. In this case, create\n+            --  local variable to capture the expression. Note that it is\n+            --  really necessary to create this variable explicitly. It might\n+            --  be thought that removing side effects would the appropriate\n+            --  approach, but that could generate declarations improperly\n+            --  placed in the enclosing scope.\n+\n+            --  Note: Use System.Any_Priority as the expected type for the\n+            --  non-static priority expression, in case the expression has not\n+            --  been analyzed yet (as occurs for example with pragma\n+            --  Interrupt_Priority).\n+\n+            else\n+               Temp :=\n+                 Make_Defining_Identifier (Loc, New_Internal_Name ('R'));\n+\n+               Append_To (L,\n+                  Make_Object_Declaration (Loc,\n+                     Defining_Identifier => Temp,\n+                     Object_Definition   =>\n+                       New_Occurrence_Of (RTE (RE_Any_Priority), Loc),\n+                     Expression          => Relocate_Node (Prio)));\n+\n+                  Append_To (Args, New_Occurrence_Of (Temp, Loc));\n+            end if;\n+         end;\n+\n+      --  When no priority is specified but an xx_Handler pragma is, we default\n+      --  to System.Interrupts.Default_Interrupt_Priority, see D.3(10).\n \n       elsif Has_Interrupt_Handler (Ptyp)\n         or else Has_Attach_Handler (Ptyp)\n       then\n-         --  When no priority is specified but an xx_Handler pragma is,\n-         --  we default to System.Interrupts.Default_Interrupt_Priority,\n-         --  see D.3(10).\n-\n          Append_To (Args,\n            New_Reference_To (RTE (RE_Default_Interrupt_Priority), Loc));\n \n+      --  Normal case, no priority or xx_Handler specified, default priority\n+\n       else\n          Append_To (Args,\n            New_Reference_To (RTE (RE_Unspecified_Priority), Loc));\n       end if;\n \n+      --  Test for Compiler_Info parameter. This parameter allows entry body\n+      --  procedures and barrier functions to be called from the runtime. It\n+      --  is a pointer to the record generated by the compiler to represent\n+      --  the protected object.\n+\n       if Has_Entry\n         or else Has_Interrupt_Handler (Ptyp)\n         or else Has_Attach_Handler (Ptyp)\n         or else (Ada_Version >= Ada_05\n                    and then Present (Interface_List (Parent (Ptyp))))\n       then\n-         --  Compiler_Info parameter. This parameter allows entry body\n-         --  procedures and barrier functions to be called from the runtime.\n-         --  It is a pointer to the record generated by the compiler to\n-         --  represent the protected object.\n-\n          if Has_Entry or else not Restricted then\n             Append_To (Args,\n                Make_Attribute_Reference (Loc,\n                  Prefix => Make_Identifier (Loc, Name_uInit),\n                  Attribute_Name => Name_Address));\n          end if;\n \n-         if Has_Entry then\n-\n-            --  Entry_Bodies parameter. This is a pointer to an array of\n-            --  pointers to the entry body procedures and barrier functions of\n-            --  the object. If the protected type has no entries this object\n-            --  will not exist; in this case, pass a null.\n+         --  Entry_Bodies parameter. This is a pointer to an array of pointers\n+         --  to the entry body procedures and barrier functions of the object.\n+         --  If the protected type has no entries this object will not exist;\n+         --  in this case, pass a null.\n \n+         if Has_Entry then\n             P_Arr := Entry_Bodies_Array (Ptyp);\n \n             Append_To (Args,\n@@ -11260,7 +11306,11 @@ package body Exp_Ch9 is\n                  and then not Is_Scalar_Type (Etype (E))\n                  and then Etype (N) /= Etype (E)\n                then\n-                  Set_Etype (N, Etype (Entity (Original_Node (N))));\n+\n+                  --  Ensure that reference and entity have the same Etype,\n+                  --  to prevent back-end inconsistencies.\n+\n+                  Set_Etype (N, Etype (E));\n                   Update_Index_Types (N);\n \n                elsif Present (E)\n@@ -11376,7 +11426,7 @@ package body Exp_Ch9 is\n          end if;\n       end Update_Index_Types;\n \n-      procedure Traverse is new Traverse_Proc;\n+      procedure Traverse is new Traverse_Proc (Process);\n \n    --  Start of processing for Update_Prival_Subtypes\n "}]}