{"sha": "6afbc8850684f9e7168a70ca1148bf9064ba582a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFmYmM4ODUwNjg0ZjllNzE2OGE3MGNhMTE0OGJmOTA2NGJhNTgyYQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-05-28T22:48:36Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-05-28T22:48:36Z"}, "message": "gcc.c: Include diagnostic.h.\n\n\t* gcc.c: Include diagnostic.h.\n\t(error_count): Remove.  All users changed to use errorcount.\n\t(programname): Remove.  All users changed to use progname.\n\t(fancy_abort, internal_error, fatal_error, error, warning, inform,\n\tfnotice): Remove.\n\t(execute): Don't include \"Internal error\" and bug reporting\n\tinformation in argument of internal_error call.\n\t(process_command): Don't increment error_count after calling\n\tperror_with_name.\n\t(input_filename): Rename to gcc_input_filename.  All users\n\tchanged.\n\t(main): Call diagnostic_initialize.  Register delete_temp_files\n\twith atexit.  Use seen_error to test for errors.\n\t* gcc.h: Include diagnostic-core.h.\n\t(fatal_error, error, warning): Remove.\n\t* Makefile.in (GCC_H): Add $(DIAGNOSTIC_CORE_H).\n\t(GCC_OBJS): Add diagnostic.o, pretty-print.o and input.o.\n\t(gcc.o): Update dependencies.\n\nFrom-SVN: r160004", "tree": {"sha": "e9cbdec79403c99a1cb3ef44833dcf33827d46a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9cbdec79403c99a1cb3ef44833dcf33827d46a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6afbc8850684f9e7168a70ca1148bf9064ba582a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6afbc8850684f9e7168a70ca1148bf9064ba582a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6afbc8850684f9e7168a70ca1148bf9064ba582a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6afbc8850684f9e7168a70ca1148bf9064ba582a/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0896cc668adddc0be62f009679e1e7236ecec0e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0896cc668adddc0be62f009679e1e7236ecec0e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0896cc668adddc0be62f009679e1e7236ecec0e6"}], "stats": {"total": 233, "additions": 72, "deletions": 161}, "files": [{"sha": "3ef5ef04dc172231b35d22b61829165dde3ddbe7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6afbc8850684f9e7168a70ca1148bf9064ba582a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6afbc8850684f9e7168a70ca1148bf9064ba582a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6afbc8850684f9e7168a70ca1148bf9064ba582a", "patch": "@@ -1,3 +1,24 @@\n+2010-05-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.c: Include diagnostic.h.\n+\t(error_count): Remove.  All users changed to use errorcount.\n+\t(programname): Remove.  All users changed to use progname.\n+\t(fancy_abort, internal_error, fatal_error, error, warning, inform,\n+\tfnotice): Remove.\n+\t(execute): Don't include \"Internal error\" and bug reporting\n+\tinformation in argument of internal_error call.\n+\t(process_command): Don't increment error_count after calling\n+\tperror_with_name.\n+\t(input_filename): Rename to gcc_input_filename.  All users\n+\tchanged.\n+\t(main): Call diagnostic_initialize.  Register delete_temp_files\n+\twith atexit.  Use seen_error to test for errors.\n+\t* gcc.h: Include diagnostic-core.h.\n+\t(fatal_error, error, warning): Remove.\n+\t* Makefile.in (GCC_H): Add $(DIAGNOSTIC_CORE_H).\n+\t(GCC_OBJS): Add diagnostic.o, pretty-print.o and input.o.\n+\t(gcc.o): Update dependencies.\n+\n 2010-05-28  Jeff Law  <law@redhat.com>\n \n \t* ira.c (ira_bad_reload_regno, ira_build_reload_regno_1): New"}, {"sha": "1fe89bf337bf5340e259ccfa0832ef8f7e742ad8", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6afbc8850684f9e7168a70ca1148bf9064ba582a/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6afbc8850684f9e7168a70ca1148bf9064ba582a/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=6afbc8850684f9e7168a70ca1148bf9064ba582a", "patch": "@@ -911,7 +911,7 @@ DF_H = df.h $(BITMAP_H) $(REGSET_H) sbitmap.h $(BASIC_BLOCK_H) \\\n \talloc-pool.h $(TIMEVAR_H)\n RESOURCE_H = resource.h hard-reg-set.h $(DF_H)\n DDG_H = ddg.h sbitmap.h $(DF_H)\n-GCC_H = gcc.h version.h\n+GCC_H = gcc.h version.h $(DIAGNOSTIC_CORE_H)\n GGC_H = ggc.h gtype-desc.h statistics.h\n TIMEVAR_H = timevar.h timevar.def\n INSN_ATTR_H = insn-attr.h $(INSN_ADDR_H)\n@@ -1124,7 +1124,8 @@ CXX_TARGET_OBJS=@cxx_target_objs@\n FORTRAN_TARGET_OBJS=@fortran_target_objs@\n \n # Object files for gcc driver.\n-GCC_OBJS = gcc.o opts-common.o gcc-options.o\n+GCC_OBJS = gcc.o opts-common.o gcc-options.o diagnostic.o pretty-print.o \\\n+  input.o\n \n # Language-specific object files for C and Objective C.\n C_AND_OBJC_OBJS = attribs.o c-errors.o c-lex.o c-pragma.o c-decl.o c-typeck.o \\\n@@ -2130,7 +2131,7 @@ DRIVER_DEFINES = \\\n \n gcc.o: gcc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) intl.h multilib.h \\\n     Makefile $(lang_specs_files) specs.h prefix.h $(GCC_H) $(FLAGS_H) \\\n-    configargs.h $(OBSTACK_H) opts.h\n+    configargs.h $(OBSTACK_H) opts.h $(DIAGNOSTIC_H)\n \t(SHLIB_LINK='$(SHLIB_LINK)'; \\\n \t$(COMPILER) $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n   $(DRIVER_DEFINES) \\"}, {"sha": "ffb69ce598a9ff0f57c4945f6e84f6b40c843b87", "filename": "gcc/gcc.c", "status": "modified", "additions": 46, "deletions": 154, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6afbc8850684f9e7168a70ca1148bf9064ba582a/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6afbc8850684f9e7168a70ca1148bf9064ba582a/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=6afbc8850684f9e7168a70ca1148bf9064ba582a", "patch": "@@ -82,6 +82,7 @@ compilation is specified by a string called a \"spec\".  */\n #include \"intl.h\"\n #include \"prefix.h\"\n #include \"gcc.h\"\n+#include \"diagnostic.h\"\n #include \"flags.h\"\n #include \"opts.h\"\n \n@@ -296,10 +297,6 @@ static const struct modify_target\n modify_target[] = MODIFY_TARGET_NAME;\n #endif\n \n-/* The number of errors that have occurred; the link phase will not be\n-   run if this is nonzero.  */\n-static int error_count = 0;\n-\n /* Greatest exit code of sub-processes that has been encountered up to\n    now.  */\n static int greatest_status = 1;\n@@ -377,11 +374,7 @@ static int used_arg (const char *, int);\n static int default_arg (const char *, int);\n static void set_multilib_dir (void);\n static void print_multilib_info (void);\n-static void inform (int, const char *, ...) ATTRIBUTE_PRINTF_2;\n static void perror_with_name (const char *);\n-static void internal_error (const char *, ...)\n-  ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-static void fnotice (FILE *, const char *, ...) ATTRIBUTE_PRINTF_2;\n static void display_help (void);\n static void add_preprocessor_option (const char *, int);\n static void add_assembler_option (const char *, int);\n@@ -2037,10 +2030,6 @@ static int execution_count;\n /* Number of commands that exited with a signal.  */\n \n static int signal_count;\n-\n-/* Name with which this program was invoked.  */\n-\n-static const char *programname;\n \f\n /* Allocate the argument vector.  */\n \n@@ -3105,7 +3094,7 @@ execute (void)\n \n   pex = pex_init (PEX_USE_PIPES | ((report_times || report_times_to_file)\n \t\t\t\t   ? PEX_RECORD_TIMES : 0),\n-\t\t  programname, temp_filename);\n+\t\t  progname, temp_filename);\n   if (pex == NULL)\n     pfatal_with_name (_(\"pex_init failed\"));\n \n@@ -3178,12 +3167,8 @@ execute (void)\n \t      }\n \t    else\n #endif\n-\t      internal_error (\"\\\n-Internal error: %s (program %s)\\n\\\n-Please submit a full bug report.\\n\\\n-See %s for instructions.\",\n-\t\t \tstrsignal (WTERMSIG (status)), commands[i].prog,\n-\t\t \tbug_report_url);\n+\t      internal_error (\"%s (program %s)\",\n+\t\t\t      strsignal (WTERMSIG (status)), commands[i].prog);\n \t  }\n \telse if (WIFEXITED (status)\n \t\t && WEXITSTATUS (status) >= MIN_FATAL_STATUS)\n@@ -3401,7 +3386,7 @@ convert_filename (const char *name, int do_exe ATTRIBUTE_UNUSED,\n static void\n display_help (void)\n {\n-  printf (_(\"Usage: %s [options] file...\\n\"), programname);\n+  printf (_(\"Usage: %s [options] file...\\n\"), progname);\n   fputs (_(\"Options:\\n\"), stdout);\n \n   fputs (_(\"  -pass-exit-codes         Exit with highest error code from a phase\\n\"), stdout);\n@@ -3463,7 +3448,7 @@ display_help (void)\n \\nOptions starting with -g, -f, -m, -O, -W, or --param are automatically\\n\\\n  passed on to the various sub-processes invoked by %s.  In order to pass\\n\\\n  other options on to these processes the -W<letter> options must be used.\\n\\\n-\"), programname);\n+\"), progname);\n \n   /* The rest of the options are displayed by invocations of the various\n      sub-processes.  */\n@@ -4547,10 +4532,7 @@ process_command (int argc, const char **argv)\n \t    fname = xstrdup (argv[i]);\n  \n           if (strcmp (fname, \"-\") != 0 && access (fname, F_OK) < 0)\n-            {\n-              perror_with_name (fname);\n-              error_count++;\n-            }\n+\t    perror_with_name (fname);\n           else\n             {\n               infiles[n_infiles].language = spec_lang;\n@@ -4658,7 +4640,7 @@ set_collect_gcc_options (void)\n    sans all directory names, and basename_length is the number\n    of characters starting there excluding the suffix .c or whatever.  */\n \n-static const char *input_filename;\n+static const char *gcc_input_filename;\n static int input_file_number;\n size_t input_filename_length;\n static int basename_length;\n@@ -5333,7 +5315,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t\t    break;\n \t\t  }\n \n-\t\t/* If the input_filename has the same suffix specified\n+\t\t/* If the gcc_input_filename has the same suffix specified\n \t\t   for the %g, %u, or %U, and -save-temps is specified,\n \t\t   we could end up using that file as an intermediate\n \t\t   thus clobbering the user's source file (.e.g.,\n@@ -5351,20 +5333,21 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t\t    tmp[basename_length + suffix_length] = '\\0';\n \t\t    temp_filename = tmp;\n \n-\t\t    if (strcmp (temp_filename, input_filename) != 0)\n+\t\t    if (strcmp (temp_filename, gcc_input_filename) != 0)\n \t\t      {\n #ifndef HOST_LACKS_INODE_NUMBERS\n \t\t\tstruct stat st_temp;\n \n \t\t\t/* Note, set_input() resets input_stat_set to 0.  */\n \t\t\tif (input_stat_set == 0)\n \t\t\t  {\n-\t\t\t    input_stat_set = stat (input_filename, &input_stat);\n+\t\t\t    input_stat_set = stat (gcc_input_filename,\n+\t\t\t\t\t\t   &input_stat);\n \t\t\t    if (input_stat_set >= 0)\n \t\t\t      input_stat_set = 1;\n \t\t\t  }\n \n-\t\t\t/* If we have the stat for the input_filename\n+\t\t\t/* If we have the stat for the gcc_input_filename\n \t\t\t   and we can do the stat for the temp_filename\n \t\t\t   then the they could still refer to the same\n \t\t\t   file if st_dev/st_ino's are the same.  */\n@@ -5374,7 +5357,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t\t\t    || input_stat.st_ino != st_temp.st_ino)\n #else\n \t\t\t/* Just compare canonical pathnames.  */\n-\t\t\tchar* input_realname = lrealpath (input_filename);\n+\t\t\tchar* input_realname = lrealpath (gcc_input_filename);\n \t\t\tchar* temp_realname = lrealpath (temp_filename);\n \t\t\tbool files_differ = strcmp (input_realname, temp_realname);\n \t\t\tfree (input_realname);\n@@ -5476,7 +5459,8 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t      }\n \t    else\n \t      {\n-\t\tobstack_grow (&obstack, input_filename, input_filename_length);\n+\t\tobstack_grow (&obstack, gcc_input_filename,\n+\t\t\t      input_filename_length);\n \t\targ_going = 1;\n \t      }\n \t    break;\n@@ -6582,9 +6566,9 @@ set_input (const char *filename)\n {\n   const char *p;\n \n-  input_filename = filename;\n-  input_filename_length = strlen (input_filename);\n-  input_basename = lbasename (input_filename);\n+  gcc_input_filename = filename;\n+  input_filename_length = strlen (gcc_input_filename);\n+  input_basename = lbasename (gcc_input_filename);\n \n   /* Find a suffix starting with the last period,\n      and set basename_length to exclude that suffix.  */\n@@ -6602,7 +6586,7 @@ set_input (const char *filename)\n     input_suffix = \"\";\n \n   /* If a spec for 'g', 'u', or 'U' is seen with -save-temps then\n-     we will need to do a stat on the input_filename.  The\n+     we will need to do a stat on the gcc_input_filename.  The\n      INPUT_STAT_SET signals that the stat is needed.  */\n   input_stat_set = 0;\n }\n@@ -6643,7 +6627,7 @@ compare_files (char *cmpfile[])\n \tif (stat (cmpfile[i], &st) < 0 || !S_ISREG (st.st_mode))\n \t  {\n \t    error (\"%s: could not determine length of compare-debug file %s\",\n-\t\t   input_filename, cmpfile[i]);\n+\t\t   gcc_input_filename, cmpfile[i]);\n \t    ret = 1;\n \t    break;\n \t  }\n@@ -6653,7 +6637,7 @@ compare_files (char *cmpfile[])\n \n     if (!ret && length[0] != length[1])\n       {\n-\terror (\"%s: -fcompare-debug failure (length)\", input_filename);\n+\terror (\"%s: -fcompare-debug failure (length)\", gcc_input_filename);\n \tret = 1;\n       }\n \n@@ -6664,7 +6648,7 @@ compare_files (char *cmpfile[])\n \t  if (fd < 0)\n \t    {\n \t      error (\"%s: could not open compare-debug file %s\",\n-\t\t     input_filename, cmpfile[i]);\n+\t\t     gcc_input_filename, cmpfile[i]);\n \t      ret = 1;\n \t      break;\n \t    }\n@@ -6683,7 +6667,7 @@ compare_files (char *cmpfile[])\n       {\n \tif (memcmp (map[0], map[1], length[0]) != 0)\n \t  {\n-\t    error (\"%s: -fcompare-debug failure\", input_filename);\n+\t    error (\"%s: -fcompare-debug failure\", gcc_input_filename);\n \t    ret = 1;\n \t  }\n       }\n@@ -6705,7 +6689,7 @@ compare_files (char *cmpfile[])\n       if (!temp[i])\n \t{\n \t  error (\"%s: could not open compare-debug file %s\",\n-\t\t input_filename, cmpfile[i]);\n+\t\t gcc_input_filename, cmpfile[i]);\n \t  ret = 1;\n \t  break;\n \t}\n@@ -6721,7 +6705,7 @@ compare_files (char *cmpfile[])\n \tif (c0 != c1)\n \t  {\n \t    error (\"%s: -fcompare-debug failure\",\n-\t\t   input_filename);\n+\t\t   gcc_input_filename);\n \t    ret = 1;\n \t    break;\n \t  }\n@@ -6762,9 +6746,9 @@ main (int argc, char **argv)\n   p = argv[0] + strlen (argv[0]);\n   while (p != argv[0] && !IS_DIR_SEPARATOR (p[-1]))\n     --p;\n-  programname = p;\n+  progname = p;\n \n-  xmalloc_set_program_name (programname);\n+  xmalloc_set_program_name (progname);\n \n   expandargv (&argc, &argv);\n \n@@ -6784,6 +6768,10 @@ main (int argc, char **argv)\n \n   gcc_init_libintl ();\n \n+  diagnostic_initialize (global_dc, 0);\n+  if (atexit (delete_temp_files) != 0)\n+    fatal_error (\"atexit failed\");\n+\n   if (signal (SIGINT, SIG_IGN) != SIG_IGN)\n     signal (SIGINT, fatal_signal);\n #ifdef SIGHUP\n@@ -7063,7 +7051,7 @@ main (int argc, char **argv)\n   set_multilib_dir ();\n \n   /* Set up to remember the pathname of gcc and any options\n-     needed for collect.  We use argv[0] instead of programname because\n+     needed for collect.  We use argv[0] instead of progname because\n      we need the complete pathname.  */\n   obstack_init (&collect_obstack);\n   obstack_grow (&collect_obstack, \"COLLECT_GCC=\", sizeof (\"COLLECT_GCC=\") - 1);\n@@ -7189,7 +7177,7 @@ main (int argc, char **argv)\n \n   if (print_version)\n     {\n-      printf (_(\"%s %s%s\\n\"), programname, pkgversion_string,\n+      printf (_(\"%s %s%s\\n\"), progname, pkgversion_string,\n \t      version_string);\n       printf (\"Copyright %s 2010 Free Software Foundation, Inc.\\n\",\n \t      _(\"(C)\"));\n@@ -7322,7 +7310,7 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t      if (input_file_compiler->spec[0] == '#')\n \t\t{\n \t\t  error (\"%s: %s compiler not installed on this system\",\n-\t\t\t input_filename, &input_file_compiler->spec[1]);\n+\t\t\t gcc_input_filename, &input_file_compiler->spec[1]);\n \t\t  this_file_error = 1;\n \t\t}\n \t      else\n@@ -7346,7 +7334,7 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t  if (this_file_error)\n \t    {\n \t      delete_failure_queue ();\n-\t      error_count++;\n+\t      errorcount++;\n \t      break;\n \t    }\n \t  clear_failure_queue ();\n@@ -7368,7 +7356,7 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \n       /* Use the same thing in %o, unless cp->spec says otherwise.  */\n \n-      outfiles[i] = input_filename;\n+      outfiles[i] = gcc_input_filename;\n \n       /* Figure out which compiler from the file's suffix.  */\n \n@@ -7386,7 +7374,7 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t  if (input_file_compiler->spec[0] == '#')\n \t    {\n \t      error (\"%s: %s compiler not installed on this system\",\n-\t\t     input_filename, &input_file_compiler->spec[1]);\n+\t\t     gcc_input_filename, &input_file_compiler->spec[1]);\n \t      this_file_error = 1;\n \t    }\n \t  else\n@@ -7463,7 +7451,7 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n       if (this_file_error)\n \t{\n \t  delete_failure_queue ();\n-\t  error_count++;\n+\t  errorcount++;\n \t}\n       /* If this compilation succeeded, don't delete those files later.  */\n       clear_failure_queue ();\n@@ -7485,13 +7473,13 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t  }\n     }\n \n-  if (error_count == 0)\n+  if (!seen_error ())\n     {\n       /* Make sure INPUT_FILE_NUMBER points to first available open\n \t slot.  */\n       input_file_number = n_infiles;\n       if (lang_specific_pre_link ())\n-\terror_count++;\n+\terrorcount++;\n     }\n \n   /* Determine if there are any linker input files.  */\n@@ -7502,7 +7490,7 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \n   /* Run ld to link all the compiler output files.  */\n \n-  if (num_linker_inputs > 0 && error_count == 0 && print_subprocess_help < 2)\n+  if (num_linker_inputs > 0 && !seen_error () && print_subprocess_help < 2)\n     {\n       int tmp = execution_count;\n       const char *fuse_linker_plugin = \"fuse-linker-plugin\";\n@@ -7545,14 +7533,14 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t}\n       value = do_spec (link_command_spec);\n       if (value < 0)\n-\terror_count = 1;\n+\terrorcount = 1;\n       linker_was_run = (tmp != execution_count);\n     }\n \n   /* If options said don't run linker,\n      complain about input files to be given to the linker.  */\n \n-  if (! linker_was_run && error_count == 0)\n+  if (! linker_was_run && !seen_error ())\n     for (i = 0; (int) i < n_infiles; i++)\n       if (explicit_link_files[i]\n \t  && !(infiles[i].language && infiles[i].language[0] == '*'))\n@@ -7561,7 +7549,7 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \n   /* Delete some or all of the temporary files we made.  */\n \n-  if (error_count)\n+  if (seen_error ())\n     delete_failure_queue ();\n   delete_temp_files ();\n \n@@ -7572,7 +7560,7 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n     }\n \n   return (signal_count != 0 ? 2\n-\t  : error_count > 0 ? (pass_exit_codes ? greatest_status : 1)\n+\t  : seen_error () ? (pass_exit_codes ? greatest_status : 1)\n \t  : 0);\n }\n \n@@ -7669,102 +7657,6 @@ perror_with_name (const char *name)\n {\n   error (\"%s: %s\", name, xstrerror (errno));\n }\n-\n-/* Output an error message and exit.  */\n-\n-void\n-fancy_abort (const char *file, int line, const char *func)\n-{\n-  internal_error (\"internal gcc abort in %s, at %s:%d\", func, file, line);\n-}\n-\f\n-/* Output an error message and exit.  */\n-\n-void\n-internal_error (const char *gmsgid, ...)\n-{\n-  va_list ap;\n-\n-  va_start (ap, gmsgid);\n-\n-  fprintf (stderr, \"%s: \", programname);\n-  vfprintf (stderr, _(gmsgid), ap);\n-  va_end (ap);\n-  fprintf (stderr, \"\\n\");\n-  delete_temp_files ();\n-  exit (pass_exit_codes ? ICE_EXIT_CODE : 1);\n-}\n-\n-void\n-fatal_error (const char *gmsgid, ...)\n-{\n-  va_list ap;\n-\n-  va_start (ap, gmsgid);\n-\n-  fprintf (stderr, \"%s: \", programname);\n-  vfprintf (stderr, _(gmsgid), ap);\n-  va_end (ap);\n-  fprintf (stderr, \"\\n\");\n-  delete_temp_files ();\n-  exit (1);\n-}\n-\n-/* The argument is actually c-format, not gcc-internal-format,\n-   but because functions with identical names are used through\n-   the rest of the compiler with gcc-internal-format, we just\n-   need to hope all users of these functions use the common\n-   subset between c-format and gcc-internal-format.  */\n-\n-void\n-error (const char *gmsgid, ...)\n-{\n-  va_list ap;\n-\n-  va_start (ap, gmsgid);\n-  error_count++;\n-  fprintf (stderr, \"%s: %s\", programname, _(\"error: \"));\n-  vfprintf (stderr, _(gmsgid), ap);\n-  va_end (ap);\n-\n-  fprintf (stderr, \"\\n\");\n-}\n-\n-void\n-warning (int dummy ATTRIBUTE_UNUSED, const char *gmsgid, ...)\n-{\n-  va_list ap;\n-\n-  va_start (ap, gmsgid);\n-  fprintf (stderr, \"%s: %s\", programname, _(\"warning: \"));\n-  vfprintf (stderr, _(gmsgid), ap);\n-  va_end (ap);\n-\n-  fprintf (stderr, \"\\n\");\n-}\n-\n-static void\n-inform (int dummy ATTRIBUTE_UNUSED, const char *gmsgid, ...)\n-{\n-  va_list ap;\n-\n-  va_start (ap, gmsgid);\n-  fprintf (stderr, \"%s: %s\", programname, _(\"note: \"));\n-  vfprintf (stderr, _(gmsgid), ap);\n-  va_end (ap);\n-\n-  fprintf (stderr, \"\\n\");\n-}\n-\n-static void\n-fnotice (FILE *fp, const char *cmsgid, ...)\n-{\n-  va_list ap;\n-\n-  va_start (ap, cmsgid);\n-  vfprintf (fp, _(cmsgid), ap);\n-  va_end (ap);\n-}\n \f\n static inline void\n validate_switches_from_spec (const char *spec)"}, {"sha": "af8f0027ee00c7b02929c0d493fc2745a50d9db3", "filename": "gcc/gcc.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6afbc8850684f9e7168a70ca1148bf9064ba582a/gcc%2Fgcc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6afbc8850684f9e7168a70ca1148bf9064ba582a/gcc%2Fgcc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.h?ref=6afbc8850684f9e7168a70ca1148bf9064ba582a", "patch": "@@ -22,6 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_GCC_H\n \n #include \"version.h\"\n+#include \"diagnostic-core.h\"\n \n /* The mapping of a spec function name to the C function that\n    implements it.  */\n@@ -59,10 +60,6 @@ struct spec_function\n /* These are exported by gcc.c.  */\n extern int do_spec (const char *);\n extern void record_temp_file (const char *, int, int);\n-extern void fatal_error (const char *, ...)\n-  ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-extern void error (const char *, ...) ATTRIBUTE_PRINTF_1;\n-extern void warning (int, const char *, ...) ATTRIBUTE_PRINTF_2;\n extern void pfatal_with_name (const char *) ATTRIBUTE_NORETURN;\n extern void set_input (const char *);\n "}]}