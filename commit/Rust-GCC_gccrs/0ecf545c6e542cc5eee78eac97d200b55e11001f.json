{"sha": "0ecf545c6e542cc5eee78eac97d200b55e11001f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVjZjU0NWM2ZTU0MmNjNWVlZTc4ZWFjOTdkMjAwYjU1ZTExMDAxZg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-06-05T18:30:48Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-06-05T18:30:48Z"}, "message": "c-decl.c (start_decl): Adjust quoting and hyphenation in diagnostics.\n\n\ngcc/c/ChangeLog:\n\n\t* c-decl.c (start_decl): Adjust quoting and hyphenation\n\tin diagnostics.\n\t(finish_decl): Same.\n\t(finish_enum): Same.\n\t(start_function): Same.\n\t(declspecs_add_type): Same.\n\t* c-parser.c (warn_for_abs): Same.\n\t* c-typeck.c (build_binary_op): Same.\n\ngcc/c-family/ChangeLog:\n\n\t* c-attribs.c (handle_mode_attribute): Adjust quoting and hyphenation.\n\t(handle_alias_ifunc_attribute): Same.\n\t(handle_copy_attribute): Same.\n\t(handle_weakref_attribute): Same.\n\t(handle_nonnull_attribute): Same.\n\t* c-warn.c (warn_for_sign_compare): Same.\n\t(warn_for_restrict): Same.\n\t* c.opt: Same.\n\ngcc/cp/ChangeLog:\n\n\t* call.c (build_conditional_expr_1): Adjust quoting and hyphenation.\n\t(convert_like_real): Same.\n\t(convert_arg_to_ellipsis): Same.\n\t* constexpr.c (diag_array_subscript): Same.\n\t* constraint.cc (diagnose_trait_expression): Same.\n\t* cvt.c (ocp_convert): Same.\n\t* decl.c (start_decl): Same.\n\t(check_for_uninitialized_const_var): Same.\n\t(grokfndecl): Same.\n\t(check_special_function_return_type): Same.\n\t(finish_enum_value_list): Same.\n\t(start_preparsed_function): Same.\n\t* parser.c (cp_parser_decl_specifier_seq): Same.\n\t* typeck.c (cp_build_binary_op): Same.\n\t(build_static_cast_1): Same.\n\ngcc/lto/ChangeLog:\n\n\t* lto-common.c (lto_file_finalize): Adjust quoting and hyphenation.\n\ngcc/objc/ChangeLog:\n\n\t* objc-act.c (objc_build_setter_call): Adjust quoting and hyphenation.\n\t* objc-encoding.c (encode_gnu_bitfield): Same.\n\ngcc/ChangeLog:\n\n\t* config/i386/i386-features.c (ix86_get_function_versions_dispatcher):\n\tAdjust quoting and hyphenation.\n\t* convert.c (convert_to_real_1): Same.\n\t* gcc.c (driver_wrong_lang_callback): Same.\n\t(driver::handle_unrecognized_options): Same.\n\t* gimple-ssa-nonnull-compare.c (do_warn_nonnull_compare): Same.\n\t* opts-common.c (cmdline_handle_error): Same.\n\t(read_cmdline_option): Same.\n\t* opts-global.c (complain_wrong_lang): Same.\n\t(print_ignored_options): Same.\n\t(handle_common_deferred_options): Same.\n\t* pretty-print.h: Same.\n\t* print-rtl.c (debug_bb_n_slim): Same.\n\t* sched-rgn.c (make_pass_sched_fusion): Same.\n\t* tree-cfg.c (verify_gimple_assign_unary): Same.\n\t(verify_gimple_label): Same.\n\t* tree-ssa-operands.c (verify_ssa_operands): Same.\n\t* varasm.c (do_assemble_alias): Same.\n\t(assemble_alias): Same.\n\nFrom-SVN: r271971", "tree": {"sha": "a9ff4681cbb652f6345e3c898fed1dfd3ecae418", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9ff4681cbb652f6345e3c898fed1dfd3ecae418"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ecf545c6e542cc5eee78eac97d200b55e11001f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ecf545c6e542cc5eee78eac97d200b55e11001f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ecf545c6e542cc5eee78eac97d200b55e11001f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ecf545c6e542cc5eee78eac97d200b55e11001f/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0191520b2d2267b4a8a898ceb4d4682d730ee2e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0191520b2d2267b4a8a898ceb4d4682d730ee2e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0191520b2d2267b4a8a898ceb4d4682d730ee2e2"}], "stats": {"total": 1230, "additions": 960, "deletions": 270}, "files": [{"sha": "f7bf3b20305c231510a533aa16e19a0af2b58c87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -1,3 +1,25 @@\n+2019-06-05  Martin Sebor  <msebor@redhat.com>\n+\n+\t* config/i386/i386-features.c (ix86_get_function_versions_dispatcher):\n+\tAdjust quoting and hyphenation.\n+\t* convert.c (convert_to_real_1): Same.\n+\t* gcc.c (driver_wrong_lang_callback): Same.\n+\t(driver::handle_unrecognized_options): Same.\n+\t* gimple-ssa-nonnull-compare.c (do_warn_nonnull_compare): Same.\n+\t* opts-common.c (cmdline_handle_error): Same.\n+\t(read_cmdline_option): Same.\n+\t* opts-global.c (complain_wrong_lang): Same.\n+\t(print_ignored_options): Same.\n+\t(handle_common_deferred_options): Same.\n+\t* pretty-print.h: Same.\n+\t* print-rtl.c (debug_bb_n_slim): Same.\n+\t* sched-rgn.c (make_pass_sched_fusion): Same.\n+\t* tree-cfg.c (verify_gimple_assign_unary): Same.\n+\t(verify_gimple_label): Same.\n+\t* tree-ssa-operands.c (verify_ssa_operands): Same.\n+\t* varasm.c (do_assemble_alias): Same.\n+\t(assemble_alias): Same.\n+\n 2019-06-05  Richard Henderson  <rth@twiddle.net>\n \n \t* config/alpha/alpha.c (direct_return): Move down after"}, {"sha": "179e376fb910a2384f4e01c754803042738fb95c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -1,3 +1,14 @@\n+2019-06-05  Martin Sebor  <msebor@redhat.com>\n+\n+\t* c-attribs.c (handle_mode_attribute): Adjust quoting and hyphenation.\n+\t(handle_alias_ifunc_attribute): Same.\n+\t(handle_copy_attribute): Same.\n+\t(handle_weakref_attribute): Same.\n+\t(handle_nonnull_attribute): Same.\n+\t* c-warn.c (warn_for_sign_compare): Same.\n+\t(warn_for_restrict): Same.\n+\t* c.opt: Same.\n+\n 2019-06-05  Martin Sebor  <msebor@redhat.com>\n \n \t* c-pragma.c (handle_pragma_weak): Adjust quoting in a diagnostic."}, {"sha": "7a8d3935d7991ecf96cb4747cf7f93892ce3360e", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -1821,7 +1821,7 @@ handle_mode_attribute (tree *node, tree name, tree args,\n \t     this mode for this type.  */\n \t  if (TREE_CODE (typefm) != INTEGER_TYPE)\n \t    {\n-\t      error (\"cannot use mode %qs for enumeral types\", p);\n+\t      error (\"cannot use mode %qs for enumerated types\", p);\n \t      return NULL_TREE;\n \t    }\n \n@@ -2326,12 +2326,8 @@ handle_alias_ifunc_attribute (bool is_alias, tree *node, tree name, tree args,\n     {\n       struct symtab_node *n = symtab_node::get (decl);\n       if (n && n->refuse_visibility_changes)\n-\t{\n-\t  if (is_alias)\n-\t    error (\"%+qD declared alias after being used\", decl);\n-\t  else\n-\t    error (\"%+qD declared ifunc after being used\", decl);\n-\t}\n+\terror (\"%+qD declared %qs after being used\",\n+\t       decl, is_alias ? \"alias\" : \"ifunc\");\n     }\n \n \n@@ -2548,7 +2544,7 @@ handle_copy_attribute (tree *node, tree name, tree args,\n    attribute_spec.handler.  */\n \n static tree\n-handle_weakref_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n+handle_weakref_attribute (tree *node, tree name, tree args,\n \t\t\t  int flags, bool *no_add_attrs)\n {\n   tree attr = NULL_TREE;\n@@ -2567,7 +2563,8 @@ handle_weakref_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n \n   if (lookup_attribute (\"ifunc\", DECL_ATTRIBUTES (*node)))\n     {\n-      error (\"indirect function %q+D cannot be declared weakref\", *node);\n+      error (\"indirect function %q+D cannot be declared %qE\",\n+\t     *node, name);\n       *no_add_attrs = true;\n       return NULL_TREE;\n     }\n@@ -2589,7 +2586,8 @@ handle_weakref_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n     {\n       if (lookup_attribute (\"alias\", DECL_ATTRIBUTES (*node)))\n \terror_at (DECL_SOURCE_LOCATION (*node),\n-\t\t  \"weakref attribute must appear before alias attribute\");\n+\t\t  \"%qE attribute must appear before %qs attribute\",\n+\t\t  name, \"alias\");\n \n       /* Can't call declare_weak because it wants this to be TREE_PUBLIC,\n \t and that isn't supported; and because it wants to add it to\n@@ -2601,7 +2599,7 @@ handle_weakref_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n     {\n       struct symtab_node *n = symtab_node::get (*node);\n       if (n && n->refuse_visibility_changes)\n-\terror (\"%+qD declared weakref after being used\", *node);\n+\terror (\"%+qD declared %qE after being used\", *node, name);\n     }\n \n   return NULL_TREE;\n@@ -3625,7 +3623,8 @@ handle_nonnull_attribute (tree *node, tree name,\n \t  && (!TYPE_ATTRIBUTES (type)\n \t      || !lookup_attribute (\"type generic\", TYPE_ATTRIBUTES (type))))\n \t{\n-\t  error (\"nonnull attribute without arguments on a non-prototype\");\n+\t  error (\"%qE attribute without arguments on a non-prototype\",\n+\t\t name);\n \t  *no_add_attrs = true;\n \t}\n       return NULL_TREE;"}, {"sha": "5941c10cddb63ec55bcf99a8afdbbbd96ec03279", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -2232,10 +2232,12 @@ warn_for_sign_compare (location_t location,\n \t\t{\n \t\t  if (constant == 0)\n \t\t    warning_at (location, OPT_Wsign_compare,\n-\t\t\t\t\"promoted ~unsigned is always non-zero\");\n+\t\t\t\t\"promoted bitwise complement of an unsigned \"\n+\t\t\t\t\"value is always nonzero\");\n \t\t  else\n \t\t    warning_at (location, OPT_Wsign_compare,\n-\t\t\t\t\"comparison of promoted ~unsigned with constant\");\n+\t\t\t\t\"comparison of promoted bitwise complement \"\n+\t\t\t\t\"of an unsigned value with constant\");\n \t\t}\n \t    }\n \t}\n@@ -2245,7 +2247,8 @@ warn_for_sign_compare (location_t location,\n \t       && (TYPE_PRECISION (TREE_TYPE (op1))\n \t\t   < TYPE_PRECISION (result_type)))\n \twarning_at (location, OPT_Wsign_compare,\n-\t\t    \"comparison of promoted ~unsigned with unsigned\");\n+\t\t    \"comparison of promoted bitwise complement \"\n+\t\t    \"of an unsigned value with unsigned\");\n     }\n }\n \n@@ -2597,11 +2600,11 @@ warn_for_restrict (unsigned param_pos, tree *argarray, unsigned nargs)\n     }\n \n   return warning_n (&richloc, OPT_Wrestrict, arg_positions.length (),\n-\t\t    \"passing argument %i to restrict-qualified parameter\"\n+\t\t    \"passing argument %i to %qs-qualified parameter\"\n \t\t    \" aliases with argument %Z\",\n-\t\t    \"passing argument %i to restrict-qualified parameter\"\n+\t\t    \"passing argument %i to %qs-qualified parameter\"\n \t\t    \" aliases with arguments %Z\",\n-\t\t    param_pos + 1, arg_positions.address (),\n+\t\t    param_pos + 1, \"restrict\", arg_positions.address (),\n \t\t    arg_positions.length ());\n }\n "}, {"sha": "05f3866185b36bc78c05bffcd3c29cdad5abf3eb", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -1,3 +1,14 @@\n+2019-06-05  Martin Sebor  <msebor@redhat.com>\n+\n+\t* c-decl.c (start_decl): Adjust quoting and hyphenation\n+\tin diagnostics.\n+\t(finish_decl): Same.\n+\t(finish_enum): Same.\n+\t(start_function): Same.\n+\t(declspecs_add_type): Same.\n+\t* c-parser.c (warn_for_abs): Same.\n+\t* c-typeck.c (build_binary_op): Same.\n+\n 2019-05-17  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR c/89433"}, {"sha": "87ce853d4b7d6e96e9fcc7d677cce8e7757a3cd6", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -5013,8 +5013,8 @@ start_decl (struct c_declarator *declarator, struct c_declspecs *declspecs,\n       && DECL_DECLARED_INLINE_P (decl)\n       && DECL_UNINLINABLE (decl)\n       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (decl)))\n-    warning (OPT_Wattributes, \"inline function %q+D given attribute noinline\",\n-\t     decl);\n+    warning (OPT_Wattributes, \"inline function %q+D given attribute %qs\",\n+\t     decl, \"noinline\");\n \n   /* C99 6.7.4p3: An inline definition of a function with external\n      linkage shall not contain a definition of a modifiable object\n@@ -5399,7 +5399,7 @@ finish_decl (tree decl, location_t init_loc, tree init,\n       type = strip_array_types (type);\n       if (TREE_READONLY (decl))\n \twarning_at (DECL_SOURCE_LOCATION (decl), OPT_Wc___compat,\n-\t\t    \"uninitialized const %qD is invalid in C++\", decl);\n+\t\t    \"uninitialized %<const %D%> is invalid in C++\", decl);\n       else if (RECORD_OR_UNION_TYPE_P (type)\n \t       && C_TYPE_FIELDS_READONLY (type))\n \tdiagnose_uninitialized_cst_member (decl, type);\n@@ -8674,7 +8674,7 @@ finish_enum (tree enumtype, tree values, tree attributes)\n       if (precision > TYPE_PRECISION (enumtype))\n \t{\n \t  TYPE_PRECISION (enumtype) = 0;\n-\t  error (\"specified mode too small for enumeral values\");\n+\t  error (\"specified mode too small for enumerated values\");\n \t}\n       else\n \tprecision = TYPE_PRECISION (enumtype);\n@@ -8935,8 +8935,8 @@ start_function (struct c_declspecs *declspecs, struct c_declarator *declarator,\n       && DECL_UNINLINABLE (decl1)\n       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (decl1)))\n     warning_at (loc, OPT_Wattributes,\n-\t\t\"inline function %qD given attribute noinline\",\n-\t\tdecl1);\n+\t\t\"inline function %qD given attribute %qs\",\n+\t\tdecl1, \"noinline\");\n \n   /* Handle gnu_inline attribute.  */\n   if (declspecs->inline_p\n@@ -10941,10 +10941,10 @@ declspecs_add_type (location_t loc, struct c_declspecs *specs,\n \t      }\n \t      if (!targetm.decimal_float_supported_p ())\n \t\terror_at (loc,\n-\t\t\t  (\"decimal floating point not supported \"\n+\t\t\t  (\"decimal floating-point not supported \"\n \t\t\t   \"for this target\"));\n \t      pedwarn (loc, OPT_Wpedantic,\n-\t\t       \"ISO C does not support decimal floating point\");\n+\t\t       \"ISO C does not support decimal floating-point\");\n \t      return specs;\n \t    case RID_FRACT:\n \t    case RID_ACCUM:"}, {"sha": "84ee576866e6d79c2a2ce4d4e1dc6f30755fd9d8", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -9420,7 +9420,7 @@ warn_for_abs (location_t loc, tree fndecl, tree arg)\n \t  if (SCALAR_FLOAT_TYPE_P (atype))\n \t    warning_at (loc, OPT_Wabsolute_value,\n \t\t\t\"using integer absolute value function %qD when \"\n-\t\t\t\"argument is of floating point type %qT\",\n+\t\t\t\"argument is of floating-point type %qT\",\n \t\t\tfndecl, atype);\n \t  else if (TREE_CODE (atype) == COMPLEX_TYPE)\n \t    warning_at (loc, OPT_Wabsolute_value,\n@@ -9443,16 +9443,16 @@ warn_for_abs (location_t loc, tree fndecl, tree arg)\n \t{\n \t  if (INTEGRAL_TYPE_P (atype))\n \t    warning_at (loc, OPT_Wabsolute_value,\n-\t\t\t\"using floating point absolute value function %qD \"\n+\t\t\t\"using floating-point absolute value function %qD \"\n \t\t\t\"when argument is of integer type %qT\", fndecl, atype);\n \t  else if (DECIMAL_FLOAT_TYPE_P (atype))\n \t    warning_at (loc, OPT_Wabsolute_value,\n-\t\t\t\"using floating point absolute value function %qD \"\n-\t\t\t\"when argument is of decimal floating point type %qT\",\n+\t\t\t\"using floating-point absolute value function %qD \"\n+\t\t\t\"when argument is of decimal floating-point type %qT\",\n \t\t\tfndecl, atype);\n \t  else if (TREE_CODE (atype) == COMPLEX_TYPE)\n \t    warning_at (loc, OPT_Wabsolute_value,\n-\t\t\t\"using floating point absolute value function %qD when \"\n+\t\t\t\"using floating-point absolute value function %qD when \"\n \t\t\t\"argument is of complex type %qT\", fndecl, atype);\n \t  else\n \t    gcc_unreachable ();\n@@ -9470,7 +9470,7 @@ warn_for_abs (location_t loc, tree fndecl, tree arg)\n \t  else if (SCALAR_FLOAT_TYPE_P (atype))\n \t    warning_at (loc, OPT_Wabsolute_value,\n \t\t\t\"using complex absolute value function %qD when \"\n-\t\t\t\"argument is of floating point type %qT\",\n+\t\t\t\"argument is of floating-point type %qT\",\n \t\t\tfndecl, atype);\n \t  else\n \t    gcc_unreachable ();\n@@ -9486,17 +9486,17 @@ warn_for_abs (location_t loc, tree fndecl, tree arg)\n \t{\n \t  if (INTEGRAL_TYPE_P (atype))\n \t    warning_at (loc, OPT_Wabsolute_value,\n-\t\t\t\"using decimal floating point absolute value \"\n+\t\t\t\"using decimal floating-point absolute value \"\n \t\t\t\"function %qD when argument is of integer type %qT\",\n \t\t\tfndecl, atype);\n \t  else if (SCALAR_FLOAT_TYPE_P (atype))\n \t    warning_at (loc, OPT_Wabsolute_value,\n-\t\t\t\"using decimal floating point absolute value \"\n-\t\t\t\"function %qD when argument is of floating point \"\n+\t\t\t\"using decimal floating-point absolute value \"\n+\t\t\t\"function %qD when argument is of floating-point \"\n \t\t\t\"type %qT\", fndecl, atype);\n \t  else if (TREE_CODE (atype) == COMPLEX_TYPE)\n \t    warning_at (loc, OPT_Wabsolute_value,\n-\t\t\t\"using decimal floating point absolute value \"\n+\t\t\t\"using decimal floating-point absolute value \"\n \t\t\t\"function %qD when argument is of complex type %qT\",\n \t\t\tfndecl, atype);\n \t  else"}, {"sha": "a25441b26401d762a4755f260ee0529b67813463", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -32,6 +32,12 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa.h\"\n #include \"cfgloop.h\"\n \n+/* Disable warnings about missing quoting in GCC diagnostics.  */\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic push\n+#  pragma GCC diagnostic ignored \"-Wformat-diag\"\n+#endif\n+\n /* A pointer to one of the hooks containers.  */\n static struct cfg_hooks *cfg_hooks;\n \n@@ -1491,3 +1497,7 @@ profile_record_account_profile (profile_record *record)\n       cfg_hooks->account_profile_record (bb, record);\n    }\n }\n+\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic pop\n+#endif"}, {"sha": "f64326b944e630075ced7035937f4601a1cb6c66", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -1363,6 +1363,15 @@ cancel_loop_tree (struct loop *loop)\n   cancel_loop (loop);\n }\n \n+/* Disable warnings about missing quoting in GCC diagnostics for\n+   the verification errors.  Their format strings don't follow GCC\n+   diagnostic conventions and the calls are ultimately followed by\n+   a deliberate ICE triggered by a failed assertion.  */\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic push\n+#  pragma GCC diagnostic ignored \"-Wformat-diag\"\n+#endif\n+\n /* Checks that information about loops is correct\n      -- sizes of loops are all right\n      -- results of get_loop_body really belong to the loop\n@@ -1677,7 +1686,7 @@ verify_loop_structure (void)\n \n \t      if (eloops != 0)\n \t\t{\n-\t\t  error (\"wrong list of exited loops for edge  %d->%d\",\n+\t\t  error (\"wrong list of exited loops for edge %d->%d\",\n \t\t\t e->src->index, e->dest->index);\n \t\t  err = 1;\n \t\t}\n@@ -1712,6 +1721,10 @@ verify_loop_structure (void)\n     free_dominance_info (CDI_DOMINATORS);\n }\n \n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic pop\n+#endif\n+\n /* Returns latch edge of LOOP.  */\n edge\n loop_latch_edge (const struct loop *loop)"}, {"sha": "a1ca5992c414e988c4d37a2cdd810b8c724b6967", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -62,6 +62,12 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"print-rtl.h\"\n \n+/* Disable warnings about missing quoting in GCC diagnostics.  */\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic push\n+#  pragma GCC diagnostic ignored \"-Wformat-diag\"\n+#endif\n+\n /* Holds the interesting leading and trailing notes for the function.\n    Only applicable if the CFG is in cfglayout mode.  */\n static GTY(()) rtx_insn *cfg_layout_function_footer;\n@@ -5191,3 +5197,7 @@ struct cfg_hooks cfg_layout_rtl_cfg_hooks = {\n };\n \n #include \"gt-cfgrtl.h\"\n+\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic pop\n+#endif"}, {"sha": "28019aba4347c7afe0ebc9399d341acb2ab245b8", "filename": "gcc/cgraph.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -3095,6 +3095,15 @@ cgraph_edge::verify_corresponds_to_fndecl (tree decl)\n     return false;\n }\n \n+/* Disable warnings about missing quoting in GCC diagnostics for\n+   the verification errors.  Their format strings don't follow GCC\n+   diagnostic conventions and the calls are ultimately followed by\n+   one to internal_error.  */\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic push\n+#  pragma GCC diagnostic ignored \"-Wformat-diag\"\n+#endif\n+\n /* Verify cgraph nodes of given cgraph node.  */\n DEBUG_FUNCTION void\n cgraph_node::verify_node (void)\n@@ -3470,6 +3479,10 @@ cgraph_node::verify_cgraph_nodes (void)\n     node->verify ();\n }\n \n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic pop\n+#endif\n+\n /* Walk the alias chain to return the function cgraph_node is alias of.\n    Walk through thunks, too.\n    When AVAILABILITY is non-NULL, get minimal availability in the chain."}, {"sha": "51f88ae4d8a45edf8817ed70bdf2fa047f02e1bf", "filename": "gcc/config/i386/i386-features.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fconfig%2Fi386%2Fi386-features.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fconfig%2Fi386%2Fi386-features.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -2581,7 +2581,7 @@ ix86_get_function_versions_dispatcher (void *decl)\n #endif\n     {\n       error_at (DECL_SOURCE_LOCATION (default_node->decl),\n-\t\t\"multiversioning needs ifunc which is not supported \"\n+\t\t\"multiversioning needs %<ifunc%> which is not supported \"\n \t\t\"on this target\");\n     }\n "}, {"sha": "c9062cca9d6811782482e47e6ec7cfa09a9ae5cd", "filename": "gcc/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -6739,7 +6739,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n \n loose_warn=\n save_CXXFLAGS=\"$CXXFLAGS\"\n-for real_option in -W -Wall -Wno-narrowing -Wwrite-strings -Wcast-qual $wf_opt; do\n+for real_option in -W -Wall -Wno-narrowing -Wwrite-strings -Wcast-qual -Wno-error=format-diag $wf_opt; do\n   # Do the check with the no- prefix removed since gcc silently\n   # accepts any -Wno-* option on purpose\n   case $real_option in\n@@ -6797,7 +6797,7 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n c_loose_warn=\n save_CFLAGS=\"$CFLAGS\"\n-for real_option in -Wstrict-prototypes -Wmissing-prototypes; do\n+for real_option in -Wstrict-prototypes -Wmissing-prototypes-Wno-error=format-diag; do\n   # Do the check with the no- prefix removed since gcc silently\n   # accepts any -Wno-* option on purpose\n   case $real_option in"}, {"sha": "cbc0c25fa2b565eff1493006555d0b20a48af515", "filename": "gcc/configure.ac", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -483,10 +483,11 @@ AS_IF([test $enable_build_format_warnings = no],\n       [wf_opt=-Wno-format],[wf_opt=])\n ACX_PROG_CXX_WARNING_OPTS(\n \tm4_quote(m4_do([-W -Wall -Wno-narrowing -Wwrite-strings ],\n-\t\t       [-Wcast-qual $wf_opt])), [loose_warn])\n+\t\t       [-Wcast-qual -Wno-error=format-diag $wf_opt])),\n+\t\t       [loose_warn])\n ACX_PROG_CC_WARNING_OPTS(\n-\tm4_quote(m4_do([-Wstrict-prototypes -Wmissing-prototypes])),\n-\t[c_loose_warn])\n+\tm4_quote(m4_do([-Wstrict-prototypes -Wmissing-prototypes ],\n+\t \t       [-Wno-error=format-diag])), [c_loose_warn])\n ACX_PROG_CXX_WARNING_OPTS(\n \tm4_quote(m4_do([-Wmissing-format-attribute ],\n \t\t       [-Woverloaded-virtual])), [strict_warn])"}, {"sha": "a8f2bd049ba0cd83865ba0a5f7d74f9cdbad0d09", "filename": "gcc/convert.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -235,7 +235,7 @@ convert_to_real_1 (tree type, tree expr, bool fold_p)\n \t\t     (T1) sqrtT4 ((T4) exprT3)\n \n \t\t  , where T1 is TYPE, T2 is ITYPE, T3 is TREE_TYPE (ARG0),\n-\t\t and T4 is NEWTYPE.  All those types are of floating point types.\n+\t\t and T4 is NEWTYPE.  All those types are of floating-point types.\n \t\t T4 (NEWTYPE) should be narrower than T2 (ITYPE). This conversion\n \t\t is safe only if P1 >= P2*2+2, where P1 and P2 are precisions of\n \t\t T2 and T4.  See the following URL for a reference:\n@@ -415,11 +415,11 @@ convert_to_real_1 (tree type, tree expr, bool fold_p)\n \n     case POINTER_TYPE:\n     case REFERENCE_TYPE:\n-      error (\"pointer value used where a floating point was expected\");\n+      error (\"pointer value used where a floating-point was expected\");\n       return convert_to_real_1 (type, integer_zero_node, fold_p);\n \n     default:\n-      error (\"aggregate value used where a floating point was expected\");\n+      error (\"aggregate value used where a floating-point was expected\");\n       return convert_to_real_1 (type, integer_zero_node, fold_p);\n     }\n }"}, {"sha": "0056cc265255f1dbb2c578994b53dbd807fc98f5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -1,3 +1,21 @@\n+2019-06-05  Martin Sebor  <msebor@redhat.com>\n+\n+\t* call.c (build_conditional_expr_1): Adjust quoting and hyphenation.\n+\t(convert_like_real): Same.\n+\t(convert_arg_to_ellipsis): Same.\n+\t* constexpr.c (diag_array_subscript): Same.\n+\t* constraint.cc (diagnose_trait_expression): Same.\n+\t* cvt.c (ocp_convert): Same.\n+\t* decl.c (start_decl): Same.\n+\t(check_for_uninitialized_const_var): Same.\n+\t(grokfndecl): Same.\n+\t(check_special_function_return_type): Same.\n+\t(finish_enum_value_list): Same.\n+\t(start_preparsed_function): Same.\n+\t* parser.c (cp_parser_decl_specifier_seq): Same.\n+\t* typeck.c (cp_build_binary_op): Same.\n+\t(build_static_cast_1): Same.\n+\n 2019-06-04  Nina Dinka Ranns  <dinka.ranns@gmail.com>\n \n \tPR c++/63149 - Wrong auto deduction from braced-init-list."}, {"sha": "c04ca2ee7ce63a177ecf697c743390d028619c68", "filename": "gcc/cp/call.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -5067,7 +5067,7 @@ build_conditional_expr_1 (const op_location_t &loc,\n \t    {\n \t      if (complain & tf_error)\n \t\terror_at (loc, \"inferred scalar type %qT is not an integer or \"\n-\t\t\t  \"floating point type of the same size as %qT\", stype,\n+\t\t\t  \"floating-point type of the same size as %qT\", stype,\n \t\t\t  COMPARISON_CLASS_P (arg1)\n \t\t\t  ? TREE_TYPE (TREE_TYPE (TREE_OPERAND (arg1, 0)))\n \t\t\t  : ctype);\n@@ -5486,8 +5486,8 @@ build_conditional_expr_1 (const op_location_t &loc,\n \t    /* Two enumerators from the same enumeration can have different\n \t       types when the enumeration is still being defined.  */;\n           else if (complain & tf_warning)\n-            warning_at (loc, OPT_Wenum_compare, \"enumeral mismatch in \"\n-\t\t\t\"conditional expression: %qT vs %qT\",\n+\t    warning_at (loc, OPT_Wenum_compare, \"enumerated mismatch \"\n+\t\t\t\"in conditional expression: %qT vs %qT\",\n \t\t\targ2_type, arg3_type);\n         }\n       else if (extra_warnings\n@@ -5498,8 +5498,8 @@ build_conditional_expr_1 (const op_location_t &loc,\n \t\t\t\t\ttype_promotes_to (arg3_type)))))\n         {\n           if (complain & tf_warning)\n-            warning_at (loc, OPT_Wextra, \"enumeral and non-enumeral type in \"\n-\t\t\t\"conditional expression\");\n+\t    warning_at (loc, OPT_Wextra, \"enumerated and non-enumerated \"\n+\t\t\t\"type in conditional expression\");\n         }\n \n       arg2 = perform_implicit_conversion (result_type, arg2, complain);\n@@ -7380,7 +7380,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t\t/* If the reference is volatile or non-const, we\n \t\t   cannot create a temporary.  */\n \t\tif (lvalue & clk_bitfield)\n-\t\t  error_at (loc, \"cannot bind bitfield %qE to %qT\",\n+\t\t  error_at (loc, \"cannot bind bit-field %qE to %qT\",\n \t\t\t    expr, ref_type);\n \t\telse if (lvalue & clk_packed)\n \t\t  error_at (loc, \"cannot bind packed field %qE to %qT\",\n@@ -7487,8 +7487,8 @@ convert_arg_to_ellipsis (tree arg, tsubst_flags_t complain)\n   /* [expr.call]\n \n      If the argument has integral or enumeration type that is subject\n-     to the integral promotions (_conv.prom_), or a floating point\n-     type that is subject to the floating point promotion\n+     to the integral promotions (_conv.prom_), or a floating-point\n+     type that is subject to the floating-point promotion\n      (_conv.fpprom_), the value of the argument is converted to the\n      promoted type before the call.  */\n   if (TREE_CODE (arg_type) == REAL_TYPE"}, {"sha": "15bfb6d814846e7694c927579fc801b292034a4f", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -2483,15 +2483,15 @@ diag_array_subscript (const constexpr_ctx *ctx, tree array, tree index)\n \t    error (\"array subscript value %qE is outside the bounds \"\n \t           \"of array %qD of type %qT\", sidx, array, arraytype);\n \t  else\n-\t    error (\"non-zero array subscript %qE is used with array %qD of \"\n+\t    error (\"nonzero array subscript %qE is used with array %qD of \"\n \t\t   \"type %qT with unknown bounds\", sidx, array, arraytype);\n \t  inform (DECL_SOURCE_LOCATION (array), \"declared here\");\n \t}\n       else if (TYPE_DOMAIN (arraytype))\n \terror (\"array subscript value %qE is outside the bounds \"\n \t       \"of array type %qT\", sidx, arraytype);\n       else\n-\terror (\"non-zero array subscript %qE is used with array of type %qT \"\n+\terror (\"nonzero array subscript %qE is used with array of type %qT \"\n \t       \"with unknown bounds\", sidx, arraytype);\n     }\n }"}, {"sha": "ed39ecce7179263bdfedd0b5757d7c1a254ddb74", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -2693,13 +2693,13 @@ diagnose_trait_expression (location_t loc, tree, tree cur, tree args)\n   switch (TRAIT_EXPR_KIND (expr))\n     {\n     case CPTK_HAS_NOTHROW_ASSIGN:\n-      inform (loc, \"  %qT is not nothrow copy assignable\", t1);\n+      inform (loc, \"  %qT is not %<nothrow%> copy assignable\", t1);\n       break;\n     case CPTK_HAS_NOTHROW_CONSTRUCTOR:\n-      inform (loc, \"  %qT is not nothrow default constructible\", t1);\n+      inform (loc, \"  %qT is not %<nothrow%> default constructible\", t1);\n       break;\n     case CPTK_HAS_NOTHROW_COPY:\n-      inform (loc, \"  %qT is not nothrow copy constructible\", t1);\n+      inform (loc, \"  %qT is not %<nothrow%> copy constructible\", t1);\n       break;\n     case CPTK_HAS_TRIVIAL_ASSIGN:\n       inform (loc, \"  %qT is not trivially copy assignable\", t1);"}, {"sha": "1c405ecd7b620dd564422a6ba4733a3671570c68", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -883,7 +883,7 @@ ocp_convert (tree type, tree expr, int convtype, int flags,\n \t    return rval;\n \t  else if (complain & tf_error)\n \t    error_at (loc,\n-\t\t      \"%q#T used where a floating point value was expected\",\n+\t\t      \"%q#T used where a floating-point value was expected\",\n \t\t      TREE_TYPE (e));\n \t}\n       if (code == REAL_TYPE)"}, {"sha": "f342f8b1c6512e4586ffdfc9d68c4d6cb90d6a57", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -5131,7 +5131,7 @@ start_decl (const cp_declarator *declarator,\n       && DECL_UNINLINABLE (decl)\n       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (decl)))\n     warning_at (DECL_SOURCE_LOCATION (decl), 0,\n-\t\t\"inline function %qD given attribute noinline\", decl);\n+\t\t\"inline function %qD given attribute %qs\", decl, \"noinline\");\n \n   if (TYPE_P (context) && COMPLETE_TYPE_P (complete_type (context)))\n     {\n@@ -5703,7 +5703,7 @@ check_for_uninitialized_const_var (tree decl, bool constexpr_context_p,\n \t    {\n \t      if (complain & tf_error)\n \t\tshow_notes = permerror (DECL_SOURCE_LOCATION (decl),\n-\t\t\t\t        \"uninitialized const %qD\", decl);\n+\t\t\t\t        \"uninitialized %<const %D%>\", decl);\n \t    }\n \t  else\n \t    {\n@@ -9148,7 +9148,7 @@ grokfndecl (tree ctype,\n \t  else if (long_double_p)\n \t    {\n \t      if (cpp_interpret_float_suffix (parse_in, suffix, strlen (suffix)))\n-\t\twarning_at (location, 0, \"floating point suffix %qs\"\n+\t\twarning_at (location, 0, \"floating-point suffix %qs\"\n \t\t\t    \" shadowed by implementation\", suffix);\n \t    }\n \t  /* 17.6.3.3.5  */\n@@ -10184,7 +10184,7 @@ check_special_function_return_type (special_function_kind sfk,\n       for (int i = 0; i < ds_last; ++i)\n \tif (i != ds_explicit && locations[i])\n \t  error_at (locations[i],\n-\t\t    \"decl-specifier in declaration of deduction guide\");\n+\t\t    \"%<decl-specifier%> in declaration of deduction guide\");\n       break;\n \n     default:\n@@ -14747,7 +14747,7 @@ finish_enum_value_list (tree enumtype)\n       if (TYPE_PRECISION (enumtype))\n \t{\n \t  if (precision > TYPE_PRECISION (enumtype))\n-\t    error (\"specified mode too small for enumeral values\");\n+\t    error (\"specified mode too small for enumerated values\");\n \t  else\n \t    {\n \t      use_short_enum = true;\n@@ -15276,7 +15276,7 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n   if (DECL_DECLARED_INLINE_P (decl1)\n       && lookup_attribute (\"noinline\", attrs))\n     warning_at (DECL_SOURCE_LOCATION (decl1), 0,\n-\t\t\"inline function %qD given attribute noinline\", decl1);\n+\t\t\"inline function %qD given attribute %qs\", decl1, \"noinline\");\n \n   /* Handle gnu_inline attribute.  */\n   if (GNU_INLINE_P (decl1))"}, {"sha": "308b2d4ad700e3656c5df23d213bc1bc96c0cb4d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -14075,7 +14075,7 @@ cp_parser_decl_specifier_seq (cp_parser* parser,\n       if (found_decl_spec\n \t  && (flags & CP_PARSER_FLAGS_ONLY_TYPE_OR_CONSTEXPR)\n \t  && token->keyword != RID_CONSTEXPR)\n-\terror (\"decl-specifier invalid in condition\");\n+\terror (\"%<decl-specifier%> invalid in condition\");\n \n       if (found_decl_spec\n \t  && (flags & CP_PARSER_FLAGS_ONLY_MUTABLE_OR_CONSTEXPR)"}, {"sha": "eab800305ec16746fb71586eebe2f826e6160e3c", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -4887,7 +4887,7 @@ cp_build_binary_op (const op_location_t &location,\n \t  && c_inhibit_evaluation_warnings == 0\n \t  && (FLOAT_TYPE_P (type0) || FLOAT_TYPE_P (type1)))\n \twarning (OPT_Wfloat_equal,\n-\t\t \"comparing floating point with %<==%> or %<!=%> is unsafe\");\n+\t\t \"comparing floating-point with %<==%> or %<!=%> is unsafe\");\n       if (complain & tf_warning)\n \t{\n \t  tree stripped_orig_op0 = tree_strip_any_location_wrapper (orig_op0);\n@@ -5288,7 +5288,7 @@ cp_build_binary_op (const op_location_t &location,\n       if (code0 != REAL_TYPE || code1 != REAL_TYPE)\n \t{\n \t  if (complain & tf_error)\n-\t    error (\"unordered comparison on non-floating point argument\");\n+\t    error (\"unordered comparison on non-floating-point argument\");\n \t  return error_mark_node;\n \t}\n       common = 1;\n@@ -7239,8 +7239,8 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n      conversion does not cast away constness (_expr.const.cast_), and\n      the following additional rules for specific cases:  */\n   /* For reference, the conversions not excluded are: integral\n-     promotions, floating point promotion, integral conversions,\n-     floating point conversions, floating-integral conversions,\n+     promotions, floating-point promotion, integral conversions,\n+     floating-point conversions, floating-integral conversions,\n      pointer conversions, and pointer to member conversions.  */\n   /* DR 128\n "}, {"sha": "89074beb6d10c3995e26e839130a7b4341a3c586", "filename": "gcc/diagnostic-show-locus.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fdiagnostic-show-locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fdiagnostic-show-locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -39,6 +39,13 @@ along with GCC; see the file COPYING3.  If not see\n # include <sys/ioctl.h>\n #endif\n \n+/* Disable warnings about quoting issues in the pp_xxx calls below\n+   that (intentionally) don't follow GCC diagnostic conventions.  */\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic push\n+#  pragma GCC diagnostic ignored \"-Wformat-diag\"\n+#endif\n+\n /* Classes for rendering source code and diagnostics, within an\n    anonymous namespace.\n    The work is done by \"class layout\", which embeds and uses\n@@ -3740,3 +3747,7 @@ diagnostic_show_locus_c_tests ()\n } // namespace selftest\n \n #endif /* #if CHECKING_P */\n+\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic pop\n+#endif"}, {"sha": "4761b4349d393b663d62b8725f8de8b3a43a73e8", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -43,6 +43,13 @@ along with GCC; see the file COPYING3.  If not see\n # include <sys/ioctl.h>\n #endif\n \n+/* Disable warnings about quoting issues in the pp_xxx calls below\n+   that (intentionally) don't follow GCC diagnostic conventions.  */\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic push\n+#  pragma GCC diagnostic ignored \"-Wformat-diag\"\n+#endif\n+\n #define pedantic_warning_kind(DC)\t\t\t\\\n   ((DC)->pedantic_errors ? DK_ERROR : DK_WARNING)\n #define permissive_error_kind(DC) ((DC)->permissive ? DK_WARNING : DK_ERROR)\n@@ -1861,3 +1868,7 @@ diagnostic_c_tests ()\n } // namespace selftest\n \n #endif /* #if CHECKING_P */\n+\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic pop\n+#endif"}, {"sha": "9bd65508b004585e9833086e1154f25a9cec9c34", "filename": "gcc/gcc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -3769,7 +3769,7 @@ driver_wrong_lang_callback (const struct cl_decoded_option *decoded,\n   const struct cl_option *option = &cl_options[decoded->opt_index];\n \n   if (option->cl_reject_driver)\n-    error (\"unrecognized command line option %qs\",\n+    error (\"unrecognized command-line option %qs\",\n \t   decoded->orig_option_with_args_text);\n   else\n     save_switch (decoded->canonical_option[0],\n@@ -7846,11 +7846,11 @@ driver::handle_unrecognized_options ()\n       {\n \tconst char *hint = m_option_proposer.suggest_option (switches[i].part1);\n \tif (hint)\n-\t  error (\"unrecognized command line option %<-%s%>;\"\n+\t  error (\"unrecognized command-line option %<-%s%>;\"\n \t\t \" did you mean %<-%s%>?\",\n \t\t switches[i].part1, hint);\n \telse\n-\t  error (\"unrecognized command line option %<-%s%>\",\n+\t  error (\"unrecognized command-line option %<-%s%>\",\n \t\t switches[i].part1);\n       }\n }"}, {"sha": "4243eb74d48c4a003ebf08c7c4bca13a3366348f", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -43,6 +43,13 @@ along with GCC; see the file COPYING3.  If not see\n #include \"asan.h\"\n #include \"cfgloop.h\"\n \n+/* Disable warnings about quoting issues in the pp_xxx calls below\n+   that (intentionally) don't follow GCC diagnostic conventions.  */\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic push\n+#  pragma GCC diagnostic ignored \"-Wformat-diag\"\n+#endif\n+\n #define INDENT(SPACE)\t\t\t\t\t\t\t\\\n   do { int i; for (i = 0; i < SPACE; i++) pp_space (buffer); } while (0)\n \n@@ -2978,3 +2985,7 @@ percent_G_format (text_info *text)\n   tree block = gimple_block (stmt);\n   percent_K_format (text, gimple_location (stmt), block);\n }\n+\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic pop\n+#endif"}, {"sha": "a9449916de9ad4236514264ef5eef35f9b545829", "filename": "gcc/gimple-ssa-nonnull-compare.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fgimple-ssa-nonnull-compare.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fgimple-ssa-nonnull-compare.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-nonnull-compare.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -99,7 +99,7 @@ do_warn_nonnull_compare (function *fun, tree arg)\n \t      ? integer_zerop (op) : integer_minus_onep (op))\n \t  && !gimple_no_warning_p (stmt))\n \twarning_at (loc, OPT_Wnonnull_compare,\n-\t\t    \"nonnull argument %qD compared to NULL\", arg);\n+\t\t    \"%<nonnull%> argument %qD compared to NULL\", arg);\n     }\n }\n "}, {"sha": "33e4c0356eecbc5910909b87f9218481b1080b45", "filename": "gcc/graph.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraph.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -52,11 +52,18 @@ open_graph_file (const char *base, const char *mode)\n \n   fp = fopen (buf, mode);\n   if (fp == NULL)\n-    fatal_error (input_location, \"can%'t open %s: %m\", buf);\n+    fatal_error (input_location, \"cannot open %s: %m\", buf);\n \n   return fp;\n }\n \n+/* Disable warnings about quoting issues in the pp_xxx calls below\n+   that (intentionally) don't follow GCC diagnostic conventions.  */\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic push\n+#  pragma GCC diagnostic ignored \"-Wformat-diag\"\n+#endif\n+\n /* Draw a basic block BB belonging to the function with FUNCDEF_NO\n    as its unique number.  */\n static void\n@@ -381,3 +388,7 @@ finish_graph_dump_file (const char *base)\n   end_graph_dump (fp);\n   fclose (fp);\n }\n+\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic pop\n+#endif"}, {"sha": "71a849b2e1de38c3588275506ba8332e48ce5934", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -1,3 +1,7 @@\n+2019-06-05  Martin Sebor  <msebor@redhat.com>\n+\n+\t* lto-common.c (lto_file_finalize): Adjust quoting and hyphenation.\n+\n 2019-05-16  Martin Sebor  <msebor@redhat.com>\n \n         * lto-dump.c (lto_main): Same."}, {"sha": "9d2f9c57780a2ac18edd4aa56622f87d76a3d76a", "filename": "gcc/lto/lto-common.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Flto%2Flto-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Flto%2Flto-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-common.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -2061,7 +2061,8 @@ lto_file_finalize (struct lto_file_decl_data *file_data, lto_file *file)\n   data = lto_get_section_data (file_data, LTO_section_decls, NULL, &len);\n   if (data == NULL)\n     {\n-      internal_error (\"cannot read LTO decls from %s\", file_data->file_name);\n+      internal_error (\"cannot read %<LTO_section_decls%> from %s\",\n+\t\t      file_data->file_name);\n       return;\n     }\n   /* Frees resolutions.  */"}, {"sha": "d001a508908af05c010ca078fb521b0db7fa7234", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -1,3 +1,8 @@\n+2019-06-05  Martin Sebor  <msebor@redhat.com>\n+\n+\t* objc-act.c (objc_build_setter_call): Adjust quoting and hyphenation.\n+\t* objc-encoding.c (encode_gnu_bitfield): Same.\n+\n 2019-05-18  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* objc/objc-act.h (OCTI_INSTANCE_TYPE, OCTI_INSTANCETYPE_NAME): New."}, {"sha": "6c188041291f3ddefb342e40bf5f359ddca5c912", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -1747,7 +1747,7 @@ objc_build_setter_call (tree lhs, tree rhs)\n \n   if (PROPERTY_READONLY (property_decl))\n     {\n-      error (\"readonly property cannot be set\");\n+      error (\"%qs property cannot be set\", \"readonly\");\n       return error_mark_node;\n     }\n   else"}, {"sha": "91ad7d9547ef017cd27496ba165ad0dbd98e22c3", "filename": "gcc/objc/objc-encoding.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fobjc%2Fobjc-encoding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fobjc%2Fobjc-encoding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-encoding.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -801,7 +801,7 @@ encode_gnu_bitfield (int position, tree type, int size)\n   else\n     {\n       /* Do not do any encoding, produce an error and keep going.  */\n-      error (\"trying to encode non-integer type as a bitfield\");\n+      error (\"trying to encode non-integer type as a bit-field\");\n       return;\n     }\n "}, {"sha": "660dfe63858c41867d27a5ca25216bf5ba932cf6", "filename": "gcc/opts-common.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -1234,7 +1234,7 @@ cmdline_handle_error (location_t loc, const struct cl_option *option,\n {\n   if (errors & CL_ERR_DISABLED)\n     {\n-      error_at (loc, \"command line option %qs\"\n+      error_at (loc, \"command-line option %qs\"\n \t\t     \" is not supported by this configuration\", opt);\n       return true;\n     }\n@@ -1323,7 +1323,7 @@ read_cmdline_option (struct gcc_options *opts,\n   if (decoded->opt_index == OPT_SPECIAL_unknown)\n     {\n       if (handlers->unknown_option_callback (decoded))\n-\terror_at (loc, \"unrecognized command line option %qs\", decoded->arg);\n+\terror_at (loc, \"unrecognized command-line option %qs\", decoded->arg);\n       return;\n     }\n \n@@ -1355,7 +1355,7 @@ read_cmdline_option (struct gcc_options *opts,\n \n   if (!handle_option (opts, opts_set, decoded, lang_mask, DK_UNSPECIFIED,\n \t\t      loc, handlers, false, dc))\n-    error_at (loc, \"unrecognized command line option %qs\", opt);\n+    error_at (loc, \"unrecognized command-line option %qs\", opt);\n }\n \n /* Set any field in OPTS, and OPTS_SET if not NULL, for option"}, {"sha": "bf4db7759283805c77c001a33b5d85a279bbc4fb", "filename": "gcc/opts-global.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fopts-global.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fopts-global.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-global.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -99,13 +99,13 @@ complain_wrong_lang (const struct cl_decoded_option *decoded,\n     bad_lang = write_langs (lang_mask);\n \n   if (opt_flags == CL_DRIVER)\n-    error (\"command line option %qs is valid for the driver but not for %s\",\n+    error (\"command-line option %qs is valid for the driver but not for %s\",\n \t   text, bad_lang);\n   else if (lang_mask == CL_DRIVER)\n     gcc_unreachable ();\n   else\n     /* Eventually this should become a hard error IMO.  */\n-    warning (0, \"command line option %qs is valid for %s but not for %s\",\n+    warning (0, \"command-line option %qs is valid for %s but not for %s\",\n \t     text, ok_langs, bad_lang);\n \n   free (ok_langs);\n@@ -136,7 +136,7 @@ print_ignored_options (void)\n \n       opt = ignored_options.pop ();\n       warning_at (UNKNOWN_LOCATION, 0,\n-\t\t  \"unrecognized command line option %qs\", opt);\n+\t\t  \"unrecognized command-line option %qs\", opt);\n     }\n }\n \n@@ -379,12 +379,12 @@ handle_common_deferred_options (void)\n \n \tcase OPT_fdump_:\n \t  if (!g->get_dumps ()->dump_switch_p (opt->arg))\n-\t    error (\"unrecognized command line option %<-fdump-%s%>\", opt->arg);\n+\t    error (\"unrecognized command-line option %<-fdump-%s%>\", opt->arg);\n \t  break;\n \n         case OPT_fopt_info_:\n \t  if (!opt_info_switch_p (opt->arg))\n-\t    error (\"unrecognized command line option %<-fopt-info-%s%>\",\n+\t    error (\"unrecognized command-line option %<-fopt-info-%s%>\",\n                    opt->arg);\n           break;\n "}, {"sha": "10948efddd910f9f9d424ad4abbe3a1e66b21e78", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -54,6 +54,13 @@ along with GCC; see the file COPYING3.  If not see\n #include \"print-rtl.h\"\n #include \"rtl-iter.h\"\n \n+/* Disable warnings about quoting issues in the pp_xxx calls below\n+   that (intentionally) don't follow GCC diagnostic conventions.  */\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic push\n+#  pragma GCC diagnostic ignored \"-Wformat-diag\"\n+#endif\n+\n /* String printed at beginning of each RTL when it is dumped.\n    This string is set to ASM_COMMENT_START when the RTL is dumped in\n    the assembly output file.  */\n@@ -2142,3 +2149,7 @@ debug_bb_n_slim (int n)\n }\n \n #endif\n+\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic pop\n+#endif"}, {"sha": "d4001300a4b2e6c9677fc64c4eeccf88b7ad1a3d", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -67,6 +67,13 @@ along with GCC; see the file COPYING3.  If not see\n #include \"pretty-print.h\"\n #include \"print-rtl.h\"\n \n+/* Disable warnings about quoting issues in the pp_xxx calls below\n+   that (intentionally) don't follow GCC diagnostic conventions.  */\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic push\n+#  pragma GCC diagnostic ignored \"-Wformat-diag\"\n+#endif\n+\n #ifdef INSN_SCHEDULING\n \n /* Some accessor macros for h_i_d members only used within this file.  */\n@@ -3947,3 +3954,7 @@ make_pass_sched_fusion (gcc::context *ctxt)\n {\n   return new pass_sched_fusion (ctxt);\n }\n+\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic pop\n+#endif"}, {"sha": "905ca05e578b503e11ec7ff160df005ea7669e60", "filename": "gcc/symtab.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -1002,6 +1002,15 @@ symtab_node::debug (void)\n \n /* Verify common part of symtab nodes.  */\n \n+#if __GNUC__ >= 10\n+/* Disable warnings about missing quoting in GCC diagnostics for\n+   the verification errors.  Their format strings don't follow GCC\n+   diagnostic conventions and the calls are ultimately followed by\n+   one to internal_error.  */\n+#  pragma GCC diagnostic push\n+#  pragma GCC diagnostic ignored \"-Wformat-diag\"\n+#endif\n+\n DEBUG_FUNCTION bool\n symtab_node::verify_base (void)\n {\n@@ -1288,6 +1297,10 @@ symtab_node::verify_symtab_nodes (void)\n     }\n }\n \n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic pop\n+#endif\n+\n /* Make DECL local.  FIXME: We shouldn't need to mess with rtl this early,\n    but other code such as notice_global_symbol generates rtl.  */\n "}, {"sha": "ea987365302eed66fd024ff3ab1984d10c1acb86", "filename": "gcc/testsuite/c-c++-common/nonnull-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fnonnull-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fnonnull-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fnonnull-1.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -8,27 +8,27 @@\n \n void foo(void *bar) __attribute__((nonnull(1)));\n \n-void foo(void *bar) { if (!bar) abort(); } /* { dg-warning \"nonnull argument\" \"bar compared to NULL\" } */\n+void foo(void *bar) { if (!bar) abort(); } /* { dg-warning \"'nonnull' argument\" \"bar compared to NULL\" } */\n \n extern int func (char *, char *, char *, char *) __attribute__((nonnull));\n \n int\n func (char *cp1, char *cp2, char *cp3, char *cp4)\n {\n-  if (cp1) /* { dg-warning \"nonnull argument\" \"cp1 compared to NULL\" } */\n+  if (cp1) /* { dg-warning \"'nonnull' argument\" \"cp1 compared to NULL\" } */\n     return 1;\n \n-  if (cp2 == NULL) /* { dg-warning \"nonnull argument\" \"cp2 compared to NULL\" } */\n+  if (cp2 == NULL) /* { dg-warning \"'nonnull' argument\" \"cp2 compared to NULL\" } */\n     return 2;\n \n-  if (NULL != cp3) /* { dg-warning \"nonnull argument\" \"cp3 compared to NULL\" } */\n+  if (NULL != cp3) /* { dg-warning \"'nonnull' argument\" \"cp3 compared to NULL\" } */\n     return 3;\n \n-  return cp4 != 0 ? 0 : 1; /* { dg-warning \"nonnull argument\" \"cp4 compared to NULL\" } */\n+  return cp4 != 0 ? 0 : 1; /* { dg-warning \"'nonnull' argument\" \"cp4 compared to NULL\" } */\n }\n \n __attribute__((nonnull (1))) int\n func2 (char *cp)\n {\n-  return (cp != NULL) ? 1 : 0; /* { dg-warning \"nonnull argument\" \"cp compared to NULL\" { xfail c++ } } */\n+  return (cp != NULL) ? 1 : 0; /* { dg-warning \"'nonnull' argument\" \"cp compared to NULL\" { xfail c++ } } */\n }"}, {"sha": "19574cd11046f9a885a9de12587b044b2beb4128", "filename": "gcc/testsuite/c-c++-common/nonnull-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fnonnull-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fnonnull-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fnonnull-2.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -7,19 +7,19 @@ void bar (char **);\n __attribute__((nonnull (1, 3))) int\n foo (char *cp1, char *cp2, char *cp3, char *cp4)\n {\n-  if (cp1 == (char *) 0) /* { dg-warning \"nonnull argument\" \"cp1 compared to NULL\" } */\n+  if (cp1 == (char *) 0) /* { dg-warning \"'nonnull' argument\" \"cp1 compared to NULL\" } */\n     return 1;\n \n   cp1 = cp2;\n-  if (cp1 == (char *) 0) /* { dg-bogus \"nonnull argument\" } */\n+  if (cp1 == (char *) 0) /* { dg-bogus \"'nonnull' argument\" } */\n     return 2;\n \n-  if (!cp4)\t   /* { dg-bogus \"nonnull argument\" } */\n+  if (!cp4)\t   /* { dg-bogus \"'nonnull' argument\" } */\n     return 3;\n \n   char **p = &cp3;\n   bar (p);\n-  if (cp3 == (char *) 0) /* { dg-bogus \"nonnull argument\" } */\n+  if (cp3 == (char *) 0) /* { dg-bogus \"'nonnull' argument\" } */\n     return 4;\n \n   return 5;"}, {"sha": "42081c889f265132be17e27c5c6e49a7cf2cae2e", "filename": "gcc/testsuite/c-c++-common/nonnull-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fnonnull-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fnonnull-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fnonnull-3.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -7,5 +7,5 @@ enum { r = 1 };\n __attribute__ ((nonnull (r))) int\n f (int *p)\n {\n-  return p == 0; /* { dg-warning \"nonnull argument 'p' compared to NULL\" } */\n+  return p == 0; /* { dg-warning \"'nonnull' argument 'p' compared to NULL\" } */\n }"}, {"sha": "11075dd0e061f2fec4e82126c3fde703f565ee25", "filename": "gcc/testsuite/c-c++-common/pr35503-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr35503-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr35503-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr35503-1.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -6,5 +6,5 @@ int foo (char *__restrict buf, const char *__restrict fmt, ...);\n void f(void)\n {\n   char buf[100] = \"hello\";\n-  foo (buf, \"%s-%s\", buf, \"world\"); /*  { dg-warning \"passing argument 1 to restrict-qualified parameter aliases with argument 3\" } */\n+  foo (buf, \"%s-%s\", buf, \"world\"); /*  { dg-warning \"passing argument 1 to 'restrict'-qualified parameter aliases with argument 3\" } */\n }"}, {"sha": "887576c39761c292d653a13934278d9a82645daf", "filename": "gcc/testsuite/c-c++-common/pr35503-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr35503-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr35503-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr35503-2.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -5,7 +5,7 @@ void f(int *__restrict x, int *y, int *__restrict z, int *w);\n \n void foo(int alpha, int beta)\n {\n-  f (&alpha, &beta, &alpha, &alpha); /* { dg-warning \"passing argument 1 to restrict-qualified parameter aliases with arguments 3, 4\" } */\n+  f (&alpha, &beta, &alpha, &alpha); /* { dg-warning \"passing argument 1 to 'restrict'-qualified parameter aliases with arguments 3, 4\" } */\n \n /* { dg-begin-multiline-output \"\" }\n    f (&alpha, &beta, &alpha, &alpha);"}, {"sha": "8d4b1fc03ee5b13fefa3373677318fd8213540aa", "filename": "gcc/testsuite/c-c++-common/pr35503-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr35503-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr35503-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr35503-3.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -5,5 +5,5 @@ void f(int *x, int *__restrict y);\n \n void foo(int a)\n {\n-  f (&a, &a); /* { dg-warning \"passing argument 2 to restrict-qualified parameter aliases with argument 1\" } */\n+  f (&a, &a); /* { dg-warning \"passing argument 2 to 'restrict'-qualified parameter aliases with argument 1\" } */\n }"}, {"sha": "6568fc6202c78ca7bb30d98ec35d26ec53a31c64", "filename": "gcc/testsuite/g++.dg/abi/empty12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -2,7 +2,7 @@\n // { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n // { dg-options \"-Wabi=11 -x c\" }\n // { dg-additional-sources \"empty12a.c\" }\n-// { dg-prune-output \"command line option\" }\n+// { dg-prune-output \"command-line option\" }\n \n #include \"empty12.h\"\n extern \"C\" void fun(struct dummy, struct foo);"}, {"sha": "9ec188760c72680c1f1e17037578026c058d9920", "filename": "gcc/testsuite/g++.dg/abi/empty13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -2,7 +2,7 @@\n // { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n // { dg-options \"-x c -fabi-version=11\" }\n // { dg-additional-sources \"empty13a.c\" }\n-// { dg-prune-output \"command line option\" }\n+// { dg-prune-output \"command-line option\" }\n \n #include \"empty13.h\"\n extern \"C\" void fun(struct dummy, struct foo);"}, {"sha": "7deb463f5e4810c03882addb400f22f2b7951299", "filename": "gcc/testsuite/g++.dg/abi/empty14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -2,7 +2,7 @@\n // { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n // { dg-options \"-Wabi=11 -x c\" }\n // { dg-additional-sources \"empty14a.c\" }\n-// { dg-prune-output \"command line option\" }\n+// { dg-prune-output \"command-line option\" }\n \n #include \"empty14.h\"\n extern \"C\" void fun(struct dummy, struct foo);"}, {"sha": "fd36194b459e59d746ac99029232b42fb933d68b", "filename": "gcc/testsuite/g++.dg/abi/empty15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -2,7 +2,7 @@\n // { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n // { dg-options \"-Wabi=11 -x c\" }\n // { dg-additional-sources \"empty15a.c\" }\n-// { dg-prune-output \"command line option\" }\n+// { dg-prune-output \"command-line option\" }\n \n #include \"empty15.h\"\n extern \"C\" void fun(struct dummy, struct foo);"}, {"sha": "024b00e74327ac6406b1c481724c76b89b243725", "filename": "gcc/testsuite/g++.dg/abi/empty16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -2,7 +2,7 @@\n // { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n // { dg-options \"-Wabi=11 -x c\" }\n // { dg-additional-sources \"empty16a.c\" }\n-// { dg-prune-output \"command line option\" }\n+// { dg-prune-output \"command-line option\" }\n \n #include \"empty16.h\"\n extern \"C\" void fun(struct dummy, struct foo);"}, {"sha": "a6e58fa4d5f822908d7ce15965f434662ac2c7ae", "filename": "gcc/testsuite/g++.dg/abi/empty17.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -2,7 +2,7 @@\n // { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n // { dg-options \"-Wabi=11 -x c\" }\n // { dg-additional-sources \"empty17a.c\" }\n-// { dg-prune-output \"command line option\" }\n+// { dg-prune-output \"command-line option\" }\n \n #include \"empty17.h\"\n extern \"C\" void fun(struct dummy, struct foo);"}, {"sha": "6e64dae8d47ecccc38b99c9eb6259419f23a12a1", "filename": "gcc/testsuite/g++.dg/abi/empty18.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -2,7 +2,7 @@\n // { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n // { dg-options \"-Wabi=11 -x c\" }\n // { dg-additional-sources \"empty18a.c\" }\n-// { dg-prune-output \"command line option\" }\n+// { dg-prune-output \"command-line option\" }\n \n #include \"empty18.h\"\n extern \"C\" void fun(struct dummy, struct foo);"}, {"sha": "8707db86be66e27c3c060e9f1dafdbaf04737fdf", "filename": "gcc/testsuite/g++.dg/abi/empty19.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -2,7 +2,7 @@\n // { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n // { dg-options \"-Wabi=11 -x c\" }\n // { dg-additional-sources \"empty19a.c\" }\n-// { dg-prune-output \"command line option\" }\n+// { dg-prune-output \"command-line option\" }\n \n #include \"empty19.h\"\n extern \"C\" void fun(struct dummy, struct foo);"}, {"sha": "d3720f86fdebf8dc6f5327976b807f6cecfa8cb4", "filename": "gcc/testsuite/g++.dg/abi/empty22.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty22.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -2,7 +2,7 @@\n // { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n // { dg-options \"-Wabi=11 -x c\" }\n // { dg-additional-sources \"empty22a.c\" }\n-// { dg-prune-output \"command line option\" }\n+// { dg-prune-output \"command-line option\" }\n \n #include \"empty22.h\"\n extern \"C\" void fun(struct dummy, struct foo);"}, {"sha": "50a4c266ca00653112af6f6f6ed827cb9a68bef3", "filename": "gcc/testsuite/g++.dg/abi/empty25.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty25.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -2,7 +2,7 @@\n // { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n // { dg-options \"-Wabi=11 -x c\" }\n // { dg-additional-sources \"empty25a.c\" }\n-// { dg-prune-output \"command line option\" }\n+// { dg-prune-output \"command-line option\" }\n \n #include \"empty25.h\"\n extern \"C\" void fun(struct dummy, struct foo);"}, {"sha": "785cdc7d9743092203e8a70f2f6d149c80e2b502", "filename": "gcc/testsuite/g++.dg/abi/empty26.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty26.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -2,7 +2,7 @@\n // { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n // { dg-options \"-Wabi=11 -x c\" }\n // { dg-additional-sources \"empty26a.c\" }\n-// { dg-prune-output \"command line option\" }\n+// { dg-prune-output \"command-line option\" }\n \n #include \"empty26.h\"\n extern \"C\" void fun(struct dummy, struct foo);"}, {"sha": "019a8ce1130ed579cd4c84cec515c71aea46bf21", "filename": "gcc/testsuite/g++.dg/concepts/decl-diagnose.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdecl-diagnose.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdecl-diagnose.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdecl-diagnose.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -17,7 +17,7 @@ struct X\n   template<typename T>\n   static concept bool f6() { return true; } // { dg-error \"a concept cannot be a member function\" }\n   static concept bool x; // { dg-error \"declared 'concept'\" }\n-\t\t\t // { dg-error \"uninitialized const\" \"\" { target *-*-* } .-1 }\n+\t\t\t // { dg-error \"uninitialized 'const\" \"\" { target *-*-* } .-1 }\n   concept int x2; // { dg-error \"declared 'concept'\" }\n   concept ~X(); // { dg-error \"a destructor cannot be 'concept'\" }\n   concept X(); // { dg-error \"a constructor cannot be 'concept'\" }"}, {"sha": "d1b1b096c1e50ba7d732c8ab4eb6e73e4dc513cd", "filename": "gcc/testsuite/g++.dg/conversion/bitfield7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fbitfield7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fbitfield7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fbitfield7.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -12,5 +12,5 @@ int foo (double);\n int\n main ()\n {\n-  return foo (s.bar);\t\t// { dg-error \"cannot bind bitfield\" }\n+  return foo (s.bar);\t\t// { dg-error \"cannot bind bit-field\" }\n }"}, {"sha": "73942c5f0a513ae1a15e49d83e56defbae5fd9a9", "filename": "gcc/testsuite/g++.dg/cpp0x/addressof2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Faddressof2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Faddressof2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Faddressof2.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -16,7 +16,7 @@ struct S { int s : 5; int t; void foo (); } s;\n auto c = __builtin_addressof (s);\n auto d = addressof (s);\n auto e = __builtin_addressof (s.s);\t\t// { dg-error \"attempt to take address of bit-field\" }\n-auto f = addressof (s.s);\t\t\t// { dg-error \"cannot bind bitfield\" }\n+auto f = addressof (s.s);\t\t\t// { dg-error \"cannot bind bit-field\" }\n auto g = __builtin_addressof (S{});\t\t// { dg-error \"taking address of rvalue\" }\n auto h = addressof (S{});\t\t\t// { dg-error \"cannot bind non-const lvalue reference of type\" }\n auto i = __builtin_addressof (S::t);\t\t// { dg-error \"invalid use of non-static data member\" }"}, {"sha": "733d494c4d71d2ff58eb66cfc8f14d2040ac870a", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-condition.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-condition.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-condition.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-condition.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -5,5 +5,5 @@ constexpr int something() { return 3; }\n \n int main() {\n   if (constexpr long v = something()) {}\n-  if (static long v = something()) { } // { dg-error \"decl-specifier invalid\" }\n+  if (static long v = something()) { } // { dg-error \"'decl-specifier' invalid\" }\n }"}, {"sha": "9b52a6e00ef929e425d282bdb2bee0a71745410e", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-neg1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-neg1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-neg1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-neg1.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -61,7 +61,7 @@ struct pixel2 {\t   // { dg-message \"no user-provided default constructor\" }\n   int x, y;\n };\n constexpr pixel2 ur = { 1294, 1024 };// OK\n-constexpr pixel2 origin;\t     // { dg-error \"uninitialized const\" }\n+constexpr pixel2 origin;\t     // { dg-error \"uninitialized 'const\" }\n \n constexpr const int* addr(const int& ir) { return &ir; } // OK\n "}, {"sha": "5f54c635e643af45bfa2004ac88dff3adb0d4ccb", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-object1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-object1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-object1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-object1.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -15,7 +15,7 @@ constexpr A1 a1 = A1();\n extern constexpr int i2; // { dg-error \"definition\" }\n \n // error: missing initializer\n-constexpr A1 a2; // { dg-error \"uninitialized const\" }\n+constexpr A1 a2; // { dg-error \"uninitialized 'const\" }\n \n const constexpr A1 a3 = A1();\n "}, {"sha": "b7b31438491cbbecce2a07bc478cf3b0264caf3f", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted2.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -21,7 +21,7 @@ struct B // { dg-message \"user-provided default constructor\" }\n   B() = default;\t\t// { dg-message \"not user-provided\" }\n };\n \n-const B b;\t\t\t// { dg-error \"uninitialized const\" }\n+const B b;\t\t\t// { dg-error \"uninitialized 'const\" }\n \n struct C\n {"}, {"sha": "7a467a154b0bc7fa44f6e56462fbc9dc5ddb2d9a", "filename": "gcc/testsuite/g++.dg/cpp0x/gnu_fext-numeric-literals.C", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgnu_fext-numeric-literals.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgnu_fext-numeric-literals.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgnu_fext-numeric-literals.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -22,55 +22,55 @@ operator\"\" J(unsigned long long n) // { dg-warning \"1:integer suffix .J. shadowe\n //  Floating-point imaginary...\n \n constexpr long double\n-operator\"\" i(long double n) // { dg-warning \"1:floating point suffix .i. shadowed by implementation\" \"\" { target c++11_only } }\n+operator\"\" i(long double n) // { dg-warning \"1:floating-point suffix .i. shadowed by implementation\" \"\" { target c++11_only } }\n { return 4.0L * n + 0.0L; }\n \n constexpr long double\n-operator\"\" I(long double n) // { dg-warning \"1:floating point suffix .I. shadowed by implementation\" }\n+operator\"\" I(long double n) // { dg-warning \"1:floating-point suffix .I. shadowed by implementation\" }\n { return 4.0L * n + 1.0L; }\n \n constexpr long double\n-operator\"\" j(long double n) // { dg-warning \"1:floating point suffix .j. shadowed by implementation\" }\n+operator\"\" j(long double n) // { dg-warning \"1:floating-point suffix .j. shadowed by implementation\" }\n { return 4.0L * n + 2.0L; }\n \n constexpr long double\n-operator\"\" J(long double n) // { dg-warning \"1:floating point suffix .J. shadowed by implementation\" }\n+operator\"\" J(long double n) // { dg-warning \"1:floating-point suffix .J. shadowed by implementation\" }\n { return 4.0L * n + 3.0L; }\n \n //  Fixed-point...\n \n constexpr long double\n-operator\"\" k(long double n) // { dg-warning \"1:floating point suffix .k. shadowed by implementation\" }\n+operator\"\" k(long double n) // { dg-warning \"1:floating-point suffix .k. shadowed by implementation\" }\n { return 4 * (n + 1) + 0; }\n \n constexpr long double\n-operator\"\" K(long double n) // { dg-warning \"1:floating point suffix .K. shadowed by implementation\" }\n+operator\"\" K(long double n) // { dg-warning \"1:floating-point suffix .K. shadowed by implementation\" }\n { return 4 * (n + 1) + 1; }\n \n constexpr long double\n-operator\"\" r(long double n) // { dg-warning \"1:floating point suffix .r. shadowed by implementation\" }\n+operator\"\" r(long double n) // { dg-warning \"1:floating-point suffix .r. shadowed by implementation\" }\n { return 4 * (n + 1) + 2; }\n \n constexpr long double\n-operator\"\" R(long double n) // { dg-warning \"1:floating point suffix .R. shadowed by implementation\" }\n+operator\"\" R(long double n) // { dg-warning \"1:floating-point suffix .R. shadowed by implementation\" }\n { return 4 * (n + 1) + 3; }\n \n //  Machine-defined...\n \n constexpr long double\n-operator\"\" w(long double n) // { dg-warning \"1:floating point suffix .w. shadowed by implementation\" }\n+operator\"\" w(long double n) // { dg-warning \"1:floating-point suffix .w. shadowed by implementation\" }\n { return 4 * (n + 2) + 0; }\n \n constexpr long double\n-operator\"\" W(long double n) // { dg-warning \"1:floating point suffix .W. shadowed by implementation\" }\n+operator\"\" W(long double n) // { dg-warning \"1:floating-point suffix .W. shadowed by implementation\" }\n { return 4 * (n + 2) + 1; }\n \n constexpr long double\n-operator\"\" q(long double n) // { dg-warning \"1:floating point suffix .q. shadowed by implementation\" }\n+operator\"\" q(long double n) // { dg-warning \"1:floating-point suffix .q. shadowed by implementation\" }\n { return 4 * (n + 2) + 2; }\n \n constexpr long double\n-operator\"\" Q(long double n) // { dg-warning \"1:floating point suffix .Q. shadowed by implementation\" }\n+operator\"\" Q(long double n) // { dg-warning \"1:floating-point suffix .Q. shadowed by implementation\" }\n { return 4 * (n + 2) + 3; }\n \n int"}, {"sha": "75117c717cfc3acfd2a7725dcb9a5e64141966b7", "filename": "gcc/testsuite/g++.dg/cpp0x/pr42844-2.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr42844-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr42844-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr42844-2.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -34,8 +34,8 @@ struct Derived3 : Base // { dg-message \"user-provided default constructor\" }\n \n void f()\n {\n-    const A a; // { dg-error \"uninitialized const\" }\n-    const Derived d; // { dg-error \"uninitialized const\" }\n-    const Derived2 d2; // { dg-error \"uninitialized const\" }\n-    const Derived3 d3; // { dg-error \"uninitialized const\" }\n+    const A a; // { dg-error \"uninitialized 'const\" }\n+    const Derived d; // { dg-error \"uninitialized 'const\" }\n+    const Derived2 d2; // { dg-error \"uninitialized 'const\" }\n+    const Derived3 d3; // { dg-error \"uninitialized 'const\" }\n }"}, {"sha": "c256257a5c11d5ed9fe04ec7afd690c1e3d1e135", "filename": "gcc/testsuite/g++.dg/cpp0x/pr83993.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr83993.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr83993.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr83993.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -7,7 +7,7 @@ const int b[5] = { 1, 2, 3, 4, 5 };\n extern const int c[4];\n constexpr const int *d = &a[0];\n constexpr const int *d2 = a;\n-constexpr const int *e = &a[1];\t\t// { dg-error \"non-zero array subscript '1' is used with array 'a' of type 'const int \\\\\\[\\\\\\]' with unknown bounds\" }\n+constexpr const int *e = &a[1];\t\t// { dg-error \"nonzero array subscript '1' is used with array 'a' of type 'const int \\\\\\[\\\\\\]' with unknown bounds\" }\n constexpr const int *f = &b[0];\n constexpr const int *f2 = b;\n constexpr const int *g = &b[5];\n@@ -30,7 +30,7 @@ foo ()\n \n constexpr const int *m = &l[0];\n constexpr const int *m2 = l;\n-constexpr const int *n = &l[1];\t\t// { dg-error \"non-zero array subscript '1' is used with array 'l' of type 'const int \\\\\\[\\\\\\]' with unknown bounds\" }\n+constexpr const int *n = &l[1];\t\t// { dg-error \"nonzero array subscript '1' is used with array 'l' of type 'const int \\\\\\[\\\\\\]' with unknown bounds\" }\n static_assert (d == d2 && f == f2 && i == i2 && m == m2, \"\");\n const int o[] = { 1, 2 };\n constexpr const int *p = &o[0];\n@@ -40,7 +40,7 @@ constexpr const int *r = &o[3];\t\t// { dg-error \"array subscript value '3' is out\n struct S { char a; char b[]; } s;\n constexpr const char *t = &s.b[0];\n constexpr const char *t2 = s.b;\n-constexpr const char *u = &s.b[1];\t// { dg-error \"non-zero array subscript '1' is used with array of type 'char \\\\\\[\\\\\\]' with unknown bounds\" }\n+constexpr const char *u = &s.b[1];\t// { dg-error \"nonzero array subscript '1' is used with array of type 'char \\\\\\[\\\\\\]' with unknown bounds\" }\n struct V { int a; };\n extern V v[];\n constexpr V *w = &v[0];"}, {"sha": "d251c7449991cbcbed801d5cceb17ce2924925ff", "filename": "gcc/testsuite/g++.dg/cpp0x/std_fext-numeric-literals.C", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstd_fext-numeric-literals.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstd_fext-numeric-literals.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstd_fext-numeric-literals.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -22,55 +22,55 @@ operator\"\" J(unsigned long long n) // { dg-warning \"1:integer suffix .J. shadowe\n //  Floating-point imaginary...\n \n constexpr long double\n-operator\"\" i(long double n) // { dg-warning \"1:floating point suffix .i. shadowed by implementation\" \"\" { target c++11_only } }\n+operator\"\" i(long double n) // { dg-warning \"1:floating-point suffix .i. shadowed by implementation\" \"\" { target c++11_only } }\n { return 4.0L * n + 0.0L; }\n \n constexpr long double\n-operator\"\" I(long double n) // { dg-warning \"1:floating point suffix .I. shadowed by implementation\" }\n+operator\"\" I(long double n) // { dg-warning \"1:floating-point suffix .I. shadowed by implementation\" }\n { return 4.0L * n + 1.0L; }\n \n constexpr long double\n-operator\"\" j(long double n) // { dg-warning \"1:floating point suffix .j. shadowed by implementation\" }\n+operator\"\" j(long double n) // { dg-warning \"1:floating-point suffix .j. shadowed by implementation\" }\n { return 4.0L * n + 2.0L; }\n \n constexpr long double\n-operator\"\" J(long double n) // { dg-warning \"1:floating point suffix .J. shadowed by implementation\" }\n+operator\"\" J(long double n) // { dg-warning \"1:floating-point suffix .J. shadowed by implementation\" }\n { return 4.0L * n + 3.0L; }\n \n //  Fixed-point...\n \n constexpr long double\n-operator\"\" k(long double n) // { dg-warning \"1:floating point suffix .k. shadowed by implementation\" }\n+operator\"\" k(long double n) // { dg-warning \"1:floating-point suffix .k. shadowed by implementation\" }\n { return 4 * (n + 1) + 0; }\n \n constexpr long double\n-operator\"\" K(long double n) // { dg-warning \"1:floating point suffix .K. shadowed by implementation\" }\n+operator\"\" K(long double n) // { dg-warning \"1:floating-point suffix .K. shadowed by implementation\" }\n { return 4 * (n + 1) + 1; }\n \n constexpr long double\n-operator\"\" r(long double n) // { dg-warning \"1:floating point suffix .r. shadowed by implementation\" }\n+operator\"\" r(long double n) // { dg-warning \"1:floating-point suffix .r. shadowed by implementation\" }\n { return 4 * (n + 1) + 2; }\n \n constexpr long double\n-operator\"\" R(long double n) // { dg-warning \"1:floating point suffix .R. shadowed by implementation\" }\n+operator\"\" R(long double n) // { dg-warning \"1:floating-point suffix .R. shadowed by implementation\" }\n { return 4 * (n + 1) + 3; }\n \n //  Machine-defined...\n \n constexpr long double\n-operator\"\" w(long double n) // { dg-warning \"1:floating point suffix .w. shadowed by implementation\" }\n+operator\"\" w(long double n) // { dg-warning \"1:floating-point suffix .w. shadowed by implementation\" }\n { return 4 * (n + 2) + 0; }\n \n constexpr long double\n-operator\"\" W(long double n) // { dg-warning \"1:floating point suffix .W. shadowed by implementation\" }\n+operator\"\" W(long double n) // { dg-warning \"1:floating-point suffix .W. shadowed by implementation\" }\n { return 4 * (n + 2) + 1; }\n \n constexpr long double\n-operator\"\" q(long double n) // { dg-warning \"1:floating point suffix .q. shadowed by implementation\" }\n+operator\"\" q(long double n) // { dg-warning \"1:floating-point suffix .q. shadowed by implementation\" }\n { return 4 * (n + 2) + 2; }\n \n constexpr long double\n-operator\"\" Q(long double n) // { dg-warning \"1:floating point suffix .Q. shadowed by implementation\" }\n+operator\"\" Q(long double n) // { dg-warning \"1:floating-point suffix .Q. shadowed by implementation\" }\n { return 4 * (n + 2) + 3; }\n \n int"}, {"sha": "fdddd8d84ed05d6ac0d028f9e3a404a7bbf67d2e", "filename": "gcc/testsuite/g++.dg/cpp0x/udlit-shadow-neg.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-shadow-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-shadow-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-shadow-neg.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -2,15 +2,15 @@\n \n //  Test that the standard suffixes shadow any user-defined suffixes of the same name.\n long double\n-operator\"\" L(long double x)  // { dg-warning \"floating point suffix|shadowed by implementation\" }\n+operator\"\" L(long double x)  // { dg-warning \"floating-point suffix|shadowed by implementation\" }\n { return x; }\n \n unsigned long long int\n operator\"\" ULL(unsigned long long int k)  // { dg-warning \"integer suffix|shadowed by implementation\" }\n { return k; }\n \n long double\n-operator\"\" l(long double x)  // { dg-warning \"floating point suffix|shadowed by implementation\" }\n+operator\"\" l(long double x)  // { dg-warning \"floating-point suffix|shadowed by implementation\" }\n { return x; }\n \n unsigned long long int"}, {"sha": "236f6ecb133296695d3defd6643f6a157006bae5", "filename": "gcc/testsuite/g++.dg/cpp1z/inline-var2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var2.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -47,7 +47,7 @@ struct W\n {\n   static inline int var24;\t\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n   static inline const int var25;\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n-\t\t\t\t\t\t// { dg-error \"uninitialized const\" \"\" { target *-*-* } .-1 }\n+\t\t\t\t\t\t// { dg-error \"uninitialized 'const\" \"\" { target *-*-* } .-1 }\n   static inline int var26 = 5;\t\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n   static inline const int var27 = 6;\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n   static inline double var28 = { 4.0 };\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n@@ -90,7 +90,7 @@ struct Z\n {\n   static inline int var37;\t\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n   static inline const int var38;\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n-\t\t\t\t\t\t// { dg-error \"uninitialized const\" \"\" { target *-*-* } .-1 }\n+\t\t\t\t\t\t// { dg-error \"uninitialized 'const\" \"\" { target *-*-* } .-1 }\n   static inline int var39 = 5;\t\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n   static inline const int var40 = 6;\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }\n   static inline double var41 = { 4.0 };\t\t// { dg-warning \"10:inline variables are only available with\" \"\" { target c++14_down } }"}, {"sha": "5e77973d41f7918fc64d9f673423f9a5d2752678", "filename": "gcc/testsuite/g++.dg/cpp2a/decomp3.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdecomp3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdecomp3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdecomp3.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -7,10 +7,10 @@ struct Foo { int a : 1; int b; };\n int main() {\n   auto[a, b] = Foo();\t\t\t// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } }\n \n-  auto f1 = [&] { return a; };\t\t// { dg-error \"cannot bind bitfield\" }\n-  auto f2 = [&a = a] { return a; };\t// { dg-error \"cannot bind bitfield\" }\n+  auto f1 = [&] { return a; };\t\t// { dg-error \"cannot bind bit-field\" }\n+  auto f2 = [&a = a] { return a; };\t// { dg-error \"cannot bind bit-field\" }\n \t\t\t\t\t// { dg-warning \"lambda capture initializers only available with\" \"\" { target c++11_only } .-1 }\n-  auto f3 = [&a] { return a; };\t\t// { dg-error \"cannot bind bitfield\" }\n+  auto f3 = [&a] { return a; };\t\t// { dg-error \"cannot bind bit-field\" }\n \n   auto g1 = [&] { return b; };\n   auto g2 = [&b = b] { return b; };\t// { dg-warning \"lambda capture initializers only available with\" \"\" { target c++11_only } }"}, {"sha": "9b7ed05de0e3c87e4d91adebe503994c86faae22", "filename": "gcc/testsuite/g++.dg/init/pr42844.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr42844.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr42844.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr42844.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -22,22 +22,22 @@ struct G { T t; }; // { dg-message \"user-provided default constructor\" }\n \n void f ()\n {\n-  B const b;    // { dg-error \"uninitialized const\" }\n+  B const b;    // { dg-error \"uninitialized 'const\" }\n   extern B const bext;\n \n-  C const c[ 1 ]; // { dg-error \"uninitialized const\" }\n+  C const c[ 1 ]; // { dg-error \"uninitialized 'const\" }\n   extern C const cext[ 1 ];\n \n   D const d;\n   extern D const dext;\n \n-  E const e;\t// { dg-error \"uninitialized const\" }\n+  E const e;\t// { dg-error \"uninitialized 'const\" }\n   extern E const eext;\n \n-  F<int> const f; // { dg-error \"uninitialized const\" }\n+  F<int> const f; // { dg-error \"uninitialized 'const\" }\n   extern F<int> const fext;\n \n-  G<int> const g; // { dg-error \"uninitialized const\" }\n+  G<int> const g; // { dg-error \"uninitialized 'const\" }\n   extern G<int> const gext;\n }\n \n@@ -48,7 +48,7 @@ struct I : A { int i; }; // { dg-message \"user-provided default constructor\" }\n template <class T>\n void g ()\n {\n-  T const t; // { dg-error \"uninitialized const\" }\n+  T const t; // { dg-error \"uninitialized 'const\" }\n   extern T const text;\n }\n "}, {"sha": "334ed8a75e06bfd8fc614dffedaccb1a06249b73", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr20280.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr20280.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr20280.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr20280.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -44,9 +44,9 @@ void f(X &x, bool b)\n   (void)(b ? x.i : x.k);\n   (void)(b ? x.j : x.k);\n \n-  g (b ? x.i : x.j); // { dg-error \"cannot bind bitfield\" }\n-  g (b ? x.i : x.k); // { dg-error \"cannot bind bitfield\" }\n-  g (b ? x.j : x.k); // { dg-error \"cannot bind bitfield\" }\n+  g (b ? x.i : x.j); // { dg-error \"cannot bind bit-field\" }\n+  g (b ? x.i : x.k); // { dg-error \"cannot bind bit-field\" }\n+  g (b ? x.j : x.k); // { dg-error \"cannot bind bit-field\" }\n \n   // It's not entirely clear whether these should be accepted.  The\n   // conditional expressions are lvalues for sure, and 8.5.3/5 exempts"}, {"sha": "1b23611bdc0d8b600e147eeec19a28efab8ce2dd", "filename": "gcc/testsuite/g++.dg/warn/Wfloat-equal-1.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWfloat-equal-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWfloat-equal-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWfloat-equal-1.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -4,7 +4,7 @@\n \n double a, b;\n _Complex double c, d;\n-int f(void) { return a == b; } /* { dg-warning \"comparing floating point\" } */\n-int g(void) { return c == d; } /* { dg-warning \"comparing floating point\" } */\n-int h(void) { return a != b; } /* { dg-warning \"comparing floating point\" } */\n-int i(void) { return c != d; } /* { dg-warning \"comparing floating point\" } */\n+int f(void) { return a == b; } /* { dg-warning \"comparing floating-point\" } */\n+int g(void) { return c == d; } /* { dg-warning \"comparing floating-point\" } */\n+int h(void) { return a != b; } /* { dg-warning \"comparing floating-point\" } */\n+int i(void) { return c != d; } /* { dg-warning \"comparing floating-point\" } */"}, {"sha": "441ff3482bcc7d2ac14fbd71f89b5dbe10309567", "filename": "gcc/testsuite/g++.dg/warn/Wrestrict-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWrestrict-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWrestrict-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWrestrict-1.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -7,6 +7,6 @@ void foo (char *__restrict, char *__restrict = __null);\n void\n bar (char *p)\n {\n-  foo (p, p);\t// { dg-warning \"to restrict-qualified parameter aliases with\" }\n+  foo (p, p);\t// { dg-warning \"to 'restrict'-qualified parameter aliases with\" }\n   foo (p);\n }"}, {"sha": "72957d0f5512344e5686a7b9b1adbacd45490a55", "filename": "gcc/testsuite/g++.dg/warn/Wrestrict-2.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWrestrict-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWrestrict-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWrestrict-2.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -8,17 +8,17 @@ template <int N>\n void\n bar (char **p)\n {\n-  foo (p[0], p[0]);\t// { dg-warning \"to restrict-qualified parameter aliases with\" }\n-  foo (p[0], p[N]);\t// { dg-warning \"to restrict-qualified parameter aliases with\" }\n+  foo (p[0], p[0]);\t// { dg-warning \"to 'restrict'-qualified parameter aliases with\" }\n+  foo (p[0], p[N]);\t// { dg-warning \"to 'restrict'-qualified parameter aliases with\" }\n   foo (p[0]);\n }\n \n template <int N>\n void\n bar2 (char **p)\n {\n-  foo (p[0], p[0]);\t// { dg-warning \"to restrict-qualified parameter aliases with\" }\n-  foo (p[0], p[N]);\t// { dg-bogus \"to restrict-qualified parameter aliases with\" }\n+  foo (p[0], p[0]);\t// { dg-warning \"to 'restrict'-qualified parameter aliases with\" }\n+  foo (p[0], p[N]);\t// { dg-bogus \"to 'restrict'-qualified parameter aliases with\" }\n   foo (p[0]);\n }\n "}, {"sha": "e869b0f5de94a408995e84946fc1ec52021ac8d9", "filename": "gcc/testsuite/g++.dg/warn/nonnull3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnonnull3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnonnull3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnonnull3.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -16,4 +16,4 @@ void A::bar (B *)\n {\n   foo ((int B::*) nullptr);\n }\n-// { dg-warning \"nonnull argument\" \"\" {target \"*-*-*\"} 0 }\n+// { dg-warning \"'nonnull' argument\" \"\" {target \"*-*-*\"} 0 }"}, {"sha": "fccb25aa7e5dba56f32f43b0e5f9120ff9a7aad5", "filename": "gcc/testsuite/g++.dg/warn/pr8715.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr8715.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr8715.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr8715.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -5,7 +5,7 @@ int foo()\n {\n   unsigned char b = '1';\n \n-  bool x = ~b; /* { dg-warning \"promoted ~unsigned is always non-zero\" } */\n+  bool x = ~b; /* { dg-warning \"promoted bitwise complement of an unsigned value is always nonzero\" } */\n \n   return 0;\n }"}, {"sha": "f4d16e9760bd3f258673e93e94e764c0de4a97a9", "filename": "gcc/testsuite/g++.old-deja/g++.other/cond5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcond5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcond5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcond5.C?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -23,8 +23,8 @@ void fn(int i)\n   int j;\n \n   j = (i ? e1 : e2);    // { dg-warning \"mismatch\" }\n-  d = (i ? e1 : 1.0);   // { dg-warning \"non-enumeral\" }\n-  d = (i ? 1.0 : e2);   // { dg-warning \"non-enumeral\" }\n+  d = (i ? e1 : 1.0);   // { dg-warning \"non-enumerated\" }\n+  d = (i ? 1.0 : e2);   // { dg-warning \"non-enumerated\" }\n   E1 e = (i ? e1 : e1); // ok\n   j = (i ? 1 : e2);     // ok\n   j = (i ? e1 : 1);     // ok"}, {"sha": "b77a3466036741be2c41f7adde6f5db6ce770d60", "filename": "gcc/testsuite/gcc.dg/attr-noinline.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-noinline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-noinline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-noinline.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -3,15 +3,15 @@\n \n extern int t();\n \n-static inline void __attribute__((__noinline__)) function_definition(void) {t();} /* { dg-warning \"inline function \\[^\\n\\]* given attribute noinline\" } */\n+static inline void __attribute__((__noinline__)) function_definition(void) {t();} /* { dg-warning \"inline function \\[^\\n\\]* given attribute 'noinline'\" } */\n \n-static inline void __attribute__((__noinline__)) function_declaration_both_before(void); /* { dg-warning \"inline function \\[^\\n\\]* given attribute noinline\" } */\n+static inline void __attribute__((__noinline__)) function_declaration_both_before(void); /* { dg-warning \"inline function \\[^\\n\\]* given attribute 'noinline'\" } */\n \n static void function_declaration_both_before(void) {t();}\n \n static void function_declaration_both_after(void);\n \n-static inline void __attribute__((__noinline__)) function_declaration_both_after(void); /* { dg-warning \"(inline function \\[^\\n\\]* given attribute noinline|declared inline after its definition)\" } */\n+static inline void __attribute__((__noinline__)) function_declaration_both_after(void); /* { dg-warning \"(inline function \\[^\\n\\]* given attribute .noinline.|declared inline after its definition)\" } */\n \n static void function_declaration_both_after(void) {t();}\n "}, {"sha": "b2485bb7f0bf17b0cf8bc82f62f8004e0dd11a52", "filename": "gcc/testsuite/gcc.dg/attr-noipa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-noipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-noipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-noipa.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -4,7 +4,7 @@\n /* { dg-require-effective-target alloca } */\n \n static inline int __attribute__((noipa))\n-fn1 (void) /* { dg-warning \"inline function \\[^\\n\\]* given attribute noinline\" \"\" } */\n+fn1 (void) /* { dg-warning \"inline function \\[^\\n\\]* given attribute 'noinline'\" \"\" } */\n {\n   return 1;\n }"}, {"sha": "172a4a63e6ad5ba264a9b500d0d115d7e8a87807", "filename": "gcc/testsuite/gcc.dg/attr-weakref-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-weakref-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-weakref-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-weakref-2.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -4,4 +4,4 @@\n typedef int vtype;\n \n extern vtype wv1;\n-extern vtype Wv1a __attribute__((weakref (\"wv1\"))); /* { dg-error \"weakref 'Wv1a' must have static linkage\" } */\n+extern vtype Wv1a __attribute__((weakref (\"wv1\"))); /* { dg-error \"'weakref' symbol 'Wv1a' must have static linkage\" } */"}, {"sha": "335a090d4f974595205223993a21d14a9e0bfce2", "filename": "gcc/testsuite/gcc.dg/cast-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-1.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -24,8 +24,8 @@ f (void)\n   (union u) l; /* { dg-error \"cast to union type from type not present in union\" } */\n   (int) sv; /* { dg-error \"aggregate value used where an integer was expected\" } */\n   (int) uv; /* { dg-error \"aggregate value used where an integer was expected\" } */\n-  (float) sv; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n-  (float) uv; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n+  (float) sv; /* { dg-error \"aggregate value used where a floating-point was expected\" } */\n+  (float) uv; /* { dg-error \"aggregate value used where a floating-point was expected\" } */\n   (_Complex double) sv; /* { dg-error \"aggregate value used where a complex was expected\" } */\n   (_Complex double) uv; /* { dg-error \"aggregate value used where a complex was expected\" } */\n   (void *) sv; /* { dg-error \"cannot convert to a pointer type\" } */"}, {"sha": "2523ac4cbc98a15837a0ee5482061d6d47c45aca", "filename": "gcc/testsuite/gcc.dg/cast-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-2.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -24,8 +24,8 @@ f (void)\n   (union u) l; /* { dg-error \"cast to union type from type not present in union\" } */\n   (int) sv; /* { dg-error \"aggregate value used where an integer was expected\" } */\n   (int) uv; /* { dg-error \"aggregate value used where an integer was expected\" } */\n-  (float) sv; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n-  (float) uv; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n+  (float) sv; /* { dg-error \"aggregate value used where a floating-point was expected\" } */\n+  (float) uv; /* { dg-error \"aggregate value used where a floating-point was expected\" } */\n   (_Complex double) sv; /* { dg-error \"aggregate value used where a complex was expected\" } */\n   (_Complex double) uv; /* { dg-error \"aggregate value used where a complex was expected\" } */\n   (void *) sv; /* { dg-error \"cannot convert to a pointer type\" } */"}, {"sha": "1e3f5f43c54a2d2909a36bf31dcc50658835e003", "filename": "gcc/testsuite/gcc.dg/cast-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-3.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -24,8 +24,8 @@ f (void)\n   (union u) l; /* { dg-error \"cast to union type from type not present in union\" } */\n   (int) sv; /* { dg-error \"aggregate value used where an integer was expected\" } */\n   (int) uv; /* { dg-error \"aggregate value used where an integer was expected\" } */\n-  (float) sv; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n-  (float) uv; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n+  (float) sv; /* { dg-error \"aggregate value used where a floating-point was expected\" } */\n+  (float) uv; /* { dg-error \"aggregate value used where a floating-point was expected\" } */\n   (_Complex double) sv; /* { dg-error \"aggregate value used where a complex was expected\" } */\n   (_Complex double) uv; /* { dg-error \"aggregate value used where a complex was expected\" } */\n   (void *) sv; /* { dg-error \"cannot convert to a pointer type\" } */"}, {"sha": "fcaf22db9b9071f207d8e0db4d5dec28a6ef821f", "filename": "gcc/testsuite/gcc.dg/dfp/cast-bad.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcast-bad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcast-bad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcast-bad.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -31,10 +31,10 @@ f (void)\n   (struct s) d128; /* { dg-error \"conversion to non-scalar type requested\" } */\n   (union u) d128; /* { dg-error \"cast to union type from type not present in union\" } */\n \t\t\n-  (_Decimal32) sv; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n-  (_Decimal32) uv; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n-  (_Decimal64) sv; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n-  (_Decimal64) uv; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n-  (_Decimal128) sv; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n-  (_Decimal128) uv; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n+  (_Decimal32) sv; /* { dg-error \"aggregate value used where a floating-point was expected\" } */\n+  (_Decimal32) uv; /* { dg-error \"aggregate value used where a floating-point was expected\" } */\n+  (_Decimal64) sv; /* { dg-error \"aggregate value used where a floating-point was expected\" } */\n+  (_Decimal64) uv; /* { dg-error \"aggregate value used where a floating-point was expected\" } */\n+  (_Decimal128) sv; /* { dg-error \"aggregate value used where a floating-point was expected\" } */\n+  (_Decimal128) uv; /* { dg-error \"aggregate value used where a floating-point was expected\" } */\n }"}, {"sha": "403b0394298e12180505ab34f0c39cd323d49b9d", "filename": "gcc/testsuite/gcc.dg/dfp/warn-abs-2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fwarn-abs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fwarn-abs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fwarn-abs-2.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -8,16 +8,16 @@\n void tst_decimal (_Decimal32 *p32, _Decimal64 *p64, _Decimal128 *p128)\n {\n   *p32 = abs(*p32);       /* { dg-warning \"using integer absolute value function\" } */\n-  *p64 = fabs(*p64);      /* { dg-warning \"using floating point absolute value function\" } */\n+  *p64 = fabs(*p64);      /* { dg-warning \"using floating-point absolute value function\" } */\n   *p128 = cabsl(*p128);   /* { dg-warning \"using complex absolute value function\" } */\n }\n \n void tst_notdecimal (int *pi, double *pd, long double *pld, complex double *pc)\n {\n-  *pi = __builtin_fabsd32 (*pi);   /* { dg-warning \"using decimal floating point absolute value function\" } */\n-  *pd = __builtin_fabsd64 (*pd);   /* { dg-warning \"using decimal floating point absolute value function\" } */\n-  *pld = __builtin_fabsd64 (*pld); /* { dg-warning \"using decimal floating point absolute value function\" } */\n-  *pc = __builtin_fabsd128 (*pc);  /* { dg-warning \"using decimal floating point absolute value function\" } */\n+  *pi = __builtin_fabsd32 (*pi);   /* { dg-warning \"using decimal floating-point absolute value function\" } */\n+  *pd = __builtin_fabsd64 (*pd);   /* { dg-warning \"using decimal floating-point absolute value function\" } */\n+  *pld = __builtin_fabsd64 (*pld); /* { dg-warning \"using decimal floating-point absolute value function\" } */\n+  *pc = __builtin_fabsd128 (*pc);  /* { dg-warning \"using decimal floating-point absolute value function\" } */\n }\n \n void"}, {"sha": "9d3ea26d6d3ec95037915f3a938e3cc299a31666", "filename": "gcc/testsuite/gcc.dg/enum-mode-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-mode-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-mode-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-mode-1.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -1,10 +1,10 @@\n /* { dg-do compile } */\n \n-enum e1 { A = 256 } __attribute__((__mode__(__byte__))); /* { dg-error \"specified mode too small for enumeral values\" } */\n-enum e2 { B = 256 } __attribute__((__packed__, __mode__(__byte__))); /* { dg-error \"specified mode too small for enumeral values\" } */\n+enum e1 { A = 256 } __attribute__((__mode__(__byte__))); /* { dg-error \"specified mode too small for enumerated values\" } */\n+enum e2 { B = 256 } __attribute__((__packed__, __mode__(__byte__))); /* { dg-error \"specified mode too small for enumerated values\" } */\n \n-enum e3 { C = __INT_MAX__ } __attribute__((__mode__(__QI__))); /* { dg-error \"specified mode too small for enumeral values\" } */\n-enum e4 { D = __INT_MAX__ } __attribute__((__packed__, __mode__(__QI__))); /* { dg-error \"specified mode too small for enumeral values\" } */\n+enum e3 { C = __INT_MAX__ } __attribute__((__mode__(__QI__))); /* { dg-error \"specified mode too small for enumerated values\" } */\n+enum e4 { D = __INT_MAX__ } __attribute__((__packed__, __mode__(__QI__))); /* { dg-error \"specified mode too small for enumerated values\" } */\n \n-enum e5 { E = __INT_MAX__ } __attribute__((__mode__(__HI__))); /* { dg-error \"specified mode too small for enumeral values\" \"\" { xfail int16 } } */\n-enum e6 { F = __INT_MAX__ } __attribute__((__packed__, __mode__(__HI__))); /* { dg-error \"specified mode too small for enumeral values\" \"\" { xfail int16 } } */\n+enum e5 { E = __INT_MAX__ } __attribute__((__mode__(__HI__))); /* { dg-error \"specified mode too small for enumerated values\" \"\" { xfail int16 } } */\n+enum e6 { F = __INT_MAX__ } __attribute__((__packed__, __mode__(__HI__))); /* { dg-error \"specified mode too small for enumerated values\" \"\" { xfail int16 } } */"}, {"sha": "4a64d5460c6fa9054763c1fdf001115c6af8ccb9", "filename": "gcc/testsuite/gcc.dg/format/gcc_diag-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-1.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -1,7 +1,7 @@\n /* Test for GCC diagnostic formats.  */\n /* Origin: Kaveh Ghazi <ghazi@caip.rutgers.edu> */\n /* { dg-do compile } */\n-/* { dg-options \"-Wformat\" } */\n+/* { dg-options \"-Wformat -Wno-format-diag\" } */\n \n #include \"format.h\"\n "}, {"sha": "a976c7aa5191373648bb9ca06f605c54e69ab1ca", "filename": "gcc/testsuite/gcc.dg/format/gcc_diag-11.c", "status": "added", "additions": 455, "deletions": 0, "changes": 455, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-11.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -0,0 +1,455 @@\n+/* Test warnings for common punctuation, quoting, and spelling issues\n+   in GCC diagnostics.\n+   { dg-do compile }\n+   { dg-options \"-Wformat -Wformat-diag\" } */\n+\n+/* Magic identifiers must be set before the attribute is used.  */\n+\n+typedef long long __gcc_host_wide_int__;\n+\n+typedef struct location_s\n+{\n+  const char *file;\n+  int line;\n+} location_t;\n+\n+union tree_node;\n+typedef union tree_node *tree;\n+\n+/* Define gimple as a dummy type.  The typedef must be provided for\n+   the C test to find the symbol.  */\n+typedef struct gimple gimple;\n+\n+/* Likewise for cgraph_node.  */\n+typedef struct cgraph_node cgraph_node;\n+\n+#define ATTR(...)    __attribute__ ((__VA_ARGS__))\n+#define FORMAT(kind) ATTR (format (__gcc_## kind ##__, 1, 2))\n+\n+/* Raw formatting function like pp_format.  */\n+void diag_raw (const char*, ...) ATTR (format (__gcc_diag_raw__, 1, 2));\n+void cdiag_raw (const char*, ...) ATTR (format (__gcc_cdiag_raw__, 1, 2));\n+void tdiag_raw (const char*, ...) ATTR (format (gcc_tdiag_raw, 1, 2));\n+void cxxdiag_raw (const char*, ...) ATTR (format (gcc_cxxdiag_raw, 1, 2));\n+\n+/* Basic formatting function_format.  */\n+void diag (const char*, ...) FORMAT (diag);\n+\n+/* Diagnostic formatting function like error or warning declared\n+   by the C front end.  */\n+void cdiag (const char*, ...) FORMAT (cdiag);\n+\n+/* Diagnostic formatting function like error or warning declared\n+   by the middle-end or back-end.  */\n+void tdiag (const char*, ...) FORMAT (tdiag);\n+\n+/* Diagnostic formatting function like error or warning declared\n+   by the C++ front-end.  */\n+void cxxdiag (const char*, ...) FORMAT (cxxdiag);\n+\n+\n+/* Verify that functions declared with __gcc_diag_raw__ attribute\n+   are not subject to -Wformat-diag.  */\n+\n+void test_diag_raw (tree t, gimple *gc)\n+{\n+  diag_raw (\"a  b\");\n+  diag_raw (\"newline\\n\");\n+  diag_raw (\"lone period.\");\n+  diag_raw (\"multiple punctuators: !!!\");\n+  diag_raw (\"unbalanced paren (\");\n+  diag_raw (\"keyword alignas and identifier_with_underscores\");\n+  diag_raw (\"disable __builtin_abs with the -fno-builtin-abs option\");\n+  diag_raw (\"who says I can't have no stinkin' contractions? \");\n+\n+  cdiag_raw (\"__atomic_sync (%qE) == 7???\", t);\n+  tdiag_raw (\"__builtin_abs (%E) < 0!?!\", t);\n+  cxxdiag_raw (\"template <> int f (%E\", t);\n+}\n+\n+/* Verify that functions declared with the C front-end __gcc_cdiag__\n+   attribute detect invalid whitespace in format strings.  */\n+\n+void test_cdiag_whitespace (tree t, gimple *gc)\n+{\n+  (void)&t; (void)&gc;\n+\n+  /* Verify that strings of leading spaces don't trigger a warning.  */\n+  cdiag (\" a\");\n+  cdiag (\"  b\");\n+  cdiag (\"   c\");\n+  cdiag (\"%< %>a\");\n+  cdiag (\"%<  %>a\");\n+  cdiag (\"a b\");\n+  cdiag (\"a  b\");           /* { dg-warning \"unquoted sequence of 2 consecutive space characters\" } */\n+  cdiag (\"a \");             /* { dg-warning \"spurious trailing space\" } */\n+  cdiag (\"a  \");            /* { dg-warning \"spurious trailing space\" } */\n+  cdiag (\"a%< %>\");\n+  cdiag (\"a%< %>%< %>\");\n+  cdiag (\"a%< %> \");        /* { dg-warning \"spurious trailing space\" } */\n+  cdiag (\"a%< %>  %< %>\");  /* { dg-warning \"unquoted sequence of 2 consecutive space characters\" } */\n+\n+  /* It's debatable whether the following two formst strings should\n+     be diagnosed.  They aren't only because it's simpler that way.  */\n+  cdiag (\"a %< %>\");\n+  cdiag (\"a%< %> %< %>\");\n+\n+  /* Exercise other whitespace characters.  */\n+  cdiag (\"a\\fb\");           /* { dg-warning \"unquoted whitespace character '\\\\\\\\x0c'\" } */\n+  cdiag (\"a\\nb\");           /* { dg-warning \"unquoted whitespace character '\\\\\\\\x0a'\" } */\n+  cdiag (\"a\\rb\");           /* { dg-warning \"unquoted whitespace character '\\\\\\\\x0d'\" } */\n+  cdiag (\"a\\vb\");           /* { dg-warning \"unquoted whitespace character '\\\\\\\\x0b'\" } */\n+\n+  cdiag (\"First sentence.  And a next.\");\n+  cdiag (\"First sentence.  not capitalized sentence\"); /* { dg-warning \"inconsistent capitalization\" } */\n+\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wformat-diag\"\n+\n+  /* Verify that the warning can be suppressed.  */\n+  cdiag (\"\\ta\\b    c\\vb\\n\");\n+\n+#pragma GCC diagnostic pop\n+}\n+\n+\n+void test_cdiag_control (tree t, gimple *gc)\n+{\n+  (void)&t; (void)&gc;\n+\n+  cdiag (\"\\1\");             /* { dg-warning \"unquoted control character '\\\\\\\\x01'\" } */\n+  cdiag (\"a\\ab\");           /* { dg-warning \"unquoted control character '\\\\\\\\x07'\" } */\n+  cdiag (\"a\\bb\");           /* { dg-warning \"unquoted control character '\\\\\\\\x08'\" } */\n+}\n+\n+\n+void test_cdiag_punct (tree t, gimple *gc, int i)\n+{\n+  (void)&t; (void)&gc;\n+\n+  /* Exercise the period.  */\n+  cdiag (\".abc\");           /* { dg-warning \"spurious leading punctuation sequence .\\..\" } */\n+  cdiag (\"abc;\");           /* { dg-warning \"spurious trailing punctuation sequence .;.\" } */\n+  /* Verify that sentences that start with an uppercase letter and end\n+     in a period are not diagnosed.  */\n+  cdiag (\"This is a full sentence.\");\n+  cdiag (\"Capitalized sentence (with a parethetical note).\");\n+  cdiag (\"Not a full sentence;\");   /* { dg-warning \"spurious trailing punctuation sequence .;.\" } */\n+  cdiag (\"Neither is this one,\");   /* { dg-warning \"spurious trailing punctuation sequence .,.\" } */\n+\n+  /* Exercise the ellipsis.  */\n+  cdiag (\"this message...\");\n+  cdiag (\"...continues here\");\n+  cdiag (\"but...not here\"); /* { dg-warning \"unquoted sequence of 3 consecutive punctuation characters\" } */\n+\n+  /* Verify that parenthesized sentences are accepted, even the whole\n+     meesage (done in the C++ front end).  */\n+  cdiag (\"null argument where non-null required (argument %i)\", i);\n+  cdiag (\"null (argument %i) where non-null required\", i);\n+  cdiag (\"(see what comes next)\");\n+\n+  /* Verify that only a single trailing colon is accepted.  */\n+  cdiag (\"candidates are:\");\n+  cdiag (\"candidates are::\"); /* { dg-warning \"spurious trailing punctuation sequence .::.\" } */\n+\n+  /* Exercise C++.  */\n+  cdiag (\"C++ is cool\");\n+  cdiag (\"this is c++\");\n+  cdiag (\"you can do this in C++ but not in C\");\n+\n+  /* Also verify that G++ is accepted.  */\n+  cdiag (\"G++ rocks\");\n+  cdiag (\"this is accepted by g++\");\n+  cdiag (\"valid in G++ (or g++) but not in gcc\");\n+\n+  /* Exercise parenthetical note followed by a colon, semicolon,\n+     or a comma.  */\n+  cdiag (\"found a bug (here):\");\n+  cdiag (\"because of another bug (over there); fix it\");\n+\n+  cdiag (\"found foo (123): go look at it\");\n+  cdiag (\"missed bar (abc); will try harder next time\");\n+\n+  cdiag (\"expected this (or that), got something else (or who knows what)\");\n+\n+  /* Exercise parenthetical note with a question mark.  */\n+  cdiag (\"hmmm (did you really mean that?)\");\n+  cdiag (\"error (did you mean %<foo()%>?)\");\n+  /* And a question mark after a parenthetical note.  */\n+  cdiag (\"did you mean this (or that)?\");\n+\n+  /* But make sure unbalanced parenthese are diagnosed.  */\n+  cdiag (\"or this or the other)?\");   /* { dg-warning \"unbalanced punctuation character '\\\\\\)'\" } */\n+\n+  cdiag (\"## Heading\");               /* { dg-warning \"spurious leading punctuation sequence .##.\" } */\n+  cdiag (\"## %s ##\", \"1\");            /* { dg-warning \"spurious (leading|trailing) punctuation sequence .##.\" } */\n+\n+  cdiag (\"#1 priority\");              /* { dg-warning \"spurious leading punctuation sequence .#.\" } */\n+  cdiag (\"priority #2\");\n+\n+  /* Quoting.  */\n+  cdiag (\"\\\"quoted\\\"\");\n+  cdiag (\"\\\"quoted\\\" string\");\n+  cdiag (\"this is a \\\"string in quotes\\\"\");\n+  cdiag (\"\\\"missing closing quote\");  /* { dg-warning \"unterminated quote character '\\\"'\" } */\n+\n+  /* PR translation/90121 - punctuation character after a space.  */\n+  cdiag (\"bad version : 1\");          /* { dg-warning \"space followed by punctuation character ':'\" } */\n+  cdiag (\"problem ; fix it\");         /* { dg-warning \"space followed by punctuation character ';'\" } */\n+  cdiag (\"End . not.\");               /* { dg-warning \"space followed by punctuation character '.'\" } */\n+  cdiag (\"it is bad , very bad\");     /* { dg-warning \"space followed by punctuation character ','\" } */\n+  cdiag (\"say what ?\");               /* { dg-warning \"space followed by punctuation character '?'\" } */\n+\n+  /* But these are okay after a space.  But should they be?  */\n+  cdiag (\"1 / 2\");\n+  cdiag (\"2 + 3\");\n+  cdiag (\"2 - 3\");\n+}\n+\n+void test_cdiag_punct_balance (tree t, gimple *gc)\n+{\n+  (void)&t; (void)&gc;\n+\n+  /* Less-than and greater than.  */\n+  cdiag (\"a < b\");          /* { dg-warning \"unbalanced punctuation character '<' in format\" } */\n+  cdiag (\"must be > 0\");    /* { dg-warning \"unbalanced punctuation character '>' in format\" } */\n+\n+  cdiag (\"f()\");            /* { dg-warning \"spurious trailing punctuation sequence .\\\\\\(\\\\\\).\" } */\n+  cdiag (\"g(1)\");\n+  cdiag (\"(\");              /* { dg-warning \"spurious leading punctuation character|unbalanced\" } */\n+  cdiag (\"()\");             /* { dg-warning \"spurious leading punctuation sequence\" } */\n+  cdiag (\")\");              /* { dg-warning \"unbalanced punctuation character '\\\\\\)'\" } */\n+  cdiag (\"f()g\");           /* { dg-warning \"unquoted sequence of 2 consecutive punctuation characters\" } */\n+  cdiag (\"illegal operand (1)\");\n+}\n+\n+\n+void test_cdiag_nongraph (tree t, gimple *gc)\n+{\n+  (void)&t; (void)&gc;\n+\n+  cdiag (\"a\\376b\");         /* { dg-warning \"unquoted non-graph character '\\\\\\\\xfe'\" } */\n+  cdiag (\"a\\377b\");         /* { dg-warning \"unquoted non-graph character '\\\\\\\\xff'\" } */\n+}\n+\n+\n+void test_cdiag_attribute (tree t, gimple *gc)\n+{\n+  (void)&t; (void)&gc;\n+\n+  cdiag (\"attribute foo\");\n+  cdiag (\"this is attribute bar\");\n+  cdiag (\"bad __attribute bar\");        /* { dg-warning \"unquoted attribute\" } */\n+  cdiag (\"__attribute__ (foobar) bad\"); /* { dg-warning \"unquoted attribute\" } */\n+  cdiag (\"__attribute__ ((foobar))\");   /* { dg-warning \"unquoted attribute\" } */\n+  cdiag (\"__attribute__ (xxx))\");       /* { dg-warning \"unquoted attribute\" } */\n+  /* { dg-warning \"unbalanced punctuation character '\\\\\\)'\" \"xxx\" { target *-*-* } .-1 } */\n+  cdiag (\"__attribute__ ((yyy)))\");     /* { dg-warning \"unquoted attribute\" } */\n+  /* { dg-warning \"unbalanced punctuation character '\\\\\\)'\" \"yyy\" { target *-*-* } .-1 } */\n+  cdiag (\"__attribute__ ((zzz)\");       /* { dg-warning \"unquoted attribute\" } */\n+  /* { dg-warning \"unbalanced punctuation character '\\\\\\('\" \"zzz\" { target *-*-* } .-1 } */\n+\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wformat-diag\"\n+\n+  /* Verify that the warning can be suppressed.  */\n+  cdiag (\"__attribute__ (((\");\n+\n+#pragma GCC diagnostic pop\n+}\n+\n+void test_cdiag_builtin (tree t, gimple *gc)\n+{\n+  (void)&t; (void)&gc;\n+\n+  cdiag (\"__builtin_abort\");    /* { dg-warning \"unquoted name of built-in function '__builtin_abort'\" } */\n+  cdiag (\"in __builtin_trap\");  /* { dg-warning \"unquoted name of built-in function '__builtin_trap'\" } */\n+  cdiag (\"__builtin_xyz bites\");/* { dg-warning \"unquoted name of built-in function '__builtin_xyz'\" } */\n+\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wformat-diag\"\n+\n+  /* Verify that the warning can be suppressed.  */\n+  cdiag (\"__builtin____with____lots__of__underscores\");\n+\n+#pragma GCC diagnostic pop\n+}\n+\n+\n+void test_cdiag_option (tree t, gimple *gc)\n+{\n+  (void)&t; (void)&gc;\n+\n+  cdiag (\"%<-Wall%>\");\n+  cdiag (\"use option %<-Wextra%> to enable additinal warnings\");\n+\n+  cdiag (\"-O2 is fast\");        /* { dg-warning \"unquoted option name '-O2'\" } */\n+  cdiag (\"but -O3 is faster\");  /* { dg-warning \"unquoted option name '-O3'\" } */\n+\n+  cdiag (\"get --help\");         /* { dg-warning \"unquoted option name '--help'\" } */\n+  cdiag (\"enable -m32\");        /* { dg-warning \"unquoted option name '-m32'\" } */\n+  cdiag (\"value is -12\");\n+  cdiag (\"foo-O2\");\n+  cdiag (\"a-W\");\n+}\n+\n+\n+void test_cdiag_keyword (tree t, gimple *gc)\n+{\n+  cdiag (\"alignasi\");\n+  cdiag (\"malignofer or alignofus\");\n+  cdiag (\"use alignof\");        /* { dg-warning \"unquoted keyword 'alignof'\" } */\n+  cdiag (\"or _Alignof\");        /* { dg-warning \" keyword '_Alignof'\" } */\n+  cdiag (\"_Pragma too\");        /* { dg-warning \" keyword '_Pragma'\" } */\n+\n+  cdiag (\"a #error directive\"); /* { dg-warning \"unquoted preprocessing directive '#error'\" } */\n+  cdiag (\"#include file\");      /* { dg-warning \"unquoted preprocessing directive '#include'\" } */\n+  cdiag (\"but #pragma foobar\"); /* { dg-warning \"unquoted preprocessing directive '#pragma'\" } */\n+  cdiag (\"pragma foobar is okay\");\n+  cdiag (\"or even # pragma is fine\");\n+\n+  /* Exercise qualifiers.  */\n+  cdiag (\"const function\");\n+  cdiag (\"const-qualified variable\"); /* { dg-warning \"unquoted keyword 'const-qualified'\" } */\n+  /* { dg-message \"use '%<const%>-qualified' instead\" \"const-qualified\" { target *-*-* } .-1 } */\n+  cdiag (\"a const %qD\", t);     /* { dg-warning \"unquoted keyword 'const'\" } */\n+  cdiag (\"restrict %qE\", t);    /* { dg-warning \"unquoted keyword 'restrict'\" } */\n+  cdiag (\"volatile %qT\", t);    /* { dg-warning \"unquoted keyword 'volatile'\" } */\n+  cdiag (\"const %qD and restrict %qE or volatile %qT\", t, t, t);\n+  /* { dg-warning \"unquoted keyword 'const'\" \"\" { target *-*-* } .-1 } */\n+  /* { dg-warning \"unquoted keyword 'restrict'\" \"\" { target *-*-* } .-2 } */\n+  /* { dg-warning \"unquoted keyword 'volatile'\" \"\" { target *-*-* } .-3 } */\n+\n+  cdiag (\"an offsetof here\");   /* { dg-warning \"unquoted keyword 'offsetof\" } */\n+  cdiag (\"sizeof x\");           /* { dg-warning \"unquoted keyword 'sizeof\" } */\n+  cdiag (\"have typeof\");        /* { dg-warning \"unquoted keyword 'typeof\" } */\n+\n+  /* Words that are not keywords are so are not expected to be quoted.  */\n+  cdiag (\"break rules\");\n+  cdiag (\"if we continue by default for a short while else do nothing\");\n+  cdiag (\"register a function for unsigned extern to void const reads\");\n+  cdiag (\"or volatile access\");\n+}\n+\n+\n+void test_cdiag_operator (tree t, gimple *gc)\n+{\n+  cdiag (\"x != 0\");             /* { dg-warning \"unquoted operator '!='\" } */\n+  cdiag (\"logical &&\");         /* { dg-warning \"unquoted operator '&&\" } */\n+  cdiag (\"+= operator\");        /* { dg-warning \"unquoted operator '\\\\\\+=\" } */\n+  cdiag (\"a == b\");             /* { dg-warning \"unquoted operator '=='\" } */\n+  cdiag (\"++a\");                /* { dg-warning \"unquoted operator '\\\\\\+\\\\\\+'\" } */\n+  cdiag (\"b--\");                /* { dg-warning \"unquoted operator '--'\" } */\n+  cdiag (\"1 << 2\");             /* { dg-warning \"unquoted operator '<<'\" } */\n+  cdiag (\">> here <<\");         /* { dg-warning \"unquoted operator '>>|<<'\" } */\n+}\n+\n+\n+void test_cdiag_type_name (tree t, gimple *gc)\n+{\n+  cdiag (\"the word character should not be quoted\");\n+  cdiag (\"but char should be\"); /* { dg-warning \"unquoted keyword 'char'\" } */\n+\n+  cdiag (\"unsigned char should be quoted\");     /* { dg-warning \"unquoted type name 'unsigned char'\" } */\n+  cdiag (\"but unsigned character is fine\");\n+\n+  cdiag (\"as should int\");      /* { dg-warning \"unquoted keyword 'int'\" } */\n+  cdiag (\"and signed int\");     /* { dg-warning \"unquoted type name 'signed int'\" } */\n+  cdiag (\"and also unsigned int\");     /* { dg-warning \"unquoted type name 'unsigned int'\" } */\n+  cdiag (\"very long thing\");\n+  cdiag (\"use long long here\"); /* { dg-warning \"unquoted type name 'long long'\" } */\n+\n+  cdiag (\"have a floating type\");\n+  cdiag (\"found float type\");   /* { dg-warning \"unquoted keyword 'float'\" } */\n+\n+  cdiag (\"wchar_t is wide\");    /* { dg-warning \"unquoted identifier or keyword 'wchar_t'\" } */\n+}\n+\n+\n+void test_cdiag_identifier (tree t, gimple *gc)\n+{\n+  (void)&t; (void)&gc;\n+\n+  cdiag (\"private _x ident\");   /* { dg-warning \"unquoted identifier or keyword '_x'\" } */\n+  cdiag (\"and another __y\");    /* { dg-warning \"unquoted identifier or keyword '__y'\" } */\n+  cdiag (\"ident z_ with trailing underscore\");   /* { dg-warning \"unquoted identifier or keyword 'z_'\" } */\n+  cdiag (\"v_ variable\");        /* { dg-warning \"unquoted identifier or keyword 'v_'\" } */\n+  cdiag (\"call foo_bar\");       /* { dg-warning \"unquoted identifier or keyword 'foo_bar'\" } */\n+  cdiag (\"unqoted x_y ident\");  /* { dg-warning \"unquoted identifier or keyword 'x_y'\" } */\n+\n+  cdiag (\"size_t type\");        /* { dg-warning \"unquoted identifier or keyword 'size_t'\" } */\n+  cdiag (\"bigger than INT_MAX\");/* { dg-warning \"unquoted identifier or keyword 'INT_MAX'\" } */\n+\n+  cdiag (\"quoted ident %<a_b%>\");\n+  cdiag (\"another quoted identifier %<x_%> here\");\n+}\n+\n+\n+void test_cdiag_bad_words (tree t, gimple *gc)\n+{\n+  (void)&t; (void)&gc;\n+\n+  cdiag (\"aren't you dumb?\");  /* { dg-warning \"bare apostrophe ''' in format\" } */\n+  cdiag (\"bitfields suck\");    /* { dg-warning \"misspelled term 'bitfields' in format; use 'bit-fields' instead\" } */\n+  cdiag (\"invalid bitfield\");  /* { dg-warning \"misspelled term 'bitfield' in format; use 'bit-field' instead\" } */\n+  cdiag (\"bad builtin function\");  /* { dg-warning \"misspelled term 'builtin function' in format; use 'built-in function' instead\" } */\n+  cdiag (\"bad builtin function\");  /* { dg-warning \"misspelled term 'builtin function' in format; use 'built-in function' instead\" } */\n+  cdiag (\"builtin function x\");    /* { dg-warning \"misspelled term 'builtin function' in format; use 'built-in function' instead\" } */\n+  cdiag (\"builtin functions disabled\");    /* { dg-warning \"misspelled term 'builtin functions' in format; use 'built-in functions' instead\" } */\n+  cdiag (\"enable builtin functions\");      /* { dg-warning \"misspelled term 'builtin functions' in format; use 'built-in functions' instead\" } */\n+  cdiag (\"you can't do that\"); /* { dg-warning \"contraction 'can't' in format\" } */\n+  cdiag (\"you can%'t do that\");/* { dg-warning \"contraction 'can%'t' in format\" } */\n+  cdiag (\"Can%'t touch this.\");/* { dg-warning \"contraction 'Can%'t' in format\" } */\n+  cdiag (\"on the commandline\");/* { dg-warning \"misspelled term 'commandline' in format; use 'command line' instead\" } */\n+  cdiag (\"command line option\");/* { dg-warning \"misspelled term 'command line option' in format; use 'command-line option' instead\" } */\n+  cdiag (\"it mustn't be\");     /* { dg-warning \"contraction 'mustn't' in format\" } */\n+  cdiag (\"isn't that silly?\"); /* { dg-warning \"bare apostrophe ''' in format\" } */\n+\n+  cdiag (\"can not do this\");   /* { dg-warning \"misspelled term 'can not' in format; use 'cannot' instead\" } */\n+  cdiag (\"you can not\");       /* { dg-warning \"misspelled term 'can not' in format; use 'cannot' instead\" } */\n+\n+  /* See PR target/90157 - aarch64: unnecessary abbreviation in diagnostic */\n+  cdiag (\"Mising arg.\");       /* { dg-warning \"misspelled term 'arg' in format; use 'argument' instead\" } */\n+  cdiag (\"2 args: a and b\");   /* { dg-warning \"misspelled term 'args' in format; use 'arguments' instead\" } */\n+  cdiag (\"arg 1\");             /* { dg-warning \"misspelled term 'arg' in format; use 'argument' instead\" } */\n+  cdiag (\"Args are wrong.\");   /* { dg-warning \"misspelled term 'Args' in format; use 'arguments' instead\" } */\n+  cdiag (\"bad arg\");           /* { dg-warning \"misspelled term 'arg' in format; use 'argument' instead\" } */\n+  cdiag (\"two args\");          /* { dg-warning \"misspelled term 'args' in format; use 'arguments' instead\" } */\n+  cdiag (\"args 1 and 2\");      /* { dg-warning \"misspelled term 'args' in format; use 'arguments' instead\" } */\n+\n+  cdiag (\"Reg A\");             /* { dg-warning \"misspelled term 'Reg' in format; use 'register' instead\" } */\n+  cdiag (\"regs A and B\");      /* { dg-warning \"misspelled term 'regs' in format; use 'registers' instead\" } */\n+  cdiag (\"no regs\");           /* { dg-warning \"misspelled term 'regs' in format; use 'registers' instead\" } */\n+\n+  /* Verify words that end in \"arg\" and \"args\" or \"reg\" and \"regs\" are\n+     not diagnosed.  */\n+  cdiag (\"gulmarg and balfarg\");\n+  cdiag (\"ademargs or toshargs\");\n+  cdiag (\"talk to Greg\");\n+  cdiag (\"prepreg is a fabric\");\n+  cdiag (\"there are dregs in my wine\");\n+}\n+\n+\n+void test_cdiag_directive (tree t, gimple *gc)\n+{\n+  (void)&t; (void)&gc;\n+\n+  cxxdiag (\"%<%s%>\", \"\");     /* { dg-warning \"quoted '%s' directive in format\" } */\n+  /* This was asked to be diagnosed in PR #90158 but there, the \\\"%s\\\"\n+     is in parenheses which ends up getting diagnosed because of\n+     the two consecutive punctuation characters, ( and \".  */\n+  cdiag (\"\\\"%s\\\"\", \"\");       /* { dg-warning \"quoted '%s' directive in format\" } */\n+\n+  /* Make sure quoted paired tokens are not diagnosed.  */\n+  cdiag (\"%<'%>\");\n+  cdiag (\"%<\\\"%>\");\n+  cdiag (\"%<<%>\");\n+  cdiag (\"%<>%>\");\n+  cdiag (\"%<(%>\");\n+  cdiag (\"%<)%>\");\n+  cdiag (\"%<[%>\");\n+  cdiag (\"%<]%>\");\n+\n+  cdiag (\"%<'%> %<\\\"%> %<>%> %<<%> %<)%> %<(%> %<]%> %<[%>\");\n+}"}, {"sha": "ab12df1c431b738fde21b46a0c6cc5e65f7caa2a", "filename": "gcc/testsuite/gcc.dg/funroll-loops-all.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Ffunroll-loops-all.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Ffunroll-loops-all.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffunroll-loops-all.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -1,4 +1,4 @@\n /* PR 17594 */\n /* { dg-do compile } */\n /* { dg-options \"-funroll-loops-all\" } */\n-/* { dg-error \"unrecognized command line option '-funroll-loops-all'\" \"\" { target *-*-* } 0 } */\n+/* { dg-error \"unrecognized command-line option '-funroll-loops-all'\" \"\" { target *-*-* } 0 } */"}, {"sha": "80bead8485523c37c6642508546dfe7c9a01ac29", "filename": "gcc/testsuite/gcc.dg/opts-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fopts-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fopts-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fopts-5.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -2,4 +2,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-fstack-limit\" } */\n \n-/* { dg-error \"unrecognized command line option\" \"\" { target *-*-* } 0 } */\n+/* { dg-error \"unrecognized command-line option\" \"\" { target *-*-* } 0 } */"}, {"sha": "c9e5e228a7bfc39750174c6209b7b1d3eab3ebdc", "filename": "gcc/testsuite/gcc.dg/pr28322-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28322-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28322-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28322-2.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -8,5 +8,5 @@ int foo (void)\n   return i;\n }\n \n-/* { dg-warning \"unrecognized command line option .-Wno-foobar.\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"unrecognized command-line option .-Wno-foobar.\" \"\" { target *-*-* } 0 } */\n "}, {"sha": "85926ade9e891aecd8e1a5dc7d2b0d494381a5cd", "filename": "gcc/testsuite/gcc.dg/pr28322-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28322-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28322-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28322-3.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -6,5 +6,5 @@ void foo(void)\n {\n   int i =  1;\n }\n-/* { dg-message \"unrecognized command line option .-fno-foobar.\" \"f\" { target *-*-* } 0 } */\n-/* { dg-message \"unrecognized command line option .-mno-foobar.\" \"m\" { target *-*-* } 0 } */\n+/* { dg-message \"unrecognized command-line option .-fno-foobar.\" \"f\" { target *-*-* } 0 } */\n+/* { dg-message \"unrecognized command-line option .-mno-foobar.\" \"m\" { target *-*-* } 0 } */"}, {"sha": "b3bd811caea6b58e0883bec62e00ae7bf0ca0bb7", "filename": "gcc/testsuite/gcc.dg/pr60087.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60087.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60087.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60087.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -7,8 +7,8 @@ foo (unsigned int ui, int i)\n {\n   const unsigned char uc = 0;\n   _Bool b;\n-  b = 0 != ~uc; /* { dg-warning \"9:promoted ~unsigned is always non-zero\" } */\n-  b = 2 != ~uc; /* { dg-warning \"9:comparison of promoted ~unsigned with constant\" } */\n-  b = uc == ~uc; /* { dg-warning \"10:comparison of promoted ~unsigned with unsigned\" } */\n+  b = 0 != ~uc; /* { dg-warning \"9:promoted bitwise complement of an unsigned value is always nonzero\" } */\n+  b = 2 != ~uc; /* { dg-warning \"9:comparison of promoted bitwise complement of an unsigned value with constant\" } */\n+  b = uc == ~uc; /* { dg-warning \"10:comparison of promoted bitwise complement of an unsigned value with unsigned\" } */\n   b = i == ui; /* { dg-warning \"9:comparison of integer expressions of different signedness\" } */\n }"}, {"sha": "432211935b9a046c0eca20b9f12f8ddb4484a807", "filename": "gcc/testsuite/gcc.dg/pr78957.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78957.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78957.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78957.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -1,6 +1,6 @@\n /* PR driver/78957 */\n /* { dg-do compile } */\n /* { dg-options \"-fno-sso-struct=none\" } */\n-/* { dg-error \"unrecognized command line option\" \"\" { target *-*-* } 0 } */\n+/* { dg-error \"unrecognized command-line option\" \"\" { target *-*-* } 0 } */\n \n int i;"}, {"sha": "2878a48a4d3df5d556c461e8753dbcb9bfed37cb", "filename": "gcc/testsuite/gcc.dg/pr8715.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr8715.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr8715.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr8715.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -7,7 +7,7 @@ int foo()\n {\n   unsigned char b = '1';\n \n-  bool x = ~b; /* { dg-warning \"promoted ~unsigned is always non-zero\" } */\n+  bool x = ~b; /* { dg-warning \"promoted bitwise complement of an unsigned value is always nonzero\" } */\n \n   return 0;\n }"}, {"sha": "d24e076218dded5743c52d5f452db9cf2b1bbbad", "filename": "gcc/testsuite/gcc.dg/simd-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-2.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -33,10 +33,10 @@ hanneke ()\n   foo = a; /* { dg-error \"incompatible types when assigning\" } */\n \n   /* Casted assignment between scalar and SIMD of same size.  */\n-  foo = (typeof (foo)) foo2; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n+  foo = (typeof (foo)) foo2; /* { dg-error \"aggregate value used where a floating-point was expected\" } */\n \n   /* Casted assignment between scalar and SIMD of different size.  */\n-  foo1 = (typeof (foo1)) foo2; /* { dg-error \"aggregate value used where a floating point was expected\" } */\n+  foo1 = (typeof (foo1)) foo2; /* { dg-error \"aggregate value used where a floating-point was expected\" } */\n \n   /* Operators on compatible SIMD types.  */\n   a += b + b;"}, {"sha": "bebb494b6afae87e166be4ee9b03e1355565903d", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-1.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -1,4 +1,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wcoercion\" } */\n-/* { dg-error \"unrecognized command line option '-Wcoercion'; did you mean '-Wconversion'?\"  \"\" { target *-*-* } 0 } */\n+/* { dg-error \"unrecognized command-line option '-Wcoercion'; did you mean '-Wconversion'?\"  \"\" { target *-*-* } 0 } */\n "}, {"sha": "77c6b5494f5753f8498f8a4034e802337e3fdc99", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-10.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -3,4 +3,4 @@\n \n /* { dg-do compile } */\n /* { dg-options \"-fno-if-convert\" } */\n-/* { dg-error \"unrecognized command line option .-fno-if-convert.; did you mean .-fno-if-conversion.?\"  \"\" { target *-*-* } 0 } */\n+/* { dg-error \"unrecognized command-line option .-fno-if-convert.; did you mean .-fno-if-conversion.?\"  \"\" { target *-*-* } 0 } */"}, {"sha": "9fbd944bcafd37ad850a27e93c732ae7c92c3a21", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-12.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -4,4 +4,4 @@\n \n /* { dg-do compile } */\n /* { dg-options \"-fno-stack-protector-explicit\" } */\n-/* { dg-error \"unrecognized command line option .-fno-stack-protector-explicit.; did you mean .-fstack-protector-explicit..\" \"\" { target *-*-* } 0 } */\n+/* { dg-error \"unrecognized command-line option .-fno-stack-protector-explicit.; did you mean .-fstack-protector-explicit..\" \"\" { target *-*-* } 0 } */"}, {"sha": "94db0c5a458b944c740daf842fbb1f71087641d1", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-13.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -2,4 +2,4 @@\n \n /* { dg-do compile } */\n /* { dg-options \"-fsanitize\" } */\n-/* { dg-error \"unrecognized command line option '-fsanitize'; did you mean '-fsanitize='?\"  \"\" { target *-*-* } 0 } */\n+/* { dg-error \"unrecognized command-line option '-fsanitize'; did you mean '-fsanitize='?\"  \"\" { target *-*-* } 0 } */"}, {"sha": "26694f945a8b7ee35a83577e45d7fc1eea2459b2", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-18.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-18.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -1,3 +1,3 @@\n /* { dg-do compile } */\n /* { dg-options \"-fprofile-update\" } */\n-/* { dg-error \"unrecognized command line option '-fprofile-update'; did you mean '-fprofile-update='?\"  \"\" { target *-*-* } 0 } */\n+/* { dg-error \"unrecognized command-line option '-fprofile-update'; did you mean '-fprofile-update='?\"  \"\" { target *-*-* } 0 } */"}, {"sha": "68e85a71d77ad84315b1173d77152cdaee9d496a", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-19.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-19.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -1,3 +1,3 @@\n /* { dg-do compile } */\n /* { dg-options \"-fno-sanitize\" } */\n-/* { dg-error \"unrecognized command line option '-fno-sanitize'; did you mean '-fno-sanitize='?\"  \"\" { target *-*-* } 0 } */\n+/* { dg-error \"unrecognized command-line option '-fno-sanitize'; did you mean '-fno-sanitize='?\"  \"\" { target *-*-* } 0 } */"}, {"sha": "5156ad3ef1752303cfdbbfcb678415bbc799f9c2", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-2.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wthis-should-not-get-a-hint\" } */\n /* { dg-bogus \"did you mean\" \"\" { target *-*-* } 0 } */\n-/* { dg-error \"unrecognized command line option '-Wthis-should-not-get-a-hint'\"  \"\" { target *-*-* } 0 } */\n+/* { dg-error \"unrecognized command-line option '-Wthis-should-not-get-a-hint'\"  \"\" { target *-*-* } 0 } */\n "}, {"sha": "d856d5a081050772dcbc4821ebe26c8a81e0811e", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-20.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-20.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -1,3 +1,3 @@\n /* { dg-do compile } */\n /* { dg-options \"-Walloc-size-larger-than\" } */\n-/* { dg-error \"unrecognized command line option '-Walloc-size-larger-than'; did you mean '-Walloc-size-larger-than='?\"  \"\" { target *-*-* } 0 } */\n+/* { dg-error \"unrecognized command-line option '-Walloc-size-larger-than'; did you mean '-Walloc-size-larger-than='?\"  \"\" { target *-*-* } 0 } */"}, {"sha": "cecc50299bbda4d9cc81371b1ee80d12d2ded944", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-3.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -3,4 +3,4 @@\n \n /* { dg-do compile } */\n /* { dg-options \"-sanitize=address\" } */\n-/* { dg-error \"unrecognized command line option '-sanitize=address'; did you mean '-fsanitize=address'?\"  \"\" { target *-*-* } 0 } */\n+/* { dg-error \"unrecognized command-line option '-sanitize=address'; did you mean '-fsanitize=address'?\"  \"\" { target *-*-* } 0 } */"}, {"sha": "ab730edea939245130f04793ad97ca581d9fdd54", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-4.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -3,4 +3,4 @@\n \n /* { dg-do compile } */\n /* { dg-options \"-sanitize-recover=integer-divide-by-0\" } */\n-/* { dg-error \"unrecognized command line option '-sanitize-recover=integer-divide-by-0'; did you mean '-fsanitize-recover=integer-divide-by-zero'?\"  \"\" { target *-*-* } 0 } */\n+/* { dg-error \"unrecognized command-line option '-sanitize-recover=integer-divide-by-0'; did you mean '-fsanitize-recover=integer-divide-by-zero'?\"  \"\" { target *-*-* } 0 } */"}, {"sha": "097faf0bce139c2ee7d8ed3e0cda75cb7132d2d6", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-5.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -3,4 +3,4 @@\n \n /* { dg-do compile } */\n /* { dg-options \"-no-sanitize=all\" } */\n-/* { dg-error \"unrecognized command line option '-no-sanitize=all'; did you mean '-fno-sanitize=all'?\"  \"\" { target *-*-* } 0 } */\n+/* { dg-error \"unrecognized command-line option '-no-sanitize=all'; did you mean '-fno-sanitize=all'?\"  \"\" { target *-*-* } 0 } */"}, {"sha": "591e21461385ca1b52d8a308a09a0e71c3f14b3f", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-6.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -3,4 +3,4 @@\n \n /* { dg-do compile } */\n /* { dg-options \"-fwarn-no-abi-tag\" } */\n-/* { dg-error \"unrecognized command line option '-fwarn-no-abi-tag'; did you mean '--warn-no-abi-tag'?\"  \"\" { target *-*-* } 0 } */\n+/* { dg-error \"unrecognized command-line option '-fwarn-no-abi-tag'; did you mean '--warn-no-abi-tag'?\"  \"\" { target *-*-* } 0 } */"}, {"sha": "277d7d46876df82c731d1b3bfd5ad73c96ccbcb4", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-7.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -3,4 +3,4 @@\n \n /* { dg-do compile } */\n /* { dg-options \"-tls-model=global-dynamic\" } */\n-/* { dg-error \"unrecognized command line option '-tls-model=global-dynamic'; did you mean '-ftls-model=global-dynamic'?\"  \"\" { target *-*-* } 0 } */\n+/* { dg-error \"unrecognized command-line option '-tls-model=global-dynamic'; did you mean '-ftls-model=global-dynamic'?\"  \"\" { target *-*-* } 0 } */"}, {"sha": "43cd5ac31fa7ebe912f9a2594448213b90afa469", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-8.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -3,4 +3,4 @@\n \n /* { dg-do compile } */\n /* { dg-options \"--Wno-narrowing\" } */\n-/* { dg-error \"unrecognized command line option '--Wno-narrowing'; did you mean '-Wno-narrowing'?\"  \"\" { target *-*-* } 0 } */\n+/* { dg-error \"unrecognized command-line option '--Wno-narrowing'; did you mean '-Wno-narrowing'?\"  \"\" { target *-*-* } 0 } */"}, {"sha": "509f9e5936b03e310ff13689552d0505ac24019b", "filename": "gcc/testsuite/gcc.dg/spellcheck-options-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-options-9.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -3,4 +3,4 @@\n \n /* { dg-do compile } */\n /* { dg-options \"-fmo-unroll-loops\" } */\n-/* { dg-error \"unrecognized command line option '-fmo-unroll-loops'; did you mean '-fno-unroll-loops'?\"  \"\" { target *-*-* } 0 } */\n+/* { dg-error \"unrecognized command-line option '-fmo-unroll-loops'; did you mean '-fno-unroll-loops'?\"  \"\" { target *-*-* } 0 } */"}, {"sha": "ccd61efbe1e15e0005d88c8a7567ccf96f129d8b", "filename": "gcc/testsuite/gcc.dg/warn-abs-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-abs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-abs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-abs-1.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -34,9 +34,9 @@ tst_notint (float *pf, double *pd, _Complex double *pc)\n void\n tst_notfloat (int *pi, long *pl, complex double *pc)\n {\n-  *pi = fabsf (*pi);  /* { dg-warning \"using floating point absolute value function\" } */\n-  *pl = fabs (*pl);   /* { dg-warning \"using floating point absolute value function\" } */\n-  *pc = fabs (*pc);   /* { dg-warning \"using floating point absolute value function\" } */\n+  *pi = fabsf (*pi);  /* { dg-warning \"using floating-point absolute value function\" } */\n+  *pl = fabs (*pl);   /* { dg-warning \"using floating-point absolute value function\" } */\n+  *pc = fabs (*pc);   /* { dg-warning \"using floating-point absolute value function\" } */\n }\n \n void"}, {"sha": "f5b5d41c9f57e66d397dff2ac9b34a228ac83571", "filename": "gcc/testsuite/gcc.target/i386/spellcheck-options-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspellcheck-options-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspellcheck-options-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspellcheck-options-5.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -2,4 +2,4 @@\n \n /* { dg-do compile { target *-*-linux* *-*-gnu* } } */\n /* { dg-options \"-mandroidX\" } */\n-/* { dg-error \"unrecognized command line option '-mandroidX'; did you mean '-mandroid'\"  \"\" { target *-*-* } 0 } */\n+/* { dg-error \"unrecognized command-line option '-mandroidX'; did you mean '-mandroid'\"  \"\" { target *-*-* } 0 } */"}, {"sha": "050d9bf9f1c9e73df11460dd01f11372b9f11a85", "filename": "gcc/testsuite/obj-c++.dg/property/dotsyntax-17.mm", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdotsyntax-17.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdotsyntax-17.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdotsyntax-17.mm?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -35,19 +35,19 @@ int main (void)\n {\n   MyRootClass *object = [[MyRootClass alloc] init];\n \n-  object.count = 10; /* { dg-error \"readonly property cannot be set\" } */\n+  object.count = 10; /* { dg-error \"'readonly' property cannot be set\" } */\n   if (object.count != 10) /* Ok */\n     abort ();\n \n   /* Test errors when trying to change a readonly property using\n      pre/post increment/decrement operators.  */\n-  object.count++; /* { dg-error \"readonly property cannot be set\" } */\n+  object.count++; /* { dg-error \"'readonly' property cannot be set\" } */\n \n-  ++object.count; /* { dg-error \"readonly property cannot be set\" } */\n+  ++object.count; /* { dg-error \"'readonly' property cannot be set\" } */\n \n-  object.count--; /* { dg-error \"readonly property cannot be set\" } */\n+  object.count--; /* { dg-error \"'readonly' property cannot be set\" } */\n \n-  --object.count; /* { dg-error \"readonly property cannot be set\" } */\n+  --object.count; /* { dg-error \"'readonly' property cannot be set\" } */\n \n   /* Test errors when trying to change something using Objective-C 2.0\n      dot-syntax but there is a setter but no getter.  */"}, {"sha": "d721ed1295e2b62391b590a57612dcef674fa67d", "filename": "gcc/testsuite/obj-c++.dg/property/property-neg-7.mm", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-7.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-7.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-7.mm?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -13,8 +13,8 @@ @implementation NSArray\n \n void foo (NSArray *ans[], id pid, id apid[], int i) {\n     NSArray *test;\n-    test.count = 1; /* { dg-error \"readonly property cannot be set\" } */\n-    ((NSArray *)pid).count = 1;  /* { dg-error \"readonly property cannot be set\" } */\n-    ((NSArray *)apid[i]).count = 1; /* { dg-error \"readonly property cannot be set\" } */\n-    ans[i].count = 3; /* { dg-error \"readonly property cannot be set\" } */\n+    test.count = 1; /* { dg-error \"'readonly' property cannot be set\" } */\n+    ((NSArray *)pid).count = 1;  /* { dg-error \"'readonly' property cannot be set\" } */\n+    ((NSArray *)apid[i]).count = 1; /* { dg-error \"'readonly' property cannot be set\" } */\n+    ans[i].count = 3; /* { dg-error \"'readonly' property cannot be set\" } */\n }"}, {"sha": "050d9bf9f1c9e73df11460dd01f11372b9f11a85", "filename": "gcc/testsuite/objc.dg/property/dotsyntax-17.m", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdotsyntax-17.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdotsyntax-17.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdotsyntax-17.m?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -35,19 +35,19 @@ int main (void)\n {\n   MyRootClass *object = [[MyRootClass alloc] init];\n \n-  object.count = 10; /* { dg-error \"readonly property cannot be set\" } */\n+  object.count = 10; /* { dg-error \"'readonly' property cannot be set\" } */\n   if (object.count != 10) /* Ok */\n     abort ();\n \n   /* Test errors when trying to change a readonly property using\n      pre/post increment/decrement operators.  */\n-  object.count++; /* { dg-error \"readonly property cannot be set\" } */\n+  object.count++; /* { dg-error \"'readonly' property cannot be set\" } */\n \n-  ++object.count; /* { dg-error \"readonly property cannot be set\" } */\n+  ++object.count; /* { dg-error \"'readonly' property cannot be set\" } */\n \n-  object.count--; /* { dg-error \"readonly property cannot be set\" } */\n+  object.count--; /* { dg-error \"'readonly' property cannot be set\" } */\n \n-  --object.count; /* { dg-error \"readonly property cannot be set\" } */\n+  --object.count; /* { dg-error \"'readonly' property cannot be set\" } */\n \n   /* Test errors when trying to change something using Objective-C 2.0\n      dot-syntax but there is a setter but no getter.  */"}, {"sha": "d721ed1295e2b62391b590a57612dcef674fa67d", "filename": "gcc/testsuite/objc.dg/property/property-neg-7.m", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-7.m?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -13,8 +13,8 @@ @implementation NSArray\n \n void foo (NSArray *ans[], id pid, id apid[], int i) {\n     NSArray *test;\n-    test.count = 1; /* { dg-error \"readonly property cannot be set\" } */\n-    ((NSArray *)pid).count = 1;  /* { dg-error \"readonly property cannot be set\" } */\n-    ((NSArray *)apid[i]).count = 1; /* { dg-error \"readonly property cannot be set\" } */\n-    ans[i].count = 3; /* { dg-error \"readonly property cannot be set\" } */\n+    test.count = 1; /* { dg-error \"'readonly' property cannot be set\" } */\n+    ((NSArray *)pid).count = 1;  /* { dg-error \"'readonly' property cannot be set\" } */\n+    ((NSArray *)apid[i]).count = 1; /* { dg-error \"'readonly' property cannot be set\" } */\n+    ans[i].count = 3; /* { dg-error \"'readonly' property cannot be set\" } */\n }"}, {"sha": "94b258498dc54c89b1a7b2b4b3cc4f8c123e6737", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -3619,7 +3619,7 @@ verify_gimple_assign_unary (gassign *stmt)\n \t    && (!VECTOR_INTEGER_TYPE_P (rhs1_type)\n \t        || !VECTOR_FLOAT_TYPE_P (lhs_type)))\n \t  {\n-\t    error (\"invalid types in conversion to floating point\");\n+\t    error (\"invalid types in conversion to floating-point\");\n \t    debug_generic_expr (lhs_type);\n \t    debug_generic_expr (rhs1_type);\n \t    return true;\n@@ -4811,7 +4811,7 @@ verify_gimple_label (glabel *stmt)\n   if (!DECL_NONLOCAL (decl) && !FORCED_LABEL (decl)\n       && DECL_CONTEXT (decl) != current_function_decl)\n     {\n-      error (\"label%'s context is not the current function decl\");\n+      error (\"label context is not the current function declaration\");\n       err |= true;\n     }\n "}, {"sha": "23c56b5661a1cdb0cc1f1b865c4b161e1d921f66", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -4728,6 +4728,14 @@ make_pass_cleanup_eh (gcc::context *ctxt)\n   return new pass_cleanup_eh (ctxt);\n }\n \f\n+/* Disable warnings about missing quoting in GCC diagnostics for\n+   the verification errors.  Their format strings don't follow GCC\n+   diagnostic conventions but are only used for debugging.  */\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic push\n+#  pragma GCC diagnostic ignored \"-Wformat-diag\"\n+#endif\n+\n /* Verify that BB containing STMT as the last statement, has precisely the\n    edge that make_eh_edges would create.  */\n \n@@ -4874,3 +4882,7 @@ verify_eh_dispatch_edge (geh_dispatch *stmt)\n \n   return false;\n }\n+\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic pop\n+#endif"}, {"sha": "455579c12903bbf03499cf857d7849d6d8ed2fd1", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -35,6 +35,13 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gomp-constants.h\"\n #include \"gimple.h\"\n \n+/* Disable warnings about quoting issues in the pp_xxx calls below\n+   that (intentionally) don't follow GCC diagnostic conventions.  */\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic push\n+#  pragma GCC diagnostic ignored \"-Wformat-diag\"\n+#endif\n+\n /* Local functions, macros and variables.  */\n static const char *op_symbol (const_tree);\n static void pretty_print_string (pretty_printer *, const char*, unsigned);\n@@ -4250,3 +4257,7 @@ pp_double_int (pretty_printer *pp, double_int d, bool uns)\n       pp_string (pp, pp_buffer (pp)->digit_buffer);\n     }\n }\n+\n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic pop\n+#endif"}, {"sha": "e643b33a6b00ba9d729697ca3f99bd4d9c4626c3", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -974,14 +974,14 @@ verify_ssa_operands (struct function *fn, gimple *stmt)\n     def = SSA_NAME_VAR (def);\n   if (build_vdef != def)\n     {\n-      error (\"virtual definition of statement not up-to-date\");\n+      error (\"virtual definition of statement not up to date\");\n       return true;\n     }\n   if (gimple_vdef (stmt)\n       && ((def_p = gimple_vdef_op (stmt)) == NULL_DEF_OPERAND_P\n \t  || DEF_FROM_PTR (def_p) != gimple_vdef (stmt)))\n     {\n-      error (\"virtual def operand missing for stmt\");\n+      error (\"virtual def operand missing for statement\");\n       return true;\n     }\n \n@@ -991,14 +991,14 @@ verify_ssa_operands (struct function *fn, gimple *stmt)\n     use = SSA_NAME_VAR (use);\n   if (build_vuse != use)\n     {\n-      error (\"virtual use of statement not up-to-date\");\n+      error (\"virtual use of statement not up to date\");\n       return true;\n     }\n   if (gimple_vuse (stmt)\n       && ((use_p = gimple_vuse_op (stmt)) == NULL_USE_OPERAND_P\n \t  || USE_FROM_PTR (use_p) != gimple_vuse (stmt)))\n     {\n-      error (\"virtual use operand missing for stmt\");\n+      error (\"virtual use operand missing for statement\");\n       return true;\n     }\n \n@@ -1015,7 +1015,7 @@ verify_ssa_operands (struct function *fn, gimple *stmt)\n \t}\n       if (i == build_uses.length ())\n \t{\n-\t  error (\"excess use operand for stmt\");\n+\t  error (\"excess use operand for statement\");\n \t  debug_generic_expr (USE_FROM_PTR (use_p));\n \t  return true;\n \t}\n@@ -1025,14 +1025,14 @@ verify_ssa_operands (struct function *fn, gimple *stmt)\n   FOR_EACH_VEC_ELT (build_uses, i, op)\n     if (op != NULL)\n       {\n-\terror (\"use operand missing for stmt\");\n+\terror (\"use operand missing for statement\");\n \tdebug_generic_expr (*op);\n \treturn true;\n       }\n \n   if (gimple_has_volatile_ops (stmt) != volatile_p)\n     {\n-      error (\"stmt volatile flag not up-to-date\");\n+      error (\"statement volatile flag not up to date\");\n       return true;\n     }\n "}, {"sha": "4b6fa449d572d646359322c95b09395eccde9f12", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -627,6 +627,15 @@ release_defs_bitset (bitmap toremove)\n \n }\n \n+/* Disable warnings about missing quoting in GCC diagnostics for\n+   the verification errors.  Their format strings don't follow GCC\n+   diagnostic conventions and the calls are ultimately followed by\n+   one to internal_error.  */\n+#if __GNUC__ > 10\n+#  pragma GCC diagnostic push\n+#  pragma GCC diagnostic ignored \"-Wformat-diag\"\n+#endif\n+\n /* Verify virtual SSA form.  */\n \n bool\n@@ -1193,6 +1202,9 @@ verify_ssa (bool check_modified_stmt, bool check_ssa_operands)\n   internal_error (\"verify_ssa failed\");\n }\n \n+#if __GNUC__ >= 10\n+#  pragma GCC diagnostic pop\n+#endif\n \n /* Initialize global DFA and SSA structures.  */\n "}, {"sha": "626a4c9f9a0dfcfc10b6831ed3e9384fe50f5d53", "filename": "gcc/varasm.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ecf545c6e542cc5eee78eac97d200b55e11001f/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=0ecf545c6e542cc5eee78eac97d200b55e11001f", "patch": "@@ -5904,7 +5904,7 @@ do_assemble_alias (tree decl, tree target)\n       else\n #endif\n \terror_at (DECL_SOURCE_LOCATION (decl),\n-\t\t  \"ifunc is not supported on this target\");\n+\t\t  \"%qs is not supported on this target\", \"ifunc\");\n     }\n \n # ifdef ASM_OUTPUT_DEF_FROM_DECLS\n@@ -5962,9 +5962,9 @@ assemble_alias (tree decl, tree target)\n       ultimate_transparent_alias_target (&target);\n \n       if (alias == target)\n-\terror (\"weakref %q+D ultimately targets itself\", decl);\n+\terror (\"%qs symbol %q+D ultimately targets itself\", \"weakref\", decl);\n       if (TREE_PUBLIC (decl))\n-\terror (\"weakref %q+D must have static linkage\", decl);\n+\terror (\"%qs symbol %q+D must have static linkage\", \"weakref\", decl);\n     }\n   else\n     {\n@@ -5981,7 +5981,7 @@ assemble_alias (tree decl, tree target)\n \t  if (TREE_CODE (decl) == FUNCTION_DECL\n \t      && lookup_attribute (\"ifunc\", DECL_ATTRIBUTES (decl)))\n \t    error_at (DECL_SOURCE_LOCATION (decl),\n-\t\t      \"ifunc is not supported in this configuration\");\n+\t\t      \"%qs is not supported in this configuration\", \"ifunc\");\n \t  else\n \t    error_at (DECL_SOURCE_LOCATION (decl),\n \t\t      \"only weak aliases are supported in this configuration\");"}]}