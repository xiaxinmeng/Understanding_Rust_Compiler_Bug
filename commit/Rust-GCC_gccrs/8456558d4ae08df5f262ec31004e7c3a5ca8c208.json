{"sha": "8456558d4ae08df5f262ec31004e7c3a5ca8c208", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ1NjU1OGQ0YWUwOGRmNWYyNjJlYzMxMDA0ZTdjM2E1Y2E4YzIwOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-04-15T14:02:41Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-04-15T14:02:41Z"}, "message": "re PR tree-optimization/48290 (FAIL: gcc.dg/vect/pr38529.c, ICE in vect_get_vec_def_for_operand, at tree-vect-stmts.c:1072)\n\n2011-04-15  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/48290\n\t* tree-ssa-copy.c (copy_prop_visit_phi_node): Propagate constants.\n\tProperly decide inhibiting propagation based on the valueized\n\toperand.  Do loop-closed SSA form preserving here ...\n\t(init_copy_prop): ... not here.\n\nFrom-SVN: r172494", "tree": {"sha": "a0479446a1479564f7aabaab2cb134ec04a04a74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0479446a1479564f7aabaab2cb134ec04a04a74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8456558d4ae08df5f262ec31004e7c3a5ca8c208", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8456558d4ae08df5f262ec31004e7c3a5ca8c208", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8456558d4ae08df5f262ec31004e7c3a5ca8c208", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8456558d4ae08df5f262ec31004e7c3a5ca8c208/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "266446be6f7905ccadfc3bfd1fc290dfa48596f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/266446be6f7905ccadfc3bfd1fc290dfa48596f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/266446be6f7905ccadfc3bfd1fc290dfa48596f7"}], "stats": {"total": 89, "additions": 47, "deletions": 42}, "files": [{"sha": "9f091f28256ee4873f0a1ced62f49df366750c60", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8456558d4ae08df5f262ec31004e7c3a5ca8c208/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8456558d4ae08df5f262ec31004e7c3a5ca8c208/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8456558d4ae08df5f262ec31004e7c3a5ca8c208", "patch": "@@ -1,3 +1,11 @@\n+2011-04-15  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/48290\n+\t* tree-ssa-copy.c (copy_prop_visit_phi_node): Propagate constants.\n+\tProperly decide inhibiting propagation based on the valueized\n+\toperand.  Do loop-closed SSA form preserving here ...\n+\t(init_copy_prop): ... not here.\n+\n 2011-04-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/48612"}, {"sha": "211d7de23c423f999460f6191f88a45ad7c2c07d", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 39, "deletions": 42, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8456558d4ae08df5f262ec31004e7c3a5ca8c208/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8456558d4ae08df5f262ec31004e7c3a5ca8c208/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=8456558d4ae08df5f262ec31004e7c3a5ca8c208", "patch": "@@ -567,6 +567,7 @@ copy_prop_visit_phi_node (gimple phi)\n   for (i = 0; i < gimple_phi_num_args (phi); i++)\n     {\n       prop_value_t *arg_val;\n+      tree arg_value;\n       tree arg = gimple_phi_arg_def (phi, i);\n       edge e = gimple_phi_arg_edge (phi, i);\n \n@@ -575,24 +576,9 @@ copy_prop_visit_phi_node (gimple phi)\n       if (!(e->flags & EDGE_EXECUTABLE))\n \tcontinue;\n \n-      /* Constants in the argument list never generate a useful copy.\n-\t Similarly, names that flow through abnormal edges cannot be\n-\t used to derive copies.  */\n-      if (TREE_CODE (arg) != SSA_NAME || SSA_NAME_OCCURS_IN_ABNORMAL_PHI (arg))\n-\t{\n-\t  phi_val.value = lhs;\n-\t  break;\n-\t}\n-\n-      /* Avoid copy propagation from an inner into an outer loop.\n-\t Otherwise, this may move loop variant variables outside of\n-\t their loops and prevent coalescing opportunities.  If the\n-\t value was loop invariant, it will be hoisted by LICM and\n-\t exposed for copy propagation.  Not a problem for virtual\n-\t operands though.\n-\t ???  The value will be always loop invariant.  */\n-      if (is_gimple_reg (lhs)\n-\t  && loop_depth_of_name (arg) > loop_depth_of_name (lhs))\n+      /* Names that flow through abnormal edges cannot be used to\n+\t derive copies.  */\n+      if (TREE_CODE (arg) == SSA_NAME && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (arg))\n \t{\n \t  phi_val.value = lhs;\n \t  break;\n@@ -605,26 +591,51 @@ copy_prop_visit_phi_node (gimple phi)\n \t  fprintf (dump_file, \"\\n\");\n \t}\n \n-      arg_val = get_copy_of_val (arg);\n+      if (TREE_CODE (arg) == SSA_NAME)\n+\t{\n+\t  arg_val = get_copy_of_val (arg);\n+\n+\t  /* If we didn't visit the definition of arg yet treat it as\n+\t     UNDEFINED.  This also handles PHI arguments that are the\n+\t     same as lhs.  We'll come here again.  */\n+\t  if (!arg_val->value)\n+\t    continue;\n \n-      /* If we didn't visit the definition of arg yet treat it as\n-         UNDEFINED.  This also handles PHI arguments that are the\n-\t same as lhs.  We'll come here again.  */\n-      if (!arg_val->value)\n-\tcontinue;\n+\t  arg_value = arg_val->value;\n+\t}\n+      else\n+\targ_value = valueize_val (arg);\n+\n+      /* Avoid copy propagation from an inner into an outer loop.\n+\t Otherwise, this may move loop variant variables outside of\n+\t their loops and prevent coalescing opportunities.  If the\n+\t value was loop invariant, it will be hoisted by LICM and\n+\t exposed for copy propagation.\n+\t ???  The value will be always loop invariant.\n+\t In loop-closed SSA form do not copy-propagate through\n+\t PHI nodes in blocks with a loop exit edge predecessor.  */\n+      if (current_loops\n+\t  && TREE_CODE (arg_value) == SSA_NAME\n+\t  && (loop_depth_of_name (arg_value) > loop_depth_of_name (lhs)\n+\t      || (loops_state_satisfies_p (LOOP_CLOSED_SSA)\n+\t\t  && loop_exit_edge_p (e->src->loop_father, e))))\n+\t{\n+\t  phi_val.value = lhs;\n+\t  break;\n+\t}\n \n       /* If the LHS didn't have a value yet, make it a copy of the\n \t first argument we find.   */\n       if (phi_val.value == NULL_TREE)\n \t{\n-\t  phi_val.value = arg_val->value;\n+\t  phi_val.value = arg_value;\n \t  continue;\n \t}\n \n       /* If PHI_VAL and ARG don't have a common copy-of chain, then\n \t this PHI node cannot be a copy operation.  */\n-      if (phi_val.value != arg_val->value\n-\t  && !operand_equal_p (phi_val.value, arg_val->value, 0))\n+      if (phi_val.value != arg_value\n+\t  && !operand_equal_p (phi_val.value, arg_value, 0))\n \t{\n \t  phi_val.value = lhs;\n \t  break;\n@@ -669,7 +680,6 @@ init_copy_prop (void)\n     {\n       gimple_stmt_iterator si;\n       int depth = bb->loop_depth;\n-      bool loop_exit_p = false;\n \n       for (si = gsi_start_bb (bb); !gsi_end_p (si); gsi_next (&si))\n \t{\n@@ -706,26 +716,13 @@ init_copy_prop (void)\n \t      set_copy_of_val (def, def);\n \t}\n \n-      /* In loop-closed SSA form do not copy-propagate through\n-\t PHI nodes in blocks with a loop exit edge predecessor.  */\n-      if (current_loops\n-\t  && loops_state_satisfies_p (LOOP_CLOSED_SSA))\n-\t{\n-\t  edge_iterator ei;\n-\t  edge e;\n-\t  FOR_EACH_EDGE (e, ei, bb->preds)\n-\t    if (loop_exit_edge_p (e->src->loop_father, e))\n-\t      loop_exit_p = true;\n-\t}\n-\n       for (si = gsi_start_phis (bb); !gsi_end_p (si); gsi_next (&si))\n \t{\n           gimple phi = gsi_stmt (si);\n           tree def;\n \n \t  def = gimple_phi_result (phi);\n-\t  if (!is_gimple_reg (def)\n-\t      || loop_exit_p)\n+\t  if (!is_gimple_reg (def))\n             prop_set_simulate_again (phi, false);\n \t  else\n             prop_set_simulate_again (phi, true);"}]}