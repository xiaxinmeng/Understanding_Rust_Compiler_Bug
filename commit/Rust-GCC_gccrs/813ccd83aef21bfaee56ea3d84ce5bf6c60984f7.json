{"sha": "813ccd83aef21bfaee56ea3d84ce5bf6c60984f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEzY2NkODNhZWYyMWJmYWVlNTZlYTNkODRjZTViZjZjNjA5ODRmNw==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-11-16T12:40:33Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-11-16T12:40:33Z"}, "message": "Remove first_pass_instance from pass_object_sizes\n\n2015-11-16  Tom de Vries  <tom@codesourcery.com>\n\n\t* passes.def: Add arg to pass_object_sizes pass instantiation.\n\t* tree-object-size.c (pass_object_sizes::pass_object_sizes): Initialize\n\tinsert_min_max_p.\n\t(pass_object_sizes::set_pass_param): New member function.  Set\n\tinsert_min_max_p.\n\t(pass_object_sizes::insert_min_max_p): New private member.\n\t(pass_object_sizes::execute): Use insert_min_max_p instead of\n\tfirst_pass_instance.\n\nFrom-SVN: r230418", "tree": {"sha": "8d1489cda293630115ee052c09cefde6686b0e24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d1489cda293630115ee052c09cefde6686b0e24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/813ccd83aef21bfaee56ea3d84ce5bf6c60984f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/813ccd83aef21bfaee56ea3d84ce5bf6c60984f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/813ccd83aef21bfaee56ea3d84ce5bf6c60984f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/813ccd83aef21bfaee56ea3d84ce5bf6c60984f7/comments", "author": null, "committer": null, "parents": [{"sha": "5ce8d99a1b45692a14b4a8aaf5b481738bf95172", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ce8d99a1b45692a14b4a8aaf5b481738bf95172", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ce8d99a1b45692a14b4a8aaf5b481738bf95172"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "43873c43fe1e0935d880087a82ed2023c73e340e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/813ccd83aef21bfaee56ea3d84ce5bf6c60984f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/813ccd83aef21bfaee56ea3d84ce5bf6c60984f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=813ccd83aef21bfaee56ea3d84ce5bf6c60984f7", "patch": "@@ -1,3 +1,14 @@\n+2015-11-16  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* passes.def: Add arg to pass_object_sizes pass instantiation.\n+\t* tree-object-size.c (pass_object_sizes::pass_object_sizes): Initialize\n+\tinsert_min_max_p.\n+\t(pass_object_sizes::set_pass_param): New member function.  Set\n+\tinsert_min_max_p.\n+\t(pass_object_sizes::insert_min_max_p): New private member.\n+\t(pass_object_sizes::execute): Use insert_min_max_p instead of\n+\tfirst_pass_instance.\n+\n 2015-11-16  Tom de Vries  <tom@codesourcery.com>\n \n \t* passes.def: Add arg to pass_dominator pass instantiation."}, {"sha": "64883a79eccf1ec922d5130def4b45cc063fd8f1", "filename": "gcc/passes.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/813ccd83aef21bfaee56ea3d84ce5bf6c60984f7/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/813ccd83aef21bfaee56ea3d84ce5bf6c60984f7/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=813ccd83aef21bfaee56ea3d84ce5bf6c60984f7", "patch": "@@ -77,7 +77,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_all_early_optimizations);\n       PUSH_INSERT_PASSES_WITHIN (pass_all_early_optimizations)\n \t  NEXT_PASS (pass_remove_cgraph_callee_edges);\n-\t  NEXT_PASS (pass_object_sizes);\n+\t  NEXT_PASS (pass_object_sizes, true /* insert_min_max_p */);\n \t  NEXT_PASS (pass_ccp);\n \t  /* After CCP we rewrite no longer addressed locals into SSA\n \t     form if possible.  */\n@@ -164,7 +164,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_backprop);\n       NEXT_PASS (pass_phiprop);\n       NEXT_PASS (pass_forwprop);\n-      NEXT_PASS (pass_object_sizes);\n+      NEXT_PASS (pass_object_sizes, false /* insert_min_max_p */);\n       /* pass_build_alias is a dummy pass that ensures that we\n \t execute TODO_rebuild_alias at this point.  */\n       NEXT_PASS (pass_build_alias);"}, {"sha": "459e65d40a6cb73c5a94b5993674b1d3529e96b7", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/813ccd83aef21bfaee56ea3d84ce5bf6c60984f7/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/813ccd83aef21bfaee56ea3d84ce5bf6c60984f7/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=813ccd83aef21bfaee56ea3d84ce5bf6c60984f7", "patch": "@@ -1217,13 +1217,21 @@ class pass_object_sizes : public gimple_opt_pass\n {\n public:\n   pass_object_sizes (gcc::context *ctxt)\n-    : gimple_opt_pass (pass_data_object_sizes, ctxt)\n+    : gimple_opt_pass (pass_data_object_sizes, ctxt), insert_min_max_p (false)\n   {}\n \n   /* opt_pass methods: */\n   opt_pass * clone () { return new pass_object_sizes (m_ctxt); }\n+  void set_pass_param (unsigned int n, bool param)\n+    {\n+      gcc_assert (n == 0);\n+      insert_min_max_p = param;\n+    }\n   virtual unsigned int execute (function *);\n \n+ private:\n+  /* Determines whether the pass instance creates MIN/MAX_EXPRs.  */\n+  bool insert_min_max_p;\n }; // class pass_object_sizes\n \n /* Dummy valueize function.  */\n@@ -1250,12 +1258,12 @@ pass_object_sizes::execute (function *fun)\n \n \t  init_object_sizes ();\n \n-\t  /* In the first pass instance, only attempt to fold\n+\t  /* If insert_min_max_p, only attempt to fold\n \t     __builtin_object_size (x, 1) and __builtin_object_size (x, 3),\n \t     and rather than folding the builtin to the constant if any,\n \t     create a MIN_EXPR or MAX_EXPR of the __builtin_object_size\n \t     call result and the computed constant.  */\n-\t  if (first_pass_instance)\n+\t  if (insert_min_max_p)\n \t    {\n \t      tree ost = gimple_call_arg (call, 1);\n \t      if (tree_fits_uhwi_p (ost))"}]}