{"sha": "97b73103c46af5f6d81365e0edea4cfe1bbc3b33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdiNzMxMDNjNDZhZjVmNmQ4MTM2NWUwZWRlYTRjZmUxYmJjM2IzMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-03-29T17:32:06Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-03-29T17:32:06Z"}, "message": "little.h (TARGET_ENDIAN_DEFAULT): Delete.\n\n\t* config/m32r/little.h (TARGET_ENDIAN_DEFAULT): Delete.\n\t(TARGET_LITTLE_ENDIAN): New macro.\n\t* config/m32r/m32r.h (SUBTARGET_SWITCHES, target_flags)\n\t(TARGET_RELAX_MASK, TARGET_DEBUG_MASK, TARGET_DEBUG)\n\t(TARGET_ALIGN_LOOPS_MASK, TARGET_ALIGN_LOOPS)\n\t(TARGET_LOW_ISSUE_RATE_MASK, TARGET_LOW_ISSUE_RATE)\n\t(TARGET_BRANCH_COST_MASK, TARGET_BRANCH_COST, TARGET_M32RX_MASK)\n\t(TARGET_M32RX, TARGET_M32R2_MASK, TARGET_M32R2, LITTLE_ENDIAN_BIT)\n\t(TARGET_ENDIAN_DEFAULT, SUBTARGET_SWITCHES, TARGET_DEFAULT)\n\t(TARGET_SWITCHES, m32r_model_string, m32r_sdata_string)\n\t(m32r_cache_flush_trap_string, SUBTARGET_OPTIONS)\n\t(TARGET_OPTIONS): Delete.\n\t(M32R_MODEL_DEFAULT, M32R_SDATA_DEFAULT): Turn into enums.\n\t(CACHE_FLUSH_TRAP): Turn into an integer.\n\t(TARGET_LITTLE_ENDIAN): Define to 0 by default.\n\t(INITIALIZE_TRAMPOLINE): Check m32r_cache_trap >= 0 to see if\n\t-mflush-trap is in use.\n\t* config/m32r/m32r.c (m32r_model_string, m32r_sdata_string)\n\t(m32r_cache_flush_trap_string): Delete.\n\t(m32r_model) Initialize to M32R_MODEL_DEFAULT.\n\t(m32r_sdata): Likewise M32R_SDATA_DEFAULT.\n\t(m32r_cache_trap): Likewise CACHE_FLUSH_TRAP.\n\t(TARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION): Override defaults.\n\t(m32r_handle_option): New function.  Move -mflush-trap=, -mflush-func=,\n\t-mmodel= and -msdata= handling from...\n\t(m32r_init): ...here.\n\t* config/m32r/m32r.opt: New file.\n\nFrom-SVN: r97194", "tree": {"sha": "17e34100f973e4c684fbf9c064bf4919b12f5fdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17e34100f973e4c684fbf9c064bf4919b12f5fdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97b73103c46af5f6d81365e0edea4cfe1bbc3b33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97b73103c46af5f6d81365e0edea4cfe1bbc3b33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97b73103c46af5f6d81365e0edea4cfe1bbc3b33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97b73103c46af5f6d81365e0edea4cfe1bbc3b33/comments", "author": null, "committer": null, "parents": [{"sha": "5db8bc343fc5ff9aad66c8f480e15424f7a975d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5db8bc343fc5ff9aad66c8f480e15424f7a975d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5db8bc343fc5ff9aad66c8f480e15424f7a975d2"}], "stats": {"total": 345, "additions": 189, "deletions": 156}, "files": [{"sha": "bce6703d449d691123eca55e353c336043e6a93b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b73103c46af5f6d81365e0edea4cfe1bbc3b33/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b73103c46af5f6d81365e0edea4cfe1bbc3b33/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97b73103c46af5f6d81365e0edea4cfe1bbc3b33", "patch": "@@ -1,3 +1,33 @@\n+2005-03-29  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/m32r/little.h (TARGET_ENDIAN_DEFAULT): Delete.\n+\t(TARGET_LITTLE_ENDIAN): New macro.\n+\t* config/m32r/m32r.h (SUBTARGET_SWITCHES, target_flags)\n+\t(TARGET_RELAX_MASK, TARGET_DEBUG_MASK, TARGET_DEBUG)\n+\t(TARGET_ALIGN_LOOPS_MASK, TARGET_ALIGN_LOOPS)\n+\t(TARGET_LOW_ISSUE_RATE_MASK, TARGET_LOW_ISSUE_RATE)\n+\t(TARGET_BRANCH_COST_MASK, TARGET_BRANCH_COST, TARGET_M32RX_MASK)\n+\t(TARGET_M32RX, TARGET_M32R2_MASK, TARGET_M32R2, LITTLE_ENDIAN_BIT)\n+\t(TARGET_ENDIAN_DEFAULT, SUBTARGET_SWITCHES, TARGET_DEFAULT)\n+\t(TARGET_SWITCHES, m32r_model_string, m32r_sdata_string)\n+\t(m32r_cache_flush_trap_string, SUBTARGET_OPTIONS)\n+\t(TARGET_OPTIONS): Delete.\n+\t(M32R_MODEL_DEFAULT, M32R_SDATA_DEFAULT): Turn into enums.\n+\t(CACHE_FLUSH_TRAP): Turn into an integer.\n+\t(TARGET_LITTLE_ENDIAN): Define to 0 by default.\n+\t(INITIALIZE_TRAMPOLINE): Check m32r_cache_trap >= 0 to see if\n+\t-mflush-trap is in use.\n+\t* config/m32r/m32r.c (m32r_model_string, m32r_sdata_string)\n+\t(m32r_cache_flush_trap_string): Delete.\n+\t(m32r_model) Initialize to M32R_MODEL_DEFAULT.\n+\t(m32r_sdata): Likewise M32R_SDATA_DEFAULT.\n+\t(m32r_cache_trap): Likewise CACHE_FLUSH_TRAP.\n+\t(TARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION): Override defaults.\n+\t(m32r_handle_option): New function.  Move -mflush-trap=, -mflush-func=,\n+\t-mmodel= and -msdata= handling from...\n+\t(m32r_init): ...here.\n+\t* config/m32r/m32r.opt: New file.\n+\n 2005-03-29  Keith Besaw  <kbesaw@us.ibm.com>\n \n \t* tree-ssanames.c (duplicate_ssa_name_ptr_info): New function."}, {"sha": "f4dfbcd2bd3dc564de7207ca816ec31ee2fd9ed3", "filename": "gcc/config/m32r/little.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b73103c46af5f6d81365e0edea4cfe1bbc3b33/gcc%2Fconfig%2Fm32r%2Flittle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b73103c46af5f6d81365e0edea4cfe1bbc3b33/gcc%2Fconfig%2Fm32r%2Flittle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Flittle.h?ref=97b73103c46af5f6d81365e0edea4cfe1bbc3b33", "patch": "@@ -19,7 +19,7 @@\n    Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n    MA 02111-1307, USA.  */\n \n-#define TARGET_ENDIAN_DEFAULT\tLITTLE_ENDIAN_BIT\n+#define TARGET_LITTLE_ENDIAN 1\n \n #define CPP_ENDIAN_SPEC \\\n   \" %{mbe:-D__BIG_ENDIAN__} %{mbig-endian:-D__BIG_ENDIAN__}\" \\"}, {"sha": "ee3f0039cf450a53fc3fadf3f0b8a51ff17cb598", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 68, "deletions": 38, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b73103c46af5f6d81365e0edea4cfe1bbc3b33/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b73103c46af5f6d81365e0edea4cfe1bbc3b33/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=97b73103c46af5f6d81365e0edea4cfe1bbc3b33", "patch": "@@ -51,12 +51,10 @@ rtx m32r_compare_op0, m32r_compare_op1;\n char m32r_punct_chars[256];\n \n /* Selected code model.  */\n-const char * m32r_model_string = M32R_MODEL_DEFAULT;\n-enum m32r_model m32r_model;\n+enum m32r_model m32r_model = M32R_MODEL_DEFAULT;\n \n /* Selected SDA support.  */\n-const char * m32r_sdata_string = M32R_SDATA_DEFAULT;\n-enum m32r_sdata m32r_sdata;\n+enum m32r_sdata m32r_sdata = M32R_SDATA_DEFAULT;\n \n /* Machine-specific symbol_ref flags.  */\n #define SYMBOL_FLAG_MODEL_SHIFT\t\tSYMBOL_FLAG_MACH_DEP_SHIFT\n@@ -69,17 +67,17 @@ enum m32r_sdata m32r_sdata;\n /* Cache-flush support. Cache-flush is used at trampoline.\n    Default cache-flush is \"trap 12\".\n     default cache-flush function is \"_flush_cache\"  (CACHE_FLUSH_FUNC)\n-    default cache-flush trap-interrupt number is \"12\". (CACHE_FLUSH_TRAP)\n+    default cache-flush trap-interrupt number is 12 (CACHE_FLUSH_TRAP)\n    You can change how to generate code of cache-flush with following options.\n-   -flush-func=FLUSH-FUNC-NAME\n-   -no-flush-func\n-   -fluch-trap=TRAP-NUMBER\n-   -no-flush-trap.  */\n+   -mflush-func=FLUSH-FUNC-NAME\n+   -mno-flush-func              (sets m32r_cache_flush_func to NULL)\n+   -mfluch-trap=TRAP-NUMBER\n+   -mno-flush-trap.             (sets m32r_cache_flush_trap to -1).  */\n const char *m32r_cache_flush_func = CACHE_FLUSH_FUNC;\n-const char *m32r_cache_flush_trap_string = CACHE_FLUSH_TRAP;\n-int m32r_cache_flush_trap = 12;\n+int m32r_cache_flush_trap = CACHE_FLUSH_TRAP;\n \n /* Forward declaration.  */\n+static bool  m32r_handle_option (size_t, const char *, int);\n static void  init_reg_tables (void);\n static void  block_move_call (rtx, rtx, rtx);\n static int   m32r_is_insn (rtx);\n@@ -127,6 +125,11 @@ static int m32r_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n #undef  TARGET_SCHED_ISSUE_RATE\n #define TARGET_SCHED_ISSUE_RATE m32r_issue_rate\n \n+#undef  TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS TARGET_CPU_DEFAULT\n+#undef  TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION m32r_handle_option\n+\n #undef  TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO m32r_encode_section_info\n #undef  TARGET_IN_SMALL_DATA_P\n@@ -152,6 +155,60 @@ static int m32r_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+m32r_handle_option (size_t code, const char *arg, int value)\n+{\n+  switch (code)\n+    {\n+    case OPT_m32r:\n+      target_flags &= ~(MASK_M32R2 | MASK_M32RX);\n+      return true;\n+\n+    case OPT_mmodel_:\n+      if (strcmp (arg, \"small\") == 0)\n+\tm32r_model = M32R_MODEL_SMALL;\n+      else if (strcmp (arg, \"medium\") == 0)\n+\tm32r_model = M32R_MODEL_MEDIUM;\n+      else if (strcmp (arg, \"large\") == 0)\n+\tm32r_model = M32R_MODEL_LARGE;\n+      else\n+\treturn false;\n+      return true;\n+\n+    case OPT_msdata_:\n+      if (strcmp (arg, \"none\") == 0)\n+\tm32r_sdata = M32R_SDATA_NONE;\n+      else if (strcmp (arg, \"sdata\") == 0)\n+\tm32r_sdata = M32R_SDATA_SDATA;\n+      else if (strcmp (arg, \"use\") == 0)\n+\tm32r_sdata = M32R_SDATA_USE;\n+      else\n+\treturn false;\n+      return true;\n+\n+    case OPT_mflush_func_:\n+      m32r_cache_flush_func = arg;\n+      return true;\n+\n+    case OPT_mno_flush_func:\n+      m32r_cache_flush_func = NULL;\n+      return true;\n+\n+    case OPT_mflush_trap_:\n+      m32r_cache_flush_trap = value;\n+      return m32r_cache_flush_trap <= 15;\n+\n+    case OPT_mno_flush_trap:\n+      m32r_cache_flush_trap = -1;\n+      return true;\n+\n+    default:\n+      return true;\n+    }\n+}\n+\n /* Called by OVERRIDE_OPTIONS to initialize various things.  */\n \n void\n@@ -167,33 +224,6 @@ m32r_init (void)\n   /* Provide default value if not specified.  */\n   if (!g_switch_set)\n     g_switch_value = SDATA_DEFAULT_SIZE;\n-\n-  if (strcmp (m32r_model_string, \"small\") == 0)\n-    m32r_model = M32R_MODEL_SMALL;\n-  else if (strcmp (m32r_model_string, \"medium\") == 0)\n-    m32r_model = M32R_MODEL_MEDIUM;\n-  else if (strcmp (m32r_model_string, \"large\") == 0)\n-    m32r_model = M32R_MODEL_LARGE;\n-  else\n-    error (\"bad value (%s) for -mmodel switch\", m32r_model_string);\n-\n-  if (strcmp (m32r_sdata_string, \"none\") == 0)\n-    m32r_sdata = M32R_SDATA_NONE;\n-  else if (strcmp (m32r_sdata_string, \"sdata\") == 0)\n-    m32r_sdata = M32R_SDATA_SDATA;\n-  else if (strcmp (m32r_sdata_string, \"use\") == 0)\n-    m32r_sdata = M32R_SDATA_USE;\n-  else\n-    error (\"bad value (%s) for -msdata switch\", m32r_sdata_string);\n-\n-  if (m32r_cache_flush_trap_string)\n-    {\n-      /* Change trap-number (12) for cache-flush to the others (0 - 15).  */\n-      m32r_cache_flush_trap = atoi (m32r_cache_flush_trap_string);\n-      if (m32r_cache_flush_trap < 0 || m32r_cache_flush_trap > 15)\n-        error (\"bad value (%s) for -flush-trap=n (0=<n<=15)\",\n-               m32r_cache_flush_trap_string);\n-    }\n }\n \n /* Vectors to keep interesting information about registers where it can easily"}, {"sha": "85ee3755153247b312dcdefb3a07c20a39788073", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 7, "deletions": 117, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b73103c46af5f6d81365e0edea4cfe1bbc3b33/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b73103c46af5f6d81365e0edea4cfe1bbc3b33/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=97b73103c46af5f6d81365e0edea4cfe1bbc3b33", "patch": "@@ -36,7 +36,6 @@\n #undef LINK_SPEC\n #undef STARTFILE_SPEC\n #undef ENDFILE_SPEC\n-#undef SUBTARGET_SWITCHES\n \n #undef ASM_APP_ON\n #undef ASM_APP_OFF\n@@ -60,12 +59,6 @@\n #define STARTFILE_CPU_SPEC \"%{!shared:crt0.o%s} %{m32rx:m32rx/crtinit.o%s} %{!m32rx:crtinit.o%s}\"\n #define ENDFILE_CPU_SPEC \"-lgloss %{m32rx:m32rx/crtfini.o%s} %{!m32rx:crtfini.o%s}\"\n \n-/* Extra machine dependent switches.  */\n-#define SUBTARGET_SWITCHES\t\t\t\t\t\t\t\\\n-    { \"32rx\",\t\t\tTARGET_M32RX_MASK, \"Compile for the m32rx\" },\t\\\n-    { \"32r2\",\t\t\tTARGET_M32R2_MASK, \"Compile for the m32r2\" },\t\\\n-    { \"32r\",\t\t\t-(TARGET_M32RX_MASK+TARGET_M32R2_MASK), \"\" },\n-\n /* Define this macro as a C expression for the initializer of an array of\n    strings to tell the driver program which options are defaults for this\n    target and thus do not need to be handled specially when using\n@@ -204,125 +197,22 @@\n \f\n /* Run-time compilation parameters selecting different hardware subsets.  */\n \n-extern int target_flags;\n-\n-/* If nonzero, tell the linker to do relaxing.\n-   We don't do anything with the option, other than recognize it.\n-   LINK_SPEC handles passing -relax to the linker.\n-   This can cause incorrect debugging information as line numbers may\n-   turn out wrong.  This shouldn't be specified unless accompanied with -O2\n-   [where the user expects debugging information to be less accurate].  */\n-#define TARGET_RELAX_MASK \t(1 << 0)\n-\n-/* For miscellaneous debugging purposes.  */\n-#define TARGET_DEBUG_MASK \t(1 << 1)\n-#define TARGET_DEBUG \t\t(target_flags & TARGET_DEBUG_MASK)\n-\n-/* Align loops to 32 byte boundaries (cache line size).  */\n-/* ??? This option is experimental and is not documented.  */\n-#define TARGET_ALIGN_LOOPS_MASK (1 << 2)\n-#define TARGET_ALIGN_LOOPS \t(target_flags & TARGET_ALIGN_LOOPS_MASK)\n-\n-/* Change issue rate.  */\n-#define TARGET_LOW_ISSUE_RATE_MASK\t(1 << 3)\n-#define TARGET_LOW_ISSUE_RATE\t(target_flags & TARGET_LOW_ISSUE_RATE_MASK)\n-\n-/* Change branch cost */\n-#define TARGET_BRANCH_COST_MASK\t(1 << 4)\n-#define TARGET_BRANCH_COST\t(target_flags & TARGET_BRANCH_COST_MASK)\n-\n-/* Target machine to compile for.  */\n-#define TARGET_M32R \t\t1\n-\n-/* Support extended instruction set.  */\n-#define TARGET_M32RX_MASK       (1 << 5)\n-#define TARGET_M32RX            (target_flags & TARGET_M32RX_MASK)\n-#undef  TARGET_M32R\n-#define TARGET_M32R             (! TARGET_M32RX)\n-\n-/* Support extended instruction set of m32r2.  */\n-#define TARGET_M32R2_MASK       (1 << 6)\n-#define TARGET_M32R2            (target_flags & TARGET_M32R2_MASK)\n-#undef  TARGET_M32R\n #define TARGET_M32R             (! TARGET_M32RX && ! TARGET_M32R2)\n \n-/* Little Endian Flag.  */\n-#define LITTLE_ENDIAN_BIT \t(1 << 7)\n-#define TARGET_LITTLE_ENDIAN\t(target_flags & LITTLE_ENDIAN_BIT)\n-#define TARGET_BIG_ENDIAN       (! TARGET_LITTLE_ENDIAN)\n-\n-/* This defaults us to big-endian.  */\n-#ifndef TARGET_ENDIAN_DEFAULT\n-#define TARGET_ENDIAN_DEFAULT 0\n+#ifndef TARGET_LITTLE_ENDIAN\n+#define TARGET_LITTLE_ENDIAN\t0\n #endif\n+#define TARGET_BIG_ENDIAN       (! TARGET_LITTLE_ENDIAN)\n \n /* This defaults us to m32r.  */\n #ifndef TARGET_CPU_DEFAULT\n #define TARGET_CPU_DEFAULT 0\n #endif\n \n-/* Macro to define tables used to set the flags.\n-   This is a list in braces of pairs in braces,\n-   each pair being { \"NAME\", VALUE }\n-   where VALUE is the bits to set or minus the bits to clear.\n-   An empty string NAME is used to identify the default VALUE.  */\n-\n-#ifndef SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES\n-#endif\n-\n-#ifndef TARGET_DEFAULT\n-#define TARGET_DEFAULT (TARGET_CPU_DEFAULT | TARGET_ENDIAN_DEFAULT)\n-#endif\n-\n-#define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-/*  { \"relax\",\t\t\tTARGET_RELAX_MASK, \"\" },\t\t\\\n-    { \"no-relax\",\t\t-TARGET_RELAX_MASK, \"\" },*/\t\t\\\n-    { \"debug\",\t\t\tTARGET_DEBUG_MASK, \t\t\t\\\n-\tN_(\"Display compile time statistics\") },\t\t\t\\\n-    { \"align-loops\",\t\tTARGET_ALIGN_LOOPS_MASK, \t\t\\\n-\tN_(\"Align all loops to 32 byte boundary\") },\t\t\t\\\n-    { \"no-align-loops\",\t\t-TARGET_ALIGN_LOOPS_MASK, \"\" },\t\t\\\n-    { \"issue-rate=1\",\t\tTARGET_LOW_ISSUE_RATE_MASK, \t\t\\\n-\tN_(\"Only issue one instruction per cycle\") },\t\t\t\\\n-    { \"issue-rate=2\",\t\t-TARGET_LOW_ISSUE_RATE_MASK, \"\" },\t\\\n-    { \"branch-cost=1\",\t\tTARGET_BRANCH_COST_MASK, \t\t\\\n-\tN_(\"Prefer branches over conditional execution\") },\t\t\\\n-    { \"branch-cost=2\",\t\t-TARGET_BRANCH_COST_MASK, \"\" },\t\t\\\n-    SUBTARGET_SWITCHES\t\t\t\t\t\t\t\\\n-    { \"\", TARGET_DEFAULT, \"\" }\t\t\t\t\t\t\\\n-}\n-\n-extern const char * m32r_model_string;\n-extern const char * m32r_sdata_string;\n-\n /* Cache-flush support.  */\n extern const char * m32r_cache_flush_func;\n-extern const char * m32r_cache_flush_trap_string;\n extern int m32r_cache_flush_trap;\n \n-#ifndef SUBTARGET_OPTIONS\n-#define SUBTARGET_OPTIONS\n-#endif\n-\n-#define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  { \"model=\", & m32r_model_string,\t\t\t\t\t\\\n-    N_(\"Code size: small, medium or large\"), 0},\t\t\t\\\n-  { \"sdata=\", & m32r_sdata_string,\t\t\t\t\t\\\n-    N_(\"Small data area: none, sdata, use\"), 0},\t\t\t\\\n-  { \"no-flush-func\", & m32r_cache_flush_func,\t\t\t\t\\\n-    N_(\"Don't call any cache flush functions\") },\t\t\t\\\n-  { \"flush-func=\", & m32r_cache_flush_func,\t\t\t\t\\\n-    N_(\"Specify cache flush function\") },\t\t\t\t\\\n-  { \"no-flush-trap\", & m32r_cache_flush_trap_string,\t\t\t\\\n-    N_(\"Don't call any cache flush trap\") },\t\t\t\t\\\n-  { \"flush-trap=\", & m32r_cache_flush_trap_string,\t\t\t\\\n-    N_(\"Specify cache flush trap number\") }\t\t\t\t\\\n-  SUBTARGET_OPTIONS\t\t\t\t\t\t\t\\\n-}\n-\n /* Code Models\n \n    Code models are used to select between two choices of two separate\n@@ -357,7 +247,7 @@ extern enum m32r_model m32r_model;\n \n /* The default is the small model.  */\n #ifndef M32R_MODEL_DEFAULT\n-#define M32R_MODEL_DEFAULT \"small\"\n+#define M32R_MODEL_DEFAULT M32R_MODEL_SMALL\n #endif\n \n /* Small Data Area\n@@ -407,7 +297,7 @@ extern enum m32r_sdata m32r_sdata;\n /* Default is to disable the SDA\n    [for upward compatibility with previous toolchains].  */\n #ifndef M32R_SDATA_DEFAULT\n-#define M32R_SDATA_DEFAULT \"none\"\n+#define M32R_SDATA_DEFAULT M32R_SDATA_NONE\n #endif\n \n /* Define this macro as a C expression for the initializer of an array of\n@@ -1191,7 +1081,7 @@ L2:     .word STATIC\n #define CACHE_FLUSH_FUNC \"_flush_cache\"\n #endif\n #ifndef CACHE_FLUSH_TRAP\n-#define CACHE_FLUSH_TRAP \"12\"\n+#define CACHE_FLUSH_TRAP 12\n #endif\n \n /* Length in bytes of the trampoline for entering a nested function.  */\n@@ -1219,7 +1109,7 @@ L2:     .word STATIC\n \t\t      (CXT));\t\t\t\t\t\t\t\\\n       emit_move_insn (gen_rtx_MEM (SImode, plus_constant (TRAMP, 20)),\t\t\\\n \t\t      (FNADDR));\t\t\t\t\t\t\\\n-      if (m32r_cache_flush_trap_string && m32r_cache_flush_trap_string[0])\t\\\n+      if (m32r_cache_flush_trap >= 0)\t\t\t\t\t\t\\\n \temit_insn (gen_flush_icache (validize_mem (gen_rtx_MEM (SImode, TRAMP)),\\\n \t\t\t\t     GEN_INT (m32r_cache_flush_trap) ));\t\\\n       else if (m32r_cache_flush_func && m32r_cache_flush_func[0])\t\t\\"}, {"sha": "73287852bb58fdc4e856c4c6bf8e0854c6abd33d", "filename": "gcc/config/m32r/m32r.opt", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b73103c46af5f6d81365e0edea4cfe1bbc3b33/gcc%2Fconfig%2Fm32r%2Fm32r.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b73103c46af5f6d81365e0edea4cfe1bbc3b33/gcc%2Fconfig%2Fm32r%2Fm32r.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.opt?ref=97b73103c46af5f6d81365e0edea4cfe1bbc3b33", "patch": "@@ -0,0 +1,83 @@\n+; Options for the Renesas M32R port of the compiler.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+m32rx\n+Target Report RejectNegative Mask(M32RX)\n+Compile for the m32rx\n+\n+m32r2\n+Target Report RejectNegative Mask(M32R2)\n+Compile for the m32r2\n+\n+m32r\n+Target RejectNegative\n+Compile for the m32r\n+\n+malign-loops\n+Target Report Mask(ALIGN_LOOPS)\n+Align all loops to 32 byte boundary\n+\n+mbranch-cost=1\n+Target Report RejectNegative Mask(BRANCH_COST)\n+Prefer branches over conditional execution\n+\n+mbranch-cost=2\n+Target Report RejectNegative InverseMask(BRANCH_COST)\n+Give branches their default cost\n+\n+mdebug\n+Target Mask(DEBUG)\n+Display compile time statistics\n+\n+mflush-func=\n+Target RejectNegative Joined\n+Specify cache flush function\n+\n+mflush-trap=\n+Target RejectNegative Joined UInteger\n+Specify cache flush trap number\n+\n+missue-rate=1\n+Target Report RejectNegative Mask(LOW_ISSUE_RATE)\n+Only issue one instruction per cycle\n+\n+missue-rate=2\n+Target Report RejectNegative InverseMask(LOW_ISSUE_RATE)\n+Allow two instructions to be issued per cycle\n+\n+mmodel=\n+Target RejectNegative Joined\n+Code size: small, medium or large\n+\n+mno-flush-func\n+Target RejectNegative\n+Don't call any cache flush functions\n+\n+mno-flush-trap\n+Target RejectNegative\n+Don't call any cache flush trap\n+\n+; mrelax\n+; Target Mask(RELAX)\n+\n+msdata=\n+Target RejectNegative Joined\n+Small data area: none, sdata, use"}]}