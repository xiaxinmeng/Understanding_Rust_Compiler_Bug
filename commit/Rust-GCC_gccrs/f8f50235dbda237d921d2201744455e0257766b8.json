{"sha": "f8f50235dbda237d921d2201744455e0257766b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhmNTAyMzVkYmRhMjM3ZDkyMWQyMjAxNzQ0NDU1ZTAyNTc3NjZiOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2017-09-08T09:46:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-08T09:46:42Z"}, "message": "sem_ch3.adb, [...]: Remove references to Frontend_Layout_On_Target and remaining references to...\n\n2017-09-08  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sem_ch3.adb, layout.adb, layout.ads, exp_attr.adb, debug.adb,\n\texp_pakd.adb, sem_prag.adb, gnat1drv.adb, targparm.adb, targparm.ads,\n\trepinfo.adb, exp_ch6.adb, exp_aggr.adb, sem_eval.adb, sem_ch13.adb,\n\texp_ch3.adb: Remove references to Frontend_Layout_On_Target and\n\tremaining references to AAMP_On_Target.\n\nFrom-SVN: r251877", "tree": {"sha": "42feb58cd362108a63f0e56e43e572f7ca0e04aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42feb58cd362108a63f0e56e43e572f7ca0e04aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8f50235dbda237d921d2201744455e0257766b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8f50235dbda237d921d2201744455e0257766b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8f50235dbda237d921d2201744455e0257766b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8f50235dbda237d921d2201744455e0257766b8/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "63a5b3dc89fa01e461c96bde32df592db5bf700f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63a5b3dc89fa01e461c96bde32df592db5bf700f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63a5b3dc89fa01e461c96bde32df592db5bf700f"}], "stats": {"total": 2926, "additions": 217, "deletions": 2709}, "files": [{"sha": "5ce59b4df030f8f5d98759e22267dd6751872bc3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f8f50235dbda237d921d2201744455e0257766b8", "patch": "@@ -1,3 +1,11 @@\n+2017-09-08  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch3.adb, layout.adb, layout.ads, exp_attr.adb, debug.adb,\n+\texp_pakd.adb, sem_prag.adb, gnat1drv.adb, targparm.adb, targparm.ads,\n+\trepinfo.adb, exp_ch6.adb, exp_aggr.adb, sem_eval.adb, sem_ch13.adb,\n+\texp_ch3.adb: Remove references to Frontend_Layout_On_Target and\n+\tremaining references to AAMP_On_Target.\n+\n 2017-09-08  Ed Schonberg  <schonberg@adacore.com>\n \n \t* style.adb: Fix typo."}, {"sha": "f5a7e25e33955e795cba5ce34e5026bcba5a7486", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=f8f50235dbda237d921d2201744455e0257766b8", "patch": "@@ -69,7 +69,7 @@ package body Debug is\n    --  dC   Output debugging information on check suppression\n    --  dD   Delete elaboration checks in inner level routines\n    --  dE   Apply elaboration checks to predefined units\n-   --  dF   Front end data layout enabled\n+   --  dF\n    --  dG   Generate all warnings including those normally suppressed\n    --  dH   Hold (kill) call to gigi\n    --  dI   Inhibit internal name numbering in gnatG listing\n@@ -383,10 +383,6 @@ package body Debug is\n    --  dE   Apply compile time elaboration checking for with relations between\n    --       predefined units. Normally no checks are made.\n \n-   --  dF   Front end data layout enabled. Normally front end data layout\n-   --       is only enabled if the target parameter Backend_Layout is False.\n-   --       This debugging switch enables it unconditionally.\n-\n    --  dG   Generate all warnings. Normally Errout suppresses warnings on\n    --       units that are not part of the main extended source, and also\n    --       suppresses warnings on instantiations in the main extended"}, {"sha": "3610ed63ead9849c175fdb999f50d7bfa28ce08d", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=f8f50235dbda237d921d2201744455e0257766b8", "patch": "@@ -59,7 +59,6 @@ with Sinfo;    use Sinfo;\n with Snames;   use Snames;\n with Stand;    use Stand;\n with Stringt;  use Stringt;\n-with Targparm; use Targparm;\n with Tbuild;   use Tbuild;\n with Uintp;    use Uintp;\n \n@@ -6262,7 +6261,6 @@ package body Exp_Aggr is\n          --  then we could go into an infinite recursion.\n \n          if (In_Place_Assign_OK_For_Declaration or else Maybe_In_Place_OK)\n-           and then not AAMP_On_Target\n            and then not CodePeer_Mode\n            and then not Modify_Tree_For_C\n            and then not Possible_Bit_Aligned_Component (Target)"}, {"sha": "76b99e89c91924b1efb792690ea23d9f4ba956ea", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=f8f50235dbda237d921d2201744455e0257766b8", "patch": "@@ -62,7 +62,6 @@ with Sinfo;    use Sinfo;\n with Snames;   use Snames;\n with Stand;    use Stand;\n with Stringt;  use Stringt;\n-with Targparm; use Targparm;\n with Tbuild;   use Tbuild;\n with Ttypes;   use Ttypes;\n with Uintp;    use Uintp;\n@@ -8233,7 +8232,6 @@ package body Exp_Attr is\n       function Is_GCC_Target return Boolean is\n       begin\n          return not CodePeer_Mode\n-           and then not AAMP_On_Target\n            and then not Modify_Tree_For_C;\n       end Is_GCC_Target;\n \n@@ -8243,7 +8241,7 @@ package body Exp_Attr is\n       --  Machine and Model can be expanded by the GCC and AAMP back ends only\n \n       if Id = Attribute_Machine or else Id = Attribute_Model then\n-         return Is_GCC_Target or else AAMP_On_Target;\n+         return Is_GCC_Target;\n \n       --  Remaining cases handled by all back ends are Rounding and Truncation\n       --  when appearing as the operand of a conversion to some integer type."}, {"sha": "e5519613f0dd506fa59394218778186d937a3c80", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=f8f50235dbda237d921d2201744455e0257766b8", "patch": "@@ -67,7 +67,6 @@ with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n with Stand;    use Stand;\n with Snames;   use Snames;\n-with Targparm; use Targparm;\n with Tbuild;   use Tbuild;\n with Ttypes;   use Ttypes;\n with Validsw;  use Validsw;\n@@ -957,20 +956,14 @@ package body Exp_Ch3 is\n          --  label all components of that variant with the function's name.\n          --  We only Generate a discriminant-checking function when the\n          --  variant is not empty, to prevent the creation of dead code.\n-         --  The exception to that is when Frontend_Layout_On_Target is set,\n-         --  because the variant record size function generated in package\n-         --  Layout needs to generate calls to all discriminant-checking\n-         --  functions, including those for empty variants.\n \n          Discr_Name := Entity (Name (Variant_Part_Node));\n          Variant := First_Non_Pragma (Variants (Variant_Part_Node));\n \n          while Present (Variant) loop\n             Component_List_Node := Component_List (Variant);\n \n-            if not Null_Present (Component_List_Node)\n-              or else Frontend_Layout_On_Target\n-            then\n+            if not Null_Present (Component_List_Node) then\n                Func_Id := Build_Dcheck_Function (Discr_Name, Variant);\n \n                Decl :="}, {"sha": "423de144bbc0378a0a860e4c1f40359cfe132bcf", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=f8f50235dbda237d921d2201744455e0257766b8", "patch": "@@ -70,7 +70,6 @@ with Sem_Util;  use Sem_Util;\n with Sinfo;     use Sinfo;\n with Snames;    use Snames;\n with Stand;     use Stand;\n-with Targparm;  use Targparm;\n with Tbuild;    use Tbuild;\n with Uintp;     use Uintp;\n with Validsw;   use Validsw;\n@@ -1757,19 +1756,10 @@ package body Exp_Ch6 is\n \n          if Is_By_Reference_Type (Etype (Formal)) then\n \n-            --  If the front-end does not perform full type layout, the actual\n-            --  may in fact be properly aligned but there is not enough front-\n-            --  end information to determine this. In that case gigi will emit\n-            --  an error if a copy is not legal, or generate the proper code.\n-            --  For other backends we report the error now.\n-\n-            --  Seems wrong to be issuing an error in the expander, since it\n-            --  will be missed in -gnatc mode ???\n-\n-            if Frontend_Layout_On_Target then\n-               Error_Msg_N\n-                 (\"misaligned actual cannot be passed by reference\", Actual);\n-            end if;\n+            --  The actual may in fact be properly aligned but there is not\n+            --  enough front-end information to determine this. In that case\n+            --  gigi will emit an error if a copy is not legal, or generate\n+            --  the proper code.\n \n             return False;\n "}, {"sha": "77a44aa76bb263466afc3d9059b376c36f8752c0", "filename": "gcc/ada/exp_pakd.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Fexp_pakd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Fexp_pakd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.adb?ref=f8f50235dbda237d921d2201744455e0257766b8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "8a974c9f0b98686e8d380cace99f989a667462d7", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=f8f50235dbda237d921d2201744455e0257766b8", "patch": "@@ -560,13 +560,13 @@ procedure Gnat1drv is\n          Atree.Num_Extension_Nodes := Atree.Num_Extension_Nodes + 1;\n       end if;\n \n-      --  Disable static allocation of dispatch tables if -gnatd.t or if layout\n-      --  is enabled. The front end's layout phase currently treats types that\n-      --  have discriminant-dependent arrays as not being static even when a\n+      --  Disable static allocation of dispatch tables if -gnatd.t is enabled.\n+      --  The front end's layout phase currently treats types that have\n+      --  discriminant-dependent arrays as not being static even when a\n       --  discriminant constraint on the type is static, and this leads to\n       --  problems with subtypes of type Ada.Tags.Dispatch_Table_Wrapper. ???\n \n-      if Debug_Flag_Dot_T or else Frontend_Layout_On_Target then\n+      if Debug_Flag_Dot_T then\n          Static_Dispatch_Tables := False;\n       end if;\n \n@@ -576,12 +576,6 @@ procedure Gnat1drv is\n          Ttypes.Bytes_Big_Endian := not Ttypes.Bytes_Big_Endian;\n       end if;\n \n-      --  Activate front-end layout if debug flag -gnatdF is set\n-\n-      if Debug_Flag_FF then\n-         Targparm.Frontend_Layout_On_Target := True;\n-      end if;\n-\n       --  Set and check exception mechanism. This is only meaningful when\n       --  compiling, and in particular not meaningful for special modes used\n       --  for program analysis rather than compilation: ASIS mode, CodePeer\n@@ -966,10 +960,11 @@ procedure Gnat1drv is\n       --  Validate independence pragmas (again using values annotated by the\n       --  back end for component layout where possible) but only for non-GCC\n       --  back ends, as this is done a priori for GCC back ends.\n-\n-      if AAMP_On_Target then\n-         Sem_Ch13.Validate_Independence;\n-      end if;\n+      --  ??? We use to test for AAMP_On_Target which is now gone, consider\n+      --\n+      --  if AAMP_On_Target then\n+      --     Sem_Ch13.Validate_Independence;\n+      --  end if;\n    end Post_Compilation_Validation_Checks;\n \n    --  Local variables\n@@ -1421,7 +1416,6 @@ begin\n         and then\n           (not (Back_Annotate_Rep_Info or Generate_SCIL or GNATprove_Mode)\n             or else Main_Unit_Kind = N_Subunit\n-            or else Frontend_Layout_On_Target\n             or else ASIS_GNSA_Mode)\n       then\n          Post_Compilation_Validation_Checks;"}, {"sha": "34c5b5d0f9a7a1831a226e97ddb6770f4e44017d", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 173, "deletions": 2605, "changes": 2778, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=f8f50235dbda237d921d2201744455e0257766b8"}, {"sha": "57aa93e4f5ae3dbc66e1ac6dae0c055f36fae481", "filename": "gcc/ada/layout.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Flayout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Flayout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.ads?ref=f8f50235dbda237d921d2201744455e0257766b8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "a62c48b3798ba45fb95e545e030f65e38fba3c91", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=f8f50235dbda237d921d2201744455e0257766b8", "patch": "@@ -62,9 +62,6 @@ package body Repinfo is\n    -- Representation of GCC Expressions --\n    ---------------------------------------\n \n-   --    This table is used only if Frontend_Layout_On_Target is False, so gigi\n-   --    lays out dynamic size/offset fields using encoded GCC expressions.\n-\n    --    A table internal to this unit is used to hold the values of back\n    --    annotated expressions. This table is written out by -gnatt and read\n    --    back in for ASIS processing."}, {"sha": "98cc3fa819121d56c37d85ca9dee6f7b56332856", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=f8f50235dbda237d921d2201744455e0257766b8", "patch": "@@ -11530,9 +11530,10 @@ package body Sem_Ch13 is\n       Compile_Time_Warnings_Errors.Init;\n       Unchecked_Conversions.Init;\n \n-      if AAMP_On_Target then\n-         Independence_Checks.Init;\n-      end if;\n+      --  ??? Might be needed in the future for some non GCC back-ends\n+      --  if AAMP_On_Target then\n+      --     Independence_Checks.Init;\n+      --  end if;\n    end Initialize;\n \n    ---------------------------"}, {"sha": "9f1d824b4c5580f619b14f5ea85a487a4d042638", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=f8f50235dbda237d921d2201744455e0257766b8", "patch": "@@ -14467,23 +14467,6 @@ package body Sem_Ch3 is\n \n          Set_Parent (New_Compon, Parent (Old_Compon));\n \n-         --  If the old component's Esize was already determined and is a\n-         --  static value, then the new component simply inherits it. Otherwise\n-         --  the old component's size may require run-time determination, but\n-         --  the new component's size still might be statically determinable\n-         --  (if, for example it has a static constraint). In that case we want\n-         --  Layout_Type to recompute the component's size, so we reset its\n-         --  size and positional fields.\n-\n-         if Frontend_Layout_On_Target\n-           and then not Known_Static_Esize (Old_Compon)\n-         then\n-            Set_Esize (New_Compon, Uint_0);\n-            Init_Normalized_First_Bit    (New_Compon);\n-            Init_Normalized_Position     (New_Compon);\n-            Init_Normalized_Position_Max (New_Compon);\n-         end if;\n-\n          --  We do not want this node marked as Comes_From_Source, since\n          --  otherwise it would get first class status and a separate cross-\n          --  reference line would be generated. Illegitimate children do not"}, {"sha": "a3a1a1f18ab42a4e55cc2a9838be5cdf18e21425", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=f8f50235dbda237d921d2201744455e0257766b8", "patch": "@@ -5767,8 +5767,9 @@ package body Sem_Eval is\n \n       --  No match if sizes different (from use of 'Object_Size). This test\n       --  is excluded if Formal_Derived_Matching is True, as the base types\n-      --  can be different in that case and typically have different sizes\n-      --  (and Esizes can be set when Frontend_Layout_On_Target is True).\n+      --  can be different in that case and typically have different sizes.\n+      --  ??? Frontend_Layout_On_Target used to set Esizes but this is no\n+      --  longer the case, consider removing the last test below.\n \n       elsif not Formal_Derived_Matching\n         and then Known_Static_Esize (T1)"}, {"sha": "4d1e2b0a1999437dd58c26d1b94f96ceeace0d10", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=f8f50235dbda237d921d2201744455e0257766b8", "patch": "@@ -10169,14 +10169,18 @@ package body Sem_Prag is\n       -------------------------------\n \n       procedure Record_Independence_Check (N : Node_Id; E : Entity_Id) is\n+         pragma Unreferenced (N, E);\n       begin\n          --  For GCC back ends the validation is done a priori\n+         --  ??? This code is dead, might be useful in the future\n \n-         if not AAMP_On_Target then\n-            return;\n-         end if;\n+         --  if not AAMP_On_Target then\n+         --     return;\n+         --  end if;\n \n-         Independence_Checks.Append ((N, E));\n+         --  Independence_Checks.Append ((N, E));\n+\n+         return;\n       end Record_Independence_Check;\n \n       ------------------"}, {"sha": "2ee9245268add52ec2ca1e34fcfe664f5ca4c1cc", "filename": "gcc/ada/targparm.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Ftargparm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Ftargparm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.adb?ref=f8f50235dbda237d921d2201744455e0257766b8", "patch": "@@ -793,7 +793,7 @@ package body Targparm is\n                   Result := (System_Text (P) = 'T');\n \n                   case K is\n-                     when AAM => AAMP_On_Target                      := Result;\n+                     when AAM => null;\n                      when ACR => Always_Compatible_Rep_On_Target     := Result;\n                      when ASD => Atomic_Sync_Default_On_Target       := Result;\n                      when BDC => Backend_Divide_Checks_On_Target     := Result;\n@@ -803,7 +803,7 @@ package body Targparm is\n                      when D32 => Duration_32_Bits_On_Target          := Result;\n                      when DEN => Denorm_On_Target                    := Result;\n                      when EXS => Exit_Status_Supported_On_Target     := Result;\n-                     when FEL => Frontend_Layout_On_Target           := Result;\n+                     when FEL => null;\n                      when FEX => Frontend_Exceptions_On_Target       := Result;\n                      when FFO => Fractional_Fixed_Ops_On_Target      := Result;\n                      when MOV => Machine_Overflows_On_Target         := Result;"}, {"sha": "55b270757982363f50efbe85d9e6f6f796da1bb7", "filename": "gcc/ada/targparm.ads", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Ftargparm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f50235dbda237d921d2201744455e0257766b8/gcc%2Fada%2Ftargparm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.ads?ref=f8f50235dbda237d921d2201744455e0257766b8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1999-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -192,17 +192,6 @@ package Targparm is\n    --  Get_Target_Parameters routine which reads the values from a provided\n    --  text buffer containing the source of the system package.\n \n-   ----------------------------\n-   -- Special Target Control --\n-   ----------------------------\n-\n-   --  The great majority of GNAT ports are based on GCC. The switches in\n-   --  this section indicate the use of some non-standard target back end\n-   --  or other special targetting requirements.\n-\n-   AAMP_On_Target : Boolean := False;\n-   --  Set to True if target is AAMP\n-\n    -------------------------------\n    -- Backend Arithmetic Checks --\n    -------------------------------\n@@ -560,18 +549,6 @@ package Targparm is\n    --  2 ** (-(T'Object_Size - 1)) and whose values have an absolute\n    --  value less than 1.0.\n \n-   -----------------\n-   -- Data Layout --\n-   -----------------\n-\n-   --  Normally when using the GCC backend, Gigi and GCC perform much of the\n-   --  data layout using the standard layout capabilities of GCC. If the\n-   --  parameter Backend_Layout is set to False, then the front end must\n-   --  perform all data layout. For further details see the package Layout.\n-\n-   Frontend_Layout_On_Target : Boolean := False;\n-   --  Set True if front end does layout\n-\n    -----------------\n    -- Subprograms --\n    -----------------"}]}