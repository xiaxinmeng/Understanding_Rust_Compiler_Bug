{"sha": "a4d8c676006f3b672af5088f52160e762aa7a197", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRkOGM2NzYwMDZmM2I2NzJhZjUwODhmNTIxNjBlNzYyYWE3YTE5Nw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-11-12T23:26:56Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-11-12T23:26:56Z"}, "message": "Makefile.in (OPTS_H): Define.\n\n\t* Makefile.in (OPTS_H): Define.\n\t(c-decl.o, c-family/c-common.o, c-family/c-opts.o,\n\tc-family/c-pch.o, c-family/c-pragma.o, gcc.o, gccspec.o,\n\tcppspec.o, options.o, gcc-options.o, lto-opts.o, opts.o,\n\topts-common.o, toplev.o, passes.o, matrix-reorg.o,\n\tipa-struct-reorg.o, PLUGIN_HEADERS): Use $(OPTS_H).\n\t* gcc.c (driver_handle_option): Take location_t parameter.\n\t(process_command, do_self_spec): Update calls to\n\tread_cmdline_option.\n\t* langhooks-def.h (lhd_handle_option): Take location_t parameter.\n\t* langhooks.c (lhd_handle_option): Take location_t parameter.\n\t* langhooks.h (handle_option): Take location_t parameter.\n\t* lto-opts.c (lto_reissue_options): Update call to set_option.\n\t* opts-common.c (handle_option): Make static.  Take location_t\n\tparameter and pass it to other functions.\n\t(handle_generated_option): Take location_t parameter and pass it\n\tto other functions.\n\t(read_cmdline_option): Take location_t parameter and pass it to\n\tother functions.  Use warning_at and error_at.\n\t(set_option): Take location_t parameter and pass it to other\n\tfunctions.\n\t* opts.c (common_handle_option): Take location_t parameter and\n\tpass it to other functions.\n\t(enable_warning_as_error): Make static.  Take location_t parameter\n\tand pass it to other functions.\n\t(lang_handle_option): Take location_t parameter and pass it to\n\tother functions.\n\t(target_handle_option): Take location_t parameter.\n\t(read_cmdline_options, maybe_default_option,\n\tmaybe_default_options, default_options_optimization,\n\tdecode_options): Take location_t parameter and pass it to other\n\tfunctions.\n\t* opts.h: Include input.h.\n\t(struct cl_option_handler_func, decode_options, set_option,\n\thandle_generated_option, read_cmdline_option): Take location_t\n\tparameters.\n\t(handle_option, enable_warning_as_error): Remove.\n\t* toplev.c (toplev_main): Update call to decode_options.\n\nada:\n\t* gcc-interface/Make-lang.in (ada/misc.o): Use $(OPTS_H).\n\t* gcc-interface/misc.c (gnat_handle_option): Take location_t\n\tparameter.\n\nc-family:\n\t* c-common.c (parse_optimize_options): Update call to\n\tdecode_options.\n\t* c-common.h (c_common_handle_option): Update prototype.\n\t* c-opts.c (c_common_handle_option): Take location_t parameter and\n\tpass it to other functions.\n\ncp:\n\t* Make-lang.in (g++spec.o): Use $(OPTS_H).\n\nfortran:\n\t* Make-lang.in (gfortranspec.o): Use $(OPTS_H).\n\t* gfortran.h (gfc_handle_option): Take location_t parameter.\n\t* options.c (gfc_handle_option): Take location_t parameter.\n\njava:\n\t* Make-lang.in (jvspec.o, java/lang.o): Use $(OPTS_H).\n\t* lang.c (java_handle_option): Take location_t parameter.\n\nlto:\n\t* Make-lang.in (lto/lto.o): Use $(OPTS_H).\n\t* lto-lang.c (lto_handle_option): Take location_t parameter.\n\nFrom-SVN: r166688", "tree": {"sha": "ac9656c3417bd52665bd19c9ce7e400c0cee83d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac9656c3417bd52665bd19c9ce7e400c0cee83d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4d8c676006f3b672af5088f52160e762aa7a197", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4d8c676006f3b672af5088f52160e762aa7a197", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4d8c676006f3b672af5088f52160e762aa7a197", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4d8c676006f3b672af5088f52160e762aa7a197/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "912762788e85c0a95e633a68b4efaa38b9b39fd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/912762788e85c0a95e633a68b4efaa38b9b39fd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/912762788e85c0a95e633a68b4efaa38b9b39fd3"}], "stats": {"total": 334, "additions": 216, "deletions": 118}, "files": [{"sha": "6839f84a40186af6df5fa16caabb91bad00ba72d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -1,3 +1,44 @@\n+2010-11-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* Makefile.in (OPTS_H): Define.\n+\t(c-decl.o, c-family/c-common.o, c-family/c-opts.o,\n+\tc-family/c-pch.o, c-family/c-pragma.o, gcc.o, gccspec.o,\n+\tcppspec.o, options.o, gcc-options.o, lto-opts.o, opts.o,\n+\topts-common.o, toplev.o, passes.o, matrix-reorg.o,\n+\tipa-struct-reorg.o, PLUGIN_HEADERS): Use $(OPTS_H).\n+\t* gcc.c (driver_handle_option): Take location_t parameter.\n+\t(process_command, do_self_spec): Update calls to\n+\tread_cmdline_option.\n+\t* langhooks-def.h (lhd_handle_option): Take location_t parameter.\n+\t* langhooks.c (lhd_handle_option): Take location_t parameter.\n+\t* langhooks.h (handle_option): Take location_t parameter.\n+\t* lto-opts.c (lto_reissue_options): Update call to set_option.\n+\t* opts-common.c (handle_option): Make static.  Take location_t\n+\tparameter and pass it to other functions.\n+\t(handle_generated_option): Take location_t parameter and pass it\n+\tto other functions.\n+\t(read_cmdline_option): Take location_t parameter and pass it to\n+\tother functions.  Use warning_at and error_at.\n+\t(set_option): Take location_t parameter and pass it to other\n+\tfunctions.\n+\t* opts.c (common_handle_option): Take location_t parameter and\n+\tpass it to other functions.\n+\t(enable_warning_as_error): Make static.  Take location_t parameter\n+\tand pass it to other functions.\n+\t(lang_handle_option): Take location_t parameter and pass it to\n+\tother functions.\n+\t(target_handle_option): Take location_t parameter.\n+\t(read_cmdline_options, maybe_default_option,\n+\tmaybe_default_options, default_options_optimization,\n+\tdecode_options): Take location_t parameter and pass it to other\n+\tfunctions.\n+\t* opts.h: Include input.h.\n+\t(struct cl_option_handler_func, decode_options, set_option,\n+\thandle_generated_option, read_cmdline_option): Take location_t\n+\tparameters.\n+\t(handle_option, enable_warning_as_error): Remove.\n+\t* toplev.c (toplev_main): Update call to decode_options.\n+\n 2010-11-12  Tobias Grosser  <grosser@fim.uni-passau.de>\n \n \t* graphite-cloog-util.c (oppose_constraint,"}, {"sha": "ce71b41bc7804f5f3eab9ff9f6659c8331f04818", "filename": "gcc/Makefile.in", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -932,6 +932,7 @@ PREDICT_H = predict.h predict.def\n CPPLIB_H = $(srcdir)/../libcpp/include/line-map.h \\\n \t$(srcdir)/../libcpp/include/cpplib.h\n INPUT_H = $(srcdir)/../libcpp/include/line-map.h input.h\n+OPTS_H = $(INPUT_H) opts.h\n DECNUM_H = $(DECNUM)/decContext.h $(DECNUM)/decDPD.h $(DECNUM)/decNumber.h \\\n \t$(DECNUMFMT)/decimal32.h $(DECNUMFMT)/decimal64.h \\\n \t$(DECNUMFMT)/decimal128.h $(DECNUMFMT)/decimal128Local.h\n@@ -2005,7 +2006,7 @@ c-convert.o : c-convert.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n c-decl.o : c-decl.c c-lang.h $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t$(TREE_H) $(C_TREE_H) $(GGC_H) $(TARGET_H) $(FLAGS_H) $(FUNCTION_H) \\\n \toutput.h debug.h $(TOPLEV_H) intl.h $(TM_P_H) $(TREE_INLINE_H) \\\n-\t$(TIMEVAR_H) opts.h $(C_PRAGMA_H) gt-c-decl.h $(CGRAPH_H) \\\n+\t$(TIMEVAR_H) $(OPTS_H) $(C_PRAGMA_H) gt-c-decl.h $(CGRAPH_H) \\\n \t$(HASHTAB_H) $(LIBFUNCS_H) $(EXCEPT_H) $(LANGHOOKS_DEF_H) \\\n \t$(TREE_DUMP_H) $(C_COMMON_H) $(CPPLIB_H) $(DIAGNOSTIC_CORE_H) \\\n \t$(INPUT_H) langhooks.h tree-mudflap.h pointer-set.h tree-iterator.h \\\n@@ -2081,7 +2082,7 @@ c-family/c-common.o : c-family/c-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \t$(GGC_H) builtin-types.def builtin-attrs.def \\\n \t$(DIAGNOSTIC_H) langhooks.h \\\n \t$(TARGET_H) tree-iterator.h langhooks.h tree-mudflap.h \\\n-\tintl.h opts.h $(CPPLIB_H) $(TREE_INLINE_H) $(HASHTAB_H) \\\n+\tintl.h $(OPTS_H) $(CPPLIB_H) $(TREE_INLINE_H) $(HASHTAB_H) \\\n \t$(BUILTINS_DEF) $(CGRAPH_H) $(BASIC_BLOCK_H) $(TARGET_DEF_H) \\\n \t$(LIBFUNCS_H) \\\n \tgt-c-family-c-common.h\n@@ -2118,14 +2119,14 @@ c-family/c-omp.o : c-family/c-omp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n c-family/c-opts.o : c-family/c-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n         $(TREE_H) $(C_PRAGMA_H) $(FLAGS_H) $(TOPLEV_H) langhooks.h \\\n         $(DIAGNOSTIC_H) intl.h debug.h $(C_COMMON_H)\t\\\n-        opts.h $(OPTIONS_H) $(MKDEPS_H) incpath.h cppdefault.h\n+        $(OPTS_H) $(OPTIONS_H) $(MKDEPS_H) incpath.h cppdefault.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n \t\t$< $(OUTPUT_OPTION) @TARGET_SYSTEM_ROOT_DEFINE@\n \n c-family/c-pch.o : c-family/c-pch.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \t$(CPPLIB_H) $(TREE_H) $(C_COMMON_H) output.h $(TOPLEV_H) $(C_PRAGMA_H) \\\n \t$(GGC_H) debug.h langhooks.h $(FLAGS_H) hosthooks.h version.h \\\n-\t$(TARGET_H) opts.h $(TIMEVAR_H)\n+\t$(TARGET_H) $(OPTS_H) $(TIMEVAR_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n \t  -DHOST_MACHINE=\\\"$(host)\\\" -DTARGET_MACHINE=\\\"$(target)\\\" \\\n \t  $< $(OUTPUT_OPTION)\n@@ -2137,7 +2138,7 @@ c-family/c-ppoutput.o : c-family/c-ppoutput.c $(CONFIG_H) $(SYSTEM_H) \\\n c-family/c-pragma.o: c-family/c-pragma.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \t$(TM_H) $(TREE_H) $(FUNCTION_H) $(C_PRAGMA_H) $(TOPLEV_H) output.h \\\n \t$(TM_P_H) $(C_COMMON_H) $(TARGET_H) $(CPPLIB_H) $(FLAGS_H) \\\n-\t$(DIAGNOSTIC_H) opts.h $(PLUGINS_H) \\\n+\t$(DIAGNOSTIC_H) $(OPTS_H) $(PLUGINS_H) \\\n \tgt-c-family-c-pragma.h\n \n c-family/c-pretty-print.o : c-family/c-pretty-print.c $(C_PRETTY_PRINT_H) \\\n@@ -2190,21 +2191,21 @@ DRIVER_DEFINES = \\\n \n gcc.o: gcc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) intl.h multilib.h \\\n     Makefile $(lang_specs_files) specs.h prefix.h $(GCC_H) $(FLAGS_H) \\\n-    configargs.h $(OBSTACK_H) opts.h $(DIAGNOSTIC_H)\n+    configargs.h $(OBSTACK_H) $(OPTS_H) $(DIAGNOSTIC_H)\n \t(SHLIB_LINK='$(SHLIB_LINK)'; \\\n \t$(COMPILER) $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n   $(DRIVER_DEFINES) \\\n   -c $(srcdir)/gcc.c $(OUTPUT_OPTION))\n \n gccspec.o: gccspec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(GCC_H) \\\n-    opts.h\n+    $(OPTS_H)\n \t(SHLIB_LINK='$(SHLIB_LINK)'; \\\n \t$(COMPILER) $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n   $(DRIVER_DEFINES) \\\n   -c $(srcdir)/gccspec.c $(OUTPUT_OPTION))\n \n cppspec.o: cppspec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(GCC_H) \\\n-    opts.h\n+    $(OPTS_H)\n \n specs.h : s-specs ; @true\n s-specs : Makefile\n@@ -2232,9 +2233,9 @@ s-options-h: optionlist $(srcdir)/opt-functions.awk $(srcdir)/opth-gen.awk\n \t$(STAMP) $@\n \n options.o: options.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TARGET_H) $(FLAGS_H) \\\n-\t$(TM_H) opts.h intl.h\n+\t$(TM_H) $(OPTS_H) intl.h\n \n-gcc-options.o: options.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) opts.h intl.h\n+gcc-options.o: options.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(OPTS_H) intl.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(OUTPUT_OPTION) \\\n \t\t-DGCC_DRIVER options.c\n \n@@ -2315,7 +2316,7 @@ lto-symtab.o: lto-symtab.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    toplev.h $(TREE_H) $(GIMPLE_H) $(GGC_H) $(LAMBDA_H) $(HASHTAB_H) \\\n    $(LTO_STREAMER_H) $(LINKER_PLUGIN_API_H) gt-lto-symtab.h\n lto-opts.o: lto-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n-   $(HASHTAB_H) $(GGC_H) $(BITMAP_H) $(FLAGS_H) opts.h $(OPTIONS_H) \\\n+   $(HASHTAB_H) $(GGC_H) $(BITMAP_H) $(FLAGS_H) $(OPTS_H) $(OPTIONS_H) \\\n    $(TARGET_H) $(TOPLEV_H) $(DIAGNOSTIC_H) $(LTO_STREAMER_H)\n lto-streamer.o: lto-streamer.c $(CONFIG_H) $(SYSTEM_H) coretypes.h   \\\n    $(TM_H) $(TREE_H) $(GIMPLE_H) $(BITMAP_H) $(LTO_STREAMER_H) $(FLAGS_H) \\\n@@ -2807,12 +2808,12 @@ fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(GIMPLE_H) realmpfr.h $(TREE_FLOW_H)\n diagnostic.o : diagnostic.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    version.h $(INPUT_H) intl.h $(DIAGNOSTIC_H) diagnostic.def\n-opts.o : opts.c opts.h $(OPTIONS_H) $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) $(CONFIG_H) $(SYSTEM_H) \\\n+opts.o : opts.c $(OPTS_H) $(OPTIONS_H) $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TREE_H) $(TM_H) langhooks.h $(GGC_H) $(EXPR_H) $(RTL_H) \\\n    output.h $(DIAGNOSTIC_H) $(TM_P_H) $(INSN_ATTR_H) intl.h $(TARGET_H) \\\n    $(FLAGS_H) $(PARAMS_H) $(TREE_PASS_H) $(DBGCNT_H) debug.h \\\n    $(PLUGIN_H) $(EXCEPT_H) $(LTO_STREAMER_H) opts-diagnostic.h\n-opts-common.o : opts-common.c opts.h $(FLAGS_H) $(CONFIG_H) $(SYSTEM_H) \\\n+opts-common.o : opts-common.c $(OPTS_H) $(FLAGS_H) $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h intl.h $(DIAGNOSTIC_H) $(TM_H)\n targhooks.o : targhooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n    $(EXPR_H) $(TM_H) $(RTL_H) $(TM_P_H) $(FUNCTION_H) output.h $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) \\\n@@ -2837,7 +2838,7 @@ toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    value-prof.h $(PARAMS_H) $(TM_P_H) reload.h ira.h dwarf2asm.h $(TARGET_H) \\\n    langhooks.h insn-flags.h $(CFGLAYOUT_H) $(CFGLOOP_H) hosthooks.h \\\n    $(CGRAPH_H) $(COVERAGE_H) alloc-pool.h $(GGC_H) $(INTEGRATE_H) \\\n-   opts.h params.def tree-mudflap.h $(TREE_PASS_H) $(GIMPLE_H) \\\n+   $(OPTS_H) params.def tree-mudflap.h $(TREE_PASS_H) $(GIMPLE_H) \\\n    tree-ssa-alias.h $(PLUGIN_H) realmpfr.h tree-diagnostic.h \\\n    tree-pretty-print.h opts-diagnostic.h\n \t$(COMPILER) $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n@@ -2852,7 +2853,7 @@ passes.o : passes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(PARAMS_H) $(TM_P_H) reload.h dwarf2asm.h $(TARGET_H) \\\n    langhooks.h insn-flags.h $(CFGLAYOUT_H) $(CFGLOOP_H) \\\n    hosthooks.h $(CGRAPH_H) $(COVERAGE_H) $(TREE_PASS_H) $(TREE_DUMP_H) \\\n-   $(GGC_H) $(INTEGRATE_H) $(CPPLIB_H) opts.h $(TREE_FLOW_H) $(TREE_INLINE_H) \\\n+   $(GGC_H) $(INTEGRATE_H) $(CPPLIB_H) $(OPTS_H) $(TREE_FLOW_H) $(TREE_INLINE_H) \\\n    gt-passes.h $(DF_H) $(PREDICT_H) $(LTO_HEADER_H) $(LTO_SECTION_OUT_H) \\\n    $(PLUGIN_H)\n \n@@ -3032,7 +3033,7 @@ matrix-reorg.o : matrix-reorg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h  \\\n    tree-flow-inline.h langhooks.h $(HASHTAB_H) $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) $(FLAGS_H) $(GGC_H) \\\n    debug.h $(TARGET_H) $(CGRAPH_H) $(DIAGNOSTIC_CORE_H) $(TIMEVAR_H) \\\n    $(PARAMS_H) $(FIBHEAP_H) intl.h $(FUNCTION_H) $(BASIC_BLOCK_H) \\\n-   $(CFGLOOP_H) tree-iterator.h $(TREE_PASS_H) opts.h $(TREE_DATA_REF_H) \\\n+   $(CFGLOOP_H) tree-iterator.h $(TREE_PASS_H) $(OPTS_H) $(TREE_DATA_REF_H) \\\n    tree-ssa-sccvn.h\n ipa-inline.o : ipa-inline.c gt-ipa-inline.h $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(TREE_INLINE_H) $(FLAGS_H) $(CGRAPH_H) intl.h \\\n@@ -3064,7 +3065,7 @@ ipa-struct-reorg.o: ipa-struct-reorg.c ipa-struct-reorg.h $(CONFIG_H) $(SYSTEM_H\n    $(TREE_FLOW_H) langhooks.h pointer-set.h $(HASHTAB_H) $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) \\\n    $(FLAGS_H) debug.h $(TARGET_H) $(CGRAPH_H) $(DIAGNOSTIC_H) $(TIMEVAR_H) \\\n    $(PARAMS_H) $(FIBHEAP_H) intl.h $(FUNCTION_H) $(BASIC_BLOCK_H) tree-iterator.h \\\n-   $(TREE_PASS_H) opts.h $(IPA_TYPE_ESCAPE_H) $(TREE_DUMP_H) \\\n+   $(TREE_PASS_H) $(OPTS_H) $(IPA_TYPE_ESCAPE_H) $(TREE_DUMP_H) \\\n    $(GIMPLE_H) tree-pretty-print.h gimple-pretty-print.h\n \n coverage.o : coverage.c $(GCOV_IO_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n@@ -4498,7 +4499,7 @@ installdirs:\n \n PLUGIN_HEADERS = $(TREE_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) $(BASIC_BLOCK_H) $(GIMPLE_H) $(TREE_PASS_H) $(GCC_PLUGIN_H) \\\n-  $(GGC_H) $(TREE_DUMP_H) $(PRETTY_PRINT_H) opts.h $(PARAMS_H) plugin.def \\\n+  $(GGC_H) $(TREE_DUMP_H) $(PRETTY_PRINT_H) $(OPTS_H) $(PARAMS_H) plugin.def \\\n   $(tm_file_list) $(tm_include_list) $(tm_p_file_list) $(tm_p_include_list) \\\n   $(host_xm_file_list) $(host_xm_include_list) $(xm_include_list) \\\n   intl.h $(PLUGIN_VERSION_H) $(DIAGNOSTIC_H) $(C_COMMON_H) $(C_PRETTY_PRINT_H) \\"}, {"sha": "d764fb6dce7e92171364f807d38a4e1fb752ae8e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -1,3 +1,9 @@\n+2010-11-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc-interface/Make-lang.in (ada/misc.o): Use $(OPTS_H).\n+\t* gcc-interface/misc.c (gnat_handle_option): Take location_t\n+\tparameter.\n+\n 2010-11-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (gigi): Don't set 'pure' flag on SJLJ routines."}, {"sha": "b320e438b76ba354204c329e6fa5802afe6941fd", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -1231,7 +1231,7 @@ ada/decl.o : ada/gcc-interface/decl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n ada/misc.o : ada/gcc-interface/misc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) $(DIAGNOSTIC_H) $(TARGET_H) $(FUNCTION_H) \\\n    $(FLAGS_H) debug.h toplev.h langhooks.h \\\n-   $(LANGHOOKS_DEF_H) opts.h $(OPTIONS_H) $(TREE_INLINE_H) $(PLUGIN_H) \\\n+   $(LANGHOOKS_DEF_H) $(OPTS_H) $(OPTIONS_H) $(TREE_INLINE_H) $(PLUGIN_H) \\\n    ada/gcc-interface/ada.h ada/adadecode.h ada/types.h ada/atree.h \\\n    ada/elists.h ada/namet.h ada/nlists.h ada/stringt.h ada/uintp.h ada/fe.h \\\n    ada/sinfo.h ada/einfo.h $(ADA_TREE_H) ada/gcc-interface/gigi.h \\"}, {"sha": "40f0db874ff9b439efd9eab04cf7c150a0255e06", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -102,7 +102,7 @@ gnat_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n \n static bool\n gnat_handle_option (size_t scode, const char *arg ATTRIBUTE_UNUSED, int value,\n-\t\t    int kind ATTRIBUTE_UNUSED,\n+\t\t    int kind ATTRIBUTE_UNUSED, location_t loc ATTRIBUTE_UNUSED,\n \t\t    const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED)\n {\n   enum opt_code code = (enum opt_code) scode;"}, {"sha": "1bbb95709cfc3b2207196df9fcd855da77c5e9fb", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -1,3 +1,11 @@\n+2010-11-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c (parse_optimize_options): Update call to\n+\tdecode_options.\n+\t* c-common.h (c_common_handle_option): Update prototype.\n+\t* c-opts.c (c_common_handle_option): Take location_t parameter and\n+\tpass it to other functions.\n+\n 2010-11-11  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-opts.c (warning_as_error_callback): Remove."}, {"sha": "7e7164075088a443390e7d1d2cbe4a0536db2846", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -7804,7 +7804,8 @@ parse_optimize_options (tree args, bool attr_p)\n \t\t\t\t\t\t&decoded_options,\n \t\t\t\t\t\t&decoded_options_count);\n   decode_options (&global_options, &global_options_set,\n-\t\t  decoded_options, decoded_options_count, global_dc);\n+\t\t  decoded_options, decoded_options_count,\n+\t\t  input_location, global_dc);\n \n   targetm.override_options_after_change();\n "}, {"sha": "eb6cf263325f7e0eead8875e1eba37a2aaaac422", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -696,7 +696,7 @@ extern void set_Wformat (int);\n extern tree handle_format_attribute (tree *, tree, tree, int, bool *);\n extern tree handle_format_arg_attribute (tree *, tree, tree, int, bool *);\n extern bool attribute_takes_identifier_p (const_tree);\n-extern bool c_common_handle_option (size_t, const char *, int, int,\n+extern bool c_common_handle_option (size_t, const char *, int, int, location_t,\n \t\t\t\t    const struct cl_option_handlers *);\n extern tree c_common_type_for_mode (enum machine_mode, int);\n extern tree c_common_type_for_size (unsigned int, int);"}, {"sha": "7ddb75479782f27cb843a21d2dd395eae0985736", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -241,7 +241,8 @@ c_common_init_options (unsigned int decoded_options_count,\n    invalid, true if valid.  Use HANDLERS in recursive handle_option calls.  */\n bool\n c_common_handle_option (size_t scode, const char *arg, int value,\n-\t\t\tint kind, const struct cl_option_handlers *handlers)\n+\t\t\tint kind, location_t loc,\n+\t\t\tconst struct cl_option_handlers *handlers)\n {\n   const struct cl_option *option = &cl_options[scode];\n   enum opt_code code = (enum opt_code) scode;\n@@ -357,7 +358,8 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       set_Wformat (value);\n       handle_generated_option (&global_options, &global_options_set,\n \t\t\t       OPT_Wimplicit, NULL, value,\n-\t\t\t       c_family_lang_mask, kind, handlers, global_dc);\n+\t\t\t       c_family_lang_mask, kind, loc,\n+\t\t\t       handlers, global_dc);\n       warn_char_subscripts = value;\n       warn_missing_braces = value;\n       warn_parentheses = value;\n@@ -452,13 +454,13 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       if (warn_implicit_int == -1)\n \thandle_generated_option (&global_options, &global_options_set,\n \t\t\t\t OPT_Wimplicit_int, NULL, value,\n-\t\t\t\t c_family_lang_mask, kind, handlers,\n+\t\t\t\t c_family_lang_mask, kind, loc, handlers,\n \t\t\t\t global_dc);\n       if (warn_implicit_function_declaration == -1)\n \thandle_generated_option (&global_options, &global_options_set,\n \t\t\t\t OPT_Wimplicit_function_declaration, NULL,\n-\t\t\t\t value, c_family_lang_mask, kind, handlers,\n-\t\t\t\t global_dc);\n+\t\t\t\t value, c_family_lang_mask, kind, loc,\n+\t\t\t\t handlers, global_dc);\n       break;\n \n     case OPT_Winvalid_pch:"}, {"sha": "192f35acd4d7db17a3f787c08ed01d629bd696a1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -1,3 +1,7 @@\n+2010-11-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* Make-lang.in (g++spec.o): Use $(OPTS_H).\n+\n 2010-11-13  Ville Voutilainen <ville.voutilainen@gmail.com> <ville.voutilainen@symbio.com>\n \n \tCore 1135, 1136, 1145, 1149"}, {"sha": "69f9d643e12f9e059b0ad860f9553dcc3a627875", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -54,7 +54,7 @@ c++: cc1plus$(exeext)\n .PHONY: c++\n \n g++spec.o: $(srcdir)/cp/g++spec.c $(SYSTEM_H) coretypes.h $(TM_H) $(GCC_H) \\\n-    $(CONFIG_H) opts.h\n+    $(CONFIG_H) $(OPTS_H)\n \t(SHLIB_LINK='$(SHLIB_LINK)'; \\\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(DRIVER_DEFINES) \\\n \t\t$(INCLUDES) $(srcdir)/cp/g++spec.c)"}, {"sha": "7d7a0793c4b803e0c2c6c28ad651c482f61f83ea", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -1,3 +1,9 @@\n+2010-11-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* Make-lang.in (gfortranspec.o): Use $(OPTS_H).\n+\t* gfortran.h (gfc_handle_option): Take location_t parameter.\n+\t* options.c (gfc_handle_option): Take location_t parameter.\n+\n 2010-11-12  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/45794"}, {"sha": "318064a809e954ab0eb5f2fa0258d152f8a3d8a9", "filename": "gcc/fortran/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Ffortran%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Ffortran%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FMake-lang.in?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -78,7 +78,7 @@ fortran: f951$(exeext)\n .PHONY: fortran\n \n gfortranspec.o: $(srcdir)/fortran/gfortranspec.c $(SYSTEM_H) $(TM_H) $(GCC_H) \\\n-\t$(CONFIG_H) coretypes.h intl.h opts.h\n+\t$(CONFIG_H) coretypes.h intl.h $(OPTS_H)\n \t(SHLIB_LINK='$(SHLIB_LINK)'; \\\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(DRIVER_DEFINES) \\\n \t\t$(INCLUDES) $(srcdir)/fortran/gfortranspec.c)"}, {"sha": "19e15abd83f2aa1c3db937e3c3ae37ce6b8ec055", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -2395,7 +2395,7 @@ unsigned int gfc_option_lang_mask (void);\n void gfc_init_options_struct (struct gcc_options *);\n void gfc_init_options (unsigned int,\n \t\t       struct cl_decoded_option *);\n-bool gfc_handle_option (size_t, const char *, int, int,\n+bool gfc_handle_option (size_t, const char *, int, int, location_t,\n \t\t\tconst struct cl_option_handlers *);\n bool gfc_post_options (const char **);\n char *gfc_get_option_string (void);"}, {"sha": "5381fde10e111aca92a8bfc77f772d2d675a1e25", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -552,7 +552,7 @@ gfc_handle_runtime_check_option (const char *arg)\n \n bool\n gfc_handle_option (size_t scode, const char *arg, int value,\n-\t\t   int kind ATTRIBUTE_UNUSED,\n+\t\t   int kind ATTRIBUTE_UNUSED, location_t loc ATTRIBUTE_UNUSED,\n \t\t   const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED)\n {\n   bool result = true;"}, {"sha": "521d2d44f21acbafbe2c43567b71647f0b33b1e8", "filename": "gcc/gcc.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -3141,6 +3141,7 @@ driver_handle_option (struct gcc_options *opts,\n \t\t      struct gcc_options *opts_set,\n \t\t      const struct cl_decoded_option *decoded,\n \t\t      unsigned int lang_mask ATTRIBUTE_UNUSED, int kind,\n+\t\t      location_t loc,\n \t\t      const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED,\n \t\t      diagnostic_context *dc)\n {\n@@ -3154,6 +3155,7 @@ driver_handle_option (struct gcc_options *opts,\n   gcc_assert (opts == &global_options);\n   gcc_assert (opts_set == &global_options_set);\n   gcc_assert (kind == DK_UNSPECIFIED);\n+  gcc_assert (loc == UNKNOWN_LOCATION);\n   gcc_assert (dc == global_dc);\n \n   switch (opt_index)\n@@ -3799,8 +3801,8 @@ process_command (unsigned int decoded_options_count,\n \t}\n \n       read_cmdline_option (&global_options, &global_options_set,\n-\t\t\t   decoded_options + j, CL_DRIVER, &handlers,\n-\t\t\t   global_dc);\n+\t\t\t   decoded_options + j, UNKNOWN_LOCATION,\n+\t\t\t   CL_DRIVER, &handlers, global_dc);\n     }\n \n   /* If -save-temps=obj and -o name, create the prefix to use for %b.\n@@ -4300,8 +4302,8 @@ do_self_spec (const char *spec)\n \n \t    default:\n \t      read_cmdline_option (&global_options, &global_options_set,\n-\t\t\t\t   decoded_options + j, CL_DRIVER, &handlers,\n-\t\t\t\t   global_dc);\n+\t\t\t\t   decoded_options + j, UNKNOWN_LOCATION,\n+\t\t\t\t   CL_DRIVER, &handlers, global_dc);\n \t      break;\n \t    }\n \t}"}, {"sha": "893291355a39c2e46f3d31adaceb5ab564fb6055", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -1,3 +1,8 @@\n+2010-11-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* Make-lang.in (jvspec.o, java/lang.o): Use $(OPTS_H).\n+\t* lang.c (java_handle_option): Take location_t parameter.\n+\n 2010-11-10  Joseph Myers  <joseph@codesourcery.com>\n \n \t* expr.c (expand_java_field_op): Use %' in diagnostic."}, {"sha": "beff30c6b7018135103b09786fbce5733198cce4", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -57,7 +57,7 @@ JAVA_TARGET_INDEPENDENT_BIN_TOOLS = jcf-dump\n .PHONY: java\n \n jvspec.o: $(srcdir)/java/jvspec.c $(SYSTEM_H) coretypes.h $(TM_H) \\\n-  $(GCC_H) $(CONFIG_H) java/jcf.h java/javaop.h opts.h\n+  $(GCC_H) $(CONFIG_H) java/jcf.h java/javaop.h $(OPTS_H)\n \t(SHLIB_LINK='$(SHLIB_LINK)'; \\\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(DRIVER_DEFINES) \\\n \t\t$(INCLUDES) $(srcdir)/java/jvspec.c $(OUTPUT_OPTION))\n@@ -302,7 +302,7 @@ java/jvgenmain.o: java/jvgenmain.c $(CONFIG_H) $(JAVA_TREE_H) $(SYSTEM_H) \\\n   coretypes.h $(TM_H) intl.h\n java/lang.o: java/lang.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h input.h \\\n   toplev.h $(SYSTEM_H) coretypes.h $(TM_H) $(DIAGNOSTIC_H) \\\n-  langhooks.h $(LANGHOOKS_DEF_H) gt-java-lang.h opts.h $(OPTIONS_H) \\\n+  langhooks.h $(LANGHOOKS_DEF_H) gt-java-lang.h $(OPTS_H) $(OPTIONS_H) \\\n   $(TARGET_H)\n java/mangle.o: java/mangle.c $(CONFIG_H) java/jcf.h $(JAVA_TREE_H) $(SYSTEM_H) \\\n   coretypes.h $(TM_H) toplev.h $(GGC_H) gt-java-mangle.h $(LANGHOOKS_DEF_H)"}, {"sha": "7a179785f359dea3141667388e83e28e57fc60a2", "filename": "gcc/java/lang.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -52,7 +52,7 @@ static void java_init_options_struct (struct gcc_options *);\n static void java_init_options (unsigned int, struct cl_decoded_option *);\n static bool java_post_options (const char **);\n \n-static bool java_handle_option (size_t, const char *, int, int,\n+static bool java_handle_option (size_t, const char *, int, int, location_t,\n \t\t\t\tconst struct cl_option_handlers *);\n static void put_decl_string (const char *, int);\n static void put_decl_node (tree, int);\n@@ -183,7 +183,7 @@ struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n  */\n static bool\n java_handle_option (size_t scode, const char *arg, int value,\n-\t\t    int kind ATTRIBUTE_UNUSED,\n+\t\t    int kind ATTRIBUTE_UNUSED, location_t loc ATTRIBUTE_UNUSED,\n \t\t    const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED)\n {\n   enum opt_code code = (enum opt_code) scode;"}, {"sha": "822925fcb0eb527fa068081d83d4b2cef82f2a6c", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -68,7 +68,7 @@ extern void lhd_initialize_diagnostics (diagnostic_context *);\n extern void lhd_init_options (unsigned int,\n \t\t\t      struct cl_decoded_option *);\n extern bool lhd_complain_wrong_lang_p (const struct cl_option *);\n-extern bool lhd_handle_option (size_t, const char *, int, int,\n+extern bool lhd_handle_option (size_t, const char *, int, int, location_t,\n \t\t\t       const struct cl_option_handlers *);\n extern tree lhd_callgraph_analyze_expr (tree *, int *);\n "}, {"sha": "1f656fe574eee6a4844d9118d1e80e958492b188", "filename": "gcc/langhooks.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -356,6 +356,7 @@ bool\n lhd_handle_option (size_t code ATTRIBUTE_UNUSED,\n \t\t   const char *arg ATTRIBUTE_UNUSED,\n \t\t   int value ATTRIBUTE_UNUSED, int kind ATTRIBUTE_UNUSED,\n+\t\t   location_t loc ATTRIBUTE_UNUSED,\n \t\t   const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED)\n {\n   return false;"}, {"sha": "87a8b2c621486b3154e5fef8499c84ff0adc2676", "filename": "gcc/langhooks.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -291,10 +291,12 @@ struct lang_hooks\n      checking whether ARG is NULL, which indicates that no argument\n      was in fact supplied.  For -f and -W switches, VALUE is 1 or 0\n      for the positive and negative forms respectively.  HANDLERS should\n-     be passed to any recursive handle_option calls.\n+     be passed to any recursive handle_option calls.  LOC is the\n+     location of the option.\n \n      Return true if the switch is valid, false if invalid.  */\n   bool (*handle_option) (size_t code, const char *arg, int value, int kind,\n+\t\t\t location_t loc,\n \t\t\t const struct cl_option_handlers *handlers);\n \n   /* Called when all command line options have been parsed to allow"}, {"sha": "eeb41e9d4ce818be2967fe0c5708cf1d11bb06f9", "filename": "gcc/lto-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Flto-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Flto-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-opts.c?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -404,7 +404,7 @@ lto_reissue_options (void)\n       if (flag_var)\n \tset_option (&global_options, &global_options_set,\n \t\t    o->code, o->value, o->arg,\n-\t\t    DK_UNSPECIFIED, global_dc);\n+\t\t    DK_UNSPECIFIED, UNKNOWN_LOCATION, global_dc);\n \n       if (o->type == CL_TARGET)\n \ttargetm.handle_option (o->code, o->arg, o->value);"}, {"sha": "21bbeffefbe0c7a8d506e489a13ccebedf8c2f30", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -1,3 +1,8 @@\n+2010-11-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* Make-lang.in (lto/lto.o): Use $(OPTS_H).\n+\t* lto-lang.c (lto_handle_option): Take location_t parameter.\n+\n 2010-11-10  Joseph Myers  <joseph@codesourcery.com>\n \n \t* lto.c (lto_resolution_read): Start diagnostics with lowercase"}, {"sha": "e988cc9e7cc96392fcd9ef4bb97487ed80de7924", "filename": "gcc/lto/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Flto%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Flto%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FMake-lang.in?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -80,7 +80,7 @@ lto/lto-lang.o: lto/lto-lang.c $(CONFIG_H) coretypes.h debug.h \\\n \tflags.h $(GGC_H) langhooks.h $(LANGHOOKS_DEF_H) $(SYSTEM_H) \\\n \t$(TARGET_H) $(LTO_H) $(GIMPLE_H) gtype-lto.h gt-lto-lto-lang.h \\\n \t$(EXPR_H)\n-lto/lto.o: lto/lto.c $(CONFIG_H) $(SYSTEM_H) coretypes.h opts.h \\\n+lto/lto.o: lto/lto.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(OPTS_H) \\\n \ttoplev.h $(TREE_H) $(DIAGNOSTIC_CORE_H) $(TM_H) \\\n \t$(CGRAPH_H) $(GGC_H) tree-ssa-operands.h $(TREE_PASS_H) \\\n \tlanghooks.h $(VEC_H) $(BITMAP_H) pointer-set.h $(IPA_PROP_H) \\"}, {"sha": "c7ca949b179178cee03956c69f6b04dcb4210417", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -657,6 +657,7 @@ const char *resolution_file_name;\n static bool\n lto_handle_option (size_t scode, const char *arg,\n \t\t   int value ATTRIBUTE_UNUSED, int kind ATTRIBUTE_UNUSED,\n+\t\t   location_t loc ATTRIBUTE_UNUSED,\n \t\t   const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED)\n {\n   enum opt_code code = (enum opt_code) scode;"}, {"sha": "c114d4e1f04ff7be355d9f69a6aa05f0bc8fc1ea", "filename": "gcc/opts-common.c", "status": "modified", "additions": 34, "deletions": 31, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -722,17 +722,19 @@ prune_options (struct cl_decoded_option **decoded_options,\n /* Handle option DECODED for the language indicated by LANG_MASK,\n    using the handlers in HANDLERS and setting fields in OPTS and\n    OPTS_SET.  KIND is the diagnostic_t if this is a diagnostics\n-   option, DK_UNSPECIFIED otherwise.  GENERATED_P is true for an\n-   option generated as part of processing another option or otherwise\n-   generated internally, false for one explicitly passed by the user.\n-   Returns false if the switch was invalid.  DC is the diagnostic\n-   context for options affecting diagnostics state, or NULL.  */\n+   option, DK_UNSPECIFIED otherwise, and LOC is the location of the\n+   option for options from the source file, UNKNOWN_LOCATION\n+   otherwise.  GENERATED_P is true for an option generated as part of\n+   processing another option or otherwise generated internally, false\n+   for one explicitly passed by the user.  Returns false if the switch\n+   was invalid.  DC is the diagnostic context for options affecting\n+   diagnostics state, or NULL.  */\n \n-bool\n+static bool\n handle_option (struct gcc_options *opts,\n \t       struct gcc_options *opts_set,\n \t       const struct cl_decoded_option *decoded,\n-\t       unsigned int lang_mask, int kind,\n+\t       unsigned int lang_mask, int kind, location_t loc,\n \t       const struct cl_option_handlers *handlers,\n \t       bool generated_p, diagnostic_context *dc)\n {\n@@ -745,13 +747,14 @@ handle_option (struct gcc_options *opts,\n \n   if (flag_var)\n     set_option (opts, (generated_p ? NULL : opts_set),\n-\t\topt_index, value, arg, kind, dc);\n+\t\topt_index, value, arg, kind, loc, dc);\n \n   for (i = 0; i < handlers->num_handlers; i++)\n     if (option->flags & handlers->handlers[i].mask)\n       {\n \tif (!handlers->handlers[i].handler (opts, opts_set, decoded,\n-\t\t\t\t\t    lang_mask, kind, handlers, dc))\n+\t\t\t\t\t    lang_mask, kind, loc,\n+\t\t\t\t\t    handlers, dc))\n \t  return false;\n \telse\n \t  handlers->post_handling_callback (decoded,\n@@ -770,15 +773,15 @@ bool\n handle_generated_option (struct gcc_options *opts,\n \t\t\t struct gcc_options *opts_set,\n \t\t\t size_t opt_index, const char *arg, int value,\n-\t\t\t unsigned int lang_mask, int kind,\n+\t\t\t unsigned int lang_mask, int kind, location_t loc,\n \t\t\t const struct cl_option_handlers *handlers,\n \t\t\t diagnostic_context *dc)\n {\n   struct cl_decoded_option decoded;\n \n   generate_option (opt_index, arg, value, lang_mask, &decoded);\n-  return handle_option (opts, opts_set, &decoded, lang_mask, kind, handlers,\n-\t\t\ttrue, dc);\n+  return handle_option (opts, opts_set, &decoded, lang_mask, kind, loc,\n+\t\t\thandlers, true, dc);\n }\n \n /* Fill in *DECODED with an option described by OPT_INDEX, ARG and\n@@ -836,15 +839,16 @@ generate_option_input_file (const char *file,\n   decoded->errors = 0;\n }\n \n-/* Handle the switch DECODED for the language indicated by LANG_MASK,\n-   using the handlers in *HANDLERS and setting fields in OPTS and\n-   OPTS_SET and using diagnostic context DC (if not NULL) for\n+/* Handle the switch DECODED (location LOC) for the language indicated\n+   by LANG_MASK, using the handlers in *HANDLERS and setting fields in\n+   OPTS and OPTS_SET and using diagnostic context DC (if not NULL) for\n    diagnostic options.  */\n \n void\n read_cmdline_option (struct gcc_options *opts,\n \t\t     struct gcc_options *opts_set,\n \t\t     struct cl_decoded_option *decoded,\n+\t\t     location_t loc,\n \t\t     unsigned int lang_mask,\n \t\t     const struct cl_option_handlers *handlers,\n \t\t     diagnostic_context *dc)\n@@ -853,12 +857,12 @@ read_cmdline_option (struct gcc_options *opts,\n   const char *opt = decoded->orig_option_with_args_text;\n \n   if (decoded->warn_message)\n-    warning (0, decoded->warn_message, opt);\n+    warning_at (loc, 0, decoded->warn_message, opt);\n \n   if (decoded->opt_index == OPT_SPECIAL_unknown)\n     {\n       if (handlers->unknown_option_callback (decoded))\n-\terror (\"unrecognized command line option %qs\", decoded->arg);\n+\terror_at (loc, \"unrecognized command line option %qs\", decoded->arg);\n       return;\n     }\n \n@@ -869,8 +873,8 @@ read_cmdline_option (struct gcc_options *opts,\n \n   if (decoded->errors & CL_ERR_DISABLED)\n     {\n-      error (\"command line option %qs\"\n-\t     \" is not supported by this configuration\", opt);\n+      error_at (loc, \"command line option %qs\"\n+\t\t\" is not supported by this configuration\", opt);\n       return;\n     }\n \n@@ -883,35 +887,35 @@ read_cmdline_option (struct gcc_options *opts,\n   if (decoded->errors & CL_ERR_MISSING_ARG)\n     {\n       if (option->missing_argument_error)\n-\terror (option->missing_argument_error, opt);\n+\terror_at (loc, option->missing_argument_error, opt);\n       else\n-\terror (\"missing argument to %qs\", opt);\n+\terror_at (loc, \"missing argument to %qs\", opt);\n       return;\n     }\n \n   if (decoded->errors & CL_ERR_UINT_ARG)\n     {\n-      error (\"argument to %qs should be a non-negative integer\",\n-\t     option->opt_text);\n+      error_at (loc, \"argument to %qs should be a non-negative integer\",\n+\t\toption->opt_text);\n       return;\n     }\n \n   gcc_assert (!decoded->errors);\n \n   if (!handle_option (opts, opts_set, decoded, lang_mask, DK_UNSPECIFIED,\n-\t\t      handlers, false, dc))\n-    error (\"unrecognized command line option %qs\", opt);\n+\t\t      loc, handlers, false, dc))\n+    error_at (loc, \"unrecognized command line option %qs\", opt);\n }\n \n /* Set any field in OPTS, and OPTS_SET if not NULL, for option\n-   OPT_INDEX according to VALUE and ARG, diagnostic kind KIND, using\n-   diagnostic context DC if not NULL for diagnostic\n-   classification.  */\n+   OPT_INDEX according to VALUE and ARG, diagnostic kind KIND,\n+   location LOC, using diagnostic context DC if not NULL for\n+   diagnostic classification.  */\n \n void\n set_option (struct gcc_options *opts, struct gcc_options *opts_set,\n \t    int opt_index, int value, const char *arg, int kind,\n-\t    diagnostic_context *dc)\n+\t    location_t loc, diagnostic_context *dc)\n {\n   const struct cl_option *option = &cl_options[opt_index];\n   void *flag_var = option_flag_var (opt_index, opts);\n@@ -958,8 +962,7 @@ set_option (struct gcc_options *opts, struct gcc_options *opts_set,\n \n   if ((diagnostic_t) kind != DK_UNSPECIFIED\n       && dc != NULL)\n-    diagnostic_classify_diagnostic (dc, opt_index, (diagnostic_t) kind,\n-\t\t\t\t    UNKNOWN_LOCATION);\n+    diagnostic_classify_diagnostic (dc, opt_index, (diagnostic_t) kind, loc);\n }\n \n /* Return the address of the flag variable for option OPT_INDEX in"}, {"sha": "5d8793e4ed875cc7fb38b7ccded0cb9da7ef2b4f", "filename": "gcc/opts.c", "status": "modified", "additions": 46, "deletions": 30, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -347,6 +347,7 @@ static bool common_handle_option (struct gcc_options *opts,\n \t\t\t\t  struct gcc_options *opts_set,\n \t\t\t\t  const struct cl_decoded_option *decoded,\n \t\t\t\t  unsigned int lang_mask, int kind,\n+\t\t\t\t  location_t loc,\n \t\t\t\t  const struct cl_option_handlers *handlers,\n \t\t\t\t  diagnostic_context *dc);\n static void handle_param (struct gcc_options *opts,\n@@ -359,6 +360,11 @@ static void set_debug_level (enum debug_info_type type, int extended,\n static void set_fast_math_flags (struct gcc_options *opts, int set);\n static void set_unsafe_math_optimizations_flags (struct gcc_options *opts,\n \t\t\t\t\t\t int set);\n+static void enable_warning_as_error (const char *arg, int value,\n+\t\t\t\t     unsigned int lang_mask,\n+\t\t\t\t     const struct cl_option_handlers *handlers,\n+\t\t\t\t     location_t loc,\n+\t\t\t\t     diagnostic_context *dc);\n \n /* Return a malloced slash-separated list of languages in MASK.  */\n static char *\n@@ -493,6 +499,7 @@ lang_handle_option (struct gcc_options *opts,\n \t\t    struct gcc_options *opts_set,\n \t\t    const struct cl_decoded_option *decoded,\n \t\t    unsigned int lang_mask ATTRIBUTE_UNUSED, int kind,\n+\t\t    location_t loc,\n \t\t    const struct cl_option_handlers *handlers,\n \t\t    diagnostic_context *dc)\n {\n@@ -501,7 +508,7 @@ lang_handle_option (struct gcc_options *opts,\n   gcc_assert (dc == global_dc);\n   gcc_assert (decoded->canonical_option_num_elements <= 2);\n   return lang_hooks.handle_option (decoded->opt_index, decoded->arg,\n-\t\t\t\t   decoded->value, kind, handlers);\n+\t\t\t\t   decoded->value, kind, loc, handlers);\n }\n \n /* Handle a back-end option; arguments and return value as for\n@@ -512,6 +519,7 @@ target_handle_option (struct gcc_options *opts,\n \t\t      struct gcc_options *opts_set,\n \t\t      const struct cl_decoded_option *decoded,\n \t\t      unsigned int lang_mask ATTRIBUTE_UNUSED, int kind,\n+\t\t      location_t loc,\n \t\t      const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED,\n \t\t      diagnostic_context *dc)\n {\n@@ -520,6 +528,7 @@ target_handle_option (struct gcc_options *opts,\n   gcc_assert (dc == global_dc);\n   gcc_assert (decoded->canonical_option_num_elements <= 2);\n   gcc_assert (kind == DK_UNSPECIFIED);\n+  gcc_assert (loc == UNKNOWN_LOCATION);\n   return targetm.handle_option (decoded->opt_index, decoded->arg,\n \t\t\t\tdecoded->value);\n }\n@@ -605,15 +614,16 @@ flag_instrument_functions_exclude_p (tree fndecl)\n }\n \n \n-/* Handle the vector of command line options, storing the results of\n-   processing DECODED_OPTIONS and DECODED_OPTIONS_COUNT in OPTS and\n-   OPTS_SET and using DC for diagnostic state.  LANG_MASK contains has\n-   a single bit set representing the current language.  HANDLERS\n-   describes what functions to call for the options.  */\n+/* Handle the vector of command line options (located at LOC), storing\n+   the results of processing DECODED_OPTIONS and DECODED_OPTIONS_COUNT\n+   in OPTS and OPTS_SET and using DC for diagnostic state.  LANG_MASK\n+   contains has a single bit set representing the current language.\n+   HANDLERS describes what functions to call for the options.  */\n static void\n read_cmdline_options (struct gcc_options *opts, struct gcc_options *opts_set,\n \t\t      struct cl_decoded_option *decoded_options,\n \t\t      unsigned int decoded_options_count,\n+\t\t      location_t loc,\n \t\t      unsigned int lang_mask,\n \t\t      const struct cl_option_handlers *handlers,\n \t\t      diagnostic_context *dc)\n@@ -640,7 +650,7 @@ read_cmdline_options (struct gcc_options *opts, struct gcc_options *opts_set,\n \t}\n \n       read_cmdline_option (opts, opts_set,\n-\t\t\t   decoded_options + i, lang_mask, handlers,\n+\t\t\t   decoded_options + i, loc, lang_mask, handlers,\n \t\t\t   dc);\n     }\n }\n@@ -712,8 +722,8 @@ decode_cmdline_options_to_array_default_mask (unsigned int argc,\n \n /* If indicated by the optimization level LEVEL (-Os if SIZE is set,\n    -Ofast if FAST is set), apply the option DEFAULT_OPT to OPTS and\n-   OPTS_SET, diagnostic context DC, with language mask LANG_MASK and\n-   option handlers HANDLERS.  */\n+   OPTS_SET, diagnostic context DC, location LOC, with language mask\n+   LANG_MASK and option handlers HANDLERS.  */\n \n static void\n maybe_default_option (struct gcc_options *opts,\n@@ -722,6 +732,7 @@ maybe_default_option (struct gcc_options *opts,\n \t\t      int level, bool size, bool fast,\n \t\t      unsigned int lang_mask,\n \t\t      const struct cl_option_handlers *handlers,\n+\t\t      location_t loc,\n \t\t      diagnostic_context *dc)\n {\n   const struct cl_option *option = &cl_options[default_opt->opt_index];\n@@ -782,18 +793,20 @@ maybe_default_option (struct gcc_options *opts,\n   if (enabled)\n     handle_generated_option (opts, opts_set, default_opt->opt_index,\n \t\t\t     default_opt->arg, default_opt->value,\n-\t\t\t     lang_mask, DK_UNSPECIFIED, handlers, dc);\n+\t\t\t     lang_mask, DK_UNSPECIFIED, loc,\n+\t\t\t     handlers, dc);\n   else if (default_opt->arg == NULL\n \t   && !(option->flags & CL_REJECT_NEGATIVE))\n     handle_generated_option (opts, opts_set, default_opt->opt_index,\n \t\t\t     default_opt->arg, !default_opt->value,\n-\t\t\t     lang_mask, DK_UNSPECIFIED, handlers, dc);\n+\t\t\t     lang_mask, DK_UNSPECIFIED, loc,\n+\t\t\t     handlers, dc);\n }\n \n /* As indicated by the optimization level LEVEL (-Os if SIZE is set,\n    -Ofast if FAST is set), apply the options in array DEFAULT_OPTS to\n-   OPTS and OPTS_SET, diagnostic context DC, with language mask\n-   LANG_MASK and option handlers HANDLERS.  */\n+   OPTS and OPTS_SET, diagnostic context DC, location LOC, with\n+   language mask LANG_MASK and option handlers HANDLERS.  */\n \n static void\n maybe_default_options (struct gcc_options *opts,\n@@ -802,13 +815,14 @@ maybe_default_options (struct gcc_options *opts,\n \t\t       int level, bool size, bool fast,\n \t\t       unsigned int lang_mask,\n \t\t       const struct cl_option_handlers *handlers,\n+\t\t       location_t loc,\n \t\t       diagnostic_context *dc)\n {\n   size_t i;\n \n   for (i = 0; default_opts[i].levels != OPT_LEVELS_NONE; i++)\n     maybe_default_option (opts, opts_set, &default_opts[i],\n-\t\t\t  level, size, fast, lang_mask, handlers, dc);\n+\t\t\t  level, size, fast, lang_mask, handlers, loc, dc);\n }\n \n /* Table of options enabled by default at different levels.  */\n@@ -902,6 +916,7 @@ default_options_optimization (struct gcc_options *opts,\n \t\t\t      struct gcc_options *opts_set,\n \t\t\t      struct cl_decoded_option *decoded_options,\n \t\t\t      unsigned int decoded_options_count,\n+\t\t\t      location_t loc,\n \t\t\t      unsigned int lang_mask,\n \t\t\t      const struct cl_option_handlers *handlers,\n \t\t\t      diagnostic_context *dc)\n@@ -964,7 +979,7 @@ default_options_optimization (struct gcc_options *opts,\n \n   maybe_default_options (opts, opts_set, default_options_table,\n \t\t\t opts->x_optimize, opts->x_optimize_size,\n-\t\t\t ofast, lang_mask, handlers, dc);\n+\t\t\t ofast, lang_mask, handlers, loc, dc);\n \n   /* -O2 param settings.  */\n   opt2 = (opts->x_optimize >= 2);\n@@ -994,19 +1009,20 @@ default_options_optimization (struct gcc_options *opts,\n   maybe_default_options (opts, opts_set,\n \t\t\t targetm.target_option.optimization_table,\n \t\t\t opts->x_optimize, opts->x_optimize_size,\n-\t\t\t ofast, lang_mask, handlers, dc);\n+\t\t\t ofast, lang_mask, handlers, loc, dc);\n }\n \n static void finish_options (struct gcc_options *, struct gcc_options *);\n \n /* Parse command line options and set default flag values.  Do minimal\n    options processing.  The decoded options are in *DECODED_OPTIONS\n-   and *DECODED_OPTIONS_COUNT; settings go in OPTS, OPTS_SET and DC.  */\n+   and *DECODED_OPTIONS_COUNT; settings go in OPTS, OPTS_SET and DC;\n+   the options are located at LOC.  */\n void\n decode_options (struct gcc_options *opts, struct gcc_options *opts_set,\n \t\tstruct cl_decoded_option *decoded_options,\n \t\tunsigned int decoded_options_count,\n-\t\tdiagnostic_context *dc)\n+\t\tlocation_t loc, diagnostic_context *dc)\n {\n   struct cl_option_handlers handlers;\n \n@@ -1027,19 +1043,20 @@ decode_options (struct gcc_options *opts, struct gcc_options *opts_set,\n \n   /* Enable -Werror=coverage-mismatch by default */\n   enable_warning_as_error (\"coverage-mismatch\", 1, lang_mask, &handlers,\n-\t\t\t   dc);\n+\t\t\t   loc, dc);\n \n   default_options_optimization (opts, opts_set,\n \t\t\t\tdecoded_options, decoded_options_count,\n-\t\t\t\tlang_mask, &handlers, dc);\n+\t\t\t\tloc, lang_mask, &handlers, dc);\n \n #ifdef ENABLE_LTO\n   /* Clear any options currently held for LTO.  */\n   lto_clear_user_options ();\n #endif\n \n   read_cmdline_options (opts, opts_set,\n-\t\t\tdecoded_options, decoded_options_count, lang_mask,\n+\t\t\tdecoded_options, decoded_options_count,\n+\t\t\tloc, lang_mask,\n \t\t\t&handlers, dc);\n \n   finish_options (opts, opts_set);\n@@ -1580,6 +1597,7 @@ common_handle_option (struct gcc_options *opts,\n \t\t      struct gcc_options *opts_set,\n \t\t      const struct cl_decoded_option *decoded,\n \t\t      unsigned int lang_mask, int kind ATTRIBUTE_UNUSED,\n+\t\t      location_t loc,\n \t\t      const struct cl_option_handlers *handlers,\n \t\t      diagnostic_context *dc)\n {\n@@ -1760,7 +1778,7 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_Werror_:\n-      enable_warning_as_error (arg, value, lang_mask, handlers, dc);\n+      enable_warning_as_error (arg, value, lang_mask, handlers, loc, dc);\n       break;\n \n     case OPT_Wlarger_than_:\n@@ -2394,13 +2412,13 @@ get_option_state (struct gcc_options *opts, int option,\n \n /* Enable (or disable if VALUE is 0) a warning option ARG (language\n    mask LANG_MASK, option handlers HANDLERS) as an error for\n-   diagnostic context DC (possibly NULL).  This is used by\n-   -Werror=.  */\n+   diagnostic context DC (possibly NULL), location LOC.  This is used\n+   by -Werror=.  */\n \n-void\n+static void\n enable_warning_as_error (const char *arg, int value, unsigned int lang_mask,\n \t\t\t const struct cl_option_handlers *handlers,\n-\t\t\t diagnostic_context *dc)\n+\t\t\t location_t loc, diagnostic_context *dc)\n {\n   char *new_option;\n   int option_index;\n@@ -2423,8 +2441,7 @@ enable_warning_as_error (const char *arg, int value, unsigned int lang_mask,\n       if (option_index == OPT_SPECIAL_ignore)\n \treturn;\n       if (dc)\n-\tdiagnostic_classify_diagnostic (dc, option_index, kind,\n-\t\t\t\t\tUNKNOWN_LOCATION);\n+\tdiagnostic_classify_diagnostic (dc, option_index, kind, loc);\n       if (kind == DK_ERROR)\n \t{\n \t  const struct cl_option * const option = cl_options + option_index;\n@@ -2433,8 +2450,7 @@ enable_warning_as_error (const char *arg, int value, unsigned int lang_mask,\n \t  if (option->var_type == CLVC_BOOLEAN)\n \t    handle_generated_option (&global_options, &global_options_set,\n \t\t\t\t     option_index, NULL, value, lang_mask,\n-\t\t\t\t     (int)kind, handlers,\n-\t\t\t\t     dc);\n+\t\t\t\t     (int)kind, loc, handlers, dc);\n \t}\n     }\n   free (new_option);"}, {"sha": "9d5ecb36c841ffe312ef6411acef4a1459e23220", "filename": "gcc/opts.h", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -21,6 +21,8 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_OPTS_H\n #define GCC_OPTS_H\n \n+#include \"input.h\"\n+\n /* Specifies how a switch's VAR_VALUE relates to its FLAG_VAR.  */\n enum cl_var_type {\n   /* The switch is enabled when FLAG_VAR is nonzero.  */\n@@ -164,7 +166,7 @@ struct cl_option_handler_func\n   bool (*handler) (struct gcc_options *opts,\n \t\t   struct gcc_options *opts_set,\n \t\t   const struct cl_decoded_option *decoded,\n-\t\t   unsigned int lang_mask, int kind,\n+\t\t   unsigned int lang_mask, int kind, location_t loc,\n \t\t   const struct cl_option_handlers *handlers,\n \t\t   diagnostic_context *dc);\n \n@@ -225,25 +227,20 @@ extern void decode_options (struct gcc_options *opts,\n \t\t\t    struct gcc_options *opts_set,\n \t\t\t    struct cl_decoded_option *decoded_options,\n \t\t\t    unsigned int decoded_options_count,\n+\t\t\t    location_t loc,\n \t\t\t    diagnostic_context *dc);\n extern int option_enabled (int opt_idx, void *opts);\n extern bool get_option_state (struct gcc_options *, int,\n \t\t\t      struct cl_option_state *);\n extern void set_option (struct gcc_options *opts,\n \t\t\tstruct gcc_options *opts_set,\n \t\t\tint opt_index, int value, const char *arg, int kind,\n-\t\t\tdiagnostic_context *dc);\n+\t\t\tlocation_t loc, diagnostic_context *dc);\n extern void *option_flag_var (int opt_index, struct gcc_options *opts);\n-bool handle_option (struct gcc_options *opts,\n-\t\t    struct gcc_options *opts_set,\n-\t\t    const struct cl_decoded_option *decoded,\n-\t\t    unsigned int lang_mask, int kind,\n-\t\t    const struct cl_option_handlers *handlers,\n-\t\t    bool generated_p, diagnostic_context *dc);\n bool handle_generated_option (struct gcc_options *opts,\n \t\t\t      struct gcc_options *opts_set,\n \t\t\t      size_t opt_index, const char *arg, int value,\n-\t\t\t      unsigned int lang_mask, int kind,\n+\t\t\t      unsigned int lang_mask, int kind, location_t loc,\n \t\t\t      const struct cl_option_handlers *handlers,\n \t\t\t      diagnostic_context *dc);\n void generate_option (size_t opt_index, const char *arg, int value,\n@@ -254,12 +251,9 @@ void generate_option_input_file (const char *file,\n extern void read_cmdline_option (struct gcc_options *opts,\n \t\t\t\t struct gcc_options *opts_set,\n \t\t\t\t struct cl_decoded_option *decoded,\n+\t\t\t\t location_t loc,\n \t\t\t\t unsigned int lang_mask,\n \t\t\t\t const struct cl_option_handlers *handlers,\n \t\t\t\t diagnostic_context *dc);\n-extern void enable_warning_as_error (const char *arg, int value,\n-\t\t\t\t     unsigned int lang_mask,\n-\t\t\t\t     const struct cl_option_handlers *handlers,\n-\t\t\t\t     diagnostic_context *dc);\n extern void print_ignored_options (void);\n #endif"}, {"sha": "1b25485bd872bb9be88085740f78217a35ab3061", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d8c676006f3b672af5088f52160e762aa7a197/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a4d8c676006f3b672af5088f52160e762aa7a197", "patch": "@@ -2357,7 +2357,7 @@ toplev_main (int argc, char **argv)\n      enough to default flags appropriately.  */\n   decode_options (&global_options, &global_options_set,\n \t\t  save_decoded_options, save_decoded_options_count,\n-\t\t  global_dc);\n+\t\t  UNKNOWN_LOCATION, global_dc);\n \n   init_local_tick ();\n "}]}