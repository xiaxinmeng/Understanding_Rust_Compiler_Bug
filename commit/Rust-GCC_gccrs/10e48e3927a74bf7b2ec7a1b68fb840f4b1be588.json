{"sha": "10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBlNDhlMzkyN2E3NGJmN2IyZWM3YTFiNjhmYjg0MGY0YjFiZTU4OA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2011-06-09T12:30:46Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2011-06-09T12:30:46Z"}, "message": "netbsd.h (ENABLE_EXECUTE_STACK): Remove.\n\n2011-05-29  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n\t    Joseph Myers  <joseph@codesourcery.com>\n\n\tgcc:\n\t* config/alpha/netbsd.h (ENABLE_EXECUTE_STACK): Remove.\n\t(HAVE_ENABLE_EXECUTE_STACK): Define.\n\t* config/alpha/osf5.h (ENABLE_EXECUTE_STACK): Remove.\n\t(HAVE_ENABLE_EXECUTE_STACK): Define.\n\t* config/darwin.h (ENABLE_EXECUTE_STACK): Remove.\n\t(HAVE_ENABLE_EXECUTE_STACK): Define.\n\t* config/i386/mingw32.h (MINGW_ENABLE_EXECUTE_STACK): Remove.\n\t(ENABLE_EXECUTE_STACK): Remove.\n\t(HAVE_ENABLE_EXECUTE_STACK): Define.\n\t[IN_LIBGCC2]: Don't include <windows.h>.\n\t* config/i386/netbsd-elf.h (ENABLE_EXECUTE_STACK): Remove.\n\t(HAVE_ENABLE_EXECUTE_STACK): Define.\n\t* config/i386/netbsd64.h (ENABLE_EXECUTE_STACK): Remove.\n\t(HAVE_ENABLE_EXECUTE_STACK): Define.\n\t* config/netbsd.h (NETBSD_ENABLE_EXECUTE_STACK): Remove.\n\t* config/openbsd.h (ENABLE_EXECUTE_STACK): Remove.\n\t(HAVE_ENABLE_EXECUTE_STACK): Define.\n\t* config/sol2.h (ENABLE_EXECUTE_STACK): Remove.\n\t(HAVE_ENABLE_EXECUTE_STACK): Define.\n\t* config/sparc/freebsd.h (ENABLE_EXECUTE_STACK): Remove.\n\t(HAVE_ENABLE_EXECUTE_STACK): Define.\n\t* config/sparc/netbsd-elf.h (ENABLE_EXECUTE_STACK): Remove.\n\t(HAVE_ENABLE_EXECUTE_STACK): Define.\n\t* config/alpha/alpha.c (alpha_trampoline_init): Test\n\tHAVE_ENABLE_EXECUTE_STACK.\n\t* config/i386/i386.c (ix86_trampoline_init): Likewise.\n\t* config/sparc/sparc.c (sparc32_initialize_trampoline): Likewise.\n\t(sparc64_initialize_trampoline): Likewise.\n\t* libgcc2.c [L_enable_execute_stack]: Remove.\n\t* system.h (ENABLE_EXECUTE_STACK): Poison.\n\t* doc/tm.texi.in (Trampolines, ENABLE_EXECUTE_STACK): Remove.\n\t* doc/tm.texi: Regenerate.\n\t* Makefile.in (LIBGCC2_CFLAGS): Add -fbuilding-libgcc.\n\n\tgcc/c-family:\n\t* c.opt (fbuilding-libgcc): New option.\n\t* c-cppbuiltin.c (c_cpp_builtins): Define\n\t__LIBGCC_TRAMPOLINE_SIZE__ if flag_building_libgcc.\n\n\tlibgcc:\n\t* enable-execute-stack-empty.c: New file.\n\t* enable-execute-stack-mprotect.c: New file.\n\t* config/i386/enable-execute-stack-mingw32.c: New file.\n\t* config.host (enable_execute_stack): New variable.\n\tSelect appropriate variants.\n\t* configure.ac: Link enable-execute-stack.c to\n\t$enable_execute_stack.\n\t* configure: Regenerate.\n\t* Makefile.in (LIB2ADD): Add enable-execute-stack.c.\n\t(lib2funcs): Remove _enable_execute_stack.\n\nCo-Authored-By: Joseph Myers <joseph@codesourcery.com>\n\nFrom-SVN: r174843", "tree": {"sha": "d044985af6a76f58c9fe909ce81f475be183312a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d044985af6a76f58c9fe909ce81f475be183312a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9ef0b98eb62b22e291e4cca4537d64ea2b795c14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ef0b98eb62b22e291e4cca4537d64ea2b795c14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ef0b98eb62b22e291e4cca4537d64ea2b795c14"}], "stats": {"total": 538, "additions": 272, "deletions": 266}, "files": [{"sha": "b2251e94e6309a8f7a2594788402dc5b4462e2fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -1,3 +1,39 @@\n+2011-06-09  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config/alpha/netbsd.h (ENABLE_EXECUTE_STACK): Remove.\n+\t(HAVE_ENABLE_EXECUTE_STACK): Define.\n+\t* config/alpha/osf5.h (ENABLE_EXECUTE_STACK): Remove.\n+\t(HAVE_ENABLE_EXECUTE_STACK): Define.\n+\t* config/darwin.h (ENABLE_EXECUTE_STACK): Remove.\n+\t(HAVE_ENABLE_EXECUTE_STACK): Define.\n+\t* config/i386/mingw32.h (MINGW_ENABLE_EXECUTE_STACK): Remove.\n+\t(ENABLE_EXECUTE_STACK): Remove.\n+\t(HAVE_ENABLE_EXECUTE_STACK): Define.\n+\t[IN_LIBGCC2]: Don't include <windows.h>.\n+\t* config/i386/netbsd-elf.h (ENABLE_EXECUTE_STACK): Remove.\n+\t(HAVE_ENABLE_EXECUTE_STACK): Define.\n+\t* config/i386/netbsd64.h (ENABLE_EXECUTE_STACK): Remove.\n+\t(HAVE_ENABLE_EXECUTE_STACK): Define.\n+\t* config/netbsd.h (NETBSD_ENABLE_EXECUTE_STACK): Remove.\n+\t* config/openbsd.h (ENABLE_EXECUTE_STACK): Remove.\n+\t(HAVE_ENABLE_EXECUTE_STACK): Define.\n+\t* config/sol2.h (ENABLE_EXECUTE_STACK): Remove.\n+\t(HAVE_ENABLE_EXECUTE_STACK): Define.\n+\t* config/sparc/freebsd.h (ENABLE_EXECUTE_STACK): Remove.\n+\t(HAVE_ENABLE_EXECUTE_STACK): Define.\n+\t* config/sparc/netbsd-elf.h (ENABLE_EXECUTE_STACK): Remove.\n+\t(HAVE_ENABLE_EXECUTE_STACK): Define.\n+\t* config/alpha/alpha.c (alpha_trampoline_init): Test\n+\tHAVE_ENABLE_EXECUTE_STACK.\n+\t* config/i386/i386.c (ix86_trampoline_init): Likewise.\n+\t* config/sparc/sparc.c (sparc32_initialize_trampoline): Likewise.\n+\t(sparc64_initialize_trampoline): Likewise.\n+\t* libgcc2.c [L_enable_execute_stack]: Remove.\n+\t* system.h (ENABLE_EXECUTE_STACK): Poison.\n+\t* doc/tm.texi.in (Trampolines, ENABLE_EXECUTE_STACK): Remove.\n+\t* doc/tm.texi: Regenerate.\n+\t* Makefile.in (LIBGCC2_CFLAGS): Add -fbuilding-libgcc.\n+\n 2011-06-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/49308"}, {"sha": "0d297c3e913ed3f5d97976d12999a9b888c05dcc", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -661,7 +661,7 @@ LIBGCC2_DEBUG_CFLAGS = -g\n LIBGCC2_CFLAGS = -O2 $(LIBGCC2_INCLUDES) $(GCC_CFLAGS) $(TARGET_LIBGCC2_CFLAGS) \\\n \t\t $(LIBGCC2_DEBUG_CFLAGS) $(GTHREAD_FLAGS) \\\n \t\t -DIN_LIBGCC2 -D__GCC_FLOAT_NOT_NEEDED \\\n-\t\t -fno-stack-protector \\\n+\t\t -fbuilding-libgcc -fno-stack-protector \\\n \t\t $(INHIBIT_LIBC_CFLAGS)\n \n # Additional options to use when compiling libgcc2.a."}, {"sha": "733d77152d40a22b311ad04798f0f6618cd34870", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -1,3 +1,10 @@\n+2011-06-09  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c.opt (fbuilding-libgcc): New option.\n+\t* c-cppbuiltin.c (c_cpp_builtins): Define\n+\t__LIBGCC_TRAMPOLINE_SIZE__ if flag_building_libgcc.\n+\n 2011-06-07  Jason Merrill  <jason@redhat.com>\n \n \t* c-common.c (max_tinst_depth): Lower default to 900."}, {"sha": "bc75e02d28a7c49d30de2f264ca89704cfd3c25d", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -1,5 +1,5 @@\n /* Define builtin-in macros for the C family front ends.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -727,6 +727,12 @@ c_cpp_builtins (cpp_reader *pfile)\n       builtin_define_fixed_point_constants (\"UTA\", \"\", uta_type_node);\n     }\n \n+  /* For libgcc-internal use only.  */\n+  if (flag_building_libgcc)\n+    /* For libgcc enable-execute-stack.c.  */\n+    builtin_define_with_int_value (\"__LIBGCC_TRAMPOLINE_SIZE__\",\n+\t\t\t\t   TRAMPOLINE_SIZE);\n+\n   /* For use in assembly language.  */\n   builtin_define_with_value (\"__REGISTER_PREFIX__\", REGISTER_PREFIX, 0);\n   builtin_define_with_value (\"__USER_LABEL_PREFIX__\", user_label_prefix, 0);"}, {"sha": "00bdd93f1244e1ca2ebc2a5f88015c3419e6f25d", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -700,6 +700,10 @@ fasm\n C ObjC C++ ObjC++ Var(flag_no_asm, 0)\n Recognize the \\\"asm\\\" keyword\n \n+; Define extra predefined macros for use in libgcc.\n+fbuilding-libgcc\n+C ObjC C++ ObjC++ Undocumented Var(flag_building_libgcc)\n+\n fbuiltin\n C ObjC C++ ObjC++ Var(flag_no_builtin, 0)\n Recognize built-in functions"}, {"sha": "adef2c639ea5caf9cedca354bf6c0f6d2686c0c4", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -5395,7 +5395,7 @@ alpha_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n   if (TARGET_ABI_OSF)\n     {\n       emit_insn (gen_imb ());\n-#ifdef ENABLE_EXECUTE_STACK\n+#ifdef HAVE_ENABLE_EXECUTE_STACK\n       emit_library_call (init_one_libfunc (\"__enable_execute_stack\"),\n \t\t\t LCT_NORMAL, VOIDmode, 1, XEXP (m_tramp, 0), Pmode);\n #endif"}, {"sha": "2d7158ef65e33c7c6c1e46cc8dbc2ff8e097b693", "filename": "gcc/config/alpha/netbsd.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Falpha%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Falpha%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fnetbsd.h?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -73,7 +73,4 @@ along with GCC; see the file COPYING3.  If not see\n   \"%{Ofast|ffast-math|funsafe-math-optimizations:crtfm%O%s} \\\n    %(netbsd_endfile_spec)\"\n \n-\n-/* Attempt to enable execute permissions on the stack.  */\n-\n-#define ENABLE_EXECUTE_STACK NETBSD_ENABLE_EXECUTE_STACK\n+#define HAVE_ENABLE_EXECUTE_STACK"}, {"sha": "28aff06f2c8295400e5d9cbde894619e64c8ceb5", "filename": "gcc/config/alpha/osf5.h", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Falpha%2Fosf5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Falpha%2Fosf5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fosf5.h?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -165,22 +165,7 @@ along with GCC; see the file COPYING3.  If not see\n #define HAVE_STAMP_H 1\n #endif\n \n-/* Attempt to turn on access permissions for the stack.  */\n-\n-#define ENABLE_EXECUTE_STACK\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-__enable_execute_stack (void *addr)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  extern int mprotect (const void *, size_t, int);\t\t\t\\\n-  long size = getpagesize ();\t\t\t\t\t\t\\\n-  long mask = ~(size-1);\t\t\t\t\t\t\\\n-  char *page = (char *) (((long) addr) & mask);\t\t\t\t\\\n-  char *end  = (char *) ((((long) (addr + TRAMPOLINE_SIZE)) & mask) + size); \\\n-\t\t\t\t\t\t\t\t\t\\\n-  /* 7 is PROT_READ | PROT_WRITE | PROT_EXEC */\t\t\t\t\\\n-  if (mprotect (page, end - page, 7) < 0)\t\t\t\t\\\n-    perror (\"mprotect of trampoline code\");\t\t\t\t\\\n-}\n+#define HAVE_ENABLE_EXECUTE_STACK\n \n /* Digital UNIX V4.0E (1091)/usr/include/sys/types.h 4.3.49.9 1997/08/14 */\n #define SIZE_TYPE\t\"long unsigned int\""}, {"sha": "41c0d744afb033ed0a629aea572374eac22bc3d8", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 1, "deletions": 37, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -919,43 +919,7 @@ void add_framework_path (char *);\n #define TARGET_ASM_OUTPUT_ANCHOR NULL\n #define DARWIN_SECTION_ANCHORS 0\n \n-/* Attempt to turn on execute permission for the stack.  This may be\n-    used by TARGET_TRAMPOLINE_INIT if the target needs it (that is,\n-    if the target machine can change execute permissions on a page).\n-\n-    There is no way to query the execute permission of the stack, so\n-    we always issue the mprotect() call.\n-\n-    Unfortunately it is not possible to make this namespace-clean.\n-\n-    Also note that no errors should be emitted by this code; it is\n-    considered dangerous for library calls to send messages to\n-    stdout/stderr.  */\n-\n-#define ENABLE_EXECUTE_STACK                                            \\\n-extern void __enable_execute_stack (void *);                            \\\n-void                                                                    \\\n-__enable_execute_stack (void *addr)                                     \\\n-{                                                                       \\\n-   extern int mprotect (void *, size_t, int);                           \\\n-   extern int getpagesize (void);\t\t\t\t\t\\\n-   static int size;                                                     \\\n-   static long mask;                                                    \\\n-                                                                        \\\n-   char *page, *end;                                                    \\\n-                                                                        \\\n-   if (size == 0)                                                       \\\n-     {                                                                  \\\n-       size = getpagesize();\t\t\t\t\t\t\\\n-       mask = ~((long) size - 1);                                       \\\n-     }                                                                  \\\n-                                                                        \\\n-   page = (char *) (((long) addr) & mask);                              \\\n-   end  = (char *) ((((long) (addr + (TARGET_64BIT ? 48 : 40))) & mask) + size); \\\n-                                                                        \\\n-   /* 7 == PROT_READ | PROT_WRITE | PROT_EXEC */                        \\\n-   (void) mprotect (page, end - page, 7);                               \\\n-}\n+#define HAVE_ENABLE_EXECUTE_STACK\n \n /* For Apple KEXTs, we make the constructors return this to match gcc\n    2.95.  */"}, {"sha": "7b266b93f838b51374aed68b67f01f1a7fe18135", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -23387,7 +23387,7 @@ ix86_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n       gcc_assert (offset <= TRAMPOLINE_SIZE);\n     }\n \n-#ifdef ENABLE_EXECUTE_STACK\n+#ifdef HAVE_ENABLE_EXECUTE_STACK\n #ifdef CHECK_EXECUTE_STACK_ENABLED\n   if (CHECK_EXECUTE_STACK_ENABLED)\n #endif"}, {"sha": "3c835c686908fd1e6e1234d9437a466ade49d477", "filename": "gcc/config/i386/mingw32.h", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Fi386%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Fi386%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw32.h?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -219,28 +219,10 @@ do {\t\t\t\t\t\t         \\\n /* Let defaults.h definition of TARGET_USE_JCR_SECTION apply. */\n #undef TARGET_USE_JCR_SECTION\n \n-#undef MINGW_ENABLE_EXECUTE_STACK\n-#define MINGW_ENABLE_EXECUTE_STACK     \\\n-extern void __enable_execute_stack (void *);    \\\n-void         \\\n-__enable_execute_stack (void *addr)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  MEMORY_BASIC_INFORMATION b;\t\t\t\t\t\t\\\n-  if (!VirtualQuery (addr, &b, sizeof(b)))\t\t\t\t\\\n-    abort ();\t\t\t\t\t\t\t\t\\\n-  VirtualProtect (b.BaseAddress, b.RegionSize, PAGE_EXECUTE_READWRITE,\t\\\n-\t\t  &b.Protect);\t\t\t\t\t\t\\\n-}\n-\n-#undef ENABLE_EXECUTE_STACK\n-#define ENABLE_EXECUTE_STACK MINGW_ENABLE_EXECUTE_STACK\n+#define HAVE_ENABLE_EXECUTE_STACK\n #undef  CHECK_EXECUTE_STACK_ENABLED\n #define CHECK_EXECUTE_STACK_ENABLED flag_setstackexecutable\n \n-#ifdef IN_LIBGCC2\n-#include <windows.h>\n-#endif\n-\n /* This matches SHLIB_SONAME and SHLIB_SOVERSION in t-cygming. */\n /* This matches SHLIB_SONAME and SHLIB_SOVERSION in t-cygwin. */\n #if DWARF2_UNWIND_INFO"}, {"sha": "d79bbfb2c6887e660c7e7105d70ac5111afed4b9", "filename": "gcc/config/i386/netbsd-elf.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -118,5 +118,4 @@ along with GCC; see the file COPYING3.  If not see\n    we don't care about compatibility with older gcc versions.  */\n #define DEFAULT_PCC_STRUCT_RETURN 1\n \n-/* Attempt to enable execute permissions on the stack.  */\n-#define ENABLE_EXECUTE_STACK NETBSD_ENABLE_EXECUTE_STACK\n+#define HAVE_ENABLE_EXECUTE_STACK"}, {"sha": "584074fdafddeac0b81228f740c53b36004f77d2", "filename": "gcc/config/i386/netbsd64.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Fi386%2Fnetbsd64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Fi386%2Fnetbsd64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetbsd64.h?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -66,5 +66,4 @@ along with GCC; see the file COPYING3.  If not see\n     fprintf (FILE, \"\\tcall __mcount\\n\");\t\t\t\t\\\n }\n \n-/* Attempt to enable execute permissions on the stack.  */\n-#define ENABLE_EXECUTE_STACK NETBSD_ENABLE_EXECUTE_STACK\n+#define HAVE_ENABLE_EXECUTE_STACK"}, {"sha": "e9290c266653c3db4ba0d5f12e4b409c4e0e2437", "filename": "gcc/config/netbsd.h", "status": "modified", "additions": 1, "deletions": 48, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetbsd.h?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -1,6 +1,6 @@\n /* Base configuration file for all NetBSD targets.\n    Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2007, 2009, 2010 Free Software Foundation, Inc.\n+   2007, 2009, 2010, 2011 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -173,50 +173,3 @@ along with GCC; see the file COPYING3.  If not see\n \n #undef WINT_TYPE\n #define WINT_TYPE \"int\"\n-\f\n-\n-/* Attempt to turn on execute permission for the stack.  This may be\n-   used by TARGET_TRAMPOLINE_INIT if the target needs it (that is,\n-   if the target machine can change execute permissions on a page).\n-\n-   There is no way to query the execute permission of the stack, so\n-   we always issue the mprotect() call.\n-\n-   Note that we go out of our way to use namespace-non-invasive calls\n-   here.  Unfortunately, there is no libc-internal name for mprotect().\n-\n-   Also note that no errors should be emitted by this code; it is considered\n-   dangerous for library calls to send messages to stdout/stderr.  */\n-\n-#define NETBSD_ENABLE_EXECUTE_STACK\t\t\t\t\t\\\n-extern void __enable_execute_stack (void *);\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-__enable_execute_stack (void *addr)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  extern int mprotect (void *, size_t, int);\t\t\t\t\\\n-  extern int __sysctl (int *, unsigned int, void *, size_t *,\t\t\\\n-\t\t       void *, size_t);\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  static int size;\t\t\t\t\t\t\t\\\n-  static long mask;\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  char *page, *end;\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  if (size == 0)\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      int mib[2];\t\t\t\t\t\t\t\\\n-      size_t len;\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      mib[0] = 6; /* CTL_HW */\t\t\t\t\t\t\\\n-      mib[1] = 7; /* HW_PAGESIZE */\t\t\t\t\t\\\n-      len = sizeof (size);\t\t\t\t\t\t\\\n-      (void) __sysctl (mib, 2, &size, &len, NULL, 0);\t\t\t\\\n-      mask = ~((long) size - 1);\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  page = (char *) (((long) addr) & mask);\t\t\t\t\\\n-  end  = (char *) ((((long) (addr + TRAMPOLINE_SIZE)) & mask) + size);\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  /* 7 == PROT_READ | PROT_WRITE | PROT_EXEC */\t\t\t\t\\\n-  (void) mprotect (page, end - page, 7);\t\t\t\t\\\n-}"}, {"sha": "aa279ed4738d55221d1e365fe0537f6f3de5701b", "filename": "gcc/config/openbsd.h", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fopenbsd.h?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -281,20 +281,4 @@ do {\t\t\t\t\t\t\t\t\t \\\n /* Storage layout.  */\n \n \f\n-/* Stack is explicitly denied execution rights on OpenBSD platforms.  */\n-#define ENABLE_EXECUTE_STACK\t\t\t\t\t\t\\\n-extern void __enable_execute_stack (void *);\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-__enable_execute_stack (void *addr)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  long size = getpagesize ();\t\t\t\t\t\t\\\n-  long mask = ~(size-1);\t\t\t\t\t\t\\\n-  char *page = (char *) (((long) addr) & mask); \t\t\t\\\n-  char *end  = (char *) ((((long) (addr + TRAMPOLINE_SIZE)) & mask) + size); \\\n-\t\t\t\t\t\t\t\t      \\\n-  if (mprotect (page, end - page, PROT_READ | PROT_WRITE | PROT_EXEC) < 0) \\\n-    perror (\"mprotect of trampoline code\");\t\t\t\t\\\n-}\n-\n-#include <sys/types.h>\n-#include <sys/mman.h>\n+#define HAVE_ENABLE_EXECUTE_STACK"}, {"sha": "d1e98e4f5f2fbad35c4782cf8ff29a43163c7499", "filename": "gcc/config/sol2.h", "status": "modified", "additions": 1, "deletions": 46, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.h?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -207,52 +207,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #define STDC_0_IN_SYSTEM_HEADERS 1\n \f\n-/*\n- * Attempt to turn on access permissions for the stack.\n- *\n- * _SC_STACK_PROT is only defined for post 2.6, but we want this code\n- * to run always.  2.6 can change the stack protection but has no way to\n- * query it.\n- *\n- */\n-\n-/* sys/mman.h is not present on some non-Solaris configurations\n-   that use sol2.h, so ENABLE_EXECUTE_STACK must use a magic\n-   number instead of the appropriate PROT_* flags.  */\n-\n-#define ENABLE_EXECUTE_STACK\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-/* #define STACK_PROT_RWX (PROT_READ | PROT_WRITE | PROT_EXEC) */\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-static int need_enable_exec_stack;\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-static void check_enabling(void) __attribute__ ((constructor));\t\t\\\n-static void check_enabling(void)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  extern long sysconf(int);\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  int prot = (int) sysconf(515 /* _SC_STACK_PROT */);\t\t\t\\\n-  if (prot != 7 /* STACK_PROT_RWX */)\t\t\t\t\t\\\n-    need_enable_exec_stack = 1;\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-extern void __enable_execute_stack (void *);\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-__enable_execute_stack (void *addr)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  extern int mprotect(void *, size_t, int);\t\t\t\t\\\n-  if (!need_enable_exec_stack)\t\t\t\t\t\t\\\n-    return;\t\t\t\t\t\t\t\t\\\n-  else {\t\t\t\t\t\t\t\t\\\n-    long size = getpagesize ();\t\t\t\t\t\t\\\n-    long mask = ~(size-1);\t\t\t\t\t\t\\\n-    char *page = (char *) (((long) addr) & mask); \t\t\t\\\n-    char *end  = (char *) ((((long) (addr + TRAMPOLINE_SIZE)) & mask) + size); \\\n-\t\t\t\t\t\t\t\t\t\\\n-    if (mprotect (page, end - page, 7 /* STACK_PROT_RWX */) < 0)\t\\\n-      perror (\"mprotect of trampoline code\");\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-}\n+#define HAVE_ENABLE_EXECUTE_STACK\n \n /* Support Solaris-specific format checking for cmn_err.  */\n #define TARGET_N_FORMAT_TYPES 1"}, {"sha": "3444c0ea0055a1ae8796ad223313aa88337d5916", "filename": "gcc/config/sparc/freebsd.h", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Fsparc%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Fsparc%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ffreebsd.h?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -98,31 +98,7 @@ along with GCC; see the file COPYING3.  If not see\n #undef  SPARC_DEFAULT_CMODEL\n #define SPARC_DEFAULT_CMODEL\tCM_MEDLOW\n \n-#define ENABLE_EXECUTE_STACK\t\t\t\t\t\t\\\n-  static int need_enable_exec_stack;\t\t\t\t\t\\\n-  static void check_enabling(void) __attribute__ ((constructor));\t\\\n-  static void check_enabling(void)\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    extern int sysctlbyname(const char *, void *, size_t *, void *, size_t);\\\n-    int prot = 0;\t\t\t\t\t\t\t\\\n-    size_t len = sizeof(prot);\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    sysctlbyname (\"kern.stackprot\", &prot, &len, NULL, 0);\t\t\\\n-    if (prot != 7)\t\t\t\t\t\t\t\\\n-      need_enable_exec_stack = 1;\t\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-  extern void __enable_execute_stack (void *);\t\t\t\t\\\n-  void __enable_execute_stack (void *addr)\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (!need_enable_exec_stack)\t\t\t\t\t\\\n-      return;\t\t\t\t\t\t\t\t\\\n-    else {\t\t\t\t\t\t\t\t\\\n-      /* 7 is PROT_READ | PROT_WRITE | PROT_EXEC */ \t\t\t\\\n-      if (mprotect (addr, TRAMPOLINE_SIZE, 7) < 0)\t\t\t\\\n-        perror (\"mprotect of trampoline code\");\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  }\n-\n+#define HAVE_ENABLE_EXECUTE_STACK\n \n /************************[  Assembler stuff  ]********************************/\n "}, {"sha": "d19615bc4f133d3b3b89d006a51976ed54f52812", "filename": "gcc/config/sparc/netbsd-elf.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -74,8 +74,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #undef STDC_0_IN_SYSTEM_HEADERS\n \n-/* Attempt to enable execute permissions on the stack.  */\n-#define ENABLE_EXECUTE_STACK NETBSD_ENABLE_EXECUTE_STACK\n+#define HAVE_ENABLE_EXECUTE_STACK\n \n /* Below here exists the merged NetBSD/sparc & NetBSD/sparc64 compiler\n    description, allowing one to build 32-bit or 64-bit applications"}, {"sha": "ae35cf826009d4101ec08c5bff10f0775f81cace", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -8004,7 +8004,7 @@ sparc32_initialize_trampoline (rtx m_tramp, rtx fnaddr, rtx cxt)\n \n   /* Call __enable_execute_stack after writing onto the stack to make sure\n      the stack address is accessible.  */\n-#ifdef ENABLE_EXECUTE_STACK\n+#ifdef HAVE_ENABLE_EXECUTE_STACK\n   emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__enable_execute_stack\"),\n                      LCT_NORMAL, VOIDmode, 1, XEXP (m_tramp, 0), Pmode);\n #endif\n@@ -8047,7 +8047,7 @@ sparc64_initialize_trampoline (rtx m_tramp, rtx fnaddr, rtx cxt)\n \n   /* Call __enable_execute_stack after writing onto the stack to make sure\n      the stack address is accessible.  */\n-#ifdef ENABLE_EXECUTE_STACK\n+#ifdef HAVE_ENABLE_EXECUTE_STACK\n   emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__enable_execute_stack\"),\n                      LCT_NORMAL, VOIDmode, 1, XEXP (m_tramp, 0), Pmode);\n #endif"}, {"sha": "ebc876f14566036fe7599fa47b31fe047ff05b7d", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -5189,19 +5189,6 @@ typically be a series of @code{asm} statements.  Both @var{beg} and\n @var{end} are both pointer expressions.\n @end defmac\n \n-The operating system may also require the stack to be made executable\n-before calling the trampoline.  To implement this requirement, define\n-the following macro.\n-\n-@defmac ENABLE_EXECUTE_STACK\n-Define this macro if certain operations must be performed before executing\n-code located on the stack.  The macro should expand to a series of C\n-file-scope constructs (e.g.@: functions) and provide a unique entry point\n-named @code{__enable_execute_stack}.  The target is responsible for\n-emitting calls to the entry point in the code, for example from the\n-@code{TARGET_TRAMPOLINE_INIT} hook.\n-@end defmac\n-\n To use a standard subroutine, define the following macro.  In addition,\n you must make sure that the instructions in a trampoline fill an entire\n cache line with identical instructions, or else ensure that the"}, {"sha": "85fcfb1cdb813908ef43c504120fb29087e59f86", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -5141,19 +5141,6 @@ typically be a series of @code{asm} statements.  Both @var{beg} and\n @var{end} are both pointer expressions.\n @end defmac\n \n-The operating system may also require the stack to be made executable\n-before calling the trampoline.  To implement this requirement, define\n-the following macro.\n-\n-@defmac ENABLE_EXECUTE_STACK\n-Define this macro if certain operations must be performed before executing\n-code located on the stack.  The macro should expand to a series of C\n-file-scope constructs (e.g.@: functions) and provide a unique entry point\n-named @code{__enable_execute_stack}.  The target is responsible for\n-emitting calls to the entry point in the code, for example from the\n-@code{TARGET_TRAMPOLINE_INIT} hook.\n-@end defmac\n-\n To use a standard subroutine, define the following macro.  In addition,\n you must make sure that the instructions in a trampoline fill an entire\n cache line with identical instructions, or else ensure that the"}, {"sha": "94763d658f419b68d0269b2c6a949ca213b352c5", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -1,7 +1,7 @@\n /* More subroutines needed by GCC output code on some machines.  */\n /* Compile this one with gcc.  */\n /* Copyright (C) 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n+   2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -2027,19 +2027,6 @@ __clear_cache (char *beg __attribute__((__unused__)),\n \n #endif /* L_clear_cache */\n \f\n-#ifdef L_enable_execute_stack\n-/* Attempt to turn on execute permission for the stack.  */\n-\n-#ifdef ENABLE_EXECUTE_STACK\n-  ENABLE_EXECUTE_STACK\n-#else\n-void\n-__enable_execute_stack (void *addr __attribute__((__unused__)))\n-{}\n-#endif /* ENABLE_EXECUTE_STACK */\n-\n-#endif /* L_enable_execute_stack */\n-\f\n #ifdef L_trampoline\n \n /* Jump to a trampoline, loading the static chain address.  */"}, {"sha": "baf5e2d236c05278833fce7e7933d7a78f82bb7e", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -764,7 +764,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n /* Target macros only used for code built for the target, that have\n    moved to libgcc-tm.h or have never been present elsewhere.  */\n  #pragma GCC poison DECLARE_LIBRARY_RENAMES LIBGCC2_GNU_PREFIX\t\t\\\n-\tMD_UNWIND_SUPPORT\n+\tMD_UNWIND_SUPPORT ENABLE_EXECUTE_STACK\n \n /* Other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have"}, {"sha": "75e7ef0d2118997d606c8b7a8f1126b21da116d4", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -1,3 +1,16 @@\n+2011-06-09  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* enable-execute-stack-empty.c: New file.\n+\t* enable-execute-stack-mprotect.c: New file.\n+\t* config/i386/enable-execute-stack-mingw32.c: New file.\n+\t* config.host (enable_execute_stack): New variable.\n+\tSelect appropriate variants.\n+\t* configure.ac: Link enable-execute-stack.c to\n+\t$enable_execute_stack.\n+\t* configure: Regenerate.\n+\t* Makefile.in (LIB2ADD): Add enable-execute-stack.c.\n+\t(lib2funcs): Remove _enable_execute_stack.\n+\n 2011-06-09  David S. Miller  <davem@davemloft.net>\n \t    Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n "}, {"sha": "383a6614b1c0485c55cb3ddc1dde468389b29578", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -313,9 +313,11 @@ ifneq ($(GCC_EXTRA_PARTS),)\n endif\n endif\n \n+LIB2ADD += enable-execute-stack.c\n+\n # Library members defined in libgcc2.c.\n lib2funcs = _muldi3 _negdi2 _lshrdi3 _ashldi3 _ashrdi3 _cmpdi2 _ucmpdi2\t   \\\n-\t    _clear_cache _enable_execute_stack _trampoline __main _absvsi2 \\\n+\t    _clear_cache _trampoline __main _absvsi2 \\\n \t    _absvdi2 _addvsi3 _addvdi3 _subvsi3 _subvdi3 _mulvsi3 _mulvdi3 \\\n \t    _negvsi2 _negvdi2 _ctors _ffssi2 _ffsdi2 _clz _clzsi2 _clzdi2  \\\n \t    _ctzsi2 _ctzdi2 _popcount_tab _popcountsi2 _popcountdi2\t   \\"}, {"sha": "c2b5dbca75c0a875403ece0166e30ea8a6f1b560", "filename": "libgcc/config.host", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -44,6 +44,8 @@\n #\t\t\tThe default is \".hidden\".\n #  cpu_type\t\tThe name of the cpu, if different from the first\n #\t\t\tchunk of the canonical host name.\n+#  enable_execute_stack The name of a source file implementing\n+#\t\t\t__enable_execute_stack.\n #  extra_parts\t\tList of extra object files that should be compiled\n #\t\t\tfor this target machine.  This may be overridden\n #\t\t\tby setting EXTRA_PARTS in a tmake_file fragment.\n@@ -57,6 +59,7 @@\n #\t\t\t\"$cpu_type/t-$cpu_type\".\n \n asm_hidden_op=.hidden\n+enable_execute_stack=\n extra_parts=\n tmake_file=\n md_unwind_header=no-unwind.h\n@@ -202,6 +205,19 @@ case ${host} in\n   ;;\n esac\n \n+case ${host} in\n+*-*-darwin* | *-*-freebsd* | *-*-netbsd* | *-*-openbsd* | *-*-solaris2* | \\\n+  alpha*-dec-osf5.1*)\n+  enable_execute_stack=enable-execute-stack-mprotect.c\n+  ;;\n+i[34567]86-*-mingw* | x86_64-*-mingw*)\n+  enable_execute_stack=config/i386/enable-execute-stack-mingw32.c\n+  ;;\n+*)\n+  enable_execute_stack=enable-execute-stack-empty.c;\n+  ;;\n+esac\n+\n case ${host} in\n # Support site-specific machine types.\n *local*)"}, {"sha": "8f3d27224d8335899450e531070b913008c74b9c", "filename": "libgcc/config/i386/enable-execute-stack-mingw32.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/libgcc%2Fconfig%2Fi386%2Fenable-execute-stack-mingw32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/libgcc%2Fconfig%2Fi386%2Fenable-execute-stack-mingw32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fenable-execute-stack-mingw32.c?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -0,0 +1,38 @@\n+/* Implement __enable_execute_stack for Windows32.\n+   Copyright (C) 2011 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it under\n+   the terms of the GNU General Public License as published by the Free\n+   Software Foundation; either version 3, or (at your option) any later\n+   version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+   for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include <windows.h>\n+\n+extern void __enable_execute_stack (void *);\n+\n+void\n+__enable_execute_stack (void *addr)\n+{\n+  MEMORY_BASIC_INFORMATION b;\n+\n+  if (!VirtualQuery (addr, &b, sizeof(b)))\n+    abort ();\n+  VirtualProtect (b.BaseAddress, b.RegionSize, PAGE_EXECUTE_READWRITE,\n+\t\t  &b.Protect);\n+}"}, {"sha": "1351022494432d206b4a7999fedd699f418e3ee5", "filename": "libgcc/configure", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -3962,6 +3962,8 @@ tmake_file=\"${tmake_file_}\"\n \n \n \n+ac_config_links=\"$ac_config_links enable-execute-stack.c:$enable_execute_stack\"\n+\n ac_config_links=\"$ac_config_links md-unwind-support.h:config/$md_unwind_header\"\n \n \n@@ -4689,6 +4691,7 @@ cat >>$CONFIG_STATUS <<\\_ACEOF || ac_write_fail=1\n for ac_config_target in $ac_config_targets\n do\n   case $ac_config_target in\n+    \"enable-execute-stack.c\") CONFIG_LINKS=\"$CONFIG_LINKS enable-execute-stack.c:$enable_execute_stack\" ;;\n     \"md-unwind-support.h\") CONFIG_LINKS=\"$CONFIG_LINKS md-unwind-support.h:config/$md_unwind_header\" ;;\n     \"Makefile\") CONFIG_FILES=\"$CONFIG_FILES Makefile\" ;;\n     \"default\") CONFIG_COMMANDS=\"$CONFIG_COMMANDS default\" ;;"}, {"sha": "4f56c3b596f00cb6d876e92d9a72c7cbf457791d", "filename": "libgcc/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -278,6 +278,7 @@ AC_SUBST(tmake_file)\n AC_SUBST(cpu_type)\n AC_SUBST(extra_parts)\n AC_SUBST(asm_hidden_op)\n+AC_CONFIG_LINKS([enable-execute-stack.c:$enable_execute_stack])\n AC_CONFIG_LINKS([md-unwind-support.h:config/$md_unwind_header])\n \n # We need multilib support."}, {"sha": "81786dec3e411a5fb4b80678f0266ee7a7315e7b", "filename": "libgcc/enable-execute-stack-empty.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/libgcc%2Fenable-execute-stack-empty.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/libgcc%2Fenable-execute-stack-empty.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fenable-execute-stack-empty.c?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -0,0 +1,7 @@\n+/* Dummy implementation of __enable_execute_stack.  */\n+\n+/* Attempt to turn on execute permission for the stack.  */\n+void\n+__enable_execute_stack (void *addr __attribute__((__unused__)))\n+{\n+}"}, {"sha": "1ad77bdd2d3c31063dc5d11ef82946db343d93ae", "filename": "libgcc/enable-execute-stack-mprotect.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/libgcc%2Fenable-execute-stack-mprotect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e48e3927a74bf7b2ec7a1b68fb840f4b1be588/libgcc%2Fenable-execute-stack-mprotect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fenable-execute-stack-mprotect.c?ref=10e48e3927a74bf7b2ec7a1b68fb840f4b1be588", "patch": "@@ -0,0 +1,119 @@\n+/* Implement __enable_execute_stack using mprotect(2).\n+   Copyright (C) 2011 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it under\n+   the terms of the GNU General Public License as published by the Free\n+   Software Foundation; either version 3, or (at your option) any later\n+   version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+   for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include <sys/mman.h>\n+#include <unistd.h>\n+#include <stdlib.h>\n+\n+#define STACK_PROT_RWX (PROT_READ | PROT_WRITE | PROT_EXEC)\n+\n+static int need_enable_exec_stack;\n+\n+static void check_enabling (void) __attribute__ ((unused));\n+extern void __enable_execute_stack (void *);\n+\n+#if defined __FreeBSD__\n+#include <sys/sysctl.h>\n+\n+static void __attribute__ ((constructor))\n+check_enabling (void)\n+{\n+  int prot = 0;\n+  size_t len = sizeof (prot);\n+\n+  sysctlbyname (\"kern.stackprot\", &prot, &len, NULL, 0);\n+  if (prot != STACK_PROT_RWX)\n+    need_enable_exec_stack = 1;\n+}\n+#elif defined __sun__ && defined __svr4__\n+static void __attribute__ ((constructor))\n+check_enabling (void)\n+{\n+  int prot = (int) sysconf (_SC_STACK_PROT);\n+\n+  if (prot != STACK_PROT_RWX)\n+    need_enable_exec_stack = 1;\n+}\n+#else\n+/* There is no way to query the execute permission of the stack, so\n+   we always issue the mprotect() call.  */\n+\n+static int need_enable_exec_stack = 1;\n+#endif\n+\n+#if defined __NetBSD__\n+/* Note that we go out of our way to use namespace-non-invasive calls\n+   here.  Unfortunately, there is no libc-internal name for mprotect().  */\n+\n+#include <sys/sysctl.h>\n+\n+extern int __sysctl (int *, unsigned int, void *, size_t *, void *, size_t);\n+\n+static int\n+getpagesize (void)\n+{\n+  static int size;\n+\n+  if (size == 0)\n+    {\n+      int mib[2];\n+      size_t len;\n+\n+      mib[0] = CTL_HW;\n+      mib[1] = HW_PAGESIZE;\n+      len = sizeof (size);\n+      (void) __sysctl (mib, 2, &size, &len, NULL, 0);\n+    }\n+  return size;\n+}\n+#endif /* __NetBSD__ */\n+\n+/* Attempt to turn on access permissions for the stack.  Unfortunately it\n+   is not possible to make this namespace-clean.*/\n+\n+void\n+__enable_execute_stack (void *addr)\n+{\n+  if (!need_enable_exec_stack)\n+    return;\n+  else\n+    {\n+      static long size, mask;\n+\n+      if (size == 0) {\n+\tsize = getpagesize ();\n+\tmask = ~(size - 1);\n+      }\n+\n+      char *page = (char *) (((long) addr) & mask);\n+      char *end  = (char *)\n+\t((((long) (addr + __LIBGCC_TRAMPOLINE_SIZE__)) & mask) + size);\n+\n+      if (mprotect (page, end - page, STACK_PROT_RWX) < 0)\n+\t/* Note that no errors should be emitted by this code; it is\n+\t   considered dangerous for library calls to send messages to\n+\t   stdout/stderr.  */\n+\tabort ();\n+    }\n+}"}]}