{"sha": "4615cde5d7ef281d4b554df411f82ad707f0a54d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYxNWNkZTVkN2VmMjgxZDRiNTU0ZGY0MTFmODJhZDcwN2YwYTU0ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-05T09:57:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-05T09:59:00Z"}, "message": "simplify-rtx: Optimize (x - 1) * y + y [PR98334]\n\nWe don't try to optimize for signed x, y (int) (x - 1U) * y + y\ninto x * y, we can't do that with signed x * y, because the former\nis well defined for INT_MIN and -1, while the latter is not.\nWe could perhaps optimize it during isel or some very late optimization\nwhere we'd turn magically flag_wrapv, but we don't do that yet.\n\nThis patch optimizes it in simplify-rtx.c, such that we can optimize\nit during combine.\n\n2021-01-05  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR rtl-optimization/98334\n\t* simplify-rtx.c (simplify_context::simplify_binary_operation_1):\n\tOptimize (X - 1) * Y + Y to X * Y or (X + 1) * Y - Y to X * Y.\n\n\t* gcc.target/i386/pr98334.c: New test.", "tree": {"sha": "69005f7b86e4e76b7fed0153ad53bb708f0966a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69005f7b86e4e76b7fed0153ad53bb708f0966a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4615cde5d7ef281d4b554df411f82ad707f0a54d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4615cde5d7ef281d4b554df411f82ad707f0a54d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4615cde5d7ef281d4b554df411f82ad707f0a54d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4615cde5d7ef281d4b554df411f82ad707f0a54d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b69738c1e30ec31cb11dce1d9209e7a5b92301b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b69738c1e30ec31cb11dce1d9209e7a5b92301b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b69738c1e30ec31cb11dce1d9209e7a5b92301b"}], "stats": {"total": 92, "additions": 92, "deletions": 0}, "files": [{"sha": "571e2337e2718add3d14b43fde835beb8c2cf2a2", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4615cde5d7ef281d4b554df411f82ad707f0a54d/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4615cde5d7ef281d4b554df411f82ad707f0a54d/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=4615cde5d7ef281d4b554df411f82ad707f0a54d", "patch": "@@ -2602,6 +2602,42 @@ simplify_context::simplify_binary_operation_1 (rtx_code code,\n \t      return (set_src_cost (tem, int_mode, speed)\n \t\t      <= set_src_cost (orig, int_mode, speed) ? tem : 0);\n \t    }\n+\n+\t  /* Optimize (X - 1) * Y + Y to X * Y.  */\n+\t  lhs = op0;\n+\t  rhs = op1;\n+\t  if (GET_CODE (op0) == MULT)\n+\t    {\n+\t      if (((GET_CODE (XEXP (op0, 0)) == PLUS\n+\t\t    && XEXP (XEXP (op0, 0), 1) == constm1_rtx)\n+\t\t   || (GET_CODE (XEXP (op0, 0)) == MINUS\n+\t\t       && XEXP (XEXP (op0, 0), 1) == const1_rtx))\n+\t\t  && rtx_equal_p (XEXP (op0, 1), op1))\n+\t\tlhs = XEXP (XEXP (op0, 0), 0);\n+\t      else if (((GET_CODE (XEXP (op0, 1)) == PLUS\n+\t\t\t && XEXP (XEXP (op0, 1), 1) == constm1_rtx)\n+\t\t\t|| (GET_CODE (XEXP (op0, 1)) == MINUS\n+\t\t\t    && XEXP (XEXP (op0, 1), 1) == const1_rtx))\n+\t\t       && rtx_equal_p (XEXP (op0, 0), op1))\n+\t\tlhs = XEXP (XEXP (op0, 1), 0);\n+\t    }\n+\t  else if (GET_CODE (op1) == MULT)\n+\t    {\n+\t      if (((GET_CODE (XEXP (op1, 0)) == PLUS\n+\t\t    && XEXP (XEXP (op1, 0), 1) == constm1_rtx)\n+\t\t   || (GET_CODE (XEXP (op1, 0)) == MINUS\n+\t\t       && XEXP (XEXP (op1, 0), 1) == const1_rtx))\n+\t\t  && rtx_equal_p (XEXP (op1, 1), op0))\n+\t\trhs = XEXP (XEXP (op1, 0), 0);\n+\t      else if (((GET_CODE (XEXP (op1, 1)) == PLUS\n+\t\t\t && XEXP (XEXP (op1, 1), 1) == constm1_rtx)\n+\t\t\t|| (GET_CODE (XEXP (op1, 1)) == MINUS\n+\t\t\t    && XEXP (XEXP (op1, 1), 1) == const1_rtx))\n+\t\t       && rtx_equal_p (XEXP (op1, 0), op0))\n+\t\trhs = XEXP (XEXP (op1, 1), 0);\n+\t    }\n+\t  if (lhs != op0 || rhs != op1)\n+\t    return simplify_gen_binary (MULT, int_mode, lhs, rhs);\n \t}\n \n       /* (plus (xor X C1) C2) is (xor X (C1^C2)) if C2 is signbit.  */\n@@ -2789,6 +2825,26 @@ simplify_context::simplify_binary_operation_1 (rtx_code code,\n \t      return (set_src_cost (tem, int_mode, speed)\n \t\t      <= set_src_cost (orig, int_mode, speed) ? tem : 0);\n \t    }\n+\n+\t  /* Optimize (X + 1) * Y - Y to X * Y.  */\n+\t  lhs = op0;\n+\t  if (GET_CODE (op0) == MULT)\n+\t    {\n+\t      if (((GET_CODE (XEXP (op0, 0)) == PLUS\n+\t\t    && XEXP (XEXP (op0, 0), 1) == const1_rtx)\n+\t\t   || (GET_CODE (XEXP (op0, 0)) == MINUS\n+\t\t       && XEXP (XEXP (op0, 0), 1) == constm1_rtx))\n+\t\t  && rtx_equal_p (XEXP (op0, 1), op1))\n+\t\tlhs = XEXP (XEXP (op0, 0), 0);\n+\t      else if (((GET_CODE (XEXP (op0, 1)) == PLUS\n+\t\t\t && XEXP (XEXP (op0, 1), 1) == const1_rtx)\n+\t\t\t|| (GET_CODE (XEXP (op0, 1)) == MINUS\n+\t\t\t    && XEXP (XEXP (op0, 1), 1) == constm1_rtx))\n+\t\t       && rtx_equal_p (XEXP (op0, 0), op1))\n+\t\tlhs = XEXP (XEXP (op0, 1), 0);\n+\t    }\n+\t  if (lhs != op0)\n+\t    return simplify_gen_binary (MULT, int_mode, lhs, op1);\n \t}\n \n       /* (a - (-b)) -> (a + b).  True even for IEEE.  */"}, {"sha": "283abc5ba0a05245f07fd6774278b6f83f9010d3", "filename": "gcc/testsuite/gcc.target/i386/pr98334.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4615cde5d7ef281d4b554df411f82ad707f0a54d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98334.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4615cde5d7ef281d4b554df411f82ad707f0a54d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98334.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98334.c?ref=4615cde5d7ef281d4b554df411f82ad707f0a54d", "patch": "@@ -0,0 +1,36 @@\n+/* PR rtl-optimization/98334 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -fno-stack-protector\" } */\n+/* { dg-final { scan-assembler-not \"\\taddl\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tsubl\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tleal\\t\" } } */\n+\n+int\n+foo (int i, unsigned int n)\n+{\n+  int result = 0;\n+  while (n > 0)\n+    {\n+      result += i;\n+      n -= 1;\n+    }\n+  return result;\n+}\n+\n+int\n+bar (int x, int y)\n+{\n+  return (int) (y - 1U) * x + x;\n+}\n+\n+int\n+baz (int x, int y)\n+{\n+  return (y - 1) * x + x;\n+}\n+\n+int\n+qux (int x, int y)\n+{\n+  return x * (int) (y + 1U) - x;\n+}"}]}