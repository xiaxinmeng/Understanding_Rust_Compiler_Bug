{"sha": "5188952e59475e3744c88aba9d9e8b07c8364987", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE4ODk1MmU1OTQ3NWUzNzQ0Yzg4YWJhOWQ5ZThiMDdjODM2NDk4Nw==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2019-08-21T08:29:37Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-21T08:29:37Z"}, "message": "[Ada] Replace low-level membership tests with high-level routines\n\nCode cleanup to improve readablity. Semantics unaffected.\n\n2019-08-21  Piotr Trojanek  <trojanek@adacore.com>\n\ngcc/ada/\n\n\t* exp_util.adb (Corresponding_Runtime_Package): Use high-level\n\tIs_Protected_Type.\n\t* sem_ch8.adb (Analyze_Renamed_Entry): Likewise.\n\t* sem_ch9.adb (Analyze_Requeue): Likewise.\n\nFrom-SVN: r274777", "tree": {"sha": "0bd9337fe385e902846c2fe02e621a9b1e628790", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bd9337fe385e902846c2fe02e621a9b1e628790"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5188952e59475e3744c88aba9d9e8b07c8364987", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5188952e59475e3744c88aba9d9e8b07c8364987", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5188952e59475e3744c88aba9d9e8b07c8364987", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5188952e59475e3744c88aba9d9e8b07c8364987/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "93a08e1e4a6218aaccac5538cf0b263ddae78ff8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93a08e1e4a6218aaccac5538cf0b263ddae78ff8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93a08e1e4a6218aaccac5538cf0b263ddae78ff8"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "fc1eb946533ef0888602f167a201bdac4ac35579", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5188952e59475e3744c88aba9d9e8b07c8364987/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5188952e59475e3744c88aba9d9e8b07c8364987/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5188952e59475e3744c88aba9d9e8b07c8364987", "patch": "@@ -1,3 +1,10 @@\n+2019-08-21  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_util.adb (Corresponding_Runtime_Package): Use high-level\n+\tIs_Protected_Type.\n+\t* sem_ch8.adb (Analyze_Renamed_Entry): Likewise.\n+\t* sem_ch9.adb (Analyze_Requeue): Likewise.\n+\n 2019-08-21  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_util.adb (Update_Named_Associations): Update"}, {"sha": "d3f648f3dcd46c649bf07462d0f1c15cdffd76a4", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5188952e59475e3744c88aba9d9e8b07c8364987/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5188952e59475e3744c88aba9d9e8b07c8364987/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=5188952e59475e3744c88aba9d9e8b07c8364987", "patch": "@@ -4609,7 +4609,7 @@ package body Exp_Util is\n    begin\n       pragma Assert (Is_Concurrent_Type (Typ));\n \n-      if Ekind (Typ) in Protected_Kind then\n+      if Is_Protected_Type (Typ) then\n          if Has_Entries (Typ)\n \n             --  A protected type without entries that covers an interface and"}, {"sha": "a7918dacbcf5ede80f994a9d2758519246c16d67", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5188952e59475e3744c88aba9d9e8b07c8364987/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5188952e59475e3744c88aba9d9e8b07c8364987/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=5188952e59475e3744c88aba9d9e8b07c8364987", "patch": "@@ -1696,7 +1696,7 @@ package body Sem_Ch8 is\n       --  AI05-0225: If the renamed entity is a procedure or entry of a\n       --  protected object, the target object must be a variable.\n \n-      if Ekind (Scope (Old_S)) in Protected_Kind\n+      if Is_Protected_Type (Scope (Old_S))\n         and then Ekind (New_S) = E_Procedure\n         and then not Is_Variable (Prefix (Nam))\n       then"}, {"sha": "bc8ab36d4d006eaff9a2af64b7abcfafc474873a", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5188952e59475e3744c88aba9d9e8b07c8364987/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5188952e59475e3744c88aba9d9e8b07c8364987/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=5188952e59475e3744c88aba9d9e8b07c8364987", "patch": "@@ -2350,8 +2350,7 @@ package body Sem_Ch9 is\n          for S in reverse 0 .. Scope_Stack.Last loop\n             Req_Scope := Scope_Stack.Table (S).Entity;\n \n-            exit when Ekind (Req_Scope) in Task_Kind\n-              or else Ekind (Req_Scope) in Protected_Kind;\n+            exit when Is_Concurrent_Type (Req_Scope);\n \n             if Is_Entry (Req_Scope) then\n                Outer_Ent := Req_Scope;"}]}