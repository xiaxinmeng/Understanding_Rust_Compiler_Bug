{"sha": "aed305a929bbaff9bed857638b90899e1ec37622", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVkMzA1YTkyOWJiYWZmOWJlZDg1NzYzOGI5MDg5OWUxZWMzNzYyMg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2004-10-22T05:32:16Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-10-22T05:32:16Z"}, "message": "array (array): Make safe for zero-sized arrays.\n\n\n2004-10-21  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/tr1/array (array): Make safe for zero-sized arrays.\n\t(array::end): Return one past the end.\n\t(array::at): Use __throw_out_of_range, include functexcept.h.\n\t(operator==): Implement.\n\t(operator!=): Same.\n\t(operator<): Same.\n\t(operator>): Same.\n\t(operator>=): Same.\n\t(operator<=): Same.\n\t* testsuite/tr1/6_containers/array/capacity/(empty.cc,\n\tmax_size.cc, size.cc): New.\n\t* testsuite/tr1/6_containers/array/comparison_operators/(equal.cc,\n\tgreater.cc, greater_or_equal.cc, less.cc, less_or_equal.cc,\n\tnot_equal): New.\n\t* testsuite/tr1/6_containers/array/cons/aggregate_initialization.cc:\n\tNew.\n\t* testsuite/tr1/6_containers/array/element_access/at_out_of_range.cc:\n\tNew.\n\t* testsuite/tr1/6_containers/array/iterators/end_is_one_past.cc: New.\n\t* testsuite/tr1/6_containers/array/requirements/(contiguous.cc,\n\tinstantiate, typedefs, zero_size_arrays): New.\n\nFrom-SVN: r89429", "tree": {"sha": "1c19eaec8b161244a85ea6ebe24ea14c66a07346", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c19eaec8b161244a85ea6ebe24ea14c66a07346"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aed305a929bbaff9bed857638b90899e1ec37622", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aed305a929bbaff9bed857638b90899e1ec37622", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aed305a929bbaff9bed857638b90899e1ec37622", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aed305a929bbaff9bed857638b90899e1ec37622/comments", "author": null, "committer": null, "parents": [{"sha": "7c06b222500d528da9a99c4e8733fa4d4794f1ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c06b222500d528da9a99c4e8733fa4d4794f1ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c06b222500d528da9a99c4e8733fa4d4794f1ec"}], "stats": {"total": 836, "additions": 812, "deletions": 24}, "files": [{"sha": "ac70fd7140b8ba1d3637ec457095f6deaed8724c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=aed305a929bbaff9bed857638b90899e1ec37622", "patch": "@@ -1,3 +1,27 @@\n+2004-10-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/tr1/array (array): Make safe for zero-sized arrays.\n+\t(array::end): Return one past the end.\n+\t(array::at): Use __throw_out_of_range, include functexcept.h.\n+\t(operator==): Implement.\n+\t(operator!=): Same.\n+\t(operator<): Same.\n+\t(operator>): Same.\n+\t(operator>=): Same.\n+\t(operator<=): Same.\n+\t* testsuite/tr1/6_containers/array/capacity/(empty.cc,\n+\tmax_size.cc, size.cc): New.\n+\t* testsuite/tr1/6_containers/array/comparison_operators/(equal.cc,\n+\tgreater.cc, greater_or_equal.cc, less.cc, less_or_equal.cc,\n+\tnot_equal): New.\n+\t* testsuite/tr1/6_containers/array/cons/aggregate_initialization.cc: \n+\tNew.\n+\t* testsuite/tr1/6_containers/array/element_access/at_out_of_range.cc: \n+\tNew.\n+\t* testsuite/tr1/6_containers/array/iterators/end_is_one_past.cc: New.\n+\t* testsuite/tr1/6_containers/array/requirements/(contiguous.cc,\n+\tinstantiate, typedefs, zero_size_arrays): New.\n+\n 2004-10-21  Paolo Carlini  <pcarlini@suse.de>\n \t    Benjamin Kosnik  <bkoz@redhat.com>\n "}, {"sha": "9058dd617b1494a1db7d57bc2faabfba692e7954", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=aed305a929bbaff9bed857638b90899e1ec37622", "patch": "@@ -2079,7 +2079,7 @@ namespace std\n       const __timepunct<_CharT>& __tp = use_facet<__timepunct<_CharT> >(__loc);\n       const char_type*  __dates[2];\n       __tp._M_date_formats(__dates);\n-      __beg = _M_extract_via_format(__beg, __end, __io, __err,\n+      __beg = _M_extract_via_format(__beg, __end, __io, __err, \n \t\t\t\t    __tm, __dates[0]);\n       if (__beg == __end)\n \t__err |= ios_base::eofbit;"}, {"sha": "d355285f56e818739029c30bacc6654680ccdda9", "filename": "libstdc++-v3/include/tr1/array", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray?ref=aed305a929bbaff9bed857638b90899e1ec37622", "patch": "@@ -32,6 +32,8 @@\n \n #include <new>\n #include <iterator>\n+#include <algorithm>\n+#include <bits/functexcept.h>\n \n //namespace std::tr1\n namespace std\n@@ -40,12 +42,9 @@ namespace tr1\n {\n   // [6.2.2] Class template array template\n   // Requires complete type _Tp.\n-  // Use of char array allows _Tp to skirt default constructable requirement.\n   template<typename _Tp, size_t _Nm = 1>\n     struct array\n     {\n-      enum { _S_index = _Nm };\n-\n       typedef _Tp \t    \t\t\tvalue_type;\n       typedef value_type&                   \treference;\n       typedef const value_type&             \tconst_reference;\n@@ -56,7 +55,11 @@ namespace tr1\n       typedef std::reverse_iterator<iterator>\treverse_iterator;\n       typedef std::reverse_iterator<const_iterator>\tconst_reverse_iterator;\n \n-      value_type _M_instance[_Nm];\n+      // Compile time constant without other dependencies.\n+      enum { _S_index = _Nm };\n+\n+      // Support for zero-sized arrays mandatory.\n+      value_type _M_instance[_Nm ? _Nm : 1];\n \n       // No explicit construct/copy/destroy for aggregate type.\n \n@@ -77,11 +80,11 @@ namespace tr1\n \n       iterator \n       end() \n-      { return reinterpret_cast<iterator>(&_M_instance[_S_index - 1]); }\n+      { return reinterpret_cast<iterator>(&_M_instance[_Nm]); }\n \n       const_iterator \n       end() const\n-      { return reinterpret_cast<const_iterator>(&_M_instance[_S_index - 1]); }\n+      { return reinterpret_cast<const_iterator>(&_M_instance[_Nm]); }\n \n       reverse_iterator \n       rbegin()\n@@ -101,17 +104,13 @@ namespace tr1\n \n       // Capacity.\n       size_type \n-      size() const { return _S_index; }\n+      size() const { return _Nm; }\n \n       size_type \n-      max_size() const\n-      { \n-\t// XXX Not specified. Unnecessary, this is fixed-size.\n-\treturn _S_index; \n-      }\n+      max_size() const { return _Nm; }\n \n       bool \n-      empty() const;\n+      empty() const { return size() == 0; }\n \n       // Element access.\n       reference \n@@ -125,16 +124,16 @@ namespace tr1\n       const_reference \n       at(size_type __n) const\n       { \n-\tif (__builtin_expect(__n > _S_index, false))\n-\t  throw std::bad_alloc();\n+\tif (__builtin_expect(__n > _Nm, false))\n+\t  std::__throw_out_of_range(\"array::at\");\n \treturn reinterpret_cast<const_reference>(_M_instance[__n]); \n       }\n \n       reference \n       at(size_type __n)\n       { \n-\tif (__builtin_expect(__n > _S_index, false))\n-\t  throw std::bad_alloc();\n+\tif (__builtin_expect(__n > _Nm, false))\n+\t  std::__throw_out_of_range(\"array::at\");\n \treturn reinterpret_cast<reference>(_M_instance[__n]); \n       }\n \n@@ -161,7 +160,7 @@ namespace tr1\n  template<typename _Tp, size_t _Nm>\n    bool \n    operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n-   { return false; }\n+   { return std::equal(__one.begin(), __one.end(), __two.begin()); }\n \n  template<typename _Tp, size_t _Nm>\n    bool \n@@ -170,23 +169,26 @@ namespace tr1\n \n  template<typename _Tp, size_t _Nm>\n    bool \n-   operator<(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n-   { return false; }\n+   operator<(const array<_Tp, _Nm>& a, const array<_Tp, _Nm>& b)\n+   { \n+     return std::lexicographical_compare(a.begin(), a.end(), \n+\t\t\t\t\t b.begin(), b.end()); \n+   }\n \n  template<typename _Tp, size_t _Nm>\n    bool \n    operator>(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n-   { return false; }\n+   { return __two < __one; }\n \n  template<typename _Tp, size_t _Nm>\n    bool \n    operator<=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n-   { return false; }\n+   { return !(__one > __two); }\n \n  template<typename _Tp, size_t _Nm>\n    bool \n    operator>=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n-   { return false; }\n+   { return !(__one < __two); }\n \n   // [6.2.2.2] Specialized algorithms.\n  template<typename _Tp, size_t _Nm>"}, {"sha": "844ca5a7f54ca84121bc89b4f94dae54f4c32a43", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/capacity/empty.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcapacity%2Fempty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcapacity%2Fempty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcapacity%2Fempty.cc?ref=aed305a929bbaff9bed857638b90899e1ec37622", "patch": "@@ -0,0 +1,53 @@\n+// 2004-10-20  Benjamin Kosnik  <bkoz@redhat.com>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 6.2.2 Class template array\n+\n+#include <tr1/array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  {\n+    const size_t len = 5;\n+    typedef std::tr1::array<int, len> array_type;\n+    bool test __attribute__((unused)) = true;\n+    array_type a = { 0, 1, 2, 3, 4 };\n+    \n+    VERIFY( a.empty() == false );\n+  }\n+\n+  {\n+    const size_t len = 0;\n+    typedef std::tr1::array<int, len> array_type;\n+    bool test __attribute__((unused)) = true;\n+    array_type a;\n+    \n+    VERIFY( a.empty() == true );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "d081b3daa87ba232fe82181e4d5fc0df6ccd3f81", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/capacity/max_size.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcapacity%2Fmax_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcapacity%2Fmax_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcapacity%2Fmax_size.cc?ref=aed305a929bbaff9bed857638b90899e1ec37622", "patch": "@@ -0,0 +1,53 @@\n+// 2004-10-20  Benjamin Kosnik  <bkoz@redhat.com>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 6.2.2 Class template array\n+\n+#include <tr1/array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  {\n+    const size_t len = 5;\n+    typedef std::tr1::array<int, len> array_type;\n+    bool test __attribute__((unused)) = true;\n+    array_type a = { 0, 1, 2, 3, 4 };\n+    \n+    VERIFY( a.size() == len );\n+  }\n+\n+  {\n+    const size_t len = 0;\n+    typedef std::tr1::array<int, len> array_type;\n+    bool test __attribute__((unused)) = true;\n+    array_type a;\n+    \n+    VERIFY( a.size() == len );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "d081b3daa87ba232fe82181e4d5fc0df6ccd3f81", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/capacity/size.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcapacity%2Fsize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcapacity%2Fsize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcapacity%2Fsize.cc?ref=aed305a929bbaff9bed857638b90899e1ec37622", "patch": "@@ -0,0 +1,53 @@\n+// 2004-10-20  Benjamin Kosnik  <bkoz@redhat.com>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 6.2.2 Class template array\n+\n+#include <tr1/array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  {\n+    const size_t len = 5;\n+    typedef std::tr1::array<int, len> array_type;\n+    bool test __attribute__((unused)) = true;\n+    array_type a = { 0, 1, 2, 3, 4 };\n+    \n+    VERIFY( a.size() == len );\n+  }\n+\n+  {\n+    const size_t len = 0;\n+    typedef std::tr1::array<int, len> array_type;\n+    bool test __attribute__((unused)) = true;\n+    array_type a;\n+    \n+    VERIFY( a.size() == len );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "0ace9aec0dfcf4c385cea1e7fe4d643f54d06655", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/comparison_operators/equal.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fequal.cc?ref=aed305a929bbaff9bed857638b90899e1ec37622", "patch": "@@ -0,0 +1,45 @@\n+// 2004-10-20  Benjamin Kosnik  <bkoz@redhat.com>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 6.2.2 Class template array\n+\n+#include <tr1/array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  const size_t len = 5;\n+  typedef std::tr1::array<int, len> array_type;\n+  bool test __attribute__((unused)) = true;\n+  array_type a = { 0, 1, 2, 3, 4 };\n+  array_type b = { 0, 1, 2, 3, 4 };\n+  array_type c = { 0, 1, 2, 3 };\n+    \n+  VERIFY( a == b );\n+  VERIFY( !(a == c) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "3badc2033e6dca289532206a4113ecb2a1849b11", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/comparison_operators/greater.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fgreater.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fgreater.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fgreater.cc?ref=aed305a929bbaff9bed857638b90899e1ec37622", "patch": "@@ -0,0 +1,45 @@\n+// 2004-10-20  Benjamin Kosnik  <bkoz@redhat.com>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 6.2.2 Class template array\n+\n+#include <tr1/array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  const size_t len = 5;\n+  typedef std::tr1::array<int, len> array_type;\n+  bool test __attribute__((unused)) = true;\n+  array_type a = { 0, 1, 2, 3, 4 };\n+  array_type b = { 0, 1, 2, 3, 4 };\n+  array_type c = { 0, 1, 2, 3, 7 };\n+    \n+  VERIFY( !(a > b) );\n+  VERIFY( c > a );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "aaf0cb06fbe23c59c717be1ffa025905e143c007", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/comparison_operators/greater_or_equal.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fgreater_or_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fgreater_or_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fgreater_or_equal.cc?ref=aed305a929bbaff9bed857638b90899e1ec37622", "patch": "@@ -0,0 +1,45 @@\n+// 2004-10-20  Benjamin Kosnik  <bkoz@redhat.com>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 6.2.2 Class template array\n+\n+#include <tr1/array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  const size_t len = 5;\n+  typedef std::tr1::array<int, len> array_type;\n+  bool test __attribute__((unused)) = true;\n+  array_type a = { 0, 1, 2, 3, 4 };\n+  array_type b = { 0, 1, 2, 3, 4 };\n+  array_type c = { 0, 1, 2, 3, 7 };\n+    \n+  VERIFY( a >= b );\n+  VERIFY( c >= a );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "c0debec764f3b0368033f123ce8a33c5ffbfad8d", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/comparison_operators/less.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fless.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fless.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fless.cc?ref=aed305a929bbaff9bed857638b90899e1ec37622", "patch": "@@ -0,0 +1,45 @@\n+// 2004-10-20  Benjamin Kosnik  <bkoz@redhat.com>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 6.2.2 Class template array\n+\n+#include <tr1/array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  const size_t len = 5;\n+  typedef std::tr1::array<int, len> array_type;\n+  bool test __attribute__((unused)) = true;\n+  array_type a = { 0, 1, 2, 3, 4 };\n+  array_type b = { 0, 1, 2, 3, 4 };\n+  array_type c = { 0, 1, 2, 3, 7 };\n+    \n+  VERIFY( !(a < b) );\n+  VERIFY( a < c );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "11ae4e8514c7e2e26afbaa846939ccebebacce2a", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/comparison_operators/less_or_equal.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fless_or_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fless_or_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fless_or_equal.cc?ref=aed305a929bbaff9bed857638b90899e1ec37622", "patch": "@@ -0,0 +1,45 @@\n+// 2004-10-20  Benjamin Kosnik  <bkoz@redhat.com>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 6.2.2 Class template array\n+\n+#include <tr1/array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  const size_t len = 5;\n+  typedef std::tr1::array<int, len> array_type;\n+  bool test __attribute__((unused)) = true;\n+  array_type a = { 0, 1, 2, 3, 4 };\n+  array_type b = { 0, 1, 2, 3, 4 };\n+  array_type c = { 0, 1, 2, 3, 7 };\n+    \n+  VERIFY( a <= b );\n+  VERIFY( a <= c );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "f166ae7487381f6617c2ac3dc8f778149ca42f0f", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/comparison_operators/not_equal.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fnot_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fnot_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcomparison_operators%2Fnot_equal.cc?ref=aed305a929bbaff9bed857638b90899e1ec37622", "patch": "@@ -0,0 +1,45 @@\n+// 2004-10-20  Benjamin Kosnik  <bkoz@redhat.com>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 6.2.2 Class template array\n+\n+#include <tr1/array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  const size_t len = 5;\n+  typedef std::tr1::array<int, len> array_type;\n+  bool test __attribute__((unused)) = true;\n+  array_type a = { 0, 1, 2, 3, 4 };\n+  array_type b = { 0, 1, 2, 3, 4 };\n+  array_type c = { 0, 1, 2, 3 };\n+  \n+  VERIFY( !(a != b) );\n+  VERIFY( a != c );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "f885424b6aa56514046fc146812951009fbfda29", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/cons/aggregate_initialization.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcons%2Faggregate_initialization.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcons%2Faggregate_initialization.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fcons%2Faggregate_initialization.cc?ref=aed305a929bbaff9bed857638b90899e1ec37622", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile }\n+\n+// 2004-10-20  Benjamin Kosnik  <bkoz@redhat.com>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 6.2.2 Class template array\n+\n+#include <tr1/array>\n+\n+void\n+test01() \n+{ \n+  typedef std::tr1::array<int, 5> array_type;\n+\n+  array_type a = { 0, 1, 2, 3, 4 };\n+  array_type b = { 0, 1, 2, 3 };\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "1b178565296631f50965bde1f3ce09e7390161b9", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/element_access/at_out_of_range.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Felement_access%2Fat_out_of_range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Felement_access%2Fat_out_of_range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Felement_access%2Fat_out_of_range.cc?ref=aed305a929bbaff9bed857638b90899e1ec37622", "patch": "@@ -0,0 +1,54 @@\n+// 2004-10-20  Benjamin Kosnik  <bkoz@redhat.com>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 6.2.2 Class template array\n+\n+#include <tr1/array>\n+#include <stdexcept>\n+\n+void\n+test01() \n+{ \n+  const size_t len = 5;\n+  typedef std::tr1::array<int, len> array_type;\n+  bool test __attribute__((unused)) = true;\n+  array_type a = { 0, 1, 2, 3, 4 };\n+\n+  try\n+    {\n+      a.at(len);\n+    }\n+  catch(std::out_of_range& obj)\n+    {\n+      // Expected.\n+    }\n+  catch(...)\n+    {\n+      // Failed.\n+      throw;\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "890704fb8ed60121f9fa55da8b16c778eb23b1f5", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/iterators/end_is_one_past.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fiterators%2Fend_is_one_past.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fiterators%2Fend_is_one_past.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fiterators%2Fend_is_one_past.cc?ref=aed305a929bbaff9bed857638b90899e1ec37622", "patch": "@@ -0,0 +1,46 @@\n+// 2004-10-20  Benjamin Kosnik  <bkoz@redhat.com>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 6.2.2 Class template array\n+\n+#include <tr1/array>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  const size_t len = 5;\n+  typedef std::tr1::array<int, len> array_type;\n+  bool test __attribute__((unused)) = true;\n+  array_type a = { 0, 1, 2, 3, 4 };\n+\n+  array_type::iterator b = a.begin();\n+  array_type::iterator e = a.end();\n+\n+  VERIFY( e != (b + a.size() - 1));\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "2643600f4312f8eb74657c70033d30dd3b97d3cc", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/requirements/contiguous.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Fcontiguous.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Fcontiguous.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Fcontiguous.cc?ref=aed305a929bbaff9bed857638b90899e1ec37622", "patch": "@@ -0,0 +1,46 @@\n+// 2004-10-20  Benjamin Kosnik  <bkoz@redhat.com>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 6.2.2 Class template array\n+\n+#include <tr1/array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  const size_t len = 5;\n+  typedef std::tr1::array<int, len> array_type;\n+  bool test __attribute__((unused)) = true;\n+  array_type a = { 0, 1, 2, 3, 4 };\n+\n+  // &a[n] == &a[0] + n for all 0 <= n < N.\n+  for (size_t i = 0; i < len; ++i)\n+    {\n+      VERIFY( &a[i] == &a[0] + i );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "f4d7b68b422f33d8c0694195941c990b9cb4e550", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/requirements/instantiate.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Finstantiate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Finstantiate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Finstantiate.cc?ref=aed305a929bbaff9bed857638b90899e1ec37622", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do compile }\n+\n+// 2004-10-20  Benjamin Kosnik  <bkoz@redhat.com>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 6.2.2 Class template array\n+\n+#include <tr1/array>\n+\n+template class std::tr1::array<int, 5>;"}, {"sha": "225426d54b3d048954b699363365421f64e47fe4", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/requirements/typedefs.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Ftypedefs.cc?ref=aed305a929bbaff9bed857638b90899e1ec37622", "patch": "@@ -0,0 +1,49 @@\n+// { dg-do compile }\n+\n+// 2004-10-20  Benjamin Kosnik  <bkoz@redhat.com>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 6.2.2 Class template array\n+\n+#include <tr1/array>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::array<int, 5> test_type;\n+  typedef test_type::reference reference;\n+  typedef test_type::const_reference const_reference;\n+  typedef test_type::iterator iterator;\n+  typedef test_type::const_iterator const_iterator;\n+  typedef test_type::size_type size_type;\n+  typedef test_type::difference_type difference_type;\n+  typedef test_type::value_type value_type;\n+  typedef test_type::reverse_iterator reverse_iterator;\n+  typedef test_type::const_reverse_iterator const_reverse_iterator;\n+}"}, {"sha": "95d927514c1b9331f50910a5623cee5beeda0205", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/requirements/zero_sized_arrays.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Fzero_sized_arrays.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed305a929bbaff9bed857638b90899e1ec37622/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Fzero_sized_arrays.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Fzero_sized_arrays.cc?ref=aed305a929bbaff9bed857638b90899e1ec37622", "patch": "@@ -0,0 +1,61 @@\n+// 2004-10-20  Benjamin Kosnik  <bkoz@redhat.com>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 6.2.2.4 Zero sized arrays\n+\n+#include <tr1/array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  const size_t len = 0;\n+  typedef std::tr1::array<int, len> array_type;\n+  bool test __attribute__((unused)) = true;\n+\n+  // 1: ?\n+  array_type a = { };\n+\n+  // 2\n+  array_type b;\n+\n+  // 3\n+  // begin() == end()\n+  VERIFY( b.begin() == b.end() );\n+\n+  // 4: ?\n+  // begin() == end() == unique value.\n+  {\n+    typedef std::tr1::array<long, len> array_type1;\n+    typedef std::tr1::array<char, len> array_type2;\n+    array_type1 one;\n+    array_type2 two;\n+    void* v1 = one.begin();\n+    void* v2 = two.begin();\n+    VERIFY( v1 != v2 );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}]}