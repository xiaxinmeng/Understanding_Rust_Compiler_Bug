{"sha": "07bcbf9cc2a031ba5abcff368b452bfc99bf707e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdiY2JmOWNjMmEwMzFiYTVhYmNmZjM2OGI0NTJiZmM5OWJmNzA3ZQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-13T00:16:30Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-13T00:16:30Z"}, "message": "Daily bump.", "tree": {"sha": "6c43c6e76f9ff81d2d5947709bfec92f6b49edb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c43c6e76f9ff81d2d5947709bfec92f6b49edb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07bcbf9cc2a031ba5abcff368b452bfc99bf707e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07bcbf9cc2a031ba5abcff368b452bfc99bf707e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07bcbf9cc2a031ba5abcff368b452bfc99bf707e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07bcbf9cc2a031ba5abcff368b452bfc99bf707e/comments", "author": null, "committer": null, "parents": [{"sha": "9693ecdf7ed5dde9618d06560697ff8ee5e1e6b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9693ecdf7ed5dde9618d06560697ff8ee5e1e6b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9693ecdf7ed5dde9618d06560697ff8ee5e1e6b7"}], "stats": {"total": 337, "additions": 336, "deletions": 1}, "files": [{"sha": "98570fe405c46d10d60e32c6f67fbe2302e8259d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07bcbf9cc2a031ba5abcff368b452bfc99bf707e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07bcbf9cc2a031ba5abcff368b452bfc99bf707e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07bcbf9cc2a031ba5abcff368b452bfc99bf707e", "patch": "@@ -1,3 +1,124 @@\n+2021-07-12  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-fold.cc (fold_using_range::range_of_builtin_ubsan_call):\n+\tQuery relation between the 2 operands and use it.\n+\n+2021-07-12  Sergei Trofimovich  <siarheit@google.com>\n+\n+\t* doc/cfg.texi: Fix s/ei_safe_safe/ei_safe_edge/ typo.\n+\n+2021-07-12  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/101424\n+\t* config/i386/predicates.md (vec_setm_sse41_operand):\n+\tRename from vec_setm_operand.\n+\t(vec_setm_avx2_operand): New predicate.\n+\t* config/i386/sse.md (vec_set<V_128:mode>): Use V_128 mode iterator.\n+\tUse vec_setm_sse41_operand as operand 2 predicate.\n+\t(vec_set<V_256_512:mode): New expander.\n+\t* config/i386/mmx.md (vec_setv2hi): Use vec_setm_sse41_operand\n+\tas operand 2 predicate.\n+\n+2021-07-12  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/101335\n+\t* range-op.cc (operator_cast::lhs_op1_relation): Delete.\n+\n+2021-07-12  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* tree-ssa-phiopt.c (match_simplify_replacement): Move\n+\tinsert of the sequence before the movement of the\n+\tstatement. Check if to see if the statement is used\n+\toutside of the original phi to see if we should move it.\n+\n+2021-07-12  Richard Biener  <rguenther@suse.de>\n+\n+\t* dump-context.h (debug_dump_context::debug_dump_context):\n+\tAdd FILE * parameter defaulted to stderr.\n+\t* dumpfile.c (debug_dump_context::debug_dump_context): Adjust.\n+\t* tree-vect-slp.c (dot_slp_tree): New functions.\n+\n+2021-07-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101373\n+\t* tree-ssa-pre.c (prune_clobbered_mems): Also prune trapping\n+\treferences when the BB may not return.\n+\t(compute_avail): Pass in the function we're working on and\n+\treplace cfun references with it.  Externally throwing\n+\tconst calls also possibly terminate the function.\n+\t(pass_pre::execute): Pass down the function we're working on.\n+\t* gcse.c (compute_hash_table_work): Externally throwing\n+\tconst/pure calls also need record_last_mem_set_info.\n+\t* postreload-gcse.c (record_opr_changes): Looping or externally\n+\tthrowing const/pure calls also need record_last_mem_set_info.\n+\n+2021-07-12  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* recog.c (memory_address_addr_space_p): Change the type to bool.\n+\tReturn true/false instead of 1/0.\n+\t(offsettable_memref_p): Ditto.\n+\t(offsettable_nonstrict_memref_p): Ditto.\n+\t(offsettable_address_addr_space_p): Ditto.\n+\tChange the type of addressp indirect function to bool.\n+\t* recog.h (memory_address_addr_space_p): Change the type to bool.\n+\t(strict_memory_address_addr_space_p): Ditto.\n+\t(offsettable_memref_p): Ditto.\n+\t(offsettable_nonstrict_memref_p): Ditto.\n+\t(offsettable_address_addr_space_p): Ditto.\n+\t* reload.c (maybe_memory_address_addr_space_p): Ditto.\n+\t(strict_memory_address_addr_space_p): Change the type to bool.\n+\tReturn true/false instead of 1/0.\n+\t(maybe_memory_address_addr_space_p): Change the type to bool.\n+\n+2021-07-12  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_slp_region): Show the number of\n+\tSLP graph entries in the optimization message.\n+\n+2021-07-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101394\n+\t* tree-ssa-pre.c (do_pre_regular_insertion): Avoid inserting\n+\tcopies from abnormals for a full redundancy.\n+\n+2021-07-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/101423\n+\t* gimple.c (gimple_could_trap_p_1): Internal function calls\n+\tdo not trap.\n+\t* tree-eh.c (tree_could_trap_p): Likewise.\n+\n+2021-07-12  prathamesh.kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR target/66791\n+\t* config/arm/arm_neon.h (vmul_n_u32): Replace call to builtin with\n+\t__a * __b.\n+\t(vmulq_n_u32): Likewise.\n+\t(vmul_n_f32): Gate __a * __b on __FAST_MATH__.\n+\t(vmulq_n_f32): Likewise.\n+\t(vmul_n_f16): Likewise.\n+\t(vmulq_n_f16): Likewise.\n+\n+2021-07-12  Martin Liska  <mliska@suse.cz>\n+\n+\tPR sanitizer/101425\n+\t* gcc.c (check_offload_target_name): Call\n+\t  candidates_list_and_hint only if we have a candidate.\n+\n+2021-07-12  prathamesh.kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR target/98435\n+\t* config/arm/neon.md (vec_init): Move to ...\n+\t* config/arm/vec-common.md (vec_init): ... here.\n+\tChange the pattern's mode to VDQX and gate it on VALID_MVE_MODE.\n+\n+2021-07-12  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR tree-optimization/101403\n+\t* match.pd ((T)bswap(X)>>C): Correctly handle cases where\n+\tsignedness of the shift is not the same as the signedness of\n+\tthe type extension.\n+\n 2021-07-09  Roger Sayle  <roger@nextmovesoftware.com>\n \t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "12fd5d42259c884556ee398695c0466980d02995", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07bcbf9cc2a031ba5abcff368b452bfc99bf707e/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07bcbf9cc2a031ba5abcff368b452bfc99bf707e/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=07bcbf9cc2a031ba5abcff368b452bfc99bf707e", "patch": "@@ -1 +1 @@\n-20210712\n+20210713"}, {"sha": "a60b02a8d9aecc6c56aca8201b875ebc11c30b24", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07bcbf9cc2a031ba5abcff368b452bfc99bf707e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07bcbf9cc2a031ba5abcff368b452bfc99bf707e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=07bcbf9cc2a031ba5abcff368b452bfc99bf707e", "patch": "@@ -1,3 +1,141 @@\n+2021-07-12  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* adaint.c (__gnat_number_of_cpus): Replace \"#ifdef\" by \"#if\n+\tdefined\".\n+\n+2021-07-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <discrete_type>: Add a\n+\tparallel type only when -fgnat-encodings=all is specified.\n+\t<E_Array_Type>: Use the PAT name and special suffixes only when\n+\t-fgnat-encodings=all is specified.\n+\t<E_Array_Subtype>: Build a special type for debugging purposes only\n+\twhen -fgnat-encodings=all is specified.  Add a parallel type or use\n+\tthe PAT name only when -fgnat-encodings=all is specified.\n+\t<E_Record_Type>: Generate debug info for the inner record types only\n+\twhen -fgnat-encodings=all is specified.\n+\t<E_Record_Subtype>: Use a debug type for an artificial subtype only\n+\texcept when -fgnat-encodings=all is specified.\n+\t(elaborate_expression_1): Reset need_for_debug when possible only\n+\texcept when -fgnat-encodings=all is specified.\n+\t(components_to_record): Use XV encodings for variable size only\n+\twhen -fgnat-encodings=all is specified.\n+\t(associate_original_type_to_packed_array): Add a parallel type only\n+\twhen -fgnat-encodings=all is specified.\n+\t* gcc-interface/misc.c (gnat_get_array_descr_info): Do not return\n+\tfull information only when -fgnat-encodings=all is specified.\n+\t* gcc-interface/utils.c (make_packable_type): Add a parallel type\n+\tonly when -fgnat-encodings=all is specified.\n+\t(maybe_pad_type): Make the inner type a debug type only except when\n+\t-fgnat-encodings=all is specified.  Create an XVS type for variable\n+\tsize only when -fgnat-encodings=all is specified.\n+\t(rest_of_record_type_compilation): Add a parallel type only when\n+\t-fgnat-encodings=all is specified.\n+\n+2021-07-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Type>: Use a\n+\tfixed lower bound if the index subtype is marked so, as well as a\n+\tmore efficient formula for the upper bound if the array cannot be\n+\tsuperflat.\n+\t(flb_cannot_be_superflat): New predicate.\n+\t(cannot_be_superflat): Rename into...\n+\t(range_cannot_be_superfla): ...this.  Minor tweak.\n+\n+2021-07-12  Bob Duff  <duff@adacore.com>\n+\n+\t* uintp.ads, types.h: New subtypes of Uint: Valid_Uint, Unat,\n+\tUpos, Nonzero_Uint with predicates. These correspond to new\n+\tfield types in Gen_IL.\n+\t* gen_il-types.ads (Valid_Uint, Unat, Upos, Nonzero_Uint): New\n+\tfield types.\n+\t* einfo-utils.ads, einfo-utils.adb, fe.h (Known_Alignment,\n+\tInit_Alignment): Use the initial zero value to represent\n+\t\"unknown\". This will ensure that if Alignment is called before\n+\tSet_Alignment, the compiler will blow up (if assertions are\n+\tenabled).\n+\t* atree.ads, atree.adb, atree.h, gen_il-gen.adb\n+\t(Get_Valid_32_Bit_Field): New generic low-level getter for\n+\tsubtypes of Uint.\n+\t(Copy_Alignment): New procedure to copy Alignment field even\n+\twhen Unknown.\n+\t(Init_Object_Size_Align, Init_Size_Align): Do not bypass the\n+\tInit_ procedures.\n+\t* exp_pakd.adb, freeze.adb, layout.adb, repinfo.adb,\n+\tsem_util.adb: Protect calls to Alignment with Known_Alignment.\n+\tUse Copy_Alignment when it might be unknown.\n+\t* gen_il-gen-gen_entities.adb (Alignment,\n+\tString_Literal_Length): Use type Unat instead of Uint, to ensure\n+\tthat the field is always Set_ before we get it, and that it is\n+\tset to a nonnegative value.\n+\t(Enumeration_Pos): Unat.\n+\t(Enumeration_Rep): Valid_Uint. Can be negative, but must be\n+\tvalid before fetching.\n+\t(Discriminant_Number): Upos.\n+\t(Renaming_Map): Remove.\n+\t* gen_il-gen-gen_nodes.adb (Char_Literal_Value, Reason): Unat.\n+\t(Intval, Corresponding_Integer_Value): Valid_Uint.\n+\t* gen_il-internals.ads: New functions for dealing with special\n+\tdefaults and new subtypes of Uint.\n+\t* scans.ads: Correct comments.\n+\t* scn.adb (Post_Scan): Do not set Intval to No_Uint; that is no\n+\tlonger allowed.\n+\t* sem_ch13.adb (Analyze_Enumeration_Representation_Clause): Do\n+\tnot set Enumeration_Rep to No_Uint; that is no longer allowed.\n+\t(Offset_Value): Protect calls to Alignment with Known_Alignment.\n+\t* sem_prag.adb (Set_Atomic_VFA): Do not use Uint_0 to mean\n+\t\"unknown\"; call Init_Alignment instead.\n+\t* sinfo.ads: Minor comment fix.\n+\t* treepr.adb: Deal with printing of new field types.\n+\t* einfo.ads, gen_il-fields.ads (Renaming_Map): Remove.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Use Known_Alignment\n+\tbefore calling Alignment. This preserve some probably buggy\n+\tbehavior: if the alignment is not set, it previously defaulted\n+\tto Uint_0; we now make that explicit.  Use Copy_Alignment,\n+\tbecause \"Set_Alignment (Y, Alignment (X));\" no longer works when\n+\tthe Alignment of X has not yet been set.\n+\t* gcc-interface/trans.c (process_freeze_entity): Use\n+\tCopy_Alignment.\n+\n+2021-07-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-dwalin.ads: Adjust a few comments left and right.\n+\t(Line_Info_Register): Comment out unused components.\n+\t(Line_Info_Header): Add DWARF 5 support.\n+\t(Dwarf_Context): Likewise.  Rename \"prologue\" into \"header\".\n+\t* libgnat/s-dwalin.adb: Alphabetize \"with\" clauses.\n+\t(DWARF constants): Add DWARF 5 support and reorder.\n+\t(For_Each_Row): Adjust.\n+\t(Initialize_Pass): Likewise.\n+\t(Initialize_State_Machine): Likewise and fix typo.\n+\t(Open): Add DWARF 5 support.\n+\t(Parse_Prologue): Rename into...\n+\t(Parse_Header): ...this and add DWARF 5 support.\n+\t(Read_And_Execute_Isn): Rename into...\n+\t(Read_And_Execute_Insn): ...this and adjust.\n+\t(To_File_Name): Change parameter name and add DWARF 5 support.\n+\t(Read_Entry_Format_Array): New procedure.\n+\t(Skip_Form): Add DWARF 5 support and reorder.\n+\t(Seek_Abbrev): Do not count entries and add DWARF 5 support.\n+\t(Debug_Info_Lookup): Add DWARF 5 support.\n+\t(Symbolic_Address.Set_Result): Likewise.\n+\t(Symbolic_Address): Adjust.\n+\n+2021-07-12  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch13.adb (Duplicate_Clause): Add a helper routine\n+\tCheck_One_Attr, with a parameter for the attribute_designator we\n+\tare looking for, and one for the attribute_designator of the\n+\tcurrent node (which are usually the same). For Size and\n+\tValue_Size, call it twice, once for each.\n+\t* errout.ads: Fix a typo.\n+\n+2021-07-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_imgv.adb (Expand_Image_Attribute): Move rewriting to\n+\tattribute Put_Image to the beginning of expansion of attribute\n+\tImage.\n+\n 2021-07-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/utils.c (finish_subprog_decl): Remove obsolete line."}, {"sha": "dc57991aea181c0c659be3f4e2574799511d0ba1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07bcbf9cc2a031ba5abcff368b452bfc99bf707e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07bcbf9cc2a031ba5abcff368b452bfc99bf707e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=07bcbf9cc2a031ba5abcff368b452bfc99bf707e", "patch": "@@ -1,3 +1,14 @@\n+2021-07-12  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/79501\n+\tPR c++/100983\n+\t* decl.c (grokfndecl): Don't require that deduction guides are\n+\tdeclared at namespace scope.  Check that class-scope deduction\n+\tguides have the same access as the member class template.\n+\t(grokdeclarator): Pretend class-scope deduction guides are static.\n+\t* search.c (lookup_member): Don't use a BASELINK for (class-scope)\n+\tdeduction guides.\n+\n 2021-07-10  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/82110"}, {"sha": "6eacfd028e09179bd97192ffa3b524a210ddd012", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07bcbf9cc2a031ba5abcff368b452bfc99bf707e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07bcbf9cc2a031ba5abcff368b452bfc99bf707e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=07bcbf9cc2a031ba5abcff368b452bfc99bf707e", "patch": "@@ -1,3 +1,62 @@\n+2021-07-12  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/79501\n+\tPR c++/100983\n+\t* g++.dg/cpp1z/class-deduction92.C: New test.\n+\t* g++.dg/cpp1z/class-deduction93.C: New test.\n+\t* g++.dg/cpp1z/class-deduction94.C: New test.\n+\t* g++.dg/cpp1z/class-deduction95.C: New test.\n+\n+2021-07-12  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/101424\n+\t* gcc.target/i386/pr101424.c: New test.\n+\n+2021-07-12  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/pr101335.c: New.\n+\n+2021-07-12  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* gcc.dg/tree-ssa/pr96928-1.c: Update to similar as pr96928.c.\n+\n+2021-07-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101373\n+\t* g++.dg/torture/pr101373.C: New testcase, XFAILed.\n+\t* gnat.dg/opt95.adb: Likewise.\n+\n+2021-07-12  Richard Biener  <rguenther@suse.de>\n+\n+\t* g++.dg/vect/slp-pr87105.cc: Adjust.\n+\t* gcc.dg/vect/bb-slp-pr54400.c: Likewise.\n+\n+2021-07-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101394\n+\t* gcc.dg/torture/pr101394.c: New testcase.\n+\n+2021-07-12  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/101403\n+\t* gcc.dg/pr101403.c: Avoid (unimportant) uninitialized variable.\n+\n+2021-07-12  prathamesh.kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR target/66791\n+\t* gcc.target/arm/armv8_2-fp16-neon-2.c: Adjust.\n+\n+2021-07-12  prathamesh.kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR target/98435\n+\t* gcc.target/arm/simd/pr98435.c: New test.\n+\n+2021-07-12  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR tree-optimization/101403\n+\t* gcc.dg/pr101403.c: New test case.\n+\n 2021-07-10  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* gcc.dg/torture/pr100329.c: Require target lra."}, {"sha": "d676ed3b91f683120f312abe946d82845edac2cf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07bcbf9cc2a031ba5abcff368b452bfc99bf707e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07bcbf9cc2a031ba5abcff368b452bfc99bf707e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=07bcbf9cc2a031ba5abcff368b452bfc99bf707e", "patch": "@@ -1,3 +1,9 @@\n+2021-07-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/101411\n+\t* include/std/span (as_writable_bytes): Add requires-clause.\n+\t* testsuite/23_containers/span/101411.cc: New test.\n+\n 2021-07-09  Matheus Castanho  <msc@linux.ibm.com>\n \n \t* include/std/mutex (__lock_impl): Check"}]}