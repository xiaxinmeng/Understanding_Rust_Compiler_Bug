{"sha": "25bdb91003c93540688cdba3edb229bdcdb221e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjViZGI5MTAwM2M5MzU0MDY4OGNkYmEzZWRiMjI5YmRjZGIyMjFlMg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-22T00:52:23Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-22T00:52:23Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r813", "tree": {"sha": "1f3659753f9ec960f3840c4d3bc68618d25f9a3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f3659753f9ec960f3840c4d3bc68618d25f9a3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25bdb91003c93540688cdba3edb229bdcdb221e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25bdb91003c93540688cdba3edb229bdcdb221e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25bdb91003c93540688cdba3edb229bdcdb221e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25bdb91003c93540688cdba3edb229bdcdb221e2/comments", "author": null, "committer": null, "parents": [{"sha": "cc0218f78fb33d19834f89257e60de09895002cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc0218f78fb33d19834f89257e60de09895002cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc0218f78fb33d19834f89257e60de09895002cd"}], "stats": {"total": 41, "additions": 31, "deletions": 10}, "files": [{"sha": "62c6398a6f5e0a9e5fb39320d1b2b712ccaf3f96", "filename": "gcc/dbxout.c", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bdb91003c93540688cdba3edb229bdcdb221e2/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bdb91003c93540688cdba3edb229bdcdb221e2/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=25bdb91003c93540688cdba3edb229bdcdb221e2", "patch": "@@ -1348,25 +1348,46 @@ dbxout_symbol (decl, local)\n \n       if (DECL_NAME (decl))\n \t{\n+\t  /* Nonzero means we must output a tag as well as a typedef.  */\n+\t  int tag_also = ((TREE_CODE (type) == RECORD_TYPE\n+\t\t\t   || TREE_CODE (type) == UNION_TYPE)\n+\t\t\t  && TYPE_NAME (type) == decl);\n+\n \t  /* Output typedef name.  */\n \t  fprintf (asmfile, \"%s \\\"%s:\", ASM_STABS_OP,\n \t\t   IDENTIFIER_POINTER (DECL_NAME (decl)));\n \n-\t  /* If there is a typedecl for this type with the same name\n-\t     as the tag, output an abbreviated form for that typedecl.  */\n-\t  if (use_gdb_dbx_extensions && have_used_extensions\n-\t      && (TREE_CODE (type) == RECORD_TYPE\n-\t\t  || TREE_CODE (type) == UNION_TYPE)\n-\t      && (TYPE_NAME (type) == decl))\n-\t    {\n-\t      putc ('T', asmfile);\n-\t      TREE_ASM_WRITTEN (TYPE_NAME (type)) = 1;\n-\t    }\n+\t  /* Short cut way to output a tag also.  */\n+\t  if (tag_also && use_gdb_dbx_extensions && have_used_extensions)\n+\t    putc ('T', asmfile);\n+\n \t  putc ('t', asmfile);\n \t  current_sym_code = DBX_DECL_STABS_CODE;\n \n \t  dbxout_type (type, 1, 0);\n \t  dbxout_finish_symbol (decl);\n+\n+\t  /* Long way to output a tag also.  */\n+\t  if (tag_also && ! (use_gdb_dbx_extensions && have_used_extensions))\n+\t    {\n+\t      /* Output the tag for the type, not using GDB extensions.\n+\t\t This represents `struct foo' as opposed to `typedef foo'.  */\n+\t      /* In C++, the name of a type is the corresponding typedef.\n+\t\t In C, it is an IDENTIFIER_NODE.  */\n+\t      tree name = TYPE_NAME (type);\n+\t      if (TREE_CODE (name) == TYPE_DECL)\n+\t\tname = DECL_NAME (name);\n+\n+\t      current_sym_code = DBX_DECL_STABS_CODE;\n+\t      current_sym_value = 0;\n+\t      current_sym_addr = 0;\n+\t      current_sym_nchars = 2 + IDENTIFIER_LENGTH (name);\n+\n+\t      fprintf (asmfile, \"%s \\\"%s:T\", ASM_STABS_OP,\n+\t\t       IDENTIFIER_POINTER (name));\n+\t      dbxout_type (type, 1, 0);\n+\t      dbxout_finish_symbol (0);\n+\t    }\n \t}\n       else if (TYPE_NAME (type) != 0 && !TREE_ASM_WRITTEN (TYPE_NAME (type)))\n \t{"}]}