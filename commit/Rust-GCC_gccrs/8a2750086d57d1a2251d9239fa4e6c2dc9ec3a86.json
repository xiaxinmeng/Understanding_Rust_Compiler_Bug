{"sha": "8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGEyNzUwMDg2ZDU3ZDFhMjI1MWQ5MjM5ZmE0ZTZjMmRjOWVjM2E4Ng==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-02-02T02:54:11Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-02-02T02:54:11Z"}, "message": "analyzer: directly explore within static functions [PR93355,PR96374]\n\nPR analyzer/93355 tracks that -fanalyzer fails to report the FILE *\nleak in read_alias_file in intl/localealias.c.\n\nOne reason for the failure is that read_alias_file is marked as\n\"static\", and the path leading to the single call of\nread_alias_file is falsely rejected as infeasible due to\nPR analyzer/96374.  I have been attempting to fix that bug, but\ndon't have a good solution yet.\n\nPreviously, -fanalyzer only directly explored \"static\" functions\nif they were needed for call summaries, instead forcing them to\nbe indirectly explored, but if we have a feasibility bug like\nabove, we will fail to report any issues in a function that's\nonly called by such a falsely infeasible path.\n\nIt now seems wrong to me to reject directly exploring static\nfunctions: even if there is currently no way to call a function,\nit seems reasonable to warn about bugs within them, since\notherwise these latent bugs are a timebomb in the code.\n\nHence this patch reworks toplevel_function_p to directly explore\nalmost all functions, working around these feasiblity issues.\nIt introduces a naming convention that \"__analyzer_\"-prefixed\nfunction names don't get directly explored, since this is\nuseful in the analyzer's DejaGnu-based tests.\n\nThis workaround gets PR analyzer/93355 closer to working, but\nunfortunately there is a second instance of PR analyzer/96374\nwithin read_alias_file itself which means even with this patch\n-fanalyzer falsely rejects the path as infeasible.\n\nStill, this ought to help in other cases, and simplifies the\nimplementation.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/93355\n\tPR analyzer/96374\n\t* engine.cc (toplevel_function_p): Simplify so that\n\twe only reject functions with a \"__analyzer_\" prefix.\n\t(add_any_callbacks): Delete.\n\t(exploded_graph::build_initial_worklist): Update for\n\tdropped param of toplevel_function_p.\n\t(exploded_graph::build_initial_worklist): Don't bother\n\tlooking for callbacks that are reachable from global\n\tinitializers.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/93355\n\tPR analyzer/96374\n\t* gcc.dg/analyzer/conditionals-3.c: Add \"__analyzer_\"\n\tprefix to support subroutines where necessary.\n\t* gcc.dg/analyzer/data-model-1.c: Likewise.\n\t* gcc.dg/analyzer/feasibility-1.c (called_by_test_6a): New.\n\t(test_6a): New.\n\t* gcc.dg/analyzer/params.c: Add \"__analyzer_\" prefix to support\n\tsubroutines where necessary.\n\t* gcc.dg/analyzer/pr96651-2.c: Likewise.\n\t* gcc.dg/analyzer/signal-4b.c: Likewise.\n\t* gcc.dg/analyzer/single-field.c: Likewise.\n\t* gcc.dg/analyzer/torture/conditionals-2.c: Likewise.", "tree": {"sha": "4be6e5e1bd46105a3ea91abc72f19f5fe7d5b918", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4be6e5e1bd46105a3ea91abc72f19f5fe7d5b918"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2f639c4a781016ad146d44f463714fe4295cb6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2f639c4a781016ad146d44f463714fe4295cb6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2f639c4a781016ad146d44f463714fe4295cb6e"}], "stats": {"total": 148, "additions": 69, "deletions": 79}, "files": [{"sha": "45aed8f0d377f381cbaf8a6f97d98713d78449db", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 16, "deletions": 52, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86", "patch": "@@ -2348,38 +2348,27 @@ exploded_graph::get_per_function_data (function *fun) const\n   return NULL;\n }\n \n-/* Return true if NODE and FUN should be traversed directly, rather than\n+/* Return true if FUN should be traversed directly, rather than only as\n    called via other functions.  */\n \n static bool\n-toplevel_function_p (cgraph_node *node, function *fun, logger *logger)\n+toplevel_function_p (function *fun, logger *logger)\n {\n-  /* TODO: better logic here\n-     e.g. only if more than one caller, and significantly complicated.\n-     Perhaps some whole-callgraph analysis to decide if it's worth summarizing\n-     an edge, and if so, we need summaries.  */\n-  if (flag_analyzer_call_summaries)\n-    {\n-      int num_call_sites = 0;\n-      for (cgraph_edge *edge = node->callers; edge; edge = edge->next_caller)\n-\t++num_call_sites;\n-\n-      /* For now, if there's more than one in-edge, and we want call\n-\t summaries, do it at the top level so that there's a chance\n-\t we'll have a summary when we need one.  */\n-      if (num_call_sites > 1)\n-\t{\n-\t  if (logger)\n-\t    logger->log (\"traversing %qE (%i call sites)\",\n-\t\t\t fun->decl, num_call_sites);\n-\t  return true;\n-\t}\n-    }\n-\n-  if (!TREE_PUBLIC (fun->decl))\n+  /* Don't directly traverse into functions that have an \"__analyzer_\"\n+     prefix.  Doing so is useful for the analyzer test suite, allowing\n+     us to have functions that are called in traversals, but not directly\n+     explored, thus testing how the analyzer handles calls and returns.\n+     With this, we can have DejaGnu directives that cover just the case\n+     of where a function is called by another function, without generating\n+     excess messages from the case of the first function being traversed\n+     directly.  */\n+#define ANALYZER_PREFIX \"__analyzer_\"\n+  if (!strncmp (IDENTIFIER_POINTER (DECL_NAME (fun->decl)), ANALYZER_PREFIX,\n+\t\tstrlen (ANALYZER_PREFIX)))\n     {\n       if (logger)\n-\tlogger->log (\"not traversing %qE (static)\", fun->decl);\n+\tlogger->log (\"not traversing %qE (starts with %qs)\",\n+\t\t     fun->decl, ANALYZER_PREFIX);\n       return false;\n     }\n \n@@ -2389,18 +2378,6 @@ toplevel_function_p (cgraph_node *node, function *fun, logger *logger)\n   return true;\n }\n \n-/* Callback for walk_tree for finding callbacks within initializers;\n-   ensure they are treated as possible entrypoints to the analysis.  */\n-\n-static tree\n-add_any_callbacks (tree *tp, int *, void *data)\n-{\n-  exploded_graph *eg = (exploded_graph *)data;\n-  if (TREE_CODE (*tp) == FUNCTION_DECL)\n-    eg->on_escaped_function (*tp);\n-  return NULL_TREE;\n-}\n-\n /* Add initial nodes to EG, with entrypoints for externally-callable\n    functions.  */\n \n@@ -2414,7 +2391,7 @@ exploded_graph::build_initial_worklist ()\n   FOR_EACH_FUNCTION_WITH_GIMPLE_BODY (node)\n   {\n     function *fun = node->get_fun ();\n-    if (!toplevel_function_p (node, fun, logger))\n+    if (!toplevel_function_p (fun, logger))\n       continue;\n     exploded_node *enode = add_function_entry (fun);\n     if (logger)\n@@ -2426,19 +2403,6 @@ exploded_graph::build_initial_worklist ()\n \t  logger->log (\"did not create enode for %qE entrypoint\", fun->decl);\n       }\n   }\n-\n-  /* Find callbacks that are reachable from global initializers.  */\n-  varpool_node *vpnode;\n-  FOR_EACH_VARIABLE (vpnode)\n-    {\n-      tree decl = vpnode->decl;\n-      if (!TREE_PUBLIC (decl))\n-\tcontinue;\n-      tree init = DECL_INITIAL (decl);\n-      if (!init)\n-\tcontinue;\n-      walk_tree (&init, add_any_callbacks, this, NULL);\n-    }\n }\n \n /* The main loop of the analysis."}, {"sha": "f1c6c2084056eb859d7b142e8ca1036aaee59405", "filename": "gcc/testsuite/gcc.dg/analyzer/conditionals-3.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fconditionals-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fconditionals-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fconditionals-3.c?ref=8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86", "patch": "@@ -2,12 +2,12 @@\n \n #include \"analyzer-decls.h\"\n \n-static void only_called_when_flag_a_true (int i)\n+static void __analyzer_only_called_when_flag_a_true (int i)\n {\n   __analyzer_eval (i == 42); /* { dg-warning \"TRUE\" } */\n }\n \n-static void only_called_when_flag_b_true (int i)\n+static void __analyzer_only_called_when_flag_b_true (int i)\n {\n   __analyzer_eval (i == 17); /* { dg-warning \"TRUE\" } */\n }\n@@ -34,14 +34,14 @@ int test_1 (int flag_a, int flag_b)\n       __analyzer_eval (flag_b); /* { dg-warning \"UNKNOWN\" } */\n       __analyzer_eval (i == 42); /* { dg-warning \"TRUE\" } */\n       __analyzer_eval (i == 17); /* { dg-warning \"FALSE\" } */\n-      only_called_when_flag_a_true (i);\n+      __analyzer_only_called_when_flag_a_true (i);\n     }  \n   else\n     {\n       __analyzer_eval (flag_a); /* { dg-warning \"FALSE\" } */\n       __analyzer_eval (flag_b); /* { dg-warning \"UNKNOWN\" } */\n       __analyzer_eval (i == 42); /* { dg-warning \"FALSE\" } */\n       __analyzer_eval (i == 17); /* { dg-warning \"TRUE\" } */\n-      only_called_when_flag_b_true (i);\n+      __analyzer_only_called_when_flag_b_true (i);\n     }\n }"}, {"sha": "afd155694600477bd883e5473fe12603d46bef8f", "filename": "gcc/testsuite/gcc.dg/analyzer/data-model-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-1.c?ref=8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86", "patch": "@@ -782,7 +782,7 @@ void test_33 (void)\n }\n \n static int __attribute__((noinline))\n-only_called_by_test_34 (int parm)\n+__analyzer_only_called_by_test_34 (int parm)\n {\n   __analyzer_eval (parm == 42); /* { dg-warning \"TRUE\" } */\n \n@@ -791,7 +791,7 @@ only_called_by_test_34 (int parm)\n \n void test_34 (void)\n {\n-  int result = only_called_by_test_34 (42);\n+  int result = __analyzer_only_called_by_test_34 (42);\n   __analyzer_eval (result == 84); /* { dg-warning \"TRUE\" } */\n }\n "}, {"sha": "c96844467a5183e2b71ee4ca506711c0b4170de5", "filename": "gcc/testsuite/gcc.dg/analyzer/feasibility-1.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffeasibility-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffeasibility-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffeasibility-1.c?ref=8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86", "patch": "@@ -60,3 +60,29 @@ int test_6 (int a, int b)\n     }\n   return problem;\n }\n+\n+/* As above, but call a static function.\n+   Even if the path to the call of called_by_test_6a is falsely rejected\n+   as infeasible, it still makes sense to complain about errors within\n+   the called function.  */\n+\n+static void __attribute__((noinline))\n+called_by_test_6a (void *ptr)\n+{\n+  __builtin_free (ptr);\n+  __builtin_free (ptr); /* { dg-message \"double-'free'\" } */\n+}\n+\n+int test_6a (int a, int b, void *ptr)\n+{\n+  int problem = 0;\n+  if (a)\n+    problem = 1;\n+  if (b)\n+    {\n+      if (!problem)\n+\tproblem = 2;\n+      called_by_test_6a (ptr);\n+    }\n+  return problem;\n+}"}, {"sha": "12bba70d6e4d21b4e1be9d8e059993b2736e5bc4", "filename": "gcc/testsuite/gcc.dg/analyzer/params.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fparams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fparams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fparams.c?ref=8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86", "patch": "@@ -1,6 +1,6 @@\n #include \"analyzer-decls.h\"\n \n-static int called_function(int j)\n+static int __analyzer_called_function(int j)\n {\n   int k;\n \n@@ -23,7 +23,7 @@ void test(int i)\n \n     __analyzer_eval (i > 4); /* { dg-warning \"TRUE\" } */\n \n-    i = called_function(i);\n+    i = __analyzer_called_function(i);\n \n     __analyzer_eval (i > 3); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n     /* { dg-warning \"UNKNOWN\" \"status quo\" { target *-*-* } .-1 } */"}, {"sha": "25cda37934e18085ca23fa243cfe7f4f4db7650c", "filename": "gcc/testsuite/gcc.dg/analyzer/pr96651-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96651-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96651-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96651-2.c?ref=8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86", "patch": "@@ -26,7 +26,7 @@ void test (void)\n }\n \n static void __attribute__((noinline))\n-called_from_main (void)\n+__analyzer_called_from_main (void)\n {\n   /* When accessed from main, the vars still have their initializer values.  */\n   __analyzer_eval (a == 0); /* { dg-warning \"TRUE\" } */\n@@ -53,7 +53,7 @@ int main (void)\n      before \"main\").  */\n   __analyzer_eval (stderr == 0); /* { dg-warning \"UNKNOWN\" } */\n \n-  called_from_main ();\n+  __analyzer_called_from_main ();\n \n   unknown_fn (&a, &c);\n "}, {"sha": "5a2ccb1def48cd7f4cb3f5532a4f2081d1f24689", "filename": "gcc/testsuite/gcc.dg/analyzer/signal-4b.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsignal-4b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsignal-4b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsignal-4b.c?ref=8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86", "patch": "@@ -20,14 +20,14 @@ static void int_handler(int signum)\n   custom_logger(\"got signal\");\n }\n \n-static void register_handler ()\n+static void __analyzer_register_handler ()\n {\n   signal(SIGINT, int_handler);\n }\n \n void test (void)\n {\n-  register_handler ();\n+  __analyzer_register_handler ();\n   body_of_program();\n }\n \n@@ -42,17 +42,17 @@ void test (void)\n     |      |      |\n     |      |      (1) entry to 'test'\n     |   NN | {\n-    |   NN |   register_handler ();\n-    |      |   ~~~~~~~~~~~~~~~~~~~\n+    |   NN |   __analyzer_register_handler ();\n+    |      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n     |      |   |\n-    |      |   (2) calling 'register_handler' from 'test'\n+    |      |   (2) calling '__analyzer_register_handler' from 'test'\n     |\n-    +--> 'register_handler': events 3-4\n+    +--> '__analyzer_register_handler': events 3-4\n            |\n-           |   NN | static void register_handler ()\n-           |      |             ^~~~~~~~~~~~~~~~\n+           |   NN | static void __analyzer_register_handler ()\n+           |      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n            |      |             |\n-           |      |             (3) entry to 'register_handler'\n+           |      |             (3) entry to '__analyzer_register_handler'\n            |   NN | {\n            |   NN |   signal(SIGINT, int_handler);\n            |      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~"}, {"sha": "31c6feead8fec78c5eb84e606ffc11906082b05d", "filename": "gcc/testsuite/gcc.dg/analyzer/single-field.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsingle-field.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsingle-field.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsingle-field.c?ref=8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86", "patch": "@@ -11,27 +11,27 @@ void test_1 (struct foo f)\n   __analyzer_describe (0, f.ptr); /* { dg-warning \"svalue: 'INIT_VAL\\\\(f.ptr\\\\)'\" } */\n }\n \n-static void called_by_test_2 (struct foo f_inner)\n+static void __analyzer_called_by_test_2 (struct foo f_inner)\n {\n   free (f_inner.ptr);\n   free (f_inner.ptr); /* { dg-warning \"double-'free' of 'f_outer.ptr'\" } */\n }\n void test_2 (struct foo f_outer)\n {\n-  called_by_test_2 (f_outer);\n+  __analyzer_called_by_test_2 (f_outer);\n }\n \n struct nested\n {\n   struct foo f;\n };\n \n-static void called_by_test_3 (struct nested n_inner)\n+static void __analyzer_called_by_test_3 (struct nested n_inner)\n {\n   free (n_inner.f.ptr);\n   free (n_inner.f.ptr); /* { dg-warning \"double-'free' of 'n_outer.f.ptr'\" } */\n }\n void test_3 (struct nested n_outer)\n {\n-  called_by_test_3 (n_outer);\n+  __analyzer_called_by_test_3 (n_outer);\n }"}, {"sha": "278a2a537117e6ffef3609e13a9b67114d8b812f", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/conditionals-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fconditionals-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fconditionals-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fconditionals-2.c?ref=8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86", "patch": "@@ -5,7 +5,7 @@\n #define Z_NULL 0\n \n static void __attribute__((noinline))\n-test_1_callee (void *p, void *q)\n+__analyzer_test_1_callee (void *p, void *q)\n {\n   __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \n@@ -21,11 +21,11 @@ void test_1 (void *p, void *q)\n   if (p == Z_NULL || q == Z_NULL)\n     return;\n \n-  test_1_callee (p, q);\n+  __analyzer_test_1_callee (p, q);\n }\n \n static void __attribute__((noinline))\n-test_2_callee (void *p, void *q)\n+__analyzer_test_2_callee (void *p, void *q)\n {\n   __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n \n@@ -39,5 +39,5 @@ test_2_callee (void *p, void *q)\n void test_2 (void *p, void *q)\n {\n   if (p != Z_NULL && q != Z_NULL)\n-    test_2_callee (p, q);\n+    __analyzer_test_2_callee (p, q);\n }"}]}