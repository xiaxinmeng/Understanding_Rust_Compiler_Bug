{"sha": "2928cd7aace2187ca6d892872490e01f2a2bb17a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkyOGNkN2FhY2UyMTg3Y2E2ZDg5Mjg3MjQ5MGUwMWYyYTJiYjE3YQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-02-01T19:00:02Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-02-01T19:00:02Z"}, "message": "[multiple changes]\n\n2003-02-01  Richard Henderson  <rth@redhat.com>\n\n\t* optabs.c (expand_unop): Use word_mode for outmode of bit scaners.\n\t* libgcc2.c (__ffsdi2, __clzsi2, __clzdi2, __ctzsi2, __ctzdi2,\n\t__popcountsi2, __popcountdi2, __paritysi2 __paritydi2): Change\n\treturn type to Wtype.\n\n\t* libgcc-std.ver (GCC_3.4): Fix inheritance.\n\n\t* config/i386/i386.md (ffssi2): Use nonimmediate_operand for\n\texpander input constraint.\n\n2003-02-01  Falk Hueffner  <falk.hueffner@student.uni-tuebingen.de>\n\n        * optabs.h (optab_index): Add OTI_clz, OTI_ctz, OTI_popcount and\n        OTI_parity.\n        (clz_optab, ctz_optab, popcount_optab, parity_optab): New.\n        * optabs.c (widen_clz, expand_parity): New.\n        (expand_unop): Handle clz and parity.  Hardcode SImode as outmode\n        for libcalls to clz, ctz, popcount, and parity.\n        (init_optabs): Init clz_optab, ctz_optab, popcount_optab and\n        parity_optab, and set up libfunc handlers.\n        * libgcc2.c (__clzsi2, __clzdi2, __ctzsi2, __ctzdi2,\n        __popcountsi2, __popcountdi2, __paritysi2 __paritydi2,\n        __popcount_tab): New.\n        * libgcc2.h: Declare them.\n        * libgcc-std.ver (GCC_3.4): Add new functions from libgcc2.c.\n        * genopinit.c (optabs): Add clz_optab, ctz_optab, popcount_optab\n        and parity_optab.\n        * builtin-types.def (BT_FN_INT_LONG, BT_FN_INT_LONGLONG): New.\n        * builtins.def (BUILT_IN_CLZ, BUILT_IN_CTZ, BUILT_IN_POPCOUNT,\n        BUILT_IN_PARITY, BUILT_IN_FFSL, BUILT_IN_CLZL, BUILT_IN_CTZL,\n        BUILT_IN_POPCOUNTL, BUILT_IN_PARITYL, BUILT_IN_FFSLL,\n        BUILT_IN_CLZLL, BUILT_IN_CTZLL, BUILT_IN_POPCOUNTLL,\n        BUILT_IN_PARITYLL): New.\n        * builtins.c (expand_builtin_unop): Rename from expand_builtin_ffs\n        and add optab argument.\n        (expand_builtin): Expand BUILT_IN_{FFS,CLZ,POPCOUNT,PARITY}*.\n        * tree.def (CLZ_EXPR, CTZ_EXPR, POPCOUNT_EXPR, PARITY_EXPR): New.\n        * expr.c (expand_expr): Handle them.\n        * fold-const.c (tree_expr_nonnegative_p): Likewise.\n        * rtl.def (CLZ, CTZ, POPCOUNT, PARITY): New.\n        * reload1.c (eliminate_regs): Handle them.\n        (elimination_effects): Likewise.\n        * function.c (instantiate_virtual_regs_1): Likewise\n        * genattrtab.c (check_attr_value): Likewise.\n        * simplify-rtx.c (simplify_unary_operation): Likewise.\n        * c-common.c (c_common_truthvalue_conversion): Handle POPCOUNT_EXPR.\n        * combine.c (combine_simplify_rtx): Handle POPCOUNT and PARITY.\n        (nonzero_bits): Handle CLZ, CTZ, POPCOUNT and PARITY.\n        * config/alpha/alpha.md (clzdi2, ctzdi2, popcountdi2): New.\n        * config/arm/arm.c (arm_init_builtins): Rename __builtin_clz to\n        __builtin_arm_clz.\n        * Makefile.in (LIB2FUNCS_1, LIB2FUNCS_2): Move...\n        * mklibgcc.in (lib2funcs): ...here and merge.  Add new members.\n        * doc/extend.texi (Other Builtins): Add new builtins.\n        * doc/md.texi (Standard Names): Add new patterns.\n\nFrom-SVN: r62252", "tree": {"sha": "df0468b560ad2e3e7a8fb8def8c31b83ba736922", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df0468b560ad2e3e7a8fb8def8c31b83ba736922"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2928cd7aace2187ca6d892872490e01f2a2bb17a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2928cd7aace2187ca6d892872490e01f2a2bb17a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2928cd7aace2187ca6d892872490e01f2a2bb17a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2928cd7aace2187ca6d892872490e01f2a2bb17a/comments", "author": null, "committer": null, "parents": [{"sha": "112f7223d17a7e98e996af22e1b474855e7cae48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/112f7223d17a7e98e996af22e1b474855e7cae48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/112f7223d17a7e98e996af22e1b474855e7cae48"}], "stats": {"total": 1057, "additions": 1019, "deletions": 38}, "files": [{"sha": "a368069fd31b316f744c9d7ee719b15c91333ecd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -1,3 +1,61 @@\n+2003-02-01  Richard Henderson  <rth@redhat.com>\n+\n+\t* optabs.c (expand_unop): Use word_mode for outmode of bit scaners.\n+\t* libgcc2.c (__ffsdi2, __clzsi2, __clzdi2, __ctzsi2, __ctzdi2,\n+\t__popcountsi2, __popcountdi2, __paritysi2 __paritydi2): Change\n+\treturn type to Wtype.\n+\n+\t* libgcc-std.ver (GCC_3.4): Fix inheritance.\n+\n+\t* config/i386/i386.md (ffssi2): Use nonimmediate_operand for\n+\texpander input constraint.\n+\n+2003-02-01  Falk Hueffner  <falk.hueffner@student.uni-tuebingen.de>\n+\n+        * optabs.h (optab_index): Add OTI_clz, OTI_ctz, OTI_popcount and\n+        OTI_parity.\n+        (clz_optab, ctz_optab, popcount_optab, parity_optab): New.\n+        * optabs.c (widen_clz, expand_parity): New.\n+        (expand_unop): Handle clz and parity.  Hardcode SImode as outmode\n+        for libcalls to clz, ctz, popcount, and parity.\n+        (init_optabs): Init clz_optab, ctz_optab, popcount_optab and\n+        parity_optab, and set up libfunc handlers.\n+        * libgcc2.c (__clzsi2, __clzdi2, __ctzsi2, __ctzdi2,\n+        __popcountsi2, __popcountdi2, __paritysi2 __paritydi2,\n+        __popcount_tab): New.\n+        * libgcc2.h: Declare them.\n+        * libgcc-std.ver (GCC_3.4): Add new functions from libgcc2.c.\n+        * genopinit.c (optabs): Add clz_optab, ctz_optab, popcount_optab\n+        and parity_optab.\n+        * builtin-types.def (BT_FN_INT_LONG, BT_FN_INT_LONGLONG): New.\n+        * builtins.def (BUILT_IN_CLZ, BUILT_IN_CTZ, BUILT_IN_POPCOUNT,\n+        BUILT_IN_PARITY, BUILT_IN_FFSL, BUILT_IN_CLZL, BUILT_IN_CTZL,\n+        BUILT_IN_POPCOUNTL, BUILT_IN_PARITYL, BUILT_IN_FFSLL,\n+        BUILT_IN_CLZLL, BUILT_IN_CTZLL, BUILT_IN_POPCOUNTLL,\n+        BUILT_IN_PARITYLL): New.\n+        * builtins.c (expand_builtin_unop): Rename from expand_builtin_ffs\n+        and add optab argument.\n+        (expand_builtin): Expand BUILT_IN_{FFS,CLZ,POPCOUNT,PARITY}*.\n+        * tree.def (CLZ_EXPR, CTZ_EXPR, POPCOUNT_EXPR, PARITY_EXPR): New.\n+        * expr.c (expand_expr): Handle them.\n+        * fold-const.c (tree_expr_nonnegative_p): Likewise.\n+        * rtl.def (CLZ, CTZ, POPCOUNT, PARITY): New.\n+        * reload1.c (eliminate_regs): Handle them.\n+        (elimination_effects): Likewise.\n+        * function.c (instantiate_virtual_regs_1): Likewise\n+        * genattrtab.c (check_attr_value): Likewise.\n+        * simplify-rtx.c (simplify_unary_operation): Likewise.\n+        * c-common.c (c_common_truthvalue_conversion): Handle POPCOUNT_EXPR.\n+        * combine.c (combine_simplify_rtx): Handle POPCOUNT and PARITY.\n+        (nonzero_bits): Handle CLZ, CTZ, POPCOUNT and PARITY.\n+        * config/alpha/alpha.md (clzdi2, ctzdi2, popcountdi2): New.\n+        * config/arm/arm.c (arm_init_builtins): Rename __builtin_clz to\n+        __builtin_arm_clz.\n+        * Makefile.in (LIB2FUNCS_1, LIB2FUNCS_2): Move...\n+        * mklibgcc.in (lib2funcs): ...here and merge.  Add new members.\n+        * doc/extend.texi (Other Builtins): Add new builtins.\n+        * doc/md.texi (Standard Names): Add new patterns.\n+\n 2003-02-01  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* reload.c: Revert 2003-01-31 change."}, {"sha": "cc444045e1902e7b61228ea435a605e8d4d5bf44", "filename": "gcc/Makefile.in", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -811,16 +811,6 @@ STAGESTUFF = *$(objext) insn-flags.h insn-config.h insn-codes.h \\\n  *.[0-9][0-9].* *.[si] libcpp.a libbackend.a libgcc.mk \\\n  $(LANG_STAGESTUFF)\n \n-# Library members defined in libgcc2.c.\n-# Variable length limited to 255 charactes when passed to a shell script.\n-LIB2FUNCS_1 = _muldi3 _negdi2 _lshrdi3 _ashldi3 _ashrdi3 _ffsdi2 _clz \\\n-    _cmpdi2 _ucmpdi2 _floatdidf _floatdisf _fixunsdfsi _fixunssfsi \\\n-    _fixunsdfdi _fixdfdi _fixunssfdi _fixsfdi _fixxfdi _fixunsxfdi\n-\n-LIB2FUNCS_2 = _floatdixf _fixunsxfsi _fixtfdi _fixunstfdi _floatditf \\\n-    _clear_cache _trampoline __main _exit _absvsi2 _absvdi2 _addvsi3 \\\n-    _addvdi3 _subvsi3 _subvdi3 _mulvsi3 _mulvdi3 _negvsi2 _negvdi2 _ctors\n-\n # Defined in libgcc2.c, included only in the static library.\n LIB2FUNCS_ST = _eprintf __gcc_bcmp\n \n@@ -1051,8 +1041,6 @@ LIB2ADD_ST = $(LIB2FUNCS_STATIC_EXTRA)\n libgcc.mk: config.status Makefile mklibgcc $(LIB2ADD) $(LIB2ADD_ST) xgcc$(exeext) specs\n \tobjext='$(objext)' \\\n \tLIB1ASMFUNCS='$(LIB1ASMFUNCS)' \\\n-\tLIB2FUNCS_1='$(LIB2FUNCS_1)' \\\n-\tLIB2FUNCS_2='$(LIB2FUNCS_2)' \\\n \tLIB2FUNCS_ST='$(LIB2FUNCS_ST)' \\\n \tLIBGCOV='$(LIBGCOV)' \\\n \tLIB2ADD='$(LIB2ADD)' \\"}, {"sha": "b8b9b29929b4c270efd9f456aa2c8a84315a72d1", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -110,6 +110,8 @@ DEF_FUNCTION_TYPE_1 (BT_FN_LONG_DOUBLE_COMPLEX_LONG_DOUBLE,\n DEF_FUNCTION_TYPE_1 (BT_FN_PTR_UNSIGNED, BT_PTR, BT_UNSIGNED)\n DEF_FUNCTION_TYPE_1 (BT_FN_PTR_SIZE, BT_PTR, BT_SIZE)\n DEF_FUNCTION_TYPE_1 (BT_FN_INT_INT, BT_INT, BT_INT)\n+DEF_FUNCTION_TYPE_1 (BT_FN_INT_LONG, BT_INT, BT_LONG)\n+DEF_FUNCTION_TYPE_1 (BT_FN_INT_LONGLONG, BT_INT, BT_LONGLONG)\n DEF_FUNCTION_TYPE_1 (BT_FN_INT_PTR, BT_INT, BT_PTR)\n DEF_FUNCTION_TYPE_1 (BT_FN_VOID_PTR, BT_VOID, BT_PTR)\n DEF_FUNCTION_TYPE_1 (BT_FN_SIZE_CONST_STRING, BT_SIZE, BT_CONST_STRING)"}, {"sha": "47d93e21cee6460736e584852a250efbc820b951", "filename": "gcc/builtins.c", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -147,7 +147,7 @@ static rtx expand_builtin_strchr\tPARAMS ((tree, rtx,\n static rtx expand_builtin_strrchr\tPARAMS ((tree, rtx,\n \t\t\t\t\t\t enum machine_mode));\n static rtx expand_builtin_alloca\tPARAMS ((tree, rtx));\n-static rtx expand_builtin_ffs\t\tPARAMS ((tree, rtx, rtx));\n+static rtx expand_builtin_unop\t\tPARAMS ((tree, rtx, rtx, optab));\n static rtx expand_builtin_frame_address\tPARAMS ((tree));\n static rtx expand_builtin_fputs\t\tPARAMS ((tree, int, int));\n static tree stabilize_va_list\t\tPARAMS ((tree, int));\n@@ -3581,26 +3581,27 @@ expand_builtin_alloca (arglist, target)\n   return result;\n }\n \n-/* Expand a call to the ffs builtin.  The arguments are in ARGLIST.\n+/* Expand a call to a unary builtin.  The arguments are in ARGLIST.\n    Return 0 if a normal call should be emitted rather than expanding the\n    function in-line.  If convenient, the result should be placed in TARGET.\n    SUBTARGET may be used as the target for computing one of EXP's operands.  */\n \n static rtx\n-expand_builtin_ffs (arglist, target, subtarget)\n+expand_builtin_unop (arglist, target, subtarget, op_optab)\n      tree arglist;\n      rtx target, subtarget;\n+     optab op_optab;\n {\n   rtx op0;\n   if (!validate_arglist (arglist, INTEGER_TYPE, VOID_TYPE))\n     return 0;\n \n   /* Compute the argument.  */\n   op0 = expand_expr (TREE_VALUE (arglist), subtarget, VOIDmode, 0);\n-  /* Compute ffs, into TARGET if possible.\n+  /* Compute op, into TARGET if possible.\n      Set TARGET to wherever the result comes back.  */\n   target = expand_unop (TYPE_MODE (TREE_TYPE (TREE_VALUE (arglist))),\n-\t\t\tffs_optab, op0, target, 1);\n+\t\t\top_optab, op0, target, 1);\n   if (target == 0)\n     abort ();\n   return target;\n@@ -4099,7 +4100,42 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n       break;\n \n     case BUILT_IN_FFS:\n-      target = expand_builtin_ffs (arglist, target, subtarget);\n+    case BUILT_IN_FFSL:\n+    case BUILT_IN_FFSLL:\n+      target = expand_builtin_unop (arglist, target, subtarget, ffs_optab);\n+      if (target)\n+\treturn target;\n+      break;\n+\n+    case BUILT_IN_CLZ:\n+    case BUILT_IN_CLZL:\n+    case BUILT_IN_CLZLL:\n+      target = expand_builtin_unop (arglist, target, subtarget, clz_optab);\n+      if (target)\n+\treturn target;\n+      break;\n+\n+    case BUILT_IN_CTZ:\n+    case BUILT_IN_CTZL:\n+    case BUILT_IN_CTZLL:\n+      target = expand_builtin_unop (arglist, target, subtarget, ctz_optab);\n+      if (target)\n+\treturn target;\n+      break;\n+\n+    case BUILT_IN_POPCOUNT:\n+    case BUILT_IN_POPCOUNTL:\n+    case BUILT_IN_POPCOUNTLL:\n+      target = expand_builtin_unop (arglist, target, subtarget,\n+\t\t\t\t    popcount_optab);\n+      if (target)\n+\treturn target;\n+      break;\n+\n+    case BUILT_IN_PARITY:\n+    case BUILT_IN_PARITYL:\n+    case BUILT_IN_PARITYLL:\n+      target = expand_builtin_unop (arglist, target, subtarget, parity_optab);\n       if (target)\n \treturn target;\n       break;"}, {"sha": "60a962a9abd6c9e73facdbc850c0acbaae3f3e29", "filename": "gcc/builtins.def", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -322,6 +322,65 @@ DEF_EXT_LIB_BUILTIN(BUILT_IN_FFS,\n \t\t    \"__builtin_ffs\",\n \t\t    BT_FN_INT_INT,\n \t\t    ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN(BUILT_IN_CLZ,\n+\t\t    \"__builtin_clz\",\n+\t\t    BT_FN_INT_INT,\n+\t\t    ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN(BUILT_IN_CTZ,\n+\t\t    \"__builtin_ctz\",\n+\t\t    BT_FN_INT_INT,\n+\t\t    ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN(BUILT_IN_POPCOUNT,\n+\t\t    \"__builtin_popcount\",\n+\t\t    BT_FN_INT_INT,\n+\t\t    ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN(BUILT_IN_PARITY,\n+\t\t    \"__builtin_parity\",\n+\t\t    BT_FN_INT_INT,\n+\t\t    ATTR_CONST_NOTHROW_LIST)\n+\n+DEF_GCC_BUILTIN(BUILT_IN_FFSL,\n+\t\t    \"__builtin_ffsl\",\n+\t\t    BT_FN_INT_LONG,\n+\t\t    ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN(BUILT_IN_CLZL,\n+\t\t    \"__builtin_clzl\",\n+\t\t    BT_FN_INT_LONG,\n+\t\t    ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN(BUILT_IN_CTZL,\n+\t\t    \"__builtin_ctzl\",\n+\t\t    BT_FN_INT_LONG,\n+\t\t    ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN(BUILT_IN_POPCOUNTL,\n+\t\t    \"__builtin_popcountl\",\n+\t\t    BT_FN_INT_LONG,\n+\t\t    ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN(BUILT_IN_PARITYL,\n+\t\t    \"__builtin_parityl\",\n+\t\t    BT_FN_INT_LONG,\n+\t\t    ATTR_CONST_NOTHROW_LIST)\n+\n+DEF_EXT_LIB_BUILTIN(BUILT_IN_FFSLL,\n+\t\t    \"__builtin_ffsll\",\n+\t\t    BT_FN_INT_LONGLONG,\n+\t\t    ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN(BUILT_IN_CLZLL,\n+\t\t    \"__builtin_clzll\",\n+\t\t    BT_FN_INT_LONGLONG,\n+\t\t    ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN(BUILT_IN_CTZLL,\n+\t\t    \"__builtin_ctzll\",\n+\t\t    BT_FN_INT_LONGLONG,\n+\t\t    ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN(BUILT_IN_POPCOUNTLL,\n+\t\t    \"__builtin_popcountll\",\n+\t\t    BT_FN_INT_LONGLONG,\n+\t\t    ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN(BUILT_IN_PARITYLL,\n+\t\t    \"__builtin_parityll\",\n+\t\t    BT_FN_INT_LONGLONG,\n+\t\t    ATTR_CONST_NOTHROW_LIST)\n+\n DEF_EXT_LIB_BUILTIN(BUILT_IN_INDEX,\n \t\t    \"__builtin_index\",\n \t\t    BT_FN_STRING_CONST_STRING_INT,"}, {"sha": "c78692fd9591598edc39135b01c2948a0484c819", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -2817,6 +2817,7 @@ c_common_truthvalue_conversion (expr)\n     case ABS_EXPR:\n     case FLOAT_EXPR:\n     case FFS_EXPR:\n+    case POPCOUNT_EXPR:\n       /* These don't change whether an object is nonzero or zero.  */\n       return c_common_truthvalue_conversion (TREE_OPERAND (expr, 0));\n "}, {"sha": "aeb5c2f1b98d1695f8351508ffd1447c79dac83d", "filename": "gcc/combine.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -4634,6 +4634,13 @@ combine_simplify_rtx (x, op0_mode, last, in_dest)\n \tSUBST (XEXP (x, 0), XEXP (XEXP (x, 0), 0));\n       break;\n \n+    case POPCOUNT:\n+    case PARITY:\n+      /* (pop* (zero_extend <X>)) = (pop* <X>) */\n+      if (GET_CODE (XEXP (x, 0)) == ZERO_EXTEND)\n+\tSUBST (XEXP (x, 0), XEXP (XEXP (x, 0), 0));\n+      break;\n+\n     case FLOAT:\n       /* (float (sign_extend <X>)) = (float <X>).  */\n       if (GET_CODE (XEXP (x, 0)) == SIGN_EXTEND)\n@@ -8540,10 +8547,17 @@ nonzero_bits (x, mode)\n       break;\n \n     case FFS:\n+    case CLZ:\n+    case CTZ:\n+    case POPCOUNT:\n       /* This is at most the number of bits in the mode.  */\n       nonzero = ((HOST_WIDE_INT) 1 << (floor_log2 (mode_width) + 1)) - 1;\n       break;\n \n+    case PARITY:\n+      nonzero = 1;\n+      break;\n+\n     case IF_THEN_ELSE:\n       nonzero &= (nonzero_bits (XEXP (x, 1), mode)\n \t\t  | nonzero_bits (XEXP (x, 2), mode));"}, {"sha": "2d5285a688b76c987202b58348abe91bc76dbe66", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -1323,7 +1323,7 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n   \"eqv %r1,%2,%0\"\n   [(set_attr \"type\" \"ilog\")])\n \f\n-;; Handle the FFS insn iff we support CIX.\n+;; Handle FFS and related insns iff we support CIX.\n \n (define_expand \"ffsdi2\"\n   [(set (match_dup 2)\n@@ -1347,6 +1347,27 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n   ; EV6 calls all mvi and cttz/ctlz/popc class imisc, so just\n   ; reuse the existing type name.\n   [(set_attr \"type\" \"mvi\")])\n+\n+(define_insn \"clzdi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(clz:DI (match_operand:DI 1 \"register_operand\" \"r\")))]\n+  \"TARGET_CIX\"\n+  \"ctlz %1,%0\"\n+  [(set_attr \"type\" \"mvi\")])\n+\n+(define_insn \"ctzdi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(ctz:DI (match_operand:DI 1 \"register_operand\" \"r\")))]\n+  \"TARGET_CIX\"\n+  \"cttz %1,%0\"\n+  [(set_attr \"type\" \"mvi\")])\n+\n+(define_insn \"popcountdi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(popcount:DI (match_operand:DI 1 \"register_operand\" \"r\")))]\n+  \"TARGET_CIX\"\n+  \"ctpop %1,%0\"\n+  [(set_attr \"type\" \"mvi\")])\n \f\n ;; Next come the shifts and the various extract and insert operations.\n "}, {"sha": "fe306fd63910f9979ea453b1b320e4599d753aa6", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -10004,7 +10004,7 @@ arm_init_builtins ()\n \n   /* Initialize arm V5 builtins.  */\n   if (arm_arch5)\n-    def_builtin (\"__builtin_clz\", int_ftype_int, ARM_BUILTIN_CLZ);\n+    def_builtin (\"__builtin_arm_clz\", int_ftype_int, ARM_BUILTIN_CLZ);\n }\n \n /* Expand an expression EXP that calls a built-in function,"}, {"sha": "a888bc2e16841fb043f159c014385c565b0bab07", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -14109,7 +14109,7 @@\n \f\n (define_expand \"ffssi2\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\") \n-\t(ffs:SI (match_operand:SI 1 \"general_operand\" \"\")))]\n+\t(ffs:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))]\n   \"\"\n {\n   rtx out = gen_reg_rtx (SImode), tmp = gen_reg_rtx (SImode);"}, {"sha": "27a2e1ffb616a7ada7969fafb967b6e38c7aa130", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -4986,6 +4986,81 @@ Similar to @code{__builtin_nans}, except the return type is @code{float}.\n Similar to @code{__builtin_nans}, except the return type is @code{long double}.\n @end deftypefn\n \n+@deftypefn {Built-in Function} int __builtin_ffs (unsigned int x)\n+Returns one plus the index of the least significant 1-bit of @var{x}, or\n+if @var{x} is zero, returns zero.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} int __builtin_clz (unsigned int x)\n+Returns the number of leading 0-bits in @var{x}, starting at the most\n+significant bit position.  If @var{x} is 0, the result is undefined.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} int __builtin_ctz (unsigned int x)\n+Returns the number of trailing 0-bits in @var{x}, starting at the least\n+significant bit position.  If @var{x} is 0, the result is undefined.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} int __builtin_popcount (unsigned int x)\n+Returns the number of 1-bits in @var{x}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} int __builtin_parity (unsigned int x)\n+Returns the parity of @var{x}, i.@:e. the number of 1-bits in @var{x}\n+modulo 2.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} int __builtin_ffsl (unsigned long)\n+Similar to @code{__builtin_ffs}, except the argument type is\n+@code{unsigned long}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} int __builtin_clzl (unsigned long)\n+Similar to @code{__builtin_clz}, except the argument type is\n+@code{unsigned long}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} int __builtin_ctzl (unsigned long)\n+Similar to @code{__builtin_ctz}, except the argument type is\n+@code{unsigned long}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} int __builtin_popcountl (unsigned long)\n+Similar to @code{__builtin_popcount}, except the argument type is\n+@code{unsigned long}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} int __builtin_parityl (unsigned long)\n+Similar to @code{__builtin_parity}, except the argument type is\n+@code{unsigned long}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} int __builtin_ffsll (unsigned long long)\n+Similar to @code{__builtin_ffs}, except the argument type is\n+@code{unsigned long long}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} int __builtin_clzll (unsigned long long)\n+Similar to @code{__builtin_clz}, except the argument type is\n+@code{unsigned long long}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} int __builtin_ctzll (unsigned long long)\n+Similar to @code{__builtin_ctz}, except the argument type is\n+@code{unsigned long long}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} int __builtin_popcountll (unsigned long long)\n+Similar to @code{__builtin_popcount}, except the argument type is\n+@code{unsigned long long}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} int __builtin_parityll (unsigned long long)\n+Similar to @code{__builtin_parity}, except the argument type is\n+@code{unsigned long long}.\n+@end deftypefn\n+\n+\n @node Target Builtins\n @section Built-in Functions Specific to Particular Target Machines\n "}, {"sha": "ce3eb14aeb75d4ececd81b066ece85c61d0b93cc", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -2663,6 +2663,36 @@ generating the instruction.\n The @code{ffs} built-in function of C always uses the mode which\n corresponds to the C data type @code{int}.\n \n+@cindex @code{clz@var{m}2} instruction pattern\n+@item @samp{clz@var{m}2}\n+Store into operand 0 the number of leading 0-bits in @var{x}, starting\n+at the most significant bit position.  If @var{x} is 0, the result is\n+undefined.  @var{m} is the mode of operand 0; operand 1's mode is\n+specified by the instruction pattern, and the compiler will convert the\n+operand to that mode before generating the instruction.\n+\n+@cindex @code{ctz@var{m}2} instruction pattern\n+@item @samp{ctz@var{m}2}\n+Store into operand 0 the number of trailing 0-bits in @var{x}, starting\n+at the least significant bit position.  If @var{x} is 0, the result is\n+undefined.  @var{m} is the mode of operand 0; operand 1's mode is\n+specified by the instruction pattern, and the compiler will convert the\n+operand to that mode before generating the instruction.\n+\n+@cindex @code{popcount@var{m}2} instruction pattern\n+@item @samp{popcount@var{m}2}\n+Store into operand 0 the number of 1-bits in @var{x}.  @var{m} is the\n+mode of operand 0; operand 1's mode is specified by the instruction\n+pattern, and the compiler will convert the operand to that mode before\n+generating the instruction.\n+\n+@cindex @code{parity@var{m}2} instruction pattern\n+@item @samp{parity@var{m}2}\n+Store into operand 0 the parity of @var{x}, i.@:e. the number of 1-bits\n+in @var{x} modulo 2.  @var{m} is the mode of operand 0; operand 1's mode\n+is specified by the instruction pattern, and the compiler will convert\n+the operand to that mode before generating the instruction.\n+\n @cindex @code{one_cmpl@var{m}2} instruction pattern\n @item @samp{one_cmpl@var{m}2}\n Store the bitwise-complement of operand 1 into operand 0."}, {"sha": "16985176ed228c61fe3822f7c474ee081e0ae852", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -1845,6 +1845,33 @@ Represents one plus the index of the least significant 1-bit in\n zero if @var{x} is zero.)  The mode of @var{x} need not be @var{m};\n depending on the target machine, various mode combinations may be\n valid.\n+\n+@findex clz\n+@item (clz:@var{m} @var{x})\n+Represents the number of leading 0-bits in @var{x}, represented as an\n+integer of mode @var{m}, starting at the most significant bit position.\n+If @var{x} is zero, the value is undefined.  Note that this is one of\n+the few expressions that is not invariant under widening.  The mode of\n+@var{x} will usually be an integer mode.\n+\n+@findex ctz\n+@item (ctz:@var{m} @var{x})\n+Represents the number of trailing 0-bits in @var{x}, represented as an\n+integer of mode @var{m}, starting at the least significant bit position.\n+If @var{x} is zero, the value is undefined.  Except for this case,\n+@code{ctz(x)} is equivalent to @code{ffs(@var{x}) - 1}.  The mode of\n+@var{x} will usually be an integer mode.\n+\n+@findex popcount\n+@item (popcount:@var{m} @var{x})\n+Represents the number of 1-bits in @var{x}, represented as an integer of\n+mode @var{m}.  The mode of @var{x} will usually be an integer mode.\n+\n+@findex parity\n+@item (parity:@var{m} @var{x})\n+Represents the number of 1-bits modulo 2 in @var{x}, represented as an\n+integer of mode @var{m}.  The mode of @var{x} will usually be an integer\n+mode.\n @end table\n \n @node Comparisons"}, {"sha": "601c5e991ab34f8bb1b21a8f89660b4fb1889c3b", "filename": "gcc/expr.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -8353,6 +8353,34 @@ expand_expr (exp, target, tmode, modifier)\n \tabort ();\n       return temp;\n \n+    case CLZ_EXPR:\n+      op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget, VOIDmode, 0);\n+      temp = expand_unop (mode, clz_optab, op0, target, 1);\n+      if (temp == 0)\n+\tabort ();\n+      return temp;\n+\n+    case CTZ_EXPR:\n+      op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget, VOIDmode, 0);\n+      temp = expand_unop (mode, ctz_optab, op0, target, 1);\n+      if (temp == 0)\n+\tabort ();\n+      return temp;\n+\n+    case POPCOUNT_EXPR:\n+      op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget, VOIDmode, 0);\n+      temp = expand_unop (mode, popcount_optab, op0, target, 1);\n+      if (temp == 0)\n+\tabort ();\n+      return temp;\n+\n+    case PARITY_EXPR:\n+      op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget, VOIDmode, 0);\n+      temp = expand_unop (mode, parity_optab, op0, target, 1);\n+      if (temp == 0)\n+\tabort ();\n+      return temp;\n+\n       /* ??? Can optimize bitwise operations with one arg constant.\n \t Can optimize (a bitwise1 n) bitwise2 (a bitwise3 b)\n \t and (a bitwise1 b) bitwise2 b (etc)"}, {"sha": "55f4ce46c41f527334ef3c2350ddea6e68037908", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -7436,6 +7436,10 @@ tree_expr_nonnegative_p (t)\n     {\n     case ABS_EXPR:\n     case FFS_EXPR:\n+    case CLZ_EXPR:\n+    case CTZ_EXPR:\n+    case POPCOUNT_EXPR:\n+    case PARITY_EXPR:\n       return 1;\n     case INTEGER_CST:\n       return tree_int_cst_sgn (t) >= 0;"}, {"sha": "cb5cf64f4bee26b5e0c9427e8b6fbfc4755aa038", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -4004,6 +4004,8 @@ instantiate_virtual_regs_1 (loc, object, extra_insns)\n     case ABS:\n     case SQRT:\n     case FFS:\n+    case CLZ:          case CTZ:\n+    case POPCOUNT:     case PARITY:\n       /* These case either have just one operand or we know that we need not\n \t check the rest of the operands.  */\n       loc = &XEXP (x, 0);"}, {"sha": "0270945abff034e86a1fe737825f7920b821e920", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -1161,6 +1161,10 @@ check_attr_value (exp, attr)\n       break;\n \n     case FFS:\n+    case CLZ:\n+    case CTZ:\n+    case POPCOUNT:\n+    case PARITY:\n       XEXP (exp, 0) = check_attr_value (XEXP (exp, 0), attr);\n       break;\n "}, {"sha": "1a0070df064b4b9598187a6d5481452b50e5e536", "filename": "gcc/genopinit.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -126,6 +126,10 @@ static const char * const optabs[] =\n   \"strlen_optab->handlers[$A].insn_code = CODE_FOR_$(strlen$a$)\",\n   \"one_cmpl_optab->handlers[$A].insn_code = CODE_FOR_$(one_cmpl$a2$)\",\n   \"ffs_optab->handlers[$A].insn_code = CODE_FOR_$(ffs$a2$)\",\n+  \"clz_optab->handlers[$A].insn_code = CODE_FOR_$(clz$a2$)\",\n+  \"ctz_optab->handlers[$A].insn_code = CODE_FOR_$(ctz$a2$)\",\n+  \"popcount_optab->handlers[$A].insn_code = CODE_FOR_$(popcount$a2$)\",\n+  \"parity_optab->handlers[$A].insn_code = CODE_FOR_$(parity$a2$)\",\n   \"mov_optab->handlers[$A].insn_code = CODE_FOR_$(mov$a$)\",\n   \"movstrict_optab->handlers[$A].insn_code = CODE_FOR_$(movstrict$a$)\",\n   \"cmp_optab->handlers[$A].insn_code = CODE_FOR_$(cmp$a$)\","}, {"sha": "360e528ba0139265479673063b8f715935db8c97", "filename": "gcc/libgcc-std.ver", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Flibgcc-std.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Flibgcc-std.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc-std.ver?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -180,3 +180,16 @@ GCC_3.0 {\n GCC_3.3 {\n   _Unwind_FindEnclosingFunction\n }\n+\n+%inherit GCC_3.4 GCC_3.3\n+GCC_3.4 {\n+  # bit scanning and counting built-ins\n+  __clzsi2\n+  __clzdi2\n+  __ctzsi2\n+  __ctzdi2\n+  __popcountsi2\n+  __popcountdi2\n+  __paritysi2  \n+  __paritydi2  \n+}"}, {"sha": "5de1edecd8cc97b2818d0c80237d8c621ec5bbcc", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 151, "deletions": 1, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -331,7 +331,7 @@ __ashrdi3 (DWtype u, word_type b)\n #endif\n \f\n #ifdef L_ffsdi2\n-DWtype\n+Wtype\n __ffsdi2 (DWtype u)\n {\n   DWunion uu;\n@@ -495,6 +495,11 @@ __udiv_w_sdiv (UWtype *rp __attribute__ ((__unused__)),\n #define L_udivmoddi4\n #endif\n \n+#if (defined (L_clzsi2) || defined (L_clzdi2) || \\\n+     defined (L_ctzsi2) || defined (L_ctzdi2))\n+extern const UQItype __clz_tab[];\n+#endif\n+\n #ifdef L_clz\n const UQItype __clz_tab[] =\n {\n@@ -508,6 +513,151 @@ const UQItype __clz_tab[] =\n   8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,\n };\n #endif\n+\f\n+#ifdef L_clzsi2\n+Wtype\n+__clzsi2 (USItype x)\n+{\n+  Wtype a;\n+\n+  /* Note that we've already verified that BITS_PER_UNIT == 8, and\n+     thus SItype is 32 bits wide.  */\n+  if (x < (1 << 2 * 8))\n+    if (x < (1 << 1 * 8))\n+      a = 0 * 8;\n+    else\n+      a = 1 * 8;\n+  else\n+    if (x < (1 << 3 * 8))\n+      a = 2 * 8;\n+    else\n+      a = 3 * 8;\n+\n+  return 32 - (__clz_tab[x >> a] + a);\n+}\n+#endif\n+\f\n+#ifdef L_clzdi2\n+Wtype\n+__clzdi2 (UDItype x)\n+{\n+  Wtype a;\n+\n+  /* Note that we've already verified that BITS_PER_UNIT == 8, and\n+     thus DItype is 64 bits wide.  */\n+  for (a = 64 - 8; a > 0; a -= 8)\n+    if (((x >> a) & 0xff) != 0)\n+      break;\n+\n+  return 64 - (__clz_tab[x >> a] + a);\n+}\n+#endif\n+\f\n+#ifdef L_ctzsi2\n+Wtype\n+__ctzsi2 (USItype x)\n+{\n+  Wtype a;\n+\n+  x = x & -x;\n+\n+  /* Note that we've already verified that BITS_PER_UNIT == 8, and\n+     thus SItype is 32 bits wide.  */\n+  if (x < (1 << 2 * 8))\n+    if (x < (1 << 1 * 8))\n+      a = 0 * 8;\n+    else\n+      a = 1 * 8;\n+  else\n+    if (x < (1 << 3 * 8))\n+      a = 2 * 8;\n+    else\n+      a = 3 * 8;\n+\n+  return __clz_tab[x >> a] + a - 1;\n+}\n+#endif\n+\f\n+#ifdef L_ctzdi2\n+Wtype\n+__ctzdi2 (UDItype x)\n+{\n+  Wtype a;\n+\n+  x = x & -x;\n+  for (a = 64 - 8; a > 0; a -= 8)\n+    if (((x >> a) & 0xff) != 0)\n+      break;\n+\n+  return __clz_tab[x >> a] + a - 1;\n+}\n+#endif\n+\n+#if (defined (L_popcountsi2) || defined (L_popcountdi2) || \\\n+     defined (L_paritysi2) || defined (L_paritydi2))\n+extern const UQItype __popcount_tab[];\n+#endif\n+\n+#ifdef L_popcount_tab\n+const UQItype __popcount_tab[] =\n+{\n+    0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,\n+    1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,\n+    1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,\n+    2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,\n+    1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,\n+    2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,\n+    2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,\n+    3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,4,5,5,6,5,6,6,7,5,6,6,7,6,7,7,8,\n+};\n+#endif\n+\f\n+#ifdef L_popcountsi2\n+Wtype\n+__popcountsi2 (USItype x)\n+{\n+  return __popcount_tab[(x >>  0) & 0xff]\n+       + __popcount_tab[(x >>  8) & 0xff]\n+       + __popcount_tab[(x >> 16) & 0xff]\n+       + __popcount_tab[(x >> 24) & 0xff];\n+}\n+#endif\n+\f\n+#ifdef L_popcountdi2\n+Wtype\n+__popcountdi2 (UDItype x)\n+{\n+  return __popcount_tab[(x >>  0) & 0xff]\n+       + __popcount_tab[(x >>  8) & 0xff]\n+       + __popcount_tab[(x >> 16) & 0xff]\n+       + __popcount_tab[(x >> 24) & 0xff]\n+       + __popcount_tab[(x >> 32) & 0xff]\n+       + __popcount_tab[(x >> 40) & 0xff]\n+       + __popcount_tab[(x >> 48) & 0xff]\n+       + __popcount_tab[(x >> 56) & 0xff];\n+}\n+#endif\n+\f\n+#ifdef L_paritysi2\n+Wtype\n+__paritysi2 (USItype x)\n+{\n+  x ^= x >> 16;\n+  x ^= x >> 8;\n+  return __popcount_tab[x & 0xff] & 1;\n+}\n+#endif\n+\f\n+#ifdef L_paritydi2\n+Wtype\n+__paritydi2 (UDItype x)\n+{\n+  Wtype nx = x ^ (x >> 32);\n+  nx ^= nx >> 16;\n+  nx ^= nx >> 8;\n+  return __popcount_tab[nx & 0xff] & 1;\n+}\n+#endif\n \n #ifdef L_udivmoddi4\n "}, {"sha": "c71fcce7824aabed5a8d4691d37a2d25edc8603e", "filename": "gcc/libgcc2.h", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Flibgcc2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Flibgcc2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.h?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -223,7 +223,32 @@ extern DWtype __negdi2 (DWtype);\n extern DWtype __lshrdi3 (DWtype, word_type);\n extern DWtype __ashldi3 (DWtype, word_type);\n extern DWtype __ashrdi3 (DWtype, word_type);\n-extern DWtype __ffsdi2 (DWtype);\n+extern Wtype __ffsdi2 (DWtype);\n+\n+/* ??? Ought to get these named properly for DSPs.  */\n+#if BITS_PER_UNIT == 8 && MIN_UNITS_PER_WORD >= 4\n+extern Wtype __clzsi2 (USItype);\n+extern Wtype __ctzsi2 (USItype);\n+extern Wtype __popcountsi2 (USItype x);\n+extern Wtype __paritysi2 (USItype x);\n+#else\n+#undef L_clzsi2\n+#undef L_ctzsi2\n+#undef L_popcountsi2\n+#undef L_paritysi2\n+#endif\n+\n+#if BITS_PER_UNIT == 8 && MIN_UNITS_PER_WORD >= 4 && LONG_LONG_TYPE_SIZE > 32\n+extern Wtype __clzdi2 (UDItype);\n+extern Wtype __ctzdi2 (UDItype);\n+extern Wtype __popcountdi2 (UDItype x);\n+extern Wtype __paritydi2 (UDItype x);\n+#else\n+#undef L_clzdi2\n+#undef L_ctzdi2\n+#undef L_popcountdi2\n+#undef L_paritydi2\n+#endif\n \n /* __udiv_w_sdiv is static inline when building other libgcc2 portions.  */\n #if (!defined(L_udivdi3) && !defined(L_divdi3) && \\"}, {"sha": "74f72035be2b1525640487409583a56db5d9d477", "filename": "gcc/mklibgcc.in", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fmklibgcc.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fmklibgcc.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmklibgcc.in?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -9,8 +9,6 @@\n #\n # objext\n # LIB1ASMFUNCS\n-# LIB2FUNCS_1\n-# LIB2FUNCS_2\n # LIB2FUNCS_ST\n # LIBGCOV\n # LIB2ADD\n@@ -45,6 +43,16 @@ echo\n echo 'force:'\n echo\n \n+# Library members defined in libgcc2.c.\n+lib2funcs='_muldi3 _negdi2 _lshrdi3 _ashldi3 _ashrdi3 _ffsdi2 _clz\n+\t_cmpdi2 _ucmpdi2 _floatdidf _floatdisf _fixunsdfsi _fixunssfsi\n+\t_fixunsdfdi _fixdfdi _fixunssfdi _fixsfdi _fixxfdi _fixunsxfdi\n+\t_floatdixf _fixunsxfsi _fixtfdi _fixunstfdi _floatditf _clear_cache\n+\t_trampoline __main _exit _absvsi2 _absvdi2 _addvsi3 _addvdi3\n+\t_subvsi3 _subvdi3 _mulvsi3 _mulvdi3 _negvsi2 _negvdi2 _ctors\n+\t_clzsi2 _clzdi2 _ctzsi2 _ctzdi2 _popcount_tab _popcountsi2\n+\t_popcountdi2 _paritysi2 _paritydi2'\n+\n # Disable SHLIB_LINK if shared libgcc not enabled.\n if [ \"@enable_shared@\" = \"no\" ]; then\n   SHLIB_LINK=\"\"\n@@ -88,14 +96,11 @@ for name in $LIB1ASMFUNCS; do\n     echo \"\t$gcc_compile\" $flags -DL$name -xassembler-with-cpp \\\n \t  -c '$(srcdir)/config/$(LIB1ASMSRC)' -o $out\n \n-    # Remove any objects from LIB2FUNCS and LIB2_DIVMOD_FUNCS that are\n+    # Remove any objects from lib2funcs and LIB2_DIVMOD_FUNCS that are\n     # defined as optimized assembly code in LIB1ASMFUNCS.\n-    LIB2FUNCS_1=`echo $LIB2FUNCS_1 | sed -e 's/^'$name' //' \\\n-\t\t\t\t         -e 's/ '$name' / /' \\\n-\t\t\t\t         -e 's/ '$name'$//'`\n-    LIB2FUNCS_2=`echo $LIB2FUNCS_2 | sed -e 's/^'$name' //' \\\n-\t\t\t\t         -e 's/ '$name' / /' \\\n-\t\t\t\t         -e 's/ '$name'$//'`\n+    lib2funcs=`echo $lib2funcs | sed -e 's/^'$name' //' \\\n+\t\t\t\t     -e 's/ '$name' / /' \\\n+\t\t\t\t     -e 's/ '$name'$//'`\n     LIB2_DIVMOD_FUNCS=`echo $LIB2_DIVMOD_FUNCS | sed -e 's/^'$name' //' \\\n \t\t\t\t                     -e 's/ '$name' / /' \\\n \t\t\t\t                     -e 's/ '$name'$//'`\n@@ -111,7 +116,7 @@ libgcc2_objs=\"\"\n libgcc2_st_objs=\"\"\n libgcc2_eh_objs=\"\"\n \n-for name in $LIB2FUNCS_1 $LIB2FUNCS_2; do\n+for name in $lib2funcs; do\n   for ml in $MULTILIBS; do\n     dir=`echo ${ml} | sed -e 's/;.*$//' -e 's/=/$(EQ)/g'`\n     flags=`echo ${ml} | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`;"}, {"sha": "2b08f8efa57399c96d65ca32b35530e3d0d3ac70", "filename": "gcc/optabs.c", "status": "modified", "additions": 133, "deletions": 2, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -126,6 +126,8 @@ static rtx expand_vector_binop PARAMS ((enum machine_mode, optab,\n \t\t\t\t\tenum optab_methods));\n static rtx expand_vector_unop PARAMS ((enum machine_mode, optab, rtx, rtx,\n \t\t\t\t       int));\n+static rtx widen_clz PARAMS ((enum machine_mode, rtx, rtx));\n+static rtx expand_parity PARAMS ((enum machine_mode, rtx, rtx));\n \f\n /* Add a REG_EQUAL note to the last insn in INSNS.  TARGET is being set to\n    the result of operation CODE applied to OP0 (and OP1 if it is a binary\n@@ -2325,6 +2327,89 @@ expand_simple_unop (mode, code, op0, target, unsignedp)\n   return expand_unop (mode, unop, op0, target, unsignedp);\n }\n \n+/* Try calculating\n+\t(clz:narrow x)\n+   as\n+\t(clz:wide (zero_extend:wide x)) - ((width wide) - (width narrow)).  */\n+static rtx\n+widen_clz (mode, op0, target)\n+     enum machine_mode mode;\n+     rtx op0;\n+     rtx target;\n+{\n+  enum mode_class class = GET_MODE_CLASS (mode);\n+  if (class == MODE_INT || class == MODE_FLOAT || class == MODE_COMPLEX_FLOAT)\n+    {\n+      enum machine_mode wider_mode;\n+      for (wider_mode = GET_MODE_WIDER_MODE (mode); wider_mode != VOIDmode;\n+\t   wider_mode = GET_MODE_WIDER_MODE (wider_mode))\n+\t{\n+\t  if (clz_optab->handlers[(int) wider_mode].insn_code\n+\t      != CODE_FOR_nothing)\n+\t    {\n+\t      rtx xop0, temp, last;\n+\n+\t      last = get_last_insn ();\n+\n+\t      if (target == 0)\n+\t\ttarget = gen_reg_rtx (mode);\n+\t      xop0 = widen_operand (op0, wider_mode, mode, true, false);\n+\t      temp = expand_unop (wider_mode, clz_optab, xop0, NULL_RTX, true);\n+\t      if (temp != 0)\n+\t\ttemp = expand_binop (wider_mode, sub_optab, temp,\n+\t\t\t\t     GEN_INT (GET_MODE_BITSIZE (wider_mode)\n+\t\t\t\t\t      - GET_MODE_BITSIZE (mode)),\n+\t\t\t\t     target, true, OPTAB_DIRECT);\n+\t      if (temp == 0)\n+\t\tdelete_insns_since (last);\n+\n+\t      return temp;\n+\t    }\n+\t}\n+    }\n+  return 0;\n+}\n+\n+/* Try calculating (parity x) as (and (popcount x) 1), where\n+   popcount can also be done in a wider mode.  */\n+static rtx\n+expand_parity (mode, op0, target)\n+     enum machine_mode mode;\n+     rtx op0;\n+     rtx target;\n+{\n+  enum mode_class class = GET_MODE_CLASS (mode);\n+  if (class == MODE_INT || class == MODE_FLOAT || class == MODE_COMPLEX_FLOAT)\n+    {\n+      enum machine_mode wider_mode;\n+      for (wider_mode = mode; wider_mode != VOIDmode;\n+\t   wider_mode = GET_MODE_WIDER_MODE (wider_mode))\n+\t{\n+\t  if (popcount_optab->handlers[(int) wider_mode].insn_code\n+\t      != CODE_FOR_nothing)\n+\t    {\n+\t      rtx xop0, temp, last;\n+\n+\t      last = get_last_insn ();\n+\n+\t      if (target == 0)\n+\t\ttarget = gen_reg_rtx (mode);\n+\t      xop0 = widen_operand (op0, wider_mode, mode, true, false);\n+\t      temp = expand_unop (wider_mode, popcount_optab, xop0, NULL_RTX,\n+\t\t\t\t  true);\n+\t      if (temp != 0)\n+\t\ttemp = expand_binop (wider_mode, and_optab, temp, GEN_INT (1),\n+\t\t\t\t     target, true, OPTAB_DIRECT);\n+\t      if (temp == 0)\n+\t\tdelete_insns_since (last);\n+\n+\t      return temp;\n+\t    }\n+\t}\n+    }\n+  return 0;\n+}\n+\n /* Generate code to perform an operation specified by UNOPTAB\n    on operand OP0, with result having machine-mode MODE.\n \n@@ -2405,6 +2490,16 @@ expand_unop (mode, unoptab, op0, target, unsignedp)\n \n   /* It can't be done in this mode.  Can we open-code it in a wider mode?  */\n \n+  /* Widening clz needs special treatment.  */\n+  if (unoptab == clz_optab)\n+    {\n+      temp = widen_clz (mode, op0, target);\n+      if (temp)\n+\treturn temp;\n+      else\n+\tgoto try_libcall;\n+    }\n+\n   if (class == MODE_INT || class == MODE_FLOAT || class == MODE_COMPLEX_FLOAT)\n     for (wider_mode = GET_MODE_WIDER_MODE (mode); wider_mode != VOIDmode;\n \t wider_mode = GET_MODE_WIDER_MODE (wider_mode))\n@@ -2560,22 +2655,39 @@ expand_unop (mode, unoptab, op0, target, unsignedp)\n         }\n     }\n \n+  /* Try calculating parity (x) as popcount (x) % 2.  */\n+  if (unoptab == parity_optab)\n+    {\n+      temp = expand_parity (mode, op0, target);\n+      if (temp)\n+\treturn temp;\n+    }\n+\n+ try_libcall:\n   /* Now try a library call in this mode.  */\n   if (unoptab->handlers[(int) mode].libfunc)\n     {\n       rtx insns;\n       rtx value;\n+      enum machine_mode outmode = mode;\n+\n+      /* All of these functions return small values.  Thus we choose to\n+\t have them return something that isn't a double-word.  */\n+      if (unoptab == ffs_optab || unoptab == clz_optab || unoptab == ctz_optab\n+\t  || unoptab == popcount_optab || unoptab == parity_optab)\n+\toutmode = word_mode;\n \n       start_sequence ();\n \n       /* Pass 1 for NO_QUEUE so we don't lose any increments\n \t if the libcall is cse'd or moved.  */\n       value = emit_library_call_value (unoptab->handlers[(int) mode].libfunc,\n-\t\t\t\t       NULL_RTX, LCT_CONST, mode, 1, op0, mode);\n+\t\t\t\t       NULL_RTX, LCT_CONST, outmode,\n+\t\t\t\t       1, op0, mode);\n       insns = get_insns ();\n       end_sequence ();\n \n-      target = gen_reg_rtx (mode);\n+      target = gen_reg_rtx (outmode);\n       emit_libcall_block (insns, target, value,\n \t\t\t  gen_rtx_fmt_e (unoptab->code, mode, op0));\n \n@@ -5395,6 +5507,10 @@ init_optabs ()\n   addcc_optab = init_optab (UNKNOWN);\n   one_cmpl_optab = init_optab (NOT);\n   ffs_optab = init_optab (FFS);\n+  clz_optab = init_optab (CLZ);\n+  ctz_optab = init_optab (CTZ);\n+  popcount_optab = init_optab (POPCOUNT);\n+  parity_optab = init_optab (PARITY);\n   sqrt_optab = init_optab (SQRT);\n   floor_optab = init_optab (UNKNOWN);\n   ceil_optab = init_optab (UNKNOWN);\n@@ -5472,6 +5588,10 @@ init_optabs ()\n   init_floating_libfuncs (negv_optab, \"neg\", '2');\n   init_integral_libfuncs (one_cmpl_optab, \"one_cmpl\", '2');\n   init_integral_libfuncs (ffs_optab, \"ffs\", '2');\n+  init_integral_libfuncs (clz_optab, \"clz\", '2');\n+  init_integral_libfuncs (ctz_optab, \"ctz\", '2');\n+  init_integral_libfuncs (popcount_optab, \"popcount\", '2');\n+  init_integral_libfuncs (parity_optab, \"parity\", '2');\n \n   /* Comparison libcalls for integers MUST come in pairs, signed/unsigned.  */\n   init_integral_libfuncs (cmp_optab, \"cmp\", '2');\n@@ -5531,6 +5651,17 @@ init_optabs ()\n   /* The ffs function operates on `int'.  */\n   ffs_optab->handlers[(int) mode_for_size (INT_TYPE_SIZE, MODE_INT, 0)].libfunc\n     = init_one_libfunc (\"ffs\");\n+  ffs_optab->handlers[(int) DImode].libfunc = init_one_libfunc (\"__ffsdi2\");\n+  clz_optab->handlers[(int) SImode].libfunc = init_one_libfunc (\"__clzsi2\");\n+  clz_optab->handlers[(int) DImode].libfunc = init_one_libfunc (\"__clzdi2\");\n+  ctz_optab->handlers[(int) SImode].libfunc = init_one_libfunc (\"__ctzsi2\");\n+  ctz_optab->handlers[(int) DImode].libfunc = init_one_libfunc (\"__ctzdi2\");\n+  popcount_optab->handlers[(int) SImode].libfunc\n+      = init_one_libfunc (\"__popcountsi2\");\n+  popcount_optab->handlers[(int) DImode].libfunc\n+      = init_one_libfunc (\"__popcountdi2\");\n+  parity_optab->handlers[(int) SImode].libfunc = init_one_libfunc (\"__paritysi2\");\n+  parity_optab->handlers[(int) DImode].libfunc = init_one_libfunc (\"__paritydi2\");\n \n   extendsfdf2_libfunc = init_one_libfunc (\"__extendsfdf2\");\n   extendsfxf2_libfunc = init_one_libfunc (\"__extendsfxf2\");"}, {"sha": "5fda4dabf7425d8a21b1a4478e044604afed3dcc", "filename": "gcc/optabs.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -123,8 +123,12 @@ enum optab_index\n   OTI_absv,\n   /* Bitwise not */\n   OTI_one_cmpl,\n-  /* Find first bit set */\n+  /* Bit scanning and counting */\n   OTI_ffs,\n+  OTI_clz,\n+  OTI_ctz,\n+  OTI_popcount,\n+  OTI_parity,\n   /* Square root */\n   OTI_sqrt,\n   /* Sine */\n@@ -208,6 +212,10 @@ extern GTY(()) optab optab_table[OTI_MAX];\n #define absv_optab (optab_table[OTI_absv])\n #define one_cmpl_optab (optab_table[OTI_one_cmpl])\n #define ffs_optab (optab_table[OTI_ffs])\n+#define clz_optab (optab_table[OTI_clz])\n+#define ctz_optab (optab_table[OTI_ctz])\n+#define popcount_optab (optab_table[OTI_popcount])\n+#define parity_optab (optab_table[OTI_parity])\n #define sqrt_optab (optab_table[OTI_sqrt])\n #define sin_optab (optab_table[OTI_sin])\n #define cos_optab (optab_table[OTI_cos])"}, {"sha": "f6498f10e2901b281e2f873115afc7703655f344", "filename": "gcc/reload1.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -2545,6 +2545,10 @@ eliminate_regs (x, mem_mode, insn)\n     case ABS:\n     case SQRT:\n     case FFS:\n+    case CLZ:\n+    case CTZ:\n+    case POPCOUNT:\n+    case PARITY:\n       new = eliminate_regs (XEXP (x, 0), mem_mode, insn);\n       if (new != XEXP (x, 0))\n \treturn gen_rtx_fmt_e (code, GET_MODE (x), new);\n@@ -2776,6 +2780,10 @@ elimination_effects (x, mem_mode)\n     case ABS:\n     case SQRT:\n     case FFS:\n+    case CLZ:\n+    case CTZ:\n+    case POPCOUNT:\n+    case PARITY:\n       elimination_effects (XEXP (x, 0), mem_mode);\n       return;\n "}, {"sha": "ff19dd95d652d53882f22b03a5accae4d701d8df", "filename": "gcc/rtl.def", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -1070,6 +1070,18 @@ DEF_RTL_EXPR(SQRT, \"sqrt\", \"e\", '1')\n    or 0 if arg is 0.  */\n DEF_RTL_EXPR(FFS, \"ffs\", \"e\", '1')\n \n+/* Count leading zeros.  */\n+DEF_RTL_EXPR(CLZ, \"clz\", \"e\", '1')\n+\n+/* Count trailing zeros.  */\n+DEF_RTL_EXPR(CTZ, \"ctz\", \"e\", '1')\n+\n+/* Population count (number of 1 bits).  */\n+DEF_RTL_EXPR(POPCOUNT, \"popcount\", \"e\", '1')\n+\n+/* Population parity (number of 1 bits modulo 2).  */\n+DEF_RTL_EXPR(PARITY, \"parity\", \"e\", '1')\n+\n /* Reference to a signed bit-field of specified size and position.\n    Operand 0 is the memory unit (usually SImode or QImode) which\n    contains the field's first bit.  Operand 1 is the width, in bits."}, {"sha": "47dd7a0703814cb44359689f53846d208862bb11", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 75, "deletions": 2, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -423,6 +423,33 @@ simplify_unary_operation (code, mode, op, op_mode)\n \t  val = exact_log2 (arg0 & (- arg0)) + 1;\n \t  break;\n \n+\tcase CLZ:\n+\t  arg0 &= GET_MODE_MASK (mode);\n+\t  val = GET_MODE_BITSIZE (mode) - floor_log2 (arg0) - 1;\n+\t  break;\n+\n+\tcase CTZ:\n+\t  arg0 &= GET_MODE_MASK (mode);\n+\t  val = arg0 == 0\n+\t      ? GET_MODE_BITSIZE (mode)\n+\t      : exact_log2 (arg0 & -arg0);\n+\t  break;\n+\n+\tcase POPCOUNT:\n+\t  arg0 &= GET_MODE_MASK (mode);\n+\t  val = 0;\n+\t  while (arg0)\n+\t    val++, arg0 &= arg0 - 1;\n+\t  break;\n+\n+\tcase PARITY:\n+\t  arg0 &= GET_MODE_MASK (mode);\n+\t  val = 0;\n+\t  while (arg0)\n+\t    val++, arg0 &= arg0 - 1;\n+\t  val &= 1;\n+\t  break;\n+\n \tcase TRUNCATE:\n \t  val = arg0;\n \t  break;\n@@ -523,9 +550,55 @@ simplify_unary_operation (code, mode, op, op_mode)\n \tcase FFS:\n \t  hv = 0;\n \t  if (l1 == 0)\n-\t    lv = HOST_BITS_PER_WIDE_INT + exact_log2 (h1 & (-h1)) + 1;\n+\t    {\n+\t      if (h1 == 0)\n+\t\tlv = 0;\n+\t      else\n+\t\tlv = HOST_BITS_PER_WIDE_INT + exact_log2 (h1 & -h1) + 1;\n+\t    }\n \t  else\n-\t    lv = exact_log2 (l1 & (-l1)) + 1;\n+\t    lv = exact_log2 (l1 & -l1) + 1;\n+\t  break;\n+\n+\tcase CLZ:\n+\t  hv = 0;\n+\t  if (h1 == 0)\n+\t    lv = GET_MODE_BITSIZE (mode) - floor_log2 (l1) - 1;\n+\t  else\n+\t    lv = GET_MODE_BITSIZE (mode) - floor_log2 (h1) - 1\n+\t      - HOST_BITS_PER_WIDE_INT;\n+\t  break;\n+\n+\tcase CTZ:\n+\t  hv = 0;\n+\t  if (l1 == 0)\n+\t    {\n+\t      if (h1 == 0)\n+\t\tlv = GET_MODE_BITSIZE (mode);\n+\t      else\n+\t\tlv = HOST_BITS_PER_WIDE_INT + exact_log2 (h1 & -h1);\n+\t    }\n+\t  else\n+\t    lv = exact_log2 (l1 & -l1);\n+\t  break;\n+\n+\tcase POPCOUNT:\n+\t  hv = 0;\n+\t  lv = 0;\n+\t  while (l1)\n+\t    lv++, l1 &= l1 - 1;\n+\t  while (h1)\n+\t    lv++, h1 &= h1 - 1;\n+\t  break;\n+\n+\tcase PARITY:\n+\t  hv = 0;\n+\t  lv = 0;\n+\t  while (l1)\n+\t    lv++, l1 &= l1 - 1;\n+\t  while (h1)\n+\t    lv++, h1 &= h1 - 1;\n+\t  lv &= 1;\n \t  break;\n \n \tcase TRUNCATE:"}, {"sha": "b28a2fe07ac4ca3e21efb51e64ff7d0a026ce41d", "filename": "gcc/testsuite/gcc.c-torture/execute/builtin-bitops-1.c", "status": "added", "additions": 198, "deletions": 0, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-bitops-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-bitops-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-bitops-1.c?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -0,0 +1,198 @@\n+#include <limits.h>\n+#include <assert.h>\n+\n+#define MAKE_FUNS(suffix, type)\t\t\t\t\t\t\\\n+int my_ffs##suffix(type x) {\t\t\t\t\t\t\\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    if (x == 0)\t\t\t\t\t\t\t\t\\\n+\t return 0; \t\t\t\t\t\t\t\\\n+    for (i = 0; i < CHAR_BIT * sizeof (type); i++)\t\t\t\\\n+\tif (x & ((type) 1  << i))\t\t\t\t\t\\\n+\t    break;\t\t\t\t\t\t\t\\\n+    return i + 1;\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+int my_ctz##suffix(type x) {\t\t\t\t\t\t\\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < CHAR_BIT * sizeof (type); i++)\t\t\t\\\n+\tif (x & ((type) 1  << i))\t\t\t\t\t\\\n+\t    break;\t\t\t\t\t\t\t\\\n+    return i;\t\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+int my_clz##suffix(type x) {\t\t\t\t\t\t\\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < CHAR_BIT * sizeof (type); i++)\t\t\t\\\n+\tif (x & ((type) 1 << ((CHAR_BIT * sizeof (type)) - i - 1)))\t\\\n+\t    break;\t\t\t\t\t\t\t\\\n+    return i;\t\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+int my_popcount##suffix(type x) {\t\t\t\t\t\\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    int count = 0;\t\t\t\t\t\t\t\\\n+    for (i = 0; i < CHAR_BIT * sizeof (type); i++)\t\t\t\\\n+\tif (x & ((type) 1 << i))\t\t\t\t\t\\\n+\t    count++;\t\t\t\t\t\t\t\\\n+    return count;\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+int my_parity##suffix(type x) {\t\t\t\t\t\t\\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    int count = 0;\t\t\t\t\t\t\t\\\n+    for (i = 0; i < CHAR_BIT * sizeof (type); i++)\t\t\t\\\n+\tif (x & ((type) 1 << i))\t\t\t\t\t\\\n+\t    count++;\t\t\t\t\t\t\t\\\n+    return count & 1;\t\t\t\t\t\t\t\\\n+}\n+\n+MAKE_FUNS (, unsigned);\n+MAKE_FUNS (l, unsigned long);\n+MAKE_FUNS (ll, unsigned long long);\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+#define NUMS32\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    0x00000000U,\t\t\t\t\\\n+    0x00000001U,\t\t\t\t\\\n+    0x80000000U,\t\t\t\t\\\n+    0x00000002U,\t\t\t\t\\\n+    0x40000000U,\t\t\t\t\\\n+    0x00010000U,\t\t\t\t\\\n+    0x00008000U,\t\t\t\t\\\n+    0xa5a5a5a5U,\t\t\t\t\\\n+    0x5a5a5a5aU,\t\t\t\t\\\n+    0xcafe0000U,\t\t\t\t\\\n+    0x00cafe00U,\t\t\t\t\\\n+    0x0000cafeU,\t\t\t\t\\\n+    0xffffffffU\t\t\t\t\t\\\n+  }\n+\n+#define NUMS64\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    0x0000000000000000ULL,\t\t\t\\\n+    0x0000000000000001ULL,\t\t\t\\\n+    0x8000000000000000ULL,\t\t\t\\\n+    0x0000000000000002ULL,\t\t\t\\\n+    0x4000000000000000ULL,\t\t\t\\\n+    0x0000000100000000ULL,\t\t\t\\\n+    0x0000000080000000ULL,\t\t\t\\\n+    0xa5a5a5a5a5a5a5a5ULL,\t\t\t\\\n+    0x5a5a5a5a5a5a5a5aULL,\t\t\t\\\n+    0xcafecafe00000000ULL,\t\t\t\\\n+    0x0000cafecafe0000ULL,\t\t\t\\\n+    0x00000000cafecafeULL,\t\t\t\\\n+    0xffffffffffffffffULL\t\t\t\\\n+  }\n+\n+unsigned int ints[] = NUMS32;\n+\n+unsigned long longs[] =\n+#if __LONG_MAX__ >= 9223372036854775807L\n+NUMS64;\n+#else\n+NUMS32;\n+#endif\n+\n+unsigned long long longlongs[] = NUMS64;\n+\n+#define N(table) (sizeof (table) / sizeof (table[0]))\n+\n+int\n+main (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < N(ints); i++)\n+    {\n+      if (__builtin_ffs (ints[i]) != my_ffs (ints[i]))\n+\tabort ();\n+      if (ints[i] != 0\n+\t  && __builtin_clz (ints[i]) != my_clz (ints[i]))\n+\tabort ();\n+      if (ints[i] != 0\n+\t  && __builtin_ctz (ints[i]) != my_ctz (ints[i]))\n+\tabort ();\n+      if (__builtin_popcount (ints[i]) != my_popcount (ints[i]))\n+\tabort ();\n+      if (__builtin_parity (ints[i]) != my_parity (ints[i]))\n+\tabort ();\n+    }\n+\n+  for (i = 0; i < N(longs); i++)\n+    {\n+      if (__builtin_ffsl (longs[i]) != my_ffsl (longs[i]))\n+\tabort ();\n+      if (longs[i] != 0\n+\t  && __builtin_clzl (longs[i]) != my_clzl (longs[i]))\n+\tabort ();\n+      if (longs[i] != 0\n+\t  && __builtin_ctzl (longs[i]) != my_ctzl (longs[i]))\n+\tabort ();\n+      if (__builtin_popcountl (longs[i]) != my_popcountl (longs[i]))\n+\tabort ();\n+      if (__builtin_parityl (longs[i]) != my_parityl (longs[i]))\n+\tabort ();\n+    }\n+\n+  for (i = 0; i < N(longlongs); i++)\n+    {\n+      if (__builtin_ffsll (longlongs[i]) != my_ffsll (longlongs[i]))\n+\tabort ();\n+      if (longlongs[i] != 0\n+\t  && __builtin_clzll (longlongs[i]) != my_clzll (longlongs[i]))\n+\tabort ();\n+      if (longlongs[i] != 0\n+\t  && __builtin_ctzll (longlongs[i]) != my_ctzll (longlongs[i]))\n+\tabort ();\n+      if (__builtin_popcountll (longlongs[i]) != my_popcountll (longlongs[i]))\n+\tabort ();\n+      if (__builtin_parityll (longlongs[i]) != my_parityll (longlongs[i]))\n+\tabort ();\n+    }\n+\n+  /* Test constant folding.  */\n+\n+#define TEST(x, suffix)\t\t\t\t\t\t\t\\\n+  if (__builtin_ffs##suffix (x) != my_ffs##suffix (x))\t\t\t\\\n+    abort ();\t\t\t\t\t\t\t\t\\\n+  if (x != 0 && __builtin_clz##suffix (x) != my_clz##suffix (x))\t\\\n+    abort ();\t\t\t\t\t\t\t\t\\\n+  if (x != 0 && __builtin_ctz##suffix (x) != my_ctz##suffix (x))\t\\\n+    abort ();\t\t\t\t\t\t\t\t\\\n+  if (__builtin_popcount##suffix (x) != my_popcount##suffix (x))\t\\\n+    abort ();\t\t\t\t\t\t\t\t\\\n+  if (__builtin_parity##suffix (x) != my_parity##suffix (x))\t\t\\\n+    abort ();\n+\n+  TEST(0x00000000UL,);\n+  TEST(0x00000001UL,);\n+  TEST(0x80000000UL,);\n+  TEST(0x40000000UL,);\n+  TEST(0x00010000UL,);\n+  TEST(0x00008000UL,);\n+  TEST(0xa5a5a5a5UL,);\n+  TEST(0x5a5a5a5aUL,);\n+  TEST(0xcafe0000UL,);\n+  TEST(0x00cafe00UL,);\n+  TEST(0x0000cafeUL,);\n+  TEST(0xffffffffUL,);\n+\n+  TEST(0x0000000000000000ULL, ll);\n+  TEST(0x0000000000000001ULL, ll);\n+  TEST(0x8000000000000000ULL, ll);\n+  TEST(0x0000000000000002ULL, ll);\n+  TEST(0x4000000000000000ULL, ll);\n+  TEST(0x0000000100000000ULL, ll);\n+  TEST(0x0000000080000000ULL, ll);\n+  TEST(0xa5a5a5a5a5a5a5a5ULL, ll);\n+  TEST(0x5a5a5a5a5a5a5a5aULL, ll);\n+  TEST(0xcafecafe00000000ULL, ll);\n+  TEST(0x0000cafecafe0000ULL, ll);\n+  TEST(0x00000000cafecafeULL, ll);\n+  TEST(0xffffffffffffffffULL, ll);\n+\n+  exit (0);\n+}"}, {"sha": "03e44bcf242a2e6f464831e28f0329ae5309f64f", "filename": "gcc/tree.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2928cd7aace2187ca6d892872490e01f2a2bb17a/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=2928cd7aace2187ca6d892872490e01f2a2bb17a", "patch": "@@ -614,7 +614,12 @@ DEFTREECODE (MAX_EXPR, \"max_expr\", '2', 2)\n    operand of the ABS_EXPR must have the same type.  */\n DEFTREECODE (ABS_EXPR, \"abs_expr\", '1', 1)\n \n+/* Bit scanning and counting.  */\n DEFTREECODE (FFS_EXPR, \"ffs_expr\", '1', 1)\n+DEFTREECODE (CLZ_EXPR, \"clz_expr\", '1', 1)\n+DEFTREECODE (CTZ_EXPR, \"ctz_expr\", '1', 1)\n+DEFTREECODE (POPCOUNT_EXPR, \"popcount_expr\", '1', 1)\n+DEFTREECODE (PARITY_EXPR, \"parity_expr\", '1', 1)\n \n /* Shift operations for shift and rotate.\n    Shift means logical shift if done on an"}]}