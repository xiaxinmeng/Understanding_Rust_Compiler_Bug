{"sha": "1c68ec1f8ab531fba56cccf549ffe592bf622821", "node_id": "C_kwDOANBUbNoAKDFjNjhlYzFmOGFiNTMxZmJhNTZjY2NmNTQ5ZmZlNTkyYmY2MjI4MjE", "commit": {"author": {"name": "Takayuki 'January June' Suwa", "email": "jjsuwa_sys3175@yahoo.co.jp", "date": "2022-06-13T16:38:31Z"}, "committer": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2022-06-14T00:25:48Z"}, "message": "xtensa: Improve shift operations more\n\nThis patch introduces funnel shifter utilization, and rearranges existing\n\"per-byte shift\" insn patterns.\n\ngcc/ChangeLog:\n\n\t* config/xtensa/predicates.md (logical_shift_operator,\n\txtensa_shift_per_byte_operator): New predicates.\n\t* config/xtensa/xtensa-protos.h (xtensa_shlrd_which_direction):\n\tNew prototype.\n\t* config/xtensa/xtensa.cc (xtensa_shlrd_which_direction):\n\tNew helper function for funnel shift patterns.\n\t* config/xtensa/xtensa.md (ior_op): New code iterator.\n\t(*ashlsi3_1): Replace with new split pattern.\n\t(*shift_per_byte): Unify *ashlsi3_3x, *ashrsi3_3x and *lshrsi3_3x.\n\t(*shift_per_byte_omit_AND_0, *shift_per_byte_omit_AND_1):\n\tNew insn-and-split patterns that redirect to *xtensa_shift_per_byte,\n\tin order to omit unnecessary bitwise AND operation.\n\t(*shlrd_reg_<code>, *shlrd_const_<code>, *shlrd_per_byte_<code>,\n\t*shlrd_per_byte_<code>_omit_AND):\n\tNew insn patterns for funnel shifts.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/xtensa/funnel_shifter.c: New.", "tree": {"sha": "25e5da56bc4d4443bdcd6ff766f9dc392673d90b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25e5da56bc4d4443bdcd6ff766f9dc392673d90b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c68ec1f8ab531fba56cccf549ffe592bf622821", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c68ec1f8ab531fba56cccf549ffe592bf622821", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c68ec1f8ab531fba56cccf549ffe592bf622821", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c68ec1f8ab531fba56cccf549ffe592bf622821/comments", "author": {"login": "jjsuwa-sys3175", "id": 73290592, "node_id": "MDQ6VXNlcjczMjkwNTky", "avatar_url": "https://avatars.githubusercontent.com/u/73290592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jjsuwa-sys3175", "html_url": "https://github.com/jjsuwa-sys3175", "followers_url": "https://api.github.com/users/jjsuwa-sys3175/followers", "following_url": "https://api.github.com/users/jjsuwa-sys3175/following{/other_user}", "gists_url": "https://api.github.com/users/jjsuwa-sys3175/gists{/gist_id}", "starred_url": "https://api.github.com/users/jjsuwa-sys3175/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jjsuwa-sys3175/subscriptions", "organizations_url": "https://api.github.com/users/jjsuwa-sys3175/orgs", "repos_url": "https://api.github.com/users/jjsuwa-sys3175/repos", "events_url": "https://api.github.com/users/jjsuwa-sys3175/events{/privacy}", "received_events_url": "https://api.github.com/users/jjsuwa-sys3175/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3642271e884c06f5d266a8cbfc67035c9fbcc77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3642271e884c06f5d266a8cbfc67035c9fbcc77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3642271e884c06f5d266a8cbfc67035c9fbcc77"}], "stats": {"total": 251, "additions": 213, "deletions": 38}, "files": [{"sha": "bcc83ada0ae36c76ac07c51c54d6e58bec29fa40", "filename": "gcc/config/xtensa/predicates.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c68ec1f8ab531fba56cccf549ffe592bf622821/gcc%2Fconfig%2Fxtensa%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c68ec1f8ab531fba56cccf549ffe592bf622821/gcc%2Fconfig%2Fxtensa%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fpredicates.md?ref=1c68ec1f8ab531fba56cccf549ffe592bf622821", "patch": "@@ -164,9 +164,15 @@\n (define_predicate \"boolean_operator\"\n   (match_code \"eq,ne\"))\n \n+(define_predicate \"logical_shift_operator\"\n+  (match_code \"ashift,lshiftrt\"))\n+\n (define_predicate \"xtensa_cstoresi_operator\"\n   (match_code \"eq,ne,gt,ge,lt,le\"))\n \n+(define_predicate \"xtensa_shift_per_byte_operator\"\n+  (match_code \"ashift,ashiftrt,lshiftrt\"))\n+\n (define_predicate \"tls_symbol_operand\"\n   (and (match_code \"symbol_ref\")\n        (match_test \"SYMBOL_REF_TLS_MODEL (op) != 0\")))"}, {"sha": "2c08ed4992d9c89154afc52040994aea1489efc7", "filename": "gcc/config/xtensa/xtensa-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c68ec1f8ab531fba56cccf549ffe592bf622821/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c68ec1f8ab531fba56cccf549ffe592bf622821/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h?ref=1c68ec1f8ab531fba56cccf549ffe592bf622821", "patch": "@@ -56,6 +56,7 @@ extern char *xtensa_emit_bit_branch (bool, bool, rtx *);\n extern char *xtensa_emit_movcc (bool, bool, bool, rtx *);\n extern char *xtensa_emit_call (int, rtx *);\n extern bool xtensa_tls_referenced_p (rtx);\n+extern enum rtx_code xtensa_shlrd_which_direction (rtx, rtx);\n \n #ifdef TREE_CODE\n extern void init_cumulative_args (CUMULATIVE_ARGS *, int);"}, {"sha": "df78af6671400a6ebee3f9c0469003f1fc9fd66f", "filename": "gcc/config/xtensa/xtensa.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c68ec1f8ab531fba56cccf549ffe592bf622821/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c68ec1f8ab531fba56cccf549ffe592bf622821/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc?ref=1c68ec1f8ab531fba56cccf549ffe592bf622821", "patch": "@@ -2403,6 +2403,20 @@ xtensa_tls_referenced_p (rtx x)\n }\n \n \n+/* Helper function for \"*shlrd_...\" patterns.  */\n+\n+enum rtx_code\n+xtensa_shlrd_which_direction (rtx op0, rtx op1)\n+{\n+  if (GET_CODE (op0) == ASHIFT && GET_CODE (op1) == LSHIFTRT)\n+    return ASHIFT;\t/* shld  */\n+  if (GET_CODE (op0) == LSHIFTRT && GET_CODE (op1) == ASHIFT)\n+    return LSHIFTRT;\t/* shrd  */\n+\n+  return UNKNOWN;\n+}\n+\n+\n /* Implement TARGET_CANNOT_FORCE_CONST_MEM.  */\n \n static bool"}, {"sha": "cd7ded073eb2a8c1cfe1feca05faa5b80b3c9858", "filename": "gcc/config/xtensa/xtensa.md", "status": "modified", "additions": 175, "deletions": 38, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c68ec1f8ab531fba56cccf549ffe592bf622821/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c68ec1f8ab531fba56cccf549ffe592bf622821/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.md?ref=1c68ec1f8ab531fba56cccf549ffe592bf622821", "patch": "@@ -83,6 +83,9 @@\n ;; the same template.\n (define_mode_iterator HQI [HI QI])\n \n+;; This code iterator is for *shlrd and its variants.\n+(define_code_iterator ior_op [ior plus])\n+\n \f\n ;; Attributes.\n \n@@ -1267,16 +1270,6 @@\n   operands[1] = xtensa_copy_incoming_a7 (operands[1]);\n })\n \n-(define_insn \"*ashlsi3_1\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n-\t(ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t   (const_int 1)))]\n-  \"TARGET_DENSITY\"\n-  \"add.n\\t%0, %1, %1\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"2\")])\n-\n (define_insn \"ashlsi3_internal\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a,a\")\n \t(ashift:SI (match_operand:SI 1 \"register_operand\" \"r,r\")\n@@ -1289,16 +1282,14 @@\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3,6\")])\n \n-(define_insn \"*ashlsi3_3x\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n-\t(ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t   (ashift:SI (match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t      (const_int 3))))]\n-  \"\"\n-  \"ssa8b\\t%2\\;sll\\t%0, %1\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"6\")])\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(ashift:SI (match_operand:SI 1 \"register_operand\")\n+\t\t   (const_int 1)))]\n+  \"TARGET_DENSITY\"\n+  [(set (match_dup 0)\n+\t(plus:SI (match_dup 1)\n+\t\t (match_dup 1)))])\n \n (define_insn \"ashrsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a,a\")\n@@ -1312,17 +1303,6 @@\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3,6\")])\n \n-(define_insn \"*ashrsi3_3x\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n-\t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t     (ashift:SI (match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t(const_int 3))))]\n-  \"\"\n-  \"ssa8l\\t%2\\;sra\\t%0, %1\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"6\")])\n-\n (define_insn \"lshrsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a,a\")\n \t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r,r\")\n@@ -1332,23 +1312,180 @@\n   if (which_alternative == 0)\n     {\n       if ((INTVAL (operands[2]) & 0x1f) < 16)\n-        return \"srli\\t%0, %1, %R2\";\n+\treturn \"srli\\t%0, %1, %R2\";\n       else\n-      \treturn \"extui\\t%0, %1, %R2, %L2\";\n+\treturn \"extui\\t%0, %1, %R2, %L2\";\n     }\n   return \"ssr\\t%2\\;srl\\t%0, %1\";\n }\n   [(set_attr \"type\"\t\"arith,arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3,6\")])\n \n-(define_insn \"*lshrsi3_3x\"\n+(define_insn \"*shift_per_byte\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n+\t(match_operator:SI 3 \"xtensa_shift_per_byte_operator\"\n+\t\t[(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t (ashift:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t    (const_int 3))]))]\n+  \"!optimize_debug && optimize\"\n+{\n+  switch (GET_CODE (operands[3]))\n+    {\n+    case ASHIFT:\treturn \"ssa8b\\t%2\\;sll\\t%0, %1\";\n+    case ASHIFTRT:\treturn \"ssa8l\\t%2\\;sra\\t%0, %1\";\n+    case LSHIFTRT:\treturn \"ssa8l\\t%2\\;srl\\t%0, %1\";\n+    default:\t\tgcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")\n+   (set_attr \"length\"\t\"6\")])\n+\n+(define_insn_and_split \"*shift_per_byte_omit_AND_0\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n+\t(match_operator:SI 4 \"xtensa_shift_per_byte_operator\"\n+\t\t[(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t (and:SI (ashift:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t\t    (const_int 3))\n+\t\t\t (match_operand:SI 3 \"const_int_operand\" \"i\"))]))]\n+  \"!optimize_debug && optimize\n+   && (INTVAL (operands[3]) & 0x1f) == 3 << 3\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(match_op_dup 4\n+\t\t[(match_dup 1)\n+\t\t (ashift:SI (match_dup 2)\n+\t\t\t    (const_int 3))]))]\n+  \"\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")\n+   (set_attr \"length\"\t\"6\")])\n+\n+(define_insn_and_split \"*shift_per_byte_omit_AND_1\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n+\t(match_operator:SI 4 \"xtensa_shift_per_byte_operator\"\n+\t\t[(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t (neg:SI (and:SI (ashift:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t\t\t    (const_int 3))\n+\t\t\t\t (match_operand:SI 3 \"const_int_operand\" \"i\")))]))]\n+  \"!optimize_debug && optimize\n+   && (INTVAL (operands[3]) & 0x1f) == 3 << 3\"\n+  \"#\"\n+  \"&& can_create_pseudo_p ()\"\n+  [(set (match_dup 5)\n+\t(neg:SI (match_dup 2)))\n+   (set (match_dup 0)\n+\t(match_op_dup 4\n+\t\t[(match_dup 1)\n+\t\t (ashift:SI (match_dup 5)\n+\t\t\t    (const_int 3))]))]\n+{\n+  operands[5] = gen_reg_rtx (SImode);\n+}\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")\n+   (set_attr \"length\"\t\"9\")])\n+\n+(define_insn \"*shlrd_reg_<code>\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n+\t(ior_op:SI (match_operator:SI 4 \"logical_shift_operator\"\n+\t\t\t[(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t (match_operand:SI 2 \"register_operand\" \"r\")])\n+\t\t   (match_operator:SI 5 \"logical_shift_operator\"\n+\t\t\t[(match_operand:SI 3 \"register_operand\" \"r\")\n+\t\t\t (neg:SI (match_dup 2))])))]\n+  \"!optimize_debug && optimize\n+   && xtensa_shlrd_which_direction (operands[4], operands[5]) != UNKNOWN\"\n+{\n+  switch (xtensa_shlrd_which_direction (operands[4], operands[5]))\n+    {\n+    case ASHIFT:\treturn \"ssl\\t%2\\;src\\t%0, %1, %3\";\n+    case LSHIFTRT:\treturn \"ssr\\t%2\\;src\\t%0, %3, %1\";\n+    default:\t\tgcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")\n+   (set_attr \"length\"\t\"6\")])\n+\n+(define_insn \"*shlrd_const_<code>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n-\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t     (ashift:SI (match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t(const_int 3))))]\n+\t(ior_op:SI (match_operator:SI 5 \"logical_shift_operator\"\n+\t\t\t[(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t (match_operand:SI 3 \"const_int_operand\" \"i\")])\n+\t\t   (match_operator:SI 6 \"logical_shift_operator\"\n+\t\t\t[(match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t (match_operand:SI 4 \"const_int_operand\" \"i\")])))]\n+  \"!optimize_debug && optimize\n+   && xtensa_shlrd_which_direction (operands[5], operands[6]) != UNKNOWN\n+   && IN_RANGE (INTVAL (operands[3]), 1, 31)\n+   && IN_RANGE (INTVAL (operands[4]), 1, 31)\n+   && INTVAL (operands[3]) + INTVAL (operands[4]) == 32\"\n+{\n+  switch (xtensa_shlrd_which_direction (operands[5], operands[6]))\n+    {\n+    case ASHIFT:\treturn \"ssai\\t%L3\\;src\\t%0, %1, %2\";\n+    case LSHIFTRT:\treturn \"ssai\\t%R3\\;src\\t%0, %2, %1\";\n+    default:\t\tgcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")\n+   (set_attr \"length\"\t\"6\")])\n+\n+(define_insn \"*shlrd_per_byte_<code>\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n+\t(ior_op:SI (match_operator:SI 4 \"logical_shift_operator\"\n+\t\t\t[(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t (ashift:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t\t    (const_int 3))])\n+\t\t   (match_operator:SI 5 \"logical_shift_operator\"\n+\t\t\t[(match_operand:SI 3 \"register_operand\" \"r\")\n+\t\t\t (neg:SI (ashift:SI (match_dup 2)\n+\t\t\t\t\t    (const_int 3)))])))]\n+  \"!optimize_debug && optimize\n+   && xtensa_shlrd_which_direction (operands[4], operands[5]) != UNKNOWN\"\n+{\n+  switch (xtensa_shlrd_which_direction (operands[4], operands[5]))\n+    {\n+    case ASHIFT:\treturn \"ssa8b\\t%2\\;src\\t%0, %1, %3\";\n+    case LSHIFTRT:\treturn \"ssa8l\\t%2\\;src\\t%0, %3, %1\";\n+    default:\t\tgcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")\n+   (set_attr \"length\"\t\"6\")])\n+\n+(define_insn_and_split \"*shlrd_per_byte_<code>_omit_AND\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n+\t(ior_op:SI (match_operator:SI 5 \"logical_shift_operator\"\n+\t\t\t[(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t (and:SI (ashift:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t\t\t    (const_int 3))\n+\t\t\t\t (match_operand:SI 4 \"const_int_operand\" \"i\"))])\n+\t\t   (match_operator:SI 6 \"logical_shift_operator\"\n+\t\t\t[(match_operand:SI 3 \"register_operand\" \"r\")\n+\t\t\t (neg:SI (and:SI (ashift:SI (match_dup 2)\n+\t\t\t\t\t\t    (const_int 3))\n+\t\t\t\t\t (match_dup 4)))])))]\n+  \"!optimize_debug && optimize\n+   && xtensa_shlrd_which_direction (operands[5], operands[6]) != UNKNOWN\n+   && (INTVAL (operands[4]) & 0x1f) == 3 << 3\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(ior_op:SI (match_op_dup 5\n+\t\t\t[(match_dup 1)\n+\t\t\t (ashift:SI (match_dup 2)\n+\t\t\t\t    (const_int 3))])\n+\t\t   (match_op_dup 6\n+\t\t\t[(match_dup 3)\n+\t\t\t (neg:SI (ashift:SI (match_dup 2)\n+\t\t\t\t\t    (const_int 3)))])))]\n   \"\"\n-  \"ssa8l\\t%2\\;srl\\t%0, %1\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"6\")])"}, {"sha": "c8f987ccda99e3e10ffed37fbe6daaaf7afe19c0", "filename": "gcc/testsuite/gcc.target/xtensa/funnel_shifter.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c68ec1f8ab531fba56cccf549ffe592bf622821/gcc%2Ftestsuite%2Fgcc.target%2Fxtensa%2Ffunnel_shifter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c68ec1f8ab531fba56cccf549ffe592bf622821/gcc%2Ftestsuite%2Fgcc.target%2Fxtensa%2Ffunnel_shifter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxtensa%2Ffunnel_shifter.c?ref=1c68ec1f8ab531fba56cccf549ffe592bf622821", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+unsigned int test_0(const void *addr)\n+{\n+  unsigned int n = (unsigned int)addr;\n+  const unsigned int *a = (const unsigned int*)(n & ~3);\n+  n = (n & 3) * 8;\n+  return (a[0] >> n) | (a[1] << (32 - n));\n+}\n+\n+unsigned int test_1(unsigned int a, unsigned int b)\n+{\n+  return (a >> 16) + (b << 16);\n+}\n+\n+/* { dg-final { scan-assembler-times \"src\" 2 } } */"}]}