{"sha": "0bd6548378990d80f8cfc0fb33766ac253296f50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJkNjU0ODM3ODk5MGQ4MGY4Y2ZjMGZiMzM3NjZhYzI1MzI5NmY1MA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2005-01-18T04:36:40Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2005-01-18T04:36:40Z"}, "message": "tree-ssa-dom.c (tree_ssa_dominator_optimize): Clear SSA_NAME_VALUE at the end of the main DOM loop rather than just before...\n\n        * tree-ssa-dom.c (tree_ssa_dominator_optimize): Clear SSA_NAME_VALUE\n        at the end of the main DOM loop rather than just before DOM exits.\n\nFrom-SVN: r93811", "tree": {"sha": "7d4dd772ea3680afa83949c15dfe1e24983a6b2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d4dd772ea3680afa83949c15dfe1e24983a6b2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bd6548378990d80f8cfc0fb33766ac253296f50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd6548378990d80f8cfc0fb33766ac253296f50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bd6548378990d80f8cfc0fb33766ac253296f50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd6548378990d80f8cfc0fb33766ac253296f50/comments", "author": null, "committer": null, "parents": [{"sha": "e03a46f571d5c4144e326ec9965db0a539473090", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e03a46f571d5c4144e326ec9965db0a539473090", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e03a46f571d5c4144e326ec9965db0a539473090"}], "stats": {"total": 45, "additions": 25, "deletions": 20}, "files": [{"sha": "b85f270c2200dead83f08f91fbfa96ca10a1b7b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd6548378990d80f8cfc0fb33766ac253296f50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd6548378990d80f8cfc0fb33766ac253296f50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0bd6548378990d80f8cfc0fb33766ac253296f50", "patch": "@@ -1,3 +1,8 @@\n+2005-01-17  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-dom.c (tree_ssa_dominator_optimize): Clear SSA_NAME_VALUE\n+\tat the end of the main DOM loop rather than just before DOM exits.\n+\n 2005-01-17  Diego Novillo  <dnovillo@redhat.com>\n \n \tPR tree-optimization/19121"}, {"sha": "287419feb1750ba5abf3c79027171713306bf896", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd6548378990d80f8cfc0fb33766ac253296f50/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd6548378990d80f8cfc0fb33766ac253296f50/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=0bd6548378990d80f8cfc0fb33766ac253296f50", "patch": "@@ -455,8 +455,26 @@ tree_ssa_dominator_optimize (void)\n       htab_empty (avail_exprs);\n       htab_empty (vrp_data);\n \n-      for (i = 0; i < num_referenced_vars; i++)\n-\tvar_ann (referenced_var (i))->current_def = NULL;\n+      /* Finally, remove everything except invariants in SSA_NAME_VALUE.\n+\n+\t This must be done before we iterate as we might have a\n+\t reference to an SSA_NAME which was removed by the call to\n+\t rewrite_ssa_into_ssa.\n+\n+\t Long term we will be able to let everything in SSA_NAME_VALUE\n+\t persist.  However, for now, we know this is the safe thing to do.  */\n+      for (i = 0; i < num_ssa_names; i++)\n+\t{\n+\t  tree name = ssa_name (i);\n+\t  tree value;\n+\n+\t  if (!name)\n+\t    continue;\n+\n+\t  value = SSA_NAME_VALUE (name);\n+\t  if (value && !is_gimple_min_invariant (value))\n+\t    SSA_NAME_VALUE (name) = NULL;\n+\t}\n     }\n   while (cfg_altered);\n \n@@ -478,24 +496,6 @@ tree_ssa_dominator_optimize (void)\n   /* Free nonzero_vars.  */\n   BITMAP_XFREE (nonzero_vars);\n   BITMAP_XFREE (need_eh_cleanup);\n-\n-  /* Finally, remove everything except invariants in SSA_NAME_VALUE.\n-\n-     Long term we will be able to let everything in SSA_NAME_VALUE\n-     persist.  However, for now, we know this is the safe thing to\n-     do.  */\n-  for (i = 0; i < num_ssa_names; i++)\n-    {\n-      tree name = ssa_name (i);\n-      tree value;\n-\n-      if (!name)\n-\tcontinue;\n-\n-      value = SSA_NAME_VALUE (name);\n-      if (value && !is_gimple_min_invariant (value))\n-\tSSA_NAME_VALUE (name) = NULL;\n-    }\n   \n   VEC_free (tree_on_heap, block_defs_stack);\n   VEC_free (tree_on_heap, avail_exprs_stack);"}]}