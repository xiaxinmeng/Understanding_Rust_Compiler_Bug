{"sha": "1cf537c53e28cae8f35fb516847f7361e3098c64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNmNTM3YzUzZTI4Y2FlOGYzNWZiNTE2ODQ3ZjczNjFlMzA5OGM2NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-02-08T07:51:19Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-02-08T07:51:19Z"}, "message": "c-common.c (c_expand_expr): Revert 2002-02-06 patch.\n\n\t* c-common.c (c_expand_expr): Revert 2002-02-06 patch.\n\t* c-parse.in (compstmt): Clear last_expr_type.\n\n\t* parse.y (primary, primary_no_id): Use compstmt_or_stmtexpr\n\tinstead of compstmt.\n\t(compstmt_or_stmtexpr): Renamed from compstmt.\n\t(compstmt): In addition to compstmt_or_stmtexpr clear last_expr_type.\n\n\t* gcc.c-torture/execute/20020206-1.c: Test whether nesting 2\n\texpression statements work instead.\n\t* gcc.dg/noncompile/20020207-1.c: New test.\n\nFrom-SVN: r49609", "tree": {"sha": "3b6d2649163ab940f0abbf0bd184ff1bb3ee5c17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b6d2649163ab940f0abbf0bd184ff1bb3ee5c17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cf537c53e28cae8f35fb516847f7361e3098c64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cf537c53e28cae8f35fb516847f7361e3098c64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cf537c53e28cae8f35fb516847f7361e3098c64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cf537c53e28cae8f35fb516847f7361e3098c64/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f94053d3274ffe6cddba040ed6e42a350df22b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f94053d3274ffe6cddba040ed6e42a350df22b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f94053d3274ffe6cddba040ed6e42a350df22b8"}], "stats": {"total": 101, "additions": 72, "deletions": 29}, "files": [{"sha": "ab776ac289269c219b48240a66a8b7c02031776f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf537c53e28cae8f35fb516847f7361e3098c64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf537c53e28cae8f35fb516847f7361e3098c64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1cf537c53e28cae8f35fb516847f7361e3098c64", "patch": "@@ -1,3 +1,8 @@\n+2002-02-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-common.c (c_expand_expr): Revert 2002-02-06 patch.\n+\t* c-parse.in (compstmt): Clear last_expr_type.\n+\n 2002-02-07  Richard Henderson  <rth@redhat.com>\n \n \t* loop.c (strength_reduce): Sink final_value when not"}, {"sha": "6b986d81c034849e7f737ddebef93fda4be39791", "filename": "gcc/c-common.c", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf537c53e28cae8f35fb516847f7361e3098c64/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf537c53e28cae8f35fb516847f7361e3098c64/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=1cf537c53e28cae8f35fb516847f7361e3098c64", "patch": "@@ -3466,32 +3466,22 @@ c_expand_expr (exp, target, tmode, modifier)\n \n \t/* If we want the result of this expression, find the last\n            EXPR_STMT in the COMPOUND_STMT and mark it as addressable.  */\n-\tif (target != const0_rtx)\n+\tif (target != const0_rtx\n+\t    && TREE_CODE (STMT_EXPR_STMT (exp)) == COMPOUND_STMT\n+\t    && TREE_CODE (COMPOUND_BODY (STMT_EXPR_STMT (exp))) == SCOPE_STMT)\n \t  {\n-\t    tree expr = STMT_EXPR_STMT (exp);\n-\t    tree last;\n+\t    tree expr = COMPOUND_BODY (STMT_EXPR_STMT (exp));\n+\t    tree last = TREE_CHAIN (expr);\n \n-\t    while (TREE_CODE (expr) == COMPOUND_STMT\n-\t\t   && TREE_CODE (COMPOUND_BODY (expr)) == SCOPE_STMT)\n+\t    while (TREE_CHAIN (last))\n \t      {\n-\t\texpr = COMPOUND_BODY (expr);\n-\t\tlast = TREE_CHAIN (expr);\n-\n-\t\twhile (TREE_CHAIN (last))\n-\t\t  {\n-\t\t    expr = last;\n-\t\t    last = TREE_CHAIN (last);\n-\t\t  }\n-\n-\t\tif (TREE_CODE (last) != SCOPE_STMT)\n-\t\t  abort ();\n-\n-\t\tif (TREE_CODE (expr) == EXPR_STMT)\n-\t\t  {\n-\t\t    TREE_ADDRESSABLE (expr) = 1;\n-\t\t    break;\n-\t\t  }\n+\t\texpr = last;\n+\t\tlast = TREE_CHAIN (last);\n \t      }\n+\n+\t    if (TREE_CODE (last) == SCOPE_STMT\n+\t\t&& TREE_CODE (expr) == EXPR_STMT)\n+\t      TREE_ADDRESSABLE (expr) = 1;\n \t  }\n \n \texpand_stmt (STMT_EXPR_STMT (exp));"}, {"sha": "176041bf0c86876515bb83f0f6aa3f7c2f489aaa", "filename": "gcc/c-parse.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf537c53e28cae8f35fb516847f7361e3098c64/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf537c53e28cae8f35fb516847f7361e3098c64/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=1cf537c53e28cae8f35fb516847f7361e3098c64", "patch": "@@ -2172,6 +2172,7 @@ compstmt_primary_start:\n \n compstmt: compstmt_start compstmt_nostart\n \t\t{ RECHAIN_STMTS ($1, COMPOUND_BODY ($1)); \n+\t\t  last_expr_type = NULL_TREE;\n                   $$ = $1; }\n \t;\n "}, {"sha": "25bf9d92070b4f4ea14dfb0b47d1bf615e828e44", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf537c53e28cae8f35fb516847f7361e3098c64/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf537c53e28cae8f35fb516847f7361e3098c64/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1cf537c53e28cae8f35fb516847f7361e3098c64", "patch": "@@ -1,3 +1,10 @@\n+2002-02-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parse.y (primary, primary_no_id): Use compstmt_or_stmtexpr\n+\tinstead of compstmt.\n+\t(compstmt_or_stmtexpr): Renamed from compstmt.\n+\t(compstmt): In addition to compstmt_or_stmtexpr clear last_expr_type.\n+\n 2002-02-07  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tRename instantiate_type_flags to tsubst_flags_t & expand use."}, {"sha": "7faeabaf87cc1a9c6e464ac82b23206e0ec0ac13", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf537c53e28cae8f35fb516847f7361e3098c64/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf537c53e28cae8f35fb516847f7361e3098c64/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=1cf537c53e28cae8f35fb516847f7361e3098c64", "patch": "@@ -1592,7 +1592,7 @@ primary:\n \t\t    pedwarn (\"ISO C++ forbids braced-groups within expressions\");  \n \t\t  $<ttype>$ = begin_stmt_expr (); \n \t\t}\n-\t  compstmt ')'\n+\t  compstmt_or_stmtexpr ')'\n                { $$ = finish_stmt_expr ($<ttype>2); }\n         /* Koenig lookup support\n            We could store lastiddecl in $1 to avoid another lookup,\n@@ -1717,7 +1717,7 @@ primary_no_id:\n \t\t      YYERROR;\n \t\t    }\n \t\t  $<ttype>$ = expand_start_stmt_expr (); }\n-\t  compstmt ')'\n+\t  compstmt_or_stmtexpr ')'\n \t\t{ if (pedantic)\n \t\t    pedwarn (\"ISO C++ forbids braced-groups within expressions\");\n \t\t  $$ = expand_end_stmt_expr ($<ttype>2); }\n@@ -3324,14 +3324,19 @@ label_decl:\n \t\t}\n \t;\n \n-compstmt:\n+compstmt_or_stmtexpr:\n \t  save_lineno '{'\n                 { $<ttype>$ = begin_compound_stmt (0); }\n \t  compstmtend \n                 { STMT_LINENO ($<ttype>3) = $1;\n \t\t  finish_compound_stmt (0, $<ttype>3); }\n \t;\n \n+compstmt:\n+\t  compstmt_or_stmtexpr\n+\t\t{ last_expr_type = NULL_TREE; }\n+\t;\n+\n simple_if:\n \t  IF\n \t\t{ $<ttype>$ = begin_if_stmt ();"}, {"sha": "dbb5cefab28be353705a186884d1b85092b64df7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf537c53e28cae8f35fb516847f7361e3098c64/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf537c53e28cae8f35fb516847f7361e3098c64/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1cf537c53e28cae8f35fb516847f7361e3098c64", "patch": "@@ -1,3 +1,9 @@\n+2002-02-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c-torture/execute/20020206-1.c: Test whether nesting 2\n+\texpression statements work instead.\n+\t* gcc.dg/noncompile/20020207-1.c: New test.\n+\n 2002-02-07  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.dg/debug/dwarf2-1.c (foo): Return a value."}, {"sha": "8450800a1768851ca2fb8e401fc8b4ac5843be43", "filename": "gcc/testsuite/gcc.c-torture/execute/20020206-1.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf537c53e28cae8f35fb516847f7361e3098c64/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020206-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf537c53e28cae8f35fb516847f7361e3098c64/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020206-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020206-1.c?ref=1cf537c53e28cae8f35fb516847f7361e3098c64", "patch": "@@ -1,6 +1,3 @@\n-/* This testcase ICEd because c_expand_expr did not mark statement expression\n-   return value as one which shouldn't be ignored.  */\n-\n struct A {\n   unsigned int a, b, c;\n };\n@@ -23,7 +20,7 @@ int main ()\n {\n   struct A d;\n \n-  d = ({ { bar (); } });\n+  d = ({ ({ bar (); }); });\n   baz (&d);\n   exit (0);\n }"}, {"sha": "945eb1b1b97164928ea7a0c69a11a9d1ccc06f78", "filename": "gcc/testsuite/gcc.dg/noncompile/20020207-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf537c53e28cae8f35fb516847f7361e3098c64/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F20020207-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf537c53e28cae8f35fb516847f7361e3098c64/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F20020207-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F20020207-1.c?ref=1cf537c53e28cae8f35fb516847f7361e3098c64", "patch": "@@ -0,0 +1,32 @@\n+/* This testcase ICEd because statement expression type was set, but was not\n+   as used.  */\n+\n+struct A {\n+  unsigned int a, b, c;\n+};\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+struct A bar (void)\n+{\n+  return (struct A) { 176, 52, 31 };\n+}\n+\n+void baz (struct A *a)\n+{\n+  if (a->a != 176 || a->b != 52 || a->c != 31)\n+    abort ();\n+}\n+\n+int main ()\n+{\n+  struct A d;\n+\n+  d = ({ { bar (); } });\t\t/* { dg-error \"void value\" } */\n+  d = ({ if (1) { bar (); } });\t\t/* { dg-error \"void value\" } */\n+  d = ({ while (0) { bar (); } });\t/* { dg-error \"void value\" } */\n+  d = ({ do { bar (); } while (0); });\t/* { dg-error \"void value\" } */\n+  baz (&d);\n+  exit (0);\n+}"}]}