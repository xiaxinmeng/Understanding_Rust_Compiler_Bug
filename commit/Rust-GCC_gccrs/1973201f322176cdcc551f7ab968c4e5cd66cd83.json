{"sha": "1973201f322176cdcc551f7ab968c4e5cd66cd83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk3MzIwMWYzMjIxNzZjZGNjNTUxZjdhYjk2OGM0ZTVjZDY2Y2Q4Mw==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-09-29T07:34:37Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-09-29T07:34:37Z"}, "message": "In gcc/: 2010-09-29 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/:\n2010-09-29  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * c-parser.c (c_lex_one_token): In Objective-C, when dealing with\n        a CPP_NAME which is a reserved word, clearly separate cases for\n        OBJC_IS_PQ_KEYWORD, OBJC_IS_AT_KEYWORD and OBJC_IS_CXX_KEYWORD.\n\nIn gcc/c-family:\n2010-09-29  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * c-common.h (OBJC_IS_CXX_KEYWORD): New macro.  Updated comments.\n        (objc_is_reserved_word): Removed.\n        * c-common.c: Updated comments.\n        * c-lex.c (c_lex_with_flags): Use OBJC_IS_CXX_KEYWORD instead of\n        objc_is_reserved_word.\n        * stub-objc.c (objc_is_reserved_word): Removed.\n\nIn gcc/objc/:\n2010-09-29  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * objc-act.c (objc_is_reserved_word): Removed.\n\nIn gcc/testsuite/:\n2010-09-29  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * objc.dg/keywords-1.m: New test.\n        * objc.dg/keywords-2.m: New test.\n        * objc.dg/keywords-3.m: New test.\n        * obj-c++.dg/keywords-1.mm: New test.\n        * obj-c++.dg/keywords-2.mm: New test.\n\nFrom-SVN: r164715", "tree": {"sha": "50e01956f9f732acde8196766d84e5b5013a2ea6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50e01956f9f732acde8196766d84e5b5013a2ea6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1973201f322176cdcc551f7ab968c4e5cd66cd83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1973201f322176cdcc551f7ab968c4e5cd66cd83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1973201f322176cdcc551f7ab968c4e5cd66cd83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1973201f322176cdcc551f7ab968c4e5cd66cd83/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3f984eefb1a566600f545f0d0c7289d6c3d7657a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f984eefb1a566600f545f0d0c7289d6c3d7657a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f984eefb1a566600f545f0d0c7289d6c3d7657a"}], "stats": {"total": 234, "additions": 204, "deletions": 30}, "files": [{"sha": "5e5fd8ad37c889be058ce28fcb252cd3c3255cc9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1973201f322176cdcc551f7ab968c4e5cd66cd83", "patch": "@@ -1,3 +1,9 @@\n+2010-09-29  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* c-parser.c (c_lex_one_token): In Objective-C, when dealing with\n+\ta CPP_NAME which is a reserved word, clearly separate cases for\n+\tOBJC_IS_PQ_KEYWORD, OBJC_IS_AT_KEYWORD and OBJC_IS_CXX_KEYWORD.\n+\n 2010-09-29  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* c-parser.c (c_lex_one_token): In Objective-C, do not replace"}, {"sha": "716957381e3defe4d29b74b2c7b0aeeb6ebab093", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=1973201f322176cdcc551f7ab968c4e5cd66cd83", "patch": "@@ -1,3 +1,12 @@\n+2010-09-29  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* c-common.h (OBJC_IS_CXX_KEYWORD): New macro.  Updated comments.\n+\t(objc_is_reserved_word): Removed.\n+\t* c-common.c: Updated comments.\n+\t* c-lex.c (c_lex_with_flags): Use OBJC_IS_CXX_KEYWORD instead of\n+\tobjc_is_reserved_word.\n+\t* stub-objc.c (objc_is_reserved_word): Removed.\n+\n 2010-09-28  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* c-common.h (objc_add_method_declaration): Adjust prototype to "}, {"sha": "1573d4881711711547f707d11a28f143b2560d5f", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=1973201f322176cdcc551f7ab968c4e5cd66cd83", "patch": "@@ -381,8 +381,13 @@ static int resort_field_decl_cmp (const void *, const void *);\n    If -fno-asm is used, D_ASM is added to the mask.  If\n    -fno-gnu-keywords is used, D_EXT is added.  If -fno-asm and C in\n    C89 mode, D_EXT89 is added for both -fno-asm and -fno-gnu-keywords.\n-   In C with -Wc++-compat, we warn if D_CXXWARN is set.  */\n+   In C with -Wc++-compat, we warn if D_CXXWARN is set.\n \n+   Note the complication of the D_CXX_OBJC keywords.  These are\n+   reserved words such as 'class'.  In C++, 'class' is a reserved\n+   word.  In Objective-C++ it is too.  In Objective-C, it is a\n+   reserved word too, but only if it follows an '@' sign.\n+*/\n const struct c_common_resword c_common_reswords[] =\n {\n   { \"_Bool\",\t\tRID_BOOL,      D_CONLY },"}, {"sha": "a98840459053c9174f5de84ee8e7050c3d310d4b", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=1973201f322176cdcc551f7ab968c4e5cd66cd83", "patch": "@@ -76,7 +76,8 @@ enum rid\n   /* C++ */\n   RID_FRIEND, RID_VIRTUAL, RID_EXPLICIT, RID_EXPORT, RID_MUTABLE,\n \n-  /* ObjC */\n+  /* ObjC (\"PQ\" reserved words - they do not appear after a '@' and\n+     are keywords only in specific contexts)  */\n   RID_IN, RID_OUT, RID_INOUT, RID_BYCOPY, RID_BYREF, RID_ONEWAY,\n \n   /* C (reserved and imaginary types not implemented, so any use is a\n@@ -105,7 +106,8 @@ enum rid\n   /* Too many ways of getting the name of a function as a string */\n   RID_FUNCTION_NAME, RID_PRETTY_FUNCTION_NAME, RID_C99_FUNCTION_NAME,\n \n-  /* C++ */\n+  /* C++ (some of these are keywords in Objective-C as well, but only\n+     if they appear after a '@') */\n   RID_BOOL,     RID_WCHAR,    RID_CLASS,\n   RID_PUBLIC,   RID_PRIVATE,  RID_PROTECTED,\n   RID_TEMPLATE, RID_NULL,     RID_CATCH,\n@@ -133,7 +135,8 @@ enum rid\n   /* C++0x */\n   RID_CONSTEXPR, RID_DECLTYPE, RID_NOEXCEPT, RID_NULLPTR, RID_STATIC_ASSERT,\n \n-  /* Objective-C */\n+  /* Objective-C (\"AT\" reserved words - they are only keywords when\n+     they follow '@')  */\n   RID_AT_ENCODE,   RID_AT_END,\n   RID_AT_CLASS,    RID_AT_ALIAS,     RID_AT_DEFS,\n   RID_AT_PRIVATE,  RID_AT_PROTECTED, RID_AT_PUBLIC,\n@@ -188,6 +191,18 @@ enum rid\n   ((unsigned int) (rid) >= (unsigned int) RID_FIRST_PQ && \\\n    (unsigned int) (rid) <= (unsigned int) RID_LAST_PQ)\n \n+/* OBJC_IS_CXX_KEYWORD recognizes the 'CXX_OBJC' keywords (such as\n+   'class') which are shared in a subtle way between Objective-C and\n+   C++.  When the lexer is lexing in Objective-C/Objective-C++, if it\n+   finds '@' followed by one of these identifiers (eg, '@class'), it\n+   recognizes the whole as an Objective-C keyword.  If the identifier\n+   is found elsewhere, it follows the rules of the C/C++ language.\n+ */\n+#define OBJC_IS_CXX_KEYWORD(rid) \\\n+  (rid == RID_CLASS\t\t\t\t\t\t\t\\\n+   || rid == RID_PUBLIC || rid == RID_PROTECTED || rid == RID_PRIVATE\t\\\n+   || rid == RID_TRY || rid == RID_THROW || rid == RID_CATCH)\n+\n /* The elements of `ridpointers' are identifier nodes for the reserved\n    type names and storage classes.  It is indexed by a RID_... value.  */\n extern GTY ((length (\"(int) RID_MAX\"))) tree *ridpointers;\n@@ -940,7 +955,6 @@ extern void c_parse_error (const char *, enum cpp_ttype, tree, unsigned char);\n extern tree objc_is_class_name (tree);\n extern tree objc_is_object_ptr (tree);\n extern void objc_check_decl (tree);\n-extern int objc_is_reserved_word (tree);\n extern tree objc_common_type (tree, tree);\n extern bool objc_compare_types (tree, tree, int, tree);\n extern bool objc_have_common_type (tree, tree, int, tree);"}, {"sha": "8c65b8bfd6e431c423076ba087cb0c0842a56109", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=1973201f322176cdcc551f7ab968c4e5cd66cd83", "patch": "@@ -366,7 +366,8 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags,\n \n \t    case CPP_NAME:\n \t      *value = HT_IDENT_TO_GCC_IDENT (HT_NODE (tok->val.node.node));\n-\t      if (objc_is_reserved_word (*value))\n+\t      if (OBJC_IS_AT_KEYWORD (C_RID_CODE (*value))\n+\t\t  || OBJC_IS_CXX_KEYWORD (C_RID_CODE (*value)))\n \t\t{\n \t\t  type = CPP_AT_NAME;\n \t\t  break;"}, {"sha": "71a34de53ff562d1d1a1d4a82e5ac55695154484", "filename": "gcc/c-family/stub-objc.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Fc-family%2Fstub-objc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Fc-family%2Fstub-objc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fstub-objc.c?ref=1973201f322176cdcc551f7ab968c4e5cd66cd83", "patch": "@@ -56,12 +56,6 @@ objc_check_decl (tree ARG_UNUSED (decl))\n {\n }\n \n-int\n-objc_is_reserved_word (tree ARG_UNUSED (ident))\n-{\n-  return 0;\n-}\n-\n tree\n objc_common_type (tree ARG_UNUSED (type1), tree ARG_UNUSED (type2))\n {"}, {"sha": "d21cd767958da03ba7c0f4ef0be68fe5702ec09e", "filename": "gcc/c-parser.c", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=1973201f322176cdcc551f7ab968c4e5cd66cd83", "patch": "@@ -179,7 +179,11 @@ typedef struct GTY(()) c_parser {\n   BOOL_BITFIELD in_if_block : 1;\n   /* True if we want to lex an untranslated string.  */\n   BOOL_BITFIELD lex_untranslated_string : 1;\n+\n   /* Objective-C specific parser/lexer information.  */\n+\n+  /* True if we are in a context where the Objective-C \"PQ\" keywords\n+     are considered keywords.  */\n   BOOL_BITFIELD objc_pq_context : 1;\n   /* The following flag is needed to contextualize Objective-C lexical\n      analysis.  In some cases (e.g., 'int NSObject;'), it is\n@@ -236,16 +240,37 @@ c_lex_one_token (c_parser *parser, c_token *token)\n \t\ttoken->keyword = rid_code;\n \t\tbreak;\n \t      }\n-\t    else if (c_dialect_objc ())\n+\t    else if (c_dialect_objc () && OBJC_IS_PQ_KEYWORD (rid_code))\n \t      {\n-\t\tif (!objc_is_reserved_word (token->value)\n-\t\t    && (!OBJC_IS_PQ_KEYWORD (rid_code)\n-\t\t\t|| parser->objc_pq_context))\n+\t\t/* We found an Objective-C \"pq\" keyword (in, out,\n+\t\t   inout, bycopy, byref, oneway).  They need special\n+\t\t   care because the interpretation depends on the\n+\t\t   context.\n+\t\t */\n+\t\tif (parser->objc_pq_context)\n \t\t  {\n \t\t    token->type = CPP_KEYWORD;\n \t\t    token->keyword = rid_code;\n \t\t    break;\n \t\t  }\n+\t\t/* Else, \"pq\" keywords outside of the \"pq\" context are\n+\t\t   not keywords, and we fall through to the code for\n+\t\t   normal tokens.\n+\t\t*/\n+\t      }\n+\t    else if (c_dialect_objc () \n+\t\t     && (OBJC_IS_AT_KEYWORD (rid_code)\n+\t\t\t || OBJC_IS_CXX_KEYWORD (rid_code)))\n+\t      {\n+\t\t/* We found one of the Objective-C \"@\" keywords (defs,\n+\t\t   selector, synchronized, etc) or one of the\n+\t\t   Objective-C \"cxx\" keywords (class, private,\n+\t\t   protected, public, try, catch, throw) without a\n+\t\t   preceding '@' sign.  Do nothing and fall through to\n+\t\t   the code for normal tokens (in C++ we would still\n+\t\t   consider the CXX ones keywords, but not in C).\n+\t\t*/\n+\t\t;\n \t      }\n \t    else\n \t      {"}, {"sha": "94c7ffafba8220b6cf5b763f914e8a0bf5de98d5", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=1973201f322176cdcc551f7ab968c4e5cd66cd83", "patch": "@@ -1,3 +1,7 @@\n+2010-09-29  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc-act.c (objc_is_reserved_word): Removed.\n+\n 2010-09-28  Iain Sandoe  <iains@gcc.gnu.org>\n \t\n \t* objc-act.c (objc_add_method_declaration): Handle and ignore "}, {"sha": "87eb11b2cddc18c539e1d88bfc18ba853ef088b5", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=1973201f322176cdcc551f7ab968c4e5cd66cd83", "patch": "@@ -829,20 +829,6 @@ objc_add_instance_variable (tree decl)\n \t\t\t\tdecl);\n }\n \n-/* Return 1 if IDENT is an ObjC/ObjC++ reserved keyword in the context of\n-   an '@'.  */\n-\n-int\n-objc_is_reserved_word (tree ident)\n-{\n-  unsigned char code = C_RID_CODE (ident);\n-\n-  return (OBJC_IS_AT_KEYWORD (code)\n-\t  || code == RID_CLASS || code == RID_PUBLIC\n-\t  || code == RID_PROTECTED || code == RID_PRIVATE\n-\t  || code == RID_TRY || code == RID_THROW || code == RID_CATCH);\n-}\n-\n /* Return true if TYPE is 'id'.  */\n \n static bool"}, {"sha": "213e35c69e7127d31db831e89fcd754dd16bfc08", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1973201f322176cdcc551f7ab968c4e5cd66cd83", "patch": "@@ -1,3 +1,11 @@\n+2010-09-29  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc.dg/keywords-1.m: New test.\n+\t* objc.dg/keywords-2.m: New test.\n+\t* objc.dg/keywords-3.m: New test.\n+\t* obj-c++.dg/keywords-1.mm: New test.\n+\t* obj-c++.dg/keywords-2.mm: New test.\n+\n 2010-09-28  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/rv-lvalue-req.C: Adjust messages."}, {"sha": "abb4537ae646c40e316ca66305e52a177adb52d1", "filename": "gcc/testsuite/obj-c++.dg/keywords-1.mm", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fkeywords-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fkeywords-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fkeywords-1.mm?ref=1973201f322176cdcc551f7ab968c4e5cd66cd83", "patch": "@@ -0,0 +1,27 @@\n+/* Test that 'in', 'out', 'inout', 'bycopy', 'byref', 'oneway'\n+   are not keywords outside of a \"protocol qualifier\" context.\n+*/\n+/* { dg-do compile } */\n+\n+typedef int in;\n+\n+in out (in inout)\n+{\n+  int byref = inout * 2;\n+  \n+  return byref + inout;\n+}\n+\n+@class byref;\n+\n+@interface inout\n+@end\n+\n+@protocol oneway;\n+\n+int main (void)\n+{\n+  in bycopy = (in)(out (0));\n+\n+  return (in)bycopy;\n+}"}, {"sha": "c81cb4d0cac80e3bfb1f04df396568ce6d06ccdf", "filename": "gcc/testsuite/obj-c++.dg/keywords-2.mm", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fkeywords-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fkeywords-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fkeywords-2.mm?ref=1973201f322176cdcc551f7ab968c4e5cd66cd83", "patch": "@@ -0,0 +1,24 @@\n+/* Test that 'encode', 'end', 'compatibility_alias', 'defs',\n+   'protocol', 'selector', finally', 'synchronized', 'interface',\n+   'implementation' are not keywords if not after a '@'.\n+*/\n+/* { dg-do compile } */\n+\n+int encode (int end)\n+{\n+  int compatibility_alias = end * 2;\n+  int defs = compatibility_alias * 2;\n+  int protocol = defs * 2;\n+  int selector = protocol * 2;\n+  int finally = selector * 2;\n+  int synchronized = finally * 2;\n+  int interface = synchronized * 2;\n+  int implementation = interface * 2;\n+\n+  return implementation;\n+}\n+\n+int main (void)\n+{\n+  return encode (0);\n+}"}, {"sha": "abb4537ae646c40e316ca66305e52a177adb52d1", "filename": "gcc/testsuite/objc.dg/keywords-1.m", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Ftestsuite%2Fobjc.dg%2Fkeywords-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Ftestsuite%2Fobjc.dg%2Fkeywords-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fkeywords-1.m?ref=1973201f322176cdcc551f7ab968c4e5cd66cd83", "patch": "@@ -0,0 +1,27 @@\n+/* Test that 'in', 'out', 'inout', 'bycopy', 'byref', 'oneway'\n+   are not keywords outside of a \"protocol qualifier\" context.\n+*/\n+/* { dg-do compile } */\n+\n+typedef int in;\n+\n+in out (in inout)\n+{\n+  int byref = inout * 2;\n+  \n+  return byref + inout;\n+}\n+\n+@class byref;\n+\n+@interface inout\n+@end\n+\n+@protocol oneway;\n+\n+int main (void)\n+{\n+  in bycopy = (in)(out (0));\n+\n+  return (in)bycopy;\n+}"}, {"sha": "c81cb4d0cac80e3bfb1f04df396568ce6d06ccdf", "filename": "gcc/testsuite/objc.dg/keywords-2.m", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Ftestsuite%2Fobjc.dg%2Fkeywords-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Ftestsuite%2Fobjc.dg%2Fkeywords-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fkeywords-2.m?ref=1973201f322176cdcc551f7ab968c4e5cd66cd83", "patch": "@@ -0,0 +1,24 @@\n+/* Test that 'encode', 'end', 'compatibility_alias', 'defs',\n+   'protocol', 'selector', finally', 'synchronized', 'interface',\n+   'implementation' are not keywords if not after a '@'.\n+*/\n+/* { dg-do compile } */\n+\n+int encode (int end)\n+{\n+  int compatibility_alias = end * 2;\n+  int defs = compatibility_alias * 2;\n+  int protocol = defs * 2;\n+  int selector = protocol * 2;\n+  int finally = selector * 2;\n+  int synchronized = finally * 2;\n+  int interface = synchronized * 2;\n+  int implementation = interface * 2;\n+\n+  return implementation;\n+}\n+\n+int main (void)\n+{\n+  return encode (0);\n+}"}, {"sha": "28c2cf50e17c4c80cc0f931764dd4e5ceda54ca1", "filename": "gcc/testsuite/objc.dg/keywords-3.m", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Ftestsuite%2Fobjc.dg%2Fkeywords-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1973201f322176cdcc551f7ab968c4e5cd66cd83/gcc%2Ftestsuite%2Fobjc.dg%2Fkeywords-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fkeywords-3.m?ref=1973201f322176cdcc551f7ab968c4e5cd66cd83", "patch": "@@ -0,0 +1,20 @@\n+/* Test that 'class', 'public', 'private', protected', 'try', 'catch',\n+   'throw' are not keywords in pure Objective-C if not after a '@'.\n+*/\n+/* { dg-do compile } */\n+\n+int class (int public)\n+{\n+  int private = public;\n+  int protected = private * 2;\n+  int try = protected * 2;\n+  int catch = try * 2;\n+  int throw = catch * 2;\n+\n+  return throw;\n+}\n+\n+int main (void)\n+{\n+  return class (0);\n+}"}]}