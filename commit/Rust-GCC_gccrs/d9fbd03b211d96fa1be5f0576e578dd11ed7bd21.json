{"sha": "d9fbd03b211d96fa1be5f0576e578dd11ed7bd21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlmYmQwM2IyMTFkOTZmYTFiZTVmMDU3NmU1NzhkZDExZWQ3YmQyMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-08-24T21:32:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-08-24T21:32:12Z"}, "message": "* decl2.c (mark_used): Streamline logic.\n\nFrom-SVN: r151062", "tree": {"sha": "9fa4c73b40f5bfc98d2cc432e4d582f03e88d5c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fa4c73b40f5bfc98d2cc432e4d582f03e88d5c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9fbd03b211d96fa1be5f0576e578dd11ed7bd21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9fbd03b211d96fa1be5f0576e578dd11ed7bd21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9fbd03b211d96fa1be5f0576e578dd11ed7bd21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9fbd03b211d96fa1be5f0576e578dd11ed7bd21/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3146f36f935b0594a4719320e891e2d7524c014c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3146f36f935b0594a4719320e891e2d7524c014c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3146f36f935b0594a4719320e891e2d7524c014c"}], "stats": {"total": 39, "additions": 18, "deletions": 21}, "files": [{"sha": "be151df573434127a66fdc774c0a6e009fdac4da", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9fbd03b211d96fa1be5f0576e578dd11ed7bd21/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9fbd03b211d96fa1be5f0576e578dd11ed7bd21/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d9fbd03b211d96fa1be5f0576e578dd11ed7bd21", "patch": "@@ -1,4 +1,6 @@\n-2009-08-21  Jason Merrill  <jason@redhat.com>\n+2009-08-24  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl2.c (mark_used): Streamline logic.\n \n \tPR c++/41109\n \tPR c++/41110"}, {"sha": "2ef7a5c6a57eab7e0347192cd4a45a7aa0985dbe", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9fbd03b211d96fa1be5f0576e578dd11ed7bd21/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9fbd03b211d96fa1be5f0576e578dd11ed7bd21/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=d9fbd03b211d96fa1be5f0576e578dd11ed7bd21", "patch": "@@ -3865,7 +3865,8 @@ mark_used (tree decl)\n      DECL_LANG_SPECIFIC set, and these are also the only decls that we\n      might need special handling for.  */\n   if ((TREE_CODE (decl) != VAR_DECL && TREE_CODE (decl) != FUNCTION_DECL)\n-      || DECL_LANG_SPECIFIC (decl) == NULL)\n+      || DECL_LANG_SPECIFIC (decl) == NULL\n+      || DECL_THUNK_P (decl))\n     return;\n \n   /* We only want to do this processing once.  We don't need to keep trying\n@@ -3917,22 +3918,17 @@ mark_used (tree decl)\n    o the variable or function is not used (3.2 [basic.def.odr]) or is\n    defined in the same translation unit.  */\n   if (TREE_PUBLIC (decl)\n-      && (TREE_CODE (decl) == FUNCTION_DECL\n-\t  || TREE_CODE (decl) == VAR_DECL)\n-      && DECL_LANG_SPECIFIC (decl))\n-    {\n-      if (!DECL_EXTERN_C_P (decl)\n-\t  && !DECL_ARTIFICIAL (decl)\n-\t  && !decl_defined_p (decl)\n-\t  && no_linkage_check (TREE_TYPE (decl), /*relaxed_p=*/false))\n-\t{\n-\t  if (is_local_extern (decl))\n-\t    /* There's no way to define a local extern, and adding it to\n-\t       the vector interferes with GC, so give an error now.  */\n-\t    no_linkage_error (decl);\n-\t  else\n-\t    VEC_safe_push (tree, gc, no_linkage_decls, decl);\n-\t}\n+      && !DECL_EXTERN_C_P (decl)\n+      && !DECL_ARTIFICIAL (decl)\n+      && !decl_defined_p (decl)\n+      && no_linkage_check (TREE_TYPE (decl), /*relaxed_p=*/false))\n+    {\n+      if (is_local_extern (decl))\n+\t/* There's no way to define a local extern, and adding it to\n+\t   the vector interferes with GC, so give an error now.  */\n+\tno_linkage_error (decl);\n+      else\n+\tVEC_safe_push (tree, gc, no_linkage_decls, decl);\n     }\n \n   if (TREE_CODE (decl) == FUNCTION_DECL && DECL_DECLARED_INLINE_P (decl)\n@@ -3956,7 +3952,6 @@ mark_used (tree decl)\n   if (TREE_CODE (decl) == FUNCTION_DECL\n       && DECL_NONSTATIC_MEMBER_FUNCTION_P (decl)\n       && DECL_DEFAULTED_FN (decl)\n-      && !DECL_THUNK_P (decl)\n       && ! DECL_INITIAL (decl))\n     {\n       /* Synthesizing an implicitly defined member function will result in\n@@ -3973,8 +3968,8 @@ mark_used (tree decl)\n       /* If this is a synthesized method we don't need to\n \t do the instantiation test below.  */\n     }\n-  else if ((DECL_NON_THUNK_FUNCTION_P (decl) || TREE_CODE (decl) == VAR_DECL)\n-\t   && DECL_LANG_SPECIFIC (decl) && DECL_TEMPLATE_INFO (decl)\n+  else if ((TREE_CODE (decl) == FUNCTION_DECL || TREE_CODE (decl) == VAR_DECL)\n+\t   && DECL_TEMPLATE_INFO (decl)\n \t   && (!DECL_EXPLICIT_INSTANTIATION (decl)\n \t       || always_instantiate_p (decl)))\n     /* If this is a function or variable that is an instance of some"}]}