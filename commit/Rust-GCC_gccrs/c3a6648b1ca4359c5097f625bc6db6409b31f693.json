{"sha": "c3a6648b1ca4359c5097f625bc6db6409b31f693", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNhNjY0OGIxY2E0MzU5YzUwOTdmNjI1YmM2ZGI2NDA5YjMxZjY5Mw==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2015-11-12T13:56:31Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2015-11-12T13:56:31Z"}, "message": "Implement D0013R2, logical type traits.\n\n2015-11-12  Ville Voutilainen  <ville.voutilainen@gmail.com>\n\n\tImplement D0013R2, logical type traits.\n\n\t/libstdc++-v3\n\t* include/experimental/type_traits (conjunction_v, disjunction_v,\n\tnegation_v): New.\n\t* include/std/type_traits (conjunction, disjunction, negation):\n\tLikewise.\n\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Likewise.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n\tLikewise.\n\t* testsuite/experimental/type_traits/value.cc: Likewise.\n\t* testsuite/20_util/logical_traits/requirements/explicit_instantiation.cc: New.\n\t* testsuite/20_util/logical_traits/requirements/typedefs.cc: Likewise.\n\t* testsuite/20_util/logical_traits/value.cc: Likewise.\n\n\t/testsuite\n\t* g++.dg/cpp0x/Wattributes1.C: Adjust.\n\nFrom-SVN: r230258", "tree": {"sha": "4aa9af9ef4e0ebc7da2941e71cfe8f07cb9ce2fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4aa9af9ef4e0ebc7da2941e71cfe8f07cb9ce2fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3a6648b1ca4359c5097f625bc6db6409b31f693", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a6648b1ca4359c5097f625bc6db6409b31f693", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3a6648b1ca4359c5097f625bc6db6409b31f693", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a6648b1ca4359c5097f625bc6db6409b31f693/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c6027796eb8a5b8e172125ed71ee22bcac5280f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c6027796eb8a5b8e172125ed71ee22bcac5280f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c6027796eb8a5b8e172125ed71ee22bcac5280f"}], "stats": {"total": 235, "additions": 229, "deletions": 6}, "files": [{"sha": "ace9cfd523443781bf3b2791aa5483d38355d58c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a6648b1ca4359c5097f625bc6db6409b31f693/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a6648b1ca4359c5097f625bc6db6409b31f693/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c3a6648b1ca4359c5097f625bc6db6409b31f693", "patch": "@@ -1,3 +1,9 @@\n+2015-11-12  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement D0013R2, logical type traits.\n+\n+\t* g++.dg/cpp0x/Wattributes1.C: Adjust.\n+\n 2015-11-12  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* c-c++-common/goacc/data-default-1.c: New."}, {"sha": "dd9011b887025318249797408e176421554c7aae", "filename": "gcc/testsuite/g++.dg/cpp0x/Wattributes1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a6648b1ca4359c5097f625bc6db6409b31f693/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWattributes1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a6648b1ca4359c5097f625bc6db6409b31f693/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWattributes1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWattributes1.C?ref=c3a6648b1ca4359c5097f625bc6db6409b31f693", "patch": "@@ -5,4 +5,4 @@\n #include <new>\n __attribute__((visibility(\"hidden\")))void*operator new(std::size_t); // { dg-warning \"visibility attribute ignored\" }\n \n-// { dg-message \"previous declaration\" \"\" { target *-*-* } 111 }\n+// { dg-message \"previous declaration\" \"\" { target *-*-* } 116 }"}, {"sha": "178ae253a8df1aecfb5554e09a9af4c3d163e7bd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a6648b1ca4359c5097f625bc6db6409b31f693/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a6648b1ca4359c5097f625bc6db6409b31f693/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c3a6648b1ca4359c5097f625bc6db6409b31f693", "patch": "@@ -1,3 +1,20 @@\n+2015-11-12  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement D0013R2, logical type traits.\n+\n+\t* include/experimental/type_traits (conjunction, disjunction,\n+\tnegation, conjunction_v, disjunction_v,\tnegation_v): New.\n+\t* include/std/type_traits (conjunction, disjunction, negation):\n+\tLikewise.\n+\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Likewise.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\t* testsuite/experimental/type_traits/value.cc: Likewise.\n+\t* testsuite/20_util/logical_traits/requirements/explicit_instantiation.cc: New.\n+\t* testsuite/20_util/logical_traits/requirements/typedefs.cc: Likewise.\n+\t* testsuite/20_util/logical_traits/value.cc: Likewise.\n+\n 2015-11-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/experimental/bits/string_view.tcc: Fix doxygen @file."}, {"sha": "e4f3ffef004dc5c9ddc6cdfc769965a8a4127571", "filename": "libstdc++-v3/include/experimental/type_traits", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a6648b1ca4359c5097f625bc6db6409b31f693/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a6648b1ca4359c5097f625bc6db6409b31f693/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftype_traits?ref=c3a6648b1ca4359c5097f625bc6db6409b31f693", "patch": "@@ -271,6 +271,35 @@ template<typename _To, template<typename...> class _Op, typename... _Args>\n   constexpr bool is_detected_convertible_v\n     = is_detected_convertible<_To, _Op, _Args...>::value;\n \n+#define __cpp_lib_experimental_logical_traits 201511\n+\n+template<typename... _Bn>\n+  struct conjunction\n+  : __and_<_Bn...>\n+  { };\n+\n+template<typename... _Bn>\n+  struct disjunction\n+  : __or_<_Bn...>\n+  { };\n+\n+template<typename _Pp>\n+  struct negation\n+  : __not_<_Pp>\n+  { };\n+\n+template<typename... _Bn>\n+  constexpr bool conjunction_v\n+    = conjunction<_Bn...>::value;\n+\n+template<typename... _Bn>\n+  constexpr bool disjunction_v\n+    = disjunction<_Bn...>::value;\n+\n+template<typename _Pp>\n+  constexpr bool negation_v\n+    = negation<_Pp>::value;\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace fundamentals_v2\n } // namespace experimental"}, {"sha": "e5102def906f8a93af99104264cdf04b021586bd", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a6648b1ca4359c5097f625bc6db6409b31f693/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a6648b1ca4359c5097f625bc6db6409b31f693/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=c3a6648b1ca4359c5097f625bc6db6409b31f693", "patch": "@@ -154,6 +154,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public integral_constant<bool, !_Pp::value>\n     { };\n \n+#if __cplusplus > 201402L\n+\n+#define __cpp_lib_logical_traits 201511\n+\n+  template<typename... _Bn>\n+    struct conjunction\n+    : __and_<_Bn...>\n+    { };\n+\n+  template<typename... _Bn>\n+    struct disjunction\n+    : __or_<_Bn...>\n+    { };\n+\n+  template<typename _Pp>\n+    struct negation\n+    : __not_<_Pp>\n+    { };\n+#endif\n+\n   // For several sfinae-friendly trait implementations we transport both the\n   // result information (as the member type) and the failure information (no\n   // member type). This is very similar to std::enable_if, but we cannot use"}, {"sha": "37bc6b10da6967efa83f8005de83c0a424d74f47", "filename": "libstdc++-v3/testsuite/20_util/declval/requirements/1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a6648b1ca4359c5097f625bc6db6409b31f693/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a6648b1ca4359c5097f625bc6db6409b31f693/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc?ref=c3a6648b1ca4359c5097f625bc6db6409b31f693", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 2239 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 2259 }\n \n #include <utility>\n "}, {"sha": "b2b6c71e6cf6920c04de6477dfbe96e4f9bbeb40", "filename": "libstdc++-v3/testsuite/20_util/logical_traits/requirements/explicit_instantiation.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a6648b1ca4359c5097f625bc6db6409b31f693/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Flogical_traits%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a6648b1ca4359c5097f625bc6db6409b31f693/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Flogical_traits%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Flogical_traits%2Frequirements%2Fexplicit_instantiation.cc?ref=c3a6648b1ca4359c5097f625bc6db6409b31f693", "patch": "@@ -0,0 +1,30 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  template struct conjunction<true_type, true_type>;\n+  template struct disjunction<false_type, true_type>;\n+  template struct negation<false_type>;\n+}"}, {"sha": "ea102f87206221346deb84bf727758666f328fe3", "filename": "libstdc++-v3/testsuite/20_util/logical_traits/requirements/typedefs.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a6648b1ca4359c5097f625bc6db6409b31f693/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Flogical_traits%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a6648b1ca4359c5097f625bc6db6409b31f693/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Flogical_traits%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Flogical_traits%2Frequirements%2Ftypedefs.cc?ref=c3a6648b1ca4359c5097f625bc6db6409b31f693", "patch": "@@ -0,0 +1,55 @@\n+// { dg-options \"-std=gnu++17\" }\n+//\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::conjunction<std::true_type, std::true_type>      test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}\n+\n+void test02()\n+{\n+  // Check for required typedefs\n+  typedef std::disjunction<std::false_type, std::true_type>      test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}\n+\n+void test03()\n+{\n+  // Check for required typedefs\n+  typedef std::negation<std::false_type>      test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "1da95a3e49d9092d35b3dd63391e11b70fb6eda5", "filename": "libstdc++-v3/testsuite/20_util/logical_traits/value.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a6648b1ca4359c5097f625bc6db6409b31f693/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Flogical_traits%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a6648b1ca4359c5097f625bc6db6409b31f693/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Flogical_traits%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Flogical_traits%2Fvalue.cc?ref=c3a6648b1ca4359c5097f625bc6db6409b31f693", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+//\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+void test01()\n+{\n+  static_assert(std::negation<std::false_type>{});\n+  static_assert(!std::negation<std::true_type>{});\n+  static_assert(std::conjunction<>{});\n+  static_assert(!std::disjunction<>{});\n+  static_assert(std::conjunction<std::true_type>{});\n+  static_assert(!std::conjunction<std::false_type>{});\n+  static_assert(std::disjunction<std::true_type>{});\n+  static_assert(!std::disjunction<std::false_type>{});\n+  static_assert(std::conjunction<std::true_type, std::true_type>{});\n+  static_assert(!std::conjunction<std::true_type, std::false_type>{});\n+  static_assert(std::disjunction<std::false_type, std::true_type>{});\n+  static_assert(!std::disjunction<std::false_type, std::false_type>{});\n+  static_assert(std::conjunction<std::true_type, std::true_type,\n+                std::true_type>{});\n+  static_assert(!std::conjunction<std::true_type, std::true_type,\n+                std::false_type>{});\n+  static_assert(std::disjunction<std::false_type, std::false_type,\n+                std::true_type>{});\n+  static_assert(!std::disjunction<std::false_type, std::false_type,\n+                std::false_type>{});\n+}"}, {"sha": "9fbd95b2760b389b34ce570f2858bb9de0fbcb5a", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a6648b1ca4359c5097f625bc6db6409b31f693/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a6648b1ca4359c5097f625bc6db6409b31f693/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=c3a6648b1ca4359c5097f625bc6db6409b31f693", "patch": "@@ -48,4 +48,4 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1904 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1924 }"}, {"sha": "8060aeec8544425898f76e5ff0cf8613921c4b87", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a6648b1ca4359c5097f625bc6db6409b31f693/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a6648b1ca4359c5097f625bc6db6409b31f693/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=c3a6648b1ca4359c5097f625bc6db6409b31f693", "patch": "@@ -48,5 +48,5 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1800 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1757 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1820 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 1777 }"}, {"sha": "d52b454fa69cbcbb3bb0b06b4bb9edda5e1452b0", "filename": "libstdc++-v3/testsuite/experimental/type_traits/value.cc", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a6648b1ca4359c5097f625bc6db6409b31f693/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ftype_traits%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a6648b1ca4359c5097f625bc6db6409b31f693/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ftype_traits%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ftype_traits%2Fvalue.cc?ref=c3a6648b1ca4359c5097f625bc6db6409b31f693", "patch": "@@ -21,7 +21,7 @@\n #include <experimental/type_traits>\n \n using namespace std;\n-using namespace std::experimental;\n+using namespace experimental;\n \n // These tests are rather simple, the front-end tests already test\n // variable templates, and the library tests for the underlying\n@@ -322,3 +322,24 @@ static_assert(is_convertible_v<int&, const int&>\n \t      && is_convertible<int&, const int&>::value, \"\");\n static_assert(!is_convertible_v<const int&, int&>\n \t      && !is_convertible<const int&, int&>::value, \"\");\n+\n+static_assert(negation_v<false_type>);\n+static_assert(!negation_v<true_type>);\n+static_assert(conjunction_v<>);\n+static_assert(!disjunction_v<>);\n+static_assert(conjunction_v<true_type>);\n+static_assert(!conjunction_v<false_type>);\n+static_assert(disjunction_v<true_type>);\n+static_assert(!disjunction_v<false_type>);\n+static_assert(conjunction_v<true_type, true_type>);\n+static_assert(!conjunction_v<true_type, false_type>);\n+static_assert(disjunction_v<false_type, true_type>);\n+static_assert(!disjunction_v<false_type, false_type>);\n+static_assert(conjunction_v<true_type, true_type,\n+              true_type>);\n+static_assert(!conjunction_v<true_type, true_type,\n+              false_type>);\n+static_assert(disjunction_v<false_type, false_type,\n+              true_type>);\n+static_assert(!disjunction_v<false_type, false_type,\n+              false_type>);"}]}