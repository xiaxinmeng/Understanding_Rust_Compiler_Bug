{"sha": "2db56bbc02cebb8fd46a62776ef209f4e945ae18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRiNTZiYmMwMmNlYmI4ZmQ0NmE2Mjc3NmVmMjA5ZjRlOTQ1YWUxOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-11-13T21:04:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-11-13T21:04:32Z"}, "message": "re PR debug/27017 (Debug information for static local class members are not emitted)\n\n\tPR c++/27017\n\t* dwarf2out.c (prune_unused_types_walk_local_classes): New function.\n\t(prune_unused_types_walk): Call it for non-perennial local classes.\n\tSet die_mark to 2 if recursing on children.  If die_mark is 1 on\n\tentry, just set it to 2 and recurse on children, don't walk attributes\n\tagain.\n\n\t* g++.dg/debug/dwarf2/localclass1.C: New test.\n\t* g++.dg/debug/dwarf2/localclass2.C: New test.\n\nFrom-SVN: r141829", "tree": {"sha": "5984652bd92b5b512b5029b2254b987961bc499d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5984652bd92b5b512b5029b2254b987961bc499d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2db56bbc02cebb8fd46a62776ef209f4e945ae18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2db56bbc02cebb8fd46a62776ef209f4e945ae18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2db56bbc02cebb8fd46a62776ef209f4e945ae18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2db56bbc02cebb8fd46a62776ef209f4e945ae18/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a231ffe57d357887ff7702b0564f69b5d82fb5fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a231ffe57d357887ff7702b0564f69b5d82fb5fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a231ffe57d357887ff7702b0564f69b5d82fb5fd"}], "stats": {"total": 238, "additions": 230, "deletions": 8}, "files": [{"sha": "7698bddd115388a196c754afa282b0102bd3cd0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2db56bbc02cebb8fd46a62776ef209f4e945ae18/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2db56bbc02cebb8fd46a62776ef209f4e945ae18/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2db56bbc02cebb8fd46a62776ef209f4e945ae18", "patch": "@@ -1,3 +1,12 @@\n+2008-11-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/27017\n+\t* dwarf2out.c (prune_unused_types_walk_local_classes): New function.\n+\t(prune_unused_types_walk): Call it for non-perennial local classes.\n+\tSet die_mark to 2 if recursing on children.  If die_mark is 1 on\n+\tentry, just set it to 2 and recurse on children, don't walk attributes\n+\tagain.\n+\n 2008-11-13  Martin Michlmayr  <tbm@cyrius.com>\n \n \t* c-common.c (warn_about_parentheses): Add missing whitespace"}, {"sha": "337c22e119cf88e6b3151797f82a8ce98f75fbe7", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 63, "deletions": 8, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2db56bbc02cebb8fd46a62776ef209f4e945ae18/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2db56bbc02cebb8fd46a62776ef209f4e945ae18/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=2db56bbc02cebb8fd46a62776ef209f4e945ae18", "patch": "@@ -16248,6 +16248,37 @@ prune_unused_types_mark (dw_die_ref die, int dokids)\n     }\n }\n \n+/* For local classes, look if any static member functions were emitted\n+   and if so, mark them.  */\n+\n+static void\n+prune_unused_types_walk_local_classes (dw_die_ref die)\n+{\n+  dw_die_ref c;\n+\n+  if (die->die_mark == 2)\n+    return;\n+\n+  switch (die->die_tag)\n+    {\n+    case DW_TAG_structure_type:\n+    case DW_TAG_union_type:\n+    case DW_TAG_class_type:\n+      break;\n+\n+    case DW_TAG_subprogram:\n+      if (!get_AT_flag (die, DW_AT_declaration)\n+\t  || die->die_definition != NULL)\n+\tprune_unused_types_mark (die, 1);\n+      return;\n+\n+    default:\n+      return;\n+    }\n+\n+  /* Mark children.  */\n+  FOR_EACH_CHILD (die, c, prune_unused_types_walk_local_classes (c));\n+}\n \n /* Walk the tree DIE and mark types that we actually use.  */\n \n@@ -16256,22 +16287,41 @@ prune_unused_types_walk (dw_die_ref die)\n {\n   dw_die_ref c;\n \n-  /* Don't do anything if this node is already marked.  */\n-  if (die->die_mark)\n+  /* Don't do anything if this node is already marked and\n+     children have been marked as well.  */\n+  if (die->die_mark == 2)\n     return;\n \n   switch (die->die_tag)\n     {\n+    case DW_TAG_structure_type:\n+    case DW_TAG_union_type:\n+    case DW_TAG_class_type:\n+      if (die->die_perennial_p)\n+\tbreak;\n+\n+      for (c = die->die_parent; c; c = c->die_parent)\n+\tif (c->die_tag == DW_TAG_subprogram)\n+\t  break;\n+\n+      /* Finding used static member functions inside of classes\n+\t is needed just for local classes, because for other classes\n+\t static member function DIEs with DW_AT_specification\n+\t are emitted outside of the DW_TAG_*_type.  If we ever change\n+\t it, we'd need to call this even for non-local classes.  */\n+      if (c)\n+\tprune_unused_types_walk_local_classes (die);\n+\n+      /* It's a type node --- don't mark it.  */\n+      return;\n+\n     case DW_TAG_const_type:\n     case DW_TAG_packed_type:\n     case DW_TAG_pointer_type:\n     case DW_TAG_reference_type:\n     case DW_TAG_volatile_type:\n     case DW_TAG_typedef:\n     case DW_TAG_array_type:\n-    case DW_TAG_structure_type:\n-    case DW_TAG_union_type:\n-    case DW_TAG_class_type:\n     case DW_TAG_interface_type:\n     case DW_TAG_friend:\n     case DW_TAG_variant_part:\n@@ -16293,10 +16343,15 @@ prune_unused_types_walk (dw_die_ref die)\n       break;\n   }\n \n-  die->die_mark = 1;\n+  if (die->die_mark == 0)\n+    {\n+      die->die_mark = 1;\n+\n+      /* Now, mark any dies referenced from here.  */\n+      prune_unused_types_walk_attribs (die);\n+    }\n \n-  /* Now, mark any dies referenced from here.  */\n-  prune_unused_types_walk_attribs (die);\n+  die->die_mark = 2;\n \n   /* Mark children.  */\n   FOR_EACH_CHILD (die, c, prune_unused_types_walk (c));"}, {"sha": "6b423ed3a495038509a143a432e5e9fc4666e7f0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2db56bbc02cebb8fd46a62776ef209f4e945ae18/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2db56bbc02cebb8fd46a62776ef209f4e945ae18/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2db56bbc02cebb8fd46a62776ef209f4e945ae18", "patch": "@@ -1,3 +1,9 @@\n+2008-11-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/27017\n+\t* g++.dg/debug/dwarf2/localclass1.C: New test.\n+\t* g++.dg/debug/dwarf2/localclass2.C: New test.\n+\n 2008-11-13  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/compat/struct-layout-1_generate.c (dg-options): Add -mno-mmx"}, {"sha": "c7c55e12d43294873c4474a7c07bd9550981850d", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/localclass1.C", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2db56bbc02cebb8fd46a62776ef209f4e945ae18/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flocalclass1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2db56bbc02cebb8fd46a62776ef209f4e945ae18/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flocalclass1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flocalclass1.C?ref=2db56bbc02cebb8fd46a62776ef209f4e945ae18", "patch": "@@ -0,0 +1,76 @@\n+// PR c++/27017\n+// { dg-do compile }\n+// { dg-options \"-gdwarf-2 -dA -feliminate-unused-debug-types -fno-merge-debug-strings\" }\n+\n+int\n+foo (int arg1)\n+{\n+  struct localstruct1\n+  {\n+    static inline int staticfn1 (int arg2)\n+    {\n+      int var2 = arg2 << 2;\n+      return arg2 + var2;\n+    }\n+    static int staticfn2 (int arg3)\n+    {\n+      int var3 = arg3 << 2;\n+      return arg3 + var3;\n+    }\n+    static inline int staticfn3 (int arg4)\n+    {\n+      int var4 = arg4 << 2;\n+      return arg4 + var4;\n+    }\n+    static int staticfn4 (int arg5)\n+    {\n+      int var5 = arg5 << 2;\n+      return arg5 + var5;\n+    }\n+    int method1 (int arg6)\n+    {\n+      int var6 = arg6 << 2;\n+      return arg6 + var6;\n+    }\n+  };\n+  struct localstruct2\n+  {\n+    static inline int staticfn5 (int arg7)\n+    {\n+      int var7 = arg7 << 2;\n+      return arg7 + var7;\n+    }\n+    static int staticfn6 (int arg8)\n+    {\n+      int var8 = arg8 << 2;\n+      return arg8 + var8;\n+    }\n+  };\n+  return localstruct1::staticfn1 (arg1) + localstruct1::staticfn2 (arg1);\n+}\n+\n+int\n+main ()\n+{\n+  return foo (1) - 10;\n+}\n+\n+// { dg-final { scan-assembler \"main\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"foo\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"staticfn1\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"staticfn2\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"staticfn3\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"staticfn4\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"staticfn5\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"staticfn6\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"method1\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"arg1\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"arg2\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"arg3\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"arg4\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"arg5\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"arg6\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"arg7\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"arg8\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"localstruct1\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"localstruct2\\[^\\n\\r\\]*DW_AT_name\" } }"}, {"sha": "6e9a0664f17fc73c75dd7a07b60113d7ee096e31", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/localclass2.C", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2db56bbc02cebb8fd46a62776ef209f4e945ae18/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flocalclass2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2db56bbc02cebb8fd46a62776ef209f4e945ae18/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flocalclass2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flocalclass2.C?ref=2db56bbc02cebb8fd46a62776ef209f4e945ae18", "patch": "@@ -0,0 +1,76 @@\n+// PR c++/27017\n+// { dg-do compile }\n+// { dg-options \"-gdwarf-2 -dA -O2 -feliminate-unused-debug-types -fno-merge-debug-strings\" }\n+\n+int\n+foo (int arg1)\n+{\n+  struct localstruct1\n+  {\n+    static inline int staticfn1 (int arg2)\n+    {\n+      int var2 = arg2 << 2;\n+      return arg2 + var2;\n+    }\n+    static int staticfn2 (int arg3)\n+    {\n+      int var3 = arg3 << 2;\n+      return arg3 + var3;\n+    }\n+    static inline int staticfn3 (int arg4)\n+    {\n+      int var4 = arg4 << 2;\n+      return arg4 + var4;\n+    }\n+    static int staticfn4 (int arg5)\n+    {\n+      int var5 = arg5 << 2;\n+      return arg5 + var5;\n+    }\n+    int method1 (int arg6)\n+    {\n+      int var6 = arg6 << 2;\n+      return arg6 + var6;\n+    }\n+  };\n+  struct localstruct2\n+  {\n+    static inline int staticfn5 (int arg7)\n+    {\n+      int var7 = arg7 << 2;\n+      return arg7 + var7;\n+    }\n+    static int staticfn6 (int arg8)\n+    {\n+      int var8 = arg8 << 2;\n+      return arg8 + var8;\n+    }\n+  };\n+  return localstruct1::staticfn1 (arg1) + localstruct1::staticfn2 (arg1);\n+}\n+\n+int\n+main ()\n+{\n+  return foo (1) - 10;\n+}\n+\n+// { dg-final { scan-assembler \"main\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"foo\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"staticfn1\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"staticfn2\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"staticfn3\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"staticfn4\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"staticfn5\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"staticfn6\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"method1\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"arg1\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"arg2\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"arg3\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"arg4\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"arg5\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"arg6\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"arg7\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"arg8\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler \"localstruct1\\[^\\n\\r\\]*DW_AT_name\" } }\n+// { dg-final { scan-assembler-not \"localstruct2\\[^\\n\\r\\]*DW_AT_name\" } }"}]}