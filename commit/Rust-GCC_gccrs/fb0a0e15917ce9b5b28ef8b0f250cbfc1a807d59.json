{"sha": "fb0a0e15917ce9b5b28ef8b0f250cbfc1a807d59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIwYTBlMTU5MTdjZTliNWIyOGVmOGIwZjI1MGNiZmMxYTgwN2Q1OQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-11-16T22:31:28Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-11-16T22:31:28Z"}, "message": "re PR libfortran/33583 (FAIL: gfortran.dg/gamma_1.f90)\n\n\tPR libfortran/33583\n\tPR libfortran/33698\n\n\t* intrinsics/c99_functions.c (tgamma, tgammaf, lgamma, lgammaf):\n\tNew fallback functions.\n\t* c99_protos.h (tgamma, tgammaf, lgamma, lgammaf): New prototypes.\n\t* configure.ac: Add checks for tgamma, tgammaf, tgammal, lgamma,\n\tlgammaf and lgammal.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\nFrom-SVN: r130245", "tree": {"sha": "4888b0b0ef26e89b144de8f9e6446cfb15809d97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4888b0b0ef26e89b144de8f9e6446cfb15809d97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb0a0e15917ce9b5b28ef8b0f250cbfc1a807d59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb0a0e15917ce9b5b28ef8b0f250cbfc1a807d59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb0a0e15917ce9b5b28ef8b0f250cbfc1a807d59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb0a0e15917ce9b5b28ef8b0f250cbfc1a807d59/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a58b9ad36aca0dfe198d8e18c9bdb38eddb4a8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a58b9ad36aca0dfe198d8e18c9bdb38eddb4a8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a58b9ad36aca0dfe198d8e18c9bdb38eddb4a8c"}], "stats": {"total": 852, "additions": 852, "deletions": 0}, "files": [{"sha": "0fecb6f0a2d9959f10c28bfa595d91821cbff4c2", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb0a0e15917ce9b5b28ef8b0f250cbfc1a807d59/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb0a0e15917ce9b5b28ef8b0f250cbfc1a807d59/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=fb0a0e15917ce9b5b28ef8b0f250cbfc1a807d59", "patch": "@@ -1,3 +1,15 @@\n+2007-11-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR libfortran/33583\n+\tPR libfortran/33698\n+\t* intrinsics/c99_functions.c (tgamma, tgammaf, lgamma, lgammaf):\n+\tNew fallback functions.\n+\t* c99_protos.h (tgamma, tgammaf, lgamma, lgammaf): New prototypes.\n+\t* configure.ac: Add checks for tgamma, tgammaf, tgammal, lgamma,\n+\tlgammaf and lgammal.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\n 2007-11-08  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* mk-kinds-h.sh: Change sed syntax."}, {"sha": "59cbe4cac14a3c8ba2e5729df6cc5ddc85b246c6", "filename": "libgfortran/c99_protos.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb0a0e15917ce9b5b28ef8b0f250cbfc1a807d59/libgfortran%2Fc99_protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb0a0e15917ce9b5b28ef8b0f250cbfc1a807d59/libgfortran%2Fc99_protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fc99_protos.h?ref=fb0a0e15917ce9b5b28ef8b0f250cbfc1a807d59", "patch": "@@ -502,5 +502,27 @@ extern long double complex ctanl (long double complex);\n #endif\n \n \n+/* Gamma-related prototypes.  */\n+#if !defined(HAVE_TGAMMA)\n+#define HAVE_TGAMMA 1\n+extern double tgamma (double);\n+#endif\n+\n+#if !defined(HAVE_LGAMMA)\n+#define HAVE_LGAMMA 1\n+extern double lgamma (double);\n+#endif\n+\n+#if defined(HAVE_TGAMMA) && !defined(HAVE_TGAMMAF)\n+#define HAVE_TGAMMAF 1\n+extern float tgammaf (float);\n+#endif\n+\n+#if defined(HAVE_LGAMMA) && !defined(HAVE_LGAMMAF)\n+#define HAVE_LGAMMAF 1\n+extern float lgammaf (float);\n+#endif\n+\n+\n #endif  /* C99_PROTOS_H  */\n "}, {"sha": "72d46d9e3650bb456f571c097e016b1cbeabc3a9", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb0a0e15917ce9b5b28ef8b0f250cbfc1a807d59/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb0a0e15917ce9b5b28ef8b0f250cbfc1a807d59/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=fb0a0e15917ce9b5b28ef8b0f250cbfc1a807d59", "patch": "@@ -483,6 +483,15 @@\n /* libm includes ldexpl */\n #undef HAVE_LDEXPL\n \n+/* libm includes lgamma */\n+#undef HAVE_LGAMMA\n+\n+/* libm includes lgammaf */\n+#undef HAVE_LGAMMAF\n+\n+/* libm includes lgammal */\n+#undef HAVE_LGAMMAL\n+\n /* Define to 1 if you have the `link' function. */\n #undef HAVE_LINK\n \n@@ -705,6 +714,15 @@\n /* libm includes tanl */\n #undef HAVE_TANL\n \n+/* libm includes tgamma */\n+#undef HAVE_TGAMMA\n+\n+/* libm includes tgammaf */\n+#undef HAVE_TGAMMAF\n+\n+/* libm includes tgammal */\n+#undef HAVE_TGAMMAL\n+\n /* Define to 1 if you have the `time' function. */\n #undef HAVE_TIME\n "}, {"sha": "f33516db47f75daa887c71e885b30fa8f30d7a50", "filename": "libgfortran/configure", "status": "modified", "additions": 462, "deletions": 0, "changes": 462, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb0a0e15917ce9b5b28ef8b0f250cbfc1a807d59/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb0a0e15917ce9b5b28ef8b0f250cbfc1a807d59/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=fb0a0e15917ce9b5b28ef8b0f250cbfc1a807d59", "patch": "@@ -31425,6 +31425,468 @@ _ACEOF\n \n fi\n \n+echo \"$as_me:$LINENO: checking for tgamma in -lm\" >&5\n+echo $ECHO_N \"checking for tgamma in -lm... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_m_tgamma+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char tgamma ();\n+int\n+main ()\n+{\n+tgamma ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_m_tgamma=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_m_tgamma=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_m_tgamma\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_m_tgamma\" >&6\n+if test $ac_cv_lib_m_tgamma = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_TGAMMA 1\n+_ACEOF\n+\n+fi\n+\n+echo \"$as_me:$LINENO: checking for tgammaf in -lm\" >&5\n+echo $ECHO_N \"checking for tgammaf in -lm... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_m_tgammaf+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char tgammaf ();\n+int\n+main ()\n+{\n+tgammaf ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_m_tgammaf=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_m_tgammaf=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_m_tgammaf\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_m_tgammaf\" >&6\n+if test $ac_cv_lib_m_tgammaf = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_TGAMMAF 1\n+_ACEOF\n+\n+fi\n+\n+echo \"$as_me:$LINENO: checking for tgammal in -lm\" >&5\n+echo $ECHO_N \"checking for tgammal in -lm... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_m_tgammal+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char tgammal ();\n+int\n+main ()\n+{\n+tgammal ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_m_tgammal=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_m_tgammal=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_m_tgammal\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_m_tgammal\" >&6\n+if test $ac_cv_lib_m_tgammal = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_TGAMMAL 1\n+_ACEOF\n+\n+fi\n+\n+echo \"$as_me:$LINENO: checking for lgamma in -lm\" >&5\n+echo $ECHO_N \"checking for lgamma in -lm... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_m_lgamma+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char lgamma ();\n+int\n+main ()\n+{\n+lgamma ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_m_lgamma=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_m_lgamma=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_m_lgamma\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_m_lgamma\" >&6\n+if test $ac_cv_lib_m_lgamma = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_LGAMMA 1\n+_ACEOF\n+\n+fi\n+\n+echo \"$as_me:$LINENO: checking for lgammaf in -lm\" >&5\n+echo $ECHO_N \"checking for lgammaf in -lm... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_m_lgammaf+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char lgammaf ();\n+int\n+main ()\n+{\n+lgammaf ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_m_lgammaf=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_m_lgammaf=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_m_lgammaf\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_m_lgammaf\" >&6\n+if test $ac_cv_lib_m_lgammaf = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_LGAMMAF 1\n+_ACEOF\n+\n+fi\n+\n+echo \"$as_me:$LINENO: checking for lgammal in -lm\" >&5\n+echo $ECHO_N \"checking for lgammal in -lm... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_m_lgammal+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char lgammal ();\n+int\n+main ()\n+{\n+lgammal ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_m_lgammal=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_m_lgammal=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_m_lgammal\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_m_lgammal\" >&6\n+if test $ac_cv_lib_m_lgammal = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_LGAMMAL 1\n+_ACEOF\n+\n+fi\n+\n \n # On AIX, clog is present in libm as __clog\n echo \"$as_me:$LINENO: checking for __clog in -lm\" >&5"}, {"sha": "a1caf3b47eb190c64e4af78726e91c3c045cfeb2", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb0a0e15917ce9b5b28ef8b0f250cbfc1a807d59/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb0a0e15917ce9b5b28ef8b0f250cbfc1a807d59/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=fb0a0e15917ce9b5b28ef8b0f250cbfc1a807d59", "patch": "@@ -379,6 +379,12 @@ AC_CHECK_LIB([m],[y1l],[AC_DEFINE([HAVE_Y1L],[1],[libm includes y1l])])\n AC_CHECK_LIB([m],[ynf],[AC_DEFINE([HAVE_YNF],[1],[libm includes ynf])])\n AC_CHECK_LIB([m],[yn],[AC_DEFINE([HAVE_YN],[1],[libm includes yn])])\n AC_CHECK_LIB([m],[ynl],[AC_DEFINE([HAVE_YNL],[1],[libm includes ynl])])\n+AC_CHECK_LIB([m],[tgamma],[AC_DEFINE([HAVE_TGAMMA],[1],[libm includes tgamma])])\n+AC_CHECK_LIB([m],[tgammaf],[AC_DEFINE([HAVE_TGAMMAF],[1],[libm includes tgammaf])])\n+AC_CHECK_LIB([m],[tgammal],[AC_DEFINE([HAVE_TGAMMAL],[1],[libm includes tgammal])])\n+AC_CHECK_LIB([m],[lgamma],[AC_DEFINE([HAVE_LGAMMA],[1],[libm includes lgamma])])\n+AC_CHECK_LIB([m],[lgammaf],[AC_DEFINE([HAVE_LGAMMAF],[1],[libm includes lgammaf])])\n+AC_CHECK_LIB([m],[lgammal],[AC_DEFINE([HAVE_LGAMMAL],[1],[libm includes lgammal])])\n \n # On AIX, clog is present in libm as __clog\n AC_CHECK_LIB([m],[__clog],[AC_DEFINE([HAVE_CLOG],[1],[libm includes clog])])"}, {"sha": "13d55036ac9bdc6b4275d0295a074c60b4a24aaf", "filename": "libgfortran/intrinsics/c99_functions.c", "status": "modified", "additions": 332, "deletions": 0, "changes": 332, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb0a0e15917ce9b5b28ef8b0f250cbfc1a807d59/libgfortran%2Fintrinsics%2Fc99_functions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb0a0e15917ce9b5b28ef8b0f250cbfc1a807d59/libgfortran%2Fintrinsics%2Fc99_functions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fc99_functions.c?ref=fb0a0e15917ce9b5b28ef8b0f250cbfc1a807d59", "patch": "@@ -1414,3 +1414,335 @@ ctanl (long double complex a)\n }\n #endif\n \n+\n+#if !defined(HAVE_TGAMMA)\n+#define HAVE_TGAMMA 1\n+\n+extern double tgamma (double); \n+\n+/* Fallback tgamma() function. Uses the algorithm from\n+   http://www.netlib.org/specfun/gamma and references therein.  */\n+\n+#undef SQRTPI\n+#define SQRTPI 0.9189385332046727417803297\n+\n+#undef PI\n+#define PI 3.1415926535897932384626434\n+\n+double\n+tgamma (double x)\n+{\n+  int i, n, parity;\n+  double fact, res, sum, xden, xnum, y, y1, ysq, z;\n+\n+  static double p[8] = {\n+    -1.71618513886549492533811e0,  2.47656508055759199108314e1,\n+    -3.79804256470945635097577e2,  6.29331155312818442661052e2,\n+     8.66966202790413211295064e2, -3.14512729688483675254357e4,\n+    -3.61444134186911729807069e4,  6.64561438202405440627855e4 };\n+\n+  static double q[8] = {\n+    -3.08402300119738975254353e1,  3.15350626979604161529144e2,\n+    -1.01515636749021914166146e3, -3.10777167157231109440444e3,\n+     2.25381184209801510330112e4,  4.75584627752788110767815e3,\n+    -1.34659959864969306392456e5, -1.15132259675553483497211e5 };\n+\n+  static double c[7] = {             -1.910444077728e-03,\n+     8.4171387781295e-04,            -5.952379913043012e-04,\n+     7.93650793500350248e-04,        -2.777777777777681622553e-03,\n+     8.333333333333333331554247e-02,  5.7083835261e-03 };\n+\n+  static const double xminin = 2.23e-308;\n+  static const double xbig = 171.624;\n+  static const double xnan = __builtin_nan (\"0x0\"), xinf = __builtin_inf ();\n+  static double eps = 0;\n+  \n+  if (eps == 0)\n+    eps = nextafter(1., 2.) - 1.;\n+\n+  parity = 0;\n+  fact = 1;\n+  n = 0;\n+  y = x;\n+\n+  if (__builtin_isnan (x))\n+    return x;\n+\n+  if (y <= 0)\n+    {\n+      y = -x;\n+      y1 = trunc(y);\n+      res = y - y1;\n+\n+      if (res != 0)\n+\t{\n+\t  if (y1 != trunc(y1*0.5l)*2)\n+\t    parity = 1;\n+\t  fact = -PI / sin(PI*res);\n+\t  y = y + 1;\n+\t}\n+      else\n+\treturn x == 0 ? copysign (xinf, x) : xnan;\n+    }\n+\n+  if (y < eps)\n+    {\n+      if (y >= xminin)\n+        res = 1 / y;\n+      else\n+\treturn xinf;\n+    }\n+  else if (y < 13)\n+    {\n+      y1 = y;\n+      if (y < 1)\n+\t{\n+\t  z = y;\n+\t  y = y + 1;\n+\t}\n+      else\n+\t{\n+\t  n = (int)y - 1;\n+\t  y = y - n;\n+\t  z = y - 1;\n+\t}\n+\n+      xnum = 0;\n+      xden = 1;\n+      for (i = 0; i < 8; i++)\n+\t{\n+\t  xnum = (xnum + p[i]) * z;\n+\t  xden = xden * z + q[i];\n+\t}\n+\n+      res = xnum / xden + 1;\n+\n+      if (y1 < y)\n+        res = res / y1;\n+      else if (y1 > y)\n+\tfor (i = 1; i <= n; i++)\n+\t  {\n+\t    res = res * y;\n+\t    y = y + 1;\n+\t  }\n+    }\n+  else\n+    {\n+      if (y < xbig)\n+\t{\n+\t  ysq = y * y;\n+\t  sum = c[6];\n+\t  for (i = 0; i < 6; i++)\n+\t    sum = sum / ysq + c[i];\n+\n+\t  sum = sum/y - y + SQRTPI;\n+\t  sum = sum + (y - 0.5) * log(y);\n+\t  res = exp(sum);\n+\t}\n+      else\n+\treturn x < 0 ? xnan : xinf;\n+    }\n+\n+  if (parity)\n+    res = -res;\n+  if (fact != 1)\n+    res = fact / res;\n+\n+  return res;\n+}\n+#endif\n+\n+\n+\n+#if !defined(HAVE_LGAMMA)\n+#define HAVE_LGAMMA 1\n+\n+extern double lgamma (double); \n+\n+/* Fallback lgamma() function. Uses the algorithm from\n+   http://www.netlib.org/specfun/algama and references therein, \n+   except for negative arguments (where netlib would return +Inf)\n+   where we use the following identity:\n+       lgamma(y) = log(pi/(|y*sin(pi*y)|)) - lgamma(-y)\n+ */\n+\n+double\n+lgamma (double y)\n+{\n+\n+#undef SQRTPI\n+#define SQRTPI 0.9189385332046727417803297\n+\n+#undef PI\n+#define PI 3.1415926535897932384626434\n+\n+#define PNT68  0.6796875\n+#define D1    -0.5772156649015328605195174\n+#define D2     0.4227843350984671393993777\n+#define D4     1.791759469228055000094023\n+\n+  static double p1[8] = {\n+              4.945235359296727046734888e0, 2.018112620856775083915565e2,\n+              2.290838373831346393026739e3, 1.131967205903380828685045e4,\n+              2.855724635671635335736389e4, 3.848496228443793359990269e4,\n+              2.637748787624195437963534e4, 7.225813979700288197698961e3 };\n+  static double q1[8] = {\n+              6.748212550303777196073036e1,  1.113332393857199323513008e3,\n+              7.738757056935398733233834e3,  2.763987074403340708898585e4,\n+              5.499310206226157329794414e4,  6.161122180066002127833352e4,\n+              3.635127591501940507276287e4,  8.785536302431013170870835e3 };\n+  static double p2[8] = {\n+              4.974607845568932035012064e0,  5.424138599891070494101986e2,\n+              1.550693864978364947665077e4,  1.847932904445632425417223e5,\n+              1.088204769468828767498470e6,  3.338152967987029735917223e6,\n+              5.106661678927352456275255e6,  3.074109054850539556250927e6 };\n+  static double q2[8] = {\n+              1.830328399370592604055942e2,  7.765049321445005871323047e3,\n+              1.331903827966074194402448e5,  1.136705821321969608938755e6,\n+              5.267964117437946917577538e6,  1.346701454311101692290052e7,\n+              1.782736530353274213975932e7,  9.533095591844353613395747e6 };\n+  static double p4[8] = {\n+              1.474502166059939948905062e4,  2.426813369486704502836312e6,\n+              1.214755574045093227939592e8,  2.663432449630976949898078e9,\n+              2.940378956634553899906876e10, 1.702665737765398868392998e11,\n+              4.926125793377430887588120e11, 5.606251856223951465078242e11 };\n+  static double q4[8] = {\n+              2.690530175870899333379843e3,  6.393885654300092398984238e5,\n+              4.135599930241388052042842e7,  1.120872109616147941376570e9,\n+              1.488613728678813811542398e10, 1.016803586272438228077304e11,\n+              3.417476345507377132798597e11, 4.463158187419713286462081e11 };\n+  static double  c[7] = {\n+             -1.910444077728e-03,            8.4171387781295e-04,\n+             -5.952379913043012e-04,         7.93650793500350248e-04,\n+             -2.777777777777681622553e-03,   8.333333333333333331554247e-02,\n+              5.7083835261e-03 };\n+\n+  static double xbig = 2.55e305, xinf = __builtin_inf (), eps = 0,\n+\t\tfrtbig = 2.25e76;\n+\n+  int i;\n+  double corr, res, xden, xm1, xm2, xm4, xnum, ysq;\n+\n+  if (eps == 0)\n+    eps = __builtin_nextafter(1., 2.) - 1.;\n+\n+  if ((y > 0) && (y <= xbig))\n+    {\n+      if (y <= eps)\n+\tres = -log(y);\n+      else if (y <= 1.5)\n+\t{\n+\t  if (y < PNT68)\n+\t    {\n+\t      corr = -log(y);\n+\t      xm1 = y;\n+\t    }\n+\t  else\n+\t    {\n+\t      corr = 0;\n+\t      xm1 = (y - 0.5) - 0.5;\n+\t    }\n+\n+\t  if ((y <= 0.5) || (y >= PNT68))\n+\t    {\n+\t      xden = 1;\n+\t      xnum = 0;\n+\t      for (i = 0; i < 8; i++)\n+\t\t{\n+\t\t  xnum = xnum*xm1 + p1[i];\n+\t\t  xden = xden*xm1 + q1[i];\n+\t\t}\n+\t      res = corr + (xm1 * (D1 + xm1*(xnum/xden)));\n+\t    }\n+\t  else\n+\t    {\n+\t      xm2 = (y - 0.5) - 0.5;\n+\t      xden = 1;\n+\t      xnum = 0;\n+\t      for (i = 0; i < 8; i++)\n+\t\t{\n+\t\t  xnum = xnum*xm2 + p2[i];\n+\t\t  xden = xden*xm2 + q2[i];\n+\t\t}\n+\t      res = corr + xm2 * (D2 + xm2*(xnum/xden));\n+\t    }\n+\t}\n+      else if (y <= 4)\n+\t{\n+\t  xm2 = y - 2;\n+\t  xden = 1;\n+\t  xnum = 0;\n+\t  for (i = 0; i < 8; i++)\n+\t    {\n+\t      xnum = xnum*xm2 + p2[i];\n+\t      xden = xden*xm2 + q2[i];\n+\t    }\n+\t  res = xm2 * (D2 + xm2*(xnum/xden));\n+\t}\n+      else if (y <= 12)\n+\t{\n+\t  xm4 = y - 4;\n+\t  xden = -1;\n+\t  xnum = 0;\n+\t  for (i = 0; i < 8; i++)\n+\t    {\n+\t      xnum = xnum*xm4 + p4[i];\n+\t      xden = xden*xm4 + q4[i];\n+\t    }\n+\t  res = D4 + xm4*(xnum/xden);\n+\t}\n+      else\n+\t{\n+\t  res = 0;\n+\t  if (y <= frtbig)\n+\t    {\n+\t      res = c[6];\n+\t      ysq = y * y;\n+\t      for (i = 0; i < 6; i++)\n+\t\tres = res / ysq + c[i];\n+\t    }\n+\t  res = res/y;\n+\t  corr = log(y);\n+\t  res = res + SQRTPI - 0.5*corr;\n+\t  res = res + y*(corr-1);\n+\t}\n+    }\n+  else if (y < 0 && __builtin_floor (y) != y)\n+    {\n+      /* lgamma(y) = log(pi/(|y*sin(pi*y)|)) - lgamma(-y)\n+         For abs(y) very close to zero, we use a series expansion to\n+\t the first order in y to avoid overflow.  */\n+      if (y > -1.e-100)\n+        res = -2 * log (fabs (y)) - lgamma (-y);\n+      else\n+        res = log (PI / fabs (y * sin (PI * y))) - lgamma (-y);\n+    }\n+  else\n+    res = xinf;\n+\n+  return res;\n+}\n+#endif\n+\n+\n+#if defined(HAVE_TGAMMA) && !defined(HAVE_TGAMMAF)\n+#define HAVE_TGAMMAF 1\n+extern float tgammaf (float);\n+\n+float\n+tgammaf (float x)\n+{\n+  return (float) tgamma ((double) x);\n+}\n+#endif\n+\n+#if defined(HAVE_LGAMMA) && !defined(HAVE_LGAMMAF)\n+#define HAVE_LGAMMAF 1\n+extern float lgammaf (float);\n+\n+float\n+lgammaf (float x)\n+{\n+  return (float) lgamma ((double) x);\n+}\n+#endif"}]}