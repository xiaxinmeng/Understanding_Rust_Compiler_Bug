{"sha": "598876574184e745defee4b36dc2408068b7a22e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk4ODc2NTc0MTg0ZTc0NWRlZmVlNGIzNmRjMjQwODA2OGI3YTIyZQ==", "commit": {"author": {"name": "yaozhongxiao", "email": "yaozhongxiao@linux.alibaba.com", "date": "2021-02-03T15:49:30Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-02-03T15:49:30Z"}, "message": "libstdc++: Improve \"find_first/last_set\" for NEON\n\nThe find_first_set and find_last_set method is not optimal for neon, it\nneeds to be improved by synthesized with horizontal adds(vaddv) which\nwill reduce the generated assembly code. In the following cases,\nvaddvq_s16 will generate 2 instructions but vpadd_s16 will generate 4\ninstructions:\n\n # vaddvq_s16\n    vaddvq_s16(__asint);\n    //  addv    h0, v1.8h\n    //  smov    w1, v0.h[0]\n # vpadd_s16\n    vpaddq_s16(vpaddq_s16(vpaddq_s16(__asint, __zero), __zero), __zero)[0]\n    // addp v1.8h,v1.8h,v2.8h\n    // addp v1.8h,v1.8h,v2.8h\n    // addp v1.8h,v1.8h,v2.8h\n    // smov    w1, v1.h[0]\n #\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/bits/simd_neon.h: Replace repeated vpadd\n\tcalls with a single vaddv for aarch64.", "tree": {"sha": "ec9e5db823dea825e16f10418c11a0bd8c697d43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec9e5db823dea825e16f10418c11a0bd8c697d43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/598876574184e745defee4b36dc2408068b7a22e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/598876574184e745defee4b36dc2408068b7a22e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/598876574184e745defee4b36dc2408068b7a22e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/598876574184e745defee4b36dc2408068b7a22e/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3de9bd16c91c5fc050961db6887880b303b3a630", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3de9bd16c91c5fc050961db6887880b303b3a630", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3de9bd16c91c5fc050961db6887880b303b3a630"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "7f472e8864932e9a38b7bc2d5d238c2ba6fea806", "filename": "libstdc++-v3/include/experimental/bits/simd_neon.h", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598876574184e745defee4b36dc2408068b7a22e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598876574184e745defee4b36dc2408068b7a22e/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_neon.h?ref=598876574184e745defee4b36dc2408068b7a22e", "patch": "@@ -311,8 +311,7 @@ struct _MaskImplNeonMixin\n \t\t  });\n \t      __asint &= __bitsel;\n #ifdef __aarch64__\n-\t      return vpaddq_s16(vpaddq_s16(vpaddq_s16(__asint, __zero), __zero),\n-\t\t\t\t__zero)[0];\n+\t      return vaddvq_s16(__asint);\n #else\n \t      return vpadd_s16(\n \t\tvpadd_s16(vpadd_s16(__lo64(__asint), __hi64(__asint)), __zero),\n@@ -328,7 +327,7 @@ struct _MaskImplNeonMixin\n \t\t  });\n \t      __asint &= __bitsel;\n #ifdef __aarch64__\n-\t      return vpaddq_s32(vpaddq_s32(__asint, __zero), __zero)[0];\n+\t      return vaddvq_s32(__asint);\n #else\n \t      return vpadd_s32(vpadd_s32(__lo64(__asint), __hi64(__asint)),\n \t\t\t       __zero)[0];\n@@ -351,8 +350,12 @@ struct _MaskImplNeonMixin\n \t\t    return static_cast<_I>(__i < _Np ? 1 << __i : 0);\n \t\t  });\n \t      __asint &= __bitsel;\n+#ifdef __aarch64__\n+\t      return vaddv_s8(__asint);\n+#else\n \t      return vpadd_s8(vpadd_s8(vpadd_s8(__asint, __zero), __zero),\n \t\t\t      __zero)[0];\n+#endif\n \t    }\n \t  else if constexpr (sizeof(_Tp) == 2)\n \t    {\n@@ -362,12 +365,20 @@ struct _MaskImplNeonMixin\n \t\t    return static_cast<_I>(__i < _Np ? 1 << __i : 0);\n \t\t  });\n \t      __asint &= __bitsel;\n+#ifdef __aarch64__\n+\t      return vaddv_s16(__asint);\n+#else\n \t      return vpadd_s16(vpadd_s16(__asint, __zero), __zero)[0];\n+#endif\n \t    }\n \t  else if constexpr (sizeof(_Tp) == 4)\n \t    {\n \t      __asint &= __make_vector<_I>(0x1, 0x2);\n+#ifdef __aarch64__\n+\t      return vaddv_s32(__asint);\n+#else\n \t      return vpadd_s32(__asint, __zero)[0];\n+#endif\n \t    }\n \t  else\n \t    __assert_unreachable<_Tp>();"}]}