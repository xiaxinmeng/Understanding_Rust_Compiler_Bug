{"sha": "7ee6e37a8e59789aba4dac00f9a08adfdc084bbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VlNmUzN2E4ZTU5Nzg5YWJhNGRhYzAwZjlhMDhhZGZkYzA4NGJiYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2018-08-30T12:32:45Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2018-08-30T12:32:45Z"}, "message": "tree.c (find_decls_types_r): Walk also TYPE_NEXT_PTR_TO and TYPE_NEXT_REF_TO.\n\n\t* tree.c (find_decls_types_r): Walk also TYPE_NEXT_PTR_TO\n\tand TYPE_NEXT_REF_TO.\n\nFrom-SVN: r263978", "tree": {"sha": "0c1d75879236fcc09f3de54cfb855c84fe86ec75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c1d75879236fcc09f3de54cfb855c84fe86ec75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ee6e37a8e59789aba4dac00f9a08adfdc084bbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ee6e37a8e59789aba4dac00f9a08adfdc084bbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ee6e37a8e59789aba4dac00f9a08adfdc084bbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ee6e37a8e59789aba4dac00f9a08adfdc084bbb/comments", "author": null, "committer": null, "parents": [{"sha": "0c05d45624c68116a6fd82e8977ff8363ff9e4d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c05d45624c68116a6fd82e8977ff8363ff9e4d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c05d45624c68116a6fd82e8977ff8363ff9e4d2"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "fa2339b170c92d02ea785791afa243059c016f1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee6e37a8e59789aba4dac00f9a08adfdc084bbb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee6e37a8e59789aba4dac00f9a08adfdc084bbb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ee6e37a8e59789aba4dac00f9a08adfdc084bbb", "patch": "@@ -1,3 +1,17 @@\n+2018-08-29  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree.c (find_decls_types_r): Walk also TYPE_NEXT_PTR_TO\n+\tand TYPE_NEXT_REF_TO.\n+\n+2018-08-29  Jan Hubicka  <jh@suse.cz>\n+\n+\t* sreal.h (SREAL_PART_BITS): Change to 31; remove seemingly unnecessary\n+\tcomment that it has to be even number.\n+\t(class sreal): Change m_sig type to int32_t.\n+\t* sreal.c (sreal::dump, sreal::to_int, opreator+, operator-): Use\n+\tint64_t for temporary calculations.\n+\t(sreal_verify_basics): Drop one bit from minimum and maximum.\n+\n 2018-08-30  Tamar Christina  <tamar.christina@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_expand_movmem): Set TImode max."}, {"sha": "c3ac8f36d55e7f10132e20f75bb9766f2d68aa6b", "filename": "gcc/tree.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee6e37a8e59789aba4dac00f9a08adfdc084bbb/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee6e37a8e59789aba4dac00f9a08adfdc084bbb/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=7ee6e37a8e59789aba4dac00f9a08adfdc084bbb", "patch": "@@ -5519,9 +5519,14 @@ find_decls_types_r (tree *tp, int *ws, void *data)\n       fld_worklist_push (TYPE_POINTER_TO (t), fld);\n       fld_worklist_push (TYPE_REFERENCE_TO (t), fld);\n       fld_worklist_push (TYPE_NAME (t), fld);\n-      /* Do not walk TYPE_NEXT_PTR_TO or TYPE_NEXT_REF_TO.  We do not stream\n-\t them and thus do not and want not to reach unused pointer types\n-\t this way.  */\n+      /* While we do not stream TYPE_POINTER_TO and TYPE_REFERENCE_TO\n+\t lists, we may look types up in these lists and use them while\n+\t optimizing the function body.  Thus we need to free lang data\n+\t in them.  */\n+      if (TREE_CODE (t) == POINTER_TYPE)\n+        fld_worklist_push (TYPE_NEXT_PTR_TO (t), fld);\n+      if (TREE_CODE (t) == REFERENCE_TYPE)\n+        fld_worklist_push (TYPE_NEXT_REF_TO (t), fld);\n       if (!POINTER_TYPE_P (t))\n \tfld_worklist_push (TYPE_MIN_VALUE_RAW (t), fld);\n       /* TYPE_MAX_VALUE_RAW is TYPE_BINFO for record types.  */"}]}