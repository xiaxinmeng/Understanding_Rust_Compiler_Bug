{"sha": "b0656d8b259f9035873700b7fc657f495044b75d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA2NTZkOGIyNTlmOTAzNTg3MzcwMGI3ZmM2NTdmNDk1MDQ0Yjc1ZA==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@specifixinc.com", "date": "2003-12-18T02:45:18Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2003-12-18T02:45:18Z"}, "message": "Fix for IA-64 glibc math test failures.\n\n* Makefile.in (gcse.o): Add $(TREE_H) to dependencies.\n* gcse.c: Include tree.h.\n(implicit_set_cond_p): New.\n(find_implicit_sets): Call it.\n* gcc.c-torture/execute/ieee/mzero5.c: New.\n\nCo-Authored-By: Roger Sayle <roger@eyesopen.com>\n\nFrom-SVN: r74769", "tree": {"sha": "f8a4495008af06d5fe2d1fffdca10a4d0c8a120a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8a4495008af06d5fe2d1fffdca10a4d0c8a120a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0656d8b259f9035873700b7fc657f495044b75d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0656d8b259f9035873700b7fc657f495044b75d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0656d8b259f9035873700b7fc657f495044b75d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0656d8b259f9035873700b7fc657f495044b75d/comments", "author": null, "committer": null, "parents": [{"sha": "d4ac5ffabb92df767dcf8296802ea292f66f072e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4ac5ffabb92df767dcf8296802ea292f66f072e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4ac5ffabb92df767dcf8296802ea292f66f072e"}], "stats": {"total": 80, "additions": 78, "deletions": 2}, "files": [{"sha": "6f11c5e11898121775114353b14f44fe0f3db0d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0656d8b259f9035873700b7fc657f495044b75d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0656d8b259f9035873700b7fc657f495044b75d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0656d8b259f9035873700b7fc657f495044b75d", "patch": "@@ -1,3 +1,11 @@\n+2003-12-17  James E Wilson  <wilson@specifixinc.com>\n+\t    Roger Sayle  <roger@eyesopen.com>\n+\t\n+\t* Makefile.in (gcse.o): Add $(TREE_H) to dependencies.\n+\t* gcse.c: Include tree.h.\n+\t(implicit_set_cond_p): New.\n+\t(find_implicit_sets): Call it.\n+\n 2003-12-17  Santiago Vila  <sanvila@unex.es>\n \n \t* config/kfreebsdgnu.h (TARGET_OS_CPP_BUILTINS): Rename from"}, {"sha": "24c3849b41856a725dc39dad93916a760bf2a84f", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0656d8b259f9035873700b7fc657f495044b75d/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0656d8b259f9035873700b7fc657f495044b75d/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=b0656d8b259f9035873700b7fc657f495044b75d", "patch": "@@ -1654,7 +1654,8 @@ web.o : web.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n    hard-reg-set.h flags.h $(BASIC_BLOCK_H) function.h output.h toplev.h df.h\n gcse.o : gcse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n    hard-reg-set.h flags.h real.h insn-config.h $(GGC_H) $(RECOG_H) $(EXPR_H) \\\n-   $(BASIC_BLOCK_H) function.h output.h toplev.h $(TM_P_H) $(PARAMS_H) except.h gt-gcse.h\n+   $(BASIC_BLOCK_H) function.h output.h toplev.h $(TM_P_H) $(PARAMS_H) \\\n+   except.h gt-gcse.h $(TREE_H)\n sibcall.o : sibcall.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n    function.h hard-reg-set.h flags.h insn-config.h $(RECOG_H) $(BASIC_BLOCK_H)\n resource.o : resource.c $(CONFIG_H) $(RTL_H) hard-reg-set.h $(SYSTEM_H) coretypes.h \\"}, {"sha": "daea72e034640e6d97ce9804c9471ce9be917c7b", "filename": "gcc/gcse.c", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0656d8b259f9035873700b7fc657f495044b75d/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0656d8b259f9035873700b7fc657f495044b75d/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=b0656d8b259f9035873700b7fc657f495044b75d", "patch": "@@ -150,6 +150,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"toplev.h\"\n \n #include \"rtl.h\"\n+#include \"tree.h\"\n #include \"tm_p.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n@@ -4559,6 +4560,38 @@ fis_get_condition (rtx jump)\n   return tmp;\n }\n \n+/* Check the comparison COND to see if we can safely form an implicit set from\n+   it.  COND is either an EQ or NE comparison.  */\n+\n+static bool\n+implicit_set_cond_p (rtx cond)\n+{\n+  enum machine_mode mode = GET_MODE (XEXP (cond, 0));\n+  rtx cst = XEXP (cond, 1);\n+\n+  /* We can't perform this optimization if either operand might be or might\n+     contain a signed zero.  */\n+  if (HONOR_SIGNED_ZEROS (mode))\n+    {\n+      /* It is sufficient to check if CST is or contains a zero.  We must\n+\t handle float, complex, and vector.  If any subpart is a zero, then\n+\t the optimization can't be performed.  */\n+      /* ??? The complex and vector checks are not implemented yet.  We just\n+\t always return zero for them.  */\n+      if (GET_CODE (cst) == CONST_DOUBLE)\n+\t{\n+\t  REAL_VALUE_TYPE d;\n+\t  REAL_VALUE_FROM_CONST_DOUBLE (d, cst);\n+\t  if (REAL_VALUES_EQUAL (d, dconst0))\n+\t    return 0;\n+\t}\n+      else\n+\treturn 0;\n+    }\n+\n+  return gcse_constant_p (cst);\n+}\n+\n /* Find the implicit sets of a function.  An \"implicit set\" is a constraint\n    on the value of a variable, implied by a conditional jump.  For example,\n    following \"if (x == 2)\", the then branch may be optimized as though the\n@@ -4584,7 +4617,7 @@ find_implicit_sets (void)\n \t    && (GET_CODE (cond) == EQ || GET_CODE (cond) == NE)\n \t    && GET_CODE (XEXP (cond, 0)) == REG\n \t    && REGNO (XEXP (cond, 0)) >= FIRST_PSEUDO_REGISTER\n-\t    && gcse_constant_p (XEXP (cond, 1)))\n+\t    && implicit_set_cond_p (cond))\n \t  {\n \t    dest = GET_CODE (cond) == EQ ? BRANCH_EDGE (bb)->dest\n \t\t\t\t\t : FALLTHRU_EDGE (bb)->dest;"}, {"sha": "e2aea6c4512c41150cbf9b19efd5679d2260c344", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0656d8b259f9035873700b7fc657f495044b75d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0656d8b259f9035873700b7fc657f495044b75d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b0656d8b259f9035873700b7fc657f495044b75d", "patch": "@@ -1,3 +1,8 @@\n+2003-12-17  James E Wilson  <wilson@specifixinc.com>\n+\t    Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.c-torture/execute/ieee/mzero5.c: New.\n+\n 2003-12-17  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/10603"}, {"sha": "3804c08a80a7633768eeaccbef3282b0c6aa8c50", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/mzero5.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0656d8b259f9035873700b7fc657f495044b75d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fmzero5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0656d8b259f9035873700b7fc657f495044b75d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fmzero5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fmzero5.c?ref=b0656d8b259f9035873700b7fc657f495044b75d", "patch": "@@ -0,0 +1,29 @@\n+/* Test gcse handling of IEEE 0/-0 rules.  */\n+static double zero = 0.0;\n+\n+int\n+negzero_check (double d)\n+{\n+  if (d == 0)\n+    return !!memcmp ((void *)&zero, (void *)&d, sizeof (double));\n+  return 0;\n+}\n+\n+int\n+sub (double d, double e)\n+{\n+  if (d == 0.0 && e == 0.0\n+      && negzero_check (d) == 0 && negzero_check (e) == 0)\n+    return 1;\n+  else\n+    return 0;\n+}\n+\n+int\n+main (void)\n+{\n+  double minus_zero = -0.0;\n+  if (sub (minus_zero, 0))\n+    abort ();\n+  return 0;\n+}"}]}