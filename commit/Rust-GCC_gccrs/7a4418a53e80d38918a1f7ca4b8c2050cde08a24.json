{"sha": "7a4418a53e80d38918a1f7ca4b8c2050cde08a24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E0NDE4YTUzZTgwZDM4OTE4YTFmN2NhNGI4YzIwNTBjZGUwOGEyNA==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2019-09-03T20:36:49Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozefl@gcc.gnu.org", "date": "2019-09-03T20:36:49Z"}, "message": "Implement TARGET_HANDLE_GENERIC_ATTRIBUTE\n\ngcc/ChangeLog:\n\n2019-09-03  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* config/msp430/msp430.c (TARGET_HANDLE_GENERIC_ATTRIBUTE): Define.\n\t(msp430_handle_generic_attribute): New function.\n\t* doc/tm.texi: Regenerate.\n\t* doc/tm.texi.in: Add TARGET_HANDLE_GENERIC_ATTRIBUTE.\n\t* hooks.c (hook_tree_treeptr_tree_tree_int_boolptr_null): New.\n\t* hooks.h (hook_tree_treeptr_tree_tree_int_boolptr_null): New.\n\t* target.def: Define new hook TARGET_HANDLE_GENERIC_ATTRIBUTE.\n\ngcc/c-family/ChangeLog:\n\n2019-09-03  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* c-attribs.c (handle_section_attribute): Call the\n\thandle_generic_attribute target hook after performing target\n\tindependent processing.\n\t(handle_noinit_attribute): Likewise.\n\nFrom-SVN: r275355", "tree": {"sha": "50812e16fbb96679693af23f3880882336875f3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50812e16fbb96679693af23f3880882336875f3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a4418a53e80d38918a1f7ca4b8c2050cde08a24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a4418a53e80d38918a1f7ca4b8c2050cde08a24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a4418a53e80d38918a1f7ca4b8c2050cde08a24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a4418a53e80d38918a1f7ca4b8c2050cde08a24/comments", "author": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "52792faa0c8510b7bfc2c184c9f67d4a87f83215", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52792faa0c8510b7bfc2c184c9f67d4a87f83215", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52792faa0c8510b7bfc2c184c9f67d4a87f83215"}], "stats": {"total": 124, "additions": 114, "deletions": 10}, "files": [{"sha": "e65e3046571f01708b86e2105ce5ba826a8114b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a4418a53e80d38918a1f7ca4b8c2050cde08a24/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a4418a53e80d38918a1f7ca4b8c2050cde08a24/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a4418a53e80d38918a1f7ca4b8c2050cde08a24", "patch": "@@ -1,3 +1,13 @@\n+2019-09-03  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config/msp430/msp430.c (TARGET_HANDLE_GENERIC_ATTRIBUTE): Define.\n+\t(msp430_handle_generic_attribute): New function.\n+\t* doc/tm.texi: Regenerate.\n+\t* doc/tm.texi.in: Add TARGET_HANDLE_GENERIC_ATTRIBUTE.\n+\t* hooks.c (hook_tree_treeptr_tree_tree_int_boolptr_null): New.\n+\t* hooks.h (hook_tree_treeptr_tree_tree_int_boolptr_null): New.\n+\t* target.def: Define new hook TARGET_HANDLE_GENERIC_ATTRIBUTE.\n+\n 2019-09-03  Kamlesh Kumar  <kamleshbhalui@gmail.com>\n \n \tPR tree-optimization/91504"}, {"sha": "9ca5a1e6a4fe9753d0356d4b335c9ecc6fe30fa7", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a4418a53e80d38918a1f7ca4b8c2050cde08a24/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a4418a53e80d38918a1f7ca4b8c2050cde08a24/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=7a4418a53e80d38918a1f7ca4b8c2050cde08a24", "patch": "@@ -1,3 +1,10 @@\n+2019-09-03  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* c-attribs.c (handle_section_attribute): Call the\n+\thandle_generic_attribute target hook after performing target\n+\tindependent processing.\n+\t(handle_noinit_attribute): Likewise.\n+\n 2019-09-03  Ian Lance Taylor  <iant@golang.org>\n \n \t* c-cppbuiltin.c (builtin_define_with_hex_fp_value): Always expand"}, {"sha": "6500b998321419a1d8d57062534206c5909adb7a", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a4418a53e80d38918a1f7ca4b8c2050cde08a24/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a4418a53e80d38918a1f7ca4b8c2050cde08a24/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=7a4418a53e80d38918a1f7ca4b8c2050cde08a24", "patch": "@@ -1875,6 +1875,7 @@ handle_section_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n \t\t\t  int ARG_UNUSED (flags), bool *no_add_attrs)\n {\n   tree decl = *node;\n+  tree res = NULL_TREE;\n \n   if (!targetm_common.have_named_sections)\n     {\n@@ -1922,12 +1923,20 @@ handle_section_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n       goto fail;\n     }\n \n-  set_decl_section_name (decl, TREE_STRING_POINTER (TREE_VALUE (args)));\n-  return NULL_TREE;\n+  res = targetm.handle_generic_attribute (node, name, args, flags,\n+\t\t\t\t\t  no_add_attrs);\n+\n+  /* If the back end confirms the attribute can be added then continue onto\n+     final processing.  */\n+  if (!(*no_add_attrs))\n+    {\n+      set_decl_section_name (decl, TREE_STRING_POINTER (TREE_VALUE (args)));\n+      return res;\n+    }\n \n fail:\n   *no_add_attrs = true;\n-  return NULL_TREE;\n+  return res;\n }\n \n /* If in c++-11, check if the c++-11 alignment constraint with respect\n@@ -2249,6 +2258,7 @@ handle_noinit_attribute (tree * node,\n \t\t  bool *no_add_attrs)\n {\n   const char *message = NULL;\n+  tree res = NULL_TREE;\n \n   gcc_assert (DECL_P (*node));\n   gcc_assert (args == NULL);\n@@ -2271,14 +2281,23 @@ handle_noinit_attribute (tree * node,\n       *no_add_attrs = true;\n     }\n   else\n-    /* If this var is thought to be common, then change this.  Common\n-       variables are assigned to sections before the backend has a\n-       chance to process them.  Do this only if the attribute is\n-       valid.  */\n-    if (DECL_COMMON (*node))\n-      DECL_COMMON (*node) = 0;\n+    {\n+      res = targetm.handle_generic_attribute (node, name, args, flags,\n+\t\t\t\t\t      no_add_attrs);\n+      /* If the back end confirms the attribute can be added then continue onto\n+\t final processing.  */\n+      if (!(*no_add_attrs))\n+\t{\n+\t  /* If this var is thought to be common, then change this.  Common\n+\t     variables are assigned to sections before the backend has a\n+\t     chance to process them.  Do this only if the attribute is\n+\t     valid.  */\n+\t  if (DECL_COMMON (*node))\n+\t    DECL_COMMON (*node) = 0;\n+\t}\n+    }\n \n-  return NULL_TREE;\n+  return res;\n }\n \n "}, {"sha": "1e6107589f53e7d1773353b7ccb58ffb98f617b9", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a4418a53e80d38918a1f7ca4b8c2050cde08a24/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a4418a53e80d38918a1f7ca4b8c2050cde08a24/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=7a4418a53e80d38918a1f7ca4b8c2050cde08a24", "patch": "@@ -1518,6 +1518,46 @@ const struct attribute_spec msp430_attribute_table[] =\n     { NULL,\t\t0, 0, false, false, false, false, NULL,  NULL }\n   };\n \n+#undef TARGET_HANDLE_GENERIC_ATTRIBUTE\n+#define TARGET_HANDLE_GENERIC_ATTRIBUTE msp430_handle_generic_attribute\n+\n+tree\n+msp430_handle_generic_attribute (tree *node,\n+\t\t\t\t tree   name,\n+\t\t\t\t tree   args ATTRIBUTE_UNUSED,\n+\t\t\t\t int    flags ATTRIBUTE_UNUSED,\n+\t\t\t\t bool *no_add_attrs)\n+\n+{\n+  const char *message = NULL;\n+\n+  if (!(TREE_NAME_EQ (name, ATTR_NOINIT) || TREE_NAME_EQ (name, \"section\")))\n+    return NULL_TREE;\n+\n+  /* The front end has set up an exclusion between the \"noinit\" and \"section\"\n+     attributes.  */\n+  if (has_attr (ATTR_LOWER, *node))\n+    message = G_(\"ignoring attribute %qE because it conflicts with \"\n+\t\t \"attribute %<lower%>\");\n+  else if (has_attr (ATTR_UPPER, *node))\n+    message = G_(\"ignoring attribute %qE because it conflicts with \"\n+\t\t \"attribute %<upper%>\");\n+  else if (has_attr (ATTR_EITHER, *node))\n+    message = G_(\"ignoring attribute %qE because it conflicts with \"\n+\t\t \"attribute %<either%>\");\n+  else if (has_attr (ATTR_PERSIST, *node))\n+    message = G_(\"ignoring attribute %qE because it conflicts with \"\n+\t\t \"attribute %<persistent%>\");\n+\n+  if (message)\n+    {\n+      warning (OPT_Wattributes, message, name);\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n #undef  TARGET_ASM_FUNCTION_PROLOGUE\n #define TARGET_ASM_FUNCTION_PROLOGUE\tmsp430_start_function\n "}, {"sha": "0b5a08d490ec998f143845c48bd5190aed146664", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a4418a53e80d38918a1f7ca4b8c2050cde08a24/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a4418a53e80d38918a1f7ca4b8c2050cde08a24/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=7a4418a53e80d38918a1f7ca4b8c2050cde08a24", "patch": "@@ -10391,6 +10391,14 @@ attributes, or a copy of the list may be made if further changes are\n needed.\n @end deftypefn\n \n+@deftypefn {Target Hook} tree TARGET_HANDLE_GENERIC_ATTRIBUTE (tree *@var{node}, tree @var{name}, tree @var{args}, int @var{flags}, bool *@var{no_add_attrs})\n+Define this target hook if you want to be able to perform additional\n+target-specific processing of an attribute which is handled generically\n+by a front end.  The arguments are the same as those which are passed to\n+attribute handlers.  So far this only affects the @var{noinit} and\n+@var{section} attribute.\n+@end deftypefn\n+\n @deftypefn {Target Hook} bool TARGET_FUNCTION_ATTRIBUTE_INLINABLE_P (const_tree @var{fndecl})\n @cindex inlining\n This target hook returns @code{true} if it is OK to inline @var{fndecl}"}, {"sha": "a9200551ed484b78ebbf963b3127279c3d166b63", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a4418a53e80d38918a1f7ca4b8c2050cde08a24/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a4418a53e80d38918a1f7ca4b8c2050cde08a24/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=7a4418a53e80d38918a1f7ca4b8c2050cde08a24", "patch": "@@ -7200,6 +7200,8 @@ on this implementation detail.\n \n @hook TARGET_INSERT_ATTRIBUTES\n \n+@hook TARGET_HANDLE_GENERIC_ATTRIBUTE\n+\n @hook TARGET_FUNCTION_ATTRIBUTE_INLINABLE_P\n \n @hook TARGET_OPTION_VALID_ATTRIBUTE_P"}, {"sha": "ca731c440e75ccbb11ae0810b1a946e833e58533", "filename": "gcc/hooks.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a4418a53e80d38918a1f7ca4b8c2050cde08a24/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a4418a53e80d38918a1f7ca4b8c2050cde08a24/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=7a4418a53e80d38918a1f7ca4b8c2050cde08a24", "patch": "@@ -442,6 +442,12 @@ hook_tree_tree_tree_tree_null (tree, tree, tree)\n   return NULL;\n }\n \n+tree\n+hook_tree_treeptr_tree_tree_int_boolptr_null (tree *, tree, tree, int, bool *)\n+{\n+  return NULL;\n+}\n+\n /* Generic hook that takes an rtx_insn *and returns a NULL string.  */\n const char *\n hook_constcharptr_const_rtx_insn_null (const rtx_insn *)"}, {"sha": "040eff008db73e08ea32194054fb6187eb7a9614", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a4418a53e80d38918a1f7ca4b8c2050cde08a24/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a4418a53e80d38918a1f7ca4b8c2050cde08a24/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=7a4418a53e80d38918a1f7ca4b8c2050cde08a24", "patch": "@@ -109,6 +109,7 @@ extern tree hook_tree_void_null (void);\n extern tree hook_tree_tree_tree_null (tree, tree);\n extern tree hook_tree_tree_tree_tree_null (tree, tree, tree);\n extern tree hook_tree_tree_int_treep_bool_null (tree, int, tree *, bool);\n+extern tree hook_tree_treeptr_tree_tree_int_boolptr_null (tree *, tree, tree, int, bool *);\n \n extern unsigned hook_uint_void_0 (void);\n extern unsigned int hook_uint_mode_0 (machine_mode);"}, {"sha": "ca7e7ad96b418cdc5fd8b3d49472e706161a7d7c", "filename": "gcc/target.def", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a4418a53e80d38918a1f7ca4b8c2050cde08a24/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a4418a53e80d38918a1f7ca4b8c2050cde08a24/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=7a4418a53e80d38918a1f7ca4b8c2050cde08a24", "patch": "@@ -2208,6 +2208,17 @@ needed.\",\n  void, (tree node, tree *attr_ptr),\n  hook_void_tree_treeptr)\n \n+/* Perform additional target-specific processing of generic attributes.  */\n+DEFHOOK\n+(handle_generic_attribute,\n+ \"Define this target hook if you want to be able to perform additional\\n\\\n+target-specific processing of an attribute which is handled generically\\n\\\n+by a front end.  The arguments are the same as those which are passed to\\n\\\n+attribute handlers.  So far this only affects the @var{noinit} and\\n\\\n+@var{section} attribute.\",\n+ tree, (tree *node, tree name, tree args, int flags, bool *no_add_attrs),\n+ hook_tree_treeptr_tree_tree_int_boolptr_null)\n+\n /* Return true if FNDECL (which has at least one machine attribute)\n    can be inlined despite its machine attributes, false otherwise.  */\n DEFHOOK"}]}