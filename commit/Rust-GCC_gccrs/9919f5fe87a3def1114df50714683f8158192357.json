{"sha": "9919f5fe87a3def1114df50714683f8158192357", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkxOWY1ZmU4N2EzZGVmMTExNGRmNTA3MTQ2ODNmODE1ODE5MjM1Nw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2019-06-15T07:32:02Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-06-15T07:32:02Z"}, "message": "i386.md (and<mode>3): Generate zero-extends for TARGET_ZERO_EXTEND_WITH_AND &&...\n\n\t* config/i386/i386.md (and<mode>3): Generate zero-extends for\n\tTARGET_ZERO_EXTEND_WITH_AND && optimize_function_for_speed_p (cfun))\n\tonly.\n\t(*anddi3_doubleword): Split before reload. Merge with\n\tanddi->zext pre-reload splitter.\n\t(*andndi3_doubleword): Split before reload.\n\t(*<code>di3_doubleword): Ditto.\n\t(*one_cmpldi2_doubleword): Ditto.\n\nFrom-SVN: r272323", "tree": {"sha": "356cf9dbad469aaee83430ebf175f8b1aad76195", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/356cf9dbad469aaee83430ebf175f8b1aad76195"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9919f5fe87a3def1114df50714683f8158192357", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9919f5fe87a3def1114df50714683f8158192357", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9919f5fe87a3def1114df50714683f8158192357", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9919f5fe87a3def1114df50714683f8158192357/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "211b7533bff68e5dd72e7d75249f470101759d6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/211b7533bff68e5dd72e7d75249f470101759d6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/211b7533bff68e5dd72e7d75249f470101759d6d"}], "stats": {"total": 168, "additions": 77, "deletions": 91}, "files": [{"sha": "921e899f534770c744a461eff0cf539a45d7b671", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9919f5fe87a3def1114df50714683f8158192357/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9919f5fe87a3def1114df50714683f8158192357/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9919f5fe87a3def1114df50714683f8158192357", "patch": "@@ -1,3 +1,14 @@\n+2019-06-15  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (and<mode>3): Generate zero-extends for\n+\tTARGET_ZERO_EXTEND_WITH_AND && optimize_function_for_speed_p (cfun))\n+\tonly.\n+\t(*anddi3_doubleword): Split before reload. Merge with\n+\tanddi->zext pre-reload splitter.\n+\t(*andndi3_doubleword): Split before reload.\n+\t(*<code>di3_doubleword): Ditto.\n+\t(*one_cmpldi2_doubleword): Ditto.\n+\n 2019-06-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/90779"}, {"sha": "8406aed8e0d75cc9709394d5fee9f587aa186c97", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 66, "deletions": 91, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9919f5fe87a3def1114df50714683f8158192357/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9919f5fe87a3def1114df50714683f8158192357/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9919f5fe87a3def1114df50714683f8158192357", "patch": "@@ -8365,7 +8365,10 @@\n \n   if (<MODE>mode == DImode && !TARGET_64BIT)\n     ;\n-  else if (CONST_INT_P (operands[2]) && REG_P (operands[0]))\n+  else if (const_int_operand (operands[2], <MODE>mode)\n+\t   && register_operand (operands[0], <MODE>mode)\n+\t   && !(TARGET_ZERO_EXTEND_WITH_AND\n+\t\t&& optimize_function_for_speed_p (cfun)))\n     {\n       unsigned HOST_WIDE_INT ival = UINTVAL (operands[2]);\n \n@@ -8388,68 +8391,34 @@\n })\n \n (define_insn_and_split \"*anddi3_doubleword\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,rm,r\")\n-\t(and:DI\n-\t (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-\t (match_operand:DI 2 \"x86_64_szext_general_operand\" \"Z,re,rm\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"!TARGET_64BIT && TARGET_STV && TARGET_SSE2\n-   && ix86_binary_operator_ok (AND, DImode, operands)\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(const_int 0)]\n-{\n-  split_double_mode (DImode, &operands[0], 3, &operands[0], &operands[3]);\n-  if (operands[2] == const0_rtx)\n-    {\n-      operands[1] = const0_rtx;\n-      ix86_expand_move (SImode, &operands[0]);\n-    }\n-  else if (operands[2] != constm1_rtx)\n-    ix86_expand_binary_operator (AND, SImode, &operands[0]);\n-  else if (operands[5] == constm1_rtx)\n-    emit_note (NOTE_INSN_DELETED);\n-  if (operands[5] == const0_rtx)\n-    {\n-      operands[4] = const0_rtx;\n-      ix86_expand_move (SImode, &operands[3]);\n-    }\n-  else if (operands[5] != constm1_rtx)\n-    ix86_expand_binary_operator (AND, SImode, &operands[3]);\n-  DONE;\n-})\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\")\n \t(and:DI\n \t (match_operand:DI 1 \"nonimmediate_operand\")\n-\t (match_operand:DI 2 \"const_int_operand\")))\n+\t (match_operand:DI 2 \"x86_64_szext_general_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_64BIT && TARGET_STV && TARGET_SSE2\n+   && ix86_binary_operator_ok (AND, DImode, operands)\n    && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n   [(const_int 0)]\n {\n-  unsigned HOST_WIDE_INT ival = UINTVAL (operands[2]);\n-  machine_mode mode;\n-\n-  if (ival == GET_MODE_MASK (SImode))\n-    mode = SImode;\n-  else if (ival == GET_MODE_MASK (HImode))\n-    mode = HImode;\n-  else if (ival == GET_MODE_MASK (QImode))\n-    mode = QImode;\n-  else\n-    FAIL;\n-\n   split_double_mode (DImode, &operands[0], 3, &operands[0], &operands[3]);\n \n-  if (mode == SImode)\n+  if (operands[2] == const0_rtx)\n+    emit_move_insn (operands[0], const0_rtx);\n+  else if (operands[2] == constm1_rtx)\n     emit_move_insn (operands[0], operands[1]);\n   else\n-    emit_insn (gen_extend_insn\n-\t       (operands[0], gen_lowpart (mode, operands[1]),\n-\t\tSImode, mode, 1));\n-  emit_move_insn (operands[3], const0_rtx);\n+    emit_insn (gen_andsi3 (operands[0], operands[1], operands[2]));\n+\n+  if (operands[5] == const0_rtx)\n+    emit_move_insn (operands[3], const0_rtx);\n+  else if (operands[5] == constm1_rtx)\n+    emit_move_insn (operands[3], operands[4]);\n+  else\n+    emit_insn (gen_andsi3 (operands[3], operands[4], operands[5]));\n+\n   DONE;\n })\n \n@@ -8886,14 +8855,14 @@\n })\n \n (define_insn \"*andndi3_doubleword\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=&r,r,r,&r\")\n+  [(set (match_operand:DI 0 \"register_operand\")\n \t(and:DI\n-\t  (not:DI (match_operand:DI 1 \"register_operand\" \"r,0,r,0\"))\n-\t  (match_operand:DI 2 \"nonimmediate_operand\" \"rm,rm,0,rm\")))\n+\t  (not:DI (match_operand:DI 1 \"register_operand\"))\n+\t  (match_operand:DI 2 \"nonimmediate_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"!TARGET_64BIT && TARGET_STV && TARGET_SSE2\"\n-  \"#\"\n-  [(set_attr \"isa\" \"bmi,bmi,bmi,*\")])\n+  \"!TARGET_64BIT && TARGET_STV && TARGET_SSE2\n+   && can_create_pseudo_p ()\"\n+  \"#\")\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\")\n@@ -8902,7 +8871,7 @@\n \t  (match_operand:DI 2 \"nonimmediate_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_64BIT && TARGET_BMI && TARGET_STV && TARGET_SSE2\n-   && reload_completed\"\n+   && can_create_pseudo_p ()\"\n   [(parallel [(set (match_dup 0)\n \t\t   (and:SI (not:SI (match_dup 1)) (match_dup 2)))\n \t      (clobber (reg:CC FLAGS_REG))])\n@@ -8914,20 +8883,25 @@\n (define_split\n   [(set (match_operand:DI 0 \"register_operand\")\n \t(and:DI\n-\t  (not:DI (match_dup 0))\n-\t  (match_operand:DI 1 \"nonimmediate_operand\")))\n+\t  (not:DI (match_operand:DI 1 \"register_operand\"))\n+\t  (match_operand:DI 2 \"nonimmediate_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_64BIT && !TARGET_BMI && TARGET_STV && TARGET_SSE2\n-   && reload_completed\"\n-  [(set (match_dup 0) (not:SI (match_dup 0)))\n+   && can_create_pseudo_p ()\"\n+  [(set (match_dup 6) (not:SI (match_dup 1)))\n    (parallel [(set (match_dup 0)\n-\t\t   (and:SI (match_dup 0) (match_dup 1)))\n+\t\t   (and:SI (match_dup 6) (match_dup 2)))\n \t      (clobber (reg:CC FLAGS_REG))])\n-   (set (match_dup 2) (not:SI (match_dup 2)))\n-   (parallel [(set (match_dup 2)\n-\t\t   (and:SI (match_dup 2) (match_dup 3)))\n+   (set (match_dup 7) (not:SI (match_dup 4)))\n+   (parallel [(set (match_dup 3)\n+\t\t   (and:SI (match_dup 7) (match_dup 5)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"split_double_mode (DImode, &operands[0], 2, &operands[0], &operands[2]);\")\n+{\n+  operands[6] = gen_reg_rtx (SImode);\n+  operands[7] = gen_reg_rtx (SImode);\n+\n+  split_double_mode (DImode, &operands[0], 3, &operands[0], &operands[3]);\n+})\n \n (define_insn \"*andn<mode>_1\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r,r\")\n@@ -8980,44 +8954,44 @@\n   \"ix86_expand_binary_operator (<CODE>, <MODE>mode, operands); DONE;\")\n \n (define_insn_and_split \"*<code>di3_doubleword\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,rm,r\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\")\n \t(any_or:DI\n-\t (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-\t (match_operand:DI 2 \"x86_64_szext_general_operand\" \"Z,re,rm\")))\n+\t (match_operand:DI 1 \"nonimmediate_operand\")\n+\t (match_operand:DI 2 \"x86_64_szext_general_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_64BIT && TARGET_STV && TARGET_SSE2\n-   && ix86_binary_operator_ok (<CODE>, DImode, operands)\"\n+   && ix86_binary_operator_ok (<CODE>, DImode, operands)\n+   && can_create_pseudo_p ()\"\n   \"#\"\n-  \"&& reload_completed\"\n+  \"&& 1\"\n   [(const_int 0)]\n {\n   split_double_mode (DImode, &operands[0], 3, &operands[0], &operands[3]);\n-  if (operands[2] == constm1_rtx)\n+\n+  if (operands[2] == const0_rtx)\n+    emit_move_insn (operands[0], operands[1]);\n+  else if (operands[2] == constm1_rtx)\n     {\n       if (<CODE> == IOR)\n-\t{\n-\t  operands[1] = constm1_rtx;\n-\t  ix86_expand_move (SImode, &operands[0]);\n-\t}\n+\temit_move_insn (operands[0], constm1_rtx);\n       else\n \tix86_expand_unary_operator (NOT, SImode, &operands[0]);\n     }\n-  else if (operands[2] != const0_rtx)\n+  else\n     ix86_expand_binary_operator (<CODE>, SImode, &operands[0]);\n-  else if (operands[5] == const0_rtx)\n-    emit_note (NOTE_INSN_DELETED);\n-  if (operands[5] == constm1_rtx)\n+\n+  if (operands[5] == const0_rtx)\n+    emit_move_insn (operands[3], operands[4]);\n+  else if (operands[5] == constm1_rtx)\n     {\n       if (<CODE> == IOR)\n-\t{\n-\t  operands[4] = constm1_rtx;\n-\t  ix86_expand_move (SImode, &operands[3]);\n-\t}\n+\temit_move_insn (operands[3], constm1_rtx);\n       else\n \tix86_expand_unary_operator (NOT, SImode, &operands[3]);\n     }\n-  else if (operands[5] != const0_rtx)\n+  else\n     ix86_expand_binary_operator (<CODE>, SImode, &operands[3]);\n+\n   DONE;\n })\n \n@@ -9673,12 +9647,13 @@\n   \"ix86_expand_unary_operator (NOT, <MODE>mode, operands); DONE;\")\n \n (define_insn_and_split \"*one_cmpldi2_doubleword\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n-\t(not:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\")\n+\t(not:DI (match_operand:DI 1 \"nonimmediate_operand\")))]\n   \"!TARGET_64BIT && TARGET_STV && TARGET_SSE2\n-   && ix86_unary_operator_ok (NOT, DImode, operands)\"\n+   && ix86_unary_operator_ok (NOT, DImode, operands)\n+   && can_create_pseudo_p ()\"\n   \"#\"\n-  \"&& reload_completed\"\n+  \"&& 1\"\n   [(set (match_dup 0)\n \t(not:SI (match_dup 1)))\n    (set (match_dup 2)"}]}