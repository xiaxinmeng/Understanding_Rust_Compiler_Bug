{"sha": "d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZiNTE5M2JmYzM3ZDU2YWUxNTc0MmIwM2YyOTAwMWM2MWNkM2VjNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2005-12-07T07:53:14Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-12-07T07:53:14Z"}, "message": "alpha.c (alpha_start_function): Use switch_to_section.\n\n\t* config/alpha/alpha.c (alpha_start_function): Use switch_to_section.\n\t(alpha_elf_select_rtx_section): Return the selected section rather\n\tthan emitting assembly code.\n\t(alpha_write_linkage): Emit a \".link\" directive directly and then\n\tset in_section to NULL.\n\t(vms_asm_out_constructor): Use switch_to_section.\n\t(vms_asm_out_destructor): Likewise.\n\t(unicosmk_output_common): Set in_section to NULL instead of calling\n\tthe dummy common_section function.\n\t(unicosmk_text_section): Delete in favor of...\n\t(unicosmk_output_text_section_asm_op): ...this new function.\n\t(unicosmk_data_section): Delete in favor of...\n\t(unicosmk_output_data_section_asm_op): ...this new function.\n\t(unicosmk_init_sections): New function.\n\t(unicosmk_output_deferred_case_vectors): Use switch_to_section.\n\t(unicosmk_output_ssib): Set in_section to NULL instead of calling\n\tthe dummy ssib_section function.\n\t(unicosmk_section_buf): Delete.\n\t* config/alpha/alpha-protos.h (unicosmk_text_section): Delete.\n\t(unicosmk_data_section): Delete.\n\t* config/alpha/elf.h (ASM_OUTPUT_ALIGNED_LOCAL): Use switch_to_section.\n\t(EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS, sbss_section, sdata_section)\n\t(SECTION_FUNCTION_TEMPLATE): Delete.\n\t* config/alpha/unicosmk.h (TEXT_SECTION_ASM_OP, DATA_SECTION_ASM_OP)\n\t(READONLY_DATA_SECTION, EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS)\n\t(common_section, COMMON_SECTION, ssib_section, SSIB_SECTION): Delete.\n\t(ASM_OUTPUT_ALIGNED_LOCAL): Use switch_to_section.\n\t(TARGET_ASM_INIT_SECTIONS): Define.\n\t* config/alpha/vms.h (LINK_SECTION_ASM_OP, LITERALS_SECTION_ASM_OP)\n\t(EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS): Delete.\n\t(link_section, literals_section): Delete.\n\t(ASM_OUTPUT_DEF): Emit the \".literal\" directive directly and then\n\tset in_section to NULL.\n\n\t* config/arm/aof.h (TEXT_SECTION_ASM_OP, DATA_SECTION_ASM_OP): Delete.\n\t(EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS, ZERO_INIT_SECTION): Delete.\n\t(COMMON_SECTION): Delete.\n\t(TARGET_ASM_INIT_SECTIONS): Define.\n\t(ASM_OUTPUT_COMMON): Set in_section to NULL rather than calling\n\tthe dummy common_section function.\n\t* config/arm/aout.h (ASM_OUTPUT_ALIGNED_LOCAL): Use switch_to_section.\n\t* config/arm/arm.c (get_jump_table_size): Use pointer comparison\n\tbetween readonly_data_section and text_section to check whether\n\tread-only data is being put in the text section.\n\t(arm_output_function_epilogue): Use switch_to_section.\n\t(arm_elf_asm_constructor): Likewise.\n\t(thumb_call_via_reg): Replace call to in_text_section with\n\ta comparison between in_section and text_section.\n\t(arm_file_end): Use switch_to_section.\n\t(aof_text_section): Delete in favor of...\n\t(aof_output_text_section_asm_op): ...this new function.\n\t(aof_data_section): Delete in favor of...\n\t(aof_output_data_section_asm_op): ...this new function.\n\t(aof_asm_init_sections): New function.\n\t(zero_init_section): Moved from config/arm/aof.h.\n\t(aof_dump_imports, aof_file_start): Use switch_to_section.\n\t* config/arm/arm.h (thumb_call_via_label): Update comment.\n\t* config/arm/arm-protos.h (aof_text_section, aof_data_section): Delete.\n\t(common_section): Delete.\n\t* config/arm/pe.h (ASM_DECLARE_FUNCTION_NAME): Use switch_to_section.\n\t(ASM_DECLARE_OBJECT_NAME): Update the type of save_section.  Use the\n\tglobal switch_to_section function instead of the old port-local one.\n\t(EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS, DRECTVE_SECTION_FUNCTION)\n\t(SWITCH_TO_SECTION_FUNCTION): Delete.\n\t(drectve_section): Redefine as a macro.\n\t* config/arm/unknown-elf.h (ASM_OUTPUT_ALIGNED_BSS):\n\t(ASM_OUTPUT_ALIGNED_DECL_LOCAL): Use get_named_section and\n\tswitch_to_section.\n\n\t* config/avr/avr.c (progmem_section): New variable.\n\t(avr_output_progmem_section_asm_op): New function.\n\t(avr_asm_init_sections): New function.\n\t(avr_output_addr_vec_elt): Use switch_to_section.\n\t* config/avr/avr.h (progmem_section): Declare.\n\t(EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS): Delete.\n\t(READONLY_DATA_SECTION): Delete.\n\t(TARGET_ASM_INIT_SECTIONS): Define.\n\t(ASM_OUTPUT_CASE_LABEL): Use switch_to_section.\n\t* config/avr/avr-protos.h (progmem_section): Delete.\n\n\t* config/bfin/bfin.h (ASM_OUTPUT_LOCAL): Use switch_to_section.\n\n\t* config/c4x/c4x.h (EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS)\n\t(INIT_SECTION_FUNCTION, FINI_SECTION_FUNCTION): Delete.\n\n\t* config/darwin-sections.def: New file.\n\t* config/darwin.c: Define all sections in darwin-sections.def.\n\t(output_objc_section_asm_op, darwin_init_sections): New functions.\n\t(machopic_output_indirection): Use switch_to_section.\n\t(machopic_select_section): Return the selected section rather than\n\temitting assembly code.  Replace the static function table with\n\tinline conditional expressions.  Update the tests of last_text_section\n\tand move them into the FUNCTION_DECL block.\n\t(machopic_select_rtx_section): Return the selected section rather than\n\temitting assembly code.\n\t(machopic_asm_out_constructor, machopic_asm_out_destructor)\n\t(darwin_file_end): Use switch_to_section.\n\t* config/darwin.h: Use darwin-sections.def to declare sections.\n\t(INIT_SECTION_ASM_OP): Remove empty definition.\n\t(HAS_INIT_SECTION): Define this instead.\n\t(SECTION_FUNCTION, EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS): Delete.\n\t(READONLY_DATA_SECTION, TARGET_ASM_EXCEPTION_SECTION): Delete.\n\t(TARGET_ASM_EH_FRAME_SECTION): Delete.\n\t(TARGET_ASM_INIT_SECTIONS): Define.\n\t* config/darwin-protos.h (darwin_init_sections): Declare.\n\t(machopic_picsymbol_stub_section, machopic_picsymbol_stub1_section)\n\t(machopic_symbol_stub_section, machopic_symbol_stub1_section): Delete.\n\t(machopic_lazy_symbol_ptr_section, machopic_nl_symbol_ptr_section)\n\t(constructor_section, destructor_section, mod_init_section): Delete.\n\t(mod_term_section): Delete.\n\t(darwin_exception_section, darwin_eh_frame_section): Delete.\n\t(machopic_select_section): Return a section.\n\t(machopic_select_rtx_section): Likewise.\n\t(text_coal_section, text_unlikely_section, text_unlikely_coal_section)\n\t(const_section, const_coal_section, const_data_section): Delete.\n\t(const_data_coal_section, data_coal_section, cstring_section): Delete.\n\t(literal4_section, literal8_section, constructor_section): Delete.\n\t(mod_init_section, mod_term_section, destructor_section): Delete.\n\t(objc_class_section, objc_meta_class_section, objc_category_section)\n\t(objc_class_vars_section, objc_instance_vars_section): Delete.\n\t(objc_cls_meth_section, objc_inst_meth_section): Delete.\n\t(objc_cat_cls_meth_section, objc_cat_inst_meth_section): Delete.\n\t(objc_selector_refs_section, objc_selector_fixup_section): Delete.\n\t(objc_symbols_section, objc_module_info_section): Delete.\n\t(objc_image_info_section, objc_protocol_section): Delete.\n\t(objc_string_object_section, objc_constant_string_object_section)\n\t(objc_class_names_section, objc_meth_var_names_section): Delete.\n\t(objc_meth_var_types_section, objc_cls_refs_section): Delete.\n\t(machopic_lazy_symbol_ptr_section, machopic_nl_symbol_ptr_section)\n\t(machopic_symbol_stub_section, machopic_picsymbol_stub_section)\n\t(darwin_exception_section, darwin_eh_frame_section): Delete.\n\t* config/t-darwin (darwin.o): Depend on config/darwin-sections.def.\n\n\t* config/frv/frv.c (frv_asm_out_constructor): Use switch_to_section.\n\t(frv_asm_out_destructor): Likewise.\n\t* config/frv/frv.h (EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS): Delete.\n\t(SDATA_SECTION_FUNCTION, FIXUP_SECTION_FUNCTION): Delete.\n\t(ASM_OUTPUT_ALIGNED_DECL_LOCAL): Use switch_to_section and\n\tget_named_section.\n\t(ASM_OUTPUT_CASE_LABEL): Use switch_to_section.\n\t* config/frv/frv-protos.h (fixup_section, sdata_section, sbss_section)\n\t(data_section): Delete.\n\n\t* config/i386/cygming.h (EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS)\n\t(DRECTVE_SECTION_FUNCTION): Delete.\n\t(drectve_section): Redefine as a macro that sets in_section after\n\temitting the directive.\n\t(SWITCH_TO_SECTION_FUNCTION): Delete.\n\t* config/i386/darwin.h (ASM_OUTPUT_ALIGN): Replace call to\n\tin_text_section with comparison between in_section and text_section.\n\t* config/i386/i386.c (x86_64_elf_select_section): Return the section\n\trather than emitting assembly code.  Use get_named_section.\n\t(x86_output_aligned_bss, ix86_file_end): Use switch_to_section and\n\tget_named_section.\n\t(machopic_output_stub): Use switch_to_section.\n\t* config/i386/nwld.c (nwld_named_section_asm_out_constructor)\n\t(nwld_named_section_asm_out_destructor): Use get_section and\n\tswitch_to_section.\n\n\t* config/ia64/ia64.c (ia64_select_rtx_section): Return the section\n\trather than emitting assembly code.\n\t(ia64_rwreloc_select_section): Likewise.\n\t(ia64_rwreloc_select_rtx_section): Likewise.\n\t* config/ia64/ia64-protos.h (sdata_section, sbss_section): Delete.\n\t* config/ia64/sysv4.h (ASM_OUTPUT_ALIGNED_DECL_LOCAL): Use\n\tswitch_to_section.\n\t(EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS): Delete.\n\t(SDATA_SECTION_FUNCTION, SBSS_SECTION_FUNCTION): Delete.\n\n\t* config/iq2000/iq2000.c (iq2000_select_rtx_section): Return the\n\tsection rather than emitting assembly code.\n\t(iq2000_select_section): Likewise.\n\t* config/iq2000/iq2000.h (rdata_section, sdata_section): Delete.\n\t(sbss_section): Delete.\n\n\t* config/m32r/m32r.h (ASM_OUTPUT_ALIGNED_BSS): Use switch_to_section\n\tand get_named_section.\n\t* config/m32r/m32r-protos.h (sbss_section, sdata_section): Delete.\n\n\t* config/mcore/mcore-elf.h (EXPORTS_SECTION_ASM_OP): Delete.\n\t(SUBTARGET_EXTRA_SECTIONS, SUBTARGET_EXTRA_SECTION_FUNCTIONS): Delete.\n\t(EXPORT_SECTION_FUNCTION, SUBTARGET_SWITCH_SECTIONS): Delete.\n\t(MCORE_EXPORT_NAME): Emit the exports directive directly, then set\n\tin_section to NULL.\n\t(ASM_DECLARE_FUNCTION_NAME): Use switch_to_section.\n\t(ASM_DECLARE_OBJECT_NAME): Update the type of save_section.  Use the\n\tglobal switch_to_section function instead of the old port-local one.\n\t* config/mcore/mcore.h (EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS)\n\t(SWITCH_SECTION_FUNCTION): Delete.\n\t* config/mcore/mcore-pe.h (SUBTARGET_SWITCH_SECTIONS): Delete.\n\t(DRECTVE_SECTION_ASM_OP, SUBTARGET_EXTRA_SECTIONS): Delete.\n\t(SUBTARGET_EXTRA_SECTION_FUNCTIONS, DRECTVE_SECTION_FUNCTION): Delete.\n\t(MCORE_EXPORT_NAME): Emit \".section .drectve\" directly, then set\n\tin_section to NULL.\n\t(ASM_DECLARE_OBJECT_NAME): Update the type of save_section.  Use the\n\tglobal switch_to_section function instead of the old port-local one.\n\t(ASM_DECLARE_FUNCTION_NAME): Use switch_to_section.\n\n\t* config/mips/mips.c (mips_file_start): Update comment.\n\t(mips_output_aligned_bss): Use switch_to_section and get_named_section.\n\t(mips_output_aligned_decl_common): Use switch_to_section.\n\t(mips_select_rtx_section): Return the section rather than emitting\n\tassembly code.  Use get_named_section.\n\t(mips_function_rodata_section: Likewise get_section.\n\t(build_mips16_function_stub): Use switch_to_section.\n\t* config/mips/mips.h (ASM_OUTPUT_IDENT): Use switch_to_section.\n\t(SDATA_SECTION_ASM_OP): Delete.\n\t* config/mips/vxworks.h (EXTRA_SECTIONS): Delete.\n\t(EXTRA_SECTION_FUNCTIONS): Delete.\n\n\t* config/mmix/mmix.c (mmix_file_start, mmix_file_end)\n\t(mmix_asm_output_aligned_local): Use switch_to_section.\n\n\t* config/pa/pa.c (som_readonly_data_section, som_one_only_data_section)\n\t(som_one_only_readonly_data_section): New variables.\n\t(pa_output_function_epilogue): Set in_section to NULL instead of\n\tcalling forget_section.\n\t(output_deferred_plabels): Use select_section.\n\t(pa_asm_output_mi_thunk): Likewise.  Set in_section to NULL instead\n\tof calling forget_section.\n\t(pa_asm_output_aligned_bss, pa_asm_output_aligned_common)\n\t(pa_asm_output_aligned_local): Use select_section.\n\t(som_text_section_asm_op): Delete in favor of...\n\t(som_output_text_section_asm_op): ...this new function.\n\t(pa_som_asm_init_sections): New function.\n\t(pa_select_section): Return the section rather than emitting\n\tassembly code.\n\t* config/pa/pa.h (EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS): Delete.\n\t(SOM_READONLY_DATA_SECTION_FUNCTION): Delete.\n\t(SOM_ONE_ONLY_READONLY_DATA_SECTION_FUNCTION): Delete.\n\t(SOM_ONE_ONLY_DATA_SECTION_FUNCTION, FORGET_SECTION_FUNCTION): Delete.\n\t* config/pa/pa-protos.h (som_text_section_asm_op): Delete.\n\t(som_readonly_data_section, som_one_only_readonly_data_section)\n\t(som_one_only_data_section, forget_section): Delete.\n\t* config/pa/som.h (TEXT_SECTION_ASM_OP): Delete.\n\t(TARGET_ASM_INIT_SECTIONS): Define.\n\t(READONLY_DATA_SECTION, TARGET_ASM_EXCEPTION_SECTION): Delete.\n\n\t* config/rs6000/rs6000.c (read_only_data_section): New variable.\n\t(private_data_section, read_only_private_data_section): New variables.\n\t(sdata2_section, toc_section): New variables.\n\t(rs6000_file_start): Use switch_to_section.\n\t(rs6000_assemble_integer): Use comparisons against in_section\n\tinstead of calling in_toc_section and in_text_section.  Use\n\tunlikely_text_section_p.\n\t(rs6000_elf_output_toc_section_asm_op): New function, derived\n\tfrom the old rs6000/sysv4.h toc_section function.\n\t(rs6000_elf_asm_init_sections): New function.\n\t(rs6000_elf_select_rtx_section, rs6000_elf_select_section): Return\n\tthe section rather than emitting assembly code.\n\t(machopic_output_stub): Use switch_to_section.\n\t(toc_section): Delete dummy function.\n\t(rs6000_elf_asm_out_constructor, rs6000_elf_asm_out_destructor): Use\n\tswitch_to_section and get_section.\n\t(rs6000_xcoff_output_readonly_section_asm_op): New function.\n\t(rs6000_xcoff_output_readwrite_section_asm_op): New function.\n\t(rs6000_xcoff_output_toc_section_asm_op): New function, derived from\n\tthe old rs6000/xcoff.h toc_section function.\n\t(rs6000_xcoff_asm_init_sections): New function.\n\t(rs6000_xcoff_select_section, rs6000_xcoff_select_rtx_section): Return\n\tthe section rather than emitting assembly code.\n\t(rs6000_xcoff_file_start): Use switch_to_section.\n\t(rs6000_xcoff_file_end): Likewise.\n\t* config/rs6000/rs6000-protos.h (toc_section, sdata_section): Delete.\n\t(sdata2_section, sbss_section, private_data_section): Delete.\n\t(read_only_data_section, read_only_private_data_section): Delete.\n\t* config/rs6000/sysv4.h (EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS)\n\t(TOC_SECTION_FUNCTION, SDATA_SECTION_FUNCTION, SDATA2_SECTION_FUNCTION)\n\t(SBSS_SECTION_FUNCTION, INIT_SECTION_FUNCTION): Delete.\n\t(FINI_SECTION_FUNCTION): Delete.\n\t(TARGET_ASM_INIT_SECTIONS): Define.\n\t(ASM_OUTPUT_ALIGNED_LOCAL): Use switch_to_section.\n\t* config/rs6000/xcoff.h (EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS)\n\t(READ_ONLY_DATA_SECTION_FUNCTION, PRIVATE_DATA_SECTION_FUNCTION)\n\t(READ_ONLY_PRIVATE_DATA_SECTION_FUNCTION, TOC_SECTION_FUNCTION)\n\t(READONLY_DATA_SECTION): Delete.\n\t(TARGET_ASM_INIT_SECTIONS): Define.\n\t(ASM_DECLARE_FUNCTION_NAME): Use switch_to_section.  Set in_section\n\tto NULL rather than no_section.\n\t(TARGET_ASM_EXCEPTION_SECTION): Delete.\n\n\t* config/sh/sh.c (sh_file_start): Use switch_to_section.\n\n\t* config/sparc/sparc.c (emit_pic_helper): Use switch_to_section.\n\t(sparc_output_deferred_case_vectors): Likewise.  Remove argument\n\tfrom call to current_function_section.\n\n\t* config/stormy16/stormy16.c: Include ggc.h and gt-storm16.h.\n\t(bss100_section): New variable.\n\t(xstormy16_asm_output_aligned_common): Use switch_to_section.\n\t(xstormy16_asm_init_sections): New function.\n\t(xstormy16_asm_out_destructor, xstormy16_asm_out_constructor): Use\n\tswitch_to_section and get_section.\n\t(xstormy16_output_addr_vec): Use switch_to_section.  Remove argument\n\tfrom calls to current_function_section.\n\t* config/stormy16/stormy16.h (EXTRA_SECTIONS): Delete.\n\t(XSTORMY16_SECTION_FUNCTION, EXTRA_SECTION_FUNCTIONS): Delete.\n\t(TARGET_ASM_INIT_SECTIONS): Define.\n\t* config/stormy16/stormy16-protos.h (bss100_section): Delete.\n\n\t* config/svr3.h (ASM_OUTPUT_LOCAL): Use switch_to_section.\n\t(EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS, INIT_SECTION_FUNCTION)\n\t(FINI_SECTION_FUNCTION): Delete.\n\n\t* config/v850/v850.c: Include gt-v850.h.\n\t(rosdata_section, rozdata_section, tdata_section, zdata_section)\n\t(zbss_section): New variables.\n\t(v850_output_aligned_bss): Use switch_to_section.\n\t(v850_asm_init_sections): New function.\n\t(v850_select_section): Return the section rather than emitting\n\tassembly code.\n\t* config/v850/v850.h (EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS)\n\t(ZDATA_SECTION_ASM_OP, ZBSS_SECTION_ASM_OP, TDATA_SECTION_ASM_OP)\n\t(ROSDATA_SECTION_ASM_OP, ROZDATA_SECTION_ASM_OP): Delete.\n\t(TARGET_ASM_INIT_SECTIONS): Define.\n\t* config/v850/v850-protos.h (sdata_section, rosdata_section): Delete.\n\t(sbss_section, tdata_section, zdata_section, rozdata_section): Delete.\n\t(zbss_section): Delete.\n\n\t* config/vax/vaxv.h (ASM_OUTPUT_LOCAL): Use switch_to_section.\n\n\t* config/vx-common.h (vxworks_exception_section): Delete.\n\t(TARGET_ASM_EXCEPTION_SECTION): Delete.\n\n\t* config/xtensa/xtensa.c (xtensa_select_rtx_section): Return the\n\tsection rather than emitting assembly code.\n\t* config/xtensa/xtensa.h (ASM_OUTPUT_POOL_PROLOGUE): Use\n\tswitch_to_section.\n\n\t* Makefile.in (GTFILES): Add $(srcdir)/output.h.\n\t* coretypes.h (section): New union and typedef.\n\t* dbxout.c (FORCE_TEXT): Use switch_to_section.  Remove argument\n\tfrom call to current_function_section.\n\t(dbxout_function_end, dbxout_init, dbxout_source_file, dbxout_finish)\n\t(dbxout_symbol_location): Use switch_to_section.\n\t* dwarf2out.c (named_section_eh_frame_section): Delete, moving\n\tmost of the code into...\n\t(default_eh_frame_section): ...here.  Return a section.\n\t(collect2_eh_frame_section): Delete, moving most of the code into..\n\t(switch_to_eh_frame_section): ...this new function.\n\t(debug_info_section, debug_abbrev_section, debug_aranges_section)\n\t(debug_macinfo_section, debug_line_section, debug_loc_section)\n\t(debug_pubnames_section, debug_str_section, debug_ranges_section): New\n\tvariables.\n\t(output_call_frame_info): Call switch_to_eh_frame_section instead of\n\teh_frame_section.  Use switch_to_section and get_section.\n\t(dwarf2out_begin_prologue): Use switch_to_section.\n\t(AT_string_form): Check the flags in debug_str_section instead of\n\tDEBUG_STR_SECTION_FLAGS.\n\t(output_comp_unit): Use switch_to_section, get_section, and\n\tdebug_info_section.\n\t(output_line_info, secname_for_decl): Use unlikely_text_section_p.\n\t(dwarf2out_begin_block): Use switch_to_section.  Remove argument\n\tfrom call to current_function_section.\n\t(dwarf2out_var_location): Use unlikely_text_section_p.\n\t(dwarf2out_source_line): Use switch_to_section.  Remove argument\n\tfrom call to current_function_section.\n\t(dwarf2out_start_source_file, dwarf2out_end_source_file)\n\t(dwarf2out_define, dwarf2out_undef: Use switch_to_section and\n\tdebug_macinfo_section.\n\t(dwarf2out_init): Initialize the new section variables.  Use them\n\tinstead of calls to named_section_flags.  Use switch_to_section.\n\t(output_indirect_string): Use switch_to_section and debug_str_section.\n\t(dwarf2out_finish): Use switch_to_section and the new section\n\tvariables.\n\t* except.c (default_exception_section): Return the section instead\n\tof emitting assembly code.\n\t(output_function_exception_table): Use the global exception_section\n\tvariable instead of the target hook.  Use switch_to_section.  Remove\n\targument from call to current_function_section.\n\t* final.c (HAVE_READONLY_DATA_SECTION): Delete.\n\t(shorten_branches): Use pointer comparisons to detect whether the\n\ttext section is the same as readonly_data_section.\n\t(profile_function): Use switch_to_section.  Remove argument from\n\tcall to current_function_section.\n\t(final_scan_insn): Likewise.  Update use of last_text_section.\n\t* gengtype.c (open_base_files): Add an include of output.h.\n\t* output.h (text_section, data_section, readonly_data_section)\n\t(ctors_section, dtors_section, bss_section, init_section)\n\t(fini_section, sdata_section): Turn into section pointers.\n\t(in_text_section, in_unlikely_text_section, exports_section)\n\t(drectve_section, named_section, mergeable_string_section)\n\t(last_text_section_name): Delete.\n\t(default_exception_section, default_eh_frame_section): Return sections.\n\t(SECTION_DECLARED, SECTION_NAMED): New macros.\n\t(SECTION_MACH_DEP): Bump value.\n\t(section_common, named_section, unnamed_section): New structures.\n\t(unnamed_section_callback): New typedef.\n\t(section): New union.\n\t(sbss_section, exception_section, eh_frame_section): New variables.\n\t(in_section, last_text_section): Turn into section pointers.\n\t(get_unnamed_section, get_section, get_named_section): New functions.\n\t(mergeable_constant_section, function_section): Return a section.\n\t(unlikely_text_section): Likewise.\n\t(current_function_section): Likewise.  Remove the decl argument.\n\t(unlikely_text_section_p, switch_to_section): New functions.\n\t(output_section_asm_op): New function.\n\t(set_named_section_flags, named_section_flags, named_section_real)\n\t(named_section_first_declaration): Delete.\n\t(default_select_section, default_elf_select_section): Return a section.\n\t(default_elf_select_section_1, default_function_rodata_section)\n\t(default_no_function_rodata_section, default_select_rtx_section)\n\t(default_elf_select_rtx_section): Likewise.\n\t* rtl.h (in_data_section): Delete.\n\t* sdbout.c (sdbout_one_type): Use switch_to_section.\n\t* system.h (EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS): Poison.\n\t(READONLY_DATA_SECTION, TARGET_ASM_EXCEPTION_SECTION): Poison.\n\t(TARGET_ASM_EH_FRAME_SECTION): Poison.\n\t* target-def.h (TARGET_ASM_INIT_SECTIONS): New macro.\n\t(TARGET_ASM_EXCEPTION_SECTION, TARGET_ASM_EH_FRAME_SECTION): Delete.\n\t(TARGET_ASM_OUT): Update after above changes.\n\t* target.h (init_sections): New hook.\n\t(exception_section, eh_frame_section): Delete.\n\t(select_section, select_rtx_section, function_rodata_section): Return\n\ta section rather than emitting assembly code.\n\t* varasm.c (text_section, data_section, readonly_data_section)\n\t(ctors_section, dtors_section, bss_section, init_section)\n\t(fini_section): Turn into section pointers.\n\t(sdata_section, sbss_section, exception_section): New variables.\n\t(eh_frame_section): New variable.\n\t(in_section): Make global and turn into a section pointer.\n\t(last_text_section): Turn into a section pointer.\n\t(unnamed_sections): New variable.\n\t(in_named_name, last_text_section_name): Delete.\n\t(EXTRA_SECTION_FUNCTIONS): Delete.\n\t(in_named_entry): Delete.\n\t(section_htab): New variable, replacing...\n\t(in_named_htab): ...this deleted variable.\n\t(section_entry_eq, section_entry_hash): New functions, based on...\n\t(in_named_entry_eq, in_named_entry_hash): ...these deleted functions.\n\t(get_unnamed_section, get_section): New functions.\n\t(unlikely_text_section): Return a section instead of emitting\n\tassembly code.\n\t(in_text_section, in_unlikely_text_section, in_data_section): Delete.\n\t(get_named_section_flags, named_section_first_declaration): Delete.\n\t(unlikely_text_section_p): New function.\n\t(named_section_real, named_section): Delete.\n\t(get_named_section): New function.\n\t(asm_output_bss, asm_output_aligned_bss): Use switch_to_section.\n\t(function_section): Return a section rather than emitting\n\tassembly code.\n\t(current_function_section): Likewise.  Remove argument.  Use\n\tlast_text_section if nonnull, otherwise use function_section.\n\t(default_function_rodata_section): Return a section rather than\n\temitting assembly code.  Use get_section.\n\t(default_no_function_rodata_section): Return a section rather than\n\temitting assembly code.\n\t(variable_section): Use switch_to_section and get_named_section.\n\t(mergeable_string_section): Return a section rather than emitting\n\tassembly code.  Use get_section.  Make static.  Don't take special\n\tcountermeasures for empty strings.\n\t(mergeable_constant_section): Return a section rather than emitting\n\tassembly code.  Use get_section.\n\t(default_named_section_asm_out_destructor): Use switch_to_section\n\tand get_section.\n\t(default_dtor_section_asm_out_destructor): Use switch_to_section.\n\t(default_named_section_asm_out_constructor): Use switch_to_section\n\tand get_section.\n\t(default_ctor_section_asm_out_constructor): Use switch_to_section.\n\t(assemble_start_function): Likewise.  Set last_text_section to\n\tNULL rather than no_section.  Change the type of save_section.\n\t(assemble_zeros, assemble_variable): Use the section flags to detect\n\twhether or not a section is text.\n\t(assemble_static_space): Use switch_to_section.\n\t(assemble_trampoline_template): Likewise.\n\t(output_constant_def_contents): Use switch_to_section and\n\tget_named_section.\n\t(output_constant_pool_1): Use switch_to_section.  Use the section\n\tflags to see whether sections contain mergeable data.\n\t(init_varasm_once): Initialize section_htab instead of in_named_htab.\n\tInitialize new section variables.  Call TARGET_ASM_INIT_SECTIONS.\n\t(default_elf_asm_named_section): Use SECTION_DECLARED to detect\n\twhether a section has already been declared.\n\t(default_select_section, default_elf_select_section): Return a\n\tsection rather than emitting assembly code.\n\t(default_elf_select_section_1): Likewise.  Use bss_section for\n\tSECCAT_BSS if nonnull.  Use get_named_section.\n\t(default_select_rtx_section): Return a section rather than\n\temitting assembly code.\n\t(default_elf_select_rtx_section): Likewise.  Use get_named_section.\n\t(file_end_indicate_exec_stack): Use switch_to_section and get_section.\n\t(output_section_asm_op, switch_to_section): New functions.\n\t* vmsdbgout.c (vmsdbgout_finish): Use switch_to_section and\n\tget_named_section.\n\n\t* doc/tm.texi: Expand the introduction to the sections documentation.\n\t(TRAMPOLINE_SECTION): Document new interface.\n\t(SDATA_SECTION_ASM_OP): Document new macro.\n\t(READONLY_DATA_SECTION): Delete.\n\t(SDATA_SECTION_ASM_OP): Document new macro.\n\t(EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS): Delete.\n\t(TARGET_ASM_INIT_SECTIONS): Document new hook.\n\t(TARGET_ASM_SELECT_SECTION, TARGET_ASM_FUNCTION_RODATA_SECTION)\n\t(TARGET_ASM_SELECT_RTX_SECTION): Adjust for new interface.\n\t(TARGET_EXCEPTION_SECTION, TARGET_EH_FRAME_SECTION): Delete.\n\ngcc/java/\n\t* class.c (build_utf8_ref, emit_register_classes): Use\n\tswitch_to_section and get_section.\n\nFrom-SVN: r108152", "tree": {"sha": "e8b6f3dd6958e4f001043b151470fcccabfb4869", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8b6f3dd6958e4f001043b151470fcccabfb4869"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/comments", "author": null, "committer": null, "parents": [{"sha": "5e4f1974e4c0e91a213bbd816c15d5a613b0c1d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e4f1974e4c0e91a213bbd816c15d5a613b0c1d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e4f1974e4c0e91a213bbd816c15d5a613b0c1d2"}], "stats": {"total": 4249, "additions": 1911, "deletions": 2338}, "files": [{"sha": "89281dbe4fde809682f25516749dfe417fc0c043", "filename": "gcc/ChangeLog", "status": "modified", "additions": 498, "deletions": 0, "changes": 498, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -1,3 +1,501 @@\n+2005-12-07  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config/alpha/alpha.c (alpha_start_function): Use switch_to_section.\n+\t(alpha_elf_select_rtx_section): Return the selected section rather\n+\tthan emitting assembly code.\n+\t(alpha_write_linkage): Emit a \".link\" directive directly and then\n+\tset in_section to NULL.\n+\t(vms_asm_out_constructor): Use switch_to_section.\n+\t(vms_asm_out_destructor): Likewise.\n+\t(unicosmk_output_common): Set in_section to NULL instead of calling\n+\tthe dummy common_section function.\n+\t(unicosmk_text_section): Delete in favor of...\n+\t(unicosmk_output_text_section_asm_op): ...this new function.\n+\t(unicosmk_data_section): Delete in favor of...\n+\t(unicosmk_output_data_section_asm_op): ...this new function.\n+\t(unicosmk_init_sections): New function.\n+\t(unicosmk_output_deferred_case_vectors): Use switch_to_section.\n+\t(unicosmk_output_ssib): Set in_section to NULL instead of calling\n+\tthe dummy ssib_section function.\n+\t(unicosmk_section_buf): Delete.\n+\t* config/alpha/alpha-protos.h (unicosmk_text_section): Delete.\n+\t(unicosmk_data_section): Delete.\n+\t* config/alpha/elf.h (ASM_OUTPUT_ALIGNED_LOCAL): Use switch_to_section.\n+\t(EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS, sbss_section, sdata_section)\n+\t(SECTION_FUNCTION_TEMPLATE): Delete.\n+\t* config/alpha/unicosmk.h (TEXT_SECTION_ASM_OP, DATA_SECTION_ASM_OP)\n+\t(READONLY_DATA_SECTION, EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS)\n+\t(common_section, COMMON_SECTION, ssib_section, SSIB_SECTION): Delete.\n+\t(ASM_OUTPUT_ALIGNED_LOCAL): Use switch_to_section.\n+\t(TARGET_ASM_INIT_SECTIONS): Define.\n+\t* config/alpha/vms.h (LINK_SECTION_ASM_OP, LITERALS_SECTION_ASM_OP)\n+\t(EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS): Delete.\n+\t(link_section, literals_section): Delete.\n+\t(ASM_OUTPUT_DEF): Emit the \".literal\" directive directly and then\n+\tset in_section to NULL.\n+\n+\t* config/arm/aof.h (TEXT_SECTION_ASM_OP, DATA_SECTION_ASM_OP): Delete.\n+\t(EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS, ZERO_INIT_SECTION): Delete.\n+\t(COMMON_SECTION): Delete.\n+\t(TARGET_ASM_INIT_SECTIONS): Define.\n+\t(ASM_OUTPUT_COMMON): Set in_section to NULL rather than calling\n+\tthe dummy common_section function.\n+\t* config/arm/aout.h (ASM_OUTPUT_ALIGNED_LOCAL): Use switch_to_section.\n+\t* config/arm/arm.c (get_jump_table_size): Use pointer comparison\n+\tbetween readonly_data_section and text_section to check whether\n+\tread-only data is being put in the text section.\n+\t(arm_output_function_epilogue): Use switch_to_section.\n+\t(arm_elf_asm_constructor): Likewise.\n+\t(thumb_call_via_reg): Replace call to in_text_section with\n+\ta comparison between in_section and text_section.\n+\t(arm_file_end): Use switch_to_section.\n+\t(aof_text_section): Delete in favor of...\n+\t(aof_output_text_section_asm_op): ...this new function.\n+\t(aof_data_section): Delete in favor of...\n+\t(aof_output_data_section_asm_op): ...this new function.\n+\t(aof_asm_init_sections): New function.\n+\t(zero_init_section): Moved from config/arm/aof.h.\n+\t(aof_dump_imports, aof_file_start): Use switch_to_section.\n+\t* config/arm/arm.h (thumb_call_via_label): Update comment.\n+\t* config/arm/arm-protos.h (aof_text_section, aof_data_section): Delete.\n+\t(common_section): Delete.\n+\t* config/arm/pe.h (ASM_DECLARE_FUNCTION_NAME): Use switch_to_section.\n+\t(ASM_DECLARE_OBJECT_NAME): Update the type of save_section.  Use the\n+\tglobal switch_to_section function instead of the old port-local one.\n+\t(EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS, DRECTVE_SECTION_FUNCTION)\n+\t(SWITCH_TO_SECTION_FUNCTION): Delete.\n+\t(drectve_section): Redefine as a macro.\n+\t* config/arm/unknown-elf.h (ASM_OUTPUT_ALIGNED_BSS):\n+\t(ASM_OUTPUT_ALIGNED_DECL_LOCAL): Use get_named_section and\n+\tswitch_to_section.\n+\n+\t* config/avr/avr.c (progmem_section): New variable.\n+\t(avr_output_progmem_section_asm_op): New function.\n+\t(avr_asm_init_sections): New function.\n+\t(avr_output_addr_vec_elt): Use switch_to_section.\n+\t* config/avr/avr.h (progmem_section): Declare.\n+\t(EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS): Delete.\n+\t(READONLY_DATA_SECTION): Delete.\n+\t(TARGET_ASM_INIT_SECTIONS): Define.\n+\t(ASM_OUTPUT_CASE_LABEL): Use switch_to_section.\n+\t* config/avr/avr-protos.h (progmem_section): Delete.\n+\n+\t* config/bfin/bfin.h (ASM_OUTPUT_LOCAL): Use switch_to_section.\n+\n+\t* config/c4x/c4x.h (EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS)\n+\t(INIT_SECTION_FUNCTION, FINI_SECTION_FUNCTION): Delete.\n+\n+\t* config/darwin-sections.def: New file.\n+\t* config/darwin.c: Define all sections in darwin-sections.def.\n+\t(output_objc_section_asm_op, darwin_init_sections): New functions.\n+\t(machopic_output_indirection): Use switch_to_section.\n+\t(machopic_select_section): Return the selected section rather than\n+\temitting assembly code.  Replace the static function table with\n+\tinline conditional expressions.  Update the tests of last_text_section\n+\tand move them into the FUNCTION_DECL block.\n+\t(machopic_select_rtx_section): Return the selected section rather than\n+\temitting assembly code.\n+\t(machopic_asm_out_constructor, machopic_asm_out_destructor)\n+\t(darwin_file_end): Use switch_to_section.\n+\t* config/darwin.h: Use darwin-sections.def to declare sections.\n+\t(INIT_SECTION_ASM_OP): Remove empty definition.\n+\t(HAS_INIT_SECTION): Define this instead.\n+\t(SECTION_FUNCTION, EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS): Delete.\n+\t(READONLY_DATA_SECTION, TARGET_ASM_EXCEPTION_SECTION): Delete.\n+\t(TARGET_ASM_EH_FRAME_SECTION): Delete.\n+\t(TARGET_ASM_INIT_SECTIONS): Define.\n+\t* config/darwin-protos.h (darwin_init_sections): Declare.\n+\t(machopic_picsymbol_stub_section, machopic_picsymbol_stub1_section)\n+\t(machopic_symbol_stub_section, machopic_symbol_stub1_section): Delete.\n+\t(machopic_lazy_symbol_ptr_section, machopic_nl_symbol_ptr_section)\n+\t(constructor_section, destructor_section, mod_init_section): Delete.\n+\t(mod_term_section): Delete.\n+\t(darwin_exception_section, darwin_eh_frame_section): Delete.\n+\t(machopic_select_section): Return a section.\n+\t(machopic_select_rtx_section): Likewise.\n+\t(text_coal_section, text_unlikely_section, text_unlikely_coal_section)\n+\t(const_section, const_coal_section, const_data_section): Delete.\n+\t(const_data_coal_section, data_coal_section, cstring_section): Delete.\n+\t(literal4_section, literal8_section, constructor_section): Delete.\n+\t(mod_init_section, mod_term_section, destructor_section): Delete.\n+\t(objc_class_section, objc_meta_class_section, objc_category_section)\n+\t(objc_class_vars_section, objc_instance_vars_section): Delete.\n+\t(objc_cls_meth_section, objc_inst_meth_section): Delete.\n+\t(objc_cat_cls_meth_section, objc_cat_inst_meth_section): Delete.\n+\t(objc_selector_refs_section, objc_selector_fixup_section): Delete.\n+\t(objc_symbols_section, objc_module_info_section): Delete.\n+\t(objc_image_info_section, objc_protocol_section): Delete.\n+\t(objc_string_object_section, objc_constant_string_object_section)\n+\t(objc_class_names_section, objc_meth_var_names_section): Delete.\n+\t(objc_meth_var_types_section, objc_cls_refs_section): Delete.\n+\t(machopic_lazy_symbol_ptr_section, machopic_nl_symbol_ptr_section)\n+\t(machopic_symbol_stub_section, machopic_picsymbol_stub_section)\n+\t(darwin_exception_section, darwin_eh_frame_section): Delete.\n+\t* config/t-darwin (darwin.o): Depend on config/darwin-sections.def.\n+\n+\t* config/frv/frv.c (frv_asm_out_constructor): Use switch_to_section.\n+\t(frv_asm_out_destructor): Likewise.\n+\t* config/frv/frv.h (EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS): Delete.\n+\t(SDATA_SECTION_FUNCTION, FIXUP_SECTION_FUNCTION): Delete.\n+\t(ASM_OUTPUT_ALIGNED_DECL_LOCAL): Use switch_to_section and\n+\tget_named_section.\n+\t(ASM_OUTPUT_CASE_LABEL): Use switch_to_section.\n+\t* config/frv/frv-protos.h (fixup_section, sdata_section, sbss_section)\n+\t(data_section): Delete.\n+\n+\t* config/i386/cygming.h (EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS)\n+\t(DRECTVE_SECTION_FUNCTION): Delete.\n+\t(drectve_section): Redefine as a macro that sets in_section after\n+\temitting the directive.\n+\t(SWITCH_TO_SECTION_FUNCTION): Delete.\n+\t* config/i386/darwin.h (ASM_OUTPUT_ALIGN): Replace call to\n+\tin_text_section with comparison between in_section and text_section.\n+\t* config/i386/i386.c (x86_64_elf_select_section): Return the section\n+\trather than emitting assembly code.  Use get_named_section.\n+\t(x86_output_aligned_bss, ix86_file_end): Use switch_to_section and\n+\tget_named_section.\n+\t(machopic_output_stub): Use switch_to_section.\n+\t* config/i386/nwld.c (nwld_named_section_asm_out_constructor)\n+\t(nwld_named_section_asm_out_destructor): Use get_section and\n+\tswitch_to_section.\n+\n+\t* config/ia64/ia64.c (ia64_select_rtx_section): Return the section\n+\trather than emitting assembly code.\n+\t(ia64_rwreloc_select_section): Likewise.\n+\t(ia64_rwreloc_select_rtx_section): Likewise.\n+\t* config/ia64/ia64-protos.h (sdata_section, sbss_section): Delete.\n+\t* config/ia64/sysv4.h (ASM_OUTPUT_ALIGNED_DECL_LOCAL): Use\n+\tswitch_to_section.\n+\t(EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS): Delete.\n+\t(SDATA_SECTION_FUNCTION, SBSS_SECTION_FUNCTION): Delete.\n+\n+\t* config/iq2000/iq2000.c (iq2000_select_rtx_section): Return the\n+\tsection rather than emitting assembly code.\n+\t(iq2000_select_section): Likewise.\n+\t* config/iq2000/iq2000.h (rdata_section, sdata_section): Delete.\n+\t(sbss_section): Delete.\n+\n+\t* config/m32r/m32r.h (ASM_OUTPUT_ALIGNED_BSS): Use switch_to_section\n+\tand get_named_section.\n+\t* config/m32r/m32r-protos.h (sbss_section, sdata_section): Delete.\n+\n+\t* config/mcore/mcore-elf.h (EXPORTS_SECTION_ASM_OP): Delete.\n+\t(SUBTARGET_EXTRA_SECTIONS, SUBTARGET_EXTRA_SECTION_FUNCTIONS): Delete.\n+\t(EXPORT_SECTION_FUNCTION, SUBTARGET_SWITCH_SECTIONS): Delete.\n+\t(MCORE_EXPORT_NAME): Emit the exports directive directly, then set\n+\tin_section to NULL.\n+\t(ASM_DECLARE_FUNCTION_NAME): Use switch_to_section.\n+\t(ASM_DECLARE_OBJECT_NAME): Update the type of save_section.  Use the\n+\tglobal switch_to_section function instead of the old port-local one.\n+\t* config/mcore/mcore.h (EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS)\n+\t(SWITCH_SECTION_FUNCTION): Delete.\n+\t* config/mcore/mcore-pe.h (SUBTARGET_SWITCH_SECTIONS): Delete.\n+\t(DRECTVE_SECTION_ASM_OP, SUBTARGET_EXTRA_SECTIONS): Delete.\n+\t(SUBTARGET_EXTRA_SECTION_FUNCTIONS, DRECTVE_SECTION_FUNCTION): Delete.\n+\t(MCORE_EXPORT_NAME): Emit \".section .drectve\" directly, then set\n+\tin_section to NULL.\n+\t(ASM_DECLARE_OBJECT_NAME): Update the type of save_section.  Use the\n+\tglobal switch_to_section function instead of the old port-local one.\n+\t(ASM_DECLARE_FUNCTION_NAME): Use switch_to_section.\n+\n+\t* config/mips/mips.c (mips_file_start): Update comment.\n+\t(mips_output_aligned_bss): Use switch_to_section and get_named_section.\n+\t(mips_output_aligned_decl_common): Use switch_to_section.\n+\t(mips_select_rtx_section): Return the section rather than emitting\n+\tassembly code.  Use get_named_section.\n+\t(mips_function_rodata_section: Likewise get_section.\n+\t(build_mips16_function_stub): Use switch_to_section.\n+\t* config/mips/mips.h (ASM_OUTPUT_IDENT): Use switch_to_section.\n+\t(SDATA_SECTION_ASM_OP): Delete.\n+\t* config/mips/vxworks.h (EXTRA_SECTIONS): Delete.\n+\t(EXTRA_SECTION_FUNCTIONS): Delete.\n+\n+\t* config/mmix/mmix.c (mmix_file_start, mmix_file_end)\n+\t(mmix_asm_output_aligned_local): Use switch_to_section.\n+\n+\t* config/pa/pa.c (som_readonly_data_section, som_one_only_data_section)\n+\t(som_one_only_readonly_data_section): New variables.\n+\t(pa_output_function_epilogue): Set in_section to NULL instead of\n+\tcalling forget_section.\n+\t(output_deferred_plabels): Use select_section.\n+\t(pa_asm_output_mi_thunk): Likewise.  Set in_section to NULL instead\n+\tof calling forget_section.\n+\t(pa_asm_output_aligned_bss, pa_asm_output_aligned_common)\n+\t(pa_asm_output_aligned_local): Use select_section.\n+\t(som_text_section_asm_op): Delete in favor of...\n+\t(som_output_text_section_asm_op): ...this new function.\n+\t(pa_som_asm_init_sections): New function.\n+\t(pa_select_section): Return the section rather than emitting\n+\tassembly code.\n+\t* config/pa/pa.h (EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS): Delete.\n+\t(SOM_READONLY_DATA_SECTION_FUNCTION): Delete.\n+\t(SOM_ONE_ONLY_READONLY_DATA_SECTION_FUNCTION): Delete.\n+\t(SOM_ONE_ONLY_DATA_SECTION_FUNCTION, FORGET_SECTION_FUNCTION): Delete.\n+\t* config/pa/pa-protos.h (som_text_section_asm_op): Delete.\n+\t(som_readonly_data_section, som_one_only_readonly_data_section)\n+\t(som_one_only_data_section, forget_section): Delete.\n+\t* config/pa/som.h (TEXT_SECTION_ASM_OP): Delete.\n+\t(TARGET_ASM_INIT_SECTIONS): Define.\n+\t(READONLY_DATA_SECTION, TARGET_ASM_EXCEPTION_SECTION): Delete.\n+\n+\t* config/rs6000/rs6000.c (read_only_data_section): New variable.\n+\t(private_data_section, read_only_private_data_section): New variables.\n+\t(sdata2_section, toc_section): New variables.\n+\t(rs6000_file_start): Use switch_to_section.\n+\t(rs6000_assemble_integer): Use comparisons against in_section\n+\tinstead of calling in_toc_section and in_text_section.  Use\n+\tunlikely_text_section_p.\n+\t(rs6000_elf_output_toc_section_asm_op): New function, derived\n+\tfrom the old rs6000/sysv4.h toc_section function.\n+\t(rs6000_elf_asm_init_sections): New function.\n+\t(rs6000_elf_select_rtx_section, rs6000_elf_select_section): Return\n+\tthe section rather than emitting assembly code.\n+\t(machopic_output_stub): Use switch_to_section.\n+\t(toc_section): Delete dummy function.\n+\t(rs6000_elf_asm_out_constructor, rs6000_elf_asm_out_destructor): Use\n+\tswitch_to_section and get_section.\n+\t(rs6000_xcoff_output_readonly_section_asm_op): New function.\n+\t(rs6000_xcoff_output_readwrite_section_asm_op): New function.\n+\t(rs6000_xcoff_output_toc_section_asm_op): New function, derived from\n+\tthe old rs6000/xcoff.h toc_section function.\n+\t(rs6000_xcoff_asm_init_sections): New function.\n+\t(rs6000_xcoff_select_section, rs6000_xcoff_select_rtx_section): Return\n+\tthe section rather than emitting assembly code.\n+\t(rs6000_xcoff_file_start): Use switch_to_section.\n+\t(rs6000_xcoff_file_end): Likewise.\n+\t* config/rs6000/rs6000-protos.h (toc_section, sdata_section): Delete.\n+\t(sdata2_section, sbss_section, private_data_section): Delete.\n+\t(read_only_data_section, read_only_private_data_section): Delete.\n+\t* config/rs6000/sysv4.h (EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS)\n+\t(TOC_SECTION_FUNCTION, SDATA_SECTION_FUNCTION, SDATA2_SECTION_FUNCTION)\n+\t(SBSS_SECTION_FUNCTION, INIT_SECTION_FUNCTION): Delete.\n+\t(FINI_SECTION_FUNCTION): Delete.\n+\t(TARGET_ASM_INIT_SECTIONS): Define.\n+\t(ASM_OUTPUT_ALIGNED_LOCAL): Use switch_to_section.\n+\t* config/rs6000/xcoff.h (EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS)\n+\t(READ_ONLY_DATA_SECTION_FUNCTION, PRIVATE_DATA_SECTION_FUNCTION)\n+\t(READ_ONLY_PRIVATE_DATA_SECTION_FUNCTION, TOC_SECTION_FUNCTION)\n+\t(READONLY_DATA_SECTION): Delete.\n+\t(TARGET_ASM_INIT_SECTIONS): Define.\n+\t(ASM_DECLARE_FUNCTION_NAME): Use switch_to_section.  Set in_section\n+\tto NULL rather than no_section.\n+\t(TARGET_ASM_EXCEPTION_SECTION): Delete.\n+\n+\t* config/sh/sh.c (sh_file_start): Use switch_to_section.\n+\n+\t* config/sparc/sparc.c (emit_pic_helper): Use switch_to_section.\n+\t(sparc_output_deferred_case_vectors): Likewise.  Remove argument\n+\tfrom call to current_function_section.\n+\n+\t* config/stormy16/stormy16.c: Include ggc.h and gt-storm16.h.\n+\t(bss100_section): New variable.\n+\t(xstormy16_asm_output_aligned_common): Use switch_to_section.\n+\t(xstormy16_asm_init_sections): New function.\n+\t(xstormy16_asm_out_destructor, xstormy16_asm_out_constructor): Use\n+\tswitch_to_section and get_section.\n+\t(xstormy16_output_addr_vec): Use switch_to_section.  Remove argument\n+\tfrom calls to current_function_section.\n+\t* config/stormy16/stormy16.h (EXTRA_SECTIONS): Delete.\n+\t(XSTORMY16_SECTION_FUNCTION, EXTRA_SECTION_FUNCTIONS): Delete.\n+\t(TARGET_ASM_INIT_SECTIONS): Define.\n+\t* config/stormy16/stormy16-protos.h (bss100_section): Delete.\n+\n+\t* config/svr3.h (ASM_OUTPUT_LOCAL): Use switch_to_section.\n+\t(EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS, INIT_SECTION_FUNCTION)\n+\t(FINI_SECTION_FUNCTION): Delete.\n+\n+\t* config/v850/v850.c: Include gt-v850.h.\n+\t(rosdata_section, rozdata_section, tdata_section, zdata_section)\n+\t(zbss_section): New variables.\n+\t(v850_output_aligned_bss): Use switch_to_section.\n+\t(v850_asm_init_sections): New function.\n+\t(v850_select_section): Return the section rather than emitting\n+\tassembly code.\n+\t* config/v850/v850.h (EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS)\n+\t(ZDATA_SECTION_ASM_OP, ZBSS_SECTION_ASM_OP, TDATA_SECTION_ASM_OP)\n+\t(ROSDATA_SECTION_ASM_OP, ROZDATA_SECTION_ASM_OP): Delete.\n+\t(TARGET_ASM_INIT_SECTIONS): Define.\n+\t* config/v850/v850-protos.h (sdata_section, rosdata_section): Delete.\n+\t(sbss_section, tdata_section, zdata_section, rozdata_section): Delete.\n+\t(zbss_section): Delete.\n+\n+\t* config/vax/vaxv.h (ASM_OUTPUT_LOCAL): Use switch_to_section.\n+\n+\t* config/vx-common.h (vxworks_exception_section): Delete.\n+\t(TARGET_ASM_EXCEPTION_SECTION): Delete.\n+\n+\t* config/xtensa/xtensa.c (xtensa_select_rtx_section): Return the\n+\tsection rather than emitting assembly code.\n+\t* config/xtensa/xtensa.h (ASM_OUTPUT_POOL_PROLOGUE): Use\n+\tswitch_to_section.\n+\n+\t* Makefile.in (GTFILES): Add $(srcdir)/output.h.\n+\t* coretypes.h (section): New union and typedef.\n+\t* dbxout.c (FORCE_TEXT): Use switch_to_section.  Remove argument\n+\tfrom call to current_function_section.\n+\t(dbxout_function_end, dbxout_init, dbxout_source_file, dbxout_finish)\n+\t(dbxout_symbol_location): Use switch_to_section.\n+\t* dwarf2out.c (named_section_eh_frame_section): Delete, moving\n+\tmost of the code into...\n+\t(default_eh_frame_section): ...here.  Return a section.\n+\t(collect2_eh_frame_section): Delete, moving most of the code into..\n+\t(switch_to_eh_frame_section): ...this new function.\n+\t(debug_info_section, debug_abbrev_section, debug_aranges_section)\n+\t(debug_macinfo_section, debug_line_section, debug_loc_section)\n+\t(debug_pubnames_section, debug_str_section, debug_ranges_section): New\n+\tvariables.\n+\t(output_call_frame_info): Call switch_to_eh_frame_section instead of\n+\teh_frame_section.  Use switch_to_section and get_section.\n+\t(dwarf2out_begin_prologue): Use switch_to_section.\n+\t(AT_string_form): Check the flags in debug_str_section instead of\n+\tDEBUG_STR_SECTION_FLAGS.\n+\t(output_comp_unit): Use switch_to_section, get_section, and\n+\tdebug_info_section.\n+\t(output_line_info, secname_for_decl): Use unlikely_text_section_p.\n+\t(dwarf2out_begin_block): Use switch_to_section.  Remove argument\n+\tfrom call to current_function_section.\n+\t(dwarf2out_var_location): Use unlikely_text_section_p.\n+\t(dwarf2out_source_line): Use switch_to_section.  Remove argument\n+\tfrom call to current_function_section.\n+\t(dwarf2out_start_source_file, dwarf2out_end_source_file)\n+\t(dwarf2out_define, dwarf2out_undef: Use switch_to_section and\n+\tdebug_macinfo_section.\n+\t(dwarf2out_init): Initialize the new section variables.  Use them\n+\tinstead of calls to named_section_flags.  Use switch_to_section.\n+\t(output_indirect_string): Use switch_to_section and debug_str_section.\n+\t(dwarf2out_finish): Use switch_to_section and the new section\n+\tvariables.\n+\t* except.c (default_exception_section): Return the section instead\n+\tof emitting assembly code.\n+\t(output_function_exception_table): Use the global exception_section\n+\tvariable instead of the target hook.  Use switch_to_section.  Remove\n+\targument from call to current_function_section.\n+\t* final.c (HAVE_READONLY_DATA_SECTION): Delete.\n+\t(shorten_branches): Use pointer comparisons to detect whether the\n+\ttext section is the same as readonly_data_section.\n+\t(profile_function): Use switch_to_section.  Remove argument from\n+\tcall to current_function_section.\n+\t(final_scan_insn): Likewise.  Update use of last_text_section.\n+\t* gengtype.c (open_base_files): Add an include of output.h.\n+\t* output.h (text_section, data_section, readonly_data_section)\n+\t(ctors_section, dtors_section, bss_section, init_section)\n+\t(fini_section, sdata_section): Turn into section pointers.\n+\t(in_text_section, in_unlikely_text_section, exports_section)\n+\t(drectve_section, named_section, mergeable_string_section)\n+\t(last_text_section_name): Delete.\n+\t(default_exception_section, default_eh_frame_section): Return sections.\n+\t(SECTION_DECLARED, SECTION_NAMED): New macros.\n+\t(SECTION_MACH_DEP): Bump value.\n+\t(section_common, named_section, unnamed_section): New structures.\n+\t(unnamed_section_callback): New typedef.\n+\t(section): New union.\n+\t(sbss_section, exception_section, eh_frame_section): New variables.\n+\t(in_section, last_text_section): Turn into section pointers.\n+\t(get_unnamed_section, get_section, get_named_section): New functions.\n+\t(mergeable_constant_section, function_section): Return a section.\n+\t(unlikely_text_section): Likewise.\n+\t(current_function_section): Likewise.  Remove the decl argument.\n+\t(unlikely_text_section_p, switch_to_section): New functions.\n+\t(output_section_asm_op): New function.\n+\t(set_named_section_flags, named_section_flags, named_section_real)\n+\t(named_section_first_declaration): Delete.\n+\t(default_select_section, default_elf_select_section): Return a section.\n+\t(default_elf_select_section_1, default_function_rodata_section)\n+\t(default_no_function_rodata_section, default_select_rtx_section)\n+\t(default_elf_select_rtx_section): Likewise.\n+\t* rtl.h (in_data_section): Delete.\n+\t* sdbout.c (sdbout_one_type): Use switch_to_section.\n+\t* system.h (EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS): Poison.\n+\t(READONLY_DATA_SECTION, TARGET_ASM_EXCEPTION_SECTION): Poison.\n+\t(TARGET_ASM_EH_FRAME_SECTION): Poison.\n+\t* target-def.h (TARGET_ASM_INIT_SECTIONS): New macro.\n+\t(TARGET_ASM_EXCEPTION_SECTION, TARGET_ASM_EH_FRAME_SECTION): Delete.\n+\t(TARGET_ASM_OUT): Update after above changes.\n+\t* target.h (init_sections): New hook.\n+\t(exception_section, eh_frame_section): Delete.\n+\t(select_section, select_rtx_section, function_rodata_section): Return\n+\ta section rather than emitting assembly code.\n+\t* varasm.c (text_section, data_section, readonly_data_section)\n+\t(ctors_section, dtors_section, bss_section, init_section)\n+\t(fini_section): Turn into section pointers.\n+\t(sdata_section, sbss_section, exception_section): New variables.\n+\t(eh_frame_section): New variable.\n+\t(in_section): Make global and turn into a section pointer.\n+\t(last_text_section): Turn into a section pointer.\n+\t(unnamed_sections): New variable.\n+\t(in_named_name, last_text_section_name): Delete.\n+\t(EXTRA_SECTION_FUNCTIONS): Delete.\n+\t(in_named_entry): Delete.\n+\t(section_htab): New variable, replacing...\n+\t(in_named_htab): ...this deleted variable.\n+\t(section_entry_eq, section_entry_hash): New functions, based on...\n+\t(in_named_entry_eq, in_named_entry_hash): ...these deleted functions.\n+\t(get_unnamed_section, get_section): New functions.\n+\t(unlikely_text_section): Return a section instead of emitting\n+\tassembly code.\n+\t(in_text_section, in_unlikely_text_section, in_data_section): Delete.\n+\t(get_named_section_flags, named_section_first_declaration): Delete.\n+\t(unlikely_text_section_p): New function.\n+\t(named_section_real, named_section): Delete.\n+\t(get_named_section): New function.\n+\t(asm_output_bss, asm_output_aligned_bss): Use switch_to_section.\n+\t(function_section): Return a section rather than emitting\n+\tassembly code.\n+\t(current_function_section): Likewise.  Remove argument.  Use\n+\tlast_text_section if nonnull, otherwise use function_section.\n+\t(default_function_rodata_section): Return a section rather than\n+\temitting assembly code.  Use get_section.\n+\t(default_no_function_rodata_section): Return a section rather than\n+\temitting assembly code.\n+\t(variable_section): Use switch_to_section and get_named_section.\n+\t(mergeable_string_section): Return a section rather than emitting\n+\tassembly code.  Use get_section.  Make static.  Don't take special\n+\tcountermeasures for empty strings.\n+\t(mergeable_constant_section): Return a section rather than emitting\n+\tassembly code.  Use get_section.\n+\t(default_named_section_asm_out_destructor): Use switch_to_section\n+\tand get_section.\n+\t(default_dtor_section_asm_out_destructor): Use switch_to_section.\n+\t(default_named_section_asm_out_constructor): Use switch_to_section\n+\tand get_section.\n+\t(default_ctor_section_asm_out_constructor): Use switch_to_section.\n+\t(assemble_start_function): Likewise.  Set last_text_section to\n+\tNULL rather than no_section.  Change the type of save_section.\n+\t(assemble_zeros, assemble_variable): Use the section flags to detect\n+\twhether or not a section is text.\n+\t(assemble_static_space): Use switch_to_section.\n+\t(assemble_trampoline_template): Likewise.\n+\t(output_constant_def_contents): Use switch_to_section and\n+\tget_named_section.\n+\t(output_constant_pool_1): Use switch_to_section.  Use the section\n+\tflags to see whether sections contain mergeable data.\n+\t(init_varasm_once): Initialize section_htab instead of in_named_htab.\n+\tInitialize new section variables.  Call TARGET_ASM_INIT_SECTIONS.\n+\t(default_elf_asm_named_section): Use SECTION_DECLARED to detect\n+\twhether a section has already been declared.\n+\t(default_select_section, default_elf_select_section): Return a\n+\tsection rather than emitting assembly code.\n+\t(default_elf_select_section_1): Likewise.  Use bss_section for\n+\tSECCAT_BSS if nonnull.  Use get_named_section.\n+\t(default_select_rtx_section): Return a section rather than\n+\temitting assembly code.\n+\t(default_elf_select_rtx_section): Likewise.  Use get_named_section.\n+\t(file_end_indicate_exec_stack): Use switch_to_section and get_section.\n+\t(output_section_asm_op, switch_to_section): New functions.\n+\t* vmsdbgout.c (vmsdbgout_finish): Use switch_to_section and\n+\tget_named_section.\n+\n+\t* doc/tm.texi: Expand the introduction to the sections documentation.\n+\t(TRAMPOLINE_SECTION): Document new interface.\n+\t(SDATA_SECTION_ASM_OP): Document new macro.\n+\t(READONLY_DATA_SECTION): Delete.\n+\t(SDATA_SECTION_ASM_OP): Document new macro.\n+\t(EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS): Delete.\n+\t(TARGET_ASM_INIT_SECTIONS): Document new hook.\n+\t(TARGET_ASM_SELECT_SECTION, TARGET_ASM_FUNCTION_RODATA_SECTION)\n+\t(TARGET_ASM_SELECT_RTX_SECTION): Adjust for new interface.\n+\t(TARGET_EXCEPTION_SECTION, TARGET_EH_FRAME_SECTION): Delete.\n+\n 2005-12-07  Alan Modra  <amodra@bigpond.net.au>\n \n \t* gcc.c (init_gcc_specs): Match braces inside conditionally"}, {"sha": "51d87315ef3ea8f070af74d61b988bb79aa15439", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -2743,7 +2743,7 @@ GTFILES = $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/coverage.c $(srcdir)/function.h $(srcdir)/rtl.h \\\n   $(srcdir)/optabs.h $(srcdir)/tree.h $(srcdir)/libfuncs.h $(SYMTAB_H) \\\n   $(srcdir)/real.h $(srcdir)/varray.h $(srcdir)/insn-addr.h $(srcdir)/hwint.h \\\n-  $(srcdir)/ipa-reference.h \\\n+  $(srcdir)/ipa-reference.h $(srcdir)/output.h \\\n   $(srcdir)/cselib.h $(srcdir)/basic-block.h  $(srcdir)/cgraph.h \\\n   $(srcdir)/c-common.h $(srcdir)/c-tree.h $(srcdir)/reload.h \\\n   $(srcdir)/alias.c $(srcdir)/bitmap.c $(srcdir)/cselib.c $(srcdir)/cgraph.c \\"}, {"sha": "00fc52530b0a66aa005a2cd957f476fe5b3c409f", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -127,8 +127,6 @@ extern rtx unicosmk_add_call_info_word (rtx);\n extern void unicosmk_defer_case_vector (rtx, rtx);\n extern void unicosmk_add_extern (const char *);\n extern void unicosmk_output_align (FILE *, int);\n-extern char * unicosmk_text_section (void);\n-extern char * unicosmk_data_section (void);\n extern void unicosmk_output_common (FILE *, const char *, int, int);\n extern int unicosmk_initial_elimination_offset (int, int);\n #endif"}, {"sha": "244aa271204240e47afd56a7e007eaa8b71d8c9c", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 52, "deletions": 33, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -7959,14 +7959,14 @@ alpha_start_function (FILE *file, const char *fnname,\n \n #if TARGET_ABI_OPEN_VMS\n   /* Ifdef'ed cause link_section are only available then.  */\n-  readonly_data_section ();\n+  switch_to_section (readonly_data_section);\n   fprintf (file, \"\\t.align 3\\n\");\n   assemble_name (file, fnname); fputs (\"..na:\\n\", file);\n   fputs (\"\\t.ascii \\\"\", file);\n   assemble_name (file, fnname);\n   fputs (\"\\\\0\\\"\\n\", file);\n   alpha_need_linkage (fnname, 1);\n-  text_section ();\n+  switch_to_section (text_section);\n #endif\n }\n \n@@ -9355,18 +9355,18 @@ alpha_file_start (void)\n \n #ifdef OBJECT_FORMAT_ELF\n \n-/* Switch to the section to which we should output X.  The only thing\n-   special we do here is to honor small data.  */\n+/* Return a section for X.  The only special thing we do here is to\n+   honor small data.  */\n \n-static void\n+static section *\n alpha_elf_select_rtx_section (enum machine_mode mode, rtx x,\n \t\t\t      unsigned HOST_WIDE_INT align)\n {\n   if (TARGET_SMALL_DATA && GET_MODE_SIZE (mode) <= g_switch_value)\n     /* ??? Consider using mergeable sdata sections.  */\n-    sdata_section ();\n+    return sdata_section;\n   else\n-    default_elf_select_rtx_section (mode, x, align);\n+    return default_elf_select_rtx_section (mode, x, align);\n }\n \n #endif /* OBJECT_FORMAT_ELF */\n@@ -9636,8 +9636,10 @@ alpha_write_linkage (FILE *stream, const char *funname, tree fundecl)\n   splay_tree_node node;\n   struct alpha_funcs *func;\n \n-  link_section ();\n+  fprintf (stream, \"\\t.link\\n\");\n   fprintf (stream, \"\\t.align 3\\n\");\n+  in_section = NULL;\n+\n   node = splay_tree_lookup (alpha_funcs_tree, (splay_tree_key) fundecl);\n   func = (struct alpha_funcs *) node->value;\n \n@@ -9717,15 +9719,15 @@ vms_asm_named_section (const char *name, unsigned int flags,\n static void\n vms_asm_out_constructor (rtx symbol, int priority ATTRIBUTE_UNUSED)\n {\n-  ctors_section ();\n+  switch_to_section (ctors_section);\n   assemble_align (BITS_PER_WORD);\n   assemble_integer (symbol, UNITS_PER_WORD, BITS_PER_WORD, 1);\n }\n \n static void\n vms_asm_out_destructor (rtx symbol, int priority ATTRIBUTE_UNUSED)\n {\n-  dtors_section ();\n+  switch_to_section (dtors_section);\n   assemble_align (BITS_PER_WORD);\n   assemble_integer (symbol, UNITS_PER_WORD, BITS_PER_WORD, 1);\n }\n@@ -9826,7 +9828,7 @@ unicosmk_output_common (FILE *file, const char *name, int size, int align)\n   tree name_tree;\n   printf (\"T3E__: common %s\\n\", name);\n \n-  common_section ();\n+  in_section = NULL;\n   fputs(\"\\t.endp\\n\\n\\t.psect \", file);\n   assemble_name(file, name);\n   fprintf(file, \",%d,common\\n\", floor_log2 (align / BITS_PER_UNIT));\n@@ -9841,6 +9843,43 @@ unicosmk_output_common (FILE *file, const char *name, int size, int align)\n #define SECTION_MAIN (SECTION_PUBLIC << 1)\n static int current_section_align;\n \n+/* A get_unnamed_section callback for switching to the text section.  */\n+\n+static void\n+unicosmk_output_text_section_asm_op (const void *data ATTRIBUTE_UNUSED)\n+{\n+  static int count = 0;\n+  fprintf (asm_out_file, \"\\t.endp\\n\\n\\t.psect\\tgcc@text___%d,code\\n\", count++);\n+}\n+\n+/* A get_unnamed_section callback for switching to the data section.  */\n+\n+static void\n+unicosmk_output_data_section_asm_op (const void *data ATTRIBUTE_UNUSED)\n+{\n+  static int count = 1;\n+  fprintf (asm_out_file, \"\\t.endp\\n\\n\\t.psect\\tgcc@data___%d,data\\n\", count++);\n+}\n+\n+/* Implement TARGET_ASM_INIT_SECTIONS.\n+\n+   The Cray assembler is really weird with respect to sections. It has only\n+   named sections and you can't reopen a section once it has been closed.\n+   This means that we have to generate unique names whenever we want to\n+   reenter the text or the data section.  */\n+\n+static void\n+unicosmk_init_sections (void)\n+{\n+  text_section = get_unnamed_section (SECTION_CODE,\n+\t\t\t\t      unicosmk_output_text_section_asm_op,\n+\t\t\t\t      NULL);\n+  data_section = get_unnamed_section (SECTION_WRITE,\n+\t\t\t\t      unicosmk_output_data_section_asm_op,\n+\t\t\t\t      NULL);\n+  readonly_data_section = data_section;\n+}\n+\n static unsigned int\n unicosmk_section_type_flags (tree decl, const char *name,\n \t\t\t     int reloc ATTRIBUTE_UNUSED)\n@@ -10004,7 +10043,7 @@ unicosmk_output_deferred_case_vectors (FILE *file)\n   if (machine->addr_list == NULL_RTX)\n     return;\n \n-  data_section ();\n+  switch_to_section (data_section);\n   for (t = machine->addr_list; t; t = XEXP (t, 1))\n     unicosmk_output_addr_vec (file, XEXP (t, 0));\n }\n@@ -10123,7 +10162,7 @@ unicosmk_output_ssib (FILE *file, const char *fnname)\n   rtx ciw;\n   struct machine_function *machine = cfun->machine;\n \n-  ssib_section ();\n+  in_section = NULL;\n   fprintf (file, \"\\t.endp\\n\\n\\t.psect\\t%s%s,data\\n\", user_label_prefix,\n \t   unicosmk_ssib_name ());\n \n@@ -10195,26 +10234,6 @@ unicosmk_add_call_info_word (rtx x)\n \t\t  + strlen (current_function_name ())/8 + 5);\n }\n \n-static char unicosmk_section_buf[100];\n-\n-char *\n-unicosmk_text_section (void)\n-{\n-  static int count = 0;\n-  sprintf (unicosmk_section_buf, \"\\t.endp\\n\\n\\t.psect\\tgcc@text___%d,code\",\n-\t\t\t\t count++);\n-  return unicosmk_section_buf;\n-}\n-\n-char *\n-unicosmk_data_section (void)\n-{\n-  static int count = 1;\n-  sprintf (unicosmk_section_buf, \"\\t.endp\\n\\n\\t.psect\\tgcc@data___%d,data\",\n-\t\t\t\t count++);\n-  return unicosmk_section_buf;\n-}\n-\n /* The Cray assembler doesn't accept extern declarations for symbols which\n    are defined in the same file. We have to keep track of all global\n    symbols which are referenced and/or defined in a source file and output"}, {"sha": "043a5244c089c84ddfc9e14316c47e9f371a503f", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -123,9 +123,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   if ((SIZE) <= g_switch_value)\t\t\t\t\t\t\\\n-    sbss_section();\t\t\t\t\t\t\t\\\n+    switch_to_section (sbss_section);\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n-    bss_section();\t\t\t\t\t\t\t\\\n+    switch_to_section (bss_section);\t\t\t\t\t\\\n   ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");\t\t\t\\\n   if (!flag_inhibit_size_directive)\t\t\t\t\t\\\n     ASM_OUTPUT_SIZE_DIRECTIVE (FILE, NAME, SIZE);\t\t\t\\\n@@ -193,37 +193,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #endif\n \n-/* A default list of other sections which we might be \"in\" at any given\n-   time.  For targets that use additional sections (e.g. .tdesc) you\n-   should override this definition in the target-specific file which\n-   includes this file.  */\n-\n-#undef  EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_sbss, in_sdata\n-\n-/* A default list of extra section function definitions.  For targets\n-   that use additional sections (e.g. .tdesc) you should override this\n-   definition in the target-specific file which includes this file.  */\n-\n-#undef  EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  SECTION_FUNCTION_TEMPLATE(sbss_section, in_sbss, SBSS_SECTION_ASM_OP)\t\\\n-  SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP)\n-\n-extern void sbss_section (void);\n-extern void sdata_section (void);\n-\n-#undef  SECTION_FUNCTION_TEMPLATE\n-#define SECTION_FUNCTION_TEMPLATE(FN, ENUM, OP)\t\\\n-void FN (void)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\\\n-  if (in_section != ENUM)\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", OP);\t\\\n-      in_section = ENUM;\t\t\t\\\n-    }\t\t\t\t\t\t\\\n-}\n-\n /* Switch into a generic section.  */\n #define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n #define TARGET_ASM_SELECT_SECTION  default_elf_select_section"}, {"sha": "a05b33396c04dcdd1e012a40f8622a3710d32bcd", "filename": "gcc/config/alpha/unicosmk.h", "status": "modified", "additions": 2, "deletions": 43, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Falpha%2Funicosmk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Falpha%2Funicosmk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Funicosmk.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -244,51 +244,9 @@ do { fprintf (FILE, \"\\tbr $1,0\\n\");\t\t\t\\\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n /* #define DEFAULT_SIGNED_CHAR 1 */\n \n-/* The Cray assembler is really weird with respect to sections. It has only\n-   named sections and you can't reopen a section once it has been closed.\n-   This means that we have to generate unique names whenever we want to\n-   reenter the text or the data section. The following is a rather bad hack\n-   as TEXT_SECTION_ASM_OP and DATA_SECTION_ASM_OP are supposed to be\n-   constants.  */\n-\n-#undef TEXT_SECTION_ASM_OP\n-#define TEXT_SECTION_ASM_OP unicosmk_text_section ()\n-\n-#undef DATA_SECTION_ASM_OP\n-#define DATA_SECTION_ASM_OP unicosmk_data_section ()\n-\n /* There are no read-only sections on Unicos/Mk.  */\n \n #undef READONLY_DATA_SECTION_ASM_OP\n-#define READONLY_DATA_SECTION data_section\n-\n-/* Define extra sections for common data and SSIBs (static subroutine\n-   information blocks). The actual section header is output by the callers\n-   of these functions.  */\n-\n-#undef EXTRA_SECTIONS\n-#undef EXTRA_SECTION_FUNCTIONS\n-\n-#define EXTRA_SECTIONS in_common, in_ssib\n-#define EXTRA_SECTION_FUNCTIONS\t\\\n-COMMON_SECTION\t\t\t\\\n-SSIB_SECTION\t\n-\n-extern void common_section (void);\n-#define COMMON_SECTION\t\t\\\n-void\t\t\t\t\\\n-common_section (void)\t\t\\\n-{\t\t\t\t\\\n-  in_section = in_common;\t\\\n-}\n-\n-extern void ssib_section (void);\n-#define SSIB_SECTION\t\t\\\n-void\t\t\t\t\\\n-ssib_section (void)\t\t\\\n-{\t\t\t\t\\\n-  in_section = in_ssib;\t\t\\\n-}\n \n /* We take care of this in unicosmk_file_start.  */\n \n@@ -413,7 +371,7 @@ ssib_section (void)\t\t\\\n \n #undef ASM_OUTPUT_LOCAL\n #define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN) \\\n-  do { data_section ();\t\t\t\t\t\\\n+  do { switch_to_section (data_section);\t\t\\\n        fprintf (FILE, \"\\t.align\\t%d\\n\", floor_log2 ((ALIGN) / BITS_PER_UNIT));\\\n        ASM_OUTPUT_LABEL ((FILE), (NAME));\t\t\\\n        fprintf (FILE, \"\\t.byte 0:\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",(SIZE));\\\n@@ -449,6 +407,7 @@ ssib_section (void)\t\t\\\n \n /* Switch into a generic section.  */\n #define TARGET_ASM_NAMED_SECTION unicosmk_asm_named_section\n+#define TARGET_ASM_INIT_SECTIONS unicosmk_init_sections\n \n #undef ASM_OUTPUT_MAX_SKIP_ALIGN\n #define ASM_OUTPUT_MAX_SKIP_ALIGN(STREAM,POWER,MAXSKIP)"}, {"sha": "83545877190460a9e19fc6685950b0e2d80d4ebf", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 2, "deletions": 30, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -198,39 +198,10 @@ typedef struct {int num_args; enum avms_arg_type atypes[6];} avms_arg_info;\n #undef STACK_CHECK_BUILTIN\n #define STACK_CHECK_BUILTIN 0\n \n-#define LINK_SECTION_ASM_OP \"\\t.link\"\n #define READONLY_DATA_SECTION_ASM_OP \"\\t.rdata\"\n-#define LITERALS_SECTION_ASM_OP \"\\t.literals\"\n #define CTORS_SECTION_ASM_OP \"\\t.ctors\"\n #define DTORS_SECTION_ASM_OP \"\\t.dtors\"\n \n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS\tin_link, in_literals\n-\n-#undef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-link_section (void)\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_link)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", LINK_SECTION_ASM_OP); \t\\\n-      in_section = in_link;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}                                                               \\\n-void\t\t\t\t\t\t\t\t\\\n-literals_section (void)\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_literals)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", LITERALS_SECTION_ASM_OP); \t\\\n-      in_section = in_literals;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-\n-extern void link_section (void);\n-extern void literals_section (void);\n-\n #undef ASM_OUTPUT_ADDR_DIFF_ELT\n #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) gcc_unreachable ()\n \n@@ -327,7 +298,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define TARGET_ASM_NAMED_SECTION vms_asm_named_section\n \n #define ASM_OUTPUT_DEF(FILE,LABEL1,LABEL2)\t\t\t\t\\\n-  do {\tliterals_section();                                             \\\n+  do {\tfprintf ((FILE), \"\\t.literals\\n\");\t\t\t\t\\\n+\tin_section = NULL;\t\t\t\t\t\t\\\n \tfprintf ((FILE), \"\\t\");\t\t\t\t\t\t\\\n \tassemble_name (FILE, LABEL1);\t\t\t\t\t\\\n \tfprintf (FILE, \" = \");\t\t\t\t\t\t\\"}, {"sha": "8a1223c45d853dbf6a21b59011c2986a03f6fa74", "filename": "gcc/config/arm/aof.h", "status": "modified", "additions": 3, "deletions": 43, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Farm%2Faof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Farm%2Faof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faof.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -44,48 +44,6 @@\n \n #define LIBGCC_SPEC \"libgcc.a%s\"\n \n-/* Dividing the Output into Sections (Text, Data, ...) */\n-/* AOF Assembler syntax is a nightmare when it comes to areas, since once\n-   we change from one area to another, we can't go back again.  Instead,\n-   we must create a new area with the same attributes and add the new output\n-   to that.  Unfortunately, there is nothing we can do here to guarantee that\n-   two areas with the same attributes will be linked adjacently in the\n-   resulting executable, so we have to be careful not to do pc-relative \n-   addressing across such boundaries.  */\n-#define TEXT_SECTION_ASM_OP aof_text_section ()\n-\n-#define DATA_SECTION_ASM_OP aof_data_section ()\n-\n-#define EXTRA_SECTIONS in_zero_init, in_common\n-\n-#define EXTRA_SECTION_FUNCTIONS\t\\\n-  ZERO_INIT_SECTION\t\t\\\n-  COMMON_SECTION\n-\n-#define ZERO_INIT_SECTION\t\t\t\t\t\\\n-  void\t\t\t\t\t\t\t\t\\\n-  zero_init_section ()\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\\\n-    static int zero_init_count = 1;\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-    if (in_section != in_zero_init)\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-        fprintf (asm_out_file, \"\\tAREA |C$$zidata%d|,NOINIT\\n\",\t\\\n-\t         zero_init_count++);\t\t\t\t\\\n-        in_section = in_zero_init;\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-  }\n-\n-/* Used by ASM_OUTPUT_COMMON (below) to tell varasm.c that we've\n-   changed areas.  */\n-#define COMMON_SECTION\t\t\t\t\t\t\\\n-  void\t\t\t\t\t\t\t\t\\\n-  common_section ()\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\\\n-    if (in_section != in_common)\t\t\t\t\\\n-      in_section = in_common;\t\t\t\t\t\\\n-  }\n-\n #define CTOR_LIST_BEGIN\t\t\t\t\\\n   asm (CTORS_SECTION_ASM_OP);\t\t\t\\\n   extern func_ptr __CTOR_END__[1];\t\t\\\n@@ -130,6 +88,8 @@\n    whole table generation until the end of the function.  */\n #define JUMP_TABLES_IN_TEXT_SECTION 1\n \n+#define TARGET_ASM_INIT_SECTIONS aof_asm_init_sections\n+\n /* Some systems use __main in a way incompatible with its use in gcc, in these\n    cases use the macros NAME__MAIN to give a quoted symbol and SYMBOL__MAIN to\n    give the same symbol without quotes for an alternative entry point.  You\n@@ -159,7 +119,7 @@\n /* Output of Uninitialized Variables.  */\n \n #define ASM_OUTPUT_COMMON(STREAM, NAME, SIZE, ROUNDED)\t\t\\\n-  (common_section (),\t\t\t\t\t\t\\\n+  (in_section = NULL,\t\t\t\t\t\t\\\n    fprintf ((STREAM), \"\\tAREA \"),\t\t\t\t\\\n    assemble_name ((STREAM), (NAME)),\t\t\t\t\\\n    fprintf ((STREAM), \", DATA, COMMON\\n\\t%% %d\\t%s size=%d\\n\",\t\\"}, {"sha": "903afa70f04d566f9905e421e6787e8ca037cb4c", "filename": "gcc/config/arm/aout.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Farm%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Farm%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faout.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -273,7 +273,7 @@\n #define ASM_OUTPUT_ALIGNED_LOCAL(STREAM, NAME, SIZE, ALIGN)\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      bss_section ();\t\t\t\t\t\t\t\\\n+      switch_to_section (bss_section);\t\t\t\t\t\\\n       ASM_OUTPUT_ALIGN (STREAM, floor_log2 (ALIGN / BITS_PER_UNIT));\t\\\n       ASM_OUTPUT_LABEL (STREAM, NAME);\t\t\t\t\t\\\n       fprintf (STREAM, \"\\t.space\\t%d\\n\", (int)(SIZE));\t\t\t\\"}, {"sha": "4e0d77b334120df763ace01ba4a9ed071fef6bec", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -139,12 +139,9 @@ extern int arm_apply_result_size (void);\n \n #if defined AOF_ASSEMBLER\n extern rtx aof_pic_entry (rtx);\n-extern char *aof_text_section (void);\n-extern char *aof_data_section (void);\n extern void aof_add_import (const char *);\n extern void aof_delete_import (const char *);\n extern void zero_init_section (void);\n-extern void common_section (void);\n #endif /* AOF_ASSEMBLER */\n \n #endif /* RTX_CODE */"}, {"sha": "4f357190dbd65594422d7dfd1ae5ec2cde454e96", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 50, "deletions": 22, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -161,6 +161,7 @@ static void aof_dump_imports (FILE *);\n static void aof_dump_pic_table (FILE *);\n static void aof_file_start (void);\n static void aof_file_end (void);\n+static void aof_asm_init_sections (void);\n #endif\n static rtx arm_struct_value_rtx (tree, int);\n static void arm_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n@@ -7297,11 +7298,7 @@ get_jump_table_size (rtx insn)\n {\n   /* ADDR_VECs only take room if read-only data does into the text\n      section.  */\n-  if (JUMP_TABLES_IN_TEXT_SECTION\n-#if !defined(READONLY_DATA_SECTION) && !defined(READONLY_DATA_SECTION_ASM_OP)\n-      || 1\n-#endif\n-      )\n+  if (JUMP_TABLES_IN_TEXT_SECTION || readonly_data_section == text_section)\n     {\n       rtx body = PATTERN (insn);\n       int elt = GET_CODE (body) == ADDR_DIFF_VEC ? 1 : 0;\n@@ -10064,7 +10061,7 @@ arm_output_function_epilogue (FILE *file ATTRIBUTE_UNUSED,\n \n \t  if (label != NULL)\n \t    {\n-\t      function_section (current_function_decl);\n+\t      switch_to_section (function_section (current_function_decl));\n \t      targetm.asm_out.internal_label (asm_out_file, \"L\",\n \t\t\t\t\t      CODE_LABEL_NUMBER (label));\n \t      asm_fprintf (asm_out_file, \"\\tbx\\t%r\\n\", regno);\n@@ -11281,7 +11278,7 @@ arm_elf_asm_constructor (rtx symbol, int priority ATTRIBUTE_UNUSED)\n     }\n \n   /* Put these in the .init_array section, using a special relocation.  */\n-  ctors_section ();\n+  switch_to_section (ctors_section);\n   assemble_align (POINTER_SIZE);\n   fputs (\"\\t.word\\t\", asm_out_file);\n   output_addr_const (asm_out_file, symbol);\n@@ -14195,7 +14192,7 @@ thumb_call_via_reg (rtx reg)\n   /* If we are in the normal text section we can use a single instance\n      per compilation unit.  If we are doing function sections, then we need\n      an entry per section, since we can't rely on reachability.  */\n-  if (in_text_section ())\n+  if (in_section == text_section)\n     {\n       thumb_call_reg_needed = 1;\n \n@@ -14332,7 +14329,7 @@ arm_file_end (void)\n   if (! thumb_call_reg_needed)\n     return;\n \n-  text_section ();\n+  switch_to_section (text_section);\n   asm_fprintf (asm_out_file, \"\\t.code 16\\n\");\n   ASM_OUTPUT_ALIGN (asm_out_file, 1);\n \n@@ -14407,25 +14404,56 @@ aof_dump_pic_table (FILE *f)\n \n int arm_text_section_count = 1;\n \n-char *\n-aof_text_section (void )\n+/* A get_unnamed_section callback for switching to the text section.  */\n+\n+static void\n+aof_output_text_section_asm_op (const void *data ATTRIBUTE_UNUSED)\n {\n-  static char buf[100];\n-  sprintf (buf, \"\\tAREA |C$$code%d|, CODE, READONLY\",\n+  fprintf (asm_out_file, \"\\tAREA |C$$code%d|, CODE, READONLY\",\n \t   arm_text_section_count++);\n   if (flag_pic)\n-    strcat (buf, \", PIC, REENTRANT\");\n-  return buf;\n+    fprintf (asm_out_file, \", PIC, REENTRANT\");\n+  fprintf (asm_out_file, \"\\n\");\n }\n \n static int arm_data_section_count = 1;\n \n-char *\n-aof_data_section (void)\n+/* A get_unnamed_section callback for switching to the data section.  */\n+\n+static void\n+aof_output_data_section_asm_op (const void *data ATTRIBUTE_UNUSED)\n+{\n+  fprintf (asm_out_file, \"\\tAREA |C$$data%d|, DATA\\n\",\n+\t   arm_data_section_count++);\n+}\n+\n+/* Implement TARGET_ASM_INIT_SECTIONS.\n+\n+   AOF Assembler syntax is a nightmare when it comes to areas, since once\n+   we change from one area to another, we can't go back again.  Instead,\n+   we must create a new area with the same attributes and add the new output\n+   to that.  Unfortunately, there is nothing we can do here to guarantee that\n+   two areas with the same attributes will be linked adjacently in the\n+   resulting executable, so we have to be careful not to do pc-relative\n+   addressing across such boundaries.  */\n+\n+static void\n+aof_asm_init_sections (void)\n+{\n+  text_section = get_unnamed_section (SECTION_CODE,\n+\t\t\t\t      aof_output_text_section_asm_op, NULL);\n+  data_section = get_unnamed_section (SECTION_WRITE,\n+\t\t\t\t      aof_output_data_section_asm_op, NULL);\n+  readonly_data_section = text_section;\n+}\n+\n+void\n+zero_init_section (void)\n {\n-  static char buf[100];\n-  sprintf (buf, \"\\tAREA |C$$data%d|, DATA\", arm_data_section_count++);\n-  return buf;\n+  static int zero_init_count = 1;\n+\n+  fprintf (asm_out_file, \"\\tAREA |C$$zidata%d|,NOINIT\\n\", zero_init_count++);\n+  in_section = NULL;\n }\n \n /* The AOF assembler is religiously strict about declarations of\n@@ -14486,7 +14514,7 @@ aof_dump_imports (FILE *f)\n      automagically.  */\n   if (arm_main_function)\n     {\n-      text_section ();\n+      switch_to_section (text_section);\n       fputs (\"\\tIMPORT __main\\n\", f);\n       fputs (\"\\tDCD __main\\n\", f);\n     }\n@@ -14537,7 +14565,7 @@ aof_file_start (void)\n   fputs (\"__f5\\tFN\\t5\\n\", asm_out_file);\n   fputs (\"__f6\\tFN\\t6\\n\", asm_out_file);\n   fputs (\"__f7\\tFN\\t7\\n\", asm_out_file);\n-  text_section ();\n+  switch_to_section (text_section);\n }\n \n static void"}, {"sha": "b7b775c18bb3f8c0409b4eaccd0438c424330928", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -1527,7 +1527,7 @@ typedef struct machine_function GTY(())\n machine_function;\n \n /* As in the machine_function, a global set of call-via labels, for code \n-   that is in text_section().  */\n+   that is in text_section.  */\n extern GTY(()) rtx thumb_call_via_label[14];\n \n /* A C type for declaring a variable that is used as the first argument of"}, {"sha": "f96cd66a93da328ded5982b91db1cdf155819c16", "filename": "gcc/config/arm/pe.h", "status": "modified", "additions": 6, "deletions": 51, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Farm%2Fpe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Farm%2Fpe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpe.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -93,7 +93,7 @@\n \t  drectve_section ();\t\t\t\t\t\\\n \t  fprintf (STREAM, \"\\t.ascii \\\" -export:%s\\\"\\n\",\t\\\n \t\t   arm_strip_name_encoding (NAME));\t\t\\\n-\t  function_section (DECL);\t\t\t\t\\\n+\t  switch_to_section (function_section (DECL));\t\t\\\n \t}\t\t\t\t\t\t\t\\\n       ARM_DECLARE_FUNCTION_NAME (STREAM, NAME, DECL);\t\t\\\n       if (TARGET_THUMB)\t\t\t\t\t\t\\\n@@ -130,11 +130,11 @@\n     {\t\t\t\t\t\t\t\\\n       if (arm_dllexport_name_p (NAME))\t\t\t\\\n \t{\t\t\t\t\t\t\\\n-\t  enum in_section save_section = in_section;\t\\\n+\t  section *save_section = in_section;\t\t\\\n \t  drectve_section ();\t\t\t\t\\\n \t  fprintf (STREAM, \"\\t.ascii \\\" -export:%s\\\"\\n\",\\\n \t\t   arm_strip_name_encoding (NAME));\t\\\n-\t  switch_to_section (save_section, (DECL));\t\\\n+\t  switch_to_section (save_section);\t\t\\\n \t}\t\t\t\t\t\t\\\n       ASM_OUTPUT_LABEL ((STREAM), (NAME));\t\t\\\n     }\t\t\t\t\t\t\t\\\n@@ -144,51 +144,6 @@\n \n #define DRECTVE_SECTION_ASM_OP\t\"\\t.section .drectve\"\n \n-/* A list of other sections which the compiler might be \"in\" at any\n-   given time.  */\n-\n-#undef  EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_drectve\n-\n-/* A list of extra section function definitions.  */\n-\n-#undef  EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS \\\n-  DRECTVE_SECTION_FUNCTION\t\\\n-  SWITCH_TO_SECTION_FUNCTION\n-\n-#define DRECTVE_SECTION_FUNCTION \\\n-void\t\t\t\t\t\t\t\t\t\\\n-drectve_section (void)\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_drectve)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DRECTVE_SECTION_ASM_OP);\t\t\\\n-      in_section = in_drectve;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-/* Switch to SECTION (an `enum in_section').\n-\n-   ??? This facility should be provided by GCC proper.\n-   The problem is that we want to temporarily switch sections in\n-   ASM_DECLARE_OBJECT_NAME and then switch back to the original section\n-   afterwards.  */\n-#define SWITCH_TO_SECTION_FUNCTION\t\t\t\t\\\n-static void\t\t\t\t\t\t\t\\\n-switch_to_section (enum in_section section, tree decl)\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  switch (section)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      case in_text: text_section (); break;\t\t\t\\\n-      case in_unlikely_executed_text: unlikely_text_section (); break; \\\n-      case in_data: data_section (); break;\t\t\t\\\n-      case in_named: named_section (decl, NULL, 0); break;\t\\\n-      case in_readonly_data: readonly_data_section (); break;\t\\\n-      case in_ctors: ctors_section (); break;\t\t\t\\\n-      case in_dtors: dtors_section (); break;\t\t\t\\\n-      case in_drectve: drectve_section (); break;\t\t\\\n-      default: abort (); break;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-\n+#define drectve_section() \\\n+  (fprintf (asm_out_file, \"%s\\n\", DRECTVE_SECTION_ASM_OP), \\\n+   in_section = NULL)"}, {"sha": "c9ad9903490cc96319d29eb4c54bf7c829407066", "filename": "gcc/config/arm/unknown-elf.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Farm%2Funknown-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Farm%2Funknown-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funknown-elf.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -58,9 +58,9 @@\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if (IN_NAMED_SECTION (DECL))\t\t\t\t\t\\\n-\tnamed_section (DECL, NULL, 0);\t\t\t\t\t\\\n+\tswitch_to_section (get_named_section (DECL, NULL, 0));\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n-\tbss_section ();\t\t\t\t\t\t\t\\\n+\tswitch_to_section (bss_section);\t\t\t\t\\\n       \t\t\t\t\t\t\t\t\t\\\n       ASM_OUTPUT_ALIGN (FILE, floor_log2 (ALIGN / BITS_PER_UNIT));\t\\\n \t\t\t\t\t\t\t\t\t\\\n@@ -75,9 +75,9 @@\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if ((DECL) != NULL && IN_NAMED_SECTION (DECL))\t\t\t\\\n-\tnamed_section (DECL, NULL, 0);\t\t\t\t\t\\\n+\tswitch_to_section (get_named_section (DECL, NULL, 0));\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n-\tbss_section ();\t\t\t\t\t\t\t\\\n+\tswitch_to_section (bss_section);\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       ASM_OUTPUT_ALIGN (FILE, floor_log2 (ALIGN / BITS_PER_UNIT));\t\\\n       ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\t\\"}, {"sha": "169be85f6d4f93ff03adf31a6de002cc06973300", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -35,7 +35,6 @@ extern void asm_globalize_label (FILE *file, const char *name);\n extern void order_regs_for_local_alloc (void);\n extern int initial_elimination_offset (int from, int to);\n extern int avr_simple_epilogue (void);\n-extern void progmem_section (void);\n extern int mask_one_bit_p (HOST_WIDE_INT mask);\n extern void gas_output_limited_string (FILE *file, const char *str);\n extern void gas_output_ascii (FILE *file, const char *str, size_t length);"}, {"sha": "f6e9f9fbd03ec82237827238cc8b4a41718d4f3b", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -69,6 +69,7 @@ static void avr_file_end (void);\n static void avr_output_function_prologue (FILE *, HOST_WIDE_INT);\n static void avr_output_function_epilogue (FILE *, HOST_WIDE_INT);\n static void avr_insert_attributes (tree, tree *);\n+static void avr_asm_init_sections (void);\n static unsigned int avr_section_type_flags (tree, const char *, int);\n \n static void avr_reorg (void);\n@@ -114,6 +115,8 @@ static int jump_tables_size;\n const char *avr_base_arch_macro;\n const char *avr_extra_arch_macro;\n \n+section *progmem_section;\n+\n /* More than 8K of program memory: use \"call\" and \"jmp\".  */\n int avr_mega_p = 0;\n \n@@ -4756,6 +4759,29 @@ avr_insert_attributes (tree node, tree *attributes)\n     }\n }\n \n+/* A get_unnamed_section callback for switching to progmem_section.  */\n+\n+static void\n+avr_output_progmem_section_asm_op (const void *arg ATTRIBUTE_UNUSED)\n+{\n+  fprintf (asm_out_file,\n+\t   \"\\t.section .progmem.gcc_sw_table, \\\"%s\\\", @progbits\\n\",\n+\t   AVR_MEGA ? \"a\" : \"ax\");\n+  /* Should already be aligned, this is just to be safe if it isn't.  */\n+  fprintf (asm_out_file, \"\\t.p2align 1\\n\");\n+}\n+\n+/* Implement TARGET_ASM_INIT_SECTIONS.  */\n+\n+static void\n+avr_asm_init_sections (void)\n+{\n+  progmem_section = get_unnamed_section (AVR_MEGA ? 0 : SECTION_CODE,\n+\t\t\t\t\t avr_output_progmem_section_asm_op,\n+\t\t\t\t\t NULL);\n+  readonly_data_section = data_section;\n+}\n+\n static unsigned int\n avr_section_type_flags (tree decl, const char *name, int reloc)\n {\n@@ -5847,7 +5873,7 @@ avr_output_bld (rtx operands[], int bit_nr)\n void\n avr_output_addr_vec_elt (FILE *stream, int value)\n {\n-  progmem_section ();\n+  switch_to_section (progmem_section);\n   if (AVR_MEGA)\n     fprintf (stream, \"\\t.word pm(.L%d)\\n\", value);\n   else"}, {"sha": "d69e67b7eba25c00ff536dcd9151c82eaa9e0e1e", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -47,6 +47,7 @@ extern const char *avr_extra_arch_macro;\n extern int avr_mega_p;\n extern int avr_enhanced_p;\n extern int avr_asm_only_p;\n+extern GTY(()) section *progmem_section;\n \n #define AVR_MEGA (avr_mega_p && !TARGET_SHORT_CALLS)\n #define AVR_ENHANCED (avr_enhanced_p)\n@@ -476,26 +477,6 @@ do {\t\t\t\t\t\t\t\t\t    \\\n \n #define TARGET_ASM_DESTRUCTOR avr_asm_out_dtor\n \n-#define EXTRA_SECTIONS in_progmem\n-\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t      \\\n-\t\t\t\t\t\t\t\t\t      \\\n-void\t\t\t\t\t\t\t\t\t      \\\n-progmem_section (void)\t\t\t\t\t\t\t      \\\n-{\t\t\t\t\t\t\t\t\t      \\\n-  if (in_section != in_progmem)\t\t\t\t\t\t      \\\n-    {\t\t\t\t\t\t\t\t\t      \\\n-      fprintf (asm_out_file,\t\t\t\t\t\t      \\\n-\t       \"\\t.section .progmem.gcc_sw_table, \\\"%s\\\", @progbits\\n\",\t      \\\n-\t       AVR_MEGA ? \"a\" : \"ax\");\t\t\t\t\t      \\\n-      /* Should already be aligned, this is just to be safe if it isn't.  */  \\\n-      fprintf (asm_out_file, \"\\t.p2align 1\\n\");\t\t\t\t      \\\n-      in_section = in_progmem;\t\t\t\t\t\t      \\\n-    }\t\t\t\t\t\t\t\t\t      \\\n-}\n-\n-#define READONLY_DATA_SECTION data_section\n-\n #define JUMP_TABLES_IN_TEXT_SECTION 0\n \n #define ASM_COMMENT_START \" ; \"\n@@ -506,6 +487,7 @@ progmem_section (void)\t\t\t\t\t\t\t      \\\n \n /* Switch into a generic section.  */\n #define TARGET_ASM_NAMED_SECTION default_elf_asm_named_section\n+#define TARGET_ASM_INIT_SECTIONS avr_asm_init_sections\n \n #define ASM_OUTPUT_ASCII(FILE, P, SIZE)\t gas_output_ascii (FILE,P,SIZE)\n \n@@ -682,7 +664,8 @@ sprintf (STRING, \"*.%s%lu\", PREFIX, (unsigned long)(NUM))\n   avr_output_addr_vec_elt(STREAM, VALUE)\n \n #define ASM_OUTPUT_CASE_LABEL(STREAM, PREFIX, NUM, TABLE) \\\n-  progmem_section (), (*targetm.asm_out.internal_label) (STREAM, PREFIX, NUM)\n+  (switch_to_section (progmem_section), \\\n+   (*targetm.asm_out.internal_label) (STREAM, PREFIX, NUM))\n \n #define ASM_OUTPUT_SKIP(STREAM, N)\t\t\\\n fprintf (STREAM, \"\\t.skip %lu,0\\n\", (unsigned long)(N))"}, {"sha": "803aa5892913ca282c62c19ef34a13e183b66a9c", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -1094,7 +1094,7 @@ do { char __buf[256];\t\t\t\t\t\\\n \n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED) \t\\\n do { \t\t\t\t\t\t\\\n-    data_section();\t\t\t\t\\\n+    switch_to_section (data_section);\t\t\t\t\\\n     if ((SIZE) >= (unsigned int) 4 ) ASM_OUTPUT_ALIGN(FILE,2);\t\\\n     ASM_OUTPUT_SIZE_DIRECTIVE (FILE, NAME, SIZE);\t\t\\\n     ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\\"}, {"sha": "22904e1dc466e4ad0319bbbde32da384cacd4a81", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -1239,37 +1239,6 @@ if (REG_P (OP1) && ! REG_P (OP0))\t\t\t\\\n \n #define FINI_SECTION_ASM_OP  \"\\t.sect\\t\\\".fini\\\"\"\n \n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_init, in_fini\n-\n-#undef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n-  INIT_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  FINI_SECTION_FUNCTION\n-\n-#define INIT_SECTION_FUNCTION\t\t\t\t\t\\\n-extern void init_section (void);\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-init_section (void)\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_init)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \";\\t.init\\n\");\t\t\t\\\n-      in_section = in_init;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define FINI_SECTION_FUNCTION\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-fini_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_fini)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", FINI_SECTION_ASM_OP);\t\\\n-      in_section = in_fini;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-\n /* Switch into a generic section.  */\n #define TARGET_ASM_NAMED_SECTION c4x_asm_named_section\n "}, {"sha": "ad9ce78419f6e920e51ad2033aa797876427ccc0", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 4, "deletions": 61, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -18,6 +18,7 @@ along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n Boston, MA 02110-1301, USA.  */\n \n+extern void darwin_init_sections (void);\n extern int name_needs_quotes (const char *);\n \n extern void machopic_validate_stub_or_non_lazy_ptr (const char *);\n@@ -27,18 +28,6 @@ extern void machopic_output_function_base_name (FILE *);\n extern const char *machopic_indirection_name (rtx, bool);\n extern const char *machopic_mcount_stub_name (void);\n \n-extern void machopic_picsymbol_stub_section (void);\n-extern void machopic_picsymbol_stub1_section (void);\n-extern void machopic_symbol_stub_section (void);\n-extern void machopic_symbol_stub1_section (void);\n-extern void machopic_lazy_symbol_ptr_section (void);\n-extern void machopic_nl_symbol_ptr_section (void);\n-\n-extern void constructor_section (void);\n-extern void destructor_section (void);\n-extern void mod_init_section (void);\n-extern void mod_term_section (void);\n-\n #ifdef RTX_CODE\n \n extern rtx machopic_function_base_sym (void);\n@@ -62,11 +51,9 @@ extern void darwin_encode_section_info (tree, rtx, int);\n \n extern void machopic_finish (FILE *);\n \n-extern void darwin_exception_section (void);\n-extern void darwin_eh_frame_section (void);\n-extern void machopic_select_section (tree, int, unsigned HOST_WIDE_INT);\n-extern void machopic_select_rtx_section (enum machine_mode, rtx,\n-\t\t\t\t\t unsigned HOST_WIDE_INT);\n+extern section *machopic_select_section (tree, int, unsigned HOST_WIDE_INT);\n+extern section *machopic_select_rtx_section (enum machine_mode, rtx,\n+\t\t\t\t\t     unsigned HOST_WIDE_INT);\n \n extern void darwin_unique_section (tree decl, int reloc);\n extern void darwin_asm_named_section (const char *, unsigned int, tree);\n@@ -85,51 +72,7 @@ extern void darwin_mark_decl_preserved (const char *);\n extern tree darwin_handle_weak_import_attribute (tree *node, tree name,\n \t\t\t\t\t\t tree args, int flags,\n \t\t\t\t\t\t bool * no_add_attrs);\n-\n-/* Expanded by EXTRA_SECTION_FUNCTIONS into varasm.o.  */\n-extern void text_coal_section (void);\n-extern void text_unlikely_section (void);\n-extern void text_unlikely_coal_section (void);\n-extern void const_section (void);\n-extern void const_coal_section (void);\n-extern void const_data_section (void);\n-extern void const_data_coal_section (void);\n-extern void data_coal_section (void);\n-extern void cstring_section (void);\n-extern void literal4_section (void);\n-extern void literal8_section (void);\n-extern void constructor_section (void);\n-extern void mod_init_section (void);\n-extern void mod_term_section (void);\n-extern void destructor_section (void);\n-extern void objc_class_section (void);\n-extern void objc_meta_class_section (void);\n-extern void objc_category_section (void);\n-extern void objc_class_vars_section (void);\n-extern void objc_instance_vars_section (void);\n-extern void objc_cls_meth_section (void);\n-extern void objc_inst_meth_section (void);\n-extern void objc_cat_cls_meth_section (void);\n-extern void objc_cat_inst_meth_section (void);\n-extern void objc_selector_refs_section (void);\n-extern void objc_selector_fixup_section (void);\n-extern void objc_symbols_section (void);\n-extern void objc_module_info_section (void);\n-extern void objc_image_info_section (void);\n-extern void objc_protocol_section (void);\n-extern void objc_string_object_section (void);\n-extern void objc_constant_string_object_section (void);\n-extern void objc_class_names_section (void);\n-extern void objc_meth_var_names_section (void);\n-extern void objc_meth_var_types_section (void);\n-extern void objc_cls_refs_section (void);\n-extern void machopic_lazy_symbol_ptr_section (void);\n-extern void machopic_nl_symbol_ptr_section (void);\n-extern void machopic_symbol_stub_section (void);\n-extern void machopic_picsymbol_stub_section (void);\n extern void machopic_output_stub (FILE *, const char *, const char *);\n-extern void darwin_exception_section (void);\n-extern void darwin_eh_frame_section (void);\n extern void darwin_globalize_label (FILE *, const char *);\n extern void darwin_assemble_visibility (tree, int);\n extern void darwin_asm_output_dwarf_delta (FILE *, int, const char *,"}, {"sha": "327c1754a052a49b7aa6fbeb404fc33fae267539", "filename": "gcc/config/darwin-sections.def", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fdarwin-sections.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fdarwin-sections.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-sections.def?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -0,0 +1,62 @@\n+DEF_SECTION (text_coal_section, SECTION_CODE,\n+\t     \".section __TEXT,__textcoal_nt,coalesced,pure_instructions\", 0)\n+DEF_SECTION (text_unlikely_coal_section, SECTION_CODE,\n+\t     \".section __TEXT,__text_unlikely_coal,\"\n+\t     \"coalesced,pure_instructions\", 0)\n+DEF_SECTION (const_section, 0, \".const\", 0)\n+DEF_SECTION (const_coal_section, 0,\n+\t     \".section __TEXT,__const_coal,coalesced\", 0)\n+DEF_SECTION (const_data_section, 0, \".const_data\", 0)\n+DEF_SECTION (const_data_coal_section, 0,\n+\t     \".section __DATA,__const_coal,coalesced\", 0)\n+DEF_SECTION (data_coal_section, SECTION_WRITE,\n+\t     \".section __DATA,__datacoal_nt,coalesced\", 0)\n+DEF_SECTION (cstring_section, 0, \".cstring\", 0)\n+DEF_SECTION (literal4_section, 0, \".literal4\", 0)\n+DEF_SECTION (literal8_section, 0, \".literal8\", 0)\n+DEF_SECTION (constructor_section, 0, \".constructor\", 0)\n+DEF_SECTION (mod_init_section, 0, \".mod_init_func\", 0)\n+DEF_SECTION (mod_term_section, 0, \".mod_term_func\", 0)\n+DEF_SECTION (destructor_section, 0, \".destructor\", 0)\n+DEF_SECTION (objc_class_section, 0, \".objc_class\", 1)\n+DEF_SECTION (objc_meta_class_section, 0, \".objc_meta_class\", 1)\n+DEF_SECTION (objc_category_section, 0, \".objc_category\", 1)\n+DEF_SECTION (objc_class_vars_section, 0, \".objc_class_vars\", 1)\n+DEF_SECTION (objc_instance_vars_section, 0, \".objc_instance_vars\", 1)\n+DEF_SECTION (objc_cls_meth_section, 0, \".objc_cls_meth\", 1)\n+DEF_SECTION (objc_inst_meth_section, 0, \".objc_inst_meth\", 1)\n+DEF_SECTION (objc_cat_cls_meth_section, 0, \".objc_cat_cls_meth\", 1)\n+DEF_SECTION (objc_cat_inst_meth_section, 0, \".objc_cat_inst_meth\", 1)\n+DEF_SECTION (objc_selector_refs_section, 0, \".objc_message_refs\", 1)\n+DEF_SECTION (objc_selector_fixup_section, 0,\n+\t    \".section __OBJC, __sel_fixup, regular, no_dead_strip\", 1)\n+DEF_SECTION (objc_symbols_section, 0, \".objc_symbols\", 1)\n+DEF_SECTION (objc_module_info_section, 0, \".objc_module_info\", 1)\n+DEF_SECTION (objc_protocol_section, 0, \".objc_protocol\", 1)\n+DEF_SECTION (objc_string_object_section, 0, \".objc_string_object\", 1)\n+DEF_SECTION (objc_constant_string_object_section, 0,\n+\t     \".section __OBJC, __cstring_object, regular, no_dead_strip\", 1)\n+\n+/* Fix-and-Continue image marker.  */\n+DEF_SECTION (objc_image_info_section, 0,\n+\t     \".section __OBJC, __image_info, regular, no_dead_strip\", 1)\n+DEF_SECTION (objc_class_names_section, 0, \".objc_class_names\", 1)\n+DEF_SECTION (objc_meth_var_names_section, 0, \".objc_meth_var_names\", 1)\n+DEF_SECTION (objc_meth_var_types_section, 0, \".objc_meth_var_types\", 1)\n+DEF_SECTION (objc_cls_refs_section, 0, \".objc_cls_refs\", 1)\n+\n+DEF_SECTION (machopic_lazy_symbol_ptr_section, 0, \".lazy_symbol_pointer\", 0)\n+DEF_SECTION (machopic_nl_symbol_ptr_section, 0, \".non_lazy_symbol_pointer\", 0)\n+DEF_SECTION (machopic_symbol_stub_section, 0, \".symbol_stub\", 0)\n+DEF_SECTION (machopic_symbol_stub1_section, 0,\n+\t     \".section __TEXT,__symbol_stub1,symbol_stubs,\"\n+\t     \"pure_instructions,16\", 0)\n+DEF_SECTION (machopic_picsymbol_stub_section, 0, \".picsymbol_stub\", 0)\n+DEF_SECTION (machopic_picsymbol_stub1_section, 0,\n+\t     \".section __TEXT,__picsymbolstub1,symbol_stubs,\"\n+\t     \"pure_instructions,32\", 0)\n+DEF_SECTION (darwin_exception_section, 0,\n+\t     \".section __DATA,__gcc_except_tab\", 0)\n+DEF_SECTION (darwin_eh_frame_section, 0,\n+\t     \".section \" EH_FRAME_SECTION_NAME \",__eh_frame\"\n+\t     EH_FRAME_SECTION_ATTR, 0)"}, {"sha": "badc0d388fe433aecef5a99eec0b1d5150692f27", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 120, "deletions": 64, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -76,6 +76,65 @@ Boston, MA 02110-1301, USA.  */\n    of MACHO_SYMBOL_STATIC for the code that handles @code{static}\n    symbol indirection.  */\n \n+/* Define the individual section variables.  */\n+#define DEF_SECTION(NAME, FLAGS, DIRECTIVE, OBJC) section *NAME;\n+#include \"config/darwin-sections.def\"\n+#undef DEF_SECTION\n+\n+/* A get_unnamed_section callback used to switch to an ObjC section.\n+   DIRECTIVE is as for output_section_asm_op.  */\n+\n+static void\n+output_objc_section_asm_op (const void *directive)\n+{\n+  static int been_here = 0;\n+\n+  if (been_here == 0)\n+    {\n+      been_here = 1;\n+      /* written, cold -> hot */\n+      switch_to_section (objc_cat_cls_meth_section);\n+      switch_to_section (objc_cat_inst_meth_section);\n+      switch_to_section (objc_string_object_section);\n+      switch_to_section (objc_constant_string_object_section);\n+      switch_to_section (objc_selector_refs_section);\n+      switch_to_section (objc_selector_fixup_section);\n+      switch_to_section (objc_cls_refs_section);\n+      switch_to_section (objc_class_section);\n+      switch_to_section (objc_meta_class_section);\n+      /* shared, hot -> cold */\n+      switch_to_section (objc_cls_meth_section);\n+      switch_to_section (objc_inst_meth_section);\n+      switch_to_section (objc_protocol_section);\n+      switch_to_section (objc_class_names_section);\n+      switch_to_section (objc_meth_var_types_section);\n+      switch_to_section (objc_meth_var_names_section);\n+      switch_to_section (objc_category_section);\n+      switch_to_section (objc_class_vars_section);\n+      switch_to_section (objc_instance_vars_section);\n+      switch_to_section (objc_module_info_section);\n+      switch_to_section (objc_symbols_section);\n+    }\n+  output_section_asm_op (directive);\n+}\n+\n+/* Implement TARGET_ASM_INIT_SECTIONS.  */\n+\n+void\n+darwin_init_sections (void)\n+{\n+#define DEF_SECTION(NAME, FLAGS, DIRECTIVE, OBJC) \\\n+  NAME = get_unnamed_section (FLAGS, (OBJC \\\n+\t\t\t\t      ? output_objc_section_asm_op \\\n+\t\t\t\t      : output_section_asm_op), \\\n+\t\t\t      \"\\t\" DIRECTIVE);\n+#include \"darwin-sections.def\"\n+#undef DEF_SECTION\n+\n+  readonly_data_section = const_section;\n+  exception_section = darwin_exception_section;\n+  eh_frame_section = darwin_eh_frame_section;\n+}\n \n int\n name_needs_quotes (const char *name)\n@@ -909,7 +968,7 @@ machopic_output_indirection (void **slot, void *data)\n \t   && (machopic_symbol_defined_p (symbol)\n \t       || SYMBOL_REF_LOCAL_P (symbol)))\n     {\n-      data_section ();\n+      switch_to_section (data_section);\n       assemble_align (GET_MODE_ALIGNMENT (Pmode));\n       assemble_label (ptr_name);\n       assemble_integer (gen_rtx_SYMBOL_REF (Pmode, sym_name),\n@@ -920,7 +979,7 @@ machopic_output_indirection (void **slot, void *data)\n     {\n       rtx init = const0_rtx;\n \n-      machopic_nl_symbol_ptr_section ();\n+      switch_to_section (machopic_nl_symbol_ptr_section);\n       assemble_name (asm_out_file, ptr_name);\n       fprintf (asm_out_file, \":\\n\");\n       \n@@ -1022,41 +1081,38 @@ darwin_mark_decl_preserved (const char *name)\n   fputc ('\\n', asm_out_file);\n }\n \n-void\n+section *\n machopic_select_section (tree exp, int reloc,\n \t\t\t unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED)\n {\n-  void (*base_function)(void);\n+  section *base_section;\n   bool weak_p = (DECL_P (exp) && DECL_WEAK (exp)\n \t\t && (lookup_attribute (\"weak\", DECL_ATTRIBUTES (exp))\n \t\t     || ! lookup_attribute (\"weak_import\",\n \t\t\t\t\t    DECL_ATTRIBUTES (exp))));\n-  static void (* const base_funs[][2])(void) = {\n-    { text_section, text_coal_section },\n-    { unlikely_text_section, text_unlikely_coal_section },\n-    { readonly_data_section, const_coal_section },\n-    { const_data_section, const_data_coal_section },\n-    { data_section, data_coal_section }\n-  };\n-\n-  if (reloc == 0\n-      && (last_text_section == in_text_unlikely\n-\t  || last_text_section == in_text_unlikely_coal))\n-    reloc = 1;\n-    \n+\n   if (TREE_CODE (exp) == FUNCTION_DECL)\n-    base_function = base_funs[reloc][weak_p];\n+    {\n+      if (reloc == 1\n+\t  || unlikely_text_section_p (last_text_section)\n+\t  || last_text_section == text_unlikely_coal_section)\n+\tbase_section = (weak_p\n+\t\t\t? text_unlikely_coal_section\n+\t\t\t: unlikely_text_section ());\n+      else\n+\tbase_section = weak_p ? text_coal_section : text_section;\n+    }\n   else if (decl_readonly_section_1 (exp, reloc, MACHOPIC_INDIRECT))\n-    base_function = base_funs[2][weak_p];\n+    base_section = weak_p ? const_coal_section : const_section;\n   else if (TREE_READONLY (exp) || TREE_CONSTANT (exp))\n-    base_function = base_funs[3][weak_p];\n+    base_section = weak_p ? const_data_coal_section : const_data_section;\n   else\n-    base_function = base_funs[4][weak_p];\n+    base_section = weak_p ? data_coal_section : data_section;\n \n   if (TREE_CODE (exp) == STRING_CST\n       && ((size_t) TREE_STRING_LENGTH (exp)\n \t  == strlen (TREE_STRING_POINTER (exp)) + 1))\n-    cstring_section ();\n+    return cstring_section;\n   else if ((TREE_CODE (exp) == INTEGER_CST || TREE_CODE (exp) == REAL_CST)\n \t   && flag_merge_constants)\n     {\n@@ -1065,13 +1121,13 @@ machopic_select_section (tree exp, int reloc,\n       if (TREE_CODE (size) == INTEGER_CST &&\n \t  TREE_INT_CST_LOW (size) == 4 &&\n \t  TREE_INT_CST_HIGH (size) == 0)\n-\tliteral4_section ();\n+\treturn literal4_section;\n       else if (TREE_CODE (size) == INTEGER_CST &&\n \t       TREE_INT_CST_LOW (size) == 8 &&\n \t       TREE_INT_CST_HIGH (size) == 0)\n-\tliteral8_section ();\n+\treturn literal8_section;\n       else\n-\tbase_function ();\n+\treturn base_section;\n     }\n   else if (TREE_CODE (exp) == CONSTRUCTOR\n \t   && TREE_TYPE (exp)\n@@ -1085,12 +1141,12 @@ machopic_select_section (tree exp, int reloc,\n       if (!strcmp (IDENTIFIER_POINTER (name), \"__builtin_ObjCString\"))\n \t{\n \t  if (flag_next_runtime)\n-\t    objc_constant_string_object_section ();\n+\t    return objc_constant_string_object_section;\n \t  else\n-\t    objc_string_object_section ();\n+\t    return objc_string_object_section;\n \t}\n       else\n-\tbase_function ();\n+\treturn base_section;\n     }\n   else if (TREE_CODE (exp) == VAR_DECL &&\n \t   DECL_NAME (exp) &&\n@@ -1101,89 +1157,89 @@ machopic_select_section (tree exp, int reloc,\n       const char *name = IDENTIFIER_POINTER (DECL_NAME (exp));\n \n       if (!strncmp (name, \"_OBJC_CLASS_METHODS_\", 20))\n-\tobjc_cls_meth_section ();\n+\treturn objc_cls_meth_section;\n       else if (!strncmp (name, \"_OBJC_INSTANCE_METHODS_\", 23))\n-\tobjc_inst_meth_section ();\n+\treturn objc_inst_meth_section;\n       else if (!strncmp (name, \"_OBJC_CATEGORY_CLASS_METHODS_\", 20))\n-\tobjc_cat_cls_meth_section ();\n+\treturn objc_cat_cls_meth_section;\n       else if (!strncmp (name, \"_OBJC_CATEGORY_INSTANCE_METHODS_\", 23))\n-\tobjc_cat_inst_meth_section ();\n+\treturn objc_cat_inst_meth_section;\n       else if (!strncmp (name, \"_OBJC_CLASS_VARIABLES_\", 22))\n-\tobjc_class_vars_section ();\n+\treturn objc_class_vars_section;\n       else if (!strncmp (name, \"_OBJC_INSTANCE_VARIABLES_\", 25))\n-\tobjc_instance_vars_section ();\n+\treturn objc_instance_vars_section;\n       else if (!strncmp (name, \"_OBJC_CLASS_PROTOCOLS_\", 22))\n-\tobjc_cat_cls_meth_section ();\n+\treturn objc_cat_cls_meth_section;\n       else if (!strncmp (name, \"_OBJC_CLASS_NAME_\", 17))\n-\tobjc_class_names_section ();\n+\treturn objc_class_names_section;\n       else if (!strncmp (name, \"_OBJC_METH_VAR_NAME_\", 20))\n-\tobjc_meth_var_names_section ();\n+\treturn objc_meth_var_names_section;\n       else if (!strncmp (name, \"_OBJC_METH_VAR_TYPE_\", 20))\n-\tobjc_meth_var_types_section ();\n+\treturn objc_meth_var_types_section;\n       else if (!strncmp (name, \"_OBJC_CLASS_REFERENCES\", 22))\n-\tobjc_cls_refs_section ();\n+\treturn objc_cls_refs_section;\n       else if (!strncmp (name, \"_OBJC_CLASS_\", 12))\n-\tobjc_class_section ();\n+\treturn objc_class_section;\n       else if (!strncmp (name, \"_OBJC_METACLASS_\", 16))\n-\tobjc_meta_class_section ();\n+\treturn objc_meta_class_section;\n       else if (!strncmp (name, \"_OBJC_CATEGORY_\", 15))\n-\tobjc_category_section ();\n+\treturn objc_category_section;\n       else if (!strncmp (name, \"_OBJC_SELECTOR_REFERENCES\", 25))\n-\tobjc_selector_refs_section ();\n+\treturn objc_selector_refs_section;\n       else if (!strncmp (name, \"_OBJC_SELECTOR_FIXUP\", 20))\n-\tobjc_selector_fixup_section ();\n+\treturn objc_selector_fixup_section;\n       else if (!strncmp (name, \"_OBJC_SYMBOLS\", 13))\n-\tobjc_symbols_section ();\n+\treturn objc_symbols_section;\n       else if (!strncmp (name, \"_OBJC_MODULES\", 13))\n-\tobjc_module_info_section ();\n+\treturn objc_module_info_section;\n       else if (!strncmp (name, \"_OBJC_IMAGE_INFO\", 16))\n-\tobjc_image_info_section ();\n+\treturn objc_image_info_section;\n       else if (!strncmp (name, \"_OBJC_PROTOCOL_INSTANCE_METHODS_\", 32))\n-\tobjc_cat_inst_meth_section ();\n+\treturn objc_cat_inst_meth_section;\n       else if (!strncmp (name, \"_OBJC_PROTOCOL_CLASS_METHODS_\", 29))\n-\tobjc_cat_cls_meth_section ();\n+\treturn objc_cat_cls_meth_section;\n       else if (!strncmp (name, \"_OBJC_PROTOCOL_REFS_\", 20))\n-\tobjc_cat_cls_meth_section ();\n+\treturn objc_cat_cls_meth_section;\n       else if (!strncmp (name, \"_OBJC_PROTOCOL_\", 15))\n-\tobjc_protocol_section ();\n+\treturn objc_protocol_section;\n       else\n-\tbase_function ();\n+\treturn base_section;\n     }\n   else\n-    base_function ();\n+    return base_section;\n }\n \n /* This can be called with address expressions as \"rtx\".\n    They must go in \"const\".  */\n \n-void\n+section *\n machopic_select_rtx_section (enum machine_mode mode, rtx x,\n \t\t\t     unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED)\n {\n   if (GET_MODE_SIZE (mode) == 8\n       && (GET_CODE (x) == CONST_INT\n \t  || GET_CODE (x) == CONST_DOUBLE))\n-    literal8_section ();\n+    return literal8_section;\n   else if (GET_MODE_SIZE (mode) == 4\n \t   && (GET_CODE (x) == CONST_INT\n \t       || GET_CODE (x) == CONST_DOUBLE))\n-    literal4_section ();\n+    return literal4_section;\n   else if (MACHOPIC_INDIRECT\n \t   && (GET_CODE (x) == SYMBOL_REF\n \t       || GET_CODE (x) == CONST\n \t       || GET_CODE (x) == LABEL_REF))\n-    const_data_section ();\n+    return const_data_section;\n   else\n-    const_section ();\n+    return const_section;\n }\n \n void\n machopic_asm_out_constructor (rtx symbol, int priority ATTRIBUTE_UNUSED)\n {\n   if (MACHOPIC_INDIRECT)\n-    mod_init_section ();\n+    switch_to_section (mod_init_section);\n   else\n-    constructor_section ();\n+    switch_to_section (constructor_section);\n   assemble_align (POINTER_SIZE);\n   assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n \n@@ -1195,9 +1251,9 @@ void\n machopic_asm_out_destructor (rtx symbol, int priority ATTRIBUTE_UNUSED)\n {\n   if (MACHOPIC_INDIRECT)\n-    mod_term_section ();\n+    switch_to_section (mod_term_section);\n   else\n-    destructor_section ();\n+    switch_to_section (destructor_section);\n   assemble_align (POINTER_SIZE);\n   assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n \n@@ -1389,8 +1445,8 @@ darwin_file_end (void)\n   machopic_finish (asm_out_file);\n   if (strcmp (lang_hooks.name, \"GNU C++\") == 0)\n     {\n-      constructor_section ();\n-      destructor_section ();\n+      switch_to_section (constructor_section);\n+      switch_to_section (destructor_section);\n       ASM_OUTPUT_ALIGN (asm_out_file, 1);\n     }\n   fprintf (asm_out_file, \"\\t.subsections_via_symbols\\n\");"}, {"sha": "8afae4518e6187c7a8e46a86ba9f1b58bceedee8", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 6, "deletions": 232, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -441,7 +441,7 @@ Boston, MA 02110-1301, USA.  */\n #define NO_PROFILE_COUNTERS\t1\n \n #undef\tINIT_SECTION_ASM_OP\n-#define INIT_SECTION_ASM_OP\n+#define HAS_INIT_SECTION\n \n #undef\tINVOKE__main\n \n@@ -609,233 +609,10 @@ Boston, MA 02110-1301, USA.  */\n #undef\tMAX_OFILE_ALIGNMENT\n #define MAX_OFILE_ALIGNMENT 0x8000\n \n-/* Create new Mach-O sections.  */\n-\n-#undef\tSECTION_FUNCTION\n-#define SECTION_FUNCTION(FUNCTION, SECTION, DIRECTIVE, OBJC)\t\t\\\n-extern void FUNCTION (void);\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-FUNCTION (void)\t\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != SECTION)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (OBJC)\t\t\t\t\t\t\t\t\\\n-\tobjc_section_init ();\t\t\t\t\t\t\\\n-      if (asm_out_file)\t\t\t\t\t\t\t\\\n-\tfputs (\"\\t\" DIRECTIVE \"\\n\", asm_out_file);\t\t\t\\\n-      in_section = SECTION;\t\t\t\t\t\t\\\n-      if ((SECTION == in_text_coal)                                     \\\n-\t  || (SECTION == in_text_unlikely)                              \\\n-\t  || (SECTION == in_text_unlikely_coal))                        \\\n-        last_text_section = SECTION;                                    \\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-\n-/* Darwin uses many types of special sections.  */\n-\n-#undef\tEXTRA_SECTIONS\n-#define EXTRA_SECTIONS\t\t\t\t\t\t\t\\\n-  in_text_coal, in_text_unlikely, in_text_unlikely_coal,\t\t\\\n-  in_const, in_const_data, in_cstring, in_literal4, in_literal8,\t\\\n-  in_const_coal, in_const_data_coal, in_data_coal,\t\t\t\\\n-  in_constructor, in_destructor, in_mod_init, in_mod_term,\t\t\\\n-  in_objc_class, in_objc_meta_class, in_objc_category,\t\t\t\\\n-  in_objc_class_vars, in_objc_instance_vars,\t\t\t\t\\\n-  in_objc_cls_meth, in_objc_inst_meth,\t\t\t\t\t\\\n-  in_objc_cat_cls_meth, in_objc_cat_inst_meth,\t\t\t\t\\\n-  in_objc_selector_refs,\t\t\t\t\t\t\\\n-  in_objc_selector_fixup,\t\t\t\t\t\t\\\n-  in_objc_symbols, in_objc_module_info,\t\t\t\t\t\\\n-  in_objc_protocol, in_objc_string_object,\t\t\t\t\\\n-  in_objc_constant_string_object,\t\t\t\t\t\\\n-  in_objc_image_info,\t\t\t\t\t\t\t\\\n-  in_objc_class_names, in_objc_meth_var_names,\t\t\t\t\\\n-  in_objc_meth_var_types, in_objc_cls_refs,\t\t\t\t\\\n-  in_machopic_nl_symbol_ptr,\t\t\t\t\t\t\\\n-  in_machopic_lazy_symbol_ptr,\t\t\t\t\t\t\\\n-  in_machopic_symbol_stub,\t\t\t\t\t\t\\\n-  in_machopic_symbol_stub1,\t\t\t\t\t\t\\\n-  in_machopic_picsymbol_stub,\t\t\t\t\t\t\\\n-  in_machopic_picsymbol_stub1,\t\t\t\t\t\t\\\n-  in_darwin_exception, in_darwin_eh_frame,\t\t\t\t\\\n-  num_sections\n-\n-#undef\tEXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n-static void objc_section_init (void);\t\t\t\t\\\n-SECTION_FUNCTION (text_coal_section,\t\t\t\t\\\n-\t\t  in_text_coal,\t\t\t\t\t\\\n-\t\t  \".section __TEXT,__textcoal_nt,coalesced,\"\t\\\n-\t\t    \"pure_instructions\", 0)\t\t\t\\\n-SECTION_FUNCTION (text_unlikely_coal_section,\t\t\t\\\n-\t\t  in_text_unlikely_coal,\t\t\t\\\n-\t\t  \".section __TEXT,__text_unlikely_coal,\"\t\\\n-\t\t    \"coalesced,pure_instructions\", 0)\t\t\\\n-SECTION_FUNCTION (const_section,\t\t\t\t\\\n-                  in_const,\t\t\t\t\t\\\n-                  \".const\", 0)\t\t\t\t\t\\\n-SECTION_FUNCTION (const_coal_section,\t\t\t\t\\\n-\t\t  in_const_coal,\t\t\t\t\\\n-\t\t  \".section __TEXT,__const_coal,coalesced\", 0)\t\\\n-SECTION_FUNCTION (const_data_section,\t\t\t\t\\\n-                  in_const_data,\t\t\t\t\\\n-                  \".const_data\", 0)\t\t\t\t\\\n-SECTION_FUNCTION (const_data_coal_section,\t\t\t\\\n-                  in_const_data_coal,\t\t\t\t\\\n-                  \".section __DATA,__const_coal,coalesced\", 0)\t\\\n-SECTION_FUNCTION (data_coal_section,\t\t\t\t\\\n-                  in_data_coal,\t\t\t\t\t\\\n-                  \".section __DATA,__datacoal_nt,coalesced\", 0)\t\\\n-SECTION_FUNCTION (cstring_section,\t\t\t\t\\\n-\t\t  in_cstring,\t\t\t\t\t\\\n-\t\t  \".cstring\", 0)\t\t\t\t\\\n-SECTION_FUNCTION (literal4_section,\t\t\t\t\\\n-\t\t  in_literal4,\t\t\t\t\t\\\n-\t\t  \".literal4\", 0)\t\t\t\t\\\n-SECTION_FUNCTION (literal8_section,\t\t\t\t\\\n-\t\t  in_literal8,\t\t\t\t\t\\\n-\t\t  \".literal8\", 0)\t\t\t\t\\\n-SECTION_FUNCTION (constructor_section,\t\t\t\t\\\n-\t\t  in_constructor,\t\t\t\t\\\n-\t\t  \".constructor\", 0)\t\t\t\t\\\n-SECTION_FUNCTION (mod_init_section,\t\t\t\t\\\n-\t\t  in_mod_init,\t\t\t\t\t\\\n-\t\t  \".mod_init_func\", 0)\t\t\t\t\\\n-SECTION_FUNCTION (mod_term_section,\t\t\t\t\\\n-\t\t  in_mod_term,\t\t\t\t\t\\\n-\t\t  \".mod_term_func\", 0)\t\t\t\t\\\n-SECTION_FUNCTION (destructor_section,\t\t\t\t\\\n-\t\t  in_destructor,\t\t\t\t\\\n-\t\t  \".destructor\", 0)\t\t\t\t\\\n-SECTION_FUNCTION (objc_class_section,\t\t\t\t\\\n-\t\t  in_objc_class,\t\t\t\t\\\n-\t\t  \".objc_class\", 1)\t\t\t\t\\\n-SECTION_FUNCTION (objc_meta_class_section,\t\t\t\\\n-\t\t  in_objc_meta_class,\t\t\t\t\\\n-\t\t  \".objc_meta_class\", 1)\t\t\t\\\n-SECTION_FUNCTION (objc_category_section,\t\t\t\\\n-\t\t  in_objc_category,\t\t\t\t\\\n-\t\t\".objc_category\", 1)\t\t\t\t\\\n-SECTION_FUNCTION (objc_class_vars_section,\t\t\t\\\n-\t\t  in_objc_class_vars,\t\t\t\t\\\n-\t\t  \".objc_class_vars\", 1)\t\t\t\\\n-SECTION_FUNCTION (objc_instance_vars_section,\t\t\t\\\n-\t\t  in_objc_instance_vars,\t\t\t\\\n-\t\t  \".objc_instance_vars\", 1)\t\t\t\\\n-SECTION_FUNCTION (objc_cls_meth_section,\t\t\t\\\n-\t\t  in_objc_cls_meth,\t\t\t\t\\\n-\t\t  \".objc_cls_meth\", 1)\t\t\t\t\\\n-SECTION_FUNCTION (objc_inst_meth_section,\t\t\t\\\n-\t\t  in_objc_inst_meth,\t\t\t\t\\\n-\t\t  \".objc_inst_meth\", 1)\t\t\t\t\\\n-SECTION_FUNCTION (objc_cat_cls_meth_section,\t\t\t\\\n-\t\t  in_objc_cat_cls_meth,\t\t\t\t\\\n-\t\t  \".objc_cat_cls_meth\", 1)\t\t\t\\\n-SECTION_FUNCTION (objc_cat_inst_meth_section,\t\t\t\\\n-\t\t  in_objc_cat_inst_meth,\t\t\t\\\n-\t\t  \".objc_cat_inst_meth\", 1)\t\t\t\\\n-SECTION_FUNCTION (objc_selector_refs_section,\t\t\t\\\n-\t\t  in_objc_selector_refs,\t\t\t\\\n-\t\t  \".objc_message_refs\", 1)\t\t\t\\\n-SECTION_FUNCTION (objc_selector_fixup_section,\t\t\t\t     \\\n-\t\t  in_objc_selector_fixup,\t\t\t\t     \\\n-\t\t  \".section __OBJC, __sel_fixup, regular, no_dead_strip\", 1) \\\n-SECTION_FUNCTION (objc_symbols_section,\t\t\t\t\t\\\n-\t\t  in_objc_symbols,\t\t\t\t\t\\\n-\t\t  \".objc_symbols\", 1)\t\t\t\t\t\\\n-SECTION_FUNCTION (objc_module_info_section,\t\t\t\t\\\n-\t\t  in_objc_module_info,\t\t\t\t\t\\\n-\t\t  \".objc_module_info\", 1)\t\t\t\t\\\n-SECTION_FUNCTION (objc_protocol_section,\t\t\t\t\\\n-\t\t  in_objc_protocol,\t\t\t\t\t\\\n-\t\t  \".objc_protocol\", 1)\t\t\t\t\t\\\n-SECTION_FUNCTION (objc_string_object_section,\t\t\t\t\\\n-\t\t  in_objc_string_object,\t\t\t\t\\\n-\t\t  \".objc_string_object\", 1)\t\t\t\t\\\n-SECTION_FUNCTION (objc_constant_string_object_section,\t\t\t\\\n-\t\t  in_objc_constant_string_object,\t\t\t\\\n-\t\t  \".section __OBJC, __cstring_object, regular, \"\t\\\n-\t\t    \"no_dead_strip\", 1)\t\t\t\t\t\\\n-/* Fix-and-Continue image marker.  */\t\t\t\t\t\\\n-SECTION_FUNCTION (objc_image_info_section,\t\t\t\t\\\n-                  in_objc_image_info,\t\t\t\t\t\\\n-                  \".section __OBJC, __image_info, regular, \"\t\t\\\n-\t\t    \"no_dead_strip\", 1)\t\t\t\t\t\\\n-SECTION_FUNCTION (objc_class_names_section,\t\t\t\t\\\n-\t\tin_objc_class_names,\t\t\t\t\t\\\n-\t\t\".objc_class_names\", 1)\t\t\t\t\t\\\n-SECTION_FUNCTION (objc_meth_var_names_section,\t\t\t\t\\\n-\t\tin_objc_meth_var_names,\t\t\t\t\t\\\n-\t\t\".objc_meth_var_names\", 1)\t\t\t\t\\\n-SECTION_FUNCTION (objc_meth_var_types_section,\t\t\t\t\\\n-\t\tin_objc_meth_var_types,\t\t\t\t\t\\\n-\t\t\".objc_meth_var_types\", 1)\t\t\t\t\\\n-SECTION_FUNCTION (objc_cls_refs_section,\t\t\t\t\\\n-\t\tin_objc_cls_refs,\t\t\t\t\t\\\n-\t\t\".objc_cls_refs\", 1)\t\t\t\t\t\\\n-\\\n-SECTION_FUNCTION (machopic_lazy_symbol_ptr_section,\t\t\t\\\n-\t\tin_machopic_lazy_symbol_ptr,\t\t\t\t\\\n-\t\t\".lazy_symbol_pointer\", 0)\t\t\t\t\\\n-SECTION_FUNCTION (machopic_nl_symbol_ptr_section,\t\t\t\\\n-\t\tin_machopic_nl_symbol_ptr,\t\t\t\t\\\n-\t\t\".non_lazy_symbol_pointer\", 0)\t\t\t\t\\\n-SECTION_FUNCTION (machopic_symbol_stub_section,\t\t\t\t\\\n-\t\tin_machopic_symbol_stub,\t\t\t\t\\\n-\t\t\".symbol_stub\", 0)\t\t\t\t\t\\\n-SECTION_FUNCTION (machopic_symbol_stub1_section,\t\t\t\\\n-\t\tin_machopic_symbol_stub1,\t\t\t\t\\\n-\t\t\".section __TEXT,__symbol_stub1,symbol_stubs,\"\t\t\\\n-\t\t  \"pure_instructions,16\", 0)\t\t\t\t\\\n-SECTION_FUNCTION (machopic_picsymbol_stub_section,\t\t\t\\\n-\t\tin_machopic_picsymbol_stub,\t\t\t\t\\\n-\t\t\".picsymbol_stub\", 0)\t\t\t\t\t\\\n-SECTION_FUNCTION (machopic_picsymbol_stub1_section,\t\t\t\\\n-\t\tin_machopic_picsymbol_stub1,\t\t\t\t\\\n-\t\t\".section __TEXT,__picsymbolstub1,symbol_stubs,\"\t\\\n-\t\t  \"pure_instructions,32\", 0)\t\t\t\t\\\n-SECTION_FUNCTION (darwin_exception_section,\t\t\t\t\\\n-\t\tin_darwin_exception,\t\t\t\t\t\\\n-\t\t\".section __DATA,__gcc_except_tab\", 0)\t\t\t\\\n-SECTION_FUNCTION (darwin_eh_frame_section,\t\t\t\t\\\n-\t\tin_darwin_eh_frame,\t\t\t\t\t\\\n-\t\t\".section \" EH_FRAME_SECTION_NAME \",__eh_frame\"\t\t\\\n-\t\t  EH_FRAME_SECTION_ATTR, 0)\t\t\t\t\\\n-\\\n-static void\t\t\t\t\t\\\n-objc_section_init (void)\t\t\t\\\n-{\t\t\t\t\t\t\\\n-  static int been_here = 0;\t\t\t\\\n-\t\t\t\t\t\t\\\n-  if (been_here == 0)\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      been_here = 1;\t\t\t\t\\\n-          /* written, cold -> hot */\t\t\\\n-      objc_cat_cls_meth_section ();\t\t\\\n-      objc_cat_inst_meth_section ();\t\t\\\n-      objc_string_object_section ();\t\t\\\n-      objc_constant_string_object_section ();\t\\\n-      objc_selector_refs_section ();\t\t\\\n-      objc_selector_fixup_section ();\t\t\\\n-      objc_cls_refs_section ();\t\t\t\\\n-      objc_class_section ();\t\t\t\\\n-      objc_meta_class_section ();\t\t\\\n-          /* shared, hot -> cold */\t\t\\\n-      objc_cls_meth_section ();\t\t\t\\\n-      objc_inst_meth_section ();\t\t\\\n-      objc_protocol_section ();\t\t\t\\\n-      objc_class_names_section ();\t\t\\\n-      objc_meth_var_types_section ();\t\t\\\n-      objc_meth_var_names_section ();\t\t\\\n-      objc_category_section ();\t\t\t\\\n-      objc_class_vars_section ();\t\t\\\n-      objc_instance_vars_section ();\t\t\\\n-      objc_module_info_section ();\t\t\\\n-      objc_symbols_section ();\t\t\t\\\n-    }\t\t\t\t\t\t\\\n-}\n-\n-#define READONLY_DATA_SECTION const_section\n+/* Declare the section variables.  */\n+#define DEF_SECTION(NAME, FLAGS, DIRECTIVE, OBJC) extern section *NAME;\n+#include \"darwin-sections.def\"\n+#undef DEF_SECTION\n \n #undef\tTARGET_ASM_SELECT_SECTION\n #define TARGET_ASM_SELECT_SECTION machopic_select_section\n@@ -986,10 +763,6 @@ enum machopic_addr_class {\n       }\t\t\t\t\t\t\t\t\\\n   } while (0)\n \n-#define TARGET_ASM_EXCEPTION_SECTION darwin_exception_section\n-\n-#define TARGET_ASM_EH_FRAME_SECTION darwin_eh_frame_section\n-\n #define EH_FRAME_SECTION_NAME   \"__TEXT\"\n #define EH_FRAME_SECTION_ATTR \",coalesced,no_toc+strip_static_syms+live_support\"\n \n@@ -1020,6 +793,7 @@ enum machopic_addr_class {\n \n #define TARGET_TERMINATE_DW2_EH_FRAME_INFO false\n \n+#define TARGET_ASM_INIT_SECTIONS darwin_init_sections\n #undef TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION darwin_asm_named_section\n "}, {"sha": "91f203394a6ee9708fc345f54aec08b54c63e8cf", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -128,11 +128,6 @@ extern int frv_acc_group\t\t(rtx);\n extern int frv_adjust_field_align\t(tree, int);\n #endif\n \n-extern void fixup_section\t\t(void);\n-extern void sdata_section\t\t(void);\n-extern void sbss_section\t\t(void);\n-extern void data_section\t\t(void);\n-\n #ifdef RTX_CODE\n extern int integer_register_operand\t(rtx, enum machine_mode);\n extern int frv_load_operand\t\t(rtx, enum machine_mode);"}, {"sha": "82b7cbfd8c2440236fc61550ef4eeb96001ee247", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -9542,7 +9542,7 @@ frv_rtx_costs (rtx x,\n static void\n frv_asm_out_constructor (rtx symbol, int priority ATTRIBUTE_UNUSED)\n {\n-  ctors_section ();\n+  switch_to_section (ctors_section);\n   assemble_align (POINTER_SIZE);\n   if (TARGET_FDPIC)\n     {\n@@ -9557,7 +9557,7 @@ frv_asm_out_constructor (rtx symbol, int priority ATTRIBUTE_UNUSED)\n static void\n frv_asm_out_destructor (rtx symbol, int priority ATTRIBUTE_UNUSED)\n {\n-  dtors_section ();\n+  switch_to_section (dtors_section);\n   assemble_align (POINTER_SIZE);\n   if (TARGET_FDPIC)\n     {"}, {"sha": "f330f3c5ca6064465e59d043f7cdb5b5fa409e70", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 4, "deletions": 41, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -2272,43 +2272,6 @@ do {\t\t\t\t\t\t\t\\\n    program so they can be changed program startup time if the program is loaded\n    at a different address than linked for.  */\n #define FIXUP_SECTION_ASM_OP\t\"\\t.section .rofixup,\\\"a\\\"\"\n-\n-/* A list of names for sections other than the standard two, which are\n-   `in_text' and `in_data'.  You need not define this macro\n-   on a system with no other sections (that GCC needs to use).  */\n-#undef  EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_sdata, in_const, in_fixup\n-\n-/* One or more functions to be defined in \"varasm.c\".  These\n-   functions should do jobs analogous to those of `text_section' and\n-   `data_section', for your additional sections.  Do not define this\n-   macro if you do not define `EXTRA_SECTIONS'.  */\n-#undef  EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS                                         \\\n-\tSDATA_SECTION_FUNCTION\t\t\t\t\t\t\\\n-\tFIXUP_SECTION_FUNCTION\n-\n-#define SDATA_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-sdata_section (void)\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_sdata)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", SDATA_SECTION_ASM_OP);\t\t\\\n-      in_section = in_sdata;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define FIXUP_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-fixup_section (void)\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_fixup)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", FIXUP_SECTION_ASM_OP);\t\t\\\n-      in_section = in_fixup;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n \f\n /* Position Independent Code.  */\n \n@@ -2394,9 +2357,9 @@ extern int size_directive_output;\n #define ASM_OUTPUT_ALIGNED_DECL_LOCAL(STREAM, DECL, NAME, SIZE, ALIGN)\t\\\n do {                                                                   \t\\\n   if ((SIZE) > 0 && (SIZE) <= g_switch_value)\t\t\t\t\\\n-    named_section (0, \".sbss\", 0);                                    \t\\\n+    switch_to_section (get_named_section (NULL, \".sbss\", 0));           \\\n   else                                                                 \t\\\n-    bss_section ();                                                  \t\\\n+    switch_to_section (bss_section);                                  \t\\\n   ASM_OUTPUT_ALIGN (STREAM, floor_log2 ((ALIGN) / BITS_PER_UNIT));     \t\\\n   ASM_DECLARE_OBJECT_NAME (STREAM, NAME, DECL);                        \t\\\n   ASM_OUTPUT_SKIP (STREAM, (SIZE) ? (SIZE) : 1);                       \t\\\n@@ -2652,8 +2615,8 @@ fprintf (STREAM, \"\\t.word .L%d\\n\", VALUE)\n #define ASM_OUTPUT_CASE_LABEL(STREAM, PREFIX, NUM, TABLE)               \\\n do {                                                                    \\\n   if (flag_pic)                                                         \\\n-    function_section (current_function_decl);                           \\\n-  (*targetm.asm_out.internal_label) (STREAM, PREFIX, NUM);                      \\\n+    switch_to_section (function_section (current_function_decl));       \\\n+  (*targetm.asm_out.internal_label) (STREAM, PREFIX, NUM);              \\\n } while (0)\n \n \f"}, {"sha": "bb02b7b8d4909eb6d9ccfdf64a403eddb881d023", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 3, "deletions": 42, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -108,53 +108,14 @@ Boston, MA 02110-1301, USA.  */\n union tree_node;\n #define TREE union tree_node *\n \f\n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_drectve\n-\n-#undef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n-  DRECTVE_SECTION_FUNCTION\t\t\t\t\t\\\n-  SWITCH_TO_SECTION_FUNCTION\n-\n-#define DRECTVE_SECTION_FUNCTION \\\n-void\t\t\t\t\t\t\t\t\t\\\n-drectve_section (void)\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_drectve)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", \"\\t.section .drectve\\n\");\t\t\\\n-      in_section = in_drectve;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-void drectve_section (void);\n+#define drectve_section() \\\n+  (fprintf (asm_out_file, \"\\t.section .drectve\\n\"), \\\n+   in_section = NULL)\n \n /* Older versions of gas don't handle 'r' as data.\n    Explicitly set data flag with 'd'.  */  \n #define READONLY_DATA_SECTION_ASM_OP \"\\t.section .rdata,\\\"dr\\\"\"\n \n-/* Switch to SECTION (an `enum in_section').\n-\n-   ??? This facility should be provided by GCC proper.\n-   The problem is that we want to temporarily switch sections in\n-   ASM_DECLARE_OBJECT_NAME and then switch back to the original section\n-   afterwards.  */\n-#define SWITCH_TO_SECTION_FUNCTION\t\t\t\t\\\n-void switch_to_section (enum in_section, tree);\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-switch_to_section (enum in_section section, tree decl)\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  switch (section)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      case in_text: text_section (); break;\t\t\t\\\n-      case in_unlikely_executed_text: unlikely_text_section (); break; \\\n-      case in_data: data_section (); break;\t\t\t\\\n-      case in_readonly_data: readonly_data_section (); break;\t\\\n-      case in_named: named_section (decl, NULL, 0); break;\t\\\n-      case in_drectve: drectve_section (); break;\t\t\\\n-      default: abort (); break;\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-\n /* Don't allow flag_pic to propagate since gas may produce invalid code\n    otherwise.  */\n "}, {"sha": "b42ed3cdd8953205e722a121eef0573fe3654ea5", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -110,7 +110,7 @@ Boston, MA 02110-1301, USA.  */\n #define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n  do { if ((LOG) != 0)\t\t\t\\\n         {\t\t\t\t\\\n-          if (in_text_section ())\t\\\n+          if (in_section == text_section) \\\n             fprintf (FILE, \"\\t%s %d,0x90\\n\", ALIGN_ASM_OP, (LOG)); \\\n           else\t\t\t\t\\\n             fprintf (FILE, \"\\t%s %d\\n\", ALIGN_ASM_OP, (LOG)); \\"}, {"sha": "079ead85a16a0811d46e76251e70bad32c0a6bad", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -956,9 +956,9 @@ static void init_ext_80387_constants (void);\n static bool ix86_in_large_data_p (tree) ATTRIBUTE_UNUSED;\n static void ix86_encode_section_info (tree, rtx, int) ATTRIBUTE_UNUSED;\n static void x86_64_elf_unique_section (tree decl, int reloc) ATTRIBUTE_UNUSED;\n-static void x86_64_elf_select_section (tree decl, int reloc,\n-\t\t\t\t       unsigned HOST_WIDE_INT align)\n-\t\t\t\t      ATTRIBUTE_UNUSED;\n+static section *x86_64_elf_select_section (tree decl, int reloc,\n+\t\t\t\t\t   unsigned HOST_WIDE_INT align)\n+\t\t\t\t\t     ATTRIBUTE_UNUSED;\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ATTRIBUTE_TABLE\n@@ -1695,9 +1695,9 @@ override_options (void)\n    RELOC indicates whether forming the initial value of DECL requires\n    link-time relocations.  */\n \n-static void\n+static section *\n x86_64_elf_select_section (tree decl, int reloc,\n-\t\t         unsigned HOST_WIDE_INT align)\n+\t\t\t   unsigned HOST_WIDE_INT align)\n {\n   if ((ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_MEDIUM_PIC)\n       && ix86_in_large_data_p (decl))\n@@ -1741,12 +1741,9 @@ x86_64_elf_select_section (tree decl, int reloc,\n \t  break;\n \t}\n       if (sname)\n-\t{\n-          named_section (decl, sname, reloc);\n-\t  return;\n-\t}\n+\treturn get_named_section (decl, sname, reloc);\n     }\n-  default_elf_select_section (decl, reloc, align);\n+  return default_elf_select_section (decl, reloc, align);\n }\n \n /* Build up a unique section name, expressed as a\n@@ -1846,9 +1843,9 @@ x86_output_aligned_bss (FILE *file, tree decl ATTRIBUTE_UNUSED,\n {\n   if ((ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_MEDIUM_PIC)\n       && size > (unsigned int)ix86_section_threshold)\n-    named_section (decl, \".lbss\", 0);\n+    switch_to_section (get_named_section (decl, \".lbss\", 0));\n   else\n-    bss_section ();\n+    switch_to_section (bss_section);\n   ASM_OUTPUT_ALIGN (file, floor_log2 (align / BITS_PER_UNIT));\n #ifdef ASM_DECLARE_OBJECT_NAME\n   last_assemble_variable_decl = decl;\n@@ -4389,7 +4386,7 @@ ix86_file_end (void)\n \t  DECL_ONE_ONLY (decl) = 1;\n \n \t  (*targetm.asm_out.unique_section) (decl, 0);\n-\t  named_section (decl, NULL, 0);\n+\t  switch_to_section (get_named_section (decl, NULL, 0));\n \n \t  (*targetm.asm_out.globalize_label) (asm_out_file, name);\n \t  fputs (\"\\t.hidden\\t\", asm_out_file);\n@@ -4399,7 +4396,7 @@ ix86_file_end (void)\n \t}\n       else\n \t{\n-\t  text_section ();\n+\t  switch_to_section (text_section);\n \t  ASM_OUTPUT_LABEL (asm_out_file, name);\n \t}\n \n@@ -16582,9 +16579,9 @@ machopic_output_stub (FILE *file, const char *symb, const char *stub)\n   sprintf (lazy_ptr_name, \"L%d$lz\", label);\n \n   if (MACHOPIC_PURE)\n-    machopic_picsymbol_stub_section ();\n+    switch_to_section (machopic_picsymbol_stub_section);\n   else\n-    machopic_symbol_stub_section ();\n+    switch_to_section (machopic_symbol_stub_section);\n \n   fprintf (file, \"%s:\\n\", stub);\n   fprintf (file, \"\\t.indirect_symbol %s\\n\", symbol_name);\n@@ -16610,7 +16607,7 @@ machopic_output_stub (FILE *file, const char *symb, const char *stub)\n \n   fprintf (file, \"\\tjmp dyld_stub_binding_helper\\n\");\n \n-  machopic_lazy_symbol_ptr_section ();\n+  switch_to_section (machopic_lazy_symbol_ptr_section);\n   fprintf (file, \"%s:\\n\", lazy_ptr_name);\n   fprintf (file, \"\\t.indirect_symbol %s\\n\", symbol_name);\n   fprintf (file, \"\\t.long %s\\n\", binder_name);\n@@ -18102,8 +18099,7 @@ void ix86_emit_i387_log1p (rtx op0, rtx op1)\n   emit_label (label2);\n }\n \n-/* Solaris named-section hook.  Parameters are as for\n-   named_section_real.  */\n+/* Solaris implementation of TARGET_ASM_NAMED_SECTION.  */\n \n static void\n i386_solaris_elf_named_section (const char *name, unsigned int flags,"}, {"sha": "4688ca0108cedbdfc56ec7e0a237b45c6facef1f", "filename": "gcc/config/i386/nwld.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fi386%2Fnwld.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fi386%2Fnwld.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnwld.c?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -48,7 +48,7 @@ nwld_named_section_asm_out_constructor (rtx symbol, int priority)\n \t   MAX_INIT_PRIORITY - priority);\n #endif\n \n-  named_section_flags (section, 0);\n+  switch_to_section (get_section (section, 0, NULL));\n   assemble_align (POINTER_SIZE);\n   assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n }\n@@ -68,7 +68,7 @@ nwld_named_section_asm_out_destructor (rtx symbol, int priority)\n \t   MAX_INIT_PRIORITY - priority);\n #endif\n \n-  named_section_flags (section, 0);\n+  switch_to_section (get_section (section, 0, NULL));\n   assemble_align (POINTER_SIZE);\n   assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n }"}, {"sha": "b05cdab6bf4c5090bc35ebd25bdca21b76047876", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -102,14 +102,6 @@ extern int ia64_dbx_register_number (int);\n extern rtx ia64_return_addr_rtx (HOST_WIDE_INT, rtx);\n extern void ia64_split_return_addr_rtx (rtx);\n \n-#ifdef SDATA_SECTION_ASM_OP\n-extern void sdata_section (void);\n-#endif\n-\n-#ifdef SBSS_SECTION_ASM_OP\n-extern void sbss_section (void);\n-#endif\n-\n #ifdef ARGS_SIZE_RTX\n /* expr.h defines ARGS_SIZE_RTX and `enum direction'.  */\n extern enum direction ia64_hpux_function_arg_padding (enum machine_mode, tree);"}, {"sha": "2da3383d0f8190a00d349d1214feeda94fbc989c", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -229,16 +229,16 @@ static void ia64_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t  HOST_WIDE_INT, tree);\n static void ia64_file_start (void);\n \n-static void ia64_select_rtx_section (enum machine_mode, rtx,\n-\t\t\t\t     unsigned HOST_WIDE_INT);\n+static section *ia64_select_rtx_section (enum machine_mode, rtx,\n+\t\t\t\t\t unsigned HOST_WIDE_INT);\n static void ia64_output_dwarf_dtprel (FILE *, int, rtx)\n      ATTRIBUTE_UNUSED;\n-static void ia64_rwreloc_select_section (tree, int, unsigned HOST_WIDE_INT)\n+static section *ia64_rwreloc_select_section (tree, int, unsigned HOST_WIDE_INT)\n      ATTRIBUTE_UNUSED;\n static void ia64_rwreloc_unique_section (tree, int)\n      ATTRIBUTE_UNUSED;\n-static void ia64_rwreloc_select_rtx_section (enum machine_mode, rtx,\n-\t\t\t\t\t     unsigned HOST_WIDE_INT)\n+static section *ia64_rwreloc_select_rtx_section (enum machine_mode, rtx,\n+\t\t\t\t\t\t unsigned HOST_WIDE_INT)\n      ATTRIBUTE_UNUSED;\n static unsigned int ia64_section_type_flags (tree, const char *, int);\n static void ia64_hpux_add_extern_decl (tree decl)\n@@ -8507,27 +8507,27 @@ ia64_sysv4_init_libfuncs (void)\n      glibc doesn't have them.  */\n }\n \f\n-/* Switch to the section to which we should output X.  The only thing\n-   special we do here is to honor small data.  */\n+/* Return the section to use for X.  The only special thing we do here\n+   is to honor small data.  */\n \n-static void\n+static section *\n ia64_select_rtx_section (enum machine_mode mode, rtx x,\n \t\t\t unsigned HOST_WIDE_INT align)\n {\n   if (GET_MODE_SIZE (mode) > 0\n       && GET_MODE_SIZE (mode) <= ia64_section_threshold)\n-    sdata_section ();\n+    return sdata_section;\n   else\n-    default_elf_select_rtx_section (mode, x, align);\n+    return default_elf_select_rtx_section (mode, x, align);\n }\n \n /* It is illegal to have relocations in shared segments on AIX and HPUX.\n    Pretend flag_pic is always set.  */\n \n-static void\n+static section *\n ia64_rwreloc_select_section (tree exp, int reloc, unsigned HOST_WIDE_INT align)\n {\n-  default_elf_select_section_1 (exp, reloc, align, true);\n+  return default_elf_select_section_1 (exp, reloc, align, true);\n }\n \n static void\n@@ -8536,14 +8536,16 @@ ia64_rwreloc_unique_section (tree decl, int reloc)\n   default_unique_section_1 (decl, reloc, true);\n }\n \n-static void\n+static section *\n ia64_rwreloc_select_rtx_section (enum machine_mode mode, rtx x,\n \t\t\t\t unsigned HOST_WIDE_INT align)\n {\n+  section *sect;\n   int save_pic = flag_pic;\n   flag_pic = 1;\n-  ia64_select_rtx_section (mode, x, align);\n+  sect = ia64_select_rtx_section (mode, x, align);\n   flag_pic = save_pic;\n+  return sect;\n }\n \n #ifndef TARGET_RWRELOC"}, {"sha": "bc85108b2782774773e345733915135008c8017e", "filename": "gcc/config/ia64/sysv4.h", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fia64%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fia64%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fsysv4.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -46,9 +46,9 @@ extern int size_directive_output;\n #define ASM_OUTPUT_ALIGNED_DECL_LOCAL(FILE, DECL, NAME, SIZE, ALIGN) \\\n do {\t\t\t\t\t\t\t\t\t\\\n   if ((DECL) && sdata_symbolic_operand (XEXP (DECL_RTL (DECL), 0), Pmode)) \\\n-    sbss_section ();\t\t\t\t\t\t\t\\\n+    switch_to_section (sbss_section);\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n-    bss_section ();\t\t\t\t\t\t\t\\\n+    switch_to_section (bss_section);\t\t\t\t\t\\\n   ASM_OUTPUT_ALIGN (FILE, floor_log2 ((ALIGN) / BITS_PER_UNIT));\t\\\n   ASM_DECLARE_OBJECT_NAME (FILE, NAME, DECL);\t\t\t\t\\\n   ASM_OUTPUT_SKIP (FILE, SIZE ? SIZE : 1);\t\t\t\t\\\n@@ -124,36 +124,5 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef\tTARGET_ASM_SELECT_RTX_SECTION\n #define TARGET_ASM_SELECT_RTX_SECTION  ia64_select_rtx_section\n \n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_sdata, in_sbss\n-\n-#undef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  SDATA_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  SBSS_SECTION_FUNCTION\n-\n #define SDATA_SECTION_ASM_OP \"\\t.sdata\"\n-\n-#define SDATA_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-sdata_section (void)\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_sdata)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", SDATA_SECTION_ASM_OP);\t\t\\\n-      in_section = in_sdata;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n #define SBSS_SECTION_ASM_OP \"\\t.sbss\"\n-\n-#define SBSS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-sbss_section (void)\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_sbss)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", SBSS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_sbss;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}"}, {"sha": "dd42fe940945a18bae6f09a8108c497ea1906067", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -154,7 +154,8 @@ static enum machine_mode gpr_mode;\n /* Initialize the GCC target structure.  */\n static struct machine_function* iq2000_init_machine_status (void);\n static bool iq2000_handle_option      (size_t, const char *, int);\n-static void iq2000_select_rtx_section (enum machine_mode, rtx, unsigned HOST_WIDE_INT);\n+static section *iq2000_select_rtx_section (enum machine_mode, rtx,\n+\t\t\t\t\t   unsigned HOST_WIDE_INT);\n static void iq2000_init_builtins      (void);\n static rtx  iq2000_expand_builtin     (tree, rtx, rtx, enum machine_mode, int);\n static bool iq2000_return_in_memory   (tree, tree);\n@@ -163,7 +164,7 @@ static void iq2000_setup_incoming_varargs (CUMULATIVE_ARGS *,\n \t\t\t\t\t   int);\n static bool iq2000_rtx_costs          (rtx, int, int, int *);\n static int  iq2000_address_cost       (rtx);\n-static void iq2000_select_section     (tree, int, unsigned HOST_WIDE_INT);\n+static section *iq2000_select_section (tree, int, unsigned HOST_WIDE_INT);\n static bool iq2000_return_in_memory   (tree, tree);\n static bool iq2000_pass_by_reference  (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t       tree, bool);\n@@ -2146,15 +2147,13 @@ symbolic_expression_p (rtx x)\n /* Choose the section to use for the constant rtx expression X that has\n    mode MODE.  */\n \n-static void\n+static section *\n iq2000_select_rtx_section (enum machine_mode mode, rtx x ATTRIBUTE_UNUSED,\n \t\t\t   unsigned HOST_WIDE_INT align)\n {\n   /* For embedded applications, always put constants in read-only data,\n      in order to reduce RAM usage.  */\n-      /* For embedded applications, always put constants in read-only data,\n-         in order to reduce RAM usage.  */\n-  mergeable_constant_section (mode, align, 0);\n+  return mergeable_constant_section (mode, align, 0);\n }\n \n /* Choose the section to use for DECL.  RELOC is true if its value contains\n@@ -2164,7 +2163,7 @@ iq2000_select_rtx_section (enum machine_mode mode, rtx x ATTRIBUTE_UNUSED,\n    ENCODE_SECTION_INFO in iq2000.h so that references to these symbols\n    are done correctly.  */\n \n-static void\n+static section *\n iq2000_select_section (tree decl, int reloc ATTRIBUTE_UNUSED,\n \t\t       unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED)\n {\n@@ -2179,9 +2178,9 @@ iq2000_select_section (tree decl, int reloc ATTRIBUTE_UNUSED,\n \t       || TREE_CONSTANT (DECL_INITIAL (decl))))\n \t  /* Deal with calls from output_constant_def_contents.  */\n \t  || TREE_CODE (decl) != VAR_DECL)\n-\treadonly_data_section ();\n+\treturn readonly_data_section;\n       else\n-\tdata_section ();\n+\treturn data_section;\n     }\n   else\n     {\n@@ -2194,9 +2193,9 @@ iq2000_select_section (tree decl, int reloc ATTRIBUTE_UNUSED,\n \t       || TREE_CONSTANT (DECL_INITIAL (decl))))\n \t  /* Deal with calls from output_constant_def_contents.  */\n \t  || TREE_CODE (decl) != VAR_DECL)\n-\treadonly_data_section ();\n+\treturn readonly_data_section;\n       else\n-\tdata_section ();\n+\treturn data_section;\n     }\n }\n /* Return register to use for a function return value with VALTYPE for function"}, {"sha": "45c1c349a088e19c670287e5ab116c870d3911bc", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -835,11 +835,6 @@ enum processor_type\n /* Recast the cpu class to be the cpu attribute.  */\n #define iq2000_cpu_attr ((enum attr_cpu) iq2000_tune)\n \n-/* Functions to change what output section we are using.  */\n-extern void\t\trdata_section (void);\n-extern void\t\tsdata_section (void);\n-extern void\t\tsbss_section  (void);\n-\n #define BITMASK_UPPER16\t((unsigned long) 0xffff << 16)\t/* 0xffff0000 */\n #define BITMASK_LOWER16\t((unsigned long) 0xffff)\t/* 0x0000ffff */\n "}, {"sha": "ee03a1e4cd78e54effde853ce9a56ad245e70553", "filename": "gcc/config/m32r/m32r-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -23,8 +23,6 @@\n    complications.  */\n #define Mmode enum machine_mode\n \n-extern void   sbss_section (void);\n-extern void   sdata_section (void);\n extern void   m32r_init (void);\n extern void   m32r_init_expanders (void);\n extern unsigned m32r_compute_frame_size (int);"}, {"sha": "785896a75e8213e6d15a9582949a2a5eeb94435e", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -1529,9 +1529,9 @@ extern char m32r_punct_chars[256];\n     {\t\t\t\t\t\t\t\t\t\\\n       if (! TARGET_SDATA_NONE\t\t\t\t\t\t\\\n           && (SIZE) > 0 && (SIZE) <= g_switch_value)\t\t\t\\\n-        named_section (0, \".sbss\", 0);\t\t\t\t\t\\\n+        switch_to_section (get_named_section (NULL, \".sbss\", 0));\t\\\n       else\t\t\t\t\t\t\t\t\\\n-        bss_section ();\t\t\t\t\t\t\t\\\n+        switch_to_section (bss_section);\t\t\t\t\\\n       ASM_OUTPUT_ALIGN (FILE, floor_log2 (ALIGN / BITS_PER_UNIT));\t\\\n       last_assemble_variable_decl = DECL;\t\t\t\t\\\n       ASM_DECLARE_OBJECT_NAME (FILE, NAME, DECL);\t\t\t\\"}, {"sha": "4ec6d5868106b6421f18a14203ddd85640e10205", "filename": "gcc/config/mcore/mcore-elf.h", "status": "modified", "additions": 5, "deletions": 26, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -32,34 +32,13 @@ Boston, MA 02110-1301, USA.  */\n #undef  PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n \n-#define EXPORTS_SECTION_ASM_OP\t\"\\t.section .exports\"\n-\n-#define SUBTARGET_EXTRA_SECTIONS in_exports\n-\n-#define SUBTARGET_EXTRA_SECTION_FUNCTIONS\t\\\n-  EXPORT_SECTION_FUNCTION\n-\n-#define EXPORT_SECTION_FUNCTION \t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-exports_section ()\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_exports)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", EXPORTS_SECTION_ASM_OP);\t\\\n-      in_section = in_exports;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define SUBTARGET_SWITCH_SECTIONS\t\t\\\n-  case in_exports: exports_section (); break;\n-\n-\n #define MCORE_EXPORT_NAME(STREAM, NAME)\t\t\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      exports_section ();\t\t\t\t\\\n+      fprintf (STREAM, \"\\t.section .exports\\n\");\t\\\n       fprintf (STREAM, \"\\t.ascii \\\" -export:%s\\\"\\n\",\t\\\n \t       (* targetm.strip_name_encoding) (NAME));\t\\\n+      in_section = NULL;\t\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n   while (0);\n \n@@ -73,7 +52,7 @@ exports_section ()\t\t\t\t\t\t\\\n       if (mcore_dllexport_name_p (NAME))\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n           MCORE_EXPORT_NAME (FILE, NAME);\t\t\t\\\n-\t  function_section (DECL);\t\t\t\t\\\n+\t  switch_to_section (function_section (DECL));\t\t\\\n \t}\t\t\t\t\t\t\t\\\n       ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"function\");\t\\\n       ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\\\n@@ -89,9 +68,9 @@ exports_section ()\t\t\t\t\t\t\\\n       HOST_WIDE_INT size;\t\t\t\t\t\\\n       if (mcore_dllexport_name_p (NAME))\t\t\t\\\n         {\t\t\t\t\t\t\t\\\n-          enum in_section save_section = in_section;\t\t\\\n+\t  section *save_section = in_section;\t\t\t\\\n \t  MCORE_EXPORT_NAME (FILE, NAME);\t\t\t\\\n-          switch_to_section (save_section, (DECL));\t\t\\\n+\t  switch_to_section (save_section);\t\t\t\\\n         }\t\t\t\t\t\t\t\\\n       ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");\t\t\\\n       size_directive_output = 0;\t\t\t\t\\"}, {"sha": "5a3aba1c4aadea134b5ec3121974de52092d737a", "filename": "gcc/config/mcore/mcore-pe.h", "status": "modified", "additions": 5, "deletions": 27, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -41,37 +41,15 @@ Boston, MA 02110-1301, USA.  */\n /* Computed in toplev.c.  */\n #undef  PREFERRED_DEBUGGING_TYPE\n \n-/* Lay out additional 'sections' where we place things like code\n-   and readonly data. This gets them out of default places.  */\n-\n-#define SUBTARGET_SWITCH_SECTIONS \t\t\\\n-  case in_drectve: drectve_section (); break;\n-\n-#define DRECTVE_SECTION_ASM_OP\t\"\\t.section .drectve\"\n #define READONLY_DATA_SECTION_ASM_OP\t\"\\t.section .rdata\"\n \n-#define SUBTARGET_EXTRA_SECTIONS in_drectve\n-\n-#define SUBTARGET_EXTRA_SECTION_FUNCTIONS \\\n-  DRECTVE_SECTION_FUNCTION\n-\n-#define DRECTVE_SECTION_FUNCTION \t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-drectve_section ()\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_drectve)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DRECTVE_SECTION_ASM_OP);\t\\\n-      in_section = in_drectve;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-\n #define MCORE_EXPORT_NAME(STREAM, NAME)\t\t\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      drectve_section ();\t\t\t\t\\\n+      fprintf (STREAM, \"\\t.section .drectve\\n\");\t\\\n       fprintf (STREAM, \"\\t.ascii \\\" -export:%s\\\"\\n\",\t\\\n \t       (* targetm.strip_name_encoding) (NAME));\t\\\n+      in_section = NULL;\t\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n   while (0);\n \n@@ -82,9 +60,9 @@ drectve_section ()\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       if (mcore_dllexport_name_p (NAME))\t\t\t\\\n         {\t\t\t\t\t\t\t\\\n-          enum in_section save_section = in_section;\t\t\\\n+\t  section *save_section = in_section;\t\t\t\\\n \t  MCORE_EXPORT_NAME (STREAM, NAME);\t\t\t\\\n-          switch_to_section (save_section, (DECL));\t\t\\\n+\t  switch_to_section (save_section);\t\t\t\\\n         }\t\t\t\t\t\t\t\\\n       ASM_OUTPUT_LABEL ((STREAM), (NAME));\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n@@ -97,7 +75,7 @@ drectve_section ()\t\t\t\t\t\t\\\n       if (mcore_dllexport_name_p (NAME))\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n           MCORE_EXPORT_NAME (STREAM, NAME);\t\t\t\\\n-\t  function_section (DECL);\t\t\t\t\\\n+\t  switch_to_section (function_section (DECL));\t\t\\\n \t}\t\t\t\t\t\t\t\\\n       ASM_OUTPUT_LABEL ((STREAM), (NAME));\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\"}, {"sha": "fd1ba70389bebbd2e0c24f09481910e5810ab1be", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -857,36 +857,6 @@ extern const enum reg_class reg_class_from_letter[];\n #define TEXT_SECTION_ASM_OP  \"\\t.text\"\n #define DATA_SECTION_ASM_OP  \"\\t.data\"\n \n-#undef  EXTRA_SECTIONS\n-#define EXTRA_SECTIONS SUBTARGET_EXTRA_SECTIONS\n-\n-#undef  EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\\\n-  SUBTARGET_EXTRA_SECTION_FUNCTIONS\t\t\\\n-  SWITCH_SECTION_FUNCTION\n-\n-/* Switch to SECTION (an `enum in_section').\n-\n-   ??? This facility should be provided by GCC proper.\n-   The problem is that we want to temporarily switch sections in\n-   ASM_DECLARE_OBJECT_NAME and then switch back to the original section\n-   afterwards.  */\n-#define SWITCH_SECTION_FUNCTION\t\t\t\t\t\\\n-static void switch_to_section (enum in_section, tree);\t\t\\\n-static void\t\t\t\t\t\t\t\\\n-switch_to_section (enum in_section section, tree decl)\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  switch (section)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      case in_text: text_section (); break;\t\t\t\\\n-      case in_unlikely_executed_text: unlikely_text_section (); break;   \\\n-      case in_data: data_section (); break;\t\t\t\\\n-      case in_named: named_section (decl, NULL, 0); break;\t\\\n-      SUBTARGET_SWITCH_SECTIONS      \t\t\t\t\\\n-      default: gcc_unreachable (); \t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-\n /* Switch into a generic section.  */\n #undef TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION  mcore_asm_named_section"}, {"sha": "3e7d0f0baa38095ad4bf4ab5f0f714139fb76cfe", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -328,9 +328,9 @@ static void mips_restore_reg (rtx, rtx);\n static void mips_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t  HOST_WIDE_INT, tree);\n static int symbolic_expression_p (rtx);\n-static void mips_select_rtx_section (enum machine_mode, rtx,\n-\t\t\t\t     unsigned HOST_WIDE_INT);\n-static void mips_function_rodata_section (tree);\n+static section *mips_select_rtx_section (enum machine_mode, rtx,\n+\t\t\t\t\t unsigned HOST_WIDE_INT);\n+static section *mips_function_rodata_section (tree);\n static bool mips_in_small_data_p (tree);\n static int mips_fpr_return_fields (tree, tree *);\n static bool mips_return_in_msb (tree);\n@@ -5762,7 +5762,7 @@ mips_file_start (void)\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n-      /* Note - we use fprintf directly rather than called named_section()\n+      /* Note - we use fprintf directly rather than calling switch_to_section\n \t because in this way we can avoid creating an allocated section.  We\n \t do not want this section to take up any space in the running\n \t executable.  */\n@@ -5804,9 +5804,9 @@ mips_output_aligned_bss (FILE *stream, tree decl, const char *name,\n   extern tree last_assemble_variable_decl;\n \n   if (mips_in_small_data_p (decl))\n-    named_section (0, \".sbss\", 0);\n+    switch_to_section (get_named_section (NULL, \".sbss\", 0));\n   else\n-    bss_section ();\n+    switch_to_section (bss_section);\n   ASM_OUTPUT_ALIGN (stream, floor_log2 (align / BITS_PER_UNIT));\n   last_assemble_variable_decl = decl;\n   ASM_DECLARE_OBJECT_NAME (stream, name, decl);\n@@ -5875,7 +5875,7 @@ mips_output_aligned_decl_common (FILE *stream, tree decl, const char *name,\n       if (TREE_PUBLIC (decl) && DECL_NAME (decl))\n \ttargetm.asm_out.globalize_label (stream, name);\n \n-      readonly_data_section ();\n+      switch_to_section (readonly_data_section);\n       ASM_OUTPUT_ALIGN (stream, floor_log2 (align / BITS_PER_UNIT));\n       mips_declare_object (stream, name, \"\",\n \t\t\t   \":\\n\\t.space\\t\" HOST_WIDE_INT_PRINT_UNSIGNED \"\\n\",\n@@ -7110,7 +7110,7 @@ symbolic_expression_p (rtx x)\n /* Choose the section to use for the constant rtx expression X that has\n    mode MODE.  */\n \n-static void\n+static section *\n mips_select_rtx_section (enum machine_mode mode, rtx x,\n \t\t\t unsigned HOST_WIDE_INT align)\n {\n@@ -7119,13 +7119,13 @@ mips_select_rtx_section (enum machine_mode mode, rtx x,\n       /* In mips16 mode, the constant table always goes in the same section\n          as the function, so that constants can be loaded using PC relative\n          addressing.  */\n-      function_section (current_function_decl);\n+      return function_section (current_function_decl);\n     }\n   else if (TARGET_EMBEDDED_DATA)\n     {\n       /* For embedded applications, always put constants in read-only data,\n \t in order to reduce RAM usage.  */\n-      mergeable_constant_section (mode, align, 0);\n+      return mergeable_constant_section (mode, align, 0);\n     }\n   else\n     {\n@@ -7135,11 +7135,11 @@ mips_select_rtx_section (enum machine_mode mode, rtx x,\n \n       if (GET_MODE_SIZE (mode) <= (unsigned) mips_section_threshold\n \t  && mips_section_threshold > 0)\n-\tnamed_section (0, \".sdata\", 0);\n+\treturn get_named_section (NULL, \".sdata\", 0);\n       else if (flag_pic && symbolic_expression_p (x))\n-\tnamed_section (0, \".data.rel.ro\", 3);\n+\treturn get_named_section (NULL, \".data.rel.ro\", 3);\n       else\n-\tmergeable_constant_section (mode, align, 0);\n+\treturn mergeable_constant_section (mode, align, 0);\n     }\n }\n \n@@ -7151,32 +7151,30 @@ mips_select_rtx_section (enum machine_mode mode, rtx x,\n    cases by selecting a normal data section instead of a read-only one.\n    The logic apes that in default_function_rodata_section.  */\n \n-static void\n+static section *\n mips_function_rodata_section (tree decl)\n {\n   if (!TARGET_ABICALLS || TARGET_GPWORD)\n-    default_function_rodata_section (decl);\n-  else if (decl && DECL_SECTION_NAME (decl))\n+    return default_function_rodata_section (decl);\n+\n+  if (decl && DECL_SECTION_NAME (decl))\n     {\n       const char *name = TREE_STRING_POINTER (DECL_SECTION_NAME (decl));\n       if (DECL_ONE_ONLY (decl) && strncmp (name, \".gnu.linkonce.t.\", 16) == 0)\n \t{\n \t  char *rname = ASTRDUP (name);\n \t  rname[14] = 'd';\n-\t  named_section_real (rname, SECTION_LINKONCE | SECTION_WRITE, decl);\n+\t  return get_section (rname, SECTION_LINKONCE | SECTION_WRITE, decl);\n \t}\n       else if (flag_function_sections && flag_data_sections\n \t       && strncmp (name, \".text.\", 6) == 0)\n \t{\n \t  char *rname = ASTRDUP (name);\n \t  memcpy (rname + 1, \"data\", 4);\n-\t  named_section_flags (rname, SECTION_WRITE);\n+\t  return get_section (rname, SECTION_WRITE, decl);\n \t}\n-      else\n-\tdata_section ();\n     }\n-  else\n-    data_section ();\n+  return data_section;\n }\n \n /* Implement TARGET_IN_SMALL_DATA_P.  Return true if it would be safe to\n@@ -7807,7 +7805,7 @@ build_mips16_function_stub (FILE *file)\n   fprintf (file, \")\\n\");\n \n   fprintf (file, \"\\t.set\\tnomips16\\n\");\n-  function_section (stubdecl);\n+  switch_to_section (function_section (stubdecl));\n   ASM_OUTPUT_ALIGN (file, floor_log2 (FUNCTION_BOUNDARY / BITS_PER_UNIT));\n \n   /* ??? If FUNCTION_NAME_ALREADY_DECLARED is defined, then we are\n@@ -7852,7 +7850,7 @@ build_mips16_function_stub (FILE *file)\n \n   fprintf (file, \"\\t.set\\tmips16\\n\");\n \n-  function_section (current_function_decl);\n+  switch_to_section (function_section (current_function_decl));\n }\n \n /* We keep a list of functions for which we have already built stubs"}, {"sha": "7a1837f68fd7936850404fbaa34b06111b15bbf2", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -2698,7 +2698,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   const char *p = STRING;\t\t\t\t\t\t\\\n   int size = strlen (p) + 1;\t\t\t\t\t\t\\\n-  readonly_data_section ();\t\t\t\t\t\t\\\n+  switch_to_section (readonly_data_section);\t\t\t\t\\\n   assemble_string (p, size);\t\t\t\t\t\t\\\n }\n \f\n@@ -2710,7 +2710,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Define the strings to put out for each section in the object file.  */\n #define TEXT_SECTION_ASM_OP\t\"\\t.text\"\t/* instructions */\n #define DATA_SECTION_ASM_OP\t\"\\t.data\"\t/* large data */\n-#define SDATA_SECTION_ASM_OP\t\"\\t.sdata\"\t/* small data */\n \n #undef READONLY_DATA_SECTION_ASM_OP\n #define READONLY_DATA_SECTION_ASM_OP\t\"\\t.rdata\"\t/* read-only data */"}, {"sha": "bf37901bac3c21b88fc5016fcd4030cf9e26103f", "filename": "gcc/config/mips/vxworks.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fmips%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fmips%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fvxworks.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -17,15 +17,6 @@ along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n Boston, MA 02110-1301, USA.  */\n \n-#undef  EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_sdata, in_sbss\n-\n-#undef  EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS                                            \\\n-  SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP) \\\n-  SECTION_FUNCTION_TEMPLATE(sbss_section, in_sbss, SBSS_SECTION_ASM_OP)\n-\n-\n #undef  TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (MIPS, VxWorks syntax)\");\n "}, {"sha": "b57ed7aefa65c9450a62949ce1039be047683131", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -1182,7 +1182,7 @@ mmix_file_start (void)\n   fputs (\"! mmixal:= 8H LOC Data_Section\\n\", asm_out_file);\n \n   /* Make sure each file starts with the text section.  */\n-  text_section ();\n+  switch_to_section (text_section);\n }\n \n /* TARGET_ASM_FILE_END.  */\n@@ -1191,7 +1191,7 @@ static void\n mmix_file_end (void)\n {\n   /* Make sure each file ends with the data section.  */\n-  data_section ();\n+  switch_to_section (data_section);\n }\n \n /* ASM_OUTPUT_SOURCE_FILENAME.  */\n@@ -1350,7 +1350,7 @@ mmix_asm_output_aligned_local (FILE *stream,\n \t\t\t       int size,\n \t\t\t       int align)\n {\n-  data_section ();\n+  switch_to_section (data_section);\n \n   ASM_OUTPUT_ALIGN (stream, exact_log2 (align/BITS_PER_UNIT));\n   assemble_name (stream, name);"}, {"sha": "510ac07f7b398bfd34bcb1735628597e09a03a11", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -138,7 +138,6 @@ extern int zdepi_cint_p (unsigned HOST_WIDE_INT);\n \n extern void override_options (void);\n extern void output_ascii (FILE *, const char *, int);\n-extern const char * som_text_section_asm_op (void);\n extern HOST_WIDE_INT compute_frame_size (HOST_WIDE_INT, int *);\n extern int and_mask_p (unsigned HOST_WIDE_INT);\n extern int cint_ok_for_move (HOST_WIDE_INT);\n@@ -179,9 +178,3 @@ extern void pa_hpux_asm_output_external (FILE *, tree, const char *);\n \n extern const int magic_milli[];\n extern int shadd_constant_p (int);\n-\n-/* Functions in varasm.c used by pa.c.  */\n-extern void som_readonly_data_section (void);\n-extern void som_one_only_readonly_data_section (void);\n-extern void som_one_only_data_section (void);\n-extern void forget_section (void);"}, {"sha": "ea2a9fa190e8cb2068adf516243270419ac8f6e8", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 89, "deletions": 29, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -107,7 +107,8 @@ static void pa_output_function_epilogue (FILE *, HOST_WIDE_INT);\n static int pa_adjust_cost (rtx, rtx, rtx, int);\n static int pa_adjust_priority (rtx, int);\n static int pa_issue_rate (void);\n-static void pa_select_section (tree, int, unsigned HOST_WIDE_INT)\n+static void pa_som_asm_init_sections (void) ATTRIBUTE_UNUSED;\n+static section *pa_select_section (tree, int, unsigned HOST_WIDE_INT)\n      ATTRIBUTE_UNUSED;\n static void pa_encode_section_info (tree, rtx, int);\n static const char *pa_strip_name_encoding (const char *);\n@@ -155,6 +156,11 @@ static enum reg_class pa_secondary_reload (bool, rtx, enum reg_class,\n \t\t\t\t\t   secondary_reload_info *);\n \n \n+/* The following extra sections are only used for SOM.  */\n+static GTY(()) section *som_readonly_data_section;\n+static GTY(()) section *som_one_only_readonly_data_section;\n+static GTY(()) section *som_one_only_data_section;\n+\n /* Save the operands last given to a compare for use when we\n    generate a scc or bcc insn.  */\n rtx hppa_compare_op0, hppa_compare_op1;\n@@ -3928,7 +3934,7 @@ pa_output_function_epilogue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n       /* We done with this subspace except possibly for some additional\n \t debug information.  Forget that we are in this subspace to ensure\n \t that the next function is output in its own subspace.  */\n-      forget_section ();\n+      in_section = NULL;\n     }\n \n   if (INSN_ADDRESSES_SET_P ())\n@@ -4149,7 +4155,7 @@ output_deferred_profile_counters (void)\n   if (VEC_empty (int, funcdef_nos))\n    return;\n \n-  data_section ();\n+  switch_to_section (data_section);\n   align = MIN (BIGGEST_ALIGNMENT, LONG_TYPE_SIZE);\n   ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (align / BITS_PER_UNIT));\n \n@@ -5299,7 +5305,7 @@ output_deferred_plabels (void)\n      deferred plabels.  */\n   if (n_deferred_plabels)\n     {\n-      data_section ();\n+      switch_to_section (data_section);\n       ASM_OUTPUT_ALIGN (asm_out_file, TARGET_64BIT ? 3 : 2);\n     }\n \n@@ -7795,13 +7801,13 @@ pa_asm_output_mi_thunk (FILE *file, tree thunk_fndecl, HOST_WIDE_INT delta,\n \n   if (TARGET_SOM && flag_pic && TREE_PUBLIC (function))\n     {\n-      data_section ();\n+      switch_to_section (data_section);\n       output_asm_insn (\".align 4\", xoperands);\n       ASM_OUTPUT_LABEL (file, label);\n       output_asm_insn (\".word P'%0\", xoperands);\n     }\n   else if (TARGET_SOM && TARGET_GAS)\n-    forget_section ();\n+    in_section = NULL;\n \n   current_thunk_number++;\n   nbytes = ((nbytes + FUNCTION_BOUNDARY / BITS_PER_UNIT - 1)\n@@ -7977,7 +7983,7 @@ pa_asm_output_aligned_bss (FILE *stream,\n \t\t\t   unsigned HOST_WIDE_INT size,\n \t\t\t   unsigned int align)\n {\n-  bss_section ();\n+  switch_to_section (bss_section);\n   fprintf (stream, \"\\t.align %u\\n\", align / BITS_PER_UNIT);\n \n #ifdef ASM_OUTPUT_TYPE_DIRECTIVE\n@@ -8017,7 +8023,7 @@ pa_asm_output_aligned_common (FILE *stream,\n       align = max_common_align;\n     }\n \n-  bss_section ();\n+  switch_to_section (bss_section);\n \n   assemble_name (stream, name);\n   fprintf (stream, \"\\t.comm \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\n@@ -8037,7 +8043,7 @@ pa_asm_output_aligned_local (FILE *stream,\n \t\t\t     unsigned HOST_WIDE_INT size,\n \t\t\t     unsigned int align)\n {\n-  bss_section ();\n+  switch_to_section (bss_section);\n   fprintf (stream, \"\\t.align %u\\n\", align / BITS_PER_UNIT);\n \n #ifdef LOCAL_ASM_OP\n@@ -9029,17 +9035,16 @@ pa_arg_partial_bytes (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n }\n \n \n-/* Return a string to output before text in the current function.\n+/* A get_unnamed_section callback for switching to the text section.\n \n    This function is only used with SOM.  Because we don't support\n    named subspaces, we can only create a new subspace or switch back\n    to the default text subspace.  */\n-const char *\n-som_text_section_asm_op (void)\n-{\n-  if (!TARGET_SOM)\n-    return \"\";\n \n+static void\n+som_output_text_section_asm_op (const void *data ATTRIBUTE_UNUSED)\n+{\n+  gcc_assert (TARGET_SOM);\n   if (TARGET_GAS)\n     {\n       if (cfun && !cfun->machine->in_nsubspa)\n@@ -9053,32 +9058,87 @@ som_text_section_asm_op (void)\n \t  if (cfun->decl\n \t      && DECL_ONE_ONLY (cfun->decl)\n \t      && !DECL_WEAK (cfun->decl))\n-\t    return\n- \"\\t.SPACE $TEXT$\\n\\t.NSUBSPA $CODE$,QUAD=0,ALIGN=8,ACCESS=44,SORT=24,COMDAT\";\n-\n-\t  return \"\\t.SPACE $TEXT$\\n\\t.NSUBSPA $CODE$\";\n+\t    output_section_asm_op (\"\\t.SPACE $TEXT$\\n\"\n+\t\t\t\t   \"\\t.NSUBSPA $CODE$,QUAD=0,ALIGN=8,\"\n+\t\t\t\t   \"ACCESS=44,SORT=24,COMDAT\");\n+\t  else\n+\t    output_section_asm_op (\"\\t.SPACE $TEXT$\\n\\t.NSUBSPA $CODE$\");\n+\t  return;\n \t}\n       else\n \t{\n \t  /* There isn't a current function or the body of the current\n \t     function has been completed.  So, we are changing to the\n \t     text section to output debugging information.  Do this in\n \t     the default text section.  We need to forget that we are\n-\t     in the text section so that the function text_section in\n-\t     varasm.c will call us the next time around.  */\n-\t  forget_section ();\n+\t     in the text section so that varasm.c will call us when\n+\t     text_section is selected again.  */\n+\t  in_section = NULL;\n \t}\n     }\n+  output_section_asm_op (\"\\t.SPACE $TEXT$\\n\\t.SUBSPA $CODE$\");\n+}\n+\n+/* Implement TARGET_ASM_INITIALIZE_SECTIONS  */\n \n-  return \"\\t.SPACE $TEXT$\\n\\t.SUBSPA $CODE$\";\n+static void\n+pa_som_asm_init_sections (void)\n+{\n+  text_section\n+    = get_unnamed_section (0, som_output_text_section_asm_op, NULL);\n+\n+  /* SOM puts readonly data in the default $LIT$ subspace when PIC code\n+     is not being generated.  */\n+  som_readonly_data_section\n+    = get_unnamed_section (0, output_section_asm_op,\n+\t\t\t   \"\\t.SPACE $TEXT$\\n\\t.SUBSPA $LIT$\");\n+\n+  /* When secondary definitions are not supported, SOM makes readonly\n+     data one-only by creating a new $LIT$ subspace in $TEXT$ with\n+     the comdat flag.  */\n+  som_one_only_readonly_data_section\n+    = get_unnamed_section (0, output_section_asm_op,\n+\t\t\t   \"\\t.SPACE $TEXT$\\n\"\n+\t\t\t   \"\\t.NSUBSPA $LIT$,QUAD=0,ALIGN=8,\"\n+\t\t\t   \"ACCESS=0x2c,SORT=16,COMDAT\");\n+\n+\n+  /* When secondary definitions are not supported, SOM makes data one-only\n+     by creating a new $DATA$ subspace in $PRIVATE$ with the comdat flag.  */\n+  som_one_only_data_section\n+    = get_unnamed_section (SECTION_WRITE, output_section_asm_op,\n+\t\t\t   \"\\t.SPACE $PRIVATE$\\n\"\n+\t\t\t   \"\\t.NSUBSPA $DATA$,QUAD=1,ALIGN=8,\"\n+\t\t\t   \"ACCESS=31,SORT=24,COMDAT\");\n+\n+  /* FIXME: HPUX ld generates incorrect GOT entries for \"T\" fixups\n+     which reference data within the $TEXT$ space (for example constant\n+     strings in the $LIT$ subspace).\n+\n+     The assemblers (GAS and HP as) both have problems with handling\n+     the difference of two symbols which is the other correct way to\n+     reference constant data during PIC code generation.\n+\n+     So, there's no way to reference constant data which is in the\n+     $TEXT$ space during PIC generation.  Instead place all constant\n+     data into the $PRIVATE$ subspace (this reduces sharing, but it\n+     works correctly).  */\n+  readonly_data_section = flag_pic ? data_section : som_readonly_data_section;\n+\n+  /* We must not have a reference to an external symbol defined in a\n+     shared library in a readonly section, else the SOM linker will\n+     complain.\n+\n+     So, we force exception information into the data section.  */\n+  exception_section = data_section;\n }\n \n /* On hpux10, the linker will give an error if we have a reference\n    in the read-only data section to a symbol defined in a shared\n    library.  Therefore, expressions that might require a reloc can\n    not be placed in the read-only data section.  */\n \n-static void\n+static section *\n pa_select_section (tree exp, int reloc,\n \t\t   unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED)\n {\n@@ -9093,19 +9153,19 @@ pa_select_section (tree exp, int reloc,\n       if (TARGET_SOM\n \t  && DECL_ONE_ONLY (exp)\n \t  && !DECL_WEAK (exp))\n-\tsom_one_only_readonly_data_section ();\n+\treturn som_one_only_readonly_data_section;\n       else\n-\treadonly_data_section ();\n+\treturn readonly_data_section;\n     }\n   else if (CONSTANT_CLASS_P (exp) && !reloc)\n-    readonly_data_section ();\n+    return readonly_data_section;\n   else if (TARGET_SOM\n \t   && TREE_CODE (exp) == VAR_DECL\n \t   && DECL_ONE_ONLY (exp)\n \t   && !DECL_WEAK (exp))\n-    som_one_only_data_section ();\n+    return som_one_only_data_section;\n   else\n-    data_section ();\n+    return data_section;\n }\n \n static void"}, {"sha": "a98d1cdda023c83c1c20ca68d7eda9a5f23a4d56", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -1568,72 +1568,6 @@ do { \t\t\t\t\t\t\t\t\t\\\n   ((TREE_CODE (DECL) == FUNCTION_DECL || TREE_CODE (DECL) == VAR_DECL) \\\n    && DECL_SECTION_NAME (DECL) != NULL_TREE)\n \n-/* The following extra sections and extra section functions are only used\n-   for SOM, but they must be provided unconditionally because pa.c's calls\n-   to the functions might not get optimized out when other object formats\n-   are in use.  */\n-\n-#define EXTRA_SECTIONS\t\t\t\t\t\t\t\\\n-  in_som_readonly_data,\t\t\t\t\t\t\t\\\n-  in_som_one_only_readonly_data,\t\t\t\t\t\\\n-  in_som_one_only_data\n-\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  SOM_READONLY_DATA_SECTION_FUNCTION\t\t\t\t\t\\\n-  SOM_ONE_ONLY_READONLY_DATA_SECTION_FUNCTION\t\t\t\t\\\n-  SOM_ONE_ONLY_DATA_SECTION_FUNCTION\t\t\t\t\t\\\n-  FORGET_SECTION_FUNCTION\n-\n-/* SOM puts readonly data in the default $LIT$ subspace when PIC code\n-   is not being generated.  */\n-#define SOM_READONLY_DATA_SECTION_FUNCTION\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-som_readonly_data_section (void)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (!TARGET_SOM)\t\t\t\t\t\t\t\\\n-    return;\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_som_readonly_data)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      in_section = in_som_readonly_data;\t\t\t\t\\\n-      fputs (\"\\t.SPACE $TEXT$\\n\\t.SUBSPA $LIT$\\n\", asm_out_file);\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-/* When secondary definitions are not supported, SOM makes readonly data one\n-   only by creating a new $LIT$ subspace in $TEXT$ with the comdat flag.  */\n-#define SOM_ONE_ONLY_READONLY_DATA_SECTION_FUNCTION\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-som_one_only_readonly_data_section (void)\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (!TARGET_SOM)\t\t\t\t\t\t\t\\\n-    return;\t\t\t\t\t\t\t\t\\\n-  in_section = in_som_one_only_readonly_data;\t\t\t\t\\\n-  fputs (\"\\t.SPACE $TEXT$\\n\"\t\t\t\t\t\t\\\n-\t \"\\t.NSUBSPA $LIT$,QUAD=0,ALIGN=8,ACCESS=0x2c,SORT=16,COMDAT\\n\",\\\n-\t asm_out_file);\t\t\t\t\t\t\t\\\n-}\n-\n-/* When secondary definitions are not supported, SOM makes data one only by\n-   creating a new $DATA$ subspace in $PRIVATE$ with the comdat flag.  */\n-#define SOM_ONE_ONLY_DATA_SECTION_FUNCTION\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-som_one_only_data_section (void)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (!TARGET_SOM)\t\t\t\t\t\t\t\\\n-    return;\t\t\t\t\t\t\t\t\\\n-  in_section = in_som_one_only_data;\t\t\t\t\t\\\n-  fputs (\"\\t.SPACE $PRIVATE$\\n\"\t\t\t\t\t\t\\\n-\t \"\\t.NSUBSPA $DATA$,QUAD=1,ALIGN=8,ACCESS=31,SORT=24,COMDAT\\n\",\t\\\n-\t asm_out_file);\t\t\t\t\t\t\t\\\n-}\n-\n-#define FORGET_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-forget_section (void)\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  in_section = no_section;\t\t\t\t\t\t\\\n-}\n-\n /* Define this macro if references to a symbol must be treated\n    differently depending on something about the variable or\n    function named by the symbol (such as what section it is in)."}, {"sha": "abeafbeebf617c287444879649387e621f8afa08", "filename": "gcc/config/pa/som.h", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fpa%2Fsom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fpa%2Fsom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fsom.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -175,38 +175,14 @@ do {\t\t\t\t\t\t\t\t\\\n \t   }} while (0)\n \n #define TARGET_ASM_FILE_START pa_som_file_start\n-\n-/* String to output before text.  */\n-#define TEXT_SECTION_ASM_OP som_text_section_asm_op ()\n+#define TARGET_ASM_INIT_SECTIONS pa_som_asm_init_sections\n \n /* String to output before writable data.  */\n #define DATA_SECTION_ASM_OP \"\\t.SPACE $PRIVATE$\\n\\t.SUBSPA $DATA$\\n\"\n \n /* String to output before uninitialized data.  */\n #define BSS_SECTION_ASM_OP \"\\t.SPACE $PRIVATE$\\n\\t.SUBSPA $BSS$\\n\"\n \n-/* FIXME: HPUX ld generates incorrect GOT entries for \"T\" fixups\n-   which reference data within the $TEXT$ space (for example constant\n-   strings in the $LIT$ subspace).\n-\n-   The assemblers (GAS and HP as) both have problems with handling\n-   the difference of two symbols which is the other correct way to\n-   reference constant data during PIC code generation.\n-\n-   So, there's no way to reference constant data which is in the\n-   $TEXT$ space during PIC generation.  Instead place all constant\n-   data into the $PRIVATE$ subspace (this reduces sharing, but it\n-   works correctly).  */\n-#define READONLY_DATA_SECTION \\\n-  (flag_pic ? data_section : som_readonly_data_section)\n-\n-/* We must not have a reference to an external symbol defined in a\n-   shared library in a readonly section, else the SOM linker will\n-   complain.\n-\n-   So, we force exception information into the data section.  */\n-#define TARGET_ASM_EXCEPTION_SECTION data_section\n-\n /* This is how to output a command to make the user-level label\n    named NAME defined for reference from other files.  We use\n    assemble_name_raw instead of assemble_name since a symbol in"}, {"sha": "dbde3d50a1b5df70d0a45ac7bd305142639fea27", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -141,13 +141,6 @@ extern void rs6000_gen_section_name (char **, const char *, const char *);\n extern void output_function_profiler (FILE *, int);\n extern void output_profile_hook  (int);\n extern int rs6000_trampoline_size (void);\n-extern void toc_section (void);\n-extern void sdata_section (void);\n-extern void sdata2_section (void);\n-extern void sbss_section (void);\n-extern void private_data_section (void);\n-extern void read_only_data_section (void);\n-extern void read_only_private_data_section (void);\n extern int get_TOC_alias_set (void);\n extern void rs6000_emit_prologue (void);\n extern void rs6000_emit_load_toc_table (int);"}, {"sha": "52312a7863b3260a3216d2d113c9210bf3efec9b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 163, "deletions": 55, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -230,6 +230,12 @@ static enum {\n int toc_initialized;\n char toc_label_name[10];\n \n+static GTY(()) section *read_only_data_section;\n+static GTY(()) section *private_data_section;\n+static GTY(()) section *read_only_private_data_section;\n+static GTY(()) section *sdata2_section;\n+static GTY(()) section *toc_section;\n+\n /* Control alignment for fields within structures.  */\n /* String from -malign-XXXXX.  */\n int rs6000_alignment_flags;\n@@ -605,20 +611,23 @@ static unsigned int rs6000_elf_section_type_flags (tree, const char *, int);\n static void rs6000_elf_asm_out_constructor (rtx, int);\n static void rs6000_elf_asm_out_destructor (rtx, int);\n static void rs6000_elf_end_indicate_exec_stack (void) ATTRIBUTE_UNUSED;\n-static void rs6000_elf_select_section (tree, int, unsigned HOST_WIDE_INT);\n+static void rs6000_elf_asm_init_sections (void);\n+static section *rs6000_elf_select_section (tree, int, unsigned HOST_WIDE_INT);\n static void rs6000_elf_unique_section (tree, int);\n-static void rs6000_elf_select_rtx_section (enum machine_mode, rtx,\n-\t\t\t\t\t   unsigned HOST_WIDE_INT);\n+static section *rs6000_elf_select_rtx_section (enum machine_mode, rtx,\n+\t\t\t\t\t       unsigned HOST_WIDE_INT);\n static void rs6000_elf_encode_section_info (tree, rtx, int)\n      ATTRIBUTE_UNUSED;\n #endif\n #if TARGET_XCOFF\n static void rs6000_xcoff_asm_globalize_label (FILE *, const char *);\n+static void rs6000_xcoff_asm_init_sections (void);\n static void rs6000_xcoff_asm_named_section (const char *, unsigned int, tree);\n-static void rs6000_xcoff_select_section (tree, int, unsigned HOST_WIDE_INT);\n-static void rs6000_xcoff_unique_section (tree, int);\n-static void rs6000_xcoff_select_rtx_section (enum machine_mode, rtx,\n+static section *rs6000_xcoff_select_section (tree, int,\n \t\t\t\t\t     unsigned HOST_WIDE_INT);\n+static void rs6000_xcoff_unique_section (tree, int);\n+static section *rs6000_xcoff_select_rtx_section\n+  (enum machine_mode, rtx, unsigned HOST_WIDE_INT);\n static const char * rs6000_xcoff_strip_name_encoding (const char *);\n static unsigned int rs6000_xcoff_section_type_flags (tree, const char *, int);\n static void rs6000_xcoff_file_start (void);\n@@ -1903,8 +1912,8 @@ rs6000_file_start (void)\n \n   if (DEFAULT_ABI == ABI_AIX || (TARGET_ELF && flag_pic == 2))\n     {\n-      toc_section ();\n-      text_section ();\n+      switch_to_section (toc_section);\n+      switch_to_section (text_section);\n     }\n }\n \n@@ -10806,15 +10815,14 @@ rs6000_assemble_integer (rtx x, unsigned int size, int aligned_p)\n   /* Special handling for SI values.  */\n   if (RELOCATABLE_NEEDS_FIXUP && size == 4 && aligned_p)\n     {\n-      extern int in_toc_section (void);\n       static int recurse = 0;\n \n       /* For -mrelocatable, we mark all addresses that need to be fixed up\n \t in the .fixup section.  */\n       if (TARGET_RELOCATABLE\n-\t  && !in_toc_section ()\n-\t  && !in_text_section ()\n-\t  && !in_unlikely_text_section ()\n+\t  && in_section != toc_section\n+\t  && in_section != text_section\n+\t  && unlikely_text_section_p (in_section)\n \t  && !recurse\n \t  && GET_CODE (x) != CONST_INT\n \t  && GET_CODE (x) != CONST_DOUBLE\n@@ -17323,40 +17331,83 @@ rs6000_longcall_ref (rtx call_ref)\n \f\n #ifdef USING_ELFOS_H\n \n-/* A C statement or statements to switch to the appropriate section\n-   for output of RTX in mode MODE.  You can assume that RTX is some\n-   kind of constant in RTL.  The argument MODE is redundant except in\n-   the case of a `const_int' rtx.  Select the section by calling\n-   `text_section' or one of the alternatives for other sections.\n+/* A get_unnamed_section callback, used for switching to toc_section.  */\n+\n+static void\n+rs6000_elf_output_toc_section_asm_op (const void *data ATTRIBUTE_UNUSED)\n+{\n+  if (DEFAULT_ABI == ABI_AIX\n+      && TARGET_MINIMAL_TOC\n+      && !TARGET_RELOCATABLE)\n+    {\n+      if (!toc_initialized)\n+\t{\n+\t  toc_initialized = 1;\n+\t  fprintf (asm_out_file, \"%s\\n\", TOC_SECTION_ASM_OP);\n+\t  (*targetm.asm_out.internal_label) (asm_out_file, \"LCTOC\", 0);\n+\t  fprintf (asm_out_file, \"\\t.tc \");\n+\t  ASM_OUTPUT_INTERNAL_LABEL_PREFIX (asm_out_file, \"LCTOC1[TC],\");\n+\t  ASM_OUTPUT_INTERNAL_LABEL_PREFIX (asm_out_file, \"LCTOC1\");\n+\t  fprintf (asm_out_file, \"\\n\");\n+\n+\t  fprintf (asm_out_file, \"%s\\n\", MINIMAL_TOC_SECTION_ASM_OP);\n+\t  ASM_OUTPUT_INTERNAL_LABEL_PREFIX (asm_out_file, \"LCTOC1\");\n+\t  fprintf (asm_out_file, \" = .+32768\\n\");\n+\t}\n+      else\n+\tfprintf (asm_out_file, \"%s\\n\", MINIMAL_TOC_SECTION_ASM_OP);\n+    }\n+  else if (DEFAULT_ABI == ABI_AIX && !TARGET_RELOCATABLE)\n+    fprintf (asm_out_file, \"%s\\n\", TOC_SECTION_ASM_OP);\n+  else\n+    {\n+      fprintf (asm_out_file, \"%s\\n\", MINIMAL_TOC_SECTION_ASM_OP);\n+      if (!toc_initialized)\n+\t{\n+\t  ASM_OUTPUT_INTERNAL_LABEL_PREFIX (asm_out_file, \"LCTOC1\");\n+\t  fprintf (asm_out_file, \" = .+32768\\n\");\n+\t  toc_initialized = 1;\n+\t}\n+    }\n+}\n \n-   Do not define this macro if you put all constants in the read-only\n-   data section.  */\n+/* Implement TARGET_ASM_INIT_SECTIONS.  */\n \n static void\n+rs6000_elf_asm_init_sections (void)\n+{\n+  toc_section\n+    = get_unnamed_section (0, rs6000_elf_output_toc_section_asm_op, NULL);\n+\n+  sdata2_section\n+    = get_unnamed_section (SECTION_WRITE, output_section_asm_op,\n+\t\t\t   SDATA2_SECTION_ASM_OP);\n+}\n+\n+/* Implement TARGET_SELECT_RTX_SECTION.  */\n+\n+static section *\n rs6000_elf_select_rtx_section (enum machine_mode mode, rtx x,\n \t\t\t       unsigned HOST_WIDE_INT align)\n {\n   if (ASM_OUTPUT_SPECIAL_POOL_ENTRY_P (x, mode))\n-    toc_section ();\n+    return toc_section;\n   else\n-    default_elf_select_rtx_section (mode, x, align);\n+    return default_elf_select_rtx_section (mode, x, align);\n }\n \n-/* A C statement or statements to switch to the appropriate\n-   section for output of DECL.  DECL is either a `VAR_DECL' node\n-   or a constant of some sort.  RELOC indicates whether forming\n-   the initial value of DECL requires link-time relocations.  */\n+/* Implement TARGET_ASM_SELECT_SECTION for ELF targets.  */\n \n-static void\n+static section *\n rs6000_elf_select_section (tree decl, int reloc,\n \t\t\t   unsigned HOST_WIDE_INT align)\n {\n   /* Pretend that we're always building for a shared library when\n      ABI_AIX, because otherwise we end up with dynamic relocations\n      in read-only sections.  This happens for function pointers,\n      references to vtables in typeinfo, and probably other cases.  */\n-  default_elf_select_section_1 (decl, reloc, align,\n-\t\t\t\tflag_pic || DEFAULT_ABI == ABI_AIX);\n+  return default_elf_select_section_1 (decl, reloc, align,\n+\t\t\t\t       flag_pic || DEFAULT_ABI == ABI_AIX);\n }\n \n /* A C statement to build up a unique section name, expressed as a\n@@ -17678,9 +17729,9 @@ machopic_output_stub (FILE *file, const char *symb, const char *stub)\n   GEN_LAZY_PTR_NAME_FOR_SYMBOL (lazy_ptr_name, symb, length);\n \n   if (flag_pic == 2)\n-    machopic_picsymbol_stub1_section ();\n+    switch_to_section (machopic_picsymbol_stub1_section);\n   else\n-    machopic_symbol_stub1_section ();\n+    switch_to_section (machopic_symbol_stub1_section);\n \n   if (flag_pic == 2)\n     {\n@@ -17720,7 +17771,7 @@ machopic_output_stub (FILE *file, const char *symb, const char *stub)\n       fprintf (file, \"\\tbctr\\n\");\n     }\n \n-  machopic_lazy_symbol_ptr_section ();\n+  switch_to_section (machopic_lazy_symbol_ptr_section);\n   fprintf (file, \"%s:\\n\", lazy_ptr_name);\n   fprintf (file, \"\\t.indirect_symbol %s\\n\", symbol_name);\n   fprintf (file, \"%sdyld_stub_binding_helper\\n\",\n@@ -17781,16 +17832,6 @@ rs6000_machopic_legitimize_pic_address (rtx orig, enum machine_mode mode,\n   return machopic_legitimize_pic_address (orig, mode, reg);\n }\n \n-/* This is just a placeholder to make linking work without having to\n-   add this to the generic Darwin EXTRA_SECTIONS.  If -mcall-aix is\n-   ever needed for Darwin (not too likely!) this would have to get a\n-   real definition.  */\n-\n-void\n-toc_section (void)\n-{\n-}\n-\n /* Output a .machine directive for the Darwin assembler, and call\n    the generic start_file routine.  */\n \n@@ -17876,7 +17917,7 @@ rs6000_elf_asm_out_constructor (rtx symbol, int priority)\n       section = buf;\n     }\n \n-  named_section_flags (section, SECTION_WRITE);\n+  switch_to_section (get_section (section, SECTION_WRITE, NULL));\n   assemble_align (POINTER_SIZE);\n \n   if (TARGET_RELOCATABLE)\n@@ -17905,7 +17946,7 @@ rs6000_elf_asm_out_destructor (rtx symbol, int priority)\n       section = buf;\n     }\n \n-  named_section_flags (section, SECTION_WRITE);\n+  switch_to_section (get_section (section, SECTION_WRITE, NULL));\n   assemble_align (POINTER_SIZE);\n \n   if (TARGET_RELOCATABLE)\n@@ -18011,6 +18052,73 @@ rs6000_xcoff_asm_globalize_label (FILE *stream, const char *name)\n   putc ('\\n', stream);\n }\n \n+/* A get_unnamed_decl callback, used for read-only sections.  PTR\n+   points to the section string variable.  */\n+\n+static void\n+rs6000_xcoff_output_readonly_section_asm_op (const void *directive)\n+{\n+  fprintf (asm_out_file, \"\\t.csect %s[RO],3\\n\",\n+\t   *(const char *const *) directive);\n+}\n+\n+/* Likewise for read-write sections.  */\n+\n+static void\n+rs6000_xcoff_output_readwrite_section_asm_op (const void *directive)\n+{\n+  fprintf (asm_out_file, \"\\t.csect %s[RW],3\\n\",\n+\t   *(const char *const *) directive);\n+}\n+\n+/* A get_unnamed_section callback, used for switching to toc_section.  */\n+\n+static void\n+rs6000_xcoff_output_toc_section_asm_op (const void *data ATTRIBUTE_UNUSED)\n+{\n+  if (TARGET_MINIMAL_TOC)\n+    {\n+      /* toc_section is always selected at least once from\n+\t rs6000_xcoff_file_start, so this is guaranteed to\n+\t always be defined once and only once in each file.  */\n+      if (!toc_initialized)\n+\t{\n+\t  fputs (\"\\t.toc\\nLCTOC..1:\\n\", asm_out_file);\n+\t  fputs (\"\\t.tc toc_table[TC],toc_table[RW]\\n\", asm_out_file);\n+\t  toc_initialized = 1;\n+\t}\n+      fprintf (asm_out_file, \"\\t.csect toc_table[RW]%s\\n\",\n+\t       (TARGET_32BIT ? \"\" : \",3\"));\n+    }\n+  else\n+    fputs (\"\\t.toc\\n\", asm_out_file);\n+}\n+\n+/* Implement TARGET_ASM_INIT_SECTIONS.  */\n+\n+static void\n+rs6000_xcoff_asm_init_sections (void)\n+{\n+  read_only_data_section\n+    = get_unnamed_section (0, rs6000_xcoff_output_readonly_section_asm_op,\n+\t\t\t   &xcoff_read_only_section_name);\n+\n+  private_data_section\n+    = get_unnamed_section (SECTION_WRITE,\n+\t\t\t   rs6000_xcoff_output_readwrite_section_asm_op,\n+\t\t\t   &xcoff_private_data_section_name);\n+\n+  read_only_private_data_section\n+    = get_unnamed_section (0, rs6000_xcoff_output_readonly_section_asm_op,\n+\t\t\t   &xcoff_private_data_section_name);\n+\n+  toc_section\n+    = get_unnamed_section (0, rs6000_xcoff_output_toc_section_asm_op, NULL);\n+\n+  readonly_data_section = read_only_data_section;\n+  exception_section = data_section;\n+}\n+\n static void\n rs6000_xcoff_asm_named_section (const char *name, unsigned int flags,\n \t\t\t\ttree decl ATTRIBUTE_UNUSED)\n@@ -18030,23 +18138,23 @@ rs6000_xcoff_asm_named_section (const char *name, unsigned int flags,\n \t   name, suffix[smclass], flags & SECTION_ENTSIZE);\n }\n \n-static void\n+static section *\n rs6000_xcoff_select_section (tree decl, int reloc,\n \t\t\t     unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED)\n {\n   if (decl_readonly_section_1 (decl, reloc, 1))\n     {\n       if (TREE_PUBLIC (decl))\n-\tread_only_data_section ();\n+\treturn read_only_data_section;\n       else\n-\tread_only_private_data_section ();\n+\treturn read_only_private_data_section;\n     }\n   else\n     {\n       if (TREE_PUBLIC (decl))\n-\tdata_section ();\n+\treturn data_section;\n       else\n-\tprivate_data_section ();\n+\treturn private_data_section;\n     }\n }\n \n@@ -18075,14 +18183,14 @@ rs6000_xcoff_unique_section (tree decl, int reloc ATTRIBUTE_UNUSED)\n    However, if this is being placed in the TOC it must be output as a\n    toc entry.  */\n \n-static void\n+static section *\n rs6000_xcoff_select_rtx_section (enum machine_mode mode, rtx x,\n \t\t\t\t unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED)\n {\n   if (ASM_OUTPUT_SPECIAL_POOL_ENTRY_P (x, mode))\n-    toc_section ();\n+    return toc_section;\n   else\n-    read_only_private_data_section ();\n+    return read_only_private_data_section;\n }\n \n /* Remove any trailing [DS] or the like from the symbol name.  */\n@@ -18146,8 +18254,8 @@ rs6000_xcoff_file_start (void)\n   output_quoted_string (asm_out_file, main_input_filename);\n   fputc ('\\n', asm_out_file);\n   if (write_symbols != NO_DEBUG)\n-    private_data_section ();\n-  text_section ();\n+    switch_to_section (private_data_section);\n+  switch_to_section (text_section);\n   if (profile_flag)\n     fprintf (asm_out_file, \"\\t.extern %s\\n\", RS6000_MCOUNT);\n   rs6000_file_start ();\n@@ -18159,9 +18267,9 @@ rs6000_xcoff_file_start (void)\n static void\n rs6000_xcoff_file_end (void)\n {\n-  text_section ();\n+  switch_to_section (text_section);\n   fputs (\"_section_.text:\\n\", asm_out_file);\n-  data_section ();\n+  switch_to_section (data_section);\n   fputs (TARGET_32BIT\n \t ? \"\\t.long _section_.text\\n\" : \"\\t.llong _section_.text\\n\",\n \t asm_out_file);"}, {"sha": "62690f453649d64e58a0ac4159a7befaf87d608a", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 2, "deletions": 120, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -359,126 +359,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define\tSDATA2_SECTION_ASM_OP \"\\t.section\\t\\\".sdata2\\\",\\\"a\\\"\"\n #define\tSBSS_SECTION_ASM_OP \"\\t.section\\t\\\".sbss\\\",\\\"aw\\\",@nobits\"\n \n-/* Besides the usual ELF sections, we need a toc section.  */\n-/* Override elfos.h definition.  */\n-#undef\tEXTRA_SECTIONS\n-#define\tEXTRA_SECTIONS in_toc, in_sdata, in_sdata2, in_sbss, in_init, in_fini\n-\n-/* Override elfos.h definition.  */\n-#undef\tEXTRA_SECTION_FUNCTIONS\n-#define\tEXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  TOC_SECTION_FUNCTION\t\t\t\t\t\t\t\\\n-  SDATA_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  SDATA2_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  SBSS_SECTION_FUNCTION\t\t\t\t\t\t\t\\\n-  INIT_SECTION_FUNCTION\t\t\t\t\t\t\t\\\n-  FINI_SECTION_FUNCTION\n-\n-#define\tTOC_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-toc_section (void)\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_toc)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      in_section = in_toc;\t\t\t\t\t\t\\\n-      if (DEFAULT_ABI == ABI_AIX\t\t\t\t\t\\\n-\t  && TARGET_MINIMAL_TOC\t\t\t\t\t\t\\\n-\t  && !TARGET_RELOCATABLE)\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  if (! toc_initialized)\t\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\t\\\n-\t      toc_initialized = 1;\t\t\t\t\t\\\n-\t      fprintf (asm_out_file, \"%s\\n\", TOC_SECTION_ASM_OP);\t\\\n-\t      (*targetm.asm_out.internal_label) (asm_out_file, \"LCTOC\", 0); \\\n-\t      fprintf (asm_out_file, \"\\t.tc \");\t\t\t\t\\\n-\t      ASM_OUTPUT_INTERNAL_LABEL_PREFIX (asm_out_file, \"LCTOC1[TC],\"); \\\n-\t      ASM_OUTPUT_INTERNAL_LABEL_PREFIX (asm_out_file, \"LCTOC1\"); \\\n-\t      fprintf (asm_out_file, \"\\n\");\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\t      fprintf (asm_out_file, \"%s\\n\", MINIMAL_TOC_SECTION_ASM_OP); \\\n-\t      ASM_OUTPUT_INTERNAL_LABEL_PREFIX (asm_out_file, \"LCTOC1\"); \\\n-\t      fprintf (asm_out_file, \" = .+32768\\n\");\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\t\\\n-\t  else\t\t\t\t\t\t\t\t\\\n-\t    fprintf (asm_out_file, \"%s\\n\", MINIMAL_TOC_SECTION_ASM_OP);\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-      else if (DEFAULT_ABI == ABI_AIX && !TARGET_RELOCATABLE)\t\t\\\n-\tfprintf (asm_out_file, \"%s\\n\", TOC_SECTION_ASM_OP);\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  fprintf (asm_out_file, \"%s\\n\", MINIMAL_TOC_SECTION_ASM_OP);\t\\\n-\t  if (! toc_initialized)\t\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\t\\\n-\t      ASM_OUTPUT_INTERNAL_LABEL_PREFIX (asm_out_file, \"LCTOC1\"); \\\n-\t      fprintf (asm_out_file, \" = .+32768\\n\");\t\t\t\\\n-\t      toc_initialized = 1;\t\t\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-extern int in_toc_section (void);\t\t\t\t\t\\\n-int in_toc_section (void)\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  return in_section == in_toc;\t\t\t\t\t\t\\\n-}\n-\n-#define\tSDATA_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-sdata_section (void)\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_sdata)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      in_section = in_sdata;\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", SDATA_SECTION_ASM_OP);\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define\tSDATA2_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-sdata2_section (void)\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_sdata2)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      in_section = in_sdata2;\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", SDATA2_SECTION_ASM_OP);\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define\tSBSS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-sbss_section (void)\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_sbss)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      in_section = in_sbss;\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", SBSS_SECTION_ASM_OP);\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define\tINIT_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-init_section (void)\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_init)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      in_section = in_init;\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", INIT_SECTION_ASM_OP);\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define\tFINI_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-fini_section (void)\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_fini)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      in_section = in_fini;\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", FINI_SECTION_ASM_OP);\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n /* Override default elf definitions.  */\n+#define TARGET_ASM_INIT_SECTIONS rs6000_elf_asm_init_sections\n #undef\tTARGET_ASM_SELECT_RTX_SECTION\n #define\tTARGET_ASM_SELECT_RTX_SECTION rs6000_elf_select_rtx_section\n #undef\tTARGET_ASM_SELECT_SECTION\n@@ -555,7 +437,7 @@ extern int rs6000_pic_labelno;\n do {\t\t\t\t\t\t\t\t\t\\\n   if ((DECL) && rs6000_elf_in_small_data_p (DECL))\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      sbss_section ();\t\t\t\t\t\t\t\\\n+      switch_to_section (sbss_section);\t\t\t\t\t\\\n       ASM_OUTPUT_ALIGN (FILE, exact_log2 (ALIGN / BITS_PER_UNIT));\t\\\n       ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\t\\\n       ASM_OUTPUT_SKIP (FILE, SIZE);\t\t\t\t\t\\"}, {"sha": "e7560a86ab1cbe5cdcb376563a6425873d1ea93c", "filename": "gcc/config/rs6000/xcoff.h", "status": "modified", "additions": 5, "deletions": 96, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxcoff.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -56,93 +56,6 @@\n \n #define DOLLARS_IN_IDENTIFIERS 0\n \n-/* Define the extra sections we need.  We define three: one is the read-only\n-   data section which is used for constants.  This is a csect whose name is\n-   derived from the name of the input file.  The second is for initialized\n-   global variables.  This is a csect whose name is that of the variable.\n-   The third is the TOC.  */\n-\n-#define EXTRA_SECTIONS \\\n-   read_only_data, private_data, read_only_private_data, toc, bss\n-\n-/* Define the routines to implement these extra sections.\n-   BIGGEST_ALIGNMENT is 64, so align the sections that much.  */\n-\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\\\n-  READ_ONLY_DATA_SECTION_FUNCTION\t\t\t\\\n-  PRIVATE_DATA_SECTION_FUNCTION\t\t\t\t\\\n-  READ_ONLY_PRIVATE_DATA_SECTION_FUNCTION\t\t\\\n-  TOC_SECTION_FUNCTION\n-\n-#define READ_ONLY_DATA_SECTION_FUNCTION\t\t\t\\\n-void\t\t\t\t\t\t\t\\\n-read_only_data_section (void)\t\t\t\t\\\n-{\t\t\t\t\t\t\t\\\n-  if (in_section != read_only_data)\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"\\t.csect %s[RO],3\\n\",\t\\\n-\t       xcoff_read_only_section_name);\t\t\\\n-      in_section = read_only_data;\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-}\n-\n-#define PRIVATE_DATA_SECTION_FUNCTION\t\t\t\\\n-void\t\t\t\t\t\t\t\\\n-private_data_section (void)\t\t\t\t\\\n-{\t\t\t\t\t\t\t\\\n-  if (in_section != private_data)\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"\\t.csect %s[RW],3\\n\",\t\\\n-\t       xcoff_private_data_section_name);\t\\\n-      in_section = private_data;\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-}\n-\n-#define READ_ONLY_PRIVATE_DATA_SECTION_FUNCTION\t\t\\\n-void\t\t\t\t\t\t\t\\\n-read_only_private_data_section (void)\t\t\t\\\n-{\t\t\t\t\t\t\t\\\n-  if (in_section != read_only_private_data)\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"\\t.csect %s[RO],3\\n\",\t\\\n-\t       xcoff_private_data_section_name);\t\\\n-      in_section = read_only_private_data;\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-}\n-\n-#define TOC_SECTION_FUNCTION\t\t\t\t\\\n-void\t\t\t\t\t\t\t\\\n-toc_section (void)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\\\n-  if (TARGET_MINIMAL_TOC)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      /* toc_section is always called at least once\t\\\n-         from rs6000_xcoff_file_start, so this is\t\\\n-\t guaranteed to always be defined once and\t\\\n-\t only once in each file.  */\t\t\t\\\n-      if (! toc_initialized)\t\t\t\t\\\n-\t{\t\t\t\t\t\t\\\n-\t  fputs (\"\\t.toc\\nLCTOC..1:\\n\", asm_out_file);\t\\\n-\t  fputs (\"\\t.tc toc_table[TC],toc_table[RW]\\n\", asm_out_file); \\\n-\t  toc_initialized = 1;\t\t\t\t\\\n-\t}\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\\\n-      if (in_section != toc)\t\t\t\t\\\n-\tfprintf (asm_out_file, \"\\t.csect toc_table[RW]%s\\n\",\t\\\n-\t\t (TARGET_32BIT ? \"\" : \",3\"));\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      if (in_section != toc)\t\t\t\t\\\n-        fputs (\"\\t.toc\\n\", asm_out_file);\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-  in_section = toc;\t\t\t\t\t\\\n-}\n-\n-/* Define the name of our readonly data section.  */\n-\n-#define READONLY_DATA_SECTION read_only_data_section\n-\n /* Return nonzero if this entry is to be written into the constant\n    pool in a special way.  We do so if this is a SYMBOL_REF, LABEL_REF\n    or a CONST containing one of them.  If -mfp-in-toc (the default),\n@@ -168,6 +81,7 @@ toc_section (void)\t\t\t\t\t\\\n \t\t   && ! TARGET_NO_FP_IN_TOC)))))\n \n #define TARGET_ASM_GLOBALIZE_LABEL  rs6000_xcoff_asm_globalize_label\n+#define TARGET_ASM_INIT_SECTIONS  rs6000_xcoff_asm_init_sections\n #define TARGET_ASM_NAMED_SECTION  rs6000_xcoff_asm_named_section\n #define TARGET_ASM_SELECT_SECTION  rs6000_xcoff_select_section\n #define TARGET_ASM_SELECT_RTX_SECTION  rs6000_xcoff_select_rtx_section\n@@ -213,9 +127,8 @@ toc_section (void)\t\t\t\t\t\\\n    On the RS/6000, we need to place an extra '.' in the function name and\n    output the function descriptor.\n \n-   The csect for the function will have already been created by the\n-   `text_section' call previously done.  We do have to go back to that\n-   csect, however.\n+   The csect for the function will have already been created when\n+   text_section was selected.  We do have to go back to that csect, however.\n \n    The third and fourth parameters to the .function pseudo-op (16 and 044)\n    are placeholders which no longer have any use.  */\n@@ -244,8 +157,8 @@ toc_section (void)\t\t\t\t\t\\\n   fputs (TARGET_32BIT ? \"\\t.long .\" : \"\\t.llong .\", FILE);\t\\\n   RS6000_OUTPUT_BASENAME (FILE, NAME);\t\t\t\t\\\n   fputs (\", TOC[tc0], 0\\n\", FILE);\t\t\t\t\\\n-  in_section = no_section;\t\t\t\t\t\\\n-  function_section(DECL);\t\t\t\t\t\\\n+  in_section = NULL;\t\t\t\t\t\t\\\n+  switch_to_section (function_section (DECL));\t\t\t\\\n   putc ('.', FILE);\t\t\t\t\t\t\\\n   RS6000_OUTPUT_BASENAME (FILE, NAME);\t\t\t\t\\\n   fputs (\":\\n\", FILE);\t\t\t\t\t\t\\\n@@ -362,10 +275,6 @@ toc_section (void)\t\t\t\t\t\\\n    Align entire section to BIGGEST_ALIGNMENT.  */\n #define DATA_SECTION_ASM_OP \"\\t.csect .data[RW],3\"\n \n-/* Define the name of the section to use for the EH language specific\n-   data areas (.gcc_except_table on most other systems).  */\n-#define TARGET_ASM_EXCEPTION_SECTION data_section\n-\n /* Define to prevent DWARF2 unwind info in the data section rather\n    than in the .eh_frame section.  We do this because the AIX linker\n    would otherwise garbage collect these sections.  */"}, {"sha": "81c787289e1bdb7aaac68fb257352159e8754ce2", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -1785,7 +1785,7 @@ sh_file_start (void)\n   else\n     /* Switch to the data section so that the coffsem symbol\n        isn't in the text section.  */\n-    data_section ();\n+    switch_to_section (data_section);\n \n   if (TARGET_LITTLE_ENDIAN)\n     fputs (\"\\t.little\\n\", asm_out_file);"}, {"sha": "52d2695d40f48c4d64cffcc5d55e7b547738acca", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -3287,7 +3287,7 @@ emit_pic_helper (void)\n   const char *pic_name = reg_names[REGNO (pic_offset_table_rtx)];\n   int align;\n \n-  text_section ();\n+  switch_to_section (text_section);\n \n   align = floor_log2 (FUNCTION_BOUNDARY / BITS_PER_UNIT);\n   if (align > 0)\n@@ -7477,7 +7477,7 @@ sparc_output_deferred_case_vectors (void)\n     return;\n \n   /* Align to cache line in the function's code section.  */\n-  current_function_section (current_function_decl);\n+  switch_to_section (current_function_section ());\n \n   align = floor_log2 (FUNCTION_BOUNDARY / BITS_PER_UNIT);\n   if (align > 0)"}, {"sha": "32c5ea6d2d50761366c6d8bdd8616acfe2a6bbd8", "filename": "gcc/config/stormy16/stormy16-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -29,7 +29,6 @@ extern int direct_return (void);\n extern int xstormy16_interrupt_function_p (void);\n extern int xstormy16_epilogue_uses (int);\n extern void xstormy16_function_profiler (void);\n-extern void bss100_section (void);\n \n #if defined (TREE_CODE)\n extern void xstormy16_asm_output_aligned_common (FILE *, tree, const char *,"}, {"sha": "76becfc4f117bc26480cdca42e3cd1113c3f41ed", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -47,6 +47,7 @@ Boston, MA 02110-1301, USA.  */\n #include \"tm_p.h\"\n #include \"langhooks.h\"\n #include \"tree-gimple.h\"\n+#include \"ggc.h\"\n \n static rtx emit_addhi3_postreload (rtx, rtx, rtx);\n static void xstormy16_asm_out_constructor (rtx, int);\n@@ -65,6 +66,8 @@ static bool xstormy16_return_in_memory (tree, tree);\n struct rtx_def * xstormy16_compare_op0;\n struct rtx_def * xstormy16_compare_op1;\n \n+static GTY(()) section *bss100_section;\n+\n /* Compute a (partial) cost for rtx X.  Return true if the complete\n    cost has been computed, and false if subexpressions should be\n    scanned.  In either case, *TOTAL contains the cost result.  */\n@@ -1593,7 +1596,7 @@ xstormy16_asm_output_aligned_common (FILE *stream,\n       const char *name2;\n       int p2align = 0;\n \n-      bss100_section ();\n+      switch_to_section (bss100_section);\n \n       while (align > 8)\n \t{\n@@ -1623,6 +1626,17 @@ xstormy16_asm_output_aligned_common (FILE *stream,\n   fprintf (stream, \",%u,%u\\n\", size, align / BITS_PER_UNIT);\n }\n \n+/* Implement TARGET_ASM_INIT_SECTIONS.  */\n+\n+static void\n+xstormy16_asm_init_sections (void)\n+{\n+  bss100_section\n+    = get_unnamed_section (SECTION_WRITE | SECTION_BSS,\n+\t\t\t   output_section_asm_op,\n+\t\t\t   \"\\t.section \\\".bss_below100\\\",\\\"aw\\\",@nobits\");\n+}\n+\n /* Mark symbols with the \"below100\" attribute so that we can use the\n    special addressing modes for them.  */\n \n@@ -1666,7 +1680,7 @@ xstormy16_asm_out_destructor (rtx symbol, int priority)\n       section = buf;\n     }\n \n-  named_section_flags (section, 0);\n+  switch_to_section (get_section (section, 0, NULL));\n   assemble_align (POINTER_SIZE);\n   assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n }\n@@ -1688,7 +1702,7 @@ xstormy16_asm_out_constructor (rtx symbol, int priority)\n       section = buf;\n     }\n \n-  named_section_flags (section, 0);\n+  switch_to_section (get_section (section, 0, NULL));\n   assemble_align (POINTER_SIZE);\n   assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n }\n@@ -1917,7 +1931,7 @@ xstormy16_output_addr_vec (FILE *file, rtx label ATTRIBUTE_UNUSED, rtx table)\n { \n   int vlen, idx;\n   \n-  current_function_section (current_function_decl);\n+  switch_to_section (current_function_section ());\n \n   vlen = XVECLEN (table, 0);\n   for (idx = 0; idx < vlen; idx++)\n@@ -2668,3 +2682,5 @@ xstormy16_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n #define TARGET_MACHINE_DEPENDENT_REORG xstormy16_reorg\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n+\n+#include \"gt-stormy16.h\""}, {"sha": "faf04727f980768a53674bc61bd6b1811a9f2d43", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -618,29 +618,10 @@ do {\t\t\t\t\t\t\t\\\n #undef DTORS_SECTION_ASM_OP\n #define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"a\\\"\"\n #define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"a\\\"\"\n-#define EXTRA_SECTIONS in_bss100\n-\n-/* We define the function body in a separate macro so that if we ever\n-   add another section, we can just add an entry to\n-   EXTRA_SECTION_FUNCTIONS without making it difficult to read.  It is\n-   not used anywhere else.  */\n-#define XSTORMY16_SECTION_FUNCTION(name, in, string, bits) \t\t\t  \\\n-  void\t\t\t\t\t\t\t\t\t\t  \\\n-  name ()\t\t\t\t\t\t\t\t\t  \\\n-  { \t\t\t\t\t\t\t\t\t\t  \\\n-    if (in_section != in)\t\t\t\t\t\t\t  \\\n-      { \t\t\t\t\t\t\t\t\t  \\\n-\tfprintf (asm_out_file, \"\\t.section %s,\\\"aw\\\",@%sbits\\n\", string, bits);   \\\n-\tin_section = in;\t\t\t\t\t\t\t  \\\n-      }\t\t\t\t\t\t\t\t\t\t  \\\n-  }\n-\n-#undef  EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\\\n-  XSTORMY16_SECTION_FUNCTION (bss100_section, in_bss100, \".bss_below100\", \"no\")\n \n-#define JUMP_TABLES_IN_TEXT_SECTION 1\n+#define TARGET_ASM_INIT_SECTIONS xstormy16_asm_init_sections\n \n+#define JUMP_TABLES_IN_TEXT_SECTION 1\n \f\n /* The Overall Framework of an Assembler File.  */\n "}, {"sha": "283ebf0cdd79141c6784c3be79160e8611cdbb24", "filename": "gcc/config/svr3.h", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fsvr3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fsvr3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr3.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -54,7 +54,7 @@ Boston, MA 02110-1301, USA. */\n   do {\t\t\t\t\t\t\t\\\n     int align = exact_log2 (ROUNDED);\t\t\t\\\n     if (align > 2) align = 2;\t\t\t\t\\\n-    data_section ();\t\t\t\t\t\\\n+    switch_to_section (data_section);\t\t\t\\\n     ASM_OUTPUT_ALIGN ((FILE), align == -1 ? 2 : align);\t\\\n     ASM_OUTPUT_LABEL ((FILE), (NAME));\t\t\t\\\n     fprintf ((FILE), \"\\t.set .,.+%u\\n\", (int)(ROUNDED));\t\\\n@@ -159,33 +159,3 @@ do {\t\t\t\t\t\t\t\t\\\n } while (0)\n \n #endif /* STACK_GROWS_DOWNWARD */\n-\n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_init, in_fini\n-\n-#undef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n-  INIT_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  FINI_SECTION_FUNCTION\n-\n-#define INIT_SECTION_FUNCTION\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-init_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_init)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", INIT_SECTION_ASM_OP);\t\\\n-      in_section = in_init;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define FINI_SECTION_FUNCTION\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-fini_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_fini)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", FINI_SECTION_ASM_OP);\t\\\n-      in_section = in_fini;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}"}, {"sha": "7fe322037cfc9e8b78b6479e16088dfb53f570ae", "filename": "gcc/config/t-darwin", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-darwin?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -1,7 +1,8 @@\n darwin.o: $(srcdir)/config/darwin.c $(CONFIG_H) $(SYSTEM_H) coretypes.h     \\\n   $(TM_H) $(RTL_H) $(REGS_H) hard-reg-set.h $(REAL_H) insn-config.h         \\\n   conditions.h insn-flags.h output.h insn-attr.h flags.h $(TREE_H) expr.h   \\\n-  reload.h function.h $(GGC_H) langhooks.h $(TARGET_H) $(TM_P_H) gt-darwin.h\n+  reload.h function.h $(GGC_H) langhooks.h $(TARGET_H) $(TM_P_H) gt-darwin.h \\\n+  config/darwin-sections.def\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/config/darwin.c\n \n darwin-c.o: $(srcdir)/config/darwin-c.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\"}, {"sha": "8374b53c105400702ddd66e0e4bb270cbed5e3e0", "filename": "gcc/config/v850/v850-protos.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-protos.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -27,13 +27,6 @@\n \n extern void   expand_prologue               (void);\n extern void   expand_epilogue               (void);\n-extern void   sdata_section                 (void);\n-extern void   rosdata_section               (void);\n-extern void   sbss_section                  (void);\n-extern void   tdata_section                 (void);\n-extern void   zdata_section                 (void);\n-extern void   rozdata_section               (void);\n-extern void   zbss_section                  (void);\n extern int    v850_handle_pragma            (int (*)(void), void (*)(int), char *);\n extern int    compute_register_save_size    (long *);\n extern int    compute_frame_size            (int, long *);"}, {"sha": "7629a7af3a7c293bcc4b03f9db73debe68539d95", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -62,7 +62,8 @@ const struct attribute_spec v850_attribute_table[];\n static tree v850_handle_interrupt_attribute (tree *, tree, tree, int, bool *);\n static tree v850_handle_data_area_attribute (tree *, tree, tree, int, bool *);\n static void v850_insert_attributes   (tree, tree *);\n-static void v850_select_section (tree, int, unsigned HOST_WIDE_INT);\n+static void v850_asm_init_sections   (void);\n+static section *v850_select_section (tree, int, unsigned HOST_WIDE_INT);\n static void v850_encode_data_area    (tree, rtx);\n static void v850_encode_section_info (tree, rtx, int);\n static bool v850_return_in_memory    (tree, tree);\n@@ -96,6 +97,12 @@ static int v850_interrupt_cache_p = FALSE;\n \n /* Whether current function is an interrupt handler.  */\n static int v850_interrupt_p = FALSE;\n+\n+static GTY(()) section *rosdata_section;\n+static GTY(()) section *rozdata_section;\n+static GTY(()) section *tdata_section;\n+static GTY(()) section *zdata_section;\n+static GTY(()) section *zbss_section;\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -2498,18 +2505,18 @@ v850_output_aligned_bss (FILE * file,\n   switch (v850_get_data_area (decl))\n     {\n     case DATA_AREA_ZDA:\n-      zbss_section ();\n+      switch_to_section (zbss_section);\n       break;\n \n     case DATA_AREA_SDA:\n-      sbss_section ();\n+      switch_to_section (sbss_section);\n       break;\n \n     case DATA_AREA_TDA:\n-      tdata_section ();\n+      switch_to_section (tdata_section);\n       \n     default:\n-      bss_section ();\n+      switch_to_section (bss_section);\n       break;\n     }\n   \n@@ -2927,7 +2934,34 @@ v850_return_addr (int count)\n   return get_hard_reg_initial_val (Pmode, LINK_POINTER_REGNUM);\n }\n \f\n+/* Implement TARGET_ASM_INIT_SECTIONS.  */\n+\n static void\n+v850_asm_init_sections (void)\n+{\n+  rosdata_section\n+    = get_unnamed_section (0, output_section_asm_op,\n+\t\t\t   \"\\t.section .rosdata,\\\"a\\\"\");\n+\n+  rozdata_section\n+    = get_unnamed_section (0, output_section_asm_op,\n+\t\t\t   \"\\t.section .rozdata,\\\"a\\\"\");\n+\n+  tdata_section\n+    = get_unnamed_section (SECTION_WRITE, output_section_asm_op,\n+\t\t\t   \"\\t.section .tdata,\\\"aw\\\"\");\n+\n+  zdata_section\n+    = get_unnamed_section (SECTION_WRITE, output_section_asm_op,\n+\t\t\t   \"\\t.section .zdata,\\\"aw\\\"\");\n+\n+  zbss_section\n+    = get_unnamed_section (SECTION_WRITE | SECTION_BSS,\n+\t\t\t   output_section_asm_op,\n+\t\t\t   \"\\t.section .zbss,\\\"aw\\\"\");\n+}\n+\n+static section *\n v850_select_section (tree exp,\n                      int reloc ATTRIBUTE_UNUSED,\n                      unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED)\n@@ -2947,33 +2981,19 @@ v850_select_section (tree exp,\n       switch (v850_get_data_area (exp))\n         {\n         case DATA_AREA_ZDA:\n-\t  if (is_const)\n-\t    rozdata_section ();\n-\t  else\n-\t    zdata_section ();\n-\t  break;\n+\t  return is_const ? rozdata_section : zdata_section;\n \n         case DATA_AREA_TDA:\n-\t  tdata_section ();\n-\t  break;\n+\t  return tdata_section;\n \n         case DATA_AREA_SDA:\n-\t  if (is_const)\n-\t    rosdata_section ();\n-\t  else\n-\t    sdata_section ();\n-\t  break;\n+\t  return is_const ? rosdata_section : sdata_section;\n \n         default:\n-          if (is_const)\n-\t    readonly_data_section ();\n-\t  else\n-\t    data_section ();\n-\t  break;\n+\t  return is_const ? readonly_data_section : data_section;\n         }\n     }\n-  else\n-    readonly_data_section ();\n+  return readonly_data_section;\n }\n \f\n /* Worker function for TARGET_RETURN_IN_MEMORY.  */\n@@ -2996,3 +3016,5 @@ v850_setup_incoming_varargs (CUMULATIVE_ARGS *ca,\n {\n   ca->anonymous_args = (!TARGET_GHS ? 1 : 0);\n }\n+\n+#include \"gt-v850.h\""}, {"sha": "c1dbd7831135b6ffabc276d34378b82631abda09", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 2, "deletions": 90, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -876,101 +876,11 @@ typedef enum\n   DATA_AREA_ZDA\n } v850_data_area;\n \n-/* A list of names for sections other than the standard two, which are\n-   `in_text' and `in_data'.  You need not define this macro on a\n-   system with no other sections (that GCC needs to use).  */\n-#undef\tEXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_tdata, in_sdata, in_zdata, \\\n- in_rozdata, in_rosdata, in_sbss, in_zbss, in_zcommon, in_scommon\n-\n-/* One or more functions to be defined in `varasm.c'.  These\n-   functions should do jobs analogous to those of `text_section' and\n-   `data_section', for your additional sections.  Do not define this\n-   macro if you do not define `EXTRA_SECTIONS'.  */\n-#undef\tEXTRA_SECTION_FUNCTIONS\n-\n-/* This could be done a lot more cleanly using ANSI C....  */\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-sdata_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_sdata)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", SDATA_SECTION_ASM_OP);\t\t\\\n-      in_section = in_sdata;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-rosdata_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_rosdata)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", ROSDATA_SECTION_ASM_OP);\t\t\\\n-      in_section = in_sdata;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-sbss_section ()\t\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_sbss)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", SBSS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_sbss;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-tdata_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_tdata)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", TDATA_SECTION_ASM_OP);\t\t\\\n-      in_section = in_tdata;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-zdata_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_zdata)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", ZDATA_SECTION_ASM_OP);\t\t\\\n-      in_section = in_zdata;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-rozdata_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_rozdata)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", ROZDATA_SECTION_ASM_OP);\t\t\\\n-      in_section = in_rozdata;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-zbss_section ()\t\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_zbss)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", ZBSS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_zbss;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n #define TEXT_SECTION_ASM_OP  \"\\t.section .text\"\n #define DATA_SECTION_ASM_OP  \"\\t.section .data\"\n #define BSS_SECTION_ASM_OP   \"\\t.section .bss\"\n #define SDATA_SECTION_ASM_OP \"\\t.section .sdata,\\\"aw\\\"\"\n #define SBSS_SECTION_ASM_OP  \"\\t.section .sbss,\\\"aw\\\"\"\n-#define ZDATA_SECTION_ASM_OP \"\\t.section .zdata,\\\"aw\\\"\"\n-#define ZBSS_SECTION_ASM_OP  \"\\t.section .zbss,\\\"aw\\\"\"\n-#define TDATA_SECTION_ASM_OP \"\\t.section .tdata,\\\"aw\\\"\"\n-#define ROSDATA_SECTION_ASM_OP \"\\t.section .rosdata,\\\"a\\\"\"\n-#define ROZDATA_SECTION_ASM_OP \"\\t.section .rozdata,\\\"a\\\"\"\n \n #define SCOMMON_ASM_OP \t       \"\\t.scomm\\t\"\n #define ZCOMMON_ASM_OP \t       \"\\t.zcomm\\t\"\n@@ -1230,4 +1140,6 @@ extern union tree_node * GHS_current_section_names [(int) COUNT_OF_GHS_SECTION_K\n #define SYMBOL_REF_TDA_P(X)\t((SYMBOL_REF_FLAGS (X) & SYMBOL_FLAG_TDA) != 0)\n #define SYMBOL_REF_SDA_P(X)\t((SYMBOL_REF_FLAGS (X) & SYMBOL_FLAG_SDA) != 0)\n \n+#define TARGET_ASM_INIT_SECTIONS v850_asm_init_sections\n+\n #endif /* ! GCC_V850_H */"}, {"sha": "83870a0230d3c215dc22d48603df415b3eab6caf", "filename": "gcc/config/vax/vaxv.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fvax%2Fvaxv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fvax%2Fvaxv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvaxv.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -48,7 +48,7 @@ Boston, MA 02110-1301, USA.  */\n \n #undef ASM_OUTPUT_LOCAL\n #define ASM_OUTPUT_LOCAL(FILE,NAME,SIZE,ROUNDED)\t\\\n-( data_section (),\t\t\t\t\t\\\n+( switch_to_section (data_section),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\t\\\n   fprintf ((FILE), \":\\n\\t.space %u\\n\", (int)(ROUNDED)))\n "}, {"sha": "cb8d7a0808e115170b9420f55e16a51efc7b1874", "filename": "gcc/config/vx-common.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fvx-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fvx-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvx-common.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -83,17 +83,6 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n   sorry (\"profiler support for VxWorks\");\t\t\\\n } while (0)\n \n-/* This section either contains dynamic relocations, or contains\n-   PC-rel indirections to stubs in the data section which contain dynamic\n-   relocations.  General dynamic relocations are not processed\n-   for shared libraries' text segments, and PC-relative displacements\n-   from the text segment to the data segment don't work.  So force\n-   it to .gcc_except_section, which the linker will place in .data.  */\n-\n-void vxworks_exception_section (void);\n-#undef TARGET_ASM_EXCEPTION_SECTION\n-#define TARGET_ASM_EXCEPTION_SECTION default_exception_section\n-\n /* We occasionally need to distinguish between the VxWorks variants.  */\n #define VXWORKS_KIND_NORMAL  1\n #define VXWORKS_KIND_AE      2"}, {"sha": "d05d97e063efaa82e043f227dc17c5ffc1efa355", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -204,8 +204,8 @@ static void xtensa_function_epilogue (FILE *, HOST_WIDE_INT);\n static rtx xtensa_builtin_saveregs (void);\n static unsigned int xtensa_multibss_section_type_flags (tree, const char *,\n \t\t\t\t\t\t\tint) ATTRIBUTE_UNUSED;\n-static void xtensa_select_rtx_section (enum machine_mode, rtx,\n-\t\t\t\t       unsigned HOST_WIDE_INT);\n+static section *xtensa_select_rtx_section (enum machine_mode, rtx,\n+\t\t\t\t\t   unsigned HOST_WIDE_INT);\n static bool xtensa_rtx_costs (rtx, int, int, int *);\n static tree xtensa_build_builtin_va_list (void);\n static bool xtensa_return_in_memory (tree, tree);\n@@ -2421,12 +2421,12 @@ xtensa_multibss_section_type_flags (tree decl, const char *name, int reloc)\n \n /* The literal pool stays with the function.  */\n \n-static void\n+static section *\n xtensa_select_rtx_section (enum machine_mode mode ATTRIBUTE_UNUSED,\n \t\t\t   rtx x ATTRIBUTE_UNUSED,\n \t\t\t   unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED)\n {\n-  function_section (current_function_decl);\n+  return function_section (current_function_decl);\n }\n \n "}, {"sha": "e541e2ad8e27af719992f7272c0c3c166c0ebbc3", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -1210,7 +1210,7 @@ typedef struct xtensa_args\n       }\t\t\t\t\t\t\t\t\t\\\n     if ((SIZE) > 0)\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-\tfunction_section (FUNDECL);  \t\t\t\t\t\\\n+\tswitch_to_section (function_section (FUNDECL));\t\t\t\\\n \tfprintf (FILE, \"\\t.literal_position\\n\");\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n   } while (0)"}, {"sha": "7942459c9b5d978a8b6dda3e56a087312c6c2364", "filename": "gcc/coretypes.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -43,6 +43,8 @@ struct rtvec_def;\n typedef struct rtvec_def *rtvec;\n union tree_node;\n typedef union tree_node *tree;\n+union section;\n+typedef union section section;\n \n /* Provide forward struct declaration so that we don't have to include\n    all of cpplib.h whenever a random prototype includes a pointer."}, {"sha": "cb7df88b7393d2ed6c7002de8f7db73b4d01a4de", "filename": "gcc/dbxout.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -269,7 +269,7 @@ static int pending_bincls = 0;\n static const char *base_input_file;\n \n #ifdef DEBUG_SYMS_TEXT\n-#define FORCE_TEXT current_function_section (current_function_decl);\n+#define FORCE_TEXT switch_to_section (current_function_section ())\n #else\n #define FORCE_TEXT\n #endif\n@@ -907,7 +907,7 @@ dbxout_function_end (tree decl)\n \n   /* The Lscope label must be emitted even if we aren't doing anything\n      else; dbxout_block needs it.  */\n-  function_section (current_function_decl);\n+  switch_to_section (function_section (current_function_decl));\n   \n   /* Convert Lscope into the appropriate format for local labels in case\n      the system doesn't insert underscores in front of user generated\n@@ -1033,7 +1033,7 @@ dbxout_init (const char *input_file_name)\n \n   if (used_ltext_label_name)\n     {\n-      text_section ();\n+      switch_to_section (text_section);\n       targetm.asm_out.internal_label (asm_out_file, \"Ltext\", 0);\n     }\n \n@@ -1232,7 +1232,7 @@ dbxout_source_file (const char *filename)\n     {\n       /* Don't change section amid function.  */\n       if (current_function_decl == NULL_TREE)\n-\ttext_section ();\n+\tswitch_to_section (text_section);\n \n       dbxout_begin_simple_stabs (filename, N_SOL);\n       dbxout_stab_value_internal_label (\"Ltext\", &source_label_number);\n@@ -1347,7 +1347,7 @@ dbxout_finish (const char *filename ATTRIBUTE_UNUSED)\n   DBX_OUTPUT_MAIN_SOURCE_FILE_END (asm_out_file, filename);\n #elif defined DBX_OUTPUT_NULL_N_SO_AT_MAIN_SOURCE_FILE_END\n  {\n-   text_section ();\n+   switch_to_section (text_section);\n    dbxout_begin_empty_stabs (N_SO);\n    dbxout_stab_value_internal_label (\"Letext\", 0);\n  }\n@@ -2838,7 +2838,7 @@ dbxout_symbol_location (tree decl, tree type, const char *suffix, rtx home)\n \t    {\n \t      /* Ultrix `as' seems to need this.  */\n #ifdef DBX_STATIC_STAB_DATA_SECTION\n-\t      data_section ();\n+\t      switch_to_section (data_section);\n #endif\n \t      code = N_STSYM;\n \t    }"}, {"sha": "53f405b7862dfedf8d83afe316684b26b7d9e9dd", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 64, "deletions": 69, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -4688,10 +4688,8 @@ to generate it on the spot.\n @end defmac\n \n @defmac TRAMPOLINE_SECTION\n-The name of a subroutine to switch to the section in which the\n-trampoline template is to be placed (@pxref{Sections}).  The default is\n-a value of @samp{readonly_data_section}, which places the trampoline in\n-the section containing read-only data.\n+Return the section into which the trampoline template is to be placed\n+(@pxref{Sections}).  The default value is @code{readonly_data_section}.\n @end defmac\n \n @defmac TRAMPOLINE_SIZE\n@@ -5914,9 +5912,32 @@ section}, which holds initialized writable data; and the @dfn{bss\n section}, which holds uninitialized data.  Some systems have other kinds\n of sections.\n \n-The compiler must tell the assembler when to switch sections.  These\n-macros control what commands to output to tell the assembler this.  You\n-can also define additional sections.\n+@file{varasm.c} provides several well-known sections, such as\n+@code{text_section}, @code{data_section} and @code{bss_section}.\n+The normal way of controlling a @code{@var{foo}_section} variable\n+is to define the associated @code{@var{FOO}_SECTION_ASM_OP} macro,\n+as described below.  The macros are only read once, when @file{varasm.c}\n+initializes itself, so their values must be run-time constants.\n+They may however depend on command-line flags.\n+\n+@emph{Note:} Some run-time files, such @file{crtstuff.c}, also make\n+use of the @code{@var{FOO}_SECTION_ASM_OP} macros, and expect them\n+to be string literals.\n+\n+Some assemblers require a different string to be written every time a\n+section is selected.  If your assembler falls into this category, you\n+should define the @code{TARGET_ASM_INIT_SECTIONS} hook and use\n+@code{get_unnamed_section} to set up the sections.\n+\n+You must always create a @code{text_section}, either by defining\n+@code{TEXT_SECTION_ASM_OP} or by initializing @code{text_section}\n+in @code{TARGET_ASM_INIT_SECTIONS}.  The same is true of\n+@code{data_section} and @code{DATA_SECTION_ASM_OP}.  If you do not\n+create a distinct @code{readonly_data_section}, the default is to\n+reuse @code{text_section}.\n+\n+All the other @file{varasm.c} sections are optional, and are null\n+if the target does not provide them.\n \n @defmac TEXT_SECTION_ASM_OP\n A C expression whose value is a string, including spacing, containing the\n@@ -5941,22 +5962,18 @@ assembler operation to identify the following data as writable initialized\n data.  Normally @code{\"\\t.data\"} is right.\n @end defmac\n \n+@defmac SDATA_SECTION_ASM_OP\n+If defined, a C expression whose value is a string, including spacing,\n+containing the assembler operation to identify the following data as\n+initialized, writable small data.\n+@end defmac\n+\n @defmac READONLY_DATA_SECTION_ASM_OP\n A C expression whose value is a string, including spacing, containing the\n assembler operation to identify the following data as read-only initialized\n data.\n @end defmac\n \n-@defmac READONLY_DATA_SECTION\n-A macro naming a function to call to switch to the proper section for\n-read-only data.  The default is to use @code{READONLY_DATA_SECTION_ASM_OP}\n-if defined, else fall back to @code{text_section}.\n-\n-The most common definition will be @code{data_section}, if the target\n-does not have a special read-only data section, and does not put data\n-in the text section.\n-@end defmac\n-\n @defmac BSS_SECTION_ASM_OP\n If defined, a C expression whose value is a string, including spacing,\n containing the assembler operation to identify the following data as\n@@ -5967,6 +5984,12 @@ uninitialized global data will be output in the data section if\n used.\n @end defmac\n \n+@defmac SBSS_SECTION_ASM_OP\n+If defined, a C expression whose value is a string, including spacing,\n+containing the assembler operation to identify the following data as\n+uninitialized, writable small data.\n+@end defmac\n+\n @defmac INIT_SECTION_ASM_OP\n If defined, a C expression whose value is a string, including spacing,\n containing the assembler operation to identify the following data as\n@@ -6016,23 +6039,6 @@ arbitrary boundary.  This is used to force all fragments of the\n and thus prevent the linker from having to add any padding.\n @end defmac\n \n-@findex in_text\n-@findex in_data\n-@defmac EXTRA_SECTIONS\n-A list of names for sections other than the standard two, which are\n-@code{in_text} and @code{in_data}.  You need not define this macro\n-on a system with no other sections (that GCC needs to use).\n-@end defmac\n-\n-@findex text_section\n-@findex data_section\n-@defmac EXTRA_SECTION_FUNCTIONS\n-One or more functions to be defined in @file{varasm.c}.  These\n-functions should do jobs analogous to those of @code{text_section} and\n-@code{data_section}, for your additional sections.  Do not define this\n-macro if you do not define @code{EXTRA_SECTIONS}.\n-@end defmac\n-\n @defmac JUMP_TABLES_IN_TEXT_SECTION\n Define this macro to be an expression with a nonzero value if jump\n tables (for @code{tablejump} insns) should be output in the text\n@@ -6042,15 +6048,23 @@ readonly data section is used.\n This macro is irrelevant if there is no separate readonly data section.\n @end defmac\n \n-@deftypefn {Target Hook} void TARGET_ASM_SELECT_SECTION (tree @var{exp}, int @var{reloc}, unsigned HOST_WIDE_INT @var{align})\n-Switches to the appropriate section for output of @var{exp}.  You can\n+@deftypefn {Target Hook} void TARGET_ASM_INIT_SECTIONS (void)\n+Define this hook if you need to do something special to set up the\n+@file{varasm.c} sections, or if your target has some special sections\n+of its own that you need to create.\n+\n+GCC calls this hook after processing the command line, but before writing\n+any assembly code, and before calling any of the section-returning hooks\n+described below.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} {section *} TARGET_ASM_SELECT_SECTION (tree @var{exp}, int @var{reloc}, unsigned HOST_WIDE_INT @var{align})\n+Return the section into which @var{exp} should be placed.  You can\n assume that @var{exp} is either a @code{VAR_DECL} node or a constant of\n some sort.  @var{reloc} indicates whether the initial value of @var{exp}\n requires link-time relocations.  Bit 0 is set when variable contains\n local relocations only, while bit 1 is set for global relocations.\n-Select the section by calling @code{data_section} or one of the\n-alternatives for other sections.  @var{align} is the constant alignment\n-in bits.\n+@var{align} is the constant alignment in bits.\n \n The default version of this function takes care of putting read-only\n variables in @code{readonly_data_section}.\n@@ -6079,22 +6093,21 @@ example, the function @code{foo} would be placed in @code{.text.foo}.\n Whatever the actual target object format, this is often good enough.\n @end deftypefn\n \n-@deftypefn {Target Hook} void TARGET_ASM_FUNCTION_RODATA_SECTION (tree @var{decl})\n-Switches to a readonly data section associated with\n+@deftypefn {Target Hook} {section *} TARGET_ASM_FUNCTION_RODATA_SECTION (tree @var{decl})\n+Return the readonly data section associated with\n @samp{DECL_SECTION_NAME (@var{decl})}.\n-The default version of this function switches to @code{.gnu.linkonce.r.name}\n-section if function's section is @code{.gnu.linkonce.t.name}, to\n-@code{.rodata.name} if function is in @code{.text.name} section\n-and otherwise switches to the normal readonly data section.\n+The default version of this function selects @code{.gnu.linkonce.r.name} if\n+the function's section is @code{.gnu.linkonce.t.name}, @code{.rodata.name}\n+if function is in @code{.text.name}, and the normal readonly-data section\n+otherwise.\n @end deftypefn\n \n-@deftypefn {Target Hook} void TARGET_ASM_SELECT_RTX_SECTION (enum machine_mode @var{mode}, rtx @var{x}, unsigned HOST_WIDE_INT @var{align})\n-Switches to the appropriate section for output of constant pool entry\n-@var{x} in @var{mode}.  You can assume that @var{x} is some kind of\n+@deftypefn {Target Hook} {section *} TARGET_ASM_SELECT_RTX_SECTION (enum machine_mode @var{mode}, rtx @var{x}, unsigned HOST_WIDE_INT @var{align})\n+Return the section into which a constant @var{x}, of mode @var{mode},\n+should be placed.  You can assume that @var{x} is some kind of\n constant in RTL@.  The argument @var{mode} is redundant except in the\n-case of a @code{const_int} rtx.  Select the section by calling\n-@code{readonly_data_section} or one of the alternatives for other\n-sections.  @var{align} is the constant alignment in bits.\n+case of a @code{const_int} rtx.  @var{align} is the constant alignment\n+in bits.\n \n The default version of this function takes care of putting symbolic\n constants in @code{flag_pic} mode in @code{data_section} and everything\n@@ -7742,24 +7755,6 @@ minimum alignment otherwise.  @xref{SDB and DWARF}.  Only applicable if\n the target supports DWARF 2 frame unwind information.\n @end defmac\n \n-@deftypefn {Target Hook} void TARGET_ASM_EXCEPTION_SECTION ()\n-If defined, a function that switches to the section in which the main\n-exception table is to be placed (@pxref{Sections}).  The default is a\n-function that switches to a section named @code{.gcc_except_table} on\n-machines that support named sections via\n-@code{TARGET_ASM_NAMED_SECTION}, otherwise if @option{-fpic} or\n-@option{-fPIC} is in effect, the @code{data_section}, otherwise the\n-@code{readonly_data_section}.\n-@end deftypefn\n-\n-@deftypefn {Target Hook} void TARGET_ASM_EH_FRAME_SECTION ()\n-If defined, a function that switches to the section in which the DWARF 2\n-frame unwind information to be placed (@pxref{Sections}).  The default\n-is a function that outputs a standard GAS section directive, if\n-@code{EH_FRAME_SECTION_NAME} is defined, or else a data section\n-directive followed by a synthetic label.\n-@end deftypefn\n-\n @deftypevar {Target Hook} bool TARGET_TERMINATE_DW2_EH_FRAME_INFO\n Contains the value true if the target should add a zero word onto the\n end of a Dwarf-2 frame info section when used for exception handling."}, {"sha": "3752fa6626ad3798aa10b076372ced000a8cc871", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 89, "deletions": 68, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -113,12 +113,12 @@ dwarf2out_do_frame (void)\n #define PTR_SIZE (POINTER_SIZE / BITS_PER_UNIT)\n #endif\n \n-/* Various versions of targetm.eh_frame_section.  Note these must appear\n-   outside the DWARF2_DEBUGGING_INFO || DWARF2_UNWIND_INFO macro guards.  */\n+/* Return the default value of eh_frame_section.  Note that this function\n+   must appear outside the DWARF2_DEBUGGING_INFO || DWARF2_UNWIND_INFO\n+   macro guards.  */\n \n-/* Version of targetm.eh_frame_section for systems with named sections.  */\n-void\n-named_section_eh_frame_section (void)\n+section *\n+default_eh_frame_section (void)\n {\n #ifdef EH_FRAME_SECTION_NAME\n   int flags;\n@@ -143,30 +143,9 @@ named_section_eh_frame_section (void)\n     }\n   else\n     flags = SECTION_WRITE;\n-  named_section_flags (EH_FRAME_SECTION_NAME, flags);\n-#endif\n-}\n-\n-/* Version of targetm.eh_frame_section for systems using collect2.  */\n-void\n-collect2_eh_frame_section (void)\n-{\n-  tree label = get_file_function_name ('F');\n-\n-  data_section ();\n-  ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (PTR_SIZE));\n-  targetm.asm_out.globalize_label (asm_out_file, IDENTIFIER_POINTER (label));\n-  ASM_OUTPUT_LABEL (asm_out_file, IDENTIFIER_POINTER (label));\n-}\n-\n-/* Default version of targetm.eh_frame_section.  */\n-void\n-default_eh_frame_section (void)\n-{\n-#ifdef EH_FRAME_SECTION_NAME\n-  named_section_eh_frame_section ();\n+  return get_section (EH_FRAME_SECTION_NAME, flags, NULL);\n #else\n-  collect2_eh_frame_section ();\n+  return NULL;\n #endif\n }\n \n@@ -190,6 +169,17 @@ static GTY(()) VEC(tree,gc) *incomplete_types;\n    define type declaration DIE's.  */\n static GTY(()) VEC(tree,gc) *decl_scope_table;\n \n+/* Pointers to various DWARF2 sections.  */\n+static GTY(()) section *debug_info_section;\n+static GTY(()) section *debug_abbrev_section;\n+static GTY(()) section *debug_aranges_section;\n+static GTY(()) section *debug_macinfo_section;\n+static GTY(()) section *debug_line_section;\n+static GTY(()) section *debug_loc_section;\n+static GTY(()) section *debug_pubnames_section;\n+static GTY(()) section *debug_str_section;\n+static GTY(()) section *debug_ranges_section;\n+\n /* How to start an assembler comment.  */\n #ifndef ASM_COMMENT_START\n #define ASM_COMMENT_START \";#\"\n@@ -1994,6 +1984,28 @@ dw_cfi_oprnd2_desc (enum dwarf_call_frame_info cfi)\n \n #if defined (DWARF2_DEBUGGING_INFO) || defined (DWARF2_UNWIND_INFO)\n \n+/* Switch to eh_frame_section.  If we don't have an eh_frame_section,\n+   switch to the data section instead, and write out a synthetic label\n+   for collect2.  */\n+\n+static void\n+switch_to_eh_frame_section (void)\n+{\n+  tree label;\n+\n+  if (eh_frame_section)\n+    switch_to_section (eh_frame_section);\n+  else\n+    {\n+      switch_to_section (data_section);\n+      label = get_file_function_name ('F');\n+      ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (PTR_SIZE));\n+      targetm.asm_out.globalize_label (asm_out_file,\n+\t\t\t\t       IDENTIFIER_POINTER (label));\n+      ASM_OUTPUT_LABEL (asm_out_file, IDENTIFIER_POINTER (label));\n+    }\n+}\n+\n /* Map register numbers held in the call frame info that gcc has\n    collected using DWARF_FRAME_REGNUM to those that should be output in\n    .debug_frame and .eh_frame.  */\n@@ -2188,9 +2200,9 @@ output_call_frame_info (int for_eh)\n     app_enable ();\n \n   if (for_eh)\n-    targetm.asm_out.eh_frame_section ();\n+    switch_to_eh_frame_section ();\n   else\n-    named_section_flags (DEBUG_FRAME_SECTION, SECTION_DEBUG);\n+    switch_to_section (get_section (DEBUG_FRAME_SECTION, SECTION_DEBUG, NULL));\n \n   ASM_GENERATE_INTERNAL_LABEL (section_start_label, FRAME_BEGIN_LABEL, for_eh);\n   ASM_OUTPUT_LABEL (asm_out_file, section_start_label);\n@@ -2492,7 +2504,7 @@ dwarf2out_begin_prologue (unsigned int line ATTRIBUTE_UNUSED,\n     return;\n #endif\n \n-  function_section (current_function_decl);\n+  switch_to_section (function_section (current_function_decl));\n   ASM_GENERATE_INTERNAL_LABEL (label, FUNC_BEGIN_LABEL,\n \t\t\t       current_function_funcdef_no);\n   ASM_OUTPUT_DEBUG_LABEL (asm_out_file, FUNC_BEGIN_LABEL,\n@@ -4988,7 +5000,7 @@ AT_string_form (dw_attr_ref a)\n   /* If we cannot expect the linker to merge strings in .debug_str\n      section, only put it into .debug_str if it is worth even in this\n      single module.  */\n-  if ((DEBUG_STR_SECTION_FLAGS & SECTION_MERGE) == 0\n+  if ((debug_str_section->common.flags & SECTION_MERGE) == 0\n       && (len - DWARF_OFFSET_SIZE) * node->refcount <= len)\n     return node->form = DW_FORM_string;\n \n@@ -7196,12 +7208,12 @@ output_comp_unit (dw_die_ref die, int output_if_empty)\n       sprintf (tmp, \".gnu.linkonce.wi.%s\", oldsym);\n       secname = tmp;\n       die->die_symbol = NULL;\n+      switch_to_section (get_section (secname, SECTION_DEBUG, NULL));\n     }\n   else\n-    secname = (const char *) DEBUG_INFO_SECTION;\n+    switch_to_section (debug_info_section);\n \n   /* Output debugging information.  */\n-  named_section_flags (secname, SECTION_DEBUG);\n   output_compilation_unit_header ();\n   output_die (die);\n \n@@ -7828,10 +7840,7 @@ output_line_info (void)\n   current_file = 1;\n   current_line = 1;\n \n-  if (cfun\n-      && (last_text_section == in_unlikely_executed_text\n-\t  || (last_text_section == in_named\n-\t      && last_text_section_name == cfun->unlikely_text_section_name)))\n+  if (cfun && unlikely_text_section_p (last_text_section))\n     strcpy (prev_line_label, cfun->cold_section_label);\n   else\n     strcpy (prev_line_label, text_section_label);\n@@ -10176,11 +10185,7 @@ secname_for_decl (tree decl)\n       tree sectree = DECL_SECTION_NAME (current_function_decl);\n       secname = TREE_STRING_POINTER (sectree);\n     }\n-  else if (cfun\n-\t   && (last_text_section == in_unlikely_executed_text\n-\t       || (last_text_section == in_named\n-\t\t   && last_text_section_name\n-\t\t      == cfun->unlikely_text_section_name)))\n+  else if (cfun && unlikely_text_section_p (last_text_section))\n     secname = cfun->cold_section_label;\n   else\n     secname = text_section_label;\n@@ -13383,7 +13388,7 @@ static void\n dwarf2out_begin_block (unsigned int line ATTRIBUTE_UNUSED,\n \t\t       unsigned int blocknum)\n {\n-  current_function_section (current_function_decl);\n+  switch_to_section (current_function_section ());\n   ASM_OUTPUT_DEBUG_LABEL (asm_out_file, BLOCK_BEGIN_LABEL, blocknum);\n }\n \n@@ -13393,7 +13398,7 @@ dwarf2out_begin_block (unsigned int line ATTRIBUTE_UNUSED,\n static void\n dwarf2out_end_block (unsigned int line ATTRIBUTE_UNUSED, unsigned int blocknum)\n {\n-  current_function_section (current_function_decl);\n+  switch_to_section (current_function_section ());\n   ASM_OUTPUT_DEBUG_LABEL (asm_out_file, BLOCK_END_LABEL, blocknum);\n }\n \n@@ -13550,10 +13555,7 @@ dwarf2out_var_location (rtx loc_note)\n   newloc->var_loc_note = loc_note;\n   newloc->next = NULL;\n \n-  if (cfun\n-      && (last_text_section == in_unlikely_executed_text\n-\t  || (last_text_section == in_named\n-\t      && last_text_section_name == cfun->unlikely_text_section_name)))\n+  if (cfun && unlikely_text_section_p (last_text_section))\n     newloc->section_label = cfun->cold_section_label;\n   else\n     newloc->section_label = text_section_label;\n@@ -13588,7 +13590,7 @@ dwarf2out_source_line (unsigned int line, const char *filename)\n   if (debug_info_level >= DINFO_LEVEL_NORMAL\n       && line != 0)\n     {\n-      current_function_section (current_function_decl);\n+      switch_to_section (current_function_section ());\n \n       /* If requested, emit something human-readable.  */\n       if (flag_debug_asm)\n@@ -13685,7 +13687,7 @@ dwarf2out_start_source_file (unsigned int lineno, const char *filename)\n     {\n       int fileno;\n \n-      named_section_flags (DEBUG_MACINFO_SECTION, SECTION_DEBUG);\n+      switch_to_section (debug_macinfo_section);\n       dw2_asm_output_data (1, DW_MACINFO_start_file, \"Start new file\");\n       dw2_asm_output_data_uleb128 (lineno, \"Included from line number %d\",\n \t\t\t\t   lineno);\n@@ -13706,7 +13708,7 @@ dwarf2out_end_source_file (unsigned int lineno ATTRIBUTE_UNUSED)\n \n   if (debug_info_level >= DINFO_LEVEL_VERBOSE)\n     {\n-      named_section_flags (DEBUG_MACINFO_SECTION, SECTION_DEBUG);\n+      switch_to_section (debug_macinfo_section);\n       dw2_asm_output_data (1, DW_MACINFO_end_file, \"End file\");\n     }\n }\n@@ -13721,7 +13723,7 @@ dwarf2out_define (unsigned int lineno ATTRIBUTE_UNUSED,\n {\n   if (debug_info_level >= DINFO_LEVEL_VERBOSE)\n     {\n-      named_section_flags (DEBUG_MACINFO_SECTION, SECTION_DEBUG);\n+      switch_to_section (debug_macinfo_section);\n       dw2_asm_output_data (1, DW_MACINFO_define, \"Define macro\");\n       dw2_asm_output_data_uleb128 (lineno, \"At line number %d\", lineno);\n       dw2_asm_output_nstring (buffer, -1, \"The macro\");\n@@ -13738,7 +13740,7 @@ dwarf2out_undef (unsigned int lineno ATTRIBUTE_UNUSED,\n {\n   if (debug_info_level >= DINFO_LEVEL_VERBOSE)\n     {\n-      named_section_flags (DEBUG_MACINFO_SECTION, SECTION_DEBUG);\n+      switch_to_section (debug_macinfo_section);\n       dw2_asm_output_data (1, DW_MACINFO_undef, \"Undefine macro\");\n       dw2_asm_output_data_uleb128 (lineno, \"At line number %d\", lineno);\n       dw2_asm_output_nstring (buffer, -1, \"The macro\");\n@@ -13790,6 +13792,25 @@ dwarf2out_init (const char *filename ATTRIBUTE_UNUSED)\n \n   used_rtx_array = VEC_alloc (rtx, gc, 32);\n \n+  debug_info_section = get_section (DEBUG_INFO_SECTION,\n+\t\t\t\t    SECTION_DEBUG, NULL);\n+  debug_abbrev_section = get_section (DEBUG_ABBREV_SECTION,\n+\t\t\t\t      SECTION_DEBUG, NULL);\n+  debug_aranges_section = get_section (DEBUG_ARANGES_SECTION,\n+\t\t\t\t       SECTION_DEBUG, NULL);\n+  debug_macinfo_section = get_section (DEBUG_MACINFO_SECTION,\n+\t\t\t\t       SECTION_DEBUG, NULL);\n+  debug_line_section = get_section (DEBUG_LINE_SECTION,\n+\t\t\t\t    SECTION_DEBUG, NULL);\n+  debug_loc_section = get_section (DEBUG_LOC_SECTION,\n+\t\t\t\t   SECTION_DEBUG, NULL);\n+  debug_pubnames_section = get_section (DEBUG_PUBNAMES_SECTION,\n+\t\t\t\t\tSECTION_DEBUG, NULL);\n+  debug_str_section = get_section (DEBUG_STR_SECTION,\n+\t\t\t\t   DEBUG_STR_SECTION_FLAGS, NULL);\n+  debug_ranges_section = get_section (DEBUG_RANGES_SECTION,\n+\t\t\t\t      SECTION_DEBUG, NULL);\n+\n   ASM_GENERATE_INTERNAL_LABEL (text_end_label, TEXT_END_LABEL, 0);\n   ASM_GENERATE_INTERNAL_LABEL (abbrev_section_label,\n \t\t\t       DEBUG_ABBREV_SECTION_LABEL, 0);\n@@ -13804,22 +13825,22 @@ dwarf2out_init (const char *filename ATTRIBUTE_UNUSED)\n \t\t\t       DEBUG_LINE_SECTION_LABEL, 0);\n   ASM_GENERATE_INTERNAL_LABEL (ranges_section_label,\n \t\t\t       DEBUG_RANGES_SECTION_LABEL, 0);\n-  named_section_flags (DEBUG_ABBREV_SECTION, SECTION_DEBUG);\n+  switch_to_section (debug_abbrev_section);\n   ASM_OUTPUT_LABEL (asm_out_file, abbrev_section_label);\n-  named_section_flags (DEBUG_INFO_SECTION, SECTION_DEBUG);\n+  switch_to_section (debug_info_section);\n   ASM_OUTPUT_LABEL (asm_out_file, debug_info_section_label);\n-  named_section_flags (DEBUG_LINE_SECTION, SECTION_DEBUG);\n+  switch_to_section (debug_line_section);\n   ASM_OUTPUT_LABEL (asm_out_file, debug_line_section_label);\n \n   if (debug_info_level >= DINFO_LEVEL_VERBOSE)\n     {\n-      named_section_flags (DEBUG_MACINFO_SECTION, SECTION_DEBUG);\n+      switch_to_section (debug_macinfo_section);\n       ASM_GENERATE_INTERNAL_LABEL (macinfo_section_label,\n \t\t\t\t   DEBUG_MACINFO_SECTION_LABEL, 0);\n       ASM_OUTPUT_LABEL (asm_out_file, macinfo_section_label);\n     }\n \n-  text_section ();\n+  switch_to_section (text_section);\n   ASM_OUTPUT_LABEL (asm_out_file, text_section_label);\n   if (flag_reorder_blocks_and_partition)\n     {\n@@ -13838,7 +13859,7 @@ output_indirect_string (void **h, void *v ATTRIBUTE_UNUSED)\n \n   if (node->form == DW_FORM_strp)\n     {\n-      named_section_flags (DEBUG_STR_SECTION, DEBUG_STR_SECTION_FLAGS);\n+      switch_to_section (debug_str_section);\n       ASM_OUTPUT_LABEL (asm_out_file, node->label);\n       assemble_string (node->str, strlen (node->str) + 1);\n     }\n@@ -14155,7 +14176,7 @@ dwarf2out_finish (const char *filename)\n     add_sibling_attributes (node->die);\n \n   /* Output a terminator label for the .text section.  */\n-  text_section ();\n+  switch_to_section (text_section);\n   targetm.asm_out.internal_label (asm_out_file, TEXT_END_LABEL, 0);\n   if (flag_reorder_blocks_and_partition)\n     {\n@@ -14170,15 +14191,15 @@ dwarf2out_finish (const char *filename)\n      examining the file.  */\n   if (! DWARF2_ASM_LINE_DEBUG_INFO)\n     {\n-      named_section_flags (DEBUG_LINE_SECTION, SECTION_DEBUG);\n+      switch_to_section (debug_line_section);\n       output_line_info ();\n     }\n \n   /* Output location list section if necessary.  */\n   if (have_location_lists)\n     {\n       /* Output the location lists info.  */\n-      named_section_flags (DEBUG_LOC_SECTION, SECTION_DEBUG);\n+      switch_to_section (debug_loc_section);\n       ASM_GENERATE_INTERNAL_LABEL (loc_section_label,\n \t\t\t\t   DEBUG_LOC_SECTION_LABEL, 0);\n       ASM_OUTPUT_LABEL (asm_out_file, loc_section_label);\n@@ -14214,36 +14235,36 @@ dwarf2out_finish (const char *filename)\n   output_comp_unit (comp_unit_die, 0);\n \n   /* Output the abbreviation table.  */\n-  named_section_flags (DEBUG_ABBREV_SECTION, SECTION_DEBUG);\n+  switch_to_section (debug_abbrev_section);\n   output_abbrev_section ();\n \n   /* Output public names table if necessary.  */\n   if (pubname_table_in_use)\n     {\n-      named_section_flags (DEBUG_PUBNAMES_SECTION, SECTION_DEBUG);\n+      switch_to_section (debug_pubnames_section);\n       output_pubnames ();\n     }\n \n   /* Output the address range information.  We only put functions in the arange\n      table, so don't write it out if we don't have any.  */\n   if (fde_table_in_use)\n     {\n-      named_section_flags (DEBUG_ARANGES_SECTION, SECTION_DEBUG);\n+      switch_to_section (debug_aranges_section);\n       output_aranges ();\n     }\n \n   /* Output ranges section if necessary.  */\n   if (ranges_table_in_use)\n     {\n-      named_section_flags (DEBUG_RANGES_SECTION, SECTION_DEBUG);\n+      switch_to_section (debug_ranges_section);\n       ASM_OUTPUT_LABEL (asm_out_file, ranges_section_label);\n       output_ranges ();\n     }\n \n   /* Have to end the macro section.  */\n   if (debug_info_level >= DINFO_LEVEL_VERBOSE)\n     {\n-      named_section_flags (DEBUG_MACINFO_SECTION, SECTION_DEBUG);\n+      switch_to_section (debug_macinfo_section);\n       dw2_asm_output_data (1, 0, \"End compilation unit\");\n     }\n "}, {"sha": "0ace54d872e79380f0dc46bb589cb5f541861e11", "filename": "gcc/except.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -3425,10 +3425,9 @@ sjlj_output_call_site_table (void)\n   call_site_base += n;\n }\n \n-/* Tell assembler to switch to the section for the exception handling\n-   table.  */\n+/* Return the default value of exception_section.  */\n \n-void\n+section *\n default_exception_section (void)\n {\n   if (targetm.have_named_sections)\n@@ -3446,12 +3445,10 @@ default_exception_section (void)\n \t}\n       else\n \tflags = SECTION_WRITE;\n-      named_section_flags (\".gcc_except_table\", flags);\n+      return get_section (\".gcc_except_table\", flags, NULL);\n     }\n-  else if (flag_pic)\n-    data_section ();\n   else\n-    readonly_data_section ();\n+    return flag_pic ? data_section : readonly_data_section;\n }\n \n \n@@ -3533,7 +3530,7 @@ output_function_exception_table (void)\n   /* Note that varasm still thinks we're in the function's code section.\n      The \".endp\" directive that will immediately follow will take us back.  */\n #else\n-  targetm.asm_out.exception_section ();\n+  switch_to_section (exception_section);\n #endif\n \n   have_tt_data = (VEC_length (tree, cfun->eh->ttype_data) > 0\n@@ -3687,7 +3684,7 @@ output_function_exception_table (void)\n \t\t\t     (i ? NULL : \"Exception specification table\"));\n     }\n \n-  current_function_section (current_function_decl);\n+  switch_to_section (current_function_section ());\n }\n \n void"}, {"sha": "7ccc8f5debebcff336e7474e72e08ece15361965", "filename": "gcc/final.c", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -114,12 +114,6 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #define JUMP_TABLES_IN_TEXT_SECTION 0\n #endif\n \n-#if defined(READONLY_DATA_SECTION) || defined(READONLY_DATA_SECTION_ASM_OP)\n-#define HAVE_READONLY_DATA_SECTION 1\n-#else\n-#define HAVE_READONLY_DATA_SECTION 0\n-#endif\n-\n /* Bitflags used by final_scan_insn.  */\n #define SEEN_BB\t\t1\n #define SEEN_NOTE\t2\n@@ -887,7 +881,8 @@ shorten_branches (rtx first ATTRIBUTE_UNUSED)\n \t  next = next_nonnote_insn (insn);\n \t  /* ADDR_VECs only take room if read-only data goes into the text\n \t     section.  */\n-\t  if (JUMP_TABLES_IN_TEXT_SECTION || !HAVE_READONLY_DATA_SECTION)\n+\t  if (JUMP_TABLES_IN_TEXT_SECTION\n+\t      || readonly_data_section == text_section)\n \t    if (next && JUMP_P (next))\n \t      {\n \t\trtx nextbody = PATTERN (next);\n@@ -1050,7 +1045,8 @@ shorten_branches (rtx first ATTRIBUTE_UNUSED)\n \t{\n \t  /* This only takes room if read-only data goes into the text\n \t     section.  */\n-\t  if (JUMP_TABLES_IN_TEXT_SECTION || !HAVE_READONLY_DATA_SECTION)\n+\t  if (JUMP_TABLES_IN_TEXT_SECTION\n+\t      || readonly_data_section == text_section)\n \t    insn_lengths[uid] = (XVECLEN (body,\n \t\t\t\t\t  GET_CODE (body) == ADDR_DIFF_VEC)\n \t\t\t\t * GET_MODE_SIZE (GET_MODE (body)));\n@@ -1251,7 +1247,8 @@ shorten_branches (rtx first ATTRIBUTE_UNUSED)\n \t      PUT_MODE (body, CASE_VECTOR_SHORTEN_MODE (min_addr - rel_addr,\n \t\t\t\t\t\t\tmax_addr - rel_addr,\n \t\t\t\t\t\t\tbody));\n-\t      if (JUMP_TABLES_IN_TEXT_SECTION || !HAVE_READONLY_DATA_SECTION)\n+\t      if (JUMP_TABLES_IN_TEXT_SECTION\n+\t\t  || readonly_data_section == text_section)\n \t\t{\n \t\t  insn_lengths[uid]\n \t\t    = (XVECLEN (body, 1) * GET_MODE_SIZE (GET_MODE (body)));\n@@ -1468,13 +1465,13 @@ profile_function (FILE *file ATTRIBUTE_UNUSED)\n   if (! NO_PROFILE_COUNTERS)\n     {\n       int align = MIN (BIGGEST_ALIGNMENT, LONG_TYPE_SIZE);\n-      data_section ();\n+      switch_to_section (data_section);\n       ASM_OUTPUT_ALIGN (file, floor_log2 (align / BITS_PER_UNIT));\n       targetm.asm_out.internal_label (file, \"LP\", current_function_funcdef_no);\n       assemble_integer (const0_rtx, LONG_TYPE_SIZE / BITS_PER_UNIT, align, 1);\n     }\n \n-  current_function_section (current_function_decl);\n+  switch_to_section (current_function_section ());\n \n #if defined(ASM_OUTPUT_REG_PUSH)\n   if (sval && svrtx != NULL_RTX && REG_P (svrtx))\n@@ -1717,15 +1714,15 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t     not already writing to the cold section we need to change\n \t     to it.  */\n \n-\t  if (last_text_section == in_text)\n+\t  if (last_text_section == text_section)\n \t    {\n \t      (*debug_hooks->switch_text_section) ();\n-\t      unlikely_text_section ();\n+\t      switch_to_section (unlikely_text_section ());\n \t    }\n \t  else\n \t    {\n \t      (*debug_hooks->switch_text_section) ();\n-\t      text_section ();\n+\t      switch_to_section (text_section);\n \t    }\n \t  break;\n \t  \n@@ -1939,7 +1936,8 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t\t{\n \t\t  int log_align;\n \n-\t\t  targetm.asm_out.function_rodata_section (current_function_decl);\n+\t\t  switch_to_section (targetm.asm_out.function_rodata_section\n+\t\t\t\t     (current_function_decl));\n \n #ifdef ADDR_VEC_ALIGN\n \t\t  log_align = ADDR_VEC_ALIGN (next);\n@@ -1949,7 +1947,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t\t  ASM_OUTPUT_ALIGN (file, log_align);\n \t\t}\n \t      else\n-\t\tcurrent_function_section (current_function_decl);\n+\t\tswitch_to_section (current_function_section ());\n \n #ifdef ASM_OUTPUT_CASE_LABEL\n \t      ASM_OUTPUT_CASE_LABEL (file, \"L\", CODE_LABEL_NUMBER (insn),\n@@ -2006,9 +2004,10 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n #endif\n \n \t    if (! JUMP_TABLES_IN_TEXT_SECTION)\n-\t      targetm.asm_out.function_rodata_section (current_function_decl);\n+\t      switch_to_section (targetm.asm_out.function_rodata_section\n+\t\t\t\t (current_function_decl));\n \t    else\n-\t      current_function_section (current_function_decl);\n+\t      switch_to_section (current_function_section ());\n \n \t    if (app_on)\n \t      {\n@@ -2066,7 +2065,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n #endif\n #endif\n \n-\t    current_function_section (current_function_decl);\n+\t    switch_to_section (current_function_section ());\n \n \t    break;\n \t  }"}, {"sha": "704f7739d9078ef6d9f0025b191724ac528729b5", "filename": "gcc/gengtype.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -1080,7 +1080,7 @@ open_base_files (void)\n       \"hard-reg-set.h\", \"basic-block.h\", \"cselib.h\", \"insn-addr.h\",\n       \"optabs.h\", \"libfuncs.h\", \"debug.h\", \"ggc.h\", \"cgraph.h\",\n       \"tree-flow.h\", \"reload.h\", \"cpp-id-data.h\", \"tree-chrec.h\",\n-      \"except.h\", NULL\n+      \"except.h\", \"output.h\", NULL\n     };\n     const char *const *ifp;\n     outf_p gtype_desc_c;"}, {"sha": "cdcf6ee086dd487787547e1d0ede6df0a13f9aa2", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -1,3 +1,8 @@\n+2005-12-07  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* class.c (build_utf8_ref, emit_register_classes): Use\n+\tswitch_to_section and get_section.\n+\n 2005-12-06  Tom Tromey  <tromey@redhat.com>\n \n \tPR java/25283:"}, {"sha": "fbf5ed204c6c45a93f84a0ff1d87856800a864c6", "filename": "gcc/java/class.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -915,7 +915,7 @@ build_utf8_ref (tree name)\n \t  int flags = (SECTION_OVERRIDE\n \t\t       | SECTION_MERGE | (SECTION_ENTSIZE & decl_size));\n \t  sprintf (buf, \".rodata.jutf8.%d\", decl_size);\n-\t  named_section_flags (buf, flags);\n+\t  switch_to_section (get_section (buf, flags, NULL));\n \t  DECL_SECTION_NAME (decl) = build_string (strlen (buf), buf);\n \t}\n     }\n@@ -2434,7 +2434,7 @@ emit_register_classes (tree *list_p)\n       int i;\n \n #ifdef JCR_SECTION_NAME\n-      named_section_flags (JCR_SECTION_NAME, SECTION_WRITE);\n+      switch_to_section (get_section (JCR_SECTION_NAME, SECTION_WRITE, NULL));\n #else\n       /* A target has defined TARGET_USE_JCR_SECTION,\n \t but doesn't have a JCR_SECTION_NAME.  */"}, {"sha": "47989e94422e173a7860b2dd01498fddf296df43", "filename": "gcc/output.h", "status": "modified", "additions": 93, "deletions": 113, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -153,77 +153,6 @@ extern int regno_clobbered_at_setjmp (int);\n \n /* Functions in varasm.c.  */\n \n-/* Tell assembler to switch to text section.  */\n-extern void text_section (void);\n-\n-/* Tell assembler to switch to unlikely-to-be-executed text section.  */\n-extern void unlikely_text_section (void);\n-\n-/* Tell assembler to switch to data section.  */\n-extern void data_section (void);\n-\n-/* Tell assembler to switch to read-only data section.  This is normally\n-   the text section.  */\n-extern void readonly_data_section (void);\n-\n-/* Determine if we're in the text section.  */\n-extern int in_text_section (void);\n-\n-/* Determine if we're in the unlikely-to-be-executed text section.  */\n-extern int in_unlikely_text_section (void);\n-\n-#ifdef CTORS_SECTION_ASM_OP\n-extern void ctors_section (void);\n-#endif\n-\n-#ifdef DTORS_SECTION_ASM_OP\n-extern void dtors_section (void);\n-#endif\n-\n-#ifdef BSS_SECTION_ASM_OP\n-extern void bss_section (void);\n-#endif\n-\n-#ifdef INIT_SECTION_ASM_OP\n-extern void init_section (void);\n-#endif\n-\n-#ifdef FINI_SECTION_ASM_OP\n-extern void fini_section (void);\n-#endif\n-\n-#ifdef EXPORTS_SECTION_ASM_OP\n-extern void exports_section (void);\n-#endif\n-\n-#ifdef DRECTVE_SECTION_ASM_OP\n-extern void drectve_section (void);\n-#endif\n-\n-#ifdef SDATA_SECTION_ASM_OP\n-extern void sdata_section (void);\n-#endif\n-\n-/* Tell assembler to change to section NAME for DECL.\n-   If DECL is NULL, just switch to section NAME.\n-   If NAME is NULL, get the name from DECL.\n-   If RELOC is 1, the initializer for DECL contains relocs.  */\n-extern void named_section (tree, const char *, int);\n-\n-/* Tell assembler to switch to the section for function DECL.  */\n-extern void function_section (tree);\n-\n-/* Tell assembler to switch to the most recently used text section.  */\n-extern void current_function_section (tree);\n-\n-/* Tell assembler to switch to the section for string merging.  */\n-extern void mergeable_string_section (tree, unsigned HOST_WIDE_INT,\n-\t\t\t\t      unsigned int);\n-\n-/* Tell assembler to switch to the section for constant merging.  */\n-extern void mergeable_constant_section (enum machine_mode,\n-\t\t\t\t\tunsigned HOST_WIDE_INT, unsigned int);\n-\n /* Declare DECL to be a weak symbol.  */\n extern void declare_weak (tree);\n /* Merge weak status.  */\n@@ -438,27 +367,6 @@ extern rtx this_is_asm_operands;\n extern int size_directive_output;\n extern tree last_assemble_variable_decl;\n \n-enum in_section { no_section, in_text, in_unlikely_executed_text, in_data,\n-                 in_named\n-#ifdef BSS_SECTION_ASM_OP\n-  , in_bss\n-#endif\n-#ifdef CTORS_SECTION_ASM_OP\n-  , in_ctors\n-#endif\n-#ifdef DTORS_SECTION_ASM_OP\n-  , in_dtors\n-#endif\n-#ifdef READONLY_DATA_SECTION_ASM_OP\n-  , in_readonly_data\n-#endif\n-#ifdef EXTRA_SECTIONS\n-  , EXTRA_SECTIONS\n-#endif\n-};\n-\n-extern const char *last_text_section_name;\n-extern enum in_section last_text_section;\n extern bool first_function_block_is_cold;\n \n /* Decide whether DECL needs to be in a writable section.\n@@ -476,13 +384,11 @@ extern const char *user_label_prefix;\n /* Default target function prologue and epilogue assembler output.  */\n extern void default_function_pro_epilogue (FILE *, HOST_WIDE_INT);\n \n-/* Tell assembler to switch to the section for the exception table.  */\n-extern void default_exception_section (void);\n+/* Return the default value of exception_section.  */\n+extern section *default_exception_section (void);\n \n-/* Tell assembler to switch to the section for the EH frames.  */\n-extern void named_section_eh_frame_section (void);\n-extern void collect2_eh_frame_section (void);\n-extern void default_eh_frame_section (void);\n+/* Return the default value of eh_frame_section.  */\n+extern section *default_eh_frame_section (void);\n \n /* Default target hook that outputs nothing to a stream.  */\n extern void no_asm_to_stream (FILE *);\n@@ -502,7 +408,9 @@ extern void no_asm_to_stream (FILE *);\n #define SECTION_OVERRIDE 0x20000\t/* allow override of default flags */\n #define SECTION_TLS\t 0x40000\t/* contains thread-local storage */\n #define SECTION_NOTYPE\t 0x80000\t/* don't output @progbits */\n-#define SECTION_MACH_DEP 0x100000\t/* subsequent bits reserved for target */\n+#define SECTION_DECLARED 0x100000\t/* section has been used */\n+#define SECTION_NAMED\t 0x200000\t/* section has a name */\n+#define SECTION_MACH_DEP 0x400000\t/* subsequent bits reserved for target */\n \n /* A helper function for default_elf_select_section and\n    default_elf_unique_section.  Categorizes the DECL.  */\n@@ -541,12 +449,81 @@ enum section_category\n   SECCAT_TBSS\n };\n \n+/* Information that is provided by all instances of the section type.  */\n+struct section_common GTY(()) {\n+  /* The set of SECTION_* flags that apply to this section.  */\n+  unsigned int flags;\n+};\n+\n+/* Information that is provided by named sections.  */\n+struct named_section GTY(()) {\n+  struct section_common common;\n+\n+  /* The name of the section.  */\n+  const char *name;\n+\n+  /* If nonnull, the VAR_DECL or FUNCTION_DECL with which the\n+     section is associated.  */\n+  tree decl;\n+};\n+\n+/* A callback that writes the assembly code for switching to an unnamed\n+   section.  The argument provides callback-specific data.  */\n+typedef void (*unnamed_section_callback) (const void *);\n+\n+/* Information that is provided by unnamed sections.  */\n+struct unnamed_section GTY(()) {\n+  struct section_common common;\n+\n+  /* The callback used to switch to the section, and the data that\n+     should be passed to the callback.  */\n+  unnamed_section_callback GTY ((skip)) callback;\n+  const void *GTY ((skip)) data;\n+\n+  /* The next entry in the chain of unnamed sections.  */\n+  section *next;\n+};\n+\n+/* Information about a section, which may be named or unnamed.  */\n+union section GTY ((desc (\"(%h).common.flags & SECTION_NAMED\")))\n+{\n+  struct section_common GTY ((skip)) common;\n+  struct named_section GTY ((tag (\"SECTION_NAMED\"))) named;\n+  struct unnamed_section GTY ((tag (\"0\"))) unnamed;\n+};\n+\n+/* Special well-known sections.  */\n+extern GTY(()) section *text_section;\n+extern GTY(()) section *data_section;\n+extern GTY(()) section *readonly_data_section;\n+extern GTY(()) section *sdata_section;\n+extern GTY(()) section *ctors_section;\n+extern GTY(()) section *dtors_section;\n+extern GTY(()) section *bss_section;\n+extern GTY(()) section *sbss_section;\n+extern GTY(()) section *init_section;\n+extern GTY(()) section *fini_section;\n+extern GTY(()) section *exception_section;\n+extern GTY(()) section *eh_frame_section;\n+\n+extern GTY(()) section *in_section;\n+extern GTY(()) section *last_text_section;\n+\n+extern section *get_unnamed_section (unsigned int, void (*) (const void *),\n+\t\t\t\t     const void *);\n+extern section *get_section (const char *, unsigned int, tree);\n+extern section *get_named_section (tree, const char *, int);\n+extern section *mergeable_constant_section (enum machine_mode,\n+\t\t\t\t\t    unsigned HOST_WIDE_INT,\n+\t\t\t\t\t    unsigned int);\n+extern section *function_section (tree);\n+extern section *unlikely_text_section (void);\n+extern section *current_function_section (void);\n+\n+extern bool unlikely_text_section_p (section *);\n+extern void switch_to_section (section *);\n+extern void output_section_asm_op (const void *);\n \n-extern bool set_named_section_flags (const char *, unsigned int);\n-#define named_section_flags(NAME, FLAGS) \\\n-  named_section_real((NAME), (FLAGS), /*decl=*/NULL_TREE)\n-extern void named_section_real (const char *, unsigned int, tree);\n-extern bool named_section_first_declaration (const char *);\n extern unsigned int default_section_type_flags (tree, const char *, int);\n extern unsigned int default_section_type_flags_1 (tree, const char *, int, int);\n \n@@ -563,18 +540,21 @@ extern void default_stabs_asm_out_constructor (rtx, int);\n extern void default_named_section_asm_out_constructor (rtx, int);\n extern void default_ctor_section_asm_out_constructor (rtx, int);\n \n-extern void default_select_section (tree, int, unsigned HOST_WIDE_INT);\n-extern void default_elf_select_section (tree, int, unsigned HOST_WIDE_INT);\n-extern void default_elf_select_section_1 (tree, int,\n-\t\t\t\t\t  unsigned HOST_WIDE_INT, int);\n+extern section *default_select_section (tree, int,\n+\t\t\t\t\t       unsigned HOST_WIDE_INT);\n+extern section *default_elf_select_section (tree, int,\n+\t\t\t\t\t\t   unsigned HOST_WIDE_INT);\n+extern section *default_elf_select_section_1 (tree, int,\n+\t\t\t\t\t\t     unsigned HOST_WIDE_INT,\n+\t\t\t\t\t\t     int);\n extern void default_unique_section (tree, int);\n extern void default_unique_section_1 (tree, int, int);\n-extern void default_function_rodata_section (tree);\n-extern void default_no_function_rodata_section (tree);\n-extern void default_select_rtx_section (enum machine_mode, rtx,\n-\t\t\t\t\tunsigned HOST_WIDE_INT);\n-extern void default_elf_select_rtx_section (enum machine_mode, rtx,\n+extern section *default_function_rodata_section (tree);\n+extern section *default_no_function_rodata_section (tree);\n+extern section *default_select_rtx_section (enum machine_mode, rtx,\n \t\t\t\t\t    unsigned HOST_WIDE_INT);\n+extern section *default_elf_select_rtx_section (enum machine_mode, rtx,\n+\t\t\t\t\t\tunsigned HOST_WIDE_INT);\n extern void default_encode_section_info (tree, rtx, int);\n extern const char *default_strip_name_encoding (const char *);\n extern bool default_binds_local_p (tree);"}, {"sha": "9ac8a884aa935bbaa3c9a934e23a3fe978245c3f", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -2114,7 +2114,6 @@ extern rtx emit_library_call_value (rtx, rtx, enum libcall_type,\n \t\t\t\t    enum machine_mode, int, ...);\n \n /* In varasm.c */\n-extern int in_data_section (void);\n extern void init_varasm_once (void);\n extern enum tls_model decl_default_tls_model (tree);\n   "}, {"sha": "1868a812566150ab1e803b1ac2c645ae370092cf", "filename": "gcc/sdbout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -1050,7 +1050,7 @@ sdbout_one_type (tree type)\n       && DECL_SECTION_NAME (current_function_decl) != NULL_TREE)\n     ; /* Don't change section amid function.  */\n   else\n-    text_section ();\n+    switch_to_section (text_section);\n \n   switch (TREE_CODE (type))\n     {"}, {"sha": "65d6e041645b072d2576235a0c21cc5d9e61388a", "filename": "gcc/system.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -728,7 +728,9 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n         TARGET_ESC TARGET_FF TARGET_NEWLINE TARGET_TAB TARGET_VT\t   \\\n         LINK_LIBGCC_SPECIAL DONT_ACCESS_GBLS_AFTER_EPILOGUE\t\t   \\\n \tTARGET_OPTIONS TARGET_SWITCHES EXTRA_CC_MODES FINALIZE_PIC\t   \\\n-\tPREDICATE_CODES SPECIAL_MODE_PREDICATES HOST_PTR_PRINTF\n+\tPREDICATE_CODES SPECIAL_MODE_PREDICATES HOST_PTR_PRINTF\t\t   \\\n+\tEXTRA_SECTIONS EXTRA_SECTION_FUNCTIONS READONLY_DATA_SECTION\t   \\\n+\tTARGET_ASM_EXCEPTION_SECTION TARGET_ASM_EH_FRAME_SECTION\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}, {"sha": "c15c7988e16d373b369716238eb478fc1fae7326", "filename": "gcc/target-def.h", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -136,6 +136,10 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n # endif\n #endif\n \n+#ifndef TARGET_ASM_INIT_SECTIONS\n+#define TARGET_ASM_INIT_SECTIONS hook_void_void\n+#endif\n+\n #ifdef TARGET_ASM_NAMED_SECTION\n #define TARGET_HAVE_NAMED_SECTIONS true\n #else\n@@ -169,14 +173,6 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n \n #define TARGET_DWARF_REGISTER_SPAN hook_rtx_rtx_null\n \n-#ifndef TARGET_ASM_EXCEPTION_SECTION\n-#define TARGET_ASM_EXCEPTION_SECTION default_exception_section\n-#endif\n-\n-#ifndef TARGET_ASM_EH_FRAME_SECTION\n-#define TARGET_ASM_EH_FRAME_SECTION default_eh_frame_section\n-#endif\n-\n #ifndef TARGET_ASM_FILE_START\n #define TARGET_ASM_FILE_START default_file_start\n #endif\n@@ -233,9 +229,8 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n \t\t\tTARGET_ASM_FUNCTION_END_PROLOGUE,\t\\\n \t\t\tTARGET_ASM_FUNCTION_BEGIN_EPILOGUE,\t\\\n \t\t\tTARGET_ASM_FUNCTION_EPILOGUE,\t\t\\\n+\t\t\tTARGET_ASM_INIT_SECTIONS,\t\t\\\n \t\t\tTARGET_ASM_NAMED_SECTION,\t\t\\\n-\t\t\tTARGET_ASM_EXCEPTION_SECTION,\t\t\\\n-\t\t\tTARGET_ASM_EH_FRAME_SECTION,\t\t\\\n \t\t\tTARGET_ASM_SELECT_SECTION,\t\t\\\n \t\t\tTARGET_ASM_SELECT_RTX_SECTION,\t\t\\\n \t\t\tTARGET_ASM_UNIQUE_SECTION,\t\t\\"}, {"sha": "96dc4252a20615e22fa899428991ed4332eab272", "filename": "gcc/target.h", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -127,35 +127,31 @@ struct gcc_target\n     /* Output the assembler code for function exit.  */\n     void (* function_epilogue) (FILE *, HOST_WIDE_INT);\n \n+    /* Initialize target-specific sections.  */\n+    void (* init_sections) (void);\n+\n     /* Tell assembler to change to section NAME with attributes FLAGS.\n        If DECL is non-NULL, it is the VAR_DECL or FUNCTION_DECL with\n        which this section is associated.  */\n     void (* named_section) (const char *name, unsigned int flags, tree decl);\n \n-    /* Switch to the section that holds the exception table.  */\n-    void (* exception_section) (void);\n-\n-    /* Switch to the section that holds the exception frames.  */\n-    void (* eh_frame_section) (void);\n-\n-    /* Select and switch to a section for EXP.  It may be a DECL or a\n-       constant.  RELOC is nonzero if runtime relocations must be applied;\n-       bit 1 will be set if the runtime relocations require non-local\n-       name resolution.  ALIGN is the required alignment of the data.  */\n-    void (* select_section) (tree, int, unsigned HOST_WIDE_INT);\n+    /* Return a section for EXP.  It may be a DECL or a constant.  RELOC\n+       is nonzero if runtime relocations must be applied; bit 1 will be\n+       set if the runtime relocations require non-local name resolution.\n+       ALIGN is the required alignment of the data.  */\n+    section *(* select_section) (tree, int, unsigned HOST_WIDE_INT);\n \n-    /* Select and switch to a section for X with MODE.  ALIGN is\n-       the desired alignment of the data.  */\n-    void (* select_rtx_section) (enum machine_mode, rtx,\n-\t\t\t\t unsigned HOST_WIDE_INT);\n+    /* Return a section for X.  MODE is X's mode and ALIGN is its\n+       alignment in bits.  */\n+    section *(* select_rtx_section) (enum machine_mode, rtx,\n+\t\t\t\t     unsigned HOST_WIDE_INT);\n \n     /* Select a unique section name for DECL.  RELOC is the same as\n        for SELECT_SECTION.  */\n     void (* unique_section) (tree, int);\n \n-    /* Tell assembler to switch to the readonly data section associated\n-       with function DECL.  */\n-    void (* function_rodata_section) (tree);\n+    /* Return the readonly data section associated with function DECL.  */\n+    section *(* function_rodata_section) (tree);\n \n     /* Output a constructor for a symbol with a given priority.  */\n     void (* constructor) (rtx, int);"}, {"sha": "4285d15aa760c47ec5e7192483d0416f6232d0a7", "filename": "gcc/varasm.c", "status": "modified", "additions": 319, "deletions": 427, "changes": 746, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -127,9 +127,6 @@ static unsigned min_align (unsigned, unsigned);\n static void output_constructor (tree, unsigned HOST_WIDE_INT, unsigned int);\n static void globalize_decl (tree);\n static void maybe_assemble_visibility (tree);\n-static int in_named_entry_eq (const void *, const void *);\n-static hashval_t in_named_entry_hash (const void *);\n-static void initialize_cold_section_name (void);\n #ifdef BSS_SECTION_ASM_OP\n #ifdef ASM_OUTPUT_BSS\n static void asm_output_bss (FILE *, tree, const char *,\n@@ -146,8 +143,35 @@ static bool asm_emit_uninitialised (tree, const char*,\n \t\t\t\t    unsigned HOST_WIDE_INT);\n static void mark_weak (tree);\n \f\n-static GTY(()) enum in_section in_section = no_section;\n-enum in_section last_text_section;\n+/* Well-known sections, each one associated with some sort of *_ASM_OP.  */\n+section *text_section;\n+section *data_section;\n+section *readonly_data_section;\n+section *sdata_section;\n+section *ctors_section;\n+section *dtors_section;\n+section *bss_section;\n+section *sbss_section;\n+section *init_section;\n+section *fini_section;\n+\n+/* The section that holds the main exception table.  */\n+section *exception_section;\n+\n+/* The section that holds the DWARF2 frame unwind information.  If it\n+   is null, we will place the unwind information in the data section\n+   and emit special labels to guide collect2.  */\n+section *eh_frame_section;\n+\n+/* asm_out_file's current section.  This is NULL if no section has yet\n+   been selected or if we lose track of what the current section is.  */\n+section *in_section;\n+\n+/* The last text section used by asm_out_file.  */\n+section *last_text_section;\n+\n+/* A linked list of all the unnamed sections.  */\n+static GTY(()) section *unnamed_sections;\n \n /* Return a nonzero value if DECL has a section attribute.  */\n #ifndef IN_NAMED_SECTION\n@@ -156,25 +180,81 @@ enum in_section last_text_section;\n    && DECL_SECTION_NAME (DECL) != NULL_TREE)\n #endif\n \n-/* Text of section name when in_section == in_named.  */\n-static GTY(()) const char *in_named_name;\n-const char *last_text_section_name;\n+/* Hash table of named sections.  */\n+static GTY((param_is (section))) htab_t section_htab;\n \n-/* Hash table of flags that have been used for a particular named section.  */\n+/* Helper routines for maintaining section_htab.  */\n \n-struct in_named_entry GTY(())\n+static int\n+section_entry_eq (const void *p1, const void *p2)\n {\n-  const char *name;\n-  unsigned int flags;\n-  bool declared;\n-};\n+  const section *old = p1;\n+  const char *new = p2;\n \n-static GTY((param_is (struct in_named_entry))) htab_t in_named_htab;\n+  return strcmp (old->named.name, new) == 0;\n+}\n \n-/* Define functions like text_section for any extra sections.  */\n-#ifdef EXTRA_SECTION_FUNCTIONS\n-EXTRA_SECTION_FUNCTIONS\n-#endif\n+static hashval_t\n+section_entry_hash (const void *p)\n+{\n+  const section *old = p;\n+  return htab_hash_string (old->named.name);\n+}\n+\n+/* Return a new unnamed section with the given fields.  */\n+\n+section *\n+get_unnamed_section (unsigned int flags, void (*callback) (const void *),\n+\t\t     const void *data)\n+{\n+  section *sect;\n+\n+  sect = ggc_alloc (sizeof (struct unnamed_section));\n+  sect->unnamed.common.flags = flags;\n+  sect->unnamed.callback = callback;\n+  sect->unnamed.data = data;\n+  sect->unnamed.next = unnamed_sections;\n+\n+  unnamed_sections = sect;\n+  return sect;\n+}\n+\n+/* Return the named section structure associated with NAME.  Create\n+   a new section with the given fields if no such structure exists.  */\n+\n+section *\n+get_section (const char *name, unsigned int flags, tree decl)\n+{\n+  section *sect, **slot;\n+\n+  slot = (section **)\n+    htab_find_slot_with_hash (section_htab, name,\n+\t\t\t      htab_hash_string (name), INSERT);\n+  if (*slot == NULL)\n+    {\n+      sect = ggc_alloc (sizeof (struct named_section));\n+      sect->named.common.flags = flags | SECTION_NAMED;\n+      sect->named.name = ggc_strdup (name);\n+      sect->named.decl = decl;\n+      *slot = sect;\n+    }\n+  else\n+    {\n+      sect = *slot;\n+      if ((sect->common.flags & ~(SECTION_DECLARED | SECTION_NAMED)) != flags\n+\t  && ((sect->common.flags | flags) & SECTION_OVERRIDE) == 0)\n+\t{\n+\t  /* Sanity check user variables for flag changes.  */\n+\t  if (decl == 0)\n+\t    decl = sect->named.decl;\n+\t  if (decl)\n+\t    error (\"%+D causes a section type conflict\", decl);\n+\t  else\n+\t    gcc_unreachable ();\n+\t}\n+    }\n+  return sect;\n+}\n \n static void\n initialize_cold_section_name (void)\n@@ -202,275 +282,62 @@ initialize_cold_section_name (void)\n     cfun->unlikely_text_section_name =  UNLIKELY_EXECUTED_TEXT_SECTION_NAME;\n }\n \n-/* Tell assembler to switch to text section.  */\n-\n-void\n-text_section (void)\n-{\n-  if (in_section != in_text)\n-    {\n-      in_section = in_text;\n-      last_text_section = in_text;\n-      fprintf (asm_out_file, \"%s\\n\", TEXT_SECTION_ASM_OP);\n-    }\n-}\n-\n /* Tell assembler to switch to unlikely-to-be-executed text section.  */\n \n-void\n+section *\n unlikely_text_section (void)\n {\n   if (cfun)\n     {\n       if (!cfun->unlikely_text_section_name)\n \tinitialize_cold_section_name ();\n \n-      if (flag_function_sections\n-\t  || ((in_section != in_unlikely_executed_text)\n-\t      &&  (in_section != in_named \n-\t\t   || (strcmp (in_named_name, cfun->unlikely_text_section_name) \n-\t\t       != 0))))\n-\t{\n-\t  named_section (NULL_TREE, cfun->unlikely_text_section_name, 0);\n-\t  in_section = in_unlikely_executed_text;\n-\t  last_text_section = in_unlikely_executed_text;\n-\t}\n-    }\n-  else\n-    {\n-      named_section (NULL_TREE, UNLIKELY_EXECUTED_TEXT_SECTION_NAME, 0);\n-      in_section = in_unlikely_executed_text;\n-      last_text_section = in_unlikely_executed_text;\n-    }\n-}\n-\n-/* Tell assembler to switch to data section.  */\n-\n-void\n-data_section (void)\n-{\n-  if (in_section != in_data)\n-    {\n-      in_section = in_data;\n-      fprintf (asm_out_file, \"%s\\n\", DATA_SECTION_ASM_OP);\n-    }\n-}\n-\n-/* Tell assembler to switch to read-only data section.  This is normally\n-   the text section.  */\n-\n-void\n-readonly_data_section (void)\n-{\n-#ifdef READONLY_DATA_SECTION\n-  READONLY_DATA_SECTION ();  /* Note this can call data_section.  */\n-#else\n-#ifdef READONLY_DATA_SECTION_ASM_OP\n-  if (in_section != in_readonly_data)\n-    {\n-      in_section = in_readonly_data;\n-      fputs (READONLY_DATA_SECTION_ASM_OP, asm_out_file);\n-      fputc ('\\n', asm_out_file);\n-    }\n-#else\n-  text_section ();\n-#endif\n-#endif\n-}\n-\n-/* Determine if we're in the text section.  */\n-\n-int\n-in_text_section (void)\n-{\n-  return in_section == in_text;\n-}\n-\n-/* Determine if we're in the unlikely-to-be-executed text section.  */\n-\n-int\n-in_unlikely_text_section (void)\n-{\n-  bool ret_val;\n-\n-  if (cfun)\n-    {\n-      ret_val = ((in_section == in_unlikely_executed_text)\n-\t\t || (in_section == in_named\n-\t\t     && cfun->unlikely_text_section_name\n-\t\t     && strcmp (in_named_name, \n-\t\t\t\tcfun->unlikely_text_section_name) == 0));\n+      return get_named_section (NULL, cfun->unlikely_text_section_name, 0);\n     }\n   else\n-    {\n-      ret_val = ((in_section == in_unlikely_executed_text)\n-\t\t || (in_section == in_named\n-\t\t     && strcmp (in_named_name,\n-\t\t\t\tUNLIKELY_EXECUTED_TEXT_SECTION_NAME) == 0));\n-    }\n-\n-  return ret_val;\n-}\n-\n-/* Determine if we're in the data section.  */\n-\n-int\n-in_data_section (void)\n-{\n-  return in_section == in_data;\n+    return get_named_section (NULL, UNLIKELY_EXECUTED_TEXT_SECTION_NAME, 0);\n }\n \n-/* Helper routines for maintaining in_named_htab.  */\n-\n-static int\n-in_named_entry_eq (const void *p1, const void *p2)\n-{\n-  const struct in_named_entry *old = p1;\n-  const char *new = p2;\n-\n-  return strcmp (old->name, new) == 0;\n-}\n-\n-static hashval_t\n-in_named_entry_hash (const void *p)\n-{\n-  const struct in_named_entry *old = p;\n-  return htab_hash_string (old->name);\n-}\n-\n-/* If SECTION has been seen before as a named section, return the flags\n-   that were used.  Otherwise, return 0.  Note, that 0 is a perfectly valid\n-   set of flags for a section to have, so 0 does not mean that the section\n-   has not been seen.  */\n-\n-static unsigned int\n-get_named_section_flags (const char *section)\n-{\n-  struct in_named_entry **slot;\n-\n-  slot = (struct in_named_entry **)\n-    htab_find_slot_with_hash (in_named_htab, section,\n-\t\t\t      htab_hash_string (section), NO_INSERT);\n-\n-  return slot ? (*slot)->flags : 0;\n-}\n-\n-/* Returns true if the section has been declared before.   Sets internal\n-   flag on this section in in_named_hash so subsequent calls on this\n-   section will return false.  */\n+/* When called within a function context, return true if the function\n+   has been assigned a cold text section and if SECT is that section.\n+   When called outside a function context, return true if SECT is the\n+   default cold section.  */\n \n bool\n-named_section_first_declaration (const char *name)\n+unlikely_text_section_p (section *sect)\n {\n-  struct in_named_entry **slot;\n+  const char *name;\n \n-  slot = (struct in_named_entry **)\n-    htab_find_slot_with_hash (in_named_htab, name,\n-\t\t\t      htab_hash_string (name), NO_INSERT);\n-  if (! (*slot)->declared)\n-    {\n-      (*slot)->declared = true;\n-      return true;\n-    }\n+  if (cfun)\n+    name = cfun->unlikely_text_section_name;\n   else\n-    {\n-      return false;\n-    }\n-}\n-\n-\n-/* Record FLAGS for SECTION.  If SECTION was previously recorded with a\n-   different set of flags, return false.  */\n-\n-bool\n-set_named_section_flags (const char *section, unsigned int flags)\n-{\n-  struct in_named_entry **slot, *entry;\n+    name = UNLIKELY_EXECUTED_TEXT_SECTION_NAME;\n \n-  slot = (struct in_named_entry **)\n-    htab_find_slot_with_hash (in_named_htab, section,\n-\t\t\t      htab_hash_string (section), INSERT);\n-  entry = *slot;\n-\n-  if (!entry)\n-    {\n-      entry = ggc_alloc (sizeof (*entry));\n-      *slot = entry;\n-      entry->name = ggc_strdup (section);\n-      entry->flags = flags;\n-      entry->declared = false;\n-    }\n-  else if (entry->flags != flags)\n-    return false;\n-\n-  return true;\n+  return (name\n+\t  && sect\n+\t  && (sect->common.flags & SECTION_NAMED) != 0\n+\t  && strcmp (name, sect->named.name) == 0);\n }\n \n-/* Tell assembler to change to section NAME with attributes FLAGS.  If\n-   DECL is non-NULL, it is the VAR_DECL or FUNCTION_DECL with which\n-   this section is associated.  */\n+/* Return a section with a particular name and with whatever SECTION_*\n+   flags section_type_flags deems appropriate.  The name of the section\n+   is taken from NAME if nonnull, otherwise it is taken from DECL's\n+   DECL_SECTION_NAME.  DECL is the decl associated with the section\n+   (see the section comment for details) and RELOC is as for\n+   section_type_flags.  */\n \n-void\n-named_section_real (const char *name, unsigned int flags, tree decl)\n-{\n-  if (in_section != in_named || strcmp (name, in_named_name) != 0)\n-    {\n-      bool unchanged = set_named_section_flags (name, flags);\n-\n-      gcc_assert (unchanged);\n-\n-      targetm.asm_out.named_section (name, flags, decl);\n-\n-      if (flags & SECTION_FORGET)\n-\tin_section = no_section;\n-      else\n-\t{\n-\t  in_named_name = ggc_strdup (name);\n-\t  in_section = in_named;\n-\t}\n-    }\n-\n-  if (in_text_section () || in_unlikely_text_section ())\n-    {\n-      last_text_section = in_section;\n-      last_text_section_name = name;\n-    }\n-}\n-\n-/* Tell assembler to change to section NAME for DECL.\n-   If DECL is NULL, just switch to section NAME.\n-   If NAME is NULL, get the name from DECL.\n-   If RELOC is 1, the initializer for DECL contains relocs.  */\n-\n-void\n-named_section (tree decl, const char *name, int reloc)\n+section *\n+get_named_section (tree decl, const char *name, int reloc)\n {\n   unsigned int flags;\n \n   gcc_assert (!decl || DECL_P (decl));\n   if (name == NULL)\n     name = TREE_STRING_POINTER (DECL_SECTION_NAME (decl));\n \n-  if (strcmp (name, UNLIKELY_EXECUTED_TEXT_SECTION_NAME) == 0\n-      && cfun\n-      && ! cfun->unlikely_text_section_name)\n-    cfun->unlikely_text_section_name = UNLIKELY_EXECUTED_TEXT_SECTION_NAME;\n-\n   flags = targetm.section_type_flags (decl, name, reloc);\n \n-  /* Sanity check user variables for flag changes.  Non-user\n-     section flag changes will die in named_section_flags.\n-     However, don't complain if SECTION_OVERRIDE is set.\n-     We trust that the setter knows that it is safe to ignore\n-     the default flags for this decl.  */\n-  if (decl && ! set_named_section_flags (name, flags))\n-    {\n-      flags = get_named_section_flags (name);\n-      if ((flags & SECTION_OVERRIDE) == 0)\n-\terror (\"%+D causes a section type conflict\", decl);\n-    }\n-\n-  named_section_real (name, flags, decl);\n+  return get_section (name, flags, decl);\n }\n \n /* If required, set DECL_SECTION_NAME to a unique name.  */\n@@ -488,18 +355,6 @@ resolve_unique_section (tree decl, int reloc ATTRIBUTE_UNUSED,\n \n #ifdef BSS_SECTION_ASM_OP\n \n-/* Tell the assembler to switch to the bss section.  */\n-\n-void\n-bss_section (void)\n-{\n-  if (in_section != in_bss)\n-    {\n-      fprintf (asm_out_file, \"%s\\n\", BSS_SECTION_ASM_OP);\n-      in_section = in_bss;\n-    }\n-}\n-\n #ifdef ASM_OUTPUT_BSS\n \n /* Utility function for ASM_OUTPUT_BSS for targets to use if\n@@ -514,7 +369,7 @@ asm_output_bss (FILE *file, tree decl ATTRIBUTE_UNUSED,\n \t\tunsigned HOST_WIDE_INT rounded)\n {\n   targetm.asm_out.globalize_label (file, name);\n-  bss_section ();\n+  switch_to_section (bss_section);\n #ifdef ASM_DECLARE_OBJECT_NAME\n   last_assemble_variable_decl = decl;\n   ASM_DECLARE_OBJECT_NAME (file, name, decl);\n@@ -539,7 +394,7 @@ asm_output_aligned_bss (FILE *file, tree decl ATTRIBUTE_UNUSED,\n \t\t\tconst char *name, unsigned HOST_WIDE_INT size,\n \t\t\tint align)\n {\n-  bss_section ();\n+  switch_to_section (bss_section);\n   ASM_OUTPUT_ALIGN (file, floor_log2 (align / BITS_PER_UNIT));\n #ifdef ASM_DECLARE_OBJECT_NAME\n   last_assemble_variable_decl = decl;\n@@ -555,12 +410,12 @@ asm_output_aligned_bss (FILE *file, tree decl ATTRIBUTE_UNUSED,\n \n #endif /* BSS_SECTION_ASM_OP */\n \n-/* Switch to the section for function DECL.\n+/* Return the section for function DECL.\n \n-   If DECL is NULL_TREE, switch to the text section.  We can be passed\n+   If DECL is NULL_TREE, return the text section.  We can be passed\n    NULL_TREE under some circumstances by dbxout.c at least.  */\n \n-void\n+section *\n function_section (tree decl)\n {\n   int reloc = 0;\n@@ -569,44 +424,38 @@ function_section (tree decl)\n     reloc = 1;\n   \n #ifdef USE_SELECT_SECTION_FOR_FUNCTIONS\n-  targetm.asm_out.select_section (decl, reloc, DECL_ALIGN (decl));\n+  return targetm.asm_out.select_section (decl, reloc, DECL_ALIGN (decl));\n #else\n   if (decl != NULL_TREE\n       && DECL_SECTION_NAME (decl) != NULL_TREE\n       && targetm.have_named_sections)\n-    named_section (decl, (char *) 0, 0);\n+    return get_named_section (decl, NULL, 0);\n   else\n-    text_section ();\n+    return text_section;\n #endif\n }\n \n-void\n-current_function_section (tree decl)\n+section *\n+current_function_section (void)\n {\n #ifdef USE_SELECT_SECTION_FOR_FUNCTIONS\n   int reloc = 0; \n \n-  if (in_unlikely_text_section () \n-      || last_text_section == in_unlikely_executed_text)\n+  if (unlikely_text_section_p (last_text_section))\n     reloc = 1;\n  \n-  targetm.asm_out.select_section (decl, reloc, DECL_ALIGN (decl));\n+  return targetm.asm_out.select_section (current_function_decl, reloc,\n+\t\t\t\t\t DECL_ALIGN (current_function_decl));\n #else\n-  if (last_text_section == in_unlikely_executed_text)\n-    unlikely_text_section ();\n-  else if (last_text_section == in_text)\n-    text_section ();\n-  else if (last_text_section == in_named\n-\t   && targetm.have_named_sections)\n-    named_section (NULL_TREE, last_text_section_name, 0);\n-  else\n-    function_section (decl);\n+  if (last_text_section)\n+    return last_text_section;\n+  return function_section (current_function_decl);\n #endif\n }\n \n-/* Switch to read-only data section associated with function DECL.  */\n+/* Return the read-only data section associated with function DECL.  */\n \n-void\n+section *\n default_function_rodata_section (tree decl)\n {\n   if (decl != NULL_TREE && DECL_SECTION_NAME (decl))\n@@ -619,9 +468,8 @@ default_function_rodata_section (tree decl)\n \t  char* rname = alloca (len);\n          \n \t  strcpy (rname, \".rodata\");\n-\t  strcat (rname, name + 5); \n-          named_section_real (rname, SECTION_LINKONCE, decl);\n-\t  return;\n+\t  strcat (rname, name + 5);\n+\t  return get_section (rname, SECTION_LINKONCE, decl);\n \t}\n       /* For .gnu.linkonce.t.foo we want to use .gnu.linkonce.r.foo.  */\n       else if (DECL_ONE_ONLY (decl)\n@@ -632,8 +480,7 @@ default_function_rodata_section (tree decl)\n \n \t  memcpy (rname, name, len);\n \t  rname[14] = 'r';\n-\t  named_section_real (rname, SECTION_LINKONCE, decl);\n-\t  return;\n+\t  return get_section (rname, SECTION_LINKONCE, decl);\n \t}\n       /* For .text.foo we want to use .rodata.foo.  */\n       else if (flag_function_sections && flag_data_sections\n@@ -644,22 +491,21 @@ default_function_rodata_section (tree decl)\n \n \t  memcpy (rname, \".rodata\", 7);\n \t  memcpy (rname + 7, name + 5, len - 5);\n-\t  named_section_flags (rname, 0);\n-\t  return;\n+\t  return get_section (rname, 0, decl);\n \t}\n     }\n \n-  readonly_data_section ();\n+  return readonly_data_section;\n }\n \n-/* Switch to read-only data section associated with function DECL\n+/* Return the read-only data section associated with function DECL\n    for targets where that section should be always the single\n    readonly data section.  */\n \n-void\n+section *\n default_no_function_rodata_section (tree decl ATTRIBUTE_UNUSED)\n {\n-  readonly_data_section ();\n+  return readonly_data_section;\n }\n \n /* Switch to section for variable DECL.  RELOC is the same as the\n@@ -669,14 +515,15 @@ void\n variable_section (tree decl, int reloc)\n {\n   if (IN_NAMED_SECTION (decl))\n-    named_section (decl, NULL, reloc);\n+    switch_to_section (get_named_section (decl, NULL, reloc));\n   else\n-    targetm.asm_out.select_section (decl, reloc, DECL_ALIGN (decl));\n+    switch_to_section (targetm.asm_out.select_section (decl, reloc,\n+\t\t\t\t\t\t       DECL_ALIGN (decl)));\n }\n \n-/* Tell assembler to switch to the section for string merging.  */\n+/* Return the section to use for string merging.  */\n \n-void\n+static section *\n mergeable_string_section (tree decl ATTRIBUTE_UNUSED,\n \t\t\t  unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED,\n \t\t\t  unsigned int flags ATTRIBUTE_UNUSED)\n@@ -719,37 +566,17 @@ mergeable_string_section (tree decl ATTRIBUTE_UNUSED,\n \t      sprintf (name, \".rodata.str%d.%d\", modesize / 8,\n \t\t       (int) (align / 8));\n \t      flags |= (modesize / 8) | SECTION_MERGE | SECTION_STRINGS;\n-\t      if (!i && modesize < align)\n-\t\t{\n-\t\t  /* A \"\" string with requested alignment greater than\n-\t\t     character size might cause a problem:\n-\t\t     if some other string required even bigger\n-\t\t     alignment than \"\", then linker might think the\n-\t\t     \"\" is just part of padding after some other string\n-\t\t     and not put it into the hash table initially.\n-\t\t     But this means \"\" could have smaller alignment\n-\t\t     than requested.  */\n-#ifdef ASM_OUTPUT_SECTION_START\n-\t\t  named_section_flags (name, flags);\n-\t\t  ASM_OUTPUT_SECTION_START (asm_out_file);\n-#else\n-\t\t  readonly_data_section ();\n-#endif\n-\t\t  return;\n-\t\t}\n-\n-\t      named_section_flags (name, flags);\n-\t      return;\n+\t      return get_section (name, flags, NULL);\n \t    }\n \t}\n     }\n \n-  readonly_data_section ();\n+  return readonly_data_section;\n }\n \n-/* Tell assembler to switch to the section for constant merging.  */\n+/* Return the section to use for constant merging.  */\n \n-void\n+section *\n mergeable_constant_section (enum machine_mode mode ATTRIBUTE_UNUSED,\n \t\t\t    unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED,\n \t\t\t    unsigned int flags ATTRIBUTE_UNUSED)\n@@ -768,11 +595,9 @@ mergeable_constant_section (enum machine_mode mode ATTRIBUTE_UNUSED,\n \n       sprintf (name, \".rodata.cst%d\", (int) (align / 8));\n       flags |= (align / 8) | SECTION_MERGE;\n-      named_section_flags (name, flags);\n-      return;\n+      return get_section (name, flags, NULL);\n     }\n-\n-  readonly_data_section ();\n+  return readonly_data_section;\n }\n \f\n /* Given NAME, a putative register name, discard any customary prefixes.  */\n@@ -1092,28 +917,17 @@ default_named_section_asm_out_destructor (rtx symbol, int priority)\n       section = buf;\n     }\n \n-  named_section_flags (section, SECTION_WRITE);\n+  switch_to_section (get_section (section, SECTION_WRITE, NULL));\n   assemble_align (POINTER_SIZE);\n   assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n }\n \n #ifdef DTORS_SECTION_ASM_OP\n-void\n-dtors_section (void)\n-{\n-  if (in_section != in_dtors)\n-    {\n-      in_section = in_dtors;\n-      fputs (DTORS_SECTION_ASM_OP, asm_out_file);\n-      fputc ('\\n', asm_out_file);\n-    }\n-}\n-\n void\n default_dtor_section_asm_out_destructor (rtx symbol,\n \t\t\t\t\t int priority ATTRIBUTE_UNUSED)\n {\n-  dtors_section ();\n+  switch_to_section (dtors_section);\n   assemble_align (POINTER_SIZE);\n   assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n }\n@@ -1153,28 +967,17 @@ default_named_section_asm_out_constructor (rtx symbol, int priority)\n       section = buf;\n     }\n \n-  named_section_flags (section, SECTION_WRITE);\n+  switch_to_section (get_section (section, SECTION_WRITE, NULL));\n   assemble_align (POINTER_SIZE);\n   assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n }\n \n #ifdef CTORS_SECTION_ASM_OP\n-void\n-ctors_section (void)\n-{\n-  if (in_section != in_ctors)\n-    {\n-      in_section = in_ctors;\n-      fputs (CTORS_SECTION_ASM_OP, asm_out_file);\n-      fputc ('\\n', asm_out_file);\n-    }\n-}\n-\n void\n default_ctor_section_asm_out_constructor (rtx symbol,\n \t\t\t\t\t  int priority ATTRIBUTE_UNUSED)\n {\n-  ctors_section ();\n+  switch_to_section (ctors_section);\n   assemble_align (POINTER_SIZE);\n   assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n }\n@@ -1289,7 +1092,7 @@ assemble_start_function (tree decl, const char *fnname)\n       if (!current_function_is_thunk\n \t  && BB_PARTITION (ENTRY_BLOCK_PTR->next_bb) == BB_COLD_PARTITION)\n \t{\n-\t  text_section ();\n+\t  switch_to_section (text_section);\n \t  assemble_align (FUNCTION_BOUNDARY);\n \t  ASM_OUTPUT_LABEL (asm_out_file, cfun->hot_section_label);\n \t  hot_label_written = true;\n@@ -1311,11 +1114,11 @@ assemble_start_function (tree decl, const char *fnname)\n \tfirst_function_block_is_cold = true;\n     }\n \n-  last_text_section = no_section;\n+  last_text_section = NULL;\n \n   /* Switch to the correct text section for the start of the function.  */\n \n-  function_section (decl);\n+  switch_to_section (function_section (decl));\n   if (flag_reorder_blocks_and_partition \n       && !hot_label_written)\n     ASM_OUTPUT_LABEL (asm_out_file, cfun->hot_section_label);\n@@ -1381,30 +1184,29 @@ assemble_end_function (tree decl, const char *fnname)\n #ifdef ASM_DECLARE_FUNCTION_SIZE\n   /* We could have switched section in the middle of the function.  */\n   if (flag_reorder_blocks_and_partition)\n-    function_section (decl);\n+    switch_to_section (function_section (decl));\n   ASM_DECLARE_FUNCTION_SIZE (asm_out_file, fnname, decl);\n #endif\n   if (! CONSTANT_POOL_BEFORE_FUNCTION)\n     {\n       output_constant_pool (fnname, decl);\n-      function_section (decl);\t/* need to switch back */\n+      switch_to_section (function_section (decl)); /* need to switch back */\n     }\n   /* Output labels for end of hot/cold text sections (to be used by\n      debug info.)  */\n   if (flag_reorder_blocks_and_partition)\n     {\n-      enum in_section save_text_section;\n+      section *save_text_section;\n \n       save_text_section = in_section;\n       unlikely_text_section ();\n       ASM_OUTPUT_LABEL (asm_out_file, cfun->cold_section_end_label);\n       if (first_function_block_is_cold)\n-\ttext_section ();\n+\tswitch_to_section (text_section);\n       else\n-\tfunction_section (decl);\n+\tswitch_to_section (function_section (decl));\n       ASM_OUTPUT_LABEL (asm_out_file, cfun->hot_section_end_label);\n-      if (save_text_section == in_unlikely_executed_text)\n-\tunlikely_text_section ();\n+      switch_to_section (save_text_section);\n     }\n }\n \f\n@@ -1420,8 +1222,7 @@ assemble_zeros (unsigned HOST_WIDE_INT size)\n #ifdef ASM_NO_SKIP_IN_TEXT\n   /* The `space' pseudo in the text section outputs nop insns rather than 0s,\n      so we must output 0s explicitly in the text section.  */\n-  if ((ASM_NO_SKIP_IN_TEXT && in_text_section ())\n-      || (ASM_NO_SKIP_IN_TEXT && in_unlikely_text_section ()))\n+  if (ASM_NO_SKIP_IN_TEXT && (in_section->common.flags & SECTION_CODE) != 0)\n     {\n       unsigned HOST_WIDE_INT i;\n       for (i = 0; i < size; i++)\n@@ -1790,7 +1591,7 @@ assemble_variable (tree decl, int top_level ATTRIBUTE_UNUSED,\n   variable_section (decl, reloc);\n \n   /* dbxout.c needs to know this.  */\n-  if (in_text_section () || in_unlikely_text_section ())\n+  if (in_section && (in_section->common.flags & SECTION_CODE) != 0)\n     DECL_IN_TEXT_SECTION (decl) = 1;\n \n   /* Output the alignment of this data.  */\n@@ -2075,7 +1876,7 @@ assemble_static_space (unsigned HOST_WIDE_INT size)\n \n #if 0\n   if (flag_shared_data)\n-    data_section ();\n+    switch_to_section (data_section);\n #endif\n \n   ASM_GENERATE_INTERNAL_LABEL (name, \"LF\", const_labelno);\n@@ -2128,9 +1929,9 @@ assemble_trampoline_template (void)\n   /* By default, put trampoline templates in read-only data section.  */\n \n #ifdef TRAMPOLINE_SECTION\n-  TRAMPOLINE_SECTION ();\n+  switch_to_section (TRAMPOLINE_SECTION);\n #else\n-  readonly_data_section ();\n+  switch_to_section (readonly_data_section);\n #endif\n \n   /* Write the assembler code to define one.  */\n@@ -2873,9 +2674,9 @@ output_constant_def_contents (rtx symbol)\n   TREE_ASM_WRITTEN (exp) = 1;\n \n   if (IN_NAMED_SECTION (exp))\n-    named_section (exp, NULL, reloc);\n+    switch_to_section (get_named_section (exp, NULL, reloc));\n   else\n-    targetm.asm_out.select_section (exp, reloc, align);\n+    switch_to_section (targetm.asm_out.select_section (exp, reloc, align));\n \n   if (align > BITS_PER_UNIT)\n     {\n@@ -3346,7 +3147,8 @@ output_constant_pool_1 (struct constant_descriptor_rtx *desc)\n     }\n \n   /* First switch to correct section.  */\n-  targetm.asm_out.select_rtx_section (desc->mode, x, desc->align);\n+  switch_to_section (targetm.asm_out.select_rtx_section (desc->mode, x,\n+\t\t\t\t\t\t\t desc->align));\n \n #ifdef ASM_OUTPUT_SPECIAL_POOL_ENTRY\n   ASM_OUTPUT_SPECIAL_POOL_ENTRY (asm_out_file, x, desc->mode,\n@@ -3364,8 +3166,8 @@ output_constant_pool_1 (struct constant_descriptor_rtx *desc)\n   /* Make sure all constants in SECTION_MERGE and not SECTION_STRINGS\n      sections have proper size.  */\n   if (desc->align > GET_MODE_BITSIZE (desc->mode)\n-      && in_section == in_named\n-      && get_named_section_flags (in_named_name) & SECTION_MERGE)\n+      && in_section\n+      && (in_section->common.flags & SECTION_MERGE))\n     assemble_align (desc->align);\n \n #ifdef ASM_OUTPUT_SPECIAL_POOL_ENTRY\n@@ -5003,12 +4805,73 @@ make_decl_one_only (tree decl)\n void\n init_varasm_once (void)\n {\n-  in_named_htab = htab_create_ggc (31, in_named_entry_hash,\n-\t\t\t\t   in_named_entry_eq, NULL);\n+  section_htab = htab_create_ggc (31, section_entry_hash,\n+\t\t\t\t  section_entry_eq, NULL);\n   const_desc_htab = htab_create_ggc (1009, const_desc_hash,\n \t\t\t\t     const_desc_eq, NULL);\n \n   const_alias_set = new_alias_set ();\n+\n+#ifdef TEXT_SECTION_ASM_OP\n+  text_section = get_unnamed_section (SECTION_CODE, output_section_asm_op,\n+\t\t\t\t      TEXT_SECTION_ASM_OP);\n+#endif\n+\n+#ifdef DATA_SECTION_ASM_OP\n+  data_section = get_unnamed_section (SECTION_WRITE, output_section_asm_op,\n+\t\t\t\t      DATA_SECTION_ASM_OP);\n+#endif\n+\n+#ifdef SDATA_SECTION_ASM_OP\n+  sdata_section = get_unnamed_section (SECTION_WRITE, output_section_asm_op,\n+\t\t\t\t       SDATA_SECTION_ASM_OP);\n+#endif\n+\n+#ifdef READONLY_DATA_SECTION_ASM_OP\n+  readonly_data_section = get_unnamed_section (0, output_section_asm_op,\n+\t\t\t\t\t       READONLY_DATA_SECTION_ASM_OP);\n+#endif\n+\n+#ifdef CTORS_SECTION_ASM_OP\n+  ctors_section = get_unnamed_section (0, output_section_asm_op,\n+\t\t\t\t       CTORS_SECTION_ASM_OP);\n+#endif\n+\n+#ifdef DTORS_SECTION_ASM_OP\n+  dtors_section = get_unnamed_section (0, output_section_asm_op,\n+\t\t\t\t       DTORS_SECTION_ASM_OP);\n+#endif\n+\n+#ifdef BSS_SECTION_ASM_OP\n+  bss_section = get_unnamed_section (SECTION_WRITE | SECTION_BSS,\n+\t\t\t\t     output_section_asm_op,\n+\t\t\t\t     BSS_SECTION_ASM_OP);\n+#endif\n+\n+#ifdef SBSS_SECTION_ASM_OP\n+  sbss_section = get_unnamed_section (SECTION_WRITE | SECTION_BSS,\n+\t\t\t\t      output_section_asm_op,\n+\t\t\t\t      SBSS_SECTION_ASM_OP);\n+#endif\n+\n+#ifdef INIT_SECTION_ASM_OP\n+  init_section = get_unnamed_section (SECTION_CODE, output_section_asm_op,\n+\t\t\t\t      INIT_SECTION_ASM_OP);\n+#endif\n+\n+#ifdef FINI_SECTION_ASM_OP\n+  fini_section = get_unnamed_section (SECTION_CODE, output_section_asm_op,\n+\t\t\t\t      FINI_SECTION_ASM_OP);\n+#endif\n+\n+  targetm.asm_out.init_sections ();\n+\n+  if (readonly_data_section == NULL)\n+    readonly_data_section = text_section;\n+  if (exception_section == NULL)\n+    exception_section = default_exception_section ();\n+  if (eh_frame_section == NULL)\n+    eh_frame_section = default_eh_frame_section ();\n }\n \n enum tls_model\n@@ -5135,7 +4998,7 @@ default_elf_asm_named_section (const char *name, unsigned int flags,\n      part of a COMDAT groups, in which case GAS requires the full\n      declaration every time.  */\n   if (!(HAVE_COMDAT_GROUP && (flags & SECTION_LINKONCE))\n-      && ! named_section_first_declaration (name))\n+      && (flags & SECTION_DECLARED))\n     {\n       fprintf (asm_out_file, \"\\t.section\\t%s\\n\", name);\n       return;\n@@ -5223,34 +5086,29 @@ default_pe_asm_named_section (const char *name, unsigned int flags,\n \f\n /* The lame default section selector.  */\n \n-void\n+section *\n default_select_section (tree decl, int reloc,\n \t\t\tunsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED)\n {\n-  bool readonly = false;\n-\n   if (DECL_P (decl))\n     {\n       if (decl_readonly_section (decl, reloc))\n-\treadonly = true;\n+\treturn readonly_data_section;\n     }\n   else if (TREE_CODE (decl) == CONSTRUCTOR)\n     {\n       if (! ((flag_pic && reloc)\n \t     || !TREE_READONLY (decl)\n \t     || TREE_SIDE_EFFECTS (decl)\n \t     || !TREE_CONSTANT (decl)))\n-\treadonly = true;\n+\treturn readonly_data_section;\n     }\n   else if (TREE_CODE (decl) == STRING_CST)\n-    readonly = true;\n+    return readonly_data_section;\n   else if (! (flag_pic && reloc))\n-    readonly = true;\n+    return readonly_data_section;\n \n-  if (readonly)\n-    readonly_data_section ();\n-  else\n-    data_section ();\n+  return data_section;\n }\n \n enum section_category\n@@ -5366,14 +5224,14 @@ decl_readonly_section_1 (tree decl, int reloc, int shlib)\n \n /* Select a section based on the above categorization.  */\n \n-void\n+section *\n default_elf_select_section (tree decl, int reloc,\n \t\t\t    unsigned HOST_WIDE_INT align)\n {\n-  default_elf_select_section_1 (decl, reloc, align, flag_pic);\n+  return default_elf_select_section_1 (decl, reloc, align, flag_pic);\n }\n \n-void\n+section *\n default_elf_select_section_1 (tree decl, int reloc,\n \t\t\t      unsigned HOST_WIDE_INT align, int shlib)\n {\n@@ -5384,23 +5242,18 @@ default_elf_select_section_1 (tree decl, int reloc,\n       /* We're not supposed to be called on FUNCTION_DECLs.  */\n       gcc_unreachable ();\n     case SECCAT_RODATA:\n-      readonly_data_section ();\n-      return;\n+      return readonly_data_section;\n     case SECCAT_RODATA_MERGE_STR:\n-      mergeable_string_section (decl, align, 0);\n-      return;\n+      return mergeable_string_section (decl, align, 0);\n     case SECCAT_RODATA_MERGE_STR_INIT:\n-      mergeable_string_section (DECL_INITIAL (decl), align, 0);\n-      return;\n+      return mergeable_string_section (DECL_INITIAL (decl), align, 0);\n     case SECCAT_RODATA_MERGE_CONST:\n-      mergeable_constant_section (DECL_MODE (decl), align, 0);\n-      return;\n+      return mergeable_constant_section (DECL_MODE (decl), align, 0);\n     case SECCAT_SRODATA:\n       sname = \".sdata2\";\n       break;\n     case SECCAT_DATA:\n-      data_section ();\n-      return;\n+      return data_section;\n     case SECCAT_DATA_REL:\n       sname = \".data.rel\";\n       break;\n@@ -5420,13 +5273,10 @@ default_elf_select_section_1 (tree decl, int reloc,\n       sname = \".tdata\";\n       break;\n     case SECCAT_BSS:\n-#ifdef BSS_SECTION_ASM_OP\n-      bss_section ();\n-      return;\n-#else\n+      if (bss_section)\n+\treturn bss_section;\n       sname = \".bss\";\n       break;\n-#endif\n     case SECCAT_SBSS:\n       sname = \".sbss\";\n       break;\n@@ -5439,7 +5289,7 @@ default_elf_select_section_1 (tree decl, int reloc,\n \n   if (!DECL_P (decl))\n     decl = NULL_TREE;\n-  named_section (decl, sname, reloc);\n+  return get_named_section (decl, sname, reloc);\n }\n \n /* Construct a unique section name based on the decl name and the\n@@ -5512,7 +5362,7 @@ default_unique_section_1 (tree decl, int reloc, int shlib)\n   DECL_SECTION_NAME (decl) = build_string (nlen + plen, string);\n }\n \n-void\n+section *\n default_select_rtx_section (enum machine_mode mode ATTRIBUTE_UNUSED,\n \t\t\t    rtx x,\n \t\t\t    unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED)\n@@ -5523,17 +5373,16 @@ default_select_rtx_section (enum machine_mode mode ATTRIBUTE_UNUSED,\n       case CONST:\n       case SYMBOL_REF:\n       case LABEL_REF:\n-\tdata_section ();\n-\treturn;\n+\treturn data_section;\n \n       default:\n \tbreak;\n       }\n \n-  readonly_data_section ();\n+  return readonly_data_section;\n }\n \n-void\n+section *\n default_elf_select_rtx_section (enum machine_mode mode, rtx x,\n \t\t\t\tunsigned HOST_WIDE_INT align)\n {\n@@ -5544,18 +5393,16 @@ default_elf_select_rtx_section (enum machine_mode mode, rtx x,\n       {\n       case CONST:\n       case SYMBOL_REF:\n-\tnamed_section (NULL_TREE, \".data.rel.ro\", 3);\n-\treturn;\n+\treturn get_named_section (NULL, \".data.rel.ro\", 3);\n \n       case LABEL_REF:\n-\tnamed_section (NULL_TREE, \".data.rel.ro.local\", 1);\n-\treturn;\n+\treturn get_named_section (NULL, \".data.rel.ro.local\", 1);\n \n       default:\n \tbreak;\n       }\n \n-  mergeable_constant_section (mode, align, 0);\n+  return mergeable_constant_section (mode, align, 0);\n }\n \n /* Set the generally applicable flags on the SYMBOL_REF for EXP.  */\n@@ -5728,7 +5575,52 @@ file_end_indicate_exec_stack (void)\n   if (trampolines_created)\n     flags |= SECTION_CODE;\n \n-  named_section_flags (\".note.GNU-stack\", flags);\n+  switch_to_section (get_section (\".note.GNU-stack\", flags, NULL));\n+}\n+\n+/* Output DIRECTIVE (a C string) followed by a newline.  This is used as\n+   a get_unnamed_section callback.  */\n+\n+void\n+output_section_asm_op (const void *directive)\n+{\n+  fprintf (asm_out_file, \"%s\\n\", (const char *) directive);\n+}\n+\n+/* Emit assembly code to switch to section NEW_SECTION.  Do nothing if\n+   the current section is NEW_SECTION.  */\n+\n+void\n+switch_to_section (section *new_section)\n+{\n+  if (in_section == new_section)\n+    return;\n+\n+  if (new_section->common.flags & SECTION_FORGET)\n+    in_section = NULL;\n+  else\n+    {\n+      in_section = new_section;\n+      if (new_section->common.flags & SECTION_CODE)\n+\tlast_text_section = in_section;\n+    }\n+\n+  if (new_section->common.flags & SECTION_NAMED)\n+    {\n+      if (cfun\n+\t  && !cfun->unlikely_text_section_name\n+\t  && strcmp (new_section->named.name,\n+\t\t     UNLIKELY_EXECUTED_TEXT_SECTION_NAME) == 0)\n+\tcfun->unlikely_text_section_name = UNLIKELY_EXECUTED_TEXT_SECTION_NAME;\n+\n+      targetm.asm_out.named_section (new_section->named.name,\n+\t\t\t\t     new_section->named.common.flags,\n+\t\t\t\t     new_section->named.decl);\n+    }\n+  else\n+    new_section->unnamed.callback (new_section->unnamed.data);\n+\n+  new_section->common.flags |= SECTION_DECLARED;\n }\n \n #include \"gt-varasm.h\""}, {"sha": "d8ed6838fb88b07a367da29ae83bdf0c5c0daeda", "filename": "gcc/vmsdbgout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fvmsdbgout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b5193bfc37d56ae15742b03f29001c61cd3ec6/gcc%2Fvmsdbgout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbgout.c?ref=d6b5193bfc37d56ae15742b03f29001c61cd3ec6", "patch": "@@ -1697,13 +1697,13 @@ vmsdbgout_finish (const char *main_input_filename ATTRIBUTE_UNUSED)\n     return;\n \n   /* Output a terminator label for the .text section.  */\n-  text_section ();\n+  switch_to_section (text_section);\n   targetm.asm_out.internal_label (asm_out_file, TEXT_END_LABEL, 0);\n \n   /* Output debugging information.\n      Warning! Do not change the name of the .vmsdebug section without\n      changing it in the assembler also.  */\n-  named_section (NULL_TREE, \".vmsdebug\", 0);\n+  switch_to_section (get_named_section (NULL, \".vmsdebug\", 0));\n   ASM_OUTPUT_ALIGN (asm_out_file, 0);\n \n   totsize = write_modbeg (1);"}]}