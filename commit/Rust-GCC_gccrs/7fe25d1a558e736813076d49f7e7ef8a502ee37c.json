{"sha": "7fe25d1a558e736813076d49f7e7ef8a502ee37c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZlMjVkMWE1NThlNzM2ODEzMDc2ZDQ5ZjdlN2VmOGE1MDJlZTM3Yw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-04-16T02:38:44Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-04-16T02:38:44Z"}, "message": "tree.c (integer_zerop): Ignore TREE_CONSTANT_OVERFLOW.\n\n\n\t* tree.c (integer_zerop): Ignore TREE_CONSTANT_OVERFLOW.\n\t(integer_onep): Likewise.\n\t(integer_all_onesp): Likewise.\n\t(integer_pow2p): Likewise.\n\t(integer_nonzerop): Likewise.\n\t(real_zerop): Likewise.\n\t(real_onep): Likewise.\n\t(real_twop): Likewise.\n\t(real_minus_onep): Likewise.\n\t(int_size_in_bytes): Likewise.\n\t(host_integerp): Likewise.\n\nFrom-SVN: r112980", "tree": {"sha": "20ee43b88fd5d9bb73b173ca126ad382b1211d15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20ee43b88fd5d9bb73b173ca126ad382b1211d15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fe25d1a558e736813076d49f7e7ef8a502ee37c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fe25d1a558e736813076d49f7e7ef8a502ee37c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fe25d1a558e736813076d49f7e7ef8a502ee37c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fe25d1a558e736813076d49f7e7ef8a502ee37c/comments", "author": null, "committer": null, "parents": [{"sha": "aacac31f2cefc0a2d44402ea20b773128cd35a04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aacac31f2cefc0a2d44402ea20b773128cd35a04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aacac31f2cefc0a2d44402ea20b773128cd35a04"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "2645ebaa9789e24c91d369e06dcce6039a435f05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fe25d1a558e736813076d49f7e7ef8a502ee37c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fe25d1a558e736813076d49f7e7ef8a502ee37c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7fe25d1a558e736813076d49f7e7ef8a502ee37c", "patch": "@@ -1,3 +1,17 @@\n+2006-04-15  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* tree.c (integer_zerop): Ignore TREE_CONSTANT_OVERFLOW.\n+\t(integer_onep): Likewise.\n+\t(integer_all_onesp): Likewise.\n+\t(integer_pow2p): Likewise.\n+\t(integer_nonzerop): Likewise.\n+\t(real_zerop): Likewise.\n+\t(real_onep): Likewise.\n+\t(real_twop): Likewise.\n+\t(real_minus_onep): Likewise.\n+\t(int_size_in_bytes): Likewise.\n+\t(host_integerp): Likewise.\n+\n 2006-04-15  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* cfgcleanup.c, config/dfp-bit.c, expr.c, fold-const.c,"}, {"sha": "48b4c655faa4fef79d8fe386c84784aa31d7d2eb", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fe25d1a558e736813076d49f7e7ef8a502ee37c/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fe25d1a558e736813076d49f7e7ef8a502ee37c/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=7fe25d1a558e736813076d49f7e7ef8a502ee37c", "patch": "@@ -1209,7 +1209,6 @@ integer_zerop (tree expr)\n   STRIP_NOPS (expr);\n \n   return ((TREE_CODE (expr) == INTEGER_CST\n-\t   && ! TREE_CONSTANT_OVERFLOW (expr)\n \t   && TREE_INT_CST_LOW (expr) == 0\n \t   && TREE_INT_CST_HIGH (expr) == 0)\n \t  || (TREE_CODE (expr) == COMPLEX_CST\n@@ -1226,7 +1225,6 @@ integer_onep (tree expr)\n   STRIP_NOPS (expr);\n \n   return ((TREE_CODE (expr) == INTEGER_CST\n-\t   && ! TREE_CONSTANT_OVERFLOW (expr)\n \t   && TREE_INT_CST_LOW (expr) == 1\n \t   && TREE_INT_CST_HIGH (expr) == 0)\n \t  || (TREE_CODE (expr) == COMPLEX_CST\n@@ -1250,8 +1248,7 @@ integer_all_onesp (tree expr)\n       && integer_zerop (TREE_IMAGPART (expr)))\n     return 1;\n \n-  else if (TREE_CODE (expr) != INTEGER_CST\n-\t   || TREE_CONSTANT_OVERFLOW (expr))\n+  else if (TREE_CODE (expr) != INTEGER_CST)\n     return 0;\n \n   uns = TYPE_UNSIGNED (TREE_TYPE (expr));\n@@ -1303,7 +1300,7 @@ integer_pow2p (tree expr)\n       && integer_zerop (TREE_IMAGPART (expr)))\n     return 1;\n \n-  if (TREE_CODE (expr) != INTEGER_CST || TREE_CONSTANT_OVERFLOW (expr))\n+  if (TREE_CODE (expr) != INTEGER_CST)\n     return 0;\n \n   prec = (POINTER_TYPE_P (TREE_TYPE (expr))\n@@ -1341,7 +1338,6 @@ integer_nonzerop (tree expr)\n   STRIP_NOPS (expr);\n \n   return ((TREE_CODE (expr) == INTEGER_CST\n-\t   && ! TREE_CONSTANT_OVERFLOW (expr)\n \t   && (TREE_INT_CST_LOW (expr) != 0\n \t       || TREE_INT_CST_HIGH (expr) != 0))\n \t  || (TREE_CODE (expr) == COMPLEX_CST\n@@ -1434,7 +1430,6 @@ real_zerop (tree expr)\n   STRIP_NOPS (expr);\n \n   return ((TREE_CODE (expr) == REAL_CST\n-\t   && ! TREE_CONSTANT_OVERFLOW (expr)\n \t   && REAL_VALUES_EQUAL (TREE_REAL_CST (expr), dconst0))\n \t  || (TREE_CODE (expr) == COMPLEX_CST\n \t      && real_zerop (TREE_REALPART (expr))\n@@ -1449,7 +1444,6 @@ real_onep (tree expr)\n   STRIP_NOPS (expr);\n \n   return ((TREE_CODE (expr) == REAL_CST\n-\t   && ! TREE_CONSTANT_OVERFLOW (expr)\n \t   && REAL_VALUES_EQUAL (TREE_REAL_CST (expr), dconst1))\n \t  || (TREE_CODE (expr) == COMPLEX_CST\n \t      && real_onep (TREE_REALPART (expr))\n@@ -1464,7 +1458,6 @@ real_twop (tree expr)\n   STRIP_NOPS (expr);\n \n   return ((TREE_CODE (expr) == REAL_CST\n-\t   && ! TREE_CONSTANT_OVERFLOW (expr)\n \t   && REAL_VALUES_EQUAL (TREE_REAL_CST (expr), dconst2))\n \t  || (TREE_CODE (expr) == COMPLEX_CST\n \t      && real_twop (TREE_REALPART (expr))\n@@ -1479,7 +1472,6 @@ real_minus_onep (tree expr)\n   STRIP_NOPS (expr);\n \n   return ((TREE_CODE (expr) == REAL_CST\n-\t   && ! TREE_CONSTANT_OVERFLOW (expr)\n \t   && REAL_VALUES_EQUAL (TREE_REAL_CST (expr), dconstm1))\n \t  || (TREE_CODE (expr) == COMPLEX_CST\n \t      && real_minus_onep (TREE_REALPART (expr))\n@@ -1725,7 +1717,6 @@ int_size_in_bytes (tree type)\n   t = TYPE_SIZE_UNIT (type);\n   if (t == 0\n       || TREE_CODE (t) != INTEGER_CST\n-      || TREE_OVERFLOW (t)\n       || TREE_INT_CST_HIGH (t) != 0\n       /* If the result would appear negative, it's too big to represent.  */\n       || (HOST_WIDE_INT) TREE_INT_CST_LOW (t) < 0)\n@@ -4404,7 +4395,6 @@ int\n host_integerp (tree t, int pos)\n {\n   return (TREE_CODE (t) == INTEGER_CST\n-\t  && ! TREE_OVERFLOW (t)\n \t  && ((TREE_INT_CST_HIGH (t) == 0\n \t       && (HOST_WIDE_INT) TREE_INT_CST_LOW (t) >= 0)\n \t      || (! pos && TREE_INT_CST_HIGH (t) == -1"}]}