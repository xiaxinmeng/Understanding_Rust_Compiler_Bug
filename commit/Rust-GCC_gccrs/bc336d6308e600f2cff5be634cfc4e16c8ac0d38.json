{"sha": "bc336d6308e600f2cff5be634cfc4e16c8ac0d38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMzMzZkNjMwOGU2MDBmMmNmZjViZTYzNGNmYzRlMTZjOGFjMGQzOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2011-08-06T16:56:49Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-08-06T16:56:49Z"}, "message": "sse-22.c (dg-options): Add -march=k8.\n\n\t* gcc.target/i386/sse-22.c (dg-options): Add -march=k8.\n\t(pragma GCC target): Add avx, fma4, lzcnt and bmi options.\n\t* gcc.target/i386/sse-23.c (pragma GCC target): Add avx, fma4,\n\tlzcnt and bmi options.\n\nFrom-SVN: r177528", "tree": {"sha": "55c69475853652baf0971bb52ed3d880ed572706", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55c69475853652baf0971bb52ed3d880ed572706"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc336d6308e600f2cff5be634cfc4e16c8ac0d38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc336d6308e600f2cff5be634cfc4e16c8ac0d38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc336d6308e600f2cff5be634cfc4e16c8ac0d38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc336d6308e600f2cff5be634cfc4e16c8ac0d38/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "48b155b991003487a50ac171ba5ca7c3409ad417", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b155b991003487a50ac171ba5ca7c3409ad417", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48b155b991003487a50ac171ba5ca7c3409ad417"}], "stats": {"total": 145, "additions": 102, "deletions": 43}, "files": [{"sha": "ddb4a663c061cf5757896801eea186565df2e6c7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc336d6308e600f2cff5be634cfc4e16c8ac0d38/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc336d6308e600f2cff5be634cfc4e16c8ac0d38/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bc336d6308e600f2cff5be634cfc4e16c8ac0d38", "patch": "@@ -1,3 +1,10 @@\n+2011-08-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/sse-22.c (dg-options): Add -march=k8.\n+\t(pragma GCC target): Add avx, fma4, lzcnt and bmi options.\n+\t* gcc.target/i386/sse-23.c (pragma GCC target): Add avx, fma4,\n+\tlzcnt and bmi options.\n+\n 2011-08-06  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/47381\n@@ -42,13 +49,13 @@\n \t* obj-c++.dg/gnu-api-2-class.mm: Likewise.\n \t* objc.dg/gnu-api-2-class-meta.m: New test.\n \t* obj-c++.dg/gnu-api-2-class-meta.mm: Likewise.\n-\t\n+\n 2011-08-06  Nicola Pero  <nicola.pero@meta-innovation.com>\n-\t\n+\n \tPR libobjc/49882\n \t* obj-c++.dg/gnu-api-2-class.mm (main): Test class_getSuperclass()\n \twith classes that are in construction.\n-\t\n+\n 2011-08-06  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/48084"}, {"sha": "0a7af039e1e52780cd93f6e01b96781801b37e98", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 84, "deletions": 34, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc336d6308e600f2cff5be634cfc4e16c8ac0d38/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc336d6308e600f2cff5be634cfc4e16c8ac0d38/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=bc336d6308e600f2cff5be634cfc4e16c8ac0d38", "patch": "@@ -1,15 +1,17 @@\n /* Same as sse-14, except converted to use #pragma GCC option.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8\" } */\n \n #include <mm_malloc.h>\n \n-/* Test that the intrinsics compile without optimization.  All of them\n-   are defined as inline functions in {,x,e,p,t,s,w,a}mmintrin.h,\n-   xopintrin.h, tbmintrin.h, lwpintrin.h, popcntintrin.h and\n-   mm3dnow.h that reference the proper builtin functions.  Defining\n-   away \"extern\" and \"__inline\" results in all of them being compiled as\n-   proper functions.  */\n+/* Test that the intrinsics compile with optimization.  All of them\n+   are defined as inline functions in {,x,e,p,t,s,w,a,b,i}mmintrin.h,\n+   mm3dnow.h, fma4intrin.h, xopintrin.h, abmintrin.h, bmiintrin.h,\n+   tbmintrin.h, lwpintrin.h, popcntintrin.h and mm_malloc.h that\n+   reference the proper builtin functions.\n+\n+   Defining away \"extern\" and \"__inline\" results in all of them being\n+   compiled as proper functions.  */\n \n #define extern\n #define __inline\n@@ -32,14 +34,19 @@\n   type _CONCAT(_,func) (op1_type A, op2_type B, int const I, int const L) \\\n   { return func (A, B, imm1, imm2); }\n \n+#define test_3(func, type, op1_type, op2_type, op3_type, imm)\t\t\\\n+  type _CONCAT(_,func) (op1_type A, op2_type B,\t\t\t\t\\\n+\t\t\top3_type C, int const I)\t\t\t\\\n+  { return func (A, B, C, imm); }\n+\n #define test_4(func, type, op1_type, op2_type, op3_type, op4_type, imm)\t\\\n   type _CONCAT(_,func) (op1_type A, op2_type B,\t\t\t\t\\\n \t\t\top3_type C, op4_type D, int const I)\t\t\\\n   { return func (A, B, C, D, imm); }\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"mmx,3dnow,sse,sse2,sse3,ssse3,sse4.1,sse4.2,sse4a,aes,pclmul,xop,popcnt,abm,lwp,fsgsbase,rdrnd,f16c,tbm\")\n+#pragma GCC target (\"sse4a,3dnow,avx,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,tbm,lwp,fsgsbase,rdrnd,f16c\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -107,14 +114,18 @@ test_2 (_mm_alignr_pi8, __m64, __m64, __m64, 1)\n test_1x (_mm_extracti_si64, __m128i, __m128i, 1, 1)\n test_2x (_mm_inserti_si64, __m128i, __m128i, __m128i, 1, 1)\n \n-/* smmintrin.h (SSE4.1).  */\n-/* nmmintrin.h (SSE4.2).  */\n-/* Note, nmmintrin.h includes smmintrin.h, and smmintrin.h checks for the\n-   #ifdef.  So just set the option to SSE4.2.  */\n+/* Note, nmmintrin.h includes smmintrin.h, and smmintrin.h\n+   checks for the #ifdef.  So just set the option to SSE4.2.  */\n #ifdef DIFFERENT_PRAGMAS\n #pragma GCC target (\"sse4.2\")\n #endif\n #include <nmmintrin.h>\n+/* smmintrin.h (SSE4.2).  */\n+test_1 (_mm_round_pd, __m128d, __m128d, 1)\n+test_1 (_mm_round_ps, __m128, __m128, 1)\n+test_2 (_mm_round_sd, __m128d, __m128d, __m128d, 1)\n+test_2 (_mm_round_ss, __m128, __m128, __m128, 1)\n+\n test_2 (_mm_blend_epi16, __m128i, __m128i, __m128i, 1)\n test_2 (_mm_blend_ps, __m128, __m128, __m128, 1)\n test_2 (_mm_blend_pd, __m128d, __m128d, __m128d, 1)\n@@ -148,6 +159,53 @@ test_4 (_mm_cmpestro, int, __m128i, int, __m128i, int, 1)\n test_4 (_mm_cmpestrs, int, __m128i, int, __m128i, int, 1)\n test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n \n+/* immintrin.h (AVX/RDRND/FSGSBASE/F16C) */\n+#ifdef DIFFERENT_PRAGMAS\n+#pragma GCC target (\"avx,rdrnd,fsgsbase,f16c\")\n+#endif\n+#include <immintrin.h>\n+test_2 (_mm256_blend_pd, __m256d, __m256d, __m256d, 1)\n+test_2 (_mm256_blend_ps, __m256, __m256, __m256, 1)\n+test_2 (_mm256_dp_ps, __m256, __m256, __m256, 1)\n+test_2 (_mm256_shuffle_pd, __m256d, __m256d, __m256d, 1)\n+test_2 (_mm256_shuffle_ps, __m256, __m256, __m256, 1)\n+test_2 (_mm_cmp_sd, __m128d, __m128d, __m128d, 1)\n+test_2 (_mm_cmp_ss, __m128, __m128, __m128, 1)\n+test_2 (_mm_cmp_pd, __m128d, __m128d, __m128d, 1)\n+test_2 (_mm_cmp_ps, __m128, __m128, __m128, 1)\n+test_2 (_mm256_cmp_pd, __m256d, __m256d, __m256d, 1)\n+test_2 (_mm256_cmp_ps, __m256, __m256, __m256, 1)\n+test_1 (_mm256_extractf128_pd, __m128d, __m256d, 1)\n+test_1 (_mm256_extractf128_ps, __m128, __m256, 1)\n+test_1 (_mm256_extractf128_si256, __m128i, __m256i, 1)\n+test_1 (_mm256_extract_epi8, int, __m256i, 20)\n+test_1 (_mm256_extract_epi16, int, __m256i, 13)\n+test_1 (_mm256_extract_epi32, int, __m256i, 6)\n+#ifdef __x86_64__\n+test_1 (_mm256_extract_epi64, long long, __m256i, 2)\n+#endif\n+test_1 (_mm_permute_pd, __m128d, __m128d, 1)\n+test_1 (_mm256_permute_pd, __m256d, __m256d, 1)\n+test_1 (_mm_permute_ps, __m128, __m128, 1)\n+test_1 (_mm256_permute_ps, __m256, __m256, 1)\n+test_2 (_mm256_permute2f128_pd, __m256d, __m256d, __m256d, 1)\n+test_2 (_mm256_permute2f128_ps, __m256, __m256, __m256, 1)\n+test_2 (_mm256_permute2f128_si256, __m256i, __m256i, __m256i, 1)\n+test_2 (_mm256_insertf128_pd, __m256d, __m256d, __m128d, 1)\n+test_2 (_mm256_insertf128_ps, __m256, __m256, __m128, 1)\n+test_2 (_mm256_insertf128_si256, __m256i, __m256i, __m128i, 1)\n+test_2 (_mm256_insert_epi8, __m256i, __m256i, int, 30)\n+test_2 (_mm256_insert_epi16, __m256i, __m256i, int, 7)\n+test_2 (_mm256_insert_epi32, __m256i, __m256i, int, 3)\n+#ifdef __x86_64__\n+test_2 (_mm256_insert_epi64, __m256i, __m256i, long long, 1)\n+#endif\n+test_1 (_mm256_round_pd, __m256d, __m256d, 1)\n+test_1 (_mm256_round_ps, __m256, __m256, 1)\n+test_1 (_cvtss_sh, unsigned short, float, 1)\n+test_1 (_mm_cvtps_ph, __m128i, __m128, 1)\n+test_1 (_mm256_cvtps_ph, __m128i, __m256, 1)\n+\n /* wmmintrin.h (AES/PCLMUL).  */\n #ifdef DIFFERENT_PRAGMAS\n #pragma GCC target (\"aes,pclmul\")\n@@ -156,44 +214,36 @@ test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n test_1 (_mm_aeskeygenassist_si128, __m128i, __m128i, 1)\n test_2 (_mm_clmulepi64_si128, __m128i, __m128i, __m128i, 1)\n \n-/* smmintrin.h (SSE4.1).  */\n-test_1 (_mm_round_pd, __m128d, __m128d, 1)\n-test_1 (_mm_round_ps, __m128, __m128, 1)\n-test_2 (_mm_round_sd, __m128d, __m128d, __m128d, 1)\n-test_2 (_mm_round_ss, __m128, __m128, __m128, 1)\n+/* popcnintrin.h (POPCNT).  */\n+#ifdef DIFFERENT_PRAGMAS\n+#pragma GCC target (\"popcnt\")\n+#endif\n+#include <popcntintrin.h>\n \n-/* xopintrin.h (XOP). */\n+/* x86intrin.h (FMA4/XOP/LWP/BMI/TBM/LZCNT). */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"xop,lwp\")\n+#pragma GCC target (\"fma4,xop,lwp,bmi,tbm,lzcnt\")\n #endif\n #include <x86intrin.h>\n+/* xopintrin.h */\n test_1 ( _mm_roti_epi8, __m128i, __m128i, 1)\n test_1 ( _mm_roti_epi16, __m128i, __m128i, 1)\n test_1 ( _mm_roti_epi32, __m128i, __m128i, 1)\n test_1 ( _mm_roti_epi64, __m128i, __m128i, 1)\n+test_3 (_mm_permute2_pd, __m128d, __m128d, __m128d, __m128d, 1)\n+test_3 (_mm256_permute2_pd, __m256d, __m256d, __m256d, __m256d, 1)\n+test_3 (_mm_permute2_ps, __m128, __m128, __m128, __m128, 1)\n+test_3 (_mm256_permute2_ps, __m256, __m256, __m256, __m256, 1)\n \n-/* lwpintrin.h (LWP). */\n+/* lwpintrin.h */\n test_2 ( __lwpval32, void, unsigned int, unsigned int, 1)\n test_2 ( __lwpins32, unsigned char, unsigned int, unsigned int, 1)\n #ifdef __x86_64__\n test_2 ( __lwpval64, void, unsigned long long, unsigned int, 1)\n test_2 ( __lwpins64, unsigned char, unsigned long long, unsigned int, 1)\n #endif\n \n-/* immintrin.h (F16C).  */\n-#ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"f16c\")\n-#endif\n-#include <x86intrin.h>\n-test_1 (_cvtss_sh, unsigned short, float, 1)\n-test_1 (_mm_cvtps_ph, __m128i, __m128, 1)\n-test_1 (_mm256_cvtps_ph, __m128i, __m256, 1)\n-\n-/* tbmintrin.h (TBM). */\n-#ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"tbm\")\n-#endif\n-#include <x86intrin.h>\n+/* tbmintrin.h */\n test_1 ( __bextri_u32, unsigned int, unsigned int, 1)\n #ifdef __x86_64__\n test_1 ( __bextri_u64, unsigned long long, unsigned long long, 1)"}, {"sha": "8d0c32336c7ec21e6f3e7639aa5701206990b0b6", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc336d6308e600f2cff5be634cfc4e16c8ac0d38/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc336d6308e600f2cff5be634cfc4e16c8ac0d38/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=bc336d6308e600f2cff5be634cfc4e16c8ac0d38", "patch": "@@ -4,11 +4,13 @@\n #include <mm_malloc.h>\n \n /* Test that the intrinsics compile with optimization.  All of them\n-   are defined as inline functions in {,x,e,p,t,s,w,a}mmintrin.h,\n-   xopintrin.h, lwpintrin.h, tbmintrin.h, popcntintrin.h and mm3dnow.h\n-   that reference the proper builtin functions.  Defining away \"extern\"\n-   and \"__inline\" results in all of them being compiled as proper\n-   functions.  */\n+   are defined as inline functions in {,x,e,p,t,s,w,a,b,i}mmintrin.h,\n+   mm3dnow.h, fma4intrin.h, xopintrin.h, abmintrin.h, bmiintrin.h,\n+   tbmintrin.h, lwpintrin.h, popcntintrin.h and mm_malloc.h that\n+   reference the proper builtin functions.\n+\n+   Defining away \"extern\" and \"__inline\" results in all of them being\n+   compiled as proper functions.  */\n \n #define extern\n #define __inline\n@@ -145,7 +147,7 @@\n #define __builtin_ia32_bextri_u32(X, Y) __builtin_ia32_bextr_u32 (X, 1)\n #define __builtin_ia32_bextri_u64(X, Y) __builtin_ia32_bextr_u64 (X, 1)\n \n-#pragma GCC target (\"3dnow,sse4,sse4a,aes,pclmul,xop,abm,popcnt,lwp,tbm,fsgsbase,rdrnd,f16c\")\n+#pragma GCC target (\"sse4a,3dnow,avx,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,tbm,lwp,fsgsbase,rdrnd,f16c\")\n #include <wmmintrin.h>\n #include <smmintrin.h>\n #include <mm3dnow.h>"}]}