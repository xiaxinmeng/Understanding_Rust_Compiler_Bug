{"sha": "ac6818591810af25dc9f91d28230f30494e22a71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM2ODE4NTkxODEwYWYyNWRjOWY5MWQyODIzMGYzMDQ5NGUyMmE3MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-05-08T12:04:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-05-08T12:04:25Z"}, "message": "re PR target/85317 (missing constant propagation on _mm(256)_movemask_*)\n\n\tPR target/85317\n\t* config/i386/i386.c (ix86_fold_builtin): Handle\n\tIX86_BUILTIN_{,P}MOVMSK{PS,PD,B}{,128,256}.\n\n\t* gcc.target/i386/pr85317.c: New test.\n\t* gcc.target/i386/avx2-vpmovmskb-2.c (avx2_test): Add asm volatile\n\toptimization barrier to avoid optimizing away the expected insn.\n\nFrom-SVN: r260040", "tree": {"sha": "f1c573764cf75284b321e9edccac4b0a132b8a34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1c573764cf75284b321e9edccac4b0a132b8a34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac6818591810af25dc9f91d28230f30494e22a71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac6818591810af25dc9f91d28230f30494e22a71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac6818591810af25dc9f91d28230f30494e22a71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac6818591810af25dc9f91d28230f30494e22a71/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "294c6f66373d29a9300a414fab24f1eefb473ccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/294c6f66373d29a9300a414fab24f1eefb473ccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/294c6f66373d29a9300a414fab24f1eefb473ccf"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "0ff143bf60309bb5684a250d035c3b846b52b910", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac6818591810af25dc9f91d28230f30494e22a71/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac6818591810af25dc9f91d28230f30494e22a71/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac6818591810af25dc9f91d28230f30494e22a71", "patch": "@@ -1,5 +1,9 @@\n 2018-05-08  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/85317\n+\t* config/i386/i386.c (ix86_fold_builtin): Handle\n+\tIX86_BUILTIN_{,P}MOVMSK{PS,PD,B}{,128,256}.\n+\n \tPR target/85480\n \t* config/i386/sse.md (ssequaterinsnmode): New mode attribute.\n \t(*<extract_type>_vinsert<shuffletype><extract_suf>_0): New pattern."}, {"sha": "d99ff968c904e6fed82dd6863a93eab6baf4c143", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac6818591810af25dc9f91d28230f30494e22a71/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac6818591810af25dc9f91d28230f30494e22a71/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ac6818591810af25dc9f91d28230f30494e22a71", "patch": "@@ -33477,6 +33477,37 @@ ix86_fold_builtin (tree fndecl, int n_args,\n \t    }\n \t  break;\n \n+\tcase IX86_BUILTIN_MOVMSKPS:\n+\tcase IX86_BUILTIN_PMOVMSKB:\n+\tcase IX86_BUILTIN_MOVMSKPD:\n+\tcase IX86_BUILTIN_PMOVMSKB128:\n+\tcase IX86_BUILTIN_MOVMSKPD256:\n+\tcase IX86_BUILTIN_MOVMSKPS256:\n+\tcase IX86_BUILTIN_PMOVMSKB256:\n+\t  gcc_assert (n_args == 1);\n+\t  if (TREE_CODE (args[0]) == VECTOR_CST)\n+\t    {\n+\t      HOST_WIDE_INT res = 0;\n+\t      for (unsigned i = 0; i < VECTOR_CST_NELTS (args[0]); ++i)\n+\t\t{\n+\t\t  tree e = VECTOR_CST_ELT (args[0], i);\n+\t\t  if (TREE_CODE (e) == INTEGER_CST && !TREE_OVERFLOW (e))\n+\t\t    {\n+\t\t      if (wi::neg_p (wi::to_wide (e)))\n+\t\t\tres |= HOST_WIDE_INT_1 << i;\n+\t\t    }\n+\t\t  else if (TREE_CODE (e) == REAL_CST && !TREE_OVERFLOW (e))\n+\t\t    {\n+\t\t      if (TREE_REAL_CST (e).sign)\n+\t\t\tres |= HOST_WIDE_INT_1 << i;\n+\t\t    }\n+\t\t  else\n+\t\t    return NULL_TREE;\n+\t\t}\n+\t      return build_int_cst (TREE_TYPE (TREE_TYPE (fndecl)), res);\n+\t    }\n+\t  break;\n+\n \tdefault:\n \t  break;\n \t}"}, {"sha": "c6d35858e4c009424255940723824264075fd8bd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac6818591810af25dc9f91d28230f30494e22a71/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac6818591810af25dc9f91d28230f30494e22a71/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ac6818591810af25dc9f91d28230f30494e22a71", "patch": "@@ -1,5 +1,10 @@\n 2018-05-08  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/85317\n+\t* gcc.target/i386/pr85317.c: New test.\n+\t* gcc.target/i386/avx2-vpmovmskb-2.c (avx2_test): Add asm volatile\n+\toptimization barrier to avoid optimizing away the expected insn.\n+\n \tPR target/85480\n \t* gcc.target/i386/avx512dq-pr85480-1.c: New test.\n \t* gcc.target/i386/avx512dq-pr85480-2.c: New test."}, {"sha": "71e65c937833a6bb14f6d6367aa5422d3043e676", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpmovmskb-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac6818591810af25dc9f91d28230f30494e22a71/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovmskb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac6818591810af25dc9f91d28230f30494e22a71/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovmskb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpmovmskb-2.c?ref=ac6818591810af25dc9f91d28230f30494e22a71", "patch": "@@ -14,6 +14,7 @@ avx2_test (void)\n   s.x = _mm256_set_epi8 (1, 2, 3, 4, 10, 20, 30, 90, -80, -40, -100,\n \t\t\t 15, 98, 25, 98, 7, 1, 2, 3, 4, 10, 20, 30, 90,\n \t\t\t -80, -40, -100, -15, 98, 25, 98, 7);\n+  __asm volatile (\"\" : \"+m\" (s) : : \"memory\");\n \n   res = _mm256_movemask_epi8 (s.x);\n "}, {"sha": "78c5b0cd22276cdb25a344b168af8ef7767b95e8", "filename": "gcc/testsuite/gcc.target/i386/pr85317.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac6818591810af25dc9f91d28230f30494e22a71/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85317.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac6818591810af25dc9f91d28230f30494e22a71/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85317.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85317.c?ref=ac6818591810af25dc9f91d28230f30494e22a71", "patch": "@@ -0,0 +1,38 @@\n+/* PR target/85317 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \"link_error\" \"optimized\" } } */\n+\n+#include <x86intrin.h>\n+\n+extern void link_error (void);\n+\n+int\n+main ()\n+{\n+  int a = _mm_movemask_pd (_mm_set_pd (-2.0, 2.0));\n+  if (a != 2) link_error ();\n+  int b = _mm_movemask_pd (_mm_set_pd (0.0, __builtin_copysign (0.0, -4.0)));\n+  if (b != 1) link_error ();\n+  int c = _mm_movemask_ps (_mm_set_ps (__builtin_copysignf (0.0f, -4.0f), 0.0f,\n+\t\t\t\t       -4.0f, 4.0f));\n+  if (c != 10) link_error ();\n+  int d = _mm_movemask_epi8 (_mm_set_epi8 (-4, 8, -8, -12, 12, 15, 0, -1, -3,\n+\t\t\t\t\t   -128, 127, 126, 120, -120, 0, 5));\n+  if (d != 0xb1c4) link_error ();\n+  int e = _mm256_movemask_pd (_mm256_set_pd (-4.0, 0.0, 4.0,\n+\t\t\t\t\t     __builtin_copysign (0.0, -4.0)));\n+  if (e != 9) link_error ();\n+  int f = _mm256_movemask_ps (_mm256_set_ps (-8.0f, -16.0f, 12.0f, 127.0f,\n+\t\t\t\t\t     -4.0f, 0.0f, 4.0f,\n+\t\t\t\t\t     __builtin_copysign (0.0f,\n+\t\t\t\t\t\t\t\t -4.0f)));\n+  if (f != 0xc9) link_error ();\n+  int g = _mm256_movemask_epi8 (_mm256_set_epi8 (-4, 8, -8, -12, 12, 15, 0, -1,\n+\t\t\t\t\t\t -3, -128, 127, 126, 120, -120,\n+\t\t\t\t\t\t 0, 5, 12, 100, -20, -50, -70,\n+\t\t\t\t\t\t 2, -65, 0, -1, 1, 2, -2, -9,\n+\t\t\t\t\t\t -9, 19, -64));\n+  if (g != (int) 0xb1c43a9dU) link_error ();\n+  return 0;\n+}"}]}