{"sha": "bdbebb7dc6192e428fa9c5ece8de8efb33a7738f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRiZWJiN2RjNjE5MmU0MjhmYTljNWVjZThkZThlZmIzM2E3NzM4Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-09-21T11:39:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-09-21T11:39:23Z"}, "message": "sse.md (<code><mode>3 smaxmin:VI124_128 expander): Use nonimmediate_operand instead of register_operand predicate for operands 1...\n\n\t* config/i386/sse.md (<code><mode>3 smaxmin:VI124_128 expander): Use\n\tnonimmediate_operand instead of register_operand predicate for operands\n\t1 and 2, force them into registers if expanding them as comparison.\n\t(<code><mode>3 umaxmin:VI124_128 expander): Similarly.  For UMAX\n\tV8HImode force into register just operand 1.\n\nFrom-SVN: r179045", "tree": {"sha": "bb83913dceba0a6362df9c2866eb7b71d3fca3df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb83913dceba0a6362df9c2866eb7b71d3fca3df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdbebb7dc6192e428fa9c5ece8de8efb33a7738f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdbebb7dc6192e428fa9c5ece8de8efb33a7738f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdbebb7dc6192e428fa9c5ece8de8efb33a7738f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdbebb7dc6192e428fa9c5ece8de8efb33a7738f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fd1e62c239e732536345e8c6102669923455dd89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd1e62c239e732536345e8c6102669923455dd89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd1e62c239e732536345e8c6102669923455dd89"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "fb80dc938fdcabf6ecbe98e2391827eae536d897", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbebb7dc6192e428fa9c5ece8de8efb33a7738f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbebb7dc6192e428fa9c5ece8de8efb33a7738f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bdbebb7dc6192e428fa9c5ece8de8efb33a7738f", "patch": "@@ -1,3 +1,11 @@\n+2011-09-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/sse.md (<code><mode>3 smaxmin:VI124_128 expander): Use\n+\tnonimmediate_operand instead of register_operand predicate for operands\n+\t1 and 2, force them into registers if expanding them as comparison.\n+\t(<code><mode>3 umaxmin:VI124_128 expander): Similarly.  For UMAX\n+\tV8HImode force into register just operand 1.\n+\n 2011-09-21  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/45099"}, {"sha": "7c15e1a9a7083672667e604094cbaf6e69ce543c", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbebb7dc6192e428fa9c5ece8de8efb33a7738f/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbebb7dc6192e428fa9c5ece8de8efb33a7738f/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=bdbebb7dc6192e428fa9c5ece8de8efb33a7738f", "patch": "@@ -5887,8 +5887,8 @@\n \n (define_expand \"<code><mode>3\"\n   [(set (match_operand:VI124_128 0 \"register_operand\" \"\")\n-\t(smaxmin:VI124_128 (match_operand:VI124_128 1 \"register_operand\" \"\")\n-\t\t\t   (match_operand:VI124_128 2 \"register_operand\" \"\")))]\n+\t(smaxmin:VI124_128 (match_operand:VI124_128 1 \"nonimmediate_operand\" \"\")\n+\t\t\t   (match_operand:VI124_128 2 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_SSE2\"\n {\n   if (TARGET_SSE4_1 || <MODE>mode == V8HImode)\n@@ -5899,6 +5899,8 @@\n       bool ok;\n \n       xops[0] = operands[0];\n+      operands[1] = force_reg (<MODE>mode, operands[1]);\n+      operands[2] = force_reg (<MODE>mode, operands[2]);\n \n       if (<CODE> == SMAX)\n \t{\n@@ -5954,15 +5956,16 @@\n \n (define_expand \"<code><mode>3\"\n   [(set (match_operand:VI124_128 0 \"register_operand\" \"\")\n-\t(umaxmin:VI124_128 (match_operand:VI124_128 1 \"register_operand\" \"\")\n-\t\t\t   (match_operand:VI124_128 2 \"register_operand\" \"\")))]\n+\t(umaxmin:VI124_128 (match_operand:VI124_128 1 \"nonimmediate_operand\" \"\")\n+\t\t\t   (match_operand:VI124_128 2 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_SSE2\"\n {\n   if (TARGET_SSE4_1 || <MODE>mode == V16QImode)\n     ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\n   else if (<CODE> == UMAX && <MODE>mode == V8HImode)\n     {\n       rtx op0 = operands[0], op2 = operands[2], op3 = op0;\n+      operands[1] = force_reg (<MODE>mode, operands[1]);\n       if (rtx_equal_p (op3, op2))\n \top3 = gen_reg_rtx (V8HImode);\n       emit_insn (gen_sse2_ussubv8hi3 (op3, operands[1], op2));\n@@ -5974,6 +5977,9 @@\n       rtx xops[6];\n       bool ok;\n \n+      operands[1] = force_reg (<MODE>mode, operands[1]);\n+      operands[2] = force_reg (<MODE>mode, operands[2]);\n+\n       xops[0] = operands[0];\n \n       if (<CODE> == UMAX)"}]}