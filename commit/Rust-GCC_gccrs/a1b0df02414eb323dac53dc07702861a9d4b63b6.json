{"sha": "a1b0df02414eb323dac53dc07702861a9d4b63b6", "node_id": "C_kwDOANBUbNoAKGExYjBkZjAyNDE0ZWIzMjNkYWM1M2RjMDc3MDI4NjFhOWQ0YjYzYjY", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-20T15:21:37Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-22T09:13:06Z"}, "message": "Constify BaseType::get_root since this should not change ownership", "tree": {"sha": "9ab8a073a48489d04d51e1c9ee2c9c2ae0f7fee8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ab8a073a48489d04d51e1c9ee2c9c2ae0f7fee8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1b0df02414eb323dac53dc07702861a9d4b63b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b0df02414eb323dac53dc07702861a9d4b63b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1b0df02414eb323dac53dc07702861a9d4b63b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b0df02414eb323dac53dc07702861a9d4b63b6/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f19fb535c95f2afef30f8eb976907d5f0986041", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f19fb535c95f2afef30f8eb976907d5f0986041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f19fb535c95f2afef30f8eb976907d5f0986041"}], "stats": {"total": 62, "additions": 33, "deletions": 29}, "files": [{"sha": "d74159809c5929f33d57cd5c56c5e8c00ecc1aa3", "filename": "gcc/rust/backend/rust-compile-base.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b0df02414eb323dac53dc07702861a9d4b63b6/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b0df02414eb323dac53dc07702861a9d4b63b6/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.h?ref=a1b0df02414eb323dac53dc07702861a9d4b63b6", "patch": "@@ -205,14 +205,14 @@ class HIRCompileBase : public HIR::HIRVisitor\n \t\t\t      TyTy::BaseType *expected, Location locus);\n \n   Bexpression *coerce_to_dyn_object (Bexpression *compiled_ref,\n-\t\t\t\t     TyTy::BaseType *actual,\n-\t\t\t\t     TyTy::BaseType *expected,\n-\t\t\t\t     TyTy::DynamicObjectType *ty,\n+\t\t\t\t     const TyTy::BaseType *actual,\n+\t\t\t\t     const TyTy::BaseType *expected,\n+\t\t\t\t     const TyTy::DynamicObjectType *ty,\n \t\t\t\t     Location locus);\n \n   Bexpression *\n   compute_address_for_trait_item (const Resolver::TraitItemReference *ref,\n-\t\t\t\t  TyTy::BaseType *receiver);\n+\t\t\t\t  const TyTy::BaseType *receiver);\n };\n \n } // namespace Compile"}, {"sha": "ace5e4ce9495b4b0eb617e377cd59b853aefc7ca", "filename": "gcc/rust/backend/rust-compile-implitem.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b0df02414eb323dac53dc07702861a9d4b63b6/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b0df02414eb323dac53dc07702861a9d4b63b6/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h?ref=a1b0df02414eb323dac53dc07702861a9d4b63b6", "patch": "@@ -34,7 +34,7 @@ class CompileInherentImplItem : public HIRCompileBase\n   using Rust::Compile::HIRCompileBase::visit;\n \n public:\n-  static Bexpression *Compile (TyTy::BaseType *self, HIR::ImplItem *item,\n+  static Bexpression *Compile (const TyTy::BaseType *self, HIR::ImplItem *item,\n \t\t\t       Context *ctx, bool compile_fns,\n \t\t\t       TyTy::BaseType *concrete = nullptr,\n \t\t\t       bool is_query_mode = false,\n@@ -309,14 +309,15 @@ class CompileInherentImplItem : public HIRCompileBase\n   }\n \n private:\n-  CompileInherentImplItem (TyTy::BaseType *self, Context *ctx, bool compile_fns,\n-\t\t\t   TyTy::BaseType *concrete, Location ref_locus)\n+  CompileInherentImplItem (const TyTy::BaseType *self, Context *ctx,\n+\t\t\t   bool compile_fns, TyTy::BaseType *concrete,\n+\t\t\t   Location ref_locus)\n     : HIRCompileBase (ctx), self (self), compile_fns (compile_fns),\n       concrete (concrete), reference (ctx->get_backend ()->error_expression ()),\n       ref_locus (ref_locus)\n   {}\n \n-  TyTy::BaseType *self;\n+  const TyTy::BaseType *self;\n   bool compile_fns;\n   TyTy::BaseType *concrete;\n   Bexpression *reference;"}, {"sha": "56d3e409a8451ae74eb4bb573528b499dfdbddcc", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b0df02414eb323dac53dc07702861a9d4b63b6/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b0df02414eb323dac53dc07702861a9d4b63b6/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=a1b0df02414eb323dac53dc07702861a9d4b63b6", "patch": "@@ -234,8 +234,8 @@ CompileExpr::visit (HIR::MethodCallExpr &expr)\n \n   if (is_dyn_dispatch)\n     {\n-      TyTy::DynamicObjectType *dyn\n-\t= static_cast<TyTy::DynamicObjectType *> (receiver->get_root ());\n+      const TyTy::DynamicObjectType *dyn\n+\t= static_cast<const TyTy::DynamicObjectType *> (receiver->get_root ());\n \n       size_t offs = 0;\n       const Resolver::TraitItemReference *ref = nullptr;\n@@ -763,8 +763,8 @@ HIRCompileBase::coercion_site (Bexpression *compiled_ref,\n   if (root_expected_kind == TyTy::TypeKind::DYNAMIC\n       && root_actual_kind != TyTy::TypeKind::DYNAMIC)\n     {\n-      TyTy::DynamicObjectType *dyn\n-\t= static_cast<TyTy::DynamicObjectType *> (expected->get_root ());\n+      const TyTy::DynamicObjectType *dyn\n+\t= static_cast<const TyTy::DynamicObjectType *> (expected->get_root ());\n       return coerce_to_dyn_object (compiled_ref, actual, expected, dyn, locus);\n     }\n \n@@ -773,9 +773,9 @@ HIRCompileBase::coercion_site (Bexpression *compiled_ref,\n \n Bexpression *\n HIRCompileBase::coerce_to_dyn_object (Bexpression *compiled_ref,\n-\t\t\t\t      TyTy::BaseType *actual,\n-\t\t\t\t      TyTy::BaseType *expected,\n-\t\t\t\t      TyTy::DynamicObjectType *ty,\n+\t\t\t\t      const TyTy::BaseType *actual,\n+\t\t\t\t      const TyTy::BaseType *expected,\n+\t\t\t\t      const TyTy::DynamicObjectType *ty,\n \t\t\t\t      Location locus)\n {\n   Btype *dynamic_object = TyTyResolveCompile::compile (ctx, ty);\n@@ -814,7 +814,7 @@ HIRCompileBase::coerce_to_dyn_object (Bexpression *compiled_ref,\n   std::vector<Resolver::Adjustment> adjustments;\n   while (e->get_kind () == TyTy::TypeKind::REF)\n     {\n-      auto r = static_cast<TyTy::ReferenceType *> (e);\n+      auto r = static_cast<const TyTy::ReferenceType *> (e);\n       e = r->get_base ();\n \n       if (r->is_mutable ())\n@@ -845,7 +845,8 @@ HIRCompileBase::coerce_to_dyn_object (Bexpression *compiled_ref,\n \n Bexpression *\n HIRCompileBase::compute_address_for_trait_item (\n-  const Resolver::TraitItemReference *trait_item_ref, TyTy::BaseType *receiver)\n+  const Resolver::TraitItemReference *trait_item_ref,\n+  const TyTy::BaseType *receiver)\n {\n   TyTy::BaseType *item_type = trait_item_ref->get_tyty ();\n   rust_assert (item_type->get_kind () == TyTy::TypeKind::FNDEF);"}, {"sha": "9c0cc431c2a5aaf9db09b9bd6f47bded65251207", "filename": "gcc/rust/typecheck/rust-hir-dot-operator.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b0df02414eb323dac53dc07702861a9d4b63b6/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b0df02414eb323dac53dc07702861a9d4b63b6/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.h?ref=a1b0df02414eb323dac53dc07702861a9d4b63b6", "patch": "@@ -35,10 +35,10 @@ class MethodResolution\n {\n public:\n   static PathProbeCandidate *\n-  Select (std::vector<PathProbeCandidate> &candidates, TyTy::BaseType *receiver,\n-\t  std::vector<Adjustment> &adjustments)\n+  Select (std::vector<PathProbeCandidate> &candidates,\n+\t  const TyTy::BaseType *receiver, std::vector<Adjustment> &adjustments)\n   {\n-    TyTy::BaseType *r = receiver;\n+    const TyTy::BaseType *r = receiver;\n     while (true)\n       {\n \tPathProbeCandidate *c = nullptr;\n@@ -80,7 +80,8 @@ class MethodResolution\n \t// FIXME this needs to use deref trait and fall back to unsized to\n \t// remove array syntax\n \n-\tTyTy::ReferenceType *rr = static_cast<TyTy::ReferenceType *> (r);\n+\tconst TyTy::ReferenceType *rr\n+\t  = static_cast<const TyTy::ReferenceType *> (r);\n \tr = rr->get_base ();\n \tadjustments.push_back (\n \t  Adjustment (Adjustment::AdjustmentType::DEREF_REF, r));"}, {"sha": "83fafa66ee58e436dfddf6f46611c8fc11011cd2", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b0df02414eb323dac53dc07702861a9d4b63b6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b0df02414eb323dac53dc07702861a9d4b63b6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=a1b0df02414eb323dac53dc07702861a9d4b63b6", "patch": "@@ -219,7 +219,7 @@ class TypeCheckExpr : public TypeCheckBase\n \n     // in order to probe of the correct type paths we need the root type, which\n     // strips any references\n-    TyTy::BaseType *root = receiver_tyty->get_root ();\n+    const TyTy::BaseType *root = receiver_tyty->get_root ();\n \n     // https://doc.rust-lang.org/reference/expressions/method-call-expr.html\n     // method resolution is complex in rust once we start handling generics and\n@@ -297,7 +297,7 @@ class TypeCheckExpr : public TypeCheckBase\n \n     if (root->get_kind () == TyTy::TypeKind::ADT)\n       {\n-\tTyTy::ADTType *adt = static_cast<TyTy::ADTType *> (root);\n+\tconst TyTy::ADTType *adt = static_cast<const TyTy::ADTType *> (root);\n \tif (adt->has_substitutions () && fn->needs_substitution ())\n \t  {\n \t    // consider the case where we have:\n@@ -322,7 +322,8 @@ class TypeCheckExpr : public TypeCheckBase\n \t    auto s = fn->get_self_type ()->get_root ();\n \t    rust_assert (s->can_eq (adt, false));\n \t    rust_assert (s->get_kind () == TyTy::TypeKind::ADT);\n-\t    TyTy::ADTType *self_adt = static_cast<TyTy::ADTType *> (s);\n+\t    const TyTy::ADTType *self_adt\n+\t      = static_cast<const TyTy::ADTType *> (s);\n \n \t    // we need to grab the Self substitutions as the inherit type\n \t    // parameters for this"}, {"sha": "969360eadca5b9ee34eee9ecb3070a456f840d38", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b0df02414eb323dac53dc07702861a9d4b63b6/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b0df02414eb323dac53dc07702861a9d4b63b6/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=a1b0df02414eb323dac53dc07702861a9d4b63b6", "patch": "@@ -114,13 +114,13 @@ BaseType::inherit_bounds (\n     }\n }\n \n-BaseType *\n-BaseType::get_root ()\n+const BaseType *\n+BaseType::get_root () const\n {\n-  BaseType *root = this;\n+  const BaseType *root = this;\n   while (root->get_kind () == TyTy::REF)\n     {\n-      ReferenceType *r = static_cast<ReferenceType *> (root);\n+      const ReferenceType *r = static_cast<const ReferenceType *> (root);\n       root = r->get_base ();\n     }\n   return root;"}, {"sha": "f726069e9db54fcf444abbbc87b49fb3ab27109f", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1b0df02414eb323dac53dc07702861a9d4b63b6/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1b0df02414eb323dac53dc07702861a9d4b63b6/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=a1b0df02414eb323dac53dc07702861a9d4b63b6", "patch": "@@ -337,7 +337,7 @@ class BaseType : public TypeBoundsMappings\n \t\tdebug_str ().c_str ());\n   }\n \n-  BaseType *get_root ();\n+  const BaseType *get_root () const;\n \n protected:\n   BaseType (HirId ref, HirId ty_ref, TypeKind kind,"}]}