{"sha": "5ded72541370aaeb3dd3d07c46ad16302df0329f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRlZDcyNTQxMzcwYWFlYjNkZDNkMDdjNDZhZDE2MzAyZGYwMzI5Zg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2005-08-01T09:51:17Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2005-08-01T09:51:17Z"}, "message": "profile.c (compute_value_histograms): Fix thinko.\n\n\n\t* profile.c (compute_value_histograms): Fix thinko.\n\t* value-prof.c: Include toplev.h\n\t(check_counter): New function.\n\t(tree_divmod_fixed_value_transform, tree_mod_pow2_value_transform,\n\ttree_mod_subtract_transform): Add sanity check.\n\n\t* val-prof-5.c: New test.\n\nFrom-SVN: r102629", "tree": {"sha": "52b69359b3f87422c526ceaffce8a62c3eb41364", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52b69359b3f87422c526ceaffce8a62c3eb41364"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ded72541370aaeb3dd3d07c46ad16302df0329f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ded72541370aaeb3dd3d07c46ad16302df0329f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ded72541370aaeb3dd3d07c46ad16302df0329f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ded72541370aaeb3dd3d07c46ad16302df0329f/comments", "author": null, "committer": null, "parents": [{"sha": "a8f82ec4377e4a314ec3d602f8f1f603bd76b749", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8f82ec4377e4a314ec3d602f8f1f603bd76b749", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8f82ec4377e4a314ec3d602f8f1f603bd76b749"}], "stats": {"total": 64, "additions": 61, "deletions": 3}, "files": [{"sha": "3aeffc077a09c87bc1a1cf8349a03d63e2dd9d68", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ded72541370aaeb3dd3d07c46ad16302df0329f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ded72541370aaeb3dd3d07c46ad16302df0329f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ded72541370aaeb3dd3d07c46ad16302df0329f", "patch": "@@ -1,3 +1,11 @@\n+2005-08-01  Jan Hubicka  <jh@suse.cz>\n+\n+\t* profile.c (compute_value_histograms): Fix thinko.\n+\t* value-prof.c: Include toplev.h\n+\t(check_counter): New function.\n+\t(tree_divmod_fixed_value_transform, tree_mod_pow2_value_transform,\n+\ttree_mod_subtract_transform): Add sanity check.\n+\n 2005-08-01  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/23133"}, {"sha": "95448f076ff3b160e36174ccf6c8b991124cdbf8", "filename": "gcc/profile.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ded72541370aaeb3dd3d07c46ad16302df0329f/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ded72541370aaeb3dd3d07c46ad16302df0329f/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=5ded72541370aaeb3dd3d07c46ad16302df0329f", "patch": "@@ -651,14 +651,13 @@ compute_value_histograms (histogram_values values)\n   gcov_type *histogram_counts[GCOV_N_VALUE_COUNTERS];\n   gcov_type *act_count[GCOV_N_VALUE_COUNTERS];\n   gcov_type *aact_count;\n-  histogram_value hist = 0;\n  \n   for (t = 0; t < GCOV_N_VALUE_COUNTERS; t++)\n     n_histogram_counters[t] = 0;\n \n   for (i = 0; i < VEC_length (histogram_value, values); i++)\n     {\n-      hist = VEC_index (histogram_value, values, i);\n+      histogram_value hist = VEC_index (histogram_value, values, i);\n       n_histogram_counters[(int) hist->type] += hist->n_counters;\n     }\n \n@@ -683,10 +682,10 @@ compute_value_histograms (histogram_values values)\n \n   for (i = 0; i < VEC_length (histogram_value, values); i++)\n     {\n+      histogram_value hist = VEC_index (histogram_value, values, i);\n       tree stmt = hist->hvalue.stmt;\n       stmt_ann_t ann = get_stmt_ann (stmt);\n \n-      hist = VEC_index (histogram_value, values, i);\n       t = (int) hist->type;\n \n       aact_count = act_count[t];"}, {"sha": "a4dc061c663f9c545831c82d26922d41ab628b72", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ded72541370aaeb3dd3d07c46ad16302df0329f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ded72541370aaeb3dd3d07c46ad16302df0329f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5ded72541370aaeb3dd3d07c46ad16302df0329f", "patch": "@@ -1,3 +1,7 @@\n+2005-08-01  Jan Hubicka  <jh@suse.cz>\n+\n+\t* val-prof-5.c: New test.\n+\n 2005-08-01  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR c/22311"}, {"sha": "41a43c3a965c962d2750d2138c120ba4a6003c1d", "filename": "gcc/testsuite/gcc.dg/tree-prof/val-prof-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ded72541370aaeb3dd3d07c46ad16302df0329f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ded72541370aaeb3dd3d07c46ad16302df0329f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-5.c?ref=5ded72541370aaeb3dd3d07c46ad16302df0329f", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-options \"-O2 -fdump-tree-optimized -fdump-tree-tree_profile\" } */\n+int a[1000];\n+int b=997;\n+main()\n+{\n+\tint i;\n+\tfor (i = 0; i < 1000; i++)\n+\t\tif (a[i])\n+\t\t\ta[i]/=b;\n+\t\telse\n+\t\t\ta[i]/=b;\n+\treturn 0;\n+}\n+/* { dg-final-use { scan-tree-dump \"Div.mod by constant b..=997 transformation on insn\" \"tree_profile\"} } */\n+/* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"optimized\"} } */\n+/* { dg-final-use { cleanup-tree-dump \"optimized\" } } */\n+/* { dg-final-use { cleanup-tree-dump \"tree_profile\" } } */"}, {"sha": "7782fa3786df9e6634d4aff4d132bbb753b632b8", "filename": "gcc/value-prof.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ded72541370aaeb3dd3d07c46ad16302df0329f/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ded72541370aaeb3dd3d07c46ad16302df0329f/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=5ded72541370aaeb3dd3d07c46ad16302df0329f", "patch": "@@ -42,6 +42,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"gcov-io.h\"\n #include \"timevar.h\"\n #include \"tree-pass.h\"\n+#include \"toplev.h\"\n \n static struct value_prof_hooks *value_prof_hooks;\n \n@@ -85,6 +86,25 @@ static bool tree_divmod_fixed_value_transform (tree);\n static bool tree_mod_pow2_value_transform (tree);\n static bool tree_mod_subtract_transform (tree);\n \n+/* The overall number of invocations of the counter should match execution count\n+   of basic block.  Report it as error rather than internal error as it might\n+   mean that user has missused the profile somehow.  */\n+static bool\n+check_counter (tree stmt, const char * name, gcov_type all, gcov_type bb_count)\n+{\n+  if (all != bb_count)\n+    {\n+      location_t * locus;\n+      locus = (stmt != NULL && EXPR_HAS_LOCATION (stmt)\n+\t       ? EXPR_LOCUS (stmt)\n+\t       : &DECL_SOURCE_LOCATION (current_function_decl));\n+      error (\"%HCorrupted value profile: %s profiler overall count (%d) does not match BB count (%d)\",\n+\t     locus, name, (int)all, (int)bb_count);\n+      return true;\n+    }\n+  return false;\n+}\n+\n /* Tree based transformations. */\n static bool\n tree_value_profile_transformations (void)\n@@ -286,6 +306,9 @@ tree_divmod_fixed_value_transform (tree stmt)\n   if (simple_cst_equal (op2, value) != 1 || 2 * count < all)\n     return false;\n \n+  if (check_counter (stmt, \"value\", all, bb_for_stmt (stmt)->count))\n+    return false;\n+\n   /* Compute probability of taking the optimal path.  */\n   prob = (count * REG_BR_PROB_BASE + all / 2) / all;\n \n@@ -457,6 +480,9 @@ tree_mod_pow2_value_transform (tree stmt)\n \n   /* Compute probability of taking the optimal path.  */\n   all = count + wrong_values;\n+  if (check_counter (stmt, \"pow2\", all, bb_for_stmt (stmt)->count))\n+    return false;\n+\n   prob = (count * REG_BR_PROB_BASE + all / 2) / all;\n \n   result = tree_mod_pow2 (stmt, op, op1, op2, prob, count, all);\n@@ -631,6 +657,10 @@ tree_mod_subtract_transform (tree stmt)\n   wrong_values += histogram->hvalue.counters[i+1];\n   all += wrong_values;\n \n+  /* Compute probability of taking the optimal path.  */\n+  if (check_counter (stmt, \"interval\", all, bb_for_stmt (stmt)->count))\n+    return false;\n+\n   /* We require that we use just subtractions in at least 50% of all\n      evaluations.  */\n   count = 0;"}]}