{"sha": "61822835053e781234306e21ac787f066b26f59f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE4MjI4MzUwNTNlNzgxMjM0MzA2ZTIxYWM3ODdmMDY2YjI2ZjU5Zg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-08-19T16:15:54Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-08-19T16:15:54Z"}, "message": "haifa-sched.c: Make lots of variable static.\n\n        * haifa-sched.c: Make lots of variable static.\nJust cleaning stuff up.\n\nFrom-SVN: r14848", "tree": {"sha": "e2f8780b8398fe91624d5696e8c2ac89b3591adf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2f8780b8398fe91624d5696e8c2ac89b3591adf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61822835053e781234306e21ac787f066b26f59f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61822835053e781234306e21ac787f066b26f59f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61822835053e781234306e21ac787f066b26f59f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61822835053e781234306e21ac787f066b26f59f/comments", "author": null, "committer": null, "parents": [{"sha": "a94ce33311d4bbc1f98d6f55beb133616347c682", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a94ce33311d4bbc1f98d6f55beb133616347c682", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a94ce33311d4bbc1f98d6f55beb133616347c682"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "89814a562d882563bda846e70a21d7f33b5a1ea7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61822835053e781234306e21ac787f066b26f59f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61822835053e781234306e21ac787f066b26f59f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61822835053e781234306e21ac787f066b26f59f", "patch": "@@ -1,18 +1,20 @@\n-Mon Aug 18 21:49:02 1997  Jim Wilson  <wilson@cygnus.com>\n-\n-\t* reload.c (find_reloads): Add code to convert RELOAD_FOR_OPADDR_ADDR\n-\treloads to RELOAD_FOR_OPERAND_ADDRESS reloads.\n-\t* reload1.c: Undo bugfix from Aug 11.\n-\n Tue Aug 19 09:34:57 1997  Jeffrey A Law  (law@cygnus.com)\n \n \t* Makefile.in (EXPECT, RUNTEST, RUNTESTFLAGS): Define.\n \t(site.exp, check, check-g++, check-gcc): New targets.\n \n+\t* haifa-sched.c: Make lots of variable static.\n+\n Tue Aug 19 07:18:34 1997  H.J. Lu  (hjl@gnu.ai.mit.edu)\n \n \t* expr.h, real.h: Finish prototyping.\n \n+Mon Aug 18 21:49:02 1997  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* reload.c (find_reloads): Add code to convert RELOAD_FOR_OPADDR_ADDR\n+\treloads to RELOAD_FOR_OPERAND_ADDRESS reloads.\n+\t* reload1.c: Undo bugfix from Aug 11.\n+\n Mon Aug 18 17:39:02 1997  Mike Meissner  <meissner@cygnus.com>\n \n \t* configure.in ({powerpc,rs6000}*-*-*, --with-cpu): Remove single"}, {"sha": "0fab54ba5e2dfa32fd66b267409a5db0d51c41ac", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61822835053e781234306e21ac787f066b26f59f/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61822835053e781234306e21ac787f066b26f59f/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=61822835053e781234306e21ac787f066b26f59f", "patch": "@@ -182,7 +182,7 @@ extern rtx *reg_known_value;\n    solution.  (For understanding the mapping of bits to units, see\n    definition of function_units[] in \"insn-attrtab.c\") */\n \n-int target_units = 0;\n+static int target_units = 0;\n \n /* issue_rate is the number of insns that can be scheduled in the same\n    machine cycle.  It can be defined in the config/mach/mach.h file,\n@@ -586,8 +586,8 @@ typedef struct\n   }\n bitlst;\n \n-int bitlst_table_last;\n-int bitlst_table_size;\n+static int bitlst_table_last;\n+static int bitlst_table_size;\n static int *bitlst_table;\n \n static char bitset_member PROTO ((bitset, int, int));\n@@ -619,14 +619,14 @@ static candidate *candidate_table;\n \n    Lists of split and update blocks for  each candidate of the current\n    target  are  in  array bblst_table */\n-int *bblst_table, bblst_size, bblst_last;\n+static int *bblst_table, bblst_size, bblst_last;\n \n #define IS_VALID(src) ( candidate_table[src].is_valid )\n #define IS_SPECULATIVE(src) ( candidate_table[src].is_speculative )\n #define SRC_PROB(src) ( candidate_table[src].src_prob )\n \n /* The bb being currently scheduled.  */\n-int target_bb;\n+static int target_bb;\n \n /* List of edges.  */\n typedef bitlst edgelst;\n@@ -642,11 +642,11 @@ void debug_candidates PROTO ((int));\n typedef bitset bbset;\n \n /* Number of words of the bbset.  */\n-int bbset_size;\n+static int bbset_size;\n \n /* Dominators array: dom[i] contains the bbset of dominators of\n    bb i in the region.  */\n-bbset *dom;\n+static bbset *dom;\n \n /* bb 0 is the only region entry */\n #define IS_RGN_ENTRY(bb) (!bb)\n@@ -657,7 +657,7 @@ bbset *dom;\n \n /* Probability: Prob[i] is a float in [0, 1] which is the probability\n    of bb i relative to the region entry.  */\n-float *prob;\n+static float *prob;\n \n /*  The probability of bb_src, relative to bb_trg.  Note, that while the\n    'prob[bb]' is a float in [0, 1], this macro returns an integer\n@@ -669,16 +669,16 @@ float *prob;\n typedef bitset edgeset;\n \n /* Number of edges in the region.  */\n-int rgn_nr_edges;\n+static int rgn_nr_edges;\n \n /* Array of size rgn_nr_edges.    */\n-int *rgn_edges;\n+static int *rgn_edges;\n \n /* Number of words in an edgeset.    */\n-int edgeset_size;\n+static int edgeset_size;\n \n /* Mapping from each edge in the graph to its number in the rgn.  */\n-int *edge_to_bit;\n+static int *edge_to_bit;\n #define EDGE_TO_BIT(edge) (edge_to_bit[edge])\n \n /* The split edges of a source bb is different for each target\n@@ -687,10 +687,10 @@ int *edge_to_bit;\n    the split edges of each bb relative to the region entry.\n \n    pot_split[bb] is the set of potential split edges of bb.  */\n-edgeset *pot_split;\n+static edgeset *pot_split;\n \n /* For every bb, a set of its ancestor edges.  */\n-edgeset *ancestor_edges;\n+static edgeset *ancestor_edges;\n \n static void compute_dom_prob_ps PROTO ((int));\n "}]}