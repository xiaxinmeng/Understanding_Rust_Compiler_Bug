{"sha": "6d60b856e4228daa75ea3514bfcaf1664e2b56d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ2MGI4NTZlNDIyOGRhYTc1ZWEzNTE0YmZjYWYxNjY0ZTJiNTZkMw==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-07-27T15:55:23Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-07-27T15:55:23Z"}, "message": "[ARM] PR/63870 Add a __builtin_lane_check\n\n        * config/arm/arm-builtins.c (enum arm_builtins):\n        Add ARM_BUILTIN_NEON_BASE and ARM_BUILTIN_NEON_LANE_CHECK.\n        (ARM_BUILTIN_NEON_BASE): Rename macro to....\n        (ARM_BUILTIN_NEON_PATTERN_START): ...this.\n        (arm_init_neon_builtins): Register __builtin_arm_lane_check.\n        (arm_expand_neon_builtin): Handle ARM_BUILTIN_NEON_LANE_CHECK.\n\nFrom-SVN: r226252", "tree": {"sha": "24473b9cc956cab63f0782b09225caaa0a079651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24473b9cc956cab63f0782b09225caaa0a079651"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d60b856e4228daa75ea3514bfcaf1664e2b56d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d60b856e4228daa75ea3514bfcaf1664e2b56d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d60b856e4228daa75ea3514bfcaf1664e2b56d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d60b856e4228daa75ea3514bfcaf1664e2b56d3/comments", "author": null, "committer": null, "parents": [{"sha": "eaa80f646433fccf28ef3258a55ccaf8396cacc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaa80f646433fccf28ef3258a55ccaf8396cacc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaa80f646433fccf28ef3258a55ccaf8396cacc2"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "b7fca447d0ecde1b420729d83ba26576664e33a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d60b856e4228daa75ea3514bfcaf1664e2b56d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d60b856e4228daa75ea3514bfcaf1664e2b56d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d60b856e4228daa75ea3514bfcaf1664e2b56d3", "patch": "@@ -1,3 +1,13 @@\n+2015-07-27  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\tPR/63870\n+\t* config/arm/arm-builtins.c (enum arm_builtins):\n+\tAdd ARM_BUILTIN_NEON_BASE and ARM_BUILTIN_NEON_LANE_CHECK.\n+\t(ARM_BUILTIN_NEON_BASE): Rename macro to....\n+\t(ARM_BUILTIN_NEON_PATTERN_START): ...this.\n+\t(arm_init_neon_builtins): Register __builtin_arm_lane_check.\n+\t(arm_expand_neon_builtin): Handle ARM_BUILTIN_NEON_LANE_CHECK.\n+\n 2015-07-27  Alan Lawrence  <alan.lawrence@arm.com>\n \n \tPR/63870"}, {"sha": "030d8d194415b97aed646b58f272c98826026a85", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d60b856e4228daa75ea3514bfcaf1664e2b56d3/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d60b856e4228daa75ea3514bfcaf1664e2b56d3/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=6d60b856e4228daa75ea3514bfcaf1664e2b56d3", "patch": "@@ -532,12 +532,16 @@ enum arm_builtins\n #undef CRYPTO2\n #undef CRYPTO3\n \n+  ARM_BUILTIN_NEON_BASE,\n+  ARM_BUILTIN_NEON_LANE_CHECK = ARM_BUILTIN_NEON_BASE,\n+\n #include \"arm_neon_builtins.def\"\n \n   ARM_BUILTIN_MAX\n };\n \n-#define ARM_BUILTIN_NEON_BASE (ARM_BUILTIN_MAX - ARRAY_SIZE (neon_builtin_data))\n+#define ARM_BUILTIN_NEON_PATTERN_START \\\n+    (ARM_BUILTIN_MAX - ARRAY_SIZE (neon_builtin_data))\n \n #undef CF\n #undef VAR1\n@@ -896,7 +900,7 @@ arm_init_simd_builtin_scalar_types (void)\n static void\n arm_init_neon_builtins (void)\n {\n-  unsigned int i, fcode = ARM_BUILTIN_NEON_BASE;\n+  unsigned int i, fcode = ARM_BUILTIN_NEON_PATTERN_START;\n \n   arm_init_simd_builtin_types ();\n \n@@ -906,6 +910,15 @@ arm_init_neon_builtins (void)\n      system.  */\n   arm_init_simd_builtin_scalar_types ();\n \n+  tree lane_check_fpr = build_function_type_list (void_type_node,\n+\t\t\t\t\t\t  intSI_type_node,\n+\t\t\t\t\t\t  intSI_type_node,\n+\t\t\t\t\t\t  NULL);\n+  arm_builtin_decls[ARM_BUILTIN_NEON_LANE_CHECK] =\n+      add_builtin_function (\"__builtin_arm_lane_check\", lane_check_fpr,\n+\t\t\t    ARM_BUILTIN_NEON_LANE_CHECK, BUILT_IN_MD,\n+\t\t\t    NULL, NULL_TREE);\n+\n   for (i = 0; i < ARRAY_SIZE (neon_builtin_data); i++, fcode++)\n     {\n       bool print_type_signature_p = false;\n@@ -2169,14 +2182,31 @@ arm_expand_neon_args (rtx target, machine_mode map_mode, int fcode,\n   return target;\n }\n \n-/* Expand a Neon builtin. These are \"special\" because they don't have symbolic\n+/* Expand a Neon builtin, i.e. those registered only if TARGET_NEON holds.\n+   Most of these are \"special\" because they don't have symbolic\n    constants defined per-instruction or per instruction-variant. Instead, the\n    required info is looked up in the table neon_builtin_data.  */\n static rtx\n arm_expand_neon_builtin (int fcode, tree exp, rtx target)\n {\n+  if (fcode == ARM_BUILTIN_NEON_LANE_CHECK)\n+    {\n+      /* Builtin is only to check bounds of the lane passed to some intrinsics\n+\t that are implemented with gcc vector extensions in arm_neon.h.  */\n+\n+      tree nlanes = CALL_EXPR_ARG (exp, 0);\n+      gcc_assert (TREE_CODE (nlanes) == INTEGER_CST);\n+      rtx lane_idx = expand_normal (CALL_EXPR_ARG (exp, 1));\n+      if (CONST_INT_P (lane_idx))\n+\tneon_lane_bounds (lane_idx, 0, TREE_INT_CST_LOW (nlanes), exp);\n+      else\n+\terror (\"%Klane index must be a constant immediate\", exp);\n+      /* Don't generate any RTL.  */\n+      return const0_rtx;\n+    }\n+\n   neon_builtin_datum *d =\n-\t\t&neon_builtin_data[fcode - ARM_BUILTIN_NEON_BASE];\n+\t\t&neon_builtin_data[fcode - ARM_BUILTIN_NEON_PATTERN_START];\n   enum insn_code icode = d->code;\n   builtin_arg args[SIMD_MAX_BUILTIN_ARGS];\n   int num_args = insn_data[d->code].n_operands;"}]}