{"sha": "98450f0d22b8cb8a6af402eb649ad21eff64d9ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg0NTBmMGQyMmI4Y2I4YTZhZjQwMmViNjQ5YWQyMWVmZjY0ZDljZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2003-07-15T08:44:26Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2003-07-15T08:44:26Z"}, "message": "mips.h (PROCESSOR_R9000): New processor_type.\n\n\t* config/mips/mips.h (PROCESSOR_R9000): New processor_type.\n\t(TARGET_MIPS9000, TUNE_MIPS9000): New macros.\n\t(GENERATE_MULT3_SI): True for TARGET_MIPS9000.\n\t* config/mips/mips.c (mips_cpu_info_table): Add rm9000 entry.\n\t(mips_rtx_costs): Adjust integer multiplication costs for the rm9000.\n\t(mips_issue_rate): Handle PROCESSOR_R9000.\n\t(mips_use_dfa_pipeline_interface): Likewise.\n\t* config/mips/9000.md: New file.\n\t* config/mips/mips.md: Include it.\n\t(define_attr cpu): Add r9000.\n\t(mulsi3_mult3): Use \"mul\" for rm9000 code.\n\nFrom-SVN: r69397", "tree": {"sha": "1b9ae44e1108ca95d1c0fef1857469af614e7bd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b9ae44e1108ca95d1c0fef1857469af614e7bd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98450f0d22b8cb8a6af402eb649ad21eff64d9ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98450f0d22b8cb8a6af402eb649ad21eff64d9ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98450f0d22b8cb8a6af402eb649ad21eff64d9ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98450f0d22b8cb8a6af402eb649ad21eff64d9ce/comments", "author": null, "committer": null, "parents": [{"sha": "5fe25f470be08d020057b5bead4973a6f552ef74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fe25f470be08d020057b5bead4973a6f552ef74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fe25f470be08d020057b5bead4973a6f552ef74"}], "stats": {"total": 181, "additions": 180, "deletions": 1}, "files": [{"sha": "a6e307210af1ef0f74c7d6613a7c870c055b8efd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98450f0d22b8cb8a6af402eb649ad21eff64d9ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98450f0d22b8cb8a6af402eb649ad21eff64d9ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98450f0d22b8cb8a6af402eb649ad21eff64d9ce", "patch": "@@ -1,3 +1,17 @@\n+2003-07-15  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.h (PROCESSOR_R9000): New processor_type.\n+\t(TARGET_MIPS9000, TUNE_MIPS9000): New macros.\n+\t(GENERATE_MULT3_SI): True for TARGET_MIPS9000.\n+\t* config/mips/mips.c (mips_cpu_info_table): Add rm9000 entry.\n+\t(mips_rtx_costs): Adjust integer multiplication costs for the rm9000.\n+\t(mips_issue_rate): Handle PROCESSOR_R9000.\n+\t(mips_use_dfa_pipeline_interface): Likewise.\n+\t* config/mips/9000.md: New file.\n+\t* config/mips/mips.md: Include it.\n+\t(define_attr cpu): Add r9000.\n+\t(mulsi3_mult3): Use \"mul\" for rm9000 code.\n+\n 2003-07-15  Stan Cox  <scox@redhat.com>\n \n \t* config/mips/mips.h (PROCESSOR_R7000): New processor_type."}, {"sha": "124941b33ea7259f63e39dd4c10e955e2d5acd73", "filename": "gcc/config/mips/9000.md", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98450f0d22b8cb8a6af402eb649ad21eff64d9ce/gcc%2Fconfig%2Fmips%2F9000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98450f0d22b8cb8a6af402eb649ad21eff64d9ce/gcc%2Fconfig%2Fmips%2F9000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F9000.md?ref=98450f0d22b8cb8a6af402eb649ad21eff64d9ce", "patch": "@@ -0,0 +1,154 @@\n+;; DFA-based pipeline description for the RM9000.\n+;;   Copyright (C) 2003 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 2, or (at your\n+;; option) any later version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING.  If not, write to the\n+;; Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n+;; MA 02111-1307, USA.\n+\n+(define_automaton \"rm9k_main, rm9k_imul, rm9k_fdiv\")\n+\n+;; These units are for insns that can issue in either pipe.  We don't\n+;; want to use constructs like \"rm9k_m | rm9k_f_int\" since that would\n+;; needlessly make an insn prefer the M pipe.\n+(define_cpu_unit \"rm9k_any1\" \"rm9k_main\")\n+(define_cpu_unit \"rm9k_any2\" \"rm9k_main\")\n+\n+;; F and M pipe units, for instructions that must be issued by a\n+;; particular pipe.  Split the F pipe into two units so that integer\n+;; instructions can issue while the FPU is busy.  We don't need to\n+;; split M because it is only ever reserved for a single cycle.\n+(define_cpu_unit \"rm9k_m\" \"rm9k_main\")\n+(define_cpu_unit \"rm9k_f_int\" \"rm9k_main\")\n+(define_cpu_unit \"rm9k_f_float\" \"rm9k_main\")\n+\n+(exclusion_set \"rm9k_f_int\" \"rm9k_f_float\")\n+\n+;; Multiply/divide units.\n+(define_cpu_unit \"rm9k_imul\" \"rm9k_imul\")\n+(define_cpu_unit \"rm9k_fdiv\" \"rm9k_fdiv\")\n+\n+(define_insn_reservation \"rm9k_load\" 3\n+  (and (eq_attr \"cpu\" \"r9000\")\n+       (eq_attr \"type\" \"load\"))\n+  \"rm9k_m\")\n+\n+(define_insn_reservation \"rm9k_store\" 1\n+  (and (eq_attr \"cpu\" \"r9000\")\n+       (eq_attr \"type\" \"store\"))\n+  \"rm9k_m\")\n+\n+(define_insn_reservation \"rm9k_int\" 1\n+  (and (eq_attr \"cpu\" \"r9000\")\n+       (eq_attr \"type\" \"move,arith,darith,const,icmp,nop\"))\n+  \"rm9k_any1 | rm9k_any2\")\n+\n+(define_insn_reservation \"rm9k_int_cmove\" 2\n+  (and (eq_attr \"cpu\" \"r9000\")\n+       (and (eq_attr \"type\" \"condmove\")\n+\t    (eq_attr \"mode\" \"SI,DI\")))\n+  \"rm9k_any1 | rm9k_any2\")\n+\n+;; This applies to both 'mul' and 'mult'.\n+(define_insn_reservation \"rm9k_mulsi\" 3\n+  (and (eq_attr \"cpu\" \"r9000\")\n+       (and (eq_attr \"type\" \"imul,imadd\")\n+\t    (eq_attr \"mode\" \"!DI\")))\n+  \"rm9k_f_int\")\n+\n+(define_insn_reservation \"rm9k_muldi\" 7\n+  (and (eq_attr \"cpu\" \"r9000\")\n+       (and (eq_attr \"type\" \"imul,imadd\")\n+\t    (eq_attr \"mode\" \"DI\")))\n+  \"rm9k_f_int + rm9k_imul * 7\")\n+\n+(define_insn_reservation \"rm9k_divsi\" 38\n+  (and (eq_attr \"cpu\" \"r9000\")\n+       (and (eq_attr \"type\" \"idiv\")\n+\t    (eq_attr \"mode\" \"!DI\")))\n+  \"rm9k_f_int + rm9k_imul * 38\")\n+\n+(define_insn_reservation \"rm9k_divdi\" 70\n+  (and (eq_attr \"cpu\" \"r9000\")\n+       (and (eq_attr \"type\" \"idiv\")\n+\t    (eq_attr \"mode\" \"DI\")))\n+  \"rm9k_f_int + rm9k_imul * 70\")\n+\n+(define_insn_reservation \"rm9k_mfhilo\" 1\n+  (and (eq_attr \"cpu\" \"r9000\")\n+       (and (eq_attr \"type\" \"hilo\")\n+\t    (not (match_operand 0 \"hilo_operand\" \"\"))))\n+  \"rm9k_f_int\")\n+\n+(define_insn_reservation \"rm9k_mthilo\" 5\n+  (and (eq_attr \"cpu\" \"r9000\")\n+       (and (eq_attr \"type\" \"hilo\")\n+\t    (match_operand 0 \"hilo_operand\" \"\")))\n+  \"rm9k_f_int\")\n+\n+(define_insn_reservation \"rm9k_xfer\" 2\n+  (and (eq_attr \"cpu\" \"r9000\")\n+       (eq_attr \"type\" \"xfer\"))\n+  \"rm9k_m\")\n+\n+(define_insn_reservation \"rm9k_fquick\" 2\n+  (and (eq_attr \"cpu\" \"r9000\")\n+       (eq_attr \"type\" \"fabs,fneg,fcmp\"))\n+  \"rm9k_f_float\")\n+\n+(define_insn_reservation \"rm9k_fcmove\" 2\n+  (and (eq_attr \"cpu\" \"r9000\")\n+       (and (eq_attr \"type\" \"condmove\")\n+\t    (eq_attr \"mode\" \"SF,DF\")))\n+  \"rm9k_m\")\n+\n+(define_insn_reservation \"rm9k_fadd\" 6\n+  (and (eq_attr \"cpu\" \"r9000\")\n+       (eq_attr \"type\" \"fadd,fcvt\"))\n+  \"rm9k_f_float\")\n+\n+(define_insn_reservation \"rm9k_fmuls\" 6\n+  (and (eq_attr \"cpu\" \"r9000\")\n+       (and (eq_attr \"type\" \"fmul,fmadd\")\n+\t    (eq_attr \"mode\" \"SF\")))\n+  \"rm9k_f_float\")\n+\n+(define_insn_reservation \"rm9k_fmuld\" 9\n+  (and (eq_attr \"cpu\" \"r9000\")\n+       (and (eq_attr \"type\" \"fmul,fmadd\")\n+\t    (eq_attr \"mode\" \"DF\")))\n+  \"rm9k_f_float * 3\")\n+\n+(define_insn_reservation \"rm9k_fdivs\" 22\n+  (and (eq_attr \"cpu\" \"r9000\")\n+       (and (eq_attr \"type\" \"fdiv,fsqrt,frsqrt\")\n+\t    (eq_attr \"mode\" \"SF\")))\n+  \"rm9k_f_float + rm9k_fdiv * 22\")\n+\n+(define_insn_reservation \"rm9k_fdivd\" 37\n+  (and (eq_attr \"cpu\" \"r9000\")\n+       (and (eq_attr \"type\" \"fdiv,fsqrt,frsqrt\")\n+\t    (eq_attr \"mode\" \"DF\")))\n+  \"rm9k_f_float + rm9k_fdiv * 37\")\n+\n+(define_insn_reservation \"rm9k_branch\" 2\n+  (and (eq_attr \"cpu\" \"r9000\")\n+       (eq_attr \"type\" \"branch,jump,call\"))\n+  \"rm9k_any1 | rm9k_any2\")\n+\n+(define_insn_reservation \"rm9k_unknown\" 1\n+  (and (eq_attr \"cpu\" \"r9000\")\n+       (eq_attr \"type\" \"unknown,multi\"))\n+  \"rm9k_m + rm9k_f_int + rm9k_any1 + rm9k_any2\")"}, {"sha": "122e44bd1429a33f3fd8239a7a29fe528e23c00a", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98450f0d22b8cb8a6af402eb649ad21eff64d9ce/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98450f0d22b8cb8a6af402eb649ad21eff64d9ce/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=98450f0d22b8cb8a6af402eb649ad21eff64d9ce", "patch": "@@ -808,6 +808,7 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n   { \"vr5400\", PROCESSOR_R5400, 4 },\n   { \"vr5500\", PROCESSOR_R5500, 4 },\n   { \"rm7000\", PROCESSOR_R7000, 4 },\n+  { \"rm9000\", PROCESSOR_R9000, 4 },\n \n   /* MIPS32 */\n   { \"4kc\", PROCESSOR_4KC, 32 },\n@@ -2664,6 +2665,8 @@ mips_rtx_costs (x, code, outer_code, total)\n         *total = COSTS_N_INSNS ((mode == DImode) ? 4 : 3);\n       else if (TUNE_MIPS7000)\n         *total = COSTS_N_INSNS (mode == DImode ? 9 : 5);\n+      else if (TUNE_MIPS9000)\n+        *total = COSTS_N_INSNS (mode == DImode ? 8 : 3);\n       else if (TUNE_MIPS6000)\n         *total = COSTS_N_INSNS (17);\n       else if (TUNE_MIPS5000)\n@@ -10265,6 +10268,7 @@ mips_issue_rate ()\n     case PROCESSOR_R5400: return 2;\n     case PROCESSOR_R5500: return 2;\n     case PROCESSOR_R7000: return 2;\n+    case PROCESSOR_R9000: return 2;\n \n     default:\n       return 1;\n@@ -10285,6 +10289,7 @@ mips_use_dfa_pipeline_interface ()\n     case PROCESSOR_R5400:\n     case PROCESSOR_R5500:\n     case PROCESSOR_R7000:\n+    case PROCESSOR_R9000:\n     case PROCESSOR_SR71000:\n       return true;\n "}, {"sha": "5acc839d05fa20d3cda99eadfad3be692af0b6aa", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98450f0d22b8cb8a6af402eb649ad21eff64d9ce/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98450f0d22b8cb8a6af402eb649ad21eff64d9ce/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=98450f0d22b8cb8a6af402eb649ad21eff64d9ce", "patch": "@@ -67,6 +67,7 @@ enum processor_type {\n   PROCESSOR_R5500,\n   PROCESSOR_R7000,\n   PROCESSOR_R8000,\n+  PROCESSOR_R9000,\n   PROCESSOR_SB1,\n   PROCESSOR_SR71000\n };\n@@ -331,6 +332,7 @@ extern const struct mips_cpu_info *mips_tune_info;\n #define TARGET_MIPS5400             (mips_arch == PROCESSOR_R5400)\n #define TARGET_MIPS5500             (mips_arch == PROCESSOR_R5500)\n #define TARGET_MIPS7000             (mips_arch == PROCESSOR_R7000)\n+#define TARGET_MIPS9000             (mips_arch == PROCESSOR_R9000)\n #define TARGET_SB1                  (mips_arch == PROCESSOR_SB1)\n #define TARGET_SR71K                (mips_arch == PROCESSOR_SR71000)\n \n@@ -343,6 +345,7 @@ extern const struct mips_cpu_info *mips_tune_info;\n #define TUNE_MIPS5500               (mips_tune == PROCESSOR_R5500)\n #define TUNE_MIPS6000               (mips_tune == PROCESSOR_R6000)\n #define TUNE_MIPS7000               (mips_tune == PROCESSOR_R7000)\n+#define TUNE_MIPS9000               (mips_tune == PROCESSOR_R9000)\n #define TUNE_SB1                    (mips_tune == PROCESSOR_SB1)\n #define TUNE_SR71K                  (mips_tune == PROCESSOR_SR71000)\n \n@@ -766,6 +769,7 @@ extern const struct mips_cpu_info *mips_tune_info;\n                                   || TARGET_MIPS5400                    \\\n                                   || TARGET_MIPS5500                    \\\n                                   || TARGET_MIPS7000                    \\\n+                                  || TARGET_MIPS9000                    \\\n                                   || ISA_MIPS32\t                        \\\n                                   || ISA_MIPS32R2                       \\\n                                   || ISA_MIPS64)                        \\"}, {"sha": "a12892cd7d35dc5c20e16d7e8a7bc3abce5d5a55", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98450f0d22b8cb8a6af402eb649ad21eff64d9ce/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98450f0d22b8cb8a6af402eb649ad21eff64d9ce/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=98450f0d22b8cb8a6af402eb649ad21eff64d9ce", "patch": "@@ -195,7 +195,7 @@\n \n ;; ??? Fix everything that tests this attribute.\n (define_attr \"cpu\"\n-  \"default,4kc,5kc,20kc,m4k,r3000,r3900,r6000,r4000,r4100,r4111,r4120,r4300,r4600,r4650,r5000,r5400,r5500,r7000,r8000,sb1,sr71000\"\n+  \"default,4kc,5kc,20kc,m4k,r3000,r3900,r6000,r4000,r4100,r4111,r4120,r4300,r4600,r4650,r5000,r5400,r5500,r7000,r8000,r9000,sb1,sr71000\"\n   (const (symbol_ref \"mips_cpu_attr\")))\n \n ;; The type of hardware hazard associated with this instruction.\n@@ -624,6 +624,7 @@\n (include \"5400.md\")\n (include \"5500.md\")\n (include \"7000.md\")\n+(include \"9000.md\")\n (include \"sr71k.md\")\n \n \n@@ -1498,6 +1499,7 @@\n       || TARGET_MIPS5400\n       || TARGET_MIPS5500\n       || TARGET_MIPS7000\n+      || TARGET_MIPS9000\n       || ISA_MIPS32\n       || ISA_MIPS32R2\n       || ISA_MIPS64)"}]}