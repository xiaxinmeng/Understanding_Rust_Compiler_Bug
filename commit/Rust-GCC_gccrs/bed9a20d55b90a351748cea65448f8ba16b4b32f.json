{"sha": "bed9a20d55b90a351748cea65448f8ba16b4b32f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVkOWEyMGQ1NWI5MGEzNTE3NDhjZWE2NTQ0OGY4YmExNmI0YjMyZg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-01-16T00:51:45Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-01-16T00:51:45Z"}, "message": "locale_facets.tcc (num_put::do_put(bool): Fix.\n\n\n2002-01-15  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/locale_facets.tcc (num_put::do_put(bool): Fix.\n\t(num_put::do_put(void*)): Fix.\n\t* testsuite/22_locale/num_put_members_char.cc (test02): Add.\n\t* testsuite/22_locale/num_put_members_wchar_t.cc (test02): Add.\n\t* testsuite/22_locale/num_get_members_char.cc (test02): Add\n\tlong double, void, bool types.\n\t* testsuite/22_locale/num_get_members_wchar_t.cc (test02): Add.\n\nFrom-SVN: r48892", "tree": {"sha": "05cba8e7b5d79d4bdbdfbdd38bc28ceb7b9e441a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05cba8e7b5d79d4bdbdfbdd38bc28ceb7b9e441a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bed9a20d55b90a351748cea65448f8ba16b4b32f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bed9a20d55b90a351748cea65448f8ba16b4b32f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bed9a20d55b90a351748cea65448f8ba16b4b32f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bed9a20d55b90a351748cea65448f8ba16b4b32f/comments", "author": null, "committer": null, "parents": [{"sha": "9c874875a167bb023af5dd5b0f018757a65afb11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c874875a167bb023af5dd5b0f018757a65afb11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c874875a167bb023af5dd5b0f018757a65afb11"}], "stats": {"total": 315, "additions": 298, "deletions": 17}, "files": [{"sha": "a73de4fea9e8d5dd6115ef3259e3c2701cae3cbe", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed9a20d55b90a351748cea65448f8ba16b4b32f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed9a20d55b90a351748cea65448f8ba16b4b32f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bed9a20d55b90a351748cea65448f8ba16b4b32f", "patch": "@@ -1,3 +1,13 @@\n+2002-01-15  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/locale_facets.tcc (num_put::do_put(bool): Fix.\n+\t(num_put::do_put(void*)): Fix.\n+\t* testsuite/22_locale/num_put_members_char.cc (test02): Add.\n+\t* testsuite/22_locale/num_put_members_wchar_t.cc (test02): Add.\n+\t* testsuite/22_locale/num_get_members_char.cc (test02): Add\n+\tlong double, void, bool types.\n+\t* testsuite/22_locale/num_get_members_wchar_t.cc (test02): Add.\n+\t\n 2002-01-15  Benjamin Kosnik  <bkoz@redhat.com>\n \t    Alexandre Oliva  <aoliva@redhat.com>\n "}, {"sha": "083cb63c5ad818824117cb6e39870d384b65833e", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed9a20d55b90a351748cea65448f8ba16b4b32f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed9a20d55b90a351748cea65448f8ba16b4b32f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=bed9a20d55b90a351748cea65448f8ba16b4b32f", "patch": "@@ -939,7 +939,7 @@ namespace std\n       if ((__flags & ios_base::boolalpha) == 0)\n         {\n           unsigned long __uv = __v;\n-          _M_convert_int(__s, __io, __fill, 'u', char_type(), __uv);\n+          __s = _M_convert_int(__s, __io, __fill, 'u', char_type(), __uv);\n         }\n       else\n         {\n@@ -957,7 +957,7 @@ namespace std\n               __ws = __np.falsename().c_str();\n               __len = __np.falsename().size();\n             }\n-\t  _M_insert(__s, __io, __fill, __ws, __len); \n+\t  __s = _M_insert(__s, __io, __fill, __ws, __len); \n \t}\n       return __s;\n     }\n@@ -1015,8 +1015,8 @@ namespace std\n       __io.flags(__flags & __fmt | (ios_base::hex | ios_base::showbase));\n       try \n \t{\n-\t  _M_convert_int(__s, __io, __fill, 'u', char_type(),\n-\t\t\t reinterpret_cast<unsigned long>(__v));\n+\t  __s = _M_convert_int(__s, __io, __fill, 'u', char_type(),\n+\t\t\t       reinterpret_cast<unsigned long>(__v));\n \t  __io.flags(__flags);\n \t}\n       catch (...) "}, {"sha": "04824b048c3d2cfaac62e8892d81e82e4236b61f", "filename": "libstdc++-v3/testsuite/22_locale/num_get_members_char.cc", "status": "modified", "additions": 55, "deletions": 7, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed9a20d55b90a351748cea65448f8ba16b4b32f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed9a20d55b90a351748cea65448f8ba16b4b32f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_char.cc?ref=bed9a20d55b90a351748cea65448f8ba16b4b32f", "patch": "@@ -1,6 +1,6 @@\n // 2001-11-21 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001-2002 Free Software Foundation\n+// Copyright (C) 2001, 2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -242,27 +242,75 @@ void test02()\n   using namespace std;\n   bool test = true;\n \n-  // Num_get works with other iterators besides streambuf output iterators\n+  // Check num_get works with other iterators besides streambuf\n+  // output iterators. (As long as output_iterator requirements are met.)\n   typedef string::const_iterator iter_type;\n   typedef num_get<char, iter_type> num_get_type;\n   const ios_base::iostate goodbit = ios_base::goodbit;\n   const ios_base::iostate eofbit = ios_base::eofbit;\n   ios_base::iostate err = ios_base::goodbit;\n   const locale loc_c = locale::classic();\n+  const string str(\"20000106 Elizabeth Durack\");\n+  const string str2(\"0 true 0xbffff74c Durack\");\n \n-  long i = 0;\n-  const string str = \"20000106 Elizabeth Durack\";\n   istringstream iss; // need an ios, add my num_get facet\n   iss.imbue(locale(loc_c, new num_get_type));\n \n   // Iterator advanced, state, output.\n   const num_get_type& ng = use_facet<num_get_type>(iss.getloc());\n-  iter_type end = ng.get(str.begin(), str.end(), iss, err, i);\n-  string rem(end, str.end());\n \n+  // 01 get(long)\n+  // 02 get(long double)\n+  // 03 get(bool)\n+  // 04 get(void*)\n+\n+  // 01 get(long)\n+  long i = 0;\n+  err = goodbit;\n+  iter_type end1 = ng.get(str.begin(), str.end(), iss, err, i);\n+  string rem1(end1, str.end());\n   VERIFY( err == goodbit );\n   VERIFY( i == 20000106);\n-  VERIFY( rem == \" Elizabeth Durack\" );\n+  VERIFY( rem1 == \" Elizabeth Durack\" );\n+\n+  // 02 get(long double)\n+  long double ld = 0;\n+  err = goodbit;\n+  iter_type end2 = ng.get(str.begin(), str.end(), iss, err, ld);\n+  string rem2(end2, str.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( ld == 20000106);\n+  VERIFY( rem2 == \" Elizabeth Durack\" );\n+\n+  // 03 get(bool)\n+  bool b = 1;\n+  iss.clear();\n+  err = goodbit;\n+  iter_type end3 = ng.get(str2.begin(), str2.end(), iss, err, b);\n+  string rem3(end3, str2.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( b == 0 );\n+  VERIFY( rem3 == \" true 0xbffff74c Durack\" );\n+\n+  iss.clear();\n+  err = goodbit;\n+  iss.setf(ios_base::boolalpha);\n+  iter_type end4 = ng.get(++end3, str2.end(), iss, err, b);\n+  string rem4(end4, str2.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( b == true );\n+  VERIFY( rem4 == \" 0xbffff74c Durack\" );\n+\n+  // 04 get(void*)\n+  void* v;\n+  iss.clear();\n+  err = goodbit;\n+  iss.setf(ios_base::fixed, ios_base::floatfield);\n+  iter_type end5 = ng.get(++end4, str2.end(), iss, err, v);\n+  string rem5(end5, str2.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( b == true );\n+  VERIFY( rem5 == \" Durack\" );\n }\n \n int main()"}, {"sha": "cbb27cc6215101318e52298679082ad816b09252", "filename": "libstdc++-v3/testsuite/22_locale/num_get_members_wchar_t.cc", "status": "modified", "additions": 85, "deletions": 1, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed9a20d55b90a351748cea65448f8ba16b4b32f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed9a20d55b90a351748cea65448f8ba16b4b32f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_wchar_t.cc?ref=bed9a20d55b90a351748cea65448f8ba16b4b32f", "patch": "@@ -1,6 +1,6 @@\n // 2001-11-26 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001, 2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -235,16 +235,100 @@ void test01()\n   VERIFY( err == eofbit );\n #endif\n }\n+\n+// 2002-01-10  David Seymour  <seymour_dj@yahoo.com>\n+// libstdc++/5331\n+void test02()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // Check num_get works with other iterators besides streambuf\n+  // output iterators. (As long as output_iterator requirements are met.)\n+  typedef wstring::const_iterator iter_type;\n+  typedef num_get<wchar_t, iter_type> num_get_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  ios_base::iostate err = ios_base::goodbit;\n+  const locale loc_c = locale::classic();\n+  const wstring str(L\"20000106 Elizabeth Durack\");\n+  const wstring str2(L\"0 true 0xbffff74c Durack\");\n+\n+  istringstream iss; // need an ios, add my num_get facet\n+  iss.imbue(locale(loc_c, new num_get_type));\n+\n+  // Iterator advanced, state, output.\n+  const num_get_type& ng = use_facet<num_get_type>(iss.getloc());\n+\n+  // 01 get(long)\n+  // 02 get(long double)\n+  // 03 get(bool)\n+  // 04 get(void*)\n+\n+  // 01 get(long)\n+  long i = 0;\n+  err = goodbit;\n+  iter_type end1 = ng.get(str.begin(), str.end(), iss, err, i);\n+  wstring rem1(end1, str.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( i == 20000106);\n+  VERIFY( rem1 == L\" Elizabeth Durack\" );\n+\n+  // 02 get(long double)\n+  long double ld = 0;\n+  err = goodbit;\n+  iter_type end2 = ng.get(str.begin(), str.end(), iss, err, ld);\n+  wstring rem2(end2, str.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( ld == 20000106);\n+  VERIFY( rem2 == L\" Elizabeth Durack\" );\n+\n+  // 03 get(bool)\n+  //  const string str2(\"0 true 0xbffff74c Durack\");\n+  bool b = 1;\n+  iss.clear();\n+  err = goodbit;\n+  iter_type end3 = ng.get(str2.begin(), str2.end(), iss, err, b);\n+  wstring rem3(end3, str2.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( b == 0 );\n+  VERIFY( rem3 == L\" true 0xbffff74c Durack\" );\n+\n+  iss.clear();\n+  err = goodbit;\n+  iss.setf(ios_base::boolalpha);\n+  iter_type end4 = ng.get(++end3, str2.end(), iss, err, b);\n+  wstring rem4(end4, str2.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( b == true );\n+  VERIFY( rem4 == L\" 0xbffff74c Durack\" );\n+\n+  // 04 get(void*)\n+  void* v;\n+  iss.clear();\n+  err = goodbit;\n+  iss.setf(ios_base::fixed, ios_base::floatfield);\n+  iter_type end5 = ng.get(++end4, str2.end(), iss, err, v);\n+  wstring rem5(end5, str2.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( b == true );\n+  VERIFY( rem5 == L\" Durack\" );\n+}\n #endif\n \n int main()\n {\n #ifdef _GLIBCPP_USE_WCHAR_T\n   test01();\n+  test02();\n #endif\n   return 0;\n }\n \n \n // Kathleen Hannah, humanitarian, woman, art-thief\n \n+\n+\n+\n+"}, {"sha": "1ca5163f37fddb23eaa412e3d575678bc88d40ae", "filename": "libstdc++-v3/testsuite/22_locale/num_put_members_char.cc", "status": "modified", "additions": 72, "deletions": 4, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed9a20d55b90a351748cea65448f8ba16b4b32f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed9a20d55b90a351748cea65448f8ba16b4b32f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_char.cc?ref=bed9a20d55b90a351748cea65448f8ba16b4b32f", "patch": "@@ -1,6 +1,6 @@\n // 2001-11-19 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001, 2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -219,12 +219,80 @@ void test01()\n #endif\n }\n \n+void test02()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // Check num_put works with other iterators besides streambuf\n+  // output iterators. (As long as output_iterator requirements are met.)\n+  typedef string::iterator iter_type;\n+  typedef char_traits<char> traits;\n+  typedef num_put<char, iter_type> num_put_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  const locale loc_c = locale::classic();\n+  const string str(\"1798 Lady Elgin\");\n+  const string str2(\"0 true 0xbffff74c Mary Nisbet\");\n+  const string x(15, 'x'); // have to have allocated string!\n+  string res;\n+\n+  ostringstream oss; \n+  oss.imbue(locale(loc_c, new num_put_type));\n+\n+  // Iterator advanced, state, output.\n+  const num_put_type& tp = use_facet<num_put_type>(oss.getloc());\n+\n+  // 01 put(long)\n+  // 02 put(long double)\n+  // 03 put(bool)\n+  // 04 put(void*)\n+\n+  // 01 put(long)\n+  const long l = 1798;\n+  res = x;\n+  iter_type ret1 = tp.put(res.begin(), oss, ' ', l);\n+  string sanity1(res.begin(), ret1);\n+  VERIFY( res == \"1798xxxxxxxxxxx\" );\n+  VERIFY( sanity1 == \"1798\" );\n+\n+  // 02 put(long double)\n+  const long double ld = 1798;\n+  res = x;\n+  iter_type ret2 = tp.put(res.begin(), oss, ' ', ld);\n+  string sanity2(res.begin(), ret2);\n+  VERIFY( res == \"1798xxxxxxxxxxx\" );\n+  VERIFY( sanity2 == \"1798\" );\n+\n+  // 03 put(bool)\n+  bool b = 1;\n+  res = x;\n+  iter_type ret3 = tp.put(res.begin(), oss, ' ', b);\n+  string sanity3(res.begin(), ret3);\n+  VERIFY( res == \"1xxxxxxxxxxxxxx\" );\n+  VERIFY( sanity3 == \"1\" );\n+\n+  b = 0;\n+  res = x;\n+  oss.setf(ios_base::boolalpha);\n+  iter_type ret4 = tp.put(res.begin(), oss, ' ', b);\n+  string sanity4(res.begin(), ret4);\n+  VERIFY( res == \"falsexxxxxxxxxx\" );\n+  VERIFY( sanity4 == \"false\" );\n+\n+  // 04 put(void*)\n+  oss.clear();\n+  const void* cv = &ld;\n+  res = x;\n+  oss.setf(ios_base::fixed, ios_base::floatfield);\n+  iter_type ret5 = tp.put(res.begin(), oss, ' ', cv);\n+  string sanity5(res.begin(), ret5);\n+  VERIFY( !char_traits<char>::find(sanity5.c_str(), 'x', sanity5.size()) );\n+}\n \n int main()\n {\n   test01();\n+  test02();\n   return 0;\n }\n-\n-\n-"}, {"sha": "d502ee42ecb905edc5bfc1c0738b30a9971ff475", "filename": "libstdc++-v3/testsuite/22_locale/num_put_members_wchar_t.cc", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed9a20d55b90a351748cea65448f8ba16b4b32f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed9a20d55b90a351748cea65448f8ba16b4b32f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_wchar_t.cc?ref=bed9a20d55b90a351748cea65448f8ba16b4b32f", "patch": "@@ -1,6 +1,6 @@\n // 2001-11-19 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001, 2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -219,12 +219,83 @@ void test01()\n   VERIFY( result1 == L\"9.223.372.036.854.775.807\" );\n #endif\n }\n+void test02()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // Check num_put works with other iterators besides streambuf\n+  // output iterators. (As long as output_iterator requirements are met.)\n+  typedef wstring::iterator iter_type;\n+  typedef char_traits<wchar_t> traits;\n+  typedef num_put<wchar_t, iter_type> num_put_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  const locale loc_c = locale::classic();\n+  const wstring str(L\"1798 Lady Elgin\");\n+  const wstring str2(L\"0 true 0xbffff74c Mary Nisbet\");\n+  const wstring x(15, L'x'); // have to have allocated string!\n+  wstring res;\n+\n+  wostringstream oss; \n+  oss.imbue(locale(loc_c, new num_put_type));\n+\n+  // Iterator advanced, state, output.\n+  const num_put_type& tp = use_facet<num_put_type>(oss.getloc());\n+\n+  // 01 put(long)\n+  // 02 put(long double)\n+  // 03 put(bool)\n+  // 04 put(void*)\n+\n+  // 01 put(long)\n+  const long l = 1798;\n+  res = x;\n+  iter_type ret1 = tp.put(res.begin(), oss, L' ', l);\n+  wstring sanity1(res.begin(), ret1);\n+  VERIFY( res == L\"1798xxxxxxxxxxx\" );\n+  VERIFY( sanity1 == L\"1798\" );\n+\n+  // 02 put(long double)\n+  const long double ld = 1798;\n+  res = x;\n+  iter_type ret2 = tp.put(res.begin(), oss, L' ', ld);\n+  wstring sanity2(res.begin(), ret2);\n+  VERIFY( res == L\"1798xxxxxxxxxxx\" );\n+  VERIFY( sanity2 == L\"1798\" );\n+\n+  // 03 put(bool)\n+  bool b = 1;\n+  res = x;\n+  iter_type ret3 = tp.put(res.begin(), oss, L' ', b);\n+  wstring sanity3(res.begin(), ret3);\n+  VERIFY( res == L\"1xxxxxxxxxxxxxx\" );\n+  VERIFY( sanity3 == L\"1\" );\n+\n+  b = 0;\n+  res = x;\n+  oss.setf(ios_base::boolalpha);\n+  iter_type ret4 = tp.put(res.begin(), oss, L' ', b);\n+  wstring sanity4(res.begin(), ret4);\n+  VERIFY( res == L\"falsexxxxxxxxxx\" );\n+  VERIFY( sanity4 == L\"false\" );\n+\n+  // 04 put(void*)\n+  oss.clear();\n+  const void* cv = &ld;\n+  res = x;\n+  oss.setf(ios_base::fixed, ios_base::floatfield);\n+  iter_type ret5 = tp.put(res.begin(), oss, L' ', cv);\n+  wstring sanity5(res.begin(), ret5);\n+  VERIFY( !char_traits<wchar_t>::find(sanity5.c_str(), L'x', sanity5.size()) );\n+}\n #endif\n \n int main()\n {\n #ifdef _GLIBCPP_USE_WCHAR_T\n   test01();\n+  test02();\n #endif\n   return 0;\n }"}]}