{"sha": "e195c8045a1f3604f0f6b339e9ff731ebd9dcb0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE5NWM4MDQ1YTFmMzYwNGYwZjZiMzM5ZTlmZjczMWViZDlkY2IwZQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-06-26T09:52:07Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-06-26T11:40:16Z"}, "message": "coroutines: Handle bad g-r-o-o-a-f cases.\n\nIf we see a get_return_object_on_allocation_failure in the\npromise, we expect to be able to use it.  If this isn't\npossible (because of some error in the declaration) then we\nneed to handle the erroneous return to allow following code\nto complete.\n\ngcc/cp/ChangeLog:\n\n\t* coroutines.cc (morph_fn_to_coro): Handle error\n\treturns in building g-r-o-o-a-f expressions.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/coroutines/coro1-allocators.h (BAD_GROOAF_STATIC):\n\tNew.\n\t* g++.dg/coroutines/coro-bad-grooaf-00-static.C: New test.", "tree": {"sha": "7fb5eb0074fd3aa582864d0ffd646dd86a623679", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fb5eb0074fd3aa582864d0ffd646dd86a623679"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e195c8045a1f3604f0f6b339e9ff731ebd9dcb0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e195c8045a1f3604f0f6b339e9ff731ebd9dcb0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e195c8045a1f3604f0f6b339e9ff731ebd9dcb0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e195c8045a1f3604f0f6b339e9ff731ebd9dcb0e/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b959c22bc0158faa359a5899bf46e815dc65290", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b959c22bc0158faa359a5899bf46e815dc65290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b959c22bc0158faa359a5899bf46e815dc65290"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "ad27659223119966a656a0333bb4c6df1fbdaf4f", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e195c8045a1f3604f0f6b339e9ff731ebd9dcb0e/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e195c8045a1f3604f0f6b339e9ff731ebd9dcb0e/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=e195c8045a1f3604f0f6b339e9ff731ebd9dcb0e", "patch": "@@ -3932,6 +3932,11 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n \t\t\t\t    NULL_TREE, LOOKUP_NORMAL, NULL,\n \t\t\t\t    tf_warning_or_error);\n \n+  /* ... but if that fails, returning an error, the later stages can't handle\n+     the erroneous expression, so we reset the call as if it was absent.  */\n+  if (grooaf == error_mark_node)\n+    grooaf = NULL_TREE;\n+\n   /* Allocate the frame, this has several possibilities:\n      [dcl.fct.def.coroutine] / 9 (part 1)\n      The allocation function\u2019s name is looked up in the scope of the promise"}, {"sha": "e7d04346d576eef3d24aed5124fb7e955799f7bf", "filename": "gcc/testsuite/g++.dg/coroutines/coro-bad-grooaf-00-static.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e195c8045a1f3604f0f6b339e9ff731ebd9dcb0e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-bad-grooaf-00-static.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e195c8045a1f3604f0f6b339e9ff731ebd9dcb0e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-bad-grooaf-00-static.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-bad-grooaf-00-static.C?ref=e195c8045a1f3604f0f6b339e9ff731ebd9dcb0e", "patch": "@@ -0,0 +1,15 @@\n+/* g-r-o-o-a-f should be static.  */\n+\n+#define BAD_GROOAF_STATIC\n+#define PROVIDE_GROOAF\n+#include \"coro1-allocators.h\"\n+\n+int used_grooaf = 0;\n+\n+struct coro1\n+f () noexcept\n+{\n+  PRINT (\"coro1: about to return\");\n+  co_return;\n+} // { dg-error {cannot call member function 'coro1 coro1::promise_type::get_return_object_on_allocation_failure\\(\\)' without object} }\n+"}, {"sha": "f7a85e9e671d5cc1093c51eb878248b6c6f36a25", "filename": "gcc/testsuite/g++.dg/coroutines/coro1-allocators.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e195c8045a1f3604f0f6b339e9ff731ebd9dcb0e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro1-allocators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e195c8045a1f3604f0f6b339e9ff731ebd9dcb0e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro1-allocators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro1-allocators.h?ref=e195c8045a1f3604f0f6b339e9ff731ebd9dcb0e", "patch": "@@ -172,8 +172,11 @@ struct coro1 {\n   }\n #endif\n \n+#ifndef BAD_GROOAF_STATIC\n+# define BAD_GROOAF_STATIC static\n+#endif\n #ifdef PROVIDE_GROOAF\n-  static coro1 get_return_object_on_allocation_failure () noexcept {\n+  BAD_GROOAF_STATIC coro1 get_return_object_on_allocation_failure () noexcept {\n     PRINT (\"alloc fail return\");\n     used_grooaf++;\n     return coro1 (nullptr);"}]}