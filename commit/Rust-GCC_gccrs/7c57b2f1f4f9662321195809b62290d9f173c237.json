{"sha": "7c57b2f1f4f9662321195809b62290d9f173c237", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M1N2IyZjFmNGY5NjYyMzIxMTk1ODA5YjYyMjkwZDlmMTczYzIzNw==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-05-23T08:25:05Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-05-23T08:25:05Z"}, "message": "re PR fortran/32046 (wrong code with -O2 for gfortran.dg/interface_12.f90 & result_in_spec_1.f90)\n\n\tPR fortran/32046\n\t* trans-expr.c (gfc_trans_zero_assign): Convert the result of\n\tTYPE_SIZE_UNIT into a signed type.\n\t(gfc_trans_array_copy):  Likewise.\n\t(gfc_trans_array_constructor_copy): Likewise.\n\t* trans-array.c (gfc_trans_create_temp_array): Likewise.\n\t(gfc_grow_array): Likewise.\n\t(gfc_array_init_size): Likewise.\n\t(gfc_duplicate_allocatable): Likewise.\n\t* trans-stmt.c (allocate_temp_for_forall_nest_1): Likewise.\n\nFrom-SVN: r124985", "tree": {"sha": "c2f6105c7efa6a1cabed4d61f20857cf14412dac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2f6105c7efa6a1cabed4d61f20857cf14412dac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c57b2f1f4f9662321195809b62290d9f173c237", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c57b2f1f4f9662321195809b62290d9f173c237", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c57b2f1f4f9662321195809b62290d9f173c237", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c57b2f1f4f9662321195809b62290d9f173c237/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d0ceb7638fa91572e3fb39d957f0ff404bc4619", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d0ceb7638fa91572e3fb39d957f0ff404bc4619", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d0ceb7638fa91572e3fb39d957f0ff404bc4619"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "a53691c95059d9f7324ade595c823a7047b84fb3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c57b2f1f4f9662321195809b62290d9f173c237/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c57b2f1f4f9662321195809b62290d9f173c237/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7c57b2f1f4f9662321195809b62290d9f173c237", "patch": "@@ -1,3 +1,16 @@\n+2007-05-23  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/32046\n+\t* trans-expr.c (gfc_trans_zero_assign): Convert the result of\n+\tTYPE_SIZE_UNIT into a signed type.\n+\t(gfc_trans_array_copy):  Likewise.\n+\t(gfc_trans_array_constructor_copy): Likewise.\n+\t* trans-array.c (gfc_trans_create_temp_array): Likewise.\n+\t(gfc_grow_array): Likewise.\n+\t(gfc_array_init_size): Likewise.\n+\t(gfc_duplicate_allocatable): Likewise.\n+\t* trans-stmt.c (allocate_temp_for_forall_nest_1): Likewise.\n+\n 2007-05-22  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/18923"}, {"sha": "6c7ea6c543952a6f5cd6828f87caa7e2ecae58ee", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c57b2f1f4f9662321195809b62290d9f173c237/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c57b2f1f4f9662321195809b62290d9f173c237/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=7c57b2f1f4f9662321195809b62290d9f173c237", "patch": "@@ -687,7 +687,8 @@ gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post,\n \n       nelem = size;\n       size = fold_build2 (MULT_EXPR, gfc_array_index_type, size,\n-\t\t\t  TYPE_SIZE_UNIT (gfc_get_element_type (type)));\n+\t\tfold_convert (gfc_array_index_type,\n+\t\t\t      TYPE_SIZE_UNIT (gfc_get_element_type (type))));\n     }\n   else\n     {\n@@ -838,7 +839,8 @@ gfc_grow_array (stmtblock_t * pblock, tree desc, tree extra)\n   /* Calculate the new array size.  */\n   size = TYPE_SIZE_UNIT (gfc_get_element_type (TREE_TYPE (desc)));\n   tmp = build2 (PLUS_EXPR, gfc_array_index_type, ubound, gfc_index_one_node);\n-  arg1 = build2 (MULT_EXPR, gfc_array_index_type, tmp, size);\n+  arg1 = build2 (MULT_EXPR, gfc_array_index_type, tmp,\n+\t\t fold_convert (gfc_array_index_type, size));\n \n   /* Pick the appropriate realloc function.  */\n   if (gfc_index_integer_kind == 4)\n@@ -3427,7 +3429,8 @@ gfc_array_init_size (tree descriptor, int rank, tree * poffset,\n   /* The stride is the number of elements in the array, so multiply by the\n      size of an element to get the total size.  */\n   tmp = TYPE_SIZE_UNIT (gfc_get_element_type (type));\n-  size = fold_build2 (MULT_EXPR, gfc_array_index_type, stride, tmp);\n+  size = fold_build2 (MULT_EXPR, gfc_array_index_type, stride,\n+\t\t      fold_convert (gfc_array_index_type, tmp));\n \n   if (poffset != NULL)\n     {\n@@ -4960,7 +4963,8 @@ gfc_duplicate_allocatable(tree dest, tree src, tree type, int rank)\n \n   nelems = get_full_array_size (&block, src, rank);\n   size = fold_build2 (MULT_EXPR, gfc_array_index_type, nelems,\n-\t\t      TYPE_SIZE_UNIT (gfc_get_element_type (type)));\n+\t\t      fold_convert (gfc_array_index_type,\n+\t\t\t\t    TYPE_SIZE_UNIT (gfc_get_element_type (type))));\n \n   /* Allocate memory to the destination.  */\n   tmp = gfc_call_malloc (&block, TREE_TYPE (gfc_conv_descriptor_data_get (src)),"}, {"sha": "527a44b9f3c548741a662d2d100262196fb17eae", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c57b2f1f4f9662321195809b62290d9f173c237/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c57b2f1f4f9662321195809b62290d9f173c237/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=7c57b2f1f4f9662321195809b62290d9f173c237", "patch": "@@ -3619,8 +3619,9 @@ gfc_trans_zero_assign (gfc_expr * expr)\n   if (!len || TREE_CODE (len) != INTEGER_CST)\n     return NULL_TREE;\n \n+  tmp = TYPE_SIZE_UNIT (gfc_get_element_type (type));\n   len = fold_build2 (MULT_EXPR, gfc_array_index_type, len,\n-                     TYPE_SIZE_UNIT (gfc_get_element_type (type)));\n+\t\t     fold_convert (gfc_array_index_type, tmp));\n \n   /* Convert arguments to the correct types.  */\n   if (!POINTER_TYPE_P (TREE_TYPE (dest)))\n@@ -3673,6 +3674,7 @@ gfc_trans_array_copy (gfc_expr * expr1, gfc_expr * expr2)\n {\n   tree dst, dlen, dtype;\n   tree src, slen, stype;\n+  tree tmp;\n \n   dst = gfc_get_symbol_decl (expr1->symtree->n.sym);\n   src = gfc_get_symbol_decl (expr2->symtree->n.sym);\n@@ -3691,14 +3693,16 @@ gfc_trans_array_copy (gfc_expr * expr1, gfc_expr * expr2)\n   dlen = GFC_TYPE_ARRAY_SIZE (dtype);\n   if (!dlen || TREE_CODE (dlen) != INTEGER_CST)\n     return NULL_TREE;\n+  tmp = TYPE_SIZE_UNIT (gfc_get_element_type (dtype));\n   dlen = fold_build2 (MULT_EXPR, gfc_array_index_type, dlen,\n-\t\t      TYPE_SIZE_UNIT (gfc_get_element_type (dtype)));\n+\t\t      fold_convert (gfc_array_index_type, tmp));\n \n   slen = GFC_TYPE_ARRAY_SIZE (stype);\n   if (!slen || TREE_CODE (slen) != INTEGER_CST)\n     return NULL_TREE;\n+  tmp = TYPE_SIZE_UNIT (gfc_get_element_type (stype));\n   slen = fold_build2 (MULT_EXPR, gfc_array_index_type, slen,\n-\t\t      TYPE_SIZE_UNIT (gfc_get_element_type (stype)));\n+\t\t      fold_convert (gfc_array_index_type, tmp));\n \n   /* Sanity check that they are the same.  This should always be\n      the case, as we should already have checked for conformance.  */\n@@ -3720,6 +3724,7 @@ gfc_trans_array_constructor_copy (gfc_expr * expr1, gfc_expr * expr2)\n   tree dst, dtype;\n   tree src, stype;\n   tree len;\n+  tree tmp;\n \n   nelem = gfc_constant_array_constructor_p (expr2->value.constructor);\n   if (nelem == 0)\n@@ -3741,8 +3746,9 @@ gfc_trans_array_constructor_copy (gfc_expr * expr1, gfc_expr * expr2)\n   if (compare_tree_int (len, nelem) != 0)\n     return NULL_TREE;\n \n+  tmp = TYPE_SIZE_UNIT (gfc_get_element_type (dtype));\n   len = fold_build2 (MULT_EXPR, gfc_array_index_type, len,\n-\t\t     TYPE_SIZE_UNIT (gfc_get_element_type (dtype)));\n+\t\t     fold_convert (gfc_array_index_type, tmp));\n \n   stype = gfc_typenode_for_spec (&expr2->ts);\n   src = gfc_build_constant_array_constructor (expr2, stype);"}, {"sha": "ec7548e21bcb6063a444e408c9163eed4b222798", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c57b2f1f4f9662321195809b62290d9f173c237/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c57b2f1f4f9662321195809b62290d9f173c237/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=7c57b2f1f4f9662321195809b62290d9f173c237", "patch": "@@ -2086,7 +2086,7 @@ allocate_temp_for_forall_nest_1 (tree type, tree size, stmtblock_t * block,\n   tree unit;\n   tree tmp;\n \n-  unit = TYPE_SIZE_UNIT (type);\n+  unit = fold_convert (gfc_array_index_type, TYPE_SIZE_UNIT (type));\n   if (!integer_onep (unit))\n     bytesize = fold_build2 (MULT_EXPR, gfc_array_index_type, size, unit);\n   else"}]}