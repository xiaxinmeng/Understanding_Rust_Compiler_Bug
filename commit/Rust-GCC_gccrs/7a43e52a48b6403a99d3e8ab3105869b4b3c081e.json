{"sha": "7a43e52a48b6403a99d3e8ab3105869b4b3c081e", "node_id": "C_kwDOANBUbNoAKDdhNDNlNTJhNDhiNjQwM2E5OWQzZThhYjMxMDU4NjliNGIzYzA4MWU", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-09-07T01:37:57Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-09-07T01:37:57Z"}, "message": "rs6000/test: Fix empty TU in some cases of effective targets [PR106345]\n\nAs the failure of test case gcc.target/powerpc/pr92398.p9-.c in\nPR106345 shows, some test sources for some powerpc effective\ntargets use empty translation unit wrongly.  The test sources\ncould go with options like \"-ansi -pedantic-errors\", then those\neffective target checkings will fail unexpectedly with the\nerror messages like:\n\n  error: ISO C forbids an empty translation unit [-Wpedantic]\n\nThis patch is to fix empty TUs with one dummy function definition\naccordingly.\n\n\tPR testsuite/106345\n\ngcc/testsuite/ChangeLog:\n\n\t* lib/target-supports.exp (check_effective_target_powerpc_sqrt): Add\n\ta function definition to avoid pedwarn about empty translation unit.\n\t(check_effective_target_has_arch_pwr5): Likewise.\n\t(check_effective_target_has_arch_pwr6): Likewise.\n\t(check_effective_target_has_arch_pwr7): Likewise.\n\t(check_effective_target_has_arch_pwr8): Likewise.\n\t(check_effective_target_has_arch_pwr9): Likewise.\n\t(check_effective_target_has_arch_pwr10): Likewise.\n\t(check_effective_target_has_arch_ppc64): Likewise.\n\t(check_effective_target_ppc_float128): Likewise.\n\t(check_effective_target_ppc_float128_insns): Likewise.\n\t(check_effective_target_powerpc_vsx): Likewise.", "tree": {"sha": "5d8ffe9339849574d181fed4d34188262e0597a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d8ffe9339849574d181fed4d34188262e0597a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a43e52a48b6403a99d3e8ab3105869b4b3c081e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a43e52a48b6403a99d3e8ab3105869b4b3c081e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a43e52a48b6403a99d3e8ab3105869b4b3c081e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a43e52a48b6403a99d3e8ab3105869b4b3c081e/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c13223b790bbc5e4a3f5605e057eac59b61b2c85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c13223b790bbc5e4a3f5605e057eac59b61b2c85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c13223b790bbc5e4a3f5605e057eac59b61b2c85"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "703aba412a65596d2a504455ee100833dbcbae54", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a43e52a48b6403a99d3e8ab3105869b4b3c081e/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a43e52a48b6403a99d3e8ab3105869b4b3c081e/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=7a43e52a48b6403a99d3e8ab3105869b4b3c081e", "patch": "@@ -6239,9 +6239,12 @@ proc check_effective_target_powerpc_sqrt { } {\n     }\n \n     return [check_no_compiler_messages powerpc_sqrt object {\n+\tvoid test (void)\n+\t{\n \t#ifndef _ARCH_PPCSQ\n \t#error _ARCH_PPCSQ is not defined\n \t#endif\n+\t}\n     } {}]\n }\n \n@@ -6349,71 +6352,92 @@ proc check_effective_target_powerpc_p9modulo_ok { } {\n # as provided by the test.\n proc check_effective_target_has_arch_pwr5 { } {\n \treturn [check_no_compiler_messages_nocache arch_pwr5 assembly {\n+\t\tvoid test (void)\n+\t\t{\n \t\t#ifndef _ARCH_PWR5\n \t\t#error does not have power5 support.\n \t\t#else\n \t\t/* \"has power5 support\" */\n \t\t#endif\n+\t\t}\n \t} [current_compiler_flags]]\n }\n \n proc check_effective_target_has_arch_pwr6 { } {\n \treturn [check_no_compiler_messages_nocache arch_pwr6 assembly {\n+\t\tvoid test (void)\n+\t\t{\n \t\t#ifndef _ARCH_PWR6\n \t\t#error does not have power6 support.\n \t\t#else\n \t\t/* \"has power6 support\" */\n \t\t#endif\n+\t\t}\n \t} [current_compiler_flags]]\n }\n \n proc check_effective_target_has_arch_pwr7 { } {\n \treturn [check_no_compiler_messages_nocache arch_pwr7 assembly {\n+\t\tvoid test (void)\n+\t\t{\n \t\t#ifndef _ARCH_PWR7\n \t\t#error does not have power7 support.\n \t\t#else\n \t\t/* \"has power7 support\" */\n \t\t#endif\n+\t\t}\n \t} [current_compiler_flags]]\n }\n \n proc check_effective_target_has_arch_pwr8 { } {\n \treturn [check_no_compiler_messages_nocache arch_pwr8 assembly {\n+\t\tvoid test (void)\n+\t\t{\n \t\t#ifndef _ARCH_PWR8\n \t\t#error does not have power8 support.\n \t\t#else\n \t\t/* \"has power8 support\" */\n \t\t#endif\n+\t\t}\n \t} [current_compiler_flags]]\n }\n \n proc check_effective_target_has_arch_pwr9 { } {\n \treturn [check_no_compiler_messages_nocache arch_pwr9 assembly {\n+\t\tvoid test (void)\n+\t\t{\n \t\t#ifndef _ARCH_PWR9\n \t\t#error does not have power9 support.\n \t\t#else\n \t\t/* \"has power9 support\" */\n \t\t#endif\n+\t\t}\n \t} [current_compiler_flags]]\n }\n \n proc check_effective_target_has_arch_pwr10 { } {\n \treturn [check_no_compiler_messages_nocache arch_pwr10 assembly {\n+\t\tvoid test (void)\n+\t\t{\n \t\t#ifndef _ARCH_PWR10\n \t\t#error does not have power10 support.\n \t\t#else\n \t\t/* \"has power10 support\" */\n \t\t#endif\n+\t\t}\n \t} [current_compiler_flags]]\n }\n \n proc check_effective_target_has_arch_ppc64 { } {\n \treturn [check_no_compiler_messages_nocache arch_ppc64 assembly {\n+\t\tvoid test (void)\n+\t\t{\n \t\t#ifndef _ARCH_PPC64\n \t\t#error does not have ppc64 support.\n \t\t#else\n \t\t/* \"has ppc64 support\" */\n \t\t#endif\n+\t\t}\n \t} [current_compiler_flags]]\n }\n \n@@ -6500,29 +6524,38 @@ proc check_effective_target_powerpc_float128_hw_ok { } {\n \n proc check_effective_target_ppc_float128 { } {\n     return [check_no_compiler_messages_nocache ppc_float128 object {\n+\tvoid test (void)\n+\t{\n \t#ifndef __FLOAT128__\n \t  nope no good\n \t#endif\n+\t}\n     }]\n }\n \n # Return 1 if current options generate float128 insns, 0 otherwise.\n \n proc check_effective_target_ppc_float128_insns { } {\n     return [check_no_compiler_messages_nocache ppc_float128 object {\n+\tvoid test (void)\n+\t{\n \t#ifndef __FLOAT128_HARDWARE__\n \t  nope no good\n \t#endif\n+\t}\n     }]\n }\n \n # Return 1 if current options generate VSX instructions, 0 otherwise.\n \n proc check_effective_target_powerpc_vsx { } {\n     return [check_no_compiler_messages_nocache powerpc_vsx object {\n+\tvoid test (void)\n+\t{\n \t#ifndef __VSX__\n \t  nope no vsx\n \t#endif\n+\t}\n     }]\n }\n "}]}