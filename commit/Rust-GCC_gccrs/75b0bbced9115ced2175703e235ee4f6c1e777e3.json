{"sha": "75b0bbced9115ced2175703e235ee4f6c1e777e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzViMGJiY2VkOTExNWNlZDIxNzU3MDNlMjM1ZWU0ZjZjMWU3NzdlMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-23T02:32:12Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-23T02:32:12Z"}, "message": "(instantiate_class_template): Add the new instantiation to template_classes.\n\n(do_pending_expansions): Call instantiate_member_templates on all of\nthe classes in template_classes.\n(coerce_template_parms): Since template parameters are shared among all\ninstantiations, we have to substitute in the real types in TREE_TYPE (parm).\n(push_template_decls): Ditto.\n(grok_template_type): Deleted as template parameters are shared\tamong all\ninstantiations.\n\nFrom-SVN: r10041", "tree": {"sha": "92243d7e7286f4cf7bf19e91e0acdf77d2bdfe90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92243d7e7286f4cf7bf19e91e0acdf77d2bdfe90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75b0bbced9115ced2175703e235ee4f6c1e777e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75b0bbced9115ced2175703e235ee4f6c1e777e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75b0bbced9115ced2175703e235ee4f6c1e777e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75b0bbced9115ced2175703e235ee4f6c1e777e3/comments", "author": null, "committer": null, "parents": [{"sha": "acc9fe2086428ea0a7946867768cbf21c5d183fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acc9fe2086428ea0a7946867768cbf21c5d183fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acc9fe2086428ea0a7946867768cbf21c5d183fa"}], "stats": {"total": 76, "additions": 26, "deletions": 50}, "files": [{"sha": "58d3920cb4d3494f53c65d4ec7726c1fca0dd9dd", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 26, "deletions": 50, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75b0bbced9115ced2175703e235ee4f6c1e777e3/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75b0bbced9115ced2175703e235ee4f6c1e777e3/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=75b0bbced9115ced2175703e235ee4f6c1e777e3", "patch": "@@ -1,5 +1,5 @@\n /* Handle parameterized types (templates) for GNU C++.\n-   Copyright (C) 1992, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 1993, 1994, 1995 Free Software Foundation, Inc.\n    Written by Ken Raeburn (raeburn@cygnus.com) while at Watchmaker Computing.\n \n This file is part of GNU CC.\n@@ -52,6 +52,11 @@ struct pending_inline *pending_template_expansions;\n int processing_template_decl;\n int processing_template_defn;\n \n+/* This is a kludge to handle instantiation of template methods that are\n+   used before their definition.  It should not be necessary after the\n+   template rewrite.  */\n+static tree template_classes;\n+\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n@@ -324,48 +329,7 @@ end_template_decl (d1, d2, is_class, defn)\n   (void) get_pending_sizes ();\n }\n \n-/* If TYPE contains a template parm type, then substitute that type\n-   with its actual type that is found in TVEC. */\n-static void\n-grok_template_type (tvec, type)\n-     tree tvec;\n-     tree* type;\n-{\n-  switch (TREE_CODE (*type))\n-    {\n-    case TEMPLATE_TYPE_PARM:\n-      if (*type != TYPE_MAIN_VARIANT (*type))\n-        {\n-\t  /* we are here for cases like const T* etc. */\n-\t  grok_template_type (tvec, &TYPE_MAIN_VARIANT (*type));\n-\t  *type = cp_build_type_variant (TYPE_MAIN_VARIANT (*type),\n-\t\t\t\t\tTYPE_READONLY (*type),\n-\t\t\t\t\tTYPE_VOLATILE (*type));\n-\t}\n-      else\n-\t  *type = TREE_VEC_ELT (tvec, TEMPLATE_TYPE_IDX (*type));\n-      return;\n-    case POINTER_TYPE:\n-    case REFERENCE_TYPE:\n-      grok_template_type (tvec, &TREE_TYPE (*type));\n-      return;\n-    case FUNCTION_TYPE:\n-      {\n-\ttree p;\n-\t\n-\t/* take care of function's return type first */\n-\tgrok_template_type (tvec, &TREE_TYPE (*type));\n-\t\n-\t/* take care of function's arguments */\n-\tfor (p = TYPE_ARG_TYPES (*type); p; p = TREE_CHAIN (p))\n-\t  grok_template_type (tvec, &TREE_VALUE (p));\n-\treturn;\n-      }\n-    default:     \n-      break;\n-    }\n-  return;\n-}\n+tree tsubst\t\tPROTO ((tree, tree*, int, tree));\n \n /* Convert all template arguments to their appropriate types, and return\n    a vector containing the resulting values.  If any error occurs, return\n@@ -451,8 +415,9 @@ coerce_template_parms (parms, arglist, in_decl)\n \t}\n       else\n \t{\n-\t  grok_template_type (vec, &TREE_TYPE (parm));\n-\t  val = digest_init (TREE_TYPE (parm), arg, (tree *) 0);\n+\t  tree t = tsubst (TREE_TYPE (parm), &TREE_VEC_ELT (vec, 0),\n+\t\t\t   TREE_VEC_LENGTH (vec), in_decl);\n+\t  val = digest_init (t, arg, (tree *) 0);\n \n \t  if (val == error_mark_node)\n \t    ;\n@@ -680,16 +645,19 @@ push_template_decls (parmlist, arglist, class_level)\n \t{\n \t  /* add const decl to namespace */\n \t  tree val;\n+\t  tree parmtype;\n \t  if (requires_type)\n \t    {\n \t      error (\"template use error: value provided where type needed\");\n \t      continue;\n \t    }\n-\t  val = digest_init (TREE_TYPE (parm), arg, (tree *) 0);\n+\t  parmtype = tsubst (TREE_TYPE (parm), &TREE_VEC_ELT (arglist, 0),\n+\t\t\t     TREE_VEC_LENGTH (arglist), NULL_TREE);\n+\t  val = digest_init (parmtype, arg, (tree *) 0);\n \t  if (val != error_mark_node)\n \t    {\n \t      decl = build_decl (CONST_DECL, DECL_NAME (parm),\n-\t\t\t\t TREE_TYPE (parm));\n+\t\t\t\t parmtype);\n \t      DECL_INITIAL (decl) = val;\n \t      TREE_READONLY (decl) = 1;\n \t    }\n@@ -779,7 +747,7 @@ uses_template_parms (t)\n \treturn 1;\n       return uses_template_parms (TREE_TYPE (t));\n     case METHOD_TYPE:\n-      if (uses_template_parms (TYPE_OFFSET_BASETYPE (t)))\n+      if (uses_template_parms (TYPE_METHOD_BASETYPE (t)))\n \treturn 1;\n       if (uses_template_parms (TYPE_ARG_TYPES (t)))\n \treturn 1;\n@@ -1074,6 +1042,8 @@ instantiate_class_template (classname, setup_parse)\n       processing_template_defn++;\n       if (!flag_external_templates)\n \tinterface_unknown++;\n+      template_classes\n+\t= perm_tree_cons (classname, NULL_TREE, template_classes);\n     }\n   else\n     {\n@@ -1151,7 +1121,7 @@ search_nested_type_in_tmpl (tmpl, type)\n   return t;\n }\n \n-static tree\n+tree\n tsubst (t, args, nargs, in_decl)\n      tree t, *args;\n      int nargs;\n@@ -1570,7 +1540,7 @@ tsubst (t, args, nargs, in_decl)\n     case FUNCTION_TYPE:\n     case METHOD_TYPE:\n       {\n-\ttree values = TYPE_VALUES (t); /* same as TYPE_ARG_TYPES */\n+\ttree values = TYPE_ARG_TYPES (t);\n \ttree context = TYPE_CONTEXT (t);\n \ttree new_value;\n \n@@ -2367,6 +2337,12 @@ do_pending_expansions ()\n {\n   struct pending_inline *i, *new_list = 0;\n \n+  {\n+    tree t;\n+    for (t = template_classes; t; t = TREE_CHAIN (t))\n+      instantiate_member_templates (TREE_PURPOSE (t));\n+  }\n+  \n   if (!pending_template_expansions)\n     return 0;\n "}]}