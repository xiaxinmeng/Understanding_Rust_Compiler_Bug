{"sha": "c4984ab2518d2b2e971d741709111087f26ecb90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ5ODRhYjI1MThkMmIyZTk3MWQ3NDE3MDkxMTEwODdmMjZlY2I5MA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-07-28T11:40:42Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-07-28T11:40:42Z"}, "message": "re PR fortran/40882 ([F03] infinite recursion in gfc_get_derived_type with PPC returning derived type)\n\n2009-07-28  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/40882\n\t* trans-types.c (gfc_get_ppc_type): For derived types, directly use the\n\tbackend_decl, instead of calling gfc_typenode_for_spec, to avoid\n\tinfinte loop.\n\t(gfc_get_derived_type): Correctly handle PPCs returning derived types,\n\tavoiding infinite recursion.\n\n\n2009-07-28  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/40882\n\t* gfortran.dg/proc_ptr_comp_13.f90: New.\n\nFrom-SVN: r150154", "tree": {"sha": "a64d75059b47169b8c14a640ceefd56afcf23667", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a64d75059b47169b8c14a640ceefd56afcf23667"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4984ab2518d2b2e971d741709111087f26ecb90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4984ab2518d2b2e971d741709111087f26ecb90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4984ab2518d2b2e971d741709111087f26ecb90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4984ab2518d2b2e971d741709111087f26ecb90/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe8b685c3ebc67ab603092526fceb328eb4e6b67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe8b685c3ebc67ab603092526fceb328eb4e6b67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe8b685c3ebc67ab603092526fceb328eb4e6b67"}], "stats": {"total": 65, "additions": 60, "deletions": 5}, "files": [{"sha": "ea622e565bfecb8640a1f3c962d15caa39a27106", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4984ab2518d2b2e971d741709111087f26ecb90/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4984ab2518d2b2e971d741709111087f26ecb90/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c4984ab2518d2b2e971d741709111087f26ecb90", "patch": "@@ -1,3 +1,12 @@\n+2009-07-28  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/40882\n+\t* trans-types.c (gfc_get_ppc_type): For derived types, directly use the\n+\tbackend_decl, instead of calling gfc_typenode_for_spec, to avoid\n+\tinfinte loop.\n+\t(gfc_get_derived_type): Correctly handle PPCs returning derived types,\n+\tavoiding infinite recursion.\n+\n 2009-07-27  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/40848"}, {"sha": "77b8b9c66069ed3dda7bc9a84a3f4001240397ae", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4984ab2518d2b2e971d741709111087f26ecb90/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4984ab2518d2b2e971d741709111087f26ecb90/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=c4984ab2518d2b2e971d741709111087f26ecb90", "patch": "@@ -1894,7 +1894,12 @@ gfc_get_ppc_type (gfc_component* c)\n {\n   tree t;\n   if (c->attr.function && !c->attr.dimension)\n-    t = gfc_typenode_for_spec (&c->ts);\n+    {\n+      if (c->ts.type == BT_DERIVED)\n+\tt = c->ts.derived->backend_decl;\n+      else\n+\tt = gfc_typenode_for_spec (&c->ts);\n+    }\n   else\n     t = void_type_node;\n   /* TODO: Build argument list.  */\n@@ -1974,7 +1979,8 @@ gfc_get_derived_type (gfc_symbol * derived)\n       if (c->ts.type != BT_DERIVED)\n \tcontinue;\n \n-      if (!c->attr.pointer || c->ts.derived->backend_decl == NULL)\n+      if ((!c->attr.pointer && !c->attr.proc_pointer)\n+\t  || c->ts.derived->backend_decl == NULL)\n \tc->ts.derived->backend_decl = gfc_get_derived_type (c->ts.derived);\n \n       if (c->ts.derived && c->ts.derived->attr.is_iso_c)\n@@ -2003,10 +2009,10 @@ gfc_get_derived_type (gfc_symbol * derived)\n   fieldlist = NULL_TREE;\n   for (c = derived->components; c; c = c->next)\n     {\n-      if (c->ts.type == BT_DERIVED)\n-        field_type = c->ts.derived->backend_decl;\n-      else if (c->attr.proc_pointer)\n+      if (c->attr.proc_pointer)\n \tfield_type = gfc_get_ppc_type (c);\n+      else if (c->ts.type == BT_DERIVED)\n+        field_type = c->ts.derived->backend_decl;\n       else\n \t{\n \t  if (c->ts.type == BT_CHARACTER)"}, {"sha": "85f780b83a7ad3427f5c1b862ec9f08db94672ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4984ab2518d2b2e971d741709111087f26ecb90/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4984ab2518d2b2e971d741709111087f26ecb90/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c4984ab2518d2b2e971d741709111087f26ecb90", "patch": "@@ -1,3 +1,8 @@\n+2009-07-28  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/40882\n+\t* gfortran.dg/proc_ptr_comp_13.f90: New.\n+\n 2009-07-28  Jan Beulich  <jbeulich@novell.com>\n \n \t* gcc.target/i386/avx-vtestpd-1.c: Add -DNEED_IEEE754_DOUBLE."}, {"sha": "45ffa1e12740c679f31cbc5f4012e1f388446bcb", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_comp_13.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4984ab2518d2b2e971d741709111087f26ecb90/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4984ab2518d2b2e971d741709111087f26ecb90/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_13.f90?ref=c4984ab2518d2b2e971d741709111087f26ecb90", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do run }\n+!\n+! PR 40882: [F03] infinite recursion in gfc_get_derived_type with PPC returning derived type\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+implicit none\n+\n+type :: t\n+  integer :: data\n+  procedure(foo), pointer, nopass :: ppc\n+end type\n+\n+type(t) :: o,o2\n+\n+o%data = 1\n+o%ppc => foo\n+\n+o2 = o%ppc()\n+\n+if (o%data /= 1) call abort()\n+if (o2%data /= 5) call abort()\n+if (.not. associated(o%ppc)) call abort()\n+if (associated(o2%ppc)) call abort()\n+\n+contains\n+\n+  function foo()\n+    type(t) :: foo\n+    foo%data = 5\n+    foo%ppc => NULL()\n+  end function\n+\n+end\n+"}]}