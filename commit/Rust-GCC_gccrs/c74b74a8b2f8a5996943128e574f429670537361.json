{"sha": "c74b74a8b2f8a5996943128e574f429670537361", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc0Yjc0YThiMmY4YTU5OTY5NDMxMjhlNTc0ZjQyOTY3MDUzNzM2MQ==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-05-25T14:48:24Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-05-25T14:48:24Z"}, "message": "re PR fortran/40176 (Fortran 2003: Procedure pointers with array return value)\n\n2009-05-25  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/40176\n\t* primary.c (gfc_match_varspec): Handle procedure pointer components\n\twith array return value.\n\t* resolve.c (resolve_expr_ppc): Ditto.\n\t(resolve_symbol): Make sure the interface of a procedure pointer has\n\tbeen resolved.\n\t* trans-array.c (gfc_walk_function_expr): Handle procedure pointer\n\tcomponents with array return value.\n\t* trans-expr.c (gfc_conv_component_ref,gfc_conv_procedure_call,\n\tgfc_trans_arrayfunc_assign): Ditto.\n\t(gfc_trans_pointer_assignment): Handle procedure pointer assignments,\n\twhere the rhs is a dummy argument.\n\t* trans-types.c (gfc_get_ppc_type,gfc_get_derived_type): Handle\n\tprocedure pointer components with array return value.\n\n\n2009-05-25  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/40176\n\t* gfortran.dg/proc_ptr_18.f90: New.\n\t* gfortran.dg/proc_ptr_19.f90: New.\n\t* gfortran.dg/proc_ptr_comp_9.f90: New.\n\t* gfortran.dg/proc_ptr_comp_10.f90: New.\n\nFrom-SVN: r147850", "tree": {"sha": "68abe1bd5f023825be92c3ec2ac271318c3baa9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68abe1bd5f023825be92c3ec2ac271318c3baa9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c74b74a8b2f8a5996943128e574f429670537361", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c74b74a8b2f8a5996943128e574f429670537361", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c74b74a8b2f8a5996943128e574f429670537361", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c74b74a8b2f8a5996943128e574f429670537361/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b8ed1452b9f79918ba9324edda6642ed7d08114", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b8ed1452b9f79918ba9324edda6642ed7d08114", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b8ed1452b9f79918ba9324edda6642ed7d08114"}], "stats": {"total": 191, "additions": 181, "deletions": 10}, "files": [{"sha": "32c3192d29743d0c028125145fc5dbd07b0bacec", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74b74a8b2f8a5996943128e574f429670537361/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74b74a8b2f8a5996943128e574f429670537361/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c74b74a8b2f8a5996943128e574f429670537361", "patch": "@@ -1,3 +1,20 @@\n+2009-05-25  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/40176\n+\t* primary.c (gfc_match_varspec): Handle procedure pointer components\n+\twith array return value.\n+\t* resolve.c (resolve_expr_ppc): Ditto.\n+\t(resolve_symbol): Make sure the interface of a procedure pointer has\n+\tbeen resolved.\n+\t* trans-array.c (gfc_walk_function_expr): Handle procedure pointer\n+\tcomponents with array return value.\n+\t* trans-expr.c (gfc_conv_component_ref,gfc_conv_procedure_call,\n+\tgfc_trans_arrayfunc_assign): Ditto.\n+\t(gfc_trans_pointer_assignment): Handle procedure pointer assignments,\n+\twhere the rhs is a dummy argument.\n+\t* trans-types.c (gfc_get_ppc_type,gfc_get_derived_type): Handle\n+\tprocedure pointer components with array return value.\n+\n 2009-05-24  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \t    Dominique Dhumieres\n "}, {"sha": "1a03165fcbe25ae020b0c67d32370669192cf472", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74b74a8b2f8a5996943128e574f429670537361/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74b74a8b2f8a5996943128e574f429670537361/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=c74b74a8b2f8a5996943128e574f429670537361", "patch": "@@ -1726,7 +1726,8 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,\n   tail = NULL;\n \n   gfc_gobble_whitespace ();\n-  if ((equiv_flag && gfc_peek_ascii_char () == '(') || sym->attr.dimension)\n+  if ((equiv_flag && gfc_peek_ascii_char () == '(')\n+      || (sym->attr.dimension && !sym->attr.proc_pointer))\n     {\n       /* In EQUIVALENCE, we don't know yet whether we are seeing\n \t an array, character variable or array of character\n@@ -1843,7 +1844,7 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,\n           break;\n \t}\n \n-      if (component->as != NULL)\n+      if (component->as != NULL && !component->attr.proc_pointer)\n \t{\n \t  tail = extend_ref (primary, tail);\n \t  tail->type = REF_ARRAY;"}, {"sha": "8158b71ee4f35fca47c0b23ae97fdaea5db270c9", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74b74a8b2f8a5996943128e574f429670537361/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74b74a8b2f8a5996943128e574f429670537361/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=c74b74a8b2f8a5996943128e574f429670537361", "patch": "@@ -4868,6 +4868,8 @@ resolve_expr_ppc (gfc_expr* e)\n   e->value.function.isym = NULL;\n   e->value.function.actual = e->value.compcall.actual;\n   e->ts = comp->ts;\n+  if (comp->as != NULL)\n+    e->rank = comp->as->rank;\n \n   if (!comp->attr.function)\n     gfc_add_function (&comp->attr, comp->name, &e->where);\n@@ -9414,6 +9416,7 @@ resolve_symbol (gfc_symbol *sym)\n \t  || sym->ts.interface->attr.intrinsic)\n \t{\n \t  gfc_symbol *ifc = sym->ts.interface;\n+\t  resolve_symbol (ifc);\n \n \t  if (ifc->attr.intrinsic)\n \t    resolve_intrinsic (ifc, &ifc->declared_at);"}, {"sha": "7dea22253f430def0ab82bd99f6b0bd7702420c6", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74b74a8b2f8a5996943128e574f429670537361/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74b74a8b2f8a5996943128e574f429670537361/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=c74b74a8b2f8a5996943128e574f429670537361", "patch": "@@ -6295,6 +6295,7 @@ gfc_walk_function_expr (gfc_ss * ss, gfc_expr * expr)\n   gfc_ss *newss;\n   gfc_intrinsic_sym *isym;\n   gfc_symbol *sym;\n+  gfc_component *comp = NULL;\n \n   isym = expr->value.function.isym;\n \n@@ -6307,7 +6308,9 @@ gfc_walk_function_expr (gfc_ss * ss, gfc_expr * expr)\n       sym = expr->symtree->n.sym;\n \n   /* A function that returns arrays.  */\n-  if (gfc_return_by_reference (sym) && sym->result->attr.dimension)\n+  is_proc_ptr_comp (expr, &comp);\n+  if ((!comp && gfc_return_by_reference (sym) && sym->result->attr.dimension)\n+      || (comp && comp->attr.dimension))\n     {\n       newss = gfc_get_ss ();\n       newss->type = GFC_SS_FUNCTION;"}, {"sha": "f1f009122efa190e8f8e3b0ae1f3b264d17da48a", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74b74a8b2f8a5996943128e574f429670537361/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74b74a8b2f8a5996943128e574f429670537361/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=c74b74a8b2f8a5996943128e574f429670537361", "patch": "@@ -476,8 +476,8 @@ gfc_conv_component_ref (gfc_se * se, gfc_ref * ref)\n       se->string_length = tmp;\n     }\n \n-  if ((c->attr.pointer || c->attr.proc_pointer) && c->attr.dimension == 0\n-      && c->ts.type != BT_CHARACTER)\n+  if ((c->attr.pointer && c->attr.dimension == 0 && c->ts.type != BT_CHARACTER)\n+      || c->attr.proc_pointer)\n     se->expr = build_fold_indirect_ref (se->expr);\n }\n \n@@ -2396,6 +2396,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n   gfc_symbol *fsym;\n   stmtblock_t post;\n   enum {MISSING = 0, ELEMENTAL, SCALAR, SCALAR_POINTER, ARRAY};\n+  gfc_component *comp = NULL;\n \n   arglist = NULL_TREE;\n   retargs = NULL_TREE;\n@@ -2550,11 +2551,13 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \n   gfc_init_block (&post);\n   gfc_init_interface_mapping (&mapping);\n+  is_proc_ptr_comp (expr, &comp);\n   need_interface_mapping = ((sym->ts.type == BT_CHARACTER\n \t\t\t\t  && sym->ts.cl->length\n \t\t\t\t  && sym->ts.cl->length->expr_type\n \t\t\t\t\t\t!= EXPR_CONSTANT)\n-\t\t\t      || sym->attr.dimension);\n+\t\t\t      || (comp && comp->attr.dimension)\n+\t\t\t      || (!comp && sym->attr.dimension));\n   formal = sym->formal;\n   /* Evaluate the arguments.  */\n   for (; arg != NULL; arg = arg->next, formal = formal ? formal->next : NULL)\n@@ -2825,7 +2828,8 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n       len = cl.backend_decl;\n     }\n \n-  byref = gfc_return_by_reference (sym);\n+  byref = (comp && comp->attr.dimension)\n+\t  || (!comp && gfc_return_by_reference (sym));\n   if (byref)\n     {\n       if (se->direct_byref)\n@@ -4053,6 +4057,10 @@ gfc_trans_pointer_assignment (gfc_expr * expr1, gfc_expr * expr2)\n \t  && expr1->symtree->n.sym->attr.dummy)\n \tlse.expr = build_fold_indirect_ref (lse.expr);\n \n+      if (expr2->symtree && expr2->symtree->n.sym->attr.proc_pointer\n+\t  && expr2->symtree->n.sym->attr.dummy)\n+\trse.expr = build_fold_indirect_ref (rse.expr);\n+\n       gfc_add_block_to_block (&block, &lse.pre);\n       gfc_add_block_to_block (&block, &rse.pre);\n \n@@ -4284,6 +4292,7 @@ gfc_trans_arrayfunc_assign (gfc_expr * expr1, gfc_expr * expr2)\n   gfc_ss *ss;\n   gfc_ref * ref;\n   bool seen_array_ref;\n+  gfc_component *comp = NULL;\n \n   /* The caller has already checked rank>0 and expr_type == EXPR_FUNCTION.  */\n   if (expr2->value.function.isym && !gfc_is_intrinsic_libcall (expr2))\n@@ -4343,8 +4352,10 @@ gfc_trans_arrayfunc_assign (gfc_expr * expr1, gfc_expr * expr2)\n \n   /* The frontend doesn't seem to bother filling in expr->symtree for intrinsic\n      functions.  */\n+  is_proc_ptr_comp(expr2, &comp);\n   gcc_assert (expr2->value.function.isym\n-\t      || (gfc_return_by_reference (expr2->value.function.esym)\n+\t      || (comp && comp->attr.dimension)\n+\t      || (!comp && gfc_return_by_reference (expr2->value.function.esym)\n \t      && expr2->value.function.esym->result->attr.dimension));\n \n   ss = gfc_walk_expr (expr1);"}, {"sha": "e945fcbf7b5a078bd621d4b74cb7b7b42ebd0d8e", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74b74a8b2f8a5996943128e574f429670537361/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74b74a8b2f8a5996943128e574f429670537361/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=c74b74a8b2f8a5996943128e574f429670537361", "patch": "@@ -1875,7 +1875,7 @@ tree\n gfc_get_ppc_type (gfc_component* c)\n {\n   tree t;\n-  if (c->attr.function)\n+  if (c->attr.function && !c->attr.dimension)\n     t = gfc_typenode_for_spec (&c->ts);\n   else\n     t = void_type_node;\n@@ -1997,7 +1997,7 @@ gfc_get_derived_type (gfc_symbol * derived)\n \n       /* This returns an array descriptor type.  Initialization may be\n          required.  */\n-      if (c->attr.dimension)\n+      if (c->attr.dimension && !c->attr.proc_pointer)\n \t{\n \t  if (c->attr.pointer || c->attr.allocatable)\n \t    {"}, {"sha": "a5025a3a5922b559f4cc6a0febd88618222667aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74b74a8b2f8a5996943128e574f429670537361/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74b74a8b2f8a5996943128e574f429670537361/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c74b74a8b2f8a5996943128e574f429670537361", "patch": "@@ -1,3 +1,11 @@\n+2009-05-25  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/40176\n+\t* gfortran.dg/proc_ptr_18.f90: New.\n+\t* gfortran.dg/proc_ptr_19.f90: New.\n+\t* gfortran.dg/proc_ptr_comp_9.f90: New.\n+\t* gfortran.dg/proc_ptr_comp_10.f90: New.\n+\n 2009-05-25  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/ssa-fre-14.c: Adjust."}, {"sha": "79cd68a513f09346d0b88596e8e63d00a2698a47", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_18.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74b74a8b2f8a5996943128e574f429670537361/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_18.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74b74a8b2f8a5996943128e574f429670537361/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_18.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_18.f90?ref=c74b74a8b2f8a5996943128e574f429670537361", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do run }\n+!\n+! PR 40176:  Fortran 2003: Procedure pointers with array return value\n+!\n+! Original test case by Barron Bichon <barron.bichon@swri.org>\n+! Modified by Janus Weil <janus@gcc.gnu.org>\n+\n+PROGRAM test_prog\n+\n+  PROCEDURE(triple), POINTER :: f\n+\n+  f => triple\n+  if (sum(f(2.,4.)-triple(2.,4.))>1E-3) call abort()\n+\n+CONTAINS\n+\n+  FUNCTION triple(a,b) RESULT(tre)\n+    REAL, INTENT(in) :: a, b\n+    REAL :: tre(2)\n+    tre(1) = 3.*a\n+    tre(2) = 3.*b\n+  END FUNCTION triple\n+\n+END PROGRAM test_prog\n+"}, {"sha": "a78a8d4643269ec838316990376d891cf7a00fac", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_19.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74b74a8b2f8a5996943128e574f429670537361/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_19.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74b74a8b2f8a5996943128e574f429670537361/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_19.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_19.f90?ref=c74b74a8b2f8a5996943128e574f429670537361", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do run }\n+!\n+! PR 40176:  Fortran 2003: Procedure pointers with array return value\n+!\n+! This example tests for a bug in procedure pointer assignments,\n+! where the rhs is a dummy.\n+!\n+! Original test case by Barron Bichon <barron.bichon@swri.org>\n+! Modified by Janus Weil <janus@gcc.gnu.org>\n+\n+PROGRAM test_prog\n+\n+  PROCEDURE(add), POINTER :: forig, fset\n+\n+  forig => add\n+\n+  CALL set_ptr(forig,fset)\n+\n+  if (forig(1,2) /= fset(1,2)) call abort()\n+\n+CONTAINS\n+\n+  SUBROUTINE set_ptr(f1,f2)\n+    PROCEDURE(add), POINTER :: f1, f2\n+    f2 => f1\n+  END SUBROUTINE set_ptr\n+\n+  FUNCTION add(a,b)\n+    INTEGER :: a,b,add\n+    add = a+b\n+\n+  END FUNCTION add\n+ \n+END PROGRAM test_prog\n+"}, {"sha": "382f4125533ba81fb2da98dd75fb23d5a8d8e0e1", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_comp_10.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74b74a8b2f8a5996943128e574f429670537361/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74b74a8b2f8a5996943128e574f429670537361/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_10.f90?ref=c74b74a8b2f8a5996943128e574f429670537361", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+!\n+! PR 40176:  Fortran 2003: Procedure pointers with array return value\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+module m\n+\n+abstract interface\n+  function ai()\n+    real, dimension(3) :: ai\n+  end function\n+end interface\n+\n+type t\n+  procedure(ai), pointer, nopass :: ppc\n+end type\n+\n+procedure(ai), pointer :: pp\n+\n+end module\n+\n+program test\n+use m\n+type(t) :: obj\n+obj%ppc => pp\n+pp => obj%ppc\n+end\n+\n+! { dg-final { cleanup-modules \"m\" } }\n+"}, {"sha": "951db485fb04219f91f2562acca1016f464902ac", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_comp_9.f90", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74b74a8b2f8a5996943128e574f429670537361/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74b74a8b2f8a5996943128e574f429670537361/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_9.f90?ref=c74b74a8b2f8a5996943128e574f429670537361", "patch": "@@ -0,0 +1,37 @@\n+! { dg-do run }\n+!\n+! PR 40176:  Fortran 2003: Procedure pointers with array return value\n+!\n+! Original test case by Barron Bichon <barron.bichon@swri.org>\n+! Modified by Janus Weil <janus@gcc.gnu.org>\n+\n+PROGRAM test_prog\n+\n+ TYPE ProcPointerType\n+   PROCEDURE(triple), POINTER, NOPASS :: f\n+ END TYPE ProcPointerType\n+\n+ TYPE (ProcPointerType) :: ppt\n+ PROCEDURE(triple), POINTER :: f\n+ REAL :: tres(2)\n+\n+ ppt%f => triple\n+ f => ppt%f\n+ tres = f(2,[2.,4.])\n+ if (abs(tres(1)-6.)>1E-3) call abort()\n+ if (abs(tres(2)-12.)>1E-3) call abort()\n+ tres = ppt%f(2,[3.,5.])\n+ if (abs(tres(1)-9.)>1E-3) call abort()\n+ if (abs(tres(2)-15.)>1E-3) call abort()\n+\n+CONTAINS\n+\n+ FUNCTION triple(n,x) RESULT(tre)\n+   INTEGER, INTENT(in) :: n\n+   REAL, INTENT(in) :: x(2)\n+   REAL :: tre(2)\n+   tre = 3.*x\n+ END FUNCTION triple\n+\n+END PROGRAM test_prog\n+"}]}