{"sha": "b992c8058c0ffb1866e97e5a2acc55b632773b53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk5MmM4MDU4YzBmZmIxODY2ZTk3ZTVhMmFjYzU1YjYzMjc3M2I1Mw==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-26T16:54:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-26T16:54:12Z"}, "message": "Merge #597\n\n597: Add name-resolution and HIR lowering for extern blocks r=philberty a=philberty\n\n\r\nAddresses #421 \n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "4d46ebe04691b12dcbc4ffcdbe1939bdf42a85fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d46ebe04691b12dcbc4ffcdbe1939bdf42a85fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b992c8058c0ffb1866e97e5a2acc55b632773b53", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg/ui0CRBK7hj4Ov3rIwAA9bkIAFVPjO+0yVBXfvBMx+UUY4KI\n5Kbvi17iyRuVxdPRoLCc5UId6s0ugoA3JrS83XGLabrc6Ya0BLYEjtI2SiGVwauP\ndvIsP5CReTb2bO7OexdzBsnMFHlP5SkivcHTw7QddsqkJ6MNV3MrsPphylhL45vA\n/jMlRmRvDnxwaISQE6G42tnE5Yvma4rIYRtpXZ1gpq0NTE7PBPlsiIr7cdbH5E+O\nnlsjoD1d/xCaxLWTTar+bfEuokteNd3QHpKTBSkNJO3UaTtVpAabziu6aGrk76ue\nZXN6oVqtYRG8Gq6nOBrB7TOHFKeWatrsS6gvsOvSVsb9ZFmAZ4duSE46LbTPk1Y=\n=21IG\n-----END PGP SIGNATURE-----\n", "payload": "tree 4d46ebe04691b12dcbc4ffcdbe1939bdf42a85fe\nparent 5b3909dd7487ddd41ffacf45150a4fff550e2fab\nparent 5f238bc0fdc083a692a72a39ab1d5890dbb6f338\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1627318452 +0000\ncommitter GitHub <noreply@github.com> 1627318452 +0000\n\nMerge #597\n\n597: Add name-resolution and HIR lowering for extern blocks r=philberty a=philberty\n\n\r\nAddresses #421 \n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b992c8058c0ffb1866e97e5a2acc55b632773b53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b992c8058c0ffb1866e97e5a2acc55b632773b53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b992c8058c0ffb1866e97e5a2acc55b632773b53/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b3909dd7487ddd41ffacf45150a4fff550e2fab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b3909dd7487ddd41ffacf45150a4fff550e2fab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b3909dd7487ddd41ffacf45150a4fff550e2fab"}, {"sha": "5f238bc0fdc083a692a72a39ab1d5890dbb6f338", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f238bc0fdc083a692a72a39ab1d5890dbb6f338", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f238bc0fdc083a692a72a39ab1d5890dbb6f338"}], "stats": {"total": 401, "additions": 345, "deletions": 56}, "files": [{"sha": "067e2f5be31cb72409f7c1a8f9c71b374dfc5108", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b992c8058c0ffb1866e97e5a2acc55b632773b53/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b992c8058c0ffb1866e97e5a2acc55b632773b53/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=b992c8058c0ffb1866e97e5a2acc55b632773b53", "patch": "@@ -1364,6 +1364,8 @@ class TraitImplItem\n class ExternalItem\n {\n public:\n+  ExternalItem () : node_id (Analysis::Mappings::get ()->get_next_node_id ()) {}\n+\n   virtual ~ExternalItem () {}\n \n   // Unique pointer custom clone function\n@@ -1379,9 +1381,13 @@ class ExternalItem\n   virtual void mark_for_strip () = 0;\n   virtual bool is_marked_for_strip () const = 0;\n \n+  NodeId get_node_id () const { return node_id; }\n+\n protected:\n   // Clone function implementation as pure virtual method\n   virtual ExternalItem *clone_external_item_impl () const = 0;\n+\n+  NodeId node_id;\n };\n \n /* Data structure to store the data used in macro invocations and macro\n@@ -1513,36 +1519,36 @@ class MacroInvocationSemi : public MacroItem,\n     return new MacroInvocationSemi (*this);\n   }\n \n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n+  /* Use covariance to implement clone function as returning this object\n+   * rather than base */\n   MacroInvocationSemi *clone_item_impl () const final override\n   {\n     return clone_macro_invocation_semi_impl ();\n   }\n \n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n+  /* Use covariance to implement clone function as returning this object\n+   * rather than base */\n   MacroInvocationSemi *clone_inherent_impl_item_impl () const final override\n   {\n     return clone_macro_invocation_semi_impl ();\n   }\n \n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n+  /* Use covariance to implement clone function as returning this object\n+   * rather than base */\n   MacroInvocationSemi *clone_trait_impl_item_impl () const final override\n   {\n     return clone_macro_invocation_semi_impl ();\n   }\n \n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n+  /* Use covariance to implement clone function as returning this object\n+   * rather than base */\n   MacroInvocationSemi *clone_trait_item_impl () const final override\n   {\n     return clone_macro_invocation_semi_impl ();\n   }\n \n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n+  /* Use covariance to implement clone function as returning this object\n+   * rather than base */\n   MacroInvocationSemi *clone_external_item_impl () const final override\n   {\n     return clone_macro_invocation_semi_impl ();"}, {"sha": "6d29c5b2e227f7fcd8c020da8105f42cc66eee02", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b992c8058c0ffb1866e97e5a2acc55b632773b53/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b992c8058c0ffb1866e97e5a2acc55b632773b53/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=b992c8058c0ffb1866e97e5a2acc55b632773b53", "patch": "@@ -3910,16 +3910,17 @@ class ExternalStaticItem : public ExternalItem\n   ExternalStaticItem (Identifier item_name, std::unique_ptr<Type> item_type,\n \t\t      bool is_mut, Visibility vis,\n \t\t      std::vector<Attribute> outer_attrs, Location locus)\n-    : outer_attrs (std::move (outer_attrs)), visibility (std::move (vis)),\n-      item_name (std::move (item_name)), locus (locus), has_mut (is_mut),\n-      item_type (std::move (item_type))\n+    : ExternalItem (), outer_attrs (std::move (outer_attrs)),\n+      visibility (std::move (vis)), item_name (std::move (item_name)),\n+      locus (locus), has_mut (is_mut), item_type (std::move (item_type))\n   {}\n \n   // Copy constructor\n   ExternalStaticItem (ExternalStaticItem const &other)\n     : outer_attrs (other.outer_attrs), visibility (other.visibility),\n       item_name (other.item_name), locus (other.locus), has_mut (other.has_mut)\n   {\n+    node_id = other.node_id;\n     // guard to prevent null dereference (only required if error state)\n     if (other.item_type != nullptr)\n       item_type = other.item_type->clone_type ();\n@@ -3928,6 +3929,7 @@ class ExternalStaticItem : public ExternalItem\n   // Overloaded assignment operator to clone\n   ExternalStaticItem &operator= (ExternalStaticItem const &other)\n   {\n+    node_id = other.node_id;\n     outer_attrs = other.outer_attrs;\n     visibility = other.visibility;\n     item_name = other.item_name;\n@@ -3974,6 +3976,10 @@ class ExternalStaticItem : public ExternalItem\n     return item_type;\n   }\n \n+  Identifier get_identifier () const { return item_name; }\n+\n+  bool is_mut () const { return has_mut; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n@@ -3997,6 +4003,8 @@ struct NamedFunctionParam\n   // seemingly new since writing this node\n   std::vector<Attribute> outer_attrs;\n \n+  NodeId node_id;\n+\n public:\n   /* Returns whether the named function parameter has a name (i.e. name is not\n    * '_'). */\n@@ -4011,6 +4019,8 @@ struct NamedFunctionParam\n     return param_type == nullptr;\n   }\n \n+  std::string get_name () const { return name; }\n+\n   // Creates an error state named function parameter.\n   static NamedFunctionParam create_error ()\n   {\n@@ -4020,13 +4030,15 @@ struct NamedFunctionParam\n   NamedFunctionParam (std::string name, std::unique_ptr<Type> param_type,\n \t\t      std::vector<Attribute> outer_attrs)\n     : name (std::move (name)), param_type (std::move (param_type)),\n-      outer_attrs (std::move (outer_attrs))\n+      outer_attrs (std::move (outer_attrs)),\n+      node_id (Analysis::Mappings::get ()->get_next_node_id ())\n   {}\n \n   // Copy constructor\n   NamedFunctionParam (NamedFunctionParam const &other)\n     : name (other.name), outer_attrs (other.outer_attrs)\n   {\n+    node_id = other.node_id;\n     // guard to prevent null dereference (only required if error state)\n     if (other.param_type != nullptr)\n       param_type = other.param_type->clone_type ();\n@@ -4037,6 +4049,7 @@ struct NamedFunctionParam\n   // Overloaded assignment operator to clone\n   NamedFunctionParam &operator= (NamedFunctionParam const &other)\n   {\n+    node_id = other.node_id;\n     name = other.name;\n     // has_name = other.has_name;\n     outer_attrs = other.outer_attrs;\n@@ -4070,6 +4083,8 @@ struct NamedFunctionParam\n     rust_assert (param_type != nullptr);\n     return param_type;\n   }\n+\n+  NodeId get_node_id () const { return node_id; }\n };\n \n // A function item used in an extern block\n@@ -4133,9 +4148,9 @@ class ExternalFunctionItem : public ExternalItem\n     std::vector<NamedFunctionParam> function_params, bool has_variadics,\n     std::vector<Attribute> variadic_outer_attrs, Visibility vis,\n     std::vector<Attribute> outer_attrs, Location locus)\n-    : outer_attrs (std::move (outer_attrs)), visibility (std::move (vis)),\n-      item_name (std::move (item_name)), locus (locus),\n-      generic_params (std::move (generic_params)),\n+    : ExternalItem (), outer_attrs (std::move (outer_attrs)),\n+      visibility (std::move (vis)), item_name (std::move (item_name)),\n+      locus (locus), generic_params (std::move (generic_params)),\n       return_type (std::move (return_type)),\n       where_clause (std::move (where_clause)),\n       function_params (std::move (function_params)),\n@@ -4155,6 +4170,7 @@ class ExternalFunctionItem : public ExternalItem\n       has_variadics (other.has_variadics),\n       variadic_outer_attrs (other.variadic_outer_attrs)\n   {\n+    node_id = other.node_id;\n     // guard to prevent null pointer dereference\n     if (other.return_type != nullptr)\n       return_type = other.return_type->clone_type ();\n@@ -4175,6 +4191,7 @@ class ExternalFunctionItem : public ExternalItem\n     function_params = other.function_params;\n     has_variadics = other.has_variadics;\n     variadic_outer_attrs = other.variadic_outer_attrs;\n+    node_id = other.node_id;\n \n     // guard to prevent null pointer dereference\n     if (other.return_type != nullptr)\n@@ -4237,6 +4254,8 @@ class ExternalFunctionItem : public ExternalItem\n     return return_type;\n   }\n \n+  Identifier get_identifier () const { return item_name; };\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n@@ -4275,6 +4294,8 @@ class ExternBlock : public VisItem\n   // Returns whether extern block has ABI name.\n   bool has_abi () const { return !abi.empty (); }\n \n+  std::string get_abi () const { return abi; }\n+\n   ExternBlock (std::string abi,\n \t       std::vector<std::unique_ptr<ExternalItem> > extern_items,\n \t       Visibility vis, std::vector<Attribute> inner_attrs,"}, {"sha": "1cc0c8e47285d75a532f25d6071b1e36e65ebe09", "filename": "gcc/rust/hir/rust-ast-lower-extern.h", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b992c8058c0ffb1866e97e5a2acc55b632773b53/gcc%2Frust%2Fhir%2Frust-ast-lower-extern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b992c8058c0ffb1866e97e5a2acc55b632773b53/gcc%2Frust%2Fhir%2Frust-ast-lower-extern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-extern.h?ref=b992c8058c0ffb1866e97e5a2acc55b632773b53", "patch": "@@ -0,0 +1,121 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_AST_LOWER_EXTERN_ITEM\n+#define RUST_AST_LOWER_EXTERN_ITEM\n+\n+#include \"rust-ast-lower-base.h\"\n+#include \"rust-ast-lower-type.h\"\n+\n+namespace Rust {\n+namespace HIR {\n+\n+class ASTLoweringExternItem : public ASTLoweringBase\n+{\n+  using Rust::HIR::ASTLoweringBase::visit;\n+\n+public:\n+  static HIR::ExternalItem *translate (AST::ExternalItem *item)\n+  {\n+    ASTLoweringExternItem resolver;\n+    item->accept_vis (resolver);\n+    return resolver.translated;\n+  }\n+\n+  void visit (AST::ExternalStaticItem &item) override\n+  {\n+    HIR::Visibility vis = HIR::Visibility::create_public ();\n+    HIR::Type *static_type\n+      = ASTLoweringType::translate (item.get_type ().get ());\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, item.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n+    mappings->insert_location (crate_num, mapping.get_hirid (),\n+\t\t\t       item.get_locus ());\n+\n+    HIR::ExternalStaticItem *static_item\n+      = new HIR::ExternalStaticItem (mapping, item.get_identifier (),\n+\t\t\t\t     std::unique_ptr<HIR::Type> (static_type),\n+\t\t\t\t     item.is_mut (), std::move (vis),\n+\t\t\t\t     item.get_outer_attrs (),\n+\t\t\t\t     item.get_locus ());\n+\n+    translated = static_item;\n+  }\n+\n+  void visit (AST::ExternalFunctionItem &function) override\n+  {\n+    std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n+    HIR::WhereClause where_clause (std::move (where_clause_items));\n+    HIR::Visibility vis = HIR::Visibility::create_public ();\n+\n+    std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n+    if (function.has_generics ())\n+      generic_params = lower_generic_params (function.get_generic_params ());\n+\n+    HIR::Type *return_type\n+      = function.has_return_type ()\n+\t  ? ASTLoweringType::translate (function.get_return_type ().get ())\n+\t  : nullptr;\n+\n+    std::vector<HIR::NamedFunctionParam> function_params;\n+    for (auto &param : function.get_function_params ())\n+      {\n+\tHIR::Type *param_type\n+\t  = ASTLoweringType::translate (param.get_type ().get ());\n+\tIdentifier param_name = param.get_name ();\n+\n+\tauto crate_num = mappings->get_current_crate ();\n+\tAnalysis::NodeMapping mapping (crate_num, param.get_node_id (),\n+\t\t\t\t       mappings->get_next_hir_id (crate_num),\n+\t\t\t\t       mappings->get_next_localdef_id (\n+\t\t\t\t\t crate_num));\n+\n+\tfunction_params.push_back (\n+\t  HIR::NamedFunctionParam (mapping, param_name,\n+\t\t\t\t   std::unique_ptr<HIR::Type> (param_type)));\n+      }\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, function.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n+    mappings->insert_location (crate_num, mapping.get_hirid (),\n+\t\t\t       function.get_locus ());\n+\n+    HIR::ExternalFunctionItem *function_item = new HIR::ExternalFunctionItem (\n+      mapping, function.get_identifier (), std::move (generic_params),\n+      std::unique_ptr<HIR::Type> (return_type), std::move (where_clause),\n+      std::move (function_params), function.is_variadic (), std::move (vis),\n+      function.get_outer_attrs (), function.get_locus ());\n+\n+    translated = function_item;\n+  }\n+\n+private:\n+  ASTLoweringExternItem () : translated (nullptr) {}\n+\n+  HIR::ExternalItem *translated;\n+};\n+\n+} // namespace HIR\n+} // namespace Rust\n+\n+#endif // RUST_AST_LOWER_ITEM"}, {"sha": "e53b739747ecec0ea47c1ede7ca87f91805eccdd", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b992c8058c0ffb1866e97e5a2acc55b632773b53/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b992c8058c0ffb1866e97e5a2acc55b632773b53/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=b992c8058c0ffb1866e97e5a2acc55b632773b53", "patch": "@@ -28,6 +28,7 @@\n #include \"rust-ast-lower-expr.h\"\n #include \"rust-ast-lower-pattern.h\"\n #include \"rust-ast-lower-block.h\"\n+#include \"rust-ast-lower-extern.h\"\n \n namespace Rust {\n namespace HIR {\n@@ -553,6 +554,37 @@ class ASTLoweringItem : public ASTLoweringBase\n       }\n   }\n \n+  void visit (AST::ExternBlock &extern_block) override\n+  {\n+    HIR::Visibility vis = HIR::Visibility::create_public ();\n+\n+    std::vector<std::unique_ptr<HIR::ExternalItem> > extern_items;\n+    for (auto &item : extern_block.get_extern_items ())\n+      {\n+\tHIR::ExternalItem *lowered\n+\t  = ASTLoweringExternItem::translate (item.get ());\n+\textern_items.push_back (std::unique_ptr<HIR::ExternalItem> (lowered));\n+      }\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, extern_block.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n+\n+    mappings->insert_defid_mapping (mapping.get_defid (), translated);\n+    mappings->insert_location (crate_num, mapping.get_hirid (),\n+\t\t\t       extern_block.get_locus ());\n+\n+    HIR::ExternBlock *hir_extern_block\n+      = new HIR::ExternBlock (mapping, extern_block.get_abi (),\n+\t\t\t      std::move (extern_items), std::move (vis),\n+\t\t\t      extern_block.get_inner_attrs (),\n+\t\t\t      extern_block.get_outer_attrs (),\n+\t\t\t      extern_block.get_locus ());\n+\n+    translated = hir_extern_block;\n+  }\n+\n private:\n   ASTLoweringItem () : translated (nullptr) {}\n "}, {"sha": "d61d0607c2cd95b8b5e743e0201f2213298b5c5b", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b992c8058c0ffb1866e97e5a2acc55b632773b53/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b992c8058c0ffb1866e97e5a2acc55b632773b53/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=b992c8058c0ffb1866e97e5a2acc55b632773b53", "patch": "@@ -3399,8 +3399,9 @@ ExternalFunctionItem::as_string () const\n \t}\n     }\n \n-  // add type on new line\n-  str += \"\\n (return) Type: \" + return_type->as_string ();\n+  // add type on new line)\n+  str += \"\\n (return) Type: \"\n+\t + (has_return_type () ? return_type->as_string () : \"()\");\n \n   // where clause\n   str += \"\\n Where clause: \";"}, {"sha": "6d53711942fd3339a9d3669f9d9dc45d51e00a82", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 31, "deletions": 37, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b992c8058c0ffb1866e97e5a2acc55b632773b53/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b992c8058c0ffb1866e97e5a2acc55b632773b53/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=b992c8058c0ffb1866e97e5a2acc55b632773b53", "patch": "@@ -2684,6 +2684,7 @@ class ImplBlock : public VisItem\n // Abstract base class for an item used inside an extern block\n class ExternalItem\n {\n+  Analysis::NodeMapping mappings;\n   AST::AttrVec outer_attrs;\n   Visibility visibility;\n   Identifier item_name;\n@@ -2710,22 +2711,27 @@ class ExternalItem\n \n   virtual void accept_vis (HIRVisitor &vis) = 0;\n \n+  Analysis::NodeMapping get_mappings () const { return mappings; }\n+\n protected:\n-  ExternalItem (Identifier item_name, Visibility vis, AST::AttrVec outer_attrs,\n-\t\tLocation locus)\n-    : outer_attrs (std::move (outer_attrs)), visibility (std::move (vis)),\n-      item_name (std::move (item_name)), locus (locus)\n+  ExternalItem (Analysis::NodeMapping mappings, Identifier item_name,\n+\t\tVisibility vis, AST::AttrVec outer_attrs, Location locus)\n+    : mappings (mappings), outer_attrs (std::move (outer_attrs)),\n+      visibility (std::move (vis)), item_name (std::move (item_name)),\n+      locus (locus)\n   {}\n \n   // Copy constructor\n   ExternalItem (ExternalItem const &other)\n-    : outer_attrs (other.outer_attrs), visibility (other.visibility),\n-      item_name (other.item_name), locus (other.locus)\n+    : mappings (other.mappings), outer_attrs (other.outer_attrs),\n+      visibility (other.visibility), item_name (other.item_name),\n+      locus (other.locus)\n   {}\n \n   // Overloaded assignment operator to clone\n   ExternalItem &operator= (ExternalItem const &other)\n   {\n+    mappings = other.mappings;\n     item_name = other.item_name;\n     visibility = other.visibility;\n     outer_attrs = other.outer_attrs;\n@@ -2752,11 +2758,11 @@ class ExternalStaticItem : public ExternalItem\n   std::unique_ptr<Type> item_type;\n \n public:\n-  ExternalStaticItem (Identifier item_name, std::unique_ptr<Type> item_type,\n-\t\t      bool is_mut, Visibility vis, AST::AttrVec outer_attrs,\n-\t\t      Location locus)\n-    : ExternalItem (std::move (item_name), std::move (vis),\n-\t\t    std::move (outer_attrs), locus),\n+  ExternalStaticItem (Analysis::NodeMapping mappings, Identifier item_name,\n+\t\t      std::unique_ptr<Type> item_type, bool is_mut,\n+\t\t      Visibility vis, AST::AttrVec outer_attrs, Location locus)\n+    : ExternalItem (std::move (mappings), std::move (item_name),\n+\t\t    std::move (vis), std::move (outer_attrs), locus),\n       has_mut (is_mut), item_type (std::move (item_type))\n   {}\n \n@@ -2797,45 +2803,31 @@ class ExternalStaticItem : public ExternalItem\n struct NamedFunctionParam\n {\n private:\n-  // bool has_name;   // otherwise is _\n-  Identifier name; // TODO: handle wildcard in identifier?\n-\n+  Identifier name;\n   std::unique_ptr<Type> param_type;\n-\n-  // TODO: should this store location data?\n+  Analysis::NodeMapping mappings;\n \n public:\n-  // Returns whether the named function parameter has a name (i.e. name is not\n-  // '_').\n   bool has_name () const { return name != \"_\"; }\n \n-  // Returns whether the named function parameter is in an error state.\n-  bool is_error () const\n-  {\n-    // also if identifier is \"\" but that is probably more costly to compute\n-    return param_type == nullptr;\n-  }\n-\n-  // Creates an error state named function parameter.\n-  static NamedFunctionParam create_error ()\n-  {\n-    return NamedFunctionParam (\"\", nullptr);\n-  }\n-\n-  NamedFunctionParam (Identifier name, std::unique_ptr<Type> param_type)\n-    : name (std::move (name)), param_type (std::move (param_type))\n+  NamedFunctionParam (Analysis::NodeMapping mappings, Identifier name,\n+\t\t      std::unique_ptr<Type> param_type)\n+    : name (std::move (name)), param_type (std::move (param_type)),\n+      mappings (std::move (mappings))\n   {}\n \n   // Copy constructor\n   NamedFunctionParam (NamedFunctionParam const &other)\n-    : name (other.name), param_type (other.param_type->clone_type ())\n+    : name (other.name), param_type (other.param_type->clone_type ()),\n+      mappings (other.mappings)\n   {}\n \n   ~NamedFunctionParam () = default;\n \n   // Overloaded assignment operator to clone\n   NamedFunctionParam &operator= (NamedFunctionParam const &other)\n   {\n+    mappings = other.mappings;\n     name = other.name;\n     param_type = other.param_type->clone_type ();\n     // has_name = other.has_name;\n@@ -2878,13 +2870,13 @@ class ExternalFunctionItem : public ExternalItem\n   bool has_where_clause () const { return !where_clause.is_empty (); }\n \n   ExternalFunctionItem (\n-    Identifier item_name,\n+    Analysis::NodeMapping mappings, Identifier item_name,\n     std::vector<std::unique_ptr<GenericParam> > generic_params,\n     std::unique_ptr<Type> return_type, WhereClause where_clause,\n     std::vector<NamedFunctionParam> function_params, bool has_variadics,\n     Visibility vis, AST::AttrVec outer_attrs, Location locus)\n-    : ExternalItem (std::move (item_name), std::move (vis),\n-\t\t    std::move (outer_attrs), locus),\n+    : ExternalItem (std::move (mappings), std::move (item_name),\n+\t\t    std::move (vis), std::move (outer_attrs), locus),\n       generic_params (std::move (generic_params)),\n       return_type (std::move (return_type)),\n       where_clause (std::move (where_clause)),\n@@ -2963,6 +2955,8 @@ class ExternBlock : public VisItem\n   // Returns whether extern block has ABI name.\n   bool has_abi () const { return !abi.empty (); }\n \n+  std::string get_abi () const { return abi; }\n+\n   ExternBlock (Analysis::NodeMapping mappings, std::string abi,\n \t       std::vector<std::unique_ptr<ExternalItem> > extern_items,\n \t       Visibility vis, AST::AttrVec inner_attrs,"}, {"sha": "6437be278ff8738684d3c2210af2e7b4ae791971", "filename": "gcc/rust/resolve/rust-ast-resolve-implitem.h", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b992c8058c0ffb1866e97e5a2acc55b632773b53/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b992c8058c0ffb1866e97e5a2acc55b632773b53/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h?ref=b992c8058c0ffb1866e97e5a2acc55b632773b53", "patch": "@@ -201,6 +201,59 @@ class ResolveTopLevelTraitItems : public ResolverBase\n   const CanonicalPath &prefix;\n };\n \n+class ResolveToplevelExternItem : public ResolverBase\n+{\n+  using Rust::Resolver::ResolverBase::visit;\n+\n+public:\n+  static void go (AST::ExternalItem *item,\n+\t\t  const CanonicalPath &prefix = CanonicalPath::create_empty ())\n+  {\n+    ResolveToplevelExternItem resolver (prefix);\n+    item->accept_vis (resolver);\n+  };\n+\n+  void visit (AST::ExternalFunctionItem &function) override\n+  {\n+    auto path\n+      = prefix.append (CanonicalPath::new_seg (function.get_node_id (),\n+\t\t\t\t\t       function.get_identifier ()));\n+    resolver->get_name_scope ().insert (\n+      path, function.get_node_id (), function.get_locus (), false,\n+      [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n+\tRichLocation r (function.get_locus ());\n+\tr.add_range (locus);\n+\trust_error_at (r, \"redefined multiple times\");\n+      });\n+    resolver->insert_new_definition (function.get_node_id (),\n+\t\t\t\t     Definition{function.get_node_id (),\n+\t\t\t\t\t\tfunction.get_node_id ()});\n+  }\n+\n+  void visit (AST::ExternalStaticItem &item) override\n+  {\n+    auto path = prefix.append (\n+      CanonicalPath::new_seg (item.get_node_id (), item.get_identifier ()));\n+    resolver->get_name_scope ().insert (\n+      path, item.get_node_id (), item.get_locus (), false,\n+      [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n+\tRichLocation r (item.get_locus ());\n+\tr.add_range (locus);\n+\trust_error_at (r, \"redefined multiple times\");\n+      });\n+    resolver->insert_new_definition (item.get_node_id (),\n+\t\t\t\t     Definition{item.get_node_id (),\n+\t\t\t\t\t\titem.get_node_id ()});\n+  }\n+\n+private:\n+  ResolveToplevelExternItem (const CanonicalPath &prefix)\n+    : ResolverBase (UNKNOWN_NODEID), prefix (prefix)\n+  {}\n+\n+  const CanonicalPath &prefix;\n+};\n+\n } // namespace Resolver\n } // namespace Rust\n "}, {"sha": "ccf3872ac044c6e7bc9dcbf4b41f891a887208bf", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b992c8058c0ffb1866e97e5a2acc55b632773b53/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b992c8058c0ffb1866e97e5a2acc55b632773b53/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=b992c8058c0ffb1866e97e5a2acc55b632773b53", "patch": "@@ -521,10 +521,19 @@ class ResolveItem : public ResolverBase\n     resolver->get_name_scope ().pop ();\n   }\n \n+  void visit (AST::ExternBlock &extern_block) override\n+  {\n+    for (auto &item : extern_block.get_extern_items ())\n+      {\n+\tresolve_extern_item (item.get ());\n+      }\n+  }\n+\n protected:\n   void resolve_impl_item (AST::TraitImplItem *item, const CanonicalPath &self);\n   void resolve_impl_item (AST::InherentImplItem *item,\n \t\t\t  const CanonicalPath &self);\n+  void resolve_extern_item (AST::ExternalItem *item);\n \n   ResolveItem () : ResolverBase (UNKNOWN_NODEID) {}\n };\n@@ -572,6 +581,46 @@ class ResolveImplItems : public ResolveItem\n   const CanonicalPath &self;\n };\n \n+class ResolveExternItem : public ResolverBase\n+{\n+  using Rust::Resolver::ResolverBase::visit;\n+\n+public:\n+  static void go (AST::ExternalItem *item)\n+  {\n+    ResolveExternItem resolver;\n+    item->accept_vis (resolver);\n+  };\n+\n+  void visit (AST::ExternalFunctionItem &function) override\n+  {\n+    if (function.has_generics ())\n+      {\n+\tfor (auto &generic : function.get_generic_params ())\n+\t  ResolveGenericParam::go (generic.get (), function.get_node_id ());\n+      }\n+\n+    if (function.has_return_type ())\n+      ResolveType::go (function.get_return_type ().get (),\n+\t\t       function.get_node_id ());\n+\n+    // we make a new scope so the names of parameters are resolved and shadowed\n+    // correctly\n+    for (auto &param : function.get_function_params ())\n+      {\n+\tResolveType::go (param.get_type ().get (), param.get_node_id ());\n+      }\n+  }\n+\n+  void visit (AST::ExternalStaticItem &item) override\n+  {\n+    ResolveType::go (item.get_type ().get (), item.get_node_id ());\n+  }\n+\n+private:\n+  ResolveExternItem () : ResolverBase (UNKNOWN_NODEID) {}\n+}; // namespace Resolver\n+\n } // namespace Resolver\n } // namespace Rust\n "}, {"sha": "a042f5c3dcb141c6d58c0d695f43c002c884d3dd", "filename": "gcc/rust/resolve/rust-ast-resolve-toplevel.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b992c8058c0ffb1866e97e5a2acc55b632773b53/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b992c8058c0ffb1866e97e5a2acc55b632773b53/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h?ref=b992c8058c0ffb1866e97e5a2acc55b632773b53", "patch": "@@ -191,6 +191,14 @@ class ResolveTopLevel : public ResolverBase\n       ResolveTopLevelTraitItems::go (item.get (), path);\n   }\n \n+  void visit (AST::ExternBlock &extern_block) override\n+  {\n+    for (auto &item : extern_block.get_extern_items ())\n+      {\n+\tResolveToplevelExternItem::go (item.get (), prefix);\n+      }\n+  }\n+\n private:\n   ResolveTopLevel (const CanonicalPath &prefix)\n     : ResolverBase (UNKNOWN_NODEID), prefix (prefix)"}, {"sha": "9cc833ff3ba2f8459f511c62450f4317d25270ba", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b992c8058c0ffb1866e97e5a2acc55b632773b53/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b992c8058c0ffb1866e97e5a2acc55b632773b53/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=b992c8058c0ffb1866e97e5a2acc55b632773b53", "patch": "@@ -635,5 +635,9 @@ ResolveItem::resolve_impl_item (AST::InherentImplItem *item,\n   ResolveImplItems::go (item, self);\n }\n \n+void\n+ResolveItem::resolve_extern_item (AST::ExternalItem *item)\n+{}\n+\n } // namespace Resolver\n } // namespace Rust"}]}