{"sha": "4f1c5cce901c4d53fb9130183ca275ef1d04fe8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYxYzVjY2U5MDFjNGQ1M2ZiOTEzMDE4M2NhMjc1ZWYxZDA0ZmU4YQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-05-28T02:25:46Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-05-28T02:25:46Z"}, "message": "alpha.c (alpha_does_function_need_gp): Test TARGET_PROFILING_NEEDS_GP in the if, instead of with an ifdef.\n\n        * config/alpha/alpha.c (alpha_does_function_need_gp): Test\n        TARGET_PROFILING_NEEDS_GP in the if, instead of with an ifdef.\n        (alpha_expand_prologue): Emit prologue_mcount if needed.\n        * config/alpha/alpha.h (TARGET_PROFILING_NEEDS_GP): Default to 0.\n        * config/alpha/alpha.md (prologue_mcount): New.\n        * config/alpha/linux.h (FUNCTION_PROFILER): Remove.\n        (TARGET_PROFILING_NEEDS_GP): Undef before redefining.\n        * config/alpha/netbsd.h: Likewise.\n\nFrom-SVN: r34222", "tree": {"sha": "64a0402d015893558373f8e8a8ee91f36f3af265", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64a0402d015893558373f8e8a8ee91f36f3af265"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f1c5cce901c4d53fb9130183ca275ef1d04fe8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f1c5cce901c4d53fb9130183ca275ef1d04fe8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f1c5cce901c4d53fb9130183ca275ef1d04fe8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f1c5cce901c4d53fb9130183ca275ef1d04fe8a/comments", "author": null, "committer": null, "parents": [{"sha": "a1920fc3d7d9c901cf31eae3b6632b5627eac496", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1920fc3d7d9c901cf31eae3b6632b5627eac496", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1920fc3d7d9c901cf31eae3b6632b5627eac496"}], "stats": {"total": 51, "additions": 39, "deletions": 12}, "files": [{"sha": "cff7b963bb720149e5f8ebca40aba06e1a2d5088", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1c5cce901c4d53fb9130183ca275ef1d04fe8a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1c5cce901c4d53fb9130183ca275ef1d04fe8a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f1c5cce901c4d53fb9130183ca275ef1d04fe8a", "patch": "@@ -1,3 +1,14 @@\n+2000-05-27  Richard Henderson  <rth@cygnus.com>\n+\n+\t* config/alpha/alpha.c (alpha_does_function_need_gp): Test\n+\tTARGET_PROFILING_NEEDS_GP in the if, instead of with an ifdef.\n+\t(alpha_expand_prologue): Emit prologue_mcount if needed.\n+\t* config/alpha/alpha.h (TARGET_PROFILING_NEEDS_GP): Default to 0.\n+\t* config/alpha/alpha.md (prologue_mcount): New.\n+\t* config/alpha/linux.h (FUNCTION_PROFILER): Remove.\n+\t(TARGET_PROFILING_NEEDS_GP): Undef before redefining.\n+\t* config/alpha/netbsd.h: Likewise.\n+\n 2000-05-27  Richard Henderson  <rth@cygnus.com>\n \n \t* config/alpha/elf.h (SELECT_SECTION): Mirror Kenner's May 19"}, {"sha": "f70e889bac81adb8180265d22471fa9ea84c9955", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1c5cce901c4d53fb9130183ca275ef1d04fe8a/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1c5cce901c4d53fb9130183ca275ef1d04fe8a/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=4f1c5cce901c4d53fb9130183ca275ef1d04fe8a", "patch": "@@ -4056,10 +4056,8 @@ alpha_does_function_need_gp ()\n   if (TARGET_WINDOWS_NT || TARGET_OPEN_VMS)\n     return 0;\n \n-#ifdef TARGET_PROFILING_NEEDS_GP\n-  if (profile_flag)\n+  if (TARGET_PROFILING_NEEDS_GP && profile_flag)\n     return 1;\n-#endif\n \n #ifdef ASM_OUTPUT_MI_THUNK\n   if (current_function_is_thunk)\n@@ -4190,6 +4188,13 @@ alpha_expand_prologue ()\n \temit_insn (gen_prologue_ldgp ());\n     }\n \n+  /* TARGET_PROFILING_NEEDS_GP actually implies that we need to insert\n+     the call to mcount ourselves, rather than having the linker do it\n+     magically in response to -pg.  Since _mcount has special linkage,\n+     don't represent the call as a call.  */\n+  if (TARGET_PROFILING_NEEDS_GP && profile_flag)\n+    emit_insn (gen_prologue_mcount ());\n+      \n   /* Adjust the stack by the frame size.  If the frame size is > 4096\n      bytes, we need to be sure we probe somewhere in the first and last\n      4096 bytes (we can probably get away without the latter test) and"}, {"sha": "ad59214ff18820650eddb63506b433c76320716e", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1c5cce901c4d53fb9130183ca275ef1d04fe8a/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1c5cce901c4d53fb9130183ca275ef1d04fe8a/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=4f1c5cce901c4d53fb9130183ca275ef1d04fe8a", "patch": "@@ -185,6 +185,9 @@ extern enum alpha_fp_trap_mode alpha_fptm;\n #ifndef TARGET_HAS_XFLOATING_LIBS\n #define TARGET_HAS_XFLOATING_LIBS 0\n #endif\n+#ifndef TARGET_PROFILING_NEEDS_GP\n+#define TARGET_PROFILING_NEEDS_GP 0\n+#endif\n \n /* Macro to define tables used to set the flags.\n    This is a list in braces of pairs in braces,"}, {"sha": "0866be524a12413d5fb7e00a2c3da239a5c87eda", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1c5cce901c4d53fb9130183ca275ef1d04fe8a/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1c5cce901c4d53fb9130183ca275ef1d04fe8a/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=4f1c5cce901c4d53fb9130183ca275ef1d04fe8a", "patch": "@@ -41,6 +41,9 @@\n ;;\t5\tprologue_stack_probe_loop\n ;;\t6\trealign\n ;;\t7\texception_receiver\n+;;\t8\tprologue_mcount\n+;;\t9\tprologue_ldgp_1\n+;;\t10\tprologue_ldgp_2\n \f\n ;; Processor type -- this attribute must exactly match the processor_type\n ;; enumeration in alpha.h.\n@@ -5613,6 +5616,17 @@\n   \"! TARGET_OPEN_VMS && ! TARGET_WINDOWS_NT\"\n   \"\")\n \n+;; The _mcount profiling hook has special calling conventions, and\n+;; does not clobber all the registers that a normal call would.  So\n+;; hide the fact this is a call at all.\n+\n+(define_insn \"prologue_mcount\"\n+  [(unspec_volatile [(const_int 0)] 8)]\n+  \"\"\n+  \"lda $28,_mcount\\;jsr $28,($28),_mcount\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"8\")])\n+\n (define_insn \"init_fp\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (match_operand:DI 1 \"register_operand\" \"r\"))"}, {"sha": "9969cc6279f0d398b72dc1fe28e5d4f53337dc4a", "filename": "gcc/config/alpha/linux.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1c5cce901c4d53fb9130183ca275ef1d04fe8a/gcc%2Fconfig%2Falpha%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1c5cce901c4d53fb9130183ca275ef1d04fe8a/gcc%2Fconfig%2Falpha%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Flinux.h?ref=4f1c5cce901c4d53fb9130183ca275ef1d04fe8a", "patch": "@@ -31,11 +31,8 @@ SUB_CPP_PREDEFINES\n #undef LIB_SPEC\n #define LIB_SPEC \"%{pg:-lgmon} %{pg:-lc_p} %{!pg:-lc}\"\n \n-#undef FUNCTION_PROFILER\n-#define FUNCTION_PROFILER(FILE, LABELNO)\t\t\t\\\n-\tfputs (\"\\tlda $28,_mcount\\n\\tjsr $28,($28),_mcount\\n\", (FILE))\n-\n /* Show that we need a GP when profiling.  */\n+#undef TARGET_PROFILING_NEEDS_GP\n #define TARGET_PROFILING_NEEDS_GP 1\n \n /* Don't care about faults in the prologue.  */"}, {"sha": "0a10f5ae0dc0918674a4e63dd0048418280287c3", "filename": "gcc/config/alpha/netbsd.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1c5cce901c4d53fb9130183ca275ef1d04fe8a/gcc%2Fconfig%2Falpha%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1c5cce901c4d53fb9130183ca275ef1d04fe8a/gcc%2Fconfig%2Falpha%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fnetbsd.h?ref=4f1c5cce901c4d53fb9130183ca275ef1d04fe8a", "patch": "@@ -28,9 +28,6 @@ Boston, MA 02111-1307, USA.  */\n #undef LIB_SPEC\n #define LIB_SPEC \"%{pg:-lgmon} %{pg:-lc_p} %{!pg:-lc}\"\n \n-#undef FUNCTION_PROFILER\n-#define FUNCTION_PROFILER(FILE, LABELNO)\t\t\t\\\n-\tfputs (\"\\tlda $28,_mcount\\n\\tjsr $28,($28),_mcount\\n\", (FILE))\n-\n /* Show that we need a GP when profiling.  */\n-#define TARGET_PROFILING_NEEDS_GP\n+#undef TARGET_PROFILING_NEEDS_GP\n+#define TARGET_PROFILING_NEEDS_GP 1"}]}