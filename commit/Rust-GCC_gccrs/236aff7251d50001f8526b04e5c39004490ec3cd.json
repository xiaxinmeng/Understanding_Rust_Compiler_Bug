{"sha": "236aff7251d50001f8526b04e5c39004490ec3cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM2YWZmNzI1MWQ1MDAwMWY4NTI2YjA0ZTVjMzkwMDQ0OTBlYzNjZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-07-14T13:52:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-07-14T13:52:38Z"}, "message": "re PR c/61779 (gcc -Og fails with impossible constraint on legal C code)\n\n2014-07-14  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/61779\n\t* tree-ssa-copy.c (copy_prop_visit_cond_stmt): Always try\n\tsimplifying a condition.\n\n\t* gcc.dg/tree-ssa/ssa-copyprop-2.c: New testcase.\n\nFrom-SVN: r212521", "tree": {"sha": "a374a741ef36dbc1083375dcefa23a616169e834", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a374a741ef36dbc1083375dcefa23a616169e834"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/236aff7251d50001f8526b04e5c39004490ec3cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/236aff7251d50001f8526b04e5c39004490ec3cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/236aff7251d50001f8526b04e5c39004490ec3cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/236aff7251d50001f8526b04e5c39004490ec3cd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "72602c6cb4707198b2f965d26c2e5009f52d6e96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72602c6cb4707198b2f965d26c2e5009f52d6e96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72602c6cb4707198b2f965d26c2e5009f52d6e96"}], "stats": {"total": 70, "additions": 41, "deletions": 29}, "files": [{"sha": "65a6b5ecb5ef6d838c75473dd6a0342f050dd118", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236aff7251d50001f8526b04e5c39004490ec3cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236aff7251d50001f8526b04e5c39004490ec3cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=236aff7251d50001f8526b04e5c39004490ec3cd", "patch": "@@ -1,3 +1,9 @@\n+2014-07-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/61779\n+\t* tree-ssa-copy.c (copy_prop_visit_cond_stmt): Always try\n+\tsimplifying a condition.\n+\n 2014-07-14  Richard Biener  <rguenther@suse.de>\n \n \t* builtins.c (c_strlen): Make only_value == 2 really only"}, {"sha": "0a7e5673a78df5c8e06f9fee0ea8b852159833e4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236aff7251d50001f8526b04e5c39004490ec3cd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236aff7251d50001f8526b04e5c39004490ec3cd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=236aff7251d50001f8526b04e5c39004490ec3cd", "patch": "@@ -1,3 +1,8 @@\n+2014-07-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/61779\n+\t* gcc.dg/tree-ssa/ssa-copyprop-2.c: New testcase.\n+\n 2014-07-14  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/61786"}, {"sha": "9757013918e2b243c5b12fb72cf698c14b0900ba", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-copyprop-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236aff7251d50001f8526b04e5c39004490ec3cd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-copyprop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236aff7251d50001f8526b04e5c39004490ec3cd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-copyprop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-copyprop-2.c?ref=236aff7251d50001f8526b04e5c39004490ec3cd", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Og -fdump-tree-optimized\" } */\n+\n+extern long long __sdt_unsp;\n+void\n+f(void)\n+{\n+  for (;;)\n+    __asm__ (\"%0\" :: \"i\" (((!__extension__ (__builtin_constant_p ((((unsigned long long) (__typeof (__builtin_choose_expr (((__builtin_classify_type (0) + 3) & -4) == 4, (0), 0U))) __sdt_unsp) ) == 0) )) ? 1 : -1) ));\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"PHI\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "06d98df00fc115220549e7e62c1ca7c2b82dec43", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 17, "deletions": 29, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236aff7251d50001f8526b04e5c39004490ec3cd/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236aff7251d50001f8526b04e5c39004490ec3cd/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=236aff7251d50001f8526b04e5c39004490ec3cd", "patch": "@@ -237,38 +237,26 @@ copy_prop_visit_cond_stmt (gimple stmt, edge *taken_edge_p)\n   enum ssa_prop_result retval = SSA_PROP_VARYING;\n   location_t loc = gimple_location (stmt);\n \n-  tree op0 = gimple_cond_lhs (stmt);\n-  tree op1 = gimple_cond_rhs (stmt);\n+  tree op0 = valueize_val (gimple_cond_lhs (stmt));\n+  tree op1 = valueize_val (gimple_cond_rhs (stmt));\n \n-  /* The only conditionals that we may be able to compute statically\n-     are predicates involving two SSA_NAMEs.  */\n-  if (TREE_CODE (op0) == SSA_NAME && TREE_CODE (op1) == SSA_NAME)\n+  /* See if we can determine the predicate's value.  */\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n-      op0 = valueize_val (op0);\n-      op1 = valueize_val (op1);\n-\n-      /* See if we can determine the predicate's value.  */\n-      if (dump_file && (dump_flags & TDF_DETAILS))\n-\t{\n-\t  fprintf (dump_file, \"Trying to determine truth value of \");\n-\t  fprintf (dump_file, \"predicate \");\n-\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n-\t}\n+      fprintf (dump_file, \"Trying to determine truth value of \");\n+      fprintf (dump_file, \"predicate \");\n+      print_gimple_stmt (dump_file, stmt, 0, 0);\n+    }\n \n-      /* We can fold COND and get a useful result only when we have\n-\t the same SSA_NAME on both sides of a comparison operator.  */\n-      if (op0 == op1)\n-\t{\n-\t  tree folded_cond = fold_binary_loc (loc, gimple_cond_code (stmt),\n-                                          boolean_type_node, op0, op1);\n-\t  if (folded_cond)\n-\t    {\n-\t      basic_block bb = gimple_bb (stmt);\n-\t      *taken_edge_p = find_taken_edge (bb, folded_cond);\n-\t      if (*taken_edge_p)\n-\t\tretval = SSA_PROP_INTERESTING;\n-\t    }\n-\t}\n+  /* Fold COND and see whether we get a useful result.  */\n+  tree folded_cond = fold_binary_loc (loc, gimple_cond_code (stmt),\n+\t\t\t\t      boolean_type_node, op0, op1);\n+  if (folded_cond)\n+    {\n+      basic_block bb = gimple_bb (stmt);\n+      *taken_edge_p = find_taken_edge (bb, folded_cond);\n+      if (*taken_edge_p)\n+\tretval = SSA_PROP_INTERESTING;\n     }\n \n   if (dump_file && (dump_flags & TDF_DETAILS) && *taken_edge_p)"}]}