{"sha": "8f9f5101d52fec12f0f18dfaf746d18cf1f230d0", "node_id": "C_kwDOANBUbNoAKDhmOWY1MTAxZDUyZmVjMTJmMGYxOGRmYWY3NDZkMThjZjFmMjMwZDA", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-18T08:07:22Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-18T09:02:17Z"}, "message": "tree-optimization/103277 - do abnormal cleanup after call DSE\n\nWe can now DSE calls in more cases which requires us to eventually\npurge dead abnormal edges.  This implements this.\n\n2021-11-18  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/103277\n\t* tree-ssa-dse.c (need_ab_cleanup): New.\n\t(dse_optimize_redundant_stores): Adjust.\n\t(delete_dead_or_redundant_assignment): Get extra\n\tneed_ab_cleanup argument and set when abnormal cleanup is\n\tneeded.\n\t(dse_optimize_call): Adjust.\n\t(dse_optimize_stmt): Likewise.\n\t(pass_dse::execute): Allocate and deallocate need_ab_cleanup.\n\tPerform abnormal cleanup.\n\t* tree-ssa-dse.h (delete_dead_or_redundant_assignment): Adjust.\n\n\t* gcc.dg/pr103277.c: New testcase.", "tree": {"sha": "9aa716db4250a26ddb61728af4042a0ed8306fbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9aa716db4250a26ddb61728af4042a0ed8306fbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f9f5101d52fec12f0f18dfaf746d18cf1f230d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f9f5101d52fec12f0f18dfaf746d18cf1f230d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f9f5101d52fec12f0f18dfaf746d18cf1f230d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f9f5101d52fec12f0f18dfaf746d18cf1f230d0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15f5e70cbb33b40c97325ef9d55557747a148d39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15f5e70cbb33b40c97325ef9d55557747a148d39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15f5e70cbb33b40c97325ef9d55557747a148d39"}], "stats": {"total": 41, "additions": 35, "deletions": 6}, "files": [{"sha": "5c206f919cd537d1d99c19d28f493f6726a339a4", "filename": "gcc/testsuite/gcc.dg/pr103277.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9f5101d52fec12f0f18dfaf746d18cf1f230d0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103277.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9f5101d52fec12f0f18dfaf746d18cf1f230d0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103277.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103277.c?ref=8f9f5101d52fec12f0f18dfaf746d18cf1f230d0", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fbranch-probabilities -fno-ipa-pure-const\" } */\n+\n+__attribute__ ((returns_twice)) void\n+bar (void)\n+{\n+}\n+\n+void\n+foo (int cond)\n+{\n+  if (cond)\n+    bar ();\n+} /* { dg-message \"profile count data\" } */"}, {"sha": "9531d892f76209f6504a2b5d2d95c423dd629c5a", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9f5101d52fec12f0f18dfaf746d18cf1f230d0/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9f5101d52fec12f0f18dfaf746d18cf1f230d0/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=8f9f5101d52fec12f0f18dfaf746d18cf1f230d0", "patch": "@@ -88,6 +88,7 @@ static void delete_dead_or_redundant_call (gimple_stmt_iterator *, const char *)\n /* Bitmap of blocks that have had EH statements cleaned.  We should\n    remove their dead edges eventually.  */\n static bitmap need_eh_cleanup;\n+static bitmap need_ab_cleanup;\n \n /* STMT is a statement that may write into memory.  Analyze it and\n    initialize WRITE to describe how STMT affects memory.\n@@ -758,7 +759,8 @@ dse_optimize_redundant_stores (gimple *stmt)\n \t\t\t       (ao_ref_base_alias_set (&lhs_ref),\n \t\t\t\t\t\t  earlier_base_set)))\n \t\t    delete_dead_or_redundant_assignment (&gsi, \"redundant\",\n-\t\t\t\t\t\t\t need_eh_cleanup);\n+\t\t\t\t\t\t\t need_eh_cleanup,\n+\t\t\t\t\t\t\t need_ab_cleanup);\n \t\t}\n \t      else if (is_gimple_call (use_stmt))\n \t\t{\n@@ -1027,8 +1029,10 @@ delete_dead_or_redundant_call (gimple_stmt_iterator *gsi, const char *type)\n /* Delete a dead store at GSI, which is a gimple assignment. */\n \n void\n-delete_dead_or_redundant_assignment (gimple_stmt_iterator *gsi, const char *type,\n-\t\t\t\t     bitmap need_eh_cleanup)\n+delete_dead_or_redundant_assignment (gimple_stmt_iterator *gsi,\n+\t\t\t\t     const char *type,\n+\t\t\t\t     bitmap need_eh_cleanup,\n+\t\t\t\t     bitmap need_ab_cleanup)\n {\n   gimple *stmt = gsi_stmt (*gsi);\n   if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -1043,6 +1047,8 @@ delete_dead_or_redundant_assignment (gimple_stmt_iterator *gsi, const char *type\n \n   /* Remove the dead store.  */\n   basic_block bb = gimple_bb (stmt);\n+  if (need_ab_cleanup && stmt_can_make_abnormal_goto (stmt))\n+    bitmap_set_bit (need_ab_cleanup, bb->index);\n   if (gsi_remove (gsi, true) && need_eh_cleanup)\n     bitmap_set_bit (need_eh_cleanup, bb->index);\n \n@@ -1132,7 +1138,8 @@ dse_optimize_call (gimple_stmt_iterator *gsi, sbitmap live_bytes)\n \t  if (store_status != DSE_STORE_DEAD)\n \t    return false;\n \t}\n-  delete_dead_or_redundant_assignment (gsi, \"dead\", need_eh_cleanup);\n+  delete_dead_or_redundant_assignment (gsi, \"dead\", need_eh_cleanup,\n+\t\t\t\t       need_ab_cleanup);\n   return true;\n }\n \n@@ -1296,7 +1303,8 @@ dse_optimize_stmt (function *fun, gimple_stmt_iterator *gsi, sbitmap live_bytes)\n       update_stmt (stmt);\n     }\n   else\n-    delete_dead_or_redundant_assignment (gsi, \"dead\", need_eh_cleanup);\n+    delete_dead_or_redundant_assignment (gsi, \"dead\", need_eh_cleanup,\n+\t\t\t\t\t need_ab_cleanup);\n }\n \n namespace {\n@@ -1333,6 +1341,7 @@ pass_dse::execute (function *fun)\n {\n   unsigned todo = 0;\n   need_eh_cleanup = BITMAP_ALLOC (NULL);\n+  need_ab_cleanup = BITMAP_ALLOC (NULL);\n   auto_sbitmap live_bytes (param_dse_max_object_size);\n \n   renumber_gimple_stmt_uids (fun);\n@@ -1410,8 +1419,14 @@ pass_dse::execute (function *fun)\n       gimple_purge_all_dead_eh_edges (need_eh_cleanup);\n       todo |= TODO_cleanup_cfg;\n     }\n+  if (!bitmap_empty_p (need_ab_cleanup))\n+    {\n+      gimple_purge_all_dead_abnormal_call_edges (need_ab_cleanup);\n+      todo |= TODO_cleanup_cfg;\n+    }\n \n   BITMAP_FREE (need_eh_cleanup);\n+  BITMAP_FREE (need_ab_cleanup);\n \n   return todo;\n }"}, {"sha": "051620c02854dca6f07a42efba890f7e3a131c34", "filename": "gcc/tree-ssa-dse.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9f5101d52fec12f0f18dfaf746d18cf1f230d0/gcc%2Ftree-ssa-dse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9f5101d52fec12f0f18dfaf746d18cf1f230d0/gcc%2Ftree-ssa-dse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.h?ref=8f9f5101d52fec12f0f18dfaf746d18cf1f230d0", "patch": "@@ -32,6 +32,6 @@ dse_store_status dse_classify_store (ao_ref *, gimple *, bool, sbitmap,\n \t\t\t\t     bool * = NULL, tree = NULL);\n \n void delete_dead_or_redundant_assignment (gimple_stmt_iterator *, const char *,\n-\t\t\t\t\t  bitmap = NULL);\n+\t\t\t\t\t  bitmap = NULL, bitmap = NULL);\n \n #endif   /* GCC_TREE_SSA_DSE_H  */"}]}