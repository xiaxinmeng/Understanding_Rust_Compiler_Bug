{"sha": "aa4b467b680f230ab11922d1e29695e1eaba12af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE0YjQ2N2I2ODBmMjMwYWIxMTkyMmQxZTI5Njk1ZTFlYWJhMTJhZg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2016-05-13T21:35:39Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2016-05-13T21:35:39Z"}, "message": "Implement C11 DR#423 resolution (ignore function return type qualifiers).\n\nThe resolution of C11 DR#423, apart from doing things with the types\nof expressions cast to qualified types which are only in standard\nterms observable with _Generic and which agree with how GCC has\nimplemented _Generic all along, also specifies that qualifiers are\ndiscarded from function return types: \"derived-declarator-type-list\nfunction returning T\" becomes \"derived-declarator-type-list function\nreturning the unqualified version of T\" in the rules giving types for\nfunction declarators.  This means that declarations of a function with\nboth qualified and unqualified return types are now compatible,\nsimilar to how different declarations can vary in whether a function\nargument is declared with a qualifier or unqualified type.\n\nThis patch implements this resolution.  Since the motivation for the\nchange was _Generic, the resolution is restricted to C11 mode; there's\nno reason to consider there to be a defect in this regard in older\nstandard versions.  Some less-obvious issues are handled as follows:\n\n* As usual, and as with function arguments, _Atomic is not considered\n  a qualifier for this purpose; that is, function declarations must\n  agree regarding whether the return type is atomic.\n\n* By 6.9.1#2, a function definition cannot return qualified void.  But\n  with this change, specifying \"const void\" in the declaration\n  produces the type \"function returning void\", which is perfectly\n  valid, so \"const void f (void) {}\" is no longer an error.\n\n* The application to restrict is less clear.  The way I am\n  interpreting it in this patch is that \"unqualified version of T\" is\n  not valid if T is not valid, as in the case where T is a\n  restrict-qualified version of a type that cannot be restrict\n  qualified (non-pointer, or pointer-to-function).  But it's possible\n  to argue the other way from the wording.\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.\n\ngcc/c:\n\t* c-decl.c (grokdeclarator): For C11, discard qualifiers on\n\tfunction return type.\n\ngcc/testsuite:\n\t* gcc.dg/qual-return-5.c, gcc.dg/qual-return-6.c: New tests.\n\t* gcc.dg/call-diag-2.c, gcc.dg/qual-return-2.c ,\n\tgcc.dg/qual-return-3.c, gcc.dg/qual-return-4.c: Use -std=gnu99.\n\nFrom-SVN: r236231", "tree": {"sha": "67890b5377876cd47fa3c7b49af6bf90643bad65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67890b5377876cd47fa3c7b49af6bf90643bad65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa4b467b680f230ab11922d1e29695e1eaba12af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa4b467b680f230ab11922d1e29695e1eaba12af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa4b467b680f230ab11922d1e29695e1eaba12af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa4b467b680f230ab11922d1e29695e1eaba12af/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "653fb4a289f340c37c18432ae50971b0be7f5ed8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/653fb4a289f340c37c18432ae50971b0be7f5ed8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/653fb4a289f340c37c18432ae50971b0be7f5ed8"}], "stats": {"total": 84, "additions": 77, "deletions": 7}, "files": [{"sha": "c726e9fde17ba5fd05b38bd548e4dc9a13c8c08b", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4b467b680f230ab11922d1e29695e1eaba12af/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4b467b680f230ab11922d1e29695e1eaba12af/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=aa4b467b680f230ab11922d1e29695e1eaba12af", "patch": "@@ -1,3 +1,8 @@\n+2016-05-13  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-decl.c (grokdeclarator): For C11, discard qualifiers on\n+\tfunction return type.\n+\n 2016-05-12  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/70756"}, {"sha": "b2dd644748ed52501b17d1fbab92bb0ff1917dd8", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4b467b680f230ab11922d1e29695e1eaba12af/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4b467b680f230ab11922d1e29695e1eaba12af/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=aa4b467b680f230ab11922d1e29695e1eaba12af", "patch": "@@ -6106,20 +6106,35 @@ grokdeclarator (const struct c_declarator *declarator,\n \t       qualify the return type, not the function type.  */\n \t    if (type_quals)\n \t      {\n+\t\tint quals_used = type_quals;\n \t\t/* Type qualifiers on a function return type are\n \t\t   normally permitted by the standard but have no\n \t\t   effect, so give a warning at -Wreturn-type.\n \t\t   Qualifiers on a void return type are banned on\n \t\t   function definitions in ISO C; GCC used to used\n-\t\t   them for noreturn functions.  */\n-\t\tif (VOID_TYPE_P (type) && really_funcdef)\n+\t\t   them for noreturn functions.  The resolution of C11\n+\t\t   DR#423 means qualifiers (other than _Atomic) are\n+\t\t   actually removed from the return type when\n+\t\t   determining the function type.  */\n+\t\tif (flag_isoc11)\n+\t\t  quals_used &= TYPE_QUAL_ATOMIC;\n+\t\tif (quals_used && VOID_TYPE_P (type) && really_funcdef)\n \t\t  pedwarn (loc, 0,\n \t\t\t   \"function definition has qualified void return type\");\n \t\telse\n \t\t  warning_at (loc, OPT_Wignored_qualifiers,\n \t\t\t   \"type qualifiers ignored on function return type\");\n \n-\t\ttype = c_build_qualified_type (type, type_quals);\n+\t\t/* Ensure an error for restrict on invalid types; the\n+\t\t   DR#423 resolution is not entirely clear about\n+\t\t   this.  */\n+\t\tif (flag_isoc11\n+\t\t    && (type_quals & TYPE_QUAL_RESTRICT)\n+\t\t    && (!POINTER_TYPE_P (type)\n+\t\t\t|| !C_TYPE_OBJECT_OR_INCOMPLETE_P (TREE_TYPE (type))))\n+\t\t  error_at (loc, \"invalid use of %<restrict%>\");\n+\t\tif (quals_used)\n+\t\t  type = c_build_qualified_type (type, quals_used);\n \t      }\n \t    type_quals = TYPE_UNQUALIFIED;\n "}, {"sha": "9a8cd750ea624758bbcab5b06123adc9b6a5f675", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4b467b680f230ab11922d1e29695e1eaba12af/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4b467b680f230ab11922d1e29695e1eaba12af/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aa4b467b680f230ab11922d1e29695e1eaba12af", "patch": "@@ -1,3 +1,9 @@\n+2016-05-13  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/qual-return-5.c, gcc.dg/qual-return-6.c: New tests.\n+\t* gcc.dg/call-diag-2.c, gcc.dg/qual-return-2.c ,\n+\tgcc.dg/qual-return-3.c, gcc.dg/qual-return-4.c: Use -std=gnu99.\n+\n 2016-05-13  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/60049"}, {"sha": "b998ea9d76043b7e18788fe1732943ba380e3802", "filename": "gcc/testsuite/gcc.dg/call-diag-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4b467b680f230ab11922d1e29695e1eaba12af/gcc%2Ftestsuite%2Fgcc.dg%2Fcall-diag-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4b467b680f230ab11922d1e29695e1eaba12af/gcc%2Ftestsuite%2Fgcc.dg%2Fcall-diag-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcall-diag-2.c?ref=aa4b467b680f230ab11922d1e29695e1eaba12af", "patch": "@@ -1,7 +1,7 @@\n /* Test diagnostics for calling function returning qualified void or\n    other incomplete type other than void.  PR 35210.  */\n /* { dg-do compile } */\n-/* { dg-options \"-pedantic-errors\" } */\n+/* { dg-options \"-std=gnu99 -pedantic-errors\" } */\n \n const void f_cv (void);\n struct s f_s (void);"}, {"sha": "1cd1253518bfb870786cf7571b00ebc536ef86c4", "filename": "gcc/testsuite/gcc.dg/qual-return-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4b467b680f230ab11922d1e29695e1eaba12af/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4b467b680f230ab11922d1e29695e1eaba12af/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-2.c?ref=aa4b467b680f230ab11922d1e29695e1eaba12af", "patch": "@@ -1,7 +1,7 @@\n /* Test for warnings for qualified function return types.  -pedantic test.  */\n /* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n /* { dg-do compile } */\n-/* { dg-options \"-pedantic\" } */\n+/* { dg-options \"-pedantic -std=gnu99\" } */\n \n /* Qualifying a function return type makes no sense.  */\n "}, {"sha": "bd760799d98e26b7c6bb6eda57d5b9d85652493c", "filename": "gcc/testsuite/gcc.dg/qual-return-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4b467b680f230ab11922d1e29695e1eaba12af/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4b467b680f230ab11922d1e29695e1eaba12af/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-3.c?ref=aa4b467b680f230ab11922d1e29695e1eaba12af", "patch": "@@ -4,7 +4,7 @@\n \n /* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n /* { dg-do compile } */\n-/* { dg-options \"\" } */\n+/* { dg-options \"-std=gnu99\" } */\n \n int foo (); /* { dg-message \"note: previous declaration\" \"different qualifiers\" } */\n const int foo () { return 0; } /* { dg-error \"conflicting types\" \"different qualifiers\" } */"}, {"sha": "7bb5b6919733159cf994380817c28e3dda6f74e7", "filename": "gcc/testsuite/gcc.dg/qual-return-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4b467b680f230ab11922d1e29695e1eaba12af/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4b467b680f230ab11922d1e29695e1eaba12af/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-4.c?ref=aa4b467b680f230ab11922d1e29695e1eaba12af", "patch": "@@ -3,7 +3,7 @@\n    types, not other such types within the definition.  */\n /* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n /* { dg-do compile } */\n-/* { dg-options \"-pedantic\" } */\n+/* { dg-options \"-pedantic -std=gnu99\" } */\n \n volatile void (*y)(int);\n "}, {"sha": "32a08f217d06007cb93df87c675ebf52f884fcd2", "filename": "gcc/testsuite/gcc.dg/qual-return-5.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4b467b680f230ab11922d1e29695e1eaba12af/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4b467b680f230ab11922d1e29695e1eaba12af/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-5.c?ref=aa4b467b680f230ab11922d1e29695e1eaba12af", "patch": "@@ -0,0 +1,32 @@\n+/* Test qualifiers on function return types after DR#423: those\n+   qualifiers are now ignored for all purposes (but _Atomic is not,\n+   for this purpose, a qualifier).  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+int f1 (void);\n+const int f1 (void);\n+volatile int f1 (void) { return 0; }\n+\n+int *restrict f2 (void) { return 0; }\n+int *f2 (void);\n+\n+const volatile long f3 (void);\n+long f3 (void);\n+\n+const volatile void f4 (void) { }\n+void f4 (void);\n+\n+_Atomic int f5 (void); /* { dg-message \"previous declaration\" } */\n+int f5 (void); /* { dg-error \"conflicting\" } */\n+\n+int f6 (void); /* { dg-message \"previous declaration\" } */\n+_Atomic int f6 (void) { return 0; } /* { dg-error \"conflicting\" } */\n+\n+/* The standard seems unclear regarding the case where restrict is\n+   applied to a function return type that may not be\n+   restrict-qualified; assume here that it is disallowed.  */\n+restrict int f7 (void); /* { dg-error \"restrict\" } */\n+\n+typedef void FT (void);\n+FT *restrict f8 (void); /* { dg-error \"restrict\" } */"}, {"sha": "5b3ded0696aaaebb55b4ead62c3fbeb224fd3f90", "filename": "gcc/testsuite/gcc.dg/qual-return-6.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4b467b680f230ab11922d1e29695e1eaba12af/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4b467b680f230ab11922d1e29695e1eaba12af/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-6.c?ref=aa4b467b680f230ab11922d1e29695e1eaba12af", "patch": "@@ -0,0 +1,12 @@\n+/* Test qualifiers on function return types after DR#423: those\n+   qualifiers are now ignored for all purposes (except that _Atomic\n+   still affects the type), but should still get warnings.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -Wignored-qualifiers\" } */\n+\n+const int f1 (void); /* { dg-warning \"qualifiers ignored\" } */\n+volatile int f2 (void) { return 0; } /* { dg-warning \"qualifiers ignored\" } */\n+const volatile void f3 (void) { } /* { dg-warning \"qualifiers ignored\" } */\n+const void f4 (void); /* { dg-warning \"qualifiers ignored\" } */\n+_Atomic int f5 (void); /* { dg-warning \"qualifiers ignored\" } */\n+_Atomic int f6 (void) { return 0; } /* { dg-warning \"qualifiers ignored\" } */"}]}