{"sha": "0b6b8f85a3c39fd9a5673be73ae6c5dde1850306", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI2YjhmODVhM2MzOWZkOWE1NjczYmU3M2FlNmM1ZGRlMTg1MDMwNg==", "commit": {"author": {"name": "Robert Suchanek", "email": "robert.suchanek@imgtec.com", "date": "2016-08-24T07:53:07Z"}, "committer": {"name": "Robert Suchanek", "email": "rts@gcc.gnu.org", "date": "2016-08-24T07:53:07Z"}, "message": "re PR testsuite/77317 (x86_64 --target_board=''unix/ unix/-m32'' parallel testrun gives inconsistent results in gcc.dg/vect)\n\nFix PR testsuite/77317\n\ngcc/testsuite/\n\t* lib/target-supports.exp\n\t(check_effective_target_vect_aligned_arrays): Don't cache the result.\n\t(check_effective_target_vect_natural_alignment): Ditto.\n\t(check_effective_target_vector_alignment_reachable): Ditto.\n\t(check_effective_target_vector_alignment_reachable_for_64bit): Ditto.\n\nFrom-SVN: r239730", "tree": {"sha": "a2e4b10937d9c5d73c56e50ed21c39d89e0760e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2e4b10937d9c5d73c56e50ed21c39d89e0760e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b6b8f85a3c39fd9a5673be73ae6c5dde1850306", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b6b8f85a3c39fd9a5673be73ae6c5dde1850306", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b6b8f85a3c39fd9a5673be73ae6c5dde1850306", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b6b8f85a3c39fd9a5673be73ae6c5dde1850306/comments", "author": null, "committer": null, "parents": [{"sha": "a4892ab4f832c4981631fb71d8623868d3ecdf36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4892ab4f832c4981631fb71d8623868d3ecdf36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4892ab4f832c4981631fb71d8623868d3ecdf36"}], "stats": {"total": 110, "additions": 39, "deletions": 71}, "files": [{"sha": "fef690908f49021b606c5c8adbec7636bf0153bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6b8f85a3c39fd9a5673be73ae6c5dde1850306/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6b8f85a3c39fd9a5673be73ae6c5dde1850306/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0b6b8f85a3c39fd9a5673be73ae6c5dde1850306", "patch": "@@ -1,3 +1,12 @@\n+2016-08-24  Robert Suchanek  <robert.suchanek@imgtec.com>\n+\n+\tPR testsuite/77317\n+\t* lib/target-supports.exp\n+\t(check_effective_target_vect_aligned_arrays): Don't cache the result.\n+\t(check_effective_target_vect_natural_alignment): Ditto.\n+\t(check_effective_target_vector_alignment_reachable): Ditto.\n+\t(check_effective_target_vector_alignment_reachable_for_64bit): Ditto.\n+\n 2016-08-23  Ian Lance Taylor  <iant@golang.org>\n \n \t* gcc.target/s390/nolrl-1.c: Don't match the file name."}, {"sha": "0dabea0850124947a7fe333e0b94c4077434f278", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 30, "deletions": 71, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6b8f85a3c39fd9a5673be73ae6c5dde1850306/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6b8f85a3c39fd9a5673be73ae6c5dde1850306/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=0b6b8f85a3c39fd9a5673be73ae6c5dde1850306", "patch": "@@ -5309,32 +5309,22 @@ proc check_effective_target_vect_hw_misalign { } {\n \n # Return 1 if arrays are aligned to the vector alignment\n # boundary, 0 otherwise.\n-#\n-# This won't change for different subtargets so cache the result.\n \n proc check_effective_target_vect_aligned_arrays { } {\n-    global et_vect_aligned_arrays_saved\n-    global et_index\n-\n-    if [info exists et_vect_aligned_arrays_saved($et_index)] {\n-\tverbose \"check_effective_target_vect_aligned_arrays:\\\n-\t\t using cached result\" 2\n-    } else {\n-\tset et_vect_aligned_arrays_saved($et_index) 0\n-        if { ([istarget x86_64-*-*] || [istarget i?86-*-*]) } {\n-\t    if { ([is-effective-target lp64]\n-\t          && ( ![check_avx_available]\n-\t\t     || [check_prefer_avx128])) } {\n-\t\t set et_vect_aligned_arrays_saved($et_index) 1\n-\t    }\n-\t}\n-        if [istarget spu-*-*] {\n-\t    set et_vect_aligned_arrays_saved($et_index) 1\n+    set et_vect_aligned_arrays 0\n+    if { ([istarget x86_64-*-*] || [istarget i?86-*-*]) } {\n+\tif { ([is-effective-target lp64]\n+\t      && ( ![check_avx_available]\n+\t\t || [check_prefer_avx128])) } {\n+\t     set et_vect_aligned_arrays 1\n \t}\n     }\n+    if [istarget spu-*-*] {\n+\tset et_vect_aligned_arrays 1\n+    }\n     verbose \"check_effective_target_vect_aligned_arrays:\\\n-\t     returning $et_vect_aligned_arrays_saved($et_index)\" 2\n-    return $et_vect_aligned_arrays_saved($et_index)\n+\t     returning $et_vect_aligned_arrays\" 2\n+    return $et_vect_aligned_arrays\n }\n \n # Return 1 if types of size 32 bit or less are naturally aligned\n@@ -5382,74 +5372,43 @@ proc check_effective_target_natural_alignment_64 { } {\n \n # Return 1 if all vector types are naturally aligned (aligned to their\n # type-size), 0 otherwise.\n-#\n-# This won't change for different subtargets so cache the result.\n \n proc check_effective_target_vect_natural_alignment { } {\n-    global et_vect_natural_alignment_saved\n-    global et_index\n-\n-    if [info exists et_vect_natural_alignment_saved($et_index)] {\n-        verbose \"check_effective_target_vect_natural_alignment: using cached result\" 2\n-    } else {\n-\tset et_vect_natural_alignment_saved($et_index) 1\n-        if { [check_effective_target_arm_eabi]\n-\t     || [istarget nvptx-*-*]\n-\t     || [istarget s390*-*-*] } {\n-\t    set et_vect_natural_alignment_saved($et_index) 0\n-        }\n+    set et_vect_natural_alignment 1\n+    if { [check_effective_target_arm_eabi]\n+\t || [istarget nvptx-*-*]\n+\t || [istarget s390*-*-*] } {\n+\tset et_vect_natural_alignment 0\n     }\n     verbose \"check_effective_target_vect_natural_alignment:\\\n-\t     returning $et_vect_natural_alignment_saved($et_index)\" 2\n-    return $et_vect_natural_alignment_saved($et_index)\n+\t     returning $et_vect_natural_alignment\" 2\n+    return $et_vect_natural_alignment\n }\n \n # Return 1 if vector alignment (for types of size 32 bit or less) is reachable, 0 otherwise.\n-#\n-# This won't change for different subtargets so cache the result.\n \n proc check_effective_target_vector_alignment_reachable { } {\n-    global et_vector_alignment_reachable_saved\n-    global et_index\n-\n-    if [info exists et_vector_alignment_reachable_saved($et_index)] {\n-\tverbose \"check_effective_target_vector_alignment_reachable:\\\n-\t\t using cached result\" 2\n-    } else {\n-        if { [check_effective_target_vect_aligned_arrays]\n-             || [check_effective_target_natural_alignment_32] } {\n-\t    set et_vector_alignment_reachable_saved($et_index) 1\n-        } else {\n-\t    set et_vector_alignment_reachable_saved($et_index) 0\n-        }\n+    set et_vector_alignment_reachable 0\n+    if { [check_effective_target_vect_aligned_arrays]\n+\t || [check_effective_target_natural_alignment_32] } {\n+\tset et_vector_alignment_reachable 1\n     }\n     verbose \"check_effective_target_vector_alignment_reachable:\\\n-\t     returning $et_vector_alignment_reachable_saved($et_index)\" 2\n-    return $et_vector_alignment_reachable_saved($et_index)\n+\t     returning $et_vector_alignment_reachable\" 2\n+    return $et_vector_alignment_reachable\n }\n \n # Return 1 if vector alignment for 64 bit is reachable, 0 otherwise.\n-#\n-# This won't change for different subtargets so cache the result.\n \n proc check_effective_target_vector_alignment_reachable_for_64bit { } {\n-    global et_vector_alignment_reachable_for_64bit_saved\n-    global et_index\n-\n-    if [info exists et_vector_alignment_reachable_for_64bit_saved($et_index)] {\n-\tverbose \"check_effective_target_vector_alignment_reachable_for_64bit:\\\n-\t\t using cached result\" 2\n-    } else {\n-        if { [check_effective_target_vect_aligned_arrays] \n-             || [check_effective_target_natural_alignment_64] } {\n-\t    set et_vector_alignment_reachable_for_64bit_saved($et_index) 1\n-        } else {\n-\t    set et_vector_alignment_reachable_for_64bit_saved($et_index) 0\n-        }\n+    set et_vector_alignment_reachable_for_64bit 0\n+    if { [check_effective_target_vect_aligned_arrays] \n+\t || [check_effective_target_natural_alignment_64] } {\n+\tset et_vector_alignment_reachable_for_64bit 1\n     }\n     verbose \"check_effective_target_vector_alignment_reachable_for_64bit:\\\n-\t returning $et_vector_alignment_reachable_for_64bit_saved($et_index)\" 2\n-    return $et_vector_alignment_reachable_for_64bit_saved($et_index)\n+\t     returning $et_vector_alignment_reachable_for_64bit\" 2\n+    return $et_vector_alignment_reachable_for_64bit\n }\n \n # Return 1 if the target only requires element alignment for vector accesses"}]}