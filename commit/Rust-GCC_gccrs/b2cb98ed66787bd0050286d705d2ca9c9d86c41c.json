{"sha": "b2cb98ed66787bd0050286d705d2ca9c9d86c41c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJjYjk4ZWQ2Njc4N2JkMDA1MDI4NmQ3MDVkMmNhOWM5ZDg2YzQxYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-10-03T16:48:24Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-10-03T16:48:24Z"}, "message": "decl.c (start_decl): Complain about static/thread_local vars in constexpr function.\n\n\t* decl.c (start_decl): Complain about static/thread_local vars\n\tin constexpr function.\n\t(check_for_uninitialized_const_var): Also uninitialized vars.\n\t* parser.c (cp_parser_jump_statement): And gotos.\n\t(cp_parser_asm_operand_list): And asm.\n\t(cp_parser_try_block): And try.\n\t* semantics.c (ensure_literal_type_for_constexpr_object): And\n\tnon-literal.\n\nFrom-SVN: r215863", "tree": {"sha": "15dd87ec43d36e873c009b43af78a0aa2e569fb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15dd87ec43d36e873c009b43af78a0aa2e569fb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2cb98ed66787bd0050286d705d2ca9c9d86c41c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2cb98ed66787bd0050286d705d2ca9c9d86c41c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2cb98ed66787bd0050286d705d2ca9c9d86c41c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2cb98ed66787bd0050286d705d2ca9c9d86c41c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e01a49c11b529db0a092c9af935141730a9269ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e01a49c11b529db0a092c9af935141730a9269ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e01a49c11b529db0a092c9af935141730a9269ed"}], "stats": {"total": 72, "additions": 66, "deletions": 6}, "files": [{"sha": "7a703aae203738db3ef4cafcfcdb95fd5678191b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2cb98ed66787bd0050286d705d2ca9c9d86c41c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2cb98ed66787bd0050286d705d2ca9c9d86c41c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b2cb98ed66787bd0050286d705d2ca9c9d86c41c", "patch": "@@ -1,5 +1,14 @@\n 2014-10-03  Jason Merrill  <jason@redhat.com>\n \n+\t* decl.c (start_decl): Complain about static/thread_local vars\n+\tin constexpr function.\n+\t(check_for_uninitialized_const_var): Also uninitialized vars.\n+\t* parser.c (cp_parser_jump_statement): And gotos.\n+\t(cp_parser_asm_operand_list): And asm.\n+\t(cp_parser_try_block): And try.\n+\t* semantics.c (ensure_literal_type_for_constexpr_object): And\n+\tnon-literal.\n+\n \t* semantics.c (constexpr_fn_retval): Ignore declarations in C++14.\n \t(var_in_constexpr_fn): New.\n \t(cxx_eval_constant_expression): Look into DECL_INITIAL."}, {"sha": "9c8ecc0c4d06a6167022924b1d40e4bb43151a92", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2cb98ed66787bd0050286d705d2ca9c9d86c41c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2cb98ed66787bd0050286d705d2ca9c9d86c41c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b2cb98ed66787bd0050286d705d2ca9c9d86c41c", "patch": "@@ -4767,6 +4767,16 @@ start_decl (const cp_declarator *declarator,\n       DECL_THIS_STATIC (decl) = 1;\n     }\n \n+  if (current_function_decl && VAR_P (decl)\n+      && DECL_DECLARED_CONSTEXPR_P (current_function_decl))\n+    {\n+      if (DECL_THREAD_LOCAL_P (decl))\n+\terror (\"%qD declared %<thread_local%> in %<constexpr%> function\",\n+\t       decl);\n+      else if (TREE_STATIC (decl))\n+\terror (\"%qD declared %<static%> in %<constexpr%> function\", decl);\n+    }\n+\n   if (!processing_template_decl && VAR_P (decl))\n     start_decl_1 (decl, initialized);\n \n@@ -5135,15 +5145,20 @@ check_for_uninitialized_const_var (tree decl)\n      7.1.6 */\n   if (VAR_P (decl)\n       && TREE_CODE (type) != REFERENCE_TYPE\n-      && CP_TYPE_CONST_P (type)\n+      && (CP_TYPE_CONST_P (type) || var_in_constexpr_fn (decl))\n       && !DECL_INITIAL (decl))\n     {\n       tree field = default_init_uninitialized_part (type);\n       if (!field)\n \treturn;\n \n-      permerror (DECL_SOURCE_LOCATION (decl),\n-\t\t \"uninitialized const %qD\", decl);\n+      if (CP_TYPE_CONST_P (type))\n+\tpermerror (DECL_SOURCE_LOCATION (decl),\n+\t\t   \"uninitialized const %qD\", decl);\n+      else\n+\terror_at (DECL_SOURCE_LOCATION (decl),\n+\t\t  \"uninitialized variable %qD in %<constexpr%> function\",\n+\t\t  decl);\n \n       if (CLASS_TYPE_P (type))\n \t{"}, {"sha": "18cae5bafd958c00099c1530108d9be229777c13", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2cb98ed66787bd0050286d705d2ca9c9d86c41c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2cb98ed66787bd0050286d705d2ca9c9d86c41c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b2cb98ed66787bd0050286d705d2ca9c9d86c41c", "patch": "@@ -10915,6 +10915,10 @@ cp_parser_jump_statement (cp_parser* parser)\n       break;\n \n     case RID_GOTO:\n+      if (parser->in_function_body\n+\t  && DECL_DECLARED_CONSTEXPR_P (current_function_decl))\n+\terror (\"%<goto%> in %<constexpr%> function\");\n+\n       /* Create the goto-statement.  */\n       if (cp_lexer_next_token_is (parser->lexer, CPP_MULT))\n \t{\n@@ -16484,6 +16488,11 @@ cp_parser_asm_definition (cp_parser* parser)\n \n   /* Look for the `asm' keyword.  */\n   cp_parser_require_keyword (parser, RID_ASM, RT_ASM);\n+\n+  if (parser->in_function_body\n+      && DECL_DECLARED_CONSTEXPR_P (current_function_decl))\n+    error (\"%<asm%> in %<constexpr%> function\");\n+\n   /* See if the next token is `volatile'.  */\n   if (cp_parser_allow_gnu_extensions_p (parser)\n       && cp_lexer_next_token_is_keyword (parser->lexer, RID_VOLATILE))\n@@ -21441,6 +21450,10 @@ cp_parser_try_block (cp_parser* parser)\n   tree try_block;\n \n   cp_parser_require_keyword (parser, RID_TRY, RT_TRY);\n+  if (parser->in_function_body\n+      && DECL_DECLARED_CONSTEXPR_P (current_function_decl))\n+    error (\"%<try%> in %<constexpr%> function\");\n+\n   try_block = begin_try_block ();\n   cp_parser_compound_statement (parser, NULL, true, false);\n   finish_try_block (try_block);"}, {"sha": "5d1aafc1f2c253170cb1cc28cdf358f58f9c89df", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2cb98ed66787bd0050286d705d2ca9c9d86c41c/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2cb98ed66787bd0050286d705d2ca9c9d86c41c/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=b2cb98ed66787bd0050286d705d2ca9c9d86c41c", "patch": "@@ -7537,7 +7537,9 @@ tree\n ensure_literal_type_for_constexpr_object (tree decl)\n {\n   tree type = TREE_TYPE (decl);\n-  if (VAR_P (decl) && DECL_DECLARED_CONSTEXPR_P (decl)\n+  if (VAR_P (decl)\n+      && (DECL_DECLARED_CONSTEXPR_P (decl)\n+\t  || var_in_constexpr_fn (decl))\n       && !processing_template_decl)\n     {\n       tree stype = strip_array_types (type);\n@@ -7546,8 +7548,12 @@ ensure_literal_type_for_constexpr_object (tree decl)\n \t   when we try to initialize the variable.  */;\n       else if (!literal_type_p (type))\n \t{\n-\t  error (\"the type %qT of constexpr variable %qD is not literal\",\n-\t\t type, decl);\n+\t  if (DECL_DECLARED_CONSTEXPR_P (decl))\n+\t    error (\"the type %qT of constexpr variable %qD is not literal\",\n+\t\t   type, decl);\n+\t  else\n+\t    error (\"variable %qD of non-literal type %qT in %<constexpr%> \"\n+\t\t   \"function\", decl, type);\n \t  explain_non_literal_class (type);\n \t  return NULL;\n \t}"}, {"sha": "ae3dcc69cf0690a07a7ddc0284330d302efb79bb", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-neg1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2cb98ed66787bd0050286d705d2ca9c9d86c41c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-neg1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2cb98ed66787bd0050286d705d2ca9c9d86c41c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-neg1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-neg1.C?ref=b2cb98ed66787bd0050286d705d2ca9c9d86c41c", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile { target c++14 } }\n+\n+struct A { A(); };\n+\n+constexpr int f(int i) {\n+  static int j = i;\t\t// { dg-error \"static\" }\n+  thread_local int l = i;\t// { dg-error \"thread_local\" }\n+  goto foo;\t\t\t// { dg-error \"goto\" }\n+ foo:\n+  asm(\"foo\");\t\t\t// { dg-error \"asm\" }\n+  int k;\t\t\t// { dg-error \"uninitialized\" }\n+  A a;\t\t\t\t// { dg-error \"non-literal\" }\n+  return i;\n+}\n+\n+// FIXME remove\n+// { dg-prune-output \"return\" }"}]}