{"sha": "b4042a039f664fe6e2cedc49cb74a65c159756fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQwNDJhMDM5ZjY2NGZlNmUyY2VkYzQ5Y2I3NGE2NWMxNTk3NTZmZQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "rakdver@atrey.karlin.mff.cuni.cz", "date": "2004-07-29T17:49:31Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2004-07-29T17:49:31Z"}, "message": "tree-ssa-loop-im.c (force_move_till_expr, [...]): Take orig_loop argument and pass it to set_level.\n\n\t* tree-ssa-loop-im.c (force_move_till_expr, force_move_till):\n\tTake orig_loop argument and pass it to set_level.\n\t(schedule_sm): Pass the correct orig_loop to force_move_till.\n\nFrom-SVN: r85308", "tree": {"sha": "32f2056def3ebae854613358efddda354de54560", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32f2056def3ebae854613358efddda354de54560"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4042a039f664fe6e2cedc49cb74a65c159756fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4042a039f664fe6e2cedc49cb74a65c159756fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4042a039f664fe6e2cedc49cb74a65c159756fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4042a039f664fe6e2cedc49cb74a65c159756fe/comments", "author": null, "committer": null, "parents": [{"sha": "e7bd94ccb8ab37c75b42a735cbd99a05f5f3e890", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7bd94ccb8ab37c75b42a735cbd99a05f5f3e890", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7bd94ccb8ab37c75b42a735cbd99a05f5f3e890"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "dbda154ab8d9f779158da42c41dc2309936f9bf9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4042a039f664fe6e2cedc49cb74a65c159756fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4042a039f664fe6e2cedc49cb74a65c159756fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4042a039f664fe6e2cedc49cb74a65c159756fe", "patch": "@@ -1,3 +1,9 @@\n+2004-07-29  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n+\n+\t* tree-ssa-loop-im.c (force_move_till_expr, force_move_till):\n+\tTake orig_loop argument and pass it to set_level.\n+\t(schedule_sm): Pass the correct orig_loop to force_move_till.\n+\n 2004-07-29  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* cfgloop.c (update_latch_info): Update dominator of the new block."}, {"sha": "589f42de65cfe0c199f252594849ac699ec8709e", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4042a039f664fe6e2cedc49cb74a65c159756fe/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4042a039f664fe6e2cedc49cb74a65c159756fe/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=b4042a039f664fe6e2cedc49cb74a65c159756fe", "patch": "@@ -710,10 +710,10 @@ may_move_till (tree ref, tree *index, void *data)\n }\n \n /* Forces statements definining (invariant) SSA names in expression EXPR to be\n-   moved out of the LOOP.  */\n+   moved out of the LOOP.  ORIG_LOOP is the loop in that EXPR is used.  */\n \n static void\n-force_move_till_expr (tree expr, struct loop *loop)\n+force_move_till_expr (tree expr, struct loop *orig_loop, struct loop *loop)\n {\n   char class = TREE_CODE_CLASS (TREE_CODE (expr));\n   unsigned i, nops;\n@@ -724,7 +724,7 @@ force_move_till_expr (tree expr, struct loop *loop)\n       if (IS_EMPTY_STMT (stmt))\n \treturn;\n \n-      set_level (stmt, bb_for_stmt (stmt)->loop_father, loop);\n+      set_level (stmt, orig_loop, loop);\n       return;\n     }\n \n@@ -736,24 +736,32 @@ force_move_till_expr (tree expr, struct loop *loop)\n \n   nops = first_rtl_op (TREE_CODE (expr));\n   for (i = 0; i < nops; i++)\n-    force_move_till_expr (TREE_OPERAND (expr, i), loop);\n+    force_move_till_expr (TREE_OPERAND (expr, i), orig_loop, loop);\n }\n \n /* Forces statement defining invariants in REF (and *INDEX) to be moved out of\n-   the loop passed in DATA.  Callback for for_each_index.  */\n+   the LOOP.  The reference REF is used in the loop ORIG_LOOP.  Callback for\n+   for_each_index.  */\n+\n+struct fmt_data\n+{\n+  struct loop *loop;\n+  struct loop *orig_loop;\n+};\n \n static bool\n force_move_till (tree ref, tree *index, void *data)\n {\n   tree stmt;\n+  struct fmt_data *fmt_data = data;\n \n   if (TREE_CODE (ref) == ARRAY_REF)\n     {\n       tree step = array_ref_element_size (ref);\n       tree lbound = array_ref_low_bound (ref);\n \n-      force_move_till_expr (step, data);\n-      force_move_till_expr (lbound, data);\n+      force_move_till_expr (step, fmt_data->orig_loop, fmt_data->loop);\n+      force_move_till_expr (lbound, fmt_data->orig_loop, fmt_data->loop);\n     }\n \n   if (TREE_CODE (*index) != SSA_NAME)\n@@ -763,7 +771,7 @@ force_move_till (tree ref, tree *index, void *data)\n   if (IS_EMPTY_STMT (stmt))\n     return true;\n \n-  set_level (stmt, bb_for_stmt (stmt)->loop_father, data);\n+  set_level (stmt, fmt_data->orig_loop, fmt_data->loop);\n \n   return true;\n }\n@@ -977,10 +985,13 @@ schedule_sm (struct loop *loop, edge *exits, unsigned n_exits, tree ref,\n   tree tmp_var;\n   unsigned i;\n   tree load, store;\n+  struct fmt_data fmt_data;\n \n   tmp_var = make_rename_temp (TREE_TYPE (ref), \"lsm_tmp\");\n \n-  for_each_index (&ref, force_move_till, loop);\n+  fmt_data.loop = loop;\n+  fmt_data.orig_loop = loop;\n+  for_each_index (&ref, force_move_till, &fmt_data);\n \n   rewrite_mem_refs (tmp_var, mem_refs);\n   for (aref = mem_refs; aref; aref = aref->next)"}]}