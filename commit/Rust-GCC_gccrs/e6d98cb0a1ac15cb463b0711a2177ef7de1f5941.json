{"sha": "e6d98cb0a1ac15cb463b0711a2177ef7de1f5941", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZkOThjYjBhMWFjMTVjYjQ2M2IwNzExYTIxNzdlZjdkZTFmNTk0MQ==", "commit": {"author": {"name": "Bernardo Innocenti", "email": "bernie@develer.com", "date": "2003-11-14T19:59:18Z"}, "committer": {"name": "Bernardo Innocenti", "email": "bernie@gcc.gnu.org", "date": "2003-11-14T19:59:18Z"}, "message": "m68k.c: Use C statements instead of #ifdef's when testing for MOTOROLA versus MIT syntax.\n\n\t* config/m68k/m68k.c: Use C statements instead of #ifdef's when testing\n\tfor MOTOROLA versus MIT syntax.  Improves readability and provides\n\tbetter compile-time error checking for both code paths.\n\nFrom-SVN: r73615", "tree": {"sha": "36f02320ed98dddc47489c75ccc45c0eaadf2a22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36f02320ed98dddc47489c75ccc45c0eaadf2a22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6d98cb0a1ac15cb463b0711a2177ef7de1f5941", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d98cb0a1ac15cb463b0711a2177ef7de1f5941", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6d98cb0a1ac15cb463b0711a2177ef7de1f5941", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d98cb0a1ac15cb463b0711a2177ef7de1f5941/comments", "author": {"login": "codewiz", "id": 1184492, "node_id": "MDQ6VXNlcjExODQ0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1184492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codewiz", "html_url": "https://github.com/codewiz", "followers_url": "https://api.github.com/users/codewiz/followers", "following_url": "https://api.github.com/users/codewiz/following{/other_user}", "gists_url": "https://api.github.com/users/codewiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/codewiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codewiz/subscriptions", "organizations_url": "https://api.github.com/users/codewiz/orgs", "repos_url": "https://api.github.com/users/codewiz/repos", "events_url": "https://api.github.com/users/codewiz/events{/privacy}", "received_events_url": "https://api.github.com/users/codewiz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dd168984f6785dd93e861ecd3303c72ce6d49525", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd168984f6785dd93e861ecd3303c72ce6d49525", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd168984f6785dd93e861ecd3303c72ce6d49525"}], "stats": {"total": 996, "additions": 396, "deletions": 600}, "files": [{"sha": "4f10914fbca91a89b21225899276aeb8ac2ad5b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6d98cb0a1ac15cb463b0711a2177ef7de1f5941/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6d98cb0a1ac15cb463b0711a2177ef7de1f5941/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6d98cb0a1ac15cb463b0711a2177ef7de1f5941", "patch": "@@ -1,3 +1,9 @@\n+2003-11-14  Bernardo Innocenti  <bernie@develer.com>\n+\n+\t* config/m68k/m68k.c: Use C statements instead of #ifdef's when testing\n+\tfor MOTOROLA versus MIT syntax.  Improves readability and provides\n+\tbetter compile-time error checking for both code paths.\n+\n 2003-11-14  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* config/frv/frv-protos.h: Update for C90."}, {"sha": "2b95cd3f6db83079e0f48c6f517499045a75c06c", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 390, "deletions": 600, "changes": 990, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6d98cb0a1ac15cb463b0711a2177ef7de1f5941/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6d98cb0a1ac15cb463b0711a2177ef7de1f5941/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=e6d98cb0a1ac15cb463b0711a2177ef7de1f5941", "patch": "@@ -43,6 +43,31 @@ Boston, MA 02111-1307, USA.  */\n #include \"debug.h\"\n #include \"flags.h\"\n \n+/* We need to have MOTOROLA always defined (either 0 or 1) because we use\n+   if-statements and ?: on it.  This way we have compile-time error checking\n+   for both the MOTOROLA and MIT code paths.  We do rely on the host compiler\n+   to optimize away all constant tests.  */\n+#ifdef MOTOROLA\n+# undef MOTOROLA\n+# define MOTOROLA 1  /* Use the Motorola assembly syntax.  */\n+#else\n+# define MOTOROLA 0  /* Use the MIT assembly syntax.  */\n+#endif\n+\n+/* The ASM_DOT macro allows easy string pasting to handle the differences\n+   between MOTOROLA and MIT syntaxes in asm_fprintf(), which doesn't\n+   support the %. option.  */\n+#if MOTOROLA\n+# define ASM_DOT \".\"\n+# define ASM_DOTW \".w\"\n+# define ASM_DOTL \".l\"\n+#else\n+# define ASM_DOT \"\"\n+# define ASM_DOTW \"\"\n+# define ASM_DOTL \"\"\n+#endif\n+\n+\n /* Structure describing stack frame layout. */\n struct m68k_frame\n {\n@@ -462,15 +487,8 @@ m68k_output_function_prologue (FILE *stream, HOST_WIDE_INT size ATTRIBUTE_UNUSED\n      before actually allocating the space.  */\n   if (current_function_limit_stack\n       && GET_CODE (stack_limit_rtx) == SYMBOL_REF)\n-    {\n-#if defined (MOTOROLA)\n-      asm_fprintf (stream, \"\\tcmp.l %I%s+%wd,%Rsp\\n\\ttrapcs\\n\",\n-\t\t   XSTR (stack_limit_rtx, 0), current_frame.size + 4);\n-#else\n-      asm_fprintf (stream, \"\\tcmpl %I%s+%wd,%Rsp\\n\\ttrapcs\\n\",\n-\t\t   XSTR (stack_limit_rtx, 0), current_frame.size + 4);\n-#endif\n-    }\n+    asm_fprintf (stream, \"\\tcmp\" ASM_DOT \"l %I%s+%wd,%Rsp\\n\\ttrapcs\\n\",\n+\t\t XSTR (stack_limit_rtx, 0), current_frame.size + 4);\n \n   /* On ColdFire add register save into initial stack frame setup, if possible.  */\n   fsize_with_regs = current_frame.size;\n@@ -480,51 +498,25 @@ m68k_output_function_prologue (FILE *stream, HOST_WIDE_INT size ATTRIBUTE_UNUSED\n   if (frame_pointer_needed)\n     {\n       if (current_frame.size == 0 && TARGET_68040)\n-\t{\n \t/* on the 68040, pea + move is faster than link.w 0 */\n-#ifdef MOTOROLA\n-\t  fprintf (stream, \"\\tpea (%s)\\n\\tmove.l %s,%s\\n\",\n-\t\t   reg_names[FRAME_POINTER_REGNUM],\n-\t\t   reg_names[STACK_POINTER_REGNUM],\n-\t\t   reg_names[FRAME_POINTER_REGNUM]);\n-#else\n-\t  fprintf (stream, \"\\tpea %s@\\n\\tmovel %s,%s\\n\",\n-\t\t   reg_names[FRAME_POINTER_REGNUM],\n-\t\t   reg_names[STACK_POINTER_REGNUM],\n-\t\t   reg_names[FRAME_POINTER_REGNUM]);\n-#endif\n-\t}\n+\tfprintf (stream, MOTOROLA ?\n+\t\t\t   \"\\tpea (%s)\\n\\tmove.l %s,%s\\n\" :\n+\t\t\t   \"\\tpea %s@\\n\\tmovel %s,%s\\n\",\n+\t\t reg_names[FRAME_POINTER_REGNUM],\n+\t\t reg_names[STACK_POINTER_REGNUM],\n+\t\t reg_names[FRAME_POINTER_REGNUM]);\n       else if (fsize_with_regs < 0x8000)\n-\t{\n-#ifdef MOTOROLA\n-\t      asm_fprintf (stream, \"\\tlink.w %s,%I%wd\\n\",\n-\t\treg_names[FRAME_POINTER_REGNUM], -fsize_with_regs);\n-#else\n-\t      asm_fprintf (stream, \"\\tlink %s,%I%wd\\n\",\n-\t\treg_names[FRAME_POINTER_REGNUM], -fsize_with_regs);\n-#endif\n-\t}\n+\tasm_fprintf (stream, \"\\tlink\" ASM_DOTW \" %s,%I%wd\\n\",\n+\t\t     reg_names[FRAME_POINTER_REGNUM], -fsize_with_regs);\n       else if (TARGET_68020)\n-\t{\n-#ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tlink.l %s,%I%wd\\n\",\n-\t\t       reg_names[FRAME_POINTER_REGNUM], -fsize_with_regs);\n-#else\n-\t  asm_fprintf (stream, \"\\tlink %s,%I%wd\\n\",\n-\t\t       reg_names[FRAME_POINTER_REGNUM], -fsize_with_regs);\n-#endif\n-\t}\n+\tasm_fprintf (stream, \"\\tlink\" ASM_DOTL \" %s,%I%wd\\n\",\n+\t\t     reg_names[FRAME_POINTER_REGNUM], -fsize_with_regs);\n       else\n-\t{\n-          /* Adding negative number is faster on the 68040.  */\n-#ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tlink.w %s,%I0\\n\\tadd.l %I%wd,%Rsp\\n\",\n-\t\t       reg_names[FRAME_POINTER_REGNUM], -fsize_with_regs);\n-#else\n-\t  asm_fprintf (stream, \"\\tlink %s,%I0\\n\\taddl %I%wd,%Rsp\\n\",\n-\t\t       reg_names[FRAME_POINTER_REGNUM], -fsize_with_regs);\n-#endif\n-\t}\n+\t/* Adding negative number is faster on the 68040.  */\n+\tasm_fprintf (stream, \"\\tlink\" ASM_DOTW \" %s,%I0\\n\"\n+\t\t\t     \"\\tadd\" ASM_DOT \"l %I%wd,%Rsp\\n\",\n+\t\t     reg_names[FRAME_POINTER_REGNUM], -fsize_with_regs);\n+\n       if (dwarf2out_do_frame ())\n \t{\n \t  char *l;\n@@ -542,61 +534,32 @@ m68k_output_function_prologue (FILE *stream, HOST_WIDE_INT size ATTRIBUTE_UNUSED\n \t  if (fsize_with_regs <= 8)\n \t    {\n \t      if (!TARGET_COLDFIRE)\n-\t\t{\n-#ifdef MOTOROLA\n-\t\t  asm_fprintf (stream, \"\\tsubq.w %I%wd,%Rsp\\n\", fsize_with_regs);\n-#else\n-\t\t  asm_fprintf (stream, \"\\tsubqw %I%wd,%Rsp\\n\", fsize_with_regs);\n-#endif\n-\t\t}\n+\t\tasm_fprintf (stream, \"\\tsubq\" ASM_DOT \"w %I%wd,%Rsp\\n\",\n+\t\t             fsize_with_regs);\n \t      else\n-\t\t{\n-#ifdef MOTOROLA\n-\t\t  asm_fprintf (stream, \"\\tsubq.l %I%wd,%Rsp\\n\", fsize_with_regs);\n-#else\n-\t\t  asm_fprintf (stream, \"\\tsubql %I%wd,%Rsp\\n\", fsize_with_regs);\n-#endif\n-\t\t}\n+\t\tasm_fprintf (stream, \"\\tsubq\" ASM_DOT \"l %I%wd,%Rsp\\n\",\n+\t\t             fsize_with_regs);\n \t    }\n \t  else if (fsize_with_regs <= 16 && TARGET_CPU32)\n-\t    {\n-\t      /* On the CPU32 it is faster to use two subqw instructions to\n-\t\t subtract a small integer (8 < N <= 16) to a register.  */\n-#ifdef MOTOROLA\n-\t      asm_fprintf (stream,\n-\t\t\t   \"\\tsubq.w %I8,%Rsp\\n\\tsubq.w %I%wd,%Rsp\\n\",\n-\t\t\t   fsize_with_regs - 8);\n-#else\n-\t      asm_fprintf (stream, \"\\tsubqw %I8,%Rsp\\n\\tsubqw %I%wd,%Rsp\\n\",\n-\t\t\t   fsize_with_regs - 8);\n-#endif\n-\t    }\n+\t    /* On the CPU32 it is faster to use two subqw instructions to\n+\t       subtract a small integer (8 < N <= 16) to a register.  */\n+\t    asm_fprintf (stream,\n+\t\t\t \"\\tsubq\" ASM_DOT \"w %I8,%Rsp\\n\"\n+\t\t\t \"\\tsubq\" ASM_DOT \"w %I%wd,%Rsp\\n\",\n+\t\t\t fsize_with_regs - 8);\n \t  else if (TARGET_68040)\n-\t    {\n-\t      /* Adding negative number is faster on the 68040.  */\n-#ifdef MOTOROLA\n-\t      asm_fprintf (stream, \"\\tadd.w %I%wd,%Rsp\\n\", -fsize_with_regs);\n-#else\n-\t      asm_fprintf (stream, \"\\taddw %I%wd,%Rsp\\n\", -fsize_with_regs);\n-#endif\n-\t    }\n+\t    /* Adding negative number is faster on the 68040.  */\n+\t    asm_fprintf (stream, \"\\tadd\" ASM_DOT \"w %I%wd,%Rsp\\n\",\n+\t\t\t -fsize_with_regs);\n \t  else\n-\t    {\n-#ifdef MOTOROLA\n-\t      asm_fprintf (stream, \"\\tlea (%wd,%Rsp),%Rsp\\n\", -fsize_with_regs);\n-#else\n-\t      asm_fprintf (stream, \"\\tlea %Rsp@(%wd),%Rsp\\n\", -fsize_with_regs);\n-#endif\n-\t    }\n+\t    asm_fprintf (stream, MOTOROLA ?\n+\t\t\t\t   \"\\tlea (%wd,%Rsp),%Rsp\\n\" :\n+\t\t\t\t   \"\\tlea %Rsp@(%wd),%Rsp\\n\",\n+\t\t\t -fsize_with_regs);\n \t}\n       else /* fsize_with_regs >= 0x8000 */\n-\t{\n-#ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tadd.l %I%wd,%Rsp\\n\", -fsize_with_regs);\n-#else\n-\t  asm_fprintf (stream, \"\\taddl %I%wd,%Rsp\\n\", -fsize_with_regs);\n-#endif\n-\t}\n+\tasm_fprintf (stream, \"\\tadd\" ASM_DOT \"l %I%wd,%Rsp\\n\", -fsize_with_regs);\n+\n       if (dwarf2out_do_frame ())\n \t{\n \t  cfa_offset += current_frame.size + 4;\n@@ -606,11 +569,11 @@ m68k_output_function_prologue (FILE *stream, HOST_WIDE_INT size ATTRIBUTE_UNUSED\n \n   if (current_frame.fpu_mask)\n     {\n-#ifdef MOTOROLA\n-      asm_fprintf (stream, \"\\tfmovm %I0x%x,-(%Rsp)\\n\", current_frame.fpu_mask);\n-#else\n-      asm_fprintf (stream, \"\\tfmovem %I0x%x,%Rsp@-\\n\", current_frame.fpu_mask);\n-#endif\n+      asm_fprintf (stream, MOTOROLA ?\n+\t\t\t     \"\\tfmovm %I0x%x,-(%Rsp)\\n\" :\n+\t\t\t     \"\\tfmovem %I0x%x,%Rsp@-\\n\",\n+\t\t   current_frame.fpu_mask);\n+\n       if (dwarf2out_do_frame ())\n \t{\n \t  char *l = (char *) dwarf2out_cfi_label ();\n@@ -630,15 +593,8 @@ m68k_output_function_prologue (FILE *stream, HOST_WIDE_INT size ATTRIBUTE_UNUSED\n   if (current_function_limit_stack)\n     {\n       if (REG_P (stack_limit_rtx))\n-\t{\n-#if defined (MOTOROLA)\n-\t  asm_fprintf (stream, \"\\tcmp.l %s,%Rsp\\n\\ttrapcs\\n\",\n-\t\t       reg_names[REGNO (stack_limit_rtx)]);\n-#else\n-\t  asm_fprintf (stream, \"\\tcmpl %s,%Rsp\\n\\ttrapcs\\n\",\n-\t\t       reg_names[REGNO (stack_limit_rtx)]);\n-#endif\n-\t}\n+\tasm_fprintf (stream, \"\\tcmp\" ASM_DOT \"l %s,%Rsp\\n\\ttrapcs\\n\",\n+\t\t     reg_names[REGNO (stack_limit_rtx)]);\n       else if (GET_CODE (stack_limit_rtx) != SYMBOL_REF)\n \twarning (\"stack limit expression is not supported\");\n     }\n@@ -655,12 +611,9 @@ m68k_output_function_prologue (FILE *stream, HOST_WIDE_INT size ATTRIBUTE_UNUSED\n       for (i = 0; i < 16; i++)\n         if (current_frame.reg_rev_mask & (1 << i))\n \t  {\n-\t    asm_fprintf (stream,\n-#ifdef MOTOROLA\n-\t\t\t \"\\t%Omove.l %s,-(%Rsp)\\n\",\n-#else\n-\t\t\t \"\\tmovel %s,%Rsp@-\\n\",\n-#endif\n+\t    asm_fprintf (stream, MOTOROLA ?\n+\t\t\t\t   \"\\t%Omove.l %s,-(%Rsp)\\n\" :\n+\t\t\t\t   \"\\tmovel %s,%Rsp@-\\n\",\n \t\t\t reg_names[15 - i]);\n \t    if (dwarf2out_do_frame ())\n \t      {\n@@ -676,27 +629,21 @@ m68k_output_function_prologue (FILE *stream, HOST_WIDE_INT size ATTRIBUTE_UNUSED\n   else if (current_frame.reg_rev_mask)\n     {\n       if (TARGET_COLDFIRE)\n-\t{\n-\t  /* The ColdFire does not support the predecrement form of the \n-\t     MOVEM instruction, so we must adjust the stack pointer and\n-\t     then use the plain address register indirect mode.\n-\t     The required register save space was combined earlier with\n-\t     the fsize_with_regs amount.  */\n-\n-#ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tmovm.l %I0x%x,(%Rsp)\\n\", current_frame.reg_mask);\n-#else\n-\t  asm_fprintf (stream, \"\\tmoveml %I0x%x,%Rsp@\\n\", current_frame.reg_mask);\n-#endif\n-\t}\n+\t/* The ColdFire does not support the predecrement form of the \n+\t   MOVEM instruction, so we must adjust the stack pointer and\n+\t   then use the plain address register indirect mode.\n+\t   The required register save space was combined earlier with\n+\t   the fsize_with_regs amount.  */\n+\n+\tasm_fprintf (stream, MOTOROLA ?\n+\t\t\t       \"\\tmovm.l %I0x%x,(%Rsp)\\n\" :\n+\t\t\t       \"\\tmoveml %I0x%x,%Rsp@\\n\",\n+\t\t     current_frame.reg_mask);\n       else\n-\t{\n-#ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tmovm.l %I0x%x,-(%Rsp)\\n\", current_frame.reg_rev_mask);\n-#else\n-\t  asm_fprintf (stream, \"\\tmoveml %I0x%x,%Rsp@-\\n\", current_frame.reg_rev_mask);\n-#endif\n-\t}\n+\tasm_fprintf (stream, MOTOROLA ?\n+\t\t\t       \"\\tmovm.l %I0x%x,-(%Rsp)\\n\" :\n+\t\t\t       \"\\tmoveml %I0x%x,%Rsp@-\\n\",\n+\t\t     current_frame.reg_rev_mask);\n       if (dwarf2out_do_frame ())\n \t{\n \t  char *l = (char *) dwarf2out_cfi_label ();\n@@ -723,16 +670,17 @@ m68k_output_function_prologue (FILE *stream, HOST_WIDE_INT size ATTRIBUTE_UNUSED\n \t}\n       else\n \t{\n-#ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\t%Olea (%Rpc, %U_GLOBAL_OFFSET_TABLE_@GOTPC), %s\\n\",\n-\t\t       reg_names[PIC_OFFSET_TABLE_REGNUM]);\n-#else\n-\t  asm_fprintf (stream, \"\\tmovel %I%U_GLOBAL_OFFSET_TABLE_, %s\\n\",\n-\t\t       reg_names[PIC_OFFSET_TABLE_REGNUM]);\n-\t  asm_fprintf (stream, \"\\tlea %Rpc@(0,%s:l),%s\\n\",\n-\t\t       reg_names[PIC_OFFSET_TABLE_REGNUM],\n-\t\t       reg_names[PIC_OFFSET_TABLE_REGNUM]);\n-#endif\n+\t  if (MOTOROLA)\n+\t    asm_fprintf (stream, \"\\t%Olea (%Rpc, %U_GLOBAL_OFFSET_TABLE_@GOTPC), %s\\n\",\n+\t    \t\t reg_names[PIC_OFFSET_TABLE_REGNUM]);\n+\t  else\n+\t    {\n+\t      asm_fprintf (stream, \"\\tmovel %I%U_GLOBAL_OFFSET_TABLE_, %s\\n\",\n+\t\t\t   reg_names[PIC_OFFSET_TABLE_REGNUM]);\n+\t      asm_fprintf (stream, \"\\tlea %Rpc@(0,%s:l),%s\\n\",\n+\t\t\t   reg_names[PIC_OFFSET_TABLE_REGNUM],\n+\t\t\t   reg_names[PIC_OFFSET_TABLE_REGNUM]);\n+\t    }\n \t}\n     }\n }\n@@ -811,24 +759,9 @@ m68k_output_function_epilogue (FILE *stream, HOST_WIDE_INT size ATTRIBUTE_UNUSED\n       /* Because the ColdFire doesn't support moveml with\n          complex address modes we make an extra correction here.  */\n       if (TARGET_COLDFIRE)\n-        {\n-#ifdef MOTOROLA\n-          asm_fprintf (stream, \"\\t%Omove.l %I%d,%Ra1\\n\",\n-\t\t       -fsize - current_frame.offset);\n-#else\n-          asm_fprintf (stream, \"\\tmovel %I%d,%Ra1\\n\",\n-\t\t       -fsize - current_frame.offset);\n-#endif\n-        }\n-      else\n-        {\n-#ifdef MOTOROLA\n-          asm_fprintf (stream, \"\\t%Omove.l %I%wd,%Ra1\\n\", -fsize);\n-#else\n-          asm_fprintf (stream, \"\\tmovel %I%wd,%Ra1\\n\", -fsize);\n-#endif\n-        }\n+        fsize += current_frame.offset;\n \n+      asm_fprintf (stream, \"\\t%Omove\" ASM_DOT \"l %I%wd,%Ra1\\n\", -fsize);\n       fsize = 0, big = true;\n     }\n   if (current_frame.reg_no <= 2)\n@@ -846,41 +779,34 @@ m68k_output_function_epilogue (FILE *stream, HOST_WIDE_INT size ATTRIBUTE_UNUSED\n           {\n             if (big)\n \t      {\n-#ifdef MOTOROLA\n-\t\tasm_fprintf (stream, \"\\t%Omove.l -%wd(%s,%Ra1.l),%s\\n\",\n-\t\t\t     offset,\n-\t\t\t     reg_names[FRAME_POINTER_REGNUM],\n-\t\t\t     reg_names[i]);\n-#else\n-\t\tasm_fprintf (stream, \"\\tmovel %s@(-%wd,%Ra1:l),%s\\n\",\n-\t\t\t     reg_names[FRAME_POINTER_REGNUM],\n-\t\t\t     offset,\n-\t\t\t     reg_names[i]);\n-#endif\n+\t\tif (MOTOROLA)\n+\t\t  asm_fprintf (stream, \"\\t%Omove.l -%wd(%s,%Ra1.l),%s\\n\",\n+\t\t\t       offset,\n+\t\t\t       reg_names[FRAME_POINTER_REGNUM],\n+\t\t\t       reg_names[i]);\n+\t\telse\n+\t\t  asm_fprintf (stream, \"\\tmovel %s@(-%wd,%Ra1:l),%s\\n\",\n+\t\t\t       reg_names[FRAME_POINTER_REGNUM],\n+\t\t\t       offset,\n+\t\t\t       reg_names[i]);\n \t      }\n             else if (restore_from_sp)\n-\t      {\n-#ifdef MOTOROLA\n-\t\tasm_fprintf (stream, \"\\t%Omove.l (%Rsp)+,%s\\n\",\n-\t\t\t     reg_names[i]);\n-#else\n-\t\tasm_fprintf (stream, \"\\tmovel %Rsp@+,%s\\n\",\n-\t\t\t     reg_names[i]);\n-#endif\n-\t      }\n+\t      asm_fprintf (stream, MOTOROLA ?\n+\t\t\t\t     \"\\t%Omove.l (%Rsp)+,%s\\n\" :\n+\t\t\t\t     \"\\tmovel %Rsp@+,%s\\n\",\n+\t\t\t   reg_names[i]);\n             else\n \t      {\n-#ifdef MOTOROLA\n-\t\tasm_fprintf (stream, \"\\t%Omove.l -%wd(%s),%s\\n\",\n-\t\t\t     offset,\n-\t\t\t     reg_names[FRAME_POINTER_REGNUM],\n-\t\t\t     reg_names[i]);\n-#else\n-\t\tasm_fprintf (stream, \"\\tmovel %s@(-%wd),%s\\n\",\n-\t\t\t     reg_names[FRAME_POINTER_REGNUM],\n-\t\t\t     offset,\n-\t\t\t     reg_names[i]);\n-#endif\n+\t        if (MOTOROLA)\n+\t\t  asm_fprintf (stream, \"\\t%Omove.l -%wd(%s),%s\\n\",\n+\t\t\t       offset,\n+\t\t\t       reg_names[FRAME_POINTER_REGNUM],\n+\t\t\t       reg_names[i]);\n+\t\telse\n+\t\t  asm_fprintf (stream, \"\\tmovel %s@(-%wd),%s\\n\",\n+\t\t\t       reg_names[FRAME_POINTER_REGNUM],\n+\t\t\t       offset,\n+\t\t\t       reg_names[i]);\n \t      }\n             offset -= 4;\n           }\n@@ -892,118 +818,105 @@ m68k_output_function_epilogue (FILE *stream, HOST_WIDE_INT size ATTRIBUTE_UNUSED\n         {\n           if (big)\n             {\n-#ifdef MOTOROLA\n-              asm_fprintf (stream, \"\\tadd.l %s,%Ra1\\n\", reg_names[FRAME_POINTER_REGNUM]);\n-              asm_fprintf (stream, \"\\tmovm.l (%Ra1),%I0x%x\\n\", current_frame.reg_mask);\n-#else\n-              asm_fprintf (stream, \"\\taddl %s,%Ra1\\n\", reg_names[FRAME_POINTER_REGNUM]);\n-              asm_fprintf (stream, \"\\tmoveml %Ra1@,%I0x%x\\n\", current_frame.reg_mask);\n-#endif\n+              asm_fprintf (stream, \"\\tadd\" ASM_DOT \"l %s,%Ra1\\n\",\n+\t      \t\t   reg_names[FRAME_POINTER_REGNUM]);\n+              asm_fprintf (stream, MOTOROLA ?\n+\t\t\t\t     \"\\tmovm.l (%Ra1),%I0x%x\\n\" :\n+\t\t\t\t     \"\\tmoveml %Ra1@,%I0x%x\\n\",\n+\t\t\t   current_frame.reg_mask);\n \t     }\n \t   else if (restore_from_sp)\n-\t     {\n-#ifdef MOTOROLA\n-\t       asm_fprintf (stream, \"\\tmovm.l (%Rsp),%I0x%x\\n\", current_frame.reg_mask);\n-#else\n-\t       asm_fprintf (stream, \"\\tmoveml %Rsp@,%I0x%x\\n\", current_frame.reg_mask);\n-#endif\n-            }\n+\t     asm_fprintf (stream, MOTOROLA ?\n+\t\t\t\t    \"\\tmovm.l (%Rsp),%I0x%x\\n\" :\n+\t\t\t\t    \"\\tmoveml %Rsp@,%I0x%x\\n\",\n+\t\t\t  current_frame.reg_mask);\n           else\n             {\n-#ifdef MOTOROLA\n-              asm_fprintf (stream, \"\\tmovm.l -%wd(%s),%I0x%x\\n\",\n-                           current_frame.offset + fsize,\n-                           reg_names[FRAME_POINTER_REGNUM],\n-                           current_frame.reg_mask);\n-#else\n-              asm_fprintf (stream, \"\\tmoveml %s@(-%wd),%I0x%x\\n\",\n-                           reg_names[FRAME_POINTER_REGNUM],\n-                           current_frame.offset + fsize,\n-\t\t\t   current_frame.reg_mask);\n-#endif\n+\t      if (MOTOROLA)\n+\t\tasm_fprintf (stream, \"\\tmovm.l -%wd(%s),%I0x%x\\n\",\n+\t\t\t     current_frame.offset + fsize,\n+\t\t\t     reg_names[FRAME_POINTER_REGNUM],\n+\t\t\t     current_frame.reg_mask);\n+\t      else\n+\t\tasm_fprintf (stream, \"\\tmoveml %s@(-%wd),%I0x%x\\n\",\n+\t\t\t     reg_names[FRAME_POINTER_REGNUM],\n+\t\t\t     current_frame.offset + fsize,\n+\t\t\t     current_frame.reg_mask);\n \t    }\n         }\n       else /* !TARGET_COLDFIRE */\n \t{\n \t  if (big)\n \t    {\n-#ifdef MOTOROLA\n-\t      asm_fprintf (stream, \"\\tmovm.l -%wd(%s,%Ra1.l),%I0x%x\\n\",\n-\t\t\t   current_frame.offset + fsize,\n-\t\t\t   reg_names[FRAME_POINTER_REGNUM],\n-\t\t\t   current_frame.reg_mask);\n-#else\n-\t      asm_fprintf (stream, \"\\tmoveml %s@(-%wd,%Ra1:l),%I0x%x\\n\",\n-\t\t\t   reg_names[FRAME_POINTER_REGNUM],\n-\t\t\t   current_frame.offset + fsize,\n-\t\t\t   current_frame.reg_mask);\n-#endif\n+\t      if (MOTOROLA)\n+\t\tasm_fprintf (stream, \"\\tmovm.l -%wd(%s,%Ra1.l),%I0x%x\\n\",\n+\t\t\t     current_frame.offset + fsize,\n+\t\t\t     reg_names[FRAME_POINTER_REGNUM],\n+\t\t\t     current_frame.reg_mask);\n+\t      else\n+\t\tasm_fprintf (stream, \"\\tmoveml %s@(-%wd,%Ra1:l),%I0x%x\\n\",\n+\t\t\t     reg_names[FRAME_POINTER_REGNUM],\n+\t\t\t     current_frame.offset + fsize,\n+\t\t\t     current_frame.reg_mask);\n \t    }\n \t  else if (restore_from_sp)\n \t    {\n-#ifdef MOTOROLA\n-\t      asm_fprintf (stream, \"\\tmovm.l (%Rsp)+,%I0x%x\\n\",\n-\t\t\t   current_frame.reg_mask);\n-#else\n-\t      asm_fprintf (stream, \"\\tmoveml %Rsp@+,%I0x%x\\n\",\n+\t      asm_fprintf (stream, MOTOROLA ?\n+\t\t\t\t     \"\\tmovm.l (%Rsp)+,%I0x%x\\n\" :\n+\t\t\t\t     \"\\tmoveml %Rsp@+,%I0x%x\\n\",\n \t\t\t   current_frame.reg_mask);\n-#endif\n \t    }\n \t  else\n \t    {\n-#ifdef MOTOROLA\n-\t      asm_fprintf (stream, \"\\tmovm.l -%wd(%s),%I0x%x\\n\",\n-\t\t\t   current_frame.offset + fsize,\n-\t\t\t   reg_names[FRAME_POINTER_REGNUM],\n-\t\t\t   current_frame.reg_mask);\n-#else\n-\t      asm_fprintf (stream, \"\\tmoveml %s@(-%wd),%I0x%x\\n\",\n-\t\t\t   reg_names[FRAME_POINTER_REGNUM],\n-\t\t\t   current_frame.offset + fsize,\n-\t\t\t   current_frame.reg_mask);\n-#endif\n+\t      if (MOTOROLA)\n+\t\tasm_fprintf (stream, \"\\tmovm.l -%wd(%s),%I0x%x\\n\",\n+\t\t\t     current_frame.offset + fsize,\n+\t\t\t     reg_names[FRAME_POINTER_REGNUM],\n+\t\t\t     current_frame.reg_mask);\n+\t      else\n+\t\tasm_fprintf (stream, \"\\tmoveml %s@(-%wd),%I0x%x\\n\",\n+\t\t\t     reg_names[FRAME_POINTER_REGNUM],\n+\t\t\t     current_frame.offset + fsize,\n+\t\t\t     current_frame.reg_mask);\n \t    }\n \t}\n     }\n   if (current_frame.fpu_rev_mask)\n     {\n       if (big)\n \t{\n-#ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tfmovm -%wd(%s,%Ra1.l),%I0x%x\\n\",\n-\t\t       current_frame.foffset + fsize,\n-\t\t       reg_names[FRAME_POINTER_REGNUM],\n-\t\t       current_frame.fpu_rev_mask);\n-#else\n-\t  asm_fprintf (stream, \"\\tfmovem %s@(-%wd,%Ra1:l),%I0x%x\\n\",\n-\t\t       reg_names[FRAME_POINTER_REGNUM],\n-\t\t       current_frame.foffset + fsize,\n-\t\t       current_frame.fpu_rev_mask);\n-#endif\n+\t  if (MOTOROLA)\n+\t    asm_fprintf (stream, \"\\tfmovm -%wd(%s,%Ra1.l),%I0x%x\\n\",\n+\t\t         current_frame.foffset + fsize,\n+\t\t         reg_names[FRAME_POINTER_REGNUM],\n+\t\t         current_frame.fpu_rev_mask);\n+\t  else\n+\t    asm_fprintf (stream, \"\\tfmovem %s@(-%wd,%Ra1:l),%I0x%x\\n\",\n+\t\t\t reg_names[FRAME_POINTER_REGNUM],\n+\t\t\t current_frame.foffset + fsize,\n+\t\t\t current_frame.fpu_rev_mask);\n \t}\n       else if (restore_from_sp)\n \t{\n-#ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tfmovm (%Rsp)+,%I0x%x\\n\",\n-\t\t       current_frame.fpu_rev_mask);\n-#else\n-\t  asm_fprintf (stream, \"\\tfmovem %Rsp@+,%I0x%x\\n\",\n-\t\t       current_frame.fpu_rev_mask);\n-#endif\n+\t  if (MOTOROLA)\n+\t    asm_fprintf (stream, \"\\tfmovm (%Rsp)+,%I0x%x\\n\",\n+\t\t\t current_frame.fpu_rev_mask);\n+\t  else\n+\t    asm_fprintf (stream, \"\\tfmovem %Rsp@+,%I0x%x\\n\",\n+\t\t\t current_frame.fpu_rev_mask);\n \t}\n       else\n \t{\n-#ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tfmovm -%wd(%s),%I0x%x\\n\",\n-\t\t       current_frame.foffset + fsize,\n-\t\t       reg_names[FRAME_POINTER_REGNUM],\n-\t\t       current_frame.fpu_rev_mask);\n-#else\n-\t  asm_fprintf (stream, \"\\tfmovem %s@(-%wd),%I0x%x\\n\",\n-\t\t       reg_names[FRAME_POINTER_REGNUM],\n-\t\t       current_frame.foffset + fsize,\n-\t\t       current_frame.fpu_rev_mask);\n-#endif\n+\t  if (MOTOROLA)\n+\t    asm_fprintf (stream, \"\\tfmovm -%wd(%s),%I0x%x\\n\",\n+\t\t\t current_frame.foffset + fsize,\n+\t\t\t reg_names[FRAME_POINTER_REGNUM],\n+\t\t\t current_frame.fpu_rev_mask);\n+\t  else\n+\t    asm_fprintf (stream, \"\\tfmovem %s@(-%wd),%I0x%x\\n\",\n+\t\t\t reg_names[FRAME_POINTER_REGNUM],\n+\t\t\t current_frame.foffset + fsize,\n+\t\t\t current_frame.fpu_rev_mask);\n \t}\n     }\n   if (frame_pointer_needed)\n@@ -1014,70 +927,36 @@ m68k_output_function_epilogue (FILE *stream, HOST_WIDE_INT size ATTRIBUTE_UNUSED\n       if (fsize_with_regs <= 8)\n \t{\n \t  if (!TARGET_COLDFIRE)\n-\t    {\n-#ifdef MOTOROLA\n-\t      asm_fprintf (stream, \"\\taddq.w %I%wd,%Rsp\\n\", fsize_with_regs);\n-#else\n-\t      asm_fprintf (stream, \"\\taddqw %I%wd,%Rsp\\n\", fsize_with_regs);\n-#endif\n-\t    }\n-\t  else /* TARGET_COLDFIRE */\n-\t    {\n-#ifdef MOTOROLA\n-\t      asm_fprintf (stream, \"\\taddq.l %I%wd,%Rsp\\n\", fsize_with_regs);\n-#else\n-\t      asm_fprintf (stream, \"\\taddql %I%wd,%Rsp\\n\", fsize_with_regs);\n-#endif\n-\t    }\n+\t    asm_fprintf (stream, \"\\taddq\" ASM_DOT \"w %I%wd,%Rsp\\n\",\n+\t\t\t fsize_with_regs);\n+\t  else\n+\t    asm_fprintf (stream, \"\\taddq\" ASM_DOT \"l %I%wd,%Rsp\\n\",\n+\t\t\t fsize_with_regs);\n \t}\n       else if (fsize_with_regs <= 16 && TARGET_CPU32)\n \t{\n \t  /* On the CPU32 it is faster to use two addqw instructions to\n \t     add a small integer (8 < N <= 16) to a register.  */\n-#ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\taddq.w %I8,%Rsp\\n\\taddq.w %I%wd,%Rsp\\n\",\n+\t  asm_fprintf (stream, \"\\taddq\" ASM_DOT \"w %I8,%Rsp\\n\"\n+\t  \t\t       \"\\taddq\" ASM_DOT \"w %I%wd,%Rsp\\n\",\n \t\t       fsize_with_regs - 8);\n-#else\n-\t  asm_fprintf (stream, \"\\taddqw %I8,%Rsp\\n\\taddqw %I%wd,%Rsp\\n\",\n-\t\t       fsize_with_regs - 8);\n-#endif\n \t}\n       else if (fsize_with_regs < 0x8000)\n \t{\n \t  if (TARGET_68040)\n-\t    { \n-#ifdef MOTOROLA\n-\t      asm_fprintf (stream, \"\\tadd.w %I%wd,%Rsp\\n\", fsize_with_regs);\n-#else\n-\t      asm_fprintf (stream, \"\\taddw %I%wd,%Rsp\\n\", fsize_with_regs);\n-#endif\n-\t    }\n+\t    asm_fprintf (stream, \"\\tadd\" ASM_DOT \"w %I%wd,%Rsp\\n\",\n+\t\t\t fsize_with_regs);\n \t  else\n-\t    {\n-#ifdef MOTOROLA\n-\t      asm_fprintf (stream, \"\\tlea (%wd,%Rsp),%Rsp\\n\", fsize_with_regs);\n-#else\n-\t      asm_fprintf (stream, \"\\tlea %Rsp@(%wd),%Rsp\\n\", fsize_with_regs);\n-#endif\n-\t    }\n+\t    asm_fprintf (stream, MOTOROLA ?\n+\t\t\t\t   \"\\tlea (%wd,%Rsp),%Rsp\\n\" :\n+\t\t\t\t   \"\\tlea %Rsp@(%wd),%Rsp\\n\",\n+\t\t\t fsize_with_regs);\n \t}\n       else\n-\t{\n-#ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tadd.l %I%wd,%Rsp\\n\", fsize_with_regs);\n-#else\n-\t  asm_fprintf (stream, \"\\taddl %I%wd,%Rsp\\n\", fsize_with_regs);\n-#endif\n-\t}\n+\tasm_fprintf (stream, \"\\tadd\" ASM_DOT \"l %I%wd,%Rsp\\n\", fsize_with_regs);\n     }\n   if (current_function_calls_eh_return)\n-    {\n-#ifdef MOTOROLA\n-      asm_fprintf (stream, \"\\tadd.l %Ra0,%Rsp\\n\");\n-#else\n-      asm_fprintf (stream, \"\\taddl %Ra0,%Rsp\\n\");\n-#endif\n-    }\n+    asm_fprintf (stream, \"\\tadd\" ASM_DOT\"l %Ra0,%Rsp\\n\");\n   if (m68k_interrupt_function_p (current_function_decl))\n     fprintf (stream, \"\\trte\\n\");\n   else if (current_function_pops_args)\n@@ -1173,84 +1052,74 @@ output_dbcc_and_branch (rtx *operands)\n   switch (GET_CODE (operands[3]))\n     {\n       case EQ:\n-#ifdef MOTOROLA\n-        output_asm_insn (\"dbeq %0,%l1\\n\\tjbeq %l2\", operands);\n-#else\n-        output_asm_insn (\"dbeq %0,%l1\\n\\tjeq %l2\", operands);\n-#endif\n-        break;\n+\toutput_asm_insn (MOTOROLA ?\n+\t\t\t   \"dbeq %0,%l1\\n\\tjbeq %l2\" :\n+\t\t\t   \"dbeq %0,%l1\\n\\tjeq %l2\",\n+\t\t\t operands);\n+\tbreak;\n \n       case NE:\n-#ifdef MOTOROLA\n-        output_asm_insn (\"dbne %0,%l1\\n\\tjbne %l2\", operands);\n-#else\n-        output_asm_insn (\"dbne %0,%l1\\n\\tjne %l2\", operands);\n-#endif\n-        break;\n+\toutput_asm_insn (MOTOROLA ?\n+\t\t\t   \"dbne %0,%l1\\n\\tjbne %l2\" :\n+\t\t\t   \"dbne %0,%l1\\n\\tjne %l2\",\n+\t\t\t operands);\n+\tbreak;\n \n       case GT:\n-#ifdef MOTOROLA\n-        output_asm_insn (\"dbgt %0,%l1\\n\\tjbgt %l2\", operands);\n-#else\n-        output_asm_insn (\"dbgt %0,%l1\\n\\tjgt %l2\", operands);\n-#endif\n-        break;\n+\toutput_asm_insn (MOTOROLA ?\n+\t\t\t   \"dbgt %0,%l1\\n\\tjbgt %l2\" :\n+\t\t\t   \"dbgt %0,%l1\\n\\tjgt %l2\",\n+\t\t\t operands);\n+\tbreak;\n \n       case GTU:\n-#ifdef MOTOROLA\n-        output_asm_insn (\"dbhi %0,%l1\\n\\tjbhi %l2\", operands);\n-#else\n-        output_asm_insn (\"dbhi %0,%l1\\n\\tjhi %l2\", operands);\n-#endif\n-        break;\n+\toutput_asm_insn (MOTOROLA ?\n+\t\t\t   \"dbhi %0,%l1\\n\\tjbhi %l2\" :\n+\t\t\t   \"dbhi %0,%l1\\n\\tjhi %l2\",\n+\t\t\t operands);\n+\tbreak;\n \n       case LT:\n-#ifdef MOTOROLA\n-        output_asm_insn (\"dblt %0,%l1\\n\\tjblt %l2\", operands);\n-#else\n-        output_asm_insn (\"dblt %0,%l1\\n\\tjlt %l2\", operands);\n-#endif\n-        break;\n+\toutput_asm_insn (MOTOROLA ?\n+\t\t\t   \"dblt %0,%l1\\n\\tjblt %l2\" :\n+\t\t\t   \"dblt %0,%l1\\n\\tjlt %l2\",\n+\t\t\t operands);\n+\tbreak;\n \n       case LTU:\n-#ifdef MOTOROLA\n-        output_asm_insn (\"dbcs %0,%l1\\n\\tjbcs %l2\", operands);\n-#else\n-        output_asm_insn (\"dbcs %0,%l1\\n\\tjcs %l2\", operands);\n-#endif\n-        break;\n+\toutput_asm_insn (MOTOROLA ?\n+\t\t\t   \"dbcs %0,%l1\\n\\tjbcs %l2\" :\n+\t\t\t   \"dbcs %0,%l1\\n\\tjcs %l2\",\n+\t\t\t operands);\n+\tbreak;\n \n       case GE:\n-#ifdef MOTOROLA\n-        output_asm_insn (\"dbge %0,%l1\\n\\tjbge %l2\", operands);\n-#else\n-        output_asm_insn (\"dbge %0,%l1\\n\\tjge %l2\", operands);\n-#endif\n-        break;\n+\toutput_asm_insn (MOTOROLA ?\n+\t\t\t   \"dbge %0,%l1\\n\\tjbge %l2\" :\n+\t\t\t   \"dbge %0,%l1\\n\\tjge %l2\",\n+\t\t\t operands);\n+\tbreak;\n \n       case GEU:\n-#ifdef MOTOROLA\n-        output_asm_insn (\"dbcc %0,%l1\\n\\tjbcc %l2\", operands);\n-#else\n-        output_asm_insn (\"dbcc %0,%l1\\n\\tjcc %l2\", operands);\n-#endif\n-        break;\n+\toutput_asm_insn (MOTOROLA ?\n+\t\t\t   \"dbcc %0,%l1\\n\\tjbcc %l2\" :\n+\t\t\t   \"dbcc %0,%l1\\n\\tjcc %l2\",\n+\t\t\t operands);\n+\tbreak;\n \n       case LE:\n-#ifdef MOTOROLA\n-        output_asm_insn (\"dble %0,%l1\\n\\tjble %l2\", operands);\n-#else\n-        output_asm_insn (\"dble %0,%l1\\n\\tjle %l2\", operands);\n-#endif\n-        break;\n+\toutput_asm_insn (MOTOROLA ?\n+\t\t\t   \"dble %0,%l1\\n\\tjble %l2\" :\n+\t\t\t   \"dble %0,%l1\\n\\tjle %l2\",\n+\t\t\t operands);\n+\tbreak;\n \n       case LEU:\n-#ifdef MOTOROLA\n-        output_asm_insn (\"dbls %0,%l1\\n\\tjbls %l2\", operands);\n-#else\n-        output_asm_insn (\"dbls %0,%l1\\n\\tjls %l2\", operands);\n-#endif\n-        break;\n+\toutput_asm_insn (MOTOROLA ?\n+\t\t\t   \"dbls %0,%l1\\n\\tjbls %l2\" : \n+\t\t\t   \"dbls %0,%l1\\n\\tjls %l2\",\n+\t\t\t operands);\n+\tbreak;\n \n       default:\n \tabort ();\n@@ -1261,11 +1130,10 @@ output_dbcc_and_branch (rtx *operands)\n   switch (GET_MODE (operands[0]))\n     {\n       case SImode:\n-#ifdef MOTOROLA\n-        output_asm_insn (\"clr%.w %0\\n\\tsubq%.l %#1,%0\\n\\tjbpl %l1\", operands);\n-#else\n-        output_asm_insn (\"clr%.w %0\\n\\tsubq%.l %#1,%0\\n\\tjpl %l1\", operands);\n-#endif\n+        output_asm_insn (MOTOROLA ?\n+\t\t\t   \"clr%.w %0\\n\\tsubq%.l %#1,%0\\n\\tjbpl %l1\" :\n+\t\t\t   \"clr%.w %0\\n\\tsubq%.l %#1,%0\\n\\tjpl %l1\",\n+\t\t\t operands);\n         break;\n \n       case HImode:\n@@ -1312,18 +1180,17 @@ output_scc_di(rtx op, rtx operand1, rtx operand2, rtx dest)\n   loperands[4] = gen_label_rtx();\n   if (operand2 != const0_rtx)\n     {\n-#ifdef MOTOROLA\n+      if (MOTOROLA)\n #ifdef SGS_CMP_ORDER\n-      output_asm_insn (\"cmp%.l %0,%2\\n\\tjbne %l4\\n\\tcmp%.l %1,%3\", loperands);\n+        output_asm_insn (\"cmp%.l %0,%2\\n\\tjbne %l4\\n\\tcmp%.l %1,%3\", loperands);\n #else\n-      output_asm_insn (\"cmp%.l %2,%0\\n\\tjbne %l4\\n\\tcmp%.l %3,%1\", loperands);\n+        output_asm_insn (\"cmp%.l %2,%0\\n\\tjbne %l4\\n\\tcmp%.l %3,%1\", loperands);\n #endif\n-#else\n+      else\n #ifdef SGS_CMP_ORDER\n-      output_asm_insn (\"cmp%.l %0,%2\\n\\tjne %l4\\n\\tcmp%.l %1,%3\", loperands);\n+        output_asm_insn (\"cmp%.l %0,%2\\n\\tjne %l4\\n\\tcmp%.l %1,%3\", loperands);\n #else\n-      output_asm_insn (\"cmp%.l %2,%0\\n\\tjne %l4\\n\\tcmp%.l %3,%1\", loperands);\n-#endif\n+        output_asm_insn (\"cmp%.l %2,%0\\n\\tjne %l4\\n\\tcmp%.l %3,%1\", loperands);\n #endif\n     }\n   else\n@@ -1339,11 +1206,7 @@ output_scc_di(rtx op, rtx operand1, rtx operand2, rtx dest)\n #endif\n \t}\n \n-#ifdef MOTOROLA\n-      output_asm_insn (\"jbne %l4\", loperands);\n-#else\n-      output_asm_insn (\"jne %l4\", loperands);\n-#endif\n+      output_asm_insn (MOTOROLA ? \"jbne %l4\" : \"jne %l4\", loperands);\n \n       if (TARGET_68020 || TARGET_COLDFIRE || ! ADDRESS_REG_P (loperands[1]))\n \toutput_asm_insn (\"tst%.l %1\", loperands);\n@@ -1375,11 +1238,10 @@ output_scc_di(rtx op, rtx operand1, rtx operand2, rtx dest)\n \n       case GT:\n         loperands[6] = gen_label_rtx();\n-#ifdef MOTOROLA\n-        output_asm_insn (\"shi %5\\n\\tjbra %l6\", loperands);\n-#else\n-        output_asm_insn (\"shi %5\\n\\tjra %l6\", loperands);\n-#endif\n+        output_asm_insn (MOTOROLA ?\n+\t\t\t   \"shi %5\\n\\tjbra %l6\" :\n+\t\t\t   \"shi %5\\n\\tjra %l6\",\n+\t\t\t loperands);\n         (*targetm.asm_out.internal_label) (asm_out_file, \"L\",\n \t\t\t\t    CODE_LABEL_NUMBER (loperands[4]));\n         output_asm_insn (\"sgt %5\", loperands);\n@@ -1395,11 +1257,10 @@ output_scc_di(rtx op, rtx operand1, rtx operand2, rtx dest)\n \n       case LT:\n         loperands[6] = gen_label_rtx();\n-#ifdef MOTOROLA\n-        output_asm_insn (\"scs %5\\n\\tjbra %l6\", loperands);\n-#else\n-        output_asm_insn (\"scs %5\\n\\tjra %l6\", loperands);\n-#endif\n+        output_asm_insn (MOTOROLA ?\n+\t\t\t   \"scs %5\\n\\tjbra %l6\" :\n+\t\t\t   \"scs %5\\n\\tjra %l6\",\n+\t\t\t loperands);\n         (*targetm.asm_out.internal_label) (asm_out_file, \"L\",\n \t\t\t\t    CODE_LABEL_NUMBER (loperands[4]));\n         output_asm_insn (\"slt %5\", loperands);\n@@ -1415,11 +1276,10 @@ output_scc_di(rtx op, rtx operand1, rtx operand2, rtx dest)\n \n       case GE:\n         loperands[6] = gen_label_rtx();\n-#ifdef MOTOROLA\n-        output_asm_insn (\"scc %5\\n\\tjbra %l6\", loperands);\n-#else\n-        output_asm_insn (\"scc %5\\n\\tjra %l6\", loperands);\n-#endif\n+        output_asm_insn (MOTOROLA ?\n+\t\t\t   \"scc %5\\n\\tjbra %l6\" :\n+\t\t\t   \"scc %5\\n\\tjra %l6\",\n+\t\t\t   loperands);\n         (*targetm.asm_out.internal_label) (asm_out_file, \"L\",\n \t\t\t\t    CODE_LABEL_NUMBER (loperands[4]));\n         output_asm_insn (\"sge %5\", loperands);\n@@ -1435,11 +1295,10 @@ output_scc_di(rtx op, rtx operand1, rtx operand2, rtx dest)\n \n       case LE:\n         loperands[6] = gen_label_rtx();\n-#ifdef MOTOROLA\n-        output_asm_insn (\"sls %5\\n\\tjbra %l6\", loperands);\n-#else\n-        output_asm_insn (\"sls %5\\n\\tjra %l6\", loperands);\n-#endif\n+        output_asm_insn (MOTOROLA ?\n+\t\t\t   \"sls %5\\n\\tjbra %l6\" :\n+\t\t\t   \"sls %5\\n\\tjra %l6\",\n+\t\t\t loperands);\n         (*targetm.asm_out.internal_label) (asm_out_file, \"L\",\n \t\t\t\t    CODE_LABEL_NUMBER (loperands[4]));\n         output_asm_insn (\"sle %5\", loperands);\n@@ -1937,7 +1796,7 @@ output_move_himode (rtx *operands)\n       && GET_CODE (XEXP (XEXP (operands[1], 0), 0)) != PLUS)\n     {\n       rtx labelref = XEXP (XEXP (operands[1], 0), 1);\n-#if defined (MOTOROLA) && !defined (SGS_SWITCH_TABLES)\n+#if MOTOROLA && !defined (SGS_SWITCH_TABLES)\n #ifdef SGS\n       asm_fprintf (asm_out_file, \"\\tset %LLI%d,.+2\\n\",\n \t\t   CODE_LABEL_NUMBER (XEXP (labelref, 0)));\n@@ -2461,17 +2320,22 @@ output_addsi3 (rtx *operands)\n \treturn \"lea 0(%1,%2.l),%0\";\n       else\n \treturn \"lea %c2(%1),%0\";\n-#elif defined(MOTOROLA)\n-      if (GET_CODE (operands[2]) == REG)\n-\treturn \"lea (%1,%2.l),%0\";\n-      else\n-\treturn \"lea (%c2,%1),%0\";\n-#else /* not MOTOROLA (MIT syntax) */\n-      if (GET_CODE (operands[2]) == REG)\n-\treturn \"lea %1@(0,%2:l),%0\";\n-      else\n-\treturn \"lea %1@(%c2),%0\";\n-#endif /* not MOTOROLA */\n+#else /* !SGS */\n+      if (MOTOROLA)\n+\t{\n+\t  if (GET_CODE (operands[2]) == REG)\n+\t   return \"lea (%1,%2.l),%0\";\n+\t  else\n+\t   return \"lea (%c2,%1),%0\";\n+\t}\n+      else /* !MOTOROLA (MIT syntax) */\n+\t{\n+\t  if (GET_CODE (operands[2]) == REG)\n+\t    return \"lea %1@(0,%2:l),%0\";\n+\t  else\n+\t    return \"lea %1@(%c2),%0\";\n+\t}\n+#endif /* !SGS */\n     }\n   if (GET_CODE (operands[2]) == CONST_INT)\n     {\n@@ -2509,11 +2373,7 @@ output_addsi3 (rtx *operands)\n \t  if (TARGET_68040)\n \t    return \"add%.w %2,%0\";\n \t  else\n-#ifdef MOTOROLA  \n-\t    return \"lea (%c2,%0),%0\";\n-#else\n-\t    return \"lea %0@(%c2),%0\";\n-#endif\n+\t    return MOTOROLA ? \"lea (%c2,%0),%0\" : \"lea %0@(%c2),%0\";\n \t}\n     }\n   return \"add%.l %2,%0\";\n@@ -2818,60 +2678,31 @@ print_operand (FILE *file, rtx op, int letter)\n {\n   if (letter == '.')\n     {\n-#if defined (MOTOROLA)\n-      fprintf (file, \".\");\n-#endif\n+      if (MOTOROLA)\n+\tfprintf (file, \".\");\n     }\n   else if (letter == '#')\n-    {\n-      asm_fprintf (file, \"%I\");\n-    }\n+    asm_fprintf (file, \"%I\");\n   else if (letter == '-')\n-    {\n-#ifdef MOTOROLA\n-      asm_fprintf (file, \"-(%Rsp)\");\n-#else\n-      asm_fprintf (file, \"%Rsp@-\");\n-#endif\n-    }\n+    asm_fprintf (file, MOTOROLA ? \"-(%Rsp)\" : \"%Rsp@-\");\n   else if (letter == '+')\n-    {\n-#ifdef MOTOROLA\n-      asm_fprintf (file, \"(%Rsp)+\");\n-#else\n-      asm_fprintf (file, \"%Rsp@+\");\n-#endif\n-    }\n+    asm_fprintf (file, MOTOROLA ? \"(%Rsp)+\" : \"%Rsp@+\");\n   else if (letter == '@')\n-    {\n-#ifdef MOTOROLA\n-      asm_fprintf (file, \"(%Rsp)\");\n-#else\n-      asm_fprintf (file, \"%Rsp@\");\n-#endif\n-    }\n+    asm_fprintf (file, MOTOROLA ? \"(%Rsp)\" : \"%Rsp@\");\n   else if (letter == '!')\n-    {\n-      asm_fprintf (file, \"%Rfpcr\");\n-    }\n+    asm_fprintf (file, \"%Rfpcr\");\n   else if (letter == '$')\n     {\n       if (TARGET_68040_ONLY)\n-\t{\n-\t  fprintf (file, \"s\");\n-\t}\n+\tfprintf (file, \"s\");\n     }\n   else if (letter == '&')\n     {\n       if (TARGET_68040_ONLY)\n-\t{\n-\t  fprintf (file, \"d\");\n-\t}\n+\tfprintf (file, \"d\");\n     }\n   else if (letter == '/')\n-    {\n-      asm_fprintf (file, \"%R\");\n-    }\n+    asm_fprintf (file, \"%R\");\n   else if (letter == 'o')\n     {\n       /* This is only for direct addresses with TARGET_PCREL */\n@@ -2897,13 +2728,7 @@ print_operand (FILE *file, rtx op, int letter)\n \t  && !(GET_CODE (XEXP (op, 0)) == CONST_INT\n \t       && INTVAL (XEXP (op, 0)) < 0x8000\n \t       && INTVAL (XEXP (op, 0)) >= -0x8000))\n-\t{\n-#ifdef MOTOROLA\n-\t  fprintf (file, \".l\");\n-#else\n-\t  fprintf (file, \":l\");\n-#endif\n-\t}\n+\tfprintf (file, MOTOROLA ? \".l\" : \":l\");\n     }\n   else if (GET_CODE (op) == CONST_DOUBLE && GET_MODE (op) == SFmode)\n     {\n@@ -2968,18 +2793,18 @@ print_operand (FILE *file, rtx op, int letter)\n    -fPIC code the offset is output in long mode (eg movel a5@(_foo:l), a0) */\n \n #ifndef ASM_OUTPUT_CASE_FETCH\n-#ifdef MOTOROLA\n-#ifdef SGS\n-#define ASM_OUTPUT_CASE_FETCH(file, labelno, regname)\\\n+# if MOTOROLA\n+#  ifdef SGS\n+#   define ASM_OUTPUT_CASE_FETCH(file, labelno, regname)\\\n \tasm_fprintf (file, \"%LLD%d(%Rpc,%s.\", labelno, regname)\n-#else\n-#define ASM_OUTPUT_CASE_FETCH(file, labelno, regname)\\\n+#  else /* !SGS */\n+#   define ASM_OUTPUT_CASE_FETCH(file, labelno, regname)\\\n \tasm_fprintf (file, \"%LL%d-%LLI%d.b(%Rpc,%s.\", labelno, labelno, regname)\n-#endif\n-#else\n-#define ASM_OUTPUT_CASE_FETCH(file, labelno, regname)\\\n+#  endif /* !SGS */\n+# else /* !MOTOROLA */\n+#  define ASM_OUTPUT_CASE_FETCH(file, labelno, regname)\\\n \tasm_fprintf (file, \"%Rpc@(%LL%d-%LLI%d-2:b,%s:\", labelno, labelno, regname)\n-#endif\n+# endif /* !MOTOROLA */\n #endif /* ASM_OUTPUT_CASE_FETCH */\n \n void\n@@ -2991,25 +2816,15 @@ print_operand_address (FILE *file, rtx addr)\n   switch (GET_CODE (addr))\n     {\n       case REG:\n-#ifdef MOTOROLA\n-\tfprintf (file, \"(%s)\", reg_names[REGNO (addr)]);\n-#else\n-\tfprintf (file, \"%s@\", reg_names[REGNO (addr)]);\n-#endif\n+\tfprintf (file, MOTOROLA ? \"(%s)\" : \"%s@\", reg_names[REGNO (addr)]);\n \tbreak;\n       case PRE_DEC:\n-#ifdef MOTOROLA\n-\tfprintf (file, \"-(%s)\", reg_names[REGNO (XEXP (addr, 0))]);\n-#else\n-\tfprintf (file, \"%s@-\", reg_names[REGNO (XEXP (addr, 0))]);\n-#endif\n+\tfprintf (file, MOTOROLA ? \"-(%s)\" : \"%s@-\",\n+\t         reg_names[REGNO (XEXP (addr, 0))]);\n \tbreak;\n       case POST_INC:\n-#ifdef MOTOROLA\n-\tfprintf (file, \"(%s)+\", reg_names[REGNO (XEXP (addr, 0))]);\n-#else\n-\tfprintf (file, \"%s@+\", reg_names[REGNO (XEXP (addr, 0))]);\n-#endif\n+\tfprintf (file, MOTOROLA ? \"(%s)+\" : \"%s@+\",\n+\t\t reg_names[REGNO (XEXP (addr, 0))]);\n \tbreak;\n       case PLUS:\n \treg1 = reg2 = ireg = breg = offset = 0;\n@@ -3129,13 +2944,7 @@ print_operand_address (FILE *file, rtx addr)\n \t\tfprintf (file, \"l\");\n \t      }\n \t    if (scale != 1)\n-\t      {\n-#ifdef MOTOROLA\n-\t\tfprintf (file, \"*%d\", scale);\n-#else\n-\t\tfprintf (file, \":%d\", scale);\n-#endif\n-\t      }\n+\t      fprintf (file, MOTOROLA ? \"*%d\" : \":%d\", scale);\n \t    putc (')', file);\n \t    break;\n \t  }\n@@ -3159,66 +2968,55 @@ print_operand_address (FILE *file, rtx addr)\n \t      {\n \t\tabort ();\n \t      }\n-#ifdef MOTOROLA\n-\t    if (addr != 0)\n+\t    if (MOTOROLA)\n \t      {\n-\t\toutput_addr_const (file, addr);\n-\t        if (flag_pic && (breg == pic_offset_table_rtx))\n+\t\tif (addr != 0)\n \t\t  {\n-\t\t    fprintf (file, \"@GOT\");\n-\t\t    if (flag_pic == 1)\n-\t\t      fprintf (file, \".w\");\n+\t\t    output_addr_const (file, addr);\n+\t            if (flag_pic && (breg == pic_offset_table_rtx))\n+\t\t      {\n+\t\t\tfprintf (file, \"@GOT\");\n+\t\t\tif (flag_pic == 1)\n+\t\t\t  fprintf (file, \".w\");\n+\t\t      }\n \t\t  }\n+\t\tfprintf (file, \"(%s\", reg_names[REGNO (breg)]);\n+\t\tif (ireg != 0)\n+\t\t  putc (',', file);\n \t      }\n-\t    fprintf (file, \"(%s\", reg_names[REGNO (breg)]);\n-\t    if (ireg != 0)\n-\t      {\n-\t\tputc (',', file);\n-\t      }\n-#else\n-\t    fprintf (file, \"%s@(\", reg_names[REGNO (breg)]);\n-\t    if (addr != 0)\n-\t      {\n-\t\toutput_addr_const (file, addr);\n-\t        if ((flag_pic == 1) && (breg == pic_offset_table_rtx))\n-\t          fprintf (file, \":w\");\n-\t        if ((flag_pic == 2) && (breg == pic_offset_table_rtx))\n-\t          fprintf (file, \":l\");\n-\t      }\n-\t    if (addr != 0 && ireg != 0)\n+\t    else /* !MOTOROLA */\n \t      {\n-\t\tputc (',', file);\n-\t      }\n-#endif\n+\t\tfprintf (file, \"%s@(\", reg_names[REGNO (breg)]);\n+\t\tif (addr != 0)\n+\t\t  {\n+\t\t    output_addr_const (file, addr);\n+\t\t    if (breg == pic_offset_table_rtx)\n+\t\t      switch (flag_pic)\n+\t\t        {\n+\t\t        case 1:\n+\t\t          fprintf (file, \":w\"); break;\n+\t\t        case 2:\n+\t\t          fprintf (file, \":l\"); break;\n+\t\t        default:\n+\t\t          break;\n+\t\t        }\n+\t\t    if (ireg != 0)\n+\t\t      putc (',', file);\n+\t\t  }\n+\t      } /* !MOTOROLA */\n \t    if (ireg != 0 && GET_CODE (ireg) == MULT)\n \t      {\n \t\tscale = INTVAL (XEXP (ireg, 1));\n \t\tireg = XEXP (ireg, 0);\n \t      }\n \t    if (ireg != 0 && GET_CODE (ireg) == SIGN_EXTEND)\n-\t      {\n-#ifdef MOTOROLA\n-\t\tfprintf (file, \"%s.w\", reg_names[REGNO (XEXP (ireg, 0))]);\n-#else\n-\t\tfprintf (file, \"%s:w\", reg_names[REGNO (XEXP (ireg, 0))]);\n-#endif\n-\t      }\n+\t      fprintf (file, MOTOROLA ? \"%s.w\" : \"%s:w\",\n+\t\t       reg_names[REGNO (XEXP (ireg, 0))]);\n \t    else if (ireg != 0)\n-\t      {\n-#ifdef MOTOROLA\n-\t\tfprintf (file, \"%s.l\", reg_names[REGNO (ireg)]);\n-#else\n-\t\tfprintf (file, \"%s:l\", reg_names[REGNO (ireg)]);\n-#endif\n-\t      }\n+\t      fprintf (file, MOTOROLA ? \"%s.l\" : \"%s:l\",\n+\t\t       reg_names[REGNO (ireg)]);\n \t    if (scale != 1)\n-\t      {\n-#ifdef MOTOROLA\n-\t\tfprintf (file, \"*%d\", scale);\n-#else\n-\t\tfprintf (file, \":%d\", scale);\n-#endif\n-\t      }\n+\t      fprintf (file, MOTOROLA ? \"*%d\" : \":%d\", scale);\n \t    putc (')', file);\n \t    break;\n \t  }\n@@ -3237,16 +3035,15 @@ print_operand_address (FILE *file, rtx addr)\n \t    && INTVAL (addr) < 0x8000\n \t    && INTVAL (addr) >= -0x8000)\n \t  {\n-#ifdef MOTOROLA\n+\t    if (MOTOROLA)\n #ifdef SGS\n-\t    /* Many SGS assemblers croak on size specifiers for constants.  */\n-\t    fprintf (file, \"%d\", (int) INTVAL (addr));\n-#else\n-\t    fprintf (file, \"%d.w\", (int) INTVAL (addr));\n-#endif\n+\t      /* Many SGS assemblers croak on size specifiers for constants.  */\n+\t      fprintf (file, \"%d\", (int) INTVAL (addr));\n #else\n-\t    fprintf (file, \"%d:w\", (int) INTVAL (addr));\n+\t      fprintf (file, \"%d.w\", (int) INTVAL (addr));\n #endif\n+\t    else /* !MOTOROLA */\n+\t      fprintf (file, \"%d:w\", (int) INTVAL (addr));\n \t  }\n \telse if (GET_CODE (addr) == CONST_INT)\n \t  {\n@@ -3332,7 +3129,6 @@ strict_low_part_peephole_ok (enum machine_mode mode, rtx first_insn,\n \t}\n \n       p = prev_nonnote_insn (p);\n-\n     }\n \n   return false;\n@@ -3653,23 +3449,20 @@ m68k_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n   const char *fmt;\n \n   if (delta > 0 && delta <= 8)\n-#ifdef MOTOROLA\n-    asm_fprintf (file, \"\\taddq.l %I%d,4(%Rsp)\\n\", (int) delta);\n-#else\n-    asm_fprintf (file, \"\\taddql %I%d,%Rsp@(4)\\n\", (int) delta);\n-#endif\n+    asm_fprintf (file, MOTOROLA ?\n+\t\t\t \"\\taddq.l %I%d,4(%Rsp)\\n\" :\n+\t\t\t \"\\taddql %I%d,%Rsp@(4)\\n\",\n+\t\t (int) delta);\n   else if (delta < 0 && delta >= -8)\n-#ifdef MOTOROLA\n-    asm_fprintf (file, \"\\tsubq.l %I%d,4(%Rsp)\\n\", (int) -delta);\n-#else\n-    asm_fprintf (file, \"\\tsubql %I%d,%Rsp@(4)\\n\", (int) -delta);\n-#endif\n+    asm_fprintf (file, MOTOROLA ?\n+\t\t\t \"\\tsubq.l %I%d,4(%Rsp)\\n\" :\n+\t\t\t \"\\tsubql %I%d,%Rsp@(4)\\n\",\n+\t\t (int) -delta);\n   else\n-#ifdef MOTOROLA\n-    asm_fprintf (file, \"\\tadd.l %I%wd,4(%Rsp)\\n\", delta);\n-#else\n-    asm_fprintf (file, \"\\taddl %I%wd,%Rsp@(4)\\n\", delta);\n-#endif\n+    asm_fprintf (file, MOTOROLA ?\n+\t\t\t \"\\tadd.l %I%wd,4(%Rsp)\\n\" :\n+\t\t\t \"\\taddl %I%wd,%Rsp@(4)\\n\",\n+\t\t delta);\n \n   xops[0] = DECL_RTL (function);\n \n@@ -3680,22 +3473,19 @@ m68k_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \tfmt = \"bra.l %o0\";\n       else if ((flag_pic == 1) || TARGET_68020)\n \t{\n-#ifdef MOTOROLA\n+\t  if (MOTOROLA)\n #ifdef HPUX_ASM\n-\t  fmt = \"bra.l %0\";\n-#else\n-#ifdef USE_GAS\n-\t  fmt = \"bra.l %0@PLTPC\";\n+\t    fmt = \"bra.l %0\";\n+#elif defined(USE_GAS)\n+\t    fmt = \"bra.l %0@PLTPC\";\n #else\n-\t  fmt = \"bra %0@PLTPC\";\n+\t    fmt = \"bra %0@PLTPC\";\n #endif\n-#endif\n-#else\n+\t  else /* !MOTOROLA */\n #ifdef USE_GAS\n-\t  fmt = \"bra.l %0\";\n+\t    fmt = \"bra.l %0\";\n #else\n-\t  fmt = \"jra %0,a1\";\n-#endif\n+\t    fmt = \"jra %0,a1\";\n #endif\n \t}\n       else if (optimize_size || TARGET_ID_SHARED_LIBRARY)\n@@ -3705,7 +3495,7 @@ m68k_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n     }\n   else\n     {\n-#if defined (MOTOROLA) && !defined (USE_GAS)\n+#if MOTOROLA && !defined (USE_GAS)\n       fmt = \"jmp %0\";\n #else\n       fmt = \"jra %0\";"}]}