{"sha": "49192c41de94b2746cd33366134b6aeaefa6ca2a", "node_id": "C_kwDOANBUbNoAKDQ5MTkyYzQxZGU5NGIyNzQ2Y2QzMzM2NjEzNGI2YWVhZWZhNmNhMmE", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-10-03T21:16:38Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-10-05T14:09:51Z"}, "message": "c++: lvalue_kind tweak\n\nI was wondering how lvalue_kind handles VIEW_CONVERT_EXPR; in cases where\nthe type actually changes, it should have the same prvalue->xvalue effect as\nARRAY_REF, since we need to materialize a temporary to get an object we can\nreinterpret as another type.\n\nCurrently this only fires on builtin-shufflevector-3.c, where we use\nVIEW_CONVERT_EXPR to reinterpret a vector as an array.\n\nREALPART_EXPR and IMAGPART_EXPR should also be treated like COMPONENT_REF.\nPREINCREMENT_EXPR and PREDECREMENT_EXPR should only be applied to glvalues,\nbut if for some reason they were applied to a prvalue this would be correct.\nTRY_CATCH_EXPR around a prvalue is also questionable, but this is the right\nhandling.\n\ngcc/cp/ChangeLog:\n\n\t* tree.cc (lvalue_kind) [VIEW_CONVERT_EXPR]: Change prvalue to\n\txvalue.", "tree": {"sha": "59eea4766af245e0a5857fbdd6e4a2697c799bbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59eea4766af245e0a5857fbdd6e4a2697c799bbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49192c41de94b2746cd33366134b6aeaefa6ca2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49192c41de94b2746cd33366134b6aeaefa6ca2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49192c41de94b2746cd33366134b6aeaefa6ca2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49192c41de94b2746cd33366134b6aeaefa6ca2a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d935cdd1a6772699ec0ab4f93711928ca4d30a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d935cdd1a6772699ec0ab4f93711928ca4d30a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d935cdd1a6772699ec0ab4f93711928ca4d30a1"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "6d968a2af11e15cbed9bf8d41a21904164ee7801", "filename": "gcc/cp/tree.cc", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49192c41de94b2746cd33366134b6aeaefa6ca2a/gcc%2Fcp%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49192c41de94b2746cd33366134b6aeaefa6ca2a/gcc%2Fcp%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.cc?ref=49192c41de94b2746cd33366134b6aeaefa6ca2a", "patch": "@@ -104,7 +104,17 @@ lvalue_kind (const_tree ref)\n     case REALPART_EXPR:\n     case IMAGPART_EXPR:\n     case VIEW_CONVERT_EXPR:\n-      return lvalue_kind (TREE_OPERAND (ref, 0));\n+      op1_lvalue_kind = lvalue_kind (TREE_OPERAND (ref, 0));\n+      /* As for ARRAY_REF and COMPONENT_REF, these codes turn a class prvalue\n+\t into an xvalue: we need to materialize the temporary before we mess\n+\t with it.  Except VIEW_CONVERT_EXPR that doesn't actually change the\n+\t type, as in location wrapper and REF_PARENTHESIZED_P.\t*/\n+      if (op1_lvalue_kind == clk_class\n+\t  && !(TREE_CODE (ref) == VIEW_CONVERT_EXPR\n+\t       && (same_type_ignoring_top_level_qualifiers_p\n+\t\t   (TREE_TYPE (ref), TREE_TYPE (TREE_OPERAND (ref, 0))))))\n+\treturn clk_rvalueref;\n+      return op1_lvalue_kind;\n \n     case ARRAY_REF:\n       {"}]}