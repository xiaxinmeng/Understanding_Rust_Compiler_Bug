{"sha": "0c4c16df3e0184bb42f56b292b969bb52572b861", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM0YzE2ZGYzZTAxODRiYjQyZjU2YjI5MmI5NjliYjUyNTcyYjg2MQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-04-28T23:17:41Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2000-04-28T23:17:41Z"}, "message": "calls.c (calls_function_1): Propertly handle TREE_LIST expressions; use special_function_p to detect alloca.\n\n\t* calls.c (calls_function_1):  Propertly handle TREE_LIST expressions;\n\tuse special_function_p to detect alloca.\n\nFrom-SVN: r33528", "tree": {"sha": "4b85e24b0504e6b7c8f4c363d86c02170f39cdbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b85e24b0504e6b7c8f4c363d86c02170f39cdbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c4c16df3e0184bb42f56b292b969bb52572b861", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c4c16df3e0184bb42f56b292b969bb52572b861", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c4c16df3e0184bb42f56b292b969bb52572b861", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c4c16df3e0184bb42f56b292b969bb52572b861/comments", "author": null, "committer": null, "parents": [{"sha": "e67466053bf8586ccc0d1593e713422ceb540798", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e67466053bf8586ccc0d1593e713422ceb540798", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e67466053bf8586ccc0d1593e713422ceb540798"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "4def625afb0bf42a1c26eecedb69c9445a176917", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c4c16df3e0184bb42f56b292b969bb52572b861/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c4c16df3e0184bb42f56b292b969bb52572b861/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c4c16df3e0184bb42f56b292b969bb52572b861", "patch": "@@ -1,3 +1,8 @@\n+Sat Apr 29 01:15:27 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n+\n+\t* calls.c (calls_function_1):  Propertly handle TREE_LIST expressions;\n+\tuse special_function_p to detect alloca.\n+\n Fri Apr 28 16:30:33 2000  Marc Espie <espie@cvs.openbsd.org>\n \n \t* gcc.texi: Fixes for makeinfo 4.0 --html."}, {"sha": "78e3f102e0569320ec21e94b8bc30c9f0420da9f", "filename": "gcc/calls.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c4c16df3e0184bb42f56b292b969bb52572b861/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c4c16df3e0184bb42f56b292b969bb52572b861/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=0c4c16df3e0184bb42f56b292b969bb52572b861", "patch": "@@ -254,11 +254,6 @@ calls_function_1 (exp, which)\n   if ((int) code >= NUM_TREE_CODES)\n     return 1;\n \n-  /* Only expressions and references can contain calls.  */\n-  if (type != 'e' && type != '<' && type != '1' && type != '2' && type != 'r'\n-      && type != 'b')\n-    return 0;\n-\n   switch (code)\n     {\n     case CALL_EXPR:\n@@ -269,12 +264,8 @@ calls_function_1 (exp, which)\n \t\t   == FUNCTION_DECL))\n \t{\n \t  tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n-\n-\t  if ((DECL_BUILT_IN (fndecl)\n-\t       && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n-\t       && DECL_FUNCTION_CODE (fndecl) == BUILT_IN_ALLOCA)\n-\t      || (DECL_SAVED_INSNS (fndecl)\n-\t\t  && DECL_SAVED_INSNS (fndecl)->calls_alloca))\n+\t  int flags = special_function_p (fndecl, 0);\n+\t  if (flags & ECF_MAY_BE_ALLOCA)\n \t    return 1;\n \t}\n \n@@ -311,6 +302,11 @@ calls_function_1 (exp, which)\n \t    return 1;\n       }\n       return 0;\n+    case TREE_LIST:\n+      for (; exp != 0; exp = TREE_CHAIN (exp))\n+\tif (calls_function_1 (TREE_VALUE (exp), which))\n+\t  return 1;\n+      return 0;\n \n     case METHOD_CALL_EXPR:\n       length = 3;\n@@ -322,11 +318,16 @@ calls_function_1 (exp, which)\n \n     case RTL_EXPR:\n       return 0;\n-      \n+\n     default:\n       break;\n     }\n \n+  /* Only expressions and references can contain calls.  */\n+  if (type != 'e' && type != '<' && type != '1' && type != '2' && type != 'r'\n+      && type != 'b')\n+    return 0;\n+\n   for (i = 0; i < length; i++)\n     if (TREE_OPERAND (exp, i) != 0\n \t&& calls_function_1 (TREE_OPERAND (exp, i), which))"}]}