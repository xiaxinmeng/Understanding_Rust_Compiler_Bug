{"sha": "16f72d88dd84fd56a31eca8767a8f3c8d0fab88b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZmNzJkODhkZDg0ZmQ1NmEzMWVjYTg3NjdhOGYzYzhkMGZhYjg4Yg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-12-19T16:14:01Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-12-19T16:14:01Z"}, "message": "compiler: More cases that need a temporary for interface conversion.\n\nFrom-SVN: r218952", "tree": {"sha": "4702937af89d3c818a0457703cf47e93b835ba15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4702937af89d3c818a0457703cf47e93b835ba15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16f72d88dd84fd56a31eca8767a8f3c8d0fab88b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16f72d88dd84fd56a31eca8767a8f3c8d0fab88b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16f72d88dd84fd56a31eca8767a8f3c8d0fab88b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16f72d88dd84fd56a31eca8767a8f3c8d0fab88b/comments", "author": null, "committer": null, "parents": [{"sha": "6b0e0695a52d1a7f82b2adfe460c79254c361e14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b0e0695a52d1a7f82b2adfe460c79254c361e14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b0e0695a52d1a7f82b2adfe460c79254c361e14"}], "stats": {"total": 96, "additions": 74, "deletions": 22}, "files": [{"sha": "5b95b21b587915cc5b9e2ec3ff60f417b755fa79", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 45, "deletions": 19, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f72d88dd84fd56a31eca8767a8f3c8d0fab88b/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f72d88dd84fd56a31eca8767a8f3c8d0fab88b/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=16f72d88dd84fd56a31eca8767a8f3c8d0fab88b", "patch": "@@ -5142,6 +5142,9 @@ Expression*\n Binary_expression::do_flatten(Gogo* gogo, Named_object*,\n                               Statement_inserter* inserter)\n {\n+  if (this->classification() == EXPRESSION_ERROR)\n+    return this;\n+\n   Location loc = this->location();\n   Temporary_statement* temp;\n   if (this->left_->type()->is_string_type()\n@@ -6877,30 +6880,53 @@ Expression*\n Builtin_call_expression::do_flatten(Gogo*, Named_object*,\n                                     Statement_inserter* inserter)\n {\n-  if (this->code_ == BUILTIN_APPEND\n-      || this->code_ == BUILTIN_COPY)\n+  Location loc = this->location();\n+\n+  switch (this->code_)\n     {\n-      Location loc = this->location();\n-      Type* at = this->args()->front()->type();\n+    default:\n+      break;\n+\n+    case BUILTIN_APPEND:\n+    case BUILTIN_COPY:\n+      {\n+\tType* at = this->args()->front()->type();\n+\tfor (Expression_list::iterator pa = this->args()->begin();\n+\t     pa != this->args()->end();\n+\t     ++pa)\n+\t  {\n+\t    if ((*pa)->is_nil_expression())\n+\t      {\n+\t\tExpression* nil = Expression::make_nil(loc);\n+\t\tExpression* zero = Expression::make_integer_ul(0, NULL, loc);\n+\t\t*pa = Expression::make_slice_value(at, nil, zero, zero, loc);\n+\t      }\n+\t    if (!(*pa)->is_variable())\n+\t      {\n+\t\tTemporary_statement* temp =\n+                  Statement::make_temporary(NULL, *pa, loc);\n+\t\tinserter->insert(temp);\n+\t\t*pa = Expression::make_temporary_reference(temp, loc);\n+\t      }\n+\t  }\n+      }\n+      break;\n+\n+    case BUILTIN_PANIC:\n       for (Expression_list::iterator pa = this->args()->begin();\n-           pa != this->args()->end();\n-           ++pa)\n-        {\n-          if ((*pa)->is_nil_expression())\n+\t   pa != this->args()->end();\n+\t   ++pa)\n+\t{\n+\t  if (!(*pa)->is_variable() && (*pa)->type()->interface_type() != NULL)\n \t    {\n-\t      Expression* nil = Expression::make_nil(loc);\n-\t      Expression* zero = Expression::make_integer_ul(0, NULL, loc);\n-\t      *pa = Expression::make_slice_value(at, nil, zero, zero, loc);\n+\t      Temporary_statement* temp =\n+\t\tStatement::make_temporary(NULL, *pa, loc);\n+\t      inserter->insert(temp);\n+\t      *pa = Expression::make_temporary_reference(temp, loc);\n \t    }\n-          if (!(*pa)->is_variable())\n-            {\n-              Temporary_statement* temp =\n-                  Statement::make_temporary(NULL, *pa, loc);\n-              inserter->insert(temp);\n-              *pa = Expression::make_temporary_reference(temp, loc);\n-            }\n-        }\n+\t}\n     }\n+\n   return this;\n }\n "}, {"sha": "5da04710e39f8102b6b04a58d6008d293c1628ed", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f72d88dd84fd56a31eca8767a8f3c8d0fab88b/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f72d88dd84fd56a31eca8767a8f3c8d0fab88b/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=16f72d88dd84fd56a31eca8767a8f3c8d0fab88b", "patch": "@@ -421,6 +421,28 @@ Temporary_statement::do_check_types(Gogo*)\n     }\n }\n \n+// Flatten a temporary statement: add another temporary when it might\n+// be needed for interface conversion.\n+\n+Statement*\n+Temporary_statement::do_flatten(Gogo*, Named_object*, Block*,\n+\t\t\t\tStatement_inserter* inserter)\n+{\n+  if (this->type_ != NULL\n+      && this->init_ != NULL\n+      && !Type::are_identical(this->type_, this->init_->type(), false, NULL)\n+      && this->init_->type()->interface_type() != NULL\n+      && !this->init_->is_variable())\n+    {\n+      Temporary_statement *temp =\n+\tStatement::make_temporary(NULL, this->init_, this->location());\n+      inserter->insert(temp);\n+      this->init_ = Expression::make_temporary_reference(temp,\n+\t\t\t\t\t\t\t this->location());\n+    }\n+  return this;\n+}\n+\n // Convert to backend representation.\n \n Bstatement*\n@@ -440,9 +462,10 @@ Temporary_statement::do_get_backend(Translate_context* context)\n     binit = this->init_->get_backend(context);\n   else\n     {\n-      Expression* init = Expression::make_cast(this->type_, this->init_,\n-\t\t\t\t\t       this->location());\n-      context->gogo()->lower_expression(context->function(), NULL, &init);\n+      Expression* init = Expression::convert_for_assignment(context->gogo(),\n+\t\t\t\t\t\t\t    this->type_,\n+\t\t\t\t\t\t\t    this->init_,\n+\t\t\t\t\t\t\t    this->location());\n       binit = init->get_backend(context);\n     }\n "}, {"sha": "5634b61f339e4844224d0f57e81d84d424776165", "filename": "gcc/go/gofrontend/statements.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f72d88dd84fd56a31eca8767a8f3c8d0fab88b/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f72d88dd84fd56a31eca8767a8f3c8d0fab88b/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.h?ref=16f72d88dd84fd56a31eca8767a8f3c8d0fab88b", "patch": "@@ -550,6 +550,9 @@ class Temporary_statement : public Statement\n   void\n   do_check_types(Gogo*);\n \n+  Statement*\n+  do_flatten(Gogo*, Named_object*, Block*, Statement_inserter*);\n+\n   Bstatement*\n   do_get_backend(Translate_context*);\n "}]}