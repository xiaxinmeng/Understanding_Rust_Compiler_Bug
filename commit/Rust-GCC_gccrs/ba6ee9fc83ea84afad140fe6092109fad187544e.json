{"sha": "ba6ee9fc83ea84afad140fe6092109fad187544e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE2ZWU5ZmM4M2VhODRhZmFkMTQwZmU2MDkyMTA5ZmFkMTg3NTQ0ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-04-10T11:27:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-04-10T11:27:05Z"}, "message": "re PR tree-optimization/80304 (Wrong result with do concurrent)\n\n2017-04-10  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/80304\n\t* tree-ssa-loop-im.c (ref_indep_loop_p_1): Also recurse\n\tfor safelen.\n\n\t* gcc.dg/torture/pr80304.c: New testcase.\n\nFrom-SVN: r246803", "tree": {"sha": "7e9b98ba1dfccc36f3920132c5ab18f7762c1527", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e9b98ba1dfccc36f3920132c5ab18f7762c1527"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba6ee9fc83ea84afad140fe6092109fad187544e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba6ee9fc83ea84afad140fe6092109fad187544e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba6ee9fc83ea84afad140fe6092109fad187544e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba6ee9fc83ea84afad140fe6092109fad187544e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4d1a05f13808cc12c09e71e6ca3951e878184bb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d1a05f13808cc12c09e71e6ca3951e878184bb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d1a05f13808cc12c09e71e6ca3951e878184bb2"}], "stats": {"total": 52, "additions": 51, "deletions": 1}, "files": [{"sha": "b02a8100a40a76a507faeea71e5edd37ab886d31", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6ee9fc83ea84afad140fe6092109fad187544e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6ee9fc83ea84afad140fe6092109fad187544e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba6ee9fc83ea84afad140fe6092109fad187544e", "patch": "@@ -1,3 +1,9 @@\n+2017-04-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/80304\n+\t* tree-ssa-loop-im.c (ref_indep_loop_p_1): Also recurse\n+\tfor safelen.\n+\n 2017-04-10  Nathan Sidwell  <nathan@acm.org>\n \n \tPR target/79905"}, {"sha": "d579a09067e0276c229195fa7799bf034a98b431", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6ee9fc83ea84afad140fe6092109fad187544e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6ee9fc83ea84afad140fe6092109fad187544e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ba6ee9fc83ea84afad140fe6092109fad187544e", "patch": "@@ -1,3 +1,8 @@\n+2017-04-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/80304\n+\t* gcc.dg/torture/pr80304.c: New testcase.\n+\n 2017-04-10  Nathan Sidwell  <nathan@acm.org>\n \n \tPR target/79905"}, {"sha": "814f08017c22dc558243c77174818694e55ce3b5", "filename": "gcc/testsuite/gcc.dg/torture/pr80304.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6ee9fc83ea84afad140fe6092109fad187544e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr80304.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6ee9fc83ea84afad140fe6092109fad187544e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr80304.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr80304.c?ref=ba6ee9fc83ea84afad140fe6092109fad187544e", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+\n+int __attribute__((pure,noinline,noclone)) foo (int *p)\n+{\n+  return *p * 2;\n+}\n+\n+int main()\n+{\n+  int k = 0;\n+  int i;\n+#pragma GCC ivdep\n+  for (k = 0; k < 9;)\n+    {\n+      i = 0;\n+      while (1)\n+\t{\n+\t  k += foo (&i);\n+\t  if (k > 7)\n+\t    break;\n+\t  i++;\n+\t}\n+    }\n+  if (k != 12)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "0d806da2a3ed2e3f02620f67b28b8ccebbee6552", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6ee9fc83ea84afad140fe6092109fad187544e/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6ee9fc83ea84afad140fe6092109fad187544e/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=ba6ee9fc83ea84afad140fe6092109fad187544e", "patch": "@@ -2145,9 +2145,21 @@ ref_indep_loop_p_1 (int safelen, struct loop *loop, im_mem_ref *ref,\n \t  fprintf (dump_file, \"\\n\");\n \t}\n \n+      /* We need to recurse to properly handle UNANALYZABLE_MEM_ID.  */\n+      struct loop *inner = loop->inner;\n+      while (inner)\n+\t{\n+\t  if (!ref_indep_loop_p_1 (safelen, inner, ref, stored_p, ref_loop))\n+\t    {\n+\t      indep_p = false;\n+\t      break;\n+\t    }\n+\t  inner = inner->next;\n+\t}\n+\n       /* Avoid caching here as safelen depends on context and refs\n          are shared between different contexts.  */\n-      return true;\n+      return indep_p;\n     }\n   else\n     {"}]}