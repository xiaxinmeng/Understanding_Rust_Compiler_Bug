{"sha": "2c1e7b55dab5564f92d890c4953f9fd387bb30d7", "node_id": "C_kwDOANBUbNoAKDJjMWU3YjU1ZGFiNTU2NGY5MmQ4OTBjNDk1M2Y5ZmQzODdiYjMwZDc", "commit": {"author": {"name": "Marc Poulhi\u00e8s", "email": "dkm@kataplop.net", "date": "2022-12-17T15:23:05Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-10T12:45:46Z"}, "message": "gccrs: fix some clang warnings\n\nThis fixes some extra warnings reported by clang.\n\ngcc/rust/ChangeLog:\n\tPR rust/108111\n\t* ast/rust-ast-full-decls.h (StructPatternElements): Declare as a\n\tclass.\n\t* ast/rust-item.h (EnumItem): Mark several method as being\n\toverrides.\n\t* ast/rust-pattern.h (StructPattern::get_locus): Add override.\n\t* lex/rust-lex.h (BufferInputSource): Use reference_wrapper\n\tinstead of bare reference.\n\t(TokenSource::get): Add method to implement the reference_wrapper\n\tinterface.\n\t* typecheck/rust-tyty.h (TypeBoundPredicate): Add empty dtor.\n\t* util/rust-buffered-queue.h (peek): Source token stream is now\n\tusing a reference_wrapper, use .get()\n\nSigned-off-by: Marc Poulhi\u00e8s <dkm@kataplop.net>", "tree": {"sha": "d72e85cce82306fd342ec272a19d96f4c65a6cfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d72e85cce82306fd342ec272a19d96f4c65a6cfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c1e7b55dab5564f92d890c4953f9fd387bb30d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c1e7b55dab5564f92d890c4953f9fd387bb30d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c1e7b55dab5564f92d890c4953f9fd387bb30d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c1e7b55dab5564f92d890c4953f9fd387bb30d7/comments", "author": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f9938c712d6d8645714ee21d5850342281022e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f9938c712d6d8645714ee21d5850342281022e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f9938c712d6d8645714ee21d5850342281022e1"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "fee174b5cf6abc3944145ff83d189b5849a8b515", "filename": "gcc/rust/ast/rust-ast-full-decls.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c1e7b55dab5564f92d890c4953f9fd387bb30d7/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c1e7b55dab5564f92d890c4953f9fd387bb30d7/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-decls.h?ref=2c1e7b55dab5564f92d890c4953f9fd387bb30d7", "patch": "@@ -240,7 +240,7 @@ class StructPatternField;\n class StructPatternFieldTuplePat;\n class StructPatternFieldIdentPat;\n class StructPatternFieldIdent;\n-struct StructPatternElements;\n+class StructPatternElements;\n class StructPattern;\n class TupleStructItems;\n class TupleStructItemsNoRange;"}, {"sha": "2646c526503ceeced80456ea21e7a3ae34f9d455", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c1e7b55dab5564f92d890c4953f9fd387bb30d7/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c1e7b55dab5564f92d890c4953f9fd387bb30d7/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=2c1e7b55dab5564f92d890c4953f9fd387bb30d7", "patch": "@@ -2210,18 +2210,18 @@ class EnumItem : public VisItem\n     return std::unique_ptr<EnumItem> (clone_item_impl ());\n   }\n \n-  virtual std::string as_string () const;\n+  virtual std::string as_string () const override;\n \n   // not pure virtual as not abstract\n-  virtual void accept_vis (ASTVisitor &vis);\n+  virtual void accept_vis (ASTVisitor &vis) override;\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override { return locus; }\n \n   Identifier get_identifier () const { return variant_name; }\n \n   // Based on idea that name is never empty.\n-  void mark_for_strip () { variant_name = \"\"; }\n-  bool is_marked_for_strip () const { return variant_name.empty (); }\n+  void mark_for_strip () override { variant_name = \"\"; }\n+  bool is_marked_for_strip () const override { return variant_name.empty (); }\n \n protected:\n   EnumItem *clone_item_impl () const override { return new EnumItem (*this); }"}, {"sha": "079c7a9eae4d8bb11eaff43821d908a1c307b0d2", "filename": "gcc/rust/ast/rust-pattern.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c1e7b55dab5564f92d890c4953f9fd387bb30d7/gcc%2Frust%2Fast%2Frust-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c1e7b55dab5564f92d890c4953f9fd387bb30d7/gcc%2Frust%2Fast%2Frust-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-pattern.h?ref=2c1e7b55dab5564f92d890c4953f9fd387bb30d7", "patch": "@@ -919,7 +919,7 @@ class StructPattern : public Pattern\n    * is empty). */\n   bool has_struct_pattern_elems () const { return !elems.is_empty (); }\n \n-  Location get_locus () const { return path.get_locus (); }\n+  Location get_locus () const override { return path.get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n "}, {"sha": "14008397154a5f4f4595b5a2eca344ac0ff52a8e", "filename": "gcc/rust/lex/rust-lex.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c1e7b55dab5564f92d890c4953f9fd387bb30d7/gcc%2Frust%2Flex%2Frust-lex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c1e7b55dab5564f92d890c4953f9fd387bb30d7/gcc%2Frust%2Flex%2Frust-lex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.h?ref=2c1e7b55dab5564f92d890c4953f9fd387bb30d7", "patch": "@@ -277,7 +277,7 @@ class Lexer\n   // InputSource input_source;\n   // Input file queue.\n   std::unique_ptr<InputSource> raw_input_source;\n-  buffered_queue<int, InputSource &> input_queue;\n+  buffered_queue<int, std::reference_wrapper<InputSource>> input_queue;\n \n   // Token source wrapper thing.\n   struct TokenSource\n@@ -288,6 +288,9 @@ class Lexer\n     // Create a new TokenSource with given lexer.\n     TokenSource (Lexer *parLexer) : lexer (parLexer) {}\n \n+    // Used to mimic std::reference_wrapper that is used for InputSource.\n+    TokenSource &get () { return *this; }\n+\n     // Overload operator () to build token in lexer.\n     TokenPtr next () { return lexer->build_token (); }\n   };"}, {"sha": "7cd8673ea731e4ceef51c379bb26d74cf5375dc2", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c1e7b55dab5564f92d890c4953f9fd387bb30d7/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c1e7b55dab5564f92d890c4953f9fd387bb30d7/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=2c1e7b55dab5564f92d890c4953f9fd387bb30d7", "patch": "@@ -387,6 +387,8 @@ class TypeBoundPredicate : public SubstitutionRef\n \n   TypeBoundPredicate (const TypeBoundPredicate &other);\n \n+  virtual ~TypeBoundPredicate (){};\n+\n   TypeBoundPredicate &operator= (const TypeBoundPredicate &other);\n \n   static TypeBoundPredicate error ();"}, {"sha": "c3c30c664c02ef54ccb79ec75d7261a333c2976e", "filename": "gcc/rust/util/rust-buffered-queue.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c1e7b55dab5564f92d890c4953f9fd387bb30d7/gcc%2Frust%2Futil%2Frust-buffered-queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c1e7b55dab5564f92d890c4953f9fd387bb30d7/gcc%2Frust%2Futil%2Frust-buffered-queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-buffered-queue.h?ref=2c1e7b55dab5564f92d890c4953f9fd387bb30d7", "patch": "@@ -102,7 +102,7 @@ template <typename T, typename Source> class buffered_queue\n \t/* iterate through buffer and invoke operator () on source on values\n \t * past original end */\n \tfor (int i = 0; i < num_items_to_read; i++)\n-\t  buffer[end + i] = source.next ();\n+\t  buffer[end + i] = source.get ().next ();\n \n \t// move end based on additional items added\n \tend += num_items_to_read;"}]}