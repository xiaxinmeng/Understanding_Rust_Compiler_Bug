{"sha": "0f82c0ea8d86ee3bb404c460a04ff2ccfb56d2a0", "node_id": "C_kwDOANBUbNoAKDBmODJjMGVhOGQ4NmVlM2JiNDA0YzQ2MGEwNGZmMmNjZmI1NmQyYTA", "commit": {"author": {"name": "Immad Mir", "email": "mirimmad@outlook.com", "date": "2022-07-27T13:46:36Z"}, "committer": {"name": "Immad Mir", "email": "mirimmad@outlook.com", "date": "2022-07-27T13:46:43Z"}, "message": "analyzer: add get_meaning_for_state_change vfunc to fd_diagnostic in sm-fd.cc [PR106286]\n\nThis patch adds get_meaning_for_state_change vfunc to\nfd_diagnostic in sm-fd.cc which could be used by SARIF output.\n\nLightly tested on x86_64 Linux.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/106286\n\t* sm-fd.cc:\n\t(fd_diagnostic::get_meaning_for_state_change): New.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/106286\n\t* gcc.dg/analyzer/fd-meaning.c: New test.\n\nSigned-off-by: Immad Mir <mirimmad@outlook.com>", "tree": {"sha": "9b3ff23609408512da617ee3bb23e5311f788298", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b3ff23609408512da617ee3bb23e5311f788298"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f82c0ea8d86ee3bb404c460a04ff2ccfb56d2a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f82c0ea8d86ee3bb404c460a04ff2ccfb56d2a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f82c0ea8d86ee3bb404c460a04ff2ccfb56d2a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f82c0ea8d86ee3bb404c460a04ff2ccfb56d2a0/comments", "author": null, "committer": null, "parents": [{"sha": "c2481a6bb70a23a9e279c4f23cf76671afca2145", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2481a6bb70a23a9e279c4f23cf76671afca2145", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2481a6bb70a23a9e279c4f23cf76671afca2145"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "ed923ade10044add49a52a82f732640fe6b4279c", "filename": "gcc/analyzer/sm-fd.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f82c0ea8d86ee3bb404c460a04ff2ccfb56d2a0/gcc%2Fanalyzer%2Fsm-fd.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f82c0ea8d86ee3bb404c460a04ff2ccfb56d2a0/gcc%2Fanalyzer%2Fsm-fd.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-fd.cc?ref=0f82c0ea8d86ee3bb404c460a04ff2ccfb56d2a0", "patch": "@@ -229,6 +229,20 @@ class fd_diagnostic : public pending_diagnostic\n     return label_text ();\n   }\n \n+  diagnostic_event::meaning\n+  get_meaning_for_state_change (\n+      const evdesc::state_change &change) const final override\n+  {\n+    if (change.m_old_state == m_sm.get_start_state ()\n+\t\t&& (m_sm.is_unchecked_fd_p (change.m_new_state)))\n+      return diagnostic_event::meaning (diagnostic_event::VERB_acquire,\n+\t\t\t diagnostic_event::NOUN_resource);\n+    if (change.m_new_state == m_sm.m_closed)\n+      return diagnostic_event::meaning (diagnostic_event::VERB_release,\n+\t\t\t diagnostic_event::NOUN_resource);\n+    return diagnostic_event::meaning ();\n+  }\n+\n protected:\n   const fd_state_machine &m_sm;\n   tree m_arg;"}, {"sha": "6a9ec921fd39c9005038af3f2408013aeb140f43", "filename": "gcc/testsuite/gcc.dg/analyzer/fd-meaning.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f82c0ea8d86ee3bb404c460a04ff2ccfb56d2a0/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-meaning.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f82c0ea8d86ee3bb404c460a04ff2ccfb56d2a0/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-meaning.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-meaning.c?ref=0f82c0ea8d86ee3bb404c460a04ff2ccfb56d2a0", "patch": "@@ -0,0 +1,37 @@\n+  /* { dg-additional-options \"-fanalyzer-verbose-state-changes\" } */\n+int open(const char *, int mode);\n+void close(int fd);\n+\n+#define O_RDONLY 0\n+#define O_WRONLY 1\n+#define O_RDWR 2\n+\n+void test_1 (const char* path)\n+{\n+    int fd = open (path, O_RDWR); /* { dg-message \"meaning: \\\\{verb: 'acquire', noun: 'resource'\\\\}\" } */\n+    if (fd != -1)\n+    {\n+        close(fd); /* { dg-message \"meaning: \\\\{verb: 'release', noun: 'resource'\\\\}\" } */\n+        close(fd); /* { dg-warning \"double 'close' of file descriptor 'fd' \\\\\\[CWE-1341\\\\\\]\" } */\n+    }\n+}\n+\n+void test_2 (const char* path)\n+{\n+    int fd = open (path, O_RDONLY); /* { dg-message \"meaning: \\\\{verb: 'acquire', noun: 'resource'\\\\}\" } */\n+    if (fd != -1)\n+    {\n+        close(fd); /* { dg-message \"meaning: \\\\{verb: 'release', noun: 'resource'\\\\}\" } */\n+        close(fd); /* { dg-warning \"double 'close' of file descriptor 'fd' \\\\\\[CWE-1341\\\\\\]\" } */\n+    }\n+}\n+\n+void test_3 (const char* path)\n+{\n+    int fd = open (path, O_WRONLY); /* { dg-message \"meaning: \\\\{verb: 'acquire', noun: 'resource'\\\\}\" } */\n+    if (fd != -1)\n+    {\n+        close(fd); /* { dg-message \"meaning: \\\\{verb: 'release', noun: 'resource'\\\\}\" } */\n+        close(fd); /* { dg-warning \"double 'close' of file descriptor 'fd' \\\\\\[CWE-1341\\\\\\]\" } */\n+    }\n+}\n\\ No newline at end of file"}]}