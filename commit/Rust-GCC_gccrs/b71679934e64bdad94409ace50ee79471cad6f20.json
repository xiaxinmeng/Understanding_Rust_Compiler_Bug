{"sha": "b71679934e64bdad94409ace50ee79471cad6f20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjcxNjc5OTM0ZTY0YmRhZDk0NDA5YWNlNTBlZTc5NDcxY2FkNmYyMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-10-18T14:31:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-10-18T14:31:29Z"}, "message": "i386.c (ix86_builtin_vectorization_cost): Do not feed width-specific load/store costs through ix86_vec_cost.\n\n2018-10-18  Richard Biener  <rguenther@suse.de>\n\n\t* config/i386/i386.c (ix86_builtin_vectorization_cost): Do not\n\tfeed width-specific load/store costs through ix86_vec_cost.\n\t* config/i386/x86-tune-costs.h (athlon_cost): Adjust.\n\t(k8_cost): Likewise.\n\t(bdver_cost): Likewise.\n\t(znver1_cost): Likewise.\n\t(btver1_cost): Likewise.\n\t(btver2_cost): Likewise.\n\nFrom-SVN: r265268", "tree": {"sha": "9e51eff2ad8cebe5d400d39716d8a91196afa484", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e51eff2ad8cebe5d400d39716d8a91196afa484"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b71679934e64bdad94409ace50ee79471cad6f20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b71679934e64bdad94409ace50ee79471cad6f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b71679934e64bdad94409ace50ee79471cad6f20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b71679934e64bdad94409ace50ee79471cad6f20/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aff3ce41c4abecead6d05a0422d912468d2c893c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aff3ce41c4abecead6d05a0422d912468d2c893c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aff3ce41c4abecead6d05a0422d912468d2c893c"}], "stats": {"total": 73, "additions": 39, "deletions": 34}, "files": [{"sha": "1c2e61292188b691b9380235bb3b95cd731e3481", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b71679934e64bdad94409ace50ee79471cad6f20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b71679934e64bdad94409ace50ee79471cad6f20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b71679934e64bdad94409ace50ee79471cad6f20", "patch": "@@ -1,3 +1,14 @@\n+2018-10-18  Richard Biener  <rguenther@suse.de>\n+\n+\t* config/i386/i386.c (ix86_builtin_vectorization_cost): Do not\n+\tfeed width-specific load/store costs through ix86_vec_cost.\n+\t* config/i386/x86-tune-costs.h (athlon_cost): Adjust.\n+\t(k8_cost): Likewise.\n+\t(bdver_cost): Likewise.\n+\t(znver1_cost): Likewise.\n+\t(btver1_cost): Likewise.\n+\t(btver2_cost): Likewise.\n+\n 2018-10-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* simplify-rtx.c (simplify_subreg): Call simplify_gen_subreg"}, {"sha": "03324c0d5acc4f10a6f358871772be6883a5af15", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b71679934e64bdad94409ace50ee79471cad6f20/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b71679934e64bdad94409ace50ee79471cad6f20/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b71679934e64bdad94409ace50ee79471cad6f20", "patch": "@@ -45108,16 +45108,14 @@ ix86_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n \t/* See PR82713 - we may end up being called on non-vector type.  */\n \tif (index < 0)\n \t  index = 2;\n-        return ix86_vec_cost (mode,\n-\t\t\t      COSTS_N_INSNS (ix86_cost->sse_load[index]) / 2);\n+        return COSTS_N_INSNS (ix86_cost->sse_load[index]) / 2;\n \n       case vector_store:\n \tindex = sse_store_index (mode);\n \t/* See PR82713 - we may end up being called on non-vector type.  */\n \tif (index < 0)\n \t  index = 2;\n-        return ix86_vec_cost (mode,\n-\t\t\t      COSTS_N_INSNS (ix86_cost->sse_store[index]) / 2);\n+        return COSTS_N_INSNS (ix86_cost->sse_store[index]) / 2;\n \n       case vec_to_scalar:\n       case scalar_to_vec:\n@@ -45130,18 +45128,14 @@ ix86_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n \t/* See PR82713 - we may end up being called on non-vector type.  */\n \tif (index < 0)\n \t  index = 2;\n-        return ix86_vec_cost (mode,\n-\t\t\t      COSTS_N_INSNS\n-\t\t\t\t (ix86_cost->sse_unaligned_load[index]) / 2);\n+        return COSTS_N_INSNS (ix86_cost->sse_unaligned_load[index]) / 2;\n \n       case unaligned_store:\n \tindex = sse_store_index (mode);\n \t/* See PR82713 - we may end up being called on non-vector type.  */\n \tif (index < 0)\n \t  index = 2;\n-        return ix86_vec_cost (mode,\n-\t\t\t      COSTS_N_INSNS\n-\t\t\t\t (ix86_cost->sse_unaligned_store[index]) / 2);\n+        return COSTS_N_INSNS (ix86_cost->sse_unaligned_store[index]) / 2;\n \n       case vector_gather_load:\n         return ix86_vec_cost (mode,"}, {"sha": "50ecb35cbdece59e764580b8429b0080f9f00f0f", "filename": "gcc/config/i386/x86-tune-costs.h", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b71679934e64bdad94409ace50ee79471cad6f20/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b71679934e64bdad94409ace50ee79471cad6f20/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h?ref=b71679934e64bdad94409ace50ee79471cad6f20", "patch": "@@ -795,12 +795,12 @@ struct processor_costs athlon_cost = {\n   {4, 4},\t\t\t\t/* cost of storing MMX registers\n \t\t\t\t\t   in SImode and DImode */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n-  {4, 4, 6, 12, 24},\t\t\t/* cost of loading SSE registers\n+  {4, 4, 12, 12, 24},\t\t\t/* cost of loading SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n-  {4, 4, 6, 12, 24},\t\t\t/* cost of unaligned loads.  */\n-  {4, 4, 5, 10, 20},\t\t\t/* cost of storing SSE registers\n+  {4, 4, 12, 12, 24},\t\t\t/* cost of unaligned loads.  */\n+  {4, 4, 10, 10, 20},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n-  {4, 4, 5, 10, 20},\t\t\t/* cost of unaligned stores.  */\n+  {4, 4, 10, 10, 20},\t\t\t/* cost of unaligned stores.  */\n   5, 5,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n   4, 4,\t\t\t\t\t/* Gather load static, per_elt.  */\n   4, 4,\t\t\t\t\t/* Gather store static, per_elt.  */\n@@ -891,12 +891,12 @@ struct processor_costs k8_cost = {\n   {4, 4},\t\t\t\t/* cost of storing MMX registers\n \t\t\t\t\t   in SImode and DImode */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n-  {4, 3, 6, 12, 24},\t\t\t/* cost of loading SSE registers\n+  {4, 3, 12, 12, 24},\t\t\t/* cost of loading SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n-  {4, 3, 6, 12, 24},\t\t\t/* cost of unaligned loads.  */\n-  {4, 4, 5, 10, 20},\t\t\t/* cost of storing SSE registers\n+  {4, 3, 12, 12, 24},\t\t\t/* cost of unaligned loads.  */\n+  {4, 4, 10, 10, 20},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n-  {4, 4, 5, 10, 20},\t\t\t/* cost of unaligned stores.  */\n+  {4, 4, 10, 10, 20},\t\t\t/* cost of unaligned stores.  */\n   5, 5,\t\t\t\t\t/* SSE->integer and integer->SSE moves */\n   4, 4,\t\t\t\t\t/* Gather load static, per_elt.  */\n   4, 4,\t\t\t\t\t/* Gather store static, per_elt.  */\n@@ -1100,12 +1100,12 @@ const struct processor_costs bdver_cost = {\n   {10, 10},\t\t\t\t/* cost of storing MMX registers\n \t\t\t\t\t   in SImode and DImode */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n-  {12, 12, 10, 20, 30},\t\t\t/* cost of loading SSE registers\n+  {12, 12, 10, 40, 60},\t\t\t/* cost of loading SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n-  {12, 12, 10, 20, 30},\t\t\t/* cost of unaligned loads.  */\n-  {10, 10, 10, 20, 30},\t\t\t/* cost of storing SSE registers\n+  {12, 12, 10, 40, 60},\t\t\t/* cost of unaligned loads.  */\n+  {10, 10, 10, 40, 60},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n-  {10, 10, 10, 20, 30},\t\t\t/* cost of unaligned stores.  */\n+  {10, 10, 10, 40, 60},\t\t\t/* cost of unaligned stores.  */\n   16, 20,\t\t\t\t/* SSE->integer and integer->SSE moves */\n   12, 12,\t\t\t\t/* Gather load static, per_elt.  */\n   10, 10,\t\t\t\t/* Gather store static, per_elt.  */\n@@ -1212,12 +1212,12 @@ struct processor_costs znver1_cost = {\n   {8, 8},\t\t\t\t/* cost of storing MMX registers\n \t\t\t\t\t   in SImode and DImode.  */\n   2, 3, 6,\t\t\t\t/* cost of moving XMM,YMM,ZMM register.  */\n-  {6, 6, 6, 6, 12},\t\t\t/* cost of loading SSE registers\n+  {6, 6, 6, 12, 24},\t\t\t/* cost of loading SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit.  */\n-  {6, 6, 6, 6, 12},\t\t\t/* cost of unaligned loads.  */\n-  {8, 8, 8, 8, 16},\t\t\t/* cost of storing SSE registers\n+  {6, 6, 6, 12, 24},\t\t\t/* cost of unaligned loads.  */\n+  {8, 8, 8, 16, 32},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit.  */\n-  {8, 8, 8, 8, 16},\t\t\t/* cost of unaligned stores.  */\n+  {8, 8, 8, 16, 32},\t\t\t/* cost of unaligned stores.  */\n   6, 6,\t\t\t\t\t/* SSE->integer and integer->SSE moves.  */\n   /* VGATHERDPD is 23 uops and throughput is 9, VGATHERDPD is 35 uops,\n      throughput 12.  Approx 9 uops do not depend on vector size and every load\n@@ -1420,12 +1420,12 @@ const struct processor_costs btver1_cost = {\n   {12, 12},\t\t\t\t/* cost of storing MMX registers\n \t\t\t\t\t   in SImode and DImode */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n-  {10, 10, 12, 24, 48},\t\t\t/* cost of loading SSE registers\n+  {10, 10, 12, 48, 96},\t\t\t/* cost of loading SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n-  {10, 10, 12, 24, 48},\t\t\t/* cost of unaligned loads.  */\n-  {10, 10, 12, 24, 48},\t\t\t/* cost of storing SSE registers\n+  {10, 10, 12, 48, 96},\t\t\t/* cost of unaligned loads.  */\n+  {10, 10, 12, 48, 96},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n-  {10, 10, 12, 24, 48},\t\t\t/* cost of unaligned stores.  */\n+  {10, 10, 12, 48, 96},\t\t\t/* cost of unaligned stores.  */\n   14, 14,\t\t\t\t/* SSE->integer and integer->SSE moves */\n   10, 10,\t\t\t\t/* Gather load static, per_elt.  */\n   10, 10,\t\t\t\t/* Gather store static, per_elt.  */\n@@ -1511,12 +1511,12 @@ const struct processor_costs btver2_cost = {\n   {12, 12},\t\t\t\t/* cost of storing MMX registers\n \t\t\t\t\t   in SImode and DImode */\n   2, 4, 8,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n-  {10, 10, 12, 24, 48},\t\t\t/* cost of loading SSE registers\n+  {10, 10, 12, 48, 96},\t\t\t/* cost of loading SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n-  {10, 10, 12, 24, 48},\t\t\t/* cost of unaligned loads.  */\n-  {10, 10, 12, 24, 48},\t\t\t/* cost of storing SSE registers\n+  {10, 10, 12, 48, 96},\t\t\t/* cost of unaligned loads.  */\n+  {10, 10, 12, 48, 96},\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in 32,64,128,256 and 512-bit */\n-  {10, 10, 12, 24, 48},\t\t\t/* cost of unaligned stores.  */\n+  {10, 10, 12, 48, 96},\t\t\t/* cost of unaligned stores.  */\n   14, 14,\t\t\t\t/* SSE->integer and integer->SSE moves */\n   10, 10,\t\t\t\t/* Gather load static, per_elt.  */\n   10, 10,\t\t\t\t/* Gather store static, per_elt.  */"}]}