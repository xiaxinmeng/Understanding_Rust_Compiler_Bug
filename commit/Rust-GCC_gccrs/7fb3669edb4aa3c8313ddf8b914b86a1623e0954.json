{"sha": "7fb3669edb4aa3c8313ddf8b914b86a1623e0954", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZiMzY2OWVkYjRhYTNjODMxM2RkZjhiOTE0Yjg2YTE2MjNlMDk1NA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2019-12-21T13:49:03Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-15T01:55:47Z"}, "message": "analyzer: fix global-sm-state issue affecting sm-signal\n\nsm-signal.cc was failing to warn about the use of an fprintf call in a\nsignal handler when the signal handler function was non-static.\n\nThe root cause was a failure to copy global sm-state within\nsm_state_map::clone_with_remapping as called by\nprogram_state::can_merge_with_p, which led to the exploded node for\nthe entrypoint to the handler in the \"normal\" state being erroneously\nreused for the \"in_signal_handler\" state, thus losing the global state,\nand thus failing to warn.\n\nThis patch fixes the above, so that non-equal global sm-state values\nprevent merger of program_state, thus requiring separate exploded nodes\nfor the \"normal\" and \"in signal handler\" states, and thus triggering\nthe warning for the reproducer.\n\ngcc/analyzer/ChangeLog:\n\t* program-state.cc (sm_state_map::clone_with_remapping): Copy\n\tm_global_state.\n\t(selftest::test_program_state_merging_2): New selftest.\n\t(selftest::analyzer_program_state_cc_tests): Call it.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/signal-6.c: New test.", "tree": {"sha": "b578fa335525be8fd6e7dc142d11be4e091dc15b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b578fa335525be8fd6e7dc142d11be4e091dc15b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fb3669edb4aa3c8313ddf8b914b86a1623e0954", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fb3669edb4aa3c8313ddf8b914b86a1623e0954", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fb3669edb4aa3c8313ddf8b914b86a1623e0954", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fb3669edb4aa3c8313ddf8b914b86a1623e0954/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2a538b1c31a13fc3d2f6d8ac3f341437775e984", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2a538b1c31a13fc3d2f6d8ac3f341437775e984", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2a538b1c31a13fc3d2f6d8ac3f341437775e984"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "7d3b109944eef5e4e374dc3e93403412098ee49a", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb3669edb4aa3c8313ddf8b914b86a1623e0954/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb3669edb4aa3c8313ddf8b914b86a1623e0954/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=7fb3669edb4aa3c8313ddf8b914b86a1623e0954", "patch": "@@ -1,3 +1,10 @@\n+2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* program-state.cc (sm_state_map::clone_with_remapping): Copy\n+\tm_global_state.\n+\t(selftest::test_program_state_merging_2): New selftest.\n+\t(selftest::analyzer_program_state_cc_tests): Call it.\n+\n 2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n \n \t* checker-path.h (checker_path::get_checker_event): New function."}, {"sha": "7dbdf9df84e2cc971e6282a0cfabb3fdd9ed8a42", "filename": "gcc/analyzer/program-state.cc", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb3669edb4aa3c8313ddf8b914b86a1623e0954/gcc%2Fanalyzer%2Fprogram-state.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb3669edb4aa3c8313ddf8b914b86a1623e0954/gcc%2Fanalyzer%2Fprogram-state.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.cc?ref=7fb3669edb4aa3c8313ddf8b914b86a1623e0954", "patch": "@@ -84,6 +84,7 @@ sm_state_map *\n sm_state_map::clone_with_remapping (const one_way_svalue_id_map &id_map) const\n {\n   sm_state_map *result = new sm_state_map ();\n+  result->m_global_state = m_global_state;\n   for (typename map_t::iterator iter = m_map.begin ();\n        iter != m_map.end ();\n        ++iter)\n@@ -1348,13 +1349,47 @@ test_program_state_merging ()\n   ASSERT_EQ (s0, merged);\n }\n \n+/* Verify that program_states with different global-state in an sm-state\n+   can't be merged.  */\n+\n+static void\n+test_program_state_merging_2 ()\n+{\n+  auto_delete_vec <state_machine> checkers;\n+  checkers.safe_push (make_signal_state_machine (NULL));\n+  extrinsic_state ext_state (checkers);\n+\n+  program_state s0 (ext_state);\n+  {\n+    sm_state_map *smap0 = s0.m_checker_states[0];\n+    const state_machine::state_t TEST_STATE_0 = 0;\n+    smap0->set_global_state (TEST_STATE_0);\n+    ASSERT_EQ (smap0->get_global_state (), TEST_STATE_0);\n+  }\n+\n+  program_state s1 (ext_state);\n+  {\n+    sm_state_map *smap1 = s1.m_checker_states[0];\n+    const state_machine::state_t TEST_STATE_1 = 1;\n+    smap1->set_global_state (TEST_STATE_1);\n+    ASSERT_EQ (smap1->get_global_state (), TEST_STATE_1);\n+  }\n+\n+  ASSERT_NE (s0, s1);\n+\n+  /* They ought to not be mergeable.  */\n+  program_state merged (ext_state);\n+  ASSERT_FALSE (s0.can_merge_with_p (s1, ext_state, &merged));\n+}\n+\n /* Run all of the selftests within this file.  */\n \n void\n analyzer_program_state_cc_tests ()\n {\n   test_sm_state_map ();\n   test_program_state_merging ();\n+  test_program_state_merging_2 ();\n }\n \n } // namespace selftest"}, {"sha": "571b51a2c0ac36fa97bf810c468c430c7214e8f1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb3669edb4aa3c8313ddf8b914b86a1623e0954/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb3669edb4aa3c8313ddf8b914b86a1623e0954/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7fb3669edb4aa3c8313ddf8b914b86a1623e0954", "patch": "@@ -1,3 +1,7 @@\n+2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/signal-6.c: New test.\n+\n 2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/analyzer/dot-output.c: Add test coverage for a BB with"}, {"sha": "f51845167f5c00ae40907357bb51800b210870b3", "filename": "gcc/testsuite/gcc.dg/analyzer/signal-6.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb3669edb4aa3c8313ddf8b914b86a1623e0954/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsignal-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb3669edb4aa3c8313ddf8b914b86a1623e0954/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsignal-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsignal-6.c?ref=7fb3669edb4aa3c8313ddf8b914b86a1623e0954", "patch": "@@ -0,0 +1,20 @@\n+#include <stdio.h>\n+#include <signal.h>\n+\n+extern void body_of_program(void);\n+\n+/* Example of a non-static signal handler.  */\n+\n+void handler(int signum)\n+{\n+  fprintf(stderr, \"LOG: %i\", signum); /* { dg-warning \"call to 'fprintf' from within signal handler\" } */\n+}\n+\n+int main(int argc, const char *argv)\n+{\n+  signal(SIGINT, handler); /* { dg-message \"registering 'handler' as signal handler\" } */\n+\n+  body_of_program();\n+\n+  return 0;\n+}"}]}