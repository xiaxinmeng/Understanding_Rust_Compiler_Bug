{"sha": "1b0c37d730cd2bda3fa69befcb77e1ae11705219", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIwYzM3ZDczMGNkMmJkYTNmYTY5YmVmY2I3N2UxYWUxMTcwNTIxOQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-08-09T17:11:00Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-08-09T17:11:00Z"}, "message": "Makefile.in (HOST_CFLAGS): Take out -DGENERATOR_FILE.\n\n\t * Makefile.in (HOST_CFLAGS): Take out -DGENERATOR_FILE.\n\t (CONFIG_H, TCONFIG_H, TM_P_H): Update.\n\t (GEN, STAGESTUFF): Add new files.\n\t (insn-constants.h, s-constants, tm-preds.h, s-preds,\n\t genconstants, genpreds, genconstants.o, genpreds.o): New rules.\n\t (hashtab.o, safe-ctype.o): Add -DGENERATOR_FILE.\n\t * mkconfig.sh: Include tm-preds.h in tm_p.h; insn-constants.h\n\t as well as insn-codes.h and insn-flags.h in config.h; and no\n\t extra headers in tconfig.h and hconfig.h.\n\n\t * gencodes.c: Eliminate code to generate predicate declarations\n\t or #defines for md-file constants.\n\t * genconstants.c, genpreds.c: New files.\n\n\t * i386.md: Re-order guard expressions such that TARGET_64BIT\n\t comes first, when this permits better optimization.  Add\n\t TARGET_64BIT to more x86-64 patterns.  Add comment explaining\n\t why this is desirable.\n\nFrom-SVN: r44743", "tree": {"sha": "c707f6fbe6eee894928f18532faad363c22b3b19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c707f6fbe6eee894928f18532faad363c22b3b19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b0c37d730cd2bda3fa69befcb77e1ae11705219", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b0c37d730cd2bda3fa69befcb77e1ae11705219", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b0c37d730cd2bda3fa69befcb77e1ae11705219", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b0c37d730cd2bda3fa69befcb77e1ae11705219/comments", "author": null, "committer": null, "parents": [{"sha": "a734f2a306418b3d017f8f42ff11296b5c857652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a734f2a306418b3d017f8f42ff11296b5c857652", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a734f2a306418b3d017f8f42ff11296b5c857652"}], "stats": {"total": 582, "additions": 381, "deletions": 201}, "files": [{"sha": "ec34ae2e195ae87b56dbeeab2952aeeb4abea69b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b0c37d730cd2bda3fa69befcb77e1ae11705219/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b0c37d730cd2bda3fa69befcb77e1ae11705219/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b0c37d730cd2bda3fa69befcb77e1ae11705219", "patch": "@@ -1,3 +1,24 @@\n+2001-08-09  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t * Makefile.in (HOST_CFLAGS): Take out -DGENERATOR_FILE.\n+\t (CONFIG_H, TCONFIG_H, TM_P_H): Update.\n+\t (GEN, STAGESTUFF): Add new files.\n+\t (insn-constants.h, s-constants, tm-preds.h, s-preds,\n+\t genconstants, genpreds, genconstants.o, genpreds.o): New rules.\n+\t (hashtab.o, safe-ctype.o): Add -DGENERATOR_FILE.\n+\t * mkconfig.sh: Include tm-preds.h in tm_p.h; insn-constants.h\n+\t as well as insn-codes.h and insn-flags.h in config.h; and no\n+\t extra headers in tconfig.h and hconfig.h.\n+\n+\t * gencodes.c: Eliminate code to generate predicate declarations\n+\t or #defines for md-file constants.\n+\t * genconstants.c, genpreds.c: New files.\n+\n+\t * i386.md: Re-order guard expressions such that TARGET_64BIT\n+\t comes first, when this permits better optimization.  Add\n+\t TARGET_64BIT to more x86-64 patterns.  Add comment explaining\n+\t why this is desirable.\n+\n 2001-08-09  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/ia64/fde-glibc.c: Require glibc 2.2.4+ headers.\n@@ -19,8 +40,8 @@ Thu Aug  9 11:30:20 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2001-08-09  Graham Stott  <grahams@redhat.com>\n \n-\t* predict.c (estimate_probability): Replace magic numbers with \n-\tappropriate enumeration. \t\n+\t* predict.c (estimate_probability): Replace magic numbers with\n+\tappropriate enumeration.\n \n 2001-08-09  Graham Stott  <grahams@redhat.com>\n \n@@ -30,8 +51,8 @@ Thu Aug  9 11:30:20 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2001-08-09  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/mips/mips.c\t(mips_legitimate_address_p): Check for\n-        CONST_INT in last patch.\t\n+\t* config/mips/mips.c\t(mips_legitimate_address_p): Check for\n+\tCONST_INT in last patch.\n \n 2001-08-08  Anthony Green  <green@redhat.com>\n \n@@ -74,10 +95,10 @@ Thu Aug  9 11:30:20 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2001-08-08  Jan van Male <jan.vanmale@fenk.wau.nl>\n \n-        * emit-rtl.c (adjust_address, adjust_address_nv): Cast offset to\n+\t* emit-rtl.c (adjust_address, adjust_address_nv): Cast offset to\n \tunsigned HOST_WIDE_INT to avoid warning.\n-        * final.c (final): Cast INSN_UID to unsigned to avoid warning.\n-        * flow.c (set_block_for_new_insns): Likewise.\n+\t* final.c (final): Cast INSN_UID to unsigned to avoid warning.\n+\t* flow.c (set_block_for_new_insns): Likewise.\n \n Wed Aug  8 21:08:14 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n@@ -270,8 +291,8 @@ Tue Aug  7 22:18:06 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n 2001-08-07  Daniel Jacobowitz  <drow@mvista.com>\n \n-        * config.gcc: Quote target_cpu_default2 correctly for\n-        powerpc*-*-* targets.\n+\t* config.gcc: Quote target_cpu_default2 correctly for\n+\tpowerpc*-*-* targets.\n \n 2001-08-07  Neil Booth  <neil@daikokuya.demon.co.uk>\n "}, {"sha": "bfa3a84dd27c32b85fc2731146caf385c968ed48", "filename": "gcc/Makefile.in", "status": "modified", "additions": 45, "deletions": 14, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b0c37d730cd2bda3fa69befcb77e1ae11705219/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b0c37d730cd2bda3fa69befcb77e1ae11705219/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=1b0c37d730cd2bda3fa69befcb77e1ae11705219", "patch": "@@ -482,7 +482,7 @@ HOST_PREFIX_1=loser-\n HOST_CC=$(CC)\n # If you change any of the following variables, check whether a\n # similar change is needed in build-make.\n-HOST_CFLAGS=$(ALL_CFLAGS) -DGENERATOR_FILE\n+HOST_CFLAGS=$(ALL_CFLAGS)\n HOST_LDFLAGS=$(LDFLAGS)\n HOST_CPPFLAGS=$(ALL_CPPFLAGS)\n HOST_OBSTACK=$(OBSTACK)\n@@ -550,14 +550,14 @@ all: all.indirect\n \n # GCONFIG_H lists the config files that the generator files depend on, while\n # CONFIG_H lists the the ones ordinary gcc files depend on, which includes\n-# a file generated by gencodes.\n+# several files generated by those generators.\n GCONFIG_H = config.h $(host_xm_file_list)\n HCONFIG_H = hconfig.h $(build_xm_file_list)\n-CONFIG_H = $(GCONFIG_H) insn-codes.h insn-flags.h\n-TCONFIG_H = tconfig.h $(xm_file_list) insn-codes.h\n+CONFIG_H = $(GCONFIG_H) insn-constants.h insn-codes.h insn-flags.h\n+TCONFIG_H = tconfig.h $(xm_file_list)\n TARGET_H = target.h\n TARGET_DEF_H = target-def.h\n-TM_P_H = tm_p.h $(tm_p_file_list) insn-codes.h\n+TM_P_H = tm_p.h $(tm_p_file_list) tm-preds.h\n \n MACHMODE_H = machmode.h machmode.def\n RTL_BASE_H = rtl.h rtl.def $(MACHMODE_H)\n@@ -762,20 +762,22 @@ BACKEND = main.o libbackend.a\n GEN= genemit$(build_exeext) genoutput$(build_exeext) genrecog$(build_exeext) \\\n  genextract$(build_exeext) genflags$(build_exeext) gencodes$(build_exeext)   \\\n  genconfig$(build_exeext) genpeep$(build_exeext) gengenrtl$(build_exeext)    \\\n- gencheck$(build_exeext)\n+ gencheck$(build_exeext) genpreds$(build_exeext) genconstants$(build_exeext)\n \n # Files to be copied away after each stage in building.\n STAGESTUFF = *$(objext) insn-flags.h insn-config.h insn-codes.h \\\n  insn-output.c insn-recog.c insn-emit.c insn-extract.c insn-peep.c \\\n- insn-attr.h insn-attrtab.c insn-opinit.c tree-check.h \\\n+ insn-attr.h insn-attrtab.c insn-opinit.c insn-constants.h tm-preds.h \\\n+ tree-check.h \\\n  s-flags s-config s-codes s-mlib s-under s-genrtl \\\n  s-output s-recog s-emit s-extract s-peep s-check \\\n- s-attr s-attrtab s-opinit s-crt0 \\\n+ s-attr s-attrtab s-opinit s-preds s-constants s-crt0 \\\n  genemit$(build_exeext) genoutput$(build_exeext) genrecog$(build_exeext) \\\n  genextract$(build_exeext) genflags$(build_exeext) gencodes$(build_exeext) \\\n  genconfig$(build_exeext) genpeep$(build_exeext) genattrtab$(build_exeext) \\\n  genattr$(build_exeext) genopinit$(build_exeext) gengenrtl$(build_exeext) \\\n- gencheck$(build_exeext) genrtl.c genrtl.h \\\n+ gencheck$(build_exeext) genpreds$(build_exeext) genconstants$(build_exeext) \\\n+ genrtl.c genrtl.h \\\n  xgcc$(exeext) cpp$(exeext) cc1$(exeext) cpp0$(exeext) $(EXTRA_PASSES) \\\n  $(EXTRA_PARTS) $(EXTRA_PROGRAMS) gcc-cross$(exeext) cc1obj$(exeext) \\\n  enquire$(exeext) protoize$(exeext) unprotoize$(exeext) \\\n@@ -1591,7 +1593,7 @@ halfpic.o: halfpic.c $(CONFIG_H) $(RTL_H) $(TREE_H) $(SYSTEM_H)\n # Generate header and source files from the machine description,\n # and compile them.\n \n-.PRECIOUS: insn-config.h insn-flags.h insn-codes.h \\\n+.PRECIOUS: insn-config.h insn-flags.h insn-codes.h insn-constants.h \\\n   insn-emit.c insn-recog.c insn-extract.c insn-output.c insn-peep.c \\\n   insn-attr.h insn-attrtab.c\n \n@@ -1632,6 +1634,12 @@ s-codes : $(md_file) gencodes$(build_exeext) $(srcdir)/move-if-change\n \t$(SHELL) $(srcdir)/move-if-change tmp-codes.h insn-codes.h\n \t$(STAMP) s-codes\n \n+insn-constants.h: s-constants ; @true\n+s-constants : $(md_file) genconstants$(build_exeext) $(srcdir)/move-if-change\n+\t./genconstants$(build_exeext) $(md_file) > tmp-constants.h\n+\t$(SHELL) $(srcdir)/move-if-change tmp-constants.h insn-constants.h\n+\t$(STAMP) s-constants\n+\n insn-emit.o : insn-emit.c $(CONFIG_H) $(RTL_H) $(EXPR_H) real.h output.h \\\n   insn-config.h $(SYSTEM_H) reload.h $(RECOG_H) toplev.h \\\n   function.h flags.h hard-reg-set.h resource.h $(TM_P_H)\n@@ -1718,11 +1726,19 @@ genrtl.c genrtl.h : s-genrtl\n \t@true\t# force gnu make to recheck modification times.\n \n s-genrtl: gengenrtl$(build_exeext) $(srcdir)/move-if-change $(RTL_BASE_H)\n-\t./gengenrtl$(build_exeext) -h >tmp-genrtl.h\n+\t./gengenrtl$(build_exeext) -h > tmp-genrtl.h\n \t$(SHELL) $(srcdir)/move-if-change tmp-genrtl.h genrtl.h\n-\t./gengenrtl$(build_exeext) >tmp-genrtl.c\n+\t./gengenrtl$(build_exeext) > tmp-genrtl.c\n \t$(SHELL) $(srcdir)/move-if-change tmp-genrtl.c genrtl.c\n \t$(STAMP) s-genrtl\n+\n+tm-preds.h: s-preds; @true\n+\n+s-preds: genpreds$(build_exeext) $(srcdir)/move-if-change\n+\t./genpreds$(build_exeext) > tmp-preds.h\n+\t$(SHELL) $(srcdir)/move-if-change tmp-preds.h tm-preds.h\n+\t$(STAMP) s-preds\n+\n #\f\n # Compile the programs that generate insn-* from the machine description.\n # They are compiled with $(HOST_CC), and associated libraries,\n@@ -1744,12 +1760,12 @@ gensupport.o: gensupport.c $(RTL_H) $(OBSTACK_H) $(SYSTEM_H) errors.h gensupport\n hashtab.o: $(srcdir)/../libiberty/hashtab.c $(GCONFIG_H)\n \trm -f hashtab.c\n \t$(LN_S) $(srcdir)/../libiberty/hashtab.c hashtab.c\n-\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) hashtab.c\n+\t$(HOST_CC) -c $(HOST_CFLAGS) -DGENERATOR_FILE $(HOST_CPPFLAGS) $(INCLUDES) hashtab.c\n \n safe-ctype.o: $(srcdir)/../libiberty/safe-ctype.c $(GCONFIG_H)\n \trm -f safe-ctype.c\n \t$(LN_S) $(srcdir)/../libiberty/safe-ctype.c safe-ctype.c\n-\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) safe-ctype.c\n+\t$(HOST_CC) -c $(HOST_CFLAGS) -DGENERATOR_FILE $(HOST_CPPFLAGS) $(INCLUDES) safe-ctype.c\n \n genconfig$(build_exeext) : genconfig.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n@@ -1775,6 +1791,13 @@ gencodes.o : gencodes.c $(RTL_H) $(HCONFIG_H) \\\n   $(SYSTEM_H) errors.h gensupport.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/gencodes.c\n \n+genconstants$(build_exeext) : genconstants.o $(HOST_RTL) $(HOST_ERRORS) $(HOST_LIBDEPS)\n+\t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n+\t genconstants.o $(HOST_RTL) $(HOST_ERRORS) $(HOST_LIBS)\n+\n+genconstants.o : genconstants.c $(RTL_H) $(HCONFIG_H) $(SYSTEM_H) errors.h\n+\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genconstants.c\n+\n genemit$(build_exeext) : genemit.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n \t genemit.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBS)\n@@ -1842,6 +1865,14 @@ gengenrtl$(build_exeext) : gengenrtl.o $(HOST_LIBDEPS)\n \n gengenrtl.o : gengenrtl.c $(RTL_BASE_H) $(HCONFIG_H) $(SYSTEM_H) real.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/gengenrtl.c\n+\n+genpreds$(build_exeext) : genpreds.o $(HOST_LIBDEPS)\n+\t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n+\t genpreds.o $(HOST_LIBS)\n+\n+genpreds.o : genpreds.c $(RTL_BASE_H) $(HCONFIG_H) $(SYSTEM_H)\n+\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genpreds.c\n+\n #\f\n # Compile the libraries to be used by gen*.\n # If we are not cross-building, gen* use the same .o's that cc1 will use,"}, {"sha": "75fb5027b28ba1b01e5fc13108f83733e3458631", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 130, "deletions": 126, "changes": 256, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b0c37d730cd2bda3fa69befcb77e1ae11705219/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b0c37d730cd2bda3fa69befcb77e1ae11705219/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1b0c37d730cd2bda3fa69befcb77e1ae11705219", "patch": "@@ -96,6 +96,11 @@\n ;; Insns whose names begin with \"x86_\" are emitted by gen_FOO calls\n ;; from i386.c.\n \n+;; In C guard expressions, put expressions which may be compile-time\n+;; constants first.  This allows for better optimization.  For\n+;; example, write \"TARGET_64BIT && reload_completed\", not\n+;; \"reload_completed && TARGET_64BIT\".\n+\n \f\n ;; Processor type.  This attribute must exactly match the processor_type\n ;; enumeration in i386.h.\n@@ -1074,7 +1079,7 @@\n \t(compare (minus:DI (match_operand:DI 0 \"nonimmediate_operand\" \"rm,r\")\n \t\t\t   (match_operand:DI 1 \"x86_64_general_operand\" \"re,mr\"))\n \t\t (const_int 0)))]\n-  \"ix86_match_ccmode (insn, CCGOCmode)\"\n+  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\"\n   \"cmp{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"icmp\")\n    (set_attr \"mode\" \"DI\")])\n@@ -1083,7 +1088,7 @@\n   [(set (reg:CC 17)\n \t(compare:CC (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n \t\t    (match_operand:DI 1 \"general_operand\" \"\")))]\n-  \"\"\n+  \"TARGET_64BIT\"\n   \"\")\n \n (define_insn \"cmpdi_1_insn_rex64\"\n@@ -1309,7 +1314,7 @@\n   [(set (reg:CC 17)\n \t(compare:CC (match_operand:XF 0 \"cmp_fp_expander_operand\" \"\")\n \t\t    (match_operand:XF 1 \"cmp_fp_expander_operand\" \"\")))]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n {\n   ix86_compare_op0 = operands[0];\n   ix86_compare_op1 = operands[1];\n@@ -1434,7 +1439,7 @@\n \t(compare:CCFP\n \t  (match_operand:XF 0 \"register_operand\" \"f\")\n \t  (match_operand:XF 1 \"register_operand\" \"f\")))]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n   \"* return output_fp_compare (insn, operands, 0, 0);\"\n   [(set_attr \"type\" \"fcmp\")\n    (set_attr \"mode\" \"XF\")])\n@@ -1455,7 +1460,7 @@\n \t  [(compare:CCFP\n \t     (match_operand:XF 1 \"register_operand\" \"f\")\n \t     (match_operand:XF 2 \"register_operand\" \"f\"))] 9))]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n   \"* return output_fp_compare (insn, operands, 2, 0);\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"mode\" \"XF\")])\n@@ -2425,8 +2430,8 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(match_operand:DI 1 \"const0_operand\" \"i\"))\n    (clobber (reg:CC 17))]\n-  \"reload_completed && (!TARGET_USE_MOV0 || optimize_size)\n-   && TARGET_64BIT\"\n+  \"TARGET_64BIT && (!TARGET_USE_MOV0 || optimize_size)\n+   && reload_completed\"\n   \"xor{l}\\t{%k0, %k0|%k0, %k0}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"SI\")\n@@ -2436,10 +2441,10 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(match_operand:DI 1 \"const_int_operand\" \"i\"))\n    (clobber (reg:CC 17))]\n-  \"reload_completed && GET_CODE (operands[1]) == CONST_INT\n-   && TARGET_64BIT\n-   && INTVAL (operands[1]) == -1\n-   && (TARGET_PENTIUM || optimize_size)\"\n+  \"TARGET_64BIT && (TARGET_PENTIUM || optimize_size)\n+   && reload_completed\n+   && GET_CODE (operands[1]) == CONST_INT\n+   && INTVAL (operands[1]) == -1\"\n {\n   operands[1] = constm1_rtx;\n   return \"or{q}\\t{%1, %0|%0, %1}\";\n@@ -2485,8 +2490,8 @@\n (define_insn \"*movdi_1_rex64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r,mr,!mr,!m*y,!*y,!*Y,!m,!*Y\")\n \t(match_operand:DI 1 \"general_operand\" \"Z,rem,i,re,n,*y,m,*Y,*Y,*m\"))]\n-  \"(GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n-   && TARGET_64BIT\"\n+  \"TARGET_64BIT\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -3041,7 +3046,7 @@\n (define_insn \"*pushxf_nointeger\"\n   [(set (match_operand:XF 0 \"push_operand\" \"=X,X,X\")\n \t(match_operand:XF 1 \"general_no_elim_operand\" \"f,Fo,*r\"))]\n-  \"optimize_size && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && optimize_size\"\n {\n   switch (which_alternative)\n     {\n@@ -3097,7 +3102,7 @@\n (define_insn \"*pushxf_integer\"\n   [(set (match_operand:XF 0 \"push_operand\" \"=<,<\")\n \t(match_operand:XF 1 \"general_no_elim_operand\" \"f#r,ro#f\"))]\n-  \"!optimize_size && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && !optimize_size\"\n {\n   switch (which_alternative)\n     {\n@@ -3190,9 +3195,9 @@\n (define_insn \"*movxf_nointeger\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m,f,*r,o\")\n \t(match_operand:XF 1 \"general_operand\" \"fm,f,G,*roF,F*r\"))]\n-  \"(GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n-   && !TARGET_64BIT\n+  \"!TARGET_64BIT\n    && optimize_size\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n    && (reload_in_progress || reload_completed\n        || GET_CODE (operands[1]) != CONST_DOUBLE\n        || memory_operand (operands[0], XFmode))\" \n@@ -3283,9 +3288,9 @@\n (define_insn \"*movxf_integer\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f#r,m,f#r,r#f,o\")\n \t(match_operand:XF 1 \"general_operand\" \"fm#r,f#r,G,roF#f,Fr#f\"))]\n-  \"(GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n-   && !TARGET_64BIT\n+  \"!TARGET_64BIT\n    && !optimize_size\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n    && (reload_in_progress || reload_completed\n        || GET_CODE (operands[1]) != CONST_DOUBLE\n        || memory_operand (operands[0], XFmode))\" \n@@ -3654,24 +3659,24 @@\n (define_split\n   [(set (match_operand:DI 0 \"memory_operand\" \"\")\n      (zero_extend:DI (match_dup 0)))]\n-  \"\"\n+  \"TARGET_64BIT\"\n   [(set (match_dup 4) (const_int 0))]\n   \"split_di (&operands[0], 1, &operands[3], &operands[4]);\")\n \n (define_split \n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(zero_extend:DI (match_operand:SI 1 \"register_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"reload_completed && true_regnum (operands[0]) == true_regnum (operands[1])\n-   && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && reload_completed\n+   && true_regnum (operands[0]) == true_regnum (operands[1])\"\n   [(set (match_dup 4) (const_int 0))]\n   \"split_di (&operands[0], 1, &operands[3], &operands[4]);\")\n \n (define_split \n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n \t(zero_extend:DI (match_operand:SI 1 \"general_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"reload_completed && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && reload_completed\"\n   [(set (match_dup 3) (match_dup 1))\n    (set (match_dup 4) (const_int 0))]\n   \"split_di (&operands[0], 1, &operands[3], &operands[4]);\")\n@@ -3933,14 +3938,14 @@\n (define_split\n   [(set (match_operand:DF 0 \"push_operand\" \"\")\n \t(float_extend:DF (match_operand:SF 1 \"register_operand\" \"\")))]\n-  \"FP_REGNO_P (REGNO (operands[1])) && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && FP_REGNO_P (REGNO (operands[1]))\"\n   [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -8)))\n    (set (mem:DF (reg:SI 7)) (float_extend:DF (match_dup 1)))])\n \n (define_split\n   [(set (match_operand:DF 0 \"push_operand\" \"\")\n \t(float_extend:DF (match_operand:SF 1 \"register_operand\" \"\")))]\n-  \"FP_REGNO_P (REGNO (operands[1])) && TARGET_64BIT\"\n+  \"TARGET_64BIT && FP_REGNO_P (REGNO (operands[1]))\"\n   [(set (reg:DI 7) (plus:DI (reg:DI 7) (const_int -8)))\n    (set (mem:DF (reg:DI 7)) (float_extend:DF (match_dup 1)))])\n \n@@ -3953,7 +3958,7 @@\n (define_split\n   [(set (match_operand:XF 0 \"push_operand\" \"\")\n \t(float_extend:XF (match_operand:SF 1 \"register_operand\" \"\")))]\n-  \"FP_REGNO_P (REGNO (operands[1])) && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && FP_REGNO_P (REGNO (operands[1]))\"\n   [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -12)))\n    (set (mem:XF (reg:SI 7)) (float_extend:XF (match_dup 1)))])\n \n@@ -3966,14 +3971,14 @@\n (define_split\n   [(set (match_operand:TF 0 \"push_operand\" \"\")\n \t(float_extend:TF (match_operand:SF 1 \"register_operand\" \"\")))]\n-  \"FP_REGNO_P (REGNO (operands[1])) && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && FP_REGNO_P (REGNO (operands[1]))\"\n   [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -16)))\n    (set (mem:TF (reg:SI 7)) (float_extend:TF (match_dup 1)))])\n \n (define_split\n   [(set (match_operand:TF 0 \"push_operand\" \"\")\n \t(float_extend:TF (match_operand:SF 1 \"register_operand\" \"\")))]\n-  \"FP_REGNO_P (REGNO (operands[1])) && TARGET_64BIT\"\n+  \"TARGET_64BIT && FP_REGNO_P (REGNO (operands[1]))\"\n   [(set (reg:DI 7) (plus:DI (reg:DI 7) (const_int -16)))\n    (set (mem:DF (reg:DI 7)) (float_extend:TF (match_dup 1)))])\n \n@@ -3986,7 +3991,7 @@\n (define_split\n   [(set (match_operand:XF 0 \"push_operand\" \"\")\n \t(float_extend:XF (match_operand:DF 1 \"register_operand\" \"\")))]\n-  \"FP_REGNO_P (REGNO (operands[1])) && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && FP_REGNO_P (REGNO (operands[1]))\"\n   [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -12)))\n    (set (mem:DF (reg:SI 7)) (float_extend:XF (match_dup 1)))])\n \n@@ -3999,14 +4004,14 @@\n (define_split\n   [(set (match_operand:TF 0 \"push_operand\" \"\")\n \t(float_extend:TF (match_operand:DF 1 \"register_operand\" \"\")))]\n-  \"FP_REGNO_P (REGNO (operands[1])) && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && FP_REGNO_P (REGNO (operands[1]))\"\n   [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -16)))\n    (set (mem:TF (reg:SI 7)) (float_extend:XF (match_dup 1)))])\n \n (define_split\n   [(set (match_operand:TF 0 \"push_operand\" \"\")\n \t(float_extend:TF (match_operand:DF 1 \"register_operand\" \"\")))]\n-  \"FP_REGNO_P (REGNO (operands[1])) && TARGET_64BIT\"\n+  \"TARGET_64BIT && FP_REGNO_P (REGNO (operands[1]))\"\n   [(set (reg:DI 7) (plus:DI (reg:DI 7) (const_int -16)))\n    (set (mem:TF (reg:DI 7)) (float_extend:TF (match_dup 1)))])\n \n@@ -4064,7 +4069,7 @@\n (define_expand \"extendsfxf2\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n         (float_extend:XF (match_operand:SF 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n {\n   if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n     operands[1] = force_reg (SFmode, operands[1]);\n@@ -4073,7 +4078,7 @@\n (define_insn \"*extendsfxf2_1\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m\")\n         (float_extend:XF (match_operand:SF 1 \"nonimmediate_operand\" \"fm,f\")))]\n-  \"TARGET_80387 && !TARGET_64BIT\n+  \"!TARGET_64BIT && TARGET_80387\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n {\n   switch (which_alternative)\n@@ -4146,7 +4151,7 @@\n (define_expand \"extenddfxf2\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n         (float_extend:XF (match_operand:DF 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n {\n   if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n     operands[1] = force_reg (DFmode, operands[1]);\n@@ -4155,7 +4160,7 @@\n (define_insn \"*extenddfxf2_1\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m\")\n         (float_extend:XF (match_operand:DF 1 \"nonimmediate_operand\" \"fm,f\")))]\n-  \"TARGET_80387 && !TARGET_64BIT\n+  \"!TARGET_64BIT && TARGET_80387\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n {\n   switch (which_alternative)\n@@ -4372,15 +4377,15 @@\n \t\t   (float_truncate:SF\n \t\t    (match_operand:XF 1 \"register_operand\" \"\")))\n \t      (clobber (match_dup 2))])]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n   \"operands[2] = assign_386_stack_local (SFmode, 0);\")\n \n (define_insn \"*truncxfsf2_1\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=m,?f#rx,?r#fx,?x#rf\")\n \t(float_truncate:SF\n \t (match_operand:XF 1 \"register_operand\" \"f,f,f,f\")))\n    (clobber (match_operand:SF 2 \"memory_operand\" \"=X,m,m,m\"))]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n {\n   switch (which_alternative)\n     {\n@@ -4400,7 +4405,7 @@\n   [(set (match_operand:SF 0 \"memory_operand\" \"=m\")\n \t(float_truncate:SF\n \t (match_operand:XF 1 \"register_operand\" \"f\")))]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n {\n   if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n     return \"fstp%z0\\t%y0\";\n@@ -4497,15 +4502,15 @@\n \t\t   (float_truncate:DF\n \t\t    (match_operand:XF 1 \"register_operand\" \"\")))\n \t      (clobber (match_dup 2))])]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n   \"operands[2] = assign_386_stack_local (DFmode, 0);\")\n \n (define_insn \"*truncxfdf2_1\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=m,?f#rY,?r#fY,?Y#rf\")\n \t(float_truncate:DF\n \t (match_operand:XF 1 \"register_operand\" \"f,f,f,f\")))\n    (clobber (match_operand:DF 2 \"memory_operand\" \"=X,m,m,m\"))]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n {\n   switch (which_alternative)\n     {\n@@ -4526,7 +4531,7 @@\n   [(set (match_operand:DF 0 \"memory_operand\" \"=m\")\n \t(float_truncate:DF\n \t  (match_operand:XF 1 \"register_operand\" \"f\")))]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n {\n   if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n     return \"fstp%z0\\t%y0\";\n@@ -4626,7 +4631,7 @@\n (define_expand \"fix_truncxfdi2\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n         (fix:DI (match_operand:XF 1 \"register_operand\" \"\")))]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n   \"\")\n \n (define_expand \"fix_trunctfdi2\"\n@@ -4640,7 +4645,7 @@\n         (fix:DI (match_operand:DF 1 \"register_operand\" \"\")))]\n   \"TARGET_80387 || (TARGET_SSE2 && TARGET_64BIT)\"\n {\n-  if (TARGET_SSE2 && TARGET_64BIT)\n+  if (TARGET_64BIT && TARGET_SSE2)\n    {\n      rtx out = REG_P (operands[0]) ? operands[0] : gen_reg_rtx (DImode);\n      emit_insn (gen_fix_truncdfdi_sse (out, operands[1]));\n@@ -4749,14 +4754,14 @@\n (define_insn \"fix_truncsfdi_sse\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(fix:DI (match_operand:SF 1 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE && TARGET_64BIT\"\n+  \"TARGET_64BIT && TARGET_SSE\"\n   \"cvttss2si{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sse\")])\n \n (define_insn \"fix_truncdfdi_sse\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(fix:DI (match_operand:DF 1 \"nonimmediate_operand\" \"Ym\")))]\n-  \"TARGET_SSE2 && TARGET_64BIT\"\n+  \"TARGET_64BIT && TARGET_SSE2\"\n   \"cvttsd2si{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sse\")])\n \n@@ -4765,7 +4770,7 @@\n (define_expand \"fix_truncxfsi2\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t(fix:SI (match_operand:XF 1 \"register_operand\" \"\")))]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n   \"\")\n \n (define_expand \"fix_trunctfsi2\"\n@@ -4898,7 +4903,7 @@\n (define_expand \"fix_truncxfhi2\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n         (fix:HI (match_operand:XF 1 \"register_operand\" \"\")))]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n   \"\")\n \n (define_expand \"fix_trunctfhi2\"\n@@ -5062,7 +5067,7 @@\n (define_expand \"floatdisf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n \t(float:SF (match_operand:DI 1 \"nonimmediate_operand\" \"\")))]\n-  \"(TARGET_SSE && TARGET_64BIT) || TARGET_80387\"\n+  \"(TARGET_64BIT && TARGET_SSE) || TARGET_80387\"\n   \"\")\n \n (define_insn \"*floatdisf2_i387_only\"\n@@ -5079,7 +5084,7 @@\n (define_insn \"*floatdisf2_i387\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f,?f,x\")\n \t(float:SF (match_operand:DI 1 \"nonimmediate_operand\" \"m,r,mr\")))]\n-  \"TARGET_80387 && TARGET_64BIT && (!TARGET_SSE || TARGET_MIX_SSE_I387)\"\n+  \"TARGET_64BIT && TARGET_80387 && (!TARGET_SSE || TARGET_MIX_SSE_I387)\"\n   \"@\n    fild%z1\\t%1\n    #\n@@ -5091,7 +5096,7 @@\n (define_insn \"*floatdisf2_sse\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n \t(float:SF (match_operand:DI 1 \"nonimmediate_operand\" \"mr\")))]\n-  \"TARGET_SSE && TARGET_64BIT\"\n+  \"TARGET_64BIT && TARGET_SSE\"\n   \"cvtsi2ss{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"mode\" \"SF\")\n@@ -5138,7 +5143,7 @@\n (define_expand \"floatdidf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(float:DF (match_operand:DI 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_80387 || (TARGET_SSE2 && TARGET_64BIT)\"\n+  \"(TARGET_64BIT && TARGET_SSE2) || TARGET_80387\"\n   \"\")\n \n (define_insn \"*floatdidf2_i387_only\"\n@@ -5155,7 +5160,7 @@\n (define_insn \"*floatdidf2_i387\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,?f,Y\")\n \t(float:DF (match_operand:DI 1 \"nonimmediate_operand\" \"m,r,mr\")))]\n-  \"TARGET_80387 && TARGET_64BIT && (!TARGET_SSE2 || TARGET_MIX_SSE_I387)\"\n+  \"TARGET_64BIT && TARGET_80387 && (!TARGET_SSE2 || TARGET_MIX_SSE_I387)\"\n   \"@\n    fild%z1\\t%1\n    #\n@@ -5176,7 +5181,7 @@\n (define_insn \"floathixf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(float:XF (match_operand:HI 1 \"nonimmediate_operand\" \"m,r\")))]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n   \"@\n    fild%z1\\t%1\n    #\"\n@@ -5198,7 +5203,7 @@\n (define_insn \"floatsixf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(float:XF (match_operand:SI 1 \"nonimmediate_operand\" \"m,r\")))]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n   \"@\n    fild%z1\\t%1\n    #\"\n@@ -5220,7 +5225,7 @@\n (define_insn \"floatdixf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(float:XF (match_operand:DI 1 \"nonimmediate_operand\" \"m,r\")))]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n   \"@\n    fild%z1\\t%1\n    #\"\n@@ -5282,7 +5287,7 @@\n \t(plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"\")\n \t\t (match_operand:DI 2 \"general_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"reload_completed && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && reload_completed\"\n   [(parallel [(set (reg:CC 17) (unspec:CC [(match_dup 1) (match_dup 2)] 12))\n \t      (set (match_dup 0) (plus:SI (match_dup 1) (match_dup 2)))])\n    (parallel [(set (match_dup 3)\n@@ -5300,7 +5305,7 @@\n \t\t\t    (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0\"))\n \t\t   (match_operand:DI 2 \"x86_64_general_operand\" \"re,rm\")))\n    (clobber (reg:CC 17))]\n-  \"ix86_binary_operator_ok (PLUS, DImode, operands)\"\n+  \"TARGET_64BIT && ix86_binary_operator_ok (PLUS, DImode, operands)\"\n   \"adc{q}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"pent_pair\" \"pu\")\n@@ -5625,7 +5630,7 @@\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t (match_operand:DI 2 \"x86_64_nonmemory_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"reload_completed && TARGET_64BIT\n+  \"TARGET_64BIT && reload_completed\n    && true_regnum (operands[0]) != true_regnum (operands[1])\"\n   [(set (match_dup 0)\n \t(plus:DI (match_dup 1)\n@@ -6862,7 +6867,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n \t(plus:XF (match_operand:XF 1 \"register_operand\" \"\")\n \t\t (match_operand:XF 2 \"register_operand\" \"\")))]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n   \"\")\n \n (define_expand \"addtf3\"\n@@ -6911,7 +6916,7 @@\n \t(minus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"\")\n \t\t  (match_operand:DI 2 \"general_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"reload_completed && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && reload_completed\"\n   [(parallel [(set (reg:CC 17) (compare:CC (match_dup 1) (match_dup 2)))\n \t      (set (match_dup 0) (minus:SI (match_dup 1) (match_dup 2)))])\n    (parallel [(set (match_dup 3)\n@@ -6929,7 +6934,7 @@\n \t    (plus:DI (ltu:DI (reg:CC 17) (const_int 0))\n \t       (match_operand:DI 2 \"x86_64_general_operand\" \"re,rm\"))))\n    (clobber (reg:CC 17))]\n-  \"ix86_binary_operator_ok (MINUS, DImode, operands)\"\n+  \"TARGET_64BIT && ix86_binary_operator_ok (MINUS, DImode, operands)\"\n   \"sbb{q}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"pent_pair\" \"pu\")\n@@ -7179,7 +7184,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n \t(minus:XF (match_operand:XF 1 \"register_operand\" \"\")\n \t\t  (match_operand:XF 2 \"register_operand\" \"\")))]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n   \"\")\n \n (define_expand \"subtf3\"\n@@ -7218,8 +7223,8 @@\n \t(mult:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%rm,0,0\")\n \t\t (match_operand:DI 2 \"x86_64_general_operand\" \"K,e,mr\")))\n    (clobber (reg:CC 17))]\n-  \"(GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\n-   && TARGET_64BIT\"\n+  \"TARGET_64BIT\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"@\n    imul{q}\\t{%2, %1, %0|%0, %1, %2}\n    imul{q}\\t{%2, %1, %0|%0, %1, %2}\n@@ -7505,7 +7510,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n \t(mult:XF (match_operand:XF 1 \"register_operand\" \"\")\n \t\t (match_operand:XF 2 \"register_operand\" \"\")))]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n   \"\")\n \n (define_expand \"multf3\"\n@@ -7559,7 +7564,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n \t(div:XF (match_operand:XF 1 \"register_operand\" \"\")\n \t\t(match_operand:XF 2 \"register_operand\" \"\")))]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n   \"\")\n \n (define_expand \"divtf3\"\n@@ -7801,7 +7806,7 @@\n    (set (match_operand:DI 3 \"register_operand\" \"\")\n \t(umod:DI (match_dup 1) (match_dup 2)))\n    (clobber (reg:CC 17))]\n-  \"reload_completed && TARGET_64BIT\"\n+  \"TARGET_64BIT && reload_completed\"\n   [(set (match_dup 3) (const_int 0))\n    (parallel [(set (match_dup 0)\n \t\t   (udiv:DI (match_dup 1) (match_dup 2)))\n@@ -8090,8 +8095,8 @@\n \t\t   (match_operand:DI 1 \"const_int_operand\" \"\")\n \t\t   (match_operand:DI 2 \"const_int_operand\" \"\"))\n \t\t (const_int 0)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n-   && TARGET_64BIT\n+  \"TARGET_64BIT\n+   && ix86_match_ccmode (insn, CCNOmode)\n    && (GET_MODE (operands[0]) == SImode\n        || GET_MODE (operands[0]) == DImode\n        || GET_MODE (operands[0]) == HImode\n@@ -9153,8 +9158,7 @@\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n \t(neg:DI (match_operand:DI 1 \"general_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"reload_completed\n-   && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && reload_completed\"\n   [(parallel\n     [(set (reg:CCZ 17)\n \t  (compare:CCZ (neg:SI (match_dup 2)) (const_int 0)))\n@@ -9497,7 +9501,7 @@\n \t(neg:DF (match_operand:DF 1 \"nonimmediate_operand\" \"0,Y#fr,0,0\")))\n    (use (match_operand:DF 2 \"nonmemory_operand\" \"Y,0,*g#Y,*g#Y\"))\n    (clobber (reg:CC 17))]\n-  \"TARGET_SSE2 && !TARGET_64BIT\n+  \"!TARGET_64BIT && TARGET_SSE2\n    && (reload_in_progress || reload_completed\n        || (register_operand (operands[0], VOIDmode)\n \t   && register_operand (operands[1], VOIDmode)))\"\n@@ -9508,7 +9512,7 @@\n \t(neg:DF (match_operand:DF 1 \"nonimmediate_operand\" \"0,Y#fr,0,0\")))\n    (use (match_operand:DF 2 \"general_operand\" \"Y,0,*g#Yr,*rm\"))\n    (clobber (reg:CC 17))]\n-  \"TARGET_SSE2 && TARGET_64BIT\n+  \"TARGET_64BIT && TARGET_SSE2\n    && (reload_in_progress || reload_completed\n        || (register_operand (operands[0], VOIDmode)\n \t   && register_operand (operands[1], VOIDmode)))\"\n@@ -9540,7 +9544,7 @@\n \t(neg:DF (match_operand:DF 1 \"register_operand\" \"\")))\n    (use (match_operand:DF 2 \"\" \"\"))\n    (clobber (reg:CC 17))]\n-  \"reload_completed && GENERAL_REG_P (operands[0]) && TARGET_64BIT\"\n+  \"TARGET_64BIT && reload_completed && GENERAL_REG_P (operands[0])\"\n   [(parallel [(set (match_dup 0)\n \t\t   (xor:DI (match_dup 1) (match_dup 2)))\n \t      (clobber (reg:CC 17))])]\n@@ -9574,7 +9578,7 @@\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f#r,rm#f\")\n \t(neg:DF (match_operand:DF 1 \"nonimmediate_operand\" \"0,0\")))\n    (clobber (reg:CC 17))]\n-  \"TARGET_80387 && !TARGET_64BIT\n+  \"!TARGET_64BIT && TARGET_80387\n    && ix86_unary_operator_ok (NEG, DFmode, operands)\"\n   \"#\")\n \n@@ -9586,7 +9590,7 @@\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,mf\")\n \t(neg:DF (match_operand:DF 1 \"nonimmediate_operand\" \"0,0\")))\n    (clobber (reg:CC 17))]\n-  \"TARGET_80387 && TARGET_64BIT\n+  \"TARGET_64BIT && TARGET_80387\n    && ix86_unary_operator_ok (NEG, DFmode, operands)\"\n   \"#\")\n \n@@ -9603,8 +9607,8 @@\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(neg:DF (match_operand:DF 1 \"register_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"TARGET_80387 && reload_completed && !FP_REGNO_P (REGNO (operands[0]))\n-   && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387 && reload_completed\n+   && !FP_REGNO_P (REGNO (operands[0]))\"\n   [(parallel [(set (match_dup 3) (xor:SI (match_dup 3) (match_dup 4)))\n \t      (clobber (reg:CC 17))])]\n   \"operands[4] = GEN_INT (trunc_int_for_mode (0x80000000, SImode));\n@@ -9614,7 +9618,7 @@\n   [(parallel [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n \t\t   (neg:XF (match_operand:XF 1 \"nonimmediate_operand\" \"\")))\n \t      (clobber (reg:CC 17))])]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n   \"ix86_expand_unary_operator (NEG, XFmode, operands); DONE;\")\n \n (define_expand \"negtf2\"\n@@ -9631,7 +9635,7 @@\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f#r,rm#f\")\n \t(neg:XF (match_operand:XF 1 \"nonimmediate_operand\" \"0,0\")))\n    (clobber (reg:CC 17))]\n-  \"TARGET_80387 && !TARGET_64BIT\n+  \"!TARGET_64BIT && TARGET_80387\n    && ix86_unary_operator_ok (NEG, XFmode, operands)\"\n   \"#\")\n \n@@ -9719,7 +9723,7 @@\n (define_insn \"*negxf2_1\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(neg:XF (match_operand:XF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_80387 && !TARGET_64BIT && reload_completed\"\n+  \"!TARGET_64BIT && TARGET_80387 && reload_completed\"\n   \"fchs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"XF\")\n@@ -9729,7 +9733,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(neg:XF (float_extend:XF\n \t\t  (match_operand:DF 1 \"register_operand\" \"0\"))))]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n   \"fchs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"XF\")\n@@ -9739,7 +9743,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(neg:XF (float_extend:XF\n \t\t  (match_operand:SF 1 \"register_operand\" \"0\"))))]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n   \"fchs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"XF\")\n@@ -9949,7 +9953,7 @@\n \t(abs:DF (match_operand:DF 1 \"nonimmediate_operand\" \"Y,0,0\")))\n    (use (match_operand:DF 2 \"nonmemory_operand\" \"*0#Y,*g#Y,*g#Y\"))\n    (clobber (reg:CC 17))]\n-  \"TARGET_SSE2 && !TARGET_64BIT\n+  \"!TARGET_64BIT && TARGET_SSE2\n    && (reload_in_progress || reload_completed\n        || (register_operand (operands[0], VOIDmode)\n \t   && register_operand (operands[1], VOIDmode)))\"\n@@ -9960,7 +9964,7 @@\n \t(abs:DF (match_operand:DF 1 \"nonimmediate_operand\" \"Y,0\")))\n    (use (match_operand:DF 2 \"nonmemory_operand\" \"*0#Y,*g#Y\"))\n    (clobber (reg:CC 17))]\n-  \"TARGET_SSE2 && TARGET_64BIT\n+  \"TARGET_64BIT && TARGET_SSE2\n    && (reload_in_progress || reload_completed\n        || (register_operand (operands[0], VOIDmode)\n \t   && register_operand (operands[1], VOIDmode)))\"\n@@ -10004,7 +10008,7 @@\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f#r,rm#f\")\n \t(abs:DF (match_operand:DF 1 \"nonimmediate_operand\" \"0,0\")))\n    (clobber (reg:CC 17))]\n-  \"TARGET_80387 && !TARGET_64BIT\n+  \"!TARGET_64BIT && TARGET_80387\n    && ix86_unary_operator_ok (ABS, DFmode, operands)\"\n   \"#\")\n \n@@ -10016,7 +10020,7 @@\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,mf\")\n \t(abs:DF (match_operand:DF 1 \"nonimmediate_operand\" \"0,0\")))\n    (clobber (reg:CC 17))]\n-  \"TARGET_80387 && TARGET_64BIT\n+  \"TARGET_64BIT && TARGET_80387\n    && ix86_unary_operator_ok (ABS, DFmode, operands)\"\n   \"#\")\n \n@@ -10033,8 +10037,8 @@\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(abs:DF (match_operand:DF 1 \"register_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"TARGET_80387 && reload_completed && !FP_REGNO_P (REGNO (operands[0]))\n-   && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387 && reload_completed &&\n+   !FP_REGNO_P (REGNO (operands[0]))\"\n   [(parallel [(set (match_dup 3) (and:SI (match_dup 3) (match_dup 4)))\n \t      (clobber (reg:CC 17))])]\n   \"operands[4] = GEN_INT (trunc_int_for_mode (~0x80000000, SImode));\n@@ -10044,7 +10048,7 @@\n   [(parallel [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n \t\t   (neg:XF (match_operand:XF 1 \"nonimmediate_operand\" \"\")))\n \t      (clobber (reg:CC 17))])]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n   \"ix86_expand_unary_operator (ABS, XFmode, operands); DONE;\")\n \n (define_expand \"abstf2\"\n@@ -10061,7 +10065,7 @@\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f#r,rm#f\")\n \t(abs:XF (match_operand:XF 1 \"nonimmediate_operand\" \"0,0\")))\n    (clobber (reg:CC 17))]\n-  \"TARGET_80387 && !TARGET_64BIT\n+  \"!TARGET_64BIT && TARGET_80387\n    && ix86_unary_operator_ok (ABS, XFmode, operands)\"\n   \"#\")\n \n@@ -10140,7 +10144,7 @@\n (define_insn \"*absxf2_1\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(abs:XF (match_operand:XF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_80387 && !TARGET_64BIT && reload_completed\"\n+  \"!TARGET_64BIT && TARGET_80387 && reload_completed\"\n   \"fabs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"DF\")])\n@@ -10149,7 +10153,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(abs:XF (float_extend:XF\n \t  (match_operand:DF 1 \"register_operand\" \"0\"))))]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n   \"fabs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"XF\")])\n@@ -10158,7 +10162,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(abs:XF (float_extend:XF\n \t  (match_operand:SF 1 \"register_operand\" \"0\"))))]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n   \"fabs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"XF\")])\n@@ -10483,8 +10487,7 @@\n \t(ashift:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t   (match_operand:QI 2 \"immediate_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"reload_completed\n-   && TARGET_64BIT\n+  \"TARGET_64BIT && reload_completed\n    && true_regnum (operands[0]) != true_regnum (operands[1])\"\n   [(set (match_dup 0)\n \t(mult:DI (match_dup 1)\n@@ -10711,7 +10714,7 @@\n \t(zero_extend:DI (ashift:SI (match_operand:SI 1 \"register_operand\" \"0,r\")\n \t\t\t(match_operand:QI 2 \"nonmemory_operand\" \"cI,M\"))))\n    (clobber (reg:CC 17))]\n-  \"ix86_binary_operator_ok (ASHIFT, SImode, operands) && TARGET_64BIT\"\n+  \"TARGET_64BIT && ix86_binary_operator_ok (ASHIFT, SImode, operands)\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -11333,8 +11336,9 @@\n \t(zero_extend:DI (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"*a,0\")\n \t\t\t\t     (match_operand:SI 2 \"const_int_operand\" \"i,i\"))))\n    (clobber (reg:CC 17))]\n-  \"INTVAL (operands[2]) == 31 && (TARGET_USE_CLTD || optimize_size)\n-   && TARGET_64BIT && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n+  \"TARGET_64BIT && (TARGET_USE_CLTD || optimize_size)\n+   && INTVAL (operands[2]) == 31\n+   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"@\n    {cltd|cdq}\n    sar{l}\\t{%2, %k0|%k0, %2}\"\n@@ -13042,7 +13046,7 @@\n    (use (match_operand 2 \"\" \"\"))        ; max iterations\n    (use (match_operand 3 \"\" \"\"))        ; loop level \n    (use (match_operand 4 \"\" \"\"))]       ; label\n-  \"TARGET_USE_LOOP && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_USE_LOOP\"\n   \"                                 \n {\n   /* Only use cloop on innermost loops.  */\n@@ -13066,7 +13070,7 @@\n \t\t (const_int -1)))\n    (clobber (match_scratch:SI 3 \"=X,X,r\"))\n    (clobber (reg:CC 17))]\n-  \"TARGET_USE_LOOP && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_USE_LOOP\"\n {\n   if (which_alternative != 0)\n     return \"#\";\n@@ -13096,7 +13100,7 @@\n \t\t (const_int -1)))\n    (clobber (match_scratch:SI 2 \"\"))\n    (clobber (reg:CC 17))]\n-  \"TARGET_USE_LOOP && !TARGET_64BIT\n+  \"!TARGET_64BIT && TARGET_USE_LOOP\n    && reload_completed\n    && REGNO (operands[1]) != 2\"\n   [(parallel [(set (reg:CCZ 17)\n@@ -13119,7 +13123,7 @@\n \t\t (const_int -1)))\n    (clobber (match_scratch:SI 3 \"\"))\n    (clobber (reg:CC 17))]\n-  \"TARGET_USE_LOOP && !TARGET_64BIT\n+  \"!TARGET_64BIT && TARGET_USE_LOOP\n    && reload_completed\n    && (! REG_P (operands[2])\n        || ! rtx_equal_p (operands[1], operands[2]))\"\n@@ -13550,15 +13554,15 @@\n \n (define_insn_and_split \"eh_return_si\"\n   [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"c\")] 13)]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"#\"\n   \"reload_completed\"\n   [(const_int 1)]\n   \"ix86_expand_epilogue (2); DONE;\")\n \n (define_insn_and_split \"eh_return_di\"\n   [(unspec_volatile [(match_operand:DI 0 \"register_operand\" \"c\")] 13)]\n-  \"\"\n+  \"TARGET_64BIT\"\n   \"#\"\n   \"reload_completed\"\n   [(const_int 1)]\n@@ -13758,7 +13762,7 @@\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t\t\t[(match_operand:XF 1 \"register_operand\" \"%0\")\n \t\t\t (match_operand:XF 2 \"register_operand\" \"f\")]))]\n-  \"TARGET_80387 && !TARGET_64BIT\n+  \"!TARGET_64BIT && TARGET_80387\n    && GET_RTX_CLASS (GET_CODE (operands[3])) == 'c'\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n@@ -13954,7 +13958,7 @@\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t\t\t[(match_operand:XF 1 \"register_operand\" \"0,f\")\n \t\t\t (match_operand:XF 2 \"register_operand\" \"f,0\")]))]\n-  \"TARGET_80387 && !TARGET_64BIT\n+  \"!TARGET_64BIT && TARGET_80387\n    && GET_RTX_CLASS (GET_CODE (operands[3])) != 'c'\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n@@ -13988,7 +13992,7 @@\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t   [(float:XF (match_operand:SI 1 \"nonimmediate_operand\" \"m,?r\"))\n \t    (match_operand:XF 2 \"register_operand\" \"0,0\")]))]\n-  \"TARGET_80387 && !TARGET_64BIT && TARGET_USE_FIOP\"\n+  \"!TARGET_64BIT && TARGET_80387 && TARGET_USE_FIOP\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n@@ -14024,7 +14028,7 @@\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t  [(match_operand:XF 1 \"register_operand\" \"0,0\")\n \t   (float:XF (match_operand:SI 2 \"nonimmediate_operand\" \"m,?r\"))]))]\n-  \"TARGET_80387 && !TARGET_64BIT && TARGET_USE_FIOP\"\n+  \"!TARGET_64BIT && TARGET_80387 && TARGET_USE_FIOP\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n@@ -14060,7 +14064,7 @@\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t   [(float_extend:XF (match_operand:SF 1 \"nonimmediate_operand\" \"fm,0\"))\n \t    (match_operand:XF 2 \"register_operand\" \"0,f\")]))]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n@@ -14093,7 +14097,7 @@\n \t  [(match_operand:XF 1 \"register_operand\" \"0,f\")\n \t   (float_extend:XF\n \t    (match_operand:SF 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n@@ -14126,7 +14130,7 @@\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t   [(float_extend:XF (match_operand:DF 1 \"nonimmediate_operand\" \"fm,0\"))\n \t    (match_operand:XF 2 \"register_operand\" \"0,f\")]))]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n@@ -14159,7 +14163,7 @@\n \t  [(match_operand:XF 1 \"register_operand\" \"0,f\")\n \t   (float_extend:XF\n \t    (match_operand:DF 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n-  \"TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n@@ -14322,7 +14326,7 @@\n (define_insn \"sqrtxf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(sqrt:XF (match_operand:XF 1 \"register_operand\" \"0\")))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 && !TARGET_64BIT\n+  \"!TARGET_64BIT && TARGET_80387 && !TARGET_NO_FANCY_MATH_387 \n    && (TARGET_IEEE_FP || flag_unsafe_math_optimizations) \"\n   \"fsqrt\"\n   [(set_attr \"type\" \"fpspc\")\n@@ -14343,7 +14347,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(sqrt:XF (float_extend:XF\n \t\t  (match_operand:DF 1 \"register_operand\" \"0\"))))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387 && TARGET_NO_FANCY_MATH_387\"\n   \"fsqrt\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")\n@@ -14363,7 +14367,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(sqrt:XF (float_extend:XF\n \t\t  (match_operand:SF 1 \"register_operand\" \"0\"))))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_80387 && TARGET_NO_FANCY_MATH_387\"\n   \"fsqrt\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")\n@@ -14410,7 +14414,7 @@\n (define_insn \"sinxf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")] 1))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 && !TARGET_64BIT\n+  \"!TARGET_64BIT && TARGET_80387 && TARGET_NO_FANCY_MATH_387\n    && flag_unsafe_math_optimizations\"\n   \"fsin\"\n   [(set_attr \"type\" \"fpspc\")\n@@ -14659,7 +14663,7 @@\n \t      (clobber (reg:CC 17))])\n    (parallel [(set (match_dup 1) (plus:DI (match_dup 1) (const_int 1)))\n \t      (clobber (reg:CC 17))])]\n-  \"!TARGET_64BIT\"\n+  \"TARGET_64BIT\"\n {\n   if (TARGET_SINGLE_STRINGOP || optimize_size)\n     {\n@@ -15637,7 +15641,7 @@\n \t\t\t\t[(reg 17) (const_int 0)])\n \t\t      (match_operand:DF 2 \"nonimmediate_operand\" \"f,0,rm,0\")\n \t\t      (match_operand:DF 3 \"nonimmediate_operand\" \"0,f,0,rm\")))]\n-  \"TARGET_CMOVE && !TARGET_64BIT\n+  \"!TARGET_64BIT && TARGET_CMOVE\n    && (GET_CODE (operands[2]) != MEM || GET_CODE (operands[3]) != MEM)\"\n   \"@\n    fcmov%F1\\t{%2, %0|%0, %2}\n@@ -15653,7 +15657,7 @@\n \t\t\t\t[(reg 17) (const_int 0)])\n \t\t      (match_operand:DF 2 \"nonimmediate_operand\" \"f,0,rm,0\")\n \t\t      (match_operand:DF 3 \"nonimmediate_operand\" \"0,f,0,rm\")))]\n-  \"TARGET_CMOVE && TARGET_64BIT\n+  \"TARGET_64BIT && TARGET_CMOVE\n    && (GET_CODE (operands[2]) != MEM || GET_CODE (operands[3]) != MEM)\"\n   \"@\n    fcmov%F1\\t{%2, %0|%0, %2}\n@@ -15669,7 +15673,7 @@\n \t\t\t\t[(match_operand 4 \"\" \"\") (const_int 0)])\n \t\t      (match_operand:DF 2 \"nonimmediate_operand\" \"\")\n \t\t      (match_operand:DF 3 \"nonimmediate_operand\" \"\")))]\n-  \"!ANY_FP_REG_P (operands[0]) && reload_completed && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && !ANY_FP_REG_P (operands[0]) && reload_completed\"\n   [(set (match_dup 2)\n \t(if_then_else:SI (match_op_dup 1 [(match_dup 4) (const_int 0)])\n \t\t      (match_dup 5)\n@@ -15687,7 +15691,7 @@\n \t(if_then_else:XF (match_operand 1 \"comparison_operator\" \"\")\n \t\t\t (match_operand:XF 2 \"register_operand\" \"\")\n \t\t\t (match_operand:XF 3 \"register_operand\" \"\")))]\n-  \"TARGET_CMOVE && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_CMOVE\"\n   \"if (! ix86_expand_fp_movcc (operands)) FAIL; DONE;\")\n \n (define_expand \"movtfcc\"\n@@ -15704,7 +15708,7 @@\n \t\t\t\t[(reg 17) (const_int 0)])\n \t\t      (match_operand:XF 2 \"register_operand\" \"f,0\")\n \t\t      (match_operand:XF 3 \"register_operand\" \"0,f\")))]\n-  \"TARGET_CMOVE && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_CMOVE\"\n   \"@\n    fcmov%F1\\t{%2, %0|%0, %2}\n    fcmov%f1\\t{%3, %0|%0, %3}\"\n@@ -16405,7 +16409,7 @@\n    (set (reg:SI 7) (minus:SI (reg:SI 7) (match_dup 0)))\n    (clobber (match_dup 0))\n    (clobber (reg:CC 17))]\n-  \"TARGET_STACK_PROBE && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && TARGET_STACK_PROBE\"\n   \"call\\t__alloca\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"5\")])\n@@ -16415,7 +16419,7 @@\n    (set (reg:DI 7) (minus:DI (reg:DI 7) (match_dup 0)))\n    (clobber (match_dup 0))\n    (clobber (reg:CC 17))]\n-  \"TARGET_STACK_PROBE && TARGET_64BIT\"\n+  \"TARGET_64BIT && TARGET_STACK_PROBE\"\n   \"call\\t__alloca\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"5\")])\n@@ -16446,7 +16450,7 @@\n \n (define_expand \"builtin_setjmp_receiver\"\n   [(label_ref (match_operand 0 \"\" \"\"))]\n-  \"flag_pic && !TARGET_64BIT\"\n+  \"!TARGET_64BIT && flag_pic\"\n {\n   load_pic_register ();\n   DONE;"}, {"sha": "2610a12325f0e43292faa8ce602cea1f51041136", "filename": "gcc/gencodes.c", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b0c37d730cd2bda3fa69befcb77e1ae11705219/gcc%2Fgencodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b0c37d730cd2bda3fa69befcb77e1ae11705219/gcc%2Fgencodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencodes.c?ref=1b0c37d730cd2bda3fa69befcb77e1ae11705219", "patch": "@@ -28,12 +28,9 @@ Boston, MA 02111-1307, USA.  */\n #include \"errors.h\"\n #include \"gensupport.h\"\n \n-\n static int insn_code_number;\n \n static void gen_insn PARAMS ((rtx));\n-static void output_predicate_decls PARAMS ((void));\n-static int print_md_constant PARAMS ((void **, void *));\n \n static void\n gen_insn (insn)\n@@ -47,30 +44,6 @@ gen_insn (insn)\n \t    insn_code_number);\n }\n \n-/* Print out declarations for all predicates mentioned in\n-   PREDICATE_CODES.  */\n-\n-static void\n-output_predicate_decls ()\n-{\n-#ifdef PREDICATE_CODES\n-  static struct {\n-    const char *name;\n-    RTX_CODE codes[NUM_RTX_CODE];\n-  } predicate[] = {\n-    PREDICATE_CODES\n-  };\n-  size_t i;\n-\n-  putc ('\\n', stdout);\n-  puts (\"struct rtx_def;\\n#include \\\"machmode.h\\\"\\n\");\n-  for (i = 0; i < sizeof predicate / sizeof *predicate; i++)\n-    printf (\"extern int %s PARAMS ((struct rtx_def *, enum machine_mode));\\n\",\n-\t    predicate[i].name);\n-  putc ('\\n', stdout);\n-#endif\n-}\n-\n extern int main PARAMS ((int, char **));\n \n int\n@@ -114,10 +87,6 @@ main (argc, argv)\n \n   printf (\"\\n#define MAX_INSN_CODE ((int) CODE_FOR_nothing)\\n\\n\");\n \n-  traverse_md_constants (print_md_constant, stdout);\n-\n-  output_predicate_decls ();\n-\n   puts(\"\\n#endif /* GCC_INSN_CODES_H */\");\n \n   if (ferror (stdout) || fflush (stdout) || fclose (stdout))\n@@ -134,18 +103,3 @@ get_insn_name (code)\n {\n   return NULL;\n }\n-\n-/* Called via traverse_md_constants; emit a #define for\n-   the current constant definition.  */\n-\n-static int\n-print_md_constant (slot, info)\n-     void **slot;\n-     void *info;\n-{\n-  struct md_constant *def = *slot;\n-  FILE *file = info;\n-\n-  fprintf (file, \"#define %s %s\\n\", def->name, def->value);\n-  return 1;\n-}"}, {"sha": "69d62cba6a297c482df543678f78d54f87cfc42a", "filename": "gcc/genconstants.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b0c37d730cd2bda3fa69befcb77e1ae11705219/gcc%2Fgenconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b0c37d730cd2bda3fa69befcb77e1ae11705219/gcc%2Fgenconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconstants.c?ref=1b0c37d730cd2bda3fa69befcb77e1ae11705219", "patch": "@@ -0,0 +1,89 @@\n+/* Generate from machine description:\n+   a series of #define statements, one for each constant named in\n+   a (define_constants ...) pattern.\n+\n+   Copyright (C) 1987, 1991, 1995, 1998,\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* This program does not use gensupport.c because it does not need to\n+   look at insn patterns, only (define_constants), and we want to\n+   minimize dependencies.  */\n+\n+#include \"hconfig.h\"\n+#include \"system.h\"\n+#include \"rtl.h\"\n+#include \"errors.h\"\n+#include \"gensupport.h\"\n+\n+static int print_md_constant PARAMS ((void **, void *));\n+extern int main PARAMS ((int, char **));\n+\n+/* Called via traverse_md_constants; emit a #define for\n+   the current constant definition.  */\n+\n+static int\n+print_md_constant (slot, info)\n+     void **slot;\n+     void *info;\n+{\n+  struct md_constant *def = *slot;\n+  FILE *file = info;\n+\n+  fprintf (file, \"#define %s %s\\n\", def->name, def->value);\n+  return 1;\n+}\n+\n+int\n+main (argc, argv)\n+     int argc;\n+     char **argv;\n+{\n+  int dummy1, dummy2;\n+  rtx desc;\n+\n+  progname = \"genconstants\";\n+\n+  if (argc <= 1)\n+    fatal (\"No input file name.\");\n+\n+  if (init_md_reader (argv[1]) != SUCCESS_EXIT_CODE)\n+    return (FATAL_EXIT_CODE);\n+\n+  /* Scan and discard the entire file.  This has the side effect\n+     of loading up the constants table that we wish to scan.  */\n+  do\n+    desc = read_md_rtx (&dummy1, &dummy2);\n+  while (desc);\n+\n+  puts (\"/* Generated automatically by the program `genconstants'\");\n+  puts (\"   from the machine description file `md'.  */\\n\");\n+  puts (\"#ifndef GCC_INSN_CONSTANTS_H\");\n+  puts (\"#define GCC_INSN_CONSTANTS_H\\n\");\n+\n+  traverse_md_constants (print_md_constant, stdout);\n+\n+  puts (\"\\n#endif /* GCC_INSN_CONSTANTS_H */\");\n+\n+  if (ferror (stdout) || fflush (stdout) || fclose (stdout))\n+    return FATAL_EXIT_CODE;\n+\n+  return SUCCESS_EXIT_CODE;\n+}\n+"}, {"sha": "decf67a3918ad9046b5c9760a599bb30c63a5264", "filename": "gcc/genpreds.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b0c37d730cd2bda3fa69befcb77e1ae11705219/gcc%2Fgenpreds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b0c37d730cd2bda3fa69befcb77e1ae11705219/gcc%2Fgenpreds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpreds.c?ref=1b0c37d730cd2bda3fa69befcb77e1ae11705219", "patch": "@@ -0,0 +1,68 @@\n+/* Generate from machine description:\n+   - some macros CODE_FOR_... giving the insn_code_number value\n+   for each of the defined standard insn names.\n+   Copyright (C) 1987, 1991, 1995, 1998,\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"hconfig.h\"\n+#include \"system.h\"\n+\n+#define NO_GENRTL_H\n+#include \"rtl.h\"\n+\n+static void output_predicate_decls PARAMS ((void));\n+extern int main PARAMS ((void));\n+\n+static void\n+output_predicate_decls ()\n+{\n+#ifdef PREDICATE_CODES\n+  static struct {\n+    const char *name;\n+    RTX_CODE codes[NUM_RTX_CODE];\n+  } predicate[] = {\n+    PREDICATE_CODES\n+  };\n+  size_t i;\n+\n+  puts (\"#ifdef RTX_CODE\\n\");\n+  for (i = 0; i < sizeof predicate / sizeof *predicate; i++)\n+    printf (\"extern int %s PARAMS ((rtx, enum machine_mode));\\n\",\n+\t    predicate[i].name);\n+  puts (\"\\n#endif /* RTX_CODE */\\n\");\n+#endif\n+}\n+\n+int\n+main ()\n+{\n+  puts (\"/* Generated automatically by the program `genpreds'.  */\\n\");\n+  puts (\"#ifndef GCC_TM_PREDS_H\");\n+  puts (\"#define GCC_TM_PREDS_H\\n\");\n+\n+  output_predicate_decls ();\n+\n+  puts (\"#endif /* GCC_TM_PREDS_H */\");\n+\n+  if (ferror (stdout) || fflush (stdout) || fclose (stdout))\n+    return FATAL_EXIT_CODE;\n+\n+  return SUCCESS_EXIT_CODE;\n+}"}, {"sha": "d43bc983d273fcec222a0668a86efca805dc6eae", "filename": "gcc/mkconfig.sh", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b0c37d730cd2bda3fa69befcb77e1ae11705219/gcc%2Fmkconfig.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b0c37d730cd2bda3fa69befcb77e1ae11705219/gcc%2Fmkconfig.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmkconfig.sh?ref=1b0c37d730cd2bda3fa69befcb77e1ae11705219", "patch": "@@ -49,12 +49,25 @@ for def in $DEFINES; do\n     echo \"#endif\"\n done\n \n-# Include insn-codes.h last, because it includes machmode.h,\n-# and we want EXTRA_CC_MODES to be taken into account.\n-echo \"#ifndef GENERATOR_FILE\"\n-echo \"#include \\\"insn-codes.h\\\"\"\n-echo \"#include \\\"insn-flags.h\\\"\"\n-echo \"#endif\"\n+# If this is tm_p.h, include tm-preds.h unconditionally.\n+# If this is tconfig.h or hconfig.h, include no more files.\n+# Otherwise, include insn-constants.h, insn-flags.h, and insn-codes.h,\n+# but only if GENERATOR_FILE is not defined. (The last of those is\n+# slated to be removed.)\n+case $output in\n+    *tm_p.h)\n+\techo \"#include \\\"tm-preds.h\\\"\"\n+    ;;\n+    *tconfig.h | *hconfig.h)\n+    ;;\n+    *)\n+\techo \"#ifndef GENERATOR_FILE\"\n+\techo \"# include \\\"insn-constants.h\\\"\"\n+\techo \"# include \\\"insn-codes.h\\\"\"\n+\techo \"# include \\\"insn-flags.h\\\"\"\n+\techo \"#endif\"\n+    ;;\n+esac\n \n ) > $output.T\n "}]}