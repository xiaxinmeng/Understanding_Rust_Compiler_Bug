{"sha": "ffb8dbc16a003a0f00662ded052de3a3b7dcb964", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZiOGRiYzE2YTAwM2EwZjAwNjYyZGVkMDUyZGUzYTNiN2RjYjk2NA==", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2020-07-21T20:40:22Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:19Z"}, "message": "Compile AST::StructExprStructFields into a constructor tree.\n\nThis still requires more type resolution work to ensure field ordering\non the initilizer and defaults if required.\n\nstruct Foo struct_test;\ntry\n  {\n    struct_test.one = 1;\n    struct_test.two = 2;\n  }\nfinally\n  {\n    struct_test = {CLOBBER};\n  }", "tree": {"sha": "48597394d7b0f2bc76dd52696081bf62aed9cf58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48597394d7b0f2bc76dd52696081bf62aed9cf58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffb8dbc16a003a0f00662ded052de3a3b7dcb964", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb8dbc16a003a0f00662ded052de3a3b7dcb964", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffb8dbc16a003a0f00662ded052de3a3b7dcb964", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb8dbc16a003a0f00662ded052de3a3b7dcb964/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aac6645c2204837ec30ff720e6087e6cf588cec7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aac6645c2204837ec30ff720e6087e6cf588cec7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aac6645c2204837ec30ff720e6087e6cf588cec7"}], "stats": {"total": 125, "additions": 113, "deletions": 12}, "files": [{"sha": "ee4f95565637d0b0a3d8d5e30d6d635a4a7c5e9b", "filename": "gcc/rust/backend/cscope.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb8dbc16a003a0f00662ded052de3a3b7dcb964/gcc%2Frust%2Fbackend%2Fcscope.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb8dbc16a003a0f00662ded052de3a3b7dcb964/gcc%2Frust%2Fbackend%2Fcscope.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Fcscope.h?ref=ffb8dbc16a003a0f00662ded052de3a3b7dcb964", "patch": "@@ -19,13 +19,15 @@ class Scope\n     fndecls.Push ();\n     vars.Push ();\n     types.Push ();\n+    structDecls.Push ();\n   }\n \n   void Pop ()\n   {\n     fndecls.Pop ();\n     vars.Pop ();\n     types.Pop ();\n+    structDecls.Pop ();\n   }\n \n   void PushCurrentFunction (std::string name, Bfunction *fn, Btype *retType,\n@@ -85,6 +87,16 @@ class Scope\n \n   void AddStatement (Bstatement *stmt) { context.back ().push_back (stmt); }\n \n+  void InsertStructDecl (std::string name, AST::StructStruct *decl)\n+  {\n+    structDecls.Insert (name, decl);\n+  }\n+\n+  bool LookupStructDecl (std::string name, AST::StructStruct **decl)\n+  {\n+    return structDecls.Lookup (name, decl);\n+  }\n+\n   void InsertFunction (std::string name, Bfunction *fn, Btype *retType)\n   {\n     fndecls.Insert (name, fn);\n@@ -123,6 +135,7 @@ class Scope\n   Analysis::Scope<Bfunction *> fndecls;\n   Analysis::Scope<Bvariable *> vars;\n   Analysis::Scope<Btype *> types;\n+  Analysis::Scope<AST::StructStruct *> structDecls;\n };\n \n } // namespace Compile"}, {"sha": "2b9b5bb06dd4b8059826194e3c59c1d70a2d4f3e", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 98, "deletions": 12, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb8dbc16a003a0f00662ded052de3a3b7dcb964/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb8dbc16a003a0f00662ded052de3a3b7dcb964/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=ffb8dbc16a003a0f00662ded052de3a3b7dcb964", "patch": "@@ -529,15 +529,95 @@ Compilation::visit (AST::StructExprStruct &expr)\n void\n Compilation::visit (AST::StructExprFieldIdentifier &field)\n {}\n+\n void\n Compilation::visit (AST::StructExprFieldIdentifierValue &field)\n-{}\n+{\n+  AST::StructStruct *decl = structBuffer.back ();\n+  size_t index = 0;\n+  bool found = false;\n+  for (auto &df : decl->fields)\n+    {\n+      if (field.field_name.compare (df.field_name) == 0)\n+\t{\n+\t  found = true;\n+\t  break;\n+\t}\n+    }\n+  if (!found)\n+    {\n+      rust_fatal_error (field.value->get_locus_slow (),\n+\t\t\t\"failed to lookup field index\");\n+      return;\n+    }\n+\n+  Bexpression *value = NULL;\n+  VISIT_POP (field.value->get_locus_slow (), field.value.get (), value, exprs);\n+  if (value == NULL)\n+    {\n+      rust_fatal_error (field.value->get_locus_slow (),\n+\t\t\t\"failed to compile value to struct\");\n+      return;\n+    }\n+  exprs.push_back (value);\n+}\n+\n void\n Compilation::visit (AST::StructExprFieldIndexValue &field)\n-{}\n+{\n+  Bexpression *value = NULL;\n+  VISIT_POP (field.value->get_locus_slow (), field.value.get (), value, exprs);\n+  if (value == NULL)\n+    {\n+      rust_fatal_error (field.value->get_locus_slow (),\n+\t\t\t\"failed to compile value to struct\");\n+      return;\n+    }\n+  exprs.push_back (value);\n+}\n+\n void\n Compilation::visit (AST::StructExprStructFields &expr)\n-{}\n+{\n+  AST::StructStruct *decl = NULL;\n+  if (!scope.LookupStructDecl (expr.get_struct_name ().as_string (), &decl))\n+    {\n+      rust_error_at (expr.get_locus_slow (), \"unknown type\");\n+      return;\n+    }\n+\n+  Btype *structType = NULL;\n+  if (!scope.LookupType (expr.get_struct_name ().as_string (), &structType))\n+    {\n+      rust_fatal_error (expr.get_locus_slow (), \"unknown type\");\n+      return;\n+    }\n+\n+  structBuffer.push_back (decl);\n+  std::vector<Bexpression *> constructor;\n+\n+  // FIXME type resolution pass should ensures these are in correct order\n+  // and have defaults if required\n+  for (auto &field : expr.fields)\n+    {\n+      Bexpression *value = NULL;\n+      VISIT_POP (expr.get_locus_slow (), field, value, exprs);\n+      if (value == NULL)\n+\t{\n+\t  rust_fatal_error (expr.get_locus_slow (),\n+\t\t\t    \"failed to compile value to struct\");\n+\t  return;\n+\t}\n+\n+      constructor.push_back (value);\n+    }\n+\n+  structBuffer.pop_back ();\n+  auto cons = backend->constructor_expression (structType, constructor,\n+\t\t\t\t\t       expr.get_locus_slow ());\n+  exprs.push_back (cons);\n+}\n+\n void\n Compilation::visit (AST::StructExprStructBase &expr)\n {}\n@@ -1038,6 +1118,7 @@ Compilation::visit (AST::StructStruct &struct_item)\n \n   type_decls.push_back (compiledStruct);\n   scope.InsertType (struct_item.struct_name, compiledStruct);\n+  scope.InsertStructDecl (struct_item.struct_name, &struct_item);\n }\n \n void\n@@ -1217,15 +1298,6 @@ Compilation::visit (AST::LetStmt &stmt)\n   if (!stmt.has_init_expr ())\n     return;\n \n-  Bexpression *init = NULL;\n-  VISIT_POP (stmt.init_expr->get_locus_slow (), stmt.init_expr, init, exprs);\n-  if (init == NULL)\n-    {\n-      rust_error_at (stmt.init_expr->get_locus_slow (),\n-\t\t     \"failed to compile init statement\");\n-      return;\n-    }\n-\n   stmt.variables_pattern->accept_vis (*this);\n   for (auto &pattern : patternBuffer)\n     {\n@@ -1237,8 +1309,22 @@ Compilation::visit (AST::LetStmt &stmt)\n \t  return;\n \t}\n \n+      varBuffer.push_back (var);\n+\n+      Bexpression *init = NULL;\n+      VISIT_POP (stmt.init_expr->get_locus_slow (), stmt.init_expr, init,\n+\t\t exprs);\n+      if (init == NULL)\n+\t{\n+\t  rust_error_at (stmt.init_expr->get_locus_slow (),\n+\t\t\t \"failed to compile init statement\");\n+\t  return;\n+\t}\n+\n       auto s = backend->init_statement (scope.GetCurrentFndecl (), var, init);\n       scope.AddStatement (s);\n+\n+      varBuffer.pop_back ();\n     }\n   patternBuffer.clear ();\n }"}, {"sha": "b28f0eee66a440c1fc1a0e7907e0a0dee2dad588", "filename": "gcc/rust/backend/rust-compile.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb8dbc16a003a0f00662ded052de3a3b7dcb964/gcc%2Frust%2Fbackend%2Frust-compile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb8dbc16a003a0f00662ded052de3a3b7dcb964/gcc%2Frust%2Fbackend%2Frust-compile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.h?ref=ffb8dbc16a003a0f00662ded052de3a3b7dcb964", "patch": "@@ -242,6 +242,8 @@ class Compilation : public AST::ASTVisitor\n   std::vector<AST::IdentifierPattern> patternBuffer;\n   std::vector< ::Bexpression *> exprs;\n   std::vector< ::Bstatement *> stmts;\n+  std::vector< ::Bvariable *> varBuffer;\n+  std::vector<AST::StructStruct*> structBuffer;\n \n   // careful these are the vectors we pass into the GCC middle-end\n   std::vector< ::Btype *> type_decls;"}]}