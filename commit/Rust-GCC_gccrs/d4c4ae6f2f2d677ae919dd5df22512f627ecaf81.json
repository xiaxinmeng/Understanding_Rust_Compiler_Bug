{"sha": "d4c4ae6f2f2d677ae919dd5df22512f627ecaf81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRjNGFlNmYyZjJkNjc3YWU5MTlkZDVkZjIyNTEyZjYyN2VjYWY4MQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-07-15T20:07:45Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-07-15T20:07:45Z"}, "message": "valarray_array.h (__valarray_get_storage): New function.\n\n2000-07-15  Gabriel Dos Reis  <gdr@codesourcery.com>\n\n\t* bits/valarray_array.h (__valarray_get_storage): New function.\n\t(_Array<>::Array): Use it.\n\t* bits/std_valarray.h (valarray<>::valarray): Likewise.\n\t(valarray<>::resize): Likewise.  Tweak.\n\t* src/valarray-inst.cc (__valarray_product): Tweak.\n\nFrom-SVN: r35053", "tree": {"sha": "50d946cf2a9e88d91de787ae9377e70ba3da8a8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50d946cf2a9e88d91de787ae9377e70ba3da8a8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4c4ae6f2f2d677ae919dd5df22512f627ecaf81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4c4ae6f2f2d677ae919dd5df22512f627ecaf81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4c4ae6f2f2d677ae919dd5df22512f627ecaf81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4c4ae6f2f2d677ae919dd5df22512f627ecaf81/comments", "author": null, "committer": null, "parents": [{"sha": "2c0accc920f19896d91fc0afb8cb8825a5147dbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c0accc920f19896d91fc0afb8cb8825a5147dbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c0accc920f19896d91fc0afb8cb8825a5147dbe"}], "stats": {"total": 105, "additions": 50, "deletions": 55}, "files": [{"sha": "644f3d016ea9cee87feab976aa4c4bed82950e0d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4c4ae6f2f2d677ae919dd5df22512f627ecaf81/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4c4ae6f2f2d677ae919dd5df22512f627ecaf81/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d4c4ae6f2f2d677ae919dd5df22512f627ecaf81", "patch": "@@ -1,3 +1,11 @@\n+2000-07-15  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* bits/valarray_array.h (__valarray_get_storage): New function.\n+\t(_Array<>::Array): Use it.\n+\t* bits/std_valarray.h (valarray<>::valarray): Likewise.\n+\t(valarray<>::resize): Likewise.  Tweak.\n+\t* src/valarray-inst.cc (__valarray_product): Tweak.\n+\n 2000-07-11  Phil Edwards  <pme@sourceware.cygnus.com>\n \n \t* docs:  Update sourceware->sources in every HTML file.  Minor updates."}, {"sha": "fa43c6dca0c0a31a54a77419b0d3f91944b688f6", "filename": "libstdc++-v3/bits/std_valarray.h", "status": "modified", "additions": 29, "deletions": 49, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4c4ae6f2f2d677ae919dd5df22512f627ecaf81/libstdc%2B%2B-v3%2Fbits%2Fstd_valarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4c4ae6f2f2d677ae919dd5df22512f627ecaf81/libstdc%2B%2B-v3%2Fbits%2Fstd_valarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fstd_valarray.h?ref=d4c4ae6f2f2d677ae919dd5df22512f627ecaf81", "patch": "@@ -259,78 +259,61 @@ namespace std {\n \n   template<typename _Tp>\n   inline valarray<_Tp>::valarray (size_t __n) \n-      : _M_size(__n),\n-        _M_data(static_cast<_Tp*__restrict__>\n-                (__valarray_get_memory(__n * sizeof (_Tp))))\n+      : _M_size(__n), _M_data(__valarray_get_storage<_Tp>(__n))\n   { __valarray_default_construct(_M_data, _M_data + __n); }\n \n   template<typename _Tp>\n   inline valarray<_Tp>::valarray (const _Tp& __t, size_t __n)\n-      : _M_size(__n),\n-        _M_data(static_cast<_Tp*__restrict__>\n-                (__valarray_get_memory(__n * sizeof (_Tp))))\n+    : _M_size(__n), _M_data(__valarray_get_storage<_Tp>(__n))\n   { __valarray_fill_construct (_M_data, _M_data + __n, __t); }\n \n   template<typename _Tp>\n   inline valarray<_Tp>::valarray (const _Tp* __restrict__ __p, size_t __n)\n-      : _M_size(__n),\n-        _M_data(static_cast<_Tp*__restrict__>\n-                (__valarray_get_memory(__n * sizeof (_Tp))))\n+    : _M_size(__n), _M_data(__valarray_get_storage<_Tp>(__n))\n   { __valarray_copy_construct (__p, __p + __n, _M_data); }\n \n   template<typename _Tp>\n   inline valarray<_Tp>::valarray (const valarray<_Tp>& __v)\n-      : _M_size(__v._M_size),\n-        _M_data(static_cast<_Tp*__restrict__>\n-                (__valarray_get_memory(__v._M_size * sizeof (_Tp))))\n+    : _M_size(__v._M_size), _M_data(__valarray_get_storage<_Tp>(__v._M_size))\n   { __valarray_copy_construct (__v._M_data, __v._M_data + _M_size, _M_data); }\n \n   template<typename _Tp>\n   inline valarray<_Tp>::valarray (const slice_array<_Tp>& __sa)\n-      : _M_size(__sa._M_sz),\n-        _M_data(static_cast<_Tp*__restrict__>\n-                (__valarray_get_memory(__sa._M_sz * sizeof (_Tp))))\n+    : _M_size(__sa._M_sz), _M_data(__valarray_get_storage<_Tp>(__sa._M_sz))\n   {\n-      __valarray_copy_construct\n-          (__sa._M_array, __sa._M_sz, __sa._M_stride, _Array<_Tp>(_M_data));\n+    __valarray_copy_construct\n+      (__sa._M_array, __sa._M_sz, __sa._M_stride, _Array<_Tp>(_M_data));\n   }\n \n   template<typename _Tp>\n   inline valarray<_Tp>::valarray (const gslice_array<_Tp>& __ga)\n-      : _M_size(__ga._M_index.size()),\n-        _M_data(static_cast<_Tp*__restrict__>\n-                (__valarray_get_memory(_M_size * sizeof (_Tp))))\n+    : _M_size(__ga._M_index.size()),\n+      _M_data(__valarray_get_storage<_Tp>(_M_size))\n   {\n-      __valarray_copy_construct\n-          (__ga._M_array, _Array<size_t>(__ga._M_index),\n-           _Array<_Tp>(_M_data), _M_size);\n+    __valarray_copy_construct\n+      (__ga._M_array, _Array<size_t>(__ga._M_index),\n+       _Array<_Tp>(_M_data), _M_size);\n   }\n \n   template<typename _Tp>\n   inline valarray<_Tp>::valarray (const mask_array<_Tp>& __ma)\n-      : _M_size(__ma._M_sz),\n-        _M_data(static_cast<_Tp*__restrict__>\n-                (__valarray_get_memory(__ma._M_sz * sizeof (_Tp))))\n+    : _M_size(__ma._M_sz), _M_data(__valarray_get_storage<_Tp>(__ma._M_sz))\n   {\n-      __valarray_copy_construct\n-          (__ma._M_array, __ma._M_mask, _Array<_Tp>(_M_data), _M_size);\n+    __valarray_copy_construct\n+      (__ma._M_array, __ma._M_mask, _Array<_Tp>(_M_data), _M_size);\n   }\n \n   template<typename _Tp>\n   inline valarray<_Tp>::valarray (const indirect_array<_Tp>& __ia)\n-      : _M_size(__ia._M_sz),\n-        _M_data(static_cast<_Tp*__restrict__>\n-                (__valarray_get_memory(__ia._M_sz * sizeof (_Tp))))\n+    : _M_size(__ia._M_sz), _M_data(__valarray_get_storage<_Tp>(__ia._M_sz))\n   {\n-      __valarray_copy_construct\n-          (__ia._M_array, __ia._M_index, _Array<_Tp>(_M_data), _M_size);\n+    __valarray_copy_construct\n+      (__ia._M_array, __ia._M_index, _Array<_Tp>(_M_data), _M_size);\n   }\n \n   template<typename _Tp> template<class _Dom>\n   inline valarray<_Tp>::valarray (const _Expr<_Dom, _Tp>& __e)\n-      : _M_size(__e.size ()),\n-        _M_data(static_cast<_Tp*__restrict__>\n-                (__valarray_copy_construct(_M_size * sizeof (_Tp))))\n+    : _M_size(__e.size ()), _M_data(__valarray_get_storage<_Tp>(_M_size))\n   { __valarray_copy_construct (__e, _M_size, _Array<_Tp>(_M_data)); }\n \n   template<typename _Tp>\n@@ -536,20 +519,17 @@ namespace std {\n   inline void\n   valarray<_Tp>::resize (size_t __n, _Tp __c)\n   {\n-      if (_M_size != __n) {\n-          __valarray_destroy_elements(_M_data, _M_data + _M_size);\n-          __valarray_release_memory(_M_data);\n-          _M_size = __n;\n-          _M_data = static_cast<_Tp*__restrict__>\n-              (__valarray_get_memory(__n * sizeof (_Tp)));\n-          __valarray_fill_construct(_M_data, _M_data + __n, __c);\n-      }\n-      else {\n-          // this is so to make valarray<valarray<T> > work\n-          // even though it is not required by the standard.\n-          __valarray_destroy_elements(_M_data, _M_data + _M_size);\n-          __valarray_fill_construct(_M_data, _M_data + _M_size, __c);\n+    // This complication is so to make valarray<valarray<T> > work\n+    // even though it is not required by the standard.  Nobody should\n+    // be saying valarray<valarray<T> > anyway.  See the specs.\n+    __valarray_destroy_elements(_M_data, _M_data + _M_size);\n+    if (_M_size != __n)\n+      {\n+        __valarray_release_memory(_M_data);\n+        _M_size = __n;\n+        _M_data = __valarray_get_storage<_Tp>(__n);\n       }\n+    __valarray_fill_construct(_M_data, _M_data + __n, __c);\n   }\n     \n   template<typename _Tp>"}, {"sha": "5a792d29c827a8a008f9305942800260e2356f30", "filename": "libstdc++-v3/bits/valarray_array.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4c4ae6f2f2d677ae919dd5df22512f627ecaf81/libstdc%2B%2B-v3%2Fbits%2Fvalarray_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4c4ae6f2f2d677ae919dd5df22512f627ecaf81/libstdc%2B%2B-v3%2Fbits%2Fvalarray_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fvalarray_array.h?ref=d4c4ae6f2f2d677ae919dd5df22512f627ecaf81", "patch": "@@ -50,6 +50,14 @@ namespace std\n   __valarray_get_memory(size_t __n)\n   { return operator new(__n); }\n   \n+  template<typename _Tp>\n+  inline _Tp*__restrict__\n+  __valarray_get_storage(size_t __n)\n+  {\n+    return static_cast<_Tp*__restrict__>\n+      (__valarray_get_memory(__n * sizeof(_Tp)));\n+  }\n+\n   // Return memory to the system\n   inline void\n   __valarray_release_memory(void* __p)\n@@ -352,7 +360,7 @@ namespace std\n   template<typename _Tp>\n   inline\n   _Array<_Tp>::_Array (size_t __n)\n-      : _M_data(__valarray_get_memory(__n * sizeof (_Tp)))\n+    : _M_data(__valarray_get_storage<_Tp>(__n))\n   { __valarray_default_construct(_M_data, _M_data + __n); }\n \n   template<typename _Tp>\n@@ -366,7 +374,7 @@ namespace std\n   template<typename _Tp>\n   inline\n   _Array<_Tp>::_Array (const _Tp* __restrict__ __b, size_t __s) \n-      : _M_data(__valarray_get_memory(__s * sizeof (_Tp)))\n+    : _M_data(__valarray_get_storage<_Tp>(__s))\n   { __valarray_copy_construct(__b, __s, _M_data); }\n \n   template<typename _Tp>"}, {"sha": "94d1188e5239d4f50b602867557005a8a97206bd", "filename": "libstdc++-v3/src/valarray-inst.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4c4ae6f2f2d677ae919dd5df22512f627ecaf81/libstdc%2B%2B-v3%2Fsrc%2Fvalarray-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4c4ae6f2f2d677ae919dd5df22512f627ecaf81/libstdc%2B%2B-v3%2Fsrc%2Fvalarray-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fvalarray-inst.cc?ref=d4c4ae6f2f2d677ae919dd5df22512f627ecaf81", "patch": "@@ -22,14 +22,13 @@ namespace std\n     inline size_t\n     __valarray_product(const valarray<size_t>& __a)\n     {\n+        typedef const size_t* __restrict__ _Tp;\n+        const size_t __n = __a.size();\n         // XXX: This ugly cast is necessary because\n         //      valarray::operator[]() const return a VALUE!\n         //      Try to get the committee to correct that gross error.\n-        typedef const size_t* __restrict__ _Tp;\n-        size_t __n = __a.size() - 1;\n         valarray<size_t>& __t = const_cast<valarray<size_t>&>(__a);\n-        return __valarray_product(static_cast<_Tp>(&__t[0]),\n-                                  static_cast<_Tp>(&__t[__n]));\n+        return __valarray_product(&__t[0], &__t[0] + __n);\n     }\n     \n     void __gslice_to_index(size_t __o, const valarray<size_t>& __l,"}]}