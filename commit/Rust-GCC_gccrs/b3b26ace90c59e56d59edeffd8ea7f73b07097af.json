{"sha": "b3b26ace90c59e56d59edeffd8ea7f73b07097af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNiMjZhY2U5MGM1OWU1NmQ1OWVkZWZmZDhlYTdmNzNiMDcwOTdhZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-18T09:05:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-18T09:05:04Z"}, "message": "[multiple changes]\n\n2014-07-18  Robert Dewar  <dewar@adacore.com>\n\n\t* bcheck.adb (Check_Consistent_Restrictions):\n\tRemove obsolete code checking for violation of\n\tNo_Standard_Allocators_After_Elaboration (main program)\n\t* bindgen.adb (Gen_Adainit): Handle\n\tNo_Standard_Allocators_After_Elaboration\n\t(Gen_Output_File_Ada): ditto.\n\t* exp_ch4.adb (Expand_N_Allocator): Handle\n\tNo_Standard_Allocators_After_Elaboration.\n\t* Makefile.rtl: Add entry for s-elaall\n\t* rtsfind.ads: Add entry for Check_Standard_Allocator.\n\t* s-elaall.ads, s-elaall.adb: New files.\n\t* sem_ch4.adb (Analyze_Allocator): Handle\n\tNo_Standard_Allocators_After_Elaboration.\n\n2014-07-18  Robert Dewar  <dewar@adacore.com>\n\n\t* lib.adb, lib.ads, lib-writ.adb, lib-writ.ads, ali.adb,\n\tali.ads, lib-load.adb: Remove Lib.Has_Allocator and all uses.\n\tRemove AB parameter from ali files and all uses.\n\tRemove Allocator_In_Body and all uses.\n\n2014-07-18  Robert Dewar  <dewar@adacore.com>\n\n\t* g-expect-vms.adb: Add comment.\n\n2014-07-18  Thomas Quinot  <quinot@adacore.com>\n\n\t* par_sco.adb (Is_Logical_Operation): return True for\n\tN_If_Expression.\n\n2014-07-18  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb (Resolve_Attribute, case 'Update): Do full\n\tanalysis and resolution of each choice in the associations within\n\tthe argument of Update, because they may be variable names.\n\n2014-07-18  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_attr.adb (Expand_Loop_Entry_Attribute): Insert any condition\n\tactions before the generated if statement.\n\n2014-07-18  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* gnat_ugn.texi Enhance the documentation of\n\tswitches -gnateA and -gnateV.\n\n2014-07-18  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.adb (Build_Default_Subtype): Add missing condition\n\tso that code matches description: use the full view of the base\n\tonly if the base is private and the subtype is not.\n\nFrom-SVN: r212779", "tree": {"sha": "0cf2f23c15136334abbb91e7669863ba1839f2cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cf2f23c15136334abbb91e7669863ba1839f2cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3b26ace90c59e56d59edeffd8ea7f73b07097af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3b26ace90c59e56d59edeffd8ea7f73b07097af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3b26ace90c59e56d59edeffd8ea7f73b07097af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3b26ace90c59e56d59edeffd8ea7f73b07097af/comments", "author": null, "committer": null, "parents": [{"sha": "537b531270c1c41918d3781c151fe38bb8c63c50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/537b531270c1c41918d3781c151fe38bb8c63c50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/537b531270c1c41918d3781c151fe38bb8c63c50"}], "stats": {"total": 441, "additions": 344, "deletions": 97}, "files": [{"sha": "632da87f74554468db5025265e174e1444f2d21c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b3b26ace90c59e56d59edeffd8ea7f73b07097af", "patch": "@@ -1,3 +1,57 @@\n+2014-07-18  Robert Dewar  <dewar@adacore.com>\n+\n+\t* bcheck.adb (Check_Consistent_Restrictions):\n+\tRemove obsolete code checking for violation of\n+\tNo_Standard_Allocators_After_Elaboration (main program)\n+\t* bindgen.adb (Gen_Adainit): Handle\n+\tNo_Standard_Allocators_After_Elaboration\n+\t(Gen_Output_File_Ada): ditto.\n+\t* exp_ch4.adb (Expand_N_Allocator): Handle\n+\tNo_Standard_Allocators_After_Elaboration.\n+\t* Makefile.rtl: Add entry for s-elaall\n+\t* rtsfind.ads: Add entry for Check_Standard_Allocator.\n+\t* s-elaall.ads, s-elaall.adb: New files.\n+\t* sem_ch4.adb (Analyze_Allocator): Handle\n+\tNo_Standard_Allocators_After_Elaboration.\n+\n+2014-07-18  Robert Dewar  <dewar@adacore.com>\n+\n+\t* lib.adb, lib.ads, lib-writ.adb, lib-writ.ads, ali.adb,\n+\tali.ads, lib-load.adb: Remove Lib.Has_Allocator and all uses.\n+\tRemove AB parameter from ali files and all uses.\n+\tRemove Allocator_In_Body and all uses.\n+\n+2014-07-18  Robert Dewar  <dewar@adacore.com>\n+\n+\t* g-expect-vms.adb: Add comment.\n+\n+2014-07-18  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* par_sco.adb (Is_Logical_Operation): return True for\n+\tN_If_Expression.\n+\n+2014-07-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Resolve_Attribute, case 'Update): Do full\n+\tanalysis and resolution of each choice in the associations within\n+\tthe argument of Update, because they may be variable names.\n+\n+2014-07-18  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_attr.adb (Expand_Loop_Entry_Attribute): Insert any condition\n+\tactions before the generated if statement.\n+\n+2014-07-18  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* gnat_ugn.texi Enhance the documentation of\n+\tswitches -gnateA and -gnateV.\n+\n+2014-07-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb (Build_Default_Subtype): Add missing condition\n+\tso that code matches description: use the full view of the base\n+\tonly if the base is private and the subtype is not.\n+\n 2014-07-17  Gary Dismukes  <dismukes@adacore.com>\n \n \t* exp_disp.adb: Minor reformatting."}, {"sha": "a40dff5eeeaa3c89a01d44b20c64ec7317834d70", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=b3b26ace90c59e56d59edeffd8ea7f73b07097af", "patch": "@@ -518,6 +518,7 @@ GNATRTL_NONTASKING_OBJS= \\\n   s-direio$(objext) \\\n   s-dmotpr$(objext) \\\n   s-dsaser$(objext) \\\n+  s-elaall$(objext) \\\n   s-excdeb$(objext) \\\n   s-except$(objext) \\\n   s-exctab$(objext) \\"}, {"sha": "b90c5c04da7d00ffc9913e2949ed202d8ccd6a10", "filename": "gcc/ada/ali.adb", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fali.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fali.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.adb?ref=b3b26ace90c59e56d59edeffd8ea7f73b07097af", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -894,7 +894,6 @@ package body ALI is\n         Sfile                        => No_File,\n         Task_Dispatching_Policy      => ' ',\n         Time_Slice_Value             => -1,\n-        Allocator_In_Body            => False,\n         WC_Encoding                  => 'b',\n         Unit_Exception_Table         => False,\n         Ver                          => (others => ' '),\n@@ -977,14 +976,6 @@ package body ALI is\n \n                Skip_Space;\n \n-               if Nextc = 'A' then\n-                  P := P + 1;\n-                  Checkc ('B');\n-                  ALIs.Table (Id).Allocator_In_Body := True;\n-               end if;\n-\n-               Skip_Space;\n-\n                if Nextc = 'C' then\n                   P := P + 1;\n                   Checkc ('=');"}, {"sha": "1d7e159ef2218a97d2fa822235d2a23805740afb", "filename": "gcc/ada/ali.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fali.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fali.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.ads?ref=b3b26ace90c59e56d59edeffd8ea7f73b07097af", "patch": "@@ -142,10 +142,6 @@ package ALI is\n       --  line. A value of -1 indicates that no T=xxx parameter was found, or\n       --  no M line was present. Not set if 'M' appears in Ignore_Lines.\n \n-      Allocator_In_Body : Boolean;\n-      --  Set True if an AB switch appears on the main program line. False\n-      --  if no M line, or AB not present, or 'M appears in Ignore_Lines.\n-\n       WC_Encoding : Character;\n       --  Wide character encoding if main procedure. Otherwise not relevant.\n       --  Not set if 'M' appears in Ignore_Lines."}, {"sha": "0e81ee650e9eaf85b0ddac6719f89fc4469fa18e", "filename": "gcc/ada/bcheck.adb", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fbcheck.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fbcheck.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbcheck.adb?ref=b3b26ace90c59e56d59edeffd8ea7f73b07097af", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -923,21 +923,18 @@ package body Bcheck is\n    --  Start of processing for Check_Consistent_Restrictions\n \n    begin\n-      --  A special test, if we have a main program, then if it has an\n-      --  allocator in the body, this is considered to be a violation of\n-      --  the restriction No_Allocators_After_Elaboration. We just mark\n-      --  this restriction and then the normal circuit will flag it.\n-\n-      if Bind_Main_Program\n-        and then ALIs.Table (ALIs.First).Main_Program /= None\n-        and then not No_Main_Subprogram\n-        and then ALIs.Table (ALIs.First).Allocator_In_Body\n-      then\n-         Cumulative_Restrictions.Violated\n-           (No_Standard_Allocators_After_Elaboration) := True;\n-         ALIs.Table (ALIs.First).Restrictions.Violated\n-           (No_Standard_Allocators_After_Elaboration) := True;\n-      end if;\n+      --  We used to have a special test here:\n+\n+         --  A special test, if we have a main program, then if it has an\n+         --  allocator in the body, this is considered to be a violation of\n+         --  the restriction No_Allocators_After_Elaboration. We just mark\n+         --  this restriction and then the normal circuit will flag it.\n+\n+      --  But we don't do that any more, because in the final version of Ada\n+      --  2012, it is statically illegal to have an allocator in a library-\n+      --  level subprogram, so we don't need this bind time test any more.\n+      --  If we have a main program with parameters (which GNAT allows), then\n+      --  allocators in that will be caught by the run-time check.\n \n       --  Loop through all restriction violations\n "}, {"sha": "f045b8e02359e045051075cd30b304bcef27efe2", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=b3b26ace90c59e56d59edeffd8ea7f73b07097af", "patch": "@@ -739,8 +739,8 @@ package body Bindgen is\n          if Dispatching_Domains_Used then\n             WBI (\"      procedure Freeze_Dispatching_Domains;\");\n             WBI (\"      pragma Import\");\n-            WBI (\"        (Ada, Freeze_Dispatching_Domains, \" &\n-                 \"\"\"__gnat_freeze_dispatching_domains\"\");\");\n+            WBI (\"        (Ada, Freeze_Dispatching_Domains, \"\n+                 & \"\"\"__gnat_freeze_dispatching_domains\"\");\");\n          end if;\n \n          WBI (\"   begin\");\n@@ -749,6 +749,18 @@ package body Bindgen is\n          WBI (\"      end if;\");\n          WBI (\"      Is_Elaborated := True;\");\n \n+         --  Call System.Elaboration_Allocators.Mark_Start_Of_Elaboration if\n+         --  restriction No_Standard_Allocators_After_Elaboration is active.\n+\n+         if Cumulative_Restrictions.Set\n+              (No_Standard_Allocators_After_Elaboration)\n+         then\n+            WBI (\"      System.Elaboration_Allocators.\"\n+                 & \"Mark_Start_Of_Elaboration;\");\n+         end if;\n+\n+         --  Generate assignments to initialize globals\n+\n          Set_String (\"      Main_Priority := \");\n          Set_Int    (Main_Priority);\n          Set_Char   (';');\n@@ -996,6 +1008,15 @@ package body Bindgen is\n \n       Gen_Elab_Calls;\n \n+      --  Call System.Elaboration_Allocators.Mark_Start_Of_Elaboration if\n+      --  restriction No_Standard_Allocators_After_Elaboration is active.\n+\n+      if Cumulative_Restrictions.Set\n+        (No_Standard_Allocators_After_Elaboration)\n+      then\n+         WBI (\"      System.Elaboration_Allocators.Mark_End_Of_Elaboration;\");\n+      end if;\n+\n       --  From this point, no new dispatching domain can be created.\n \n       if Dispatching_Domains_Used then\n@@ -2482,10 +2503,23 @@ package body Bindgen is\n          WBI (\"with System.Restrictions;\");\n       end if;\n \n+      --  Generate with of Ada.Exceptions if needs library finalization\n+\n       if Needs_Library_Finalization then\n          WBI (\"with Ada.Exceptions;\");\n       end if;\n \n+      --  Generate with of System.Elaboration_Allocators if the restriction\n+      --  No_Standard_Allocators_After_Elaboration was present.\n+\n+      if Cumulative_Restrictions.Set\n+           (No_Standard_Allocators_After_Elaboration)\n+      then\n+         WBI (\"with System.Elaboration_Allocators;\");\n+      end if;\n+\n+      --  Generate start of package body\n+\n       WBI (\"\");\n       WBI (\"package body \" & Ada_Main & \" is\");\n       WBI (\"   pragma Warnings (Off);\");"}, {"sha": "1585b7d4a09fd354be76886a663ab2c12b2f7766", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=b3b26ace90c59e56d59edeffd8ea7f73b07097af", "patch": "@@ -801,7 +801,7 @@ package body Exp_Attr is\n             pragma Assert\n               (Nkind (Parent (Loop_Stmt)) = N_Handled_Sequence_Of_Statements\n                 and then Nkind (Parent (Parent (Loop_Stmt))) =\n-                                                      N_Block_Statement);\n+                           N_Block_Statement);\n \n             Decls := Declarations (Parent (Parent (Loop_Stmt)));\n          end if;\n@@ -1022,6 +1022,19 @@ package body Exp_Attr is\n \n       if Present (Result) then\n          Rewrite (Loop_Stmt, Result);\n+\n+         --  The insertion of condition actions associated with an iteration\n+         --  scheme is usually done by the expansion of loop statements. The\n+         --  expansion of Loop_Entry however reuses the iteration scheme to\n+         --  build an if statement. As a result any condition actions must be\n+         --  inserted before the if statement to avoid references before\n+         --  declaration.\n+\n+         if Present (Scheme) and then Present (Condition_Actions (Scheme)) then\n+            Insert_Actions (Loop_Stmt, Condition_Actions (Scheme));\n+            Set_Condition_Actions (Scheme, No_List);\n+         end if;\n+\n          Analyze (Loop_Stmt);\n \n       --  The conditional block was analyzed when a previous 'Loop_Entry was"}, {"sha": "917f98a0e73dd4edccde84233dbeb417f90c21f8", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=b3b26ace90c59e56d59edeffd8ea7f73b07097af", "patch": "@@ -4490,6 +4490,20 @@ package body Exp_Ch4 is\n          end if;\n       end if;\n \n+      --  If no storage pool has been specified and we have the restriction\n+      --  No_Standard_Allocators_After_Elaboration is present, then generate\n+      --  a call to Elaboration_Allocators.Check_Standard_Allocator.\n+\n+      if Nkind (N) = N_Allocator\n+        and then No (Storage_Pool (N))\n+        and then Restriction_Active (No_Standard_Allocators_After_Elaboration)\n+      then\n+         Insert_Action (N,\n+           Make_Procedure_Call_Statement (Loc,\n+             Name =>\n+               New_Occurrence_Of (RTE (RE_Check_Standard_Allocator), Loc)));\n+      end if;\n+\n       --  Handle case of qualified expression (other than optimization above)\n       --  First apply constraint checks, because the bounds or discriminants\n       --  in the aggregate might not match the subtype mark in the allocator."}, {"sha": "cbffb57413699c75a27706ba72c9b24bc2831f89", "filename": "gcc/ada/g-expect-vms.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fg-expect-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fg-expect-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-expect-vms.adb?ref=b3b26ace90c59e56d59edeffd8ea7f73b07097af", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2010, AdaCore                     --\n+--                     Copyright (C) 2002-2014, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,6 +31,9 @@\n \n --  This is the VMS version\n \n+--  Note: there is far too much code duplication wrt g-expect.adb (the\n+--  standard version). This should be factored out ???\n+\n with System;       use System;\n with Ada.Calendar; use Ada.Calendar;\n "}, {"sha": "629fac816335dcc6c0604fc926203f0b5d2c9149", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=b3b26ace90c59e56d59edeffd8ea7f73b07097af", "patch": "@@ -3769,7 +3769,37 @@ also suppress generation of cross-reference information\n \n @item ^-gnateA^/ALIASING_CHECK^\n @cindex @option{-gnateA} (@command{gcc})\n-Check that there is no aliasing between two parameters of the same subprogram.\n+Check that the actual parameters of a subprogram call are not aliases of one\n+another. To qualify as aliasing, the actuals must denote objects of a composite\n+type, their memory locations must be identical or overlapping, and at least one\n+of the corresponding formal parameters must be of mode OUT or IN OUT.\n+\n+@smallexample\n+type Rec_Typ is record\n+   Data : Integer := 0;\n+end record;\n+\n+function Self (Val : Rec_Typ) return Rec_Typ is\n+begin\n+   return Val;\n+end Self;\n+\n+procedure Detect_Aliasing (Val_1 : in out Rec_Typ; Val_2 : Rec_Typ) is\n+begin\n+   null;\n+end Detect_Aliasing;\n+\n+Obj : Rec_Typ;\n+\n+Detect_Aliasing (Obj, Obj);\n+Detect_Aliasing (Obj, Self (Obj));\n+@end smallexample\n+\n+In the example above, the first call to @code{Detect_Aliasing} fails with a\n+@code{Program_Error} at runtime because the actuals for @code{Val_1} and\n+@code{Val_2} denote the same object. The second call executes without raising\n+an exception because @code{Self(Obj)} produces an anonymous object which does\n+not share the memory location of @code{Obj}.\n \n @item -gnatec=@var{path}\n @cindex @option{-gnatec} (@command{gcc})\n@@ -3991,7 +4021,8 @@ support this switch.\n \n @item ^-gnateV^/PARAMETER_VALIDITY_CHECK^\n @cindex @option{-gnateV} (@command{gcc})\n-Check validity of subprogram parameters.\n+Check that all actual parameters of a subprogram call are valid according to\n+the rules of validity checking (@pxref{Validity Checking}).\n \n @item ^-gnateY^/IGNORE_SUPPRESS_SYLE_CHECK_PRAGMAS^\n @cindex @option{-gnateY} (@command{gcc})"}, {"sha": "262cefe00a78f4446d78952c4572db2749f6f401", "filename": "gcc/ada/lib-load.adb", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Flib-load.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Flib-load.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-load.adb?ref=b3b26ace90c59e56d59edeffd8ea7f73b07097af", "patch": "@@ -214,7 +214,6 @@ package body Lib.Load is\n         Expected_Unit     => Spec_Name,\n         Fatal_Error       => True,\n         Generate_Code     => False,\n-        Has_Allocator     => False,\n         Has_RACW          => False,\n         Filler            => False,\n         Ident_String      => Empty,\n@@ -321,7 +320,6 @@ package body Lib.Load is\n            Expected_Unit     => No_Unit_Name,\n            Fatal_Error       => False,\n            Generate_Code     => False,\n-           Has_Allocator     => False,\n            Has_RACW          => False,\n            Filler            => False,\n            Ident_String      => Empty,\n@@ -685,7 +683,6 @@ package body Lib.Load is\n               Expected_Unit     => Uname_Actual,\n               Fatal_Error       => False,\n               Generate_Code     => False,\n-              Has_Allocator     => False,\n               Has_RACW          => False,\n               Filler            => False,\n               Ident_String      => Empty,"}, {"sha": "df57c65ba7c24f02641d9fb5c38f14d496399991", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=b3b26ace90c59e56d59edeffd8ea7f73b07097af", "patch": "@@ -82,7 +82,6 @@ package body Lib.Writ is\n          Dynamic_Elab      => False,\n          Fatal_Error       => False,\n          Generate_Code     => False,\n-         Has_Allocator     => False,\n          Has_RACW          => False,\n          Filler            => False,\n          Ident_String      => Empty,\n@@ -140,7 +139,6 @@ package body Lib.Writ is\n         Dynamic_Elab      => False,\n         Fatal_Error       => False,\n         Generate_Code     => False,\n-        Has_Allocator     => False,\n         Has_RACW          => False,\n         Filler            => False,\n         Ident_String      => Empty,\n@@ -1020,10 +1018,6 @@ package body Lib.Writ is\n                Write_Info_Nat (Opt.Time_Slice_Value);\n             end if;\n \n-            if Has_Allocator (Main_Unit) then\n-               Write_Info_Str (\" AB\");\n-            end if;\n-\n             if Main_CPU (Main_Unit) /= Default_Main_CPU then\n                Write_Info_Str (\" C=\");\n                Write_Info_Nat (Main_CPU (Main_Unit));"}, {"sha": "dd62a6903cca5e15859de67791b10c0546e78735", "filename": "gcc/ada/lib-writ.ads", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Flib-writ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Flib-writ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.ads?ref=b3b26ace90c59e56d59edeffd8ea7f73b07097af", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -116,7 +116,7 @@ package Lib.Writ is\n    --  -- M  Main Program --\n    --  ---------------------\n \n-   --    M type [priority] [T=time-slice] [AB] [C=cpu] W=?\n+   --    M type [priority] [T=time-slice] [C=cpu] W=?\n \n    --      This line appears only if the main unit for this file is suitable\n    --      for use as a main program. The parameters are:\n@@ -141,14 +141,6 @@ package Lib.Writ is\n    --          milliseconds. The actual significance of this parameter is\n    --          target dependent.\n \n-   --        AB\n-\n-   --          Present if there is an allocator in the body of the procedure\n-   --          after the BEGIN. This will be a violation of the restriction\n-   --          No_Allocators_After_Elaboration if it is present, and this\n-   --          unit is used as a main program (only the binder can find the\n-   --          violation, since only the binder knows the main program).\n-\n    --        C=cpu\n \n    --          Present only if there was a valid pragma CPU in the"}, {"sha": "296a6b9a1d14493de635570b9a495772e5e6d704", "filename": "gcc/ada/lib.adb", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Flib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Flib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.adb?ref=b3b26ace90c59e56d59edeffd8ea7f73b07097af", "patch": "@@ -116,11 +116,6 @@ package body Lib is\n       return Units.Table (U).Generate_Code;\n    end Generate_Code;\n \n-   function Has_Allocator (U : Unit_Number_Type) return Boolean is\n-   begin\n-      return Units.Table (U).Has_Allocator;\n-   end Has_Allocator;\n-\n    function Has_RACW (U : Unit_Number_Type) return Boolean is\n    begin\n       return Units.Table (U).Has_RACW;\n@@ -206,11 +201,6 @@ package body Lib is\n       Units.Table (U).Generate_Code := B;\n    end Set_Generate_Code;\n \n-   procedure Set_Has_Allocator (U : Unit_Number_Type; B : Boolean := True) is\n-   begin\n-      Units.Table (U).Has_Allocator := B;\n-   end Set_Has_Allocator;\n-\n    procedure Set_Has_RACW (U : Unit_Number_Type; B : Boolean := True) is\n    begin\n       Units.Table (U).Has_RACW := B;"}, {"sha": "fea2f14a1d7033e6d1ab46abd3e35225b60e7669", "filename": "gcc/ada/lib.ads", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Flib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Flib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.ads?ref=b3b26ace90c59e56d59edeffd8ea7f73b07097af", "patch": "@@ -316,10 +316,6 @@ package Lib is\n    --      code is to be generated. This includes the unit explicitly compiled,\n    --      together with its specification, and any subunits.\n \n-   --    Has_Allocator\n-   --      This flag is set if a subprogram unit has an allocator after the\n-   --      BEGIN (it is used to set the AB flag in the M ALI line).\n-\n    --    Has_RACW\n    --      A Boolean flag, initially set to False when a unit entry is created,\n    --      and set to True if the unit defines a remote access to class wide\n@@ -409,7 +405,6 @@ package Lib is\n    function Fatal_Error       (U : Unit_Number_Type) return Boolean;\n    function Generate_Code     (U : Unit_Number_Type) return Boolean;\n    function Ident_String      (U : Unit_Number_Type) return Node_Id;\n-   function Has_Allocator     (U : Unit_Number_Type) return Boolean;\n    function Has_RACW          (U : Unit_Number_Type) return Boolean;\n    function Loading           (U : Unit_Number_Type) return Boolean;\n    function Main_CPU          (U : Unit_Number_Type) return Int;\n@@ -428,7 +423,6 @@ package Lib is\n    procedure Set_Fatal_Error       (U : Unit_Number_Type; B : Boolean := True);\n    procedure Set_Generate_Code     (U : Unit_Number_Type; B : Boolean := True);\n    procedure Set_Has_RACW          (U : Unit_Number_Type; B : Boolean := True);\n-   procedure Set_Has_Allocator     (U : Unit_Number_Type; B : Boolean := True);\n    procedure Set_Ident_String      (U : Unit_Number_Type; N : Node_Id);\n    procedure Set_Loading           (U : Unit_Number_Type; B : Boolean := True);\n    procedure Set_Main_CPU          (U : Unit_Number_Type; P : Int);\n@@ -726,7 +720,6 @@ private\n    pragma Inline (Dependency_Num);\n    pragma Inline (Fatal_Error);\n    pragma Inline (Generate_Code);\n-   pragma Inline (Has_Allocator);\n    pragma Inline (Has_RACW);\n    pragma Inline (Increment_Serial_Number);\n    pragma Inline (Loading);\n@@ -738,7 +731,6 @@ private\n    pragma Inline (Set_Cunit_Entity);\n    pragma Inline (Set_Fatal_Error);\n    pragma Inline (Set_Generate_Code);\n-   pragma Inline (Set_Has_Allocator);\n    pragma Inline (Set_Has_RACW);\n    pragma Inline (Set_Loading);\n    pragma Inline (Set_Main_CPU);\n@@ -770,7 +762,6 @@ private\n       Dynamic_Elab      : Boolean;\n       Filler            : Boolean;\n       Loading           : Boolean;\n-      Has_Allocator     : Boolean;\n       OA_Setting        : Character;\n       SPARK_Mode_Pragma : Node_Id;\n    end record;\n@@ -798,10 +789,9 @@ private\n       Generate_Code     at 57 range 0 ..  7;\n       Has_RACW          at 58 range 0 ..  7;\n       Dynamic_Elab      at 59 range 0 ..  7;\n-      Filler            at 60 range 0 ..  7;\n-      OA_Setting        at 61 range 0 ..  7;\n-      Loading           at 62 range 0 ..  7;\n-      Has_Allocator     at 63 range 0 ..  7;\n+      Filler            at 60 range 0 ..  15;\n+      OA_Setting        at 62 range 0 ..  7;\n+      Loading           at 63 range 0 ..  7;\n       SPARK_Mode_Pragma at 64 range 0 .. 31;\n    end record;\n "}, {"sha": "8712ba627a4290c9e7fda658ae499aca346df2be", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=b3b26ace90c59e56d59edeffd8ea7f73b07097af", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2009-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2009-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -357,7 +357,7 @@ package body Par_SCO is\n \n    function Is_Logical_Operator (N : Node_Id) return Boolean is\n    begin\n-      return Nkind_In (N, N_Op_Not, N_And_Then, N_Or_Else);\n+      return Nkind_In (N, N_Op_Not, N_And_Then, N_Or_Else, N_If_Expression);\n    end Is_Logical_Operator;\n \n    -----------------------"}, {"sha": "72bbd025db8802283adc6efd7e03e0eed04c867c", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=b3b26ace90c59e56d59edeffd8ea7f73b07097af", "patch": "@@ -241,6 +241,7 @@ package Rtsfind is\n       System_Dim,\n       System_DSA_Services,\n       System_DSA_Types,\n+      System_Elaboration_Allocators,\n       System_Exception_Table,\n       System_Exceptions_Debug,\n       System_Exn_Int,\n@@ -856,6 +857,8 @@ package Rtsfind is\n \n      RE_Any_Container_Ptr,               -- System.DSA_Types\n \n+     RE_Check_Standard_Allocator,        -- System.Elaboration_Allocators\n+\n      RE_Register_Exception,              -- System.Exception_Table\n \n      RE_Local_Raise,                     -- System.Exceptions_Debug\n@@ -2141,6 +2144,8 @@ package Rtsfind is\n \n      RE_Any_Container_Ptr                => System_DSA_Types,\n \n+     RE_Check_Standard_Allocator         => System_Elaboration_Allocators,\n+\n      RE_Register_Exception               => System_Exception_Table,\n \n      RE_Local_Raise                      => System_Exceptions_Debug,"}, {"sha": "8160cf3594c84122dbef9bdbea9cdb99a1a9b54d", "filename": "gcc/ada/s-elaall.adb", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fs-elaall.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fs-elaall.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-elaall.adb?ref=b3b26ace90c59e56d59edeffd8ea7f73b07097af", "patch": "@@ -0,0 +1,72 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--         S Y S T E M . E L A B O R A T I O N _ A L L O C A T O R S        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--            Copyright (C) 2014, Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package body System.Elaboration_Allocators is\n+\n+   Elaboration_In_Progress : Boolean;\n+   pragma Atomic (Elaboration_In_Progress);\n+   --  Flag to show if elaboration is active. We don't attempt to initialize\n+   --  this because we want to be sure it gets reset if we are in a multiple\n+   --  elaboration situation of some kind. Make it atomic to prevent race\n+   --  conditions of any kind (not clearly necessary, but harmless!)\n+\n+   ------------------------------\n+   -- Check_Standard_Allocator --\n+   ------------------------------\n+\n+   procedure Check_Standard_Allocator is\n+   begin\n+      if not Elaboration_In_Progress then\n+         raise Program_Error with\n+           \"standard allocator after elaboration is complete is not allowed \"\n+           & \"(No_Standard_Allocators_After_Elaboration restriction active)\";\n+      end if;\n+   end Check_Standard_Allocator;\n+\n+   -----------------------------\n+   -- Mark_End_Of_Elaboration --\n+   -----------------------------\n+\n+   procedure Mark_End_Of_Elaboration is\n+   begin\n+      Elaboration_In_Progress := False;\n+   end Mark_End_Of_Elaboration;\n+\n+   -------------------------------\n+   -- Mark_Start_Of_Elaboration --\n+   -------------------------------\n+\n+   procedure Mark_Start_Of_Elaboration is\n+   begin\n+      Elaboration_In_Progress := True;\n+   end Mark_Start_Of_Elaboration;\n+\n+end System.Elaboration_Allocators;"}, {"sha": "f1cf62002da85d86e9710bf70d3d6690d2499fa2", "filename": "gcc/ada/s-elaall.ads", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fs-elaall.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fs-elaall.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-elaall.ads?ref=b3b26ace90c59e56d59edeffd8ea7f73b07097af", "patch": "@@ -0,0 +1,57 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--         S Y S T E M . E L A B O R A T I O N _ A L L O C A T O R S        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--            Copyright (C) 2014, Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides the interfaces for proper handling of restriction\n+--  No_Standard_Allocators_After_Elaboration. It is used only by programs\n+--  which use this restriction.\n+\n+package System.Elaboration_Allocators is\n+   pragma Preelaborate;\n+\n+   procedure Mark_Start_Of_Elaboration;\n+   --  Called right at the start of main elaboration if the program activates\n+   --  restriction No_Standard_Allocators_After_Elaboration. We don't want to\n+   --  rely on the normal elaboration mechanism for marking this event, since\n+   --  that would require us to be sure to elaborate this first, which would\n+   --  be awkward, and it is convenient to have this package be Preelaborate.\n+\n+   procedure Mark_End_Of_Elaboration;\n+   --  Called when main elaboration is complete if the program has activated\n+   --  restriction No_Standard_Allocators_After_Elaboration. This is the point\n+   --  beyond which any standard allocator use will violate the restriction.\n+\n+   procedure Check_Standard_Allocator;\n+   --  Called as part of every allocator in a program for which the restriction\n+   --  No_Standard_Allocators_After_Elaboration is active. This will raise an\n+   --  exception (Program_Error with an appropriate message) if it is called\n+   --  after the call to Mark_End_Of_Elaboration.\n+\n+end System.Elaboration_Allocators;"}, {"sha": "8bd19df4ed5b672809fd4ed6bdaab86bd5cc0f0d", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=b3b26ace90c59e56d59edeffd8ea7f73b07097af", "patch": "@@ -10828,7 +10828,8 @@ package body Sem_Attr is\n                      --  may be a subtype (e.g. given by a slice).\n \n                      --  Choices may also be identifiers with no staticness\n-                     --  requirements, in which case rules are unclear???\n+                     --  requirements, in which case they must resolve to the\n+                     --  index type.\n \n                      declare\n                         C    : Node_Id;\n@@ -10841,14 +10842,17 @@ package body Sem_Attr is\n                            Indx := First_Index (Etype (Prefix (N)));\n \n                            if Nkind (C) /= N_Aggregate then\n-                              Set_Etype (C, Etype (Indx));\n+                              Analyze_And_Resolve (C, Etype (Indx));\n+                              Apply_Constraint_Check (C, Etype (Indx));\n                               Check_Non_Static_Context (C);\n \n                            else\n                               C_E := First (Expressions (C));\n                               while Present (C_E) loop\n-                                 Set_Etype (C_E, Etype (Indx));\n+                                 Analyze_And_Resolve (C_E, Etype (Indx));\n+                                 Apply_Constraint_Check (C_E, Etype (Indx));\n                                  Check_Non_Static_Context (C_E);\n+\n                                  Next (C_E);\n                                  Next_Index (Indx);\n                               end loop;"}, {"sha": "e45d2196975d4743abca4d246cf11cf53f9f9970", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=b3b26ace90c59e56d59edeffd8ea7f73b07097af", "patch": "@@ -400,6 +400,7 @@ package body Sem_Ch4 is\n       Type_Id  : Entity_Id;\n       P        : Node_Id;\n       C        : Node_Id;\n+      Onode    : Node_Id;\n \n    begin\n       Check_SPARK_Restriction (\"allocator is not allowed\", N);\n@@ -420,33 +421,40 @@ package body Sem_Ch4 is\n          P := Parent (C);\n          while Present (P) loop\n \n-            --  In both cases we need a handled sequence of statements, where\n-            --  the occurrence of the allocator is within the statements.\n+            --  For the task case we need a handled sequence of statements,\n+            --  where the occurrence of the allocator is within the statements\n+            --  and the parent is a task body\n \n             if Nkind (P) = N_Handled_Sequence_Of_Statements\n               and then Is_List_Member (C)\n               and then List_Containing (C) = Statements (P)\n             then\n+               Onode := Original_Node (Parent (P));\n+\n                --  Check for allocator within task body, this is a definite\n                --  violation of No_Allocators_After_Elaboration we can detect\n                --  at compile time.\n \n-               if Nkind (Original_Node (Parent (P))) = N_Task_Body then\n+               if Nkind (Onode) = N_Task_Body then\n                   Check_Restriction\n                     (No_Standard_Allocators_After_Elaboration, N);\n                   exit;\n                end if;\n+            end if;\n \n-               --  The other case is appearance in a subprogram body. This may\n-               --  be a violation if this is a library level subprogram, and it\n-               --  turns out to be used as the main program, but only the\n-               --  binder knows that, so just record the occurrence.\n+            --  The other case is appearance in a subprogram body. This is\n+            --  a violation if this is a library level subprogram with no\n+            --  parameters. Note that this is now a static error even if the\n+            --  subprogram is not the main program (this is a change, in an\n+            --  earlier version only the main program was affected, and the\n+            --  check had to be done in the binder.\n \n-               if Nkind (Original_Node (Parent (P))) = N_Subprogram_Body\n-                 and then Nkind (Parent (Parent (P))) = N_Compilation_Unit\n-               then\n-                  Set_Has_Allocator (Current_Sem_Unit);\n-               end if;\n+            if Nkind (P) = N_Subprogram_Body\n+              and then Nkind (Parent (P)) = N_Compilation_Unit\n+              and then No (Parameter_Specifications (Specification (P)))\n+            then\n+               Check_Restriction\n+                 (No_Standard_Allocators_After_Elaboration, N);\n             end if;\n \n             C := P;"}, {"sha": "faf43338807d5050980284d2199b02755ec7e0f9", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b26ace90c59e56d59edeffd8ea7f73b07097af/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=b3b26ace90c59e56d59edeffd8ea7f73b07097af", "patch": "@@ -1087,9 +1087,13 @@ package body Sem_Util is\n       --  If T is non-private but its base type is private, this is the\n       --  completion of a subtype declaration whose parent type is private\n       --  (see Complete_Private_Subtype in Sem_Ch3). The proper discriminants\n-      --  are to be found in the full view of the base.\n+      --  are to be found in the full view of the base. Check that the private\n+      --  status of T and its base differ.\n \n-      if Is_Private_Type (Bas) and then Present (Full_View (Bas)) then\n+      if Is_Private_Type (Bas)\n+        and then not Is_Private_Type (T)\n+        and then Present (Full_View (Bas))\n+      then\n          Bas := Full_View (Bas);\n       end if;\n "}]}