{"sha": "1ed57fb8b6988d649c787cbbc2c87acf823498c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVkNTdmYjhiNjk4OGQ2NDljNzg3Y2JiYzJjODdhY2Y4MjM0OThjMQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2018-12-19T10:17:11Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-12-19T10:17:11Z"}, "message": "[nvptx] Rename worker_bcast variables to oacc_bcast\n\nRename worker_bcast variables to oacc_bcast, avoiding worker terminology.\n\nBuild and reg-tested on x86_64 with nvptx accelerator.\n\n2018-12-19  Tom de Vries  <tdevries@suse.de>\n\n\t* config/nvptx/nvptx.c (worker_bcast_size): Rename as\n\toacc_bcast_size.\n\t(worker_bcast_align): Rename as oacc_bcast_align.\n\t(worker_bcast_sym): Rename as oacc_bcast_sym.\n\t(nvptx_option_override): Update usage of oacc_bcast_*.\n\t(struct wcast_data_t): Rename as broadcast_data_t.\n\t(nvptx_gen_wcast): Update type of data argument and usage of\n\toacc_bcast_align.\n\t(wprop_gen): Update type of data_ and usage of oacc_bcast_align.\n\t(nvptx_wpropagate): Update type of data and usage of\n\toacc_bcast_{sym,size}.\n\t(nvptx_single): Update type of data and usage of oacc_bcast_size.\n\t(nvptx_file_end): Update usage of oacc_bcast_{sym,align,size}.\n\nFrom-SVN: r267259", "tree": {"sha": "2ba7c7b00951cb0b5daaa05a28d32c3a54b987f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ba7c7b00951cb0b5daaa05a28d32c3a54b987f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ed57fb8b6988d649c787cbbc2c87acf823498c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ed57fb8b6988d649c787cbbc2c87acf823498c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ed57fb8b6988d649c787cbbc2c87acf823498c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ed57fb8b6988d649c787cbbc2c87acf823498c1/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1dcf26882b1a8c4f388ed6a618d6e4b1e1330057", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dcf26882b1a8c4f388ed6a618d6e4b1e1330057", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dcf26882b1a8c4f388ed6a618d6e4b1e1330057"}], "stats": {"total": 75, "additions": 46, "deletions": 29}, "files": [{"sha": "c816a65aaff5538a6d787d007338ae725be86623", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ed57fb8b6988d649c787cbbc2c87acf823498c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ed57fb8b6988d649c787cbbc2c87acf823498c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ed57fb8b6988d649c787cbbc2c87acf823498c1", "patch": "@@ -1,3 +1,19 @@\n+2018-12-19  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx.c (worker_bcast_size): Rename as\n+\toacc_bcast_size.\n+\t(worker_bcast_align): Rename as oacc_bcast_align.\n+\t(worker_bcast_sym): Rename as oacc_bcast_sym.\n+\t(nvptx_option_override): Update usage of oacc_bcast_*.\n+\t(struct wcast_data_t): Rename as broadcast_data_t.\n+\t(nvptx_gen_wcast): Update type of data argument and usage of\n+\toacc_bcast_align.\n+\t(wprop_gen): Update type of data_ and usage of oacc_bcast_align.\n+\t(nvptx_wpropagate): Update type of data and usage of\n+\toacc_bcast_{sym,size}.\n+\t(nvptx_single): Update type of data and usage of oacc_bcast_size.\n+\t(nvptx_file_end): Update usage of oacc_bcast_{sym,align,size}.\n+\n 2018-12-19  Tom de Vries  <tdevries@suse.de>\n \n \t* config/nvptx/nvptx.md (nvptx_barsync): Add and handle operand."}, {"sha": "9625ac86aa1443fb9258fbbbd4c32445f2089dbd", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ed57fb8b6988d649c787cbbc2c87acf823498c1/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ed57fb8b6988d649c787cbbc2c87acf823498c1/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=1ed57fb8b6988d649c787cbbc2c87acf823498c1", "patch": "@@ -127,14 +127,15 @@ struct tree_hasher : ggc_cache_ptr_hash<tree_node>\n static GTY((cache)) hash_table<tree_hasher> *declared_fndecls_htab;\n static GTY((cache)) hash_table<tree_hasher> *needed_fndecls_htab;\n \n-/* Buffer needed to broadcast across workers.  This is used for both\n-   worker-neutering and worker broadcasting.  It is shared by all\n-   functions emitted.  The buffer is placed in shared memory.  It'd be\n-   nice if PTX supported common blocks, because then this could be\n-   shared across TUs (taking the largest size).  */\n-static unsigned worker_bcast_size;\n-static unsigned worker_bcast_align;\n-static GTY(()) rtx worker_bcast_sym;\n+/* Buffer needed to broadcast across workers and vectors.  This is\n+   used for both worker-neutering and worker broadcasting, and\n+   vector-neutering and boardcasting when vector_length > 32.  It is\n+   shared by all functions emitted.  The buffer is placed in shared\n+   memory.  It'd be nice if PTX supported common blocks, because then\n+   this could be shared across TUs (taking the largest size).  */\n+static unsigned oacc_bcast_size;\n+static unsigned oacc_bcast_align;\n+static GTY(()) rtx oacc_bcast_sym;\n \n /* Buffer needed for worker reductions.  This has to be distinct from\n    the worker broadcast array, as both may be live concurrently.  */\n@@ -207,9 +208,9 @@ nvptx_option_override (void)\n   declared_libfuncs_htab\n     = hash_table<declared_libfunc_hasher>::create_ggc (17);\n \n-  worker_bcast_sym = gen_rtx_SYMBOL_REF (Pmode, \"__worker_bcast\");\n-  SET_SYMBOL_DATA_AREA (worker_bcast_sym, DATA_AREA_SHARED);\n-  worker_bcast_align = GET_MODE_ALIGNMENT (SImode) / BITS_PER_UNIT;\n+  oacc_bcast_sym = gen_rtx_SYMBOL_REF (Pmode, \"__oacc_bcast\");\n+  SET_SYMBOL_DATA_AREA (oacc_bcast_sym, DATA_AREA_SHARED);\n+  oacc_bcast_align = GET_MODE_ALIGNMENT (SImode) / BITS_PER_UNIT;\n \n   worker_red_sym = gen_rtx_SYMBOL_REF (Pmode, \"__worker_red\");\n   SET_SYMBOL_DATA_AREA (worker_red_sym, DATA_AREA_SHARED);\n@@ -1754,7 +1755,7 @@ nvptx_gen_vcast (rtx reg)\n \n /* Structure used when generating a worker-level spill or fill.  */\n \n-struct wcast_data_t\n+struct broadcast_data_t\n {\n   rtx base;  /* Register holding base addr of buffer.  */\n   rtx ptr;  /* Iteration var,  if needed.  */\n@@ -1778,7 +1779,7 @@ enum propagate_mask\n    how many loop iterations will be executed (0 for not a loop).  */\n    \n static rtx\n-nvptx_gen_wcast (rtx reg, propagate_mask pm, unsigned rep, wcast_data_t *data)\n+nvptx_gen_wcast (rtx reg, propagate_mask pm, unsigned rep, broadcast_data_t *data)\n {\n   rtx  res;\n   machine_mode mode = GET_MODE (reg);\n@@ -1808,8 +1809,8 @@ nvptx_gen_wcast (rtx reg, propagate_mask pm, unsigned rep, wcast_data_t *data)\n \t  {\n \t    unsigned align = GET_MODE_ALIGNMENT (mode) / BITS_PER_UNIT;\n \n-\t    if (align > worker_bcast_align)\n-\t      worker_bcast_align = align;\n+\t    if (align > oacc_bcast_align)\n+\t      oacc_bcast_align = align;\n \t    data->offset = (data->offset + align - 1) & ~(align - 1);\n \t    addr = data->base;\n \t    if (data->offset)\n@@ -3914,15 +3915,15 @@ nvptx_vpropagate (bool is_call, basic_block block, rtx_insn *insn)\n static rtx\n wprop_gen (rtx reg, propagate_mask pm, unsigned rep, void *data_)\n {\n-  wcast_data_t *data = (wcast_data_t *)data_;\n+  broadcast_data_t *data = (broadcast_data_t *)data_;\n \n   if (pm & PM_loop_begin)\n     {\n       /* Starting a loop, initialize pointer.    */\n       unsigned align = GET_MODE_ALIGNMENT (GET_MODE (reg)) / BITS_PER_UNIT;\n \n-      if (align > worker_bcast_align)\n-\tworker_bcast_align = align;\n+      if (align > oacc_bcast_align)\n+\toacc_bcast_align = align;\n       data->offset = (data->offset + align - 1) & ~(align - 1);\n \n       data->ptr = gen_reg_rtx (Pmode);\n@@ -3947,7 +3948,7 @@ wprop_gen (rtx reg, propagate_mask pm, unsigned rep, void *data_)\n static bool\n nvptx_wpropagate (bool pre_p, bool is_call, basic_block block, rtx_insn *insn)\n {\n-  wcast_data_t data;\n+  broadcast_data_t data;\n \n   data.base = gen_reg_rtx (Pmode);\n   data.offset = 0;\n@@ -3959,11 +3960,11 @@ nvptx_wpropagate (bool pre_p, bool is_call, basic_block block, rtx_insn *insn)\n   if (data.offset)\n     {\n       /* Stuff was emitted, initialize the base pointer now.  */\n-      rtx init = gen_rtx_SET (data.base, worker_bcast_sym);\n+      rtx init = gen_rtx_SET (data.base, oacc_bcast_sym);\n       emit_insn_after (init, insn);\n \n-      if (worker_bcast_size < data.offset)\n-\tworker_bcast_size = data.offset;\n+      if (oacc_bcast_size < data.offset)\n+\toacc_bcast_size = data.offset;\n     }\n   return empty;\n }\n@@ -4333,13 +4334,13 @@ nvptx_single (unsigned mask, basic_block from, basic_block to)\n \t{\n \t  /* Includes worker mode, do spill & fill.  By construction\n \t     we should never have worker mode only. */\n-\t  wcast_data_t data;\n+\t  broadcast_data_t data;\n \n-\t  data.base = worker_bcast_sym;\n+\t  data.base = oacc_bcast_sym;\n \t  data.ptr = 0;\n \n-\t  if (worker_bcast_size < GET_MODE_SIZE (SImode))\n-\t    worker_bcast_size = GET_MODE_SIZE (SImode);\n+\t  if (oacc_bcast_size < GET_MODE_SIZE (SImode))\n+\t    oacc_bcast_size = GET_MODE_SIZE (SImode);\n \n \t  data.offset = 0;\n \t  emit_insn_before (nvptx_gen_wcast (pvar, PM_read, 0, &data),\n@@ -4968,9 +4969,9 @@ nvptx_file_end (void)\n     nvptx_record_fndecl (decl);\n   fputs (func_decls.str().c_str(), asm_out_file);\n \n-  if (worker_bcast_size)\n-    write_worker_buffer (asm_out_file, worker_bcast_sym,\n-\t\t\t worker_bcast_align, worker_bcast_size);\n+  if (oacc_bcast_size)\n+    write_worker_buffer (asm_out_file, oacc_bcast_sym,\n+\t\t\t oacc_bcast_align, oacc_bcast_size);\n \n   if (worker_red_size)\n     write_worker_buffer (asm_out_file, worker_red_sym,"}]}