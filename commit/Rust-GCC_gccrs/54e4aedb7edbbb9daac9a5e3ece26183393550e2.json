{"sha": "54e4aedb7edbbb9daac9a5e3ece26183393550e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRlNGFlZGI3ZWRiYmI5ZGFhYzlhNWUzZWNlMjYxODMzOTM1NTBlMg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-12-07T21:23:10Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-12-07T21:23:10Z"}, "message": "c-common.c, [...]: Replace uses of first_rtl_op with TREE_CODE_LENGTH.\n\ngcc/\n\t* c-common.c, expr.c, fold-const.c, print-tree.c,\n\ttree-gimple.c, tree-inline.c, tree-pretty-print.c,\n\ttree-ssa-loop-im.c, tree-ssa-loop-ivopts.c: Replace uses of\n\tfirst_rtl_op with TREE_CODE_LENGTH.\n\t* tree.c (first_rtl_op): Remove.\n\tReplace uses of first_rtl_op with TREE_CODE_LENGTH.\n\t* tree.h: Remove the prototype for first_rtl_op.\n\ngcc/cp/\n\t* pt.c: Replace a use of first_rtl_op with TREE_CODE_LENGTH.\n\nFrom-SVN: r91818", "tree": {"sha": "f326960d7493b5dc8cb7ddf3232ed6a0d9281070", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f326960d7493b5dc8cb7ddf3232ed6a0d9281070"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54e4aedb7edbbb9daac9a5e3ece26183393550e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e4aedb7edbbb9daac9a5e3ece26183393550e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54e4aedb7edbbb9daac9a5e3ece26183393550e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e4aedb7edbbb9daac9a5e3ece26183393550e2/comments", "author": null, "committer": null, "parents": [{"sha": "b180d5fb7baab9d8a4b1002948c88b0896118bb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b180d5fb7baab9d8a4b1002948c88b0896118bb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b180d5fb7baab9d8a4b1002948c88b0896118bb6"}], "stats": {"total": 78, "additions": 37, "deletions": 41}, "files": [{"sha": "338cc630c5c0f29a946b57923718f6b32187af59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54e4aedb7edbbb9daac9a5e3ece26183393550e2", "patch": "@@ -1,3 +1,13 @@\n+2004-12-07  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* c-common.c, expr.c, fold-const.c, print-tree.c,\n+\ttree-gimple.c, tree-inline.c, tree-pretty-print.c,\n+\ttree-ssa-loop-im.c, tree-ssa-loop-ivopts.c: Replace uses of\n+\tfirst_rtl_op with TREE_CODE_LENGTH.\n+\t* tree.c (first_rtl_op): Remove.\n+\tReplace uses of first_rtl_op with TREE_CODE_LENGTH.\n+\t* tree.h: Remove the prototype for first_rtl_op.\n+\n 2004-12-07  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/t-aix43, config/rs6000/t-aix52 (SHLIB_LINK):"}, {"sha": "627911d4b68dc2a44a1780b6f2e5bc7414262aa8", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=54e4aedb7edbbb9daac9a5e3ece26183393550e2", "patch": "@@ -1365,7 +1365,7 @@ verify_tree (tree x, struct tlist **pbefore_sp, struct tlist **pno_sp,\n \t Other non-expressions need not be processed.  */\n       if (cl == tcc_unary)\n \t{\n-\t  if (first_rtl_op (code) == 0)\n+\t  if (TREE_CODE_LENGTH (code) == 0)\n \t    return;\n \t  x = TREE_OPERAND (x, 0);\n \t  writer = 0;\n@@ -1374,7 +1374,7 @@ verify_tree (tree x, struct tlist **pbefore_sp, struct tlist **pno_sp,\n       else if (IS_EXPR_CODE_CLASS (cl))\n \t{\n \t  int lp;\n-\t  int max = first_rtl_op (TREE_CODE (x));\n+\t  int max = TREE_CODE_LENGTH (TREE_CODE (x));\n \t  for (lp = 0; lp < max; lp++)\n \t    {\n \t      tmp_before = tmp_nosp = 0;"}, {"sha": "16c854cc1a5bb25e0f6893cefb9115cfee62f49b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=54e4aedb7edbbb9daac9a5e3ece26183393550e2", "patch": "@@ -1,3 +1,7 @@\n+2004-12-07  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* pt.c: Replace a use of first_rtl_op with TREE_CODE_LENGTH.\n+\n 2004-12-07  Roger Sayle  <roger@eyesopen.com>\n \n \t* name-lookup.c (leave_scope): We only need to update"}, {"sha": "9bf396bf465f765fceff71ced6ae26a9c0fa1126", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=54e4aedb7edbbb9daac9a5e3ece26183393550e2", "patch": "@@ -12010,7 +12010,7 @@ value_dependent_expression_p (tree expression)\n \tcase tcc_expression:\n \t  {\n \t    int i;\n-\t    for (i = 0; i < first_rtl_op (TREE_CODE (expression)); ++i)\n+\t    for (i = 0; i < TREE_CODE_LENGTH (TREE_CODE (expression)); ++i)\n \t      /* In some cases, some of the operands may be missing.\n \t\t (For example, in the case of PREDECREMENT_EXPR, the\n \t\t amount to increment by may be missing.)  That doesn't"}, {"sha": "d594671658e602c8fcd1638be983c25a2d0a9d34", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=54e4aedb7edbbb9daac9a5e3ece26183393550e2", "patch": "@@ -5944,7 +5944,7 @@ safe_from_p (rtx x, tree exp, int top_p)\n       if (exp_rtl)\n \tbreak;\n \n-      nops = first_rtl_op (TREE_CODE (exp));\n+      nops = TREE_CODE_LENGTH (TREE_CODE (exp));\n       for (i = 0; i < nops; i++)\n \tif (TREE_OPERAND (exp, i) != 0\n \t    && ! safe_from_p (x, TREE_OPERAND (exp, i), 0))"}, {"sha": "878cbd9a2d883b169e041166f13f8001b0fda472", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=54e4aedb7edbbb9daac9a5e3ece26183393550e2", "patch": "@@ -3550,7 +3550,7 @@ make_range (tree exp, int *pin_p, tree *plow, tree *phigh)\n \n       if (IS_EXPR_CODE_CLASS (TREE_CODE_CLASS (code)))\n \t{\n-\t  if (first_rtl_op (code) > 0)\n+\t  if (TREE_CODE_LENGTH (code) > 0)\n \t    arg0 = TREE_OPERAND (exp, 0);\n \t  if (TREE_CODE_CLASS (code) == tcc_comparison\n \t      || TREE_CODE_CLASS (code) == tcc_unary\n@@ -6277,7 +6277,7 @@ fold (tree expr)\n     }\n   else if (IS_EXPR_CODE_CLASS (kind))\n     {\n-      int len = first_rtl_op (code);\n+      int len = TREE_CODE_LENGTH (code);\n       int i;\n       for (i = 0; i < len; i++)\n \t{\n@@ -9418,7 +9418,7 @@ fold_checksum_tree (tree expr, struct md5_ctx *ctx, htab_t ht)\n     case tcc_unary:\n     case tcc_binary:\n     case tcc_statement:\n-      len = first_rtl_op (code);\n+      len = TREE_CODE_LENGTH (code);\n       for (i = 0; i < len; ++i)\n \tfold_checksum_tree (TREE_OPERAND (expr, i), ctx, ht);\n       break;"}, {"sha": "f47d21ab623d454265930a48764197419ecdd812", "filename": "gcc/print-tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=54e4aedb7edbbb9daac9a5e3ece26183393550e2", "patch": "@@ -593,7 +593,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \n       /* Some nodes contain rtx's, not trees,\n \t after a certain point.  Print the rtx's as rtx's.  */\n-      first_rtl = first_rtl_op (TREE_CODE (node));\n+      first_rtl = TREE_CODE_LENGTH (TREE_CODE (node));\n \n       for (i = 0; i < len; i++)\n \t{"}, {"sha": "e1cbc334c925b8ab66fe2002e77fbd70dfac0e95", "filename": "gcc/tree-gimple.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2Ftree-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2Ftree-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.c?ref=54e4aedb7edbbb9daac9a5e3ece26183393550e2", "patch": "@@ -443,7 +443,7 @@ void\n recalculate_side_effects (tree t)\n {\n   enum tree_code code = TREE_CODE (t);\n-  int fro = first_rtl_op (code);\n+  int fro = TREE_CODE_LENGTH (code);\n   int i;\n \n   switch (TREE_CODE_CLASS (code))"}, {"sha": "0c72fe662e5d20d56d3e5b1db0cd486403c4b4ae", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=54e4aedb7edbbb9daac9a5e3ece26183393550e2", "patch": "@@ -1391,7 +1391,7 @@ expand_call_inline (tree *tp, int *walk_subtrees, void *data)\n   if (TREE_CODE (*tp) == TARGET_EXPR)\n     {\n #if 0\n-      int i, len = first_rtl_op (TARGET_EXPR);\n+      int i, len = TREE_CODE_LENGTH (TARGET_EXPR);\n \n       /* We're walking our own subtrees.  */\n       *walk_subtrees = 0;\n@@ -2088,7 +2088,7 @@ walk_tree (tree *tp, walk_tree_fn func, void *data, struct pointer_set_t *pset)\n       int i, len;\n \n       /* Walk over all the sub-trees of this operand.  */\n-      len = first_rtl_op (code);\n+      len = TREE_CODE_LENGTH (code);\n       /* TARGET_EXPRs are peculiar: operands 1 and 3 can be the same.\n \t But, we only want to walk once.  */\n       if (code == TARGET_EXPR"}, {"sha": "ce19f5fcf8930c733733ade4e826f0dc60cdb33f", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=54e4aedb7edbbb9daac9a5e3ece26183393550e2", "patch": "@@ -72,7 +72,7 @@ do_niy (pretty_printer *buffer, tree node)\n \n   if (EXPR_P (node))\n     {\n-      len = first_rtl_op (TREE_CODE (node));\n+      len = TREE_CODE_LENGTH (TREE_CODE (node));\n       for (i = 0; i < len; ++i)\n \t{\n \t  newline_and_indent (buffer, 2);"}, {"sha": "16e477c9cc508168eb69a5d15070eccb531e0e8d", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=54e4aedb7edbbb9daac9a5e3ece26183393550e2", "patch": "@@ -283,7 +283,7 @@ outermost_invariant_loop_expr (tree expr, struct loop *loop)\n       && class != tcc_comparison)\n     return NULL;\n \n-  nops = first_rtl_op (TREE_CODE (expr));\n+  nops = TREE_CODE_LENGTH (TREE_CODE (expr));\n   for (i = 0; i < nops; i++)\n     {\n       aloop = outermost_invariant_loop_expr (TREE_OPERAND (expr, i), loop);\n@@ -743,7 +743,7 @@ force_move_till_expr (tree expr, struct loop *orig_loop, struct loop *loop)\n       && class != tcc_comparison)\n     return;\n \n-  nops = first_rtl_op (TREE_CODE (expr));\n+  nops = TREE_CODE_LENGTH (TREE_CODE (expr));\n   for (i = 0; i < nops; i++)\n     force_move_till_expr (TREE_OPERAND (expr, i), orig_loop, loop);\n }"}, {"sha": "8727db86314486de13510b87e9911c2f10dbfb4c", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=54e4aedb7edbbb9daac9a5e3ece26183393550e2", "patch": "@@ -1270,7 +1270,7 @@ expr_invariant_in_loop_p (struct loop *loop, tree expr)\n   if (!EXPR_P (expr))\n     return false;\n \n-  len = first_rtl_op (TREE_CODE (expr));\n+  len = TREE_CODE_LENGTH (TREE_CODE (expr));\n   for (i = 0; i < len; i++)\n     if (!expr_invariant_in_loop_p (loop, TREE_OPERAND (expr, i)))\n       return false;"}, {"sha": "0ff686cd4af67888577f1ac87d82a332a193dc91", "filename": "gcc/tree.c", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=54e4aedb7edbbb9daac9a5e3ece26183393550e2", "patch": "@@ -1734,19 +1734,6 @@ skip_simple_arithmetic (tree expr)\n   return inner;\n }\n \n-/* Returns the index of the first non-tree operand for CODE, or the number\n-   of operands if all are trees.  */\n-\n-int\n-first_rtl_op (enum tree_code code)\n-{\n-  switch (code)\n-    {\n-    default:\n-      return TREE_CODE_LENGTH (code);\n-    }\n-}\n-\n /* Return which tree structure is used by T.  */\n \n enum tree_node_structure_enum\n@@ -1845,7 +1832,7 @@ contains_placeholder_p (tree exp)\n \t  break;\n \t}\n \n-      switch (first_rtl_op (code))\n+      switch (TREE_CODE_LENGTH (code))\n \t{\n \tcase 1:\n \t  return CONTAINS_PLACEHOLDER_P (TREE_OPERAND (exp, 0));\n@@ -2012,7 +1999,7 @@ substitute_in_expr (tree exp, tree f, tree r)\n       case tcc_comparison:\n       case tcc_expression:\n       case tcc_reference:\n-\tswitch (first_rtl_op (code))\n+\tswitch (TREE_CODE_LENGTH (code))\n \t  {\n \t  case 0:\n \t    return exp;\n@@ -2132,7 +2119,7 @@ substitute_placeholder_in_expr (tree exp, tree obj)\n       case tcc_expression:\n       case tcc_reference:\n       case tcc_statement:\n-\tswitch (first_rtl_op (code))\n+\tswitch (TREE_CODE_LENGTH (code))\n \t  {\n \t  case 0:\n \t    return exp;\n@@ -2508,7 +2495,7 @@ build1_stat (enum tree_code code, tree type, tree node MEM_STAT_DECL)\n   TREE_COMPLEXITY (t) = 0;\n   TREE_OPERAND (t, 0) = node;\n   TREE_BLOCK (t) = NULL_TREE;\n-  if (node && !TYPE_P (node) && first_rtl_op (code) != 0)\n+  if (node && !TYPE_P (node) && TREE_CODE_LENGTH (code) != 0)\n     {\n       TREE_SIDE_EFFECTS (t) = TREE_SIDE_EFFECTS (node);\n       TREE_READONLY (t) = TREE_READONLY (node);\n@@ -2593,7 +2580,7 @@ build2_stat (enum tree_code code, tree tt, tree arg0, tree arg1 MEM_STAT_DECL)\n      result based on those same flags for the arguments.  But if the\n      arguments aren't really even `tree' expressions, we shouldn't be trying\n      to do this.  */\n-  fro = first_rtl_op (code);\n+  fro = TREE_CODE_LENGTH (code);\n \n   /* Expressions without side effects may be constant if their\n      arguments are as well.  */\n@@ -2630,7 +2617,7 @@ build3_stat (enum tree_code code, tree tt, tree arg0, tree arg1,\n   t = make_node_stat (code PASS_MEM_STAT);\n   TREE_TYPE (t) = tt;\n \n-  fro = first_rtl_op (code);\n+  fro = TREE_CODE_LENGTH (code);\n \n   side_effects = TREE_SIDE_EFFECTS (t);\n \n@@ -2679,7 +2666,7 @@ build4_stat (enum tree_code code, tree tt, tree arg0, tree arg1,\n   t = make_node_stat (code PASS_MEM_STAT);\n   TREE_TYPE (t) = tt;\n \n-  fro = first_rtl_op (code);\n+  fro = TREE_CODE_LENGTH (code);\n \n   side_effects = TREE_SIDE_EFFECTS (t);\n \n@@ -4196,7 +4183,7 @@ iterative_hash_expr (tree t, hashval_t val)\n \t      val = iterative_hash_hashval_t (two, val);\n \t    }\n \t  else\n-\t    for (i = first_rtl_op (code) - 1; i >= 0; --i)\n+\t    for (i = TREE_CODE_LENGTH (code) - 1; i >= 0; --i)\n \t      val = iterative_hash_expr (TREE_OPERAND (t, i), val);\n \t}\n       return val;"}, {"sha": "aec7b4b99e9d7ce2e9426d61f1f7757d1333f3cd", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e4aedb7edbbb9daac9a5e3ece26183393550e2/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=54e4aedb7edbbb9daac9a5e3ece26183393550e2", "patch": "@@ -3279,11 +3279,6 @@ extern tree save_expr (tree);\n \n extern tree skip_simple_arithmetic (tree);\n \n-/* Returns the index of the first non-tree operand for CODE, or the number\n-   of operands if all are trees.  */\n-\n-extern int first_rtl_op (enum tree_code);\n-\n /* Return which tree structure is used by T.  */\n \n enum tree_node_structure_enum tree_node_structure (tree);"}]}