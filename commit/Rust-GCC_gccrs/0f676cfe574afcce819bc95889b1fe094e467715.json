{"sha": "0f676cfe574afcce819bc95889b1fe094e467715", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY2NzZjZmU1NzRhZmNjZTgxOWJjOTU4ODliMWZlMDk0ZTQ2NzcxNQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-07-02T22:59:59Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-07-02T22:59:59Z"}, "message": "re PR target/53568 (SH Target: Add support for bswap built-ins)\n\n\tPR target/53568\n\t* gcc.target/sh/pr53568-1.c: New.\n\nFrom-SVN: r189181", "tree": {"sha": "d899b1ff41a891f0d864b615743db645236823b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d899b1ff41a891f0d864b615743db645236823b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f676cfe574afcce819bc95889b1fe094e467715", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f676cfe574afcce819bc95889b1fe094e467715", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f676cfe574afcce819bc95889b1fe094e467715", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f676cfe574afcce819bc95889b1fe094e467715/comments", "author": null, "committer": null, "parents": [{"sha": "f031c3441f38fb0c27bb11eae460191e7a2e9e28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f031c3441f38fb0c27bb11eae460191e7a2e9e28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f031c3441f38fb0c27bb11eae460191e7a2e9e28"}], "stats": {"total": 87, "additions": 87, "deletions": 0}, "files": [{"sha": "dead28172925069c93c1ff15cf244fb8e2c90bca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f676cfe574afcce819bc95889b1fe094e467715/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f676cfe574afcce819bc95889b1fe094e467715/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f676cfe574afcce819bc95889b1fe094e467715", "patch": "@@ -1,3 +1,8 @@\n+2012-07-03  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/53568\n+\t* gcc.target/sh/pr53568-1.c: New.\n+\n 2012-07-02  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/51244"}, {"sha": "22f836ef8925b97560fb881413a7d45f72d4ca80", "filename": "gcc/testsuite/gcc.target/sh/pr53568-1.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f676cfe574afcce819bc95889b1fe094e467715/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53568-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f676cfe574afcce819bc95889b1fe094e467715/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53568-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53568-1.c?ref=0f676cfe574afcce819bc95889b1fe094e467715", "patch": "@@ -0,0 +1,82 @@\n+/* Check that the bswap32 pattern is generated as swap.b and swap.w\n+   instructions.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n+/* { dg-final { scan-assembler-times \"swap.w\" 7 } } */\n+/* { dg-final { scan-assembler-times \"swap.b\" 16 } } */\n+/* { dg-final { scan-assembler-times \"extu.w\" 2 } } */\n+/* { dg-final { scan-assembler-times \"mov\" 1 } } */\n+/* { dg-final { scan-assembler-not \"{shll8|shlr8|shld|shad}\" } } */\n+\n+int\n+test_func_00 (int a)\n+{\n+  /* 1x swap.w\n+     2x swap.b  */\n+  return __builtin_bswap32 (a);\n+}\n+\n+unsigned int\n+test_func_01 (unsigned int a)\n+{\n+  /* 1x swap.w\n+     2x swap.b  */\n+  return __builtin_bswap32 (a);\n+}\n+\n+int\n+test_func_02 (int a)\n+{\n+  /* 1x swap.w\n+     2x swap.b  */\n+  return (((a >> 0) & 0xFF) << 24)\n+\t | (((a >> 8) & 0xFF) << 16)\n+\t | (((a >> 16) & 0xFF) << 8)\n+\t | (((a >> 24) & 0xFF) << 0);\n+}\n+\n+unsigned int\n+test_func_03 (unsigned int a)\n+{\n+  /* 1x swap.w\n+     2x swap.b  */\n+  return (((a >> 0) & 0xFF) << 24)\n+\t | (((a >> 8) & 0xFF) << 16)\n+\t | (((a >> 16) & 0xFF) << 8)\n+\t | (((a >> 24) & 0xFF) << 0);\n+}\n+\n+int\n+test_func_04 (int a)\n+{\n+  /* 1x swap.b\n+     1x extu.w  */\n+  return __builtin_bswap32 (a) >> 16;\n+}\n+\n+unsigned short\n+test_func_05 (unsigned short a)\n+{\n+  /* 1x swap.b\n+     1x extu.w  */\n+  return __builtin_bswap32 (a) >> 16;\n+}\n+\n+long long\n+test_func_06 (long long a)\n+{\n+  /* 2x swap.w\n+     4x swap.b  */\n+  return __builtin_bswap64 (a);\n+}\n+\n+long long\n+test_func_07 (long long a)\n+{\n+  /* 1x swap.w\n+     2x swap.b\n+     1x mov #0,Rn  */\n+  return __builtin_bswap64 (a) >> 32;\n+}\n+"}]}