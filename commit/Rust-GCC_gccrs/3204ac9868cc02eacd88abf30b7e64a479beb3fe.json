{"sha": "3204ac9868cc02eacd88abf30b7e64a479beb3fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIwNGFjOTg2OGNjMDJlYWNkODhhYmYzMGI3ZTY0YTQ3OWJlYjNmZQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-11-10T09:37:51Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-11-10T09:37:51Z"}, "message": "[AArch64][2/3] Implement negcc, notcc optabs\n\n\t* config/aarch64/aarch64.md (<neg_not_op><mode>cc): New define_expand.\n\t* config/aarch64/iterators.md (NEG_NOT): New code iterator.\n\t(neg_not_op): New code attribute.\n\n\t* gcc.target/aarch64/cond_op_imm_1.c: New test.\n\nFrom-SVN: r230090", "tree": {"sha": "d0ef83866d52f6f3a680a698222073270ea0b299", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0ef83866d52f6f3a680a698222073270ea0b299"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3204ac9868cc02eacd88abf30b7e64a479beb3fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3204ac9868cc02eacd88abf30b7e64a479beb3fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3204ac9868cc02eacd88abf30b7e64a479beb3fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3204ac9868cc02eacd88abf30b7e64a479beb3fe/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ce68b5cfb9d12cb55345bd26ee9114aee925d46a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce68b5cfb9d12cb55345bd26ee9114aee925d46a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce68b5cfb9d12cb55345bd26ee9114aee925d46a"}], "stats": {"total": 133, "additions": 133, "deletions": 0}, "files": [{"sha": "5a7e44cf29204825ce47975e4e25c2dc71e505b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3204ac9868cc02eacd88abf30b7e64a479beb3fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3204ac9868cc02eacd88abf30b7e64a479beb3fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3204ac9868cc02eacd88abf30b7e64a479beb3fe", "patch": "@@ -1,3 +1,9 @@\n+2015-11-10  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.md (<neg_not_op><mode>cc): New define_expand.\n+\t* config/aarch64/iterators.md (NEG_NOT): New code iterator.\n+\t(neg_not_op): New code attribute.\n+\n 2015-11-10  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* ifcvt.c (noce_try_inverse_constants): New function."}, {"sha": "1586256dd348e61d59b019e9d68a4603368e0966", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3204ac9868cc02eacd88abf30b7e64a479beb3fe/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3204ac9868cc02eacd88abf30b7e64a479beb3fe/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=3204ac9868cc02eacd88abf30b7e64a479beb3fe", "patch": "@@ -3102,6 +3102,24 @@\n   }\n )\n \n+(define_expand \"<neg_not_op><mode>cc\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"\")\n+\t(if_then_else:GPI (match_operand 1 \"aarch64_comparison_operator\" \"\")\n+\t\t\t  (NEG_NOT:GPI (match_operand:GPI 2 \"register_operand\" \"\"))\n+\t\t\t  (match_operand:GPI 3 \"register_operand\" \"\")))]\n+  \"\"\n+  {\n+    rtx ccreg;\n+    enum rtx_code code = GET_CODE (operands[1]);\n+\n+    if (code == UNEQ || code == LTGT)\n+      FAIL;\n+\n+    ccreg = aarch64_gen_compare_reg (code, XEXP (operands[1], 0),\n+\t\t\t\t      XEXP (operands[1], 1));\n+    operands[1] = gen_rtx_fmt_ee (code, VOIDmode, ccreg, const0_rtx);\n+  }\n+)\n \n ;; CRC32 instructions.\n (define_insn \"aarch64_<crc_variant>\""}, {"sha": "c4a1c9888eae846cf9be7e92088de2ebec399fbe", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3204ac9868cc02eacd88abf30b7e64a479beb3fe/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3204ac9868cc02eacd88abf30b7e64a479beb3fe/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=3204ac9868cc02eacd88abf30b7e64a479beb3fe", "patch": "@@ -693,6 +693,9 @@\n ;; Code iterator for logical operations whose :nlogical works on SIMD registers.\n (define_code_iterator NLOGICAL [and ior])\n \n+;; Code iterator for unary negate and bitwise complement.\n+(define_code_iterator NEG_NOT [neg not])\n+\n ;; Code iterator for sign/zero extension\n (define_code_iterator ANY_EXTEND [sign_extend zero_extend])\n \n@@ -822,6 +825,9 @@\n ;; Logical operator instruction mnemonics\n (define_code_attr logical [(and \"and\") (ior \"orr\") (xor \"eor\")])\n \n+;; Operation names for negate and bitwise complement.\n+(define_code_attr neg_not_op [(neg \"neg\") (not \"not\")])\n+\n ;; Similar, but when not(op)\n (define_code_attr nlogical [(and \"bic\") (ior \"orn\") (xor \"eon\")])\n "}, {"sha": "5c258f4404ef277bc5609f6b0bb7a1fc58cab876", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3204ac9868cc02eacd88abf30b7e64a479beb3fe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3204ac9868cc02eacd88abf30b7e64a479beb3fe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3204ac9868cc02eacd88abf30b7e64a479beb3fe", "patch": "@@ -1,3 +1,7 @@\n+2015-11-10  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/cond_op_imm_1.c: New test.\n+\n 2015-11-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gfortran.dg/pr68251.f90: New test."}, {"sha": "e93a69329c32126eb523045593f8ad363d145a00", "filename": "gcc/testsuite/gcc.target/aarch64/cond_op_imm_1.c", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3204ac9868cc02eacd88abf30b7e64a479beb3fe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcond_op_imm_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3204ac9868cc02eacd88abf30b7e64a479beb3fe/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcond_op_imm_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcond_op_imm_1.c?ref=3204ac9868cc02eacd88abf30b7e64a479beb3fe", "patch": "@@ -0,0 +1,99 @@\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O2 -fno-inline\" } */\n+\n+extern void abort (void);\n+\n+#define N 30\n+#define M 25089992\n+\n+int\n+foonegsi (int a)\n+{\n+  return a ? N : -N;\n+}\n+\n+/* { dg-final { scan-assembler \"csneg\\tw\\[0-9\\]*.*\" } } */\n+\n+\n+int\n+fooinvsi (int a)\n+{\n+  return a ? N : ~N;\n+}\n+\n+/* { dg-final { scan-assembler \"csinv\\tw\\[0-9\\]*.*\" } } */\n+\n+\n+long long\n+foonegdi (long long a)\n+{\n+  return a ? N : -N;\n+}\n+\n+long long\n+largefooneg (long long a)\n+{\n+  return a ? M : -M;\n+}\n+\n+/* { dg-final { scan-assembler \"csneg\\tx\\[0-9\\]*.*\" } } */\n+\n+long long\n+fooinvdi (long long a)\n+{\n+  return a ? N : ~N;\n+}\n+\n+long long\n+largefooinv (long long a)\n+{\n+  return a ? M : ~M;\n+}\n+\n+/* { dg-final { scan-assembler \"csinv\\tx\\[0-9\\]*.*\" } } */\n+\n+\n+int\n+main (void)\n+{\n+  if (foonegsi (1) != N)\n+    abort ();\n+\n+  if (foonegsi (0) != -N)\n+    abort ();\n+\n+  if (fooinvsi (1) != N)\n+    abort ();\n+\n+  if (fooinvsi (0) != ~N)\n+    abort ();\n+\n+  if (foonegdi (1) != N)\n+    abort ();\n+\n+  if (foonegdi (0) != -N)\n+    abort ();\n+\n+  if (fooinvdi (1) != N)\n+    abort ();\n+\n+  if (fooinvdi (0) != ~N)\n+    abort ();\n+\n+  if (largefooinv (0) != ~M)\n+    abort ();\n+\n+  if (largefooneg (0) != -M)\n+    abort ();\n+\n+  if (largefooinv (1) != M)\n+    abort ();\n+\n+  if (largefooneg (1) != M)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"csel\\tx\\[0-9\\]*.*\" } } */\n+/* { dg-final { scan-assembler-not \"csel\\tw\\[0-9\\]*.*\" } } */"}]}