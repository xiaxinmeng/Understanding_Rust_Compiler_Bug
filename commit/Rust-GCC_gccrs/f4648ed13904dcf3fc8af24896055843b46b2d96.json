{"sha": "f4648ed13904dcf3fc8af24896055843b46b2d96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ2NDhlZDEzOTA0ZGNmM2ZjOGFmMjQ4OTYwNTU4NDNiNDZiMmQ5Ng==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2009-08-12T14:23:01Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-08-12T14:23:01Z"}, "message": "Restore original scattering when the transform is not legal.\n\n2009-08-05  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-blocking.c (scop_do_strip_mine): Call store_scattering.\n\tEarly return without analyzing the data dependences if no\n\ttransform has been done.  Call restore_scattering if the transform\n\tis not legal.\n\t(graphite-interchange.c): Same.\n\t* graphite-poly.c (print_scattering_function): Test for PBB_TRANSFORMED.\n\t(graphite_read_transforms): Initialize PBB_TRANSFORMED.\n\t(apply_poly_transforms): Do not gcc_assert that\n\tthe transform is legal.\n\t(new_poly_bb): Initialize PBB_TRANSFORMED, PBB_SAVED, and PBB_ORIGINAL.\n\tDo not initialize PBB_NB_SCATTERING_TRANSFORM, PBB_NB_LOCAL_VARIABLES,\n\tPBB_TRANSFORMED_SCATTERING, and PBB_ORIGINAL_SCATTERING.\n\t(free_poly_dr): Free PBB_TRANSFORMED, PBB_SAVED, and PBB_ORIGINAL.\n\t* graphite-poly.h (struct poly_scattering): New.\n\t(struct poly_bb): Add original, transformed, and saved fields.\n\tRemove transformed_scattering, original_scattering, nb_local_variables,\n\tand nb_scattering_transform fields.\n\t(PBB_ORIGINAL, PBB_TRANSFORMED, PBB_SAVED): New.\n\t(poly_scattering_new): New.\n\t(poly_scattering_free): New.\n\t(poly_scattering_copy): New.\n\t(store_scattering_pbb): New.\n\t(store_scattering): New.\n\t(restore_scattering_pbb): New.\n\t(restore_scattering): New.\n\t* graphite-sese-to-poly.c (build_pbb_scattering_polyhedrons):\n\tInitialize PBB_TRANSFORMED and PBB_ORIGINAL.\n\nFrom-SVN: r150686", "tree": {"sha": "ea44f243fde73312dfa71681281a6fb0189704fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea44f243fde73312dfa71681281a6fb0189704fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4648ed13904dcf3fc8af24896055843b46b2d96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4648ed13904dcf3fc8af24896055843b46b2d96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4648ed13904dcf3fc8af24896055843b46b2d96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4648ed13904dcf3fc8af24896055843b46b2d96/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e31a5bd4bba66e7704192d8c978f1bc3e9f9436c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e31a5bd4bba66e7704192d8c978f1bc3e9f9436c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e31a5bd4bba66e7704192d8c978f1bc3e9f9436c"}], "stats": {"total": 242, "additions": 208, "deletions": 34}, "files": [{"sha": "60a0cc8114b22d78fe6a8aec1709eb652b02018a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4648ed13904dcf3fc8af24896055843b46b2d96/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4648ed13904dcf3fc8af24896055843b46b2d96/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4648ed13904dcf3fc8af24896055843b46b2d96", "patch": "@@ -1,3 +1,33 @@\n+2009-08-12  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-blocking.c (scop_do_strip_mine): Call store_scattering.\n+\tEarly return without analyzing the data dependences if no\n+\ttransform has been done.  Call restore_scattering if the transform\n+\tis not legal.\n+\t(graphite-interchange.c): Same.\n+\t* graphite-poly.c (print_scattering_function): Test for PBB_TRANSFORMED.\n+\t(graphite_read_transforms): Initialize PBB_TRANSFORMED.\n+\t(apply_poly_transforms): Do not gcc_assert that\n+\tthe transform is legal.\n+\t(new_poly_bb): Initialize PBB_TRANSFORMED, PBB_SAVED, and PBB_ORIGINAL.\n+\tDo not initialize PBB_NB_SCATTERING_TRANSFORM, PBB_NB_LOCAL_VARIABLES,\n+\tPBB_TRANSFORMED_SCATTERING, and PBB_ORIGINAL_SCATTERING.\n+\t(free_poly_dr): Free PBB_TRANSFORMED, PBB_SAVED, and PBB_ORIGINAL.\n+\t* graphite-poly.h (struct poly_scattering): New.\n+\t(struct poly_bb): Add original, transformed, and saved fields.\n+\tRemove transformed_scattering, original_scattering, nb_local_variables,\n+\tand nb_scattering_transform fields.\n+\t(PBB_ORIGINAL, PBB_TRANSFORMED, PBB_SAVED): New.\n+\t(poly_scattering_new): New.\n+\t(poly_scattering_free): New.\n+\t(poly_scattering_copy): New.\n+\t(store_scattering_pbb): New.\n+\t(store_scattering): New.\n+\t(restore_scattering_pbb): New.\n+\t(restore_scattering): New.\n+\t* graphite-sese-to-poly.c (build_pbb_scattering_polyhedrons):\n+\tInitialize PBB_TRANSFORMED and PBB_ORIGINAL.\n+\n 2009-08-12  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-poly.c (print_pbb): Add parentheses in the pretty print."}, {"sha": "38b22e9dc116bcf4e43a19717248239076c74ef2", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4648ed13904dcf3fc8af24896055843b46b2d96/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4648ed13904dcf3fc8af24896055843b46b2d96/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=f4648ed13904dcf3fc8af24896055843b46b2d96", "patch": "@@ -1,3 +1,33 @@\n+2009-08-05  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-blocking.c (scop_do_strip_mine): Call store_scattering.\n+\tEarly return without analyzing the data dependences if no\n+\ttransform has been done.  Call restore_scattering if the transform\n+\tis not legal.\n+\t(graphite-interchange.c): Same.\n+\t* graphite-poly.c (print_scattering_function): Test for PBB_TRANSFORMED.\n+\t(graphite_read_transforms): Initialize PBB_TRANSFORMED.\n+\t(apply_poly_transforms): Do not gcc_assert that\n+\tthe transform is legal.\n+\t(new_poly_bb): Initialize PBB_TRANSFORMED, PBB_SAVED, and PBB_ORIGINAL.\n+\tDo not initialize PBB_NB_SCATTERING_TRANSFORM, PBB_NB_LOCAL_VARIABLES,\n+\tPBB_TRANSFORMED_SCATTERING, and PBB_ORIGINAL_SCATTERING.\n+\t(free_poly_dr): Free PBB_TRANSFORMED, PBB_SAVED, and PBB_ORIGINAL.\n+\t* graphite-poly.h (struct poly_scattering): New.\n+\t(struct poly_bb): Add original, transformed, and saved fields.\n+\tRemove transformed_scattering, original_scattering, nb_local_variables,\n+\tand nb_scattering_transform fields.\n+\t(PBB_ORIGINAL, PBB_TRANSFORMED, PBB_SAVED): New.\n+\t(poly_scattering_new): New.\n+\t(poly_scattering_free): New.\n+\t(poly_scattering_copy): New.\n+\t(store_scattering_pbb): New.\n+\t(store_scattering): New.\n+\t(restore_scattering_pbb): New.\n+\t(restore_scattering): New.\n+\t* graphite-sese-to-poly.c (build_pbb_scattering_polyhedrons):\n+\tInitialize PBB_TRANSFORMED and PBB_ORIGINAL.\n+\t\n 2009-08-05  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-poly.c (print_pbb): Add parentheses in the pretty print."}, {"sha": "45f3bc6c629c3f0d963ceb669d912f833871ee3e", "filename": "gcc/graphite-blocking.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4648ed13904dcf3fc8af24896055843b46b2d96/gcc%2Fgraphite-blocking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4648ed13904dcf3fc8af24896055843b46b2d96/gcc%2Fgraphite-blocking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-blocking.c?ref=f4648ed13904dcf3fc8af24896055843b46b2d96", "patch": "@@ -201,10 +201,21 @@ scop_do_strip_mine (scop_p scop)\n   int i;\n   bool transform_done = false;\n \n+  store_scattering (scop);\n+\n   for (i = 0; VEC_iterate (poly_bb_p, SCOP_BBS (scop), i, pbb); i++)\n     transform_done |= pbb_do_strip_mine (pbb);\n \n-  return transform_done;\n+  if (!transform_done)\n+    return false;\n+\n+  if (!graphite_legal_transform (scop))\n+    {\n+      restore_scattering (scop);\n+      return false;\n+    }\n+\n+  return true;\n }\n \n #endif"}, {"sha": "785be708e0488921a00c79ba06f71e80dc911049", "filename": "gcc/graphite-interchange.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4648ed13904dcf3fc8af24896055843b46b2d96/gcc%2Fgraphite-interchange.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4648ed13904dcf3fc8af24896055843b46b2d96/gcc%2Fgraphite-interchange.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-interchange.c?ref=f4648ed13904dcf3fc8af24896055843b46b2d96", "patch": "@@ -388,9 +388,20 @@ scop_do_interchange (scop_p scop)\n   poly_bb_p pbb;\n   bool transform_done = false;\n \n+  store_scattering (scop);\n+\n   for (i = 0; VEC_iterate (poly_bb_p, SCOP_BBS (scop), i, pbb); i++)\n     transform_done |= pbb_do_interchange (pbb, scop);\n \n+  if (!transform_done)\n+    return false;\n+\n+  if (!graphite_legal_transform (scop))\n+    {\n+      restore_scattering (scop);\n+      return false;\n+    }\n+\n   return transform_done;\n }\n "}, {"sha": "d06da75b81115682fb16db7e0a85e15deafa4709", "filename": "gcc/graphite-poly.c", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4648ed13904dcf3fc8af24896055843b46b2d96/gcc%2Fgraphite-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4648ed13904dcf3fc8af24896055843b46b2d96/gcc%2Fgraphite-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.c?ref=f4648ed13904dcf3fc8af24896055843b46b2d96", "patch": "@@ -142,7 +142,7 @@ print_scattering_function (FILE *file, poly_bb_p pbb)\n {\n   graphite_dim_t i;\n \n-  if (!PBB_TRANSFORMED_SCATTERING (pbb))\n+  if (!PBB_TRANSFORMED (pbb))\n     return;\n \n   fprintf (file, \"scattering bb_%d (\\n\", GBB_BB (PBB_BLACK_BOX (pbb))->index);\n@@ -255,16 +255,10 @@ apply_poly_transforms (scop_p scop)\n     gcc_unreachable (); /* Not yet supported.  */\n \n   if (flag_loop_strip_mine)\n-    {\n-      transform_done |= scop_do_strip_mine (scop);\n-      gcc_assert (graphite_legal_transform (scop));\n-    }\n+    transform_done |= scop_do_strip_mine (scop);\n \n   if (flag_loop_interchange)\n-    {\n-      transform_done |= scop_do_interchange (scop);\n-      gcc_assert (graphite_legal_transform (scop));\n-    }\n+    transform_done |= scop_do_interchange (scop);\n \n   return transform_done;\n }\n@@ -309,11 +303,10 @@ new_poly_bb (scop_p scop, void *black_box)\n   PBB_DOMAIN (pbb) = NULL;\n   PBB_SCOP (pbb) = scop;\n   pbb_set_black_box (pbb, black_box);\n-  PBB_TRANSFORMED_SCATTERING (pbb) = NULL;\n-  PBB_ORIGINAL_SCATTERING (pbb) = NULL;\n+  PBB_TRANSFORMED (pbb) = NULL;\n+  PBB_SAVED (pbb) = NULL;\n+  PBB_ORIGINAL (pbb) = NULL;\n   PBB_DRS (pbb) = VEC_alloc (poly_dr_p, heap, 3);\n-  PBB_NB_SCATTERING_TRANSFORM (pbb) = 0;\n-  PBB_NB_LOCAL_VARIABLES (pbb) = 0;\n   VEC_safe_push (poly_bb_p, heap, SCOP_BBS (scop), pbb);\n }\n \n@@ -327,11 +320,14 @@ free_poly_bb (poly_bb_p pbb)\n \n   ppl_delete_Pointset_Powerset_C_Polyhedron (PBB_DOMAIN (pbb));\n \n-  if (PBB_TRANSFORMED_SCATTERING (pbb))\n-    ppl_delete_Polyhedron (PBB_TRANSFORMED_SCATTERING (pbb));\n+  if (PBB_TRANSFORMED (pbb))\n+    poly_scattering_free (PBB_TRANSFORMED (pbb));\n+\n+  if (PBB_SAVED (pbb))\n+    poly_scattering_free (PBB_SAVED (pbb));\n \n-  if (PBB_ORIGINAL_SCATTERING (pbb))\n-    ppl_delete_Polyhedron (PBB_ORIGINAL_SCATTERING (pbb));\n+  if (PBB_ORIGINAL (pbb))\n+    poly_scattering_free (PBB_ORIGINAL (pbb));\n \n   if (PBB_DRS (pbb))\n     for (i = 0; VEC_iterate (poly_dr_p, PBB_DRS (pbb), i, pdr); i++)"}, {"sha": "28fca70583225fe2ea303e91c11481a6382eff32", "filename": "gcc/graphite-poly.h", "status": "modified", "additions": 110, "deletions": 14, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4648ed13904dcf3fc8af24896055843b46b2d96/gcc%2Fgraphite-poly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4648ed13904dcf3fc8af24896055843b46b2d96/gcc%2Fgraphite-poly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.h?ref=f4648ed13904dcf3fc8af24896055843b46b2d96", "patch": "@@ -227,6 +227,20 @@ pdr_parameter_dim (poly_dr_p pdr, graphite_dim_t param)\n   return pbb_dim_iter_domain (pbb) + param;\n }\n \n+typedef struct poly_scattering *poly_scattering_p;\n+\n+struct poly_scattering\n+{\n+  /* The scattering function containing the transformations.  */\n+  ppl_Polyhedron_t scattering;\n+\n+  /* The number of local variables.  */\n+  int nb_local_variables;\n+\n+  /* The number of scattering dimensions.  */\n+  int nb_scattering;\n+};\n+\n /* POLY_BB represents a blackbox in the polyhedral model.  */\n \n struct poly_bb\n@@ -260,28 +274,27 @@ struct poly_bb\n   /* The data references we access.  */\n   VEC (poly_dr_p, heap) *drs;\n \n-  /* The scattering function containing the transformations.  */\n-  ppl_Polyhedron_t transformed_scattering;\n-\n+  /* The original scattering.  */\n+  poly_scattering_p original;\n \n-  /* The original scattering function.  */\n-  ppl_Polyhedron_t original_scattering;\n-\n-  /* The number of local variables.  */\n-  int nb_local_variables;\n+  /* The transformed scattering.  */\n+  poly_scattering_p transformed;\n \n-  /* The number of scattering dimensions in the TRANSFORMED scattering.  */\n-  int nb_scattering_transform;\n+  /* A copy of the transformed scattering.  */\n+  poly_scattering_p saved;\n };\n \n #define PBB_BLACK_BOX(PBB) ((gimple_bb_p) PBB->black_box)\n #define PBB_SCOP(PBB) (PBB->scop)\n #define PBB_DOMAIN(PBB) (PBB->domain)\n #define PBB_DRS(PBB) (PBB->drs)\n-#define PBB_TRANSFORMED_SCATTERING(PBB) (PBB->transformed_scattering)\n-#define PBB_ORIGINAL_SCATTERING(PBB) (PBB->original_scattering)\n-#define PBB_NB_LOCAL_VARIABLES(PBB) (PBB->nb_local_variables)\n-#define PBB_NB_SCATTERING_TRANSFORM(PBB) (PBB->nb_scattering_transform)\n+#define PBB_ORIGINAL(PBB) (PBB->original)\n+#define PBB_ORIGINAL_SCATTERING(PBB) (PBB->original->scattering)\n+#define PBB_TRANSFORMED(PBB) (PBB->transformed)\n+#define PBB_TRANSFORMED_SCATTERING(PBB) (PBB->transformed->scattering)\n+#define PBB_SAVED(PBB) (PBB->saved)\n+#define PBB_NB_LOCAL_VARIABLES(PBB) (PBB->transformed->nb_local_variables)\n+#define PBB_NB_SCATTERING_TRANSFORM(PBB) (PBB->transformed->nb_scattering)\n \n extern void new_poly_bb (scop_p, void *);\n extern void free_poly_bb (poly_bb_p);\n@@ -578,4 +591,87 @@ scop_set_nb_params (scop_p scop, graphite_dim_t nb_params)\n   scop->nb_params = nb_params;\n }\n \n+/* Allocates a new empty poly_scattering structure.  */\n+\n+static inline poly_scattering_p\n+poly_scattering_new (void)\n+{\n+  poly_scattering_p res = XNEW (struct poly_scattering);\n+\n+  res->scattering = NULL;\n+  res->nb_local_variables = 0;\n+  res->nb_scattering = 0;\n+  return res;\n+}\n+\n+/* Free a poly_scattering structure.  */\n+\n+static inline void\n+poly_scattering_free (poly_scattering_p s)\n+{\n+  ppl_delete_Polyhedron (s->scattering);\n+  free (s);\n+}\n+\n+/* Copies S and return a new scattering.  */\n+\n+static inline poly_scattering_p\n+poly_scattering_copy (poly_scattering_p s)\n+{\n+  poly_scattering_p res = poly_scattering_new ();\n+\n+  ppl_new_C_Polyhedron_from_C_Polyhedron (&(res->scattering), s->scattering);\n+  res->nb_local_variables = s->nb_local_variables;\n+  res->nb_scattering = s->nb_scattering;\n+  return res;\n+}\n+\n+/* Saves the transformed scattering of PBB.  */\n+\n+static inline void\n+store_scattering_pbb (poly_bb_p pbb)\n+{\n+  gcc_assert (PBB_TRANSFORMED (pbb));\n+\n+  if (PBB_SAVED (pbb))\n+    poly_scattering_free (PBB_SAVED (pbb));\n+\n+  PBB_SAVED (pbb) = poly_scattering_copy (PBB_TRANSFORMED (pbb));\n+}\n+\n+/* Saves the scattering for all the pbbs in the SCOP.  */\n+\n+static inline void\n+store_scattering (scop_p scop)\n+{\n+  int i;\n+  poly_bb_p pbb;\n+\n+  for (i = 0; VEC_iterate (poly_bb_p, SCOP_BBS (scop), i, pbb); i++)\n+    store_scattering_pbb (pbb);\n+}\n+\n+/* Restores the scattering of PBB.  */\n+\n+static inline void\n+restore_scattering_pbb (poly_bb_p pbb)\n+{\n+  gcc_assert (PBB_SAVED (pbb));\n+\n+  poly_scattering_free (PBB_TRANSFORMED (pbb));\n+  PBB_TRANSFORMED (pbb) = poly_scattering_copy (PBB_SAVED (pbb));\n+}\n+\n+/* Restores the scattering for all the pbbs in the SCOP.  */\n+\n+static inline void\n+restore_scattering (scop_p scop)\n+{\n+  int i;\n+  poly_bb_p pbb;\n+\n+  for (i = 0; VEC_iterate (poly_bb_p, SCOP_BBS (scop), i, pbb); i++)\n+    restore_scattering_pbb (pbb);\n+}\n+\n #endif"}, {"sha": "6204ec8e98738efe1064cfc670ec0610ccb7b32a", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4648ed13904dcf3fc8af24896055843b46b2d96/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4648ed13904dcf3fc8af24896055843b46b2d96/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=f4648ed13904dcf3fc8af24896055843b46b2d96", "patch": "@@ -498,6 +498,7 @@ build_pbb_scattering_polyhedrons (ppl_Linear_Expression_t static_schedule,\n \n   value_init (v);\n   ppl_new_Coefficient (&c);\n+  PBB_TRANSFORMED (pbb) = poly_scattering_new ();\n   ppl_new_C_Polyhedron_from_space_dimension\n     (&PBB_TRANSFORMED_SCATTERING (pbb), dim, 0);\n \n@@ -543,8 +544,7 @@ build_pbb_scattering_polyhedrons (ppl_Linear_Expression_t static_schedule,\n   value_clear (v);\n   ppl_delete_Coefficient (c);\n \n-  ppl_new_C_Polyhedron_from_C_Polyhedron (&PBB_ORIGINAL_SCATTERING (pbb),\n-\t\t\t\t\t  PBB_TRANSFORMED_SCATTERING (pbb));\n+  PBB_ORIGINAL (pbb) = poly_scattering_copy (PBB_TRANSFORMED (pbb));\n }\n \n /* Build for BB the static schedule."}]}