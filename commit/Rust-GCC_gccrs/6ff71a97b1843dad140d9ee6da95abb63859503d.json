{"sha": "6ff71a97b1843dad140d9ee6da95abb63859503d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZmNzFhOTdiMTg0M2RhZDE0MGQ5ZWU2ZGE5NWFiYjYzODU5NTAzZA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "2000-07-21T00:15:44Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-07-21T00:15:44Z"}, "message": "flow.c (verify_flow_info): Revamp code to verify that the head and end of each basic block are in the insn...\n\n        * flow.c (verify_flow_info): Revamp code to verify that the\n        head and end of each basic block are in the insn chain.\n\nFrom-SVN: r35160", "tree": {"sha": "98375bc9f7c2c10be1bba4d7ca0b21e1730be1ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98375bc9f7c2c10be1bba4d7ca0b21e1730be1ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ff71a97b1843dad140d9ee6da95abb63859503d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff71a97b1843dad140d9ee6da95abb63859503d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ff71a97b1843dad140d9ee6da95abb63859503d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff71a97b1843dad140d9ee6da95abb63859503d/comments", "author": null, "committer": null, "parents": [{"sha": "11b26d723ee6ca3c3a682f93d351367004ddebab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11b26d723ee6ca3c3a682f93d351367004ddebab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11b26d723ee6ca3c3a682f93d351367004ddebab"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "1a6b8bde42476464cbd272b940052fce7298bea1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff71a97b1843dad140d9ee6da95abb63859503d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff71a97b1843dad140d9ee6da95abb63859503d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ff71a97b1843dad140d9ee6da95abb63859503d", "patch": "@@ -1,3 +1,8 @@\n+Thu Jul 20 18:13:52 2000  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* flow.c (verify_flow_info): Revamp code to verify that the\n+\thead and end of each basic block are in the insn chain.\n+\n Thu Jul 20 18:02:35 2000  Michael Matz <matzmich@cs.tu-berlin.de>\n \n \t* gcse.c (record_one_set): Prepend instead of append onto"}, {"sha": "7019dbf8cd2a0de8ba3688a36ace505740945f27", "filename": "gcc/flow.c", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff71a97b1843dad140d9ee6da95abb63859503d/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff71a97b1843dad140d9ee6da95abb63859503d/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=6ff71a97b1843dad140d9ee6da95abb63859503d", "patch": "@@ -6342,34 +6342,37 @@ verify_flow_info ()\n {\n   const int max_uid = get_max_uid ();\n   const rtx rtx_first = get_insns ();\n+  rtx last_head = get_last_insn ();\n   basic_block *bb_info;\n   rtx x;\n   int i, last_bb_num_seen, num_bb_notes, err = 0;\n \n   bb_info = (basic_block *) xcalloc (max_uid, sizeof (basic_block));\n \n-  /* First pass check head/end pointers and set bb_info array used by\n-     later passes.  */\n   for (i = n_basic_blocks - 1; i >= 0; i--)\n     {\n       basic_block bb = BASIC_BLOCK (i);\n+      rtx head = bb->head;\n+      rtx end = bb->end;\n \n-      /* Check the head pointer and make sure that it is pointing into\n-         insn list.  */\n-      for (x = rtx_first; x != NULL_RTX; x = NEXT_INSN (x))\n-\tif (x == bb->head)\n+      /* Verify the end of the basic block is in the INSN chain.  */\n+      for (x = last_head; x != NULL_RTX; x = PREV_INSN (x))\n+\tif (x == end)\n \t  break;\n       if (!x)\n \t{\n-\t  error (\"Head insn %d for block %d not found in the insn stream.\",\n-\t\t INSN_UID (bb->head), bb->index);\n+\t  error (\"End insn %d for block %d not found in the insn stream.\",\n+\t\t INSN_UID (end), bb->index);\n \t  err = 1;\n \t}\n \n-      /* Check the end pointer and make sure that it is pointing into\n-         insn list.  */\n-      for (x = bb->head; x != NULL_RTX; x = NEXT_INSN (x))\n+      /* Work backwards from the end to the head of the basic block\n+\t to verify the head is in the RTL chain.  */\n+      for ( ; x != NULL_RTX; x = PREV_INSN (x))\n \t{\n+\t  /* While walking over the insn chain, verify insns appear\n+\t     in only one basic block and initialize the BB_INFO array\n+\t     used by other passes.  */\n \t  if (bb_info[INSN_UID (x)] != NULL)\n \t    {\n \t      error (\"Insn %d is in multiple basic blocks (%d and %d)\",\n@@ -6378,15 +6381,17 @@ verify_flow_info ()\n \t    }\n \t  bb_info[INSN_UID (x)] = bb;\n \n-\t  if (x == bb->end)\n+\t  if (x == head)\n \t    break;\n \t}\n       if (!x)\n \t{\n-\t  error (\"End insn %d for block %d not found in the insn stream.\",\n-\t\t INSN_UID (bb->end), bb->index);\n+\t  error (\"Head insn %d for block %d not found in the insn stream.\",\n+\t\t INSN_UID (head), bb->index);\n \t  err = 1;\n \t}\n+\n+      last_head = x;\n     }\n \n   /* Now check the basic blocks (boundaries etc.) */"}]}