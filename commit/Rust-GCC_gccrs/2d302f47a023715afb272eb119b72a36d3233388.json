{"sha": "2d302f47a023715afb272eb119b72a36d3233388", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQzMDJmNDdhMDIzNzE1YWZiMjcyZWIxMTliNzJhMzZkMzIzMzM4OA==", "commit": {"author": {"name": "Markus Trippelsdorf", "email": "markus@trippelsdorf.de", "date": "2014-11-19T16:28:23Z"}, "committer": {"name": "Markus Trippelsdorf", "email": "trippels@gcc.gnu.org", "date": "2014-11-19T16:28:23Z"}, "message": "rs6000: Fix signed integer overflows\n\nbootstrap-ubsan on gcc112 shows a couple of signed integer overflows:\n\nconfig/rs6000/constraints.md:143:33: runtime error: signed integer overflow: 9223372036854775807 + 32768 cannot be represented in type 'long int'\nconfig/rs6000/predicates.md:396:22: runtime error: signed integer overflow: 9223372036854775807 + 2147516416 cannot be represented in type 'long int'\nconfig/rs6000/predicates.md:856:11: runtime error: negation of -9223372036854775808 cannot be represented in type 'long int'; cast to an unsigned type to negate this value to itself\nconfig/rs6000/predicates.md:862:12: runtime error: negation of -9223372036854775808 cannot be represented in type 'long int'; cast to an unsigned type to negate this value to itself\nconfig/rs6000/predicates.md:865:11: runtime error: negation of -9223372036854775808 cannot be represented in type 'long int'; cast to an unsigned type to negate this value to itself\nconfig/rs6000/predicates.md:868:12: runtime error: negation of -9223372036854775808 cannot be represented in type 'long int'; cast to an unsigned type to negate this value to itself\nconfig/rs6000/predicates.md:914:11: runtime error: negation of -9223372036854775808 cannot be represented in type 'long int'; cast to an unsigned type to negate this value to itself\nconfig/rs6000/predicates.md:917:12: runtime error: negation of -9223372036854775808 cannot be represented in type 'long int'; cast to an unsigned type to negate this value to itself\nconfig/rs6000/predicates.md:940:11: runtime error: negation of -9223372036854775808 cannot be represented in type 'long int'; cast to an unsigned type to negate this value to itself\nconfig/rs6000/predicates.md:946:12: runtime error: negation of -9223372036854775808 cannot be represented in type 'long int'; cast to an unsigned type to negate this value to itself\nconfig/rs6000/predicates.md:949:11: runtime error: negation of -9223372036854775808 cannot be represented in type 'long int'; cast to an unsigned type to negate this value to itself\nconfig/rs6000/predicates.md:955:12: runtime error: negation of -9223372036854775808 cannot be represented in type 'long int'; cast to an unsigned type to negate this value to itself\n\n2014-11-19  Markus Trippelsdorf  <markus@trippelsdorf.de>\n\n\t* config/rs6000/constraints.md: Avoid signed integer overflows.\n\t* config/rs6000/predicates.md: Likewise.\n\nFrom-SVN: r217785", "tree": {"sha": "e63c30e7a25cea9e0b8e18a0c21fc63fc5a9d01f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e63c30e7a25cea9e0b8e18a0c21fc63fc5a9d01f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d302f47a023715afb272eb119b72a36d3233388", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d302f47a023715afb272eb119b72a36d3233388", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d302f47a023715afb272eb119b72a36d3233388", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d302f47a023715afb272eb119b72a36d3233388/comments", "author": null, "committer": null, "parents": [{"sha": "31b0bf51d6fc543057aa55f8678d17f866c8b864", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31b0bf51d6fc543057aa55f8678d17f866c8b864", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31b0bf51d6fc543057aa55f8678d17f866c8b864"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "aeb8fadd94694a6bc114f99e8c470de77a87309e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d302f47a023715afb272eb119b72a36d3233388/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d302f47a023715afb272eb119b72a36d3233388/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d302f47a023715afb272eb119b72a36d3233388", "patch": "@@ -1,3 +1,8 @@\n+2014-11-19  Markus Trippelsdorf  <markus@trippelsdorf.de>\n+\n+\t* config/rs6000/constraints.md: Avoid signed integer overflows.\n+\t* config/rs6000/predicates.md: Likewise.\n+\n 2014-11-19  Renlin Li  <Renlin.Li@arm.com>\n \n     PR middle-end/63762"}, {"sha": "0e0e517d7a1d39a56e89f1d43293046ac261204b", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d302f47a023715afb272eb119b72a36d3233388/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d302f47a023715afb272eb119b72a36d3233388/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=2d302f47a023715afb272eb119b72a36d3233388", "patch": "@@ -140,7 +140,7 @@\n (define_constraint \"I\"\n   \"A signed 16-bit constant\"\n   (and (match_code \"const_int\")\n-       (match_test \"(unsigned HOST_WIDE_INT) (ival + 0x8000) < 0x10000\")))\n+       (match_test \"((unsigned HOST_WIDE_INT) ival + 0x8000) < 0x10000\")))\n \n (define_constraint \"J\"\n   \"high-order 16 bits nonzero\""}, {"sha": "1767cbd7a11b97d041de2657f51bcb0ff86ed76d", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d302f47a023715afb272eb119b72a36d3233388/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d302f47a023715afb272eb119b72a36d3233388/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=2d302f47a023715afb272eb119b72a36d3233388", "patch": "@@ -392,8 +392,8 @@\n ;; Return 1 if op is a constant integer valid for addition with addis, addi.\n (define_predicate \"add_cint_operand\"\n   (and (match_code \"const_int\")\n-       (match_test \"(unsigned HOST_WIDE_INT)\n-\t\t      (INTVAL (op) + (mode == SImode ? 0x80000000 : 0x80008000))\n+       (match_test \"((unsigned HOST_WIDE_INT) INTVAL (op)\n+\t\t       + (mode == SImode ? 0x80000000 : 0x80008000))\n \t\t    < (unsigned HOST_WIDE_INT) 0x100000000ll\")))\n \n ;; Return 1 if op is a constant integer valid for addition\n@@ -827,7 +827,7 @@\n (define_predicate \"mask_operand\"\n   (match_code \"const_int\")\n {\n-  HOST_WIDE_INT c, lsb;\n+  unsigned HOST_WIDE_INT c, lsb;\n \n   c = INTVAL (op);\n \n@@ -872,7 +872,7 @@\n (define_predicate \"mask_operand_wrap\"\n   (match_code \"const_int\")\n {\n-  HOST_WIDE_INT c, lsb;\n+  unsigned HOST_WIDE_INT c, lsb;\n \n   c = INTVAL (op);\n \n@@ -897,7 +897,7 @@\n (define_predicate \"mask64_operand\"\n   (match_code \"const_int\")\n {\n-  HOST_WIDE_INT c, lsb;\n+  unsigned HOST_WIDE_INT c, lsb;\n \n   c = INTVAL (op);\n \n@@ -923,7 +923,7 @@\n (define_predicate \"mask64_2_operand\"\n   (match_code \"const_int\")\n {\n-  HOST_WIDE_INT c, lsb;\n+  unsigned HOST_WIDE_INT c, lsb;\n \n   c = INTVAL (op);\n "}]}