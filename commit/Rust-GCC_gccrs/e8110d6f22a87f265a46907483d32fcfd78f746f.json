{"sha": "e8110d6f22a87f265a46907483d32fcfd78f746f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgxMTBkNmYyMmE4N2YyNjVhNDY5MDc0ODNkMzJmY2ZkNzhmNzQ2Zg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2011-04-01T03:05:36Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-04-01T03:05:36Z"}, "message": "emit-rtl.c (emit_pattern_after_setloc): New function.\n\n\t* emit-rtl.c (emit_pattern_after_setloc): New function.\n\t(emit_insn_after_setloc, emit_jump_insn_after_setloc): Call it.\n\t(emit_call_insn_after_setloc, emit_debug_insn_after_setloc): Likewise.\n\t(emit_pattern_after): New function.\n\t(emit_insn_after, emit_jump_insn_after): Call it.\n\t(emit_call_insn_after, emit_debug_insn_after): Likewise.\n\t(emit_pattern_before_setloc): New function.\n\t(emit_insn_before_setloc, emit_jump_insn_before_setloc): Call it.\n\t(emit_call_insn_before_setloc, emit_debug_insn_before_setloc):\n\tLikewise.\n\t(emit_pattern_before): New function.\n\t(emit_insn_before, emit_jump_insn_before): Call it.\n\t(emit_call_insn_before, emit_debug_insn_before): Likewise.\n\nFrom-SVN: r171817", "tree": {"sha": "056922fddb5abdf25ba44398cd0e5e5916e652f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/056922fddb5abdf25ba44398cd0e5e5916e652f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8110d6f22a87f265a46907483d32fcfd78f746f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8110d6f22a87f265a46907483d32fcfd78f746f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8110d6f22a87f265a46907483d32fcfd78f746f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8110d6f22a87f265a46907483d32fcfd78f746f/comments", "author": null, "committer": null, "parents": [{"sha": "576f85f168d40bad6e8d86d8209bbcbd2e948cc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/576f85f168d40bad6e8d86d8209bbcbd2e948cc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/576f85f168d40bad6e8d86d8209bbcbd2e948cc3"}], "stats": {"total": 285, "additions": 118, "deletions": 167}, "files": [{"sha": "922f6e6f2ee5e69219255e5ffe68cdea92700661", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8110d6f22a87f265a46907483d32fcfd78f746f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8110d6f22a87f265a46907483d32fcfd78f746f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e8110d6f22a87f265a46907483d32fcfd78f746f", "patch": "@@ -1,3 +1,19 @@\n+2011-03-31  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* emit-rtl.c (emit_pattern_after_setloc): New function.\n+\t(emit_insn_after_setloc, emit_jump_insn_after_setloc): Call it.\n+\t(emit_call_insn_after_setloc, emit_debug_insn_after_setloc): Likewise.\n+\t(emit_pattern_after): New function.\n+\t(emit_insn_after, emit_jump_insn_after): Call it.\n+\t(emit_call_insn_after, emit_debug_insn_after): Likewise.\n+\t(emit_pattern_before_setloc): New function.\n+\t(emit_insn_before_setloc, emit_jump_insn_before_setloc): Call it.\n+\t(emit_call_insn_before_setloc, emit_debug_insn_before_setloc):\n+\tLikewise.\n+\t(emit_pattern_before): New function.\n+\t(emit_insn_before, emit_jump_insn_before): Call it.\n+\t(emit_call_insn_before, emit_debug_insn_before): Likewise.\n+\n 2011-03-31  Richard Henderson  <rth@redhat.com>\n \n \t* dwarf2out.c (dw_separate_line_info_ref): Remove."}, {"sha": "9b57aeab47ae6738f2547e9c30f155af08622ea1", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 102, "deletions": 167, "changes": 269, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8110d6f22a87f265a46907483d32fcfd78f746f/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8110d6f22a87f265a46907483d32fcfd78f746f/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=e8110d6f22a87f265a46907483d32fcfd78f746f", "patch": "@@ -4319,11 +4319,14 @@ emit_note_after (enum insn_note subtype, rtx after)\n   return note;\n }\n \f\n-/* Like emit_insn_after_noloc, but set INSN_LOCATOR according to SCOPE.  */\n-rtx\n-emit_insn_after_setloc (rtx pattern, rtx after, int loc)\n+/* Insert PATTERN after AFTER, setting its INSN_LOCATION to LOC.\n+   MAKE_RAW indicates how to turn PATTERN into a real insn.  */\n+\n+static rtx\n+emit_pattern_after_setloc (rtx pattern, rtx after, int loc,\n+\t\t\t   rtx (*make_raw) (rtx))\n {\n-  rtx last = emit_insn_after_noloc (pattern, after, NULL);\n+  rtx last = emit_pattern_after_noloc (pattern, after, NULL, make_raw);\n \n   if (pattern == NULL_RTX || !loc)\n     return last;\n@@ -4340,130 +4343,96 @@ emit_insn_after_setloc (rtx pattern, rtx after, int loc)\n   return last;\n }\n \n-/* Like emit_insn_after_noloc, but set INSN_LOCATOR according to AFTER.  */\n-rtx\n-emit_insn_after (rtx pattern, rtx after)\n+/* Insert PATTERN after AFTER.  MAKE_RAW indicates how to turn PATTERN\n+   into a real insn.  SKIP_DEBUG_INSNS indicates whether to insert after\n+   any DEBUG_INSNs.  */\n+\n+static rtx\n+emit_pattern_after (rtx pattern, rtx after, bool skip_debug_insns,\n+\t\t    rtx (*make_raw) (rtx))\n {\n   rtx prev = after;\n \n-  while (DEBUG_INSN_P (prev))\n-    prev = PREV_INSN (prev);\n+  if (skip_debug_insns)\n+    while (DEBUG_INSN_P (prev))\n+      prev = PREV_INSN (prev);\n \n   if (INSN_P (prev))\n-    return emit_insn_after_setloc (pattern, after, INSN_LOCATOR (prev));\n+    return emit_pattern_after_setloc (pattern, after, INSN_LOCATOR (prev),\n+\t\t\t\t      make_raw);\n   else\n-    return emit_insn_after_noloc (pattern, after, NULL);\n+    return emit_pattern_after_noloc (pattern, after, NULL, make_raw);\n }\n \n-/* Like emit_jump_insn_after_noloc, but set INSN_LOCATOR according to SCOPE.  */\n+/* Like emit_insn_after_noloc, but set INSN_LOCATOR according to LOC.  */\n rtx\n-emit_jump_insn_after_setloc (rtx pattern, rtx after, int loc)\n+emit_insn_after_setloc (rtx pattern, rtx after, int loc)\n {\n-  rtx last = emit_jump_insn_after_noloc (pattern, after);\n+  return emit_pattern_after_setloc (pattern, after, loc, make_insn_raw);\n+}\n \n-  if (pattern == NULL_RTX || !loc)\n-    return last;\n+/* Like emit_insn_after_noloc, but set INSN_LOCATOR according to AFTER.  */\n+rtx\n+emit_insn_after (rtx pattern, rtx after)\n+{\n+  return emit_pattern_after (pattern, after, true, make_insn_raw);\n+}\n \n-  after = NEXT_INSN (after);\n-  while (1)\n-    {\n-      if (active_insn_p (after) && !INSN_LOCATOR (after))\n-\tINSN_LOCATOR (after) = loc;\n-      if (after == last)\n-\tbreak;\n-      after = NEXT_INSN (after);\n-    }\n-  return last;\n+/* Like emit_jump_insn_after_noloc, but set INSN_LOCATOR according to LOC.  */\n+rtx\n+emit_jump_insn_after_setloc (rtx pattern, rtx after, int loc)\n+{\n+  return emit_pattern_after_setloc (pattern, after, loc, make_jump_insn_raw);\n }\n \n /* Like emit_jump_insn_after_noloc, but set INSN_LOCATOR according to AFTER.  */\n rtx\n emit_jump_insn_after (rtx pattern, rtx after)\n {\n-  rtx prev = after;\n-\n-  while (DEBUG_INSN_P (prev))\n-    prev = PREV_INSN (prev);\n-\n-  if (INSN_P (prev))\n-    return emit_jump_insn_after_setloc (pattern, after, INSN_LOCATOR (prev));\n-  else\n-    return emit_jump_insn_after_noloc (pattern, after);\n+  return emit_pattern_after (pattern, after, true, make_jump_insn_raw);\n }\n \n-/* Like emit_call_insn_after_noloc, but set INSN_LOCATOR according to SCOPE.  */\n+/* Like emit_call_insn_after_noloc, but set INSN_LOCATOR according to LOC.  */\n rtx\n emit_call_insn_after_setloc (rtx pattern, rtx after, int loc)\n {\n-  rtx last = emit_call_insn_after_noloc (pattern, after);\n-\n-  if (pattern == NULL_RTX || !loc)\n-    return last;\n-\n-  after = NEXT_INSN (after);\n-  while (1)\n-    {\n-      if (active_insn_p (after) && !INSN_LOCATOR (after))\n-\tINSN_LOCATOR (after) = loc;\n-      if (after == last)\n-\tbreak;\n-      after = NEXT_INSN (after);\n-    }\n-  return last;\n+  return emit_pattern_after_setloc (pattern, after, loc, make_call_insn_raw);\n }\n \n /* Like emit_call_insn_after_noloc, but set INSN_LOCATOR according to AFTER.  */\n rtx\n emit_call_insn_after (rtx pattern, rtx after)\n {\n-  rtx prev = after;\n-\n-  while (DEBUG_INSN_P (prev))\n-    prev = PREV_INSN (prev);\n-\n-  if (INSN_P (prev))\n-    return emit_call_insn_after_setloc (pattern, after, INSN_LOCATOR (prev));\n-  else\n-    return emit_call_insn_after_noloc (pattern, after);\n+  return emit_pattern_after (pattern, after, true, make_call_insn_raw);\n }\n \n-/* Like emit_debug_insn_after_noloc, but set INSN_LOCATOR according to SCOPE.  */\n+/* Like emit_debug_insn_after_noloc, but set INSN_LOCATOR according to LOC.  */\n rtx\n emit_debug_insn_after_setloc (rtx pattern, rtx after, int loc)\n {\n-  rtx last = emit_debug_insn_after_noloc (pattern, after);\n-\n-  if (pattern == NULL_RTX || !loc)\n-    return last;\n-\n-  after = NEXT_INSN (after);\n-  while (1)\n-    {\n-      if (active_insn_p (after) && !INSN_LOCATOR (after))\n-\tINSN_LOCATOR (after) = loc;\n-      if (after == last)\n-\tbreak;\n-      after = NEXT_INSN (after);\n-    }\n-  return last;\n+  return emit_pattern_after_setloc (pattern, after, loc, make_debug_insn_raw);\n }\n \n /* Like emit_debug_insn_after_noloc, but set INSN_LOCATOR according to AFTER.  */\n rtx\n emit_debug_insn_after (rtx pattern, rtx after)\n {\n-  if (INSN_P (after))\n-    return emit_debug_insn_after_setloc (pattern, after, INSN_LOCATOR (after));\n-  else\n-    return emit_debug_insn_after_noloc (pattern, after);\n+  return emit_pattern_after (pattern, after, false, make_debug_insn_raw);\n }\n \n-/* Like emit_insn_before_noloc, but set INSN_LOCATOR according to SCOPE.  */\n-rtx\n-emit_insn_before_setloc (rtx pattern, rtx before, int loc)\n+/* Insert PATTERN before BEFORE, setting its INSN_LOCATION to LOC.\n+   MAKE_RAW indicates how to turn PATTERN into a real insn.  INSNP\n+   indicates if PATTERN is meant for an INSN as opposed to a JUMP_INSN,\n+   CALL_INSN, etc.  */\n+\n+static rtx\n+emit_pattern_before_setloc (rtx pattern, rtx before, int loc, bool insnp,\n+\t\t\t    rtx (*make_raw) (rtx))\n {\n   rtx first = PREV_INSN (before);\n-  rtx last = emit_insn_before_noloc (pattern, before, NULL);\n+  rtx last = emit_pattern_before_noloc (pattern, before,\n+                                        insnp ? before : NULL_RTX,\n+                                        NULL, make_raw);\n \n   if (pattern == NULL_RTX || !loc)\n     return last;\n@@ -4483,127 +4452,93 @@ emit_insn_before_setloc (rtx pattern, rtx before, int loc)\n   return last;\n }\n \n-/* Like emit_insn_before_noloc, but set INSN_LOCATOR according to BEFORE.  */\n-rtx\n-emit_insn_before (rtx pattern, rtx before)\n+/* Insert PATTERN before BEFORE.  MAKE_RAW indicates how to turn PATTERN\n+   into a real insn.  SKIP_DEBUG_INSNS indicates whether to insert\n+   before any DEBUG_INSNs.  INSNP indicates if PATTERN is meant for an\n+   INSN as opposed to a JUMP_INSN, CALL_INSN, etc.  */\n+\n+static rtx\n+emit_pattern_before (rtx pattern, rtx before, bool skip_debug_insns,\n+\t\t     bool insnp, rtx (*make_raw) (rtx))\n {\n   rtx next = before;\n \n-  while (DEBUG_INSN_P (next))\n-    next = PREV_INSN (next);\n+  if (skip_debug_insns)\n+    while (DEBUG_INSN_P (next))\n+      next = PREV_INSN (next);\n \n   if (INSN_P (next))\n-    return emit_insn_before_setloc (pattern, before, INSN_LOCATOR (next));\n+    return emit_pattern_before_setloc (pattern, before, INSN_LOCATOR (next),\n+\t\t\t\t       insnp, make_raw);\n   else\n-    return emit_insn_before_noloc (pattern, before, NULL);\n+    return emit_pattern_before_noloc (pattern, before,\n+                                      insnp ? before : NULL_RTX,\n+                                      NULL, make_raw);\n }\n \n-/* like emit_insn_before_noloc, but set insn_locator according to scope.  */\n+/* Like emit_insn_before_noloc, but set INSN_LOCATOR according to LOC.  */\n rtx\n-emit_jump_insn_before_setloc (rtx pattern, rtx before, int loc)\n+emit_insn_before_setloc (rtx pattern, rtx before, int loc)\n {\n-  rtx first = PREV_INSN (before);\n-  rtx last = emit_jump_insn_before_noloc (pattern, before);\n+  return emit_pattern_before_setloc (pattern, before, loc, true,\n+\t\t\t\t     make_insn_raw);\n+}\n \n-  if (pattern == NULL_RTX)\n-    return last;\n+/* Like emit_insn_before_noloc, but set INSN_LOCATOR according to BEFORE.  */\n+rtx\n+emit_insn_before (rtx pattern, rtx before)\n+{\n+  return emit_pattern_before (pattern, before, true, true, make_insn_raw);\n+}\n \n-  first = NEXT_INSN (first);\n-  while (1)\n-    {\n-      if (active_insn_p (first) && !INSN_LOCATOR (first))\n-\tINSN_LOCATOR (first) = loc;\n-      if (first == last)\n-\tbreak;\n-      first = NEXT_INSN (first);\n-    }\n-  return last;\n+/* like emit_insn_before_noloc, but set INSN_LOCATOR according to LOC.  */\n+rtx\n+emit_jump_insn_before_setloc (rtx pattern, rtx before, int loc)\n+{\n+  return emit_pattern_before_setloc (pattern, before, loc, false,\n+\t\t\t\t     make_jump_insn_raw);\n }\n \n /* Like emit_jump_insn_before_noloc, but set INSN_LOCATOR according to BEFORE.  */\n rtx\n emit_jump_insn_before (rtx pattern, rtx before)\n {\n-  rtx next = before;\n-\n-  while (DEBUG_INSN_P (next))\n-    next = PREV_INSN (next);\n-\n-  if (INSN_P (next))\n-    return emit_jump_insn_before_setloc (pattern, before, INSN_LOCATOR (next));\n-  else\n-    return emit_jump_insn_before_noloc (pattern, before);\n+  return emit_pattern_before (pattern, before, true, false,\n+\t\t\t      make_jump_insn_raw);\n }\n \n-/* like emit_insn_before_noloc, but set insn_locator according to scope.  */\n+/* Like emit_insn_before_noloc, but set INSN_LOCATOR according to LOC.  */\n rtx\n emit_call_insn_before_setloc (rtx pattern, rtx before, int loc)\n {\n-  rtx first = PREV_INSN (before);\n-  rtx last = emit_call_insn_before_noloc (pattern, before);\n-\n-  if (pattern == NULL_RTX)\n-    return last;\n-\n-  first = NEXT_INSN (first);\n-  while (1)\n-    {\n-      if (active_insn_p (first) && !INSN_LOCATOR (first))\n-\tINSN_LOCATOR (first) = loc;\n-      if (first == last)\n-\tbreak;\n-      first = NEXT_INSN (first);\n-    }\n-  return last;\n+  return emit_pattern_before_setloc (pattern, before, loc, false,\n+\t\t\t\t     make_call_insn_raw);\n }\n \n-/* like emit_call_insn_before_noloc,\n-   but set insn_locator according to before.  */\n+/* Like emit_call_insn_before_noloc,\n+   but set insn_locator according to BEFORE.  */\n rtx\n emit_call_insn_before (rtx pattern, rtx before)\n {\n-  rtx next = before;\n-\n-  while (DEBUG_INSN_P (next))\n-    next = PREV_INSN (next);\n-\n-  if (INSN_P (next))\n-    return emit_call_insn_before_setloc (pattern, before, INSN_LOCATOR (next));\n-  else\n-    return emit_call_insn_before_noloc (pattern, before);\n+  return emit_pattern_before (pattern, before, true, false,\n+\t\t\t      make_call_insn_raw);\n }\n \n-/* like emit_insn_before_noloc, but set insn_locator according to scope.  */\n+/* Like emit_insn_before_noloc, but set INSN_LOCATOR according to LOC.  */\n rtx\n emit_debug_insn_before_setloc (rtx pattern, rtx before, int loc)\n {\n-  rtx first = PREV_INSN (before);\n-  rtx last = emit_debug_insn_before_noloc (pattern, before);\n-\n-  if (pattern == NULL_RTX)\n-    return last;\n-\n-  first = NEXT_INSN (first);\n-  while (1)\n-    {\n-      if (active_insn_p (first) && !INSN_LOCATOR (first))\n-\tINSN_LOCATOR (first) = loc;\n-      if (first == last)\n-\tbreak;\n-      first = NEXT_INSN (first);\n-    }\n-  return last;\n+  return emit_pattern_before_setloc (pattern, before, loc, false,\n+\t\t\t\t     make_debug_insn_raw);\n }\n \n-/* like emit_debug_insn_before_noloc,\n-   but set insn_locator according to before.  */\n+/* Like emit_debug_insn_before_noloc,\n+   but set insn_locator according to BEFORE.  */\n rtx\n emit_debug_insn_before (rtx pattern, rtx before)\n {\n-  if (INSN_P (before))\n-    return emit_debug_insn_before_setloc (pattern, before, INSN_LOCATOR (before));\n-  else\n-    return emit_debug_insn_before_noloc (pattern, before);\n+  return emit_pattern_before (pattern, before, false, false,\n+\t\t\t      make_debug_insn_raw);\n }\n \f\n /* Take X and emit it at the end of the doubly-linked"}]}