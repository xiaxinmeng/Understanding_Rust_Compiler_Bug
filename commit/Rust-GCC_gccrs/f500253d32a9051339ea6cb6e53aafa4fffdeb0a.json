{"sha": "f500253d32a9051339ea6cb6e53aafa4fffdeb0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUwMDI1M2QzMmE5MDUxMzM5ZWE2Y2I2ZTUzYWFmYTRmZmZkZWIwYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-04-14T23:01:38Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-04-14T23:01:38Z"}, "message": "(finish_enum): Don't crash if no type can represent all enumeration values.\n\nFrom-SVN: r11771", "tree": {"sha": "a2e2acceef2effbca1fa1f23ebeb60b09e26acbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2e2acceef2effbca1fa1f23ebeb60b09e26acbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f500253d32a9051339ea6cb6e53aafa4fffdeb0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f500253d32a9051339ea6cb6e53aafa4fffdeb0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f500253d32a9051339ea6cb6e53aafa4fffdeb0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f500253d32a9051339ea6cb6e53aafa4fffdeb0a/comments", "author": null, "committer": null, "parents": [{"sha": "4ea62d1a1e6975ff7a79175585b38292ccf7b4c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ea62d1a1e6975ff7a79175585b38292ccf7b4c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ea62d1a1e6975ff7a79175585b38292ccf7b4c9"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "249992b23baec771e10196d2a2f963667c51911e", "filename": "gcc/c-decl.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f500253d32a9051339ea6cb6e53aafa4fffdeb0a/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f500253d32a9051339ea6cb6e53aafa4fffdeb0a/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=f500253d32a9051339ea6cb6e53aafa4fffdeb0a", "patch": "@@ -5894,8 +5894,16 @@ finish_enum (enumtype, values, attributes)\n \n   if (flag_short_enums || TYPE_PACKED (enumtype)\n       || precision > TYPE_PRECISION (integer_type_node))\n-    /* Use the width of the narrowest normal C type which is wide enough.  */\n-    TYPE_PRECISION (enumtype) = TYPE_PRECISION (type_for_size (precision, 1));\n+    {\n+      tree narrowest = type_for_size (precision, 1);\n+      if (narrowest == 0)\n+\t{\n+\t  warning (\"enumeration values exceed range of largest integer\");\n+\t  narrowest = long_long_integer_type_node;\n+\t}\n+\n+      TYPE_PRECISION (enumtype) = TYPE_PRECISION (narrowest);\n+    }\n   else\n     TYPE_PRECISION (enumtype) = TYPE_PRECISION (integer_type_node);\n "}]}