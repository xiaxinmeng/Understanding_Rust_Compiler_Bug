{"sha": "6bec66640597e2604f51fc1642c7d279164cd442", "node_id": "C_kwDOANBUbNoAKDZiZWM2NjY0MDU5N2UyNjA0ZjUxZmMxNjQyYzdkMjc5MTY0Y2Q0NDI", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-10-20T09:37:33Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-10-20T09:37:33Z"}, "message": "aarch64: Fix matching of BRKNS\n\nUnlike other flag-setting SVE instructions, BRKNS sets the flags\nbased on an all-true governing predicate, rather than the GP operand.\n\ngcc/\n\t* config/aarch64/iterators.md (SVE_BRKP): New iterator.\n\t* config/aarch64/aarch64-sve.md (*aarch64_brkn_cc): New pattern.\n\t(*aarch64_brkn_ptest): Likewise.\n\t(*aarch64_brk<brk_op>_cc): Restrict to SVE_BRKP.\n\t(*aarch64_brk<brk_op>_ptest): Likewise.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/acle/general/brkn_1.c: Expect separate\n\tPTEST instructions.\n\t* gcc.target/aarch64/sve/acle/general/brkn_2.c: New test.", "tree": {"sha": "798eb6a2df4cb7c6f12f0117a98e1be0f723ccf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/798eb6a2df4cb7c6f12f0117a98e1be0f723ccf8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bec66640597e2604f51fc1642c7d279164cd442", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bec66640597e2604f51fc1642c7d279164cd442", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bec66640597e2604f51fc1642c7d279164cd442", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bec66640597e2604f51fc1642c7d279164cd442/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e2b5cf7cde999582d1b8fff021faa487c8e34b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e2b5cf7cde999582d1b8fff021faa487c8e34b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e2b5cf7cde999582d1b8fff021faa487c8e34b0"}], "stats": {"total": 100, "additions": 90, "deletions": 10}, "files": [{"sha": "e2bb80268e516c86ec815dc96957f2e2bbf51f77", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 62, "deletions": 8, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bec66640597e2604f51fc1642c7d279164cd442/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bec66640597e2604f51fc1642c7d279164cd442/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=6bec66640597e2604f51fc1642c7d279164cd442", "patch": "@@ -9677,7 +9677,61 @@\n   \"brk<brk_op>\\t%0.b, %1/z, %2.b, %<brk_reg_opno>.b\"\n )\n \n-;; Same, but also producing a flags result.\n+;; BRKN, producing both a predicate and a flags result.  Unlike other\n+;; flag-setting instructions, these flags are always set wrt a ptrue.\n+(define_insn_and_rewrite \"*aarch64_brkn_cc\"\n+  [(set (reg:CC_NZC CC_REGNUM)\n+\t(unspec:CC_NZC\n+\t  [(match_operand:VNx16BI 4)\n+\t   (match_operand:VNx16BI 5)\n+\t   (const_int SVE_KNOWN_PTRUE)\n+\t   (unspec:VNx16BI\n+\t     [(match_operand:VNx16BI 1 \"register_operand\" \"Upa\")\n+\t      (match_operand:VNx16BI 2 \"register_operand\" \"Upa\")\n+\t      (match_operand:VNx16BI 3 \"register_operand\" \"0\")]\n+\t     UNSPEC_BRKN)]\n+\t  UNSPEC_PTEST))\n+   (set (match_operand:VNx16BI 0 \"register_operand\" \"=Upa\")\n+\t(unspec:VNx16BI\n+\t  [(match_dup 1)\n+\t   (match_dup 2)\n+\t   (match_dup 3)]\n+\t  UNSPEC_BRKN))]\n+  \"TARGET_SVE\"\n+  \"brkns\\t%0.b, %1/z, %2.b, %0.b\"\n+  \"&& (operands[4] != CONST0_RTX (VNx16BImode)\n+       || operands[5] != CONST0_RTX (VNx16BImode))\"\n+  {\n+    operands[4] = CONST0_RTX (VNx16BImode);\n+    operands[5] = CONST0_RTX (VNx16BImode);\n+  }\n+)\n+\n+;; Same, but with only the flags result being interesting.\n+(define_insn_and_rewrite \"*aarch64_brkn_ptest\"\n+  [(set (reg:CC_NZC CC_REGNUM)\n+\t(unspec:CC_NZC\n+\t  [(match_operand:VNx16BI 4)\n+\t   (match_operand:VNx16BI 5)\n+\t   (const_int SVE_KNOWN_PTRUE)\n+\t   (unspec:VNx16BI\n+\t     [(match_operand:VNx16BI 1 \"register_operand\" \"Upa\")\n+\t      (match_operand:VNx16BI 2 \"register_operand\" \"Upa\")\n+\t      (match_operand:VNx16BI 3 \"register_operand\" \"0\")]\n+\t     UNSPEC_BRKN)]\n+\t  UNSPEC_PTEST))\n+   (clobber (match_scratch:VNx16BI 0 \"=Upa\"))]\n+  \"TARGET_SVE\"\n+  \"brkns\\t%0.b, %1/z, %2.b, %0.b\"\n+  \"&& (operands[4] != CONST0_RTX (VNx16BImode)\n+       || operands[5] != CONST0_RTX (VNx16BImode))\"\n+  {\n+    operands[4] = CONST0_RTX (VNx16BImode);\n+    operands[5] = CONST0_RTX (VNx16BImode);\n+  }\n+)\n+\n+;; BRKPA and BRKPB, producing both a predicate and a flags result.\n (define_insn \"*aarch64_brk<brk_op>_cc\"\n   [(set (reg:CC_NZC CC_REGNUM)\n \t(unspec:CC_NZC\n@@ -9687,17 +9741,17 @@\n \t   (unspec:VNx16BI\n \t     [(match_dup 1)\n \t      (match_operand:VNx16BI 2 \"register_operand\" \"Upa\")\n-\t      (match_operand:VNx16BI 3 \"register_operand\" \"<brk_reg_con>\")]\n-\t     SVE_BRK_BINARY)]\n+\t      (match_operand:VNx16BI 3 \"register_operand\" \"Upa\")]\n+\t     SVE_BRKP)]\n \t  UNSPEC_PTEST))\n    (set (match_operand:VNx16BI 0 \"register_operand\" \"=Upa\")\n \t(unspec:VNx16BI\n \t  [(match_dup 1)\n \t   (match_dup 2)\n \t   (match_dup 3)]\n-\t  SVE_BRK_BINARY))]\n+\t  SVE_BRKP))]\n   \"TARGET_SVE\"\n-  \"brk<brk_op>s\\t%0.b, %1/z, %2.b, %<brk_reg_opno>.b\"\n+  \"brk<brk_op>s\\t%0.b, %1/z, %2.b, %3.b\"\n )\n \n ;; Same, but with only the flags result being interesting.\n@@ -9710,12 +9764,12 @@\n \t   (unspec:VNx16BI\n \t     [(match_dup 1)\n \t      (match_operand:VNx16BI 2 \"register_operand\" \"Upa\")\n-\t      (match_operand:VNx16BI 3 \"register_operand\" \"<brk_reg_con>\")]\n-\t     SVE_BRK_BINARY)]\n+\t      (match_operand:VNx16BI 3 \"register_operand\" \"Upa\")]\n+\t     SVE_BRKP)]\n \t  UNSPEC_PTEST))\n    (clobber (match_scratch:VNx16BI 0 \"=Upa\"))]\n   \"TARGET_SVE\"\n-  \"brk<brk_op>s\\t%0.b, %1/z, %2.b, %<brk_reg_opno>.b\"\n+  \"brk<brk_op>s\\t%0.b, %1/z, %2.b, %3.b\"\n )\n \n ;; -------------------------------------------------------------------------"}, {"sha": "a8ad4e5ff215ade06c3ca13a24ef18d259afcb6c", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bec66640597e2604f51fc1642c7d279164cd442/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bec66640597e2604f51fc1642c7d279164cd442/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=6bec66640597e2604f51fc1642c7d279164cd442", "patch": "@@ -3138,6 +3138,8 @@\n \n (define_int_iterator SVE_BRK_UNARY [UNSPEC_BRKA UNSPEC_BRKB])\n \n+(define_int_iterator SVE_BRKP [UNSPEC_BRKPA UNSPEC_BRKPB])\n+\n (define_int_iterator SVE_BRK_BINARY [UNSPEC_BRKN UNSPEC_BRKPA UNSPEC_BRKPB])\n \n (define_int_iterator SVE_PITER [UNSPEC_PFIRST UNSPEC_PNEXT])"}, {"sha": "c548810f1690c5b329ed6bce1d06aef4de8b4894", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general/brkn_1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bec66640597e2604f51fc1642c7d279164cd442/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fbrkn_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bec66640597e2604f51fc1642c7d279164cd442/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fbrkn_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fbrkn_1.c?ref=6bec66640597e2604f51fc1642c7d279164cd442", "patch": "@@ -18,5 +18,6 @@ test2 (svbool_t pg, svbool_t x, svbool_t y, int *any)\n   return svptest_any (pg, res);\n }\n \n-/* { dg-final { scan-assembler-times {\\tbrkns\\t} 2 } } */\n-/* { dg-final { scan-assembler-not {\\tbrkn\\t} } } */\n+/* { dg-final { scan-assembler-times {\\tbrkn\\t} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tptest\\t} 2 } } */\n+/* { dg-final { scan-assembler-not {\\tbrkns\\t} } } */"}, {"sha": "74b6927410ae5035ebf34a263dda371d262b0c73", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general/brkn_2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bec66640597e2604f51fc1642c7d279164cd442/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fbrkn_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bec66640597e2604f51fc1642c7d279164cd442/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fbrkn_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fbrkn_2.c?ref=6bec66640597e2604f51fc1642c7d279164cd442", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#include <arm_sve.h>\n+\n+void\n+test1 (svbool_t pg, svbool_t x, svbool_t y, int *any, svbool_t *ptr)\n+{\n+  svbool_t res = svbrkn_z (pg, x, y);\n+  *any = svptest_any (svptrue_b8 (), res);\n+  *ptr = res;\n+}\n+\n+int\n+test2 (svbool_t pg, svbool_t x, svbool_t y, int *any)\n+{\n+  svbool_t res = svbrkn_z (pg, x, y);\n+  return svptest_any (svptrue_b8 (), res);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tbrkns\\t} 2 } } */\n+/* { dg-final { scan-assembler-not {\\tbrkn\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tptest\\t} } } */"}]}