{"sha": "443ca5fc9becb90019c04b6818e9f687f101df5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQzY2E1ZmM5YmVjYjkwMDE5YzA0YjY4MThlOWY2ODdmMTAxZGY1YQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-11-06T16:00:35Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-11-06T16:00:35Z"}, "message": "i386.c (TARGET_INSTANTIATE_DECLS): New define.\n\n\t* config/i386/i386.c (TARGET_INSTANTIATE_DECLS): New define.\n\t(ix86_instantiate_decls): New function.\n\t(ix86_expand_builtin) <case IX86_BUILTIN_LDMXCSR>: Use SLOT_TEMP\n\tstack slot instead of SLOT_VIRTUAL.\n\t<case IX86_BUILTIN_STMXCSR>: Ditto.\n\t(assign_386_stack_local): Do not assert when virtual slot is valid.\n\t* config/i386/i386.h (enum ix86_stack_slot): Remove SLOT_VIRTUAL.\n\t* config/i386/i386.md (truncdfsf2): Do not use SLOT_VIRTUAL stack slot.\n\t(truncxf<mode>2): Ditto.\n\t(floatunssi<mode>2): Ditto.\n\t(isinf<mode>2): Ditto.\n\t* config/i386/sync.md (atomic_load<mode>): Ditto.\n\t(atomic_store<mode>): Ditto.\n\nFrom-SVN: r193244", "tree": {"sha": "50c2b75833052692c59212717be12956b42c2ac8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50c2b75833052692c59212717be12956b42c2ac8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/443ca5fc9becb90019c04b6818e9f687f101df5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/443ca5fc9becb90019c04b6818e9f687f101df5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/443ca5fc9becb90019c04b6818e9f687f101df5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/443ca5fc9becb90019c04b6818e9f687f101df5a/comments", "author": null, "committer": null, "parents": [{"sha": "ab72bd1821473326336fdde73c3e36608e7a4832", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab72bd1821473326336fdde73c3e36608e7a4832", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab72bd1821473326336fdde73c3e36608e7a4832"}], "stats": {"total": 147, "additions": 76, "deletions": 71}, "files": [{"sha": "9dbc1fc2ce253c006c8e34944d8fc9eb7e5a0040", "filename": "gcc/ChangeLog", "status": "modified", "additions": 54, "deletions": 38, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/443ca5fc9becb90019c04b6818e9f687f101df5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/443ca5fc9becb90019c04b6818e9f687f101df5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=443ca5fc9becb90019c04b6818e9f687f101df5a", "patch": "@@ -1,3 +1,19 @@\n+2012-11-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (TARGET_INSTANTIATE_DECLS): New define.\n+\t(ix86_instantiate_decls): New function.\n+\t(ix86_expand_builtin) <case IX86_BUILTIN_LDMXCSR>: Use SLOT_TEMP\n+\tstack slot instead of SLOT_VIRTUAL.\n+\t<case IX86_BUILTIN_STMXCSR>: Ditto.\n+\t(assign_386_stack_local): Do not assert when virtual slot is valid.\n+\t* config/i386/i386.h (enum ix86_stack_slot): Remove SLOT_VIRTUAL.\n+\t* config/i386/i386.md (truncdfsf2): Do not use SLOT_VIRTUAL stack slot.\n+\t(truncxf<mode>2): Ditto.\n+\t(floatunssi<mode>2): Ditto.\n+\t(isinf<mode>2): Ditto.\n+\t* config/i386/sync.md (atomic_load<mode>): Ditto.\n+\t(atomic_store<mode>): Ditto.\n+\n 2012-11-06  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-vect-loop-manip.c (vect_do_peeling_for_loop_bound,\n@@ -14,27 +30,27 @@\n \n 2012-11-06  Vladimir Yakovlev  <vladimir.b.yakovlev@intel.com>\n \n-\t* config/i386/i386-protos.h (emit_i387_cw_initialization): Deleted.\n-\t(emit_vzero): Added prototype.\n+\t* config/i386/i386-protos.h (emit_i387_cw_initialization): Delete.\n+\t(emit_vzero): Add prototype.\n \t(ix86_mode_entry): Likewise.\n \t(ix86_mode_exit): Likewise.\n \t(ix86_emit_mode_set): Likewise.\n \n-\t* config/i386/i386.c (typedef struct block_info_def): Deleted.\n-\t(define BLOCK_INFO): Deleted.\n-\t(check_avx256_stores): Added checking for MEM_P.\n-\t(move_or_delete_vzeroupper_2): Deleted.\n-\t(move_or_delete_vzeroupper_1): Deleted.\n-\t(move_or_delete_vzeroupper): Deleted.\n-\t(ix86_maybe_emit_epilogue_vzeroupper): Deleted.\n-\t(function_pass_avx256_p): Deleted.\n-\t(ix86_function_ok_for_sibcall): Deleted disabling sibcall.\n-\t(nit_cumulative_args): Deleted initialization of of avx256 fields of\n+\t* config/i386/i386.c (typedef struct block_info_def): Delete.\n+\t(define BLOCK_INFO): Delete.\n+\t(check_avx256_stores): Add checking for MEM_P.\n+\t(move_or_delete_vzeroupper_2): Delete.\n+\t(move_or_delete_vzeroupper_1): Delete.\n+\t(move_or_delete_vzeroupper): Delete.\n+\t(ix86_maybe_emit_epilogue_vzeroupper): Delete.\n+\t(function_pass_avx256_p): Delete.\n+\t(ix86_function_ok_for_sibcall): Remove sibcall disabling.\n+\t(nit_cumulative_args): Remove initialization of of avx256 fields of\n \tcfun->machine.\n-\t(ix86_emit_restore_sse_regs_using_mov): Deleted vzeroupper generation.\n+\t(ix86_emit_restore_sse_regs_using_mov): Remove vzeroupper generation.\n \t(ix86_expand_epilogue): Likewise.\n \t(ix86_avx_u128_mode_needed): New.\n-\t(ix86_i387_mode_needed): Renamed ix86_mode_needed.\n+\t(ix86_i387_mode_needed): Rename from ix86_mode_needed.\n \t(ix86_mode_needed): New.\n \t(ix86_avx_u128_mode_after): New.\n \t(ix86_mode_after): New.\n@@ -43,11 +59,11 @@\n \t(ix86_avx_u128_mode_exit): New.\n \t(ix86_mode_exit): New.\n \t(ix86_emit_mode_set): New.\n-\t(ix86_expand_call): Deleted vzeroupper generation.\n-\t(ix86_split_call_vzeroupper): Deleted.\n-\t(ix86_init_machine_status): Initialzed optimize_mode_switching.\n-\t(ix86_expand_special_args_builtin): Changed.\n-\t(ix86_reorg): Deleted a call of move_or_delete_vzeroupper.\n+\t(ix86_expand_call): Delete vzeroupper generation.\n+\t(ix86_split_call_vzeroupper): Delete.\n+\t(ix86_init_machine_status): Initialize optimize_mode_switching.\n+\t(ix86_expand_special_args_builtin): Change.\n+\t(ix86_reorg): Delete a call of move_or_delete_vzeroupper.\n \n \t* config/i386/i386.h  (VALID_AVX256_REG_OR_OI_MODE): New.\n \t(AVX_U128): New.\n@@ -56,26 +72,26 @@\n \t(MODE_AFTER): New.\n \t(MODE_ENTRY): New.\n \t(MODE_EXIT): New.\n-\t(EMIT_MODE_SET): Changed.\n-\t(machine_function): Deleted avx256 fields.\n-\n-\t* config/i386/i386.md (UNSPEC_CALL_NEEDS_VZEROUPPER): Deleted.\n-\t(define_insn_and_split \"*call_vzeroupper\"): Deleted.\n-\t(define_insn_and_split \"*call_rex64_ms_sysv_vzeroupper\"): Deleted.\n-\t(define_insn_and_split \"*sibcall_vzeroupper\"): Deleted.\n-\t(define_insn_and_split \"*call_pop_vzeroupper\"): Deleted.\n-\t(define_insn_and_split \"*sibcall_pop_vzeroupper\"): Deleted.\n-\t(define_insn_and_split \"*call_value_vzeroupper\"): Deleted.\n-\t(define_insn_and_split \"*sibcall_value_vzeroupper\"): Deleted.\n-\t(define_insn_and_split \"*call_value_rex64_ms_sysv_vzeroupper\"): Deleted.\n-\t(define_insn_and_split \"*call_value_pop_vzeroupper\"): Deleted.\n-\t(define_insn_and_split \"*sibcall_value_pop_vzeroupper\"): Deleted.\n-\t(define_expand \"return\"): Deleted vzeroupper emitting.\n-\t(define_expand \"simple_return\"): Deleted.\n+\t(EMIT_MODE_SET): Change.\n+\t(machine_function): Delete avx256 fields.\n+\n+\t* config/i386/i386.md (UNSPEC_CALL_NEEDS_VZEROUPPER): Delete.\n+\t(define_insn_and_split \"*call_vzeroupper\"): Delete.\n+\t(define_insn_and_split \"*call_rex64_ms_sysv_vzeroupper\"): Delete.\n+\t(define_insn_and_split \"*sibcall_vzeroupper\"): Delete.\n+\t(define_insn_and_split \"*call_pop_vzeroupper\"): Delete.\n+\t(define_insn_and_split \"*sibcall_pop_vzeroupper\"): Delete.\n+\t(define_insn_and_split \"*call_value_vzeroupper\"): Delete.\n+\t(define_insn_and_split \"*sibcall_value_vzeroupper\"): Delete.\n+\t(define_insn_and_split \"*call_value_rex64_ms_sysv_vzeroupper\"): Delete.\n+\t(define_insn_and_split \"*call_value_pop_vzeroupper\"): Delete.\n+\t(define_insn_and_split \"*sibcall_value_pop_vzeroupper\"): Delete.\n+\t(define_expand \"return\"): Remove vzeroupper emitting.\n+\t(define_expand \"simple_return\"): Delete.\n \n \t* config/i386/predicates.md (vzeroupper_operation): New.\n \n-\t* config/i386/sse.md (avx_vzeroupper): Changed.\n+\t* config/i386/sse.md (avx_vzeroupper): Change.\n \n 2012-11-06  Uros Bizjak  <ubizjak@gmail.com>\n \t    Kaz Kojima  <kkojima@gcc.gnu.org>\n@@ -86,8 +102,8 @@\n \n 2012-11-06  Andrey Turetskiy  <andrey.turetskiy@gmail.com>\n \n-\t* config/i386/i386.c (bdesc_args): Rename CODE_FOR_avx2_umulhrswv16hi3 to\n-\tCODE_FOR_avx2_pmulhrswv16hi3.\n+\t* config/i386/i386.c (bdesc_args): Rename CODE_FOR_avx2_umulhrswv16hi3\n+\tto CODE_FOR_avx2_pmulhrswv16hi3.\n \t* config/i386/predicates.md (const1_operand): Extend for vectors.\n \t* config/i386/sse.md (ssse3_avx2): Extend.\n \t(ssedoublemode): Ditto."}, {"sha": "ec40dd59bb155db001a42a7a9ea6ab0cc85cf2c1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/443ca5fc9becb90019c04b6818e9f687f101df5a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/443ca5fc9becb90019c04b6818e9f687f101df5a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=443ca5fc9becb90019c04b6818e9f687f101df5a", "patch": "@@ -23435,9 +23435,6 @@ assign_386_stack_local (enum machine_mode mode, enum ix86_stack_slot n)\n \n   gcc_assert (n < MAX_386_STACK_LOCALS);\n \n-  /* Virtual slot is valid only before vregs are instantiated.  */\n-  gcc_assert ((n == SLOT_VIRTUAL) == !virtuals_instantiated);\n-\n   for (s = ix86_stack_locals; s; s = s->next)\n     if (s->mode == mode && s->n == n)\n       return validize_mem (copy_rtx (s->rtl));\n@@ -23451,6 +23448,16 @@ assign_386_stack_local (enum machine_mode mode, enum ix86_stack_slot n)\n   ix86_stack_locals = s;\n   return validize_mem (s->rtl);\n }\n+\n+static void\n+ix86_instantiate_decls (void)\n+{\n+  struct stack_local_entry *s;\n+\n+  for (s = ix86_stack_locals; s; s = s->next)\n+    if (s->rtl != NULL_RTX)\n+      instantiate_decl_rtl (s->rtl);\n+}\n \f\n /* Calculate the length of the memory address in the instruction encoding.\n    Includes addr32 prefix, does not include the one-byte modrm, opcode,\n@@ -31235,13 +31242,13 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \n     case IX86_BUILTIN_LDMXCSR:\n       op0 = expand_normal (CALL_EXPR_ARG (exp, 0));\n-      target = assign_386_stack_local (SImode, SLOT_VIRTUAL);\n+      target = assign_386_stack_local (SImode, SLOT_TEMP);\n       emit_move_insn (target, op0);\n       emit_insn (gen_sse_ldmxcsr (target));\n       return 0;\n \n     case IX86_BUILTIN_STMXCSR:\n-      target = assign_386_stack_local (SImode, SLOT_VIRTUAL);\n+      target = assign_386_stack_local (SImode, SLOT_TEMP);\n       emit_insn (gen_sse_stmxcsr (target));\n       return copy_to_mode_reg (SImode, target);\n \n@@ -42061,6 +42068,9 @@ ix86_memmodel_check (unsigned HOST_WIDE_INT val)\n #undef TARGET_MEMBER_TYPE_FORCES_BLK\n #define TARGET_MEMBER_TYPE_FORCES_BLK ix86_member_type_forces_blk\n \n+#undef TARGET_INSTANTIATE_DECLS\n+#define TARGET_INSTANTIATE_DECLS ix86_instantiate_decls\n+\n #undef TARGET_SECONDARY_RELOAD\n #define TARGET_SECONDARY_RELOAD ix86_secondary_reload\n "}, {"sha": "18d476dc60fb0ef4e5b4f1317b5fa47ee020f790", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/443ca5fc9becb90019c04b6818e9f687f101df5a/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/443ca5fc9becb90019c04b6818e9f687f101df5a/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=443ca5fc9becb90019c04b6818e9f687f101df5a", "patch": "@@ -2154,8 +2154,7 @@ enum ix86_entity\n \n enum ix86_stack_slot\n {\n-  SLOT_VIRTUAL = 0,\n-  SLOT_TEMP,\n+  SLOT_TEMP = 0,\n   SLOT_CW_STORED,\n   SLOT_CW_TRUNC,\n   SLOT_CW_FLOOR,"}, {"sha": "243ab4ee2f88ee11d179eea207032bdf0e943182", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/443ca5fc9becb90019c04b6818e9f687f101df5a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/443ca5fc9becb90019c04b6818e9f687f101df5a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=443ca5fc9becb90019c04b6818e9f687f101df5a", "patch": "@@ -4070,10 +4070,7 @@\n     ;\n   else\n     {\n-      enum ix86_stack_slot slot = (virtuals_instantiated\n-\t\t\t\t   ? SLOT_TEMP\n-\t\t\t\t   : SLOT_VIRTUAL);\n-      rtx temp = assign_386_stack_local (SFmode, slot);\n+      rtx temp = assign_386_stack_local (SFmode, SLOT_TEMP);\n       emit_insn (gen_truncdfsf2_with_temp (operands[0], operands[1], temp));\n       DONE;\n     }\n@@ -4254,12 +4251,7 @@\n       DONE;\n     }\n   else\n-    {\n-      enum ix86_stack_slot slot = (virtuals_instantiated\n-\t\t\t\t   ? SLOT_TEMP\n-\t\t\t\t   : SLOT_VIRTUAL);\n-      operands[2] = assign_386_stack_local (<MODE>mode, slot);\n-    }\n+    operands[2] = assign_386_stack_local (<MODE>mode, SLOT_TEMP);\n })\n \n (define_insn \"*truncxfsf2_mixed\"\n@@ -5467,12 +5459,7 @@\n       DONE;\n     }\n   else\n-    {\n-      enum ix86_stack_slot slot = (virtuals_instantiated\n-\t\t\t\t   ? SLOT_TEMP\n-\t\t\t\t   : SLOT_VIRTUAL);\n-      operands[2] = assign_386_stack_local (DImode, slot);\n-    }\n+    operands[2] = assign_386_stack_local (DImode, SLOT_TEMP);\n })\n \n (define_expand \"floatunsdisf2\"\n@@ -15397,10 +15384,7 @@\n     emit_insn (gen_fxam<mode>2_i387_with_temp (scratch, operands[1]));\n   else\n     {\n-      enum ix86_stack_slot slot = (virtuals_instantiated\n-\t\t\t\t   ? SLOT_TEMP\n-\t\t\t\t   : SLOT_VIRTUAL);\n-      rtx temp = assign_386_stack_local (<MODE>mode, slot);\n+      rtx temp = assign_386_stack_local (<MODE>mode, SLOT_TEMP);\n \n       emit_move_insn (temp, operands[1]);\n       emit_insn (gen_fxam<mode>2_i387_with_temp (scratch, temp));"}, {"sha": "d8555717f3dca196184601b8067a864ee9aa5369", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/443ca5fc9becb90019c04b6818e9f687f101df5a/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/443ca5fc9becb90019c04b6818e9f687f101df5a/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=443ca5fc9becb90019c04b6818e9f687f101df5a", "patch": "@@ -149,9 +149,7 @@\n   if (<MODE>mode == DImode && !TARGET_64BIT)\n     emit_insn (gen_atomic_loaddi_fpu\n \t       (operands[0], operands[1],\n-\t        assign_386_stack_local (DImode,\n-\t\t\t\t\t(virtuals_instantiated\n-\t\t\t\t\t ? SLOT_TEMP : SLOT_VIRTUAL))));\n+\t        assign_386_stack_local (DImode, SLOT_TEMP)));\n   else\n     emit_move_insn (operands[0], operands[1]);\n   DONE;\n@@ -212,9 +210,7 @@\n \t out to be significantly larger than this plus a barrier.  */\n       emit_insn (gen_atomic_storedi_fpu\n \t\t (operands[0], operands[1],\n-\t          assign_386_stack_local (DImode,\n-\t\t\t\t\t  (virtuals_instantiated\n-\t\t\t\t\t   ? SLOT_TEMP : SLOT_VIRTUAL))));\n+\t          assign_386_stack_local (DImode, SLOT_TEMP)));\n     }\n   else\n     {"}]}