{"sha": "be1088fa6a41636642119ca4d3e231d112daf578", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUxMDg4ZmE2YTQxNjM2NjQyMTE5Y2E0ZDNlMjMxZDExMmRhZjU3OA==", "commit": {"author": {"name": "Matthew Levine", "email": "gcc@severeweblint.org", "date": "2007-04-02T10:15:50Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-04-02T10:15:50Z"}, "message": "re PR libstdc++/31370 (resizing bugs in std::vector<bool>)\n\n2007-04-02  Matthew Levine  <gcc@severeweblint.org>\n\t    Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/31370\n\t* include/bits/stl_bvector.h (vector<bool>::max_size): Fix.\n\t(vector<bool>::_M_check_len): Add.\n\t* include/bits/vector.tcc (_M_fill_insert(iterator, size_type, bool),\n\t_M_insert_range(iterator, _ForwardIterator, _ForwardIterator,\n\tstd::forward_iterator_tag), _M_insert_aux(iterator, bool)): Use it.\n\t* testsuite/23_containers/vector/bool/modifiers/insert/31370.cc: New.\n\t* testsuite/23_containers/vector/bool/capacity/29134.cc: Adjust.\n\n\t* include/bits/stl_vector.h (vector<>::_M_check_len): Add.\n\t* include/bits/vector.tcc (_M_insert_aux(iterator, const _Tp&),\n\t_M_fill_insert(iterator, size_type, const value_type&),\n\t_M_range_insert(iterator, _ForwardIterator, _ForwardIterator,\n\tstd::forward_iterator_tag)): Use it.\n\nCo-Authored-By: Paolo Carlini <pcarlini@suse.de>\n\nFrom-SVN: r123424", "tree": {"sha": "bb8c89b2bc03e0359096edb497c5ff4d676ca371", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb8c89b2bc03e0359096edb497c5ff4d676ca371"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be1088fa6a41636642119ca4d3e231d112daf578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be1088fa6a41636642119ca4d3e231d112daf578", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be1088fa6a41636642119ca4d3e231d112daf578", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be1088fa6a41636642119ca4d3e231d112daf578/comments", "author": null, "committer": null, "parents": [{"sha": "3d919c620fb071efa7d388622d4b1f713d985045", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d919c620fb071efa7d388622d4b1f713d985045", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d919c620fb071efa7d388622d4b1f713d985045"}], "stats": {"total": 290, "additions": 253, "deletions": 37}, "files": [{"sha": "c59cfcd3091868fb420154ae2d47149a01c2f4f9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1088fa6a41636642119ca4d3e231d112daf578/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1088fa6a41636642119ca4d3e231d112daf578/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=be1088fa6a41636642119ca4d3e231d112daf578", "patch": "@@ -1,3 +1,21 @@\n+2007-04-02  Matthew Levine  <gcc@severeweblint.org>\n+\t    Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/31370\n+\t* include/bits/stl_bvector.h (vector<bool>::max_size): Fix.\n+\t(vector<bool>::_M_check_len): Add.\n+\t* include/bits/vector.tcc (_M_fill_insert(iterator, size_type, bool),\n+\t_M_insert_range(iterator, _ForwardIterator, _ForwardIterator,\n+\tstd::forward_iterator_tag), _M_insert_aux(iterator, bool)): Use it.\n+\t* testsuite/23_containers/vector/bool/modifiers/insert/31370.cc: New.\n+\t* testsuite/23_containers/vector/bool/capacity/29134.cc: Adjust.\n+\n+\t* include/bits/stl_vector.h (vector<>::_M_check_len): Add.\n+\t* include/bits/vector.tcc (_M_insert_aux(iterator, const _Tp&),\n+\t_M_fill_insert(iterator, size_type, const value_type&),\n+\t_M_range_insert(iterator, _ForwardIterator, _ForwardIterator,\n+\tstd::forward_iterator_tag)): Use it.\n+\n 2007-04-02  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/31401 (vstring bits)"}, {"sha": "d9863e0e617aab2fe6fd4a71c6d4964b3892a1fa", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1088fa6a41636642119ca4d3e231d112daf578/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1088fa6a41636642119ca4d3e231d112daf578/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=be1088fa6a41636642119ca4d3e231d112daf578", "patch": "@@ -582,9 +582,11 @@ template<typename _Alloc>\n     size_type\n     max_size() const\n     {\n+      const size_type __isize =\n+\tstd::numeric_limits<difference_type>::max() - int(_S_word_bit) + 1;\n       const size_type __asize = _M_get_Bit_allocator().max_size();\n-      return (__asize <= size_type(-1) / int(_S_word_bit) ?\n-\t      __asize * int(_S_word_bit) : size_type(-1));\n+      return (__asize <= __isize / int(_S_word_bit)\n+\t      ? __asize * int(_S_word_bit) : __isize);\n     }\n \n     size_type\n@@ -922,6 +924,16 @@ template<typename _Alloc>\n     void\n     _M_insert_aux(iterator __position, bool __x);\n \n+    size_type\n+    _M_check_len(size_type __n, const char* __s) const\n+    {\n+      if (max_size() - size() < __n)\n+\t__throw_length_error(__N(__s));\n+\n+      const size_type __len = size() + std::max(size(), __n);\n+      return (__len < size() || __len > max_size()) ? max_size() : __len;\n+    }\n+\n     void\n     _M_erase_at_end(iterator __pos)\n     { this->_M_impl._M_finish = __pos; }"}, {"sha": "f2c4b4ba9d751e190d95031c9de3ed64679cc851", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1088fa6a41636642119ca4d3e231d112daf578/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1088fa6a41636642119ca4d3e231d112daf578/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=be1088fa6a41636642119ca4d3e231d112daf578", "patch": "@@ -911,6 +911,17 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       void\n       _M_insert_aux(iterator __position, const value_type& __x);\n \n+      // Called by the latter.\n+      size_type\n+      _M_check_len(size_type __n, const char* __s) const\n+      {\n+\tif (max_size() - size() < __n)\n+\t  __throw_length_error(__N(__s));\n+\n+\tconst size_type __len = size() + std::max(size(), __n);\n+\treturn (__len < size() || __len > max_size()) ? max_size() : __len;\n+      }\n+\n       // Internal erase functions follow.\n \n       // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,"}, {"sha": "09266a2a9970ea38541f86ca23bab189a331bc87", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 12, "deletions": 33, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1088fa6a41636642119ca4d3e231d112daf578/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1088fa6a41636642119ca4d3e231d112daf578/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=be1088fa6a41636642119ca4d3e231d112daf578", "patch": "@@ -258,17 +258,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n \t}\n       else\n \t{\n-\t  const size_type __old_size = size();\n-\t  if (__old_size == this->max_size())\n-\t    __throw_length_error(__N(\"vector::_M_insert_aux\"));\n-\n-\t  // When sizeof(value_type) == 1 and __old_size > size_type(-1)/2\n-\t  // __len overflows: if we don't notice and _M_allocate doesn't\n-\t  // throw we crash badly later.\n-\t  size_type __len = __old_size != 0 ? 2 * __old_size : 1;\t  \n-\t  if (__len < __old_size)\n-\t    __len = this->max_size();\n-\n+\t  const size_type __len =\n+\t    _M_check_len(size_type(1), \"vector::_M_insert_aux\");\n \t  pointer __new_start(this->_M_allocate(__len));\n \t  pointer __new_finish(__new_start);\n \t  try\n@@ -343,15 +334,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n \t    }\n \t  else\n \t    {\n-\t      const size_type __old_size = size();\n-\t      if (this->max_size() - __old_size < __n)\n-\t\t__throw_length_error(__N(\"vector::_M_fill_insert\"));\n-\t      \n-\t      // See _M_insert_aux above.\n-\t      size_type __len = __old_size + std::max(__old_size, __n);\n-\t      if (__len < __old_size)\n-\t\t__len = this->max_size();\n-\n+\t      const size_type __len =\n+\t\t_M_check_len(__n, \"vector::_M_fill_insert\");\n \t      pointer __new_start(this->_M_allocate(__len));\n \t      pointer __new_finish(__new_start);\n \t      try\n@@ -447,15 +431,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n \t      }\n \t    else\n \t      {\n-\t\tconst size_type __old_size = size();\n-\t\tif (this->max_size() - __old_size < __n)\n-\t\t  __throw_length_error(__N(\"vector::_M_range_insert\"));\t\n-\n-\t\t// See _M_insert_aux above.\n-\t\tsize_type __len = __old_size + std::max(__old_size, __n);\n-\t\tif (__len < __old_size)\n-\t\t  __len = this->max_size();\n-\n+\t\tconst size_type __len =\n+\t\t  _M_check_len(__n, \"vector::_M_range_insert\");\n \t\tpointer __new_start(this->_M_allocate(__len));\n \t\tpointer __new_finish(__new_start);\n \t\ttry\n@@ -512,7 +489,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n \t}\n       else\n \t{\n-\t  const size_type __len = size() + std::max(size(), __n);\n+\t  const size_type __len = \n+\t    _M_check_len(__n, \"vector<bool>::_M_fill_insert\");\n \t  _Bit_type * __q = this->_M_allocate(__len);\n \t  iterator __i = _M_copy_aligned(begin(), __position,\n \t\t\t\t\t iterator(__q, 0));\n@@ -547,7 +525,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n \t      }\n \t    else\n \t      {\n-\t\tconst size_type __len = size() + std::max(size(), __n);\n+\t\tconst size_type __len =\n+\t\t  _M_check_len(__n, \"vector<bool>::_M_insert_range\");\n \t\t_Bit_type * __q = this->_M_allocate(__len);\n \t\titerator __i = _M_copy_aligned(begin(), __position,\n \t\t\t\t\t       iterator(__q, 0));\n@@ -577,8 +556,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n \t}\n       else\n \t{\n-\t  const size_type __len = size() ? 2 * size()\n-\t                                 : static_cast<size_type>(_S_word_bit);\n+\t  const size_type __len =\n+\t    _M_check_len(size_type(1), \"vector<bool>::_M_insert_aux\");\n \t  _Bit_type * __q = this->_M_allocate(__len);\n \t  iterator __i = _M_copy_aligned(begin(), __position,\n \t\t\t\t\t iterator(__q, 0));"}, {"sha": "69e5a535c9c0d3ca387189408af1c5ac7f2f4d86", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/capacity/29134.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1088fa6a41636642119ca4d3e231d112daf578/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcapacity%2F29134.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1088fa6a41636642119ca4d3e231d112daf578/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcapacity%2F29134.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcapacity%2F29134.cc?ref=be1088fa6a41636642119ca4d3e231d112daf578", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,7 +28,11 @@ void test01()\n \n   std::vector<bool> vb;\n \n-  VERIFY( vb.max_size() == std::vector<bool>::size_type(-1) );\n+  // Actually, vector<bool> is special, see libstdc++/31370.\n+  typedef std::vector<bool>::difference_type difference_type;\n+  VERIFY( vb.max_size()\n+\t  == (std::numeric_limits<difference_type>::max()\n+\t      - int(std::_S_word_bit) + 1) );\n }\n \n int main()"}, {"sha": "0c4d0a8c1bd0b8c7a76274a41535e245c8877ed5", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/modifiers/insert/31370.cc", "status": "added", "additions": 192, "deletions": 0, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1088fa6a41636642119ca4d3e231d112daf578/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fmodifiers%2Finsert%2F31370.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1088fa6a41636642119ca4d3e231d112daf578/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fmodifiers%2Finsert%2F31370.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fmodifiers%2Finsert%2F31370.cc?ref=be1088fa6a41636642119ca4d3e231d112daf578", "patch": "@@ -0,0 +1,192 @@\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 23.2.5 class vector<bool> [lib.vector.bool]\n+\n+// { dg-do run { xfail *-*-darwin8.[0-4].* } }\n+\n+#include <vector>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+inline void\n+check_cap_ge_size(const std::vector<bool>& x)\n+{\n+  if (x.capacity() < x.size())\n+    throw std::logic_error(\"\");\n+}\n+\n+inline void\n+check_cap_eq_maxsize(const std::vector<bool>& x)\n+{\n+  if (x.capacity() != x.max_size())\n+    throw std::logic_error(\"\");\n+}\n+\n+// libstdc++/31370\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  int myexit = 0;\n+\n+  try\n+    {\n+      std::vector<bool> x;\n+      x.reserve(x.max_size());\n+      check_cap_eq_maxsize(x);\n+    }\n+  catch(std::bad_alloc&)\n+    { }\n+  catch(std::exception&)\n+    { ++myexit; }\n+  \n+  // When doubling is too big, but smaller is sufficient, the resize\n+  // should do smaller and be happy.  It certainly shouldn't throw\n+  // other exceptions or crash.\n+  try\n+    {\n+      std::vector<bool> x;\n+      x.resize(x.max_size() / 2 + 1, false); \n+      for(int i = 0; i < std::_S_word_bit; ++i)\n+\tx.push_back(false);\n+      check_cap_ge_size(x);\n+    }\n+  catch(std::bad_alloc&)\n+    { }\n+  catch(std::exception&)\n+    { ++myexit; }\n+  \n+  try\n+    {\n+      std::vector<bool> x;\n+      x.resize(x.max_size() / 2 + 1, false); \n+      x.insert(x.end(), std::_S_word_bit, false);\n+      check_cap_ge_size(x);\n+    }\n+  catch(std::bad_alloc&)\n+    { }\n+  catch(std::exception&)\n+    { ++myexit; }\n+  \n+  try\n+    {\n+      std::vector<bool> x;\n+      x.resize(x.max_size() / 2 + 1, false); \n+      std::vector<bool> y(std::_S_word_bit, false);\n+      x.insert(x.end(), y.begin(), y.end());\n+      check_cap_ge_size(x);\n+    }\n+  catch(std::bad_alloc&)\n+    { }\n+  catch(std::exception&)\n+    { ++myexit; }\n+\n+  // These tests are currently only relevant to bool: don't get burned\n+  // by the attempt to round up when near the max size.\n+  try\n+    {\n+      std::vector<bool> x;\n+      x.resize(x.max_size() - std::_S_word_bit, false); \n+      for(int i = 0; i < std::_S_word_bit; ++i)\n+\tx.push_back(false);\n+      check_cap_ge_size(x);\n+    }\n+  catch(std::bad_alloc&)\n+    { }\n+  catch(std::exception&)\n+    { ++myexit; }\n+  \n+  try\n+    {\n+      std::vector<bool> x;\n+      x.resize(x.max_size() - std::_S_word_bit, false); \n+      x.insert(x.end(), std::_S_word_bit, false);\n+      check_cap_ge_size(x);\n+    }\n+  catch(std::bad_alloc&)\n+    { }\n+  catch(std::exception&)\n+    { ++myexit; }\n+\n+  try\n+    {\n+      std::vector<bool> x;\n+      x.resize(x.max_size() - std::_S_word_bit, false); \n+      std::vector<bool> y(std::_S_word_bit, false);\n+      x.insert(x.end(), y.begin(), y.end());\n+      check_cap_ge_size(x);\n+    }\n+  catch(std::bad_alloc&)\n+    { }\n+  catch(std::exception&)\n+    { ++myexit; }\n+  \n+  // Attempts to put in more than max_size() items should result in a\n+  // length error.\n+  try\n+    {\n+      std::vector<bool> x;\n+      x.resize(x.max_size() - std::_S_word_bit, false); \n+      for(int i = 0; i < std::_S_word_bit + 1; ++i)\n+\tx.push_back(false);\n+      ++myexit;\n+    }\n+  catch(std::bad_alloc)\n+    { }\n+  catch(std::length_error)\n+    { }\n+  catch(std::exception)\n+    { ++myexit; }\n+  \n+  try\n+    {\n+      std::vector<bool> x;\n+      x.resize(x.max_size() - std::_S_word_bit, false); \n+      x.insert(x.end(), std::_S_word_bit + 1, false);\n+      ++myexit;\n+    }\n+  catch(std::bad_alloc)\n+    { }\n+  catch(std::length_error)\n+    { }\n+  catch(std::exception)\n+    { ++myexit; }\n+\n+  try\n+    {\n+      std::vector<bool> x;\n+      x.resize(x.max_size() - std::_S_word_bit, false); \n+      std::vector<bool> y(std::_S_word_bit + 1, false);\n+      x.insert(x.end(), y.begin(), y.end());\n+      ++myexit;\n+    }\n+  catch(std::bad_alloc)\n+    { }\n+  catch(std::length_error)\n+    { }\n+  catch(std::exception)\n+    { ++myexit; }\n+\n+  VERIFY( !myexit );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}