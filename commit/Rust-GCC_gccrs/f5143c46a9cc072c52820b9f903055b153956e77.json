{"sha": "f5143c46a9cc072c52820b9f903055b153956e77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUxNDNjNDZhOWNjMDcyYzUyODIwYjlmOTAzMDU1YjE1Mzk1NmU3Nw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-11-04T02:51:28Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-11-04T02:51:28Z"}, "message": "ChangeLog.2, [...]: Fix spelling errors.\n\n\t* ChangeLog.2, ChangeLog.4, ChangeLog.5, ChangeLog,\n\tFSFChangeLog.10, FSFChangeLog.11, alias.c, attribs.c,\n\tcaller-save.c, calls.c, cfg.c, cfganal.c, cfgcleanup.c, cfgrtl.c,\n\tcppmacro.c, fold-const.c, ifcvt.c, local-alloc.c, profile.c,\n\tsched-int.h, toplev.c, config/alpha/alpha.c,\n\tconfig/alpha/alpha.md, config/c4x/c4x.h, config/cris/cris.h,\n\tconfig/cris/cris.md, config/i370/i370.md, config/i386/i386.c,\n\tconfig/i386/i386.h, config/i386/i386.md, config/i386/xm-djgpp.h,\n\tconfig/ia64/ia64.c, config/m68hc11/m68hc11.c, config/m68k/m68k.md,\n\tconfig/mcore/mcore.h, config/mmix/mmix.c, config/ns32k/ns32k.h,\n\tconfig/ns32k/ns32k.md, config/rs6000/rs6000.c,\n\tconfig/rs6000/sysv4.h, config/sh/sh.md: Fix spelling errors.\n\nFrom-SVN: r46760", "tree": {"sha": "e032f0934bde28fa98892ee1930ec178cedbfe6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e032f0934bde28fa98892ee1930ec178cedbfe6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5143c46a9cc072c52820b9f903055b153956e77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5143c46a9cc072c52820b9f903055b153956e77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5143c46a9cc072c52820b9f903055b153956e77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5143c46a9cc072c52820b9f903055b153956e77/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3fb23f4412328c8079c4990059f7217302ea0d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3fb23f4412328c8079c4990059f7217302ea0d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3fb23f4412328c8079c4990059f7217302ea0d4"}], "stats": {"total": 211, "additions": 113, "deletions": 98}, "files": [{"sha": "0c8e9f11937330f3cb58366cdf47cffd539cede0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -1,3 +1,18 @@\n+2001-11-04  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* ChangeLog.2, ChangeLog.4, ChangeLog.5, ChangeLog,\n+\tFSFChangeLog.10, FSFChangeLog.11, alias.c, attribs.c,\n+\tcaller-save.c, calls.c, cfg.c, cfganal.c, cfgcleanup.c, cfgrtl.c,\n+\tcppmacro.c, fold-const.c, ifcvt.c, local-alloc.c, profile.c,\n+\tsched-int.h, toplev.c, config/alpha/alpha.c,\n+\tconfig/alpha/alpha.md, config/c4x/c4x.h, config/cris/cris.h,\n+\tconfig/cris/cris.md, config/i370/i370.md, config/i386/i386.c,\n+\tconfig/i386/i386.h, config/i386/i386.md, config/i386/xm-djgpp.h,\n+\tconfig/ia64/ia64.c, config/m68hc11/m68hc11.c, config/m68k/m68k.md,\n+\tconfig/mcore/mcore.h, config/mmix/mmix.c, config/ns32k/ns32k.h,\n+\tconfig/ns32k/ns32k.md, config/rs6000/rs6000.c,\n+\tconfig/rs6000/sysv4.h, config/sh/sh.md: Fix spelling errors.\n+\n 2001-11-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Makefile.in (dbxout.o): Depend on function.h.\n@@ -5351,7 +5366,7 @@ Wed Sep  5 17:28:49 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \t* i386.c (ix86_expand_prologue): Set use_fast_prologue_epilogue\n \tproperly;  Use current_function_calls_eh_return.\n \t(ix86_expand_epilogue): Avoid dummy optimize_size tests;\n-\tuse leave to avoid depdendancy chain.\n+\tuse leave to avoid dependency chain.\n \n \t* local-alloc.c (update_equiv_regs): Use CFG to iterate over INSN stream;\n \tget BB loop_depth instead of computing it from LOOP notes.\n@@ -8544,7 +8559,7 @@ Sat Aug  4 13:51:36 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \t(reload): Use it.\n \n \t* flow.c (need_fake_edge_p): New function.\n-\t(flow_call_edges_add): Fix handling of noreturn and sibbling calls;\n+\t(flow_call_edges_add): Fix handling of noreturn and sibling calls;\n \tavoid call insn to be very last insn in the insn stream.\n \n \t* profile.c (branch_prob): Call flow_call_edges_add instead of\n@@ -11581,7 +11596,7 @@ Mon Jul  9 17:23:10 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \tover by line number note.\n \n \t* flow.c (try_simplify_condjump): Verify that the condjump\n-\tis not always falling trought.\n+\tis not always falling through.\n \n \tRe-install patch:\n \t* flow.c (try_redirect_by_replacing_jump): Remove cc0 setter."}, {"sha": "4aaeb0f32cb6bc28986528832fff0a32cda6bdbd", "filename": "gcc/ChangeLog.2", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2FChangeLog.2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2FChangeLog.2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.2?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -4049,8 +4049,8 @@ Wed Oct 27 15:21:46 1999  Richard Henderson  <rth@cygnus.com>\n \n Wed Oct 27 12:33:40 1999  Mark Mitchell  <mark@codesourcery.com>\n \n-\t* rtl.h (note_stores): Add additional paramter.\n-\t* rtlanal.c (reg_set_p_1): Take additional paramter.\n+\t* rtl.h (note_stores): Add additional parameter.\n+\t* rtlanal.c (reg_set_p_1): Take additional parameter.\n \t(reg_set_last_1): Likewise.\n \t(reg_set_p): Adjust call to note_stores.\n \t(reg_set_last): Likewise.\n@@ -4110,7 +4110,7 @@ Wed Oct 27 12:33:40 1999  Mark Mitchell  <mark@codesourcery.com>\n \t(prescan_loop): Adjust calls to note_stores.\n \t(strength_reduce): Likewise.\n \t(check_dbra_loop): Likewise.\n-\t* regmove.c (flags_set_1): Take additional paramter.\n+\t* regmove.c (flags_set_1): Take additional parameter.\n \t(mark_flags_life_zones): Adjust calls to note_stores.\n \t* reload1.c (mark_not_eliminable): Take additional parameter.\n \t(forget_old_reloads_1): Likewise.\n@@ -4124,7 +4124,7 @@ Wed Oct 27 12:33:40 1999  Mark Mitchell  <mark@codesourcery.com>\n \t(reload_cse_regs_1): Likewise.\n \t(reload_cse_record_set): Adjust calls to reload_cse_invalidate_rtx.\n \t(reload_combine): Adjust calls to note_stores.\n-\t* resource.c (update_live_status): Take additional paramter.\n+\t* resource.c (update_live_status): Take additional parameter.\n \t(mark_target_live_regs): Adjust calls to note_stores.\n \t* stupid.c (find_clobbered_regs): Take additional parameter.\n \t(stupid_life_analysis): Adjust calls to note_stores.\n@@ -5833,7 +5833,7 @@ Thu Oct  7 23:06:50 1999  Richard Henderson  <rth@cygnus.com>\n Thu Oct  7 22:53:00 1999  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n \t\t\t  Mark Mitchell  <mark@codesourcery.com>\n \n-\t* tree.c (make_lang_type_fn): New funtion pointer.\n+\t* tree.c (make_lang_type_fn): New function pointer.\n \t(make_lang_type): Call it.\n \t* tree.h (make_lang_type): Declare.\n \t(make_lang_type_fn): Likewise.\n@@ -8622,7 +8622,7 @@ Tue Sep  7 00:47:52 1999  Mark Mitchell  <mark@codesourcery.com>\n \t* except.c (mark_func_eh_entry): New function.\n \t(mark_eh_node): Mark false_label and rethrow_label.\n \t(init_eh): Add more GC roots.\n-\t* function.c (free_after_compilation): Take decl as a paramter.\n+\t* function.c (free_after_compilation): Take decl as a parameter.\n \tCall free_stmt_status.\n \t(mark_function_state): Don't assume x_parm_reg_stack_loc is\n \tnon-NULL."}, {"sha": "36bc937bd7e4253239a351af505d8685b5f80c13", "filename": "gcc/ChangeLog.4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2FChangeLog.4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2FChangeLog.4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.4?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -14340,7 +14340,7 @@ Wed Jul 12 13:15:16 2000  Marc Espie <espie@openbsd.org>\n \t* cpphash.c: (struct macro_info, alloc_macro, free_macro,\n \tstruct toklist_dummy): New.\n \t(cpp_free_definition): Free macros with free_macro.\n-\t(count_params): Don't save paramter spellings.  Save macro\n+\t(count_params): Don't save parameter spellings.  Save macro\n \tinformation in a struct macro_info.\n \t(parse_define): Don't allocate a token list.\n \t(save_expansion): Allocate the macro's token list, and"}, {"sha": "f2e578dcd482bfc7eea53cf99e5788d594068c1b", "filename": "gcc/ChangeLog.5", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2FChangeLog.5", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2FChangeLog.5", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.5?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -6191,7 +6191,7 @@ Tue Apr 10 17:45:50 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t(store_ops_ok): Verfies registers expressions are valid in a block.\n \t(find_moveable_store): Look for moveable stores in a pattern.\n \t(compute_store_table): Find stores in a function worth moving, maybe.\n-\t(load_kills_store): Check dependance of a load and store.\n+\t(load_kills_store): Check dependence of a load and store.\n \t(find_loads): Find any loads in a pattern.\n \t(store_killed_in_insn): Check if a store is killed in an insn.\n \t(store_killed_after): Check is store killed after an insn in a block."}, {"sha": "10cc3092f8693d6f14dd41591baec18cb47bf6fa", "filename": "gcc/FSFChangeLog.10", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2FFSFChangeLog.10", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2FFSFChangeLog.10", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FFSFChangeLog.10?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -4259,7 +4259,7 @@ Wed Nov 29 14:06:13 1995  Jim Wilson  <wilson@cygnus.com>\n \n Wed Nov 29 13:59:58 1995  J\"orn Rennecke (amylaar@meolyon.hanse.de)\n \n-\t* c-decl.c (duplicate_decls): Add new paramter different_binding_level.\n+\t* c-decl.c (duplicate_decls): Add new parameter different_binding_level.\n \tLots of changes to use new new parameter.\n \t(pushdecl): Delete variable declared_global.  New variable\n \tdifferent_binding_level and code to set it.  Move extern/static\n@@ -9913,7 +9913,7 @@ Fri Mar 10 05:50:11 1995  Oliver Kellogg  (Oliver.Kellogg@RST13.DASA.DBMAIL.d400\n \n \t* 1750a.c (sectname): Reverse Init and Normal.\n \t(print_operand_address, case PLUS): Add case for LABEL_REF.\n-\t(print_operand_address, case LABEL_REF): Split fom SYMBOL_REF.\n+\t(print_operand_address, case LABEL_REF): Split from SYMBOL_REF.\n \t(print_operand_address, case CODE_LABEL): New case.\n \t(ASM_FILE_END): Delete.\n \t* 1750a.h (FUNCTION_EPILOGUE): Restore stack before freeing local vars."}, {"sha": "38de90cfe2ecfd92d75707c3cf4cd911a3c9d271", "filename": "gcc/FSFChangeLog.11", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2FFSFChangeLog.11", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2FFSFChangeLog.11", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FFSFChangeLog.11?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -5434,7 +5434,7 @@ Thu Jun  5 13:40:33 1997  Mike Meissner  <meissner@cygnus.com>\n \t(life_analysis): Don't allocate the space to hold to vector of\n \tregsets here.\n \t(init_regset_vector): Add pointer parameter and delete space\n-\tparamter.  Use OBSTACK_ALLOC_REG_SET to allocate.  Change callers.\n+\tparameter.  Use OBSTACK_ALLOC_REG_SET to allocate.  Change callers.\n \t(propagate_block): Use ALLOCA_REG_SET instead of bare alloca.\n \n \t* sched.c (schedule_block): Fix typo in yesterday's changes.\n@@ -8809,7 +8809,7 @@ Sun Nov 24 17:06:58 1996  Bernd Schmidt  (crux@Pool.Informatik.RWTH-Aachen.DE)\n Sun Nov 24 16:37:18 1996  Dave Love  <d.love@dl.ac.uk>\n \n \t* configure (objc_thread_file): Set conditionally in each case so\n-\tmay be overidden with `--enable-objcthreads=posix'.\n+\tmay be overridden with `--enable-objcthreads=posix'.\n \tChange GNU/Linux default to `single'.\n \n Fri Nov 22 17:53:15 1996  Jason Merrill  <jason@yorick.cygnus.com>"}, {"sha": "68b80b8d6d3fa39610d7d9aa34ea998ffa7f2cba", "filename": "gcc/alias.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -341,7 +341,7 @@ objects_must_conflict_p (t1, t2)\n /* T is an expression with pointer type.  Find the DECL on which this\n    expression is based.  (For example, in `a[i]' this would be `a'.)\n    If there is no such DECL, or a unique decl cannot be determined,\n-   NULL_TREE is retured.  */\n+   NULL_TREE is returned.  */\n \n static tree\n find_base_decl (t)\n@@ -1253,7 +1253,7 @@ find_base_term (x)\n \trtx tmp1 = XEXP (x, 0);\n \trtx tmp2 = XEXP (x, 1);\n \n-\t/* This is a litle bit tricky since we have to determine which of\n+\t/* This is a little bit tricky since we have to determine which of\n \t   the two operands represents the real base address.  Otherwise this\n \t   routine may return the index register instead of the base register.\n \n@@ -1816,7 +1816,7 @@ true_dependence (mem, mem_mode, x, varies)\n   if (aliases_everything_p (x))\n     return 1;\n \n-  /* We cannot use aliases_everyting_p to test MEM, since we must look\n+  /* We cannot use aliases_everything_p to test MEM, since we must look\n      at MEM_MODE, rather than GET_MODE (MEM).  */\n   if (mem_mode == QImode || GET_CODE (mem_addr) == AND)\n     return 1;\n@@ -1831,7 +1831,7 @@ true_dependence (mem, mem_mode, x, varies)\n }\n \n /* Canonical true dependence: X is read after store in MEM takes place.\n-   Variant of true_dependece which assumes MEM has already been \n+   Variant of true_dependence which assumes MEM has already been \n    canonicalized (hence we no longer do that here).  \n    The mem_addr argument has been added, since true_dependence computed \n    this value prior to canonicalizing.  */\n@@ -1873,7 +1873,7 @@ canon_true_dependence (mem, mem_mode, mem_addr, x, varies)\n   if (aliases_everything_p (x))\n     return 1;\n \n-  /* We cannot use aliases_everyting_p to test MEM, since we must look\n+  /* We cannot use aliases_everything_p to test MEM, since we must look\n      at MEM_MODE, rather than GET_MODE (MEM).  */\n   if (mem_mode == QImode || GET_CODE (mem_addr) == AND)\n     return 1;\n@@ -2231,7 +2231,7 @@ init_alias_analysis ()\n \t start counting from zero each iteration of the loop.  */\n       unique_id = 0;\n \n-      /* We're at the start of the funtion each iteration through the\n+      /* We're at the start of the function each iteration through the\n \t loop, so we're copying arguments.  */\n       copying_arguments = 1;\n \n@@ -2273,7 +2273,7 @@ init_alias_analysis ()\n \t      rtx note, set;\n \n #if defined (HAVE_prologue) || defined (HAVE_epilogue)\n-\t      /* The prologue/epilouge insns are not threaded onto the\n+\t      /* The prologue/epilogue insns are not threaded onto the\n \t\t insn chain until after reload has completed.  Thus,\n \t\t there is no sense wasting time checking if INSN is in\n \t\t the prologue/epilogue until after reload has completed.  */"}, {"sha": "a20ff35b36c8a6015d71292dbbd7e969f40601e8", "filename": "gcc/attribs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -252,7 +252,7 @@ init_attributes ()\n    a decl attribute to the declaration rather than to its type).  If\n    ATTR_FLAG_BUILT_IN is not set and *NODE is a DECL, then also consider\n    whether there might be some default attributes to apply to this DECL;\n-   if so, decl_attributes will be called recusrively with those attributes\n+   if so, decl_attributes will be called recursively with those attributes\n    and ATTR_FLAG_BUILT_IN set.  */\n \n tree"}, {"sha": "7c891976b39d523558d1667121d2c01f5a74bed2", "filename": "gcc/caller-save.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -406,7 +406,7 @@ save_call_clobbered_regs ()\n \t\telse\n \t\t  save_mode [regno] = VOIDmode;\n \n-\t      /* Look trought all live pseudos, mark their hard registers\n+\t      /* Look through all live pseudos, mark their hard registers\n \t\t and choose proper mode for saving.  */\n \t      EXECUTE_IF_SET_IN_REG_SET\n \t\t(&chain->live_throughout, FIRST_PSEUDO_REGISTER, regno,"}, {"sha": "710d6760d037df43e57cba0e0f0acbfc702f4bab", "filename": "gcc/calls.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -1370,7 +1370,7 @@ compute_argument_block_size (reg_parm_stack_space, args_size,\n \n   /* For accumulate outgoing args mode we don't need to align, since the frame\n      will be already aligned.  Align to STACK_BOUNDARY in order to prevent\n-     backends from generating missaligned frame sizes.  */\n+     backends from generating misaligned frame sizes.  */\n   if (ACCUMULATE_OUTGOING_ARGS && preferred_stack_boundary > STACK_BOUNDARY)\n     preferred_stack_boundary = STACK_BOUNDARY;\n \n@@ -1387,7 +1387,7 @@ compute_argument_block_size (reg_parm_stack_space, args_size,\n       if (preferred_stack_boundary > 1)\n \t{\n \t  /* We don't handle this case yet.  To handle it correctly we have\n-\t     to add the delta, round and substract the delta.\n+\t     to add the delta, round and subtract the delta.\n \t     Currently no machine description requires this support.  */\n \t  if (stack_pointer_delta & (preferred_stack_boundary - 1))\n \t    abort ();\n@@ -1466,7 +1466,7 @@ precompute_arguments (flags, num_actuals, args)\n      function call which will store arguments on the stack.\n      Otherwise, evaluating the parameter may clobber previous parameters\n      which have already been stored into the stack.  (we have code to avoid\n-     such case by saving the ougoing stack arguments, but it results in\n+     such case by saving the outgoing stack arguments, but it results in\n      worse code)  */\n \n   for (i = 0; i < num_actuals; i++)\n@@ -2487,7 +2487,7 @@ expand_call (exp, target, ignore)\n \n \t initialize_argument_information has ordered the array for the\n \t order to be pushed, and we must remember this when reconstructing\n-\t the original argument orde.  */\n+\t the original argument order.  */\n \n       if (PUSH_ARGS_REVERSED)\n \t{\n@@ -2612,7 +2612,7 @@ expand_call (exp, target, ignore)\n   for (pass = 0; pass < 2; pass++)\n     {\n       int sibcall_failure = 0;\n-      /* We want to emit ay pending stack adjustments before the tail\n+      /* We want to emit any pending stack adjustments before the tail\n \t recursion \"call\".  That way we know any adjustment after the tail\n \t recursion call can be ignored if we indeed use the tail recursion\n \t call expansion.  */\n@@ -4550,7 +4550,7 @@ store_one_arg (arg, argblock, flags, variable_size, reg_parm_stack_space)\n #endif\n \t{\n \t  if (arg->offset.constant < reg_parm_stack_space && arg->offset.var)\n-\t    error (\"variable offset is passed paritially in stack and in reg\");\n+\t    error (\"variable offset is passed partially in stack and in reg\");\n \t  else if (arg->offset.constant < reg_parm_stack_space && arg->size.var)\n \t    error (\"variable size is passed partially in stack and in reg\");\n \t  else if (arg->offset.constant < reg_parm_stack_space "}, {"sha": "6071e8dbedc159797d7671222ce222a787743e6c", "filename": "gcc/cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -22,7 +22,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* This file contains low level functions to manipulate with CFG and analyze it.\n    All other modules should not transform the datastructure directly and use\n    abstraction instead.  The file is supposed to be ordered bottom-up and should\n-   not contain any code depdendent on particular intermediate language (RTL or trees)\n+   not contain any code dependent on particular intermediate language (RTL or trees)\n \n    Available functionality:\n      - Initialization/deallocation"}, {"sha": "7dd51e6c6ccf4a7cce83cad88c22f90d73a792b2", "filename": "gcc/cfganal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fcfganal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fcfganal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.c?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -76,7 +76,7 @@ forwarder_block_p (bb)\n \t  || !active_insn_p (insn));\n }\n \n-/* Return nonzero if we can reach target from src by falling trought.  */\n+/* Return nonzero if we can reach target from src by falling through.  */\n bool\n can_fallthru (src, target)\n      basic_block src, target;"}, {"sha": "addd84e7feb7ea14bb654b20bc4cfe4c19e3d8c2", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -26,7 +26,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    - Edge forwarding (edge to the forwarder block is forwarded to it's\n      succesor.  Simplification of the branch instruction is performed by\n      underlying infrastructure so branch can be converted to simplejump or\n-     elliminated).\n+     eliminated).\n    - Cross jumping (tail merging)\n    - Conditional jump-around-simplejump simplification\n    - Basic block merging.  */"}, {"sha": "2987a50661875124e52fe98170f67e5fee3e8a62", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -1919,7 +1919,7 @@ purge_dead_edges (bb)\n \n /* Search all basic blocks for potentionally dead edges and purge them.\n \n-   Return true ifif some edge has been elliminated.\n+   Return true iff some edge has been eliminated.\n  */\n \n bool"}, {"sha": "511db5999b4b9b4c131276dbe8f8bff201c90707", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -7618,7 +7618,7 @@ alpha_align_insns (insns, max_align, next_group, next_nop)\n     }\n }\n \f\n-/* Machine dependant reorg pass.  */\n+/* Machine dependent reorg pass.  */\n \n void\n alpha_reorg (insns)"}, {"sha": "8594c82ce86fa2800ef91e7cc6c8734f08460d2e", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -84,7 +84,7 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n   [(set_attr \"type\" \"multi\")])\n \n ;; Define the operand size an insn operates on.  Used primarily by mul\n-;; and div operations that have size dependant timings.\n+;; and div operations that have size dependent timings.\n \n (define_attr \"opsize\" \"si,di,udi\"\n   (const_string \"di\"))\n@@ -284,13 +284,13 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n   (and (eq_attr \"cpu\" \"ev5\")\n        (and (eq_attr \"type\" \"fdiv\")\n \t    (eq_attr \"opsize\" \"si\")))\n-  15 15)\t\t\t\t; 15 to 31 data dependant\n+  15 15)\t\t\t\t; 15 to 31 data dependent\n \n (define_function_unit \"fdiv\" 1 0\n   (and (eq_attr \"cpu\" \"ev5\")\n        (and (eq_attr \"type\" \"fdiv\")\n \t    (eq_attr \"opsize\" \"di\")))\n-  22 22)\t\t\t\t; 22 to 60 data dependant\n+  22 22)\t\t\t\t; 22 to 60 data dependent\n \f\n ;; EV6 scheduling.  EV6 can issue 4 insns per clock.\n ;;\n@@ -433,7 +433,7 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n ;; sign-extend.\n \n ;; Handle 32-64 bit extension from memory to a floating point register\n-;; specially, since this ocurrs frequently in int->double conversions.\n+;; specially, since this occurs frequently in int->double conversions.\n ;;\n ;; Note that while we must retain the =f case in the insn for reload's\n ;; benefit, it should be eliminated after reload, so we should never emit\n@@ -6643,7 +6643,7 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n   \"trapb\"\n   [(set_attr \"type\" \"misc\")])\n \n-;; No-op instructions used by machine-dependant reorg to preserve\n+;; No-op instructions used by machine-dependent reorg to preserve\n ;; alignment for instruction issue.\n ;; The Unicos/Mk assembler does not support these opcodes.\n "}, {"sha": "924642a387278fec6b4d103bb33b8ebf8dc42e78", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -1555,7 +1555,7 @@ CUMULATIVE_ARGS;\n    The problem is a subtle one and deals with the manner in which the\n    negative condition (N) flag is used on the C4x.  This flag does not\n    reflect the status of the actual result but of the ideal result had\n-   no overflow occured (when considering signed operands).\n+   no overflow occurred (when considering signed operands).\n \n    For example, 0x7fffffff + 1 => 0x80000000 Z=0 V=1 N=0 C=0.  Here\n    the flags reflect the untruncated result, not the actual result.\n@@ -1591,7 +1591,7 @@ CUMULATIVE_ARGS;\n    To handle the problem where the N flag is set differently whenever\n    there is an overflow we use a different CC mode, CC_NOOVmode which\n    says that the CC reflects the comparison of the result against zero\n-   if no overflow occured.\n+   if no overflow occurred.\n \n    For example, \n "}, {"sha": "2857788a968ad7e6575cdfaca6fb1b65fd1ff334", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -122,7 +122,7 @@ extern const char *cris_elinux_stacksize_str;\n    Note that for -melinux and -mlinux, command-line -isystem options are\n    emitted both before and after the synthesized one.  We can't remove all\n    of them: a %{<isystem} will only remove the first one and %{<isystem*}\n-   will not do TRT.  Those extra occurences are harmless anyway.  */\n+   will not do TRT.  Those extra occurrences are harmless anyway.  */\n #define CPP_SPEC \\\n  \"-$ -D__CRIS_ABI_version=2\\\n   %{mtune=*:-D__tune_%* %{mtune=v*:-D__CRIS_arch_tune=%*}}\\\n@@ -199,7 +199,7 @@ extern const char *cris_elinux_stacksize_str;\n    are linked in (multilibbing).  The somewhat cryptic -rpath-link pair is\n    to avoid *only* picking up the linux multilib subdir from the \"-B./\"\n    option during build, while still giving it preference.  We'd need some\n-   %s-variant that checked for existance of some specific file.  */\n+   %s-variant that checked for existence of some specific file.  */\n /* Override previous definitions (svr4.h).  */\n #undef LINK_SPEC\n #define LINK_SPEC \\\n@@ -294,7 +294,7 @@ extern int target_flags;\n #define TARGET_MASK_DATA_ALIGN 128\n #define TARGET_DATA_ALIGN (target_flags & TARGET_MASK_DATA_ALIGN)\n \n-/* If not to omit funtion prologue and epilogue.  */\n+/* If not to omit function prologue and epilogue.  */\n #define TARGET_MASK_PROLOGUE_EPILOGUE 256\n #define TARGET_PROLOGUE_EPILOGUE (target_flags & TARGET_MASK_PROLOGUE_EPILOGUE)\n "}, {"sha": "dedf8a84e5848bfd8303aa1043f3d0d620515a0d", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -2635,7 +2635,7 @@\n ;; second operand, and the third operand is -256 or -65536, we can use\n ;; CLEAR instead.  Or, if the first operand is a register, and the third\n ;; operand is 255 or 65535, we can zero_extend.\n-;; GCC isnt smart enough to recognize these cases (yet), and they seem\n+;; GCC isn't smart enough to recognize these cases (yet), and they seem\n ;; to be common enough to be worthwhile.\n ;; FIXME: This should be made obsolete.\n "}, {"sha": "b6da211b1784126e0e1e551ec16110bc9217bdb7", "filename": "gcc/config/i370/i370.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fi370%2Fi370.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fi370%2Fi370.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.md?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -1964,7 +1964,7 @@ check_label_emit ();\n   \"*\n {\n   check_label_emit ();\n-  CC_STATUS_INIT;  /* add assumes CC but LA doesnt set CC */\n+  CC_STATUS_INIT;  /* add assumes CC but LA doesn't set CC */\n   mvs_check_page (0, 4, 0);\n   return \\\"LA\t%0,%c2(,%1)\\\";\n }\"\n@@ -1983,7 +1983,7 @@ check_label_emit ();\n   check_label_emit ();\n   if ((unsigned) INTVAL (operands[2]) < 4096)\n     {\n-      CC_STATUS_INIT;  /* add assumes CC but LA doesnt set CC */\n+      CC_STATUS_INIT;  /* add assumes CC but LA doesn't set CC */\n       mvs_check_page (0, 4, 0);\n       return \\\"LA\t%0,%c2(,%1)\\\";\n     }\n@@ -2023,7 +2023,7 @@ check_label_emit ();\n     {\n       if (INTVAL (operands[2]) == -1)\n \t{\n-          CC_STATUS_INIT;  /* add assumes CC but BCTR doesnt set CC */\n+          CC_STATUS_INIT;  /* add assumes CC but BCTR doesn't set CC */\n \t  mvs_check_page (0, 2, 0);\n \t  return \\\"BCTR\t%0,0\\\";\n \t}\n@@ -2055,7 +2055,7 @@ check_label_emit ();\n     {\n       if (INTVAL (operands[2]) == -1)\n \t{\n-          CC_STATUS_INIT;  /* add assumes CC but BCTR doesnt set CC */\n+          CC_STATUS_INIT;  /* add assumes CC but BCTR doesn't set CC */\n \t  mvs_check_page (0, 2, 0);\n \t  return \\\"BCTR\t%0,0\\\";\n \t}\n@@ -2080,7 +2080,7 @@ check_label_emit ();\n   \"*\n {\n   check_label_emit ();\n-  CC_STATUS_INIT;  /* add assumes CC but LA doesnt set CC */\n+  CC_STATUS_INIT;  /* add assumes CC but LA doesn't set CC */\n   mvs_check_page (0, 4, 0);\n   if (REG_P (operands[2]))\n     return \\\"LA\t%0,0(%1,%2)\\\";\n@@ -2235,7 +2235,7 @@ check_label_emit ();\n     }\n   if (operands[2] == const1_rtx)\n     {\n-      CC_STATUS_INIT;  /* subtract assumes CC but BCTR doesnt set CC */\n+      CC_STATUS_INIT;  /* subtract assumes CC but BCTR doesn't set CC */\n       mvs_check_page (0, 2, 0);\n       return \\\"BCTR\t%0,0\\\";\n     }\n@@ -2264,7 +2264,7 @@ check_label_emit ();\n     }\n   if (operands[2] == const1_rtx)\n     {\n-      CC_STATUS_INIT;  /* subtract assumes CC but BCTR doesnt set CC */\n+      CC_STATUS_INIT;  /* subtract assumes CC but BCTR doesn't set CC */\n       mvs_check_page (0, 2, 0);\n       return \\\"BCTR\t%0,0\\\";\n     }"}, {"sha": "8fe70a2a71c548e92d0262e25b6b56fe40b0e60d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -1616,7 +1616,7 @@ classify_argument (mode, type, classes, bit_offset)\n \tmode_alignment = 128;\n       else if (mode == XCmode)\n \tmode_alignment = 256;\n-      /* Missalignmed fields are always returned in memory.  */\n+      /* Misaligned fields are always returned in memory.  */\n       if (bit_offset % mode_alignment)\n \treturn 0;\n     }\n@@ -1678,7 +1678,7 @@ classify_argument (mode, type, classes, bit_offset)\n }\n \n /* Examine the argument and return set number of register required in each\n-   class.  Return 0 ifif parameter should be passed in memory.  */\n+   class.  Return 0 iff parameter should be passed in memory.  */\n static int\n examine_argument (mode, type, in_return, int_nregs, sse_nregs)\n      enum machine_mode mode;\n@@ -2060,7 +2060,7 @@ ix86_function_value (valtype)\n     return gen_rtx_REG (TYPE_MODE (valtype), VALUE_REGNO (TYPE_MODE (valtype)));\n }\n \n-/* Return false ifif type is returned in memory.  */\n+/* Return false iff type is returned in memory.  */\n int\n ix86_return_in_memory (type)\n      tree type;\n@@ -2853,7 +2853,7 @@ incdec_operand (op, mode)\n      register rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n-  /* On Pentium4, the inc and dec operations causes extra dependancy on flag\n+  /* On Pentium4, the inc and dec operations causes extra dependency on flag\n      registers, since carry flag is not set.  */\n   if (TARGET_PENTIUM4 && !optimize_size)\n     return 0;\n@@ -4174,7 +4174,7 @@ ix86_expand_epilogue (style)\n \t  }\n       if (frame_pointer_needed)\n \t{\n-\t  /* Leave results in shorter depdendancy chains on CPUs that are\n+\t  /* Leave results in shorter dependency chains on CPUs that are\n \t     able to grok it fast.  */\n \t  if (TARGET_USE_LEAVE)\n \t    emit_insn (TARGET_64BIT ? gen_leave_rex64 () : gen_leave ());\n@@ -9908,7 +9908,7 @@ ix86_flags_dependant (insn, dep_insn, insn_type)\n   if (GET_CODE (set) != REG || REGNO (set) != FLAGS_REG)\n     return 0;\n \n-  /* This test is true if the dependant insn reads the flags but\n+  /* This test is true if the dependent insn reads the flags but\n      not any other potentially set register.  */\n   if (!reg_overlap_mentioned_p (set, PATTERN (insn)))\n     return 0;"}, {"sha": "a23644a605a6c171243eca74f09a30f50c80a61b", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -167,7 +167,7 @@ extern int target_flags;\n #define TARGET_FLOAT_RETURNS_IN_80387 (target_flags & MASK_FLOAT_RETURNS)\n \n /* Long double is 128bit instead of 96bit, even when only 80bits are used.\n-   This mode wastes cache, but avoid missaligned data accesses and simplifies\n+   This mode wastes cache, but avoid misaligned data accesses and simplifies\n    address calculations.  */\n #define TARGET_128BIT_LONG_DOUBLE (target_flags & MASK_128BIT_LONG_DOUBLE)\n "}, {"sha": "5479fc19b85d504dc8f3282858a62d5feb13e362", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -2363,7 +2363,7 @@\n    (set_attr \"mode\" \"DI\")])\n \n ;; Convert impossible pushes of immediate to existing instructions.\n-;; First try to get scratch register and go trought it.  In case this\n+;; First try to get scratch register and go through it.  In case this\n ;; fails, push sign extended lower part first and then overwrite\n ;; upper part by 32bit move.\n (define_peephole2\n@@ -2575,7 +2575,7 @@\n    (set_attr \"mode\" \"DI\")])\n \n ;; Convert impossible stores of immediate to existing instructions.\n-;; First try to get scratch register and go trought it.  In case this\n+;; First try to get scratch register and go through it.  In case this\n ;; fails, move by 32bit parts.\n (define_peephole2\n   [(match_scratch:DI 2 \"r\")\n@@ -8106,7 +8106,7 @@\n \t\t (const_int 0)))]\n   \"TARGET_64BIT\n    && ix86_match_ccmode (insn, CCNOmode)\n-   /* The code bellow cannot deal with constants outside HOST_WIDE_INT.  */\n+   /* The code below cannot deal with constants outside HOST_WIDE_INT.  */\n    && INTVAL (operands[1]) + INTVAL (operands[2]) < HOST_BITS_PER_WIDE_INT\n    /* Ensure that resulting mask is zero or sign extended operand.  */\n    && (INTVAL (operands[1]) + INTVAL (operands[2]) <= 32\n@@ -16198,7 +16198,7 @@\n \f\n ;; Misc patterns (?)\n \n-;; This pattern exists to put a dependancy on all ebp-based memory accesses.\n+;; This pattern exists to put a dependency on all ebp-based memory accesses.\n ;; Otherwise there will be nothing to keep\n ;; \n ;; [(set (reg ebp) (reg esp))]\n@@ -16904,7 +16904,7 @@\n ;; \"and imm, reg\" if reg dies.  The \"and\" form is also shorter (one\n ;; byte opcode instead of two, have a short form for byte operands),\n ;; so do it for other CPUs as well.  Given that the value was dead,\n-;; this should not create any new dependancies.  Pass on the sub-word\n+;; this should not create any new dependencies.  Pass on the sub-word\n ;; versions if we're concerned about partial register stalls.\n \n (define_peephole2\n@@ -17147,12 +17147,12 @@\n ;; The ESP adjustments can be done by the push and pop instructions.  Resulting\n ;; code is shorter, since push is only 1 byte, while add imm, %esp 3 bytes.  On\n ;; many CPUs it is also faster, since special hardware to avoid esp\n-;; dependancies is present.\n+;; dependencies is present.\n \n ;; While some of these converisons may be done using splitters, we use peepholes\n ;; in order to allow combine_stack_adjustments pass to see nonobfuscated RTL.\n \n-;; Convert prologue esp substractions to push.\n+;; Convert prologue esp subtractions to push.\n ;; We need register to push.  In order to keep verify_flow_info happy we have\n ;; two choices\n ;; - use scratch and clobber it in order to avoid dependencies\n@@ -17184,7 +17184,7 @@\n    (parallel [(set (mem:SI (pre_dec:SI (reg:SI 7))) (match_dup 0))\n \t      (clobber (mem:BLK (scratch)))])])\n \n-;; Convert esp substractions to push.\n+;; Convert esp subtractions to push.\n (define_peephole2\n   [(match_scratch:SI 0 \"r\")\n    (parallel [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -4)))\n@@ -17362,7 +17362,7 @@\n    (parallel [(set (mem:DI (pre_dec:DI (reg:DI 7))) (match_dup 0))\n \t      (clobber (mem:BLK (scratch)))])])\n \n-;; Convert esp substractions to push.\n+;; Convert esp subtractions to push.\n (define_peephole2\n   [(match_scratch:DI 0 \"r\")\n    (parallel [(set (reg:DI 7) (plus:DI (reg:DI 7) (const_int -8)))"}, {"sha": "b8367acc91235d0ab6f6b5a2c38ca52f8c109468", "filename": "gcc/config/i386/xm-djgpp.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -30,7 +30,7 @@ Boston, MA 02111-1307, USA.  */\n /* Allow test for DOS drive names.  */\n #define HAVE_DOS_BASED_FILE_SYSTEM\n \n-/* System dependant initialization for collect2\n+/* System dependent initialization for collect2\n    to tell system() to act like Unix.  */\n #define COLLECT2_HOST_INITIALIZATION \\\n   do { __system_flags |= (__system_allow_multiple_cmds\t\t\t\\"}, {"sha": "87c35e76f2f3f474db5d571c0e83aff761a45ddd", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -1052,7 +1052,7 @@ ia64_split_timode (out, in, scratch)\n \n    We got into problems in the first place by allowing a construct like\n    (subreg:TF (reg:TI)), which we got from a union containing a long double.  \n-   This solution attempts to prevent this situation from ocurring.  When\n+   This solution attempts to prevent this situation from occurring.  When\n    we see something like the above, we spill the inner register to memory.  */\n \n rtx"}, {"sha": "bb561255097cf27ffe2a2b2ed0d48b74861875fe", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -4620,7 +4620,7 @@ m68hc11_z_replacement (insn)\n     }\n \n \n-  /* Replace all occurence of Z by replace_reg.\n+  /* Replace all occurrence of Z by replace_reg.\n      Stop when the last instruction to replace is reached.\n      Also stop when we detect a change in the flow (but it's not\n      necessary; just safeguard).  */"}, {"sha": "41cf9b20468183cf4be879f4230d6f088b828e0f", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -7277,7 +7277,7 @@\n       return \\\"bsr.l %0\\\";\n #else\n       /* The ',a1' is a dummy argument telling the Sun assembler we want PIC,\n-\t GAS just plain ignores it.  FIXME: not anymore, gas doesnt!  */\n+\t GAS just plain ignores it.  FIXME: not anymore, gas doesn't!  */\n       return \\\"jbsr %0,a1\\\";\n #endif\n #endif\n@@ -7347,7 +7347,7 @@\n       return \\\"bsr.l %1\\\";\n #else\n       /* The ',a1' is a dummy argument telling the Sun assembler we want PIC\n-         GAS just plain ignores it.  FIXME: Not anymore, gas doesnt!  */\n+         GAS just plain ignores it.  FIXME: Not anymore, gas doesn't!  */\n       return \\\"jbsr %1,a1\\\";\n #endif\n #endif"}, {"sha": "1795a695bd8eb05ae35c51e42f4366aaef322687", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -356,7 +356,7 @@ extern int mcore_stack_increment;\n #define LK_REG\t15\t/* overloaded on general register */\n #define AP_REG  16\t/* fake arg pointer register */\n /* RBE: mcore.md depends on CC_REG being set to 17 */\n-#define CC_REG\t17\t/* cant name it C_REG */\n+#define CC_REG\t17\t/* can't name it C_REG */\n #define FP_REG  18\t/* fake frame pointer register */\n \n /* Specify the registers used for certain standard purposes."}, {"sha": "737f6c7f198cca6bf94fcb541dce74450e8444b4", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -2505,7 +2505,7 @@ mmix_dbx_register_number (regno)\n   return regno >= 224 ? (regno - 224) : (regno + 48);\n }\n \n-/* End of target macro support funtions.\n+/* End of target macro support functions.\n \n    Now MMIX's own functions.  First the exported ones.  */\n "}, {"sha": "fb2cd4d908d8b710cfcb899c3928b865e7fa90f7", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -855,7 +855,7 @@ __transfer_from_trampoline ()\t\t\\\n    because registers of CLASS are needed for spill registers.\n \n    The default definition won't do because class LONG_FLOAT_REG0 has two\n-   registers which are always acessed as a pair */\n+   registers which are always accessed as a pair */\n \n #define CLASS_LIKELY_SPILLED_P(CLASS) \\\n   (reg_class_size[(int) (CLASS)] == 1 || (CLASS) == LONG_FLOAT_REG0)"}, {"sha": "f7452ac627dd841222b3efdb2e07f585785d4ffa", "filename": "gcc/config/ns32k/ns32k.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fns32k%2Fns32k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fns32k%2Fns32k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.md?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -386,7 +386,7 @@\n     }\n   else if (GET_CODE (operands[1]) == CONST && ! flag_pic)\n     {\n-\t/* Must contain symbols so we don`t know how big it is. In\n+\t/* Must contain symbols so we don't know how big it is. In\n \t * that case addr might lead to overflow. For PIC symbolic\n \t * address loads always have to be done with addr.\n \t */"}, {"sha": "56317afee5995b058b4b14001b9e12d245f8b28f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -8318,7 +8318,7 @@ rs6000_select_section (decl, reloc)\n    RELOC indicates whether the initial value of EXP requires\n    link-time relocations.  If you do not define this macro, GCC will use\n    the symbol name prefixed by `.' as the section name.  Note - this\n-   macro can now be called for unitialised data items as well as\n+   macro can now be called for uninitialized data items as well as\n    initialised data and functions.  */\n \n void"}, {"sha": "a6f79a1dc501ed9ef8dc9825f22db33c28d897fd", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -582,7 +582,7 @@ fini_section ()\t\t\t\t\t\t\t\t\\\n    RELOC indicates whether the initial value of EXP requires\n    link-time relocations.  If you do not define this macro, GCC will use\n    the symbol name prefixed by `.' as the section name.  Note - this\n-   macro can now be called for unitialised data items as well as\n+   macro can now be called for uninitialized data items as well as\n    initialised data and functions.  */\n \n /* Override elfos.h definition.  */"}, {"sha": "fd6a760481314349cf0b4518301790780ee300bc", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -406,7 +406,7 @@\n   [(const_int 1)])\n \n ;; arith3 insns are always pairable at the start, but not inecessarily at\n-;; the end; however, there doesn;t seem to be a way to express that.\n+;; the end; however, there doesn't seem to be a way to express that.\n (define_function_unit \"single_issue\"     1 0\n   (and (eq_attr \"issues\" \"2\")\n        (eq_attr \"type\" \"arith3\"))"}, {"sha": "4fb2df91780ee2b19e8111a37e0602a59a4b4378", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -1162,7 +1162,7 @@ _cpp_free_definition (h)\n }\n \n /* Save parameter NODE to the parameter list of macro MACRO.  Returns\n-   zero on success, non-zero if the paramter is a duplicate.  */\n+   zero on success, non-zero if the parameter is a duplicate.  */\n static int\n save_parameter (pfile, macro, node)\n      cpp_reader *pfile;"}, {"sha": "05be225aeeb86829d3653d217207a5408dd39dec", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -4662,7 +4662,7 @@ extract_muldiv (t, c, code, wide_type)\n \t multiple of the other, in which case we replace this with either an\n \t operation or CODE or TCODE.\n \n-\t If we have an unsigned type that is not a sizetype, we canot do\n+\t If we have an unsigned type that is not a sizetype, we cannot do\n \t this since it will change the result if the original computation\n \t overflowed.  */\n       if ((! TREE_UNSIGNED (ctype)"}, {"sha": "d21b3fab81d1011b90f3f7215310e56db028e060", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -2532,7 +2532,7 @@ dead_or_predicable (test_bb, merge_bb, other_bb, new_dest, reversep)\n \t      /* ??? Even non-trapping memories such as stack frame\n \t\t references must be avoided.  For stores, we collect\n \t\t no lifetime info; for reads, we'd have to assert\n-\t\t true_dependance false against every store in the\n+\t\t true_dependence false against every store in the\n \t\t TEST range.  */\n \t      if (for_each_rtx (&PATTERN (insn), find_memory, NULL))\n \t\treturn FALSE;"}, {"sha": "7de721e8f0902e680e9f278fe0038127a1d72fdb", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -79,7 +79,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n static int next_qty;\n \n-/* Information we maitain about each quantity.  */\n+/* Information we maintain about each quantity.  */\n struct qty\n {\n   /* The number of refs to quantity Q.  */"}, {"sha": "4bf4ea7e5e086a4a5594b85bd04909ebc1698f0a", "filename": "gcc/profile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -768,7 +768,7 @@ branch_prob ()\n \t        }\n \t    }\n \t}\n-      /* Emit fake loopback edge for EXIT block to maitain compatibility with\n+      /* Emit fake loopback edge for EXIT block to maintain compatibility with\n          old gcov format.  */\n       __write_long (1, bbg_file, 4);\n       __write_long (0, bbg_file, 4);"}, {"sha": "2836aef11e4bb87f5dafa971c91b390287c5e9e4", "filename": "gcc/sched-int.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -203,7 +203,7 @@ struct haifa_insn_data\n   /* Some insns (e.g. call) are not allowed to move across blocks.  */\n   unsigned int cant_move : 1;\n \n-  /* Set if there's DEF-USE dependance between some speculatively\n+  /* Set if there's DEF-USE dependence between some speculatively\n      moved load insn and this one.  */\n   unsigned int fed_by_spec_load : 1;\n   unsigned int is_load_insn : 1;"}, {"sha": "ad23683f45eb2b253d70496f060cd5be09a0455f", "filename": "gcc/toplev.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5143c46a9cc072c52820b9f903055b153956e77/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=f5143c46a9cc072c52820b9f903055b153956e77", "patch": "@@ -2756,7 +2756,7 @@ rest_of_compilation (decl)\n \t      cleanup_cfg (CLEANUP_PRE_SIBCALL | CLEANUP_PRE_LOOP);\n \t      optimize = saved_optimize;\n \n-\t      /* CFG is no longer maitained up-to-date.  */\n+\t      /* CFG is no longer maintained up-to-date.  */\n \t      free_bb_for_insn ();\n \t    }\n \n@@ -2867,7 +2867,7 @@ rest_of_compilation (decl)\n   find_basic_blocks (insns, max_reg_num (), rtl_dump_file);\n   cleanup_cfg ((optimize ? CLEANUP_EXPENSIVE : 0) | CLEANUP_PRE_LOOP);\n \n-  /* CFG is no longer maitained up-to-date.  */\n+  /* CFG is no longer maintained up-to-date.  */\n   free_bb_for_insn ();\n   copy_loop_headers (insns);\n   purge_line_number_notes (insns);\n@@ -2946,7 +2946,7 @@ rest_of_compilation (decl)\n       timevar_pop (TV_FROM_SSA);\n \n       ggc_collect ();\n-      /* CFG is no longer maitained up-to-date.  */\n+      /* CFG is no longer maintained up-to-date.  */\n       free_bb_for_insn ();\n     }\n \n@@ -2965,7 +2965,7 @@ rest_of_compilation (decl)\n       if_convert (0);\n       timevar_pop (TV_IFCVT);\n \n-      /* CFG is no longer maitained up-to-date.  */\n+      /* CFG is no longer maintained up-to-date.  */\n       free_bb_for_insn ();\n       /* Try to identify useless null pointer tests and delete them.  */\n       if (flag_delete_null_pointer_checks)\n@@ -3016,7 +3016,7 @@ rest_of_compilation (decl)\n \t  find_basic_blocks (insns, max_reg_num (), rtl_dump_file);\n \t  cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_PRE_LOOP);\n \t  timevar_pop (TV_JUMP);\n-\t  /* CFG is no longer maitained up-to-date.  */\n+\t  /* CFG is no longer maintained up-to-date.  */\n \t  free_bb_for_insn ();\n \t}\n \n@@ -3033,7 +3033,7 @@ rest_of_compilation (decl)\n \t  cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_PRE_LOOP);\n \n \t  delete_null_pointer_checks (insns);\n-\t  /* CFG is no longer maitained up-to-date.  */\n+\t  /* CFG is no longer maintained up-to-date.  */\n \t  free_bb_for_insn ();\n \t  timevar_pop (TV_JUMP);\n \t}\n@@ -3073,7 +3073,7 @@ rest_of_compilation (decl)\n       save_cfj = flag_cse_follow_jumps;\n       flag_cse_skip_blocks = flag_cse_follow_jumps = 0;\n \n-      /* CFG is no longer maitained up-to-date.  */\n+      /* CFG is no longer maintained up-to-date.  */\n       free_bb_for_insn ();\n       /* If -fexpensive-optimizations, re-run CSE to clean up things done\n \t by gcse.  */\n@@ -3096,7 +3096,7 @@ rest_of_compilation (decl)\n \t  delete_trivially_dead_insns (insns, max_reg_num (), 0);\n \t  find_basic_blocks (insns, max_reg_num (), rtl_dump_file);\n \t  cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_PRE_LOOP);\n-\t  /* CFG is no longer maitained up-to-date.  */\n+\t  /* CFG is no longer maintained up-to-date.  */\n \t  free_bb_for_insn ();\n \t  timevar_pop (TV_JUMP);\n \n@@ -3185,7 +3185,7 @@ rest_of_compilation (decl)\n \n \t  timevar_pop (TV_JUMP);\n \n-\t  /* CFG is no longer maitained up-to-date.  */\n+\t  /* CFG is no longer maintained up-to-date.  */\n \t  free_bb_for_insn ();\n \t  reg_scan (insns, max_reg_num (), 0);\n \t  tem = cse_main (insns, max_reg_num (), 1, rtl_dump_file);\n@@ -3196,7 +3196,7 @@ rest_of_compilation (decl)\n \t      rebuild_jump_labels (insns);\n \t      find_basic_blocks (insns, max_reg_num (), rtl_dump_file);\n \t      cleanup_cfg (CLEANUP_EXPENSIVE);\n-\t      /* CFG is no longer maitained up-to-date.  */\n+\t      /* CFG is no longer maintained up-to-date.  */\n \t      free_bb_for_insn ();\n \t      timevar_pop (TV_JUMP);\n \t    }\n@@ -3636,7 +3636,7 @@ rest_of_compilation (decl)\n     }\n   compute_alignments ();\n \n-  /* CFG is no longer maitained up-to-date.  */\n+  /* CFG is no longer maintained up-to-date.  */\n   free_bb_for_insn ();\n \n   /* If a machine dependent reorganization is needed, call it.  */"}]}