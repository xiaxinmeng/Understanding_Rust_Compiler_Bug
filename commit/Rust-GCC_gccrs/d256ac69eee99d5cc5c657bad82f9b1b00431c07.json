{"sha": "d256ac69eee99d5cc5c657bad82f9b1b00431c07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI1NmFjNjllZWU5OWQ1Y2M1YzY1N2JhZDgyZjliMWIwMDQzMWMwNw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-08-14T14:26:15Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-08-14T14:26:15Z"}, "message": "strcat.c: New.\n\n\t* gcc.c-torture/execute/builtins/lib/strcat.c: New.\n\t* gcc.c-torture/execute/builtins/string-9-lib.c: New.\n\t* gcc.c-torture/execute/builtins/string-9.c: New, from\n\tstring-opt-9.c.  Adjust for execute/builtins framework.\n\t* gcc.c-torture/execute/string-opt-9.c: Delete.\n\nFrom-SVN: r70435", "tree": {"sha": "35438dbb637a8112bf49b324e3077f7dc3a5d73b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35438dbb637a8112bf49b324e3077f7dc3a5d73b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d256ac69eee99d5cc5c657bad82f9b1b00431c07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d256ac69eee99d5cc5c657bad82f9b1b00431c07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d256ac69eee99d5cc5c657bad82f9b1b00431c07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d256ac69eee99d5cc5c657bad82f9b1b00431c07/comments", "author": null, "committer": null, "parents": [{"sha": "9e46226d997030a197aaff707ce2cd678a6bd0c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e46226d997030a197aaff707ce2cd678a6bd0c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e46226d997030a197aaff707ce2cd678a6bd0c4"}], "stats": {"total": 55, "additions": 40, "deletions": 15}, "files": [{"sha": "e491ea1944e20891f4b676e305751f1ae8b27c97", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256ac69eee99d5cc5c657bad82f9b1b00431c07/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256ac69eee99d5cc5c657bad82f9b1b00431c07/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d256ac69eee99d5cc5c657bad82f9b1b00431c07", "patch": "@@ -1,3 +1,11 @@\n+2003-08-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.c-torture/execute/builtins/lib/strcat.c: New.\n+\t* gcc.c-torture/execute/builtins/string-9-lib.c: New.\n+\t* gcc.c-torture/execute/builtins/string-9.c: New, from\n+\tstring-opt-9.c.  Adjust for execute/builtins framework.\n+\t* gcc.c-torture/execute/string-opt-9.c: Delete.\n+\n 2003-08-12  Mark Mitchell  <mark@codesourcery.com>\n \n \t* g++.dg/init/new8.C: Use __SIZE_TYPE__ to get the type of size_t."}, {"sha": "2cced80f5d7a8f6f5393ec00f5fa89f2f1bed224", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/strcat.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256ac69eee99d5cc5c657bad82f9b1b00431c07/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrcat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256ac69eee99d5cc5c657bad82f9b1b00431c07/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrcat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrcat.c?ref=d256ac69eee99d5cc5c657bad82f9b1b00431c07", "patch": "@@ -0,0 +1,19 @@\n+extern int inside_main;\n+extern void abort(void);\n+\n+char *\n+strcat (char *dst, const char *src)\n+{\n+  char *p = dst;\n+  \n+#ifdef __OPTIMIZE__\n+  if (inside_main)\n+    abort ();\n+#endif\n+\n+  while (*p)\n+    p++;\n+  while ((*p++ = *src++))\n+    ;\n+  return dst;\n+}"}, {"sha": "0a0bbb8865a1952b64ba55e3baa7786ac5c47c27", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-9-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256ac69eee99d5cc5c657bad82f9b1b00431c07/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-9-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256ac69eee99d5cc5c657bad82f9b1b00431c07/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-9-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-9-lib.c?ref=d256ac69eee99d5cc5c657bad82f9b1b00431c07", "patch": "@@ -0,0 +1 @@\n+#include \"lib/strcat.c\""}, {"sha": "ba70c397724a60756459020a72dd07f971822970", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-9.c", "status": "renamed", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d256ac69eee99d5cc5c657bad82f9b1b00431c07/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d256ac69eee99d5cc5c657bad82f9b1b00431c07/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-9.c?ref=d256ac69eee99d5cc5c657bad82f9b1b00431c07", "patch": "@@ -5,6 +5,7 @@\n \n    Written by Kaveh R. Ghazi, 11/27/2000.  */\n \n+extern int inside_main;\n extern void abort (void);\n typedef __SIZE_TYPE__ size_t;\n extern char *strcat (char *, const char *);\n@@ -15,7 +16,7 @@ extern int memcmp (const void *, const void *, size_t);\n #define RESET_DST_WITH(FILLER) \\\n   do { memset (dst, 'X', sizeof (dst)); strcpy (dst, (FILLER)); } while (0)\n \n-int main ()\n+void main_test (void)\n {\n   const char *const s1 = \"hello world\";\n   const char *const s2 = \"\";\n@@ -38,6 +39,13 @@ int main ()\n     abort();\n \n #ifndef __OPTIMIZE_SIZE__\n+# if !defined __i386__ && !defined __x86_64__\n+  /* The functions below might not be optimized into direct stores on all\n+     arches.  It depends on how many instructions would be generated and\n+     what limits the architecture chooses in STORE_BY_PIECES_P.  */\n+  inside_main = 0;\n+# endif\n+\n   RESET_DST_WITH (s1);\n   if (strcat (dst, \" 1111\") != dst\n       || memcmp (dst, \"hello world 1111\\0XXX\", 20))\n@@ -58,25 +66,14 @@ int main ()\n \t\t\t\t  \"is \"), \"a \"), \"test\"), \".\");\n   if (memcmp (dst, \"hello world: this is a test.\\0X\", 30))\n     abort();\n+\n+  /* Set inside_main again.  */\n+  inside_main = 1;\n #endif\n \n   /* Test at least one instance of the __builtin_ style.  We do this\n      to ensure that it works and that the prototype is correct.  */\n   RESET_DST_WITH (s1);\n   if (__builtin_strcat (dst, \"\") != dst || strcmp (dst, s1))\n     abort();\n-\n-  return 0;\n }\n-\n-#ifdef __OPTIMIZE__\n-/* When optimizing, all the above cases should be transformed into\n-   something else.  So any remaining calls to the original function\n-   should abort.  */\n-__attribute__ ((noinline))\n-static char *\n-strcat (char *s1, const char *s2)\n-{\n-  abort();\n-}\n-#endif", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-9.c"}]}