{"sha": "0645c1a22d29fcbe12ee8f774709b20b1bc3f594", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY0NWMxYTIyZDI5ZmNiZTEyZWU4Zjc3NDcwOWIyMGIxYmMzZjU5NA==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2013-10-17T17:41:07Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2013-10-17T17:41:07Z"}, "message": "tree-flow.h (struct omp_region): Move to omp-low.c.\n\n\t* tree-flow.h (struct omp_region): Move to omp-low.c.\n\tRemove omp_ prototypes and variables.\n\t* gimple.h (omp_reduction_init): Move prototype to omp-low.h.\n\t(copy_var_decl): Relocate prototype from tree-flow.h.\n\t* gimple.c (copy_var_decl): Relocate from omp-low.c.\n\t* tree.h: Move prototype to omp-low.h.\n\t* omp-low.h: New File.  Relocate prototypes here.\n\t* omp-low.c (struct omp_region): Make local here.\n\t(root_omp_region): Make static.\n\t(copy_var_decl) Move to gimple.c.\n\t(new_omp_region): Make static.\n\t(make_gimple_omp_edges): New.  Refactored from tree-cfg.c make_edges.\n\t* tree-cfg.c: Include omp-low.h.\n\t(make_edges): Factor out OMP specific bits to make_gimple_omp_edges.\n\t* gimplify.c: Include omp-low.h.\n\t* tree-parloops.c: Likewise.\n\n\tc\n\t* c-parser.c: Include omp-low.h.\n\t* c-typeck.c: Likewise.\n\n\tcp\n\t* parser.c: Include omp-low.h.\n\t* semantics.c: Likewise.\n\n\tfortran\n\t* trans-openmp.c: Include omp-low.h.\n\nFrom-SVN: r203786", "tree": {"sha": "7581ded8e73540ef06a21726e484e189f067777a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7581ded8e73540ef06a21726e484e189f067777a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0645c1a22d29fcbe12ee8f774709b20b1bc3f594", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0645c1a22d29fcbe12ee8f774709b20b1bc3f594", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0645c1a22d29fcbe12ee8f774709b20b1bc3f594", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/comments", "author": null, "committer": null, "parents": [{"sha": "6f1abb55073c46b93155e13eb5308aee7f13dd5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f1abb55073c46b93155e13eb5308aee7f13dd5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f1abb55073c46b93155e13eb5308aee7f13dd5e"}], "stats": {"total": 424, "additions": 254, "deletions": 170}, "files": [{"sha": "2e1db73c24a8047f7ed5298b70abc323244b725c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0645c1a22d29fcbe12ee8f774709b20b1bc3f594", "patch": "@@ -1,3 +1,22 @@\n+2013-10-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* tree-flow.h (struct omp_region): Move to omp-low.c.\n+\tRemove omp_ prototypes and variables.\n+\t* gimple.h (omp_reduction_init): Move prototype to omp-low.h.\n+\t(copy_var_decl): Relocate prototype from tree-flow.h.\n+\t* gimple.c (copy_var_decl): Relocate from omp-low.c.\n+\t* tree.h: Move prototype to omp-low.h.\n+\t* omp-low.h: New File.  Relocate prototypes here.\n+\t* omp-low.c (struct omp_region): Make local here.\n+\t(root_omp_region): Make static.\n+\t(copy_var_decl) Move to gimple.c.\n+\t(new_omp_region): Make static.\n+\t(make_gimple_omp_edges): New.  Refactored from tree-cfg.c make_edges.\n+\t* tree-cfg.c: Include omp-low.h.\n+\t(make_edges): Factor out OMP specific bits to make_gimple_omp_edges.\n+\t* gimplify.c: Include omp-low.h.\n+\t* tree-parloops.c: Likewise.\n+\n 2013-10-17  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (ix86_fixup_binary_operands): When both source"}, {"sha": "0e2409aa18236b74dc7bb74e2b2319b1d1618081", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=0645c1a22d29fcbe12ee8f774709b20b1bc3f594", "patch": "@@ -1,3 +1,8 @@\n+2013-10-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* c-parser.c: Include omp-low.h.\n+\t* c-typeck.c: Likewise.\n+\n 2013-10-17  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/58267"}, {"sha": "9b6abe0e95ef5d51f37047bc66e0f25e05313990", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=0645c1a22d29fcbe12ee8f774709b20b1bc3f594", "patch": "@@ -55,6 +55,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"cgraph.h\"\n #include \"plugin.h\"\n+#include \"omp-low.h\"\n \n \f\n /* Initialization routine for this file.  */"}, {"sha": "1d83137cd3f65af6e9e1280666c9dc78cf142bb1", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=0645c1a22d29fcbe12ee8f774709b20b1bc3f594", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"bitmap.h\"\n #include \"gimple.h\"\n #include \"tree-inline.h\"\n+#include \"omp-low.h\"\n #include \"c-family/c-objc.h\"\n #include \"c-family/c-common.h\"\n #include \"c-family/c-ubsan.h\""}, {"sha": "4a5043a5f5bdfd2c6d00cf16267cda400507c240", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0645c1a22d29fcbe12ee8f774709b20b1bc3f594", "patch": "@@ -1,3 +1,8 @@\n+2013-10-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* parser.c: Include omp-low.h.\n+\t* semantics.c: Likewise.\n+\n 2013-10-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58596"}, {"sha": "54520b414e7874e6da8fcc5f547024be3bd138c7", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=0645c1a22d29fcbe12ee8f774709b20b1bc3f594", "patch": "@@ -39,6 +39,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pretty-print.h\"\n #include \"parser.h\"\n #include \"type-utils.h\"\n+#include \"omp-low.h\"\n \n \f\n /* The lexer.  */"}, {"sha": "e56052d4fda3c987a1b84242e9b41e1f6aa388be", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0645c1a22d29fcbe12ee8f774709b20b1bc3f594", "patch": "@@ -44,6 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple.h\"\n #include \"bitmap.h\"\n #include \"hash-table.h\"\n+#include \"omp-low.h\"\n \n static bool verify_constant (tree, bool, bool *, bool *);\n #define VERIFY_CONSTANT(X)\t\t\t\t\t\t\\"}, {"sha": "067d1fdca5ba24f5f1ba2879bb925a5cd9e8a7a5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0645c1a22d29fcbe12ee8f774709b20b1bc3f594", "patch": "@@ -1,3 +1,7 @@\n+2013-10-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* trans-openmp.c: Include omp-low.h.\n+\n 2013-10-16  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/58652"}, {"sha": "bf282498eab6dae4ce552a6a6981dfedc995804f", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=0645c1a22d29fcbe12ee8f774709b20b1bc3f594", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"trans-array.h\"\n #include \"trans-const.h\"\n #include \"arith.h\"\n+#include \"omp-low.h\"\n \n int ompws_flags;\n "}, {"sha": "573dbb1fc5bb14150d9c9723100e0e9d2cc873e3", "filename": "gcc/gimple.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=0645c1a22d29fcbe12ee8f774709b20b1bc3f594", "patch": "@@ -4063,3 +4063,24 @@ nonfreeing_call_p (gimple call)\n \n   return false;\n }\n+\n+/* Create a new VAR_DECL and copy information from VAR to it.  */\n+\n+tree\n+copy_var_decl (tree var, tree name, tree type)\n+{\n+  tree copy = build_decl (DECL_SOURCE_LOCATION (var), VAR_DECL, name, type);\n+\n+  TREE_ADDRESSABLE (copy) = TREE_ADDRESSABLE (var);\n+  TREE_THIS_VOLATILE (copy) = TREE_THIS_VOLATILE (var);\n+  DECL_GIMPLE_REG_P (copy) = DECL_GIMPLE_REG_P (var);\n+  DECL_ARTIFICIAL (copy) = DECL_ARTIFICIAL (var);\n+  DECL_IGNORED_P (copy) = DECL_IGNORED_P (var);\n+  DECL_CONTEXT (copy) = DECL_CONTEXT (var);\n+  TREE_NO_WARNING (copy) = TREE_NO_WARNING (var);\n+  TREE_USED (copy) = 1;\n+  DECL_SEEN_IN_BIND_EXPR_P (copy) = 1;\n+  DECL_ATTRIBUTES (copy) = DECL_ATTRIBUTES (var);\n+\n+  return copy;\n+}"}, {"sha": "ea7858e45247b04c08f05a245f11b7e0f1816949", "filename": "gcc/gimple.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=0645c1a22d29fcbe12ee8f774709b20b1bc3f594", "patch": "@@ -1086,9 +1086,7 @@ extern tree canonicalize_cond_expr_cond (tree);\n extern void dump_decl_set (FILE *, bitmap);\n extern bool gimple_can_coalesce_p (tree, tree);\n extern bool nonfreeing_call_p (gimple);\n-\n-/* In omp-low.c.  */\n-extern tree omp_reduction_init (tree, tree);\n+extern tree copy_var_decl (tree, tree, tree);\n \n /* In trans-mem.c.  */\n extern void diagnose_tm_safe_errors (tree);"}, {"sha": "a67f1a3746ec2ae2a6bcb3f10c9704b86b0ad6f7", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=0645c1a22d29fcbe12ee8f774709b20b1bc3f594", "patch": "@@ -42,6 +42,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"pointer-set.h\"\n #include \"splay-tree.h\"\n #include \"vec.h\"\n+#include \"omp-low.h\"\n \n #include \"langhooks-def.h\"\t/* FIXME: for lhd_set_decl_assembler_name */\n #include \"tree-pass.h\"\t\t/* FIXME: only for PROP_gimple_any */"}, {"sha": "208f20c407de0f695904a051f67c7050490fc774", "filename": "gcc/omp-low.c", "status": "modified", "additions": 157, "deletions": 23, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=0645c1a22d29fcbe12ee8f774709b20b1bc3f594", "patch": "@@ -43,6 +43,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"optabs.h\"\n #include \"cfgloop.h\"\n #include \"target.h\"\n+#include \"omp-low.h\"\n \n \n /* Lowering of OpenMP parallel and workshare constructs proceeds in two\n@@ -56,6 +57,45 @@ along with GCC; see the file COPYING3.  If not see\n    scanned for parallel regions which are then moved to a new\n    function, to be invoked by the thread library.  */\n \n+/* Parallel region information.  Every parallel and workshare\n+   directive is enclosed between two markers, the OMP_* directive\n+   and a corresponding OMP_RETURN statement.  */\n+\n+struct omp_region\n+{\n+  /* The enclosing region.  */\n+  struct omp_region *outer;\n+\n+  /* First child region.  */\n+  struct omp_region *inner;\n+\n+  /* Next peer region.  */\n+  struct omp_region *next;\n+\n+  /* Block containing the omp directive as its last stmt.  */\n+  basic_block entry;\n+\n+  /* Block containing the OMP_RETURN as its last stmt.  */\n+  basic_block exit;\n+\n+  /* Block containing the OMP_CONTINUE as its last stmt.  */\n+  basic_block cont;\n+\n+  /* If this is a combined parallel+workshare region, this is a list\n+     of additional arguments needed by the combined parallel+workshare\n+     library call.  */\n+  vec<tree, va_gc> *ws_args;\n+\n+  /* The code for the omp directive of this region.  */\n+  enum gimple_code type;\n+\n+  /* Schedule kind, only used for OMP_FOR type regions.  */\n+  enum omp_clause_schedule_kind sched_kind;\n+\n+  /* True if this is a combined parallel+workshare region.  */\n+  bool is_combined_parallel;\n+};\n+\n /* Context structure.  Used to store information about each parallel\n    directive in the code.  */\n \n@@ -135,7 +175,7 @@ struct omp_for_data\n static splay_tree all_contexts;\n static int taskreg_nesting_level;\n static int target_nesting_level;\n-struct omp_region *root_omp_region;\n+static struct omp_region *root_omp_region;\n static bitmap task_shared_vars;\n \n static void scan_omp (gimple_seq *, omp_context *);\n@@ -872,27 +912,6 @@ use_pointer_for_field (tree decl, omp_context *shared_ctx)\n   return false;\n }\n \n-/* Create a new VAR_DECL and copy information from VAR to it.  */\n-\n-tree\n-copy_var_decl (tree var, tree name, tree type)\n-{\n-  tree copy = build_decl (DECL_SOURCE_LOCATION (var), VAR_DECL, name, type);\n-\n-  TREE_ADDRESSABLE (copy) = TREE_ADDRESSABLE (var);\n-  TREE_THIS_VOLATILE (copy) = TREE_THIS_VOLATILE (var);\n-  DECL_GIMPLE_REG_P (copy) = DECL_GIMPLE_REG_P (var);\n-  DECL_ARTIFICIAL (copy) = DECL_ARTIFICIAL (var);\n-  DECL_IGNORED_P (copy) = DECL_IGNORED_P (var);\n-  DECL_CONTEXT (copy) = DECL_CONTEXT (var);\n-  TREE_NO_WARNING (copy) = TREE_NO_WARNING (var);\n-  TREE_USED (copy) = 1;\n-  DECL_SEEN_IN_BIND_EXPR_P (copy) = 1;\n-  DECL_ATTRIBUTES (copy) = DECL_ATTRIBUTES (var);\n-\n-  return copy;\n-}\n-\n /* Construct a new automatic decl similar to VAR.  */\n \n static tree\n@@ -1219,7 +1238,7 @@ debug_all_omp_regions (void)\n \n /* Create a new parallel region starting at STMT inside region PARENT.  */\n \n-struct omp_region *\n+static struct omp_region *\n new_omp_region (basic_block bb, enum gimple_code type,\n \t\tstruct omp_region *parent)\n {\n@@ -10312,6 +10331,121 @@ diagnose_sb_2 (gimple_stmt_iterator *gsi_p, bool *handled_ops_p,\n   return NULL_TREE;\n }\n \n+/* Called from tree-cfg.c::make_edges to create cfg edges for all GIMPLE_OMP\n+   codes.  */\n+bool\n+make_gimple_omp_edges (basic_block bb, struct omp_region **region)\n+{\n+  gimple last = last_stmt (bb);\n+  enum gimple_code code = gimple_code (last);\n+  struct omp_region *cur_region = *region;\n+  bool fallthru = false;\n+\n+  switch (code)\n+    {\n+    case GIMPLE_OMP_PARALLEL:\n+    case GIMPLE_OMP_TASK:\n+    case GIMPLE_OMP_FOR:\n+    case GIMPLE_OMP_SINGLE:\n+    case GIMPLE_OMP_TEAMS:\n+    case GIMPLE_OMP_MASTER:\n+    case GIMPLE_OMP_TASKGROUP:\n+    case GIMPLE_OMP_ORDERED:\n+    case GIMPLE_OMP_CRITICAL:\n+    case GIMPLE_OMP_SECTION:\n+      cur_region = new_omp_region (bb, code, cur_region);\n+      fallthru = true;\n+      break;\n+\n+    case GIMPLE_OMP_TARGET:\n+      cur_region = new_omp_region (bb, code, cur_region);\n+      fallthru = true;\n+      if (gimple_omp_target_kind (last) == GF_OMP_TARGET_KIND_UPDATE)\n+\tcur_region = cur_region->outer;\n+      break;\n+\n+    case GIMPLE_OMP_SECTIONS:\n+      cur_region = new_omp_region (bb, code, cur_region);\n+      fallthru = true;\n+      break;\n+\n+    case GIMPLE_OMP_SECTIONS_SWITCH:\n+      fallthru = false;\n+      break;\n+\n+    case GIMPLE_OMP_ATOMIC_LOAD:\n+    case GIMPLE_OMP_ATOMIC_STORE:\n+       fallthru = true;\n+       break;\n+\n+    case GIMPLE_OMP_RETURN:\n+      /* In the case of a GIMPLE_OMP_SECTION, the edge will go\n+\t somewhere other than the next block.  This will be\n+\t created later.  */\n+      cur_region->exit = bb;\n+      fallthru = cur_region->type != GIMPLE_OMP_SECTION;\n+      cur_region = cur_region->outer;\n+      break;\n+\n+    case GIMPLE_OMP_CONTINUE:\n+      cur_region->cont = bb;\n+      switch (cur_region->type)\n+\t{\n+\tcase GIMPLE_OMP_FOR:\n+\t  /* Mark all GIMPLE_OMP_FOR and GIMPLE_OMP_CONTINUE\n+\t     succs edges as abnormal to prevent splitting\n+\t     them.  */\n+\t  single_succ_edge (cur_region->entry)->flags |= EDGE_ABNORMAL;\n+\t  /* Make the loopback edge.  */\n+\t  make_edge (bb, single_succ (cur_region->entry),\n+\t\t     EDGE_ABNORMAL);\n+\n+\t  /* Create an edge from GIMPLE_OMP_FOR to exit, which\n+\t     corresponds to the case that the body of the loop\n+\t     is not executed at all.  */\n+\t  make_edge (cur_region->entry, bb->next_bb, EDGE_ABNORMAL);\n+\t  make_edge (bb, bb->next_bb, EDGE_FALLTHRU | EDGE_ABNORMAL);\n+\t  fallthru = false;\n+\t  break;\n+\n+\tcase GIMPLE_OMP_SECTIONS:\n+\t  /* Wire up the edges into and out of the nested sections.  */\n+\t  {\n+\t    basic_block switch_bb = single_succ (cur_region->entry);\n+\n+\t    struct omp_region *i;\n+\t    for (i = cur_region->inner; i ; i = i->next)\n+\t      {\n+\t\tgcc_assert (i->type == GIMPLE_OMP_SECTION);\n+\t\tmake_edge (switch_bb, i->entry, 0);\n+\t\tmake_edge (i->exit, bb, EDGE_FALLTHRU);\n+\t      }\n+\n+\t    /* Make the loopback edge to the block with\n+\t       GIMPLE_OMP_SECTIONS_SWITCH.  */\n+\t    make_edge (bb, switch_bb, 0);\n+\n+\t    /* Make the edge from the switch to exit.  */\n+\t    make_edge (switch_bb, bb->next_bb, 0);\n+\t    fallthru = false;\n+\t  }\n+\t  break;\n+\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  if (*region != cur_region)\n+    *region = cur_region;\n+\n+  return fallthru;\n+}\n+\n static unsigned int\n diagnose_omp_structured_block_errors (void)\n {"}, {"sha": "6b5a2ff304d8dc7b49c2ca43192fa5b33bf75534", "filename": "gcc/omp-low.h", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Fomp-low.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Fomp-low.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.h?ref=0645c1a22d29fcbe12ee8f774709b20b1bc3f594", "patch": "@@ -0,0 +1,31 @@\n+/* Header file for openMP lowering directives.\n+   Copyright (C) 2013 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_OMP_LOW_H\n+#define GCC_OMP_LOW_H\n+\n+struct omp_region;\n+\n+extern tree find_omp_clause (tree, enum omp_clause_code);\n+extern void omp_expand_local (basic_block);\n+extern void free_omp_regions (void);\n+extern tree omp_reduction_init (tree, tree);\n+extern bool make_gimple_omp_edges (basic_block, struct omp_region **);\n+\n+#endif /* GCC_OMP_LOW_H */"}, {"sha": "9268615395abbd6a0c0cb8555d8cf6524850d567", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 4, "deletions": 93, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=0645c1a22d29fcbe12ee8f774709b20b1bc3f594", "patch": "@@ -42,6 +42,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-inline.h\"\n #include \"target.h\"\n #include \"tree-ssa-live.h\"\n+#include \"omp-low.h\"\n \n /* This file contains functions for building the Control Flow Graph (CFG)\n    for a function tree.  */\n@@ -607,97 +608,8 @@ make_edges (void)\n \t      fallthru = true;\n \t      break;\n \n-\t    case GIMPLE_OMP_PARALLEL:\n-\t    case GIMPLE_OMP_TASK:\n-\t    case GIMPLE_OMP_FOR:\n-\t    case GIMPLE_OMP_SINGLE:\n-\t    case GIMPLE_OMP_TEAMS:\n-\t    case GIMPLE_OMP_MASTER:\n-\t    case GIMPLE_OMP_TASKGROUP:\n-\t    case GIMPLE_OMP_ORDERED:\n-\t    case GIMPLE_OMP_CRITICAL:\n-\t    case GIMPLE_OMP_SECTION:\n-\t      cur_region = new_omp_region (bb, code, cur_region);\n-\t      fallthru = true;\n-\t      break;\n-\n-\t    case GIMPLE_OMP_TARGET:\n-\t      cur_region = new_omp_region (bb, code, cur_region);\n-\t      fallthru = true;\n-\t      if (gimple_omp_target_kind (last) == GF_OMP_TARGET_KIND_UPDATE)\n-\t\tcur_region = cur_region->outer;\n-\t      break;\n-\n-\t    case GIMPLE_OMP_SECTIONS:\n-\t      cur_region = new_omp_region (bb, code, cur_region);\n-\t      fallthru = true;\n-\t      break;\n-\n-\t    case GIMPLE_OMP_SECTIONS_SWITCH:\n-\t      fallthru = false;\n-\t      break;\n-\n-            case GIMPLE_OMP_ATOMIC_LOAD:\n-            case GIMPLE_OMP_ATOMIC_STORE:\n-               fallthru = true;\n-               break;\n-\n-\t    case GIMPLE_OMP_RETURN:\n-\t      /* In the case of a GIMPLE_OMP_SECTION, the edge will go\n-\t\t somewhere other than the next block.  This will be\n-\t\t created later.  */\n-\t      cur_region->exit = bb;\n-\t      fallthru = cur_region->type != GIMPLE_OMP_SECTION;\n-\t      cur_region = cur_region->outer;\n-\t      break;\n-\n-\t    case GIMPLE_OMP_CONTINUE:\n-\t      cur_region->cont = bb;\n-\t      switch (cur_region->type)\n-\t\t{\n-\t\tcase GIMPLE_OMP_FOR:\n-\t\t  /* Mark all GIMPLE_OMP_FOR and GIMPLE_OMP_CONTINUE\n-\t\t     succs edges as abnormal to prevent splitting\n-\t\t     them.  */\n-\t\t  single_succ_edge (cur_region->entry)->flags |= EDGE_ABNORMAL;\n-\t\t  /* Make the loopback edge.  */\n-\t\t  make_edge (bb, single_succ (cur_region->entry),\n-\t\t\t     EDGE_ABNORMAL);\n-\n-\t\t  /* Create an edge from GIMPLE_OMP_FOR to exit, which\n-\t\t     corresponds to the case that the body of the loop\n-\t\t     is not executed at all.  */\n-\t\t  make_edge (cur_region->entry, bb->next_bb, EDGE_ABNORMAL);\n-\t\t  make_edge (bb, bb->next_bb, EDGE_FALLTHRU | EDGE_ABNORMAL);\n-\t\t  fallthru = false;\n-\t\t  break;\n-\n-\t\tcase GIMPLE_OMP_SECTIONS:\n-\t\t  /* Wire up the edges into and out of the nested sections.  */\n-\t\t  {\n-\t\t    basic_block switch_bb = single_succ (cur_region->entry);\n-\n-\t\t    struct omp_region *i;\n-\t\t    for (i = cur_region->inner; i ; i = i->next)\n-\t\t      {\n-\t\t\tgcc_assert (i->type == GIMPLE_OMP_SECTION);\n-\t\t\tmake_edge (switch_bb, i->entry, 0);\n-\t\t\tmake_edge (i->exit, bb, EDGE_FALLTHRU);\n-\t\t      }\n-\n-\t\t    /* Make the loopback edge to the block with\n-\t\t       GIMPLE_OMP_SECTIONS_SWITCH.  */\n-\t\t    make_edge (bb, switch_bb, 0);\n-\n-\t\t    /* Make the edge from the switch to exit.  */\n-\t\t    make_edge (switch_bb, bb->next_bb, 0);\n-\t\t    fallthru = false;\n-\t\t  }\n-\t\t  break;\n-\n-\t\tdefault:\n-\t\t  gcc_unreachable ();\n-\t\t}\n+\t    CASE_GIMPLE_OMP:\n+\t      fallthru = make_gimple_omp_edges (bb, &cur_region);\n \t      break;\n \n \t    case GIMPLE_TRANSACTION:\n@@ -721,8 +633,7 @@ make_edges (void)\n \tmake_edge (bb, bb->next_bb, EDGE_FALLTHRU);\n     }\n \n-  if (root_omp_region)\n-    free_omp_regions ();\n+  free_omp_regions ();\n \n   /* Fold COND_EXPR_COND of each COND_EXPR.  */\n   fold_cond_expr_cond ();"}, {"sha": "d849c2944bc5e90060e3ceee4f7626c94e396eca", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=0645c1a22d29fcbe12ee8f774709b20b1bc3f594", "patch": "@@ -37,56 +37,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-into-ssa.h\"\n #include \"tree-ssa-loop.h\"\n \n-/*---------------------------------------------------------------------------\n-\t\t\t      OpenMP Region Tree\n----------------------------------------------------------------------------*/\n-\n-/* Parallel region information.  Every parallel and workshare\n-   directive is enclosed between two markers, the OMP_* directive\n-   and a corresponding OMP_RETURN statement.  */\n-\n-struct omp_region\n-{\n-  /* The enclosing region.  */\n-  struct omp_region *outer;\n-\n-  /* First child region.  */\n-  struct omp_region *inner;\n-\n-  /* Next peer region.  */\n-  struct omp_region *next;\n-\n-  /* Block containing the omp directive as its last stmt.  */\n-  basic_block entry;\n-\n-  /* Block containing the OMP_RETURN as its last stmt.  */\n-  basic_block exit;\n-\n-  /* Block containing the OMP_CONTINUE as its last stmt.  */\n-  basic_block cont;\n-\n-  /* If this is a combined parallel+workshare region, this is a list\n-     of additional arguments needed by the combined parallel+workshare\n-     library call.  */\n-  vec<tree, va_gc> *ws_args;\n-\n-  /* The code for the omp directive of this region.  */\n-  enum gimple_code type;\n-\n-  /* Schedule kind, only used for OMP_FOR type regions.  */\n-  enum omp_clause_schedule_kind sched_kind;\n-\n-  /* True if this is a combined parallel+workshare region.  */\n-  bool is_combined_parallel;\n-};\n-\n-extern struct omp_region *root_omp_region;\n-extern struct omp_region *new_omp_region (basic_block, enum gimple_code,\n-\t\t\t\t\t  struct omp_region *);\n-extern void free_omp_regions (void);\n-void omp_expand_local (basic_block);\n-tree copy_var_decl (tree, tree, tree);\n-\n /* Location to track pending stmt for edge insertion.  */\n #define PENDING_STMT(e)\t((e)->insns.g)\n "}, {"sha": "cdef5c62fbed7ca9f38810b18cf71b90e2a0f1a5", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=0645c1a22d29fcbe12ee8f774709b20b1bc3f594", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-vectorizer.h\"\n #include \"tree-hasher.h\"\n #include \"tree-parloops.h\"\n+#include \"omp-low.h\"\n \n /* This pass tries to distribute iterations of loops into several threads.\n    The implementation is straightforward -- for each loop we test whether its"}, {"sha": "2f4514d6a74417c92a726419424b042085d4921b", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0645c1a22d29fcbe12ee8f774709b20b1bc3f594/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=0645c1a22d29fcbe12ee8f774709b20b1bc3f594", "patch": "@@ -3553,7 +3553,6 @@ extern tree build_translation_unit_decl (tree);\n extern tree build_block (tree, tree, tree, tree);\n extern tree build_empty_stmt (location_t);\n extern tree build_omp_clause (location_t, enum omp_clause_code);\n-extern tree find_omp_clause (tree, enum omp_clause_code);\n \n extern tree build_vl_exp_stat (enum tree_code, int MEM_STAT_DECL);\n #define build_vl_exp(c, n) build_vl_exp_stat (c, n MEM_STAT_INFO)"}]}