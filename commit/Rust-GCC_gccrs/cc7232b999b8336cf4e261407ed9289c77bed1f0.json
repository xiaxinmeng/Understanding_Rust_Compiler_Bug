{"sha": "cc7232b999b8336cf4e261407ed9289c77bed1f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M3MjMyYjk5OWI4MzM2Y2Y0ZTI2MTQwN2VkOTI4OWM3N2JlZDFmMA==", "commit": {"author": {"name": "Jojo", "email": "jijie_rong@c-sky.com", "date": "2018-08-17T19:03:27Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2018-08-17T19:03:27Z"}, "message": "C-SKY port: Backend implementation\n\n2018-08-17  Jojo  <jijie_rong@c-sky.com>\n\t    Huibin Wang  <huibin_wang@c-sky.com>\n\t    Sandra Loosemore  <sandra@codesourcery.com>\n\t    Chung-Lin Tang  <cltang@codesourcery.com>\n\n\tC-SKY port: Backend implementation\n\n\tgcc/\n\t* config/csky/*: New.\n\t* common/config/csky/*: New.\n\nCo-Authored-By: Chung-Lin Tang <cltang@codesourcery.com>\nCo-Authored-By: Huibin Wang <huibin_wang@c-sky.com>\nCo-Authored-By: Sandra Loosemore <sandra@codesourcery.com>\n\nFrom-SVN: r263628", "tree": {"sha": "f6bfad5bda50f31f3a8ae03d5b0d59285370c601", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6bfad5bda50f31f3a8ae03d5b0d59285370c601"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc7232b999b8336cf4e261407ed9289c77bed1f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc7232b999b8336cf4e261407ed9289c77bed1f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc7232b999b8336cf4e261407ed9289c77bed1f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc7232b999b8336cf4e261407ed9289c77bed1f0/comments", "author": null, "committer": null, "parents": [{"sha": "56856b587e08ccf096756327adc59a5b1f2ae3af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56856b587e08ccf096756327adc59a5b1f2ae3af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56856b587e08ccf096756327adc59a5b1f2ae3af"}], "stats": {"total": 14577, "additions": 14577, "deletions": 0}, "files": [{"sha": "7b8ce71836315ddbefb1504f35e938a552a0244f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0", "patch": "@@ -1,3 +1,13 @@\n+2018-08-17  Jojo  <jijie_rong@c-sky.com>\n+\t    Huibin Wang  <huibin_wang@c-sky.com>\n+\t    Sandra Loosemore  <sandra@codesourcery.com>\n+\t    Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\tC-SKY port: Backend implementation\n+\n+\t* config/csky/*: New.\n+\t* common/config/csky/*: New.\n+\n 2018-08-17  Jojo  <jijie_rong@c-sky.com>\n \t    Huibin Wang  <huibin_wang@c-sky.com>\n \t    Sandra Loosemore  <sandra@codesourcery.com>"}, {"sha": "39095bf25812b5ed5b647b92d3e5cd2fcf955e27", "filename": "gcc/common/config/csky/csky-common.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fcommon%2Fconfig%2Fcsky%2Fcsky-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fcommon%2Fconfig%2Fcsky%2Fcsky-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fcsky%2Fcsky-common.c?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0", "patch": "@@ -0,0 +1,42 @@\n+/* Common hooks for CSKY.\n+   Copyright (C) 2018 Free Software Foundation, Inc.\n+   Contributed by C-SKY Microsystems and Mentor Graphics.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"common/common-target.h\"\n+#include \"common/common-target-def.h\"\n+\n+/* Set default optimization options.  */\n+static const struct default_options csky_option_optimization_table[] =\n+  {\n+    /* Enable section anchors by default at -O1 or higher.  */\n+    { OPT_LEVELS_1_PLUS, OPT_fsection_anchors, NULL, 1 },\n+    { OPT_LEVELS_NONE, 0, NULL, 0 }\n+  };\n+\n+#undef  TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n+\n+#undef  TARGET_OPTION_OPTIMIZATION_TABLE\n+#define TARGET_OPTION_OPTIMIZATION_TABLE csky_option_optimization_table\n+\n+struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "e08f7f8bde305db9831186561def60325d8930a7", "filename": "gcc/config/csky/constraints.md", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fconstraints.md?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0", "patch": "@@ -0,0 +1,174 @@\n+;; Constraints for C-SKY.\n+;; Copyright (C) 2018 Free Software Foundation, Inc.\n+;; Contributed by C-SKY Microsystems and Mentor Graphics.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but\n+;; WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+;; General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.  */\n+\n+;; Register constraints.\n+\n+(define_register_constraint \"a\" \"MINI_REGS\" \"r0 - r7\")\n+(define_register_constraint \"b\" \"LOW_REGS\"  \"r0 - r15\")\n+(define_register_constraint \"c\" \"C_REGS\" \"C register\")\n+(define_register_constraint \"y\" \"HILO_REGS\" \"HI and LO registers\")\n+(define_register_constraint \"l\" \"LO_REGS\" \"LO register\")\n+(define_register_constraint \"h\" \"HI_REGS\" \"HI register\")\n+(define_register_constraint \"v\" \"V_REGS\" \"vector registers\")\n+(define_register_constraint \"z\" \"SP_REGS\" \"SP register\")\n+\n+\n+;; Memory and misc constraints.\n+\n+(define_memory_constraint \"Q\"\n+  \"Memory operands with base register, index register and short displacement for FPUV2\"\n+  (match_test \"csky_valid_fpuv2_mem_operand (op)\"))\n+\n+(define_constraint \"R\"\n+  \"Memory operands whose address is a label_ref\"\n+  (and (match_code \"mem\")\n+       (match_test \"GET_CODE (XEXP (op, 0)) == LABEL_REF\")))\n+\n+(define_constraint \"S\"\n+  \"Symbol reference with optional offset\"\n+  (match_test \"csky_symbolic_address_p (op)\"))\n+\n+\n+;; Constant integer constraints.\n+\n+(define_constraint \"I\"\n+  \"Constant in range [0, 65535]\"\n+  (and (match_code \"const_int\")\n+       (match_test \"CSKY_CONST_OK_FOR_I (ival)\")))\n+\n+(define_constraint \"J\"\n+  \"Constant in range [1, 32]\"\n+  (and (match_code \"const_int\")\n+       (match_test \"CSKY_CONST_OK_FOR_J (ival)\")))\n+\n+(define_constraint \"K\"\n+  \"Constant in range [0, 31]\"\n+  (and (match_code \"const_int\")\n+       (match_test \"CSKY_CONST_OK_FOR_K (ival)\")))\n+\n+(define_constraint \"L\"\n+  \"Constant in range [1, 8]\"\n+  (and (match_code \"const_int\")\n+       (match_test \"CSKY_CONST_OK_FOR_L (ival)\")))\n+\n+(define_constraint \"M\"\n+  \"Constant in range [1, 4096]\"\n+  (and (match_code \"const_int\")\n+       (match_test \"CSKY_CONST_OK_FOR_M (ival)\")))\n+\n+(define_constraint \"N\"\n+  \"Constant in range [1, 256]\"\n+  (and (match_code \"const_int\")\n+       (match_test \"CSKY_CONST_OK_FOR_N (ival)\")))\n+\n+(define_constraint \"O\"\n+  \"Constant in range [0, 4095]\"\n+  (and (match_code \"const_int\")\n+       (match_test \"CSKY_CONST_OK_FOR_O (ival)\")))\n+\n+(define_constraint \"P\"\n+  \"Constant in range [4, 508] that is divisible by 4\"\n+  (and (match_code \"const_int\")\n+       (match_test \"CSKY_CONST_OK_FOR_P (ival)\")))\n+\n+(define_constraint \"T\"\n+  \"Constant in range [-256, -1]\"\n+  (and (match_code \"const_int\")\n+       (match_test \"CSKY_CONST_OK_FOR_T (ival)\")))\n+\n+(define_constraint \"Ua\"\n+  \"Constant 0\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival == 0\")))\n+\n+(define_constraint \"Ub\"\n+  \"Unsigned int that is an exact power of 2\"\n+  (and (match_code \"const_int\")\n+       (match_test \"CSKY_CONST_OK_FOR_Ub (ival)\")))\n+\n+(define_constraint \"Uc\"\n+  \"Unsigned int X such that X+1 is an exact power of 2\"\n+  (and (match_code \"const_int\")\n+       (match_test \"CSKY_CONST_OK_FOR_Uc (ival)\")))\n+\n+(define_constraint \"Ud\"\n+  \"64-bit int whose high/low words separately satisfy I, Ub, or Uc\"\n+  (and (match_code \"const_int\")\n+       (match_test \"CSKY_CONST_OK_FOR_Ud (ival)\")))\n+\n+(define_constraint \"Ug\"\n+  \"Constant in range [-508, -4] that is divisible by 4\"\n+  (and (match_code \"const_int\")\n+       (match_test \"CSKY_CONST_OK_FOR_Ug (ival)\")))\n+\n+(define_constraint \"Uh\"\n+  \"Constant in range [-31, 0]\"\n+  (and (match_code \"const_int\")\n+       (match_test \"CSKY_CONST_OK_FOR_Uh (ival)\")))\n+\n+(define_constraint \"Uj\"\n+  \"Constant in range [4, 1024] that is divisible by 4\"\n+  (and (match_code \"const_int\")\n+       (match_test \"CSKY_CONST_OK_FOR_Uj (ival)\")))\n+\n+(define_constraint \"Uk\"\n+  \"Constant in range [1, 65536]\"\n+  (and (match_code \"const_int\")\n+       (match_test \"CSKY_CONST_OK_FOR_Uk (ival)\")))\n+\n+(define_constraint \"Ul\"\n+  \"Constant in range [-1024, -4] that is divisible by 4\"\n+  (and (match_code \"const_int\")\n+       (match_test \"CSKY_CONST_OK_FOR_Ul (ival)\")))\n+\n+(define_constraint \"Um\"\n+  \"Constant in range [-4096, -1]\"\n+  (and (match_code \"const_int\")\n+       (match_test \"CSKY_CONST_OK_FOR_Um (ival)\")))\n+\n+(define_constraint \"Un\"\n+  \"Constant whose low 16 bits are all zeros\"\n+  (and (match_code \"const_int\")\n+       (match_test \"CSKY_CONST_OK_FOR_MOVIH (ival)\")))\n+\n+(define_constraint \"Uo\"\n+  \"Constant that can be synthesized with an extra instruction\"\n+  (and (match_code \"const_int\")\n+       (match_test \"csky_inlinable_constant (ival)\")))\n+\n+(define_constraint \"Up\"\n+  \"Constant in range [0, 255]\"\n+  (and (match_code \"const_int\")\n+       (match_test \"CSKY_CONST_OK_FOR_N (ival + 1)\")))\n+\n+(define_constraint \"Uq\"\n+  \"Constant in range [0, 1020] that is divisible by 4\"\n+  (and (match_code \"const_int\")\n+       (match_test \"CSKY_CONST_OK_FOR_Uj (ival + 4)\")))\n+\n+(define_constraint \"Ur\"\n+  \"Constant in range [-1020, -4] that is divisible by 4\"\n+  (and (match_code \"const_int\")\n+       (match_test \"CSKY_CONST_OK_FOR_Uj (-ival + 4)\")))\n+\n+(define_constraint \"Us\"\n+  \"Constant in range [-8, -1]\"\n+  (and (match_code \"const_int\")\n+       (match_test \"CSKY_CONST_OK_FOR_US (ival)\")))"}, {"sha": "822caed2f37dde72a2503142053c07fa2f7be76b", "filename": "gcc/config/csky/csky-elf.h", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky-elf.h?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0", "patch": "@@ -0,0 +1,81 @@\n+/* Declarations for bare-metal C-SKY targets.\n+   Copyright (C) 2018 Free Software Foundation, Inc.\n+   Contributed by C-SKY Microsystems and Mentor Graphics.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+\n+/******************************************************************\n+ *\t\t Run-time Target Specification\t\t\t  *\n+ ******************************************************************/\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \\\n+  \"crt0.o%s crti.o%s crtbegin.o%s\"\n+\n+#undef ENDFILE_SPEC\n+#define ENDFILE_SPEC \"crtend.o%s crtn.o%s\"\n+\n+#undef CC1_SPEC\n+#define CC1_SPEC\t\t \\\n+  \"%{EB:-EB}\t\t\t \\\n+   %{EL:-EL}\t\t\t \\\n+   %{fpic|fPIC:-DPIC}\t\t \\\n+   %{march=ck803s:-march=ck803}\t \\\n+  \"\n+\n+#undef ASM_SPEC\n+#define ASM_SPEC\t\t\\\n+  \"%{mbig-endian:-mbig-endian}\t\\\n+  %{EB:-EB}\t\t\t\\\n+  %{EL:-EL}\t\t\t\\\n+  %{fpic|fPIC:-pic}\t\t\\\n+  %{mcpu=*:-mcpu=%*}\t\t\\\n+  %{march=*:-march=%*}\t\t\\\n+  %{mhard-float:-mhard-float}\t\\\n+  %{melrw:-melrw}\t\t\\\n+  %{mno-elrw:-mno-elrw}\t\t\\\n+  %{mistack:-mistack}\t\t\\\n+  %{mno-istack:-mno-istack}\t\\\n+  %{mmp:-mmp}\t\t\t\\\n+  %{mcp:-mcp}\t\t\t\\\n+  %{mcache:-mcache}\t\t\\\n+  %{msecurity|mmac:-msecurity}\t\\\n+  %{mtrust:-mtrust}\t\t\\\n+  %{mdsp:-mdsp}\t\t\t\\\n+  %{medsp:-medsp}\t\t\\\n+  %{mvdsp:-mvdsp}\t\t\\\n+  \"\n+\n+#undef\tLINK_SPEC\n+#define LINK_SPEC     \\\n+\"%{mbig-endian:-EB}   \\\n+ %{EB:-EB}\t      \\\n+ %{EL:-EL} -X\"\n+\n+#undef\tLIB_SPEC\n+#define LIB_SPEC \\\n+  \"%{pthread:-lpthread} -lc %{mccrt:-lcc-rt}\"\n+/* FIXME add this to LIB_SPEC when need */\n+/*   %{!shared:%{profile:-lc_p}%{!profile:-lc}}\" */\n+\n+\n+#define CPLUSPLUS_CPP_SPEC \"-D_GNU_SOURCE %(cpp)\"\n+\n+/* Disable features only for Linux toolchains.\t*/\n+#undef TARGET_POSIX_IO\n+#define TARGET_CSKY_LINUX 0"}, {"sha": "19a553cb08ec5a88a463a343d746b98a1703f037", "filename": "gcc/config/csky/csky-linux-elf.h", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky-linux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky-linux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky-linux-elf.h?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0", "patch": "@@ -0,0 +1,132 @@\n+/* Declarations for C-SKY targets running Linux.\n+   Copyright (C) 2018 Free Software Foundation, Inc.\n+   Contributed by C-SKY Microsystems and Mentor Graphics.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/******************************************************************\n+ *\t\t Run-time Target Specification\t\t\t  *\n+ ******************************************************************/\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC\t\t\t\t\t\t\t      \\\n+  \"%{!shared: %{pie:Scrt1.o%s;:crt1.o%s}}\t\t\t\t      \\\n+  crti.o%s %{static:crtbeginT.o%s;shared|pie:crtbeginS.o%s;:crtbegin.o%s}\"\n+\n+#undef ENDFILE_SPEC\n+#define ENDFILE_SPEC \\\n+  \"%{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s\"\n+\n+#undef CC1_SPEC\n+#define CC1_SPEC  \\\n+  \"%{EB:-EB}\t  \\\n+   %{EL:-EL}\t  \\\n+  \"\n+\n+#undef ASM_SPEC\n+#define ASM_SPEC\t\t\\\n+  \"%{mbig-endian:-mbig-endian}\t\\\n+  %{EB:-EB}\t\t\t\\\n+  %{EL:-EL}\t\t\t\\\n+  %{fpic|fPIC:-pic}\t\t\\\n+  %{mcpu=*:-mcpu=%*}\t\t\\\n+  %{march=*:-march=%*}\t\t\\\n+  %{mhard-float:-mhard-float}\t\\\n+  %{melrw:-melrw}\t\t\\\n+  %{mno-elrw:-mno-elrw}\t\t\\\n+  %{mistack:-mistack}\t\t\\\n+  %{mno-istack:-mno-istack}\t\\\n+  %{mmp:-mmp}\t\t\t\\\n+  %{mcp:-mcp}\t\t\t\\\n+  %{mcache:-mcache}\t\t\\\n+  %{msecurity|mmac:-msecurity}\t\\\n+  %{mtrust:-mtrust}\t\t\\\n+  %{mdsp:-mdsp}\t\t\t\\\n+  %{medsp:-medsp}\t\t\\\n+  %{mvdsp:-mvdsp}\t\t\\\n+  \"\n+\n+#define LINUX_DYNAMIC_LINKER  \"/lib/ld.so.1\"\n+\n+#define LINUX_TARGET_LINK_SPEC\t\"%{h*} %{version:-v}\t\t\\\n+   %{b}\t\t\t\t\t\t\t\t\\\n+   %{static:-Bstatic}\t\t\t\t\t\t\\\n+   %{shared:-shared}\t\t\t\t\t\t\\\n+   %{symbolic:-Bsymbolic}\t\t\t\t\t\\\n+   %{!static:\t\t\t\t\t\t\t\\\n+     %{rdynamic:-export-dynamic}\t\t\t\t\\\n+     %{!shared:-dynamic-linker \" LINUX_DYNAMIC_LINKER \"}}\t\\\n+   -X\t\t\t\t\t\t\t\t\\\n+   %{mbig-endian:-EB} %{mlittle-endian:-EL}\t\t\t\\\n+   %{EB:-EB} %{EL:-EL}\"\n+\n+\n+#undef\tLINK_SPEC\n+#define LINK_SPEC LINUX_TARGET_LINK_SPEC\n+\n+\n+#undef\tLIB_SPEC\n+#define LIB_SPEC \\\n+  \"%{pthread:-lpthread} -lc %{mccrt:-lcc-rt}\"\n+/* FIXME add this to LIB_SPEC when need */\n+/*   %{!shared:%{profile:-lc_p}%{!profile:-lc}}\" */\n+\n+#define TARGET_OS_CPP_BUILTINS()\t    \\\n+  do\t\t\t\t\t    \\\n+    {\t\t\t\t\t    \\\n+      GNU_USER_TARGET_OS_CPP_BUILTINS ();   \\\n+    }\t\t\t\t\t    \\\n+  while (0)\n+\n+/* In crtstuff.c to control section in where code resides.\n+   We have to write it as asm code.  */\n+#ifdef __PIC__\n+#define CRT_CALL_STATIC_FUNCTION(SECTION_OP, FUNC)  \\\n+  asm (SECTION_OP \"\\n\"\t\t\t\t    \\\n+       \"\\tgrs\\tr3, .Lgetpc_\"#FUNC\"\\n\\t\"\t\t    \\\n+       \".Lgetpc_\"#FUNC\":\\n\\t\"\t\t\t    \\\n+       \"\\tlrw\\tr2,\\t.Lgetpc_\"#FUNC\"@GOTPC\\n\\t\"\t    \\\n+       \"\\taddu\\tr3, r2\\n\\t\"\t\t\t    \\\n+       \"\\tlrw\\tr2, \"#FUNC\"@GOTOFF\\n\\t\"\t\t    \\\n+       \"\\taddu\\tr2, r3\\n\\t\"\t\t\t    \\\n+       \"\\tjsr\\tr2\\n\\t\");\t\t\t    \\\n+  FORCE_CODE_SECTION_ALIGN\t\t\t    \\\n+  asm (TEXT_SECTION_ASM_OP);\n+#endif\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n+\n+#undef FUNCTION_PROFILER\n+#define SAVE_LR\t    \\\n+  \"push\\tlr\"\n+#define FUNCTION_PROFILER(file, labelno)\t\t\\\n+  fprintf (file, \"\\t%s\\n\\tjbsr\\t_mcount\\n\", SAVE_LR);\n+#define NO_PROFILE_COUNTERS 1\n+\n+/* Enable features only for Linux toolchains.  */\n+#define TARGET_CSKY_LINUX 1\n+\n+/* Clear the instruction cache from `BEG' to `END'.  */\n+#define CLEAR_INSN_CACHE(BEG, END)\t\t\t\\\n+  cacheflush (BEG, END-BEG, 3)\n+\n+/* For __clear_cache in libgcc2.c.  The declaration is copied from\n+   <sys/cachectl.h>.  */\n+#ifdef IN_LIBGCC2\n+extern int cacheflush (void *__addr, const int __nbytes, const int __op);\n+#endif"}, {"sha": "c10267a91abc5931fc4e5fd1c30f5a4f7c8a8922", "filename": "gcc/config/csky/csky-protos.h", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky-protos.h?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0", "patch": "@@ -0,0 +1,71 @@\n+/* Prototype declarations for the C-SKY back end.\n+   Copyright (C) 2018 Free Software Foundation, Inc.\n+   Contributed by C-SKY Microsystems and Mentor Graphics.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_CSKY_PROTOS_H\n+#define GCC_CSKY_PROTOS_H\n+\n+extern bool csky_simple_addr_operand_p (rtx);\n+extern bool csky_symbolic_address_p (rtx);\n+extern bool csky_legitimate_pic_operand_p (rtx);\n+\n+extern void csky_cpu_cpp_builtins (cpp_reader *);\n+\n+extern bool csky_inlinable_constant (HOST_WIDE_INT value);\n+extern bool csky_shifted_imm8_constant (unsigned HOST_WIDE_INT,\n+\t\t\t\t\tunsigned int *, unsigned int *);\n+extern bool csky_valid_fpuv2_mem_operand (rtx);\n+\n+extern bool csky_minipool_load_p (rtx_insn *);\n+extern const char *csky_output_move (rtx insn, rtx *, machine_mode);\n+extern const char *csky_output_movedouble (rtx *, machine_mode);\n+extern const char *csky_output_ck801_move (rtx, rtx *, machine_mode);\n+extern const char *csky_output_ck801_movedouble (rtx *, machine_mode);\n+extern char *csky_output_call (rtx *, int);\n+extern const char *csky_output_casesi (rtx *);\n+\n+extern bool csky_split_and (rtx *);\n+extern bool csky_split_ior (rtx *);\n+extern bool csky_split_xor (rtx *);\n+\n+#ifdef RTX_CODE\n+extern bool csky_emit_compare (enum rtx_code, rtx, rtx);\n+extern bool csky_emit_compare_float (enum rtx_code, rtx, rtx);\n+#endif /* RTX_CODE */\n+\n+extern rtx csky_return_addr (int, rtx);\n+extern void csky_init_expanders (void);\n+extern HOST_WIDE_INT csky_initial_elimination_offset (int, int);\n+extern void csky_expand_prologue (void);\n+extern void csky_expand_epilogue (void);\n+extern const char *csky_output_return_instruction (void);\n+extern void csky_set_eh_return_address (rtx, rtx);\n+\n+extern bool csky_symbol_mentioned_p (rtx);\n+extern bool csky_label_mentioned_p (rtx);\n+extern rtx csky_legitimize_pic_address (rtx, rtx, bool);\n+\n+extern bool csky_tls_referenced_p (rtx);\n+extern rtx csky_legitimize_tls_address (rtx, rtx);\n+\n+extern int csky_compute_pushpop_length (rtx *);\n+\n+extern int csky_default_branch_cost (bool, bool);\n+extern bool csky_default_logical_op_non_short_circuit (void);\n+#endif /* GCC_CSKY_PROTOS_H */"}, {"sha": "a9e196ba3f1dc66acb1cfcfe38e2b2feb7a61ce3", "filename": "gcc/config/csky/csky.c", "status": "added", "additions": 6795, "deletions": 0, "changes": 6795, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky.c?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0"}, {"sha": "39aac6bb4b80ffef487dd34f8c4b265019691ca2", "filename": "gcc/config/csky/csky.h", "status": "added", "additions": 1054, "deletions": 0, "changes": 1054, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky.h?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0", "patch": "@@ -0,0 +1,1054 @@\n+/* Declarations for the C-SKY back end.\n+   Copyright (C) 2018 Free Software Foundation, Inc.\n+   Contributed by C-SKY Microsystems and Mentor Graphics.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+\n+#ifndef GCC_CSKY_H\n+#define GCC_CSKY_H\n+\n+/* In some places e.g. csky_secondary_reload, we use -1 to indicate an\n+   invalid register.  In other places where N is unsigned the comparison\n+   to zero would give an error, so explicitly cast to int here.  */\n+#define CSKY_GENERAL_REGNO_P(N)\t\t\t\\\n+  ((N) < CSKY_NGPR_REGS && (int)(N) >= 0)\n+\n+#define CSKY_VREG_P(N)\t\t     \\\n+  ((N) >= CSKY_FIRST_VFP_REGNUM && (N) <= CSKY_LAST_VFP_REGNUM)\n+\n+#define CSKY_HILO_REG_P(N)   \\\n+  ((N) == CSKY_HI_REGNUM || (N) == CSKY_LO_REGNUM)\n+\n+/* Helper macros for constant constraints and predicates.  */\n+#define CSKY_VALUE_BETWEEN(VALUE, LOW, HIGH)\t\\\n+  ((VALUE) >= (LOW) && (VALUE) <= (HIGH))\n+\n+#define CSKY_CONST_OK_FOR_I(VALUE)  \\\n+  CSKY_VALUE_BETWEEN (VALUE, 0, 65535)\n+\n+#define CSKY_CONST_OK_FOR_J(VALUE)  \\\n+  CSKY_VALUE_BETWEEN (VALUE, 1, 32)\n+\n+#define CSKY_CONST_OK_FOR_K(VALUE)  \\\n+  CSKY_VALUE_BETWEEN (VALUE, 0, 31)\n+\n+#define CSKY_CONST_OK_FOR_L(VALUE)  \\\n+  CSKY_VALUE_BETWEEN (VALUE, 1, 8)\n+\n+#define CSKY_CONST_OK_FOR_M(VALUE)  \\\n+  CSKY_VALUE_BETWEEN (VALUE, 1, 4096)\n+\n+#define CSKY_CONST_OK_FOR_N(VALUE)  \\\n+  CSKY_VALUE_BETWEEN (VALUE, 1, 256)\n+\n+#define CSKY_CONST_OK_FOR_O(VALUE)  \\\n+  CSKY_VALUE_BETWEEN (VALUE, 0, 4095)\n+\n+#define CSKY_CONST_OK_FOR_P(VALUE)  \\\n+  (((VALUE) & 0x3) == 0 && CSKY_VALUE_BETWEEN (VALUE, 4, 508))\n+\n+#define CSKY_CONST_OK_FOR_T(VALUE)  \\\n+  CSKY_VALUE_BETWEEN (VALUE, -256, -1)\n+\n+#define CSKY_CONST_OK_FOR_Ub(VALUE)  \\\n+  (exact_log2 (VALUE & 0xFFFFFFFF) >= 0)\n+\n+#define CSKY_CONST_OK_FOR_Uc(VALUE)\t     \\\n+  ((VALUE) == (HOST_WIDE_INT) -1\t     \\\n+   || (exact_log2 ((VALUE) + 1) >= 0\t     \\\n+       && exact_log2 ((VALUE) + 1) <= 31))\n+\n+#define CSKY_CONST_OK_FOR_Ud(VALUE)\t\t\t\t\\\n+  ((CSKY_CONST_OK_FOR_I ((VALUE) & 0xffffffff)\t\t\t\\\n+    || CSKY_CONST_OK_FOR_Ub ((VALUE))\t\t\t\t\\\n+    || CSKY_CONST_OK_FOR_Uc (((VALUE) << 32) >> 32))\t\t\\\n+   && (CSKY_CONST_OK_FOR_I ((VALUE) >> 32)\t\t\t\\\n+       || CSKY_CONST_OK_FOR_Ub ((VALUE) >> 32)\t\t\t\\\n+       || CSKY_CONST_OK_FOR_Uc ((VALUE) >> 32)))\t\t\\\n+\n+#define CSKY_CONST_OK_FOR_Ug(VALUE)  \\\n+  (((VALUE) & 0x3) == 0 && CSKY_VALUE_BETWEEN (VALUE, -508, -4))\n+\n+#define CSKY_CONST_OK_FOR_Uh(VALUE)  \\\n+  CSKY_VALUE_BETWEEN (VALUE, -31, 0)\n+\n+#define CSKY_CONST_OK_FOR_Uj(VALUE)  \\\n+  (((VALUE) & 0x3) == 0 && CSKY_VALUE_BETWEEN (VALUE, 1, 1024))\n+\n+#define CSKY_CONST_OK_FOR_Uk(VALUE)  \\\n+  CSKY_VALUE_BETWEEN (VALUE, 1, 65536)\n+\n+#define CSKY_CONST_OK_FOR_Ul(VALUE)  \\\n+  (((VALUE) & 0x3) == 0 && CSKY_VALUE_BETWEEN (VALUE, -1024, -4))\n+\n+#define CSKY_CONST_OK_FOR_Um(VALUE)  \\\n+  CSKY_VALUE_BETWEEN (VALUE, -4096, -1)\n+\n+#define CSKY_CONST_OK_FOR_US(VALUE) \\\n+  CSKY_VALUE_BETWEEN (VALUE, -8, -1)\n+\n+#define CSKY_CONST_OK_FOR_MOVIH(VALUE)\t\t\\\n+  (((VALUE) & 0xFFFF) == 0)\n+\n+#ifndef TARGET_CPU_DEFAULT\n+#define TARGET_CPU_DEFAULT CSKY_TARGET_CORE_GET(ck810f)\n+#endif\n+\n+/* Options that are enabled by default are specified as such in the\n+   .opt file.  */\n+#define TARGET_DEFAULT 0\n+\n+/* The highest CSKY architecture version supported by the target.  */\n+#define CSKY_TARGET_ARCH(arch) \\\n+  (csky_base_arch == CSKY_TARGET_ARCH_GET (arch))\n+\n+/* Define some macros for target code generation options.  */\n+#define TARGET_SOFT_FPU \\\n+  (csky_fpu_index == TARGET_FPU_fpv2_sf)\n+#define TARGET_CASESI \\\n+  (optimize_size && TARGET_CONSTANT_POOL \\\n+   && (CSKY_TARGET_ARCH (CK801) || CSKY_TARGET_ARCH (CK802)))\n+#define TARGET_TLS \\\n+  (CSKY_TARGET_ARCH (CK807) || CSKY_TARGET_ARCH (CK810))\n+\n+/* Number of loads/stores handled by ldm/stm.  */\n+#define CSKY_MIN_MULTIPLE_STLD\t3\n+#define CSKY_MAX_MULTIPLE_STLD\t12\n+\n+/* Pull in enums and defines for processor/arch variants.  This makes\n+   it possible to use CSKY_TARGET_ARCH in macros defined in this file.  */\n+#include \"csky_opts.h\"\n+extern enum csky_base_architecture csky_base_arch;\n+\n+/* Pull in enums and defines for ISA features.  Likewise required to\n+   support use of CSKY_ISA_FEATURE in this file.\n+   Note that the CSKY_ISA_FEATURE macro tests properties of the\n+   particular processor we're compiling for, not code generation\n+   options that may have dependencies on those features.  The latter\n+   are handled by TARGET_xxxx macros/variables instead.  See csky.opt.  */\n+#include \"csky_isa.h\"\n+extern int csky_arch_isa_features[];\n+#define CSKY_ISA_FEATURE(IDENT) \\\n+  csky_arch_isa_features[CSKY_ISA_FEATURE_GET (IDENT)]\n+\n+/******************************************************************\n+ *\t\t\t   Storage Layout\t\t\t  *\n+ ******************************************************************/\n+\n+\n+/* Define this if most significant bit is lowest numbered\n+   in instructions that operate on numbered bit-fields.  */\n+#define BITS_BIG_ENDIAN\t 0\n+\n+/* If the most significant byte of a word is the lowest numbered.  */\n+#define BYTES_BIG_ENDIAN (TARGET_BIG_ENDIAN != 0)\n+\n+/* If the most significant word of a multiword number is the lowest.  */\n+#define WORDS_BIG_ENDIAN (BYTES_BIG_ENDIAN)\n+\n+/* Width of a word, in units (bytes).  */\n+#define UNITS_PER_WORD 4\n+\n+/* Define this macro if it is advisable to hold scalars in registers\n+   in a wider mode than that declared by the program.  In such cases,\n+   the value is constrained to be within the bounds of the declared\n+   type, but kept valid in the wider mode.  The signedness of the\n+   extension may differ from that of the type.  */\n+#define PROMOTE_MODE(MODE, UNSIGNEDP, TYPE)\t\\\n+  if (GET_MODE_CLASS (MODE) == MODE_INT\t\t\\\n+      && GET_MODE_SIZE (MODE) < UNITS_PER_WORD) \\\n+    (MODE) = SImode;\n+\n+\n+/* Allocation boundary (in *bits*) for storing arguments in argument list.  */\n+#define PARM_BOUNDARY\t32\n+\n+/* Boundary (in *bits*) on which stack pointer should be aligned.\n+   Per C-SKY, the published V2 ABI document is incorrect and the proper\n+   alignment is on a 4-byte boundary rather than 8 bytes.  */\n+#define STACK_BOUNDARY\t32\n+\n+/* Align definitions of arrays, unions and structures so that\n+   initializations and copies can be made more efficient.  This is not\n+   ABI-changing, so it only affects places where we can see the\n+   definition. Increasing the alignment tends to introduce padding,\n+   so don't do this when optimizing for size/conserving stack space. */\n+#define CSKY_EXPAND_ALIGNMENT(COND, EXP, ALIGN) \\\n+  (((COND) && ((ALIGN) < BITS_PER_WORD)\t\t \\\n+    && (TREE_CODE (EXP) == ARRAY_TYPE\t\t \\\n+\t|| TREE_CODE (EXP) == UNION_TYPE\t \\\n+\t|| TREE_CODE (EXP) == RECORD_TYPE))\t \\\n+   ? BITS_PER_WORD : (ALIGN))\n+\n+/* Align global data. */\n+#define DATA_ALIGNMENT(EXP, ALIGN)\t\\\n+  CSKY_EXPAND_ALIGNMENT (!optimize_size, EXP, ALIGN)\n+\n+/* Similarly, make sure that objects on the stack are sensibly aligned.  */\n+#define LOCAL_ALIGNMENT(EXP, ALIGN)\t  \\\n+  CSKY_EXPAND_ALIGNMENT (!flag_conserve_stack, EXP, ALIGN)\n+\n+/* No data type wants to be aligned rounder than this.  */\n+#define BIGGEST_ALIGNMENT 32\n+\n+/* Every structures size must be a multiple of 8 bits.  */\n+#define STRUCTURE_SIZE_BOUNDARY 8\n+\n+/* Look at the fundamental type that is used for a bit-field and use\n+   that to impose alignment on the enclosing structure.\n+   struct s {int a:8}; should have same alignment as \"int\", not \"char\".  */\n+#define PCC_BITFIELD_TYPE_MATTERS 1\n+\n+/* Largest integer machine mode for structures.  If undefined, the default\n+   is GET_MODE_SIZE(DImode).  */\n+#define MAX_FIXED_MODE_SIZE 64\n+\n+/* Allocation boundary (in *bits*) for the code of a function.\n+   Optimize ck801 and ck802 a little harder for size.  */\n+#define FUNCTION_BOUNDARY\t\t\t\t\t\\\n+  (((CSKY_TARGET_ARCH (CK801) || CSKY_TARGET_ARCH (CK802))\t\\\n+    && optimize_size)\t\t\t\t\t\t\\\n+   ? 16 : 32)\n+\n+/* C-SKY does not support unaligned access.  */\n+#define STRICT_ALIGNMENT    1\n+\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"unsigned int\"\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"int\"\n+\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"long int\"\n+\n+#undef UINT_LEAST32_TYPE\n+#define UINT_LEAST32_TYPE \"unsigned int\"\n+\n+#undef INT_LEAST32_TYPE\n+#define INT_LEAST32_TYPE \"int\"\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE BITS_PER_WORD\n+\n+/******************************************************************\n+ *\t\tLayout of Source Language Data Types\t\t  *\n+ ******************************************************************/\n+\n+\n+/* 'char' is unsigned by default for backward compatibility.  */\n+#define DEFAULT_SIGNED_CHAR    0\n+\n+\n+/******************************************************************\n+ *\t\tStack Layout and Calling Conventions\t\t  *\n+ ******************************************************************/\n+\n+\n+/* Basic Stack Layout  */\n+\n+\n+/* Define this if pushing a word on the stack\n+   makes the stack pointer a smaller address.  */\n+#define STACK_GROWS_DOWNWARD\t1\n+\n+/* Define this to nonzero if the nominal address of the stack frame\n+   is at the high-address end of the local variables;\n+   that is, each additional local variable allocated\n+   goes at a more negative offset in the frame.  */\n+#define FRAME_GROWS_DOWNWARD\t1\n+\n+/* Offset of first parameter from the argument pointer register value.  */\n+#define FIRST_PARM_OFFSET(FNDECL) 0\n+\n+/* A C expression whose value is RTL representing the value of the return\n+   address for the frame COUNT steps up from the current frame.  */\n+#define RETURN_ADDR_RTX(COUNT, FRAME) \\\n+  csky_return_addr (COUNT, FRAME)\n+\n+/* Pick up the return address upon entry to a procedure. Used for\n+   dwarf2 unwind information.  This also enables the table driven\n+   mechanism.  */\n+#define INCOMING_RETURN_ADDR_RTX  gen_rtx_REG (Pmode, CSKY_LR_REGNUM)\n+\n+\n+/* Exception Handling Support  */\n+\n+/* The register that holds the return address in exception handlers.  */\n+#define EH_RETURN_STACKADJ_RTX\tgen_rtx_REG (SImode, CSKY_EH_STACKADJ_REGNUM)\n+\n+\n+/* Registers That Address the Stack Frame  */\n+\n+\n+/* Register to use for pushing function arguments.  */\n+#define STACK_POINTER_REGNUM  CSKY_SP_REGNUM\n+\n+/* Base register for access to local variables of the function.  */\n+#define FRAME_POINTER_REGNUM  8\n+\n+/* Base register for access to arguments of the function.  This is a fake\n+   register that is always eliminated.  */\n+#define ARG_POINTER_REGNUM    32\n+\n+/* Static chain register.\n+   Register use is more restricted on CK801.  */\n+#define STATIC_CHAIN_REGNUM   (CSKY_TARGET_ARCH (CK801) ? 13 : 12)\n+\n+\n+/* Eliminating Frame Pointer and Arg Pointer  */\n+\n+\n+/* Definitions for register eliminations.\n+\n+   This is an array of structures.  Each structure initializes one pair\n+   of eliminable registers.  The \"from\" register number is given first,\n+   followed by \"to\".  Eliminations of the same \"from\" register are listed\n+   in order of preference.\n+\n+   We have two registers that can be eliminated on the CSKY.  First, the\n+   arg pointer register can often be eliminated in favor of the stack\n+   pointer register.  Secondly, the pseudo frame pointer register can always\n+   be eliminated; it is replaced with the stack pointer.  */\n+#define ELIMINABLE_REGS\t\t  \\\n+{{ ARG_POINTER_REGNUM,\t      STACK_POINTER_REGNUM\t      },\\\n+ { ARG_POINTER_REGNUM,\t      FRAME_POINTER_REGNUM\t      },\\\n+ { FRAME_POINTER_REGNUM,      STACK_POINTER_REGNUM\t      }}\n+\n+/* Define the offset between two registers, one to be eliminated, and the\n+   other its replacement, at the start of a routine.  */\n+#define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t  \\\n+  (OFFSET) = csky_initial_elimination_offset (FROM, TO)\n+\n+\n+/* Passing Function Arguments on the Stack  */\n+\n+\n+/* Define this if the maximum size of all the outgoing args is to be\n+   accumulated and pushed during the prologue.  The amount can be\n+   found in the variable crtl->outgoing_args_size.  */\n+#define ACCUMULATE_OUTGOING_ARGS 1\n+\n+\n+/* Passing Arguments in Registers  */\n+\n+\n+/* A C type for declaring a variable that is used as the first argument of\n+   TARGET_ FUNCTION_ARG and other related values.  */\n+#define CUMULATIVE_ARGS\t int\n+\n+/* Initialize a variable CUM of type CUMULATIVE_ARGS\n+   for a call to a function whose data type is FNTYPE.\n+   For a library call, FNTYPE is 0.\n+\n+   On CSKY, the offset always starts at 0: the first parm reg is always\n+   the same reg.  */\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n+  ((CUM) = 0)\n+\n+/* True if N is a possible register number for function argument passing.\n+   On the CSKY, r0-r3 are used to pass args.\n+   The int cast is to prevent a complaint about unsigned comparison to\n+   zero, since CSKY_FIRST_PARM_REGNUM is zero.  */\n+#define FUNCTION_ARG_REGNO_P(REGNO)\t    \\\n+  (((int)(REGNO) >= CSKY_FIRST_PARM_REGNUM) &&\t\t\\\n+   ((REGNO) < (CSKY_NPARM_REGS + CSKY_FIRST_PARM_REGNUM)))\n+\n+/* How Large Values Are Returned  */\n+\n+\n+/* Define DEFAULT_PCC_STRUCT_RETURN to 1 if all structure and union return\n+   values must be in memory.  On the CSKY, small\n+   structures (eight bytes or fewer) are returned in\n+   the register pair r0/r1.  */\n+#define DEFAULT_PCC_STRUCT_RETURN 0\n+\n+/* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n+   the stack pointer does not matter.  The value is tested only in\n+   functions that have frame pointers.\n+   No definition is equivalent to always zero.\n+\n+   On the CSKY, the function epilogue recovers the stack pointer from the\n+   frame.  */\n+#define EXIT_IGNORE_STACK 1\n+\n+\n+/******************************************************************\n+ *\t\tRegister Usage & Register Classes\t\t  *\n+ ******************************************************************/\n+\n+\n+#define FIRST_PSEUDO_REGISTER 71\n+\n+/* 1 for registers that have pervasive standard uses\n+   and are not available for the register allocator.\n+   On C-SKY, r14 is SP, r26 is used by linker,\n+   r27 is used by assembler, r28 is data base address,\n+   r29 is GOT base address, r30 is handler base address,\n+   r31 is TLS register.  */\n+#define FIXED_REGISTERS\t\t\t\t\t\t\t\\\n+ /*  r0\t   r1\t r2    r3    r4\t   r5\t r6    r7  */\t\t\t\\\n+{    0,\t   0,\t 0,    0,    0,\t   0,\t 0,    0,\t\t\t\\\n+ /*  r8\t   r9\t r10   r11   r12   r13\t r14   r15 */\t\t\t\\\n+     0,\t   0,\t 0,    0,    0,\t   0,\t 1,    0,\t\t\t\\\n+ /*  r16   r17\t r18   r19   r20   r21\t r22   r23 */\t\t\t\\\n+     0,\t   0,\t 0,    0,    0,\t   0,\t 0,    0,\t\t\t\\\n+ /*  r24   r25\t r26   r27   r28   r29\t r30   tls */\t\t\t\\\n+     0,\t   0,\t 1,    1,    1,\t   1,\t 1,    1,\t\t\t\\\n+ /*  reserved\t c     hi    lo\t */\t\t\t\t\t\\\n+     1,\t\t 1,    0,    0,\t\t\t\t\t\t\\\n+ /*  reserved */\t\t\t\t\t\t\t\\\n+     1,\t   1,\t 1,    1,    1,\t   1,\t 1,    1,\t\t\t\\\n+     1,\t   1,\t 1,    1,    1,\t   1,\t 1,    1,\t\t\t\\\n+ /*  vr0   vr1\t vr2   vr3   vr4   vr5\t vr6   vr7  */\t\t\t\\\n+     0,\t   0,\t 0,    0,    0,\t   0,\t 0,    0,\t\t\t\\\n+ /*  vr8   vr9\t vr10  vr11  vr12  vr13\t vr14  vr15 */\t\t\t\\\n+     0,\t   0,\t 0,    0,    0,\t   0,\t 0,    0 ,\t\t\t\\\n+ /*  reserved */\t\t\t\t\t\t\t\\\n+     1,\t   1,\t\t\t\t\t\t\t\t\\\n+ /*  epc */\t\t\t\t\t\t\t\t\\\n+     1\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+/* 1 for registers that is clobbered (in general) by function calls.\n+   If a register has 0, the compiler automatically saves it on\n+   function entry and restores it on function exit, if the register\n+   is used within the function.  */\n+#define CALL_USED_REGISTERS \\\n+ /*  r0\t   r1\t r2    r3    r4\t   r5\t r6    r7  */\t\t\t\\\n+{    1,\t   1,\t 1,    1,    0,\t   0,\t 0,    0,\t\t\t\\\n+ /*  r8\t   r9\t r10   r11   r12   r13\t r14   r15 */\t\t\t\\\n+     0,\t   0,\t 0,    0,    1,\t   1,\t 1,    0,\t\t\t\\\n+ /*  r16   r17\t r18   r19   r20   r21\t r22   r23 */\t\t\t\\\n+     0,\t   0,\t 1,    1,    1,\t   1,\t 1,    1,\t\t\t\\\n+ /*  r24   r25\t r26   r27   r28   r29\t r30   r31 */\t\t\t\\\n+     1,\t   1,\t 1,    1,    1,\t   1,\t 1,    1,\t\t\t\\\n+ /*  reserved\t c     hi    lo */\t\t\t\t\t\\\n+     1,\t\t 1,    1,    1,\t\t\t\t\t\t\\\n+ /*  reserved */\t\t\t\t\t\t\t\\\n+     1,\t   1,\t 1,    1,    1,\t   1,\t 1,    1,\t\t\t\\\n+     1,\t   1,\t 1,    1,    1,\t   1,\t 1,    1,\t\t\t\\\n+ /*  vr0   vr1\t vr2   vr3   vr4   vr5\t vr6   vr7 */\t\t\t\\\n+     1,\t   1,\t 1,    1,    1,\t   1,\t 1,    1,\t\t\t\\\n+ /*  vr8   vr9\t vr10  vr11  vr12  vr13\t vr14  vr15 */\t\t\t\\\n+     1,\t   1,\t 1,    1,    1,\t   1,\t 1,    1,\t\t\t\\\n+ /*  reserved */\t\t\t\t\t\t\t\\\n+     1,\t   1,\t\t\t\t\t\t\t\t\\\n+ /*  epc */\t\t\t\t\t\t\t\t\\\n+     1\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+/* Like `CALL_USED_REGISTERS' but used to overcome a historical\n+   problem which makes CALL_USED_REGISTERS *always* include\n+   all the FIXED_REGISTERS.  Until this problem has been\n+   resolved this macro can be used to overcome this situation.\n+   In particular, block_propagate() requires this list\n+   be accurate, or we can remove registers which should be live.\n+   This macro is used in get_csky_live_regs().  */\n+#define CALL_REALLY_USED_REGISTERS \\\n+ /*  r0\t   r1\t r2    r3    r4\t   r5\t r6    r7  */\t\t\t\\\n+{    1,\t   1,\t 1,    1,    0,\t   0,\t 0,    0,\t\t\t\\\n+ /*  r8\t   r9\t r10   r11   r12   r13\t r14   r15 */\t\t\t\\\n+     0,\t   0,\t 0,    0,    1,\t   1,\t 1,    0,\t\t\t\\\n+ /*  r16   r17\t r18   r19   r20   r21\t r22   r23 */\t\t\t\\\n+     0,\t   0,\t 1,    1,    1,\t   1,\t 1,    1,\t\t\t\\\n+ /*  r24   r25\t r26   r27   r28   r29\t r30   r31 */\t\t\t\\\n+     1,\t   1,\t 1,    1,    1,\t   1,\t 1,    1,\t\t\t\\\n+ /*  reserved\t c     hi    lo */\t\t\t\t\t\\\n+     1,\t\t 1,    1,    1,\t\t\t\t\t\t\\\n+ /*  reserved */\t\t\t\t\t\t\t\\\n+     1,\t   1,\t 1,    1,    1,\t   1,\t 1,    1,\t\t\t\\\n+     1,\t   1,\t 1,    1,    1,\t   1,\t 1,    1,\t\t\t\\\n+ /*  vr0   vr1\t vr2   vr3   vr4   vr5\t vr6   vr7 */\t\t\t\\\n+     1,\t   1,\t 1,    1,    1,\t   1,\t 1,    1,\t\t\t\\\n+ /*  vr8   vr9\t vr10  vr11  vr12  vr13\t vr14  vr15 */\t\t\t\\\n+     1,\t   1,\t 1,    1,    1,\t   1,\t 1,    1,\t\t\t\\\n+ /*  reserved */\t\t\t\t\t\t\t\\\n+     1,\t   1,\t\t\t\t\t\t\t\t\\\n+ /*  epc */\t\t\t\t\t\t\t\t\\\n+     1\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define REGISTER_NAMES\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  \"a0\",\t \"a1\",\t\"a2\",  \"a3\",  \"l0\",  \"l1\",  \"l2\",  \"l3\",\t\t\\\n+  \"l4\",\t \"l5\",\t\"l6\",  \"l7\",  \"t0\",  \"t1\",  \"sp\",  \"lr\",\t\t\\\n+  \"l8\",\t \"l9\",\t\"t2\",  \"t3\",  \"t4\",  \"t5\",  \"t6\",  \"t7\",\t\t\\\n+  \"t8\",\t \"t9\",\t\"r26\", \"r27\", \"gb\",  \"r29\", \"svbr\", \"r31\",\t\t\\\n+  /* reserved */\t\t\t\t\t\t\t\\\n+  \"reserved\",\t\t\t\t\t\t\t\t\\\n+  /* CC register: 33 */\t\t\t\t\t\t\t\\\n+  \"c\",\t\t\t\t\t\t\t\t\t\\\n+  /* DSP instruction register: 34, 35 */\t\t\t\t\\\n+  \"hi\", \"lo\",\t\t\t\t\t\t\t\t\\\n+  \"reserved\", \"reserved\", \"reserved\", \"reserved\", \"reserved\",\t\t\\\n+  \"reserved\", \"reserved\", \"reserved\", \"reserved\", \"reserved\",\t\t\\\n+  \"reserved\", \"reserved\", \"reserved\", \"reserved\", \"reserved\",\t\t\\\n+  \"reserved\",\t\t\t\t\t\t\t\t\\\n+  /* V registers: 52~67 */\t\t\t\t\t\t\\\n+  \"vr0\", \"vr1\", \"vr2\",\t\"vr3\",\t\"vr4\",\t\"vr5\",\t\"vr6\",\t\"vr7\",\t\t\\\n+  \"vr8\", \"vr9\", \"vr10\", \"vr11\", \"vr12\", \"vr13\", \"vr14\", \"vr15\",\t\t\\\n+  \"reserved\", \"reserved\",\t\t\t\t\t\t\\\n+  \"epc\"\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+/* Table of additional register names to use in user input.  */\n+#define ADDITIONAL_REGISTER_NAMES   \\\n+{\t\t\t\t    \\\n+  {\"r0\",  0},\t\t\t    \\\n+  {\"r1\",  1},\t\t\t    \\\n+  {\"r2\",  2},\t\t\t    \\\n+  {\"r3\",  3},\t\t\t    \\\n+  {\"r4\",  4},\t\t\t    \\\n+  {\"r5\",  5},\t\t\t    \\\n+  {\"r6\",  6},\t\t\t    \\\n+  {\"r7\",  7},\t\t\t    \\\n+  {\"r8\",  8},\t\t\t    \\\n+  {\"r9\",  9},\t\t\t    \\\n+  {\"r10\", 10},\t\t\t    \\\n+  {\"r11\", 11},\t\t\t    \\\n+  {\"r12\", 12},\t\t\t    \\\n+  {\"r13\", 13},\t\t\t    \\\n+  {\"r14\", 14},\t\t\t    \\\n+  {\"r15\", 15},\t\t\t    \\\n+  {\"r16\", 16},\t\t\t    \\\n+  {\"r17\", 17},\t\t\t    \\\n+  {\"r18\", 18},\t\t\t    \\\n+  {\"r19\", 19},\t\t\t    \\\n+  {\"r20\", 20},\t\t\t    \\\n+  {\"r21\", 21},\t\t\t    \\\n+  {\"r22\", 22},\t\t\t    \\\n+  {\"r23\", 23},\t\t\t    \\\n+  {\"r24\", 24},\t\t\t    \\\n+  {\"r25\", 25},\t\t\t    \\\n+  {\"r26\", 26},\t\t\t    \\\n+  {\"r27\", 27},\t\t\t    \\\n+  {\"r28\", 28},\t\t\t    \\\n+  {\"r29\", 29},\t\t\t    \\\n+  {\"r30\", 30},\t\t\t    \\\n+  {\"r31\", 31},\t\t\t    \\\n+}\n+\n+/* The order in which registers should be allocated.\n+   It is better to use the registers the caller need not save.\n+   Allocate r0 through r3 in reverse order since r3 is least likely\n+   to contain a function parameter; in addition results are returned\n+   in r0.  It is quite good to use lr since other calls may clobber\n+   it anyway.  */\n+#define REG_ALLOC_ORDER\t\t\t\t\t\t\\\n+/*   r3\t   r2\t r1    r0   r12\t  r13\tr18   r19 */\t\t\\\n+  {   3,    2,\t  1,\t0,   12,   13,\t 18,   19,\t\t\\\n+/*  r20\t  r21\tr22   r23   r24\t  r25 */\t\t\t\\\n+     20,   21,\t 22,   23,   24,   25,\t\t\t\t\\\n+/*   r15   r4\t r5   r6     r7\t   r8\t r9   r10   r11 */\t\\\n+     15,    4,\t  5,   6,     7,    8,\t  9,   10,   11,\t\\\n+/*  r16\t  r17\tr26   r27   r28\t  r29\tr30    hi    lo\t */\t\\\n+     16,   17,\t 26,   27,   28,   29,\t 30,   34,   35,\t\\\n+/*  vr0\t  vr1\tvr2   vr3   vr4\t  vr5\tvr6   vr7  */\t\t\\\n+     52,   53,\t 54,   55,   56,   57,\t 58,   59,\t\t\\\n+/*  vr8\t  vr9\tvr10  vr11  vr12  vr13\tvr14  vr15 */\t\t\\\n+     60,   61,\t 62,   63,   64,   65,\t 66,   67,\t\t\\\n+/*  reserved  */\t\t\t\t\t\t\\\n+     36,   37,\t 38,   39,   40,   41,\t 42,   43,\t\t\\\n+     44,   45,\t 46,   47,   48,   49,\t 50,   51,\t\t\\\n+/*  sp\t  tls\treserved     c\t   reserved\t    epc */\t\\\n+     14,   31,\t 32,\t     33,   68,\t 69,\t     70\t }\n+\n+/*  Register classes.  */\n+enum reg_class\n+{\n+  NO_REGS,\n+  MINI_REGS,\n+  SP_REGS,\n+  LOW_REGS,\n+  GENERAL_REGS,\n+  C_REGS,\n+  HI_REGS,\n+  LO_REGS,\n+  HILO_REGS,\n+  V_REGS,\n+  OTHER_REGS,\n+  RESERVE_REGS,\n+  ALL_REGS,\n+  LIM_REG_CLASSES\n+};\n+\n+#define N_REG_CLASSES  (int) LIM_REG_CLASSES\n+\n+/* Give names of register classes as strings for dump file.  */\n+#define REG_CLASS_NAMES \\\n+{\t\t\t\\\n+  \"NO_REGS\",\t\t\\\n+  \"MINI_REGS\",\t\t\\\n+  \"SP_REGS\",\t\t\\\n+  \"LOW_REGS\",\t\t\\\n+  \"GENERAL_REGS\",\t\\\n+  \"C_REGS\",\t\t\\\n+  \"HI_REGS\",\t\t\\\n+  \"LO_REGS\",\t\t\\\n+  \"HILO_REGS\",\t\t\\\n+  \"V_REGS\",\t\t\\\n+  \"OTHER_REGS\",\t\t\\\n+  \"RESERVE_REGS\",\t\\\n+  \"ALL_REGS\",\t\t\\\n+}\n+\n+/* Define which registers fit in which classes.  This is an initializer\n+   for a vector of HARD_REG_SET of length N_REG_CLASSES.  */\n+#define REG_CLASS_CONTENTS\t\t\t\t\t     \\\n+{\t\t\t\t\t\t\t\t     \\\n+  {0x00000000, 0x00000000, 0x00000000 },  /* NO_REGS\t       */    \\\n+  {0x000000FF, 0x00000000, 0x00000000 },  /* MINI_REGS\t       */    \\\n+  {0x00004000, 0x00000000, 0x00000000 },  /* SP_REGS\t       */    \\\n+  {0x0000FFFF, 0x00000000, 0x00000000 },  /* LOW_REGS\t       */    \\\n+  {0xFFFFFFFF, 0x00000000, 0x00000000 },  /* GENERAL_REGS      */    \\\n+  {0x00000000, 0x00000002, 0x00000000 },  /* C_REGS\t       */    \\\n+  {0x00000000, 0x00000004, 0x00000000 },  /* HI_REG\t       */    \\\n+  {0x00000000, 0x00000008, 0x00000000 },  /* LO_REG\t       */    \\\n+  {0x00000000, 0x0000000c, 0x00000000 },  /* HILO_REGS\t       */    \\\n+  {0x00000000, 0xFFF00000, 0x0000000F },  /* V_REGS\t       */    \\\n+  {0x00000000, 0x00000000, 0x00000040 },  /* OTHER_REGS\t       */    \\\n+  {0x00000000, 0x0FF00001, 0x00000030 },  /* RESERVE_REGS      */    \\\n+  {0xFFFFFFFF, 0xFFFFFFFF, 0x0000007F },  /* ALL_REGS\t       */    \\\n+}\n+\n+/* Return register class from regno.  */\n+extern enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER];\n+#define REGNO_REG_CLASS(REGNO) regno_reg_class[REGNO]\n+\n+/* The class value for index registers, and the one for base regs.  */\n+#define INDEX_REG_CLASS\t (CSKY_ISA_FEATURE (2E3) ? GENERAL_REGS : NO_REGS)\n+#define BASE_REG_CLASS\tGENERAL_REGS\n+\n+/* TODO is it necessary to set it to MINI_REGS to emit more 16-bit\n+   instructions?  */\n+#define MODE_BASE_REG_CLASS(MODE) GENERAL_REGS\n+\n+/* The macros REG_OK_FOR..._P assume that the arg is a REG rtx\n+   and check its validity for a certain class.\n+   We have two alternate definitions for each of them.\n+   The usual definition accepts all pseudo regs; the other rejects\n+   them unless they have been allocated suitable hard regs.\n+   The symbol REG_OK_STRICT causes the latter definition to be used.\n+\n+   Most source files want to accept pseudo regs in the hope that\n+   they will get allocated to the class that the insn wants them to be in.\n+   Source files for reload pass need to be strict.\n+   After reload, it makes no difference, since pseudo regs have\n+   been eliminated by then.\n+\n+   The reg_renumber is used to map pseudo regs into hardware\n+   regs, it is set up as a result of register allocation.  */\n+#ifdef REG_OK_STRICT\n+#define REGNO_OK_FOR_BASE_P(REGNO)\t\t       \\\n+  (CSKY_GENERAL_REGNO_P (REGNO)\t\t\t       \\\n+   || CSKY_GENERAL_REGNO_P (reg_renumber[(REGNO)]) )\n+#else\n+#define REGNO_OK_FOR_BASE_P(REGNO)\t\t       \\\n+  (CSKY_GENERAL_REGNO_P (REGNO)\t\t\t       \\\n+   || (REGNO) >= FIRST_PSEUDO_REGISTER)\n+#endif\n+\n+\n+#ifdef REG_OK_STRICT\n+#define REGNO_OK_FOR_INDEX_P(REGNO)\t\t\t\\\n+  (CSKY_GENERAL_REGNO_P (REGNO)\t\t\t\t\\\n+   || CSKY_GENERAL_REGNO_P (reg_renumber[(REGNO)]) )\n+#else\n+#define REGNO_OK_FOR_INDEX_P(REGNO)\t\t      \\\n+  (CSKY_GENERAL_REGNO_P (REGNO)\t\t\t      \\\n+   || (REGNO) >= FIRST_PSEUDO_REGISTER)\n+#endif\n+\n+\n+/******************************************************************\n+ *\t\t\t  Addressing Modes\t\t\t  *\n+ ******************************************************************/\n+\n+\n+/* Recognize any constant value that is a valid address.  */\n+#define CONSTANT_ADDRESS_P(X) \\\n+  (GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF)\n+\n+/* Maximum number of registers that can appear in a valid memory address.\n+   Shifts in addresses can't be by a register.  */\n+#define MAX_REGS_PER_ADDRESS 2\n+\n+\n+/******************************************************************\n+ *\t\t\t  Run-time Target\t\t\t  *\n+ ******************************************************************/\n+\n+\n+#define TARGET_CPU_CPP_BUILTINS()\t\t      \\\n+  csky_cpu_cpp_builtins (pfile)\n+\n+/******************************************************************\n+ *\t\t\tPer-function Data\t\t\t  *\n+ ******************************************************************/\n+\n+\n+/* Initialize data used by insn expanders.  This is called from insn_emit,\n+   once for every function before code is generated.  */\n+#define INIT_EXPANDERS\tcsky_init_expanders ()\n+\n+\n+/******************************************************************\n+ *    Dividing the Output into Sections (Texts, Data, . . . )\t  *\n+ ******************************************************************/\n+\n+\n+/* Switch to the text or data segment.  */\n+#define TEXT_SECTION_ASM_OP  \"\\t.text\"\n+#define DATA_SECTION_ASM_OP  \"\\t.data\"\n+\n+/* The subroutine calls in the .init and .fini sections create literal\n+   pools which must be jumped around...  */\n+#define FORCE_CODE_SECTION_ALIGN    \\\n+  asm (\"br 1f ; .literals ; .align 2 ; 1:\");\n+\n+/* Define this macro to be an expression with a nonzero value if\n+   jump tables (for tablejump insns) should be output in the text section,\n+   along with the assembler instructions.  */\n+#define JUMP_TABLES_IN_TEXT_SECTION TARGET_CASESI\n+\n+\n+/******************************************************************\n+ *\t\t\tAssembler Format\t\t\t  *\n+ ******************************************************************/\n+\n+\n+/* A C string constant for text to be output before(after) each asm\n+   statement or group of consecutive ones.  */\n+#undef\tASM_APP_ON\n+#define ASM_APP_ON    \"// inline asm begin\\n\"\n+#undef\tASM_APP_OFF\n+#define ASM_APP_OFF   \"// inline asm end\\n\"\n+\n+/* A C string constant describing how to begin a comment in the target\n+   assembler language.  */\n+#define ASM_COMMENT_START \"\\t//\"\n+\n+/* This says how to output an assembler line\n+   to define a global common symbol, with alignment information.  */\n+#undef\tASM_OUTPUT_ALIGNED_COMMON\n+#define ASM_OUTPUT_ALIGNED_COMMON(STREAM, NAME, SIZE, ALIGN)\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fputs (\"\\t.comm\\t\", STREAM);\t\t\t\t\\\n+      assemble_name (STREAM, NAME);\t\t\t\t\\\n+      fprintf (STREAM, \",%lu, %u\\n\", (unsigned long)(SIZE),\t\\\n+\t       (ALIGN) / BITS_PER_UNIT);\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+/* Define a local common symbol whose alignment we wish to specify.\n+   ALIGN comes in as bits, we have to turn it into bytes.  */\n+#undef\tASM_OUTPUT_ALIGNED_LOCAL\n+#define ASM_OUTPUT_ALIGNED_LOCAL(STREAM, NAME, SIZE, ALIGN)\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  fputs (\"\\t.bss\\t\", (STREAM));\t\t\t\t\t\\\n+  assemble_name ((STREAM), (NAME));\t\t\t\t\\\n+  fprintf ((STREAM), \",%d, %d\\n\", (int)(SIZE),\t\t\t\\\n+\t   (ALIGN) / BITS_PER_UNIT);\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+/* Globalizing directive for a label.  */\n+#define GLOBAL_ASM_OP \"\\t.global\\t\"\n+\n+/* Output a reference to a label.  */\n+#undef\tASM_OUTPUT_LABELREF\n+#define ASM_OUTPUT_LABELREF(STREAM, NAME)     \\\n+  fprintf (STREAM, \"%s%s\", user_label_prefix, \\\n+\t   (* targetm.strip_name_encoding) (NAME))\n+\n+/* Make an internal label into a string.  */\n+#undef\tASM_GENERATE_INTERNAL_LABEL\n+#define ASM_GENERATE_INTERNAL_LABEL(STRING, PREFIX, NUM)  \\\n+  sprintf (STRING, \"*.%s%ld\", PREFIX, (long) NUM)\n+\n+/* This is how to output an insn to push a register on the stack.\n+   It need not be very fast code.  */\n+#define ASM_OUTPUT_REG_PUSH(STREAM,REGNO)\t\t    \\\n+  fprintf (STREAM, \"\\tsubi\\t %s,%d\\n\\tst.w\\t %s,(%s)\\n\",    \\\n+\t   reg_names[STACK_POINTER_REGNUM],\t\t    \\\n+\t   (STACK_BOUNDARY / BITS_PER_UNIT),\t\t    \\\n+\t   reg_names[REGNO],\t\t\t\t    \\\n+\t   reg_names[STACK_POINTER_REGNUM])\n+\n+/* This is how to output an insn to pop a register from the stack.  */\n+#define ASM_OUTPUT_REG_POP(STREAM,REGNO)\t\t    \\\n+  fprintf (STREAM, \"\\tld.w\\t %s,(%s)\\n\\taddi\\t %s,%d\\n\",    \\\n+\t   reg_names[REGNO],\t\t\t\t    \\\n+\t   reg_names[STACK_POINTER_REGNUM],\t\t    \\\n+\t   reg_names[STACK_POINTER_REGNUM],\t\t    \\\n+\t   (STACK_BOUNDARY / BITS_PER_UNIT))\n+\n+/* Output an element of a dispatch table.  */\n+#define ASM_OUTPUT_ADDR_VEC_ELT(STREAM,VALUE)  \\\n+  fprintf (STREAM, \"\\t.long\\t.L%d\\n\", VALUE)\n+\n+/* This is how to output an assembler line\n+   that says to advance the location counter by SIZE bytes.  */\n+#undef\tASM_OUTPUT_SKIP\n+#define ASM_OUTPUT_SKIP(STREAM,SIZE)  \\\n+  fprintf (STREAM, \"\\t.fill %d, 1\\n\", (int)(SIZE))\n+\n+/* Align output to a power of two.  Note \".align 0\" is redundant,\n+   and also GAS will treat it as \".align 2\" which we do not want.  */\n+#define ASM_OUTPUT_ALIGN(STREAM, POWER)\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      if ((POWER) > 0)\t\t\t\t\t\\\n+\tfprintf (STREAM, \"\\t.align\\t%d\\n\", POWER);\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+\n+/******************************************************************\n+ *\t\tControlling the Compilation Driver\t\t  *\n+ ******************************************************************/\n+\n+\n+/* Define this macro as a C expression for the initializer of an\n+   array of string to tell the driver program which options are\n+   defaults for this target and thus do not need to be handled\n+   specially when using MULTILIB_OPTIONS.  */\n+#undef MULTILIB_DEFAULTS\n+#define MULTILIB_DEFAULTS    \\\n+    {\"mlittle-endian\", \"mcpu=ck810f\", \"msoft-float\"}\n+\n+/* Support for a compile-time default CPU, et cetera.  The rules are:\n+   --with-arch is ignored if -march or -mcpu are specified.\n+   --with-cpu is ignored if -march or -mcpu are specified, and is overridden\n+    by --with-arch. */\n+#define OPTION_DEFAULT_SPECS \\\n+  {\"arch\", \"%{!march=*:%{!mcpu=*:-march=%(VALUE)}}\" }, \\\n+  {\"cpu\", \"%{!march=*:%{!mcpu=*:-mcpu=%(VALUE)}}\" }, \\\n+  {\"endian\", \"%{!mbig-endian:%{!mlittle-endian:-m%(VALUE)-endian}}\" }, \\\n+  {\"float\", \"%{!msoft-float:%{!mhard-float:-m%(VALUE)-float}}\" },\n+\n+\n+/******************************************************************\n+ *\t\t      Position Independent Code\t\t\t  *\n+ ******************************************************************/\n+\n+/* Define the global table register.  */\n+#define PIC_OFFSET_TABLE_REGNUM (flag_pic ? CSKY_GB_REGNUM : INVALID_REGNUM)\n+\n+/* Nonzero if x is a legitimate immediate operand on the target machine\n+   when generating position-independent code.  */\n+#define LEGITIMATE_PIC_OPERAND_P(X) \\\n+  csky_legitimate_pic_operand_p (X)\n+\n+\n+/******************************************************************\n+ *\t      Controlling Debugging Information Format\t\t  *\n+ ******************************************************************/\n+\n+\n+/* Define this macro if GCC should produce dwarf version 2 format debugging\n+   output in response to the `-g' option.  */\n+#define DWARF2_DEBUGGING_INFO 1\n+\n+/* Define this macro to 0 if your target supports DWARF 2 frame unwind\n+   information, but it does not yet work with exception handling.  */\n+#define DWARF2_UNWIND_INFO 1\n+\n+/* Define this if you have arranged for GCC to support\n+   more than one format of debugging output.\n+   The value of this macro only affects the default debugging output.  */\n+#define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n+\n+/* Define this macro if the target\u2019s representation\n+   for dwarf registers used in .eh_frame or .debug_frame\n+   is different from that used in other debug info sections.\n+   Given a GCC hard register number,\n+   this macro should return the .eh_frame register number.*/\n+#define DWARF_FRAME_REGNUM(REG)\t DBX_REGISTER_NUMBER (REG)\n+\n+/* If INCOMING_RETURN_ADDR_RTX is defined & the RTL is REG,\n+   define DWARF_FRAME_RETURN_COLUMN to DWARF_FRAME_REGNUM.  */\n+#define DWARF_FRAME_RETURN_COLUMN DWARF_FRAME_REGNUM (CSKY_LR_REGNUM)\n+\n+/* Use r0 and r1 to pass exception handling information.  */\n+#define EH_RETURN_DATA_REGNO(N) ((N) < 2 ? N : INVALID_REGNUM)\n+\n+/* How to renumber registers for dbx and gdb.  */\n+extern const int csky_dbx_regno[];\n+#define DBX_REGISTER_NUMBER(REGNO) ((unsigned int) csky_dbx_regno[REGNO])\n+\n+\n+/******************************************************************\n+ *\t\t      Miscellaneous Parameters\t\t\t  *\n+ ******************************************************************/\n+\n+\n+/* Specify the machine mode that this machine uses\n+   for the index in the tablejump instruction.  */\n+#define CASE_VECTOR_MODE SImode\n+\n+/* Define if operations between registers always perform the operation\n+   on the full register even if a narrower mode is specified.  */\n+#define WORD_REGISTER_OPERATIONS 1\n+\n+/* Define if loading in MODE, an integral mode narrower than BITS_PER_WORD\n+   will either zero-extend or sign-extend.  The value of this macro should\n+   be the code that says which one of the two operations is implicitly\n+   done, UNKNOWN if none.  */\n+#define LOAD_EXTEND_OP(MODE) ZERO_EXTEND\n+\n+/* Max number of bytes we can move from memory to memory\n+   in one reasonably fast instruction.  */\n+#define MOVE_MAX 4\n+\n+/* Shift counts are truncated to 6-bits (0 to 63) instead of the expected\n+   5-bits, so we can not define SHIFT_COUNT_TRUNCATED to true for this\n+   target.  */\n+#define SHIFT_COUNT_TRUNCATED 0\n+\n+#define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) ((VALUE) = 32, 1)\n+\n+/* The machine modes of pointers and functions.  */\n+#define Pmode  SImode\n+#define FUNCTION_MODE  Pmode\n+\n+/* Define this macro to be a C expression to indicate when jump-tables\n+   should contain relative addresses.  */\n+#define CASE_VECTOR_PC_RELATIVE \\\n+  (optimize_size && TARGET_CONSTANT_POOL \\\n+   && (CSKY_TARGET_ARCH (CK802) || CSKY_TARGET_ARCH (CK801)))\n+\n+/* Return the preferred mode for an addr_diff_vec when the minimum\n+   and maximum offset are known.  */\n+#define CASE_VECTOR_SHORTEN_MODE(min, max, body)\t\t    \\\n+  (min >= 0 && max < 512\t\t\t\t\t    \\\n+   ? (ADDR_DIFF_VEC_FLAGS (body).offset_unsigned = 1, QImode)\t    \\\n+   : min >= -256 && max < 256\t\t\t\t\t    \\\n+     ? (ADDR_DIFF_VEC_FLAGS (body).offset_unsigned = 0, QImode)\t    \\\n+     : min >= 0 && max < 8192\t\t\t\t\t    \\\n+       ? (ADDR_DIFF_VEC_FLAGS (body).offset_unsigned = 1, HImode)   \\\n+       : min >= -4096 && max < 4096\t\t\t\t    \\\n+\t ? (ADDR_DIFF_VEC_FLAGS (body).offset_unsigned = 0, HImode) \\\n+\t : SImode)\n+\n+/* This is how to output an element of a case-vector that is relative.  */\n+#define ASM_OUTPUT_ADDR_DIFF_ELT(STREAM, BODY, VALUE, REL)\t    \\\n+  do\t\t\t\t\t\t\t\t    \\\n+    {\t\t\t\t\t\t\t\t    \\\n+      if (optimize_size && TARGET_CONSTANT_POOL\t\t\t    \\\n+\t  && (CSKY_TARGET_ARCH (CK802) || CSKY_TARGET_ARCH (CK801)))  \\\n+\t{\t\t\t\t\t\t\t    \\\n+\t  switch (GET_MODE (BODY))\t\t\t\t    \\\n+\t    {\t\t\t\t\t\t\t    \\\n+\t    case E_QImode:\t\t\t\t\t    \\\n+\t      asm_fprintf (STREAM, \"\\t.byte\\t(.L%d-.L%d)/2\\n\",\t    \\\n+\t\t\t   VALUE, REL);\t\t\t\t    \\\n+\t      break;\t\t\t\t\t\t    \\\n+\t    case E_HImode: /* TBH */\t\t\t\t    \\\n+\t      asm_fprintf (STREAM, \"\\t.short\\t(.L%d-.L%d)/2\\n\",\t    \\\n+\t\t\t   VALUE, REL);\t\t\t\t    \\\n+\t      break;\t\t\t\t\t\t    \\\n+\t    case E_SImode:\t\t\t\t\t    \\\n+\t      asm_fprintf (STREAM, \"\\t.long\\t.L%d-.L%d\\n\",\t    \\\n+\t\t\t   VALUE, REL);\t\t\t\t    \\\n+\t      break;\t\t\t\t\t\t    \\\n+\t    default:\t\t\t\t\t\t    \\\n+\t      gcc_unreachable ();\t\t\t\t    \\\n+\t    }\t\t\t\t\t\t\t    \\\n+\t}\t\t\t\t\t\t\t    \\\n+      else\t\t\t\t\t\t\t    \\\n+\tasm_fprintf (STREAM, \"\\t.long\\t.L%d@GOTOFF\\n\", VALUE);\t    \\\n+    } while (0)\n+\n+/* This macro is not documented yet.\n+   But we do need it to make jump table vector aligned.  */\n+#define ADDR_VEC_ALIGN(JUMPTABLE) 0\n+\n+/* We have to undef this first to override the version from elfos.h.  */\n+#undef\tASM_OUTPUT_CASE_LABEL\n+#define ASM_OUTPUT_CASE_LABEL(stream, prefix, num, table)\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (GET_MODE (PATTERN (table)) == SImode)\t\t\t\\\n+\tASM_OUTPUT_ALIGN (stream, 2);\t\t\t\t\\\n+      (*targetm.asm_out.internal_label) (stream, prefix, num);\t\\\n+    } while (0)\n+\n+/* Make sure subsequent insns are aligned after a byte-sized jump offset\n+   table.  */\n+#define ASM_OUTPUT_CASE_END(stream, num, table)\t  \\\n+  do\t\t\t\t\t\t  \\\n+    {\t\t\t\t\t\t  \\\n+      if (GET_MODE (PATTERN (table)) == QImode)\t  \\\n+\tASM_OUTPUT_ALIGN (stream, 1);\t\t  \\\n+    } while (0)\n+\n+\n+\n+\n+/******************************************************************\n+ *\t\t  Trampolines for Nested Functions\t\t  *\n+ ******************************************************************/\n+\n+\n+/* Length in units of the trampoline for entering a nested function.  */\n+#define TRAMPOLINE_SIZE\t (CSKY_ISA_FEATURE (2E3) ? 16 : 20)\n+\n+/* Alignment required for a trampoline in bits.  */\n+#define TRAMPOLINE_ALIGNMENT  32\n+\n+\n+/******************************************************************\n+ *\t      Describing Relative Costs of Operations\t\t  *\n+ ******************************************************************/\n+\n+\n+/* Nonzero if access to memory by bytes is slow and undesirable.\n+   For RISC chips, it means that access to memory by bytes is no\n+   better than access by words when possible, so grab a whole word\n+   and maybe make use of that.  */\n+#define SLOW_BYTE_ACCESS  0\n+\n+/* On C-SKY, function CSE would allow use of 16-bit jsr instructions\n+   instead of normal 32-bit calls.  But it also needs a separate constant\n+   pool entry for the function address and an instruction to load it, and\n+   may cause additional spills due to increased register pressure, etc.\n+   It doesn't seem like a good idea overall.  */\n+#define NO_FUNCTION_CSE 1\n+\n+/* Try to generate sequences that don't involve branches, we can then use\n+   conditional instructions.  */\n+#define BRANCH_COST(speed_p, predictable_p)\t\t\t\\\n+  csky_default_branch_cost (speed_p, predictable_p)\n+\n+/* False if short circuit operation is preferred.  */\n+#define LOGICAL_OP_NON_SHORT_CIRCUIT \\\n+  (csky_default_logical_op_non_short_circuit ())\n+\n+\n+/******************************************************************\n+ *\t\t   Generating Code for Profiling\t\t  *\n+ ******************************************************************/\n+\n+\n+#define FUNCTION_PROFILER(FILE, LABELNO)\n+\n+#endif /* GCC_CSKY_H */"}, {"sha": "4f6329d143a499139ceee4ebba31b05c368756cf", "filename": "gcc/config/csky/csky.md", "status": "added", "additions": 3798, "deletions": 0, "changes": 3798, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky.md?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0"}, {"sha": "55d2659e2f7b04f07e2cbdee7847fecbb51a709a", "filename": "gcc/config/csky/csky.opt", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky.opt?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0", "patch": "@@ -0,0 +1,173 @@\n+;; Command-line options for the C-SKY back end.\n+;; Copyright (C) 2018 Free Software Foundation, Inc.\n+;; Contributed by C-SKY Microsystems and Mentor Graphics.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it under\n+;; the terms of the GNU General Public License as published by the Free\n+;; Software Foundation; either version 3, or (at your option) any later\n+;; version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+;; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+;; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+;; for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+\n+HeaderInclude\n+config/csky/csky_opts.h\n+\n+;; Architecture/CPU options.\n+;; Normal CPU and arch enums are loaded from csky_tables.opt.\n+\n+; For backward compatibility only.\n+march=ck803s\n+Target Report Var(flag_arch_ck803s) Undocumented\n+\n+march=\n+Target RejectNegative ToLower Joined Enum(csky_arch) Var(csky_arch_option) Save\n+Specify the target architecture.\n+\n+mcpu=\n+Target RejectNegative ToLower Joined Enum(csky_processor_type) Var(csky_cpu_option) Init(TARGET_CPU_csky_none) Save\n+Specify the target processor.\n+\n+;; Endianness options.\n+\n+mbig-endian\n+Target RejectNegative Report Mask(BIG_ENDIAN)\n+Generate big-endian code.\n+\n+EB\n+Target RejectNegative Report Alias(mbig-endian) Undocumented\n+\n+mlittle-endian\n+Target RejectNegative Report InverseMask(BIG_ENDIAN)\n+Generate little-endian code.\n+\n+EL\n+Target RejectNegative Report Alias(mlittle-endian) Undocumented\n+\n+;; Floating point options.  These affect code generation but not\n+;; assembly.\n+\n+mhard-float\n+Target Report RejectNegative Mask(HARD_FLOAT)\n+Enable hardware floating-point instructions.\n+\n+msoft-float\n+Target Report RejectNegative InverseMask(HARD_FLOAT)\n+Use library calls to perform floating-point operations (default).\n+\n+mfpu=\n+Target RejectNegative Joined Enum(csky_fpu) Var(csky_fpu_index) Init(TARGET_FPU_auto) Save\n+Specify the target floating-point hardware/format.\n+\n+mdouble-float\n+Target Report Var(TARGET_DOUBLE_FLOAT) Init(-1)\n+Generate C-SKY FPU double float instructions (default for hard float).\n+\n+mfdivdu\n+Target Report Var(TARGET_FDIVDU) Init(-1)\n+Generate frecipd/fsqrtd/fdivd instructions (default for hard float).\n+\n+;; Instruction set extensions.  Most of these don't affect code\n+;; generation, and are passed through to the assembler.\n+;; There are builtin preprocessor defines for each of these.\n+\n+melrw\n+Target Report Var(TARGET_ELRW) Init(-1)\n+Enable the extended LRW instruction (default for CK801).\n+\n+mistack\n+Target Report Mask(ISTACK)\n+Enable interrupt stack instructions.\n+\n+mmp\n+Target Report RejectNegative Mask(MP)\n+Enable multiprocessor instructions.\n+\n+mcp\n+Target Report RejectNegative Mask(CP)\n+Enable coprocessor instructions.\n+\n+mcache\n+Target Report RejectNegative Mask(CACHE)\n+Enable cache prefetch instructions.\n+\n+msecurity\n+Target Report RejectNegative Mask(SECURITY)\n+Enable C-SKY SECURE instructions.\n+\n+mmac\n+Target Report RejectNegative Alias(msecurity) Undocumented\n+\n+mtrust\n+Target Report RejectNegative Mask(TRUST)\n+Enable C-SKY TRUST instructions.\n+\n+mdsp\n+Target Report RejectNegative Var(TARGET_DSP)\n+Enable C-SKY DSP instructions.\n+\n+medsp\n+Target Report RejectNegative Mask(EDSP)\n+Enable C-SKY Enhanced DSP instructions.\n+\n+mvdsp\n+Target Report RejectNegative Mask(VDSP)\n+Enable C-SKY Vector DSP instructions.\n+\n+;; Code generation options not passed to the assembler.\n+\n+mdiv\n+Target Report Var(TARGET_DIV) Init(-1)\n+Generate divide instructions.\n+\n+msmart\n+Target Report Var(TARGET_MINI_REGISTERS) Init(-1)\n+Generate code for Smart Mode.\n+\n+mhigh-registers\n+Target Report Var(TARGET_HIGH_REGISTERS) Init(-1)\n+Enable use of R16-R31 (default).\n+\n+manchor\n+Target Report Var(TARGET_ANCHOR)\n+Generate code using global anchor symbol addresses.\n+\n+mpushpop\n+Target Report Var(TARGET_PUSHPOP) Init(1)\n+Generate push/pop instructions (default).\n+\n+mmultiple-stld\n+Target Report Var(TARGET_MULTIPLE_STLD) Init(-1)\n+Generate stm/ldm instructions (default).\n+\n+mstm\n+Target Report Alias(mmultiple-stld) Undocumented\n+\n+mconstpool\n+Target Report Var(TARGET_CONSTANT_POOL) Init(-1)\n+Generate constant pools in the compiler instead of assembler.\n+\n+mstack-size\n+Target Report Var(TARGET_STACK_SIZE) Init(0)\n+Emit .stack_size directives.\n+\n+mccrt\n+Target Report Var(TARGET_LIBCCRT) Init(0)\n+Generate code for C-SKY compiler runtime instead of libgcc.\n+\n+mbranch-cost=\n+Target Report Joined RejectNegative UInteger Var(csky_branch_cost) Init(1)\n+Set the branch costs to roughly the specified number of instructions.\n+\n+msched-prolog\n+Target Report Var(flag_sched_prolog) Init(0)\n+Permit scheduling of function prologue and epilogue sequences."}, {"sha": "5159a073360a9082e30803a1b4e0605a4814ec23", "filename": "gcc/config/csky/csky_cores.def", "status": "added", "additions": 199, "deletions": 0, "changes": 199, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky_cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky_cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky_cores.def?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0", "patch": "@@ -0,0 +1,199 @@\n+/* Architecture and core descriptions for the C-SKY back end.\n+   Copyright (C) 2018 Free Software Foundation, Inc.\n+   Contributed by C-SKY Microsystems and Mentor Graphics.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Before using #include to read this file, define a macro:\n+\n+      CSKY_ARCH(NAME, CORE, ARCH, ISA)\n+\n+   The NAME is the name of the architecture, represented as a string\n+   constant.  The CORE is the identifier for a core representative of\n+   this architecture.  ARCH is the architecture revision.  ISA is the\n+   detailed architectural capabilities of the core.  */\n+\n+#ifdef CSKY_ARCH\n+CSKY_ARCH (\"ck801\",  ck801,  CK801,\n+\t   CSKY_ISA_FEAT (CSKY_ISA_CK801))\n+CSKY_ARCH (\"ck802\",  ck802,  CK802,\n+\t   CSKY_ISA_FEAT (CSKY_ISA_CK802))\n+CSKY_ARCH (\"ck803\",  ck803,  CK803,\n+\t   CSKY_ISA_FEAT (CSKY_ISA_CK803))\n+CSKY_ARCH (\"ck807\",  ck807,  CK807,\n+\t   CSKY_ISA_FEAT (CSKY_ISA_CK807) CSKY_ISA_FEAT (CSKY_ISA_DSP))\n+CSKY_ARCH (\"ck810\",  ck810,  CK810,\n+\t   CSKY_ISA_FEAT (CSKY_ISA_CK810) CSKY_ISA_FEAT (CSKY_ISA_DSP))\n+#endif\n+\n+\n+/* Before using #include to read this file, define a macro:\n+\n+      CSKY_CORE(CORE_NAME, INTERNAL_IDENT, TUNE_IDENT, ARCH, ISA)\n+\n+      The isa features of core will inherit the ARCH.\n+\n+   The CORE_NAME is the name of the core, represented as a string constant.\n+   The INTERNAL_IDENT is the name of the core represented as an identifier.\n+   This must be unique for each entry in this table.\n+   The TUNE_IDENT is the name of the core for which scheduling decisions\n+   should be made, represented as an identifier.\n+   The ARCH is the architecture revision implemented by the chip.\n+   The ISA is the detailed architectural capabilities of the core.  */\n+\n+#ifdef CSKY_CORE\n+/* ck801 Architecture Processors */\n+CSKY_CORE (\"ck801\",    ck801,\t ck801,\t   CK801,\n+\t   CSKY_ISA_FEAT_NONE)\n+CSKY_CORE (\"ck801t\",   ck801t,\t ck801t,   CK801,\n+\t   CSKY_ISA_FEAT_NONE)\n+\n+/* ck802 Architecture Processors */\n+CSKY_CORE (\"ck802\",    ck802,\t ck802,\t   CK802,\n+\t   CSKY_ISA_FEAT_NONE)\n+CSKY_CORE (\"ck802t\",   ck802t,\t ck802t,   CK802,\n+\t   CSKY_ISA_FEAT_NONE)\n+CSKY_CORE (\"ck802j\",   ck802j,\t ck802j,   CK802,\n+\t   CSKY_ISA_FEAT (isa_bit_java))\n+\n+/* ck803 Architecture Processors */\n+CSKY_CORE (\"ck803\",    ck803,\t ck803,\t   CK803,\n+\t   CSKY_ISA_FEAT_NONE)\n+CSKY_CORE (\"ck803h\",   ck803h,\t ck803h,   CK803,\n+\t   CSKY_ISA_FEAT_NONE)\n+CSKY_CORE (\"ck803t\",   ck803t,\t ck803t,   CK803,\n+\t   CSKY_ISA_FEAT_NONE)\n+CSKY_CORE (\"ck803ht\",  ck803ht,\t ck803ht,  CK803,\n+\t   CSKY_ISA_FEAT_NONE)\n+CSKY_CORE (\"ck803f\",   ck803f,\t ck803f,   CK803,\n+\t   CSKY_ISA_FEAT_NONE)\n+CSKY_CORE (\"ck803fh\",  ck803fh,\t ck803fh,  CK803,\n+\t   CSKY_ISA_FEAT_NONE)\n+CSKY_CORE (\"ck803e\",   ck803e,\t ck803e,   CK803,\n+\t   CSKY_ISA_FEAT (CSKY_ISA_DSP))\n+CSKY_CORE (\"ck803eh\",  ck803eh,\t ck803eh,  CK803,\n+\t   CSKY_ISA_FEAT (CSKY_ISA_DSP))\n+CSKY_CORE (\"ck803et\",  ck803et,\t ck803et,  CK803,\n+\t   CSKY_ISA_FEAT (CSKY_ISA_DSP))\n+CSKY_CORE (\"ck803eht\", ck803eht, ck803eht, CK803,\n+\t   CSKY_ISA_FEAT (CSKY_ISA_DSP))\n+CSKY_CORE (\"ck803ef\",  ck803ef,\t ck803ef,  CK803,\n+\t   CSKY_ISA_FEAT (CSKY_ISA_DSP))\n+CSKY_CORE (\"ck803efh\", ck803efh, ck803efh, CK803,\n+\t   CSKY_ISA_FEAT (CSKY_ISA_DSP))\n+CSKY_CORE (\"ck803ft\",  ck803ft,\t ck803ft,  CK803,\n+\t   CSKY_ISA_FEAT_NONE)\n+CSKY_CORE (\"ck803eft\", ck803eft, ck803eft, CK803,\n+\t   CSKY_ISA_FEAT (CSKY_ISA_DSP))\n+CSKY_CORE (\"ck803efht\", ck803efht, ck803efht, CK803,\n+\t   CSKY_ISA_FEAT (CSKY_ISA_DSP))\n+CSKY_CORE (\"ck803r1\",\t ck803r1,    ck803r1,\t CK803,\n+\t   CSKY_ISA_FEAT (isa_bit_3E3r1))\n+CSKY_CORE (\"ck803hr1\",\t ck803hr1,   ck803hr1,\t CK803,\n+\t   CSKY_ISA_FEAT (isa_bit_3E3r1))\n+CSKY_CORE (\"ck803tr1\",\t ck803tr1,   ck803tr1,\t CK803,\n+\t   CSKY_ISA_FEAT (isa_bit_3E3r1))\n+CSKY_CORE (\"ck803htr1\",\t ck803htr1,  ck803htr1,\t CK803,\n+\t   CSKY_ISA_FEAT (isa_bit_3E3r1))\n+CSKY_CORE (\"ck803fr1\",\t ck803fr1,   ck803fr1,\t CK803,\n+\t   CSKY_ISA_FEAT (isa_bit_3E3r1))\n+CSKY_CORE (\"ck803fhr1\",\t ck803fhr1,  ck803fhr1,\t CK803,\n+\t   CSKY_ISA_FEAT (isa_bit_3E3r1))\n+CSKY_CORE (\"ck803er1\",\t ck803er1,   ck803er1,\t CK803,\n+\t   CSKY_ISA_FEAT (isa_bit_3E3r1))\n+CSKY_CORE (\"ck803ehr1\",\t ck803ehr1,  ck803ehr1,\t CK803,\n+\t   CSKY_ISA_FEAT (isa_bit_3E3r1))\n+CSKY_CORE (\"ck803etr1\",\t ck803etr1,  ck803etr1,\t CK803,\n+\t   CSKY_ISA_FEAT (isa_bit_3E3r1))\n+CSKY_CORE (\"ck803ehtr1\", ck803ehtr1, ck803ehtr1, CK803,\n+\t   CSKY_ISA_FEAT (isa_bit_3E3r1))\n+CSKY_CORE (\"ck803efr1\",\t ck803efr1,  ck803efr1,\t CK803,\n+\t   CSKY_ISA_FEAT (isa_bit_3E3r1))\n+CSKY_CORE (\"ck803efhr1\", ck803efhr1, ck803efhr1, CK803,\n+\t   CSKY_ISA_FEAT (isa_bit_3E3r1))\n+CSKY_CORE (\"ck803ftr1\",\t ck803ftr1,  ck803ftr1,\t CK803,\n+\t   CSKY_ISA_FEAT (isa_bit_3E3r1))\n+CSKY_CORE (\"ck803eftr1\", ck803eftr1, ck803eftr1, CK803,\n+\t   CSKY_ISA_FEAT (isa_bit_3E3r1))\n+CSKY_CORE (\"ck803efhtr1\", ck803efhtr1, ck803efhtr1, CK803,\n+\t   CSKY_ISA_FEAT (isa_bit_3E3r1))\n+\n+/* ck803s Architecture Processors */\n+CSKY_CORE (\"ck803s\",   ck803s,\t ck803s,   CK803,\n+\t   CSKY_ISA_FEAT_NONE)\n+CSKY_CORE (\"ck803st\",  ck803st,\t ck803st,  CK803,\n+\t   CSKY_ISA_FEAT_NONE)\n+CSKY_CORE (\"ck803se\",  ck803se,\t ck803se,  CK803,\n+\t   CSKY_ISA_FEAT (CSKY_ISA_DSP))\n+CSKY_CORE (\"ck803sf\",  ck803sf,\t ck803sf,  CK803,\n+\t   CSKY_ISA_FEAT_NONE)\n+CSKY_CORE (\"ck803sef\", ck803sef, ck803sef, CK803,\n+\t   CSKY_ISA_FEAT (CSKY_ISA_DSP))\n+CSKY_CORE (\"ck803seft\", ck803seft, ck803seft, CK803,\n+\t   CSKY_ISA_FEAT (CSKY_ISA_DSP))\n+\n+/* ck807 Architecture Processors */\n+CSKY_CORE (\"ck807e\",   ck807e,\t ck807e,   CK807,\n+\t   CSKY_ISA_FEAT_NONE)\n+CSKY_CORE (\"ck807ef\",  ck807ef,\t ck807ef,  CK807,\n+\t   CSKY_ISA_FEAT_NONE)\n+CSKY_CORE (\"ck807\",    ck807,\t ck807,\t   CK807,\n+\t   CSKY_ISA_FEAT_NONE)\n+CSKY_CORE (\"ck807f\",   ck807f,\t ck807f,   CK807,\n+\t   CSKY_ISA_FEAT_NONE)\n+\n+/* ck810 Architecture Processors */\n+CSKY_CORE (\"ck810e\",   ck810e,\t ck810e,   CK810,\n+\t   CSKY_ISA_FEAT_NONE)\n+CSKY_CORE (\"ck810et\",  ck810et,\t ck810et,  CK810,\n+\t   CSKY_ISA_FEAT_NONE)\n+CSKY_CORE (\"ck810ef\",  ck810ef,\t ck810ef,  CK810,\n+\t   CSKY_ISA_FEAT_NONE)\n+CSKY_CORE (\"ck810eft\", ck810eft, ck810eft, CK810,\n+\t   CSKY_ISA_FEAT_NONE)\n+CSKY_CORE (\"ck810\",    ck810,\t ck810,\t   CK810,\n+\t   CSKY_ISA_FEAT_NONE)\n+CSKY_CORE (\"ck810v\",   ck810v,\t ck810v,   CK810,\n+\t   CSKY_ISA_FEAT_NONE)\n+CSKY_CORE (\"ck810f\",   ck810f,\t ck810f,   CK810,\n+\t   CSKY_ISA_FEAT_NONE)\n+CSKY_CORE (\"ck810t\",   ck810t,\t ck810t,   CK810,\n+\t   CSKY_ISA_FEAT_NONE)\n+CSKY_CORE (\"ck810fv\",  ck810fv,\t ck810fv,  CK810,\n+\t   CSKY_ISA_FEAT_NONE)\n+CSKY_CORE (\"ck810tv\",  ck810tv,\t ck810tv,  CK810,\n+\t   CSKY_ISA_FEAT_NONE)\n+CSKY_CORE (\"ck810ft\",  ck810ff,\t ck810ft,  CK810,\n+\t   CSKY_ISA_FEAT_NONE)\n+CSKY_CORE (\"ck810ftv\", ck810ftv, ck810ftv, CK810,\n+\t   CSKY_ISA_FEAT_NONE)\n+#endif\n+\n+\n+/* Before using #include to read this file, define a macro:\n+\n+      CSKY_FPU(NAME, CNAME, ISA)\n+\n+   NAME is the publicly visible option name.\n+   CNAME is a C-compatible variable name substring.\n+   ISA is the list of feature bits that this FPU provides.  */\n+\n+#ifdef CSKY_FPU\n+CSKY_FPU (\"fpv2_sf\",   fpv2_sf,\t  CSKY_ISA_FEAT (CSKY_ISA_FPv2_SF))\n+CSKY_FPU (\"fpv2\",      fpv2,\t  CSKY_ISA_FEAT (CSKY_ISA_FPv2))\n+CSKY_FPU (\"fpv2_divd\", fpv2_divd, CSKY_ISA_FEAT (CSKY_ISA_FPv2_DIVD))\n+#endif"}, {"sha": "bf145a4472791bd0554b3adc62d1f9c3bd702427", "filename": "gcc/config/csky/csky_genopt.sh", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky_genopt.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky_genopt.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky_genopt.sh?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0", "patch": "@@ -0,0 +1,97 @@\n+#!/bin/sh\n+# Generate csky_tables.opt from the lists in *.def.\n+# Copyright (C) 2018 Free Software Foundation, Inc.\n+# Contributed by C-SKY Microsystems and Mentor Graphics.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+cat <<EOF\n+; -*- buffer-read-only: t -*-\n+; Generated automatically by csky_genopt.sh from csky_cores.def.\n+\n+; Copyright (C) 2018 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+Enum\n+Name(csky_processor_type) Type(enum csky_processor_type)\n+Known CSKY CPUs (for use with the -mcpu= options):\n+\n+EOF\n+\n+awk -F'[(, \t]+' '/^CSKY_CORE/ {\n+    name = $2\n+    enum = $3\n+    gsub(\"\\\"\", \"\", name)\n+    print \"EnumValue\"\n+    print \"Enum(csky_processor_type) String(\" name \") Value( TARGET_CPU_\" enum \")\"\n+    print \"\"\n+}' $1/csky_cores.def\n+\n+cat <<EOF\n+Enum\n+Name(csky_arch) Type(int)\n+Known CSKY architectures (for use with the -march= option):\n+\n+EOF\n+\n+awk -F'[(, \t]+' 'BEGIN {\n+    value = 0\n+}\n+/^CSKY_ARCH/ {\n+    name = $2\n+    gsub(\"\\\"\", \"\", name)\n+    print \"EnumValue\"\n+    print \"Enum(csky_arch) String(\" name \") Value(\" value \")\"\n+    print \"\"\n+    value++\n+}' $1/csky_cores.def\n+\n+cat <<EOF\n+Enum\n+Name(csky_fpu) Type(enum csky_fpu_type)\n+Known CSKY FPUs (for use with the -mfpu= option):\n+\n+EOF\n+\n+awk -F'[(, \t]+' '\n+/^CSKY_FPU/ {\n+    name = $2\n+    enum = $3\n+    gsub(\"\\\"\", \"\", name)\n+    print \"EnumValue\"\n+    print \"Enum(csky_fpu) String(\" name \") Value(TARGET_FPU_\" enum \")\"\n+    print \"\"\n+}\n+END {\n+    print \"EnumValue\"\n+    print \"Enum(csky_fpu) String(auto) Value(TARGET_FPU_auto)\"\n+}' $1/csky_cores.def"}, {"sha": "8b972d186db2f7827877650abca566c78c2ac140", "filename": "gcc/config/csky/csky_insn_dsp.md", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky_insn_dsp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky_insn_dsp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky_insn_dsp.md?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0", "patch": "@@ -0,0 +1,95 @@\n+;; C-SKY DSP instruction descriptions.\n+;; Copyright (C) 2018 Free Software Foundation, Inc.\n+;; Contributed by C-SKY Microsystems and Mentor Graphics.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but\n+;; WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+;; General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.  */\n+\n+;; ------------------------------------------------------------\n+;; DSP insns\n+;; ------------------------------------------------------------\n+\n+(define_insn \"mulsidi3\"\n+  [(set (match_operand:DI\t\t\t   0 \"register_operand\" \"=y\")\n+\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n+  \"TARGET_DSP\"\n+  \"muls\\t%1, %2\"\n+)\n+\n+(define_insn \"umulsidi3\"\n+  [(set (match_operand:DI\t\t\t   0 \"register_operand\" \"=y\")\n+\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n+  \"TARGET_DSP\"\n+  \"mulu\\t%1, %2\"\n+)\n+\n+(define_insn \"maddsidi4\"\n+  [(set (match_operand:DI\t\t\t\t    0 \"register_operand\" \"=y\")\n+\t(plus:DI (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t\t  (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"r\")))\n+\t\t (match_operand:DI\t\t\t    3 \"register_operand\" \"0\")))]\n+  \"TARGET_DSP\"\n+  \"mulsa\\t%1, %2\"\n+)\n+\n+(define_insn \"umaddsidi4\"\n+  [(set (match_operand:DI\t\t\t\t    0 \"register_operand\" \"=y\")\n+\t(plus:DI (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t\t  (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r\")))\n+\t\t (match_operand:DI\t\t\t    3 \"register_operand\" \"0\")))]\n+  \"TARGET_DSP\"\n+  \"mulua\\t%1, %2\"\n+)\n+\n+(define_insn \"msubsidi4\"\n+  [(set (match_operand:DI\t\t\t\t     0 \"register_operand\" \"=y\")\n+\t(minus:DI (match_operand:DI\t\t\t     3 \"register_operand\" \"0\")\n+\t\t  (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t\t   (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"r\")))))]\n+  \"TARGET_DSP\"\n+  \"mulss\\t%1, %2\"\n+)\n+\n+(define_insn \"umsubsidi4\"\n+  [(set (match_operand:DI\t\t\t\t     0 \"register_operand\" \"=y\")\n+\t(minus:DI (match_operand:DI\t\t\t     3 \"register_operand\" \"0\")\n+\t\t  (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t\t   (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r\")))))]\n+  \"TARGET_DSP\"\n+  \"mulus\\t%1, %2\"\n+)\n+\n+(define_insn \"*mulall_s16_0\"\n+  [(set (match_operand:SI 0 \"register_operand\"\t\t\t \"=r\")\n+\t(plus:SI (match_operand:SI 3 \"register_operand\"\t\t \" 0\")\n+\t\t (mult:SI (match_operand:SI 1 \"register_operand\" \" r\")\n+\t\t\t  (match_operand:SI 2 \"register_operand\" \" r\"))))]\n+  \"CSKY_ISA_FEATURE (3E3r1)\"\n+  \"mula.32.l\\t%0, %1, %2\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"*mulall_s16_1\"\n+  [(set (match_operand:SI 0 \"register_operand\"\t\t\t \"=r\")\n+\t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \" r\")\n+\t\t\t  (match_operand:SI 2 \"register_operand\" \" r\"))\n+\t\t (match_operand:SI 3 \"register_operand\"\t\t \" 0\")))]\n+  \"CSKY_ISA_FEATURE (3E3r1)\"\n+  \"mula.32.l\\t%0, %1, %2\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"length\" \"4\")])"}, {"sha": "d188ef24bc7a42513e6f37e2776e74d83ca96e37", "filename": "gcc/config/csky/csky_insn_fpu.md", "status": "added", "additions": 567, "deletions": 0, "changes": 567, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky_insn_fpu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky_insn_fpu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky_insn_fpu.md?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0", "patch": "@@ -0,0 +1,567 @@\n+;; C-SKY FPU instruction descriptions.\n+;; Copyright (C) 2018 Free Software Foundation, Inc.\n+;; Contributed by C-SKY Microsystems and Mentor Graphics.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but\n+;; WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+;; General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.  */\n+\n+;; -------------------------------------------------------------------------\n+;; Float Abs instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"abssf2\"\n+  [(set (match_operand:SF\t  0 \"register_operand\" \"=v,r\")\n+\t(abs:SF (match_operand:SF 1 \"register_operand\" \"v, r\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"@\n+    fabss\\t%0, %1\n+    bclri\\t%0, %1, 31\")\n+\n+(define_insn \"absdf2\"\n+  [(set (match_operand:DF\t  0 \"register_operand\" \"=v\")\n+\t(abs:DF (match_operand:DF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fabsd\\t%0, %1\")\n+\n+\n+;; -------------------------------------------------------------------------\n+;; Float Neg instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"negsf2\"\n+  [(set (match_operand:SF\t  0 \"register_operand\" \"=v\")\n+\t(neg:SF (match_operand:SF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fnegs\\t%0, %1\")\n+\n+(define_insn \"negdf2\"\n+  [(set (match_operand:DF\t  0 \"register_operand\" \"=v\")\n+\t(neg:DF (match_operand:DF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fnegd\\t%0, %1\")\n+\n+\n+;; -------------------------------------------------------------------------\n+;; Float Sqrt instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"sqrtsf2\"\n+  [(set (match_operand:SF\t   0 \"register_operand\" \"=v\")\n+\t(sqrt:SF (match_operand:SF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fsqrts\\t%0, %1\")\n+\n+(define_insn \"sqrtdf2\"\n+  [(set (match_operand:DF\t   0 \"register_operand\" \"=v\")\n+\t(sqrt:DF (match_operand:DF 1 \"register_operand\" \"v\")))]\n+ \"CSKY_ISA_FEATURE (fpv2_divd)\"\n+ \"fsqrtd\\t%0, %1\")\n+\n+\n+;; -------------------------------------------------------------------------\n+;; Float Add instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"addsf3\"\n+  [(set (match_operand:SF\t   0 \"register_operand\" \"=v\")\n+\t(plus:SF (match_operand:SF 1 \"register_operand\" \"v\")\n+\t\t (match_operand:SF 2 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fadds\\t%0, %1, %2\")\n+\n+(define_insn \"adddf3\"\n+  [(set (match_operand:DF\t   0 \"register_operand\" \"=v\")\n+\t(plus:DF (match_operand:DF 1 \"register_operand\" \"v\")\n+\t\t (match_operand:DF 2 \"register_operand\" \"v\")))]\n+ \"CSKY_ISA_FEATURE (fpv2_df)\"\n+ \"faddd\\t%0, %1, %2\")\n+\n+\n+;; -------------------------------------------------------------------------\n+;; Float Sub instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"subsf3\"\n+  [(set (match_operand:SF\t    0 \"register_operand\" \"=v\")\n+\t(minus:SF (match_operand:SF 1 \"register_operand\" \"v\")\n+\t\t  (match_operand:SF 2 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fsubs\\t%0, %1, %2\")\n+\n+(define_insn \"subdf3\"\n+  [(set (match_operand:DF\t    0 \"register_operand\" \"=v\")\n+\t(minus:DF (match_operand:DF 1 \"register_operand\" \"v\")\n+\t\t  (match_operand:DF 2 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fsubd\\t%0, %1, %2\")\n+\n+\n+;; -------------------------------------------------------------------------\n+;; Float Mul instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"mulsf3\"\n+  [(set (match_operand:SF\t   0 \"register_operand\" \"=v\")\n+\t(mult:SF (match_operand:SF 1 \"register_operand\" \"v\")\n+\t\t (match_operand:SF 2 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fmuls\\t%0, %1, %2\")\n+\n+(define_insn \"muldf3\"\n+  [(set (match_operand:DF\t   0 \"register_operand\" \"=v\")\n+\t(mult:DF (match_operand:DF 1 \"register_operand\" \"v\")\n+\t\t (match_operand:DF 2 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fmuld\\t%0, %1, %2\")\n+\n+(define_insn \"*fpuv2_nmulsf3_1\"\n+  [(set (match_operand:SF\t\t   0 \"register_operand\" \"=v\")\n+\t(mult:SF (neg:SF (match_operand:SF 1 \"register_operand\" \"%v\"))\n+\t\t (match_operand:SF\t   2 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fnmuls\\t%0, %1, %2\")\n+\n+(define_insn \"*fpuv2_nmulsf3_2\"\n+  [(set (match_operand:SF\t\t   0 \"register_operand\" \"=v\")\n+\t(neg:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"v\")\n+\t\t\t (match_operand:SF 2 \"register_operand\" \"v\"))))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fnmuls\\t%0, %1, %2\")\n+\n+(define_insn \"*fpuv2_nmuldf3_1\"\n+  [(set (match_operand:DF\t\t   0 \"register_operand\" \"=v\")\n+\t(mult:DF (neg:DF (match_operand:DF 1 \"register_operand\" \"%v\"))\n+\t\t (match_operand:DF\t   2 \"register_operand\" \"v\")))]\n+ \"CSKY_ISA_FEATURE (fpv2_df)\"\n+ \"fnmuld\\t%0, %1, %2\")\n+\n+(define_insn \"*fpuv2_nmuldf3_2\"\n+  [(set (match_operand:DF\t\t   0 \"register_operand\" \"=v\")\n+\t(neg:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"v\")\n+\t\t\t (match_operand:DF 2 \"register_operand\" \"v\"))))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fnmuld\\t%0, %1, %2\")\n+\n+\n+;; -------------------------------------------------------------------------\n+;; Float Div instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_expand \"divsf3\"\n+  [(set (match_operand:SF\t  0 \"register_operand\" \"\")\n+\t(div:SF (match_operand:SF 1 \"csky_arith_float1_operand\" \"\")\n+\t\t(match_operand:SF 2 \"register_operand\" \"\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"\")\n+\n+(define_insn \"*fpuv2_divsf3\"\n+  [(set (match_operand:SF\t  0 \"register_operand\" \"=v\")\n+\t(div:SF (match_operand:SF 1 \"register_operand\" \"v\")\n+\t\t(match_operand:SF 2 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fdivs\\t%0, %1, %2\")\n+\n+(define_insn \"*fpuv2_1_divsf3\"\n+  [(set (match_operand:SF\t  0 \"register_operand\"\t\t\"=v\")\n+\t(div:SF (match_operand:SF 1 \"csky_const_float1_operand\" \"i\")\n+\t\t(match_operand:SF 2 \"register_operand\"\t\t\"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"frecips\\t%0, %2\")\n+\n+\n+(define_expand \"divdf3\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(div:DF (match_operand:DF 1 \"csky_arith_float1_operand\" \"\")\n+\t\t(match_operand:DF 2 \"register_operand\" \"\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_divd)\"\n+  \"\")\n+\n+(define_insn \"*fpuv2_divdf3\"\n+  [(set (match_operand:DF\t  0 \"register_operand\" \"=v\")\n+\t(div:DF (match_operand:DF 1 \"register_operand\" \"v\")\n+\t\t(match_operand:DF 2 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_divd)\"\n+  \"fdivd\\t%0, %1, %2\")\n+\n+(define_insn \"*fpuv2_1_divdf3\"\n+  [(set (match_operand:DF\t  0 \"register_operand\"\t\t\"=v\")\n+\t(div:DF (match_operand:DF 1 \"csky_const_float1_operand\" \"i\")\n+\t\t(match_operand:DF 2 \"register_operand\"\t\t\"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_divd)\"\n+  \"frecipd\\t%0, %2\")\n+\n+\n+;; -------------------------------------------------------------------------\n+;; Float add(sub) with mult instructions\n+;; -------------------------------------------------------------------------\n+\n+;; vrz <= vrz + vrx * vry\n+(define_insn \"*fpuv2_fmacs\"\n+  [(set (match_operand:SF\t\t    0 \"register_operand\" \"=v\")\n+\t(plus:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"v\")\n+\t\t\t  (match_operand:SF 2 \"register_operand\" \"v\"))\n+\t\t (match_operand:SF\t    3 \"register_operand\" \"0\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fmacs\\t%0, %1, %2\")\n+\n+(define_insn \"*fpuv2_fmacd\"\n+  [(set (match_operand:DF\t\t    0 \"register_operand\" \"=v\")\n+\t(plus:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"v\")\n+\t\t\t  (match_operand:DF 2 \"register_operand\" \"v\"))\n+\t\t (match_operand:DF\t    3 \"register_operand\" \"0\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fmacd\\t%0, %1, %2\")\n+\n+;; vrz <= vrz - vrx * vry\n+(define_insn \"*fpuv2_fnmacs\"\n+  [(set (match_operand:SF\t\t     0 \"register_operand\" \"=v\")\n+\t(minus:SF (match_operand:SF\t     1 \"register_operand\" \"0\")\n+\t\t  (mult:SF (match_operand:SF 2 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:SF 3 \"register_operand\" \"v\"))))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fnmacs\\t%0, %2, %3\")\n+\n+(define_insn \"*fpuv2_fnmacd\"\n+  [(set (match_operand:DF\t\t     0 \"register_operand\" \"=v\")\n+\t(minus:DF (match_operand:DF\t     1 \"register_operand\" \"0\")\n+\t\t  (mult:DF (match_operand:DF 2 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:DF 3 \"register_operand\" \"v\"))))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fnmacd\\t%0, %2, %3\")\n+\n+;; vrz <= vrx * vry - vrz\n+(define_insn \"*fpuv2_fmscs\"\n+  [(set (match_operand:SF\t\t     0 \"register_operand\" \"=v\")\n+\t(minus:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:SF 2 \"register_operand\" \"v\"))\n+\t\t  (match_operand:SF\t     3 \"register_operand\" \"0\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fmscs\\t%0, %1, %2\")\n+\n+(define_insn \"*fpuv2_fmscd\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=v\")\n+\t(minus:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:DF 2 \"register_operand\" \"v\"))\n+\t\t  (match_operand:DF 3 \"register_operand\" \"0\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fmscd\\t%0, %1, %2\")\n+\n+;; vrz = - (vrz + vrx * vry)\n+(define_insn \"*fpuv2_fnmscs_1\"\n+  [(set (match_operand:SF\t\t\t     0 \"register_operand\" \"=v\")\n+\t(minus:SF (mult:SF (neg:SF (match_operand:SF 1 \"register_operand\" \"%v\"))\n+\t\t\t   (match_operand:SF\t     2 \"register_operand\" \"v\"))\n+\t\t  (match_operand:SF\t\t     3 \"register_operand\" \"0\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fnmscs\\t%0, %1, %2\")\n+\n+(define_insn \"*fpuv2_fnmscs_2\"\n+  [(set (match_operand:SF\t\t\t    0 \"register_operand\" \"=v\")\n+\t(neg:SF (plus:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"v\")\n+\t\t\t\t  (match_operand:SF 2 \"register_operand\" \"v\"))\n+\t\t\t (match_operand:SF\t    3 \"register_operand\" \"0\"))))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fnmscs\\t%0, %1, %2\")\n+\n+(define_insn \"*fpuv2_fnmscd_1\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=v\")\n+\t(minus:DF (mult:DF (neg:DF (match_operand:DF 1 \"register_operand\" \"%v\"))\n+\t\t\t   (match_operand:DF 2 \"register_operand\" \"v\"))\n+\t\t  (match_operand:DF 3 \"register_operand\" \"0\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fnmscd\\t%0, %1, %2\")\n+\n+(define_insn \"*fpuv2_fnmscd_2\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=v\")\n+\t(neg:DF (plus:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"v\")\n+\t\t\t\t  (match_operand:DF 2 \"register_operand\" \"v\"))\n+\t\t\t (match_operand:DF 3 \"register_operand\" \"0\"))))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fnmscd\\t%0, %1, %2\")\n+\n+\n+;; -------------------------------------------------------------------------\n+;; Float compare instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_expand \"cbranchsf4\"\n+  [(set (pc) (if_then_else (match_operator 0 \"csky_float_comparison_operator\"\n+\t\t\t     [(match_operand:SF 1 \"register_operand\")\n+\t\t\t      (match_operand:SF 2 \"csky_compare_operand_float\")])\n+\t\t\t   (label_ref (match_operand 3 \"\"))\n+\t\t\t   (pc)))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"\n+  {\n+    enum rtx_code code = GET_CODE (operands[0]);\n+    bool invert = csky_emit_compare_float (code, operands[1], operands[2]);\n+\n+    if (invert)\n+      emit_jump_insn (gen_csky_jbf (operands[3]));\n+    else\n+      emit_jump_insn (gen_csky_jbt (operands[3]));\n+\n+    DONE;\n+  }\")\n+\n+(define_insn \"*fpuv2_unordered\"\n+  [(set (reg:CC 33) (unordered:CC (match_operand:SF 0 \"register_operand\" \"v\")\n+\t\t\t\t  (match_operand:SF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fcmpuos\\t%0, %1\")\n+\n+(define_insn \"*fpuv2_unordered_zero\"\n+  [(set (reg:CC 33) (unordered:CC (match_operand:SF 0 \"register_operand\" \"v\")\n+\t\t\t\t  (match_operand:SF 1 \"csky_const_float0_operand\" \"i\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fcmpuos\\t%0, %0\")\n+\n+(define_insn \"*fpuv2_ne\"\n+  [(set (reg:CC 33) (ne:CC (match_operand:SF 0 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:SF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fcmpnes\\t%0, %1\")\n+\n+(define_insn \"*fpuv2_gt\"\n+  [(set (reg:CC 33) (gt:CC (match_operand:SF 0 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:SF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fcmplts\\t%1, %0\")\n+\n+(define_insn \"*fpuv2_ge\"\n+  [(set (reg:CC 33) (ge:CC (match_operand:SF 0 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:SF 1 \"register_operand\" \"v\")))]\n+ \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+ \"fcmphss\\t%0, %1\")\n+\n+(define_insn \"*fpuv2_lt\"\n+  [(set (reg:CC 33) (lt:CC (match_operand:SF 0 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:SF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fcmplts\\t%0, %1\")\n+\n+(define_insn \"*fpuv2_le\"\n+  [(set (reg:CC 33) (le:CC (match_operand:SF 0 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:SF 1 \"register_operand\" \"v\")))]\n+ \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+ \"fcmphss\\t%1, %0\")\n+\n+(define_insn \"*fpuv2_gez\"\n+  [(set (reg:CC 33) (ge:CC (match_operand:SF 0 \"register_operand\"\t   \"v\")\n+\t\t\t   (match_operand:SF 1 \"csky_const_float0_operand\" \"i\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fcmpzhss\\t%0\")\n+\n+(define_insn \"*fpuv2_nez\"\n+  [(set (reg:CC 33) (ne:CC (match_operand:SF 0 \"register_operand\"\t   \"v\")\n+\t\t\t   (match_operand:SF 1 \"csky_const_float0_operand\" \"i\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fcmpznes\\t%0\")\n+\n+\n+(define_expand \"cbranchdf4\"\n+  [(set (pc) (if_then_else (match_operator 0 \"csky_float_comparison_operator\"\n+\t\t\t     [(match_operand:DF 1 \"register_operand\")\n+\t\t\t      (match_operand:DF 2 \"csky_compare_operand_float\")])\n+\t\t\t   (label_ref (match_operand 3 \"\"))\n+\t\t\t   (pc)))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"\n+  {\n+    enum rtx_code code = GET_CODE (operands[0]);\n+    bool invert = csky_emit_compare_float (code, operands[1], operands[2]);\n+\n+    if (invert)\n+      emit_jump_insn (gen_csky_jbf (operands[3]));\n+    else\n+      emit_jump_insn (gen_csky_jbt (operands[3]));\n+\n+    DONE;\n+}\")\n+\n+(define_insn \"*fpuv2_dunordered\"\n+  [(set (reg:CC 33) (unordered:CC (match_operand:DF 0 \"register_operand\" \"v\")\n+\t\t\t\t  (match_operand:DF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fcmpuod\\t%0, %1\")\n+\n+(define_insn \"*fpuv2_dunordered_zero\"\n+  [(set (reg:CC 33) (unordered:CC (match_operand:DF 0 \"register_operand\" \"v\")\n+\t\t\t\t  (match_operand:DF 1 \"csky_const_float0_operand\" \"i\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fcmpuod\\t%0, %0\")\n+\n+(define_insn \"*fpuv2_dne\"\n+  [(set (reg:CC 33) (ne:CC (match_operand:DF 0 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:DF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fcmpned\\t%0, %1\")\n+\n+(define_insn \"*fpuv2_dgt\"\n+  [(set (reg:CC 33) (gt:CC (match_operand:DF 0 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:DF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fcmpltd\\t%1, %0\")\n+\n+(define_insn \"*fpuv2_dge\"\n+  [(set (reg:CC 33) (ge:CC (match_operand:DF 0 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:DF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fcmphsd\\t%0, %1\")\n+\n+(define_insn \"*fpuv2_dlt\"\n+  [(set (reg:CC 33) (lt:CC (match_operand:DF 0 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:DF 1 \"register_operand\" \"v\")))]\n+ \"CSKY_ISA_FEATURE (fpv2_df)\"\n+ \"fcmpltd\\t%0, %1\")\n+\n+(define_insn \"*fpuv2_dle\"\n+  [(set (reg:CC 33) (le:CC (match_operand:DF 0 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:DF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fcmphsd\\t%1, %0\")\n+\n+(define_insn \"*fpuv2_dgez\"\n+  [(set (reg:CC 33) (ge:CC (match_operand:DF 0 \"register_operand\"\t   \"v\")\n+\t\t\t   (match_operand:DF 1 \"csky_const_float0_operand\" \"i\")))]\n+ \"CSKY_ISA_FEATURE (fpv2_df)\"\n+ \"fcmpzhsd\\t%0\")\n+\n+(define_insn \"*fpuv2_dnez\"\n+  [(set (reg:CC 33) (ne:CC (match_operand:DF 0 \"register_operand\"\t   \"v\")\n+\t\t\t   (match_operand:DF 1 \"csky_const_float0_operand\" \"i\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fcmpzned\\t%0\")\n+\n+\n+;; -------------------------------------------------------------------------\n+;; Float convert instructions\n+;; -------------------------------------------------------------------------\n+\n+;; DF <- SF\n+(define_insn \"extendsfdf2\"\n+  [(set (match_operand:DF\t\t   0 \"register_operand\" \"=v\")\n+\t(float_extend:DF (match_operand:SF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fstod\\t%0, %1\")\n+\n+;; SF <- DF\n+(define_insn \"truncdfsf2\"\n+  [(set (match_operand:SF\t\t     0 \"register_operand\" \"=v\")\n+\t(float_truncate:SF (match_operand:DF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fdtos\\t%0, %1\")\n+\n+;; SF <- SI\n+(define_insn \"floatsisf2\"\n+  [(set (match_operand:SF\t    0 \"register_operand\" \"=v\")\n+\t(float:SF (match_operand:SI 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fsitos\\t%0, %1\")\n+\n+;; DF <- SI\n+(define_insn \"floatsidf2\"\n+  [(set (match_operand:DF\t    0 \"register_operand\" \"=v\")\n+\t(float:DF (match_operand:SI 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fsitod\\t%0, %1\")\n+\n+;; SF <- unsigned SI\n+(define_insn \"floatunssisf2\"\n+  [(set (match_operand:SF\t\t     0 \"register_operand\" \"=v\")\n+\t(unsigned_float:SF (match_operand:SI 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fuitos\\t%0, %1\")\n+\n+;; DF <- unsigned SI\n+(define_insn \"floatunssidf2\"\n+  [(set (match_operand:DF\t\t     0 \"register_operand\" \"=v\")\n+\t(unsigned_float:DF (match_operand:SI 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fuitod\\t%0, %1\")\n+\n+;; SI <- SF\n+(define_insn \"fix_truncsfsi2\"\n+  [(set (match_operand:SI\t  0 \"register_operand\" \"=v\")\n+\t(fix:SI (match_operand:SF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fstosi.rz\\t%0, %1\")\n+\n+;; SI <- DF\n+(define_insn \"fix_truncdfsi2\"\n+  [(set (match_operand:SI\t  0 \"register_operand\" \"=v\")\n+\t(fix:SI (match_operand:DF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fdtosi.rz\\t%0, %1\")\n+\n+;; unsigned SI <- SF\n+(define_insn \"fixuns_truncsfsi2\"\n+  [(set (match_operand:SI\t\t   0 \"register_operand\" \"=v\")\n+\t(unsigned_fix:SI (match_operand:SF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fstoui.rz\\t%0, %1\")\n+\n+;; unsigned SI <- DF\n+(define_insn \"fixuns_truncdfsi2\"\n+  [(set (match_operand:SI\t\t   0 \"register_operand\" \"=v\")\n+\t(unsigned_fix:SI (match_operand:DF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fdtoui.rz\\t%0, %1\")\n+\n+\n+;; -------------------------------------------------------------------------\n+;; Float mov instructions\n+;; -------------------------------------------------------------------------\n+\n+;; Note:  movsf and movdf patterns are in csky.md.\n+\n+;; cstore SF\n+(define_expand \"cstoresf4\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(match_operator\t  1 \"ordered_comparison_operator\"\n+\t  [(match_operand:SF 2 \"register_operand\" \"\")\n+\t   (match_operand:SF 3 \"csky_compare_operand_float\" \"\")]))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"\n+  {\n+    bool invert = csky_emit_compare_float (GET_CODE (operands[1]),\n+\t\t\t\t\t   operands[2], operands[3]);\n+    if (invert)\n+      emit_insn (gen_mvcv (operands[0]));\n+    else\n+      emit_insn (gen_mvc (operands[0]));\n+    DONE;\n+  }\"\n+)\n+\n+;; cstore DF\n+(define_expand \"cstoredf4\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(match_operator 1 \"ordered_comparison_operator\"\n+\t  [(match_operand:DF 2 \"register_operand\" \"\")\n+\t   (match_operand:DF 3 \"csky_compare_operand_float\" \"\")]))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"\n+  {\n+    bool invert = csky_emit_compare_float (GET_CODE (operands[1]),\n+\t\t\t\t\t   operands[2], operands[3]);\n+    if (invert)\n+      emit_insn (gen_mvcv (operands[0]));\n+    else\n+      emit_insn (gen_mvc (operands[0]));\n+    DONE;\n+  }\"\n+)"}, {"sha": "d99940e8a65dbfd0792e74899fae694061c5b436", "filename": "gcc/config/csky/csky_isa.def", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky_isa.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky_isa.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky_isa.def?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0", "patch": "@@ -0,0 +1,59 @@\n+/* ISA feature descriptions for the C-SKY back end.\n+   Copyright (C) 2018 Free Software Foundation, Inc.\n+   Contributed by C-SKY Microsystems and Mentor Graphics.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Before using #include to read this file, define a macro:\n+      CSKY_ISA(CNAME, DESCRIPTION)\n+   */\n+\n+/* Common insns */\n+CSKY_ISA (E1,\t \"Extended insns for arch ck801\t from base\")\n+CSKY_ISA (E2,\t \"Extended insns for arch ck802\t from base\")\n+CSKY_ISA (2E3,\t \"Extended insns for arch ck803\t from ck802\")\n+CSKY_ISA (3E3r1, \"Extended insns for cpu ck803n from ck803\")\n+CSKY_ISA (3E7,\t \"Extended insns for arch ck807\t from ck803\")\n+CSKY_ISA (7E10,\t \"Extended insns for arch ck810\t from ck807\")\n+\n+/* Special insns */\n+CSKY_ISA (div,\t  \"divide insns\")\n+\n+/* Extended insns */\n+CSKY_ISA (dsp,\t \"Extended insns for DSP\")\n+CSKY_ISA (java,\t \"Extended insns for Java\")\n+\n+CSKY_ISA (fpv2_sf,    \"Single precision operations supported\")\n+CSKY_ISA (fpv2_df,    \"Double precision operations supported\")\n+CSKY_ISA (fpv2_divd,  \"Double precision div operations supported\")\n+\n+/* Specific insns mode */\n+#ifdef\tCSKY_ISA_MACRO\n+#define CSKY_ISA_CK801\t    CSKY_ISA_FEATURE_GET (E1)\n+#define CSKY_ISA_CK802\t    CSKY_ISA_FEATURE_GET (E2)\n+#define CSKY_ISA_CK803\t    CSKY_ISA_CK802, CSKY_ISA_FEATURE_GET (2E3), \\\n+\t\t\t    CSKY_ISA_FEATURE_GET (div)\n+#define CSKY_ISA_CK803R1    CSKY_ISA_CK803, CSKY_ISA_FEATURE_GET (3E3r1)\n+#define CSKY_ISA_CK807\t    CSKY_ISA_CK803, CSKY_ISA_FEATURE_GET (3E7)\n+#define CSKY_ISA_CK810\t    CSKY_ISA_CK807, CSKY_ISA_FEATURE_GET (7E10)\n+\n+#define CSKY_ISA_DSP\t    CSKY_ISA_FEATURE_GET (dsp)\n+\n+#define CSKY_ISA_FPv2_SF    CSKY_ISA_FEATURE_GET (fpv2_sf)\n+#define CSKY_ISA_FPv2\t    CSKY_ISA_FPv2_SF, CSKY_ISA_FEATURE_GET (fpv2_df)\n+#define CSKY_ISA_FPv2_DIVD  CSKY_ISA_FPv2, CSKY_ISA_FEATURE_GET (fpv2_divd)\n+#endif"}, {"sha": "24578d70d4862a344096ebcabd806c237cc74bcd", "filename": "gcc/config/csky/csky_isa.h", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky_isa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky_isa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky_isa.h?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0", "patch": "@@ -0,0 +1,47 @@\n+/* ISA feature enumerations for C-SKY targets.\n+   Copyright (C) 2018 Free Software Foundation, Inc.\n+   Contributed by C-SKY Microsystems and Mentor Graphics.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_CSKY_ISA_FEATURE_H\n+#define GCC_CSKY_ISA_FEATURE_H\n+\n+\n+#ifndef CSKY_ISA_MACRO\n+#define CSKY_ISA_MACRO\n+#endif\n+\n+#define CSKY_ISA_FEATURE_DEFINE(x)  isa_bit_ ## x\n+#define CSKY_ISA_FEATURE_GET(x)\t    CSKY_ISA_FEATURE_DEFINE (x)\n+\n+enum csky_isa_feature\n+  {\n+    CSKY_ISA_FEATURE_DEFINE (none),\n+#undef\tCSKY_ISA\n+#define CSKY_ISA(IDENT, DESC) \\\n+    CSKY_ISA_FEATURE_DEFINE (IDENT),\n+#include \"csky_isa.def\"\n+#undef\tCSKY_ISA\n+    CSKY_ISA_FEATURE_DEFINE (max)\n+  };\n+\n+#define CSKY_ISA_FEAT(x) x,\n+#define CSKY_ISA_FEAT_NONE CSKY_ISA_FEAT (isa_bit_none)\n+\n+\n+#endif /* GCC_CSKY_ISA_FEATURE_H */"}, {"sha": "f206537d8427ad93ee36bafcc910c8fa8b1054a9", "filename": "gcc/config/csky/csky_opts.h", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky_opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky_opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky_opts.h?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0", "patch": "@@ -0,0 +1,63 @@\n+/* Processor and arch enumerations for C-SKY targets.\n+   Copyright (C) 2018 Free Software Foundation, Inc.\n+   Contributed by C-SKY Microsystems and Mentor Graphics.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+\n+#ifndef CSKY_OPTS_H\n+#define CSKY_OPTS_H\n+\n+\n+/* The various CSKY cores.  */\n+enum csky_processor_type\n+{\n+#undef CSKY_CORE\n+#define CSKY_CORE(NAME, INTERNAL_IDENT, IDENT, ARCH, ISA) \\\n+  TARGET_CPU_##INTERNAL_IDENT,\n+#include \"csky_cores.def\"\n+#undef CSKY_CORE\n+  /* Used to indicate that no processor has been specified.  */\n+  TARGET_CPU_csky_none\n+};\n+#define CSKY_TARGET_CORE_GET(name) TARGET_CPU_ ## name\n+\n+/* The various CSKY architectures.  */\n+enum csky_base_architecture\n+{\n+#undef CSKY_ARCH\n+#define CSKY_ARCH(NAME, CORE_IDENT, ARCH, ISA) \\\n+  CSKY_BASE_ARCH_##ARCH,\n+#include \"csky_cores.def\"\n+#undef CSKY_ARCH\n+  CSKY_BASE_ARCH_NONE\n+};\n+#define CSKY_TARGET_ARCH_GET(name) CSKY_BASE_ARCH_ ## name\n+\n+/* The various CSKY FPUs.  */\n+enum csky_fpu_type\n+{\n+#undef CSKY_FPU\n+#define CSKY_FPU(NAME, CNAME, ISA) TARGET_FPU_##CNAME,\n+#include \"csky_cores.def\"\n+  TARGET_FPU_auto\n+#undef CSKY_FPU\n+};\n+#define CSKY_TARGET_FPU_GET(name) TARGET_FPU_ ## name\n+\n+\n+#endif /* CSKY_OPTS_H */"}, {"sha": "00fc465240c194ef75524f7c0c210589b6fcabc2", "filename": "gcc/config/csky/csky_pipeline_ck801.md", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky_pipeline_ck801.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky_pipeline_ck801.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky_pipeline_ck801.md?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0", "patch": "@@ -0,0 +1,54 @@\n+;; Scheduler information for C-SKY CK801 processors.\n+;; Copyright (C) 2018 Free Software Foundation, Inc.\n+;; Contributed by C-SKY Microsystems and Mentor Graphics.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but\n+;; WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+;; General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.  */\n+\n+;; This is just a placeholder for a more accurate pipeline\n+;; description for CK801.\n+\n+(define_automaton \"ck801\")\n+\n+(define_cpu_unit \"ck801_ex1\" \"ck801\")\n+(define_cpu_unit \"ck801_exit\" \"ck801\")\n+\n+(define_insn_reservation \"ck801_generic\" 1\n+  (and (match_test \"CSKY_TARGET_ARCH (CK801)\")\n+       (eq_attr \"type\" \"alu,cmp,branch,cbranch,addsub,alu_ix,branch_jmp,call_jsr,call\"))\n+  \"ck801_ex1+ck801_exit\")\n+\n+(define_insn_reservation \"ck801_load\" 1\n+  (and (match_test \"CSKY_TARGET_ARCH (CK801)\")\n+       (and (eq_attr \"type\" \"load\")\n+\t    (match_test \"!csky_minipool_load_p (insn)\")))\n+  \"ck801_ex1+ck801_exit\")\n+\n+(define_insn_reservation \"ck801_pool\" 1\n+  (and (match_test \"CSKY_TARGET_ARCH (CK801)\")\n+       (and (eq_attr \"type\" \"load\")\n+\t    (match_test \"csky_minipool_load_p (insn)\")))\n+  \"ck801_ex1+ck801_exit\")\n+\n+(define_insn_reservation \"ck801_store\" 1\n+  (and (match_test \"CSKY_TARGET_ARCH (CK801)\")\n+       (eq_attr \"type\" \"store\"))\n+  \"ck801_ex1+ck801_exit\")\n+\n+;; Switching between constant pool loads and loads/stores in the data section\n+;; carries an extra penalty.\n+(define_bypass 2 \"ck801_load,ck801_store\" \"ck801_pool\")\n+(define_bypass 2 \"ck801_pool\" \"ck801_load,ck801_store\")"}, {"sha": "f185d8c77571311fd6008d9b75ce4ef3d2cb3845", "filename": "gcc/config/csky/csky_pipeline_ck802.md", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky_pipeline_ck802.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky_pipeline_ck802.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky_pipeline_ck802.md?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0", "patch": "@@ -0,0 +1,77 @@\n+;; Instruction scheduling information for C-SKY CK802 processors.\n+;; Copyright (C) 2018 Free Software Foundation, Inc.\n+;; Contributed by C-SKY Microsystems and Mentor Graphics.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but\n+;; WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+;; General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.  */\n+\n+(define_automaton \"csky_ck802\")\n+\n+(define_cpu_unit \"csky_ck802_ex\" \"csky_ck802\")\n+(define_cpu_unit \"csky_ck802_wb\" \"csky_ck802\")\n+\n+(define_insn_reservation \"ck802_alu\" 2\n+  (and (match_test \"CSKY_TARGET_ARCH (CK802)\")\n+       (eq_attr \"type\" \"alu\"))\n+  \"csky_ck802_ex, csky_ck802_wb\")\n+\n+(define_insn_reservation \"ck802_branch\" 2\n+  (and (match_test \"CSKY_TARGET_ARCH (CK802)\")\n+       (eq_attr \"type\" \"branch, branch_jmp\"))\n+  \"csky_ck802_ex, csky_ck802_wb\")\n+\n+(define_insn_reservation \"ck802_cmp\" 2\n+  (and (match_test \"CSKY_TARGET_ARCH (CK802)\")\n+       (eq_attr \"type\" \"cmp\"))\n+  \"csky_ck802_ex, csky_ck802_wb\")\n+\n+(define_insn_reservation \"ck802_cbranch\" 2\n+  (and (match_test \"CSKY_TARGET_ARCH (CK802)\")\n+       (eq_attr \"type\" \"cbranch\"))\n+  \"csky_ck802_ex, csky_ck802_wb\")\n+\n+(define_insn_reservation \"ck802_call\" 2\n+  (and (match_test \"CSKY_TARGET_ARCH (CK802)\")\n+       (eq_attr \"type\" \"call, call_jsr\"))\n+  \"csky_ck802_ex, csky_ck802_wb\")\n+\n+(define_insn_reservation \"ck802_load\" 2\n+  (and (match_test \"CSKY_TARGET_ARCH (CK802)\")\n+\t(and (eq_attr \"type\" \"load\")\n+\t     (match_test \"!csky_minipool_load_p (insn)\")))\n+  \"csky_ck802_ex, csky_ck802_wb\")\n+\n+(define_insn_reservation \"ck802_pool\" 2\n+  (and (match_test \"CSKY_TARGET_ARCH (CK802)\")\n+       (and (eq_attr \"type\" \"load\")\n+\t    (match_test \"csky_minipool_load_p (insn)\")))\n+  \"csky_ck802_ex, csky_ck802_wb\")\n+\n+(define_insn_reservation \"ck802_store\" 2\n+  (and (match_test \"CSKY_TARGET_ARCH (CK802)\")\n+       (eq_attr \"type\" \"store\"))\n+  \"csky_ck802_ex, csky_ck802_wb\")\n+\n+;; Switching between constant pool loads and loads/stores in the data section\n+;; carries an extra penalty.\n+(define_bypass 3 \"ck802_load,ck802_store\" \"ck802_pool\")\n+(define_bypass 3 \"ck802_pool\" \"ck802_load,ck802_store\")\n+\n+(define_bypass 1 \"*\" \"ck802_alu\")\n+\n+(define_bypass 1 \"*\" \"ck802_branch\")\n+\n+(define_bypass 2 \"ck802_cmp\" \"ck802_cbranch\")"}, {"sha": "f140cf6d54df785a1fa63affaa45a37d00a1c0f8", "filename": "gcc/config/csky/csky_pipeline_ck803.md", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky_pipeline_ck803.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky_pipeline_ck803.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky_pipeline_ck803.md?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0", "patch": "@@ -0,0 +1,64 @@\n+;; Scheduler information for C-SKY CK803 processors.\n+;; Copyright (C) 2018 Free Software Foundation, Inc.\n+;; Contributed by C-SKY Microsystems and Mentor Graphics.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but\n+;; WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+;; General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.  */\n+\n+(define_automaton \"ck803\")\n+\n+(define_cpu_unit \"ck803_ex1\" \"ck803\")\n+(define_cpu_unit \"ck803_exit\" \"ck803\")\n+\n+(define_insn_reservation \"ck803_3cycle\" 1\n+  (and (match_test \"CSKY_TARGET_ARCH (CK803)\")\n+       (eq_attr \"type\" \"alu,cmp,branch,branch_jmp,call_jsr,call\"))\n+  \"ck803_ex1+ck803_exit\")\n+\n+(define_insn_reservation \"ck803_alu1\" 1\n+  (and (match_test \"CSKY_TARGET_ARCH (CK803)\")\n+       (eq_attr \"type\" \"addsub,alu_ix\"))\n+  \"ck803_ex1+ck803_exit\")\n+\n+(define_insn_reservation \"ck803_cbranch\" 1\n+  (and (match_test \"CSKY_TARGET_ARCH (CK803)\")\n+       (eq_attr \"type\" \"cbranch\"))\n+  \"ck803_ex1+ck803_exit\")\n+\n+(define_insn_reservation \"ck803_load\" 1\n+  (and (match_test \"CSKY_TARGET_ARCH (CK803)\")\n+       (and (eq_attr \"type\" \"load\")\n+\t    (match_test \"!csky_minipool_load_p (insn)\")))\n+  \"ck803_ex1+ck803_exit\")\n+\n+(define_insn_reservation \"ck803_pool\" 1\n+  (and (match_test \"CSKY_TARGET_ARCH (CK803)\")\n+       (and (eq_attr \"type\" \"load\")\n+\t    (match_test \"csky_minipool_load_p (insn)\")))\n+  \"ck803_ex1+ck803_exit\")\n+\n+(define_insn_reservation \"ck803_store\" 1\n+  (and (match_test \"CSKY_TARGET_ARCH (CK803)\")\n+       (eq_attr \"type\" \"store\"))\n+  \"ck803_ex1+ck803_exit\")\n+\n+;; Switching between constant pool loads and loads/stores in the data section\n+;; carries an extra penalty.\n+(define_bypass 2 \"ck803_load,ck803_store\" \"ck803_pool\")\n+(define_bypass 2 \"ck803_pool\" \"ck803_load,ck803_store\")\n+\n+(define_bypass 2 \"ck803_3cycle,ck803_cbranch,ck803_load,ck803_store,ck803_pool\"\n+\t\t \"ck803_cbranch\")"}, {"sha": "aaba00b868f90b99ece865910e5ced3530bef2ff", "filename": "gcc/config/csky/csky_pipeline_ck810.md", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky_pipeline_ck810.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky_pipeline_ck810.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky_pipeline_ck810.md?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0", "patch": "@@ -0,0 +1,34 @@\n+;; Instruction scheduling information for C-SKY CK810 processors.\n+;; Copyright (C) 2018 Free Software Foundation, Inc.\n+;; Contributed by C-SKY Microsystems and Mentor Graphics.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but\n+;; WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+;; General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.  */\n+\n+\n+;;-------------------------------------------------------------\n+;; Pipeline descriptions for ck810\n+;;-------------------------------------------------------------\n+\n+(define_attr \"cycle\" \"1,2,not_used_yet\"\n+    (const_string \"1\"))\n+(define_automaton \"cskyv2_ck810\")\n+(define_cpu_unit \"pipeline_alu0\" \"cskyv2_ck810\")\n+(define_insn_reservation \"alu_one_cycle\" 1\n+    (and (eq_attr \"cycle\" \"1\")\n+\t (not (ior (match_test \"CSKY_TARGET_ARCH (CK803)\")\n+\t\t   (match_test \"CSKY_TARGET_ARCH (CK802)\"))))\n+    \"pipeline_alu0\")"}, {"sha": "ae3438d4473ad08e23d9ad83f5471129c72c48e2", "filename": "gcc/config/csky/csky_tables.opt", "status": "added", "additions": 230, "deletions": 0, "changes": 230, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky_tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fcsky_tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky_tables.opt?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0", "patch": "@@ -0,0 +1,230 @@\n+; -*- buffer-read-only: t -*-\n+; Generated automatically by csky_genopt.sh from csky_cores.def.\n+\n+; Copyright (C) 2018 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+Enum\n+Name(csky_processor_type) Type(enum csky_processor_type)\n+Known CSKY CPUs (for use with the -mcpu= options):\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck801) Value( TARGET_CPU_ck801)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck801t) Value( TARGET_CPU_ck801t)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck802) Value( TARGET_CPU_ck802)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck802t) Value( TARGET_CPU_ck802t)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck802j) Value( TARGET_CPU_ck802j)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803) Value( TARGET_CPU_ck803)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803h) Value( TARGET_CPU_ck803h)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803t) Value( TARGET_CPU_ck803t)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803ht) Value( TARGET_CPU_ck803ht)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803f) Value( TARGET_CPU_ck803f)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803fh) Value( TARGET_CPU_ck803fh)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803e) Value( TARGET_CPU_ck803e)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803eh) Value( TARGET_CPU_ck803eh)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803et) Value( TARGET_CPU_ck803et)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803eht) Value( TARGET_CPU_ck803eht)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803ef) Value( TARGET_CPU_ck803ef)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803efh) Value( TARGET_CPU_ck803efh)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803ft) Value( TARGET_CPU_ck803ft)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803eft) Value( TARGET_CPU_ck803eft)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803efht) Value( TARGET_CPU_ck803efht)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803r1) Value( TARGET_CPU_ck803r1)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803hr1) Value( TARGET_CPU_ck803hr1)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803tr1) Value( TARGET_CPU_ck803tr1)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803htr1) Value( TARGET_CPU_ck803htr1)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803fr1) Value( TARGET_CPU_ck803fr1)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803fhr1) Value( TARGET_CPU_ck803fhr1)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803er1) Value( TARGET_CPU_ck803er1)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803ehr1) Value( TARGET_CPU_ck803ehr1)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803etr1) Value( TARGET_CPU_ck803etr1)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803ehtr1) Value( TARGET_CPU_ck803ehtr1)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803efr1) Value( TARGET_CPU_ck803efr1)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803efhr1) Value( TARGET_CPU_ck803efhr1)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803ftr1) Value( TARGET_CPU_ck803ftr1)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803eftr1) Value( TARGET_CPU_ck803eftr1)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803efhtr1) Value( TARGET_CPU_ck803efhtr1)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803s) Value( TARGET_CPU_ck803s)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803st) Value( TARGET_CPU_ck803st)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803se) Value( TARGET_CPU_ck803se)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803sf) Value( TARGET_CPU_ck803sf)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803sef) Value( TARGET_CPU_ck803sef)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck803seft) Value( TARGET_CPU_ck803seft)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck807e) Value( TARGET_CPU_ck807e)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck807ef) Value( TARGET_CPU_ck807ef)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck807) Value( TARGET_CPU_ck807)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck807f) Value( TARGET_CPU_ck807f)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck810e) Value( TARGET_CPU_ck810e)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck810et) Value( TARGET_CPU_ck810et)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck810ef) Value( TARGET_CPU_ck810ef)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck810eft) Value( TARGET_CPU_ck810eft)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck810) Value( TARGET_CPU_ck810)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck810v) Value( TARGET_CPU_ck810v)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck810f) Value( TARGET_CPU_ck810f)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck810t) Value( TARGET_CPU_ck810t)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck810fv) Value( TARGET_CPU_ck810fv)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck810tv) Value( TARGET_CPU_ck810tv)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck810ft) Value( TARGET_CPU_ck810ff)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck810ftv) Value( TARGET_CPU_ck810ftv)\n+\n+Enum\n+Name(csky_arch) Type(int)\n+Known CSKY architectures (for use with the -march= option):\n+\n+EnumValue\n+Enum(csky_arch) String(ck801) Value(0)\n+\n+EnumValue\n+Enum(csky_arch) String(ck802) Value(1)\n+\n+EnumValue\n+Enum(csky_arch) String(ck803) Value(2)\n+\n+EnumValue\n+Enum(csky_arch) String(ck807) Value(3)\n+\n+EnumValue\n+Enum(csky_arch) String(ck810) Value(4)\n+\n+Enum\n+Name(csky_fpu) Type(enum csky_fpu_type)\n+Known CSKY FPUs (for use with the -mfpu= option):\n+\n+EnumValue\n+Enum(csky_fpu) String(fpv2_sf) Value(TARGET_FPU_fpv2_sf)\n+\n+EnumValue\n+Enum(csky_fpu) String(fpv2) Value(TARGET_FPU_fpv2)\n+\n+EnumValue\n+Enum(csky_fpu) String(fpv2_divd) Value(TARGET_FPU_fpv2_divd)\n+\n+EnumValue\n+Enum(csky_fpu) String(auto) Value(TARGET_FPU_auto)"}, {"sha": "2899f0bd0b018a316a849ea973809bd967bc5d7b", "filename": "gcc/config/csky/predicates.md", "status": "added", "additions": 298, "deletions": 0, "changes": 298, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fpredicates.md?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0", "patch": "@@ -0,0 +1,298 @@\n+;; Predicates for C-SKY.\n+;; Copyright (C) 2018 Free Software Foundation, Inc.\n+;; Contributed by C-SKY Microsystems and Mentor Graphics.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but\n+;; WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+;; General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.  */\n+\n+;; Return 1 if OP is a load multiple operation.\n+\n+(define_predicate \"csky_load_multiple_operation\"\n+  (match_code \"parallel\")\n+{\n+  int count = XVECLEN (op, 0);\n+  int dest_regno;\n+  rtx src_addr;\n+  int i;\n+\n+  /* Perform a quick check so we don't blow up below.  */\n+  if (count <= 1\n+      || GET_CODE (XVECEXP (op, 0, 0)) != SET\n+      || GET_CODE (SET_DEST (XVECEXP (op, 0, 0))) != REG\n+      || GET_CODE (SET_SRC (XVECEXP (op, 0, 0))) != MEM\n+      || GET_CODE (XEXP (SET_SRC (XVECEXP (op, 0, 0)), 0)) != REG\n+      || XEXP (SET_SRC (XVECEXP (op, 0, 0)), 0) != stack_pointer_rtx)\n+    return 0;\n+\n+  dest_regno = REGNO (SET_DEST (XVECEXP (op, 0, 0)));\n+  src_addr = XEXP (SET_SRC (XVECEXP (op, 0, 0)), 0);\n+\n+  for (i = 1; i < count; i++)\n+    {\n+      rtx elt = XVECEXP (op, 0, i);\n+\n+      if (GET_CODE (elt) != SET\n+\t  || GET_CODE (SET_DEST (elt)) != REG\n+\t  || GET_MODE (SET_DEST (elt)) != SImode\n+\t  || REGNO (SET_DEST (elt)) != (unsigned) (dest_regno + i)\n+\t  || GET_CODE (SET_SRC (elt)) != MEM\n+\t  || GET_MODE (SET_SRC (elt)) != SImode\n+\t  || GET_CODE (XEXP (SET_SRC (elt), 0)) != PLUS\n+\t  || ! rtx_equal_p (XEXP (XEXP (SET_SRC (elt), 0), 0), src_addr)\n+\t  || GET_CODE (XEXP (XEXP (SET_SRC (elt), 0), 1)) != CONST_INT\n+\t  || INTVAL (XEXP (XEXP (SET_SRC (elt), 0), 1)) != i * 4)\n+\treturn 0;\n+    }\n+  return 1;\n+})\n+\n+;; Similar, for store multiple.\n+\n+(define_predicate \"csky_store_multiple_operation\"\n+  (match_code \"parallel\")\n+{\n+  int count = XVECLEN (op, 0);\n+  int src_regno;\n+  rtx dest_addr;\n+  int i;\n+\n+  /* Perform a quick check so we don't blow up below.  */\n+  if (count <= 1\n+      || GET_CODE (XVECEXP (op, 0, 0)) != SET\n+      || GET_CODE (SET_DEST (XVECEXP (op, 0, 0))) != MEM\n+      || GET_CODE (XEXP (SET_DEST (XVECEXP (op, 0, 0)), 0)) != REG\n+      || XEXP (SET_DEST (XVECEXP (op, 0, 0)), 0) != stack_pointer_rtx\n+      || GET_CODE (SET_SRC (XVECEXP (op, 0, 0))) != REG)\n+    return 0;\n+\n+  src_regno = REGNO (SET_SRC (XVECEXP (op, 0, 0)));\n+  dest_addr = XEXP (SET_DEST (XVECEXP (op, 0, 0)), 0);\n+\n+  for (i = 1; i < count; i++)\n+    {\n+      rtx elt = XVECEXP (op, 0, i);\n+\n+      if (GET_CODE (elt) != SET\n+\t  || GET_CODE (SET_SRC (elt)) != REG\n+\t  || GET_MODE (SET_SRC (elt)) != SImode\n+\t  || REGNO (SET_SRC (elt)) != (unsigned) (src_regno + i)\n+\t  || GET_CODE (SET_DEST (elt)) != MEM\n+\t  || GET_MODE (SET_DEST (elt)) != SImode\n+\t  || GET_CODE (XEXP (SET_DEST (elt), 0)) != PLUS\n+\t  || ! rtx_equal_p (XEXP (XEXP (SET_DEST (elt), 0), 0), dest_addr)\n+\t  || GET_CODE (XEXP (XEXP (SET_DEST (elt), 0), 1)) != CONST_INT\n+\t  || INTVAL (XEXP (XEXP (SET_DEST (elt), 0), 1)) != i * 4)\n+\treturn 0;\n+    }\n+  return 1;\n+})\n+\n+\n+(define_predicate \"csky_arith_K_operand\"\n+  (match_code \"reg,subreg,const_int\")\n+  {\n+    if (register_operand (op, mode))\n+      return 1;\n+    if (CONST_INT_P (op) && CSKY_CONST_OK_FOR_K (INTVAL (op)))\n+      return 1;\n+    return 0;\n+  })\n+\n+(define_predicate \"csky_literal_K_operand\"\n+  (match_code \"const_int\")\n+  {\n+    if (CONST_INT_P (op) && CSKY_CONST_OK_FOR_K (INTVAL (op)))\n+      return 1;\n+    return 0;\n+  })\n+\n+(define_predicate \"csky_literal_I_operand\"\n+  (match_code \"const_int\")\n+  {\n+    if (CONST_INT_P (op) && CSKY_CONST_OK_FOR_I (INTVAL (op)))\n+      return 1;\n+    return 0;\n+  })\n+\n+(define_predicate \"csky_literal_J_operand\"\n+  (match_code \"const_int\")\n+  {\n+    if (CONST_INT_P (op) && CSKY_CONST_OK_FOR_J (INTVAL (op)))\n+      return 1;\n+    return 0;\n+  })\n+\n+(define_predicate \"csky_literal_Uk_operand\"\n+  (match_code \"const_int\")\n+  {\n+    if (CONST_INT_P (op) && CSKY_CONST_OK_FOR_Uk (INTVAL (op)))\n+      return 1;\n+    return 0;\n+  })\n+\n+;; Nonzero if OP is a register or constant value of 1\n+\n+(define_predicate \"csky_arith_int1_operand\"\n+  (match_code \"reg,subreg,const_int\")\n+  {\n+    if (register_operand (op, mode))\n+\treturn 1;\n+    if (op == const1_rtx)\n+\treturn 1;\n+    return 0;\n+  })\n+\n+\n+;; Nonzero if OP is legal address for function call\n+\n+(define_predicate \"csky_call_address_operand\"\n+  (match_code \"reg,subreg,symbol_ref\")\n+  {\n+    if (!flag_pic && (GET_CODE (op) == SYMBOL_REF))\n+      return 1;\n+    if (register_operand (op, mode))\n+      return 1;\n+    return 0;\n+  })\n+\n+;; Nonzero if OP is a valid source operand for a compare operation.\n+\n+(define_predicate \"csky_compare_operand\"\n+  (match_code \"const_int,reg,subreg\")\n+  {\n+    if (register_operand (op, mode))\n+      return 1;\n+    if (GET_CODE (op) == CONST_INT && INTVAL (op) == 0)\n+      return 1;\n+    return 0;\n+  })\n+\n+(define_predicate \"csky_literal_K_Uh_operand\"\n+  (match_code \"const_int\")\n+  {\n+    if (CONST_INT_P (op)\n+\t&& (CSKY_CONST_OK_FOR_K (INTVAL (op))\n+\t    || CSKY_CONST_OK_FOR_Uh (INTVAL (op))))\n+\t  return 1;\n+    return 0;\n+  })\n+\n+;; True if OP is a mem with an reg + optional displacement address.\n+\n+(define_predicate \"csky_simple_mem_operand\"\n+  (and (match_operand 0 \"memory_operand\")\n+       (match_test \"csky_simple_addr_operand_p (XEXP (op, 0))\")))\n+\n+(define_predicate \"csky_arith_any_imm_operand\"\n+  (match_code \"const_int,reg,subreg\")\n+  {\n+    if (register_operand (op, mode))\n+      return 1;\n+    if (CONST_INT_P (op))\n+      return 1;\n+    return 0;\n+  })\n+\n+(define_predicate \"csky_arith_O_operand\"\n+  (match_code \"reg,subreg,const_int\")\n+  {\n+    if (register_operand (op, mode))\n+      return 1;\n+    if (CONST_INT_P (op) && CSKY_CONST_OK_FOR_O (INTVAL (op)))\n+      return 1;\n+    return 0;\n+  })\n+\n+(define_predicate \"csky_unspec_operand\"\n+  (match_code \"unspec\")\n+  {\n+    if (op == NULL || GET_CODE(op) != UNSPEC)\n+      return 0;\n+    return 1;\n+  }\n+)\n+\n+(define_predicate \"csky_const_float1_operand\"\n+  (and (match_code \"const_double\")\n+       (match_test \"(op == CONST1_RTX (mode))\")))\n+\n+(define_predicate \"csky_arith_float1_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (match_operand 0 \"csky_const_float1_operand\")))\n+\n+(define_predicate \"csky_const_float0_operand\"\n+  (and (match_code \"const_double\")\n+       (match_test \"(op == CONST0_RTX (mode))\")))\n+\n+(define_predicate \"csky_compare_operand_float\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (match_operand 0 \"csky_const_float0_operand\")))\n+\n+(define_special_predicate \"registers_push\"\n+  (match_code \"parallel\")\n+{\n+  if ((GET_CODE (XVECEXP (op, 0, 0)) != SET)\n+      || (GET_CODE (SET_SRC (XVECEXP (op, 0, 0))) != UNSPEC)\n+      || (XINT (SET_SRC (XVECEXP (op, 0, 0)), 1) != UNSPEC_PUSHPOP_MULT))\n+    return false;\n+  return true;\n+})\n+\n+(define_special_predicate \"registers_pop\"\n+  (match_code \"parallel\")\n+{\n+  if ((GET_CODE (XVECEXP (op, 0, 1)) != SET)\n+      || (GET_CODE (SET_SRC (XVECEXP (op, 0, 1))) != UNSPEC)\n+      || (XINT (SET_SRC (XVECEXP (op, 0, 1)), 1) != UNSPEC_PUSHPOP_MULT))\n+    return false;\n+  return true;\n+})\n+\n+(define_predicate \"push_memory_operand\"\n+  (match_code \"mem\")\n+{\n+  rtx x = XEXP (op, 0);\n+  if (GET_CODE (x) != PRE_MODIFY)\n+    return false;\n+  if (XEXP (x, 0) != stack_pointer_rtx)\n+    return false;\n+  x = XEXP (x, 1);\n+  if (GET_CODE (x) != PLUS)\n+    return false;\n+  if (XEXP (x, 0) != stack_pointer_rtx)\n+    return false;\n+  return CONST_INT_P (XEXP (x, 1));\n+})\n+\n+(define_predicate \"pop_memory_operand\"\n+  (match_code \"mem\")\n+{\n+  rtx x = XEXP (op, 0);\n+  if (GET_CODE (x) != POST_MODIFY)\n+    return false;\n+  if (XEXP (x, 0) != stack_pointer_rtx)\n+    return false;\n+  x = XEXP (x, 1);\n+  if (GET_CODE (x) != PLUS)\n+    return false;\n+  if (XEXP (x, 0) != stack_pointer_rtx)\n+    return false;\n+  return CONST_INT_P (XEXP (x, 1));\n+})\n+\n+(define_special_predicate \"csky_float_comparison_operator\"\n+  (match_code \"eq,ne,le,lt,ge,gt,geu,gtu,leu,ltu,\n+\t       unordered,ordered\"))"}, {"sha": "5cbdc3fc7434f6a1519d512e863c5eec02d4a274", "filename": "gcc/config/csky/print-sysroot-suffix.sh", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fprint-sysroot-suffix.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Fprint-sysroot-suffix.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fprint-sysroot-suffix.sh?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0", "patch": "@@ -0,0 +1,147 @@\n+#! /bin/sh\n+# Script to generate SYSROOT_SUFFIX_SPEC equivalent to MULTILIB_OSDIRNAMES\n+# Arguments are MULTILIB_OSDIRNAMES, MULTILIB_OPTIONS and MULTILIB_MATCHES.\n+\n+# Copyright (C) 2018 Free Software Foundation, Inc.\n+# Contributed by C-SKY Microsystems and Mentor Graphics.\n+\n+# This file is part of GCC.\n+\n+# GCC is free software; you can redistribute it and/or modify it under\n+# the terms of the GNU General Public License as published by the Free\n+# Software Foundation; either version 3, or (at your option) any later\n+# version.\n+\n+# GCC is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# for more details.\n+\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# This shell script produces a header file fragment that defines\n+# SYSROOT_SUFFIX_SPEC.  It assumes that the sysroots will have the same\n+# structure and names used by the multilibs.\n+\n+# Invocation:\n+#   print-sysroot-suffix.sh \\\n+#          MULTILIB_OSDIRNAMES \\\n+#          MULTILIB_OPTIONS \\\n+#          MULTILIB_MATCHES \\\n+#      > t-sysroot-suffix.h\n+\n+# The three options exactly correspond to the variables of the same\n+# names defined in the tmake_file fragments.\n+\n+# Example:\n+#   sh ./gcc/config/print-sysroot-suffix.sh \"a=A\" \"a b/c/d\" \"\"\n+# =>\n+#   #undef SYSROOT_SUFFIX_SPEC\n+#   #define SYSROOT_SUFFIX_SPEC \"\" \\\n+#   \"%{a:\" \\\n+#     \"%{b:A/b/;\" \\\n+#     \"c:A/c/;\" \\\n+#     \"d:A/d/;\" \\\n+#     \":A/};\" \\\n+#   \":}\"\n+\n+# The script uses temporary subscripts in order to permit a recursive\n+# algorithm without the use of functions.\n+\n+set -e\n+\n+dirnames=\"$1\"\n+options=\"$2\"\n+matches=\"$3\"\n+\n+cat > print-sysroot-suffix3.sh <<\\EOF\n+#! /bin/sh\n+# Print all the multilib matches for this option\n+result=\"$1\"\n+EOF\n+for x in $matches; do\n+  l=`echo $x | sed -e 's/=.*$//' -e 's/?/=/g'`\n+  r=`echo $x | sed -e 's/^.*=//' -e 's/?/=/g'`\n+  echo \"[ \\\"\\$1\\\" = \\\"$l\\\" ] && result=\\\"\\$result|$r\\\"\" >> print-sysroot-suffix3.sh\n+done\n+echo 'echo $result' >> print-sysroot-suffix3.sh\n+chmod +x print-sysroot-suffix3.sh\n+\n+cat > print-sysroot-suffix2.sh <<\\EOF\n+#! /bin/sh\n+# Recursive script to enumerate all multilib combinations, match against\n+# multilib directories and output a spec string of the result.\n+# Will fold identical trees.\n+\n+padding=\"$1\"\n+optstring=\"$2\"\n+shift 2\n+n=\"\\\" \\\\\n+$padding\\\"\"\n+if [ $# = 0 ]; then\n+EOF\n+\n+pat=\n+for x in $dirnames; do\n+#  p=`echo $x | sed -e 's,=!,/$=/,'`\n+  p=`echo $x | sed -e 's/=//g'`\n+#  pat=\"$pat -e 's=^//$p='\"\n+   pat=\"$pat -e 's/$p/g'\"\n+done\n+echo '  optstring=`echo \"/$optstring\" | sed '\"$pat\\`\" >> print-sysroot-suffix2.sh\n+cat >> print-sysroot-suffix2.sh <<\\EOF\n+  case $optstring in\n+  //*)\n+    ;;\n+  *)\n+    echo \"$optstring\"\n+    ;;\n+  esac\n+else\n+  thisopt=\"$1\"\n+  shift\n+  bit=\n+  lastcond=\n+  result=\n+  for x in `echo \"$thisopt\" | sed -e 's,/, ,g'`; do\n+    case $x in\n+EOF\n+for x in `echo \"$options\" | sed -e 's,/, ,g'`; do\n+  match=`./print-sysroot-suffix3.sh \"$x\"`\n+  echo \"$x) optmatch=\\\"$match\\\" ;;\" >> print-sysroot-suffix2.sh\n+done\n+cat >> print-sysroot-suffix2.sh <<\\EOF\n+    esac\n+    bit=`\"$0\" \"$padding  \" \"$optstring$x/\" \"$@\"`\n+    if [ -z \"$lastopt\" ]; then\n+      lastopt=\"$optmatch\"\n+    else\n+      if [ \"$lastbit\" = \"$bit\" ]; then\n+\tlastopt=\"$lastopt|$optmatch\"\n+      else\n+\tresult=\"$result$lastopt:$lastbit;$n\"\n+\tlastopt=\"$optmatch\"\n+      fi\n+    fi\n+    lastbit=\"$bit\"\n+  done\n+  bit=`\"$0\" \"$padding  \" \"$optstring\" \"$@\"`\n+  if [ \"$bit\" = \"$lastbit\" ]; then\n+    if [ -z \"$result\" ]; then\n+      echo \"$bit\"\n+    else\n+      echo \"$n%{$result:$bit}\"\n+    fi\n+  else\n+    echo \"$n%{$result$lastopt:$lastbit;$n:$bit}\"\n+  fi\n+fi\n+EOF\n+chmod +x ./print-sysroot-suffix2.sh\n+result=`./print-sysroot-suffix2.sh \\\"\\\" \\\"\\\" $options`\n+echo \"#undef SYSROOT_SUFFIX_SPEC\"\n+echo \"#define SYSROOT_SUFFIX_SPEC \\\"$result\\\"\"\n+rm print-sysroot-suffix2.sh\n+rm print-sysroot-suffix3.sh"}, {"sha": "ab9be184552731ec41ec24abfa3e377264fc8798", "filename": "gcc/config/csky/t-csky", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Ft-csky", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Ft-csky", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Ft-csky?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0", "patch": "@@ -0,0 +1,29 @@\n+# Make rules for all C-SKY targets.\n+#\n+# Copyright (C) 2018 Free Software Foundation, Inc.\n+# Contributed by C-SKY Microsystems and Mentor Graphics.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+TM_H += $(srcdir)/config/csky/csky_cores.def\n+OPTIONS_H_EXTRA += $(srcdir)/config/csky/csky_cores.def\n+\n+\n+$(srcdir)/config/csky/csky_tables.opt: $(srcdir)/config/csky/csky_genopt.sh \\\n+  $(srcdir)/config/csky/csky_cores.def\n+\t$(SHELL) $(srcdir)/config/csky/csky_genopt.sh $(srcdir)/config/csky > \\\n+\t\t$(srcdir)/config/csky/csky_tables.opt"}, {"sha": "6864544da45b9aaeade32306c8bd478d7fdd629b", "filename": "gcc/config/csky/t-csky-elf", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Ft-csky-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Ft-csky-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Ft-csky-elf?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0", "patch": "@@ -0,0 +1,107 @@\n+# Multilib configuration for csky*-elf.\n+#\n+# Copyright (C) 2018 Free Software Foundation, Inc.\n+# Contributed by C-SKY Microsystems and Mentor Graphics.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Endiannesses.\n+MULTILIB_OPTIONS      = mlittle-endian/mbig-endian\n+MULTILIB_DIRNAMES     = little big\n+MULTILIB_MATCHES      = mlittle-endian=EL\n+MULTILIB_MATCHES      = mbig-endian=EB\n+MULTILIB_EXCEPTIONS   =\n+\n+# Arch variants.\n+MULTILIB_OPTIONS     += mcpu=ck802/mcpu=ck801/mcpu=ck803f/mcpu=ck807f/mcpu=ck810f\n+MULTILIB_DIRNAMES    += ck802 ck801 ck803 ck807 ck810\n+\n+# For arch ck802.\n+MULTILIB_MATCHES     += mcpu?ck802=march?ck802\n+MULTILIB_MATCHES     += mcpu?ck802=mcpu?ck802t\n+MULTILIB_MATCHES     += mcpu?ck802=mcpu?ck802j\n+\n+# For arch ck801.\n+MULTILIB_MATCHES     += mcpu?ck801=march?ck801\n+MULTILIB_MATCHES     += mcpu?ck801=mcpu?ck801t\n+\n+# For arch ck803.\n+MULTILIB_MATCHES     += mcpu?ck803f=march?ck803\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803fh\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803h\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803t\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803ht\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803e\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803eh\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803et\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803eht\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803ef\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803efh\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803ft\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803eft\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803efht\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803r1\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803fr1\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803fhr1\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803hr1\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803tr1\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803htr1\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803er1\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803ehr1\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803etr1\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803ehtr1\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803efr1\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803efhr1\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803ftr1\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803eftr1\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803efhtr1\n+\n+# For arch ck803s.\n+MULTILIB_MATCHES     += mcpu?ck803f=march?ck803s\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803s\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803st\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803se\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803sf\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803sef\n+MULTILIB_MATCHES     += mcpu?ck803f=mcpu?ck803seft\n+\n+# For arch ck810.\n+MULTILIB_MATCHES     += mcpu?ck810f=mcpu?ck810e\n+MULTILIB_MATCHES     += mcpu?ck810f=mcpu?ck810et\n+MULTILIB_MATCHES     += mcpu?ck810f=mcpu?ck810ef\n+MULTILIB_MATCHES     += mcpu?ck810f=mcpu?ck810eft\n+MULTILIB_MATCHES     += mcpu?ck810f=march?ck810\n+MULTILIB_MATCHES     += mcpu?ck810f=mcpu?ck810\n+MULTILIB_MATCHES     += mcpu?ck810f=mcpu?ck810v\n+MULTILIB_MATCHES     += mcpu?ck810f=mcpu?ck810t\n+MULTILIB_MATCHES     += mcpu?ck810f=mcpu?ck810vf\n+MULTILIB_MATCHES     += mcpu?ck810f=mcpu?ck810tv\n+MULTILIB_MATCHES     += mcpu?ck810f=mcpu?ck810ft\n+MULTILIB_MATCHES     += mcpu?ck810f=mcpu?ck810ftv\n+\n+# For arch ck807.\n+MULTILIB_MATCHES     += mcpu?ck807f=march?ck807e\n+MULTILIB_MATCHES     += mcpu?ck807f=march?ck807ef\n+MULTILIB_MATCHES     += mcpu?ck807f=march?ck807\n+MULTILIB_MATCHES     += mcpu?ck807f=mcpu?ck807\n+\n+# For option -msoft-float/-mhard-float.\n+MULTILIB_OPTIONS     += msoft-float/mhard-float\n+MULTILIB_DIRNAMES    += soft-fp hard-fp\n+MULTILIB_EXCEPTIONS  += *mcpu=ck801/*mhard-float*\n+MULTILIB_EXCEPTIONS  += *mcpu=ck802/*mhard-float*"}, {"sha": "4a145a6fbf3c7f24a5ee16e54fc679ca7c70b74b", "filename": "gcc/config/csky/t-csky-linux", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Ft-csky-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Ft-csky-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Ft-csky-linux?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0", "patch": "@@ -0,0 +1,52 @@\n+# Multilib configuration for csky*-linux-*.\n+#\n+# Copyright (C) 2018 Free Software Foundation, Inc.\n+# Contributed by C-SKY Microsystems and Mentor Graphics.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+\n+# Endiannesses.\n+MULTILIB_OPTIONS     = mlittle-endian/mbig-endian\n+MULTILIB_DIRNAMES    = little big\n+MULTILIB_MATCHES     = mlittle-endian=EL\n+MULTILIB_MATCHES     = mbig-endian=EB\n+\n+MULTILIB_EXCEPTIONS  =\n+CSKY_MULTILIB_OSDIRNAMES = mbig-endian=/big mlittle-endian=/. mhard-float=/hard-fp msoft-float=/. mcpu.ck810f=/. mcpu.ck807f=/ck807\n+\n+# Arch variants.\n+MULTILIB_OPTIONS     += mcpu=ck810f/mcpu=ck807f\n+MULTILIB_DIRNAMES    += ck810 ck807\n+\n+# For ck807.\n+MULTILIB_MATCHES     += mcpu?ck807f=march?ck807\n+MULTILIB_MATCHES     += mcpu?ck807f=mcpu?ck807\n+\n+# For arch ck810.\n+MULTILIB_MATCHES     += mcpu?ck810f=march?ck810\n+MULTILIB_MATCHES     += mcpu?ck810f=mcpu?ck810\n+MULTILIB_MATCHES     += mcpu?ck810f=mcpu?ck810v\n+MULTILIB_MATCHES     += mcpu?ck810f=mcpu?ck810t\n+MULTILIB_MATCHES     += mcpu?ck810f=mcpu?ck810vt\n+MULTILIB_MATCHES     += mcpu?ck810f=mcpu?ck810vf\n+MULTILIB_MATCHES     += mcpu?ck810f=mcpu?ck810ft\n+MULTILIB_MATCHES     += mcpu?ck810f=mcpu?ck810vft\n+\n+# For option -msoft-float/-mhard-float.\n+MULTILIB_OPTIONS    += msoft-float/mhard-float\n+MULTILIB_DIRNAMES   += soft-fp hard-fp"}, {"sha": "97c03d30bced712d474bd1c99883d6b770402336", "filename": "gcc/config/csky/t-sysroot-suffix", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Ft-sysroot-suffix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7232b999b8336cf4e261407ed9289c77bed1f0/gcc%2Fconfig%2Fcsky%2Ft-sysroot-suffix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Ft-sysroot-suffix?ref=cc7232b999b8336cf4e261407ed9289c77bed1f0", "patch": "@@ -0,0 +1,28 @@\n+# Makefile fragment for C-SKY sysroot suffix.\n+#\n+# Copyright (C) 2018 Free Software Foundation, Inc.\n+# Contributed by C-SKY Microsystems and Mentor Graphics.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Generate SYSROOT_SUFFIX_SPEC from MULTILIB_OSDIRNAMES.\n+\n+sysroot-suffix.h: $(srcdir)/config/csky/print-sysroot-suffix.sh\n+\t$(SHELL) $(srcdir)/config/csky/print-sysroot-suffix.sh \\\n+\t  \"$(CSKY_MULTILIB_OSDIRNAMES)\" \"$(MULTILIB_OPTIONS)\" \\\n+\t  \"$(MULTILIB_MATCHES)\" > tmp-sysroot-suffix.h\n+\tmv tmp-sysroot-suffix.h $@"}]}