{"sha": "73dc68b9226a262bd193fb15592d378dd9768822", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNkYzY4YjkyMjZhMjYyYmQxOTNmYjE1NTkyZDM3OGRkOTc2ODgyMg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-10-10T14:37:36Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-10-10T14:37:36Z"}, "message": "Make comp_ptr_ttypes_real return bool.\n\ncomp_ptr_ttypes_real could use bool instead of int since it only returns\n0 or 1.\n\n\t* typeck.c (comp_ptr_ttypes_real): Change the return type to bool.\n\tUse false instead of 0.\n\nFrom-SVN: r276808", "tree": {"sha": "7927a73cd56632165a5a256565665452f24af3d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7927a73cd56632165a5a256565665452f24af3d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73dc68b9226a262bd193fb15592d378dd9768822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73dc68b9226a262bd193fb15592d378dd9768822", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73dc68b9226a262bd193fb15592d378dd9768822", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73dc68b9226a262bd193fb15592d378dd9768822/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "247afa98ba2512c7d90f3e9e05af41067ef756a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/247afa98ba2512c7d90f3e9e05af41067ef756a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/247afa98ba2512c7d90f3e9e05af41067ef756a3"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "2e3b7f7dffdc25c7e233c641eaa1465c8e2b3ee6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73dc68b9226a262bd193fb15592d378dd9768822/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73dc68b9226a262bd193fb15592d378dd9768822/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=73dc68b9226a262bd193fb15592d378dd9768822", "patch": "@@ -1,3 +1,8 @@\n+2019-10-10  Marek Polacek  <polacek@redhat.com>\n+\n+\t* typeck.c (comp_ptr_ttypes_real): Change the return type to bool.\n+\tUse false instead of 0.\n+\n 2019-10-10  Jakub Jelinek  <jakub@redhat.com>\n \n \t* parser.h (struct cp_omp_declare_simd_data): Add variant_p member."}, {"sha": "38664ecd1772715f439eb4a3f3c4fc6a9b9f4865", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73dc68b9226a262bd193fb15592d378dd9768822/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73dc68b9226a262bd193fb15592d378dd9768822/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=73dc68b9226a262bd193fb15592d378dd9768822", "patch": "@@ -52,7 +52,7 @@ static tree cp_pointer_int_sum (location_t, enum tree_code, tree, tree,\n \t\t\t\ttsubst_flags_t);\n static tree rationalize_conditional_expr (enum tree_code, tree, \n \t\t\t\t\t  tsubst_flags_t);\n-static int comp_ptr_ttypes_real (tree, tree, int);\n+static bool comp_ptr_ttypes_real (tree, tree, int);\n static bool comp_except_types (tree, tree, bool);\n static bool comp_array_types (const_tree, const_tree, compare_bounds_t, bool);\n static tree pointer_diff (location_t, tree, tree, tree, tsubst_flags_t, tree *);\n@@ -9903,7 +9903,7 @@ check_return_expr (tree retval, bool *no_warning)\n    If CONSTP is positive, then all outer pointers have been\n    const-qualified.  */\n \n-static int\n+static bool\n comp_ptr_ttypes_real (tree to, tree from, int constp)\n {\n   bool to_more_cv_qualified = false;\n@@ -9912,25 +9912,25 @@ comp_ptr_ttypes_real (tree to, tree from, int constp)\n   for (; ; to = TREE_TYPE (to), from = TREE_TYPE (from))\n     {\n       if (TREE_CODE (to) != TREE_CODE (from))\n-\treturn 0;\n+\treturn false;\n \n       if (TREE_CODE (from) == OFFSET_TYPE\n \t  && !same_type_p (TYPE_OFFSET_BASETYPE (from),\n \t\t\t   TYPE_OFFSET_BASETYPE (to)))\n-\treturn 0;\n+\treturn false;\n \n       /* Const and volatile mean something different for function and\n \t array types, so the usual checks are not appropriate.  We'll\n \t check the array type elements in further iterations.  */\n       if (!FUNC_OR_METHOD_TYPE_P (to) && TREE_CODE (to) != ARRAY_TYPE)\n \t{\n \t  if (!at_least_as_qualified_p (to, from))\n-\t    return 0;\n+\t    return false;\n \n \t  if (!at_least_as_qualified_p (from, to))\n \t    {\n \t      if (constp == 0)\n-\t\treturn 0;\n+\t\treturn false;\n \t      to_more_cv_qualified = true;\n \t    }\n \n@@ -9946,7 +9946,7 @@ comp_ptr_ttypes_real (tree to, tree from, int constp)\n \t not match, then no conversion is possible.  */\n       if (TREE_CODE (to) == ARRAY_TYPE\n \t  && !comp_array_types (to, from, bounds_first, /*strict=*/false))\n-\treturn 0;\n+\treturn false;\n \n       if (!TYPE_PTR_P (to)\n \t  && !TYPE_PTRDATAMEM_P (to)"}]}