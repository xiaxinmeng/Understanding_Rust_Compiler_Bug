{"sha": "c081413602d8a15b4e7c37ece6e757e33632e561", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA4MTQxMzYwMmQ4YTE1YjRlN2MzN2VjZTZlNzU3ZTMzNjMyZTU2MQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-03-05T21:57:13Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-03-05T21:57:13Z"}, "message": "langhooks.c (add_builtin_type): New function.\n\n\t* langhooks.c (add_builtin_type): New function.\n\t* langhooks.h (add_builtin_type): Export it.\n\t* config/mep/mep.c (mep_init_builtins): Use it.\n\t* config/rs6000/rs6000.c (rs6000_init_builtins): Use it.\n\nFrom-SVN: r184960", "tree": {"sha": "908fc4e9290a416e1c851c8683a076b5d6982f1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/908fc4e9290a416e1c851c8683a076b5d6982f1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c081413602d8a15b4e7c37ece6e757e33632e561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c081413602d8a15b4e7c37ece6e757e33632e561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c081413602d8a15b4e7c37ece6e757e33632e561", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c081413602d8a15b4e7c37ece6e757e33632e561/comments", "author": null, "committer": null, "parents": [{"sha": "704b8582e91b7553b43a17794b76949e61048deb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/704b8582e91b7553b43a17794b76949e61048deb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/704b8582e91b7553b43a17794b76949e61048deb"}], "stats": {"total": 168, "additions": 61, "deletions": 107}, "files": [{"sha": "bf33eb4c263e849a76356d7c9ff1df25678f36ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c081413602d8a15b4e7c37ece6e757e33632e561/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c081413602d8a15b4e7c37ece6e757e33632e561/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c081413602d8a15b4e7c37ece6e757e33632e561", "patch": "@@ -1,3 +1,10 @@\n+2012-03-05  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* langhooks.c (add_builtin_type): New function.\n+\t* langhooks.h (add_builtin_type): Export it.\n+\t* config/mep/mep.c (mep_init_builtins): Use it.\n+\t* config/rs6000/rs6000.c (rs6000_init_builtins): Use it.\n+\n 2012-03-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/51902"}, {"sha": "4351702fa4b056bebbe28aaa4defdb3d8c46fa08", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 11, "deletions": 27, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c081413602d8a15b4e7c37ece6e757e33632e561/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c081413602d8a15b4e7c37ece6e757e33632e561/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=c081413602d8a15b4e7c37ece6e757e33632e561", "patch": "@@ -6059,33 +6059,17 @@ mep_init_builtins (void)\n   v4uhi_type_node = build_vector_type (unsigned_intHI_type_node, 4);\n   v2usi_type_node = build_vector_type (unsigned_intSI_type_node, 2);\n \n-  (*lang_hooks.decls.pushdecl)\n-    (build_decl (BUILTINS_LOCATION, TYPE_DECL, get_identifier (\"cp_data_bus_int\"),\n-\t\t cp_data_bus_int_type_node));\n-\n-  (*lang_hooks.decls.pushdecl)\n-    (build_decl (BUILTINS_LOCATION, TYPE_DECL, get_identifier (\"cp_vector\"),\n-\t\t opaque_vector_type_node));\n-\n-  (*lang_hooks.decls.pushdecl)\n-    (build_decl (BUILTINS_LOCATION, TYPE_DECL, get_identifier (\"cp_v8qi\"),\n-\t\t v8qi_type_node));\n-  (*lang_hooks.decls.pushdecl)\n-    (build_decl (BUILTINS_LOCATION, TYPE_DECL, get_identifier (\"cp_v4hi\"),\n-\t\t v4hi_type_node));\n-  (*lang_hooks.decls.pushdecl)\n-    (build_decl (BUILTINS_LOCATION, TYPE_DECL, get_identifier (\"cp_v2si\"),\n-\t\t v2si_type_node));\n-\n-  (*lang_hooks.decls.pushdecl)\n-    (build_decl (BUILTINS_LOCATION, TYPE_DECL, get_identifier (\"cp_v8uqi\"),\n-\t\t v8uqi_type_node));\n-  (*lang_hooks.decls.pushdecl)\n-    (build_decl (BUILTINS_LOCATION, TYPE_DECL, get_identifier (\"cp_v4uhi\"),\n-\t\t v4uhi_type_node));\n-  (*lang_hooks.decls.pushdecl)\n-    (build_decl (BUILTINS_LOCATION, TYPE_DECL, get_identifier (\"cp_v2usi\"),\n-\t\t v2usi_type_node));\n+  add_builtin_type (\"cp_data_bus_int\", cp_data_bus_int_type_node);\n+\n+  add_builtin_type (\"cp_vector\", opaque_vector_type_node);\n+\n+  add_builtin_type (\"cp_v8qi\", v8qi_type_node);\n+  add_builtin_type (\"cp_v4hi\", v4hi_type_node);\n+  add_builtin_type (\"cp_v2si\", v2si_type_node);\n+\n+  add_builtin_type (\"cp_v8uqi\", v8uqi_type_node);\n+  add_builtin_type (\"cp_v4uhi\", v4uhi_type_node);\n+  add_builtin_type (\"cp_v2usi\", v2usi_type_node);\n \n   /* Intrinsics like mep_cadd3 are implemented with two groups of\n      instructions, one which uses UNSPECs and one which uses a specific"}, {"sha": "04ea22b70dd10160b8bfb01870cd47b6e4ad97a3", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 30, "deletions": 79, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c081413602d8a15b4e7c37ece6e757e33632e561/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c081413602d8a15b4e7c37ece6e757e33632e561/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c081413602d8a15b4e7c37ece6e757e33632e561", "patch": "@@ -11567,114 +11567,68 @@ rs6000_init_builtins (void)\n   builtin_mode_to_type[V16QImode][0] = V16QI_type_node;\n   builtin_mode_to_type[V16QImode][1] = unsigned_V16QI_type_node;\n \n-  tdecl = build_decl (BUILTINS_LOCATION, TYPE_DECL,\n-      \t\t      get_identifier (\"__bool char\"),\n-\t\t      bool_char_type_node);\n+  tdecl = add_builtin_type (\"__bool char\", bool_char_type_node);\n   TYPE_NAME (bool_char_type_node) = tdecl;\n-  (*lang_hooks.decls.pushdecl) (tdecl);\n-  tdecl = build_decl (BUILTINS_LOCATION, TYPE_DECL,\n-      \t\t      get_identifier (\"__bool short\"),\n-\t\t      bool_short_type_node);\n+\n+  tdecl = add_builtin_type (\"__bool short\", bool_short_type_node);\n   TYPE_NAME (bool_short_type_node) = tdecl;\n-  (*lang_hooks.decls.pushdecl) (tdecl);\n-  tdecl = build_decl (BUILTINS_LOCATION, TYPE_DECL,\n-      \t\t      get_identifier (\"__bool int\"),\n-\t\t      bool_int_type_node);\n+\n+  tdecl = add_builtin_type (\"__bool int\", bool_int_type_node);\n   TYPE_NAME (bool_int_type_node) = tdecl;\n-  (*lang_hooks.decls.pushdecl) (tdecl);\n-  tdecl = build_decl (BUILTINS_LOCATION, TYPE_DECL, get_identifier (\"__pixel\"),\n-\t\t      pixel_type_node);\n+\n+  tdecl = add_builtin_type (\"__pixel\", pixel_type_node);\n   TYPE_NAME (pixel_type_node) = tdecl;\n-  (*lang_hooks.decls.pushdecl) (tdecl);\n \n   bool_V16QI_type_node = build_vector_type (bool_char_type_node, 16);\n   bool_V8HI_type_node = build_vector_type (bool_short_type_node, 8);\n   bool_V4SI_type_node = build_vector_type (bool_int_type_node, 4);\n   bool_V2DI_type_node = build_vector_type (bool_long_type_node, 2);\n   pixel_V8HI_type_node = build_vector_type (pixel_type_node, 8);\n \n-  tdecl = build_decl (BUILTINS_LOCATION, TYPE_DECL,\n-      \t\t      get_identifier (\"__vector unsigned char\"),\n-\t\t      unsigned_V16QI_type_node);\n+  tdecl = add_builtin_type (\"__vector unsigned char\", unsigned_V16QI_type_node);\n   TYPE_NAME (unsigned_V16QI_type_node) = tdecl;\n-  (*lang_hooks.decls.pushdecl) (tdecl);\n-  tdecl = build_decl (BUILTINS_LOCATION,\n-      \t\t      TYPE_DECL, get_identifier (\"__vector signed char\"),\n-\t\t      V16QI_type_node);\n+\n+  tdecl = add_builtin_type (\"__vector signed char\", V16QI_type_node);\n   TYPE_NAME (V16QI_type_node) = tdecl;\n-  (*lang_hooks.decls.pushdecl) (tdecl);\n-  tdecl = build_decl (BUILTINS_LOCATION,\n-      \t\t      TYPE_DECL, get_identifier (\"__vector __bool char\"),\n-\t\t      bool_V16QI_type_node);\n+\n+  tdecl = add_builtin_type (\"__vector __bool char\", bool_V16QI_type_node);\n   TYPE_NAME ( bool_V16QI_type_node) = tdecl;\n-  (*lang_hooks.decls.pushdecl) (tdecl);\n \n-  tdecl = build_decl (BUILTINS_LOCATION,\n-      \t\t      TYPE_DECL, get_identifier (\"__vector unsigned short\"),\n-\t\t      unsigned_V8HI_type_node);\n+  tdecl = add_builtin_type (\"__vector unsigned short\", unsigned_V8HI_type_node);\n   TYPE_NAME (unsigned_V8HI_type_node) = tdecl;\n-  (*lang_hooks.decls.pushdecl) (tdecl);\n-  tdecl = build_decl (BUILTINS_LOCATION,\n-      \t\t      TYPE_DECL, get_identifier (\"__vector signed short\"),\n-\t\t      V8HI_type_node);\n+\n+  tdecl = add_builtin_type (\"__vector signed short\", V8HI_type_node);\n   TYPE_NAME (V8HI_type_node) = tdecl;\n-  (*lang_hooks.decls.pushdecl) (tdecl);\n-  tdecl = build_decl (BUILTINS_LOCATION, TYPE_DECL,\n-      \t\t      get_identifier (\"__vector __bool short\"),\n-\t\t      bool_V8HI_type_node);\n+\n+  tdecl = add_builtin_type (\"__vector __bool short\", bool_V8HI_type_node);\n   TYPE_NAME (bool_V8HI_type_node) = tdecl;\n-  (*lang_hooks.decls.pushdecl) (tdecl);\n \n-  tdecl = build_decl (BUILTINS_LOCATION, TYPE_DECL,\n-      \t\t      get_identifier (\"__vector unsigned int\"),\n-\t\t      unsigned_V4SI_type_node);\n+  tdecl = add_builtin_type (\"__vector unsigned int\", unsigned_V4SI_type_node);\n   TYPE_NAME (unsigned_V4SI_type_node) = tdecl;\n-  (*lang_hooks.decls.pushdecl) (tdecl);\n-  tdecl = build_decl (BUILTINS_LOCATION,\n-      \t\t      TYPE_DECL, get_identifier (\"__vector signed int\"),\n-\t\t      V4SI_type_node);\n+\n+  tdecl = add_builtin_type (\"__vector signed int\", V4SI_type_node);\n   TYPE_NAME (V4SI_type_node) = tdecl;\n-  (*lang_hooks.decls.pushdecl) (tdecl);\n-  tdecl = build_decl (BUILTINS_LOCATION,\n-      \t\t      TYPE_DECL, get_identifier (\"__vector __bool int\"),\n-\t\t      bool_V4SI_type_node);\n+\n+  tdecl = add_builtin_type (\"__vector __bool int\", bool_V4SI_type_node);\n   TYPE_NAME (bool_V4SI_type_node) = tdecl;\n-  (*lang_hooks.decls.pushdecl) (tdecl);\n \n-  tdecl = build_decl (BUILTINS_LOCATION,\n-      \t\t      TYPE_DECL, get_identifier (\"__vector float\"),\n-\t\t      V4SF_type_node);\n+  tdecl = add_builtin_type (\"__vector float\", V4SF_type_node);\n   TYPE_NAME (V4SF_type_node) = tdecl;\n-  (*lang_hooks.decls.pushdecl) (tdecl);\n-  tdecl = build_decl (BUILTINS_LOCATION,\n-      \t\t      TYPE_DECL, get_identifier (\"__vector __pixel\"),\n-\t\t      pixel_V8HI_type_node);\n+\n+  tdecl = add_builtin_type (\"__vector __pixel\", pixel_V8HI_type_node);\n   TYPE_NAME (pixel_V8HI_type_node) = tdecl;\n-  (*lang_hooks.decls.pushdecl) (tdecl);\n \n-  tdecl = build_decl (BUILTINS_LOCATION,\n-\t\t      TYPE_DECL, get_identifier (\"__vector double\"),\n-\t\t      V2DF_type_node);\n+  tdecl = add_builtin_type (\"__vector double\", V2DF_type_node);\n   TYPE_NAME (V2DF_type_node) = tdecl;\n-  (*lang_hooks.decls.pushdecl) (tdecl);\n \n-  tdecl = build_decl (BUILTINS_LOCATION,\n-\t\t      TYPE_DECL, get_identifier (\"__vector long\"),\n-\t\t      V2DI_type_node);\n+  tdecl = add_builtin_type (\"__vector long\", V2DI_type_node);\n   TYPE_NAME (V2DI_type_node) = tdecl;\n-  (*lang_hooks.decls.pushdecl) (tdecl);\n \n-  tdecl = build_decl (BUILTINS_LOCATION,\n-\t\t      TYPE_DECL, get_identifier (\"__vector unsigned long\"),\n-\t\t      unsigned_V2DI_type_node);\n+  tdecl = add_builtin_type (\"__vector unsigned long\", unsigned_V2DI_type_node);\n   TYPE_NAME (unsigned_V2DI_type_node) = tdecl;\n-  (*lang_hooks.decls.pushdecl) (tdecl);\n \n-  tdecl = build_decl (BUILTINS_LOCATION,\n-\t\t      TYPE_DECL, get_identifier (\"__vector __bool long\"),\n-\t\t      bool_V2DI_type_node);\n+  tdecl = add_builtin_type (\"__vector __bool long\", bool_V2DI_type_node);\n   TYPE_NAME (bool_V2DI_type_node) = tdecl;\n-  (*lang_hooks.decls.pushdecl) (tdecl);\n \n   /* Paired and SPE builtins are only available if you build a compiler with\n      the appropriate options, so only create those builtins with the\n@@ -11843,10 +11797,7 @@ spe_init_builtins (void)\n                                 signed_char_type_node,\n                                 NULL_TREE);\n \n-  (*lang_hooks.decls.pushdecl)\n-    (build_decl (BUILTINS_LOCATION, TYPE_DECL,\n-\t\t get_identifier (\"__ev64_opaque__\"),\n-\t\t opaque_V2SI_type_node));\n+  add_builtin_type (\"__ev64_opaque__\", opaque_V2SI_type_node);\n \n   /* Initialize irregular SPE builtins.  */\n "}, {"sha": "017e024e24821eef18a85dacf5935b582feca318", "filename": "gcc/langhooks.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c081413602d8a15b4e7c37ece6e757e33632e561/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c081413602d8a15b4e7c37ece6e757e33632e561/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=c081413602d8a15b4e7c37ece6e757e33632e561", "patch": "@@ -605,6 +605,16 @@ lhd_builtin_function (tree decl)\n   return decl;\n }\n \n+/* Create a builtin type.  */\n+\n+tree\n+add_builtin_type (const char *name, tree type)\n+{\n+  tree   id = get_identifier (name);\n+  tree decl = build_decl (BUILTINS_LOCATION, TYPE_DECL, id, type);\n+  return lang_hooks.decls.pushdecl (decl);\n+}\n+\n /* LTO hooks.  */\n \n /* Used to save and restore any previously active section.  */"}, {"sha": "15497225cbd7c14686539b65859b35ff87743a6d", "filename": "gcc/langhooks.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c081413602d8a15b4e7c37ece6e757e33632e561/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c081413602d8a15b4e7c37ece6e757e33632e561/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=c081413602d8a15b4e7c37ece6e757e33632e561", "patch": "@@ -479,6 +479,7 @@ struct lang_hooks\n \n /* Each front end provides its own.  */\n extern struct lang_hooks lang_hooks;\n+\n extern tree add_builtin_function (const char *name, tree type,\n \t\t\t\t  int function_code, enum built_in_class cl,\n \t\t\t\t  const char *library_name,\n@@ -489,5 +490,6 @@ extern tree add_builtin_function_ext_scope (const char *name, tree type,\n \t\t\t\t\t    enum built_in_class cl,\n \t\t\t\t\t    const char *library_name,\n \t\t\t\t\t    tree attrs);\n-\n+extern tree add_builtin_type (const char *name, tree type);\n+ \n #endif /* GCC_LANG_HOOKS_H */"}]}