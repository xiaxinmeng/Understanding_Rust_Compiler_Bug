{"sha": "b008f16b7a279da845070dce786ea3afd5925364", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAwOGYxNmI3YTI3OWRhODQ1MDcwZGNlNzg2ZWEzYWZkNTkyNTM2NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-11-05T07:47:05Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-11-05T07:47:05Z"}, "message": "Implement UDL changes from P0732R2.\n\nImplementing the UDL changes was pretty straightforward; I simplified\ncp_parser_userdef_string_literal using the releasing_vec type from mangle.c.\n\nWhile looking at this, I realized that the string UDL template taking a\ncharacter pack that we implemented for C++14 didn't actually make it into\nC++14, so I've added a pedwarn for it and no longer suggest it in the\ndiagnostic about an invalid UDL template.\n\n\t* cp-tree.h (struct releasing_vec): Move from mangle.c.\n\tAdd get_ref method.\n\t* parser.c (cp_parser_userdef_string_literal): Use it.  Handle\n\tpassing the string to a single template parameter of class type.\n\t(cp_parser_template_declaration_after_parameters): Allow it.\n\tPedwarn about the character pack template that was proposed but not\n\taccepted for C++14, and don't suggest it.\n\nFrom-SVN: r265790", "tree": {"sha": "fecb35ba45ea46dcb0a2b02194e8b1b54ed0e467", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fecb35ba45ea46dcb0a2b02194e8b1b54ed0e467"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b008f16b7a279da845070dce786ea3afd5925364", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b008f16b7a279da845070dce786ea3afd5925364", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b008f16b7a279da845070dce786ea3afd5925364", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b008f16b7a279da845070dce786ea3afd5925364/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4be5c72cf3ea3ee98a97ac2e53d21122ad224b10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be5c72cf3ea3ee98a97ac2e53d21122ad224b10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4be5c72cf3ea3ee98a97ac2e53d21122ad224b10"}], "stats": {"total": 190, "additions": 121, "deletions": 69}, "files": [{"sha": "b0dc668d9df4c61da4026ed54142b02230f2713d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b008f16b7a279da845070dce786ea3afd5925364/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b008f16b7a279da845070dce786ea3afd5925364/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b008f16b7a279da845070dce786ea3afd5925364", "patch": "@@ -1,5 +1,14 @@\n 2018-11-04  Jason Merrill  <jason@redhat.com>\n \n+\tImplement UDL changes from P0732R2.\n+\t* cp-tree.h (struct releasing_vec): Move from mangle.c.\n+\tAdd get_ref method.\n+\t* parser.c (cp_parser_userdef_string_literal): Use it.  Handle\n+\tpassing the string to a single template parameter of class type.\n+\t(cp_parser_template_declaration_after_parameters): Allow it.\n+\tPedwarn about the character pack template that was proposed but not\n+\taccepted for C++14, and don't suggest it.\n+\n \tImplement P0732R2, class types in non-type template parameters.\n \t* error.c (dump_simple_decl): Look through a template parm object.\n \t* mangle.c (write_template_arg): Likewise."}, {"sha": "a895d0042abadf7a8f63fc337ed6dffb8f0ee85d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b008f16b7a279da845070dce786ea3afd5925364/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b008f16b7a279da845070dce786ea3afd5925364/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b008f16b7a279da845070dce786ea3afd5925364", "patch": "@@ -871,6 +871,34 @@ struct named_decl_hash : ggc_remove <tree>\n   static void mark_deleted (value_type) { gcc_unreachable (); }\n };\n \n+/* Simplified unique_ptr clone to release a tree vec on exit.  */\n+\n+struct releasing_vec\n+{\n+  typedef vec<tree, va_gc> vec_t;\n+\n+  releasing_vec (vec_t *v): v(v) { }\n+  releasing_vec (): v(make_tree_vector ()) { }\n+\n+  /* Copy ops are deliberately declared but not defined,\n+     copies must always be elided.  */\n+  releasing_vec (const releasing_vec &);\n+  releasing_vec &operator= (const releasing_vec &);\n+\n+  vec_t &operator* () const { return *v; }\n+  vec_t *operator-> () const { return v; }\n+  vec_t *get() const { return v; }\n+  operator vec_t *() const { return v; }\n+  tree& operator[] (unsigned i) const { return (*v)[i]; }\n+\n+  /* Necessary for use with vec** and vec*& interfaces.  */\n+  vec_t *&get_ref () { return v; }\n+\n+  ~releasing_vec() { release_tree_vector (v); }\n+private:\n+  vec_t *v;\n+};\n+\n struct GTY(()) tree_template_decl {\n   struct tree_decl_common common;\n   tree arguments;"}, {"sha": "b9d8ee2011606f8dfa250187fe5c203817bbe8a5", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b008f16b7a279da845070dce786ea3afd5925364/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b008f16b7a279da845070dce786ea3afd5925364/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=b008f16b7a279da845070dce786ea3afd5925364", "patch": "@@ -1545,30 +1545,6 @@ write_abi_tags (tree tags)\n   release_tree_vector (vec);\n }\n \n-/* Simplified unique_ptr clone to release a tree vec on exit.  */\n-\n-struct releasing_vec\n-{\n-  typedef vec<tree, va_gc> vec_t;\n-\n-  releasing_vec (vec_t *v): v(v) { }\n-  releasing_vec (): v(make_tree_vector ()) { }\n-\n-  /* Copy constructor is deliberately declared but not defined,\n-     copies must always be elided.  */\n-  releasing_vec (const releasing_vec &);\n-\n-  vec_t &operator* () const { return *v; }\n-  vec_t *operator-> () const { return v; }\n-  vec_t *get () const { return v; }\n-  operator vec_t *() const { return v; }\n-  tree& operator[] (unsigned i) const { return (*v)[i]; }\n-\n-  ~releasing_vec() { release_tree_vector (v); }\n-private:\n-  vec_t *v;\n-};\n-\n /* True iff the TREE_LISTS T1 and T2 of ABI tags are equivalent.  */\n \n static bool"}, {"sha": "30a47662f5561b6aa3231e85bcd4466d09c4ccdc", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 43, "deletions": 27, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b008f16b7a279da845070dce786ea3afd5925364/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b008f16b7a279da845070dce786ea3afd5925364/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b008f16b7a279da845070dce786ea3afd5925364", "patch": "@@ -4565,40 +4565,47 @@ cp_parser_userdef_string_literal (tree literal)\n   tree value = USERDEF_LITERAL_VALUE (literal);\n   int len = TREE_STRING_LENGTH (value)\n \t/ TREE_INT_CST_LOW (TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (value)))) - 1;\n-  tree decl, result;\n-  vec<tree, va_gc> *args;\n+  tree decl;\n \n   /* Build up a call to the user-defined operator.  */\n   /* Lookup the name we got back from the id-expression.  */\n-  args = make_tree_vector ();\n+  releasing_vec rargs;\n+  vec<tree, va_gc> *&args = rargs.get_ref();\n   vec_safe_push (args, value);\n   vec_safe_push (args, build_int_cst (size_type_node, len));\n   decl = lookup_literal_operator (name, args);\n \n   if (decl && decl != error_mark_node)\n-    {\n-      result = finish_call_expr (decl, &args, false, true,\n-\t\t\t\t tf_warning_or_error);\n-      release_tree_vector (args);\n-      return result;\n-    }\n-  release_tree_vector (args);\n+    return finish_call_expr (decl, &args, false, true,\n+\t\t\t     tf_warning_or_error);\n \n-  /* Look for a template function with typename parameter CharT\n-     and parameter pack CharT...  Call the function with\n-     template parameter characters representing the string.  */\n-  args = make_tree_vector ();\n+  /* Look for a suitable template function, either (C++20) with a single\n+     parameter of class type, or (N3599) with typename parameter CharT and\n+     parameter pack CharT...  */\n+  args->truncate (0);\n   decl = lookup_literal_operator (name, args);\n   if (decl && decl != error_mark_node)\n     {\n-      tree tmpl_args = make_string_pack (value);\n+      /* Use resolve_nondeduced_context to try to choose one form of template\n+\t or the other.  */\n+      tree tmpl_args = make_tree_vec (1);\n+      TREE_VEC_ELT (tmpl_args, 0) = value;\n       decl = lookup_template_function (decl, tmpl_args);\n-      result = finish_call_expr (decl, &args, false, true,\n-\t\t\t\t tf_warning_or_error);\n-      release_tree_vector (args);\n-      return result;\n+      tree res = resolve_nondeduced_context (decl, tf_none);\n+      if (DECL_P (res))\n+\tdecl = res;\n+      else\n+\t{\n+\t  TREE_OPERAND (decl, 1) = make_string_pack (value);\n+\t  res = resolve_nondeduced_context (decl, tf_none);\n+\t  if (DECL_P (res))\n+\t    decl = res;\n+\t}\n+      if (!DECL_P (decl) && cxx_dialect > cxx17)\n+\tTREE_OPERAND (decl, 1) = tmpl_args;\n+      return finish_call_expr (decl, &args, false, true,\n+\t\t\t       tf_warning_or_error);\n     }\n-  release_tree_vector (args);\n \n   error (\"unable to find string literal operator %qD with %qT, %qT arguments\",\n \t name, TREE_TYPE (value), size_type_node);\n@@ -27222,8 +27229,12 @@ cp_parser_template_declaration_after_parameters (cp_parser* parser,\n \t    {\n \t      tree parm_list = TREE_VEC_ELT (parameter_list, 0);\n \t      tree parm = INNERMOST_TEMPLATE_PARMS (parm_list);\n-\t      if (TREE_TYPE (parm) != char_type_node\n-\t\t  || !TEMPLATE_PARM_PARAMETER_PACK (DECL_INITIAL (parm)))\n+\t      if (CLASS_TYPE_P (TREE_TYPE (parm)))\n+\t\t/* OK, C++20 string literal operator template.  We don't need\n+\t\t   to warn in lower dialects here because we will have already\n+\t\t   warned about the template parameter.  */;\n+\t      else if (TREE_TYPE (parm) != char_type_node\n+\t\t       || !TEMPLATE_PARM_PARAMETER_PACK (DECL_INITIAL (parm)))\n \t\tok = false;\n \t    }\n \t  else if (num_parms == 2 && cxx_dialect >= cxx14)\n@@ -27236,20 +27247,25 @@ cp_parser_template_declaration_after_parameters (cp_parser* parser,\n \t\t  || TREE_TYPE (parm) != TREE_TYPE (type)\n \t\t  || !TEMPLATE_PARM_PARAMETER_PACK (DECL_INITIAL (parm)))\n \t\tok = false;\n+\t      else\n+\t\t/* http://cplusplus.github.io/EWG/ewg-active.html#66  */\n+\t\tpedwarn (DECL_SOURCE_LOCATION (decl), OPT_Wpedantic,\n+\t\t\t \"ISO C++ did not adopt string literal operator templa\"\n+\t\t\t \"tes taking an argument pack of characters\");\n \t    }\n \t  else\n \t    ok = false;\n \t}\n       if (!ok)\n \t{\n-\t  if (cxx_dialect >= cxx14)\n-\t    error (\"literal operator template %qD has invalid parameter list.\"\n-\t\t   \"  Expected non-type template argument pack <char...>\"\n-\t\t   \" or <typename CharT, CharT...>\",\n+\t  if (cxx_dialect > cxx17)\n+\t    error (\"literal operator template %qD has invalid parameter list;\"\n+\t\t   \"  Expected non-type template parameter pack <char...> \"\n+\t\t   \"  or single non-type parameter of class type\",\n \t\t   decl);\n \t  else\n \t    error (\"literal operator template %qD has invalid parameter list.\"\n-\t\t   \"  Expected non-type template argument pack <char...>\",\n+\t\t   \"  Expected non-type template parameter pack <char...>\",\n \t\t   decl);\n \t}\n     }"}, {"sha": "1b9888b7159d2f24bff3837c6513271006469c37", "filename": "gcc/testsuite/g++.dg/cpp0x/udlit-overflow.C", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b008f16b7a279da845070dce786ea3afd5925364/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-overflow.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b008f16b7a279da845070dce786ea3afd5925364/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-overflow.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-overflow.C?ref=b008f16b7a279da845070dce786ea3afd5925364", "patch": "@@ -1,19 +1,19 @@\n // { dg-do compile { target c++11 } }\n-// PR c++/52654\r\n-\r\n-int\r\n-operator\"\" _w(const char*)\r\n-{ return 0; }\r\n-\r\n-template<char...>\r\n-  int\r\n-  operator\"\" _tw()\r\n-  { return 0; }\r\n-\r\n-int i = 12345678901234567890123456789012345678901234567890_w;\r\n-int j = 12345678901234567890123456789.012345678901234567890e+1234567890_w;\r\n-int k = 12345678901234567890123456789.012345678901234567890e-1234567890_w;\r\n-\r\n-int ti = 12345678901234567890123456789012345678901234567890_tw;\r\n-int tj = 12345678901234567890123456789.012345678901234567890e+1234567890_tw;\r\n-int tk = 12345678901234567890123456789.012345678901234567890e-1234567890_tw;\r\n+// PR c++/52654\n+\n+int\n+operator\"\" _w(const char*)\n+{ return 0; }\n+\n+template<char...>\n+  int\n+  operator\"\" _tw()\n+  { return 0; }\n+\n+int i = 12345678901234567890123456789012345678901234567890_w;\n+int j = 12345678901234567890123456789.012345678901234567890e+1234567890_w;\n+int k = 12345678901234567890123456789.012345678901234567890e-1234567890_w;\n+\n+int ti = 12345678901234567890123456789012345678901234567890_tw;\n+int tj = 12345678901234567890123456789.012345678901234567890e+1234567890_tw;\n+int tk = 12345678901234567890123456789.012345678901234567890e-1234567890_tw;"}, {"sha": "f1fc3b4622762b63dd883fcab14b6f79ac73fe37", "filename": "gcc/testsuite/g++.dg/cpp1y/pr58708.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b008f16b7a279da845070dce786ea3afd5925364/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58708.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b008f16b7a279da845070dce786ea3afd5925364/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58708.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58708.C?ref=b008f16b7a279da845070dce786ea3afd5925364", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run { target c++14 } }\n+// { dg-options -w }\n \n template<typename, typename>\n   struct is_same"}, {"sha": "ee468aabb2b4426556e39ea4542918cf55234f62", "filename": "gcc/testsuite/g++.dg/cpp1y/pr59867.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b008f16b7a279da845070dce786ea3afd5925364/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59867.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b008f16b7a279da845070dce786ea3afd5925364/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59867.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59867.C?ref=b008f16b7a279da845070dce786ea3afd5925364", "patch": "@@ -1,5 +1,6 @@\n // PR c++/59867\n // { dg-do compile { target c++14 } }\n+// { dg-options -w }\n \n using namespace std;\n "}, {"sha": "b523858e9c0934675d60ab2869e6c9035d1a7dff", "filename": "gcc/testsuite/g++.dg/cpp1y/udlit-char-template-sfinae.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b008f16b7a279da845070dce786ea3afd5925364/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template-sfinae.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b008f16b7a279da845070dce786ea3afd5925364/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template-sfinae.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template-sfinae.C?ref=b008f16b7a279da845070dce786ea3afd5925364", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run { target c++14 } }\n+// { dg-options -w }\n \n #include <cassert>\n "}, {"sha": "c5a67c96cf6b4f184bbe4d531f47e226ba83b94d", "filename": "gcc/testsuite/g++.dg/cpp1y/udlit-char-template-vs-std-literal-operator.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b008f16b7a279da845070dce786ea3afd5925364/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template-vs-std-literal-operator.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b008f16b7a279da845070dce786ea3afd5925364/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template-vs-std-literal-operator.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template-vs-std-literal-operator.C?ref=b008f16b7a279da845070dce786ea3afd5925364", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run { target c++14 } }\n+// { dg-options -w }\n \n #include <cassert>\n "}, {"sha": "6b7b5ecec6fffcefd72659076bce5a3fe76c37ca", "filename": "gcc/testsuite/g++.dg/cpp1y/udlit-char-template.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b008f16b7a279da845070dce786ea3afd5925364/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b008f16b7a279da845070dce786ea3afd5925364/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template.C?ref=b008f16b7a279da845070dce786ea3afd5925364", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile { target c++14 } }\n+// { dg-options -w }\n \n template<typename CharT, CharT... String>\n   int"}, {"sha": "d3c4c67ea26b73e4c25e293ce4b6e9792856dae7", "filename": "gcc/testsuite/g++.dg/cpp1y/udlit-char-template2.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b008f16b7a279da845070dce786ea3afd5925364/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b008f16b7a279da845070dce786ea3afd5925364/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template2.C?ref=b008f16b7a279da845070dce786ea3afd5925364", "patch": "@@ -1,5 +1,6 @@\n // PR c++/85864\n // { dg-do compile { target c++14 } }\n+// { dg-options -w }\n \n template<class T, T... S> struct String_template {};\n "}, {"sha": "246fab6c17869ca54f51e1d8d9c50876e73e505f", "filename": "gcc/testsuite/g++.dg/cpp2a/nontype-class6.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b008f16b7a279da845070dce786ea3afd5925364/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b008f16b7a279da845070dce786ea3afd5925364/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class6.C?ref=b008f16b7a279da845070dce786ea3afd5925364", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile { target c++2a } }\n+\n+struct A {\n+  char ar[10];\n+  constexpr A (const char *p) : ar()\n+  {\n+    for (int i = 0; i < 10; ++i)\n+      if ((ar[i] = p[i]) == 0)\n+\tbreak;\n+  }\n+  // auto operator<=> (const A&) = default;\n+};\n+\n+template <A a> constexpr A operator \"\" _sh() { return a; }\n+\n+constexpr auto a = \"foo\"_sh;\n+static_assert (a.ar[0] == 'f');"}]}