{"sha": "c00dd14e104d2e0fdd8011ff60d3ece69988eabd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAwZGQxNGUxMDRkMmUwZmRkODAxMWZmNjBkM2VjZTY5OTg4ZWFiZA==", "commit": {"author": {"name": "Jeff Sturm", "email": "jeff.sturm@commerceone.com", "date": "2001-02-07T01:46:42Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2001-02-07T01:46:42Z"}, "message": "typeck.c (build_prim_array_type): Added leading comment.\n\n2001-02-05  Jeff Sturm  <jeff.sturm@commerceone.com>\n\t    Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n\t* typeck.c (build_prim_array_type): Added leading comment.\n\t(build_java_array_type): Moved locals out of\n\tblock. Always create the `data' field, fixed alignment to match\n\tC++.\n\n(http://gcc.gnu.org/ml/gcc-patches/2001-02/msg00378.html)\n\nCo-Authored-By: Alexandre Petit-Bianco <apbianco@cygnus.com>\n\nFrom-SVN: r39507", "tree": {"sha": "a89f5a245c52a6b5a286c619f202b0418eec7f65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a89f5a245c52a6b5a286c619f202b0418eec7f65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c00dd14e104d2e0fdd8011ff60d3ece69988eabd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c00dd14e104d2e0fdd8011ff60d3ece69988eabd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c00dd14e104d2e0fdd8011ff60d3ece69988eabd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c00dd14e104d2e0fdd8011ff60d3ece69988eabd/comments", "author": null, "committer": null, "parents": [{"sha": "8480e4804cd9493fe7d3995f194138326a58b4c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8480e4804cd9493fe7d3995f194138326a58b4c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8480e4804cd9493fe7d3995f194138326a58b4c4"}], "stats": {"total": 53, "additions": 19, "deletions": 34}, "files": [{"sha": "5fc513a32cd5982dc15efcaa0bef9dee25f58a46", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c00dd14e104d2e0fdd8011ff60d3ece69988eabd/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c00dd14e104d2e0fdd8011ff60d3ece69988eabd/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=c00dd14e104d2e0fdd8011ff60d3ece69988eabd", "patch": "@@ -1,3 +1,11 @@\n+2001-02-05  Jeff Sturm  <jeff.sturm@commerceone.com>\n+\t    Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* typeck.c (build_prim_array_type): Added leading comment.\n+\t(build_java_array_type): Moved locals out of\n+\tblock. Always create the `data' field, fixed alignment to match\n+\tC++.\n+\n 2001-02-04  Tom Tromey  <tromey@redhat.com>\n \n \t* expr.c (java_lang_expand_expr): Don't bother recomputing"}, {"sha": "eb3b5339963d048449d4716272df94309653eb21", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 11, "deletions": 34, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c00dd14e104d2e0fdd8011ff60d3ece69988eabd/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c00dd14e104d2e0fdd8011ff60d3ece69988eabd/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=c00dd14e104d2e0fdd8011ff60d3ece69988eabd", "patch": "@@ -359,6 +359,11 @@ java_array_type_length (array_type)\n   return -1;\n }\n \n+/* An array of unknown length will be ultimately given an length of\n+   -2, so that we can still have `length' producing a negative value\n+   even if found. This was part of an optimization amaing at removing\n+   `length' from static arrays. We could restore it, FIXME.  */\n+\n tree\n build_prim_array_type (element_type, length)\n      tree element_type;\n@@ -378,7 +383,7 @@ build_java_array_type (element_type, length)\n      tree element_type;\n      HOST_WIDE_INT length;\n {\n-  tree sig, t, fld;\n+  tree sig, t, fld, atype, arfld;\n   char buf[12];\n   tree elsig = build_java_signature (element_type);\n   tree el_name = element_type;\n@@ -416,39 +421,11 @@ build_java_array_type (element_type, length)\n   FIELD_PUBLIC (fld) = 1;\n   FIELD_FINAL (fld) = 1;\n \n-  if (length >= 0)\n-    {\n-      tree atype = build_prim_array_type (element_type, length);\n-      tree arfld = build_decl (FIELD_DECL, get_identifier (\"data\"), atype);\n-      \n-      DECL_CONTEXT (arfld) = t;\n-      TREE_CHAIN (fld) = arfld;\n-\n-      /* We need to force the data field to begin at an alignment at\n-       least equal to the biggest alignment in an object type node\n-       in order to be compatible with the way that JArray is defined\n-       in CNI.  However, we can't exceed BIGGEST_FIELD_ALIGNMENT. */\n-      {\n-      unsigned desired_align = TYPE_ALIGN (object_type_node);\n-      desired_align = MAX (desired_align, TYPE_ALIGN (element_type));\n-#ifdef BIGGEST_FIELD_ALIGNMENT\n-      desired_align = MIN (desired_align, \n-                           (unsigned) BIGGEST_FIELD_ALIGNMENT);\n-#endif\n-#ifdef ADJUST_FIELD_ALIGN\n-      desired_align = ADJUST_FIELD_ALIGN (fld, desired_align);\n-#endif\n-      DECL_ALIGN (arfld) = desired_align;\n-      }\n-    }\n-  else\n-    {\n-      unsigned desired_align = TYPE_ALIGN (element_type);\n-#ifdef BIGGEST_FIELD_ALIGNMENT\n-      desired_align = MIN (desired_align, (unsigned) BIGGEST_FIELD_ALIGNMENT);\n-#endif\n-      TYPE_ALIGN (t) = desired_align;\n-    }\n+  atype = build_prim_array_type (element_type, length);\n+  arfld = build_decl (FIELD_DECL, get_identifier (\"data\"), atype);\n+  DECL_CONTEXT (arfld) = t;\n+  TREE_CHAIN (fld) = arfld;\n+  DECL_ALIGN (arfld) = TYPE_ALIGN (element_type);\n \n   /* We could layout_class, but that loads java.lang.Object prematurely.\n    * This is called by the parser, and it is a bad idea to do load_class"}]}