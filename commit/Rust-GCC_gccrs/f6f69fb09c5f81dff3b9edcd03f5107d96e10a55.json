{"sha": "f6f69fb09c5f81dff3b9edcd03f5107d96e10a55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZmNjlmYjA5YzVmODFkZmYzYjllZGNkMDNmNTEwN2Q5NmUxMGE1NQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-10-01T14:53:10Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-10-01T14:53:10Z"}, "message": "re PR c/65345 (ICE with _Generic selection on _Atomic int)\n\n\tPR c/65345\n\t* config/i386/i386.c (ix86_atomic_assign_expand_fenv): Adjust to use\n\tcreate_tmp_var_raw rather than create_tmp_var.\n\n\t* gcc.dg/atomic/pr65345-4.c: New test.\n\t* gcc.dg/pr65345-3.c: New test.\n\nFrom-SVN: r228343", "tree": {"sha": "59c7cba8b785dcc4fc4abcaa81c756d059fd1765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59c7cba8b785dcc4fc4abcaa81c756d059fd1765"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6f69fb09c5f81dff3b9edcd03f5107d96e10a55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6f69fb09c5f81dff3b9edcd03f5107d96e10a55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6f69fb09c5f81dff3b9edcd03f5107d96e10a55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6f69fb09c5f81dff3b9edcd03f5107d96e10a55/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "209919e2fdac3f26f62ba7b77e28d0a9df2909c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/209919e2fdac3f26f62ba7b77e28d0a9df2909c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/209919e2fdac3f26f62ba7b77e28d0a9df2909c2"}], "stats": {"total": 121, "additions": 114, "deletions": 7}, "files": [{"sha": "eac6a74e0aae4d57b9146980c53ada1ad7ee4257", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f69fb09c5f81dff3b9edcd03f5107d96e10a55/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f69fb09c5f81dff3b9edcd03f5107d96e10a55/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6f69fb09c5f81dff3b9edcd03f5107d96e10a55", "patch": "@@ -1,3 +1,9 @@\n+2015-10-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/65345\n+\t* config/i386/i386.c (ix86_atomic_assign_expand_fenv): Adjust to use\n+\tcreate_tmp_var_raw rather than create_tmp_var.\n+\n 2015-10-01  Marek Polacek  <polacek@redhat.com>\n \n \tPR tree-optimization/67769"}, {"sha": "cfeba76e8f288c1127b315d6ca5d4286e7359e51", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f69fb09c5f81dff3b9edcd03f5107d96e10a55/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f69fb09c5f81dff3b9edcd03f5107d96e10a55/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f6f69fb09c5f81dff3b9edcd03f5107d96e10a55", "patch": "@@ -53128,13 +53128,13 @@ ix86_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n {\n   if (!TARGET_80387 && !TARGET_SSE_MATH)\n     return;\n-  tree exceptions_var = create_tmp_var (integer_type_node);\n+  tree exceptions_var = create_tmp_var_raw (integer_type_node);\n   if (TARGET_80387)\n     {\n       tree fenv_index_type = build_index_type (size_int (6));\n       tree fenv_type = build_array_type (unsigned_type_node, fenv_index_type);\n-      tree fenv_var = create_tmp_var (fenv_type);\n-      mark_addressable (fenv_var);\n+      tree fenv_var = create_tmp_var_raw (fenv_type);\n+      TREE_ADDRESSABLE (fenv_var) = 1;\n       tree fenv_ptr = build_pointer_type (fenv_type);\n       tree fenv_addr = build1 (ADDR_EXPR, fenv_ptr, fenv_var);\n       fenv_addr = fold_convert (ptr_type_node, fenv_addr);\n@@ -53144,10 +53144,12 @@ ix86_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n       tree fnclex = ix86_builtins[IX86_BUILTIN_FNCLEX];\n       tree hold_fnstenv = build_call_expr (fnstenv, 1, fenv_addr);\n       tree hold_fnclex = build_call_expr (fnclex, 0);\n-      *hold = build2 (COMPOUND_EXPR, void_type_node, hold_fnstenv,\n+      fenv_var = build4 (TARGET_EXPR, fenv_type, fenv_var, hold_fnstenv,\n+\t\t\t NULL_TREE, NULL_TREE);\n+      *hold = build2 (COMPOUND_EXPR, void_type_node, fenv_var,\n \t\t      hold_fnclex);\n       *clear = build_call_expr (fnclex, 0);\n-      tree sw_var = create_tmp_var (short_unsigned_type_node);\n+      tree sw_var = create_tmp_var_raw (short_unsigned_type_node);\n       tree fnstsw_call = build_call_expr (fnstsw, 0);\n       tree sw_mod = build2 (MODIFY_EXPR, short_unsigned_type_node,\n \t\t\t    sw_var, fnstsw_call);\n@@ -53161,8 +53163,8 @@ ix86_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n     }\n   if (TARGET_SSE_MATH)\n     {\n-      tree mxcsr_orig_var = create_tmp_var (unsigned_type_node);\n-      tree mxcsr_mod_var = create_tmp_var (unsigned_type_node);\n+      tree mxcsr_orig_var = create_tmp_var_raw (unsigned_type_node);\n+      tree mxcsr_mod_var = create_tmp_var_raw (unsigned_type_node);\n       tree stmxcsr = ix86_builtins[IX86_BUILTIN_STMXCSR];\n       tree ldmxcsr = ix86_builtins[IX86_BUILTIN_LDMXCSR];\n       tree stmxcsr_hold_call = build_call_expr (stmxcsr, 0);"}, {"sha": "e7e22461de5833e3654837bfa5fb6bb077418bce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f69fb09c5f81dff3b9edcd03f5107d96e10a55/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f69fb09c5f81dff3b9edcd03f5107d96e10a55/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f6f69fb09c5f81dff3b9edcd03f5107d96e10a55", "patch": "@@ -1,3 +1,9 @@\n+2015-10-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/65345\n+\t* gcc.dg/atomic/pr65345-4.c: New test.\n+\t* gcc.dg/pr65345-3.c: New test.\n+\n 2015-10-01  Marek Polacek  <polacek@redhat.com>\n \n \tPR tree-optimization/67769"}, {"sha": "6d44def7c2d4f73fbea14cf91213ffaa83c7456d", "filename": "gcc/testsuite/gcc.dg/atomic/pr65345-4.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f69fb09c5f81dff3b9edcd03f5107d96e10a55/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fpr65345-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f69fb09c5f81dff3b9edcd03f5107d96e10a55/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fpr65345-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fpr65345-4.c?ref=f6f69fb09c5f81dff3b9edcd03f5107d96e10a55", "patch": "@@ -0,0 +1,58 @@\n+/* PR c/65345 */\n+/* { dg-options \"\" } */\n+\n+#define CHECK(X) if (!(X)) __builtin_abort ()\n+\n+_Atomic float i = 5;\n+_Atomic float j = 2;\n+\n+void\n+fn1 (float a[(int) (i = 0)])\n+{\n+}\n+\n+void\n+fn2 (float a[(int) (i += 2)])\n+{\n+}\n+\n+void\n+fn3 (float a[(int) ++i])\n+{\n+}\n+\n+void\n+fn4 (float a[(int) ++i])\n+{\n+}\n+\n+void\n+fn5 (float a[(int) ++i][(int) (j = 10)])\n+{\n+}\n+\n+void\n+fn6 (float a[(int) (i = 7)][(int) j--])\n+{\n+}\n+\n+int\n+main ()\n+{\n+  float a[10];\n+  float aa[10][10];\n+  fn1 (a);\n+  CHECK (i == 0);\n+  fn2 (a);\n+  CHECK (i == 2);\n+  fn3 (a);\n+  CHECK (i == 3);\n+  fn4 (a);\n+  CHECK (i == 4);\n+  fn5 (aa);\n+  CHECK (i == 5);\n+  CHECK (j == 10);\n+  fn6 (aa);\n+  CHECK (i == 7);\n+  CHECK (j == 9);\n+}"}, {"sha": "cda9364628e4d545bba927cee347099ff570d9d7", "filename": "gcc/testsuite/gcc.dg/pr65345-3.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f69fb09c5f81dff3b9edcd03f5107d96e10a55/gcc%2Ftestsuite%2Fgcc.dg%2Fpr65345-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f69fb09c5f81dff3b9edcd03f5107d96e10a55/gcc%2Ftestsuite%2Fgcc.dg%2Fpr65345-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr65345-3.c?ref=f6f69fb09c5f81dff3b9edcd03f5107d96e10a55", "patch": "@@ -0,0 +1,35 @@\n+/* PR c/65345 */\n+/* { dg-options \"\" } */\n+\n+_Atomic float i = 3.0f;\n+\n+float a1 = sizeof (i + 1.2);\n+float a2 = sizeof (i = 0);\n+float a3 = sizeof (i++);\n+float a4 = sizeof (i--);\n+float a5 = sizeof (-i);\n+\n+float b1 = _Alignof (i + 1);\n+float b2 = _Alignof (i = 0);\n+float b3 = _Alignof (i++);\n+float b4 = _Alignof (i--);\n+float b5 = _Alignof (-i);\n+\n+float c1 = i; /* { dg-error \"initializer element is not constant\" } */\n+float c2 = (i ? 1 : 2); /* { dg-error \"initializer element is not constant\" } */\n+float c3[(int) i]; /* { dg-error \"variably modified\" } */\n+float c4 = 0 || i; /* { dg-error \"initializer element is not constant\" } */\n+float c5 = (i += 10); /* { dg-error \"initializer element is not constant\" } */\n+\n+_Static_assert (_Generic (i, float: 1, default: 0) == 1, \"1\");\n+_Static_assert (_Generic (i + 1, float: 1, default: 0) == 1, \"2\");\n+_Static_assert (_Generic (i = 0, float: 1, default: 0) == 1, \"3\");\n+_Static_assert (_Generic (i++, float: 1, default: 0) == 1, \"4\");\n+_Static_assert (_Generic (i--, float: 1, default: 0) == 1, \"5\");\n+\n+_Atomic int sz = 2;\n+void fn1 (float a[sz + 1]);\n+void fn2 (float a[sz = 0]);\n+void fn3 (float a[sz++]);\n+void fn4 (float a[sz--]);\n+void fn5 (float a[-sz]);"}]}