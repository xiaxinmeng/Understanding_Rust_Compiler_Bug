{"sha": "4a57a4b6292cca3927bfb84766f46694bd7b4f7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE1N2E0YjYyOTJjY2EzOTI3YmZiODQ3NjZmNDY2OTRiZDdiNGY3Zg==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2018-04-27T22:11:12Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-04-27T22:11:12Z"}, "message": "[openacc, testsuite] Fix undefined behaviour in atomic_capture-1.f90\n\n2018-04-28  Tom de Vries  <tom@codesourcery.com>\n\n\tPR testsuite/85527\n\t* testsuite/libgomp.oacc-fortran/atomic_capture-1.f90 (main): Store\n\tatomic capture results obtained in parallel loop to an array, instead of\n\tto a scalar.\n\nFrom-SVN: r259733", "tree": {"sha": "b158d4c22b43a55ddd3db7f586afbc9806030f55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b158d4c22b43a55ddd3db7f586afbc9806030f55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a57a4b6292cca3927bfb84766f46694bd7b4f7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a57a4b6292cca3927bfb84766f46694bd7b4f7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a57a4b6292cca3927bfb84766f46694bd7b4f7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a57a4b6292cca3927bfb84766f46694bd7b4f7f/comments", "author": null, "committer": null, "parents": [{"sha": "cf25444273b4bab2b60e5c3f811883bf2dab2b85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf25444273b4bab2b60e5c3f811883bf2dab2b85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf25444273b4bab2b60e5c3f811883bf2dab2b85"}], "stats": {"total": 251, "additions": 178, "deletions": 73}, "files": [{"sha": "0ba1bbef4929c85f261192dfc3e30d6e773fbd0e", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a57a4b6292cca3927bfb84766f46694bd7b4f7f/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a57a4b6292cca3927bfb84766f46694bd7b4f7f/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=4a57a4b6292cca3927bfb84766f46694bd7b4f7f", "patch": "@@ -1,3 +1,10 @@\n+2018-04-28  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR testsuite/85527\n+\t* testsuite/libgomp.oacc-fortran/atomic_capture-1.f90 (main): Store\n+\tatomic capture results obtained in parallel loop to an array, instead of\n+\tto a scalar.\n+\n 2018-04-26  Tom de Vries  <tom@codesourcery.com>\n \n \tPR libgomp/84020"}, {"sha": "5a4a1e03f64ab7c75f06064fd9861e09006e8c61", "filename": "libgomp/testsuite/libgomp.oacc-fortran/atomic_capture-1.f90", "status": "modified", "additions": 171, "deletions": 73, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a57a4b6292cca3927bfb84766f46694bd7b4f7f/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fatomic_capture-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a57a4b6292cca3927bfb84766f46694bd7b4f7f/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fatomic_capture-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fatomic_capture-1.f90?ref=4a57a4b6292cca3927bfb84766f46694bd7b4f7f", "patch": "@@ -1,10 +1,12 @@\n ! { dg-do run }\n \n program main\n+  integer, parameter :: N = 32\n   integer igot, iexp, itmp\n+  integer, dimension (0:N) :: iarr\n   real fgot, fexp, ftmp\n+  real, dimension (0:N) :: farr\n   logical lgot, lexp, ltmp\n-  integer, parameter :: N = 32\n \n   igot = 0\n   iexp = N * 2\n@@ -27,13 +29,17 @@ program main\n   !$acc parallel loop copy (fgot, ftmp)\n     do i = 1, N\n   !$acc atomic capture\n-      ftmp = fgot\n+      farr(i) = fgot\n       fgot = fgot + 1.0\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (ftmp /= fexp - 1.0) STOP 3\n+  do i = 1, N\n+     if (.not. &\n+          (1234.0 <= farr(i) .and. farr(i) < fexp &\n+          .and. aint (farr(i)) == farr(i))) STOP 3\n+  end do\n   if (fgot /= fexp) STOP 4\n \n   fgot = 1.0\n@@ -42,13 +48,17 @@ program main\n   !$acc parallel loop copy (fgot, ftmp)\n     do i = 1, N\n   !$acc atomic capture\n-      ftmp = fgot\n+      farr(i) = fgot\n       fgot = fgot * 2.0\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (ftmp /= fexp / 2.0) STOP 5\n+  do i = 1, N\n+     if (.not. &\n+          (1.0 <= farr(i) .and. farr(i) < fexp &\n+          .and. aint (farr(i)) == farr(i))) STOP 5\n+  end do\n   if (fgot /= fexp) STOP 6\n \n   fgot = 32.0\n@@ -57,13 +67,17 @@ program main\n   !$acc parallel loop copy (fgot, ftmp)\n     do i = 1, N\n   !$acc atomic capture\n-      ftmp = fgot\n+      farr(i) = fgot\n       fgot = fgot - 1.0\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (ftmp /= fexp + 1.0) STOP 7\n+  do i = 1, N\n+     if (.not. &\n+          (fexp < farr(i) .and. farr(i) <= 32.0 &\n+          .and. aint (farr(i)) == farr(i))) STOP 7\n+  end do\n   if (fgot /= fexp) STOP 8\n \n   fgot = 2**32.0\n@@ -72,13 +86,17 @@ program main\n   !$acc parallel loop copy (fgot, ftmp)\n     do i = 1, N\n   !$acc atomic capture\n-      ftmp = fgot\n+      farr(i) = fgot\n       fgot = fgot / 2.0\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (ftmp /= fgot * 2.0) STOP 9\n+  do i = 1, N\n+     if (.not. &\n+          (fexp < farr(i) .and. farr(i) <= 2**32.0 &\n+          .and. aint (farr(i)) == farr(i))) STOP 9\n+  end do\n   if (fgot /= fexp) STOP 10\n \n   lgot = .TRUE.\n@@ -139,13 +157,17 @@ program main\n   !$acc parallel loop copy (fgot, ftmp)\n     do i = 1, N\n   !$acc atomic capture\n-      ftmp = fgot\n+      farr(i) = fgot\n       fgot = 1.0 + fgot\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (ftmp /= fexp - 1.0) STOP 19 \n+  do i = 1, N\n+     if (.not. &\n+          (1234.0 <= farr(i) .and. farr(i) < fexp &\n+          .and. aint (farr(i)) == farr(i))) STOP 19\n+  end do\n   if (fgot /= fexp) STOP 20\n \n   fgot = 1.0\n@@ -154,13 +176,17 @@ program main\n   !$acc parallel loop copy (fgot, ftmp)\n     do i = 1, N\n   !$acc atomic capture\n-      ftmp = fgot\n+      farr(i) = fgot\n       fgot = 2.0 * fgot\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (ftmp /= fexp / 2.0) STOP 21\n+  do i = 1, N\n+     if (.not. &\n+          (1.0 <= farr(i) .and. farr(i) < fexp &\n+          .and. aint (farr(i)) == farr(i))) STOP 21\n+  end do\n   if (fgot /= fexp) STOP 22\n \n   fgot = 32.0\n@@ -169,13 +195,15 @@ program main\n   !$acc parallel loop copy (fgot, ftmp)\n     do i = 1, N\n   !$acc atomic capture\n-      ftmp = fgot\n+      farr(i) = fgot\n       fgot = 2.0 - fgot\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (ftmp /= 2.0 - fexp) STOP 23\n+  do i = 1, N\n+     if (.not. (farr(i) == fexp .or. farr(i) == -30.0)) STOP 23\n+  end do\n   if (fgot /= fexp) STOP 24\n \n   fgot = 2.0**16\n@@ -184,13 +212,15 @@ program main\n   !$acc parallel loop copy (fgot, ftmp)\n     do i = 1, N\n   !$acc atomic capture\n-      ftmp = fgot\n+      farr(i) = fgot\n       fgot = 2.0 / fgot\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (ftmp /= 2.0 / fexp) STOP 25\n+  do i = 1, N\n+     if (.not. (farr(i) == fexp .or. farr(i) == 1.0 / 2.0**15)) STOP 25\n+  end do\n   if (fgot /= fexp) STOP 26\n \n   lgot = .TRUE.\n@@ -251,13 +281,15 @@ program main\n   !$acc parallel loop copy (igot, itmp)\n     do i = 1, N\n   !$acc atomic capture\n-      itmp = igot\n+      iarr(i) = igot\n       igot = max (igot, i)\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (itmp /= iexp - 1) STOP 35\n+  do i = 1, N\n+     if (.not. (1 <= iarr(i) .and. iarr(i) < iexp)) STOP 35\n+  end do\n   if (igot /= iexp) STOP 36\n \n   igot = N\n@@ -266,13 +298,15 @@ program main\n   !$acc parallel loop copy (igot, itmp)\n     do i = 1, N\n   !$acc atomic capture\n-      itmp = igot\n+      iarr(i) = igot\n       igot = min (igot, i)\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (itmp /= iexp) STOP 37\n+  do i = 1, N\n+     if (.not. (iarr(i) == 1 .or. iarr(i) == N)) STOP 37\n+  end do\n   if (igot /= iexp) STOP 38\n \n   igot = -1\n@@ -282,13 +316,15 @@ program main\n     do i = 0, N - 1\n       iexpr = ibclr (-2, i)\n   !$acc atomic capture\n-      itmp = igot\n+      iarr(i) = igot\n       igot = iand (igot, iexpr)\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (itmp /= ibset (iexp, N - 1)) STOP 39\n+  do i = 1, N\n+     if (.not. (iarr(i - 1) < 0)) STOP 39\n+  end do\n   if (igot /= iexp) STOP 40\n \n   igot = 0\n@@ -298,13 +334,15 @@ program main\n     do i = 0, N - 1\n       iexpr = lshift (1, i)\n   !$acc atomic capture\n-      itmp = igot\n+      iarr(i) = igot\n       igot = ior (igot, iexpr)\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (itmp /= ieor (iexp, lshift (1, N - 1))) STOP 41\n+  do i = 1, N\n+     if (.not. (iarr(i - 1) >= 0)) STOP 41\n+  end do\n   if (igot /= iexp) STOP 42\n \n   igot = -1\n@@ -314,13 +352,15 @@ program main\n     do i = 0, N - 1\n       iexpr = lshift (1, i)\n   !$acc atomic capture\n-      itmp = igot\n+      iarr(i) = igot\n       igot = ieor (igot, iexpr)\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (itmp /= ior (iexp, lshift (1, N - 1))) STOP 43\n+  do i = 1, N\n+     if (.not. (iarr(i - 1) < 0)) STOP 43\n+  end do\n   if (igot /= iexp) STOP 44\n \n   igot = 1\n@@ -329,13 +369,15 @@ program main\n   !$acc parallel loop copy (igot, itmp)\n     do i = 1, N\n   !$acc atomic capture\n-      itmp = igot\n+      iarr(i) = igot\n       igot = max (i, igot)\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (itmp /= iexp - 1) STOP 45\n+  do i = 1, N\n+     if (.not. (1 <= iarr(i) .and. iarr(i) < iexp)) STOP 45\n+  end do\n   if (igot /= iexp) STOP 46\n \n   igot = N\n@@ -344,13 +386,15 @@ program main\n   !$acc parallel loop copy (igot, itmp)\n     do i = 1, N\n   !$acc atomic capture\n-      itmp = igot\n+      iarr(i) = igot\n       igot = min (i, igot)\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (itmp /= iexp) STOP 47\n+  do i = 1, N\n+     if (.not. (iarr(i) == 1 .or. iarr(i) == N)) STOP 47\n+  end do\n   if (igot /= iexp) STOP 48\n \n   igot = -1\n@@ -360,13 +404,15 @@ program main\n     do i = 0, N - 1\n       iexpr = ibclr (-2, i)\n   !$acc atomic capture\n-      itmp = igot\n+      iarr(i) = igot\n       igot = iand (iexpr, igot)\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (itmp /= ibset (iexp, N - 1)) STOP 49\n+  do i = 1, N\n+     if (.not. (iarr(i - 1) < 0)) STOP 49\n+  end do\n   if (igot /= iexp) STOP 50\n \n   igot = 0\n@@ -376,13 +422,15 @@ program main\n     do i = 0, N - 1\n       iexpr = lshift (1, i)\n   !$acc atomic capture\n-      itmp = igot\n+      iarr(i) = igot\n       igot = ior (iexpr, igot)\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (itmp /= ieor (iexp, lshift (1, N - 1))) STOP 51\n+  do i = 1, N\n+     if (.not. (iarr(i - 1) >= 0)) STOP 51\n+  end do\n   if (igot /= iexp) STOP 52\n \n   igot = -1\n@@ -392,13 +440,15 @@ program main\n     do i = 0, N - 1\n       iexpr = lshift (1, i)\n   !$acc atomic capture\n-      itmp = igot\n+      iarr(i) = igot\n       igot = ieor (iexpr, igot)\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (itmp /= ior (iexp, lshift (1, N - 1))) STOP 53\n+  do i = 1, N\n+     if (.not. (iarr(i - 1) < 0)) STOP 53\n+  end do\n   if (igot /= iexp) STOP 54\n \n   fgot = 1234.0\n@@ -408,12 +458,16 @@ program main\n     do i = 1, N\n   !$acc atomic capture\n       fgot = fgot + 1.0\n-      ftmp = fgot\n+      farr(i) = fgot\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (ftmp /= fexp) STOP 55\n+  do i = 1, N\n+     if (.not. &\n+          (1234.0 < farr(i) .and. farr(i) <= fexp &\n+          .and. aint (farr(i)) == farr(i))) STOP 55\n+  end do\n   if (fgot /= fexp) STOP 56\n \n   fgot = 1.0\n@@ -423,12 +477,16 @@ program main\n     do i = 1, N\n   !$acc atomic capture\n       fgot = fgot * 2.0\n-      ftmp = fgot\n+      farr(i) = fgot\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (ftmp /= fexp) STOP 57\n+  do i = 1, N\n+     if (.not. &\n+          (1.0 < farr(i) .and. farr(i) <= fexp &\n+          .and. aint (farr(i)) == farr(i))) STOP 57\n+  end do\n   if (fgot /= fexp) STOP 58\n \n   fgot = 32.0\n@@ -438,12 +496,16 @@ program main\n     do i = 1, N\n   !$acc atomic capture\n       fgot = fgot - 1.0\n-      ftmp = fgot\n+      farr(i) = fgot\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (ftmp /= fexp) STOP 59\n+  do i = 1, N\n+     if (.not. &\n+          (fexp <= farr(i) .and. farr(i) < 32.0 &\n+          .and. aint (farr(i)) == farr(i))) STOP 59\n+  end do\n   if (fgot /= fexp) STOP 60\n \n   fgot = 2**32.0\n@@ -453,12 +515,16 @@ program main\n     do i = 1, N\n   !$acc atomic capture\n       fgot = fgot / 2.0\n-      ftmp = fgot\n+      farr(i) = fgot\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (ftmp /= fexp) STOP 61\n+  do i = 1, N\n+     if (.not. &\n+          (fexp <= farr(i) .and. farr(i) < 2**32.0 &\n+          .and. aint (farr(i)) == farr(i))) STOP 61\n+  end do\n   if (fgot /= fexp) STOP 62\n \n   lgot = .TRUE.\n@@ -520,12 +586,16 @@ program main\n     do i = 1, N\n   !$acc atomic capture\n       fgot = 1.0 + fgot\n-      ftmp = fgot\n+      farr(i) = fgot\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (ftmp /= fexp) STOP 71\n+  do i = 1, N\n+     if (.not. &\n+          (1234.0 < farr(i) .and. farr(i) <= fexp &\n+          .and. aint (farr(i)) == farr(i))) STOP 71\n+  end do\n   if (fgot /= fexp) STOP 72\n \n   fgot = 1.0\n@@ -535,12 +605,16 @@ program main\n     do i = 1, N\n   !$acc atomic capture\n       fgot = 2.0 * fgot\n-      ftmp = fgot\n+      farr(i) = fgot\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (ftmp /= fexp) STOP 73\n+  do i = 1, N\n+     if (.not. &\n+          (1.0 < farr(i) .and. farr(i) <= 2**32.0 &\n+          .and. aint (farr(i)) == farr(i))) STOP 73\n+  end do\n   if (fgot /= fexp) STOP 74\n \n   fgot = 32.0\n@@ -550,12 +624,14 @@ program main\n     do i = 1, N\n   !$acc atomic capture\n       fgot = 2.0 - fgot\n-      ftmp = fgot\n+      farr(i) = fgot\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (ftmp /= fexp) STOP 75\n+  do i = 1, N\n+     if (.not. (farr(i) == fexp .or. farr(i) == 2.0 - fexp)) STOP 75\n+  end do\n   if (fgot /= fexp) STOP 76\n \n   fgot = 2.0**16\n@@ -565,12 +641,14 @@ program main\n     do i = 1, N\n   !$acc atomic capture\n       fgot = 2.0 / fgot\n-      ftmp = fgot\n+      farr(i) = fgot\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (ftmp /= fexp) STOP 77\n+  do i = 1, N\n+     if (.not. (farr(i) == fexp .or. farr(i) == 2.0 / fexp)) STOP 77\n+  end do\n   if (fgot /= fexp) STOP 78\n \n   lgot = .TRUE.\n@@ -632,12 +710,14 @@ program main\n     do i = 1, N\n   !$acc atomic capture\n       igot = max (igot, i)\n-      itmp = igot\n+      iarr(i) = igot\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (itmp /= iexp) STOP 87\n+  do i = 1, N\n+     if (.not. (1 <= iarr(i) .and. iarr(i) <= N)) STOP 87\n+  end do\n   if (igot /= iexp) STOP 88\n \n   igot = N\n@@ -647,12 +727,14 @@ program main\n     do i = 1, N\n   !$acc atomic capture\n       igot = min (igot, i)\n-      itmp = igot\n+      iarr(i) = igot\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (itmp /= iexp) STOP 89\n+  do i = 1, N\n+     if (.not. (iarr(i) == iexp)) STOP 89\n+  end do\n   if (igot /= iexp) STOP 90\n \n   igot = -1\n@@ -663,12 +745,14 @@ program main\n       iexpr = ibclr (-2, i)\n   !$acc atomic capture\n       igot = iand (igot, iexpr)\n-      itmp = igot\n+      iarr(i) = igot\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (itmp /= iexp) STOP 91\n+  do i = 1, N\n+     if (.not. (iarr(i - 1) <= 0)) STOP 91\n+  end do\n   if (igot /= iexp) STOP 92\n \n   igot = 0\n@@ -679,12 +763,14 @@ program main\n       iexpr = lshift (1, i)\n   !$acc atomic capture\n       igot = ior (igot, iexpr)\n-      itmp = igot\n+      iarr(i) = igot\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (itmp /= iexp) STOP 93\n+  do i = 1, N\n+     if (.not. (iarr(i - 1) >= -1)) STOP 93\n+  end do\n   if (igot /= iexp) STOP 94\n \n   igot = -1\n@@ -695,12 +781,14 @@ program main\n       iexpr = lshift (1, i)\n   !$acc atomic capture\n       igot = ieor (igot, iexpr)\n-      itmp = igot\n+      iarr(i) = igot\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (itmp /= iexp) STOP 95\n+  do i = 1, N\n+     if (.not. (iarr(i - 1) <= 0)) STOP 95\n+  end do\n   if (igot /= iexp) STOP 96\n \n   igot = 1\n@@ -710,12 +798,14 @@ program main\n     do i = 1, N\n   !$acc atomic capture\n       igot = max (i, igot)\n-      itmp = igot\n+      iarr(i) = igot\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (itmp /= iexp) STOP 97\n+  do i = 1, N\n+     if (.not. (1 <= iarr(i) .and. iarr(i) <= iexp)) STOP 97\n+  end do\n   if (igot /= iexp) STOP 98\n \n   igot = N\n@@ -725,12 +815,14 @@ program main\n     do i = 1, N\n   !$acc atomic capture\n       igot = min (i, igot)\n-      itmp = igot\n+      iarr(i) = igot\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (itmp /= iexp) STOP 99\n+  do i = 1, N\n+     if (.not. (iarr(i) == iexp )) STOP 99\n+  end do\n   if (igot /= iexp) STOP 100\n \n   igot = -1\n@@ -741,12 +833,14 @@ program main\n       iexpr = ibclr (-2, i)\n   !$acc atomic capture\n       igot = iand (iexpr, igot)\n-      itmp = igot\n+      iarr(i) = igot\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (itmp /= iexp) STOP 101\n+  do i = 1, N\n+     if (.not. (iarr(i - 1) <= 0)) STOP 101\n+  end do\n   if (igot /= iexp) STOP 102\n \n   igot = 0\n@@ -757,12 +851,14 @@ program main\n       iexpr = lshift (1, i)\n   !$acc atomic capture\n       igot = ior (iexpr, igot)\n-      itmp = igot\n+      iarr(i) = igot\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (itmp /= iexp) STOP 103\n+  do i = 1, N\n+     if (.not. (iarr(i - 1) >= iexp)) STOP 103\n+  end do\n   if (igot /= iexp) STOP 104\n \n   igot = -1\n@@ -773,12 +869,14 @@ program main\n       iexpr = lshift (1, i)\n   !$acc atomic capture\n       igot = ieor (iexpr, igot)\n-      itmp = igot\n+      iarr(i) = igot\n   !$acc end atomic\n     end do\n   !$acc end parallel loop\n \n-  if (itmp /= iexp) STOP 105\n+  do i = 1, N\n+     if (.not. (iarr(i - 1) <= iexp)) STOP 105\n+  end do\n   if (igot /= iexp) STOP 106\n \n end program"}]}