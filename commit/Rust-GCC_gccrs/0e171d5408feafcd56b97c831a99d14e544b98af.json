{"sha": "0e171d5408feafcd56b97c831a99d14e544b98af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUxNzFkNTQwOGZlYWZjZDU2Yjk3YzgzMWE5OWQxNGU1NDRiOThhZg==", "commit": {"author": {"name": "Julia Koval", "email": "julia.koval@intel.com", "date": "2017-01-17T17:03:00Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-01-17T17:03:00Z"}, "message": "re PR target/76731 ([AVX512] _mm512_i32gather_epi32 and other scatter/gather routines have incorrect signature)\n\n\tPR target/76731\n\t* config/i386/avx512fintrin.h\n\t(_mm512_i32gather_ps): Change __addr type to void const*.\n\t(_mm512_mask_i32gather_ps): Ditto.\n\t(_mm512_i32gather_pd): Ditto.\n\t(_mm512_mask_i32gather_pd): Ditto.\n\t(_mm512_i64gather_ps): Ditto.\n\t(_mm512_mask_i64gather_ps): Ditto.\n\t(_mm512_i64gather_pd): Ditto.\n\t(_mm512_mask_i64gather_pd): Ditto.\n\t(_mm512_i32gather_epi32): Ditto.\n\t(_mm512_mask_i32gather_epi32): Ditto.\n\t(_mm512_i32gather_epi64): Ditto.\n\t(_mm512_mask_i32gather_epi64): Ditto.\n\t(_mm512_i64gather_epi32): Ditto.\n\t(_mm512_mask_i64gather_epi32): Ditto.\n\t(_mm512_i64gather_epi64): Ditto.\n\t(_mm512_mask_i64gather_epi64): Ditto.\n\t(_mm512_i32scatter_ps): Change __addr type to void*.\n\t(_mm512_mask_i32scatter_ps): Ditto.\n\t(_mm512_i32scatter_pd): Ditto.\n\t(_mm512_mask_i32scatter_pd): Ditto.\n\t(_mm512_i64scatter_ps): Ditto.\n\t(_mm512_mask_i64scatter_ps): Ditto.\n\t(_mm512_i64scatter_pd): Ditto.\n\t(_mm512_mask_i64scatter_pd): Ditto.\n\t(_mm512_i32scatter_epi32): Ditto.\n\t(_mm512_mask_i32scatter_epi32): Ditto.\n\t(_mm512_i32scatter_epi64): Ditto.\n\t(_mm512_mask_i32scatter_epi64): Ditto.\n\t(_mm512_i64scatter_epi32): Ditto.\n\t(_mm512_mask_i64scatter_epi32): Ditto.\n\t(_mm512_i64scatter_epi64): Ditto.\n\t(_mm512_mask_i64scatter_epi64): Ditto.\n\t* config/i386/avx512pfintrin.h\n\t(_mm512_mask_prefetch_i32gather_pd): Change __addr type to void const*.\n\t(_mm512_mask_prefetch_i32gather_ps): Ditto.\n\t(_mm512_mask_prefetch_i64gather_pd): Ditto.\n\t(_mm512_mask_prefetch_i64gather_ps): Ditto.\n\t(_mm512_prefetch_i32scatter_pd): Change __addr type to void*.\n\t(_mm512_prefetch_i32scatter_ps): Ditto.\n\t(_mm512_mask_prefetch_i32scatter_pd): Ditto.\n\t(_mm512_mask_prefetch_i32scatter_ps): Ditto.\n\t(_mm512_prefetch_i64scatter_pd): Ditto.\n\t(_mm512_prefetch_i64scatter_ps): Ditto.\n\t(_mm512_mask_prefetch_i64scatter_pd): Ditto.\n\t(_mm512_mask_prefetch_i64scatter_ps): Ditto.\n\t* config/i386/avx512vlintrin.h\n\t(_mm256_mmask_i32gather_ps): Change __addr type to void const*.\n\t(_mm_mmask_i32gather_ps): Ditto.\n\t(_mm256_mmask_i32gather_pd): Ditto.\n\t(_mm_mmask_i32gather_pd): Ditto.\n\t(_mm256_mmask_i64gather_ps): Ditto.\n\t(_mm_mmask_i64gather_ps): Ditto.\n\t(_mm256_mmask_i64gather_pd): Ditto.\n\t(_mm_mmask_i64gather_pd): Ditto.\n\t(_mm256_mmask_i32gather_epi32): Ditto.\n\t(_mm_mmask_i32gather_epi32): Ditto.\n\t(_mm256_mmask_i32gather_epi64): Ditto.\n\t(_mm_mmask_i32gather_epi64): Ditto.\n\t(_mm256_mmask_i64gather_epi32): Ditto.\n\t(_mm_mmask_i64gather_epi32): Ditto.\n\t(_mm256_mmask_i64gather_epi64): Ditto.\n\t(_mm_mmask_i64gather_epi64): Ditto.\n\t(_mm256_i32scatter_ps): Change __addr type to void*.\n\t(_mm256_mask_i32scatter_ps): Ditto.\n\t(_mm_i32scatter_ps): Ditto.\n\t(_mm_mask_i32scatter_ps): Ditto.\n\t(_mm256_i32scatter_pd): Ditto.\n\t(_mm256_mask_i32scatter_pd): Ditto.\n\t(_mm_i32scatter_pd): Ditto.\n\t(_mm_mask_i32scatter_pd): Ditto.\n\t(_mm256_i64scatter_ps): Ditto.\n\t(_mm256_mask_i64scatter_ps): Ditto.\n\t(_mm_i64scatter_ps): Ditto.\n\t(_mm_mask_i64scatter_ps): Ditto.\n\t(_mm256_i64scatter_pd): Ditto.\n\t(_mm256_mask_i64scatter_pd): Ditto.\n\t(_mm_i64scatter_pd): Ditto.\n\t(_mm_mask_i64scatter_pd): Ditto.\n\t(_mm256_i32scatter_epi32): Ditto.\n\t(_mm256_mask_i32scatter_epi32): Ditto.\n\t(_mm_i32scatter_epi32): Ditto.\n\t(_mm_mask_i32scatter_epi32): Ditto.\n\t(_mm256_i32scatter_epi64): Ditto.\n\t(_mm256_mask_i32scatter_epi64): Ditto.\n\t(_mm_i32scatter_epi64): Ditto.\n\t(_mm_mask_i32scatter_epi64): Ditto.\n\t(_mm256_i64scatter_epi32): Ditto.\n\t(_mm256_mask_i64scatter_epi32): Ditto.\n\t(_mm_i64scatter_epi32): Ditto.\n\t(_mm_mask_i64scatter_epi32): Ditto.\n\t(_mm256_i64scatter_epi64): Ditto.\n\t(_mm256_mask_i64scatter_epi64): Ditto.\n\t(_mm_i64scatter_epi64): Ditto.\n\t(_mm_mask_i64scatter_epi64): Ditto.\n\t* config/i386/i386-builtin-types.def (V16SF_V16SF_PCFLOAT_V16SI_HI_INT)\n\t(V8DF_V8DF_PCDOUBLE_V8SI_QI_INT, V8SF_V8SF_PCFLOAT_V8DI_QI_INT)\n\t(V8DF_V8DF_PCDOUBLE_V8DI_QI_INT, V16SI_V16SI_PCINT_V16SI_HI_INT)\n\t(V8DI_V8DI_PCINT64_V8SI_QI_INT, V8SI_V8SI_PCINT_V8DI_QI_INT)\n\t(V8DI_V8DI_PCINT64_V8DI_QI_INT, V2DF_V2DF_PCDOUBLE_V4SI_QI_INT)\n\t(V4DF_V4DF_PCDOUBLE_V4SI_QI_INT, V2DF_V2DF_PCDOUBLE_V2DI_QI_INT)\n\t(V4DF_V4DF_PCDOUBLE_V4DI_QI_INT, V4SF_V4SF_PCFLOAT_V4SI_QI_INT)\n\t(V8SF_V8SF_PCFLOAT_V8SI_QI_INT, V4SF_V4SF_PCFLOAT_V2DI_QI_INT)\n\t(V4SF_V4SF_PCFLOAT_V4DI_QI_INT, V2DI_V2DI_PCINT64_V4SI_QI_INT)\n\t(V4DI_V4DI_PCINT64_V4SI_QI_INT, V2DI_V2DI_PCINT64_V2DI_QI_INT)\n\t(V4DI_V4DI_PCINT64_V4DI_QI_INT, V4SI_V4SI_PCINT_V4SI_QI_INT)\n\t(V8SI_V8SI_PCINT_V8SI_QI_INT, V4SI_V4SI_PCINT_V2DI_QI_INT)\n\t(V4SI_V4SI_PCINT_V4DI_QI_INT, VOID_PFLOAT_HI_V16SI_V16SF_INT)\n\t(VOID_PFLOAT_QI_V8SI_V8SF_INT, VOID_PFLOAT_QI_V4SI_V4SF_INT)\n\t(VOID_PDOUBLE_QI_V8SI_V8DF_INT, VOID_PDOUBLE_QI_V4SI_V4DF_INT)\n\t(VOID_PDOUBLE_QI_V4SI_V2DF_INT, VOID_PFLOAT_QI_V8DI_V8SF_INT)\n\t(VOID_PFLOAT_QI_V4DI_V4SF_INT, VOID_PFLOAT_QI_V2DI_V4SF_INT)\n\t(VOID_PDOUBLE_QI_V8DI_V8DF_INT, VOID_PDOUBLE_QI_V4DI_V4DF_INT)\n\t(VOID_PDOUBLE_QI_V2DI_V2DF_INT, VOID_PINT_HI_V16SI_V16SI_INT)\n\t(VOID_PINT_QI_V8SI_V8SI_INT, VOID_PINT_QI_V4SI_V4SI_INT)\n\t(VOID_PLONGLONG_QI_V8SI_V8DI_INT, VOID_PLONGLONG_QI_V4SI_V4DI_INT)\n\t(VOID_PLONGLONG_QI_V4SI_V2DI_INT, VOID_PINT_QI_V8DI_V8SI_INT)\n\t(VOID_PINT_QI_V4DI_V4SI_INT, VOID_PINT_QI_V2DI_V4SI_INT)\n\t(VOID_PLONGLONG_QI_V8DI_V8DI_INT, VOID_QI_V8SI_PCINT64_INT_INT)\n\t(VOID_PLONGLONG_QI_V4DI_V4DI_INT, VOID_PLONGLONG_QI_V2DI_V2DI_INT)\n\t(VOID_HI_V16SI_PCINT_INT_INT, VOID_QI_V8DI_PCINT64_INT_INT)\n\t(VOID_QI_V8DI_PCINT_INT_INT): Remove.\n\t(V16SF_V16SF_PCVOID_V16SI_HI_INT,  V8DF_V8DF_PCVOID_V8SI_QI_INT)\n\t(V8SF_V8SF_PCVOID_V8DI_QI_INT, V8DF_V8DF_PCVOID_V8DI_QI_INT)\n\t(V16SI_V16SI_PCVOID_V16SI_HI_INT, V8DI_V8DI_PCVOID_V8SI_QI_INT)\n\t(V8SI_V8SI_PCVOID_V8DI_QI_INT, V8DI_V8DI_PCVOID_V8DI_QI_INT)\n\t(VOID_PVOID_HI_V16SI_V16SF_INT, VOID_PVOID_QI_V8SI_V8DF_INT)\n\t(VOID_PVOID_QI_V8DI_V8SF_INT, VOID_PVOID_QI_V8DI_V8DF_INT)\n\t(VOID_PVOID_HI_V16SI_V16SI_INT, VOID_PVOID_QI_V8SI_V8DI_INT)\n\t(VOID_PVOID_QI_V8DI_V8SI_INT, VOID_PVOID_QI_V8DI_V8DI_INT)\n\t(V2DF_V2DF_PCVOID_V4SI_QI_INT, V4DF_V4DF_PCVOID_V4SI_QI_INT)\n\t(V2DF_V2DF_PCVOID_V2DI_QI_INT, V4DF_V4DF_PCVOID_V4DI_QI_INT\n\t(V4SF_V4SF_PCVOID_V4SI_QI_INT, V8SF_V8SF_PCVOID_V8SI_QI_INT)\n\t(V4SF_V4SF_PCVOID_V2DI_QI_INT, V4SF_V4SF_PCVOID_V4DI_QI_INT)\n\t(V2DI_V2DI_PCVOID_V4SI_QI_INT, V4DI_V4DI_PCVOID_V4SI_QI_INT)\n\t(V2DI_V2DI_PCVOID_V2DI_QI_INT, V4DI_V4DI_PCVOID_V4DI_QI_INT)\n\t(V4SI_V4SI_PCVOID_V4SI_QI_INT, V8SI_V8SI_PCVOID_V8SI_QI_INT)\n\t(V4SI_V4SI_PCVOID_V2DI_QI_INT, V4SI_V4SI_PCVOID_V4DI_QI_INT)\n\t(VOID_PVOID_QI_V8SI_V8SF_INT, VOID_PVOID_QI_V4SI_V4SF_INT)\n\t(VOID_PVOID_QI_V4SI_V4DF_INT, VOID_PVOID_QI_V4SI_V2DF_INT)\n\t(VOID_PVOID_QI_V4DI_V4SF_INT, VOID_PVOID_QI_V2DI_V4SF_INT)\n\t(VOID_PVOID_QI_V4DI_V4DF_INT, VOID_PVOID_QI_V2DI_V2DF_INT)\n\t(VOID_PVOID_QI_V8SI_V8SI_INT, VOID_PVOID_QI_V4SI_V4SI_INT)\n\t(VOID_PVOID_QI_V4SI_V4DI_INT, VOID_PVOID_QI_V4SI_V2DI_INT)\n\t(VOID_PVOID_QI_V4DI_V4SI_INT, VOID_PVOID_QI_V2DI_V4SI_INT)\n\t(VOID_PVOID_QI_V4DI_V4DI_INT, VOID_PVOID_QI_V2DI_V2DI_INT)\n\t(VOID_QI_V8SI_PCVOID_INT_INT, VOID_HI_V16SI_PCVOID_INT_INT)\n\t(VOID_QI_V8DI_PCVOID_INT_INT): Add.\n\t* config/i386/i386.c (ix86_init_mmx_sse_builtins): Adjust builtin\n\tdefinitions accordingly.\n\nFrom-SVN: r244540", "tree": {"sha": "2f32380410e07c3417b4050609d152128530fc05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f32380410e07c3417b4050609d152128530fc05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e171d5408feafcd56b97c831a99d14e544b98af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e171d5408feafcd56b97c831a99d14e544b98af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e171d5408feafcd56b97c831a99d14e544b98af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e171d5408feafcd56b97c831a99d14e544b98af/comments", "author": {"login": "vaalfreja", "id": 5216345, "node_id": "MDQ6VXNlcjUyMTYzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5216345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaalfreja", "html_url": "https://github.com/vaalfreja", "followers_url": "https://api.github.com/users/vaalfreja/followers", "following_url": "https://api.github.com/users/vaalfreja/following{/other_user}", "gists_url": "https://api.github.com/users/vaalfreja/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaalfreja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaalfreja/subscriptions", "organizations_url": "https://api.github.com/users/vaalfreja/orgs", "repos_url": "https://api.github.com/users/vaalfreja/repos", "events_url": "https://api.github.com/users/vaalfreja/events{/privacy}", "received_events_url": "https://api.github.com/users/vaalfreja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4ed543bcd40a76ac940bc1759ae53cd3625d9718", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ed543bcd40a76ac940bc1759ae53cd3625d9718", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ed543bcd40a76ac940bc1759ae53cd3625d9718"}], "stats": {"total": 770, "additions": 462, "deletions": 308}, "files": [{"sha": "f311ece8a8acb591ef1307705cd704cfda307b1a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e171d5408feafcd56b97c831a99d14e544b98af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e171d5408feafcd56b97c831a99d14e544b98af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e171d5408feafcd56b97c831a99d14e544b98af", "patch": "@@ -1,3 +1,157 @@\n+2017-01-17  Julia Koval  <julia.koval@intel.com>\n+\n+\tPR target/76731\n+\t* config/i386/avx512fintrin.h\n+\t(_mm512_i32gather_ps): Change __addr type to void const*.\n+\t(_mm512_mask_i32gather_ps): Ditto.\n+\t(_mm512_i32gather_pd): Ditto.\n+\t(_mm512_mask_i32gather_pd): Ditto.\n+\t(_mm512_i64gather_ps): Ditto.\n+\t(_mm512_mask_i64gather_ps): Ditto.\n+\t(_mm512_i64gather_pd): Ditto.\n+\t(_mm512_mask_i64gather_pd): Ditto.\n+\t(_mm512_i32gather_epi32): Ditto.\n+\t(_mm512_mask_i32gather_epi32): Ditto.\n+\t(_mm512_i32gather_epi64): Ditto.\n+\t(_mm512_mask_i32gather_epi64): Ditto.\n+\t(_mm512_i64gather_epi32): Ditto.\n+\t(_mm512_mask_i64gather_epi32): Ditto.\n+\t(_mm512_i64gather_epi64): Ditto.\n+\t(_mm512_mask_i64gather_epi64): Ditto.\n+\t(_mm512_i32scatter_ps): Change __addr type to void*.\n+\t(_mm512_mask_i32scatter_ps): Ditto.\n+\t(_mm512_i32scatter_pd): Ditto.\n+\t(_mm512_mask_i32scatter_pd): Ditto.\n+\t(_mm512_i64scatter_ps): Ditto.\n+\t(_mm512_mask_i64scatter_ps): Ditto.\n+\t(_mm512_i64scatter_pd): Ditto.\n+\t(_mm512_mask_i64scatter_pd): Ditto.\n+\t(_mm512_i32scatter_epi32): Ditto.\n+\t(_mm512_mask_i32scatter_epi32): Ditto.\n+\t(_mm512_i32scatter_epi64): Ditto.\n+\t(_mm512_mask_i32scatter_epi64): Ditto.\n+\t(_mm512_i64scatter_epi32): Ditto.\n+\t(_mm512_mask_i64scatter_epi32): Ditto.\n+\t(_mm512_i64scatter_epi64): Ditto.\n+\t(_mm512_mask_i64scatter_epi64): Ditto.\n+\t* config/i386/avx512pfintrin.h\n+\t(_mm512_mask_prefetch_i32gather_pd): Change __addr type to void const*.\n+\t(_mm512_mask_prefetch_i32gather_ps): Ditto.\n+\t(_mm512_mask_prefetch_i64gather_pd): Ditto.\n+\t(_mm512_mask_prefetch_i64gather_ps): Ditto.\n+\t(_mm512_prefetch_i32scatter_pd): Change __addr type to void*.\n+\t(_mm512_prefetch_i32scatter_ps): Ditto.\n+\t(_mm512_mask_prefetch_i32scatter_pd): Ditto.\n+\t(_mm512_mask_prefetch_i32scatter_ps): Ditto.\n+\t(_mm512_prefetch_i64scatter_pd): Ditto.\n+\t(_mm512_prefetch_i64scatter_ps): Ditto.\n+\t(_mm512_mask_prefetch_i64scatter_pd): Ditto.\n+\t(_mm512_mask_prefetch_i64scatter_ps): Ditto.\n+\t* config/i386/avx512vlintrin.h\n+\t(_mm256_mmask_i32gather_ps): Change __addr type to void const*.\n+\t(_mm_mmask_i32gather_ps): Ditto.\n+\t(_mm256_mmask_i32gather_pd): Ditto.\n+\t(_mm_mmask_i32gather_pd): Ditto.\n+\t(_mm256_mmask_i64gather_ps): Ditto.\n+\t(_mm_mmask_i64gather_ps): Ditto.\n+\t(_mm256_mmask_i64gather_pd): Ditto.\n+\t(_mm_mmask_i64gather_pd): Ditto.\n+\t(_mm256_mmask_i32gather_epi32): Ditto.\n+\t(_mm_mmask_i32gather_epi32): Ditto.\n+\t(_mm256_mmask_i32gather_epi64): Ditto.\n+\t(_mm_mmask_i32gather_epi64): Ditto.\n+\t(_mm256_mmask_i64gather_epi32): Ditto.\n+\t(_mm_mmask_i64gather_epi32): Ditto.\n+\t(_mm256_mmask_i64gather_epi64): Ditto.\n+\t(_mm_mmask_i64gather_epi64): Ditto.\n+\t(_mm256_i32scatter_ps): Change __addr type to void*.\n+\t(_mm256_mask_i32scatter_ps): Ditto.\n+\t(_mm_i32scatter_ps): Ditto.\n+\t(_mm_mask_i32scatter_ps): Ditto.\n+\t(_mm256_i32scatter_pd): Ditto.\n+\t(_mm256_mask_i32scatter_pd): Ditto.\n+\t(_mm_i32scatter_pd): Ditto.\n+\t(_mm_mask_i32scatter_pd): Ditto.\n+\t(_mm256_i64scatter_ps): Ditto.\n+\t(_mm256_mask_i64scatter_ps): Ditto.\n+\t(_mm_i64scatter_ps): Ditto.\n+\t(_mm_mask_i64scatter_ps): Ditto.\n+\t(_mm256_i64scatter_pd): Ditto.\n+\t(_mm256_mask_i64scatter_pd): Ditto.\n+\t(_mm_i64scatter_pd): Ditto.\n+\t(_mm_mask_i64scatter_pd): Ditto.\n+\t(_mm256_i32scatter_epi32): Ditto.\n+\t(_mm256_mask_i32scatter_epi32): Ditto.\n+\t(_mm_i32scatter_epi32): Ditto.\n+\t(_mm_mask_i32scatter_epi32): Ditto.\n+\t(_mm256_i32scatter_epi64): Ditto.\n+\t(_mm256_mask_i32scatter_epi64): Ditto.\n+\t(_mm_i32scatter_epi64): Ditto.\n+\t(_mm_mask_i32scatter_epi64): Ditto.\n+\t(_mm256_i64scatter_epi32): Ditto.\n+\t(_mm256_mask_i64scatter_epi32): Ditto.\n+\t(_mm_i64scatter_epi32): Ditto.\n+\t(_mm_mask_i64scatter_epi32): Ditto.\n+\t(_mm256_i64scatter_epi64): Ditto.\n+\t(_mm256_mask_i64scatter_epi64): Ditto.\n+\t(_mm_i64scatter_epi64): Ditto.\n+\t(_mm_mask_i64scatter_epi64): Ditto.\n+\t* config/i386/i386-builtin-types.def (V16SF_V16SF_PCFLOAT_V16SI_HI_INT)\n+\t(V8DF_V8DF_PCDOUBLE_V8SI_QI_INT, V8SF_V8SF_PCFLOAT_V8DI_QI_INT)\n+\t(V8DF_V8DF_PCDOUBLE_V8DI_QI_INT, V16SI_V16SI_PCINT_V16SI_HI_INT)\n+\t(V8DI_V8DI_PCINT64_V8SI_QI_INT, V8SI_V8SI_PCINT_V8DI_QI_INT)\n+\t(V8DI_V8DI_PCINT64_V8DI_QI_INT, V2DF_V2DF_PCDOUBLE_V4SI_QI_INT)\n+\t(V4DF_V4DF_PCDOUBLE_V4SI_QI_INT, V2DF_V2DF_PCDOUBLE_V2DI_QI_INT)\n+\t(V4DF_V4DF_PCDOUBLE_V4DI_QI_INT, V4SF_V4SF_PCFLOAT_V4SI_QI_INT)\n+\t(V8SF_V8SF_PCFLOAT_V8SI_QI_INT, V4SF_V4SF_PCFLOAT_V2DI_QI_INT)\n+\t(V4SF_V4SF_PCFLOAT_V4DI_QI_INT, V2DI_V2DI_PCINT64_V4SI_QI_INT)\n+\t(V4DI_V4DI_PCINT64_V4SI_QI_INT, V2DI_V2DI_PCINT64_V2DI_QI_INT)\n+\t(V4DI_V4DI_PCINT64_V4DI_QI_INT, V4SI_V4SI_PCINT_V4SI_QI_INT)\n+\t(V8SI_V8SI_PCINT_V8SI_QI_INT, V4SI_V4SI_PCINT_V2DI_QI_INT)\n+\t(V4SI_V4SI_PCINT_V4DI_QI_INT, VOID_PFLOAT_HI_V16SI_V16SF_INT)\n+\t(VOID_PFLOAT_QI_V8SI_V8SF_INT, VOID_PFLOAT_QI_V4SI_V4SF_INT)\n+\t(VOID_PDOUBLE_QI_V8SI_V8DF_INT, VOID_PDOUBLE_QI_V4SI_V4DF_INT)\n+\t(VOID_PDOUBLE_QI_V4SI_V2DF_INT, VOID_PFLOAT_QI_V8DI_V8SF_INT)\n+\t(VOID_PFLOAT_QI_V4DI_V4SF_INT, VOID_PFLOAT_QI_V2DI_V4SF_INT)\n+\t(VOID_PDOUBLE_QI_V8DI_V8DF_INT, VOID_PDOUBLE_QI_V4DI_V4DF_INT)\n+\t(VOID_PDOUBLE_QI_V2DI_V2DF_INT, VOID_PINT_HI_V16SI_V16SI_INT)\n+\t(VOID_PINT_QI_V8SI_V8SI_INT, VOID_PINT_QI_V4SI_V4SI_INT)\n+\t(VOID_PLONGLONG_QI_V8SI_V8DI_INT, VOID_PLONGLONG_QI_V4SI_V4DI_INT)\n+\t(VOID_PLONGLONG_QI_V4SI_V2DI_INT, VOID_PINT_QI_V8DI_V8SI_INT)\n+\t(VOID_PINT_QI_V4DI_V4SI_INT, VOID_PINT_QI_V2DI_V4SI_INT)\n+\t(VOID_PLONGLONG_QI_V8DI_V8DI_INT, VOID_QI_V8SI_PCINT64_INT_INT)\n+\t(VOID_PLONGLONG_QI_V4DI_V4DI_INT, VOID_PLONGLONG_QI_V2DI_V2DI_INT)\n+\t(VOID_HI_V16SI_PCINT_INT_INT, VOID_QI_V8DI_PCINT64_INT_INT)\n+\t(VOID_QI_V8DI_PCINT_INT_INT): Remove.\n+\t(V16SF_V16SF_PCVOID_V16SI_HI_INT,  V8DF_V8DF_PCVOID_V8SI_QI_INT)\n+\t(V8SF_V8SF_PCVOID_V8DI_QI_INT, V8DF_V8DF_PCVOID_V8DI_QI_INT)\n+\t(V16SI_V16SI_PCVOID_V16SI_HI_INT, V8DI_V8DI_PCVOID_V8SI_QI_INT)\n+\t(V8SI_V8SI_PCVOID_V8DI_QI_INT, V8DI_V8DI_PCVOID_V8DI_QI_INT)\n+\t(VOID_PVOID_HI_V16SI_V16SF_INT, VOID_PVOID_QI_V8SI_V8DF_INT)\n+\t(VOID_PVOID_QI_V8DI_V8SF_INT, VOID_PVOID_QI_V8DI_V8DF_INT)\n+\t(VOID_PVOID_HI_V16SI_V16SI_INT, VOID_PVOID_QI_V8SI_V8DI_INT)\n+\t(VOID_PVOID_QI_V8DI_V8SI_INT, VOID_PVOID_QI_V8DI_V8DI_INT)\n+\t(V2DF_V2DF_PCVOID_V4SI_QI_INT, V4DF_V4DF_PCVOID_V4SI_QI_INT)\n+\t(V2DF_V2DF_PCVOID_V2DI_QI_INT, V4DF_V4DF_PCVOID_V4DI_QI_INT\n+\t(V4SF_V4SF_PCVOID_V4SI_QI_INT, V8SF_V8SF_PCVOID_V8SI_QI_INT)\n+\t(V4SF_V4SF_PCVOID_V2DI_QI_INT, V4SF_V4SF_PCVOID_V4DI_QI_INT)\n+\t(V2DI_V2DI_PCVOID_V4SI_QI_INT, V4DI_V4DI_PCVOID_V4SI_QI_INT)\n+\t(V2DI_V2DI_PCVOID_V2DI_QI_INT, V4DI_V4DI_PCVOID_V4DI_QI_INT)\n+\t(V4SI_V4SI_PCVOID_V4SI_QI_INT, V8SI_V8SI_PCVOID_V8SI_QI_INT)\n+\t(V4SI_V4SI_PCVOID_V2DI_QI_INT, V4SI_V4SI_PCVOID_V4DI_QI_INT)\n+\t(VOID_PVOID_QI_V8SI_V8SF_INT, VOID_PVOID_QI_V4SI_V4SF_INT)\n+\t(VOID_PVOID_QI_V4SI_V4DF_INT, VOID_PVOID_QI_V4SI_V2DF_INT)\n+\t(VOID_PVOID_QI_V4DI_V4SF_INT, VOID_PVOID_QI_V2DI_V4SF_INT)\n+\t(VOID_PVOID_QI_V4DI_V4DF_INT, VOID_PVOID_QI_V2DI_V2DF_INT)\n+\t(VOID_PVOID_QI_V8SI_V8SI_INT, VOID_PVOID_QI_V4SI_V4SI_INT)\n+\t(VOID_PVOID_QI_V4SI_V4DI_INT, VOID_PVOID_QI_V4SI_V2DI_INT)\n+\t(VOID_PVOID_QI_V4DI_V4SI_INT, VOID_PVOID_QI_V2DI_V4SI_INT)\n+\t(VOID_PVOID_QI_V4DI_V4DI_INT, VOID_PVOID_QI_V2DI_V2DI_INT)\n+\t(VOID_QI_V8SI_PCVOID_INT_INT, VOID_HI_V16SI_PCVOID_INT_INT)\n+\t(VOID_QI_V8DI_PCVOID_INT_INT): Add.\n+\t* config/i386/i386.c (ix86_init_mmx_sse_builtins): Adjust builtin\n+\tdefinitions accordingly.\n+\n 2017-01-17  Kito Cheng  <kito.cheng@gmail.com>\n             Kuan-Lin Chen  <kuanlinchentw@gmail.com>\n "}, {"sha": "af6880ed478c2fb03849a6dc59e582bca572cd9d", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 64, "deletions": 64, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e171d5408feafcd56b97c831a99d14e544b98af/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e171d5408feafcd56b97c831a99d14e544b98af/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=0e171d5408feafcd56b97c831a99d14e544b98af", "patch": "@@ -9204,7 +9204,7 @@ _mm_mask_cmp_round_ss_mask (__mmask8 __M, __m128 __X, __m128 __Y,\n #ifdef __OPTIMIZE__\n extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_i32gather_ps (__m512i __index, float const *__addr, int __scale)\n+_mm512_i32gather_ps (__m512i __index, void const *__addr, int __scale)\n {\n   __m512 __v1_old = _mm512_undefined_ps ();\n   __mmask16 __mask = 0xFFFF;\n@@ -9218,7 +9218,7 @@ _mm512_i32gather_ps (__m512i __index, float const *__addr, int __scale)\n extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_i32gather_ps (__m512 __v1_old, __mmask16 __mask,\n-\t\t\t  __m512i __index, float const *__addr, int __scale)\n+\t\t\t  __m512i __index, void const *__addr, int __scale)\n {\n   return (__m512) __builtin_ia32_gathersiv16sf ((__v16sf) __v1_old,\n \t\t\t\t\t\t__addr,\n@@ -9228,7 +9228,7 @@ _mm512_mask_i32gather_ps (__m512 __v1_old, __mmask16 __mask,\n \n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_i32gather_pd (__m256i __index, double const *__addr, int __scale)\n+_mm512_i32gather_pd (__m256i __index, void const *__addr, int __scale)\n {\n   __m512d __v1_old = _mm512_undefined_pd ();\n   __mmask8 __mask = 0xFF;\n@@ -9242,7 +9242,7 @@ _mm512_i32gather_pd (__m256i __index, double const *__addr, int __scale)\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_i32gather_pd (__m512d __v1_old, __mmask8 __mask,\n-\t\t\t  __m256i __index, double const *__addr, int __scale)\n+\t\t\t  __m256i __index, void const *__addr, int __scale)\n {\n   return (__m512d) __builtin_ia32_gathersiv8df ((__v8df) __v1_old,\n \t\t\t\t\t\t__addr,\n@@ -9252,7 +9252,7 @@ _mm512_mask_i32gather_pd (__m512d __v1_old, __mmask8 __mask,\n \n extern __inline __m256\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_i64gather_ps (__m512i __index, float const *__addr, int __scale)\n+_mm512_i64gather_ps (__m512i __index, void const *__addr, int __scale)\n {\n   __m256 __v1_old = _mm256_undefined_ps ();\n   __mmask8 __mask = 0xFF;\n@@ -9266,7 +9266,7 @@ _mm512_i64gather_ps (__m512i __index, float const *__addr, int __scale)\n extern __inline __m256\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_i64gather_ps (__m256 __v1_old, __mmask8 __mask,\n-\t\t\t  __m512i __index, float const *__addr, int __scale)\n+\t\t\t  __m512i __index, void const *__addr, int __scale)\n {\n   return (__m256) __builtin_ia32_gatherdiv16sf ((__v8sf) __v1_old,\n \t\t\t\t\t\t__addr,\n@@ -9276,7 +9276,7 @@ _mm512_mask_i64gather_ps (__m256 __v1_old, __mmask8 __mask,\n \n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_i64gather_pd (__m512i __index, double const *__addr, int __scale)\n+_mm512_i64gather_pd (__m512i __index, void const *__addr, int __scale)\n {\n   __m512d __v1_old = _mm512_undefined_pd ();\n   __mmask8 __mask = 0xFF;\n@@ -9290,7 +9290,7 @@ _mm512_i64gather_pd (__m512i __index, double const *__addr, int __scale)\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_i64gather_pd (__m512d __v1_old, __mmask8 __mask,\n-\t\t\t  __m512i __index, double const *__addr, int __scale)\n+\t\t\t  __m512i __index, void const *__addr, int __scale)\n {\n   return (__m512d) __builtin_ia32_gatherdiv8df ((__v8df) __v1_old,\n \t\t\t\t\t\t__addr,\n@@ -9300,7 +9300,7 @@ _mm512_mask_i64gather_pd (__m512d __v1_old, __mmask8 __mask,\n \n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_i32gather_epi32 (__m512i __index, int const *__addr, int __scale)\n+_mm512_i32gather_epi32 (__m512i __index, void const *__addr, int __scale)\n {\n   __m512i __v1_old = _mm512_undefined_epi32 ();\n   __mmask16 __mask = 0xFFFF;\n@@ -9314,7 +9314,7 @@ _mm512_i32gather_epi32 (__m512i __index, int const *__addr, int __scale)\n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_i32gather_epi32 (__m512i __v1_old, __mmask16 __mask,\n-\t\t\t     __m512i __index, int const *__addr, int __scale)\n+\t\t\t     __m512i __index, void const *__addr, int __scale)\n {\n   return (__m512i) __builtin_ia32_gathersiv16si ((__v16si) __v1_old,\n \t\t\t\t\t\t __addr,\n@@ -9324,7 +9324,7 @@ _mm512_mask_i32gather_epi32 (__m512i __v1_old, __mmask16 __mask,\n \n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_i32gather_epi64 (__m256i __index, long long const *__addr, int __scale)\n+_mm512_i32gather_epi64 (__m256i __index, void const *__addr, int __scale)\n {\n   __m512i __v1_old = _mm512_undefined_epi32 ();\n   __mmask8 __mask = 0xFF;\n@@ -9338,7 +9338,7 @@ _mm512_i32gather_epi64 (__m256i __index, long long const *__addr, int __scale)\n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_i32gather_epi64 (__m512i __v1_old, __mmask8 __mask,\n-\t\t\t     __m256i __index, long long const *__addr,\n+\t\t\t     __m256i __index, void const *__addr,\n \t\t\t     int __scale)\n {\n   return (__m512i) __builtin_ia32_gathersiv8di ((__v8di) __v1_old,\n@@ -9349,7 +9349,7 @@ _mm512_mask_i32gather_epi64 (__m512i __v1_old, __mmask8 __mask,\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_i64gather_epi32 (__m512i __index, int const *__addr, int __scale)\n+_mm512_i64gather_epi32 (__m512i __index, void const *__addr, int __scale)\n {\n   __m256i __v1_old = _mm256_undefined_si256 ();\n   __mmask8 __mask = 0xFF;\n@@ -9363,7 +9363,7 @@ _mm512_i64gather_epi32 (__m512i __index, int const *__addr, int __scale)\n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_i64gather_epi32 (__m256i __v1_old, __mmask8 __mask,\n-\t\t\t     __m512i __index, int const *__addr, int __scale)\n+\t\t\t     __m512i __index, void const *__addr, int __scale)\n {\n   return (__m256i) __builtin_ia32_gatherdiv16si ((__v8si) __v1_old,\n \t\t\t\t\t\t __addr,\n@@ -9373,7 +9373,7 @@ _mm512_mask_i64gather_epi32 (__m256i __v1_old, __mmask8 __mask,\n \n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_i64gather_epi64 (__m512i __index, long long const *__addr, int __scale)\n+_mm512_i64gather_epi64 (__m512i __index, void const *__addr, int __scale)\n {\n   __m512i __v1_old = _mm512_undefined_epi32 ();\n   __mmask8 __mask = 0xFF;\n@@ -9387,7 +9387,7 @@ _mm512_i64gather_epi64 (__m512i __index, long long const *__addr, int __scale)\n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_i64gather_epi64 (__m512i __v1_old, __mmask8 __mask,\n-\t\t\t     __m512i __index, long long const *__addr,\n+\t\t\t     __m512i __index, void const *__addr,\n \t\t\t     int __scale)\n {\n   return (__m512i) __builtin_ia32_gatherdiv8di ((__v8di) __v1_old,\n@@ -9398,15 +9398,15 @@ _mm512_mask_i64gather_epi64 (__m512i __v1_old, __mmask8 __mask,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_i32scatter_ps (float *__addr, __m512i __index, __m512 __v1, int __scale)\n+_mm512_i32scatter_ps (void *__addr, __m512i __index, __m512 __v1, int __scale)\n {\n   __builtin_ia32_scattersiv16sf (__addr, (__mmask16) 0xFFFF,\n \t\t\t\t (__v16si) __index, (__v16sf) __v1, __scale);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_i32scatter_ps (float *__addr, __mmask16 __mask,\n+_mm512_mask_i32scatter_ps (void *__addr, __mmask16 __mask,\n \t\t\t   __m512i __index, __m512 __v1, int __scale)\n {\n   __builtin_ia32_scattersiv16sf (__addr, __mask, (__v16si) __index,\n@@ -9415,7 +9415,7 @@ _mm512_mask_i32scatter_ps (float *__addr, __mmask16 __mask,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_i32scatter_pd (double *__addr, __m256i __index, __m512d __v1,\n+_mm512_i32scatter_pd (void *__addr, __m256i __index, __m512d __v1,\n \t\t      int __scale)\n {\n   __builtin_ia32_scattersiv8df (__addr, (__mmask8) 0xFF,\n@@ -9424,7 +9424,7 @@ _mm512_i32scatter_pd (double *__addr, __m256i __index, __m512d __v1,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_i32scatter_pd (double *__addr, __mmask8 __mask,\n+_mm512_mask_i32scatter_pd (void *__addr, __mmask8 __mask,\n \t\t\t   __m256i __index, __m512d __v1, int __scale)\n {\n   __builtin_ia32_scattersiv8df (__addr, __mask, (__v8si) __index,\n@@ -9433,15 +9433,15 @@ _mm512_mask_i32scatter_pd (double *__addr, __mmask8 __mask,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_i64scatter_ps (float *__addr, __m512i __index, __m256 __v1, int __scale)\n+_mm512_i64scatter_ps (void *__addr, __m512i __index, __m256 __v1, int __scale)\n {\n   __builtin_ia32_scatterdiv16sf (__addr, (__mmask8) 0xFF,\n \t\t\t\t (__v8di) __index, (__v8sf) __v1, __scale);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_i64scatter_ps (float *__addr, __mmask8 __mask,\n+_mm512_mask_i64scatter_ps (void *__addr, __mmask8 __mask,\n \t\t\t   __m512i __index, __m256 __v1, int __scale)\n {\n   __builtin_ia32_scatterdiv16sf (__addr, __mask, (__v8di) __index,\n@@ -9450,7 +9450,7 @@ _mm512_mask_i64scatter_ps (float *__addr, __mmask8 __mask,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_i64scatter_pd (double *__addr, __m512i __index, __m512d __v1,\n+_mm512_i64scatter_pd (void *__addr, __m512i __index, __m512d __v1,\n \t\t      int __scale)\n {\n   __builtin_ia32_scatterdiv8df (__addr, (__mmask8) 0xFF,\n@@ -9459,7 +9459,7 @@ _mm512_i64scatter_pd (double *__addr, __m512i __index, __m512d __v1,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_i64scatter_pd (double *__addr, __mmask8 __mask,\n+_mm512_mask_i64scatter_pd (void *__addr, __mmask8 __mask,\n \t\t\t   __m512i __index, __m512d __v1, int __scale)\n {\n   __builtin_ia32_scatterdiv8df (__addr, __mask, (__v8di) __index,\n@@ -9468,7 +9468,7 @@ _mm512_mask_i64scatter_pd (double *__addr, __mmask8 __mask,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_i32scatter_epi32 (int *__addr, __m512i __index,\n+_mm512_i32scatter_epi32 (void *__addr, __m512i __index,\n \t\t\t __m512i __v1, int __scale)\n {\n   __builtin_ia32_scattersiv16si (__addr, (__mmask16) 0xFFFF,\n@@ -9477,7 +9477,7 @@ _mm512_i32scatter_epi32 (int *__addr, __m512i __index,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_i32scatter_epi32 (int *__addr, __mmask16 __mask,\n+_mm512_mask_i32scatter_epi32 (void *__addr, __mmask16 __mask,\n \t\t\t      __m512i __index, __m512i __v1, int __scale)\n {\n   __builtin_ia32_scattersiv16si (__addr, __mask, (__v16si) __index,\n@@ -9486,7 +9486,7 @@ _mm512_mask_i32scatter_epi32 (int *__addr, __mmask16 __mask,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_i32scatter_epi64 (long long *__addr, __m256i __index,\n+_mm512_i32scatter_epi64 (void *__addr, __m256i __index,\n \t\t\t __m512i __v1, int __scale)\n {\n   __builtin_ia32_scattersiv8di (__addr, (__mmask8) 0xFF,\n@@ -9495,7 +9495,7 @@ _mm512_i32scatter_epi64 (long long *__addr, __m256i __index,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_i32scatter_epi64 (long long *__addr, __mmask8 __mask,\n+_mm512_mask_i32scatter_epi64 (void *__addr, __mmask8 __mask,\n \t\t\t      __m256i __index, __m512i __v1, int __scale)\n {\n   __builtin_ia32_scattersiv8di (__addr, __mask, (__v8si) __index,\n@@ -9504,7 +9504,7 @@ _mm512_mask_i32scatter_epi64 (long long *__addr, __mmask8 __mask,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_i64scatter_epi32 (int *__addr, __m512i __index,\n+_mm512_i64scatter_epi32 (void *__addr, __m512i __index,\n \t\t\t __m256i __v1, int __scale)\n {\n   __builtin_ia32_scatterdiv16si (__addr, (__mmask8) 0xFF,\n@@ -9513,7 +9513,7 @@ _mm512_i64scatter_epi32 (int *__addr, __m512i __index,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_i64scatter_epi32 (int *__addr, __mmask8 __mask,\n+_mm512_mask_i64scatter_epi32 (void *__addr, __mmask8 __mask,\n \t\t\t      __m512i __index, __m256i __v1, int __scale)\n {\n   __builtin_ia32_scatterdiv16si (__addr, __mask, (__v8di) __index,\n@@ -9522,7 +9522,7 @@ _mm512_mask_i64scatter_epi32 (int *__addr, __mmask8 __mask,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_i64scatter_epi64 (long long *__addr, __m512i __index,\n+_mm512_i64scatter_epi64 (void *__addr, __m512i __index,\n \t\t\t __m512i __v1, int __scale)\n {\n   __builtin_ia32_scatterdiv8di (__addr, (__mmask8) 0xFF,\n@@ -9531,7 +9531,7 @@ _mm512_i64scatter_epi64 (long long *__addr, __m512i __index,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_i64scatter_epi64 (long long *__addr, __mmask8 __mask,\n+_mm512_mask_i64scatter_epi64 (void *__addr, __mmask8 __mask,\n \t\t\t      __m512i __index, __m512i __v1, int __scale)\n {\n   __builtin_ia32_scatterdiv8di (__addr, __mask, (__v8di) __index,\n@@ -9540,177 +9540,177 @@ _mm512_mask_i64scatter_epi64 (long long *__addr, __mmask8 __mask,\n #else\n #define _mm512_i32gather_ps(INDEX, ADDR, SCALE)\t\t\t\t\\\n   (__m512) __builtin_ia32_gathersiv16sf ((__v16sf)_mm512_undefined_ps(),\\\n-\t\t\t\t\t (float const *)ADDR,\t\t\\\n+\t\t\t\t\t (void const *)ADDR,\t\t\\\n \t\t\t\t\t (__v16si)(__m512i)INDEX,\t\\\n \t\t\t\t\t (__mmask16)0xFFFF, (int)SCALE)\n \n #define _mm512_mask_i32gather_ps(V1OLD, MASK, INDEX, ADDR, SCALE)\t\\\n   (__m512) __builtin_ia32_gathersiv16sf ((__v16sf)(__m512)V1OLD,\t\\\n-\t\t\t\t\t (float const *)ADDR,\t\t\\\n+\t\t\t\t\t (void const *)ADDR,\t\t\\\n \t\t\t\t\t (__v16si)(__m512i)INDEX,\t\\\n \t\t\t\t\t (__mmask16)MASK, (int)SCALE)\n \n #define _mm512_i32gather_pd(INDEX, ADDR, SCALE)\t\t\t\t\\\n   (__m512d) __builtin_ia32_gathersiv8df ((__v8df)_mm512_undefined_pd(),\t\\\n-\t\t\t\t\t (double const *)ADDR,\t\t\\\n+\t\t\t\t\t (void const *)ADDR,\t\t\\\n \t\t\t\t\t (__v8si)(__m256i)INDEX,\t\\\n \t\t\t\t\t (__mmask8)0xFF, (int)SCALE)\n \n #define _mm512_mask_i32gather_pd(V1OLD, MASK, INDEX, ADDR, SCALE)\t\\\n   (__m512d) __builtin_ia32_gathersiv8df ((__v8df)(__m512d)V1OLD,\t\\\n-\t\t\t\t\t (double const *)ADDR,\t\t\\\n+\t\t\t\t\t (void const *)ADDR,\t\t\\\n \t\t\t\t\t (__v8si)(__m256i)INDEX,\t\\\n \t\t\t\t\t (__mmask8)MASK, (int)SCALE)\n \n #define _mm512_i64gather_ps(INDEX, ADDR, SCALE)\t\t\t\t\\\n   (__m256) __builtin_ia32_gatherdiv16sf ((__v8sf)_mm256_undefined_ps(),\t\\\n-\t\t\t\t\t (float const *)ADDR,\t\t\\\n+\t\t\t\t\t (void const *)ADDR,\t\t\\\n \t\t\t\t\t (__v8di)(__m512i)INDEX,\t\\\n \t\t\t\t\t (__mmask8)0xFF, (int)SCALE)\n \n #define _mm512_mask_i64gather_ps(V1OLD, MASK, INDEX, ADDR, SCALE)\t\\\n   (__m256) __builtin_ia32_gatherdiv16sf ((__v8sf)(__m256)V1OLD,\t\t\\\n-\t\t\t\t\t (float const *)ADDR,\t\t\\\n+\t\t\t\t\t (void const *)ADDR,\t\t\\\n \t\t\t\t\t (__v8di)(__m512i)INDEX,\t\\\n \t\t\t\t\t (__mmask8)MASK, (int)SCALE)\n \n #define _mm512_i64gather_pd(INDEX, ADDR, SCALE)\t\t\t\t\\\n   (__m512d) __builtin_ia32_gatherdiv8df ((__v8df)_mm512_undefined_pd(),\t\\\n-\t\t\t\t\t (double const *)ADDR,\t\t\\\n+\t\t\t\t\t (void const *)ADDR,\t\t\\\n \t\t\t\t\t (__v8di)(__m512i)INDEX,\t\\\n \t\t\t\t\t (__mmask8)0xFF, (int)SCALE)\n \n #define _mm512_mask_i64gather_pd(V1OLD, MASK, INDEX, ADDR, SCALE)\t\\\n   (__m512d) __builtin_ia32_gatherdiv8df ((__v8df)(__m512d)V1OLD,\t\\\n-\t\t\t\t\t (double const *)ADDR,\t\t\\\n+\t\t\t\t\t (void const *)ADDR,\t\t\\\n \t\t\t\t\t (__v8di)(__m512i)INDEX,\t\\\n \t\t\t\t\t (__mmask8)MASK, (int)SCALE)\n \n #define _mm512_i32gather_epi32(INDEX, ADDR, SCALE)\t\t\t\\\n   (__m512i) __builtin_ia32_gathersiv16si ((__v16si)_mm512_undefined_epi32 (),\t\\\n-\t\t\t\t\t  (int const *)ADDR,\t\t\\\n+\t\t\t\t\t  (void const *)ADDR,\t\t\\\n \t\t\t\t\t  (__v16si)(__m512i)INDEX,\t\\\n \t\t\t\t\t  (__mmask16)0xFFFF, (int)SCALE)\n \n #define _mm512_mask_i32gather_epi32(V1OLD, MASK, INDEX, ADDR, SCALE)\t\\\n   (__m512i) __builtin_ia32_gathersiv16si ((__v16si)(__m512i)V1OLD,\t\\\n-\t\t\t\t\t  (int const *)ADDR,\t\t\\\n+\t\t\t\t\t  (void const *)ADDR,\t\t\\\n \t\t\t\t\t  (__v16si)(__m512i)INDEX,\t\\\n \t\t\t\t\t  (__mmask16)MASK, (int)SCALE)\n \n #define _mm512_i32gather_epi64(INDEX, ADDR, SCALE)\t\t\t\\\n   (__m512i) __builtin_ia32_gathersiv8di ((__v8di)_mm512_undefined_epi32 (),\t\\\n-\t\t\t\t\t (long long const *)ADDR,\t\\\n+\t\t\t\t\t (void const *)ADDR,\t\t\\\n \t\t\t\t\t (__v8si)(__m256i)INDEX,\t\\\n \t\t\t\t\t (__mmask8)0xFF, (int)SCALE)\n \n #define _mm512_mask_i32gather_epi64(V1OLD, MASK, INDEX, ADDR, SCALE)\t\\\n   (__m512i) __builtin_ia32_gathersiv8di ((__v8di)(__m512i)V1OLD,\t\\\n-\t\t\t\t\t (long long const *)ADDR,\t\\\n+\t\t\t\t\t (void const *)ADDR,\t\t\\\n \t\t\t\t\t (__v8si)(__m256i)INDEX,\t\\\n \t\t\t\t\t (__mmask8)MASK, (int)SCALE)\n \n #define _mm512_i64gather_epi32(INDEX, ADDR, SCALE)\t\t\t  \\\n   (__m256i) __builtin_ia32_gatherdiv16si ((__v8si)_mm256_undefined_si256(), \\\n-\t\t\t\t\t  (int const *)ADDR,\t\t  \\\n+\t\t\t\t\t  (void const *)ADDR,\t\t  \\\n \t\t\t\t\t  (__v8di)(__m512i)INDEX,\t  \\\n \t\t\t\t\t  (__mmask8)0xFF, (int)SCALE)\n \n #define _mm512_mask_i64gather_epi32(V1OLD, MASK, INDEX, ADDR, SCALE)\t\\\n   (__m256i) __builtin_ia32_gatherdiv16si ((__v8si)(__m256i)V1OLD,\t\\\n-\t\t\t\t\t  (int const *)ADDR,\t\t\\\n+\t\t\t\t\t  (void const *)ADDR,\t\t\\\n \t\t\t\t\t  (__v8di)(__m512i)INDEX,\t\\\n \t\t\t\t\t  (__mmask8)MASK, (int)SCALE)\n \n #define _mm512_i64gather_epi64(INDEX, ADDR, SCALE)\t\t\t\\\n   (__m512i) __builtin_ia32_gatherdiv8di ((__v8di)_mm512_undefined_epi32 (),\t\\\n-\t\t\t\t\t (long long const *)ADDR,\t\\\n+\t\t\t\t\t (void const *)ADDR,\t\t\\\n \t\t\t\t\t (__v8di)(__m512i)INDEX,\t\\\n \t\t\t\t\t (__mmask8)0xFF, (int)SCALE)\n \n #define _mm512_mask_i64gather_epi64(V1OLD, MASK, INDEX, ADDR, SCALE)\t\\\n   (__m512i) __builtin_ia32_gatherdiv8di ((__v8di)(__m512i)V1OLD,\t\\\n-\t\t\t\t\t (long long const *)ADDR,\t\\\n+\t\t\t\t\t (void const *)ADDR,\t\t\\\n \t\t\t\t\t (__v8di)(__m512i)INDEX,\t\\\n \t\t\t\t\t (__mmask8)MASK, (int)SCALE)\n \n #define _mm512_i32scatter_ps(ADDR, INDEX, V1, SCALE)\t\t\t\\\n-  __builtin_ia32_scattersiv16sf ((float *)ADDR, (__mmask16)0xFFFF,\t\\\n+  __builtin_ia32_scattersiv16sf ((void *)ADDR, (__mmask16)0xFFFF,\t\\\n \t\t\t\t (__v16si)(__m512i)INDEX,\t\t\\\n \t\t\t\t (__v16sf)(__m512)V1, (int)SCALE)\n \n #define _mm512_mask_i32scatter_ps(ADDR, MASK, INDEX, V1, SCALE)\t\t\\\n-  __builtin_ia32_scattersiv16sf ((float *)ADDR, (__mmask16)MASK,\t\t\\\n+  __builtin_ia32_scattersiv16sf ((void *)ADDR, (__mmask16)MASK,\t\t\\\n \t\t\t\t (__v16si)(__m512i)INDEX,\t\t\\\n \t\t\t\t (__v16sf)(__m512)V1, (int)SCALE)\n \n #define _mm512_i32scatter_pd(ADDR, INDEX, V1, SCALE)\t\t\t\\\n-  __builtin_ia32_scattersiv8df ((double *)ADDR, (__mmask8)0xFF,\t\t\\\n+  __builtin_ia32_scattersiv8df ((void *)ADDR, (__mmask8)0xFF,\t\t\\\n \t\t\t\t(__v8si)(__m256i)INDEX,\t\t\t\\\n \t\t\t\t(__v8df)(__m512d)V1, (int)SCALE)\n \n #define _mm512_mask_i32scatter_pd(ADDR, MASK, INDEX, V1, SCALE)\t\t\\\n-  __builtin_ia32_scattersiv8df ((double *)ADDR, (__mmask8)MASK,\t\t\\\n+  __builtin_ia32_scattersiv8df ((void *)ADDR, (__mmask8)MASK,\t\t\\\n \t\t\t\t(__v8si)(__m256i)INDEX,\t\t\t\\\n \t\t\t\t(__v8df)(__m512d)V1, (int)SCALE)\n \n #define _mm512_i64scatter_ps(ADDR, INDEX, V1, SCALE)\t\t\t\\\n-  __builtin_ia32_scatterdiv16sf ((float *)ADDR, (__mmask8)0xFF,\t\t\\\n+  __builtin_ia32_scatterdiv16sf ((void *)ADDR, (__mmask8)0xFF,\t\t\\\n \t\t\t\t (__v8di)(__m512i)INDEX,\t\t\\\n \t\t\t\t (__v8sf)(__m256)V1, (int)SCALE)\n \n #define _mm512_mask_i64scatter_ps(ADDR, MASK, INDEX, V1, SCALE)\t\t\\\n-  __builtin_ia32_scatterdiv16sf ((float *)ADDR, (__mmask16)MASK,\t\t\\\n+  __builtin_ia32_scatterdiv16sf ((void *)ADDR, (__mmask16)MASK,\t\t\\\n \t\t\t\t (__v8di)(__m512i)INDEX,\t\t\\\n \t\t\t\t (__v8sf)(__m256)V1, (int)SCALE)\n \n #define _mm512_i64scatter_pd(ADDR, INDEX, V1, SCALE)\t\t\t\\\n-  __builtin_ia32_scatterdiv8df ((double *)ADDR, (__mmask8)0xFF,\t\t\\\n+  __builtin_ia32_scatterdiv8df ((void *)ADDR, (__mmask8)0xFF,\t\t\\\n \t\t\t\t(__v8di)(__m512i)INDEX,\t\t\t\\\n \t\t\t\t(__v8df)(__m512d)V1, (int)SCALE)\n \n #define _mm512_mask_i64scatter_pd(ADDR, MASK, INDEX, V1, SCALE)\t\t\\\n-  __builtin_ia32_scatterdiv8df ((double *)ADDR, (__mmask8)MASK,\t\t\\\n+  __builtin_ia32_scatterdiv8df ((void *)ADDR, (__mmask8)MASK,\t\t\\\n \t\t\t\t(__v8di)(__m512i)INDEX,\t\t\t\\\n \t\t\t\t(__v8df)(__m512d)V1, (int)SCALE)\n \n #define _mm512_i32scatter_epi32(ADDR, INDEX, V1, SCALE)\t\t\t\\\n-  __builtin_ia32_scattersiv16si ((int *)ADDR, (__mmask16)0xFFFF,\t\\\n+  __builtin_ia32_scattersiv16si ((void *)ADDR, (__mmask16)0xFFFF,\t\\\n \t\t\t\t (__v16si)(__m512i)INDEX,\t\t\\\n \t\t\t\t (__v16si)(__m512i)V1, (int)SCALE)\n \n #define _mm512_mask_i32scatter_epi32(ADDR, MASK, INDEX, V1, SCALE)\t\\\n-  __builtin_ia32_scattersiv16si ((int *)ADDR, (__mmask16)MASK,\t\t\\\n+  __builtin_ia32_scattersiv16si ((void *)ADDR, (__mmask16)MASK,\t\t\\\n \t\t\t\t (__v16si)(__m512i)INDEX,\t\t\\\n \t\t\t\t (__v16si)(__m512i)V1, (int)SCALE)\n \n #define _mm512_i32scatter_epi64(ADDR, INDEX, V1, SCALE)\t\t\t\\\n-  __builtin_ia32_scattersiv8di ((long long *)ADDR, (__mmask8)0xFF,\t\\\n+  __builtin_ia32_scattersiv8di ((void *)ADDR, (__mmask8)0xFF,\t\t\\\n \t\t\t\t(__v8si)(__m256i)INDEX,\t\t\t\\\n \t\t\t\t(__v8di)(__m512i)V1, (int)SCALE)\n \n #define _mm512_mask_i32scatter_epi64(ADDR, MASK, INDEX, V1, SCALE)\t\\\n-  __builtin_ia32_scattersiv8di ((long long *)ADDR, (__mmask8)MASK,\t\\\n+  __builtin_ia32_scattersiv8di ((void *)ADDR, (__mmask8)MASK,\t\t\\\n \t\t\t\t(__v8si)(__m256i)INDEX,\t\t\t\\\n \t\t\t\t(__v8di)(__m512i)V1, (int)SCALE)\n \n #define _mm512_i64scatter_epi32(ADDR, INDEX, V1, SCALE)\t\t\t\\\n-  __builtin_ia32_scatterdiv16si ((int *)ADDR, (__mmask8)0xFF,\t\t\\\n+  __builtin_ia32_scatterdiv16si ((void *)ADDR, (__mmask8)0xFF,\t\t\\\n \t\t\t\t (__v8di)(__m512i)INDEX,\t\t\\\n \t\t\t\t (__v8si)(__m256i)V1, (int)SCALE)\n \n #define _mm512_mask_i64scatter_epi32(ADDR, MASK, INDEX, V1, SCALE)\t\\\n-  __builtin_ia32_scatterdiv16si ((int *)ADDR, (__mmask8)MASK,\t\t\\\n+  __builtin_ia32_scatterdiv16si ((void *)ADDR, (__mmask8)MASK,\t\t\\\n \t\t\t\t (__v8di)(__m512i)INDEX,\t\t\\\n \t\t\t\t (__v8si)(__m256i)V1, (int)SCALE)\n \n #define _mm512_i64scatter_epi64(ADDR, INDEX, V1, SCALE)\t\t\t\\\n-  __builtin_ia32_scatterdiv8di ((long long *)ADDR, (__mmask8)0xFF,\t\\\n+  __builtin_ia32_scatterdiv8di ((void *)ADDR, (__mmask8)0xFF,\t\t\\\n \t\t\t\t(__v8di)(__m512i)INDEX,\t\t\t\\\n \t\t\t\t(__v8di)(__m512i)V1, (int)SCALE)\n \n #define _mm512_mask_i64scatter_epi64(ADDR, MASK, INDEX, V1, SCALE)\t\\\n-  __builtin_ia32_scatterdiv8di ((long long *)ADDR, (__mmask8)MASK,\t\\\n+  __builtin_ia32_scatterdiv8di ((void *)ADDR, (__mmask8)MASK,\t\t\\\n \t\t\t\t(__v8di)(__m512i)INDEX,\t\t\t\\\n \t\t\t\t(__v8di)(__m512i)V1, (int)SCALE)\n #endif"}, {"sha": "8dfaa07e97e1ddd81850b113b7418561c1b37eab", "filename": "gcc/config/i386/avx512pfintrin.h", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e171d5408feafcd56b97c831a99d14e544b98af/gcc%2Fconfig%2Fi386%2Favx512pfintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e171d5408feafcd56b97c831a99d14e544b98af/gcc%2Fconfig%2Fi386%2Favx512pfintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512pfintrin.h?ref=0e171d5408feafcd56b97c831a99d14e544b98af", "patch": "@@ -49,159 +49,159 @@ typedef unsigned short __mmask16;\n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_prefetch_i32gather_pd (__m256i __index, __mmask8 __mask,\n-\t\t\t\t   void *__addr, int __scale, int __hint)\n+\t\t\t\t   void const *__addr, int __scale, int __hint)\n {\n-  __builtin_ia32_gatherpfdpd (__mask, (__v8si) __index,\n-\t\t\t      (long long const *) __addr, __scale, __hint);\n+  __builtin_ia32_gatherpfdpd (__mask, (__v8si) __index, __addr, __scale,\n+\t\t\t      __hint);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_prefetch_i32gather_ps (__m512i __index, __mmask16 __mask,\n-\t\t\t\t   void *__addr, int __scale, int __hint)\n+\t\t\t\t   void const *__addr, int __scale, int __hint)\n {\n-  __builtin_ia32_gatherpfdps (__mask, (__v16si) __index, (int const *) __addr,\n-\t\t\t      __scale, __hint);\n+  __builtin_ia32_gatherpfdps (__mask, (__v16si) __index, __addr, __scale,\n+\t\t\t      __hint);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_prefetch_i64gather_pd (__m512i __index, __mmask8 __mask,\n-\t\t\t\t   void *__addr, int __scale, int __hint)\n+\t\t\t\t   void const *__addr, int __scale, int __hint)\n {\n-  __builtin_ia32_gatherpfqpd (__mask, (__v8di) __index,\n-\t\t\t      (long long const *) __addr, __scale, __hint);\n+  __builtin_ia32_gatherpfqpd (__mask, (__v8di) __index, __addr, __scale,\n+\t\t\t      __hint);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_prefetch_i64gather_ps (__m512i __index, __mmask8 __mask,\n-\t\t\t\t   void *__addr, int __scale, int __hint)\n+\t\t\t\t   void const *__addr, int __scale, int __hint)\n {\n-  __builtin_ia32_gatherpfqps (__mask, (__v8di) __index, (int const *) __addr,\n-\t\t\t      __scale, __hint);\n+  __builtin_ia32_gatherpfqps (__mask, (__v8di) __index, __addr, __scale,\n+\t\t\t      __hint);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_prefetch_i32scatter_pd (void *__addr, __m256i __index, int __scale,\n \t\t\t       int __hint)\n {\n-  __builtin_ia32_scatterpfdpd ((__mmask8) 0xFF, (__v8si) __index, \n-\t\t\t       (long long const *) __addr, __scale, __hint);\n+  __builtin_ia32_scatterpfdpd ((__mmask8) 0xFF, (__v8si) __index, __addr,\n+\t\t\t      __scale, __hint);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_prefetch_i32scatter_ps (void *__addr, __m512i __index, int __scale,\n \t\t\t       int __hint)\n {\n-  __builtin_ia32_scatterpfdps ((__mmask16) 0xFFFF, (__v16si) __index,\n-\t\t\t       (int const *) __addr, __scale, __hint);\n+  __builtin_ia32_scatterpfdps ((__mmask16) 0xFFFF, (__v16si) __index, __addr,\n+\t\t\t      __scale, __hint);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_prefetch_i32scatter_pd (void *__addr, __mmask8 __mask,\n \t\t\t\t    __m256i __index, int __scale, int __hint)\n {\n-  __builtin_ia32_scatterpfdpd (__mask, (__v8si) __index,\n-\t\t\t       (long long const *) __addr, __scale, __hint);\n+  __builtin_ia32_scatterpfdpd (__mask, (__v8si) __index, __addr, __scale,\n+\t\t\t       __hint);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_prefetch_i32scatter_ps (void *__addr, __mmask16 __mask,\n \t\t\t\t    __m512i __index, int __scale, int __hint)\n {\n-  __builtin_ia32_scatterpfdps (__mask, (__v16si) __index, (int const *) __addr,\n-\t\t\t       __scale, __hint);\n+  __builtin_ia32_scatterpfdps (__mask, (__v16si) __index, __addr, __scale,\n+\t\t\t       __hint);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_prefetch_i64scatter_pd (void *__addr, __m512i __index, int __scale,\n \t\t\t       int __hint)\n {\n-  __builtin_ia32_scatterpfqpd ((__mmask8) 0xFF, (__v8di) __index,\n-\t\t\t       (long long const *) __addr, __scale, __hint);\n+  __builtin_ia32_scatterpfqpd ((__mmask8) 0xFF, (__v8di) __index,__addr,\n+\t\t\t      __scale, __hint);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_prefetch_i64scatter_ps (void *__addr, __m512i __index, int __scale,\n \t\t\t       int __hint)\n {\n-  __builtin_ia32_scatterpfqps ((__mmask8) 0xFF, (__v8di) __index,\n-\t\t\t       (int const *) __addr, __scale, __hint);\n+  __builtin_ia32_scatterpfqps ((__mmask8) 0xFF, (__v8di) __index, __addr,\n+\t\t\t      __scale, __hint);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_prefetch_i64scatter_pd (void *__addr, __mmask16 __mask,\n \t\t\t\t    __m512i __index, int __scale, int __hint)\n {\n-  __builtin_ia32_scatterpfqpd (__mask, (__v8di) __index,\n-\t\t\t       (long long const *) __addr, __scale, __hint);\n+  __builtin_ia32_scatterpfqpd (__mask, (__v8di) __index, __addr, __scale,\n+\t\t\t      __hint);\n }\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_prefetch_i64scatter_ps (void *__addr, __mmask16 __mask,\n \t\t\t\t    __m512i __index, int __scale, int __hint)\n {\n-  __builtin_ia32_scatterpfqps (__mask, (__v8di) __index, (int const *) __addr,\n-\t\t\t       __scale, __hint);\n+  __builtin_ia32_scatterpfqps (__mask, (__v8di) __index, __addr, __scale,\n+\t\t\t       __hint);\n }\n \n #else\n #define _mm512_mask_prefetch_i32gather_pd(INDEX, MASK, ADDR, SCALE, HINT)    \\\n   __builtin_ia32_gatherpfdpd ((__mmask8)MASK, (__v8si)(__m256i)INDEX,\t     \\\n-\t\t\t      (long long const *)ADDR, (int)SCALE, (int)HINT)\n+\t\t\t      (void const *)ADDR, (int)SCALE, (int)HINT)\n \n #define _mm512_mask_prefetch_i32gather_ps(INDEX, MASK, ADDR, SCALE, HINT)    \\\n   __builtin_ia32_gatherpfdps ((__mmask16)MASK, (__v16si)(__m512i)INDEX,      \\\n-\t\t\t      (int const *)ADDR, (int)SCALE, (int)HINT)\n+\t\t\t      (void const *)ADDR, (int)SCALE, (int)HINT)\n \n #define _mm512_mask_prefetch_i64gather_pd(INDEX, MASK, ADDR, SCALE, HINT)    \\\n   __builtin_ia32_gatherpfqpd ((__mmask8)MASK, (__v8di)(__m512i)INDEX,\t     \\\n-\t\t\t      (long long const *)ADDR, (int)SCALE, (int)HINT)\n+\t\t\t      (void *)ADDR, (int)SCALE, (int)HINT)\n \n #define _mm512_mask_prefetch_i64gather_ps(INDEX, MASK, ADDR, SCALE, HINT)    \\\n   __builtin_ia32_gatherpfqps ((__mmask8)MASK, (__v8di)(__m512i)INDEX,\t     \\\n-\t\t\t      (int const *)ADDR, (int)SCALE, (int)HINT)\n+\t\t\t      (void *)ADDR, (int)SCALE, (int)HINT)\n \n #define _mm512_prefetch_i32scatter_pd(ADDR, INDEX, SCALE, HINT)              \\\n   __builtin_ia32_scatterpfdpd ((__mmask8)0xFF, (__v8si)(__m256i)INDEX,       \\\n-\t\t\t       (long long const *)ADDR, (int)SCALE, (int)HINT)\n+\t\t\t       (void *)ADDR, (int)SCALE, (int)HINT)\n \n #define _mm512_prefetch_i32scatter_ps(ADDR, INDEX, SCALE, HINT)              \\\n   __builtin_ia32_scatterpfdps ((__mmask16)0xFFFF, (__v16si)(__m512i)INDEX,   \\\n-\t\t\t       (int const *)ADDR, (int)SCALE, (int)HINT)\n+\t\t\t       (void *)ADDR, (int)SCALE, (int)HINT)\n \n #define _mm512_mask_prefetch_i32scatter_pd(ADDR, MASK, INDEX, SCALE, HINT)   \\\n   __builtin_ia32_scatterpfdpd ((__mmask8)MASK, (__v8si)(__m256i)INDEX,       \\\n-\t\t\t       (long long const *)ADDR, (int)SCALE, (int)HINT)\n+\t\t\t       (void *)ADDR, (int)SCALE, (int)HINT)\n \n #define _mm512_mask_prefetch_i32scatter_ps(ADDR, MASK, INDEX, SCALE, HINT)   \\\n   __builtin_ia32_scatterpfdps ((__mmask16)MASK, (__v16si)(__m512i)INDEX,     \\\n-\t\t\t       (int const *)ADDR, (int)SCALE, (int)HINT)\n+\t\t\t       (void *)ADDR, (int)SCALE, (int)HINT)\n \n #define _mm512_prefetch_i64scatter_pd(ADDR, INDEX, SCALE, HINT)              \\\n   __builtin_ia32_scatterpfqpd ((__mmask8)0xFF, (__v8di)(__m512i)INDEX,\t     \\\n-\t\t\t       (long long const *)ADDR, (int)SCALE, (int)HINT)\n+\t\t\t       (void *)ADDR, (int)SCALE, (int)HINT)\n \n #define _mm512_prefetch_i64scatter_ps(ADDR, INDEX, SCALE, HINT)              \\\n   __builtin_ia32_scatterpfqps ((__mmask8)0xFF, (__v8di)(__m512i)INDEX,\t     \\\n-\t\t\t       (int const *)ADDR, (int)SCALE, (int)HINT)\n+\t\t\t       (void *)ADDR, (int)SCALE, (int)HINT)\n \n #define _mm512_mask_prefetch_i64scatter_pd(ADDR, MASK, INDEX, SCALE, HINT)   \\\n   __builtin_ia32_scatterpfqpd ((__mmask8)MASK, (__v8di)(__m512i)INDEX,\t     \\\n-\t\t\t       (long long const *)ADDR, (int)SCALE, (int)HINT)\n+\t\t\t       (void *)ADDR, (int)SCALE, (int)HINT)\n \n #define _mm512_mask_prefetch_i64scatter_ps(ADDR, MASK, INDEX, SCALE, HINT)   \\\n   __builtin_ia32_scatterpfqps ((__mmask8)MASK, (__v8di)(__m512i)INDEX,\t     \\\n-\t\t\t       (int const *)ADDR, (int)SCALE, (int)HINT)\n+\t\t\t       (void *)ADDR, (int)SCALE, (int)HINT)\n #endif\n \n #ifdef __DISABLE_AVX512PF__"}, {"sha": "9750cd811aade7724413f4e80a5cf8abcce9e537", "filename": "gcc/config/i386/avx512vlintrin.h", "status": "modified", "additions": 96, "deletions": 96, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e171d5408feafcd56b97c831a99d14e544b98af/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e171d5408feafcd56b97c831a99d14e544b98af/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h?ref=0e171d5408feafcd56b97c831a99d14e544b98af", "patch": "@@ -10229,7 +10229,7 @@ _mm_maskz_getmant_pd (__mmask8 __U, __m128d __A,\n extern __inline __m256\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mmask_i32gather_ps (__m256 __v1_old, __mmask8 __mask,\n-\t\t\t   __m256i __index, float const *__addr,\n+\t\t\t   __m256i __index, void const *__addr,\n \t\t\t   int __scale)\n {\n   return (__m256) __builtin_ia32_gather3siv8sf ((__v8sf) __v1_old,\n@@ -10241,7 +10241,7 @@ _mm256_mmask_i32gather_ps (__m256 __v1_old, __mmask8 __mask,\n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mmask_i32gather_ps (__m128 __v1_old, __mmask8 __mask,\n-\t\t\t__m128i __index, float const *__addr,\n+\t\t\t__m128i __index, void const *__addr,\n \t\t\tint __scale)\n {\n   return (__m128) __builtin_ia32_gather3siv4sf ((__v4sf) __v1_old,\n@@ -10253,7 +10253,7 @@ _mm_mmask_i32gather_ps (__m128 __v1_old, __mmask8 __mask,\n extern __inline __m256d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mmask_i32gather_pd (__m256d __v1_old, __mmask8 __mask,\n-\t\t\t   __m128i __index, double const *__addr,\n+\t\t\t   __m128i __index, void const *__addr,\n \t\t\t   int __scale)\n {\n   return (__m256d) __builtin_ia32_gather3siv4df ((__v4df) __v1_old,\n@@ -10265,7 +10265,7 @@ _mm256_mmask_i32gather_pd (__m256d __v1_old, __mmask8 __mask,\n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mmask_i32gather_pd (__m128d __v1_old, __mmask8 __mask,\n-\t\t\t__m128i __index, double const *__addr,\n+\t\t\t__m128i __index, void const *__addr,\n \t\t\tint __scale)\n {\n   return (__m128d) __builtin_ia32_gather3siv2df ((__v2df) __v1_old,\n@@ -10277,7 +10277,7 @@ _mm_mmask_i32gather_pd (__m128d __v1_old, __mmask8 __mask,\n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mmask_i64gather_ps (__m128 __v1_old, __mmask8 __mask,\n-\t\t\t   __m256i __index, float const *__addr,\n+\t\t\t   __m256i __index, void const *__addr,\n \t\t\t   int __scale)\n {\n   return (__m128) __builtin_ia32_gather3div8sf ((__v4sf) __v1_old,\n@@ -10289,7 +10289,7 @@ _mm256_mmask_i64gather_ps (__m128 __v1_old, __mmask8 __mask,\n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mmask_i64gather_ps (__m128 __v1_old, __mmask8 __mask,\n-\t\t\t__m128i __index, float const *__addr,\n+\t\t\t__m128i __index, void const *__addr,\n \t\t\tint __scale)\n {\n   return (__m128) __builtin_ia32_gather3div4sf ((__v4sf) __v1_old,\n@@ -10301,7 +10301,7 @@ _mm_mmask_i64gather_ps (__m128 __v1_old, __mmask8 __mask,\n extern __inline __m256d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mmask_i64gather_pd (__m256d __v1_old, __mmask8 __mask,\n-\t\t\t   __m256i __index, double const *__addr,\n+\t\t\t   __m256i __index, void const *__addr,\n \t\t\t   int __scale)\n {\n   return (__m256d) __builtin_ia32_gather3div4df ((__v4df) __v1_old,\n@@ -10313,7 +10313,7 @@ _mm256_mmask_i64gather_pd (__m256d __v1_old, __mmask8 __mask,\n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mmask_i64gather_pd (__m128d __v1_old, __mmask8 __mask,\n-\t\t\t__m128i __index, double const *__addr,\n+\t\t\t__m128i __index, void const *__addr,\n \t\t\tint __scale)\n {\n   return (__m128d) __builtin_ia32_gather3div2df ((__v2df) __v1_old,\n@@ -10325,7 +10325,7 @@ _mm_mmask_i64gather_pd (__m128d __v1_old, __mmask8 __mask,\n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mmask_i32gather_epi32 (__m256i __v1_old, __mmask8 __mask,\n-\t\t\t      __m256i __index, int const *__addr,\n+\t\t\t      __m256i __index, void const *__addr,\n \t\t\t      int __scale)\n {\n   return (__m256i) __builtin_ia32_gather3siv8si ((__v8si) __v1_old,\n@@ -10337,7 +10337,7 @@ _mm256_mmask_i32gather_epi32 (__m256i __v1_old, __mmask8 __mask,\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mmask_i32gather_epi32 (__m128i __v1_old, __mmask8 __mask,\n-\t\t\t   __m128i __index, int const *__addr,\n+\t\t\t   __m128i __index, void const *__addr,\n \t\t\t   int __scale)\n {\n   return (__m128i) __builtin_ia32_gather3siv4si ((__v4si) __v1_old,\n@@ -10349,7 +10349,7 @@ _mm_mmask_i32gather_epi32 (__m128i __v1_old, __mmask8 __mask,\n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mmask_i32gather_epi64 (__m256i __v1_old, __mmask8 __mask,\n-\t\t\t      __m128i __index, long long const *__addr,\n+\t\t\t      __m128i __index, void const *__addr,\n \t\t\t      int __scale)\n {\n   return (__m256i) __builtin_ia32_gather3siv4di ((__v4di) __v1_old,\n@@ -10361,7 +10361,7 @@ _mm256_mmask_i32gather_epi64 (__m256i __v1_old, __mmask8 __mask,\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mmask_i32gather_epi64 (__m128i __v1_old, __mmask8 __mask,\n-\t\t\t   __m128i __index, long long const *__addr,\n+\t\t\t   __m128i __index, void const *__addr,\n \t\t\t   int __scale)\n {\n   return (__m128i) __builtin_ia32_gather3siv2di ((__v2di) __v1_old,\n@@ -10373,7 +10373,7 @@ _mm_mmask_i32gather_epi64 (__m128i __v1_old, __mmask8 __mask,\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mmask_i64gather_epi32 (__m128i __v1_old, __mmask8 __mask,\n-\t\t\t      __m256i __index, int const *__addr,\n+\t\t\t      __m256i __index, void const *__addr,\n \t\t\t      int __scale)\n {\n   return (__m128i) __builtin_ia32_gather3div8si ((__v4si) __v1_old,\n@@ -10385,7 +10385,7 @@ _mm256_mmask_i64gather_epi32 (__m128i __v1_old, __mmask8 __mask,\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mmask_i64gather_epi32 (__m128i __v1_old, __mmask8 __mask,\n-\t\t\t   __m128i __index, int const *__addr,\n+\t\t\t   __m128i __index, void const *__addr,\n \t\t\t   int __scale)\n {\n   return (__m128i) __builtin_ia32_gather3div4si ((__v4si) __v1_old,\n@@ -10397,7 +10397,7 @@ _mm_mmask_i64gather_epi32 (__m128i __v1_old, __mmask8 __mask,\n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mmask_i64gather_epi64 (__m256i __v1_old, __mmask8 __mask,\n-\t\t\t      __m256i __index, long long const *__addr,\n+\t\t\t      __m256i __index, void const *__addr,\n \t\t\t      int __scale)\n {\n   return (__m256i) __builtin_ia32_gather3div4di ((__v4di) __v1_old,\n@@ -10409,7 +10409,7 @@ _mm256_mmask_i64gather_epi64 (__m256i __v1_old, __mmask8 __mask,\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mmask_i64gather_epi64 (__m128i __v1_old, __mmask8 __mask,\n-\t\t\t   __m128i __index, long long const *__addr,\n+\t\t\t   __m128i __index, void const *__addr,\n \t\t\t   int __scale)\n {\n   return (__m128i) __builtin_ia32_gather3div2di ((__v2di) __v1_old,\n@@ -10420,7 +10420,7 @@ _mm_mmask_i64gather_epi64 (__m128i __v1_old, __mmask8 __mask,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_i32scatter_ps (float *__addr, __m256i __index,\n+_mm256_i32scatter_ps (void *__addr, __m256i __index,\n \t\t      __m256 __v1, const int __scale)\n {\n   __builtin_ia32_scattersiv8sf (__addr, (__mmask8) 0xFF,\n@@ -10430,7 +10430,7 @@ _mm256_i32scatter_ps (float *__addr, __m256i __index,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_i32scatter_ps (float *__addr, __mmask8 __mask,\n+_mm256_mask_i32scatter_ps (void *__addr, __mmask8 __mask,\n \t\t\t   __m256i __index, __m256 __v1,\n \t\t\t   const int __scale)\n {\n@@ -10440,7 +10440,7 @@ _mm256_mask_i32scatter_ps (float *__addr, __mmask8 __mask,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_i32scatter_ps (float *__addr, __m128i __index, __m128 __v1,\n+_mm_i32scatter_ps (void *__addr, __m128i __index, __m128 __v1,\n \t\t   const int __scale)\n {\n   __builtin_ia32_scattersiv4sf (__addr, (__mmask8) 0xFF,\n@@ -10450,7 +10450,7 @@ _mm_i32scatter_ps (float *__addr, __m128i __index, __m128 __v1,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_i32scatter_ps (float *__addr, __mmask8 __mask,\n+_mm_mask_i32scatter_ps (void *__addr, __mmask8 __mask,\n \t\t\t__m128i __index, __m128 __v1,\n \t\t\tconst int __scale)\n {\n@@ -10460,7 +10460,7 @@ _mm_mask_i32scatter_ps (float *__addr, __mmask8 __mask,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_i32scatter_pd (double *__addr, __m128i __index,\n+_mm256_i32scatter_pd (void *__addr, __m128i __index,\n \t\t      __m256d __v1, const int __scale)\n {\n   __builtin_ia32_scattersiv4df (__addr, (__mmask8) 0xFF,\n@@ -10470,7 +10470,7 @@ _mm256_i32scatter_pd (double *__addr, __m128i __index,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_i32scatter_pd (double *__addr, __mmask8 __mask,\n+_mm256_mask_i32scatter_pd (void *__addr, __mmask8 __mask,\n \t\t\t   __m128i __index, __m256d __v1,\n \t\t\t   const int __scale)\n {\n@@ -10480,7 +10480,7 @@ _mm256_mask_i32scatter_pd (double *__addr, __mmask8 __mask,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_i32scatter_pd (double *__addr, __m128i __index,\n+_mm_i32scatter_pd (void *__addr, __m128i __index,\n \t\t   __m128d __v1, const int __scale)\n {\n   __builtin_ia32_scattersiv2df (__addr, (__mmask8) 0xFF,\n@@ -10490,7 +10490,7 @@ _mm_i32scatter_pd (double *__addr, __m128i __index,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_i32scatter_pd (double *__addr, __mmask8 __mask,\n+_mm_mask_i32scatter_pd (void *__addr, __mmask8 __mask,\n \t\t\t__m128i __index, __m128d __v1,\n \t\t\tconst int __scale)\n {\n@@ -10500,7 +10500,7 @@ _mm_mask_i32scatter_pd (double *__addr, __mmask8 __mask,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_i64scatter_ps (float *__addr, __m256i __index,\n+_mm256_i64scatter_ps (void *__addr, __m256i __index,\n \t\t      __m128 __v1, const int __scale)\n {\n   __builtin_ia32_scatterdiv8sf (__addr, (__mmask8) 0xFF,\n@@ -10510,7 +10510,7 @@ _mm256_i64scatter_ps (float *__addr, __m256i __index,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_i64scatter_ps (float *__addr, __mmask8 __mask,\n+_mm256_mask_i64scatter_ps (void *__addr, __mmask8 __mask,\n \t\t\t   __m256i __index, __m128 __v1,\n \t\t\t   const int __scale)\n {\n@@ -10520,7 +10520,7 @@ _mm256_mask_i64scatter_ps (float *__addr, __mmask8 __mask,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_i64scatter_ps (float *__addr, __m128i __index, __m128 __v1,\n+_mm_i64scatter_ps (void *__addr, __m128i __index, __m128 __v1,\n \t\t   const int __scale)\n {\n   __builtin_ia32_scatterdiv4sf (__addr, (__mmask8) 0xFF,\n@@ -10530,7 +10530,7 @@ _mm_i64scatter_ps (float *__addr, __m128i __index, __m128 __v1,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_i64scatter_ps (float *__addr, __mmask8 __mask,\n+_mm_mask_i64scatter_ps (void *__addr, __mmask8 __mask,\n \t\t\t__m128i __index, __m128 __v1,\n \t\t\tconst int __scale)\n {\n@@ -10540,7 +10540,7 @@ _mm_mask_i64scatter_ps (float *__addr, __mmask8 __mask,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_i64scatter_pd (double *__addr, __m256i __index,\n+_mm256_i64scatter_pd (void *__addr, __m256i __index,\n \t\t      __m256d __v1, const int __scale)\n {\n   __builtin_ia32_scatterdiv4df (__addr, (__mmask8) 0xFF,\n@@ -10550,7 +10550,7 @@ _mm256_i64scatter_pd (double *__addr, __m256i __index,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_i64scatter_pd (double *__addr, __mmask8 __mask,\n+_mm256_mask_i64scatter_pd (void *__addr, __mmask8 __mask,\n \t\t\t   __m256i __index, __m256d __v1,\n \t\t\t   const int __scale)\n {\n@@ -10560,7 +10560,7 @@ _mm256_mask_i64scatter_pd (double *__addr, __mmask8 __mask,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_i64scatter_pd (double *__addr, __m128i __index,\n+_mm_i64scatter_pd (void *__addr, __m128i __index,\n \t\t   __m128d __v1, const int __scale)\n {\n   __builtin_ia32_scatterdiv2df (__addr, (__mmask8) 0xFF,\n@@ -10570,7 +10570,7 @@ _mm_i64scatter_pd (double *__addr, __m128i __index,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_i64scatter_pd (double *__addr, __mmask8 __mask,\n+_mm_mask_i64scatter_pd (void *__addr, __mmask8 __mask,\n \t\t\t__m128i __index, __m128d __v1,\n \t\t\tconst int __scale)\n {\n@@ -10580,7 +10580,7 @@ _mm_mask_i64scatter_pd (double *__addr, __mmask8 __mask,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_i32scatter_epi32 (int *__addr, __m256i __index,\n+_mm256_i32scatter_epi32 (void *__addr, __m256i __index,\n \t\t\t __m256i __v1, const int __scale)\n {\n   __builtin_ia32_scattersiv8si (__addr, (__mmask8) 0xFF,\n@@ -10590,7 +10590,7 @@ _mm256_i32scatter_epi32 (int *__addr, __m256i __index,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_i32scatter_epi32 (int *__addr, __mmask8 __mask,\n+_mm256_mask_i32scatter_epi32 (void *__addr, __mmask8 __mask,\n \t\t\t      __m256i __index, __m256i __v1,\n \t\t\t      const int __scale)\n {\n@@ -10600,7 +10600,7 @@ _mm256_mask_i32scatter_epi32 (int *__addr, __mmask8 __mask,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_i32scatter_epi32 (int *__addr, __m128i __index,\n+_mm_i32scatter_epi32 (void *__addr, __m128i __index,\n \t\t      __m128i __v1, const int __scale)\n {\n   __builtin_ia32_scattersiv4si (__addr, (__mmask8) 0xFF,\n@@ -10610,7 +10610,7 @@ _mm_i32scatter_epi32 (int *__addr, __m128i __index,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_i32scatter_epi32 (int *__addr, __mmask8 __mask,\n+_mm_mask_i32scatter_epi32 (void *__addr, __mmask8 __mask,\n \t\t\t   __m128i __index, __m128i __v1,\n \t\t\t   const int __scale)\n {\n@@ -10620,7 +10620,7 @@ _mm_mask_i32scatter_epi32 (int *__addr, __mmask8 __mask,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_i32scatter_epi64 (long long *__addr, __m128i __index,\n+_mm256_i32scatter_epi64 (void *__addr, __m128i __index,\n \t\t\t __m256i __v1, const int __scale)\n {\n   __builtin_ia32_scattersiv4di (__addr, (__mmask8) 0xFF,\n@@ -10630,7 +10630,7 @@ _mm256_i32scatter_epi64 (long long *__addr, __m128i __index,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_i32scatter_epi64 (long long *__addr, __mmask8 __mask,\n+_mm256_mask_i32scatter_epi64 (void *__addr, __mmask8 __mask,\n \t\t\t      __m128i __index, __m256i __v1,\n \t\t\t      const int __scale)\n {\n@@ -10640,7 +10640,7 @@ _mm256_mask_i32scatter_epi64 (long long *__addr, __mmask8 __mask,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_i32scatter_epi64 (long long *__addr, __m128i __index,\n+_mm_i32scatter_epi64 (void *__addr, __m128i __index,\n \t\t      __m128i __v1, const int __scale)\n {\n   __builtin_ia32_scattersiv2di (__addr, (__mmask8) 0xFF,\n@@ -10650,7 +10650,7 @@ _mm_i32scatter_epi64 (long long *__addr, __m128i __index,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_i32scatter_epi64 (long long *__addr, __mmask8 __mask,\n+_mm_mask_i32scatter_epi64 (void *__addr, __mmask8 __mask,\n \t\t\t   __m128i __index, __m128i __v1,\n \t\t\t   const int __scale)\n {\n@@ -10660,7 +10660,7 @@ _mm_mask_i32scatter_epi64 (long long *__addr, __mmask8 __mask,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_i64scatter_epi32 (int *__addr, __m256i __index,\n+_mm256_i64scatter_epi32 (void *__addr, __m256i __index,\n \t\t\t __m128i __v1, const int __scale)\n {\n   __builtin_ia32_scatterdiv8si (__addr, (__mmask8) 0xFF,\n@@ -10670,7 +10670,7 @@ _mm256_i64scatter_epi32 (int *__addr, __m256i __index,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_i64scatter_epi32 (int *__addr, __mmask8 __mask,\n+_mm256_mask_i64scatter_epi32 (void *__addr, __mmask8 __mask,\n \t\t\t      __m256i __index, __m128i __v1,\n \t\t\t      const int __scale)\n {\n@@ -10680,7 +10680,7 @@ _mm256_mask_i64scatter_epi32 (int *__addr, __mmask8 __mask,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_i64scatter_epi32 (int *__addr, __m128i __index,\n+_mm_i64scatter_epi32 (void *__addr, __m128i __index,\n \t\t      __m128i __v1, const int __scale)\n {\n   __builtin_ia32_scatterdiv4si (__addr, (__mmask8) 0xFF,\n@@ -10690,7 +10690,7 @@ _mm_i64scatter_epi32 (int *__addr, __m128i __index,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_i64scatter_epi32 (int *__addr, __mmask8 __mask,\n+_mm_mask_i64scatter_epi32 (void *__addr, __mmask8 __mask,\n \t\t\t   __m128i __index, __m128i __v1,\n \t\t\t   const int __scale)\n {\n@@ -10700,7 +10700,7 @@ _mm_mask_i64scatter_epi32 (int *__addr, __mmask8 __mask,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_i64scatter_epi64 (long long *__addr, __m256i __index,\n+_mm256_i64scatter_epi64 (void *__addr, __m256i __index,\n \t\t\t __m256i __v1, const int __scale)\n {\n   __builtin_ia32_scatterdiv4di (__addr, (__mmask8) 0xFF,\n@@ -10710,7 +10710,7 @@ _mm256_i64scatter_epi64 (long long *__addr, __m256i __index,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_i64scatter_epi64 (long long *__addr, __mmask8 __mask,\n+_mm256_mask_i64scatter_epi64 (void *__addr, __mmask8 __mask,\n \t\t\t      __m256i __index, __m256i __v1,\n \t\t\t      const int __scale)\n {\n@@ -10720,7 +10720,7 @@ _mm256_mask_i64scatter_epi64 (long long *__addr, __mmask8 __mask,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_i64scatter_epi64 (long long *__addr, __m128i __index,\n+_mm_i64scatter_epi64 (void *__addr, __m128i __index,\n \t\t      __m128i __v1, const int __scale)\n {\n   __builtin_ia32_scatterdiv2di (__addr, (__mmask8) 0xFF,\n@@ -10730,7 +10730,7 @@ _mm_i64scatter_epi64 (long long *__addr, __m128i __index,\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_i64scatter_epi64 (long long *__addr, __mmask8 __mask,\n+_mm_mask_i64scatter_epi64 (void *__addr, __mmask8 __mask,\n \t\t\t   __m128i __index, __m128i __v1,\n \t\t\t   const int __scale)\n {\n@@ -12885,257 +12885,257 @@ _mm_cmple_epi64_mask (__m128i __X, __m128i __Y)\n \n #define _mm256_mmask_i32gather_ps(V1OLD, MASK, INDEX, ADDR, SCALE)\t\\\n   (__m256) __builtin_ia32_gather3siv8sf ((__v8sf)(__m256)V1OLD,\t\t\\\n-\t\t\t\t\t (float const *)ADDR,\t\t\\\n+\t\t\t\t\t (void const *)ADDR,\t\t\\\n \t\t\t\t\t (__v8si)(__m256i)INDEX,\t\\\n \t\t\t\t\t (__mmask8)MASK, (int)SCALE)\n \n #define _mm_mmask_i32gather_ps(V1OLD, MASK, INDEX, ADDR, SCALE)\t\t\\\n   (__m128) __builtin_ia32_gather3siv4sf ((__v4sf)(__m128)V1OLD,\t\t\\\n-\t\t\t\t\t (float const *)ADDR,\t\t\\\n+\t\t\t\t\t (void const *)ADDR,\t\t\\\n \t\t\t\t\t (__v4si)(__m128i)INDEX,\t\\\n \t\t\t\t\t (__mmask8)MASK, (int)SCALE)\n \n #define _mm256_mmask_i32gather_pd(V1OLD, MASK, INDEX, ADDR, SCALE)\t\\\n   (__m256d) __builtin_ia32_gather3siv4df ((__v4df)(__m256d)V1OLD,\t\\\n-\t\t\t\t\t  (double const *)ADDR,\t\t\\\n+\t\t\t\t\t  (void const *)ADDR,\t\t\\\n \t\t\t\t\t  (__v4si)(__m128i)INDEX,\t\\\n \t\t\t\t\t  (__mmask8)MASK, (int)SCALE)\n \n #define _mm_mmask_i32gather_pd(V1OLD, MASK, INDEX, ADDR, SCALE)\t\t\\\n   (__m128d) __builtin_ia32_gather3siv2df ((__v2df)(__m128d)V1OLD,\t\\\n-\t\t\t\t\t  (double const *)ADDR,\t\t\\\n+\t\t\t\t\t  (void const *)ADDR,\t\t\\\n \t\t\t\t\t  (__v4si)(__m128i)INDEX,\t\\\n \t\t\t\t\t  (__mmask8)MASK, (int)SCALE)\n \n #define _mm256_mmask_i64gather_ps(V1OLD, MASK, INDEX, ADDR, SCALE)\t\\\n   (__m128) __builtin_ia32_gather3div8sf ((__v4sf)(__m128)V1OLD,\t\t\\\n-\t\t\t\t\t (float const *)ADDR,\t\t\\\n+\t\t\t\t\t (void const *)ADDR,\t\t\\\n \t\t\t\t\t (__v4di)(__m256i)INDEX,\t\\\n \t\t\t\t\t (__mmask8)MASK, (int)SCALE)\n \n #define _mm_mmask_i64gather_ps(V1OLD, MASK, INDEX, ADDR, SCALE)\t\t\\\n   (__m128) __builtin_ia32_gather3div4sf ((__v4sf)(__m128)V1OLD,\t\t\\\n-\t\t\t\t\t (float const *)ADDR,\t\t\\\n+\t\t\t\t\t (void const *)ADDR,\t\t\\\n \t\t\t\t\t (__v2di)(__m128i)INDEX,\t\\\n \t\t\t\t\t (__mmask8)MASK, (int)SCALE)\n \n #define _mm256_mmask_i64gather_pd(V1OLD, MASK, INDEX, ADDR, SCALE)\t\\\n   (__m256d) __builtin_ia32_gather3div4df ((__v4df)(__m256d)V1OLD,\t\\\n-\t\t\t\t\t  (double const *)ADDR,\t\t\\\n+\t\t\t\t\t  (void const *)ADDR,\t\t\\\n \t\t\t\t\t  (__v4di)(__m256i)INDEX,\t\\\n \t\t\t\t\t  (__mmask8)MASK, (int)SCALE)\n \n #define _mm_mmask_i64gather_pd(V1OLD, MASK, INDEX, ADDR, SCALE)\t\t\\\n   (__m128d) __builtin_ia32_gather3div2df ((__v2df)(__m128d)V1OLD,\t\\\n-\t\t\t\t\t  (double const *)ADDR,\t\t\\\n+\t\t\t\t\t  (void const *)ADDR,\t\t\\\n \t\t\t\t\t  (__v2di)(__m128i)INDEX,\t\\\n \t\t\t\t\t  (__mmask8)MASK, (int)SCALE)\n \n #define _mm256_mmask_i32gather_epi32(V1OLD, MASK, INDEX, ADDR, SCALE)\t\\\n   (__m256i) __builtin_ia32_gather3siv8si ((__v8si)(__m256i)V1OLD,\t\\\n-\t\t\t\t\t  (int const *)ADDR,\t\t\\\n+\t\t\t\t\t  (void const *)ADDR,\t\t\\\n \t\t\t\t\t  (__v8si)(__m256i)INDEX,\t\\\n \t\t\t\t\t  (__mmask8)MASK, (int)SCALE)\n \n #define _mm_mmask_i32gather_epi32(V1OLD, MASK, INDEX, ADDR, SCALE)\t\\\n   (__m128i) __builtin_ia32_gather3siv4si ((__v4si)(__m128i)V1OLD,\t\\\n-\t\t\t\t\t  (int const *)ADDR,\t\t\\\n+\t\t\t\t\t  (void const *)ADDR,\t\t\\\n \t\t\t\t\t  (__v4si)(__m128i)INDEX,\t\\\n \t\t\t\t\t  (__mmask8)MASK, (int)SCALE)\n \n #define _mm256_mmask_i32gather_epi64(V1OLD, MASK, INDEX, ADDR, SCALE)\t\\\n   (__m256i) __builtin_ia32_gather3siv4di ((__v4di)(__m256i)V1OLD,\t\\\n-\t\t\t\t\t  (long long const *)ADDR,\t\\\n+\t\t\t\t\t  (void const *)ADDR,\t\t\\\n \t\t\t\t\t  (__v4si)(__m128i)INDEX,\t\\\n \t\t\t\t\t  (__mmask8)MASK, (int)SCALE)\n \n #define _mm_mmask_i32gather_epi64(V1OLD, MASK, INDEX, ADDR, SCALE)\t\\\n   (__m128i) __builtin_ia32_gather3siv2di ((__v2di)(__m128i)V1OLD,\t\\\n-\t\t\t\t\t  (long long const *)ADDR,\t\\\n+\t\t\t\t\t  (void const *)ADDR,\t\t\\\n \t\t\t\t\t  (__v4si)(__m128i)INDEX,\t\\\n \t\t\t\t\t  (__mmask8)MASK, (int)SCALE)\n \n #define _mm256_mmask_i64gather_epi32(V1OLD, MASK, INDEX, ADDR, SCALE)\t\\\n   (__m128i) __builtin_ia32_gather3div8si ((__v4si)(__m128i)V1OLD,\t\\\n-\t\t\t\t\t  (int const *)ADDR,\t\t\\\n+\t\t\t\t\t  (void const *)ADDR,\t\t\\\n \t\t\t\t\t  (__v4di)(__m256i)INDEX,\t\\\n \t\t\t\t\t  (__mmask8)MASK, (int)SCALE)\n \n #define _mm_mmask_i64gather_epi32(V1OLD, MASK, INDEX, ADDR, SCALE)\t\\\n   (__m128i) __builtin_ia32_gather3div4si ((__v4si)(__m128i)V1OLD,\t\\\n-\t\t\t\t\t  (int const *)ADDR,\t\t\\\n+\t\t\t\t\t  (void const *)ADDR,\t\t\\\n \t\t\t\t\t  (__v2di)(__m128i)INDEX,\t\\\n \t\t\t\t\t  (__mmask8)MASK, (int)SCALE)\n \n #define _mm256_mmask_i64gather_epi64(V1OLD, MASK, INDEX, ADDR, SCALE)\t\\\n   (__m256i) __builtin_ia32_gather3div4di ((__v4di)(__m256i)V1OLD,\t\\\n-\t\t\t\t\t  (long long const *)ADDR,\t\\\n+\t\t\t\t\t  (void const *)ADDR,\t\t\\\n \t\t\t\t\t  (__v4di)(__m256i)INDEX,\t\\\n \t\t\t\t\t  (__mmask8)MASK, (int)SCALE)\n \n #define _mm_mmask_i64gather_epi64(V1OLD, MASK, INDEX, ADDR, SCALE)\t\\\n   (__m128i) __builtin_ia32_gather3div2di ((__v2di)(__m128i)V1OLD,\t\\\n-\t\t\t\t\t  (long long const *)ADDR,\t\\\n+\t\t\t\t\t  (void const *)ADDR,\t\t\\\n \t\t\t\t\t  (__v2di)(__m128i)INDEX,\t\\\n \t\t\t\t\t  (__mmask8)MASK, (int)SCALE)\n \n #define _mm256_i32scatter_ps(ADDR, INDEX, V1, SCALE)\t\t\t\\\n-  __builtin_ia32_scattersiv8sf ((float *)ADDR, (__mmask8)0xFF,\t\t\\\n+  __builtin_ia32_scattersiv8sf ((void *)ADDR, (__mmask8)0xFF,\t\t\\\n \t\t\t\t(__v8si)(__m256i)INDEX,\t\t\t\\\n \t\t\t\t(__v8sf)(__m256)V1, (int)SCALE)\n \n #define _mm256_mask_i32scatter_ps(ADDR, MASK, INDEX, V1, SCALE)\t\t\\\n-  __builtin_ia32_scattersiv8sf ((float *)ADDR, (__mmask8)MASK,\t\t\\\n+  __builtin_ia32_scattersiv8sf ((void *)ADDR, (__mmask8)MASK,\t\t\\\n \t\t\t\t(__v8si)(__m256i)INDEX,\t\t\t\\\n \t\t\t\t(__v8sf)(__m256)V1, (int)SCALE)\n \n #define _mm_i32scatter_ps(ADDR, INDEX, V1, SCALE)\t\t\t\\\n-  __builtin_ia32_scattersiv4sf ((float *)ADDR, (__mmask8)0xFF,\t\t\\\n+  __builtin_ia32_scattersiv4sf ((void *)ADDR, (__mmask8)0xFF,\t\t\\\n \t\t\t\t(__v4si)(__m128i)INDEX,\t\t\t\\\n \t\t\t\t(__v4sf)(__m128)V1, (int)SCALE)\n \n #define _mm_mask_i32scatter_ps(ADDR, MASK, INDEX, V1, SCALE)\t\t\\\n-  __builtin_ia32_scattersiv4sf ((float *)ADDR, (__mmask8)MASK,\t\t\\\n+  __builtin_ia32_scattersiv4sf ((void *)ADDR, (__mmask8)MASK,\t\t\\\n \t\t\t\t(__v4si)(__m128i)INDEX,\t\t\t\\\n \t\t\t\t(__v4sf)(__m128)V1, (int)SCALE)\n \n #define _mm256_i32scatter_pd(ADDR, INDEX, V1, SCALE)\t\t\t\\\n-  __builtin_ia32_scattersiv4df ((double *)ADDR, (__mmask8)0xFF,\t\t\\\n+  __builtin_ia32_scattersiv4df ((void *)ADDR, (__mmask8)0xFF,\t\t\\\n \t\t\t\t(__v4si)(__m128i)INDEX,\t\t\t\\\n \t\t\t\t(__v4df)(__m256d)V1, (int)SCALE)\n \n #define _mm256_mask_i32scatter_pd(ADDR, MASK, INDEX, V1, SCALE)\t\t\\\n-  __builtin_ia32_scattersiv4df ((double *)ADDR, (__mmask8)MASK,\t\t\\\n+  __builtin_ia32_scattersiv4df ((void *)ADDR, (__mmask8)MASK,\t\t\\\n \t\t\t\t(__v4si)(__m128i)INDEX,\t\t\t\\\n \t\t\t\t(__v4df)(__m256d)V1, (int)SCALE)\n \n #define _mm_i32scatter_pd(ADDR, INDEX, V1, SCALE)\t\t\t\\\n-  __builtin_ia32_scattersiv2df ((double *)ADDR, (__mmask8)0xFF,\t\t\\\n+  __builtin_ia32_scattersiv2df ((void *)ADDR, (__mmask8)0xFF,\t\t\\\n \t\t\t\t(__v4si)(__m128i)INDEX,\t\t\t\\\n \t\t\t\t(__v2df)(__m128d)V1, (int)SCALE)\n \n #define _mm_mask_i32scatter_pd(ADDR, MASK, INDEX, V1, SCALE)\t\t\\\n-  __builtin_ia32_scattersiv2df ((double *)ADDR, (__mmask8)MASK,\t\t\\\n+  __builtin_ia32_scattersiv2df ((void *)ADDR, (__mmask8)MASK,\t\t\\\n \t\t\t\t(__v4si)(__m128i)INDEX,\t\t\t\\\n \t\t\t\t(__v2df)(__m128d)V1, (int)SCALE)\n \n #define _mm256_i64scatter_ps(ADDR, INDEX, V1, SCALE)\t\t\t\\\n-  __builtin_ia32_scatterdiv8sf ((float *)ADDR, (__mmask8)0xFF,\t\t\\\n+  __builtin_ia32_scatterdiv8sf ((void *)ADDR, (__mmask8)0xFF,\t\t\\\n \t\t\t\t(__v4di)(__m256i)INDEX,\t\t\t\\\n \t\t\t\t(__v4sf)(__m128)V1, (int)SCALE)\n \n #define _mm256_mask_i64scatter_ps(ADDR, MASK, INDEX, V1, SCALE)\t\t\\\n-  __builtin_ia32_scatterdiv8sf ((float *)ADDR, (__mmask8)MASK,\t\t\\\n+  __builtin_ia32_scatterdiv8sf ((void *)ADDR, (__mmask8)MASK,\t\t\\\n \t\t\t\t(__v4di)(__m256i)INDEX,\t\t\t\\\n \t\t\t\t(__v4sf)(__m128)V1, (int)SCALE)\n \n #define _mm_i64scatter_ps(ADDR, INDEX, V1, SCALE)\t\t\t\\\n-  __builtin_ia32_scatterdiv4sf ((float *)ADDR, (__mmask8)0xFF,\t\t\\\n+  __builtin_ia32_scatterdiv4sf ((void *)ADDR, (__mmask8)0xFF,\t\t\\\n \t\t\t\t(__v2di)(__m128i)INDEX,\t\t\t\\\n \t\t\t\t(__v4sf)(__m128)V1, (int)SCALE)\n \n #define _mm_mask_i64scatter_ps(ADDR, MASK, INDEX, V1, SCALE)\t\t\\\n-  __builtin_ia32_scatterdiv4sf ((float *)ADDR, (__mmask8)MASK,\t\t\\\n+  __builtin_ia32_scatterdiv4sf ((void *)ADDR, (__mmask8)MASK,\t\t\\\n \t\t\t\t(__v2di)(__m128i)INDEX,\t\t\t\\\n \t\t\t\t(__v4sf)(__m128)V1, (int)SCALE)\n \n #define _mm256_i64scatter_pd(ADDR, INDEX, V1, SCALE)\t\t\t\\\n-  __builtin_ia32_scatterdiv4df ((double *)ADDR, (__mmask8)0xFF,\t\t\\\n+  __builtin_ia32_scatterdiv4df ((void *)ADDR, (__mmask8)0xFF,\t\t\\\n \t\t\t\t(__v4di)(__m256i)INDEX,\t\t\t\\\n \t\t\t\t(__v4df)(__m256d)V1, (int)SCALE)\n \n #define _mm256_mask_i64scatter_pd(ADDR, MASK, INDEX, V1, SCALE)\t\t\\\n-  __builtin_ia32_scatterdiv4df ((double *)ADDR, (__mmask8)MASK,\t\t\\\n+  __builtin_ia32_scatterdiv4df ((void *)ADDR, (__mmask8)MASK,\t\t\\\n \t\t\t\t(__v4di)(__m256i)INDEX,\t\t\t\\\n \t\t\t\t(__v4df)(__m256d)V1, (int)SCALE)\n \n #define _mm_i64scatter_pd(ADDR, INDEX, V1, SCALE)\t\t\t\\\n-  __builtin_ia32_scatterdiv2df ((double *)ADDR, (__mmask8)0xFF,\t\t\\\n+  __builtin_ia32_scatterdiv2df ((void *)ADDR, (__mmask8)0xFF,\t\t\\\n \t\t\t\t(__v2di)(__m128i)INDEX,\t\t\t\\\n \t\t\t\t(__v2df)(__m128d)V1, (int)SCALE)\n \n #define _mm_mask_i64scatter_pd(ADDR, MASK, INDEX, V1, SCALE)\t\t\\\n-  __builtin_ia32_scatterdiv2df ((double *)ADDR, (__mmask8)MASK,\t\t\\\n+  __builtin_ia32_scatterdiv2df ((void *)ADDR, (__mmask8)MASK,\t\t\\\n \t\t\t\t(__v2di)(__m128i)INDEX,\t\t\t\\\n \t\t\t\t(__v2df)(__m128d)V1, (int)SCALE)\n \n #define _mm256_i32scatter_epi32(ADDR, INDEX, V1, SCALE)\t\t\t\\\n-  __builtin_ia32_scattersiv8si ((int *)ADDR, (__mmask8)0xFF,\t\t\\\n+  __builtin_ia32_scattersiv8si ((void *)ADDR, (__mmask8)0xFF,\t\t\\\n \t\t\t\t(__v8si)(__m256i)INDEX,\t\t\t\\\n \t\t\t\t(__v8si)(__m256i)V1, (int)SCALE)\n \n #define _mm256_mask_i32scatter_epi32(ADDR, MASK, INDEX, V1, SCALE)\t\\\n-  __builtin_ia32_scattersiv8si ((int *)ADDR, (__mmask8)MASK,\t\t\\\n+  __builtin_ia32_scattersiv8si ((void *)ADDR, (__mmask8)MASK,\t\t\\\n \t\t\t\t(__v8si)(__m256i)INDEX,\t\t\t\\\n \t\t\t\t(__v8si)(__m256i)V1, (int)SCALE)\n \n #define _mm_i32scatter_epi32(ADDR, INDEX, V1, SCALE)\t\t\t\\\n-  __builtin_ia32_scattersiv4si ((int *)ADDR, (__mmask8)0xFF,\t\t\\\n+  __builtin_ia32_scattersiv4si ((void *)ADDR, (__mmask8)0xFF,\t\t\\\n \t\t\t\t(__v4si)(__m128i)INDEX,\t\t\t\\\n \t\t\t\t(__v4si)(__m128i)V1, (int)SCALE)\n \n #define _mm_mask_i32scatter_epi32(ADDR, MASK, INDEX, V1, SCALE)\t\t\\\n-  __builtin_ia32_scattersiv4si ((int *)ADDR, (__mmask8)MASK,\t\t\\\n+  __builtin_ia32_scattersiv4si ((void *)ADDR, (__mmask8)MASK,\t\t\\\n \t\t\t\t(__v4si)(__m128i)INDEX,\t\t\t\\\n \t\t\t\t(__v4si)(__m128i)V1, (int)SCALE)\n \n #define _mm256_i32scatter_epi64(ADDR, INDEX, V1, SCALE)\t\t\t\\\n-  __builtin_ia32_scattersiv4di ((long long *)ADDR, (__mmask8)0xFF,\t\\\n+  __builtin_ia32_scattersiv4di ((void *)ADDR, (__mmask8)0xFF,\t\t\\\n \t\t\t\t(__v4si)(__m128i)INDEX,\t\t\t\\\n \t\t\t\t(__v4di)(__m256i)V1, (int)SCALE)\n \n #define _mm256_mask_i32scatter_epi64(ADDR, MASK, INDEX, V1, SCALE)\t\\\n-  __builtin_ia32_scattersiv4di ((long long *)ADDR, (__mmask8)MASK,\t\\\n+  __builtin_ia32_scattersiv4di ((void *)ADDR, (__mmask8)MASK,\t\t\\\n \t\t\t\t(__v4si)(__m128i)INDEX,\t\t\t\\\n \t\t\t\t(__v4di)(__m256i)V1, (int)SCALE)\n \n #define _mm_i32scatter_epi64(ADDR, INDEX, V1, SCALE)\t\t\t\\\n-  __builtin_ia32_scattersiv2di ((long long *)ADDR, (__mmask8)0xFF,\t\\\n+  __builtin_ia32_scattersiv2di ((void *)ADDR, (__mmask8)0xFF,\t\t\\\n \t\t\t\t(__v4si)(__m128i)INDEX,\t\t\t\\\n \t\t\t\t(__v2di)(__m128i)V1, (int)SCALE)\n \n #define _mm_mask_i32scatter_epi64(ADDR, MASK, INDEX, V1, SCALE)\t\t\\\n-  __builtin_ia32_scattersiv2di ((long long *)ADDR, (__mmask8)MASK,\t\\\n+  __builtin_ia32_scattersiv2di ((void *)ADDR, (__mmask8)MASK,\t\t\\\n \t\t\t\t(__v4si)(__m128i)INDEX,\t\t\t\\\n \t\t\t\t(__v2di)(__m128i)V1, (int)SCALE)\n \n #define _mm256_i64scatter_epi32(ADDR, INDEX, V1, SCALE)\t\t\t\\\n-  __builtin_ia32_scatterdiv8si ((int *)ADDR, (__mmask8)0xFF,\t\t\\\n+  __builtin_ia32_scatterdiv8si ((void *)ADDR, (__mmask8)0xFF,\t\t\\\n \t\t\t\t(__v4di)(__m256i)INDEX,\t\t\t\\\n \t\t\t\t(__v4si)(__m128i)V1, (int)SCALE)\n \n #define _mm256_mask_i64scatter_epi32(ADDR, MASK, INDEX, V1, SCALE)\t\\\n-  __builtin_ia32_scatterdiv8si ((int *)ADDR, (__mmask8)MASK,\t\t\\\n+  __builtin_ia32_scatterdiv8si ((void *)ADDR, (__mmask8)MASK,\t\t\\\n \t\t\t\t(__v4di)(__m256i)INDEX,\t\t\t\\\n \t\t\t\t(__v4si)(__m128i)V1, (int)SCALE)\n \n #define _mm_i64scatter_epi32(ADDR, INDEX, V1, SCALE)\t\t\t\\\n-  __builtin_ia32_scatterdiv4si ((int *)ADDR, (__mmask8)0xFF,\t\t\\\n+  __builtin_ia32_scatterdiv4si ((void *)ADDR, (__mmask8)0xFF,\t\t\\\n \t\t\t\t(__v2di)(__m128i)INDEX,\t\t\t\\\n \t\t\t\t(__v4si)(__m128i)V1, (int)SCALE)\n \n #define _mm_mask_i64scatter_epi32(ADDR, MASK, INDEX, V1, SCALE)\t\t\\\n-  __builtin_ia32_scatterdiv4si ((int *)ADDR, (__mmask8)MASK,\t\t\\\n+  __builtin_ia32_scatterdiv4si ((void *)ADDR, (__mmask8)MASK,\t\t\\\n \t\t\t\t(__v2di)(__m128i)INDEX,\t\t\t\\\n \t\t\t\t(__v4si)(__m128i)V1, (int)SCALE)\n \n #define _mm256_i64scatter_epi64(ADDR, INDEX, V1, SCALE)\t\t\t\\\n-  __builtin_ia32_scatterdiv4di ((long long *)ADDR, (__mmask8)0xFF,\t\\\n+  __builtin_ia32_scatterdiv4di ((void *)ADDR, (__mmask8)0xFF,\t\t\\\n \t\t\t\t(__v4di)(__m256i)INDEX,\t\t\t\\\n \t\t\t\t(__v4di)(__m256i)V1, (int)SCALE)\n \n #define _mm256_mask_i64scatter_epi64(ADDR, MASK, INDEX, V1, SCALE)\t\\\n-  __builtin_ia32_scatterdiv4di ((long long *)ADDR, (__mmask8)MASK,\t\\\n+  __builtin_ia32_scatterdiv4di ((void *)ADDR, (__mmask8)MASK,\t\t\\\n \t\t\t\t(__v4di)(__m256i)INDEX,\t\t\t\\\n \t\t\t\t(__v4di)(__m256i)V1, (int)SCALE)\n \n #define _mm_i64scatter_epi64(ADDR, INDEX, V1, SCALE)\t\t\t\\\n-  __builtin_ia32_scatterdiv2di ((long long *)ADDR, (__mmask8)0xFF,\t\\\n+  __builtin_ia32_scatterdiv2di ((void *)ADDR, (__mmask8)0xFF,\t\t\\\n \t\t\t\t(__v2di)(__m128i)INDEX,\t\t\t\\\n \t\t\t\t(__v2di)(__m128i)V1, (int)SCALE)\n \n #define _mm_mask_i64scatter_epi64(ADDR, MASK, INDEX, V1, SCALE)\t\t\\\n-  __builtin_ia32_scatterdiv2di ((long long *)ADDR, (__mmask8)MASK,\t\\\n+  __builtin_ia32_scatterdiv2di ((void *)ADDR, (__mmask8)MASK,\t\t\\\n \t\t\t\t(__v2di)(__m128i)INDEX,\t\t\t\\\n \t\t\t\t(__v2di)(__m128i)V1, (int)SCALE)\n "}, {"sha": "f287ca01197a2ac33a96e24671553433dfc2e785", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e171d5408feafcd56b97c831a99d14e544b98af/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e171d5408feafcd56b97c831a99d14e544b98af/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=0e171d5408feafcd56b97c831a99d14e544b98af", "patch": "@@ -1036,72 +1036,72 @@ DEF_FUNCTION_TYPE (V4SI, V4SI, PCINT, V2DI, V4SI, INT)\n DEF_FUNCTION_TYPE (V4SI, V4SI, PCINT, V4DI, V4SI, INT)\n DEF_FUNCTION_TYPE (V8SI, V8SI, PCINT, V4DI, V8SI, INT)\n \n-DEF_FUNCTION_TYPE (V16SF, V16SF, PCFLOAT, V16SI, HI, INT)\n DEF_FUNCTION_TYPE (V16SF, V16SF, PCFLOAT, V8DI, HI, INT)\n-DEF_FUNCTION_TYPE (V8DF, V8DF, PCDOUBLE, V8SI, QI, INT)\n DEF_FUNCTION_TYPE (V8DF, V8DF, PCDOUBLE, V16SI, QI, INT)\n-DEF_FUNCTION_TYPE (V8SF, V8SF, PCFLOAT, V8DI, QI, INT)\n-DEF_FUNCTION_TYPE (V8DF, V8DF, PCDOUBLE, V8DI, QI, INT)\n-DEF_FUNCTION_TYPE (V16SI, V16SI, PCINT, V16SI, HI, INT)\n DEF_FUNCTION_TYPE (V16SI, V16SI, PCINT, V8DI, HI, INT)\n-DEF_FUNCTION_TYPE (V8DI, V8DI, PCINT64, V8SI, QI, INT)\n DEF_FUNCTION_TYPE (V8DI, V8DI, PCINT64, V16SI, QI, INT)\n-DEF_FUNCTION_TYPE (V8SI, V8SI, PCINT, V8DI, QI, INT)\n-DEF_FUNCTION_TYPE (V8DI, V8DI, PCINT64, V8DI, QI, INT)\n-DEF_FUNCTION_TYPE (V2DF, V2DF, PCDOUBLE, V4SI, QI, INT)\n-DEF_FUNCTION_TYPE (V4DF, V4DF, PCDOUBLE, V4SI, QI, INT)\n DEF_FUNCTION_TYPE (V4DF, V4DF, PCDOUBLE, V8SI, QI, INT)\n-DEF_FUNCTION_TYPE (V2DF, V2DF, PCDOUBLE, V2DI, QI, INT)\n-DEF_FUNCTION_TYPE (V4DF, V4DF, PCDOUBLE, V4DI, QI, INT)\n-DEF_FUNCTION_TYPE (V4SF, V4SF, PCFLOAT, V4SI, QI, INT)\n-DEF_FUNCTION_TYPE (V8SF, V8SF, PCFLOAT, V8SI, QI, INT)\n-DEF_FUNCTION_TYPE (V4SF, V4SF, PCFLOAT, V2DI, QI, INT)\n-DEF_FUNCTION_TYPE (V4SF, V4SF, PCFLOAT, V4DI, QI, INT)\n DEF_FUNCTION_TYPE (V8SF, V8SF, PCFLOAT, V4DI, QI, INT)\n-DEF_FUNCTION_TYPE (V2DI, V2DI, PCINT64, V4SI, QI, INT)\n-DEF_FUNCTION_TYPE (V4DI, V4DI, PCINT64, V4SI, QI, INT)\n DEF_FUNCTION_TYPE (V4DI, V4DI, PCINT64, V8SI, QI, INT)\n-DEF_FUNCTION_TYPE (V2DI, V2DI, PCINT64, V2DI, QI, INT)\n-DEF_FUNCTION_TYPE (V4DI, V4DI, PCINT64, V4DI, QI, INT)\n-DEF_FUNCTION_TYPE (V4SI, V4SI, PCINT, V4SI, QI, INT)\n-DEF_FUNCTION_TYPE (V8SI, V8SI, PCINT, V8SI, QI, INT)\n-DEF_FUNCTION_TYPE (V4SI, V4SI, PCINT, V2DI, QI, INT)\n-DEF_FUNCTION_TYPE (V4SI, V4SI, PCINT, V4DI, QI, INT)\n DEF_FUNCTION_TYPE (V8SI, V8SI, PCINT, V4DI, QI, INT)\n \n-DEF_FUNCTION_TYPE (VOID, PFLOAT, HI, V16SI, V16SF, INT)\n-DEF_FUNCTION_TYPE (VOID, PFLOAT, QI, V8SI, V8SF, INT)\n-DEF_FUNCTION_TYPE (VOID, PFLOAT, QI, V4SI, V4SF, INT)\n-DEF_FUNCTION_TYPE (VOID, PDOUBLE, QI, V8SI, V8DF, INT)\n-DEF_FUNCTION_TYPE (VOID, PDOUBLE, QI, V4SI, V4DF, INT)\n-DEF_FUNCTION_TYPE (VOID, PDOUBLE, QI, V4SI, V2DF, INT)\n-DEF_FUNCTION_TYPE (VOID, PFLOAT, QI, V8DI, V8SF, INT)\n-DEF_FUNCTION_TYPE (VOID, PFLOAT, QI, V4DI, V4SF, INT)\n-DEF_FUNCTION_TYPE (VOID, PFLOAT, QI, V2DI, V4SF, INT)\n-DEF_FUNCTION_TYPE (VOID, PDOUBLE, QI, V8DI, V8DF, INT)\n-DEF_FUNCTION_TYPE (VOID, PDOUBLE, QI, V4DI, V4DF, INT)\n-DEF_FUNCTION_TYPE (VOID, PDOUBLE, QI, V2DI, V2DF, INT)\n-DEF_FUNCTION_TYPE (VOID, PINT, HI, V16SI, V16SI, INT)\n-DEF_FUNCTION_TYPE (VOID, PINT, QI, V8SI, V8SI, INT)\n-DEF_FUNCTION_TYPE (VOID, PINT, QI, V4SI, V4SI, INT)\n-DEF_FUNCTION_TYPE (VOID, PLONGLONG, QI, V8SI, V8DI, INT)\n-DEF_FUNCTION_TYPE (VOID, PLONGLONG, QI, V4SI, V4DI, INT)\n-DEF_FUNCTION_TYPE (VOID, PLONGLONG, QI, V4SI, V2DI, INT)\n-DEF_FUNCTION_TYPE (VOID, PINT, QI, V8DI, V8SI, INT)\n-DEF_FUNCTION_TYPE (VOID, PINT, QI, V4DI, V4SI, INT)\n-DEF_FUNCTION_TYPE (VOID, PINT, QI, V2DI, V4SI, INT)\n-DEF_FUNCTION_TYPE (VOID, PLONGLONG, QI, V8DI, V8DI, INT)\n DEF_FUNCTION_TYPE (VOID, PFLOAT, HI, V8DI, V16SF, INT)\n DEF_FUNCTION_TYPE (VOID, PDOUBLE, QI, V16SI, V8DF, INT)\n DEF_FUNCTION_TYPE (VOID, PINT, HI, V8DI, V16SI, INT)\n DEF_FUNCTION_TYPE (VOID, PLONGLONG, QI, V16SI, V8DI, INT)\n \n-DEF_FUNCTION_TYPE (VOID, QI, V8SI, PCINT64, INT, INT)\n-DEF_FUNCTION_TYPE (VOID, PLONGLONG, QI, V4DI, V4DI, INT)\n-DEF_FUNCTION_TYPE (VOID, PLONGLONG, QI, V2DI, V2DI, INT)\n-DEF_FUNCTION_TYPE (VOID, HI, V16SI, PCINT, INT, INT)\n-DEF_FUNCTION_TYPE (VOID, QI, V8DI, PCINT64, INT, INT)\n-DEF_FUNCTION_TYPE (VOID, QI, V8DI, PCINT, INT, INT)\n+\n+DEF_FUNCTION_TYPE (V16SF, V16SF, PCVOID, V16SI, HI, INT)\n+DEF_FUNCTION_TYPE (V8DF, V8DF, PCVOID, V8SI, QI, INT)\n+DEF_FUNCTION_TYPE (V8SF, V8SF, PCVOID, V8DI, QI, INT)\n+DEF_FUNCTION_TYPE (V8DF, V8DF, PCVOID, V8DI, QI, INT)\n+DEF_FUNCTION_TYPE (V16SI, V16SI, PCVOID, V16SI, HI, INT)\n+DEF_FUNCTION_TYPE (V8DI, V8DI, PCVOID, V8SI, QI, INT)\n+DEF_FUNCTION_TYPE (V8SI, V8SI, PCVOID, V8DI, QI, INT)\n+DEF_FUNCTION_TYPE (V8DI, V8DI, PCVOID, V8DI, QI, INT)\n+DEF_FUNCTION_TYPE (VOID, PVOID, HI, V16SI, V16SF, INT)\n+DEF_FUNCTION_TYPE (VOID, PVOID, QI, V8SI, V8DF, INT)\n+DEF_FUNCTION_TYPE (VOID, PVOID, QI, V8DI, V8SF, INT)\n+DEF_FUNCTION_TYPE (VOID, PVOID, QI, V8DI, V8DF, INT)\n+DEF_FUNCTION_TYPE (VOID, PVOID, HI, V16SI, V16SI, INT)\n+DEF_FUNCTION_TYPE (VOID, PVOID, QI, V8SI, V8DI, INT)\n+DEF_FUNCTION_TYPE (VOID, PVOID, QI, V8DI, V8SI, INT)\n+DEF_FUNCTION_TYPE (VOID, PVOID, QI, V8DI, V8DI, INT)\n+DEF_FUNCTION_TYPE (V2DF, V2DF, PCVOID, V4SI, QI, INT)\n+DEF_FUNCTION_TYPE (V4DF, V4DF, PCVOID, V4SI, QI, INT)\n+DEF_FUNCTION_TYPE (V2DF, V2DF, PCVOID, V2DI, QI, INT)\n+DEF_FUNCTION_TYPE (V4DF, V4DF, PCVOID, V4DI, QI, INT)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, PCVOID, V4SI, QI, INT)\n+DEF_FUNCTION_TYPE (V8SF, V8SF, PCVOID, V8SI, QI, INT)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, PCVOID, V2DI, QI, INT)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, PCVOID, V4DI, QI, INT)\n+DEF_FUNCTION_TYPE (V2DI, V2DI, PCVOID, V4SI, QI, INT)\n+DEF_FUNCTION_TYPE (V4DI, V4DI, PCVOID, V4SI, QI, INT)\n+DEF_FUNCTION_TYPE (V2DI, V2DI, PCVOID, V2DI, QI, INT)\n+DEF_FUNCTION_TYPE (V4DI, V4DI, PCVOID, V4DI, QI, INT)\n+DEF_FUNCTION_TYPE (V4SI, V4SI, PCVOID, V4SI, QI, INT)\n+DEF_FUNCTION_TYPE (V8SI, V8SI, PCVOID, V8SI, QI, INT)\n+DEF_FUNCTION_TYPE (V4SI, V4SI, PCVOID, V2DI, QI, INT)\n+DEF_FUNCTION_TYPE (V4SI, V4SI, PCVOID, V4DI, QI, INT)\n+DEF_FUNCTION_TYPE (VOID, PVOID, QI, V8SI, V8SF, INT)\n+DEF_FUNCTION_TYPE (VOID, PVOID, QI, V4SI, V4SF, INT)\n+DEF_FUNCTION_TYPE (VOID, PVOID, QI, V4SI, V4DF, INT)\n+DEF_FUNCTION_TYPE (VOID, PVOID, QI, V4SI, V2DF, INT)\n+DEF_FUNCTION_TYPE (VOID, PVOID, QI, V4DI, V4SF, INT)\n+DEF_FUNCTION_TYPE (VOID, PVOID, QI, V2DI, V4SF, INT)\n+DEF_FUNCTION_TYPE (VOID, PVOID, QI, V4DI, V4DF, INT)\n+DEF_FUNCTION_TYPE (VOID, PVOID, QI, V2DI, V2DF, INT)\n+DEF_FUNCTION_TYPE (VOID, PVOID, QI, V8SI, V8SI, INT)\n+DEF_FUNCTION_TYPE (VOID, PVOID, QI, V4SI, V4SI, INT)\n+DEF_FUNCTION_TYPE (VOID, PVOID, QI, V4SI, V4DI, INT)\n+DEF_FUNCTION_TYPE (VOID, PVOID, QI, V4SI, V2DI, INT)\n+DEF_FUNCTION_TYPE (VOID, PVOID, QI, V4DI, V4SI, INT)\n+DEF_FUNCTION_TYPE (VOID, PVOID, QI, V2DI, V4SI, INT)\n+DEF_FUNCTION_TYPE (VOID, PVOID, QI, V4DI, V4DI, INT)\n+DEF_FUNCTION_TYPE (VOID, PVOID, QI, V2DI, V2DI, INT)\n+DEF_FUNCTION_TYPE (VOID, QI, V8SI, PCVOID, INT, INT)\n+DEF_FUNCTION_TYPE (VOID, HI, V16SI, PCVOID, INT, INT)\n+DEF_FUNCTION_TYPE (VOID, QI, V8DI, PCVOID, INT, INT)\n \n DEF_FUNCTION_TYPE_ALIAS (V2DF_FTYPE_V2DF, ROUND)\n DEF_FUNCTION_TYPE_ALIAS (V4DF_FTYPE_V4DF, ROUND)"}, {"sha": "eccb5d2cb22ee9e920c68de6492575671fbd12c5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e171d5408feafcd56b97c831a99d14e544b98af/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e171d5408feafcd56b97c831a99d14e544b98af/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0e171d5408feafcd56b97c831a99d14e544b98af", "patch": "@@ -31671,35 +31671,35 @@ ix86_init_mmx_sse_builtins (void)\n \n   /* AVX512F */\n   def_builtin (OPTION_MASK_ISA_AVX512F, \"__builtin_ia32_gathersiv16sf\",\n-\t       V16SF_FTYPE_V16SF_PCFLOAT_V16SI_HI_INT,\n+\t       V16SF_FTYPE_V16SF_PCVOID_V16SI_HI_INT,\n \t       IX86_BUILTIN_GATHER3SIV16SF);\n \n   def_builtin (OPTION_MASK_ISA_AVX512F, \"__builtin_ia32_gathersiv8df\",\n-\t       V8DF_FTYPE_V8DF_PCDOUBLE_V8SI_QI_INT,\n+\t       V8DF_FTYPE_V8DF_PCVOID_V8SI_QI_INT,\n \t       IX86_BUILTIN_GATHER3SIV8DF);\n \n   def_builtin (OPTION_MASK_ISA_AVX512F, \"__builtin_ia32_gatherdiv16sf\",\n-\t       V8SF_FTYPE_V8SF_PCFLOAT_V8DI_QI_INT,\n+\t       V8SF_FTYPE_V8SF_PCVOID_V8DI_QI_INT,\n \t       IX86_BUILTIN_GATHER3DIV16SF);\n \n   def_builtin (OPTION_MASK_ISA_AVX512F, \"__builtin_ia32_gatherdiv8df\",\n-\t       V8DF_FTYPE_V8DF_PCDOUBLE_V8DI_QI_INT,\n+\t       V8DF_FTYPE_V8DF_PCVOID_V8DI_QI_INT,\n \t       IX86_BUILTIN_GATHER3DIV8DF);\n \n   def_builtin (OPTION_MASK_ISA_AVX512F, \"__builtin_ia32_gathersiv16si\",\n-\t       V16SI_FTYPE_V16SI_PCINT_V16SI_HI_INT,\n+\t       V16SI_FTYPE_V16SI_PCVOID_V16SI_HI_INT,\n \t       IX86_BUILTIN_GATHER3SIV16SI);\n \n   def_builtin (OPTION_MASK_ISA_AVX512F, \"__builtin_ia32_gathersiv8di\",\n-\t       V8DI_FTYPE_V8DI_PCINT64_V8SI_QI_INT,\n+\t       V8DI_FTYPE_V8DI_PCVOID_V8SI_QI_INT,\n \t       IX86_BUILTIN_GATHER3SIV8DI);\n \n   def_builtin (OPTION_MASK_ISA_AVX512F, \"__builtin_ia32_gatherdiv16si\",\n-\t       V8SI_FTYPE_V8SI_PCINT_V8DI_QI_INT,\n+\t       V8SI_FTYPE_V8SI_PCVOID_V8DI_QI_INT,\n \t       IX86_BUILTIN_GATHER3DIV16SI);\n \n   def_builtin (OPTION_MASK_ISA_AVX512F, \"__builtin_ia32_gatherdiv8di\",\n-\t       V8DI_FTYPE_V8DI_PCINT64_V8DI_QI_INT,\n+\t       V8DI_FTYPE_V8DI_PCVOID_V8DI_QI_INT,\n \t       IX86_BUILTIN_GATHER3DIV8DI);\n \n   def_builtin (OPTION_MASK_ISA_AVX512F, \"__builtin_ia32_gatheraltsiv8df \",\n@@ -31719,100 +31719,100 @@ ix86_init_mmx_sse_builtins (void)\n \t       IX86_BUILTIN_GATHER3ALTDIV16SI);\n \n   def_builtin (OPTION_MASK_ISA_AVX512F, \"__builtin_ia32_scattersiv16sf\",\n-\t       VOID_FTYPE_PFLOAT_HI_V16SI_V16SF_INT,\n+\t       VOID_FTYPE_PVOID_HI_V16SI_V16SF_INT,\n \t       IX86_BUILTIN_SCATTERSIV16SF);\n \n   def_builtin (OPTION_MASK_ISA_AVX512F, \"__builtin_ia32_scattersiv8df\",\n-\t       VOID_FTYPE_PDOUBLE_QI_V8SI_V8DF_INT,\n+\t       VOID_FTYPE_PVOID_QI_V8SI_V8DF_INT,\n \t       IX86_BUILTIN_SCATTERSIV8DF);\n \n   def_builtin (OPTION_MASK_ISA_AVX512F, \"__builtin_ia32_scatterdiv16sf\",\n-\t       VOID_FTYPE_PFLOAT_QI_V8DI_V8SF_INT,\n+\t       VOID_FTYPE_PVOID_QI_V8DI_V8SF_INT,\n \t       IX86_BUILTIN_SCATTERDIV16SF);\n \n   def_builtin (OPTION_MASK_ISA_AVX512F, \"__builtin_ia32_scatterdiv8df\",\n-\t       VOID_FTYPE_PDOUBLE_QI_V8DI_V8DF_INT,\n+\t       VOID_FTYPE_PVOID_QI_V8DI_V8DF_INT,\n \t       IX86_BUILTIN_SCATTERDIV8DF);\n \n   def_builtin (OPTION_MASK_ISA_AVX512F, \"__builtin_ia32_scattersiv16si\",\n-\t       VOID_FTYPE_PINT_HI_V16SI_V16SI_INT,\n+\t       VOID_FTYPE_PVOID_HI_V16SI_V16SI_INT,\n \t       IX86_BUILTIN_SCATTERSIV16SI);\n \n   def_builtin (OPTION_MASK_ISA_AVX512F, \"__builtin_ia32_scattersiv8di\",\n-\t       VOID_FTYPE_PLONGLONG_QI_V8SI_V8DI_INT,\n+\t       VOID_FTYPE_PVOID_QI_V8SI_V8DI_INT,\n \t       IX86_BUILTIN_SCATTERSIV8DI);\n \n   def_builtin (OPTION_MASK_ISA_AVX512F, \"__builtin_ia32_scatterdiv16si\",\n-\t       VOID_FTYPE_PINT_QI_V8DI_V8SI_INT,\n+\t       VOID_FTYPE_PVOID_QI_V8DI_V8SI_INT,\n \t       IX86_BUILTIN_SCATTERDIV16SI);\n \n   def_builtin (OPTION_MASK_ISA_AVX512F, \"__builtin_ia32_scatterdiv8di\",\n-\t       VOID_FTYPE_PLONGLONG_QI_V8DI_V8DI_INT,\n+\t       VOID_FTYPE_PVOID_QI_V8DI_V8DI_INT,\n \t       IX86_BUILTIN_SCATTERDIV8DI);\n \n   /* AVX512VL */\n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_gather3siv2df\",\n-\t       V2DF_FTYPE_V2DF_PCDOUBLE_V4SI_QI_INT,\n+\t       V2DF_FTYPE_V2DF_PCVOID_V4SI_QI_INT,\n \t       IX86_BUILTIN_GATHER3SIV2DF);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_gather3siv4df\",\n-\t       V4DF_FTYPE_V4DF_PCDOUBLE_V4SI_QI_INT,\n+\t       V4DF_FTYPE_V4DF_PCVOID_V4SI_QI_INT,\n \t       IX86_BUILTIN_GATHER3SIV4DF);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_gather3div2df\",\n-\t       V2DF_FTYPE_V2DF_PCDOUBLE_V2DI_QI_INT,\n+\t       V2DF_FTYPE_V2DF_PCVOID_V2DI_QI_INT,\n \t       IX86_BUILTIN_GATHER3DIV2DF);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_gather3div4df\",\n-\t       V4DF_FTYPE_V4DF_PCDOUBLE_V4DI_QI_INT,\n+\t       V4DF_FTYPE_V4DF_PCVOID_V4DI_QI_INT,\n \t       IX86_BUILTIN_GATHER3DIV4DF);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_gather3siv4sf\",\n-\t       V4SF_FTYPE_V4SF_PCFLOAT_V4SI_QI_INT,\n+\t       V4SF_FTYPE_V4SF_PCVOID_V4SI_QI_INT,\n \t       IX86_BUILTIN_GATHER3SIV4SF);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_gather3siv8sf\",\n-\t       V8SF_FTYPE_V8SF_PCFLOAT_V8SI_QI_INT,\n+\t       V8SF_FTYPE_V8SF_PCVOID_V8SI_QI_INT,\n \t       IX86_BUILTIN_GATHER3SIV8SF);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_gather3div4sf\",\n-\t       V4SF_FTYPE_V4SF_PCFLOAT_V2DI_QI_INT,\n+\t       V4SF_FTYPE_V4SF_PCVOID_V2DI_QI_INT,\n \t       IX86_BUILTIN_GATHER3DIV4SF);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_gather3div8sf\",\n-\t       V4SF_FTYPE_V4SF_PCFLOAT_V4DI_QI_INT,\n+\t       V4SF_FTYPE_V4SF_PCVOID_V4DI_QI_INT,\n \t       IX86_BUILTIN_GATHER3DIV8SF);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_gather3siv2di\",\n-\t       V2DI_FTYPE_V2DI_PCINT64_V4SI_QI_INT,\n+\t       V2DI_FTYPE_V2DI_PCVOID_V4SI_QI_INT,\n \t       IX86_BUILTIN_GATHER3SIV2DI);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_gather3siv4di\",\n-\t       V4DI_FTYPE_V4DI_PCINT64_V4SI_QI_INT,\n+\t       V4DI_FTYPE_V4DI_PCVOID_V4SI_QI_INT,\n \t       IX86_BUILTIN_GATHER3SIV4DI);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_gather3div2di\",\n-\t       V2DI_FTYPE_V2DI_PCINT64_V2DI_QI_INT,\n+\t       V2DI_FTYPE_V2DI_PCVOID_V2DI_QI_INT,\n \t       IX86_BUILTIN_GATHER3DIV2DI);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_gather3div4di\",\n-\t       V4DI_FTYPE_V4DI_PCINT64_V4DI_QI_INT,\n+\t       V4DI_FTYPE_V4DI_PCVOID_V4DI_QI_INT,\n \t       IX86_BUILTIN_GATHER3DIV4DI);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_gather3siv4si\",\n-\t       V4SI_FTYPE_V4SI_PCINT_V4SI_QI_INT,\n+\t       V4SI_FTYPE_V4SI_PCVOID_V4SI_QI_INT,\n \t       IX86_BUILTIN_GATHER3SIV4SI);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_gather3siv8si\",\n-\t       V8SI_FTYPE_V8SI_PCINT_V8SI_QI_INT,\n+\t       V8SI_FTYPE_V8SI_PCVOID_V8SI_QI_INT,\n \t       IX86_BUILTIN_GATHER3SIV8SI);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_gather3div4si\",\n-\t       V4SI_FTYPE_V4SI_PCINT_V2DI_QI_INT,\n+\t       V4SI_FTYPE_V4SI_PCVOID_V2DI_QI_INT,\n \t       IX86_BUILTIN_GATHER3DIV4SI);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_gather3div8si\",\n-\t       V4SI_FTYPE_V4SI_PCINT_V4DI_QI_INT,\n+\t       V4SI_FTYPE_V4SI_PCVOID_V4DI_QI_INT,\n \t       IX86_BUILTIN_GATHER3DIV8SI);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_gather3altsiv4df \",\n@@ -31832,67 +31832,67 @@ ix86_init_mmx_sse_builtins (void)\n \t       IX86_BUILTIN_GATHER3ALTDIV8SI);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_scattersiv8sf\",\n-\t       VOID_FTYPE_PFLOAT_QI_V8SI_V8SF_INT,\n+\t       VOID_FTYPE_PVOID_QI_V8SI_V8SF_INT,\n \t       IX86_BUILTIN_SCATTERSIV8SF);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_scattersiv4sf\",\n-\t       VOID_FTYPE_PFLOAT_QI_V4SI_V4SF_INT,\n+\t       VOID_FTYPE_PVOID_QI_V4SI_V4SF_INT,\n \t       IX86_BUILTIN_SCATTERSIV4SF);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_scattersiv4df\",\n-\t       VOID_FTYPE_PDOUBLE_QI_V4SI_V4DF_INT,\n+\t       VOID_FTYPE_PVOID_QI_V4SI_V4DF_INT,\n \t       IX86_BUILTIN_SCATTERSIV4DF);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_scattersiv2df\",\n-\t       VOID_FTYPE_PDOUBLE_QI_V4SI_V2DF_INT,\n+\t       VOID_FTYPE_PVOID_QI_V4SI_V2DF_INT,\n \t       IX86_BUILTIN_SCATTERSIV2DF);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_scatterdiv8sf\",\n-\t       VOID_FTYPE_PFLOAT_QI_V4DI_V4SF_INT,\n+\t       VOID_FTYPE_PVOID_QI_V4DI_V4SF_INT,\n \t       IX86_BUILTIN_SCATTERDIV8SF);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_scatterdiv4sf\",\n-\t       VOID_FTYPE_PFLOAT_QI_V2DI_V4SF_INT,\n+\t       VOID_FTYPE_PVOID_QI_V2DI_V4SF_INT,\n \t       IX86_BUILTIN_SCATTERDIV4SF);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_scatterdiv4df\",\n-\t       VOID_FTYPE_PDOUBLE_QI_V4DI_V4DF_INT,\n+\t       VOID_FTYPE_PVOID_QI_V4DI_V4DF_INT,\n \t       IX86_BUILTIN_SCATTERDIV4DF);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_scatterdiv2df\",\n-\t       VOID_FTYPE_PDOUBLE_QI_V2DI_V2DF_INT,\n+\t       VOID_FTYPE_PVOID_QI_V2DI_V2DF_INT,\n \t       IX86_BUILTIN_SCATTERDIV2DF);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_scattersiv8si\",\n-\t       VOID_FTYPE_PINT_QI_V8SI_V8SI_INT,\n+\t       VOID_FTYPE_PVOID_QI_V8SI_V8SI_INT,\n \t       IX86_BUILTIN_SCATTERSIV8SI);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_scattersiv4si\",\n-\t       VOID_FTYPE_PINT_QI_V4SI_V4SI_INT,\n+\t       VOID_FTYPE_PVOID_QI_V4SI_V4SI_INT,\n \t       IX86_BUILTIN_SCATTERSIV4SI);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_scattersiv4di\",\n-\t       VOID_FTYPE_PLONGLONG_QI_V4SI_V4DI_INT,\n+\t       VOID_FTYPE_PVOID_QI_V4SI_V4DI_INT,\n \t       IX86_BUILTIN_SCATTERSIV4DI);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_scattersiv2di\",\n-\t       VOID_FTYPE_PLONGLONG_QI_V4SI_V2DI_INT,\n+\t       VOID_FTYPE_PVOID_QI_V4SI_V2DI_INT,\n \t       IX86_BUILTIN_SCATTERSIV2DI);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_scatterdiv8si\",\n-\t       VOID_FTYPE_PINT_QI_V4DI_V4SI_INT,\n+\t       VOID_FTYPE_PVOID_QI_V4DI_V4SI_INT,\n \t       IX86_BUILTIN_SCATTERDIV8SI);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_scatterdiv4si\",\n-\t       VOID_FTYPE_PINT_QI_V2DI_V4SI_INT,\n+\t       VOID_FTYPE_PVOID_QI_V2DI_V4SI_INT,\n \t       IX86_BUILTIN_SCATTERDIV4SI);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_scatterdiv4di\",\n-\t       VOID_FTYPE_PLONGLONG_QI_V4DI_V4DI_INT,\n+\t       VOID_FTYPE_PVOID_QI_V4DI_V4DI_INT,\n \t       IX86_BUILTIN_SCATTERDIV4DI);\n \n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_scatterdiv2di\",\n-\t       VOID_FTYPE_PLONGLONG_QI_V2DI_V2DI_INT,\n+\t       VOID_FTYPE_PVOID_QI_V2DI_V2DI_INT,\n \t       IX86_BUILTIN_SCATTERDIV2DI);\n   def_builtin (OPTION_MASK_ISA_AVX512F, \"__builtin_ia32_scatteraltsiv8df \",\n \t       VOID_FTYPE_PDOUBLE_QI_V16SI_V8DF_INT,\n@@ -31912,28 +31912,28 @@ ix86_init_mmx_sse_builtins (void)\n \n   /* AVX512PF */\n   def_builtin (OPTION_MASK_ISA_AVX512PF, \"__builtin_ia32_gatherpfdpd\",\n-\t       VOID_FTYPE_QI_V8SI_PCINT64_INT_INT,\n+\t       VOID_FTYPE_QI_V8SI_PCVOID_INT_INT,\n \t       IX86_BUILTIN_GATHERPFDPD);\n   def_builtin (OPTION_MASK_ISA_AVX512PF, \"__builtin_ia32_gatherpfdps\",\n-\t       VOID_FTYPE_HI_V16SI_PCINT_INT_INT,\n+\t       VOID_FTYPE_HI_V16SI_PCVOID_INT_INT,\n \t       IX86_BUILTIN_GATHERPFDPS);\n   def_builtin (OPTION_MASK_ISA_AVX512PF, \"__builtin_ia32_gatherpfqpd\",\n-\t       VOID_FTYPE_QI_V8DI_PCINT64_INT_INT,\n+\t       VOID_FTYPE_QI_V8DI_PCVOID_INT_INT,\n \t       IX86_BUILTIN_GATHERPFQPD);\n   def_builtin (OPTION_MASK_ISA_AVX512PF, \"__builtin_ia32_gatherpfqps\",\n-\t       VOID_FTYPE_QI_V8DI_PCINT_INT_INT,\n+\t       VOID_FTYPE_QI_V8DI_PCVOID_INT_INT,\n \t       IX86_BUILTIN_GATHERPFQPS);\n   def_builtin (OPTION_MASK_ISA_AVX512PF, \"__builtin_ia32_scatterpfdpd\",\n-\t       VOID_FTYPE_QI_V8SI_PCINT64_INT_INT,\n+\t       VOID_FTYPE_QI_V8SI_PCVOID_INT_INT,\n \t       IX86_BUILTIN_SCATTERPFDPD);\n   def_builtin (OPTION_MASK_ISA_AVX512PF, \"__builtin_ia32_scatterpfdps\",\n-\t       VOID_FTYPE_HI_V16SI_PCINT_INT_INT,\n+\t       VOID_FTYPE_HI_V16SI_PCVOID_INT_INT,\n \t       IX86_BUILTIN_SCATTERPFDPS);\n   def_builtin (OPTION_MASK_ISA_AVX512PF, \"__builtin_ia32_scatterpfqpd\",\n-\t       VOID_FTYPE_QI_V8DI_PCINT64_INT_INT,\n+\t       VOID_FTYPE_QI_V8DI_PCVOID_INT_INT,\n \t       IX86_BUILTIN_SCATTERPFQPD);\n   def_builtin (OPTION_MASK_ISA_AVX512PF, \"__builtin_ia32_scatterpfqps\",\n-\t       VOID_FTYPE_QI_V8DI_PCINT_INT_INT,\n+\t       VOID_FTYPE_QI_V8DI_PCVOID_INT_INT,\n \t       IX86_BUILTIN_SCATTERPFQPS);\n \n   /* SHA */"}]}