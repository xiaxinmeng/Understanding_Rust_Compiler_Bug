{"sha": "3328a3b7797061dbf7629043219d3ed595b16b59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMyOGEzYjc3OTcwNjFkYmY3NjI5MDQzMjE5ZDNlZDU5NWIxNmI1OQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "tschwinge@gnu.org", "date": "2008-11-13T23:28:46Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2008-11-13T23:28:46Z"}, "message": "re PR target/28102 (GNU Hurd bootstrap error: 'OPTION_GLIBC' undeclared)\n\n2008-11-13  Thomas Schwinge  <tschwinge@gnu.org>\n\n\tPR target/28102\n\t* config.gcc (*-*-gnu*): Move Alpha parts into the `alpha*-*-gnu*', x86\n\tparts into the `i[34567]86-*-linux*' and parts that are independent of\n\tthe processor architecture into the `*-*-linux*' cases.\n\t(*-*-linux*): Consider `linux.opt' only for Linux-based configurations.\n\t* config/i386/gnu.h (GLIBC_DYNAMIC_LINKER): Redefine.\n\t(TARGET_OS_CPP_BUILTINS, LINK_SPEC): Don't redefine.\n\t[TARGET_LIBC_PROVIDES_SSP] (TARGET_THREAD_SSP_OFFSET): Undefine.\n\t* config/gnu.h (NO_IMPLICIT_EXTERN_C): Don't redefine.\n\t(HURD_TARGET_OS_CPP_BUILTINS): Don't define, but instead...\n\t(LINUX_TARGET_OS_CPP_BUILTINS): Redefine.\n\nFrom-SVN: r141838", "tree": {"sha": "6e19c94bb791d6a3ba8b3243c62c5d6240178a97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e19c94bb791d6a3ba8b3243c62c5d6240178a97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3328a3b7797061dbf7629043219d3ed595b16b59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3328a3b7797061dbf7629043219d3ed595b16b59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3328a3b7797061dbf7629043219d3ed595b16b59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3328a3b7797061dbf7629043219d3ed595b16b59/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ab70111b7171dfbfdd8b62f6de91e18116a84055", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab70111b7171dfbfdd8b62f6de91e18116a84055", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab70111b7171dfbfdd8b62f6de91e18116a84055"}], "stats": {"total": 92, "additions": 42, "deletions": 50}, "files": [{"sha": "a01c06e5c390939efd5d0e4b7bed0d26f4de3783", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3328a3b7797061dbf7629043219d3ed595b16b59/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3328a3b7797061dbf7629043219d3ed595b16b59/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3328a3b7797061dbf7629043219d3ed595b16b59", "patch": "@@ -1,3 +1,17 @@\n+2008-11-13  Thomas Schwinge  <tschwinge@gnu.org>\n+\n+\tPR target/28102\n+\t* config.gcc (*-*-gnu*): Move Alpha parts into the `alpha*-*-gnu*', x86\n+\tparts into the `i[34567]86-*-linux*' and parts that are independent of\n+\tthe processor architecture into the `*-*-linux*' cases.\n+\t(*-*-linux*): Consider `linux.opt' only for Linux-based configurations.\n+\t* config/i386/gnu.h (GLIBC_DYNAMIC_LINKER): Redefine.\n+\t(TARGET_OS_CPP_BUILTINS, LINK_SPEC): Don't redefine.\n+\t[TARGET_LIBC_PROVIDES_SSP] (TARGET_THREAD_SSP_OFFSET): Undefine.\n+\t* config/gnu.h (NO_IMPLICIT_EXTERN_C): Don't redefine.\n+\t(HURD_TARGET_OS_CPP_BUILTINS): Don't define, but instead...\n+\t(LINUX_TARGET_OS_CPP_BUILTINS): Redefine.\n+\n 2008-11-13  Ruan Beihong  <ruanbeihong@gmail.com>\n \n \t* config/mips/loongson.md (<u>div<mode>3, <u>mod<mode>3): New patterns."}, {"sha": "82a6ea5e66bbfdc78e707bb2012659d888af54b6", "filename": "gcc/config.gcc", "status": "modified", "additions": 18, "deletions": 30, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3328a3b7797061dbf7629043219d3ed595b16b59/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3328a3b7797061dbf7629043219d3ed595b16b59/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=3328a3b7797061dbf7629043219d3ed595b16b59", "patch": "@@ -480,16 +480,28 @@ case ${target} in\n   esac\n   fbsd_tm_file=\"${fbsd_tm_file} freebsd-spec.h freebsd.h\"\n   ;;\n-*-*-linux* | frv-*-*linux* | *-*-kfreebsd*-gnu | *-*-knetbsd*-gnu)\n-  # Must come before *-*-gnu* (because of *-*-linux-gnu* systems).\n+*-*-linux* | frv-*-*linux* | *-*-kfreebsd*-gnu | *-*-knetbsd*-gnu | *-*-gnu*)\n   extra_parts=\"crtbegin.o crtbeginS.o crtbeginT.o crtend.o crtendS.o\"\n-  extra_options=\"${extra_options} linux.opt\"\n   gas=yes\n   gnu_ld=yes\n   case ${enable_threads} in\n     \"\" | yes | posix) thread_file='posix' ;;\n   esac\n   tmake_file=\"t-slibgcc-elf-ver t-linux\"\n+  case $target in\n+    *-*-linux* | frv-*-*linux* | *-*-kfreebsd*-gnu | *-*-knetbsd*-gnu)\n+      :;;\n+    *-*-gnu*)\n+      tmake_file=\"$tmake_file t-gnu\";;\n+  esac\n+  # glibc / uclibc switch.  uclibc isn't usable for GNU/Hurd and neither for\n+  # GNU/k*BSD.\n+  case $target in\n+    *linux*)\n+      extra_options=\"$extra_options linux.opt\";;\n+    *)\n+      tm_defines=\"$tm_defines OPTION_GLIBC=1\";;\n+  esac\n   case ${target} in\n     *-*-*uclibc*)\n       tm_defines=\"${tm_defines} UCLIBC_DEFAULT=1\"\n@@ -502,30 +514,6 @@ case ${target} in\n   default_use_cxa_atexit=yes\n   use_gcc_tgmath=no\n   ;;\n-*-*-gnu*)\n-  # On the Hurd, the setup is just about the same on\n-  # each different CPU.  The specific machines that we\n-  # support are matched above and just set $cpu_type.\n-  tm_file=\"${cpu_type}/gnu.h\"\n-  extra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\"\n-  # GNU tools are the only tools.\n-  gas=yes\n-  gnu_ld=yes\n-  # These details are the same as for Linux.\n-  # But here we need a little extra magic.\n-  tmake_file=\"t-slibgcc-elf-ver t-linux t-gnu\"\n-  case ${target} in\n-    alpha*)\n-      tm_file=\"${cpu_type}/${cpu_type}.h alpha/elf.h alpha/linux.h alpha/linux-elf.h gnu.h ${tm_file}\"\n-      ;;\n-    i[34567]86-*-*)\n-      tm_file=\"${cpu_type}/${cpu_type}.h i386/unix.h i386/att.h dbxelf.h elfos.h svr4.h linux.h i386/linux.h gnu.h ${tm_file}\"\n-      ;;\n-  esac\n-  # Assume that glibc is being used and so __cxa_atexit is provided.\n-  default_use_cxa_atexit=yes\n-  use_gcc_tgmath=no\n-  ;;\n *-*-netbsd*)\n   tmake_file=\"t-slibgcc-elf-ver t-libc-ok t-netbsd t-libgcc-pic\"\n   gas=yes\n@@ -618,6 +606,7 @@ alpha*-*-linux*)\n \ttmake_file=\"${tmake_file} alpha/t-crtfm alpha/t-alpha alpha/t-ieee alpha/t-linux\"\n \t;;\n alpha*-*-gnu*)\n+\ttm_file=\"$tm_file alpha/elf.h alpha/linux.h alpha/linux-elf.h gnu.h alpha/gnu.h\"\n \ttarget_cpu_default=\"MASK_GAS\"\n \ttmake_file=\"${tmake_file} alpha/t-crtfm alpha/t-alpha alpha/t-ieee\"\n \t;;\n@@ -1085,7 +1074,7 @@ i[34567]86-*-openbsd*)\n i[34567]86-*-coff*)\n \ttm_file=\"${tm_file} i386/unix.h i386/bsd.h i386/gas.h dbxcoff.h i386/i386-coff.h\"\n \t;;\n-i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu)\n+i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu | i[34567]86-*-gnu*)\n \t\t\t# Intel 80386's running GNU/*\n \t\t\t# with ELF format using glibc 2\n \ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h svr4.h linux.h\"\n@@ -1116,6 +1105,7 @@ i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu)\n \t\t;;\n \ti[34567]86-*-knetbsd*-gnu) tm_file=\"${tm_file} i386/linux.h knetbsd-gnu.h i386/knetbsd-gnu.h\" ;;\n \ti[34567]86-*-kfreebsd*-gnu) tm_file=\"${tm_file} i386/linux.h kfreebsd-gnu.h i386/kfreebsd-gnu.h\" ;;\n+\ti[34567]86-*-gnu*) tm_file=\"$tm_file i386/linux.h gnu.h i386/gnu.h\";;\n \tesac\n \ttmake_file=\"${tmake_file} i386/t-crtstuff i386/t-crtpc i386/t-crtfm t-dfprules\"\n \t;;\n@@ -1128,8 +1118,6 @@ x86_64-*-linux* | x86_64-*-kfreebsd*-gnu | x86_64-*-knetbsd*-gnu)\n \tesac\n \ttmake_file=\"${tmake_file} i386/t-linux64 i386/t-crtstuff i386/t-crtpc i386/t-crtfm t-dfprules\"\n \t;;\n-i[34567]86-*-gnu*)\n-\t;;\n i[34567]86-pc-msdosdjgpp*)\n \txm_file=i386/xm-djgpp.h\n \ttm_file=\"dbxcoff.h ${tm_file} i386/unix.h i386/bsd.h i386/gas.h i386/djgpp.h\""}, {"sha": "1299376e665b5923b65eff73f2b5f0dade240df0", "filename": "gcc/config/gnu.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3328a3b7797061dbf7629043219d3ed595b16b59/gcc%2Fconfig%2Fgnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3328a3b7797061dbf7629043219d3ed595b16b59/gcc%2Fconfig%2Fgnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgnu.h?ref=3328a3b7797061dbf7629043219d3ed595b16b59", "patch": "@@ -32,10 +32,8 @@ along with GCC.  If not, see <http://www.gnu.org/licenses/>.\n #undef STANDARD_INCLUDE_DIR\n #define STANDARD_INCLUDE_DIR \"/include\"\n \n-/* The system headers under GNU are C++-aware.  */\n-#define NO_IMPLICIT_EXTERN_C\n-\n-#define HURD_TARGET_OS_CPP_BUILTINS()\t\t\\\n+#undef LINUX_TARGET_OS_CPP_BUILTINS\n+#define LINUX_TARGET_OS_CPP_BUILTINS()\t\t\\\n     do {\t\t\t\t\t\\\n \tbuiltin_define (\"__gnu_hurd__\");\t\\\n \tbuiltin_define (\"__GNU__\");\t\t\\"}, {"sha": "077933bba6883c72727c542dba81754a5bea39f9", "filename": "gcc/config/i386/gnu.h", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3328a3b7797061dbf7629043219d3ed595b16b59/gcc%2Fconfig%2Fi386%2Fgnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3328a3b7797061dbf7629043219d3ed595b16b59/gcc%2Fconfig%2Fi386%2Fgnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgnu.h?ref=3328a3b7797061dbf7629043219d3ed595b16b59", "patch": "@@ -20,31 +20,18 @@ You should have received a copy of the GNU General Public License\n along with GCC.  If not, see <http://www.gnu.org/licenses/>.\n */\n \n+#undef GLIBC_DYNAMIC_LINKER\n+#define GLIBC_DYNAMIC_LINKER \"/lib/ld.so\"\n+\n #undef TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (i386 GNU)\");\n \n-#undef TARGET_OS_CPP_BUILTINS /* config.gcc includes i386/linux.h.  */\n-#define TARGET_OS_CPP_BUILTINS()\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-\tHURD_TARGET_OS_CPP_BUILTINS();\t\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n-\n #undef CPP_SPEC\n #define CPP_SPEC \"%{pthread:-D_REENTRANT} %{posix:-D_POSIX_SOURCE} %{bsd:-D_BSD_SOURCE}\"\n \n #undef CC1_SPEC\n #define CC1_SPEC \"%(cc1_cpu)\"\n \n-#undef\tLINK_SPEC\n-#define LINK_SPEC \"-m elf_i386 %{shared:-shared} \\\n-  %{!shared: \\\n-    %{!static: \\\n-      %{rdynamic:-export-dynamic} \\\n-      %{!dynamic-linker:-dynamic-linker /lib/ld.so}} \\\n-    %{static:-static}}\"\n-\n #undef\tSTARTFILE_SPEC\n #if defined HAVE_LD_PIE\n #define STARTFILE_SPEC \\\n@@ -62,3 +49,8 @@ along with GCC.  If not, see <http://www.gnu.org/licenses/>.\n \n /* FIXME: Is a Hurd-specific fallback mechanism necessary?  */\n #undef MD_UNWIND_SUPPORT\n+\n+#ifdef TARGET_LIBC_PROVIDES_SSP\n+/* Not supported yet.  */\n+#undef TARGET_THREAD_SSP_OFFSET\n+#endif"}]}