{"sha": "3df95b7b7c3b26348ba3dd14072ba510db7845fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RmOTViN2I3YzNiMjYzNDhiYTNkZDE0MDcyYmE1MTBkYjc4NDVmYw==", "commit": {"author": {"name": "Nicola Pero", "email": "n.pero@mi.flashnet.it", "date": "2001-10-29T21:00:46Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2001-10-29T21:00:46Z"}, "message": "New objc tests\n\nFrom-SVN: r46614", "tree": {"sha": "e271c52389a8ebe036cabe9e05c17b2bee0d7e84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e271c52389a8ebe036cabe9e05c17b2bee0d7e84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3df95b7b7c3b26348ba3dd14072ba510db7845fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3df95b7b7c3b26348ba3dd14072ba510db7845fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3df95b7b7c3b26348ba3dd14072ba510db7845fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3df95b7b7c3b26348ba3dd14072ba510db7845fc/comments", "author": null, "committer": null, "parents": [{"sha": "92bcd93d73cf83f3592ec584b7035dfdb2312438", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92bcd93d73cf83f3592ec584b7035dfdb2312438", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92bcd93d73cf83f3592ec584b7035dfdb2312438"}], "stats": {"total": 132, "additions": 132, "deletions": 0}, "files": [{"sha": "2556eb47f285823d6721501df2990f7e598f1024", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df95b7b7c3b26348ba3dd14072ba510db7845fc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df95b7b7c3b26348ba3dd14072ba510db7845fc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3df95b7b7c3b26348ba3dd14072ba510db7845fc", "patch": "@@ -1,3 +1,8 @@\n+Mon Oct 29 21:19:53 2001  Nicola Pero  <n.pero@mi.flashnet.it>\n+\n+\t* objc/execute/class_self-1.m: New test.\n+\t* objc/execute/class_self-2.m: New test.\n+\n 2001-10-25  Zack Weinberg  <zack@codesourcery.com>\n \n \t* gcc.misc-tests/msgs.exp: Delete."}, {"sha": "4d4251628ea7972e98f6cfd89ce4739ad188376e", "filename": "gcc/testsuite/objc/execute/class_self-1.m", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df95b7b7c3b26348ba3dd14072ba510db7845fc/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass_self-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df95b7b7c3b26348ba3dd14072ba510db7845fc/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass_self-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass_self-1.m?ref=3df95b7b7c3b26348ba3dd14072ba510db7845fc", "patch": "@@ -0,0 +1,62 @@\n+/* Contributed by Nicola Pero - Fri Oct 26 22:39:32 BST 2001 */\n+#include <objc/objc.h>\n+\n+/* Test calling a class method when there is an instance method \n+   with conflicting types */\n+\n+/* This class should be unused but on broken compilers its instance\n+   method might get picked up and used instead of the class method of\n+   another class ! */\n+struct d\n+{\n+  int a;\n+};\n+\n+@interface UnusedClass\n+{\n+  Class isa;\n+}\n+- (struct d) method;\n+@end\n+\n+@implementation UnusedClass\n+- (struct d) method\n+{\n+  struct d u;\n+  u.a = 0;\n+  \n+  return u;\n+}\n+@end\n+\n+/* The real class */\n+@interface TestClass\n+{\n+  Class isa;\n+}\n++ (void) test;\n++ (int) method;\n+@end\n+\n+@implementation TestClass\n++ (void) test\n+{\n+  if ([self method] != 4)\n+    {\n+      abort ();\n+    }\n+}\n+\n++ (int) method\n+{\n+  return 4;\n+}\n+@end\n+\n+\n+int main (void)\n+{\n+  [TestClass test];\n+\n+  return 0;\n+}"}, {"sha": "e64fcf9fff4906b5b29fbdd95243999dd830f9f9", "filename": "gcc/testsuite/objc/execute/class_self-2.m", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df95b7b7c3b26348ba3dd14072ba510db7845fc/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass_self-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df95b7b7c3b26348ba3dd14072ba510db7845fc/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass_self-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass_self-2.m?ref=3df95b7b7c3b26348ba3dd14072ba510db7845fc", "patch": "@@ -0,0 +1,65 @@\n+/* Contributed by Nicola Pero - Fri Oct 26 22:39:32 BST 2001 */\n+#include <objc/objc.h>\n+\n+/* Test calling a class method on self where self has been redefined\n+   to be another class - the call requires a cast */\n+\n+\n+/* The first class */\n+struct d\n+{\n+  int a;\n+};\n+\n+@interface ClassA\n+{\n+  Class isa;\n+}\n++ (Class) class;\n++ (struct d) method;\n+@end\n+\n+@implementation ClassA\n++ (Class) class\n+{\n+  return self;\n+}\n+\n++ (struct d) method\n+{\n+  struct d u;\n+  u.a = 5;\n+  \n+  return u;\n+}\n+@end\n+\n+/* The second class */\n+@interface TestClass\n+{\n+  Class isa;\n+}\n++ (void) test;\n+@end\n+\n+@implementation TestClass\n++ (void) test\n+{\n+  self = [ClassA class];\n+  \n+\n+  if ([(Class)self method].a != 5)\n+    {\n+      abort ();\n+    }\n+}\n+\n+@end\n+\n+\n+int main (void)\n+{\n+  [TestClass test];\n+\n+  return 0;\n+}"}]}