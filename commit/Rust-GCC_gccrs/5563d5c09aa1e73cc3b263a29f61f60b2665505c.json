{"sha": "5563d5c09aa1e73cc3b263a29f61f60b2665505c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU2M2Q1YzA5YWExZTczY2MzYjI2M2EyOWY2MWY2MGIyNjY1NTA1Yw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-12-16T20:02:02Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-12-16T20:02:02Z"}, "message": "nvptx.h (OUTGOING_STATIC_CHAIN_REGNUM): Remove.\n\n\t* config/nvptx/nvptx.h (OUTGOING_STATIC_CHAIN_REGNUM): Remove.\n\t(REGISTER_NAMES): Adjust.\n\t* config/nvptx/nvptx.c (nvptx_pass_by_reference): Avoid long line.\n\t(nvptx_static_hain): Delete.\n\t(write_arg_mode): Don't emit initializer if argno < 0.\n\t(write_arg_type): Fix whitespace.\n\t(init_frame): Initialize reg to zero if frame is zero-sized.\n\t(nvptx_declare_function_name):  Use write_arg_type to emit chain\n\tdecl.\n\t(nvptx_output_call_insn): Adjust static chain emission.\n\t(nvptx_goacc_reduction): Make static.\n\t(TARGET_STATIC_CHAIN): Don't override.\n\nFrom-SVN: r231718", "tree": {"sha": "1916f8f611073ba7c7aef78a028a77abab1de808", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1916f8f611073ba7c7aef78a028a77abab1de808"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5563d5c09aa1e73cc3b263a29f61f60b2665505c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5563d5c09aa1e73cc3b263a29f61f60b2665505c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5563d5c09aa1e73cc3b263a29f61f60b2665505c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5563d5c09aa1e73cc3b263a29f61f60b2665505c/comments", "author": null, "committer": null, "parents": [{"sha": "7ee2e7f6ef380e9ae9b95712b3b39fa35ae0e333", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ee2e7f6ef380e9ae9b95712b3b39fa35ae0e333", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ee2e7f6ef380e9ae9b95712b3b39fa35ae0e333"}], "stats": {"total": 93, "additions": 49, "deletions": 44}, "files": [{"sha": "1d2a994330dab24be9859a73c3a0e6548759a44e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5563d5c09aa1e73cc3b263a29f61f60b2665505c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5563d5c09aa1e73cc3b263a29f61f60b2665505c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5563d5c09aa1e73cc3b263a29f61f60b2665505c", "patch": "@@ -1,10 +1,26 @@\n+2015-12-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* config/nvptx/nvptx.h (OUTGOING_STATIC_CHAIN_REGNUM): Remove.\n+\t(REGISTER_NAMES): Adjust.\n+\t* config/nvptx/nvptx.c (nvptx_pass_by_reference): Avoid long line.\n+\t(nvptx_static_hain): Delete.\n+\t(write_arg_mode): Don't emit initializer if argno < 0.\n+\t(write_arg_type): Fix whitespace.\n+\t(init_frame): Initialize reg to zero if frame is zero-sized.\n+\t(nvptx_declare_function_name):  Use write_arg_type to emit chain\n+\tdecl.\n+\t(nvptx_output_call_insn): Adjust static chain emission.\n+\t(nvptx_goacc_reduction): Make static.\n+\t(TARGET_STATIC_CHAIN): Don't override.\n+\n 2015-12-16  Aditya Kumar  <aditya.k7@samsung.com>\n \n \t* graphite-dependences.c (scop_get_dependences): Use local pointers.\n \t* graphite-isl-ast-to-gimple.c\n \t(translate_isl_ast_to_gimple::scop_to_isl_ast): Use scop->dependence.\n \t* graphite-optimize-isl.c (optimize_isl): Same.\n-\t* graphite-poly.c (new_scop): Remove initialization of removed members.\n+\t* graphite-poly.c (new_scop): Remove initialization of removed\n+\tmembers.\n \t(free_scop): Same.\n \t* graphite.h (struct scop): Remove individial dependence pointers and\n \tadd a scop::dependence to contain all the dependence."}, {"sha": "39999f250a555b510fc25235c1782a914a746554", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 31, "deletions": 41, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5563d5c09aa1e73cc3b263a29f61f60b2665505c/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5563d5c09aa1e73cc3b263a29f61f60b2665505c/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=5563d5c09aa1e73cc3b263a29f61f60b2665505c", "patch": "@@ -525,8 +525,9 @@ nvptx_function_value_regno_p (const unsigned int regno)\n    reference in memory.  */\n \n static bool\n-nvptx_pass_by_reference (cumulative_args_t ARG_UNUSED (cum), machine_mode mode,\n-\t\t\t const_tree type, bool ARG_UNUSED (named))\n+nvptx_pass_by_reference (cumulative_args_t ARG_UNUSED (cum),\n+\t\t\t machine_mode mode, const_tree type,\n+\t\t\t bool ARG_UNUSED (named))\n {\n   return pass_in_memory (mode, type, false);\n }\n@@ -549,18 +550,6 @@ nvptx_promote_function_mode (const_tree type, machine_mode mode,\n   return promote_arg (mode, for_return || !type || TYPE_ARG_TYPES (funtype));\n }\n \n-/* Implement TARGET_STATIC_CHAIN.  */\n-\n-static rtx\n-nvptx_static_chain (const_tree fndecl, bool incoming_p)\n-{\n-  if (!DECL_STATIC_CHAIN (fndecl))\n-    return NULL;\n-\n-  return gen_rtx_REG (Pmode, (incoming_p ? STATIC_CHAIN_REGNUM\n-\t\t\t      : OUTGOING_STATIC_CHAIN_REGNUM));\n-}\n-\n /* Helper for write_arg.  Emit a single PTX argument of MODE, either\n    in a prototype, or as copy in a function prologue.  ARGNO is the\n    index of this argument in the PTX function.  FOR_REG is negative,\n@@ -588,12 +577,15 @@ write_arg_mode (std::stringstream &s, int for_reg, int argno,\n       else\n \ts << \"%ar\" << argno;\n       s << \";\\n\";\n-      s << \"\\tld.param\" << ptx_type << \" \";\n-      if (for_reg)\n-\ts << reg_names[for_reg];\n-      else\n-\ts << \"%ar\" << argno;\n-      s << \", [%in_ar\" << argno << \"];\\n\";\n+      if (argno >= 0)\n+\t{\n+\t  s << \"\\tld.param\" << ptx_type << \" \";\n+\t  if (for_reg)\n+\t    s << reg_names[for_reg];\n+\t  else\n+\t    s << \"%ar\" << argno;\n+\t  s << \", [%in_ar\" << argno << \"];\\n\";\n+\t}\n     }\n   return argno + 1;\n }\n@@ -625,7 +617,7 @@ write_arg_type (std::stringstream &s, int for_reg, int argno,\n \t{\n \t  /* Complex types are sent as two separate args.  */\n \t  type = TREE_TYPE (type);\n-\t  mode  = TYPE_MODE (type);\n+\t  mode = TYPE_MODE (type);\n \t  prototyped = true;\n \t}\n \n@@ -917,16 +909,20 @@ nvptx_maybe_record_fnsym (rtx sym)\n }\n \n /* Emit a local array to hold some part of a conventional stack frame\n-   and initialize REGNO to point to it.  */\n+   and initialize REGNO to point to it.  If the size is zero, it'll\n+   never be valid to dereference, so we can simply initialize to\n+   zero.  */\n \n static void\n init_frame (FILE  *file, int regno, unsigned align, unsigned size)\n {\n-  fprintf (file, \"\\t.reg.u%d %s;\\n\"\n-\t   \"\\t.local.align %d .b8 %s_ar[%u];\\n\"\n-\t   \"\\tcvta.local.u%d %s, %s_ar;\\n\",\n-\t   POINTER_SIZE, reg_names[regno],\n-\t   align, reg_names[regno], size ? size : 1,\n+  if (size)\n+    fprintf (file, \"\\t.local .align %d .b8 %s_ar[%u];\\n\",\n+\t     align, reg_names[regno], size);\n+  fprintf (file, \"\\t.reg.u%d %s;\\n\",\n+\t   POINTER_SIZE, reg_names[regno]);\n+  fprintf (file, (size ? \"\\tcvta.local.u%d %s, %s_ar;\\n\"\n+\t\t  :  \"\\tmov.u%d %s, 0;\\n\"),\n \t   POINTER_SIZE, reg_names[regno], reg_names[regno]);\n }\n \n@@ -981,12 +977,14 @@ nvptx_declare_function_name (FILE *file, const char *name, const_tree decl)\n     }\n \n   if (stdarg_p (fntype))\n-    argno = write_arg_type (s, ARG_POINTER_REGNUM, argno, ptr_type_node, true);\n-\n-  if (DECL_STATIC_CHAIN (decl))\n-    argno = write_arg_type (s, STATIC_CHAIN_REGNUM, argno, ptr_type_node,\n+    argno = write_arg_type (s, ARG_POINTER_REGNUM, argno, ptr_type_node,\n \t\t\t    true);\n \n+  if (DECL_STATIC_CHAIN (decl) || cfun->machine->has_chain)\n+    write_arg_type (s, STATIC_CHAIN_REGNUM,\n+\t\t    DECL_STATIC_CHAIN (decl) ? argno : -1, ptr_type_node,\n+\t\t    true);\n+\n   fprintf (file, \"%s\", s.str().c_str());\n \n   /* Declare a local var for outgoing varargs.  */\n@@ -1000,10 +998,6 @@ nvptx_declare_function_name (FILE *file, const char *name, const_tree decl)\n     init_frame (file, FRAME_POINTER_REGNUM,\n \t\tcrtl->stack_alignment_needed / BITS_PER_UNIT, sz);\n \n-  if (cfun->machine->has_chain)\n-    fprintf (file, \"\\t.reg.u%d %s;\\n\", GET_MODE_BITSIZE (Pmode),\n-\t     reg_names[OUTGOING_STATIC_CHAIN_REGNUM]);\n-\n   /* Declare the pseudos we have as ptx registers.  */\n   int maxregs = max_reg_num ();\n   for (int i = LAST_VIRTUAL_REGISTER + 1; i < maxregs; i++)\n@@ -1864,8 +1858,7 @@ nvptx_output_call_insn (rtx_insn *insn, rtx result, rtx callee)\n     }\n   if (decl && DECL_STATIC_CHAIN (decl))\n     {\n-      fprintf (asm_out_file, \", %s%s\", open,\n-\t       reg_names [OUTGOING_STATIC_CHAIN_REGNUM]);\n+      fprintf (asm_out_file, \", %s%s\", open, reg_names [STATIC_CHAIN_REGNUM]);\n       open = \"\";\n     }\n   if (!open[0])\n@@ -4779,7 +4772,7 @@ nvptx_goacc_reduction_teardown (gcall *call)\n \n /* NVPTX reduction expander.  */\n \n-void\n+static void\n nvptx_goacc_reduction (gcall *call)\n {\n   unsigned code = (unsigned)TREE_INT_CST_LOW (gimple_call_arg (call, 0));\n@@ -4845,9 +4838,6 @@ nvptx_goacc_reduction (gcall *call)\n #define TARGET_OMIT_STRUCT_RETURN_REG true\n #undef TARGET_STRICT_ARGUMENT_NAMING\n #define TARGET_STRICT_ARGUMENT_NAMING nvptx_strict_argument_naming\n-#undef TARGET_STATIC_CHAIN\n-#define TARGET_STATIC_CHAIN nvptx_static_chain\n-\n #undef TARGET_CALL_ARGS\n #define TARGET_CALL_ARGS nvptx_call_args\n #undef TARGET_END_CALL_ARGS"}, {"sha": "0240d17ecfec7fe4f6031321cf13598971486eb3", "filename": "gcc/config/nvptx/nvptx.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5563d5c09aa1e73cc3b263a29f61f60b2665505c/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5563d5c09aa1e73cc3b263a29f61f60b2665505c/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.h?ref=5563d5c09aa1e73cc3b263a29f61f60b2665505c", "patch": "@@ -157,12 +157,11 @@ enum reg_class\n #define ARG_POINTER_REGNUM 14\n \n #define STATIC_CHAIN_REGNUM 12\n-#define OUTGOING_STATIC_CHAIN_REGNUM 10\n \n #define REGISTER_NAMES\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     \"%hr0\", \"%outargs\", \"%hfp\", \"%hr3\", \"%retval\", \"%hr5\", \"%hr6\", \"%hr7\",\t\\\n-    \"%hr8\", \"%hr9\", \"%chain_out\", \"%hr11\", \"%chain_in\", \"%hr13\", \"%argp\", \"%frame\" \\\n+    \"%hr8\", \"%hr9\", \"%hr10\", \"%hr11\", \"%chain_in\", \"%hr13\", \"%argp\", \"%frame\" \\\n   }\n \n #define FIRST_PARM_OFFSET(FNDECL) ((void)(FNDECL), 0)"}]}