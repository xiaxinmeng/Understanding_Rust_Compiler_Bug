{"sha": "e9d5a271e53986d30bb738747a3dc590c1d9629c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlkNWEyNzFlNTM5ODZkMzBiYjczODc0N2EzZGM1OTBjMWQ5NjI5Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-03-14T13:08:36Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-03-14T13:08:36Z"}, "message": "re PR c++/56346 (FAIL: g++.dg/tls/thread_local3.C -std=gnu++11 (test for excess errors))\n\n\tPR c++/56346\n\t* decl.c (register_dtor_fn): Pass null to __cxa_thread_atexit\n\tdso_handle parm on targets without __cxa_atexit.\n\nFrom-SVN: r196657", "tree": {"sha": "97e9d2da7bcf940d8dbccd82c90b8f91198954ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97e9d2da7bcf940d8dbccd82c90b8f91198954ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9d5a271e53986d30bb738747a3dc590c1d9629c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9d5a271e53986d30bb738747a3dc590c1d9629c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9d5a271e53986d30bb738747a3dc590c1d9629c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9d5a271e53986d30bb738747a3dc590c1d9629c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d803a4912e3cb9ffcfa57a790d26073bff5086ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d803a4912e3cb9ffcfa57a790d26073bff5086ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d803a4912e3cb9ffcfa57a790d26073bff5086ee"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "ccdb401d9281f97a96292e7abc70e629219fe0ff", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9d5a271e53986d30bb738747a3dc590c1d9629c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9d5a271e53986d30bb738747a3dc590c1d9629c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e9d5a271e53986d30bb738747a3dc590c1d9629c", "patch": "@@ -1,3 +1,9 @@\n+2013-03-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/56346\n+\t* decl.c (register_dtor_fn): Pass null to __cxa_thread_atexit\n+\tdso_handle parm on targets without __cxa_atexit.\n+\n 2013-03-11  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/56567"}, {"sha": "92114fff6c7643a49b664775a50483ae8141fe2e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9d5a271e53986d30bb738747a3dc590c1d9629c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9d5a271e53986d30bb738747a3dc590c1d9629c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e9d5a271e53986d30bb738747a3dc590c1d9629c", "patch": "@@ -6758,10 +6758,9 @@ register_dtor_fn (tree decl)\n      \"__aeabi_atexit\"), and DECL is a class object, we can just pass the\n      destructor to \"__cxa_atexit\"; we don't have to build a temporary\n      function to do the cleanup.  */\n-  ob_parm = (DECL_THREAD_LOCAL_P (decl)\n-\t     || (flag_use_cxa_atexit\n-\t\t && !targetm.cxx.use_atexit_for_cxa_atexit ()));\n-  dso_parm = ob_parm;\n+  dso_parm = (flag_use_cxa_atexit\n+\t      && !targetm.cxx.use_atexit_for_cxa_atexit ());\n+  ob_parm = (DECL_THREAD_LOCAL_P (decl) || dso_parm);\n   use_dtor = ob_parm && CLASS_TYPE_P (type);\n   if (use_dtor)\n     {\n@@ -6825,7 +6824,7 @@ register_dtor_fn (tree decl)\n \t before passing it in, to avoid spurious errors.  */\n       addr = build_nop (ptr_type_node, addr);\n     }\n-  else if (ob_parm)\n+  else\n     /* Since the cleanup functions we build ignore the address\n        they're given, there's no reason to pass the actual address\n        in, and, in general, it's cheaper to pass NULL than any\n@@ -6835,6 +6834,10 @@ register_dtor_fn (tree decl)\n   if (dso_parm)\n     arg2 = cp_build_addr_expr (get_dso_handle_node (),\n \t\t\t       tf_warning_or_error);\n+  else if (ob_parm)\n+    /* Just pass NULL to the dso handle parm if we don't actually\n+       have a DSO handle on this target.  */\n+    arg2 = null_pointer_node;\n   else\n     arg2 = NULL_TREE;\n "}]}