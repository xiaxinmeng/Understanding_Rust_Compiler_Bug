{"sha": "c8cc4417e4b05d1ca1ef51a9bf38c1af29c29c55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhjYzQ0MTdlNGIwNWQxY2ExZWY1MWE5YmYzOGMxYWYyOWMyOWM1NQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2002-07-07T19:56:31Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-07-07T19:56:31Z"}, "message": "sh.h (PRINT_OPERAND_PUNCT_VALID_P): Allow '\\''.\n\n\t* sh.h (PRINT_OPERAND_PUNCT_VALID_P): Allow '\\''.\n\t(PREDICATE_CODES): Add entries for equality_comparison_operator,\n\tgreater_comparison_operator and less_comparison_operator.\n\t* sh.c (print_operand): Add '\\'' code.  Make 'o' handle\n\tmore operators.\n\t(equality_comparison_operator): New function.\n\t(greater_comparison_operator, less_comparison_operator): Likewise.\n\t* sh.md (beq_media_i): Disable generator function generation.\n\tUse match_operator to handle a whole class of comparisons.  Add\n\tmodifier in output template to provide branch prediction.  Add type.\n\t(bgt_media_i, ble_media_i): Likewise.  Allow zero operands.\n\t(bne_media_i, bge_media_i, bgtu_media_i, bgeu_media_i): Delete.\n\t(blt_media_i, bleu_media_i, bltu_media_i): Likewise.\n\t(bgt, blt, ble, bge, bgtu, bltu, bgeu, bleu): Allow zero operands.\n\nFrom-SVN: r55305", "tree": {"sha": "cddb5430d2a41537bd2c501dfd5c34fcc336ccca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cddb5430d2a41537bd2c501dfd5c34fcc336ccca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8cc4417e4b05d1ca1ef51a9bf38c1af29c29c55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8cc4417e4b05d1ca1ef51a9bf38c1af29c29c55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8cc4417e4b05d1ca1ef51a9bf38c1af29c29c55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8cc4417e4b05d1ca1ef51a9bf38c1af29c29c55/comments", "author": null, "committer": null, "parents": [{"sha": "78abea278bf8ce0d6cf3735e5306f2644abbc643", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78abea278bf8ce0d6cf3735e5306f2644abbc643", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78abea278bf8ce0d6cf3735e5306f2644abbc643"}], "stats": {"total": 231, "additions": 134, "deletions": 97}, "files": [{"sha": "b14bb3744e273e88792dfde185ad0287ce61965c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cc4417e4b05d1ca1ef51a9bf38c1af29c29c55/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cc4417e4b05d1ca1ef51a9bf38c1af29c29c55/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8cc4417e4b05d1ca1ef51a9bf38c1af29c29c55", "patch": "@@ -1,3 +1,20 @@\n+Sun Jul  7 20:38:38 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* sh.h (PRINT_OPERAND_PUNCT_VALID_P): Allow '\\''.\n+\t(PREDICATE_CODES): Add entries for equality_comparison_operator,\n+\tgreater_comparison_operator and less_comparison_operator.\n+\t* sh.c (print_operand): Add '\\'' code.  Make 'o' handle\n+\tmore operators.\n+\t(equality_comparison_operator): New function.\n+\t(greater_comparison_operator, less_comparison_operator): Likewise.\n+\t* sh.md (beq_media_i): Disable generator function generation.\n+\tUse match_operator to handle a whole class of comparisons.  Add\n+\tmodifier in output template to provide branch prediction.  Add type.\n+\t(bgt_media_i, ble_media_i): Likewise.  Allow zero operands.\n+\t(bne_media_i, bge_media_i, bgtu_media_i, bgeu_media_i): Delete.\n+\t(blt_media_i, bleu_media_i, bltu_media_i): Likewise.\n+\t(bgt, blt, ble, bge, bgtu, bltu, bgeu, bleu): Allow zero operands.\n+\n 2002-07-07  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \tEmit MMIX function prologue and epilogue as rtl."}, {"sha": "bca5fe3608bf4debe5e8f01508abfeea63189f79", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 63, "deletions": 3, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cc4417e4b05d1ca1ef51a9bf38c1af29c29c55/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cc4417e4b05d1ca1ef51a9bf38c1af29c29c55/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=c8cc4417e4b05d1ca1ef51a9bf38c1af29c29c55", "patch": "@@ -325,6 +325,7 @@ print_operand_address (stream, x)\n    ','  print LOCAL_LABEL_PREFIX\n    '@'  print trap, rte or rts depending upon pragma interruptness\n    '#'  output a nop if there is nothing to put in the delay slot\n+   '''  print likelyhood suffix (/u for unlikely).\n    'O'  print a constant without the #\n    'R'  print the LSW of a dp value - changes if in little endian\n    'S'  print the MSW of a dp value - changes if in little endian\n@@ -364,6 +365,14 @@ print_operand (stream, x, code)\n       if (dbr_sequence_length () == 0)\n \tfprintf (stream, \"\\n\\tnop\");\n       break;\n+    case '\\'':\n+      {\n+\trtx note = find_reg_note (current_output_insn, REG_BR_PROB, 0);\n+\n+\tif (note && INTVAL (XEXP (note, 0)) * 2 < REG_BR_PROB_BASE)\n+\t  fputs (\"/u\", stream);\n+\tbreak;\n+      }\n     case 'O':\n       x = mark_constant_pool_use (x);\n       output_addr_const (stream, x);\n@@ -398,6 +407,12 @@ print_operand (stream, x, code)\n \tcase MINUS: fputs (\"sub\", stream); break;\n \tcase MULT:  fputs (\"mul\", stream); break;\n \tcase DIV:   fputs (\"div\", stream); break;\n+\tcase EQ:    fputs (\"eq\",  stream); break;\n+\tcase NE:    fputs (\"ne\",  stream); break;\n+\tcase GT:  case LT:  fputs (\"gt\",  stream); break;\n+\tcase GE:  case LE:  fputs (\"ge\",  stream); break;\n+\tcase GTU: case LTU: fputs (\"gtu\", stream); break;\n+\tcase GEU: case LEU: fputs (\"geu\", stream); break;\n \tdefault:\n \t  break;\n \t}\n@@ -443,7 +458,7 @@ print_operand (stream, x, code)\n       goto default_output;\n     case 'u':\n       if (GET_CODE (x) == CONST_INT)\n-        {\n+\t{\n \t  fprintf ((stream), \"%u\", (unsigned) INTVAL (x) & (0x10000 - 1));\n \t  break;\n \t}\n@@ -6139,6 +6154,51 @@ binary_float_operator (op, mode)\n   return 0;\n }\n \n+int\n+equality_comparison_operator (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  return ((mode == VOIDmode || GET_MODE (op) == mode)\n+\t  && (GET_CODE (op) == EQ || GET_CODE (op) == NE));\n+}\n+\n+int greater_comparison_operator (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (mode != VOIDmode && GET_MODE (op) == mode)\n+    return 0;\n+  switch (GET_CODE (op))\n+    {\n+    case GT:\n+    case GE:\n+    case GTU:\n+    case GEU:\n+      return 1;\n+    default:\n+      return 0;\n+    }\n+}\n+\n+int less_comparison_operator (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (mode != VOIDmode && GET_MODE (op) == mode)\n+    return 0;\n+  switch (GET_CODE (op))\n+    {\n+    case LT:\n+    case LE:\n+    case LTU:\n+    case LEU:\n+      return 1;\n+    default:\n+      return 0;\n+    }\n+}\n+\n /* Accept pseudos and branch target registers.  */\n int\n target_reg_operand (op, mode)\n@@ -6251,12 +6311,12 @@ sh_rep_vec (v, mode)\n       for (i -= 2 ; i >= 0; i -= 2)\n \tif (! rtx_equal_p (XVECEXP (v, 0, i + 1), x)\n \t    || ! rtx_equal_p (XVECEXP (v, 0, i), y))\n-          return 0;\n+\t  return 0;\n     }\n   else\n     for (; i >= 0; i--)\n       if (XVECEXP (v, 0, i) != x)\n-        return 0;\n+\treturn 0;\n   return 1;\n }\n "}, {"sha": "91d81e14032b58a11b21bd49a21a4a4ac99f8bc4", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cc4417e4b05d1ca1ef51a9bf38c1af29c29c55/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cc4417e4b05d1ca1ef51a9bf38c1af29c29c55/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=c8cc4417e4b05d1ca1ef51a9bf38c1af29c29c55", "patch": "@@ -3105,7 +3105,7 @@ while (0)\n \n #define PRINT_OPERAND_PUNCT_VALID_P(CHAR) \\\n   ((CHAR) == '.' || (CHAR) == '#' || (CHAR) == '@' || (CHAR) == ','\t\\\n-   || (CHAR) == '$')\n+   || (CHAR) == '$'|| (CHAR) == '\\'')\n \n /* Recognize machine-specific patterns that may appear within\n    constants.  Used for PIC-specific UNSPECs.  */\n@@ -3234,13 +3234,16 @@ extern int rtx_equal_function_value_matters;\n   {\"arith_reg_or_0_operand\", {SUBREG, REG, CONST_INT, CONST_VECTOR}},\t\\\n   {\"binary_float_operator\", {PLUS, MULT}},\t\t\t\t\\\n   {\"commutative_float_operator\", {PLUS, MULT}},\t\t\t\t\\\n+  {\"equality_comparison_operator\", {EQ,NE}},\t\t\t\t\\\n   {\"extend_reg_operand\", {SUBREG, REG, TRUNCATE}},\t\t\t\\\n   {\"extend_reg_or_0_operand\", {SUBREG, REG, TRUNCATE, CONST_INT}},\t\\\n   {\"fp_arith_reg_operand\", {SUBREG, REG}},\t\t\t\t\\\n   {\"fpscr_operand\", {REG}},\t\t\t\t\t\t\\\n   {\"fpul_operand\", {REG}},\t\t\t\t\t\t\\\n   {\"general_movsrc_operand\", {SUBREG, REG, CONST_INT, CONST_DOUBLE, MEM}}, \\\n   {\"general_movdst_operand\", {SUBREG, REG, MEM}},\t\t\t\\\n+  {\"greater_comparison_operator\", {GT,GE,GTU,GEU}},\t\t\t\\\n+  {\"less_comparison_operator\", {LT,LE,LTU,LEU}},\t\t\t\\\n   {\"logical_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n   {\"mextr_bit_offset\", {CONST_INT}},\t\t\t\t\t\\\n   {\"noncommutative_float_operator\", {MINUS, DIV}},\t\t\t\\"}, {"sha": "4acce0d8ec43486f19685093d7c7117ea383545e", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 50, "deletions": 93, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cc4417e4b05d1ca1ef51a9bf38c1af29c29c55/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cc4417e4b05d1ca1ef51a9bf38c1af29c29c55/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=c8cc4417e4b05d1ca1ef51a9bf38c1af29c29c55", "patch": "@@ -4707,16 +4707,18 @@\n   \"TARGET_SHMEDIA\"\n   \"\")\n \n-(define_insn \"beq_media_i\"\n+(define_insn \"*beq_media_i\"\n   [(set (pc)\n-\t(if_then_else (eq (match_operand:DI 1 \"arith_reg_operand\" \"r,r\")\n-\t\t\t  (match_operand:DI 2 \"arith_operand\" \"r,O\"))\n+\t(if_then_else (match_operator 3 \"equality_comparison_operator\"\n+\t\t\t[(match_operand:DI 1 \"arith_reg_operand\" \"r,r\")\n+\t\t\t (match_operand:DI 2 \"arith_operand\" \"r,O\")])\n \t\t      (match_operand:DI 0 \"target_operand\" \"b,b\")\n \t\t      (pc)))]\n   \"TARGET_SHMEDIA\"\n   \"@\n-\tbeq\t%1, %2, %0\n-\tbeqi\t%1, %2, %0\")\n+\tb%o3%'\t%1, %2, %0\n+\tb%o3i%'\t%1, %2, %0\"\n+  [(set_attr \"type\" \"cbranch_media\")])\n \n (define_expand \"bne_media\"\n   [(set (pc)\n@@ -4727,17 +4729,6 @@\n   \"TARGET_SHMEDIA\"\n   \"\")\n \n-(define_insn \"bne_media_i\"\n-  [(set (pc)\n-\t(if_then_else (ne (match_operand:DI 1 \"arith_reg_operand\" \"r,r\")\n-\t\t\t  (match_operand:DI 2 \"arith_operand\" \"r,O\"))\n-\t\t      (match_operand:DI 0 \"target_operand\" \"b,b\")\n-\t\t      (pc)))]\n-  \"TARGET_SHMEDIA\"\n-  \"@\n-\tbne\t%1, %2, %0\n-\tbnei\t%1, %2, %0\")\n-\n (define_expand \"bgt_media\"\n   [(set (pc)\n \t(if_then_else (gt (match_operand:DI 1 \"arith_reg_operand\" \"r\")\n@@ -4747,15 +4738,6 @@\n   \"TARGET_SHMEDIA\"\n   \"\")\n \n-(define_insn \"bgt_media_i\"\n-  [(set (pc)\n-\t(if_then_else (gt (match_operand:DI 1 \"arith_reg_operand\" \"r\")\n-\t\t\t  (match_operand:DI 2 \"arith_reg_operand\" \"r\"))\n-\t\t      (match_operand:DI 0 \"target_operand\" \"b\")\n-\t\t      (pc)))]\n-  \"TARGET_SHMEDIA\"\n-  \"bgt\t%1, %2, %0\")\n-\n (define_expand \"bge_media\"\n   [(set (pc)\n \t(if_then_else (ge (match_operand:DI 1 \"arith_reg_operand\" \"r\")\n@@ -4765,15 +4747,6 @@\n   \"TARGET_SHMEDIA\"\n   \"\")\n \n-(define_insn \"bge_media_i\"\n-  [(set (pc)\n-\t(if_then_else (ge (match_operand:DI 1 \"arith_reg_operand\" \"r\")\n-\t\t\t  (match_operand:DI 2 \"arith_reg_operand\" \"r\"))\n-\t\t      (match_operand:DI 0 \"target_operand\" \"b\")\n-\t\t      (pc)))]\n-  \"TARGET_SHMEDIA\"\n-  \"bge\t%1, %2, %0\")\n-\n (define_expand \"bgtu_media\"\n   [(set (pc)\n \t(if_then_else (gtu (match_operand:DI 1 \"arith_reg_operand\" \"r\")\n@@ -4783,15 +4756,6 @@\n   \"TARGET_SHMEDIA\"\n   \"\")\n \n-(define_insn \"bgtu_media_i\"\n-  [(set (pc)\n-\t(if_then_else (gtu (match_operand:DI 1 \"arith_reg_operand\" \"r\")\n-\t\t\t   (match_operand:DI 2 \"arith_reg_operand\" \"r\"))\n-\t\t      (match_operand:DI 0 \"target_operand\" \"b\")\n-\t\t      (pc)))]\n-  \"TARGET_SHMEDIA\"\n-  \"bgtu\t%1, %2, %0\")\n-\n (define_expand \"bgeu_media\"\n   [(set (pc)\n \t(if_then_else (geu (match_operand:DI 1 \"arith_reg_operand\" \"r\")\n@@ -4801,51 +4765,28 @@\n   \"TARGET_SHMEDIA\"\n   \"\")\n \n-(define_insn \"bgeu_media_i\"\n+(define_insn \"*bgt_media_i\"\n   [(set (pc)\n-\t(if_then_else (geu (match_operand:DI 1 \"arith_reg_operand\" \"r\")\n-\t\t\t   (match_operand:DI 2 \"arith_reg_operand\" \"r\"))\n+\t(if_then_else (match_operator 3 \"greater_comparison_operator\"\n+\t\t\t[(match_operand:DI 1 \"arith_reg_or_0_operand\" \"rN\")\n+\t\t\t (match_operand:DI 2 \"arith_reg_or_0_operand\" \"rN\")])\n \t\t      (match_operand:DI 0 \"target_operand\" \"b\")\n \t\t      (pc)))]\n   \"TARGET_SHMEDIA\"\n-  \"bgeu\t%1, %2, %0\")\n+  \"b%o3%'\t%N1, %N2, %0\"\n+  [(set_attr \"type\" \"cbranch_media\")])\n \n ;; These are only needed to make invert_jump() happy.\n (define_insn \"*ble_media_i\"\n   [(set (pc)\n-\t(if_then_else (le (match_operand:DI 1 \"arith_reg_operand\" \"r\")\n-\t\t\t  (match_operand:DI 2 \"arith_reg_operand\" \"r\"))\n-\t\t      (match_operand:DI 0 \"target_operand\" \"b\")\n-\t\t      (pc)))]\n-  \"TARGET_SHMEDIA\"\n-  \"bge\t%2, %1, %0\")\n-\n-(define_insn \"*blt_media_i\"\n-  [(set (pc)\n-\t(if_then_else (lt (match_operand:DI 1 \"arith_reg_operand\" \"r\")\n-\t\t\t  (match_operand:DI 2 \"arith_reg_operand\" \"r\"))\n-\t\t      (match_operand:DI 0 \"target_operand\" \"b\")\n-\t\t      (pc)))]\n-  \"TARGET_SHMEDIA\"\n-  \"bgt\t%2, %1, %0\")\n-\n-(define_insn \"*bleu_media_i\"\n-  [(set (pc)\n-\t(if_then_else (leu (match_operand:DI 1 \"arith_reg_operand\" \"r\")\n-\t\t\t   (match_operand:DI 2 \"arith_reg_operand\" \"r\"))\n-\t\t      (match_operand:DI 0 \"target_operand\" \"b\")\n-\t\t      (pc)))]\n-  \"TARGET_SHMEDIA\"\n-  \"bgeu\t%2, %1, %0\")\n-\n-(define_insn \"*bltu_media_i\"\n-  [(set (pc)\n-\t(if_then_else (ltu (match_operand:DI 1 \"arith_reg_operand\" \"r\")\n-\t\t\t   (match_operand:DI 2 \"arith_reg_operand\" \"r\"))\n+\t(if_then_else (match_operator 3 \"less_comparison_operator\"\n+\t\t\t[(match_operand:DI 1 \"arith_reg_operand\" \"rN\")\n+\t\t\t (match_operand:DI 2 \"arith_reg_operand\" \"rN\")])\n \t\t      (match_operand:DI 0 \"target_operand\" \"b\")\n \t\t      (pc)))]\n   \"TARGET_SHMEDIA\"\n-  \"bgtu\t%2, %1, %0\")\n+  \"b%o3%'\t%N2, %N1, %0\"\n+  [(set_attr \"type\" \"cbranch_media\")])\n \n (define_expand \"beq\"\n   [(set (pc)\n@@ -4922,8 +4863,10 @@\n \t  DONE;\n \t}\n \n-      sh_compare_op0 = force_reg (DImode, sh_compare_op0);\n-      sh_compare_op1 = force_reg (DImode, sh_compare_op1);\n+      if (sh_compare_op0 != const0_rtx)\n+\tsh_compare_op0 = force_reg (DImode, sh_compare_op0);\n+      if (sh_compare_op1 != const0_rtx)\n+\tsh_compare_op1 = force_reg (DImode, sh_compare_op1);\n       emit_jump_insn (gen_bgt_media (operands[0],\n \t\t\t\t     sh_compare_op0, sh_compare_op1));\n       DONE;\n@@ -4951,8 +4894,10 @@\n \t  DONE;\n \t}\n \n-      sh_compare_op0 = force_reg (DImode, sh_compare_op0);\n-      sh_compare_op1 = force_reg (DImode, sh_compare_op1);\n+      if (sh_compare_op0 != const0_rtx)\n+\tsh_compare_op0 = force_reg (DImode, sh_compare_op0);\n+      if (sh_compare_op1 != const0_rtx)\n+\tsh_compare_op1 = force_reg (DImode, sh_compare_op1);\n       emit_jump_insn (gen_bgt_media (operands[0],\n \t\t\t\t     sh_compare_op1, sh_compare_op0));\n       DONE;\n@@ -4988,8 +4933,10 @@\n \t  DONE;\n \t}\n \n-      sh_compare_op0 = force_reg (DImode, sh_compare_op0);\n-      sh_compare_op1 = force_reg (DImode, sh_compare_op1);\n+      if (sh_compare_op0 != const0_rtx)\n+\tsh_compare_op0 = force_reg (DImode, sh_compare_op0);\n+      if (sh_compare_op1 != const0_rtx)\n+\tsh_compare_op1 = force_reg (DImode, sh_compare_op1);\n       emit_jump_insn (gen_bge_media (operands[0],\n \t\t\t\t     sh_compare_op1, sh_compare_op0));\n       DONE;\n@@ -5027,8 +4974,10 @@\n \t  DONE;\n \t}\n \n-      sh_compare_op0 = force_reg (DImode, sh_compare_op0);\n-      sh_compare_op1 = force_reg (DImode, sh_compare_op1);\n+      if (sh_compare_op0 != const0_rtx)\n+\tsh_compare_op0 = force_reg (DImode, sh_compare_op0);\n+      if (sh_compare_op1 != const0_rtx)\n+\tsh_compare_op1 = force_reg (DImode, sh_compare_op1);\n       emit_jump_insn (gen_bge_media (operands[0],\n \t\t\t\t     sh_compare_op0, sh_compare_op1));\n       DONE;\n@@ -5057,8 +5006,10 @@\n {\n   if (TARGET_SHMEDIA)\n     {\n-      sh_compare_op0 = force_reg (DImode, sh_compare_op0);\n-      sh_compare_op1 = force_reg (DImode, sh_compare_op1);\n+      if (sh_compare_op0 != const0_rtx)\n+\tsh_compare_op0 = force_reg (DImode, sh_compare_op0);\n+      if (sh_compare_op1 != const0_rtx)\n+\tsh_compare_op1 = force_reg (DImode, sh_compare_op1);\n       emit_jump_insn (gen_bgtu_media (operands[0],\n \t\t\t\t      sh_compare_op0, sh_compare_op1));\n       DONE;\n@@ -5077,8 +5028,10 @@\n {\n   if (TARGET_SHMEDIA)\n     {\n-      sh_compare_op0 = force_reg (DImode, sh_compare_op0);\n-      sh_compare_op1 = force_reg (DImode, sh_compare_op1);\n+      if (sh_compare_op0 != const0_rtx)\n+\tsh_compare_op0 = force_reg (DImode, sh_compare_op0);\n+      if (sh_compare_op1 != const0_rtx)\n+\tsh_compare_op1 = force_reg (DImode, sh_compare_op1);\n       emit_jump_insn (gen_bgtu_media (operands[0],\n \t\t\t\t      sh_compare_op1, sh_compare_op0));\n       DONE;\n@@ -5097,8 +5050,10 @@\n {\n   if (TARGET_SHMEDIA)\n     {\n-      sh_compare_op0 = force_reg (DImode, sh_compare_op0);\n-      sh_compare_op1 = force_reg (DImode, sh_compare_op1);\n+      if (sh_compare_op0 != const0_rtx)\n+\tsh_compare_op0 = force_reg (DImode, sh_compare_op0);\n+      if (sh_compare_op1 != const0_rtx)\n+\tsh_compare_op1 = force_reg (DImode, sh_compare_op1);\n       emit_jump_insn (gen_bgeu_media (operands[0],\n \t\t\t\t      sh_compare_op0, sh_compare_op1));\n       DONE;\n@@ -5117,8 +5072,10 @@\n {\n   if (TARGET_SHMEDIA)\n     {\n-      sh_compare_op0 = force_reg (DImode, sh_compare_op0);\n-      sh_compare_op1 = force_reg (DImode, sh_compare_op1);\n+      if (sh_compare_op0 != const0_rtx)\n+\tsh_compare_op0 = force_reg (DImode, sh_compare_op0);\n+      if (sh_compare_op1 != const0_rtx)\n+\tsh_compare_op1 = force_reg (DImode, sh_compare_op1);\n       emit_jump_insn (gen_bgeu_media (operands[0],\n \t\t\t\t      sh_compare_op1, sh_compare_op0));\n       DONE;"}]}