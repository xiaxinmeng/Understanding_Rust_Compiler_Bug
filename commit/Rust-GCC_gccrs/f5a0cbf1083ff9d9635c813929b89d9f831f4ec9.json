{"sha": "f5a0cbf1083ff9d9635c813929b89d9f831f4ec9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVhMGNiZjEwODNmZjlkOTYzNWM4MTM5MjliODlkOWY4MzFmNGVjOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-11-19T10:54:33Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-11-19T10:54:33Z"}, "message": "* adaint.h, adaint.c\n\t(__gnat_portable_spawn): Fix cast of spawnvp third parameter\n\tto avoid warnings.\n\tAdd also a cast to kill another warning.\n\t(win32_no_block_spawn): Initialize CreateProcess's dwCreationFlags\n\tparameter with the priority class of the parent process instead of\n\talways using the NORMAL_PRIORITY_CLASS.\n\t(__gnat_dup): New function.\n\t(__gnat_dup2): New function.\n\t(__gnat_is_symbolic_link): Enable the effective body of this\n\tfunction when __APPLE__ is defined.\n\n\t* g-os_lib.ads, g-os_lib.adb (Spawn): Two new procedures.\n\tUpdate comments.\n\nFrom-SVN: r90899", "tree": {"sha": "3063d70e8397901bd7a7baad967d07c7ed60675e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3063d70e8397901bd7a7baad967d07c7ed60675e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5a0cbf1083ff9d9635c813929b89d9f831f4ec9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5a0cbf1083ff9d9635c813929b89d9f831f4ec9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5a0cbf1083ff9d9635c813929b89d9f831f4ec9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5a0cbf1083ff9d9635c813929b89d9f831f4ec9/comments", "author": null, "committer": null, "parents": [{"sha": "f99652b5e31bf860a7a007e71e67796f047a3512", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99652b5e31bf860a7a007e71e67796f047a3512", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f99652b5e31bf860a7a007e71e67796f047a3512"}], "stats": {"total": 158, "additions": 147, "deletions": 11}, "files": [{"sha": "8ed3b40fe188a52eeef69b9b684c5e56926b65a1", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a0cbf1083ff9d9635c813929b89d9f831f4ec9/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a0cbf1083ff9d9635c813929b89d9f831f4ec9/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=f5a0cbf1083ff9d9635c813929b89d9f831f4ec9", "patch": "@@ -1512,7 +1512,7 @@ __gnat_is_symbolic_link (char *name ATTRIBUTE_UNUSED)\n #if defined (__vxworks)\n   return 0;\n \n-#elif defined (_AIX) || defined (__unix__)\n+#elif defined (_AIX) || defined (__APPLE__) || defined (__unix__)\n   int ret;\n   struct stat statbuf;\n \n@@ -1557,11 +1557,11 @@ __gnat_portable_spawn (char *args[])\n   strcat (args[0], args_0);\n   strcat (args[0], \"\\\"\");\n \n-  status = spawnvp (P_WAIT, args_0, (const char* const*)args);\n+  status = spawnvp (P_WAIT, args_0, (char* const*)args);\n \n   /* restore previous value */\n   free (args[0]);\n-  args[0] = args_0;\n+  args[0] = (char *)args_0;\n \n   if (status < 0)\n     return -1;\n@@ -1606,6 +1606,34 @@ __gnat_portable_spawn (char *args[])\n   return 0;\n }\n \n+/* Create a copy of the given file descriptor.\n+   Return -1 if an error occurred.  */\n+\n+int\n+__gnat_dup (int oldfd)\n+{\n+#if defined (__vxworks)\n+   /* Not supported on VxWorks.  */\n+   return -1;\n+#else\n+   return dup (oldfd);\n+#endif\n+}\n+\n+/* Make newfd be the copy of oldfd, closing newfd first if necessary.\n+   Return -1 if an error occured.  */\n+\n+int\n+__gnat_dup2 (int oldfd, int newfd)\n+{\n+#if defined (__vxworks)\n+  /* Not supported on VxWorks.  */\n+  return -1;\n+#else\n+  return dup2 (oldfd, newfd);\n+#endif\n+}\n+\n /* WIN32 code to implement a wait call that wait for any child process.  */\n \n #ifdef _WIN32\n@@ -1743,8 +1771,9 @@ win32_no_block_spawn (char *command, char *args[])\n       k++;\n     }\n \n-  result = CreateProcess (NULL, (char *) full_command, &SA, NULL, TRUE,\n-                          NORMAL_PRIORITY_CLASS, NULL, NULL, &SI, &PI);\n+  result = CreateProcess\n+\t     (NULL, (char *) full_command, &SA, NULL, TRUE,\n+              GetPriorityClass (GetCurrentProcess()), NULL, NULL, &SI, &PI);\n \n   free (full_command);\n "}, {"sha": "ebf99a59bd88643cd4a947ce8ece60c16e3386a1", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a0cbf1083ff9d9635c813929b89d9f831f4ec9/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a0cbf1083ff9d9635c813929b89d9f831f4ec9/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=f5a0cbf1083ff9d9635c813929b89d9f831f4ec9", "patch": "@@ -147,6 +147,8 @@ extern void   __gnat_set_binary_mode\t\t   (int);\n extern void   __gnat_set_text_mode\t\t   (int);\n extern char  *__gnat_ttyname\t\t\t   (int);\n extern int    __gnat_lseek\t\t\t   (int, long, int);\n+extern int    __gnat_dup\t\t\t   (int);\n+extern int    __gnat_dup2\t\t\t   (int, int);\n \n #ifdef __MINGW32__\n extern void   __gnat_plist_init                    (void);"}, {"sha": "2513d6682d0439c5cd011e7a343591169ab904d9", "filename": "gcc/ada/g-os_lib.adb", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a0cbf1083ff9d9635c813929b89d9f831f4ec9/gcc%2Fada%2Fg-os_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a0cbf1083ff9d9635c813929b89d9f831f4ec9/gcc%2Fada%2Fg-os_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-os_lib.adb?ref=f5a0cbf1083ff9d9635c813929b89d9f831f4ec9", "patch": "@@ -2143,6 +2143,80 @@ package body GNAT.OS_Lib is\n       Success := (Spawn (Program_Name, Args) = 0);\n    end Spawn;\n \n+   procedure Spawn\n+     (Program_Name           : String;\n+      Args                   : Argument_List;\n+      Output_File_Descriptor : File_Descriptor;\n+      Return_Code            : out Integer;\n+      Err_To_Out             : Boolean := True)\n+   is\n+      function Dup (Fd : File_Descriptor) return File_Descriptor;\n+      pragma Import (C, Dup, \"__gnat_dup\");\n+\n+      procedure Dup2 (Old_Fd, New_Fd : File_Descriptor);\n+      pragma Import (C, Dup2, \"__gnat_dup2\");\n+\n+      Saved_Output : File_Descriptor;\n+      Saved_Error  : File_Descriptor;\n+\n+   begin\n+      --  Set standard output and error to the temporary file\n+\n+      Saved_Output := Dup (Standout);\n+      Dup2 (Output_File_Descriptor, Standout);\n+\n+      if Err_To_Out then\n+         Saved_Error  := Dup (Standerr);\n+         Dup2 (Output_File_Descriptor, Standerr);\n+      end if;\n+\n+      --  Spawn the program\n+\n+      Return_Code := Spawn (Program_Name, Args);\n+\n+      --  Restore the standard output and error\n+\n+      Dup2 (Saved_Output, Standout);\n+\n+      if Err_To_Out then\n+         Dup2 (Saved_Error, Standerr);\n+      end if;\n+\n+      --  And close the saved standard output and error file descriptors.\n+\n+      Close (Saved_Output);\n+\n+      if Err_To_Out then\n+         Close (Saved_Error);\n+      end if;\n+   end Spawn;\n+\n+   procedure Spawn\n+     (Program_Name  : String;\n+      Args          : Argument_List;\n+      Output_File   : String;\n+      Success       : out Boolean;\n+      Return_Code   : out Integer;\n+      Err_To_Out    : Boolean := True)\n+   is\n+      FD : File_Descriptor;\n+\n+   begin\n+      Success := True;\n+      Return_Code := 0;\n+\n+      FD := Create_Output_Text_File (Output_File);\n+\n+      if FD = Invalid_FD then\n+         Success := False;\n+         return;\n+      end if;\n+\n+      Spawn (Program_Name, Args, FD, Return_Code, Err_To_Out);\n+\n+      Close (FD, Success);\n+   end Spawn;\n+\n    --------------------\n    -- Spawn_Internal --\n    --------------------"}, {"sha": "fb32ac1dd7b9328ad957a03c78b10ab3e8a4fdfb", "filename": "gcc/ada/g-os_lib.ads", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a0cbf1083ff9d9635c813929b89d9f831f4ec9/gcc%2Fada%2Fg-os_lib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a0cbf1083ff9d9635c813929b89d9f831f4ec9/gcc%2Fada%2Fg-os_lib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-os_lib.ads?ref=f5a0cbf1083ff9d9635c813929b89d9f831f4ec9", "patch": "@@ -420,12 +420,12 @@ pragma Elaborate_Body (OS_Lib);\n    --  returns an empty string.\n    --\n    --  For case-sensitive file systems, the value of Case_Sensitive parameter\n-   --  is ignored. In systems that have a non case-sensitive file system like\n-   --  Windows and OpenVMS, if this parameter is set OFF, then the result\n-   --  is returned folded to lower case, this allows to checks if two files\n-   --  are the same by applying this function to their names and by comparing\n-   --  the results of these calls. If Case_Sensitive is ON, this function does\n-   --  not change the casing of file and directory names.\n+   --  is ignored.  For file systems that are not case-sensitive, such as\n+   --  Windows and OpenVMS, if this parameter is set to False, then the file\n+   --  and directory names are folded to lower case. This allows checking\n+   --  whether two files are the same by applying this function to their names\n+   --  and comparing the results.  If Case_Sensitive is set to True, this\n+   --  function does not change the casing of file and directory names.\n \n    function Is_Absolute_Path (Name : String) return Boolean;\n    --  Returns True if Name is an absolute path name, i.e. it designates\n@@ -652,7 +652,38 @@ pragma Elaborate_Body (OS_Lib);\n    --  operating systems which have no notion of separately spawnable programs.\n    --\n    --  \"Spawn\" should not be used in tasking applications.\n+\n+   procedure Spawn\n+     (Program_Name           : String;\n+      Args                   : Argument_List;\n+      Output_File_Descriptor : File_Descriptor;\n+      Return_Code            : out Integer;\n+      Err_To_Out             : Boolean := True);\n+   --  Similar to the procedure above, but redirects the output to\n+   --  the file designated by Output_File_Descriptor. If Err_To_Out\n+   --  is True, then the Standard Error output is also redirected.\n+   --\n+   --  Return_Code is set to the status code returned by the operating\n+   --  system as described above.\n    --\n+   --  \"Spawn\" should not be used in tasking applications.\n+\n+   procedure Spawn\n+     (Program_Name  : String;\n+      Args          : Argument_List;\n+      Output_File   : String;\n+      Success       : out Boolean;\n+      Return_Code   : out Integer;\n+      Err_To_Out    : Boolean := True);\n+   --  Similar to the procedure above, but saves the output of the command\n+   --  to a file with the name Output_File.\n+   --\n+   --  Success is set to True if the command is executed and its output\n+   --  successfully written to the file. If Success is True, then\n+   --  Return_Code will be set to the status code returned by the\n+   --  operating system. Otherwise, Return_Code is undefined.\n+   --\n+   --  \"Spawn\" should not be used in tasking applications.\n \n    type Process_Id is private;\n    --  A private type used to identify a process activated by the following"}]}