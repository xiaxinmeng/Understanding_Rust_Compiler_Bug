{"sha": "1146e682161b865edd7d440bfe2c7d4f42308dbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE0NmU2ODIxNjFiODY1ZWRkN2Q0NDBiZmUyYzdkNGY0MjMwOGRiZQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2006-01-03T04:57:10Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2006-01-03T04:57:10Z"}, "message": "Index: gcc/ChangeLog\n2006-01-02  Geoffrey Keating  <geoffk@apple.com>\n\n\t* dwarf2out.c (have_switched_text_section): Delete.\n\t(have_multiple_function_sections): New.\n\t(have_location_lists): Make 'bool'.\n\t(add_AT_loc_list): Use 'true' not '1'.\n\t(dwarf2out_switch_text_section): Set have_multiple_function_sections.\n\t(output_loc_list): Use have_multiple_function_sections.\n\t(output_ranges): Likewise.\n\t(dwarf2out_begin_function): Set have_multiple_function_sections if\n\tnecessary.\n\t(dwarf2out_source_line): Don't fake separate_line_info_table_in_use.\n\tCheck function_section rather than DECL_SECTION_NAME.\n\t(dwarf2out_finish): Use have_multiple_function_sections.\n\tDon't clear have_location_lists.\n\nIndex: gcc/testsuite/ChangeLog\n2006-01-02  Geoffrey Keating  <geoffk@apple.com>\n\n\t* g++.dg/debug/debug9.C: New.\n\nFrom-SVN: r109260", "tree": {"sha": "40bc676762641a40b8792a8cd71b443369577e32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40bc676762641a40b8792a8cd71b443369577e32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1146e682161b865edd7d440bfe2c7d4f42308dbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1146e682161b865edd7d440bfe2c7d4f42308dbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1146e682161b865edd7d440bfe2c7d4f42308dbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1146e682161b865edd7d440bfe2c7d4f42308dbe/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ae500d240055e40000336e7b88a4d569040ec4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae500d240055e40000336e7b88a4d569040ec4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ae500d240055e40000336e7b88a4d569040ec4c"}], "stats": {"total": 100, "additions": 72, "deletions": 28}, "files": [{"sha": "cac247956039a7fdd63631ef2cd2f47da6d792e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1146e682161b865edd7d440bfe2c7d4f42308dbe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1146e682161b865edd7d440bfe2c7d4f42308dbe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1146e682161b865edd7d440bfe2c7d4f42308dbe", "patch": "@@ -1,3 +1,19 @@\n+2006-01-02  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* dwarf2out.c (have_switched_text_section): Delete.\n+\t(have_multiple_function_sections): New.\n+\t(have_location_lists): Make 'bool'.\n+\t(add_AT_loc_list): Use 'true' not '1'.\n+\t(dwarf2out_switch_text_section): Set have_multiple_function_sections.\n+\t(output_loc_list): Use have_multiple_function_sections.\n+\t(output_ranges): Likewise.\n+\t(dwarf2out_begin_function): Set have_multiple_function_sections if\n+\tnecessary.\n+\t(dwarf2out_source_line): Don't fake separate_line_info_table_in_use.\n+\tCheck function_section rather than DECL_SECTION_NAME.\n+\t(dwarf2out_finish): Use have_multiple_function_sections.\n+\tDon't clear have_location_lists.\n+\n 2006-01-02  Eric Botcazou  <ebotcazou@adacore.com>\n             Jan Hubicka  <jh@suse.cz>\n "}, {"sha": "868333d46e0f9a47c2cc2aafee30706a948fe5ad", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1146e682161b865edd7d440bfe2c7d4f42308dbe/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1146e682161b865edd7d440bfe2c7d4f42308dbe/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=1146e682161b865edd7d440bfe2c7d4f42308dbe", "patch": "@@ -3845,8 +3845,8 @@ static GTY(()) unsigned line_info_table_allocated;\n /* Number of elements in line_info_table currently in use.  */\n static GTY(()) unsigned line_info_table_in_use;\n \n-/* True if the compilation unit contains more than one .text section.  */\n-static GTY(()) bool have_switched_text_section = false;\n+/* True if the compilation unit places functions in more than one section.  */\n+static GTY(()) bool have_multiple_function_sections = false;\n \n /* A pointer to the base of a table that contains line information\n    for each source code line outside of .text in the compilation unit.  */\n@@ -3904,7 +3904,7 @@ static GTY(()) unsigned ranges_table_in_use;\n #define RANGES_TABLE_INCREMENT 64\n \n /* Whether we have location lists that need outputting */\n-static GTY(()) unsigned have_location_lists;\n+static GTY(()) bool have_location_lists;\n \n /* Unique label counter.  */\n static GTY(()) unsigned int loclabel_num;\n@@ -5102,7 +5102,7 @@ add_AT_loc_list (dw_die_ref die, enum dwarf_attribute attr_kind, dw_loc_list_ref\n   attr->dw_attr_val.val_class = dw_val_class_loc_list;\n   attr->dw_attr_val.v.val_loc_list = loc_list;\n   add_dwarf_attr (die, attr);\n-  have_location_lists = 1;\n+  have_location_lists = true;\n }\n \n static inline dw_loc_list_ref\n@@ -6920,7 +6920,7 @@ dwarf2out_switch_text_section (void)\n   fde->dw_fde_hot_section_end_label = cfun->hot_section_end_label;\n   fde->dw_fde_unlikely_section_label = cfun->cold_section_label;\n   fde->dw_fde_unlikely_section_end_label = cfun->cold_section_end_label;\n-  have_switched_text_section = true;\n+  have_multiple_function_sections = true;\n }\n \n /* Output the location list given to us.  */\n@@ -6936,7 +6936,7 @@ output_loc_list (dw_loc_list_ref list_head)\n   for (curr = list_head; curr != NULL; curr = curr->dw_loc_next)\n     {\n       unsigned long size;\n-      if (!separate_line_info_table_in_use && !have_switched_text_section)\n+      if (!have_multiple_function_sections)\n \t{\n \t  dw2_asm_output_delta (DWARF2_ADDR_SIZE, curr->begin, curr->section,\n \t\t\t\t\"Location list begin address (%s)\",\n@@ -7445,7 +7445,7 @@ output_ranges (void)\n \t  /* If all code is in the text section, then the compilation\n \t     unit base address defaults to DW_AT_low_pc, which is the\n \t     base of the text section.  */\n-\t  if (!separate_line_info_table_in_use && !have_switched_text_section)\n+\t  if (!have_multiple_function_sections)\n \t    {\n \t      dw2_asm_output_delta (DWARF2_ADDR_SIZE, blabel,\n \t\t\t\t    text_section_label,\n@@ -13571,13 +13571,16 @@ dwarf2out_var_location (rtx loc_note)\n \n /* We need to reset the locations at the beginning of each\n    function. We can't do this in the end_function hook, because the\n-   declarations that use the locations won't have been outputted when\n-   that hook is called.  */\n+   declarations that use the locations won't have been output when\n+   that hook is called.  Also compute have_multiple_function_sections here.  */\n \n static void\n-dwarf2out_begin_function (tree unused ATTRIBUTE_UNUSED)\n+dwarf2out_begin_function (tree fun)\n {\n   htab_empty (decl_loc_table);\n+  \n+  if (function_section (fun) != text_section)\n+    have_multiple_function_sections = true;\n }\n \n /* Output a label to mark the beginning of a source code line entry\n@@ -13608,12 +13611,8 @@ dwarf2out_source_line (unsigned int line, const char *filename)\n \n \t  /* Indicate that line number info exists.  */\n \t  line_info_table_in_use++;\n-\n-\t  /* Indicate that multiple line number tables exist.  */\n-\t  if (DECL_SECTION_NAME (current_function_decl))\n-\t    separate_line_info_table_in_use++;\n \t}\n-      else if (DECL_SECTION_NAME (current_function_decl))\n+      else if (function_section (current_function_decl) != text_section)\n \t{\n \t  dw_separate_line_info_ref line_info;\n \t  targetm.asm_out.internal_label (asm_out_file, SEPARATE_LINE_CODE_LABEL,\n@@ -14195,21 +14194,9 @@ dwarf2out_finish (const char *filename)\n       output_line_info ();\n     }\n \n-  /* Output location list section if necessary.  */\n-  if (have_location_lists)\n-    {\n-      /* Output the location lists info.  */\n-      switch_to_section (debug_loc_section);\n-      ASM_GENERATE_INTERNAL_LABEL (loc_section_label,\n-\t\t\t\t   DEBUG_LOC_SECTION_LABEL, 0);\n-      ASM_OUTPUT_LABEL (asm_out_file, loc_section_label);\n-      output_location_lists (die);\n-      have_location_lists = 0;\n-    }\n-\n   /* We can only use the low/high_pc attributes if all of the code was\n      in .text.  */\n-  if (!separate_line_info_table_in_use && !have_switched_text_section)\n+  if (!have_multiple_function_sections)\n     {\n       add_AT_lbl_id (comp_unit_die, DW_AT_low_pc, text_section_label);\n       add_AT_lbl_id (comp_unit_die, DW_AT_high_pc, text_end_label);\n@@ -14220,6 +14207,17 @@ dwarf2out_finish (const char *filename)\n   else if (have_location_lists || ranges_table_in_use)\n     add_AT_addr (comp_unit_die, DW_AT_entry_pc, const0_rtx);\n \n+  /* Output location list section if necessary.  */\n+  if (have_location_lists)\n+    {\n+      /* Output the location lists info.  */\n+      switch_to_section (debug_loc_section);\n+      ASM_GENERATE_INTERNAL_LABEL (loc_section_label,\n+\t\t\t\t   DEBUG_LOC_SECTION_LABEL, 0);\n+      ASM_OUTPUT_LABEL (asm_out_file, loc_section_label);\n+      output_location_lists (die);\n+    }\n+\n   if (debug_info_level >= DINFO_LEVEL_NORMAL)\n     add_AT_lbl_offset (comp_unit_die, DW_AT_stmt_list,\n \t\t       debug_line_section_label);"}, {"sha": "a09d8040a0503c06c6a589af676ee7e8f6b7f7fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1146e682161b865edd7d440bfe2c7d4f42308dbe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1146e682161b865edd7d440bfe2c7d4f42308dbe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1146e682161b865edd7d440bfe2c7d4f42308dbe", "patch": "@@ -1,3 +1,7 @@\n+2006-01-02  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* g++.dg/debug/debug9.C: New.\n+\n 2006-01-02  Steven G. Kargl  <kargls@comcast.net>\n \n \tPR fortran/24640"}, {"sha": "aa328ee6f79abe7ead17bd06fb1a793f91d68aeb", "filename": "gcc/testsuite/g++.dg/debug/debug9.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1146e682161b865edd7d440bfe2c7d4f42308dbe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdebug9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1146e682161b865edd7d440bfe2c7d4f42308dbe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdebug9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdebug9.C?ref=1146e682161b865edd7d440bfe2c7d4f42308dbe", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do assemble } */\n+/* This testcase requires entries in the debug_range section in DWARF which\n+   refer to a vague linkage function.  */\n+\n+struct s\n+{\n+  ~s ();\n+};\n+\n+bool f1 ();\n+s f2 (s);\n+\n+template<int x> void\n+f3(const s & a)\n+{\n+  while (f1 () && f1 ())\n+    {\n+      s c = f2(a);\n+    }\n+}\n+\n+int main()\n+{\n+   f3<0>(s ());\n+   return 0;\n+}"}]}