{"sha": "315405b66954a298c39503347f1997ca2e0647f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE1NDA1YjY2OTU0YTI5OGMzOTUwMzM0N2YxOTk3Y2EyZTA2NDdmNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-02-01T07:56:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-02-01T07:56:49Z"}, "message": "configure.tgt: Fix i?86-*-linux* entry.\n\n\t* configure.tgt: Fix i?86-*-linux* entry.\n\t* rt/sat_arithmetic.c (__hsail_sat_add_u32, __hsail_sat_add_u64,\n\t__hsail_sat_add_s32, __hsail_sat_add_s64): Use __builtin_add_overflow.\n\t(__hsail_sat_sub_u8, __hsail_sat_sub_u16): Remove pointless for overflow\n\tover maximum.\n\t(__hsail_sat_sub_u32, __hsail_sat_sub_u64, __hsail_sat_sub_s32,\n\t__hsail_sat_sub_s64): Use __builtin_sub_overflow.\n\t(__hsail_sat_mul_u32, __hsail_sat_mul_u64, __hsail_sat_mul_s32,\n\t__hsail_sat_mul_s64): Use __builtin_mul_overflow.\n\t* rt/arithmetic.c (__hsail_borrow_u32, __hsail_borrow_u64): Use\n\t__builtin_sub_overflow_p.\n\t(__hsail_carry_u32, __hsail_carry_u64): Use __builtin_add_overflow_p.\n\t* rt/misc.c (__hsail_groupbaseptr, __hsail_kernargbaseptr_u64):\n\tCast pointers to uintptr_t first before casting to some other integral\n\ttype.\n\t* rt/segment.c (__hsail_segmentp_private, __hsail_segmentp_group): Likewise.\n\t* rt/queue.c (__hsail_ldqueuereadindex, __hsail_ldqueuewriteindex,\n\t__hsail_addqueuewriteindex, __hsail_casqueuewriteindex,\n\t__hsail_stqueuereadindex, __hsail_stqueuewriteindex): Cast integral value\n\tto uintptr_t first before casting to pointer.\n\t* rt/workitems.c (__hsail_alloca_pop_frame): Cast memcpy first argument to\n\tvoid * to avoid warning.\n\nFrom-SVN: r245080", "tree": {"sha": "844722cda248062f0dfa95b9df9d2326de923bde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/844722cda248062f0dfa95b9df9d2326de923bde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/315405b66954a298c39503347f1997ca2e0647f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/315405b66954a298c39503347f1997ca2e0647f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/315405b66954a298c39503347f1997ca2e0647f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/315405b66954a298c39503347f1997ca2e0647f4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6b3430bd61e82c0989a97e27f9a0974879aa9a8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b3430bd61e82c0989a97e27f9a0974879aa9a8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b3430bd61e82c0989a97e27f9a0974879aa9a8e"}], "stats": {"total": 203, "additions": 90, "deletions": 113}, "files": [{"sha": "70aecf364bf2dc7f41d88483d64ac4d585b4877a", "filename": "libhsail-rt/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315405b66954a298c39503347f1997ca2e0647f4/libhsail-rt%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315405b66954a298c39503347f1997ca2e0647f4/libhsail-rt%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libhsail-rt%2FChangeLog?ref=315405b66954a298c39503347f1997ca2e0647f4", "patch": "@@ -1,3 +1,28 @@\n+2017-02-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure.tgt: Fix i?86-*-linux* entry.\n+\t* rt/sat_arithmetic.c (__hsail_sat_add_u32, __hsail_sat_add_u64,\n+\t__hsail_sat_add_s32, __hsail_sat_add_s64): Use __builtin_add_overflow.\n+\t(__hsail_sat_sub_u8, __hsail_sat_sub_u16): Remove pointless for overflow\n+\tover maximum.\n+\t(__hsail_sat_sub_u32, __hsail_sat_sub_u64, __hsail_sat_sub_s32,\n+\t__hsail_sat_sub_s64): Use __builtin_sub_overflow.\n+\t(__hsail_sat_mul_u32, __hsail_sat_mul_u64, __hsail_sat_mul_s32,\n+\t__hsail_sat_mul_s64): Use __builtin_mul_overflow.\n+\t* rt/arithmetic.c (__hsail_borrow_u32, __hsail_borrow_u64): Use\n+\t__builtin_sub_overflow_p.\n+\t(__hsail_carry_u32, __hsail_carry_u64): Use __builtin_add_overflow_p.\n+\t* rt/misc.c (__hsail_groupbaseptr, __hsail_kernargbaseptr_u64):\n+\tCast pointers to uintptr_t first before casting to some other integral\n+\ttype.\n+\t* rt/segment.c (__hsail_segmentp_private, __hsail_segmentp_group): Likewise.\n+\t* rt/queue.c (__hsail_ldqueuereadindex, __hsail_ldqueuewriteindex,\n+\t__hsail_addqueuewriteindex, __hsail_casqueuewriteindex,\n+\t__hsail_stqueuereadindex, __hsail_stqueuewriteindex): Cast integral value\n+\tto uintptr_t first before casting to pointer.\n+\t* rt/workitems.c (__hsail_alloca_pop_frame): Cast memcpy first argument to\n+\tvoid * to avoid warning.\n+\n 2017-01-27  Pekka J\u00e4\u00e4skel\u00e4inen  <pekka.jaaskelainen@parmance.com>\n \n \t* configure.tgt: Moved the white list of supported targets here"}, {"sha": "3868d26ee4c9b58a060490308635d26d5ee81136", "filename": "libhsail-rt/configure.tgt", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315405b66954a298c39503347f1997ca2e0647f4/libhsail-rt%2Fconfigure.tgt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315405b66954a298c39503347f1997ca2e0647f4/libhsail-rt%2Fconfigure.tgt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libhsail-rt%2Fconfigure.tgt?ref=315405b66954a298c39503347f1997ca2e0647f4", "patch": "@@ -28,9 +28,7 @@\n # broken systems. Currently it has been tested only on x86_64 Linux\n # of the upstream gcc targets. More targets shall be added after testing.\n case \"${target}\" in\n-  i[[3456789]]86-*linux*)\n-    ;;\n-  x86_64-*-linux*)\n+  x86_64-*-linux* | i?86-*-linux*)\n     ;;\n     *)\n     UNSUPPORTED=1"}, {"sha": "3d8e62c7741ad98131b78d8922b56969d70217a0", "filename": "libhsail-rt/rt/arithmetic.c", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315405b66954a298c39503347f1997ca2e0647f4/libhsail-rt%2Frt%2Farithmetic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315405b66954a298c39503347f1997ca2e0647f4/libhsail-rt%2Frt%2Farithmetic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libhsail-rt%2Frt%2Farithmetic.c?ref=315405b66954a298c39503347f1997ca2e0647f4", "patch": "@@ -376,41 +376,25 @@ __hsail_ftz_f64 (double a)\n uint32_t\n __hsail_borrow_u32 (uint32_t a, uint32_t b)\n {\n-  uint64_t c = (uint64_t) a - (uint64_t) b;\n-  if (c > UINT32_MAX)\n-    return 1;\n-  else\n-    return 0;\n+  return __builtin_sub_overflow_p (a, b, a);\n }\n \n uint64_t\n __hsail_borrow_u64 (uint64_t a, uint64_t b)\n {\n-  __uint128_t c = (__uint128_t) a - (__uint128_t) b;\n-  if (c > UINT64_MAX)\n-    return 1;\n-  else\n-    return 0;\n+  return __builtin_sub_overflow_p (a, b, a);\n }\n \n uint32_t\n __hsail_carry_u32 (uint32_t a, uint32_t b)\n {\n-  uint64_t c = (uint64_t) a + (uint64_t) b;\n-  if (c > UINT32_MAX)\n-    return 1;\n-  else\n-    return 0;\n+  return __builtin_add_overflow_p (a, b, a);\n }\n \n uint64_t\n __hsail_carry_u64 (uint64_t a, uint64_t b)\n {\n-  __uint128_t c = (__uint128_t) a + (__uint128_t) b;\n-  if (c > UINT64_MAX)\n-    return 1;\n-  else\n-    return 0;\n+  return __builtin_add_overflow_p (a, b, a);\n }\n \n float"}, {"sha": "3b9fddb9d7c4b1737fd56d8a2fddd91f1b989357", "filename": "libhsail-rt/rt/misc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315405b66954a298c39503347f1997ca2e0647f4/libhsail-rt%2Frt%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315405b66954a298c39503347f1997ca2e0647f4/libhsail-rt%2Frt%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libhsail-rt%2Frt%2Fmisc.c?ref=315405b66954a298c39503347f1997ca2e0647f4", "patch": "@@ -68,16 +68,16 @@ __hsail_debugtrap (uint32_t src, PHSAWorkItem *wi)\n uint32_t\n __hsail_groupbaseptr (PHSAWorkItem *wi)\n {\n-  return (uint32_t) (uint64_t) (wi->wg->group_base_ptr\n-\t\t\t\t- wi->launch_data->group_segment_start_addr);\n+  return (uint32_t) (uintptr_t) (wi->wg->group_base_ptr\n+\t\t\t\t - wi->launch_data->group_segment_start_addr);\n }\n \n uint64_t\n __hsail_kernargbaseptr_u64 (PHSAWorkItem *wi)\n {\n   /* For now assume only a single kernarg allocation at a time.\n      Proper kernarg memory management to do.  */\n-  return (uint64_t) wi->launch_data->kernarg_addr;\n+  return (uint64_t) (uintptr_t) wi->launch_data->kernarg_addr;\n }\n \n uint32_t"}, {"sha": "ca078a615916d80aeef4c282c63c9281dd7dcba5", "filename": "libhsail-rt/rt/queue.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315405b66954a298c39503347f1997ca2e0647f4/libhsail-rt%2Frt%2Fqueue.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315405b66954a298c39503347f1997ca2e0647f4/libhsail-rt%2Frt%2Fqueue.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libhsail-rt%2Frt%2Fqueue.c?ref=315405b66954a298c39503347f1997ca2e0647f4", "patch": "@@ -29,43 +29,43 @@\n uint64_t\n __hsail_ldqueuereadindex (uint64_t queue_addr)\n {\n-  phsa_queue_t *queue = (phsa_queue_t *) queue_addr;\n+  phsa_queue_t *queue = (phsa_queue_t *) (uintptr_t) queue_addr;\n   return queue->read_index;\n }\n \n uint64_t\n __hsail_ldqueuewriteindex (uint64_t queue_addr)\n {\n-  phsa_queue_t *queue = (phsa_queue_t *) queue_addr;\n+  phsa_queue_t *queue = (phsa_queue_t *) (uintptr_t) queue_addr;\n   return queue->write_index;\n }\n \n uint64_t\n __hsail_addqueuewriteindex (uint64_t queue_addr, uint64_t value)\n {\n-  phsa_queue_t *queue = (phsa_queue_t *) queue_addr;\n+  phsa_queue_t *queue = (phsa_queue_t *) (uintptr_t) queue_addr;\n   return __sync_fetch_and_add (&queue->write_index, value);\n }\n \n uint64_t\n __hsail_casqueuewriteindex (uint64_t queue_addr, uint64_t cmp_value,\n \t\t\t\t   uint64_t new_value)\n {\n-  phsa_queue_t *queue = (phsa_queue_t *) queue_addr;\n+  phsa_queue_t *queue = (phsa_queue_t *) (uintptr_t) queue_addr;\n   return __sync_val_compare_and_swap (&queue->write_index, cmp_value,\n \t\t\t\t      new_value);\n }\n \n void\n __hsail_stqueuereadindex (uint64_t queue_addr, uint64_t value)\n {\n-  phsa_queue_t *queue = (phsa_queue_t *) queue_addr;\n+  phsa_queue_t *queue = (phsa_queue_t *) (uintptr_t) queue_addr;\n   queue->read_index = value;\n }\n \n void\n __hsail_stqueuewriteindex (uint64_t queue_addr, uint64_t value)\n {\n-  phsa_queue_t *queue = (phsa_queue_t *) queue_addr;\n+  phsa_queue_t *queue = (phsa_queue_t *) (uintptr_t) queue_addr;\n   queue->write_index = value;\n }"}, {"sha": "274612aca91bd4c779bf29943ad12e4f4e97b0e5", "filename": "libhsail-rt/rt/sat_arithmetic.c", "status": "modified", "additions": 42, "deletions": 74, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315405b66954a298c39503347f1997ca2e0647f4/libhsail-rt%2Frt%2Fsat_arithmetic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315405b66954a298c39503347f1997ca2e0647f4/libhsail-rt%2Frt%2Fsat_arithmetic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libhsail-rt%2Frt%2Fsat_arithmetic.c?ref=315405b66954a298c39503347f1997ca2e0647f4", "patch": "@@ -49,21 +49,19 @@ __hsail_sat_add_u16 (uint16_t a, uint16_t b)\n uint32_t\n __hsail_sat_add_u32 (uint32_t a, uint32_t b)\n {\n-  uint64_t c = (uint64_t) a + (uint64_t) b;\n-  if (c > UINT32_MAX)\n+  uint32_t c;\n+  if (__builtin_add_overflow (a, b, &c))\n     return UINT32_MAX;\n-  else\n-    return c;\n+  return c;\n }\n \n uint64_t\n __hsail_sat_add_u64 (uint64_t a, uint64_t b)\n {\n-  __uint128_t c = (__uint128_t) a + (__uint128_t) b;\n-  if (c > UINT64_MAX)\n+  uint64_t c;\n+  if (__builtin_add_overflow (a, b, &c))\n     return UINT64_MAX;\n-  else\n-    return c;\n+  return c;\n }\n \n int8_t\n@@ -93,25 +91,19 @@ __hsail_sat_add_s16 (int16_t a, int16_t b)\n int32_t\n __hsail_sat_add_s32 (int32_t a, int32_t b)\n {\n-  int64_t c = (int64_t) a + (int64_t) b;\n-  if (c > INT32_MAX)\n-    return INT32_MAX;\n-  else if (c < INT32_MIN)\n-    return INT32_MIN;\n-  else\n-    return c;\n+  int32_t c;\n+  if (__builtin_add_overflow (a, b, &c))\n+    return b < 0 ? INT32_MIN : INT32_MAX;\n+  return c;\n }\n \n int64_t\n __hsail_sat_add_s64 (int64_t a, int64_t b)\n {\n-  __int128_t c = (__int128_t) a + (__int128_t) b;\n-  if (c > INT64_MAX)\n-    return INT64_MAX;\n-  else if (c < INT64_MIN)\n-    return INT64_MIN;\n-  else\n-    return c;\n+  int64_t c;\n+  if (__builtin_add_overflow (a, b, &c))\n+    return b < 0 ? INT64_MIN : INT64_MAX;\n+  return c;\n }\n \n uint8_t\n@@ -120,8 +112,6 @@ __hsail_sat_sub_u8 (uint8_t a, uint8_t b)\n   int16_t c = (uint16_t) a - (uint16_t) b;\n   if (c < 0)\n     return 0;\n-  else if (c > UINT8_MAX)\n-    return UINT8_MAX;\n   else\n     return c;\n }\n@@ -132,34 +122,26 @@ __hsail_sat_sub_u16 (uint16_t a, uint16_t b)\n   int32_t c = (uint32_t) a - (uint32_t) b;\n   if (c < 0)\n     return 0;\n-  else if (c > UINT16_MAX)\n-    return UINT16_MAX;\n   else\n     return c;\n }\n \n uint32_t\n __hsail_sat_sub_u32 (uint32_t a, uint32_t b)\n {\n-  int64_t c = (uint64_t) a - (uint64_t) b;\n-  if (c < 0)\n+  uint32_t c;\n+  if (__builtin_sub_overflow (a, b, &c))\n     return 0;\n-  else if (c > UINT32_MAX)\n-    return UINT32_MAX;\n-  else\n-    return c;\n+  return c;\n }\n \n uint64_t\n __hsail_sat_sub_u64 (uint64_t a, uint64_t b)\n {\n-  __int128_t c = (__uint128_t) a - (__uint128_t) b;\n-  if (c < 0)\n+  uint64_t c;\n+  if (__builtin_sub_overflow (a, b, &c))\n     return 0;\n-  else if (c > UINT64_MAX)\n-    return UINT64_MAX;\n-  else\n-    return c;\n+  return c;\n }\n \n int8_t\n@@ -189,25 +171,19 @@ __hsail_sat_sub_s16 (int16_t a, int16_t b)\n int32_t\n __hsail_sat_sub_s32 (int32_t a, int32_t b)\n {\n-  int64_t c = (int64_t) a - (int64_t) b;\n-  if (c > INT32_MAX)\n-    return INT32_MAX;\n-  else if (c < INT32_MIN)\n-    return INT32_MIN;\n-  else\n-    return c;\n+  int32_t c;\n+  if (__builtin_sub_overflow (a, b, &c))\n+    return b < 0 ? INT32_MAX : INT32_MIN;\n+  return c;\n }\n \n int64_t\n __hsail_sat_sub_s64 (int64_t a, int64_t b)\n {\n-  __int128_t c = (__int128_t) a - (__int128_t) b;\n-  if (c > INT64_MAX)\n-    return INT64_MAX;\n-  else if (c < INT64_MIN)\n-    return INT64_MIN;\n-  else\n-    return c;\n+  int64_t c;\n+  if (__builtin_sub_overflow (a, b, &c))\n+    return b < 0 ? INT64_MAX : INT64_MIN;\n+  return c;\n }\n \n uint8_t\n@@ -233,21 +209,19 @@ __hsail_sat_mul_u16 (uint16_t a, uint16_t b)\n uint32_t\n __hsail_sat_mul_u32 (uint32_t a, uint32_t b)\n {\n-  uint64_t c = (uint64_t) a * (uint64_t) b;\n-  if (c > UINT32_MAX)\n+  uint32_t c;\n+  if (__builtin_mul_overflow (a, b, &c))\n     return UINT32_MAX;\n-  else\n-    return c;\n+  return c;\n }\n \n uint64_t\n __hsail_sat_mul_u64 (uint64_t a, uint64_t b)\n {\n-  __uint128_t c = (__uint128_t) a * (__uint128_t) b;\n-  if (c > UINT64_MAX)\n+  uint64_t c;\n+  if (__builtin_mul_overflow (a, b, &c))\n     return UINT64_MAX;\n-  else\n-    return c;\n+  return c;\n }\n \n int8_t\n@@ -277,23 +251,17 @@ __hsail_sat_mul_s16 (int16_t a, int16_t b)\n int32_t\n __hsail_sat_mul_s32 (int32_t a, int32_t b)\n {\n-  int64_t c = (int64_t) a * (int64_t) b;\n-  if (c > INT32_MAX)\n-    return INT32_MAX;\n-  else if (c < INT32_MIN)\n-    return INT32_MIN;\n-  else\n-    return c;\n+  int32_t c;\n+  if (__builtin_mul_overflow (a, b, &c))\n+    return ((a > 0) ^ (b > 0)) ? INT32_MIN : INT32_MAX;\n+  return c;\n }\n \n int64_t\n __hsail_sat_mul_s64 (int64_t a, int64_t b)\n {\n-  __int128_t c = (__int128_t) a * (__int128_t) b;\n-  if (c > INT64_MAX)\n-    return INT64_MAX;\n-  else if (c < INT64_MIN)\n-    return INT64_MIN;\n-  else\n-    return c;\n+  int64_t c;\n+  if (__builtin_mul_overflow (a, b, &c))\n+    return ((a > 0) ^ (b > 0)) ? INT64_MIN : INT64_MAX;\n+  return c;\n }"}, {"sha": "f9b2e0dac8385142bcb7cd505999cef6b47c5323", "filename": "libhsail-rt/rt/segment.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315405b66954a298c39503347f1997ca2e0647f4/libhsail-rt%2Frt%2Fsegment.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315405b66954a298c39503347f1997ca2e0647f4/libhsail-rt%2Frt%2Fsegment.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libhsail-rt%2Frt%2Fsegment.c?ref=315405b66954a298c39503347f1997ca2e0647f4", "patch": "@@ -32,9 +32,10 @@ __hsail_segmentp_private (uint64_t flat_addr, PHSAWorkItem *wi)\n   if (flat_addr == 0)\n     return 1;\n   else\n-    return (void *) flat_addr >= wi->wg->private_base_ptr\n-\t   && (void *) flat_addr\n-\t\t< wi->wg->private_base_ptr + wi->wg->private_segment_total_size;\n+    return ((void *) (uintptr_t) flat_addr >= wi->wg->private_base_ptr\n+\t    && ((void *) (uintptr_t) flat_addr\n+\t\t< (wi->wg->private_base_ptr\n+\t\t   + wi->wg->private_segment_total_size)));\n }\n \n uint32_t\n@@ -43,9 +44,10 @@ __hsail_segmentp_group (uint64_t flat_addr, PHSAWorkItem *wi)\n   if (flat_addr == 0)\n     return 1;\n   else\n-    return (void *) flat_addr >= wi->wg->group_base_ptr\n-\t   && (void *) flat_addr < wi->wg->group_base_ptr\n-\t\t\t\t     + wi->launch_data->dp->group_segment_size;\n+    return ((void *) (uintptr_t) flat_addr >= wi->wg->group_base_ptr\n+\t    && ((void *) (uintptr_t) flat_addr\n+\t\t< (wi->wg->group_base_ptr\n+\t\t   + wi->launch_data->dp->group_segment_size)));\n }\n \n uint32_t"}, {"sha": "1114e59555634d41602ae45b1615ac059f8a3cf1", "filename": "libhsail-rt/rt/workitems.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315405b66954a298c39503347f1997ca2e0647f4/libhsail-rt%2Frt%2Fworkitems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315405b66954a298c39503347f1997ca2e0647f4/libhsail-rt%2Frt%2Fworkitems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libhsail-rt%2Frt%2Fworkitems.c?ref=315405b66954a298c39503347f1997ca2e0647f4", "patch": "@@ -938,7 +938,7 @@ __hsail_alloca_pop_frame (PHSAWorkItem *wi)\n   volatile PHSAWorkGroup *wg = wi->wg;\n \n   wg->alloca_stack_p = wg->alloca_frame_p;\n-  memcpy (&wg->alloca_frame_p,\n+  memcpy ((void *) &wg->alloca_frame_p,\n \t  (const void *) (wg->private_base_ptr + wg->alloca_frame_p), 4);\n   /* Now frame_p points to the beginning of the previous function's\n      frame and stack_p to its end.  */"}]}