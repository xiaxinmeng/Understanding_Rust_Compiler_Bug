{"sha": "97f3003f6f7f1710245307d0dc989955ad59e957", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdmMzAwM2Y2ZjdmMTcxMDI0NTMwN2QwZGM5ODk5NTVhZDU5ZTk1Nw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-04-15T14:51:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-04-15T14:51:06Z"}, "message": "re PR c++/70594 (-fcompare-debug failure)\n\n\tPR c++/70594\n\t* constexpr.c (constexpr_call_table): Preserve in GC.\n\t(struct fundef_copy, struct fundef_copies_table_t):\tDelete.\n\t(fundef_copies_table): Preserve in GC. Change to pointer to\n\ttree->tree hash.\n\t(maybe_initialize_fundef_copies_table): Adjust.\n\t(get_fundef_copy): Return a TREE_LIST.  Use non-inserting search.\n\t(save_fundef_copy): Adjust for a TREE_LIST.\n\t(cxx_eval_call_expression): Adjust for a fundef_copy TREE_LIST.\n\t(fini_constexpr): New.\n\t* cp-tree.h (fini_constexpr): Declare.\n\t* decl2.c (c_parse_final_cleanups): Call fini_constexpr.\n\nCo-Authored-By: Nathan Sidwell <nathan@acm.org>\n\nFrom-SVN: r235033", "tree": {"sha": "9ed00394a2f182a244a2f209fb1698eb6cf61245", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ed00394a2f182a244a2f209fb1698eb6cf61245"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97f3003f6f7f1710245307d0dc989955ad59e957", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97f3003f6f7f1710245307d0dc989955ad59e957", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97f3003f6f7f1710245307d0dc989955ad59e957", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97f3003f6f7f1710245307d0dc989955ad59e957/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "949505a900b4363539138c34aa8428723880a773", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/949505a900b4363539138c34aa8428723880a773", "html_url": "https://github.com/Rust-GCC/gccrs/commit/949505a900b4363539138c34aa8428723880a773"}], "stats": {"total": 87, "additions": 51, "deletions": 36}, "files": [{"sha": "a73fa882e9e8713f1831cd1073c54c3864c14678", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f3003f6f7f1710245307d0dc989955ad59e957/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f3003f6f7f1710245307d0dc989955ad59e957/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97f3003f6f7f1710245307d0dc989955ad59e957", "patch": "@@ -1,3 +1,19 @@\n+2016-04-15  Jason Merrill  <jason@redhat.com>\n+\t    Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/70594\n+\t* constexpr.c (constexpr_call_table): Preserve in GC.\n+\t(struct fundef_copy, struct fundef_copies_table_t):\tDelete.\n+\t(fundef_copies_table): Preserve in GC. Change to pointer to\n+\ttree->tree hash.\n+\t(maybe_initialize_fundef_copies_table): Adjust.\n+\t(get_fundef_copy): Return a TREE_LIST.  Use non-inserting search.\n+\t(save_fundef_copy): Adjust for a TREE_LIST.\n+\t(cxx_eval_call_expression): Adjust for a fundef_copy TREE_LIST.\n+\t(fini_constexpr): New.\n+\t* cp-tree.h (fini_constexpr): Declare.\n+\t* decl2.c (c_parse_final_cleanups): Call fini_constexpr.\n+\n 2016-04-15  Alexander Monakov  <amonakov@ispras.ru>\n \n \t* config/nvptx/nvptx.opt (moptimize): Add a period at end of help text."}, {"sha": "d9b9a2888f9edcd8bb29b7faad45ac230aff503d", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 32, "deletions": 36, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f3003f6f7f1710245307d0dc989955ad59e957/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f3003f6f7f1710245307d0dc989955ad59e957/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=97f3003f6f7f1710245307d0dc989955ad59e957", "patch": "@@ -915,7 +915,7 @@ struct constexpr_ctx {\n /* A table of all constexpr calls that have been evaluated by the\n    compiler in this translation unit.  */\n \n-static GTY ((deletable)) hash_table<constexpr_call_hasher> *constexpr_call_table;\n+static GTY (()) hash_table<constexpr_call_hasher> *constexpr_call_table;\n \n static tree cxx_eval_constant_expression (const constexpr_ctx *, tree,\n \t\t\t\t\t  bool, bool *, bool *, tree * = NULL);\n@@ -965,63 +965,49 @@ maybe_initialize_constexpr_call_table (void)\n     constexpr_call_table = hash_table<constexpr_call_hasher>::create_ggc (101);\n }\n \n-/* The representation of a single node in the per-function freelist maintained\n-   by FUNDEF_COPIES_TABLE.  */\n-\n-struct fundef_copy\n-{\n-  tree body;\n-  tree parms;\n-  tree res;\n-  fundef_copy *prev;\n-};\n-\n /* During constexpr CALL_EXPR evaluation, to avoid issues with sharing when\n    a function happens to get called recursively, we unshare the callee\n    function's body and evaluate this unshared copy instead of evaluating the\n    original body.\n \n    FUNDEF_COPIES_TABLE is a per-function freelist of these unshared function\n    copies.  The underlying data structure of FUNDEF_COPIES_TABLE is a hash_map\n-   that's keyed off of the original FUNCTION_DECL and whose value is the chain\n-   of this function's unused copies awaiting reuse.  */\n+   that's keyed off of the original FUNCTION_DECL and whose value is a\n+   TREE_LIST of this function's unused copies awaiting reuse.\n \n-struct fundef_copies_table_t\n-{\n-  hash_map<tree, fundef_copy *> *map;\n-};\n+   This is not GC-deletable to avoid GC affecting UID generation.  */\n \n-static GTY((deletable)) fundef_copies_table_t fundef_copies_table;\n+static GTY(()) hash_map<tree, tree> *fundef_copies_table;\n \n /* Initialize FUNDEF_COPIES_TABLE if it's not initialized.  */\n \n static void\n maybe_initialize_fundef_copies_table ()\n {\n-  if (fundef_copies_table.map == NULL)\n-    fundef_copies_table.map = hash_map<tree, fundef_copy *>::create_ggc (101);\n+  if (fundef_copies_table == NULL)\n+    fundef_copies_table = hash_map<tree,tree>::create_ggc (101);\n }\n \n /* Reuse a copy or create a new unshared copy of the function FUN.\n    Return this copy.  */\n \n-static fundef_copy *\n+static tree\n get_fundef_copy (tree fun)\n {\n   maybe_initialize_fundef_copies_table ();\n \n-  fundef_copy *copy;\n-  fundef_copy **slot = &fundef_copies_table.map->get_or_insert (fun, NULL);\n-  if (*slot == NULL)\n+  tree copy;\n+  tree *slot = fundef_copies_table->get (fun);\n+  if (slot == NULL)\n     {\n-      copy = ggc_alloc<fundef_copy> ();\n-      copy->body = copy_fn (fun, copy->parms, copy->res);\n-      copy->prev = NULL;\n+      copy = build_tree_list (NULL, NULL);\n+      /* PURPOSE is body, VALUE is parms, TYPE is result.  */\n+      TREE_PURPOSE (copy) = copy_fn (fun, TREE_VALUE (copy), TREE_TYPE (copy));\n     }\n   else\n     {\n       copy = *slot;\n-      *slot = (*slot)->prev;\n+      *slot = TREE_CHAIN (copy);\n     }\n \n   return copy;\n@@ -1030,10 +1016,10 @@ get_fundef_copy (tree fun)\n /* Save the copy COPY of function FUN for later reuse by get_fundef_copy().  */\n \n static void\n-save_fundef_copy (tree fun, fundef_copy *copy)\n+save_fundef_copy (tree fun, tree copy)\n {\n-  fundef_copy **slot = &fundef_copies_table.map->get_or_insert (fun, NULL);\n-  copy->prev = *slot;\n+  tree *slot = &fundef_copies_table->get_or_insert (fun, NULL);\n+  TREE_CHAIN (copy) = *slot;\n   *slot = copy;\n }\n \n@@ -1464,10 +1450,10 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t  tree body, parms, res;\n \n \t  /* Reuse or create a new unshared copy of this function's body.  */\n-\t  fundef_copy *copy = get_fundef_copy (fun);\n-\t  body = copy->body;\n-\t  parms = copy->parms;\n-\t  res = copy->res;\n+\t  tree copy = get_fundef_copy (fun);\n+\t  body = TREE_PURPOSE (copy);\n+\t  parms = TREE_VALUE (copy);\n+\t  res = TREE_TYPE (copy);\n \n \t  /* Associate the bindings with the remapped parms.  */\n \t  tree bound = new_call.bindings;\n@@ -5223,4 +5209,14 @@ potential_nondependent_static_init_expression (tree t)\n \t  && !instantiation_dependent_expression_p (t));\n }\n \n+/* Finalize constexpr processing after parsing.  */\n+\n+void\n+fini_constexpr (void)\n+{\n+  /* The contexpr call and fundef copies tables are no longer needed.  */\n+  constexpr_call_table = NULL;\n+  fundef_copies_table = NULL;\n+}\n+\n #include \"gt-cp-constexpr.h\""}, {"sha": "0df84707f8811a220e6d64caeaf7e4c13090e355", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f3003f6f7f1710245307d0dc989955ad59e957/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f3003f6f7f1710245307d0dc989955ad59e957/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=97f3003f6f7f1710245307d0dc989955ad59e957", "patch": "@@ -6880,6 +6880,7 @@ bool cilkplus_an_triplet_types_ok_p             (location_t, tree, tree, tree,\n \t\t\t\t\t\t tree);\n \n /* In constexpr.c */\n+extern void fini_constexpr\t\t\t(void);\n extern bool literal_type_p                      (tree);\n extern tree register_constexpr_fundef           (tree, tree);\n extern bool check_constexpr_ctor_body           (tree, tree, bool);"}, {"sha": "0ea326d7699db99c54ddd4d9ddb13f706a82c744", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97f3003f6f7f1710245307d0dc989955ad59e957/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97f3003f6f7f1710245307d0dc989955ad59e957/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=97f3003f6f7f1710245307d0dc989955ad59e957", "patch": "@@ -4904,6 +4904,8 @@ c_parse_final_cleanups (void)\n \n   finish_repo ();\n \n+  fini_constexpr ();\n+\n   /* The entire file is now complete.  If requested, dump everything\n      to a file.  */\n   dump_tu ();"}]}