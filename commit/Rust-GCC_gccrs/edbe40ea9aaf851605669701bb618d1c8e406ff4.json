{"sha": "edbe40ea9aaf851605669701bb618d1c8e406ff4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRiZTQwZWE5YWFmODUxNjA1NjY5NzAxYmI2MThkMWM4ZTQwNmZmNA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-10T20:05:23Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-10T20:05:23Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1186", "tree": {"sha": "dbc7502c780644a87a54a7a85222375d5fa9b94c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbc7502c780644a87a54a7a85222375d5fa9b94c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edbe40ea9aaf851605669701bb618d1c8e406ff4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edbe40ea9aaf851605669701bb618d1c8e406ff4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edbe40ea9aaf851605669701bb618d1c8e406ff4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edbe40ea9aaf851605669701bb618d1c8e406ff4/comments", "author": null, "committer": null, "parents": [{"sha": "f3c3d3df9c8bf8bfed3fec829f466fff82a9badc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3c3d3df9c8bf8bfed3fec829f466fff82a9badc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3c3d3df9c8bf8bfed3fec829f466fff82a9badc"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "09f6ece6bc9fc2a72a33da933dc61700fe982f23", "filename": "gcc/dbxout.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edbe40ea9aaf851605669701bb618d1c8e406ff4/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edbe40ea9aaf851605669701bb618d1c8e406ff4/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=edbe40ea9aaf851605669701bb618d1c8e406ff4", "patch": "@@ -1371,6 +1371,33 @@ dbxout_symbol (decl, local)\n \t    /* Nonzero means we must output a tag as well as a typedef.  */\n \t    tag_needed = 0;\n \n+\t    /* Handle the case of a C++ structure or union\n+\t       where the TYPE_NAME is a TYPE_DECL\n+\t       which gives both a typedef name and a tag.  */\n+\t    /* dbx requires the tag first and the typedef second.\n+\t       ??? there is a bug here.  It generates spurious tags\n+\t       for C code.  */\n+\t    if ((TREE_CODE (type) == RECORD_TYPE\n+\t\t || TREE_CODE (type) == UNION_TYPE)\n+\t\t&& TYPE_NAME (type) == decl\n+\t\t&& !(use_gdb_dbx_extensions && have_used_extensions)\n+\t\t&& !TREE_ASM_WRITTEN (TYPE_NAME (type)))\n+\t      {\n+\t\ttree name = TYPE_NAME (type);\n+\t\tif (TREE_CODE (name) == TYPE_DECL)\n+\t\t  name = DECL_NAME (name);\n+\n+\t\tcurrent_sym_code = DBX_TYPE_DECL_STABS_CODE;\n+\t\tcurrent_sym_value = 0;\n+\t\tcurrent_sym_addr = 0;\n+\t\tcurrent_sym_nchars = 2 + IDENTIFIER_LENGTH (name);\n+\n+\t\tfprintf (asmfile, \"%s \\\"%s:T\", ASM_STABS_OP,\n+\t\t\t IDENTIFIER_POINTER (name));\n+\t\tdbxout_type (type, 1, 0);\n+\t\tdbxout_finish_symbol (0);\n+\t      }\n+\n \t    /* Output typedef name.  */\n \t    fprintf (asmfile, \"%s \\\"%s:\", ASM_STABS_OP,\n \t\t     IDENTIFIER_POINTER (DECL_NAME (decl)));\n@@ -1395,8 +1422,10 @@ dbxout_symbol (decl, local)\n \t\t    putc ('T', asmfile);\n \t\t    TREE_ASM_WRITTEN (TYPE_NAME (type)) = 1;\n \t\t  }\n+#if 0 /* Now we generate the tag for this case up above.  */\n \t\telse\n \t\t  tag_needed = 1;\n+#endif\n \t      }\n /* #endif */\n "}]}