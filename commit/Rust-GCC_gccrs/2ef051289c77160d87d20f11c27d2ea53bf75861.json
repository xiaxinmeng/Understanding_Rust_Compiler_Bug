{"sha": "2ef051289c77160d87d20f11c27d2ea53bf75861", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVmMDUxMjg5Yzc3MTYwZDg3ZDIwZjExYzI3ZDJlYTUzYmY3NTg2MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-31T11:09:39Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-31T11:09:39Z"}, "message": "[multiple changes]\n\n2014-10-31  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* inline.adb (Check_And_Split_Unconstrained_Function): Do not\n\ttest for the presence of nested subprograms.\n\n2014-10-31  Ed Schonberg  <schonberg@adacore.com>\n\n\t* aspects.ads, aspects.adb: Add aspect Default_Storage_Pool.\n\t* sem_ch13.adb (Analyze_One_Aspect): Generate pragma for aspect\n\tDefault_Storage_Pool.\n\nFrom-SVN: r216959", "tree": {"sha": "c7c83678b4ddedaab787251c216ef64bc3b333ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7c83678b4ddedaab787251c216ef64bc3b333ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ef051289c77160d87d20f11c27d2ea53bf75861", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ef051289c77160d87d20f11c27d2ea53bf75861", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ef051289c77160d87d20f11c27d2ea53bf75861", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ef051289c77160d87d20f11c27d2ea53bf75861/comments", "author": null, "committer": null, "parents": [{"sha": "88f7d2d148c34dbf76f5cb4321ced56d5253a96f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f7d2d148c34dbf76f5cb4321ced56d5253a96f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88f7d2d148c34dbf76f5cb4321ced56d5253a96f"}], "stats": {"total": 71, "additions": 33, "deletions": 38}, "files": [{"sha": "bb1854628c230f5504d408c53af5b38ea7d88499", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef051289c77160d87d20f11c27d2ea53bf75861/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef051289c77160d87d20f11c27d2ea53bf75861/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2ef051289c77160d87d20f11c27d2ea53bf75861", "patch": "@@ -1,3 +1,14 @@\n+2014-10-31  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* inline.adb (Check_And_Split_Unconstrained_Function): Do not\n+\ttest for the presence of nested subprograms.\n+\n+2014-10-31  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* aspects.ads, aspects.adb: Add aspect Default_Storage_Pool.\n+\t* sem_ch13.adb (Analyze_One_Aspect): Generate pragma for aspect\n+\tDefault_Storage_Pool.\n+\n 2014-10-31  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* sem_ch6.adb: Remove obsolete comment."}, {"sha": "6e12c3c80e5b18f1f078b58caa209c8db0483140", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef051289c77160d87d20f11c27d2ea53bf75861/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef051289c77160d87d20f11c27d2ea53bf75861/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=2ef051289c77160d87d20f11c27d2ea53bf75861", "patch": "@@ -511,6 +511,7 @@ package body Aspects is\n     Aspect_Default_Component_Value      => Aspect_Default_Component_Value,\n     Aspect_Default_Initial_Condition    => Aspect_Default_Initial_Condition,\n     Aspect_Default_Iterator             => Aspect_Default_Iterator,\n+    Aspect_Default_Storage_Pool         => Aspect_Default_Storage_Pool,\n     Aspect_Default_Value                => Aspect_Default_Value,\n     Aspect_Depends                      => Aspect_Depends,\n     Aspect_Dimension                    => Aspect_Dimension,"}, {"sha": "3ca077c986d0e2fe02c3201ca7204ca635d7cdc6", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef051289c77160d87d20f11c27d2ea53bf75861/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef051289c77160d87d20f11c27d2ea53bf75861/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=2ef051289c77160d87d20f11c27d2ea53bf75861", "patch": "@@ -88,6 +88,7 @@ package Aspects is\n       Aspect_Default_Component_Value,\n       Aspect_Default_Initial_Condition,     -- GNAT\n       Aspect_Default_Iterator,\n+      Aspect_Default_Storage_Pool,\n       Aspect_Default_Value,\n       Aspect_Depends,                       -- GNAT\n       Aspect_Dimension,                     -- GNAT\n@@ -314,6 +315,7 @@ package Aspects is\n       Aspect_Default_Component_Value   => Expression,\n       Aspect_Default_Initial_Condition => Optional_Expression,\n       Aspect_Default_Iterator          => Name,\n+      Aspect_Default_Storage_Pool      => Expression,\n       Aspect_Default_Value             => Expression,\n       Aspect_Depends                   => Expression,\n       Aspect_Dimension                 => Expression,\n@@ -401,6 +403,7 @@ package Aspects is\n       Aspect_Default_Component_Value      => Name_Default_Component_Value,\n       Aspect_Default_Initial_Condition    => Name_Default_Initial_Condition,\n       Aspect_Default_Iterator             => Name_Default_Iterator,\n+      Aspect_Default_Storage_Pool         => Name_Default_Storage_Pool,\n       Aspect_Default_Value                => Name_Default_Value,\n       Aspect_Depends                      => Name_Depends,\n       Aspect_Dimension                    => Name_Dimension,\n@@ -616,6 +619,7 @@ package Aspects is\n       Aspect_Constant_Indexing            => Always_Delay,\n       Aspect_CPU                          => Always_Delay,\n       Aspect_Default_Iterator             => Always_Delay,\n+      Aspect_Default_Storage_Pool         => Always_Delay,\n       Aspect_Default_Value                => Always_Delay,\n       Aspect_Default_Component_Value      => Always_Delay,\n       Aspect_Discard_Names                => Always_Delay,"}, {"sha": "7f0d54b79443d4a3487ae54186e0db39cddc4ae6", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef051289c77160d87d20f11c27d2ea53bf75861/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef051289c77160d87d20f11c27d2ea53bf75861/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=2ef051289c77160d87d20f11c27d2ea53bf75861", "patch": "@@ -1894,44 +1894,6 @@ package body Inline is\n          return;\n       end if;\n \n-      --  Do not inline any subprogram that contains nested subprograms,\n-      --  since the backend inlining circuit seems to generate uninitialized\n-      --  references in this case. We know this happens in the case of front\n-      --  end ZCX support, but it also appears it can happen in other cases\n-      --  as well. The backend often rejects attempts to inline in the case\n-      --  of nested procedures anyway, so little if anything is lost by this.\n-      --  Note that this is test is for the benefit of the back-end. There\n-      --  is a separate test for front-end inlining that also rejects nested\n-      --  subprograms.\n-\n-      --  Do not do this test if errors have been detected, because in some\n-      --  error cases, this code blows up, and we don't need it anyway if\n-      --  there have been errors, since we won't get to the linker anyway.\n-\n-      declare\n-         P_Ent : Node_Id;\n-\n-      begin\n-         P_Ent := Body_Id;\n-         loop\n-            P_Ent := Scope (P_Ent);\n-            exit when No (P_Ent) or else P_Ent = Standard_Standard;\n-\n-            if Is_Subprogram (P_Ent) then\n-               Set_Is_Inlined (P_Ent, False);\n-\n-               if Comes_From_Source (P_Ent)\n-                 and then (Has_Pragma_Inline (P_Ent))\n-               then\n-                  Cannot_Inline\n-                    (\"cannot inline& (nested subprogram)?\", N, P_Ent,\n-                     Is_Serious => True);\n-                  return;\n-               end if;\n-            end if;\n-         end loop;\n-      end;\n-\n       --  No action needed in stubs since the attribute Body_To_Inline\n       --  is not available\n "}, {"sha": "86f70d01b2ff44b9310fd9effde9b6ca1b39eea2", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef051289c77160d87d20f11c27d2ea53bf75861/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef051289c77160d87d20f11c27d2ea53bf75861/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=2ef051289c77160d87d20f11c27d2ea53bf75861", "patch": "@@ -2236,6 +2236,20 @@ package body Sem_Ch13 is\n                   Insert_Pragma (Aitem);\n                   goto Continue;\n \n+               --  Default_Storage_Pool\n+\n+               when Aspect_Default_Storage_Pool =>\n+                  Make_Aitem_Pragma\n+                    (Pragma_Argument_Associations => New_List (\n+                       Make_Pragma_Argument_Association (Loc,\n+                         Expression => Relocate_Node (Expr))),\n+                     Pragma_Name                  =>\n+                       Name_Default_Storage_Pool);\n+\n+                  Decorate (Aspect, Aitem);\n+                  Insert_Pragma (Aitem);\n+                  goto Continue;\n+\n                --  Depends\n \n                --  Aspect Depends is never delayed because it is equivalent to\n@@ -8693,6 +8707,9 @@ package body Sem_Ch13 is\n          when Aspect_Default_Component_Value =>\n             T := Component_Type (Entity (ASN));\n \n+         when Aspect_Default_Storage_Pool =>\n+            T := Class_Wide_Type (RTE (RE_Root_Storage_Pool));\n+\n          --  Default_Value is resolved with the type entity in question\n \n          when Aspect_Default_Value =>"}]}