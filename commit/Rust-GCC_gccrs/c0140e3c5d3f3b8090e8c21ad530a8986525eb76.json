{"sha": "c0140e3c5d3f3b8090e8c21ad530a8986525eb76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAxNDBlM2M1ZDNmM2I4MDkwZThjMjFhZDUzMGE4OTg2NTI1ZWI3Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-12-10T12:06:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-12-10T12:06:12Z"}, "message": "re PR tree-optimization/78720 (Illegal instruction in generated code)\n\n\tPR tree-optimization/78720\n\t* match.pd (A < 0 ? C : 0): Only optimize for signed A.  If shift\n\tis negative, sign extend to @1's type and than AND with C.\n\n\t* gcc.c-torture/execute/pr78720.c: New test.\n\nCo-Authored-By: Marc Glisse <marc.glisse@inria.fr>\n\nFrom-SVN: r243516", "tree": {"sha": "1c3ee7a1e61c83a5cfcca91584530a3b01495645", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c3ee7a1e61c83a5cfcca91584530a3b01495645"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0140e3c5d3f3b8090e8c21ad530a8986525eb76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0140e3c5d3f3b8090e8c21ad530a8986525eb76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0140e3c5d3f3b8090e8c21ad530a8986525eb76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0140e3c5d3f3b8090e8c21ad530a8986525eb76/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d4102c5cbe74a27b7ec64e3d90404e3d3707b6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d4102c5cbe74a27b7ec64e3d90404e3d3707b6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d4102c5cbe74a27b7ec64e3d90404e3d3707b6f"}], "stats": {"total": 56, "additions": 50, "deletions": 6}, "files": [{"sha": "f5dfabf9b5f357065158428f51b8b3adbf6e409f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0140e3c5d3f3b8090e8c21ad530a8986525eb76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0140e3c5d3f3b8090e8c21ad530a8986525eb76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c0140e3c5d3f3b8090e8c21ad530a8986525eb76", "patch": "@@ -1,3 +1,10 @@\n+2016-12-10  Jakub Jelinek  <jakub@redhat.com>\n+\t    Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR tree-optimization/78720\n+\t* match.pd (A < 0 ? C : 0): Only optimize for signed A.  If shift\n+\tis negative, sign extend to @1's type and than AND with C.\n+\n 2016-12-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/78758"}, {"sha": "f4cc2d810c3717f897f90069a24a61e158a29295", "filename": "gcc/match.pd", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0140e3c5d3f3b8090e8c21ad530a8986525eb76/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0140e3c5d3f3b8090e8c21ad530a8986525eb76/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=c0140e3c5d3f3b8090e8c21ad530a8986525eb76", "patch": "@@ -2768,17 +2768,22 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n     (ncmp (convert:stype @0) { build_zero_cst (stype); })))))\n \n /* If we have A < 0 ? C : 0 where C is a power of 2, convert\n-   this into a right shift followed by ANDing with C.  */\n+   this into a right shift or sign extension followed by ANDing with C.  */\n (simplify\n  (cond\n   (lt @0 integer_zerop)\n   integer_pow2p@1 integer_zerop)\n- (with {\n+ (if (!TYPE_UNSIGNED (TREE_TYPE (@0)))\n+  (with {\n     int shift = element_precision (@0) - wi::exact_log2 (@1) - 1;\n-  }\n-  (bit_and\n-   (convert (rshift @0 { build_int_cst (integer_type_node, shift); }))\n-   @1)))\n+   }\n+   (if (shift >= 0)\n+    (bit_and\n+     (convert (rshift @0 { build_int_cst (integer_type_node, shift); }))\n+     @1)\n+    /* Otherwise ctype must be wider than TREE_TYPE (@0) and pure\n+       sign extension followed by AND with C will achieve the effect.  */\n+    (bit_and (convert @0) @1)))))\n \n /* When the addresses are not directly of decls compare base and offset.\n    This implements some remaining parts of fold_comparison address"}, {"sha": "9bd73899c97907d5666e66167f6fdcacd0717324", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0140e3c5d3f3b8090e8c21ad530a8986525eb76/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0140e3c5d3f3b8090e8c21ad530a8986525eb76/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c0140e3c5d3f3b8090e8c21ad530a8986525eb76", "patch": "@@ -1,5 +1,8 @@\n 2016-12-10  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/78720\n+\t* gcc.c-torture/execute/pr78720.c: New test.\n+\n \tPR fortran/78758\n \t* gfortran.dg/pr78758.f90: New test.\n \t* gfortran.dg/pr38868.f: Remove again bogus warning."}, {"sha": "b99c232a1ba99c6fab69e2a91a072ba7ff077406", "filename": "gcc/testsuite/gcc.c-torture/execute/pr78720.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0140e3c5d3f3b8090e8c21ad530a8986525eb76/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr78720.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0140e3c5d3f3b8090e8c21ad530a8986525eb76/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr78720.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr78720.c?ref=c0140e3c5d3f3b8090e8c21ad530a8986525eb76", "patch": "@@ -0,0 +1,29 @@\n+/* PR tree-optimization/78720 */\n+\n+__attribute__((noinline, noclone)) long int\n+foo (signed char x)\n+{\n+  return x < 0 ? 0x80000L : 0L;\n+}\n+\n+__attribute__((noinline, noclone)) long int\n+bar (signed char x)\n+{\n+  return x < 0 ? 0x80L : 0L;\n+}\n+\n+__attribute__((noinline, noclone)) long int\n+baz (signed char x)\n+{\n+  return x < 0 ? 0x20L : 0L;\n+}\n+\n+int\n+main ()\n+{\n+  if (foo (-1) != 0x80000L || bar (-1) != 0x80L || baz (-1) != 0x20L\n+      || foo (0) != 0L || bar (0) != 0L || baz (0) != 0L\n+      || foo (31) != 0L || bar (31) != 0L || baz (31) != 0L)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}