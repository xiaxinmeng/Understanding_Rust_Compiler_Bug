{"sha": "a8fc25795155d4c4d18c8c5b099748a8178b38f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThmYzI1Nzk1MTU1ZDRjNGQxOGM4YzViMDk5NzQ4YTgxNzhiMzhmNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-10-22T08:38:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-10-22T08:38:15Z"}, "message": "fold-const.c (fold_addr_of_array_ref_difference): Properly convert operands before folding a MINUS_EXPR.\n\n2015-10-22  Richard Biener  <rguenther@suse.de>\n\n\t* fold-const.c (fold_addr_of_array_ref_difference): Properly\n\tconvert operands before folding a MINUS_EXPR.\n\t(fold_binary_loc): Move simplification of MINUS_EXPR on\n\tconverted POINTER_PLUS_EXPRs ...\n\t* match.pd: ... here.\n\n\tc/\n\t* c-typeck.c (c_finish_omp_clauses): Properly convert operands\n\tbefore folding a MINUS_EXPR.\n\n\tcp/\n\t* semantics.c (cp_finish_omp_clause_depend_sink): Properly convert\n\tbefore folding a MINUS_EXPR.\n\t(finish_omp_clauses): Likewise.\n\nFrom-SVN: r229167", "tree": {"sha": "4694c561d25d8bedd003e8cea3438b6d9b14d34d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4694c561d25d8bedd003e8cea3438b6d9b14d34d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8fc25795155d4c4d18c8c5b099748a8178b38f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8fc25795155d4c4d18c8c5b099748a8178b38f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8fc25795155d4c4d18c8c5b099748a8178b38f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8fc25795155d4c4d18c8c5b099748a8178b38f6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cfed37a03b7a495b25e63d335e9f00e2dc9583f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfed37a03b7a495b25e63d335e9f00e2dc9583f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfed37a03b7a495b25e63d335e9f00e2dc9583f0"}], "stats": {"total": 142, "additions": 90, "deletions": 52}, "files": [{"sha": "63319ad6ed533805d4fb93a331e6a235cf2f0d78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fc25795155d4c4d18c8c5b099748a8178b38f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fc25795155d4c4d18c8c5b099748a8178b38f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8fc25795155d4c4d18c8c5b099748a8178b38f6", "patch": "@@ -1,3 +1,11 @@\n+2015-10-22  Richard Biener  <rguenther@suse.de>\n+\n+\t* fold-const.c (fold_addr_of_array_ref_difference): Properly\n+\tconvert operands before folding a MINUS_EXPR.\n+\t(fold_binary_loc): Move simplification of MINUS_EXPR on\n+\tconverted POINTER_PLUS_EXPRs ...\n+\t* match.pd: ... here.\n+\n 2015-10-22  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* builtins.c (fold_builtin_tan): Delete."}, {"sha": "aed7a627932f14d41088eddf94698ea60c093ddf", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fc25795155d4c4d18c8c5b099748a8178b38f6/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fc25795155d4c4d18c8c5b099748a8178b38f6/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=a8fc25795155d4c4d18c8c5b099748a8178b38f6", "patch": "@@ -1,3 +1,8 @@\n+2015-10-22  Richard Biener  <rguenther@suse.de>\n+\n+\t* c-typeck.c (c_finish_omp_clauses): Properly convert operands\n+\tbefore folding a MINUS_EXPR.\n+\n 2015-10-21  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/68024"}, {"sha": "61c5313c25bc0758eb1f11ab36a68cfff9b73330", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fc25795155d4c4d18c8c5b099748a8178b38f6/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fc25795155d4c4d18c8c5b099748a8178b38f6/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=a8fc25795155d4c4d18c8c5b099748a8178b38f6", "patch": "@@ -12547,7 +12547,9 @@ c_finish_omp_clauses (tree clauses, bool is_omp, bool declare_simd)\n \t      s = pointer_int_sum (OMP_CLAUSE_LOCATION (c), PLUS_EXPR,\n \t\t\t\t   OMP_CLAUSE_DECL (c), s);\n \t      s = fold_build2_loc (OMP_CLAUSE_LOCATION (c), MINUS_EXPR,\n-\t\t\t\t   sizetype, s, OMP_CLAUSE_DECL (c));\n+\t\t\t\t   sizetype, fold_convert (sizetype, s),\n+\t\t\t\t   fold_convert\n+\t\t\t\t     (sizetype, OMP_CLAUSE_DECL (c)));\n \t      if (s == error_mark_node)\n \t\ts = size_one_node;\n \t      OMP_CLAUSE_LINEAR_STEP (c) = s;\n@@ -12671,7 +12673,9 @@ c_finish_omp_clauses (tree clauses, bool is_omp, bool declare_simd)\n \t\t\t\t\t\t neg ? MINUS_EXPR : PLUS_EXPR,\n \t\t\t\t\t\t decl, offset);\n \t\t      t2 = fold_build2_loc (OMP_CLAUSE_LOCATION (c), MINUS_EXPR,\n-\t\t\t\t\t    sizetype, t2, decl);\n+\t\t\t\t\t    sizetype,\n+\t\t\t\t\t    fold_convert (sizetype, t2),\n+\t\t\t\t\t    fold_convert (sizetype, decl));\n \t\t      if (t2 == error_mark_node)\n \t\t\t{\n \t\t\t  remove = true;"}, {"sha": "8dbff11574c8cb1fda78f6af57e485e356e8edee", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fc25795155d4c4d18c8c5b099748a8178b38f6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fc25795155d4c4d18c8c5b099748a8178b38f6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a8fc25795155d4c4d18c8c5b099748a8178b38f6", "patch": "@@ -1,3 +1,9 @@\n+2015-10-22  Richard Biener  <rguenther@suse.de>\n+\n+\t* semantics.c (cp_finish_omp_clause_depend_sink): Properly convert\n+\tbefore folding a MINUS_EXPR.\n+\t(finish_omp_clauses): Likewise.\n+\n 2015-10-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/66781"}, {"sha": "11315d90668d4b822cbd2070c4e636cfe055fdce", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fc25795155d4c4d18c8c5b099748a8178b38f6/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fc25795155d4c4d18c8c5b099748a8178b38f6/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=a8fc25795155d4c4d18c8c5b099748a8178b38f6", "patch": "@@ -5632,8 +5632,9 @@ cp_finish_omp_clause_depend_sink (tree sink_clause)\n \t\t\t\t     neg ? MINUS_EXPR : PLUS_EXPR,\n \t\t\t\t     decl, offset);\n \t  t2 = fold_build2_loc (OMP_CLAUSE_LOCATION (sink_clause),\n-\t\t\t\tMINUS_EXPR, sizetype, t2,\n-\t\t\t\tdecl);\n+\t\t\t\tMINUS_EXPR, sizetype,\n+\t\t\t\tfold_convert (sizetype, t2),\n+\t\t\t\tfold_convert (sizetype, decl));\n \t  if (t2 == error_mark_node)\n \t    return true;\n \t  TREE_PURPOSE (t) = t2;\n@@ -5783,7 +5784,9 @@ finish_omp_clauses (tree clauses, bool allow_fields, bool declare_simd)\n \t\t      t = pointer_int_sum (OMP_CLAUSE_LOCATION (c), PLUS_EXPR,\n \t\t\t\t\t   d, t);\n \t\t      t = fold_build2_loc (OMP_CLAUSE_LOCATION (c),\n-\t\t\t\t\t   MINUS_EXPR, sizetype, t, d);\n+\t\t\t\t\t   MINUS_EXPR, sizetype,\n+\t\t\t\t\t   fold_convert (sizetype, t),\n+\t\t\t\t\t   fold_convert (sizetype, d));\n \t\t      if (t == error_mark_node)\n \t\t\t{\n \t\t\t  remove = true;\n@@ -5804,7 +5807,9 @@ finish_omp_clauses (tree clauses, bool allow_fields, bool declare_simd)\n \t\t      t = pointer_int_sum (OMP_CLAUSE_LOCATION (c), PLUS_EXPR,\n \t\t\t\t\t   d, t);\n \t\t      t = fold_build2_loc (OMP_CLAUSE_LOCATION (c),\n-\t\t\t\t\t   MINUS_EXPR, sizetype, t, d);\n+\t\t\t\t\t   MINUS_EXPR, sizetype,\n+\t\t\t\t\t   fold_convert (sizetype, t),\n+\t\t\t\t\t   fold_convert (sizetype, d));\n \t\t      if (t == error_mark_node)\n \t\t\t{\n \t\t\t  remove = true;"}, {"sha": "c4be017c50c55864ce1b3ba212215fb8807969fb", "filename": "gcc/fold-const.c", "status": "modified", "additions": 5, "deletions": 45, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fc25795155d4c4d18c8c5b099748a8178b38f6/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fc25795155d4c4d18c8c5b099748a8178b38f6/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=a8fc25795155d4c4d18c8c5b099748a8178b38f6", "patch": "@@ -8841,9 +8841,11 @@ fold_addr_of_array_ref_difference (location_t loc, tree type,\n \t   = fold_addr_of_array_ref_difference (loc, type, base0, base1)))\n       || (INDIRECT_REF_P (base0)\n \t  && INDIRECT_REF_P (base1)\n-\t  && (base_offset = fold_binary_loc (loc, MINUS_EXPR, type,\n-\t\t\t\t\t     TREE_OPERAND (base0, 0),\n-\t\t\t\t\t     TREE_OPERAND (base1, 0))))\n+\t  && (base_offset\n+\t        = fold_binary_loc (loc, MINUS_EXPR, type,\n+\t\t\t\t   fold_convert (type, TREE_OPERAND (base0, 0)),\n+\t\t\t\t   fold_convert (type,\n+\t\t\t\t\t\t TREE_OPERAND (base1, 0)))))\n       || operand_equal_p (base0, base1, OEP_ADDRESS_OF))\n     {\n       tree op0 = fold_convert_loc (loc, type, TREE_OPERAND (aref0, 1));\n@@ -9637,48 +9639,6 @@ fold_binary_loc (location_t loc,\n       return NULL_TREE;\n \n     case MINUS_EXPR:\n-      /* Pointer simplifications for subtraction, simple reassociations. */\n-      if (POINTER_TYPE_P (TREE_TYPE (arg1)) && POINTER_TYPE_P (TREE_TYPE (arg0)))\n-\t{\n-\t  /* (PTR0 p+ A) - (PTR1 p+ B) -> (PTR0 - PTR1) + (A - B) */\n-\t  if (TREE_CODE (arg0) == POINTER_PLUS_EXPR\n-\t      && TREE_CODE (arg1) == POINTER_PLUS_EXPR)\n-\t    {\n-\t      tree arg00 = fold_convert_loc (loc, type, TREE_OPERAND (arg0, 0));\n-\t      tree arg01 = fold_convert_loc (loc, type, TREE_OPERAND (arg0, 1));\n-\t      tree arg10 = fold_convert_loc (loc, type, TREE_OPERAND (arg1, 0));\n-\t      tree arg11 = fold_convert_loc (loc, type, TREE_OPERAND (arg1, 1));\n-\t      return fold_build2_loc (loc, PLUS_EXPR, type,\n-\t\t\t\t  fold_build2_loc (loc, MINUS_EXPR, type,\n-\t\t\t\t\t       arg00, arg10),\n-\t\t\t\t  fold_build2_loc (loc, MINUS_EXPR, type,\n-\t\t\t\t\t       arg01, arg11));\n-\t    }\n-\t  /* (PTR0 p+ A) - PTR1 -> (PTR0 - PTR1) + A, assuming PTR0 - PTR1 simplifies. */\n-\t  else if (TREE_CODE (arg0) == POINTER_PLUS_EXPR)\n-\t    {\n-\t      tree arg00 = fold_convert_loc (loc, type, TREE_OPERAND (arg0, 0));\n-\t      tree arg01 = fold_convert_loc (loc, type, TREE_OPERAND (arg0, 1));\n-\t      tree tmp = fold_binary_loc (loc, MINUS_EXPR, type, arg00,\n-\t\t\t\t      fold_convert_loc (loc, type, arg1));\n-\t      if (tmp)\n-\t        return fold_build2_loc (loc, PLUS_EXPR, type, tmp, arg01);\n-\t    }\n-\t  /* PTR0 - (PTR1 p+ A) -> (PTR0 - PTR1) - A, assuming PTR0 - PTR1\n-\t     simplifies. */\n-\t  else if (TREE_CODE (arg1) == POINTER_PLUS_EXPR)\n-\t    {\n-\t      tree arg10 = fold_convert_loc (loc, type,\n-\t\t\t\t\t     TREE_OPERAND (arg1, 0));\n-\t      tree arg11 = fold_convert_loc (loc, type,\n-\t\t\t\t\t     TREE_OPERAND (arg1, 1));\n-\t      tree tmp = fold_binary_loc (loc, MINUS_EXPR, type,\n-\t\t\t\t\t  fold_convert_loc (loc, type, arg0),\n-\t\t\t\t\t  arg10);\n-\t      if (tmp)\n-\t\treturn fold_build2_loc (loc, MINUS_EXPR, type, tmp, arg11);\n-\t    }\n-\t}\n       /* (-A) - B -> (-B) - A  where B is easily negated and we can swap.  */\n       if (TREE_CODE (arg0) == NEGATE_EXPR\n \t  && negate_expr_p (arg1)"}, {"sha": "b399786bac2e85b15a84b80b9131a85f8cc5193b", "filename": "gcc/match.pd", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fc25795155d4c4d18c8c5b099748a8178b38f6/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fc25795155d4c4d18c8c5b099748a8178b38f6/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=a8fc25795155d4c4d18c8c5b099748a8178b38f6", "patch": "@@ -1056,7 +1056,57 @@ along with GCC; see the file COPYING3.  If not see\n \t || (POINTER_TYPE_P (TREE_TYPE (@0))\n \t     && TREE_CODE (@1) == INTEGER_CST\n \t     && tree_int_cst_sign_bit (@1) == 0))\n-     (convert @1))))))\n+     (convert @1))))\n+\n+  /* (T)P - (T)(P + A) -> -(T) A */\n+  (for add (plus pointer_plus)\n+   (simplify\n+    (minus (convert @0)\n+     (convert (add @0 @1)))\n+    (if (element_precision (type) <= element_precision (TREE_TYPE (@1))\n+\t /* For integer types, if A has a smaller type\n+\t    than T the result depends on the possible\n+\t    overflow in P + A.\n+\t    E.g. T=size_t, A=(unsigned)429497295, P>0.\n+\t    However, if an overflow in P + A would cause\n+\t    undefined behavior, we can assume that there\n+\t    is no overflow.  */\n+\t || (INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+\t     && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@0)))\n+\t /* For pointer types, if the conversion of A to the\n+\t    final type requires a sign- or zero-extension,\n+\t    then we have to punt - it is not defined which\n+\t    one is correct.  */\n+\t || (POINTER_TYPE_P (TREE_TYPE (@0))\n+\t     && TREE_CODE (@1) == INTEGER_CST\n+\t     && tree_int_cst_sign_bit (@1) == 0))\n+     (negate (convert @1)))))\n+\n+  /* (T)(P + A) - (T)(P + B) -> (T)A - (T)B */\n+  (for add (plus pointer_plus)\n+   (simplify\n+    (minus (convert (add @0 @1))\n+     (convert (add @0 @2)))\n+    (if (element_precision (type) <= element_precision (TREE_TYPE (@1))\n+\t /* For integer types, if A has a smaller type\n+\t    than T the result depends on the possible\n+\t    overflow in P + A.\n+\t    E.g. T=size_t, A=(unsigned)429497295, P>0.\n+\t    However, if an overflow in P + A would cause\n+\t    undefined behavior, we can assume that there\n+\t    is no overflow.  */\n+\t || (INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+\t     && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@0)))\n+\t /* For pointer types, if the conversion of A to the\n+\t    final type requires a sign- or zero-extension,\n+\t    then we have to punt - it is not defined which\n+\t    one is correct.  */\n+\t || (POINTER_TYPE_P (TREE_TYPE (@0))\n+\t     && TREE_CODE (@1) == INTEGER_CST\n+\t     && tree_int_cst_sign_bit (@1) == 0\n+\t     && TREE_CODE (@2) == INTEGER_CST\n+\t     && tree_int_cst_sign_bit (@2) == 0))\n+     (minus (convert @1) (convert @2)))))))\n \n \n /* Simplifications of MIN_EXPR and MAX_EXPR.  */"}]}