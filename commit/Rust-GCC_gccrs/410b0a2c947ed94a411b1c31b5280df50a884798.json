{"sha": "410b0a2c947ed94a411b1c31b5280df50a884798", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDEwYjBhMmM5NDdlZDk0YTQxMWIxYzMxYjUyODBkZjUwYTg4NDc5OA==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2007-02-09T18:43:21Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2007-02-09T18:43:21Z"}, "message": "* gnu/classpath/jdwp/VMVirtualMachine.java\n        (_stepping_threads): New member.\n        * classpath/lib/gnu/classpath/jdwp/VMVirtualMachine.class:\n        Regenerated.\n        * gnu/classpath/jdwp/VMVirtualMachine.h:\n        Regenerated.\n        * gnu/claspath/jdwp/natVMVirtualMachine.cc\n        (get_request_step_filter): New function.\n        (DISABLE_EVENT): New macro.\n        (initialize): Initialize _stepping_threads.\n        (registerEvent): Implement EVENT_SINGLE_STEP.\n        (unregisterEvent): Likewise.\n\nFrom-SVN: r121769", "tree": {"sha": "7b2b5e21c099d98c4e397c3c5334297d2dffe89e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b2b5e21c099d98c4e397c3c5334297d2dffe89e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/410b0a2c947ed94a411b1c31b5280df50a884798", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410b0a2c947ed94a411b1c31b5280df50a884798", "html_url": "https://github.com/Rust-GCC/gccrs/commit/410b0a2c947ed94a411b1c31b5280df50a884798", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410b0a2c947ed94a411b1c31b5280df50a884798/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bd01e4eaeee30b4695f3743e36568d2f06201244", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd01e4eaeee30b4695f3743e36568d2f06201244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd01e4eaeee30b4695f3743e36568d2f06201244"}], "stats": {"total": 100, "additions": 99, "deletions": 1}, "files": [{"sha": "c403efbb7a872308e83b3483c28586bb53e9f1c9", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410b0a2c947ed94a411b1c31b5280df50a884798/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410b0a2c947ed94a411b1c31b5280df50a884798/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=410b0a2c947ed94a411b1c31b5280df50a884798", "patch": "@@ -1,3 +1,18 @@\n+2007-02-09  Keith Seitz  <keiths@redhat.com>\n+\n+\t* gnu/classpath/jdwp/VMVirtualMachine.java\n+\t(_stepping_threads): New member.\n+\t* classpath/lib/gnu/classpath/jdwp/VMVirtualMachine.class:\n+\tRegenerated.\n+\t* gnu/classpath/jdwp/VMVirtualMachine.h:\n+\tRegenerated.\n+\t* gnu/claspath/jdwp/natVMVirtualMachine.cc\n+\t(get_request_step_filter): New function.\n+\t(DISABLE_EVENT): New macro.\n+\t(initialize): Initialize _stepping_threads.\n+\t(registerEvent): Implement EVENT_SINGLE_STEP.\n+\t(unregisterEvent): Likewise.\n+\n 2007-02-08  Keith Seitz  <keiths@redhat.com>\n \n \t* sources.am: Regenerate."}, {"sha": "f48b6eb890ad060e4b41d8b0cbef1ab7dafd0ad8", "filename": "libjava/classpath/lib/gnu/classpath/jdwp/VMVirtualMachine.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410b0a2c947ed94a411b1c31b5280df50a884798/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410b0a2c947ed94a411b1c31b5280df50a884798/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.class?ref=410b0a2c947ed94a411b1c31b5280df50a884798"}, {"sha": "456053a6565f207e51df25f0124b4506fc5d6f4e", "filename": "libjava/gnu/classpath/jdwp/VMVirtualMachine.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410b0a2c947ed94a411b1c31b5280df50a884798/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410b0a2c947ed94a411b1c31b5280df50a884798/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.h?ref=410b0a2c947ed94a411b1c31b5280df50a884798", "patch": "@@ -59,6 +59,8 @@ class gnu::classpath::jdwp::VMVirtualMachine : public ::java::lang::Object\n   static void clearEvents (jbyte);\n private:\n   static ::java::util::Hashtable *_jdwp_suspend_counts;\n+public: // actually package-private\n+  static ::java::util::Hashtable * _stepping_threads;\n public:\n \n   static ::java::lang::Class class$;"}, {"sha": "da0fef28c10287ea94589a08dfeeb95a67d64556", "filename": "libjava/gnu/classpath/jdwp/VMVirtualMachine.java", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410b0a2c947ed94a411b1c31b5280df50a884798/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410b0a2c947ed94a411b1c31b5280df50a884798/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.java?ref=410b0a2c947ed94a411b1c31b5280df50a884798", "patch": "@@ -61,6 +61,9 @@\n   // Thread suspension table. Maps Thread to suspend count (Integer)\n   private static Hashtable _jdwp_suspend_counts;\n \n+  // List of stepping threads: maps Thread -> stepping info\n+  static Hashtable _stepping_threads;\n+  \n   public static native void initialize ();\n \n   /**"}, {"sha": "e06daa7bb24285592589706cc1dce6f95ee06d33", "filename": "libjava/gnu/classpath/jdwp/natVMVirtualMachine.cc", "status": "modified", "additions": 79, "deletions": 1, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410b0a2c947ed94a411b1c31b5280df50a884798/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410b0a2c947ed94a411b1c31b5280df50a884798/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc?ref=410b0a2c947ed94a411b1c31b5280df50a884798", "patch": "@@ -11,6 +11,7 @@ details. */\n #include <config.h>\n #include <gcj/cni.h>\n #include <java-assert.h>\n+#include <java-interp.h>\n #include <jvm.h>\n #include <jvmti.h>\n \n@@ -42,10 +43,12 @@ details. */\n #include <gnu/classpath/jdwp/event/VmInitEvent.h>\n #include <gnu/classpath/jdwp/event/filters/IEventFilter.h>\n #include <gnu/classpath/jdwp/event/filters/LocationOnlyFilter.h>\n+#include <gnu/classpath/jdwp/event/filters/StepFilter.h>\n #include <gnu/classpath/jdwp/exception/InvalidFrameException.h>\n #include <gnu/classpath/jdwp/exception/InvalidLocationException.h>\n #include <gnu/classpath/jdwp/exception/InvalidMethodException.h>\n #include <gnu/classpath/jdwp/exception/JdwpInternalErrorException.h>\n+#include <gnu/classpath/jdwp/id/ThreadId.h>\n #include <gnu/classpath/jdwp/util/Location.h>\n #include <gnu/classpath/jdwp/util/MethodResult.h>\n #include <gnu/gcj/jvmti/Breakpoint.h>\n@@ -55,8 +58,19 @@ using namespace java::lang;\n using namespace gnu::classpath::jdwp::event;\n using namespace gnu::classpath::jdwp::util;\n \n+// Stepping information\n+struct step_info\n+{\n+  jint size;   // See gnu.classpath.jdwp.JdwpConstants.StepSize\n+  jint depth;  // See gnu.classpath.jdwp.JdwpConstants.StepDepth\n+  int stack_depth;  // stack depth at start of stepping\n+  jmethodID method; // method in which we are stepping\n+};\n+\n // Forward declarations\n static Location *get_request_location (EventRequest *);\n+static gnu::classpath::jdwp::event::filters::StepFilter *\n+get_request_step_filter (EventRequest *);\n static void JNICALL jdwpClassPrepareCB (jvmtiEnv *, JNIEnv *, jthread, jclass);\n static void JNICALL jdwpThreadEndCB (jvmtiEnv *, JNIEnv *, jthread);\n static void JNICALL jdwpThreadStartCB (jvmtiEnv *, JNIEnv *, jthread);\n@@ -65,6 +79,9 @@ static void JNICALL jdwpVMInitCB (jvmtiEnv *, JNIEnv *, jthread);\n static void throw_jvmti_error (jvmtiError);\n \n #define DEFINE_CALLBACK(Cb,Event) Cb.Event = jdwp ## Event ## CB\n+#define DISABLE_EVENT(Event,Thread)\t\t\t\t\t\\\n+  _jdwp_jvmtiEnv->SetEventNotificationMode (JVMTI_DISABLE,\t\t\\\n+\t\t\t\t\t    JVMTI_EVENT_ ## Event, Thread)\n #define ENABLE_EVENT(Event,Thread)\t\t\t\t\t\\\n   _jdwp_jvmtiEnv->SetEventNotificationMode (JVMTI_ENABLE,\t\t\\\n \t\t\t\t\t    JVMTI_EVENT_ ## Event, Thread)\n@@ -81,6 +98,8 @@ void\n gnu::classpath::jdwp::VMVirtualMachine::initialize ()\n {\n   _jdwp_suspend_counts = new ::java::util::Hashtable ();\n+  _stepping_threads = new ::java::util::Hashtable ();\n+\n   JavaVM *vm = _Jv_GetJavaVM ();\n   vm->GetEnv (reinterpret_cast<void **> (&_jdwp_jvmtiEnv), JVMTI_VERSION_1_0);\n \n@@ -200,6 +219,32 @@ gnu::classpath::jdwp::VMVirtualMachine::registerEvent (EventRequest *request)\n   switch (request->getEventKind ())\n     {\n     case EventRequest::EVENT_SINGLE_STEP:\n+      {\n+\tThread *thread;\n+\tfilters::StepFilter *filter = get_request_step_filter (request);\n+\tif (filter == NULL)\n+\t  {\n+\t    // No filter specified: report every step in every\n+\t    // thread.\n+\t    thread = NULL;\n+\t  }\n+\telse\n+\t  {\n+\t    // Add stepping information to list of stepping threads\n+\t    thread = filter->getThread ()->getThread ();\n+\t    _Jv_InterpFrame *frame\n+\t      = reinterpret_cast<_Jv_InterpFrame *> (thread->interp_frame);\n+\t    struct step_info *sinfo\n+\t      = (struct step_info *) JvAllocBytes (sizeof (struct step_info));\n+\t    sinfo->size = filter->getSize ();\n+\t    sinfo->depth = filter->getDepth ();\n+\t    sinfo->stack_depth = frame->depth ();\n+\t    sinfo->method = frame->self->get_method ();\n+\t    _stepping_threads->put (thread, (jobject) sinfo);\n+\t  }\n+\n+\tENABLE_EVENT (SINGLE_STEP, thread);\n+      }\n       break;\n \n     case EventRequest::EVENT_BREAKPOINT:\n@@ -225,7 +270,7 @@ gnu::classpath::jdwp::VMVirtualMachine::registerEvent (EventRequest *request)\n \t    // Ignore the duplicate\n \t  }\n       }\n-     break;\n+      break;\n \n     case EventRequest::EVENT_FRAME_POP:\n       break;\n@@ -277,6 +322,19 @@ gnu::classpath::jdwp::VMVirtualMachine::unregisterEvent (EventRequest *request)\n   switch (request->getEventKind ())\n     {\n     case EventRequest::EVENT_SINGLE_STEP:\n+      {\n+\tThread *thread;\n+\tfilters::StepFilter *filter = get_request_step_filter (request);\n+\tif (filter == NULL)\n+\t  thread = NULL;\n+\telse\n+\t  {\n+\t    thread = filter->getThread ()->getThread ();\n+\t    _stepping_threads->remove (thread);\n+\t  }\n+\n+\tDISABLE_EVENT (SINGLE_STEP, thread);\n+      }\n       break;\n \n     case EventRequest::EVENT_BREAKPOINT:\n@@ -527,6 +585,26 @@ getSourceFile (MAYBE_UNUSED jclass clazz)\n   return NULL;\n }\n \n+static gnu::classpath::jdwp::event::filters::StepFilter *\n+get_request_step_filter (EventRequest *request)\n+{\n+  ::java::util::Collection *filters = request->getFilters ();\n+  ::java::util::Iterator *iter = filters->iterator ();\n+  filters::StepFilter *filter = NULL;\n+  while (iter->hasNext ())\n+    {\n+      using namespace gnu::classpath::jdwp::event::filters;\n+      IEventFilter *next = (IEventFilter *) iter->next ();\n+      if (next->getClass () == &StepFilter::class$)\n+\t{\n+\t  filter = reinterpret_cast<StepFilter *> (next);\n+\t  break;\n+\t}\n+    }\n+\n+  return filter;\n+}\n+\n static Location *\n get_request_location (EventRequest *request)\n {"}]}