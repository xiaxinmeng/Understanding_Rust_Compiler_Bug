{"sha": "39f2bcb5e15aa41a156ac55a0466aa3bb82bc327", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlmMmJjYjVlMTVhYTQxYTE1NmFjNTVhMDQ2NmFhM2JiODJiYzMyNw==", "commit": {"author": {"name": "Oleg Endo", "email": "oleg.endo@t-online.de", "date": "2011-09-28T21:43:01Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2011-09-28T21:43:01Z"}, "message": "re PR bootstrap/49486 (Bootstrap failure)\n\n\tPR target/49486\n\t* config/sh/sh.md (negdi2): Move expansion into split to\n\tallow more combination options.  Add T_REG clobber.\n\t(abssi2): New expander.\n\t(*negdi2, *abssi2, *negabssi2): New insns.\n\t(cneg): Change from insn to insn_and_split.  Rename to\n\tnegsi_cond.  Add alternative for non-SH4.\n\t* gcc.target/sh/pr49468-si.c: New.\n\nFrom-SVN: r179320", "tree": {"sha": "c47ac32fa9af142e7d2c71a947c4b90e2675ddc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c47ac32fa9af142e7d2c71a947c4b90e2675ddc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39f2bcb5e15aa41a156ac55a0466aa3bb82bc327", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f2bcb5e15aa41a156ac55a0466aa3bb82bc327", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39f2bcb5e15aa41a156ac55a0466aa3bb82bc327", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f2bcb5e15aa41a156ac55a0466aa3bb82bc327/comments", "author": {"login": "olegendo", "id": 1380209, "node_id": "MDQ6VXNlcjEzODAyMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1380209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olegendo", "html_url": "https://github.com/olegendo", "followers_url": "https://api.github.com/users/olegendo/followers", "following_url": "https://api.github.com/users/olegendo/following{/other_user}", "gists_url": "https://api.github.com/users/olegendo/gists{/gist_id}", "starred_url": "https://api.github.com/users/olegendo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olegendo/subscriptions", "organizations_url": "https://api.github.com/users/olegendo/orgs", "repos_url": "https://api.github.com/users/olegendo/repos", "events_url": "https://api.github.com/users/olegendo/events{/privacy}", "received_events_url": "https://api.github.com/users/olegendo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c850a5a7f5effe37a4a4261cab48375f5a13f7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c850a5a7f5effe37a4a4261cab48375f5a13f7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c850a5a7f5effe37a4a4261cab48375f5a13f7a"}], "stats": {"total": 160, "additions": 129, "deletions": 31}, "files": [{"sha": "2aae5aa48f3e1cbd1e638b78015b468091dacd3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f2bcb5e15aa41a156ac55a0466aa3bb82bc327/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f2bcb5e15aa41a156ac55a0466aa3bb82bc327/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39f2bcb5e15aa41a156ac55a0466aa3bb82bc327", "patch": "@@ -1,3 +1,13 @@\n+2011-09-28  Oleg Endo  <oleg.endo@t-online.de>\n+\n+\tPR target/49486\n+\t* config/sh/sh.md (negdi2): Move expansion into split to\n+\tallow more combination options.  Add T_REG clobber.\n+\t(abssi2): New expander.\n+\t(*negdi2, *abssi2, *negabssi2): New insns.\n+\t(cneg): Change from insn to insn_and_split.  Rename to\n+\tnegsi_cond.  Add alternative for non-SH4.\n+\n 2011-09-28  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* config/arm/neon.md (neon_move_lo_quad_<mode>): Delete."}, {"sha": "63cb9393653a4890594380a406636188c914750a", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 92, "deletions": 31, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f2bcb5e15aa41a156ac55a0466aa3bb82bc327/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f2bcb5e15aa41a156ac55a0466aa3bb82bc327/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=39f2bcb5e15aa41a156ac55a0466aa3bb82bc327", "patch": "@@ -4282,28 +4282,39 @@ label:\n   \"sub\tr63, %1, %0\"\n   [(set_attr \"type\" \"arith_media\")])\n \n+\n+\n+;; Don't expand immediately because otherwise neg:DI (abs:DI) will not be\n+;; combined.\n (define_expand \"negdi2\"\n-  [(set (match_operand:DI 0 \"arith_reg_operand\" \"\")\n-\t(neg:DI (match_operand:DI 1 \"arith_reg_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"arith_reg_dest\" \"\")\n+\t(neg:DI (match_operand:DI 1 \"arith_reg_operand\" \"\")))\n+   (clobber (reg:SI T_REG))]\n   \"\"\n+  \"\")\n+\n+(define_insn_and_split \"*negdi2\"\n+  [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r\")\n+\t(neg:DI (match_operand:DI 1 \"arith_reg_operand\" \"r\")))]\n+  \"TARGET_SH1\"\n+  \"#\"\n+  \"TARGET_SH1\"\n+  [(const_int 0)]\n   \"\n {\n-  if (TARGET_SH1)\n-    {\n-      int low_word = (TARGET_LITTLE_ENDIAN ? 0 : 1);\n-      int high_word = (TARGET_LITTLE_ENDIAN ? 1 : 0);\n+  int low_word = (TARGET_LITTLE_ENDIAN ? 0 : 1);\n+  int high_word = (TARGET_LITTLE_ENDIAN ? 1 : 0);\n \n-      rtx low_src = operand_subword (operands[1], low_word, 0, DImode);\n-      rtx high_src = operand_subword (operands[1], high_word, 0, DImode);\n+  rtx low_src = operand_subword (operands[1], low_word, 0, DImode);\n+  rtx high_src = operand_subword (operands[1], high_word, 0, DImode);\n \n-      rtx low_dst = operand_subword (operands[0], low_word, 1, DImode);\n-      rtx high_dst = operand_subword (operands[0], high_word, 1, DImode);\n+  rtx low_dst = operand_subword (operands[0], low_word, 1, DImode);\n+  rtx high_dst = operand_subword (operands[0], high_word, 1, DImode);\n \n-      emit_insn (gen_clrt ());\n-      emit_insn (gen_negc (low_dst, low_src));\n-      emit_insn (gen_negc (high_dst, high_src));\n-      DONE;\n-    }\n+  emit_insn (gen_clrt ());\n+  emit_insn (gen_negc (low_dst, low_src));\n+  emit_insn (gen_negc (high_dst, high_src));\n+  DONE;\n }\")\n \n (define_insn \"negsi2\"\n@@ -4326,27 +4337,77 @@ label:\n \t\t(const_int -1)))]\n   \"TARGET_SHMEDIA\" \"\")\n \n-/* The SH4 202 can do zero-offset branches without pipeline stalls.\n-   This can be used as some kind of conditional execution, which is useful\n-   for abs.  */\n-(define_split\n+(define_expand \"abssi2\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\" \"\")\n-\t(plus:SI (xor:SI (neg:SI (reg:SI T_REG))\n-\t\t\t (match_operand:SI 1 \"arith_reg_operand\" \"\"))\n-\t\t (reg:SI T_REG)))]\n-  \"TARGET_HARD_SH4\"\n+  \t(abs:SI (match_operand:SI 1 \"arith_reg_operand\" \"\")))\n+   (clobber (reg:SI T_REG))]\n+  \"\"\n+  \"\")\n+\n+(define_insn_and_split \"*abssi2\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n+  \t(abs:SI (match_operand:SI 1 \"arith_reg_operand\" \"r\")))]\n+  \"TARGET_SH1\"\n+  \"#\"\n+  \"TARGET_SH1\"\n   [(const_int 0)]\n-  \"emit_insn (gen_movsi_i (operands[0], operands[1]));\n-   emit_insn (gen_cneg (operands[0], operands[0], operands[0]));\n-   DONE;\")\n+  \"\n+{\n+  emit_insn (gen_cmpgesi_t (operands[1], const0_rtx));\n+  emit_insn (gen_negsi_cond (operands[0], operands[1], operands[1],\n+\t\t const1_rtx));\n+  DONE;\n+}\")\n \n-(define_insn \"cneg\"\n+(define_insn_and_split \"*negabssi2\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n-\t(if_then_else:SI (eq:SI (reg:SI T_REG) (const_int 0))\n-\t\t      (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n-\t\t      (neg:SI (match_operand:SI 2 \"arith_reg_operand\" \"r\"))))]\n+  \t(neg:SI (abs:SI (match_operand:SI 1 \"arith_reg_operand\" \"r\"))))]\n+  \"TARGET_SH1\"\n+  \"#\"\n+  \"TARGET_SH1\"\n+  [(const_int 0)]\n+  \"\n+{\n+  emit_insn (gen_cmpgesi_t (operands[1], const0_rtx));\n+  emit_insn (gen_negsi_cond (operands[0], operands[1], operands[1],\n+\t\t const0_rtx));\n+  DONE;\n+}\")\n+\n+\n+;; The SH4 202 can do zero-offset branches without pipeline stalls.\n+;; This can be used as some kind of conditional execution, which is useful\n+;; for abs.\n+;; Actually the instruction scheduling should decide whether to use a\n+;; zero-offset branch or not for any generic case involving a single\n+;; instruction on SH4 202.\n+\n+(define_insn_and_split \"negsi_cond\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r,r\")\n+\t(if_then_else:SI (eq:SI (reg:SI T_REG)\n+\t\t\t  (match_operand:SI 3 \"const_int_operand\" \"M,N\"))\n+\t (match_operand:SI 1 \"arith_reg_operand\" \"0,0\")\n+\t (neg:SI (match_operand:SI 2 \"arith_reg_operand\" \"r,r\"))))]\n   \"TARGET_HARD_SH4\"\n-  \"bf 0f\\;neg %2,%0\\\\n0:\"\n+  \"@\n+\tbt\\\\t0f\\;neg\\\\t%2,%0\\\\n0:\n+\tbf\\\\t0f\\;neg\\\\t%2,%0\\\\n0:\"\n+  \"!TARGET_HARD_SH4\"\n+  [(const_int 0)]\n+  \"\n+{\n+  rtx skip_neg_label = gen_label_rtx ();\n+\n+  emit_insn (gen_movsi (operands[0], operands[1]));\n+\n+  emit_jump_insn (INTVAL (operands[3])\n+\t\t  ? gen_branch_true (skip_neg_label)\n+\t\t  : gen_branch_false (skip_neg_label));\n+\n+  emit_label_after (skip_neg_label,\n+\t\t    emit_insn (gen_negsi2 (operands[0], operands[1])));\n+  DONE;\n+}\"\n   [(set_attr \"type\" \"arith\") ;; poor approximation\n    (set_attr \"length\" \"4\")])\n "}, {"sha": "d19933a874697fdc6ca7824079bde128b764e165", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f2bcb5e15aa41a156ac55a0466aa3bb82bc327/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f2bcb5e15aa41a156ac55a0466aa3bb82bc327/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=39f2bcb5e15aa41a156ac55a0466aa3bb82bc327", "patch": "@@ -1,3 +1,8 @@\n+2011-09-28  Oleg Endo  <oleg.endo@t-online.de>\n+\n+\tPR target/49486\n+\t* gcc.target/sh/pr49468-si.c: New.\n+\n 2011-09-28  Tom de Vries  <tom@codesourcery.com>\n \n \tPR testsuite/50485"}, {"sha": "69fbe230efaf970a263f969103eed1ea78573f6a", "filename": "gcc/testsuite/gcc.target/sh/pr49468-si.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f2bcb5e15aa41a156ac55a0466aa3bb82bc327/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49468-si.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f2bcb5e15aa41a156ac55a0466aa3bb82bc327/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49468-si.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49468-si.c?ref=39f2bcb5e15aa41a156ac55a0466aa3bb82bc327", "patch": "@@ -0,0 +1,22 @@\n+/* Check that 32 bit integer abs is generated as neg instruction and\n+   conditional branch instead of default branch-free code.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-final { scan-assembler-times \"neg\" 2 } } */\n+\n+\n+/* Normal integer absolute value.  */\n+int\n+abs_0 (int i)\n+{\n+  return (i < 0) ? -i : i;\n+}\n+\n+/*  Negated integer absolute value.\n+    The generated code should be the same, except that the branch \n+    condition is inverted.  */\n+int\n+abs_1 (int i)\n+{\n+  return (i > 0) ? -i : i;\n+}"}]}