{"sha": "f91b40db076d74d756aee965a90fc2fa823126af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkxYjQwZGIwNzZkNzRkNzU2YWVlOTY1YTkwZmMyZmE4MjMxMjZhZg==", "commit": {"author": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2001-12-05T21:13:00Z"}, "committer": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2001-12-05T21:13:00Z"}, "message": "sem_eval.adb (Eval_Concatenation): If left operand is a null string, get bounds from right operand.\n\n\t* sem_eval.adb (Eval_Concatenation): If left operand is a null string,\n\tget bounds from right operand.\n\n\t* sem_eval.adb: Minor reformatting\n\n\t* exp_util.adb (Make_Literal_Range): use bound of literal rather\n\tthan Index'First, its lower bound may be different from 1.\n\n\t* exp_util.adb: Undo earlier change, fixes ACVC regressions C48009B\n\tand C48009J\n\n\t* prj-nmsc.adb Minor reformatting\n\n\t* prj-nmsc.adb (Language_Independent_Check): Reset Library flag if\n\tset and libraries are not supported.\n\n\t* sem_ch3.adb (Build_Derived_Private_Type): set Public status of\n\tprivate view explicitly, so the back-end can treat as a global\n\twhen appropriate.\n\nFrom-SVN: r47692", "tree": {"sha": "2c0ad494ce36ef9b36a04906e911710725525931", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c0ad494ce36ef9b36a04906e911710725525931"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f91b40db076d74d756aee965a90fc2fa823126af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f91b40db076d74d756aee965a90fc2fa823126af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f91b40db076d74d756aee965a90fc2fa823126af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f91b40db076d74d756aee965a90fc2fa823126af/comments", "author": null, "committer": null, "parents": [{"sha": "ef3d4d6ed8217f439001ded7ba1b7e3b85c51113", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef3d4d6ed8217f439001ded7ba1b7e3b85c51113", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef3d4d6ed8217f439001ded7ba1b7e3b85c51113"}], "stats": {"total": 90, "additions": 65, "deletions": 25}, "files": [{"sha": "b6a7bd54923adc66319f3ea34396000bc6af5cce", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f91b40db076d74d756aee965a90fc2fa823126af/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f91b40db076d74d756aee965a90fc2fa823126af/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f91b40db076d74d756aee965a90fc2fa823126af", "patch": "@@ -1,3 +1,29 @@\n+2001-12-05  Ed Schonberg <schonber@gnat.com>\n+\n+\t* sem_eval.adb (Eval_Concatenation): If left operand is a null string, \n+\tget bounds from right operand.\n+\t\n+\t* sem_eval.adb: Minor reformatting\n+\t\n+\t* exp_util.adb (Make_Literal_Range): use bound of literal rather \n+\tthan Index'First, its lower bound may be different from 1.\n+\t\n+\t* exp_util.adb: Undo earlier change, fixes ACVC regressions C48009B \n+\tand C48009J\n+\t\n+2001-12-05  Vincent Celier <celier@gnat.com>\n+\n+\t* prj-nmsc.adb Minor reformatting\n+\t\n+\t* prj-nmsc.adb (Language_Independent_Check): Reset Library flag if \n+\tset and libraries are not supported.\n+\t\n+2001-12-05  Ed Schonberg <schonber@gnat.com>\n+\n+\t* sem_ch3.adb (Build_Derived_Private_Type): set Public status of \n+\tprivate view explicitly, so the back-end can treat as a global \n+\twhen appropriate.\n+\n 2001-12-05  Ed Schonberg <schonber@gnat.com>\n \n \t* sem_ch12.adb (Instantiate_Package_Body): if instance is a compilation"}, {"sha": "6aeba91bf5f6397c826395ff0eeb83fc3c9392af", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f91b40db076d74d756aee965a90fc2fa823126af/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f91b40db076d74d756aee965a90fc2fa823126af/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=f91b40db076d74d756aee965a90fc2fa823126af", "patch": "@@ -125,11 +125,11 @@ package body Exp_Util is\n \n    function Make_Literal_Range\n      (Loc         : Source_Ptr;\n-      Literal_Typ : Entity_Id;\n-      Index_Typ   : Entity_Id)\n+      Literal_Typ : Entity_Id)\n       return        Node_Id;\n    --  Produce a Range node whose bounds are:\n-   --    Index_Typ'first .. Index_Typ'First + Length (Literal_Typ)\n+   --    Low_Bound (Literal_Type) ..\n+   --        Low_Bound (Literal_Type) + Length (Literal_Typ) - 1\n    --  this is used for expanding declarations like X : String := \"sdfgdfg\";\n \n    function New_Class_Wide_Subtype\n@@ -1137,8 +1137,7 @@ package body Exp_Util is\n                Make_Index_Or_Discriminant_Constraint (Loc,\n                  Constraints => New_List (\n                    Make_Literal_Range (Loc,\n-                     Literal_Typ => Exp_Typ,\n-                     Index_Typ   => Etype (First_Index (Unc_Type)))))));\n+                     Literal_Typ => Exp_Typ)))));\n \n       elsif Is_Constrained (Exp_Typ)\n         and then not Is_Class_Wide_Type (Unc_Type)\n@@ -2305,28 +2304,27 @@ package body Exp_Util is\n \n    function Make_Literal_Range\n      (Loc         : Source_Ptr;\n-      Literal_Typ : Entity_Id;\n-      Index_Typ   : Entity_Id)\n+      Literal_Typ : Entity_Id)\n       return        Node_Id\n    is\n+      Lo : Node_Id :=\n+             New_Copy_Tree (String_Literal_Low_Bound (Literal_Typ));\n+\n    begin\n+      Set_Analyzed (Lo, False);\n+\n          return\n            Make_Range (Loc,\n-             Low_Bound =>\n-               Make_Attribute_Reference (Loc,\n-                 Prefix => New_Occurrence_Of (Index_Typ, Loc),\n-                 Attribute_Name => Name_First),\n+             Low_Bound => Lo,\n \n              High_Bound =>\n                Make_Op_Subtract (Loc,\n                   Left_Opnd =>\n                     Make_Op_Add (Loc,\n-                      Left_Opnd =>\n-                        Make_Attribute_Reference (Loc,\n-                          Prefix => New_Occurrence_Of (Index_Typ, Loc),\n-                          Attribute_Name => Name_First),\n-                      Right_Opnd => Make_Integer_Literal (Loc,\n-                        String_Literal_Length (Literal_Typ))),\n+                      Left_Opnd  => New_Copy_Tree (Lo),\n+                      Right_Opnd =>\n+                        Make_Integer_Literal (Loc,\n+                          String_Literal_Length (Literal_Typ))),\n                   Right_Opnd => Make_Integer_Literal (Loc, 1)));\n    end Make_Literal_Range;\n \n@@ -2867,7 +2865,8 @@ package body Exp_Util is\n       --  regressions that are not fully understood yet.\n \n       elsif Nkind (Exp) = N_Type_Conversion\n-        and then not Name_Req\n+        and then (not Is_Elementary_Type (Underlying_Type (Exp_Type))\n+                   or else Nkind (Parent (Exp)) = N_Assignment_Statement)\n       then\n          Remove_Side_Effects (Expression (Exp), Variable_Ref);\n          Scope_Suppress := Svg_Suppress;"}, {"sha": "e12fe08b167f7f94be927371ec68875936201ba7", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f91b40db076d74d756aee965a90fc2fa823126af/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f91b40db076d74d756aee965a90fc2fa823126af/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=f91b40db076d74d756aee965a90fc2fa823126af", "patch": "@@ -976,7 +976,7 @@ package body Prj.Nmsc is\n                   Naming.Dot_Repl_Loc);\n             end if;\n \n-            --  Suffixs cannot\n+            --  Suffixes cannot\n             --   - be empty\n             --   - start with an alphanumeric\n             --   - start with an '_' followed by an alphanumeric\n@@ -1952,7 +1952,8 @@ package body Prj.Nmsc is\n \n             if not MLib.Tgt.Libraries_Are_Supported then\n                Error_Msg (\"?libraries are not supported on this platform\",\n-                           Lib_Name.Location);\n+                          Lib_Name.Location);\n+               Data.Library := False;\n \n             else\n                if Current_Verbosity = High then\n@@ -1983,12 +1984,11 @@ package body Prj.Nmsc is\n \n                   declare\n                      Kind_Name : constant String :=\n-                       To_Lower (Name_Buffer (1 .. Name_Len));\n+                                   To_Lower (Name_Buffer (1 .. Name_Len));\n \n                      OK : Boolean := True;\n \n                   begin\n-\n                      if Kind_Name = \"static\" then\n                         Data.Library_Kind := Static;\n "}, {"sha": "154c2347c6dfe42c6414d3fe57ee1131a66e4e81", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f91b40db076d74d756aee965a90fc2fa823126af/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f91b40db076d74d756aee965a90fc2fa823126af/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=f91b40db076d74d756aee965a90fc2fa823126af", "patch": "@@ -3827,6 +3827,7 @@ package body Sem_Ch3 is\n             Set_Freeze_Node          (Full_Der, Empty);\n             Set_Depends_On_Private   (Full_Der,\n                                         Has_Private_Component    (Full_Der));\n+            Set_Public_Status        (Full_Der);\n          end if;\n       end if;\n "}, {"sha": "97930a6c1b50b23421f62e37386f0d2f7d1f7728", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f91b40db076d74d756aee965a90fc2fa823126af/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f91b40db076d74d756aee965a90fc2fa823126af/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=f91b40db076d74d756aee965a90fc2fa823126af", "patch": "@@ -1045,11 +1045,11 @@ package body Sem_Eval is\n    --  both operands are static (RM 4.9(7), 4.9(21)).\n \n    procedure Eval_Concatenation (N : Node_Id) is\n-      Left  : constant Node_Id := Left_Opnd (N);\n-      Right : constant Node_Id := Right_Opnd (N);\n+      Left  : constant Node_Id   := Left_Opnd (N);\n+      Right : constant Node_Id   := Right_Opnd (N);\n+      C_Typ : constant Entity_Id := Root_Type (Component_Type (Etype (N)));\n       Stat  : Boolean;\n       Fold  : Boolean;\n-      C_Typ : constant Entity_Id := Root_Type (Component_Type (Etype (N)));\n \n    begin\n       --  Concatenation is never static in Ada 83, so if Ada 83\n@@ -1090,6 +1090,7 @@ package body Sem_Eval is\n \n       declare\n          Left_Str  : constant Node_Id := Get_String_Val (Left);\n+         Left_Len  : Nat;\n          Right_Str : constant Node_Id := Get_String_Val (Right);\n \n       begin\n@@ -1101,10 +1102,12 @@ package body Sem_Eval is\n          --  case of a concatenation of a series of string literals.\n \n          if Nkind (Left_Str) = N_String_Literal then\n+            Left_Len :=  String_Length (Strval (Left_Str));\n             Start_String (Strval (Left_Str));\n          else\n             Start_String;\n             Store_String_Char (Char_Literal_Value (Left_Str));\n+            Left_Len := 1;\n          end if;\n \n          --  Now append the characters of the right operand\n@@ -1125,6 +1128,17 @@ package body Sem_Eval is\n          Set_Is_Static_Expression (N, Stat);\n \n          if Stat then\n+\n+            --  If left operand is the empty string, the result is the\n+            --  right operand, including its bounds if anomalous.\n+\n+            if Left_Len = 0\n+              and then Is_Array_Type (Etype (Right))\n+              and then Etype (Right) /= Any_String\n+            then\n+               Set_Etype (N, Etype (Right));\n+            end if;\n+\n             Fold_Str (N, End_String);\n          end if;\n       end;"}]}