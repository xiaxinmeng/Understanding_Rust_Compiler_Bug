{"sha": "372e6e6bac4046d87e92894535b80f28409e9d3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzcyZTZlNmJhYzQwNDZkODdlOTI4OTQ1MzViODBmMjg0MDllOWQzZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-01-23T14:41:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-01-23T14:41:16Z"}, "message": "re PR c/44715 (Break in increment expression of \"for\" statement inconsistent with g++)\n\n\tPR c/44715\n\t* cp-gimplify.c (genericize_cp_loop): Call begin_bc_block only\n\tafter genericizing cond and incr expressions.\n\n\t* doc/extend.texi: Document break and continue behavior in\n\tstatement expressions.\n\n\t* c-c++-common/pr44715.c: New test.\n\nFrom-SVN: r268188", "tree": {"sha": "99fe79352a4af99969da0d773320d576ce4db3f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99fe79352a4af99969da0d773320d576ce4db3f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/372e6e6bac4046d87e92894535b80f28409e9d3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/372e6e6bac4046d87e92894535b80f28409e9d3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/372e6e6bac4046d87e92894535b80f28409e9d3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/372e6e6bac4046d87e92894535b80f28409e9d3f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d0f2db231639f73802c07f03cf4a77125a0daeb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0f2db231639f73802c07f03cf4a77125a0daeb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0f2db231639f73802c07f03cf4a77125a0daeb7"}], "stats": {"total": 202, "additions": 197, "deletions": 5}, "files": [{"sha": "401b81d75c7a86fc1e8915b4a154a88be2b4ce29", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/372e6e6bac4046d87e92894535b80f28409e9d3f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/372e6e6bac4046d87e92894535b80f28409e9d3f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=372e6e6bac4046d87e92894535b80f28409e9d3f", "patch": "@@ -1,3 +1,9 @@\n+2019-01-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/44715\n+\t* doc/extend.texi: Document break and continue behavior in\n+\tstatement expressions.\n+\n 2019-01-23  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/89008"}, {"sha": "a36fe31ca23d56a19024b9f70e09ddb1c5f3c0a9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/372e6e6bac4046d87e92894535b80f28409e9d3f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/372e6e6bac4046d87e92894535b80f28409e9d3f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=372e6e6bac4046d87e92894535b80f28409e9d3f", "patch": "@@ -1,5 +1,9 @@\n 2019-01-23  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c/44715\n+\t* cp-gimplify.c (genericize_cp_loop): Call begin_bc_block only\n+\tafter genericizing cond and incr expressions.\n+\n \tPR c++/88984\n \t* cp-gimplify.c (genericize_switch_stmt): Move cond genericization\n \tbefore the begin_bc_block call."}, {"sha": "33111bd14bffc20d03a824f867b869c7625a68b7", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/372e6e6bac4046d87e92894535b80f28409e9d3f/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/372e6e6bac4046d87e92894535b80f28409e9d3f/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=372e6e6bac4046d87e92894535b80f28409e9d3f", "patch": "@@ -242,14 +242,15 @@ genericize_cp_loop (tree *stmt_p, location_t start_locus, tree cond, tree body,\n   tree exit = NULL;\n   tree stmt_list = NULL;\n \n-  blab = begin_bc_block (bc_break, start_locus);\n-  clab = begin_bc_block (bc_continue, start_locus);\n-\n   protected_set_expr_location (incr, start_locus);\n \n   cp_walk_tree (&cond, cp_genericize_r, data, NULL);\n-  cp_walk_tree (&body, cp_genericize_r, data, NULL);\n   cp_walk_tree (&incr, cp_genericize_r, data, NULL);\n+\n+  blab = begin_bc_block (bc_break, start_locus);\n+  clab = begin_bc_block (bc_continue, start_locus);\n+\n+  cp_walk_tree (&body, cp_genericize_r, data, NULL);\n   *walk_subtrees = 0;\n \n   if (cond && TREE_CODE (cond) != INTEGER_CST)"}, {"sha": "4044fba753e3cce0d8a8fbe6884b9cd04eda1d54", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/372e6e6bac4046d87e92894535b80f28409e9d3f/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/372e6e6bac4046d87e92894535b80f28409e9d3f/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=372e6e6bac4046d87e92894535b80f28409e9d3f", "patch": "@@ -213,7 +213,14 @@ statement expression is part of a larger expression then it is\n unspecified which other subexpressions of that expression have been\n evaluated except where the language definition requires certain\n subexpressions to be evaluated before or after the statement\n-expression.  In any case, as with a function call, the evaluation of a\n+expression.  A @code{break} or @code{continue} statement inside of\n+a statement expression used in @code{while}, @code{do} or @code{for}\n+loop or @code{switch} statement condition\n+or @code{for} statement init or increment expressions jumps to an\n+outer loop or @code{switch} statement if any (otherwise it is an error),\n+rather than to the loop or @code{switch} statement in whose condition\n+or init or increment expression it appears.\n+In any case, as with a function call, the evaluation of a\n statement expression is not interleaved with the evaluation of other\n parts of the containing expression.  For example,\n "}, {"sha": "38fec831cb88020afe1defd90528b3859e753d32", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/372e6e6bac4046d87e92894535b80f28409e9d3f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/372e6e6bac4046d87e92894535b80f28409e9d3f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=372e6e6bac4046d87e92894535b80f28409e9d3f", "patch": "@@ -1,5 +1,8 @@\n 2019-01-23  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c/44715\n+\t* c-c++-common/pr44715.c: New test.\n+\n \tPR c++/88984\n \t* c-c++-common/pr88984.c: New test.\n "}, {"sha": "f20a14688fa622299c0af59bd583e38b1e8fdc8a", "filename": "gcc/testsuite/c-c++-common/pr44715.c", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/372e6e6bac4046d87e92894535b80f28409e9d3f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr44715.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/372e6e6bac4046d87e92894535b80f28409e9d3f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr44715.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr44715.c?ref=372e6e6bac4046d87e92894535b80f28409e9d3f", "patch": "@@ -0,0 +1,171 @@\n+/* PR c/44715 */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+\n+void\n+foo (int x, int y)\n+{\n+  int z;\n+  switch (x)\n+    {\n+    case 0:\n+      while (({ if (y) break; 0; }))\n+\t;\n+      __builtin_abort ();\n+      break;\n+    case 1:\n+      do\n+\t;\n+      while (({ if (y) break; 0; }));\n+      __builtin_abort ();\n+      break;\n+    case 2:\n+      for (z = ({ if (y) break; 0; }); z < 5; z++)\n+\t;\n+      __builtin_abort ();\n+      break;\n+    case 3:\n+      for (z = 0; z < ({ if (y) break; 5; }); z++)\n+\t;\n+      __builtin_abort ();\n+      break;\n+    case 4:\n+      for (z = 0; z < 5; z += ({ if (y) break; 1; }))\n+\t;\n+      __builtin_abort ();\n+      break;\n+    case 5:\n+      switch (({ if (y) break; 1; }))\n+\t{\n+\tdefault: break;\n+\t}\n+      __builtin_abort ();\n+      break;\n+    default:\n+      __builtin_abort ();\n+      break;\n+    }\n+}\n+\n+void\n+bar (int x, int y)\n+{\n+  int z;\n+  while (x >= 0)\n+    {\n+      if (x == 0)\n+\t{\n+\t  while (({ if (y) break; 0; }))\n+\t    ;\n+\t  __builtin_abort ();\n+\t}\n+      if (x == 1)\n+\t{\n+\t  do\n+\t    ;\n+\t  while (({ if (y) break; 0; }));\n+\t  __builtin_abort ();\n+\t}\n+      if (x == 2)\n+\t{\n+\t  for (z = ({ if (y) break; 0; }); z < 5; z++)\n+\t    ;\n+\t  __builtin_abort ();\n+\t}\n+      if (x == 3)\n+\t{\n+\t  for (z = 0; z < ({ if (y) break; 5; }); z++)\n+\t    ;\n+\t  __builtin_abort ();\n+\t}\n+      if (x == 4)\n+\t{\n+\t  for (z = 0; z < 5; z += ({ if (y) break; 1; }))\n+\t    ;\n+\t  __builtin_abort ();\n+\t}\n+      if (x == 5)\n+\t{\n+\t  switch (({ if (y) break; 1; }))\n+\t    {\n+\t    default: break;\n+\t    }\n+\t  __builtin_abort ();\n+\t}\n+    }\n+}\n+\n+void\n+baz (int x, int y)\n+{\n+  int z;\n+  while (x >= 0)\n+    {\n+      if (++y == 2)\n+\treturn;\n+      if (x == 0)\n+\t{\n+\t  while (({ if (y) continue; 0; }))\n+\t    ;\n+\t  __builtin_abort ();\n+\t}\n+      if (x == 1)\n+\t{\n+\t  do\n+\t    ;\n+\t  while (({ if (y) continue; 0; }));\n+\t  __builtin_abort ();\n+\t}\n+      if (x == 2)\n+\t{\n+\t  for (z = ({ if (y) continue; 0; }); z < 5; z++)\n+\t    ;\n+\t  __builtin_abort ();\n+\t}\n+      if (x == 3)\n+\t{\n+\t  for (z = 0; z < ({ if (y) continue; 5; }); z++)\n+\t    ;\n+\t  __builtin_abort ();\n+\t}\n+      if (x == 4)\n+\t{\n+\t  for (z = 0; z < 5; z += ({ if (y) continue; 1; }))\n+\t    ;\n+\t  __builtin_abort ();\n+\t}\n+      if (x == 5)\n+\t{\n+\t  switch (({ if (y) continue; 1; }))\n+\t    {\n+\t    default: break;\n+\t    }\n+\t  __builtin_abort ();\n+\t}\n+    }\n+  __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  foo (0, 1);\n+  foo (1, 1);\n+  foo (2, 1);\n+  foo (3, 1);\n+  foo (4, 1);\n+  foo (5, 1);\n+  bar (0, 1);\n+  bar (1, 1);\n+  bar (2, 1);\n+  bar (3, 1);\n+  bar (4, 1);\n+  bar (5, 1);\n+  baz (0, 0);\n+  baz (1, 0);\n+  baz (2, 0);\n+  baz (3, 0);\n+  baz (4, 0);\n+  baz (5, 0);\n+  return 0;\n+}"}]}