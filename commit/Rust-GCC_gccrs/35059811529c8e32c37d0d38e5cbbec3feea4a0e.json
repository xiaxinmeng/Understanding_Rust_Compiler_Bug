{"sha": "35059811529c8e32c37d0d38e5cbbec3feea4a0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUwNTk4MTE1MjljOGUzMmMzN2QwZDM4ZTVjYmJlYzNmZWVhNGEwZQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2005-11-06T10:17:04Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2005-11-06T10:17:04Z"}, "message": "intrinsic.c (add_functions): Add ctime and fdate intrinsics.\n\n\t* intrinsic.c (add_functions): Add ctime and fdate intrinsics.\n\t(add_subroutines): Likewise.\n\t* intrinsic.h: Prototypes for gfc_check_ctime,\n\tgfc_check_ctime_sub, gfc_check_fdate_sub, gfc_resolve_ctime,\n\tgfc_resolve_fdate, gfc_resolve_ctime_sub, gfc_resolve_fdate_sub.\n\t* gfortran.h: Add GFC_ISYM_CTIME and GFC_ISYM_FDATE.\n\t* iresolve.c (gfc_resolve_ctime, gfc_resolve_fdate,\n\tgfc_resolve_ctime_sub, gfc_resolve_fdate_sub): New functions.\n\t* trans-decl.c (gfc_build_intrinsic_function_decls): Add\n\tgfor_fndecl_fdate and gfor_fndecl_ctime.\n\t* check.c (gfc_check_ctime, gfc_check_ctime_sub,\n\tgfc_check_fdate_sub): New functions.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_ctime,\n\tgfc_conv_intrinsic_fdate): New functions.\n\t(gfc_conv_intrinsic_function): Add cases for GFC_ISYM_CTIME\n\tand GFC_ISYM_FDATE.\n\t* intrinsic.texi: Documentation for the new CTIME and FDATE\n\tintrinsics.\n\t* trans.h: Declarations for gfor_fndecl_ctime and gfor_fndecl_fdate.\n\n\t* intrinsics/ctime.c: New file.\n\t* configure.ac: Add check for ctime.\n\t* Makefile.am: Add ctime.c\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.\n\t* Makefile.in: Regenerate.\n\nFrom-SVN: r106558", "tree": {"sha": "2bf68231c09bf20e0ef20f8acec4df3d8c11c85c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bf68231c09bf20e0ef20f8acec4df3d8c11c85c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35059811529c8e32c37d0d38e5cbbec3feea4a0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35059811529c8e32c37d0d38e5cbbec3feea4a0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35059811529c8e32c37d0d38e5cbbec3feea4a0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35059811529c8e32c37d0d38e5cbbec3feea4a0e/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f2a3c8f5e220138bfdb2eb724acedcbe6515d39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f2a3c8f5e220138bfdb2eb724acedcbe6515d39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f2a3c8f5e220138bfdb2eb724acedcbe6515d39"}], "stats": {"total": 539, "additions": 534, "deletions": 5}, "files": [{"sha": "46e1c21d4571ce6c7a58a3f494088debe3b39251", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35059811529c8e32c37d0d38e5cbbec3feea4a0e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35059811529c8e32c37d0d38e5cbbec3feea4a0e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=35059811529c8e32c37d0d38e5cbbec3feea4a0e", "patch": "@@ -1,3 +1,25 @@\n+2005-11-06  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* intrinsic.c (add_functions): Add ctime and fdate intrinsics.\n+\t(add_subroutines): Likewise.\n+\t* intrinsic.h: Prototypes for gfc_check_ctime,\n+\tgfc_check_ctime_sub, gfc_check_fdate_sub, gfc_resolve_ctime,\n+\tgfc_resolve_fdate, gfc_resolve_ctime_sub, gfc_resolve_fdate_sub.\n+\t* gfortran.h: Add GFC_ISYM_CTIME and GFC_ISYM_FDATE.\n+\t* iresolve.c (gfc_resolve_ctime, gfc_resolve_fdate,\n+\tgfc_resolve_ctime_sub, gfc_resolve_fdate_sub): New functions.\n+\t* trans-decl.c (gfc_build_intrinsic_function_decls): Add\n+\tgfor_fndecl_fdate and gfor_fndecl_ctime.\n+\t* check.c (gfc_check_ctime, gfc_check_ctime_sub,\n+\tgfc_check_fdate_sub): New functions.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_ctime,\n+\tgfc_conv_intrinsic_fdate): New functions.\n+\t(gfc_conv_intrinsic_function): Add cases for GFC_ISYM_CTIME\n+\tand GFC_ISYM_FDATE.\n+\t* intrinsic.texi: Documentation for the new CTIME and FDATE\n+\tintrinsics.\n+\t* trans.h: Declarations for gfor_fndecl_ctime and gfor_fndecl_fdate.\n+\n 2005-11-05  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* decl.c, trans-decl.c: Fix comment typos."}, {"sha": "bf81e9f5150bf132e6e2d2a16101ef3ed09b0d11", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35059811529c8e32c37d0d38e5cbbec3feea4a0e/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35059811529c8e32c37d0d38e5cbbec3feea4a0e/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=35059811529c8e32c37d0d38e5cbbec3feea4a0e", "patch": "@@ -666,6 +666,19 @@ gfc_check_cshift (gfc_expr * array, gfc_expr * shift, gfc_expr * dim)\n }\n \n \n+try\n+gfc_check_ctime (gfc_expr * time)\n+{\n+  if (scalar_check (time, 0) == FAILURE)\n+    return FAILURE;\n+\n+  if (type_check (time, 0, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n try\n gfc_check_dcmplx (gfc_expr * x, gfc_expr * y)\n {\n@@ -2539,6 +2552,21 @@ gfc_check_srand (gfc_expr * x)\n   return SUCCESS;\n }\n \n+try\n+gfc_check_ctime_sub (gfc_expr * time, gfc_expr * result)\n+{\n+  if (scalar_check (time, 0) == FAILURE)\n+    return FAILURE;\n+\n+  if (type_check (time, 0, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  if (type_check (result, 1, BT_CHARACTER) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n try\n gfc_check_etime (gfc_expr * x)\n {\n@@ -2591,6 +2619,16 @@ gfc_check_etime_sub (gfc_expr * values, gfc_expr * time)\n }\n \n \n+try\n+gfc_check_fdate_sub (gfc_expr * date)\n+{\n+  if (type_check (date, 0, BT_CHARACTER) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n try\n gfc_check_gerror (gfc_expr * msg)\n {"}, {"sha": "96bd38666ba19f819241e5a9dedeeb4467394a69", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35059811529c8e32c37d0d38e5cbbec3feea4a0e/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35059811529c8e32c37d0d38e5cbbec3feea4a0e/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=35059811529c8e32c37d0d38e5cbbec3feea4a0e", "patch": "@@ -315,6 +315,7 @@ enum gfc_generic_isym_id\n   GFC_ISYM_COSH,\n   GFC_ISYM_COUNT,\n   GFC_ISYM_CSHIFT,\n+  GFC_ISYM_CTIME,\n   GFC_ISYM_DBLE,\n   GFC_ISYM_DIM,\n   GFC_ISYM_DOT_PRODUCT,\n@@ -325,6 +326,7 @@ enum gfc_generic_isym_id\n   GFC_ISYM_ETIME,\n   GFC_ISYM_EXP,\n   GFC_ISYM_EXPONENT,\n+  GFC_ISYM_FDATE,\n   GFC_ISYM_FLOOR,\n   GFC_ISYM_FNUM,\n   GFC_ISYM_FRACTION,"}, {"sha": "eedbaa7c1c19f1dd22c7b27160539d69404324ea", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35059811529c8e32c37d0d38e5cbbec3feea4a0e/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35059811529c8e32c37d0d38e5cbbec3feea4a0e/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=35059811529c8e32c37d0d38e5cbbec3feea4a0e", "patch": "@@ -872,7 +872,7 @@ add_functions (void)\n     *x = \"x\", *sh = \"shift\", *stg = \"string\", *ssg = \"substring\",\n     *y = \"y\", *sz = \"size\", *sta = \"string_a\", *stb = \"string_b\",\n     *z = \"z\", *ln = \"len\", *ut = \"unit\", *han = \"handler\",\n-    *num = \"number\";\n+    *num = \"number\", *tm = \"time\";\n \n   int di, dr, dd, dl, dc, dz, ii;\n \n@@ -1214,6 +1214,12 @@ add_functions (void)\n \n   make_generic (\"cshift\", GFC_ISYM_CSHIFT, GFC_STD_F95);\n \n+  add_sym_1 (\"ctime\", 0, 1, BT_CHARACTER, 0, GFC_STD_GNU,\n+              gfc_check_ctime, NULL, gfc_resolve_ctime,\n+\t      tm, BT_INTEGER, di, REQUIRED);\n+\n+  make_generic (\"ctime\", GFC_ISYM_CTIME, GFC_STD_GNU);\n+\n   add_sym_1 (\"dble\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     gfc_check_dble, gfc_simplify_dble, gfc_resolve_dble,\n \t     a, BT_REAL, dr, REQUIRED);\n@@ -1329,6 +1335,11 @@ add_functions (void)\n \n   make_generic (\"exponent\", GFC_ISYM_EXPONENT, GFC_STD_F95);\n \n+  add_sym_0 (\"fdate\", 1, 0, BT_CHARACTER, dc, GFC_STD_GNU,\n+\t     NULL, NULL, gfc_resolve_fdate);\n+\n+  make_generic (\"fdate\", GFC_ISYM_FDATE, GFC_STD_GNU);\n+\n   add_sym_2 (\"floor\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_a_ikind, gfc_simplify_floor, gfc_resolve_floor,\n \t     a, BT_REAL, dr, REQUIRED, kind, BT_INTEGER, di, OPTIONAL);\n@@ -2147,7 +2158,7 @@ add_subroutines (void)\n     *com = \"command\", *length = \"length\", *st = \"status\",\n     *val = \"value\", *num = \"number\", *name = \"name\",\n     *trim_name = \"trim_name\", *ut = \"unit\", *han = \"handler\",\n-    *sec = \"seconds\";\n+    *sec = \"seconds\", *res = \"result\";\n \n   int di, dr, dc, dl, ii;\n \n@@ -2166,6 +2177,10 @@ add_subroutines (void)\n \t      tm, BT_REAL, dr, REQUIRED);\n \n   /* More G77 compatibility garbage.  */\n+  add_sym_2s (\"ctime\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+\t     gfc_check_ctime_sub, NULL, gfc_resolve_ctime_sub,\n+\t     tm, BT_INTEGER, di, REQUIRED, res, BT_CHARACTER, dc, REQUIRED);\n+\n   add_sym_1s (\"second\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_second_sub, NULL, gfc_resolve_second_sub,\n \t      tm, BT_REAL, dr, REQUIRED);\n@@ -2188,6 +2203,10 @@ add_subroutines (void)\n \t     gfc_check_etime_sub, NULL, gfc_resolve_etime_sub,\n \t      vl, BT_REAL, 4, REQUIRED, tm, BT_REAL, 4, REQUIRED);\n \n+  add_sym_1s (\"fdate\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n+\t     gfc_check_fdate_sub, NULL, gfc_resolve_fdate_sub,\n+\t     dt, BT_CHARACTER, dc, REQUIRED);\n+\n   add_sym_1s (\"gerror\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n               gfc_check_gerror, NULL, gfc_resolve_gerror, c, BT_CHARACTER,\n \t      dc, REQUIRED);"}, {"sha": "70bf866bd3ebb00601d496316c94f66b5d327872", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35059811529c8e32c37d0d38e5cbbec3feea4a0e/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35059811529c8e32c37d0d38e5cbbec3feea4a0e/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=35059811529c8e32c37d0d38e5cbbec3feea4a0e", "patch": "@@ -44,6 +44,7 @@ try gfc_check_chdir (gfc_expr *);\n try gfc_check_cmplx (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_count (gfc_expr *, gfc_expr *);\n try gfc_check_cshift (gfc_expr *, gfc_expr *, gfc_expr *);\n+try gfc_check_ctime (gfc_expr *);\n try gfc_check_dcmplx (gfc_expr *, gfc_expr *);\n try gfc_check_dble (gfc_expr *);\n try gfc_check_digits (gfc_expr *);\n@@ -133,12 +134,14 @@ try gfc_check_x (gfc_expr *);\n try gfc_check_alarm_sub (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_chdir_sub (gfc_expr *, gfc_expr *);\n try gfc_check_cpu_time (gfc_expr *);\n+try gfc_check_ctime_sub (gfc_expr *, gfc_expr *);\n try gfc_check_system_clock (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_date_and_time (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_exit (gfc_expr *);\n try gfc_check_flush (gfc_expr *);\n try gfc_check_free (gfc_expr *);\n try gfc_check_fstat_sub (gfc_expr *, gfc_expr *, gfc_expr *);\n+try gfc_check_fdate_sub (gfc_expr *);\n try gfc_check_gerror (gfc_expr *);\n try gfc_check_getlog (gfc_expr *);\n try gfc_check_mvbits (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *,\n@@ -298,6 +301,7 @@ void gfc_resolve_cos (gfc_expr *, gfc_expr *);\n void gfc_resolve_cosh (gfc_expr *, gfc_expr *);\n void gfc_resolve_count (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_cshift (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n+void gfc_resolve_ctime (gfc_expr *, gfc_expr *);\n void gfc_resolve_dble (gfc_expr *, gfc_expr *);\n void gfc_resolve_dim (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_dot_product (gfc_expr *, gfc_expr *, gfc_expr *);\n@@ -307,6 +311,7 @@ void gfc_resolve_eoshift (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *,\n void gfc_resolve_etime_sub (gfc_code *);\n void gfc_resolve_exp (gfc_expr *, gfc_expr *);\n void gfc_resolve_exponent (gfc_expr *, gfc_expr *);\n+void gfc_resolve_fdate (gfc_expr *);\n void gfc_resolve_floor (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_fnum (gfc_expr *, gfc_expr *);\n void gfc_resolve_fraction (gfc_expr *, gfc_expr *);\n@@ -399,10 +404,12 @@ void gfc_resolve_verify (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_alarm_sub (gfc_code *);\n void gfc_resolve_chdir_sub (gfc_code *);\n void gfc_resolve_cpu_time (gfc_code *);\n+void gfc_resolve_ctime_sub (gfc_code *);\n void gfc_resolve_exit (gfc_code *);\n void gfc_resolve_flush (gfc_code *);\n void gfc_resolve_free (gfc_code *);\n void gfc_resolve_fstat_sub (gfc_code *);\n+void gfc_resolve_fdate_sub (gfc_code *);\n void gfc_resolve_gerror (gfc_code *);\n void gfc_resolve_getarg (gfc_code *);\n void gfc_resolve_getcwd_sub (gfc_code *);"}, {"sha": "81a56f5fb40a8b7515384fcb4c2c51825f78468d", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35059811529c8e32c37d0d38e5cbbec3feea4a0e/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35059811529c8e32c37d0d38e5cbbec3feea4a0e/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=35059811529c8e32c37d0d38e5cbbec3feea4a0e", "patch": "@@ -68,6 +68,7 @@ and editing.  All contributions and corrections are strongly encouraged.\n * @code{COUNT}:         COUNT,     Count occurrences of .TRUE. in an array\n * @code{CPU_TIME}:      CPU_TIME,  CPU time subroutine\n * @code{CSHIFT}:        CSHIFT,    Circular array shift function\n+* @code{CTIME}:         CTIME,     Subroutine (or function) to convert a time into a string\n * @code{DATE_AND_TIME}: DATE_AND_TIME, Date and time subroutine\n * @code{DBLE}:          DBLE,      Double precision conversion function\n * @code{DCMPLX}:        DCMPLX,    Double complex conversion function\n@@ -86,6 +87,7 @@ and editing.  All contributions and corrections are strongly encouraged.\n * @code{EXIT}:          EXIT,      Exit the program with status.\n * @code{EXP}:           EXP,       Exponential function\n * @code{EXPONENT}:      EXPONENT,  Exponent function\n+* @code{FDATE}:         FDATE,     Subroutine (or function) to get the current time as a string\n * @code{FLOOR}:         FLOOR,     Integer floor function\n * @code{FNUM}:          FNUM,      File number function\n * @code{FREE}:          FREE,      Memory de-allocation subroutine\n@@ -1833,6 +1835,58 @@ end program test_cshift\n @end table\n \n \n+@node CTIME\n+@section @code{CTIME} --- Convert a time into a string\n+@findex @code{CTIME} intrinsic\n+@cindex ctime subroutine \n+\n+@table @asis\n+@item @emph{Description}:\n+@code{CTIME(T,S)} converts @var{T}, a system time value, such as returned\n+by @code{TIME8()}, to a string of the form @samp{Sat Aug 19 18:13:14\n+1995}, and returns that string into @var{S}.\n+\n+If @code{CTIME} is invoked as a function, it can not be invoked as a\n+subroutine, and vice versa.\n+\n+@var{T} is an @code{INTENT(IN)} @code{INTEGER(KIND=8)} variable.\n+@var{S} is an @code{INTENT(OUT)} @code{CHARACTER} variable.\n+\n+@item @emph{Option}:\n+gnu\n+\n+@item @emph{Class}:\n+subroutine\n+\n+@item @emph{Syntax}:\n+@multitable @columnfractions .80\n+@item @code{CALL CTIME(T,S)}.\n+@item @code{S = CTIME(T)}, (not recommended).\n+@end multitable\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{S}@tab The type shall be of type @code{CHARACTER}.\n+@item @var{T}@tab The type shall be of type @code{INTEGER(KIND=8)}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The converted date and time as a string.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_ctime\n+    integer(8) :: i\n+    character(len=30) :: date\n+    i = time8()\n+\n+    ! Do something, main part of the program\n+    \n+    call ctime(i,date)\n+    print *, 'Program was started on ', date\n+end program test_ctime\n+@end smallexample\n+@end table\n \n @node DATE_AND_TIME\n @section @code{DATE_AND_TIME} --- Date and time subroutine\n@@ -2736,6 +2790,59 @@ See @code{MALLOC} for an example.\n @end table\n \n \n+@node FDATE\n+@section @code{FDATE} --- Get the current time as a string\n+@findex @code{FDATE} intrinsic\n+@cindex fdate subroutine \n+\n+@table @asis\n+@item @emph{Description}:\n+@code{FDATE(DATE)} returns the current date (using the same format as\n+@code{CTIME}) in @var{DATE}. It is equivalent to @code{CALL CTIME(DATE,\n+TIME8())}.\n+\n+If @code{FDATE} is invoked as a function, it can not be invoked as a\n+subroutine, and vice versa.\n+\n+@var{DATE} is an @code{INTENT(OUT)} @code{CHARACTER} variable.\n+\n+@item @emph{Option}:\n+gnu\n+\n+@item @emph{Class}:\n+subroutine\n+\n+@item @emph{Syntax}:\n+@multitable @columnfractions .80\n+@item @code{CALL FDATE(DATE)}.\n+@item @code{DATE = FDATE()}, (not recommended).\n+@end multitable\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{DATE}@tab The type shall be of type @code{CHARACTER}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The current date and time as a string.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_fdate\n+    integer(8) :: i, j\n+    character(len=30) :: date\n+    call fdate(date)\n+    print *, 'Program started on ', date\n+    do i = 1, 100000000 ! Just a delay\n+        j = i * i - i\n+    end do\n+    call fdate(date)\n+    print *, 'Program ended on ', date\n+end program test_fdate\n+@end smallexample\n+@end table\n+\n+\n @node FLOOR\n @section @code{FLOOR} --- Integer floor function\n @findex @code{FLOOR} intrinsic"}, {"sha": "22aeda8eedb4e4aadf2d2869d949c4aa2806ffa2", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35059811529c8e32c37d0d38e5cbbec3feea4a0e/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35059811529c8e32c37d0d38e5cbbec3feea4a0e/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=35059811529c8e32c37d0d38e5cbbec3feea4a0e", "patch": "@@ -440,6 +440,28 @@ gfc_resolve_cshift (gfc_expr * f, gfc_expr * array,\n }\n \n \n+void\n+gfc_resolve_ctime (gfc_expr * f, gfc_expr * time)\n+{\n+  gfc_typespec ts;\n+  \n+  f->ts.type = BT_CHARACTER;\n+  f->ts.kind = gfc_default_character_kind;\n+\n+  /* ctime TIME argument is a INTEGER(KIND=8), says the doc */\n+  if (time->ts.kind != 8)\n+    {\n+      ts.type = BT_INTEGER;\n+      ts.kind = 8;\n+      ts.derived = NULL;\n+      ts.cl = NULL;\n+      gfc_convert_type (time, &ts, 2);\n+    }\n+\n+  f->value.function.name = gfc_get_string (PREFIX(\"ctime\"));\n+}\n+\n+\n void\n gfc_resolve_dble (gfc_expr * f, gfc_expr * a)\n {\n@@ -560,6 +582,15 @@ gfc_resolve_exponent (gfc_expr * f, gfc_expr * x)\n }\n \n \n+void\n+gfc_resolve_fdate (gfc_expr * f)\n+{\n+  f->ts.type = BT_CHARACTER;\n+  f->ts.kind = gfc_default_character_kind;\n+  f->value.function.name = gfc_get_string (PREFIX(\"fdate\"));\n+}\n+\n+\n void\n gfc_resolve_floor (gfc_expr * f, gfc_expr * a, gfc_expr * kind)\n {\n@@ -2144,6 +2175,32 @@ gfc_resolve_free (gfc_code * c)\n }\n \n \n+void\n+gfc_resolve_ctime_sub (gfc_code * c)\n+{\n+  gfc_typespec ts;\n+  \n+  /* ctime TIME argument is a INTEGER(KIND=8), says the doc */\n+  if (c->ext.actual->expr->ts.kind != 8)\n+    {\n+      ts.type = BT_INTEGER;\n+      ts.kind = 8;\n+      ts.derived = NULL;\n+      ts.cl = NULL;\n+      gfc_convert_type (c->ext.actual->expr, &ts, 2);\n+    }\n+\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol (PREFIX(\"ctime_sub\"));\n+}\n+\n+\n+void\n+gfc_resolve_fdate_sub (gfc_code * c)\n+{\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol (PREFIX (\"fdate_sub\"));\n+}\n+\n+\n void\n gfc_resolve_gerror (gfc_code * c)\n {"}, {"sha": "9d71d7143bc1217b675b9269146a8d958fe4a5d6", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35059811529c8e32c37d0d38e5cbbec3feea4a0e/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35059811529c8e32c37d0d38e5cbbec3feea4a0e/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=35059811529c8e32c37d0d38e5cbbec3feea4a0e", "patch": "@@ -87,6 +87,8 @@ tree gfor_fndecl_select_string;\n tree gfor_fndecl_runtime_error;\n tree gfor_fndecl_set_fpe;\n tree gfor_fndecl_set_std;\n+tree gfor_fndecl_ctime;\n+tree gfor_fndecl_fdate;\n tree gfor_fndecl_ttynam;\n tree gfor_fndecl_in_pack;\n tree gfor_fndecl_in_unpack;\n@@ -1859,6 +1861,21 @@ gfc_build_intrinsic_function_decls (void)\n                                      gfc_charlen_type_node,\n                                      gfc_c_int_type_node);\n \n+  gfor_fndecl_fdate =\n+    gfc_build_library_function_decl (get_identifier (PREFIX(\"fdate\")),\n+                                     void_type_node,\n+                                     2,\n+                                     pchar_type_node,\n+                                     gfc_charlen_type_node);\n+\n+  gfor_fndecl_ctime =\n+    gfc_build_library_function_decl (get_identifier (PREFIX(\"ctime\")),\n+                                     void_type_node,\n+                                     3,\n+                                     pchar_type_node,\n+                                     gfc_charlen_type_node,\n+                                     gfc_int8_type_node);\n+\n   gfor_fndecl_adjustl =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"adjustl\")),\n \t\t\t\t     void_type_node,"}, {"sha": "6ce65507e6c293d0093e3b8654cf83b598a779f7", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35059811529c8e32c37d0d38e5cbbec3feea4a0e/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35059811529c8e32c37d0d38e5cbbec3feea4a0e/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=35059811529c8e32c37d0d38e5cbbec3feea4a0e", "patch": "@@ -1037,6 +1037,78 @@ gfc_conv_intrinsic_char (gfc_se * se, gfc_expr * expr)\n }\n \n \n+static void\n+gfc_conv_intrinsic_ctime (gfc_se * se, gfc_expr * expr)\n+{\n+  tree var;\n+  tree len;\n+  tree tmp;\n+  tree arglist;\n+  tree type;\n+  tree cond;\n+  tree gfc_int8_type_node = gfc_get_int_type (8);\n+\n+  type = build_pointer_type (gfc_character1_type_node);\n+  var = gfc_create_var (type, \"pstr\");\n+  len = gfc_create_var (gfc_int8_type_node, \"len\");\n+\n+  tmp = gfc_conv_intrinsic_function_args (se, expr);\n+  arglist = gfc_chainon_list (NULL_TREE, gfc_build_addr_expr (NULL, var));\n+  arglist = gfc_chainon_list (arglist, gfc_build_addr_expr (NULL, len));\n+  arglist = chainon (arglist, tmp);\n+\n+  tmp = gfc_build_function_call (gfor_fndecl_ctime, arglist);\n+  gfc_add_expr_to_block (&se->pre, tmp);\n+\n+  /* Free the temporary afterwards, if necessary.  */\n+  cond = build2 (GT_EXPR, boolean_type_node, len,\n+\t\t build_int_cst (TREE_TYPE (len), 0));\n+  arglist = gfc_chainon_list (NULL_TREE, var);\n+  tmp = gfc_build_function_call (gfor_fndecl_internal_free, arglist);\n+  tmp = build3_v (COND_EXPR, cond, tmp, build_empty_stmt ());\n+  gfc_add_expr_to_block (&se->post, tmp);\n+\n+  se->expr = var;\n+  se->string_length = len;\n+}\n+\n+\n+static void\n+gfc_conv_intrinsic_fdate (gfc_se * se, gfc_expr * expr)\n+{\n+  tree var;\n+  tree len;\n+  tree tmp;\n+  tree arglist;\n+  tree type;\n+  tree cond;\n+  tree gfc_int4_type_node = gfc_get_int_type (4);\n+\n+  type = build_pointer_type (gfc_character1_type_node);\n+  var = gfc_create_var (type, \"pstr\");\n+  len = gfc_create_var (gfc_int4_type_node, \"len\");\n+\n+  tmp = gfc_conv_intrinsic_function_args (se, expr);\n+  arglist = gfc_chainon_list (NULL_TREE, gfc_build_addr_expr (NULL, var));\n+  arglist = gfc_chainon_list (arglist, gfc_build_addr_expr (NULL, len));\n+  arglist = chainon (arglist, tmp);\n+\n+  tmp = gfc_build_function_call (gfor_fndecl_fdate, arglist);\n+  gfc_add_expr_to_block (&se->pre, tmp);\n+\n+  /* Free the temporary afterwards, if necessary.  */\n+  cond = build2 (GT_EXPR, boolean_type_node, len,\n+\t\t build_int_cst (TREE_TYPE (len), 0));\n+  arglist = gfc_chainon_list (NULL_TREE, var);\n+  tmp = gfc_build_function_call (gfor_fndecl_internal_free, arglist);\n+  tmp = build3_v (COND_EXPR, cond, tmp, build_empty_stmt ());\n+  gfc_add_expr_to_block (&se->post, tmp);\n+\n+  se->expr = var;\n+  se->string_length = len;\n+}\n+\n+\n /* Return a character string containing the tty name.  */\n \n static void\n@@ -2973,6 +3045,10 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       gfc_conv_intrinsic_count (se, expr);\n       break;\n \n+    case GFC_ISYM_CTIME:\n+      gfc_conv_intrinsic_ctime (se, expr);\n+      break;\n+\n     case GFC_ISYM_DIM:\n       gfc_conv_intrinsic_dim (se, expr);\n       break;\n@@ -2981,6 +3057,10 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       gfc_conv_intrinsic_dprod (se, expr);\n       break;\n \n+    case GFC_ISYM_FDATE:\n+      gfc_conv_intrinsic_fdate (se, expr);\n+      break;\n+\n     case GFC_ISYM_IAND:\n       gfc_conv_intrinsic_bitop (se, expr, BIT_AND_EXPR);\n       break;"}, {"sha": "02fc2759609da33e5a5337afb1ea6b52a0166437", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35059811529c8e32c37d0d38e5cbbec3feea4a0e/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35059811529c8e32c37d0d38e5cbbec3feea4a0e/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=35059811529c8e32c37d0d38e5cbbec3feea4a0e", "patch": "@@ -458,6 +458,8 @@ extern GTY(()) tree gfor_fndecl_runtime_error;\n extern GTY(()) tree gfor_fndecl_set_fpe;\n extern GTY(()) tree gfor_fndecl_set_std;\n extern GTY(()) tree gfor_fndecl_ttynam;\n+extern GTY(()) tree gfor_fndecl_ctime;\n+extern GTY(()) tree gfor_fndecl_fdate;\n extern GTY(()) tree gfor_fndecl_in_pack;\n extern GTY(()) tree gfor_fndecl_in_unpack;\n extern GTY(()) tree gfor_fndecl_associated;"}, {"sha": "bfe60d335c4f4d2c11b0a376cbd668ddcc270c36", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35059811529c8e32c37d0d38e5cbbec3feea4a0e/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35059811529c8e32c37d0d38e5cbbec3feea4a0e/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=35059811529c8e32c37d0d38e5cbbec3feea4a0e", "patch": "@@ -1,3 +1,12 @@\n+2005-11-06  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* intrinsics/ctime.c: New file.\n+\t* configure.ac: Add check for ctime.\n+\t* Makefile.am: Add ctime.c\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\t* Makefile.in: Regenerate.\n+\n 2005-11-05  Richard Guenther  <rguenther@suse.de>\n \n \t* configure.ac: Use AM_FCFLAGS for extra flags, not FCFLAGS."}, {"sha": "34c04fa1cf2db260831e2bbb9ffdf85e7fd92d5b", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35059811529c8e32c37d0d38e5cbbec3feea4a0e/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35059811529c8e32c37d0d38e5cbbec3feea4a0e/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=35059811529c8e32c37d0d38e5cbbec3feea4a0e", "patch": "@@ -44,6 +44,7 @@ intrinsics/c99_functions.c \\\n intrinsics/chdir.c \\\n intrinsics/cpu_time.c \\\n intrinsics/cshift0.c \\\n+intrinsics/ctime.c \\\n intrinsics/date_and_time.c \\\n intrinsics/env.c \\\n intrinsics/erf.c \\"}, {"sha": "6370f264f1de55809ae20f5e78c978fed6132550", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35059811529c8e32c37d0d38e5cbbec3feea4a0e/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35059811529c8e32c37d0d38e5cbbec3feea4a0e/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=35059811529c8e32c37d0d38e5cbbec3feea4a0e", "patch": "@@ -165,7 +165,7 @@ am__objects_32 = close.lo file_pos.lo format.lo inquire.lo \\\n \tlist_read.lo lock.lo open.lo read.lo transfer.lo unit.lo \\\n \tunix.lo write.lo\n am__objects_33 = associated.lo abort.lo args.lo bessel.lo \\\n-\tc99_functions.lo chdir.lo cpu_time.lo cshift0.lo \\\n+\tc99_functions.lo chdir.lo cpu_time.lo cshift0.lo ctime.lo \\\n \tdate_and_time.lo env.lo erf.lo eoshift0.lo eoshift2.lo \\\n \tetime.lo exit.lo flush.lo fnum.lo gerror.lo getcwd.lo \\\n \tgetlog.lo getXid.lo hyper.lo hostnm.lo kill.lo ierrno.lo \\\n@@ -385,6 +385,7 @@ intrinsics/c99_functions.c \\\n intrinsics/chdir.c \\\n intrinsics/cpu_time.c \\\n intrinsics/cshift0.c \\\n+intrinsics/ctime.c \\\n intrinsics/date_and_time.c \\\n intrinsics/env.c \\\n intrinsics/erf.c \\\n@@ -2235,6 +2236,9 @@ cpu_time.lo: intrinsics/cpu_time.c\n cshift0.lo: intrinsics/cshift0.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o cshift0.lo `test -f 'intrinsics/cshift0.c' || echo '$(srcdir)/'`intrinsics/cshift0.c\n \n+ctime.lo: intrinsics/ctime.c\n+\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ctime.lo `test -f 'intrinsics/ctime.c' || echo '$(srcdir)/'`intrinsics/ctime.c\n+\n date_and_time.lo: intrinsics/date_and_time.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o date_and_time.lo `test -f 'intrinsics/date_and_time.c' || echo '$(srcdir)/'`intrinsics/date_and_time.c\n "}, {"sha": "04cda0c5d8a89c4a22321fc9d2c0aaefbaf8dccc", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35059811529c8e32c37d0d38e5cbbec3feea4a0e/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35059811529c8e32c37d0d38e5cbbec3feea4a0e/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=35059811529c8e32c37d0d38e5cbbec3feea4a0e", "patch": "@@ -252,6 +252,9 @@\n /* libm includes ctanl */\n #undef HAVE_CTANL\n \n+/* Define to 1 if you have the `ctime' function. */\n+#undef HAVE_CTIME\n+\n /* libm includes erf */\n #undef HAVE_ERF\n "}, {"sha": "d46d6084d5b1778146ca43210b0ccaf88deb7675", "filename": "libgfortran/configure", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35059811529c8e32c37d0d38e5cbbec3feea4a0e/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35059811529c8e32c37d0d38e5cbbec3feea4a0e/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=35059811529c8e32c37d0d38e5cbbec3feea4a0e", "patch": "@@ -7519,7 +7519,8 @@ done\n \n \n \n-for ac_func in sleep time ttyname signal alarm\n+\n+for ac_func in sleep time ttyname signal alarm ctime\n do\n as_ac_var=`echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n echo \"$as_me:$LINENO: checking for $ac_func\" >&5"}, {"sha": "bf2c25dde55e944f07f7a87138d02adfabef7cdf", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35059811529c8e32c37d0d38e5cbbec3feea4a0e/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35059811529c8e32c37d0d38e5cbbec3feea4a0e/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=35059811529c8e32c37d0d38e5cbbec3feea4a0e", "patch": "@@ -167,7 +167,7 @@ AC_CHECK_MEMBERS([struct stat.st_rdev])\n # Check for library functions.\n AC_CHECK_FUNCS(getrusage times mkstemp strtof strtold snprintf ftruncate chsize)\n AC_CHECK_FUNCS(chdir strerror getlogin gethostname kill link symlink perror)\n-AC_CHECK_FUNCS(sleep time ttyname signal alarm)\n+AC_CHECK_FUNCS(sleep time ttyname signal alarm ctime)\n \n # Check libc for getgid, getpid, getuid\n AC_CHECK_LIB([c],[getgid],[AC_DEFINE([HAVE_GETGID],[1],[libc includes getgid])])"}, {"sha": "1499fd970e42df6656d9559bf898c962d10fca35", "filename": "libgfortran/intrinsics/ctime.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35059811529c8e32c37d0d38e5cbbec3feea4a0e/libgfortran%2Fintrinsics%2Fctime.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35059811529c8e32c37d0d38e5cbbec3feea4a0e/libgfortran%2Fintrinsics%2Fctime.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fctime.c?ref=35059811529c8e32c37d0d38e5cbbec3feea4a0e", "patch": "@@ -0,0 +1,160 @@\n+/* Implementation of the CTIME and FDATE g77 intrinsics.\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+   Contributed by Fran\u00e7ois-Xavier Coudert <coudert@clipper.ens.fr>\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+#include \"config.h\"\n+#include \"libgfortran.h\"\n+\n+#ifdef TIME_WITH_SYS_TIME\n+#  include <sys/time.h>\n+#  include <time.h>\n+#else\n+#  if HAVE_SYS_TIME_H\n+#    include <sys/time.h>\n+#  else\n+#    ifdef HAVE_TIME_H\n+#      include <time.h>\n+#    endif\n+#  endif\n+#endif\n+\n+#include <string.h>\n+\n+\n+extern void fdate (char **, gfc_charlen_type *);\n+export_proto(fdate);\n+\n+void\n+fdate (char ** date, gfc_charlen_type * date_len)\n+{\n+#if defined(HAVE_TIME) && defined(HAVE_CTIME)\n+  int i;\n+  time_t now = time(NULL);\n+  *date = ctime (&now);\n+  if (*date != NULL)\n+    {\n+      *date = strdup (*date);\n+      *date_len = strlen (*date);\n+\n+      i = 0;\n+      while ((*date)[i])\n+       {\n+         if ((*date)[i] == '\\n')\n+           (*date)[i] = ' ';\n+         i++;\n+       }\n+      return;\n+    }\n+#endif\n+\n+  *date = NULL;\n+  *date_len = 0;\n+}\n+\n+\n+extern void fdate_sub (char *, gfc_charlen_type);\n+export_proto(fdate_sub);\n+\n+void\n+fdate_sub (char * date, gfc_charlen_type date_len)\n+{\n+#if defined(HAVE_TIME) && defined(HAVE_CTIME)\n+  int i;\n+  char *d;\n+  time_t now = time(NULL);\n+#endif\n+  \n+  memset (date, ' ', date_len);\n+#if defined(HAVE_TIME) && defined(HAVE_CTIME)\n+  d = ctime (&now);\n+  if (d != NULL)\n+    {\n+      i = 0;\n+      while (*d && *d != '\\n' && i < date_len)\n+       date[i++] = *(d++);\n+    }\n+#endif\n+}\n+\n+\n+\n+extern void PREFIX(ctime) (char **, gfc_charlen_type *, GFC_INTEGER_8);\n+export_proto_np(PREFIX(ctime));\n+\n+void\n+PREFIX(ctime) (char ** date, gfc_charlen_type * date_len, GFC_INTEGER_8 t)\n+{\n+#if defined(HAVE_CTIME)\n+  time_t now = t;\n+  int i;\n+  *date = ctime (&now);\n+  if (*date != NULL)\n+    {\n+      *date = strdup (*date);\n+      *date_len = strlen (*date);\n+\n+      i = 0;\n+      while ((*date)[i])\n+       {\n+         if ((*date)[i] == '\\n')\n+           (*date)[i] = ' ';\n+         i++;\n+       }\n+      return;\n+    }\n+#endif\n+\n+  *date = NULL;\n+  *date_len = 0;\n+}\n+\n+\n+extern void ctime_sub (GFC_INTEGER_8 *, char *, gfc_charlen_type);\n+export_proto(ctime_sub);\n+\n+void\n+ctime_sub (GFC_INTEGER_8 * t, char * date, gfc_charlen_type date_len)\n+{\n+#if defined(HAVE_CTIME)\n+  int i;\n+  char *d;\n+  time_t now = *t;\n+#endif\n+  \n+  memset (date, ' ', date_len);\n+#if defined(HAVE_CTIME)\n+  d = ctime (&now);\n+  if (d != NULL)\n+    {\n+      i = 0;\n+      while (*d && *d != '\\n' && i < date_len)\n+       date[i++] = *(d++);\n+    }\n+#endif\n+}"}]}