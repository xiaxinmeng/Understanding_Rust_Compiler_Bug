{"sha": "844190af178c210a6aff6b7eb4dd8c6a49210ff9", "node_id": "C_kwDOANBUbNoAKDg0NDE5MGFmMTc4YzIxMGE2YWZmNmI3ZWI0ZGQ4YzZhNDkyMTBmZjk", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2023-01-10T09:57:16Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2023-01-15T15:42:56Z"}, "message": "[PR107608] [range-ops] Avoid folding into INF when flag_trapping_math.\n\nAs discussed in the PR, for trapping math, do not fold overflowing\noperations into +-INF as doing so could elide a trap.\n\nThere is a minor adjustment to known_isinf() where it was mistakenly\nreturning true for an [infinity U NAN], whereas it should only return\ntrue when the range is exclusively +INF or -INF.  This is benign, as\nthere were no users of known_isinf up to now.\n\nTested on x86-64 Linux.\n\nI also ran the glibc testsuite (git sources) on x86-64 and this patch\nfixes:\n\n-FAIL: math/test-double-lgamma\n-FAIL: math/test-double-log1p\n-FAIL: math/test-float-lgamma\n-FAIL: math/test-float-log1p\n-FAIL: math/test-float128-catan\n-FAIL: math/test-float128-catanh\n-FAIL: math/test-float128-lgamma\n-FAIL: math/test-float128-log\n-FAIL: math/test-float128-log1p\n-FAIL: math/test-float128-y0\n-FAIL: math/test-float128-y1\n-FAIL: math/test-float32-lgamma\n-FAIL: math/test-float32-log1p\n-FAIL: math/test-float32x-lgamma\n-FAIL: math/test-float32x-log1p\n-FAIL: math/test-float64-lgamma\n-FAIL: math/test-float64-log1p\n-FAIL: math/test-float64x-lgamma\n-FAIL: math/test-ldouble-lgamma\n\n\tPR tree-optimization/107608\n\ngcc/ChangeLog:\n\n\t* range-op-float.cc (range_operator_float::fold_range): Avoid\n\tfolding into INF when flag_trapping_math.\n\t* value-range.h (frange::known_isinf): Return false for possible NANs.", "tree": {"sha": "5f9b8e686c349c021732f6e5a7587c177e8ef8e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f9b8e686c349c021732f6e5a7587c177e8ef8e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/844190af178c210a6aff6b7eb4dd8c6a49210ff9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/844190af178c210a6aff6b7eb4dd8c6a49210ff9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/844190af178c210a6aff6b7eb4dd8c6a49210ff9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/844190af178c210a6aff6b7eb4dd8c6a49210ff9/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ba715ed1aaf24d4f07c0d250a0a9df03aa0acb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ba715ed1aaf24d4f07c0d250a0a9df03aa0acb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ba715ed1aaf24d4f07c0d250a0a9df03aa0acb2"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "74ac46583780385365917e7f23d6e5caf0250913", "filename": "gcc/range-op-float.cc", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844190af178c210a6aff6b7eb4dd8c6a49210ff9/gcc%2Frange-op-float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844190af178c210a6aff6b7eb4dd8c6a49210ff9/gcc%2Frange-op-float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op-float.cc?ref=844190af178c210a6aff6b7eb4dd8c6a49210ff9", "patch": "@@ -91,6 +91,27 @@ range_operator_float::fold_range (frange &r, tree type,\n   else\n     r.clear_nan ();\n \n+  // If the result has overflowed and flag_trapping_math, folding this\n+  // operation could elide an overflow or division by zero exception.\n+  // Avoid returning a singleton +-INF, to keep the propagators (DOM\n+  // and substitute_and_fold_engine) from folding.  See PR107608.\n+  if (flag_trapping_math\n+      && MODE_HAS_INFINITIES (TYPE_MODE (type))\n+      && r.known_isinf () && !op1.known_isinf () && !op2.known_isinf ())\n+    {\n+      REAL_VALUE_TYPE inf = r.lower_bound ();\n+      if (real_isneg (&inf))\n+\t{\n+\t  REAL_VALUE_TYPE min = real_min_representable (type);\n+\t  r.set (type, inf, min);\n+\t}\n+      else\n+\t{\n+\t  REAL_VALUE_TYPE max = real_max_representable (type);\n+\t  r.set (type, max, inf);\n+\t}\n+    }\n+\n   return true;\n }\n "}, {"sha": "f4ac73b499f32e5a01d860e74493b72633af2fcf", "filename": "gcc/value-range.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844190af178c210a6aff6b7eb4dd8c6a49210ff9/gcc%2Fvalue-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844190af178c210a6aff6b7eb4dd8c6a49210ff9/gcc%2Fvalue-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.h?ref=844190af178c210a6aff6b7eb4dd8c6a49210ff9", "patch": "@@ -1300,6 +1300,7 @@ inline bool\n frange::known_isinf () const\n {\n   return (m_kind == VR_RANGE\n+\t  && !maybe_isnan ()\n \t  && real_identical (&m_min, &m_max)\n \t  && real_isinf (&m_min));\n }"}]}