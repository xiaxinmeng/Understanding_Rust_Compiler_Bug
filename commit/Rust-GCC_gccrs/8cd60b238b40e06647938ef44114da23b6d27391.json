{"sha": "8cd60b238b40e06647938ef44114da23b6d27391", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNkNjBiMjM4YjQwZTA2NjQ3OTM4ZWY0NDExNGRhMjNiNmQyNzM5MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-09-18T12:59:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-09-18T12:59:32Z"}, "message": "dwarf2out.c (append_entry_to_tmpl_value_parm_die_table): Assert we're in early phase.\n\n2015-09-18  Richard Biener  <rguenther@suse.de>\n\n\t* dwarf2out.c (append_entry_to_tmpl_value_parm_die_table): Assert\n\twe're in early phase.\n\t(schedule_generic_params_dies_gen): Likewise.\n\t(gen_remaining_tmpl_value_param_die_attribute): Do only as much\n\twork as possible, retaining unhandled cases.\n\t(gen_scheduled_generic_parms_dies): Set early-dwarf flag and\n\tclear out generic_type_instances at the end.\n\t(dwarf2out_finish): Move call to gen_scheduled_generic_parms_dies...\n\t(dwarf2out_early_finish): ... here.  Do most of\n\tgen_remaining_tmpl_value_param_die_attribute here.\n\nFrom-SVN: r227905", "tree": {"sha": "e7aec9a4d922a55cf255d5eace50f1c9c7e161d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7aec9a4d922a55cf255d5eace50f1c9c7e161d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cd60b238b40e06647938ef44114da23b6d27391", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cd60b238b40e06647938ef44114da23b6d27391", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cd60b238b40e06647938ef44114da23b6d27391", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cd60b238b40e06647938ef44114da23b6d27391/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7215aaedd627b93bf09bb5af9acbe46cc87d7c14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7215aaedd627b93bf09bb5af9acbe46cc87d7c14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7215aaedd627b93bf09bb5af9acbe46cc87d7c14"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "36dcd5eb0ccd71064533b09b5e93a25ecfd8fc89", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd60b238b40e06647938ef44114da23b6d27391/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd60b238b40e06647938ef44114da23b6d27391/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8cd60b238b40e06647938ef44114da23b6d27391", "patch": "@@ -1,3 +1,16 @@\n+2015-09-18  Richard Biener  <rguenther@suse.de>\n+\n+\t* dwarf2out.c (append_entry_to_tmpl_value_parm_die_table): Assert\n+\twe're in early phase.\n+\t(schedule_generic_params_dies_gen): Likewise.\n+\t(gen_remaining_tmpl_value_param_die_attribute): Do only as much\n+\twork as possible, retaining unhandled cases.\n+\t(gen_scheduled_generic_parms_dies): Set early-dwarf flag and\n+\tclear out generic_type_instances at the end.\n+\t(dwarf2out_finish): Move call to gen_scheduled_generic_parms_dies...\n+\t(dwarf2out_early_finish): ... here.  Do most of\n+\tgen_remaining_tmpl_value_param_die_attribute here.\n+\n 2015-09-18  Alan Lawrence  <alan.lawrence@arm.com>\n \n \tPR tree-optimization/67283"}, {"sha": "2fd889a65341bdf0601197d0d151647232d75a5e", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd60b238b40e06647938ef44114da23b6d27391/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd60b238b40e06647938ef44114da23b6d27391/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=8cd60b238b40e06647938ef44114da23b6d27391", "patch": "@@ -22100,6 +22100,8 @@ append_entry_to_tmpl_value_parm_die_table (dw_die_ref die, tree arg)\n   if (!die || !arg)\n     return;\n \n+  gcc_assert (early_dwarf);\n+\n   if (!tmpl_value_parm_die_table)\n     vec_alloc (tmpl_value_parm_die_table, 32);\n \n@@ -22129,6 +22131,8 @@ schedule_generic_params_dies_gen (tree t)\n   if (!generic_type_p (t))\n     return;\n \n+  gcc_assert (early_dwarf);\n+\n   if (!generic_type_instances)\n     vec_alloc (generic_type_instances, 256);\n \n@@ -22144,11 +22148,21 @@ gen_remaining_tmpl_value_param_die_attribute (void)\n {\n   if (tmpl_value_parm_die_table)\n     {\n-      unsigned i;\n+      unsigned i, j;\n       die_arg_entry *e;\n \n+      /* We do this in two phases - first get the cases we can\n+\t handle during early-finish, preserving those we cannot\n+\t (containing symbolic constants where we don't yet know\n+\t whether we are going to output the referenced symbols).\n+\t For those we try again at late-finish.  */\n+      j = 0;\n       FOR_EACH_VEC_ELT (*tmpl_value_parm_die_table, i, e)\n-\ttree_add_const_value_attribute (e->die, e->arg);\n+\t{\n+\t  if (!tree_add_const_value_attribute (e->die, e->arg))\n+\t    (*tmpl_value_parm_die_table)[j++] = *e;\n+\t}\n+      tmpl_value_parm_die_table->truncate (j);\n     }\n }\n \n@@ -22166,9 +22180,15 @@ gen_scheduled_generic_parms_dies (void)\n   if (!generic_type_instances)\n     return;\n   \n+  /* We end up \"recursing\" into schedule_generic_params_dies_gen, so\n+     pretend this generation is part of \"early dwarf\" as well.  */\n+  set_early_dwarf s;\n+\n   FOR_EACH_VEC_ELT (*generic_type_instances, i, t)\n     if (COMPLETE_TYPE_P (t))\n       gen_generic_params_dies (t);\n+\n+  generic_type_instances = NULL;\n }\n \n \n@@ -25202,7 +25222,6 @@ dwarf2out_finish (const char *filename)\n   producer->dw_attr_val.v.val_str->refcount--;\n   producer->dw_attr_val.v.val_str = find_AT_string (producer_string);\n \n-  gen_scheduled_generic_parms_dies ();\n   gen_remaining_tmpl_value_param_die_attribute ();\n \n   /* Add the name for the main input file now.  We delayed this from\n@@ -25559,6 +25578,9 @@ dwarf2out_early_finish (void)\n   /* The point here is to flush out the limbo list so that it is empty\n      and we don't need to stream it for LTO.  */\n   flush_limbo_die_list ();\n+\n+  gen_scheduled_generic_parms_dies ();\n+  gen_remaining_tmpl_value_param_die_attribute ();\n }\n \n /* Reset all state within dwarf2out.c so that we can rerun the compiler"}]}