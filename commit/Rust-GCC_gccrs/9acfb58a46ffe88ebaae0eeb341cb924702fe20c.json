{"sha": "9acfb58a46ffe88ebaae0eeb341cb924702fe20c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFjZmI1OGE0NmZmZTg4ZWJhYWUwZWViMzQxY2I5MjQ3MDJmZTIwYw==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2020-05-11T20:10:24Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2020-05-11T20:27:24Z"}, "message": "rs6000: Add cntlzdm and cnttzdm\n\nAdd support for new scalar instructions for counting leading or\ntrailing zeros under control of a bitmask.\n\n[gcc]\n\n2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* config/rs6000/rs6000-builtin.def (__builtin_cntlzdm): New\n\tbuilt-in function definition.\n\t(__builtin_cnttzdm): Likewise.\n\t* config/rs6000/rs6000.md (UNSPEC_CNTLZDM): New constant.\n\t(UNSPEC_CNTTZDM): Likewise.\n\t(cntlzdm): New insn.\n\t(cnttzdm): Likewise.\n\t* doc/extend.texi (Basic PowerPC Built-in Functions available for\n\ta Future Architecture): Add descriptions of __builtin_cntlzdm and\n\t__builtin_cnttzdm functions.\n\n[gcc/testsuite]\n\n2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* gcc.target/powerpc/cntlzdm-0.c: New test.\n\t* gcc.target/powerpc/cntlzdm-1.c: New test.\n\t* gcc.target/powerpc/cnttzdm-0.c: New test.\n\t* gcc.target/powerpc/cnttzdm-1.c: New test.", "tree": {"sha": "5956b34f8ef95abdab04d443874ea8fac25ddb43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5956b34f8ef95abdab04d443874ea8fac25ddb43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9acfb58a46ffe88ebaae0eeb341cb924702fe20c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9acfb58a46ffe88ebaae0eeb341cb924702fe20c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9acfb58a46ffe88ebaae0eeb341cb924702fe20c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9acfb58a46ffe88ebaae0eeb341cb924702fe20c/comments", "author": null, "committer": null, "parents": [{"sha": "52c5933f5838adb7bf6035e648b770b4958d137f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c5933f5838adb7bf6035e648b770b4958d137f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52c5933f5838adb7bf6035e648b770b4958d137f"}], "stats": {"total": 275, "additions": 275, "deletions": 0}, "files": [{"sha": "4dea211e5abc3bb678b397ddbd27a76f70030dae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9acfb58a46ffe88ebaae0eeb341cb924702fe20c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9acfb58a46ffe88ebaae0eeb341cb924702fe20c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9acfb58a46ffe88ebaae0eeb341cb924702fe20c", "patch": "@@ -3,6 +3,19 @@\n \tPR target/95046\n \t* config/i386/mmx.md (sqrtv2sf2): New insn pattern.\n \n+2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000-builtin.def (__builtin_cntlzdm): New\n+\tbuilt-in function definition.\n+\t(__builtin_cnttzdm): Likewise.\n+\t* config/rs6000/rs6000.md (UNSPEC_CNTLZDM): New constant.\n+\t(UNSPEC_CNTTZDM): Likewise.\n+\t(cntlzdm): New insn.\n+\t(cnttzdm): Likewise.\n+\t* doc/extend.texi (Basic PowerPC Built-in Functions available for\n+\ta Future Architecture): Add descriptions of __builtin_cntlzdm and\n+\t__builtin_cnttzdm functions.\n+\n 2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* config/rs6000/altivec.h (vec_cfuge): New #define."}, {"sha": "c05d9f53d547c5c3676bb6106d8efcaac4b6ad0e", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9acfb58a46ffe88ebaae0eeb341cb924702fe20c/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9acfb58a46ffe88ebaae0eeb341cb924702fe20c/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=9acfb58a46ffe88ebaae0eeb341cb924702fe20c", "patch": "@@ -2575,6 +2575,8 @@ BU_P9_OVERLOAD_2 (CMPEQB,\t\"byte_in_set\")\n \f\n /* Future architecture scalar built-ins.  */\n BU_FUTURE_MISC_2 (CFUGED, \"cfuged\", CONST, cfuged)\n+BU_FUTURE_MISC_2 (CNTLZDM, \"cntlzdm\", CONST, cntlzdm)\n+BU_FUTURE_MISC_2 (CNTTZDM, \"cnttzdm\", CONST, cnttzdm)\n \n /* Future architecture vector built-ins.  */\n BU_FUTURE_V_2 (VCFUGED, \"vcfuged\", CONST, vcfuged)"}, {"sha": "6c9bae934d110126074b02eba0cfd72e75918a5c", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9acfb58a46ffe88ebaae0eeb341cb924702fe20c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9acfb58a46ffe88ebaae0eeb341cb924702fe20c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=9acfb58a46ffe88ebaae0eeb341cb924702fe20c", "patch": "@@ -149,6 +149,8 @@\n    UNSPEC_PLTSEQ\n    UNSPEC_PLT16_HA\n    UNSPEC_CFUGED\n+   UNSPEC_CNTLZDM\n+   UNSPEC_CNTTZDM\n   ])\n \n ;;\n@@ -2463,6 +2465,24 @@\n    \"cfuged %0,%1,%2\"\n    [(set_attr \"type\" \"integer\")])\n \n+(define_insn \"cntlzdm\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+\t\t    (match_operand:DI 2 \"gpc_reg_operand\" \"r\")]\n+\t UNSPEC_CNTLZDM))]\n+   \"TARGET_FUTURE && TARGET_POWERPC64\"\n+   \"cntlzdm %0,%1,%2\"\n+   [(set_attr \"type\" \"integer\")])\n+\n+(define_insn \"cnttzdm\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+\t\t    (match_operand:DI 2 \"gpc_reg_operand\" \"r\")]\n+\t UNSPEC_CNTTZDM))]\n+   \"TARGET_FUTURE && TARGET_POWERPC64\"\n+   \"cnttzdm %0,%1,%2\"\n+   [(set_attr \"type\" \"integer\")])\n+\n (define_insn \"cmpb<mode>3\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n \t(unspec:GPR [(match_operand:GPR 1 \"gpc_reg_operand\" \"r\")"}, {"sha": "8c833d39feced794bb6b270348a0ca402930deba", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9acfb58a46ffe88ebaae0eeb341cb924702fe20c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9acfb58a46ffe88ebaae0eeb341cb924702fe20c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=9acfb58a46ffe88ebaae0eeb341cb924702fe20c", "patch": "@@ -17556,6 +17556,22 @@ Perform a 64-bit centrifuge operation, as if implemented by the Future\n @code{cfuged} instruction.\n @findex __builtin_cfuged\n \n+@smallexample\n+@exdent unsigned long long int\n+@exdent __builtin_cntlzdm (unsigned long long int, unsigned long long int)\n+@end smallexample\n+Perform a 64-bit count leading zeros operation under mask, as if\n+implemented by the future @code{cntlzdm} instruction.\n+@findex __builtin_cntlzdm\n+\n+@smallexample\n+@exdent unsigned long long int\n+@exdent __builtin_cnttzdm (unsigned long long int, unsigned long long int)\n+@end smallexample\n+Perform a 64-bit count trailing zeros operation under mask, as if\n+implemented by the future @code{cnttzdm} instruction.\n+@findex __builtin_cnttzdm\n+\n @node PowerPC AltiVec/VSX Built-in Functions\n @subsection PowerPC AltiVec/VSX Built-in Functions\n "}, {"sha": "333b803f4446c132b90e5f1e8f0028696c26c5fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9acfb58a46ffe88ebaae0eeb341cb924702fe20c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9acfb58a46ffe88ebaae0eeb341cb924702fe20c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9acfb58a46ffe88ebaae0eeb341cb924702fe20c", "patch": "@@ -8,6 +8,13 @@\n \tPR target/95046\n \t* gcc.target/i386/pr95046-1.c (test_sqrt): Add.\n \n+2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/cntlzdm-0.c: New test.\n+\t* gcc.target/powerpc/cntlzdm-1.c: New test.\n+\t* gcc.target/powerpc/cnttzdm-0.c: New test.\n+\t* gcc.target/powerpc/cnttzdm-1.c: New test.\n+\n 2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* gcc.target/powerpc/vec-cfuged-0.c: New test."}, {"sha": "8cdd261c0a73ce4785af94e34752abaa85c6988a", "filename": "gcc/testsuite/gcc.target/powerpc/cntlzdm-0.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9acfb58a46ffe88ebaae0eeb341cb924702fe20c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcntlzdm-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9acfb58a46ffe88ebaae0eeb341cb924702fe20c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcntlzdm-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcntlzdm-0.c?ref=9acfb58a46ffe88ebaae0eeb341cb924702fe20c", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-require-effective-target powerpc64 } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+extern void abort (void);\n+\n+unsigned long long int\n+do_cntlzdm (unsigned long long int source, unsigned long long int mask)\n+{\n+  return __builtin_cntlzdm (source, mask);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  unsigned long long int sources [4], masks [4];\n+  unsigned long long int intermediates [4][4] = {\n+    /* sources[0] with each of masks [0 .. 3] */\n+    { 0x0000a5f0ll, 0x00007e3cll, 0x000050ecll, 0x0000af73ll },\n+    /* sources[1] with each of masks [0 .. 3] */\n+    { 0x00007e3cll, 0x0000a5f0ll, 0x0000ec50ll, 0x000073afll },\n+    /* sources[2] with each of masks [0 .. 3] */\n+    { 0x00003ca5ll, 0x0000f07ell, 0x0000c50ell, 0x00003af7ll },\n+    /* sources[3] with each of masks [0 .. 3] */\n+    { 0x00005a0fll, 0x0000e7c3ll, 0x0000af73ll, 0x000050ecll },\n+  };\n+  unsigned long long int results [4][4] = {\n+    { 0, 1, 1, 0 },\n+    { 1, 0, 0, 1 },\n+    { 2, 0, 0, 2 },\n+    { 1, 0, 0, 1 },\n+  };\n+\n+  sources[0] = 0xa5f07e3cll;\n+  sources[1] = 0x7e3ca5f0ll;\n+  sources[2] = 0x3ca5f07ell;\n+  sources[3] = 0x5a0fe7c3ll;\n+\n+  masks[0] = 0xffff0000ll;\n+  masks[1] = 0x0000ffffll;\n+  masks[2] = 0x0f0f0f0fll;\n+  masks[3] = 0xf0f0f0f0ll;\n+\n+  unsigned long long int result;\n+\n+  for (int i = 0; i < 4; i++)\n+    {\n+      for (int j = 0; j < 4; j++)\n+\t{\n+\t  if (do_cntlzdm (sources[i], masks[j]) != results [i][j])\n+\t    abort ();\n+\t}\n+    }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mcntlzdm\\M} } } */"}, {"sha": "d5a087f911978c01a44b07f06ef682c734364b51", "filename": "gcc/testsuite/gcc.target/powerpc/cntlzdm-1.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9acfb58a46ffe88ebaae0eeb341cb924702fe20c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcntlzdm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9acfb58a46ffe88ebaae0eeb341cb924702fe20c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcntlzdm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcntlzdm-1.c?ref=9acfb58a46ffe88ebaae0eeb341cb924702fe20c", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-require-effective-target powerpc64 } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+extern void abort (void);\n+\n+unsigned long long int\n+do_cntlzdm (unsigned long long int source, unsigned long long int mask)\n+{\n+  return __builtin_cntlzdm (source, mask);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  unsigned long long int sources [4], masks [4];\n+  unsigned long long int intermediates [4][4] = {\n+    /* sources[0] with each of masks [0 .. 3] */\n+    { 0x0000a5f0ll, 0x00007e3cll, 0x000050ecll, 0x0000af73ll },\n+    /* sources[1] with each of masks [0 .. 3] */\n+    { 0x00007e3cll, 0x0000a5f0ll, 0x0000ec50ll, 0x000073afll },\n+    /* sources[2] with each of masks [0 .. 3] */\n+    { 0x00003ca5ll, 0x0000f07ell, 0x0000c50ell, 0x00003af7ll },\n+    /* sources[3] with each of masks [0 .. 3] */\n+    { 0x00005a0fll, 0x0000e7c3ll, 0x0000af73ll, 0x000050ecll },\n+  };\n+  unsigned long long int results [4][4] = {\n+    { 0, 1, 1, 0 },\n+    { 1, 0, 0, 1 },\n+    { 2, 0, 0, 2 },\n+    { 1, 0, 0, 1 },\n+  };\n+\n+  sources[0] = 0xa5f07e3cll;\n+  sources[1] = 0x7e3ca5f0ll;\n+  sources[2] = 0x3ca5f07ell;\n+  sources[3] = 0x5a0fe7c3ll;\n+\n+  masks[0] = 0xffff0000ll;\n+  masks[1] = 0x0000ffffll;\n+  masks[2] = 0x0f0f0f0fll;\n+  masks[3] = 0xf0f0f0f0ll;\n+\n+  unsigned long long int result;\n+\n+  for (int i = 0; i < 4; i++)\n+    {\n+      for (int j = 0; j < 4; j++)\n+\t{\n+\t  if (do_cntlzdm (sources[i], masks[j]) != results [i][j])\n+\t    abort ();\n+\t}\n+    }\n+\n+  return 0;\n+}"}, {"sha": "36acc0bf13858d2557fe615cc4796aebe26465c3", "filename": "gcc/testsuite/gcc.target/powerpc/cnttzdm-0.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9acfb58a46ffe88ebaae0eeb341cb924702fe20c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcnttzdm-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9acfb58a46ffe88ebaae0eeb341cb924702fe20c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcnttzdm-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcnttzdm-0.c?ref=9acfb58a46ffe88ebaae0eeb341cb924702fe20c", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+extern void abort (void);\n+\n+unsigned long long int\n+do_cnttzdm (unsigned long long int source, unsigned long long int mask) {\n+  return __builtin_cnttzdm (source, mask);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  unsigned long long int sources [4], masks [4];\n+  unsigned long long int intermediates [4][4] = {\n+    /* sources[0] with each of masks [0 .. 3] */\n+    { 0x0000a5f0ll, 0x00007e3cll, 0x000050ecll, 0x0000af73ll },\n+    /* sources[1] with each of masks [0 .. 3] */\n+    { 0x00007e3cll, 0x0000a5f0ll, 0x0000ec50ll, 0x000073afll },\n+    /* sources[2] with each of masks [0 .. 3] */\n+    { 0x00003ca5ll, 0x0000f07ell, 0x0000c50ell, 0x00003af7ll },\n+    /* sources[3] with each of masks [0 .. 3] */\n+    { 0x00005a0fll, 0x0000e7c3ll, 0x0000af73ll, 0x000050ecll },\n+  };\n+  unsigned long long int results [4][4] = {\n+    { 4, 2, 2, 0 },\n+    { 2, 4, 4, 0 },\n+    { 0, 1, 1, 0 },\n+    { 0, 0, 0, 2 },\n+  };\n+\n+  sources[0] = 0xa5f07e3cll;\n+  sources[1] = 0x7e3ca5f0ll;\n+  sources[2] = 0x3ca5f07ell;\n+  sources[3] = 0x5a0fe7c3ll;\n+\n+  masks[0] = 0xffff0000ll;\n+  masks[1] = 0x0000ffffll;\n+  masks[2] = 0x0f0f0f0fll;\n+  masks[3] = 0xf0f0f0f0ll;\n+\n+  for (int i = 0; i < 4; i++)\n+    {\n+      for (int j = 0; j < 4; j++)\n+\t{\n+\t  if (do_cnttzdm (sources[i], masks[j]) != results [i][j])\n+\t    abort ();\n+\t}\n+    }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mcnttzdm\\M} } } */"}, {"sha": "cb1197616593c3c6e4a6c970b9c93761c3d1c7a6", "filename": "gcc/testsuite/gcc.target/powerpc/cnttzdm-1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9acfb58a46ffe88ebaae0eeb341cb924702fe20c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcnttzdm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9acfb58a46ffe88ebaae0eeb341cb924702fe20c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcnttzdm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcnttzdm-1.c?ref=9acfb58a46ffe88ebaae0eeb341cb924702fe20c", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-require-effective-target powerpc64 } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+extern void abort (void);\n+\n+unsigned long long int\n+do_cnttzdm (unsigned long long int source, unsigned long long int mask) {\n+  return __builtin_cnttzdm (source, mask);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  unsigned long long int sources [4], masks [4];\n+  unsigned long long int intermediates [4][4] = {\n+    /* sources[0] with each of masks [0 .. 3] */\n+    { 0x0000a5f0ll, 0x00007e3cll, 0x000050ecll, 0x0000af73ll },\n+    /* sources[1] with each of masks [0 .. 3] */\n+    { 0x00007e3cll, 0x0000a5f0ll, 0x0000ec50ll, 0x000073afll },\n+    /* sources[2] with each of masks [0 .. 3] */\n+    { 0x00003ca5ll, 0x0000f07ell, 0x0000c50ell, 0x00003af7ll },\n+    /* sources[3] with each of masks [0 .. 3] */\n+    { 0x00005a0fll, 0x0000e7c3ll, 0x0000af73ll, 0x000050ecll },\n+  };\n+  unsigned long long int results [4][4] = {\n+    { 4, 2, 2, 0 },\n+    { 2, 4, 4, 0 },\n+    { 0, 1, 1, 0 },\n+    { 0, 0, 0, 2 },\n+  };\n+\n+  sources[0] = 0xa5f07e3cll;\n+  sources[1] = 0x7e3ca5f0ll;\n+  sources[2] = 0x3ca5f07ell;\n+  sources[3] = 0x5a0fe7c3ll;\n+\n+  masks[0] = 0xffff0000ll;\n+  masks[1] = 0x0000ffffll;\n+  masks[2] = 0x0f0f0f0fll;\n+  masks[3] = 0xf0f0f0f0ll;\n+\n+  for (int i = 0; i < 4; i++)\n+    {\n+      for (int j = 0; j < 4; j++)\n+\t{\n+\t  if (do_cnttzdm (sources[i], masks[j]) != results [i][j])\n+\t    abort ();\n+\t}\n+    }\n+\n+  return 0;\n+}"}]}