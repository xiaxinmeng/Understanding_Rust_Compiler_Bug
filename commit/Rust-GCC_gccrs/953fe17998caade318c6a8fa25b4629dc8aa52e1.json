{"sha": "953fe17998caade318c6a8fa25b4629dc8aa52e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTUzZmUxNzk5OGNhYWRlMzE4YzZhOGZhMjViNDYyOWRjOGFhNTJlMQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-03-02T21:09:17Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-03-02T21:09:17Z"}, "message": "(SETUP_FRAME_ADDRESS, DYNAMIC_CHAIN_ADDRESS,\n\nRETURN_ADDR_IN_PREVIOUS_FRAME, RETURN_ADDR_RTX): Define.\n\nFrom-SVN: r3608", "tree": {"sha": "22cc5852dc5f1ebb66901f03be875133c108eb2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22cc5852dc5f1ebb66901f03be875133c108eb2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/953fe17998caade318c6a8fa25b4629dc8aa52e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/953fe17998caade318c6a8fa25b4629dc8aa52e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/953fe17998caade318c6a8fa25b4629dc8aa52e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/953fe17998caade318c6a8fa25b4629dc8aa52e1/comments", "author": null, "committer": null, "parents": [{"sha": "4893584c6cca1f77531b40bca12b0a5c46281e95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4893584c6cca1f77531b40bca12b0a5c46281e95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4893584c6cca1f77531b40bca12b0a5c46281e95"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "c2a4816818a9d508fb2441fa74fe2f8b2c027667", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953fe17998caade318c6a8fa25b4629dc8aa52e1/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953fe17998caade318c6a8fa25b4629dc8aa52e1/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=953fe17998caade318c6a8fa25b4629dc8aa52e1", "patch": "@@ -1048,6 +1048,33 @@ extern union tree_node *current_function_decl;\n    ARGLIST is the argument list; see expr.c.  */\n extern struct rtx_def *sparc_builtin_saveregs ();\n #define EXPAND_BUILTIN_SAVEREGS(ARGLIST) sparc_builtin_saveregs (ARGLIST)\n+\n+/* Generate RTL to flush the register windows so as to make arbitrary frames\n+   available.  */\n+#define SETUP_FRAME_ADDRESSES()\t\t\\\n+  emit_insn (gen_flush_register_windows ())\n+\n+/* Given an rtx for the address of a frame,\n+   return an rtx for the address of the word in the frame\n+   that holds the dynamic chain--the previous frame's address.  */\n+#define DYNAMIC_CHAIN_ADDRESS(frame) \\\n+  gen_rtx (PLUS, Pmode, frame, gen_rtx (CONST_INT, VOIDmode, 56))\n+\n+/* The return address isn't on the stack, it is in a register, so we can't\n+   access it from the current frame pointer.  We can access it from the\n+   previous frame pointer though by reading a value from the register window\n+   save area.  */\n+#define RETURN_ADDR_IN_PREVIOUS_FRAME\n+\n+/* The current return address is in %i7.  The return address of anything\n+   farther back is in the register window save area at [%fp+60].  */\n+/* ??? This ignores the fact that the actual return address is +8 for normal\n+   returns, and +12 for structure returns.  */\n+#define RETURN_ADDR_RTX(count, frame)\t\t\\\n+  ((count == -1)\t\t\t\t\\\n+   ? gen_rtx (REG, Pmode, 31)\t\t\t\\\n+   : copy_to_reg (gen_rtx (MEM, Pmode,\t\t\\\n+\t\t\t   memory_address (Pmode, plus_constant (frame, 60)))))\n \f\n /* Addressing modes, and classification of registers for them.  */\n "}]}