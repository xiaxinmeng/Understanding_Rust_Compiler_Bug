{"sha": "703837b2cc8ac03c53ac7cc0fb1327055acaebd2", "node_id": "C_kwDOANBUbNoAKDcwMzgzN2IyY2M4YWMwM2M1M2FjN2NjMGZiMTMyNzA1NWFjYWViZDI", "commit": {"author": {"name": "Tom Honermann", "email": "tom@honermann.net", "date": "2022-08-02T18:36:01Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-08-08T19:50:38Z"}, "message": "C: Implement C2X N2653 char8_t and UTF-8 string literal changes\n\nThis patch implements the core language and compiler dependent library\nchanges adopted for C2X via WG14 N2653.  The changes include:\n- Change of type for UTF-8 string literals from array of const char to\n  array of const char8_t (unsigned char).\n- A new atomic_char8_t typedef.\n- A new ATOMIC_CHAR8_T_LOCK_FREE macro defined in terms of the existing\n  __GCC_ATOMIC_CHAR8_T_LOCK_FREE predefined macro.\n\ngcc/ChangeLog:\n\n\t* ginclude/stdatomic.h (atomic_char8_t,\n\tATOMIC_CHAR8_T_LOCK_FREE): New typedef and macro.\n\ngcc/c/ChangeLog:\n\n\t* c-parser.cc (c_parser_string_literal): Use char8_t as the type\n\tof CPP_UTF8STRING when char8_t support is enabled.\n\t* c-typeck.cc (digest_init): Allow initialization of an array\n\tof character type by a string literal with type array of\n\tchar8_t.\n\ngcc/c-family/ChangeLog:\n\n\t* c-lex.cc (lex_string, lex_charconst): Use char8_t as the type\n\tof CPP_UTF8CHAR and CPP_UTF8STRING when char8_t support is\n\tenabled.\n\t* c-opts.cc (c_common_post_options): Set flag_char8_t if\n\ttargeting C2x.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/atomic/c2x-stdatomic-lockfree-char8_t.c: New test.\n\t* gcc.dg/atomic/gnu2x-stdatomic-lockfree-char8_t.c: New test.\n\t* gcc.dg/c11-utf8str-type.c: New test.\n\t* gcc.dg/c17-utf8str-type.c: New test.\n\t* gcc.dg/c2x-utf8str-type.c: New test.\n\t* gcc.dg/c2x-utf8str.c: New test.\n\t* gcc.dg/gnu2x-utf8str-type.c: New test.\n\t* gcc.dg/gnu2x-utf8str.c: New test.", "tree": {"sha": "53dd67266a73a6e737de43ad4d4b88c400adfb3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53dd67266a73a6e737de43ad4d4b88c400adfb3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/703837b2cc8ac03c53ac7cc0fb1327055acaebd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/703837b2cc8ac03c53ac7cc0fb1327055acaebd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/703837b2cc8ac03c53ac7cc0fb1327055acaebd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/703837b2cc8ac03c53ac7cc0fb1327055acaebd2/comments", "author": {"login": "tahonermann", "id": 2211804, "node_id": "MDQ6VXNlcjIyMTE4MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2211804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tahonermann", "html_url": "https://github.com/tahonermann", "followers_url": "https://api.github.com/users/tahonermann/followers", "following_url": "https://api.github.com/users/tahonermann/following{/other_user}", "gists_url": "https://api.github.com/users/tahonermann/gists{/gist_id}", "starred_url": "https://api.github.com/users/tahonermann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tahonermann/subscriptions", "organizations_url": "https://api.github.com/users/tahonermann/orgs", "repos_url": "https://api.github.com/users/tahonermann/repos", "events_url": "https://api.github.com/users/tahonermann/events{/privacy}", "received_events_url": "https://api.github.com/users/tahonermann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b0253b019943abf2cc5f4db0b7ed67caedffe4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b0253b019943abf2cc5f4db0b7ed67caedffe4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b0253b019943abf2cc5f4db0b7ed67caedffe4a"}], "stats": {"total": 179, "additions": 170, "deletions": 9}, "files": [{"sha": "0b6f94e18a82d10b0cd2a5aff3cb8c1741e18838", "filename": "gcc/c-family/c-lex.cc", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703837b2cc8ac03c53ac7cc0fb1327055acaebd2/gcc%2Fc-family%2Fc-lex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703837b2cc8ac03c53ac7cc0fb1327055acaebd2/gcc%2Fc-family%2Fc-lex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.cc?ref=703837b2cc8ac03c53ac7cc0fb1327055acaebd2", "patch": "@@ -1352,7 +1352,14 @@ lex_string (const cpp_token *tok, tree *valp, bool objc_string, bool translate)\n \tdefault:\n \tcase CPP_STRING:\n \tcase CPP_UTF8STRING:\n-\t  value = build_string (1, \"\");\n+\t  if (type == CPP_UTF8STRING && flag_char8_t)\n+\t    {\n+\t      value = build_string (TYPE_PRECISION (char8_type_node)\n+\t\t\t\t    / TYPE_PRECISION (char_type_node),\n+\t\t\t\t    \"\");  /* char8_t is 8 bits */\n+\t    }\n+\t  else\n+\t    value = build_string (1, \"\");\n \t  break;\n \tcase CPP_STRING16:\n \t  value = build_string (TYPE_PRECISION (char16_type_node)\n@@ -1425,9 +1432,7 @@ lex_charconst (const cpp_token *token)\n     type = char16_type_node;\n   else if (token->type == CPP_UTF8CHAR)\n     {\n-      if (!c_dialect_cxx ())\n-\ttype = unsigned_char_type_node;\n-      else if (flag_char8_t)\n+      if (flag_char8_t)\n         type = char8_type_node;\n       else\n         type = char_type_node;"}, {"sha": "1cf119a9becf8453ffafa1498384d3ff658d9459", "filename": "gcc/c-family/c-opts.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703837b2cc8ac03c53ac7cc0fb1327055acaebd2/gcc%2Fc-family%2Fc-opts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703837b2cc8ac03c53ac7cc0fb1327055acaebd2/gcc%2Fc-family%2Fc-opts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.cc?ref=703837b2cc8ac03c53ac7cc0fb1327055acaebd2", "patch": "@@ -1059,9 +1059,9 @@ c_common_post_options (const char **pfilename)\n   if (flag_sized_deallocation == -1)\n     flag_sized_deallocation = (cxx_dialect >= cxx14);\n \n-  /* char8_t support is new in C++20.  */\n+  /* char8_t support is implicitly enabled in C++20 and C2X.  */\n   if (flag_char8_t == -1)\n-    flag_char8_t = (cxx_dialect >= cxx20);\n+    flag_char8_t = (cxx_dialect >= cxx20) || flag_isoc2x;\n \n   if (flag_extern_tls_init)\n     {"}, {"sha": "fa9395986deee5ff8edde8fd79e87952a041e644", "filename": "gcc/c/c-parser.cc", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703837b2cc8ac03c53ac7cc0fb1327055acaebd2/gcc%2Fc%2Fc-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703837b2cc8ac03c53ac7cc0fb1327055acaebd2/gcc%2Fc%2Fc-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.cc?ref=703837b2cc8ac03c53ac7cc0fb1327055acaebd2", "patch": "@@ -7447,7 +7447,14 @@ c_parser_string_literal (c_parser *parser, bool translate, bool wide_ok)\n \tdefault:\n \tcase CPP_STRING:\n \tcase CPP_UTF8STRING:\n-\t  value = build_string (1, \"\");\n+\t  if (type == CPP_UTF8STRING && flag_char8_t)\n+\t    {\n+\t      value = build_string (TYPE_PRECISION (char8_type_node)\n+\t\t\t\t    / TYPE_PRECISION (char_type_node),\n+\t\t\t\t    \"\");  /* char8_t is 8 bits */\n+\t    }\n+\t  else\n+\t    value = build_string (1, \"\");\n \t  break;\n \tcase CPP_STRING16:\n \t  value = build_string (TYPE_PRECISION (char16_type_node)\n@@ -7472,9 +7479,14 @@ c_parser_string_literal (c_parser *parser, bool translate, bool wide_ok)\n     {\n     default:\n     case CPP_STRING:\n-    case CPP_UTF8STRING:\n       TREE_TYPE (value) = char_array_type_node;\n       break;\n+    case CPP_UTF8STRING:\n+      if (flag_char8_t)\n+\tTREE_TYPE (value) = char8_array_type_node;\n+      else\n+\tTREE_TYPE (value) = char_array_type_node;\n+      break;\n     case CPP_STRING16:\n       TREE_TYPE (value) = char16_array_type_node;\n       break;"}, {"sha": "d37de2a313ba434f56600b935bec922bf397a083", "filename": "gcc/c/c-typeck.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703837b2cc8ac03c53ac7cc0fb1327055acaebd2/gcc%2Fc%2Fc-typeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703837b2cc8ac03c53ac7cc0fb1327055acaebd2/gcc%2Fc%2Fc-typeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.cc?ref=703837b2cc8ac03c53ac7cc0fb1327055acaebd2", "patch": "@@ -8056,7 +8056,7 @@ digest_init (location_t init_loc, tree type, tree init, tree origtype,\n \n \t  if (char_array)\n \t    {\n-\t      if (typ2 != char_type_node)\n+\t      if (typ2 != char_type_node && typ2 != char8_type_node)\n \t\tincompat_string_cst = true;\n \t    }\n \t  else if (!comptypes (typ1, typ2))"}, {"sha": "9f2475b739d1061c8bc27419bb9f611979992430", "filename": "gcc/ginclude/stdatomic.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703837b2cc8ac03c53ac7cc0fb1327055acaebd2/gcc%2Fginclude%2Fstdatomic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703837b2cc8ac03c53ac7cc0fb1327055acaebd2/gcc%2Fginclude%2Fstdatomic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstdatomic.h?ref=703837b2cc8ac03c53ac7cc0fb1327055acaebd2", "patch": "@@ -49,6 +49,9 @@ typedef _Atomic long atomic_long;\n typedef _Atomic unsigned long atomic_ulong;\n typedef _Atomic long long atomic_llong;\n typedef _Atomic unsigned long long atomic_ullong;\n+#ifdef __CHAR8_TYPE__\n+typedef _Atomic __CHAR8_TYPE__ atomic_char8_t;\n+#endif\n typedef _Atomic __CHAR16_TYPE__ atomic_char16_t;\n typedef _Atomic __CHAR32_TYPE__ atomic_char32_t;\n typedef _Atomic __WCHAR_TYPE__ atomic_wchar_t;\n@@ -97,6 +100,9 @@ extern void atomic_signal_fence (memory_order);\n \n #define ATOMIC_BOOL_LOCK_FREE\t\t__GCC_ATOMIC_BOOL_LOCK_FREE\n #define ATOMIC_CHAR_LOCK_FREE\t\t__GCC_ATOMIC_CHAR_LOCK_FREE\n+#ifdef __GCC_ATOMIC_CHAR8_T_LOCK_FREE\n+#define ATOMIC_CHAR8_T_LOCK_FREE\t__GCC_ATOMIC_CHAR8_T_LOCK_FREE\n+#endif\n #define ATOMIC_CHAR16_T_LOCK_FREE\t__GCC_ATOMIC_CHAR16_T_LOCK_FREE\n #define ATOMIC_CHAR32_T_LOCK_FREE\t__GCC_ATOMIC_CHAR32_T_LOCK_FREE\n #define ATOMIC_WCHAR_T_LOCK_FREE\t__GCC_ATOMIC_WCHAR_T_LOCK_FREE"}, {"sha": "1b692f55ed0fa47651ab833891245fe359ab94c0", "filename": "gcc/testsuite/gcc.dg/atomic/c2x-stdatomic-lockfree-char8_t.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703837b2cc8ac03c53ac7cc0fb1327055acaebd2/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fc2x-stdatomic-lockfree-char8_t.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703837b2cc8ac03c53ac7cc0fb1327055acaebd2/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fc2x-stdatomic-lockfree-char8_t.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fc2x-stdatomic-lockfree-char8_t.c?ref=703837b2cc8ac03c53ac7cc0fb1327055acaebd2", "patch": "@@ -0,0 +1,42 @@\n+/* Test atomic_is_lock_free for char8_t.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+#include <stdatomic.h>\n+#include <stdint.h>\n+\n+extern void abort (void);\n+\n+_Atomic __CHAR8_TYPE__ ac8a;\n+atomic_char8_t ac8t;\n+\n+#define CHECK_TYPE(MACRO, V1, V2)\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      int r1 = MACRO;\t\t\t\t\\\n+      int r2 = atomic_is_lock_free (&V1);\t\\\n+      int r3 = atomic_is_lock_free (&V2);\t\\\n+      if (r1 != 0 && r1 != 1 && r1 != 2)\t\\\n+\tabort ();\t\t\t\t\\\n+      if (r2 != 0 && r2 != 1)\t\t\t\\\n+\tabort ();\t\t\t\t\\\n+      if (r3 != 0 && r3 != 1)\t\t\t\\\n+\tabort ();\t\t\t\t\\\n+      if (r1 == 2 && r2 != 1)\t\t\t\\\n+\tabort ();\t\t\t\t\\\n+      if (r1 == 2 && r3 != 1)\t\t\t\\\n+\tabort ();\t\t\t\t\\\n+      if (r1 == 0 && r2 != 0)\t\t\t\\\n+\tabort ();\t\t\t\t\\\n+      if (r1 == 0 && r3 != 0)\t\t\t\\\n+\tabort ();\t\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+int\n+main ()\n+{\n+  CHECK_TYPE (ATOMIC_CHAR8_T_LOCK_FREE, ac8a, ac8t);\n+\n+  return 0;\n+}"}, {"sha": "27a3cfe355281309a6c056f6196e6a8d5150085f", "filename": "gcc/testsuite/gcc.dg/atomic/gnu2x-stdatomic-lockfree-char8_t.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703837b2cc8ac03c53ac7cc0fb1327055acaebd2/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fgnu2x-stdatomic-lockfree-char8_t.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703837b2cc8ac03c53ac7cc0fb1327055acaebd2/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fgnu2x-stdatomic-lockfree-char8_t.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fgnu2x-stdatomic-lockfree-char8_t.c?ref=703837b2cc8ac03c53ac7cc0fb1327055acaebd2", "patch": "@@ -0,0 +1,5 @@\n+/* Test atomic_is_lock_free for char8_t with -std=gnu2x.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu2x -pedantic-errors\" } */\n+\n+#include \"c2x-stdatomic-lockfree-char8_t.c\""}, {"sha": "8be9abb9686d496d0e5d0a2f27789175820abc79", "filename": "gcc/testsuite/gcc.dg/c11-utf8str-type.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703837b2cc8ac03c53ac7cc0fb1327055acaebd2/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-utf8str-type.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703837b2cc8ac03c53ac7cc0fb1327055acaebd2/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-utf8str-type.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-utf8str-type.c?ref=703837b2cc8ac03c53ac7cc0fb1327055acaebd2", "patch": "@@ -0,0 +1,6 @@\n+/* Test C11 UTF-8 string literal type.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11\" } */\n+\n+_Static_assert (_Generic (u8\"text\", char*: 1, default: 2) == 1, \"UTF-8 string literals have an unexpected type\");\n+_Static_assert (_Generic (u8\"x\"[0], char:  1, default: 2) == 1, \"UTF-8 string literal elements have an unexpected type\");"}, {"sha": "515c6db3970ea89dbc2b9848a2b9a0328d01e989", "filename": "gcc/testsuite/gcc.dg/c17-utf8str-type.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703837b2cc8ac03c53ac7cc0fb1327055acaebd2/gcc%2Ftestsuite%2Fgcc.dg%2Fc17-utf8str-type.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703837b2cc8ac03c53ac7cc0fb1327055acaebd2/gcc%2Ftestsuite%2Fgcc.dg%2Fc17-utf8str-type.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc17-utf8str-type.c?ref=703837b2cc8ac03c53ac7cc0fb1327055acaebd2", "patch": "@@ -0,0 +1,6 @@\n+/* Test C17 UTF-8 string literal type.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c17\" } */\n+\n+_Static_assert (_Generic (u8\"text\", char*: 1, default: 2) == 1, \"UTF-8 string literals have an unexpected type\");\n+_Static_assert (_Generic (u8\"x\"[0], char:  1, default: 2) == 1, \"UTF-8 string literal elements have an unexpected type\");"}, {"sha": "ebdde97b57a3c92e03e26e39eef90b172acd4b2b", "filename": "gcc/testsuite/gcc.dg/c2x-utf8str-type.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703837b2cc8ac03c53ac7cc0fb1327055acaebd2/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-utf8str-type.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703837b2cc8ac03c53ac7cc0fb1327055acaebd2/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-utf8str-type.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-utf8str-type.c?ref=703837b2cc8ac03c53ac7cc0fb1327055acaebd2", "patch": "@@ -0,0 +1,6 @@\n+/* Test C2X UTF-8 string literal type.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x\" } */\n+\n+_Static_assert (_Generic (u8\"text\", unsigned char*: 1, default: 2) == 1, \"UTF-8 string literals have an unexpected type\");\n+_Static_assert (_Generic (u8\"x\"[0], unsigned char:  1, default: 2) == 1, \"UTF-8 string literal elements have an unexpected type\");"}, {"sha": "2e4c392da9f7650c1261a4c7af0a5a930cab587b", "filename": "gcc/testsuite/gcc.dg/c2x-utf8str.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703837b2cc8ac03c53ac7cc0fb1327055acaebd2/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-utf8str.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703837b2cc8ac03c53ac7cc0fb1327055acaebd2/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-utf8str.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-utf8str.c?ref=703837b2cc8ac03c53ac7cc0fb1327055acaebd2", "patch": "@@ -0,0 +1,34 @@\n+/* Test initialization by UTF-8 string literal in C2X.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target wchar } */\n+/* { dg-options \"-std=c2x\" } */\n+\n+typedef __CHAR8_TYPE__  char8_t;\n+typedef __CHAR16_TYPE__ char16_t;\n+typedef __CHAR32_TYPE__ char32_t;\n+typedef __WCHAR_TYPE__  wchar_t;\n+\n+/* Test that char, signed char, unsigned char, and char8_t arrays can be\n+   initialized by a UTF-8 string literal.  */\n+const char cbuf1[] = u8\"text\";\n+const char cbuf2[] = { u8\"text\" };\n+const signed char scbuf1[] = u8\"text\";\n+const signed char scbuf2[] = { u8\"text\" };\n+const unsigned char ucbuf1[] = u8\"text\";\n+const unsigned char ucbuf2[] = { u8\"text\" };\n+const char8_t c8buf1[] = u8\"text\";\n+const char8_t c8buf2[] = { u8\"text\" };\n+\n+/* Test that a diagnostic is issued for attempted initialization of\n+   other character types by a UTF-8 string literal.  */\n+const char16_t c16buf1[] = u8\"text\";\t\t/* { dg-error \"from a string literal with type array of .unsigned char.\" } */\n+const char16_t c16buf2[] = { u8\"text\" };\t/* { dg-error \"from a string literal with type array of .unsigned char.\" } */\n+const char32_t c32buf1[] = u8\"text\";\t\t/* { dg-error \"from a string literal with type array of .unsigned char.\" } */\n+const char32_t c32buf2[] = { u8\"text\" };\t/* { dg-error \"from a string literal with type array of .unsigned char.\" } */\n+const wchar_t wbuf1[] = u8\"text\";\t\t/* { dg-error \"from a string literal with type array of .unsigned char.\" } */\n+const wchar_t wbuf2[] = { u8\"text\" };\t\t/* { dg-error \"from a string literal with type array of .unsigned char.\" } */\n+\n+/* Test that char8_t arrays can be initialized by an ordinary string\n+   literal.  */\n+const char8_t c8buf3[] = \"text\";\n+const char8_t c8buf4[] = { \"text\" };"}, {"sha": "efe16ffc28d50c1bd4f2158f61b24d7e4b68e5e2", "filename": "gcc/testsuite/gcc.dg/gnu2x-utf8str-type.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703837b2cc8ac03c53ac7cc0fb1327055acaebd2/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu2x-utf8str-type.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703837b2cc8ac03c53ac7cc0fb1327055acaebd2/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu2x-utf8str-type.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu2x-utf8str-type.c?ref=703837b2cc8ac03c53ac7cc0fb1327055acaebd2", "patch": "@@ -0,0 +1,5 @@\n+/* Test C2X UTF-8 string literal type with -std=gnu2x.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu2x\" } */\n+\n+#include \"c2x-utf8str-type.c\""}, {"sha": "f3719ea8c774c62806dba425187c928fddf3256b", "filename": "gcc/testsuite/gcc.dg/gnu2x-utf8str.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703837b2cc8ac03c53ac7cc0fb1327055acaebd2/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu2x-utf8str.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703837b2cc8ac03c53ac7cc0fb1327055acaebd2/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu2x-utf8str.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu2x-utf8str.c?ref=703837b2cc8ac03c53ac7cc0fb1327055acaebd2", "patch": "@@ -0,0 +1,34 @@\n+/* Test initialization by UTF-8 string literal in C2X with -std=gnu2x.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target wchar } */\n+/* { dg-options \"-std=gnu2x\" } */\n+\n+typedef __CHAR8_TYPE__  char8_t;\n+typedef __CHAR16_TYPE__ char16_t;\n+typedef __CHAR32_TYPE__ char32_t;\n+typedef __WCHAR_TYPE__  wchar_t;\n+\n+/* Test that char, signed char, unsigned char, and char8_t arrays can be\n+   initialized by a UTF-8 string literal.  */\n+const char cbuf1[] = u8\"text\";\n+const char cbuf2[] = { u8\"text\" };\n+const signed char scbuf1[] = u8\"text\";\n+const signed char scbuf2[] = { u8\"text\" };\n+const unsigned char ucbuf1[] = u8\"text\";\n+const unsigned char ucbuf2[] = { u8\"text\" };\n+const char8_t c8buf1[] = u8\"text\";\n+const char8_t c8buf2[] = { u8\"text\" };\n+\n+/* Test that a diagnostic is issued for attempted initialization of\n+   other character types by a UTF-8 string literal.  */\n+const char16_t c16buf1[] = u8\"text\";\t\t/* { dg-error \"from a string literal with type array of .unsigned char.\" } */\n+const char16_t c16buf2[] = { u8\"text\" };\t/* { dg-error \"from a string literal with type array of .unsigned char.\" } */\n+const char32_t c32buf1[] = u8\"text\";\t\t/* { dg-error \"from a string literal with type array of .unsigned char.\" } */\n+const char32_t c32buf2[] = { u8\"text\" };\t/* { dg-error \"from a string literal with type array of .unsigned char.\" } */\n+const wchar_t wbuf1[] = u8\"text\";\t\t/* { dg-error \"from a string literal with type array of .unsigned char.\" } */\n+const wchar_t wbuf2[] = { u8\"text\" };\t\t/* { dg-error \"from a string literal with type array of .unsigned char.\" } */\n+\n+/* Test that char8_t arrays can be initialized by an ordinary string\n+   literal.  */\n+const char8_t c8buf3[] = \"text\";\n+const char8_t c8buf4[] = { \"text\" };"}]}