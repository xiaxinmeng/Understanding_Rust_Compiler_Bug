{"sha": "b381036092ab446b8bf51c5f4f6ff7dd2eaf8608", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM4MTAzNjA5MmFiNDQ2YjhiZjUxYzVmNGY2ZmY3ZGQyZWFmODYwOA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2004-03-19T03:20:04Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2004-03-19T03:20:04Z"}, "message": "* convert.c (convert_to_real): Reformat using switch stmt.\n\nFrom-SVN: r79667", "tree": {"sha": "1789c618755f2ba2580988dfc66c1b24db0fd9d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1789c618755f2ba2580988dfc66c1b24db0fd9d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b381036092ab446b8bf51c5f4f6ff7dd2eaf8608", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b381036092ab446b8bf51c5f4f6ff7dd2eaf8608", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b381036092ab446b8bf51c5f4f6ff7dd2eaf8608", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b381036092ab446b8bf51c5f4f6ff7dd2eaf8608/comments", "author": null, "committer": null, "parents": [{"sha": "9d363a56a8ff6587f8d32ea380b55fea77ea5f13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d363a56a8ff6587f8d32ea380b55fea77ea5f13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d363a56a8ff6587f8d32ea380b55fea77ea5f13"}], "stats": {"total": 74, "additions": 41, "deletions": 33}, "files": [{"sha": "e24e339a0903780923441e412421ec5402c3158d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b381036092ab446b8bf51c5f4f6ff7dd2eaf8608/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b381036092ab446b8bf51c5f4f6ff7dd2eaf8608/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b381036092ab446b8bf51c5f4f6ff7dd2eaf8608", "patch": "@@ -1,3 +1,7 @@\n+2004-03-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* convert.c (convert_to_real): Reformat using switch stmt.\n+\n 2004-03-18  Mark Mitchell  <mark@codesourcery.com>\n \n \t* c-common.c (pointer_int_sum): Do not complain about using"}, {"sha": "7224277206bec84a17c1bfffbbbdcf9b8f3b7cc3", "filename": "gcc/convert.c", "status": "modified", "additions": 37, "deletions": 33, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b381036092ab446b8bf51c5f4f6ff7dd2eaf8608/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b381036092ab446b8bf51c5f4f6ff7dd2eaf8608/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=b381036092ab446b8bf51c5f4f6ff7dd2eaf8608", "patch": "@@ -131,44 +131,48 @@ convert_to_real (tree type, tree expr)\n      present in runtime.  */\n   /* Convert (float)sqrt((double)x) where x is float into sqrtf(x) */\n   if (optimize\n-      && (fcode == BUILT_IN_SQRT\n-\t  || fcode == BUILT_IN_SQRTL\n-\t  || fcode == BUILT_IN_SIN\n-\t  || fcode == BUILT_IN_SINL\n-\t  || fcode == BUILT_IN_COS\n-\t  || fcode == BUILT_IN_COSL\n-\t  || fcode == BUILT_IN_EXP\n-\t  || fcode == BUILT_IN_EXPL\n-\t  || fcode == BUILT_IN_LOG\n-\t  || fcode == BUILT_IN_LOGL)\n       && (TYPE_MODE (type) == TYPE_MODE (double_type_node)\n           || TYPE_MODE (type) == TYPE_MODE (float_type_node)))\n     {\n-      tree arg0 = strip_float_extensions (TREE_VALUE (TREE_OPERAND (expr, 1)));\n-      tree newtype = type;\n-\n-      /* We have (outertype)sqrt((innertype)x).  Choose the wider mode from\n-\t the both as the safe type for operation.  */\n-      if (TYPE_PRECISION (TREE_TYPE (arg0)) > TYPE_PRECISION (type))\n-\tnewtype = TREE_TYPE (arg0);\n-\n-      /* Be careful about integer to fp conversions.\n-\t These may overflow still.  */\n-      if (FLOAT_TYPE_P (TREE_TYPE (arg0))\n-\t  && TYPE_PRECISION (newtype) < TYPE_PRECISION (itype)\n-\t  && (TYPE_MODE (newtype) == TYPE_MODE (double_type_node)\n-\t      || TYPE_MODE (newtype) == TYPE_MODE (float_type_node)))\n-\t{\n-\t  tree arglist;\n-\t  tree fn = mathfn_built_in (newtype, fcode);\n-\n-\t  if (fn)\n+      switch (fcode)\n+        {\n+#define CASE_MATHFN(FN) case BUILT_IN_##FN: case BUILT_IN_##FN##L:\n+\t  CASE_MATHFN (SQRT)\n+\t  CASE_MATHFN (SIN)\n+\t  CASE_MATHFN (COS)\n+\t  CASE_MATHFN (EXP)\n+\t  CASE_MATHFN (LOG)\n+#undef CASE_MATHFN\n \t    {\n-\t      arglist = build_tree_list (NULL_TREE, fold (convert_to_real (newtype, arg0)));\n-\t      expr = build_function_call_expr (fn, arglist);\n-\t      if (newtype == type)\n-\t\treturn expr;\n+\t      tree arg0 = strip_float_extensions (TREE_VALUE (TREE_OPERAND (expr, 1)));\n+\t      tree newtype = type;\n+\n+\t      /* We have (outertype)sqrt((innertype)x).  Choose the wider mode from\n+\t\t the both as the safe type for operation.  */\n+\t      if (TYPE_PRECISION (TREE_TYPE (arg0)) > TYPE_PRECISION (type))\n+\t\tnewtype = TREE_TYPE (arg0);\n+\n+\t      /* Be careful about integer to fp conversions.\n+\t\t These may overflow still.  */\n+\t      if (FLOAT_TYPE_P (TREE_TYPE (arg0))\n+\t\t  && TYPE_PRECISION (newtype) < TYPE_PRECISION (itype)\n+\t\t  && (TYPE_MODE (newtype) == TYPE_MODE (double_type_node)\n+\t\t      || TYPE_MODE (newtype) == TYPE_MODE (float_type_node)))\n+\t        {\n+\t\t  tree arglist;\n+\t\t  tree fn = mathfn_built_in (newtype, fcode);\n+\n+\t\t  if (fn)\n+\t\t  {\n+\t\t    arglist = build_tree_list (NULL_TREE, fold (convert_to_real (newtype, arg0)));\n+\t\t    expr = build_function_call_expr (fn, arglist);\n+\t\t    if (newtype == type)\n+\t\t      return expr;\n+\t\t  }\n+\t\t}\n \t    }\n+\tdefault:\n+\t  break;\n \t}\n     }\n   if (optimize"}]}