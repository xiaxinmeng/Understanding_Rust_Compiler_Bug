{"sha": "7e8c2bd54af9629d2554698e6cc6ca084015d78a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U4YzJiZDU0YWY5NjI5ZDI1NTQ2OThlNmNjNmNhMDg0MDE1ZDc4YQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2014-11-04T17:13:25Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2014-11-04T17:13:25Z"}, "message": "[AArch64] fix unsafe access to deallocated stack\n\n2014-11-04  Jiong Wang  <jiong.wang@arm.com>\n2014-11-04  Wilco Dijkstra  <wilco.dijkstra@arm.com>\n\n  gcc/\n    PR target/63293\n    * config/aarch64/aarch64.c (aarch64_expand_epiloue): Add barriers before\n    stack adjustment.\n\nFrom-SVN: r217091", "tree": {"sha": "96617f592239ea197e9a7d844f09b6daf7f75c1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96617f592239ea197e9a7d844f09b6daf7f75c1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e8c2bd54af9629d2554698e6cc6ca084015d78a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e8c2bd54af9629d2554698e6cc6ca084015d78a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e8c2bd54af9629d2554698e6cc6ca084015d78a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e8c2bd54af9629d2554698e6cc6ca084015d78a/comments", "author": null, "committer": null, "parents": [{"sha": "2acb70965451b3859a0ef1232fd35501e217fd09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2acb70965451b3859a0ef1232fd35501e217fd09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2acb70965451b3859a0ef1232fd35501e217fd09"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "4f741cd4a3afa5a0ed5ae75a38b2c34236701487", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8c2bd54af9629d2554698e6cc6ca084015d78a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8c2bd54af9629d2554698e6cc6ca084015d78a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e8c2bd54af9629d2554698e6cc6ca084015d78a", "patch": "@@ -1,3 +1,10 @@\n+2014-11-04  Jiong Wang  <jiong.wang@arm.com>\n+2014-11-04  Wilco Dijkstra  <wilco.dijkstra@arm.com>\n+\n+\tPR target/63293\n+\t* config/aarch64/aarch64.c (aarch64_expand_epiloue): Add barriers before\n+\tstack adjustment.\n+\n 2014-11-04  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* combine.c (combine_simplify_rtx): In STORE_FLAG_VALUE == -1 case,"}, {"sha": "4a67e890eac3185eedccb81a8751fe40c5c1ceff", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8c2bd54af9629d2554698e6cc6ca084015d78a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8c2bd54af9629d2554698e6cc6ca084015d78a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=7e8c2bd54af9629d2554698e6cc6ca084015d78a", "patch": "@@ -2399,6 +2399,9 @@ aarch64_expand_epilogue (bool for_sibcall)\n   HOST_WIDE_INT fp_offset;\n   HOST_WIDE_INT hard_fp_offset;\n   rtx_insn *insn;\n+  /* We need to add memory barrier to prevent read from deallocated stack.  */\n+  bool need_barrier_p = (get_frame_size () != 0\n+\t\t\t || cfun->machine->frame.saved_varargs_size);\n \n   aarch64_layout_frame ();\n \n@@ -2433,6 +2436,9 @@ aarch64_expand_epilogue (bool for_sibcall)\n   if (frame_pointer_needed\n       && (crtl->outgoing_args_size || cfun->calls_alloca))\n     {\n+      if (cfun->calls_alloca)\n+\temit_insn (gen_stack_tie (stack_pointer_rtx, stack_pointer_rtx));\n+\n       insn = emit_insn (gen_add3_insn (stack_pointer_rtx,\n \t\t\t\t       hard_frame_pointer_rtx,\n \t\t\t\t       GEN_INT (0)));\n@@ -2459,6 +2465,9 @@ aarch64_expand_epilogue (bool for_sibcall)\n       aarch64_restore_callee_saves (DFmode, fp_offset, V0_REGNUM, V31_REGNUM,\n \t\t\t\t    skip_wb, &cfi_ops);\n \n+      if (need_barrier_p)\n+\temit_insn (gen_stack_tie (stack_pointer_rtx, stack_pointer_rtx));\n+\n       if (skip_wb)\n \t{\n \t  machine_mode mode1 = (reg1 <= R30_REGNUM) ? DImode : DFmode;\n@@ -2499,6 +2508,9 @@ aarch64_expand_epilogue (bool for_sibcall)\n \n   if (frame_size > 0)\n     {\n+      if (need_barrier_p)\n+\temit_insn (gen_stack_tie (stack_pointer_rtx, stack_pointer_rtx));\n+\n       if (frame_size >= 0x1000000)\n \t{\n \t  rtx op0 = gen_rtx_REG (Pmode, IP0_REGNUM);"}]}