{"sha": "ab332cd78d083edb2fddaa3c02578cafade12725", "node_id": "C_kwDOANBUbNoAKGFiMzMyY2Q3OGQwODNlZGIyZmRkYWEzYzAyNTc4Y2FmYWRlMTI3MjU", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-12T00:17:24Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-12T00:17:24Z"}, "message": "Daily bump.", "tree": {"sha": "9b1ecae44a8f833532216679f5eccc327df6791f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b1ecae44a8f833532216679f5eccc327df6791f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab332cd78d083edb2fddaa3c02578cafade12725", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab332cd78d083edb2fddaa3c02578cafade12725", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab332cd78d083edb2fddaa3c02578cafade12725", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab332cd78d083edb2fddaa3c02578cafade12725/comments", "author": null, "committer": null, "parents": [{"sha": "2c328e58c5d7cca10dd404ad8f81ec7664db1fbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c328e58c5d7cca10dd404ad8f81ec7664db1fbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c328e58c5d7cca10dd404ad8f81ec7664db1fbf"}], "stats": {"total": 513, "additions": 512, "deletions": 1}, "files": [{"sha": "d62bb67c36ebc6db13e14a3832738caef7cb682c", "filename": "ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab332cd78d083edb2fddaa3c02578cafade12725/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab332cd78d083edb2fddaa3c02578cafade12725/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=ab332cd78d083edb2fddaa3c02578cafade12725", "patch": "@@ -1,3 +1,9 @@\n+2022-10-11  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* libtool.m4 (*vxworks*): When enable_shared, set dynamic_linker\n+\tand friends for rtp !large. Assume the linker has the required\n+\tabilities and set lt_cv_deplibs_check_method.\n+\n 2022-09-30  Olivier Hainque  <hainque@adacore.com>\n \n \t* configure.ac (*vxworks*): If enable_shared is not"}, {"sha": "a44f661becff5a29061d4428511abe68f642bbee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 245, "deletions": 0, "changes": 245, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab332cd78d083edb2fddaa3c02578cafade12725/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab332cd78d083edb2fddaa3c02578cafade12725/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab332cd78d083edb2fddaa3c02578cafade12725", "patch": "@@ -1,3 +1,248 @@\n+2022-10-11  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-gori.cc (gori_compute::logical_combine): Avoid\n+\tcalling tracer.trailer().\n+\n+2022-10-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/107185\n+\t* config/i386/i386.md (*notxor<mode>_1): Use MASK_REG_P (x) instead of\n+\tMASK_REGNO_P (REGNO (x)).\n+\n+2022-10-11  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op-float.cc (class foperator_abs): New.\n+\t(floating_op_table::floating_op_table): Add ABS_EXPR entry.\n+\n+2022-10-11  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op-float.cc (foperator_unordered_le::op1_range): New.\n+\t(foperator_unordered_le::op2_range): New.\n+\t(foperator_unordered_gt::op1_range): New.\n+\t(foperator_unordered_gt::op2_range): New.\n+\t(foperator_unordered_ge::op1_range): New.\n+\t(foperator_unordered_ge::op2_range): New.\n+\t(foperator_unordered_equal::op1_range): New.\n+\n+2022-10-11  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op-float.cc (class foperator_unordered_lt): New.\n+\t(class foperator_relop_unknown): Remove\n+\t(class foperator_unordered_le): New.\n+\t(class foperator_unordered_gt): New.\n+\t(class foperator_unordered_ge): New.\n+\t(class foperator_unordered_equal): New.\n+\t(floating_op_table::floating_op_table): Replace all UN_EXPR\n+\tentries with their appropriate fop_unordered_* counterpart.\n+\n+2022-10-11  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op.cc (operator_equal::op1_range): Move BRS_TRUE case up.\n+\t(operator_lt::op2_range): Same.\n+\t(operator_le::op2_range): Same.\n+\t(operator_gt::op2_range): Same.\n+\t(operator_ge::op2_range): Same.\n+\n+2022-10-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107212\n+\t* tree-vect-loop.cc (vectorizable_reduction): Make sure to\n+\tset STMT_VINFO_REDUC_DEF for all live lanes in a SLP\n+\treduction.\n+\t(vectorizable_live_operation): Do not pun to the SLP\n+\tnode representative for reduction epilogue generation.\n+\n+2022-10-11  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-valu.md (neg<mode>2): New define_expand.\n+\n+2022-10-11  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-valu.md (vec_init<V_ALL:mode><V_ALL_ALT:mode>): New.\n+\t* config/gcn/gcn.cc (GEN_VN): Add andvNsi3, subvNsi3.\n+\t(GEN_VNM): Add gathervNm_expr.\n+\t(GEN_VN_NOEXEC): Add vec_seriesvNsi.\n+\t(gcn_expand_vector_init): Add initialization of vectors from smaller\n+\tvectors.\n+\n+2022-10-11  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-protos.h (get_exec): Add prototypes for two variants.\n+\t* config/gcn/gcn-valu.md\n+\t(vec_extract<V_ALL:mode><V_ALL_ALT:mode>): New define_expand.\n+\t* config/gcn/gcn.cc (get_exec): Export the existing function. Add a\n+\tnew overload variant.\n+\n+2022-10-11  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-valu.md\n+\t(<cvt_name><VCVT_MODE:mode><VCVT_FMODE:mode>2<exec>): Use MODE_VF.\n+\t(<cvt_name><VCVT_FMODE:mode><VCVT_IMODE:mode>2<exec>): Likewise.\n+\t* config/gcn/gcn.h (MODE_VF): New macro.\n+\n+2022-10-11  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-modes.def (VECTOR_MODE): Add new modes\n+\tV32QI, V32HI, V32SI, V32DI, V32TI, V32HF, V32SF, V32DF,\n+\tV16QI, V16HI, V16SI, V16DI, V16TI, V16HF, V16SF, V16DF,\n+\tV8QI, V8HI, V8SI, V8DI, V8TI, V8HF, V8SF, V8DF,\n+\tV4QI, V4HI, V4SI, V4DI, V4TI, V4HF, V4SF, V4DF,\n+\tV2QI, V2HI, V2SI, V2DI, V2TI, V2HF, V2SF, V2DF.\n+\t(ADJUST_ALIGNMENT): Likewise.\n+\t* config/gcn/gcn-protos.h (gcn_full_exec): Delete.\n+\t(gcn_full_exec_reg): Delete.\n+\t(gcn_scalar_exec): Delete.\n+\t(gcn_scalar_exec_reg): Delete.\n+\t(vgpr_1reg_mode_p): Use inner mode to identify vector registers.\n+\t(vgpr_2reg_mode_p): Likewise.\n+\t(vgpr_vector_mode_p): Use VECTOR_MODE_P.\n+\t* config/gcn/gcn-valu.md (V_QI, V_HI, V_HF, V_SI, V_SF, V_DI, V_DF,\n+\tV_QIHI, V_1REG, V_INT_1REG, V_INT_1REG_ALT, V_FP_1REG, V_2REG, V_noQI,\n+\tV_noHI, V_INT_noQI, V_INT_noHI, V_ALL, V_ALL_ALT, V_INT, V_FP):\n+\tAdd additional vector modes.\n+\t(V64_SI, V64_DI, V64_ALL, V64_FP): New iterators.\n+\t(scalar_mode, SCALAR_MODE, vnsi, VnSI, vndi, VnDI, sdwa):\n+\tAdd additional vector mode mappings.\n+\t(mov<mode>): Implement vector length conversions.\n+\t(ldexp<mode>3<exec>): Use VnSI.\n+\t(frexp<mode>_exp2<exec>): Likewise.\n+\t(VCVT_MODE, VCVT_FMODE, VCVT_IMODE): Add additional vector modes.\n+\t(reduc_<reduc_op>_scal_<mode>): Use V64_ALL.\n+\t(fold_left_plus_<mode>): Use V64_FP.\n+\t(*<reduc_op>_dpp_shr_<mode>): Use V64_1REG.\n+\t(*<reduc_op>_dpp_shr_<mode>): Use V64_DI.\n+\t(*plus_carry_dpp_shr_<mode>): Use V64_INT_1REG.\n+\t(*plus_carry_in_dpp_shr_<mode>): Use V64_SI.\n+\t(*plus_carry_dpp_shr_<mode>): Use V64_DI.\n+\t(mov_from_lane63_<mode>): Use V64_2REG.\n+\t* config/gcn/gcn.cc (VnMODE): New function.\n+\t(gcn_can_change_mode_class): Support multiple vector sizes.\n+\t(gcn_modes_tieable_p): Likewise.\n+\t(gcn_operand_part): Likewise.\n+\t(gcn_scalar_exec): Delete function.\n+\t(gcn_scalar_exec_reg): Delete function.\n+\t(gcn_full_exec): Delete function.\n+\t(gcn_full_exec_reg): Delete function.\n+\t(gcn_inline_fp_constant_p): Support multiple vector sizes.\n+\t(gcn_fp_constant_p): Likewise.\n+\t(A): New macro.\n+\t(GEN_VN_NOEXEC): New macro.\n+\t(GEN_VNM_NOEXEC): New macro.\n+\t(GEN_VN): New macro.\n+\t(GEN_VNM): New macro.\n+\t(GET_VN_FN): New macro.\n+\t(CODE_FOR): New macro.\n+\t(CODE_FOR_OP): New macro.\n+\t(gen_mov_with_exec): Delete function.\n+\t(gen_duplicate_load): Delete function.\n+\t(gcn_expand_vector_init): Support multiple vector sizes.\n+\t(strided_constant): Likewise.\n+\t(gcn_addr_space_legitimize_address): Likewise.\n+\t(gcn_expand_scalar_to_vector_address): Likewise.\n+\t(gcn_expand_scaled_offsets): Likewise.\n+\t(gcn_secondary_reload): Likewise.\n+\t(gcn_valid_cvt_p): Likewise.\n+\t(gcn_expand_builtin_1): Likewise.\n+\t(gcn_make_vec_perm_address): Likewise.\n+\t(gcn_vectorize_vec_perm_const): Likewise.\n+\t(gcn_vector_mode_supported_p): Likewise.\n+\t(gcn_autovectorize_vector_modes): New hook.\n+\t(gcn_related_vector_mode): Support multiple vector sizes.\n+\t(gcn_expand_dpp_shr_insn): Add FIXME comment.\n+\t(gcn_md_reorg): Support multiple vector sizes.\n+\t(print_reg): Likewise.\n+\t(print_operand): Likewise.\n+\t(TARGET_VECTORIZE_AUTOVECTORIZE_VECTOR_MODES): New hook.\n+\n+2022-10-11  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* tree-if-conv.cc (if_convertible_loop_p_1): Move ordering of loop bb's from\n+\there...\n+\t(tree_if_conversion): ... to here.  Also call bitfield lowering when\n+\tappropriate.\n+\t(version_loop_for_if_conversion): Adapt to enable loop versioning when we only\n+\tneed to lower bitfields.\n+\t(ifcvt_split_critical_edges): Relax condition of expected loop form as this is\n+\tchecked earlier.\n+\t(get_bitfield_rep): New function.\n+\t(lower_bitfield): Likewise.\n+\t(bitfields_to_lower_p): Likewise.\n+\t(need_to_lower_bitfields): New global boolean.\n+\t(need_to_ifcvt): Likewise.\n+\t* tree-vect-data-refs.cc (vect_find_stmt_data_reference): Improve diagnostic\n+\tmessage.\n+\t* tree-vect-patterns.cc (vect_recog_temp_ssa_var): Add default value for last\n+\tparameter.\n+\t(vect_recog_bitfield_ref_pattern): New.\n+\t(vect_recog_bit_insert_pattern): New.\n+\n+2022-10-11  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/107093\n+\t* config/i386/i386.md (*notxor<mode>_1): New post_reload\n+\tdefine_insn_and_split.\n+\t(*notxorqi_1): Ditto.\n+\n+2022-10-11  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/107195\n+\t* value-range.cc (irange::set_range_from_nonzero_bits): Set range\n+\tto [0,0] when nonzero mask is 0.\n+\n+2022-10-11  Olivier Hainque  <hainque@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* configure: Regenerate.\n+\n+2022-10-11  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config.gcc (*vxworks*): Add t-slibgcc fragment\n+\tif enable_shared.\n+\n+2022-10-11  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/vxworks.h (VX_LGCC_EH_SO0, VX_LGCC_EH_SO1): New\n+\tinternal macros.\n+\t(VXWORKS_LIBGCC_SPEC): Use them and document.\n+\n+2022-10-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* gimple-range-op.cc: Add override keyword.\n+\n+2022-10-11  Eugene Rozenfeld  <erozen@microsoft.com>\n+\n+\tPR debug/107193\n+\t* tree-cfg.cc (assign_discriminators): Move declaration of cur_locus_e\n+\tout of the loop.\n+\n+2022-10-11  Liwei Xu  <liwei.xu@intel.com>\n+\t    liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR tree-optimization/54346\n+\t* match.pd: Merge the index of VCST then generates the new vec_perm.\n+\n+2022-10-11  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\tPR rtl-optimization/107182\n+\t* cfgrtl.cc (fixup_reorder_chain): When optimizing a jump to a\n+\treturn, clear EDGE_CROSSING on the appropriate edge.\n+\n+2022-10-11  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vector-builtins.cc (struct vector_type_info): Move\n+\tfrom config/riscv/riscv-vector-builtins.h.\n+\t(DEF_RVV_TYPE): Change USER_NAME to NAME.\n+\t(register_vector_type): Change user_name to name.\n+\t* config/riscv/riscv-vector-builtins.def (DEF_RVV_TYPE): Change\n+\tUSER_NAME to NAME.\n+\t* config/riscv/riscv-vector-builtins.h (struct vector_type_info): Move\n+\tto riscv-vector-builtins.cc.\n+\t(DEF_RVV_TYPE): Change USER_NAME to NAME.\n+\n+2022-10-11  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv.md: Add vsetvl instruction type.\n+\n 2022-10-10  Nathan Sidwell  <nathan@acm.org>\n \n \t* common.opt (-fabi-version=): Document 18."}, {"sha": "6f50c16be9c3866d9298061f3b91a97e0666ac4d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab332cd78d083edb2fddaa3c02578cafade12725/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab332cd78d083edb2fddaa3c02578cafade12725/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=ab332cd78d083edb2fddaa3c02578cafade12725", "patch": "@@ -1 +1 @@\n-20221011\n+20221012"}, {"sha": "e13486ac0483cfd2dffa5d8147bca085137d7ae5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab332cd78d083edb2fddaa3c02578cafade12725/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab332cd78d083edb2fddaa3c02578cafade12725/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ab332cd78d083edb2fddaa3c02578cafade12725", "patch": "@@ -1,3 +1,8 @@\n+2022-10-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/system-linux-sparc.ads (Support_Atomic_Primitives): New\n+\tconstant set to True.\n+\n 2022-10-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/ada-tree.def (LOAD_EXPR): New expression code."}, {"sha": "5e985b6a28819cde8d90aa8caa6f102450c80b1f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab332cd78d083edb2fddaa3c02578cafade12725/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab332cd78d083edb2fddaa3c02578cafade12725/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ab332cd78d083edb2fddaa3c02578cafade12725", "patch": "@@ -1,3 +1,15 @@\n+2022-10-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/100134\n+\t* pt.cc (tsubst_friend_function): Propagate DECL_MODULE_PURVIEW_P\n+\tfrom the introduced namespace-scope function to the namespace.\n+\n+2022-10-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/99377\n+\t* module.cc (lazy_load_binding): Clear processing_template_decl.\n+\t(lazy_load_pendings): Likewise.\n+\n 2022-10-10  Nathan Sidwell  <nathan@acm.org>\n \n \t* mangle.cc (write_prefix): Add VAR_DECL & FIELD_DECL to"}, {"sha": "7c8677036ffe8dd4ba65e99b82a384dc2eda649b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab332cd78d083edb2fddaa3c02578cafade12725/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab332cd78d083edb2fddaa3c02578cafade12725/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ab332cd78d083edb2fddaa3c02578cafade12725", "patch": "@@ -1,3 +1,18 @@\n+2022-10-11  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/107215\n+\t* arith.cc (gfc_int2int): Check validity of type of source expr.\n+\t(gfc_int2real): Likewise.\n+\t(gfc_int2complex): Likewise.\n+\t(gfc_real2int): Likewise.\n+\t(gfc_real2real): Likewise.\n+\t(gfc_complex2int): Likewise.\n+\t(gfc_complex2real): Likewise.\n+\t(gfc_complex2complex): Likewise.\n+\t(gfc_log2log): Likewise.\n+\t(gfc_log2int): Likewise.\n+\t(gfc_int2log): Likewise.\n+\n 2022-10-10  Jakub Jelinek  <jakub@redhat.com>\n \n \t* trans-openmp.cc (gfc_trans_omp_assume): Use create_tmp_var_raw"}, {"sha": "350c852a86bf98e73f06b0859f70f56eea0d2eef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab332cd78d083edb2fddaa3c02578cafade12725/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab332cd78d083edb2fddaa3c02578cafade12725/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ab332cd78d083edb2fddaa3c02578cafade12725", "patch": "@@ -1,3 +1,78 @@\n+2022-10-11  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/107215\n+\t* gfortran.dg/pr107215.f90: New test.\n+\n+2022-10-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/100134\n+\t* g++.dg/modules/tpl-friend-8_a.H: New test.\n+\t* g++.dg/modules/tpl-friend-8_b.C: New test.\n+\n+2022-10-11  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/99377\n+\t* g++.dg/modules/pr99377-2_a.C: New test.\n+\t* g++.dg/modules/pr99377-2_b.C: New test.\n+\n+2022-10-11  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/vrp-float-abs-1.c: New test.\n+\n+2022-10-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107212\n+\t* gcc.dg/vect/pr107212-1.c: New testcase.\n+\t* gcc.dg/vect/pr107212-2.c: Likewise.\n+\n+2022-10-11  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* gcc.dg/pr104464.c: Xfail on amdgcn.\n+\t* gcc.dg/signbit-2.c: Likewise.\n+\t* gcc.dg/signbit-5.c: Likewise.\n+\t* gcc.dg/vect/bb-slp-68.c: Likewise.\n+\t* gcc.dg/vect/bb-slp-cond-1.c: Change expectations on amdgcn.\n+\t* gcc.dg/vect/bb-slp-subgroups-3.c: Likewise.\n+\t* gcc.dg/vect/no-vfa-vect-depend-2.c: Change expectations for multiple\n+\tvector sizes.\n+\t* gcc.dg/vect/pr33953.c: Likewise.\n+\t* gcc.dg/vect/pr65947-12.c: Likewise.\n+\t* gcc.dg/vect/pr65947-13.c: Likewise.\n+\t* gcc.dg/vect/pr80631-2.c: Likewise.\n+\t* gcc.dg/vect/slp-reduc-4.c: Likewise.\n+\t* gcc.dg/vect/trapv-vect-reduc-4.c: Likewise.\n+\t* lib/target-supports.exp (available_vector_sizes): Add more sizes\n+\tfor amdgcn.\n+\n+2022-10-11  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.dg/vect/vect-bitfield-read-1.c: New test.\n+\t* gcc.dg/vect/vect-bitfield-read-2.c: New test.\n+\t* gcc.dg/vect/vect-bitfield-read-3.c: New test.\n+\t* gcc.dg/vect/vect-bitfield-read-4.c: New test.\n+\t* gcc.dg/vect/vect-bitfield-read-5.c: New test.\n+\t* gcc.dg/vect/vect-bitfield-read-6.c: New test.\n+\t* gcc.dg/vect/vect-bitfield-write-1.c: New test.\n+\t* gcc.dg/vect/vect-bitfield-write-2.c: New test.\n+\t* gcc.dg/vect/vect-bitfield-write-3.c: New test.\n+\t* gcc.dg/vect/vect-bitfield-write-4.c: New test.\n+\t* gcc.dg/vect/vect-bitfield-write-5.c: New test.\n+\n+2022-10-11  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr107093.c: New test.\n+\n+2022-10-11  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/107195\n+\t* gcc.dg/tree-ssa/pr107195-1.c: New test.\n+\t* gcc.dg/tree-ssa/pr107195-2.c: New test.\n+\n+2022-10-11  Liwei Xu  <liwei.xu@intel.com>\n+\t    liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.dg/pr54346.c: New test.\n+\n 2022-10-10  Nathan Sidwell  <nathan@acm.org>\n \n \t* g++.dg/abi/lambda-ctx1-17.C: New."}, {"sha": "5efc8fc55224ecc3375028bf76358ff8899fbd31", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab332cd78d083edb2fddaa3c02578cafade12725/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab332cd78d083edb2fddaa3c02578cafade12725/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=ab332cd78d083edb2fddaa3c02578cafade12725", "patch": "@@ -1,3 +1,8 @@\n+2022-10-11  Olivier Hainque  <hainque@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* configure: Regenerate.\n+\n 2022-08-30  Martin Liska  <mliska@suse.cz>\n \n \t* testsuite/Makefile.in: Regenerate."}, {"sha": "44bca0539b459d1c41b543e16273c4c439bdd355", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab332cd78d083edb2fddaa3c02578cafade12725/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab332cd78d083edb2fddaa3c02578cafade12725/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=ab332cd78d083edb2fddaa3c02578cafade12725", "patch": "@@ -1,3 +1,8 @@\n+2022-10-11  Olivier Hainque  <hainque@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* configure: Regenerate.\n+\n 2022-07-08  Ian Lance Taylor  <iant@golang.org>\n \n \t* configure.ac: Check for sys/link.h.  Use either link.h or"}, {"sha": "7291643cf09c0a1363f61ac27a2bfebfe28715f2", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab332cd78d083edb2fddaa3c02578cafade12725/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab332cd78d083edb2fddaa3c02578cafade12725/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=ab332cd78d083edb2fddaa3c02578cafade12725", "patch": "@@ -1,3 +1,8 @@\n+2022-10-11  Olivier Hainque  <hainque@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* configure: Regenerate.\n+\n 2022-06-27  Sergei Trofimovich  <siarheit@google.com>\n \n \tPR c++/106102"}, {"sha": "23937c86dc6ed030c56ec59e1dca543de75e1334", "filename": "libffi/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab332cd78d083edb2fddaa3c02578cafade12725/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab332cd78d083edb2fddaa3c02578cafade12725/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=ab332cd78d083edb2fddaa3c02578cafade12725", "patch": "@@ -1,3 +1,8 @@\n+2022-10-11  Olivier Hainque  <hainque@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* configure: Regenerate.\n+\n 2021-11-15  H.J. Lu  <hjl.tools@gmail.com>\n \n \t* LOCAL_PATCHES: Add commit a91f844ef44."}, {"sha": "09dc6c1942e4b97f99e432887711eab2c2291449", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab332cd78d083edb2fddaa3c02578cafade12725/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab332cd78d083edb2fddaa3c02578cafade12725/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=ab332cd78d083edb2fddaa3c02578cafade12725", "patch": "@@ -1,3 +1,11 @@\n+2022-10-11  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config.host (*vxworks*): When enable_shared, add\n+\tlibgcc and crtstuff \"shared\" fragments for rtp except\n+\tlarge code model.\n+\t(aarch64*-wrs-vxworks7*): Remove t-slibgcc-libgcc from\n+\tthe list of fragments.\n+\n 2022-10-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/arc/linux-unwind.h (arc_fallback_frame_state): Use"}, {"sha": "f97ea9655afc14a72e43ed848645ef4698d5e5c2", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab332cd78d083edb2fddaa3c02578cafade12725/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab332cd78d083edb2fddaa3c02578cafade12725/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=ab332cd78d083edb2fddaa3c02578cafade12725", "patch": "@@ -1,3 +1,8 @@\n+2022-10-11  Olivier Hainque  <hainque@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* configure: Regenerate.\n+\n 2022-10-10  LIU Hao  <lh_mouse@126.com>\n \n \t* io/async.h (struct async_unit): Use `__gthread_t` instead"}, {"sha": "96b793088b3acd5a3e91a779f0553855379484f4", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab332cd78d083edb2fddaa3c02578cafade12725/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab332cd78d083edb2fddaa3c02578cafade12725/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=ab332cd78d083edb2fddaa3c02578cafade12725", "patch": "@@ -1,3 +1,8 @@\n+2022-10-11  Olivier Hainque  <hainque@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* configure: Regenerate.\n+\n 2022-10-05  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* libgomp.texi (OpenMP 5.1 Impl. Status): Mark 'assume' as 'Y'."}, {"sha": "b181a690a461a1c2c51bc8ed978b7f5febda8f9c", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab332cd78d083edb2fddaa3c02578cafade12725/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab332cd78d083edb2fddaa3c02578cafade12725/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=ab332cd78d083edb2fddaa3c02578cafade12725", "patch": "@@ -1,3 +1,9 @@\n+2022-10-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-demangle.c (d_prefix): 'M' components are not\n+\t(re-)added to the substitution table.\n+\t* testsuite/demangle-expected: Add tests.\n+\n 2022-10-07  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-demangle.c (d_print_comp_inner): Allow parameter packs"}, {"sha": "a5f326d844e8aa3fc937b809041f05dda04e1105", "filename": "libitm/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab332cd78d083edb2fddaa3c02578cafade12725/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab332cd78d083edb2fddaa3c02578cafade12725/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=ab332cd78d083edb2fddaa3c02578cafade12725", "patch": "@@ -1,3 +1,8 @@\n+2022-10-11  Olivier Hainque  <hainque@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* configure: Regenerate.\n+\n 2022-09-28  Lulu Cheng  <chenglulu@loongson.cn>\n \t    Yang Yujie  <yangyujie@loongson.cn>\n "}, {"sha": "71c37ecb3c9e78eb45b815c16dd28646d8620df3", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab332cd78d083edb2fddaa3c02578cafade12725/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab332cd78d083edb2fddaa3c02578cafade12725/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=ab332cd78d083edb2fddaa3c02578cafade12725", "patch": "@@ -1,3 +1,8 @@\n+2022-10-11  Olivier Hainque  <hainque@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* configure: Regenerate.\n+\n 2022-08-25  Martin Liska  <mliska@suse.cz>\n \n \t* configure: Regenerate."}, {"sha": "acad39822be79508ad62e0f3e65844af0a8a8b3c", "filename": "liboffloadmic/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab332cd78d083edb2fddaa3c02578cafade12725/liboffloadmic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab332cd78d083edb2fddaa3c02578cafade12725/liboffloadmic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/liboffloadmic%2FChangeLog?ref=ab332cd78d083edb2fddaa3c02578cafade12725", "patch": "@@ -1,3 +1,13 @@\n+2022-10-11  Olivier Hainque  <hainque@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* plugin/configure: Regenerate.\n+\n+2022-10-11  Olivier Hainque  <hainque@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* configure: Regenerate.\n+\n 2022-09-09  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* plugin/libgomp-plugin-intelmic.cpp (GOMP_OFFLOAD_load_image):"}, {"sha": "6e18145d23c351843b4621956f538cd1ee075f47", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab332cd78d083edb2fddaa3c02578cafade12725/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab332cd78d083edb2fddaa3c02578cafade12725/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=ab332cd78d083edb2fddaa3c02578cafade12725", "patch": "@@ -1,3 +1,8 @@\n+2022-10-11  Olivier Hainque  <hainque@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* configure: Regenerate.\n+\n 2022-09-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* libdruntime/MERGE: Merge upstream druntime d579c467c1."}, {"sha": "440091ebfadd08010d4413c8070ab29659e22973", "filename": "libquadmath/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab332cd78d083edb2fddaa3c02578cafade12725/libquadmath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab332cd78d083edb2fddaa3c02578cafade12725/libquadmath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FChangeLog?ref=ab332cd78d083edb2fddaa3c02578cafade12725", "patch": "@@ -1,3 +1,8 @@\n+2022-10-11  Olivier Hainque  <hainque@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* configure: Regenerate.\n+\n 2022-08-25  Martin Liska  <mliska@suse.cz>\n \n \t* configure: Regenerate."}, {"sha": "f61d6135d0e8c4089ae8ede24cacb15c78864a2c", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab332cd78d083edb2fddaa3c02578cafade12725/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab332cd78d083edb2fddaa3c02578cafade12725/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=ab332cd78d083edb2fddaa3c02578cafade12725", "patch": "@@ -1,3 +1,8 @@\n+2022-10-11  Olivier Hainque  <hainque@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* configure: Regenerate.\n+\n 2022-10-03  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR sanitizer/105531"}, {"sha": "fc386ccffa3ac40b9f38410c0c7970c0344b9bee", "filename": "libssp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab332cd78d083edb2fddaa3c02578cafade12725/libssp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab332cd78d083edb2fddaa3c02578cafade12725/libssp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libssp%2FChangeLog?ref=ab332cd78d083edb2fddaa3c02578cafade12725", "patch": "@@ -1,3 +1,8 @@\n+2022-10-11  Olivier Hainque  <hainque@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* configure: Regenerate.\n+\n 2022-08-25  Martin Liska  <mliska@suse.cz>\n \n \t* configure: Regenerate."}, {"sha": "def58a64f8e3bbebca1f3b8ec125ec1faa0924ac", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab332cd78d083edb2fddaa3c02578cafade12725/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab332cd78d083edb2fddaa3c02578cafade12725/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ab332cd78d083edb2fddaa3c02578cafade12725", "patch": "@@ -1,3 +1,57 @@\n+2022-10-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR bootstrap/107221\n+\t* libsupc++/eh_alloc.cc (pool): Change preprocessor condition\n+\tfor using __mutex from __GTHREADS to _GLIBCXX_HOSTED.\n+\t(pool::allocate): Remove namespace qualification to use\n+\tpool::__scoped_lock instead of __gnu_cxx::__scoped_lock.\n+\n+2022-10-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/68606\n+\t* Makefile.in: Regenerate.\n+\t* acinclude.m4 (GLIBCXX_EMERGENCY_EH_ALLOC): New macro.\n+\t* configure: Regenerate.\n+\t* configure.ac: Use GLIBCXX_EMERGENCY_EH_ALLOC.\n+\t* crossconfig.m4: Check for secure_getenv.\n+\t* doc/Makefile.in: Regenerate.\n+\t* doc/xml/manual/configure.xml: Document new configure options.\n+\t* doc/xml/manual/evolution.xml: Document addition of tunables.\n+\t* doc/xml/manual/using_exceptions.xml: Document emergency\n+\tbuffer and tunables.\n+\t* doc/html/*: Regenerate.\n+\t* include/Makefile.in: Regenerate.\n+\t* libsupc++/Makefile.am: Use EH_POOL_FLAGS.\n+\t* libsupc++/Makefile.in: Regenerate.\n+\t* libsupc++/eh_alloc.cc (EMERGENCY_OBJ_SIZE): Define in units\n+\tof sizeof(void*) not including the ABI's exception header.\n+\t(EMERGENCY_OBJ_COUNT): Define as target-independent calculation\n+\tbased on word size.\n+\t(MAX_OBJ_COUNT): Define macro for upper limit on pool size.\n+\t(pool) [_GLIBCXX_EH_POOL_STATIC]: Use fixed-size buffer.\n+\t(pool::buffer_size_in_bytes): New static member function.\n+\t(pool::pool): Parse GLIBCXX_TUNABLES environment variable to set\n+\tpool size at runtime.\n+\t(pool::in_pool): Use std::less<void*> for total order.\n+\t(__freeres) [_GLIBCXX_EH_POOL_STATIC]: Do nothing.\n+\t(__cxa_free_exception, __cxa_free_dependent_exception): Add\n+\t[[unlikely]] attributes.\n+\t* po/Makefile.in: Regenerate.\n+\t* python/Makefile.in: Regenerate.\n+\t* src/Makefile.in: Regenerate.\n+\t* src/c++11/Makefile.in: Regenerate.\n+\t* src/c++17/Makefile.in: Regenerate.\n+\t* src/c++20/Makefile.in: Regenerate.\n+\t* src/c++98/Makefile.in: Regenerate.\n+\t* src/filesystem/Makefile.in: Regenerate.\n+\t* src/libbacktrace/Makefile.in: Regenerate.\n+\t* testsuite/Makefile.in: Regenerate.\n+\n+2022-10-11  Olivier Hainque  <hainque@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* configure: Regenerate.\n+\n 2022-10-10  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/type_traits (make_signed, make_unsigned): Remove"}, {"sha": "8675fd242dfb763a6aecb77feb8b8e0d8bc98577", "filename": "libvtv/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab332cd78d083edb2fddaa3c02578cafade12725/libvtv%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab332cd78d083edb2fddaa3c02578cafade12725/libvtv%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2FChangeLog?ref=ab332cd78d083edb2fddaa3c02578cafade12725", "patch": "@@ -1,3 +1,8 @@\n+2022-10-11  Olivier Hainque  <hainque@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* configure: Regenerate.\n+\n 2022-08-25  Martin Liska  <mliska@suse.cz>\n \n \t* configure: Regenerate."}, {"sha": "df87bde009e7df72d1c76aac7d2995779b482000", "filename": "lto-plugin/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab332cd78d083edb2fddaa3c02578cafade12725/lto-plugin%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab332cd78d083edb2fddaa3c02578cafade12725/lto-plugin%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FChangeLog?ref=ab332cd78d083edb2fddaa3c02578cafade12725", "patch": "@@ -1,3 +1,8 @@\n+2022-10-11  Olivier Hainque  <hainque@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* configure: Regenerate.\n+\n 2022-08-01  Martin Liska  <mliska@suse.cz>\n \n \tPR lto/106170"}, {"sha": "2d8607023c38a7807795755538ea05e789bbafff", "filename": "zlib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab332cd78d083edb2fddaa3c02578cafade12725/zlib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab332cd78d083edb2fddaa3c02578cafade12725/zlib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/zlib%2FChangeLog?ref=ab332cd78d083edb2fddaa3c02578cafade12725", "patch": "@@ -1,3 +1,8 @@\n+2022-10-11  Olivier Hainque  <hainque@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* configure: Regenerate.\n+\n 2022-08-25  Martin Liska  <mliska@suse.cz>\n \n \t* configure: Regenerate."}]}