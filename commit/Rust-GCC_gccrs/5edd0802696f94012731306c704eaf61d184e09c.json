{"sha": "5edd0802696f94012731306c704eaf61d184e09c", "node_id": "C_kwDOANBUbNoAKDVlZGQwODAyNjk2Zjk0MDEyNzMxMzA2YzcwNGVhZjYxZDE4NGUwOWM", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-05-09T20:14:21Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-05-10T17:10:05Z"}, "message": "Fortran: check TEAM arguments to coarray intrinsics\n\nTEAM arguments to coarray intrinsics must be scalar expressions of type\nTEAM_TYPE of intrinsic module ISO_FORTRAN_ENV.\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/105526\n\t* resolve.cc (check_team): New.\n\t(gfc_resolve_code): Add checks for arguments to coarray intrinsics\n\tFORM TEAM, CHANGE TEAM, and SYNC TEAM.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/105526\n\t* gfortran.dg/coarray_50.f90: New test.", "tree": {"sha": "dae931fd86955347e30ac63d3c0bc6fca9b9ad51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dae931fd86955347e30ac63d3c0bc6fca9b9ad51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5edd0802696f94012731306c704eaf61d184e09c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5edd0802696f94012731306c704eaf61d184e09c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5edd0802696f94012731306c704eaf61d184e09c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5edd0802696f94012731306c704eaf61d184e09c/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71eae0fd3dd7a5f30067ea26a06a8774355fd5cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71eae0fd3dd7a5f30067ea26a06a8774355fd5cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71eae0fd3dd7a5f30067ea26a06a8774355fd5cc"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "c8335f939a9f04bacf29db2d67a9594a650bb361", "filename": "gcc/fortran/resolve.cc", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5edd0802696f94012731306c704eaf61d184e09c/gcc%2Ffortran%2Fresolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5edd0802696f94012731306c704eaf61d184e09c/gcc%2Ffortran%2Fresolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.cc?ref=5edd0802696f94012731306c704eaf61d184e09c", "patch": "@@ -11831,6 +11831,23 @@ deferred_op_assign (gfc_code **code, gfc_namespace *ns)\n }\n \n \n+static bool\n+check_team (gfc_expr *team, const char *intrinsic)\n+{\n+  if (team->rank != 0\n+      || team->ts.type != BT_DERIVED\n+      || team->ts.u.derived->from_intmod != INTMOD_ISO_FORTRAN_ENV\n+      || team->ts.u.derived->intmod_sym_id != ISOFORTRAN_TEAM_TYPE)\n+    {\n+      gfc_error (\"TEAM argument to %qs at %L must be a scalar expression \"\n+\t\t \"of type TEAM_TYPE\", intrinsic, &team->where);\n+      return false;\n+    }\n+\n+  return true;\n+}\n+\n+\n /* Given a block of code, recursively resolve everything pointed to by this\n    code block.  */\n \n@@ -11999,10 +12016,25 @@ gfc_resolve_code (gfc_code *code, gfc_namespace *ns)\n \t  break;\n \n \tcase EXEC_FAIL_IMAGE:\n+\t  break;\n+\n \tcase EXEC_FORM_TEAM:\n+\t  if (code->expr1 != NULL\n+\t      && (code->expr1->ts.type != BT_INTEGER || code->expr1->rank))\n+\t    gfc_error (\"TEAM NUMBER argument to FORM TEAM at %L must be \"\n+\t\t       \"a scalar INTEGER\", &code->expr1->where);\n+\t  check_team (code->expr2, \"FORM TEAM\");\n+\t  break;\n+\n \tcase EXEC_CHANGE_TEAM:\n+\t  check_team (code->expr1, \"CHANGE TEAM\");\n+\t  break;\n+\n \tcase EXEC_END_TEAM:\n+\t  break;\n+\n \tcase EXEC_SYNC_TEAM:\n+\t  check_team (code->expr1, \"SYNC TEAM\");\n \t  break;\n \n \tcase EXEC_ENTRY:"}, {"sha": "e88d9d93f0eb31aa82b79dea6b30853ab5880ed5", "filename": "gcc/testsuite/gfortran.dg/coarray_50.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5edd0802696f94012731306c704eaf61d184e09c/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_50.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5edd0802696f94012731306c704eaf61d184e09c/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_50.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_50.f90?ref=5edd0802696f94012731306c704eaf61d184e09c", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=single\" }\n+!\n+! PR fortran/105526 - check TEAM arguments to coarray intrinsics\n+\n+subroutine p\n+  use iso_fortran_env, only: team_type\n+  implicit none\n+  type(team_type) :: team\n+  type t\n+     integer :: i\n+  end type t\n+  type(t) :: z\n+  form team (0, team)\n+  form team (0, 0)      ! { dg-error \"scalar expression of type TEAM_TYPE\" }\n+  form team (0, [team]) ! { dg-error \"scalar expression of type TEAM_TYPE\" }\n+  form team ([0], team) ! { dg-error \"scalar INTEGER\" }\n+  form team (0., team)  ! { dg-error \"scalar INTEGER\" }\n+  change team (0)       ! { dg-error \"scalar expression of type TEAM_TYPE\" }\n+  end team\n+  sync team (0)         ! { dg-error \"scalar expression of type TEAM_TYPE\" }\n+end"}]}