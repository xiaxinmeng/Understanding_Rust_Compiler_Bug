{"sha": "147ed0184f403b51b4f180f94b0779e9905faa3a", "node_id": "C_kwDOANBUbNoAKDE0N2VkMDE4NGY0MDNiNTFiNGYxODBmOTRiMDc3OWU5OTA1ZmFhM2E", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-11T12:08:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-15T06:02:46Z"}, "message": "middle-end/102682 - avoid invalid subreg on the LHS\n\nThe following avoids generating\n\n(insn 6 5 7 2 (set (subreg:OI (concatn/v:TI [\n                    (reg:DI 92 [ buffer ])\n                    (reg:DI 93 [ buffer+8 ])\n                ]) 0)\n        (subreg:OI (reg/v:V8SI 85 [ __x ]) 0)) \"t.ii\":76:21 74 {*movoi_internal_avx}\n     (nil))\n\nvia store_bit_field_1 when we try to store excess data into\na register allocated temporary.  The case was supposed to\n\n      /* Use the subreg machinery either to narrow OP0 to the required\n         words...\n\nbut the check ensured only an register-aligned but not a large\nenough piece.  The following adds such missed check which ends up\ndecomposing the set to\n\n(insn 6 5 7 (set (subreg:DI (reg/v:TI 84 [ buffer ]) 0)\n        (subreg:DI (reg/v:V8SI 85 [ __x ]) 0)) \"t.ii\":76:21 -1\n     (nil))\n\n(insn 7 6 0 (set (subreg:DI (reg/v:TI 84 [ buffer ]) 8)\n        (subreg:DI (reg/v:V8SI 85 [ __x ]) 8)) \"t.ii\":76:21 -1\n     (nil))\n\n2021-10-11  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/102682\n\t* expmed.c (store_bit_field_1): Ensure a LHS subreg would\n\tnot create a paradoxical subreg.", "tree": {"sha": "767fb66927677ae0523625e2cc3618749b11b6c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/767fb66927677ae0523625e2cc3618749b11b6c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/147ed0184f403b51b4f180f94b0779e9905faa3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/147ed0184f403b51b4f180f94b0779e9905faa3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/147ed0184f403b51b4f180f94b0779e9905faa3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/147ed0184f403b51b4f180f94b0779e9905faa3a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "575191b976a5175be6579590b05f1f1d3550cefc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/575191b976a5175be6579590b05f1f1d3550cefc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/575191b976a5175be6579590b05f1f1d3550cefc"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "bbdd0e71d2063e590ea12d6042b6274a181f6c2c", "filename": "gcc/expmed.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/147ed0184f403b51b4f180f94b0779e9905faa3a/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/147ed0184f403b51b4f180f94b0779e9905faa3a/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=147ed0184f403b51b4f180f94b0779e9905faa3a", "patch": "@@ -806,7 +806,8 @@ store_bit_field_1 (rtx str_rtx, poly_uint64 bitsize, poly_uint64 bitnum,\n \t    }\n \t}\n       else if (constant_multiple_p (bitnum, regsize * BITS_PER_UNIT, &regnum)\n-\t       && multiple_p (bitsize, regsize * BITS_PER_UNIT))\n+\t       && multiple_p (bitsize, regsize * BITS_PER_UNIT)\n+\t       && known_ge (GET_MODE_BITSIZE (GET_MODE (op0)), bitsize))\n \t{\n \t  sub = simplify_gen_subreg (fieldmode, op0, GET_MODE (op0),\n \t\t\t\t     regnum * regsize);"}]}