{"sha": "cfc935327585254eabd5c18f298b1b4bc28a2b02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZjOTM1MzI3NTg1MjU0ZWFiZDVjMThmMjk4YjFiNGJjMjhhMmIwMg==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2009-04-22T15:32:18Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2009-04-22T15:32:18Z"}, "message": "re PR c++/14875 (When using 'or' keyword, the error message speaks of a '||' token)\n\n2009-04-22  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR c++/14875\n\t* c-common.c (c_parse_error): Take a token_flags parameter.\n\tUse token_type for the token type instead.\n\tPass token_flags to cpp_type2name.\n\t* c-common.h (c_parse_error): Update declaration.\n\t* c-parser.c (c_parser_error): Pass 0 as token flags.\nlibcpp/\n\t* lex.c (cpp_type2name): Take a flags parameter. Call\n\tcpp_named_operator2name for named operators and cpp_digraph2name\n\tfor digraphs.\n\t(cpp_digraph2name): New.\n\t(cpp_spell_token): Use it.\n\t(cpp_output_token): Likewise.\n\t* include/cpplib.h (cpp_type2name): Update declaration.\n\t* init.c (cpp_named_operator2name): New.\n\t* internal.h (cpp_named_operator2name): Declare.\ncp/\t\n\t* parser.c (cp_parser_error): Pass token->flags to c_parse_error.\ntestsuite/\n\t* g++.dg/parse/parser-pr14875.C: New.\n\t* g++.dg/parse/parser-pr14875-2.C: New.\n\t* g++.dg/parse/error6.C: Update match string.\n\nFrom-SVN: r146589", "tree": {"sha": "51e37b610f5f0eae957aa2a3cee06eec9ab65abb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51e37b610f5f0eae957aa2a3cee06eec9ab65abb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfc935327585254eabd5c18f298b1b4bc28a2b02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfc935327585254eabd5c18f298b1b4bc28a2b02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfc935327585254eabd5c18f298b1b4bc28a2b02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfc935327585254eabd5c18f298b1b4bc28a2b02/comments", "author": null, "committer": null, "parents": [{"sha": "8632d02a43457ecbcef85175e7575e5da6784646", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8632d02a43457ecbcef85175e7575e5da6784646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8632d02a43457ecbcef85175e7575e5da6784646"}], "stats": {"total": 174, "additions": 149, "deletions": 25}, "files": [{"sha": "f037097d36e849d6946c1f5d840bb79e2d4855e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc935327585254eabd5c18f298b1b4bc28a2b02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc935327585254eabd5c18f298b1b4bc28a2b02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cfc935327585254eabd5c18f298b1b4bc28a2b02", "patch": "@@ -1,3 +1,12 @@\n+2009-04-22  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c++/14875\n+\t* c-common.c (c_parse_error): Take a token_flags parameter.\n+\tUse token_type for the token type instead.\n+\tPass token_flags to cpp_type2name.\n+\t* c-common.h (c_parse_error): Update declaration.\n+\t* c-parser.c (c_parser_error): Pass 0 as token flags.\n+\n 2009-04-22  Andrey Belevantsev  <abel@ispras.ru>\n \n \tPR rtl-optimization/39580"}, {"sha": "67fe8ad8ebd9718a538785c69700de5ff497609b", "filename": "gcc/c-common.c", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc935327585254eabd5c18f298b1b4bc28a2b02/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc935327585254eabd5c18f298b1b4bc28a2b02/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=cfc935327585254eabd5c18f298b1b4bc28a2b02", "patch": "@@ -8167,21 +8167,24 @@ catenate_strings (const char *lhs, const char *rhs_start, int rhs_size)\n    TOKEN, which had the associated VALUE.  */\n \n void\n-c_parse_error (const char *gmsgid, enum cpp_ttype token, tree value)\n+c_parse_error (const char *gmsgid, enum cpp_ttype token_type, \n+\t       tree value, unsigned char token_flags)\n {\n #define catenate_messages(M1, M2) catenate_strings ((M1), (M2), sizeof (M2))\n \n   char *message = NULL;\n \n-  if (token == CPP_EOF)\n+  if (token_type == CPP_EOF)\n     message = catenate_messages (gmsgid, \" at end of input\");\n-  else if (token == CPP_CHAR || token == CPP_WCHAR || token == CPP_CHAR16\n-\t   || token == CPP_CHAR32)\n+  else if (token_type == CPP_CHAR \n+\t   || token_type == CPP_WCHAR \n+\t   || token_type == CPP_CHAR16\n+\t   || token_type == CPP_CHAR32)\n     {\n       unsigned int val = TREE_INT_CST_LOW (value);\n       const char *prefix;\n \n-      switch (token)\n+      switch (token_type)\n \t{\n \tdefault:\n \t  prefix = \"\";\n@@ -8206,26 +8209,28 @@ c_parse_error (const char *gmsgid, enum cpp_ttype token, tree value)\n       free (message);\n       message = NULL;\n     }\n-  else if (token == CPP_STRING || token == CPP_WSTRING || token == CPP_STRING16\n-\t   || token == CPP_STRING32)\n+  else if (token_type == CPP_STRING \n+\t   || token_type == CPP_WSTRING \n+\t   || token_type == CPP_STRING16\n+\t   || token_type == CPP_STRING32)\n     message = catenate_messages (gmsgid, \" before string constant\");\n-  else if (token == CPP_NUMBER)\n+  else if (token_type == CPP_NUMBER)\n     message = catenate_messages (gmsgid, \" before numeric constant\");\n-  else if (token == CPP_NAME)\n+  else if (token_type == CPP_NAME)\n     {\n       message = catenate_messages (gmsgid, \" before %qE\");\n       error (message, value);\n       free (message);\n       message = NULL;\n     }\n-  else if (token == CPP_PRAGMA)\n+  else if (token_type == CPP_PRAGMA)\n     message = catenate_messages (gmsgid, \" before %<#pragma%>\");\n-  else if (token == CPP_PRAGMA_EOL)\n+  else if (token_type == CPP_PRAGMA_EOL)\n     message = catenate_messages (gmsgid, \" before end of line\");\n-  else if (token < N_TTYPES)\n+  else if (token_type < N_TTYPES)\n     {\n       message = catenate_messages (gmsgid, \" before %qs token\");\n-      error (message, cpp_type2name (token));\n+      error (message, cpp_type2name (token_type, token_flags));\n       free (message);\n       message = NULL;\n     }"}, {"sha": "ec47a023bfc129261cce929a7776f561364a568e", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc935327585254eabd5c18f298b1b4bc28a2b02/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc935327585254eabd5c18f298b1b4bc28a2b02/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=cfc935327585254eabd5c18f298b1b4bc28a2b02", "patch": "@@ -1029,7 +1029,7 @@ extern void builtin_define_std (const char *macro);\n extern void builtin_define_with_value (const char *, const char *, int);\n extern void c_stddef_cpp_builtins (void);\n extern void fe_file_change (const struct line_map *);\n-extern void c_parse_error (const char *, enum cpp_ttype, tree);\n+extern void c_parse_error (const char *, enum cpp_ttype, tree, unsigned char);\n \n /* Objective-C / Objective-C++ entry points.  */\n "}, {"sha": "ed77098b4d392aa0d5940b493d8f66ccbcd7ca3e", "filename": "gcc/c-parser.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc935327585254eabd5c18f298b1b4bc28a2b02/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc935327585254eabd5c18f298b1b4bc28a2b02/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=cfc935327585254eabd5c18f298b1b4bc28a2b02", "patch": "@@ -573,7 +573,11 @@ c_parser_error (c_parser *parser, const char *gmsgid)\n \t\t    CPP_KEYWORD, keywords are treated like\n \t\t    identifiers.  */\n \t\t (token->type == CPP_KEYWORD ? CPP_NAME : token->type),\n-\t\t token->value);\n+\t\t /* ??? The C parser does not save the cpp flags of a\n+\t\t    token, we need to pass 0 here and we will not get\n+\t\t    the source spelling of some tokens but rather the\n+\t\t    canonical spelling.  */\n+\t\t token->value, /*flags=*/0);\n }\n \n /* If the next token is of the indicated TYPE, consume it.  Otherwise,"}, {"sha": "1b67ad87944237816e5c8c36f8b6e7ea0b945e0d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc935327585254eabd5c18f298b1b4bc28a2b02/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc935327585254eabd5c18f298b1b4bc28a2b02/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cfc935327585254eabd5c18f298b1b4bc28a2b02", "patch": "@@ -1,3 +1,8 @@\n+2009-04-22  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c++/14875\n+\t* parser.c (cp_parser_error): Pass token->flags to c_parse_error.\n+\n 2009-04-21  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c++/35711"}, {"sha": "fbf211bfb9f311cc994ce4d5294571c23d2fc677", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc935327585254eabd5c18f298b1b4bc28a2b02/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc935327585254eabd5c18f298b1b4bc28a2b02/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=cfc935327585254eabd5c18f298b1b4bc28a2b02", "patch": "@@ -2091,7 +2091,7 @@ cp_parser_error (cp_parser* parser, const char* message)\n \t\t\tCPP_KEYWORD, keywords are treated like\n \t\t\tidentifiers.  */\n \t\t     (token->type == CPP_KEYWORD ? CPP_NAME : token->type),\n-\t\t     token->u.value);\n+\t\t     token->u.value, token->flags);\n     }\n }\n "}, {"sha": "386ce8cae69486b8b4d2036c31ea65f7d0a4be7b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc935327585254eabd5c18f298b1b4bc28a2b02/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc935327585254eabd5c18f298b1b4bc28a2b02/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cfc935327585254eabd5c18f298b1b4bc28a2b02", "patch": "@@ -1,3 +1,10 @@\n+2009-04-22  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c++/14875\n+\t* g++.dg/parse/parser-pr14875.C: New.\n+\t* g++.dg/parse/parser-pr14875-2.C: New.\n+\t* g++.dg/parse/error6.C: Update match string.\n+\n 2009-04-22  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/39845"}, {"sha": "8b8424fe30ac306345f25fb3437a5e2027f498b9", "filename": "gcc/testsuite/g++.dg/parse/error6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc935327585254eabd5c18f298b1b4bc28a2b02/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc935327585254eabd5c18f298b1b4bc28a2b02/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror6.C?ref=cfc935327585254eabd5c18f298b1b4bc28a2b02", "patch": "@@ -5,7 +5,7 @@ int f(int not) {\n   return 1-not;\n } \n \n-// { dg-error \"11:expected ',' or '...' before '!' token\" \"\" { target *-*-* } 4 }\n+// { dg-error \"11:expected ',' or '...' before 'not' token\" \"\" { target *-*-* } 4 }\n \n // { dg-error \"15:expected primary\\\\-expression before ';' token\" \"\" { target *-*-* } 5 }\n "}, {"sha": "3510aac908ff831c2123c53acf83f34c70e33e93", "filename": "gcc/testsuite/g++.dg/parse/parser-pr14875-2.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc935327585254eabd5c18f298b1b4bc28a2b02/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparser-pr14875-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc935327585254eabd5c18f298b1b4bc28a2b02/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparser-pr14875-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparser-pr14875-2.C?ref=cfc935327585254eabd5c18f298b1b4bc28a2b02", "patch": "@@ -0,0 +1,31 @@\n+// PR 14875: When using 'or' keyword, the error message speaks of a '||' token\n+// { dg-do compile }\n+// { dg-options \"\" }\n+#define CHECK(x)  void ::x\n+  CHECK (and);      // { dg-error \"before .and. token\" }\n+  CHECK (and_eq);   // { dg-error \"before .and_eq. token\" }\n+  CHECK (bitand);   // { dg-error \"before .bitand. token\" }\n+  CHECK (bitor);    // { dg-error \"before .bitor. token\" }\n+  CHECK (compl);    // { dg-error \"before .compl. token\" }\n+  CHECK (not);      // { dg-error \"before .not. token\" }\n+  CHECK (not_eq);   // { dg-error \"before .not_eq. token\" }\n+  CHECK (or);       // { dg-error \"before .or. token\" }\n+  CHECK (or_eq);    // { dg-error \"before .or_eq. token\" }\n+  CHECK (xor);      // { dg-error \"before .xor. token\" }\n+  CHECK (xor_eq);   // { dg-error \"before .xor_eq. token\" }\n+#undef CHECK\n+#define CHECK(x)  int x\n+  CHECK (<:);     // { dg-error \"before .<:. token\" }\n+  CHECK (:>);     // { dg-error \"before .:>. token\" }\n+#undef CHECK\n+#define CHECK(x)  x\n+  CHECK (<%);     // { dg-error \"before .<%. token\" }\n+#undef CHECK\n+#define CHECK(x)  x x\n+  CHECK (%>);     // { dg-error \"before .%>. token\" }\n+#undef CHECK\n+#define CHECK(x)  x\n+  CHECK (%:);     // { dg-error \"stray .%:. \" }\n+  CHECK (%:%:);   // { dg-error \"stray .%:%:. \" }\n+\n+"}, {"sha": "7a6f0618681e2f60aaca56ba38ae8e2816d8632d", "filename": "gcc/testsuite/g++.dg/parse/parser-pr14875.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc935327585254eabd5c18f298b1b4bc28a2b02/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparser-pr14875.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc935327585254eabd5c18f298b1b4bc28a2b02/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparser-pr14875.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparser-pr14875.C?ref=cfc935327585254eabd5c18f298b1b4bc28a2b02", "patch": "@@ -0,0 +1,20 @@\n+// PR 14875: When using 'or' keyword, the error message speaks of a '||' token\n+// { dg-do compile }\n+// { dg-options \"\" }\n+using namespace std; \n+ \n+class Sample \n+{ \n+ \n+public: \n+  Sample(); \n+  void or(long Digital);  // { dg-error \"before .or. token\" }\n+}; \n+ \n+Sample::Sample() \n+{ \n+} \n+ \n+void Sample::or(long Digital) // { dg-error \"before .or. token\" }\n+{ \n+}"}, {"sha": "ff720612a5676eb23c5752d5654fb80946e6bad1", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc935327585254eabd5c18f298b1b4bc28a2b02/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc935327585254eabd5c18f298b1b4bc28a2b02/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=cfc935327585254eabd5c18f298b1b4bc28a2b02", "patch": "@@ -1,3 +1,16 @@\n+2009-04-22  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c++/14875\n+\t* lex.c (cpp_type2name): Take a flags parameter. Call\n+\tcpp_named_operator2name for named operators and cpp_digraph2name\n+\tfor digraphs.\n+\t(cpp_digraph2name): New.\n+\t(cpp_spell_token): Use it.\n+\t(cpp_output_token): Likewise.\n+\t* include/cpplib.h (cpp_type2name): Update declaration.\n+\t* init.c (cpp_named_operator2name): New.\n+\t* internal.h (cpp_named_operator2name): Declare.\n+\n 2009-04-21  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c++/13358"}, {"sha": "b38d9f43ef5ebbb3e31ed387a2b73d583283cda2", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc935327585254eabd5c18f298b1b4bc28a2b02/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc935327585254eabd5c18f298b1b4bc28a2b02/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=cfc935327585254eabd5c18f298b1b4bc28a2b02", "patch": "@@ -841,7 +841,7 @@ extern void cpp_output_line (cpp_reader *, FILE *);\n extern unsigned char *cpp_output_line_to_string (cpp_reader *,\n \t\t\t\t\t\t const unsigned char *);\n extern void cpp_output_token (const cpp_token *, FILE *);\n-extern const char *cpp_type2name (enum cpp_ttype);\n+extern const char *cpp_type2name (enum cpp_ttype, unsigned char flags);\n /* Returns the value of an escape sequence, truncated to the correct\n    target precision.  PSTR points to the input pointer, which is just\n    after the backslash.  LIMIT is how much text we have.  WIDE is true"}, {"sha": "aef39981792e78cd1faabc933f6a09b70adf291e", "filename": "libcpp/init.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc935327585254eabd5c18f298b1b4bc28a2b02/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc935327585254eabd5c18f298b1b4bc28a2b02/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=cfc935327585254eabd5c18f298b1b4bc28a2b02", "patch": "@@ -381,6 +381,24 @@ mark_named_operators (cpp_reader *pfile)\n     }\n }\n \n+/* Helper function of cpp_type2name. Return the string associated with\n+   named operator TYPE.  */\n+const char *\n+cpp_named_operator2name (enum cpp_ttype type)\n+{\n+  const struct builtin_operator *b;\n+\n+  for (b = operator_array;\n+       b < (operator_array + ARRAY_SIZE (operator_array));\n+       b++)\n+    {\n+      if (type == b->value)\n+\treturn (const char *) b->name;\n+    }\n+\n+  return NULL;\n+}\n+\n void\n cpp_init_special_builtins (cpp_reader *pfile)\n {"}, {"sha": "22e6d238906a46cf52e660dafc091327de101d33", "filename": "libcpp/internal.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc935327585254eabd5c18f298b1b4bc28a2b02/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc935327585254eabd5c18f298b1b4bc28a2b02/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=cfc935327585254eabd5c18f298b1b4bc28a2b02", "patch": "@@ -570,6 +570,7 @@ extern void _cpp_init_tokenrun (tokenrun *, unsigned int);\n \n /* In init.c.  */\n extern void _cpp_maybe_push_include_file (cpp_reader *);\n+extern const char *cpp_named_operator2name (enum cpp_ttype type);\n \n /* In directives.c */\n extern int _cpp_test_assertion (cpp_reader *, unsigned int *);"}, {"sha": "af5c06a7abcfb3f3ef9be2863f1dde2ad06c0b11", "filename": "libcpp/lex.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc935327585254eabd5c18f298b1b4bc28a2b02/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc935327585254eabd5c18f298b1b4bc28a2b02/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=cfc935327585254eabd5c18f298b1b4bc28a2b02", "patch": "@@ -1416,6 +1416,13 @@ utf8_to_ucn (unsigned char *buffer, const unsigned char *name)\n   return ucn_len;\n }\n \n+/* Given a token TYPE corresponding to a digraph, return a pointer to\n+   the spelling of the digraph.  */\n+static const unsigned char *\n+cpp_digraph2name (enum cpp_ttype type)\n+{\n+  return digraph_spellings[(int) type - (int) CPP_FIRST_DIGRAPH];\n+}\n \n /* Write the spelling of a token TOKEN to BUFFER.  The buffer must\n    already contain the enough space to hold the token's spelling.\n@@ -1435,8 +1442,7 @@ cpp_spell_token (cpp_reader *pfile, const cpp_token *token,\n \tunsigned char c;\n \n \tif (token->flags & DIGRAPH)\n-\t  spelling\n-\t    = digraph_spellings[(int) token->type - (int) CPP_FIRST_DIGRAPH];\n+\t  spelling = cpp_digraph2name (token->type);\n \telse if (token->flags & NAMED_OP)\n \t  goto spell_ident;\n \telse\n@@ -1499,11 +1505,17 @@ cpp_token_as_text (cpp_reader *pfile, const cpp_token *token)\n   return start;\n }\n \n-/* Used by C front ends, which really should move to using\n-   cpp_token_as_text.  */\n+/* Returns a pointer to a string which spells the token defined by\n+   TYPE and FLAGS.  Used by C front ends, which really should move to\n+   using cpp_token_as_text.  */\n const char *\n-cpp_type2name (enum cpp_ttype type)\n+cpp_type2name (enum cpp_ttype type, unsigned char flags)\n {\n+  if (flags & DIGRAPH)\n+    return (const char *) cpp_digraph2name (type);\n+  else if (flags & NAMED_OP)\n+    return cpp_named_operator2name (type);\n+\n   return (const char *) token_spellings[type].name;\n }\n \n@@ -1521,8 +1533,7 @@ cpp_output_token (const cpp_token *token, FILE *fp)\n \tint c;\n \n \tif (token->flags & DIGRAPH)\n-\t  spelling\n-\t    = digraph_spellings[(int) token->type - (int) CPP_FIRST_DIGRAPH];\n+\t  spelling = cpp_digraph2name (token->type);\n \telse if (token->flags & NAMED_OP)\n \t  goto spell_ident;\n \telse"}]}