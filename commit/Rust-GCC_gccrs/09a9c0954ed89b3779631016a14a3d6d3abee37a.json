{"sha": "09a9c0954ed89b3779631016a14a3d6d3abee37a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDlhOWMwOTU0ZWQ4OWIzNzc5NjMxMDE2YTE0YTNkNmQzYWJlZTM3YQ==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2004-03-24T22:08:39Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2004-03-24T22:08:39Z"}, "message": "configure.ac: Add --enable-werror-always (for top level bootstrap support).\n\n(gcc)\n\t* configure.ac: Add --enable-werror-always (for top level bootstrap\n\tsupport).\n\t* configure: Regenerate.\n\n(top level)\n\t* configure.in (top level bootstrap support): Rework --enable-werror\n\tto set @stage2_werror_flag@.\n\t* configure: Regenerate.\n\t* Makefile.tpl (top level bootstrap support): Pass\n\t@stage2_werror_flag@ down to configure in stages 2 and 3.\n\t* Makefile.in: Regenerate.\n\nFrom-SVN: r79935", "tree": {"sha": "f57c21720c18cb974ff82e4d9ec3569cc33c6d09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f57c21720c18cb974ff82e4d9ec3569cc33c6d09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09a9c0954ed89b3779631016a14a3d6d3abee37a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09a9c0954ed89b3779631016a14a3d6d3abee37a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09a9c0954ed89b3779631016a14a3d6d3abee37a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09a9c0954ed89b3779631016a14a3d6d3abee37a/comments", "author": null, "committer": null, "parents": [{"sha": "58c959212f4871518e4d0d5af8555759cd0cf7a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58c959212f4871518e4d0d5af8555759cd0cf7a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58c959212f4871518e4d0d5af8555759cd0cf7a9"}], "stats": {"total": 68, "additions": 55, "deletions": 13}, "files": [{"sha": "2218d7b452dfa3a2caea240a9401d608af07eb75", "filename": "ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a9c0954ed89b3779631016a14a3d6d3abee37a/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a9c0954ed89b3779631016a14a3d6d3abee37a/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=09a9c0954ed89b3779631016a14a3d6d3abee37a", "patch": "@@ -1,3 +1,12 @@\n+2004-03-24  Nathanael Nerode  <neroden@gcc.gnu.org>\n+\n+\t* configure.in (top level bootstrap support): Rework --enable-werror\n+\tto set @stage2_werror_flag@.\n+\t* configure: Regenerate.\n+\t* Makefile.tpl (top level bootstrap support): Pass\n+\t@stage2_werror_flag@ down to configure in stages 2 and 3.\n+\t* Makefile.in: Regenerate.\n+\n 2004-03-23  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* Makefile.tpl (new-bootstrap): Set CC and CC_FOR_BUILD in configure"}, {"sha": "2a88b90fad896f6e717a52f29b267e6c388ee4ab", "filename": "Makefile.in", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a9c0954ed89b3779631016a14a3d6d3abee37a/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a9c0954ed89b3779631016a14a3d6d3abee37a/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=09a9c0954ed89b3779631016a14a3d6d3abee37a", "patch": "@@ -24046,6 +24046,8 @@ all-stage1-gcc: configure-stage1-gcc prebootstrap\n \t$(STAMP) all-stage1-gcc\n \n # TODO: Deal with STAGE_PREFIX (which is only for ada, incidentally)\n+# Possibly pass --enable-werror-always (depending on --enable-werror);\n+# that's what @stage2_werror_flag@ is for\n configure-stage2-gcc: all-stage1-gcc\n \techo configure-stage2-gcc > stage_last ; \\\n \tif [ -f stage2-gcc/Makefile ] ; then \\\n@@ -24089,7 +24091,7 @@ configure-stage2-gcc: all-stage1-gcc\n \t    libsrcdir=\"$$s/gcc\";; \\\n \tesac; \\\n \t$(SHELL) $${libsrcdir}/configure \\\n-\t  $(HOST_CONFIGARGS) $${srcdiroption} ; \\\n+\t  $(HOST_CONFIGARGS) $${srcdiroption} @stage2_werror_flag@ ; \\\n \tcd .. ; \\\n \tmv gcc stage2-gcc ; \\\n \tmv prev-gcc stage1-gcc ; \\\n@@ -24163,7 +24165,7 @@ configure-stage3-gcc: all-stage2-gcc\n \t    libsrcdir=\"$$s/gcc\";; \\\n \tesac; \\\n \t$(SHELL) $${libsrcdir}/configure \\\n-\t  $(HOST_CONFIGARGS) $${srcdiroption} ; \\\n+\t  $(HOST_CONFIGARGS) $${srcdiroption} @stage2_werror_flag@ ; \\\n \tcd .. ; \\\n \tmv gcc stage3-gcc ; \\\n \tmv prev-gcc stage2-gcc ; \\"}, {"sha": "4fef85bf335c17f5da83a0d185fbd90e45b2f983", "filename": "Makefile.tpl", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a9c0954ed89b3779631016a14a3d6d3abee37a/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a9c0954ed89b3779631016a14a3d6d3abee37a/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=09a9c0954ed89b3779631016a14a3d6d3abee37a", "patch": "@@ -1374,6 +1374,8 @@ all-stage1-gcc: configure-stage1-gcc prebootstrap\n \t$(STAMP) all-stage1-gcc\n \n # TODO: Deal with STAGE_PREFIX (which is only for ada, incidentally)\n+# Possibly pass --enable-werror-always (depending on --enable-werror);\n+# that's what @stage2_werror_flag@ is for\n configure-stage2-gcc: all-stage1-gcc\n \techo configure-stage2-gcc > stage_last ; \\\n \tif [ -f stage2-gcc/Makefile ] ; then \\\n@@ -1417,7 +1419,7 @@ configure-stage2-gcc: all-stage1-gcc\n \t    libsrcdir=\"$$s/gcc\";; \\\n \tesac; \\\n \t$(SHELL) $${libsrcdir}/configure \\\n-\t  $(HOST_CONFIGARGS) $${srcdiroption} ; \\\n+\t  $(HOST_CONFIGARGS) $${srcdiroption} @stage2_werror_flag@ ; \\\n \tcd .. ; \\\n \tmv gcc stage2-gcc ; \\\n \tmv prev-gcc stage1-gcc ; \\\n@@ -1491,7 +1493,7 @@ configure-stage3-gcc: all-stage2-gcc\n \t    libsrcdir=\"$$s/gcc\";; \\\n \tesac; \\\n \t$(SHELL) $${libsrcdir}/configure \\\n-\t  $(HOST_CONFIGARGS) $${srcdiroption} ; \\\n+\t  $(HOST_CONFIGARGS) $${srcdiroption} @stage2_werror_flag@ ; \\\n \tcd .. ; \\\n \tmv gcc stage3-gcc ; \\\n \tmv prev-gcc stage2-gcc ; \\"}, {"sha": "a674ab6b6fa58900792211ff9ea656d6bd0e3c93", "filename": "configure", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a9c0954ed89b3779631016a14a3d6d3abee37a/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a9c0954ed89b3779631016a14a3d6d3abee37a/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=09a9c0954ed89b3779631016a14a3d6d3abee37a", "patch": "@@ -4484,9 +4484,9 @@ else\n   enable_werror=yes\n fi\n \n-case ${enable_error} in\n-  yes) WERROR=-Werror ;;\n-  *) WERROR= ;;\n+case ${enable_werror} in\n+  yes) stage2_werror_flag=\"--enable-werror-always\" ;;\n+  *) stage2_werror_flag=\"\" ;;\n esac\n \n \n@@ -4745,7 +4745,7 @@ s%@MAINTAINER_MODE_TRUE@%$MAINTAINER_MODE_TRUE%g\n s%@MAINTAINER_MODE_FALSE@%$MAINTAINER_MODE_FALSE%g\n s%@MAINT@%$MAINT%g\n s%@stage1_cflags@%$stage1_cflags%g\n-s%@WERROR@%$WERROR%g\n+s%@stage2_werror_flag@%$stage2_werror_flag%g\n \n CEOF\n EOF"}, {"sha": "5735d84c8b4ab4850c88e350b5099b874b30f5ed", "filename": "configure.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a9c0954ed89b3779631016a14a3d6d3abee37a/configure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a9c0954ed89b3779631016a14a3d6d3abee37a/configure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.in?ref=09a9c0954ed89b3779631016a14a3d6d3abee37a", "patch": "@@ -2129,10 +2129,10 @@ AC_SUBST(stage1_cflags)\n AC_ARG_ENABLE(werror,\n [  --enable-werror         enable -Werror in bootstrap stage2 and later], [],\n [enable_werror=yes])\n-case ${enable_error} in\n-  yes) WERROR=-Werror ;;\n-  *) WERROR= ;;\n+case ${enable_werror} in\n+  yes) stage2_werror_flag=\"--enable-werror-always\" ;;\n+  *) stage2_werror_flag=\"\" ;;\n esac\n-AC_SUBST(WERROR)\n+AC_SUBST(stage2_werror_flag)\n \n AC_OUTPUT(Makefile)"}, {"sha": "98b0bbfaed78db565d8d0ac49fe9646c5589df76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a9c0954ed89b3779631016a14a3d6d3abee37a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a9c0954ed89b3779631016a14a3d6d3abee37a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09a9c0954ed89b3779631016a14a3d6d3abee37a", "patch": "@@ -1,3 +1,9 @@\n+2004-03-24  Nathanael Nerode  <neroden@gcc.gnu.org>\n+\n+\t* configure.ac: Add --enable-werror-always (for top level bootstrap\n+\tsupport).\n+\t* configure: Regenerate.\n+\n 2004-03-24  Ziemowit Laski  <zlaski@apple.com>\n \n \t* objc/objc-act.c (objc_comptypes): Treat comparisons"}, {"sha": "db55887e227a01f6f0ae210a001a75965bcd7e1c", "filename": "gcc/configure", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a9c0954ed89b3779631016a14a3d6d3abee37a/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a9c0954ed89b3779631016a14a3d6d3abee37a/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=09a9c0954ed89b3779631016a14a3d6d3abee37a", "patch": "@@ -854,6 +854,7 @@ Optional Features:\n                           put copies of generated files in source dir\n                           intended for creating source tarballs for users\n                           without texinfo bison or flex.\n+  --enable-werror-always         enable -Werror always\n   --enable-werror         enable -Werror in bootstrap stage2 and later\n   --enable-checking=LIST\n \t\t\t  enable expensive run-time checks.  With LIST,\n@@ -3894,6 +3895,19 @@ if test $ac_cv_prog_cc_w_old_style_definition = yes ; then\n   strict1_warn=\"${strict1_warn} -Wold-style-definition\"\n fi\n \n+# Enable -Werror, period.\n+# Check whether --enable-werror_always or --disable-werror_always was given.\n+if test \"${enable_werror_always+set}\" = set; then\n+  enableval=\"$enable_werror_always\"\n+\n+else\n+  enable_werror_always=no\n+fi;\n+if test x${enable_werror_always} = xyes ; then\n+  strict1_warn=\"${strict1_warn} -Werror\"\n+  WERROR=-Werror\n+fi\n+\n # If the native compiler is GCC, we can enable warnings even in stage1.\n # That's useful for people building cross-compilers, or just running a\n # quick `make'.\n@@ -5247,7 +5261,7 @@ if test \"${gcc_cv_prog_makeinfo_modern+set}\" = set; then\n else\n     ac_prog_version=`$MAKEINFO --version 2>&1 |\n                    sed -n 's/^.*GNU texinfo.* \\([0-9][0-9.]*\\).*$/\\1/p'`\n-  echo \"configure:5250: version of makeinfo is $ac_prog_version\" >&5\n+  echo \"configure:5264: version of makeinfo is $ac_prog_version\" >&5\n   case $ac_prog_version in\n     '')     gcc_cv_prog_makeinfo_modern=no;;\n     4.[2-9]*)"}, {"sha": "a4da3d265418057b31ee5b0e37d7820a37c0ce8f", "filename": "gcc/configure.ac", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a9c0954ed89b3779631016a14a3d6d3abee37a/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a9c0954ed89b3779631016a14a3d6d3abee37a/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=09a9c0954ed89b3779631016a14a3d6d3abee37a", "patch": "@@ -346,6 +346,15 @@ if test $ac_cv_prog_cc_w_old_style_definition = yes ; then\n   strict1_warn=\"${strict1_warn} -Wold-style-definition\"\n fi\n \n+# Enable -Werror, period.\n+AC_ARG_ENABLE(werror_always, \n+[  --enable-werror-always         enable -Werror always], [],\n+[enable_werror_always=no])\n+if test x${enable_werror_always} = xyes ; then\n+  strict1_warn=\"${strict1_warn} -Werror\"\n+  WERROR=-Werror\n+fi\n+\n # If the native compiler is GCC, we can enable warnings even in stage1.  \n # That's useful for people building cross-compilers, or just running a\n # quick `make'."}]}