{"sha": "110abdbc6877d03e991d8d2eb03d479db1bab8e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEwYWJkYmM2ODc3ZDAzZTk5MWQ4ZDJlYjAzZDQ3OWRiMWJhYjhlMg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2007-05-26T13:00:47Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2007-05-26T13:00:47Z"}, "message": "i386.c, [...]: Fix comment typos.\n\n\t* config/i386/i386.c, config/pa/pa.c, config/spu/spu.c,\n\tdf-problems.c, df-scan.c, domwalk.c, ebitmap.c, ebitmap.h,\n\tfold-const.c, gcc.c, ipa-type-escape.c, omega.c, omega.h,\n\ttree-ssa-coalesce.c, tree-ssa-live.c, tree-ssa-structalias.c,\n\ttree-vrp.c: Fix comment typos.  Follow spelling conventions.\n\t* doc/tm.texi: Follow spelling conventions.\n\nFrom-SVN: r125090", "tree": {"sha": "bf7ffb2b31635e32954ef15161507e715433586b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf7ffb2b31635e32954ef15161507e715433586b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/110abdbc6877d03e991d8d2eb03d479db1bab8e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/110abdbc6877d03e991d8d2eb03d479db1bab8e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/110abdbc6877d03e991d8d2eb03d479db1bab8e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/110abdbc6877d03e991d8d2eb03d479db1bab8e2/comments", "author": null, "committer": null, "parents": [{"sha": "4dad0aca146f96888dda601263e31f8621de1bae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dad0aca146f96888dda601263e31f8621de1bae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dad0aca146f96888dda601263e31f8621de1bae"}], "stats": {"total": 61, "additions": 34, "deletions": 27}, "files": [{"sha": "85ddc22a55e73b60b51d4e72d2d7e9f85171fecf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=110abdbc6877d03e991d8d2eb03d479db1bab8e2", "patch": "@@ -6,6 +6,13 @@\n \tfollow spelling conventions in various\n \twarning/error/diagnostic messages.\n \n+\t* config/i386/i386.c, config/pa/pa.c, config/spu/spu.c,\n+\tdf-problems.c, df-scan.c, domwalk.c, ebitmap.c, ebitmap.h,\n+\tfold-const.c, gcc.c, ipa-type-escape.c, omega.c, omega.h,\n+\ttree-ssa-coalesce.c, tree-ssa-live.c, tree-ssa-structalias.c,\n+\ttree-vrp.c: Fix comment typos.  Follow spelling conventions.\n+\t* doc/tm.texi: Follow spelling conventions.\n+\n 2007-05-25  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR tree-opt/32090"}, {"sha": "7bc5fe04c8941272da2cecc96ec1d812a3244414", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=110abdbc6877d03e991d8d2eb03d479db1bab8e2", "patch": "@@ -16548,7 +16548,7 @@ enum ix86_builtins\n /* Table for the ix86 builtin decls.  */\n static GTY(()) tree ix86_builtins[(int) IX86_BUILTIN_MAX];\n \n-/* Add a ix86 target builtin function with CODE, NAME and TYPE.  Do so,\n+/* Add an ix86 target builtin function with CODE, NAME and TYPE.  Do so,\n  * if the target_flags include one of MASK.  Stores the function decl\n  * in the ix86_builtins array.\n  * Returns the function decl or NULL_TREE, if the builtin was not added.  */"}, {"sha": "6cd2be73a3244f50a7fbf87579f1630fa4d457a5", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=110abdbc6877d03e991d8d2eb03d479db1bab8e2", "patch": "@@ -4220,7 +4220,7 @@ hppa_profile_hook (int label_no)\n \n   emit_move_insn (gen_rtx_REG (word_mode, 26), gen_rtx_REG (word_mode, 2));\n \n-  /* The address of the function is loaded into %r25 with a instruction-\n+  /* The address of the function is loaded into %r25 with an instruction-\n      relative sequence that avoids the use of relocations.  The sequence\n      is split so that the load_offset_label_address instruction can\n      occupy the delay slot of the call to _mcount.  */"}, {"sha": "5e1626f128e32df6cd38b0b7794cc9347380e60c", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=110abdbc6877d03e991d8d2eb03d479db1bab8e2", "patch": "@@ -2153,7 +2153,7 @@ insert_branch_hints (void)\n \t  prop = prev;\n \n \t/* If this is the JOIN block of a simple IF-THEN then\n-\t   propogate the hint to the HEADER block. */\n+\t   propagate the hint to the HEADER block. */\n \telse if (prev && prev2\n \t\t && EDGE_COUNT (bb->preds) == 2\n \t\t && EDGE_COUNT (prev->preds) == 1"}, {"sha": "016ea4669029704e312bd0e767622d3f5ef151d4", "filename": "gcc/df-problems.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=110abdbc6877d03e991d8d2eb03d479db1bab8e2", "patch": "@@ -2138,7 +2138,7 @@ df_ur_add_problem (struct df *df, int flags)\n \n    This is a variant of the UR problem above that has a lot of special\n    features just for the register allocation phase.  This problem\n-   should go a away if someone would fix the interference graph.\n+   should go away if someone would fix the interference graph.\n \n    ----------------------------------------------------------------------------*/\n "}, {"sha": "d1ebfcc0d962ae65095408b00e896ffb5dc023f7", "filename": "gcc/df-scan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=110abdbc6877d03e991d8d2eb03d479db1bab8e2", "patch": "@@ -1681,7 +1681,7 @@ df_bb_refs_record (struct dataflow *dflow, basic_block bb)\n     {\n #ifdef EH_USES\n       unsigned int i;\n-      /* This code is putting in a artificial ref for the use at the\n+      /* This code is putting in an artificial ref for the use at the\n \t TOP of the block that receives the exception.  It is too\n \t cumbersome to actually put the ref on the edge.  We could\n \t either model this at the top of the receiver block or the"}, {"sha": "692082728c14a7dbc2f897d96f0cc50a1655b751", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=110abdbc6877d03e991d8d2eb03d479db1bab8e2", "patch": "@@ -3727,7 +3727,7 @@ which.\n @c something, not sure if it looks good.  --mew 10feb93\n \n @defmac OUTGOING_REG_PARM_STACK_SPACE\n-Define this to a non-zero value if it is the responsibility of the caller\n+Define this to a nonzero value if it is the responsibility of the caller\n to allocate the area reserved for arguments passed in registers.\n \n If @code{ACCUMULATE_OUTGOING_ARGS} is defined, this macro controls"}, {"sha": "c40ab8230408dcda6f9fef539829ad067db14fe8", "filename": "gcc/domwalk.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Fdomwalk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Fdomwalk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdomwalk.c?ref=110abdbc6877d03e991d8d2eb03d479db1bab8e2", "patch": "@@ -122,7 +122,7 @@ Boston, MA 02110-1301, USA.  */\n   which reduces code duplication since the rewriting phase is inherently\n   a walk of the dominator tree.\n \n-  And (of course), we use the dominator walker to drive a our dominator\n+  And (of course), we use the dominator walker to drive our dominator\n   optimizer, which is a semi-global optimizer.\n \n   TODO:"}, {"sha": "3c9d07b137db4ba6707bdb46d6502ed81f30f0cf", "filename": "gcc/ebitmap.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Febitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Febitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Febitmap.c?ref=110abdbc6877d03e991d8d2eb03d479db1bab8e2", "patch": "@@ -30,7 +30,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n \n /* The ebitmap data structure is a sparse bitmap structure that works\n    by having two pieces:\n-   1. An array of all non-zero words in the structures, organized as\n+   1. An array of all nonzero words in the structures, organized as\n    an array of HOST_WIDE_INT's.\n    2. A non-sparse bitmap saying which bitmap words are present in the\n    array."}, {"sha": "f49a698c7a7f76c0334f75dadf70b8a36e13599f", "filename": "gcc/ebitmap.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Febitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Febitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Febitmap.h?ref=110abdbc6877d03e991d8d2eb03d479db1bab8e2", "patch": "@@ -30,10 +30,10 @@ typedef struct ebitmap_def\n {  \n   unsigned int n_elts;\t\t/* number of elements in the array.  */\n   sbitmap wordmask;\t\t/* wordmask saying which words are\n-\t\t\t\t   non-zero.  */\n-  unsigned int numwords;\t/* number of non-zero words.  */\n+\t\t\t\t   nonzero.  */\n+  unsigned int numwords;\t/* number of nonzero words.  */\n   unsigned int cacheindex;\t/* which word cache is.  */\n-  EBITMAP_ELT_TYPE *elts;\t/* non-zero element array.  */\n+  EBITMAP_ELT_TYPE *elts;\t/* nonzero element array.  */\n   EBITMAP_ELT_TYPE *cache;\t/* last tested element, or NULL.  */\n } *ebitmap;\n "}, {"sha": "16dfd3b729dcf3896bf8792056fa3098638e7985", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=110abdbc6877d03e991d8d2eb03d479db1bab8e2", "patch": "@@ -65,7 +65,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"langhooks.h\"\n #include \"md5.h\"\n \n-/* Non-zero if we are folding constants inside an initializer; zero\n+/* Nonzero if we are folding constants inside an initializer; zero\n    otherwise.  */\n int folding_initializer = 0;\n \n@@ -910,7 +910,7 @@ div_if_zero_remainder (enum tree_code code, tree arg1, tree arg2)\n   return build_int_cst_wide (type, quol, quoh);\n }\n \f\n-/* This is non-zero if we should defer warnings about undefined\n+/* This is nonzero if we should defer warnings about undefined\n    overflow.  This facility exists because these warnings are a\n    special case.  The code to estimate loop iterations does not want\n    to issue any warnings, since it works with expressions which do not\n@@ -7831,7 +7831,7 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \t}\n \n       /* Convert (T1)(~(T2)X) into ~(T1)X if T1 and T2 are integral types\n-\t of the same precision, and X is a integer type not narrower than\n+\t of the same precision, and X is an integer type not narrower than\n \t types T1 or T2, i.e. the cast (T2)X isn't an extension.  */\n       if (INTEGRAL_TYPE_P (type)\n \t  && TREE_CODE (op0) == BIT_NOT_EXPR"}, {"sha": "b9700c966bdf0b0ee356881f76136404ea811221", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=110abdbc6877d03e991d8d2eb03d479db1bab8e2", "patch": "@@ -127,7 +127,7 @@ static const char dir_separator_str[] = { DIR_SEPARATOR, 0 };\n /* Flag set by cppspec.c to 1.  */\n int is_cpp_driver;\n \n-/* Flag set to non-zero if an @file argument has been supplied to gcc.  */\n+/* Flag set to nonzero if an @file argument has been supplied to gcc.  */\n static bool at_file_supplied;\n \n /* Flag saying to pass the greatest exit code returned by a sub-process"}, {"sha": "0398b84b97d89ebcb942f201c31fa23b3ffc5ea6", "filename": "gcc/ipa-type-escape.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Fipa-type-escape.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Fipa-type-escape.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-type-escape.c?ref=110abdbc6877d03e991d8d2eb03d479db1bab8e2", "patch": "@@ -656,7 +656,7 @@ check_cast_type (tree to_type, tree from_type)\n   return CT_SIDEWAYS;\n }     \n \n-/* This function returns non-zero if VAR is result of call \n+/* This function returns nonzero if VAR is result of call \n    to malloc function.  */\n \n static bool"}, {"sha": "900ca8594e36f87de35d00188372c35b4444dd41", "filename": "gcc/omega.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Fomega.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Fomega.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomega.c?ref=110abdbc6877d03e991d8d2eb03d479db1bab8e2", "patch": "@@ -1806,13 +1806,13 @@ cleanout_wildcards (omega_pb pb)\n     for (i = n_vars; !omega_safe_var_p (pb, i); i--)\n       if (pb->eqs[e].coef[i] != 0)\n \t{\n-\t  /* i is the last non-zero non-safe variable.  */\n+\t  /* i is the last nonzero non-safe variable.  */\n \n \t  for (j = i - 1; !omega_safe_var_p (pb, j); j--)\n \t    if (pb->eqs[e].coef[j] != 0)\n \t      break;\n \n-\t  /* j is the next non-zero non-safe variable, or points\n+\t  /* j is the next nonzero non-safe variable, or points\n \t     to a safe variable: it is then a wildcard variable.  */\n \n \t  /* Clean it out.  */\n@@ -3174,9 +3174,9 @@ omega_solve_eq (omega_pb pb, enum omega_result desired_res)\n \tif (eqn->coef[j])\n \t  break;\n \n-      /* i is the position of last non-zero coefficient,\n+      /* i is the position of last nonzero coefficient,\n \t g is the coefficient of i,\n-\t j is the position of next non-zero coefficient.  */\n+\t j is the position of next nonzero coefficient.  */\n \n       if (j == 0)\n \t{"}, {"sha": "6f2f274ea02c674ec8bd6b589b89a3b94d235e60", "filename": "gcc/omega.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Fomega.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Fomega.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomega.h?ref=110abdbc6877d03e991d8d2eb03d479db1bab8e2", "patch": "@@ -1,4 +1,4 @@\n-/* Source code for an implementation of the Omega test, a integer \n+/* Source code for an implementation of the Omega test, an integer \n    programming algorithm for dependence analysis, by William Pugh, \n    appeared in Supercomputing '91 and CACM Aug 92.\n "}, {"sha": "5953fec17e84d920738bbb6d0c692ef6109a423b", "filename": "gcc/tree-ssa-coalesce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Ftree-ssa-coalesce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Ftree-ssa-coalesce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-coalesce.c?ref=110abdbc6877d03e991d8d2eb03d479db1bab8e2", "patch": "@@ -476,7 +476,7 @@ typedef struct ssa_conflicts_d\n } * ssa_conflicts_p;\n \n \n-/* Return a empty new conflict graph for SIZE elements.  */\n+/* Return an empty new conflict graph for SIZE elements.  */\n \n static inline ssa_conflicts_p\n ssa_conflicts_new (unsigned size)"}, {"sha": "4c32d487ccc0c79eafd4b2379df9e0558c6fa49d", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=110abdbc6877d03e991d8d2eb03d479db1bab8e2", "patch": "@@ -569,7 +569,7 @@ delete_tree_live_info (tree_live_info_p live)\n }\n \n \n-/* Visit basic block BB and propogate any required live on entry bits from \n+/* Visit basic block BB and propagate any required live on entry bits from \n    LIVE into the predecessors.  VISITED is the bitmap of visited blocks.  \n    TMP is a temporary work bitmap which is passed in to avoid reallocating\n    it each time.  */\n@@ -625,7 +625,7 @@ live_worklist (tree_live_info_p live)\n \n   sbitmap_zero (visited);\n \n-  /* Visit all the blocks in reverse order and propogate live on entry values\n+  /* Visit all the blocks in reverse order and propagate live on entry values\n      into the predecessors blocks.  */\n   FOR_EACH_BB_REVERSE (bb)\n     loe_visit_block (live, bb, visited, tmp);"}, {"sha": "a935ca2566e6e86c94bbfc4e2c8f1d3ae6c39c9e", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=110abdbc6877d03e991d8d2eb03d479db1bab8e2", "patch": "@@ -2808,7 +2808,7 @@ do_rhs_deref_structure_copy (const struct constraint_expr lhs,\n }\n \n /* Handle the structure copy case where we have a structure copy\n-   between a aggregate on the RHS and a dereference of a pointer on\n+   between an aggregate on the RHS and a dereference of a pointer on\n    the LHS that is of SIZE (in bits)\n \n    For each field of the rhs variable (rhsfield)"}, {"sha": "c32c907ee3a454584dc442a254655fb7b1097ca2", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/110abdbc6877d03e991d8d2eb03d479db1bab8e2/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=110abdbc6877d03e991d8d2eb03d479db1bab8e2", "patch": "@@ -387,7 +387,7 @@ set_value_range_to_value (value_range_t *vr, tree val, bitmap equiv)\n }\n \n /* Set value range VR to a non-negative range of type TYPE.\n-   OVERFLOW_INFINITY indicates whether to use a overflow infinity\n+   OVERFLOW_INFINITY indicates whether to use an overflow infinity\n    rather than TYPE_MAX_VALUE; this should be true if we determine\n    that the range is nonnegative based on the assumption that signed\n    overflow does not occur.  */\n@@ -607,7 +607,7 @@ symbolic_range_p (value_range_t *vr)\n           || !is_gimple_min_invariant (vr->max));\n }\n \n-/* Return true if value range VR uses a overflow infinity.  */\n+/* Return true if value range VR uses an overflow infinity.  */\n \n static inline bool\n overflow_infinity_range_p (value_range_t *vr)"}]}