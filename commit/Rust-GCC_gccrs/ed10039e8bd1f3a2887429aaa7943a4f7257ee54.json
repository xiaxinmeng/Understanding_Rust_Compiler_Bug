{"sha": "ed10039e8bd1f3a2887429aaa7943a4f7257ee54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQxMDAzOWU4YmQxZjNhMjg4NzQyOWFhYTc5NDNhNGY3MjU3ZWU1NA==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-11-09T15:46:15Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-11-09T15:46:15Z"}, "message": "PR 50016 Slow I/O on MingW due to _commit\n\nfrontend ChangeLog:\n\n2011-11-09  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR libfortran/50016\n\t* gfortran.texi (Data consistency and durability): New section.\n\n\ntestsuite ChangeLog:\n\n2011-11-09  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR libfortran/50016\n\t* gfortran.dg/inquire_size.f90: Don't flush the unit.\n\nlibgfortran ChangeLog:\n\n2011-11-09  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR libfortran/50016\n\t* io/inquire.c (inquire_via_unit): Flush the unit and use ssize.\n\t* io/unix.c (buf_flush): Don't call _commit.\n\nFrom-SVN: r181207", "tree": {"sha": "4142f4ba491843be305a43bdb525fc03d316eb91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4142f4ba491843be305a43bdb525fc03d316eb91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed10039e8bd1f3a2887429aaa7943a4f7257ee54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed10039e8bd1f3a2887429aaa7943a4f7257ee54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed10039e8bd1f3a2887429aaa7943a4f7257ee54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed10039e8bd1f3a2887429aaa7943a4f7257ee54/comments", "author": null, "committer": null, "parents": [{"sha": "26833b3de72bba8da5516e47a2da4fe73f5d1478", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26833b3de72bba8da5516e47a2da4fe73f5d1478", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26833b3de72bba8da5516e47a2da4fe73f5d1478"}], "stats": {"total": 105, "additions": 99, "deletions": 6}, "files": [{"sha": "019680dfa1ac79329f4bf4628905e6246a502010", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed10039e8bd1f3a2887429aaa7943a4f7257ee54/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed10039e8bd1f3a2887429aaa7943a4f7257ee54/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ed10039e8bd1f3a2887429aaa7943a4f7257ee54", "patch": "@@ -1,3 +1,8 @@\n+2011-11-09  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+        PR libfortran/50016\n+        * gfortran.texi (Data consistency and durability): New section.\n+\n 2011-11-09  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/50540"}, {"sha": "aac2d908b023afa9751b05ebb4369a44aba5dbba", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed10039e8bd1f3a2887429aaa7943a4f7257ee54/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed10039e8bd1f3a2887429aaa7943a4f7257ee54/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=ed10039e8bd1f3a2887429aaa7943a4f7257ee54", "patch": "@@ -1090,6 +1090,7 @@ might in some way or another become visible to the programmer.\n * KIND Type Parameters::\n * Internal representation of LOGICAL variables::\n * Thread-safety of the runtime library::\n+* Data consistency and durability::\n @end menu\n \n \n@@ -1194,6 +1195,81 @@ Finally, for platforms not supporting thread-safe POSIX functions,\n further functionality might not be thread-safe.  For details, please\n consult the documentation for your operating system.\n \n+\n+@node Data consistency and durability\n+@section Data consistency and durability\n+@cindex consistency, durability\n+\n+This section contains a brief overview of data and metadata\n+consistency and durability issues when doing I/O.\n+\n+With respect to durability, GNU Fortran makes no effort to ensure that\n+data is committed to stable storage. If this is required, the GNU\n+Fortran programmer can use the intrinsic @code{FNUM} to retrieve the\n+low level file descriptor corresponding to an open Fortran unit. Then,\n+using e.g. the @code{ISO_C_BINDING} feature, one can call the\n+underlying system call to flush dirty data to stable storage, such as\n+@code{fsync} on POSIX, @code{_commit} on MingW, or @code{fcntl(fd,\n+F_FULLSYNC, 0)} on Mac OS X. The following example shows how to call\n+fsync:\n+\n+@smallexample\n+  ! Declare the interface for POSIX fsync function\n+  interface\n+    function fsync (fd) bind(c,name=\"fsync\")\n+    use iso_c_binding, only: c_int\n+      integer(c_int), value :: fd\n+      integer(c_int) :: fsync\n+    end function fsync\n+  end interface\n+\n+  ! Variable declaration\n+  integer :: ret\n+\n+  ! Opening unit 10\n+  open (10,file=\"foo\")\n+\n+  ! ...\n+  ! Perform I/O on unit 10\n+  ! ...\n+\n+  ! Flush and sync\n+  flush(10)\n+  ret = fsync(fnum(10))\n+\n+  ! Handle possible error\n+  if (ret /= 0) stop \"Error calling FSYNC\"\n+@end smallexample\n+\n+With respect to consistency, for regular files GNU Fortran uses\n+buffered I/O in order to improve performance. This buffer is flushed\n+automatically when full and in some other situations, e.g. when\n+closing a unit. It can also be explicitly flushed with the\n+@code{FLUSH} statement. Also, the buffering can be turned off with the\n+@code{GFORTRAN_UNBUFFERED_ALL} and\n+@code{GFORTRAN_UNBUFFERED_PRECONNECTED} environment variables. Special\n+files, such as terminals and pipes, are always unbuffered. Sometimes,\n+however, further things may need to be done in order to allow other\n+processes to see data that GNU Fortran has written, as follows.\n+\n+The Windows platform supports a relaxed metadata consistency model,\n+where file metadata is written to the directory lazily. This means\n+that, for instance, the @code{dir} command can show a stale size for a\n+file. One can force a directory metadata update by closing the unit,\n+or by calling @code{_commit} on the file descriptor. Note, though,\n+that @code{_commit} will force all dirty data to stable storage, which\n+is often a very slow operation.\n+\n+The Network File System (NFS) implements a relaxed consistency model\n+called open-to-close consistency. Closing a file forces dirty data and\n+metadata to be flushed to the server, and opening a file forces the\n+client to contact the server in order to revalidate cached\n+data. @code{fsync} will also force a flush of dirty data and metadata\n+to the server. Similar to @code{open} and @code{close}, acquiring and\n+releasing @code{fcntl} file locks, if the server supports them, will\n+also force cache validation and flushing dirty data and metadata.\n+\n+\n @c ---------------------------------------------------------------------\n @c Extensions\n @c ---------------------------------------------------------------------"}, {"sha": "a0eeb32136a7153c1249318706006f52051c4ac3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed10039e8bd1f3a2887429aaa7943a4f7257ee54/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed10039e8bd1f3a2887429aaa7943a4f7257ee54/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ed10039e8bd1f3a2887429aaa7943a4f7257ee54", "patch": "@@ -1,3 +1,8 @@\n+2011-11-09  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+        PR libfortran/50016\n+        * gfortran.dg/inquire_size.f90: Don't flush the unit.\n+\n 2011-11-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/51039"}, {"sha": "13876cfb7fd764d4cbb2d12af3ced7c94e285824", "filename": "gcc/testsuite/gfortran.dg/inquire_size.f90", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed10039e8bd1f3a2887429aaa7943a4f7257ee54/gcc%2Ftestsuite%2Fgfortran.dg%2Finquire_size.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed10039e8bd1f3a2887429aaa7943a4f7257ee54/gcc%2Ftestsuite%2Fgfortran.dg%2Finquire_size.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finquire_size.f90?ref=ed10039e8bd1f3a2887429aaa7943a4f7257ee54", "patch": "@@ -8,7 +8,9 @@\n do i=1,100\n   write(25) i, \"abcdefghijklmnopqrstuvwxyz\"\n enddo\n-flush(25)\n+! Gfortran implicitly flushes the buffer when doing a file size\n+! inquire on an open file.\n+! flush(25)\n \n inquire(unit=25, named=is_named, name=aname, size=i)\n if (.not.is_named) call abort"}, {"sha": "d9d397bc1e0a1ce477c9f1e56e76a79d3e681876", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed10039e8bd1f3a2887429aaa7943a4f7257ee54/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed10039e8bd1f3a2887429aaa7943a4f7257ee54/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=ed10039e8bd1f3a2887429aaa7943a4f7257ee54", "patch": "@@ -1,3 +1,9 @@\n+2011-11-09  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+        PR libfortran/50016\n+        * io/inquire.c (inquire_via_unit): Flush the unit and use ssize.\n+        * io/unix.c (buf_flush): Don't call _commit.\n+\n 2011-11-08  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR libfortran/47972"}, {"sha": "a5423346db99ee8fbef6d2d1a53e3eb431e8e926", "filename": "libgfortran/io/inquire.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed10039e8bd1f3a2887429aaa7943a4f7257ee54/libgfortran%2Fio%2Finquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed10039e8bd1f3a2887429aaa7943a4f7257ee54/libgfortran%2Fio%2Finquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Finquire.c?ref=ed10039e8bd1f3a2887429aaa7943a4f7257ee54", "patch": "@@ -409,7 +409,10 @@ inquire_via_unit (st_parameter_inquire *iqp, gfc_unit * u)\n \t  if (u == NULL)\n \t    *iqp->size = -1;\n \t  else\n-\t    *iqp->size = file_size (u->file, (gfc_charlen_type) u->file_len);\n+\t    {\n+\t      sflush (u->s);\n+\t      *iqp->size = ssize (u->s);\n+\t    }\n \t}\n     }\n "}, {"sha": "f320733e85986783d8e9ea6cbf4aea88452b689f", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed10039e8bd1f3a2887429aaa7943a4f7257ee54/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed10039e8bd1f3a2887429aaa7943a4f7257ee54/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=ed10039e8bd1f3a2887429aaa7943a4f7257ee54", "patch": "@@ -451,10 +451,6 @@ buf_flush (unix_stream * s)\n   if (s->ndirty != 0)\n     return -1;\n \n-#ifdef _WIN32\n-  _commit (s->fd);\n-#endif\n-\n   return 0;\n }\n "}]}