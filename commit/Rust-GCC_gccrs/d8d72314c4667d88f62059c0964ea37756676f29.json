{"sha": "d8d72314c4667d88f62059c0964ea37756676f29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhkNzIzMTRjNDY2N2Q4OGY2MjA1OWMwOTY0ZWEzNzc1NjY3NmYyOQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2007-07-05T20:04:36Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2007-07-05T20:04:36Z"}, "message": "function.c (match_asm_constraints_1, [...]): New.\n\n2007-07-05  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* function.c (match_asm_constraints_1, rest_of_match_asm_constraints,\n\tpass_match_asm_constraints): New.\n\t* passes.c (init_optimization_passes): Add new pass.\n\t* stmt.c (expand_asm_operands): Set cfun->has_asm_statement.\n\t* function.h (struct function): Add has_asm_statement bit.\n\t(current_function_has_asm_statement): New.\n\t* tree-pass.h (pass_match_asm_constraints): New.\n\nFrom-SVN: r126385", "tree": {"sha": "d66aee4fdb3f5db795e8193be9208dcc7e69501e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d66aee4fdb3f5db795e8193be9208dcc7e69501e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8d72314c4667d88f62059c0964ea37756676f29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d72314c4667d88f62059c0964ea37756676f29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8d72314c4667d88f62059c0964ea37756676f29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d72314c4667d88f62059c0964ea37756676f29/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ab16fe0d1c891de826310f2c0a48641a1de65f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ab16fe0d1c891de826310f2c0a48641a1de65f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ab16fe0d1c891de826310f2c0a48641a1de65f4"}], "stats": {"total": 156, "additions": 155, "deletions": 1}, "files": [{"sha": "30e5648febcd1440ed8206f1bfaf50dc33b16524", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d72314c4667d88f62059c0964ea37756676f29/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d72314c4667d88f62059c0964ea37756676f29/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8d72314c4667d88f62059c0964ea37756676f29", "patch": "@@ -1,3 +1,13 @@\n+2007-07-05  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* function.c (match_asm_constraints_1, rest_of_match_asm_constraints,\n+\tpass_match_asm_constraints): New.\n+\t* passes.c (init_optimization_passes): Add new pass.\n+\t* stmt.c (expand_asm_operands): Set cfun->has_asm_statement.\n+\t* function.h (struct function): Add has_asm_statement bit.\n+\t(current_function_has_asm_statement): New.\n+\t* tree-pass.h (pass_match_asm_constraints): New.\n+\n 2007-07-05  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* config/mips/mips.c (mips_file_start): Avoid declaration"}, {"sha": "a01bd9367bbc1a74b468a4ef36001256860b441c", "filename": "gcc/function.c", "status": "modified", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d72314c4667d88f62059c0964ea37756676f29/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d72314c4667d88f62059c0964ea37756676f29/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=d8d72314c4667d88f62059c0964ea37756676f29", "patch": "@@ -5504,6 +5504,143 @@ struct tree_opt_pass pass_thread_prologue_and_epilogue =\n   TODO_ggc_collect,                     /* todo_flags_finish */\n   'w'                                   /* letter */\n };\n+\f\n+\n+/* This mini-pass fixes fall-out from SSA in asm statements that have\n+   in-out constraints.  Say you start with \n+\n+     orig = inout;\n+     asm (\"\": \"+mr\" (inout));\n+     use (orig);\n+\n+   which is transformed very early to use explicit output and match operands:\n+\n+     orig = inout;\n+     asm (\"\": \"=mr\" (inout) : \"0\" (inout));\n+     use (orig);\n+\n+   Or, after SSA and copyprop,\n+\n+     asm (\"\": \"=mr\" (inout_2) : \"0\" (inout_1));\n+     use (inout_1);\n+\n+   Clearly inout_2 and inout_1 can't be coalesced easily anymore, as\n+   they represent two separate values, so they will get different pseudo\n+   registers during expansion.  Then, since the two operands need to match\n+   per the constraints, but use different pseudo registers, reload can\n+   only register a reload for these operands.  But reloads can only be\n+   satisfied by hardregs, not by memory, so we need a register for this\n+   reload, just because we are presented with non-matching operands.\n+   So, even though we allow memory for this operand, no memory can be\n+   used for it, just because the two operands don't match.  This can\n+   cause reload failures on register-starved targets.\n+\n+   So it's a symptom of reload not being able to use memory for reloads\n+   or, alternatively it's also a symptom of both operands not coming into\n+   reload as matching (in which case the pseudo could go to memory just\n+   fine, as the alternative allows it, and no reload would be necessary).\n+   We fix the latter problem here, by transforming\n+\n+     asm (\"\": \"=mr\" (inout_2) : \"0\" (inout_1));\n+\n+   back to\n+\n+     inout_2 = inout_1;\n+     asm (\"\": \"=mr\" (inout_2) : \"0\" (inout_2));  */\n+\n+static void\n+match_asm_constraints_1 (rtx insn, rtx *p_sets, int noutputs)\n+{\n+  int i;\n+  bool changed = false;\n+  rtx op = SET_SRC (p_sets[0]);\n+  int ninputs = ASM_OPERANDS_INPUT_LENGTH (op);\n+  rtvec inputs = ASM_OPERANDS_INPUT_VEC (op);\n+\n+  for (i = 0; i < ninputs; i++)\n+    {\n+      rtx input, output, insns;\n+      const char *constraint = ASM_OPERANDS_INPUT_CONSTRAINT (op, i);\n+      char *end;\n+      int match;\n+\n+      match = strtoul (constraint, &end, 10);\n+      if (end == constraint)\n+\tcontinue;\n+\n+      gcc_assert (match < noutputs);\n+      output = SET_DEST (p_sets[match]);\n+      input = RTVEC_ELT (inputs, i);\n+      if (rtx_equal_p (output, input)\n+\t  || (GET_MODE (input) != VOIDmode\n+\t      && GET_MODE (input) != GET_MODE (output)))\n+\tcontinue;\n+\n+      start_sequence ();\n+      emit_move_insn (copy_rtx (output), input);\n+      RTVEC_ELT (inputs, i) = copy_rtx (output);\n+      insns = get_insns ();\n+      end_sequence ();\n+\n+      emit_insn_before (insns, insn);\n+      changed = true;\n+    }\n+\n+  if (changed)\n+    df_insn_rescan (insn);\n+}\n+\n+static unsigned\n+rest_of_match_asm_constraints (void)\n+{\n+  basic_block bb;\n+  rtx insn, pat, *p_sets;\n+  int noutputs;\n+\n+  if (!cfun->has_asm_statement)\n+    return 0;\n+\n+  df_set_flags (DF_DEFER_INSN_RESCAN);\n+  FOR_EACH_BB (bb)\n+    {\n+      FOR_BB_INSNS (bb, insn)\n+\t{\n+\t  if (!INSN_P (insn))\n+\t    continue;\n+\n+\t  pat = PATTERN (insn);\n+\t  if (GET_CODE (pat) == PARALLEL)\n+\t    p_sets = &XVECEXP (pat, 0, 0), noutputs = XVECLEN (pat, 0);\n+\t  else if (GET_CODE (pat) == SET)\n+\t    p_sets = &PATTERN (insn), noutputs = 1;\n+\t  else\n+\t    continue;\n+\n+\t  if (GET_CODE (*p_sets) == SET\n+\t      && GET_CODE (SET_SRC (*p_sets)) == ASM_OPERANDS)\n+\t    match_asm_constraints_1 (insn, p_sets, noutputs);\n+\t }\n+    }\n+\n+  return TODO_df_finish;\n+}\n+\n+struct tree_opt_pass pass_match_asm_constraints =\n+{\n+  \"asmcons\",\t\t\t\t/* name */\n+  NULL,\t\t\t\t\t/* gate */\n+  rest_of_match_asm_constraints,\t/* execute */\n+  NULL,                                 /* sub */\n+  NULL,                                 /* next */\n+  0,                                    /* static_pass_number */\n+  0,\t\t\t\t\t/* tv_id */\n+  0,                                    /* properties_required */\n+  0,                                    /* properties_provided */\n+  0,                                    /* properties_destroyed */\n+  0,\t\t\t\t\t/* todo_flags_start */\n+  TODO_dump_func,                       /* todo_flags_finish */\n+  0                                     /* letter */\n+};\n \n \n #include \"gt-function.h\""}, {"sha": "0353983ac645b12bc6f44f1dcfedeaa0344ce880", "filename": "gcc/function.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d72314c4667d88f62059c0964ea37756676f29/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d72314c4667d88f62059c0964ea37756676f29/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=d8d72314c4667d88f62059c0964ea37756676f29", "patch": "@@ -414,6 +414,9 @@ struct function GTY(())\n   /* Nonzero if function being compiled has nonlocal gotos to parent\n      function.  */\n   unsigned int has_nonlocal_goto : 1;\n+  \n+  /* Nonzero if function being compiled has an asm statement.  */\n+  unsigned int has_asm_statement : 1;\n \n   /* Nonzero if the current function is a thunk, i.e., a lightweight\n      function implemented by the output_mi_thunk hook) that just\n@@ -517,6 +520,7 @@ extern int trampolines_created;\n #define current_function_has_nonlocal_label (cfun->has_nonlocal_label)\n #define current_function_calls_unwind_init (cfun->calls_unwind_init)\n #define current_function_has_nonlocal_goto (cfun->has_nonlocal_goto)\n+#define current_function_has_asm_statement (cfun->has_asm_statement)\n \n #define return_label (cfun->x_return_label)\n #define naked_return_label (cfun->x_naked_return_label)"}, {"sha": "48ea68e0b8c2ad5db6a160bed48921c50c28f708", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d72314c4667d88f62059c0964ea37756676f29/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d72314c4667d88f62059c0964ea37756676f29/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=d8d72314c4667d88f62059c0964ea37756676f29", "patch": "@@ -740,6 +740,7 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_stack_ptr_mod);\n       NEXT_PASS (pass_mode_switching);\n       NEXT_PASS (pass_see);\n+      NEXT_PASS (pass_match_asm_constraints);\n       NEXT_PASS (pass_sms);\n       NEXT_PASS (pass_sched);\n       NEXT_PASS (pass_subregs_of_mode_init);"}, {"sha": "2194a56f8cce64e4b55542194a7202f9c001b9f5", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d72314c4667d88f62059c0964ea37756676f29/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d72314c4667d88f62059c0964ea37756676f29/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=d8d72314c4667d88f62059c0964ea37756676f29", "patch": "@@ -1078,6 +1078,7 @@ expand_asm_operands (tree string, tree outputs, tree inputs,\n     if (real_output_rtx[i])\n       emit_move_insn (real_output_rtx[i], output_rtx[i]);\n \n+  cfun->has_asm_statement = 1;\n   free_temp_slots ();\n }\n "}, {"sha": "b597509854b26f6994add789d4090b0afcf28354", "filename": "gcc/testsuite/gcc.target/i386/pr21291.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d72314c4667d88f62059c0964ea37756676f29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr21291.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d72314c4667d88f62059c0964ea37756676f29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr21291.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr21291.c?ref=d8d72314c4667d88f62059c0964ea37756676f29", "patch": "@@ -3,7 +3,7 @@\n    6 registers that must not conflict.  Add to that the PIC register,\n    the frame pointer, and the stack pointer, and we've run out of\n    registers on 32-bit targets.  */\n-/* { dg-do compile { target { { ! ilp32 } || nonpic } } } */\n+/* { dg-do compile } */\n /* { dg-options \"-O\" } */\n \n typedef unsigned long bngdigit;"}, {"sha": "8838127a4402486d4ad5898f9509a2d56dd238a6", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d72314c4667d88f62059c0964ea37756676f29/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d72314c4667d88f62059c0964ea37756676f29/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=d8d72314c4667d88f62059c0964ea37756676f29", "patch": "@@ -390,6 +390,7 @@ extern struct tree_opt_pass pass_initialize_regs;\n extern struct tree_opt_pass pass_combine;\n extern struct tree_opt_pass pass_if_after_combine;\n extern struct tree_opt_pass pass_partition_blocks;\n+extern struct tree_opt_pass pass_match_asm_constraints;\n extern struct tree_opt_pass pass_regmove;\n extern struct tree_opt_pass pass_split_all_insns;\n extern struct tree_opt_pass pass_lower_subreg2;"}]}