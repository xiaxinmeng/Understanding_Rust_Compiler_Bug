{"sha": "5a298377cf1bf0883f295c66e2dcd8aa87b1038d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEyOTgzNzdjZjFiZjA4ODNmMjk1YzY2ZTJkY2Q4YWE4N2IxMDM4ZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-07-13T10:47:40Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-07-13T10:47:40Z"}, "message": "PR libstdc++/21193 (string & wstring)\n\n2005-07-13  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/21193 (string & wstring)\n\t* include/tr1/functional (hash<string>, hash<wstring>):\n\tReimplement using the FNV hash.\n\n\t* include/tr1/functional: Trivial formatting fixes.\n\nFrom-SVN: r101964", "tree": {"sha": "9f3e68604de2a2a4e881d651ab725eac3f077fbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f3e68604de2a2a4e881d651ab725eac3f077fbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a298377cf1bf0883f295c66e2dcd8aa87b1038d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a298377cf1bf0883f295c66e2dcd8aa87b1038d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a298377cf1bf0883f295c66e2dcd8aa87b1038d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a298377cf1bf0883f295c66e2dcd8aa87b1038d/comments", "author": null, "committer": null, "parents": [{"sha": "2824a5c3b11d3131ee7f95938a869339aa863e57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2824a5c3b11d3131ee7f95938a869339aa863e57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2824a5c3b11d3131ee7f95938a869339aa863e57"}], "stats": {"total": 115, "additions": 84, "deletions": 31}, "files": [{"sha": "18bd7701919843fad3907ba3cc7e3c282b5f0217", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a298377cf1bf0883f295c66e2dcd8aa87b1038d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a298377cf1bf0883f295c66e2dcd8aa87b1038d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5a298377cf1bf0883f295c66e2dcd8aa87b1038d", "patch": "@@ -1,3 +1,11 @@\n+2005-07-13  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/21193 (string & wstring)\n+\t* include/tr1/functional (hash<string>, hash<wstring>):\n+\tReimplement using the FNV hash.\n+\n+\t* include/tr1/functional: Trivial formatting fixes.\n+\n 2005-07-11  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/ostream.tcc (basic_ostream<>::operator<<(long),"}, {"sha": "6866357c864ded85fee946df2ac529ae736657cc", "filename": "libstdc++-v3/include/tr1/functional", "status": "modified", "additions": 76, "deletions": 31, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a298377cf1bf0883f295c66e2dcd8aa87b1038d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a298377cf1bf0883f295c66e2dcd8aa87b1038d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional?ref=5a298377cf1bf0883f295c66e2dcd8aa87b1038d", "patch": "@@ -1090,15 +1090,19 @@ namespace tr1\n #undef _GLIBCXX_JOIN2\n #undef _GLIBCXX_JOIN\n \n-// Definition of default hash function std::tr1::hash<>.  The types for\n-// which std::tr1::hash<T> is defined is in clause 6.3.3. of the PDTR.\n-\n-  template <typename T> struct hash;\n-\n-  #define tr1_hashtable_define_trivial_hash(T)                              \\\n-    template <> struct hash<T> {                                                    \\\n-      std::size_t operator()(T val) const { return static_cast<std::size_t>(val); } \\\n-    }                                                                       \\\n+  // Definition of default hash function std::tr1::hash<>.  The types for\n+  // which std::tr1::hash<T> is defined is in clause 6.3.3. of the PDTR.\n+  template<typename T>\n+    struct hash;\n+\n+#define tr1_hashtable_define_trivial_hash(T)            \\\n+  template<>                                            \\\n+    struct hash<T>                                      \\\n+    {                                                   \\\n+      std::size_t                                       \\\n+      operator()(T val) const                           \\\n+      { return static_cast<std::size_t>(val); }         \\\n+    }                                                     \n \n   tr1_hashtable_define_trivial_hash(bool);\n   tr1_hashtable_define_trivial_hash(char);\n@@ -1116,44 +1120,85 @@ namespace tr1\n   tr1_hashtable_define_trivial_hash(double);\n   tr1_hashtable_define_trivial_hash(long double);\n \n-  #undef tr1_hashtable_define_trivial_hash\n+#undef tr1_hashtable_define_trivial_hash\n+\n+  template<typename T>\n+    struct hash<T*>\n+    {\n+      std::size_t\n+      operator()(T* p) const\n+      { return reinterpret_cast<std::size_t>(p); }\n+    };\n+\n+  // Fowler / Noll / Vo (FNV) Hash (type FNV-1a)\n+  // (used by the next specializations of std::tr1::hash<>)\n \n-  template <typename T>\n-    struct hash<T*> {\n-      std::size_t operator()(T* p) const {\n-        return reinterpret_cast<std::size_t>(p);\n+  // Dummy generic implementation (for sizeof(size_t) != 4,8).\n+  template<std::size_t = sizeof(std::size_t)>\n+    struct Fnv_hash\n+    {\n+      static std::size_t\n+      hash(const char* first, std::size_t length)\n+      {\n+\tstd::size_t result = 0;\n+\tfor (; length > 0; --length)\n+\t  result = (result * 131) + *first++;\n+\treturn result;\n       }\n     };\n \n-  // ??? We can probably find a better hash function than this (i.e. one\n-  // that vectorizes better and that produces a more uniform distribution).\n+  template<>\n+    struct Fnv_hash<4>\n+    {\n+      static std::size_t\n+      hash(const char* first, std::size_t length)\n+      {\n+\tstd::size_t result = 2166136261UL;\n+\tfor (; length > 0; --length)\n+\t  {\n+\t    result ^= (std::size_t)*first++;\n+\t    result *= 16777619UL;\n+\t  }\n+\treturn result;\n+      }\n+    };\n+  \n+  template<>\n+    struct Fnv_hash<8>\n+    {\n+      static std::size_t\n+      hash(const char* first, std::size_t length)\n+      {\n+\tstd::size_t result = 14695981039346656037ULL;\n+\tfor (; length > 0; --length)\n+\t  {\n+\t    result ^= (std::size_t)*first++;\n+\t    result *= 1099511628211ULL;\n+\t  }\n+\treturn result;\n+      }\n+    };\n \n   // XXX String hash probably shouldn't be an inline member function,\n   // since it's nontrivial.  Once we have the framework for TR1 .cc\n   // files, this should go in one.\n-\n-  template <>\n+  template<>\n     struct hash<std::string>\n     {\n-      std::size_t operator()(const std::string& s) const\n-      {\n-        std::size_t result = 0;\n-        for (std::string::const_iterator i = s.begin(); i != s.end(); ++i)\n-          result = (result * 131) + *i;\n-        return result;\n-      }\n+      std::size_t\n+      operator()(const std::string& s) const\n+      { return Fnv_hash<>::hash(s.data(), s.length()); }\n     };\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n-  template <>\n+  template<>\n     struct hash<std::wstring>\n     {\n-      std::size_t operator()(const std::wstring& s) const\n+      std::size_t\n+      operator()(const std::wstring& s) const\n       {\n-        std::size_t result = 0;\n-        for (std::wstring::const_iterator i = s.begin(); i != s.end(); ++i)\n-          result = (result * 131) + *i;\n-        return result;\n+\treturn Fnv_hash<>::hash(reinterpret_cast<const char*>(s.data()),\n+\t\t\t\ts.length() * sizeof(wchar_t));\n       }\n     };\n #endif"}]}