{"sha": "dfffecb802681fbdb56629d3bdd96491ac660be0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZmZmVjYjgwMjY4MWZiZGI1NjYyOWQzYmRkOTY0OTFhYzY2MGJlMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-10T13:05:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-11T08:17:42Z"}, "message": "c++: Fix static initialization from <=>.\n\nConstant evaluation of genericize_spaceship produced a CONSTRUCTOR, which we\nthen wanted to bind to a reference, which we can't do.  So wrap the result\nin a TARGET_EXPR so we get something with an address.\n\nWe also need to handle treating the result of cxx_eval_binary_expression as\na glvalue for SPACESHIP_EXPR.\n\nMy earlier change to add uid_sensitive to maybe_constant_value was wrong; we\ndon't even look at the cache when manifestly_const_eval, and I failed to\nadjust the later call to cxx_eval_outermost_constant_expr.\n\ngcc/cp/ChangeLog\n2020-02-11  Jason Merrill  <jason@redhat.com>\n\n\tPR c++/93650\n\tPR c++/90691\n\t* constexpr.c (maybe_constant_value): Correct earlier change.\n\t(cxx_eval_binary_expression) [SPACESHIP_EXPR]: Pass lval through.\n\t* method.c (genericize_spaceship): Wrap result in TARGET_EXPR.", "tree": {"sha": "c39d43ce40c0895261f2d7993ac4b5a8c783bcba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c39d43ce40c0895261f2d7993ac4b5a8c783bcba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfffecb802681fbdb56629d3bdd96491ac660be0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfffecb802681fbdb56629d3bdd96491ac660be0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfffecb802681fbdb56629d3bdd96491ac660be0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfffecb802681fbdb56629d3bdd96491ac660be0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6ee556c7659877bb59b719f11ca2153e86ded59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6ee556c7659877bb59b719f11ca2153e86ded59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6ee556c7659877bb59b719f11ca2153e86ded59"}], "stats": {"total": 37, "additions": 30, "deletions": 7}, "files": [{"sha": "f4b04798d3c2afb0862b64ea8827481d505bf29f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfffecb802681fbdb56629d3bdd96491ac660be0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfffecb802681fbdb56629d3bdd96491ac660be0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dfffecb802681fbdb56629d3bdd96491ac660be0", "patch": "@@ -1,3 +1,11 @@\n+2020-02-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/93650\n+\tPR c++/90691\n+\t* constexpr.c (maybe_constant_value): Correct earlier change.\n+\t(cxx_eval_binary_expression) [SPACESHIP_EXPR]: Pass lval through.\n+\t* method.c (genericize_spaceship): Wrap result in TARGET_EXPR.\n+\n 2020-02-12  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/69448"}, {"sha": "bf7a2643003507d2d59def996481ab5f150fb1ea", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfffecb802681fbdb56629d3bdd96491ac660be0/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfffecb802681fbdb56629d3bdd96491ac660be0/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=dfffecb802681fbdb56629d3bdd96491ac660be0", "patch": "@@ -2834,7 +2834,7 @@ cxx_fold_pointer_plus_expression (const constexpr_ctx *ctx, tree t,\n \n static tree\n cxx_eval_binary_expression (const constexpr_ctx *ctx, tree t,\n-\t\t\t    bool /*lval*/,\n+\t\t\t    bool lval,\n \t\t\t    bool *non_constant_p, bool *overflow_p)\n {\n   tree r = NULL_TREE;\n@@ -2902,7 +2902,7 @@ cxx_eval_binary_expression (const constexpr_ctx *ctx, tree t,\n   else if (code == SPACESHIP_EXPR)\n     {\n       r = genericize_spaceship (type, lhs, rhs);\n-      r = cxx_eval_constant_expression (ctx, r, false, non_constant_p,\n+      r = cxx_eval_constant_expression (ctx, r, lval, non_constant_p,\n \t\t\t\t\toverflow_p);\n     }\n \n@@ -6686,13 +6686,11 @@ maybe_constant_value (tree t, tree decl, bool manifestly_const_eval,\n \t  r = unshare_expr_without_location (r);\n \t  protected_set_expr_location (r, EXPR_LOCATION (t));\n \t}\n-      if (r != t || TREE_CONSTANT (t) || !manifestly_const_eval)\n-\treturn r;\n-      /* If we cached this as non-constant and we need a constant value, try\n-\t again; we might have failed before due to UID_SENSITIVE.  */\n+      return r;\n     }\n \n-  r = cxx_eval_outermost_constant_expr (t, true, true, false, false, decl);\n+  r = cxx_eval_outermost_constant_expr (t, true, true, false, false,\n+\t\t\t\t\tdecl, uid_sensitive);\n   gcc_checking_assert (r == t\n \t\t       || CONVERT_EXPR_P (t)\n \t\t       || TREE_CODE (t) == VIEW_CONVERT_EXPR"}, {"sha": "cfc37bc1b17b213c2dcb2b65aa09e55848a193f7", "filename": "gcc/cp/method.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfffecb802681fbdb56629d3bdd96491ac660be0/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfffecb802681fbdb56629d3bdd96491ac660be0/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=dfffecb802681fbdb56629d3bdd96491ac660be0", "patch": "@@ -1075,6 +1075,9 @@ genericize_spaceship (tree type, tree op0, tree op1)\n   comp = fold_build2 (EQ_EXPR, boolean_type_node, op0, op1);\n   r = fold_build3 (COND_EXPR, type, comp, eq, r);\n \n+  /* Wrap the whole thing in a TARGET_EXPR like build_conditional_expr_1.  */\n+  r = get_target_expr (r);\n+\n   return r;\n }\n "}, {"sha": "02f92b10aef091e9517301cb81addd805f649ca8", "filename": "gcc/testsuite/g++.dg/cpp2a/spaceship-constexpr2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfffecb802681fbdb56629d3bdd96491ac660be0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-constexpr2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfffecb802681fbdb56629d3bdd96491ac660be0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-constexpr2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-constexpr2.C?ref=dfffecb802681fbdb56629d3bdd96491ac660be0", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/93650\n+// { dg-do compile { target c++2a } }\n+\n+namespace std {\n+  using type = enum _Ord { less };\n+  class strong_ordering {\n+    type _M_value;\n+    constexpr strong_ordering(_Ord) : _M_value() {}\n+    static const strong_ordering less;\n+    static strong_ordering equal;\n+    static strong_ordering greater;\n+  } constexpr strong_ordering::less(_Ord::less);\n+  auto v = 1 <=> 2;\n+}"}]}