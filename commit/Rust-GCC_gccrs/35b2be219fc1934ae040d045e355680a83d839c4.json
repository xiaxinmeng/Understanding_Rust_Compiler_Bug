{"sha": "35b2be219fc1934ae040d045e355680a83d839c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzViMmJlMjE5ZmMxOTM0YWUwNDBkMDQ1ZTM1NTY4MGE4M2Q4MzljNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-04-14T08:53:30Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-04-23T11:05:45Z"}, "message": "VEC_COND_EXPR code cleanup\n\nThis removes now unnecessary special-casings of VEC_COND_EXPRs after\nmaking its first operand a gimple value.\n\n2021-04-14  Richard Biener  <rguenther@suse.de>\n\n\t* genmatch.c (lower_cond): Remove VEC_COND_EXPR special-casing.\n\t(capture_info::capture_info): Likewise.\n\t(capture_info::walk_match): Likewise.\n\t(expr::gen_transform): Likewise.\n\t(dt_simplify::gen_1): Likewise.\n\t* gimple-match-head.c (maybe_resimplify_conditional_op):\n\tRemove VEC_COND_EXPR special-casing.\n\t(gimple_simplify): Likewise.\n\t* gimple.c (gimple_could_trap_p_1): Adjust.\n\t* tree-ssa-pre.c (compute_avail): Allow VEC_COND_EXPR\n\tto participate in PRE.", "tree": {"sha": "fc0d9490569f66db1b5ff3668c7671b772529e7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc0d9490569f66db1b5ff3668c7671b772529e7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35b2be219fc1934ae040d045e355680a83d839c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35b2be219fc1934ae040d045e355680a83d839c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35b2be219fc1934ae040d045e355680a83d839c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35b2be219fc1934ae040d045e355680a83d839c4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58ad6b2802592f1448eed48e8ad4e0e87985cecb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58ad6b2802592f1448eed48e8ad4e0e87985cecb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58ad6b2802592f1448eed48e8ad4e0e87985cecb"}], "stats": {"total": 45, "additions": 20, "deletions": 25}, "files": [{"sha": "5db1d969688cd9ec4771f04ed02e8206ffbcf98c", "filename": "gcc/genmatch.c", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b2be219fc1934ae040d045e355680a83d839c4/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b2be219fc1934ae040d045e355680a83d839c4/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=35b2be219fc1934ae040d045e355680a83d839c4", "patch": "@@ -1210,7 +1210,7 @@ lower_opt (simplify *s, vec<simplify *>& simplifiers)\n     }\n }\n \n-/* Lower the compare operand of COND_EXPRs and VEC_COND_EXPRs to a\n+/* Lower the compare operand of COND_EXPRs to a\n    GENERIC and a GIMPLE variant.  */\n \n static vec<operand *>\n@@ -1257,8 +1257,7 @@ lower_cond (operand *o)\n       /* If this is a COND with a captured expression or an\n          expression with two operands then also match a GENERIC\n \t form on the compare.  */\n-      if ((*e->operation == COND_EXPR\n-\t   || *e->operation == VEC_COND_EXPR)\n+      if (*e->operation == COND_EXPR\n \t  && ((is_a <capture *> (e->ops[0])\n \t       && as_a <capture *> (e->ops[0])->what\n \t       && is_a <expr *> (as_a <capture *> (e->ops[0])->what)\n@@ -1296,7 +1295,7 @@ lower_cond (operand *o)\n   return ro;\n }\n \n-/* Lower the compare operand of COND_EXPRs and VEC_COND_EXPRs to a\n+/* Lower the compare operand of COND_EXPRs to a\n    GENERIC and a GIMPLE variant.  */\n \n static void\n@@ -2132,9 +2131,7 @@ capture_info::capture_info (simplify *s, operand *result, bool gimple_)\n \t\t(i != 0 && *e->operation == COND_EXPR)\n \t\t|| *e->operation == TRUTH_ANDIF_EXPR\n \t\t|| *e->operation == TRUTH_ORIF_EXPR,\n-\t\ti == 0\n-\t\t&& (*e->operation == COND_EXPR\n-\t\t    || *e->operation == VEC_COND_EXPR));\n+\t\ti == 0 && *e->operation == COND_EXPR);\n \n   walk_result (s->result, false, result);\n }\n@@ -2197,8 +2194,7 @@ capture_info::walk_match (operand *o, unsigned toplevel_arg,\n \t\t   || *e->operation == TRUTH_ORIF_EXPR)\n \t    cond_p = true;\n \t  if (i == 0\n-\t      && (*e->operation == COND_EXPR\n-\t\t  || *e->operation == VEC_COND_EXPR))\n+\t      && *e->operation == COND_EXPR)\n \t    expr_cond_p = true;\n \t  walk_match (e->ops[i], toplevel_arg, cond_p, expr_cond_p);\n \t}\n@@ -2494,8 +2490,7 @@ expr::gen_transform (FILE *f, int indent, const char *dest, bool gimple,\n \t\t\t    i == 0 ? NULL : op0type);\n       ops[i]->gen_transform (f, indent, dest1, gimple, depth + 1, optype1,\n \t\t\t     cinfo, indexes,\n-\t\t\t     (*opr == COND_EXPR\n-\t\t\t      || *opr == VEC_COND_EXPR) && i == 0 ? 1 : 2);\n+\t\t\t     *opr == COND_EXPR && i == 0 ? 1 : 2);\n     }\n \n   const char *opr_name;\n@@ -3417,8 +3412,7 @@ dt_simplify::gen_1 (FILE *f, int indent, bool gimple, operand *result)\n \t\t into COND_EXPRs.  */\n \t      int cond_handling = 0;\n \t      if (!is_predicate)\n-\t\tcond_handling = ((*opr == COND_EXPR\n-\t\t\t\t  || *opr == VEC_COND_EXPR) && j == 0) ? 1 : 2;\n+\t\tcond_handling = (*opr == COND_EXPR && j == 0) ? 1 : 2;\n \t      e->ops[j]->gen_transform (f, indent, dest, true, 1, optype,\n \t\t\t\t\t&cinfo, indexes, cond_handling);\n \t    }"}, {"sha": "84fbaefd76201c1f494ab661d16938ff6c497c10", "filename": "gcc/gimple-match-head.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b2be219fc1934ae040d045e355680a83d839c4/gcc%2Fgimple-match-head.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b2be219fc1934ae040d045e355680a83d839c4/gcc%2Fgimple-match-head.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-match-head.c?ref=35b2be219fc1934ae040d045e355680a83d839c4", "patch": "@@ -147,10 +147,10 @@ maybe_resimplify_conditional_op (gimple_seq *seq, gimple_match_op *res_op,\n       tree_code op_code = (tree_code) res_op->code;\n       bool op_could_trap;\n \n-      /* COND_EXPR and VEC_COND_EXPR will trap if, and only if, the condition\n+      /* COND_EXPR will trap if, and only if, the condition\n \t traps and hence we have to check this.  For all other operations, we\n \t don't need to consider the operands.  */\n-      if (op_code == COND_EXPR || op_code == VEC_COND_EXPR)\n+      if (op_code == COND_EXPR)\n \top_could_trap = generic_expr_could_trap_p (res_op->ops[0]);\n       else\n \top_could_trap = operation_could_trap_p ((tree_code) res_op->code,\n@@ -961,10 +961,9 @@ gimple_simplify (gimple *stmt, gimple_match_op *res_op, gimple_seq *seq,\n \t    {\n \t      bool valueized = false;\n \t      tree rhs1 = gimple_assign_rhs1 (stmt);\n-\t      /* If this is a [VEC_]COND_EXPR first try to simplify an\n+\t      /* If this is a COND_EXPR first try to simplify an\n \t\t embedded GENERIC condition.  */\n-\t      if (code == COND_EXPR\n-\t\t  || code == VEC_COND_EXPR)\n+\t      if (code == COND_EXPR)\n \t\t{\n \t\t  if (COMPARISON_CLASS_P (rhs1))\n \t\t    {"}, {"sha": "d067656d3150546e59ad783303c38d73ce17be12", "filename": "gcc/gimple.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b2be219fc1934ae040d045e355680a83d839c4/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b2be219fc1934ae040d045e355680a83d839c4/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=35b2be219fc1934ae040d045e355680a83d839c4", "patch": "@@ -2158,9 +2158,12 @@ gimple_could_trap_p_1 (gimple *s, bool include_mem, bool include_stores)\n     case GIMPLE_ASSIGN:\n       op = gimple_assign_rhs_code (s);\n \n-      /* For COND_EXPR and VEC_COND_EXPR only the condition may trap.  */\n-      if (op == COND_EXPR || op == VEC_COND_EXPR)\n+      /* For COND_EXPR only the condition may trap.  */\n+      if (op == COND_EXPR)\n \treturn tree_could_trap_p (gimple_assign_rhs1 (s));\n+      /* A VEC_COND_EXPR cannot trap.  */\n+      else if (op == VEC_COND_EXPR)\n+\treturn false;\n \n       /* For comparisons we need to check rhs operand types instead of rhs type\n          (which is BOOLEAN_TYPE).  */"}, {"sha": "2803b58430e76903c2dfc9b340a950b12497b8c7", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b2be219fc1934ae040d045e355680a83d839c4/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b2be219fc1934ae040d045e355680a83d839c4/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=35b2be219fc1934ae040d045e355680a83d839c4", "patch": "@@ -4038,11 +4038,10 @@ compute_avail (void)\n \t\t      enum tree_code code = gimple_assign_rhs_code (stmt);\n \t\t      vn_nary_op_t nary;\n \n-\t\t      /* COND_EXPR and VEC_COND_EXPR are awkward in\n-\t\t\t that they contain an embedded complex expression.\n-\t\t\t Don't even try to shove those through PRE.  */\n-\t\t      if (code == COND_EXPR\n-\t\t\t  || code == VEC_COND_EXPR)\n+\t\t      /* COND_EXPR is awkward in that it contains an\n+\t\t\t embedded complex expression.\n+\t\t\t Don't even try to shove it through PRE.  */\n+\t\t      if (code == COND_EXPR)\n \t\t\tcontinue;\n \n \t\t      vn_nary_op_lookup_stmt (stmt, &nary);"}]}