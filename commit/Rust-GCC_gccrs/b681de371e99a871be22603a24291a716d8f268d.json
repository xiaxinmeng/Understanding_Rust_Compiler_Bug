{"sha": "b681de371e99a871be22603a24291a716d8f268d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY4MWRlMzcxZTk5YTg3MWJlMjI2MDNhMjQyOTFhNzE2ZDhmMjY4ZA==", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2020-05-17T17:29:36Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:13Z"}, "message": "Reuse typeComparison checks in assignments and expressions", "tree": {"sha": "27340442a5d696e886da6a633dbd16ee2e85e866", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27340442a5d696e886da6a633dbd16ee2e85e866"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b681de371e99a871be22603a24291a716d8f268d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b681de371e99a871be22603a24291a716d8f268d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b681de371e99a871be22603a24291a716d8f268d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b681de371e99a871be22603a24291a716d8f268d/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89f624877de5431ff4229b5078d56f3cd548a5dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89f624877de5431ff4229b5078d56f3cd548a5dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89f624877de5431ff4229b5078d56f3cd548a5dd"}], "stats": {"total": 87, "additions": 26, "deletions": 61}, "files": [{"sha": "8d535679e94831d39413bd2ea63c72abba060972", "filename": "gcc/rust/analysis/rust-resolution.cc", "status": "modified", "additions": 25, "deletions": 60, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b681de371e99a871be22603a24291a716d8f268d/gcc%2Frust%2Fanalysis%2Frust-resolution.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b681de371e99a871be22603a24291a716d8f268d/gcc%2Frust%2Fanalysis%2Frust-resolution.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-resolution.cc?ref=b681de371e99a871be22603a24291a716d8f268d", "patch": "@@ -66,11 +66,27 @@ TypeResolution::go ()\n }\n \n bool\n-TypeResolution::typesAreCompatible (std::string &lhs, std::string &rhs) const\n+TypeResolution::typesAreCompatible (AST::Type *lhs, AST::Type *rhs,\n+\t\t\t\t    Location locus)\n {\n+  lhs->accept_vis (*this);\n+  rhs->accept_vis (*this);\n+\n+  auto rhsTypeStr = typeComparisonBuffer.back ();\n+  typeComparisonBuffer.pop_back ();\n+  auto lhsTypeStr = typeComparisonBuffer.back ();\n+  typeComparisonBuffer.pop_back ();\n+\n   // FIXME this needs to handle the cases of an i8 going into an i32 which is\n   // compatible\n-  return lhs.compare (rhs) == 0;\n+  if (lhsTypeStr.compare (rhsTypeStr))\n+    {\n+      rust_error_at (locus, \"E0308: expected: %s, found %s\",\n+\t\t     lhsTypeStr.c_str (), rhsTypeStr.c_str ());\n+      return false;\n+    }\n+\n+  return true;\n }\n \n void\n@@ -256,34 +272,7 @@ TypeResolution::visit (AST::ArithmeticOrLogicalExpr &expr)\n   // scope will require knowledge of the type\n \n   // do the lhsType and the rhsType match\n-  before = typeComparisonBuffer.size ();\n-  lhsType->accept_vis (*this);\n-  if (typeComparisonBuffer.size () <= before)\n-    {\n-      rust_error_at (expr.locus, \"Failed to unwrap type for lhs\");\n-      return;\n-    }\n-\n-  before = typeComparisonBuffer.size ();\n-  rhsType->accept_vis (*this);\n-  if (typeComparisonBuffer.size () <= before)\n-    {\n-      rust_error_at (expr.locus, \"Failed to unwrap type for rhs\");\n-      return;\n-    }\n-\n-  auto rhsTypeStr = typeComparisonBuffer.back ();\n-  typeComparisonBuffer.pop_back ();\n-  auto lhsTypeStr = typeComparisonBuffer.back ();\n-  typeComparisonBuffer.pop_back ();\n-\n-  if (!typesAreCompatible (lhsTypeStr, rhsTypeStr))\n-    {\n-      rust_error_at (expr.right_expr->get_locus_slow (),\n-\t\t     \"E0308: expected: %s, found %s\", lhsTypeStr.c_str (),\n-\t\t     rhsTypeStr.c_str ());\n-      return;\n-    }\n+  typesAreCompatible (lhsType, rhsType, expr.right_expr->get_locus_slow ());\n }\n \n void\n@@ -326,34 +315,7 @@ TypeResolution::visit (AST::AssignmentExpr &expr)\n   // scope will require knowledge of the type\n \n   // do the lhsType and the rhsType match\n-  before = typeComparisonBuffer.size ();\n-  lhsType->accept_vis (*this);\n-  if (typeComparisonBuffer.size () <= before)\n-    {\n-      rust_error_at (expr.locus, \"Failed to unwrap type for lhs\");\n-      return;\n-    }\n-\n-  before = typeComparisonBuffer.size ();\n-  rhsType->accept_vis (*this);\n-  if (typeComparisonBuffer.size () <= before)\n-    {\n-      rust_error_at (expr.locus, \"Failed to unwrap type for rhs\");\n-      return;\n-    }\n-\n-  auto rhsTypeStr = typeComparisonBuffer.back ();\n-  typeComparisonBuffer.pop_back ();\n-  auto lhsTypeStr = typeComparisonBuffer.back ();\n-  typeComparisonBuffer.pop_back ();\n-\n-  if (!typesAreCompatible (lhsTypeStr, rhsTypeStr))\n-    {\n-      rust_error_at (expr.right_expr->get_locus_slow (),\n-\t\t     \"E0308: expected: %s, found %s\", lhsTypeStr.c_str (),\n-\t\t     rhsTypeStr.c_str ());\n-      return;\n-    }\n+  typesAreCompatible (lhsType, rhsType, expr.right_expr->get_locus_slow ());\n }\n \n void\n@@ -810,8 +772,11 @@ TypeResolution::visit (AST::LetStmt &stmt)\n \n   if (stmt.has_type () && stmt.has_init_expr ())\n     {\n-      auto declaredTyped = stmt.type.get ();\n-      // TODO compare this type to the inferred type to ensure they match\n+      if (!typesAreCompatible (stmt.type.get (), inferedType,\n+\t\t\t       stmt.init_expr->get_locus_slow ()))\n+\t{\n+\t  return;\n+\t}\n     }\n   else if (stmt.has_type () && !stmt.has_init_expr ())\n     {"}, {"sha": "51b2d6a0937c1be3ca4186fff83764bce46ca290", "filename": "gcc/rust/analysis/rust-resolution.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b681de371e99a871be22603a24291a716d8f268d/gcc%2Frust%2Fanalysis%2Frust-resolution.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b681de371e99a871be22603a24291a716d8f268d/gcc%2Frust%2Fanalysis%2Frust-resolution.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-resolution.h?ref=b681de371e99a871be22603a24291a716d8f268d", "patch": "@@ -225,7 +225,7 @@ class TypeResolution : public AST::ASTVisitor\n \n   bool go ();\n \n-  bool typesAreCompatible (std::string &lhs, std::string &rhs) const;\n+  bool typesAreCompatible (AST::Type *lhs, AST::Type *rhs, Location locus);\n \n   Scope<AST::Type *> scope;\n   Scope<AST::Type *> typeScope;"}]}