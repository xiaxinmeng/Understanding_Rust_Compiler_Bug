{"sha": "92ef5cf99970d490ebdd508c774b86bd4a821887", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJlZjVjZjk5OTcwZDQ5MGViZGQ1MDhjNzc0Yjg2YmQ0YTgyMTg4Nw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-03-22T23:04:24Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-03-22T23:04:24Z"}, "message": "re PR other/23572 (No warning for assigning a value to a 'float' variable that overflows with option -Wextra)\n\n2007-03-22  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR other/23572\n\t* c-lex.c (interpret_float): On overflow, emit pedantic warning if\n\tinfinities not supported, otherwise emit warning if -Woverflow. On\n\tunderflow, emit warning if -Woverflow.\n\t* real.c (real_from_string): Return -1 if underflow, +1 if overflow\n\tand 0 otherwise.\n\t* real.h (real_from_string): Update declaration\ntestsuite/\n\t* gcc.dg/float-range-4.c: New.\n\t* gcc.dg/float-range-1.c: Update. Test for a warning.\n\t* gcc.dg/float-range-3.c: New.\n\t* gcc.dg/float-range-5.c: New.\n\nFrom-SVN: r123137", "tree": {"sha": "72ccc17238a98a5218797e0019368cff25e58e57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72ccc17238a98a5218797e0019368cff25e58e57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92ef5cf99970d490ebdd508c774b86bd4a821887", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92ef5cf99970d490ebdd508c774b86bd4a821887", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92ef5cf99970d490ebdd508c774b86bd4a821887", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92ef5cf99970d490ebdd508c774b86bd4a821887/comments", "author": null, "committer": null, "parents": [{"sha": "efa591c57ef118d3e21c0a1550a31fb00d75407e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efa591c57ef118d3e21c0a1550a31fb00d75407e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efa591c57ef118d3e21c0a1550a31fb00d75407e"}], "stats": {"total": 190, "additions": 171, "deletions": 19}, "files": [{"sha": "0ce3c385cf7b7a0d63159be17d428ea4b43c6f0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ef5cf99970d490ebdd508c774b86bd4a821887/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ef5cf99970d490ebdd508c774b86bd4a821887/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92ef5cf99970d490ebdd508c774b86bd4a821887", "patch": "@@ -1,3 +1,13 @@\n+2007-03-22  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR other/23572\n+\t* c-lex.c (interpret_float): On overflow, emit pedantic warning if\n+\tinfinities not supported, otherwise emit warning if -Woverflow. On\n+\tunderflow, emit warning if -Woverflow.\n+\t* real.c (real_from_string): Return -1 if underflow, +1 if overflow\n+\tand 0 otherwise.\n+\t* real.h (real_from_string): Update declaration\n+\t\n 2007-03-22  Kai Tietz  <kai.tietz@onevision.com>\n \t    Richard Henderson  <rth@redhat.com>\n "}, {"sha": "a89643c6046b34878a2111612bb39667785e38f1", "filename": "gcc/c-lex.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ef5cf99970d490ebdd508c774b86bd4a821887/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ef5cf99970d490ebdd508c774b86bd4a821887/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=92ef5cf99970d490ebdd508c774b86bd4a821887", "patch": "@@ -681,11 +681,23 @@ interpret_float (const cpp_token *token, unsigned int flags)\n \n   /* Both C and C++ require a diagnostic for a floating constant\n      outside the range of representable values of its type.  Since we\n-     have __builtin_inf* to produce an infinity, it might now be\n-     appropriate for this to be a mandatory pedwarn rather than\n-     conditioned on -pedantic.  */\n-  if (REAL_VALUE_ISINF (real) && pedantic)\n-    pedwarn (\"floating constant exceeds range of %qT\", type);\n+     have __builtin_inf* to produce an infinity, this is now a\n+     mandatory pedwarn if the target does not support infinities.  */\n+  if (REAL_VALUE_ISINF (real)) \n+    {\n+      if (!MODE_HAS_INFINITIES (TYPE_MODE (type)))\n+\tpedwarn (\"floating constant exceeds range of %qT\", type);\n+      else\n+\twarning (OPT_Woverflow, \"floating constant exceeds range of %qT\", type);\n+    }\n+  /* We also give a warning if the value underflows.  */\n+  else if (REAL_VALUES_EQUAL (real, dconst0))\n+    {\n+      REAL_VALUE_TYPE realvoidmode;\n+      int overflow = real_from_string (&realvoidmode, copy);\n+      if (overflow < 0 || !REAL_VALUES_EQUAL (realvoidmode, dconst0)) \n+\twarning (OPT_Woverflow, \"floating constant truncated to zero\");\n+    }\n \n   /* Create a node with determined type and value.  */\n   value = build_real (type, real);"}, {"sha": "2e288187b77c4ddae0139d71a902ac8381e29b1e", "filename": "gcc/real.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ef5cf99970d490ebdd508c774b86bd4a821887/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ef5cf99970d490ebdd508c774b86bd4a821887/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=92ef5cf99970d490ebdd508c774b86bd4a821887", "patch": "@@ -1791,9 +1791,10 @@ real_to_hexadecimal (char *str, const REAL_VALUE_TYPE *r, size_t buf_size,\n }\n \n /* Initialize R from a decimal or hexadecimal string.  The string is\n-   assumed to have been syntax checked already.  */\n+   assumed to have been syntax checked already.  Return -1 if the\n+   value underflows, +1 if overflows, and 0 otherwise. */\n \n-void\n+int\n real_from_string (REAL_VALUE_TYPE *r, const char *str)\n {\n   int exp = 0;\n@@ -1865,7 +1866,7 @@ real_from_string (REAL_VALUE_TYPE *r, const char *str)\n \n       /* If the mantissa is zero, ignore the exponent.  */\n       if (!cmp_significand_0 (r))\n-\tgoto underflow;\n+\tgoto is_a_zero;\n \n       if (*str == 'p' || *str == 'P')\n \t{\n@@ -1941,7 +1942,7 @@ real_from_string (REAL_VALUE_TYPE *r, const char *str)\n \n       /* If the mantissa is zero, ignore the exponent.  */\n       if (r->cl == rvc_zero)\n-\tgoto underflow;\n+\tgoto is_a_zero;\n \n       if (*str == 'e' || *str == 'E')\n \t{\n@@ -1981,15 +1982,19 @@ real_from_string (REAL_VALUE_TYPE *r, const char *str)\n     }\n \n   r->sign = sign;\n-  return;\n+  return 0;\n+\n+ is_a_zero:\n+  get_zero (r, sign);\n+  return 0;\n \n  underflow:\n   get_zero (r, sign);\n-  return;\n+  return -1;\n \n  overflow:\n   get_inf (r, sign);\n-  return;\n+  return 1;\n }\n \n /* Legacy.  Similar, but return the result directly.  */"}, {"sha": "eab53d7dadf6a3084ae138641823ca8b22c7bb12", "filename": "gcc/real.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ef5cf99970d490ebdd508c774b86bd4a821887/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ef5cf99970d490ebdd508c774b86bd4a821887/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=92ef5cf99970d490ebdd508c774b86bd4a821887", "patch": "@@ -224,8 +224,9 @@ extern HOST_WIDE_INT real_to_integer (const REAL_VALUE_TYPE *);\n extern void real_to_integer2 (HOST_WIDE_INT *, HOST_WIDE_INT *,\n \t\t\t      const REAL_VALUE_TYPE *);\n \n-/* Initialize R from a decimal or hexadecimal string.  */\n-extern void real_from_string (REAL_VALUE_TYPE *, const char *);\n+/* Initialize R from a decimal or hexadecimal string.  Return -1 if\n+   the value underflows, +1 if overflows, and 0 otherwise.  */\n+extern int real_from_string (REAL_VALUE_TYPE *, const char *);\n /* Wrapper to allow different internal representation for decimal floats. */\n extern void real_from_string3 (REAL_VALUE_TYPE *, const char *, enum machine_mode);\n "}, {"sha": "a5f2623e291e6ca21b4bb3342a42231480971169", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ef5cf99970d490ebdd508c774b86bd4a821887/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ef5cf99970d490ebdd508c774b86bd4a821887/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=92ef5cf99970d490ebdd508c774b86bd4a821887", "patch": "@@ -1,3 +1,11 @@\n+2007-03-22  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR other/23572\n+\t* gcc.dg/float-range-4.c: New.\n+\t* gcc.dg/float-range-1.c: Update. Test for a warning.\n+\t* gcc.dg/float-range-3.c: New.\n+\t* gcc.dg/float-range-5.c: New.\n+\t\n 2007-03-22  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR fortran/31262"}, {"sha": "386d75dccd4bbfdb3911c4b604993b4273e6db54", "filename": "gcc/testsuite/gcc.dg/float-range-1.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ef5cf99970d490ebdd508c774b86bd4a821887/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ef5cf99970d490ebdd508c774b86bd4a821887/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-1.c?ref=92ef5cf99970d490ebdd508c774b86bd4a821887", "patch": "@@ -1,13 +1,14 @@\n /* Floating constants outside the range of their type should receive a\n-   pedwarn, not a warning.  */\n+   just a warning if the target supports infinities. Otherwise, a\n+   pedwarn should be produced.  */\n /* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n /* { dg-do compile } */\n-/* { dg-options \"-ansi -pedantic-errors\" } */\n+/* { dg-options \"-ansi -pedantic-errors -Woverflow\" } */\n \n void\n f (void)\n {\n-  float a = 1e+100000000f; /* { dg-error \"error: floating constant exceeds range of 'float'\" } */\n-  double b = 1e+100000000; /* { dg-error \"error: floating constant exceeds range of 'double'\" } */\n-  long double c = 1e+100000000l; /* { dg-error \"error: floating constant exceeds range of 'long double'\" } */\n+  float a = 1e+100000000f; /* { dg-warning \"warning: floating constant exceeds range of 'float'\" \"\" } */\n+  double b = 1e+100000000; /* { dg-warning \"warning: floating constant exceeds range of 'double'\" } */\n+  long double c = 1e+100000000l; /* { dg-warning \"warning: floating constant exceeds range of 'long double'\" } */\n }"}, {"sha": "c737d8a972460abbd424fe7d1b9f1470650001c3", "filename": "gcc/testsuite/gcc.dg/float-range-3.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ef5cf99970d490ebdd508c774b86bd4a821887/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ef5cf99970d490ebdd508c774b86bd4a821887/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-3.c?ref=92ef5cf99970d490ebdd508c774b86bd4a821887", "patch": "@@ -0,0 +1,38 @@\n+/* PR 23572 : warnings for out of range floating-point constants.  */\n+/* { dg-compile } */\n+/* { dg-options \"-std=c99\" } */\n+#include <math.h>\n+\n+void overflow(void)\n+{\n+  float f1 = 3.5E+38f;  /* { dg-warning \"warning: floating constant exceeds range\" } */\n+  float f2 = -3.5E+38f; /* { dg-warning \"warning: floating constant exceeds range\" } */\n+  float f3 = FP_INFINITE;\n+  float f4 = -FP_INFINITE;\n+\n+  double d1 = 1.9E+308;  /* { dg-warning \"warning: floating constant exceeds range\" } */\n+  double d2 = -1.9E+308; /* { dg-warning \"warning: floating constant exceeds range\" } */\n+  double d3 = FP_INFINITE;\n+  double d4 = -FP_INFINITE;\n+}\n+\n+void underflow(void)\n+{\n+  float f11 = 3.3E-10000000000000000000f;  /* { dg-warning \"warning: floating constant truncated to zero\" } */\n+  float f22 = -3.3E-10000000000000000000f; /* { dg-warning \"warning: floating constant truncated to zero\" } */\n+  float f1 = 3.3E-46f;  /* { dg-warning \"warning: floating constant truncated to zero\" } */\n+  float f2 = -3.3E-46f; /* { dg-warning \"warning: floating constant truncated to zero\" } */\n+  float f3 = 0;\n+  float f4 = -0;\n+  float f5 = 0.0;\n+  float f6 = -0.0;\n+\n+  double d11 = 3.3E-10000000000000000000;  /* { dg-warning \"warning: floating constant truncated to zero\" } */\n+  double d22 = -3.3E-10000000000000000000; /* { dg-warning \"warning: floating constant truncated to zero\" } */\n+  double d1 = 1.4E-325;  /* { dg-warning \"warning: floating constant truncated to zero\" } */\n+  double d2 = -1.4E-325; /* { dg-warning \"warning: floating constant truncated to zero\" } */\n+  double d3 = 0;\n+  double d4 = -0;\n+  double d5 = 0.0;\n+  double d6 = -0.0;\n+}"}, {"sha": "5607719ac995be7ad96da1903b9d005f3d985629", "filename": "gcc/testsuite/gcc.dg/float-range-4.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ef5cf99970d490ebdd508c774b86bd4a821887/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ef5cf99970d490ebdd508c774b86bd4a821887/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-4.c?ref=92ef5cf99970d490ebdd508c774b86bd4a821887", "patch": "@@ -0,0 +1,38 @@\n+/* PR 23572 : warnings for out of range floating-point constants.  */\n+/* { dg-compile } */\n+/* { dg-options \"-Wno-overflow -std=c99\" } */\n+#include <math.h>\n+\n+void overflow(void)\n+{\n+  float f1 = 3.5E+38f;  \n+  float f2 = -3.5E+38f; \n+  float f3 = FP_INFINITE;\n+  float f4 = -FP_INFINITE;\n+\n+  double d1 = 1.9E+308; \n+  double d2 = -1.9E+308;\n+  double d3 = FP_INFINITE;\n+  double d4 = -FP_INFINITE;\n+}\n+\n+void underflow(void)\n+{\n+  float f11 = 3.3E-10000000000000000000f;\n+  float f22 = -3.3E-10000000000000000000f;\n+  float f1 = 3.3E-46f;  \n+  float f2 = -3.3E-46f; \n+  float f3 = 0;\n+  float f4 = -0;\n+  float f5 = 0.0;\n+  float f6 = -0.0;\n+\n+  double d11 = 3.3E-10000000000000000000;\n+  double d22 = -3.3E-10000000000000000000;\n+  double d1 = 1.4E-325; \n+  double d2 = -1.4E-325;\n+  double d3 = 0;\n+  double d4 = -0;\n+  double d5 = 0.0;\n+  double d6 = -0.0;\n+}"}, {"sha": "a19bd5fa3ad771083b9a204aa89a1764c6cec759", "filename": "gcc/testsuite/gcc.dg/float-range-5.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ef5cf99970d490ebdd508c774b86bd4a821887/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ef5cf99970d490ebdd508c774b86bd4a821887/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-5.c?ref=92ef5cf99970d490ebdd508c774b86bd4a821887", "patch": "@@ -0,0 +1,39 @@\n+/* PR 23572 : warnings for out of range floating-point constants \n+   Test that they are NOT pedantic warnings.  */\n+/* { dg-compile } */\n+/* { dg-options \"-pedantic-errors -std=c99\" } */\n+#include <math.h>\n+\n+void overflow(void)\n+{\n+  float f1 = 3.5E+38f;  /* { dg-warning \"warning: floating constant exceeds range\" } */\n+  float f2 = -3.5E+38f; /* { dg-warning \"warning: floating constant exceeds range\" } */\n+  float f3 = FP_INFINITE;\n+  float f4 = -FP_INFINITE;\n+\n+  double d1 = 1.9E+308;  /* { dg-warning \"warning: floating constant exceeds range\" } */\n+  double d2 = -1.9E+308; /* { dg-warning \"warning: floating constant exceeds range\" } */\n+  double d3 = FP_INFINITE;\n+  double d4 = -FP_INFINITE;\n+}\n+\n+void underflow(void)\n+{\n+  float f11 = 3.3E-10000000000000000000f;  /* { dg-warning \"warning: floating constant truncated to zero\" } */\n+  float f22 = -3.3E-10000000000000000000f; /* { dg-warning \"warning: floating constant truncated to zero\" } */\n+  float f1 = 3.3E-46f;  /* { dg-warning \"warning: floating constant truncated to zero\" } */\n+  float f2 = -3.3E-46f; /* { dg-warning \"warning: floating constant truncated to zero\" } */\n+  float f3 = 0;\n+  float f4 = -0;\n+  float f5 = 0.0;\n+  float f6 = -0.0;\n+\n+  double d11 = 3.3E-10000000000000000000;  /* { dg-warning \"warning: floating constant truncated to zero\" } */\n+  double d22 = -3.3E-10000000000000000000; /* { dg-warning \"warning: floating constant truncated to zero\" } */\n+  double d1 = 1.4E-325;  /* { dg-warning \"warning: floating constant truncated to zero\" } */\n+  double d2 = -1.4E-325; /* { dg-warning \"warning: floating constant truncated to zero\" } */\n+  double d3 = 0;\n+  double d4 = -0;\n+  double d5 = 0.0;\n+  double d6 = -0.0;\n+}"}]}