{"sha": "9c8fad3381fa5637089c3892376ac0219c0e886d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM4ZmFkMzM4MWZhNTYzNzA4OWMzODkyMzc2YWMwMjE5YzBlODg2ZA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@redhat.com", "date": "2001-01-09T02:40:18Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2001-01-09T02:40:18Z"}, "message": "sched-rgn.c (BITSET_ADD, [...]): Cast 1 to unsigned HOST_WIDE_INT before left shift.\n\n\t* sched-rgn.c (BITSET_ADD, BITSET_REMOVE, bitset_member): Cast\n\t1 to unsigned HOST_WIDE_INT before left shift.\n\nFrom-SVN: r38813", "tree": {"sha": "0df736169c709914c9d2c74f115a75bbd15ac55d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0df736169c709914c9d2c74f115a75bbd15ac55d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c8fad3381fa5637089c3892376ac0219c0e886d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c8fad3381fa5637089c3892376ac0219c0e886d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c8fad3381fa5637089c3892376ac0219c0e886d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c8fad3381fa5637089c3892376ac0219c0e886d/comments", "author": null, "committer": null, "parents": [{"sha": "18eb26d4fe0da014a95cd5fb62c18c24238cfa4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18eb26d4fe0da014a95cd5fb62c18c24238cfa4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18eb26d4fe0da014a95cd5fb62c18c24238cfa4c"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "7c07caf0c7dc7edc15fe64987f134e95937ae55c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c8fad3381fa5637089c3892376ac0219c0e886d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c8fad3381fa5637089c3892376ac0219c0e886d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c8fad3381fa5637089c3892376ac0219c0e886d", "patch": "@@ -1,3 +1,8 @@\n+2000-01-08  Jim Wilson  <wilson@redhat.com>\n+\n+\t* sched-rgn.c (BITSET_ADD, BITSET_REMOVE, bitset_member): Cast\n+\t1 to unsigned HOST_WIDE_INT before left shift.\n+\n 2001-01-08  Nick Clifton  <nickc@redhat.com>\n \n \t* config/arm/arm.c (arm_mark_machine_status): Check to see if"}, {"sha": "fa7efcfc771b4ed178137f5c94b364f9f652cef9", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c8fad3381fa5637089c3892376ac0219c0e886d/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c8fad3381fa5637089c3892376ac0219c0e886d/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=9c8fad3381fa5637089c3892376ac0219c0e886d", "patch": "@@ -519,7 +519,7 @@ do { register bitset tmpset = set;                                   \\\n     abort ();                                                        \\\n   else                                                               \\\n     set[index/HOST_BITS_PER_WIDE_INT] |=\t\t\t     \\\n-      1 << (index % HOST_BITS_PER_WIDE_INT);                         \\\n+      ((unsigned HOST_WIDE_INT) 1) << (index % HOST_BITS_PER_WIDE_INT); \\\n }\n \n /* Turn off the index'th bit in set.  */\n@@ -529,7 +529,7 @@ do { register bitset tmpset = set;                                   \\\n     abort ();                                                        \\\n   else                                                               \\\n     set[index/HOST_BITS_PER_WIDE_INT] &=\t\t\t     \\\n-      ~(1 << (index%HOST_BITS_PER_WIDE_INT));                        \\\n+      ~(((unsigned HOST_WIDE_INT) 1) << (index % HOST_BITS_PER_WIDE_INT)); \\\n }\n \n /* Check if the index'th bit in bitset set is on.  */\n@@ -541,8 +541,9 @@ bitset_member (set, index, len)\n {\n   if (index >= HOST_BITS_PER_WIDE_INT * len)\n     abort ();\n-  return (set[index / HOST_BITS_PER_WIDE_INT] &\n-\t  1 << (index % HOST_BITS_PER_WIDE_INT)) ? 1 : 0;\n+  return ((set[index / HOST_BITS_PER_WIDE_INT] &\n+\t   ((unsigned HOST_WIDE_INT) 1) << (index % HOST_BITS_PER_WIDE_INT))\n+\t  ? 1 : 0);\n }\n \n /* Translate a bit-set SET to a list BL of the bit-set members.  */"}]}