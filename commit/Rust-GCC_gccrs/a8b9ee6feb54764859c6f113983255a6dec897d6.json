{"sha": "a8b9ee6feb54764859c6f113983255a6dec897d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThiOWVlNmZlYjU0NzY0ODU5YzZmMTEzOTgzMjU1YTZkZWM4OTdkNg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-07-11T21:37:33Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-07-11T21:37:33Z"}, "message": "compiler: ensure evaluation order in type hash/eq functions\n    \n    The type hash and equality functions are generated after the\n    order_evaluations pass. They may contain shortcut operators and\n    Set_and_use_temporary_expressions (e.g. from lowering a\n    Binary_exprssion) that need to be ordered. Run order_evaluations\n    and remove_shortcuts on these functions. (The hash functions\n    may be fine, but to be on the safe side we run on them anyway.\n    We do need to run on the equality functions.)\n    \n    A Set_and_use_temporary_expression is effectively an assignment,\n    so it needs to be ordered. Otherwise if we insert a temporary\n    statement before it, we may get wrong evaluation order.\n    \n    A test case is CL 185818.\n    \n    Fixes golang/go#33062.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/185817\n\nFrom-SVN: r273425", "tree": {"sha": "700087ff4d5e5444c05f3bb76d121ab61243e3ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/700087ff4d5e5444c05f3bb76d121ab61243e3ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8b9ee6feb54764859c6f113983255a6dec897d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8b9ee6feb54764859c6f113983255a6dec897d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8b9ee6feb54764859c6f113983255a6dec897d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8b9ee6feb54764859c6f113983255a6dec897d6/comments", "author": null, "committer": null, "parents": [{"sha": "bee60edc26944d6993b3bfdca3a811d7a8c04e0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bee60edc26944d6993b3bfdca3a811d7a8c04e0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bee60edc26944d6993b3bfdca3a811d7a8c04e0f"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "28fc22309dd92dca546255ab1910f951ab6ee7c8", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b9ee6feb54764859c6f113983255a6dec897d6/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b9ee6feb54764859c6f113983255a6dec897d6/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=a8b9ee6feb54764859c6f113983255a6dec897d6", "patch": "@@ -1,4 +1,4 @@\n-ec754ff4617d564d3dc377121ea9ac5e55f6535a\n+70ceba5e95716653b9f829a457a44a829175d4da\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "3b65e7a5f0c96ed40ce898d3900640a40a8b93d4", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b9ee6feb54764859c6f113983255a6dec897d6/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b9ee6feb54764859c6f113983255a6dec897d6/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=a8b9ee6feb54764859c6f113983255a6dec897d6", "patch": "@@ -1627,6 +1627,10 @@ class Set_and_use_temporary_expression : public Expression\n \t\t\t\t      this->location());\n   }\n \n+  bool\n+  do_must_eval_in_order() const\n+  { return true; }\n+\n   bool\n   do_is_addressable() const\n   { return true; }"}, {"sha": "f9a18bc462771bd6ac7c6c05b9f1a89ec372857d", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b9ee6feb54764859c6f113983255a6dec897d6/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b9ee6feb54764859c6f113983255a6dec897d6/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=a8b9ee6feb54764859c6f113983255a6dec897d6", "patch": "@@ -4097,6 +4097,15 @@ Gogo::order_evaluations()\n   this->traverse(&order_eval);\n }\n \n+// Order evaluations in a block.\n+\n+void\n+Gogo::order_block(Block* block)\n+{\n+  Order_eval order_eval(this);\n+  block->traverse(&order_eval);\n+}\n+\n // A traversal class used to find a single shortcut operator within an\n // expression.\n \n@@ -4306,6 +4315,15 @@ Gogo::remove_shortcuts()\n   this->traverse(&shortcuts);\n }\n \n+// Turn shortcut operators into explicit if statements in a block.\n+\n+void\n+Gogo::remove_shortcuts_in_block(Block* block)\n+{\n+  Shortcuts shortcuts(this);\n+  block->traverse(&shortcuts);\n+}\n+\n // Traversal to flatten parse tree after order of evaluation rules are applied.\n \n class Flatten : public Traverse"}, {"sha": "6ffdc59bebc524ec93729e92031dc6359e5f7d22", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b9ee6feb54764859c6f113983255a6dec897d6/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b9ee6feb54764859c6f113983255a6dec897d6/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=a8b9ee6feb54764859c6f113983255a6dec897d6", "patch": "@@ -749,10 +749,18 @@ class Gogo\n   void\n   remove_shortcuts();\n \n+  // Turn short-cut operators into explicit if statements in a block.\n+  void\n+  remove_shortcuts_in_block(Block*);\n+\n   // Use temporary variables to force order of evaluation.\n   void\n   order_evaluations();\n \n+  // Order evaluations in a block.\n+  void\n+  order_block(Block*);\n+\n   // Add write barriers as needed.\n   void\n   add_write_barriers();"}, {"sha": "b46525d78727122cb3c49e231a4696afadd9ab6f", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b9ee6feb54764859c6f113983255a6dec897d6/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b9ee6feb54764859c6f113983255a6dec897d6/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=a8b9ee6feb54764859c6f113983255a6dec897d6", "patch": "@@ -2098,6 +2098,8 @@ Type::write_specific_type_functions(Gogo* gogo, Named_type* name, int64_t size,\n   Block* b = gogo->finish_block(bloc);\n   gogo->add_block(b, bloc);\n   gogo->lower_block(hash_fn, b);\n+  gogo->order_block(b);\n+  gogo->remove_shortcuts_in_block(b);\n   gogo->finish_function(bloc);\n \n   Named_object *equal_fn = gogo->start_function(equal_name, equal_fntype,\n@@ -2119,6 +2121,8 @@ Type::write_specific_type_functions(Gogo* gogo, Named_type* name, int64_t size,\n   b = gogo->finish_block(bloc);\n   gogo->add_block(b, bloc);\n   gogo->lower_block(equal_fn, b);\n+  gogo->order_block(b);\n+  gogo->remove_shortcuts_in_block(b);\n   gogo->finish_function(bloc);\n \n   // Build the function descriptors for the type descriptor to refer to."}]}