{"sha": "c14c81552aa7c5f7cf837f3728580e29fe94c5ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE0YzgxNTUyYWE3YzVmN2NmODM3ZjM3Mjg1ODBlMjlmZTk0YzVlZg==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2010-09-01T08:33:11Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2010-09-01T08:33:11Z"}, "message": "intrinsic.c: Add EXECUTE_COMMAND_LINE intrinsic.\n\n\t* intrinsic.c: Add EXECUTE_COMMAND_LINE intrinsic.\n\t* intrinsic.h (gfc_resolve_execute_command_line): New function.\n\t* iresolve.c (gfc_resolve_execute_command_line): New function.\n\t* gfortran.h (GFC_ISYM_EXECUTE_COMMAND_LINE): New value.\n\t* intrinsic.texi: Document EXECUTE_COMMAND_LINE.\n\n\t* intrinsics/execute_command_line.c: New file.\n\t* gfortran.map (_gfortran_execute_command_line_i4,\n\t_gfortran_execute_command_line_i8): New symbols.\n\t* Makefile.am: Add new file intrinsics/execute_command_line.c.\n\t* Makefile.in: Regenerated.\n\n\t* gfortran.dg/execute_command_line_1.f90: New test.\n\nFrom-SVN: r163719", "tree": {"sha": "152b99416a290e053058a7bd41350fbc94980279", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/152b99416a290e053058a7bd41350fbc94980279"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c14c81552aa7c5f7cf837f3728580e29fe94c5ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14c81552aa7c5f7cf837f3728580e29fe94c5ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c14c81552aa7c5f7cf837f3728580e29fe94c5ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14c81552aa7c5f7cf837f3728580e29fe94c5ef/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d78552bd0f5b2494ef2efa26d9eb6c59247772ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d78552bd0f5b2494ef2efa26d9eb6c59247772ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d78552bd0f5b2494ef2efa26d9eb6c59247772ef"}], "stats": {"total": 382, "additions": 376, "deletions": 6}, "files": [{"sha": "e943469eaf7f01795e7f93a93f8c1a0090df859e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14c81552aa7c5f7cf837f3728580e29fe94c5ef/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14c81552aa7c5f7cf837f3728580e29fe94c5ef/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c14c81552aa7c5f7cf837f3728580e29fe94c5ef", "patch": "@@ -1,3 +1,11 @@\n+2010-09-01  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* intrinsic.c: Add EXECUTE_COMMAND_LINE intrinsic.\n+\t* intrinsic.h (gfc_resolve_execute_command_line): New function.\n+\t* iresolve.c (gfc_resolve_execute_command_line): New function.\n+\t* gfortran.h (GFC_ISYM_EXECUTE_COMMAND_LINE): New value.\n+\t* intrinsic.texi: Document EXECUTE_COMMAND_LINE.\n+\n 2010-08-31  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/38282"}, {"sha": "b23c6471a135b4723cb32b87024288ee858284a5", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14c81552aa7c5f7cf837f3728580e29fe94c5ef/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14c81552aa7c5f7cf837f3728580e29fe94c5ef/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=c14c81552aa7c5f7cf837f3728580e29fe94c5ef", "patch": "@@ -362,6 +362,7 @@ enum gfc_isym_id\n   GFC_ISYM_ERFC,\n   GFC_ISYM_ERFC_SCALED,\n   GFC_ISYM_ETIME,\n+  GFC_ISYM_EXECUTE_COMMAND_LINE,\n   GFC_ISYM_EXIT,\n   GFC_ISYM_EXP,\n   GFC_ISYM_EXPONENT,"}, {"sha": "0b469ae08fbf5dbd2234951b4dac4f91d250f5aa", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14c81552aa7c5f7cf837f3728580e29fe94c5ef/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14c81552aa7c5f7cf837f3728580e29fe94c5ef/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=c14c81552aa7c5f7cf837f3728580e29fe94c5ef", "patch": "@@ -2812,6 +2812,15 @@ add_subroutines (void)\n \t      gfc_check_dtime_etime_sub, NULL, gfc_resolve_dtime_sub,\n \t      vl, BT_REAL, 4, REQUIRED, tm, BT_REAL, 4, REQUIRED);\n \n+  add_sym_5s (\"execute_command_line\", GFC_ISYM_EXECUTE_COMMAND_LINE,\n+\t      CLASS_IMPURE , BT_UNKNOWN, 0, GFC_STD_F2008,\n+\t      NULL, NULL, gfc_resolve_execute_command_line,\n+\t      \"command\", BT_CHARACTER, dc, REQUIRED, INTENT_IN,\n+\t      \"wait\", BT_LOGICAL, dl, OPTIONAL, INTENT_IN,\n+\t      \"exitstat\", BT_INTEGER, di, OPTIONAL, INTENT_INOUT,\n+\t      \"cmdstat\", BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n+\t      \"cmdmsg\", BT_CHARACTER, dc, OPTIONAL, INTENT_INOUT);\n+\n   add_sym_1s (\"fdate\", GFC_ISYM_FDATE, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fdate_sub, NULL, gfc_resolve_fdate_sub,\n \t      dt, BT_CHARACTER, dc, REQUIRED);"}, {"sha": "b06c65bc9e5e276b72a3154b30ec0da7f5154470", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14c81552aa7c5f7cf837f3728580e29fe94c5ef/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14c81552aa7c5f7cf837f3728580e29fe94c5ef/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=c14c81552aa7c5f7cf837f3728580e29fe94c5ef", "patch": "@@ -538,6 +538,7 @@ void gfc_resolve_chdir_sub (gfc_code *);\n void gfc_resolve_chmod_sub (gfc_code *);\n void gfc_resolve_cpu_time (gfc_code *);\n void gfc_resolve_ctime_sub (gfc_code *);\n+void gfc_resolve_execute_command_line (gfc_code *);\n void gfc_resolve_exit (gfc_code *);\n void gfc_resolve_fdate_sub (gfc_code *);\n void gfc_resolve_flush (gfc_code *);"}, {"sha": "6603fb59b0b0a94263b7afb2c6333294a259de99", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14c81552aa7c5f7cf837f3728580e29fe94c5ef/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14c81552aa7c5f7cf837f3728580e29fe94c5ef/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=c14c81552aa7c5f7cf837f3728580e29fe94c5ef", "patch": "@@ -104,6 +104,7 @@ Some basic guidelines for editing this document:\n * @code{ERFC}:          ERFC,      Complementary error function\n * @code{ERFC_SCALED}:   ERFC_SCALED, Exponentially-scaled complementary error function\n * @code{ETIME}:         ETIME,     Execution time subroutine (or function)\n+* @code{EXECUTE_COMMAND_LINE}: EXECUTE_COMMAND_LINE, Execute a shell command\n * @code{EXIT}:          EXIT,      Exit the program with status.\n * @code{EXP}:           EXP,       Exponential function\n * @code{EXPONENT}:      EXPONENT,  Exponent function\n@@ -3817,6 +3818,82 @@ end program test_etime\n \n \n \n+@node EXECUTE_COMMAND_LINE\n+@section @code{EXECUTE_COMMAND_LINE} --- Execute a shell command\n+@fnindex EXECUTE_COMMAND_LINE\n+@cindex system, system call\n+@cindex command line\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{EXECUTE_COMMAND_LINE} runs a shell command, synchronously or\n+asynchronously.\n+\n+The @code{COMMAND} argument is passed to the shell and executed, using\n+the C library's @code{system()} call.  (The shell is @code{sh} on Unix\n+systems, and @code{cmd.exe} on Windows.)  If @code{WAIT} is present and\n+has the value false, the execution of the command is asynchronous if the\n+system supports it; otherwise, the command is executed synchronously.\n+\n+The three last arguments allow the user to get status information.  After\n+synchronous execution, @code{EXITSTAT} contains the integer exit code of\n+the command, as returned by @code{system}.  @code{CMDSTAT} is set to zero\n+if the command line was executed (whatever its exit status was).\n+@code{CMDMSG} is assigned an error message if an error has occurred.\n+\n+\n+@item @emph{Standard}:\n+Fortran 2008 and later\n+\n+@item @emph{Class}:\n+Subroutine\n+\n+@item @emph{Syntax}:\n+@code{CALL EXECUTE_COMMAND_LINE(COMMAND [, WAIT, EXITSTAT, CMDSTAT, CMDMSG ])}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{COMMAND} @tab Shall be a default @code{CHARACTER} scalar.\n+@item @var{WAIT} @tab (Optional) Shall be a default @code{LOGICAL} scalar.\n+@item @var{EXITSTAT} @tab (Optional) Shall be an @code{INTEGER} of the\n+default kind.\n+@item @var{CMDSTAT} @tab (Optional) Shall be an @code{INTEGER} of the\n+default kind.\n+@item @var{CMDMSG} @tab (Optional) Shall be an @code{CHARACTER} scalar of the\n+default kind.\n+@end multitable\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_exec\n+  integer :: i\n+\n+  call execute_command_line (\"external_prog.exe\", exitstat=i)\n+  print *, \"Exit status of external_prog.exe was \", i\n+\n+  call execute_command_line (\"reindex_files.exe\", wait=.false.)\n+  print *, \"Now reindexing files in the background\"\n+\n+end program test_exec\n+@end smallexample\n+\n+\n+@item @emph{Note}:\n+\n+Because this intrinsic is implemented in terms of the @code{system()}\n+function call, its behavior with respect to signalling is processor\n+dependent. In particular, on POSIX-compliant systems, the SIGINT and\n+SIGQUIT signals will be ignored, and the SIGCHLD will be blocked. As\n+such, if the parent process is terminated, the child process might not be\n+terminated alongside.\n+\n+\n+@item @emph{See also}:\n+@ref{SYSTEM}\n+@end table\n+\n+\n+\n @node EXIT\n @section @code{EXIT} --- Exit the program with status. \n @fnindex EXIT\n@@ -10955,6 +11032,8 @@ Subroutine, function\n @end multitable\n \n @item @emph{See also}:\n+@ref{EXECUTE_COMMAND_LINE}, which is part of the Fortran 2008 standard\n+and should considered in new code for future portability.\n @end table\n \n "}, {"sha": "66df99e3bf5d445603317091984c8483a28e58ae", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14c81552aa7c5f7cf837f3728580e29fe94c5ef/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14c81552aa7c5f7cf837f3728580e29fe94c5ef/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=c14c81552aa7c5f7cf837f3728580e29fe94c5ef", "patch": "@@ -3184,6 +3184,17 @@ gfc_resolve_system_clock (gfc_code *c)\n }\n \n \n+/* Resolve the EXECUTE_COMMAND_LINE intrinsic subroutine.  */\n+void\n+gfc_resolve_execute_command_line (gfc_code *c)\n+{\n+  const char *name;\n+  name = gfc_get_string (PREFIX (\"execute_command_line_i%d\"),\n+\t\t\t gfc_default_integer_kind);\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n+}\n+\n+\n /* Resolve the EXIT intrinsic subroutine.  */\n \n void"}, {"sha": "3acadbc0bab11f6ddfa19ccdefebcd66e464f5ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14c81552aa7c5f7cf837f3728580e29fe94c5ef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14c81552aa7c5f7cf837f3728580e29fe94c5ef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c14c81552aa7c5f7cf837f3728580e29fe94c5ef", "patch": "@@ -1,3 +1,7 @@\n+2010-09-01  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* gfortran.dg/execute_command_line_1.f90: New test.\n+\n 2010-08-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/45457"}, {"sha": "faaa860c9b417d5fd7114e497d39e136935d6c89", "filename": "gcc/testsuite/gfortran.dg/execute_command_line_1.f90", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14c81552aa7c5f7cf837f3728580e29fe94c5ef/gcc%2Ftestsuite%2Fgfortran.dg%2Fexecute_command_line_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14c81552aa7c5f7cf837f3728580e29fe94c5ef/gcc%2Ftestsuite%2Fgfortran.dg%2Fexecute_command_line_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fexecute_command_line_1.f90?ref=c14c81552aa7c5f7cf837f3728580e29fe94c5ef", "patch": "@@ -0,0 +1,60 @@\n+! { dg-do compile }\n+!\n+! Check that we accept all variants of the EXECUTE_COMMAND_LINE intrinsic.\n+!\n+  integer :: i, j\n+  character(len=100) :: s\n+\n+  s = \"\"\n+\n+  call execute_command_line (\"ls *.f90\")\n+\n+  print *, \"-----------------------------\"\n+\n+  call execute_command_line (\"sleep 1 ; ls *.f90\", .false.)\n+  print *, \"I'm not waiting\"\n+  call sleep(2)\n+\n+  print *, \"-----------------------------\"\n+\n+  call execute_command_line (\"sleep 1 ; ls *.f90\", .true.)\n+  print *, \"I did wait\"\n+  call sleep(2)\n+\n+  print *, \"-----------------------------\"\n+\n+  call execute_command_line (\"ls *.f90\", .true., i)\n+  print *, \"Exist status was: \", i\n+\n+  print *, \"-----------------------------\"\n+\n+  call execute_command_line (\"ls *.doesnotexist\", .true., i)\n+  print *, \"Exist status was: \", i\n+\n+  print *, \"-----------------------------\"\n+\n+  call execute_command_line (\"echo foo\", .true., i, j)\n+  print *, \"Exist status was: \", i\n+  print *, \"Command status was: \", j\n+\n+  print *, \"-----------------------------\"\n+\n+  call execute_command_line (\"echo foo\", .true., i, j, s)\n+  print *, \"Exist status was: \", i\n+  print *, \"Command status was: \", j\n+  print *, \"Error message is: \", trim(s)\n+\n+  print *, \"-----------------------------\"\n+\n+  call execute_command_line (\"ls *.doesnotexist\", .true., i, j, s)\n+  print *, \"Exist status was: \", i\n+  print *, \"Command status was: \", j\n+  print *, \"Error message is: \", trim(s)\n+\n+  print *, \"-----------------------------\"\n+\n+  call execute_command_line (\"sleep 20\", .false.)\n+  print *, \"Please kill me with ^C\"\n+  call sleep (10)\n+\n+  end"}, {"sha": "51d836d7ece8b2ed40575d93c6ab2dbedf12bd80", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14c81552aa7c5f7cf837f3728580e29fe94c5ef/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14c81552aa7c5f7cf837f3728580e29fe94c5ef/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=c14c81552aa7c5f7cf837f3728580e29fe94c5ef", "patch": "@@ -1,3 +1,11 @@\n+2010-09-01  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* intrinsics/execute_command_line.c: New file.\n+\t* gfortran.map (_gfortran_execute_command_line_i4,\n+\t_gfortran_execute_command_line_i8): New symbols.\n+\t* Makefile.am: Add new file intrinsics/execute_command_line.c.\n+\t* Makefile.in: Regenerated.\n+\n 2010-08-29  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* m4/mtype.m4 (upcase, hasmathfunc, mathfunc_macro): New macros."}, {"sha": "b8dd9f89b8533e23642e666945abc1e34b56f46f", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14c81552aa7c5f7cf837f3728580e29fe94c5ef/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14c81552aa7c5f7cf837f3728580e29fe94c5ef/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=c14c81552aa7c5f7cf837f3728580e29fe94c5ef", "patch": "@@ -102,6 +102,7 @@ intrinsics/eoshift0.c \\\n intrinsics/eoshift2.c \\\n intrinsics/erfc_scaled.c \\\n intrinsics/etime.c \\\n+intrinsics/execute_command_line.c \\\n intrinsics/exit.c \\\n intrinsics/extends_type_of.c \\\n intrinsics/fnum.c \\"}, {"sha": "fa30519524d5ca8def4bc2e759de20150444d84e", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14c81552aa7c5f7cf837f3728580e29fe94c5ef/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14c81552aa7c5f7cf837f3728580e29fe94c5ef/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=c14c81552aa7c5f7cf837f3728580e29fe94c5ef", "patch": "@@ -225,12 +225,12 @@ am__objects_38 = close.lo file_pos.lo format.lo inquire.lo \\\n am__objects_39 = associated.lo abort.lo access.lo args.lo \\\n \tbit_intrinsics.lo c99_functions.lo chdir.lo chmod.lo clock.lo \\\n \tcpu_time.lo cshift0.lo ctime.lo date_and_time.lo dtime.lo \\\n-\tenv.lo eoshift0.lo eoshift2.lo erfc_scaled.lo etime.lo exit.lo \\\n-\textends_type_of.lo fnum.lo gerror.lo getcwd.lo getlog.lo \\\n-\tgetXid.lo hostnm.lo ierrno.lo ishftc.lo \\\n-\tiso_c_generated_procs.lo iso_c_binding.lo kill.lo link.lo \\\n-\tmalloc.lo mvbits.lo move_alloc.lo pack_generic.lo perror.lo \\\n-\tselected_char_kind.lo signal.lo size.lo sleep.lo \\\n+\tenv.lo eoshift0.lo eoshift2.lo erfc_scaled.lo etime.lo \\\n+\texecute_command_line.lo exit.lo extends_type_of.lo fnum.lo \\\n+\tgerror.lo getcwd.lo getlog.lo getXid.lo hostnm.lo ierrno.lo \\\n+\tishftc.lo iso_c_generated_procs.lo iso_c_binding.lo kill.lo \\\n+\tlink.lo malloc.lo mvbits.lo move_alloc.lo pack_generic.lo \\\n+\tperror.lo selected_char_kind.lo signal.lo size.lo sleep.lo \\\n \tspread_generic.lo string_intrinsics.lo system.lo rand.lo \\\n \trandom.lo rename.lo reshape_generic.lo reshape_packed.lo \\\n \tselected_int_kind.lo selected_real_kind.lo stat.lo symlnk.lo \\\n@@ -522,6 +522,7 @@ intrinsics/eoshift0.c \\\n intrinsics/eoshift2.c \\\n intrinsics/erfc_scaled.c \\\n intrinsics/etime.c \\\n+intrinsics/execute_command_line.c \\\n intrinsics/exit.c \\\n intrinsics/extends_type_of.c \\\n intrinsics/fnum.c \\\n@@ -1404,6 +1405,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/erfc_scaled.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/error.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/etime.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/execute_command_line.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/exit.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/exponent_r10.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/exponent_r16.Plo@am__quote@\n@@ -5089,6 +5091,13 @@ etime.lo: intrinsics/etime.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o etime.lo `test -f 'intrinsics/etime.c' || echo '$(srcdir)/'`intrinsics/etime.c\n \n+execute_command_line.lo: intrinsics/execute_command_line.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT execute_command_line.lo -MD -MP -MF $(DEPDIR)/execute_command_line.Tpo -c -o execute_command_line.lo `test -f 'intrinsics/execute_command_line.c' || echo '$(srcdir)/'`intrinsics/execute_command_line.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/execute_command_line.Tpo $(DEPDIR)/execute_command_line.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='intrinsics/execute_command_line.c' object='execute_command_line.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o execute_command_line.lo `test -f 'intrinsics/execute_command_line.c' || echo '$(srcdir)/'`intrinsics/execute_command_line.c\n+\n exit.lo: intrinsics/exit.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT exit.lo -MD -MP -MF $(DEPDIR)/exit.Tpo -c -o exit.lo `test -f 'intrinsics/exit.c' || echo '$(srcdir)/'`intrinsics/exit.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/exit.Tpo $(DEPDIR)/exit.Plo"}, {"sha": "72dafa6d14b5d1f82b9ed60bc8cc168fc0de1e8b", "filename": "libgfortran/gfortran.map", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14c81552aa7c5f7cf837f3728580e29fe94c5ef/libgfortran%2Fgfortran.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14c81552aa7c5f7cf837f3728580e29fe94c5ef/libgfortran%2Fgfortran.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgfortran.map?ref=c14c81552aa7c5f7cf837f3728580e29fe94c5ef", "patch": "@@ -1069,6 +1069,8 @@ GFORTRAN_1.1 {\n     _gfortran_erfc_scaled_r16;\n     _gfortran_erfc_scaled_r4;\n     _gfortran_erfc_scaled_r8;\n+    _gfortran_execute_command_line_i4;\n+    _gfortran_execute_command_line_i8;\n     _gfortran_pack_char4;\n     _gfortran_pack_s_char4;\n     _gfortran_reshape_char4;"}, {"sha": "4e3c4451d62916e12fadb16b009626c9022f27d9", "filename": "libgfortran/intrinsics/execute_command_line.c", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14c81552aa7c5f7cf837f3728580e29fe94c5ef/libgfortran%2Fintrinsics%2Fexecute_command_line.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14c81552aa7c5f7cf837f3728580e29fe94c5ef/libgfortran%2Fintrinsics%2Fexecute_command_line.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fexecute_command_line.c?ref=c14c81552aa7c5f7cf837f3728580e29fe94c5ef", "patch": "@@ -0,0 +1,177 @@\n+/* Implementation of the EXECUTE_COMMAND_LINE intrinsic.\n+   Copyright (C) 2009 Free Software Foundation, Inc.\n+   Contributed by Fran\u00c3\u00a7ois-Xavier Coudert.\n+\n+This file is part of the GNU Fortran runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+Libgfortran is distributed in the hope that it will be useful, but WITHOUT\n+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"libgfortran.h\"\n+#include <string.h>\n+#include <stdbool.h>\n+\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n+#ifdef  HAVE_SYS_WAIT_H\n+#include <sys/wait.h>\n+#endif\n+\n+\n+enum { EXEC_NOERROR = 0, EXEC_SYSTEMFAILED };\n+static const char *cmdmsg_values[] =\n+  { \"\", \"Execution of child process impossible\" };\n+\n+\n+\n+static void\n+set_cmdstat (int *cmdstat, int value)\n+{\n+  if (cmdstat)\n+    *cmdstat = value;\n+  else if (value != 0)\n+    runtime_error (\"Could not execute command line\");\n+}\n+\n+\n+static void\n+execute_command_line (const char *command, bool wait, int *exitstat,\n+\t\t      int *cmdstat, char *cmdmsg,\n+\t\t      gfc_charlen_type command_len,\n+\t\t      gfc_charlen_type cmdmsg_len)\n+{\n+  /* Transform the Fortran string to a C string.  */\n+  char cmd[command_len + 1];\n+  memcpy (cmd, command, command_len);\n+  cmd[command_len] = '\\0';\n+\n+  /* Flush all I/O units before executing the command.  */\n+  flush_all_units();\n+\n+#if defined(HAVE_FORK)\n+  if (!wait)\n+    {\n+      /* Asynchronous execution.  */\n+      pid_t pid;\n+\n+      set_cmdstat (cmdstat, 0);\n+\n+      if ((pid = fork()) < 0)\n+\tset_cmdstat (cmdstat, EXEC_SYSTEMFAILED);\n+      else if (pid == 0)\n+\t{\n+\t  /* Child process.  */\n+\t  int res = system (cmd);\n+\t  _exit (WIFEXITED(res) ? WEXITSTATUS(res) : res);\n+\t}\n+    }\n+  else\n+#endif\n+    {\n+      /* Synchronous execution.  */\n+      int res = system (cmd);\n+\n+      if (!wait)\n+\tset_cmdstat (cmdstat, -2);\n+      else if (res == -1)\n+\tset_cmdstat (cmdstat, EXEC_SYSTEMFAILED);\n+      else\n+\t{\n+\t  set_cmdstat (cmdstat, 0);\n+#if defined(WEXITSTATUS) && defined(WIFEXITED)\n+\t  *exitstat = WIFEXITED(res) ? WEXITSTATUS(res) : res;\n+#else\n+\t  *exitstat = res;\n+#endif\n+\t}\n+    }\n+\n+  /* Now copy back to the Fortran string if needed.  */\n+  if (cmdstat && *cmdstat > 0)\n+    {\n+      if (cmdmsg)\n+\tfstrcpy (cmdmsg, cmdmsg_len, cmdmsg_values[*cmdstat],\n+\t\tstrlen (cmdmsg_values[*cmdstat]));\n+      else\n+\truntime_error (\"Failure in EXECUTE_COMMAND_LINE: %s\",\n+\t\t       cmdmsg_values[*cmdstat]);\n+    }\n+}\n+\n+\n+extern void\n+execute_command_line_i4 (const char *command, GFC_LOGICAL_4 *wait,\n+\t\t\t GFC_INTEGER_4 *exitstat, GFC_INTEGER_4 *cmdstat,\n+\t\t\t char *cmdmsg, gfc_charlen_type command_len,\n+\t\t\t gfc_charlen_type cmdmsg_len);\n+export_proto(execute_command_line_i4);\n+\n+void\n+execute_command_line_i4 (const char *command, GFC_LOGICAL_4 *wait,\n+\t\t\t GFC_INTEGER_4 *exitstat, GFC_INTEGER_4 *cmdstat,\n+\t\t\t char *cmdmsg, gfc_charlen_type command_len,\n+\t\t\t gfc_charlen_type cmdmsg_len)\n+{\n+  bool w = wait ? *wait : true;\n+  int estat, estat_initial, cstat;\n+\n+  if (exitstat)\n+    estat_initial = estat = *exitstat;\n+\n+  execute_command_line (command, w, &estat, cmdstat ? &cstat : NULL,\n+\t\t\tcmdmsg, command_len, cmdmsg_len);\n+\n+  if (exitstat && estat != estat_initial)\n+    *exitstat = estat;\n+  if (cmdstat)\n+    *cmdstat = cstat;\n+}\n+\n+\n+extern void\n+execute_command_line_i8 (const char *command, GFC_LOGICAL_8 *wait,\n+\t\t\t GFC_INTEGER_8 *exitstat, GFC_INTEGER_8 *cmdstat,\n+\t\t\t char *cmdmsg, gfc_charlen_type command_len,\n+\t\t\t gfc_charlen_type cmdmsg_len);\n+export_proto(execute_command_line_i8);\n+\n+void\n+execute_command_line_i8 (const char *command, GFC_LOGICAL_8 *wait,\n+\t\t\t GFC_INTEGER_8 *exitstat, GFC_INTEGER_8 *cmdstat,\n+\t\t\t char *cmdmsg, gfc_charlen_type command_len,\n+\t\t\t gfc_charlen_type cmdmsg_len)\n+{\n+  bool w = wait ? *wait : true;\n+  int estat, estat_initial, cstat;\n+\n+  if (exitstat)\n+    estat_initial = estat = *exitstat;\n+\n+  execute_command_line (command, w, &estat, cmdstat ? &cstat : NULL,\n+\t\t\tcmdmsg, command_len, cmdmsg_len);\n+\n+  if (exitstat && estat != estat_initial)\n+    *exitstat = estat;\n+  if (cmdstat)\n+    *cmdstat = cstat;\n+}"}]}