{"sha": "1e736a9531b7ffda4fef17e70b33b6410efd98f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU3MzZhOTUzMWI3ZmZkYTRmZWYxN2U3MGIzM2I2NDEwZWZkOThmNw==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-07-06T17:02:33Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-07-06T17:02:33Z"}, "message": "functions.h (__gnu_debug::__check_string): Move...\n\n2018-07-06  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/debug/functions.h (__gnu_debug::__check_string): Move...\n\t* include/debug/string (__gnu_debug::__check_string): ... here.\n\t(_GLIBCXX_DEBUG_VERIFY_STR_COND_AT): New.\n\t(__glibcxx_check_string_n_constructor): New.\n\t(__gnu_debug::basic_string<>(const _CharT*, size_type, const _Alloc&)):\n\tUse latter.\n\t(__glibcxx_check_string_constructor): New.\n\t(__gnu_debug::basic_string<>(const _CharT*, const _Alloc&)):\n\tUse latter.\n\t* testsuite/21_strings/basic_string/debug/1_neg.cc: New.\n\t* testsuite/21_strings/basic_string/debug/2_neg.cc: New.\n\nFrom-SVN: r262480", "tree": {"sha": "3ae4e8c2bf3dca55fb69f4470ad889d6aa476574", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ae4e8c2bf3dca55fb69f4470ad889d6aa476574"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e736a9531b7ffda4fef17e70b33b6410efd98f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e736a9531b7ffda4fef17e70b33b6410efd98f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e736a9531b7ffda4fef17e70b33b6410efd98f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e736a9531b7ffda4fef17e70b33b6410efd98f7/comments", "author": null, "committer": null, "parents": [{"sha": "582d1f904948c830a711739cc3388bbc71be4947", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/582d1f904948c830a711739cc3388bbc71be4947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/582d1f904948c830a711739cc3388bbc71be4947"}], "stats": {"total": 1640, "additions": 871, "deletions": 769}, "files": [{"sha": "cceef0271ae809d44c66f16aed7b756c2f25868b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e736a9531b7ffda4fef17e70b33b6410efd98f7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e736a9531b7ffda4fef17e70b33b6410efd98f7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1e736a9531b7ffda4fef17e70b33b6410efd98f7", "patch": "@@ -1,3 +1,17 @@\n+2018-07-06  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/debug/functions.h (__gnu_debug::__check_string): Move...\n+\t* include/debug/string (__gnu_debug::__check_string): ... here.\n+\t(_GLIBCXX_DEBUG_VERIFY_STR_COND_AT): New.\n+\t(__glibcxx_check_string_n_constructor): New.\n+\t(__gnu_debug::basic_string<>(const _CharT*, size_type, const _Alloc&)):\n+\tUse latter.\n+\t(__glibcxx_check_string_constructor): New.\n+\t(__gnu_debug::basic_string<>(const _CharT*, const _Alloc&)):\n+\tUse latter.\n+\t* testsuite/21_strings/basic_string/debug/1_neg.cc: New.\n+\t* testsuite/21_strings/basic_string/debug/2_neg.cc: New.\n+\n 2018-07-06  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/84928 use std::move in <numeric> algorithms"}, {"sha": "ce501f20c31a8374936887ea5a7e3d5c1f8bff34", "filename": "libstdc++-v3/include/debug/functions.h", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e736a9531b7ffda4fef17e70b33b6410efd98f7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e736a9531b7ffda4fef17e70b33b6410efd98f7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h?ref=1e736a9531b7ffda4fef17e70b33b6410efd98f7", "patch": "@@ -211,29 +211,6 @@ namespace __gnu_debug\n       return __foreign_iterator_aux(__it, __other, __other_end, _Integral());\n     }\n \n-  /** Checks that __s is non-NULL or __n == 0, and then returns __s. */\n-  template<typename _CharT, typename _Integer>\n-    inline const _CharT*\n-    __check_string(const _CharT* __s,\n-\t\t   const _Integer& __n __attribute__((__unused__)))\n-    {\n-#ifdef _GLIBCXX_DEBUG_PEDANTIC\n-      __glibcxx_assert(__s != 0 || __n == 0);\n-#endif\n-      return __s;\n-    }\n-\n-  /** Checks that __s is non-NULL and then returns __s. */\n-  template<typename _CharT>\n-    inline const _CharT*\n-    __check_string(const _CharT* __s)\n-    {\n-#ifdef _GLIBCXX_DEBUG_PEDANTIC\n-      __glibcxx_assert(__s != 0);\n-#endif\n-      return __s;\n-    }\n-\n   // Can't check if an input iterator sequence is sorted, because we\n   // can't step through the sequence.\n   template<typename _InputIterator>"}, {"sha": "7fa39e302ed08aba981f32ce1e8bbce7ce9e48cb", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 789, "deletions": 746, "changes": 1535, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e736a9531b7ffda4fef17e70b33b6410efd98f7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e736a9531b7ffda4fef17e70b33b6410efd98f7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=1e736a9531b7ffda4fef17e70b33b6410efd98f7", "patch": "@@ -36,701 +36,744 @@\n #include <debug/safe_container.h>\n #include <debug/safe_iterator.h>\n \n+#define _GLIBCXX_DEBUG_VERIFY_STR_COND_AT(_Cond,_File,_Line,_Func)\t\\\n+  if (! (_Cond))\t\t\t\t\t\t\t\\\n+    __gnu_debug::_Error_formatter::_S_at(_File, _Line, _Func)\t\t\\\n+      ._M_message(#_Cond)._M_error()\n+\n namespace __gnu_debug\n {\n-/// Class std::basic_string with safety/checking/debug instrumentation.\n-template<typename _CharT, typename _Traits = std::char_traits<_CharT>,\n-\t typename _Allocator = std::allocator<_CharT> >\n-  class basic_string\n-  : public __gnu_debug::_Safe_container<\n-      basic_string<_CharT, _Traits, _Allocator>,\n-      _Allocator, _Safe_sequence, bool(_GLIBCXX_USE_CXX11_ABI)>,\n-    public std::basic_string<_CharT, _Traits, _Allocator>\n-  {\n-    typedef std::basic_string<_CharT, _Traits, _Allocator>\t_Base;\n-    typedef __gnu_debug::_Safe_container<\n-      basic_string, _Allocator, _Safe_sequence, bool(_GLIBCXX_USE_CXX11_ABI)>\n+  /** Checks that __s is non-NULL or __n == 0, and then returns __s. */\n+  template<typename _CharT, typename _Integer>\n+    inline const _CharT*\n+    __check_string(const _CharT* __s,\n+\t\t   _Integer __n __attribute__((__unused__)),\n+\t\t   const char* __file __attribute__((__unused__)),\n+\t\t   unsigned int __line __attribute__((__unused__)),\n+\t\t   const char* __function __attribute__((__unused__)))\n+    {\n+#ifdef _GLIBCXX_DEBUG_PEDANTIC\n+      _GLIBCXX_DEBUG_VERIFY_STR_COND_AT(__s != 0 || __n == 0,\n+\t\t\t\t\t__file, __line, __function);\n+#endif\n+      return __s;\n+    }\n+\n+  /** Checks that __s is non-NULL and then returns __s. */\n+  template<typename _CharT>\n+    inline const _CharT*\n+    __check_string(const _CharT* __s,\n+\t\t   const char* __file __attribute__((__unused__)),\n+\t\t   unsigned int __line __attribute__((__unused__)),\n+\t\t   const char* __function __attribute__((__unused__)))\n+    {\n+#ifdef _GLIBCXX_DEBUG_PEDANTIC\n+      _GLIBCXX_DEBUG_VERIFY_STR_COND_AT(__s != 0,\n+\t\t\t\t\t__file, __line, __function);\n+#endif\n+      return __s;\n+    }\n+\n+#define __glibcxx_check_string_n_constructor(_Str, _Size) \\\n+  __check_string(_Str, _Size, __FILE__, __LINE__, __PRETTY_FUNCTION__)\n+\n+#define __glibcxx_check_string_constructor(_Str) \\\n+  __check_string(_Str, __FILE__, __LINE__, __PRETTY_FUNCTION__)\n+\n+  /// Class std::basic_string with safety/checking/debug instrumentation.\n+  template<typename _CharT, typename _Traits = std::char_traits<_CharT>,\n+\t   typename _Allocator = std::allocator<_CharT> >\n+    class basic_string\n+      : public __gnu_debug::_Safe_container<\n+\t  basic_string<_CharT, _Traits, _Allocator>,\n+\t  _Allocator, _Safe_sequence, bool(_GLIBCXX_USE_CXX11_ABI)>,\n+\tpublic std::basic_string<_CharT, _Traits, _Allocator>\n+    {\n+      typedef std::basic_string<_CharT, _Traits, _Allocator>\t_Base;\n+      typedef __gnu_debug::_Safe_container<\n+\tbasic_string, _Allocator, _Safe_sequence, bool(_GLIBCXX_USE_CXX11_ABI)>\n       _Safe;\n \n-  public:\n-    // types:\n-    typedef _Traits\t\t\t\t\ttraits_type;\n-    typedef typename _Traits::char_type\t\t\tvalue_type;\n-    typedef _Allocator\t\t\t\t\tallocator_type;\n-    typedef typename _Base::size_type\t\t\tsize_type;\n-    typedef typename _Base::difference_type\t\tdifference_type;\n-    typedef typename _Base::reference\t\t\treference;\n-    typedef typename _Base::const_reference\t\tconst_reference;\n-    typedef typename _Base::pointer\t\t\tpointer;\n-    typedef typename _Base::const_pointer\t\tconst_pointer;\n-\n-    typedef __gnu_debug::_Safe_iterator<\n-      typename _Base::iterator, basic_string>\t\titerator;\n-    typedef __gnu_debug::_Safe_iterator<\n-      typename _Base::const_iterator, basic_string>\tconst_iterator;\n-\n-    typedef std::reverse_iterator<iterator>\t\treverse_iterator;\n-    typedef std::reverse_iterator<const_iterator>\tconst_reverse_iterator;\n-\n-    using _Base::npos;\n-\n-    basic_string()\n-    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_default_constructible<_Base>::value)\n-    : _Base() { }\n-\n-    // 21.3.1 construct/copy/destroy:\n-    explicit\n-    basic_string(const _Allocator& __a) _GLIBCXX_NOEXCEPT\n-    : _Base(__a) { }\n+    public:\n+      // types:\n+      typedef _Traits\t\t\t\t\ttraits_type;\n+      typedef typename _Traits::char_type\t\tvalue_type;\n+      typedef _Allocator\t\t\t\tallocator_type;\n+      typedef typename _Base::size_type\t\t\tsize_type;\n+      typedef typename _Base::difference_type\t\tdifference_type;\n+      typedef typename _Base::reference\t\t\treference;\n+      typedef typename _Base::const_reference\t\tconst_reference;\n+      typedef typename _Base::pointer\t\t\tpointer;\n+      typedef typename _Base::const_pointer\t\tconst_pointer;\n+\n+      typedef __gnu_debug::_Safe_iterator<\n+\ttypename _Base::iterator, basic_string>\t\titerator;\n+      typedef __gnu_debug::_Safe_iterator<\n+\ttypename _Base::const_iterator, basic_string>\tconst_iterator;\n+\n+      typedef std::reverse_iterator<iterator>\t\treverse_iterator;\n+      typedef std::reverse_iterator<const_iterator>\tconst_reverse_iterator;\n+\n+      using _Base::npos;\n+\n+      basic_string()\n+\t_GLIBCXX_NOEXCEPT_IF(std::is_nothrow_default_constructible<_Base>::value)\n+\t: _Base() { }\n+\n+      // 21.3.1 construct/copy/destroy:\n+      explicit\n+      basic_string(const _Allocator& __a) _GLIBCXX_NOEXCEPT\n+      : _Base(__a) { }\n \n #if __cplusplus < 201103L\n-    basic_string(const basic_string& __str)\n-    : _Base(__str) { }\n+      basic_string(const basic_string& __str)\n+      : _Base(__str) { }\n \n-    ~basic_string() { }\n+      ~basic_string() { }\n #else\n-    basic_string(const basic_string&) = default;\n-    basic_string(basic_string&&) = default;\n+      basic_string(const basic_string&) = default;\n+      basic_string(basic_string&&) = default;\n \n-    basic_string(std::initializer_list<_CharT> __l,\n-\t\t const _Allocator& __a = _Allocator())\n-    : _Base(__l, __a)\n-    { }\n+      basic_string(std::initializer_list<_CharT> __l,\n+\t\t   const _Allocator& __a = _Allocator())\n+      : _Base(__l, __a)\n+      { }\n \n #if _GLIBCXX_USE_CXX11_ABI\n-    basic_string(const basic_string& __s, const _Allocator& __a)\n-    : _Base(__s, __a) { }\n+      basic_string(const basic_string& __s, const _Allocator& __a)\n+      : _Base(__s, __a) { }\n \n-    basic_string(basic_string&& __s, const _Allocator& __a)\n-    : _Base(std::move(__s), __a) { }\n+      basic_string(basic_string&& __s, const _Allocator& __a)\n+      : _Base(std::move(__s), __a) { }\n #endif\n \n-    ~basic_string() = default;\n+      ~basic_string() = default;\n \n-    // Provides conversion from a normal-mode string to a debug-mode string\n-    basic_string(_Base&& __base) noexcept\n-    : _Base(std::move(__base)) { }\n+      // Provides conversion from a normal-mode string to a debug-mode string\n+      basic_string(_Base&& __base) noexcept\n+      : _Base(std::move(__base)) { }\n #endif // C++11\n \n-    // Provides conversion from a normal-mode string to a debug-mode string\n-    basic_string(const _Base& __base)\n-    : _Base(__base) { }\n+      // Provides conversion from a normal-mode string to a debug-mode string\n+      basic_string(const _Base& __base)\n+      : _Base(__base) { }\n \n-    // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-    // 42. string ctors specify wrong default allocator\n-    basic_string(const basic_string& __str, size_type __pos,\n-\t\t size_type __n = _Base::npos,\n-\t\t const _Allocator& __a = _Allocator())\n-    : _Base(__str, __pos, __n, __a) { }\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 42. string ctors specify wrong default allocator\n+      basic_string(const basic_string& __str, size_type __pos,\n+\t\t   size_type __n = _Base::npos,\n+\t\t   const _Allocator& __a = _Allocator())\n+      : _Base(__str, __pos, __n, __a) { }\n \n-    basic_string(const _CharT* __s, size_type __n,\n-\t\t const _Allocator& __a = _Allocator())\n-    : _Base(__gnu_debug::__check_string(__s, __n), __n, __a) { }\n+      basic_string(const _CharT* __s, size_type __n,\n+\t\t   const _Allocator& __a = _Allocator())\n+      : _Base(__glibcxx_check_string_n_constructor(__s, __n), __n, __a) { }\n \n-    basic_string(const _CharT* __s, const _Allocator& __a = _Allocator())\n-    : _Base(__gnu_debug::__check_string(__s), __a)\n-    { this->assign(__s); }\n+      basic_string(const _CharT* __s, const _Allocator& __a = _Allocator())\n+      : _Base(__glibcxx_check_string_constructor(__s), __a)\n+      { this->assign(__s); }\n \n-    basic_string(size_type __n, _CharT __c,\n+      basic_string(size_type __n, _CharT __c,\n \t\t   const _Allocator& __a = _Allocator())\n-    : _Base(__n, __c, __a) { }\n+      : _Base(__n, __c, __a) { }\n \n-    template<typename _InputIterator>\n-      basic_string(_InputIterator __begin, _InputIterator __end,\n-\t\t   const _Allocator& __a = _Allocator())\n-      : _Base(__gnu_debug::__base(\n+      template<typename _InputIterator>\n+\tbasic_string(_InputIterator __begin, _InputIterator __end,\n+\t\t     const _Allocator& __a = _Allocator())\n+\t: _Base(__gnu_debug::__base(\n \t\t  __glibcxx_check_valid_constructor_range(__begin, __end)),\n-\t      __gnu_debug::__base(__end), __a) { }\n+\t\t__gnu_debug::__base(__end), __a) { }\n \n #if __cplusplus < 201103L\n-    basic_string&\n-    operator=(const basic_string& __str)\n-    {\n-      this->_M_safe() = __str;\n-      _M_base() = __str;\n-      return *this;\n-    }\n+      basic_string&\n+      operator=(const basic_string& __str)\n+      {\n+\tthis->_M_safe() = __str;\n+\t_M_base() = __str;\n+\treturn *this;\n+      }\n #else\n-    basic_string&\n-    operator=(const basic_string&) = default;\n+      basic_string&\n+      operator=(const basic_string&) = default;\n \n-    basic_string&\n-    operator=(basic_string&&) = default;\n+      basic_string&\n+      operator=(basic_string&&) = default;\n #endif\n \n-    basic_string&\n-    operator=(const _CharT* __s)\n-    {\n-      __glibcxx_check_string(__s);\n-      _M_base() = __s;\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n+      basic_string&\n+      operator=(const _CharT* __s)\n+      {\n+\t__glibcxx_check_string(__s);\n+\t_M_base() = __s;\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n \n-    basic_string&\n-    operator=(_CharT __c)\n-    {\n-      _M_base() = __c;\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n+      basic_string&\n+      operator=(_CharT __c)\n+      {\n+\t_M_base() = __c;\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n \n #if __cplusplus >= 201103L\n-    basic_string&\n-    operator=(std::initializer_list<_CharT> __l)\n-    {\n-      _M_base() = __l;\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n+      basic_string&\n+      operator=(std::initializer_list<_CharT> __l)\n+      {\n+\t_M_base() = __l;\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n #endif // C++11\n \n-    // 21.3.2 iterators:\n-    iterator\n-    begin() // _GLIBCXX_NOEXCEPT\n-    { return iterator(_Base::begin(), this); }\n+      // 21.3.2 iterators:\n+      iterator\n+      begin() // _GLIBCXX_NOEXCEPT\n+      { return iterator(_Base::begin(), this); }\n \n-    const_iterator\n-    begin() const _GLIBCXX_NOEXCEPT\n-    { return const_iterator(_Base::begin(), this); }\n+      const_iterator\n+      begin() const _GLIBCXX_NOEXCEPT\n+      { return const_iterator(_Base::begin(), this); }\n \n-    iterator\n-    end() // _GLIBCXX_NOEXCEPT\n-    { return iterator(_Base::end(), this); }\n+      iterator\n+      end() // _GLIBCXX_NOEXCEPT\n+      { return iterator(_Base::end(), this); }\n \n-    const_iterator\n-    end() const _GLIBCXX_NOEXCEPT\n-    { return const_iterator(_Base::end(), this); }\n+      const_iterator\n+      end() const _GLIBCXX_NOEXCEPT\n+      { return const_iterator(_Base::end(), this); }\n \n-    reverse_iterator\n-    rbegin() // _GLIBCXX_NOEXCEPT\n-    { return reverse_iterator(end()); }\n+      reverse_iterator\n+      rbegin() // _GLIBCXX_NOEXCEPT\n+      { return reverse_iterator(end()); }\n \n-    const_reverse_iterator\n-    rbegin() const _GLIBCXX_NOEXCEPT\n-    { return const_reverse_iterator(end()); }\n+      const_reverse_iterator\n+      rbegin() const _GLIBCXX_NOEXCEPT\n+      { return const_reverse_iterator(end()); }\n \n-    reverse_iterator\n-    rend() // _GLIBCXX_NOEXCEPT\n-    { return reverse_iterator(begin()); }\n+      reverse_iterator\n+      rend() // _GLIBCXX_NOEXCEPT\n+      { return reverse_iterator(begin()); }\n \n-    const_reverse_iterator\n-    rend() const _GLIBCXX_NOEXCEPT\n-    { return const_reverse_iterator(begin()); }\n+      const_reverse_iterator\n+      rend() const _GLIBCXX_NOEXCEPT\n+      { return const_reverse_iterator(begin()); }\n \n #if __cplusplus >= 201103L\n-    const_iterator\n-    cbegin() const noexcept\n-    { return const_iterator(_Base::begin(), this); }\n+      const_iterator\n+      cbegin() const noexcept\n+      { return const_iterator(_Base::begin(), this); }\n \n-    const_iterator\n-    cend() const noexcept\n-    { return const_iterator(_Base::end(), this); }\n+      const_iterator\n+      cend() const noexcept\n+      { return const_iterator(_Base::end(), this); }\n \n-    const_reverse_iterator\n-    crbegin() const noexcept\n-    { return const_reverse_iterator(end()); }\n+      const_reverse_iterator\n+      crbegin() const noexcept\n+      { return const_reverse_iterator(end()); }\n \n-    const_reverse_iterator\n-    crend() const noexcept\n-    { return const_reverse_iterator(begin()); }\n+      const_reverse_iterator\n+      crend() const noexcept\n+      { return const_reverse_iterator(begin()); }\n #endif\n \n-    // 21.3.3 capacity:\n-    using _Base::size;\n-    using _Base::length;\n-    using _Base::max_size;\n+      // 21.3.3 capacity:\n+      using _Base::size;\n+      using _Base::length;\n+      using _Base::max_size;\n \n-    void\n-    resize(size_type __n, _CharT __c)\n-    {\n-      _Base::resize(__n, __c);\n-      this->_M_invalidate_all();\n-    }\n+      void\n+      resize(size_type __n, _CharT __c)\n+      {\n+\t_Base::resize(__n, __c);\n+\tthis->_M_invalidate_all();\n+      }\n \n-    void\n-    resize(size_type __n)\n-    { this->resize(__n, _CharT()); }\n+      void\n+      resize(size_type __n)\n+      { this->resize(__n, _CharT()); }\n \n #if __cplusplus >= 201103L\n-    void\n-    shrink_to_fit() noexcept\n-    {\n-      if (capacity() > size())\n-\t{\n-\t  __try\n-\t    {\n-\t      reserve(0);\n-\t      this->_M_invalidate_all();\n-\t    }\n-\t  __catch(...)\n-\t    { }\n-\t}\n-    }\n+      void\n+      shrink_to_fit() noexcept\n+      {\n+\tif (capacity() > size())\n+\t  {\n+\t    __try\n+\t      {\n+\t\treserve(0);\n+\t\tthis->_M_invalidate_all();\n+\t      }\n+\t    __catch(...)\n+\t      { }\n+\t  }\n+      }\n #endif\n \n-    using _Base::capacity;\n-    using _Base::reserve;\n+      using _Base::capacity;\n+      using _Base::reserve;\n \n-    void\n-    clear() // _GLIBCXX_NOEXCEPT\n-    {\n-      _Base::clear();\n-      this->_M_invalidate_all();\n-    }\n+      void\n+      clear() // _GLIBCXX_NOEXCEPT\n+      {\n+\t_Base::clear();\n+\tthis->_M_invalidate_all();\n+      }\n \n-    using _Base::empty;\n+      using _Base::empty;\n \n-    // 21.3.4 element access:\n-    const_reference\n-    operator[](size_type __pos) const _GLIBCXX_NOEXCEPT\n-    {\n-      _GLIBCXX_DEBUG_VERIFY(__pos <= this->size(),\n-\t\t\t    _M_message(__gnu_debug::__msg_subscript_oob)\n-\t\t\t    ._M_sequence(*this, \"this\")\n-\t\t\t    ._M_integer(__pos, \"__pos\")\n-\t\t\t    ._M_integer(this->size(), \"size\"));\n-      return _M_base()[__pos];\n-    }\n+      // 21.3.4 element access:\n+      const_reference\n+      operator[](size_type __pos) const _GLIBCXX_NOEXCEPT\n+      {\n+\t_GLIBCXX_DEBUG_VERIFY(__pos <= this->size(),\n+\t\t\t      _M_message(__gnu_debug::__msg_subscript_oob)\n+\t\t\t      ._M_sequence(*this, \"this\")\n+\t\t\t      ._M_integer(__pos, \"__pos\")\n+\t\t\t      ._M_integer(this->size(), \"size\"));\n+\treturn _M_base()[__pos];\n+      }\n \n-    reference\n-    operator[](size_type __pos) // _GLIBCXX_NOEXCEPT\n-    {\n+      reference\n+      operator[](size_type __pos) // _GLIBCXX_NOEXCEPT\n+      {\n #if __cplusplus < 201103L && defined(_GLIBCXX_DEBUG_PEDANTIC)\n-      __glibcxx_check_subscript(__pos);\n+\t__glibcxx_check_subscript(__pos);\n #else\n-      // as an extension v3 allows s[s.size()] when s is non-const.\n-      _GLIBCXX_DEBUG_VERIFY(__pos <= this->size(),\n-\t\t\t    _M_message(__gnu_debug::__msg_subscript_oob)\n-\t\t\t    ._M_sequence(*this, \"this\")\n-\t\t\t    ._M_integer(__pos, \"__pos\")\n-\t\t\t    ._M_integer(this->size(), \"size\"));\n+\t// as an extension v3 allows s[s.size()] when s is non-const.\n+\t_GLIBCXX_DEBUG_VERIFY(__pos <= this->size(),\n+\t\t\t      _M_message(__gnu_debug::__msg_subscript_oob)\n+\t\t\t      ._M_sequence(*this, \"this\")\n+\t\t\t      ._M_integer(__pos, \"__pos\")\n+\t\t\t      ._M_integer(this->size(), \"size\"));\n #endif\n-      return _M_base()[__pos];\n-    }\n+\treturn _M_base()[__pos];\n+      }\n \n-    using _Base::at;\n+      using _Base::at;\n \n #if __cplusplus >= 201103L\n-    using _Base::front;\n-    using _Base::back;\n+      using _Base::front;\n+      using _Base::back;\n #endif\n \n-    // 21.3.5 modifiers:\n-    basic_string&\n-    operator+=(const basic_string& __str)\n-    {\n-      _M_base() += __str;\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n+      // 21.3.5 modifiers:\n+      basic_string&\n+      operator+=(const basic_string& __str)\n+      {\n+\t_M_base() += __str;\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n \n-    basic_string&\n-    operator+=(const _CharT* __s)\n-    {\n-      __glibcxx_check_string(__s);\n-      _M_base() += __s;\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n+      basic_string&\n+      operator+=(const _CharT* __s)\n+      {\n+\t__glibcxx_check_string(__s);\n+\t_M_base() += __s;\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n \n-    basic_string&\n-    operator+=(_CharT __c)\n-    {\n-      _M_base() += __c;\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n+      basic_string&\n+      operator+=(_CharT __c)\n+      {\n+\t_M_base() += __c;\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n \n #if __cplusplus >= 201103L\n-    basic_string&\n-    operator+=(std::initializer_list<_CharT> __l)\n-    {\n-      _M_base() += __l;\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n+      basic_string&\n+      operator+=(std::initializer_list<_CharT> __l)\n+      {\n+\t_M_base() += __l;\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n #endif // C++11\n \n-    basic_string&\n-    append(const basic_string& __str)\n-    {\n-      _Base::append(__str);\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n-\n-    basic_string&\n-    append(const basic_string& __str, size_type __pos, size_type __n)\n-    {\n-      _Base::append(__str, __pos, __n);\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n-\n-    basic_string&\n-    append(const _CharT* __s, size_type __n)\n-    {\n-      __glibcxx_check_string_len(__s, __n);\n-      _Base::append(__s, __n);\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n-\n-    basic_string&\n-    append(const _CharT* __s)\n-    {\n-      __glibcxx_check_string(__s);\n-      _Base::append(__s);\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n+      basic_string&\n+      append(const basic_string& __str)\n+      {\n+\t_Base::append(__str);\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n \n-    basic_string&\n-    append(size_type __n, _CharT __c)\n-    {\n-      _Base::append(__n, __c);\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n+      basic_string&\n+      append(const basic_string& __str, size_type __pos, size_type __n)\n+      {\n+\t_Base::append(__str, __pos, __n);\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n \n-    template<typename _InputIterator>\n       basic_string&\n-      append(_InputIterator __first, _InputIterator __last)\n+      append(const _CharT* __s, size_type __n)\n       {\n-\ttypename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n-\t__glibcxx_check_valid_range2(__first, __last, __dist);\n+\t__glibcxx_check_string_len(__s, __n);\n+\t_Base::append(__s, __n);\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n \n-\tif (__dist.second >= __dp_sign)\n-\t  _Base::append(__gnu_debug::__unsafe(__first),\n-\t\t\t__gnu_debug::__unsafe(__last));\n-\telse\n-\t  _Base::append(__first, __last);\n+      basic_string&\n+      append(const _CharT* __s)\n+      {\n+\t__glibcxx_check_string(__s);\n+\t_Base::append(__s);\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n \n+      basic_string&\n+      append(size_type __n, _CharT __c)\n+      {\n+\t_Base::append(__n, __c);\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n \n-    // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-    // 7. string clause minor problems\n-    void\n-    push_back(_CharT __c)\n-    {\n-      _Base::push_back(__c);\n-      this->_M_invalidate_all();\n-    }\n+      template<typename _InputIterator>\n+\tbasic_string&\n+\tappend(_InputIterator __first, _InputIterator __last)\n+\t{\n+\t  typename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n+\t  __glibcxx_check_valid_range2(__first, __last, __dist);\n \n-    basic_string&\n-    assign(const basic_string& __x)\n-    {\n-      _Base::assign(__x);\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n+\t  if (__dist.second >= __dp_sign)\n+\t    _Base::append(__gnu_debug::__unsafe(__first),\n+\t\t\t  __gnu_debug::__unsafe(__last));\n+\t  else\n+\t    _Base::append(__first, __last);\n \n-#if __cplusplus >= 201103L\n-    basic_string&\n-    assign(basic_string&& __x)\n-    noexcept(noexcept(std::declval<_Base&>().assign(std::move(__x))))\n-    {\n-      _Base::assign(std::move(__x));\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n-#endif // C++11\n+\t  this->_M_invalidate_all();\n+\t  return *this;\n+\t}\n \n-    basic_string&\n-    assign(const basic_string& __str, size_type __pos, size_type __n)\n-    {\n-      _Base::assign(__str, __pos, __n);\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 7. string clause minor problems\n+      void\n+      push_back(_CharT __c)\n+      {\n+\t_Base::push_back(__c);\n+\tthis->_M_invalidate_all();\n+      }\n \n-    basic_string&\n-    assign(const _CharT* __s, size_type __n)\n-    {\n-      __glibcxx_check_string_len(__s, __n);\n-      _Base::assign(__s, __n);\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n+      basic_string&\n+      assign(const basic_string& __x)\n+      {\n+\t_Base::assign(__x);\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n \n-    basic_string&\n-    assign(const _CharT* __s)\n-    {\n-      __glibcxx_check_string(__s);\n-      _Base::assign(__s);\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n+#if __cplusplus >= 201103L\n+      basic_string&\n+      assign(basic_string&& __x)\n+      noexcept(noexcept(std::declval<_Base&>().assign(std::move(__x))))\n+      {\n+\t_Base::assign(std::move(__x));\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n+#endif // C++11\n \n-    basic_string&\n-    assign(size_type __n, _CharT __c)\n-    {\n-      _Base::assign(__n, __c);\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n+      basic_string&\n+      assign(const basic_string& __str, size_type __pos, size_type __n)\n+      {\n+\t_Base::assign(__str, __pos, __n);\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n \n-    template<typename _InputIterator>\n       basic_string&\n-      assign(_InputIterator __first, _InputIterator __last)\n+      assign(const _CharT* __s, size_type __n)\n       {\n-\ttypename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n-\t__glibcxx_check_valid_range2(__first, __last, __dist);\n+\t__glibcxx_check_string_len(__s, __n);\n+\t_Base::assign(__s, __n);\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n \n-\tif (__dist.second >= __dp_sign)\n-\t  _Base::assign(__gnu_debug::__unsafe(__first),\n-\t\t\t__gnu_debug::__unsafe(__last));\n-\telse\n-\t  _Base::assign(__first, __last);\n+      basic_string&\n+      assign(const _CharT* __s)\n+      {\n+\t__glibcxx_check_string(__s);\n+\t_Base::assign(__s);\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n \n+      basic_string&\n+      assign(size_type __n, _CharT __c)\n+      {\n+\t_Base::assign(__n, __c);\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n \n-#if __cplusplus >= 201103L\n-    basic_string&\n-    assign(std::initializer_list<_CharT> __l)\n-    {\n-      _Base::assign(__l);\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n-#endif // C++11\n+      template<typename _InputIterator>\n+\tbasic_string&\n+\tassign(_InputIterator __first, _InputIterator __last)\n+\t{\n+\t  typename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n+\t  __glibcxx_check_valid_range2(__first, __last, __dist);\n \n-    basic_string&\n-    insert(size_type __pos1, const basic_string& __str)\n-    {\n-      _Base::insert(__pos1, __str);\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n+\t  if (__dist.second >= __dp_sign)\n+\t    _Base::assign(__gnu_debug::__unsafe(__first),\n+\t\t\t  __gnu_debug::__unsafe(__last));\n+\t  else\n+\t    _Base::assign(__first, __last);\n \n-    basic_string&\n-    insert(size_type __pos1, const basic_string& __str,\n-\t   size_type __pos2, size_type __n)\n-    {\n-      _Base::insert(__pos1, __str, __pos2, __n);\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n+\t  this->_M_invalidate_all();\n+\t  return *this;\n+\t}\n \n-    basic_string&\n-    insert(size_type __pos, const _CharT* __s, size_type __n)\n-    {\n-      __glibcxx_check_string(__s);\n-      _Base::insert(__pos, __s, __n);\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n+#if __cplusplus >= 201103L\n+      basic_string&\n+      assign(std::initializer_list<_CharT> __l)\n+      {\n+\t_Base::assign(__l);\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n+#endif // C++11\n \n-    basic_string&\n-    insert(size_type __pos, const _CharT* __s)\n-    {\n-      __glibcxx_check_string(__s);\n-      _Base::insert(__pos, __s);\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n+      basic_string&\n+      insert(size_type __pos1, const basic_string& __str)\n+      {\n+\t_Base::insert(__pos1, __str);\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n \n-    basic_string&\n-    insert(size_type __pos, size_type __n, _CharT __c)\n-    {\n-      _Base::insert(__pos, __n, __c);\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n+      basic_string&\n+      insert(size_type __pos1, const basic_string& __str,\n+\t     size_type __pos2, size_type __n)\n+      {\n+\t_Base::insert(__pos1, __str, __pos2, __n);\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n \n-    iterator\n-    insert(const_iterator __p, _CharT __c)\n-    {\n-      __glibcxx_check_insert(__p);\n-      typename _Base::iterator __res = _Base::insert(__p.base(), __c);\n-      this->_M_invalidate_all();\n-      return iterator(__res, this);\n-    }\n+      basic_string&\n+      insert(size_type __pos, const _CharT* __s, size_type __n)\n+      {\n+\t__glibcxx_check_string(__s);\n+\t_Base::insert(__pos, __s, __n);\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n \n-    iterator\n-    insert(const_iterator __p, size_type __n, _CharT __c)\n-    {\n-      __glibcxx_check_insert(__p);\n-      typename _Base::iterator __res = _Base::insert(__p.base(), __n, __c);\n-      this->_M_invalidate_all();\n-      return iterator(__res, this);\n-    }\n+      basic_string&\n+      insert(size_type __pos, const _CharT* __s)\n+      {\n+\t__glibcxx_check_string(__s);\n+\t_Base::insert(__pos, __s);\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n+\n+      basic_string&\n+      insert(size_type __pos, size_type __n, _CharT __c)\n+      {\n+\t_Base::insert(__pos, __n, __c);\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n \n-    template<typename _InputIterator>\n       iterator\n-      insert(const_iterator __p, _InputIterator __first, _InputIterator __last)\n+      insert(const_iterator __p, _CharT __c)\n       {\n-\ttypename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n-\t__glibcxx_check_insert_range(__p, __first, __last, __dist);\n+\t__glibcxx_check_insert(__p);\n+\ttypename _Base::iterator __res = _Base::insert(__p.base(), __c);\n+\tthis->_M_invalidate_all();\n+\treturn iterator(__res, this);\n+      }\n \n-\ttypename _Base::iterator __res;\n-\tif (__dist.second >= __dp_sign)\n-\t  __res = _Base::insert(__p.base(), __gnu_debug::__unsafe(__first),\n-\t\t\t\t__gnu_debug::__unsafe(__last));\n-\telse\n-\t  __res = _Base::insert(__p.base(), __first, __last);\n+      iterator\n+      insert(const_iterator __p, size_type __n, _CharT __c)\n+      {\n+\t__glibcxx_check_insert(__p);\n+\ttypename _Base::iterator __res = _Base::insert(__p.base(), __n, __c);\n \tthis->_M_invalidate_all();\n \treturn iterator(__res, this);\n       }\n \n+      template<typename _InputIterator>\n+\titerator\n+\tinsert(const_iterator __p,\n+\t       _InputIterator __first, _InputIterator __last)\n+\t{\n+\t  typename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n+\t  __glibcxx_check_insert_range(__p, __first, __last, __dist);\n+\n+\t  typename _Base::iterator __res;\n+\t  if (__dist.second >= __dp_sign)\n+\t    __res = _Base::insert(__p.base(), __gnu_debug::__unsafe(__first),\n+\t\t\t\t  __gnu_debug::__unsafe(__last));\n+\t  else\n+\t    __res = _Base::insert(__p.base(), __first, __last);\n+\t  this->_M_invalidate_all();\n+\t  return iterator(__res, this);\n+\t}\n+\n #if __cplusplus >= 201103L\n-    iterator\n-    insert(const_iterator __p, std::initializer_list<_CharT> __l)\n-    {\n-      __glibcxx_check_insert(__p);\n-      const auto __res = _Base::insert(__p.base(), __l);\n-      this->_M_invalidate_all();\n-      return iterator(__res, this);\n-    }\n+      iterator\n+      insert(const_iterator __p, std::initializer_list<_CharT> __l)\n+      {\n+\t__glibcxx_check_insert(__p);\n+\tconst auto __res = _Base::insert(__p.base(), __l);\n+\tthis->_M_invalidate_all();\n+\treturn iterator(__res, this);\n+      }\n #endif // C++11\n \n-    basic_string&\n-    erase(size_type __pos = 0, size_type __n = _Base::npos)\n-    {\n-      _Base::erase(__pos, __n);\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n+      basic_string&\n+      erase(size_type __pos = 0, size_type __n = _Base::npos)\n+      {\n+\t_Base::erase(__pos, __n);\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n \n-    iterator\n-    erase(iterator __position)\n-    {\n-      __glibcxx_check_erase(__position);\n-      typename _Base::iterator __res = _Base::erase(__position.base());\n-      this->_M_invalidate_all();\n-      return iterator(__res, this);\n-    }\n+      iterator\n+      erase(iterator __position)\n+      {\n+\t__glibcxx_check_erase(__position);\n+\ttypename _Base::iterator __res = _Base::erase(__position.base());\n+\tthis->_M_invalidate_all();\n+\treturn iterator(__res, this);\n+      }\n \n-    iterator\n-    erase(iterator __first, iterator __last)\n-    {\n-      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-      // 151. can't currently clear() empty container\n-      __glibcxx_check_erase_range(__first, __last);\n-      typename _Base::iterator __res = _Base::erase(__first.base(),\n-\t\t\t\t\t\t    __last.base());\n-      this->_M_invalidate_all();\n-      return iterator(__res, this);\n-    }\n+      iterator\n+      erase(iterator __first, iterator __last)\n+      {\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// 151. can't currently clear() empty container\n+\t__glibcxx_check_erase_range(__first, __last);\n+\ttypename _Base::iterator __res = _Base::erase(__first.base(),\n+\t\t\t\t\t\t      __last.base());\n+\tthis->_M_invalidate_all();\n+\treturn iterator(__res, this);\n+      }\n \n #if __cplusplus >= 201103L\n-    void\n-    pop_back() // noexcept\n-    {\n-      __glibcxx_check_nonempty();\n-      _Base::pop_back();\n-      this->_M_invalidate_all();\n-    }\n+      void\n+      pop_back() // noexcept\n+      {\n+\t__glibcxx_check_nonempty();\n+\t_Base::pop_back();\n+\tthis->_M_invalidate_all();\n+      }\n #endif // C++11\n \n-    basic_string&\n-    replace(size_type __pos1, size_type __n1, const basic_string& __str)\n-    {\n-      _Base::replace(__pos1, __n1, __str);\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n-\n-    basic_string&\n-    replace(size_type __pos1, size_type __n1, const basic_string& __str,\n-\t    size_type __pos2, size_type __n2)\n-    {\n-      _Base::replace(__pos1, __n1, __str, __pos2, __n2);\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n-\n-    basic_string&\n-    replace(size_type __pos, size_type __n1, const _CharT* __s,\n-\t    size_type __n2)\n-    {\n-      __glibcxx_check_string_len(__s, __n2);\n-      _Base::replace(__pos, __n1, __s, __n2);\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n-\n-    basic_string&\n-    replace(size_type __pos, size_type __n1, const _CharT* __s)\n-    {\n-      __glibcxx_check_string(__s);\n-      _Base::replace(__pos, __n1, __s);\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n-\n-    basic_string&\n-    replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)\n-    {\n-      _Base::replace(__pos, __n1, __n2, __c);\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n+      basic_string&\n+      replace(size_type __pos1, size_type __n1, const basic_string& __str)\n+      {\n+\t_Base::replace(__pos1, __n1, __str);\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n \n-    basic_string&\n-    replace(iterator __i1, iterator __i2, const basic_string& __str)\n-    {\n-      __glibcxx_check_erase_range(__i1, __i2);\n-      _Base::replace(__i1.base(), __i2.base(), __str);\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n+      basic_string&\n+      replace(size_type __pos1, size_type __n1, const basic_string& __str,\n+\t      size_type __pos2, size_type __n2)\n+      {\n+\t_Base::replace(__pos1, __n1, __str, __pos2, __n2);\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n \n-    basic_string&\n-    replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)\n-    {\n-      __glibcxx_check_erase_range(__i1, __i2);\n-      __glibcxx_check_string_len(__s, __n);\n-      _Base::replace(__i1.base(), __i2.base(), __s, __n);\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n+      basic_string&\n+      replace(size_type __pos, size_type __n1, const _CharT* __s,\n+\t      size_type __n2)\n+      {\n+\t__glibcxx_check_string_len(__s, __n2);\n+\t_Base::replace(__pos, __n1, __s, __n2);\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n \n-    basic_string&\n-    replace(iterator __i1, iterator __i2, const _CharT* __s)\n-    {\n-      __glibcxx_check_erase_range(__i1, __i2);\n-      __glibcxx_check_string(__s);\n-      _Base::replace(__i1.base(), __i2.base(), __s);\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n+      basic_string&\n+      replace(size_type __pos, size_type __n1, const _CharT* __s)\n+      {\n+\t__glibcxx_check_string(__s);\n+\t_Base::replace(__pos, __n1, __s);\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n \n-    basic_string&\n-    replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)\n-    {\n-      __glibcxx_check_erase_range(__i1, __i2);\n-      _Base::replace(__i1.base(), __i2.base(), __n, __c);\n-      this->_M_invalidate_all();\n-      return *this;\n-    }\n+      basic_string&\n+      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)\n+      {\n+\t_Base::replace(__pos, __n1, __n2, __c);\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n \n-    template<typename _InputIterator>\n       basic_string&\n-      replace(iterator __i1, iterator __i2,\n-\t      _InputIterator __j1, _InputIterator __j2)\n+      replace(iterator __i1, iterator __i2, const basic_string& __str)\n       {\n \t__glibcxx_check_erase_range(__i1, __i2);\n+\t_Base::replace(__i1.base(), __i2.base(), __str);\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n \n-\ttypename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n-\t__glibcxx_check_valid_range2(__j1, __j2, __dist);\n+      basic_string&\n+      replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)\n+      {\n+\t__glibcxx_check_erase_range(__i1, __i2);\n+\t__glibcxx_check_string_len(__s, __n);\n+\t_Base::replace(__i1.base(), __i2.base(), __s, __n);\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n \n-\tif (__dist.second >= __dp_sign)\n-\t  _Base::replace(__i1.base(), __i2.base(),\n-\t\t\t __gnu_debug::__unsafe(__j1),\n-\t\t\t __gnu_debug::__unsafe(__j2));\n-\telse\n-\t  _Base::replace(__i1.base(), __i2.base(), __j1, __j2);\n+      basic_string&\n+      replace(iterator __i1, iterator __i2, const _CharT* __s)\n+      {\n+\t__glibcxx_check_erase_range(__i1, __i2);\n+\t__glibcxx_check_string(__s);\n+\t_Base::replace(__i1.base(), __i2.base(), __s);\n+\tthis->_M_invalidate_all();\n+\treturn *this;\n+      }\n \n+      basic_string&\n+      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)\n+      {\n+\t__glibcxx_check_erase_range(__i1, __i2);\n+\t_Base::replace(__i1.base(), __i2.base(), __n, __c);\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n \n+      template<typename _InputIterator>\n+\tbasic_string&\n+\treplace(iterator __i1, iterator __i2,\n+\t\t_InputIterator __j1, _InputIterator __j2)\n+\t{\n+\t  __glibcxx_check_erase_range(__i1, __i2);\n+\n+\t  typename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n+\t  __glibcxx_check_valid_range2(__j1, __j2, __dist);\n+\n+\t  if (__dist.second >= __dp_sign)\n+\t    _Base::replace(__i1.base(), __i2.base(),\n+\t\t\t   __gnu_debug::__unsafe(__j1),\n+\t\t\t   __gnu_debug::__unsafe(__j2));\n+\t  else\n+\t    _Base::replace(__i1.base(), __i2.base(), __j1, __j2);\n+\n+\t  this->_M_invalidate_all();\n+\t  return *this;\n+\t}\n+\n #if __cplusplus >= 201103L\n       basic_string& replace(iterator __i1, iterator __i2,\n \t\t\t    std::initializer_list<_CharT> __l)\n@@ -742,233 +785,233 @@ template<typename _CharT, typename _Traits = std::char_traits<_CharT>,\n       }\n #endif // C++11\n \n-    size_type\n-    copy(_CharT* __s, size_type __n, size_type __pos = 0) const\n-    {\n-      __glibcxx_check_string_len(__s, __n);\n-      return _Base::copy(__s, __n, __pos);\n-    }\n+      size_type\n+      copy(_CharT* __s, size_type __n, size_type __pos = 0) const\n+      {\n+\t__glibcxx_check_string_len(__s, __n);\n+\treturn _Base::copy(__s, __n, __pos);\n+      }\n \n-    void\n-    swap(basic_string& __x)\n-    _GLIBCXX_NOEXCEPT_IF(std::__is_nothrow_swappable<_Base>::value)\n-    {\n-      _Safe::_M_swap(__x);\n-      _Base::swap(__x);\n-    }\n+      void\n+      swap(basic_string& __x)\n+\t_GLIBCXX_NOEXCEPT_IF(std::__is_nothrow_swappable<_Base>::value)\n+      {\n+\t_Safe::_M_swap(__x);\n+\t_Base::swap(__x);\n+      }\n \n-    // 21.3.6 string operations:\n-    const _CharT*\n-    c_str() const _GLIBCXX_NOEXCEPT\n-    {\n-      const _CharT* __res = _Base::c_str();\n-      this->_M_invalidate_all();\n-      return __res;\n-    }\n+      // 21.3.6 string operations:\n+      const _CharT*\n+      c_str() const _GLIBCXX_NOEXCEPT\n+      {\n+\tconst _CharT* __res = _Base::c_str();\n+\tthis->_M_invalidate_all();\n+\treturn __res;\n+      }\n \n-    const _CharT*\n-    data() const _GLIBCXX_NOEXCEPT\n-    {\n-      const _CharT* __res = _Base::data();\n-      this->_M_invalidate_all();\n-      return __res;\n-    }\n+      const _CharT*\n+      data() const _GLIBCXX_NOEXCEPT\n+      {\n+\tconst _CharT* __res = _Base::data();\n+\tthis->_M_invalidate_all();\n+\treturn __res;\n+      }\n \n-    using _Base::get_allocator;\n+      using _Base::get_allocator;\n \n-    size_type\n-    find(const basic_string& __str, size_type __pos = 0) const\n-      _GLIBCXX_NOEXCEPT\n-    { return _Base::find(__str, __pos); }\n+      size_type\n+      find(const basic_string& __str, size_type __pos = 0) const\n+\t_GLIBCXX_NOEXCEPT\n+      { return _Base::find(__str, __pos); }\n \n-    size_type\n-    find(const _CharT* __s, size_type __pos, size_type __n) const\n-    {\n-      __glibcxx_check_string(__s);\n-      return _Base::find(__s, __pos, __n);\n-    }\n+      size_type\n+      find(const _CharT* __s, size_type __pos, size_type __n) const\n+      {\n+\t__glibcxx_check_string(__s);\n+\treturn _Base::find(__s, __pos, __n);\n+      }\n \n-    size_type\n-    find(const _CharT* __s, size_type __pos = 0) const\n-    {\n-      __glibcxx_check_string(__s);\n-      return _Base::find(__s, __pos);\n-    }\n+      size_type\n+      find(const _CharT* __s, size_type __pos = 0) const\n+      {\n+\t__glibcxx_check_string(__s);\n+\treturn _Base::find(__s, __pos);\n+      }\n \n-    size_type\n-    find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT\n-    { return _Base::find(__c, __pos); }\n+      size_type\n+      find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT\n+      { return _Base::find(__c, __pos); }\n \n-    size_type\n-    rfind(const basic_string& __str, size_type __pos = _Base::npos) const\n-      _GLIBCXX_NOEXCEPT\n-    { return _Base::rfind(__str, __pos); }\n+      size_type\n+      rfind(const basic_string& __str, size_type __pos = _Base::npos) const\n+\t_GLIBCXX_NOEXCEPT\n+      { return _Base::rfind(__str, __pos); }\n \n-    size_type\n-    rfind(const _CharT* __s, size_type __pos, size_type __n) const\n-    {\n-      __glibcxx_check_string_len(__s, __n);\n-      return _Base::rfind(__s, __pos, __n);\n-    }\n+      size_type\n+      rfind(const _CharT* __s, size_type __pos, size_type __n) const\n+      {\n+\t__glibcxx_check_string_len(__s, __n);\n+\treturn _Base::rfind(__s, __pos, __n);\n+      }\n \n-    size_type\n-    rfind(const _CharT* __s, size_type __pos = _Base::npos) const\n-    {\n-      __glibcxx_check_string(__s);\n-      return _Base::rfind(__s, __pos);\n-    }\n+      size_type\n+      rfind(const _CharT* __s, size_type __pos = _Base::npos) const\n+      {\n+\t__glibcxx_check_string(__s);\n+\treturn _Base::rfind(__s, __pos);\n+      }\n \n-    size_type\n-    rfind(_CharT __c, size_type __pos = _Base::npos) const _GLIBCXX_NOEXCEPT\n-    { return _Base::rfind(__c, __pos); }\n+      size_type\n+      rfind(_CharT __c, size_type __pos = _Base::npos) const _GLIBCXX_NOEXCEPT\n+      { return _Base::rfind(__c, __pos); }\n \n-    size_type\n-    find_first_of(const basic_string& __str, size_type __pos = 0) const\n-      _GLIBCXX_NOEXCEPT\n-    { return _Base::find_first_of(__str, __pos); }\n+      size_type\n+      find_first_of(const basic_string& __str, size_type __pos = 0) const\n+\t_GLIBCXX_NOEXCEPT\n+      { return _Base::find_first_of(__str, __pos); }\n \n-    size_type\n-    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const\n-    {\n-      __glibcxx_check_string(__s);\n-      return _Base::find_first_of(__s, __pos, __n);\n-    }\n+      size_type\n+      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const\n+      {\n+\t__glibcxx_check_string(__s);\n+\treturn _Base::find_first_of(__s, __pos, __n);\n+      }\n \n-    size_type\n-    find_first_of(const _CharT* __s, size_type __pos = 0) const\n-    {\n-      __glibcxx_check_string(__s);\n-      return _Base::find_first_of(__s, __pos);\n-    }\n+      size_type\n+      find_first_of(const _CharT* __s, size_type __pos = 0) const\n+      {\n+\t__glibcxx_check_string(__s);\n+\treturn _Base::find_first_of(__s, __pos);\n+      }\n \n-    size_type\n-    find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT\n-    { return _Base::find_first_of(__c, __pos); }\n+      size_type\n+      find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT\n+      { return _Base::find_first_of(__c, __pos); }\n \n-    size_type\n-    find_last_of(const basic_string& __str,\n-\t\t size_type __pos = _Base::npos) const _GLIBCXX_NOEXCEPT\n-    { return _Base::find_last_of(__str, __pos); }\n+      size_type\n+      find_last_of(const basic_string& __str,\n+\t\t   size_type __pos = _Base::npos) const _GLIBCXX_NOEXCEPT\n+      { return _Base::find_last_of(__str, __pos); }\n \n-    size_type\n-    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const\n-    {\n-      __glibcxx_check_string(__s);\n-      return _Base::find_last_of(__s, __pos, __n);\n-    }\n+      size_type\n+      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const\n+      {\n+\t__glibcxx_check_string(__s);\n+\treturn _Base::find_last_of(__s, __pos, __n);\n+      }\n \n-    size_type\n-    find_last_of(const _CharT* __s, size_type __pos = _Base::npos) const\n-    {\n-      __glibcxx_check_string(__s);\n-      return _Base::find_last_of(__s, __pos);\n-    }\n+      size_type\n+      find_last_of(const _CharT* __s, size_type __pos = _Base::npos) const\n+      {\n+\t__glibcxx_check_string(__s);\n+\treturn _Base::find_last_of(__s, __pos);\n+      }\n \n-    size_type\n-    find_last_of(_CharT __c, size_type __pos = _Base::npos) const\n-      _GLIBCXX_NOEXCEPT\n-    { return _Base::find_last_of(__c, __pos); }\n+      size_type\n+      find_last_of(_CharT __c, size_type __pos = _Base::npos) const\n+\t_GLIBCXX_NOEXCEPT\n+      { return _Base::find_last_of(__c, __pos); }\n \n-    size_type\n-    find_first_not_of(const basic_string& __str, size_type __pos = 0) const\n-      _GLIBCXX_NOEXCEPT\n-    { return _Base::find_first_not_of(__str, __pos); }\n+      size_type\n+      find_first_not_of(const basic_string& __str, size_type __pos = 0) const\n+\t_GLIBCXX_NOEXCEPT\n+      { return _Base::find_first_not_of(__str, __pos); }\n \n-    size_type\n-    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const\n-    {\n-      __glibcxx_check_string_len(__s, __n);\n-      return _Base::find_first_not_of(__s, __pos, __n);\n-    }\n+      size_type\n+      find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const\n+      {\n+\t__glibcxx_check_string_len(__s, __n);\n+\treturn _Base::find_first_not_of(__s, __pos, __n);\n+      }\n \n-    size_type\n-    find_first_not_of(const _CharT* __s, size_type __pos = 0) const\n-    {\n-      __glibcxx_check_string(__s);\n-      return _Base::find_first_not_of(__s, __pos);\n-    }\n+      size_type\n+      find_first_not_of(const _CharT* __s, size_type __pos = 0) const\n+      {\n+\t__glibcxx_check_string(__s);\n+\treturn _Base::find_first_not_of(__s, __pos);\n+      }\n \n-    size_type\n-    find_first_not_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT\n-    { return _Base::find_first_not_of(__c, __pos); }\n+      size_type\n+      find_first_not_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT\n+      { return _Base::find_first_not_of(__c, __pos); }\n \n-    size_type\n-    find_last_not_of(const basic_string& __str,\n-\t\t\t\t  size_type __pos = _Base::npos) const\n-      _GLIBCXX_NOEXCEPT\n-    { return _Base::find_last_not_of(__str, __pos); }\n+      size_type\n+      find_last_not_of(const basic_string& __str,\n+\t\t       size_type __pos = _Base::npos) const\n+\t_GLIBCXX_NOEXCEPT\n+      { return _Base::find_last_not_of(__str, __pos); }\n \n-    size_type\n-    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const\n-    {\n-      __glibcxx_check_string(__s);\n-      return _Base::find_last_not_of(__s, __pos, __n);\n-    }\n+      size_type\n+      find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const\n+      {\n+\t__glibcxx_check_string(__s);\n+\treturn _Base::find_last_not_of(__s, __pos, __n);\n+      }\n \n-    size_type\n-    find_last_not_of(const _CharT* __s, size_type __pos = _Base::npos) const\n-    {\n-      __glibcxx_check_string(__s);\n-      return _Base::find_last_not_of(__s, __pos);\n-    }\n+      size_type\n+      find_last_not_of(const _CharT* __s, size_type __pos = _Base::npos) const\n+      {\n+\t__glibcxx_check_string(__s);\n+\treturn _Base::find_last_not_of(__s, __pos);\n+      }\n \n-    size_type\n-    find_last_not_of(_CharT __c, size_type __pos = _Base::npos) const\n-      _GLIBCXX_NOEXCEPT\n-    { return _Base::find_last_not_of(__c, __pos); }\n+      size_type\n+      find_last_not_of(_CharT __c, size_type __pos = _Base::npos) const\n+\t_GLIBCXX_NOEXCEPT\n+      { return _Base::find_last_not_of(__c, __pos); }\n \n-    basic_string\n-    substr(size_type __pos = 0, size_type __n = _Base::npos) const\n-    { return basic_string(_Base::substr(__pos, __n)); }\n+      basic_string\n+      substr(size_type __pos = 0, size_type __n = _Base::npos) const\n+      { return basic_string(_Base::substr(__pos, __n)); }\n \n-    int\n-    compare(const basic_string& __str) const\n-    { return _Base::compare(__str); }\n+      int\n+      compare(const basic_string& __str) const\n+      { return _Base::compare(__str); }\n \n-    int\n-    compare(size_type __pos1, size_type __n1,\n-\t\t  const basic_string& __str) const\n-    { return _Base::compare(__pos1, __n1, __str); }\n+      int\n+      compare(size_type __pos1, size_type __n1,\n+\t      const basic_string& __str) const\n+      { return _Base::compare(__pos1, __n1, __str); }\n \n-    int\n-    compare(size_type __pos1, size_type __n1, const basic_string& __str,\n+      int\n+      compare(size_type __pos1, size_type __n1, const basic_string& __str,\n \t      size_type __pos2, size_type __n2) const\n-    { return _Base::compare(__pos1, __n1, __str, __pos2, __n2); }\n+      { return _Base::compare(__pos1, __n1, __str, __pos2, __n2); }\n \n-    int\n-    compare(const _CharT* __s) const\n-    {\n-      __glibcxx_check_string(__s);\n-      return _Base::compare(__s);\n-    }\n+      int\n+      compare(const _CharT* __s) const\n+      {\n+\t__glibcxx_check_string(__s);\n+\treturn _Base::compare(__s);\n+      }\n \n-    //  _GLIBCXX_RESOLVE_LIB_DEFECTS\n-    //  5. string::compare specification questionable\n-    int\n-    compare(size_type __pos1, size_type __n1, const _CharT* __s) const\n-    {\n-      __glibcxx_check_string(__s);\n-      return _Base::compare(__pos1, __n1, __s);\n-    }\n+      //  _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      //  5. string::compare specification questionable\n+      int\n+      compare(size_type __pos1, size_type __n1, const _CharT* __s) const\n+      {\n+\t__glibcxx_check_string(__s);\n+\treturn _Base::compare(__pos1, __n1, __s);\n+      }\n \n-    //  _GLIBCXX_RESOLVE_LIB_DEFECTS\n-    //  5. string::compare specification questionable\n-    int\n-    compare(size_type __pos1, size_type __n1,const _CharT* __s,\n-\t    size_type __n2) const\n-    {\n-      __glibcxx_check_string_len(__s, __n2);\n-      return _Base::compare(__pos1, __n1, __s, __n2);\n-    }\n+      //  _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      //  5. string::compare specification questionable\n+      int\n+      compare(size_type __pos1, size_type __n1,const _CharT* __s,\n+\t      size_type __n2) const\n+      {\n+\t__glibcxx_check_string_len(__s, __n2);\n+\treturn _Base::compare(__pos1, __n1, __s, __n2);\n+      }\n \n-    _Base&\n-    _M_base() _GLIBCXX_NOEXCEPT\t\t{ return *this; }\n+      _Base&\n+      _M_base() _GLIBCXX_NOEXCEPT\t\t{ return *this; }\n \n-    const _Base&\n-    _M_base() const _GLIBCXX_NOEXCEPT\t{ return *this; }\n+      const _Base&\n+      _M_base() const _GLIBCXX_NOEXCEPT\t{ return *this; }\n \n-    using _Safe::_M_invalidate_all;\n-  };\n+      using _Safe::_M_invalidate_all;\n+    };\n \n   template<typename _CharT, typename _Traits, typename _Allocator>\n     inline basic_string<_CharT,_Traits,_Allocator>"}, {"sha": "99080582fbefe01201b79cbbd8b6650883830e76", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/debug/1_neg.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e736a9531b7ffda4fef17e70b33b6410efd98f7/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fdebug%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e736a9531b7ffda4fef17e70b33b6410efd98f7/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fdebug%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fdebug%2F1_neg.cc?ref=1e736a9531b7ffda4fef17e70b33b6410efd98f7", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-do run { xfail *-*-* } }\n+\n+#define _GLIBCXX_DEBUG_PEDANTIC\n+\n+#include <debug/string>\n+\n+void test01()\n+{\n+  const char* __null_str = 0;\n+  __gnu_debug::string str(__null_str, 1);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "baf64df023606a863a1a462365f8c87b78dab8c2", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/debug/2_neg.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e736a9531b7ffda4fef17e70b33b6410efd98f7/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fdebug%2F2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e736a9531b7ffda4fef17e70b33b6410efd98f7/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fdebug%2F2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fdebug%2F2_neg.cc?ref=1e736a9531b7ffda4fef17e70b33b6410efd98f7", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-do run { xfail *-*-* } }\n+\n+#define _GLIBCXX_DEBUG_PEDANTIC\n+\n+#include <debug/string>\n+\n+void test01()\n+{\n+  const char* __null_str = 0;\n+  __gnu_debug::string str(__null_str);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}