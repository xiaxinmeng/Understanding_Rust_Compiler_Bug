{"sha": "e96ccb30f5787417582b6ba5fde14c60aea5e9a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk2Y2NiMzBmNTc4NzQxNzU4MmI2YmE1ZmRlMTRjNjBhZWE1ZTlhMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-04-20T17:21:50Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-04-20T17:21:50Z"}, "message": "i386.md (ffs<mode>2): Macroize expander from ffs_cmove and ffsdi2 using SWI48 mode iterator.\n\n\t* config/i386/i386.md (ffs<mode>2): Macroize expander from ffs_cmove\n\tand ffsdi2 using SWI48 mode iterator.  Expand SImode insn through\n\tffsi2_no_cmove for !TARGET_CMOVE.\n\t(ffssi2_no_cmove): Rename from *ffs_no_cmove.  Make public.\n\t(ffssi2): Remove expander.\n\t(*ffs<mode>_1): Macroize insn from *ffs{si,di} using SWI48\n\tmode iterator.\n\t(ctz<mode>2): Ditto from ctz{si,di}2.\n\t(clz<mode>2): Macroize expander from ctz{hi,si,di}2 using SWI248\n\tmode iterator.\n\t(clz<mode>2_abm): Macroize insn from clz{hi,si,di}2_abm using SWI248\n\tmode iterator.\n\nFrom-SVN: r158569", "tree": {"sha": "8da98e488bb19db8fdb12e58d453d0a29c3788c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8da98e488bb19db8fdb12e58d453d0a29c3788c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e96ccb30f5787417582b6ba5fde14c60aea5e9a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e96ccb30f5787417582b6ba5fde14c60aea5e9a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e96ccb30f5787417582b6ba5fde14c60aea5e9a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e96ccb30f5787417582b6ba5fde14c60aea5e9a3/comments", "author": null, "committer": null, "parents": [{"sha": "4c0ab69d3b681c3f9b07ee29f7452bf2fb60b75a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c0ab69d3b681c3f9b07ee29f7452bf2fb60b75a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c0ab69d3b681c3f9b07ee29f7452bf2fb60b75a"}], "stats": {"total": 394, "additions": 154, "deletions": 240}, "files": [{"sha": "d4608caa6d8084b957f96c45a1bce8c8bc4d097a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 28, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e96ccb30f5787417582b6ba5fde14c60aea5e9a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e96ccb30f5787417582b6ba5fde14c60aea5e9a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e96ccb30f5787417582b6ba5fde14c60aea5e9a3", "patch": "@@ -1,3 +1,18 @@\n+2010-04-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (ffs<mode>2): Macroize expander from ffs_cmove\n+\tand ffsdi2 using SWI48 mode iterator.  Expand SImode insn through\n+\tffsi2_no_cmove for !TARGET_CMOVE.\n+\t(ffssi2_no_cmove): Rename from *ffs_no_cmove.  Make public.\n+\t(ffssi2): Remove expander.\n+\t(*ffs<mode>_1): Macroize insn from *ffs{si,di} using SWI48\n+\tmode iterator.\n+\t(ctz<mode>2): Ditto from ctz{si,di}2.\n+\t(clz<mode>2): Macroize expander from ctz{hi,si,di}2 using SWI248\n+\tmode iterator.\n+\t(clz<mode>2_abm): Macroize insn from clz{hi,si,di}2_abm using SWI248\n+\tmode iterator.\n+\n 2010-04-20  Jakub Jelinek  <jakub@redhat.com>\n \n \t* dwarf2out.c (AT_linkage_name): Define.\n@@ -10,7 +25,7 @@\n 2010-04-20  Xinliang David Li  <davidxl@gcc.gnu.org>\n \n \tPR middle-end/41952\n-\t* fold-const.c (fold_comparison): New folding rule. \n+\t* fold-const.c (fold_comparison): New folding rule.\n \n 2010-04-20  Anatoly Sokolov  <aesok@post.ru>\n \n@@ -33,13 +48,13 @@\n \n \t* cgraph.c (cgraph_remove_node): Kill bodies in other partitoin.\n \t(dump_cgraph_node): Dump new flags.\n-\t* cgraph.h (struct cgraph_node): Add flags reachable_from_other_partition\n-\tand in_other_partition.\n-\t(cgraph_can_remove_if_no_direct_calls_p): Functions used by other partition\n-\tcan not be removed.\n-\t* cgraphunit.c (cgraph_mark_functions_to_output): Functions used by the other\n-\tpartition must be output; silence sanity checking on leaking functions\n-\tbodies from other paritition.\n+\t* cgraph.h (struct cgraph_node): Add flags\n+\treachable_from_other_partition and in_other_partition.\n+\t(cgraph_can_remove_if_no_direct_calls_p): Functions used by\n+\tother partition can not be removed.\n+\t* cgraphunit.c (cgraph_mark_functions_to_output): Functions used by\n+\tthe other partition must be output; silence sanity checking on\n+\tleaking functions bodies from other paritition.\n \t* lto-cgraph.c (reachable_from_other_partition_p): New function.\n \t(lto_output_node): Output new flags; do not sanity check that inline\n \tclones are output; drop lto_forced_extern_inline_p code; do not mock\n@@ -65,8 +80,7 @@\n \n 2010-04-20  Richard Guenther  <rguenther@suse.de>\n \n-\t* tree-ssa-structalias.c (do_structure_copy): Properly handle\n-\tDEREF.\n+\t* tree-ssa-structalias.c (do_structure_copy): Properly handle DEREF.\n \t(dump_sa_points_to_info): Remove asserts.\n \t(init_base_vars): nothing_id isn't an escape point nor does it\n \thave pointers.\n@@ -133,8 +147,8 @@\n \n 2010-04-19  Jakub Jelinek  <jakub@redhat.com>\n \n-\t* dwarf2out.c (lower_bound_default): For DW_LANG_Python return\n-\t0 for -gdwarf-4.\n+\t* dwarf2out.c (lower_bound_default): For DW_LANG_Python return 0\n+\tfor -gdwarf-4.\n \n \tPR middle-end/43337\n \t* tree-nested.c (convert_nonlocal_omp_clauses): OMP_CLAUSE_PRIVATE\n@@ -201,7 +215,7 @@\n 2010-04-19 Ira Rosen <irar@il.ibm.com>\n \n \tPR tree-optimization/37027\n-\t* tree-vectorizer.h (struct _loop_vec_info): Add new field reductions \n+\t* tree-vectorizer.h (struct _loop_vec_info): Add new field reductions\n \tand macro to access it.\n \t(vectorizable_reduction): Add argument.\n \t(vect_get_slp_defs): Likewise.\n@@ -212,7 +226,7 @@\n \t(vect_create_epilog_for_reduction): Handle SLP. Modify documentation,\n \tadd new argument.\n \t(vectorizable_reduction): Likewise.\n-\t* tree-vect-stmts.c (vect_get_vec_defs): Update call to \n+\t* tree-vect-stmts.c (vect_get_vec_defs): Update call to\n \tvect_get_slp_defs.\n \t(vectorizable_type_demotion, vectorizable_type_promotion,\n \tvectorizable_store): Likewise.\n@@ -222,7 +236,7 @@\n \t(vect_build_slp_tree): Fix indentation. Check that there are no loads\n \tfrom different interleaving chains in same node.\n \t(vect_slp_rearrange_stmts): New function.\n-\t(vect_supported_load_permutation_p): Allow load permutations for \n+\t(vect_supported_load_permutation_p): Allow load permutations for\n \treductions. Call vect_slp_rearrange_stmts() to rearrange statements\n \tinside SLP nodes if necessary.\n \t(vect_analyze_slp_instance): Handle reductions.\n@@ -231,7 +245,7 @@\n \t(vect_detect_hybrid_slp_stmts): Skip reduction statements.\n \t(vect_get_constant_vectors): Create initial vectors for reductions\n \taccording to reduction code. Add new argument.\n-\t(vect_get_slp_defs): Add new argument, pass it to \n+\t(vect_get_slp_defs): Add new argument, pass it to\n \tvect_get_constant_vectors.\n \t(vect_schedule_slp_instance): Remove SLP tree root statements.\n \n@@ -263,7 +277,7 @@\n \n \t* gcc.c (main): Search for liblto_plugin.so with mode R_OK.\n \n-2010-04-18 Ira Rosen <irar@il.ibm.com> \n+2010-04-18 Ira Rosen <irar@il.ibm.com>\n \n \tPR tree-optimization/43771\n \t* tree-vect-slp.c (vect_supported_load_permutation_p): Check that\n@@ -352,7 +366,7 @@\n \n \t* config/i386/i386.md (*jcc_bt<mode>): Fix build breakage by adding\n \tmissing left parenthesis.\n-\t\n+\n 2010-04-16  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*bt<mode>): Macroize insn from *btsi and\n@@ -384,7 +398,7 @@\n \n \t* config/h8300/h8300.h (OK_FOR_U): Support 'U' constraint for H8300SX.\n \n-\t* config/h8300/h8300.md (movqi_h8sx, movhi_h8sx, movsi_h8sx, \n+\t* config/h8300/h8300.md (movqi_h8sx, movhi_h8sx, movsi_h8sx,\n \tcmphi_h8300hs_znvc, cmpsi, addhi3_h8sx) : Emit instructions in\n \t#xx:3 and #xx:4 mode.\n \n@@ -396,8 +410,7 @@\n \n 2010-04-16  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n-\t* configure.ac: Check for elf_getshdrstrndx or elf_getshstrndx\n-\tflavor.\n+\t* configure.ac: Check for elf_getshdrstrndx or elf_getshstrndx flavor.\n \t* configure: Regenerate.\n \t* config.in: Regenerate.\n \t* doc/install.texi (Prerequisites): Document that Solaris 2 libelf\n@@ -428,8 +441,7 @@\n \n 2010-04-16  Diego Novillo  <dnovillo@google.com>\n \n-\t* doc/invoke.texi: Explain how are unrecognized -Wno- warnings\n-\thandled.\n+\t* doc/invoke.texi: Explain how are unrecognized -Wno- warnings handled.\n \n 2010-04-16  Bernd Schmidt  <bernds@codesourcery.com>\n \n@@ -559,8 +571,7 @@\n \t(dump_points_to_solution): Likewise.\n \t* tree-dfa.c (dump_variable): Also dump DECL_PT_UID.\n \t* tree-inline.c (remap_ssa_name): Copy IPA points-to solution.\n-\t(remap_gimple_stmt): Reset call clobber/use information if\n-\tnecessary.\n+\t(remap_gimple_stmt): Reset call clobber/use information if necessary.\n \t(copy_decl_to_var): Copy DECL_PT_UID.\n \t(copy_result_decl_to_var): Likewise.\n \t* tree.c (make_node_stat): Initialize DECL_PT_UID.\n@@ -628,7 +639,7 @@\n \n \tPR target/43742\n \t* config/sh/sh.md (doloop_end_split): Remove \"+r\" constraint\n-\tin an input-only operand.\t\n+\tin an input-only operand.\n \n 2010-04-15  Anatoly Sokolov  <aesok@post.ru>\n \n@@ -637,7 +648,7 @@\n \t(double_int_negative_p): Convert to static inline function.\n \t* double-int.c (double_int_lshift, double_int_lshift): Add new function.\n \t(double_int_negative_p): Remove.\n-\t* tree.h (lshift_double, rshift_double): \n+\t* tree.h (lshift_double, rshift_double):\n \t* tree.c (build_low_bits_mask): Clean up, use double_int_* functions.\n \t* fold-const.c (fold_convert_const_int_from_real,\n \tfold_convert_const_int_from_fixed, div_if_zero_remainder): (Ditto.).\n@@ -647,7 +658,7 @@\n \t* expmed.c (mask_rtx, lshift_value): (Ditto.).\n \n 2010-04-14  Bernd Schmidt  <bernds@codesourcery.com>\n-\t\n+\n \tPR target/21803\n \t* ifcvt.c (cond_exec_process_if_block): Look for identical sequences\n \tat the start and end of the then/else blocks, and omit them from the"}, {"sha": "ef2414da96a5460d9add3c896ba15a9878e29075", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 115, "deletions": 212, "changes": 327, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e96ccb30f5787417582b6ba5fde14c60aea5e9a3/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e96ccb30f5787417582b6ba5fde14c60aea5e9a3/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e96ccb30f5787417582b6ba5fde14c60aea5e9a3", "patch": "@@ -7927,7 +7927,7 @@\n \t      (use (match_dup 1))\n \t      (clobber (reg:CC FLAGS_REG))])]\n {\n-  operands[5] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode) - 1);\n+  operands[5] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode)-1);\n \n   if (<MODE>mode != HImode\n       && (optimize_function_for_size_p (cfun) || TARGET_USE_CLTD))\n@@ -12175,38 +12175,33 @@\n   \"leave\"\n   [(set_attr \"type\" \"leave\")])\n \f\n-(define_expand \"ffssi2\"\n-  [(parallel\n-     [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t   (ffs:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))\n-      (clobber (match_scratch:SI 2 \"\"))\n-      (clobber (reg:CC FLAGS_REG))])]\n-  \"\"\n-{\n-  if (TARGET_CMOVE)\n-    {\n-      emit_insn (gen_ffs_cmove (operands[0], operands[1]));\n-      DONE;\n-    }\n-})\n+;; Bit manipulation instructions.\n \n-(define_expand \"ffs_cmove\"\n+(define_expand \"ffs<mode>2\"\n   [(set (match_dup 2) (const_int -1))\n    (parallel [(set (reg:CCZ FLAGS_REG)\n-\t\t   (compare:CCZ (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n-\t\t\t\t(const_int 0)))\n-\t      (set (match_operand:SI 0 \"register_operand\" \"\")\n-\t\t   (ctz:SI (match_dup 1)))])\n-   (set (match_dup 0) (if_then_else:SI\n+\t\t   (compare:CCZ\n+\t\t     (match_operand:SWI48 1 \"nonimmediate_operand\" \"\")\n+\t\t     (const_int 0)))\n+\t      (set (match_operand:SWI48 0 \"register_operand\" \"\")\n+\t\t   (ctz:SWI48 (match_dup 1)))])\n+   (set (match_dup 0) (if_then_else:SWI48\n \t\t\t(eq (reg:CCZ FLAGS_REG) (const_int 0))\n \t\t\t(match_dup 2)\n \t\t\t(match_dup 0)))\n-   (parallel [(set (match_dup 0) (plus:SI (match_dup 0) (const_int 1)))\n+   (parallel [(set (match_dup 0) (plus:SWI48 (match_dup 0) (const_int 1)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"TARGET_CMOVE\"\n-  \"operands[2] = gen_reg_rtx (SImode);\")\n+  \"\"\n+{\n+  if (<MODE>mode == SImode && !TARGET_CMOVE)\n+    {\n+      emit_insn (gen_ffssi2_no_cmove (operands[0], operands [1]));\n+      DONE;\n+    }\n+  operands[2] = gen_reg_rtx (<MODE>mode);\n+})\n \n-(define_insn_and_split \"*ffs_no_cmove\"\n+(define_insn_and_split \"ffssi2_no_cmove\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(ffs:SI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")))\n    (clobber (match_scratch:SI 2 \"=&q\"))\n@@ -12230,93 +12225,68 @@\n   ix86_expand_clear (operands[2]);\n })\n \n-(define_insn \"*ffssi_1\"\n+(define_insn \"*ffs<mode>_1\"\n   [(set (reg:CCZ FLAGS_REG)\n-\t(compare:CCZ (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n+\t(compare:CCZ (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n \t\t     (const_int 0)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(ctz:SI (match_dup 1)))]\n+   (set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(ctz:SWI48 (match_dup 1)))]\n   \"\"\n-  \"bsf{l}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"alu1\")\n-   (set_attr \"prefix_0f\" \"1\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_expand \"ffsdi2\"\n-  [(set (match_dup 2) (const_int -1))\n-   (parallel [(set (reg:CCZ FLAGS_REG)\n-\t\t   (compare:CCZ (match_operand:DI 1 \"nonimmediate_operand\" \"\")\n-\t\t\t\t(const_int 0)))\n-\t      (set (match_operand:DI 0 \"register_operand\" \"\")\n-\t\t   (ctz:DI (match_dup 1)))])\n-   (set (match_dup 0) (if_then_else:DI\n-\t\t\t(eq (reg:CCZ FLAGS_REG) (const_int 0))\n-\t\t\t(match_dup 2)\n-\t\t\t(match_dup 0)))\n-   (parallel [(set (match_dup 0) (plus:DI (match_dup 0) (const_int 1)))\n-\t      (clobber (reg:CC FLAGS_REG))])]\n-  \"TARGET_64BIT\"\n-  \"operands[2] = gen_reg_rtx (DImode);\")\n-\n-(define_insn \"*ffsdi_1\"\n-  [(set (reg:CCZ FLAGS_REG)\n-\t(compare:CCZ (match_operand:DI 1 \"nonimmediate_operand\" \"rm\")\n-\t\t     (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(ctz:DI (match_dup 1)))]\n-  \"TARGET_64BIT\"\n-  \"bsf{q}\\t{%1, %0|%0, %1}\"\n+  \"bsf{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"prefix_0f\" \"1\")\n-   (set_attr \"mode\" \"DI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"ctzsi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(ctz:SI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")))\n+(define_insn \"ctz<mode>2\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(ctz:SWI48 (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n-  \"bsf{l}\\t{%1, %0|%0, %1}\"\n+  \"bsf{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"prefix_0f\" \"1\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"ctzdi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(ctz:DI (match_operand:DI 1 \"nonimmediate_operand\" \"rm\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT\"\n-  \"bsf{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"alu1\")\n-   (set_attr \"prefix_0f\" \"1\")\n-   (set_attr \"mode\" \"DI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_expand \"clzsi2\"\n+(define_expand \"clz<mode>2\"\n   [(parallel\n-     [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t   (minus:SI (const_int 31)\n-\t\t     (clz:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\"))))\n+     [(set (match_operand:SWI248 0 \"register_operand\" \"\")\n+\t   (minus:SWI248\n+\t     (match_dup 2)\n+\t     (clz:SWI248 (match_operand:SWI248 1 \"nonimmediate_operand\" \"\"))))\n       (clobber (reg:CC FLAGS_REG))])\n    (parallel\n-     [(set (match_dup 0) (xor:SI (match_dup 0) (const_int 31)))\n+     [(set (match_dup 0) (xor:SWI248 (match_dup 0) (match_dup 2)))\n       (clobber (reg:CC FLAGS_REG))])]\n   \"\"\n {\n   if (TARGET_ABM)\n     {\n-      emit_insn (gen_clzsi2_abm (operands[0], operands[1]));\n+      emit_insn (gen_clz<mode>2_abm (operands[0], operands[1]));\n       DONE;\n     }\n+  operands[2] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode)-1);\n })\n \n-(define_insn \"clzsi2_abm\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (clz:SI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")))\n+(define_insn \"clz<mode>2_abm\"\n+  [(set (match_operand:SWI248 0 \"register_operand\" \"=r\")\n+\t(clz:SWI248 (match_operand:SWI248 1 \"nonimmediate_operand\" \"rm\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_ABM\"\n-  \"lzcnt{l}\\t{%1, %0|%0, %1}\"\n+  \"lzcnt{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"prefix_rep\" \"1\")\n    (set_attr \"type\" \"bitmanip\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"bsr_rex64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(minus:DI (const_int 63)\n+\t\t  (clz:DI (match_operand:DI 1 \"nonimmediate_operand\" \"rm\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT\"\n+  \"bsr{q}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"mode\" \"DI\")])\n \n (define_insn \"bsr\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -12329,6 +12299,17 @@\n    (set_attr \"prefix_0f\" \"1\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"*bsrhi\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(minus:HI (const_int 15)\n+\t\t  (clz:HI (match_operand:HI 1 \"nonimmediate_operand\" \"rm\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"\"\n+  \"bsr{w}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"mode\" \"HI\")])\n+\n (define_insn \"popcount<mode>2\"\n   [(set (match_operand:SWI248 0 \"register_operand\" \"=r\")\n \t(popcount:SWI248\n@@ -12385,6 +12366,12 @@\n    (set_attr \"type\" \"bitmanip\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_expand \"bswapdi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(bswap:DI (match_operand:DI 1 \"register_operand\" \"\")))]\n+  \"TARGET_64BIT\"\n+  \"\")\n+\n (define_expand \"bswapsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(bswap:SI (match_operand:SI 1 \"register_operand\" \"\")))]\n@@ -12402,6 +12389,22 @@\n     }\n })\n \n+(define_insn \"*bswapdi_movbe\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,m\")\n+\t(bswap:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0,m,r\")))]\n+  \"TARGET_64BIT && TARGET_MOVBE\n+   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"@\n+    bswap\\t%0\n+    movbe\\t{%1, %0|%0, %1}\n+    movbe\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"*,imov,imov\")\n+   (set_attr \"modrm\" \"*,1,1\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"prefix_extra\" \"*,1,1\")\n+   (set_attr \"length\" \"3,*,*\")\n+   (set_attr \"mode\" \"DI\")])\n+\n (define_insn \"*bswapsi_movbe\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,m\")\n \t(bswap:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,m,r\")))]\n@@ -12417,6 +12420,14 @@\n    (set_attr \"length\" \"2,*,*\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"*bswapdi_1\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(bswap:DI (match_operand:DI 1 \"register_operand\" \"0\")))]\n+  \"TARGET_64BIT\"\n+  \"bswap\\t%0\"\n+  [(set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"length\" \"3\")])\n+\n (define_insn \"*bswapsi_1\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(bswap:SI (match_operand:SI 1 \"register_operand\" \"0\")))]\n@@ -12445,114 +12456,6 @@\n   [(set_attr \"length\" \"4\")\n    (set_attr \"mode\" \"HI\")])\n \n-(define_expand \"bswapdi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(bswap:DI (match_operand:DI 1 \"register_operand\" \"\")))]\n-  \"TARGET_64BIT\"\n-  \"\")\n-\n-(define_insn \"*bswapdi_movbe\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,m\")\n-\t(bswap:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0,m,r\")))]\n-  \"TARGET_64BIT && TARGET_MOVBE\n-   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n-  \"@\n-    bswap\\t%0\n-    movbe\\t{%1, %0|%0, %1}\n-    movbe\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"*,imov,imov\")\n-   (set_attr \"modrm\" \"*,1,1\")\n-   (set_attr \"prefix_0f\" \"1\")\n-   (set_attr \"prefix_extra\" \"*,1,1\")\n-   (set_attr \"length\" \"3,*,*\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"*bswapdi_1\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(bswap:DI (match_operand:DI 1 \"register_operand\" \"0\")))]\n-  \"TARGET_64BIT\"\n-  \"bswap\\t%0\"\n-  [(set_attr \"prefix_0f\" \"1\")\n-   (set_attr \"length\" \"3\")])\n-\n-(define_expand \"clzdi2\"\n-  [(parallel\n-     [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t   (minus:DI (const_int 63)\n-\t\t     (clz:DI (match_operand:DI 1 \"nonimmediate_operand\" \"\"))))\n-      (clobber (reg:CC FLAGS_REG))])\n-   (parallel\n-     [(set (match_dup 0) (xor:DI (match_dup 0) (const_int 63)))\n-      (clobber (reg:CC FLAGS_REG))])]\n-  \"TARGET_64BIT\"\n-{\n-  if (TARGET_ABM)\n-    {\n-      emit_insn (gen_clzdi2_abm (operands[0], operands[1]));\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"clzdi2_abm\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(clz:DI (match_operand:DI 1 \"nonimmediate_operand\" \"rm\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && TARGET_ABM\"\n-  \"lzcnt{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"prefix_rep\" \"1\")\n-   (set_attr \"type\" \"bitmanip\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"bsr_rex64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(minus:DI (const_int 63)\n-\t\t  (clz:DI (match_operand:DI 1 \"nonimmediate_operand\" \"rm\"))))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT\"\n-  \"bsr{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"alu1\")\n-   (set_attr \"prefix_0f\" \"1\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_expand \"clzhi2\"\n-  [(parallel\n-     [(set (match_operand:HI 0 \"register_operand\" \"\")\n-\t   (minus:HI (const_int 15)\n-\t\t     (clz:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\"))))\n-      (clobber (reg:CC FLAGS_REG))])\n-   (parallel\n-     [(set (match_dup 0) (xor:HI (match_dup 0) (const_int 15)))\n-      (clobber (reg:CC FLAGS_REG))])]\n-  \"\"\n-{\n-  if (TARGET_ABM)\n-    {\n-      emit_insn (gen_clzhi2_abm (operands[0], operands[1]));\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"clzhi2_abm\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(clz:HI (match_operand:HI 1 \"nonimmediate_operand\" \"rm\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_ABM\"\n-  \"lzcnt{w}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"prefix_rep\" \"1\")\n-   (set_attr \"type\" \"bitmanip\")\n-   (set_attr \"mode\" \"HI\")])\n-\n-(define_insn \"*bsrhi\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(minus:HI (const_int 15)\n-\t\t  (clz:HI (match_operand:HI 1 \"nonimmediate_operand\" \"rm\"))))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"\"\n-  \"bsr{w}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"alu1\")\n-   (set_attr \"prefix_0f\" \"1\")\n-   (set_attr \"mode\" \"HI\")])\n-\n (define_expand \"paritydi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(parity:DI (match_operand:DI 1 \"register_operand\" \"\")))]\n@@ -12581,6 +12484,25 @@\n   DONE;\n })\n \n+(define_expand \"paritysi2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(parity:SI (match_operand:SI 1 \"register_operand\" \"\")))]\n+  \"! TARGET_POPCNT\"\n+{\n+  rtx scratch = gen_reg_rtx (QImode);\n+  rtx cond;\n+\n+  emit_insn (gen_paritysi2_cmp (NULL_RTX, NULL_RTX, operands[1]));\n+\n+  cond = gen_rtx_fmt_ee (ORDERED, QImode,\n+\t\t\t gen_rtx_REG (CCmode, FLAGS_REG),\n+\t\t\t const0_rtx);\n+  emit_insn (gen_rtx_SET (VOIDmode, scratch, cond));\n+\n+  emit_insn (gen_zero_extendqisi2 (operands[0], scratch));\n+  DONE;\n+})\n+\n (define_insn_and_split \"paritydi2_cmp\"\n   [(set (reg:CC FLAGS_REG)\n \t(parity:CC (match_operand:DI 3 \"register_operand\" \"0\")))\n@@ -12611,25 +12533,6 @@\n     operands[1] = gen_highpart (SImode, operands[3]);\n })\n \n-(define_expand \"paritysi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(parity:SI (match_operand:SI 1 \"register_operand\" \"\")))]\n-  \"! TARGET_POPCNT\"\n-{\n-  rtx scratch = gen_reg_rtx (QImode);\n-  rtx cond;\n-\n-  emit_insn (gen_paritysi2_cmp (NULL_RTX, NULL_RTX, operands[1]));\n-\n-  cond = gen_rtx_fmt_ee (ORDERED, QImode,\n-\t\t\t gen_rtx_REG (CCmode, FLAGS_REG),\n-\t\t\t const0_rtx);\n-  emit_insn (gen_rtx_SET (VOIDmode, scratch, cond));\n-\n-  emit_insn (gen_zero_extendqisi2 (operands[0], scratch));\n-  DONE;\n-})\n-\n (define_insn_and_split \"paritysi2_cmp\"\n   [(set (reg:CC FLAGS_REG)\n \t(parity:CC (match_operand:SI 2 \"register_operand\" \"0\")))"}]}