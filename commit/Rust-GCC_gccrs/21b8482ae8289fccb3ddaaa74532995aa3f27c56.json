{"sha": "21b8482ae8289fccb3ddaaa74532995aa3f27c56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFiODQ4MmFlODI4OWZjY2IzZGRhYWE3NDUzMjk5NWFhM2YyN2M1Ng==", "commit": {"author": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2001-12-04T00:47:14Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2001-12-04T00:47:14Z"}, "message": "rtl.def (PREFETCH): New rtx code.\n\n\t* rtl.def (PREFETCH): New rtx code.\n\t* doc/rtl.texi (PREFETCH): Add documentation.\n\t* function.c (instantiate_virtual_regs_1): Handle PREFETCH rtx.\n\t* rtlanal.c (reg_referenced_p): Ditto.\n\t* sched-vis.c (print_exp):  Ditto.\n\t* ssa-dce.c (find_inherently_necessary):  Ditto.\n\nFrom-SVN: r47580", "tree": {"sha": "75d518e5186a2da27e1bd86593dcab821b360f44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75d518e5186a2da27e1bd86593dcab821b360f44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21b8482ae8289fccb3ddaaa74532995aa3f27c56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21b8482ae8289fccb3ddaaa74532995aa3f27c56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21b8482ae8289fccb3ddaaa74532995aa3f27c56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21b8482ae8289fccb3ddaaa74532995aa3f27c56/comments", "author": null, "committer": null, "parents": [{"sha": "44eca121fcf46c61cc2dd36bccb3bd5235b30006", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44eca121fcf46c61cc2dd36bccb3bd5235b30006", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44eca121fcf46c61cc2dd36bccb3bd5235b30006"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "c0c2cda8c7f92522a4e1b00af883cadd9a46ccbc", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21b8482ae8289fccb3ddaaa74532995aa3f27c56/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21b8482ae8289fccb3ddaaa74532995aa3f27c56/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=21b8482ae8289fccb3ddaaa74532995aa3f27c56", "patch": "@@ -2326,6 +2326,20 @@ are set up by branch shortening and hold a label with a minimum and a\n maximum address, respectively.  @var{flags} indicates the relative\n position of @var{base}, @var{min} and @var{max} to the containing insn\n and of @var{min} and @var{max} to @var{base}.  See rtl.def for details.\n+\n+@findex prefetch\n+@item (prefetch:@var{m} @var{addr} @var{rw} @var{locality})\n+Represents prefetch of memory at address @var{addr}.\n+Operand @var{rw} is 1 if the prefetch is for data to be written, 0 otherwise;\n+targets that do not support write prefetches should treat this as a normal\n+prefetch.\n+Operand @var{locality} specifies the amount of temporal locality; 0 if there\n+is none or 1, 2, or 3 for increasing levels of temporal locality;\n+targets that do not support locality hints should ignore this.\n+\n+This insn is used to minimize cache-miss latency by moving data into a\n+cache before it is accessed.  It should use only non-faulting data prefetch\n+instructions.\n @end table\n \n @node Incdec"}, {"sha": "04f8ca62003b7b23208bbab81ec1a88803c204ee", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21b8482ae8289fccb3ddaaa74532995aa3f27c56/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21b8482ae8289fccb3ddaaa74532995aa3f27c56/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=21b8482ae8289fccb3ddaaa74532995aa3f27c56", "patch": "@@ -3979,6 +3979,7 @@ instantiate_virtual_regs_1 (loc, object, extra_insns)\n \t}\n \n       /* Fall through to generic unary operation case.  */\n+    case PREFETCH:\n     case SUBREG:\n     case STRICT_LOW_PART:\n     case NEG:          case NOT:"}, {"sha": "786b940003aa71e3fd0ee9217fe51c100d05ac2d", "filename": "gcc/rtl.def", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21b8482ae8289fccb3ddaaa74532995aa3f27c56/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21b8482ae8289fccb3ddaaa74532995aa3f27c56/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=21b8482ae8289fccb3ddaaa74532995aa3f27c56", "patch": "@@ -514,6 +514,17 @@ DEF_RTL_EXPR(ADDR_VEC, \"addr_vec\", \"E\", 'x')\n      \n DEF_RTL_EXPR(ADDR_DIFF_VEC, \"addr_diff_vec\", \"eEee0\", 'x')\n \n+/* Memory prefetch, with attributes supported on some targets.\n+   Operand 1 is the address of the memory to fetch.\n+   Operand 2 is 1 for a write access, 0 otherwise.\n+   Operand 3 is the level of temporal locality; 0 means there is no\n+   temporal locality and 1, 2, and 3 are for increasing levels of temporal\n+   locality.\n+\n+   The attributes specified by operands 2 and 3 are ignored for targets\n+   whose prefetch instructions do not support them.  */\n+DEF_RTL_EXPR(PREFETCH, \"prefetch\", \"eee\", 'x')\n+\n /* ----------------------------------------------------------------------\n    At the top level of an instruction (perhaps under PARALLEL).\n    ---------------------------------------------------------------------- */"}, {"sha": "07c467659cdb964ec6229216c1791979ff7d263a", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21b8482ae8289fccb3ddaaa74532995aa3f27c56/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21b8482ae8289fccb3ddaaa74532995aa3f27c56/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=21b8482ae8289fccb3ddaaa74532995aa3f27c56", "patch": "@@ -569,6 +569,9 @@ reg_referenced_p (x, body)\n     case TRAP_IF:\n       return reg_overlap_mentioned_p (x, TRAP_CONDITION (body));\n \n+    case PREFETCH:\n+      return reg_overlap_mentioned_p (x, XEXP (body, 0));\n+\n     case UNSPEC:\n     case UNSPEC_VOLATILE:\n       for (i = XVECLEN (body, 0) - 1; i >= 0; i--)\n@@ -1456,6 +1459,10 @@ note_uses (pbody, fun, data)\n       (*fun) (&TRAP_CONDITION (body), data);\n       return;\n \n+    case PREFETCH:\n+      (*fun) (&XEXP (body, 0), data);\n+      return;\n+\n     case UNSPEC:\n     case UNSPEC_VOLATILE:\n       for (i = XVECLEN (body, 0) - 1; i >= 0; i--)"}, {"sha": "bf7f968f06d3fb9b831b9cdfaaf68ba83442af63", "filename": "gcc/sched-vis.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21b8482ae8289fccb3ddaaa74532995aa3f27c56/gcc%2Fsched-vis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21b8482ae8289fccb3ddaaa74532995aa3f27c56/gcc%2Fsched-vis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-vis.c?ref=21b8482ae8289fccb3ddaaa74532995aa3f27c56", "patch": "@@ -474,6 +474,12 @@ print_exp (buf, x, verbose)\n       fun = \"trap_if\";\n       op[0] = TRAP_CONDITION (x);\n       break;\n+    case PREFETCH:\n+      fun = \"prefetch\";\n+      op[0] = XEXP (x, 0);\n+      op[1] = XEXP (x, 1);\n+      op[2] = XEXP (x, 2);\n+      break;\n     case UNSPEC:\n     case UNSPEC_VOLATILE:\n       {"}, {"sha": "cd37b2fc91032b7d064e1b01deeffb6a34a111d0", "filename": "gcc/ssa-dce.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21b8482ae8289fccb3ddaaa74532995aa3f27c56/gcc%2Fssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21b8482ae8289fccb3ddaaa74532995aa3f27c56/gcc%2Fssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa-dce.c?ref=21b8482ae8289fccb3ddaaa74532995aa3f27c56", "patch": "@@ -373,6 +373,7 @@ find_inherently_necessary (x)\n       {  \n       case CALL_INSN:\n       case BARRIER:\n+      case PREFETCH:\n \treturn !0;\n       case CODE_LABEL:\n       case NOTE:"}]}