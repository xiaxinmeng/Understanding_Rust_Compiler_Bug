{"sha": "4094f4d2c49d3a83fb43e481c4110f16fb812aaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA5NGY0ZDJjNDlkM2E4M2ZiNDNlNDgxYzQxMTBmMTZmYjgxMmFhZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-08-30T12:18:31Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-08-30T12:18:31Z"}, "message": "c-common.c (c_sizeof_or_alignof_type): Use gcc_assert.\n\n\t* c-common.c (c_sizeof_or_alignof_type): Use gcc_assert.\n\t(handle_visibility_attribute, c_determine_visibility): Likewise.\n\t* c-common.h (my_friendly_assert): Remove.\n\t* cp/cp-tree.h (SET_BINFO_NEW_VTABLE_MARKED): Use gcc_assert.\n\nFrom-SVN: r86762", "tree": {"sha": "cc734d7b461afd69a7c14c6e990ecc000f934c0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc734d7b461afd69a7c14c6e990ecc000f934c0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4094f4d2c49d3a83fb43e481c4110f16fb812aaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4094f4d2c49d3a83fb43e481c4110f16fb812aaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4094f4d2c49d3a83fb43e481c4110f16fb812aaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4094f4d2c49d3a83fb43e481c4110f16fb812aaf/comments", "author": null, "committer": null, "parents": [{"sha": "83010c5a1948342d3363d17b268589957e7f31f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83010c5a1948342d3363d17b268589957e7f31f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83010c5a1948342d3363d17b268589957e7f31f3"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "d3d03782cbb6edeede953c4ab26ea5b8325f013d", "filename": "gcc/c-common.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4094f4d2c49d3a83fb43e481c4110f16fb812aaf/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4094f4d2c49d3a83fb43e481c4110f16fb812aaf/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=4094f4d2c49d3a83fb43e481c4110f16fb812aaf", "patch": "@@ -2738,7 +2738,7 @@ c_sizeof_or_alignof_type (tree type, enum tree_code op, int complain)\n   tree value = NULL;\n   enum tree_code type_code = TREE_CODE (type);\n \n-  my_friendly_assert (op == SIZEOF_EXPR || op == ALIGNOF_EXPR, 20020720);\n+  gcc_assert (op == SIZEOF_EXPR || op == ALIGNOF_EXPR);\n   op_name = op == SIZEOF_EXPR ? \"sizeof\" : \"__alignof__\";\n \n   if (type_code == FUNCTION_TYPE)\n@@ -2782,7 +2782,7 @@ c_sizeof_or_alignof_type (tree type, enum tree_code op, int complain)\n      never happen.  However, this node should really have type\n      `size_t', which is just a typedef for an ordinary integer type.  */\n   value = fold (build1 (NOP_EXPR, size_type_node, value));\n-  my_friendly_assert (!TYPE_IS_SIZETYPE (TREE_TYPE (value)), 20001021);\n+  gcc_assert (!TYPE_IS_SIZETYPE (TREE_TYPE (value)));\n \n   return value;\n }\n@@ -4638,9 +4638,8 @@ handle_visibility_attribute (tree *node, tree name, tree args,\n bool\n c_determine_visibility (tree decl)\n {\n-  my_friendly_assert (TREE_CODE (decl) == VAR_DECL\n-\t\t      || TREE_CODE (decl) == FUNCTION_DECL, \n-\t\t      20040805);\n+  gcc_assert (TREE_CODE (decl) == VAR_DECL\n+\t      || TREE_CODE (decl) == FUNCTION_DECL);\n \n   /* If the user explicitly specified the visibility with an\n      attribute, honor that.  DECL_VISIBILITY will have been set during"}, {"sha": "4403ceee0fdf1431c18522ea4a04e21ca978027b", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4094f4d2c49d3a83fb43e481c4110f16fb812aaf/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4094f4d2c49d3a83fb43e481c4110f16fb812aaf/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=4094f4d2c49d3a83fb43e481c4110f16fb812aaf", "patch": "@@ -650,9 +650,6 @@ extern tree c_alignof_expr (tree);\n /* Print an error message for invalid operands to arith operation CODE.\n    NOP_EXPR is used as a special case (see truthvalue_conversion).  */\n extern void binary_op_error (enum tree_code);\n-#define my_friendly_assert(EXP, N) (void) \\\n- (((EXP) == 0) ? (fancy_abort (__FILE__, __LINE__, __FUNCTION__), 0) : 0)\n-\n extern tree fix_string_type (tree);\n struct varray_head_tag;\n extern void constant_expression_warning (tree);"}, {"sha": "9baf0ec173a2f685c0355f1445c8bcb2ebfd805e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4094f4d2c49d3a83fb43e481c4110f16fb812aaf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4094f4d2c49d3a83fb43e481c4110f16fb812aaf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4094f4d2c49d3a83fb43e481c4110f16fb812aaf", "patch": "@@ -1,3 +1,7 @@\n+2004-08-30  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* cp-tree.h (SET_BINFO_NEW_VTABLE_MARKED): Use gcc_assert.\n+\n 2004-08-28  Ziemowit Laski  <zlaski@apple.com>\n \n \t* Make-lang.in (CXX_OBJS): Split up into CXX_OBJS and"}, {"sha": "a002ed278333fa262232212094abcca50c0fd989", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4094f4d2c49d3a83fb43e481c4110f16fb812aaf/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4094f4d2c49d3a83fb43e481c4110f16fb812aaf/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4094f4d2c49d3a83fb43e481c4110f16fb812aaf", "patch": "@@ -1425,9 +1425,8 @@ struct lang_type GTY(())\n    derived class and never become non-primary.)  */\n #define SET_BINFO_NEW_VTABLE_MARKED(B)\t\t\t\t\t \\\n   (BINFO_NEW_VTABLE_MARKED (B) = 1,\t\t\t\t\t \\\n-   my_friendly_assert (!BINFO_PRIMARY_P (B)\t\t\t\t \\\n-\t\t       || BINFO_VIRTUAL_P (B), 20000517),\t\t \\\n-   my_friendly_assert (TYPE_VFIELD (BINFO_TYPE (B)), 20000517))\n+   gcc_assert (!BINFO_PRIMARY_P (B) || BINFO_VIRTUAL_P (B)),\t\t \\\n+   gcc_assert (TYPE_VFIELD (BINFO_TYPE (B))))\n \n /* Nonzero if this BINFO is a primary base class.  */\n "}]}