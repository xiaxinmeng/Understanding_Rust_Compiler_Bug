{"sha": "3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E3N2I2OGQ1ZmMzNWM2NmJjZDA0Njc4MWExYjRiZjJkZmVkZjQzYw==", "commit": {"author": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2001-12-18T00:03:38Z"}, "committer": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2001-12-18T00:03:38Z"}, "message": "gnat_rm.texi: Fix minor typos.\n\n\t* gnat_rm.texi: Fix minor typos. Found while reading the section\n\tregarding \"Bit_Order Clauses\" that was sent to a customer.\n\tVery interesting documentation!\n\n\t* sem_case.adb (Choice_Image): Avoid creating improper character\n\tliteral names by using the routine Set_Character_Literal_Name. This\n\tfixes bombs in certain error message cases.\n\n\t* a-reatim.adb: Minor reformatting.\n\n\t* sem_ch12.adb (Validate_Derived_Type_Instance): Handle properly the\n\tcase where the formal is an extension of another formal in the current\n\tunit or in a parent generic unit.\n\n\t* s-tposen.adb: Update comments.  Minor reformatting.\n\tMinor code clean up.\n\n\t* s-tarest.adb: Update comments.  Minor code reorganization.\n\n\t* exp_attr.adb (Attribute_Tag): Suppress expansion of <type_name>'Tag\n\twhen Java_VM.\n\n\t* exp_attr.adb: Minor reformatting\n\n\t* sem_ch3.adb (Build_Derived_Private_Type): Refine check to handle\n\tderivations nested within a child unit: verify that the parent\n\ttype is declared in an outer scope.\n\n\t* sem_ch12.adb: Minor reformatting\n\n\t* sem_warn.adb (Check_One_Unit): In No_Run_Time mode, do not post\n\twarning if current unit is a predefined one, from which bodies may\n\thave been deleted.\n\n\t* eval_fat.ads: Add comment that Round_Even is referenced in Ada code\n\tFix header format. Add 2001 to copyright date.\n\n\t* exp_dbug.adb (Get_Encoded_Name): Fix out of bounds reference,\n\twhich caused CE during compilation if checks were enabled.\n\nFrom-SVN: r48136", "tree": {"sha": "55411d765913c523d99194e1fdf09285ac70e7f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55411d765913c523d99194e1fdf09285ac70e7f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c/comments", "author": null, "committer": null, "parents": [{"sha": "ced7d98b9b110a3bc5ecbf3a2b9d20f9d8ac50ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ced7d98b9b110a3bc5ecbf3a2b9d20f9d8ac50ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ced7d98b9b110a3bc5ecbf3a2b9d20f9d8ac50ea"}], "stats": {"total": 221, "additions": 152, "deletions": 69}, "files": [{"sha": "78e89807b2337838843f7066ad7c38e7f2fe24d6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c", "patch": "@@ -1,3 +1,65 @@\n+2001-12-17  Joel Brobecker <brobecke@gnat.com>\n+\n+\t* gnat_rm.texi: Fix minor typos. Found while reading the section \n+\tregarding \"Bit_Order Clauses\" that was sent to a customer.\n+\tVery interesting documentation!\n+\t\n+2001-12-17  Robert Dewar <dewar@gnat.com>\n+\n+\t* sem_case.adb (Choice_Image): Avoid creating improper character \n+\tliteral names by using the routine Set_Character_Literal_Name. This \n+\tfixes bombs in certain error message cases.\n+\t\n+2001-12-17  Arnaud Charlet <charlet@gnat.com>\n+\n+\t* a-reatim.adb: Minor reformatting.\n+\t\n+2001-12-17  Ed Schonberg <schonber@gnat.com>\n+\n+\t* sem_ch12.adb (Validate_Derived_Type_Instance): Handle properly the \n+\tcase where the formal is an extension of another formal in the current \n+\tunit or in a parent generic unit.\n+\t\n+2001-12-17  Arnaud Charlet <charlet@gnat.com>\n+\n+\t* s-tposen.adb: Update comments.  Minor reformatting. \n+\tMinor code clean up.\n+\t\n+\t* s-tarest.adb: Update comments.  Minor code reorganization.\n+\t\n+2001-12-17  Gary Dismukes <dismukes@gnat.com>\n+\n+\t* exp_attr.adb (Attribute_Tag): Suppress expansion of <type_name>'Tag \n+\twhen Java_VM.\n+\t\n+2001-12-17  Robert Dewar <dewar@gnat.com>\n+\n+\t* exp_attr.adb: Minor reformatting\n+\t\n+2001-12-17  Ed Schonberg <schonber@gnat.com>\n+\n+\t* sem_ch3.adb (Build_Derived_Private_Type): Refine check to handle \n+\tderivations nested within a child unit: verify that the parent\n+\ttype is declared in an outer scope.\n+\t\n+2001-12-17  Robert Dewar <dewar@gnat.com>\n+\n+\t* sem_ch12.adb: Minor reformatting\n+\t\n+2001-12-17  Ed Schonberg <schonber@gnat.com>\n+\n+\t* sem_warn.adb (Check_One_Unit): In No_Run_Time mode, do not post \n+\twarning if current unit is a predefined one, from which bodies may \n+\thave been deleted.\n+\t\n+2001-12-17  Robert Dewar <dewar@gnat.com>\n+\n+\t* eval_fat.ads: Add comment that Round_Even is referenced in Ada code\n+\tFix header format. Add 2001 to copyright date.\n+\t\n+\t* exp_dbug.adb (Get_Encoded_Name): Fix out of bounds reference, \n+\twhich caused CE during compilation if checks were enabled.\n+\n 2001-12-17  Vincent Celier <celier@gnat.com>\n \n \t* make.adb:"}, {"sha": "1d9048951c38b2a6da7bc1b44b742fce70225de1", "filename": "gcc/ada/a-reatim.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c/gcc%2Fada%2Fa-reatim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c/gcc%2Fada%2Fa-reatim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-reatim.adb?ref=3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c", "patch": "@@ -174,8 +174,7 @@ package body Ada.Real_Time is\n       --  Extract the integer part of T, truncating towards zero.\n \n       if T_Val < 0.5 then\n-            SC := 0;\n-\n+         SC := 0;\n       else\n          SC := Seconds_Count (Time_Span' (T_Val - 0.5));\n       end if;"}, {"sha": "889308a0126e345b53c93d6993e205932d163ad0", "filename": "gcc/ada/eval_fat.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c/gcc%2Fada%2Feval_fat.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c/gcc%2Fada%2Feval_fat.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feval_fat.ads?ref=3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c", "patch": "@@ -6,9 +6,9 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                            $Revision: 1.4 $                              --\n+--                            $Revision$\n --                                                                          --\n---          Copyright (C) 1992-2000 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -49,7 +49,9 @@ package Eval_Fat is\n    --  The compile time representation of the floating-point root type\n \n    type Rounding_Mode is (Floor, Ceiling, Round, Round_Even);\n+   for Rounding_Mode use (0, 1, 2, 3);\n    --  Used to indicate rounding mode for Machine attribute\n+   --  Note that C code in gigi knows that Round_Even is 3\n \n    Rounding_Was_Biased : Boolean;\n    --  Set if last use of Machine rounded a halfway case away from zero"}, {"sha": "90aec3afe8d7ec823f127aa17380672b55a7677c", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.304 $\n+--                            $Revision$\n --                                                                          --\n --          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n --                                                                          --\n@@ -3083,19 +3083,25 @@ package body Exp_Attr is\n          Ttyp := Underlying_Type (Ttyp);\n \n          if Prefix_Is_Type then\n-            Rewrite (N,\n-              Unchecked_Convert_To (RTE (RE_Tag),\n-                New_Reference_To (Access_Disp_Table (Ttyp), Loc)));\n+\n+            --  For JGNAT we leave the type attribute unexpanded because\n+            --  there's not a dispatching table to reference.\n+\n+            if not Java_VM then\n+               Rewrite (N,\n+                 Unchecked_Convert_To (RTE (RE_Tag),\n+                   New_Reference_To (Access_Disp_Table (Ttyp), Loc)));\n+               Analyze_And_Resolve (N, RTE (RE_Tag));\n+            end if;\n \n          else\n             Rewrite (N,\n               Make_Selected_Component (Loc,\n                 Prefix => Relocate_Node (Pref),\n                 Selector_Name =>\n                   New_Reference_To (Tag_Component (Ttyp), Loc)));\n+            Analyze_And_Resolve (N, RTE (RE_Tag));\n          end if;\n-\n-         Analyze_And_Resolve (N, RTE (RE_Tag));\n       end Tag;\n \n       ----------------"}, {"sha": "c5f362b83c123fffaeb3d02444877bdd63653e2a", "filename": "gcc/ada/exp_dbug.adb", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c/gcc%2Fada%2Fexp_dbug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c/gcc%2Fada%2Fexp_dbug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.adb?ref=3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.56 $\n+--                            $Revision$\n --                                                                          --\n --          Copyright (C) 1996-2001 Free Software Foundation, Inc.          --\n --                                                                          --\n@@ -705,9 +705,13 @@ package body Exp_Dbug is\n \n       --  Or if this is a dummy type for a renaming\n \n-        or else Name_Buffer (Name_Len - 2 .. Name_Len) = \"_XR\"\n-        or else Name_Buffer (Name_Len - 3 .. Name_Len) = \"_XRE\"\n-        or else Name_Buffer (Name_Len - 3 .. Name_Len) = \"_XRP\"\n+        or else (Name_Len >= 3 and then\n+                   Name_Buffer (Name_Len - 2 .. Name_Len) = \"_XR\")\n+\n+        or else (Name_Len >= 4 and then\n+                   (Name_Buffer (Name_Len - 3 .. Name_Len) = \"_XRE\"\n+                      or else\n+                    Name_Buffer (Name_Len - 3 .. Name_Len) = \"_XRP\"))\n \n       --  For all these cases, just return the name unchanged\n "}, {"sha": "4c2f116318f361c718a094854b1d698a8a2d8585", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c", "patch": "@@ -9,7 +9,7 @@\n @c                                                                            o\n @c                              G N A T _ RM                                  o\n @c                                                                            o\n-@c                            $Revision: 1.1 $\n+@c                            $Revision$\n @c                                                                            o\n @c          Copyright (C) 1992-2001 Ada Core Technologies, Inc.               o\n @c                                                                            o\n@@ -39,8 +39,8 @@\n @title GNAT Reference Manual\n @subtitle GNAT, The GNU Ada 95 Compiler\n @subtitle Version 3.15w\n-@subtitle Document revision level $Revision: 1.1 $\n-@subtitle Date: $Date: 2001/10/26 13:55:51 $\n+@subtitle Document revision level $Revision$\n+@subtitle Date: $Date$\n @author Ada Core Technologies, Inc.\n \n @page\n@@ -84,7 +84,7 @@ GNAT, The GNU Ada 95 Compiler\n \n Version 3.14a\n \n-Date: $Date: 2001/10/26 13:55:51 $\n+Date: $Date$\n \n Ada Core Technologies, Inc.\n \n@@ -7830,7 +7830,7 @@ will be flagged as illegal by GNAT@.\n Since the misconception that Bit_Order automatically deals with all\n endian-related incompatibilities is a common one, the specification of\n a component field that is an integral number of bytes will always\n-generate a warning This warning may be suppressed using\n+generate a warning. This warning may be suppressed using\n @code{pragma Suppress} if desired. The following section contains additional\n details regarding the issue of byte ordering.\n \n@@ -7840,7 +7840,7 @@ details regarding the issue of byte ordering.\n @cindex ordering, of bytes\n \n @noindent\n-In this section we will review the effec of the @code{Bit_Order} attribute\n+In this section we will review the effect of the @code{Bit_Order} attribute\n definition clause on byte ordering. Briefly, it has no effect at all, but\n a detailed example will be helpful. Before giving this\n example, let us review the precise"}, {"sha": "83d184e3fa473c0887e1bb3980607ef077ab1f6c", "filename": "gcc/ada/s-tarest.adb", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c/gcc%2Fada%2Fs-tarest.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c/gcc%2Fada%2Fs-tarest.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tarest.adb?ref=3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---                             $Revision: 1.13 $\n+--                             $Revision$\n --                                                                          --\n --              Copyright (C) 1999-2001 Ada Core Technologies               --\n --                                                                          --\n@@ -253,9 +253,9 @@ package body System.Tasking.Restricted.Stages is\n          Self_ID.Common.Task_Entry_Point (Self_ID.Common.Task_Arg);\n          Terminate_Task (Self_ID);\n \n-      exception                         --  not needed in no exc mode\n-         when others =>                 --  not needed in no exc mode\n-            Terminate_Task (Self_ID);   --  not needed in no exc mode\n+      exception\n+         when others =>\n+            Terminate_Task (Self_ID);\n       end;\n    end Task_Wrapper;\n \n@@ -285,10 +285,10 @@ package body System.Tasking.Restricted.Stages is\n    procedure Activate_Restricted_Tasks\n      (Chain_Access : Activation_Chain_Access)\n    is\n-      Self_ID        : constant Task_ID := STPO.Self;\n-      C              : Task_ID;\n-      Activate_Prio  : System.Any_Priority;\n-      Success        : Boolean;\n+      Self_ID       : constant Task_ID := STPO.Self;\n+      C             : Task_ID;\n+      Activate_Prio : System.Any_Priority;\n+      Success       : Boolean;\n \n    begin\n       pragma Assert (Self_ID = Environment_Task);\n@@ -525,22 +525,25 @@ package body System.Tasking.Restricted.Stages is\n \n       SSL.Lock_Task              := Task_Lock'Access;\n       SSL.Unlock_Task            := Task_Unlock'Access;\n+\n       SSL.Get_Jmpbuf_Address     := Get_Jmpbuf_Address'Access;\n       SSL.Set_Jmpbuf_Address     := Set_Jmpbuf_Address'Access;\n-      SSL.Get_Sec_Stack_Addr     := Get_Sec_Stack_Addr'Access;\n-      SSL.Set_Sec_Stack_Addr     := Set_Sec_Stack_Addr'Access;\n       SSL.Get_Machine_State_Addr := Get_Machine_State_Addr'Access;\n       SSL.Set_Machine_State_Addr := Set_Machine_State_Addr'Access;\n       SSL.Get_Current_Excep      := Get_Current_Excep'Access;\n-      SSL.Timed_Delay            := Timed_Delay_T'Access;\n-      SSL.Adafinal               := Finalize_Global_Tasks'Access;\n+      SSL.Set_Jmpbuf_Address     (SSL.Get_Jmpbuf_Address_NT);\n+      SSL.Set_Machine_State_Addr (SSL.Get_Machine_State_Addr_NT);\n+\n+      SSL.Get_Sec_Stack_Addr     := Get_Sec_Stack_Addr'Access;\n+      SSL.Set_Sec_Stack_Addr     := Set_Sec_Stack_Addr'Access;\n \n       --  No need to create a new Secondary Stack, since we will use the\n       --  default one created in s-secsta.adb\n \n-      SSL.Set_Sec_Stack_Addr     (SSL.Get_Sec_Stack_Addr_NT);\n-      SSL.Set_Jmpbuf_Address     (SSL.Get_Jmpbuf_Address_NT);\n-      SSL.Set_Machine_State_Addr (SSL.Get_Machine_State_Addr_NT);\n+      Set_Sec_Stack_Addr (SSL.Get_Sec_Stack_Addr_NT);\n+\n+      SSL.Timed_Delay            := Timed_Delay_T'Access;\n+      SSL.Adafinal               := Finalize_Global_Tasks'Access;\n    end Init_RTS;\n \n begin"}, {"sha": "7b2005da9b3ea2f562096047e494a69d3313a414", "filename": "gcc/ada/s-tposen.adb", "status": "modified", "additions": 21, "deletions": 27, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c/gcc%2Fada%2Fs-tposen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c/gcc%2Fada%2Fs-tposen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tposen.adb?ref=3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c", "patch": "@@ -7,7 +7,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---                             $Revision: 1.14 $\n+--                             $Revision$\n --                                                                          --\n --              Copyright (C) 1998-2001 Ada Core Technologies               --\n --                                                                          --\n@@ -141,6 +141,9 @@ package body System.Tasking.Protected_Objects.Single_Entry is\n      (Self_Id    : Task_ID;\n       Object     : Protection_Entry_Access;\n       Entry_Call : Entry_Call_Link);\n+   --  This procedure executes or queues an entry call, depending\n+   --  on the status of the corresponding barrier. It assumes that the\n+   --  specified object is locked.\n \n    ---------------------\n    -- Check_Exception --\n@@ -150,11 +153,11 @@ package body System.Tasking.Protected_Objects.Single_Entry is\n      (Self_ID    : Task_ID;\n       Entry_Call : Entry_Call_Link)\n    is\n-      use type Ada.Exceptions.Exception_Id;\n-\n       procedure Internal_Raise (X : Ada.Exceptions.Exception_Id);\n       pragma Import (C, Internal_Raise, \"__gnat_raise_with_msg\");\n \n+      use type Ada.Exceptions.Exception_Id;\n+\n       E : constant Ada.Exceptions.Exception_Id :=\n         Entry_Call.Exception_To_Raise;\n \n@@ -188,8 +191,7 @@ package body System.Tasking.Protected_Objects.Single_Entry is\n \n    procedure Wait_For_Completion\n      (Self_ID    : Task_ID;\n-      Entry_Call : Entry_Call_Link)\n-   is\n+      Entry_Call : Entry_Call_Link) is\n    begin\n       pragma Assert (Self_ID = Entry_Call.Self);\n       Self_ID.Common.State := Entry_Caller_Sleep;\n@@ -416,18 +418,17 @@ package body System.Tasking.Protected_Objects.Single_Entry is\n          STPO.Unlock (Entry_Call.Self);\n       end if;\n \n-   exception                       --  not needed in no exc mode\n-      when others =>               --  not needed in no exc mode\n-         Send_Program_Error        --  not needed in no exc mode\n-           (Self_Id, Entry_Call);  --  not needed in no exc mode\n+   exception\n+      when others =>\n+         Send_Program_Error\n+           (Self_Id, Entry_Call);\n    end PO_Do_Or_Queue;\n \n    ----------------------------\n    -- Protected_Single_Count --\n    ----------------------------\n \n-   function Protected_Count_Entry\n-     (Object : Protection_Entry) return Natural is\n+   function Protected_Count_Entry (Object : Protection_Entry) return Natural is\n    begin\n       if Object.Call_In_Progress /= null then\n          return 1;\n@@ -469,14 +470,12 @@ package body System.Tasking.Protected_Objects.Single_Entry is\n \n       pragma Assert (Entry_Call.State /= Cancelled);\n \n-      if Entry_Call.State = Done then\n-         Check_Exception (Self_Id, Entry_Call'Access);\n-         return;\n+      if Entry_Call.State /= Done then\n+         STPO.Write_Lock (Self_Id);\n+         Wait_For_Completion (Self_Id, Entry_Call'Access);\n+         STPO.Unlock (Self_Id);\n       end if;\n \n-      STPO.Write_Lock (Self_Id);\n-      Wait_For_Completion (Self_Id, Entry_Call'Access);\n-      STPO.Unlock (Self_Id);\n       Check_Exception (Self_Id, Entry_Call'Access);\n    end Protected_Single_Entry_Call;\n \n@@ -496,20 +495,16 @@ package body System.Tasking.Protected_Objects.Single_Entry is\n \n    procedure Service_Entry (Object : Protection_Entry_Access) is\n       Self_Id       : constant Task_ID := STPO.Self;\n-      Entry_Call    : Entry_Call_Link;\n+      Entry_Call    : constant Entry_Call_Link := Object.Entry_Queue;\n       Caller        : Task_ID;\n       Barrier_Value : Boolean;\n \n    begin\n-      Entry_Call := Object.Entry_Queue;\n-\n       if Entry_Call /= null then\n-         Barrier_Value :=\n-           Object.Entry_Body.Barrier (Object.Compiler_Info, 1);\n+         Barrier_Value := Object.Entry_Body.Barrier (Object.Compiler_Info, 1);\n \n          if Barrier_Value then\n             if Object.Call_In_Progress /= null then\n-\n                --  This violates the No_Entry_Queue restriction, send\n                --  Program_Error to the caller.\n \n@@ -528,10 +523,9 @@ package body System.Tasking.Protected_Objects.Single_Entry is\n          end if;\n       end if;\n \n-   exception                       --  not needed in no exc mode\n-      when others =>               --  not needed in no exc mode\n-         Send_Program_Error        --  not needed in no exc mode\n-           (Self_Id, Entry_Call);  --  not needed in no exc mode\n+   exception\n+      when others =>\n+         Send_Program_Error (Self_Id, Entry_Call);\n    end Service_Entry;\n \n    ---------------------------------------"}, {"sha": "8b5f6a4ff49ca8eb6c9c09e16c92af984508522a", "filename": "gcc/ada/sem_case.adb", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c/gcc%2Fada%2Fsem_case.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c/gcc%2Fada%2Fsem_case.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_case.adb?ref=3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.13 $\n+--                            $Revision$\n --                                                                          --\n --          Copyright (C) 1996-2001 Free Software Foundation, Inc.          --\n --                                                                          --\n@@ -264,10 +264,7 @@ package body Sem_Case is\n          C := UI_To_Int (Value);\n \n          if C in 16#20# .. 16#7E# then\n-            Name_Buffer (1) := ''';\n-            Name_Buffer (2) := Character'Val (C);\n-            Name_Buffer (3) := ''';\n-            Name_Len := 3;\n+            Set_Character_Literal_Name (Char_Code (UI_To_Int (Value)));\n             return Name_Find;\n          end if;\n "}, {"sha": "1222ee522fa4f4de2a1a2d8f78112fcef2e6ab63", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.14 $\n+--                            $Revision$\n --                                                                          --\n --          Copyright (C) 1992-2001, Free Software Foundation, Inc.         --\n --                                                                          --\n@@ -7212,7 +7212,13 @@ package body Sem_Ch12 is\n             Ancestor :=\n               Get_Instance_Of (Base_Type (Etype (A_Gen_T)));\n \n-         elsif Is_Derived_Type (Get_Instance_Of (A_Gen_T)) then\n+         --  The type may be a local derivation, or a type extension of\n+         --  a previous formal, or of a formal of a parent package.\n+\n+         elsif Is_Derived_Type (Get_Instance_Of (A_Gen_T))\n+          or else\n+            Ekind (Get_Instance_Of (A_Gen_T)) = E_Record_Type_With_Private\n+         then\n             Ancestor :=\n               Get_Instance_Of (Base_Type (Get_Instance_Of (A_Gen_T)));\n "}, {"sha": "1a43f9ee7f3463a3ba5f708d5b7a829f28cbed2b", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c", "patch": "@@ -3856,6 +3856,7 @@ package body Sem_Ch3 is\n          if Is_Child_Unit (Scope (Current_Scope))\n            and then Is_Completion\n            and then In_Private_Part (Current_Scope)\n+           and then Scope (Parent_Type) /= Current_Scope\n          then\n             --  This is the unusual case where a type completed by a private\n             --  derivation occurs within a package nested in a child unit,"}, {"sha": "f6f5020118a46e364405ae9d00bcdc5cb4a68a60", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=3a77b68d5fc35c66bcd046781a1b4bf2dfedf43c", "patch": "@@ -674,6 +674,15 @@ package body Sem_Warn is\n                      if Unit = Spec_Unit then\n                         Set_Unreferenced_In_Spec (Item);\n \n+                     --  In No_Run_Time_Mode, we remove the bodies of non-\n+                     --  inlined subprograms, which may lead to spurious\n+                     --  warnings, clearly undesirable.\n+\n+                     elsif No_Run_Time\n+                       and then Is_Predefined_File_Name (Unit_File_Name (Unit))\n+                     then\n+                        null;\n+\n                      --  Otherwise simple unreferenced message\n \n                      else"}]}