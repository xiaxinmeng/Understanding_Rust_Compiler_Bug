{"sha": "9c0c34c2bbc9181554bd3e7ae88ca3c640920cbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMwYzM0YzJiYmM5MTgxNTU0YmQzZTdhZTg4Y2EzYzY0MDkyMGNiYw==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-03-31T18:37:22Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-03-31T18:37:22Z"}, "message": "Add testcases for PR43464.\n\nCo-Authored-By: Richard Guenther <rguenther@suse.de>\n\nFrom-SVN: r157886", "tree": {"sha": "304f1bfb1eed1c6e548c9a063ed9ffd2eba0f0c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/304f1bfb1eed1c6e548c9a063ed9ffd2eba0f0c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c0c34c2bbc9181554bd3e7ae88ca3c640920cbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0c34c2bbc9181554bd3e7ae88ca3c640920cbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c0c34c2bbc9181554bd3e7ae88ca3c640920cbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0c34c2bbc9181554bd3e7ae88ca3c640920cbc/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c80a540338e5809cdf058b13e23e30585219a0fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c80a540338e5809cdf058b13e23e30585219a0fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c80a540338e5809cdf058b13e23e30585219a0fa"}], "stats": {"total": 109, "additions": 109, "deletions": 0}, "files": [{"sha": "9b55225130da21e1ae7f316366c15ed007f838c3", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0c34c2bbc9181554bd3e7ae88ca3c640920cbc/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0c34c2bbc9181554bd3e7ae88ca3c640920cbc/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=9c0c34c2bbc9181554bd3e7ae88ca3c640920cbc", "patch": "@@ -1,3 +1,31 @@\n+2010-03-23  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* tree-ssa-copy.c: Revert this previous change:\n+\t(init_copy_prop): Loop closed phi nodes cancontain more than one\n+\targument.\n+\t(execute_copy_prop): Revert the previous change: do not call\n+\trewrite_into_loop_closed_ssa.\n+\n+2010-03-21  Sebastian Pop  <sebastian.pop@amd.com>\n+\t    Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/43464\n+\t* tree-ssa-copy.c (init_copy_prop): Loop closed phi nodes can\n+\tcontain more than one argument.\n+\t(execute_copy_prop): Revert the previous change: do not call\n+\trewrite_into_loop_closed_ssa.\n+\n+\t* gcc.dg/graphite/id-pr43464.c: Remove compile warning.\n+\t* gcc.dg/graphite/id-pr43464-1.c: New.\n+\n+2010-03-21  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR middle-end/43464\n+\t* tree-ssa-copy.c (execute_copy_prop): Call rewrite_into_loop_closed_ssa\n+\tand verify_loop_closed_ssa when copy prop is executed in the LNO.\n+\n+\t* gcc.dg/graphite/id-pr43464.c: New.\n+\n 2010-03-16  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-sese-to-poly.c (graphite_loop_normal_form): Add the IV bump"}, {"sha": "d5a8359656d1b0fd32a40377c81ec7adaff7e13d", "filename": "gcc/testsuite/gcc.dg/graphite/id-pr43464-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0c34c2bbc9181554bd3e7ae88ca3c640920cbc/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-pr43464-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0c34c2bbc9181554bd3e7ae88ca3c640920cbc/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-pr43464-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-pr43464-1.c?ref=9c0c34c2bbc9181554bd3e7ae88ca3c640920cbc", "patch": "@@ -0,0 +1,18 @@\n+typedef struct regnode\n+{\n+  char flags;\n+} regnode;\n+extern const unsigned char A[];\n+\n+char *foo (regnode *c, char *s, int norun)\n+{\n+  int uskip;\n+  while (s + (uskip = A[*s]))\n+    {\n+      if ((c->flags || bar (c)) && norun)\n+\tgoto got_it;\n+      s += uskip;\n+    }\n+ got_it:\n+  return s;\n+}"}, {"sha": "a8e67dc2bf5a6fb0eaf3436cd32f8e6f8b0022fb", "filename": "gcc/testsuite/gcc.dg/graphite/id-pr43464.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0c34c2bbc9181554bd3e7ae88ca3c640920cbc/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-pr43464.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0c34c2bbc9181554bd3e7ae88ca3c640920cbc/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-pr43464.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-pr43464.c?ref=9c0c34c2bbc9181554bd3e7ae88ca3c640920cbc", "patch": "@@ -0,0 +1,63 @@\n+typedef struct sv SV;\n+typedef struct regnode\n+{\n+  char flags;\n+} regnode;\n+typedef struct regexp\n+{\n+} regexp;\n+typedef struct cop\n+{\n+  SV *cop_warnings;\n+} COP;\n+extern const unsigned char PL_utf8skip[];\n+extern char PL_dowarn;\n+extern COP *volatile PL_curcop;\n+char *\n+S_find_byclass (regexp * prog, regnode * c, char *s, char *strend,\n+\t\tchar *startpos, int norun)\n+{\n+  register long unsigned int uskip;\n+  char *e;\n+  switch (((c)->flags))\n+    {\n+    case 17:\n+\t{\n+\t  while (s + (uskip = PL_utf8skip[*s]) <= strend)\n+\t    {\n+\t      if (c->flags || S_reginclass (c))\n+\t\t  if (norun || S_regtry (prog, s))\n+\t\t    goto got_it;\n+\t      s += uskip;\n+\t    }\n+\t  unsigned long c, f;\n+\t  long unsigned int len;\n+\t    {\n+\t      while (s <= e)\n+\t\t{\n+\t\t  c = Perl_utf8n_to_uvuni (s, 13, &len,\n+\t\t\t\t\t   (((PL_curcop->cop_warnings !=\n+\t\t\t\t\t      ((SV *) ((void *) 0)))\n+\t\t\t\t\t     && PL_dowarn)) ? 0 : 0x00FF);\n+\t\t  if (c == 0 && (norun || S_regtry (prog, s)))\n+\t\t      if (f != c && (norun || S_regtry (prog, s)))\n+\t\t\tgoto got_it;\n+\t\t}\n+\t    }\n+\t}\n+    }\n+got_it:\n+  return s;\n+}\n+Perl_re_intuit_start (regexp * prog)\n+{\n+  S_find_byclass (prog, 0, 0, 0, 0, 1);\n+}\n+Perl_regexec_flags (register regexp * prog,\n+\t\t    register char *strend)\n+{\n+  S_find_byclass (prog, 0, 0, strend, 0, 0);\n+}\n+S_regtry (regexp * prog, char *startpos)\n+{\n+}"}]}