{"sha": "9fb9ea4a4e1b24afb9b5c8530ccbb7bfab10e46f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZiOWVhNGE0ZTFiMjRhZmI5YjVjODUzMGNjYmI3YmZhYjEwZTQ2Zg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-03-25T20:24:20Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-03-25T20:24:20Z"}, "message": "(ASM_RETURN_CASE_JUMP): Use extl to explicitly sign extend index\nregister on TARGET_5200.\n\nFrom-SVN: r13800", "tree": {"sha": "d32e8b6602cfa48d0fad4186661966a6489fde70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d32e8b6602cfa48d0fad4186661966a6489fde70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fb9ea4a4e1b24afb9b5c8530ccbb7bfab10e46f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fb9ea4a4e1b24afb9b5c8530ccbb7bfab10e46f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fb9ea4a4e1b24afb9b5c8530ccbb7bfab10e46f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fb9ea4a4e1b24afb9b5c8530ccbb7bfab10e46f/comments", "author": null, "committer": null, "parents": [{"sha": "641241db80de133687af86a5432e4f72358ccd37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/641241db80de133687af86a5432e4f72358ccd37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/641241db80de133687af86a5432e4f72358ccd37"}], "stats": {"total": 51, "additions": 39, "deletions": 12}, "files": [{"sha": "8eed141dc84a519650ae346a3e81abea3711d7fe", "filename": "gcc/config/m68k/apollo68.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb9ea4a4e1b24afb9b5c8530ccbb7bfab10e46f/gcc%2Fconfig%2Fm68k%2Fapollo68.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb9ea4a4e1b24afb9b5c8530ccbb7bfab10e46f/gcc%2Fconfig%2Fm68k%2Fapollo68.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fapollo68.h?ref=9fb9ea4a4e1b24afb9b5c8530ccbb7bfab10e46f", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Apollo 680X0 version.\n-   Copyright (C) 1989,1992, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 1992, 1996, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -180,8 +180,13 @@ Boston, MA 02111-1307, USA.  */\n /* config/m68k.md has an explicit reference to the program counter,\n    prefix this by the register prefix.  */\n \n-#define ASM_RETURN_CASE_JUMP    return \"jmp %%pc@(2,%0:w)\"\n-\n+#define ASM_RETURN_CASE_JUMP    \t\t\\\n+  do {\t\t\t\t\t\t\\\n+    if (TARGET_5200)\t\t\t\t\\\n+      return \"ext%.l %0\\n\\tjmp %%pc@(2,%0:l)\";\t\\\n+    else\t\t\t\t\t\\\n+      return \"jmp %%pc@(2,%0:w)\"\t\t\\\n+  } while (0)\n \n /* Here are the new register names.  */\n "}, {"sha": "85b1061a84bb9aa492437d0caab908e1c521dc31", "filename": "gcc/config/m68k/coff.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb9ea4a4e1b24afb9b5c8530ccbb7bfab10e46f/gcc%2Fconfig%2Fm68k%2Fcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb9ea4a4e1b24afb9b5c8530ccbb7bfab10e46f/gcc%2Fconfig%2Fm68k%2Fcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fcoff.h?ref=9fb9ea4a4e1b24afb9b5c8530ccbb7bfab10e46f", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.\n    m68k series COFF object files and debugging, version.\n-   Copyright (C) 1994, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1996, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -55,7 +55,13 @@ Boston, MA 02111-1307, USA.  */\n /* config/m68k.md has an explicit reference to the program counter,\n    prefix this by the register prefix.  */\n \n-#define ASM_RETURN_CASE_JUMP    return \"jmp %%pc@(2,%0:w)\"\n+#define ASM_RETURN_CASE_JUMP \t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    if (TARGET_5200)\t\t\t\t\\\n+      return \"ext%.l %0\\n\\tjmp %%pc@(2,%0:l)\";\t\\\n+    else\t\t\t\t\t\\\n+      return \"jmp %%pc@(2,%0:w)\";\t\t\\\n+  } while (0)\n \n /* Here are the new register names.  */\n "}, {"sha": "10ef0e8be06051515ba3b48ed58bc8ce47d3ff67", "filename": "gcc/config/m68k/linux.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb9ea4a4e1b24afb9b5c8530ccbb7bfab10e46f/gcc%2Fconfig%2Fm68k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb9ea4a4e1b24afb9b5c8530ccbb7bfab10e46f/gcc%2Fconfig%2Fm68k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux.h?ref=9fb9ea4a4e1b24afb9b5c8530ccbb7bfab10e46f", "patch": "@@ -156,9 +156,13 @@ Boston, MA 02111-1307, USA.  */\n \n /* Use the default action for outputting the case label.  */\n #undef ASM_OUTPUT_CASE_LABEL\n-\n-#define ASM_RETURN_CASE_JUMP \\\n-  return \"jmp (2,%%pc,%0.w)\"\n+#define ASM_RETURN_CASE_JUMP\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    if (TARGET_5200)\t\t\t\t\\\n+      return \"ext%.l %0\\n\\tjmp %%pc@(2,%0:l)\";\t\\\n+    else\t\t\t\t\t\\\n+      return \"jmp %%pc@(2,%0:w)\";\t\t\\\n+  } while (0)\n \n /* This is how to output an assembler line that says to advance the\n    location counter to a multiple of 2**LOG bytes.  */"}, {"sha": "d86874c30c44c9bbaf8b781a7e907d29893e564f", "filename": "gcc/config/m68k/mot3300.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb9ea4a4e1b24afb9b5c8530ccbb7bfab10e46f/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb9ea4a4e1b24afb9b5c8530ccbb7bfab10e46f/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fmot3300.h?ref=9fb9ea4a4e1b24afb9b5c8530ccbb7bfab10e46f", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    SysV68 Motorola 3300 Delta Series.\n-   Copyright (C) 1987, 1993, 1994, 1995, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 93, 94, 95, 96, 1997 Free Software Foundation, Inc.\n    Contributed by Abramo and Roberto Bagnara (bagnara@dipisa.di.unipi.it)\n    based on Alex Crain's 3B1 definitions.\n    Maintained by Philippe De Muyter (phdm@info.ucl.ac.be).\n@@ -566,7 +566,13 @@ do { long l;\t\t\t\t\t\\\n #define ASM_OUTPUT_CASE_FETCH(file, labelno, regname)\\\n \tasm_fprintf (file, \"12(%Rpc,%s.\", regname)\n \n-#define ASM_RETURN_CASE_JUMP   return \"jmp 8(%%pc,%0.w)\"\n+#define ASM_RETURN_CASE_JUMP \\\n+  do {\t\t\t\t\t\t\\\n+    if (TARGET_5200)\t\t\t\t\\\n+      return \"ext%.l %0\\n\\tjmp 8(%%pc,%0.l)\";\t\\\n+    else\t\t\t\t\t\\\n+      return \"jmp 8(%%pc,%0.w)\";\t\t\\\n+  } while (0)\n \t     \n #else /* USE_GAS */\n "}, {"sha": "41319c219af32c4e086bf8386ff1d47dfff5ad89", "filename": "gcc/config/m68k/pbb.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb9ea4a4e1b24afb9b5c8530ccbb7bfab10e46f/gcc%2Fconfig%2Fm68k%2Fpbb.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb9ea4a4e1b24afb9b5c8530ccbb7bfab10e46f/gcc%2Fconfig%2Fm68k%2Fpbb.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fpbb.h?ref=9fb9ea4a4e1b24afb9b5c8530ccbb7bfab10e46f", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.\n    Citicorp/TTI Unicom PBB version (using GAS with a %-register prefix)\n-   Copyright (C) 1987, 1988, 1990, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1988, 1990, 1996, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -114,7 +114,13 @@ Boston, MA 02111-1307, USA.  */\n       ! find_equiv_reg (0, get_last_insn (), 0, 0, 0, 8, Pmode))        \\\n       asm_fprintf (FILE, \"\\tmovl %Rd0,%Ra0\\n\"); } \n \n-#define ASM_RETURN_CASE_JUMP   return \"jmp %%pc@(2,%0:w)\"\n+#define ASM_RETURN_CASE_JUMP \\\n+  do {\t\t\t\t\t\t\\\n+    if (TARGET_5200)\t\t\t\t\\\n+      return \"ext%.l %0\\n\\tjmp %%pc@(2,%0:l)\";\t\\\n+    else\t\t\t\t\t\\\n+      return \"jmp %%pc@(2,%0:w)\";\t\t\\\n+  } while (0)\n \n /* Although the gas we use can create .ctor and .dtor sections from N_SETT\n    stabs, it does not support section directives, so we need to have the loader"}]}