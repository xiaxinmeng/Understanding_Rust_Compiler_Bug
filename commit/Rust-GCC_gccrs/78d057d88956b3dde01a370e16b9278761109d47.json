{"sha": "78d057d88956b3dde01a370e16b9278761109d47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhkMDU3ZDg4OTU2YjNkZGUwMWEzNzBlMTZiOTI3ODc2MTEwOWQ0Nw==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2000-09-25T10:01:10Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2000-09-25T10:01:10Z"}, "message": "definitions in config/m[ci]*:\n\nChanges add TABs on either or both sides, covering start of line,\nup to any operand for all .*ASM.*_OP definitions.\n\nFrom-SVN: r36610", "tree": {"sha": "1bc96d2392cbae97ded863de5c4e79d19b5508b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bc96d2392cbae97ded863de5c4e79d19b5508b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78d057d88956b3dde01a370e16b9278761109d47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78d057d88956b3dde01a370e16b9278761109d47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78d057d88956b3dde01a370e16b9278761109d47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78d057d88956b3dde01a370e16b9278761109d47/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e7b07a750eeb38e6b6a8bc42a4a9a5b3792f0b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e7b07a750eeb38e6b6a8bc42a4a9a5b3792f0b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e7b07a750eeb38e6b6a8bc42a4a9a5b3792f0b8"}], "stats": {"total": 102, "additions": 61, "deletions": 41}, "files": [{"sha": "b12017299bb1408ce0f3660796af932f3cd47c60", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78d057d88956b3dde01a370e16b9278761109d47/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78d057d88956b3dde01a370e16b9278761109d47/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78d057d88956b3dde01a370e16b9278761109d47", "patch": "@@ -190,6 +190,26 @@\n \t* config/m88k/openbsd.h (SET_ASM_OP): Here.\n \t* config/m88k/sysv4.h (INIT_SECTION_ASM_OP, FINI_SECTION_ASM_OP,\n \tCTORS_SECTION_ASM_OP, DTORS_SECTION_ASM_OP): Here.\n+\t* config/mcore/mcore-elf.h (UNALIGNED_INT_ASM_OP,\n+\tUNALIGNED_SHORT_ASM_OP, CTORS_SECTION_ASM_OP,\n+\tDTORS_SECTION_ASM_OP): Here.\n+\t* config/mcore/mcore-pe.h (CTORS_SECTION_ASM_OP,\n+\tDTORS_SECTION_ASM_OP, INT_ASM_OP): Here.\n+\t* config/mips/elf.h (TYPE_ASM_OP, SIZE_ASM_OP,\n+\tBSS_SECTION_ASM_OP): Here.\n+\t* config/mips/elf64.h (TYPE_ASM_OP, SIZE_ASM_OP): Here.\n+\t* config/mips/iris5.h (ABICALLS_ASM_OP): Here.\n+\t* config/mips/iris6.h (TYPE_ASM_OP, SIZE_ASM_OP,\n+\tPOPSECTION_ASM_OP, BSS_SECTION_ASM_OP, CONST_SECTION_ASM_OP_32,\n+\tCONST_SECTION_ASM_OP_64, CTORS_SECTION_ASM_OP,\n+\tDTORS_SECTION_ASM_OP, EH_FRAME_SECTION_ASM_OP): Here.\n+\t* config/mips/mips.c (ABICALLS_ASM_OP): Here.\n+\t* config/mips/mips.h (ASM_STABS_OP, ASM_STABN_OP, ASM_STABD_OP):\n+\tHere.\n+\t* config/mips/netbsd.h (TYPE_ASM_OP, SIZE_ASM_OP, WEAK_ASM_OP):\n+\tHere.\n+\t* config/mips/osfrose.h (SET_ASM_OP): Here.\n+\t* config/mips/sni-svr4.h (ABICALLS_ASM_OP): Here.\n \n 2000-09-25  Richard Henderson  <rth@cygnus.com>\n "}, {"sha": "2111a063332d5e1b13f54b6528efd54b1cae859c", "filename": "gcc/config/mcore/mcore-elf.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78d057d88956b3dde01a370e16b9278761109d47/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78d057d88956b3dde01a370e16b9278761109d47/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h?ref=78d057d88956b3dde01a370e16b9278761109d47", "patch": "@@ -71,8 +71,8 @@ while (0)\n \n /* MCore defines .long and .short to NOT force any alignment.\n    This lets you misalign as much as you wish.  */\n-#define\tUNALIGNED_INT_ASM_OP\t\".long\"\n-#define\tUNALIGNED_SHORT_ASM_OP\t\".short\"\n+#define\tUNALIGNED_INT_ASM_OP\t\"\\t.long\\t\"\n+#define\tUNALIGNED_SHORT_ASM_OP\t\"\\t.short\\t\"\n \n #define EXPORTS_SECTION_ASM_OP\t\"\\t.section .exports\"\n \n@@ -199,8 +199,8 @@ exports_section ()\t\t\t\t\t\t\\\n #define FORCE_FINI_SECTION_ALIGN\tasm (\"br 1f ; .literals ; 1:\")\n \n #undef  CTORS_SECTION_ASM_OP\n-#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors,\\\"aw\\\"\"\n+#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"aw\\\"\"\n #undef  DTORS_SECTION_ASM_OP\n-#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors,\\\"aw\\\"\"\n+#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"aw\\\"\"\n      \n #endif /* __MCORE_ELF_H__ */"}, {"sha": "c25478530f7ee6babf3c6a169d88f1019cef69f9", "filename": "gcc/config/mcore/mcore-pe.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78d057d88956b3dde01a370e16b9278761109d47/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78d057d88956b3dde01a370e16b9278761109d47/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h?ref=78d057d88956b3dde01a370e16b9278761109d47", "patch": "@@ -184,11 +184,11 @@ rdata_section ()\t\t\t\t\t\t\\\n #define ENDFILE_SPEC  \"%{!mno-lsim:-lsim}\"\n \n #undef  CTORS_SECTION_ASM_OP\n-#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors,\\\"x\\\"\"\n+#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"x\\\"\"\n #undef  DTORS_SECTION_ASM_OP\n-#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors,\\\"x\\\"\"\n+#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"x\\\"\"\n \n-#define INT_ASM_OP \".long\"\n+#define INT_ASM_OP \"\\t.long\\t\"\n \n #undef  ASM_OUTPUT_CONSTRUCTOR\n #define ASM_OUTPUT_CONSTRUCTOR(STREAM, NAME) \t\\"}, {"sha": "cc193412f98aa4af4eb481d06a7115b0d99a9723", "filename": "gcc/config/mips/elf.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78d057d88956b3dde01a370e16b9278761109d47/gcc%2Fconfig%2Fmips%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78d057d88956b3dde01a370e16b9278761109d47/gcc%2Fconfig%2Fmips%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf.h?ref=78d057d88956b3dde01a370e16b9278761109d47", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.  MIPS R3000 version with\n    GOFAST floating point library.\n-   Copyright (C) 1994, 1997, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1997, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -87,8 +87,8 @@ do {\t\t\t\t\t\t\t\t\\\n \n #undef TYPE_ASM_OP\n #undef SIZE_ASM_OP\n-#define TYPE_ASM_OP\t\".type\"\n-#define SIZE_ASM_OP\t\".size\"\n+#define TYPE_ASM_OP\t\"\\t.type\\t\"\n+#define SIZE_ASM_OP\t\"\\t.size\\t\"\n \n /* If defined, a C expression whose value is a string containing the\n    assembler operation to identify the following data as\n@@ -98,7 +98,7 @@ do {\t\t\t\t\t\t\t\t\\\n    `-fno-common' is passed, otherwise `ASM_OUTPUT_COMMON' will be\n    used.  */\n #ifndef BSS_SECTION_ASM_OP\n-#define BSS_SECTION_ASM_OP\t\".section\\t.bss\"\n+#define BSS_SECTION_ASM_OP\t\"\\t.section\\t.bss\"\n #endif\n \n #define SBSS_SECTION_ASM_OP\t\"\\t.section .sbss\""}, {"sha": "6243dc93568e0795e12eae569932c147318c6781", "filename": "gcc/config/mips/elf64.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78d057d88956b3dde01a370e16b9278761109d47/gcc%2Fconfig%2Fmips%2Felf64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78d057d88956b3dde01a370e16b9278761109d47/gcc%2Fconfig%2Fmips%2Felf64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf64.h?ref=78d057d88956b3dde01a370e16b9278761109d47", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.  MIPS R4000 version with\n    GOFAST floating point library.\n-   Copyright (C) 1994, 1995, 1996, 1997, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1995, 1996, 1997, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -104,8 +104,8 @@ do {\t\t\t\t\t\t\t\t\\\n \n #undef TYPE_ASM_OP\n #undef SIZE_ASM_OP\n-#define TYPE_ASM_OP\t\".type\"\n-#define SIZE_ASM_OP\t\".size\"\n+#define TYPE_ASM_OP\t\"\\t.type\\t\"\n+#define SIZE_ASM_OP\t\"\\t.size\\t\"\n \n /* These macros generate the special .type and .size directives which\n    are used to set the corresponding fields of the linker symbol table"}, {"sha": "a5dd2bc7e0831cbe1c15276a4a113d4d1d16a185", "filename": "gcc/config/mips/iris5.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78d057d88956b3dde01a370e16b9278761109d47/gcc%2Fconfig%2Fmips%2Firis5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78d057d88956b3dde01a370e16b9278761109d47/gcc%2Fconfig%2Fmips%2Firis5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis5.h?ref=78d057d88956b3dde01a370e16b9278761109d47", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Iris version 5.\n-   Copyright (C) 1993, 1995, 1996, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1995, 1996, 1998, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -21,7 +21,7 @@ Boston, MA 02111-1307, USA.  */\n #ifndef TARGET_DEFAULT\n #define\tTARGET_DEFAULT\tMASK_ABICALLS\n #endif\n-#define ABICALLS_ASM_OP \".option pic2\"\n+#define ABICALLS_ASM_OP \"\\t.option pic2\"\n \n #include \"mips/iris3.h\"\n #include \"mips/mips.h\""}, {"sha": "3c92998d1c95264209b4f73fc4dc8b436ea64e8f", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78d057d88956b3dde01a370e16b9278761109d47/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78d057d88956b3dde01a370e16b9278761109d47/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=78d057d88956b3dde01a370e16b9278761109d47", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Iris version 6.\n-   Copyright (C) 1994, 1995, 1996, 1997, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1995, 1996, 1997, 1998, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -185,8 +185,8 @@ Boston, MA 02111-1307, USA.  */\n \n /* Define the strings used for the special svr4 .type and .size directives.  */\n \n-#define TYPE_ASM_OP\t\".type\"\n-#define SIZE_ASM_OP\t\".size\"\n+#define TYPE_ASM_OP\t\"\\t.type\\t\"\n+#define SIZE_ASM_OP\t\"\\t.size\\t\"\n \n /* This is how we tell the assembler that a symbol is weak.  */\n \n@@ -205,7 +205,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define ASM_WEAKEN_LABEL(FILE,NAME) ASM_OUTPUT_WEAK_ALIAS(FILE,NAME,0)\n \n-#define POPSECTION_ASM_OP\t\".popsection\"\n+#define POPSECTION_ASM_OP\t\"\\t.popsection\"\n \n #define DEBUG_INFO_SECTION\t\".debug_info,0x7000001e,0,0,1\"\n #define DEBUG_LINE_SECTION\t\".debug_line,0x7000001e,0,0,1\"\n@@ -250,9 +250,9 @@ Boston, MA 02111-1307, USA.  */\n    and dtor lists this way, so we use -init and -fini to invoke the\n    do_global_* functions instead of running collect2.  */\n \n-#define BSS_SECTION_ASM_OP\t\".section\\t.bss\"\n+#define BSS_SECTION_ASM_OP\t\"\\t.section\\t.bss\"\n #define CONST_SECTION_ASM_OP_32\t\"\\t.rdata\"\n-#define CONST_SECTION_ASM_OP_64\t\".section\\t.rodata\"\n+#define CONST_SECTION_ASM_OP_64\t\"\\t.section\\t.rodata\"\n \n /* The IRIX 6 assembler .section directive takes four additional args:\n    section type, flags, entry size, and alignment.  The alignment of the\n@@ -263,25 +263,25 @@ Boston, MA 02111-1307, USA.  */\n /* If we are included from crtstuff.c, these need to be plain strings.\n    _MIPS_SZPTR is defined in SUBTARGET_CPP_SPEC above.  */\n #if _MIPS_SZPTR == 64\n-#define CTORS_SECTION_ASM_OP \".section\\t.ctors,1,2,0,8\"\n-#define DTORS_SECTION_ASM_OP \".section\\t.dtors,1,2,0,8\"\n+#define CTORS_SECTION_ASM_OP \"\\t.section\\t.ctors,1,2,0,8\"\n+#define DTORS_SECTION_ASM_OP \"\\t.section\\t.dtors,1,2,0,8\"\n #else /* _MIPS_SZPTR != 64 */\n-#define CTORS_SECTION_ASM_OP \".section\\t.ctors,1,2,0,4\"\n-#define DTORS_SECTION_ASM_OP \".section\\t.dtors,1,2,0,4\"\n+#define CTORS_SECTION_ASM_OP \"\\t.section\\t.ctors,1,2,0,4\"\n+#define DTORS_SECTION_ASM_OP \"\\t.section\\t.dtors,1,2,0,4\"\n #endif /* _MIPS_SZPTR == 64 */\n \n #else /* ! (defined (CRT_BEGIN) || defined (CRT_END)) */\n \n /* If we are included from varasm.c, these need to depend on -mabi.  */\n #define CTORS_SECTION_ASM_OP \\\n-  (Pmode == DImode ? \".section\\t.ctors,1,2,0,8\" : \".section\\t.ctors,1,2,0,4\")\n+  (Pmode == DImode ? \"\\t.section\\t.ctors,1,2,0,8\" : \"\\t.section\\t.ctors,1,2,0,4\")\n #define DTORS_SECTION_ASM_OP \\\n-  (Pmode == DImode ? \".section\\t.dtors,1,2,0,8\" : \".section\\t.dtors,1,2,0,4\")\n+  (Pmode == DImode ? \"\\t.section\\t.dtors,1,2,0,8\" : \"\\t.section\\t.dtors,1,2,0,4\")\n #endif /* defined (CRT_BEGIN) || defined (CRT_END) */\n \n /* dwarf2out will handle padding this data properly.  We definitely don't\n    want it 8-byte aligned on n32.  */\n-#define EH_FRAME_SECTION_ASM_OP \".section\\t.eh_frame,1,2,0,1\"\n+#define EH_FRAME_SECTION_ASM_OP \"\\t.section\\t.eh_frame,1,2,0,1\"\n \n /* A default list of other sections which we might be \"in\" at any given\n    time.  For targets that use additional sections (e.g. .tdesc) you"}, {"sha": "2eebf628932dde2051c6a80b378dd08066f6d9cc", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78d057d88956b3dde01a370e16b9278761109d47/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78d057d88956b3dde01a370e16b9278761109d47/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=78d057d88956b3dde01a370e16b9278761109d47", "patch": "@@ -5988,7 +5988,7 @@ mips_asm_file_start (stream)\n \n   /* Generate the pseudo ops that System V.4 wants.  */\n #ifndef ABICALLS_ASM_OP\n-#define ABICALLS_ASM_OP \".abicalls\"\n+#define ABICALLS_ASM_OP \"\\t.abicalls\"\n #endif\n   if (TARGET_ABICALLS)\n     /* ??? but do not want this (or want pic0) if -non-shared? */"}, {"sha": "a7c33660d2cd913c54a2b10cfd1d4fa87cad8b39", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78d057d88956b3dde01a370e16b9278761109d47/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78d057d88956b3dde01a370e16b9278761109d47/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=78d057d88956b3dde01a370e16b9278761109d47", "patch": "@@ -1046,9 +1046,9 @@ while (0)\n    that the MIPS assembler does not choke.  The mips-tfile program\n    will correctly put the stab into the object file.  */\n \n-#define ASM_STABS_OP\t((TARGET_GAS) ? \".stabs\" : \" #.stabs\")\n-#define ASM_STABN_OP\t((TARGET_GAS) ? \".stabn\" : \" #.stabn\")\n-#define ASM_STABD_OP\t((TARGET_GAS) ? \".stabd\" : \" #.stabd\")\n+#define ASM_STABS_OP\t((TARGET_GAS) ? \"\\t.stabs\\t\" : \" #.stabs\\t\")\n+#define ASM_STABN_OP\t((TARGET_GAS) ? \"\\t.stabn\\t\" : \" #.stabn\\t\")\n+#define ASM_STABD_OP\t((TARGET_GAS) ? \"\\t.stabd\\t\" : \" #.stabd\\t\")\n \n /* Local compiler-generated symbols must have a prefix that the assembler\n    understands.   By default, this is $, although some targets (e.g.,"}, {"sha": "3ddc42219e5ad867e6db1b58dae81067dfe8fa29", "filename": "gcc/config/mips/netbsd.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78d057d88956b3dde01a370e16b9278761109d47/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78d057d88956b3dde01a370e16b9278761109d47/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fnetbsd.h?ref=78d057d88956b3dde01a370e16b9278761109d47", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for DECstation running BSD as target machine for GNU compiler.\n-   Copyright (C) 1993, 1995, 1996, 1997, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1995, 1996, 1997, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -95,9 +95,9 @@ Boston, MA 02111-1307, USA.  */\n #undef TYPE_ASM_OP\n #undef SIZE_ASM_OP\n #undef WEAK_ASM_OP\n-#define TYPE_ASM_OP\t\".type\"\n-#define SIZE_ASM_OP\t\".size\"\n-#define WEAK_ASM_OP\t\".weak\"\n+#define TYPE_ASM_OP\t\"\\t.type\\t\"\n+#define SIZE_ASM_OP\t\"\\t.size\\t\"\n+#define WEAK_ASM_OP\t\"\\t.weak\\t\"\n \n /* The following macro defines the format used to output the second\n    operand of the .type assembler directive.  Different svr4 assemblers"}, {"sha": "10ab6dcb25d98cee105cc532724555a21f7035f7", "filename": "gcc/config/mips/osfrose.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78d057d88956b3dde01a370e16b9278761109d47/gcc%2Fconfig%2Fmips%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78d057d88956b3dde01a370e16b9278761109d47/gcc%2Fconfig%2Fmips%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fosfrose.h?ref=78d057d88956b3dde01a370e16b9278761109d47", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.\n    DECstation (OSF/1 reference port with OSF/rose) version.\n-   Copyright (C) 1991, 1992, 1995, 1996, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1992, 1995, 1996, 1998, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -100,7 +100,7 @@ Boston, MA 02111-1307, USA.  */\n /* enable dwarf debugging for testing */\n #define DWARF_DEBUGGING_INFO\n /* This is needed by dwarfout.c.  */\n-#define SET_ASM_OP\t\".set\"\n+#define SET_ASM_OP\t\"\\t.set\\t\"\n \n /* Tell collect that the object format is OSF/rose.  */\n #define OBJECT_FORMAT_ROSE"}, {"sha": "41a62dbc479169c4623f703200ff08955e1f9aec", "filename": "gcc/config/mips/sni-svr4.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78d057d88956b3dde01a370e16b9278761109d47/gcc%2Fconfig%2Fmips%2Fsni-svr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78d057d88956b3dde01a370e16b9278761109d47/gcc%2Fconfig%2Fmips%2Fsni-svr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsni-svr4.h?ref=78d057d88956b3dde01a370e16b9278761109d47", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  SNI SINIX version.\n-   Copyright (C) 1996, 1997, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 1999, 2000 Free Software Foundation, Inc.\n    Contributed by Marco Walther (Marco.Walther@mch.sni.de).\n \n This file is part of GNU CC.\n@@ -60,7 +60,7 @@ Boston, MA 02111-1307, USA.  */\n #define OBJECT_FORMAT_ELF\n \n #define\tTARGET_DEFAULT\tMASK_ABICALLS\n-#define ABICALLS_ASM_OP \".option pic2\"\n+#define ABICALLS_ASM_OP \"\\t.option pic2\"\n \n #define MACHINE_TYPE \"SNI running SINIX 5.42\"\n "}]}