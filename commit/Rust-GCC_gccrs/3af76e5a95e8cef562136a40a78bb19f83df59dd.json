{"sha": "3af76e5a95e8cef562136a40a78bb19f83df59dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FmNzZlNWE5NWU4Y2VmNTYyMTM2YTQwYTc4YmIxOWY4M2RmNTlkZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-08-11T04:09:21Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-08-11T04:09:21Z"}, "message": "compiler: Reject type switch using non-interface type.\n\nFixes issue 16.\n\nFrom-SVN: r190310", "tree": {"sha": "1ee84031cdc6b2307a5388a951c30e9a28326c5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ee84031cdc6b2307a5388a951c30e9a28326c5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3af76e5a95e8cef562136a40a78bb19f83df59dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af76e5a95e8cef562136a40a78bb19f83df59dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3af76e5a95e8cef562136a40a78bb19f83df59dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af76e5a95e8cef562136a40a78bb19f83df59dd/comments", "author": null, "committer": null, "parents": [{"sha": "7380e6efdd990e0286da69d7b583240eccf40694", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7380e6efdd990e0286da69d7b583240eccf40694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7380e6efdd990e0286da69d7b583240eccf40694"}], "stats": {"total": 62, "additions": 24, "deletions": 38}, "files": [{"sha": "fa7f20836ad26d9a412ca654528fea554fe50cce", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 24, "deletions": 38, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af76e5a95e8cef562136a40a78bb19f83df59dd/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af76e5a95e8cef562136a40a78bb19f83df59dd/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=3af76e5a95e8cef562136a40a78bb19f83df59dd", "patch": "@@ -4192,55 +4192,41 @@ Type_switch_statement::do_lower(Gogo*, Named_object*, Block* enclosing,\n \t\t    ? this->var_->var_value()->type()\n \t\t    : this->expr_->type());\n \n+  if (val_type->interface_type() == NULL)\n+    {\n+      if (!val_type->is_error())\n+\tthis->report_error(_(\"cannot type switch on non-interface value\"));\n+      return Statement::make_error_statement(loc);\n+    }\n+\n   // var descriptor_temp DESCRIPTOR_TYPE\n   Type* descriptor_type = Type::make_type_descriptor_ptr_type();\n   Temporary_statement* descriptor_temp =\n     Statement::make_temporary(descriptor_type, NULL, loc);\n   b->add_statement(descriptor_temp);\n \n-  if (val_type->interface_type() == NULL)\n-    {\n-      // Doing a type switch on a non-interface type.  Should we issue\n-      // a warning for this case?\n-      Expression* lhs = Expression::make_temporary_reference(descriptor_temp,\n-\t\t\t\t\t\t\t     loc);\n-      Expression* rhs;\n-      if (val_type->is_nil_type())\n-\trhs = Expression::make_nil(loc);\n-      else\n-\t{\n-\t  if (val_type->is_abstract())\n-\t    val_type = val_type->make_non_abstract_type();\n-\t  rhs = Expression::make_type_descriptor(val_type, loc);\n-\t}\n-      Statement* s = Statement::make_assignment(lhs, rhs, loc);\n-      b->add_statement(s);\n-    }\n+  // descriptor_temp = ifacetype(val_temp) FIXME: This should be\n+  // inlined.\n+  bool is_empty = val_type->interface_type()->is_empty();\n+  Expression* ref;\n+  if (this->var_ == NULL)\n+    ref = this->expr_;\n   else\n-    {\n-      // descriptor_temp = ifacetype(val_temp)\n-      // FIXME: This should be inlined.\n-      bool is_empty = val_type->interface_type()->is_empty();\n-      Expression* ref;\n-      if (this->var_ == NULL)\n-\tref = this->expr_;\n-      else\n-\tref = Expression::make_var_reference(this->var_, loc);\n-      Expression* call = Runtime::make_call((is_empty\n-\t\t\t\t\t     ? Runtime::EFACETYPE\n-\t\t\t\t\t     : Runtime::IFACETYPE),\n-\t\t\t\t\t    loc, 1, ref);\n-      Temporary_reference_expression* lhs =\n-\tExpression::make_temporary_reference(descriptor_temp, loc);\n-      lhs->set_is_lvalue();\n-      Statement* s = Statement::make_assignment(lhs, call, loc);\n-      b->add_statement(s);\n-    }\n+    ref = Expression::make_var_reference(this->var_, loc);\n+  Expression* call = Runtime::make_call((is_empty\n+\t\t\t\t\t ? Runtime::EFACETYPE\n+\t\t\t\t\t : Runtime::IFACETYPE),\n+\t\t\t\t\tloc, 1, ref);\n+  Temporary_reference_expression* lhs =\n+    Expression::make_temporary_reference(descriptor_temp, loc);\n+  lhs->set_is_lvalue();\n+  Statement* s = Statement::make_assignment(lhs, call, loc);\n+  b->add_statement(s);\n \n   if (this->clauses_ != NULL)\n     this->clauses_->lower(val_type, b, descriptor_temp, this->break_label());\n \n-  Statement* s = Statement::make_unnamed_label_statement(this->break_label_);\n+  s = Statement::make_unnamed_label_statement(this->break_label_);\n   b->add_statement(s);\n \n   return Statement::make_block_statement(b, loc);"}]}