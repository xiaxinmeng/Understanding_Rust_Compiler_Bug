{"sha": "9a8fde947ceb5dcde0debda60ae949f08de72a99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE4ZmRlOTQ3Y2ViNWRjZGUwZGViZGE2MGFlOTQ5ZjA4ZGU3MmE5OQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-06-09T20:48:17Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-06-09T20:48:17Z"}, "message": "Initial revision\n\nFrom-SVN: r14189", "tree": {"sha": "fcf79e3f8bafdf8e6881b4bdf85b8fb18da2a45c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcf79e3f8bafdf8e6881b4bdf85b8fb18da2a45c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a8fde947ceb5dcde0debda60ae949f08de72a99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a8fde947ceb5dcde0debda60ae949f08de72a99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a8fde947ceb5dcde0debda60ae949f08de72a99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a8fde947ceb5dcde0debda60ae949f08de72a99/comments", "author": null, "committer": null, "parents": [{"sha": "5891b37dfc32b68a44463020645b391550a075f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5891b37dfc32b68a44463020645b391550a075f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5891b37dfc32b68a44463020645b391550a075f9"}], "stats": {"total": 436, "additions": 436, "deletions": 0}, "files": [{"sha": "b7cf12bf4be555a8072629cf9a69486acea92295", "filename": "gcc/configure.lang", "status": "added", "additions": 436, "deletions": 0, "changes": 436, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8fde947ceb5dcde0debda60ae949f08de72a99/gcc%2Fconfigure.lang", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8fde947ceb5dcde0debda60ae949f08de72a99/gcc%2Fconfigure.lang", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.lang?ref=9a8fde947ceb5dcde0debda60ae949f08de72a99", "patch": "@@ -0,0 +1,436 @@\n+# configure.lang for GNU CC\n+# This script is run by configure for configuration of language\n+# subdirectories which conform to the old GCC configure mechansim\n+# for such subdirectories.\n+\n+# Copyright (C) 1997 Free Software Foundation, Inc.\n+\n+#This file is part of GNU CC.\n+\n+#GNU CC is free software; you can redistribute it and/or modify\n+#it under the terms of the GNU General Public License as published by\n+#the Free Software Foundation; either version 2, or (at your option)\n+#any later version.\n+\n+#GNU CC is distributed in the hope that it will be useful,\n+#but WITHOUT ANY WARRANTY; without even the implied warranty of\n+#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+#GNU General Public License for more details.\n+\n+#You should have received a copy of the GNU General Public License\n+#along with GNU CC; see the file COPYING.  If not, write to\n+#the Free Software Foundation, 59 Temple Place - Suite 330,\n+#Boston, MA 02111-1307, USA.\n+\n+savesrcdir=$srcdir\n+for subdir in . $subdirs\n+do\n+\toldsrcdir=$savesrcdir\n+\n+\t# Re-adjust the path\n+\tcase $oldsrcdir in\n+\t/*)\n+\t\tcase $subdir in\n+\t\t.)\n+\t\t\tsrcdir=$oldsrcdir\n+\t\t\t;;\n+\t\t*)\n+\t\t\tsrcdir=$oldsrcdir/$subdir\n+\t\t\t;;\n+\t\tesac\n+\t\t;;\n+\t*)\n+\t\tcase $subdir in\n+\t\t.)\n+\t\t\t;;\n+\t\t*)\n+\t\t\toldsrcdir=../${oldsrcdir}\n+\t\t\tsrcdir=$oldsrcdir/$subdir\n+\t\t\t;;\n+\t\tesac\n+\t\t;;\n+\tesac\n+\tmainsrcdir=$oldsrcdir\n+\tSTARTDIR=`pwd`\n+\ttest -d $subdir || mkdir $subdir\n+\tcd $subdir\n+\n+\t# Create Makefile.tem from Makefile.in.\n+\t# Make it set VPATH if necessary so that the sources are found.\n+\t# Also change its value of srcdir.\n+\t# Also create a .gdbinit file which runs the one in srcdir\n+\t# and tells GDB to look there for source files.\n+\tcase $srcdir in\n+\t. | ./$subdir | .././$subdir)\n+\t\trm -f Makefile.tem\n+\t\tcp Makefile.in Makefile.tem\n+\t\tchmod +w Makefile.tem\n+\t\t;;\n+\t*)\n+\t\trm -f Makefile.tem\n+\t\techo \"VPATH = ${srcdir}\" \\\n+\t\t  | cat - ${srcdir}/Makefile.in \\\n+\t\t  | sed \"s@^srcdir = \\.@srcdir = ${srcdir}@\" > Makefile.tem\n+\t\trm -f .gdbinit\n+\t\techo \"dir .\" > .gdbinit\n+\t\techo \"dir ${srcdir}\" >> .gdbinit\n+\t\tif [ x$gdb_needs_out_file_path = xyes ]\n+\t\tthen\n+\t\t\techo \"dir ${srcdir}/config/\"`dirname ${out_file}` >> .gdbinit\n+\t\tfi\n+\t\tif [ \"x$subdirs\" != x ]; then\n+\t\t\tfor s in $subdirs\n+\t\t\tdo\n+\t\t\t\techo \"dir ${srcdir}/$s\" >> .gdbinit\n+\t\t\tdone\n+\t\tfi\n+\t\techo \"source ${srcdir}/.gdbinit\" >> .gdbinit\n+\t\t;;\n+\tesac\n+\n+\t# Conditionalize the makefile for this host machine.\n+\trm -f Makefile.xx Makefile.ll\n+\tmerged_frags=\n+\tfor f in .. ${host_xmake_file}\n+\tdo\n+\t\tif [ -f ${mainsrcdir}/config/$f ]\n+\t\tthen\n+\t\t\tcat ${mainsrcdir}/config/$f >> Makefile.ll\n+\t\t\tif [ x\"${merged_frags}\" != x ]\n+\t\t\tthen\n+\t\t\t\tmerged_frags=\"${merged_frags} and \"\n+\t\t\tfi\n+\t\t\tmerged_frags=\"${merged_frags}${f}\"\n+\t\tfi\n+\tdone\n+\tif [ x\"${merged_frags}\" != x ]\n+\tthen\n+\t\tsed -e \"/####host/  r Makefile.ll\" Makefile.tem > Makefile.xx\n+\t\techo \"Merged ${merged_frags}.\"\n+\t\trm -f Makefile.tem\n+\t\tmv Makefile.xx Makefile.tem\n+\t\trm -f Makefile.ll\n+\tfi\n+\n+\t# Add a definition for MAKE if system wants one.\n+\tcase \"$SET_MAKE\" in\n+\t?*)\n+\t\trm -f Makefile.xx\n+\t\t(echo \"$SET_MAKE\"; cat Makefile.tem) >Makefile.xx\n+\t\trm -f Makefile.tem\n+\t\tmv Makefile.xx Makefile.tem\n+\tesac\n+\n+\t# Add a definition for INSTALL if system wants one.\n+\t# This substitutes for lots of x-* files.\n+\tif [ x$build_broken_install = x ]\n+\tthen true\n+\telse\n+\t\trm -f Makefile.xx\n+\t\tabssrcdir=`cd ${srcdir}; pwd`\n+\t\tsed \"s|^INSTALL = .*|INSTALL = ${abssrcdir}/install.sh -c|\" Makefile.tem > Makefile.xx\n+\t\trm -f Makefile.tem\n+\t\tmv Makefile.xx Makefile.tem\n+\tfi\n+\n+\t# Some of the following don't make sense in the language makefiles,\n+\t# but rather than introduce another level of nesting, we leave them\n+\t# as is.\n+\n+\t# Set EXTRA_HEADERS according to extra_headers.\n+\t# This substitutes for lots of t-* files.\n+\textra_headers_list=\n+\tif [ \"x$extra_headers\" = x ]\n+\tthen true\n+\telse\n+\t\trm -f Makefile.xx\n+\t\tsed \"s|^EXTRA_HEADERS =|EXTRA_HEADERS = ${extra_headers_list}|\" Makefile.tem > Makefile.xx\n+\t\trm -f Makefile.tem\n+\t\tmv Makefile.xx Makefile.tem\n+\tfi\n+\n+\t# Set EXTRA_PASSES according to extra_passes.\n+\t# This substitutes for lots of t-* files.\n+\tif [ \"x$extra_passes\" = x ]\n+\tthen true\n+\telse\n+\t\trm -f Makefile.xx\n+\t\tsed \"s/^EXTRA_PASSES =/EXTRA_PASSES = $extra_passes/\" Makefile.tem > Makefile.xx\n+\t\trm -f Makefile.tem\n+\t\tmv Makefile.xx Makefile.tem\n+\tfi\n+\n+\t# Set EXTRA_PARTS according to extra_parts.\n+\t# This substitutes for lots of t-* files.\n+\tif [ \"x$extra_parts\" = x ]\n+\tthen true\n+\telse\n+\t\trm -f Makefile.xx\n+\t\tsed \"s/^EXTRA_PARTS =/EXTRA_PARTS = $extra_parts/\" Makefile.tem > Makefile.xx\n+\t\trm -f Makefile.tem\n+\t\tmv Makefile.xx Makefile.tem\n+\tfi\n+\n+\t# Set EXTRA_PROGRAMS according to extra_programs.\n+\tif [ \"x$extra_programs\" = x ]\n+\tthen true\n+\telse\n+\t\trm -f Makefile.xx\n+\t\tsed \"s/^EXTRA_PROGRAMS =/EXTRA_PROGRAMS = $extra_programs/\" Makefile.tem > Makefile.xx\n+\t\trm -f Makefile.tem\n+\t\tmv Makefile.xx Makefile.tem\n+\tfi\n+\n+\t# Set EXTRA_OBJS according to extra_objs.\n+\t# This substitutes for lots of t-* files.\n+\tif [ \"x$extra_objs\" = x ]\n+\tthen true\n+\telse\n+\t\trm -f Makefile.xx\n+\t\tsed \"s|^EXTRA_OBJS =|EXTRA_OBJS = $extra_objs|\" Makefile.tem > Makefile.xx\n+\t\trm -f Makefile.tem\n+\t\tmv Makefile.xx Makefile.tem\n+\tfi\n+\n+\t# Set EXTRA_GCC_OBJS according to host_extra_gcc_objs.\n+\t# This substitutes for lots of x-* files.\n+\tif [ \"x$host_extra_gcc_objs\" = x ]\n+\tthen true\n+\telse\n+\t\trm -f Makefile.xx\n+\t\tsed \"s|^EXTRA_GCC_OBJS =|EXTRA_GCC_OBJS = $host_extra_gcc_objs|\"\n+Makefile.tem > Makefile.xx\n+\t\trm -f Makefile.tem\n+\t\tmv Makefile.xx Makefile.tem\n+\tfi\n+\n+\t# Add a definition of USE_COLLECT2 if system wants one.\n+\t# Also tell toplev.c what to do.\n+\t# This substitutes for lots of t-* files.\n+\tif [ x$use_collect2 != x ]\n+\tthen\n+\t\trm -f Makefile.xx\n+\t\t(echo \"USE_COLLECT2 = ld\"; echo \"MAYBE_USE_COLLECT2 = -DUSE_COLLECT2\")\\\n+\t \t   | cat - Makefile.tem > Makefile.xx\n+\t\trm -f Makefile.tem\n+\t\tmv Makefile.xx Makefile.tem\n+\tfi\n+\n+\t# Set MD_DEPS if the real md file is in md.pre-cpp.\n+\t# Set MD_CPP to the cpp to pass the md file through.  Md files use ';'\n+\t# for line oriented comments, so we must always use a GNU cpp.  If\n+\t# building gcc with a cross compiler, use the cross compiler just\n+\t# built.  Otherwise, we can use the cpp just built.\n+\tif [ \"x$md_cppflags\" != x ]\n+\tthen\n+\t\trm -f Makefile.xx\n+\t  \t(if [ x$host = x$build ] ; then\n+\t\t\techo \"MD_DEPS = $(md_file) cpp\" ; echo \"MD_CPP = ./cpp\"\n+\t\telse\n+\t\t\techo \"MD_DEPS = md.pre-cpp\" ; echo \"MD_CPP = \\$(HOST_CC) -x c -E\"\n+\t\tfi\n+\t\techo \"MD_CPPFLAGS = $md_cppflags\") | \\\n+\t\t  cat - Makefile.tem | sed -e \"s|^MD_FILE[ \t]*=.*|MD_FILE = md|\" > Makefile.xx\n+\t\trm -f Makefile.tem\n+\t\tmv Makefile.xx Makefile.tem\n+\tfi\n+\n+\t# If using -program-transform-name, override the installation names.\n+\tif [ \"x${program_transform_set}\" = \"xyes\" ] ; then\n+\t\tsed -e \"s/^program_transform_name[ \t]*=.*$/program_transform_name =\n+$program_transform_name/\" \\\n+\t\t    -e \"s/^program_transform_cross_name[\n+]*=.*$/program_transform_cross_name = $program_transform_name/\" \\\n+\t\t    Makefile.tem > Makefile.xx\n+\t\trm -f Makefile.tem\n+\t\tmv Makefile.xx Makefile.tem\n+\tfi\n+\n+\t# Conditionalize the makefile for this target machine.\n+\trm -f Makefile.xx Makefile.ll\n+\tmerged_frags=\n+\tfor f in .. ${tmake_file}\n+\tdo\n+\t\tif [ -f ${mainsrcdir}/config/$f ]\n+\t\tthen\n+\t\t\tcat ${mainsrcdir}/config/$f >> Makefile.ll\n+\t\t\tif [ x\"${merged_frags}\" != x ]\n+\t\t\tthen\n+\t\t\t\tmerged_frags=\"${merged_frags} and \"\n+\t\t\tfi\n+\t\t\tmerged_frags=\"${merged_frags}$f\"\n+\t\tfi\n+\tdone\n+\tif [ x\"${merged_frags}\" != x ]\n+\tthen\n+\t\tsed -e \"/####target/  r Makefile.ll\" Makefile.tem > Makefile.xx\n+\t\techo \"Merged ${merged_frags}.\"\n+\t\trm -f Makefile.tem\n+\t\tmv Makefile.xx Makefile.tem\n+\t\trm -f Makefile.ll\n+\tfi\n+\n+\t# If this is the top level Makefile, add the language fragments.\n+\t# Languages are added via two mechanisms.  Some information must be\n+\t# recorded in makefile variables, these are defined in config-lang.in.\n+\t# We accumulate them and plug them into the main Makefile.\n+\t# The other mechanism is a set of hooks for each of the main targets\n+\t# like `clean', `install', etc.\n+\tif [ $subdir = . ]\n+\tthen\n+\t\trm -f Makefile.xx Makefile.ll\n+\t\ttouch Makefile.ll\n+\t\tsed -e \"/####language fragments/ r Makefile.ll\" Makefile.tem > Makefile.xx\n+\t\trm -f Makefile.tem\n+\t\tmv Makefile.xx Makefile.tem\n+\t\tsubdirs=`echo $subdirs`\n+\t\tsed -e \"s|^SUBDIRS[ \t]*=.*$|SUBDIRS = $subdirs|\" \\\n+\t\t    -e \"s|^LANGUAGES[ \t]*=[ \t]*\\(.*\\)$|LANGUAGES = \\1 $all_languages|\" \\\n+\t\t    -e \"s|^BOOT_LANGUAGES[ \t]*=[ \t]*\\(.*\\)$|BOOT_LANGUAGES = \\1 $all_boot_languages|\" \\\n+\t\t    -e \"s|^COMPILERS[ \t]*=[ \t]*\\(.*\\)$|COMPILERS = \\1 $all_compilers|\" \\\n+\t\t    -e \"s|^LANG_MAKEFILES[ \t]*=.*$|LANG_MAKEFILES = $all_lang_makefiles|\" \\\n+\t\t    -e \"s|^LANG_STAGESTUFF[ \t]*=.*$|LANG_STAGESTUFF = $all_stagestuff|\" \\\n+\t\t    -e \"s|^LANG_DIFF_EXCLUDES[ \t]*=.*$|LANG_DIFF_EXCLUDES = $all_diff_excludes|\" \\\n+\t\t    -e \"s|^LANG_EXTRA_HEADERS[ \t]*=.*$|LANG_EXTRA_HEADERS = $all_headers|\" \\\n+\t\t    -e \"s|^LANG_LIB2FUNCS[ \t]*=.*$|LANG_LIB2FUNCS = $all_lib2funcs|\" \\\n+\t\t    Makefile.tem > Makefile.xx\n+\t\trm -f Makefile.tem\n+\t\tmv Makefile.xx Makefile.tem\n+\n+\t\t# Since we can't use `::' targets, we link each language in\n+\t\t# with a set of hooks, reached indirectly via lang.${target}.\n+\t\trm -f Makefile.ll\n+\t\tfor t in $target_list\n+\t\tdo\n+\t\t\tx=\n+\t\t\tfor l in .. $all_languages\n+\t\t\tdo\n+\t\t\t\tif [ $l != \"..\" ]; then\n+\t\t\t\t\tx=\"$x $l.$t\"\n+\t\t\t\tfi\n+\t\t\tdone\n+\t\t\techo \"lang.$t: $x\" >> Makefile.ll\n+\t\tdone\n+\t\tsed -e \"/####language hooks/ r Makefile.ll\" Makefile.tem > Makefile.xx\n+\t\trm -f Makefile.tem\n+\t\tmv Makefile.xx Makefile.tem\n+\t\trm -f Makefile.ll\n+\n+\t\t# If the host doesn't support symlinks, modify CC in\n+\t\t# FLAGS_TO_PASS so CC=\"stage1/xgcc -Bstage1/\" works.\n+\t\t# Otherwise, we can use \"CC=$(CC)\".\n+\t\trm -f symtest.tem\n+\t\tif $symbolic_link symtest1.tem symtest.tem 2>/dev/null\n+\t\tthen\n+\t\t\tsed -e 's,CC=set-by-configure,CC=$(CC),' \\\n+\t\t\t    Makefile.tem > Makefile.xx\n+\t\t\tsed -e 's,STAGE_PREFIX=set-by-configure,STAGE_PREFIX=$(STAGE_PREFIX),' \\\n+\t\t\t    Makefile.xx > Makefile.yy\n+\t\telse\n+\t\t\tsed -e \"s,CC=set-by-configure,CC=\\`case '\\$(CC)' in *stage*) echo '\\$(CC)' | sed -e 's|stage|../stage|g';; *) echo '\\$(CC)';; esac\\`,\" \\\n+\t\t\t    Makefile.tem > Makefile.xx\n+\t\t\tsed -e \"s,STAGE_PREFIX=set-by-configure,STAGE_PREFIX=\\`case '\\$(STAGE_PREFIX)' in stage*) echo '\\$(STAGE_PREFIX)' | sed -e 's|stage|../stage|g';; *) echo '\\$(STAGE_PREFIX)';; esac\\`,\" \\\n+\t\t\t    Makefile.xx > Makefile.yy\n+\t\tfi\n+\t\trm -f Makefile.tem Makefile.xx\n+\t\tmv Makefile.yy Makefile.tem\n+\t\trm -f symtest.tem\n+\n+\t\tif [ \"x$all_languages\" != x ]\n+\t\tthen\n+\t\t\t# Missing space after `Merged' is intentional.\n+\t\t\techo \"Merged$all_languages fragment(s).\"\n+\t\tfi\n+\n+\t# Otherwise, this is a language subdirectory.  If the host supports\n+\t# symlinks, point stage[123] at ../stage[123] so bootstrapping and the\n+\t# installation procedure can still use CC=\"stage1/xgcc -Bstage1/\".\n+\t# If the host doesn't support symlinks, FLAGS_TO_PASS has been\n+\t# modified to solve the problem there.\n+\telse\n+\t\tfor t in stage1 stage2 stage3 stage4 include\n+\t\tdo\n+\t\t\trm -f $t\n+\t\t\t$symbolic_link ../$t $t 2>/dev/null\n+\t\tdone\n+\tfi\n+\n+\t# Remove all formfeeds, since some Makes get confused by them.\n+\t# Also arrange to give the variables `target', `host_xmake_file',\n+\t# `tmake_file', `prefix', `local_prefix', `exec_prefix', `FIXINCLUDES'\n+\t# `out_file', `out_object', `md_file', `lang_specs_files',\n+\t# `lang_options_files', `INSTALL_HEADERS_DIR', and `CROSS_FLOAT_H'\n+\t# values in the Makefile from the values they have in this script.\n+\trm -f Makefile.xx\n+\trm -f aux-output.c aux-output.o md\n+\t# Create an empty Makefile.sed first, to work around a Nextstep 3.3 bug.\n+\techo 's|\f||' > Makefile.sed\n+\trm Makefile.sed\n+\techo 's|\f||' > Makefile.sed\n+\techo \"s|^target=.*$|target=${target}|\" >> Makefile.sed\n+\techo \"s|^target_alias=.*$|target_alias=${target}|\" >> Makefile.sed\n+\techo \"s|^xmake_file=.*$|xmake_file=${dep_host_xmake_file}|\" >> Makefile.sed\n+\techo \"s|^tmake_file=.*$|tmake_file=${dep_tmake_file}|\" >> Makefile.sed\n+\techo \"s|^version=.*$|version=${version}|\" >> Makefile.sed\n+\techo \"s|^version=.*$|version=${version}|\" >> Makefile.sed\n+\techo \"s|^out_file=.*$|out_file=${srcdir}/config/${out_file}|\" >> Makefile.sed\n+\techo \"s|^out_object_file=.*$|out_object_file=${out_object_file}|\" >> Makefile.sed\n+\techo \"s|^md_file=.*$|md_file=${md_file}|\" >> Makefile.sed\n+\techo \"s|^tm_file=.*$|tm_file=${tm_file_sub}|\" >> Makefile.sed\n+\techo \"s|^host_xm_file=.*$|host_xm_file=${host_xm_file_sub}|\" >> Makefile.sed\n+\techo \"s|^build_xm_file=.*$|build_xm_file=${build_xm_file_sub}|\" >> Makefile.sed\n+\techo \"s|^lang_specs_files=.*$|lang_specs_files=${lang_specs_files}|\" >> Makefile.sed\n+\techo \"s|^lang_options_files=.*$|lang_options_files=${lang_options_files}|\" >> Makefile.sed\n+\techo \"s|^OBJC_THREAD_FILE=.*$|OBJC_THREAD_FILE=thr-${objc_thread_file}|\" >> Makefile.sed\n+\techo \"s|^prefix[ \t]*=.*|prefix = $prefix|\" >> Makefile.sed\n+\techo \"s|^local_prefix[ \t]*=.*|local_prefix = $local_prefix|\" >> Makefile.sed\n+\techo \"s|^exec_prefix[ \t]*=.*|exec_prefix = $exec_prefix|\" >> Makefile.sed\n+\techo \"s|^FIXINCLUDES[ \t]*=.*|FIXINCLUDES = $fixincludes|\" >> Makefile.sed\n+\techo \"s|^INSTALL_HEADERS_DIR[ \t]*=.*$|INSTALL_HEADERS_DIR = ${build_install_headers_dir}|\" >> Makefile.sed\n+\techo \"s|^exeext[ \t]*=.*$|exeext = ${build_exeext}|\" >> Makefile.sed\n+\techo \"s|^CROSS_FLOAT_H[\t]*=.*|CROSS_FLOAT_H=\\$(srcdir)/config/float-${float_format}.h|\" >> Makefile.sed\n+\tsed -f Makefile.sed Makefile.tem > Makefile.xx\n+\trm -f Makefile.tem Makefile.sed\n+\tmv Makefile.xx Makefile.tem\n+\n+\t# Install Makefile for real, after making final changes.\n+\t# Define macro CROSS_COMPILE in compilation\n+\t# if this is a cross-compiler.\n+\t# Also use all.cross instead of all.internal\n+\t# and add cross-make to Makefile.\n+\tif [ x$host != x$target ]\n+\tthen\n+\t\trm -f Makefile.xx\n+\t\techo \"CROSS=-DCROSS_COMPILE\" > Makefile.xx\n+\t\tsed -e \"/####cross/  r ${mainsrcdir}/cross-make\" Makefile.tem >> Makefile.xx\n+\t\trm -f Makefile.tem\n+\t\tmv Makefile.xx Makefile.tem\n+\tfi\n+\n+\t# When building gcc with a cross-compiler, we need to fix a few things.\n+\t# This must come after cross-make as we want all.build to override\n+\t# all.cross.\n+  \tif [ x$build != x$host ]\n+\tthen\n+\t\trm -f Makefile.xx\n+\t\techo \"build= $build\" > Makefile.xx\n+\t\techo \"host= $host\" >> Makefile.xx\n+    \t\tsed -e \"s|objc-runtime$||\" \\\n+\t\t    -e \"/####build/  r ${mainsrcdir}/build-make\" Makefile.tem >> Makefile.xx\n+\t\trm -f Makefile.tem\n+\t\tmv Makefile.xx Makefile.tem\n+\tfi\n+\n+\tif [ $subdir != . ]\n+\tthen\n+\t\trm -f Makefile\n+\t\tmv Makefile.tem Makefile\n+\t\techo \"Created \\`$subdir/Makefile'.\"\n+\telse\n+\t\trm -f Makefile.tem\n+\tfi\n+\n+\tcd $STARTDIR\n+done   # end of current-dir SUBDIRS loop\n+\n+srcdir=$savesrcdir"}]}