{"sha": "74b66b3c09e3e2019a29bc877ee0df58d3096884", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRiNjZiM2MwOWUzZTIwMTlhMjliYzg3N2VlMGRmNThkMzA5Njg4NA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-04-17T04:52:57Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-04-17T04:52:57Z"}, "message": "avr.c (avr_encode_section_info): Remove.\n\n        * config/avr/avr.c (avr_encode_section_info): Remove.\n        (avr_insert_attributes): New.\n        (print_operand_address): Use SYMBOL_REF_FUNCTION_P.\n        (avr_assemble_integer): Likewise.\n\nFrom-SVN: r65718", "tree": {"sha": "6855ee426a14b079afa5fa6d3c38dfc4748a87f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6855ee426a14b079afa5fa6d3c38dfc4748a87f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74b66b3c09e3e2019a29bc877ee0df58d3096884", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74b66b3c09e3e2019a29bc877ee0df58d3096884", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74b66b3c09e3e2019a29bc877ee0df58d3096884", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74b66b3c09e3e2019a29bc877ee0df58d3096884/comments", "author": null, "committer": null, "parents": [{"sha": "9e57d5caf27099facc4fba0bdc176b88568f9c58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e57d5caf27099facc4fba0bdc176b88568f9c58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e57d5caf27099facc4fba0bdc176b88568f9c58"}], "stats": {"total": 47, "additions": 28, "deletions": 19}, "files": [{"sha": "711701adfb40f93af14ee41be31674e10c2b529a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74b66b3c09e3e2019a29bc877ee0df58d3096884/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74b66b3c09e3e2019a29bc877ee0df58d3096884/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74b66b3c09e3e2019a29bc877ee0df58d3096884", "patch": "@@ -1,3 +1,10 @@\n+2003-04-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/avr/avr.c (avr_encode_section_info): Remove.\n+\t(avr_insert_attributes): New.\n+\t(print_operand_address): Use SYMBOL_REF_FUNCTION_P.\n+\t(avr_assemble_integer): Likewise.\n+\n 2003-04-16  Richard Henderson  <rth@redhat.com>\n \n \t* arc.c (arc_encode_section_info): Remove."}, {"sha": "ebc8964cd691519fbce2695c2aae5b2cd67dc2d1", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74b66b3c09e3e2019a29bc877ee0df58d3096884/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74b66b3c09e3e2019a29bc877ee0df58d3096884/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=74b66b3c09e3e2019a29bc877ee0df58d3096884", "patch": "@@ -66,7 +66,7 @@ static bool   avr_assemble_integer PARAMS ((rtx, unsigned int, int));\n static void   avr_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void   avr_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static void   avr_unique_section PARAMS ((tree, int));\n-static void   avr_encode_section_info PARAMS ((tree, int));\n+static void   avr_insert_attributes PARAMS ((tree, tree *));\n static unsigned int avr_section_type_flags PARAMS ((tree, const char *, int));\n \n static void   avr_asm_out_ctor PARAMS ((rtx, int));\n@@ -226,8 +226,8 @@ int avr_case_values_threshold = 30000;\n #define TARGET_ATTRIBUTE_TABLE avr_attribute_table\n #undef TARGET_ASM_UNIQUE_SECTION\n #define TARGET_ASM_UNIQUE_SECTION avr_unique_section\n-#undef TARGET_ENCODE_SECTION_INFO\n-#define TARGET_ENCODE_SECTION_INFO avr_encode_section_info\n+#undef TARGET_INSERT_ATTRIBUTES\n+#define TARGET_INSERT_ATTRIBUTES avr_insert_attributes\n #undef TARGET_SECTION_TYPE_FLAGS\n #define TARGET_SECTION_TYPE_FLAGS avr_section_type_flags\n #undef TARGET_RTX_COSTS\n@@ -1088,7 +1088,7 @@ print_operand_address (file, addr)\n \n     default:\n       if (CONSTANT_ADDRESS_P (addr)\n-\t  && ((GET_CODE (addr) == SYMBOL_REF && SYMBOL_REF_FLAG (addr))\n+\t  && ((GET_CODE (addr) == SYMBOL_REF && SYMBOL_REF_FUNCTION_P (addr))\n \t      || GET_CODE (addr) == LABEL_REF))\n \t{\n \t  fprintf (file, \"pm(\");\n@@ -4569,7 +4569,7 @@ avr_assemble_integer (x, size, aligned_p)\n      int aligned_p;\n {\n   if (size == POINTER_SIZE / BITS_PER_UNIT && aligned_p\n-      && ((GET_CODE (x) == SYMBOL_REF && SYMBOL_REF_FLAG (x))\n+      && ((GET_CODE (x) == SYMBOL_REF && SYMBOL_REF_FUNCTION_P (x))\n \t  || GET_CODE (x) == LABEL_REF))\n     {\n       fputs (\"\\t.word\\tpm(\", asm_out_file);\n@@ -4838,23 +4838,25 @@ avr_progmem_p (decl)\n   return 0;\n }\n \n-/* Encode section information about tree DECL.  */\n-  \n+/* Add the section attribute if the variable is in progmem.  */\n+\n static void\n-avr_encode_section_info (decl, first)\n-     tree decl;\n-     int first;\n+avr_insert_attributes (node, attributes)\n+     tree node;\n+     tree *attributes;\n {\n-  if (TREE_CODE (decl) == FUNCTION_DECL)\n-    SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n-  else if (first\n-\t   && (TREE_STATIC (decl) || DECL_EXTERNAL (decl))\n-\t   && TREE_CODE (decl) == VAR_DECL\n-\t   && avr_progmem_p (decl))\n+  if (TREE_CODE (node) == VAR_DECL\n+      && (TREE_STATIC (node) || DECL_EXTERNAL (node))\n+      && avr_progmem_p (node))\n     {\n-      static const char *const dsec = \".progmem.data\";\n-      DECL_SECTION_NAME (decl) = build_string (strlen (dsec), dsec);\n-      TREE_READONLY (decl) = 1;\n+      static const char dsec[] = \".progmem.data\";\n+      *attributes = tree_cons (get_identifier (\"section\"),\n+\t\tbuild_tree_list (NULL, build_string (strlen (dsec), dsec)),\n+\t\t*attributes);\n+\n+      /* ??? This seems sketchy.  Why can't the user declare the\n+\t thing const in the first place?  */\n+      TREE_READONLY (node) = 1;\n     }\n }\n "}]}