{"sha": "3d4e9f8dba321e392fa702064ef1ba0722aae078", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q0ZTlmOGRiYTMyMWUzOTJmYTcwMjA2NGVmMWJhMDcyMmFhZTA3OA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-09-18T18:00:39Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-09-18T18:00:39Z"}, "message": "(enum reg_class, REG_CLASS_NAMES, REG_CLASS_CONTENTS): Added R2 and R0_1.\n\n(REG_CLASS_FROM_LETTER): New letters 't' and 'z'.\n(EXTRA_CONSTRAINT): New letter 'Q'.\n\nFrom-SVN: r10372", "tree": {"sha": "676d978c97dc8726e83f5e1f0acaee81a1f9aee1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/676d978c97dc8726e83f5e1f0acaee81a1f9aee1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d4e9f8dba321e392fa702064ef1ba0722aae078", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d4e9f8dba321e392fa702064ef1ba0722aae078", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d4e9f8dba321e392fa702064ef1ba0722aae078", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d4e9f8dba321e392fa702064ef1ba0722aae078/comments", "author": null, "committer": null, "parents": [{"sha": "c60a3c2ffc9d522be4befd53fdcc10f2b9fd8682", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c60a3c2ffc9d522be4befd53fdcc10f2b9fd8682", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c60a3c2ffc9d522be4befd53fdcc10f2b9fd8682"}], "stats": {"total": 35, "additions": 25, "deletions": 10}, "files": [{"sha": "ac98eff6f61494d7f29f1e0ebda320933a92a83c", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4e9f8dba321e392fa702064ef1ba0722aae078/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4e9f8dba321e392fa702064ef1ba0722aae078/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=3d4e9f8dba321e392fa702064ef1ba0722aae078", "patch": "@@ -286,7 +286,7 @@ extern char *strdup(), *float_label();\n    This naming inversion is due to the GCC defined capabilities of\n    \"Base\" vs. \"Index\" regs. */\n \n-enum reg_class { NO_REGS, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLASSES };\n+enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLASSES };\n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n@@ -297,32 +297,35 @@ enum reg_class { NO_REGS, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLASSES };\n /* Give names of register classes as strings for dump file.   */\n \n #define REG_CLASS_NAMES \\\n- { \"NO_REGS\", \"INDEX_REGS\", \"BASE_REGS\", \"ALL_REGS\" }\n+ { \"NO_REGS\", \"R2\", \"R0_1\", \"INDEX_REGS\", \"BASE_REGS\", \"ALL_REGS\" }\n \n /* Define which registers fit in which classes.\n    This is an initializer for a vector of HARD_REG_SET\n    of length N_REG_CLASSES.\n    1750 \"index\" (remember, in the *GCC* sense!) regs are R12 through R15. \n    The only 1750 register not usable as BASE_REG is R0. */\n \n-#define REG_CLASS_CONTENTS  {0, 0xf000, 0xfffe, 0xffff}\n+#define REG_CLASS_CONTENTS  {0, 0x0004, 0x0003, 0xf000, 0xfffe, 0xffff}\n \n /* The same information, inverted:\n    Return the class number of the smallest class containing\n    reg number REGNO.  This could be a conditional expression\n    or could index an array.  */\n-#define REGNO_REG_CLASS(REGNO)\t\\\n- ((REGNO) >= 12 ? INDEX_REGS : (REGNO) >  0 ? BASE_REGS : ALL_REGS)\n+#define REGNO_REG_CLASS(REGNO) ((REGNO) == 2 ? R2 : (REGNO) == 0 ? R0_1 : \\\n+  (REGNO) >= 12 ? INDEX_REGS : (REGNO) >  0 ? BASE_REGS : ALL_REGS)\n \n /* The class value for index registers, and the one for base regs. */\n \n #define BASE_REG_CLASS  BASE_REGS\n #define INDEX_REG_CLASS INDEX_REGS\n \n /* Get reg_class from a letter such as appears in the machine description.\n-   For the 1750, we have 'b' for gcc Base regs and 'x' for gcc Index regs. */\n+   For the 1750, we have 'z' for R0_1, 't' for R2, 'b' for gcc Base regs \n+   and 'x' for gcc Index regs. */\n \n-#define REG_CLASS_FROM_LETTER(C) ((C) == 'b' ? BASE_REGS : \\\n+#define REG_CLASS_FROM_LETTER(C) ((C) == 't' ? R2 : \\\n+\t\t\t\t  (C) == 'z' ? R0_1 : \\\n+\t\t\t\t  (C) == 'b' ? BASE_REGS : \\\n \t\t\t\t  (C) == 'x' ? INDEX_REGS : NO_REGS)\n \n /* The letters I,J,K,.. to P in a register constraint string\n@@ -352,6 +355,16 @@ enum reg_class { NO_REGS, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLASSES };\n    Here VALUE is the CONST_DOUBLE rtx itself.  */\n #define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C)  0\n \n+/* Optional extra constraints for this machine.\n+\n+   For the 1750, `Q' means that this is a memory operand consisting\n+   of the sum of an Index Register (in the GCC sense, i.e. R12..R15)\n+   and a constant in the range 0..255. This constraint is used for\n+   the Base Register with Offset address mode instructions (LB,STB,AB,..)  */\n+\n+#define EXTRA_CONSTRAINT(OP, C)\t\t\t\t\\\n+  ((C) == 'Q' && b_mode_operand (OP))\n+\n /* Given an rtx X being reloaded into a reg required to be\n    in class CLASS, return the class of reg to actually use.\n    In general this is just CLASS; but on some machines\n@@ -663,8 +676,8 @@ enum reg_class { NO_REGS, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLASSES };\n    Since they use reg_renumber, they are safe only once reg_renumber\n    has been allocated, which happens in local-alloc.c. \n    1750 note: The words BASE and INDEX are used in their GCC senses:\n-   The \"Index Registers\", R12 through R15, can have an address displacement\n-   int the range 0..255 words.\n+   The \"Index Registers\", R12 through R15, are used in the 1750\n+   instructions LB,STB,AB,SBB,MB,DB,LBX,STBX,...\n    */\n \n #define REGNO_OK_FOR_BASE_P(REGNO)  \\\n@@ -1278,7 +1291,9 @@ enum reg_class { NO_REGS, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLASSES };\n \t\t  E=single precision) label name\n \t'F': print a label defining a floating-point constant value\n \t'J': print the absolute value of a negative INT_CONST\n-\t     (this is used in LISN/CISN/MISN/SISP and others)   */\n+\t     (this is used in LISN/CISN/MISN/SISP and others)\n+\t'Q': print a 1750 Base-Register-with-offset instruction's operands\n+ */\n \n /* 1750A: see file aux-output.c */\n #define PRINT_OPERAND(FILE, X, CODE)  print_operand(FILE,X,CODE)"}]}