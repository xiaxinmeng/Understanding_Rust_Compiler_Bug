{"sha": "fd0d4c1fbba96c6ddfe7377557ab8b184551cf3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQwZDRjMWZiYmE5NmM2ZGRmZTczNzc1NTdhYjhiMTg0NTUxY2YzYQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@nildram.co.uk", "date": "2007-11-12T20:05:46Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-11-12T20:05:46Z"}, "message": "re PR target/34042 (Segfault in mips_cannot_change_mode_class)\n\ngcc/\n\tPR target/34042\n\t* config/mips/mips.c (mips_return_fpr_single): New function.\n\t(mips_function_value): Use it when returning single-field\n\taggregates in FPRs.\n\t(mips_expand_call): Handle the PARALLELs created by\n\tmips_return_fpr_single.\n\nFrom-SVN: r130119", "tree": {"sha": "de116c6b422106648505aac5c6f0de56f8003ba6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de116c6b422106648505aac5c6f0de56f8003ba6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd0d4c1fbba96c6ddfe7377557ab8b184551cf3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd0d4c1fbba96c6ddfe7377557ab8b184551cf3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd0d4c1fbba96c6ddfe7377557ab8b184551cf3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd0d4c1fbba96c6ddfe7377557ab8b184551cf3a/comments", "author": null, "committer": null, "parents": [{"sha": "3aa64f2ccc63b2982910d9d59d0a5f7e99f640ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aa64f2ccc63b2982910d9d59d0a5f7e99f640ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aa64f2ccc63b2982910d9d59d0a5f7e99f640ab"}], "stats": {"total": 49, "additions": 45, "deletions": 4}, "files": [{"sha": "3c2875f79edf14c8438ca58a23174312464ac637", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd0d4c1fbba96c6ddfe7377557ab8b184551cf3a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd0d4c1fbba96c6ddfe7377557ab8b184551cf3a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd0d4c1fbba96c6ddfe7377557ab8b184551cf3a", "patch": "@@ -1,3 +1,12 @@\n+2007-11-12  Richard Sandiford  <rsandifo@nildram.co.uk>\n+\n+\tPR target/34042\n+\t* config/mips/mips.c (mips_return_fpr_single): New function.\n+\t(mips_function_value): Use it when returning single-field\n+\taggregates in FPRs.\n+\t(mips_expand_call): Handle the PARALLELs created by\n+\tmips_return_fpr_single.\n+\n 2007-11-12  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/34070"}, {"sha": "54e2d627b24ad476cd90136b021a0bb1336bbb72", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd0d4c1fbba96c6ddfe7377557ab8b184551cf3a/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd0d4c1fbba96c6ddfe7377557ab8b184551cf3a/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=fd0d4c1fbba96c6ddfe7377557ab8b184551cf3a", "patch": "@@ -4451,6 +4451,31 @@ mips_return_mode_in_fpr_p (enum machine_mode mode)\n \t  && GET_MODE_UNIT_SIZE (mode) <= UNITS_PER_HWFPVALUE);\n }\n \n+/* Return the representation of an FPR return register when the\n+   value being returned in FP_RETURN has mode VALUE_MODE and the\n+   return type itself has mode TYPE_MODE.  On NewABI targets,\n+   the two modes may be different for structures like:\n+\n+       struct __attribute__((packed)) foo { float f; }\n+\n+   where we return the SFmode value of \"f\" in FP_RETURN, but where\n+   the structure itself has mode BLKmode.  */\n+\n+static rtx\n+mips_return_fpr_single (enum machine_mode type_mode,\n+\t\t\tenum machine_mode value_mode)\n+{\n+  rtx x;\n+\n+  x = gen_rtx_REG (value_mode, FP_RETURN);\n+  if (type_mode != value_mode)\n+    {\n+      x = gen_rtx_EXPR_LIST (VOIDmode, x, const0_rtx);\n+      x = gen_rtx_PARALLEL (type_mode, gen_rtvec (1, x));\n+    }\n+  return x;\n+}\n+\n /* Return a composite value in a pair of floating-point registers.\n    MODE1 and OFFSET1 are the mode and byte offset for the first value,\n    likewise MODE2 and OFFSET2 for the second.  MODE is the mode of the\n@@ -4502,7 +4527,8 @@ mips_function_value (const_tree valtype, enum machine_mode mode)\n       switch (mips_fpr_return_fields (valtype, fields))\n \t{\n \tcase 1:\n-\t  return gen_rtx_REG (mode, FP_RETURN);\n+\t  return mips_return_fpr_single (mode,\n+\t\t\t\t\t TYPE_MODE (TREE_TYPE (fields[0])));\n \n \tcase 2:\n \t  return mips_return_fpr_pair (mode,\n@@ -5536,6 +5562,7 @@ mips_expand_call (rtx result, rtx addr, rtx args_size, rtx aux, bool sibcall_p)\n \t       : gen_call_internal (addr, args_size));\n   else if (GET_CODE (result) == PARALLEL && XVECLEN (result, 0) == 2)\n     {\n+      /* Handle return values created by mips_return_fpr_pair.  */\n       rtx reg1, reg2;\n \n       reg1 = XEXP (XVECEXP (result, 0, 0), 0);\n@@ -5546,9 +5573,14 @@ mips_expand_call (rtx result, rtx addr, rtx args_size, rtx aux, bool sibcall_p)\n \t : gen_call_value_multiple_internal (reg1, addr, args_size, reg2));\n     }\n   else\n-    pattern = (sibcall_p\n-\t       ? gen_sibcall_value_internal (result, addr, args_size)\n-\t       : gen_call_value_internal (result, addr, args_size));\n+    {\n+      /* Handle return values created by mips_return_fpr_single.  */\n+      if (GET_CODE (result) == PARALLEL && XVECLEN (result, 0) == 1)\n+\tresult = XEXP (XVECEXP (result, 0, 0), 0);\n+      pattern = (sibcall_p\n+\t\t ? gen_sibcall_value_internal (result, addr, args_size)\n+\t\t : gen_call_value_internal (result, addr, args_size));\n+    }\n \n   insn = emit_call_insn (pattern);\n "}]}