{"sha": "43b01cc12de676d5a3871f7f813c740fc32b5a1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNiMDFjYzEyZGU2NzZkNWEzODcxZjdmODEzYzc0MGZjMzJiNWExYQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2018-11-09T10:49:47Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2018-11-09T10:49:47Z"}, "message": "large-addr-aware for biarch non-w64 mingw32\n\nfor  gcc/ChangeLog\n\n\t* config/i386/mingw32.h (LINK_SPEC_LARGE_ADDR_AWARE): Adjust\n        for non-w64 x86_64 biarch.\n\nFrom-SVN: r265958", "tree": {"sha": "a0b750233668b1d90ee4935da6958884358c53c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0b750233668b1d90ee4935da6958884358c53c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43b01cc12de676d5a3871f7f813c740fc32b5a1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43b01cc12de676d5a3871f7f813c740fc32b5a1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43b01cc12de676d5a3871f7f813c740fc32b5a1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43b01cc12de676d5a3871f7f813c740fc32b5a1a/comments", "author": null, "committer": null, "parents": [{"sha": "d4920f402af2591fa9864863f8c4ddcad1f9ebc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4920f402af2591fa9864863f8c4ddcad1f9ebc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4920f402af2591fa9864863f8c4ddcad1f9ebc1"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "ec1ad174de984fec7588af5419f1362edbc326f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b01cc12de676d5a3871f7f813c740fc32b5a1a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b01cc12de676d5a3871f7f813c740fc32b5a1a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43b01cc12de676d5a3871f7f813c740fc32b5a1a", "patch": "@@ -1,3 +1,8 @@\n+2018-11-09  Alexandre Oliva <oliva@adacore.com>\n+\n+\t* config/i386/mingw32.h (LINK_SPEC_LARGE_ADDR_AWARE): Adjust\n+\tfor non-w64 x86_64 biarch.\n+\n 2018-11-09  Alexandre Oliva <aoliva@redhat.com>\n \n \tPR rtl-optimization/86438"}, {"sha": "5759d8d16aef7b7c5a27b2ec5f29d8902063caee", "filename": "gcc/config/i386/mingw32.h", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b01cc12de676d5a3871f7f813c740fc32b5a1a/gcc%2Fconfig%2Fi386%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b01cc12de676d5a3871f7f813c740fc32b5a1a/gcc%2Fconfig%2Fi386%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw32.h?ref=43b01cc12de676d5a3871f7f813c740fc32b5a1a", "patch": "@@ -114,11 +114,26 @@ along with GCC; see the file COPYING3.  If not see\n #define SUBTARGET_EXTRA_SPECS\t\t\t\t\t\t\\\n   { \"shared_libgcc_undefs\", SHARED_LIBGCC_UNDEFS_SPEC }\n \n-#if MINGW_DEFAULT_LARGE_ADDR_AWARE\n+#if ! MINGW_DEFAULT_LARGE_ADDR_AWARE\n+/* This is used without --enable-large-address-aware.  */\n+# define LINK_SPEC_LARGE_ADDR_AWARE \"\"\n+#elif ! TARGET_BI_ARCH\n+/* This is used on i686-pc-mingw32 with --enable-large-address-aware.  */\n # define LINK_SPEC_LARGE_ADDR_AWARE \\\n   \"%{!shared:%{!mdll:--large-address-aware}}\"\n+#elif TARGET_64BIT_DEFAULT\n+/* This is used on x86_64-pc-mingw32 with --enable-large-address-aware.\n+   ??? It probably doesn't work, because the linker emulation defaults\n+   to i386pep, the 64-bit mode that does not support\n+   --large-address-aware, and x86_64-pc-mingw32 does not override the\n+   emulation to i386pe for -m32, unlike x86_64-w64-mingw32.  */\n+# define LINK_SPEC_LARGE_ADDR_AWARE \\\n+  \"%{!shared:%{!mdll:%{m32:--large-address-aware}}}\"\n #else\n-# define LINK_SPEC_LARGE_ADDR_AWARE \"\"\n+/* This would only be used if someone introduced a biarch\n+   configuration that defaulted to 32-bit.  */\n+# define LINK_SPEC_LARGE_ADDR_AWARE \\\n+  \"%{!shared:%{!mdll:%{!m64:--large-address-aware}}}\"\n #endif\n \n #define LINK_SPEC \"%{mwindows:--subsystem windows} \\"}]}