{"sha": "7be5b0e5a440de60b0ab8dfdac1f44e2cbf63bba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JlNWIwZTVhNDQwZGU2MGIwYWI4ZGZkYWMxZjQ0ZTJjYmY2M2JiYQ==", "commit": {"author": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2001-09-06T22:22:44Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2001-09-06T22:22:44Z"}, "message": "class.c (O_BINARY): Define if necessary.\n\n        * class.c (O_BINARY): Define if necessary.\n        (registerResource_libfunc): Declare.\n        (init_class_processing): Initilize registerResource_libfunc.\n        (compile_resource_file): New function.\n        * java-tree.h (resource_name): Declare.\n        (compile_resource_file): Declare.\n        * jcf-parse.c (yyparse): Handle compiling java resource files.\n        * lang.c (java_decode_option): Handle -fcompile-resource option.\n        * jvspec.c (lang_specific_driver): Handle -R flag for compiling\n        resource files.\n        * gcj.texi (Code Generation): Add documentation for -R flag.\n\nFrom-SVN: r45448", "tree": {"sha": "37aff30da6021cca7b3d351d0edb6a2570cbf393", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37aff30da6021cca7b3d351d0edb6a2570cbf393"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7be5b0e5a440de60b0ab8dfdac1f44e2cbf63bba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7be5b0e5a440de60b0ab8dfdac1f44e2cbf63bba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7be5b0e5a440de60b0ab8dfdac1f44e2cbf63bba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7be5b0e5a440de60b0ab8dfdac1f44e2cbf63bba/comments", "author": null, "committer": null, "parents": [{"sha": "7d8be4dab0814a35eb8150722dec6626e7f7162e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d8be4dab0814a35eb8150722dec6626e7f7162e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d8be4dab0814a35eb8150722dec6626e7f7162e"}], "stats": {"total": 198, "additions": 195, "deletions": 3}, "files": [{"sha": "516ff8a38400e5c0492c33c604306435162b9c2f", "filename": "gcc/java/class.c", "status": "modified", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be5b0e5a440de60b0ab8dfdac1f44e2cbf63bba/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be5b0e5a440de60b0ab8dfdac1f44e2cbf63bba/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=7be5b0e5a440de60b0ab8dfdac1f44e2cbf63bba", "patch": "@@ -38,8 +38,14 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"parse.h\"\n #include \"function.h\"\n #include \"ggc.h\"\n+#include \"stdio.h\"\n #include \"target.h\"\n \n+/* DOS brain-damage */\n+#ifndef O_BINARY\n+#define O_BINARY 0 /* MS-DOS brain-damage */\n+#endif\n+\n static tree make_method_value PARAMS ((tree));\n static tree build_java_method_type PARAMS ((tree, tree, int));\n static int32 hashUtf8String PARAMS ((const char *, int));\n@@ -53,6 +59,7 @@ static struct hash_entry *init_test_hash_newfunc PARAMS ((struct hash_entry *,\n \t\t\t\t\t\t\t  struct hash_table *,\n \t\t\t\t\t\t\t  hash_table_key));\n static rtx registerClass_libfunc;\n+static rtx registerResource_libfunc;\n \n extern struct obstack permanent_obstack;\n struct obstack temporary_obstack;\n@@ -832,6 +839,109 @@ hashUtf8String (str, len)\n   return hash;\n }\n \n+/* Generate a byte array representing the contents of FILENAME.  The\n+   array is assigned a unique local symbol.  The array represents a\n+   compiled Java resource, which is accessed by the runtime using\n+   NAME.  */\n+void\n+compile_resource_file (name, filename)\n+     char *name;\n+     char *filename;\n+{\n+  struct stat stat_buf;\n+  int fd;\n+  char *buffer;\n+  char buf[60];\n+  tree rtype, field = NULL_TREE, data_type, rinit, data, decl;\n+  static int Jr_count = 0;\n+\n+  fd = open (filename, O_RDONLY | O_BINARY);\n+  if (fd < 0)\n+    {\n+      perror (\"Failed to read resource file\");\n+      return;\n+    }\n+  if (fstat (fd, &stat_buf) != 0\n+      || ! S_ISREG (stat_buf.st_mode))\n+    {\n+      perror (\"Could not figure length of resource file\");\n+      return;\n+    }\n+  buffer = xmalloc (strlen (name) + stat_buf.st_size);\n+  strcpy (buffer, name);\n+  read (fd, buffer + strlen (name), stat_buf.st_size);\n+  close (fd);\n+  data_type = build_prim_array_type (unsigned_byte_type_node,\n+\t\t\t\t     strlen (name) + stat_buf.st_size);\n+  rtype = make_node (RECORD_TYPE);\n+  PUSH_FIELD (rtype, field, \"name_length\", unsigned_int_type_node);\n+  PUSH_FIELD (rtype, field, \"resource_length\", unsigned_int_type_node);\n+  PUSH_FIELD (rtype, field, \"data\", data_type);\n+  FINISH_RECORD (rtype);\n+  START_RECORD_CONSTRUCTOR (rinit, rtype);\n+  PUSH_FIELD_VALUE (rinit, \"name_length\", \n+\t\t    build_int_2 (strlen (name), 0));\n+  PUSH_FIELD_VALUE (rinit, \"resource_length\", \n+\t\t    build_int_2 (stat_buf.st_size, 0));\n+  data = build_string (strlen(name) + stat_buf.st_size, buffer);\n+  TREE_TYPE (data) = data_type;\n+  PUSH_FIELD_VALUE (rinit, \"data\", data);\n+  FINISH_RECORD_CONSTRUCTOR (rinit);\n+  TREE_CONSTANT (rinit) = 1;\n+\n+  /* Generate a unique-enough identifier.  */\n+  sprintf(buf, \"_Jr%d\", ++Jr_count);\n+\n+  decl = build_decl (VAR_DECL, get_identifier (buf), rtype);\n+  TREE_STATIC (decl) = 1;\n+  DECL_ARTIFICIAL (decl) = 1;\n+  DECL_IGNORED_P (decl) = 1;\n+  TREE_READONLY (decl) = 1;\n+  TREE_THIS_VOLATILE (decl) = 0;\n+  DECL_INITIAL (decl) = rinit;\n+  layout_decl (decl, 0);\n+  pushdecl (decl);\n+  rest_of_decl_compilation (decl, (char*) 0, global_bindings_p (), 0);\n+  make_decl_rtl (decl, (char*) 0);\n+  assemble_variable (decl, 1, 0, 0);\n+\n+  {\n+    tree init_name = get_file_function_name ('I');\n+    tree init_type = build_function_type (void_type_node, end_params_node);\n+    tree init_decl;\n+    \n+    init_decl = build_decl (FUNCTION_DECL, init_name, init_type);\n+    SET_DECL_ASSEMBLER_NAME (init_decl, init_name);\n+    TREE_STATIC (init_decl) = 1;\n+    current_function_decl = init_decl;\n+    DECL_RESULT (init_decl) = build_decl (RESULT_DECL, \n+\t\t\t\t\t  NULL_TREE, void_type_node);\n+    /*  DECL_EXTERNAL (init_decl) = 1;*/\n+    TREE_PUBLIC (init_decl) = 1;\n+    pushlevel (0);\n+    make_decl_rtl (init_decl, NULL);\n+    init_function_start (init_decl, input_filename, 0);\n+    expand_function_start (init_decl, 0);\n+    \n+    emit_library_call (registerResource_libfunc, 0, VOIDmode, 1,\n+\t\t       gen_rtx (SYMBOL_REF, Pmode, buf), \n+\t\t       Pmode);\n+    \n+    expand_function_end (input_filename, 0, 0);\n+    poplevel (1, 0, 1);\n+    { \n+      /* Force generation, even with -O3 or deeper. Gross hack. FIXME */\n+      int saved_flag = flag_inline_functions;\n+      flag_inline_functions = 0;\t\n+      rest_of_compilation (init_decl);\n+      flag_inline_functions = saved_flag;\n+    }\n+    current_function_decl = NULL_TREE;\n+    (* targetm.asm_out.constructor) (XEXP (DECL_RTL (init_decl), 0),\n+\t\t\t\t     DEFAULT_INIT_PRIORITY);\n+  }     \n+}\n+\n tree utf8_decl_list = NULL_TREE;\n \n tree\n@@ -1995,6 +2105,8 @@ void\n init_class_processing ()\n {\n   registerClass_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"_Jv_RegisterClass\");\n+  registerResource_libfunc = \n+    gen_rtx (SYMBOL_REF, Pmode, \"_Jv_RegisterResource\");\n   ggc_add_tree_root (class_roots, sizeof (class_roots) / sizeof (tree));\n   fields_ident = get_identifier (\"fields\");\n   info_ident = get_identifier (\"info\");"}, {"sha": "e4beb5e1938bdddadccc76abafb38088d4b77b09", "filename": "gcc/java/gcj.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be5b0e5a440de60b0ab8dfdac1f44e2cbf63bba/gcc%2Fjava%2Fgcj.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be5b0e5a440de60b0ab8dfdac1f44e2cbf63bba/gcc%2Fjava%2Fgcj.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgcj.texi?ref=7be5b0e5a440de60b0ab8dfdac1f44e2cbf63bba", "patch": "@@ -167,7 +167,7 @@ in which case they will all be compiled.  If you specify a\n option, all the input files will be compiled together, producing a\n single output file, named @var{FILENAME}.\n This is allowed even when using @code{-S} or @code{-c},\n-but not when using @code{-C}.\n+but not when using @code{-C} or @code{-R}.\n (This is an extension beyond the what plain @code{gcc} allows.)\n (If more than one input file is specified, all must currently\n be @code{.java} files, though we hope to fix this.)\n@@ -337,6 +337,11 @@ using the @code{java.lang.System.getProperty} method.\n This option is used to tell @code{gcj} to generate bytecode\n (@file{.class} files) rather than object code.\n \n+@item -R @var{resource-name}\n+This option is used to tell @code{gcj} to compile the contents of a\n+given file to object code so it may be accessed at runtime with the core\n+protocol handler as @var{core:/resource-name}.\n+\n @item -d @var{directory}\n When used with @code{-C}, this causes all generated @file{.class} files\n to be put in the appropriate subdirectory of @var{directory}.  By"}, {"sha": "cb6c738942f0de5ced00126064513095526a79e2", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be5b0e5a440de60b0ab8dfdac1f44e2cbf63bba/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be5b0e5a440de60b0ab8dfdac1f44e2cbf63bba/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=7be5b0e5a440de60b0ab8dfdac1f44e2cbf63bba", "patch": "@@ -163,6 +163,12 @@ extern int flag_emit_xref;\n /* When doing xrefs, tell when not to fold.   */\n extern int do_not_fold;\n \n+/* Resource name.  */\n+extern char * resource_name;\n+\n+/* Compile a resource file.  */\n+void compile_resource_file PARAMS ((char *, char *));\n+\n /* Turned to 1 if -Wall was encountered. See lang.c for their meanings.  */\n extern int flag_wall;\n extern int flag_redundant;"}, {"sha": "75e0a23c582210bd0b205e39a8c108954b416304", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be5b0e5a440de60b0ab8dfdac1f44e2cbf63bba/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be5b0e5a440de60b0ab8dfdac1f44e2cbf63bba/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=7be5b0e5a440de60b0ab8dfdac1f44e2cbf63bba", "patch": "@@ -36,6 +36,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"parse.h\"\n #include \"ggc.h\"\n #include \"debug.h\"\n+#include \"assert.h\"\n \n #ifdef HAVE_LOCALE_H\n #include <locale.h>\n@@ -1084,6 +1085,22 @@ yyparse ()\n   if (filename_count == 0)\n     warning (\"no input file specified\");\n \n+  if (resource_name)\n+    {\n+      char *resource_filename;\n+      \n+      /* Only one resource file may be compiled at a time.  */\n+      assert (TREE_CHAIN (current_file_list) == NULL);\n+\n+      resource_filename = IDENTIFIER_POINTER (TREE_VALUE (current_file_list));\n+      compile_resource_file (resource_name, resource_filename);\n+      \n+      java_expand_classes ();\n+      if (!java_report_errors ())\n+\temit_register_classes ();\n+      return 0;\n+    }\n+\n   current_jcf = main_jcf;\n   current_file_list = nreverse (current_file_list);\n   for (node = current_file_list; node; node = TREE_CHAIN (node))"}, {"sha": "fd6d08f58d30076bf8982666d1f887b87c058b32", "filename": "gcc/java/jvspec.c", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be5b0e5a440de60b0ab8dfdac1f44e2cbf63bba/gcc%2Fjava%2Fjvspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be5b0e5a440de60b0ab8dfdac1f44e2cbf63bba/gcc%2Fjava%2Fjvspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvspec.c?ref=7be5b0e5a440de60b0ab8dfdac1f44e2cbf63bba", "patch": "@@ -1,4 +1,4 @@\n- /* Specific flags and argument handling of the front-end of the \n+/* Specific flags and argument handling of the front-end of the \n    GNU compiler for the Java(TM) language.\n    Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n@@ -42,6 +42,8 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #define ZIP_FILE_ARG\t(1<<5)\n /* True if this arg is @FILE - where FILE contains a list of filenames. */\n #define INDIRECT_FILE_ARG (1<<6)\n+/* True if this arg is a resource file.  */\n+#define RESOURCE_FILE_ARG (1<<7)\n \n static char *find_spec_file\tPARAMS ((const char *));\n \n@@ -59,6 +61,7 @@ const char jvgenmain_spec[] =\n \t\t   %{v:-version} %{pg:-p} %{p}\\\n \t\t   %{<fbounds-check} %{<fno-bounds-check}\\\n \t\t   %{<fassume-compiled} %{<fno-assume-compiled}\\\n+                   %{<fcompile-resource*}\\\n \t\t   %{<femit-class-file} %{<femit-class-files} %{<fencoding*}\\\n \t\t   %{<fuse-boehm-gc} %{<fhash-synchronization} %{<fjni}\\\n \t\t   %{<fclasspath*} %{<fCLASSPATH*} %{<foutput-class-dir}\\\n@@ -164,7 +167,8 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n   int saw_libgcj ATTRIBUTE_UNUSED = 0;\n #endif\n \n-  /* Saw -C or -o option, respectively. */\n+  /* Saw -R, -C or -o options, respectively. */\n+  int saw_R = 0;\n   int saw_C = 0;\n   int saw_o = 0;\n \n@@ -256,6 +260,16 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n \t      library = 0;\n \t      will_link = 0;\n \t    }\n+\t  else if (strcmp (argv[i], \"-R\") == 0)\n+\t    {\n+\t      saw_R = 1;\n+\t      quote = argv[i];\n+\t      want_spec_file = 0;\n+\t      if (library != 0)\n+\t\tadded -= 2;\n+\t      library = 0;\n+\t      will_link = 0;\n+\t    }\n \t  else if (argv[i][1] == 'D')\n \t    saw_D = 1;\n \t  else if (argv[i][1] == 'g')\n@@ -324,6 +338,13 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n \t      continue;\n \t    }\n \n+\t  if (saw_R)\n+\t    {\n+\t      args[i] |= RESOURCE_FILE_ARG;\n+\t      last_input_index = i;\n+\t      added += 2;  /* for -xjava and -xnone */\n+\t    }\n+\n \t  if (argv[i][0] == '@')\n \t    {\n \t      args[i] |= INDIRECT_FILE_ARG;\n@@ -362,6 +383,11 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n     fatal (\"can't specify `-D' without `--main'\\n\");\n \n   num_args = argc + added;\n+  if (saw_R)\n+    {\n+      if (! saw_o)\n+\tfatal (\"-R requires -o\");\n+    }\n   if (saw_C)\n     {\n       num_args += 3;\n@@ -434,6 +460,23 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n       if ((args[i] & PARAM_ARG) || i == 0)\n \tcontinue;\n \n+      if ((args[i] & RESOURCE_FILE_ARG) != 0)\n+\t{\n+\t  arglist[j++] = \"-xjava\";\n+\t  arglist[j++] = argv[i];\n+\t  arglist[j] = \"-xnone\";\n+\t}\n+\n+      if (strcmp (argv[i], \"-R\") == 0)\n+\t{\n+\t  char *ptr = argv[i+i];\n+\t  arglist[j] = concat (\"-fcompile-resource=\",\n+\t\t\t       *argv[i+1] == '/' ? \"\" : \"/\",\n+\t\t\t       argv[i+1], NULL);\n+\t  i++;\n+\t  continue;\n+\t}\n+\n       if (strcmp (argv[i], \"-classpath\") == 0\n \t  || strcmp (argv[i], \"-CLASSPATH\") == 0)\n \t{"}, {"sha": "abfdc88502454fe69bfe0d31091c824297d3351d", "filename": "gcc/java/lang.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be5b0e5a440de60b0ab8dfdac1f44e2cbf63bba/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be5b0e5a440de60b0ab8dfdac1f44e2cbf63bba/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=7be5b0e5a440de60b0ab8dfdac1f44e2cbf63bba", "patch": "@@ -99,6 +99,8 @@ int compiling_from_source;\n \n const char * const language_string = \"GNU Java\";\n \n+char * resource_name;\n+\n int flag_emit_class_files = 0;\n \n /* Nonzero if input file is a file with a list of filenames to compile. */\n@@ -246,6 +248,13 @@ java_decode_option (argc, argv)\n       return 0;\n     }\n \n+#define CLARG \"-fcompile-resource=\"\n+  if (strncmp (p, CLARG, sizeof (CLARG) - 1) == 0)\n+    {\n+      resource_name = p + sizeof (CLARG) - 1;\n+      return 1;\n+    }\n+#undef CLARG\n #define CLARG \"-fassume-compiled=\"\n   if (strncmp (p, CLARG, sizeof (CLARG) - 1) == 0)\n     {"}]}