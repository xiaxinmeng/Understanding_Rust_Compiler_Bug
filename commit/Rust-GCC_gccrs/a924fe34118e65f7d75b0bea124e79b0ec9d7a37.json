{"sha": "a924fe34118e65f7d75b0bea124e79b0ec9d7a37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkyNGZlMzQxMThlNjVmN2Q3NWIwYmVhMTI0ZTc5YjBlYzlkN2EzNw==", "commit": {"author": {"name": "Toon Moene", "email": "toon@moene.indiv.nluug.nl", "date": "2004-09-12T05:51:02Z"}, "committer": {"name": "Toon Moene", "email": "toon@gcc.gnu.org", "date": "2004-09-12T05:51:02Z"}, "message": "common.opt: Remove flags -fmove-all-movables and -freduce-all-givs.\n\n2004-09-12  Toon Moene  <toon@moene.indiv.nluug.nl>\n\n\t* common.opt: Remove flags -fmove-all-movables and\n\t-freduce-all-givs.\n\t* loop-invariant.c (find_invariants_to_move):\n\tRemove all uses of flag_move_all_movables.\n\t* loop.c (move_movables): Remove all uses of\n\tflag_move_all_movables.\n\t(strength_reduce): Remove all uses of\n\tflag_reduce_all_givs.\n\t* doc/invoke.texi: Remove documentation of flags\n\t-fremove-all-movables and -freduce-all-givs.\n\nFrom-SVN: r87386", "tree": {"sha": "f81ffd2499193ee5de7e406cb262ddcdb7921622", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f81ffd2499193ee5de7e406cb262ddcdb7921622"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a924fe34118e65f7d75b0bea124e79b0ec9d7a37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a924fe34118e65f7d75b0bea124e79b0ec9d7a37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a924fe34118e65f7d75b0bea124e79b0ec9d7a37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a924fe34118e65f7d75b0bea124e79b0ec9d7a37/comments", "author": null, "committer": null, "parents": [{"sha": "0fe0caa6d942920ebaab6197c8bedb4e371e9110", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fe0caa6d942920ebaab6197c8bedb4e371e9110", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fe0caa6d942920ebaab6197c8bedb4e371e9110"}], "stats": {"total": 54, "additions": 16, "deletions": 38}, "files": [{"sha": "f9b548a830aec1e4852824a599e7be9c13b91310", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a924fe34118e65f7d75b0bea124e79b0ec9d7a37/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a924fe34118e65f7d75b0bea124e79b0ec9d7a37/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a924fe34118e65f7d75b0bea124e79b0ec9d7a37", "patch": "@@ -1,3 +1,16 @@\n+2004-09-12  Toon Moene  <toon@moene.indiv.nluug.nl>\n+\n+\t* common.opt: Remove flags -fmove-all-movables and\n+\t-freduce-all-givs.\n+\t* loop-invariant.c (find_invariants_to_move):\n+\tRemove all uses of flag_move_all_movables.\n+\t* loop.c (move_movables): Remove all uses of\n+\tflag_move_all_movables.\n+\t(strength_reduce): Remove all uses of\n+\tflag_reduce_all_givs.\n+\t* doc/invoke.texi: Remove documentation of flags\n+\t-fremove-all-movables and -freduce-all-givs.\n+\n 2004-09-11  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/17411"}, {"sha": "147f37fd23a4b468a354f830846fffbbd5334e17", "filename": "gcc/common.opt", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a924fe34118e65f7d75b0bea124e79b0ec9d7a37/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a924fe34118e65f7d75b0bea124e79b0ec9d7a37/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=a924fe34118e65f7d75b0bea124e79b0ec9d7a37", "patch": "@@ -523,10 +523,6 @@ fmodulo-sched\n Common Report Var(flag_modulo_sched)\n Perform SMS based modulo scheduling before the first scheduling pass\n \n-fmove-all-movables\n-Common Report Var(flag_move_all_movables)\n-Force all loop invariant computations out of loops\n-\n fmove-loop-invariants\n Common Report Var(flag_move_loop_invariants)\n Move loop invariant computations out of loops\n@@ -646,10 +642,6 @@ frandom-seed=\n Common Joined RejectNegative\n -frandom-seed=<string>\tMake compile reproducible using <string>\n \n-freduce-all-givs\n-Common Report Var(flag_reduce_all_givs)\n-Strength reduce all loop general induction variables\n-\n freg-struct-return\n Common Report Var(flag_pcc_struct_return,0) VarExists\n Return small aggregates in registers"}, {"sha": "4cb1c1599d4777e73d3458559bba58f4d6f1a73d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a924fe34118e65f7d75b0bea124e79b0ec9d7a37/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a924fe34118e65f7d75b0bea124e79b0ec9d7a37/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a924fe34118e65f7d75b0bea124e79b0ec9d7a37", "patch": "@@ -294,7 +294,7 @@ Objective-C and Objective-C++ Dialects}.\n -floop-optimize -fcrossjumping  -fif-conversion  -fif-conversion2 @gol\n -finline-functions  -finline-limit=@var{n}  -fkeep-inline-functions @gol\n -fkeep-static-consts  -fmerge-constants  -fmerge-all-constants @gol\n--fmodulo-sched -fmove-all-movables  -fnew-ra  -fno-branch-count-reg @gol\n+-fmodulo-sched -fnew-ra  -fno-branch-count-reg @gol\n -fno-default-inline  -fno-defer-pop -floop-optimize2 -fmove-loop-invariants @gol\n -fno-function-cse  -fno-guess-branch-probability @gol\n -fno-inline  -fno-math-errno  -fno-peephole  -fno-peephole2 @gol\n@@ -303,7 +303,7 @@ Objective-C and Objective-C++ Dialects}.\n -fomit-frame-pointer  -foptimize-register-move @gol\n -foptimize-sibling-calls  -fprefetch-loop-arrays @gol\n -fprofile-generate -fprofile-use @gol\n--freduce-all-givs  -fregmove  -frename-registers @gol\n+-fregmove  -frename-registers @gol\n -freorder-blocks  -freorder-blocks-and-partition -freorder-functions @gol\n -frerun-cse-after-loop  -frerun-loop-opt @gol\n -frounding-math -fschedule-insns  -fschedule-insns2 @gol\n@@ -4702,20 +4702,6 @@ the loop is entered.  This usually makes programs run more slowly.\n If supported by the target machine, generate instructions to prefetch\n memory to improve the performance of loops that access large arrays.\n \n-@item -fmove-all-movables\n-@opindex fmove-all-movables\n-Forces all invariant computations in loops to be moved\n-outside the loop.\n-\n-@item -freduce-all-givs\n-@opindex freduce-all-givs\n-Forces all general-induction variables in loops to be\n-strength-reduced.\n-\n-@emph{Note:} When compiling programs written in Fortran,\n-@option{-fmove-all-movables} and @option{-freduce-all-givs} are enabled\n-by default when you use the optimizer.\n-\n These options may generate better or worse code; results are highly\n dependent on the structure of loops within the source code.\n "}, {"sha": "36d5118d135233bbd5e9e6d1f197211c1cc21afd", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a924fe34118e65f7d75b0bea124e79b0ec9d7a37/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a924fe34118e65f7d75b0bea124e79b0ec9d7a37/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=a924fe34118e65f7d75b0bea124e79b0ec9d7a37", "patch": "@@ -715,17 +715,6 @@ find_invariants_to_move (struct df *df)\n   unsigned i, regs_used, n_inv_uses, regs_needed = 0, new_regs;\n   struct invariant *inv = NULL;\n \n-  if (flag_move_all_movables)\n-    {\n-      /* This is easy & stupid.  */\n-      for (i = 0; i < VARRAY_ACTIVE_SIZE (invariants); i++)\n-\t{\n-\t  inv = VARRAY_GENERIC_PTR_NOGC (invariants, i);\n-\t  inv->move = true;\n-\t}\n-      return;\n-    }\n-\n   if (!VARRAY_ACTIVE_SIZE (invariants))\n     return;\n "}, {"sha": "11e16a5a8c745ae7573f6587633f2e7ddac88976", "filename": "gcc/loop.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a924fe34118e65f7d75b0bea124e79b0ec9d7a37/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a924fe34118e65f7d75b0bea124e79b0ec9d7a37/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=a924fe34118e65f7d75b0bea124e79b0ec9d7a37", "patch": "@@ -1885,7 +1885,6 @@ move_movables (struct loop *loop, struct loop_movables *movables,\n \t     extra cost because something else was already moved.  */\n \n \t  if (already_moved[regno]\n-\t      || flag_move_all_movables\n \t      || (threshold * savings * m->lifetime) >=\n \t\t (regs->array[regno].moved_once ? insn_count * 2 : insn_count)\n \t      || (m->forces && m->forces->done\n@@ -5122,8 +5121,7 @@ strength_reduce (struct loop *loop, int flags)\n \t     of such giv's whether or not we know they are used after the loop\n \t     exit.  */\n \n-\t  if (! flag_reduce_all_givs\n-\t      && v->lifetime * threshold * benefit < insn_count\n+\t  if (v->lifetime * threshold * benefit < insn_count\n \t      && ! bl->reversed)\n \t    {\n \t      if (loop_dump_stream)"}]}