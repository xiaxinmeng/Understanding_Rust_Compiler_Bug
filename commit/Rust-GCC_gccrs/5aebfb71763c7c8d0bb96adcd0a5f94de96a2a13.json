{"sha": "5aebfb71763c7c8d0bb96adcd0a5f94de96a2a13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFlYmZiNzE3NjNjN2M4ZDBiYjk2YWRjZDBhNWY5NGRlOTZhMmExMw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-28T18:06:24Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-28T20:52:05Z"}, "message": "analyzer: fix ICE when longjmp isn't marked 'noreturn' (PR 93316)\n\nComments 11-16 within PR analyzer/93316 discuss an ICE in some setjmp\ntests seen on AIX and powerpc-darwin9.\n\nThe issue turned out to be an implicit assumption that longjmp is\nmarked \"noreturn\".  There are two places in engine.cc where the code\nattempted to locate the longjmp GIMPLE_CALL by finding the final stmt\nwithin its supernode, in one place casting it via \"as_a <gcall *>\",\nin the other using it as the location_t of the\n\"rewinding from longjmp...\" event.\n\nWhen longjmp isn't marked noreturn, its basic block and hence supernode\ncan have additional stmts after the longjmp; in the setjmp-3.c case\nthis was a GIMPLE_RETURN, leading to a ICE when casting this to a\nGIMPLE_CALL.\n\nThis patch fixes the two places in question to use the\n  rewind_info_t::get_longjmp_call\nmember function introduced by 342e14ffa30e9163a1a75e0a4fb21b6883d58dbe,\nfixing the ICE (and ensuring the correct location_t is used for events).\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/93316\n\t* engine.cc (rewind_info_t::update_model): Get the longjmp call\n\tstmt via get_longjmp_call () rather than assuming it is the last\n\tstmt in the longjmp's supernode.\n\t(rewind_info_t::add_events_to_path): Get the location_t for the\n\trewind_from_longjmp_event via get_longjmp_call () rather than from\n\tthe supernode's get_end_location ().", "tree": {"sha": "115311105d9d94f85dcb1a5d20f933c02d045959", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/115311105d9d94f85dcb1a5d20f933c02d045959"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5aebfb71763c7c8d0bb96adcd0a5f94de96a2a13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aebfb71763c7c8d0bb96adcd0a5f94de96a2a13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5aebfb71763c7c8d0bb96adcd0a5f94de96a2a13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aebfb71763c7c8d0bb96adcd0a5f94de96a2a13/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c8a1211b9873a1b69ef7b2fddae181535bc3b0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c8a1211b9873a1b69ef7b2fddae181535bc3b0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c8a1211b9873a1b69ef7b2fddae181535bc3b0a"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "c665ac10e63f216334c2b16b478544d0c434d06b", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aebfb71763c7c8d0bb96adcd0a5f94de96a2a13/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aebfb71763c7c8d0bb96adcd0a5f94de96a2a13/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=5aebfb71763c7c8d0bb96adcd0a5f94de96a2a13", "patch": "@@ -1,3 +1,13 @@\n+2020-01-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93316\n+\t* engine.cc (rewind_info_t::update_model): Get the longjmp call\n+\tstmt via get_longjmp_call () rather than assuming it is the last\n+\tstmt in the longjmp's supernode.\n+\t(rewind_info_t::add_events_to_path): Get the location_t for the\n+\trewind_from_longjmp_event via get_longjmp_call () rather than from\n+\tthe supernode's get_end_location ().\n+\n 2020-01-28  David Malcolm  <dmalcolm@redhat.com>\n \n \t* region-model.cc (poisoned_value_diagnostic::emit): Update for"}, {"sha": "9acec704224e8408a984700ec7cb3776ede60220", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aebfb71763c7c8d0bb96adcd0a5f94de96a2a13/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aebfb71763c7c8d0bb96adcd0a5f94de96a2a13/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=5aebfb71763c7c8d0bb96adcd0a5f94de96a2a13", "patch": "@@ -1333,21 +1333,13 @@ void\n rewind_info_t::update_model (region_model *model,\n \t\t\t     const exploded_edge &eedge)\n {\n-  const exploded_node &src_enode = *eedge.m_src;\n-  const program_point &src_point = src_enode.get_point ();\n-\n-  const gimple *last_stmt\n-    = src_point.get_supernode ()->get_last_stmt ();\n-  gcc_assert (last_stmt);\n-  const gcall *longjmp_call = as_a <const gcall *> (last_stmt);\n-\n   const program_point &longjmp_point = eedge.m_src->get_point ();\n   const program_point &setjmp_point = eedge.m_dest->get_point ();\n \n   gcc_assert (longjmp_point.get_stack_depth ()\n \t      >= setjmp_point.get_stack_depth ());\n \n-  model->on_longjmp (longjmp_call,\n+  model->on_longjmp (get_longjmp_call (),\n \t\t     get_setjmp_call (),\n \t\t     setjmp_point.get_stack_depth (), NULL);\n }\n@@ -1368,7 +1360,7 @@ rewind_info_t::add_events_to_path (checker_path *emission_path,\n \n   emission_path->add_event\n     (new rewind_from_longjmp_event\n-     (&eedge, src_point.get_supernode ()->get_end_location (),\n+     (&eedge, get_longjmp_call ()->location,\n       src_point.get_fndecl (),\n       src_stack_depth, this));\n   emission_path->add_event"}]}