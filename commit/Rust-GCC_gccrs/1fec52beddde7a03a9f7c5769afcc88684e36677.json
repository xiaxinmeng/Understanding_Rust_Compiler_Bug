{"sha": "1fec52beddde7a03a9f7c5769afcc88684e36677", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZlYzUyYmVkZGRlN2EwM2E5ZjdjNTc2OWFmY2M4ODY4NGUzNjY3Nw==", "commit": {"author": {"name": "Hartmut Penner", "email": "hpenner@de.ibm.com", "date": "2002-12-20T13:02:42Z"}, "committer": {"name": "Hartmut Penner", "email": "hpenner@gcc.gnu.org", "date": "2002-12-20T13:02:42Z"}, "message": "invoke.texi: Document -mzarch, -mesa, -mcpu= and -march= option for S/390 and zSeries.\n\n       \t* doc/invoke.texi: Document -mzarch, -mesa, -mcpu= and -march=\n\toption for S/390 and zSeries.\n        * config/s390/s390.c (s390_cpu, s390_cpu_string, s390_arch,\n        s390_arch_string): New variables.\n        (override_options): Checking for options and setting of\n        appropriate target_flags, cpu and arch flags.\n        * config/s390/s390.h: (processor_type): New enum.\n        (TARGET_SWITCHES): New switches -mesa/zarch.\n        * config/s390/s390.md: New attribute 'cpu'.\n\nFrom-SVN: r60364", "tree": {"sha": "0a3afe768062603de10ca94d7d249904bd1c0c76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a3afe768062603de10ca94d7d249904bd1c0c76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fec52beddde7a03a9f7c5769afcc88684e36677", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fec52beddde7a03a9f7c5769afcc88684e36677", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fec52beddde7a03a9f7c5769afcc88684e36677", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fec52beddde7a03a9f7c5769afcc88684e36677/comments", "author": null, "committer": null, "parents": [{"sha": "0c58a6399d69a582f4d7b927da0b535add6ff6b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c58a6399d69a582f4d7b927da0b535add6ff6b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c58a6399d69a582f4d7b927da0b535add6ff6b7"}], "stats": {"total": 207, "additions": 186, "deletions": 21}, "files": [{"sha": "44abb608a77b0ad6b900057e65d028d769e06107", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fec52beddde7a03a9f7c5769afcc88684e36677/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fec52beddde7a03a9f7c5769afcc88684e36677/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1fec52beddde7a03a9f7c5769afcc88684e36677", "patch": "@@ -1,3 +1,15 @@\n+2002-12-20  Hartmut Penner  <hpenner@de.ibm.com>\n+\t\n+       \t* doc/invoke.texi: Document -mzarch, -mesa, -mcpu= and -march=\n+\toption for S/390 and zSeries.\n+        * config/s390/s390.c (s390_cpu, s390_cpu_string, s390_arch,\n+        s390_arch_string): New variables.\n+        (override_options): Checking for options and setting of \n+\tappropriate target_flags, cpu and arch flags.\n+        * config/s390/s390.h: (processor_type): New enum.\n+        (TARGET_SWITCHES): New switches -mesa/zarch.\n+        * config/s390/s390.md: New attribute 'cpu'.\n+\n 2002-12-19  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* c-pretty-print.h: Fix comment typos."}, {"sha": "9be760d98f6bcf59b377fd02407fc9c6968b8e70", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fec52beddde7a03a9f7c5769afcc88684e36677/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fec52beddde7a03a9f7c5769afcc88684e36677/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=1fec52beddde7a03a9f7c5769afcc88684e36677", "patch": "@@ -117,6 +117,15 @@ struct s390_address\n   int pointer;\n };\n \n+/* Which cpu are we scheduling for.  */\n+enum processor_type s390_cpu;\n+/* Which instruction set architecture to use.  */\n+enum processor_type s390_arch;\n+\n+/* Strings to hold which cpu and instruction set architecture  to use.  */\n+const char *s390_cpu_string;\t\t/* for -mcpu=<xxx> */\n+const char *s390_arch_string;\t\t/* for -march=<xxx> */\n+\n /* Define the structure for the machine field in struct function.  */\n \n struct machine_function GTY(())\n@@ -832,11 +841,85 @@ optimization_options (level, size)\n void\n override_options ()\n {\n+  int i;\n+  static const char * const cpu_names[] = TARGET_CPU_DEFAULT_NAMES;\n+  static struct pta\n+    {\n+      const char *const name;\t\t/* processor name or nickname.  */\n+      const enum processor_type processor;\n+      const enum pta_flags\n+\t{\n+\t  PTA_IEEE_FLOAT = 1,\n+\t  PTA_ZARCH = 2\n+\t} flags;\n+    }\n+  const processor_alias_table[] =\n+    {\n+      {\"g5\", PROCESSOR_9672_G5, PTA_IEEE_FLOAT},\n+      {\"g6\", PROCESSOR_9672_G6, PTA_IEEE_FLOAT},\n+      {\"z900\", PROCESSOR_2064_Z900, PTA_IEEE_FLOAT | PTA_ZARCH},\n+    };\n+\n+  int const pta_size = ARRAY_SIZE (processor_alias_table);\n+\n   /* Acquire a unique set number for our register saves and restores.  */\n   s390_sr_alias_set = new_alias_set ();\n \n   /* Set up function hooks.  */\n   init_machine_status = s390_init_machine_status;\n+ \n+  /* Set cpu and arch, if only partially given.  */\n+  if (!s390_cpu_string && s390_arch_string)\n+    s390_cpu_string = s390_arch_string;\n+  if (!s390_cpu_string)\n+    s390_cpu_string = cpu_names [TARGET_64BIT ? TARGET_CPU_DEFAULT_2064\n+                                              :\tTARGET_CPU_DEFAULT_9672];\n+  if (!s390_arch_string)\n+#ifdef DEFAULT_TARGET_64BIT\n+    s390_arch_string = \"z900\";\n+#else\n+    s390_arch_string = \"g5\";\n+#endif\n+\n+  for (i = 0; i < pta_size; i++)\n+    if (! strcmp (s390_arch_string, processor_alias_table[i].name))\n+      {\n+\ts390_arch = processor_alias_table[i].processor;\n+\t/* Default cpu tuning to the architecture.  */\n+\ts390_cpu = s390_arch;\n+     \n+\tif (!(processor_alias_table[i].flags & PTA_ZARCH) \n+            && TARGET_64BIT)\n+          error (\"64-bit ABI not supported on %s\", s390_arch_string);\n+\n+\tif (!(processor_alias_table[i].flags & PTA_ZARCH) \n+            && TARGET_ZARCH)\n+          error (\"z/Architecture not supported on %s\", s390_arch_string);\n+\n+\tbreak;\n+      }\n+\n+  if (i == pta_size)\n+    error (\"bad value (%s) for -march= switch\", s390_arch_string);\n+\n+  /* ESA implies 31 bit mode.  */\n+  if ((target_flags_explicit & MASK_ZARCH) && !TARGET_ZARCH)\n+    {\n+      if ((target_flags_explicit & MASK_64BIT) && TARGET_64BIT)\n+\terror (\"64-bit ABI not possible in ESA/390 mode\");\n+      else\n+\ttarget_flags &= ~MASK_64BIT;\n+    }\n+\n+  for (i = 0; i < pta_size; i++)\n+    if (! strcmp (s390_cpu_string, processor_alias_table[i].name))\n+      {\n+\ts390_cpu = processor_alias_table[i].processor;\n+\tbreak;\n+      }\n+\n+  if (i == pta_size)\n+    error (\"bad value (%s) for -mcpu= switch\", s390_cpu_string);\n }\n \n /* Map for smallest class containing reg regno.  */"}, {"sha": "7ac78fa1bf6b6256b380fbd52a43d3b5c18f4e53", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 60, "deletions": 20, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fec52beddde7a03a9f7c5769afcc88684e36677/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fec52beddde7a03a9f7c5769afcc88684e36677/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=1fec52beddde7a03a9f7c5769afcc88684e36677", "patch": "@@ -28,6 +28,28 @@ Boston, MA 02111-1307, USA.  */\n #include <s390/fixdfdi.h>\n #endif\n \n+/* Which processor to generate code or schedule for. The cpu attribute \n+   defines a list that mirrors this list, so changes to s390.md must be\n+   made at the same time.  */\n+\n+enum processor_type\n+{\n+  PROCESSOR_9672_G5,\t\t\n+  PROCESSOR_9672_G6,\t\t\n+  PROCESSOR_2064_Z900,\t\t\n+  PROCESSOR_max\n+};\n+\n+extern enum processor_type s390_cpu;\n+extern const char *s390_cpu_string;\n+\n+extern enum processor_type s390_arch;\n+extern const char *s390_arch_string;\n+\n+#define TARGET_CPU_DEFAULT_9672 0\n+#define TARGET_CPU_DEFAULT_2064 2\n+\n+#define TARGET_CPU_DEFAULT_NAMES {\"g5\", \"g6\", \"z900\"}\n \n /* Run-time target specification.  */\n \n@@ -46,39 +68,57 @@ Boston, MA 02111-1307, USA.  */\n /* Optional target features.  */\n extern int target_flags;\n \n-#define TARGET_HARD_FLOAT          (target_flags & 1)\n-#define TARGET_SOFT_FLOAT          (!(target_flags & 1))\n-#define TARGET_BACKCHAIN           (target_flags & 2)\n-#define TARGET_SMALL_EXEC          (target_flags & 4)\n-#define TARGET_DEBUG_ARG           (target_flags & 8)\n-#define TARGET_64BIT               (target_flags & 16)\n-#define TARGET_MVCLE               (target_flags & 32)\n+#define MASK_HARD_FLOAT            0x01\n+#define MASK_BACKCHAIN             0x02\n+#define MASK_SMALL_EXEC            0x04\n+#define MASK_DEBUG_ARG             0x08\n+#define MASK_64BIT                 0x10\n+#define MASK_ZARCH                 0x20\n+#define MASK_MVCLE                 0x40\n+\n+#define TARGET_HARD_FLOAT          (target_flags & MASK_HARD_FLOAT)\n+#define TARGET_SOFT_FLOAT          (!(target_flags & MASK_HARD_FLOAT))\n+#define TARGET_BACKCHAIN           (target_flags & MASK_BACKCHAIN)\n+#define TARGET_SMALL_EXEC          (target_flags & MASK_SMALL_EXEC)\n+#define TARGET_DEBUG_ARG           (target_flags & MASK_DEBUG_ARG)\n+#define TARGET_64BIT               (target_flags & MASK_64BIT)\n+#define TARGET_ZARCH               (target_flags & MASK_ZARCH)\n+#define TARGET_MVCLE               (target_flags & MASK_MVCLE)\n \n /* ??? Once this actually works, it could be made a runtime option.  */\n #define TARGET_IBM_FLOAT           0\n #define TARGET_IEEE_FLOAT          1\n \n #ifdef DEFAULT_TARGET_64BIT\n-#define TARGET_DEFAULT             0x13\n+#define TARGET_DEFAULT             0x33\n #else\n #define TARGET_DEFAULT             0x3\n #endif\n \n-#define TARGET_SWITCHES           \t\t       \t\t       \\\n-{ { \"hard-float\",    1, N_(\"Use hardware fp\")},         \t\t       \\\n-  { \"soft-float\",   -1, N_(\"Don't use hardware fp\")},\t      \t       \\\n-  { \"backchain\",     2, N_(\"Set backchain\")},           \t\t       \\\n+#define TARGET_SWITCHES                                                \\\n+{ { \"hard-float\",    1, N_(\"Use hardware fp\")},                        \\\n+  { \"soft-float\",   -1, N_(\"Don't use hardware fp\")},                  \\\n+  { \"backchain\",     2, N_(\"Set backchain\")},                          \\\n   { \"no-backchain\", -2, N_(\"Don't set backchain (faster, but debug harder\")}, \\\n-  { \"small-exec\",    4, N_(\"Use bras for execucable < 64k\")},           \\\n-  { \"no-small-exec\",-4, N_(\"Don't use bras\")},            \t       \\\n-  { \"debug\",         8, N_(\"Additional debug prints\")},        \t       \\\n-  { \"no-debug\",     -8, N_(\"Don't print additional debug prints\")},     \\\n-  { \"64\",           16, N_(\"64 bit mode\")},         \t               \\\n-  { \"31\",          -16, N_(\"31 bit mode\")},                             \\\n-  { \"mvcle\",        32, N_(\"mvcle use\")},         \t               \\\n-  { \"no-mvcle\",    -32, N_(\"mvc&ex\")},                                  \\\n+  { \"small-exec\",    4, N_(\"Use bras for execucable < 64k\")},          \\\n+  { \"no-small-exec\",-4, N_(\"Don't use bras\")},                         \\\n+  { \"debug\",         8, N_(\"Additional debug prints\")},                \\\n+  { \"no-debug\",     -8, N_(\"Don't print additional debug prints\")},    \\\n+  { \"64\",           16, N_(\"64 bit ABI\")},                             \\\n+  { \"31\",          -16, N_(\"31 bit ABI\")},                             \\\n+  { \"zarch\",        32, N_(\"z/Architecture\")},                         \\\n+  { \"esa\",         -32, N_(\"ESA/390 architecture\")},                   \\\n+  { \"mvcle\",        64, N_(\"mvcle use\")},                              \\\n+  { \"no-mvcle\",    -64, N_(\"mvc&ex\")},                                 \\\n   { \"\", TARGET_DEFAULT, 0 } }\n \n+#define TARGET_OPTIONS                                          \\\n+{ { \"cpu=\",             &s390_cpu_string,                       \\\n+    N_(\"Schedule code for given CPU\")},                         \\\n+  { \"arch=\",            &s390_arch_string,                      \\\n+    N_(\"Generate code for given CPU\")},                         \\\n+}\n+\n /* Target version string.  Overridden by the OS header.  */\n #ifdef DEFAULT_TARGET_64BIT\n #define TARGET_VERSION fprintf (stderr, \" (zSeries)\");"}, {"sha": "7490fabde63e4878661be4b0e250f8128ed852e3", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fec52beddde7a03a9f7c5769afcc88684e36677/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fec52beddde7a03a9f7c5769afcc88684e36677/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=1fec52beddde7a03a9f7c5769afcc88684e36677", "patch": "@@ -44,6 +44,11 @@\n ;;   s_operand -- Matches a valid S operand in a RS, SI or SS type instruction.\n ;;\n \n+;; Processor type.  This attribute must exactly match the processor_type\n+;; enumeration in s390.h.\n+\n+(define_attr \"cpu\" \"g5,g6,z900\"\n+  (const (symbol_ref \"s390_cpu\")))\n \n ;; Define an insn type attribute.  This is used in function unit delay\n ;; computations."}, {"sha": "7e5494451ce4bf306801a86e51725cfacc7c8f67", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fec52beddde7a03a9f7c5769afcc88684e36677/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fec52beddde7a03a9f7c5769afcc88684e36677/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=1fec52beddde7a03a9f7c5769afcc88684e36677", "patch": "@@ -656,9 +656,10 @@ in the following sections.\n \n @emph{S/390 and zSeries Options}\n @gccoptlist{\n+-mcpu=@var{cpu-type} -march=@var{cpu-type} @gol\n -mhard-float  -msoft-float  -mbackchain  -mno-backchain @gol\n -msmall-exec  -mno-small-exec  -mmvcle -mno-mvcle @gol\n--m64 -m31 -mdebug -mno-debug}\n+-m64 -m31 -mdebug -mno-debug -mesa -mzarch}\n \n @emph{CRIS Options}\n @gccoptlist{\n@@ -9803,6 +9804,18 @@ particular to generate 64-bit instructions.  For the @samp{s390}\n targets, the default is @option{-m31}, while the @samp{s390x}\n targets default to @option{-m64}.\n \n+@item -mzarch\n+@itemx -mesa\n+@opindex mzarch\n+@opindex mesa\n+When @option{-mzarch} is specified, generate code using the \n+instructions available on z/Architecture. \n+When @option{-mesa} is specified, generate code using the \n+instructions available on ESA/390. Note that @option{-mesa} is\n+not possible with @option{-m64}.\n+For the @samp{s390} targets, the default is @option{-mesa}, \n+while the @samp{s390x} targets default to @option{-mzarch}.\n+\n @item -mmvcle\n @itemx -mno-mvcle\n @opindex mmvcle\n@@ -9818,6 +9831,18 @@ use a @code{mvc} loop instead.  This is the default.\n Print (or do not print) additional debug information when compiling.\n The default is to not print debug information.\n \n+@item -march=@var{arch}\n+@opindex march\n+Generate code that will run on @var{arch}, which is the name of system\n+representing a certain processor type. Possible values for\n+@var{cpu-type} are @samp{g5}, @samp{g6} and @samp{z900}. \n+\n+@item -mcpu=@var{arch}\n+@opindex mcpu\n+Tune to @var{cpu-type} everything applicable about the generated code,\n+ except for the ABI and the set of available instructions. \n+The list of @var{arch} values is the same as for @option{-march}.\n+\n @end table\n \n @node CRIS Options"}]}