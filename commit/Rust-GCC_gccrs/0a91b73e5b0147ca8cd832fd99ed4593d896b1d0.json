{"sha": "0a91b73e5b0147ca8cd832fd99ed4593d896b1d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE5MWI3M2U1YjAxNDdjYThjZDgzMmZkOTllZDQ1OTNkODk2YjFkMA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-02-10T00:16:39Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-02-10T00:16:39Z"}, "message": "Daily bump.", "tree": {"sha": "d889fc6f4631cc78be164d76b8c348ca294d0faa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d889fc6f4631cc78be164d76b8c348ca294d0faa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a91b73e5b0147ca8cd832fd99ed4593d896b1d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a91b73e5b0147ca8cd832fd99ed4593d896b1d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a91b73e5b0147ca8cd832fd99ed4593d896b1d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a91b73e5b0147ca8cd832fd99ed4593d896b1d0/comments", "author": null, "committer": null, "parents": [{"sha": "d2b1a6842c35c6e790a61291ca1a6aad3333a523", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2b1a6842c35c6e790a61291ca1a6aad3333a523", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2b1a6842c35c6e790a61291ca1a6aad3333a523"}], "stats": {"total": 197, "additions": 196, "deletions": 1}, "files": [{"sha": "c80bd57ae7651aed5f58b64a61c1da0fb6d0d4c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a91b73e5b0147ca8cd832fd99ed4593d896b1d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a91b73e5b0147ca8cd832fd99ed4593d896b1d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a91b73e5b0147ca8cd832fd99ed4593d896b1d0", "patch": "@@ -1,3 +1,44 @@\n+2021-02-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR rtl-optimization/96015\n+\t* reorg.c (skip_consecutive_labels): Minor comment tweaks.\n+\t(relax_delay_slots): When deleting a jump to the next active\n+\tinstruction over a barrier, first delete the barrier if the\n+\tjump is the only way to reach the target label.\n+\n+2021-02-09  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/aarch64/aarch64-cost-tables.h: Add entries for vect.mul.\n+\t* config/aarch64/aarch64.c (aarch64_rtx_mult_cost): Use vect.mul for\n+\tvector multiplies and vect.alu for SSRA.\n+\t* config/arm/aarch-common-protos.h (struct vector_cost_table): Define\n+\tvect.mul cost field.\n+\t* config/arm/aarch-cost-tables.h: Add entries for vect.mul.\n+\t* config/arm/arm.c: Likewise.\n+\n+2021-02-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98863\n+\t* tree-ssa-sccvn.h (vn_avail::next_undo): Add.\n+\t* tree-ssa-sccvn.c (last_pushed_avail): New global.\n+\t(rpo_elim::eliminate_push_avail): Chain pushed avails.\n+\t(unwind_state::avail_top): Add.\n+\t(do_unwind): Rewrite unwinding of avail entries.\n+\t(do_rpo_vn): Initialize last_pushed_avail and\n+\tavail_top of the undo state.\n+\n+2021-02-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/99004\n+\t* calls.c (maybe_warn_rdwr_sizes): Change s0 and s1 type from\n+\tconst char * to char * and free those pointers after use.\n+\n+2021-02-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99017\n+\t* tree-vect-slp.c (vect_bb_vectorization_profitable_p): Allow\n+\tzero vector cost entries.\n+\n 2021-02-08  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \tPR middle-end/98974"}, {"sha": "0f49558f4942534b241a49b4cf4130405b111ae4", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a91b73e5b0147ca8cd832fd99ed4593d896b1d0/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a91b73e5b0147ca8cd832fd99ed4593d896b1d0/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=0a91b73e5b0147ca8cd832fd99ed4593d896b1d0", "patch": "@@ -1 +1 @@\n-20210209\n+20210210"}, {"sha": "4cc5097ab1d349fbfa81f9a919c3306472f20d98", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a91b73e5b0147ca8cd832fd99ed4593d896b1d0/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a91b73e5b0147ca8cd832fd99ed4593d896b1d0/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=0a91b73e5b0147ca8cd832fd99ed4593d896b1d0", "patch": "@@ -1,3 +1,15 @@\n+2021-02-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/98575\n+\t* sm-file.cc (is_file_using_fn_p): Support \"_IO_\"-prefixed\n+\tvariants.\n+\n+2021-02-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/98575\n+\t* store.cc (store::set_value): Treat a pointer written to *UNKNOWN\n+\tas having escaped.\n+\n 2021-02-02  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93355"}, {"sha": "26f514b966698e18527ffb7240ead6202dd103f5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a91b73e5b0147ca8cd832fd99ed4593d896b1d0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a91b73e5b0147ca8cd832fd99ed4593d896b1d0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0a91b73e5b0147ca8cd832fd99ed4593d896b1d0", "patch": "@@ -1,3 +1,30 @@\n+2021-02-09  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/98944\n+\t* module.cc (module_state::is_rooted): Rename to ...\n+\t(module_state::has_location): ... here.  Adjust callers.\n+\t(module_state::read_partitions): Adjust validity check.\n+\tDon't overwrite a known location.\n+\n+2021-02-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/96905\n+\t* pt.c (mark_decl_instantiated): Exit early if consteval.\n+\n+2021-02-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/98326\n+\tPR c++/20408\n+\t* cp-gimplify.c (simple_empty_class_p): Don't touch an invisiref\n+\tparm.\n+\n+2021-02-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/98994\n+\tPR c++/97566\n+\t* constexpr.c (cxx_eval_store_expression): Only skip empty fields in\n+\tRECORD_TYPE.\n+\n 2021-02-08  Nathan Sidwell  <nathan@acm.org>\n \n \t* decl.c (start_cleanup_fn): Push function into"}, {"sha": "9ca9d896a7a3fff8fc54bde35be8d69df320ed7e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a91b73e5b0147ca8cd832fd99ed4593d896b1d0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a91b73e5b0147ca8cd832fd99ed4593d896b1d0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0a91b73e5b0147ca8cd832fd99ed4593d896b1d0", "patch": "@@ -1,3 +1,54 @@\n+2021-02-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/98575\n+\t* gcc.dg/analyzer/file-1.c (test_5): New.\n+\t* gcc.dg/analyzer/file-3.c: New test.\n+\n+2021-02-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/98575\n+\t* gcc.dg/analyzer/explode-1.c: Remove expected leak warning.\n+\t* gcc.dg/analyzer/pr94851-2.c: New test.\n+\t* gcc.dg/analyzer/pr98575-1.c: New test.\n+\n+2021-02-09  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.target/aarch64/asimd-mul-to-shl-sub.c: New test.\n+\n+2021-02-09  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vpXXXq.inc:\n+\tNew test template.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vpaddq.c: New test.\n+\n+2021-02-09  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/98944\n+\t* g++.dg/modules/pr98944_a.C: New.\n+\t* g++.dg/modules/pr98944_b.C: New.\n+\t* g++.dg/modules/pr98944_c.C: New.\n+\t* g++.dg/modules/pr98944_d.C: New.\n+\n+2021-02-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/98465\n+\t* g++.dg/warn/Wstringop-overread-1.C: New test.\n+\n+2021-02-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/96905\n+\t* g++.dg/cpp2a/consteval-expinst1.C: New test.\n+\n+2021-02-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/98326\n+\t* g++.dg/cpp1y/lambda-generic-empty1.C: New test.\n+\n+2021-02-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/98994\n+\t* g++.dg/cpp2a/no_unique_address12.C: New test.\n+\n 2021-02-08  Nathan Sidwell  <nathan@acm.org>\n \n \t* g++.dg/modules/pr98531-2.h: New."}, {"sha": "9bc38d600f3ac00b4a6c857556092ec1d300870f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a91b73e5b0147ca8cd832fd99ed4593d896b1d0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a91b73e5b0147ca8cd832fd99ed4593d896b1d0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0a91b73e5b0147ca8cd832fd99ed4593d896b1d0", "patch": "@@ -1,3 +1,67 @@\n+2021-02-09  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_tree.h\n+\t(__has_is_transparent, __has_is_transparent_t): Move...\n+\t* include/bits/stl_function.h: ...here.\n+\t* include/bits/hashtable_policy.h (_Hash_code_base<>::_M_hash_code_tr): New..\n+\t(_Hashtable_base<>::_M_equals_tr): New.\n+\t* include/bits/hashtable.h (_Hashtable<>::_M_find_tr, _Hashtable<>::_M_count_tr,\n+\t_Hashtable<>::_M_equal_range_tr): New member function templates to perform\n+\theterogeneous lookup.\n+\t(_Hashtable<>::_M_find_before_node_tr): New.\n+\t(_Hashtable<>::_M_find_node_tr): New.\n+\t* include/bits/unordered_map.h (unordered_map::find<>, unordered_map::count<>,\n+\tunordered_map::contains<>, unordered_map::equal_range<>): New member function\n+\ttemplates to perform heterogeneous lookup.\n+\t(unordered_multimap::find<>, unordered_multimap::count<>,\n+\tunordered_multimap::contains<>, unordered_multimap::equal_range<>): Likewise.\n+\t* include/bits/unordered_set.h  (unordered_set::find<>, unordered_set::count<>,\n+\tunordered_set::contains<>, unordered_set::equal_range<>): Likewise.\n+\t(unordered_multiset::find<>, unordered_multiset::count<>,\n+\tunordered_multiset::contains<>, unordered_multiset::equal_range<>): Likewise.\n+\t* include/debug/unordered_map\n+\t(unordered_map::find<>, unordered_map::equal_range<>): Likewise.\n+\t(unordered_multimap::find<>, unordered_multimap::equal_range<>): Likewise.\n+\t* include/debug/unordered_set\n+\t(unordered_set::find<>, unordered_set::equal_range<>): Likewise.\n+\t(unordered_multiset::find<>, unordered_multiset::equal_range<>): Likewise.\n+\t* testsuite/23_containers/unordered_map/operations/1.cc: New test.\n+\t* testsuite/23_containers/unordered_multimap/operations/1.cc: New test.\n+\t* testsuite/23_containers/unordered_multiset/operations/1.cc: New test.\n+\t* testsuite/23_containers/unordered_set/operations/1.cc: New test.\n+\n+2021-02-09  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_deque.h\n+\t(std::operator-(deque::iterator, deque::iterator)): Replace if/then with\n+\ta null pointer test.\n+\n+2021-02-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/27_io/filesystem/operations/remove_all.cc: Remove\n+\ttest directory after making it writable again.\n+\t* testsuite/experimental/filesystem/operations/remove_all.cc:\n+\tLikewise.\n+\n+2021-02-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/99021\n+\t* include/std/coroutine (coroutine_handle<P>::from_address): Add\n+\tnoexcept.\n+\n+2021-02-09  Vladimir Vishnevsky  <vv.os.swe@gmail.com>\n+\n+\t* include/ext/stdio_sync_filebuf.h: Remove unused <unistd.h>.\n+\t* src/c++17/fs_ops.cc (fs::permissions): Qualify mode_t.\n+\n+2021-02-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/98465\n+\t* include/bits/basic_string.tcc (basic_string::_M_replace): When __s\n+\tpoints to the characters moved by earlier _S_move, compute the source\n+\taddress using expression based on the __p pointer rather than __s\n+\tpointer.\n+\n 2021-02-03  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/19_diagnostics/error_code/operators/not_equal.cc:"}]}