{"sha": "70ba248488aed2c9f17d16086f3783ddd95c9244", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBiYTI0ODQ4OGFlZDJjOWYxN2QxNjA4NmYzNzgzZGRkOTVjOTI0NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-07-05T21:24:33Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-07-05T21:24:33Z"}, "message": "re PR c++/53039 (including <functional> breaks std::is_convertible with template-pack expansion)\n\n\tPR c++/53039\n\t* pt.c (arg_from_parm_pack_p): Go back to using same_type_p or\n\tcp_tree_equal.\n\nFrom-SVN: r189305", "tree": {"sha": "f448590c40c86f8ae6ef371c2f7854c12d180907", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f448590c40c86f8ae6ef371c2f7854c12d180907"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70ba248488aed2c9f17d16086f3783ddd95c9244", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70ba248488aed2c9f17d16086f3783ddd95c9244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70ba248488aed2c9f17d16086f3783ddd95c9244", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70ba248488aed2c9f17d16086f3783ddd95c9244/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9ae8d9dfc4661b0cba2797c211eab27d6fc206fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ae8d9dfc4661b0cba2797c211eab27d6fc206fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ae8d9dfc4661b0cba2797c211eab27d6fc206fa"}], "stats": {"total": 39, "additions": 11, "deletions": 28}, "files": [{"sha": "4d1fc5ce27c1170e88078e34c81c8c2d87f0d3b6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ba248488aed2c9f17d16086f3783ddd95c9244/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ba248488aed2c9f17d16086f3783ddd95c9244/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=70ba248488aed2c9f17d16086f3783ddd95c9244", "patch": "@@ -1,5 +1,9 @@\n 2012-07-05  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/53039\n+\t* pt.c (arg_from_parm_pack_p): Go back to using same_type_p or\n+\tcp_tree_equal.\n+\n \t* cp-tree.h (TEMPLATE_PARM_NUM_SIBLINGS): Remove.\n \t(struct template_parm_index_s): Remove num_siblings.\n \t* pt.c (fixup_template_parms, fixup_template_parm_index): Remove."}, {"sha": "df5d1f68b862db57769e352ddad1ea8a5bd2d26a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 28, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ba248488aed2c9f17d16086f3783ddd95c9244/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ba248488aed2c9f17d16086f3783ddd95c9244/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=70ba248488aed2c9f17d16086f3783ddd95c9244", "patch": "@@ -3760,34 +3760,13 @@ arg_from_parm_pack_p (tree arg_pack, tree parm_pack)\n     {\n       tree expansion = TREE_VEC_ELT (ARGUMENT_PACK_ARGS (arg_pack), 0);\n       tree pattern = PACK_EXPANSION_PATTERN (expansion);\n-      /* So we have an argument_pack<P...>.  We want to test if P\n-\t is actually PARM_PACK.  We will not use cp_tree_equal to\n-\t test P and PARM_PACK because during type fixup (by\n-\t fixup_template_parm) P can be a pre-fixup version of a\n-\t type and PARM_PACK be its post-fixup version.\n-\t cp_tree_equal would consider them as different even\n-\t though we would want to consider them compatible for our\n-\t precise purpose here.\n-\n-\t Thus we are going to consider that P and PARM_PACK are\n-\t compatible if they have the same DECL.  */\n-      if ((/* If ARG_PACK is a type parameter pack named by the\n-\t      same DECL as parm_pack ...  */\n-\t   (TYPE_P (pattern)\n-\t    && TYPE_P (parm_pack)\n-\t    && TYPE_NAME (pattern) == TYPE_NAME (parm_pack))\n-\t   /* ... or if PARM_PACK is a non-type parameter named by the\n-\t      same DECL as ARG_PACK.  Note that PARM_PACK being a\n-\t      non-type parameter means it's either a PARM_DECL or a\n-\t      TEMPLATE_PARM_INDEX.  */\n-\t   || (TREE_CODE (pattern) == TEMPLATE_PARM_INDEX\n-\t       && ((TREE_CODE (parm_pack) == PARM_DECL\n-\t\t    && (TEMPLATE_PARM_DECL (pattern)\n-\t\t\t== TEMPLATE_PARM_DECL (DECL_INITIAL (parm_pack))))\n-\t\t   || (TREE_CODE (parm_pack) == TEMPLATE_PARM_INDEX\n-\t\t       && (TEMPLATE_PARM_DECL (pattern)\n-\t\t\t   == TEMPLATE_PARM_DECL (parm_pack))))))\n-\t  && template_parameter_pack_p (pattern))\n+      if ((TYPE_P (pattern) && same_type_p (pattern, parm_pack))\n+\t  || (!TYPE_P (pattern) && cp_tree_equal (parm_pack, pattern)))\n+\t/* The argument pack that the parameter maps to is just an\n+\t   expansion of the parameter itself, such as one would\n+\t   find in the implicit typedef of a class inside the\n+\t   class itself.  Consider this parameter \"unsubstituted\",\n+\t   so that we will maintain the outer pack expansion.  */\n \treturn true;\n     }\n   return false;"}]}