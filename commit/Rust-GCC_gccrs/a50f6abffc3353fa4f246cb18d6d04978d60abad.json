{"sha": "a50f6abffc3353fa4f246cb18d6d04978d60abad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUwZjZhYmZmYzMzNTNmYTRmMjQ2Y2IxOGQ2ZDA0OTc4ZDYwYWJhZA==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-17T11:50:54Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-17T11:50:54Z"}, "message": "[ARM][GCC][1/1x]: Patch to support MVE ACLE intrinsics with unary operand.\n\nThis patch supports MVE ACLE intrinsics vcvtq_f16_s16, vcvtq_f32_s32, vcvtq_f16_u16, vcvtq_f32_u32n vrndxq_f16, vrndxq_f32, vrndq_f16, vrndq_f32, vrndpq_f16, vrndpq_f32, vrndnq_f16, vrndnq_f32, vrndmq_f16, vrndmq_f32, vrndaq_f16, vrndaq_f32, vrev64q_f16, vrev64q_f32, vnegq_f16, vnegq_f32, vdupq_n_f16, vdupq_n_f32, vabsq_f16, vabsq_f32, vrev32q_f16, vcvttq_f32_f16, vcvtbq_f32_f16.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm-builtins.c (UNOP_NONE_NONE_QUALIFIERS): Define macro.\n\t(UNOP_NONE_SNONE_QUALIFIERS): Likewise.\n\t(UNOP_NONE_UNONE_QUALIFIERS): Likewise.\n\t* config/arm/arm_mve.h (vrndxq_f16): Define macro.\n\t(vrndxq_f32): Likewise.\n\t(vrndq_f16) Likewise.\n\t(vrndq_f32): Likewise.\n\t(vrndpq_f16): Likewise.\n\t(vrndpq_f32): Likewise.\n\t(vrndnq_f16): Likewise.\n\t(vrndnq_f32): Likewise.\n\t(vrndmq_f16): Likewise.\n\t(vrndmq_f32): Likewise.\n\t(vrndaq_f16): Likewise.\n\t(vrndaq_f32): Likewise.\n\t(vrev64q_f16): Likewise.\n\t(vrev64q_f32): Likewise.\n\t(vnegq_f16): Likewise.\n\t(vnegq_f32): Likewise.\n\t(vdupq_n_f16): Likewise.\n\t(vdupq_n_f32): Likewise.\n\t(vabsq_f16): Likewise.\n\t(vabsq_f32): Likewise.\n\t(vrev32q_f16): Likewise.\n\t(vcvttq_f32_f16): Likewise.\n\t(vcvtbq_f32_f16): Likewise.\n\t(vcvtq_f16_s16): Likewise.\n\t(vcvtq_f32_s32): Likewise.\n\t(vcvtq_f16_u16): Likewise.\n\t(vcvtq_f32_u32): Likewise.\n\t(__arm_vrndxq_f16): Define intrinsic.\n\t(__arm_vrndxq_f32): Likewise.\n\t(__arm_vrndq_f16): Likewise.\n\t(__arm_vrndq_f32): Likewise.\n\t(__arm_vrndpq_f16): Likewise.\n\t(__arm_vrndpq_f32): Likewise.\n\t(__arm_vrndnq_f16): Likewise.\n\t(__arm_vrndnq_f32): Likewise.\n\t(__arm_vrndmq_f16): Likewise.\n\t(__arm_vrndmq_f32): Likewise.\n\t(__arm_vrndaq_f16): Likewise.\n\t(__arm_vrndaq_f32): Likewise.\n\t(__arm_vrev64q_f16): Likewise.\n\t(__arm_vrev64q_f32): Likewise.\n\t(__arm_vnegq_f16): Likewise.\n\t(__arm_vnegq_f32): Likewise.\n\t(__arm_vdupq_n_f16): Likewise.\n\t(__arm_vdupq_n_f32): Likewise.\n\t(__arm_vabsq_f16): Likewise.\n\t(__arm_vabsq_f32): Likewise.\n\t(__arm_vrev32q_f16): Likewise.\n\t(__arm_vcvttq_f32_f16): Likewise.\n\t(__arm_vcvtbq_f32_f16): Likewise.\n\t(__arm_vcvtq_f16_s16): Likewise.\n\t(__arm_vcvtq_f32_s32): Likewise.\n\t(__arm_vcvtq_f16_u16): Likewise.\n\t(__arm_vcvtq_f32_u32): Likewise.\n\t(vrndxq): Define polymorphic variants.\n\t(vrndq): Likewise.\n\t(vrndpq): Likewise.\n\t(vrndnq): Likewise.\n\t(vrndmq): Likewise.\n\t(vrndaq): Likewise.\n\t(vrev64q): Likewise.\n\t(vnegq): Likewise.\n\t(vabsq): Likewise.\n\t(vrev32q): Likewise.\n\t(vcvtbq_f32): Likewise.\n\t(vcvttq_f32): Likewise.\n\t(vcvtq): Likewise.\n\t* config/arm/arm_mve_builtins.def (VAR2): Define.\n\t(VAR1): Define.\n\t* config/arm/mve.md (mve_vrndxq_f<mode>): Add RTL pattern.\n\t(mve_vrndq_f<mode>): Likewise.\n\t(mve_vrndpq_f<mode>): Likewise.\n\t(mve_vrndnq_f<mode>): Likewise.\n\t(mve_vrndmq_f<mode>): Likewise.\n\t(mve_vrndaq_f<mode>): Likewise.\n\t(mve_vrev64q_f<mode>): Likewise.\n\t(mve_vnegq_f<mode>): Likewise.\n\t(mve_vdupq_n_f<mode>): Likewise.\n\t(mve_vabsq_f<mode>): Likewise.\n\t(mve_vrev32q_fv8hf): Likewise.\n\t(mve_vcvttq_f32_f16v4sf): Likewise.\n\t(mve_vcvtbq_f32_f16v4sf): Likewise.\n\t(mve_vcvtq_to_f_<supf><mode>): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vabsq_f16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vabsq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtbq_f32_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_f16_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_f16_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_f32_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_f32_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvttq_f32_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndaq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndaq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndmq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndmq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndnq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndnq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndpq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndpq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndxq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndxq_f32.c: Likewise.", "tree": {"sha": "d1c236341670f0d1ed9a53ee5cb6f26b2957429f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1c236341670f0d1ed9a53ee5cb6f26b2957429f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a50f6abffc3353fa4f246cb18d6d04978d60abad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a50f6abffc3353fa4f246cb18d6d04978d60abad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a50f6abffc3353fa4f246cb18d6d04978d60abad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a50f6abffc3353fa4f246cb18d6d04978d60abad/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14782c8123ea7e55723cfc4fc30d726cd94851dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14782c8123ea7e55723cfc4fc30d726cd94851dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14782c8123ea7e55723cfc4fc30d726cd94851dc"}], "stats": {"total": 1038, "additions": 1037, "deletions": 1}, "files": [{"sha": "65b3645d2634c1f279a800a46ca6c533539a713d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -1,3 +1,94 @@\n+2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm-builtins.c (UNOP_NONE_NONE_QUALIFIERS): Define macro.\n+\t(UNOP_NONE_SNONE_QUALIFIERS): Likewise.\n+\t(UNOP_NONE_UNONE_QUALIFIERS): Likewise.\n+\t* config/arm/arm_mve.h (vrndxq_f16): Define macro.\n+\t(vrndxq_f32): Likewise.\n+\t(vrndq_f16) Likewise.\n+\t(vrndq_f32): Likewise.\n+\t(vrndpq_f16): Likewise.\n+\t(vrndpq_f32): Likewise.\n+\t(vrndnq_f16): Likewise.\n+\t(vrndnq_f32): Likewise.\n+\t(vrndmq_f16): Likewise.\n+\t(vrndmq_f32): Likewise. \n+\t(vrndaq_f16): Likewise.\n+\t(vrndaq_f32): Likewise.\n+\t(vrev64q_f16): Likewise.\n+\t(vrev64q_f32): Likewise.\n+\t(vnegq_f16): Likewise.\n+\t(vnegq_f32): Likewise.\n+\t(vdupq_n_f16): Likewise.\n+\t(vdupq_n_f32): Likewise.\n+\t(vabsq_f16): Likewise.\n+\t(vabsq_f32): Likewise.\n+\t(vrev32q_f16): Likewise.\n+\t(vcvttq_f32_f16): Likewise.\n+\t(vcvtbq_f32_f16): Likewise.\n+\t(vcvtq_f16_s16): Likewise.\n+\t(vcvtq_f32_s32): Likewise.\n+\t(vcvtq_f16_u16): Likewise.\n+\t(vcvtq_f32_u32): Likewise.\n+\t(__arm_vrndxq_f16): Define intrinsic.\n+\t(__arm_vrndxq_f32): Likewise.\n+\t(__arm_vrndq_f16): Likewise.\n+\t(__arm_vrndq_f32): Likewise.\n+\t(__arm_vrndpq_f16): Likewise.\n+\t(__arm_vrndpq_f32): Likewise.\n+\t(__arm_vrndnq_f16): Likewise.\n+\t(__arm_vrndnq_f32): Likewise.\n+\t(__arm_vrndmq_f16): Likewise.\n+\t(__arm_vrndmq_f32): Likewise.\n+\t(__arm_vrndaq_f16): Likewise.\n+\t(__arm_vrndaq_f32): Likewise.\n+\t(__arm_vrev64q_f16): Likewise.\n+\t(__arm_vrev64q_f32): Likewise.\n+\t(__arm_vnegq_f16): Likewise.\n+\t(__arm_vnegq_f32): Likewise.\n+\t(__arm_vdupq_n_f16): Likewise.\n+\t(__arm_vdupq_n_f32): Likewise.\n+\t(__arm_vabsq_f16): Likewise.\n+\t(__arm_vabsq_f32): Likewise.\n+\t(__arm_vrev32q_f16): Likewise.\n+\t(__arm_vcvttq_f32_f16): Likewise.\n+\t(__arm_vcvtbq_f32_f16): Likewise.\n+\t(__arm_vcvtq_f16_s16): Likewise.\n+\t(__arm_vcvtq_f32_s32): Likewise.\n+\t(__arm_vcvtq_f16_u16): Likewise.\n+\t(__arm_vcvtq_f32_u32): Likewise.\n+\t(vrndxq): Define polymorphic variants.\n+\t(vrndq): Likewise.\n+\t(vrndpq): Likewise.\n+\t(vrndnq): Likewise.\n+\t(vrndmq): Likewise.\n+\t(vrndaq): Likewise.\n+\t(vrev64q): Likewise.\n+\t(vnegq): Likewise.\n+\t(vabsq): Likewise.\n+\t(vrev32q): Likewise.\n+\t(vcvtbq_f32): Likewise.\n+\t(vcvttq_f32): Likewise.\n+\t(vcvtq): Likewise.\n+\t* config/arm/arm_mve_builtins.def (VAR2): Define.\n+\t(VAR1): Define.\n+\t* config/arm/mve.md (mve_vrndxq_f<mode>): Add RTL pattern.\n+\t(mve_vrndq_f<mode>): Likewise.\n+\t(mve_vrndpq_f<mode>): Likewise.\n+\t(mve_vrndnq_f<mode>): Likewise.\n+\t(mve_vrndmq_f<mode>): Likewise.\n+\t(mve_vrndaq_f<mode>): Likewise.\n+\t(mve_vrev64q_f<mode>): Likewise.\n+\t(mve_vnegq_f<mode>): Likewise.\n+\t(mve_vdupq_n_f<mode>): Likewise.\n+\t(mve_vabsq_f<mode>): Likewise.\n+\t(mve_vrev32q_fv8hf): Likewise.\n+\t(mve_vcvttq_f32_f16v4sf): Likewise.\n+\t(mve_vcvtbq_f32_f16v4sf): Likewise.\n+\t(mve_vcvtq_to_f_<supf><mode>): Likewise.\n+\n 2020-03-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "38bf82cfe756afbc74693162915e566694bd7472", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -317,6 +317,28 @@ arm_store1_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_void, qualifier_pointer_map_mode, qualifier_none };\n #define STORE1_QUALIFIERS (arm_store1_qualifiers)\n \n+/* Qualifiers for MVE builtins.  */\n+\n+static enum arm_type_qualifiers\n+arm_unop_none_none_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none };\n+#define UNOP_NONE_NONE_QUALIFIERS \\\n+  (arm_unop_none_none_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_unop_none_snone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none };\n+#define UNOP_NONE_SNONE_QUALIFIERS \\\n+  (arm_unop_none_snone_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_unop_none_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_unsigned };\n+#define UNOP_NONE_UNONE_QUALIFIERS \\\n+  (arm_unop_none_unone_qualifiers)\n+\n+/* End of Qualifier for MVE builtins.  */\n+\n    /* void ([T element type] *, T, immediate).  */\n static enum arm_type_qualifiers\n arm_storestruct_lane_qualifiers[SIMD_MAX_BUILTIN_ARGS]"}, {"sha": "e256c1ecde3e659aa0c139419756da3f96a3b537", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 293, "deletions": 0, "changes": 293, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -81,6 +81,33 @@ typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n #define vst4q_u32( __addr, __value) __arm_vst4q_u32( __addr, __value)\n #define vst4q_f16( __addr, __value) __arm_vst4q_f16( __addr, __value)\n #define vst4q_f32( __addr, __value) __arm_vst4q_f32( __addr, __value)\n+#define vrndxq_f16(__a) __arm_vrndxq_f16(__a)\n+#define vrndxq_f32(__a) __arm_vrndxq_f32(__a)\n+#define vrndq_f16(__a) __arm_vrndq_f16(__a)\n+#define vrndq_f32(__a) __arm_vrndq_f32(__a)\n+#define vrndpq_f16(__a) __arm_vrndpq_f16(__a)\n+#define vrndpq_f32(__a) __arm_vrndpq_f32(__a)\n+#define vrndnq_f16(__a) __arm_vrndnq_f16(__a)\n+#define vrndnq_f32(__a) __arm_vrndnq_f32(__a)\n+#define vrndmq_f16(__a) __arm_vrndmq_f16(__a)\n+#define vrndmq_f32(__a) __arm_vrndmq_f32(__a)\n+#define vrndaq_f16(__a) __arm_vrndaq_f16(__a)\n+#define vrndaq_f32(__a) __arm_vrndaq_f32(__a)\n+#define vrev64q_f16(__a) __arm_vrev64q_f16(__a)\n+#define vrev64q_f32(__a) __arm_vrev64q_f32(__a)\n+#define vnegq_f16(__a) __arm_vnegq_f16(__a)\n+#define vnegq_f32(__a) __arm_vnegq_f32(__a)\n+#define vdupq_n_f16(__a) __arm_vdupq_n_f16(__a)\n+#define vdupq_n_f32(__a) __arm_vdupq_n_f32(__a)\n+#define vabsq_f16(__a) __arm_vabsq_f16(__a)\n+#define vabsq_f32(__a) __arm_vabsq_f32(__a)\n+#define vrev32q_f16(__a) __arm_vrev32q_f16(__a)\n+#define vcvttq_f32_f16(__a) __arm_vcvttq_f32_f16(__a)\n+#define vcvtbq_f32_f16(__a) __arm_vcvtbq_f32_f16(__a)\n+#define vcvtq_f16_s16(__a) __arm_vcvtq_f16_s16(__a)\n+#define vcvtq_f32_s32(__a) __arm_vcvtq_f32_s32(__a)\n+#define vcvtq_f16_u16(__a) __arm_vcvtq_f16_u16(__a)\n+#define vcvtq_f32_u32(__a) __arm_vcvtq_f32_u32(__a)\n #endif\n \n __extension__ extern __inline void\n@@ -157,6 +184,195 @@ __arm_vst4q_f32 (float32_t * __addr, float32x4x4_t __value)\n   __builtin_mve_vst4qv4sf (__addr, __rv.__o);\n }\n \n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrndxq_f16 (float16x8_t __a)\n+{\n+  return __builtin_mve_vrndxq_fv8hf (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrndxq_f32 (float32x4_t __a)\n+{\n+  return __builtin_mve_vrndxq_fv4sf (__a);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrndq_f16 (float16x8_t __a)\n+{\n+  return __builtin_mve_vrndq_fv8hf (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrndq_f32 (float32x4_t __a)\n+{\n+  return __builtin_mve_vrndq_fv4sf (__a);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrndpq_f16 (float16x8_t __a)\n+{\n+  return __builtin_mve_vrndpq_fv8hf (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrndpq_f32 (float32x4_t __a)\n+{\n+  return __builtin_mve_vrndpq_fv4sf (__a);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrndnq_f16 (float16x8_t __a)\n+{\n+  return __builtin_mve_vrndnq_fv8hf (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrndnq_f32 (float32x4_t __a)\n+{\n+  return __builtin_mve_vrndnq_fv4sf (__a);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrndmq_f16 (float16x8_t __a)\n+{\n+  return __builtin_mve_vrndmq_fv8hf (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrndmq_f32 (float32x4_t __a)\n+{\n+  return __builtin_mve_vrndmq_fv4sf (__a);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrndaq_f16 (float16x8_t __a)\n+{\n+  return __builtin_mve_vrndaq_fv8hf (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrndaq_f32 (float32x4_t __a)\n+{\n+  return __builtin_mve_vrndaq_fv4sf (__a);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrev64q_f16 (float16x8_t __a)\n+{\n+  return __builtin_mve_vrev64q_fv8hf (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrev64q_f32 (float32x4_t __a)\n+{\n+  return __builtin_mve_vrev64q_fv4sf (__a);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vnegq_f16 (float16x8_t __a)\n+{\n+  return __builtin_mve_vnegq_fv8hf (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vnegq_f32 (float32x4_t __a)\n+{\n+  return __builtin_mve_vnegq_fv4sf (__a);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vdupq_n_f16 (float16_t __a)\n+{\n+  return __builtin_mve_vdupq_n_fv8hf (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vdupq_n_f32 (float32_t __a)\n+{\n+  return __builtin_mve_vdupq_n_fv4sf (__a);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vabsq_f16 (float16x8_t __a)\n+{\n+  return __builtin_mve_vabsq_fv8hf (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vabsq_f32 (float32x4_t __a)\n+{\n+  return __builtin_mve_vabsq_fv4sf (__a);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrev32q_f16 (float16x8_t __a)\n+{\n+  return __builtin_mve_vrev32q_fv8hf (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvttq_f32_f16 (float16x8_t __a)\n+{\n+  return __builtin_mve_vcvttq_f32_f16v4sf (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtbq_f32_f16 (float16x8_t __a)\n+{\n+  return __builtin_mve_vcvtbq_f32_f16v4sf (__a);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtq_f16_s16 (int16x8_t __a)\n+{\n+  return __builtin_mve_vcvtq_to_f_sv8hf (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtq_f32_s32 (int32x4_t __a)\n+{\n+  return __builtin_mve_vcvtq_to_f_sv4sf (__a);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtq_f16_u16 (uint16x8_t __a)\n+{\n+  return __builtin_mve_vcvtq_to_f_uv8hf (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtq_f32_u32 (uint32x4_t __a)\n+{\n+  return __builtin_mve_vcvtq_to_f_uv4sf (__a);\n+}\n+\n #endif\n \n enum {\n@@ -368,6 +584,83 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_float16_t_ptr][__ARM_mve_type_float16x8x4_t]: __arm_vst4q_f16 (__ARM_mve_coerce(__p0, float16_t *), __ARM_mve_coerce(__p1, float16x8x4_t)), \\\n   int (*)[__ARM_mve_type_float32_t_ptr][__ARM_mve_type_float32x4x4_t]: __arm_vst4q_f32 (__ARM_mve_coerce(__p0, float32_t *), __ARM_mve_coerce(__p1, float32x4x4_t)));})\n \n+#define vrndxq(p0) __arm_vrndxq(p0)\n+#define __arm_vrndxq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_float16x8_t]: __arm_vrndxq_f16 (__ARM_mve_coerce(__p0, float16x8_t)), \\\n+  int (*)[__ARM_mve_type_float32x4_t]: __arm_vrndxq_f32 (__ARM_mve_coerce(__p0, float32x4_t)));})\n+\n+#define vrndq(p0) __arm_vrndq(p0)\n+#define __arm_vrndq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_float16x8_t]: __arm_vrndq_f16 (__ARM_mve_coerce(__p0, float16x8_t)), \\\n+  int (*)[__ARM_mve_type_float32x4_t]: __arm_vrndq_f32 (__ARM_mve_coerce(__p0, float32x4_t)));})\n+\n+#define vrndpq(p0) __arm_vrndpq(p0)\n+#define __arm_vrndpq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_float16x8_t]: __arm_vrndpq_f16 (__ARM_mve_coerce(__p0, float16x8_t)), \\\n+  int (*)[__ARM_mve_type_float32x4_t]: __arm_vrndpq_f32 (__ARM_mve_coerce(__p0, float32x4_t)));})\n+\n+#define vrndnq(p0) __arm_vrndnq(p0)\n+#define __arm_vrndnq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_float16x8_t]: __arm_vrndnq_f16 (__ARM_mve_coerce(__p0, float16x8_t)), \\\n+  int (*)[__ARM_mve_type_float32x4_t]: __arm_vrndnq_f32 (__ARM_mve_coerce(__p0, float32x4_t)));})\n+\n+#define vrndmq(p0) __arm_vrndmq(p0)\n+#define __arm_vrndmq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_float16x8_t]: __arm_vrndmq_f16 (__ARM_mve_coerce(__p0, float16x8_t)), \\\n+  int (*)[__ARM_mve_type_float32x4_t]: __arm_vrndmq_f32 (__ARM_mve_coerce(__p0, float32x4_t)));})\n+\n+#define vrndaq(p0) __arm_vrndaq(p0)\n+#define __arm_vrndaq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_float16x8_t]: __arm_vrndaq_f16 (__ARM_mve_coerce(__p0, float16x8_t)), \\\n+  int (*)[__ARM_mve_type_float32x4_t]: __arm_vrndaq_f32 (__ARM_mve_coerce(__p0, float32x4_t)));})\n+\n+#define vrev64q(p0) __arm_vrev64q(p0)\n+#define __arm_vrev64q(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_float16x8_t]: __arm_vrev64q_f16 (__ARM_mve_coerce(__p0, float16x8_t)), \\\n+  int (*)[__ARM_mve_type_float32x4_t]: __arm_vrev64q_f32 (__ARM_mve_coerce(__p0, float32x4_t)));})\n+\n+#define vnegq(p0) __arm_vnegq(p0)\n+#define __arm_vnegq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_float16x8_t]: __arm_vnegq_f16 (__ARM_mve_coerce(__p0, float16x8_t)), \\\n+  int (*)[__ARM_mve_type_float32x4_t]: __arm_vnegq_f32 (__ARM_mve_coerce(__p0, float32x4_t)));})\n+\n+#define vabsq(p0) __arm_vabsq(p0)\n+#define __arm_vabsq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_float16x8_t]: __arm_vabsq_f16 (__ARM_mve_coerce(__p0, float16x8_t)), \\\n+  int (*)[__ARM_mve_type_float32x4_t]: __arm_vabsq_f32 (__ARM_mve_coerce(__p0, float32x4_t)));})\n+\n+#define vrev32q(p0) __arm_vrev32q(p0)\n+#define __arm_vrev32q(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_float16x8_t]: __arm_vrev32q_f16 (__ARM_mve_coerce(__p0, float16x8_t)));})\n+\n+#define vcvtbq_f32(p0) __arm_vcvtbq_f32(p0)\n+#define __arm_vcvtbq_f32(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_float16x8_t]: __arm_vcvtbq_f32_f16 (__ARM_mve_coerce(__p0, float16x8_t)));})\n+\n+#define vcvttq_f32(p0) __arm_vcvttq_f32(p0)\n+#define __arm_vcvttq_f32(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_float16x8_t]: __arm_vcvttq_f32_f16 (__ARM_mve_coerce(__p0, float16x8_t)));})\n+\n+#define vcvtq(p0) __arm_vcvtq(p0)\n+#define __arm_vcvtq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vcvtq_f16_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vcvtq_f32_s32 (__ARM_mve_coerce(__p0, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vcvtq_f16_u16 (__ARM_mve_coerce(__p0, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vcvtq_f32_u32 (__ARM_mve_coerce(__p0, uint32x4_t)));})\n+\n #else /* MVE Interger.  */\n \n #define vst4q(p0,p1) __arm_vst4q(p0,p1)"}, {"sha": "78fe7c4eb887f8f57fcf8d89a3a614e93fe1921a", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -19,3 +19,18 @@\n     <http://www.gnu.org/licenses/>.  */\n \n VAR5 (STORE1, vst4q, v16qi, v8hi, v4si, v8hf, v4sf)\n+VAR2 (UNOP_NONE_NONE, vrndxq_f, v8hf, v4sf)\n+VAR2 (UNOP_NONE_NONE, vrndq_f, v8hf, v4sf)\n+VAR2 (UNOP_NONE_NONE, vrndpq_f, v8hf, v4sf)\n+VAR2 (UNOP_NONE_NONE, vrndnq_f, v8hf, v4sf)\n+VAR2 (UNOP_NONE_NONE, vrndmq_f, v8hf, v4sf)\n+VAR2 (UNOP_NONE_NONE, vrndaq_f, v8hf, v4sf)\n+VAR2 (UNOP_NONE_NONE, vrev64q_f, v8hf, v4sf)\n+VAR2 (UNOP_NONE_NONE, vnegq_f, v8hf, v4sf)\n+VAR2 (UNOP_NONE_NONE, vdupq_n_f, v8hf, v4sf)\n+VAR2 (UNOP_NONE_NONE, vabsq_f, v8hf, v4sf)\n+VAR1 (UNOP_NONE_NONE, vrev32q_f, v8hf)\n+VAR1 (UNOP_NONE_NONE, vcvttq_f32_f16, v4sf)\n+VAR1 (UNOP_NONE_NONE, vcvtbq_f32_f16, v4sf)\n+VAR2 (UNOP_NONE_SNONE, vcvtq_to_f_s, v8hf, v4sf)\n+VAR2 (UNOP_NONE_UNONE, vcvtq_to_f_u, v8hf, v4sf)"}, {"sha": "9f2c7f426f127edf5c7583a707d9c07ff7616a35", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 206, "deletions": 1, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -21,8 +21,18 @@\n \t\t\t      (V2DI \"u64\")])\n (define_mode_iterator MVE_types [V16QI V8HI V4SI V2DI TI V8HF V4SF V2DF])\n (define_mode_iterator MVE_VLD_ST [V16QI V8HI V4SI V8HF V4SF])\n+(define_mode_iterator MVE_0 [V8HF V4SF])\n \n-(define_c_enum \"unspec\" [VST4Q])\n+(define_c_enum \"unspec\" [VST4Q VRNDXQ_F VRNDQ_F VRNDPQ_F VRNDNQ_F VRNDMQ_F\n+\t\t\t VRNDAQ_F VREV64Q_F VNEGQ_F VDUPQ_N_F VABSQ_F VREV32Q_F\n+\t\t\t VCVTTQ_F32_F16 VCVTBQ_F32_F16 VCVTQ_TO_F_S\n+\t\t\t VCVTQ_TO_F_U])\n+\n+(define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\")\n+\t\t\t    (V8HF \"V8HI\") (V4SF \"V4SI\")])\n+\n+(define_int_attr supf [(VCVTQ_TO_F_S \"s\") (VCVTQ_TO_F_U \"u\")])\n+(define_int_iterator VCVTQ_TO_F [VCVTQ_TO_F_S VCVTQ_TO_F_U])\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Us\")\n@@ -120,3 +130,198 @@\n    return \"\";\n }\n   [(set_attr \"length\" \"16\")])\n+\n+;;\n+;; [vrndxq_f])\n+;;\n+(define_insn \"mve_vrndxq_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")]\n+\t VRNDXQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vrintx.f%#<V_sz_elem>\t%q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vrndq_f])\n+;;\n+(define_insn \"mve_vrndq_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")]\n+\t VRNDQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vrintz.f%#<V_sz_elem>\t%q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vrndpq_f])\n+;;\n+(define_insn \"mve_vrndpq_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")]\n+\t VRNDPQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vrintp.f%#<V_sz_elem>\t%q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vrndnq_f])\n+;;\n+(define_insn \"mve_vrndnq_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")]\n+\t VRNDNQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vrintn.f%#<V_sz_elem>\t%q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vrndmq_f])\n+;;\n+(define_insn \"mve_vrndmq_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")]\n+\t VRNDMQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vrintm.f%#<V_sz_elem>\t%q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vrndaq_f])\n+;;\n+(define_insn \"mve_vrndaq_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")]\n+\t VRNDAQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vrinta.f%#<V_sz_elem>\t%q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vrev64q_f])\n+;;\n+(define_insn \"mve_vrev64q_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")]\n+\t VREV64Q_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vrev64.%#<V_sz_elem> %q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vnegq_f])\n+;;\n+(define_insn \"mve_vnegq_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")]\n+\t VNEGQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vneg.f%#<V_sz_elem>  %q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vdupq_n_f])\n+;;\n+(define_insn \"mve_vdupq_n_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:<V_elem> 1 \"s_register_operand\" \"r\")]\n+\t VDUPQ_N_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vdup.%#<V_sz_elem>   %q0, %1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vabsq_f])\n+;;\n+(define_insn \"mve_vabsq_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")]\n+\t VABSQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vabs.f%#<V_sz_elem>  %q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vrev32q_f])\n+;;\n+(define_insn \"mve_vrev32q_fv8hf\"\n+  [\n+   (set (match_operand:V8HF 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V8HF [(match_operand:V8HF 1 \"s_register_operand\" \"w\")]\n+\t VREV32Q_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vrev32.16 %q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+;;\n+;; [vcvttq_f32_f16])\n+;;\n+(define_insn \"mve_vcvttq_f32_f16v4sf\"\n+  [\n+   (set (match_operand:V4SF 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V4SF [(match_operand:V8HF 1 \"s_register_operand\" \"w\")]\n+\t VCVTTQ_F32_F16))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcvtt.f32.f16 %q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcvtbq_f32_f16])\n+;;\n+(define_insn \"mve_vcvtbq_f32_f16v4sf\"\n+  [\n+   (set (match_operand:V4SF 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V4SF [(match_operand:V8HF 1 \"s_register_operand\" \"w\")]\n+\t VCVTBQ_F32_F16))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcvtb.f32.f16 %q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcvtq_to_f_s, vcvtq_to_f_u])\n+;;\n+(define_insn \"mve_vcvtq_to_f_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:<MVE_CNVT> 1 \"s_register_operand\" \"w\")]\n+\t VCVTQ_TO_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcvt.f%#<V_sz_elem>.<supf>%#<V_sz_elem>       %q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])"}, {"sha": "6b836c1062fe4ea6eb2589c474fe860b32eba240", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -1,3 +1,35 @@\n+2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vabsq_f16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vabsq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtbq_f32_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_f16_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_f16_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_f32_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_f32_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvttq_f32_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdupq_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdupq_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev32q_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev64q_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev64q_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndaq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndaq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndmq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndmq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndnq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndnq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndpq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndpq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndxq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndxq_f32.c: Likewise.\n+\n 2020-03-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "f49807cb863cb0bf7718e742692756d3a6a8311e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabsq_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_f16.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a)\n+{\n+  return vabsq_f16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vabs.f16\"  }  } */"}, {"sha": "ab44b314c3895a77d4c6a3591386a7ad300c95c1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabsq_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_f32.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a)\n+{\n+  return vabsq_f32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vabs.f32\"  }  } */"}, {"sha": "bc57f261f2ca3d6b66e05553dc8069e88d9b8ba8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtbq_f32_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtbq_f32_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtbq_f32_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtbq_f32_f16.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float16x8_t a)\n+{\n+  return vcvtbq_f32_f16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvtb.f32.f16\"  }  } */"}, {"sha": "9a7d9c2cf7eca3d1501cbf945625ab807b067558", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_f16_s16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_f16_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_f16_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_f16_s16.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (int16x8_t a)\n+{\n+  return vcvtq_f16_s16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvt.f16.s16\"  }  } */"}, {"sha": "6aae96862c4a389b25dba3cd194c73ebc1e7ee96", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_f16_u16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_f16_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_f16_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_f16_u16.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (uint16x8_t a)\n+{\n+  return vcvtq_f16_u16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvt.f16.u16\"  }  } */"}, {"sha": "b563fe972bd08173ff3c2cadce975523d434d127", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_f32_s32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_f32_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_f32_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_f32_s32.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (int32x4_t a)\n+{\n+  return vcvtq_f32_s32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvt.f32.s32\"  }  } */"}, {"sha": "f5354a4a02faeab5d33798a3821e00838702eaa9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_f32_u32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_f32_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_f32_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_f32_u32.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (uint32x4_t a)\n+{\n+  return vcvtq_f32_u32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvt.f32.u32\"  }  } */"}, {"sha": "2c0f4fda6be551651cb1fa631eb4a80dc8a75a3b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvttq_f32_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvttq_f32_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvttq_f32_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvttq_f32_f16.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float16x8_t a)\n+{\n+  return vcvttq_f32_f16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvtt.f32.f16\"  }  } */"}, {"sha": "616c24fd3aaf92603a207051f62af87a3b968769", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdupq_n_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_n_f16.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16_t a)\n+{\n+  return vdupq_n_f16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vdup.16\"  }  } */"}, {"sha": "570dfde905f2858f6280474d99d7c01e28a320cc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdupq_n_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_n_f32.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32_t a)\n+{\n+  return vdupq_n_f32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vdup.32\"  }  } */"}, {"sha": "89d0162c274924199f5ef487232aaf0d057a1315", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_f16.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a)\n+{\n+  return vnegq_f16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vneg.f16\"  }  } */"}, {"sha": "8cbdd16342da17151afafa80e493a217ec4c3c2a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_f32.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a)\n+{\n+  return vnegq_f32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vneg.f32\"  }  } */"}, {"sha": "86bf47dea54965aee76d7066188367c8bd1c109f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev32q_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_f16.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a)\n+{\n+  return vrev32q_f16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrev32.16\"  }  } */"}, {"sha": "d7f75fd9d3dbb4c0cc2cad4c108d900c59b8b253", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev64q_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_f16.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a)\n+{\n+  return vrev64q_f16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrev64.16\"  }  } */"}, {"sha": "131ec461b0ed0bd52cd474d4a9303a0717b95f36", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev64q_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_f32.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a)\n+{\n+  return vrev64q_f32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrev64.32\"  }  } */"}, {"sha": "d647d31ac705bce5265ecf8dd4230736d8306da4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrndaq_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndaq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndaq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndaq_f16.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a)\n+{\n+  return vrndaq_f16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrinta.f16\"  }  } */"}, {"sha": "4d5ba502bc57269a9395c3287ad7902fd570a788", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrndaq_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndaq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndaq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndaq_f32.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a)\n+{\n+  return vrndaq_f32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrinta.f32\"  }  } */"}, {"sha": "996b0b27c159114283fed2b5f62861ea93b38b15", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrndmq_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndmq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndmq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndmq_f16.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a)\n+{\n+  return vrndmq_f16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrintm.f16\"  }  } */"}, {"sha": "fae0a5ca2f15305d23d39b189ab0bb1a640618a9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrndmq_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndmq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndmq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndmq_f32.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a)\n+{\n+  return vrndmq_f32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrintm.f32\"  }  } */"}, {"sha": "cc00b6eb6131f726055a00bd3175fa1a637210f8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrndnq_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndnq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndnq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndnq_f16.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a)\n+{\n+  return vrndnq_f16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrintn.f16\"  }  } */"}, {"sha": "150e9d38342b68bc48a9d3d0c62c6d721e8876a6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrndnq_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndnq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndnq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndnq_f32.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a)\n+{\n+  return vrndnq_f32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrintn.f32\"  }  } */"}, {"sha": "d75ea35c02cef41133d8750a408d0a072c82fa1b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrndpq_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndpq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndpq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndpq_f16.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a)\n+{\n+  return vrndpq_f16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrintp.f16\"  }  } */"}, {"sha": "45de7fb5c591f4e481a575eb231d3e2758bb5dfa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrndpq_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndpq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndpq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndpq_f32.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a)\n+{\n+  return vrndpq_f32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrintp.f32\"  }  } */"}, {"sha": "b3a96540508fbe57999ea8d3a37b477ebb3b5193", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrndq_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndq_f16.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a)\n+{\n+  return vrndq_f16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrintz.f16\"  }  } */"}, {"sha": "c8a723ae4d7f79ff4c798962d14d80375da8faa9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrndq_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndq_f32.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a)\n+{\n+  return vrndq_f32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrintz.f32\"  }  } */"}, {"sha": "aa364f0671fea913dfb421aab5731a2afb87d99b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrndxq_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndxq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndxq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndxq_f16.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a)\n+{\n+  return vrndxq_f16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrintx.f16\"  }  } */"}, {"sha": "99a758110c7558fac5cbea522c33a8267a49aab1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrndxq_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndxq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50f6abffc3353fa4f246cb18d6d04978d60abad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndxq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrndxq_f32.c?ref=a50f6abffc3353fa4f246cb18d6d04978d60abad", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a)\n+{\n+  return vrndxq_f32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrintx.f32\"  }  } */"}]}