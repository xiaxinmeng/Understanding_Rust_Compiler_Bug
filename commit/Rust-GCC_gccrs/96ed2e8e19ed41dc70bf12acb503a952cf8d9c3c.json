{"sha": "96ed2e8e19ed41dc70bf12acb503a952cf8d9c3c", "node_id": "C_kwDOANBUbNoAKDk2ZWQyZThlMTllZDQxZGM3MGJmMTJhY2I1MDNhOTUyY2Y4ZDljM2M", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-04-28T11:01:05Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-05-11T07:38:20Z"}, "message": "tokenstream: Add literal int draft conversion\n\nAdd a first draft for the literal integer conversion to tokenstream\nLiteral types.\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast-tokenstream.cc (dispatch_integer_literals):\n\tAdd a static function to dispatch depending on the core type.\n\t(TokenStream::collect): Add call to dispatch function.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "2fc27d4c03977391f4bb26456f2e2ca19b222e14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fc27d4c03977391f4bb26456f2e2ca19b222e14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96ed2e8e19ed41dc70bf12acb503a952cf8d9c3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96ed2e8e19ed41dc70bf12acb503a952cf8d9c3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96ed2e8e19ed41dc70bf12acb503a952cf8d9c3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96ed2e8e19ed41dc70bf12acb503a952cf8d9c3c/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7358d90bb61ca30b6e22066306a8b77e373ed7e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7358d90bb61ca30b6e22066306a8b77e373ed7e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7358d90bb61ca30b6e22066306a8b77e373ed7e8"}], "stats": {"total": 87, "additions": 87, "deletions": 0}, "files": [{"sha": "d77c1cf4149238a6418c94684f4b730b0c95d0bf", "filename": "gcc/rust/ast/rust-ast-tokenstream.cc", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96ed2e8e19ed41dc70bf12acb503a952cf8d9c3c/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96ed2e8e19ed41dc70bf12acb503a952cf8d9c3c/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc?ref=96ed2e8e19ed41dc70bf12acb503a952cf8d9c3c", "patch": "@@ -41,6 +41,89 @@ pop_group (std::vector<ProcMacro::TokenStream> &streams,\n   streams.back ().push (tt);\n }\n \n+static void\n+dispatch_integer_literals (ProcMacro::TokenStream &ts, TokenPtr &token)\n+{\n+  std::string::size_type sz;\n+  auto str = token->as_string ();\n+  unsigned long long uvalue;\n+  long long svalue;\n+  bool suffixed = false;\n+\n+  switch (token->get_type_hint ())\n+    {\n+    case CORETYPE_U8:\n+      uvalue = std::stoull (str, &sz);\n+      suffixed = sz == str.length ();\n+      ts.push (ProcMacro::TokenTree::make_tokentree (\n+\tProcMacro::Literal::make_u8 (uvalue, suffixed)));\n+      break;\n+    case CORETYPE_U16:\n+      uvalue = std::stoull (str, &sz);\n+      suffixed = sz == str.length ();\n+      ts.push (ProcMacro::TokenTree::make_tokentree (\n+\tProcMacro::Literal::make_u16 (uvalue, suffixed)));\n+      break;\n+    case CORETYPE_U32:\n+      uvalue = std::stoull (str, &sz);\n+      suffixed = sz == str.length ();\n+      ts.push (ProcMacro::TokenTree::make_tokentree (\n+\tProcMacro::Literal::make_u32 (uvalue, suffixed)));\n+      break;\n+    case CORETYPE_U64:\n+      uvalue = std::stoull (str, &sz);\n+      suffixed = sz == str.length ();\n+      ts.push (ProcMacro::TokenTree::make_tokentree (\n+\tProcMacro::Literal::make_u32 (uvalue, suffixed)));\n+      break;\n+    case CORETYPE_I8:\n+      svalue = std::stoll (str, &sz);\n+      suffixed = sz == str.length ();\n+      ts.push (ProcMacro::TokenTree::make_tokentree (\n+\tProcMacro::Literal::make_i8 (svalue, suffixed)));\n+      break;\n+    case CORETYPE_I16:\n+      svalue = std::stoll (str, &sz);\n+      suffixed = sz == str.length ();\n+      ts.push (ProcMacro::TokenTree::make_tokentree (\n+\tProcMacro::Literal::make_i16 (svalue, suffixed)));\n+      break;\n+    case CORETYPE_I32:\n+      svalue = std::stoll (str, &sz);\n+      suffixed = sz == str.length ();\n+      ts.push (ProcMacro::TokenTree::make_tokentree (\n+\tProcMacro::Literal::make_i32 (svalue, suffixed)));\n+      break;\n+    case CORETYPE_I64:\n+      svalue = std::stoll (str, &sz);\n+      suffixed = sz == str.length ();\n+      ts.push (ProcMacro::TokenTree::make_tokentree (\n+\tProcMacro::Literal::make_i32 (svalue, suffixed)));\n+      break;\n+    case CORETYPE_INT:\n+      svalue = std::stoll (str, &sz);\n+      suffixed = sz == str.length ();\n+      ts.push (ProcMacro::TokenTree::make_tokentree (\n+\tProcMacro::Literal::make_isize (svalue, suffixed)));\n+      break;\n+    case CORETYPE_UINT:\n+      uvalue = std::stoull (str, &sz);\n+      suffixed = sz == str.length ();\n+      ts.push (ProcMacro::TokenTree::make_tokentree (\n+\tProcMacro::Literal::make_usize (uvalue, suffixed)));\n+      break;\n+    case CORETYPE_UNKNOWN:\n+      svalue = std::stoll (str, &sz);\n+      suffixed = sz == str.length ();\n+      ts.push (ProcMacro::TokenTree::make_tokentree (\n+\tProcMacro::Literal::make_i32 (svalue, false)));\n+      break;\n+    default:\n+      gcc_unreachable ();\n+      break;\n+    }\n+}\n+\n ProcMacro::TokenStream\n TokenStream::collect () const\n {\n@@ -51,6 +134,10 @@ TokenStream::collect () const\n       switch (token->get_id ())\n \t{\n \t// Literals\n+\tcase INT_LITERAL:\n+\t  dispatch_integer_literals (trees.back (), token);\n+\t  break;\n+\t// FIXME: Why does BYTE_CHAR_LITERAL is not handled by rustc ?\n \tcase CHAR_LITERAL: // TODO: UTF-8 handling\n \t  trees.back ().push (ProcMacro::TokenTree::make_tokentree (\n \t    ProcMacro::Literal::make_char (token->as_string ()[0])));"}]}