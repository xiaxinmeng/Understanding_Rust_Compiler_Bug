{"sha": "162c21d9985ea765ff74de0a465a6119363f1dcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYyYzIxZDk5ODVlYTc2NWZmNzRkZTBhNDY1YTYxMTkzNjNmMWRjZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-24T14:35:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-24T14:35:45Z"}, "message": "[multiple changes]\n\n2014-01-24  Robert Dewar  <dewar@adacore.com>\n\n\t* checks.adb (Expr_Known_Valid): Result of fpt operator never\n\tconsidered valid.\n\n2014-01-24  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* back_end.adb: Minor fix in comment.\n\n2014-01-24  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch3.adb (Check_Abstract_Overriding): Code reestructuration\n\trequired to report the error in case of task types.\n\n2014-01-24  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb: Additional index checking.\n\nFrom-SVN: r207035", "tree": {"sha": "988a45cdbfac20f439bad7dd95d2716a65a3f078", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/988a45cdbfac20f439bad7dd95d2716a65a3f078"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/162c21d9985ea765ff74de0a465a6119363f1dcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/162c21d9985ea765ff74de0a465a6119363f1dcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/162c21d9985ea765ff74de0a465a6119363f1dcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/162c21d9985ea765ff74de0a465a6119363f1dcd/comments", "author": null, "committer": null, "parents": [{"sha": "08cd7c2fcf3cd62176d1f6d19f4ef030d343ce0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08cd7c2fcf3cd62176d1f6d19f4ef030d343ce0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08cd7c2fcf3cd62176d1f6d19f4ef030d343ce0f"}], "stats": {"total": 119, "additions": 93, "deletions": 26}, "files": [{"sha": "c56b138767dc76e15484759bf1c921b62fd9f744", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162c21d9985ea765ff74de0a465a6119363f1dcd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162c21d9985ea765ff74de0a465a6119363f1dcd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=162c21d9985ea765ff74de0a465a6119363f1dcd", "patch": "@@ -1,3 +1,21 @@\n+2014-01-24  Robert Dewar  <dewar@adacore.com>\n+\n+\t* checks.adb (Expr_Known_Valid): Result of fpt operator never\n+\tconsidered valid.\n+\n+2014-01-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* back_end.adb: Minor fix in comment.\n+\n+2014-01-24  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch3.adb (Check_Abstract_Overriding): Code reestructuration\n+\trequired to report the error in case of task types.\n+\n+2014-01-24  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb: Additional index checking.\n+\n 2014-01-24  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_attr.adb (Analyze_Attribute, case 'Update): Analyze"}, {"sha": "c2275df59702ed0eff1c08c06a46c89d9506c5e6", "filename": "gcc/ada/back_end.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162c21d9985ea765ff74de0a465a6119363f1dcd/gcc%2Fada%2Fback_end.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162c21d9985ea765ff74de0a465a6119363f1dcd/gcc%2Fada%2Fback_end.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.adb?ref=162c21d9985ea765ff74de0a465a6119363f1dcd", "patch": "@@ -51,7 +51,7 @@ package body Back_End is\n \n    flag_stack_check : Int;\n    pragma Import (C, flag_stack_check);\n-   --  Indicates if stack checking is enabled, imported from decl.c\n+   --  Indicates if stack checking is enabled, imported from misc.c\n \n    save_argc : Nat;\n    pragma Import (C, save_argc);"}, {"sha": "51acd293a91779816b3859c4de173e5e8f3d1d88", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162c21d9985ea765ff74de0a465a6119363f1dcd/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162c21d9985ea765ff74de0a465a6119363f1dcd/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=162c21d9985ea765ff74de0a465a6119363f1dcd", "patch": "@@ -5308,22 +5308,26 @@ package body Checks is\n       elsif Nkind_In (Expr, N_Type_Conversion, N_Qualified_Expression) then\n          return Expr_Known_Valid (Expression (Expr));\n \n-      --  The result of any operator is always considered valid, since we\n-      --  assume the necessary checks are done by the operator. For operators\n-      --  on floating-point operations, we must also check when the operation\n-      --  is the right-hand side of an assignment, or is an actual in a call.\n-\n-      elsif Nkind (Expr) in N_Op then\n-         if Is_Floating_Point_Type (Typ)\n-            and then Validity_Check_Floating_Point\n-            and then (Nkind_In (Parent (Expr), N_Assignment_Statement,\n-                                               N_Function_Call,\n-                                               N_Parameter_Association))\n-         then\n-            return False;\n-         else\n-            return True;\n-         end if;\n+      --  Case of expression is a non-floating-point operator. In this case we\n+      --  can assume the result is valid the generated code for the operator\n+      --  will include whatever checks are needed (e.g. range checks) to ensure\n+      --  validity. This assumption does not hold for the floating-point case,\n+      --  since floating-point operators can generate Infinite or NaN results\n+      --  which are considered invalid.\n+\n+      --  Historical note: in older versions, the exemption of floating-point\n+      --  types from this assumption was done only in cases where the parent\n+      --  was an assignment, function call or parameter association. Presumably\n+      --  the idea was that in other contexts, the result would be checked\n+      --  elsewhere, but this list of cases was missing tests (at least the\n+      --  N_Object_Declaration case, as shown by a reported missing validity\n+      --  check), and it is not clear why function calls but not procedure\n+      --  calls were tested for. It really seems more accurate and much\n+      --  safer to recognize that expressions which are the result of a\n+      --  floating-point operator can never be assumed to be valid.\n+\n+      elsif Nkind (Expr) in N_Op and then not Is_Floating_Point_Type (Typ) then\n+         return True;\n \n       --  The result of a membership test is always valid, since it is true or\n       --  false, there are no other possibilities."}, {"sha": "f880fe6138a3c43940aaff78a693b3cd312948bf", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162c21d9985ea765ff74de0a465a6119363f1dcd/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162c21d9985ea765ff74de0a465a6119363f1dcd/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=162c21d9985ea765ff74de0a465a6119363f1dcd", "patch": "@@ -6097,6 +6097,52 @@ package body Sem_Attr is\n                   Error_Attr\n                     (\"others choice not allowed in attribute %\", Comp);\n \n+               elsif Is_Array_Type (P_Type) then\n+                  declare\n+                     Index      : Node_Id;\n+                     Index_Type : Entity_Id;\n+\n+                  begin\n+                     if Nkind (First (Choices (Assoc))) /= N_Aggregate then\n+\n+                        --  Choices denote separate components of one-\n+                        --  dimensional array.\n+\n+                        Index_Type := First_Index (P_Type);\n+                        Index := First (Choices (Assoc));\n+                        while Present (Index) loop\n+                           if Nkind (Index) = N_Range then\n+                              Analyze_And_Resolve (\n+                                Low_Bound (Index), Etype (Index_Type));\n+                              Analyze_And_Resolve (\n+                               High_Bound (Index), Etype (Index_Type));\n+\n+                           else\n+                              Analyze_And_Resolve (Index, Etype (Index_Type));\n+                           end if;\n+                           Next (Index);\n+                        end loop;\n+\n+                     else\n+                        --  Choice is a sequence of indices for each dimension\n+\n+                        Index_Type := First_Index (P_Type);\n+                        Index := First (Expressions (First (Choices (Assoc))));\n+                        while Present (Index_Type)\n+                          and then Present (Index)\n+                        loop\n+                           Analyze_And_Resolve (Index, Etype (Index_Type));\n+                           Next_Index (Index_Type);\n+                           Next (Index);\n+                        end loop;\n+\n+                        if Present (Index) or else Present (Index_Type) then\n+                           Error_Msg_N (\n+                            \"dimension mismatch in index list\", Assoc);\n+                        end if;\n+                     end if;\n+                  end;\n+\n                elsif Is_Record_Type (P_Type) then\n                   Check_Component_Reference (Comp, P_Type);\n                end if;"}, {"sha": "da315deea410ad19cd2ccf74e90c8fae749e6c0a", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162c21d9985ea765ff74de0a465a6119363f1dcd/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162c21d9985ea765ff74de0a465a6119363f1dcd/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=162c21d9985ea765ff74de0a465a6119363f1dcd", "patch": "@@ -9684,18 +9684,17 @@ package body Sem_Ch3 is\n                elsif Is_Concurrent_Record_Type (T)\n                  and then Present (Interfaces (T))\n                then\n-                  --  The controlling formal of Subp must be of mode \"out\",\n-                  --  \"in out\" or an access-to-variable to be overridden.\n+                  --  If an inherited subprogram is implemented by a protected\n+                  --  procedure or an entry, then the first parameter of the\n+                  --  inherited subprogram shall be of mode out or in out, or\n+                  --  an access-to-variable parameter (RM 9.4(11.9/3))\n \n-                  if Ekind (First_Formal (Subp)) = E_In_Parameter\n+                  if Is_Protected_Type (Corresponding_Concurrent_Type (T))\n+                    and then Ekind (First_Formal (Subp)) = E_In_Parameter\n                     and then Ekind (Subp) /= E_Function\n+                    and then not Is_Predefined_Dispatching_Operation (Subp)\n                   then\n-                     if not Is_Predefined_Dispatching_Operation (Subp)\n-                       and then Is_Protected_Type\n-                                  (Corresponding_Concurrent_Type (T))\n-                     then\n-                        Error_Msg_PT (T, Subp);\n-                     end if;\n+                     Error_Msg_PT (T, Subp);\n \n                   --  Some other kind of overriding failure\n "}]}