{"sha": "2f31b36248da8d0a895f2535d9c5e251b5e4595e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYzMWIzNjI0OGRhOGQwYTg5NWYyNTM1ZDljNWUyNTFiNWU0NTk1ZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-12-16T10:34:12Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-12-16T10:34:12Z"}, "message": "[Ada] Export the Ada version through the C interface\n\n2019-12-16  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* fe.h (Ada_Version_Type): New typedef.\n\t(Ada_Version): Declare.\n\t* opt.ads (Ada_Version_Type): Add Convention C and WARNING line.\n\t(Ada_Version): Add WARNING line.\n\t(Exception_Mechanism_Type): Likewise.\n\nFrom-SVN: r279426", "tree": {"sha": "0b5e08c9819c91d5aa9a8222d59a36290a09ca72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b5e08c9819c91d5aa9a8222d59a36290a09ca72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f31b36248da8d0a895f2535d9c5e251b5e4595e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f31b36248da8d0a895f2535d9c5e251b5e4595e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f31b36248da8d0a895f2535d9c5e251b5e4595e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f31b36248da8d0a895f2535d9c5e251b5e4595e/comments", "author": null, "committer": null, "parents": [{"sha": "ba58b776c08cf4c1a7021e60f9ec1f70a8141b1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba58b776c08cf4c1a7021e60f9ec1f70a8141b1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba58b776c08cf4c1a7021e60f9ec1f70a8141b1e"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "2ef94ce87d1cb55e13827dcad6378c634b17afbc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f31b36248da8d0a895f2535d9c5e251b5e4595e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f31b36248da8d0a895f2535d9c5e251b5e4595e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2f31b36248da8d0a895f2535d9c5e251b5e4595e", "patch": "@@ -1,3 +1,11 @@\n+2019-12-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* fe.h (Ada_Version_Type): New typedef.\n+\t(Ada_Version): Declare.\n+\t* opt.ads (Ada_Version_Type): Add Convention C and WARNING line.\n+\t(Ada_Version): Add WARNING line.\n+\t(Exception_Mechanism_Type): Likewise.\n+\n 2019-12-16  Gary Dismukes  <dismukes@adacore.com>\n \n \t* checks.adb, sem_util.adb: Minor reformatting and U.S. spelling"}, {"sha": "6b3f300301c031526dbdd5b55a910e6d936db834", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f31b36248da8d0a895f2535d9c5e251b5e4595e/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f31b36248da8d0a895f2535d9c5e251b5e4595e/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=2f31b36248da8d0a895f2535d9c5e251b5e4595e", "patch": "@@ -36,7 +36,7 @@\n \n    \"WARNING: There is a matching C declaration of this <entity_kind> in fe.h\"\n \n-   where <entity_kind> is either \"subprogram\" or \"variable\".\n+   where <entity_kind> is either \"subprogram\" or \"variable\" or \"type\".\n \n    WARNING: functions taking String_Pointer parameters must abide by the rule\n    documented alongside the definition of String_Pointer in types.h.  */\n@@ -187,6 +187,7 @@ extern Boolean In_Extended_Main_Code_Unit\t(Entity_Id);\n \n /* opt: */\n \n+#define Ada_Version\t\t\topt__ada_version\n #define Back_End_Inlining\t\topt__back_end_inlining\n #define Debug_Generated_Code\t\topt__debug_generated_code\n #define Exception_Extra_Info\t\topt__exception_extra_info\n@@ -198,10 +199,15 @@ extern Boolean In_Extended_Main_Code_Unit\t(Entity_Id);\n #define No_Strict_Aliasing_CP\t\topt__no_strict_aliasing\n #define Suppress_Checks\t\t\topt__suppress_checks\n \n+typedef enum {\n+  Ada_83, Ada_95, Ada_2005, Ada_2012, Ada_2020\n+} Ada_Version_Type;\n+\n typedef enum {\n   Front_End_SJLJ, Back_End_ZCX, Back_End_SJLJ\n } Exception_Mechanism_Type;\n \n+extern Ada_Version_Type Ada_Version;\n extern Boolean Back_End_Inlining;\n extern Boolean Debug_Generated_Code;\n extern Boolean Exception_Extra_Info;"}, {"sha": "291fae81f2c79308c170d408708d6dd20b01e576", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f31b36248da8d0a895f2535d9c5e251b5e4595e/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f31b36248da8d0a895f2535d9c5e251b5e4595e/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=2f31b36248da8d0a895f2535d9c5e251b5e4595e", "patch": "@@ -124,11 +124,14 @@ package Opt is\n \n    type Ada_Version_Type is (Ada_83, Ada_95, Ada_2005, Ada_2012, Ada_2020);\n    pragma Ordered (Ada_Version_Type);\n+   pragma Convention (C, Ada_Version_Type);\n    --  Versions of Ada for Ada_Version below. Note that these are ordered,\n    --  so that tests like Ada_Version >= Ada_95 are legitimate and useful.\n    --  Think twice before using \"=\"; Ada_Version >= Ada_2012 is more likely\n    --  what you want, because it will apply to future versions of the language.\n \n+   --  WARNING: There is a matching C declaration of this type in fe.h\n+\n    Ada_Version_Default : constant Ada_Version_Type := Ada_2012;\n    pragma Warnings (Off, Ada_Version_Default);\n    --  GNAT\n@@ -141,6 +144,8 @@ package Opt is\n    --  compiler switches, or implicitly (to Ada_Version_Runtime) when a\n    --  predefined or internal file is compiled.\n \n+   --  WARNING: There is a matching C declaration of this variable in fe.h\n+\n    Ada_Version_Pragma : Node_Id := Empty;\n    --  Reflects the Ada_xxx pragma that resulted in setting Ada_Version. Used\n    --  to specialize error messages complaining about the Ada version in use.\n@@ -629,9 +634,10 @@ package Opt is\n       --  Similar to Back_End_ZCX with respect to the front-end processing\n       --  of regular and AT-END handlers. A setjmp/longjmp scheme is used to\n       --  propagate and setup handler contexts on regular execution paths.\n-\n    pragma Convention (C, Exception_Mechanism_Type);\n \n+   --  WARNING: There is a matching C declaration of this type in fe.h\n+\n    Exception_Mechanism : Exception_Mechanism_Type := Front_End_SJLJ;\n    --  GNAT\n    --  Set to the appropriate value depending on the flags in system.ads"}]}