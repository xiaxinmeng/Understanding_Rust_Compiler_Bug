{"sha": "0e45c664e3f08eac144e82918a38174873ec176d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU0NWM2NjRlM2YwOGVhYzE0NGU4MjkxOGEzODE3NDg3M2VjMTc2ZA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2018-05-08T19:30:57Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2018-05-08T19:30:57Z"}, "message": "re PR c++/85695 (if constexpr misevaluates typedefed type value)\n\n\tPR c++/85695\n\t* semantics.c (finish_if_stmt_cond): See through typedefs.\n\n\t* g++.dg/cpp1z/constexpr-if22.C: New test.\n\nFrom-SVN: r260049", "tree": {"sha": "b53531e258523915480e137a1f73e3191a7d8627", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b53531e258523915480e137a1f73e3191a7d8627"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e45c664e3f08eac144e82918a38174873ec176d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e45c664e3f08eac144e82918a38174873ec176d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e45c664e3f08eac144e82918a38174873ec176d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e45c664e3f08eac144e82918a38174873ec176d/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b275e65cbe1b290605df43cb10be797f2c9fb99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b275e65cbe1b290605df43cb10be797f2c9fb99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b275e65cbe1b290605df43cb10be797f2c9fb99"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "d80c15d21684c2e2edd5d0b325b69863af2d9db3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e45c664e3f08eac144e82918a38174873ec176d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e45c664e3f08eac144e82918a38174873ec176d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0e45c664e3f08eac144e82918a38174873ec176d", "patch": "@@ -1,3 +1,8 @@\n+2018-05-08  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/85695\n+\t* semantics.c (finish_if_stmt_cond): See through typedefs.\n+\n 2018-05-07  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/85646 - lambda visibility."}, {"sha": "195286ca7519378792eb07fa116016f5a4f99cbb", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e45c664e3f08eac144e82918a38174873ec176d/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e45c664e3f08eac144e82918a38174873ec176d/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0e45c664e3f08eac144e82918a38174873ec176d", "patch": "@@ -736,7 +736,7 @@ finish_if_stmt_cond (tree cond, tree if_stmt)\n       && !instantiation_dependent_expression_p (cond)\n       /* Wait until instantiation time, since only then COND has been\n \t converted to bool.  */\n-      && TREE_TYPE (cond) == boolean_type_node)\n+      && TYPE_MAIN_VARIANT (TREE_TYPE (cond)) == boolean_type_node)\n     {\n       cond = instantiate_non_dependent_expr (cond);\n       cond = cxx_constant_value (cond, NULL_TREE);"}, {"sha": "3bfeb894b9b46dd62da15ad955f9e1cd569e2516", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e45c664e3f08eac144e82918a38174873ec176d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e45c664e3f08eac144e82918a38174873ec176d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e45c664e3f08eac144e82918a38174873ec176d", "patch": "@@ -1,3 +1,8 @@\n+2018-05-08  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/85695\n+\t* g++.dg/cpp1z/constexpr-if22.C: New test.\n+\n 2018-05-08  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/85693"}, {"sha": "76f0c73476b3172a45a2fd2e025c5dfad9e0da89", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if22.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e45c664e3f08eac144e82918a38174873ec176d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e45c664e3f08eac144e82918a38174873ec176d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if22.C?ref=0e45c664e3f08eac144e82918a38174873ec176d", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/85695\n+// { dg-options -std=c++17 }\n+\n+template <typename T, T v>\n+struct integral_constant {\n+    using value_type = T;\n+    static constexpr const value_type value = v;\n+    constexpr operator value_type (void) const { return value; }\n+};\n+template <typename T> struct is_trivial\n+    : public integral_constant<bool, __is_trivial(T)> {};\n+\n+template <typename T>\n+T clone_object (const T& p)\n+{\n+    if constexpr (is_trivial<T>::value)\n+        return p;\n+    else\n+        return p.clone();\n+}\n+int main (void) { return clone_object(0); }"}]}