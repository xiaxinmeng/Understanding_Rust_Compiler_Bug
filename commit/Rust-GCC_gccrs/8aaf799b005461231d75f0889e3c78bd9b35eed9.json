{"sha": "8aaf799b005461231d75f0889e3c78bd9b35eed9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFhZjc5OWIwMDU0NjEyMzFkNzVmMDg4OWUzYzc4YmQ5YjM1ZWVkOQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2016-08-12T07:11:23Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2016-08-12T07:11:23Z"}, "message": "[PR49366] emit loc exprs for C++ non-virtual pmf template value parms\n\nWe used to emit, in debug information, the values bound to pointer to\nmember function template parameters only when they were NULL or\nvirtual member functions, because those can be represented with\nDW_AT_const_value.\n\nIn order to represent the symbolic pointer to member function\nconstants for non-virtual member functions, we'd need to be able to\nemit relocations for part of DW_AT_const_value, which we don't.  The\nmore viable alternative is to use DW_AT_location to represent such\nvalues, as slated for inclusion in DWARFv5, according to\n<URL:http://www.dwarfstd.org/ShowIssue.php?issue=130412.1>.\n\nWith this patch, when we can't emit a DW_AT_const_value, we emit each\n\"member\" of the pointer to member function \"record\" as a\nDW_OP_stack_value DW_OP_piece, as long as the referenced member\nfunction is output in the same translation unit, otherwise we'd get\nrelocations to external symbols, something to avoid in debug sections.\n\n\nfor  gcc/ChangeLog\n\n\tPR debug/49366\n\t* dwarf2out.c (loc_list_from_tree_1): Expand some CONSTRUCTORs\n\tin DW_OP_pieces, just enough to handle pointers to member\n\tfunctions.\n\t(gen_remaining_tmpl_value_param_die_attribute): Use a location\n\texpression on DWARFv5 if a constant value doesn't work.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR debug/49366\n\t* g++.dg/debug/dwarf2/template-params-12.H: New.\n\t* g++.dg/debug/dwarf2/template-params-12f.C: New.\n\t* g++.dg/debug/dwarf2/template-params-12g.C: New.\n\t* g++.dg/debug/dwarf2/template-params-12n.C: New.\n\t* g++.dg/debug/dwarf2/template-params-12s.C: New.\n\t* g++.dg/debug/dwarf2/template-params-12u.C: New.\n\t* g++.dg/debug/dwarf2/template-params-12v.C: New.\n\t* g++.dg/debug/dwarf2/template-params-12w.C: New.\n\nFrom-SVN: r239401", "tree": {"sha": "737d04532927f66a28ff5e733a2d7ca27a390589", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/737d04532927f66a28ff5e733a2d7ca27a390589"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8aaf799b005461231d75f0889e3c78bd9b35eed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aaf799b005461231d75f0889e3c78bd9b35eed9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8aaf799b005461231d75f0889e3c78bd9b35eed9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aaf799b005461231d75f0889e3c78bd9b35eed9/comments", "author": null, "committer": null, "parents": [{"sha": "df5b19dcc1a27395ba96503540ca0085ccaa7ef7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df5b19dcc1a27395ba96503540ca0085ccaa7ef7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df5b19dcc1a27395ba96503540ca0085ccaa7ef7"}], "stats": {"total": 182, "additions": 181, "deletions": 1}, "files": [{"sha": "cdc5f290bef27f4db5dd2b4e99cc06d0e31aee8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aaf799b005461231d75f0889e3c78bd9b35eed9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aaf799b005461231d75f0889e3c78bd9b35eed9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8aaf799b005461231d75f0889e3c78bd9b35eed9", "patch": "@@ -1,3 +1,12 @@\n+2016-08-12  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR debug/49366\n+\t* dwarf2out.c (loc_list_from_tree_1): Expand some CONSTRUCTORs\n+\tin DW_OP_pieces, just enough to handle pointers to member\n+\tfunctions.\n+\t(gen_remaining_tmpl_value_param_die_attribute): Use a location\n+\texpression on DWARFv5 if a constant value doesn't work.\n+\n 2016-08-11  David Malcolm  <dmalcolm@redhat.com>\n \n \t* selftest-run-tests.c (selftest::run_tests): Call selftest_c_tests."}, {"sha": "c658220c868cc5a9bee66f014d06f46ffcebfad0", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 92, "deletions": 1, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aaf799b005461231d75f0889e3c78bd9b35eed9/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aaf799b005461231d75f0889e3c78bd9b35eed9/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=8aaf799b005461231d75f0889e3c78bd9b35eed9", "patch": "@@ -16142,6 +16142,89 @@ loc_list_from_tree_1 (tree loc, int want_address,\n     case COMPLEX_CST:\n       if ((ret = cst_pool_loc_descr (loc)))\n \thave_address = 1;\n+      else if (TREE_CODE (loc) == CONSTRUCTOR)\n+\t{\n+\t  tree type = TREE_TYPE (loc);\n+\t  unsigned HOST_WIDE_INT size = int_size_in_bytes (type);\n+\t  unsigned HOST_WIDE_INT offset = 0;\n+\t  unsigned HOST_WIDE_INT cnt;\n+\t  constructor_elt *ce;\n+\n+\t  if (TREE_CODE (type) == RECORD_TYPE)\n+\t    {\n+\t      /* This is very limited, but it's enough to output\n+\t\t pointers to member functions, as long as the\n+\t\t referenced function is defined in the current\n+\t\t translation unit.  */\n+\t      FOR_EACH_VEC_SAFE_ELT (CONSTRUCTOR_ELTS (loc), cnt, ce)\n+\t\t{\n+\t\t  tree val = ce->value;\n+\n+\t\t  tree field = ce->index;\n+\n+\t\t  if (val)\n+\t\t    STRIP_NOPS (val);\n+\n+\t\t  if (!field || DECL_BIT_FIELD (field))\n+\t\t    {\n+\t\t      expansion_failed (loc, NULL_RTX,\n+\t\t\t\t\t\"bitfield in record type constructor\");\n+\t\t      size = offset = (unsigned HOST_WIDE_INT)-1;\n+\t\t      ret = NULL;\n+\t\t      break;\n+\t\t    }\n+\n+\t\t  HOST_WIDE_INT fieldsize = tree_to_shwi (DECL_SIZE_UNIT (field));\n+\t\t  unsigned HOST_WIDE_INT pos = int_byte_position (field);\n+\t\t  gcc_assert (pos + fieldsize <= size);\n+\t\t  if (pos < offset)\n+\t\t    {\n+\t\t      expansion_failed (loc, NULL_RTX,\n+\t\t\t\t\t\"out-of-order fields in record constructor\");\n+\t\t      size = offset = (unsigned HOST_WIDE_INT)-1;\n+\t\t      ret = NULL;\n+\t\t      break;\n+\t\t    }\n+\t\t  if (pos > offset)\n+\t\t    {\n+\t\t      ret1 = new_loc_descr (DW_OP_piece, pos - offset, 0);\n+\t\t      add_loc_descr (&ret, ret1);\n+\t\t      offset = pos;\n+\t\t    }\n+\t\t  if (val && fieldsize != 0)\n+\t\t    {\n+\t\t      ret1 = loc_descriptor_from_tree (val, want_address, context);\n+\t\t      if (!ret1)\n+\t\t\t{\n+\t\t\t  expansion_failed (loc, NULL_RTX,\n+\t\t\t\t\t    \"unsupported expression in field\");\n+\t\t\t  size = offset = (unsigned HOST_WIDE_INT)-1;\n+\t\t\t  ret = NULL;\n+\t\t\t  break;\n+\t\t\t}\n+\t\t      add_loc_descr (&ret, ret1);\n+\t\t    }\n+\t\t  if (fieldsize)\n+\t\t    {\n+\t\t      ret1 = new_loc_descr (DW_OP_piece, fieldsize, 0);\n+\t\t      add_loc_descr (&ret, ret1);\n+\t\t      offset = pos + fieldsize;\n+\t\t    }\n+\t\t}\n+\n+\t      if (offset != size)\n+\t\t{\n+\t\t  ret1 = new_loc_descr (DW_OP_piece, size - offset, 0);\n+\t\t  add_loc_descr (&ret, ret1);\n+\t\t  offset = size;\n+\t\t}\n+\n+\t      have_address = !!want_address;\n+\t    }\n+\t  else\n+\t    expansion_failed (loc, NULL_RTX,\n+\t\t\t      \"constructor of non-record type\");\n+\t}\n       else\n       /* We can construct small constants here using int_loc_descriptor.  */\n \texpansion_failed (loc, NULL_RTX,\n@@ -24177,7 +24260,15 @@ gen_remaining_tmpl_value_param_die_attribute (void)\n       FOR_EACH_VEC_ELT (*tmpl_value_parm_die_table, i, e)\n \t{\n \t  if (!tree_add_const_value_attribute (e->die, e->arg))\n-\t    (*tmpl_value_parm_die_table)[j++] = *e;\n+\t    {\n+\t      dw_loc_descr_ref loc = NULL;\n+\t      if (dwarf_version >= 5 || !dwarf_strict)\n+\t\tloc = loc_descriptor_from_tree (e->arg, 2, NULL);\n+\t      if (loc)\n+\t\tadd_AT_loc (e->die, DW_AT_location, loc);\n+\t      else\n+\t\t(*tmpl_value_parm_die_table)[j++] = *e;\n+\t    }\n \t}\n       tmpl_value_parm_die_table->truncate (j);\n     }"}, {"sha": "54939b8df3154bed264a10cebb49b4312394adce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aaf799b005461231d75f0889e3c78bd9b35eed9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aaf799b005461231d75f0889e3c78bd9b35eed9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8aaf799b005461231d75f0889e3c78bd9b35eed9", "patch": "@@ -1,3 +1,15 @@\n+2016-08-12  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR debug/49366\n+\t* g++.dg/debug/dwarf2/template-params-12.H: New.\n+\t* g++.dg/debug/dwarf2/template-params-12f.C: New.\n+\t* g++.dg/debug/dwarf2/template-params-12g.C: New.\n+\t* g++.dg/debug/dwarf2/template-params-12n.C: New.\n+\t* g++.dg/debug/dwarf2/template-params-12s.C: New.\n+\t* g++.dg/debug/dwarf2/template-params-12u.C: New.\n+\t* g++.dg/debug/dwarf2/template-params-12v.C: New.\n+\t* g++.dg/debug/dwarf2/template-params-12w.C: New.\n+\n 2016-08-11  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR target/72863"}, {"sha": "24c26e7c58a066bf76bd311ecd71bae8b79431f6", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/template-params-12.H", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aaf799b005461231d75f0889e3c78bd9b35eed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-12.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aaf799b005461231d75f0889e3c78bd9b35eed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-12.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-12.H?ref=8aaf799b005461231d75f0889e3c78bd9b35eed9", "patch": "@@ -0,0 +1,17 @@\n+// Tests for the fix for PR debug/49366.\n+struct B {\n+  void g();\n+  virtual void v() = 0;\n+  virtual void w();\n+};\n+void B::g() {}\n+void B::w() {}\n+struct S : B {\n+  void f();\n+  void v();\n+  void u();\n+};\n+void S::f() {}\n+void S::v() {}\n+template <void (B::*MF)()> void t() {}\n+template <void (S::*MF)()> void t() {}"}, {"sha": "e2da8292991407825f53ba136a577bbaa12fe521", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/template-params-12f.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aaf799b005461231d75f0889e3c78bd9b35eed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-12f.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aaf799b005461231d75f0889e3c78bd9b35eed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-12f.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-12f.C?ref=8aaf799b005461231d75f0889e3c78bd9b35eed9", "patch": "@@ -0,0 +1,7 @@\n+// { dg-options \"-gdwarf-2 -dA\" }\n+// { dg-final { scan-assembler-times \"DIE \\\\(\\[^\\n\\]*\\\\) DW_TAG_template_value_param\" 1 } }\n+// { dg-final { scan-assembler-times \"DIE \\\\(\\[^\\n\\]*\\\\) DW_TAG_template_value_param\\[^\\n\\]*\\n\\[^\\n\\]* DW_AT_name\\n\\[^\\n\\]* DW_AT_type\\n\\[^\\n\\]*\\[^\\n\\]* DW_AT_location\\n\\[^\\n\\]* DW_OP_addr\\n\\[^\\n\\]*_ZN1S1fEv\\[^\\n\\]*\\n\\[^\\n\\]* DW_OP_stack_value\\n\\[^\\n\\]* DW_OP_piece\\n\\[^\\n\\]*\\n\\[^\\n\\]* DW_OP_lit0\\n\\[^\\n\\]* DW_OP_stack_value\\n\\[^\\n\\]* DW_OP_piece\" 1 } }\n+#include \"template-params-12.H\"\n+/* We get a location list with a pair of DW_OP_pieces for pointers to\n+   non-virtual member functions.  */\n+template void t<&S::f>();"}, {"sha": "813f71d1bc0f83a01febf39f36948893acb5cd00", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/template-params-12g.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aaf799b005461231d75f0889e3c78bd9b35eed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-12g.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aaf799b005461231d75f0889e3c78bd9b35eed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-12g.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-12g.C?ref=8aaf799b005461231d75f0889e3c78bd9b35eed9", "patch": "@@ -0,0 +1,7 @@\n+// { dg-options \"-gdwarf-2 -dA\" }\n+// { dg-final { scan-assembler-times \"DIE \\\\(\\[^\\n\\]*\\\\) DW_TAG_template_value_param\" 1 } }\n+// { dg-final { scan-assembler-times \"DIE \\\\(\\[^\\n\\]*\\\\) DW_TAG_template_value_param\\[^\\n\\]*\\n\\[^\\n\\]* DW_AT_name\\n\\[^\\n\\]* DW_AT_type\\n\\[^\\n\\]*\\[^\\n\\]* DW_AT_location\\n\\[^\\n\\]* DW_OP_addr\\n\\[^\\n\\]*_ZN1B1gEv\\[^\\n\\]*\\n\\[^\\n\\]* DW_OP_stack_value\\n\\[^\\n\\]* DW_OP_piece\\n\\[^\\n\\]*\\n\\[^\\n\\]* DW_OP_lit0\\n\\[^\\n\\]* DW_OP_stack_value\\n\\[^\\n\\]* DW_OP_piece\" 1 } }\n+#include \"template-params-12.H\"\n+/* We get a location list with a pair of DW_OP_pieces for pointers to\n+   non-virtual member functions.  */\n+template void t<&S::g>();"}, {"sha": "d3c1f589f87228b26ebb2999c7a3e9e8cd2386a1", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/template-params-12n.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aaf799b005461231d75f0889e3c78bd9b35eed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-12n.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aaf799b005461231d75f0889e3c78bd9b35eed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-12n.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-12n.C?ref=8aaf799b005461231d75f0889e3c78bd9b35eed9", "patch": "@@ -0,0 +1,10 @@\n+// { dg-options \"-gdwarf-2 -dA\" }\n+// { dg-final { scan-assembler-times \"DIE \\\\(\\[^\\n\\]*\\\\) DW_TAG_template_value_param\" 1 } }\n+// { dg-final { scan-assembler-times \"DIE \\\\(\\[^\\n\\]*\\\\) DW_TAG_template_value_param\\[^\\n\\]*\\n\\[^\\n\\]* DW_AT_name\\n\\[^\\n\\]* DW_AT_type\\n\\[^\\n\\]* DW_AT_const_value\" 1 } }\n+#include \"template-params-12.H\"\n+/* We get const_value for NULL pointers to member functions.  */\n+#if __cplusplus > 199711L // Ugh, C++98 barfs at both the cast and the overload.\n+template void t<static_cast<void (S::*)()>(0)>();\n+#else\n+template void t<&S::v>();\n+#endif"}, {"sha": "8940eaf1d7978034e7ce2f77600ab33af55ddec6", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/template-params-12s.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aaf799b005461231d75f0889e3c78bd9b35eed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-12s.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aaf799b005461231d75f0889e3c78bd9b35eed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-12s.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-12s.C?ref=8aaf799b005461231d75f0889e3c78bd9b35eed9", "patch": "@@ -0,0 +1,8 @@\n+// { dg-options \"-gdwarf-4 -gstrict-dwarf -dA\" }\n+// { dg-final { scan-assembler-times \"DIE \\\\(\\[^\\n\\]*\\\\) DW_TAG_template_value_param\" 1 } }\n+// { dg-final { scan-assembler-times \"DIE \\\\(\\[^\\n\\]*\\\\) DW_TAG_template_value_param\\[^\\n\\]*\\n\\[^\\n\\]* DW_AT_name\\n\\[^\\n\\]* DW_AT_type\\n\\[^\\n\\]* \\[^\\n\\]*DIE\" 1 } }\n+#include \"template-params-12.H\"\n+/* We do NOT get a value or location for this one, because we've\n+   enabled strict DWARF 4, and it could only be emitted as a location,\n+   which is DWARF 5 only for template value params.  */\n+template void t<&S::f>();"}, {"sha": "f79fa849c65bb66e13d658b86bb88b09600d7d29", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/template-params-12u.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aaf799b005461231d75f0889e3c78bd9b35eed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-12u.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aaf799b005461231d75f0889e3c78bd9b35eed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-12u.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-12u.C?ref=8aaf799b005461231d75f0889e3c78bd9b35eed9", "patch": "@@ -0,0 +1,7 @@\n+// { dg-options \"-gdwarf-2 -dA\" }\n+// { dg-final { scan-assembler-times \"DIE \\\\(\\[^\\n\\]*\\\\) DW_TAG_template_value_param\" 1 } }\n+// { dg-final { scan-assembler-times \"DIE \\\\(\\[^\\n\\]*\\\\) DW_TAG_template_value_param\\[^\\n\\]*\\n\\[^\\n\\]* DW_AT_name\\n\\[^\\n\\]* DW_AT_type\\n\\[^\\n\\]* \\[^\\n\\]*DIE\" 1 } }\n+#include \"template-params-12.H\"\n+/* We do NOT get a value or location for this one, because it would\n+   require a relocation to an undefined symbol in a debug section.  */\n+template void t<&S::u>();"}, {"sha": "11aabae854dec11e5cdb0a779777f2f0957204b6", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/template-params-12v.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aaf799b005461231d75f0889e3c78bd9b35eed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-12v.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aaf799b005461231d75f0889e3c78bd9b35eed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-12v.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-12v.C?ref=8aaf799b005461231d75f0889e3c78bd9b35eed9", "patch": "@@ -0,0 +1,6 @@\n+// { dg-options \"-gdwarf-2 -dA\" }\n+// { dg-final { scan-assembler-times \"DIE \\\\(\\[^\\n\\]*\\\\) DW_TAG_template_value_param\" 1 } }\n+// { dg-final { scan-assembler-times \"DIE \\\\(\\[^\\n\\]*\\\\) DW_TAG_template_value_param\\[^\\n\\]*\\n\\[^\\n\\]* DW_AT_name\\n\\[^\\n\\]* DW_AT_type\\n\\[^\\n\\]* DW_AT_const_value\" 1 } }\n+#include \"template-params-12.H\"\n+/* We get const_value for pointers to virtual member functions.  */\n+template void t<&S::v>();"}, {"sha": "11aabae854dec11e5cdb0a779777f2f0957204b6", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/template-params-12w.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aaf799b005461231d75f0889e3c78bd9b35eed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-12w.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aaf799b005461231d75f0889e3c78bd9b35eed9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-12w.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Ftemplate-params-12w.C?ref=8aaf799b005461231d75f0889e3c78bd9b35eed9", "patch": "@@ -0,0 +1,6 @@\n+// { dg-options \"-gdwarf-2 -dA\" }\n+// { dg-final { scan-assembler-times \"DIE \\\\(\\[^\\n\\]*\\\\) DW_TAG_template_value_param\" 1 } }\n+// { dg-final { scan-assembler-times \"DIE \\\\(\\[^\\n\\]*\\\\) DW_TAG_template_value_param\\[^\\n\\]*\\n\\[^\\n\\]* DW_AT_name\\n\\[^\\n\\]* DW_AT_type\\n\\[^\\n\\]* DW_AT_const_value\" 1 } }\n+#include \"template-params-12.H\"\n+/* We get const_value for pointers to virtual member functions.  */\n+template void t<&S::v>();"}]}