{"sha": "403e54f013d0186db61adbc5cfee6ed08f35bfe6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAzZTU0ZjAxM2QwMTg2ZGI2MWFkYmM1Y2ZlZTZlZDA4ZjM1YmZlNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-01-13T11:31:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-01-13T11:31:49Z"}, "message": "builtins.c (expand_builtin_sincos): New function.\n\n2006-01-13  Richard Guenther  <rguenther@suse.de>\n\n\t* builtins.c (expand_builtin_sincos): New function.\n\t(expand_builtin_mathfn_3): Remove dead code, sin and cos\n\tdo not set errno.\n\t(expand_builtin): Expand sincos using expand_builtin_sincos.\n\n\t* gcc.target/i386/387-9.c: New testcase.\n\nFrom-SVN: r109664", "tree": {"sha": "b8b96c69d5797b33eed925faa0af9382e3fc6fb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8b96c69d5797b33eed925faa0af9382e3fc6fb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/403e54f013d0186db61adbc5cfee6ed08f35bfe6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/403e54f013d0186db61adbc5cfee6ed08f35bfe6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/403e54f013d0186db61adbc5cfee6ed08f35bfe6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/403e54f013d0186db61adbc5cfee6ed08f35bfe6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "90922b2d107a5f1c32b5c34f3b36aefe02c33a01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90922b2d107a5f1c32b5c34f3b36aefe02c33a01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90922b2d107a5f1c32b5c34f3b36aefe02c33a01"}], "stats": {"total": 112, "additions": 105, "deletions": 7}, "files": [{"sha": "29510559ded9a944ea4589899b08eb3523764a57", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/403e54f013d0186db61adbc5cfee6ed08f35bfe6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/403e54f013d0186db61adbc5cfee6ed08f35bfe6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=403e54f013d0186db61adbc5cfee6ed08f35bfe6", "patch": "@@ -1,3 +1,10 @@\n+2006-01-13  Richard Guenther  <rguenther@suse.de>\n+\n+\t* builtins.c (expand_builtin_sincos): New function.\n+\t(expand_builtin_mathfn_3): Remove dead code, sin and cos\n+\tdo not set errno.\n+\t(expand_builtin): Expand sincos using expand_builtin_sincos.\n+\n 2006-01-12  DJ Delorie  <dj@redhat.com>\n \n \t* config/m32c/shift.md: Rewrite: Allow arbitrary operands for"}, {"sha": "657f38b7e220c8451e254e963384899b89782bcc", "filename": "gcc/builtins.c", "status": "modified", "additions": 58, "deletions": 7, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/403e54f013d0186db61adbc5cfee6ed08f35bfe6/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/403e54f013d0186db61adbc5cfee6ed08f35bfe6/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=403e54f013d0186db61adbc5cfee6ed08f35bfe6", "patch": "@@ -95,6 +95,7 @@ static void expand_errno_check (tree, rtx);\n static rtx expand_builtin_mathfn (tree, rtx, rtx);\n static rtx expand_builtin_mathfn_2 (tree, rtx, rtx);\n static rtx expand_builtin_mathfn_3 (tree, rtx, rtx);\n+static rtx expand_builtin_sincos (tree);\n static rtx expand_builtin_int_roundingfn (tree, rtx, rtx);\n static rtx expand_builtin_args_info (tree);\n static rtx expand_builtin_next_arg (void);\n@@ -2064,7 +2065,6 @@ expand_builtin_mathfn_3 (tree exp, rtx target, rtx subtarget)\n   tree fndecl = get_callee_fndecl (exp);\n   tree arglist = TREE_OPERAND (exp, 1);\n   enum machine_mode mode;\n-  bool errno_set = false;\n   tree arg, narg;\n \n   if (!validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n@@ -2084,9 +2084,6 @@ expand_builtin_mathfn_3 (tree exp, rtx target, rtx subtarget)\n   /* Make a suitable register to place result in.  */\n   mode = TYPE_MODE (TREE_TYPE (exp));\n \n-  if (! flag_errno_math || ! HONOR_NANS (mode))\n-    errno_set = false;\n-\n   /* Check if sincos insn is available, otherwise fallback\n      to sin or cos insn.  */\n   if (builtin_optab->handlers[(int) mode].insn_code == CODE_FOR_nothing) {\n@@ -2147,9 +2144,6 @@ expand_builtin_mathfn_3 (tree exp, rtx target, rtx subtarget)\n \n       if (target != 0)\n \t{\n-\t  if (errno_set)\n-\t    expand_errno_check (exp, target);\n-\n \t  /* Output the entire sequence.  */\n \t  insns = get_insns ();\n \t  end_sequence ();\n@@ -2168,6 +2162,55 @@ expand_builtin_mathfn_3 (tree exp, rtx target, rtx subtarget)\n   return target;\n }\n \n+/* Expand a call to the builtin sincos math function.\n+   Return 0 if a normal call should be emitted rather than expanding the\n+   function in-line.  EXP is the expression that is a call to the builtin\n+   function.  */\n+\n+static rtx\n+expand_builtin_sincos (tree exp)\n+{\n+  rtx op0, op1, op2, target1, target2;\n+  tree arglist = TREE_OPERAND (exp, 1);\n+  enum machine_mode mode;\n+  tree arg, sinp, cosp;\n+  int result;\n+\n+  if (!validate_arglist (arglist, REAL_TYPE,\n+\t\t\t POINTER_TYPE, POINTER_TYPE, VOID_TYPE))\n+    return 0;\n+\n+  arg = TREE_VALUE (arglist);\n+  sinp = TREE_VALUE (TREE_CHAIN (arglist));\n+  cosp = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n+\n+  /* Make a suitable register to place result in.  */\n+  mode = TYPE_MODE (TREE_TYPE (arg));\n+\n+  /* Check if sincos insn is available, otherwise emit the call.  */\n+  if (sincos_optab->handlers[(int) mode].insn_code == CODE_FOR_nothing)\n+    return NULL_RTX;\n+\n+  target1 = gen_reg_rtx (mode);\n+  target2 = gen_reg_rtx (mode);\n+\n+  op0 = expand_expr (arg, NULL_RTX, VOIDmode, 0);\n+  op1 = expand_expr (build_fold_indirect_ref (sinp), NULL_RTX, VOIDmode, 0);\n+  op2 = expand_expr (build_fold_indirect_ref (cosp), NULL_RTX, VOIDmode, 0);\n+\n+  /* Compute into target1 and target2.\n+     Set TARGET to wherever the result comes back.  */\n+  result = expand_twoval_unop (sincos_optab, op0, target2, target1, 0);\n+  gcc_assert (result);\n+\n+  /* Move target1 and target2 to the memory locations indicated\n+     by op1 and op2.  */\n+  emit_move_insn (op1, target1);\n+  emit_move_insn (op2, target2);\n+\n+  return const0_rtx;\n+}\n+\n /* Expand a call to one of the builtin rounding functions (lfloor).\n    If expanding via optab fails, lower expression to (int)(floor(x)).\n    EXP is the expression that is a call to the builtin function;\n@@ -5649,6 +5692,14 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \treturn target;\n       break;\n \n+    CASE_FLT_FN (BUILT_IN_SINCOS):\n+      if (! flag_unsafe_math_optimizations)\n+\tbreak;\n+      target = expand_builtin_sincos (exp);\n+      if (target)\n+\treturn target;\n+      break;\n+\n     case BUILT_IN_APPLY_ARGS:\n       return expand_builtin_apply_args ();\n "}, {"sha": "e1cbca66b14a429e38b20a3a2037cec51c6d3a47", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/403e54f013d0186db61adbc5cfee6ed08f35bfe6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/403e54f013d0186db61adbc5cfee6ed08f35bfe6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=403e54f013d0186db61adbc5cfee6ed08f35bfe6", "patch": "@@ -1,3 +1,7 @@\n+2006-01-13  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.target/i386/387-9.c: New testcase.\n+\n 2006-01-12  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/24824"}, {"sha": "f04faa54b014af046ba00c1c636bb2999c3eb52a", "filename": "gcc/testsuite/gcc.target/i386/387-9.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/403e54f013d0186db61adbc5cfee6ed08f35bfe6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/403e54f013d0186db61adbc5cfee6ed08f35bfe6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-9.c?ref=403e54f013d0186db61adbc5cfee6ed08f35bfe6", "patch": "@@ -0,0 +1,36 @@\n+/* Verify that 387 fsincos instruction is generated.  */\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O -funsafe-math-optimizations -march=i686\" } */\n+\n+extern double sin (double);\n+extern double cos (double);\n+extern void sincos (double, double *, double *);\n+\n+double f1(double x)\n+{\n+  double s, c;\n+  sincos (x, &s, &c);\n+  return s + c;\n+}\n+\n+double f2(double x)\n+{\n+  double s, c, tmp;\n+  sincos (x, &s, &tmp);\n+  c = cos (x);\n+  return s + c;\n+}\n+\n+double f3(double x)\n+{\n+  double s, c, tmp;\n+  sincos (x, &tmp, &c);\n+  s = sin (x);\n+  return s + c;\n+}\n+\n+/* { dg-final { scan-assembler \"fsincos\" } } */\n+/* { dg-final { scan-assembler-not \"fsin \" } } */\n+/* { dg-final { scan-assembler-not \"fcos\" } } */\n+/* { dg-final { scan-assembler-not \"call\" } } */"}]}