{"sha": "4a51756a8c5536d6f7b9718d7eea39147fcd24d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE1MTc1NmE4YzU1MzZkNmY3Yjk3MThkN2VlYTM5MTQ3ZmNkMjRkMg==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2019-07-03T08:13:29Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-03T08:13:29Z"}, "message": "[Ada] Exp_Attr: remove dead code\n\n2019-07-03  Javier Miranda  <miranda@adacore.com>\n\ngcc/ada/\n\n\t* exp_attr.adb (Expand_Min_Max_Attribute): Code cleanup:\n\tremoving code that it is now never executed in the CCG compiler\n\t(dead code).\n\nFrom-SVN: r272959", "tree": {"sha": "021471b59f53d56c3648ee52d27be1cb36ecc3aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/021471b59f53d56c3648ee52d27be1cb36ecc3aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a51756a8c5536d6f7b9718d7eea39147fcd24d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a51756a8c5536d6f7b9718d7eea39147fcd24d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a51756a8c5536d6f7b9718d7eea39147fcd24d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a51756a8c5536d6f7b9718d7eea39147fcd24d2/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2f6bb511d1003d31ec1213081b6c2514cc10f0f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f6bb511d1003d31ec1213081b6c2514cc10f0f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f6bb511d1003d31ec1213081b6c2514cc10f0f9"}], "stats": {"total": 109, "additions": 6, "deletions": 103}, "files": [{"sha": "67540115479d9cbeb220625fd79d2b98087c8d5b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a51756a8c5536d6f7b9718d7eea39147fcd24d2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a51756a8c5536d6f7b9718d7eea39147fcd24d2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4a51756a8c5536d6f7b9718d7eea39147fcd24d2", "patch": "@@ -1,3 +1,9 @@\n+2019-07-03  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_attr.adb (Expand_Min_Max_Attribute): Code cleanup:\n+\tremoving code that it is now never executed in the CCG compiler\n+\t(dead code).\n+\n 2019-07-02  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* libgnat/system-darwin-ppc.ads: Set Stack_Check_Probes True for"}, {"sha": "1e1b2f967dbd1963e6b5350aa013028774bae60e", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 0, "deletions": 103, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a51756a8c5536d6f7b9718d7eea39147fcd24d2/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a51756a8c5536d6f7b9718d7eea39147fcd24d2/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=4a51756a8c5536d6f7b9718d7eea39147fcd24d2", "patch": "@@ -1693,109 +1693,6 @@ package body Exp_Attr is\n       --  generate conditionals in the code, so check the relevant restriction.\n \n       Check_Restriction (No_Implicit_Conditionals, N);\n-\n-      --  In Modify_Tree_For_C mode, we rewrite as an if expression (unless it\n-      --  is supported).\n-\n-      if Modify_Tree_For_C\n-        and then not Is_Integer_Type (Etype (N))\n-        and then not Is_Enumeration_Type (Etype (N))\n-        and then not Is_Fixed_Point_Type (Etype (N))\n-        and then not Is_Floating_Point_Type (Etype (N))\n-      then\n-         declare\n-            Loc   : constant Source_Ptr := Sloc (N);\n-            Typ   : constant Entity_Id  := Etype (N);\n-            Expr  : constant Node_Id    := First (Expressions (N));\n-            Left  : constant Node_Id    := Relocate_Node (Expr);\n-            Right : constant Node_Id    := Relocate_Node (Next (Expr));\n-\n-            function Make_Compare (Left, Right : Node_Id) return Node_Id;\n-            --  Returns Left >= Right for Max, Left <= Right for Min\n-\n-            ------------------\n-            -- Make_Compare --\n-            ------------------\n-\n-            function Make_Compare (Left, Right : Node_Id) return Node_Id is\n-            begin\n-               if Attribute_Name (N) = Name_Max then\n-                  return\n-                    Make_Op_Ge (Loc,\n-                      Left_Opnd  => Left,\n-                      Right_Opnd => Right);\n-               else\n-                  return\n-                    Make_Op_Le (Loc,\n-                      Left_Opnd  => Left,\n-                      Right_Opnd => Right);\n-               end if;\n-            end Make_Compare;\n-\n-         --  Start of processing for Min_Max\n-\n-         begin\n-            --  If both Left and Right are side effect free, then we can just\n-            --  use Duplicate_Expr to duplicate the references and return\n-\n-            --    (if Left >=|<= Right then Left else Right)\n-\n-            if Side_Effect_Free (Left) and then Side_Effect_Free (Right) then\n-               Rewrite (N,\n-                 Make_If_Expression (Loc,\n-                   Expressions => New_List (\n-                     Make_Compare (Left, Right),\n-                     Duplicate_Subexpr_No_Checks (Left),\n-                     Duplicate_Subexpr_No_Checks (Right))));\n-\n-            --  Otherwise we generate declarations to capture the values.\n-\n-            --  The translation is\n-\n-            --    do\n-            --      T1 : constant typ := Left;\n-            --      T2 : constant typ := Right;\n-            --    in\n-            --      (if T1 >=|<= T2 then T1 else T2)\n-            --    end;\n-\n-            else\n-               declare\n-                  T1 : constant Entity_Id := Make_Temporary (Loc, 'T', Left);\n-                  T2 : constant Entity_Id := Make_Temporary (Loc, 'T', Right);\n-\n-               begin\n-                  Rewrite (N,\n-                    Make_Expression_With_Actions (Loc,\n-                      Actions    => New_List (\n-                        Make_Object_Declaration (Loc,\n-                          Defining_Identifier => T1,\n-                          Constant_Present    => True,\n-                          Object_Definition   =>\n-                            New_Occurrence_Of (Etype (Left), Loc),\n-                          Expression          => Relocate_Node (Left)),\n-\n-                        Make_Object_Declaration (Loc,\n-                          Defining_Identifier => T2,\n-                          Constant_Present    => True,\n-                          Object_Definition   =>\n-                            New_Occurrence_Of (Etype (Right), Loc),\n-                          Expression          => Relocate_Node (Right))),\n-\n-                      Expression =>\n-                        Make_If_Expression (Loc,\n-                          Expressions => New_List (\n-                            Make_Compare\n-                              (New_Occurrence_Of (T1, Loc),\n-                               New_Occurrence_Of (T2, Loc)),\n-                               New_Occurrence_Of (T1, Loc),\n-                               New_Occurrence_Of (T2, Loc)))));\n-               end;\n-            end if;\n-\n-            Analyze_And_Resolve (N, Typ);\n-         end;\n-      end if;\n    end Expand_Min_Max_Attribute;\n \n    ----------------------------------"}]}