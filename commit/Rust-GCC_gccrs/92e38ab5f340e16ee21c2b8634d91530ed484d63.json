{"sha": "92e38ab5f340e16ee21c2b8634d91530ed484d63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJlMzhhYjVmMzQwZTE2ZWUyMWMyYjg2MzRkOTE1MzBlZDQ4NGQ2Mw==", "commit": {"author": {"name": "Craig Burley", "email": "craig@jcb-sc.com", "date": "1999-05-01T22:32:23Z"}, "committer": {"name": "Craig Burley", "email": "burley@gcc.gnu.org", "date": "1999-05-01T22:32:23Z"}, "message": "allow slop in sum-checking\n\nFrom-SVN: r26718", "tree": {"sha": "1314751da5e37918fc2e80fc88a2a7108ab939ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1314751da5e37918fc2e80fc88a2a7108ab939ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92e38ab5f340e16ee21c2b8634d91530ed484d63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92e38ab5f340e16ee21c2b8634d91530ed484d63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92e38ab5f340e16ee21c2b8634d91530ed484d63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92e38ab5f340e16ee21c2b8634d91530ed484d63/comments", "author": null, "committer": null, "parents": [{"sha": "0bfc6dd22fb6e5fca8558563da146b5fe738f48a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bfc6dd22fb6e5fca8558563da146b5fe738f48a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bfc6dd22fb6e5fca8558563da146b5fe738f48a"}], "stats": {"total": 94, "additions": 58, "deletions": 36}, "files": [{"sha": "b71d2ba8b9a943c0bc413dbe6ee7d4827c06b504", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e38ab5f340e16ee21c2b8634d91530ed484d63/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e38ab5f340e16ee21c2b8634d91530ed484d63/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=92e38ab5f340e16ee21c2b8634d91530ed484d63", "patch": "@@ -1,3 +1,11 @@\n+Sat May  1 23:57:18 1999  Craig Burley  <craig@jcb-sc.com>\n+\n+\t* g77.f-torture/execute/u77-test.f: Generalize sum-checking to\n+\tuse a new function, which allows for some slop.\n+\tClean up some commentary.\n+\t(issum): The new function.\n+\t(sgladd): Deleted subroutine.\n+\n 1999-05-01  Craig Burley  <craig@jcb-sc.com>\n \n \t* g77.f-torture/execute/u77-test.f: Modify to be more like"}, {"sha": "535d04ecce8ac12002ec9c128a67cfef9c5e4161", "filename": "gcc/testsuite/g77.f-torture/execute/u77-test.f", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e38ab5f340e16ee21c2b8634d91530ed484d63/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fu77-test.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e38ab5f340e16ee21c2b8634d91530ed484d63/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fu77-test.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fu77-test.f?ref=92e38ab5f340e16ee21c2b8634d91530ed484d63", "patch": "@@ -18,7 +18,8 @@\n \n       integer i, j, k, ltarray (9), idat (3), count, rate, count_max,\n      +     pid, mask\n-      real tarray1(2), tarray2(2), r1, r2, sum\n+      real tarray1(2), tarray2(2), r1, r2\n+      logical issum\n       intrinsic getpid, getuid, getgid, ierrno, gerror,\n      +     fnum, isatty, getarg, access, unlink, fstat,\n      +     stat, lstat, getcwd, gmtime, etime, chmod,\n@@ -99,14 +100,12 @@\n      +       r1, r2\n         call doabort\n       end if\n-      call sgladd (sum, tarray1(1), tarray1(2))\n-      if (r1 .ne. sum) then\n+      if (.not. issum (r1, tarray1(1), tarray1(2))) then\n         write (6,*) '*** ETIME didn''t return sum of the array: ',\n      +       r1, ' /= ', tarray1(1), '+', tarray1(2)\n         call doabort\n       end if\n-      call sgladd (sum, tarray2(1), tarray2(2))\n-      if (r2 .ne. sum) then\n+      if (.not. issum (r2, tarray2(1), tarray2(2))) then\n         write (6,*) '*** DTIME didn''t return sum of the array: ',\n      +       r2, ' /= ', tarray2(1), '+', tarray2(2)\n         call doabort\n@@ -124,14 +123,12 @@\n       if (tarray2(1) .ne. 0. .or. tarray2(2) .ne. 0.) exit\n       end do\n       r1 = etime (tarray1)\n-      call sgladd (sum, tarray1(1), tarray1(2))\n-      if (r1 .ne. sum) then\n+      if (.not. issum (r1, tarray1(1), tarray1(2))) then\n         write (6,*) '*** ETIME didn''t return sum of the array: ',\n      +       r1, ' /= ', tarray1(1), '+', tarray1(2)\n         call doabort\n       end if\n-      call sgladd (sum, tarray2(1), tarray2(2))\n-      if (r2 .ne. sum) then\n+      if (.not. issum (r2, tarray2(1), tarray2(2))) then\n         write (6,*) '*** DTIME didn''t return sum of the array: ',\n      +       r2, ' /= ', tarray2(1), '+', tarray2(2)\n         call doabort\n@@ -280,33 +277,39 @@\n       CALL EXIT(0)\n  99   END\n \n+* Return length of STR not including trailing blanks, but always > 0.\n       integer function lenstr (str)\n-C     return length of STR not including trailing blanks, but always\n-C     return >0\n-      character *(*) str\n+      character*(*) str\n       if (str.eq.' ') then\n         lenstr=1\n       else\n         lenstr = lnblnk (str)\n       end if\n       end\n-* just make sure SECOND() doesn't \"magically\" work the second time.\n+\n+* Just make sure SECOND() doesn't \"magically\" work the second time.\n       subroutine dumdum(r)\n       r = 3.14159\n       end\n-* do an add that is most likely to be done in single precision.\n-      subroutine sgladd(sum,left,right)\n+\n+* Test whether sum is approximately left+right.\n+      logical function issum (sum, left, right)\n       implicit none\n-      real sum,left,right\n-      sum = left+right\n+      real sum, left, right\n+      real mysum, delta, width\n+      mysum = left + right\n+      delta = abs (mysum - sum)\n+      width = abs (left) + abs (right)\n+      issum = (delta .le. .0001 * width)\n       end\n \n-*     signal handler\n+* Signal handler\n       subroutine ctrlc\n       print *, 'Got ^C'\n       call doabort\n       end\n \n+* A problem has been noticed, so maybe abort the test.\n       subroutine doabort\n * For this version, call the ABORT intrinsic.\n       intrinsic abort"}, {"sha": "180ba1485a164bdfd1ffaf6530000992ae065ff6", "filename": "libf2c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e38ab5f340e16ee21c2b8634d91530ed484d63/libf2c%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e38ab5f340e16ee21c2b8634d91530ed484d63/libf2c%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FChangeLog?ref=92e38ab5f340e16ee21c2b8634d91530ed484d63", "patch": "@@ -1,3 +1,11 @@\n+Sat May  1 23:57:18 1999  Craig Burley  <craig@jcb-sc.com>\n+\n+\t* libU77/u77-test.f: Generalize sum-checking to\n+\tuse a new function, which allows for some slop.\n+\tClean up some commentary.\n+\t(issum): The new function.\n+\t(sgladd): Deleted subroutine.\n+\n Sat May  1 23:35:18 1999  Craig Burley  <craig@jcb-sc.com>\n \n \t* libU77/u77-test.f: Modify to be more like testsuite"}, {"sha": "50ae41d6b7e10f0077cc6b1cc31f5eea12398830", "filename": "libf2c/libU77/u77-test.f", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e38ab5f340e16ee21c2b8634d91530ed484d63/libf2c%2FlibU77%2Fu77-test.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e38ab5f340e16ee21c2b8634d91530ed484d63/libf2c%2FlibU77%2Fu77-test.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fu77-test.f?ref=92e38ab5f340e16ee21c2b8634d91530ed484d63", "patch": "@@ -21,7 +21,8 @@\n \n       integer i, j, k, ltarray (9), idat (3), count, rate, count_max,\n      +     pid, mask\n-      real tarray1(2), tarray2(2), r1, r2, sum\n+      real tarray1(2), tarray2(2), r1, r2\n+      logical issum\n       intrinsic getpid, getuid, getgid, ierrno, gerror,\n      +     fnum, isatty, getarg, access, unlink, fstat,\n      +     stat, lstat, getcwd, gmtime, etime, chmod,\n@@ -102,14 +103,12 @@\n      +       r1, r2\n         call doabort\n       end if\n-      call sgladd (sum, tarray1(1), tarray1(2))\n-      if (r1 .ne. sum) then\n+      if (.not. issum (r1, tarray1(1), tarray1(2))) then\n         write (6,*) '*** ETIME didn''t return sum of the array: ',\n      +       r1, ' /= ', tarray1(1), '+', tarray1(2)\n         call doabort\n       end if\n-      call sgladd (sum, tarray2(1), tarray2(2))\n-      if (r2 .ne. sum) then\n+      if (.not. issum (r2, tarray2(1), tarray2(2))) then\n         write (6,*) '*** DTIME didn''t return sum of the array: ',\n      +       r2, ' /= ', tarray2(1), '+', tarray2(2)\n         call doabort\n@@ -127,14 +126,12 @@\n       if (tarray2(1) .ne. 0. .or. tarray2(2) .ne. 0.) exit\n       end do\n       r1 = etime (tarray1)\n-      call sgladd (sum, tarray1(1), tarray1(2))\n-      if (r1 .ne. sum) then\n+      if (.not. issum (r1, tarray1(1), tarray1(2))) then\n         write (6,*) '*** ETIME didn''t return sum of the array: ',\n      +       r1, ' /= ', tarray1(1), '+', tarray1(2)\n         call doabort\n       end if\n-      call sgladd (sum, tarray2(1), tarray2(2))\n-      if (r2 .ne. sum) then\n+      if (.not. issum (r2, tarray2(1), tarray2(2))) then\n         write (6,*) '*** DTIME didn''t return sum of the array: ',\n      +       r2, ' /= ', tarray2(1), '+', tarray2(2)\n         call doabort\n@@ -283,33 +280,39 @@\n       CALL EXIT(1)\n  99   END\n \n+* Return length of STR not including trailing blanks, but always > 0.\n       integer function lenstr (str)\n-C     return length of STR not including trailing blanks, but always\n-C     return >0\n-      character *(*) str\n+      character*(*) str\n       if (str.eq.' ') then\n         lenstr=1\n       else\n         lenstr = lnblnk (str)\n       end if\n       end\n-* just make sure SECOND() doesn't \"magically\" work the second time.\n+\n+* Just make sure SECOND() doesn't \"magically\" work the second time.\n       subroutine dumdum(r)\n       r = 3.14159\n       end\n-* do an add that is most likely to be done in single precision.\n-      subroutine sgladd(sum,left,right)\n+\n+* Test whether sum is approximately left+right.\n+      logical function issum (sum, left, right)\n       implicit none\n-      real sum,left,right\n-      sum = left+right\n+      real sum, left, right\n+      real mysum, delta, width\n+      mysum = left + right\n+      delta = abs (mysum - sum)\n+      width = abs (left) + abs (right)\n+      issum = (delta .le. .0001 * width)\n       end\n \n-*     signal handler\n+* Signal handler\n       subroutine ctrlc\n       print *, 'Got ^C'\n       call doabort\n       end\n \n+* A problem has been noticed, so maybe abort the test.\n       subroutine doabort\n * For this version, print out all problems noticed.\n *     intrinsic abort"}]}