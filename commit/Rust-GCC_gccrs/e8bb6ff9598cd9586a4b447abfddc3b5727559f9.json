{"sha": "e8bb6ff9598cd9586a4b447abfddc3b5727559f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThiYjZmZjk1OThjZDk1ODZhNGI0NDdhYmZkZGMzYjU3Mjc1NTlmOQ==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2020-04-08T21:01:13Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-16T13:07:17Z"}, "message": "[Ada] Minor casing of \" The \" after a comma in docs and comments\n\n2020-06-16  Piotr Trojanek  <trojanek@adacore.com>\n\ngcc/ada/\n\n\t* checks.adb, doc/gnat_ugn/the_gnat_compilation_model.rst,\n\teinfo.ads, exp_ch5.adb, exp_ch7.adb, lib-xref.ads,\n\tlibgnat/g-spitbo.ads, make.adb, sem_aux.adb, sem_ch3.adb,\n\tsem_ch4.adb, sem_ch5.adb, urealp.adb: Fix wrong casing.\n\t* gnat_ugn.texi: Regenerate.", "tree": {"sha": "788f0d2a0823bd528c13f6a84fbb0ba8e9f5c93a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/788f0d2a0823bd528c13f6a84fbb0ba8e9f5c93a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8bb6ff9598cd9586a4b447abfddc3b5727559f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8bb6ff9598cd9586a4b447abfddc3b5727559f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8bb6ff9598cd9586a4b447abfddc3b5727559f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1447c2a842b4954ed57d0b17f43959003dedd01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1447c2a842b4954ed57d0b17f43959003dedd01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1447c2a842b4954ed57d0b17f43959003dedd01"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "52cf61f5d7d12d7f168ebcfb7b5c65e5c344fcb8", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=e8bb6ff9598cd9586a4b447abfddc3b5727559f9", "patch": "@@ -1960,7 +1960,7 @@ package body Checks is\n    --      (1)  The bounds may not be known at compile time\n    --      (2)  The check must take into account rounding or truncation.\n    --      (3)  The range of type I may not be exactly representable in F.\n-   --      (4)  For the rounding case, The end-points I'First - 0.5 and\n+   --      (4)  For the rounding case, the end-points I'First - 0.5 and\n    --           I'Last + 0.5 may or may not be in range, depending on the\n    --           sign of  I'First and I'Last.\n    --      (5)  X may be a NaN, which will fail any comparison"}, {"sha": "b8729d08a06c642808447a6fd583c3bf74acbdc6", "filename": "gcc/ada/doc/gnat_ugn/the_gnat_compilation_model.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst?ref=e8bb6ff9598cd9586a4b447abfddc3b5727559f9", "patch": "@@ -3950,7 +3950,7 @@ The following example, provided as part of the GNAT examples, shows how\n to achieve procedural interfacing between Ada and C++ in both\n directions. The C++ class A has two methods. The first method is exported\n to Ada by the means of an extern C wrapper function. The second method\n-calls an Ada subprogram. On the Ada side, The C++ calls are modelled by\n+calls an Ada subprogram. On the Ada side, the C++ calls are modelled by\n a limited record with a layout comparable to the C++ class. The Ada\n subprogram, in turn, calls the C++ method. So, starting from the C++\n main program, the process passes back and forth between the two"}, {"sha": "ba15d489a0cf84ea1f617d4a9555e6aee9834332", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=e8bb6ff9598cd9586a4b447abfddc3b5727559f9", "patch": "@@ -538,7 +538,7 @@ package Einfo is\n --    Block_Node (Node11)\n --       Defined in block entities. Points to the identifier in the\n --       Block_Statement itself. Used when retrieving the block construct\n---       for finalization purposes, The block entity has an implicit label\n+--       for finalization purposes, the block entity has an implicit label\n --       declaration in the enclosing declarative part, and has otherwise\n --       no direct connection in the tree with the block statement. The\n --       link is to the identifier (which is an occurrence of the entity)"}, {"sha": "458b54503a248eaf531c3c58b397bc01d9bb0663", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=e8bb6ff9598cd9586a4b447abfddc3b5727559f9", "patch": "@@ -3892,8 +3892,6 @@ package body Exp_Ch5 is\n       Ind_Comp   : Node_Id;\n       Iterator   : Entity_Id;\n \n-   --  Start of processing for Expand_Iterator_Loop_Over_Array\n-\n    begin\n       --  for Element of Array loop\n "}, {"sha": "6dfecac1f70f12ec9544b3b51d21fd8422f781e8", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=e8bb6ff9598cd9586a4b447abfddc3b5727559f9", "patch": "@@ -368,7 +368,7 @@ package body Exp_Ch7 is\n    --  Mode such subprograms must be handled as nested inside the (implicit)\n    --  elaboration procedure that executes that statement part. To handle\n    --  properly uplevel references we construct that subprogram explicitly,\n-   --  to contain blocks and inner subprograms, The statement part becomes\n+   --  to contain blocks and inner subprograms, the statement part becomes\n    --  a call to this subprogram. This is only done if blocks are present\n    --  in the statement list of the body. (It would be nice to unify this\n    --  procedure with Check_Unnesting_In_Decls_Or_Stmts, if possible, since"}, {"sha": "669199aefcec9907dc797832d6d3b876dd59e5ed", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=e8bb6ff9598cd9586a4b447abfddc3b5727559f9", "patch": "@@ -6034,7 +6034,7 @@ The following example, provided as part of the GNAT examples, shows how\n to achieve procedural interfacing between Ada and C++ in both\n directions. The C++ class A has two methods. The first method is exported\n to Ada by the means of an extern C wrapper function. The second method\n-calls an Ada subprogram. On the Ada side, The C++ calls are modelled by\n+calls an Ada subprogram. On the Ada side, the C++ calls are modelled by\n a limited record with a layout comparable to the C++ class. The Ada\n subprogram, in turn, calls the C++ method. So, starting from the C++\n main program, the process passes back and forth between the two"}, {"sha": "cb1e57ccaf3732c69915738952b080a93e9ba4a0", "filename": "gcc/ada/lib-xref.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Flib-xref.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Flib-xref.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.ads?ref=e8bb6ff9598cd9586a4b447abfddc3b5727559f9", "patch": "@@ -592,7 +592,7 @@ package Lib.Xref is\n \n    --  What we do in such cases is to gather nodes, where we would have liked\n    --  to call Generate_Reference but we couldn't because we didn't know enough\n-   --  into this table, Then we deal with generating references later on when\n+   --  into this table, then we deal with generating references later on when\n    --  we have sufficient information to do it right.\n \n    type Deferred_Reference_Entry is record"}, {"sha": "29a0606168c673fe951f458bbaf69c6f65c4ca53", "filename": "gcc/ada/libgnat/g-spitbo.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Flibgnat%2Fg-spitbo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Flibgnat%2Fg-spitbo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-spitbo.ads?ref=e8bb6ff9598cd9586a4b447abfddc3b5727559f9", "patch": "@@ -126,7 +126,7 @@ package GNAT.Spitbol is\n       Len : Natural;\n       Pad : Character := ' ') return VString;\n    --  If the length of Str is greater than or equal to Len, then Str is\n-   --  returned unchanged. Otherwise, The value returned is obtained by\n+   --  returned unchanged. Otherwise, the value returned is obtained by\n    --  concatenating Length (Str) - Len instances of the Pad character to\n    --  the left hand side.\n \n@@ -155,7 +155,7 @@ package GNAT.Spitbol is\n       Len : Natural;\n       Pad : Character := ' ') return VString;\n    --  If the length of Str is greater than or equal to Len, then Str is\n-   --  returned unchanged. Otherwise, The value returned is obtained by\n+   --  returned unchanged. Otherwise, the value returned is obtained by\n    --  concatenating Length (Str) - Len instances of the Pad character to\n    --  the right hand side.\n "}, {"sha": "0034d1ad052046b9556276c6945bc960739910ba", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=e8bb6ff9598cd9586a4b447abfddc3b5727559f9", "patch": "@@ -206,7 +206,7 @@ package body Make is\n \n    procedure Add_Library_Search_Dir (Path : String);\n    --  Call Add_Lib_Search_Dir with an absolute directory path. If Path is\n-   --  relative path,, it is relative to the current working directory.\n+   --  relative path, it is relative to the current working directory.\n \n    procedure Add_Source_Search_Dir (Path : String);\n    --  Call Add_Src_Search_Dir with an absolute directory path. If Path is a"}, {"sha": "509c6047d22b54186ca488f9de7167154ae21f61", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=e8bb6ff9598cd9586a4b447abfddc3b5727559f9", "patch": "@@ -344,8 +344,8 @@ package body Sem_Aux is\n       --  predefined integer types. If the type is formal, it is also a first\n       --  subtype, and its base type has no freeze node. On the other hand, a\n       --  subtype of a generic formal is not its own first subtype. Its base\n-      --  type, if anonymous, is attached to the formal type decl. from which\n-      --  the first subtype is obtained.\n+      --  type, if anonymous, is attached to the formal type declaration from\n+      --  which the first subtype is obtained.\n \n       if No (F) then\n          if B = Base_Type (Standard_Integer) then"}, {"sha": "facd57c4d24cdf0a2cbebf45018d33489e5baa2b", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=e8bb6ff9598cd9586a4b447abfddc3b5727559f9", "patch": "@@ -781,7 +781,7 @@ package body Sem_Ch3 is\n          --  be available in the scope that encloses the protected declaration.\n          --  Otherwise the type is in the scope enclosing the subprogram.\n \n-         --  If the function has formals, The return type of a subprogram\n+         --  If the function has formals, the return type of a subprogram\n          --  declaration is analyzed in the scope of the subprogram (see\n          --  Process_Formals) and thus the protected type, if present, is\n          --  the scope of the current function scope."}, {"sha": "92c5a7ac63616f42d5809f39b6973dfb6c9a305f", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=e8bb6ff9598cd9586a4b447abfddc3b5727559f9", "patch": "@@ -3279,7 +3279,7 @@ package body Sem_Ch4 is\n       --  When the type Address is a visible integer type, and the DEC\n       --  system extension is visible, the predefined operator may be\n       --  hidden as well, by one of the address operations in auxdec.\n-      --  Finally, The abstract operations on address do not hide the\n+      --  Finally, the abstract operations on address do not hide the\n       --  predefined operator (this is the purpose of making them abstract).\n \n       -----------------------------------"}, {"sha": "95ada066e716dc5995d8b02985eec2a0fd5fabe3", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=e8bb6ff9598cd9586a4b447abfddc3b5727559f9", "patch": "@@ -2241,7 +2241,7 @@ package body Sem_Ch5 is\n          begin\n \n             --  If the domain of iteration is an array component that depends\n-            --  on a discriminant, create actual subtype for it. preanalysis\n+            --  on a discriminant, create actual subtype for it. Preanalysis\n             --  does not generate the actual subtype of a selected component.\n \n             if Nkind (Iter_Name) = N_Selected_Component\n@@ -2456,7 +2456,7 @@ package body Sem_Ch5 is\n \n                Check_Subtype_Indication (Etype (Def_Id));\n \n-            --  For a predefined container, The type of the loop variable is\n+            --  For a predefined container, the type of the loop variable is\n             --  the Iterator_Element aspect of the container type.\n \n             else\n@@ -3885,7 +3885,7 @@ package body Sem_Ch5 is\n                   Enter_Name (Id);\n                end if;\n \n-               --  In an element iterator, The loop parameter is a variable if\n+               --  In an element iterator, the loop parameter is a variable if\n                --  the domain of iteration (container or array) is a variable.\n \n                if not Of_Present (I_Spec)"}, {"sha": "31151c5720ba32ffcdaf78cb887444a20643fc3b", "filename": "gcc/ada/urealp.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Furealp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8bb6ff9598cd9586a4b447abfddc3b5727559f9/gcc%2Fada%2Furealp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Furealp.adb?ref=e8bb6ff9598cd9586a4b447abfddc3b5727559f9", "patch": "@@ -109,13 +109,13 @@ package body Urealp is\n \n    function Decimal_Exponent_Hi (V : Ureal) return Int;\n    --  Returns an estimate of the exponent of Val represented as a normalized\n-   --  decimal number (non-zero digit before decimal point), The estimate is\n+   --  decimal number (non-zero digit before decimal point), the estimate is\n    --  either correct, or high, but never low. The accuracy of the estimate\n    --  affects only the efficiency of the comparison routines.\n \n    function Decimal_Exponent_Lo (V : Ureal) return Int;\n    --  Returns an estimate of the exponent of Val represented as a normalized\n-   --  decimal number (non-zero digit before decimal point), The estimate is\n+   --  decimal number (non-zero digit before decimal point), the estimate is\n    --  either correct, or low, but never high. The accuracy of the estimate\n    --  affects only the efficiency of the comparison routines.\n "}]}