{"sha": "81dd9fd79804a9114e7605dbd637ae5add4726a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFkZDlmZDc5ODA0YTkxMTRlNzYwNWRiZDYzN2FlNWFkZDQ3MjZhMw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2009-10-07T08:26:47Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2009-10-07T08:26:47Z"}, "message": "config.gcc: Don't include the makefile fragments intended for libgcc.\n\n2009-10-07  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* config.gcc: Don't include the makefile fragments intended for\n\tlibgcc.\n\t* config/s390/fixdfdi.h: File removed.\n\t* config/s390/libgcc-glibc.ver: File removed.\n\t* config/s390/s390.h: Remove the fixdfdi.h hack.\n\t* config/s390/t-crtstuff: File moved to libgcc dir.\n\t* config/s390/t-linux: Likewise.\n\t* config/s390/t-tpf: libgcc specific parts removed.\n\t* config/s390/t-linux64: Likewise.\n\n2009-10-07  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* config.host: Include the s390 makefile fragments.\n\t* config/s390/32/_fixdfdi.c: New file.\n\t* config/s390/32/_fixsfdi.c: New file.\n\t* config/s390/32/_fixtfdi.c: New file.\n\t* config/s390/32/_fixunsdfdi.c: New file.\n\t* config/s390/32/_fixunssfdi.c: New file.\n\t* config/s390/32/_fixunstfdi.c: New file.\n\t* config/s390/32/t-floattodi: New file.\n\t* config/s390/libgcc-glibc.ver: New file.\n\t* config/s390/t-crtstuff: New file.\n\t* config/s390/t-linux: New file.\n\t* config/s390/t-tpf: New file.\n\nFrom-SVN: r152515", "tree": {"sha": "9cdd83d5bc004f565fd5d2727f03c00d8ef92671", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cdd83d5bc004f565fd5d2727f03c00d8ef92671"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81dd9fd79804a9114e7605dbd637ae5add4726a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81dd9fd79804a9114e7605dbd637ae5add4726a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81dd9fd79804a9114e7605dbd637ae5add4726a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81dd9fd79804a9114e7605dbd637ae5add4726a3/comments", "author": null, "committer": null, "parents": [{"sha": "aeb94799d1eccce7fad688b15d80e1552257281a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeb94799d1eccce7fad688b15d80e1552257281a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeb94799d1eccce7fad688b15d80e1552257281a"}], "stats": {"total": 1117, "additions": 627, "deletions": 490}, "files": [{"sha": "eb905bb54fcbad0dd9344855624a4f9d7aec75fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dd9fd79804a9114e7605dbd637ae5add4726a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dd9fd79804a9114e7605dbd637ae5add4726a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=81dd9fd79804a9114e7605dbd637ae5add4726a3", "patch": "@@ -1,3 +1,15 @@\n+2009-10-07  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* config.gcc: Don't include the makefile fragments intended for\n+\tlibgcc.\n+\t* config/s390/fixdfdi.h: File removed.\n+\t* config/s390/libgcc-glibc.ver: File removed.\n+\t* config/s390/s390.h: Remove the fixdfdi.h hack.\n+\t* config/s390/t-crtstuff: File moved to libgcc dir.\n+\t* config/s390/t-linux: Likewise.\n+\t* config/s390/t-tpf: libgcc specific parts removed.\n+\t* config/s390/t-linux64: Likewise.\n+\n 2009-10-06  Jerry Quinn  <jlquinn@optonline.net>\n \n \t* Makefile.in (lto-wrapper): Use COMPILER and ALL_COMPILERFLAGS."}, {"sha": "8f794d4ef9e5b379945386a19dcf78df5d72856a", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dd9fd79804a9114e7605dbd637ae5add4726a3/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dd9fd79804a9114e7605dbd637ae5add4726a3/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=81dd9fd79804a9114e7605dbd637ae5add4726a3", "patch": "@@ -2079,15 +2079,14 @@ rs6000-ibm-aix[6789].* | powerpc-ibm-aix[6789].*)\n \t;;\n s390-*-linux*)\n \ttm_file=\"s390/s390.h dbxelf.h elfos.h svr4.h linux.h glibc-stdint.h s390/linux.h\"\n-\ttmake_file=\"${tmake_file} t-dfprules s390/t-crtstuff s390/t-linux\"\n \t;;\n s390x-*-linux*)\n \ttm_file=\"s390/s390x.h s390/s390.h dbxelf.h elfos.h svr4.h linux.h glibc-stdint.h s390/linux.h\"\n \ttm_p_file=s390/s390-protos.h\n \tmd_file=s390/s390.md\n \textra_modes=s390/s390-modes.def\n \tout_file=s390/s390.c\n-\ttmake_file=\"${tmake_file} t-dfprules s390/t-crtstuff s390/t-linux s390/t-linux64\"\n+\ttmake_file=\"${tmake_file} s390/t-linux64\"\n \t;;\n s390x-ibm-tpf*)\n         tm_file=\"s390/s390x.h s390/s390.h dbxelf.h elfos.h svr4.h s390/tpf.h\"\n@@ -2096,7 +2095,6 @@ s390x-ibm-tpf*)\n         extra_modes=s390/s390-modes.def\n         out_file=s390/s390.c\n         extra_parts=\"crtbeginS.o crtendS.o\"\n-        tmake_file=\"s390/t-crtstuff s390/t-tpf\"\n         thread_file='tpf'\n \textra_options=\"${extra_options} s390/tpf.opt\"\n \t;;"}, {"sha": "ddddf3a7c9cd065ed1b1bad054392e97890eaa88", "filename": "gcc/config/s390/fixdfdi.h", "status": "removed", "additions": 0, "deletions": 462, "changes": 462, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb94799d1eccce7fad688b15d80e1552257281a/gcc%2Fconfig%2Fs390%2Ffixdfdi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb94799d1eccce7fad688b15d80e1552257281a/gcc%2Fconfig%2Fs390%2Ffixdfdi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Ffixdfdi.h?ref=aeb94799d1eccce7fad688b15d80e1552257281a", "patch": "@@ -1,462 +0,0 @@\n-/* Definitions of target machine for GNU compiler, for IBM S/390\n-   Copyright (C) 1999, 2000, 2001, 2007, 2008 Free Software Foundation, Inc.\n-   Contributed by Hartmut Penner (hpenner@de.ibm.com) and\n-                  Ulrich Weigand (uweigand@de.ibm.com).\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#ifdef L_fixunstfdi\n-\n-#define EXPD(fp)\t   (((fp.l.i[0]) >> 16) & 0x7FFF)\n-#define EXPONENT_BIAS\t   16383\n-#define MANTISSA_BITS      112\n-#define PRECISION          (MANTISSA_BITS + 1)\n-#define SIGNBIT\t\t   0x80000000\n-#define SIGND(fp)\t   ((fp.l.i[0]) & SIGNBIT)\n-#define MANTD_HIGH_LL(fp)  ((fp.ll[0] & HIGH_LL_FRAC_MASK) | HIGH_LL_UNIT_BIT)\n-#define MANTD_LOW_LL(fp)   (fp.ll[1])\n-#define FRACD_ZERO_P(fp)   (!fp.ll[1] && !(fp.ll[0] & HIGH_LL_FRAC_MASK))\n-#define HIGH_LL_FRAC_BITS  48\n-#define HIGH_LL_UNIT_BIT   ((UDItype_x)1 << HIGH_LL_FRAC_BITS)\n-#define HIGH_LL_FRAC_MASK  (HIGH_LL_UNIT_BIT - 1)\n-\n-typedef int DItype_x __attribute__ ((mode (DI)));\n-typedef unsigned int UDItype_x __attribute__ ((mode (DI)));\n-typedef int SItype_x __attribute__ ((mode (SI)));\n-typedef unsigned int USItype_x __attribute__ ((mode (SI)));\n-\n-union double_long {\n-  long double d;\n-  struct {\n-      SItype_x i[4]; /* 32 bit parts: 0 upper ... 3 lowest */\n-    } l;\n-  UDItype_x ll[2];   /* 64 bit parts: 0 upper, 1 lower */\n-};\n-\n-UDItype_x __fixunstfdi (long double a1);\n-\n-/* convert double to unsigned int */\n-UDItype_x\n-__fixunstfdi (long double a1)\n-{\n-    register union double_long dl1;\n-    register int exp;\n-    register UDItype_x l;\n-\n-    dl1.d = a1;\n-\n-    /* +/- 0, denormalized, negative */\n-    if (!EXPD (dl1) || SIGND(dl1))\n-      return 0;\n-\n-    /* The exponent - considered the binary point at the right end of\n-       the mantissa.  */\n-    exp = EXPD (dl1) - EXPONENT_BIAS - MANTISSA_BITS;\n-\n-    /* number < 1: If the mantissa would need to be right-shifted more bits than\n-       its size (plus the implied one bit on the left) the result would be\n-       zero.  */\n-    if (exp <= -PRECISION)\n-      return 0;\n-\n-    /* NaN: All exponent bits set and a nonzero fraction.  */\n-    if ((EXPD(dl1) == 0x7fff) && !FRACD_ZERO_P (dl1))\n-      return 0x0ULL;\n-\n-    /* One extra bit is needed for the unit bit which is appended by\n-       MANTD_HIGH_LL on the left of the matissa.  */\n-    exp += HIGH_LL_FRAC_BITS + 1;\n-\n-    /* If the result would still need a left shift it will be too large\n-       to be represented.  */\n-    if (exp > 0)\n-      return 0xFFFFFFFFFFFFFFFFULL;\n-\n-    l = MANTD_LOW_LL (dl1) >> (HIGH_LL_FRAC_BITS + 1)\n-        | MANTD_HIGH_LL (dl1) << (64 - (HIGH_LL_FRAC_BITS + 1));\n-\n-    return l >> -exp;\n-}\n-#define __fixunstfdi ___fixunstfdi\n-#endif\n-#undef L_fixunstfdi\n-\n-#ifdef L_fixtfdi\n-#define EXPD(fp)\t   (((fp.l.i[0]) >> 16) & 0x7FFF)\n-#define EXPONENT_BIAS\t   16383\n-#define MANTISSA_BITS      112\n-#define PRECISION          (MANTISSA_BITS + 1)\n-#define SIGNBIT\t\t   0x80000000\n-#define SIGND(fp)\t   ((fp.l.i[0]) & SIGNBIT)\n-#define MANTD_HIGH_LL(fp)  ((fp.ll[0] & HIGH_LL_FRAC_MASK) | HIGH_LL_UNIT_BIT)\n-#define MANTD_LOW_LL(fp)   (fp.ll[1])\n-#define FRACD_ZERO_P(fp)   (!fp.ll[1] && !(fp.ll[0] & HIGH_LL_FRAC_MASK))\n-#define HIGH_LL_FRAC_BITS  48\n-#define HIGH_LL_UNIT_BIT   ((UDItype_x)1 << HIGH_LL_FRAC_BITS)\n-#define HIGH_LL_FRAC_MASK  (HIGH_LL_UNIT_BIT - 1)\n-\n-typedef int DItype_x __attribute__ ((mode (DI)));\n-typedef unsigned int UDItype_x __attribute__ ((mode (DI)));\n-typedef int SItype_x __attribute__ ((mode (SI)));\n-typedef unsigned int USItype_x __attribute__ ((mode (SI)));\n-\n-union double_long {\n-  long double d;\n-  struct {\n-      SItype_x i[4]; /* 32 bit parts: 0 upper ... 3 lowest */\n-    } l;\n-  UDItype_x ll[2];   /* 64 bit parts: 0 upper, 1 lower */\n-};\n-\n-DItype_x __fixtfdi (long double a1);\n-\n-/* convert double to unsigned int */\n-DItype_x\n-__fixtfdi (long double a1)\n-{\n-    register union double_long dl1;\n-    register int exp;\n-    register UDItype_x l;\n-\n-    dl1.d = a1;\n-\n-    /* +/- 0, denormalized */\n-    if (!EXPD (dl1))\n-      return 0;\n-\n-    /* The exponent - considered the binary point at the right end of\n-       the mantissa.  */\n-    exp = EXPD (dl1) - EXPONENT_BIAS - MANTISSA_BITS;\n-\n-    /* number < 1: If the mantissa would need to be right-shifted more bits than\n-       its size the result would be zero.  */\n-    if (exp <= -PRECISION)\n-      return 0;\n-\n-    /* NaN: All exponent bits set and a nonzero fraction.  */\n-    if ((EXPD(dl1) == 0x7fff) && !FRACD_ZERO_P (dl1))\n-      return 0x8000000000000000ULL;\n-\n-    /* One extra bit is needed for the unit bit which is appended by\n-       MANTD_HIGH_LL on the left of the matissa.  */\n-    exp += HIGH_LL_FRAC_BITS + 1;\n-\n-    /* If the result would still need a left shift it will be too large\n-       to be represented.  Compared to the unsigned variant we have to\n-       take care that there is still space for the sign bit to be\n-       applied.  So we can only go on if there is a right-shift by one\n-       or more.  */\n-    if (exp >= 0)\n-      {\n-\tl = 1ULL << 63; /* long long min */\n-\treturn SIGND (dl1) ? l : l - 1;\n-      }\n-\n-    l = MANTD_LOW_LL (dl1) >> (HIGH_LL_FRAC_BITS + 1)\n-        | MANTD_HIGH_LL (dl1) << (64 - (HIGH_LL_FRAC_BITS + 1));\n-\n-    return SIGND (dl1) ? -(l >> -exp) : l >> -exp;\n-}\n-#define __fixtfdi ___fixtfdi\n-#endif\n-#undef L_fixtfdi\n-\n-#ifdef L_fixunsdfdi\n-#define EXPD(fp)\t(((fp.l.upper) >> 20) & 0x7FF)\n-#define EXCESSD\t\t1022\n-#define SIGNBIT\t\t0x80000000\n-#define SIGND(fp)\t((fp.l.upper) & SIGNBIT)\n-#define MANTD_LL(fp)\t((fp.ll & (HIDDEND_LL-1)) | HIDDEND_LL)\n-#define FRACD_LL(fp)\t(fp.ll & (HIDDEND_LL-1))\n-#define HIDDEND_LL\t((UDItype_x)1 << 52)\n-\n-typedef int DItype_x __attribute__ ((mode (DI)));\n-typedef unsigned int UDItype_x __attribute__ ((mode (DI)));\n-typedef int SItype_x __attribute__ ((mode (SI)));\n-typedef unsigned int USItype_x __attribute__ ((mode (SI)));\n-\n-union double_long {\n-    double d;\n-    struct {\n-      SItype_x upper;\n-      USItype_x lower;\n-    } l;\n-    UDItype_x ll;\n-};\n-\n-UDItype_x __fixunsdfdi (double a1);\n-\n-/* convert double to unsigned int */\n-UDItype_x\n-__fixunsdfdi (double a1)\n-{\n-    register union double_long dl1;\n-    register int exp;\n-    register UDItype_x l;\n-\n-    dl1.d = a1;\n-\n-    /* +/- 0, denormalized, negative */\n-\n-    if (!EXPD (dl1) || SIGND(dl1))\n-      return 0;\n-\n-    exp = EXPD (dl1) - EXCESSD - 53;\n-\n-    /* number < 1 */\n-\n-    if (exp < -53)\n-      return 0;\n-\n-    /* NaN */\n-\n-    if ((EXPD(dl1) == 0x7ff) && (FRACD_LL(dl1) != 0)) /* NaN */\n-      return 0x0ULL;\n-\n-    /* Number big number & + inf */\n-\n-    if (exp >= 12) {\n-      return 0xFFFFFFFFFFFFFFFFULL;\n-    }\n-\n-    l = MANTD_LL(dl1);\n-\n-    /* shift down until exp < 12 or l = 0 */\n-    if (exp > 0)\n-      l <<= exp;\n-    else\n-      l >>= -exp;\n-\n-    return l;\n-}\n-#define __fixunsdfdi ___fixunsdfdi\n-#endif\n-#undef L_fixunsdfdi\n-\n-#ifdef L_fixdfdi\n-#define EXPD(fp)\t(((fp.l.upper) >> 20) & 0x7FF)\n-#define EXCESSD\t\t1022\n-#define SIGNBIT\t\t0x80000000\n-#define SIGND(fp)\t((fp.l.upper) & SIGNBIT)\n-#define MANTD_LL(fp)\t((fp.ll & (HIDDEND_LL-1)) | HIDDEND_LL)\n-#define FRACD_LL(fp)\t(fp.ll & (HIDDEND_LL-1))\n-#define HIDDEND_LL\t((UDItype_x)1 << 52)\n-\n-typedef int DItype_x __attribute__ ((mode (DI)));\n-typedef unsigned int UDItype_x __attribute__ ((mode (DI)));\n-typedef int SItype_x __attribute__ ((mode (SI)));\n-typedef unsigned int USItype_x __attribute__ ((mode (SI)));\n-\n-union double_long {\n-    double d;\n-    struct {\n-      SItype_x upper;\n-      USItype_x lower;\n-    } l;\n-    UDItype_x ll;\n-};\n-\n-DItype_x __fixdfdi (double a1);\n-\n-/* convert double to int */\n-DItype_x\n-__fixdfdi (double a1)\n-{\n-    register union double_long dl1;\n-    register int exp;\n-    register DItype_x l;\n-\n-    dl1.d = a1;\n-\n-    /* +/- 0, denormalized */\n-\n-    if (!EXPD (dl1))\n-      return 0;\n-\n-    exp = EXPD (dl1) - EXCESSD - 53;\n-\n-    /* number < 1 */\n-\n-    if (exp < -53)\n-      return 0;\n-\n-    /* NaN */\n-\n-    if ((EXPD(dl1) == 0x7ff) && (FRACD_LL(dl1) != 0)) /* NaN */\n-      return 0x8000000000000000ULL;\n-\n-    /* Number big number & +/- inf */\n-\n-    if (exp >= 11) {\n-\tl = (long long)1<<63;\n-\tif (!SIGND(dl1))\n-\t    l--;\n-\treturn l;\n-    }\n-\n-    l = MANTD_LL(dl1);\n-\n-    /* shift down until exp < 12 or l = 0 */\n-    if (exp > 0)\n-      l <<= exp;\n-    else\n-      l >>= -exp;\n-\n-    return (SIGND (dl1) ? -l : l);\n-}\n-#define __fixdfdi ___fixdfdi\n-#endif\n-#undef L_fixdfdi\n-\n-#ifdef L_fixunssfdi\n-#define EXP(fp)         (((fp.l) >> 23) & 0xFF)\n-#define EXCESS          126\n-#define SIGNBIT         0x80000000\n-#define SIGN(fp)        ((fp.l) & SIGNBIT)\n-#define HIDDEN          (1 << 23)\n-#define MANT(fp)        (((fp.l) & 0x7FFFFF) | HIDDEN)\n-#define FRAC(fp)        ((fp.l) & 0x7FFFFF)\n-\n-typedef int DItype_x __attribute__ ((mode (DI)));\n-typedef unsigned int UDItype_x __attribute__ ((mode (DI)));\n-typedef int SItype_x __attribute__ ((mode (SI)));\n-typedef unsigned int USItype_x __attribute__ ((mode (SI)));\n-\n-union float_long\n-  {\n-    float f;\n-    USItype_x l;\n-  };\n-\n-UDItype_x __fixunssfdi (float a1);\n-\n-/* convert float to unsigned int */\n-UDItype_x\n-__fixunssfdi (float a1)\n-{\n-    register union float_long fl1;\n-    register int exp;\n-    register UDItype_x l;\n-\n-    fl1.f = a1;\n-\n-    /* +/- 0, denormalized, negative */\n-\n-    if (!EXP (fl1) || SIGN(fl1))\n-      return 0;\n-\n-    exp = EXP (fl1) - EXCESS - 24;\n-\n-    /* number < 1 */\n-\n-    if (exp < -24)\n-      return 0;\n-\n-    /* NaN */\n-\n-    if ((EXP(fl1) == 0xff) && (FRAC(fl1) != 0)) /* NaN */\n-      return 0x0ULL;\n-\n-    /* Number big number & + inf */\n-\n-    if (exp >= 41) {\n-      return 0xFFFFFFFFFFFFFFFFULL;\n-    }\n-\n-    l = MANT(fl1);\n-\n-    if (exp > 0)\n-      l <<= exp;\n-    else\n-      l >>= -exp;\n-\n-    return l;\n-}\n-#define __fixunssfdi ___fixunssfdi\n-#endif\n-#undef L_fixunssfdi\n-\n-#ifdef L_fixsfdi\n-#define EXP(fp)         (((fp.l) >> 23) & 0xFF)\n-#define EXCESS          126\n-#define SIGNBIT         0x80000000\n-#define SIGN(fp)        ((fp.l) & SIGNBIT)\n-#define HIDDEN          (1 << 23)\n-#define MANT(fp)        (((fp.l) & 0x7FFFFF) | HIDDEN)\n-#define FRAC(fp)        ((fp.l) & 0x7FFFFF)\n-\n-typedef int DItype_x __attribute__ ((mode (DI)));\n-typedef unsigned int UDItype_x __attribute__ ((mode (DI)));\n-typedef int SItype_x __attribute__ ((mode (SI)));\n-typedef unsigned int USItype_x __attribute__ ((mode (SI)));\n-\n-union float_long\n-  {\n-    float f;\n-    USItype_x l;\n-  };\n-\n-DItype_x __fixsfdi (float a1);\n-\n-/* convert double to int */\n-DItype_x\n-__fixsfdi (float a1)\n-{\n-    register union float_long fl1;\n-    register int exp;\n-    register DItype_x l;\n-\n-    fl1.f = a1;\n-\n-    /* +/- 0, denormalized */\n-\n-    if (!EXP (fl1))\n-      return 0;\n-\n-    exp = EXP (fl1) - EXCESS - 24;\n-\n-    /* number < 1 */\n-\n-    if (exp < -24)\n-      return 0;\n-\n-    /* NaN */\n-\n-    if ((EXP(fl1) == 0xff) && (FRAC(fl1) != 0)) /* NaN */\n-      return 0x8000000000000000ULL;\n-\n-    /* Number big number & +/- inf */\n-\n-    if (exp >= 40) {\n-\tl = (long long)1<<63;\n-\tif (!SIGN(fl1))\n-\t    l--;\n-\treturn l;\n-    }\n-\n-    l = MANT(fl1);\n-\n-    if (exp > 0)\n-      l <<= exp;\n-    else\n-      l >>= -exp;\n-\n-    return (SIGN (fl1) ? -l : l);\n-}\n-#define __fixsfdi ___fixsfdi\n-#endif\n-#undef L_fixsfdi"}, {"sha": "2da8b8753e2ae404af39335646ca4ec19cebb629", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dd9fd79804a9114e7605dbd637ae5add4726a3/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dd9fd79804a9114e7605dbd637ae5add4726a3/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=81dd9fd79804a9114e7605dbd637ae5add4726a3", "patch": "@@ -24,12 +24,6 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef _S390_H\n #define _S390_H\n \n-/* Override the __fixdfdi etc. routines when building libgcc2.\n-   ??? This should be done in a cleaner way ...  */\n-#if defined (IN_LIBGCC2) && !defined (__s390x__)\n-#include <config/s390/fixdfdi.h>\n-#endif\n-\n /* Which processor to generate code or schedule for. The cpu attribute\n    defines a list that mirrors this list, so changes to s390.md must be\n    made at the same time.  */"}, {"sha": "d5a92781450366be9a67201231845c5849d3049d", "filename": "gcc/config/s390/t-linux", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb94799d1eccce7fad688b15d80e1552257281a/gcc%2Fconfig%2Fs390%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb94799d1eccce7fad688b15d80e1552257281a/gcc%2Fconfig%2Fs390%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Ft-linux?ref=aeb94799d1eccce7fad688b15d80e1552257281a", "patch": "@@ -1,3 +0,0 @@\n-# Override t-slibgcc-elf-ver to export some libgcc symbols with\n-# the symbol versions that glibc used.\n-SHLIB_MAPFILES = $(srcdir)/libgcc-std.ver $(srcdir)/config/s390/libgcc-glibc.ver"}, {"sha": "36aced09c2c4b5f89f71bef1c46a5641cf2471ba", "filename": "gcc/config/s390/t-linux64", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dd9fd79804a9114e7605dbd637ae5add4726a3/gcc%2Fconfig%2Fs390%2Ft-linux64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dd9fd79804a9114e7605dbd637ae5add4726a3/gcc%2Fconfig%2Fs390%2Ft-linux64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Ft-linux64?ref=81dd9fd79804a9114e7605dbd637ae5add4726a3", "patch": "@@ -1,8 +1,3 @@\n MULTILIB_OPTIONS = m64/m31\n MULTILIB_DIRNAMES = 64 32\n MULTILIB_OSDIRNAMES = ../lib64 ../lib\n-\n-LIBGCC = stmp-multilib\n-INSTALL_LIBGCC = install-multilib\n-\n-EXTRA_MULTILIB_PARTS=crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o"}, {"sha": "6e4c377697c15fe34c8c074e34895fc90a216356", "filename": "gcc/config/s390/t-tpf", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb94799d1eccce7fad688b15d80e1552257281a/gcc%2Fconfig%2Fs390%2Ft-tpf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb94799d1eccce7fad688b15d80e1552257281a/gcc%2Fconfig%2Fs390%2Ft-tpf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Ft-tpf?ref=aeb94799d1eccce7fad688b15d80e1552257281a", "patch": "@@ -1,9 +0,0 @@\n-# Compile crtbeginS.o and crtendS.o with pic.\n-CRTSTUFF_T_CFLAGS_S = $(CRTSTUFF_T_CFLAGS) -fPIC\n-# Compile libgcc2.a with pic.\n-TARGET_LIBGCC2_CFLAGS = -fPIC\n-\n-# Use unwind-dw2-fde-glibc.\n-LIB2ADDEH = $(srcdir)/unwind-dw2.c $(srcdir)/unwind-dw2-fde-glibc.c \\\n-  $(srcdir)/unwind-sjlj.c $(srcdir)/gthr-gnat.c $(srcdir)/unwind-c.c\n-LIB2ADDEHDEP = unwind.inc unwind-dw2-fde.h"}, {"sha": "9f4f31fd326e4199145dc583e0db3438ae23b859", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dd9fd79804a9114e7605dbd637ae5add4726a3/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dd9fd79804a9114e7605dbd637ae5add4726a3/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=81dd9fd79804a9114e7605dbd637ae5add4726a3", "patch": "@@ -1,3 +1,18 @@\n+2009-10-07  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* config.host: Include the s390 makefile fragments.\n+\t* config/s390/32/_fixdfdi.c: New file.\n+\t* config/s390/32/_fixsfdi.c: New file.\n+\t* config/s390/32/_fixtfdi.c: New file.\n+\t* config/s390/32/_fixunsdfdi.c: New file.\n+\t* config/s390/32/_fixunssfdi.c: New file.\n+\t* config/s390/32/_fixunstfdi.c: New file.\n+\t* config/s390/32/t-floattodi: New file.\n+\t* config/s390/libgcc-glibc.ver: New file.\n+\t* config/s390/t-crtstuff: New file.\n+\t* config/s390/t-linux: New file.\n+\t* config/s390/t-tpf: New file.\n+\n 2009-08-24  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* configure.ac (AC_PREREQ): Bump to 2.64."}, {"sha": "91b705481018d3d7bdfc37b27494efcbac261b6a", "filename": "libgcc/config.host", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dd9fd79804a9114e7605dbd637ae5add4726a3/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dd9fd79804a9114e7605dbd637ae5add4726a3/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=81dd9fd79804a9114e7605dbd637ae5add4726a3", "patch": "@@ -483,10 +483,13 @@ rs6000-ibm-aix5.1.* | powerpc-ibm-aix5.1.*)\n rs6000-ibm-aix[56789].* | powerpc-ibm-aix[56789].*)\n \t;;\n s390-*-linux*)\n+\ttmake_file=\"${tmake_file} s390/t-crtstuff s390/t-linux s390/32/t-floattodi\"\n \t;;\n s390x-*-linux*)\n+\ttmake_file=\"${tmake_file} s390/t-crtstuff s390/t-linux\"\n \t;;\n s390x-ibm-tpf*)\n+\ttmake_file=\"${tmake_file} s390/t-crtstuff s390/t-tpf\"\n \t;;\n score-*-elf)\n         ;;"}, {"sha": "364849c2d56c6b3fd5f3ef53526da706cc96a6ee", "filename": "libgcc/config/s390/32/_fixdfdi.c", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dd9fd79804a9114e7605dbd637ae5add4726a3/libgcc%2Fconfig%2Fs390%2F32%2F_fixdfdi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dd9fd79804a9114e7605dbd637ae5add4726a3/libgcc%2Fconfig%2Fs390%2F32%2F_fixdfdi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fs390%2F32%2F_fixdfdi.c?ref=81dd9fd79804a9114e7605dbd637ae5add4726a3", "patch": "@@ -0,0 +1,97 @@\n+/* Definitions of target machine for GNU compiler, for IBM S/390\n+   Copyright (C) 1999, 2000, 2001, 2007, 2008 and 2009\n+   Free Software Foundation, Inc.\n+   Contributed by Hartmut Penner (hpenner@de.ibm.com) and\n+                  Ulrich Weigand (uweigand@de.ibm.com).\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define EXPD(fp)\t(((fp.l.upper) >> 20) & 0x7FF)\n+#define EXCESSD\t\t1022\n+#define SIGNBIT\t\t0x80000000\n+#define SIGND(fp)\t((fp.l.upper) & SIGNBIT)\n+#define MANTD_LL(fp)\t((fp.ll & (HIDDEND_LL-1)) | HIDDEND_LL)\n+#define FRACD_LL(fp)\t(fp.ll & (HIDDEND_LL-1))\n+#define HIDDEND_LL\t((UDItype_x)1 << 52)\n+\n+typedef int DItype_x __attribute__ ((mode (DI)));\n+typedef unsigned int UDItype_x __attribute__ ((mode (DI)));\n+typedef int SItype_x __attribute__ ((mode (SI)));\n+typedef unsigned int USItype_x __attribute__ ((mode (SI)));\n+\n+union double_long {\n+    double d;\n+    struct {\n+      SItype_x upper;\n+      USItype_x lower;\n+    } l;\n+    UDItype_x ll;\n+};\n+\n+DItype_x __fixdfdi (double a1);\n+\n+/* convert double to int */\n+DItype_x\n+__fixdfdi (double a1)\n+{\n+    register union double_long dl1;\n+    register int exp;\n+    register DItype_x l;\n+\n+    dl1.d = a1;\n+\n+    /* +/- 0, denormalized */\n+\n+    if (!EXPD (dl1))\n+      return 0;\n+\n+    exp = EXPD (dl1) - EXCESSD - 53;\n+\n+    /* number < 1 */\n+\n+    if (exp < -53)\n+      return 0;\n+\n+    /* NaN */\n+\n+    if ((EXPD(dl1) == 0x7ff) && (FRACD_LL(dl1) != 0)) /* NaN */\n+      return 0x8000000000000000ULL;\n+\n+    /* Number big number & +/- inf */\n+\n+    if (exp >= 11) {\n+\tl = (long long)1<<63;\n+\tif (!SIGND(dl1))\n+\t    l--;\n+\treturn l;\n+    }\n+\n+    l = MANTD_LL(dl1);\n+\n+    /* shift down until exp < 12 or l = 0 */\n+    if (exp > 0)\n+      l <<= exp;\n+    else\n+      l >>= -exp;\n+\n+    return (SIGND (dl1) ? -l : l);\n+}"}, {"sha": "06336c12d2b62d647f9d1fd373b5d24790282394", "filename": "libgcc/config/s390/32/_fixsfdi.c", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dd9fd79804a9114e7605dbd637ae5add4726a3/libgcc%2Fconfig%2Fs390%2F32%2F_fixsfdi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dd9fd79804a9114e7605dbd637ae5add4726a3/libgcc%2Fconfig%2Fs390%2F32%2F_fixsfdi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fs390%2F32%2F_fixsfdi.c?ref=81dd9fd79804a9114e7605dbd637ae5add4726a3", "patch": "@@ -0,0 +1,93 @@\n+/* Definitions of target machine for GNU compiler, for IBM S/390\n+   Copyright (C) 1999, 2000, 2001, 2007, 2008 and 2009\n+   Free Software Foundation, Inc.\n+   Contributed by Hartmut Penner (hpenner@de.ibm.com) and\n+                  Ulrich Weigand (uweigand@de.ibm.com).\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define EXP(fp)         (((fp.l) >> 23) & 0xFF)\n+#define EXCESS          126\n+#define SIGNBIT         0x80000000\n+#define SIGN(fp)        ((fp.l) & SIGNBIT)\n+#define HIDDEN          (1 << 23)\n+#define MANT(fp)        (((fp.l) & 0x7FFFFF) | HIDDEN)\n+#define FRAC(fp)        ((fp.l) & 0x7FFFFF)\n+\n+typedef int DItype_x __attribute__ ((mode (DI)));\n+typedef unsigned int UDItype_x __attribute__ ((mode (DI)));\n+typedef int SItype_x __attribute__ ((mode (SI)));\n+typedef unsigned int USItype_x __attribute__ ((mode (SI)));\n+\n+union float_long\n+  {\n+    float f;\n+    USItype_x l;\n+  };\n+\n+DItype_x __fixsfdi (float a1);\n+\n+/* convert double to int */\n+DItype_x\n+__fixsfdi (float a1)\n+{\n+    register union float_long fl1;\n+    register int exp;\n+    register DItype_x l;\n+\n+    fl1.f = a1;\n+\n+    /* +/- 0, denormalized */\n+\n+    if (!EXP (fl1))\n+      return 0;\n+\n+    exp = EXP (fl1) - EXCESS - 24;\n+\n+    /* number < 1 */\n+\n+    if (exp < -24)\n+      return 0;\n+\n+    /* NaN */\n+\n+    if ((EXP(fl1) == 0xff) && (FRAC(fl1) != 0)) /* NaN */\n+      return 0x8000000000000000ULL;\n+\n+    /* Number big number & +/- inf */\n+\n+    if (exp >= 40) {\n+\tl = (long long)1<<63;\n+\tif (!SIGN(fl1))\n+\t    l--;\n+\treturn l;\n+    }\n+\n+    l = MANT(fl1);\n+\n+    if (exp > 0)\n+      l <<= exp;\n+    else\n+      l >>= -exp;\n+\n+    return (SIGN (fl1) ? -l : l);\n+}"}, {"sha": "719703ee189902e9b936a1039bb5d47422ed9e91", "filename": "libgcc/config/s390/32/_fixtfdi.c", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dd9fd79804a9114e7605dbd637ae5add4726a3/libgcc%2Fconfig%2Fs390%2F32%2F_fixtfdi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dd9fd79804a9114e7605dbd637ae5add4726a3/libgcc%2Fconfig%2Fs390%2F32%2F_fixtfdi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fs390%2F32%2F_fixtfdi.c?ref=81dd9fd79804a9114e7605dbd637ae5add4726a3", "patch": "@@ -0,0 +1,102 @@\n+/* Definitions of target machine for GNU compiler, for IBM S/390\n+   Copyright (C) 1999, 2000, 2001, 2007, 2008 and 2009\n+   Free Software Foundation, Inc.\n+   Contributed by Hartmut Penner (hpenner@de.ibm.com) and\n+                  Ulrich Weigand (uweigand@de.ibm.com).\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define EXPD(fp)\t   (((fp.l.i[0]) >> 16) & 0x7FFF)\n+#define EXPONENT_BIAS\t   16383\n+#define MANTISSA_BITS      112\n+#define PRECISION          (MANTISSA_BITS + 1)\n+#define SIGNBIT\t\t   0x80000000\n+#define SIGND(fp)\t   ((fp.l.i[0]) & SIGNBIT)\n+#define MANTD_HIGH_LL(fp)  ((fp.ll[0] & HIGH_LL_FRAC_MASK) | HIGH_LL_UNIT_BIT)\n+#define MANTD_LOW_LL(fp)   (fp.ll[1])\n+#define FRACD_ZERO_P(fp)   (!fp.ll[1] && !(fp.ll[0] & HIGH_LL_FRAC_MASK))\n+#define HIGH_LL_FRAC_BITS  48\n+#define HIGH_LL_UNIT_BIT   ((UDItype_x)1 << HIGH_LL_FRAC_BITS)\n+#define HIGH_LL_FRAC_MASK  (HIGH_LL_UNIT_BIT - 1)\n+\n+typedef int DItype_x __attribute__ ((mode (DI)));\n+typedef unsigned int UDItype_x __attribute__ ((mode (DI)));\n+typedef int SItype_x __attribute__ ((mode (SI)));\n+typedef unsigned int USItype_x __attribute__ ((mode (SI)));\n+\n+union double_long {\n+  long double d;\n+  struct {\n+      SItype_x i[4]; /* 32 bit parts: 0 upper ... 3 lowest */\n+    } l;\n+  UDItype_x ll[2];   /* 64 bit parts: 0 upper, 1 lower */\n+};\n+\n+DItype_x __fixtfdi (long double a1);\n+\n+/* convert double to unsigned int */\n+DItype_x\n+__fixtfdi (long double a1)\n+{\n+    register union double_long dl1;\n+    register int exp;\n+    register UDItype_x l;\n+\n+    dl1.d = a1;\n+\n+    /* +/- 0, denormalized */\n+    if (!EXPD (dl1))\n+      return 0;\n+\n+    /* The exponent - considered the binary point at the right end of\n+       the mantissa.  */\n+    exp = EXPD (dl1) - EXPONENT_BIAS - MANTISSA_BITS;\n+\n+    /* number < 1: If the mantissa would need to be right-shifted more bits than\n+       its size the result would be zero.  */\n+    if (exp <= -PRECISION)\n+      return 0;\n+\n+    /* NaN: All exponent bits set and a nonzero fraction.  */\n+    if ((EXPD(dl1) == 0x7fff) && !FRACD_ZERO_P (dl1))\n+      return 0x8000000000000000ULL;\n+\n+    /* One extra bit is needed for the unit bit which is appended by\n+       MANTD_HIGH_LL on the left of the matissa.  */\n+    exp += HIGH_LL_FRAC_BITS + 1;\n+\n+    /* If the result would still need a left shift it will be too large\n+       to be represented.  Compared to the unsigned variant we have to\n+       take care that there is still space for the sign bit to be\n+       applied.  So we can only go on if there is a right-shift by one\n+       or more.  */\n+    if (exp >= 0)\n+      {\n+\tl = 1ULL << 63; /* long long min */\n+\treturn SIGND (dl1) ? l : l - 1;\n+      }\n+\n+    l = MANTD_LOW_LL (dl1) >> (HIGH_LL_FRAC_BITS + 1)\n+        | MANTD_HIGH_LL (dl1) << (64 - (HIGH_LL_FRAC_BITS + 1));\n+\n+    return SIGND (dl1) ? -(l >> -exp) : l >> -exp;\n+}"}, {"sha": "2c3365299675a434b2ce8fd94f3c134a3db98ff3", "filename": "libgcc/config/s390/32/_fixunsdfdi.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dd9fd79804a9114e7605dbd637ae5add4726a3/libgcc%2Fconfig%2Fs390%2F32%2F_fixunsdfdi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dd9fd79804a9114e7605dbd637ae5add4726a3/libgcc%2Fconfig%2Fs390%2F32%2F_fixunsdfdi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fs390%2F32%2F_fixunsdfdi.c?ref=81dd9fd79804a9114e7605dbd637ae5add4726a3", "patch": "@@ -0,0 +1,94 @@\n+/* Definitions of target machine for GNU compiler, for IBM S/390\n+   Copyright (C) 1999, 2000, 2001, 2007, 2008 and 2009\n+   Free Software Foundation, Inc.\n+   Contributed by Hartmut Penner (hpenner@de.ibm.com) and\n+                  Ulrich Weigand (uweigand@de.ibm.com).\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define EXPD(fp)\t(((fp.l.upper) >> 20) & 0x7FF)\n+#define EXCESSD\t\t1022\n+#define SIGNBIT\t\t0x80000000\n+#define SIGND(fp)\t((fp.l.upper) & SIGNBIT)\n+#define MANTD_LL(fp)\t((fp.ll & (HIDDEND_LL-1)) | HIDDEND_LL)\n+#define FRACD_LL(fp)\t(fp.ll & (HIDDEND_LL-1))\n+#define HIDDEND_LL\t((UDItype_x)1 << 52)\n+\n+typedef int DItype_x __attribute__ ((mode (DI)));\n+typedef unsigned int UDItype_x __attribute__ ((mode (DI)));\n+typedef int SItype_x __attribute__ ((mode (SI)));\n+typedef unsigned int USItype_x __attribute__ ((mode (SI)));\n+\n+union double_long {\n+    double d;\n+    struct {\n+      SItype_x upper;\n+      USItype_x lower;\n+    } l;\n+    UDItype_x ll;\n+};\n+\n+UDItype_x __fixunsdfdi (double a1);\n+\n+/* convert double to unsigned int */\n+UDItype_x\n+__fixunsdfdi (double a1)\n+{\n+    register union double_long dl1;\n+    register int exp;\n+    register UDItype_x l;\n+\n+    dl1.d = a1;\n+\n+    /* +/- 0, denormalized, negative */\n+\n+    if (!EXPD (dl1) || SIGND(dl1))\n+      return 0;\n+\n+    exp = EXPD (dl1) - EXCESSD - 53;\n+\n+    /* number < 1 */\n+\n+    if (exp < -53)\n+      return 0;\n+\n+    /* NaN */\n+\n+    if ((EXPD(dl1) == 0x7ff) && (FRACD_LL(dl1) != 0)) /* NaN */\n+      return 0x0ULL;\n+\n+    /* Number big number & + inf */\n+\n+    if (exp >= 12) {\n+      return 0xFFFFFFFFFFFFFFFFULL;\n+    }\n+\n+    l = MANTD_LL(dl1);\n+\n+    /* shift down until exp < 12 or l = 0 */\n+    if (exp > 0)\n+      l <<= exp;\n+    else\n+      l >>= -exp;\n+\n+    return l;\n+}"}, {"sha": "eaaad9648d01a14d2199e5f17348795908047d51", "filename": "libgcc/config/s390/32/_fixunssfdi.c", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dd9fd79804a9114e7605dbd637ae5add4726a3/libgcc%2Fconfig%2Fs390%2F32%2F_fixunssfdi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dd9fd79804a9114e7605dbd637ae5add4726a3/libgcc%2Fconfig%2Fs390%2F32%2F_fixunssfdi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fs390%2F32%2F_fixunssfdi.c?ref=81dd9fd79804a9114e7605dbd637ae5add4726a3", "patch": "@@ -0,0 +1,90 @@\n+/* Definitions of target machine for GNU compiler, for IBM S/390\n+   Copyright (C) 1999, 2000, 2001, 2007, 2008 and 2009\n+   Free Software Foundation, Inc.\n+   Contributed by Hartmut Penner (hpenner@de.ibm.com) and\n+                  Ulrich Weigand (uweigand@de.ibm.com).\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define EXP(fp)         (((fp.l) >> 23) & 0xFF)\n+#define EXCESS          126\n+#define SIGNBIT         0x80000000\n+#define SIGN(fp)        ((fp.l) & SIGNBIT)\n+#define HIDDEN          (1 << 23)\n+#define MANT(fp)        (((fp.l) & 0x7FFFFF) | HIDDEN)\n+#define FRAC(fp)        ((fp.l) & 0x7FFFFF)\n+\n+typedef int DItype_x __attribute__ ((mode (DI)));\n+typedef unsigned int UDItype_x __attribute__ ((mode (DI)));\n+typedef int SItype_x __attribute__ ((mode (SI)));\n+typedef unsigned int USItype_x __attribute__ ((mode (SI)));\n+\n+union float_long\n+  {\n+    float f;\n+    USItype_x l;\n+  };\n+\n+UDItype_x __fixunssfdi (float a1);\n+\n+/* convert float to unsigned int */\n+UDItype_x\n+__fixunssfdi (float a1)\n+{\n+    register union float_long fl1;\n+    register int exp;\n+    register UDItype_x l;\n+\n+    fl1.f = a1;\n+\n+    /* +/- 0, denormalized, negative */\n+\n+    if (!EXP (fl1) || SIGN(fl1))\n+      return 0;\n+\n+    exp = EXP (fl1) - EXCESS - 24;\n+\n+    /* number < 1 */\n+\n+    if (exp < -24)\n+      return 0;\n+\n+    /* NaN */\n+\n+    if ((EXP(fl1) == 0xff) && (FRAC(fl1) != 0)) /* NaN */\n+      return 0x0ULL;\n+\n+    /* Number big number & + inf */\n+\n+    if (exp >= 41) {\n+      return 0xFFFFFFFFFFFFFFFFULL;\n+    }\n+\n+    l = MANT(fl1);\n+\n+    if (exp > 0)\n+      l <<= exp;\n+    else\n+      l >>= -exp;\n+\n+    return l;\n+}"}, {"sha": "cc7ada5e0cfb72db62a25bcb921f17b6ac7c1be4", "filename": "libgcc/config/s390/32/_fixunstfdi.c", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dd9fd79804a9114e7605dbd637ae5add4726a3/libgcc%2Fconfig%2Fs390%2F32%2F_fixunstfdi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dd9fd79804a9114e7605dbd637ae5add4726a3/libgcc%2Fconfig%2Fs390%2F32%2F_fixunstfdi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fs390%2F32%2F_fixunstfdi.c?ref=81dd9fd79804a9114e7605dbd637ae5add4726a3", "patch": "@@ -0,0 +1,97 @@\n+/* Definitions of target machine for GNU compiler, for IBM S/390\n+   Copyright (C) 1999, 2000, 2001, 2007, 2008 and 2009\n+   Free Software Foundation, Inc.\n+   Contributed by Hartmut Penner (hpenner@de.ibm.com) and\n+                  Ulrich Weigand (uweigand@de.ibm.com).\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define EXPD(fp)\t   (((fp.l.i[0]) >> 16) & 0x7FFF)\n+#define EXPONENT_BIAS\t   16383\n+#define MANTISSA_BITS      112\n+#define PRECISION          (MANTISSA_BITS + 1)\n+#define SIGNBIT\t\t   0x80000000\n+#define SIGND(fp)\t   ((fp.l.i[0]) & SIGNBIT)\n+#define MANTD_HIGH_LL(fp)  ((fp.ll[0] & HIGH_LL_FRAC_MASK) | HIGH_LL_UNIT_BIT)\n+#define MANTD_LOW_LL(fp)   (fp.ll[1])\n+#define FRACD_ZERO_P(fp)   (!fp.ll[1] && !(fp.ll[0] & HIGH_LL_FRAC_MASK))\n+#define HIGH_LL_FRAC_BITS  48\n+#define HIGH_LL_UNIT_BIT   ((UDItype_x)1 << HIGH_LL_FRAC_BITS)\n+#define HIGH_LL_FRAC_MASK  (HIGH_LL_UNIT_BIT - 1)\n+\n+typedef int DItype_x __attribute__ ((mode (DI)));\n+typedef unsigned int UDItype_x __attribute__ ((mode (DI)));\n+typedef int SItype_x __attribute__ ((mode (SI)));\n+typedef unsigned int USItype_x __attribute__ ((mode (SI)));\n+\n+union double_long {\n+  long double d;\n+  struct {\n+      SItype_x i[4]; /* 32 bit parts: 0 upper ... 3 lowest */\n+    } l;\n+  UDItype_x ll[2];   /* 64 bit parts: 0 upper, 1 lower */\n+};\n+\n+UDItype_x __fixunstfdi (long double a1);\n+\n+/* convert double to unsigned int */\n+UDItype_x\n+__fixunstfdi (long double a1)\n+{\n+    register union double_long dl1;\n+    register int exp;\n+    register UDItype_x l;\n+\n+    dl1.d = a1;\n+\n+    /* +/- 0, denormalized, negative */\n+    if (!EXPD (dl1) || SIGND(dl1))\n+      return 0;\n+\n+    /* The exponent - considered the binary point at the right end of\n+       the mantissa.  */\n+    exp = EXPD (dl1) - EXPONENT_BIAS - MANTISSA_BITS;\n+\n+    /* number < 1: If the mantissa would need to be right-shifted more bits than\n+       its size (plus the implied one bit on the left) the result would be\n+       zero.  */\n+    if (exp <= -PRECISION)\n+      return 0;\n+\n+    /* NaN: All exponent bits set and a nonzero fraction.  */\n+    if ((EXPD(dl1) == 0x7fff) && !FRACD_ZERO_P (dl1))\n+      return 0x0ULL;\n+\n+    /* One extra bit is needed for the unit bit which is appended by\n+       MANTD_HIGH_LL on the left of the matissa.  */\n+    exp += HIGH_LL_FRAC_BITS + 1;\n+\n+    /* If the result would still need a left shift it will be too large\n+       to be represented.  */\n+    if (exp > 0)\n+      return 0xFFFFFFFFFFFFFFFFULL;\n+\n+    l = MANTD_LOW_LL (dl1) >> (HIGH_LL_FRAC_BITS + 1)\n+        | MANTD_HIGH_LL (dl1) << (64 - (HIGH_LL_FRAC_BITS + 1));\n+\n+    return l >> -exp;\n+}"}, {"sha": "4bd87b1f888e1ae52e6de16efe490937e022ba69", "filename": "libgcc/config/s390/32/t-floattodi", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dd9fd79804a9114e7605dbd637ae5add4726a3/libgcc%2Fconfig%2Fs390%2F32%2Ft-floattodi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dd9fd79804a9114e7605dbd637ae5add4726a3/libgcc%2Fconfig%2Fs390%2F32%2Ft-floattodi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fs390%2F32%2Ft-floattodi?ref=81dd9fd79804a9114e7605dbd637ae5add4726a3", "patch": "@@ -0,0 +1,5 @@\n+floattodi-functions = _fixsfdi _fixdfdi _fixtfdi _fixunssfdi _fixunsdfdi _fixunstfdi\n+LIB2FUNCS_EXCLUDE += $(floattodi-functions)\n+\n+floattodi-src = $(addsuffix .c, $(floattodi-functions))\n+LIB2ADD = $(addprefix $(srcdir)/config/s390/32/, $(floattodi-src))"}, {"sha": "6fc52e40d78282e5720964ed52f6cd07be53a5f1", "filename": "libgcc/config/s390/libgcc-glibc.ver", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dd9fd79804a9114e7605dbd637ae5add4726a3/libgcc%2Fconfig%2Fs390%2Flibgcc-glibc.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dd9fd79804a9114e7605dbd637ae5add4726a3/libgcc%2Fconfig%2Fs390%2Flibgcc-glibc.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fs390%2Flibgcc-glibc.ver?ref=81dd9fd79804a9114e7605dbd637ae5add4726a3", "previous_filename": "gcc/config/s390/libgcc-glibc.ver"}, {"sha": "92e87b2da7e454aca67840cb89e59633d4820ac1", "filename": "libgcc/config/s390/t-crtstuff", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dd9fd79804a9114e7605dbd637ae5add4726a3/libgcc%2Fconfig%2Fs390%2Ft-crtstuff", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dd9fd79804a9114e7605dbd637ae5add4726a3/libgcc%2Fconfig%2Fs390%2Ft-crtstuff", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fs390%2Ft-crtstuff?ref=81dd9fd79804a9114e7605dbd637ae5add4726a3", "patch": "@@ -1,5 +1,6 @@\n # crtend*.o cannot be compiled without -fno-asynchronous-unwind-tables,\n # because then __FRAME_END__ might not be the last thing in .eh_frame\n # section.\n-CRTSTUFF_T_CFLAGS = -fno-asynchronous-unwind-tables\n-TARGET_LIBGCC2_CFLAGS += -mlong-double-128\n+CRTSTUFF_T_CFLAGS += -fno-asynchronous-unwind-tables\n+CRTSTUFF_T_CFLAGS_S += -fno-asynchronous-unwind-tables\n+", "previous_filename": "gcc/config/s390/t-crtstuff"}, {"sha": "a0f10cb29953aa80f1fa33cffbed8be30a00f766", "filename": "libgcc/config/s390/t-linux", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dd9fd79804a9114e7605dbd637ae5add4726a3/libgcc%2Fconfig%2Fs390%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dd9fd79804a9114e7605dbd637ae5add4726a3/libgcc%2Fconfig%2Fs390%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fs390%2Ft-linux?ref=81dd9fd79804a9114e7605dbd637ae5add4726a3", "patch": "@@ -0,0 +1,7 @@\n+DFP_ENABLE = true\n+\n+# Override t-slibgcc-elf-ver to export some libgcc symbols with\n+# the symbol versions that glibc used.\n+SHLIB_MAPFILES = $(gcc_srcdir)/libgcc-std.ver $(srcdir)/config/s390/libgcc-glibc.ver\n+\n+HOST_LIBGCC2_CFLAGS += -mlong-double-128\n\\ No newline at end of file"}, {"sha": "b1e8f6910da15826e53846decbc07199594fd75f", "filename": "libgcc/config/s390/t-tpf", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81dd9fd79804a9114e7605dbd637ae5add4726a3/libgcc%2Fconfig%2Fs390%2Ft-tpf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81dd9fd79804a9114e7605dbd637ae5add4726a3/libgcc%2Fconfig%2Fs390%2Ft-tpf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fs390%2Ft-tpf?ref=81dd9fd79804a9114e7605dbd637ae5add4726a3", "patch": "@@ -0,0 +1,8 @@\n+# Compile libgcc2.a with pic.\n+HOST_LIBGCC2_CFLAGS += -fPIC\n+\n+# Use unwind-dw2-fde-glibc.\n+LIB2ADDEH = $(gcc_srcdir)/unwind-dw2.c $(gcc_srcdir)/unwind-dw2-fde-glibc.c \\\n+  $(gcc_srcdir)/unwind-sjlj.c $(gcc_srcdir)/gthr-gnat.c $(gcc_srcdir)/unwind-c.c \\\n+  $(gcc_srcdir)/emutls.c\n+LIB2ADDEHDEP = unwind.inc unwind-dw2-fde.h"}]}