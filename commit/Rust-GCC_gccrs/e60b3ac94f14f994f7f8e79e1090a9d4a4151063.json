{"sha": "e60b3ac94f14f994f7f8e79e1090a9d4a4151063", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYwYjNhYzk0ZjE0Zjk5NGY3ZjhlNzllMTA5MGE5ZDRhNDE1MTA2Mw==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2011-02-11T07:33:53Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2011-02-11T07:33:53Z"}, "message": "re PR c++/47172 ([C++0x] cannot call member function without object)\n\nFix PR c++/47172\n\ngcc/cp/\n\n\tPR c++/47172\n\t* pt.c (finish_call_expr): Consider a call expression that has a\n\tdependent \"this\" pointer as being dependent.  Add comments.\n\t(dependent_type_p, type_dependent_expression_p): Update comments.\n\ngcc/testsuite/\n\n\t* g++.dg/template/inherit6.C: New test.\n\nFrom-SVN: r170045", "tree": {"sha": "a31e9d3fefeb275bcc5366e7d02ccd9608295274", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a31e9d3fefeb275bcc5366e7d02ccd9608295274"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e60b3ac94f14f994f7f8e79e1090a9d4a4151063", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e60b3ac94f14f994f7f8e79e1090a9d4a4151063", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e60b3ac94f14f994f7f8e79e1090a9d4a4151063", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e60b3ac94f14f994f7f8e79e1090a9d4a4151063/comments", "author": null, "committer": null, "parents": [{"sha": "942e57396b4a3322efdec5c8f7a8d5b6665cf875", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/942e57396b4a3322efdec5c8f7a8d5b6665cf875", "html_url": "https://github.com/Rust-GCC/gccrs/commit/942e57396b4a3322efdec5c8f7a8d5b6665cf875"}], "stats": {"total": 56, "additions": 53, "deletions": 3}, "files": [{"sha": "98c5668e8527d92bc780e0572607dcc5ea51e9e1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60b3ac94f14f994f7f8e79e1090a9d4a4151063/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60b3ac94f14f994f7f8e79e1090a9d4a4151063/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e60b3ac94f14f994f7f8e79e1090a9d4a4151063", "patch": "@@ -1,3 +1,10 @@\n+2011-02-11  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/47172\n+\t* pt.c (finish_call_expr): Consider a call expression that has a\n+\tdependent \"this\" pointer as being dependent.  Add comments.\n+\t(dependent_type_p, type_dependent_expression_p): Update comments.\n+\n 2011-02-09  Jason Merrill  <jason@redhat.com>\n \n \t* decl.c (cp_make_fname_decl): Set DECL_THIS_STATIC at toplevel."}, {"sha": "a55a35ad4dbfce1aaa55ec5ef31f546156af2640", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60b3ac94f14f994f7f8e79e1090a9d4a4151063/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60b3ac94f14f994f7f8e79e1090a9d4a4151063/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e60b3ac94f14f994f7f8e79e1090a9d4a4151063", "patch": "@@ -17912,7 +17912,7 @@ dependent_type_p_r (tree type)\n }\n \n /* Returns TRUE if TYPE is dependent, in the sense of\n-   [temp.dep.type].  */\n+   [temp.dep.type].  Note that a NULL type is considered dependent.  */\n \n bool\n dependent_type_p (tree type)\n@@ -18184,7 +18184,10 @@ value_dependent_expression_p (tree expression)\n }\n \n /* Returns TRUE if the EXPRESSION is type-dependent, in the sense of\n-   [temp.dep.expr].  */\n+   [temp.dep.expr].  Note that an expression with no type is\n+   considered dependent.  Other parts of the compiler arrange for an\n+   expression with type-dependent subexpressions to have no type, so\n+   this function doesn't have to be fully recursive.  */\n \n bool\n type_dependent_expression_p (tree expression)"}, {"sha": "a941b3bc74ecf0647780ceb52ca2d588f5314156", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60b3ac94f14f994f7f8e79e1090a9d4a4151063/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60b3ac94f14f994f7f8e79e1090a9d4a4151063/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=e60b3ac94f14f994f7f8e79e1090a9d4a4151063", "patch": "@@ -2028,8 +2028,20 @@ finish_call_expr (tree fn, VEC(tree,gc) **args, bool disallow_virtual,\n \n   if (processing_template_decl)\n     {\n+      /* If the call expression is dependent, build a CALL_EXPR node\n+\t with no type; type_dependent_expression_p recognizes\n+\t expressions with no type as being dependent.  */\n       if (type_dependent_expression_p (fn)\n-\t  || any_type_dependent_arguments_p (*args))\n+\t  || any_type_dependent_arguments_p (*args)\n+\t  /* For a non-static member function, we need to specifically\n+\t     test the type dependency of the \"this\" pointer because it\n+\t     is not included in *ARGS even though it is considered to\n+\t     be part of the list of arguments.  Note that this is\n+\t     related to CWG issues 515 and 1005.  */\n+\t  || (TREE_CODE (fn) == FUNCTION_DECL\n+\t      && DECL_NONSTATIC_MEMBER_FUNCTION_P (fn)\n+\t      && current_class_ref\n+\t      && type_dependent_expression_p (current_class_ref)))\n \t{\n \t  result = build_nt_call_vec (fn, *args);\n \t  KOENIG_LOOKUP_P (result) = koenig_p;"}, {"sha": "99df5e5f3ce7977f970fc9c4b76122ccea562328", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60b3ac94f14f994f7f8e79e1090a9d4a4151063/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60b3ac94f14f994f7f8e79e1090a9d4a4151063/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e60b3ac94f14f994f7f8e79e1090a9d4a4151063", "patch": "@@ -1,3 +1,8 @@\n+2011-02-11  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/47172\n+\t* g++.dg/template/inherit6.C: New test.\n+\n 2011-02-10  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/parity-1.c: Use -march=k8."}, {"sha": "241a68e5e4a55572d595d223465f337b88287fd4", "filename": "gcc/testsuite/g++.dg/template/inherit6.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60b3ac94f14f994f7f8e79e1090a9d4a4151063/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finherit6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60b3ac94f14f994f7f8e79e1090a9d4a4151063/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finherit6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finherit6.C?ref=e60b3ac94f14f994f7f8e79e1090a9d4a4151063", "patch": "@@ -0,0 +1,23 @@\n+// Origin PR c++/47172\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do compile }\n+\n+struct A\n+{\n+    int f() const;\n+};\n+\n+template <class T>\n+struct B : A { };\n+\n+template <class T>\n+struct C : B<T>\n+{\n+    void g();\n+};\n+\n+template <class T>\n+void C<T>::g()\n+{\n+    A::f();\n+}"}]}