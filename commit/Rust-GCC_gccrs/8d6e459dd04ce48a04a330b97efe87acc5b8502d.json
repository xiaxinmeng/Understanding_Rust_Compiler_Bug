{"sha": "8d6e459dd04ce48a04a330b97efe87acc5b8502d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ2ZTQ1OWRkMDRjZTQ4YTA0YTMzMGI5N2VmZTg3YWNjNWI4NTAyZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2002-02-16T12:13:41Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2002-02-16T12:13:41Z"}, "message": "decl.c (grokdeclarator): Set typedef_decl for all TYPE_DECLs, remove incorrect comment.\n\ncp:\n\t* decl.c (grokdeclarator): Set typedef_decl for all TYPE_DECLs,\n\tremove incorrect comment. Move #if 0'd code to common path. Use\n\tIMPLICIT_TYPENAME_P. Simplify & reformat ARRAY_TYPE duplication.\ntestsuite:\n\t* g++.dg/abi/bitfield1.C: New test.\n\t* g++.dg/abi/bitfield2.C: New test.\n\nFrom-SVN: r49803", "tree": {"sha": "808e61ad2855ba782e812a67a6537f62d7a73513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/808e61ad2855ba782e812a67a6537f62d7a73513"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d6e459dd04ce48a04a330b97efe87acc5b8502d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d6e459dd04ce48a04a330b97efe87acc5b8502d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d6e459dd04ce48a04a330b97efe87acc5b8502d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d6e459dd04ce48a04a330b97efe87acc5b8502d/comments", "author": null, "committer": null, "parents": [{"sha": "45356ea28763e5ed5fea542d35da4657e00be1c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45356ea28763e5ed5fea542d35da4657e00be1c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45356ea28763e5ed5fea542d35da4657e00be1c0"}], "stats": {"total": 107, "additions": 92, "deletions": 15}, "files": [{"sha": "b8f762830cdd246e450617a1544930a193d3c86d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d6e459dd04ce48a04a330b97efe87acc5b8502d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d6e459dd04ce48a04a330b97efe87acc5b8502d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8d6e459dd04ce48a04a330b97efe87acc5b8502d", "patch": "@@ -1,3 +1,9 @@\n+2002-02-15  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* decl.c (grokdeclarator): Set typedef_decl for all TYPE_DECLs,\n+\tremove incorrect comment. Move #if 0'd code to common path. Use\n+\tIMPLICIT_TYPENAME_P. Simplify & reformat ARRAY_TYPE duplication.\n+\n 2002-02-13  Jason Merrill  <jason@redhat.com>\n \n \t* decl.c (builtin_function): Set TREE_THIS_VOLATILE on return fns.\n@@ -65,7 +71,7 @@\n \n \tPR c++/109\n \t* decl.c (grokdeclarator): Allow friend declarations from\n-\tdependant types.\n+\tdependent types.\n \t* decl2.c (handle_class_head): Don't push into template parm contexts.\n \t* pt.c (push_template_decl_real): Template parm contexts are never\n \tbeing defined."}, {"sha": "697120a30916751e8ddb96de8e50262293c61ac8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d6e459dd04ce48a04a330b97efe87acc5b8502d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d6e459dd04ce48a04a330b97efe87acc5b8502d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8d6e459dd04ce48a04a330b97efe87acc5b8502d", "patch": "@@ -10073,7 +10073,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t}\n \t    }\n \t}\n-      /* C++ aggregate types.  */\n       else if (TREE_CODE (id) == TYPE_DECL)\n \t{\n \t  if (type)\n@@ -10083,6 +10082,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t    {\n \t      type = TREE_TYPE (id);\n \t      TREE_VALUE (spec) = type;\n+\t      typedef_decl = id;\n \t    }\n \t  goto found;\n \t}\n@@ -10097,10 +10097,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t  else\n \t    {\n \t      type = TREE_TYPE (t);\n-#if 0\n-\t      /* See the code below that used this.  */\n-\t      decl_attr = DECL_ATTRIBUTES (id);\n-#endif\n \t      typedef_decl = t;\n \t    }\n \t}\n@@ -10111,6 +10107,11 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n     found: ;\n     }\n \n+#if 0\n+  /* See the code below that used this.  */\n+  if (typedef_decl)\n+    decl_attr = DECL_ATTRIBUTES (typedef_decl);\n+#endif\n   typedef_type = type;\n \n   /* No type at all: default to `int', and set DEFAULTED_INT\n@@ -10157,7 +10158,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n       type = integer_type_node;\n     }\n   \n-  if (type && TREE_CODE (type) == TYPENAME_TYPE && TREE_TYPE (type))\n+  if (type && IMPLICIT_TYPENAME_P (type))\n     {\n       /* The implicit typename extension is deprecated and will be\n \t removed.  Warn about its use now.  */\n@@ -11221,16 +11222,13 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \n   /* Detect the case of an array type of unspecified size\n      which came, as such, direct from a typedef name.\n-     We must copy the type, so that each identifier gets\n-     a distinct type, so that each identifier's size can be\n-     controlled separately by its own initializer.  */\n+     We must copy the type, so that the array's domain can be\n+     individually set by the object's initializer.  */\n \n-  if (type != 0 && typedef_type != 0\n-      && TREE_CODE (type) == ARRAY_TYPE && TYPE_DOMAIN (type) == 0\n+  if (type && typedef_type\n+      && TREE_CODE (type) == ARRAY_TYPE && !TYPE_DOMAIN (type)\n       && TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (typedef_type))\n-    {\n-      type = build_cplus_array_type (TREE_TYPE (type), TYPE_DOMAIN (type));\n-    }\n+    type = build_cplus_array_type (TREE_TYPE (type), NULL_TREE);\n \n   /* Detect where we're using a typedef of function type to declare a\n      function. last_function_parms will not be set, so we must create"}, {"sha": "6da29708d47d7aa16fca7cff84903199be1c568f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d6e459dd04ce48a04a330b97efe87acc5b8502d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d6e459dd04ce48a04a330b97efe87acc5b8502d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8d6e459dd04ce48a04a330b97efe87acc5b8502d", "patch": "@@ -1,3 +1,8 @@\n+2002-02-15  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.dg/abi/bitfield1.C: New test.\n+\t* g++.dg/abi/bitfield2.C: New test.\n+\n 2002-02-15  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* gcc.dg/attr-nest.c: New test."}, {"sha": "c707c85d82b61cc6a626182f59853cc3d6432fe3", "filename": "gcc/testsuite/g++.dg/abi/bitfield1.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d6e459dd04ce48a04a330b97efe87acc5b8502d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d6e459dd04ce48a04a330b97efe87acc5b8502d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield1.C?ref=8d6e459dd04ce48a04a330b97efe87acc5b8502d", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do run }\n+// { dg-options \"-ansi -pedantic-errors -funsigned-bitfields\" }\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 15 Dec 2001 <nathan@codesourcery.com>\n+\n+typedef int Int;\n+typedef signed int SInt;\n+typedef unsigned int UInt;\n+\n+struct A\n+{\n+  SInt bitS : 1;\t// signed\n+  UInt bitU : 1;\t// unsigned\n+  Int bit : 1;\t\t// signedness by -f{signed,unsigned}-bitfields\n+};\n+\n+int main ()\n+{\n+  A a;\n+\n+  a.bitS = 1;\n+  a.bitU = 1;\n+  a.bit = 1;\n+\n+  if (a.bitS != -1)\n+    return 1;\n+  if (a.bitU != 1)\n+    return 2;\n+  if (a.bit != 1)\n+    return 3;\n+\n+  return 0;\n+}"}, {"sha": "d4d1d582649b4def4b20938e4ca8aebe6fc5e47b", "filename": "gcc/testsuite/g++.dg/abi/bitfield2.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d6e459dd04ce48a04a330b97efe87acc5b8502d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d6e459dd04ce48a04a330b97efe87acc5b8502d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield2.C?ref=8d6e459dd04ce48a04a330b97efe87acc5b8502d", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do run }\n+// { dg-options \"-ansi -pedantic-errors -fsigned-bitfields\" }\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 15 Dec 2001 <nathan@codesourcery.com>\n+\n+typedef int Int;\n+typedef signed int SInt;\n+typedef unsigned int UInt;\n+\n+struct A\n+{\n+  SInt bitS : 1;\t// signed\n+  UInt bitU : 1;\t// unsigned\n+  Int bit : 1;\t\t// signedness by -f{signed,unsigned}-bitfields\n+};\n+\n+int main ()\n+{\n+  A a;\n+\n+  a.bitS = 1;\n+  a.bitU = 1;\n+  a.bit = 1;\n+\n+  if (a.bitS != -1)\n+    return 1;\n+  if (a.bitU != 1)\n+    return 2;\n+  if (a.bit != -1)\n+    return 3;\n+\n+  return 0;\n+}"}]}