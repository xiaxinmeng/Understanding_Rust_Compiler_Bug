{"sha": "c75c6d11bcc4a54e608d46a203a19e62cda55785", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc1YzZkMTFiY2M0YTU0ZTYwOGQ0NmEyMDNhMTllNjJjZGE1NTc4NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-08-30T08:25:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-08-30T08:25:36Z"}, "message": "rs6000.c (rs6000_emit_sync): For QI or HI mode used_m...\n\n\t* config/rs6000/rs6000.c (rs6000_emit_sync): For QI or HI mode\n\tused_m, even if it is 32-bit aligned, adjust used_m MEM to have\n\tSImode and update m.  Don't run gen_lowpart_common on arbitrary\n\tmemory address, force it to register first.\n\n\t* gcc.dg/sync-2.c (AI_ALIGN): Define if not defined.\n\t(AI): Add AI_ALIGN.\n\t* gcc.dg/sync-3.c: New test.\n\nFrom-SVN: r127922", "tree": {"sha": "47d702ba085795189fe469e869366223fc7c596c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47d702ba085795189fe469e869366223fc7c596c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c75c6d11bcc4a54e608d46a203a19e62cda55785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c75c6d11bcc4a54e608d46a203a19e62cda55785", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c75c6d11bcc4a54e608d46a203a19e62cda55785", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c75c6d11bcc4a54e608d46a203a19e62cda55785/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a996720c4e3629eb39b2fd02e4c3053f04a3c6dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a996720c4e3629eb39b2fd02e4c3053f04a3c6dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a996720c4e3629eb39b2fd02e4c3053f04a3c6dd"}], "stats": {"total": 49, "additions": 39, "deletions": 10}, "files": [{"sha": "e332be879d8dc16fe0036fdc16f014f7530e204c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75c6d11bcc4a54e608d46a203a19e62cda55785/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75c6d11bcc4a54e608d46a203a19e62cda55785/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c75c6d11bcc4a54e608d46a203a19e62cda55785", "patch": "@@ -1,3 +1,10 @@\n+2007-08-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_emit_sync): For QI or HI mode\n+\tused_m, even if it is 32-bit aligned, adjust used_m MEM to have\n+\tSImode and update m.  Don't run gen_lowpart_common on arbitrary\n+\tmemory address, force it to register first.\n+\n 2007-08-30  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* config/s390/s390.md (\"*add<mode>3_alc_carry1_cc\","}, {"sha": "0af3f698d173aa11c3242a4c19b7461a83ca0e6c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75c6d11bcc4a54e608d46a203a19e62cda55785/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75c6d11bcc4a54e608d46a203a19e62cda55785/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c75c6d11bcc4a54e608d46a203a19e62cda55785", "patch": "@@ -12757,14 +12757,16 @@ rs6000_emit_sync (enum rtx_code code, enum machine_mode mode,\n \t    ishift = GET_MODE_BITSIZE (SImode) - GET_MODE_BITSIZE (mode);\n \n \t  shift = GEN_INT (ishift);\n+\t  used_m = change_address (used_m, SImode, 0);\n \t}\n       else\n \t{\n \t  rtx addrSI, aligned_addr;\n \t  int shift_mask = mode == QImode ? 0x18 : 0x10;\n \n-\t  addrSI = force_reg (SImode, gen_lowpart_common (SImode,\n-\t\t\t\t\t\t\t  XEXP (used_m, 0)));\n+\t  addrSI = gen_lowpart_common (SImode,\n+\t\t\t\t       force_reg (Pmode, XEXP (used_m, 0)));\n+\t  addrSI = force_reg (SImode, addrSI);\n \t  shift = gen_reg_rtx (SImode);\n \n \t  emit_insn (gen_rlwinm (shift, addrSI, GEN_INT (3),\n@@ -12777,14 +12779,14 @@ rs6000_emit_sync (enum rtx_code code, enum machine_mode mode,\n \t\t\t\t       1, OPTAB_LIB_WIDEN);\n \t  used_m = change_address (used_m, SImode, aligned_addr);\n \t  set_mem_align (used_m, 32);\n-\t  /* It's safe to keep the old alias set of USED_M, because\n-\t     the operation is atomic and only affects the original\n-\t     USED_M.  */\n-\t  if (GET_CODE (m) == NOT)\n-\t    m = gen_rtx_NOT (SImode, used_m);\n-\t  else\n-\t    m = used_m;\n \t}\n+      /* It's safe to keep the old alias set of USED_M, because\n+\t the operation is atomic and only affects the original\n+\t USED_M.  */\n+      if (GET_CODE (m) == NOT)\n+\tm = gen_rtx_NOT (SImode, used_m);\n+      else\n+\tm = used_m;\n \n       if (GET_CODE (op) == NOT)\n \t{"}, {"sha": "8e6ffd5904a6fefc4507830f2c37878e57710c65", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75c6d11bcc4a54e608d46a203a19e62cda55785/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75c6d11bcc4a54e608d46a203a19e62cda55785/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c75c6d11bcc4a54e608d46a203a19e62cda55785", "patch": "@@ -1,3 +1,9 @@\n+2007-08-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/sync-2.c (AI_ALIGN): Define if not defined.\n+\t(AI): Add AI_ALIGN.\n+\t* gcc.dg/sync-3.c: New test.\n+\n 2007-08-30  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* lib/gcc-dg.exp (cleanup-profile-file): New procedure."}, {"sha": "9849a705e27890ee83739a58eb6b99b5493fc054", "filename": "gcc/testsuite/gcc.dg/sync-2.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75c6d11bcc4a54e608d46a203a19e62cda55785/gcc%2Ftestsuite%2Fgcc.dg%2Fsync-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75c6d11bcc4a54e608d46a203a19e62cda55785/gcc%2Ftestsuite%2Fgcc.dg%2Fsync-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsync-2.c?ref=c75c6d11bcc4a54e608d46a203a19e62cda55785", "patch": "@@ -8,7 +8,11 @@\n extern void abort (void);\n extern void *memcpy (void *, const void *, __SIZE_TYPE__);\n \n-static char AI[18];\n+#ifndef AI_ALIGN\n+#define AI_ALIGN\n+#endif\n+\n+static char AI[18] AI_ALIGN;\n static char init_qi[18] = { 3,5,7,9,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0 };\n static char test_qi[18] = { 3,5,7,9,1,4,22,-12,7,8,9,7,1,-12,7,8,9,7 };\n "}, {"sha": "bf8abb785de1f937c20036ca3dc630118779b453", "filename": "gcc/testsuite/gcc.dg/sync-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75c6d11bcc4a54e608d46a203a19e62cda55785/gcc%2Ftestsuite%2Fgcc.dg%2Fsync-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75c6d11bcc4a54e608d46a203a19e62cda55785/gcc%2Ftestsuite%2Fgcc.dg%2Fsync-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsync-3.c?ref=c75c6d11bcc4a54e608d46a203a19e62cda55785", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sync_char_short } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-options \"-march=i486 -O2\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+/* { dg-options \"-mcpu=v9 -O2\" { target sparc*-*-* } } */\n+\n+/* Test functionality of the intrinsics for 'short' and 'char'.  */\n+\n+#define AI_ALIGN __attribute__((__aligned__ (4)))\n+#include \"sync-2.c\""}]}