{"sha": "d55ce33a34a8e33d17285228b32cf1e564241a70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU1Y2UzM2EzNGE4ZTMzZDE3Mjg1MjI4YjMyY2YxZTU2NDI0MWE3MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-16T17:46:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-16T17:46:20Z"}, "message": "i386: Avoid mutual recursion between two peephole2s [PR99600]\n\nAs the testcase shows, the compiler hangs and eats all memory when compiling\nit.  This is because in r11-7274-gdecd8fb0128870d0d768ba53dae626913d6d9c54\nI have changed the ix86_avoid_lea_for_addr splitting from a splitter\ninto a peephole2 (because during splitting passes we don't have guaranteed\ndf, while during peephole2 we do).\nThe problem is we have another peephole2 that works in the opposite way,\nwhen seeing split lea (in particular ASHIFT followed by PLUS) it attempts\nto turn it back into a lea.\nIn the past, they were fighting against each other, but as they were in\ndifferent passes, simply the last one won.  So, split after reload\nsplit the lea into shift left and plus, peephole2 reverted that (but, note\nnot perfectly, the peephole2 doesn't understand that something can be placed\ninto lea disp; to be fixed for GCC12) and then another split pass split the\nlea appart again.\nBut my changes and the way peephole2 works means that we endlessly iterate\nover those two, the first peephole2 splits the lea, the second one reverts\nit, the first peephole2 splits the new lea back into new 2 insns and so\nforth forever.\nSo, we need to break the cycle somehow.  This patch does that by not emitting\nan ASHIFT insn from ix86_split_lea_for_addr but emitting a corresponding\nMULT by constant instead, and splitting that later back into ASHIFT.\n\n2021-03-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/99600\n\t* config/i386/i386-expand.c (ix86_split_lea_for_addr): Emit a MULT\n\trather than ASHIFT.\n\t* config/i386/i386.md (mult by 1248 into ashift): New splitter.\n\n\t* gcc.target/i386/pr99600.c: New test.", "tree": {"sha": "7ffa1a7aac0ba612b27ff61e4482ac3c78aa87d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ffa1a7aac0ba612b27ff61e4482ac3c78aa87d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d55ce33a34a8e33d17285228b32cf1e564241a70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d55ce33a34a8e33d17285228b32cf1e564241a70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d55ce33a34a8e33d17285228b32cf1e564241a70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d55ce33a34a8e33d17285228b32cf1e564241a70/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c7bec8bfbc5457c1b57d0e3b67f5d6bc8812e57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c7bec8bfbc5457c1b57d0e3b67f5d6bc8812e57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c7bec8bfbc5457c1b57d0e3b67f5d6bc8812e57"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "ac69eed4d32538d55b147b22b7ce805851a7bda5", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d55ce33a34a8e33d17285228b32cf1e564241a70/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d55ce33a34a8e33d17285228b32cf1e564241a70/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=d55ce33a34a8e33d17285228b32cf1e564241a70", "patch": "@@ -1348,9 +1348,10 @@ ix86_split_lea_for_addr (rtx_insn *insn, rtx operands[], machine_mode mode)\n \t  if (regno0 != regno2)\n \t    emit_insn (gen_rtx_SET (target, parts.index));\n \n-\t  /* Use shift for scaling.  */\n-\t  ix86_emit_binop (ASHIFT, mode, target,\n-\t\t\t   GEN_INT (exact_log2 (parts.scale)));\n+\t  /* Use shift for scaling, but emit it as MULT instead\n+\t     to avoid it being immediately peephole2 optimized back\n+\t     into lea.  */\n+\t  ix86_emit_binop (MULT, mode, target, GEN_INT (parts.scale));\n \n \t  if (parts.base)\n \t    ix86_emit_binop (PLUS, mode, target, parts.base);"}, {"sha": "9ff35d9a6072a7369a6a6d210f3a2e361a7e227e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d55ce33a34a8e33d17285228b32cf1e564241a70/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d55ce33a34a8e33d17285228b32cf1e564241a70/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d55ce33a34a8e33d17285228b32cf1e564241a70", "patch": "@@ -5219,6 +5219,18 @@\n \n   DONE;\n })\n+\n+;; ix86_split_lea_for_addr emits the shifts as MULT to avoid it from being\n+;; peephole2 optimized back into a lea.  Split that into the shift during\n+;; the following split pass.\n+(define_split\n+  [(set (match_operand:SWI48 0 \"general_reg_operand\")\n+\t(mult:SWI48 (match_dup 0) (match_operand:SWI48 1 \"const1248_operand\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (ashift:SWI48 (match_dup 0) (match_dup 1)))\n+              (clobber (reg:CC FLAGS_REG))])]\n+  \"operands[1] = GEN_INT (exact_log2 (INTVAL (operands[1])));\")\n \f\n ;; Add instructions\n "}, {"sha": "c2f2b2294994965a7e1d6ed7fb1a214f85e7667d", "filename": "gcc/testsuite/gcc.target/i386/pr99600.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d55ce33a34a8e33d17285228b32cf1e564241a70/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99600.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d55ce33a34a8e33d17285228b32cf1e564241a70/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99600.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99600.c?ref=d55ce33a34a8e33d17285228b32cf1e564241a70", "patch": "@@ -0,0 +1,16 @@\n+/* PR target/99600 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=atom\" } */\n+\n+char a, b;\n+long c;\n+\n+long\n+foo (void)\n+{\n+  if (a)\n+    c = b == 1 ? 1 << 3 : 1 << 2;\n+  else\n+    c = 0;\n+  return 0;\n+}"}]}