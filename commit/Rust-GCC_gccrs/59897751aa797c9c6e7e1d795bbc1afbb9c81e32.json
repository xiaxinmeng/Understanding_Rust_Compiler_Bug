{"sha": "59897751aa797c9c6e7e1d795bbc1afbb9c81e32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk4OTc3NTFhYTc5N2M5YzZlN2UxZDc5NWJiYzFhZmJiOWM4MWUzMg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-06-29T20:24:47Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-06-29T20:24:47Z"}, "message": "Revert change to ScanUnused to not scan Types\n\nThe scan dead-code pass will take over this role, but lets keep both\nrunning for a while and then we can update ScanUnused to only scan for\nunused labels and variables. Its not possible to rely on name resolution\nto know what symbols are used or not used. Further resolution occurs during\ntype resolution and the dead code pass runs after type resolution.", "tree": {"sha": "df151d2709a246dd0d5d2aba94327d7227eb0b30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df151d2709a246dd0d5d2aba94327d7227eb0b30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59897751aa797c9c6e7e1d795bbc1afbb9c81e32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59897751aa797c9c6e7e1d795bbc1afbb9c81e32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59897751aa797c9c6e7e1d795bbc1afbb9c81e32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59897751aa797c9c6e7e1d795bbc1afbb9c81e32/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0c0ef46d21609326927986f4f8efb0e24638ab9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0c0ef46d21609326927986f4f8efb0e24638ab9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0c0ef46d21609326927986f4f8efb0e24638ab9"}], "stats": {"total": 32, "additions": 10, "deletions": 22}, "files": [{"sha": "18d02a1920afe59be1a5819be803346933fa2ec6", "filename": "gcc/rust/resolve/rust-ast-resolve-unused.h", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59897751aa797c9c6e7e1d795bbc1afbb9c81e32/gcc%2Frust%2Fresolve%2Frust-ast-resolve-unused.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59897751aa797c9c6e7e1d795bbc1afbb9c81e32/gcc%2Frust%2Fresolve%2Frust-ast-resolve-unused.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-unused.h?ref=59897751aa797c9c6e7e1d795bbc1afbb9c81e32", "patch": "@@ -19,7 +19,6 @@\n #ifndef RUST_AST_RESOLVE_UNUSED_H\n #define RUST_AST_RESOLVE_UNUSED_H\n \n-#include \"rust-hir-map.h\"\n #include \"rust-ast-resolve-base.h\"\n \n namespace Rust {\n@@ -36,20 +35,9 @@ class ScanUnused\n       bool ok = r->lookup_canonical_path (decl_node_id, &ident);\n       rust_assert (ok);\n \n-      Analysis::Mappings *map = Analysis::Mappings::get ();\n-      HirId decl_hir_id;\n-      // ScanUnused is conflicting with the dead code analysis here on types and\n-      // functions. So just ignoring the warnings of item which will be handled\n-      // by dead code analysis.\n-      HIR::Item *found_item = nullptr;\n-      if (map->lookup_node_to_hir (r->get_crate_num (), decl_node_id,\n-\t\t\t\t   &decl_hir_id))\n-\t{\n-\t  found_item = map->lookup_hir_item (r->get_crate_num (), decl_hir_id);\n-\t}\n-\n+      bool name_starts_with_underscore = ident.get ().at (0) == '_';\n       if (!r->have_references_for_node (decl_node_id)\n-\t  && ident.get ().at (0) != '_' && !found_item)\n+\t  && !name_starts_with_underscore)\n \t{\n \t  rust_warning_at (locus, 0, \"unused name '%s'\", ident.get ().c_str ());\n \t}\n@@ -61,8 +49,7 @@ class ScanUnused\n   {\n     auto resolver = Resolver::get ();\n     resolver->iterate_name_ribs ([&] (Rib *r) -> void { ScanRib (r); });\n-    // ScanUnused is conflicting with the dead code analysis here on types.\n-    // resolver->iterate_type_ribs ([&] (Rib *r) -> void { ScanRib (r); });\n+    resolver->iterate_type_ribs ([&] (Rib *r) -> void { ScanRib (r); });\n     resolver->iterate_label_ribs ([&] (Rib *r) -> void { ScanRib (r); });\n   }\n };"}, {"sha": "bc02e2ade0f68554779355a6527cdf80231cfbcc", "filename": "gcc/testsuite/rust/compile/torture/cfg_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59897751aa797c9c6e7e1d795bbc1afbb9c81e32/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcfg_attr.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59897751aa797c9c6e7e1d795bbc1afbb9c81e32/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcfg_attr.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcfg_attr.rs?ref=59897751aa797c9c6e7e1d795bbc1afbb9c81e32", "patch": "@@ -3,6 +3,6 @@ use std::env; // Add one line so gccrs doesn't believe we're parsing a shebang\n #[cfg_attr(feature = \"somefeature\", attribute = \"someattr\")]\n struct Feature;\n // { dg-warning \"struct is never constructed\" \"\" { target *-*-* } .-1 }\n+// { dg-warning \"unused name\" \"\" { target *-*-* } .-2 }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "74297e03c7daaa1bee420cacf415c9686551fb93", "filename": "gcc/testsuite/rust/compile/torture/unused1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59897751aa797c9c6e7e1d795bbc1afbb9c81e32/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funused1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59897751aa797c9c6e7e1d795bbc1afbb9c81e32/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funused1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funused1.rs?ref=59897751aa797c9c6e7e1d795bbc1afbb9c81e32", "patch": "@@ -4,6 +4,7 @@ fn test() -> i32 {\n \n fn unused() -> i32 {\n     // { dg-warning \"function is never used: 'unused'\" \"\" { target *-*-* } .-1 }\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-2 }\n     2\n }\n "}, {"sha": "a282c73f186b820dea812c6ec60642e25bf193c9", "filename": "gcc/testsuite/rust/compile/torture/unused_struct.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59897751aa797c9c6e7e1d795bbc1afbb9c81e32/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funused_struct.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59897751aa797c9c6e7e1d795bbc1afbb9c81e32/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funused_struct.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funused_struct.rs?ref=59897751aa797c9c6e7e1d795bbc1afbb9c81e32", "patch": "@@ -1,8 +1,8 @@\n struct Foo {\n-// { dg-warning \"struct is never constructed\" \"\" { target *-*-* } .-1 }\n+    // { dg-warning \"struct is never constructed\" \"\" { target *-*-* } .-1 }\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-2 }\n     one: i32,\n-    two: i32\n+    two: i32,\n }\n \n-fn main() {\n-}\n\\ No newline at end of file\n+fn main() {}"}]}