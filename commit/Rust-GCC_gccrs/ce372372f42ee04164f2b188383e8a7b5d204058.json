{"sha": "ce372372f42ee04164f2b188383e8a7b5d204058", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UzNzIzNzJmNDJlZTA0MTY0ZjJiMTg4MzgzZThhN2I1ZDIwNDA1OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-04-26T18:56:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-04-26T18:56:14Z"}, "message": "re PR inline-asm/39543 (Reload failure on mplayer from SVN)\n\n\tPR inline-asm/39543\n\t* fwprop.c (forward_propagate_asm): New function.\n\t(forward_propagate_and_simplify): Propagate also into __asm, if it\n\tdoesn't increase the number of referenced registers.\n\n\t* gcc.target/i386/pr39543-1.c: New test.\n\t* gcc.target/i386/pr39543-2.c: New test.\n\t* gcc.target/i386/pr39543-3.c: New test.\n\nFrom-SVN: r146813", "tree": {"sha": "88e469cfb5350bf8f7f8f1d7c548232a4a4050f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88e469cfb5350bf8f7f8f1d7c548232a4a4050f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce372372f42ee04164f2b188383e8a7b5d204058", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce372372f42ee04164f2b188383e8a7b5d204058", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce372372f42ee04164f2b188383e8a7b5d204058", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce372372f42ee04164f2b188383e8a7b5d204058/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "92061771a2216bb6fd9062a2f920a3f2194b5cee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92061771a2216bb6fd9062a2f920a3f2194b5cee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92061771a2216bb6fd9062a2f920a3f2194b5cee"}], "stats": {"total": 244, "additions": 240, "deletions": 4}, "files": [{"sha": "ee80aa045d3f67963ba5435eb840cf62036f060f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce372372f42ee04164f2b188383e8a7b5d204058/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce372372f42ee04164f2b188383e8a7b5d204058/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce372372f42ee04164f2b188383e8a7b5d204058", "patch": "@@ -1,5 +1,10 @@\n 2009-04-26  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR inline-asm/39543\n+\t* fwprop.c (forward_propagate_asm): New function.\n+\t(forward_propagate_and_simplify): Propagate also into __asm, if it\n+\tdoesn't increase the number of referenced registers.\n+\n \tPR c/39889\n \t* stmt.c (warn_if_unused_value): Look through NON_LVALUE_EXPR.\n "}, {"sha": "a01de13e3c7a8a4e40791a7e4fb943d9268ae0f7", "filename": "gcc/fwprop.c", "status": "modified", "additions": 85, "deletions": 4, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce372372f42ee04164f2b188383e8a7b5d204058/gcc%2Ffwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce372372f42ee04164f2b188383e8a7b5d204058/gcc%2Ffwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffwprop.c?ref=ce372372f42ee04164f2b188383e8a7b5d204058", "patch": "@@ -1,5 +1,5 @@\n /* RTL-based forward propagation pass for GNU compiler.\n-   Copyright (C) 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n    Contributed by Paolo Bonzini and Steven Bosscher.\n \n This file is part of GCC.\n@@ -852,6 +852,80 @@ forward_propagate_subreg (df_ref use, rtx def_insn, rtx def_set)\n     return false;\n }\n \n+/* Try to replace USE with SRC (defined in DEF_INSN) in __asm.  */\n+\n+static bool\n+forward_propagate_asm (df_ref use, rtx def_insn, rtx def_set, rtx reg)\n+{\n+  rtx use_insn = DF_REF_INSN (use), src, use_pat, asm_operands, new_rtx, *loc;\n+  int speed_p, i;\n+  df_ref *use_vec;\n+\n+  gcc_assert ((DF_REF_FLAGS (use) & DF_REF_IN_NOTE) == 0);\n+\n+  src = SET_SRC (def_set);\n+  use_pat = PATTERN (use_insn);\n+\n+  /* In __asm don't replace if src might need more registers than\n+     reg, as that could increase register pressure on the __asm.  */\n+  use_vec = DF_INSN_USES (def_insn);\n+  if (use_vec[0] && use_vec[1])\n+    return false;\n+\n+  speed_p = optimize_bb_for_speed_p (BLOCK_FOR_INSN (use_insn));\n+  asm_operands = NULL_RTX;\n+  switch (GET_CODE (use_pat))\n+    {\n+    case ASM_OPERANDS:\n+      asm_operands = use_pat;\n+      break;\n+    case SET:\n+      if (MEM_P (SET_DEST (use_pat)))\n+\t{\n+\t  loc = &SET_DEST (use_pat);\n+\t  new_rtx = propagate_rtx (*loc, GET_MODE (*loc), reg, src, speed_p);\n+\t  if (new_rtx)\n+\t    validate_unshare_change (use_insn, loc, new_rtx, true);\n+\t}\n+      asm_operands = SET_SRC (use_pat);\n+      break;\n+    case PARALLEL:\n+      for (i = 0; i < XVECLEN (use_pat, 0); i++)\n+\tif (GET_CODE (XVECEXP (use_pat, 0, i)) == SET)\n+\t  {\n+\t    if (MEM_P (SET_DEST (XVECEXP (use_pat, 0, i))))\n+\t      {\n+\t\tloc = &SET_DEST (XVECEXP (use_pat, 0, i));\n+\t\tnew_rtx = propagate_rtx (*loc, GET_MODE (*loc), reg,\n+\t\t\t\t\t src, speed_p);\n+\t\tif (new_rtx)\n+\t\t  validate_unshare_change (use_insn, loc, new_rtx, true);\n+\t      }\n+\t    asm_operands = SET_SRC (XVECEXP (use_pat, 0, i));\n+\t  }\n+\telse if (GET_CODE (XVECEXP (use_pat, 0, i)) == ASM_OPERANDS)\n+\t  asm_operands = XVECEXP (use_pat, 0, i);\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  gcc_assert (asm_operands && GET_CODE (asm_operands) == ASM_OPERANDS);\n+  for (i = 0; i < ASM_OPERANDS_INPUT_LENGTH (asm_operands); i++)\n+    {\n+      loc = &ASM_OPERANDS_INPUT (asm_operands, i);\n+      new_rtx = propagate_rtx (*loc, GET_MODE (*loc), reg, src, speed_p);\n+      if (new_rtx)\n+\tvalidate_unshare_change (use_insn, loc, new_rtx, true);\n+    }\n+\n+  if (num_changes_pending () == 0 || !apply_change_group ())\n+    return false;\n+\n+  num_changes++;\n+  return true;\n+}\n+\n /* Try to replace USE with SRC (defined in DEF_INSN) and simplify the\n    result.  */\n \n@@ -863,12 +937,16 @@ forward_propagate_and_simplify (df_ref use, rtx def_insn, rtx def_set)\n   rtx src, reg, new_rtx, *loc;\n   bool set_reg_equal;\n   enum machine_mode mode;\n+  int asm_use = -1;\n+\n+  if (INSN_CODE (use_insn) < 0)\n+    asm_use = asm_noperands (PATTERN (use_insn));\n \n-  if (!use_set)\n+  if (!use_set && asm_use < 0)\n     return false;\n \n   /* Do not propagate into PC, CC0, etc.  */\n-  if (GET_MODE (SET_DEST (use_set)) == VOIDmode)\n+  if (use_set && GET_MODE (SET_DEST (use_set)) == VOIDmode)\n     return false;\n \n   /* If def and use are subreg, check if they match.  */\n@@ -900,7 +978,7 @@ forward_propagate_and_simplify (df_ref use, rtx def_insn, rtx def_set)\n   if (MEM_P (src) && MEM_READONLY_P (src))\n     {\n       rtx x = avoid_constant_pool_reference (src);\n-      if (x != src)\n+      if (x != src && use_set)\n \t{\n           rtx note = find_reg_note (use_insn, REG_EQUAL, NULL_RTX);\n \t  rtx old_rtx = note ? XEXP (note, 0) : SET_SRC (use_set);\n@@ -911,6 +989,9 @@ forward_propagate_and_simplify (df_ref use, rtx def_insn, rtx def_set)\n       return false;\n     }\n \n+  if (asm_use >= 0)\n+    return forward_propagate_asm (use, def_insn, def_set, reg);\n+\n   /* Else try simplifying.  */\n \n   if (DF_REF_TYPE (use) == DF_REF_REG_MEM_STORE)"}, {"sha": "c9f21cff876e99b876e7569428250c76fd3d5046", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce372372f42ee04164f2b188383e8a7b5d204058/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce372372f42ee04164f2b188383e8a7b5d204058/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ce372372f42ee04164f2b188383e8a7b5d204058", "patch": "@@ -1,5 +1,10 @@\n 2009-04-26  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR inline-asm/39543\n+\t* gcc.target/i386/pr39543-1.c: New test.\n+\t* gcc.target/i386/pr39543-2.c: New test.\n+\t* gcc.target/i386/pr39543-3.c: New test.\n+\n \tPR c/39889\n \t* gcc.dg/Wunused-value-3.c: New test.\n "}, {"sha": "a8442b2e6cc4ef05c41d326d11a4243920d730fe", "filename": "gcc/testsuite/gcc.target/i386/pr39543-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce372372f42ee04164f2b188383e8a7b5d204058/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39543-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce372372f42ee04164f2b188383e8a7b5d204058/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39543-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39543-1.c?ref=ce372372f42ee04164f2b188383e8a7b5d204058", "patch": "@@ -0,0 +1,52 @@\n+/* PR inline-asm/39543 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fomit-frame-pointer\" } */\n+\n+float __attribute__ ((aligned (16))) s0[128];\n+const float s1 = 0.707;\n+float s2[8] __attribute__ ((aligned (16)));\n+float s3[8] __attribute__ ((aligned (16)));\n+float s4[16] __attribute__ ((aligned (16)));\n+float s5[16] __attribute__ ((aligned (16)));\n+\n+void\n+foo (int k, float *x, float *y, const float *d, const float *z)\n+{\n+  float *a, *b, *c, *e;\n+\n+  a = x + 2 * k;\n+  b = a + 2 * k;\n+  c = b + 2 * k;\n+  e = y + 2 * k;\n+  __asm__ volatile (\"\"\n+\t\t    : \"=m\" (x[0]), \"=m\" (b[0]), \"=m\" (a[0]), \"=m\" (c[0])\n+\t\t    : \"m\" (y[0]), \"m\" (y[k * 2]), \"m\" (x[0]), \"m\" (a[0])\n+\t\t    : \"memory\");\n+  for (;;)\n+    {\n+      __asm__ volatile (\"\"\n+\t\t\t:\n+\t\t\t: \"m\" (y[2]), \"m\" (d[2]), \"m\" (e[2]), \"m\" (z[2])\n+\t\t\t: \"memory\");\n+      if (!--k)\n+\tbreak;\n+    }\n+  __asm__ volatile (\"\"\n+\t\t    : \"=m\" (x[2]), \"=m\" (x[10]), \"=m\" (x[6]), \"=m\" (x[14])\n+\t\t    : \"m\" (y[2]), \"m\" (y[6]), \"m\" (x[2]), \"m\" (x[6]),\n+\t\t      \"m\" (y[18]), \"m\" (s1)\n+\t\t    : \"memory\");\n+}\n+\n+void\n+bar (float *a)\n+{\n+  foo (4, a, a + 16, s2, s3);\n+  foo (8, a, a + 32, s4, s5);\n+}\n+\n+void\n+baz (void)\n+{\n+  bar (s0);\n+}"}, {"sha": "c292041a7006b4ee72af5221d595e5191bcc412f", "filename": "gcc/testsuite/gcc.target/i386/pr39543-2.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce372372f42ee04164f2b188383e8a7b5d204058/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39543-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce372372f42ee04164f2b188383e8a7b5d204058/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39543-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39543-2.c?ref=ce372372f42ee04164f2b188383e8a7b5d204058", "patch": "@@ -0,0 +1,51 @@\n+/* PR inline-asm/39543 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+float __attribute__ ((aligned (16))) s0[128];\n+const float s1 = 0.707;\n+float s2[8] __attribute__ ((aligned (16)));\n+float s3[8] __attribute__ ((aligned (16)));\n+float s4[16] __attribute__ ((aligned (16)));\n+float s5[16] __attribute__ ((aligned (16)));\n+\n+void\n+foo (int k, float *x, float *y, const float *d, const float *z)\n+{\n+  float *a, *b, *c, *e;\n+\n+  a = x + 2 * k;\n+  b = a + 2 * k;\n+  c = b + 2 * k;\n+  e = y + 2 * k;\n+  __asm__ volatile (\"\"\n+\t\t    : \"=m\" (x[0]), \"=m\" (b[0]), \"=m\" (a[0]), \"=m\" (c[0])\n+\t\t    : \"m\" (y[0]), \"m\" (y[k * 2]), \"m\" (x[0]), \"m\" (a[0])\n+\t\t    : \"memory\");\n+  for (;;)\n+    {\n+      __asm__ volatile (\"\"\n+\t\t\t:\n+\t\t\t: \"m\" (y[2]), \"m\" (d[2]), \"m\" (e[2]), \"m\" (z[2])\n+\t\t\t: \"memory\");\n+      if (!--k)\n+\tbreak;\n+    }\n+  __asm__ volatile (\"\"\n+\t\t    : \"=m\" (x[2]), \"=m\" (x[10]), \"=m\" (x[6]), \"=m\" (x[14])\n+\t\t    : \"m\" (y[2]), \"m\" (y[6]), \"m\" (x[2]), \"m\" (x[6]), \"m\" (s1)\n+\t\t    : \"memory\");\n+}\n+\n+void\n+bar (float *a)\n+{\n+  foo (4, a, a + 16, s2, s3);\n+  foo (8, a, a + 32, s4, s5);\n+}\n+\n+void\n+baz (void)\n+{\n+  bar (s0);\n+}"}, {"sha": "4e103e671f9213801d548f7769c7a13d46fb57fc", "filename": "gcc/testsuite/gcc.target/i386/pr39543-3.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce372372f42ee04164f2b188383e8a7b5d204058/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39543-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce372372f42ee04164f2b188383e8a7b5d204058/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39543-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39543-3.c?ref=ce372372f42ee04164f2b188383e8a7b5d204058", "patch": "@@ -0,0 +1,42 @@\n+/* PR inline-asm/39543 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int s[128];\n+\n+void\n+f1 (void)\n+{\n+  int i;\n+  asm volatile (\"# %0 %1 %2 %3 %4 %5 %6 %7 %8 %9 %10 %11 %12 %13 %14 %15 %16 %17\"\n+\t\t: \"=r\" (i)\n+\t\t: \"m\" (s[0]), \"m\" (s[2]), \"m\" (s[4]), \"m\" (s[6]), \"m\" (s[8]),\n+\t\t  \"m\" (s[10]), \"m\" (s[12]), \"m\" (s[14]), \"m\" (s[16]), \"m\" (s[18]),\n+\t\t  \"m\" (s[20]), \"m\" (s[22]), \"m\" (s[24]), \"m\" (s[26]), \"m\" (s[28]),\n+\t\t  \"m\" (s[30]), \"m\" (s[32]));\n+  asm volatile (\"# %0 %1 %2 %3 %4 %5 %6 %7 %8 %9 %10 %11 %12 %13 %14 %15 %16 %17\"\n+\t\t: \"=r\" (i)\n+\t\t: \"m\" (s[0]), \"m\" (s[2]), \"m\" (s[4]), \"m\" (s[6]), \"m\" (s[8]),\n+\t\t  \"m\" (s[10]), \"m\" (s[12]), \"m\" (s[14]), \"m\" (s[16]), \"m\" (s[18]),\n+\t\t  \"m\" (s[20]), \"m\" (s[22]), \"m\" (s[24]), \"m\" (s[26]), \"m\" (s[28]),\n+\t\t  \"m\" (s[30]), \"m\" (s[32]));\n+}\n+\n+void\n+f2 (int *q)\n+{\n+  int i;\n+  int *p = q + 32;\n+  asm volatile (\"# %0 %1 %2 %3 %4 %5 %6 %7 %8 %9 %10 %11 %12 %13 %14 %15 %16 %17\"\n+\t\t: \"=r\" (i)\n+\t\t: \"m\" (p[0]), \"m\" (p[2]), \"m\" (p[4]), \"m\" (p[6]), \"m\" (p[8]),\n+\t\t  \"m\" (p[10]), \"m\" (p[12]), \"m\" (p[14]), \"m\" (p[16]), \"m\" (p[18]),\n+\t\t  \"m\" (p[20]), \"m\" (p[22]), \"m\" (p[24]), \"m\" (p[26]), \"m\" (p[28]),\n+\t\t  \"m\" (p[30]), \"m\" (p[32]));\n+  asm volatile (\"# %0 %1 %2 %3 %4 %5 %6 %7 %8 %9 %10 %11 %12 %13 %14 %15 %16 %17\"\n+\t\t: \"=r\" (i)\n+\t\t: \"m\" (p[0]), \"m\" (p[2]), \"m\" (p[4]), \"m\" (p[6]), \"m\" (p[8]),\n+\t\t  \"m\" (p[10]), \"m\" (p[12]), \"m\" (p[14]), \"m\" (p[16]), \"m\" (p[18]),\n+\t\t  \"m\" (p[20]), \"m\" (p[22]), \"m\" (p[24]), \"m\" (p[26]), \"m\" (p[28]),\n+\t\t  \"m\" (p[30]), \"m\" (p[32]));\n+}"}]}