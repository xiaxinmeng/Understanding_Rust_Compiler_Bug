{"sha": "e72ed4a733be57abe58ae396a70fdacea138980d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTcyZWQ0YTczM2JlNTdhYmU1OGFlMzk2YTcwZmRhY2VhMTM4OTgwZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2003-09-25T07:04:05Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2003-09-25T07:04:05Z"}, "message": "mips.c (mips_va_arg): Handle arguments that must be passed on the stack.\n\n\t* config/mips/mips.c (mips_va_arg): Handle arguments that must be\n\tpassed on the stack.\n\nFrom-SVN: r71760", "tree": {"sha": "0a1c294991078642b8d4aba4868ea813127a9c88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a1c294991078642b8d4aba4868ea813127a9c88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e72ed4a733be57abe58ae396a70fdacea138980d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e72ed4a733be57abe58ae396a70fdacea138980d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e72ed4a733be57abe58ae396a70fdacea138980d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e72ed4a733be57abe58ae396a70fdacea138980d/comments", "author": null, "committer": null, "parents": [{"sha": "4d6d5bb21aaf986588d42e2b260868ea462fb3bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d6d5bb21aaf986588d42e2b260868ea462fb3bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d6d5bb21aaf986588d42e2b260868ea462fb3bb"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "d581d45ed147cd620fde3de2916d88649aae4826", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72ed4a733be57abe58ae396a70fdacea138980d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72ed4a733be57abe58ae396a70fdacea138980d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e72ed4a733be57abe58ae396a70fdacea138980d", "patch": "@@ -1,3 +1,8 @@\n+2003-09-25  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.c (mips_va_arg): Handle arguments that must be\n+\tpassed on the stack.\n+\n 2003-09-25  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* config.gcc (widely ported systems section): Mostly alphabetize"}, {"sha": "3a9aac3b37b913c5233fc010279c4ce4d7b58178", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72ed4a733be57abe58ae396a70fdacea138980d/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72ed4a733be57abe58ae396a70fdacea138980d/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=e72ed4a733be57abe58ae396a70fdacea138980d", "patch": "@@ -4277,6 +4277,7 @@ mips_va_arg (tree valist, tree type)\n     {\n       /* Not EABI.  */\n       int align;\n+      HOST_WIDE_INT min_offset;\n \n       /* ??? The original va-mips.h did always align, despite the fact\n \t that alignments <= UNITS_PER_WORD are preserved by the va_arg\n@@ -4295,6 +4296,24 @@ mips_va_arg (tree valist, tree type)\n       t = build (PLUS_EXPR, TREE_TYPE (valist), valist,\n \t\t build_int_2 (align - 1, 0));\n       t = build (BIT_AND_EXPR, TREE_TYPE (t), t, build_int_2 (-align, -1));\n+\n+      /* If arguments of type TYPE must be passed on the stack,\n+\t set MIN_OFFSET to the offset of the first stack parameter.  */\n+      if (!MUST_PASS_IN_STACK (TYPE_MODE (type), type))\n+\tmin_offset = 0;\n+      else if (TARGET_NEWABI)\n+\tmin_offset = current_function_pretend_args_size;\n+      else\n+\tmin_offset = REG_PARM_STACK_SPACE (current_function_decl);\n+\n+      /* Make sure the new address is at least MIN_OFFSET bytes from\n+\t the incoming argument pointer.  */\n+      if (min_offset > 0)\n+\tt = build (MAX_EXPR, TREE_TYPE (valist), t,\n+\t\t   make_tree (TREE_TYPE (valist),\n+\t\t\t      plus_constant (virtual_incoming_args_rtx,\n+\t\t\t\t\t     min_offset)));\n+\n       t = build (MODIFY_EXPR, TREE_TYPE (valist), valist, t);\n       expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n "}]}