{"sha": "68fd7765e4b8719538b920e4e868910a4c15db22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhmZDc3NjVlNGI4NzE5NTM4YjkyMGU0ZTg2ODkxMGE0YzE1ZGIyMg==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2011-03-18T15:27:10Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2011-03-18T15:27:10Z"}, "message": "avr.h (RET_REGISTER, [...]): Remove.\n\n\t* config/avr/avr.h (RET_REGISTER, LIBCALL_VALUE,\n\tFUNCTION_VALUE_REGNO_P): Remove.\n\t* config/avr/avr-protos.h (avr_ret_register, avr_libcall_value):\n\tRemove.\n\t* config/avr/avr.c (avr_ret_register): Make static inline.\n\t(avr_function_value_regno_p): New function.\n\t(avr_libcall_value): Make static. Add 'func' argument.\n\t(avr_function_value): Make static. Rename 'func' argument to\n\t'fn_decl_or_type', forward it to avr_libcall_value. Call\n\tavr_ret_register function instead of RET_REGISTER macro.\n \t(TARGET_LIBCALL_VALUE, TARGET_FUNCTION_VALUE_REGNO_P): Define.\n\nFrom-SVN: r171149", "tree": {"sha": "c75bc75d87bddcaa43ea31c1df93278f3455de64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c75bc75d87bddcaa43ea31c1df93278f3455de64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68fd7765e4b8719538b920e4e868910a4c15db22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68fd7765e4b8719538b920e4e868910a4c15db22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68fd7765e4b8719538b920e4e868910a4c15db22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68fd7765e4b8719538b920e4e868910a4c15db22/comments", "author": null, "committer": null, "parents": [{"sha": "b3f1cee49f3f9c59cfb7e05a7dc7a2b6e480305a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3f1cee49f3f9c59cfb7e05a7dc7a2b6e480305a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3f1cee49f3f9c59cfb7e05a7dc7a2b6e480305a"}], "stats": {"total": 68, "additions": 48, "deletions": 20}, "files": [{"sha": "4b33a39ba82b778792dce497c015ede794bd0af2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68fd7765e4b8719538b920e4e868910a4c15db22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68fd7765e4b8719538b920e4e868910a4c15db22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68fd7765e4b8719538b920e4e868910a4c15db22", "patch": "@@ -1,3 +1,17 @@\n+2011-03-18  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/avr/avr.h (RET_REGISTER, LIBCALL_VALUE,\n+\tFUNCTION_VALUE_REGNO_P): Remove.\n+\t* config/avr/avr-protos.h (avr_ret_register, avr_libcall_value):\n+\tRemove.\n+\t* config/avr/avr.c (avr_ret_register): Make static inline.\n+\t(avr_function_value_regno_p): New function.\n+\t(avr_libcall_value): Make static. Add 'func' argument.\n+\t(avr_function_value): Make static. Rename 'func' argument to\n+\t'fn_decl_or_type', forward it to avr_libcall_value. Call\n+\tavr_ret_register function instead of RET_REGISTER macro.\n+ \t(TARGET_LIBCALL_VALUE, TARGET_FUNCTION_VALUE_REGNO_P): Define.\n+\n 2011-03-18  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/23372"}, {"sha": "67e915a569e819175808c4a27448042fdd395fb0", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68fd7765e4b8719538b920e4e868910a4c15db22/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68fd7765e4b8719538b920e4e868910a4c15db22/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=68fd7765e4b8719538b920e4e868910a4c15db22", "patch": "@@ -1,6 +1,7 @@\n /* Prototypes for exported functions defined in avr.c\n    \n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2006, 2007, 2008, 2009, 2010,\n+   2011\n    Free Software Foundation, Inc.\n    Contributed by Denis Chertykov (chertykov@gmail.com)\n \n@@ -23,7 +24,6 @@\n \n extern int function_arg_regno_p (int r);\n extern void avr_cpu_cpp_builtins (struct cpp_reader * pfile);\n-extern int avr_ret_register (void);\n extern enum reg_class avr_regno_reg_class (int r);\n extern void asm_globalize_label (FILE *file, const char *name);\n extern void avr_asm_declare_function_name (FILE *, const char *, tree);\n@@ -85,7 +85,6 @@ extern const char *avr_out_sbxx_branch (rtx insn, rtx operands[]);\n \n extern int extra_constraint_Q (rtx x);\n extern int adjust_insn_length (rtx insn, int len);\n-extern rtx avr_libcall_value (enum machine_mode mode);\n extern const char *output_reload_inhi (rtx insn, rtx *operands, int *len);\n extern const char *output_reload_insisf (rtx insn, rtx *operands, int *len);\n extern enum reg_class secondary_input_reload_class (enum reg_class,"}, {"sha": "6709c365ce95e3f5e8ef3b1f30ef7e11e97d08e3", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68fd7765e4b8719538b920e4e868910a4c15db22/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68fd7765e4b8719538b920e4e868910a4c15db22/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=68fd7765e4b8719538b920e4e868910a4c15db22", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines for insn-output.c for ATMEL AVR micro controllers\n    Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2006, 2007, 2008,\n-   2009, 2010 Free Software Foundation, Inc.\n+   2009, 2010, 2011 Free Software Foundation, Inc.\n    Contributed by Denis Chertykov (chertykov@gmail.com)\n \n    This file is part of GCC.\n@@ -75,6 +75,8 @@ static void avr_asm_function_end_prologue (FILE *);\n static void avr_asm_function_begin_epilogue (FILE *);\n static bool avr_cannot_modify_jumps_p (void);\n static rtx avr_function_value (const_tree, const_tree, bool);\n+static rtx avr_libcall_value (enum machine_mode, const_rtx);\n+static bool avr_function_value_regno_p (const unsigned int);\n static void avr_insert_attributes (tree, tree *);\n static void avr_asm_init_sections (void);\n static unsigned int avr_section_type_flags (tree, const char *, int);\n@@ -166,8 +168,14 @@ static const struct default_options avr_option_optimization_table[] =\n #define TARGET_ASM_FUNCTION_END_PROLOGUE avr_asm_function_end_prologue\n #undef TARGET_ASM_FUNCTION_BEGIN_EPILOGUE\n #define TARGET_ASM_FUNCTION_BEGIN_EPILOGUE avr_asm_function_begin_epilogue\n+\n #undef TARGET_FUNCTION_VALUE\n #define TARGET_FUNCTION_VALUE avr_function_value\n+#undef TARGET_LIBCALL_VALUE\n+#define TARGET_LIBCALL_VALUE avr_libcall_value\n+#undef TARGET_FUNCTION_VALUE_REGNO_P\n+#define TARGET_FUNCTION_VALUE_REGNO_P avr_function_value_regno_p\n+\n #undef TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE avr_attribute_table\n #undef TARGET_ASM_FUNCTION_RODATA_SECTION\n@@ -5910,36 +5918,49 @@ avr_reorg (void)\n \n /* Returns register number for function return value.*/\n \n-int\n+static inline int\n avr_ret_register (void)\n {\n   return 24;\n }\n \n+/* Worker function for TARGET_FUNCTION_VALUE_REGNO_P.  */\n+\n+static bool\n+avr_function_value_regno_p (const unsigned int regno)\n+{\n+  return (regno == avr_ret_register ());\n+}\n+\n /* Create an RTX representing the place where a\n    library function returns a value of mode MODE.  */\n \n-rtx\n-avr_libcall_value (enum machine_mode mode)\n+static rtx\n+avr_libcall_value (enum machine_mode mode,\n+\t\t   const_rtx func ATTRIBUTE_UNUSED)\n {\n   int offs = GET_MODE_SIZE (mode);\n   if (offs < 2)\n     offs = 2;\n-  return gen_rtx_REG (mode, RET_REGISTER + 2 - offs);\n+  return gen_rtx_REG (mode, avr_ret_register () + 2 - offs);\n }\n \n /* Create an RTX representing the place where a\n    function returns a value of data type VALTYPE.  */\n \n-rtx\n-avr_function_value (const_tree type, \n-\t\t    const_tree func ATTRIBUTE_UNUSED, \n+static rtx\n+avr_function_value (const_tree type, const_tree fn_decl_or_type,\n \t\t    bool outgoing ATTRIBUTE_UNUSED)\n {\n   unsigned int offs;\n-  \n+  const_rtx func = fn_decl_or_type;\n+\n+  if (fn_decl_or_type\n+      && !DECL_P (fn_decl_or_type))\n+  fn_decl_or_type = NULL;\n+\n   if (TYPE_MODE (type) != BLKmode)\n-    return avr_libcall_value (TYPE_MODE (type));\n+    return avr_libcall_value (TYPE_MODE (type), func);\n   \n   offs = int_size_in_bytes (type);\n   if (offs < 2)\n@@ -5949,7 +5970,7 @@ avr_function_value (const_tree type,\n   else if (offs > GET_MODE_SIZE (SImode) && offs < GET_MODE_SIZE (DImode))\n     offs = GET_MODE_SIZE (DImode);\n   \n-  return gen_rtx_REG (BLKmode, RET_REGISTER + 2 - offs);\n+  return gen_rtx_REG (BLKmode, avr_ret_register () + 2 - offs);\n }\n \n int"}, {"sha": "146ab6793dee2367c8702080d6ed52ff0ff47e74", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68fd7765e4b8719538b920e4e868910a4c15db22/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68fd7765e4b8719538b920e4e868910a4c15db22/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=68fd7765e4b8719538b920e4e868910a4c15db22", "patch": "@@ -380,12 +380,6 @@ typedef struct avr_args {\n \n extern int avr_reg_order[];\n \n-#define RET_REGISTER avr_ret_register ()\n-\n-#define LIBCALL_VALUE(MODE)  avr_libcall_value (MODE)\n-\n-#define FUNCTION_VALUE_REGNO_P(N) ((int) (N) == RET_REGISTER)\n-\n #define DEFAULT_PCC_STRUCT_RETURN 0\n \n #define EPILOGUE_USES(REGNO) avr_epilogue_uses(REGNO)"}]}