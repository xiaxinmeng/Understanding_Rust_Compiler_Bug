{"sha": "878f32c33e0bdaa914c395f54c24c930d3c88911", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc4ZjMyYzMzZTBiZGFhOTE0YzM5NWY1NGMyNGM5MzBkM2M4ODkxMQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-03-10T20:32:13Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-03-10T20:32:13Z"}, "message": "gcc.c (print_file_name, [...]): Qualify a char* with the `const' keyword.\n\n        * gcc.c (print_file_name, print_prog_name, spec_machine,\n        read_specs, set_spec, lookup_compiler, build_search_list,\n        putenv_from_prefixes, find_a_file, record_temp_file,\n        delete_if_ordinary, handle_braces, do_spec, do_spec_1, find_file,\n        is_directory, validate_switches, used_arg, default_arg,\n        pfatal_with_name, perror_with_name, pfatal_pexecute, fatal, error,\n        notice, add_preprocessor_option, add_assembler_option,\n        add_linker_option, process_command, execute,\n        unused_prefix_warnings, clear_args, fatal_error,\n        lang_specific_driver, user_specs, compiler, link_command_spec,\n        option_map, translate_options, make_temp_file, temp_name,\n        programname, path_prefix, machine_suffix, just_machine_suffix,\n        gcc_exec_prefix, standard_exec_prefix, standard_exec_prefix_1,\n        md_exec_prefix, md_startfile_prefix, md_startfile_prefix_1,\n        standard_startfile_prefix, standard_startfile_prefix_1,\n        standard_startfile_prefix_2, tooldir_base_prefix, tooldir_prefix,\n        multilib_dir, temp_filename, temp_file, command, switchstr,\n        infile, outfiles, input_filename, input_basename, input_suffix,\n        check_live_switch, main): Qualify a char* with the `const' keyword.\n\nFrom-SVN: r25676", "tree": {"sha": "e8502c6403187b41b7b3ea589dd579184214e52a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8502c6403187b41b7b3ea589dd579184214e52a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/878f32c33e0bdaa914c395f54c24c930d3c88911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/878f32c33e0bdaa914c395f54c24c930d3c88911", "html_url": "https://github.com/Rust-GCC/gccrs/commit/878f32c33e0bdaa914c395f54c24c930d3c88911", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/878f32c33e0bdaa914c395f54c24c930d3c88911/comments", "author": null, "committer": null, "parents": [{"sha": "ac7c5af52f44884c7839377279f6f76b97f080ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac7c5af52f44884c7839377279f6f76b97f080ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac7c5af52f44884c7839377279f6f76b97f080ab"}], "stats": {"total": 418, "additions": 228, "deletions": 190}, "files": [{"sha": "26c650a22e1ad8a4fea5429fe160c1d094e0a6f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878f32c33e0bdaa914c395f54c24c930d3c88911/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878f32c33e0bdaa914c395f54c24c930d3c88911/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=878f32c33e0bdaa914c395f54c24c930d3c88911", "patch": "@@ -1,3 +1,25 @@\n+Wed Mar 10 23:11:19 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.c (print_file_name, print_prog_name, spec_machine,\n+ \tread_specs, set_spec, lookup_compiler, build_search_list,\n+ \tputenv_from_prefixes, find_a_file, record_temp_file,\n+ \tdelete_if_ordinary, handle_braces, do_spec, do_spec_1, find_file,\n+ \tis_directory, validate_switches, used_arg, default_arg,\n+ \tpfatal_with_name, perror_with_name, pfatal_pexecute, fatal, error,\n+ \tnotice, add_preprocessor_option, add_assembler_option,\n+ \tadd_linker_option, process_command, execute,\n+ \tunused_prefix_warnings, clear_args, fatal_error,\n+ \tlang_specific_driver, user_specs, compiler, link_command_spec,\n+ \toption_map, translate_options, make_temp_file, temp_name,\n+ \tprogramname, path_prefix, machine_suffix, just_machine_suffix,\n+ \tgcc_exec_prefix, standard_exec_prefix, standard_exec_prefix_1,\n+ \tmd_exec_prefix, md_startfile_prefix, md_startfile_prefix_1,\n+ \tstandard_startfile_prefix, standard_startfile_prefix_1,\n+ \tstandard_startfile_prefix_2, tooldir_base_prefix, tooldir_prefix,\n+ \tmultilib_dir, temp_filename, temp_file, command, switchstr,\n+ \tinfile, outfiles, input_filename, input_basename, input_suffix,\n+ \tcheck_live_switch, main): Qualify a char* with the `const' keyword.\n+\n Wed Mar 10 20:28:29 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* gcse.c: Update various comments."}, {"sha": "fc842c82afad2872ac6f3453bb3800af57eefca7", "filename": "gcc/gcc.c", "status": "modified", "additions": 206, "deletions": 190, "changes": 396, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/878f32c33e0bdaa914c395f54c24c930d3c88911/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/878f32c33e0bdaa914c395f54c24c930d3c88911/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=878f32c33e0bdaa914c395f54c24c930d3c88911", "patch": "@@ -92,11 +92,11 @@ static int print_search_dirs;\n /* Flag saying to print the full filename of this file\n    as found through our usual search mechanism.  */\n \n-static char *print_file_name = NULL;\n+static const char *print_file_name = NULL;\n \n /* As print_file_name, but search for executable file.  */\n \n-static char *print_prog_name = NULL;\n+static const char *print_prog_name = NULL;\n \n /* Flag saying to print the relative path we'd use to\n    find libgcc.a given the current compiler flags.  */\n@@ -132,7 +132,7 @@ static char *spec_version = DEFAULT_TARGET_VERSION;\n \n /* The target machine specified with -b.  */\n \n-static char *spec_machine = DEFAULT_TARGET_MACHINE;\n+static const char *spec_machine = DEFAULT_TARGET_MACHINE;\n \n /* Nonzero if cross-compiling.\n    When -b is used, the value comes from the `specs' file.  */\n@@ -164,50 +164,59 @@ extern char *version_string;\n struct path_prefix;\n \n static void init_spec\t\tPROTO((void));\n-static void read_specs\t\tPROTO((char *, int));\n-static void set_spec\t\tPROTO((char *, char *));\n-static struct compiler *lookup_compiler PROTO((char *, size_t, char *));\n-static char *build_search_list\tPROTO((struct path_prefix *, char *, int));\n-static void putenv_from_prefixes PROTO((struct path_prefix *, char *));\n-static char *find_a_file\tPROTO((struct path_prefix *, char *, int));\n+static void read_specs\t\tPROTO((const char *, int));\n+static void set_spec\t\tPROTO((const char *, const char *));\n+static struct compiler *lookup_compiler PROTO((const char *, size_t, const char *));\n+static char *build_search_list\tPROTO((struct path_prefix *, const char *, int));\n+static void putenv_from_prefixes PROTO((struct path_prefix *, const char *));\n+static char *find_a_file\tPROTO((struct path_prefix *, const char *, int));\n static void add_prefix\t\tPROTO((struct path_prefix *, const char *,\n \t\t\t\t       const char *, int, int, int *));\n static char *skip_whitespace\tPROTO((char *));\n-static void record_temp_file\tPROTO((char *, int, int));\n-static void delete_if_ordinary\tPROTO((char *));\n+static void record_temp_file\tPROTO((const char *, int, int));\n+static void delete_if_ordinary\tPROTO((const char *));\n static void delete_temp_files\tPROTO((void));\n static void delete_failure_queue PROTO((void));\n static void clear_failure_queue PROTO((void));\n static int check_live_switch\tPROTO((int, int));\n-static char *handle_braces\tPROTO((char *));\n+static const char *handle_braces PROTO((const char *));\n static char *save_string\tPROTO((const char *, int));\n-extern int do_spec\t\tPROTO((char *));\n-static int do_spec_1\t\tPROTO((char *, int, char *));\n-static char *find_file\t\tPROTO((char *));\n-static int is_directory\t\tPROTO((char *, char *, int));\n-static void validate_switches\tPROTO((char *));\n+extern int do_spec\t\tPROTO((const char *));\n+static int do_spec_1\t\tPROTO((const char *, int, const char *));\n+static const char *find_file\tPROTO((const char *));\n+static int is_directory\t\tPROTO((const char *, const char *, int));\n+static void validate_switches\tPROTO((const char *));\n static void validate_all_switches PROTO((void));\n static void give_switch\t\tPROTO((int, int, int));\n-static int used_arg\t\tPROTO((char *, int));\n-static int default_arg\t\tPROTO((char *, int));\n+static int used_arg\t\tPROTO((const char *, int));\n+static int default_arg\t\tPROTO((const char *, int));\n static void set_multilib_dir\tPROTO((void));\n static void print_multilib_info\tPROTO((void));\n-static void pfatal_with_name\tPROTO((char *)) ATTRIBUTE_NORETURN;\n-static void perror_with_name\tPROTO((char *));\n-static void pfatal_pexecute\tPROTO((char *, char *)) ATTRIBUTE_NORETURN;\n-static void fatal\t\tPVPROTO((char *, ...)) ATTRIBUTE_NORETURN;\n-static void error\t\tPVPROTO((char *, ...));\n-static void fatal\t\tPVPROTO((char *, ...))\n+static void pfatal_with_name\tPROTO((const char *)) ATTRIBUTE_NORETURN;\n+static void perror_with_name\tPROTO((const char *));\n+static void pfatal_pexecute\tPROTO((const char *, const char *))\n+  ATTRIBUTE_NORETURN;\n+static void fatal\t\tPVPROTO((const char *, ...))\n   ATTRIBUTE_NORETURN ATTRIBUTE_PRINTF_1;\n-static void error\t\tPVPROTO((char *, ...)) ATTRIBUTE_PRINTF_1;\n-static void notice\t\tPVPROTO((char *, ...));\n+static void error\t\tPVPROTO((const char *, ...))\n+  ATTRIBUTE_PRINTF_1;\n+static void notice\t\tPVPROTO((const char *, ...))\n+  ATTRIBUTE_PRINTF_1;\n static void display_help \tPROTO((void));\n+static void add_preprocessor_option\tPROTO ((const char *, int));\n+static void add_assembler_option\tPROTO ((const char *, int));\n+static void add_linker_option\t\tPROTO ((const char *, int));\n+static void process_command\t\tPROTO ((int, char **));\n+static int execute\t\t\tPROTO ((void));\n+static void unused_prefix_warnings\tPROTO ((struct path_prefix *));\n+static void clear_args\t\t\tPROTO ((void));\n+static void fatal_error\t\t\tPROTO ((int));\n \n void fancy_abort\t\tPROTO((void)) ATTRIBUTE_NORETURN;\n \n #ifdef LANG_SPECIFIC_DRIVER\n /* Called before processing to change/add/remove arguments. */\n-extern void lang_specific_driver PROTO ((void (*) PVPROTO((char *, ...)), int *, char ***, int *));\n+extern void lang_specific_driver PROTO ((void (*) PVPROTO((const char *, ...)), int *, char ***, int *));\n \n /* Called before linking.  Returns 0 on success and -1 on failure. */\n extern int lang_specific_pre_link ();\n@@ -490,7 +499,7 @@ static char *multilib_defaults_raw[] = MULTILIB_DEFAULTS;\n \n struct user_specs {\n   struct user_specs *next;\n-  char *filename;\n+  const char *filename;\n };\n \n static struct user_specs *user_specs_head, *user_specs_tail;\n@@ -538,10 +547,10 @@ static struct user_specs *user_specs_head, *user_specs_tail;\n \n struct compiler\n {\n-  char *suffix;\t\t\t/* Use this compiler for input files\n+  const char *suffix;\t\t/* Use this compiler for input files\n \t\t\t\t   whose names end in this suffix.  */\n \n-  char *spec[4];\t\t/* To use this compiler, concatenate these\n+  const char *spec[4];\t\t/* To use this compiler, concatenate these\n \t\t\t\t   specs and pass to do_spec.  */\n };\n \n@@ -729,12 +738,12 @@ static int n_default_compilers\n #ifdef LINK_COMMAND_SPEC\n /* Provide option to override link_command_spec from machine specific\n    configuration files.  */\n-static char *link_command_spec = \n+static const char *link_command_spec = \n \tLINK_COMMAND_SPEC;\n #else\n #ifdef LINK_LIBGCC_SPECIAL\n /* Don't generate -L options.  */\n-static char *link_command_spec = \"\\\n+static const char *link_command_spec = \"\\\n %{!fsyntax-only: \\\n  %{!c:%{!M:%{!MM:%{!E:%{!S:%(linker) %l %X %{o*} %{A} %{d} %{e*} %{m} %{N} %{n} \\\n \t\t\t%{r} %{s} %{t} %{u*} %{x} %{z} %{Z}\\\n@@ -746,7 +755,7 @@ static char *link_command_spec = \"\\\n \t\t\t\\n }}}}}}\";\n #else\n /* Use -L.  */\n-static char *link_command_spec = \"\\\n+static const char *link_command_spec = \"\\\n %{!fsyntax-only: \\\n  %{!c:%{!M:%{!MM:%{!E:%{!S:%(linker) %l %X %{o*} %{A} %{d} %{e*} %{m} %{N} %{n} \\\n \t\t\t%{r} %{s} %{t} %{u*} %{x} %{z} %{Z}\\\n@@ -783,15 +792,15 @@ static char **preprocessor_options;\n struct option_map\n {\n   /* The long option's name.  */\n-  char *name;\n+  const char *name;\n   /* The equivalent short option.  */\n-  char *equivalent;\n+  const char *equivalent;\n   /* Argument info.  A string of flag chars; NULL equals no options.\n      a => argument required.\n      o => argument optional.\n      j => join argument to equivalent, making one word.\n      * => require other text after NAME as an argument.  */\n-  char *arg_info;\n+  const char *arg_info;\n };\n \n /* This is the table of mappings.  Mappings are tried sequentially\n@@ -883,12 +892,13 @@ struct option_map option_map[] =\n static void\n translate_options (argcp, argvp)\n      int *argcp;\n-     char ***argvp;\n+     const char ***argvp;\n {\n   int i;\n   int argc = *argcp;\n-  char **argv = *argvp;\n-  char **newv = (char **) xmalloc ((argc + 2) * 2 * sizeof (char *));\n+  const char **argv = *argvp;\n+  const char **newv =\n+    (const char **) xmalloc ((argc + 2) * 2 * sizeof (const char *));\n   int newindex = 0;\n \n   i = 0;\n@@ -906,14 +916,14 @@ translate_options (argcp, argvp)\n \t      size_t optlen = strlen (option_map[j].name);\n \t      size_t arglen = strlen (argv[i]);\n \t      size_t complen = arglen > optlen ? optlen : arglen;\n-\t      char *arginfo = option_map[j].arg_info;\n+\t      const char *arginfo = option_map[j].arg_info;\n \n \t      if (arginfo == 0)\n \t\targinfo = \"\";\n \n \t      if (!strncmp (argv[i], option_map[j].name, complen))\n \t\t{\n-\t\t  char *arg = 0;\n+\t\t  const char *arg = 0;\n \n \t\t  if (arglen < optlen)\n \t\t    {\n@@ -1002,7 +1012,7 @@ translate_options (argcp, argvp)\n \t with their arguments.  */\n       else if (argv[i][0] == '-')\n \t{\n-\t  char *p = argv[i] + 1;\n+\t  const char *p = argv[i] + 1;\n \t  int c = *p;\n \t  int nskip = 1;\n \n@@ -1198,8 +1208,8 @@ init_spec ()\n \n static void\n set_spec (name, spec)\n-     char *name;\n-     char *spec;\n+     const char *name;\n+     const char *spec;\n {\n   struct spec_list *sl;\n   char *old_spec;\n@@ -1274,16 +1284,16 @@ static int argbuf_index;\n \n #ifdef MKTEMP_EACH_FILE\n \n-extern char *make_temp_file PROTO((char *));\n+extern char *make_temp_file PROTO((const char *));\n \n /* This is the list of suffixes and codes (%g/%u/%U) and the associated\n    temp file.  */\n \n static struct temp_name {\n-  char *suffix;\t\t/* suffix associated with the code.  */\n+  const char *suffix;\t/* suffix associated with the code.  */\n   int length;\t\t/* strlen (suffix).  */\n   int unique;\t\t/* Indicates whether %g or %u/%U was used.  */\n-  char *filename;\t/* associated filename.  */\n+  const char *filename;\t/* associated filename.  */\n   int filename_length;\t/* strlen (filename).  */\n   struct temp_name *next;\n } *temp_names;\n@@ -1300,7 +1310,7 @@ static int signal_count;\n \n /* Name with which this program was invoked.  */\n \n-static char *programname;\n+static const char *programname;\n \f\n /* Structures to keep track of prefixes to try when looking for files.  */\n \n@@ -1317,7 +1327,7 @@ struct path_prefix\n {\n   struct prefix_list *plist;  /* List of prefixes to try */\n   int max_len;                /* Max length of a prefix in PLIST */\n-  char *name;                 /* Name of this list (used in config stuff) */\n+  const char *name;           /* Name of this list (used in config stuff) */\n };\n \n /* List of prefixes to try when looking for executables.  */\n@@ -1335,16 +1345,16 @@ static struct path_prefix include_prefixes = { 0, 0, \"include\" };\n /* Suffix to attach to directories searched for commands.\n    This looks like `MACHINE/VERSION/'.  */\n \n-static char *machine_suffix = 0;\n+static const char *machine_suffix = 0;\n \n /* Suffix to attach to directories searched for commands.\n    This is just `MACHINE/'.  */\n \n-static char *just_machine_suffix = 0;\n+static const char *just_machine_suffix = 0;\n \n /* Adjusted value of GCC_EXEC_PREFIX envvar.  */\n \n-static char *gcc_exec_prefix;\n+static const char *gcc_exec_prefix;\n \n /* Default prefixes to attach to command names.  */\n \n@@ -1358,36 +1368,36 @@ static char *gcc_exec_prefix;\n #define STANDARD_EXEC_PREFIX \"/usr/local/lib/gcc-lib/\"\n #endif /* !defined STANDARD_EXEC_PREFIX */\n \n-static char *standard_exec_prefix = STANDARD_EXEC_PREFIX;\n-static char *standard_exec_prefix_1 = \"/usr/lib/gcc/\";\n+static const char *standard_exec_prefix = STANDARD_EXEC_PREFIX;\n+static const char *standard_exec_prefix_1 = \"/usr/lib/gcc/\";\n #ifdef MD_EXEC_PREFIX\n-static char *md_exec_prefix = MD_EXEC_PREFIX;\n+static const char *md_exec_prefix = MD_EXEC_PREFIX;\n #endif\n \n #ifndef STANDARD_STARTFILE_PREFIX\n #define STANDARD_STARTFILE_PREFIX \"/usr/local/lib/\"\n #endif /* !defined STANDARD_STARTFILE_PREFIX */\n \n #ifdef MD_STARTFILE_PREFIX\n-static char *md_startfile_prefix = MD_STARTFILE_PREFIX;\n+static const char *md_startfile_prefix = MD_STARTFILE_PREFIX;\n #endif\n #ifdef MD_STARTFILE_PREFIX_1\n-static char *md_startfile_prefix_1 = MD_STARTFILE_PREFIX_1;\n+static const char *md_startfile_prefix_1 = MD_STARTFILE_PREFIX_1;\n #endif\n-static char *standard_startfile_prefix = STANDARD_STARTFILE_PREFIX;\n-static char *standard_startfile_prefix_1 = \"/lib/\";\n-static char *standard_startfile_prefix_2 = \"/usr/lib/\";\n+static const char *standard_startfile_prefix = STANDARD_STARTFILE_PREFIX;\n+static const char *standard_startfile_prefix_1 = \"/lib/\";\n+static const char *standard_startfile_prefix_2 = \"/usr/lib/\";\n \n #ifndef TOOLDIR_BASE_PREFIX\n #define TOOLDIR_BASE_PREFIX \"/usr/local/\"\n #endif\n-static char *tooldir_base_prefix = TOOLDIR_BASE_PREFIX;\n-static char *tooldir_prefix;\n+static const char *tooldir_base_prefix = TOOLDIR_BASE_PREFIX;\n+static const char *tooldir_prefix;\n \n /* Subdirectory to use for locating libraries.  Set by\n    set_multilib_dir based on the compilation options.  */\n \n-static char *multilib_dir;\n+static const char *multilib_dir;\n \n /* Clear out the vector of arguments (after a command is executed).  */\n \n@@ -1433,7 +1443,7 @@ store_arg (arg, delete_always, delete_failure)\n \n static void\n read_specs (filename, main_p)\n-     char *filename;\n+     const char *filename;\n      int main_p;\n {\n   int desc;\n@@ -1692,7 +1702,7 @@ read_specs (filename, main_p)\n    otherwise, in /usr/tmp or /tmp;\n    or finally the current directory if all else fails.  */\n \n-static char *temp_filename;\n+static const char *temp_filename;\n \n /* Length of the prefix.  */\n \n@@ -1702,7 +1712,7 @@ static int temp_filename_length;\n \n struct temp_file\n {\n-  char *name;\n+  const char *name;\n   struct temp_file *next;\n };\n \n@@ -1719,7 +1729,7 @@ static struct temp_file *failure_delete_queue;\n \n static void\n record_temp_file (filename, always_delete, fail_delete)\n-     char *filename;\n+     const char *filename;\n      int always_delete;\n      int fail_delete;\n {\n@@ -1762,7 +1772,7 @@ record_temp_file (filename, always_delete, fail_delete)\n \n static void\n delete_if_ordinary (name)\n-     char *name;\n+     const char *name;\n {\n   struct stat st;\n #ifdef DEBUG\n@@ -1874,7 +1884,7 @@ putenv (str)\n static char *\n build_search_list (paths, prefix, check_dir_p)\n      struct path_prefix *paths;\n-     char *prefix;\n+     const char *prefix;\n      int check_dir_p;\n {\n   int suffix_len = (machine_suffix) ? strlen (machine_suffix) : 0;\n@@ -1935,7 +1945,7 @@ build_search_list (paths, prefix, check_dir_p)\n static void\n putenv_from_prefixes (paths, env_var)\n      struct path_prefix *paths;\n-     char *env_var;\n+     const char *env_var;\n {\n   putenv (build_search_list (paths, env_var, 1));\n }\n@@ -1947,11 +1957,11 @@ putenv_from_prefixes (paths, env_var)\n static char *\n find_a_file (pprefix, name, mode)\n      struct path_prefix *pprefix;\n-     char *name;\n+     const char *name;\n      int mode;\n {\n   char *temp;\n-  char *file_suffix = ((mode & X_OK) != 0 ? EXECUTABLE_SUFFIX : \"\");\n+  const char *file_suffix = ((mode & X_OK) != 0 ? EXECUTABLE_SUFFIX : \"\");\n   struct prefix_list *pl;\n   int len = pprefix->max_len + strlen (name) + strlen (file_suffix) + 1;\n \n@@ -2187,8 +2197,8 @@ execute ()\n   char *string;\n   struct command\n     {\n-      char *prog;\t\t/* program name.  */\n-      char **argv;\t\t/* vector of args.  */\n+      const char *prog;\t\t/* program name.  */\n+      char **argv;\t/* vector of args.  */\n       int pid;\t\t\t/* pid of process for this command.  */\n     };\n \n@@ -2347,7 +2357,7 @@ execute ()\n \n struct switchstr\n {\n-  char *part1;\n+  const char *part1;\n   char **args;\n   int live_cond;\n   int validated;\n@@ -2359,8 +2369,8 @@ static int n_switches;\n \n struct infile\n {\n-  char *name;\n-  char *language;\n+  const char *name;\n+  const char *language;\n };\n \n /* Also a vector of input files specified.  */\n@@ -2376,7 +2386,7 @@ static int added_libraries;\n \n /* And a vector of corresponding output files is made up later.  */\n \n-static char **outfiles;\n+static const char **outfiles;\n \n /* Used to track if none of the -B paths are used.  */\n static int warn_B;\n@@ -2493,56 +2503,57 @@ display_help ()\n \n static void \t\t\t\t\t\t\t\t\n add_preprocessor_option (option, len)\t\t\t\t\t\n-     char * option;\t\t\t\t\t\t\t\n-     int    len;\t\t\t\t\t\t\t\n+     const char * option;\n+     int len;\n {\t\t\t\t\t\t\t\t\t\n-  n_preprocessor_options++;\t\t\t\t\t\t\t\n+  n_preprocessor_options++;\n \t\t\t\t\t\t\t\t\t\n-  if (! preprocessor_options)\t\t\t\t\t\t\n-    preprocessor_options\t\t\t\t\t\t\t\n-      = (char **) xmalloc (n_preprocessor_options * sizeof (char *));\t\n-  else\t\t\t\t\t\t\t\t\t\n-    preprocessor_options\t\t\t\t\t\t\t\n-      = (char **) xrealloc (preprocessor_options,\t\t\t\t\n-\t\t\t    n_preprocessor_options * sizeof (char *));\t\n+  if (! preprocessor_options)\n+    preprocessor_options\n+      = (char **) xmalloc (n_preprocessor_options * sizeof (char *));\n+  else\n+    preprocessor_options\n+      = (char **) xrealloc (preprocessor_options,\n+\t\t\t    n_preprocessor_options * sizeof (char *));\n   \t\t\t\t\t\t\t\t\t\n-  preprocessor_options [n_preprocessor_options - 1] = save_string (option, len);  \n+  preprocessor_options [n_preprocessor_options - 1] =\n+    save_string (option, len);\n }\n      \n static void \t\t\t\t\t\t\t\t\n add_assembler_option (option, len)\t\t\t\t\t\n-     char * option;\t\t\t\t\t\t\t\n-     int    len;\t\t\t\t\t\t\t\n-{\t\t\t\t\t\t\t\t\t\n-  n_assembler_options++;\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\t\t\t\n-  if (! assembler_options)\t\t\t\t\t\t\n-    assembler_options\t\t\t\t\t\t\t\n-      = (char **) xmalloc (n_assembler_options * sizeof (char *));\t\n-  else\t\t\t\t\t\t\t\t\t\n-    assembler_options\t\t\t\t\t\t\t\n-      = (char **) xrealloc (assembler_options,\t\t\t\t\n-\t\t\t    n_assembler_options * sizeof (char *));\t\n-  \t\t\t\t\t\t\t\t\t\n-  assembler_options [n_assembler_options - 1] = save_string (option, len);  \n+     const char * option;\n+     int len;\n+{\n+  n_assembler_options++;\n+\n+  if (! assembler_options)\n+    assembler_options\n+      = (char **) xmalloc (n_assembler_options * sizeof (char *));\n+  else\n+    assembler_options\n+      = (char **) xrealloc (assembler_options,\n+\t\t\t    n_assembler_options * sizeof (char *));\n+\n+  assembler_options [n_assembler_options - 1] = save_string (option, len);\n }\n      \n static void \t\t\t\t\t\t\t\t\n add_linker_option (option, len)\t\t\t\t\t\n-     char * option;\t\t\t\t\t\t\t\n-     int    len;\t\t\t\t\t\t\t\n-{\t\t\t\t\t\t\t\t\t\n-  n_linker_options++;\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\t\t\t\n-  if (! linker_options)\t\t\t\t\t\t\n-    linker_options\t\t\t\t\t\t\t\n-      = (char **) xmalloc (n_linker_options * sizeof (char *));\t\n-  else\t\t\t\t\t\t\t\t\t\n-    linker_options\t\t\t\t\t\t\t\n-      = (char **) xrealloc (linker_options,\t\t\t\t\n-\t\t\t    n_linker_options * sizeof (char *));\t\n-  \t\t\t\t\t\t\t\t\t\n-  linker_options [n_linker_options - 1] = save_string (option, len);  \n+     const char * option;\n+     int    len;\n+{\n+  n_linker_options++;\n+\n+  if (! linker_options)\n+    linker_options\n+      = (char **) xmalloc (n_linker_options * sizeof (char *));\n+  else\n+    linker_options\n+      = (char **) xrealloc (linker_options,\n+\t\t\t    n_linker_options * sizeof (char *));\n+\n+  linker_options [n_linker_options - 1] = save_string (option, len);\n }\n \f\n /* Create the vector `switches' and its contents.\n@@ -2554,7 +2565,8 @@ process_command (argc, argv)\n      char **argv;\n {\n   register int i;\n-  char *temp;\n+  const char *temp;\n+  char *temp1;\n   char *spec_lang = 0;\n   int last_language_n_infiles;\n   int have_c = 0;\n@@ -2569,12 +2581,13 @@ process_command (argc, argv)\n \n   /* Figure compiler version from version string.  */\n \n-  compiler_version = save_string (version_string, strlen (version_string));\n-  for (temp = compiler_version; *temp; ++temp)\n+  compiler_version = temp1 =\n+    save_string (version_string, strlen (version_string));\n+  for (; *temp1; ++temp1)\n     {\n-      if (*temp == ' ')\n+      if (*temp1 == ' ')\n \t{\n-\t  *temp = '\\0';\n+\t  *temp1 = '\\0';\n \t  break;\n \t}\n     }\n@@ -2607,7 +2620,7 @@ process_command (argc, argv)\n   GET_ENV_PATH_LIST (temp, \"COMPILER_PATH\");\n   if (temp)\n     {\n-      char *startp, *endp;\n+      const char *startp, *endp;\n       char *nstore = (char *) alloca (strlen (temp) + 3);\n \n       startp = endp = temp;\n@@ -2641,7 +2654,7 @@ process_command (argc, argv)\n   GET_ENV_PATH_LIST (temp, \"LIBRARY_PATH\");\n   if (temp && *cross_compile == '0')\n     {\n-      char *startp, *endp;\n+      const char *startp, *endp;\n       char *nstore = (char *) alloca (strlen (temp) + 3);\n \n       startp = endp = temp;\n@@ -2674,7 +2687,7 @@ process_command (argc, argv)\n   GET_ENV_PATH_LIST (temp, \"LPATH\");\n   if (temp && *cross_compile == '0')\n     {\n-      char *startp, *endp;\n+      const char *startp, *endp;\n       char *nstore = (char *) alloca (strlen (temp) + 3);\n \n       startp = endp = temp;\n@@ -2940,7 +2953,7 @@ process_command (argc, argv)\n \t\t The format of the version string is\n \t\t ([^0-9]*-)?[0-9]+[.][0-9]+([.][0-9]+)?([- ].*)?  */\n \t      {\n-\t\tchar *v = compiler_version;\n+\t\tconst char *v = compiler_version;\n \n \t\t/* Ignore leading non-digits.  i.e. \"foo-\" in \"foo-2.7.2\".  */\n \t\twhile (! ISDIGIT (*v))\n@@ -3303,12 +3316,12 @@ process_command (argc, argv)\n    sans all directory names, and basename_length is the number\n    of characters starting there excluding the suffix .c or whatever.  */\n \n-char *input_filename;\n+const char *input_filename;\n static int input_file_number;\n size_t input_filename_length;\n static int basename_length;\n-static char *input_basename;\n-static char *input_suffix;\n+static const char *input_basename;\n+static const char *input_suffix;\n \n /* These are variables used within do_spec and do_spec_1.  */\n \n@@ -3337,7 +3350,7 @@ static int input_from_pipe;\n \n int\n do_spec (spec)\n-     char *spec;\n+     const char *spec;\n {\n   int value;\n \n@@ -3378,14 +3391,14 @@ do_spec (spec)\n \n static int\n do_spec_1 (spec, inswitch, soft_matched_part)\n-     char *spec;\n+     const char *spec;\n      int inswitch;\n-     char *soft_matched_part;\n+     const char *soft_matched_part;\n {\n-  register char *p = spec;\n+  register const char *p = spec;\n   register int c;\n   int i;\n-  char *string;\n+  const char *string;\n   int value;\n \n   while ((c = *p++))\n@@ -3609,7 +3622,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t    /* %efoo means report an error with `foo' as error message\n \t       and don't execute any more commands for this file.  */\n \t    {\n-\t      char *q = p;\n+\t      const char *q = p;\n \t      char *buf;\n \t      while (*p != 0 && *p != '\\n') p++;\n \t      buf = (char *) alloca (p - q + 1);\n@@ -3637,7 +3650,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t\t   In 2.4, do something about that.  */\n \t\tstruct temp_name *t;\n \t\tint suffix_length;\n-\t\tchar *suffix = p;\n+\t\tconst char *suffix = p;\n \n \t\tif (p[0] == '%' && p[1] == 'O')\n \t\t  {\n@@ -3773,7 +3786,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t  /* %x{OPTION} records OPTION for %X to output.  */\n \t  case 'x':\n \t    {\n-\t      char *p1 = p;\n+\t      const char *p1 = p;\n \t      char *string;\n \n \t      /* Skip past the option value and make a copy.  */\n@@ -4070,7 +4083,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t    error (\"Warning: use of obsolete %%[ operator in specs\");\n \t  case '(':\n \t    {\n-\t      char *name = p;\n+\t      const char *name = p;\n \t      struct spec_list *sl;\n \t      int len;\n \n@@ -4103,7 +4116,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t\t    {\n \t\t      char *x = (char *) alloca (strlen (name) * 2 + 1);\n \t\t      char *buf = x;\n-\t\t      char *y = name;\n+\t\t      const char *y = name;\n \t\t      int flag = 0;\n \n \t\t      /* Copy all of NAME into BUF, but put __ after\n@@ -4211,11 +4224,11 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \n /* Return 0 if we call do_spec_1 and that returns -1.  */\n \n-static char *\n+static const char *\n handle_braces (p)\n-     register char *p;\n+     register const char *p;\n {\n-  char *filter, *body = NULL, *endbody;\n+  const char *filter, *body = NULL, *endbody = NULL;\n   int pipe_p = 0;\n   int negate;\n   int suffix;\n@@ -4260,7 +4273,7 @@ handle_braces (p)\n       if (*p != '}')\n         {\n \t  register int count = 1;\n-\t  register char *q = p;\n+\t  register const char *q = p;\n \n \t  while (*q++ != ':') continue;\n \t  body = q;\n@@ -4315,7 +4328,7 @@ handle_braces (p)\n       if (p[-1] == '*' && !negate)\n \t{\n \t  int substitution;\n-\t  char *r = body;\n+\t  const char *r = body;\n \n \t  /* First see whether we have %*.  */\n \t  substitution = 0;\n@@ -4426,7 +4439,7 @@ check_live_switch (switchnum, prefix_length)\n      int switchnum;\n      int prefix_length;\n {\n-  char *name = switches[switchnum].part1;\n+  const char *name = switches[switchnum].part1;\n   int i;\n \n   /* In the common case of {<at-most-one-letter>*}, a negating\n@@ -4531,9 +4544,9 @@ give_switch (switchnum, omit_first_word, include_blanks)\n    user's -B prefix and some standard ones.\n    Return the absolute file name found.  If nothing is found, return NAME.  */\n \n-static char *\n+static const char *\n find_file (name)\n-     char *name;\n+     const char *name;\n {\n   char *newname;\n \n@@ -4566,8 +4579,8 @@ find_file (name)\n \n static int\n is_directory (path1, path2, linker)\n-     char *path1;\n-     char *path2;\n+     const char *path1;\n+     const char *path2;\n      int linker;\n {\n   int len1 = strlen (path1);\n@@ -4631,7 +4644,7 @@ main (argc, argv)\n   int linker_was_run = 0;\n   char *explicit_link_files;\n   char *specs_file;\n-  char *p;\n+  const char *p;\n   struct user_specs *uptr;\n \n   p = argv[0] + strlen (argv[0]);\n@@ -4737,7 +4750,7 @@ main (argc, argv)\n     for (i = 0; (int)i < n_switches; i++)\n       {\n \tchar **args;\n-\tchar *p, *q;\n+\tconst char *p, *q;\n \tif (!first_time)\n \t  obstack_grow (&collect_obstack, \" \", 1);\n \n@@ -4996,7 +5009,7 @@ main (argc, argv)\n #ifdef LANG_SPECIFIC_DRIVER\n   i += lang_specific_extra_outfiles;\n #endif\n-  outfiles = (char **) xmalloc (i * sizeof (char *));\n+  outfiles = (const char **) xmalloc (i * sizeof (char *));\n   bzero ((char *) outfiles, i * sizeof (char *));\n \n   /* Record which files were specified explicitly as link input.  */\n@@ -5028,7 +5041,7 @@ main (argc, argv)\n \t{\n \t  /* Ok, we found an applicable compiler.  Run its spec.  */\n \t  /* First say how much of input_filename to substitute for %b  */\n-\t  register char *p;\n+\t  register const char *p;\n \t  int len;\n \n \t  if (cp->spec[0][0] == '#')\n@@ -5058,18 +5071,20 @@ main (argc, argv)\n \t    if (cp->spec[j])\n \t      len += strlen (cp->spec[j]);\n \n-\t  p = (char *) xmalloc (len + 1);\n-\n-\t  len = 0;\n-\t  for (j = 0; j < sizeof cp->spec / sizeof cp->spec[0]; j++)\n-\t    if (cp->spec[j])\n-\t      {\n-\t\tstrcpy (p + len, cp->spec[j]);\n-\t\tlen += strlen (cp->spec[j]);\n-\t      }\n-\n-\t  value = do_spec (p);\n-\t  free (p);\n+\t  {\n+\t    char *p1 = (char *) xmalloc (len + 1);\n+\t    \n+\t    len = 0;\n+\t    for (j = 0; j < sizeof cp->spec / sizeof cp->spec[0]; j++)\n+\t      if (cp->spec[j])\n+\t\t{\n+\t\t  strcpy (p1 + len, cp->spec[j]);\n+\t\t  len += strlen (cp->spec[j]);\n+\t\t}\n+\t    \n+\t    value = do_spec (p1);\n+\t    free (p1);\n+\t  }\n \t  if (value < 0)\n \t    this_file_error = 1;\n \t}\n@@ -5163,9 +5178,9 @@ main (argc, argv)\n \n static struct compiler *\n lookup_compiler (name, length, language)\n-     char *name;\n+     const char *name;\n      size_t length;\n-     char *language;\n+     const char *language;\n {\n   struct compiler *cp;\n \n@@ -5266,7 +5281,7 @@ save_string (s, len)\n \n static void\n pfatal_with_name (name)\n-     char *name;\n+     const char *name;\n {\n   perror_with_name (name);\n   delete_temp_files ();\n@@ -5275,15 +5290,15 @@ pfatal_with_name (name)\n \n static void\n perror_with_name (name)\n-     char *name;\n+     const char *name;\n {\n   error (\"%s: %s\", name, xstrerror (errno));\n }\n \n static void\n pfatal_pexecute (errmsg_fmt, errmsg_arg)\n-     char *errmsg_fmt;\n-     char *errmsg_arg;\n+     const char *errmsg_fmt;\n+     const char *errmsg_arg;\n {\n   if (errmsg_arg)\n     {\n@@ -5312,17 +5327,17 @@ fancy_abort ()\n /* Output an error message and exit */\n \n static void\n-fatal VPROTO((char *msgid, ...))\n+fatal VPROTO((const char *msgid, ...))\n {\n #ifndef ANSI_PROTOTYPES\n-  char *msgid;\n+  const char *msgid;\n #endif\n   va_list ap;\n \n   VA_START (ap, msgid);\n \n #ifndef ANSI_PROTOTYPES\n-  msgid = va_arg (ap, char *);\n+  msgid = va_arg (ap, const char *);\n #endif\n \n   fprintf (stderr, \"%s: \", programname);\n@@ -5334,17 +5349,17 @@ fatal VPROTO((char *msgid, ...))\n }\n \n static void\n-error VPROTO((char *msgid, ...))\n+error VPROTO((const char *msgid, ...))\n {\n #ifndef ANSI_PROTOTYPES\n-  char *msgid;\n+  const char *msgid;\n #endif\n   va_list ap;\n \n   VA_START (ap, msgid);\n \n #ifndef ANSI_PROTOTYPES\n-  msgid = va_arg (ap, char *);\n+  msgid = va_arg (ap, const char *);\n #endif\n \n   fprintf (stderr, \"%s: \", programname);\n@@ -5355,17 +5370,17 @@ error VPROTO((char *msgid, ...))\n }\n \n static void\n-notice VPROTO((char *msgid, ...))\n+notice VPROTO((const char *msgid, ...))\n {\n #ifndef ANSI_PROTOTYPES\n-  char *msgid;\n+  const char *msgid;\n #endif\n   va_list ap;\n \n   VA_START (ap, msgid);\n \n #ifndef ANSI_PROTOTYPES\n-  msgid = va_arg (ap, char *);\n+  msgid = va_arg (ap, const char *);\n #endif\n \n   vfprintf (stderr, _(msgid), ap);\n@@ -5377,7 +5392,7 @@ static void\n validate_all_switches ()\n {\n   struct compiler *comp;\n-  register char *p;\n+  register const char *p;\n   register char c;\n   struct spec_list *spec;\n \n@@ -5416,10 +5431,10 @@ validate_all_switches ()\n \n static void\n validate_switches (start)\n-     char *start;\n+     const char *start;\n {\n-  register char *p = start;\n-  char *filter;\n+  register const char *p = start;\n+  const char *filter;\n   register int i;\n   int suffix = 0;\n \n@@ -5462,7 +5477,7 @@ validate_switches (start)\n \n static int\n used_arg (p, len)\n-     char *p;\n+     const char *p;\n      int len;\n {\n   struct mswitchstr {\n@@ -5550,7 +5565,7 @@ used_arg (p, len)\n \n static int\n default_arg (p, len)\n-     char *p;\n+     const char *p;\n      int len;\n {\n   char *start, *end;\n@@ -5665,9 +5680,10 @@ set_multilib_dir ()\n \t  if (this_path_len != 1\n \t      || this_path[0] != '.')\n \t    {\n-\t      multilib_dir = xmalloc (this_path_len + 1);\n-\t      strncpy (multilib_dir, this_path, this_path_len);\n-\t      multilib_dir[this_path_len] = '\\0';\n+\t      char * new_multilib_dir = xmalloc (this_path_len + 1);\n+\t      strncpy (new_multilib_dir, this_path, this_path_len);\n+\t      new_multilib_dir[this_path_len] = '\\0';\n+\t      multilib_dir = new_multilib_dir;\n \t    }\n \t  break;\n \t}"}]}