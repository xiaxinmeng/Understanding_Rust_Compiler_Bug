{"sha": "ae5b7e39b62c86ab13ad84a911d808f12e54a111", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU1YjdlMzliNjJjODZhYjEzYWQ4NGE5MTFkODA4ZjEyZTU0YTExMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-01-25T10:26:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-01-25T10:26:20Z"}, "message": "re PR tree-optimization/47411 (Bootstrap failure on x86-64/Darwin)\n\n2011-01-25  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/47411\n\t* gcc.dg/torture/pr47411.c: New testcase.\n\nFrom-SVN: r169225", "tree": {"sha": "0bb3f5e3a806ffdf0b044739a4f844b1e2894079", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bb3f5e3a806ffdf0b044739a4f844b1e2894079"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae5b7e39b62c86ab13ad84a911d808f12e54a111", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5b7e39b62c86ab13ad84a911d808f12e54a111", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae5b7e39b62c86ab13ad84a911d808f12e54a111", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5b7e39b62c86ab13ad84a911d808f12e54a111/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5bd6e6526ce2f3d5a530f8fe6103d5339027c7d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bd6e6526ce2f3d5a530f8fe6103d5339027c7d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bd6e6526ce2f3d5a530f8fe6103d5339027c7d3"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "f45aea88d841fc30bd6a68082faf0eb514759ff0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5b7e39b62c86ab13ad84a911d808f12e54a111/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5b7e39b62c86ab13ad84a911d808f12e54a111/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ae5b7e39b62c86ab13ad84a911d808f12e54a111", "patch": "@@ -1,3 +1,8 @@\n+2011-01-25  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/47411\n+\t* gcc.dg/torture/pr47411.c: New testcase.\n+\n 2011-01-25  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* gfortran.dg/graphite/id-24.f: New."}, {"sha": "d3c10d331e756c60b556dee13ffc4027dc3ee7c8", "filename": "gcc/testsuite/gcc.dg/torture/pr47411.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5b7e39b62c86ab13ad84a911d808f12e54a111/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47411.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5b7e39b62c86ab13ad84a911d808f12e54a111/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47411.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47411.c?ref=ae5b7e39b62c86ab13ad84a911d808f12e54a111", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+\n+typedef long unsigned int size_t;\n+\n+static __inline void *\n+__inline_memcpy_chk (void *__dest, const void *__src, size_t __len)\n+{\n+  return __builtin___memcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));\n+}\n+\n+extern void *xmalloc (size_t) __attribute__ ((__malloc__));\n+\n+struct htab { void ** entries; };\n+\n+typedef struct htab *htab_t;\n+\n+extern void ** htab_find_slot (htab_t, const void *);\n+\n+enum mode_class { MODE_RANDOM, MODE_CC, MODE_INT, MAX_MODE_CLASS };\n+\n+struct mode_data\n+{\n+  struct mode_data *next;\n+  enum mode_class cl;\n+};\n+\n+static const struct mode_data blank_mode = { 0, MAX_MODE_CLASS };\n+\n+static htab_t modes_by_name;\n+\n+struct mode_data *\n+new_mode (void)\n+{\n+  struct mode_data *m\n+    = ((struct mode_data *) xmalloc (sizeof (struct mode_data)));\n+\n+  ((__builtin_object_size (m, 0) != (size_t) -1) ? __builtin___memcpy_chk (m, &blank_mode, sizeof (struct mode_data), __builtin_object_size (m, 0)) : __inline_memcpy_chk (m, &blank_mode, sizeof (struct mode_data)));\n+\n+  *htab_find_slot (modes_by_name, m) = m;\n+\n+  return m;\n+}"}]}