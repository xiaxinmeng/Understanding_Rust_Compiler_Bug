{"sha": "1a4fa807f16ece6b5e334155f01348139564f9e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE0ZmE4MDdmMTZlY2U2YjVlMzM0MTU1ZjAxMzQ4MTM5NTY0ZjllNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1996-10-29T05:54:16Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1996-10-29T05:54:16Z"}, "message": "Add cases for SIGN_EXTEND and ZERO_EXTEND to RTX_COSTS\n\nFrom-SVN: r13073", "tree": {"sha": "2b01d223ffef4cdd6f6c3479c781fd05ffa39769", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b01d223ffef4cdd6f6c3479c781fd05ffa39769"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a4fa807f16ece6b5e334155f01348139564f9e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a4fa807f16ece6b5e334155f01348139564f9e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a4fa807f16ece6b5e334155f01348139564f9e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a4fa807f16ece6b5e334155f01348139564f9e7/comments", "author": null, "committer": null, "parents": [{"sha": "6f628f9d4507ed77300b9fe98d25e84756e3dda4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f628f9d4507ed77300b9fe98d25e84756e3dda4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f628f9d4507ed77300b9fe98d25e84756e3dda4"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "624fdf71fe6880ec2820d210583c979c2c928a45", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a4fa807f16ece6b5e334155f01348139564f9e7/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a4fa807f16ece6b5e334155f01348139564f9e7/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=1a4fa807f16ece6b5e334155f01348139564f9e7", "patch": "@@ -3026,7 +3026,24 @@ while (0)\n     else if (mips_cpu == PROCESSOR_R5000)\t\t\t\t\\\n       return COSTS_N_INSNS (36);\t\t\t\t\t\\\n     else\t\t\t\t\t\t\t\t\\\n-      return COSTS_N_INSNS (69);\n+      return COSTS_N_INSNS (69);\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  case SIGN_EXTEND:\t\t\t\t\t\t\t\\\n+    /* A sign extend from SImode to DImode in 64 bit mode is often\t\\\n+       zero instructions, because the result can often be used\t\t\\\n+       directly by another instruction; we'll call it one.  */\t\t\\\n+    if (TARGET_64BIT && GET_MODE (X) == DImode\t\t\t\t\\\n+\t&& GET_MODE (XEXP (X, 0)) == SImode)\t\t\t\t\\\n+      return COSTS_N_INSNS (1);\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\t\\\n+      return COSTS_N_INSNS (2);\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  case ZERO_EXTEND:\t\t\t\t\t\t\t\\\n+    if (TARGET_64BIT && GET_MODE (X) == DImode\t\t\t\t\\\n+\t&& GET_MODE (XEXP (X, 0)) == SImode)\t\t\t\t\\\n+      return COSTS_N_INSNS (2);\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\t\\\n+      return COSTS_N_INSNS (1);\n \n /* An expression giving the cost of an addressing mode that\n    contains ADDRESS.  If not defined, the cost is computed from the"}]}