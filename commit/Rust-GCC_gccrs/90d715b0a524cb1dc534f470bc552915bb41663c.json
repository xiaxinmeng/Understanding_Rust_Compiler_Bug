{"sha": "90d715b0a524cb1dc534f470bc552915bb41663c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBkNzE1YjBhNTI0Y2IxZGM1MzRmNDcwYmM1NTI5MTViYjQxNjYzYw==", "commit": {"author": {"name": "Thomas Koenig", "email": "Thomas.Koenig@online.de", "date": "2007-01-11T20:32:42Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2007-01-11T20:32:42Z"}, "message": "re PR libfortran/30415 (MINLOC, MAXLOC missing for integer kinds 1 and 2)\n\n2007-01-11  Thomas Koenig  <Thomas.Koenig@online.de>\n\n\tPR libfortran/30415\n\t* iresolve.c (gfc_resolve_maxloc):  If the rank\n\tof the return array is nonzero and we process an\n\tinteger array smaller than default kind, coerce\n\tthe array to default integer.\n\t* iresolve.c (gfc_resolve_minloc):  Likewise.\n\n2007-01-11  Thomas Koenig  <Thomas.Koenig@online.de>\n\n\tPR libfortran/30415\n\t* minmaxloc_integer_kinds_1.f90:  New test.\n\nFrom-SVN: r120685", "tree": {"sha": "dd3320fb0f0e8dd37c2f392a040157b60b01bd81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd3320fb0f0e8dd37c2f392a040157b60b01bd81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90d715b0a524cb1dc534f470bc552915bb41663c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90d715b0a524cb1dc534f470bc552915bb41663c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90d715b0a524cb1dc534f470bc552915bb41663c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90d715b0a524cb1dc534f470bc552915bb41663c/comments", "author": null, "committer": null, "parents": [{"sha": "583cb3d38f9c3a1b93938dd851e48af24827626d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/583cb3d38f9c3a1b93938dd851e48af24827626d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/583cb3d38f9c3a1b93938dd851e48af24827626d"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "367e17003636c903d4f8bab24c956da5e01a2123", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90d715b0a524cb1dc534f470bc552915bb41663c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90d715b0a524cb1dc534f470bc552915bb41663c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=90d715b0a524cb1dc534f470bc552915bb41663c", "patch": "@@ -1,3 +1,12 @@\n+2007-01-11  Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+\tPR libfortran/30415\n+\t* iresolve.c (gfc_resolve_maxloc):  If the rank\n+\tof the return array is nonzero and we process an\n+\tinteger array smaller than default kind, coerce\n+\tthe array to default integer.\n+\t* iresolve.c (gfc_resolve_minloc):  Likewise.\n+\n 2007-01-11  Brooks Moses  <brooks.moses@codesourcery.com>\n \n \t* simplify.c: Update copyright to 2007."}, {"sha": "4ded73d530765d9314eb9af967443fe366535167", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90d715b0a524cb1dc534f470bc552915bb41663c/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90d715b0a524cb1dc534f470bc552915bb41663c/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=90d715b0a524cb1dc534f470bc552915bb41663c", "patch": "@@ -1231,6 +1231,19 @@ gfc_resolve_maxloc (gfc_expr *f, gfc_expr *array, gfc_expr *dim,\n   else\n     name = \"maxloc\";\n \n+  /* If the rank of the function is nonzero, we are going to call\n+     a library function.  Coerce the argument to one of the\n+     existing library functions for this case.  */\n+\n+  if (f->rank != 0 && array->ts.type == BT_INTEGER\n+      && array->ts.kind < gfc_default_integer_kind)\n+    {\n+      gfc_typespec ts;\n+      ts.type = BT_INTEGER;\n+      ts.kind = gfc_default_integer_kind;\n+      gfc_convert_type_warn (array, &ts, 2, 0);\n+    }\n+\n   f->value.function.name\n     = gfc_get_string (PREFIX (\"%s%d_%d_%c%d\"), name, dim != NULL, f->ts.kind,\n \t\t      gfc_type_letter (array->ts.type), array->ts.kind);\n@@ -1385,6 +1398,19 @@ gfc_resolve_minloc (gfc_expr *f, gfc_expr *array, gfc_expr *dim,\n   else\n     name = \"minloc\";\n \n+  /* If the rank of the function is nonzero, we are going to call\n+     a library function.  Coerce the argument to one of the\n+     existing library functions for this case.  */\n+\n+  if (f->rank != 0 && array->ts.type == BT_INTEGER\n+      && array->ts.kind < gfc_default_integer_kind)\n+    {\n+      gfc_typespec ts;\n+      ts.type = BT_INTEGER;\n+      ts.kind = gfc_default_integer_kind;\n+      gfc_convert_type_warn (array, &ts, 2, 0);\n+    }\n+\n   f->value.function.name\n     = gfc_get_string (PREFIX (\"%s%d_%d_%c%d\"), name, dim != NULL, f->ts.kind,\n \t\t      gfc_type_letter (array->ts.type), array->ts.kind);"}, {"sha": "daa212bd15d5a05bc36241bbde57c3171f1818c5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90d715b0a524cb1dc534f470bc552915bb41663c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90d715b0a524cb1dc534f470bc552915bb41663c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=90d715b0a524cb1dc534f470bc552915bb41663c", "patch": "@@ -1,3 +1,8 @@\n+2007-01-11  Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+\tPR libfortran/30415\n+\t* minmaxloc_integer_kinds_1.f90:  New test.\n+\n 2007-01-11  Simon Martin  <simartin@users.sourceforge.net>\n \n \tPR c++/29573"}, {"sha": "cbf84ec41bd634fbe3b2368e3119730d6191c296", "filename": "gcc/testsuite/gfortran.dg/minmaxloc_integer_kinds_1.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90d715b0a524cb1dc534f470bc552915bb41663c/gcc%2Ftestsuite%2Fgfortran.dg%2Fminmaxloc_integer_kinds_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90d715b0a524cb1dc534f470bc552915bb41663c/gcc%2Ftestsuite%2Fgfortran.dg%2Fminmaxloc_integer_kinds_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fminmaxloc_integer_kinds_1.f90?ref=90d715b0a524cb1dc534f470bc552915bb41663c", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do link }\n+! PR 30415 - minloc and maxloc for integer kinds=1 and 2 were missing\n+! Test case by Harald Anlauf\n+program gfcbug55\n+  integer(kind=1) :: i1(4) = 1\n+  integer(kind=2) :: i2(4) = 1\n+  print *, minloc(i1), maxloc(i1)\n+  print *, minloc(i2), maxloc(i2)\n+end program gfcbug55\n+"}]}