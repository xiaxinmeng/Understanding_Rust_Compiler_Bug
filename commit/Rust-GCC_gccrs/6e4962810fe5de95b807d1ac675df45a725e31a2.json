{"sha": "6e4962810fe5de95b807d1ac675df45a725e31a2", "node_id": "C_kwDOANBUbNoAKDZlNDk2MjgxMGZlNWRlOTViODA3ZDFhYzY3NWRmNDVhNzI1ZTMxYTI", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-11-16T22:38:24Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-11-16T22:38:24Z"}, "message": "analyzer: log the stashing of named constants [PR107711]\n\nPR analyzer/107711 seems to be a bug in how named constants are looked up\nby the analyzer in the C frontend.\n\nTo help debug this, this patch extends -fdump-analyzer and\n-fdump-analyzer-stderr so that they dump this part of the analyzer's\nstartup.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/107711\n\t* analyzer-language.cc: Include \"diagnostic.h\".\n\t(maybe_stash_named_constant): Add logger param and use it to log\n\tthe name being looked up, and the result.\n\t(stash_named_constants): New, splitting out from...\n\t(on_finish_translation_unit): ...this function.  Call\n\tget_or_create_logfile and use the result to create a logger\n\tinstance, passing it to stash_named_constants.\n\t* analyzer.h (get_or_create_any_logfile): New decl.\n\t* engine.cc (dump_fout, owns_dump_fout): New globals, split out\n\tfrom run_checkers.\n\t(get_or_create_any_logfile): New function, split out from...\n\t(run_checkers): ...here, so that the logfile can be opened by\n\ton_finish_translation_unit.  Clear the globals when closing the\n\tdump file.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/107711\n\t* gcc.dg/analyzer/fdump-analyzer-1.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "e36a00964ce29aedea3a2448dac3507470db8dc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e36a00964ce29aedea3a2448dac3507470db8dc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e4962810fe5de95b807d1ac675df45a725e31a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e4962810fe5de95b807d1ac675df45a725e31a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e4962810fe5de95b807d1ac675df45a725e31a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e4962810fe5de95b807d1ac675df45a725e31a2/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdd784fc48a283d54f5f1e3cc2a0668c14dd3bee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdd784fc48a283d54f5f1e3cc2a0668c14dd3bee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdd784fc48a283d54f5f1e3cc2a0668c14dd3bee"}], "stats": {"total": 108, "additions": 85, "deletions": 23}, "files": [{"sha": "0fb43443ffddc5c12316cdbbb909f648930f7ad0", "filename": "gcc/analyzer/analyzer-language.cc", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4962810fe5de95b807d1ac675df45a725e31a2/gcc%2Fanalyzer%2Fanalyzer-language.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4962810fe5de95b807d1ac675df45a725e31a2/gcc%2Fanalyzer%2Fanalyzer-language.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer-language.cc?ref=6e4962810fe5de95b807d1ac675df45a725e31a2", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"analyzer/analyzer.h\"\n #include \"analyzer/analyzer-language.h\"\n #include \"analyzer/analyzer-logging.h\"\n+#include \"diagnostic.h\"\n \n /* Map from identifier to INTEGER_CST.  */\n static GTY (()) hash_map <tree, tree> *analyzer_stashed_constants;\n@@ -39,8 +40,12 @@ namespace ana {\n    If found, stash its value within analyzer_stashed_constants.  */\n \n static void\n-maybe_stash_named_constant (const translation_unit &tu, const char *name)\n+maybe_stash_named_constant (logger *logger,\n+\t\t\t    const translation_unit &tu,\n+\t\t\t    const char *name)\n {\n+  LOG_FUNC_1 (logger, \"name: %qs\", name);\n+\n   if (!analyzer_stashed_constants)\n     analyzer_stashed_constants = hash_map<tree, tree>::create_ggc ();\n \n@@ -49,9 +54,32 @@ maybe_stash_named_constant (const translation_unit &tu, const char *name)\n     {\n       gcc_assert (TREE_CODE (t) == INTEGER_CST);\n       analyzer_stashed_constants->put (id, t);\n+      if (logger)\n+\tlogger->log (\"%qs: %qE\", name, t);\n+    }\n+  else\n+    {\n+      if (logger)\n+\tlogger->log (\"%qs: not found\", name);\n     }\n }\n \n+/* Call into TU to try to find values for the names we care about.\n+   If found, stash their values within analyzer_stashed_constants.  */\n+\n+static void\n+stash_named_constants (logger *logger, const translation_unit &tu)\n+{\n+  LOG_SCOPE (logger);\n+\n+  /* Stash named constants for use by sm-fd.cc  */\n+  maybe_stash_named_constant (logger, tu, \"O_ACCMODE\");\n+  maybe_stash_named_constant (logger, tu, \"O_RDONLY\");\n+  maybe_stash_named_constant (logger, tu, \"O_WRONLY\");\n+  maybe_stash_named_constant (logger, tu, \"SOCK_STREAM\");\n+  maybe_stash_named_constant (logger, tu, \"SOCK_DGRAM\");\n+}\n+\n /* Hook for frontend to call into analyzer when TU finishes.\n    This exists so that the analyzer can stash named constant values from\n    header files (e.g. macros and enums) for later use when modeling the\n@@ -68,12 +96,12 @@ on_finish_translation_unit (const translation_unit &tu)\n   if (!flag_analyzer)\n     return;\n \n-  /* Stash named constants for use by sm-fd.cc  */\n-  maybe_stash_named_constant (tu, \"O_ACCMODE\");\n-  maybe_stash_named_constant (tu, \"O_RDONLY\");\n-  maybe_stash_named_constant (tu, \"O_WRONLY\");\n-  maybe_stash_named_constant (tu, \"SOCK_STREAM\");\n-  maybe_stash_named_constant (tu, \"SOCK_DGRAM\");\n+  FILE *logfile = get_or_create_any_logfile ();\n+  log_user the_logger (NULL);\n+  if (logfile)\n+    the_logger.set_logger (new logger (logfile, 0, 0,\n+\t\t\t\t       *global_dc->printer));\n+  stash_named_constants (the_logger.get_logger (), tu);\n }\n \n /* Lookup NAME in the named constants stashed when the frontend TU finished."}, {"sha": "1b56745aba23f0b790c9356288b4ad8f3988238f", "filename": "gcc/analyzer/analyzer.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4962810fe5de95b807d1ac675df45a725e31a2/gcc%2Fanalyzer%2Fanalyzer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4962810fe5de95b807d1ac675df45a725e31a2/gcc%2Fanalyzer%2Fanalyzer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.h?ref=6e4962810fe5de95b807d1ac675df45a725e31a2", "patch": "@@ -324,6 +324,8 @@ class path_context\n extern tree get_stashed_constant_by_name (const char *name);\n extern void log_stashed_constants (logger *logger);\n \n+extern FILE *get_or_create_any_logfile ();\n+\n } // namespace ana\n \n extern bool is_special_named_call_p (const gcall *call, const char *funcname,"}, {"sha": "b52753da7935984565b7cdc15b496a2fcdd55e19", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4962810fe5de95b807d1ac675df45a725e31a2/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4962810fe5de95b807d1ac675df45a725e31a2/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=6e4962810fe5de95b807d1ac675df45a725e31a2", "patch": "@@ -6144,6 +6144,34 @@ impl_run_checkers (logger *logger)\n   delete purge_map;\n }\n \n+/* Handle -fdump-analyzer and -fdump-analyzer-stderr.  */\n+static FILE *dump_fout = NULL;\n+\n+/* Track if we're responsible for closing dump_fout.  */\n+static bool owns_dump_fout = false;\n+\n+/* If dumping is enabled, attempt to create dump_fout if it hasn't already\n+   been opened.  Return it.  */\n+\n+FILE *\n+get_or_create_any_logfile ()\n+{\n+  if (!dump_fout)\n+    {\n+      if (flag_dump_analyzer_stderr)\n+\tdump_fout = stderr;\n+      else if (flag_dump_analyzer)\n+\t{\n+\t  char *dump_filename = concat (dump_base_name, \".analyzer.txt\", NULL);\n+\t  dump_fout = fopen (dump_filename, \"w\");\n+\t  free (dump_filename);\n+\t  if (dump_fout)\n+\t    owns_dump_fout = true;\n+\t}\n+     }\n+  return dump_fout;\n+}\n+\n /* External entrypoint to the analysis \"engine\".\n    Set up any dumps, then call impl_run_checkers.  */\n \n@@ -6153,23 +6181,9 @@ run_checkers ()\n   /* Save input_location.  */\n   location_t saved_input_location = input_location;\n \n-  /* Handle -fdump-analyzer and -fdump-analyzer-stderr.  */\n-  FILE *dump_fout = NULL;\n-  /* Track if we're responsible for closing dump_fout.  */\n-  bool owns_dump_fout = false;\n-  if (flag_dump_analyzer_stderr)\n-    dump_fout = stderr;\n-  else if (flag_dump_analyzer)\n-    {\n-      char *dump_filename = concat (dump_base_name, \".analyzer.txt\", NULL);\n-      dump_fout = fopen (dump_filename, \"w\");\n-      free (dump_filename);\n-      if (dump_fout)\n-\towns_dump_fout = true;\n-    }\n-\n   {\n     log_user the_logger (NULL);\n+    get_or_create_any_logfile ();\n     if (dump_fout)\n       the_logger.set_logger (new logger (dump_fout, 0, 0,\n \t\t\t\t\t *global_dc->printer));\n@@ -6182,7 +6196,11 @@ run_checkers ()\n   }\n \n   if (owns_dump_fout)\n-    fclose (dump_fout);\n+    {\n+      fclose (dump_fout);\n+      owns_dump_fout = false;\n+      dump_fout = NULL;\n+    }\n \n   /* Restore input_location.  Subsequent passes may assume that input_location\n      is some arbitrary value *not* in the block tree, which might be violated"}, {"sha": "8962adbf79ebcea17cb8af42bdc2763b529adf9a", "filename": "gcc/testsuite/gcc.dg/analyzer/fdump-analyzer-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4962810fe5de95b807d1ac675df45a725e31a2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffdump-analyzer-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4962810fe5de95b807d1ac675df45a725e31a2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffdump-analyzer-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffdump-analyzer-1.c?ref=6e4962810fe5de95b807d1ac675df45a725e31a2", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-additional-options \"-fdump-analyzer\" } */\n+\n+void test (void)\n+{\n+}\n+\n+/* Verify that we log the named constants that we look up in the TU\n+   (before the analysis pass runs).\n+     { dg-final { scan-file fdump-analyzer-1.c.analyzer.txt \"maybe_stash_named_constant: name: 'O_ACCMODE'\" } }\n+\n+   Verify that we log the main part of the analysis (part of the\n+   analysis pass):\n+     { dg-final { scan-file fdump-analyzer-1.c.analyzer.txt \"ana::run_checkers\" } }\n+ */"}]}