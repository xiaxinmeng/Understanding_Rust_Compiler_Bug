{"sha": "0f63333cc92a1cf2c61f551e4bf987c0eeb1f3c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY2MzMzM2NjOTJhMWNmMmM2MWY1NTFlNGJmOTg3YzBlZWIxZjNjMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "1999-12-08T07:50:45Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "1999-12-08T07:50:45Z"}, "message": "sparc.h (LEGITIMATE_CONSTANT_P): Consider TFmode 0.0L as legitimate constant if -mvis.\n\n\t* config/sparc/sparc.h (LEGITIMATE_CONSTANT_P): Consider TFmode 0.0L\n\tas legitimate constant if -mvis.\n\t* config/sparc/sparc.md (movtf): Likewise.\n\t(clear_sf): Use const_double_operand.\n\t(clear_sfp, clear_dfp, clear_tf, clear_tfp): New patterns.\n\nFrom-SVN: r30823", "tree": {"sha": "98ead329ddb84ab4b3f3f30eeb6a8c5878830593", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98ead329ddb84ab4b3f3f30eeb6a8c5878830593"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f63333cc92a1cf2c61f551e4bf987c0eeb1f3c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f63333cc92a1cf2c61f551e4bf987c0eeb1f3c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f63333cc92a1cf2c61f551e4bf987c0eeb1f3c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f63333cc92a1cf2c61f551e4bf987c0eeb1f3c3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e1a2f7aea161b4fc8203a9ddbe435801ad47a884", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1a2f7aea161b4fc8203a9ddbe435801ad47a884", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1a2f7aea161b4fc8203a9ddbe435801ad47a884"}], "stats": {"total": 84, "additions": 80, "deletions": 4}, "files": [{"sha": "c9d7794188936fa35e5806ce370b756c85ce8e55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f63333cc92a1cf2c61f551e4bf987c0eeb1f3c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f63333cc92a1cf2c61f551e4bf987c0eeb1f3c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f63333cc92a1cf2c61f551e4bf987c0eeb1f3c3", "patch": "@@ -9,6 +9,12 @@\n \tso that it is actually matched.\n \t(sethi_di_medlow): Likewise.\n \n+\t* config/sparc/sparc.h (LEGITIMATE_CONSTANT_P): Consider TFmode 0.0L\n+\tas legitimate constant if -mvis.\n+\t* config/sparc/sparc.md (movtf): Likewise.\n+\t(clear_sf): Use const_double_operand.\n+\t(clear_sfp, clear_dfp, clear_tf, clear_tfp): New patterns.\n+\n Tue Dec  7 19:22:06 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* loop.h (struct induction): Add multi_insn_incr."}, {"sha": "cfb80ce17768d7aa9555557dc7d581d29ada6058", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f63333cc92a1cf2c61f551e4bf987c0eeb1f3c3/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f63333cc92a1cf2c61f551e4bf987c0eeb1f3c3/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=0f63333cc92a1cf2c61f551e4bf987c0eeb1f3c3", "patch": "@@ -2250,7 +2250,9 @@ LFLGRET\"ID\":\\n\\\n \n #define LEGITIMATE_CONSTANT_P(X) \t\t\t\t\t\\\n   (GET_CODE (X) != CONST_DOUBLE || GET_MODE (X) == VOIDmode || \t\t\\\n-   (TARGET_VIS && (GET_MODE (X) == SFmode || GET_MODE (X) == DFmode) &&\t\\\n+   (TARGET_VIS &&\t\t\t\t\t\t\t\\\n+    (GET_MODE (X) == SFmode || GET_MODE (X) == DFmode ||\t\t\\\n+     GET_MODE (X) == TFmode) &&\t\t\t\t\t\t\\\n     fp_zero_operand (X)))\n \n /* The macros REG_OK_FOR..._P assume that the arg is a REG rtx"}, {"sha": "cf995462edf4b127bf3fc44f1e154fdb70ae467a", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 71, "deletions": 3, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f63333cc92a1cf2c61f551e4bf987c0eeb1f3c3/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f63333cc92a1cf2c61f551e4bf987c0eeb1f3c3/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=0f63333cc92a1cf2c61f551e4bf987c0eeb1f3c3", "patch": "@@ -2750,15 +2750,22 @@\n \n (define_insn \"*clear_sf\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-        (match_operand:SF 1 \"\" \"\"))]\n+        (match_operand:SF 1 \"const_double_operand\" \"\"))]\n   \"TARGET_VIS\n-   && GET_CODE (operands[1]) == CONST_DOUBLE\n-   && GET_CODE (operands[0]) == REG\n    && fp_zero_operand (operands[1])\"\n   \"fzeros\\\\t%0\"\n   [(set_attr \"type\" \"fpmove\")\n    (set_attr \"length\" \"1\")])\n \n+(define_insn \"*clear_sfp\"\n+  [(set (match_operand:SF 0 \"memory_operand\" \"=m\")\n+        (match_operand:SF 1 \"const_double_operand\" \"\"))]\n+  \"! TARGET_LIVE_G0\n+   && fp_zero_operand (operands[1])\"\n+  \"st\\\\t%%g0, %0\"\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"length\" \"1\")])\n+\n (define_insn \"*movsf_const_intreg\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f,r\")\n         (match_operand:SF 1 \"const_double_operand\" \"m#F,F\"))]\n@@ -2927,6 +2934,16 @@\n   [(set_attr \"type\" \"fpmove\")\n    (set_attr \"length\" \"1\")])\n \n+(define_insn \"*clear_dfp\"\n+  [(set (match_operand:DF 0 \"memory_operand\" \"=m\")\n+        (match_operand:DF 1 \"const_double_operand\" \"\"))]\n+  \"! TARGET_LIVE_G0\n+   && TARGET_V9\n+   && fp_zero_operand (operands[1])\"\n+  \"stx\\\\t%%g0, %0\"\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"length\" \"1\")])\n+\n (define_insn \"*movdf_const_intreg_sp32\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=e,e,?r\")\n         (match_operand:DF 1 \"const_double_operand\" \"T#F,o#F,F\"))]\n@@ -3278,6 +3295,52 @@\n   DONE;\n }\")\n \n+(define_insn \"*clear_tf\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"=e\")\n+        (match_operand:TF 1 \"const_double_operand\" \"\"))]\n+  \"TARGET_VIS\n+   && fp_zero_operand (operands[1])\"\n+  \"#\"\n+  [(set_attr \"type\" \"fpmove\")\n+   (set_attr \"length\" \"2\")])\n+\n+(define_split\n+  [(set (match_operand:TF 0 \"register_operand\" \"\")\n+        (match_operand:TF 1 \"const_double_operand\" \"\"))]\n+  \"TARGET_VIS && reload_completed\n+   && fp_zero_operand (operands[1])\"\n+  [(set (subreg:DF (match_dup 0) 0) (match_dup 1))\n+   (set (subreg:DF (match_dup 0) 8) (match_dup 1))]\n+  \"\n+{\n+  operands[1] = CONST0_RTX (DFmode);\n+}\n+\")\n+\n+(define_insn \"*clear_tfp\"\n+  [(set (match_operand:TF 0 \"memory_operand\" \"=m\")\n+        (match_operand:TF 1 \"const_double_operand\" \"\"))]\n+  \"! TARGET_LIVE_G0\n+   && TARGET_V9\n+   && fp_zero_operand (operands[1])\"\n+  \"#\"\n+  [(set_attr \"type\" \"fpmove\")\n+   (set_attr \"length\" \"2\")])\n+\n+(define_split\n+  [(set (match_operand:TF 0 \"memory_operand\" \"=m\")\n+        (match_operand:TF 1 \"const_double_operand\" \"\"))]\n+  \"! TARGET_LIVE_G0\n+   && TARGET_V9 && reload_completed\n+   && fp_zero_operand (operands[1])\"\n+  [(set (subreg:DF (match_dup 0) 0) (match_dup 1))\n+   (set (subreg:DF (match_dup 0) 8) (match_dup 1))]\n+  \"\n+{\n+  operands[1] = CONST0_RTX (DFmode);\n+}\n+\")\n+\n (define_expand \"movtf\"\n   [(set (match_operand:TF 0 \"general_operand\" \"\")\n \t(match_operand:TF 1 \"general_operand\" \"\"))]\n@@ -3288,6 +3351,11 @@\n   if (GET_CODE (operands[0]) == REG\n       && CONSTANT_P (operands[1]))\n     {\n+      if (TARGET_VIS\n+          && GET_CODE (operands[1]) == CONST_DOUBLE\n+\t  && fp_zero_operand (operands[1]))\n+\tgoto movtf_is_ok;\n+\n       /* emit_group_store will send such bogosity to us when it is\n          not storing directly into memory.  So fix this up to avoid\n          crashes in output_constant_pool.  */"}]}