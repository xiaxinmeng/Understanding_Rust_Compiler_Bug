{"sha": "a34a91f0b73dad394cd0db44f5702406c09a06c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM0YTkxZjBiNzNkYWQzOTRjZDBkYjQ0ZjU3MDI0MDZjMDlhMDZjNg==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2005-12-03T15:32:04Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2005-12-03T15:32:04Z"}, "message": "re PR fortran/25106 ([4.0/4.1] statement label is zero)\n\n\tPR fortran/25106\n\t* parse.c (next_free): Use new prototype for gfc_match_st_label.\n\tCorrectly emit hard error if a label is zero.\n\t* match.c (gfc_match_st_label): Never allow zero as a valid\n\tlabel.\n\t(gfc_match, gfc_match_do, gfc_match_goto): Use new prototype for\n\tgfc_match_st_label.\n\t* primary.c (): Use new prototype for gfc_match_st_label.\n\t* io.c (): Likewise.\n\t* match.h: Likewise.\n\nFrom-SVN: r107999", "tree": {"sha": "fed5540ea5770fb73224878dea9cced4affb486c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fed5540ea5770fb73224878dea9cced4affb486c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a34a91f0b73dad394cd0db44f5702406c09a06c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a34a91f0b73dad394cd0db44f5702406c09a06c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a34a91f0b73dad394cd0db44f5702406c09a06c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a34a91f0b73dad394cd0db44f5702406c09a06c6/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b2bb2edfa74093b2926ca0673e845edd7f5f8a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b2bb2edfa74093b2926ca0673e845edd7f5f8a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b2bb2edfa74093b2926ca0673e845edd7f5f8a5"}], "stats": {"total": 61, "additions": 36, "deletions": 25}, "files": [{"sha": "00dcfddb6f6f114b4dbd1c473cb22723f8f12da7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a34a91f0b73dad394cd0db44f5702406c09a06c6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a34a91f0b73dad394cd0db44f5702406c09a06c6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a34a91f0b73dad394cd0db44f5702406c09a06c6", "patch": "@@ -1,3 +1,16 @@\n+2005-12-30  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/25106\n+\t* parse.c (next_free): Use new prototype for gfc_match_st_label.\n+\tCorrectly emit hard error if a label is zero.\n+\t* match.c (gfc_match_st_label): Never allow zero as a valid\n+\tlabel.\n+\t(gfc_match, gfc_match_do, gfc_match_goto): Use new prototype for\n+\tgfc_match_st_label.\n+\t* primary.c (): Use new prototype for gfc_match_st_label.\n+\t* io.c (): Likewise.\n+\t* match.h: Likewise.\n+\n 2005-12-02  Richard Guenther  <rguenther@suse.de>\n \n \t* trans.h (build1_v): Use build1, not build to build the"}, {"sha": "6adc1efb613a05385b0da19430a4d5b157f96c85", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a34a91f0b73dad394cd0db44f5702406c09a06c6/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a34a91f0b73dad394cd0db44f5702406c09a06c6/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=a34a91f0b73dad394cd0db44f5702406c09a06c6", "patch": "@@ -1591,7 +1591,7 @@ match_dt_format (gfc_dt * dt)\n       return MATCH_YES;\n     }\n \n-  if (gfc_match_st_label (&label, 0) == MATCH_YES)\n+  if (gfc_match_st_label (&label) == MATCH_YES)\n     {\n       if (dt->format_expr != NULL || dt->format_label != NULL)\n \t{"}, {"sha": "8ca7ed6adaaf49a3e9bc8cf4622fc53b1d79be10", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a34a91f0b73dad394cd0db44f5702406c09a06c6/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a34a91f0b73dad394cd0db44f5702406c09a06c6/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=a34a91f0b73dad394cd0db44f5702406c09a06c6", "patch": "@@ -217,7 +217,7 @@ gfc_match_small_int (int *value)\n    do most of the work.  */\n \n match\n-gfc_match_st_label (gfc_st_label ** label, int allow_zero)\n+gfc_match_st_label (gfc_st_label ** label)\n {\n   locus old_loc;\n   match m;\n@@ -229,13 +229,16 @@ gfc_match_st_label (gfc_st_label ** label, int allow_zero)\n   if (m != MATCH_YES)\n     return m;\n \n-  if (((i == 0) && allow_zero) || i <= 99999)\n+  if (i > 0 && i <= 99999)\n     {\n       *label = gfc_get_st_label (i);\n       return MATCH_YES;\n     }\n \n-  gfc_error (\"Statement label at %C is out of range\");\n+  if (i == 0)\n+    gfc_error (\"Statement label at %C is zero\");\n+  else\n+    gfc_error (\"Statement label at %C is out of range\");\n   gfc_current_locus = old_loc;\n   return MATCH_ERROR;\n }\n@@ -690,7 +693,7 @@ gfc_match (const char *target, ...)\n \n \tcase 'l':\n \t  label = va_arg (argp, gfc_st_label **);\n-\t  n = gfc_match_st_label (label, 0);\n+\t  n = gfc_match_st_label (label);\n \t  if (n != MATCH_YES)\n \t    {\n \t      m = n;\n@@ -1242,7 +1245,7 @@ gfc_match_do (void)\n   if (gfc_match (\" do\") != MATCH_YES)\n     return MATCH_NO;\n \n-  m = gfc_match_st_label (&label, 0);\n+  m = gfc_match_st_label (&label);\n   if (m == MATCH_ERROR)\n     goto cleanup;\n \n@@ -1275,7 +1278,7 @@ gfc_match_do (void)\n   gfc_match_label ();\t\t/* This won't error */\n   gfc_match (\" do \");\t\t/* This will work */\n \n-  gfc_match_st_label (&label, 0);\t/* Can't error out */\n+  gfc_match_st_label (&label);\t/* Can't error out */\n   gfc_match_char (',');\t\t/* Optional comma */\n \n   m = gfc_match_iterator (&iter, 0);\n@@ -1585,7 +1588,7 @@ gfc_match_goto (void)\n \n       do\n \t{\n-\t  m = gfc_match_st_label (&label, 0);\n+\t  m = gfc_match_st_label (&label);\n \t  if (m != MATCH_YES)\n \t    goto syntax;\n \n@@ -1631,7 +1634,7 @@ gfc_match_goto (void)\n \n   do\n     {\n-      m = gfc_match_st_label (&label, 0);\n+      m = gfc_match_st_label (&label);\n       if (m != MATCH_YES)\n \tgoto syntax;\n "}, {"sha": "a3c1d813c14bea29938c5aa6829e404367c54a3a", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a34a91f0b73dad394cd0db44f5702406c09a06c6/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a34a91f0b73dad394cd0db44f5702406c09a06c6/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=a34a91f0b73dad394cd0db44f5702406c09a06c6", "patch": "@@ -41,7 +41,7 @@ extern gfc_st_label *gfc_statement_label;\n match gfc_match_space (void);\n match gfc_match_eos (void);\n match gfc_match_small_literal_int (int *);\n-match gfc_match_st_label (gfc_st_label **, int);\n+match gfc_match_st_label (gfc_st_label **);\n match gfc_match_label (void);\n match gfc_match_small_int (int *);\n int gfc_match_strings (mstring *);"}, {"sha": "311d10a3cebccb8502006cea70a95c74c0f27fae", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a34a91f0b73dad394cd0db44f5702406c09a06c6/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a34a91f0b73dad394cd0db44f5702406c09a06c6/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=a34a91f0b73dad394cd0db44f5702406c09a06c6", "patch": "@@ -318,30 +318,25 @@ next_free (void)\n   if (ISDIGIT (c))\n     {\n       /* Found a statement label?  */\n-      m = gfc_match_st_label (&gfc_statement_label, 0);\n+      m = gfc_match_st_label (&gfc_statement_label);\n \n       d = gfc_peek_char ();\n       if (m != MATCH_YES || !gfc_is_whitespace (d))\n \t{\n+\t  gfc_match_small_literal_int (&c);\n+\t  if (c == 0)\n+\t    gfc_error_now (\"Statement label at %C is zero\");\n+\t  else\n+\t    gfc_error_now (\"Statement label at %C is out of range\");\n+\n \t  do\n-\t    {\n-\t      /* Skip the bad statement label.  */\n-\t      gfc_warning_now (\"Ignoring bad statement label at %C\");\n-\t      c = gfc_next_char ();\n-\t    }\n-\t  while (ISDIGIT (c));\n+\t    c = gfc_next_char ();\n+\t  while (ISDIGIT(c));\n \t}\n       else\n \t{\n \t  label_locus = gfc_current_locus;\n \n-\t  if (gfc_statement_label->value == 0)\n-\t    {\n-\t      gfc_warning_now (\"Ignoring statement label of zero at %C\");\n-\t      gfc_free_st_label (gfc_statement_label);\n-\t      gfc_statement_label = NULL;\n-\t    }\n-\n \t  gfc_gobble_whitespace ();\n \n \t  if (gfc_match_eos () == MATCH_YES)"}, {"sha": "234a803bfabdeed31a550c8d66163b33ad6b982b", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a34a91f0b73dad394cd0db44f5702406c09a06c6/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a34a91f0b73dad394cd0db44f5702406c09a06c6/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=a34a91f0b73dad394cd0db44f5702406c09a06c6", "patch": "@@ -1474,7 +1474,7 @@ gfc_match_actual_arglist (int sub_flag, gfc_actual_arglist ** argp)\n \n       if (sub_flag && gfc_match_char ('*') == MATCH_YES)\n \t{\n-\t  m = gfc_match_st_label (&label, 0);\n+\t  m = gfc_match_st_label (&label);\n \t  if (m == MATCH_NO)\n \t    gfc_error (\"Expected alternate return label at %C\");\n \t  if (m != MATCH_YES)"}]}