{"sha": "73d706062e3c180ceeae33fc412ef3af4b012f1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNkNzA2MDYyZTNjMTgwY2VlYWUzM2ZjNDEyZWYzYWY0YjAxMmYxYQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-12-30T18:44:27Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-12-30T18:44:27Z"}, "message": "re PR target/49263 (SH Target: underutilized \"TST #imm, R0\" instruction)\n\ngcc/testsuite/\n\tPR target/49263\n\t* gcc.target/sh/pr49263-1.c: New.\n\t* gcc.target/sh/pr49263-2.c: New.\n\nFrom-SVN: r219111", "tree": {"sha": "703ab67658ac676181c34c83915c1e70e5f9771c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/703ab67658ac676181c34c83915c1e70e5f9771c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73d706062e3c180ceeae33fc412ef3af4b012f1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73d706062e3c180ceeae33fc412ef3af4b012f1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73d706062e3c180ceeae33fc412ef3af4b012f1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73d706062e3c180ceeae33fc412ef3af4b012f1a/comments", "author": null, "committer": null, "parents": [{"sha": "000525b2a33fa5c7cde6b9bf5fef826ceada7d1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/000525b2a33fa5c7cde6b9bf5fef826ceada7d1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/000525b2a33fa5c7cde6b9bf5fef826ceada7d1f"}], "stats": {"total": 122, "additions": 122, "deletions": 0}, "files": [{"sha": "aaab82f2d42f4fb4cab9c7e384834f1e65707418", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d706062e3c180ceeae33fc412ef3af4b012f1a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d706062e3c180ceeae33fc412ef3af4b012f1a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=73d706062e3c180ceeae33fc412ef3af4b012f1a", "patch": "@@ -1,3 +1,9 @@\n+2014-12-30  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/49263\n+\t* gcc.target/sh/pr49263-1.c: New.\n+\t* gcc.target/sh/pr49263-2.c: New.\n+\n 2014-12-30  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/53987"}, {"sha": "fd3cb4bbd28acc01958d03efbdf00ba15df112de", "filename": "gcc/testsuite/gcc.target/sh/pr49263-1.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d706062e3c180ceeae33fc412ef3af4b012f1a/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49263-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d706062e3c180ceeae33fc412ef3af4b012f1a/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49263-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49263-1.c?ref=73d706062e3c180ceeae33fc412ef3af4b012f1a", "patch": "@@ -0,0 +1,62 @@\n+/* Verify that TST #imm, R0 instruction is generated when QImode or HImode\n+   values are tested against a negative constant.  */\n+/* { dg-do compile }  */\n+/* { dg-options \"-O2\" }  */\n+/* { dg-final { scan-assembler-not \"and\" } }  */\n+/* { dg-final { scan-assembler-not \"bclr\" { xfail *-*-* } } }  */\n+/* { dg-final { scan-assembler-times \"extu\" 1 { xfail *-*-* } } }  */\n+/* { dg-final { scan-assembler-times \"exts\" 1 { xfail *-*-* } } }  */\n+\n+#define make_func(__valtype__, __valget__, __tstval__, __suff__)\\\n+  int test_imm_##__tstval__##__suff__ (__valtype__ val) \\\n+    {\\\n+      return ((__valget__) & (- 0x##__tstval__  << 0)) ? -20 : -40;\\\n+    }\n+\n+#define make_func_0_F(__valtype__, __valget__, __y__, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##0, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##1, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##2, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##3, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##4, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##5, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##6, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##7, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##8, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##9, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##A, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##B, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##C, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##D, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##E, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##F, __suff__)\\\n+\n+#define make_funcs_0_FF(__valtype__, __valget__, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, 0, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, 1, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, 2, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, 3, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, 4, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, 5, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, 6, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, 7, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, 8, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, 9, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, A, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, B, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, C, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, D, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, E, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, F, __suff__)\\\n+\n+make_funcs_0_FF (signed char*, *val, int8_mem)\n+make_funcs_0_FF (signed char, val, int8_reg)\n+\n+make_funcs_0_FF (unsigned char*, *val, uint8_mem)\n+make_funcs_0_FF (unsigned char, val, uint8_reg)\n+\n+make_funcs_0_FF (short*, *val, int16_mem)\n+make_funcs_0_FF (short, val, int16_reg)\n+\n+make_funcs_0_FF (unsigned short*, *val, uint16_mem)\n+make_funcs_0_FF (unsigned short, val, uint16_reg)"}, {"sha": "3385161e3901f89ad0f3c3eb726f1e602b35ecb9", "filename": "gcc/testsuite/gcc.target/sh/pr49263-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d706062e3c180ceeae33fc412ef3af4b012f1a/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49263-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d706062e3c180ceeae33fc412ef3af4b012f1a/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49263-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49263-2.c?ref=73d706062e3c180ceeae33fc412ef3af4b012f1a", "patch": "@@ -0,0 +1,54 @@\n+/* Verify that TST #imm, R0 instruction is generated when QImode or HImode\n+   values are tested against a negative constant.  */\n+/* { dg-do compile }  */\n+/* { dg-options \"-O2\" }  */\n+/* { dg-final { scan-assembler-not \"and\" } }  */\n+/* { dg-final { scan-assembler-not \"exts\" { xfail *-*-* } } }  */\n+\n+/* { dg-final { scan-assembler-times \"tst\\t#127,r0\" 2 } }  */\n+/* { dg-final { scan-assembler-times \"tst\\t#255,r0\" 1 { xfail *-*-* } } }  */\n+/* { dg-final { scan-assembler-times \"65407\" 1 { xfail *-*-* } } }  */\n+/* { dg-final { scan-assembler-times \"-129\" 2 { xfail *-*-* } } }  */\n+/* { dg-final { scan-assembler-times \"extu\" 1 { xfail *-*-* } } }  */\n+\n+int\n+test_00 (unsigned char x)\n+{\n+  /* 1x tst #127  */\n+  return x & -129 ? -20 : -40;\n+}\n+\n+int\n+test_01 (signed char x)\n+{\n+  /* 1x tst #255  */\n+  return x & -129 ? -20 : -40;\n+}\n+\n+int\n+test_02 (unsigned short x)\n+{\n+  /* 1x tst 65407  */\n+  return x & -129 ? -20 : -40;\n+}\n+\n+int\n+test_03 (unsigned short* x)\n+{\n+  /* 1x tst -129  */\n+  return x[0] & -129 ? -20 : -40;\n+}\n+\n+int\n+test_04 (unsigned short x)\n+{\n+  /* 1x extu.w, 1x tst -129  */\n+  return x & -129 ? x : -1;\n+}\n+\n+int\n+test_05 (unsigned char* x)\n+{\n+  /* 1x tst #127  */\n+  return x[0] & -129 ? -20 : -40;\n+}"}]}