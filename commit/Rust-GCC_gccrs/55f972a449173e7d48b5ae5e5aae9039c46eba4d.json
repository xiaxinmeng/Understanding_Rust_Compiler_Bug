{"sha": "55f972a449173e7d48b5ae5e5aae9039c46eba4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVmOTcyYTQ0OTE3M2U3ZDQ4YjVhZTVlNWFhZTkwMzljNDZlYmE0ZA==", "commit": {"author": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2000-07-04T11:01:50Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2000-07-04T11:01:50Z"}, "message": "avr.h (MASK_*): Define bits for target_flags.\n\n\t* config/avr/avr.h (MASK_*): Define bits for target_flags.\n\t(TARGET_SWITCHES): Mark help strings for translation.\n\tAdd new -mpack-args and -menhanced switches.\n\t(TARGET_OPTIONS): Mark help strings for translation.\n\t(progmem_section): Add section attributes.\n\nFrom-SVN: r34865", "tree": {"sha": "9d0aea96c7229feffab45dca09161e75b332800a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d0aea96c7229feffab45dca09161e75b332800a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55f972a449173e7d48b5ae5e5aae9039c46eba4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55f972a449173e7d48b5ae5e5aae9039c46eba4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55f972a449173e7d48b5ae5e5aae9039c46eba4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55f972a449173e7d48b5ae5e5aae9039c46eba4d/comments", "author": null, "committer": null, "parents": [{"sha": "60b559475240f3096bce555440d663f95bee0a87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60b559475240f3096bce555440d663f95bee0a87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60b559475240f3096bce555440d663f95bee0a87"}], "stats": {"total": 69, "additions": 45, "deletions": 24}, "files": [{"sha": "b1e52cf94f2bd70944ae84bf6a8b1e60c6369265", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 45, "deletions": 24, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f972a449173e7d48b5ae5e5aae9039c46eba4d/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f972a449173e7d48b5ae5e5aae9039c46eba4d/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=55f972a449173e7d48b5ae5e5aae9039c46eba4d", "patch": "@@ -46,19 +46,33 @@ Boston, MA 02111-1307, USA.  */\n /* This declaration should be present. */\n extern int target_flags;\n \n-#define TARGET_ORDER_1\t\t(target_flags &  0x1000)\n-#define TARGET_ORDER_2\t\t(target_flags &  0x4000)\n-#define TARGET_INT8  \t\t(target_flags & 0x10000)\n-#define TARGET_NO_INTERRUPTS\t(target_flags & 0x20000)\n-#define TARGET_INSN_SIZE_DUMP\t(target_flags &  0x2000)\n-#define TARGET_CALL_PROLOGUES\t(target_flags & 0x40000)\n-#define TARGET_TINY_STACK\t(target_flags & 0x80000)\n+#define MASK_RTL_DUMP\t\t0x00000010\n+#define MASK_ALL_DEBUG\t\t0x00000FE0\n+#define MASK_ORDER_1\t\t0x00001000\n+#define MASK_INSN_SIZE_DUMP\t0x00002000\n+#define MASK_ORDER_2\t\t0x00004000\n+#define MASK_INT8\t\t0x00010000\n+#define MASK_NO_INTERRUPTS\t0x00020000\n+#define MASK_CALL_PROLOGUES\t0x00040000\n+#define MASK_TINY_STACK\t\t0x00080000\n+#define MASK_PACK_ARGS\t\t0x00100000\n+#define MASK_ENHANCED\t\t0x00200000\n+\n+#define TARGET_ORDER_1\t\t(target_flags & MASK_ORDER_1)\n+#define TARGET_ORDER_2\t\t(target_flags & MASK_ORDER_2)\n+#define TARGET_INT8  \t\t(target_flags & MASK_INT8)\n+#define TARGET_NO_INTERRUPTS\t(target_flags & MASK_NO_INTERRUPTS)\n+#define TARGET_INSN_SIZE_DUMP\t(target_flags & MASK_INSN_SIZE_DUMP)\n+#define TARGET_CALL_PROLOGUES\t(target_flags & MASK_CALL_PROLOGUES)\n+#define TARGET_TINY_STACK\t(target_flags & MASK_TINY_STACK)\n+#define TARGET_PACK_ARGS\t(target_flags & MASK_PACK_ARGS)\n+#define TARGET_ENHANCED\t\t(target_flags & MASK_ENHANCED)\n \n /* Dump each assembler insn's rtl into the output file.\n    This is for debugging the compiler itself.  */\n \n-#define TARGET_RTL_DUMP\t\t(target_flags &   0x010)\n-#define TARGET_ALL_DEBUG \t(target_flags &   0xfe0)\n+#define TARGET_RTL_DUMP\t\t(target_flags & MASK_RTL_DUMP)\n+#define TARGET_ALL_DEBUG \t(target_flags & MASK_ALL_DEBUG)\n \n /* `TARGET_...'\n    This series of macros is to allow compiler command arguments to\n@@ -83,17 +97,24 @@ extern int target_flags;\n \n \n #define TARGET_SWITCHES {\t\t\t\t\t\t\\\n-  {\"order1\",0x1000, NULL},\t\t\t\t\t\t\\\n-  {\"order2\",0x4000, NULL},\t\t\t\t\t\t\\\n-  {\"int8\",0x10000,\"Assume int to be 8 bit integer\"},\t\t\t\\\n-  {\"no-interrupts\",0x20000,\"Don't output interrupt compatible code\"},\t\\\n-  {\"call-prologues\",0x40000,\t\t\t\t\t\t\\\n-   \"Use subroutines for functions prologue/epilogue\"},\t\t\t\\\n-  {\"tiny-stack\", 0x80000, \"Change only low 8 bits of stack pointer\"},\t\\\n-  {\"rtl\",0x10, NULL},\t\t\t\t\t\t\t\\\n-  {\"size\",0x2000,\"Output instruction size's to the asm file\"},\t\t\\\n-  {\"deb\",0xfe0, NULL},\t\t\t\t\t\t\t\\\n-  {\"\",0, NULL}}\n+  { \"order1\", MASK_ORDER_1, NULL },\t\t\t\t\t\\\n+  { \"order2\", MASK_ORDER_2, NULL },\t\t\t\t\t\\\n+  { \"int8\", MASK_INT8, N_(\"Assume int to be 8 bit integer\") },\t\t\\\n+  { \"no-interrupts\", MASK_NO_INTERRUPTS,\t\t\t\t\\\n+    N_(\"Change the stack pointer without disabling interrupts\") },\t\\\n+  { \"call-prologues\", MASK_CALL_PROLOGUES,\t\t\t\t\\\n+    N_(\"Use subroutines for function prologue/epilogue\") },\t\t\\\n+  { \"tiny-stack\", MASK_TINY_STACK,\t\t\t\t\t\\\n+    N_(\"Change only the low 8 bits of the stack pointer\") },\t\t\\\n+  { \"pack-args\", MASK_PACK_ARGS,\t\t\t\t\t\\\n+    N_(\"Do not align function arguments on even numbered registers\") },\t\\\n+  { \"enhanced\", MASK_ENHANCED,\t\t\t\t\t\t\\\n+    N_(\"Generate code for the enhanced AVR core\") },\t\t\t\\\n+  { \"rtl\", MASK_RTL_DUMP, NULL },\t\t\t\t\t\\\n+  { \"size\", MASK_INSN_SIZE_DUMP,\t\t\t\t\t\\\n+    N_(\"Output instruction sizes to the asm file\") },\t\t\t\\\n+  { \"deb\", MASK_ALL_DEBUG, NULL },\t\t\t\t\t\\\n+  { \"\", 0, NULL } }\n /* This macro defines names of command options to set and clear bits\n    in `target_flags'.  Its definition is an initializer with a\n    subgrouping for each command option.\n@@ -129,9 +150,8 @@ extern struct mcu_type_s *avr_mcu_type;\n #define AVR_MEGA (avr_mcu_type->mega)\n \n #define TARGET_OPTIONS {\t\t\t\t\t\t      \\\n- {\"init-stack=\",&avr_ram_end,\"Specify the initial stack address\" },\t      \\\n- {\"mcu=\", &avr_mcu_name,\t\t\t\t\t\t      \\\n-  \"Specify the MCU name (at90s23xx,attiny22,at90s44xx,at90s85xx,atmega603,atmega103)\"}}\n+ { \"init-stack=\", &avr_ram_end, N_(\"Specify the initial stack address\") },    \\\n+ { \"mcu=\", &avr_mcu_name, N_(\"Specify the MCU name\") } }\n /* This macro is similar to `TARGET_SWITCHES' but defines names of\n    command options that have values.  Its definition is an\n    initializer with a subgrouping for each command option.\n@@ -1984,7 +2004,8 @@ progmem_section (void)\t\t\t\t\t\t\t      \\\n {\t\t\t\t\t\t\t\t\t      \\\n   if (in_section != in_progmem)\t\t\t\t\t\t      \\\n     {\t\t\t\t\t\t\t\t\t      \\\n-      fprintf (asm_out_file, \".section .progmem.gcc_sw_table\\n\");\t      \\\n+      fprintf (asm_out_file,\t\t\t\t\t\t      \\\n+\t       \".section .progmem.gcc_sw_table, \\\"a\\\", @progbits\\n\");\t      \\\n       in_section = in_progmem;\t\t\t\t\t\t      \\\n     }\t\t\t\t\t\t\t\t\t      \\\n }"}]}