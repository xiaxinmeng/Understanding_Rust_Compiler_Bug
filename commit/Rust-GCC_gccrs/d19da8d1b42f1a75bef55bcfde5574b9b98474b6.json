{"sha": "d19da8d1b42f1a75bef55bcfde5574b9b98474b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE5ZGE4ZDFiNDJmMWE3NWJlZjU1YmNmZGU1NTc0YjliOTg0NzRiNg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-06-14T17:46:53Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-06-14T17:46:53Z"}, "message": "jni.exp: New file.\n\n\t* libjava.jni/jni.exp: New file.\n\t* lib/libjava.exp (gcj_link): New proc.\n\nFrom-SVN: r43375", "tree": {"sha": "0ec2f585314dbba556a40871968a29a52173bf73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ec2f585314dbba556a40871968a29a52173bf73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d19da8d1b42f1a75bef55bcfde5574b9b98474b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d19da8d1b42f1a75bef55bcfde5574b9b98474b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d19da8d1b42f1a75bef55bcfde5574b9b98474b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d19da8d1b42f1a75bef55bcfde5574b9b98474b6/comments", "author": null, "committer": null, "parents": [{"sha": "fc07ebe2a7a5e92f798d5e52f23ff2002efa2b97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc07ebe2a7a5e92f798d5e52f23ff2002efa2b97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc07ebe2a7a5e92f798d5e52f23ff2002efa2b97"}], "stats": {"total": 176, "additions": 176, "deletions": 0}, "files": [{"sha": "f33c890d1240eedfc1444ec4ab2121eb7835800b", "filename": "libjava/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19da8d1b42f1a75bef55bcfde5574b9b98474b6/libjava%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19da8d1b42f1a75bef55bcfde5574b9b98474b6/libjava%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FChangeLog?ref=d19da8d1b42f1a75bef55bcfde5574b9b98474b6", "patch": "@@ -1,3 +1,8 @@\n+2001-06-14  Tom Tromey  <tromey@redhat.com>\n+\n+\t* libjava.jni/jni.exp: New file.\n+\t* lib/libjava.exp (gcj_link): New proc.\n+\n 2001-06-08  Tom Tromey  <tromey@redhat.com>\n \n \tFix for PR libgcj/2874:"}, {"sha": "ace5f6c2b2d2fa4ae6950201ffb0600ca6c38d03", "filename": "libjava/testsuite/lib/libjava.exp", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19da8d1b42f1a75bef55bcfde5574b9b98474b6/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19da8d1b42f1a75bef55bcfde5574b9b98474b6/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flib%2Flibjava.exp?ref=d19da8d1b42f1a75bef55bcfde5574b9b98474b6", "patch": "@@ -336,6 +336,27 @@ proc libjava_arguments {{mode compile}} {\n     return $args\n }\n \n+# Link a bunch of objects into a program.  MAIN is the name of the\n+# class holding `main'.  Return 0 on failure.\n+proc gcj_link {program main files {options {}}} {\n+    set arguments [libjava_arguments link]\n+    if {[llength $options]} {\n+\teval lappend arguments $options\n+    }\n+    lappend arguments \"additional_flags=--main=$main\"\n+    set x [prune_warnings [libjava_tcompile $files $program executable \\\n+\t\t\t     $arguments]]\n+    if {$x != \"\"} {\n+\tverbose \"link failure: $x\" 2\n+\tfail \"linking $program\"\n+\tsetup_xfail \"*-*-*\"\n+\tfail \"running $program\"\n+\treturn 0\n+    }\n+\n+    pass \"linking $program\"\n+    return 1\n+}\n \n #\n # Run the test specified by srcfile and resultfile. compile_args and"}, {"sha": "4eb7b447fe734184c8d4c46824ebd7730a60435a", "filename": "libjava/testsuite/libjava.jni/jni.exp", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19da8d1b42f1a75bef55bcfde5574b9b98474b6/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19da8d1b42f1a75bef55bcfde5574b9b98474b6/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp?ref=d19da8d1b42f1a75bef55bcfde5574b9b98474b6", "patch": "@@ -0,0 +1,150 @@\n+# Tests for JNI code.\n+\n+# Compile a single C file and produce a .so file.  OPTIONS is a list\n+# of options to pass to the compiler.  Returns 0 on failure, 1 on\n+# success.\n+proc gcj_jni_compile_c_to_so {file {options {}}} {\n+  global srcdir\n+\n+  set name [file rootname [file tail $file]]\n+  set soname lib${name}.so\n+\n+  lappend options \"additional_flags=-shared -fPIC\"\n+  # Find the generated header.\n+  lappend options \"additional_flags=-I.\"\n+  # Find jni.h.\n+  lappend options \"additional_flags=-I$srcdir/../../include\"\n+\n+  set x [prune_warnings [target_compile $file $soname executable $options]]\n+  if {$x != \"\"} {\n+    verbose \"target_compile failed: $x\" 2\n+    fail \"$name.c compilation\"\n+    return 0\n+  }\n+\n+  pass \"$name.c compilation\"\n+  return 1\n+}\n+\n+# Build a header file from a .class file.  Return 0 on failure.\n+proc gcj_jni_build_header {file} {\n+  set gcjh [find_gcjh]\n+  set file [file rootname $file]\n+  set options [list \"compiler=$gcjh\" \\\n+\t\t \"additional_flags=-jni\"]\n+  set x [prune_warnings [target_compile $file \"\" none $options]]\n+  if {$x != \"\"} {\n+    verbose \"target_compile failed: $x\" 2\n+    fail \"$file header generation\"\n+    return 0\n+  }\n+\n+  pass \"$file header generation\"\n+  return 1\n+}\n+\n+# Invoke the program and see what happens.  Return 0 on failure.\n+proc gcj_invoke {program expectFile} {\n+  global env\n+  set lib_path $env(LD_LIBRARY_PATH)\n+  setenv LD_LIBRARY_PATH .:$lib_path\n+  setenv SHLIB_PATH .:$lib_path\n+\n+  verbose \"LD_LIBRARY_PATH=$env(LD_LIBRARY_PATH)\"\n+\n+  set result [libjava_load ./$program]\n+  set status [lindex $result 0]\n+  set output [lindex $result 1]\n+\n+  # Restore setting\n+  setenv LD_LIBRARY_PATH $lib_path\n+  setenv SHLIB_PATH $lib_path\n+\n+  if {$status != \"pass\"} {\n+    verbose \"got $output\"\n+    fail \"$program run\"\n+    untested \"$program output\"\n+    return 0\n+  }\n+\n+  set id [open $expectFile r]\n+  set expected [read $id]\n+  close $id\n+\n+  if {! [string compare $output $expected]} {\n+    pass \"$program output\"\n+    return 1\n+  } else {\n+    fail \"$program output\"\n+    return 0\n+  }\n+}\n+\n+# Do all the work for a single JNI test.  Return 0 on failure.\n+proc gcj_jni_test_one {file} {\n+  global runtests\n+\n+  # The base name.  We use it for several purposes.\n+  set main [file rootname [file tail $file]]\n+  if {! [runtest_file_p $runtests $main]} {\n+    # Simply skip it.\n+    return 1\n+  }\n+\n+  if {! [bytecompile_file $file [pwd]]} {\n+    fail \"bytecompile $file\"\n+    # FIXME - should use `untested' on all remaining tests.\n+    # But that is hard.\n+    return 0\n+  }\n+  pass \"bytecompile $file\"\n+\n+  set bytefile [file rootname [file tail $file]].class\n+  if {! [gcj_jni_build_header $bytefile]} {\n+    # FIXME\n+    return 0\n+  }\n+\n+  set cfile [file rootname $file].c\n+  if {! [gcj_jni_compile_c_to_so $cfile]} {\n+    # FIXME\n+    return 0\n+  }\n+\n+  # We use -l$main because the .so is named the same as the main\n+  # program.\n+  set args [list \"additional_flags=-fjni -L. -l$main\"]\n+  if {! [gcj_link $main $main $file $args]} {\n+    # FIXME\n+    return 0\n+  }\n+\n+  if {! [gcj_invoke $main [file rootname $file].out]} {\n+    # FIXME\n+    return 0\n+  }\n+\n+  # When we succeed we remove all our clutter.\n+  eval gcj_cleanup [glob -nocomplain -- ${main}.*] [list $main lib${main}.so]\n+\n+  return 1\n+}\n+\n+# Run the JNI tests.\n+proc gcj_jni_run {} {\n+  global srcdir subdir\n+  global target_triplet host_triplet\n+\n+  # For now we only test JNI on native builds.\n+  if {$target_triplet == $host_triplet} {\n+    catch \"glob -nocomplain ${srcdir}/${subdir}/*.java\" srcfiles\n+\n+    foreach x $srcfiles {\n+      gcj_jni_test_one $x\n+    }\n+  } else {\n+    verbose \"JNI tests not run in cross-compilation environment\"\n+  }\n+}\n+\n+gcj_jni_run"}]}