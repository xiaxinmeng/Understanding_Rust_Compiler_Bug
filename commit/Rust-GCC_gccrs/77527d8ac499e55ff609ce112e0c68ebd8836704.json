{"sha": "77527d8ac499e55ff609ce112e0c68ebd8836704", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc1MjdkOGFjNDk5ZTU1ZmY2MDljZTExMmUwYzY4ZWJkODgzNjcwNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-03-29T19:32:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-03-29T19:32:20Z"}, "message": "re PR c/89872 (GCC does not generate read access to volatile compound literal)\n\n\tPR c/89872\n\t* gimplify.c (gimplify_compound_literal_expr): Don't optimize a\n\tnon-addressable complit into its initializer if it is volatile.\n\n\t* gcc.dg/tree-ssa/pr89872.c: New test.\n\nFrom-SVN: r270023", "tree": {"sha": "8e23034ccb567298fa80d06f1ade4bea3437fb49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e23034ccb567298fa80d06f1ade4bea3437fb49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77527d8ac499e55ff609ce112e0c68ebd8836704", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77527d8ac499e55ff609ce112e0c68ebd8836704", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77527d8ac499e55ff609ce112e0c68ebd8836704", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77527d8ac499e55ff609ce112e0c68ebd8836704/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7ad99f7d21983de63725701832e03d095842b3ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ad99f7d21983de63725701832e03d095842b3ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ad99f7d21983de63725701832e03d095842b3ae"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "563943567ca6048c1c03893d32467b9e7301a116", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77527d8ac499e55ff609ce112e0c68ebd8836704/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77527d8ac499e55ff609ce112e0c68ebd8836704/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77527d8ac499e55ff609ce112e0c68ebd8836704", "patch": "@@ -1,3 +1,9 @@\n+2019-03-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/89872\n+\t* gimplify.c (gimplify_compound_literal_expr): Don't optimize a\n+\tnon-addressable complit into its initializer if it is volatile.\n+\n 2019-03-29  Roman Zhuykov  <zhroma@ispras.ru>\n \n \t* opts-common.c (integral_argument): Set errno properly in one case."}, {"sha": "6ac1b718ebd2f270b38a68bb84693f7fe715256d", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77527d8ac499e55ff609ce112e0c68ebd8836704/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77527d8ac499e55ff609ce112e0c68ebd8836704/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=77527d8ac499e55ff609ce112e0c68ebd8836704", "patch": "@@ -4665,6 +4665,7 @@ gimplify_compound_literal_expr (tree *expr_p, gimple_seq *pre_p,\n      otherwise we'd generate a new temporary, and we can as well just\n      use the decl we already have.  */\n   else if (!TREE_ADDRESSABLE (decl)\n+\t   && !TREE_THIS_VOLATILE (decl)\n \t   && init\n \t   && (fallback & fb_lvalue) == 0\n \t   && gimple_test_f (init))"}, {"sha": "1398b23424c0d3e0eac6f8b21c8e015a71cdbbcf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77527d8ac499e55ff609ce112e0c68ebd8836704/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77527d8ac499e55ff609ce112e0c68ebd8836704/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77527d8ac499e55ff609ce112e0c68ebd8836704", "patch": "@@ -1,3 +1,8 @@\n+2019-03-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/89872\n+\t* gcc.dg/tree-ssa/pr89872.c: New test.\n+\n 2019-03-29  Roman Zhuykov  <zhroma@ispras.ru>\n \n \t* gcc.dg/diag-sanity.c: New test."}, {"sha": "c081cd5f9ec0e9cd40150f5294eaac8ae2dca353", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr89872.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77527d8ac499e55ff609ce112e0c68ebd8836704/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89872.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77527d8ac499e55ff609ce112e0c68ebd8836704/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89872.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89872.c?ref=77527d8ac499e55ff609ce112e0c68ebd8836704", "patch": "@@ -0,0 +1,27 @@\n+/* PR c/89872 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \" ={v} 1;\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" ={v} 2;\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" ={v} 3;\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" ={v} 4;\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" ={v} 0;\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" ={v} \" 10 \"optimized\" } } */\n+\n+void\n+foo (void)\n+{\n+  (volatile int){1} + (volatile int){2};\n+}\n+\n+void\n+bar (void)\n+{\n+  (volatile int){3};\n+}\n+\n+void\n+baz (void)\n+{\n+  (volatile int){4} / (volatile int){0};\n+}"}]}