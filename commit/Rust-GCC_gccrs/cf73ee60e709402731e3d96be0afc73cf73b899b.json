{"sha": "cf73ee60e709402731e3d96be0afc73cf73b899b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y3M2VlNjBlNzA5NDAyNzMxZTNkOTZiZTBhZmM3M2NmNzNiODk5Yg==", "commit": {"author": {"name": "Kirill Yukhin", "email": "kirill.yukhin@intel.com", "date": "2014-02-10T10:36:59Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-02-10T10:36:59Z"}, "message": "avx512fintrin.h (_mm512_storeu_epi64): Removed.\n\ngcc/\n\t* config/i386/avx512fintrin.h (_mm512_storeu_epi64): Removed.\n\t(_mm512_loadu_epi32): Renamed into...\n\t(_mm512_loadu_si512): This.\n\t(_mm512_storeu_epi32): Renamed into...\n\t(_mm512_storeu_si512): This.\n\t(_mm512_maskz_ceil_ps): Removed.\n\t(_mm512_maskz_ceil_pd): Ditto.\n\t(_mm512_maskz_floor_ps): Ditto.\n\t(_mm512_maskz_floor_pd): Ditto.\n\t(_mm512_floor_round_ps): Ditto.\n\t(_mm512_floor_round_pd): Ditto.\n\t(_mm512_ceil_round_ps): Ditto.\n\t(_mm512_ceil_round_pd): Ditto.\n\t(_mm512_mask_floor_round_ps): Ditto.\n\t(_mm512_mask_floor_round_pd): Ditto.\n\t(_mm512_mask_ceil_round_ps): Ditto.\n\t(_mm512_mask_ceil_round_pd): Ditto.\n\t(_mm512_maskz_floor_round_ps): Ditto.\n\t(_mm512_maskz_floor_round_pd): Ditto.\n\t(_mm512_maskz_ceil_round_ps): Ditto.\n\t(_mm512_maskz_ceil_round_pd): Ditto.\n\t(_mm512_expand_pd): Ditto.\n\t(_mm512_expand_ps): Ditto.\n\t* config/i386/i386.c (ix86_builtins): Remove\n\tIX86_BUILTIN_EXPANDPD512_NOMASK, IX86_BUILTIN_EXPANDPS512_NOMASK.\n\t(bdesc_args): Ditto.\n\t* config/i386/predicates.md (const1256_operand): New.\n\t(const_1_to_2_operand): Ditto.\n\t* config/i386/sse.md (avx512pf_gatherpf<mode>sf): Change hint value.\n\t(*avx512pf_gatherpf<mode>sf_mask): Ditto.\n\t(*avx512pf_gatherpf<mode>sf): Ditto.\n\t(avx512pf_gatherpf<mode>df): Ditto.\n\t(*avx512pf_gatherpf<mode>df_mask): Ditto.\n\t(*avx512pf_gatherpf<mode>df): Ditto.\n\t(avx512pf_scatterpf<mode>sf): Ditto.\n\t(*avx512pf_scatterpf<mode>sf_mask): Ditto.\n\t(*avx512pf_scatterpf<mode>sf): Ditto.\n\t(avx512pf_scatterpf<mode>df): Ditto.\n\t(*avx512pf_scatterpf<mode>df_mask): Ditto.\n\t(*avx512pf_scatterpf<mode>df): Ditto.\n\t(avx512f_expand<mode>): Removed.\n\t(<shift_insn><mode>3<mask_name>): Change predicate type.\n\ntestsuite/gcc/\n\t* gcc.target/i386/avx512f-vexpandpd-1.c: Update intrinsics.\n\t* gcc.target/i386/avx512f-vexpandps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vexpandpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vexpandps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovdqu32-1: Ditto.\n\t* gcc.target/i386/avx512f-vmovdqu32-2: Ditto.\n\t* gcc.target/i386/avx512f-vmovdqu64-1: Ditto.\n\t* gcc.target/i386/avx512f-vmovdqu64-2: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmupd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmupq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vrndscalepd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vrndscaleps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vrndscalepd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vrndscaleps-2.c: Ditto.\n\t* gcc.target/i386/avx512pf-vgatherpf0dpd-1.c: Update parameters.\n\t* gcc.target/i386/avx512pf-vgatherpf0dps-1.c: Ditto.\n\t* gcc.target/i386/avx512pf-vgatherpf0qpd-1.c: Ditto.\n\t* gcc.target/i386/avx512pf-vgatherpf0qps-1.c: Ditto.\n\t* gcc.target/i386/avx512pf-vgatherpf1dpd-1.c: Ditto.\n\t* gcc.target/i386/avx512pf-vgatherpf1dps-1.c: Ditto.\n\t* gcc.target/i386/avx512pf-vgatherpf1qpd-1.c: Ditto.\n\t* gcc.target/i386/avx512pf-vgatherpf1qps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsrad-2.c: Initialize 64 bits.\n\t* gcc.target/i386/avx512f-vpslld-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpsrld-2.c: Ditto.\n\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\n\nFrom-SVN: r207651", "tree": {"sha": "d56a7fa6d458f90f5bd8c525804522def2bce1e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d56a7fa6d458f90f5bd8c525804522def2bce1e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf73ee60e709402731e3d96be0afc73cf73b899b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf73ee60e709402731e3d96be0afc73cf73b899b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf73ee60e709402731e3d96be0afc73cf73b899b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf73ee60e709402731e3d96be0afc73cf73b899b/comments", "author": null, "committer": null, "parents": [{"sha": "5cf0b7b783f18f84f63dbb11a6a1bfd826429dc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cf0b7b783f18f84f63dbb11a6a1bfd826429dc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cf0b7b783f18f84f63dbb11a6a1bfd826429dc2"}], "stats": {"total": 582, "additions": 189, "deletions": 393}, "files": [{"sha": "495175a3d0bf36426f5b9dc333107b7885c67c59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -1,3 +1,49 @@\n+2014-02-10  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* config/i386/avx512fintrin.h (_mm512_storeu_epi64): Removed.\n+\t(_mm512_loadu_epi32): Renamed into...\n+\t(_mm512_loadu_si512): This.\n+\t(_mm512_storeu_epi32): Renamed into...\n+\t(_mm512_storeu_si512): This.\n+\t(_mm512_maskz_ceil_ps): Removed.\n+\t(_mm512_maskz_ceil_pd): Ditto.\n+\t(_mm512_maskz_floor_ps): Ditto.\n+\t(_mm512_maskz_floor_pd): Ditto.\n+\t(_mm512_floor_round_ps): Ditto.\n+\t(_mm512_floor_round_pd): Ditto.\n+\t(_mm512_ceil_round_ps): Ditto.\n+\t(_mm512_ceil_round_pd): Ditto.\n+\t(_mm512_mask_floor_round_ps): Ditto.\n+\t(_mm512_mask_floor_round_pd): Ditto.\n+\t(_mm512_mask_ceil_round_ps): Ditto.\n+\t(_mm512_mask_ceil_round_pd): Ditto.\n+\t(_mm512_maskz_floor_round_ps): Ditto.\n+\t(_mm512_maskz_floor_round_pd): Ditto.\n+\t(_mm512_maskz_ceil_round_ps): Ditto.\n+\t(_mm512_maskz_ceil_round_pd): Ditto.\n+\t(_mm512_expand_pd): Ditto.\n+\t(_mm512_expand_ps): Ditto.\n+\t* config/i386/i386.c (ix86_builtins): Remove\n+\tIX86_BUILTIN_EXPANDPD512_NOMASK, IX86_BUILTIN_EXPANDPS512_NOMASK.\n+\t(bdesc_args): Ditto.\n+\t* config/i386/predicates.md (const1256_operand): New.\n+\t(const_1_to_2_operand): Ditto.\n+\t* config/i386/sse.md (avx512pf_gatherpf<mode>sf): Change hint value.\n+\t(*avx512pf_gatherpf<mode>sf_mask): Ditto.\n+\t(*avx512pf_gatherpf<mode>sf): Ditto.\n+\t(avx512pf_gatherpf<mode>df): Ditto.\n+\t(*avx512pf_gatherpf<mode>df_mask): Ditto.\n+\t(*avx512pf_gatherpf<mode>df): Ditto.\n+\t(avx512pf_scatterpf<mode>sf): Ditto.\n+\t(*avx512pf_scatterpf<mode>sf_mask): Ditto.\n+\t(*avx512pf_scatterpf<mode>sf): Ditto.\n+\t(avx512pf_scatterpf<mode>df): Ditto.\n+\t(*avx512pf_scatterpf<mode>df_mask): Ditto.\n+\t(*avx512pf_scatterpf<mode>df): Ditto.\n+\t(avx512f_expand<mode>): Removed.\n+\t(<shift_insn><mode>3<mask_name>): Change predicate type.\n+\n 2014-02-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree-vect-data-refs.c (vect_analyze_data_refs): For clobbers"}, {"sha": "d53a40d17cbc2949e5a03f18a73c0595670167bb", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 2, "deletions": 252, "changes": 254, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -5665,17 +5665,9 @@ _mm512_mask_storeu_epi64 (void *__P, __mmask8 __U, __m512i __A)\n \t\t\t\t     (__mmask8) __U);\n }\n \n-extern __inline void\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_storeu_epi64 (void *__P, __m512i __A)\n-{\n-  __builtin_ia32_storedqudi512_mask ((__v8di *) __P, (__v8di) __A,\n-\t\t\t\t     (__mmask8) -1);\n-}\n-\n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_loadu_epi32 (void const *__P)\n+_mm512_loadu_si512 (void const *__P)\n {\n   return (__m512i) __builtin_ia32_loaddqusi512_mask ((const __v16si *) __P,\n \t\t\t\t\t\t     (__v16si)\n@@ -5704,7 +5696,7 @@ _mm512_maskz_loadu_epi32 (__mmask16 __U, void const *__P)\n \n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_storeu_epi32 (void *__P, __m512i __A)\n+_mm512_storeu_si512 (void *__P, __m512i __A)\n {\n   __builtin_ia32_storedqusi512_mask ((__v16si *) __P, (__v16si) __A,\n \t\t\t\t     (__mmask16) -1);\n@@ -8389,174 +8381,7 @@ _mm512_mask_ceil_pd (__m512d __W, __mmask8 __U, __m512d __A)\n \t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n }\n \n-extern __inline __m512\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_maskz_floor_ps (__mmask16 __U, __m512 __A)\n-{\n-  return (__m512) __builtin_ia32_rndscaleps_mask ((__v16sf) __A,\n-\t\t\t\t\t\t  _MM_FROUND_FLOOR,\n-\t\t\t\t\t\t  (__v16sf)\n-\t\t\t\t\t\t  _mm512_setzero_ps (),\n-\t\t\t\t\t\t  __U,\n-\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n-}\n-\n-extern __inline __m512d\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_maskz_floor_pd (__mmask8 __U, __m512d __A)\n-{\n-  return (__m512d) __builtin_ia32_rndscalepd_mask ((__v8df) __A,\n-\t\t\t\t\t\t   _MM_FROUND_FLOOR,\n-\t\t\t\t\t\t   (__v8df)\n-\t\t\t\t\t\t   _mm512_setzero_pd (),\n-\t\t\t\t\t\t   __U,\n-\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n-}\n-\n-extern __inline __m512\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_maskz_ceil_ps (__mmask16 __U, __m512 __A)\n-{\n-  return (__m512) __builtin_ia32_rndscaleps_mask ((__v16sf) __A,\n-\t\t\t\t\t\t  _MM_FROUND_CEIL,\n-\t\t\t\t\t\t  (__v16sf)\n-\t\t\t\t\t\t  _mm512_setzero_ps (),\n-\t\t\t\t\t\t  __U,\n-\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n-}\n-\n-extern __inline __m512d\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_maskz_ceil_pd (__mmask8 __U, __m512d __A)\n-{\n-  return (__m512d) __builtin_ia32_rndscalepd_mask ((__v8df) __A,\n-\t\t\t\t\t\t   _MM_FROUND_CEIL,\n-\t\t\t\t\t\t   (__v8df)\n-\t\t\t\t\t\t   _mm512_setzero_pd (),\n-\t\t\t\t\t\t   __U,\n-\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n-}\n-\n #ifdef __OPTIMIZE__\n-extern __inline __m512\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_floor_round_ps (__m512 __A, const int __R)\n-{\n-  return (__m512) __builtin_ia32_rndscaleps_mask ((__v16sf) __A,\n-\t\t\t\t\t\t  _MM_FROUND_FLOOR,\n-\t\t\t\t\t\t  (__v16sf) __A, -1, __R);\n-}\n-\n-extern __inline __m512d\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_floor_round_pd (__m512d __A, const int __R)\n-{\n-  return (__m512d) __builtin_ia32_rndscalepd_mask ((__v8df) __A,\n-\t\t\t\t\t\t   _MM_FROUND_FLOOR,\n-\t\t\t\t\t\t   (__v8df) __A, -1, __R);\n-}\n-\n-extern __inline __m512\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_ceil_round_ps (__m512 __A, const int __R)\n-{\n-  return (__m512) __builtin_ia32_rndscaleps_mask ((__v16sf) __A,\n-\t\t\t\t\t\t  _MM_FROUND_CEIL,\n-\t\t\t\t\t\t  (__v16sf) __A, -1, __R);\n-}\n-\n-extern __inline __m512d\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_ceil_round_pd (__m512d __A, const int __R)\n-{\n-  return (__m512d) __builtin_ia32_rndscalepd_mask ((__v8df) __A,\n-\t\t\t\t\t\t   _MM_FROUND_CEIL,\n-\t\t\t\t\t\t   (__v8df) __A, -1, __R);\n-}\n-\n-extern __inline __m512\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_floor_round_ps (__m512 __W, __mmask16 __U, __m512 __A,\n-\t\t\t    const int __R)\n-{\n-  return (__m512) __builtin_ia32_rndscaleps_mask ((__v16sf) __A,\n-\t\t\t\t\t\t  _MM_FROUND_FLOOR,\n-\t\t\t\t\t\t  (__v16sf) __W, __U, __R);\n-}\n-\n-extern __inline __m512d\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_floor_round_pd (__m512d __W, __mmask8 __U, __m512d __A,\n-\t\t\t    const int __R)\n-{\n-  return (__m512d) __builtin_ia32_rndscalepd_mask ((__v8df) __A,\n-\t\t\t\t\t\t   _MM_FROUND_FLOOR,\n-\t\t\t\t\t\t   (__v8df) __W, __U, __R);\n-}\n-\n-extern __inline __m512\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_ceil_round_ps (__m512 __W, __mmask16 __U, __m512 __A, const int __R)\n-{\n-  return (__m512) __builtin_ia32_rndscaleps_mask ((__v16sf) __A,\n-\t\t\t\t\t\t  _MM_FROUND_CEIL,\n-\t\t\t\t\t\t  (__v16sf) __W, __U, __R);\n-}\n-\n-extern __inline __m512d\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_ceil_round_pd (__m512d __W, __mmask8 __U, __m512d __A,\n-\t\t\t   const int __R)\n-{\n-  return (__m512d) __builtin_ia32_rndscalepd_mask ((__v8df) __A,\n-\t\t\t\t\t\t   _MM_FROUND_CEIL,\n-\t\t\t\t\t\t   (__v8df) __W, __U, __R);\n-}\n-\n-extern __inline __m512\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_maskz_floor_round_ps (__mmask16 __U, __m512 __A, const int __R)\n-{\n-  return (__m512) __builtin_ia32_rndscaleps_mask ((__v16sf) __A,\n-\t\t\t\t\t\t  _MM_FROUND_FLOOR,\n-\t\t\t\t\t\t  (__v16sf)\n-\t\t\t\t\t\t  _mm512_setzero_ps (),\n-\t\t\t\t\t\t  __U, __R);\n-}\n-\n-extern __inline __m512d\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_maskz_floor_round_pd (__mmask8 __U, __m512d __A, const int __R)\n-{\n-  return (__m512d) __builtin_ia32_rndscalepd_mask ((__v8df) __A,\n-\t\t\t\t\t\t   _MM_FROUND_FLOOR,\n-\t\t\t\t\t\t   (__v8df)\n-\t\t\t\t\t\t   _mm512_setzero_pd (),\n-\t\t\t\t\t\t   __U, __R);\n-}\n-\n-extern __inline __m512\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_maskz_ceil_round_ps (__mmask16 __U, __m512 __A, const int __R)\n-{\n-  return (__m512) __builtin_ia32_rndscaleps_mask ((__v16sf) __A,\n-\t\t\t\t\t\t  _MM_FROUND_CEIL,\n-\t\t\t\t\t\t  (__v16sf)\n-\t\t\t\t\t\t  _mm512_setzero_ps (),\n-\t\t\t\t\t\t  __U, __R);\n-}\n-\n-extern __inline __m512d\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_maskz_ceil_round_pd (__mmask8 __U, __m512d __A, const int __R)\n-{\n-  return (__m512d) __builtin_ia32_rndscalepd_mask ((__v8df) __A,\n-\t\t\t\t\t\t   _MM_FROUND_CEIL,\n-\t\t\t\t\t\t   (__v8df)\n-\t\t\t\t\t\t   _mm512_setzero_pd (),\n-\t\t\t\t\t\t   __U, __R);\n-}\n-\n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_alignr_epi32 (__m512i __A, __m512i __B, const int __imm)\n@@ -8625,67 +8450,6 @@ _mm512_maskz_alignr_epi64 (__mmask8 __U, __m512i __A, __m512i __B,\n \t\t\t\t\t\t  (__mmask8) __U);\n }\n #else\n-#define _mm512_floor_round_ps(A, R) \\\n-  ((__m512) __builtin_ia32_rndscaleps_mask ((__v16sf)(__m512)(A),\t\\\n-\t\t\t\t\t    _MM_FROUND_FLOOR,\t\t\\\n-\t\t\t\t\t    (__v16sf)(__m512)(A),\t\\\n-\t\t\t\t\t    (__mmask16)(-1), R))\n-#define _mm512_mask_floor_round_ps(A, B, C, R)\t\t\t\t\\\n-  ((__m512) __builtin_ia32_rndscaleps_mask ((__v16sf)(__m512)(C),\t\\\n-\t\t\t\t\t    _MM_FROUND_FLOOR,\t\t\\\n-\t\t\t\t\t    (__v16sf)(__m512)(A),\t\\\n-\t\t\t\t\t    (__mmask16)(B), R))\n-#define _mm512_maskz_floor_round_ps(A, B, R)\t\t\t\t\\\n-  ((__m512) __builtin_ia32_rndscaleps_mask ((__v16sf)(__m512)(B),\t\\\n-\t\t\t\t\t    _MM_FROUND_FLOOR,\t\t\\\n-\t\t\t\t\t    (__v16sf)_mm512_setzero_ps(),\\\n-\t\t\t\t\t    (__mmask16)(A), R))\n-#define _mm512_floor_round_pd(A, R) \\\n-  ((__m512d) __builtin_ia32_rndscalepd_mask ((__v8df)(__m512d)(A),\t\\\n-\t\t\t\t\t    _MM_FROUND_FLOOR,\t\t\\\n-\t\t\t\t\t    (__v8df)(__m512d)(A),\t\\\n-\t\t\t\t\t     (__mmask8)(-1), R))\n-#define _mm512_mask_floor_round_pd(A, B, C, R)\t\t\t\t\\\n-  ((__m512d) __builtin_ia32_rndscalepd_mask ((__v8df)(__m512d)(C),\t\\\n-\t\t\t\t\t    _MM_FROUND_FLOOR,\t\t\\\n-\t\t\t\t\t     (__v8df)(__m512d)(A),\t\\\n-\t\t\t\t\t     (__mmask8)(B), R))\n-#define _mm512_maskz_floor_round_pd(A, B, R)\t\t\t\t\\\n-  ((__m512d) __builtin_ia32_rndscalepd_mask ((__v8df)(__m512d)(B),\t\\\n-\t\t\t\t\t    _MM_FROUND_FLOOR,\t\t\\\n-\t\t\t\t\t     (__v8df)_mm512_setzero_pd(),\\\n-\t\t\t\t\t     (__mmask8)(A), R))\n-#define _mm512_ceil_round_ps(A, R) \\\n-  ((__m512) __builtin_ia32_rndscaleps_mask ((__v16sf)(__m512)(A),\t\\\n-\t\t\t\t\t    _MM_FROUND_CEIL,\t\t\\\n-\t\t\t\t\t    (__v16sf)(__m512)(A),\t\\\n-\t\t\t\t\t    (__mmask16)(-1), R))\n-#define _mm512_mask_ceil_round_ps(A, B, C, R)\t\t\t\t\\\n-  ((__m512) __builtin_ia32_rndscaleps_mask ((__v16sf)(__m512)(C),\t\\\n-\t\t\t\t\t    _MM_FROUND_CEIL,\t\t\\\n-\t\t\t\t\t    (__v16sf)(__m512)(A),\t\\\n-\t\t\t\t\t    (__mmask16)(B), R))\n-#define _mm512_maskz_ceil_round_ps(A, B, R)\t\t\t\t\\\n-  ((__m512) __builtin_ia32_rndscaleps_mask ((__v16sf)(__m512)(B),\t\\\n-\t\t\t\t\t    _MM_FROUND_CEIL,\t\t\\\n-\t\t\t\t\t    (__v16sf)_mm512_setzero_ps(),\\\n-\t\t\t\t\t    (__mmask16)(A), R))\n-#define _mm512_ceil_round_pd(A, R) \\\n-  ((__m512d) __builtin_ia32_rndscalepd_mask ((__v8df)(__m512d)(A),\t\\\n-\t\t\t\t\t    _MM_FROUND_CEIL,\t\t\\\n-\t\t\t\t\t    (__v8df)(__m512d)(A),\t\\\n-\t\t\t\t\t     (__mmask8)(-1), R))\n-#define _mm512_mask_ceil_round_pd(A, B, C, R)\t\t\t\t\\\n-  ((__m512d) __builtin_ia32_rndscalepd_mask ((__v8df)(__m512d)(C),\t\\\n-\t\t\t\t\t    _MM_FROUND_CEIL,\t\t\\\n-\t\t\t\t\t     (__v8df)(__m512d)(A),\t\\\n-\t\t\t\t\t     (__mmask8)(B), R))\n-#define _mm512_maskz_ceil_round_pd(A, B, R)\t\t\t\t\\\n-  ((__m512d) __builtin_ia32_rndscalepd_mask ((__v8df)(__m512d)(B),\t\\\n-\t\t\t\t\t    _MM_FROUND_CEIL,\t\t\\\n-\t\t\t\t\t     (__v8df)_mm512_setzero_pd(),\\\n-\t\t\t\t\t     (__mmask8)(A), R))\n-\n #define _mm512_alignr_epi32(X, Y, C)                                        \\\n     ((__m512i)__builtin_ia32_alignd512_mask ((__v16si)(__m512i)(X),         \\\n         (__v16si)(__m512i)(Y), (int)(C), (__v16si)(__m512i)(X),             \\\n@@ -9795,13 +9559,6 @@ _mm512_mask_compressstoreu_epi32 (void *__P, __mmask16 __U, __m512i __A)\n \t\t\t\t\t  (__mmask16) __U);\n }\n \n-extern __inline __m512d\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_expand_pd (__m512d __A)\n-{\n-  return (__m512d) __builtin_ia32_expanddf512 ((__v8df) __A);\n-}\n-\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_expand_pd (__m512d __W, __mmask8 __U, __m512d __A)\n@@ -9840,13 +9597,6 @@ _mm512_maskz_expandloadu_pd (__mmask8 __U, void const *__P)\n \t\t\t\t\t\t\t (__mmask8) __U);\n }\n \n-extern __inline __m512\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_expand_ps (__m512 __A)\n-{\n-  return (__m512) __builtin_ia32_expandsf512 ((__v16sf) __A);\n-}\n-\n extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_expand_ps (__m512 __W, __mmask16 __U, __m512 __A)"}, {"sha": "1b7bb3e9a0f54847fe2af099cbe31786b11b95ff", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -28088,12 +28088,10 @@ enum ix86_builtins\n   IX86_BUILTIN_DIVPS512,\n   IX86_BUILTIN_DIVSD_ROUND,\n   IX86_BUILTIN_DIVSS_ROUND,\n-  IX86_BUILTIN_EXPANDPD512_NOMASK,\n   IX86_BUILTIN_EXPANDPD512,\n   IX86_BUILTIN_EXPANDPD512Z,\n   IX86_BUILTIN_EXPANDPDLOAD512,\n   IX86_BUILTIN_EXPANDPDLOAD512Z,\n-  IX86_BUILTIN_EXPANDPS512_NOMASK,\n   IX86_BUILTIN_EXPANDPS512,\n   IX86_BUILTIN_EXPANDPS512Z,\n   IX86_BUILTIN_EXPANDPSLOAD512,\n@@ -29941,10 +29939,8 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_vcvtps2ph512_mask,  \"__builtin_ia32_vcvtps2ph512_mask\", IX86_BUILTIN_CVTPS2PH512, UNKNOWN, (int) V16HI_FTYPE_V16SF_INT_V16HI_HI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_ufloatv8siv8df_mask, \"__builtin_ia32_cvtudq2pd512_mask\", IX86_BUILTIN_CVTUDQ2PD512, UNKNOWN, (int) V8DF_FTYPE_V8SI_V8DF_QI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_cvtusi2sd32, \"__builtin_ia32_cvtusi2sd32\", IX86_BUILTIN_CVTUSI2SD32, UNKNOWN, (int) V2DF_FTYPE_V2DF_UINT },\n-  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_expandv8df, \"__builtin_ia32_expanddf512\", IX86_BUILTIN_EXPANDPD512_NOMASK, UNKNOWN, (int) V8DF_FTYPE_V8DF },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_expandv8df_mask, \"__builtin_ia32_expanddf512_mask\", IX86_BUILTIN_EXPANDPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_QI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_expandv8df_maskz, \"__builtin_ia32_expanddf512_maskz\", IX86_BUILTIN_EXPANDPD512Z, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_QI },\n-  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_expandv16sf, \"__builtin_ia32_expandsf512\", IX86_BUILTIN_EXPANDPS512_NOMASK, UNKNOWN, (int) V16SF_FTYPE_V16SF },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_expandv16sf_mask, \"__builtin_ia32_expandsf512_mask\", IX86_BUILTIN_EXPANDPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_HI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_expandv16sf_maskz, \"__builtin_ia32_expandsf512_maskz\", IX86_BUILTIN_EXPANDPS512Z, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_HI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_vextractf32x4_mask, \"__builtin_ia32_extractf32x4_mask\", IX86_BUILTIN_EXTRACTF32X4, UNKNOWN, (int) V4SF_FTYPE_V16SF_INT_V4SF_QI },"}, {"sha": "3f53e2d1d41f2ee97daa214b042734bbdf0a99c7", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -660,6 +660,14 @@\n   return i == 2 || i == 4 || i == 8;\n })\n \n+;; Match 1, 2, 5, or 6\n+(define_predicate \"const1256_operand\"\n+  (match_code \"const_int\")\n+{\n+  HOST_WIDE_INT i = INTVAL (op);\n+  return i == 1 || i == 2 || i == 5 || i == 6;\n+})\n+\n ;; Match 1, 2, 4, or 8\n (define_predicate \"const1248_operand\"\n   (match_code \"const_int\")\n@@ -746,6 +754,11 @@\n   return val <= 255*8 && val % 8 == 0;\n })\n \n+;; Match 1 to 2.\n+(define_predicate \"const_1_to_2_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 1, 2)\")))\n+\n ;; Return true if OP is CONST_INT >= 1 and <= 31 (a valid operand\n ;; for shift & compare patterns, as shifting by 0 does not change flags).\n (define_predicate \"const_1_to_31_operand\""}, {"sha": "a04b2893f0867df67bbf6921a9e2d2e278904a17", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 37, "deletions": 42, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -105,7 +105,6 @@\n   UNSPEC_COMPRESS\n   UNSPEC_COMPRESS_STORE\n   UNSPEC_EXPAND\n-  UNSPEC_EXPAND_NOMASK\n   UNSPEC_MASKED_EQ\n   UNSPEC_MASKED_GT\n \n@@ -8211,7 +8210,7 @@\n (define_insn \"<shift_insn><mode>3<mask_name>\"\n   [(set (match_operand:VI48_512 0 \"register_operand\" \"=v,v\")\n \t(any_lshift:VI48_512\n-\t  (match_operand:VI48_512 1 \"register_operand\" \"v,m\")\n+\t  (match_operand:VI48_512 1 \"nonimmediate_operand\" \"v,m\")\n \t  (match_operand:SI 2 \"nonmemory_operand\" \"vN,N\")))]\n   \"TARGET_AVX512F && <mask_mode512bit_condition>\"\n   \"vp<vshift><ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n@@ -12510,7 +12509,7 @@\n \t  [(match_operand 2 \"vsib_address_operand\")\n \t   (match_operand:VI48_512 1 \"register_operand\")\n \t   (match_operand:SI 3 \"const1248_operand\")]))\n-      (match_operand:SI 4 \"const_0_to_1_operand\")]\n+      (match_operand:SI 4 \"const_1_to_2_operand\")]\n      UNSPEC_GATHER_PREFETCH)]\n   \"TARGET_AVX512PF\"\n {\n@@ -12528,15 +12527,15 @@\n \t    (match_operand:VI48_512 1 \"register_operand\" \"v\")\n \t    (match_operand:SI 3 \"const1248_operand\" \"n\")]\n \t   UNSPEC_VSIBADDR)])\n-      (match_operand:SI 4 \"const_0_to_1_operand\" \"n\")]\n+      (match_operand:SI 4 \"const_1_to_2_operand\" \"n\")]\n      UNSPEC_GATHER_PREFETCH)]\n   \"TARGET_AVX512PF\"\n {\n   switch (INTVAL (operands[4]))\n     {\n-    case 0:\n-      return \"vgatherpf0<ssemodesuffix>ps\\t{%5%{%0%}|%5%{%0%}}\";\n     case 1:\n+      return \"vgatherpf0<ssemodesuffix>ps\\t{%5%{%0%}|%5%{%0%}}\";\n+    case 2:\n       return \"vgatherpf1<ssemodesuffix>ps\\t{%5%{%0%}|%5%{%0%}}\";\n     default:\n       gcc_unreachable ();\n@@ -12555,15 +12554,15 @@\n \t    (match_operand:VI48_512 0 \"register_operand\" \"v\")\n \t    (match_operand:SI 2 \"const1248_operand\" \"n\")]\n \t   UNSPEC_VSIBADDR)])\n-      (match_operand:SI 3 \"const_0_to_1_operand\" \"n\")]\n+      (match_operand:SI 3 \"const_1_to_2_operand\" \"n\")]\n      UNSPEC_GATHER_PREFETCH)]\n   \"TARGET_AVX512PF\"\n {\n   switch (INTVAL (operands[3]))\n     {\n-    case 0:\n-      return \"vgatherpf0<ssemodesuffix>ps\\t{%4|%4}\";\n     case 1:\n+      return \"vgatherpf0<ssemodesuffix>ps\\t{%4|%4}\";\n+    case 2:\n       return \"vgatherpf1<ssemodesuffix>ps\\t{%4|%4}\";\n     default:\n       gcc_unreachable ();\n@@ -12582,7 +12581,7 @@\n \t  [(match_operand 2 \"vsib_address_operand\")\n \t   (match_operand:VI4_256_8_512 1 \"register_operand\")\n \t   (match_operand:SI 3 \"const1248_operand\")]))\n-      (match_operand:SI 4 \"const_0_to_1_operand\")]\n+      (match_operand:SI 4 \"const_1_to_2_operand\")]\n      UNSPEC_GATHER_PREFETCH)]\n   \"TARGET_AVX512PF\"\n {\n@@ -12600,15 +12599,15 @@\n \t    (match_operand:VI4_256_8_512 1 \"register_operand\" \"v\")\n \t    (match_operand:SI 3 \"const1248_operand\" \"n\")]\n \t   UNSPEC_VSIBADDR)])\n-      (match_operand:SI 4 \"const_0_to_1_operand\" \"n\")]\n+      (match_operand:SI 4 \"const_1_to_2_operand\" \"n\")]\n      UNSPEC_GATHER_PREFETCH)]\n   \"TARGET_AVX512PF\"\n {\n   switch (INTVAL (operands[4]))\n     {\n-    case 0:\n-      return \"vgatherpf0<ssemodesuffix>pd\\t{%5%{%0%}|%5%{%0%}}\";\n     case 1:\n+      return \"vgatherpf0<ssemodesuffix>pd\\t{%5%{%0%}|%5%{%0%}}\";\n+    case 2:\n       return \"vgatherpf1<ssemodesuffix>pd\\t{%5%{%0%}|%5%{%0%}}\";\n     default:\n       gcc_unreachable ();\n@@ -12627,15 +12626,15 @@\n \t    (match_operand:VI4_256_8_512 0 \"register_operand\" \"v\")\n \t    (match_operand:SI 2 \"const1248_operand\" \"n\")]\n \t   UNSPEC_VSIBADDR)])\n-      (match_operand:SI 3 \"const_0_to_1_operand\" \"n\")]\n+      (match_operand:SI 3 \"const_1_to_2_operand\" \"n\")]\n      UNSPEC_GATHER_PREFETCH)]\n   \"TARGET_AVX512PF\"\n {\n   switch (INTVAL (operands[3]))\n     {\n-    case 0:\n-      return \"vgatherpf0<ssemodesuffix>pd\\t{%4|%4}\";\n     case 1:\n+      return \"vgatherpf0<ssemodesuffix>pd\\t{%4|%4}\";\n+    case 2:\n       return \"vgatherpf1<ssemodesuffix>pd\\t{%4|%4}\";\n     default:\n       gcc_unreachable ();\n@@ -12654,7 +12653,7 @@\n \t  [(match_operand 2 \"vsib_address_operand\")\n \t   (match_operand:VI48_512 1 \"register_operand\")\n \t   (match_operand:SI 3 \"const1248_operand\")]))\n-      (match_operand:SI 4 \"const_0_to_1_operand\")]\n+      (match_operand:SI 4 \"const1256_operand\")]\n      UNSPEC_SCATTER_PREFETCH)]\n   \"TARGET_AVX512PF\"\n {\n@@ -12672,15 +12671,17 @@\n \t    (match_operand:VI48_512 1 \"register_operand\" \"v\")\n \t    (match_operand:SI 3 \"const1248_operand\" \"n\")]\n \t   UNSPEC_VSIBADDR)])\n-      (match_operand:SI 4 \"const_0_to_1_operand\" \"n\")]\n+      (match_operand:SI 4 \"const1256_operand\" \"n\")]\n      UNSPEC_SCATTER_PREFETCH)]\n   \"TARGET_AVX512PF\"\n {\n   switch (INTVAL (operands[4]))\n     {\n-    case 0:\n-      return \"vscatterpf0<ssemodesuffix>ps\\t{%5%{%0%}|%5%{%0%}}\";\n     case 1:\n+    case 5:\n+      return \"vscatterpf0<ssemodesuffix>ps\\t{%5%{%0%}|%5%{%0%}}\";\n+    case 2:\n+    case 6:\n       return \"vscatterpf1<ssemodesuffix>ps\\t{%5%{%0%}|%5%{%0%}}\";\n     default:\n       gcc_unreachable ();\n@@ -12699,15 +12700,17 @@\n \t    (match_operand:VI48_512 0 \"register_operand\" \"v\")\n \t    (match_operand:SI 2 \"const1248_operand\" \"n\")]\n \t   UNSPEC_VSIBADDR)])\n-      (match_operand:SI 3 \"const_0_to_1_operand\" \"n\")]\n+      (match_operand:SI 3 \"const1256_operand\" \"n\")]\n      UNSPEC_SCATTER_PREFETCH)]\n   \"TARGET_AVX512PF\"\n {\n   switch (INTVAL (operands[3]))\n     {\n-    case 0:\n-      return \"vscatterpf0<ssemodesuffix>ps\\t{%4|%4}\";\n     case 1:\n+    case 5:\n+      return \"vscatterpf0<ssemodesuffix>ps\\t{%4|%4}\";\n+    case 2:\n+    case 6:\n       return \"vscatterpf1<ssemodesuffix>ps\\t{%4|%4}\";\n     default:\n       gcc_unreachable ();\n@@ -12726,7 +12729,7 @@\n \t  [(match_operand 2 \"vsib_address_operand\")\n \t   (match_operand:VI4_256_8_512 1 \"register_operand\")\n \t   (match_operand:SI 3 \"const1248_operand\")]))\n-      (match_operand:SI 4 \"const_0_to_1_operand\")]\n+      (match_operand:SI 4 \"const1256_operand\")]\n      UNSPEC_SCATTER_PREFETCH)]\n   \"TARGET_AVX512PF\"\n {\n@@ -12744,15 +12747,17 @@\n \t    (match_operand:VI4_256_8_512 1 \"register_operand\" \"v\")\n \t    (match_operand:SI 3 \"const1248_operand\" \"n\")]\n \t   UNSPEC_VSIBADDR)])\n-      (match_operand:SI 4 \"const_0_to_1_operand\" \"n\")]\n+      (match_operand:SI 4 \"const1256_operand\" \"n\")]\n      UNSPEC_SCATTER_PREFETCH)]\n   \"TARGET_AVX512PF\"\n {\n   switch (INTVAL (operands[4]))\n     {\n-    case 0:\n-      return \"vscatterpf0<ssemodesuffix>pd\\t{%5%{%0%}|%5%{%0%}}\";\n     case 1:\n+    case 5:\n+      return \"vscatterpf0<ssemodesuffix>pd\\t{%5%{%0%}|%5%{%0%}}\";\n+    case 2:\n+    case 6:\n       return \"vscatterpf1<ssemodesuffix>pd\\t{%5%{%0%}|%5%{%0%}}\";\n     default:\n       gcc_unreachable ();\n@@ -12771,15 +12776,17 @@\n \t    (match_operand:VI4_256_8_512 0 \"register_operand\" \"v\")\n \t    (match_operand:SI 2 \"const1248_operand\" \"n\")]\n \t   UNSPEC_VSIBADDR)])\n-      (match_operand:SI 3 \"const_0_to_1_operand\" \"n\")]\n+      (match_operand:SI 3 \"const1256_operand\" \"n\")]\n      UNSPEC_SCATTER_PREFETCH)]\n   \"TARGET_AVX512PF\"\n {\n   switch (INTVAL (operands[3]))\n     {\n-    case 0:\n-      return \"vscatterpf0<ssemodesuffix>pd\\t{%4|%4}\";\n     case 1:\n+    case 5:\n+      return \"vscatterpf0<ssemodesuffix>pd\\t{%4|%4}\";\n+    case 2:\n+    case 6:\n       return \"vscatterpf1<ssemodesuffix>pd\\t{%4|%4}\";\n     default:\n       gcc_unreachable ();\n@@ -15353,18 +15360,6 @@\n   \"TARGET_AVX512F\"\n   \"operands[2] = CONST0_RTX (<MODE>mode);\")\n \n-(define_insn \"avx512f_expand<mode>\"\n-  [(set (match_operand:VI48F_512 0 \"register_operand\" \"=v,v\")\n-\t(unspec:VI48F_512\n-\t  [(match_operand:VI48F_512 1 \"nonimmediate_operand\" \"v,m\")]\n-\t  UNSPEC_EXPAND_NOMASK))]\n-  \"TARGET_AVX512F\"\n-  \"v<sseintprefix>expand<ssemodesuffix>\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssemov\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"memory\" \"none,load\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n-\n (define_insn \"avx512f_expand<mode>_mask\"\n   [(set (match_operand:VI48F_512 0 \"register_operand\" \"=v,v\")\n \t(unspec:VI48F_512"}, {"sha": "bfbe37fc14a50738c097ad34df37208697c1877a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -1,3 +1,34 @@\n+2014-02-10  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* gcc.target/i386/avx512f-vexpandpd-1.c: Update intrinsics.\n+\t* gcc.target/i386/avx512f-vexpandps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vexpandpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vexpandps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovdqu32-1: Ditto.\n+\t* gcc.target/i386/avx512f-vmovdqu32-2: Ditto.\n+\t* gcc.target/i386/avx512f-vmovdqu64-1: Ditto.\n+\t* gcc.target/i386/avx512f-vmovdqu64-2: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmupd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmupq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrndscalepd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrndscaleps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrndscalepd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrndscaleps-2.c: Ditto.\n+\t* gcc.target/i386/avx512pf-vgatherpf0dpd-1.c: Update parameters.\n+\t* gcc.target/i386/avx512pf-vgatherpf0dps-1.c: Ditto.\n+\t* gcc.target/i386/avx512pf-vgatherpf0qpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512pf-vgatherpf0qps-1.c: Ditto.\n+\t* gcc.target/i386/avx512pf-vgatherpf1dpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512pf-vgatherpf1dps-1.c: Ditto.\n+\t* gcc.target/i386/avx512pf-vgatherpf1qpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512pf-vgatherpf1qps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsrad-2.c: Initialize 64 bits.\n+\t* gcc.target/i386/avx512f-vpslld-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpsrld-2.c: Ditto.\n+\n 2014-02-10  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/vect/pr59984.c: Require effective target"}, {"sha": "b7648c6d027a4657a607ade07dba381e4b439e04", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vexpandpd-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandpd-1.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vexpandpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 5 } } */\n+/* { dg-final { scan-assembler-times \"vexpandpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 4 } } */\n /* { dg-final { scan-assembler-times \"vexpandpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n /* { dg-final { scan-assembler-times \"vexpandpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n \n@@ -13,7 +13,6 @@ volatile __mmask8 m;\n void extern\n avx512f_test (void)\n {\n-  x = _mm512_expand_pd (x);\n   x = _mm512_mask_expand_pd (x, m, x);\n   x = _mm512_maskz_expand_pd (m, x);\n "}, {"sha": "373c17df161d8c41903830ec36213913a33b3700", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vexpandpd-2.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandpd-2.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -24,7 +24,7 @@ CALC (double *s, double *r, MASK_TYPE mask)\n static void\n TEST (void)\n {\n-  UNION_TYPE (AVX512F_LEN, d) s1, res1, res2, res3, res4, res5;\n+  UNION_TYPE (AVX512F_LEN, d) s1, res2, res3, res4, res5;\n   MASK_TYPE mask = MASK_VALUE;\n   double s2[SIZE];\n   double res_ref1[SIZE];\n@@ -41,7 +41,6 @@ TEST (void)\n       sign = -sign;\n     }\n \n-  res1.x = INTRINSIC (_expand_pd) (s1.x);\n   res2.x = INTRINSIC (_mask_expand_pd) (res2.x, mask, s1.x);\n   res3.x = INTRINSIC (_maskz_expand_pd) (mask, s1.x);\n   res4.x = INTRINSIC (_mask_expandloadu_pd) (res4.x, mask, s2);\n@@ -52,9 +51,6 @@ TEST (void)\n   CALC (s1.a, res_ref2, mask);\n   CALC (s2, res_ref3, mask);\n \n-  if (UNION_CHECK (AVX512F_LEN, d) (res1, res_ref1))\n-    abort ();\n-\n   MASK_MERGE (d) (res_ref2, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN, d) (res2, res_ref2))\n     abort ();"}, {"sha": "b0a36c300dc7eda2c59eaa3fa6b0b37746b54362", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vexpandps-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandps-1.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vexpandps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 5 } } */\n+/* { dg-final { scan-assembler-times \"vexpandps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 4 } } */\n /* { dg-final { scan-assembler-times \"vexpandps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n /* { dg-final { scan-assembler-times \"vexpandps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n \n@@ -13,7 +13,6 @@ volatile __mmask16 m;\n void extern\n avx512f_test (void)\n {\n-  x = _mm512_expand_ps (x);\n   x = _mm512_mask_expand_ps (x, m, x);\n   x = _mm512_maskz_expand_ps (m, x);\n "}, {"sha": "7143c8ae238f575f17c3a01e42270275b8e1ac7e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vexpandps-2.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vexpandps-2.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -24,7 +24,7 @@ CALC (float *s, float *r, MASK_TYPE mask)\n static void\n TEST (void)\n {\n-  UNION_TYPE (AVX512F_LEN, ) s1, res1, res2, res3, res4, res5;\n+  UNION_TYPE (AVX512F_LEN, ) s1, res2, res3, res4, res5;\n   MASK_TYPE mask = MASK_VALUE;\n   float s2[SIZE];\n   float res_ref1[SIZE];\n@@ -41,7 +41,6 @@ TEST (void)\n       sign = -sign;\n     }\n \n-  res1.x = INTRINSIC (_expand_ps) (s1.x);\n   res2.x = INTRINSIC (_mask_expand_ps) (res2.x, mask, s1.x);\n   res3.x = INTRINSIC (_maskz_expand_ps) (mask, s1.x);\n   res4.x = INTRINSIC (_mask_expandloadu_ps) (res4.x, mask, s2);\n@@ -51,9 +50,6 @@ TEST (void)\n   CALC (s1.a, res_ref2, mask);\n   CALC (s2, res_ref3, mask);\n \n-  if (UNION_CHECK (AVX512F_LEN, ) (res1, res_ref1))\n-    abort ();\n-\n   MASK_MERGE () (res_ref2, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN, ) (res2, res_ref2))\n     abort ();"}, {"sha": "79dbf9dd37a0b55cd074972bf8dbd75318f15887", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmovdqu32-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu32-1.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -15,10 +15,10 @@ volatile __mmask16 m;\n void extern\n avx512f_test (void)\n {\n-  x = _mm512_loadu_epi32 (p);\n+  x = _mm512_loadu_si512 (p);\n   x = _mm512_mask_loadu_epi32 (x, m, p);\n   x = _mm512_maskz_loadu_epi32 (m, p);\n \n-  _mm512_storeu_epi32 (p, x);\n+  _mm512_storeu_si512 (p, x);\n   _mm512_mask_storeu_epi32 (p, m, x);\n }"}, {"sha": "f1ae73c1d824c0d4590dcacb05502de3aa75fb0f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmovdqu32-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu32-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu32-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu32-2.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -33,8 +33,8 @@ TEST (void)\n     }\n \n #if AVX512F_LEN == 512\n-  res1.x = _mm512_loadu_epi32 (s1.a);\n-  _mm512_storeu_epi32 (res2.a, s2.x);\n+  res1.x = _mm512_loadu_si512 (s1.a);\n+  _mm512_storeu_si512 (res2.a, s2.x);\n #endif\n   res3.x = INTRINSIC (_mask_loadu_epi32) (res3.x, mask, s1.a);\n   res4.x = INTRINSIC (_maskz_loadu_epi32) (mask, s1.a);"}, {"sha": "87565489ebec8d6ccea1584fcb2ef6517144f28e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmovdqu64-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu64-1.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -3,7 +3,7 @@\n /* { dg-final { scan-assembler-times \"vmovdqu64\\[ \\\\t\\]+\\[^\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqu64\\[ \\\\t\\]+\\[^\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqu64\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vmovdqu64\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu64\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n \n #include <immintrin.h>\n \n@@ -18,5 +18,4 @@ avx512f_test (void)\n   x = _mm512_maskz_loadu_epi64 (m, p);\n \n   _mm512_mask_storeu_epi64 (p, m, x);\n-  _mm512_storeu_epi64 (p, x);\n }"}, {"sha": "867a2517d546f211c10a30d00bb34e2d940b334e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmovdqu64-2.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu64-2.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -19,7 +19,7 @@ static void\n TEST (void)\n {\n   UNION_TYPE (AVX512F_LEN, i_q) s2, res1, res2;\n-  EVAL(unaligned_array, AVX512F_LEN,) s1, res3, res4;\n+  EVAL(unaligned_array, AVX512F_LEN,) s1, res3;\n   MASK_TYPE mask = MASK_VALUE;\n   int i, sign = 1;\n \n@@ -35,7 +35,6 @@ TEST (void)\n   res1.x = INTRINSIC (_mask_loadu_epi64) (res1.x, mask, s1.a);\n   res2.x = INTRINSIC (_maskz_loadu_epi64) (mask, s1.a);\n   INTRINSIC (_mask_storeu_epi64) (res3.a, mask, s2.x);\n-  INTRINSIC (_storeu_epi64) (res4.a, s2.x);\n \n   MASK_MERGE (i_q) (s1.a, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN, i_q) (res1, s1.a))\n@@ -45,9 +44,6 @@ TEST (void)\n   if (UNION_CHECK (AVX512F_LEN, i_q) (res2, s1.a))\n     abort ();\n \n-  if (UNION_CHECK (AVX512F_LEN, i_q) (s2, res4.a))\n-    abort ();\n-\n   MASK_MERGE (i_q) (s2.a, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN, i_q) (s2, res3.a))\n     abort ();"}, {"sha": "600dfd2c0ca2409c91df6b500c098c76c653bcfa", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpd-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpd-2.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -17,8 +17,8 @@\n     {\t\t\t\t\t\t\t\\\n       dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n-    source1.x = _mm512_loadu_epi32 (s1);\t\t\\\n-    source2.x = _mm512_loadu_epi32 (s2);\t\t\\\n+    source1.x = _mm512_loadu_si512 (s1);\t\t\\\n+    source2.x = _mm512_loadu_si512 (s2);\t\t\\\n     dst1 = _mm512_cmp_epi32_mask (source1.x, source2.x, imm);\\\n     dst2 = _mm512_mask_cmp_epi32_mask (mask, source1.x, source2.x, imm);\\\n     if (dst_ref != dst1) abort();\t\t\t\\"}, {"sha": "2a9ceb6a9f0f4699af9d11c705549fc92d28fdbd", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpq-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpq-2.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -18,8 +18,8 @@ __mmask8 dst_ref;\n     {\t\t\t\t\t\t\t\\\n       dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n-    source1.x = _mm512_loadu_epi32 (s1);\t\t\\\n-    source2.x = _mm512_loadu_epi32 (s2);\t\t\\\n+    source1.x = _mm512_loadu_si512 (s1);\t\t\\\n+    source2.x = _mm512_loadu_si512 (s2);\t\t\\\n     dst1 = _mm512_cmp_epi64_mask (source1.x, source2.x, imm);\\\n     dst2 = _mm512_mask_cmp_epi64_mask (mask, source1.x, source2.x, imm);\\\n     if (dst_ref != dst1) abort();\t\t\t\\"}, {"sha": "c0bb97839f22400e3384156923b8af8023b1cc3e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpud-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpud-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpud-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpud-2.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -17,8 +17,8 @@\n     {\t\t\t\t\t\t\t\\\n       dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n-    source1.x = _mm512_loadu_epi32 (s1);\t\t\\\n-    source2.x = _mm512_loadu_epi32 (s2);\t\t\\\n+    source1.x = _mm512_loadu_si512 (s1);\t\t\\\n+    source2.x = _mm512_loadu_si512 (s2);\t\t\\\n     dst1 = _mm512_cmp_epu32_mask (source1.x, source2.x, imm);\\\n     dst2 = _mm512_mask_cmp_epu32_mask (mask, source1.x, source2.x, imm);\\\n     if (dst_ref != dst1) abort();\t\t\t\\"}, {"sha": "3bd1b865623b24ed0d1072a87be4e4ce0cbef7e0", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpuq-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpuq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpuq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpuq-2.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -17,8 +17,8 @@\n     {\t\t\t\t\t\t\t\\\n       dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n-    source1.x = _mm512_loadu_epi32 (s1);\t\t\\\n-    source2.x = _mm512_loadu_epi32 (s2);\t\t\\\n+    source1.x = _mm512_loadu_si512 (s1);\t\t\\\n+    source2.x = _mm512_loadu_si512 (s2);\t\t\\\n     dst1 = _mm512_cmp_epu64_mask (source1.x, source2.x, imm);\\\n     dst2 = _mm512_mask_cmp_epu64_mask (mask, source1.x, source2.x, imm);\\\n     if (dst_ref != dst1) abort();\t\t\t\\"}, {"sha": "c6c8a9c1c7b6a99bc1ee796475b48d0b82933b12", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpslld-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpslld-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpslld-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpslld-2.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -9,7 +9,7 @@\n #define SIZE (AVX512F_LEN / 32)\n #include \"avx512f-mask-type.h\"\n \n-CALC (int *r, int *s1,  int* s2)\n+CALC (int *r, int *s1, long long* s2)\n {\n   int i;\n   int count = s2[0];\n@@ -24,7 +24,7 @@ TEST (void)\n {\n   int i, sign;\n   UNION_TYPE (AVX512F_LEN, i_d) res1, res2, res3, src1;\n-  UNION_TYPE (128, i_d) src2;\n+  UNION_TYPE (128, i_q) src2;\n   MASK_TYPE mask = MASK_VALUE;\n   int res_ref[SIZE];\n "}, {"sha": "596f98b4397988dbbcebb963cb52a15cbf2758d1", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpsrad-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpsrad-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpsrad-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpsrad-2.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -9,7 +9,7 @@\n #define SIZE (AVX512F_LEN / 32)\n #include \"avx512f-mask-type.h\"\n \n-CALC (int *r, int *s1, int *s2)\n+CALC (int *r, int *s1, long long *s2)\n {\n   int i;\n   int count = s2[0];\n@@ -25,7 +25,7 @@ TEST (void)\n {\n   int i, sign;\n   UNION_TYPE (AVX512F_LEN, i_d) res1, res2, res3, src1;\n-  UNION_TYPE (128, i_d) src2;\n+  UNION_TYPE (128, i_q) src2;\n   MASK_TYPE mask = MASK_VALUE;\n   int res_ref[SIZE];\n "}, {"sha": "653a8f8f3043dc5c38a48abd7f13c7f67b433304", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpsrld-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpsrld-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpsrld-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpsrld-2.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -9,7 +9,7 @@\n #define SIZE (AVX512F_LEN / 32)\n #include \"avx512f-mask-type.h\"\n \n-CALC (unsigned int *r, unsigned int *s1,  unsigned int* s2)\n+CALC (unsigned int *r, unsigned int *s1,  unsigned long long* s2)\n {\n   int i;\n   unsigned int count = s2[0];\n@@ -24,7 +24,7 @@ TEST (void)\n {\n   int i;\n   UNION_TYPE (AVX512F_LEN, i_d) res1, res2, res3, src1;\n-  UNION_TYPE (128, i_d) src2;\n+  UNION_TYPE (128, i_q) src2;\n   MASK_TYPE mask = MASK_VALUE;\n   unsigned int res_ref[SIZE];\n "}, {"sha": "baf505c80bb21467a1e100b5efdad57ad3e367d0", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrndscalepd-1.c", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscalepd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscalepd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscalepd-1.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -1,10 +1,10 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vrndscalepd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 6} } */\n-/* { dg-final { scan-assembler-times \"vrndscalepd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 9} } */\n-/* { dg-final { scan-assembler-times \"vrndscalepd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 3} } */\n-/* { dg-final { scan-assembler-times \"vrndscalepd\\[ \\\\t\\]+\\\\S*,\\[ \\\\t\\]+\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3} } */\n-/* { dg-final { scan-assembler-times \"vrndscalepd\\[ \\\\t\\]+\\\\S*,\\[ \\\\t\\]+\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 6} } */\n+/* { dg-final { scan-assembler-times \"vrndscalepd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vrndscalepd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vrndscalepd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrndscalepd\\[ \\\\t\\]+\\\\S*,\\[ \\\\t\\]+\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscalepd\\[ \\\\t\\]+\\\\S*,\\[ \\\\t\\]+\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -20,16 +20,8 @@ avx512f_test (void)\n   x = _mm512_mask_ceil_pd (x, 2, x);\n   x = _mm512_mask_floor_pd (x, 2, x);\n   x = _mm512_maskz_roundscale_pd (2, x, 0x42);\n-  x = _mm512_maskz_ceil_pd (2, x);\n-  x = _mm512_maskz_floor_pd (2, x);\n \n   x = _mm512_roundscale_round_pd (x, 0x42, _MM_FROUND_NO_EXC);\n-  x = _mm512_ceil_round_pd (x, _MM_FROUND_NO_EXC);\n-  x = _mm512_floor_round_pd (x, _MM_FROUND_NO_EXC);\n   x = _mm512_mask_roundscale_round_pd (x, 2, x, 0x42, _MM_FROUND_NO_EXC);\n-  x = _mm512_mask_ceil_round_pd (x, 2, x, _MM_FROUND_NO_EXC);\n-  x = _mm512_mask_floor_round_pd (x, 2, x, _MM_FROUND_NO_EXC);\n   x = _mm512_maskz_roundscale_round_pd (2, x, 0x42, _MM_FROUND_NO_EXC);\n-  x = _mm512_maskz_ceil_round_pd (2, x, _MM_FROUND_NO_EXC);\n-  x = _mm512_maskz_floor_round_pd (2, x, _MM_FROUND_NO_EXC);\n }"}, {"sha": "f18cdcbcab2343242ef3d2e5838f90cbc7158330", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrndscalepd-2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscalepd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscalepd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscalepd-2.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -66,13 +66,11 @@ TEST (void)\n \t  imm = _MM_FROUND_FLOOR;\n \t  res1.x = INTRINSIC (_floor_pd) (s.x);\n \t  res2.x = INTRINSIC (_mask_floor_pd) (res2.x, mask, s.x);\n-\t  res3.x = INTRINSIC (_maskz_floor_pd) (mask, s.x);\n \t  break;\n \tcase 2:\n \t  imm = _MM_FROUND_CEIL;\n \t  res1.x = INTRINSIC (_ceil_pd) (s.x);\n \t  res2.x = INTRINSIC (_mask_ceil_pd) (res2.x, mask, s.x);\n-\t  res3.x = INTRINSIC (_maskz_ceil_pd) (mask, s.x);\n \t  break;\n \t}\n \n@@ -88,7 +86,7 @@ TEST (void)\n \n       MASK_ZERO(d) (res_ref,mask,SIZE );\n \n-      if (UNION_CHECK (AVX512F_LEN, d) (res3, res_ref))\n+      if (!i && UNION_CHECK (AVX512F_LEN, d) (res3, res_ref))\n \tabort ();\n \n     }"}, {"sha": "d7a6f9f9085fdd7040535007c2780ede5616b567", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrndscaleps-1.c", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscaleps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscaleps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscaleps-1.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -1,10 +1,10 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vrndscaleps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 6} } */\n-/* { dg-final { scan-assembler-times \"vrndscaleps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 9} } */\n-/* { dg-final { scan-assembler-times \"vrndscaleps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 3} } */\n-/* { dg-final { scan-assembler-times \"vrndscaleps\\[ \\\\t\\]+\\\\S*,\\[ \\\\t\\]+\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3} } */\n-/* { dg-final { scan-assembler-times \"vrndscaleps\\[ \\\\t\\]+\\\\S*,\\[ \\\\t\\]+\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 6} } */\n+/* { dg-final { scan-assembler-times \"vrndscaleps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vrndscaleps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vrndscaleps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrndscaleps\\[ \\\\t\\]+\\\\S*,\\[ \\\\t\\]+\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscaleps\\[ \\\\t\\]+\\\\S*,\\[ \\\\t\\]+\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -20,16 +20,8 @@ avx512f_test (void)\n   x = _mm512_mask_ceil_ps (x, 2, x);\n   x = _mm512_mask_floor_ps (x, 2, x);\n   x = _mm512_maskz_roundscale_ps (2, x, 0x42);\n-  x = _mm512_maskz_ceil_ps (2, x);\n-  x = _mm512_maskz_floor_ps (2, x);\n \n   x = _mm512_roundscale_round_ps (x, 0x42, _MM_FROUND_NO_EXC);\n-  x = _mm512_ceil_round_ps (x, _MM_FROUND_NO_EXC);\n-  x = _mm512_floor_round_ps (x, _MM_FROUND_NO_EXC);\n   x = _mm512_mask_roundscale_round_ps (x, 2, x, 0x42, _MM_FROUND_NO_EXC);\n-  x = _mm512_mask_ceil_round_ps (x, 2, x, _MM_FROUND_NO_EXC);\n-  x = _mm512_mask_floor_round_ps (x, 2, x, _MM_FROUND_NO_EXC);\n   x = _mm512_maskz_roundscale_round_ps (2, x, 0x42, _MM_FROUND_NO_EXC);\n-  x = _mm512_maskz_ceil_round_ps (2, x, _MM_FROUND_NO_EXC);\n-  x = _mm512_maskz_floor_round_ps (2, x, _MM_FROUND_NO_EXC);\n }"}, {"sha": "097253d754c78e635ba886da7e5fb9a19bc4e761", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrndscaleps-2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscaleps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscaleps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscaleps-2.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -65,13 +65,11 @@ TEST (void)\n \t  imm = _MM_FROUND_FLOOR;\n \t  res1.x = INTRINSIC (_floor_ps) (s.x);\n \t  res2.x = INTRINSIC (_mask_floor_ps) (res2.x, mask, s.x);\n-\t  res3.x = INTRINSIC (_maskz_floor_ps) (mask, s.x);\n \t  break;\n \tcase 2:\n \t  imm = _MM_FROUND_CEIL;\n \t  res1.x = INTRINSIC (_ceil_ps) (s.x);\n \t  res2.x = INTRINSIC (_mask_ceil_ps) (res2.x, mask, s.x);\n-\t  res3.x = INTRINSIC (_maskz_ceil_ps) (mask, s.x);\n \t  break;\n \t}\n \n@@ -87,7 +85,7 @@ TEST (void)\n \n       MASK_ZERO ()(res_ref, mask, SIZE);\n \n-      if (UNION_CHECK (AVX512F_LEN,) (res3, res_ref))\n+      if (!i && UNION_CHECK (AVX512F_LEN,) (res3, res_ref))\n \tabort ();\n \n     }"}, {"sha": "fe366ee6c845134db3933211ac7771a2bfc03c3c", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vgatherpf0dpd-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0dpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0dpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0dpd-1.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -11,5 +11,5 @@ void *base;\n void extern\n avx512pf_test (void)\n {\n-  _mm512_mask_prefetch_i32gather_pd (idx, m8, base, 8, 0);\n+  _mm512_mask_prefetch_i32gather_pd (idx, m8, base, 8, 1);\n }"}, {"sha": "df13cdbc71c72a1b7c684b85cdd9c2eea76e4073", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vgatherpf0dps-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0dps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0dps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0dps-1.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -11,5 +11,5 @@ int *base;\n void extern\n avx512pf_test (void)\n {\n-  _mm512_mask_prefetch_i32gather_ps (idx, m16, base, 8, 0);\n+  _mm512_mask_prefetch_i32gather_ps (idx, m16, base, 8, 1);\n }"}, {"sha": "ba7133521acd566864ce8dcb377d6e0ea84bf3fe", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vgatherpf0qpd-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0qpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0qpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0qpd-1.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -11,5 +11,5 @@ int *base;\n void extern\n avx512pf_test (void)\n {\n-  _mm512_mask_prefetch_i64gather_pd (idx, m8, base, 8, 0);\n+  _mm512_mask_prefetch_i64gather_pd (idx, m8, base, 8, 1);\n }"}, {"sha": "945ac517cd55050f842ba17f31e89986e5f71a64", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vgatherpf0qps-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0qps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0qps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf0qps-1.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -11,5 +11,5 @@ int *base;\n void extern\n avx512pf_test (void)\n {\n-  _mm512_mask_prefetch_i64gather_ps (idx, m8, base, 8, 0);\n+  _mm512_mask_prefetch_i64gather_ps (idx, m8, base, 8, 1);\n }"}, {"sha": "5933376db06d12f640e0f4c51c839f600d0c72fa", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vgatherpf1dpd-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1dpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1dpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1dpd-1.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -11,5 +11,5 @@ int *base;\n void extern\n avx512pf_test (void)\n {\n-  _mm512_mask_prefetch_i32gather_pd (idx, m8, base, 8, 1);\n+  _mm512_mask_prefetch_i32gather_pd (idx, m8, base, 8, 2);\n }"}, {"sha": "da1046f8cf8d1bea125f7a06d24cc5fb52dd6508", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vgatherpf1dps-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1dps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1dps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1dps-1.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -11,5 +11,5 @@ int *base;\n void extern\n avx512pf_test (void)\n {\n-  _mm512_mask_prefetch_i32gather_ps (idx, m16, base, 8, 1);\n+  _mm512_mask_prefetch_i32gather_ps (idx, m16, base, 8, 2);\n }"}, {"sha": "eb2c545d66985b2b4d8f8f35cb5d8c1431583104", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vgatherpf1qpd-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1qpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1qpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1qpd-1.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -11,5 +11,5 @@ int *base;\n void extern\n avx512pf_test (void)\n {\n-  _mm512_mask_prefetch_i64gather_pd (idx, m8, base, 8, 1);\n+  _mm512_mask_prefetch_i64gather_pd (idx, m8, base, 8, 2);\n }"}, {"sha": "1c81836996a4ef8e087327140d8d79df2a466cbf", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vgatherpf1qps-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1qps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1qps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vgatherpf1qps-1.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -11,5 +11,5 @@ int *base;\n void extern\n avx512pf_test (void)\n {\n-  _mm512_mask_prefetch_i64gather_ps (idx, m8, base, 8, 1);\n+  _mm512_mask_prefetch_i64gather_ps (idx, m8, base, 8, 2);\n }"}, {"sha": "ff00bfa58d7bde3cc0e4bbfe14a964d56841c2eb", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vscatterpf0dpd-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0dpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0dpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0dpd-1.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -12,6 +12,6 @@ void *base;\n void extern\n avx512pf_test (void)\n {\n-  _mm512_prefetch_i32scatter_pd (base, idx, 8, 0);\n-  _mm512_mask_prefetch_i32scatter_pd (base, m8, idx, 8, 0);\n+  _mm512_prefetch_i32scatter_pd (base, idx, 8, 1);\n+  _mm512_mask_prefetch_i32scatter_pd (base, m8, idx, 8, 5);\n }"}, {"sha": "25448b4e2f4065822ba928488792126c6cd40dec", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vscatterpf0dps-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0dps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0dps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0dps-1.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -12,6 +12,6 @@ int *base;\n void extern\n avx512pf_test (void)\n {\n-  _mm512_prefetch_i32scatter_ps (base, idx, 8, 0);\n-  _mm512_mask_prefetch_i32scatter_ps (base, m16, idx, 8, 0);\n+  _mm512_prefetch_i32scatter_ps (base, idx, 8, 1);\n+  _mm512_mask_prefetch_i32scatter_ps (base, m16, idx, 8, 5);\n }"}, {"sha": "84ddc6d9b9667bd516a1cf413972e467b759d8b6", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vscatterpf0qpd-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0qpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0qpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0qpd-1.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -12,6 +12,6 @@ void *base;\n void extern\n avx512pf_test (void)\n {\n-  _mm512_prefetch_i64scatter_pd (base, idx, 8, 0);\n-  _mm512_mask_prefetch_i64scatter_pd (base, m8, idx, 8, 0);\n+  _mm512_prefetch_i64scatter_pd (base, idx, 8, 1);\n+  _mm512_mask_prefetch_i64scatter_pd (base, m8, idx, 8, 5);\n }"}, {"sha": "847a719371f2a9ff095f0fdc9e2823e0dd95a197", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vscatterpf0qps-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0qps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0qps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf0qps-1.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -12,6 +12,6 @@ int *base;\n void extern\n avx512pf_test (void)\n {\n-  _mm512_prefetch_i64scatter_ps (base, idx, 8, 0);\n-  _mm512_mask_prefetch_i64scatter_ps (base, m8, idx, 8, 0);\n+  _mm512_prefetch_i64scatter_ps (base, idx, 8, 1);\n+  _mm512_mask_prefetch_i64scatter_ps (base, m8, idx, 8, 5);\n }"}, {"sha": "5633138825fab38c068c22184d0ee2cdd023e358", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vscatterpf1dpd-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1dpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1dpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1dpd-1.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -12,6 +12,6 @@ void *base;\n void extern\n avx512pf_test (void)\n {\n-  _mm512_prefetch_i32scatter_pd (base, idx, 8, 1);\n-  _mm512_mask_prefetch_i32scatter_pd (base, m8, idx, 8, 1);\n+  _mm512_prefetch_i32scatter_pd (base, idx, 8, 2);\n+  _mm512_mask_prefetch_i32scatter_pd (base, m8, idx, 8, 6);\n }"}, {"sha": "fb70439859447c104c520887c40cc8c48e16c8ff", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vscatterpf1dps-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1dps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1dps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1dps-1.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -12,6 +12,6 @@ int *base;\n void extern\n avx512pf_test (void)\n {\n-  _mm512_prefetch_i32scatter_ps (base, idx, 8, 1);\n-  _mm512_mask_prefetch_i32scatter_ps (base, m16, idx, 8, 1);\n+  _mm512_prefetch_i32scatter_ps (base, idx, 8, 2);\n+  _mm512_mask_prefetch_i32scatter_ps (base, m16, idx, 8, 6);\n }"}, {"sha": "7fbd1429cf7e0cfa4558b3203120ca77b039fd4a", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vscatterpf1qpd-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1qpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1qpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1qpd-1.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -12,6 +12,6 @@ int *base;\n void extern\n avx512pf_test (void)\n {\n-  _mm512_prefetch_i64scatter_pd (base, idx, 8, 1);\n-  _mm512_mask_prefetch_i64scatter_pd (base, m8, idx, 8, 1);\n+  _mm512_prefetch_i64scatter_pd (base, idx, 8, 2);\n+  _mm512_mask_prefetch_i64scatter_pd (base, m8, idx, 8, 6);\n }"}, {"sha": "c0048341f045c99ecca390133b2bf80b43b1209a", "filename": "gcc/testsuite/gcc.target/i386/avx512pf-vscatterpf1qps-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1qps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf73ee60e709402731e3d96be0afc73cf73b899b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1qps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512pf-vscatterpf1qps-1.c?ref=cf73ee60e709402731e3d96be0afc73cf73b899b", "patch": "@@ -12,6 +12,6 @@ int *base;\n void extern\n avx512pf_test (void)\n {\n-  _mm512_prefetch_i64scatter_ps (base, idx, 8, 1);\n-  _mm512_mask_prefetch_i64scatter_ps (base, m8, idx, 8, 1);\n+  _mm512_prefetch_i64scatter_ps (base, idx, 8, 2);\n+  _mm512_mask_prefetch_i64scatter_ps (base, m8, idx, 8, 6);\n }"}]}