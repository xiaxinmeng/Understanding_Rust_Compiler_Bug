{"sha": "ace4831de98f6caf6450cf57528f5a15eec6c9e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNlNDgzMWRlOThmNmNhZjY0NTBjZjU3NTI4ZjVhMTVlZWM2YzllMQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2006-06-14T17:44:36Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-06-14T17:44:36Z"}, "message": "re PR c++/27227 (rejects valid code with some extern \"C\")\n\n\tPR c++/27227\n\t* decl.c (decls_match): Allow an extern \"C\" variable declarations\n\tfrom different namespaces to match.\n\t(duplicate_decls): Disallow redeclaring a variable with a\n\tdifferent linkage specification.\n\tPR c++/27227\n\t* g++.dg/lookup/linkage1.C: New test.\n\t* g++.dg/lookup/linkage2.C: Likewise.\n\nFrom-SVN: r114647", "tree": {"sha": "222304b644d89c1c1cd28e8b5be65b80e93e6bf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/222304b644d89c1c1cd28e8b5be65b80e93e6bf3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ace4831de98f6caf6450cf57528f5a15eec6c9e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ace4831de98f6caf6450cf57528f5a15eec6c9e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ace4831de98f6caf6450cf57528f5a15eec6c9e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ace4831de98f6caf6450cf57528f5a15eec6c9e1/comments", "author": null, "committer": null, "parents": [{"sha": "c3b11a40d026d3b25038f3300180e1b58a9b3b99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3b11a40d026d3b25038f3300180e1b58a9b3b99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3b11a40d026d3b25038f3300180e1b58a9b3b99"}], "stats": {"total": 71, "additions": 65, "deletions": 6}, "files": [{"sha": "b7eee4f78b9485dc690780409782777437dc0ef7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace4831de98f6caf6450cf57528f5a15eec6c9e1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace4831de98f6caf6450cf57528f5a15eec6c9e1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ace4831de98f6caf6450cf57528f5a15eec6c9e1", "patch": "@@ -1,3 +1,11 @@\n+2006-06-13  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/27227\n+\t* decl.c (decls_match): Allow an extern \"C\" variable declarations\n+\tfrom different namespaces to match.\n+\t(duplicate_decls): Disallow redeclaring a variable with a\n+\tdifferent linkage specification.\n+\n 2006-06-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/27793"}, {"sha": "2d92fe382d5af07a5f903150f241c9b143f0f6fd", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace4831de98f6caf6450cf57528f5a15eec6c9e1/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace4831de98f6caf6450cf57528f5a15eec6c9e1/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ace4831de98f6caf6450cf57528f5a15eec6c9e1", "patch": "@@ -999,7 +999,13 @@ decls_match (tree newdecl, tree olddecl)\n       /* Need to check scope for variable declaration (VAR_DECL).\n \t For typedef (TYPE_DECL), scope is ignored.  */\n       if (TREE_CODE (newdecl) == VAR_DECL\n-\t  && CP_DECL_CONTEXT (newdecl) != CP_DECL_CONTEXT (olddecl))\n+\t  && CP_DECL_CONTEXT (newdecl) != CP_DECL_CONTEXT (olddecl)\n+\t  /* [dcl.link]\n+\t     Two declarations for an object with C language linkage\n+\t     with the same name (ignoring the namespace that qualify\n+\t     it) that appear in different namespace scopes refer to\n+\t     the same object.  */\n+\t  && !(DECL_EXTERN_C_P (olddecl) && DECL_EXTERN_C_P (newdecl)))\n \treturn 0;\n \n       if (TREE_TYPE (newdecl) == error_mark_node)\n@@ -1453,14 +1459,42 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t  warning (0, \"prototype for %q+#D\", newdecl);\n \t  warning (0, \"%Jfollows non-prototype definition here\", olddecl);\n \t}\n-      else if (TREE_CODE (olddecl) == FUNCTION_DECL\n+      else if ((TREE_CODE (olddecl) == FUNCTION_DECL\n+\t\t|| TREE_CODE (olddecl) == VAR_DECL)\n \t       && DECL_LANGUAGE (newdecl) != DECL_LANGUAGE (olddecl))\n \t{\n-\t  /* extern \"C\" int foo ();\n-\t     int foo () { bar (); }\n-\t     is OK.  */\n+\t  /* [dcl.link]\n+\t     If two declarations of the same function or object\n+\t     specify different linkage-specifications ..., the program\n+\t     is ill-formed.... Except for functions with C++ linkage,\n+\t     a function declaration without a linkage specification\n+\t     shall not precede the first linkage specification for\n+\t     that function.  A function can be declared without a\n+\t     linkage specification after an explicit linkage\n+\t     specification has been seen; the linkage explicitly\n+\t     specified in the earlier declaration is not affected by\n+\t     such a function declaration.\n+\n+\t     DR 563 raises the question why the restrictions on\n+\t     functions should not also apply to objects.  Older\n+\t     versions of G++ silently ignore the linkage-specification\n+\t     for this example:\n+\n+\t       namespace N { \n+                 extern int i;\n+   \t         extern \"C\" int i;\n+               }\n+\n+             which is clearly wrong.  Therefore, we now treat objects\n+\t     like functions.  */\n \t  if (current_lang_depth () == 0)\n-\t    SET_DECL_LANGUAGE (newdecl, DECL_LANGUAGE (olddecl));\n+\t    {\n+\t      /* There is no explicit linkage-specification, so we use\n+\t\t the linkage from the previous declaration.  */\n+\t      if (!DECL_LANG_SPECIFIC (newdecl))\n+\t\tretrofit_lang_decl (newdecl);\n+\t      SET_DECL_LANGUAGE (newdecl, DECL_LANGUAGE (olddecl));\n+\t    }\n \t  else\n \t    {\n \t      error (\"previous declaration of %q+#D with %qL linkage\","}, {"sha": "2760477d778556d257b2c3cc2c83763078c401ac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace4831de98f6caf6450cf57528f5a15eec6c9e1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace4831de98f6caf6450cf57528f5a15eec6c9e1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ace4831de98f6caf6450cf57528f5a15eec6c9e1", "patch": "@@ -1,3 +1,9 @@\n+2006-06-14  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/27227\n+\t* g++.dg/lookup/linkage1.C: New test.\n+\t* g++.dg/lookup/linkage2.C: Likewise.\n+\n 2006-06-14  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \tPR middle-end/27959"}, {"sha": "6f6bdfdea8a99c0bdc75ae8494fc0e5937292467", "filename": "gcc/testsuite/g++.dg/lookup/linkage1.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace4831de98f6caf6450cf57528f5a15eec6c9e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Flinkage1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace4831de98f6caf6450cf57528f5a15eec6c9e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Flinkage1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Flinkage1.C?ref=ace4831de98f6caf6450cf57528f5a15eec6c9e1", "patch": "@@ -0,0 +1,4 @@\n+// DR 563\n+\n+extern int i; // { dg-error \"linkage\" }\n+extern \"C\" int i; // { dg-error \"linkage\" }"}, {"sha": "994264d3ebcd3b754e49b82590f92d9a66b67e93", "filename": "gcc/testsuite/g++.dg/lookup/linkage2.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace4831de98f6caf6450cf57528f5a15eec6c9e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Flinkage2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace4831de98f6caf6450cf57528f5a15eec6c9e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Flinkage2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Flinkage2.C?ref=ace4831de98f6caf6450cf57528f5a15eec6c9e1", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/27227\n+\n+namespace x {\n+  extern \"C\" const int y;\n+}\n+using x::y;\n+extern \"C\" int const y=0;"}]}