{"sha": "92965c565bf0dac4c58f819f29d7a537a587d6c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI5NjVjNTY1YmYwZGFjNGM1OGY4MTlmMjlkN2E1MzdhNTg3ZDZjMA==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2004-07-30T19:40:30Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2004-07-30T19:40:30Z"}, "message": "tree-ssa-alias.c (compute_points_to_and_addr_escape): If a pointer escapes through a function call...\n\n\n\t* tree-ssa-alias.c (compute_points_to_and_addr_escape): If a\n\tpointer escapes through a function call, assume that the\n\tcallee will dereference it.\n\t(add_pointed_to_var): Assume that VALUE is always an\n\tADDR_EXPR.\n\t(collect_points_to_info_r): Only call add_pointed_to_var if\n\tthe value is an ADDR_EXPR.\n\nFrom-SVN: r85353", "tree": {"sha": "63aaf666106db0c205dbacc68e1f85fd93bf9c4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63aaf666106db0c205dbacc68e1f85fd93bf9c4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92965c565bf0dac4c58f819f29d7a537a587d6c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92965c565bf0dac4c58f819f29d7a537a587d6c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92965c565bf0dac4c58f819f29d7a537a587d6c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92965c565bf0dac4c58f819f29d7a537a587d6c0/comments", "author": null, "committer": null, "parents": [{"sha": "9497a3a471a8cef27397cffc9820a2ba467ccb1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9497a3a471a8cef27397cffc9820a2ba467ccb1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9497a3a471a8cef27397cffc9820a2ba467ccb1a"}], "stats": {"total": 70, "additions": 41, "deletions": 29}, "files": [{"sha": "b36cc87ae2f89a434cf589abc3aae0d6a15ae67c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92965c565bf0dac4c58f819f29d7a537a587d6c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92965c565bf0dac4c58f819f29d7a537a587d6c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92965c565bf0dac4c58f819f29d7a537a587d6c0", "patch": "@@ -1,3 +1,13 @@\n+2004-07-30  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* tree-ssa-alias.c (compute_points_to_and_addr_escape): If a\n+\tpointer escapes through a function call, assume that the\n+\tcallee will dereference it.\n+\t(add_pointed_to_var): Assume that VALUE is always an\n+\tADDR_EXPR.\n+\t(collect_points_to_info_r): Only call add_pointed_to_var if\n+\tthe value is an ADDR_EXPR.\n+\n 2004-07-30  Diego Novillo  <dnovillo@redhat.com>\n \n \t* tree-ssa-alias.c (create_alias_map_for): Do not get the"}, {"sha": "1ec24649204173b6a7558206438456b7e02eccdf", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92965c565bf0dac4c58f819f29d7a537a587d6c0/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92965c565bf0dac4c58f819f29d7a537a587d6c0/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=92965c565bf0dac4c58f819f29d7a537a587d6c0", "patch": "@@ -691,7 +691,10 @@ compute_points_to_and_addr_escape (struct alias_info *ai)\n \t\t     that pointer OP will be dereferenced in a store\n \t\t     operation inside the called function.  */\n \t\t  if (get_call_expr_in (stmt))\n-\t\t    bitmap_set_bit (ai->dereferenced_ptrs_store, v_ann->uid);\n+\t\t    {\n+\t\t      bitmap_set_bit (ai->dereferenced_ptrs_store, v_ann->uid);\n+\t\t      pi->is_dereferenced = 1;\n+\t\t    }\n \t\t}\n \t    }\n \n@@ -1863,35 +1866,32 @@ static void\n add_pointed_to_var (struct alias_info *ai, tree ptr, tree value)\n {\n   struct ptr_info_def *pi = get_ptr_info (ptr);\n+  tree pt_var;\n+  size_t uid;\n \n-  if (TREE_CODE (value) == ADDR_EXPR)\n-    {\n-      tree pt_var;\n-      size_t uid;\n+#if defined ENABLE_CHECKING\n+  if (TREE_CODE (value) != ADDR_EXPR)\n+    abort ();\n+#endif\n \n-      pt_var = TREE_OPERAND (value, 0);\n-      if (TREE_CODE_CLASS (TREE_CODE (pt_var)) == 'r')\n-\tpt_var = get_base_address (pt_var);\n+  pt_var = TREE_OPERAND (value, 0);\n+  if (TREE_CODE_CLASS (TREE_CODE (pt_var)) == 'r')\n+    pt_var = get_base_address (pt_var);\n \n-      if (pt_var && SSA_VAR_P (pt_var))\n-\t{\n-\t  uid = var_ann (pt_var)->uid;\n-\t  bitmap_set_bit (ai->addresses_needed, uid);\n+  if (pt_var && SSA_VAR_P (pt_var))\n+    {\n+      uid = var_ann (pt_var)->uid;\n+      bitmap_set_bit (ai->addresses_needed, uid);\n \n-\t  /* If PTR has already been found to point anywhere, don't\n-\t     add the variable to PTR's points-to set.  */\n-\t  if (!pi->pt_anything)\n-\t    {\n-\t      if (pi->pt_vars == NULL)\n-\t\tpi->pt_vars = BITMAP_GGC_ALLOC ();\n-\t      bitmap_set_bit (pi->pt_vars, uid);\n-\t    }\n+      /* If PTR has already been found to point anywhere, don't\n+\t add the variable to PTR's points-to set.  */\n+      if (!pi->pt_anything)\n+\t{\n+\t  if (pi->pt_vars == NULL)\n+\t    pi->pt_vars = BITMAP_GGC_ALLOC ();\n+\t  bitmap_set_bit (pi->pt_vars, uid);\n \t}\n-      else\n-\tadd_pointed_to_expr (ptr, value);\n     }\n-  else\n-    add_pointed_to_expr (ptr, value);\n }\n \n \n@@ -1922,8 +1922,8 @@ collect_points_to_info_r (tree var, tree stmt, void *data)\n       tree rhs = TREE_OPERAND (stmt, 1);\n       STRIP_NOPS (rhs);\n \n-      /* Found P_i = CONST.  */\n-      if (is_gimple_min_invariant (rhs))\n+      /* Found P_i = ADDR_EXPR  */\n+      if (TREE_CODE (rhs) == ADDR_EXPR)\n \tadd_pointed_to_var (ai, var, rhs);\n \n       /* Found P_i = Q_j.  */\n@@ -1944,9 +1944,9 @@ collect_points_to_info_r (tree var, tree stmt, void *data)\n \t  else if (TREE_CODE (op1) == SSA_NAME\n \t\t   && POINTER_TYPE_P (TREE_TYPE (op1)))\n \t    merge_pointed_to_info (ai, var, op1);\n-\t  else if (is_gimple_min_invariant (op0))\n+\t  else if (TREE_CODE (op0) == ADDR_EXPR)\n \t    add_pointed_to_var (ai, var, op0);\n-\t  else if (is_gimple_min_invariant (op1))\n+\t  else if (TREE_CODE (op1) == ADDR_EXPR)\n \t    add_pointed_to_var (ai, var, op1);\n \t  else\n \t    add_pointed_to_expr (var, rhs);\n@@ -1978,7 +1978,7 @@ collect_points_to_info_r (tree var, tree stmt, void *data)\n \t variable that we are analyzing is the LHS of the PHI node.  */\n       tree lhs = PHI_RESULT (stmt);\n \n-      if (is_gimple_min_invariant (var))\n+      if (TREE_CODE (var) == ADDR_EXPR)\n \tadd_pointed_to_var (ai, lhs, var);\n       else if (TREE_CODE (var) == SSA_NAME)\n \t{\n@@ -1987,6 +1987,8 @@ collect_points_to_info_r (tree var, tree stmt, void *data)\n \t  else\n \t    set_pt_anything (lhs);\n \t}\n+      else if (is_gimple_min_invariant (var))\n+\tadd_pointed_to_expr (lhs, var);\n       else\n \tabort ();\n     }"}]}