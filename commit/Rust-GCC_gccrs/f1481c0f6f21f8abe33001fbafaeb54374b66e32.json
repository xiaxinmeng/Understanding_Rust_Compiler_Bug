{"sha": "f1481c0f6f21f8abe33001fbafaeb54374b66e32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE0ODFjMGY2ZjIxZjhhYmUzMzAwMWZiYWZhZWI1NDM3NGI2NmUzMg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2014-08-22T16:47:15Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2014-08-22T16:47:15Z"}, "message": "re PR target/62195 (Invalid mnemonic 'xxlxor' on powerpc-apple-darwin9 with -m64)\n\n2014-08-22  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/62195\n\t* doc/md.texi (Machine Constraints): Update PowerPC wi constraint\n\tdocumentation to state it is only for VSX operations.\n\n\t* config/rs6000/rs6000.c (rs6000_init_hard_regno_mode_ok): Make wi\n\tconstraint only active if VSX.\n\n\t* config/rs6000/rs6000.md (lfiwax): Use wj constraint instead of\n\twi cosntraint for ISA 2.07 lxsiwax/lxsiwzx instructions.\n\t(lfiwzx): Likewise.\n\nFrom-SVN: r214329", "tree": {"sha": "4ee229a3aae6cc9270df299eac30cb8f035e015b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ee229a3aae6cc9270df299eac30cb8f035e015b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1481c0f6f21f8abe33001fbafaeb54374b66e32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1481c0f6f21f8abe33001fbafaeb54374b66e32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1481c0f6f21f8abe33001fbafaeb54374b66e32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1481c0f6f21f8abe33001fbafaeb54374b66e32/comments", "author": null, "committer": null, "parents": [{"sha": "d362bd85e38e0e8173c2be5a9314663a2ec2cfc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d362bd85e38e0e8173c2be5a9314663a2ec2cfc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d362bd85e38e0e8173c2be5a9314663a2ec2cfc6"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "e555532005720a80323d4366c1d3f59f7cc9012d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1481c0f6f21f8abe33001fbafaeb54374b66e32/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1481c0f6f21f8abe33001fbafaeb54374b66e32/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1481c0f6f21f8abe33001fbafaeb54374b66e32", "patch": "@@ -1,3 +1,16 @@\n+2014-08-22  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/62195\n+\t* doc/md.texi (Machine Constraints): Update PowerPC wi constraint\n+\tdocumentation to state it is only for VSX operations.\n+\n+\t* config/rs6000/rs6000.c (rs6000_init_hard_regno_mode_ok): Make wi\n+\tconstraint only active if VSX.\n+\n+\t* config/rs6000/rs6000.md (lfiwax): Use wj constraint instead of\n+\twi cosntraint for ISA 2.07 lxsiwax/lxsiwzx instructions.\n+\t(lfiwzx): Likewise.\n+\n 2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* fwprop.c (single_def_use_dom_walker::before_dom_children):"}, {"sha": "b8800e6c369e087d2e17a87b73491faaddcbb3f8", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1481c0f6f21f8abe33001fbafaeb54374b66e32/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1481c0f6f21f8abe33001fbafaeb54374b66e32/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=f1481c0f6f21f8abe33001fbafaeb54374b66e32", "patch": "@@ -74,7 +74,7 @@\n ;; At present, DImode is not allowed in the Altivec registers.  If in the\n ;; future it is allowed, wi/wj can be set to VSX_REGS instead of FLOAT_REGS.\n (define_register_constraint \"wi\" \"rs6000_constraints[RS6000_CONSTRAINT_wi]\"\n-  \"FP or VSX register to hold 64-bit integers or NO_REGS.\")\n+  \"FP or VSX register to hold 64-bit integers for VSX insns or NO_REGS.\")\n \n (define_register_constraint \"wj\" \"rs6000_constraints[RS6000_CONSTRAINT_wj]\"\n   \"FP or VSX register to hold 64-bit integers for direct moves or NO_REGS.\")"}, {"sha": "c8562cc97d8e2d020cc277c501e83701190b3a60", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1481c0f6f21f8abe33001fbafaeb54374b66e32/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1481c0f6f21f8abe33001fbafaeb54374b66e32/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f1481c0f6f21f8abe33001fbafaeb54374b66e32", "patch": "@@ -2643,7 +2643,7 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \twf - Preferred register class for V4SFmode.\n \twg - Float register for power6x move insns.\n \twh - FP register for direct move instructions.\n-\twi - FP or VSX register to hold 64-bit integers.\n+\twi - FP or VSX register to hold 64-bit integers for VSX insns.\n \twj - FP or VSX register to hold 64-bit integers for direct moves.\n \twk - FP or VSX register to hold 64-bit doubles for direct moves.\n \twl - Float register if we can do 32-bit signed int loads.\n@@ -2663,16 +2663,14 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n     rs6000_constraints[RS6000_CONSTRAINT_f] = FLOAT_REGS;\t/* SFmode  */\n \n   if (TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT)\n-    {\n-      rs6000_constraints[RS6000_CONSTRAINT_d]  = FLOAT_REGS;\t/* DFmode  */\n-      rs6000_constraints[RS6000_CONSTRAINT_wi] = FLOAT_REGS;\t/* DImode  */\n-    }\n+    rs6000_constraints[RS6000_CONSTRAINT_d]  = FLOAT_REGS;\t/* DFmode  */\n \n   if (TARGET_VSX)\n     {\n       rs6000_constraints[RS6000_CONSTRAINT_wa] = VSX_REGS;\n       rs6000_constraints[RS6000_CONSTRAINT_wd] = VSX_REGS;\t/* V2DFmode  */\n       rs6000_constraints[RS6000_CONSTRAINT_wf] = VSX_REGS;\t/* V4SFmode  */\n+      rs6000_constraints[RS6000_CONSTRAINT_wi] = FLOAT_REGS;\t/* DImode  */\n \n       if (TARGET_VSX_TIMODE)\n \trs6000_constraints[RS6000_CONSTRAINT_wt] = VSX_REGS;\t/* TImode  */"}, {"sha": "1ab827194518a0de36df050f1565186652a08af0", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1481c0f6f21f8abe33001fbafaeb54374b66e32/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1481c0f6f21f8abe33001fbafaeb54374b66e32/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=f1481c0f6f21f8abe33001fbafaeb54374b66e32", "patch": "@@ -5614,7 +5614,7 @@\n ; We don't define lfiwax/lfiwzx with the normal definition, because we\n ; don't want to support putting SImode in FPR registers.\n (define_insn \"lfiwax\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wi,!wj\")\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wj,!wj\")\n \t(unspec:DI [(match_operand:SI 1 \"reg_or_indexed_operand\" \"Z,Z,r\")]\n \t\t   UNSPEC_LFIWAX))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT && TARGET_LFIWAX\"\n@@ -5694,7 +5694,7 @@\n    (set_attr \"type\" \"fpload\")])\n \n (define_insn \"lfiwzx\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wi,!wj\")\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wj,!wj\")\n \t(unspec:DI [(match_operand:SI 1 \"reg_or_indexed_operand\" \"Z,Z,r\")]\n \t\t   UNSPEC_LFIWZX))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT && TARGET_LFIWZX\""}, {"sha": "0acdb02ba6b32642a8c1b518cb3e8cbb097fa97d", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1481c0f6f21f8abe33001fbafaeb54374b66e32/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1481c0f6f21f8abe33001fbafaeb54374b66e32/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=f1481c0f6f21f8abe33001fbafaeb54374b66e32", "patch": "@@ -2136,7 +2136,7 @@ If @option{-mmfpgpr} was used, a floating point register or NO_REGS.\n Floating point register if direct moves are available, or NO_REGS.\n \n @item wi\n-FP or VSX register to hold 64-bit integers or NO_REGS.\n+FP or VSX register to hold 64-bit integers for VSX insns or NO_REGS.\n \n @item wj\n FP or VSX register to hold 64-bit integers for direct moves or NO_REGS."}]}