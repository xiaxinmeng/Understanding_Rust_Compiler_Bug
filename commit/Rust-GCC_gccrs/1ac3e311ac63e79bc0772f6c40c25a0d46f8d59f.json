{"sha": "1ac3e311ac63e79bc0772f6c40c25a0d46f8d59f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFjM2UzMTFhYzYzZTc5YmMwNzcyZjZjNDBjMjVhMGQ0NmY4ZDU5Zg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2005-04-03T14:41:22Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2005-04-03T14:41:22Z"}, "message": "re PR target/14812 (ARM optimizer changes rsb/cmp to cmn, but condition codes different)\n\n\tPR target/14812\n\t* arm.md (addsi3_compare0_for_combiner): Delete.\n\t(addsi3_compare0_scratch_for_combiner): Delete.\n\t(cmpsi_neg_shiftsi): Delete.\n\t(compare_negsi_si): New pattern.\n\t(cmpsi_negshiftsi_si): New pattern.\n\t(negated_cbranchsi4): Restrict to equality_operator.\n\n\t* arm.md (movhi_insn_arch4): delete trailing white space from assembler\n\ttemplate.\n\nFrom-SVN: r97493", "tree": {"sha": "23109d2784dec27d70e60f3d7232d163c38d4143", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23109d2784dec27d70e60f3d7232d163c38d4143"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ac3e311ac63e79bc0772f6c40c25a0d46f8d59f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ac3e311ac63e79bc0772f6c40c25a0d46f8d59f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ac3e311ac63e79bc0772f6c40c25a0d46f8d59f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ac3e311ac63e79bc0772f6c40c25a0d46f8d59f/comments", "author": null, "committer": null, "parents": [{"sha": "e5080aa60bff94b6af48ec730a9942c81e6eb4d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5080aa60bff94b6af48ec730a9942c81e6eb4d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5080aa60bff94b6af48ec730a9942c81e6eb4d2"}], "stats": {"total": 70, "additions": 32, "deletions": 38}, "files": [{"sha": "96e632e911fff7fc52b2b0f89b546f2245fb067e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ac3e311ac63e79bc0772f6c40c25a0d46f8d59f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ac3e311ac63e79bc0772f6c40c25a0d46f8d59f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ac3e311ac63e79bc0772f6c40c25a0d46f8d59f", "patch": "@@ -1,3 +1,16 @@\n+2005-04-03  Richard Earnshaw  <richard.earnshaw@arm.com>\n+\n+\tPR target/14812\n+\t* arm.md (addsi3_compare0_for_combiner): Delete.\n+\t(addsi3_compare0_scratch_for_combiner): Delete.\n+\t(cmpsi_neg_shiftsi): Delete.\n+\t(compare_negsi_si): New pattern.\n+\t(cmpsi_negshiftsi_si): New pattern.\n+\t(negated_cbranchsi4): Restrict to equality_operator.\n+\t\n+\t* arm.md (movhi_insn_arch4): delete trailing white space from assembler\n+\ttemplate.\n+\n 2005-04-03  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* cfghooks.c, cfgrtl.c, modulo-sched.c, config/i386/winnt.c:"}, {"sha": "a4f914aa4c7b7d9839da9534de4ffe73431eb2cc", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 19, "deletions": 38, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ac3e311ac63e79bc0772f6c40c25a0d46f8d59f/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ac3e311ac63e79bc0772f6c40c25a0d46f8d59f/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=1ac3e311ac63e79bc0772f6c40c25a0d46f8d59f", "patch": "@@ -571,32 +571,13 @@\n   [(set_attr \"conds\" \"set\")]\n )\n \n-;; These patterns are the same ones as the two regular addsi3_compare0\n-;; patterns, except we write them slightly different - the combiner\n-;; tends to generate them this way.\n-(define_insn \"*addsi3_compare0_for_combiner\"\n-  [(set (reg:CC CC_REGNUM)\n-\t(compare:CC\n-\t (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n-\t (neg:SI (match_operand:SI 2 \"arm_add_operand\" \"rI,L\"))))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_ARM\"\n-  \"@\n-   add%?s\\\\t%0, %1, %2\n-   sub%?s\\\\t%0, %1, #%n2\"\n-  [(set_attr \"conds\" \"set\")]\n-)\n-\n-(define_insn \"*addsi3_compare0_scratch_for_combiner\"\n-  [(set (reg:CC CC_REGNUM)\n-\t(compare:CC\n-\t (match_operand:SI 0 \"s_register_operand\" \"r,r\")\n-\t (neg:SI (match_operand:SI 1 \"arm_add_operand\" \"rI,L\"))))]\n+(define_insn \"*compare_negsi_si\"\n+  [(set (reg:CC_Z CC_REGNUM)\n+\t(compare:CC_Z\n+\t (neg:SI (match_operand:SI 0 \"s_register_operand\" \"r\"))\n+\t (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n   \"TARGET_ARM\"\n-  \"@\n-   cmn%?\\\\t%0, %1\n-   cmp%?\\\\t%0, #%n1\"\n+  \"cmn%?\\\\t%1, %0\"\n   [(set_attr \"conds\" \"set\")]\n )\n \n@@ -4861,7 +4842,7 @@\n   \"@\n    mov%?\\\\t%0, %1\\\\t%@ movhi\n    mvn%?\\\\t%0, #%B1\\\\t%@ movhi\n-   str%?h\\\\t%1, %0\\\\t%@ movhi \n+   str%?h\\\\t%1, %0\\\\t%@ movhi\n    ldr%?h\\\\t%0, %1\\\\t%@ movhi\"\n   [(set_attr \"type\" \"*,*,store1,load1\")\n    (set_attr \"predicable\" \"yes\")\n@@ -5777,7 +5758,7 @@\n (define_insn \"*negated_cbranchsi4\"\n   [(set (pc)\n \t(if_then_else\n-\t (match_operator 0 \"arm_comparison_operator\"\n+\t (match_operator 0 \"equality_operator\"\n \t  [(match_operand:SI 1 \"s_register_operand\" \"l\")\n \t   (neg:SI (match_operand:SI 2 \"s_register_operand\" \"l\"))])\n \t (label_ref (match_operand 3 \"\" \"\"))\n@@ -6724,19 +6705,19 @@\n \t\t      (const_string \"alu_shift_reg\")))]\n )\n \n-(define_insn \"*cmpsi_neg_shiftsi\"\n-  [(set (reg:CC CC_REGNUM)\n-\t(compare:CC (match_operand:SI 0 \"s_register_operand\" \"r\")\n-\t\t    (neg:SI (match_operator:SI 3 \"shift_operator\"\n-\t\t\t     [(match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t\t      (match_operand:SI 2 \"arm_rhs_operand\" \"rM\")]))))]\n+(define_insn \"*cmpsi_negshiftsi_si\"\n+  [(set (reg:CC_Z CC_REGNUM)\n+\t(compare:CC_Z\n+\t (neg:SI (match_operator:SI 1 \"shift_operator\"\n+\t\t    [(match_operand:SI 2 \"s_register_operand\" \"r\")\n+\t\t     (match_operand:SI 3 \"reg_or_int_operand\" \"rM\")]))\n+\t (match_operand:SI 0 \"s_register_operand\" \"r\")))]\n   \"TARGET_ARM\"\n-  \"cmn%?\\\\t%0, %1%S3\"\n+  \"cmn%?\\\\t%0, %2%S1\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"shift\" \"1\")\n-   (set (attr \"type\") (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n-\t\t      (const_string \"alu_shift\")\n-\t\t      (const_string \"alu_shift_reg\")))]\n+   (set (attr \"type\") (if_then_else (match_operand 3 \"const_int_operand\" \"\")\n+\t\t\t\t    (const_string \"alu_shift\")\n+\t\t\t\t    (const_string \"alu_shift_reg\")))]\n )\n \n ;; Cirrus SF compare instruction"}]}