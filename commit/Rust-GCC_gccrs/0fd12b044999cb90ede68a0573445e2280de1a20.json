{"sha": "0fd12b044999cb90ede68a0573445e2280de1a20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZkMTJiMDQ0OTk5Y2I5MGVkZTY4YTA1NzM0NDVlMjI4MGRlMWEyMA==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@issan.informatik.uni-dortmund.de", "date": "1998-02-27T02:10:47Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "1998-02-27T02:10:47Z"}, "message": "m68k.md (movsf+1): Optimize moving a CONST_DOUBLE zero.\n\n\t* config/m68k/m68k.md (movsf+1): Optimize moving a CONST_DOUBLE\n\tzero.\n\nFrom-SVN: r18278", "tree": {"sha": "27190d3c408b6cfd49db318cb0cb7ce9297e85d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27190d3c408b6cfd49db318cb0cb7ce9297e85d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fd12b044999cb90ede68a0573445e2280de1a20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fd12b044999cb90ede68a0573445e2280de1a20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fd12b044999cb90ede68a0573445e2280de1a20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fd12b044999cb90ede68a0573445e2280de1a20/comments", "author": null, "committer": null, "parents": [{"sha": "acbce66755fe7b7e252103c12102ef5d8b193321", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acbce66755fe7b7e252103c12102ef5d8b193321", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acbce66755fe7b7e252103c12102ef5d8b193321"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "e4a4f9837f8ac6ede7ebdcb0dc7f25fc157e6d0e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd12b044999cb90ede68a0573445e2280de1a20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd12b044999cb90ede68a0573445e2280de1a20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0fd12b044999cb90ede68a0573445e2280de1a20", "patch": "@@ -1,3 +1,8 @@\n+Fri Feb 27 11:02:47 1998  Andreas Schwab  <schwab@issan.informatik.uni-dortmund.de>\n+\n+\t* config/m68k/m68k.md (movsf+1): Optimize moving a CONST_DOUBLE\n+\tzero.\n+\n 1998-02-26  Ken Raeburn  <raeburn@cygnus.com>\n \n \t* regclass.c (init_reg_sets): Move init of move cost tables..."}, {"sha": "183d130589db84a7bae4fa0c388dfc8157febf6a", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd12b044999cb90ede68a0573445e2280de1a20/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd12b044999cb90ede68a0573445e2280de1a20/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=0fd12b044999cb90ede68a0573445e2280de1a20", "patch": "@@ -1099,6 +1099,42 @@\n \treturn \\\"fmove%.s %1,%-\\;move%.l %+,%0\\\";\n       return \\\"fmove%.s %f1,%0\\\";\n     }\n+  if (operands[1] == CONST0_RTX (SFmode)\n+      /* clr insns on 68000 read before writing.\n+\t This isn't so on the 68010, but we have no TARGET_68010.  */\n+      && ((TARGET_68020 || TARGET_5200)\n+\t  || !(GET_CODE (operands[0]) == MEM && MEM_VOLATILE_P (operands[0]))))\n+    {\n+      if (ADDRESS_REG_P (operands[0]))\n+\t{\n+\t  /* On the '040, 'subl an,an' takes 2 clocks while lea takes only 1 */\n+\t  if (!TARGET_68040 && !TARGET_68060)\n+\t    return \\\"sub%.l %0,%0\\\";\n+\t  else\n+\t    {\n+#ifdef MOTOROLA\n+#ifdef SGS\n+\t      /* Many SGS assemblers croak on size specifiers for constants. */\n+\t      return \\\"lea 0,%0\\\";\n+#else\n+\t      return \\\"lea 0.w,%0\\\";\n+#endif\n+#else\n+\t      return \\\"lea 0:w,%0\\\";\n+#endif\n+\t    }\n+\t}\n+      /* moveq is faster on the 68000.  */\n+      if (DATA_REG_P (operands[0]) && !(TARGET_68020 || TARGET_5200))\n+\t{\n+#if defined(MOTOROLA) && !defined(CRDS)\n+\t  return \\\"moveq%.l %#0,%0\\\";\n+#else\n+\t  return \\\"moveq %#0,%0\\\";\n+#endif\n+\t}\n+      return \\\"clr%.l %0\\\";\n+    }\n   return \\\"move%.l %1,%0\\\";\n }\")\n "}]}