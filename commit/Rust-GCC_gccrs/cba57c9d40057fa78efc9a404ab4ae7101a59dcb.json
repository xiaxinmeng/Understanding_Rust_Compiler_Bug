{"sha": "cba57c9d40057fa78efc9a404ab4ae7101a59dcb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JhNTdjOWQ0MDA1N2ZhNzhlZmM5YTQwNGFiNGFlNzEwMWE1OWRjYg==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@redhat.com", "date": "2002-07-29T23:53:47Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2002-07-29T23:53:47Z"}, "message": "gty.texi (GGC Roots): Clarify that the list of syntaxes is exhaustive.\n\n\t* doc/gty.texi (GGC Roots): Clarify that the list of syntaxes\n\tis exhaustive.\n\t(Files): Improve documentation on generated source files.\n\n\t* doc/extend.texi (Translation implementation): Document what\n\tdiagnostics look like.\n\t(Identifiers implementation): Document that there's normally no\n\tlimit on identifier names.\n\t(Integers implementation): Document two's complement.\n\t(Hints implementation): Document that GCC honours 'inline', mostly.\n\t(Preprocessing directives implementation): Document that GCC\n\trequires the current time.\n\nFrom-SVN: r55857", "tree": {"sha": "9be033bfe60b1896cea27bb30921509c89d43366", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9be033bfe60b1896cea27bb30921509c89d43366"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cba57c9d40057fa78efc9a404ab4ae7101a59dcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cba57c9d40057fa78efc9a404ab4ae7101a59dcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cba57c9d40057fa78efc9a404ab4ae7101a59dcb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cba57c9d40057fa78efc9a404ab4ae7101a59dcb/comments", "author": null, "committer": null, "parents": [{"sha": "76a8ecba5ea85da902faee400bfc6655693f7f66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76a8ecba5ea85da902faee400bfc6655693f7f66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76a8ecba5ea85da902faee400bfc6655693f7f66"}], "stats": {"total": 70, "additions": 62, "deletions": 8}, "files": [{"sha": "eae13eda937ff6486c3702cb7d2362f7a0ccf743", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba57c9d40057fa78efc9a404ab4ae7101a59dcb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba57c9d40057fa78efc9a404ab4ae7101a59dcb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cba57c9d40057fa78efc9a404ab4ae7101a59dcb", "patch": "@@ -1,3 +1,18 @@\n+2002-07-29  Geoffrey Keating  <geoffk@redhat.com>\n+\n+\t* doc/gty.texi (GGC Roots): Clarify that the list of syntaxes\n+\tis exhaustive.\n+\t(Files): Improve documentation on generated source files.\n+\n+\t* doc/extend.texi (Translation implementation): Document what\n+\tdiagnostics look like.\n+\t(Identifiers implementation): Document that there's normally no\n+\tlimit on identifier names.\n+\t(Integers implementation): Document two's complement.\n+\t(Hints implementation): Document that GCC honours 'inline', mostly.\n+\t(Preprocessing directives implementation): Document that GCC\n+\trequires the current time.\n+\n 2002-07-30  Gabriel Dos Reis  <gdr@nerim.net>\n \n \t* c-pretty-print.h (struct c_pretty_print_info): Add new member."}, {"sha": "6fdf7ffcbfd196347fa25a1ecaec54d14c0990a8", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba57c9d40057fa78efc9a404ab4ae7101a59dcb/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba57c9d40057fa78efc9a404ab4ae7101a59dcb/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=cba57c9d40057fa78efc9a404ab4ae7101a59dcb", "patch": "@@ -35,6 +35,8 @@ along with the section number from the ISO/IEC 9899:1999 standard.\n @item\n @cite{How a diagnostic is identified (3.10, 5.1.1.3).}\n \n+Diagnostics consist of all the output sent to stderr by GCC.\n+\n @item\n @cite{Whether each nonempty sequence of white-space characters other than\n new-line is retained or replaced by one space character in translation\n@@ -58,6 +60,11 @@ and their correspondence to universal character names (6.4.2).}\n @item\n @cite{The number of significant initial characters in an identifier\n (5.2.4.1, 6.4.2).}\n+\n+For internal names, all characters are significant.  For external names,\n+the number of significant characters are defined by the linker; for\n+almost all targets, all characters are significant.\n+\n @end itemize\n \n @node Characters implementation\n@@ -123,6 +130,9 @@ sequence not represented in the execution character set (6.4.5).}\n two's complement, or one's complement, and whether the extraordinary value\n is a trap representation or an ordinary value (6.2.6.2).}\n \n+GCC supports only two's complement integer types, and all bit patterns\n+are ordinary values.\n+\n @item\n @cite{The rank of any extended integer type relative to another extended\n integer type with the same precision (6.3.1.1).}\n@@ -242,6 +252,11 @@ storage-class specifier are effective (6.7.1).}\n @cite{The extent to which suggestions made by using the inline function\n specifier are effective (6.7.4).}\n \n+GCC will not inline any functions if the @option{-fno-inline} option is\n+used or if @option{-O0} is used.  Otherwise, GCC may still be unable to\n+inline a function for many reasons; the @option{-Winline} option may be\n+used to determine if a function has not been inlined and why not.\n+\n @end itemize\n \n @node Structures unions enumerations and bit-fields implementation\n@@ -315,6 +330,8 @@ name (6.10.2).}\n @item\n @cite{The nesting limit for @code{#include} processing (6.10.2).}\n \n+GCC imposes a limit of 200 nested @code{#include}s.\n+\n @item\n @cite{Whether the @samp{#} operator inserts a @samp{\\} character before\n the @samp{\\} character that begins a universal character name in a\n@@ -328,6 +345,8 @@ directive (6.10.6).}\n @cite{The definitions for @code{__DATE__} and @code{__TIME__} when\n respectively, the date and time of translation are not available (6.10.8).}\n \n+GCC assumes that the date and time is always available.\n+\n @end itemize\n \n @node Library functions implementation"}, {"sha": "f854b8040478b09b85d75cb23214f50200620fa2", "filename": "gcc/doc/gty.texi", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba57c9d40057fa78efc9a404ab4ae7101a59dcb/gcc%2Fdoc%2Fgty.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba57c9d40057fa78efc9a404ab4ae7101a59dcb/gcc%2Fdoc%2Fgty.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgty.texi?ref=cba57c9d40057fa78efc9a404ab4ae7101a59dcb", "patch": "@@ -218,6 +218,14 @@ two syntaxes it accepts to indicate a root:\n @verb{|static GTY (([options])) [type] ID;|}\n @end enumerate\n \n+These are the only syntaxes that are accepted.  In particular, if you\n+want to mark a variable that is only declared as\n+@verbatim\n+int ID;\n+@end verbatim\n+or similar, you should either make it @code{static} or you should create\n+a @code{extern} declaration in a header file somewhere.\n+\n @node Files\n @section Source Files Containing Type Information\n @cindex generated files\n@@ -254,16 +262,28 @@ should be included in the @file{gtfiles} variable for such front ends.\n @end enumerate\n \n @item\n-You need to include the file that the type machinery will generate in\n-the source file you just changed.  The file will be called\n-@file{gt-@var{path}.h} where @var{path} is the pathname from the\n-@file{gcc} directory with slashes replaced by @verb{|-|}.  Don't forget\n-to mention this file as a dependency in the @file{Makefile}!\n+If the file was a header file, you'll need to check that it's included\n+in the right place to be visible to the generated files.  For a back-end\n+header file, this should be done automatically.  For a front-end header\n+file, it needs to be included by the same file that includes\n+@file{gtype-@var{lang}.h}.  For other header files, it needs to be\n+included in @file{gtype-desc.c}, which is a generated file, so add it to\n+@code{ifiles} in @code{open_base_file} in @file{gengtype.c}.  \n+\n+For source files that aren't header files, the machinery will generate a\n+header file that should be included in the source file you just changed.\n+The file will be called @file{gt-@var{path}.h} where @var{path} is the\n+pathname relative to the @file{gcc} directory with slashes replaced by\n+@verb{|-|}, so for example the header file to be included in\n+@file{objc/objc-parse.c} is called @file{gt-objc-objc-parse.c}.  The\n+generated header file should be included after everything else in the\n+source file.  Don't forget to mention this file as a dependency in the\n+@file{Makefile}!\n \n @item\n-Finally, you need to arrange to add a @file{Makefile} rule that will\n-ensure this file can be built.  This is done by making it a dependency\n-of @code{s-gtype}, like this:\n+If a new @file{gt-@var{path}.h} file is needed, you need to arrange to\n+add a @file{Makefile} rule that will ensure this file can be built.\n+This is done by making it a dependency of @code{s-gtype}, like this:\n @verbatim\n gt-path.h : s-gtype ; @true\n @end verbatim"}]}