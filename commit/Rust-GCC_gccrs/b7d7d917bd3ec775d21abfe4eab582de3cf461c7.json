{"sha": "b7d7d917bd3ec775d21abfe4eab582de3cf461c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdkN2Q5MTdiZDNlYzc3NWQyMWFiZmU0ZWFiNTgyZGUzY2Y0NjFjNw==", "commit": {"author": {"name": "Tejas Belagod", "email": "tejas.belagod@arm.com", "date": "2013-01-25T11:35:03Z"}, "committer": {"name": "Tejas Belagod", "email": "belagod@gcc.gnu.org", "date": "2013-01-25T11:35:03Z"}, "message": "aarch64-simd-builtins.def: Separate sq<r>dmulh_lane entries into lane and laneq entries.\n\n2013-01-25  Tejas Belagod  <tejas.belagod@arm.com>\n\n        * config/aarch64/aarch64-simd-builtins.def: Separate sq<r>dmulh_lane\n        entries into lane and laneq entries.\n        * config/aarch64/aarch64-simd.md (aarch64_sq<r>dmulh_lane<mode>): Remove\n        AdvSIMD scalar modes.\n        (aarch64_sq<r>dmulh_laneq<mode>): New. \n        (aarch64_sq<r>dmulh_lane<mode>): New RTL pattern for Scalar AdvSIMD\n        modes.\n        * config/aarch64/arm_neon.h: Fix all the vq<r>dmulh_lane* intrinsics'\n        builtin implementations to relfect changes in RTL in aarch64-simd.md.\n        * config/aarch64/iterators.md (VCOND): New. \n        (VCONQ): New.\n\nFrom-SVN: r195467", "tree": {"sha": "46cc3c9053ddcc8bc08ce8e8b61958dc8bee498f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46cc3c9053ddcc8bc08ce8e8b61958dc8bee498f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7d7d917bd3ec775d21abfe4eab582de3cf461c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7d7d917bd3ec775d21abfe4eab582de3cf461c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7d7d917bd3ec775d21abfe4eab582de3cf461c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7d7d917bd3ec775d21abfe4eab582de3cf461c7/comments", "author": {"login": "tejas-belagod-arm", "id": 92718852, "node_id": "U_kgDOBYbHBA", "avatar_url": "https://avatars.githubusercontent.com/u/92718852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tejas-belagod-arm", "html_url": "https://github.com/tejas-belagod-arm", "followers_url": "https://api.github.com/users/tejas-belagod-arm/followers", "following_url": "https://api.github.com/users/tejas-belagod-arm/following{/other_user}", "gists_url": "https://api.github.com/users/tejas-belagod-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/tejas-belagod-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tejas-belagod-arm/subscriptions", "organizations_url": "https://api.github.com/users/tejas-belagod-arm/orgs", "repos_url": "https://api.github.com/users/tejas-belagod-arm/repos", "events_url": "https://api.github.com/users/tejas-belagod-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/tejas-belagod-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "556f9906c548af7332f7f274f9e05cacfaeb64a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/556f9906c548af7332f7f274f9e05cacfaeb64a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/556f9906c548af7332f7f274f9e05cacfaeb64a6"}], "stats": {"total": 124, "additions": 91, "deletions": 33}, "files": [{"sha": "98d7626546e2f93bf018e85218f50167768aa010", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7d7d917bd3ec775d21abfe4eab582de3cf461c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7d7d917bd3ec775d21abfe4eab582de3cf461c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b7d7d917bd3ec775d21abfe4eab582de3cf461c7", "patch": "@@ -1,3 +1,17 @@\n+2013-01-25  Tejas Belagod  <tejas.belagod@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Separate sq<r>dmulh_lane\n+\tentries into lane and laneq entries.\n+\t* config/aarch64/aarch64-simd.md (aarch64_sq<r>dmulh_lane<mode>): Remove\n+\tAdvSIMD scalar modes.\n+\t(aarch64_sq<r>dmulh_laneq<mode>): New.\n+\t(aarch64_sq<r>dmulh_lane<mode>): New RTL pattern for Scalar AdvSIMD\n+\tmodes.\n+\t* config/aarch64/arm_neon.h: Fix all the vq<r>dmulh_lane* intrinsics'\n+\tbuiltin implementations to relfect changes in RTL in aarch64-simd.md.\n+\t* config/aarch64/iterators.md (VCOND): New.\n+\t(VCONQ): New.\n+\n 2013-01-25  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/54222"}, {"sha": "af27079958a8b0edbf99af710342ca98958a1ec5", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7d7d917bd3ec775d21abfe4eab582de3cf461c7/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7d7d917bd3ec775d21abfe4eab582de3cf461c7/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=b7d7d917bd3ec775d21abfe4eab582de3cf461c7", "patch": "@@ -142,9 +142,13 @@\n   /* Implemented by aarch64_sq<r>dmulh<mode>.  */\n   BUILTIN_VSDQ_HSI (BINOP, sqdmulh)\n   BUILTIN_VSDQ_HSI (BINOP, sqrdmulh)\n-  /* Implemented by aarch64_sq<r>dmulh_lane<mode>.  */\n-  BUILTIN_VSDQ_HSI (TERNOP, sqdmulh_lane)\n-  BUILTIN_VSDQ_HSI (TERNOP, sqrdmulh_lane)\n+  /* Implemented by aarch64_sq<r>dmulh_lane<q><mode>.  */\n+  BUILTIN_VDQHS (TERNOP, sqdmulh_lane)\n+  BUILTIN_VDQHS (TERNOP, sqdmulh_laneq)\n+  BUILTIN_VDQHS (TERNOP, sqrdmulh_lane)\n+  BUILTIN_VDQHS (TERNOP, sqrdmulh_laneq)\n+  BUILTIN_SD_HSI (TERNOP, sqdmulh_lane)\n+  BUILTIN_SD_HSI (TERNOP, sqrdmulh_lane)\n \n   BUILTIN_VSDQ_I_DI (BINOP, sshl_n)\n   BUILTIN_VSDQ_I_DI (BINOP, ushl_n)"}, {"sha": "0f0009505d888465012fa0033ffc0d2aaeaddc63", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7d7d917bd3ec775d21abfe4eab582de3cf461c7/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7d7d917bd3ec775d21abfe4eab582de3cf461c7/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=b7d7d917bd3ec775d21abfe4eab582de3cf461c7", "patch": "@@ -2210,17 +2210,49 @@\n ;; sq<r>dmulh_lane\n \n (define_insn \"aarch64_sq<r>dmulh_lane<mode>\"\n-  [(set (match_operand:VSDQ_HSI 0 \"register_operand\" \"=w\")\n-        (unspec:VSDQ_HSI\n-\t  [(match_operand:VSDQ_HSI 1 \"register_operand\" \"w\")\n+  [(set (match_operand:VDQHS 0 \"register_operand\" \"=w\")\n+        (unspec:VDQHS\n+\t  [(match_operand:VDQHS 1 \"register_operand\" \"w\")\n+           (vec_select:<VEL>\n+             (match_operand:<VCOND> 2 \"register_operand\" \"<vwx>\")\n+             (parallel [(match_operand:SI 3 \"immediate_operand\" \"i\")]))]\n+\t VQDMULH))]\n+  \"TARGET_SIMD\"\n+  \"*\n+   aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCOND>mode));\n+   return \\\"sq<r>dmulh\\\\t%0.<Vtype>, %1.<Vtype>, %2.<Vetype>[%3]\\\";\"\n+  [(set_attr \"simd_type\" \"simd_sat_mul\")\n+   (set_attr \"simd_mode\" \"<MODE>\")]\n+)\n+\n+(define_insn \"aarch64_sq<r>dmulh_laneq<mode>\"\n+  [(set (match_operand:VDQHS 0 \"register_operand\" \"=w\")\n+        (unspec:VDQHS\n+\t  [(match_operand:VDQHS 1 \"register_operand\" \"w\")\n+           (vec_select:<VEL>\n+             (match_operand:<VCONQ> 2 \"register_operand\" \"<vwx>\")\n+             (parallel [(match_operand:SI 3 \"immediate_operand\" \"i\")]))]\n+\t VQDMULH))]\n+  \"TARGET_SIMD\"\n+  \"*\n+   aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode));\n+   return \\\"sq<r>dmulh\\\\t%0.<Vtype>, %1.<Vtype>, %2.<Vetype>[%3]\\\";\"\n+  [(set_attr \"simd_type\" \"simd_sat_mul\")\n+   (set_attr \"simd_mode\" \"<MODE>\")]\n+)\n+\n+(define_insn \"aarch64_sq<r>dmulh_lane<mode>\"\n+  [(set (match_operand:SD_HSI 0 \"register_operand\" \"=w\")\n+        (unspec:SD_HSI\n+\t  [(match_operand:SD_HSI 1 \"register_operand\" \"w\")\n            (vec_select:<VEL>\n-             (match_operand:<VCON> 2 \"register_operand\" \"<vwx>\")\n+             (match_operand:<VCONQ> 2 \"register_operand\" \"<vwx>\")\n              (parallel [(match_operand:SI 3 \"immediate_operand\" \"i\")]))]\n \t VQDMULH))]\n   \"TARGET_SIMD\"\n   \"*\n-   aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCON>mode));\n-   return \\\"sq<r>dmulh\\\\t%<v>0<Vmtype>, %<v>1<Vmtype>, %2.<Vetype>[%3]\\\";\"\n+   aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode));\n+   return \\\"sq<r>dmulh\\\\t%<v>0, %<v>1, %2.<v>[%3]\\\";\"\n   [(set_attr \"simd_type\" \"simd_sat_mul\")\n    (set_attr \"simd_mode\" \"<MODE>\")]\n )"}, {"sha": "ca474033e1d02355bbec2faddfeae8535a456a88", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 16, "deletions": 24, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7d7d917bd3ec775d21abfe4eab582de3cf461c7/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7d7d917bd3ec775d21abfe4eab582de3cf461c7/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=b7d7d917bd3ec775d21abfe4eab582de3cf461c7", "patch": "@@ -18877,49 +18877,49 @@ vpaddd_s64 (int64x2_t __a)\n __extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n vqdmulh_laneq_s16 (int16x4_t __a, int16x8_t __b, const int __c)\n {\n-  return __builtin_aarch64_sqdmulh_lanev4hi (__a, __b, __c);\n+  return __builtin_aarch64_sqdmulh_laneqv4hi (__a, __b, __c);\n }\n \n __extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n vqdmulh_laneq_s32 (int32x2_t __a, int32x4_t __b, const int __c)\n {\n-  return __builtin_aarch64_sqdmulh_lanev2si (__a, __b, __c);\n+  return __builtin_aarch64_sqdmulh_laneqv2si (__a, __b, __c);\n }\n \n __extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n vqdmulhq_laneq_s16 (int16x8_t __a, int16x8_t __b, const int __c)\n {\n-  return __builtin_aarch64_sqdmulh_lanev8hi (__a, __b, __c);\n+  return __builtin_aarch64_sqdmulh_laneqv8hi (__a, __b, __c);\n }\n \n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n vqdmulhq_laneq_s32 (int32x4_t __a, int32x4_t __b, const int __c)\n {\n-  return __builtin_aarch64_sqdmulh_lanev4si (__a, __b, __c);\n+  return __builtin_aarch64_sqdmulh_laneqv4si (__a, __b, __c);\n }\n \n __extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n vqrdmulh_laneq_s16 (int16x4_t __a, int16x8_t __b, const int __c)\n {\n-  return  __builtin_aarch64_sqrdmulh_lanev4hi (__a, __b, __c);\n+  return  __builtin_aarch64_sqrdmulh_laneqv4hi (__a, __b, __c);\n }\n \n __extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n vqrdmulh_laneq_s32 (int32x2_t __a, int32x4_t __b, const int __c)\n {\n-  return __builtin_aarch64_sqrdmulh_lanev2si (__a, __b, __c);\n+  return __builtin_aarch64_sqrdmulh_laneqv2si (__a, __b, __c);\n }\n \n __extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n vqrdmulhq_laneq_s16 (int16x8_t __a, int16x8_t __b, const int __c)\n {\n-  return __builtin_aarch64_sqrdmulh_lanev8hi (__a, __b, __c);\n+  return __builtin_aarch64_sqrdmulh_laneqv8hi (__a, __b, __c);\n }\n \n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n vqrdmulhq_laneq_s32 (int32x4_t __a, int32x4_t __b, const int __c)\n {\n-  return __builtin_aarch64_sqrdmulh_lanev4si (__a, __b, __c);\n+  return __builtin_aarch64_sqrdmulh_laneqv4si (__a, __b, __c);\n }\n \n /* Table intrinsics.  */\n@@ -21974,29 +21974,25 @@ vqdmlsls_lane_s32 (int64x1_t __a, int32x1_t __b, int32x4_t __c, const int __d)\n __extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n vqdmulh_lane_s16 (int16x4_t __a, int16x4_t __b, const int __c)\n {\n-  int16x8_t __tmp = vcombine_s16 (__b, vcreate_s16 (INT64_C (0)));\n-  return __builtin_aarch64_sqdmulh_lanev4hi (__a, __tmp, __c);\n+  return __builtin_aarch64_sqdmulh_lanev4hi (__a, __b, __c);\n }\n \n __extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n vqdmulh_lane_s32 (int32x2_t __a, int32x2_t __b, const int __c)\n {\n-  int32x4_t __tmp = vcombine_s32 (__b, vcreate_s32 (INT64_C (0)));\n-  return __builtin_aarch64_sqdmulh_lanev2si (__a, __tmp, __c);\n+  return __builtin_aarch64_sqdmulh_lanev2si (__a, __b, __c);\n }\n \n __extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n vqdmulhq_lane_s16 (int16x8_t __a, int16x4_t __b, const int __c)\n {\n-  int16x8_t __tmp = vcombine_s16 (__b, vcreate_s16 (INT64_C (0)));\n-  return __builtin_aarch64_sqdmulh_lanev8hi (__a, __tmp, __c);\n+  return __builtin_aarch64_sqdmulh_lanev8hi (__a, __b, __c);\n }\n \n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n vqdmulhq_lane_s32 (int32x4_t __a, int32x2_t __b, const int __c)\n {\n-  int32x4_t __tmp = vcombine_s32 (__b, vcreate_s32 (INT64_C (0)));\n-  return __builtin_aarch64_sqdmulh_lanev4si (__a, __tmp, __c);\n+  return __builtin_aarch64_sqdmulh_lanev4si (__a, __b, __c);\n }\n \n __extension__ static __inline int16x1_t __attribute__ ((__always_inline__))\n@@ -22290,29 +22286,25 @@ vqnegs_s32 (int32x1_t __a)\n __extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n vqrdmulh_lane_s16 (int16x4_t __a, int16x4_t __b, const int __c)\n {\n-  int16x8_t __tmp = vcombine_s16 (__b, vcreate_s16 (INT64_C (0)));\n-  return  __builtin_aarch64_sqrdmulh_lanev4hi (__a, __tmp, __c);\n+  return  __builtin_aarch64_sqrdmulh_lanev4hi (__a, __b, __c);\n }\n \n __extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n vqrdmulh_lane_s32 (int32x2_t __a, int32x2_t __b, const int __c)\n {\n-  int32x4_t __tmp = vcombine_s32 (__b, vcreate_s32 (INT64_C (0)));\n-  return __builtin_aarch64_sqrdmulh_lanev2si (__a, __tmp, __c);\n+  return __builtin_aarch64_sqrdmulh_lanev2si (__a, __b, __c);\n }\n \n __extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n vqrdmulhq_lane_s16 (int16x8_t __a, int16x4_t __b, const int __c)\n {\n-  int16x8_t __tmp = vcombine_s16 (__b, vcreate_s16 (INT64_C (0)));\n-  return __builtin_aarch64_sqrdmulh_lanev8hi (__a, __tmp, __c);\n+  return __builtin_aarch64_sqrdmulh_lanev8hi (__a, __b, __c);\n }\n \n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n vqrdmulhq_lane_s32 (int32x4_t __a, int32x2_t __b, const int __c)\n {\n-  int32x4_t __tmp = vcombine_s32 (__b, vcreate_s32 (INT64_C (0)));\n-  return __builtin_aarch64_sqrdmulh_lanev4si (__a, __tmp, __c);\n+  return __builtin_aarch64_sqrdmulh_lanev4si (__a, __b, __c);\n }\n \n __extension__ static __inline int16x1_t __attribute__ ((__always_inline__))"}, {"sha": "ce81ac5ce875dca597caaec16720a47fa7f169d9", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7d7d917bd3ec775d21abfe4eab582de3cf461c7/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7d7d917bd3ec775d21abfe4eab582de3cf461c7/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=b7d7d917bd3ec775d21abfe4eab582de3cf461c7", "patch": "@@ -339,6 +339,22 @@\n \t\t\t(SI   \"SI\") (HI   \"HI\")\n \t\t\t(QI   \"QI\")])\n \n+;; Define container mode for lane selection.\n+(define_mode_attr VCOND [(V4HI \"V4HI\") (V8HI \"V4HI\")\n+\t\t\t (V2SI \"V2SI\") (V4SI \"V2SI\")\n+\t\t\t (DI   \"DI\") (V2DI \"DI\")\n+\t\t\t (V2SF \"V2SF\") (V4SF \"V2SF\")\n+\t\t\t (V2DF \"DF\")])\n+\n+;; Define container mode for lane selection.\n+(define_mode_attr VCONQ [(V8QI \"V16QI\") (V16QI \"V16QI\")\n+\t\t\t (V4HI \"V8HI\") (V8HI \"V8HI\")\n+\t\t\t (V2SI \"V4SI\") (V4SI \"V4SI\")\n+\t\t\t (DI   \"V2DI\") (V2DI \"V2DI\")\n+\t\t\t (V2SF \"V2SF\") (V4SF \"V4SF\")\n+\t\t\t (V2DF \"V2DF\") (SI   \"V4SI\")\n+\t\t\t (HI   \"V8HI\") (QI   \"V16QI\")])\n+\n ;; Define container mode for lane selection.\n (define_mode_attr VCON [(V8QI \"V16QI\") (V16QI \"V16QI\")\n \t\t\t(V4HI \"V8HI\") (V8HI \"V8HI\")"}]}