{"sha": "3ed8593d458fa2236988c3243547e99d2f46f7e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VkODU5M2Q0NThmYTIyMzY5ODhjMzI0MzU0N2U5OWQyZjQ2ZjdlNw==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2005-07-09T15:45:09Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2005-07-09T15:45:09Z"}, "message": "cp-lang.c (shadowed_var_for_decl, [...]): Move over to cp-objcp-common.c.\n\n2005-07-09  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        * cp-lang.c (shadowed_var_for_decl, decl_shadowed_for_var_lookup,\n        decl_shadowed_for_var_insert): Move over to cp-objcp-common.c.\n        (cp_init_ts): Call init_shadowed_var_for_decl.\n        Remove include of gt-cp-cp-lang.h.\n        * cp-objcp-common.c (shadowed_var_for_decl,\n        decl_shadowed_for_var_lookup, decl_shadowed_for_var_insert): Moved from\n        cp-lang.c.\n        (init_shadowed_var_for_decl): New function to initialize\n        shadowed_var_for_decl.\n        Include gt-cp-cp-objcp-common.h.\n        * Make-lang.in (gt-cp-lang.h): Remove.\n        (gt-cp-cp-objcp-common.h): Add.\n        (cp/cp-lang.o): Remove dependancy on gt-cp-lang.h.\n        (cp/cp-objcp-common.o): Add dependancy on gt-cp-cp-objcp-common.h.\n        * config-lang.in (gtfiles): Remove cp-lang.c and Add cp-objcp-common.c.\n        * cp-tree (init_shadowed_var_for_decl): Add prototype.\n\n2005-07-09  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        * config-lang.in (gtfiles): Add cp-objcp-common.c.\n        * objcp-lang.c (objcxx_init_ts): New function.\n        (LANG_HOOKS_INIT_TS): Define.\n\nFrom-SVN: r101830", "tree": {"sha": "4ffe800b4c33c0db29f348e405ee0827f9871b15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ffe800b4c33c0db29f348e405ee0827f9871b15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ed8593d458fa2236988c3243547e99d2f46f7e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ed8593d458fa2236988c3243547e99d2f46f7e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ed8593d458fa2236988c3243547e99d2f46f7e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ed8593d458fa2236988c3243547e99d2f46f7e7/comments", "author": null, "committer": null, "parents": [{"sha": "999a06a0da6405ea441a5079733906ffd3a441d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/999a06a0da6405ea441a5079733906ffd3a441d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/999a06a0da6405ea441a5079733906ffd3a441d4"}], "stats": {"total": 178, "additions": 135, "deletions": 43}, "files": [{"sha": "75da1b34e5c0a90ffe4d08587bd9583c337c078c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed8593d458fa2236988c3243547e99d2f46f7e7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed8593d458fa2236988c3243547e99d2f46f7e7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3ed8593d458fa2236988c3243547e99d2f46f7e7", "patch": "@@ -1,3 +1,22 @@\n+2005-07-09  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\t* cp-lang.c (shadowed_var_for_decl, decl_shadowed_for_var_lookup,\n+\tdecl_shadowed_for_var_insert): Move over to cp-objcp-common.c.\n+\t(cp_init_ts): Call init_shadowed_var_for_decl.\n+\tRemove include of gt-cp-cp-lang.h.\n+\t* cp-objcp-common.c (shadowed_var_for_decl,\n+\tdecl_shadowed_for_var_lookup, decl_shadowed_for_var_insert): Moved from\n+\tcp-lang.c.\n+\t(init_shadowed_var_for_decl): New function to initialize\n+\tshadowed_var_for_decl.\n+\tInclude gt-cp-cp-objcp-common.h.\n+\t* Make-lang.in (gt-cp-lang.h): Remove.\n+\t(gt-cp-cp-objcp-common.h): Add.\n+\t(cp/cp-lang.o): Remove dependancy on gt-cp-lang.h.\n+\t(cp/cp-objcp-common.o): Add dependancy on gt-cp-cp-objcp-common.h.\n+\t* config-lang.in (gtfiles): Remove cp-lang.c and Add cp-objcp-common.c.\n+\t* cp-tree (init_shadowed_var_for_decl): Add prototype.\n+\n 2005-07-08  Daniel Berlin  <dberlin@dberlin.org>\n \t\n \t* Make-lang.in: Add gt-cp-lang.h."}, {"sha": "7b9b7d9046ef67d6fa41457645e7148de3201183", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed8593d458fa2236988c3243547e99d2f46f7e7/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed8593d458fa2236988c3243547e99d2f46f7e7/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=3ed8593d458fa2236988c3243547e99d2f46f7e7", "patch": "@@ -110,9 +110,9 @@ $(srcdir)/cp/cfns.h: $(srcdir)/cp/cfns.gperf\n \t\t$(srcdir)/cp/cfns.gperf > $(srcdir)/cp/cfns.h\n \n gtype-cp.h gt-cp-call.h gt-cp-decl.h gt-cp-decl2.h : s-gtype; @true\n-gt-cp-pt.h gt-cp-repo.h gt-cp-parser.h gt-cp-method.h gt-cp-lang.h : s-gtype; @true\n+gt-cp-pt.h gt-cp-repo.h gt-cp-parser.h gt-cp-method.h : s-gtype; @true\n gt-cp-tree.h gt-cp-mangle.h gt-cp-name-lookup.h gt-cp-typeck2.h: s-gtype; @true\n-gt-cp-rtti.h: s-gtype ; @true\n+gt-cp-rtti.h gt-cp-cp-objcp-common.h: s-gtype ; @true\n \n #\f\n # Build hooks:\n@@ -237,7 +237,7 @@ cp/lex.o: cp/lex.c $(CXX_TREE_H) $(TM_H) flags.h \\\n   c-pragma.h toplev.h output.h input.h cp/operators.def $(TM_P_H)\n cp/cp-lang.o: cp/cp-lang.c $(CXX_TREE_H) $(TM_H) toplev.h debug.h langhooks.h \\\n   $(LANGHOOKS_DEF_H) c-common.h gtype-cp.h \\\n-  $(DIAGNOSTIC_H) cp/cp-objcp-common.h gt-cp-lang.h\n+  $(DIAGNOSTIC_H) cp/cp-objcp-common.h\n cp/decl.o: cp/decl.c $(CXX_TREE_H) $(TM_H) flags.h cp/decl.h \\\n   output.h $(EXPR_H) except.h toplev.h $(HASHTAB_H) $(RTL_H) \\\n   cp/operators.def $(TM_P_H) tree-inline.h diagnostic.h c-pragma.h \\\n@@ -248,7 +248,7 @@ cp/decl2.o: cp/decl2.c $(CXX_TREE_H) $(TM_H) flags.h cp/decl.h $(EXPR_H) \\\n cp/cp-objcp-common.o : cp/cp-objcp-common.c $(CONFIG_H) $(SYSTEM_H) \\\n   coretypes.h $(TM_H) $(TREE_H) $(CXX_TREE_H) c-common.h toplev.h langhooks.h \\\n   $(LANGHOOKS_DEF_H) $(DIAGNOSTIC_H) debug.h $(CXX_PRETTY_PRINT_H) \\\n-  cp/cp-objcp-common.h\n+  cp/cp-objcp-common.h gt-cp-cp-objcp-common.h\n cp/typeck2.o: cp/typeck2.c $(CXX_TREE_H) $(TM_H) flags.h toplev.h output.h \\\n   $(TM_P_H) diagnostic.h gt-cp-typeck2.h\n cp/typeck.o: cp/typeck.c $(CXX_TREE_H) $(TM_H) flags.h $(RTL_H) $(EXPR_H) \\"}, {"sha": "127b23709eef82edd94d4a82c5b08689cc08f687", "filename": "gcc/cp/config-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed8593d458fa2236988c3243547e99d2f46f7e7/gcc%2Fcp%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed8593d458fa2236988c3243547e99d2f46f7e7/gcc%2Fcp%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconfig-lang.in?ref=3ed8593d458fa2236988c3243547e99d2f46f7e7", "patch": "@@ -34,4 +34,4 @@ stagestuff=\"g++\\$(exeext) g++-cross\\$(exeext) cc1plus\\$(exeext)\"\n \n target_libs=\"target-libstdc++-v3\"\n \n-gtfiles=\"\\$(srcdir)/cp/rtti.c \\$(srcdir)/cp/mangle.c \\$(srcdir)/cp/name-lookup.h \\$(srcdir)/cp/name-lookup.c \\$(srcdir)/cp/cp-tree.h \\$(srcdir)/cp/decl.h \\$(srcdir)/cp/call.c \\$(srcdir)/cp/decl.c \\$(srcdir)/cp/decl2.c \\$(srcdir)/cp/pt.c \\$(srcdir)/cp/repo.c \\$(srcdir)/cp/semantics.c \\$(srcdir)/cp/tree.c \\$(srcdir)/cp/parser.c \\$(srcdir)/cp/method.c \\$(srcdir)/cp/typeck2.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-lex.c \\$(srcdir)/c-pragma.c \\$(srcdir)/cp/class.c \\$(srcdir)/cp/cp-lang.c\"\n+gtfiles=\"\\$(srcdir)/cp/rtti.c \\$(srcdir)/cp/mangle.c \\$(srcdir)/cp/name-lookup.h \\$(srcdir)/cp/name-lookup.c \\$(srcdir)/cp/cp-tree.h \\$(srcdir)/cp/decl.h \\$(srcdir)/cp/call.c \\$(srcdir)/cp/decl.c \\$(srcdir)/cp/decl2.c \\$(srcdir)/cp/pt.c \\$(srcdir)/cp/repo.c \\$(srcdir)/cp/semantics.c \\$(srcdir)/cp/tree.c \\$(srcdir)/cp/parser.c \\$(srcdir)/cp/method.c \\$(srcdir)/cp/typeck2.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-lex.c \\$(srcdir)/c-pragma.c \\$(srcdir)/cp/class.c \\$(srcdir)/cp/cp-objcp-common.c\""}, {"sha": "c79486a0cfce966a5d0e4cbd1ed9a1b3a321e62c", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 1, "deletions": 37, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed8593d458fa2236988c3243547e99d2f46f7e7/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed8593d458fa2236988c3243547e99d2f46f7e7/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=3ed8593d458fa2236988c3243547e99d2f46f7e7", "patch": "@@ -110,9 +110,6 @@ objcp_tsubst_copy_and_build (tree t ATTRIBUTE_UNUSED,\n   return NULL_TREE;\n }\n \n-static GTY ((if_marked (\"tree_map_marked_p\"), param_is (struct tree_map))) \n-     htab_t shadowed_var_for_decl;\n-\n \n static void\n cp_init_ts (void)\n@@ -142,40 +139,8 @@ cp_init_ts (void)\n   tree_contains_struct[TEMPLATE_DECL][TS_DECL_MINIMAL] = 1;\n   tree_contains_struct[ALIAS_DECL][TS_DECL_MINIMAL] = 1;\n \n-  shadowed_var_for_decl = htab_create_ggc (512, tree_map_hash,\n-\t\t\t\t\t   tree_map_eq, 0);\n-\n-}\n-\n-/* Lookup a shadowed var for FROM, and return it if we find one.  */\n-\n-tree \n-decl_shadowed_for_var_lookup (tree from)\n-{\n-  struct tree_map *h, in;\n-  in.from = from;\n-\n-  h = htab_find_with_hash (shadowed_var_for_decl, &in, \n-\t\t\t   htab_hash_pointer (from));\n-  if (h)\n-    return h->to;\n-  return NULL_TREE;\n-}\n-\n-/* Insert a mapping FROM->TO in the shadowed var hashtable.  */\n+  init_shadowed_var_for_decl ();\n \n-void\n-decl_shadowed_for_var_insert (tree from, tree to)\n-{\n-  struct tree_map *h;\n-  void **loc;\n-\n-  h = ggc_alloc (sizeof (struct tree_map));\n-  h->hash = htab_hash_pointer (from);\n-  h->from = from;\n-  h->to = to;\n-  loc = htab_find_slot_with_hash (shadowed_var_for_decl, h, h->hash, INSERT);\n-  *(struct tree_map **) loc = h;\n }\n \n void\n@@ -184,5 +149,4 @@ finish_file (void)\n   cp_finish_file ();\n }\n \n-#include \"gt-cp-cp-lang.h\"\n #include \"gtype-cp.h\""}, {"sha": "43a7576bcd42d1175d85046909d7a48d26d7e010", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed8593d458fa2236988c3243547e99d2f46f7e7/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed8593d458fa2236988c3243547e99d2f46f7e7/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=3ed8593d458fa2236988c3243547e99d2f46f7e7", "patch": "@@ -202,3 +202,47 @@ has_c_linkage (tree decl)\n {\n   return DECL_EXTERN_C_P (decl);\n }\n+\n+static GTY ((if_marked (\"tree_map_marked_p\"), param_is (struct tree_map))) \n+     htab_t shadowed_var_for_decl;\n+\n+/* Lookup a shadowed var for FROM, and return it if we find one.  */\n+\n+tree \n+decl_shadowed_for_var_lookup (tree from)\n+{\n+  struct tree_map *h, in;\n+  in.from = from;\n+\n+  h = htab_find_with_hash (shadowed_var_for_decl, &in, \n+\t\t\t   htab_hash_pointer (from));\n+  if (h)\n+    return h->to;\n+  return NULL_TREE;\n+}\n+\n+/* Insert a mapping FROM->TO in the shadowed var hashtable.  */\n+\n+void\n+decl_shadowed_for_var_insert (tree from, tree to)\n+{\n+  struct tree_map *h;\n+  void **loc;\n+\n+  h = ggc_alloc (sizeof (struct tree_map));\n+  h->hash = htab_hash_pointer (from);\n+  h->from = from;\n+  h->to = to;\n+  loc = htab_find_slot_with_hash (shadowed_var_for_decl, h, h->hash, INSERT);\n+  *(struct tree_map **) loc = h;\n+}\n+\n+void\n+init_shadowed_var_for_decl (void)\n+{\n+  shadowed_var_for_decl = htab_create_ggc (512, tree_map_hash,\n+\t\t\t\t\t   tree_map_eq, 0);\n+}\n+\n+\n+#include \"gt-cp-cp-objcp-common.h\""}, {"sha": "db70017f5d2dfabf59e6c080412198865f94e46a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed8593d458fa2236988c3243547e99d2f46f7e7/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed8593d458fa2236988c3243547e99d2f46f7e7/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3ed8593d458fa2236988c3243547e99d2f46f7e7", "patch": "@@ -4365,6 +4365,7 @@ extern size_t cp_tree_size\t\t\t(enum tree_code);\n extern bool cp_var_mod_type_p\t\t\t(tree, tree);\n extern void cxx_initialize_diagnostics\t\t(struct diagnostic_context *);\n extern int cxx_types_compatible_p\t\t(tree, tree);\n+extern void init_shadowed_var_for_decl\t\t(void);\n \n /* in cp-gimplify.c */\n extern int cp_gimplify_expr\t\t\t(tree *, tree *, tree *);"}, {"sha": "7c602686da93f335d3e13f8a385f7c394192f259", "filename": "gcc/objcp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed8593d458fa2236988c3243547e99d2f46f7e7/gcc%2Fobjcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed8593d458fa2236988c3243547e99d2f46f7e7/gcc%2Fobjcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FChangeLog?ref=3ed8593d458fa2236988c3243547e99d2f46f7e7", "patch": "@@ -1,3 +1,9 @@\n+2005-07-09  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\t* config-lang.in (gtfiles): Add cp-objcp-common.c.\n+\t* objcp-lang.c (objcxx_init_ts): New function.\n+\t(LANG_HOOKS_INIT_TS): Define.\n+\n 2005-07-03  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* Make-lang.in (cc1plus-checksum.c): Use"}, {"sha": "f83df3055e302a5e5fb63b1556a3d593d62c67cb", "filename": "gcc/objcp/config-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed8593d458fa2236988c3243547e99d2f46f7e7/gcc%2Fobjcp%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed8593d458fa2236988c3243547e99d2f46f7e7/gcc%2Fobjcp%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2Fconfig-lang.in?ref=3ed8593d458fa2236988c3243547e99d2f46f7e7", "patch": "@@ -40,4 +40,4 @@ build_by_default=\"no\"\n # libobjc).\n lang_requires=\"objc c++\"\n \n-gtfiles=\"\\$(srcdir)/objcp/objcp-decl.c \\$(srcdir)/objc/objc-act.c \\$(srcdir)/objc/objc-act.h \\$(srcdir)/cp/rtti.c \\$(srcdir)/cp/mangle.c \\$(srcdir)/cp/name-lookup.h \\$(srcdir)/cp/name-lookup.c \\$(srcdir)/cp/cp-tree.h \\$(srcdir)/cp/decl.h \\$(srcdir)/cp/call.c \\$(srcdir)/cp/decl.c \\$(srcdir)/cp/decl2.c \\$(srcdir)/cp/pt.c \\$(srcdir)/cp/repo.c \\$(srcdir)/cp/semantics.c \\$(srcdir)/cp/tree.c \\$(srcdir)/cp/parser.c \\$(srcdir)/cp/method.c \\$(srcdir)/cp/typeck2.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-lex.c \\$(srcdir)/c-pragma.c\"\n+gtfiles=\"\\$(srcdir)/objcp/objcp-decl.c \\$(srcdir)/objc/objc-act.c \\$(srcdir)/objc/objc-act.h \\$(srcdir)/cp/rtti.c \\$(srcdir)/cp/mangle.c \\$(srcdir)/cp/name-lookup.h \\$(srcdir)/cp/name-lookup.c \\$(srcdir)/cp/cp-tree.h \\$(srcdir)/cp/decl.h \\$(srcdir)/cp/call.c \\$(srcdir)/cp/decl.c \\$(srcdir)/cp/decl2.c \\$(srcdir)/cp/pt.c \\$(srcdir)/cp/repo.c \\$(srcdir)/cp/semantics.c \\$(srcdir)/cp/tree.c \\$(srcdir)/cp/parser.c \\$(srcdir)/cp/method.c \\$(srcdir)/cp/typeck2.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-lex.c \\$(srcdir)/c-pragma.c \\$(srcdir)/cp/cp-objcp-common.c\""}, {"sha": "2e50bdeccaf8c5a1bce974cb2188aa60bbda26e9", "filename": "gcc/objcp/objcp-lang.c", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed8593d458fa2236988c3243547e99d2f46f7e7/gcc%2Fobjcp%2Fobjcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed8593d458fa2236988c3243547e99d2f46f7e7/gcc%2Fobjcp%2Fobjcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2Fobjcp-lang.c?ref=3ed8593d458fa2236988c3243547e99d2f46f7e7", "patch": "@@ -35,6 +35,7 @@ Boston, MA 02110-1301, USA.  */\n #include \"cp-objcp-common.h\"\n \n enum c_language_kind c_language = clk_objcxx;\n+static void objcxx_init_ts (void);\n \n /* Lang hooks common to C++ and ObjC++ are declared in cp/cp-objcp-common.h;\n    consequently, there should be very few hooks below.  */\n@@ -49,6 +50,9 @@ enum c_language_kind c_language = clk_objcxx;\n #define LANG_HOOKS_GIMPLIFY_EXPR objc_gimplify_expr\n #undef LANG_HOOKS_GET_CALLEE_FNDECL\n #define LANG_HOOKS_GET_CALLEE_FNDECL\tobjc_get_callee_fndecl\n+#undef LANG_HOOKS_INIT_TS\n+#define LANG_HOOKS_INIT_TS objcxx_init_ts\n+\n /* Each front end provides its own lang hook initializer.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n@@ -133,6 +137,60 @@ objcp_tsubst_copy_and_build (tree t, tree args, tsubst_flags_t complain,\n #undef RECURSE\n }\n \n+static void\n+objcxx_init_ts (void)\n+{\n+  /* objc decls */\n+  tree_contains_struct[CLASS_METHOD_DECL][TS_DECL_NON_COMMON] = 1;\n+  tree_contains_struct[INSTANCE_METHOD_DECL][TS_DECL_NON_COMMON] = 1;\n+  tree_contains_struct[KEYWORD_DECL][TS_DECL_NON_COMMON] = 1;\n+  \n+  tree_contains_struct[CLASS_METHOD_DECL][TS_DECL_WITH_VIS] = 1;\n+  tree_contains_struct[INSTANCE_METHOD_DECL][TS_DECL_WITH_VIS] = 1;\n+  tree_contains_struct[KEYWORD_DECL][TS_DECL_WITH_VIS] = 1;\n+\n+  tree_contains_struct[CLASS_METHOD_DECL][TS_DECL_WRTL] = 1;\n+  tree_contains_struct[INSTANCE_METHOD_DECL][TS_DECL_WRTL] = 1;\n+  tree_contains_struct[KEYWORD_DECL][TS_DECL_WRTL] = 1;\n+  \n+  tree_contains_struct[CLASS_METHOD_DECL][TS_DECL_MINIMAL] = 1;\n+  tree_contains_struct[INSTANCE_METHOD_DECL][TS_DECL_MINIMAL] = 1;\n+  tree_contains_struct[KEYWORD_DECL][TS_DECL_MINIMAL] = 1;\n+  \n+  tree_contains_struct[CLASS_METHOD_DECL][TS_DECL_COMMON] = 1;\n+  tree_contains_struct[INSTANCE_METHOD_DECL][TS_DECL_COMMON] = 1;\n+  tree_contains_struct[KEYWORD_DECL][TS_DECL_COMMON] = 1;\n+  \n+  /* C++ decls */\n+  tree_contains_struct[NAMESPACE_DECL][TS_DECL_NON_COMMON] = 1;\n+  tree_contains_struct[USING_DECL][TS_DECL_NON_COMMON] = 1;\n+  tree_contains_struct[TEMPLATE_DECL][TS_DECL_NON_COMMON] = 1;\n+  tree_contains_struct[ALIAS_DECL][TS_DECL_NON_COMMON] = 1;\n+\n+  tree_contains_struct[NAMESPACE_DECL][TS_DECL_WITH_VIS] = 1;\n+  tree_contains_struct[USING_DECL][TS_DECL_WITH_VIS] = 1;\n+  tree_contains_struct[TEMPLATE_DECL][TS_DECL_WITH_VIS] = 1;\n+  tree_contains_struct[ALIAS_DECL][TS_DECL_WITH_VIS] = 1;\n+\n+  tree_contains_struct[NAMESPACE_DECL][TS_DECL_WRTL] = 1;\n+  tree_contains_struct[USING_DECL][TS_DECL_WRTL] = 1;\n+  tree_contains_struct[TEMPLATE_DECL][TS_DECL_WRTL] = 1;\n+  tree_contains_struct[ALIAS_DECL][TS_DECL_WRTL] = 1;\n+  \n+  tree_contains_struct[NAMESPACE_DECL][TS_DECL_COMMON] = 1;\n+  tree_contains_struct[USING_DECL][TS_DECL_COMMON] = 1;\n+  tree_contains_struct[TEMPLATE_DECL][TS_DECL_COMMON] = 1;\n+  tree_contains_struct[ALIAS_DECL][TS_DECL_COMMON] = 1;\n+ \n+  tree_contains_struct[NAMESPACE_DECL][TS_DECL_MINIMAL] = 1;\n+  tree_contains_struct[USING_DECL][TS_DECL_MINIMAL] = 1;\n+  tree_contains_struct[TEMPLATE_DECL][TS_DECL_MINIMAL] = 1;\n+  tree_contains_struct[ALIAS_DECL][TS_DECL_MINIMAL] = 1;\n+  \n+  init_shadowed_var_for_decl ();\n+}\n+\n+\n void\n finish_file (void)\n {"}]}