{"sha": "c89503d957f13f7f0a5eeeab1326048c455d9533", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg5NTAzZDk1N2YxM2Y3ZjBhNWVlZWFiMTMyNjA0OGM0NTVkOTUzMw==", "commit": {"author": {"name": "Prathamesh Kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2019-06-03T11:09:41Z"}, "committer": {"name": "Prathamesh Kulkarni", "email": "prathamesh3492@gcc.gnu.org", "date": "2019-06-03T11:09:41Z"}, "message": "target-supports.exp (add_options_for_aarch64_sve): New procedure.\n\n2019-06-03  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n\n\t* lib/target-supports.exp (add_options_for_aarch64_sve): New procedure.\n\t(aarch64_sve_hw_bits): Call add_options_for_aarch64_sve.\n\t(check_effective_target_aarch64_sve_hw): Likewise.\n\nFrom-SVN: r271862", "tree": {"sha": "482dfe5a567cbe443be3af23ef96e3050d17af0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/482dfe5a567cbe443be3af23ef96e3050d17af0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c89503d957f13f7f0a5eeeab1326048c455d9533", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c89503d957f13f7f0a5eeeab1326048c455d9533", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c89503d957f13f7f0a5eeeab1326048c455d9533", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c89503d957f13f7f0a5eeeab1326048c455d9533/comments", "author": null, "committer": null, "parents": [{"sha": "3fa97a0b3e233d7303aae2090c608480fead8e8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa97a0b3e233d7303aae2090c608480fead8e8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fa97a0b3e233d7303aae2090c608480fead8e8a"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "999bdc25db892a1e62b42f34a12d86737058c8ca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89503d957f13f7f0a5eeeab1326048c455d9533/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89503d957f13f7f0a5eeeab1326048c455d9533/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c89503d957f13f7f0a5eeeab1326048c455d9533", "patch": "@@ -1,3 +1,9 @@\n+2019-06-03  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* lib/target-supports.exp (add_options_for_aarch64_sve): New procedure.\n+\t(aarch64_sve_hw_bits): Call add_options_for_aarch64_sve.\n+\t(check_effective_target_aarch64_sve_hw): Likewise.\n+\n 2019-06-03  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/alias-access-path-1.c: Scan fre1."}, {"sha": "0d3d9f452957adc249f0c0063319a466cc2a8fd8", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c89503d957f13f7f0a5eeeab1326048c455d9533/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c89503d957f13f7f0a5eeeab1326048c455d9533/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=c89503d957f13f7f0a5eeeab1326048c455d9533", "patch": "@@ -3883,6 +3883,13 @@ proc add_options_for_arm_neon_softfp_fp16 { flags } {\n     return \"$flags $et_arm_neon_softfp_fp16_flags\"\n }\n \n+proc add_options_for_aarch64_sve { flags } {\n+    if { ![istarget aarch64*-*-*] || [check_effective_target_aarch64_sve] } {\n+        return \"$flags\"\n+    }\n+    return \"$flags -march=armv8.2-a+sve\"\n+}\n+\n # Return 1 if this is an ARM target supporting the FP16 alternative\n # format.  Some multilibs may be incompatible with the options needed.  Also\n # set et_arm_neon_fp16_flags to the best options to add.\n@@ -4360,7 +4367,7 @@ proc check_effective_target_aarch64_sve_hw { } {\n \t  asm volatile (\"ptrue p0.b\");\n \t  return 0;\n \t}\n-    }]\n+    } [add_options_for_aarch64_sve \"\"]]\n }\n \n # Return true if this is an AArch64 target that can run SVE2 code.\n@@ -4396,7 +4403,7 @@ proc aarch64_sve_hw_bits { bits } {\n \t    __builtin_abort ();\n \t  return 0;\n \t}\n-    }]]\n+    }] [add_options_for_aarch64_sve \"\"]]\n }\n \n # Return true if this is an AArch64 target that can run SVE code and"}]}