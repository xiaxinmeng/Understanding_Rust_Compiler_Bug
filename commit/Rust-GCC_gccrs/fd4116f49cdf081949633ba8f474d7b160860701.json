{"sha": "fd4116f49cdf081949633ba8f474d7b160860701", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ0MTE2ZjQ5Y2RmMDgxOTQ5NjMzYmE4ZjQ3NGQ3YjE2MDg2MDcwMQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-04-10T16:33:47Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-04-10T16:33:47Z"}, "message": "c-common.c (warn_if_unused_value): Move definition to here.\n\n2012-04-10  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* c-family/c-common.c (warn_if_unused_value): Move definition to here.\n\t* tree.h (warn_if_unused_value): Move declaration from here.\n\t* c-family/c-common.h (warn_if_unused_value): Move declaration to here.\n\t* cp/cvt.c (convert_to_void): Update comment.\n\t* stmt.c (warn_if_unused_value): Move definition from here.\n\nFrom-SVN: r186287", "tree": {"sha": "a263fcd5e0513ef5acd316e056419a84c1daad7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a263fcd5e0513ef5acd316e056419a84c1daad7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd4116f49cdf081949633ba8f474d7b160860701", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd4116f49cdf081949633ba8f474d7b160860701", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd4116f49cdf081949633ba8f474d7b160860701", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd4116f49cdf081949633ba8f474d7b160860701/comments", "author": null, "committer": null, "parents": [{"sha": "408baa0b1643c3fcab1ac6a7c078bd37675ab017", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/408baa0b1643c3fcab1ac6a7c078bd37675ab017", "html_url": "https://github.com/Rust-GCC/gccrs/commit/408baa0b1643c3fcab1ac6a7c078bd37675ab017"}], "stats": {"total": 210, "additions": 112, "deletions": 98}, "files": [{"sha": "cc84f50f3db819ec893ad0c35468b04f81a830bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd4116f49cdf081949633ba8f474d7b160860701/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd4116f49cdf081949633ba8f474d7b160860701/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd4116f49cdf081949633ba8f474d7b160860701", "patch": "@@ -1,3 +1,8 @@\n+2012-04-10  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* tree.h (warn_if_unused_value): Move declaration from here.\n+\t* stmt.c (warn_if_unused_value): Move definition from here.\n+\n 2010-04-10  Michael Matz  <matz@suse.de>\n \n \t* tree-vectorizer.h (_loop_vec_info.strided_stores): Rename to"}, {"sha": "558c6a736e97ca7d38b82fbf5ba1442e9edd5d1e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd4116f49cdf081949633ba8f474d7b160860701/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd4116f49cdf081949633ba8f474d7b160860701/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=fd4116f49cdf081949633ba8f474d7b160860701", "patch": "@@ -1,3 +1,8 @@\n+2012-04-10  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* c-common.c (warn_if_unused_value): Move definition to here.\n+\t* c-common.h (warn_if_unused_value): Move declaration to here.\n+\n 2012-03-23  William Bader  <williambader@hotmail.com>\n \n \t* c-lex.c (c_lex_with_flags): Avoid declarations after stmts."}, {"sha": "a9e7ec1d14dcf352bef7bd12da2743cc8bf6f411", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd4116f49cdf081949633ba8f474d7b160860701/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd4116f49cdf081949633ba8f474d7b160860701/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=fd4116f49cdf081949633ba8f474d7b160860701", "patch": "@@ -1649,6 +1649,102 @@ warn_logical_operator (location_t location, enum tree_code code, tree type,\n }\n \n \n+/* Warn if EXP contains any computations whose results are not used.\n+   Return true if a warning is printed; false otherwise.  LOCUS is the\n+   (potential) location of the expression.  */\n+\n+bool\n+warn_if_unused_value (const_tree exp, location_t locus)\n+{\n+ restart:\n+  if (TREE_USED (exp) || TREE_NO_WARNING (exp))\n+    return false;\n+\n+  /* Don't warn about void constructs.  This includes casting to void,\n+     void function calls, and statement expressions with a final cast\n+     to void.  */\n+  if (VOID_TYPE_P (TREE_TYPE (exp)))\n+    return false;\n+\n+  if (EXPR_HAS_LOCATION (exp))\n+    locus = EXPR_LOCATION (exp);\n+\n+  switch (TREE_CODE (exp))\n+    {\n+    case PREINCREMENT_EXPR:\n+    case POSTINCREMENT_EXPR:\n+    case PREDECREMENT_EXPR:\n+    case POSTDECREMENT_EXPR:\n+    case MODIFY_EXPR:\n+    case INIT_EXPR:\n+    case TARGET_EXPR:\n+    case CALL_EXPR:\n+    case TRY_CATCH_EXPR:\n+    case WITH_CLEANUP_EXPR:\n+    case EXIT_EXPR:\n+    case VA_ARG_EXPR:\n+      return false;\n+\n+    case BIND_EXPR:\n+      /* For a binding, warn if no side effect within it.  */\n+      exp = BIND_EXPR_BODY (exp);\n+      goto restart;\n+\n+    case SAVE_EXPR:\n+    case NON_LVALUE_EXPR:\n+      exp = TREE_OPERAND (exp, 0);\n+      goto restart;\n+\n+    case TRUTH_ORIF_EXPR:\n+    case TRUTH_ANDIF_EXPR:\n+      /* In && or ||, warn if 2nd operand has no side effect.  */\n+      exp = TREE_OPERAND (exp, 1);\n+      goto restart;\n+\n+    case COMPOUND_EXPR:\n+      if (warn_if_unused_value (TREE_OPERAND (exp, 0), locus))\n+\treturn true;\n+      /* Let people do `(foo (), 0)' without a warning.  */\n+      if (TREE_CONSTANT (TREE_OPERAND (exp, 1)))\n+\treturn false;\n+      exp = TREE_OPERAND (exp, 1);\n+      goto restart;\n+\n+    case COND_EXPR:\n+      /* If this is an expression with side effects, don't warn; this\n+\t case commonly appears in macro expansions.  */\n+      if (TREE_SIDE_EFFECTS (exp))\n+\treturn false;\n+      goto warn;\n+\n+    case INDIRECT_REF:\n+      /* Don't warn about automatic dereferencing of references, since\n+\t the user cannot control it.  */\n+      if (TREE_CODE (TREE_TYPE (TREE_OPERAND (exp, 0))) == REFERENCE_TYPE)\n+\t{\n+\t  exp = TREE_OPERAND (exp, 0);\n+\t  goto restart;\n+\t}\n+      /* Fall through.  */\n+\n+    default:\n+      /* Referencing a volatile value is a side effect, so don't warn.  */\n+      if ((DECL_P (exp) || REFERENCE_CLASS_P (exp))\n+\t  && TREE_THIS_VOLATILE (exp))\n+\treturn false;\n+\n+      /* If this is an expression which has no operands, there is no value\n+\t to be unused.  There are no such language-independent codes,\n+\t but front ends may define such.  */\n+      if (EXPRESSION_CLASS_P (exp) && TREE_OPERAND_LENGTH (exp) == 0)\n+\treturn false;\n+\n+    warn:\n+      return warning_at (locus, OPT_Wunused_value, \"value computed is not used\");\n+    }\n+}\n+\n+\n /* Print a warning about casts that might indicate violation\n    of strict aliasing rules if -Wstrict-aliasing is used and\n    strict aliasing mode is in effect. OTYPE is the original"}, {"sha": "cab7b43966191c5c916d49ac25e11b91433dc938", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd4116f49cdf081949633ba8f474d7b160860701/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd4116f49cdf081949633ba8f474d7b160860701/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=fd4116f49cdf081949633ba8f474d7b160860701", "patch": "@@ -772,6 +772,7 @@ extern bool strict_aliasing_warning (tree, tree, tree);\n extern void warnings_for_convert_and_check (tree, tree, tree);\n extern tree convert_and_check (tree, tree);\n extern void overflow_warning (location_t, tree);\n+extern bool warn_if_unused_value (const_tree, location_t);\n extern void warn_logical_operator (location_t, enum tree_code, tree,\n \t\t\t\t   enum tree_code, tree, enum tree_code, tree);\n extern void check_main_parameter_types (tree decl);"}, {"sha": "3397470777ada9807ced9433320f68666dc63d1b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd4116f49cdf081949633ba8f474d7b160860701/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd4116f49cdf081949633ba8f474d7b160860701/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fd4116f49cdf081949633ba8f474d7b160860701", "patch": "@@ -1,3 +1,7 @@\n+2012-04-10  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* cvt.c (convert_to_void): Update comment.\n+\n 2012-04-05  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/52596"}, {"sha": "5694abede459ab2c66e01d26a52938fa33abe9e6", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd4116f49cdf081949633ba8f474d7b160860701/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd4116f49cdf081949633ba8f474d7b160860701/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=fd4116f49cdf081949633ba8f474d7b160860701", "patch": "@@ -1108,7 +1108,7 @@ convert_to_void (tree expr, impl_conv_void implicit, tsubst_flags_t complain)\n                - an expression with TREE_NO_WARNING set. (For an example of\n                  such expressions, see build_over_call in call.c.)\n                - automatic dereferencing of references, since the user cannot\n-                 control it. (See also warn_if_unused_value() in stmt.c.)  */\n+                 control it. (See also warn_if_unused_value() in c-common.c.)  */\n             if (warn_unused_value\n \t\t&& implicit != ICV_CAST\n                 && (complain & tf_warning)"}, {"sha": "0589bfd1bb88529228c446cb6593cf630a5eccb2", "filename": "gcc/stmt.c", "status": "modified", "additions": 0, "deletions": 96, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd4116f49cdf081949633ba8f474d7b160860701/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd4116f49cdf081949633ba8f474d7b160860701/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=fd4116f49cdf081949633ba8f474d7b160860701", "patch": "@@ -1472,102 +1472,6 @@ expand_expr_stmt (tree exp)\n   free_temp_slots ();\n }\n \n-/* Warn if EXP contains any computations whose results are not used.\n-   Return 1 if a warning is printed; 0 otherwise.  LOCUS is the\n-   (potential) location of the expression.  */\n-\n-int\n-warn_if_unused_value (const_tree exp, location_t locus)\n-{\n- restart:\n-  if (TREE_USED (exp) || TREE_NO_WARNING (exp))\n-    return 0;\n-\n-  /* Don't warn about void constructs.  This includes casting to void,\n-     void function calls, and statement expressions with a final cast\n-     to void.  */\n-  if (VOID_TYPE_P (TREE_TYPE (exp)))\n-    return 0;\n-\n-  if (EXPR_HAS_LOCATION (exp))\n-    locus = EXPR_LOCATION (exp);\n-\n-  switch (TREE_CODE (exp))\n-    {\n-    case PREINCREMENT_EXPR:\n-    case POSTINCREMENT_EXPR:\n-    case PREDECREMENT_EXPR:\n-    case POSTDECREMENT_EXPR:\n-    case MODIFY_EXPR:\n-    case INIT_EXPR:\n-    case TARGET_EXPR:\n-    case CALL_EXPR:\n-    case TRY_CATCH_EXPR:\n-    case WITH_CLEANUP_EXPR:\n-    case EXIT_EXPR:\n-    case VA_ARG_EXPR:\n-      return 0;\n-\n-    case BIND_EXPR:\n-      /* For a binding, warn if no side effect within it.  */\n-      exp = BIND_EXPR_BODY (exp);\n-      goto restart;\n-\n-    case SAVE_EXPR:\n-    case NON_LVALUE_EXPR:\n-      exp = TREE_OPERAND (exp, 0);\n-      goto restart;\n-\n-    case TRUTH_ORIF_EXPR:\n-    case TRUTH_ANDIF_EXPR:\n-      /* In && or ||, warn if 2nd operand has no side effect.  */\n-      exp = TREE_OPERAND (exp, 1);\n-      goto restart;\n-\n-    case COMPOUND_EXPR:\n-      if (warn_if_unused_value (TREE_OPERAND (exp, 0), locus))\n-\treturn 1;\n-      /* Let people do `(foo (), 0)' without a warning.  */\n-      if (TREE_CONSTANT (TREE_OPERAND (exp, 1)))\n-\treturn 0;\n-      exp = TREE_OPERAND (exp, 1);\n-      goto restart;\n-\n-    case COND_EXPR:\n-      /* If this is an expression with side effects, don't warn; this\n-\t case commonly appears in macro expansions.  */\n-      if (TREE_SIDE_EFFECTS (exp))\n-\treturn 0;\n-      goto warn;\n-\n-    case INDIRECT_REF:\n-      /* Don't warn about automatic dereferencing of references, since\n-\t the user cannot control it.  */\n-      if (TREE_CODE (TREE_TYPE (TREE_OPERAND (exp, 0))) == REFERENCE_TYPE)\n-\t{\n-\t  exp = TREE_OPERAND (exp, 0);\n-\t  goto restart;\n-\t}\n-      /* Fall through.  */\n-\n-    default:\n-      /* Referencing a volatile value is a side effect, so don't warn.  */\n-      if ((DECL_P (exp) || REFERENCE_CLASS_P (exp))\n-\t  && TREE_THIS_VOLATILE (exp))\n-\treturn 0;\n-\n-      /* If this is an expression which has no operands, there is no value\n-\t to be unused.  There are no such language-independent codes,\n-\t but front ends may define such.  */\n-      if (EXPRESSION_CLASS_P (exp) && TREE_OPERAND_LENGTH (exp) == 0)\n-\treturn 0;\n-\n-    warn:\n-      warning_at (locus, OPT_Wunused_value, \"value computed is not used\");\n-      return 1;\n-    }\n-}\n-\n \f\n /* Generate RTL to return from the current function, with no value.\n    (That is, we do not do anything about returning any value.)  */"}, {"sha": "c3fbde99b568fb45b053443ba8624cb8dc73a5c5", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd4116f49cdf081949633ba8f474d7b160860701/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd4116f49cdf081949633ba8f474d7b160860701/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=fd4116f49cdf081949633ba8f474d7b160860701", "patch": "@@ -5211,7 +5211,6 @@ extern tree unshare_expr (tree);\n /* In stmt.c */\n \n extern void expand_expr_stmt (tree);\n-extern int warn_if_unused_value (const_tree, location_t);\n extern void expand_label (tree);\n extern void expand_goto (tree);\n "}]}