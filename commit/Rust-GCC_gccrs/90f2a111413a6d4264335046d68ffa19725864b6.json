{"sha": "90f2a111413a6d4264335046d68ffa19725864b6", "node_id": "C_kwDOANBUbNoAKDkwZjJhMTExNDEzYTZkNDI2NDMzNTA0NmQ2OGZmYTE5NzI1ODY0YjY", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-06-15T20:51:52Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-06-15T21:16:21Z"}, "message": "d: Add `@no_sanitize' attribute to compiler and library.\n\nThe `@no_sanitize' attribute disables a particular sanitizer for this\nfunction, analogous to `__attribute__((no_sanitize))'.  The library also\ndefines `@noSanitize' to be compatible with the LLVM D compiler's\n`ldc.attributes'.\n\ngcc/d/ChangeLog:\n\n\t* d-attribs.cc (d_langhook_attribute_table): Add no_sanitize.\n\t(d_handle_no_sanitize_attribute): New function.\n\nlibphobos/ChangeLog:\n\n\t* libdruntime/gcc/attributes.d (no_sanitize): Define.\n\t(noSanitize): Define.\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.dg/asan/attr_no_sanitize1.d: New test.\n\t* gdc.dg/ubsan/attr_no_sanitize2.d: New test.", "tree": {"sha": "566e5fee798421401ae158412b179351a25e7c52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/566e5fee798421401ae158412b179351a25e7c52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90f2a111413a6d4264335046d68ffa19725864b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90f2a111413a6d4264335046d68ffa19725864b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90f2a111413a6d4264335046d68ffa19725864b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90f2a111413a6d4264335046d68ffa19725864b6/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc9b92facf87a6f2d8b0e5d5fc404f30c3b15a74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc9b92facf87a6f2d8b0e5d5fc404f30c3b15a74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc9b92facf87a6f2d8b0e5d5fc404f30c3b15a74"}], "stats": {"total": 158, "additions": 158, "deletions": 0}, "files": [{"sha": "4b54426be39ffb4bf4db57cfda647828e4e27af2", "filename": "gcc/d/d-attribs.cc", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f2a111413a6d4264335046d68ffa19725864b6/gcc%2Fd%2Fd-attribs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f2a111413a6d4264335046d68ffa19725864b6/gcc%2Fd%2Fd-attribs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-attribs.cc?ref=90f2a111413a6d4264335046d68ffa19725864b6", "patch": "@@ -78,6 +78,7 @@ static tree d_handle_cold_attribute (tree *, tree, tree, int, bool *);\n static tree d_handle_restrict_attribute (tree *, tree, tree, int, bool *);\n static tree d_handle_used_attribute (tree *, tree, tree, int, bool *);\n static tree d_handle_visibility_attribute (tree *, tree, tree, int, bool *);\n+static tree d_handle_no_sanitize_attribute (tree *, tree, tree, int, bool *);\n \n /* Helper to define attribute exclusions.  */\n #define ATTR_EXCL(name, function, type, variable)\t\\\n@@ -220,6 +221,8 @@ const attribute_spec d_langhook_attribute_table[] =\n \t     d_handle_alloc_size_attribute, attr_alloc_exclusions),\n   ATTR_SPEC (\"cold\", 0, 0, true, false, false, false,\n \t     d_handle_cold_attribute, attr_cold_hot_exclusions),\n+  ATTR_SPEC (\"no_sanitize\", 1, -1, true, false, false, false,\n+\t     d_handle_no_sanitize_attribute, NULL),\n   ATTR_SPEC (\"restrict\", 0, 0, true, false, false, false,\n \t     d_handle_restrict_attribute, NULL),\n   ATTR_SPEC (\"used\", 0, 0, true, false, false, false,\n@@ -1364,6 +1367,55 @@ d_handle_cold_attribute (tree *node, tree name, tree, int, bool *no_add_attrs)\n   return NULL_TREE;\n }\n \n+/* Handle a \"no_sanitize\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+d_handle_no_sanitize_attribute (tree *node, tree name, tree args, int,\n+\t\t\t\tbool *no_add_attrs)\n+{\n+  *no_add_attrs = true;\n+\n+  if (TREE_CODE (*node) != FUNCTION_DECL)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      return NULL_TREE;\n+    }\n+\n+  unsigned int flags = 0;\n+  for (; args; args = TREE_CHAIN (args))\n+    {\n+      tree id = TREE_VALUE (args);\n+      if (TREE_CODE (id) != STRING_CST)\n+\t{\n+\t  error (\"%qE argument not a string\", name);\n+\t  return NULL_TREE;\n+\t}\n+\n+      char *string = ASTRDUP (TREE_STRING_POINTER (id));\n+      flags |= parse_no_sanitize_attribute (string);\n+    }\n+\n+  /* Store the flags argument back into no_sanitize attribute as an integer,\n+     merge existing flags if no_sanitize was previously handled.  */\n+  if (tree attr = lookup_attribute (\"no_sanitize\", DECL_ATTRIBUTES (*node)))\n+    {\n+      unsigned int old_value = tree_to_uhwi (TREE_VALUE (attr));\n+      flags |= old_value;\n+\n+      if (flags != old_value)\n+\tTREE_VALUE (attr) = build_int_cst (d_uint_type, flags);\n+    }\n+  else\n+    {\n+      DECL_ATTRIBUTES (*node) = tree_cons (get_identifier (\"no_sanitize\"),\n+\t\t      \t\t\t   build_int_cst (d_uint_type, flags),\n+\t\t      \t\t\t   DECL_ATTRIBUTES (*node));\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"restrict\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "28908d4cbc0acf9bb4b0726390eb0d8f7d6771c4", "filename": "gcc/testsuite/gdc.dg/asan/attr_no_sanitize1.d", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f2a111413a6d4264335046d68ffa19725864b6/gcc%2Ftestsuite%2Fgdc.dg%2Fasan%2Fattr_no_sanitize1.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f2a111413a6d4264335046d68ffa19725864b6/gcc%2Ftestsuite%2Fgdc.dg%2Fasan%2Fattr_no_sanitize1.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fasan%2Fattr_no_sanitize1.d?ref=90f2a111413a6d4264335046d68ffa19725864b6", "patch": "@@ -0,0 +1,32 @@\n+// { dg-options \"-fsanitize=address -O3 -fdump-tree-optimized\" }\n+// { dg-do compile }\n+\n+import gcc.attributes;\n+\n+@no_sanitize(\"address\")\n+__gshared int globalvar1; // { dg-warning \"attribute ignored\" }\n+\n+pragma(inline, true)\n+@no_sanitize(\"address\")\n+void test_no_address()\n+{\n+    counter++;\n+}\n+\n+pragma(inline, true)\n+void test_sanitize()()\n+{\n+    counter++;\n+}\n+\n+void func1()\n+{\n+  counter++;\n+  test_no_address();\n+  test_sanitize();\n+}\n+\n+private int counter;\n+\n+// { dg-final { scan-tree-dump-times \"Function test_no_address\" 1 \"optimized\" } }\n+// { dg-final { scan-tree-dump-times \"Function test_sanitize\" 0 \"optimized\" } }"}, {"sha": "c6e47845cd531675dc52133e7306c8ad95642332", "filename": "gcc/testsuite/gdc.dg/ubsan/attr_no_sanitize2.d", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f2a111413a6d4264335046d68ffa19725864b6/gcc%2Ftestsuite%2Fgdc.dg%2Fubsan%2Fattr_no_sanitize2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f2a111413a6d4264335046d68ffa19725864b6/gcc%2Ftestsuite%2Fgdc.dg%2Fubsan%2Fattr_no_sanitize2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fubsan%2Fattr_no_sanitize2.d?ref=90f2a111413a6d4264335046d68ffa19725864b6", "patch": "@@ -0,0 +1,39 @@\n+// { dg-options \"-fsanitize=undefined -O3 -fdump-tree-optimized\" }\n+// { dg-do compile }\n+\n+import gcc.attributes;\n+\n+@no_sanitize(\"invalid_name\")\n+void func1() { } // { dg-warning \"attribute directive ignored\" }\n+\n+@no_sanitize(\"address\")\n+@no_sanitize(\"thread\")\n+@no_sanitize(\"address,thread\")\n+@no_sanitize(\"address\", \"undefined\")\n+@no_sanitize(\"undefined\", \"leak\", \"return,null,bounds\")\n+void func2() { }\n+\n+pragma(inline, true)\n+@no_sanitize(\"undefined\")\n+void test_no_undefined()()\n+{\n+    counter++;\n+}\n+\n+pragma(inline, true)\n+void test_sanitize()()\n+{\n+    counter++;\n+}\n+\n+void func3()\n+{\n+  counter++;\n+  test_no_undefined();\n+  test_sanitize();\n+}\n+\n+private __gshared int counter;\n+\n+// { dg-final { scan-tree-dump-times \"Function test_no_undefined\" 1 \"optimized\" } }\n+// { dg-final { scan-tree-dump-times \"Function test_sanitize\" 0 \"optimized\" } }"}, {"sha": "710e8ab8a59f567418b2460a8c0b8bd69be6474b", "filename": "libphobos/libdruntime/gcc/attributes.d", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f2a111413a6d4264335046d68ffa19725864b6/libphobos%2Flibdruntime%2Fgcc%2Fattributes.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f2a111413a6d4264335046d68ffa19725864b6/libphobos%2Flibdruntime%2Fgcc%2Fattributes.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fgcc%2Fattributes.d?ref=90f2a111413a6d4264335046d68ffa19725864b6", "patch": "@@ -181,6 +181,33 @@ enum flatten = attribute(\"flatten\");\n  */\n enum no_icf = attribute(\"no_icf\");\n \n+/**\n+ * The `@no_sanitize` attribute on functions is used to inform the compiler\n+ * that it should not do sanitization of any option mentioned in\n+ * sanitize_option.  A list of values acceptable by the `-fsanitize` option\n+ * can be provided.\n+ *\n+ * Example:\n+ * ---\n+ * import gcc.attributes;\n+ *\n+ * @no_sanitize(\"alignment\", \"object-size\") void func1() { }\n+ * @no_sanitize(\"alignment,object-size\") void func2() { }\n+ * ---\n+ */\n+\n+auto no_sanitize(A...)(A arguments)\n+    if (allSatisfy!(isStringValue, arguments))\n+{\n+    return attribute(\"no_sanitize\", arguments);\n+}\n+\n+auto no_sanitize(A...)(A arguments)\n+    if (!allSatisfy!(isStringValue, arguments))\n+{\n+    assert(false, \"no_sanitize attribute argument not a string constant\");\n+}\n+\n /**\n  * The `@noclone` attribute prevents a function from being considered for\n  * cloning - a mechanism that produces specialized copies of functions and\n@@ -594,6 +621,14 @@ enum hidden = visibility(\"hidden\");\n  */\n enum naked = attribute(\"naked\");\n \n+/**\n+ * Disables a particular sanitizer for this function.\n+ * Valid sanitizer names are all names accepted by `-fsanitize=` commandline option.\n+ * Multiple sanitizers can be disabled by applying this UDA multiple times, e.g.\n+ * `@noSanitize(\"address\") `@noSanitize(\"thread\")` to disable both ASan and TSan.\n+ */\n+alias noSanitize = no_sanitize;\n+\n /**\n  * Sets the optimization strategy for a function.\n  * Valid strategies are \"none\", \"optsize\", \"minsize\". The strategies are"}]}