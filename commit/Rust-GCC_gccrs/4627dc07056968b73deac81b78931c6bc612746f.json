{"sha": "4627dc07056968b73deac81b78931c6bc612746f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYyN2RjMDcwNTY5NjhiNzNkZWFjODFiNzg5MzFjNmJjNjEyNzQ2Zg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-12-29T23:23:53Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-12-29T23:23:53Z"}, "message": "(yylex, parse_c_expression, main): Likewise.\n\nFrom-SVN: r10904", "tree": {"sha": "edaf15cfe6f2dbc0edd47947d195ce338541d094", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edaf15cfe6f2dbc0edd47947d195ce338541d094"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4627dc07056968b73deac81b78931c6bc612746f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4627dc07056968b73deac81b78931c6bc612746f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4627dc07056968b73deac81b78931c6bc612746f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4627dc07056968b73deac81b78931c6bc612746f/comments", "author": null, "committer": null, "parents": [{"sha": "b71c5c9c9c4b59d54b08e9d61c2fadf21d266c92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b71c5c9c9c4b59d54b08e9d61c2fadf21d266c92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b71c5c9c9c4b59d54b08e9d61c2fadf21d266c92"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "4b31a064e94a635993ddcca47adbb7202552614c", "filename": "gcc/cexp.y", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4627dc07056968b73deac81b78931c6bc612746f/gcc%2Fcexp.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4627dc07056968b73deac81b78931c6bc612746f/gcc%2Fcexp.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcexp.y?ref=4627dc07056968b73deac81b78931c6bc612746f", "patch": "@@ -525,13 +525,12 @@ yylex ()\n       }\n \n   switch (c) {\n-  case 0:\n+  case '\\n':\n     return 0;\n     \n   case ' ':\n   case '\\t':\n   case '\\r':\n-  case '\\n':\n     lexptr++;\n     goto retry;\n     \n@@ -927,6 +926,8 @@ right_shift (a, b)\n \n /* Parse STRING as an expression, and complain if this fails\n    to use up all of the contents of STRING.  */\n+/* STRING may contain '\\0' bytes; it is terminated by the first '\\n'\n+   outside a string constant, so that we can diagnose '\\0' properly.  */\n /* We do not support C comments.  They should be removed before\n    this function is called.  */\n \n@@ -950,7 +951,7 @@ parse_c_expression (string)\n   if (yyparse ())\n     return 0;\t\t\t/* actually this is never reached\n \t\t\t\t   the way things stand. */\n-  if (*lexptr)\n+  if (*lexptr != '\\n')\n     error (\"Junk after end of expression.\");\n \n   return expression_value;\t/* set by yyparse () */\n@@ -974,11 +975,10 @@ main ()\n   for (;;) {\n     printf (\"enter expression: \");\n     n = 0;\n-    while ((buf[n] = getchar ()) != '\\n' && buf[n] != EOF)\n+    while ((buf[n] = c = getchar ()) != '\\n' && c != EOF)\n       n++;\n-    if (buf[n] == EOF)\n+    if (c == EOF)\n       break;\n-    buf[n] = '\\0';\n     printf (\"parser returned %ld\\n\", parse_c_expression (buf));\n   }\n "}]}