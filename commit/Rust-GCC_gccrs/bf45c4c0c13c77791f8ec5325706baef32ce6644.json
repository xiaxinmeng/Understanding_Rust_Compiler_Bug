{"sha": "bf45c4c0c13c77791f8ec5325706baef32ce6644", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY0NWM0YzBjMTNjNzc3OTFmOGVjNTMyNTcwNmJhZWYzMmNlNjY0NA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2012-10-17T19:50:16Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2012-10-17T19:50:16Z"}, "message": "cfgloopmanip.c (copy_loop_info): New function.\n\n\t* cfgloopmanip.c (copy_loop_info): New function.\n\t(duplicate_loop): Use it.\n\t(loop_version): Use it.\n\t* loop-unswitch.c (unswitch_loop): Use it.\n\t* cfgloop.h (copy_loop_info): Declare.\n\nFrom-SVN: r192543", "tree": {"sha": "0946728541035742ddd41dc817f634a847ab85d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0946728541035742ddd41dc817f634a847ab85d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf45c4c0c13c77791f8ec5325706baef32ce6644", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf45c4c0c13c77791f8ec5325706baef32ce6644", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf45c4c0c13c77791f8ec5325706baef32ce6644", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf45c4c0c13c77791f8ec5325706baef32ce6644/comments", "author": null, "committer": null, "parents": [{"sha": "b7442c2fe0e28b96f0789d41132849b7c99402d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7442c2fe0e28b96f0789d41132849b7c99402d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7442c2fe0e28b96f0789d41132849b7c99402d4"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "b5cde0396e7caa26ba98b9b498254e656bad7f3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf45c4c0c13c77791f8ec5325706baef32ce6644/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf45c4c0c13c77791f8ec5325706baef32ce6644/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf45c4c0c13c77791f8ec5325706baef32ce6644", "patch": "@@ -1,3 +1,11 @@\n+2012-10-17  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cfgloopmanip.c (copy_loop_info): New function.\n+\t(duplicate_loop): Use it.\n+\t(loop_version): Use it.\n+\t* loop-unswitch.c (unswitch_loop): Use it.\n+\t* cfgloop.h (copy_loop_info): Declare.\n+\n 2012-10-17  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-ssa-loop-ivcanon.c (tree_estimate_loop_size): Add edge_to_cancel"}, {"sha": "a48550445a37e3cf4665e907adeecd4fd00f0814", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf45c4c0c13c77791f8ec5325706baef32ce6644/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf45c4c0c13c77791f8ec5325706baef32ce6644/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=bf45c4c0c13c77791f8ec5325706baef32ce6644", "patch": "@@ -310,6 +310,7 @@ extern edge create_empty_if_region_on_edge (edge, tree);\n extern struct loop *create_empty_loop_on_edge (edge, tree, tree, tree, tree,\n \t\t\t\t\t       tree *, tree *, struct loop *);\n extern struct loop * duplicate_loop (struct loop *, struct loop *);\n+extern void copy_loop_info (struct loop *loop, struct loop *target);\n extern void duplicate_subloops (struct loop *, struct loop *);\n extern bool duplicate_loop_to_header_edge (struct loop *, edge,\n \t\t\t\t\t   unsigned, sbitmap, edge,"}, {"sha": "97a90bbff1d400f03cd047528c38ebc89074ccc1", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf45c4c0c13c77791f8ec5325706baef32ce6644/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf45c4c0c13c77791f8ec5325706baef32ce6644/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=bf45c4c0c13c77791f8ec5325706baef32ce6644", "patch": "@@ -970,6 +970,20 @@ fix_loop_placements (struct loop *loop, bool *irred_invalidated)\n     }\n }\n \n+/* Duplicate loop bounds and other information we store about\n+   the loop into its duplicate.  */\n+\n+void\n+copy_loop_info (struct loop *loop, struct loop *target)\n+{\n+  gcc_checking_assert (!target->any_upper_bound && !target->any_estimate);\n+  target->any_upper_bound = loop->any_upper_bound;\n+  target->nb_iterations_upper_bound = loop->nb_iterations_upper_bound;\n+  target->any_estimate = loop->any_estimate;\n+  target->nb_iterations_estimate = loop->nb_iterations_estimate;\n+  target->estimate_state = loop->estimate_state;\n+}\n+\n /* Copies copy of LOOP as subloop of TARGET loop, placing newly\n    created loop into loops structure.  */\n struct loop *\n@@ -978,6 +992,8 @@ duplicate_loop (struct loop *loop, struct loop *target)\n   struct loop *cloop;\n   cloop = alloc_loop ();\n   place_new_loop (cloop);\n+ \n+  copy_loop_info (loop, cloop);\n \n   /* Mark the new loop as copy of LOOP.  */\n   set_loop_copy (loop, cloop);\n@@ -1686,6 +1702,8 @@ loop_version (struct loop *loop,\n \t\t   false /* Do not redirect all edges.  */,\n \t\t   then_scale, else_scale);\n \n+  copy_loop_info (loop, nloop);\n+\n   /* loopify redirected latch_edge. Update its PENDING_STMTS.  */\n   lv_flush_pending_stmts (latch_edge);\n "}, {"sha": "25d77dab22fda8455b92646c91edb02a4af7113c", "filename": "gcc/loop-unswitch.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf45c4c0c13c77791f8ec5325706baef32ce6644/gcc%2Floop-unswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf45c4c0c13c77791f8ec5325706baef32ce6644/gcc%2Floop-unswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unswitch.c?ref=bf45c4c0c13c77791f8ec5325706baef32ce6644", "patch": "@@ -454,6 +454,7 @@ unswitch_loop (struct loop *loop, basic_block unswitch_on, rtx cond, rtx cinsn)\n \t\t   BRANCH_EDGE (switch_bb), FALLTHRU_EDGE (switch_bb), true,\n \t\t   prob, REG_BR_PROB_BASE - prob);\n \n+  copy_loop_info (loop, nloop);\n   /* Remove branches that are now unreachable in new loops.  */\n   remove_path (true_edge);\n   remove_path (false_edge);"}]}