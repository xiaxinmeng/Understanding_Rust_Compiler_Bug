{"sha": "613aba20e554f92bc7008dabb1b0c42a6207da33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjEzYWJhMjBlNTU0ZjkyYmM3MDA4ZGFiYjFiMGM0MmE2MjA3ZGEzMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-05-09T03:28:52Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2015-05-09T03:28:52Z"}, "message": "decl2.c (mangling_aliases): New variable.\n\n\t* decl2.c (mangling_aliases): New variable.\n\t(note_mangling_alias, generate_mangling_aliases): New.\n\t(cp_write_global_declarations): Call generate_mangling_aliases.\n\t(generate_mangling_alias): Split out from...\n\t* mangle.c (mangle_decl): ...here.\n\t* cp-tree.h: Declare note_mangling_alias.\n\nFrom-SVN: r222934", "tree": {"sha": "7caf557f25ae5b4702351dd8b0cff09dda864d87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7caf557f25ae5b4702351dd8b0cff09dda864d87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/613aba20e554f92bc7008dabb1b0c42a6207da33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/613aba20e554f92bc7008dabb1b0c42a6207da33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/613aba20e554f92bc7008dabb1b0c42a6207da33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/613aba20e554f92bc7008dabb1b0c42a6207da33/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "09c5f835e7ca90b344a6471acbe360fc33b77fa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09c5f835e7ca90b344a6471acbe360fc33b77fa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09c5f835e7ca90b344a6471acbe360fc33b77fa7"}], "stats": {"total": 101, "additions": 77, "deletions": 24}, "files": [{"sha": "0910549098cb9faaffc582c38594aafda79ab003", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/613aba20e554f92bc7008dabb1b0c42a6207da33/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/613aba20e554f92bc7008dabb1b0c42a6207da33/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=613aba20e554f92bc7008dabb1b0c42a6207da33", "patch": "@@ -1,3 +1,12 @@\n+2015-05-08  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl2.c (mangling_aliases): New variable.\n+\t(note_mangling_alias, generate_mangling_aliases): New.\n+\t(cp_write_global_declarations): Call generate_mangling_aliases.\n+\t(generate_mangling_alias): Split out from...\n+\t* mangle.c (mangle_decl): ...here.\n+\t* cp-tree.h: Declare note_mangling_alias.\n+\n 2015-05-08  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* decl2.c (collect_candidates_for_java_method_aliases): Remove."}, {"sha": "4136d98682cd9bed574fa7929157a1550cdb23d5", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/613aba20e554f92bc7008dabb1b0c42a6207da33/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/613aba20e554f92bc7008dabb1b0c42a6207da33/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=613aba20e554f92bc7008dabb1b0c42a6207da33", "patch": "@@ -5447,6 +5447,7 @@ extern tree finish_case_label\t\t\t(location_t, tree, tree);\n extern tree cxx_maybe_build_cleanup\t\t(tree, tsubst_flags_t);\n \n /* in decl2.c */\n+extern void note_mangling_alias\t\t\t(tree, tree);\n extern bool check_java_method\t\t\t(tree);\n extern tree build_memfn_type\t\t\t(tree, tree, cp_cv_quals, cp_ref_qualifier);\n extern tree build_pointer_ptrmemfn_type\t(tree);"}, {"sha": "6101301bee200755db4d390768294d01328a3854", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/613aba20e554f92bc7008dabb1b0c42a6207da33/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/613aba20e554f92bc7008dabb1b0c42a6207da33/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=613aba20e554f92bc7008dabb1b0c42a6207da33", "patch": "@@ -118,6 +118,10 @@ static GTY(()) vec<tree, va_gc> *deferred_fns;\n    sure are defined.  */\n static GTY(()) vec<tree, va_gc> *no_linkage_decls;\n \n+/* A vector of alternating decls and identifiers, where the latter\n+   is to be an alias for the former if the former is defined.  */\n+static GTY(()) vec<tree, va_gc> *mangling_aliases;\n+\n /* Nonzero if we're done parsing and into end-of-file activities.  */\n \n int at_eof;\n@@ -4287,6 +4291,66 @@ handle_tls_init (void)\n   expand_or_defer_fn (finish_function (0));\n }\n \n+/* We're at the end of compilation, so generate any mangling aliases that\n+   we've been saving up, if DECL is going to be output and ID2 isn't\n+   already taken by another declaration.  */\n+\n+static void\n+generate_mangling_alias (tree decl, tree id2)\n+{\n+  /* If there's a declaration already using this mangled name,\n+     don't create a compatibility alias that conflicts.  */\n+  if (IDENTIFIER_GLOBAL_VALUE (id2))\n+    return;\n+\n+  struct cgraph_node *n = NULL;\n+  if (TREE_CODE (decl) == FUNCTION_DECL\n+      && !(n = cgraph_node::get (decl)))\n+    /* Don't create an alias to an unreferenced function.  */\n+    return;\n+\n+  tree alias = make_alias_for (decl, id2);\n+  SET_IDENTIFIER_GLOBAL_VALUE (id2, alias);\n+  DECL_IGNORED_P (alias) = 1;\n+  TREE_PUBLIC (alias) = TREE_PUBLIC (decl);\n+  DECL_VISIBILITY (alias) = DECL_VISIBILITY (decl);\n+  if (vague_linkage_p (decl))\n+    DECL_WEAK (alias) = 1;\n+  if (TREE_CODE (decl) == FUNCTION_DECL)\n+    n->create_same_body_alias (alias, decl);\n+  else\n+    varpool_node::create_extra_name_alias (alias, decl);\n+}\n+\n+/* Note that we might want to emit an alias with the symbol ID2 for DECL at\n+   the end of translation, for compatibility across bugs in the mangling\n+   implementation.  */\n+\n+void\n+note_mangling_alias (tree decl, tree id2)\n+{\n+#ifdef ASM_OUTPUT_DEF\n+  if (at_eof)\n+    generate_mangling_alias (decl, id2);\n+  else\n+    {\n+      vec_safe_push (mangling_aliases, decl);\n+      vec_safe_push (mangling_aliases, id2);\n+    }\n+#endif\n+}\n+\n+static void\n+generate_mangling_aliases ()\n+{\n+  while (!vec_safe_is_empty (mangling_aliases))\n+    {\n+      tree id2 = mangling_aliases->pop();\n+      tree decl = mangling_aliases->pop();\n+      generate_mangling_alias (decl, id2);\n+    }\n+}\n+\n /* The entire file is now complete.  If requested, dump everything\n    to a file.  */\n \n@@ -4647,6 +4711,8 @@ cp_write_global_declarations (void)\n     }\n   while (reconsider);\n \n+  generate_mangling_aliases ();\n+\n   /* All used inline functions must have a definition at this point.  */\n   FOR_EACH_VEC_SAFE_ELT (deferred_fns, i, decl)\n     {"}, {"sha": "647ec70106fdbba6ebece91eb28f4fdf419332a6", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/613aba20e554f92bc7008dabb1b0c42a6207da33/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/613aba20e554f92bc7008dabb1b0c42a6207da33/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=613aba20e554f92bc7008dabb1b0c42a6207da33", "patch": "@@ -3554,30 +3554,7 @@ mangle_decl (const tree decl)\n \t\t     flag_abi_compat_version, id2);\n \t}\n \n-#ifdef ASM_OUTPUT_DEF\n-      /* If there's a declaration already using this mangled name,\n-\t don't create a compatibility alias that conflicts.  */\n-      if (IDENTIFIER_GLOBAL_VALUE (id2))\n-\treturn;\n-\n-      struct cgraph_node *n = NULL;\n-      if (TREE_CODE (decl) == FUNCTION_DECL\n-\t  && !(n = cgraph_node::get (decl)))\n-\t/* Don't create an alias to an unreferenced function.  */\n-\treturn;\n-\n-      tree alias = make_alias_for (decl, id2);\n-      SET_IDENTIFIER_GLOBAL_VALUE (id2, alias);\n-      DECL_IGNORED_P (alias) = 1;\n-      TREE_PUBLIC (alias) = TREE_PUBLIC (decl);\n-      DECL_VISIBILITY (alias) = DECL_VISIBILITY (decl);\n-      if (vague_linkage_p (decl))\n-\tDECL_WEAK (alias) = 1;\n-      if (TREE_CODE (decl) == FUNCTION_DECL)\n-\tn->create_same_body_alias (alias, decl);\n-      else\n-\tvarpool_node::create_extra_name_alias (alias, decl);\n-#endif\n+      note_mangling_alias (decl, id2);\n     }\n }\n "}]}