{"sha": "82d109f263f6ebca5c7e3b5e2c9588fe49e14651", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJkMTA5ZjI2M2Y2ZWJjYTVjN2UzYjVlMmM5NTg4ZmU0OWUxNDY1MQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-10-01T07:28:03Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-10-01T07:28:03Z"}, "message": "Update to 0.5.22-19970929.\n\nFrom-SVN: r15818", "tree": {"sha": "b37636d8e5ed1cb0322283cf70df5e61024d5e21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b37636d8e5ed1cb0322283cf70df5e61024d5e21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82d109f263f6ebca5c7e3b5e2c9588fe49e14651", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82d109f263f6ebca5c7e3b5e2c9588fe49e14651", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82d109f263f6ebca5c7e3b5e2c9588fe49e14651", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/comments", "author": null, "committer": null, "parents": [{"sha": "d3878e494800f87eb4db2cc00a1f46d0703d7468", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3878e494800f87eb4db2cc00a1f46d0703d7468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3878e494800f87eb4db2cc00a1f46d0703d7468"}], "stats": {"total": 202, "additions": 160, "deletions": 42}, "files": [{"sha": "9831a67427684e547afb4c63d6caca05c6b1c4e9", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=82d109f263f6ebca5c7e3b5e2c9588fe49e14651", "patch": "@@ -1,3 +1,27 @@\n+Mon Sep 29 16:18:21 1997  Craig Burley  <burley@gnu.ai.mit.edu>\n+\n+\t* stu.c (ffestu_list_exec_transition_,\n+\tffestu_dummies_transition_): Specify `bool' type for\n+\t`in_progress' variables.\n+\n+\t* com.h (assemble_string): Declare this routine (instead\n+\tof #include'ing \"output.h\" from gcc) to eliminate warnings\n+\tfrom lex.c.\n+\n+Fri Sep 19 01:12:27 1997  Craig Burley  <burley@gnu.ai.mit.edu>\n+\n+\t* expr.c (ffeexpr_reduced_eqop2_): \n+\t(ffeexpr_reduced_relop2_): Minor fixes to diagnostic code.\n+\n+\t* fini.c (main): Change return type to `int'.\n+\n+Wed Sep 17 10:47:08 1997  Craig Burley  <burley@gnu.ai.mit.edu>\n+\n+\t* com-rt.def (FFECOM_gfrtDSIGN, FFECOM_gfrtISIGN,\n+\tFFECOM_gfrtSIGN): Add second argument.\n+\n+\t* expr.c (ffeexpr_cb_comma_c_): Trivial fixes.\n+\n Tue Sep  9 01:59:35 1997  Craig Burley  <burley@gnu.ai.mit.edu>\n \n \t* Version 0.5.21 released."}, {"sha": "bbf6c7b6a344593affb091d2c3fd5c947159b2ed", "filename": "gcc/f/com-rt.def", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fcom-rt.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fcom-rt.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom-rt.def?ref=82d109f263f6ebca5c7e3b5e2c9588fe49e14651", "patch": "@@ -162,7 +162,7 @@ DEFGFRT (FFECOM_gfrtDLOG10, \"d_lg10\", FFECOM_rttypeDOUBLE_, \"&d\", FALSE, FALSE)\n DEFGFRT (FFECOM_gfrtDMOD, \"d_mod\", FFECOM_rttypeDOUBLE_, \"&d\", FALSE, FALSE)\n DEFGFRT (FFECOM_gfrtDNINT, \"d_nint\", FFECOM_rttypeDOUBLE_, \"&d\", FALSE, FALSE)\n DEFGFRT (FFECOM_gfrtDPROD, \"d_prod\", FFECOM_rttypeDOUBLE_, \"&d\", FALSE, FALSE)\n-DEFGFRT (FFECOM_gfrtDSIGN, \"d_sign\", FFECOM_rttypeDOUBLE_, \"&d\", FALSE, FALSE)\n+DEFGFRT (FFECOM_gfrtDSIGN, \"d_sign\", FFECOM_rttypeDOUBLE_, \"&d&d\", FALSE, FALSE)\n DEFGFRT (FFECOM_gfrtDSIN, \"d_sin\", FFECOM_rttypeDOUBLE_, \"&d\", FALSE, FALSE)\n DEFGFRT (FFECOM_gfrtDSINH, \"d_sinh\", FFECOM_rttypeDOUBLE_, \"&d\", FALSE, FALSE)\n DEFGFRT (FFECOM_gfrtDSQRT, \"d_sqrt\", FFECOM_rttypeDOUBLE_, \"&d\", FALSE, FALSE)\n@@ -203,7 +203,7 @@ DEFGFRT (FFECOM_gfrtIDNINT, \"i_dnnt\", FFECOM_rttypeINTEGER_, \"&i\", FALSE, FALSE)\n DEFGFRT (FFECOM_gfrtIERRNO, \"G77_ierrno_0\", FFECOM_rttypeINTEGER_, 0, FALSE, FALSE)\n DEFGFRT (FFECOM_gfrtINDEX, \"i_indx\", FFECOM_rttypeINTEGER_, \"&a&a\", FALSE, FALSE)\n DEFGFRT (FFECOM_gfrtIRAND, \"G77_irand_0\", FFECOM_rttypeINTEGER_, \"&i\", FALSE, FALSE)\n-DEFGFRT (FFECOM_gfrtISIGN, \"i_sign\", FFECOM_rttypeINTEGER_, \"&i\", FALSE, FALSE)\n+DEFGFRT (FFECOM_gfrtISIGN, \"i_sign\", FFECOM_rttypeINTEGER_, \"&i&i\", FALSE, FALSE)\n DEFGFRT (FFECOM_gfrtISATTY, \"G77_isatty_0\", FFECOM_rttypeINTEGER_, \"&i\", FALSE, FALSE)\n DEFGFRT (FFECOM_gfrtITIME, \"G77_itime_0\", FFECOM_rttypeVOID_, \"&i\", FALSE, FALSE)\n DEFGFRT (FFECOM_gfrtKILL, \"G77_kill_0\", FFECOM_rttypeINTEGER_, \"&i&i\", FALSE, FALSE)\n@@ -224,7 +224,7 @@ DEFGFRT (FFECOM_gfrtRAND, \"G77_rand_0\", FFECOM_rttypeREAL_F2C_, \"&i\", FALSE, FAL\n DEFGFRT (FFECOM_gfrtRENAME, \"G77_rename_0\", FFECOM_rttypeINTEGER_, \"&a&a\", FALSE, FALSE)\n DEFGFRT (FFECOM_gfrtSECNDS, \"G77_secnds_0\", FFECOM_rttypeREAL_F2C_, \"&f\", FALSE, FALSE)\n DEFGFRT (FFECOM_gfrtSECOND, \"G77_second_0\", FFECOM_rttypeREAL_F2C_, 0, FALSE, FALSE)\n-DEFGFRT (FFECOM_gfrtSIGN, \"r_sign\", FFECOM_rttypeREAL_F2C_, \"&f\", FALSE, FALSE)\n+DEFGFRT (FFECOM_gfrtSIGN, \"r_sign\", FFECOM_rttypeREAL_F2C_, \"&f&f\", FALSE, FALSE)\n DEFGFRT (FFECOM_gfrtL_SIGNAL, \"G77_signal_0\", FFECOM_rttypeFTNINT_, \"&i0\", FALSE, FALSE)\n DEFGFRT (FFECOM_gfrtSIN, \"r_sin\", FFECOM_rttypeREAL_F2C_, \"&f\", FALSE, FALSE)\n DEFGFRT (FFECOM_gfrtSINH, \"r_sinh\", FFECOM_rttypeREAL_F2C_, \"&f\", FALSE, FALSE)"}, {"sha": "946e8a5d0060053d1f326395bef66b2423e01e93", "filename": "gcc/f/com.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fcom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fcom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.h?ref=82d109f263f6ebca5c7e3b5e2c9588fe49e14651", "patch": "@@ -348,6 +348,7 @@ extern int flag_pedantic_errors;\n void emit_nop (void);\n void announce_function (tree decl);\n extern FILE *asm_out_file;\n+void assemble_string (char *, int);\n void assemble_variable (tree decl, int top_level, int at_end,\n \t\t\tint dont_output_data);\n void assemble_zeros (int size);"}, {"sha": "86b1509524f06735bdec8b8b2f1d5acc6c1d1a89", "filename": "gcc/f/expr.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fexpr.c?ref=82d109f263f6ebca5c7e3b5e2c9588fe49e14651", "patch": "@@ -7504,15 +7504,17 @@ static ffelexHandler\n ffeexpr_cb_comma_c_ (ffelexToken ft, ffebld expr, ffelexToken t)\n {\n   ffeexprExpr_ e;\n-  ffeinfoBasictype lty = ffeinfo_basictype (ffebld_info (ffeexpr_stack_->expr));\n-  ffeinfoBasictype rty = ffeinfo_basictype (ffebld_info (expr));\n+  ffeinfoBasictype lty = (ffeexpr_stack_->expr == NULL)\n+    ? FFEINFO_basictypeNONE : ffeinfo_basictype (ffebld_info (ffeexpr_stack_->expr));\n+  ffeinfoBasictype rty = (expr == NULL)\n+    ? FFEINFO_basictypeNONE : ffeinfo_basictype (ffebld_info (expr));\n   ffeinfoKindtype lkt;\n   ffeinfoKindtype rkt;\n   ffeinfoKindtype nkt;\n   bool ok = TRUE;\n   ffebld orig;\n \n-  if ((expr == NULL)\n+  if ((ffeexpr_stack_->expr == NULL)\n       || (ffebld_op (ffeexpr_stack_->expr) != FFEBLD_opCONTER)\n       || (((orig = ffebld_conter_orig (ffeexpr_stack_->expr)) != NULL)\n \t  && (((ffebld_op (orig) != FFEBLD_opUMINUS)\n@@ -10589,7 +10591,7 @@ ffeexpr_reduced_eqop2_ (ffebld reduced, ffeexprExpr_ l, ffeexprExpr_ op,\n       && (lbt != FFEINFO_basictypeCOMPLEX) && (lbt != FFEINFO_basictypeCHARACTER))\n     {\n       if ((rbt != FFEINFO_basictypeINTEGER) && (rbt != FFEINFO_basictypeREAL)\n-\t  && (rbt != FFEINFO_basictypeCOMPLEX) && (lbt != FFEINFO_basictypeCHARACTER))\n+\t  && (rbt != FFEINFO_basictypeCOMPLEX) && (rbt != FFEINFO_basictypeCHARACTER))\n \t{\n \t  if ((lbt != FFEINFO_basictypeANY) && (rbt != FFEINFO_basictypeANY)\n \t      && ffebad_start (FFEBAD_EQOP_ARGS_TYPE))\n@@ -11206,7 +11208,7 @@ ffeexpr_reduced_relop2_ (ffebld reduced, ffeexprExpr_ l, ffeexprExpr_ op,\n       && (lbt != FFEINFO_basictypeCHARACTER))\n     {\n       if ((rbt != FFEINFO_basictypeINTEGER) && (rbt != FFEINFO_basictypeREAL)\n-\t  && (lbt != FFEINFO_basictypeCHARACTER))\n+\t  && (rbt != FFEINFO_basictypeCHARACTER))\n \t{\n \t  if ((lbt != FFEINFO_basictypeANY) && (rbt != FFEINFO_basictypeANY)\n \t      && ffebad_start (FFEBAD_RELOP_ARGS_TYPE))"}, {"sha": "c6c0dd3f11ecee87c1317021b7059b26fdb66549", "filename": "gcc/f/runtime/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fruntime%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fruntime%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fruntime%2FChangeLog?ref=82d109f263f6ebca5c7e3b5e2c9588fe49e14651", "patch": "@@ -1,3 +1,34 @@\n+Tue Sep 30 00:41:39 1997  Craig Burley  <burley@gnu.ai.mit.edu>\n+\n+\tDo a better job of printing the offending FORMAT string\n+\twhen producing a diagnostic:\n+\t* libI77/err.c (f__fmtlen): New variable to hold operating\n+\tlength of format string.\n+\t(f__fatal): Use new variable to limit length of printed string.\n+\t* libI77/fmt.c (f_s): Don't skip spaces after closing paren,\n+\tso nicer message results (and nested case already skips them).\n+\t(pars_f): Record operating length of format string as indicated\n+\tby a successful call to f_s, or ad-hoc-calculate it if failure,\n+\tlimiting the length to 80 characters (and stopping at NUL).\n+\t(do_fio): Use new variable to limit length of printed string.\n+\t* libI77/fmt.h (f__fmtlen): Declare new variable.\n+\t* libI77/lread.c (c_le): Set new variable to known length.\n+\n+Mon Sep 29 16:30:31 1997  Craig Burley  <burley@gnu.ai.mit.edu>\n+\n+\tUpdate to Netlib version of 1997-09-23:\n+\t* libF77/dtime_.c (dtime_), libF77/etime_.c (dtime_):\n+\tReturn `double' instead of `float' (these are not used\n+\tin g77's version of libf2c).\n+\t* libI77/fmt.c, libI77/fmt.h, libI77/rdfmt.c, libI77/wrtfmt.c:\n+\tSupport machines with 64-bit pointers and 32-bit ints (e.g.\n+\tLinux on DEC Alpha).\n+\n+1997-09-19  Dave Love  <d.love@dl.ac.uk>\n+\n+\t* libU77/dtime_.c (G77_dtime_0): Fix types in HAVE_GETRUSAGE case\n+ \tso as not to truncate results to integer values.\n+\n Tue Sep  9 00:33:24 1997  Craig Burley  <burley@gnu.ai.mit.edu>\n \n \t* Version 0.5.21 released."}, {"sha": "78dba8653ba942d2fa305c725e350e582e700a94", "filename": "gcc/f/runtime/changes.netlib", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fruntime%2Fchanges.netlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fruntime%2Fchanges.netlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fruntime%2Fchanges.netlib?ref=82d109f263f6ebca5c7e3b5e2c9588fe49e14651", "patch": "@@ -2836,6 +2836,15 @@ with F8X_NML_ELIDE_QUOTES #defined.  wrtfmt.o: wrt_G: tweak to print\n the right number of 0's for zero under G format.\n \n Sat Aug 16 05:45:32 EDT 1997\n-  libI77: iio.c: fix bug in internal writes to an array of character\n+  libi77: iio.c: fix bug in internal writes to an array of character\n strings that sometimes caused one more array element than required by\n the format to be blank-filled.  Example: format(1x).\n+\n+Wed Sep 17 00:39:29 EDT 1997\n+  libi77: fmt.[ch] rdfmt.c wrtfmt.c: tweak struct syl for machines\n+with 64-bit pointers and 32-bit ints that did not 64-bit align\n+struct syl (e.g., Linux on the DEC Alpha).  This change should be\n+invisible on other machines.\n+\n+Sun Sep 21 22:05:19 EDT 1997\n+  libf77: [de]time_.c (Unix systems only): change return type to double."}, {"sha": "7bb09729c4708e65f6d0b0b8750935176bc6c097", "filename": "gcc/f/runtime/libF77/Version.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fruntime%2FlibF77%2FVersion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fruntime%2FlibF77%2FVersion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fruntime%2FlibF77%2FVersion.c?ref=82d109f263f6ebca5c7e3b5e2c9588fe49e14651", "patch": "@@ -1,4 +1,4 @@\n-static char junk[] = \"\\n@(#)LIBF77 VERSION 19970404\\n\";\n+static char junk[] = \"\\n@(#)LIBF77 VERSION 19970919\\n\";\n \n /*\n */\n@@ -53,6 +53,8 @@ char __G77_LIBF77_VERSION__[] = \"0.5.21\";\n \t\t\tbenefit of g77.)\n \t4 April 1997: [cz]_div.c: tweaks invisible on most systems (that may\n \t\t\taffect systems using gratuitous extra precision).\n+\t19 Sept. 1997: [de]time_.c (Unix systems only): change return\n+\t\t\ttype to double.\n */\n \n #include <stdio.h>"}, {"sha": "79b6735b13b5dfa0a13a2ca3e08699ff6a860fed", "filename": "gcc/f/runtime/libF77/dtime_.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fruntime%2FlibF77%2Fdtime_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fruntime%2FlibF77%2Fdtime_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fruntime%2FlibF77%2Fdtime_.c?ref=82d109f263f6ebca5c7e3b5e2c9588fe49e14651", "patch": "@@ -15,7 +15,7 @@\n #endif\n #endif\n \n- float\n+ double\n #ifdef KR_headers\n dtime_(tarray) float *tarray;\n #else"}, {"sha": "04528b50bb8999e4698d3a1aa2b292b1a1f702d1", "filename": "gcc/f/runtime/libF77/etime_.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fruntime%2FlibF77%2Fetime_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fruntime%2FlibF77%2Fetime_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fruntime%2FlibF77%2Fetime_.c?ref=82d109f263f6ebca5c7e3b5e2c9588fe49e14651", "patch": "@@ -15,7 +15,7 @@\n #endif\n #endif\n \n- float\n+ double\n #ifdef KR_headers\n etime_(tarray) float *tarray;\n #else"}, {"sha": "d80ea39de8d6499742a9eb460d6637f5d5355771", "filename": "gcc/f/runtime/libI77/Version.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fruntime%2FlibI77%2FVersion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fruntime%2FlibI77%2FVersion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fruntime%2FlibI77%2FVersion.c?ref=82d109f263f6ebca5c7e3b5e2c9588fe49e14651", "patch": "@@ -1,9 +1,9 @@\n-static char junk[] = \"\\n@(#) LIBI77 VERSION pjw,dmg-mods 19970816\\n\";\n+static char junk[] = \"\\n@(#) LIBI77 VERSION pjw,dmg-mods 19970916\\n\";\n \n /*\n */\n \n-char __G77_LIBI77_VERSION__[] = \"0.5.21\";\n+char __G77_LIBI77_VERSION__[] = \"0.5.22-19970930\";\n \n /*\n 2.01\t$ format added\n@@ -264,6 +264,14 @@ wrtfmt.c:\n \t\t strings that sometimes caused one more array element than\n \t\t required by the format to be blank-filled.  Example:\n \t\t format(1x). */\n+/* 16 Sept. 1997:fmt.[ch] rdfmt.c wrtfmt.c: tweak struct syl for machines\n+\t\t with 64-bit pointers and 32-bit ints that did not 64-bit\n+\t\t align struct syl (e.g., Linux on the DEC Alpha). */\n+\n+\n+\n+/* Changes for GNU Fortran (g77) version of libf2c:  */\n+\n /* 17 June 1997: detect recursive I/O and call f__fatal explaining it. */\n \n #include <stdio.h>"}, {"sha": "12eb9eed9d6ecc6978ca87a33edc7297cb8ad42e", "filename": "gcc/f/runtime/libI77/err.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fruntime%2FlibI77%2Ferr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fruntime%2FlibI77%2Ferr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fruntime%2FlibI77%2Ferr.c?ref=82d109f263f6ebca5c7e3b5e2c9588fe49e14651", "patch": "@@ -27,6 +27,7 @@ icilist *f__svic;\t/*active internal io list*/\n flag f__reading;\t/*1 if reading, 0 if writing*/\n flag f__cplus,f__cblank;\n char *f__fmtbuf;\n+int f__fmtlen;\n flag f__external;\t/*1 if external io, 0 if internal */\n #ifdef KR_headers\n int (*f__doed)(),(*f__doned)();\n@@ -167,7 +168,7 @@ f__fatal(int n, char *s)\n \t\telse\n \t\t\tfprintf(stderr,\"apparent state: internal I/O\\n\");\n \t\tif (f__fmtbuf)\n-\t\t\tfprintf(stderr,\"last format: %s\\n\",f__fmtbuf);\n+\t\t\tfprintf(stderr,\"last format: %.*s\\n\",f__fmtlen,f__fmtbuf);\n \t\tfprintf(stderr,\"lately %s %s %s %s\",f__reading?\"reading\":\"writing\",\n \t\t\tf__sequential?\"sequential\":\"direct\",f__formatted?\"formatted\":\"unformatted\",\n \t\t\tf__external?\"external\":\"internal\");"}, {"sha": "8f08952ed459ba0121f3e411f7880c275d6e88b6", "filename": "gcc/f/runtime/libI77/fmt.c", "status": "modified", "additions": 36, "deletions": 9, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fruntime%2FlibI77%2Ffmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fruntime%2FlibI77%2Ffmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fruntime%2FlibI77%2Ffmt.c?ref=82d109f263f6ebca5c7e3b5e2c9588fe49e14651", "patch": "@@ -18,7 +18,7 @@\n \t/* special quote character for stu */\n extern int f__cursor,f__scale;\n extern flag f__cblank,f__cplus;\t/*blanks in I and compulsory plus*/\n-struct syl f__syl[SYLMX];\n+static struct syl f__syl[SYLMX];\n int f__parenlvl,f__pc,f__revloc;\n \n  static\n@@ -53,8 +53,8 @@ op_gen(int a, int b, int c, int d)\n \t}\n \tp->op=a;\n \tp->p1=b;\n-\tp->p2=c;\n-\tp->p3=d;\n+\tp->p2.i[0]=c;\n+\tp->p2.i[1]=d;\n \treturn(f__pc++);\n }\n #ifdef KR_headers\n@@ -103,7 +103,6 @@ char *f_s(char *s, int curloc)\n \t{\n \t\treturn(NULL);\n \t}\n-\tskip(s);\n \treturn(s);\n }\n \n@@ -160,7 +159,7 @@ ne_d(char *s, char **p)\n \t\tcase 'H':\n \t\tcase 'h':\n \t\t\tsp = &f__syl[op_gen(H,n,0,0)];\n-\t\t\t*(char **)&sp->p2 = s + 1;\n+\t\t\tsp->p2.s = s + 1;\n \t\t\ts+=n;\n \t\t\tbreak;\n \t\t}\n@@ -169,7 +168,7 @@ ne_d(char *s, char **p)\n \tcase '\"':\n \tcase '\\'':\n \t\tsp = &f__syl[op_gen(APOS,0,0,0)];\n-\t\t*(char **)&sp->p2 = s;\n+\t\tsp->p2.s = s;\n \t\tif((*p = ap_end(s)) == NULL)\n \t\t\treturn(0);\n \t\treturn(1);\n@@ -365,11 +364,39 @@ pars_f(s) char *s;\n pars_f(char *s)\n #endif\n {\n+\tchar *e;\n+\n \tf__parenlvl=f__revloc=f__pc=0;\n-\tif(f_s(s,0) == NULL)\n+\tif((e=f_s(s,0)) == NULL)\n \t{\n+\t\t/* Try and delimit the format string.  Parens within\n+\t\t   hollerith and quoted strings have to match for this\n+\t\t   to work, but it's probably adequate for most needs.\n+\t\t   Note that this is needed because a valid CHARACTER\n+\t\t   variable passed for FMT= can contain '(I)garbage',\n+\t\t   where `garbage' is billions and billions of junk\n+\t\t   characters, and it's up to the run-time library to\n+\t\t   know where the format string ends by counting parens.\n+\t\t   Meanwhile, still treat NUL byte as \"hard stop\", since\n+\t\t   f2c still appends that at end of FORMAT-statement\n+\t\t   strings.  */\n+\n+\t\tint level=0;\n+\n+\t\tfor (f__fmtlen=0;\n+\t\t\t((*s!=')') || (--level > 0))\n+\t\t\t\t&& (*s!='\\0')\n+\t\t\t\t&& (f__fmtlen<80);\n+\t\t\t++s, ++f__fmtlen)\n+\t\t{\n+\t\t\tif (*s=='(')\n+\t\t\t\t++level;\n+\t\t}\n+\t\tif (*s==')')\n+\t\t\t++f__fmtlen;\n \t\treturn(-1);\n \t}\n+\tf__fmtlen = e - s;\n \treturn(0);\n }\n #define STKSZ 10\n@@ -421,8 +448,8 @@ integer do_fio(ftnint *number, char *ptr, ftnlen len)\n loop:\tswitch(type_f((p= &f__syl[f__pc])->op))\n \t{\n \tdefault:\n-\t\tfprintf(stderr,\"unknown code in do_fio: %d\\n%s\\n\",\n-\t\t\tp->op,f__fmtbuf);\n+\t\tfprintf(stderr,\"unknown code in do_fio: %d\\n%.*s\\n\",\n+\t\t\tp->op,f__fmtlen,f__fmtbuf);\n \t\terr(f__elist->cierr,100,\"do_fio\");\n \tcase NED:\n \t\tif((*f__doned)(p))"}, {"sha": "6197e76ed5a45f9c4b96d212f9706935472f4969", "filename": "gcc/f/runtime/libI77/fmt.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fruntime%2FlibI77%2Ffmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fruntime%2FlibI77%2Ffmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fruntime%2FlibI77%2Ffmt.h?ref=82d109f263f6ebca5c7e3b5e2c9588fe49e14651", "patch": "@@ -1,6 +1,8 @@\n struct syl\n-{\tint op,p1,p2,p3;\n-};\n+{\tint op;\n+\tint p1;\n+\tunion { int i[2]; char *s;} p2;\n+\t};\n #define RET1 1\n #define REVERT 2\n #define GOTO 3\n@@ -37,7 +39,6 @@ struct syl\n #define OM 34\n #define Z 35\n #define ZM 36\n-extern struct syl f__syl[];\n extern int f__pc,f__parenlvl,f__revloc;\n typedef union\n {\treal pf;\n@@ -78,6 +79,7 @@ extern int wrt_L(Uint*, int, ftnlen);\n #endif\n extern flag f__cblank,f__cplus,f__workdone, f__nonl;\n extern char *f__fmtbuf;\n+extern int f__fmtlen;\n extern int f__scale;\n #define GET(x) if((x=(*f__getn)())<0) return(x)\n #define VAL(x) (x!='\\n'?x:' ')"}, {"sha": "4fb14eed29ec51b70cdee0dfe987d2058395b0ff", "filename": "gcc/f/runtime/libI77/lread.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fruntime%2FlibI77%2Flread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fruntime%2FlibI77%2Flread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fruntime%2FlibI77%2Flread.c?ref=82d109f263f6ebca5c7e3b5e2c9588fe49e14651", "patch": "@@ -8,6 +8,7 @@\n \n \n extern char *f__fmtbuf;\n+extern int f__fmtlen;\n \n #ifdef Allow_TYQUAD\n static longint f__llx;\n@@ -518,6 +519,7 @@ c_le(cilist *a)\n \tif(f__init != 1) f_init();\n \tf__init = 3;\n \tf__fmtbuf=\"list io\";\n+\tf__fmtlen=7;\n \tif(a->ciunit>=MXUNIT || a->ciunit<0)\n \t\terr(a->cierr,101,\"stler\");\n \tf__scale=f__recpos=0;"}, {"sha": "b03bcc5dbf6572ab7112266dc05f21198662b057", "filename": "gcc/f/runtime/libI77/rdfmt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fruntime%2FlibI77%2Frdfmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fruntime%2FlibI77%2Frdfmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fruntime%2FlibI77%2Frdfmt.c?ref=82d109f263f6ebca5c7e3b5e2c9588fe49e14651", "patch": "@@ -433,7 +433,7 @@ rd_ed(struct syl *p, char *ptr, ftnlen len)\n \tcase D:\n \tcase G:\n \tcase GE:\n-\tcase F:\tch = rd_F((ufloat *)ptr,p->p1,p->p2,len);\n+\tcase F:\tch = rd_F((ufloat *)ptr,p->p1,p->p2.i[0],len);\n \t\tbreak;\n \n \t\t/* Z and ZM assume 8-bit bytes. */\n@@ -460,8 +460,8 @@ rd_ned(struct syl *p)\n \tdefault: fprintf(stderr,\"rd_ned, unexpected code: %d\\n\", p->op);\n \t\tsig_die(f__fmtbuf, 1);\n \tcase APOS:\n-\t\treturn(rd_POS(*(char **)&p->p2));\n-\tcase H:\treturn(rd_H(p->p1,*(char **)&p->p2));\n+\t\treturn(rd_POS(p->p2.s));\n+\tcase H:\treturn(rd_H(p->p1,p->p2.s));\n \tcase SLASH: return((*f__donewrec)());\n \tcase TR:\n \tcase X:\tf__cursor += p->p1;"}, {"sha": "4350fc984f61d4339ec46493825e677eec2eb9bb", "filename": "gcc/f/runtime/libI77/wrtfmt.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fruntime%2FlibI77%2Fwrtfmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fruntime%2FlibI77%2Fwrtfmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fruntime%2FlibI77%2Fwrtfmt.c?ref=82d109f263f6ebca5c7e3b5e2c9588fe49e14651", "patch": "@@ -326,33 +326,33 @@ w_ed(struct syl *p, char *ptr, ftnlen len)\n \t\tsig_die(f__fmtbuf, 1);\n \tcase I:\treturn(wrt_I((Uint *)ptr,p->p1,len, 10));\n \tcase IM:\n-\t\treturn(wrt_IM((Uint *)ptr,p->p1,p->p2,len,10));\n+\t\treturn(wrt_IM((Uint *)ptr,p->p1,p->p2.i[0],len,10));\n \n \t\t/* O and OM don't work right for character, double, complex, */\n \t\t/* or doublecomplex, and they differ from Fortran 90 in */\n \t\t/* showing a minus sign for negative values. */\n \n \tcase O:\treturn(wrt_I((Uint *)ptr, p->p1, len, 8));\n \tcase OM:\n-\t\treturn(wrt_IM((Uint *)ptr,p->p1,p->p2,len,8));\n+\t\treturn(wrt_IM((Uint *)ptr,p->p1,p->p2.i[0],len,8));\n \tcase L:\treturn(wrt_L((Uint *)ptr,p->p1, len));\n \tcase A: return(wrt_A(ptr,len));\n \tcase AW:\n \t\treturn(wrt_AW(ptr,p->p1,len));\n \tcase D:\n \tcase E:\n \tcase EE:\n-\t\treturn(wrt_E((ufloat *)ptr,p->p1,p->p2,p->p3,len));\n+\t\treturn(wrt_E((ufloat *)ptr,p->p1,p->p2.i[0],p->p2.i[1],len));\n \tcase G:\n \tcase GE:\n-\t\treturn(wrt_G((ufloat *)ptr,p->p1,p->p2,p->p3,len));\n-\tcase F:\treturn(wrt_F((ufloat *)ptr,p->p1,p->p2,len));\n+\t\treturn(wrt_G((ufloat *)ptr,p->p1,p->p2.i[0],p->p2.i[1],len));\n+\tcase F:\treturn(wrt_F((ufloat *)ptr,p->p1,p->p2.i[0],len));\n \n \t\t/* Z and ZM assume 8-bit bytes. */\n \n \tcase Z: return(wrt_Z((Uint *)ptr,p->p1,0,len));\n \tcase ZM:\n-\t\treturn(wrt_Z((Uint *)ptr,p->p1,p->p2,len));\n+\t\treturn(wrt_Z((Uint *)ptr,p->p1,p->p2.i[0],len));\n \t}\n }\n #ifdef KR_headers\n@@ -378,8 +378,8 @@ w_ned(struct syl *p)\n \t\tf__cursor += p->p1;\n \t\treturn(1);\n \tcase APOS:\n-\t\treturn(wrt_AP(*(char **)&p->p2));\n+\t\treturn(wrt_AP(p->p2.s));\n \tcase H:\n-\t\treturn(wrt_H(p->p1,*(char **)&p->p2));\n+\t\treturn(wrt_H(p->p1,p->p2.s));\n \t}\n }"}, {"sha": "e74898762e9aaa2136438d5864c2c66f5171bf67", "filename": "gcc/f/runtime/readme.netlib", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fruntime%2Freadme.netlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fruntime%2Freadme.netlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fruntime%2Freadme.netlib?ref=82d109f263f6ebca5c7e3b5e2c9588fe49e14651", "patch": "@@ -521,10 +521,19 @@ with F8X_NML_ELIDE_QUOTES #defined.  wrtfmt.o: wrt_G: tweak to print\n the right number of 0's for zero under G format.\n \n Sat Aug 16 05:45:32 EDT 1997\n-  libI77: iio.c: fix bug in internal writes to an array of character\n+  libi77: iio.c: fix bug in internal writes to an array of character\n strings that sometimes caused one more array element than required by\n the format to be blank-filled.  Example: format(1x).\n \n+Wed Sep 17 00:39:29 EDT 1997\n+  libi77: fmt.[ch] rdfmt.c wrtfmt.c: tweak struct syl for machines\n+with 64-bit pointers and 32-bit ints that did not 64-bit align\n+struct syl (e.g., Linux on the DEC Alpha).  This change should be\n+invisible on other machines.\n+\n+Sun Sep 21 22:05:19 EDT 1997\n+  libf77: [de]time_.c (Unix systems only): change return type to double.\n+\n Current timestamps of files in \"all from f2c/src\", sorted by time,\n appear below (mm/dd/year hh:mm:ss).  To bring your source up to date,\n obtain source files with a timestamp later than the time shown in your"}, {"sha": "a11f00c9cd22cff9b5897b0d0e14b77bfd1ee3e4", "filename": "gcc/f/stu.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fstu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fstu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fstu.c?ref=82d109f263f6ebca5c7e3b5e2c9588fe49e14651", "patch": "@@ -924,7 +924,7 @@ ffestu_sym_exec_transition (ffesymbol s)\n static void\n ffestu_list_exec_transition_ (ffebld list)\n {\n-  static in_progress = FALSE;\n+  static bool in_progress = FALSE;\n   ffebld item;\n   ffesymbol symbol;\n \n@@ -1116,7 +1116,7 @@ ffestu_symter_exec_transition_ (ffebld expr)\n static bool\n ffestu_dummies_transition_ (ffesymbol (*symfunc) (), ffebld list)\n {\n-  static in_progress = FALSE;\n+  static bool in_progress = FALSE;\n   ffebld item;\n   ffesymbol symbol;\n   bool uncertain = FALSE;"}, {"sha": "dd56aeb76a0df337fdc0fc9c5d1ca70ad0bc688d", "filename": "gcc/f/version.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d109f263f6ebca5c7e3b5e2c9588fe49e14651/gcc%2Ff%2Fversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fversion.c?ref=82d109f263f6ebca5c7e3b5e2c9588fe49e14651", "patch": "@@ -31,4 +31,4 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n #include \"version.h\"\n \n-char *ffe_version_string = \"0.5.21-19970909\";\n+char *ffe_version_string = \"0.5.22-19970929\""}]}