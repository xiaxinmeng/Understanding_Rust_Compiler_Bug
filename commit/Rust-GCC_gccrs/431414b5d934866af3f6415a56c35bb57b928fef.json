{"sha": "431414b5d934866af3f6415a56c35bb57b928fef", "node_id": "C_kwDOANBUbNoAKDQzMTQxNGI1ZDkzNDg2NmFmM2Y2NDE1YTU2YzM1YmI1N2I5MjhmZWY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-03T08:13:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-03T08:13:32Z"}, "message": "openmp: Disable SSA form during gimplification on OMP_SIMD clauses and body [PR104757]\n\nWhen offloading to nvptx is enabled, scan_omp_simd duplicates the simd\nregion including its clauses and body using inliner's\ncopy_gimple_seq_and_replace_locals.  That works nicely for decls, remaps\nonly those that are seen in the nested bind expr vars (i.e. local variables)\nand doesn't remap other vars.  But for SSA_NAMEs it remaps them always, doesn't\nknow if their def stmt is outside of the simd (then it better shouldn't be remapped)\nor inside of it (then it should) and without cfg/dominators that is pretty hard\nto figure out (well, we could walk the region twice, once note SSA_NAMEs defined\nby each stmt seen there and once do the remapping of only those visited SSA_NAMEs).\n\nThis patch uses a simpler way, disables temporarily into_ssa for the clauses and\nbody of each simd region; we already disable into_ssa e.g. in parallel/target/task\netc. regions through push_gimplify_context () but for simd we don't push\nany gimplification context and appart from into_ssa I think we don't need it.\n\n2022-03-03  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/104757\n\t* gimplify.cc (gimplify_omp_loop): Call gimplify_expr rather than\n\tgimplify_omp_for.\n\t(gimplify_expr) <case OMP_SIMD>: Temporarily disable\n\tgimplify_ctxp->into_ssa around call to gimplify_omp_for.\n\n\t* gfortran.dg/gomp/pr104757.f90: New test.\n\t* gcc.dg/gomp/pr104757.c: New test.", "tree": {"sha": "143d1be1efe063d8ae6834c8822aa279eaa19fef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/143d1be1efe063d8ae6834c8822aa279eaa19fef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/431414b5d934866af3f6415a56c35bb57b928fef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/431414b5d934866af3f6415a56c35bb57b928fef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/431414b5d934866af3f6415a56c35bb57b928fef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/431414b5d934866af3f6415a56c35bb57b928fef/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6e6e0a97340068c90fe091482efbaacd6474754", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6e6e0a97340068c90fe091482efbaacd6474754", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6e6e0a97340068c90fe091482efbaacd6474754"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "be8f0d3c76faa7d03a2e8a6db531a17849578018", "filename": "gcc/gimplify.cc", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/431414b5d934866af3f6415a56c35bb57b928fef/gcc%2Fgimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/431414b5d934866af3f6415a56c35bb57b928fef/gcc%2Fgimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.cc?ref=431414b5d934866af3f6415a56c35bb57b928fef", "patch": "@@ -13786,7 +13786,7 @@ gimplify_omp_loop (tree *expr_p, gimple_seq *pre_p)\n       *pc = NULL_TREE;\n       *expr_p = t;\n     }\n-  return gimplify_omp_for (expr_p, pre_p);\n+  return gimplify_expr (expr_p, pre_p, NULL, is_gimple_stmt, fb_none);\n }\n \n \n@@ -15540,8 +15540,19 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t  ret = GS_ALL_DONE;\n \t  break;\n \n-\tcase OMP_FOR:\n \tcase OMP_SIMD:\n+\t  {\n+\t    /* Temporarily disable into_ssa, as scan_omp_simd\n+\t       which calls copy_gimple_seq_and_replace_locals can't deal\n+\t       with SSA_NAMEs defined outside of the body properly.  */\n+\t    bool saved_into_ssa = gimplify_ctxp->into_ssa;\n+\t    gimplify_ctxp->into_ssa = false;\n+\t    ret = gimplify_omp_for (expr_p, pre_p);\n+\t    gimplify_ctxp->into_ssa = saved_into_ssa;\n+\t    break;\n+\t  }\n+\n+\tcase OMP_FOR:\n \tcase OMP_DISTRIBUTE:\n \tcase OMP_TASKLOOP:\n \tcase OACC_LOOP:"}, {"sha": "738396523af7769c64a8e64bff33ce2c1dd8ba38", "filename": "gcc/testsuite/gcc.dg/gomp/pr104757.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/431414b5d934866af3f6415a56c35bb57b928fef/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr104757.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/431414b5d934866af3f6415a56c35bb57b928fef/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr104757.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr104757.c?ref=431414b5d934866af3f6415a56c35bb57b928fef", "patch": "@@ -0,0 +1,14 @@\n+/* PR middle-end/104757 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp\" } */\n+\n+#pragma omp declare target\n+void\n+foo (int x, int y, int *z)\n+{\n+  int j = 0;\n+  #pragma omp simd linear(j:x + y)\n+  for (int i = 0; i < 64; i++)\n+    j += x + y;\n+}\n+#pragma omp end declare target"}, {"sha": "6f1aef54ed0e00080fbcf56b006aa8bd530e6872", "filename": "gcc/testsuite/gfortran.dg/gomp/pr104757.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/431414b5d934866af3f6415a56c35bb57b928fef/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr104757.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/431414b5d934866af3f6415a56c35bb57b928fef/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr104757.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr104757.f90?ref=431414b5d934866af3f6415a56c35bb57b928fef", "patch": "@@ -0,0 +1,19 @@\n+! PR middle-end/104757\n+! { dg-do compile }\n+! { dg-options \"-O -fopenmp\" }\n+\n+module pr104757\n+  implicit none (external, type)\n+  integer :: ll\n+  !$omp declare target (ll)\n+contains\n+  subroutine foo (i1)\n+    !$omp declare target (foo)\n+    logical :: i1\n+    integer :: i\n+    !$omp distribute simd if(i1)\n+    do i = 1, 64\n+      ll = ll + 1\n+    end do\n+  end\n+end module"}]}