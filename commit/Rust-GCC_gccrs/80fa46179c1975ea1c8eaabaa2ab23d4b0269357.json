{"sha": "80fa46179c1975ea1c8eaabaa2ab23d4b0269357", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBmYTQ2MTc5YzE5NzVlYTFjOGVhYWJhYTJhYjIzZDRiMDI2OTM1Nw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-12-03T15:10:58Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-12-03T15:10:58Z"}, "message": "exp_util.adb (Make_CW_Equivalent_Type): Set the Is_Class_Wide_Equivalent_Type flag here in lieu of...\n\n\t* exp_util.adb (Make_CW_Equivalent_Type): Set the\n\tIs_Class_Wide_Equivalent_Type flag here in lieu of...\n\t(Make_Subtype_From_Expr): ...here.\n\t* exp_ch3.adb (Expand_Freeze_Record_Type): Do not set\n\tHas_Controlled_Component on class-wide equivalent types.\n\t* freeze.adb (Freeze_Record_Type): Likewise.\n\t* sem_ch3.adb (Record_Type_Definition): Likewise.\n\nFrom-SVN: r154950", "tree": {"sha": "38a7f7a6df807eb6be54895eaac6ba1d026d395a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38a7f7a6df807eb6be54895eaac6ba1d026d395a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80fa46179c1975ea1c8eaabaa2ab23d4b0269357", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80fa46179c1975ea1c8eaabaa2ab23d4b0269357", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80fa46179c1975ea1c8eaabaa2ab23d4b0269357", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80fa46179c1975ea1c8eaabaa2ab23d4b0269357/comments", "author": null, "committer": null, "parents": [{"sha": "cf9eb56580e4ebabff35cfa5484ece3c86f1120c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf9eb56580e4ebabff35cfa5484ece3c86f1120c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf9eb56580e4ebabff35cfa5484ece3c86f1120c"}], "stats": {"total": 117, "additions": 98, "deletions": 19}, "files": [{"sha": "620b287d0159a793c3be9b60fa114a5667e39c71", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80fa46179c1975ea1c8eaabaa2ab23d4b0269357/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80fa46179c1975ea1c8eaabaa2ab23d4b0269357/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=80fa46179c1975ea1c8eaabaa2ab23d4b0269357", "patch": "@@ -1,3 +1,13 @@\n+2009-12-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_util.adb (Make_CW_Equivalent_Type): Set the\n+\tIs_Class_Wide_Equivalent_Type flag here in lieu of...\n+\t(Make_Subtype_From_Expr): ...here.\n+\t* exp_ch3.adb (Expand_Freeze_Record_Type): Do not set\n+\tHas_Controlled_Component on class-wide equivalent types.\n+\t* freeze.adb (Freeze_Record_Type): Likewise.\n+\t* sem_ch3.adb (Record_Type_Definition): Likewise.\n+\n 2009-12-01  Pascal Obry  <obry@adacore.com>\n \n \t* s-osprim-mingw.adb (Get_Base_Time): Make sure that the base time is"}, {"sha": "9420558b9fd3678209afac3926380474c8e6449b", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80fa46179c1975ea1c8eaabaa2ab23d4b0269357/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80fa46179c1975ea1c8eaabaa2ab23d4b0269357/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=80fa46179c1975ea1c8eaabaa2ab23d4b0269357", "patch": "@@ -5715,9 +5715,13 @@ package body Exp_Ch3 is\n          if Has_Task (Comp_Typ) then\n             Set_Has_Task (Def_Id);\n \n-         elsif Has_Controlled_Component (Comp_Typ)\n-           or else (Chars (Comp) /= Name_uParent\n-                     and then Is_Controlled (Comp_Typ))\n+         --  Do not set Has_Controlled_Component on a class-wide equivalent\n+         --  type. See Make_CW_Equivalent_Type.\n+\n+         elsif not Is_Class_Wide_Equivalent_Type (Def_Id)\n+           and then (Has_Controlled_Component (Comp_Typ)\n+                      or else (Chars (Comp) /= Name_uParent\n+                                and then Is_Controlled (Comp_Typ)))\n          then\n             Set_Has_Controlled_Component (Def_Id);\n "}, {"sha": "c450b677faf240f597e92c068e63d3568c03ec59", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80fa46179c1975ea1c8eaabaa2ab23d4b0269357/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80fa46179c1975ea1c8eaabaa2ab23d4b0269357/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=80fa46179c1975ea1c8eaabaa2ab23d4b0269357", "patch": "@@ -3811,6 +3811,14 @@ package body Exp_Util is\n       Set_Ekind (Equiv_Type, E_Record_Type);\n       Set_Parent_Subtype (Equiv_Type, Constr_Root);\n \n+      --  Set Is_Class_Wide_Equivalent_Type very early to trigger the special\n+      --  treatment for this type. In particular, even though _parent's type\n+      --  is a controlled type or contains controlled components, we do not\n+      --  want to set Has_Controlled_Component on it to avoid making it gain\n+      --  an unwanted _controller component.\n+\n+      Set_Is_Class_Wide_Equivalent_Type (Equiv_Type);\n+\n       if not Is_Interface (Root_Typ) then\n          Append_To (Comp_List,\n            Make_Component_Declaration (Loc,\n@@ -4024,11 +4032,6 @@ package body Exp_Util is\n \n             CW_Subtype := New_Class_Wide_Subtype (Unc_Typ, E);\n             Set_Equivalent_Type (CW_Subtype, EQ_Typ);\n-\n-            if Present (EQ_Typ) then\n-               Set_Is_Class_Wide_Equivalent_Type (EQ_Typ);\n-            end if;\n-\n             Set_Cloned_Subtype (CW_Subtype, Base_Type (Unc_Typ));\n \n             return New_Occurrence_Of (CW_Subtype, Loc);"}, {"sha": "26b821d38d108cac66b3fb2fd601ca9cd1473e15", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80fa46179c1975ea1c8eaabaa2ab23d4b0269357/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80fa46179c1975ea1c8eaabaa2ab23d4b0269357/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=80fa46179c1975ea1c8eaabaa2ab23d4b0269357", "patch": "@@ -2185,14 +2185,21 @@ package body Freeze is\n \n             Comp := First_Component (Rec);\n             while Present (Comp) loop\n-               if Has_Controlled_Component (Etype (Comp))\n-                 or else (Chars (Comp) /= Name_uParent\n-                           and then Is_Controlled (Etype (Comp)))\n-                 or else (Is_Protected_Type (Etype (Comp))\n-                           and then Present\n-                             (Corresponding_Record_Type (Etype (Comp)))\n-                           and then Has_Controlled_Component\n-                             (Corresponding_Record_Type (Etype (Comp))))\n+\n+               --  Do not set Has_Controlled_Component on a class-wide\n+               --  equivalent type. See Make_CW_Equivalent_Type.\n+\n+               if not Is_Class_Wide_Equivalent_Type (Rec)\n+                 and then (Has_Controlled_Component (Etype (Comp))\n+                            or else (Chars (Comp) /= Name_uParent\n+                                      and then Is_Controlled (Etype (Comp)))\n+                            or else (Is_Protected_Type (Etype (Comp))\n+                                      and then Present\n+                                        (Corresponding_Record_Type\n+                                          (Etype (Comp)))\n+                                      and then Has_Controlled_Component\n+                                        (Corresponding_Record_Type\n+                                          (Etype (Comp)))))\n                then\n                   Set_Has_Controlled_Component (Rec);\n                   exit;"}, {"sha": "f0463aaac94edf1dc541e2226b9fd680545245a2", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80fa46179c1975ea1c8eaabaa2ab23d4b0269357/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80fa46179c1975ea1c8eaabaa2ab23d4b0269357/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=80fa46179c1975ea1c8eaabaa2ab23d4b0269357", "patch": "@@ -18028,9 +18028,13 @@ package body Sem_Ch3 is\n          if Ekind (Component) /= E_Component then\n             null;\n \n-         elsif Has_Controlled_Component (Etype (Component))\n-           or else (Chars (Component) /= Name_uParent\n-                     and then Is_Controlled (Etype (Component)))\n+         --  Do not set Has_Controlled_Component on a class-wide equivalent\n+         --  type. See Make_CW_Equivalent_Type.\n+\n+         elsif not Is_Class_Wide_Equivalent_Type (T)\n+           and then (Has_Controlled_Component (Etype (Component))\n+                      or else (Chars (Component) /= Name_uParent\n+                                and then Is_Controlled (Etype (Component))))\n          then\n             Set_Has_Controlled_Component (T, True);\n             Final_Storage_Only :="}, {"sha": "24b38d2e08e44150242d08534ee7eff866415f2f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80fa46179c1975ea1c8eaabaa2ab23d4b0269357/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80fa46179c1975ea1c8eaabaa2ab23d4b0269357/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=80fa46179c1975ea1c8eaabaa2ab23d4b0269357", "patch": "@@ -1,3 +1,8 @@\n+2009-12-03  Quentin Ochem  <ochem@adacore.com>\n+\n+\t* gnat.dg/controlled5.adb: New test.\n+\t* gnat.dg/controlled5_pkg.ad[sb]: New helper.\n+\n 2009-12-03  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/42217"}, {"sha": "4c54249d439255bd71a39fe9b39dd371b531a445", "filename": "gcc/testsuite/gnat.dg/controlled5.adb", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80fa46179c1975ea1c8eaabaa2ab23d4b0269357/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80fa46179c1975ea1c8eaabaa2ab23d4b0269357/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled5.adb?ref=80fa46179c1975ea1c8eaabaa2ab23d4b0269357", "patch": "@@ -0,0 +1,9 @@\n+-- { dg-do run }\n+\n+with Controlled5_Pkg; use Controlled5_Pkg;\n+\n+procedure Controlled5 is\n+   V : Root'Class := Dummy (300);\n+begin\n+   null;\n+end;"}, {"sha": "828f9efec1ab0340ec082b3dbea0477f0804e1e1", "filename": "gcc/testsuite/gnat.dg/controlled5_pkg.adb", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80fa46179c1975ea1c8eaabaa2ab23d4b0269357/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled5_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80fa46179c1975ea1c8eaabaa2ab23d4b0269357/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled5_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled5_pkg.adb?ref=80fa46179c1975ea1c8eaabaa2ab23d4b0269357", "patch": "@@ -0,0 +1,18 @@\n+with Ada.Tags;\n+\n+package body Controlled5_Pkg is\n+\n+   type Child is new Root with null record;\n+\n+   function Dummy (I : Integer) return Root'Class is\n+      A1 : T_Root_Class := new Child;\n+      My_Var : Root'Class := A1.all;\n+   begin\n+      if I = 0 then\n+         return My_Var;\n+      else\n+         return Dummy (I - 1);\n+      end if;\n+   end Dummy;\n+\n+end Controlled5_Pkg;"}, {"sha": "53720398753bc8e8200bcd7f2bb4885f148a8dcf", "filename": "gcc/testsuite/gnat.dg/controlled5_pkg.ads", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80fa46179c1975ea1c8eaabaa2ab23d4b0269357/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled5_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80fa46179c1975ea1c8eaabaa2ab23d4b0269357/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled5_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled5_pkg.ads?ref=80fa46179c1975ea1c8eaabaa2ab23d4b0269357", "patch": "@@ -0,0 +1,19 @@\n+with Ada.Finalization; use Ada.Finalization;\n+\n+package Controlled5_Pkg is\n+\n+   type Root is tagged private;\n+\n+   type Inner is new Ada.Finalization.Controlled with null record;\n+\n+   type T_Root_Class is access all Root'Class;\n+\n+   function Dummy (I : Integer) return Root'Class;\n+\n+private\n+\n+   type Root is tagged record\n+      F2 : Inner;\n+   end record;\n+\n+end Controlled5_Pkg;"}]}