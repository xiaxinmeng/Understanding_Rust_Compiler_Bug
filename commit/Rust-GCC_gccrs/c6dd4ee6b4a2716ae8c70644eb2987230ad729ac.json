{"sha": "c6dd4ee6b4a2716ae8c70644eb2987230ad729ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZkZDRlZTZiNGEyNzE2YWU4YzcwNjQ0ZWIyOTg3MjMwYWQ3MjlhYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-03-22T18:33:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-03-22T18:33:37Z"}, "message": "re PR rtl-optimization/63191 (32-bit gcc uses excessive memory during dead store elimination with -fPIC)\n\n\tPR rtl-optimization/63191\n\t* config/i386/i386.c (ix86_delegitimize_address): Turn into small\n\twrapper function, moved the whole old content into ...\n\t(ix86_delegitimize_address_1): ... this.  New inline function.\n\t(ix86_find_base_term): Use ix86_delegitimize_address_1 with\n\ttrue as last argument instead of ix86_delegitimize_address.\n\nFrom-SVN: r246398", "tree": {"sha": "f9bb79e947b0f5d45222e3ffc658c82a054d9204", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9bb79e947b0f5d45222e3ffc658c82a054d9204"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6dd4ee6b4a2716ae8c70644eb2987230ad729ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6dd4ee6b4a2716ae8c70644eb2987230ad729ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6dd4ee6b4a2716ae8c70644eb2987230ad729ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6dd4ee6b4a2716ae8c70644eb2987230ad729ac/comments", "author": null, "committer": null, "parents": [{"sha": "9094d4a46f518bb5f37c654d2119a00ecdd2b5bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9094d4a46f518bb5f37c654d2119a00ecdd2b5bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9094d4a46f518bb5f37c654d2119a00ecdd2b5bb"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "00d2015f9593bf4ed3f2fd2ecb8167a22d98bdee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6dd4ee6b4a2716ae8c70644eb2987230ad729ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6dd4ee6b4a2716ae8c70644eb2987230ad729ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6dd4ee6b4a2716ae8c70644eb2987230ad729ac", "patch": "@@ -1,7 +1,16 @@\n+2017-03-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/63191\n+\t* config/i386/i386.c (ix86_delegitimize_address): Turn into small\n+\twrapper function, moved the whole old content into ...\n+\t(ix86_delegitimize_address_1): ... this.  New inline function.\n+\t(ix86_find_base_term): Use ix86_delegitimize_address_1 with\n+\ttrue as last argument instead of ix86_delegitimize_address.\n+\n 2017-03-22  Wilco Dijkstra  <wdijkstr@arm.com>\n \n-\t* config/aarch64/aarch64.c (generic_branch_cost):\n-\tCopycortexa57_branch_cost.\n+\t* config/aarch64/aarch64.c (generic_branch_cost): Copy\n+\tcortexa57_branch_cost.\n \n 2017-03-22  Wilco Dijkstra  <wdijkstr@arm.com>\n "}, {"sha": "0f7e02951218d67379a184e41fb6acf8d31e8499", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6dd4ee6b4a2716ae8c70644eb2987230ad729ac/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6dd4ee6b4a2716ae8c70644eb2987230ad729ac/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c6dd4ee6b4a2716ae8c70644eb2987230ad729ac", "patch": "@@ -17261,10 +17261,16 @@ ix86_delegitimize_tls_address (rtx orig_x)\n    has a different PIC label for each routine but the DWARF debugging\n    information is not associated with any particular routine, so it's\n    necessary to remove references to the PIC label from RTL stored by\n-   the DWARF output code.  */\n+   the DWARF output code.\n \n-static rtx\n-ix86_delegitimize_address (rtx x)\n+   This helper is used in the normal ix86_delegitimize_address\n+   entrypoint (e.g. used in the target delegitimization hook) and\n+   in ix86_find_base_term.  As compile time memory optimization, we\n+   avoid allocating rtxes that will not change anything on the outcome\n+   of the callers (find_base_value and find_base_term).  */\n+\n+static inline rtx\n+ix86_delegitimize_address_1 (rtx x, bool base_term_p)\n {\n   rtx orig_x = delegitimize_mem_from_attrs (x);\n   /* addend is NULL or some rtx if x is something+GOTOFF where\n@@ -17291,6 +17297,10 @@ ix86_delegitimize_address (rtx x)\n           && GET_CODE (XEXP (XEXP (x, 0), 0)) == UNSPEC\n           && XINT (XEXP (XEXP (x, 0), 0), 1) == UNSPEC_PCREL)\n         {\n+\t  /* find_base_{value,term} only care about MEMs with arg_pointer_rtx\n+\t     base.  A CONST can't be arg_pointer_rtx based.  */\n+\t  if (base_term_p && MEM_P (orig_x))\n+\t    return orig_x;\n \t  rtx x2 = XVECEXP (XEXP (XEXP (x, 0), 0), 0, 0);\n \t  x = gen_rtx_PLUS (Pmode, XEXP (XEXP (x, 0), 1), x2);\n \t  if (MEM_P (orig_x))\n@@ -17367,7 +17377,9 @@ ix86_delegitimize_address (rtx x)\n   if (! result)\n     return ix86_delegitimize_tls_address (orig_x);\n \n-  if (const_addend)\n+  /* For (PLUS something CONST_INT) both find_base_{value,term} just\n+     recurse on the first operand.  */\n+  if (const_addend && !base_term_p)\n     result = gen_rtx_CONST (Pmode, gen_rtx_PLUS (Pmode, result, const_addend));\n   if (reg_addend)\n     result = gen_rtx_PLUS (Pmode, reg_addend, result);\n@@ -17405,6 +17417,14 @@ ix86_delegitimize_address (rtx x)\n   return result;\n }\n \n+/* The normal instantiation of the above template.  */\n+\n+static rtx\n+ix86_delegitimize_address (rtx x)\n+{\n+  return ix86_delegitimize_address_1 (x, false);\n+}\n+\n /* If X is a machine specific address (i.e. a symbol or label being\n    referenced as a displacement from the GOT implemented using an\n    UNSPEC), then return the base term.  Otherwise return X.  */\n@@ -17430,7 +17450,7 @@ ix86_find_base_term (rtx x)\n       return XVECEXP (term, 0, 0);\n     }\n \n-  return ix86_delegitimize_address (x);\n+  return ix86_delegitimize_address_1 (x, true);\n }\n \f\n static void"}]}