{"sha": "e373dd067e6f29cd333cddd741611f5979718c58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM3M2RkMDY3ZTZmMjljZDMzM2NkZGQ3NDE2MTFmNTk3OTcxOGM1OA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-08-12T12:58:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-08-12T12:58:15Z"}, "message": "re PR tree-optimization/57326 (Piecewise folding of operations on PHI nodes)\n\n2016-08-12  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/57326\n\t* tree-ssa-pre.c (fully_constant_expression): Handle simplification\n\treturning an SSA name.\n\t(phi_translate_1): When fully_constant_expression returns a NAME\n\tmake sure we have a leader for it.\n\n\t* gcc.dg/tree-ssa/ssa-pre-32.c: New testcase.\n\t* gcc.dg/tree-ssa/loadpre14.c: Adjust.\n\t* gcc.dg/tree-ssa/pr35287.c: Likewise.\n\t* gcc.target/i386/pr45685.c: Likewise.\n\t* gcc.dg/tree-ssa/predcom-1.c: Disable PRE.\n\t* gcc.dg/tree-ssa/predcom-2.c: Likewise.\n\t* gcc.dg/tree-ssa/predcom-3.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-sink-10.c: Likewise.\n\t* gfortran.dg/pr34163.f90: Likewise.\n\nFrom-SVN: r239414", "tree": {"sha": "9f4ca179884496904f5a175a84357487283ad659", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f4ca179884496904f5a175a84357487283ad659"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e373dd067e6f29cd333cddd741611f5979718c58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e373dd067e6f29cd333cddd741611f5979718c58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e373dd067e6f29cd333cddd741611f5979718c58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e373dd067e6f29cd333cddd741611f5979718c58/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "20d1af89b40d0a939a7afefeecf6652bd587e18b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20d1af89b40d0a939a7afefeecf6652bd587e18b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20d1af89b40d0a939a7afefeecf6652bd587e18b"}], "stats": {"total": 83, "additions": 64, "deletions": 19}, "files": [{"sha": "355f80d20dcbf47317a8926476e8ed82a48af7cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e373dd067e6f29cd333cddd741611f5979718c58/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e373dd067e6f29cd333cddd741611f5979718c58/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e373dd067e6f29cd333cddd741611f5979718c58", "patch": "@@ -1,3 +1,11 @@\n+2016-08-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/57326\n+\t* tree-ssa-pre.c (fully_constant_expression): Handle simplification\n+\treturning an SSA name.\n+\t(phi_translate_1): When fully_constant_expression returns a NAME\n+\tmake sure we have a leader for it.\n+\n 2016-08-12  Martin Liska  <mliska@suse.cz>\n \n \t    Adam Fineman  <afineman@afineman.com>"}, {"sha": "1691c25a76702295ed0a1aa90d1ee0373ec274d1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e373dd067e6f29cd333cddd741611f5979718c58/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e373dd067e6f29cd333cddd741611f5979718c58/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e373dd067e6f29cd333cddd741611f5979718c58", "patch": "@@ -1,3 +1,16 @@\n+2016-08-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/57326\n+\t* gcc.dg/tree-ssa/ssa-pre-32.c: New testcase.\n+\t* gcc.dg/tree-ssa/loadpre14.c: Adjust.\n+\t* gcc.dg/tree-ssa/pr35287.c: Likewise.\n+\t* gcc.target/i386/pr45685.c: Likewise.\n+\t* gcc.dg/tree-ssa/predcom-1.c: Disable PRE.\n+\t* gcc.dg/tree-ssa/predcom-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/predcom-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-sink-10.c: Likewise.\n+\t* gfortran.dg/pr34163.f90: Likewise.\n+\n 2016-08-12  Martin Liska  <mliska@suse.cz>\n \n \t* g++.dg/gcov/gcov-16.C: New test."}, {"sha": "456c89f99419e391e983a50c32b56ddc19df5c46", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loadpre14.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e373dd067e6f29cd333cddd741611f5979718c58/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e373dd067e6f29cd333cddd741611f5979718c58/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre14.c?ref=e373dd067e6f29cd333cddd741611f5979718c58", "patch": "@@ -6,7 +6,8 @@ int foo(type *a, int argc)\n   type c = {0, 1};\n   int d, e;\n \n-  /* Should be able to eliminate the second load of *a along the main path. */\n+  /* Should be able to eliminate the second load of *a and the add of zero\n+     along the main path. */\n   d = (*a)[0];\n   if (argc)\n     {\n@@ -15,4 +16,4 @@ int foo(type *a, int argc)\n   e = (*a)[0];\n   return d + e;\n }\n-/* { dg-final { scan-tree-dump-times \"Eliminated: 1\" 1 \"pre\"} } */\n+/* { dg-final { scan-tree-dump-times \"Eliminated: 2\" 1 \"pre\"} } */"}, {"sha": "f7cc5c0426211b82caeb3fd0d894e8c4f3702a1f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr35287.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e373dd067e6f29cd333cddd741611f5979718c58/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr35287.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e373dd067e6f29cd333cddd741611f5979718c58/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr35287.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr35287.c?ref=e373dd067e6f29cd333cddd741611f5979718c58", "patch": "@@ -10,5 +10,6 @@ int foo(int p)\n   return (*gp + t);\n }\n \n-/* We will eliminate one load of gp and one indirect load of *gp. */\n-/* { dg-final { scan-tree-dump-times \"Eliminated: 2\" 1 \"pre\"} } */\n+/* We will eliminate one load of gp and one indirect load of *gp and\n+   the add of zero. */\n+/* { dg-final { scan-tree-dump-times \"Eliminated: 3\" 1 \"pre\"} } */"}, {"sha": "4bc2ea5659b32a90a10180e1d915ab986bf61831", "filename": "gcc/testsuite/gcc.dg/tree-ssa/predcom-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e373dd067e6f29cd333cddd741611f5979718c58/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e373dd067e6f29cd333cddd741611f5979718c58/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-1.c?ref=e373dd067e6f29cd333cddd741611f5979718c58", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-do run } */\n-/* { dg-options \"-O2 -funroll-loops --param max-unroll-times=8 -fpredictive-commoning -fdump-tree-pcom-details\" } */\n+/* { dg-options \"-O2 -funroll-loops --param max-unroll-times=8 -fpredictive-commoning -fdump-tree-pcom-details -fno-tree-pre\" } */\n \n void abort (void);\n \n@@ -45,6 +45,6 @@ int main(void)\n /* Verify that both loops were transformed and unrolled.  */\n /* { dg-final { scan-tree-dump-times \"Unrolling 2 times.\" 2 \"pcom\"} } */\n \n-/* Also check that we undid the transformation previously made by PRE.  */\n-/* { dg-final { scan-tree-dump-times \"looparound ref\" 1 \"pcom\"} } */\n-\n+/* Also check that we undid the transformation previously made by PRE.\n+   ???  PRE now does the predictive commoning in count_averages.  */\n+/* dg-final { scan-tree-dump-times \"looparound ref\" 1 \"pcom\" } */"}, {"sha": "d8fe51c5a6c9f84f308cf629d93cd8f4b209aaff", "filename": "gcc/testsuite/gcc.dg/tree-ssa/predcom-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e373dd067e6f29cd333cddd741611f5979718c58/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e373dd067e6f29cd333cddd741611f5979718c58/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-2.c?ref=e373dd067e6f29cd333cddd741611f5979718c58", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2 -funroll-loops --param max-unroll-times=8 -fpredictive-commoning -fdump-tree-pcom-details\" } */\n+/* { dg-options \"-O2 -funroll-loops --param max-unroll-times=8 -fpredictive-commoning -fdump-tree-pcom-details -fno-tree-pre\" } */\n \n void abort (void);\n "}, {"sha": "1174cd17eec5527b16dad071fa90a74ffca12be2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/predcom-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e373dd067e6f29cd333cddd741611f5979718c58/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e373dd067e6f29cd333cddd741611f5979718c58/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-3.c?ref=e373dd067e6f29cd333cddd741611f5979718c58", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -funroll-loops --param max-unroll-times=8 -fpredictive-commoning -fdump-tree-pcom-details\" } */\n+/* { dg-options \"-O2 -funroll-loops --param max-unroll-times=8 -fpredictive-commoning -fdump-tree-pcom-details -fno-tree-pre\" } */\n \n int a[1000], b[1000];\n "}, {"sha": "d9bd3a957558832072f9cbf3e3f3907d7ffe7a32", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-pre-32.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e373dd067e6f29cd333cddd741611f5979718c58/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e373dd067e6f29cd333cddd741611f5979718c58/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-32.c?ref=e373dd067e6f29cd333cddd741611f5979718c58", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-pre\" } */\n+\n+unsigned f(unsigned x, unsigned y, _Bool b)\n+{\n+#define m (b?-1:0)\n+  return (x&m)|(y&~m);\n+#undef m\n+}\n+\n+/* { dg-final { scan-tree-dump \"# prephitmp_\\[0-9\\]+ = PHI <\\[xy\\]_\\[0-9\\]+\\\\(D\\\\)\\[^,\\]*, \\[xy\\]_\\[0-9\\]+\\\\(D\\\\)\" \"pre\" } } */"}, {"sha": "37e4d2fe687199ffc3cf677dcdc8775c14ff0bca", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sink-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e373dd067e6f29cd333cddd741611f5979718c58/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e373dd067e6f29cd333cddd741611f5979718c58/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-10.c?ref=e373dd067e6f29cd333cddd741611f5979718c58", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-sink-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-sink-details -fno-tree-pre\" } */\n \n int x[1024], y[1024], z[1024], w[1024];\n void foo (void)"}, {"sha": "f9ed973dd5fe3e15623ca355cab2387cad650630", "filename": "gcc/testsuite/gcc.target/i386/pr45685.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e373dd067e6f29cd333cddd741611f5979718c58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr45685.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e373dd067e6f29cd333cddd741611f5979718c58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr45685.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr45685.c?ref=e373dd067e6f29cd333cddd741611f5979718c58", "patch": "@@ -36,4 +36,4 @@ int summation_helper_2(int64_t* products, uint64_t count)\n \treturn s;\n }\n \n-/* { dg-final { scan-assembler-times \"cmov\" 4 } } */\n+/* { dg-final { scan-assembler-times \"cmov\" 6 } } */"}, {"sha": "5ce8d00e4c5277197b43efea6303d0d8e73fde3b", "filename": "gcc/testsuite/gfortran.dg/pr34163.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e373dd067e6f29cd333cddd741611f5979718c58/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr34163.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e373dd067e6f29cd333cddd741611f5979718c58/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr34163.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr34163.f90?ref=e373dd067e6f29cd333cddd741611f5979718c58", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-O2 -fpredictive-commoning -fdump-tree-pcom-details\" }\n+! { dg-options \"-O2 -fno-tree-pre -fpredictive-commoning -fdump-tree-pcom-details\" }\n subroutine trisolve2(x,i1,i2,nxyz)\n integer :: nxyz\n real,dimension(nxyz):: au1"}, {"sha": "edc3fdf2a790e3ed3679187e5628ef4672fb84b6", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e373dd067e6f29cd333cddd741611f5979718c58/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e373dd067e6f29cd333cddd741611f5979718c58/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=e373dd067e6f29cd333cddd741611f5979718c58", "patch": "@@ -1201,7 +1201,7 @@ get_or_alloc_expr_for (tree t)\n }\n \n /* Return the folded version of T if T, when folded, is a gimple\n-   min_invariant.  Otherwise, return T.  */\n+   min_invariant or an SSA name.  Otherwise, return T.  */\n \n static pre_expr\n fully_constant_expression (pre_expr e)\n@@ -1218,10 +1218,8 @@ fully_constant_expression (pre_expr e)\n \t  return e;\n \tif (is_gimple_min_invariant (res))\n \t  return get_or_alloc_expr_for_constant (res);\n-\t/* We might have simplified the expression to a\n-\t   SSA_NAME for example from x_1 * 1.  But we cannot\n-\t   insert a PHI for x_1 unconditionally as x_1 might\n-\t   not be available readily.  */\n+\tif (TREE_CODE (res) == SSA_NAME)\n+\t  return get_or_alloc_expr_for_name (res);\n \treturn e;\n       }\n     case REFERENCE:\n@@ -1464,7 +1462,20 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t    constant = fully_constant_expression (expr);\n \t    PRE_EXPR_NARY (expr) = nary;\n \t    if (constant != expr)\n-\t      return constant;\n+\t      {\n+\t\t/* For non-CONSTANTs we have to make sure we can eventually\n+\t\t   insert the expression.  Which means we need to have a\n+\t\t   leader for it.  */\n+\t\tif (constant->kind != CONSTANT)\n+\t\t  {\n+\t\t    unsigned value_id = get_expr_value_id (constant);\n+\t\t    constant = find_leader_in_sets (value_id, set1, set2);\n+\t\t    if (constant)\n+\t\t      return constant;\n+\t\t  }\n+\t\telse\n+\t\t  return constant;\n+\t      }\n \n \t    tree result = vn_nary_op_lookup_pieces (newnary->length,\n \t\t\t\t\t\t    newnary->opcode,"}]}