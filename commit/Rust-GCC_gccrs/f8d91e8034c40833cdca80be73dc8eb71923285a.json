{"sha": "f8d91e8034c40833cdca80be73dc8eb71923285a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhkOTFlODAzNGM0MDgzM2NkY2E4MGJlNzNkYzhlYjcxOTIzMjg1YQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2014-04-29T13:09:03Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2014-04-29T13:09:03Z"}, "message": "arc.c (arc_select_cc_mode): Fix parentheses.\n\n\t* config/arc/arc.c (arc_select_cc_mode): Fix parentheses.\n\t(arc_init_reg_tables): Use a machine_mode enum to iterate over\n\tavailable modes.\n\t* config/m32r/m32r.c (init_reg_tables): Likewise.\n\t* config/m32c/m32c.c (m32c_illegal_subreg_p): Use a machine_mode\n\tenum to hold the modes.\n\nFrom-SVN: r209894", "tree": {"sha": "b1639687f7c682a4b3c6616eb1d44b6f3ea9e7eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1639687f7c682a4b3c6616eb1d44b6f3ea9e7eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8d91e8034c40833cdca80be73dc8eb71923285a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8d91e8034c40833cdca80be73dc8eb71923285a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8d91e8034c40833cdca80be73dc8eb71923285a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8d91e8034c40833cdca80be73dc8eb71923285a/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d3ad081b17ef087b8131477b200c56813ad38ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d3ad081b17ef087b8131477b200c56813ad38ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d3ad081b17ef087b8131477b200c56813ad38ea"}], "stats": {"total": 53, "additions": 33, "deletions": 20}, "files": [{"sha": "cad57834b5749bf2b74bd22996da0a217943d2c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d91e8034c40833cdca80be73dc8eb71923285a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d91e8034c40833cdca80be73dc8eb71923285a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8d91e8034c40833cdca80be73dc8eb71923285a", "patch": "@@ -1,3 +1,12 @@\n+2014-04-29  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/arc/arc.c (arc_select_cc_mode): Fix parentheses.\n+\t(arc_init_reg_tables): Use a machine_mode enum to iterate over\n+\tavailable modes.\n+\t* config/m32r/m32r.c (init_reg_tables): Likewise.\n+\t* config/m32c/m32c.c (m32c_illegal_subreg_p): Use a machine_mode\n+\tenum to hold the modes.\n+\n 2014-04-29  Richard Biener  <rguenther@suse.de>\n \n \t* dominance.c (free_dominance_info): Add overload with"}, {"sha": "c2c65d3450968e7cbb313e78cce7b7dddd6c91c4", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d91e8034c40833cdca80be73dc8eb71923285a/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d91e8034c40833cdca80be73dc8eb71923285a/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=f8d91e8034c40833cdca80be73dc8eb71923285a", "patch": "@@ -994,7 +994,7 @@ arc_select_cc_mode (enum rtx_code op, rtx x, rtx y)\n   if (GET_MODE_CLASS (mode) == MODE_INT\n       && y == const0_rtx\n       && (op == EQ || op == NE\n-\t  || ((op == LT || op == GE) && GET_MODE_SIZE (GET_MODE (x) <= 4))))\n+\t  || ((op == LT || op == GE) && GET_MODE_SIZE (GET_MODE (x)) <= 4))))\n     return CC_ZNmode;\n \n   /* add.f for if (a+b) */\n@@ -1133,31 +1133,33 @@ arc_init_reg_tables (void)\n \n   for (i = 0; i < NUM_MACHINE_MODES; i++)\n     {\n-      switch (GET_MODE_CLASS (i))\n+      enum machine_mode m = (enum machine_mode) i;\n+\n+      switch (GET_MODE_CLASS (m))\n \t{\n \tcase MODE_INT:\n \tcase MODE_PARTIAL_INT:\n \tcase MODE_COMPLEX_INT:\n-\t  if (GET_MODE_SIZE (i) <= 4)\n+\t  if (GET_MODE_SIZE (m) <= 4)\n \t    arc_mode_class[i] = 1 << (int) S_MODE;\n-\t  else if (GET_MODE_SIZE (i) == 8)\n+\t  else if (GET_MODE_SIZE (m) == 8)\n \t    arc_mode_class[i] = 1 << (int) D_MODE;\n-\t  else if (GET_MODE_SIZE (i) == 16)\n+\t  else if (GET_MODE_SIZE (m) == 16)\n \t    arc_mode_class[i] = 1 << (int) T_MODE;\n-\t  else if (GET_MODE_SIZE (i) == 32)\n+\t  else if (GET_MODE_SIZE (m) == 32)\n \t    arc_mode_class[i] = 1 << (int) O_MODE;\n \t  else\n \t    arc_mode_class[i] = 0;\n \t  break;\n \tcase MODE_FLOAT:\n \tcase MODE_COMPLEX_FLOAT:\n-\t  if (GET_MODE_SIZE (i) <= 4)\n+\t  if (GET_MODE_SIZE (m) <= 4)\n \t    arc_mode_class[i] = 1 << (int) SF_MODE;\n-\t  else if (GET_MODE_SIZE (i) == 8)\n+\t  else if (GET_MODE_SIZE (m) == 8)\n \t    arc_mode_class[i] = 1 << (int) DF_MODE;\n-\t  else if (GET_MODE_SIZE (i) == 16)\n+\t  else if (GET_MODE_SIZE (m) == 16)\n \t    arc_mode_class[i] = 1 << (int) TF_MODE;\n-\t  else if (GET_MODE_SIZE (i) == 32)\n+\t  else if (GET_MODE_SIZE (m) == 32)\n \t    arc_mode_class[i] = 1 << (int) OF_MODE;\n \t  else\n \t    arc_mode_class[i] = 0;"}, {"sha": "837c22b2d772fb1df4d78d67d021e9856e48477d", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d91e8034c40833cdca80be73dc8eb71923285a/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d91e8034c40833cdca80be73dc8eb71923285a/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=f8d91e8034c40833cdca80be73dc8eb71923285a", "patch": "@@ -3159,7 +3159,7 @@ m32c_illegal_subreg_p (rtx op)\n {\n   int offset;\n   unsigned int i;\n-  int src_mode, dest_mode;\n+  enum machine_mode src_mode, dest_mode;\n \n   if (GET_CODE (op) == MEM\n       && ! m32c_legitimate_address_p (Pmode, XEXP (op, 0), false))"}, {"sha": "2b84b0ff1ebefe6d79c2e10091a2bfafd3ca3da0", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d91e8034c40833cdca80be73dc8eb71923285a/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d91e8034c40833cdca80be73dc8eb71923285a/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=f8d91e8034c40833cdca80be73dc8eb71923285a", "patch": "@@ -282,31 +282,33 @@ init_reg_tables (void)\n \n   for (i = 0; i < NUM_MACHINE_MODES; i++)\n     {\n-      switch (GET_MODE_CLASS (i))\n+      enum machine_mode m = (enum machine_mode) i;\n+      \n+      switch (GET_MODE_CLASS (m))\n \t{\n \tcase MODE_INT:\n \tcase MODE_PARTIAL_INT:\n \tcase MODE_COMPLEX_INT:\n-\t  if (GET_MODE_SIZE (i) <= 4)\n+\t  if (GET_MODE_SIZE (m) <= 4)\n \t    m32r_mode_class[i] = 1 << (int) S_MODE;\n-\t  else if (GET_MODE_SIZE (i) == 8)\n+\t  else if (GET_MODE_SIZE (m) == 8)\n \t    m32r_mode_class[i] = 1 << (int) D_MODE;\n-\t  else if (GET_MODE_SIZE (i) == 16)\n+\t  else if (GET_MODE_SIZE (m) == 16)\n \t    m32r_mode_class[i] = 1 << (int) T_MODE;\n-\t  else if (GET_MODE_SIZE (i) == 32)\n+\t  else if (GET_MODE_SIZE (m) == 32)\n \t    m32r_mode_class[i] = 1 << (int) O_MODE;\n \t  else\n \t    m32r_mode_class[i] = 0;\n \t  break;\n \tcase MODE_FLOAT:\n \tcase MODE_COMPLEX_FLOAT:\n-\t  if (GET_MODE_SIZE (i) <= 4)\n+\t  if (GET_MODE_SIZE (m) <= 4)\n \t    m32r_mode_class[i] = 1 << (int) SF_MODE;\n-\t  else if (GET_MODE_SIZE (i) == 8)\n+\t  else if (GET_MODE_SIZE (m) == 8)\n \t    m32r_mode_class[i] = 1 << (int) DF_MODE;\n-\t  else if (GET_MODE_SIZE (i) == 16)\n+\t  else if (GET_MODE_SIZE (m) == 16)\n \t    m32r_mode_class[i] = 1 << (int) TF_MODE;\n-\t  else if (GET_MODE_SIZE (i) == 32)\n+\t  else if (GET_MODE_SIZE (m) == 32)\n \t    m32r_mode_class[i] = 1 << (int) OF_MODE;\n \t  else\n \t    m32r_mode_class[i] = 0;"}]}