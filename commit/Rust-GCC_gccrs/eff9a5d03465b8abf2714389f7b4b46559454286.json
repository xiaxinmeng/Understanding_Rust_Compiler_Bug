{"sha": "eff9a5d03465b8abf2714389f7b4b46559454286", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZmOWE1ZDAzNDY1YjhhYmYyNzE0Mzg5ZjdiNGI0NjU1OTQ1NDI4Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2005-02-17T05:37:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2005-02-17T05:37:19Z"}, "message": "PR mudflap/19319, c++/19317\n\n        PR mudflap/19319, c++/19317\n        * gimplify.c (gimplify_modify_expr_rhs) [CALL_EXPR]: Make return\n        slot explicit.\n\nFrom-SVN: r95150", "tree": {"sha": "bccf57f0eb578bf24376faa22b48c836b25ff92a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bccf57f0eb578bf24376faa22b48c836b25ff92a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eff9a5d03465b8abf2714389f7b4b46559454286", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eff9a5d03465b8abf2714389f7b4b46559454286", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eff9a5d03465b8abf2714389f7b4b46559454286", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eff9a5d03465b8abf2714389f7b4b46559454286/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "beb5f8072a53de566c0956da3b62dab02d12382a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beb5f8072a53de566c0956da3b62dab02d12382a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beb5f8072a53de566c0956da3b62dab02d12382a"}], "stats": {"total": 74, "additions": 69, "deletions": 5}, "files": [{"sha": "3a18b310debaa8fcaaab79986a330326e5cbdf42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff9a5d03465b8abf2714389f7b4b46559454286/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff9a5d03465b8abf2714389f7b4b46559454286/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eff9a5d03465b8abf2714389f7b4b46559454286", "patch": "@@ -1,3 +1,9 @@\n+2005-02-17  Jason Merrill  <jason@redhat.com>\n+\n+\tPR mudflap/19319, c++/19317\n+\t* gimplify.c (gimplify_modify_expr_rhs) [CALL_EXPR]: Make return\n+\tslot explicit.\n+\n 2005-02-17  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/install.texi (Specific): Update link for Darwin-specific\n@@ -287,11 +293,6 @@\n \n 2005-02-13  Jason Merrill  <jason@redhat.com>\n \n-\t[reverted temporarily]\n-\tPR mudflap/19319\n-\t* gimplify.c (gimplify_modify_expr_rhs) [CALL_EXPR]: Make return\n-\tslot explicit.\n-\n \tPR c++/16405\n \t* fold-const.c (fold_indirect_ref_1): Split out from...\n \t(build_fold_indirect_ref): Here."}, {"sha": "89fd5c7e4f4658ddc5daecdf9e303e3156b94008", "filename": "gcc/gimplify.c", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff9a5d03465b8abf2714389f7b4b46559454286/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff9a5d03465b8abf2714389f7b4b46559454286/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=eff9a5d03465b8abf2714389f7b4b46559454286", "patch": "@@ -2913,6 +2913,69 @@ gimplify_modify_expr_rhs (tree *expr_p, tree *from_p, tree *to_p, tree *pre_p,\n \t  ret = GS_UNHANDLED;\n \tbreak;\n \n+      case CALL_EXPR:\n+\t/* For calls that return in memory, give *to_p as the CALL_EXPR's\n+\t   return slot so that we don't generate a temporary.  */\n+\tif (aggregate_value_p (*from_p, *from_p))\n+\t  {\n+\t    tree init = *from_p;\n+\t    tree fn = TREE_OPERAND (init, 0);\n+\t    tree args = TREE_OPERAND (init, 1);\n+\t    tree rettype = TREE_TYPE (TREE_TYPE (TREE_TYPE (fn)));\n+\t    tree arg = *to_p;\n+\t    tree type;\n+\n+\t    /* Only use the original target if *to_p isn't already\n+\t       addressable; if its address escapes, and the called function\n+\t       uses the NRV optimization, a conforming program could see\n+\t       *to_p change before the called function returns.  This is\n+\t       c++/19317.  */\n+\t    bool use_temp = !is_gimple_non_addressable (*to_p);\n+\n+\t    /* A CALL_EXPR with an explicit return slot argument should\n+\t       never appear on the RHS of a MODIFY_EXPR.  */\n+\t    if (CALL_EXPR_HAS_RETURN_SLOT_ADDR (*from_p))\n+\t      abort ();\n+\n+\t    if (use_temp)\n+\t      {\n+\t\targ = create_tmp_var (rettype, \"ret\");\n+\t\t*from_p = arg;\n+\t      }\n+\n+\t    type = TREE_TYPE (arg);\n+\t    /* FIXME: Mark the address as not escaping.  */\n+\t    lang_hooks.mark_addressable (arg);\n+\t    arg = build1 (ADDR_EXPR, build_pointer_type (type), arg);\n+\t    /* The return type might have different cv-quals from arg.  */\n+\t    arg = convert (build_pointer_type (rettype), arg);\n+\t    args = tree_cons (NULL_TREE, arg, args);\n+\t    init = build3 (CALL_EXPR, rettype, fn, args, NULL_TREE);\n+\t    CALL_EXPR_HAS_RETURN_SLOT_ADDR (init) = 1;\n+\t    TREE_USED (init) = 1;\n+\n+\t    if (use_temp)\n+\t      {\n+\t\tgimplify_and_add (init, pre_p);\n+\t\tret = GS_OK;\n+\t\tbreak;\n+\t      }\n+\t    else if (want_value)\n+\t      {\n+\t\tgimplify_and_add (init, pre_p);\n+\t\t*expr_p = *to_p;\n+\t\treturn GS_OK;\n+\t      }\n+\t    else\n+\t      {\n+\t\t*expr_p = init;\n+\t\treturn GS_OK;\n+\t      }\n+\t  }\n+\telse\n+\t  ret = GS_UNHANDLED;\n+\tbreak;\n+\n       default:\n \tret = GS_UNHANDLED;\n \tbreak;"}]}