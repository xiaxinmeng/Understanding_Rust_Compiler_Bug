{"sha": "5057fa13b7b65fe878f1e9b4c48421fc21483d30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA1N2ZhMTNiN2I2NWZlODc4ZjFlOWI0YzQ4NDIxZmMyMTQ4M2QzMA==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2011-07-25T16:35:38Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2011-07-25T16:35:38Z"}, "message": "mmix.h (PRINT_OPERAND, [...]): Remove macro.\n\n\t* config/mmix/mmix.h (PRINT_OPERAND, PRINT_OPERAND_ADDRESS,\n\tPRINT_OPERAND_PUNCT_VALID_P): Remove macro.\n\t* config/mmix/mmix-protos.h (mmix_print_operand_punct_valid_p,\n\tmmix_print_operand, mmix_print_operand_address): Remove.\n\t* config/mmix/mmix.c (mmix_print_operand_punct_valid_p): Make static.\n\tChange return type to bool. Change argument type to bool.\n\t(mmix_print_operand, mmix_print_operand_address): Make static.\n\t(mmix_intval, mmix_output_condition): Change 'x' argument type \n\tto const_rtx.\n\t(TARGET_PRINT_OPERAND, TARGET_PRINT_OPERAND_ADDRESS,\n\tTARGET_PRINT_OPERAND_PUNCT_VALID_P): Define.\n\nFrom-SVN: r176759", "tree": {"sha": "729c8fd8bd44e858f774ac04836dc2068aa307e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/729c8fd8bd44e858f774ac04836dc2068aa307e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5057fa13b7b65fe878f1e9b4c48421fc21483d30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5057fa13b7b65fe878f1e9b4c48421fc21483d30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5057fa13b7b65fe878f1e9b4c48421fc21483d30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5057fa13b7b65fe878f1e9b4c48421fc21483d30/comments", "author": null, "committer": null, "parents": [{"sha": "9d7b2124158025c9b2939dd6651bf6cd95284d01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d7b2124158025c9b2939dd6651bf6cd95284d01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d7b2124158025c9b2939dd6651bf6cd95284d01"}], "stats": {"total": 60, "additions": 36, "deletions": 24}, "files": [{"sha": "c64a0611d253758a3c738c67351f4cf49aabd735", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5057fa13b7b65fe878f1e9b4c48421fc21483d30/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5057fa13b7b65fe878f1e9b4c48421fc21483d30/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5057fa13b7b65fe878f1e9b4c48421fc21483d30", "patch": "@@ -1,3 +1,17 @@\n+2011-07-25  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/mmix/mmix.h (PRINT_OPERAND, PRINT_OPERAND_ADDRESS,\n+\tPRINT_OPERAND_PUNCT_VALID_P): Remove macro.\n+\t* config/mmix/mmix-protos.h (mmix_print_operand_punct_valid_p,\n+\tmmix_print_operand, mmix_print_operand_address): Remove.\n+\t* config/mmix/mmix.c (mmix_print_operand_punct_valid_p): Make static.\n+\tChange return type to bool. Change argument type to bool.\n+\t(mmix_print_operand, mmix_print_operand_address): Make static.\n+\t(mmix_intval, mmix_output_condition): Change 'x' argument type \n+\tto const_rtx.\n+\t(TARGET_PRINT_OPERAND, TARGET_PRINT_OPERAND_ADDRESS,\n+\tTARGET_PRINT_OPERAND_PUNCT_VALID_P): Define.\n+\n 2011-07-25  Georg-Johann Lay  <avr@gjlay.de>\n \t\n \tPR target/39386"}, {"sha": "eefea46c66f3ea3507e3c48e8bce4cc12e7ad793", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5057fa13b7b65fe878f1e9b4c48421fc21483d30/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5057fa13b7b65fe878f1e9b4c48421fc21483d30/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=5057fa13b7b65fe878f1e9b4c48421fc21483d30", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes for exported functions defined in mmix.c\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2007, 2010\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2007, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Hans-Peter Nilsson (hp@bitrange.com)\n \n@@ -38,7 +38,6 @@ extern void mmix_asm_output_internal_label (FILE *, const char *);\n extern void mmix_asm_weaken_label (FILE *, const char *);\n extern void mmix_asm_output_labelref (FILE *, const char *);\n extern void mmix_asm_output_def (FILE *, const char *, const char *);\n-extern int mmix_print_operand_punct_valid_p (int);\n extern void mmix_asm_output_reg_push (FILE *, int);\n extern void mmix_asm_output_reg_pop (FILE *, int);\n extern void mmix_asm_output_skip (FILE *, int);\n@@ -73,8 +72,6 @@ extern rtx mmix_return_addr_rtx (int, rtx);\n extern rtx mmix_eh_return_stackadj_rtx (void);\n extern rtx mmix_eh_return_handler_rtx (void);\n extern int mmix_constant_address_p (rtx);\n-extern void mmix_print_operand (FILE *, rtx, int);\n-extern void mmix_print_operand_address (FILE *, rtx);\n extern void mmix_expand_prologue (void);\n extern void mmix_expand_epilogue (void);\n extern rtx mmix_get_hard_reg_initial_val (enum machine_mode, int);"}, {"sha": "f65d5ee9bbeb54a00950828a6a6a16d4c63f7d40", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5057fa13b7b65fe878f1e9b4c48421fc21483d30/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5057fa13b7b65fe878f1e9b4c48421fc21483d30/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=5057fa13b7b65fe878f1e9b4c48421fc21483d30", "patch": "@@ -118,8 +118,8 @@ static void mmix_asm_output_source_filename (FILE *, const char *);\n static void mmix_output_shiftvalue_op_from_str\n   (FILE *, const char *, HOST_WIDEST_INT);\n static void mmix_output_shifted_value (FILE *, HOST_WIDEST_INT);\n-static void mmix_output_condition (FILE *, rtx, int);\n-static HOST_WIDEST_INT mmix_intval (rtx);\n+static void mmix_output_condition (FILE *, const_rtx, int);\n+static HOST_WIDEST_INT mmix_intval (const_rtx);\n static void mmix_output_octa (FILE *, HOST_WIDEST_INT, int);\n static bool mmix_assemble_integer (rtx, unsigned int, int);\n static struct machine_function *mmix_init_machine_status (void);\n@@ -159,6 +159,9 @@ static bool mmix_pass_by_reference (cumulative_args_t,\n static bool mmix_frame_pointer_required (void);\n static void mmix_asm_trampoline_template (FILE *);\n static void mmix_trampoline_init (rtx, tree, rtx);\n+static void mmix_print_operand (FILE *, rtx, int);\n+static void mmix_print_operand_address (FILE *, rtx);\n+static bool mmix_print_operand_punct_valid_p (unsigned char);\n static void mmix_conditional_register_usage (void);\n \n /* Target structure macros.  Listed by node.  See `Using and Porting GCC'\n@@ -186,6 +189,13 @@ static void mmix_conditional_register_usage (void);\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE mmix_target_asm_function_epilogue\n \n+#undef TARGET_PRINT_OPERAND\n+#define TARGET_PRINT_OPERAND mmix_print_operand\n+#undef TARGET_PRINT_OPERAND_ADDRESS\n+#define TARGET_PRINT_OPERAND_ADDRESS mmix_print_operand_address\n+#undef TARGET_PRINT_OPERAND_PUNCT_VALID_P\n+#define TARGET_PRINT_OPERAND_PUNCT_VALID_P mmix_print_operand_punct_valid_p\n+\n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO  mmix_encode_section_info\n #undef TARGET_STRIP_NAME_ENCODING\n@@ -1552,9 +1562,9 @@ mmix_asm_output_def (FILE *stream, const char *name, const char *value)\n   fputc ('\\n', stream);\n }\n \n-/* PRINT_OPERAND.  */\n+/* TARGET_PRINT_OPERAND.  */\n \n-void\n+static void\n mmix_print_operand (FILE *stream, rtx x, int code)\n {\n   /* When we add support for different codes later, we can, when needed,\n@@ -1779,20 +1789,20 @@ mmix_print_operand (FILE *stream, rtx x, int code)\n     }\n }\n \n-/* PRINT_OPERAND_PUNCT_VALID_P.  */\n+/* TARGET_PRINT_OPERAND_PUNCT_VALID_P.  */\n \n-int\n-mmix_print_operand_punct_valid_p (int code ATTRIBUTE_UNUSED)\n+static bool\n+mmix_print_operand_punct_valid_p (unsigned char code)\n {\n   /* A '+' is used for branch prediction, similar to other ports.  */\n   return code == '+'\n     /* A '.' is used for the %d in the POP %d,0 return insn.  */\n     || code == '.';\n }\n \n-/* PRINT_OPERAND_ADDRESS.  */\n+/* TARGET_PRINT_OPERAND_ADDRESS.  */\n \n-void\n+static void\n mmix_print_operand_address (FILE *stream, rtx x)\n {\n   if (REG_P (x))\n@@ -2619,7 +2629,7 @@ mmix_output_shifted_value (FILE *stream, HOST_WIDEST_INT value)\n    same as swapping the arguments).  */\n \n static void\n-mmix_output_condition (FILE *stream, rtx x, int reversed)\n+mmix_output_condition (FILE *stream, const_rtx x, int reversed)\n {\n   struct cc_conv\n   {\n@@ -2724,7 +2734,7 @@ mmix_output_condition (FILE *stream, rtx x, int reversed)\n /* Return the bit-value for a const_int or const_double.  */\n \n static HOST_WIDEST_INT\n-mmix_intval (rtx x)\n+mmix_intval (const_rtx x)\n {\n   unsigned HOST_WIDEST_INT retval;\n "}, {"sha": "37c5c708bd0e0de84f76c11a93c08d5e68f15ff9", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5057fa13b7b65fe878f1e9b4c48421fc21483d30/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5057fa13b7b65fe878f1e9b4c48421fc21483d30/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=5057fa13b7b65fe878f1e9b4c48421fc21483d30", "patch": "@@ -793,15 +793,6 @@ typedef struct { int regs; int lib; } CUMULATIVE_ARGS;\n  {{\"sp\", 254}, {\":sp\", 254}, {\"rD\", 256}, {\"rE\", 257},\t\\\n   {\"rH\", 258}, {\"rJ\", MMIX_rJ_REGNUM}, {\"rO\", MMIX_rO_REGNUM}}\n \n-#define PRINT_OPERAND(STREAM, X, CODE) \\\n- mmix_print_operand (STREAM, X, CODE)\n-\n-#define PRINT_OPERAND_PUNCT_VALID_P(CODE) \\\n- mmix_print_operand_punct_valid_p (CODE)\n-\n-#define PRINT_OPERAND_ADDRESS(STREAM, X) \\\n- mmix_print_operand_address (STREAM, X)\n-\n #define ASM_OUTPUT_REG_PUSH(STREAM, REGNO) \\\n  mmix_asm_output_reg_push (STREAM, REGNO)\n "}]}