{"sha": "3a4f280bec545db82380fb4cbc704ac7af438585", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E0ZjI4MGJlYzU0NWRiODIzODBmYjRjYmM3MDRhYzdhZjQzODU4NQ==", "commit": {"author": {"name": "Lawrence Crowl", "email": "crowl@google.com", "date": "2013-05-30T01:26:05Z"}, "committer": {"name": "Lawrence Crowl", "email": "crowl@gcc.gnu.org", "date": "2013-05-30T01:26:05Z"}, "message": "This patch is a consolodation of the hash_table patches to the\ncxx-conversion branch for files under gcc/config.\n\nUpdate various hash tables from htab_t to hash_table.\nModify types and calls to match.\n\n* config/arm/arm.c'arm_libcall_uses_aapcs_base::libcall_htab\n\nFold libcall_eq and libcall_hash into new struct libcall_hasher.\n\n* config/ia64/ia64.c'bundle_state_table\n\nFold bundle_state_hash and bundle_state_eq_p into new struct\nbundle_state_hasher.\n\n* config/mips/mips.c'mips_offset_table\n\nFold mips_lo_sum_offset_hash and mips_lo_sum_offset_eq into new\nstruct mips_lo_sum_offset_hasher.\n\nIn mips_reorg_process_insns, change call to for_each_rtx to pass\na pointer to the hash_table rather than a htab_t.  This change\nrequires then dereferencing that pointer in mips_record_lo_sum to\nobtain the hash_table.\n\n* config/sol2.c'solaris_comdat_htab\n\nFold comdat_hash and comdat_eq into new struct comdat_entry_hasher.\n\n* config/i386/winnt.c'i386_pe_section_type_flags::htab\n\n* config/i386/winnt.c'i386_find_on_wrapper_list::wrappers\n\nFold wrapper_strcmp into new struct wrapped_symbol_hasher.\n\nTested on x86_64.  Tested with config-list.mk.\n\n\nIndex: gcc/ChangeLog\n\n2013-05-29  Lawrence Crowl  <crowl@google.com>\n\n\t* config/arm/t-arm: Update for below.\n\n\t* config/arm/arm.c (arm_libcall_uses_aapcs_base::libcall_htab):\n\tChange type to hash_table.  Update dependent calls and types.\n\n\t* config/i386/t-cygming: Update for below.\n\n\t* config/i386/t-interix: Update for below.\n\n\t* config/i386/winnt.c (i386_pe_section_type_flags::htab):\n\tChange type to hash_table.  Update dependent calls and types.\n\t(i386_find_on_wrapper_list::wrappers): Likewise.\n\n\t* config/ia64/t-ia64: Update for below.\n\n\t* config/ia64/ia64.c (bundle_state_table):\n\tChange type to hash_table.  Update dependent calls and types.\n\n\t* config/mips/mips.c (mips_reorg_process_insns::htab):\n\tChange type to hash_table.  Update dependent calls and types.\n\n\t* config/sol2.c (solaris_comdat_htab):\n\tChange type to hash_table.  Update dependent calls and types.\n\n\t* config/t-sol2: Update for above.\n\nFrom-SVN: r199435", "tree": {"sha": "5340933f027915d0e1c1ab4f652bfad732bb71ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5340933f027915d0e1c1ab4f652bfad732bb71ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a4f280bec545db82380fb4cbc704ac7af438585", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a4f280bec545db82380fb4cbc704ac7af438585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a4f280bec545db82380fb4cbc704ac7af438585", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a4f280bec545db82380fb4cbc704ac7af438585/comments", "author": null, "committer": null, "parents": [{"sha": "4974c14ccc9b0e97afb69aeeb657a29bd35876b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4974c14ccc9b0e97afb69aeeb657a29bd35876b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4974c14ccc9b0e97afb69aeeb657a29bd35876b0"}], "stats": {"total": 294, "additions": 183, "deletions": 111}, "files": [{"sha": "4e3a6f80942ea7853ebabe95540d58bf66c6ad95", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4f280bec545db82380fb4cbc704ac7af438585/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4f280bec545db82380fb4cbc704ac7af438585/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a4f280bec545db82380fb4cbc704ac7af438585", "patch": "@@ -1,3 +1,31 @@\n+2013-05-29  Lawrence Crowl  <crowl@google.com>\n+\n+\t* config/arm/t-arm: Update for below.\n+\n+\t* config/arm/arm.c (arm_libcall_uses_aapcs_base::libcall_htab):\n+\tChange type to hash_table.  Update dependent calls and types.\n+\n+\t* config/i386/t-cygming: Update for below.\n+\n+\t* config/i386/t-interix: Update for below.\n+\n+\t* config/i386/winnt.c (i386_pe_section_type_flags::htab):\n+\tChange type to hash_table.  Update dependent calls and types.\n+\t(i386_find_on_wrapper_list::wrappers): Likewise.\n+\n+\t* config/ia64/t-ia64: Update for below.\n+\n+\t* config/ia64/ia64.c (bundle_state_table):\n+\tChange type to hash_table.  Update dependent calls and types.\n+\n+\t* config/mips/mips.c (mips_reorg_process_insns::htab):\n+\tChange type to hash_table.  Update dependent calls and types.\n+\n+\t* config/sol2.c (solaris_comdat_htab):\n+\tChange type to hash_table.  Update dependent calls and types.\n+\n+\t* config/t-sol2: Update for above.\n+\n 2013-05-29  Teresa Johnson  <tejohnson@google.com>\n \n \t* passes.c (dump_passes): Use FOR_EACH_FUNCTION since\n@@ -860,7 +888,6 @@\n \t* config/rs6000/rs6000-opts.h (PROCESSOR_POWER8): Likewise.\n \t(enum rs6000_vector): Add power8 vector support.\n \n->>>>>>> .r199383\n 2013-05-22  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \tPR target/19599"}, {"sha": "9f0f2a80cb53988d412affd9e134475b775cae07", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4f280bec545db82380fb4cbc704ac7af438585/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4f280bec545db82380fb4cbc704ac7af438585/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=3a4f280bec545db82380fb4cbc704ac7af438585", "patch": "@@ -23,6 +23,7 @@\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"hash-table.h\"\n #include \"tm.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n@@ -3816,36 +3817,48 @@ arm_function_value(const_tree type, const_tree func,\n   return arm_libcall_value_1 (mode);\n }\n \n-static int\n-libcall_eq (const void *p1, const void *p2)\n+/* libcall hashtable helpers.  */\n+\n+struct libcall_hasher : typed_noop_remove <rtx_def>\n+{\n+  typedef rtx_def value_type;\n+  typedef rtx_def compare_type;\n+  static inline hashval_t hash (const value_type *);\n+  static inline bool equal (const value_type *, const compare_type *);\n+  static inline void remove (value_type *);\n+};\n+\n+inline bool\n+libcall_hasher::equal (const value_type *p1, const compare_type *p2)\n {\n-  return rtx_equal_p ((const_rtx) p1, (const_rtx) p2);\n+  return rtx_equal_p (p1, p2);\n }\n \n-static hashval_t\n-libcall_hash (const void *p1)\n+inline hashval_t\n+libcall_hasher::hash (const value_type *p1)\n {\n-  return hash_rtx ((const_rtx) p1, VOIDmode, NULL, NULL, FALSE);\n+  return hash_rtx (p1, VOIDmode, NULL, NULL, FALSE);\n }\n \n+typedef hash_table <libcall_hasher> libcall_table_type;\n+\n static void\n-add_libcall (htab_t htab, rtx libcall)\n+add_libcall (libcall_table_type htab, rtx libcall)\n {\n-  *htab_find_slot (htab, libcall, INSERT) = libcall;\n+  *htab.find_slot (libcall, INSERT) = libcall;\n }\n \n static bool\n arm_libcall_uses_aapcs_base (const_rtx libcall)\n {\n   static bool init_done = false;\n-  static htab_t libcall_htab;\n+  static libcall_table_type libcall_htab;\n \n   if (!init_done)\n     {\n       init_done = true;\n \n-      libcall_htab = htab_create (31, libcall_hash, libcall_eq,\n-\t\t\t\t  NULL);\n+      libcall_htab.create (31);\n       add_libcall (libcall_htab,\n \t\t   convert_optab_libfunc (sfloat_optab, SFmode, SImode));\n       add_libcall (libcall_htab,\n@@ -3904,7 +3917,7 @@ arm_libcall_uses_aapcs_base (const_rtx libcall)\n \t\t\t\t\t\t\tDFmode));\n     }\n \n-  return libcall && htab_find (libcall_htab, libcall) != NULL;\n+  return libcall && libcall_htab.find (libcall) != NULL;\n }\n \n static rtx"}, {"sha": "246f0f5b54039880388f55eb5b51089159fae5d7", "filename": "gcc/config/arm/t-arm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4f280bec545db82380fb4cbc704ac7af438585/gcc%2Fconfig%2Farm%2Ft-arm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4f280bec545db82380fb4cbc704ac7af438585/gcc%2Fconfig%2Farm%2Ft-arm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm?ref=3a4f280bec545db82380fb4cbc704ac7af438585", "patch": "@@ -78,8 +78,8 @@ $(srcdir)/config/arm/arm-tables.opt: $(srcdir)/config/arm/genopt.sh \\\n \t$(SHELL) $(srcdir)/config/arm/genopt.sh $(srcdir)/config/arm > \\\n \t\t$(srcdir)/config/arm/arm-tables.opt\n \n-arm.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-  $(RTL_H) $(TREE_H) $(OBSTACK_H) $(REGS_H) hard-reg-set.h \\\n+arm.o: $(srcdir)/config/arm/arm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n+  $(RTL_H) $(TREE_H) $(HASH_TABLE_H) $(OBSTACK_H) $(REGS_H) hard-reg-set.h \\\n   insn-config.h conditions.h output.h dumpfile.h \\\n   $(INSN_ATTR_H) $(FLAGS_H) reload.h $(FUNCTION_H) \\\n   $(EXPR_H) $(OPTABS_H) $(RECOG_H) $(CGRAPH_H) \\"}, {"sha": "ba076a7f49a6dc45d5d89462fdd41ed85def6e1f", "filename": "gcc/config/i386/t-cygming", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4f280bec545db82380fb4cbc704ac7af438585/gcc%2Fconfig%2Fi386%2Ft-cygming", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4f280bec545db82380fb4cbc704ac7af438585/gcc%2Fconfig%2Fi386%2Ft-cygming", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-cygming?ref=3a4f280bec545db82380fb4cbc704ac7af438585", "patch": "@@ -22,7 +22,7 @@ LIMITS_H_TEST = true\n \n winnt.o: $(srcdir)/config/i386/winnt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   $(TM_H) $(RTL_H) $(REGS_H) hard-reg-set.h output.h $(TREE_H) flags.h \\\n-  $(TM_P_H) $(HASHTAB_H) $(GGC_H) $(LTO_STREAMER_H)\n+  $(TM_P_H) $(HASH_TABLE_H) $(GGC_H) $(LTO_STREAMER_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t$(srcdir)/config/i386/winnt.c\n "}, {"sha": "4d7b5987037a6c59f907b0985be19f5866afe743", "filename": "gcc/config/i386/t-interix", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4f280bec545db82380fb4cbc704ac7af438585/gcc%2Fconfig%2Fi386%2Ft-interix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4f280bec545db82380fb4cbc704ac7af438585/gcc%2Fconfig%2Fi386%2Ft-interix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-interix?ref=3a4f280bec545db82380fb4cbc704ac7af438585", "patch": "@@ -18,7 +18,7 @@\n \n winnt.o: $(srcdir)/config/i386/winnt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   $(TM_H) $(RTL_H) $(REGS_H) hard-reg-set.h output.h $(TREE_H) flags.h \\\n-  $(TM_P_H) $(HASHTAB_H) $(GGC_H)\n+  $(TM_P_H) $(HASH_TABLE_H) $(GGC_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/i386/winnt.c\n "}, {"sha": "c9e3aa98a377a62b650b454128e91420599fde3e", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4f280bec545db82380fb4cbc704ac7af438585/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4f280bec545db82380fb4cbc704ac7af438585/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=3a4f280bec545db82380fb4cbc704ac7af438585", "patch": "@@ -30,7 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"tm_p.h\"\n #include \"diagnostic-core.h\"\n-#include \"hashtab.h\"\n+#include \"hash-table.h\"\n #include \"langhooks.h\"\n #include \"ggc.h\"\n #include \"target.h\"\n@@ -449,7 +449,7 @@ i386_pe_reloc_rw_mask (void)\n unsigned int\n i386_pe_section_type_flags (tree decl, const char *name, int reloc)\n {\n-  static htab_t htab;\n+  static hash_table <pointer_hash <unsigned int> > htab;\n   unsigned int flags;\n   unsigned int **slot;\n \n@@ -460,8 +460,8 @@ i386_pe_section_type_flags (tree decl, const char *name, int reloc)\n   /* The names we put in the hashtable will always be the unique\n      versions given to us by the stringtable, so we can just use\n      their addresses as the keys.  */\n-  if (!htab)\n-    htab = htab_create (31, htab_hash_pointer, htab_eq_pointer, NULL);\n+  if (!htab.is_created ())\n+    htab.create (31);\n \n   if (decl && TREE_CODE (decl) == FUNCTION_DECL)\n     flags = SECTION_CODE;\n@@ -480,7 +480,7 @@ i386_pe_section_type_flags (tree decl, const char *name, int reloc)\n     flags |= SECTION_LINKONCE;\n \n   /* See if we already have an entry for this section.  */\n-  slot = (unsigned int **) htab_find_slot (htab, name, INSERT);\n+  slot = htab.find_slot ((unsigned int *)name, INSERT);\n   if (!*slot)\n     {\n       *slot = (unsigned int *) xmalloc (sizeof (unsigned int));\n@@ -714,12 +714,29 @@ i386_pe_record_stub (const char *name)\n \n #ifdef CXX_WRAP_SPEC_LIST\n \n+/* Hashtable helpers.  */\n+\n+struct wrapped_symbol_hasher : typed_noop_remove <char>\n+{\n+  typedef char value_type;\n+  typedef char compare_type;\n+  static inline hashval_t hash (const value_type *);\n+  static inline bool equal (const value_type *, const compare_type *);\n+  static inline void remove (value_type *);\n+};\n+\n+inline hashval_t\n+wrapped_symbol_hasher::hash (const value_type *v)\n+{\n+  return htab_hash_string (v);\n+}\n+\n /*  Hash table equality helper function.  */\n \n-static int\n-wrapper_strcmp (const void *x, const void *y)\n+inline bool\n+wrapped_symbol_hasher::equal (const value_type *x, const compare_type *y)\n {\n-  return !strcmp ((const char *) x, (const char *) y);\n+  return !strcmp (x, y);\n }\n \n /* Search for a function named TARGET in the list of library wrappers\n@@ -733,7 +750,7 @@ static const char *\n i386_find_on_wrapper_list (const char *target)\n {\n   static char first_time = 1;\n-  static htab_t wrappers;\n+  static hash_table <wrapped_symbol_hasher> wrappers;\n \n   if (first_time)\n     {\n@@ -746,8 +763,7 @@ i386_find_on_wrapper_list (const char *target)\n       char *bufptr;\n       /* Breaks up the char array into separated strings\n          strings and enter them into the hash table.  */\n-      wrappers = htab_create_alloc (8, htab_hash_string, wrapper_strcmp,\n-\t0, xcalloc, free);\n+      wrappers.create (8);\n       for (bufptr = wrapper_list_buffer; *bufptr; ++bufptr)\n \t{\n \t  char *found = NULL;\n@@ -760,12 +776,12 @@ i386_find_on_wrapper_list (const char *target)\n \t  if (*bufptr)\n \t    *bufptr = 0;\n \t  if (found)\n-\t    *htab_find_slot (wrappers, found, INSERT) = found;\n+\t    *wrappers.find_slot (found, INSERT) = found;\n \t}\n       first_time = 0;\n     }\n \n-  return (const char *) htab_find (wrappers, target);\n+  return wrappers.find (target);\n }\n \n #endif /* CXX_WRAP_SPEC_LIST */"}, {"sha": "a128b19c7cabe13379a7c6078a70f58ac8286ae7", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 34, "deletions": 37, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4f280bec545db82380fb4cbc704ac7af438585/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4f280bec545db82380fb4cbc704ac7af438585/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=3a4f280bec545db82380fb4cbc704ac7af438585", "patch": "@@ -47,7 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target-def.h\"\n #include \"common/common-target.h\"\n #include \"tm_p.h\"\n-#include \"hashtab.h\"\n+#include \"hash-table.h\"\n #include \"langhooks.h\"\n #include \"gimple.h\"\n #include \"intl.h\"\n@@ -257,8 +257,6 @@ static struct bundle_state *get_free_bundle_state (void);\n static void free_bundle_state (struct bundle_state *);\n static void initiate_bundle_states (void);\n static void finish_bundle_states (void);\n-static unsigned bundle_state_hash (const void *);\n-static int bundle_state_eq_p (const void *, const void *);\n static int insert_bundle_state (struct bundle_state *);\n static void initiate_bundle_state_table (void);\n static void finish_bundle_state_table (void);\n@@ -8526,18 +8524,21 @@ finish_bundle_states (void)\n     }\n }\n \n-/* Hash table of the bundle states.  The key is dfa_state and insn_num\n-   of the bundle states.  */\n+/* Hashtable helpers.  */\n \n-static htab_t bundle_state_table;\n+struct bundle_state_hasher : typed_noop_remove <bundle_state>\n+{\n+  typedef bundle_state value_type;\n+  typedef bundle_state compare_type;\n+  static inline hashval_t hash (const value_type *);\n+  static inline bool equal (const value_type *, const compare_type *);\n+};\n \n /* The function returns hash of BUNDLE_STATE.  */\n \n-static unsigned\n-bundle_state_hash (const void *bundle_state)\n+inline hashval_t\n+bundle_state_hasher::hash (const value_type *state)\n {\n-  const struct bundle_state *const state\n-    = (const struct bundle_state *) bundle_state;\n   unsigned result, i;\n \n   for (result = i = 0; i < dfa_state_size; i++)\n@@ -8548,59 +8549,56 @@ bundle_state_hash (const void *bundle_state)\n \n /* The function returns nonzero if the bundle state keys are equal.  */\n \n-static int\n-bundle_state_eq_p (const void *bundle_state_1, const void *bundle_state_2)\n+inline bool\n+bundle_state_hasher::equal (const value_type *state1,\n+\t\t\t    const compare_type *state2)\n {\n-  const struct bundle_state *const state1\n-    = (const struct bundle_state *) bundle_state_1;\n-  const struct bundle_state *const state2\n-    = (const struct bundle_state *) bundle_state_2;\n-\n   return (state1->insn_num == state2->insn_num\n \t  && memcmp (state1->dfa_state, state2->dfa_state,\n \t\t     dfa_state_size) == 0);\n }\n \n+/* Hash table of the bundle states.  The key is dfa_state and insn_num\n+   of the bundle states.  */\n+\n+static hash_table <bundle_state_hasher> bundle_state_table;\n+\n /* The function inserts the BUNDLE_STATE into the hash table.  The\n    function returns nonzero if the bundle has been inserted into the\n    table.  The table contains the best bundle state with given key.  */\n \n static int\n insert_bundle_state (struct bundle_state *bundle_state)\n {\n-  void **entry_ptr;\n+  struct bundle_state **entry_ptr;\n \n-  entry_ptr = htab_find_slot (bundle_state_table, bundle_state, INSERT);\n+  entry_ptr = bundle_state_table.find_slot (bundle_state, INSERT);\n   if (*entry_ptr == NULL)\n     {\n       bundle_state->next = index_to_bundle_states [bundle_state->insn_num];\n       index_to_bundle_states [bundle_state->insn_num] = bundle_state;\n-      *entry_ptr = (void *) bundle_state;\n+      *entry_ptr = bundle_state;\n       return TRUE;\n     }\n-  else if (bundle_state->cost < ((struct bundle_state *) *entry_ptr)->cost\n-\t   || (bundle_state->cost == ((struct bundle_state *) *entry_ptr)->cost\n-\t       && (((struct bundle_state *)*entry_ptr)->accumulated_insns_num\n+  else if (bundle_state->cost < (*entry_ptr)->cost\n+\t   || (bundle_state->cost == (*entry_ptr)->cost\n+\t       && ((*entry_ptr)->accumulated_insns_num\n \t\t   > bundle_state->accumulated_insns_num\n-\t\t   || (((struct bundle_state *)\n-\t\t\t*entry_ptr)->accumulated_insns_num\n+\t\t   || ((*entry_ptr)->accumulated_insns_num\n \t\t       == bundle_state->accumulated_insns_num\n-\t\t       && (((struct bundle_state *)\n-\t\t\t    *entry_ptr)->branch_deviation\n+\t\t       && ((*entry_ptr)->branch_deviation\n \t\t\t   > bundle_state->branch_deviation\n-\t\t\t   || (((struct bundle_state *)\n-\t\t\t\t*entry_ptr)->branch_deviation\n+\t\t\t   || ((*entry_ptr)->branch_deviation\n \t\t\t       == bundle_state->branch_deviation\n-\t\t\t       && ((struct bundle_state *)\n-\t\t\t\t   *entry_ptr)->middle_bundle_stops\n+\t\t\t       && (*entry_ptr)->middle_bundle_stops\n \t\t\t       > bundle_state->middle_bundle_stops))))))\n \n     {\n       struct bundle_state temp;\n \n-      temp = *(struct bundle_state *) *entry_ptr;\n-      *(struct bundle_state *) *entry_ptr = *bundle_state;\n-      ((struct bundle_state *) *entry_ptr)->next = temp.next;\n+      temp = **entry_ptr;\n+      **entry_ptr = *bundle_state;\n+      (*entry_ptr)->next = temp.next;\n       *bundle_state = temp;\n     }\n   return FALSE;\n@@ -8611,16 +8609,15 @@ insert_bundle_state (struct bundle_state *bundle_state)\n static void\n initiate_bundle_state_table (void)\n {\n-  bundle_state_table = htab_create (50, bundle_state_hash, bundle_state_eq_p,\n-\t\t\t\t    (htab_del) 0);\n+  bundle_state_table.create (50);\n }\n \n /* Finish work with the hash table.  */\n \n static void\n finish_bundle_state_table (void)\n {\n-  htab_delete (bundle_state_table);\n+  bundle_state_table.dispose ();\n }\n \n \f"}, {"sha": "b009cdf2bc5936fbf70a81da0c42324cbcaf3dbd", "filename": "gcc/config/ia64/t-ia64", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4f280bec545db82380fb4cbc704ac7af438585/gcc%2Fconfig%2Fia64%2Ft-ia64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4f280bec545db82380fb4cbc704ac7af438585/gcc%2Fconfig%2Fia64%2Ft-ia64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ft-ia64?ref=3a4f280bec545db82380fb4cbc704ac7af438585", "patch": "@@ -24,4 +24,5 @@ ia64-c.o: $(srcdir)/config/ia64/ia64-c.c $(CONFIG_H) $(SYSTEM_H) \\\n # genattrtab generates very long string literals.\n insn-attrtab.o-warn = -Wno-error\n \n-ia64.o: debug.h $(PARAMS_H) sel-sched.h reload.h $(OPTS_H) dumpfile.h\n+ia64.o: $(srcdir)/config/ia64/ia64.c debug.h $(PARAMS_H) sel-sched.h reload.h \\\n+\t$(OPTS_H) dumpfile.h $(HASH_TABLE_H)"}, {"sha": "222c768b9b91321f1f156d5160b794dbd3238a5b", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4f280bec545db82380fb4cbc704ac7af438585/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4f280bec545db82380fb4cbc704ac7af438585/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=3a4f280bec545db82380fb4cbc704ac7af438585", "patch": "@@ -43,7 +43,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"ggc.h\"\n #include \"gstab.h\"\n-#include \"hashtab.h\"\n+#include \"hash-table.h\"\n #include \"debug.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n@@ -15806,30 +15806,43 @@ mips_hash_base (rtx base)\n   return hash_rtx (base, GET_MODE (base), &do_not_record_p, NULL, false);\n }\n \n+/* Hashtable helpers.  */\n+\n+struct mips_lo_sum_offset_hasher : typed_free_remove <mips_lo_sum_offset>\n+{\n+  typedef mips_lo_sum_offset value_type;\n+  typedef rtx_def compare_type;\n+  static inline hashval_t hash (const value_type *);\n+  static inline bool equal (const value_type *, const compare_type *);\n+};\n+\n /* Hash-table callbacks for mips_lo_sum_offsets.  */\n \n-static hashval_t\n-mips_lo_sum_offset_hash (const void *entry)\n+inline hashval_t\n+mips_lo_sum_offset_hasher::hash (const value_type *entry)\n {\n-  return mips_hash_base (((const struct mips_lo_sum_offset *) entry)->base);\n+  return mips_hash_base (entry->base);\n }\n \n-static int\n-mips_lo_sum_offset_eq (const void *entry, const void *value)\n+inline bool\n+mips_lo_sum_offset_hasher::equal (const value_type *entry,\n+\t\t\t\t  const compare_type *value)\n {\n-  return rtx_equal_p (((const struct mips_lo_sum_offset *) entry)->base,\n-\t\t      (const_rtx) value);\n+  return rtx_equal_p (entry->base, value);\n }\n \n+typedef hash_table <mips_lo_sum_offset_hasher> mips_offset_table;\n+\n /* Look up symbolic constant X in HTAB, which is a hash table of\n    mips_lo_sum_offsets.  If OPTION is NO_INSERT, return true if X can be\n    paired with a recorded LO_SUM, otherwise record X in the table.  */\n \n static bool\n-mips_lo_sum_offset_lookup (htab_t htab, rtx x, enum insert_option option)\n+mips_lo_sum_offset_lookup (mips_offset_table htab, rtx x,\n+\t\t\t   enum insert_option option)\n {\n   rtx base, offset;\n-  void **slot;\n+  mips_lo_sum_offset **slot;\n   struct mips_lo_sum_offset *entry;\n \n   /* Split X into a base and offset.  */\n@@ -15838,7 +15851,7 @@ mips_lo_sum_offset_lookup (htab_t htab, rtx x, enum insert_option option)\n     base = UNSPEC_ADDRESS (base);\n \n   /* Look up the base in the hash table.  */\n-  slot = htab_find_slot_with_hash (htab, base, mips_hash_base (base), option);\n+  slot = htab.find_slot_with_hash (base, mips_hash_base (base), option);\n   if (slot == NULL)\n     return false;\n \n@@ -15868,7 +15881,8 @@ static int\n mips_record_lo_sum (rtx *loc, void *data)\n {\n   if (GET_CODE (*loc) == LO_SUM)\n-    mips_lo_sum_offset_lookup ((htab_t) data, XEXP (*loc, 1), INSERT);\n+    mips_lo_sum_offset_lookup (*(mips_offset_table*) data,\n+\t\t\t       XEXP (*loc, 1), INSERT);\n   return 0;\n }\n \n@@ -15877,7 +15891,7 @@ mips_record_lo_sum (rtx *loc, void *data)\n    LO_SUMs in the current function.  */\n \n static bool\n-mips_orphaned_high_part_p (htab_t htab, rtx insn)\n+mips_orphaned_high_part_p (mips_offset_table htab, rtx insn)\n {\n   enum mips_symbol_type type;\n   rtx x, set;\n@@ -15985,7 +15999,7 @@ mips_reorg_process_insns (void)\n {\n   rtx insn, last_insn, subinsn, next_insn, lo_reg, delayed_reg;\n   int hilo_delay;\n-  htab_t htab;\n+  mips_offset_table htab;\n \n   /* Force all instructions to be split into their final form.  */\n   split_all_insns_noflow ();\n@@ -16022,14 +16036,13 @@ mips_reorg_process_insns (void)\n   if (TARGET_FIX_VR4130 && !ISA_HAS_MACCHI)\n     cfun->machine->all_noreorder_p = false;\n \n-  htab = htab_create (37, mips_lo_sum_offset_hash,\n-\t\t      mips_lo_sum_offset_eq, free);\n+  htab.create (37);\n \n   /* Make a first pass over the instructions, recording all the LO_SUMs.  */\n   for (insn = get_insns (); insn != 0; insn = NEXT_INSN (insn))\n     FOR_EACH_SUBINSN (subinsn, insn)\n       if (USEFUL_INSN_P (subinsn))\n-\tfor_each_rtx (&PATTERN (subinsn), mips_record_lo_sum, htab);\n+\tfor_each_rtx (&PATTERN (subinsn), mips_record_lo_sum, &htab);\n \n   last_insn = 0;\n   hilo_delay = 2;\n@@ -16086,7 +16099,7 @@ mips_reorg_process_insns (void)\n \t}\n     }\n \n-  htab_delete (htab);\n+  htab.dispose ();\n }\n \n /* Return true if the function has a long branch instruction.  */"}, {"sha": "7c7c429db3d67973972634d87cd9a4d24f01a780", "filename": "gcc/config/sol2.c", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4f280bec545db82380fb4cbc704ac7af438585/gcc%2Fconfig%2Fsol2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4f280bec545db82380fb4cbc704ac7af438585/gcc%2Fconfig%2Fsol2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.c?ref=3a4f280bec545db82380fb4cbc704ac7af438585", "patch": "@@ -29,7 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"diagnostic-core.h\"\n #include \"ggc.h\"\n-#include \"hashtab.h\"\n+#include \"hash-table.h\"\n \n tree solaris_pending_aligns, solaris_pending_inits, solaris_pending_finis;\n \n@@ -157,10 +157,6 @@ solaris_assemble_visibility (tree decl, int vis ATTRIBUTE_UNUSED)\n #endif\n }\n \n-/* Hash table of group signature symbols.  */\n-\n-static htab_t solaris_comdat_htab;\n-\n /* Group section information entry stored in solaris_comdat_htab.  */\n \n typedef struct comdat_entry\n@@ -171,25 +167,34 @@ typedef struct comdat_entry\n   const char *sig;\n } comdat_entry;\n \n-/* Helper routines for maintaining solaris_comdat_htab.  */\n+/* Helpers for maintaining solaris_comdat_htab.  */\n \n-static hashval_t\n-comdat_hash (const void *p)\n+struct comdat_entry_hasher : typed_noop_remove <comdat_entry>\n+{\n+  typedef comdat_entry value_type;\n+  typedef comdat_entry compare_type;\n+  static inline hashval_t hash (const value_type *);\n+  static inline bool equal (const value_type *, const compare_type *);\n+  static inline void remove (value_type *);\n+};\n+\n+inline hashval_t\n+comdat_entry_hasher::hash (const value_type *entry)\n {\n-  const comdat_entry *entry = (const comdat_entry *) p;\n-\n   return htab_hash_string (entry->sig);\n }\n \n-static int\n-comdat_eq (const void *p1, const void *p2)\n+inline bool\n+comdat_entry_hasher::equal (const value_type *entry1,\n+\t\t\t    const compare_type *entry2)\n {\n-  const comdat_entry *entry1 = (const comdat_entry *) p1;\n-  const comdat_entry *entry2 = (const comdat_entry *) p2;\n-\n   return strcmp (entry1->sig, entry2->sig) == 0;\n }\n \n+/* Hash table of group signature symbols.  */\n+\n+static hash_table <comdat_entry_hasher> solaris_comdat_htab;\n+\n /* Output assembly to switch to COMDAT group section NAME with attributes\n    FLAGS and group signature symbol DECL, using Sun as syntax.  */\n \n@@ -229,12 +234,11 @@ solaris_elf_asm_comdat_section (const char *name, unsigned int flags, tree decl)\n      identify the missing ones without changing the affected frontents,\n      remember the signature symbols and emit those not marked\n      TREE_SYMBOL_REFERENCED in solaris_file_end.  */\n-  if (solaris_comdat_htab == NULL)\n-    solaris_comdat_htab = htab_create_alloc (37, comdat_hash, comdat_eq, NULL,\n-\t\t\t\t\t     xcalloc, free);\n+  if (!solaris_comdat_htab.is_created ())\n+    solaris_comdat_htab.create (37);\n \n   entry.sig = signature;\n-  slot = (comdat_entry **) htab_find_slot (solaris_comdat_htab, &entry, INSERT);\n+  slot = solaris_comdat_htab.find_slot (&entry, INSERT);\n \n   if (*slot == NULL)\n     {\n@@ -250,10 +254,11 @@ solaris_elf_asm_comdat_section (const char *name, unsigned int flags, tree decl)\n \n /* Define unreferenced COMDAT group signature symbol corresponding to SLOT.  */\n \n-static int\n-solaris_define_comdat_signature (void **slot, void *aux ATTRIBUTE_UNUSED)\n+int\n+solaris_define_comdat_signature (comdat_entry **slot,\n+\t\t\t\t void *aux ATTRIBUTE_UNUSED)\n {\n-  comdat_entry *entry = *(comdat_entry **) slot;\n+  comdat_entry *entry = *slot;\n   tree decl = entry->decl;\n \n   if (TREE_CODE (decl) != IDENTIFIER_NODE)\n@@ -277,10 +282,10 @@ solaris_define_comdat_signature (void **slot, void *aux ATTRIBUTE_UNUSED)\n void\n solaris_file_end (void)\n {\n-  if (solaris_comdat_htab == NULL)\n+  if (!solaris_comdat_htab.is_created ())\n     return;\n \n-  htab_traverse (solaris_comdat_htab, solaris_define_comdat_signature, NULL);\n+  solaris_comdat_htab.traverse <void *, solaris_define_comdat_signature> (NULL);\n }\n \n void"}, {"sha": "142de89de9515f7cd27f9eb39cff7f7f97d1f66f", "filename": "gcc/config/t-sol2", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4f280bec545db82380fb4cbc704ac7af438585/gcc%2Fconfig%2Ft-sol2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4f280bec545db82380fb4cbc704ac7af438585/gcc%2Fconfig%2Ft-sol2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-sol2?ref=3a4f280bec545db82380fb4cbc704ac7af438585", "patch": "@@ -34,5 +34,5 @@ sol2-stubs.o: $(srcdir)/config/sol2-stubs.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\n \n # Solaris-specific attributes\n sol2.o: $(srcdir)/config/sol2.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-  tree.h output.h $(TM_H) $(TARGET_H) $(TM_P_H) $(GGC_H)\n+  tree.h output.h $(TM_H) $(TARGET_H) $(TM_P_H) $(GGC_H) $(HASH_TABLE_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}]}