{"sha": "ff015c5b6ca00915e35ddb373ed3f25e4e020e09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYwMTVjNWI2Y2EwMDkxNWUzNWRkYjM3M2VkM2YyNWU0ZTAyMGUwOQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2010-01-24T16:59:51Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2010-01-24T16:59:51Z"}, "message": "re PR fortran/41044 (internal compiler error: in gfc_conv_intrinsic_function)\n\n2010-01-24  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/41044\n\tPR fortran/41167\n\t* expr.c (remove_subobject_ref): If the constructor is NULL use\n\tthe expression as the source.\n\t(simplify_const_ref): Change the type of expression if\n\tthere are component references.  Allow for substring to be at\n\tthe end of an arbitrarily long chain of references.  If an\n\telement is found that is not in an EXPR_ARRAY, assume that this\n\tis scalar initialization of array. Call remove_subobject_ref in\n\tthis case with NULL second argument.\n\n2010-01-24  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/41044\n\t* gfortran.dg/parameter_array_ref_2.f90 : New test.\n\n\tPR fortran/41167\n\t* gfortran.dg/char_array_arg_1.f90 : New test.\n\n\t* gfortran.dg/pr25923.f90 : Remove XFAIL.\n\nFrom-SVN: r156197", "tree": {"sha": "52183dddc5326158a8d06309248d28ef63d0e1f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52183dddc5326158a8d06309248d28ef63d0e1f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff015c5b6ca00915e35ddb373ed3f25e4e020e09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff015c5b6ca00915e35ddb373ed3f25e4e020e09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff015c5b6ca00915e35ddb373ed3f25e4e020e09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff015c5b6ca00915e35ddb373ed3f25e4e020e09/comments", "author": null, "committer": null, "parents": [{"sha": "23f6293ee8a55bcfa45caa456d86dc403315ce68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23f6293ee8a55bcfa45caa456d86dc403315ce68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23f6293ee8a55bcfa45caa456d86dc403315ce68"}], "stats": {"total": 123, "additions": 111, "deletions": 12}, "files": [{"sha": "760fc24f451ba437433458f603c6c0ca0c9ada2d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff015c5b6ca00915e35ddb373ed3f25e4e020e09/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff015c5b6ca00915e35ddb373ed3f25e4e020e09/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ff015c5b6ca00915e35ddb373ed3f25e4e020e09", "patch": "@@ -1,3 +1,16 @@\n+2010-01-24  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/41044\n+\tPR fortran/41167\n+\t* expr.c (remove_subobject_ref): If the constructor is NULL use\n+\tthe expression as the source.\n+\t(simplify_const_ref): Change the type of expression if\n+\tthere are component references.  Allow for substring to be at\n+\tthe end of an arbitrarily long chain of references.  If an\n+\telement is found that is not in an EXPR_ARRAY, assume that this\n+\tis scalar initialization of array. Call remove_subobject_ref in\n+\tthis case with NULL second argument.\n+\n 2010-01-24  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/39304"}, {"sha": "d846c0f121ebad8f859f0464628d98df17331482", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff015c5b6ca00915e35ddb373ed3f25e4e020e09/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff015c5b6ca00915e35ddb373ed3f25e4e020e09/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=ff015c5b6ca00915e35ddb373ed3f25e4e020e09", "patch": "@@ -1154,8 +1154,13 @@ remove_subobject_ref (gfc_expr *p, gfc_constructor *cons)\n {\n   gfc_expr *e;\n \n-  e = cons->expr;\n-  cons->expr = NULL;\n+  if (cons)\n+    {\n+      e = cons->expr;\n+      cons->expr = NULL;\n+    }\n+  else\n+    e = gfc_copy_expr (p);\n   e->ref = p->ref->next;\n   p->ref->next =  NULL;\n   gfc_replace_expr (p, e);\n@@ -1464,6 +1469,7 @@ simplify_const_ref (gfc_expr *p)\n {\n   gfc_constructor *cons;\n   gfc_expr *newp;\n+  gfc_ref *last_ref;\n \n   while (p->ref)\n     {\n@@ -1473,6 +1479,13 @@ simplify_const_ref (gfc_expr *p)\n \t  switch (p->ref->u.ar.type)\n \t    {\n \t    case AR_ELEMENT:\n+\t      /* <type/kind spec>, parameter :: x(<int>) = scalar_expr\n+\t\t will generate this.  */\n+\t      if (p->expr_type != EXPR_ARRAY)\n+\t\t{\n+\t\t  remove_subobject_ref (p, NULL);\n+\t\t  break;\n+\t\t}\n \t      if (find_array_element (p->value.constructor, &p->ref->u.ar,\n \t\t\t\t      &cons) == FAILURE)\n \t\treturn FAILURE;\n@@ -1502,18 +1515,25 @@ simplify_const_ref (gfc_expr *p)\n \t\t\treturn FAILURE;\n \t\t    }\n \n-\t\t  /* If this is a CHARACTER array and we possibly took a\n-\t\t     substring out of it, update the type-spec's character\n-\t\t     length according to the first element (as all should have\n-\t\t     the same length).  */\n-\t\t  if (p->ts.type == BT_CHARACTER)\n+\t\t  if (p->ts.type == BT_DERIVED\n+\t\t\t&& p->ref->next\n+\t\t\t&& p->value.constructor)\n \t\t    {\n-\t\t      int string_len;\n+\t\t      /* There may have been component references.  */\n+\t\t      p->ts = p->value.constructor->expr->ts;\n+\t\t    }\n \n-\t\t      gcc_assert (p->ref->next);\n-\t\t      gcc_assert (!p->ref->next->next);\n-\t\t      gcc_assert (p->ref->next->type == REF_SUBSTRING);\n+\t\t  last_ref = p->ref;\n+\t\t  for (; last_ref->next; last_ref = last_ref->next) {};\n \n+\t\t  if (p->ts.type == BT_CHARACTER\n+\t\t\t&& last_ref->type == REF_SUBSTRING)\n+\t\t    {\n+\t\t      /* If this is a CHARACTER array and we possibly took\n+\t\t\t a substring out of it, update the type-spec's\n+\t\t\t character length according to the first element\n+\t\t\t (as all should have the same length).  */\n+\t\t      int string_len;\n \t\t      if (p->value.constructor)\n \t\t\t{\n \t\t\t  const gfc_expr* first = p->value.constructor->expr;"}, {"sha": "b9dd12432d0a8e65b4cf9f81188e8d59cb108d13", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff015c5b6ca00915e35ddb373ed3f25e4e020e09/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff015c5b6ca00915e35ddb373ed3f25e4e020e09/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ff015c5b6ca00915e35ddb373ed3f25e4e020e09", "patch": "@@ -1,3 +1,13 @@\n+2010-01-24  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/41044\n+\t* gfortran.dg/parameter_array_ref_2.f90 : New test.\n+\n+\tPR fortran/41167\n+\t* gfortran.dg/char_array_arg_1.f90 : New test.\n+\n+\t* gfortran.dg/pr25923.f90 : Remove XFAIL.\n+\n 2010-01-24  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/39304"}, {"sha": "097fbc6f65f0cec403a23c0a0c8769f765d4effc", "filename": "gcc/testsuite/gfortran.dg/char_array_arg_1.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff015c5b6ca00915e35ddb373ed3f25e4e020e09/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_array_arg_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff015c5b6ca00915e35ddb373ed3f25e4e020e09/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_array_arg_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_array_arg_1.f90?ref=ff015c5b6ca00915e35ddb373ed3f25e4e020e09", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do compile }\n+! Test the fix for pr41167, in which the first argument of 'pack', below,\n+! was simplified incorrectly, with the results indicated.\n+!\n+! Contributed by Harald Anlauf <anlauf@gmx.de>\n+!\n+program gfcbug88\n+  implicit none\n+  type t\n+     character(len=8) :: name\n+  end type t\n+  type(t) ,parameter :: obstyp(2)= (/ t ('A'), t ('B') /)\n+  character(9) :: chr(1)\n+\n+  print *, pack (\" \"//obstyp(:)% name, (/ .true., .false. /))  ! Used to ICE on compilation\n+  chr = pack (\" \"//obstyp(:)% name, (/ .true., .false. /))  ! Used to give conversion error\n+end program gfcbug88"}, {"sha": "30f300f37ed8ed7ad5393398fcd977af66dc06d3", "filename": "gcc/testsuite/gfortran.dg/parameter_array_ref_2.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff015c5b6ca00915e35ddb373ed3f25e4e020e09/gcc%2Ftestsuite%2Fgfortran.dg%2Fparameter_array_ref_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff015c5b6ca00915e35ddb373ed3f25e4e020e09/gcc%2Ftestsuite%2Fgfortran.dg%2Fparameter_array_ref_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fparameter_array_ref_2.f90?ref=ff015c5b6ca00915e35ddb373ed3f25e4e020e09", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do compile }\n+! Test the fix for the problems in PR41044\n+!\n+! Contributed by <ros@rzg.mpg.de>\n+! Reduced by Joos VandeVondele <jv244@cam.ac.uk>\n+!\n+  Subroutine PS_INIT (bkgd, punit, pform, psize, rot90, bbox, clip, eps,  &\n+                        caller)\n+    type psfd                          ! paper size and frame defaults\n+      character(3)                     :: n\n+      real                             :: p(2)\n+      real                             :: f(4)\n+    end type psfd\n+    character(4)                       :: fn, orich, pfmt\n+    type(psfd), parameter              :: pfd(0:11)=(/  &\n+         psfd('   ',(/   0.0,   0.0/),(/200.,120.,800.,560./)), &    ! A0_L\n+         psfd('A0 ',(/ 840.9,1189.2/),(/140., 84.,560.,400./)), &    ! A0_P\n+         psfd('A1 ',(/ 594.6, 840.9/),(/100., 60.,400.,280./)), &    ! A1_P\n+         psfd('A2 ',(/ 420.4, 594.6/),(/ 70., 42.,280.,200./)), &    ! A2_P\n+         psfd('A3 ',(/ 297.3, 420.4/),(/ 50., 30.,200.,140./)), &    ! A3_P\n+         psfd('A4 ',(/ 210.2, 297.3/),(/ 35., 21.,140.,100./)), &    ! A4_P\n+         psfd('A5 ',(/ 148.7, 210.2/),(/ 25., 15.,100., 70./)), &    ! A5_P\n+         psfd('A6 ',(/ 105.1, 148.7/),(/ 18., 11., 70., 50./)), &    ! A6_P\n+         psfd('   ',(/   0.0,   0.0/),(/ 50., 30.,200.,140./)), &    ! Letter_L\n+         psfd('LET',(/ 215.9, 279.4/),(/ 35., 21.,140.,100./)), &    ! Letter_P\n+         psfd('   ',(/   0.0,   0.0/),(/ 50., 30.,200.,140./)), &    ! Legal_L\n+         psfd('LEG',(/ 215.9, 355.6/),(/ 35., 21.,140.,100./))/)     ! Legal_P\n+    if (len_trim(pfmt) > 0) then       ! set paper format\n+      idx=sum(maxloc(index(pfd%n,pfmt(1:3))))-1\n+    end if\n+  end subroutine PS_INIT\n+\n+! This, additional problem, was posted as comment #8 by Tobias Burnus <burnus@gcc.gnu.org>\n+  type t\n+    integer :: i\n+  end type t\n+  type(t), parameter :: a(1) = t(4) ! [t(4)] worked OK\n+  real(a(1)%i) :: b\n+end"}, {"sha": "f075944b92bd1778aa7e6117a75c1830e888b928", "filename": "gcc/testsuite/gfortran.dg/pr25923.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff015c5b6ca00915e35ddb373ed3f25e4e020e09/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr25923.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff015c5b6ca00915e35ddb373ed3f25e4e020e09/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr25923.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr25923.f90?ref=ff015c5b6ca00915e35ddb373ed3f25e4e020e09", "patch": "@@ -10,7 +10,7 @@ module foo\n \n contains\n \n-  function baz(arg) result(res) ! { dg-warning \"res.yr' may be\" \"\" { xfail *-*-* } }\n+  function baz(arg) result(res) ! { dg-warning \"res.yr' may be\" }\n     type(bar), intent(in) :: arg\n     type(bar) :: res\n     logical, external:: some_func"}]}