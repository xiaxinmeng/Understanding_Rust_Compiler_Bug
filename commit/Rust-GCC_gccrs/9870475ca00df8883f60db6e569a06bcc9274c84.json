{"sha": "9870475ca00df8883f60db6e569a06bcc9274c84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg3MDQ3NWNhMDBkZjg4ODNmNjBkYjZlNTY5YTA2YmNjOTI3NGM4NA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-01-27T22:11:54Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-01-27T22:11:54Z"}, "message": "c-lex.c: Include <stdlib.h> and <string.h>/<strings.h>.\n\n/\n\t* c-lex.c: Include <stdlib.h> and <string.h>/<strings.h>.  Add\n\tprototype for `handle_sysv_pragma', and make it static.  Add\n\tparentheses around assignment used as truth value.\n\t* combine.c (combine_instructions): Protect variable `prev' with\n\tmacro HAVE_cc0.\n\t(can_combine_p): Protect variable `link' with AUTO_INC_DEC.\n\t(extract_left_shift): Add parentheses around operand of &.\n\t(merge_outer_ops): Avoid an empty body in an else-statement.\n\t(gen_rtx_combine): Remove unused variable `i'.\n\t* sparc/gmon-sol2.c: Include <fcntl.h>.  Make return type of\n        function monstartup `void'.  Likewise for internal_mcount.  Add\n        `static void' prototype for moncontrol.  Reconcile sprintf format\n        vs. args.\n\t* sparc/sparc.c: Include <stdlib.h> and <string.h>/<strings.h>.\n\tMake return type of function_arg_slotno explicitly `int'.\n\t(reg_unused_after): Add\tparentheses around assignment used as\n\ttruth value.\n\t(save_regs): Add explicit braces to avoid ambiguous `else'.\n\t(function_arg_slotno): Add parentheses around && within ||.\n\t(function_arg_pass_by_reference): Likewise.\n\t(sparc_flat_output_function_prologue): Reconcile fprintf format\n\tvs. args.\n\t* svr4.h (ASM_OUTPUT_LIMITED_STRING): Add parentheses around\n\tassignment used as truth value.\n\t* cplus-dem.c: Include <stdlib.h>.\n\t(demangle_signature): Avoid an empty body in an else-statement.\n\t(do_type): Remove unused variable `lvl'.\n\t* cppexp.c: Don't have <stdlib.h> depend on MULTIBYTE_CHARS.\n\tInclude <string.h>/<strings.h>.\n\t(cpp_lex): Remove unused variable `namelen'.\n\t(cpp_lex): Explicitly declare `num_chars' as an int.\n\t* cpplib.c: Avoid duplicate inclusion of <stdlib.h>, include\n\t<unistd.h> instead.  Explicitly declare is_system_include\n\treturning int.\n\t(make_assertion): Remove unused variable `kt'.\n\t(cpp_expand_to_buffer): Hide variable `obuf'.\n\t(output_line_command): Remove unused variables, `line_end',\n\t`line_cmd_buf' and `len'.\n\t(macarg): Remove unused variable `arg_start'.\n\t(special_symbol): Remove unused variable `i'.  Add parentheses\n\taround assignment used as truth value.\n\t(do_include):  Remove unused variables `pcfname' and `retried',\n\thide `pcf' and `pcfbuflimit'.\n\t(do_line): Remove unused variable `i'.\n\t(finclude): Hide variable `missing_newline'.\n\t(cpp_handle_options): Remove unused variable `j'.\n\t(read_token_list): Remove unused variable `eofp'.\n\t(cpp_error_with_line): Remove unused variable `i'.\n\t(cpp_warning_with_line): Likewise.\n\t(cpp_pedwarn_with_line): Explicitly declare `column' as int.\n\t(cpp_error_from_errno): Remove unused variable `i'.\n\t* cse.c (invalidate): Add parentheses around assignment used as\n\ttruth value.\n\t(find_best_addr): Move declaration of variable `our_cost' inside\n\tthe conditional macro where its used.\n\t(fold_rtx): Avoid an empty body in an if-statement.\n\t(cse_insn): Wrap variables  `this_insn_cc0_mode' and\n\t`this_insn_cc0' in macro HAVE_cc0.\n\t* dwarf2out.c: Include <stdlib.h> and <string.h>/<string.h>.\n\t(ASM_OUTPUT_DWARF_DATA8):  Reconcile format vs. args in fprintf's.\n\t(output_uleb128): Likewise.\n\t(output_sleb128): Likewise.\n\t(output_cfi): Likewise.\n\t(output_call_frame_info): Remove unused variables `j', `fde_size'\n\tand `fde_pad'.\n\t(comp_unit_has_inlines): Hide declaration as per rest of file.\n\t(size_of_line_prolog): Correct typo in prototype.\n\t(add_arange): Likewise.\n\t(output_aranges): Likewise.\n\t(add_name_and_src_coords_attributes): Likewise.\n\t(gen_array_type_die): Likewise.\n\t(gen_inlined_subroutine_die): Likewise.\n\t(equate_decl_number_to_die): Remove unused variable `i'.\n\t(print_die): Reconcile format vs. args in fprintf's.\n\t(print_dwarf_line_table): Likewise.\n\t(output_die): Likewise.\n\t(output_line_info): Likewise.\n\t(add_subscript_info): Avoid an empty body in an else-statement.\n\t(gen_subprogram_die): Remove unused variable `fp_loc'.\n\t* dwarfout.c: Explicitly declare `next_pubname_number' as int.\n\tProtect `ordering_attribute' prototype with USE_ORDERING_ATTRIBUTE\n\tmacro.  Protect `src_coords_attribute' prototype with\n\tDWARF_DECL_COORDINATES macro.  Hide `output_entry_point_die'\n\tprototype as in the rest of the file.  Likewise for\n\t`output_pointer_type_die' and `output_reference_type_die'.  Remove\n\tprototype for `type_of_for_scope'.\n\t(output_unsigned_leb128): Reconcile format vs. args in fprintf.\n\t(type_attribute): Add explicit braces to avoid ambiguous `else'.\n\t* final.c: Include <stdlib.h> and <string.h>/<strings.h>.\n\t(shorten_branches): Protect declaration of tmp_length with\n\tSHORTEN_WITH_ADJUST_INSN_LENGTH and ADJUST_INSN_LENGTH macros.\n\t(profile_function): Protect declaration of `sval' and `cxt'\n\tvariables with appropriate macros.\n\t(final_scan_insn): Likewise for `note' variable.  Add explicit\n\tbraces to avoid empty body in an if-statement.\n\t(output_asm_insn): Move variable `i' inside macro conditional\n\twhere it is used.  Add parentheses around assignment used as truth\n\tvalue.\n\t(asm_fprintf) Likewise, likewise.\n\t* fix-header.c (main): Remove unused variable `done'.  Protect\n\tdeclaration of `i' with FIXPROTO_IGNORE_LIST.\n\t* pexecute.c: Include <unistd.h>.  Prototype `my_strerror'.\n\t* print-rtl.c (print_inline_rtx): Explicitly declare the parameter\n\t`ind'.\n\t* profile.c: Include <string.h>/<strings.h>.\n\t(instrument_arcs): Remove unused variables `note', `inverted',\n\t`zero' and `neg_one'.\n\t(branch_prob): Avoid empty body in an if-statement.\n\t* regclass.c: Include <stdlib.h>.\n\t(reg_alternate_class): Explicitly declare parameter `regno'.\n\t* regmove.c (regmove_optimize): Remove unused variable `p'.  Add\n\tparentheses around assignment used as truth value.\n\t(find_matches):  Remove unused variables `output_operand' and\n\t`matching_operand'.\n\t(fixup_match_1): Remove statement with no effect: \"if (0) ;\".\n\t* scan.c (sstring_append): Explicitly declare `count' as int.\n\t(scan_string): Explicitly declare parameter `init' as int.\n\t* sched.c: Include <stdlib.h>.\n\t(BLOCKAGE_RANGE): Add parentheses around arithmetic in operand of |.\n\t(rank_for_schedule): Add parentheses around assignment used as\n\ttruth value.\n\t(schedule_block): Likewise.\n\t(regno_use_in): Likewise.\n\t(schedule_insns): Remove unused variable `i'.\n\t* toplev.c: Include <stdlib.h> and <string.h>/<strings.h>.\n\t(v_message_with_decl): Remove unused variable `n'.\n\t(botch): Explicitly declare parameter `s' as char *.\n\t(main): Add parentheses around assignment used as truth value.\n\t* tree.c (make_node): Protect the variable `kind' with the\n\tGATHER_STATISTICS macro.\n\t(real_value_from_int_cst): Move variable `e' inside conditional\n\tmacro area where it is used.\n\t(tree_last): Add parentheses around assignment used as truth value.\n\t(build1): Protect the variable `kind' with the GATHER_STATISTICS\n\tmacro.\n\t(print_obstack_statistics): Reconcile format vs. args in fprintf.\n\tProtect variables `i', `total_nodes', and `total_bytes' with the\n\tGATHER_STATISTICS macro.\nLots more -W -Wall warnings disappear.\n\nFrom-SVN: r17517", "tree": {"sha": "506ded36670813aa83b5ef412cc7aebbbcfdd077", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/506ded36670813aa83b5ef412cc7aebbbcfdd077"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9870475ca00df8883f60db6e569a06bcc9274c84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9870475ca00df8883f60db6e569a06bcc9274c84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9870475ca00df8883f60db6e569a06bcc9274c84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9870475ca00df8883f60db6e569a06bcc9274c84/comments", "author": null, "committer": null, "parents": [{"sha": "b729186a4442e9078c174263d294c7c68ed07196", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b729186a4442e9078c174263d294c7c68ed07196", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b729186a4442e9078c174263d294c7c68ed07196"}], "stats": {"total": 75, "additions": 55, "deletions": 20}, "files": [{"sha": "dc56b86266068d78efe9123a0d9847bb41ccb932", "filename": "gcc/c-lex.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9870475ca00df8883f60db6e569a06bcc9274c84/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9870475ca00df8883f60db6e569a06bcc9274c84/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=9870475ca00df8883f60db6e569a06bcc9274c84", "patch": "@@ -23,6 +23,16 @@ Boston, MA 02111-1307, USA.  */\n #include <stdio.h>\n #include <errno.h>\n #include <setjmp.h>\n+#if HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#else\n+#ifdef HAVE_STRINGS_H\n+#include <strings.h>\n+#endif\n+#endif\n \n #include \"rtl.h\"\n #include \"tree.h\"\n@@ -135,6 +145,9 @@ static int end_of_file;\n static int nextchar = -1;\n #endif\n \n+#ifdef HANDLE_SYSV_PRAGMA\n+static int handle_sysv_pragma\t\tPROTO((int));\n+#endif /* HANDLE_SYSV_PRAGMA */\n static int skip_white_space\t\tPROTO((int));\n static char *extend_token_buffer\tPROTO((char *));\n static int readescape\t\t\tPROTO((int *));\n@@ -894,7 +907,7 @@ check_newline ()\n /* This function has to be in this file, in order to get at\n    the token types.  */\n \n-int\n+static int\n handle_sysv_pragma (token)\n      register int token;\n {\n@@ -1264,7 +1277,7 @@ yylex ()\n       {\n \tregister struct resword *ptr;\n \n-\tif (ptr = is_reserved_word (token_buffer, p - token_buffer))\n+\tif ((ptr = is_reserved_word (token_buffer, p - token_buffer)))\n \t  {\n \t    if (ptr->rid)\n \t      yylval.ttype = ridpointers[(int) ptr->rid];"}, {"sha": "2a5b898353d9e604a4fbc4a49ef9726d40adb326", "filename": "gcc/config/sparc/gmon-sol2.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9870475ca00df8883f60db6e569a06bcc9274c84/gcc%2Fconfig%2Fsparc%2Fgmon-sol2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9870475ca00df8883f60db6e569a06bcc9274c84/gcc%2Fconfig%2Fsparc%2Fgmon-sol2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fgmon-sol2.c?ref=9870475ca00df8883f60db6e569a06bcc9274c84", "patch": "@@ -44,6 +44,7 @@ static char sccsid[] = \"@(#)gmon.c\t5.3 (Berkeley) 5/22/91\";\n #include <string.h>\n #include <limits.h>\n #include <unistd.h>\n+#include <fcntl.h>\n \n #if 0\n #include \"sparc/gmon.h\"\n@@ -95,7 +96,9 @@ static int\ts_scale;\n \n #define\tMSG \"No space for profiling buffer(s)\\n\"\n \n-monstartup(lowpc, highpc)\n+static void moncontrol();\n+\n+void monstartup(lowpc, highpc)\n     char\t*lowpc;\n     char\t*highpc;\n {\n@@ -201,7 +204,7 @@ _mcleanup()\n \telse\n \t    progname++;\n \n-\tsprintf(buf, \"%s/%d.%s\", profdir, getpid(), progname);\n+\tsprintf(buf, \"%s/%ld.%s\", profdir, getpid(), progname);\n \tproffile = buf;\n     } else {\n \tproffile = \"gmon.out\";\n@@ -279,11 +282,10 @@ asm(\".global _mcount; _mcount: mov %i7,%o1; mov %o7,%o0;b,a internal_mcount\");\n /* This is for compatibility with old versions of gcc which used mcount.  */\n asm(\".global mcount; mcount: mov %i7,%o1; mov %o7,%o0;b,a internal_mcount\");\n \n-static internal_mcount(selfpc, frompcindex)\n+static void internal_mcount(selfpc, frompcindex)\n \tregister char\t\t\t*selfpc;\n \tregister unsigned short\t\t*frompcindex;\n {\n-\tregister char\t\t\t*nextframe;\n \tregister struct tostruct\t*top;\n \tregister struct tostruct\t*prevtop;\n \tregister long\t\t\ttoindex;\n@@ -410,7 +412,7 @@ static internal_mcount(selfpc, frompcindex)\n  *\tprofiling is what mcount checks to see if\n  *\tall the data structures are ready.\n  */\n-moncontrol(mode)\n+static void moncontrol(mode)\n     int mode;\n {\n     if (mode) {"}, {"sha": "e9ee03b63042f441b1dc6fa73f99f515a7260b4d", "filename": "gcc/config/svr4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9870475ca00df8883f60db6e569a06bcc9274c84/gcc%2Fconfig%2Fsvr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9870475ca00df8883f60db6e569a06bcc9274c84/gcc%2Fconfig%2Fsvr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr4.h?ref=9870475ca00df8883f60db6e569a06bcc9274c84", "patch": "@@ -892,7 +892,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n       register unsigned char *_limited_str = (unsigned char *) (STR);\t\\\n       register unsigned ch;\t\t\t\t\t\t\\\n       fprintf ((FILE), \"\\t%s\\t\\\"\", STRING_ASM_OP);\t\t\t\\\n-      for (; ch = *_limited_str; _limited_str++)\t\t\t\\\n+      for (; (ch = *_limited_str); _limited_str++)\t\t\t\\\n         {\t\t\t\t\t\t\t\t\\\n \t  register int escape;\t\t\t\t\t\t\\\n \t  switch (escape = ESCAPES[ch])\t\t\t\t\t\\"}, {"sha": "347ee390fa5a732290a0a7d00114649a14538b43", "filename": "gcc/cppexp.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9870475ca00df8883f60db6e569a06bcc9274c84/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9870475ca00df8883f60db6e569a06bcc9274c84/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=9870475ca00df8883f60db6e569a06bcc9274c84", "patch": "@@ -31,14 +31,23 @@ Written by Per Bothner 1994.  */\n extern char *xmalloc PARAMS ((unsigned));\n extern char *xrealloc PARAMS ((void *, unsigned));\n \n-#ifdef MULTIBYTE_CHARS\n+#ifdef HAVE_STDLIB_H\n #include <stdlib.h>\n+#endif\n+#ifdef MULTIBYTE_CHARS\n #include <locale.h>\n #endif\n \n #if HAVE_LIMITS_H\n # include <limits.h>\n #endif\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#else\n+#ifdef HAVE_STRINGS_H\n+#include <strings.h>\n+#endif\n+#endif\n \n #include <stdio.h>\n \n@@ -306,7 +315,6 @@ cpp_lex (pfile, skip_evaluation)\n      int skip_evaluation;\n {\n   register int c;\n-  register int namelen;\n   register struct token *toktab;\n   enum cpp_token token;\n   struct operation op;\n@@ -360,7 +368,7 @@ cpp_lex (pfile, skip_evaluation)\n \t It is mostly copied from c-lex.c.  */\n       {\n         register int result = 0;\n-\tregister num_chars = 0;\n+\tregister int num_chars = 0;\n \tunsigned width = MAX_CHAR_TYPE_SIZE;\n \tint wide_flag = 0;\n \tint max_chars;"}, {"sha": "3e2350350605a17ea1c9114c8bd134b1e8bf5c89", "filename": "gcc/fix-header.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9870475ca00df8883f60db6e569a06bcc9274c84/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9870475ca00df8883f60db6e569a06bcc9274c84/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=9870475ca00df8883f60db6e569a06bcc9274c84", "patch": "@@ -1081,8 +1081,10 @@ main (argc, argv)\n   int inf_fd;\n   struct stat sbuf;\n   int c;\n-  int i, done;\n-  const char *cptr, **pptr;\n+#ifdef FIXPROTO_IGNORE_LIST\n+  int i;\n+#endif\n+  const char *cptr;\n   int ifndef_line;\n   int endif_line;\n   long to_read;"}, {"sha": "38b5874f27c9ed527915af6faf90e306f26a62b5", "filename": "gcc/pexecute.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9870475ca00df8883f60db6e569a06bcc9274c84/gcc%2Fpexecute.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9870475ca00df8883f60db6e569a06bcc9274c84/gcc%2Fpexecute.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpexecute.c?ref=9870475ca00df8883f60db6e569a06bcc9274c84", "patch": "@@ -29,6 +29,9 @@ Boston, MA 02111-1307, USA.  */\n \n #include <stdio.h>\n #include <errno.h>\n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n \n #ifdef IN_GCC\n #include \"gansidecl.h\"\n@@ -637,6 +640,9 @@ pfinish ()\n \n extern int execv ();\n extern int execvp ();\n+#ifdef IN_GCC\n+extern char * my_strerror();\n+#endif\n \n int\n pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)"}, {"sha": "8db02fe94a382b85e5e3a1e9088e20df647067b7", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9870475ca00df8883f60db6e569a06bcc9274c84/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9870475ca00df8883f60db6e569a06bcc9274c84/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=9870475ca00df8883f60db6e569a06bcc9274c84", "patch": "@@ -231,6 +231,7 @@ void\n print_inline_rtx (outf, x, ind)\n      FILE *outf;\n      rtx x;\n+     int ind;\n {\n   int oldsaw = sawclose;\n   int oldindent = indent;"}, {"sha": "81841fb2e75c7d578aa820a40d5c83731f14ee32", "filename": "gcc/profile.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9870475ca00df8883f60db6e569a06bcc9274c84/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9870475ca00df8883f60db6e569a06bcc9274c84/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=9870475ca00df8883f60db6e569a06bcc9274c84", "patch": "@@ -42,6 +42,13 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #include \"config.h\"\n #include <stdio.h>\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#else\n+#ifdef HAVE_STRINGS_H\n+#include <strings.h>\n+#endif\n+#endif\n #include \"rtl.h\"\n #include \"flags.h\"\n #include \"insn-flags.h\"\n@@ -184,11 +191,6 @@ instrument_arcs (f, num_blocks, dump_file)\n   int num_instr_arcs = 0;\n   rtx insn;\n \n-  int neg_one = -1;\n-  int zero = 0;\n-  int inverted;\n-  rtx note;\n-\n   /* Instrument the program start.  */\n   /* Handle block 0 specially, since it will always be instrumented,\n      but it doesn't have a valid first_insn or branch_insn.  We must\n@@ -679,7 +681,7 @@ branch_prob (f, dump_file)\n \t    bb_graph[i].first_insn = insn;\n \t  }\n \telse if (code == NOTE)\n-\t  ;\n+\t  {;}\n \n \tif (code == CALL_INSN)\n \t  {"}, {"sha": "65689f70aa22d1ea5dd5c5bfa3018d23a9949bec", "filename": "gcc/scan.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9870475ca00df8883f60db6e569a06bcc9274c84/gcc%2Fscan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9870475ca00df8883f60db6e569a06bcc9274c84/gcc%2Fscan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fscan.c?ref=9870475ca00df8883f60db6e569a06bcc9274c84", "patch": "@@ -49,7 +49,7 @@ sstring_append (dst, src)\n      sstring *src;\n {\n   register char *d, *s;\n-  register count = SSTRING_LENGTH(src);\n+  register int count = SSTRING_LENGTH(src);\n   MAKE_SSTRING_SPACE(dst, count + 1);\n   d = dst->ptr;\n   s = src->base;\n@@ -84,6 +84,7 @@ int\n scan_string (fp, s, init)\n      register FILE *fp;\n      register sstring *s;\n+     int init;\n {\n   int c;\n   for (;;)"}]}