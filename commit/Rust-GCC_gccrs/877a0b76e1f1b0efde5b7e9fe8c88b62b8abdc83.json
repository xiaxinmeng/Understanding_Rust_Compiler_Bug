{"sha": "877a0b76e1f1b0efde5b7e9fe8c88b62b8abdc83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc3YTBiNzZlMWYxYjBlZmRlNWI3ZTlmZThjODhiNjJiOGFiZGM4Mw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-12-18T13:48:36Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-12-18T13:48:36Z"}, "message": "i386.h (CONDITIONAL_REGISTER_USAGE): Initialize for current function ABI.\n\n\t* i386.h (CONDITIONAL_REGISTER_USAGE): Initialize for current function\n\tABI.\n\t* i386.c (ix86_call_abi_override): Do not trigger target re-init and\n\tdo not try to modify call used regs.\n\t(ix86_maybe_switch_abi): New function.\n\t(TARGET_EXPAND_TO_RTL_HOOK): New macro.\n\nCo-Authored-By: Kai Tietz <kai.tietz@onevision.com>\n\nFrom-SVN: r142810", "tree": {"sha": "f029c9d38fce226b2b2a474b1cacb84982907f60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f029c9d38fce226b2b2a474b1cacb84982907f60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/877a0b76e1f1b0efde5b7e9fe8c88b62b8abdc83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/877a0b76e1f1b0efde5b7e9fe8c88b62b8abdc83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/877a0b76e1f1b0efde5b7e9fe8c88b62b8abdc83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/877a0b76e1f1b0efde5b7e9fe8c88b62b8abdc83/comments", "author": null, "committer": null, "parents": [{"sha": "02b47899e14982d742b91de30d3129b2719c59d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02b47899e14982d742b91de30d3129b2719c59d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02b47899e14982d742b91de30d3129b2719c59d0"}], "stats": {"total": 50, "additions": 28, "deletions": 22}, "files": [{"sha": "a798d85f283a02ed755b9c9c5ae359c86beab717", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/877a0b76e1f1b0efde5b7e9fe8c88b62b8abdc83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/877a0b76e1f1b0efde5b7e9fe8c88b62b8abdc83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=877a0b76e1f1b0efde5b7e9fe8c88b62b8abdc83", "patch": "@@ -1,3 +1,13 @@\n+2008-12-18  Jan Hubicka  <jh@suse.cz>\n+\t    Kai Tietz <kai.tietz@onevision.com>\n+\n+\t* i386.h (CONDITIONAL_REGISTER_USAGE): Initialize for current function\n+\tABI.\n+\t* i386.c (ix86_call_abi_override): Do not trigger target re-init and\n+\tdo not try to modify call used regs.\n+\t(ix86_maybe_switch_abi): New function.\n+\t(TARGET_EXPAND_TO_RTL_HOOK): New macro.\n+\n 2008-12-18  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \tPR rtl-optimization/37922"}, {"sha": "824a11dc230b13001554028d86e92899f95c588f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/877a0b76e1f1b0efde5b7e9fe8c88b62b8abdc83/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/877a0b76e1f1b0efde5b7e9fe8c88b62b8abdc83/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=877a0b76e1f1b0efde5b7e9fe8c88b62b8abdc83", "patch": "@@ -4600,34 +4600,25 @@ extern void init_regs (void);\n \n /* Implementation of call abi switching target hook. Specific to FNDECL\n    the specific call register sets are set. See also CONDITIONAL_REGISTER_USAGE\n-   for more details.\n-   To prevent redudant calls of costy function init_regs (), it checks not to\n-   reset register usage for default abi.  */\n+   for more details.  */\n void\n ix86_call_abi_override (const_tree fndecl)\n {\n   if (fndecl == NULL_TREE)\n     cfun->machine->call_abi = DEFAULT_ABI;\n   else\n     cfun->machine->call_abi = ix86_function_type_abi (TREE_TYPE (fndecl));\n-  if (TARGET_64BIT && cfun->machine->call_abi == MS_ABI)\n-    {\n-      if (call_used_regs[4 /*RSI*/] != 0 || call_used_regs[5 /*RDI*/] != 0)\n-        {\n-          call_used_regs[4 /*RSI*/] = 0;\n-          call_used_regs[5 /*RDI*/] = 0;\n-          init_regs ();\n-        }\n-    }\n-  else if (TARGET_64BIT)\n-    {\n-      if (call_used_regs[4 /*RSI*/] != 1 || call_used_regs[5 /*RDI*/] != 1)\n-        {\n-          call_used_regs[4 /*RSI*/] = 1;\n-          call_used_regs[5 /*RDI*/] = 1;\n-          init_regs ();\n-        }\n-    }\n+}\n+\n+/* MS and SYSV ABI have different set of call used registers.  Avoid expensive\n+   re-initialization of init_regs each time we switch function context since\n+   this is needed only during RTL expansion.  */\n+static void\n+ix86_maybe_switch_abi (void)\n+{\n+  if (TARGET_64BIT &&\n+      call_used_regs[4 /*RSI*/] ==  (cfun->machine->call_abi == MS_ABI))\n+    init_regs ();\n }\n \n /* Initialize a variable CUM of type CUMULATIVE_ARGS\n@@ -29243,6 +29234,9 @@ ix86_enum_va_list (int idx, const char **pname, tree *ptree)\n #undef TARGET_OPTION_CAN_INLINE_P\n #define TARGET_OPTION_CAN_INLINE_P ix86_can_inline_p\n \n+#undef TARGET_EXPAND_TO_RTL_HOOK\n+#define TARGET_EXPAND_TO_RTL_HOOK ix86_maybe_switch_abi\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n #include \"gt-i386.h\""}, {"sha": "a1da0a754bdfdb74822d9fc9ef0f7eacc0a53fea", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/877a0b76e1f1b0efde5b7e9fe8c88b62b8abdc83/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/877a0b76e1f1b0efde5b7e9fe8c88b62b8abdc83/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=877a0b76e1f1b0efde5b7e9fe8c88b62b8abdc83", "patch": "@@ -964,7 +964,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n \tfor (i = FIRST_REX_SSE_REG; i <= LAST_REX_SSE_REG; i++)\t\t\\\n \t  reg_names[i] = \"\";\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n-    if (TARGET_64BIT && DEFAULT_ABI == MS_ABI)\t\t\t\t\\\n+    if (TARGET_64BIT\t\t\t\t\t\t\t\\\n+        && ((cfun && cfun->machine->call_abi == MS_ABI)\t\t\t\\\n+            || (!cfun && DEFAULT_ABI == MS_ABI)))\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n         call_used_regs[4 /*RSI*/] = 0;                                  \\\n         call_used_regs[5 /*RDI*/] = 0;                                  \\"}]}