{"sha": "8ed13e2757455db9dadc4c20dbf1a4aad3663004", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVkMTNlMjc1NzQ1NWRiOWRhZGM0YzIwZGJmMWE0YWFkMzY2MzAwNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-11-14T12:43:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-11-14T12:43:00Z"}, "message": "alloc_traits.h (__allow_copy_cons): Remove.\n\n\t* include/bits/alloc_traits.h (__allow_copy_cons): Remove.\n\t(__check_copy_constructible): Likewise.\n\t* include/bits/unordered_map.h (unordered_map, unordered_multimap):\n\tDo not derive from __check_copy_constructible.\n\t* include/bits/unordered_set.h (unordered_set, unordered_multiset):\n\tLikewise.\n\t* testsuite/23_containers/unordered_map/55043.cc: It is no longer\n\tnecessary for is_copy_constructible to be correct to use nested\n\tunordered containers.\n\t* testsuite/23_containers/unordered_multimap/55043.cc: Likewise.\n\t* testsuite/23_containers/unordered_set/55043.cc: Likewise.\n\t* testsuite/23_containers/unordered_multiset/55043.cc: Likewise.\n\nFrom-SVN: r204790", "tree": {"sha": "5a82706853fdefb4a96e337f812e398e1b1de616", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a82706853fdefb4a96e337f812e398e1b1de616"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ed13e2757455db9dadc4c20dbf1a4aad3663004", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ed13e2757455db9dadc4c20dbf1a4aad3663004", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ed13e2757455db9dadc4c20dbf1a4aad3663004", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ed13e2757455db9dadc4c20dbf1a4aad3663004/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4603a754f63751aa9f6d7e14539ecdbb2f4549a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4603a754f63751aa9f6d7e14539ecdbb2f4549a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4603a754f63751aa9f6d7e14539ecdbb2f4549a"}], "stats": {"total": 144, "additions": 19, "deletions": 125}, "files": [{"sha": "384fb2140e7eac1a07840234c355c94c5f7135bc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed13e2757455db9dadc4c20dbf1a4aad3663004/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed13e2757455db9dadc4c20dbf1a4aad3663004/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8ed13e2757455db9dadc4c20dbf1a4aad3663004", "patch": "@@ -1,3 +1,18 @@\n+2013-11-14  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/bits/alloc_traits.h (__allow_copy_cons): Remove.\n+\t(__check_copy_constructible): Likewise.\n+\t* include/bits/unordered_map.h (unordered_map, unordered_multimap):\n+\tDo not derive from __check_copy_constructible.\n+\t* include/bits/unordered_set.h (unordered_set, unordered_multiset):\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_map/55043.cc: It is no longer\n+\tnecessary for is_copy_constructible to be correct to use nested\n+\tunordered containers.\n+\t* testsuite/23_containers/unordered_multimap/55043.cc: Likewise.\n+\t* testsuite/23_containers/unordered_set/55043.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multiset/55043.cc: Likewise.\n+\n 2013-11-13  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR libstdc++/59087"}, {"sha": "815c4b8b998a4ef931fbfcc176dea9d7e0d0af2b", "filename": "libstdc++-v3/include/bits/alloc_traits.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed13e2757455db9dadc4c20dbf1a4aad3663004/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed13e2757455db9dadc4c20dbf1a4aad3663004/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h?ref=8ed13e2757455db9dadc4c20dbf1a4aad3663004", "patch": "@@ -541,24 +541,6 @@ _GLIBCXX_ALLOC_TR_NESTED_TYPE(propagate_on_container_swap,\n     : is_copy_constructible<_Tp>\n     { };\n \n-  // Used to allow copy construction of unordered containers\n-  template<bool> struct __allow_copy_cons { };\n-\n-  // Used to delete copy constructor of unordered containers\n-  template<>\n-    struct __allow_copy_cons<false>\n-    {\n-      __allow_copy_cons() = default;\n-      __allow_copy_cons(const __allow_copy_cons&) = delete;\n-      __allow_copy_cons(__allow_copy_cons&&) = default;\n-      __allow_copy_cons& operator=(const __allow_copy_cons&) = default;\n-      __allow_copy_cons& operator=(__allow_copy_cons&&) = default;\n-    };\n-\n-  template<typename _Alloc>\n-    using __check_copy_constructible\n-      = __allow_copy_cons<__is_copy_insertable<_Alloc>::value>;\n-\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "a1b99acd21792988a4e3a9e4764696cae41083d9", "filename": "libstdc++-v3/include/bits/unordered_map.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed13e2757455db9dadc4c20dbf1a4aad3663004/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed13e2757455db9dadc4c20dbf1a4aad3663004/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h?ref=8ed13e2757455db9dadc4c20dbf1a4aad3663004", "patch": "@@ -95,7 +95,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t   class _Hash = hash<_Key>,\n \t   class _Pred = std::equal_to<_Key>,\n \t   class _Alloc = std::allocator<std::pair<const _Key, _Tp> > >\n-    class unordered_map : __check_copy_constructible<_Alloc>\n+    class unordered_map\n     {\n       typedef __umap_hashtable<_Key, _Tp, _Hash, _Pred, _Alloc>  _Hashtable;\n       _Hashtable _M_h;\n@@ -807,7 +807,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t   class _Hash = hash<_Key>,\n \t   class _Pred = std::equal_to<_Key>,\n \t   class _Alloc = std::allocator<std::pair<const _Key, _Tp> > >\n-    class unordered_multimap : __check_copy_constructible<_Alloc>\n+    class unordered_multimap\n     {\n       typedef __ummap_hashtable<_Key, _Tp, _Hash, _Pred, _Alloc>  _Hashtable;\n       _Hashtable _M_h;"}, {"sha": "22bddecf0832bcf74845d9552952a635af946ff7", "filename": "libstdc++-v3/include/bits/unordered_set.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed13e2757455db9dadc4c20dbf1a4aad3663004/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed13e2757455db9dadc4c20dbf1a4aad3663004/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h?ref=8ed13e2757455db9dadc4c20dbf1a4aad3663004", "patch": "@@ -90,7 +90,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t   class _Hash = hash<_Value>,\n \t   class _Pred = std::equal_to<_Value>,\n \t   class _Alloc = std::allocator<_Value> >\n-    class unordered_set : __check_copy_constructible<_Alloc>\n+    class unordered_set\n     {\n       typedef __uset_hashtable<_Value, _Hash, _Pred, _Alloc>  _Hashtable;\n       _Hashtable _M_h;\n@@ -725,7 +725,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t   class _Hash = hash<_Value>,\n \t   class _Pred = std::equal_to<_Value>,\n \t   class _Alloc = std::allocator<_Value> >\n-    class unordered_multiset : __check_copy_constructible<_Alloc>\n+    class unordered_multiset\n     {\n       typedef __umset_hashtable<_Value, _Hash, _Pred, _Alloc>  _Hashtable;\n       _Hashtable _M_h;"}, {"sha": "baef785c6a2046c4f9f2f8709a7d05e4952ce520", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/55043.cc", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed13e2757455db9dadc4c20dbf1a4aad3663004/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F55043.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed13e2757455db9dadc4c20dbf1a4aad3663004/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F55043.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F55043.cc?ref=8ed13e2757455db9dadc4c20dbf1a4aad3663004", "patch": "@@ -42,28 +42,3 @@ void test01()\n   v.emplace_back(uim());\n }\n \n-// Unordered containers don't use allocator_traits yet so need full\n-// Allocator interface, derive from std::allocator to get it.\n-template<typename T, bool R>\n-struct Alloc : std::allocator<T>\n-{\n-  template<typename U>\n-    struct rebind { typedef Alloc<U, R> other; };\n-\n-  Alloc() = default;\n-\n-  template<typename U>\n-    Alloc(const Alloc<U, R>&) { }\n-\n-  typedef typename std::conditional<R, T&&, const T&>::type arg_type;\n-\n-  void construct(T* p, arg_type) const\n-  { new((void*)p) T(); }\n-};\n-\n-// verify is_copy_constructible depends on allocator\n-typedef test_type<Alloc<MoveOnly, true>> uim_rval;\n-static_assert(!std::is_copy_constructible<uim_rval>::value, \"is not copyable\");\n-\n-typedef test_type<Alloc<MoveOnly, false>> uim_lval;\n-static_assert(std::is_copy_constructible<uim_lval>::value, \"is copyable\");"}, {"sha": "224e660d51ab148655cffe70529acf357f3b1680", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/55043.cc", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed13e2757455db9dadc4c20dbf1a4aad3663004/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F55043.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed13e2757455db9dadc4c20dbf1a4aad3663004/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F55043.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F55043.cc?ref=8ed13e2757455db9dadc4c20dbf1a4aad3663004", "patch": "@@ -41,29 +41,3 @@ void test01()\n   std::vector<uim> v;\n   v.emplace_back(uim());\n }\n-\n-// Unordered containers don't use allocator_traits yet so need full\n-// Allocator interface, derive from std::allocator to get it.\n-template<typename T, bool R>\n-struct Alloc : std::allocator<T>\n-{\n-  template<typename U>\n-    struct rebind { typedef Alloc<U, R> other; };\n-\n-  Alloc() = default;\n-\n-  template<typename U>\n-    Alloc(const Alloc<U, R>&) { }\n-\n-  typedef typename std::conditional<R, T&&, const T&>::type arg_type;\n-\n-  void construct(T* p, arg_type) const\n-  { new((void*)p) T(); }\n-};\n-\n-// verify is_copy_constructible depends on allocator\n-typedef test_type<Alloc<MoveOnly, true>> uim_rval;\n-static_assert(!std::is_copy_constructible<uim_rval>::value, \"is not copyable\");\n-\n-typedef test_type<Alloc<MoveOnly, false>> uim_lval;\n-static_assert(std::is_copy_constructible<uim_lval>::value, \"is copyable\");"}, {"sha": "ed9da396fb2565eb3cbdd7ac3c2d39515b94d7ba", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/55043.cc", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed13e2757455db9dadc4c20dbf1a4aad3663004/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F55043.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed13e2757455db9dadc4c20dbf1a4aad3663004/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F55043.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F55043.cc?ref=8ed13e2757455db9dadc4c20dbf1a4aad3663004", "patch": "@@ -45,29 +45,3 @@ void test01()\n   std::vector<uim> v;\n   v.emplace_back(uim());\n }\n-\n-// Unordered containers don't use allocator_traits yet so need full\n-// Allocator interface, derive from std::allocator to get it.\n-template<typename T, bool R>\n-struct Alloc : std::allocator<T>\n-{\n-  template<typename U>\n-    struct rebind { typedef Alloc<U, R> other; };\n-\n-  Alloc() = default;\n-\n-  template<typename U>\n-    Alloc(const Alloc<U, R>&) { }\n-\n-  typedef typename std::conditional<R, T&&, const T&>::type arg_type;\n-\n-  void construct(T* p, arg_type) const\n-  { new((void*)p) T(); }\n-};\n-\n-// verify is_copy_constructible depends on allocator\n-typedef test_type<Alloc<MoveOnly, true>> uim_rval;\n-static_assert(!std::is_copy_constructible<uim_rval>::value, \"is not copyable\");\n-\n-typedef test_type<Alloc<MoveOnly, false>> uim_lval;\n-static_assert(std::is_copy_constructible<uim_lval>::value, \"is copyable\");"}, {"sha": "3a0222625ca081fe8ba7d8c8b642e952efbfdb50", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/55043.cc", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed13e2757455db9dadc4c20dbf1a4aad3663004/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F55043.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed13e2757455db9dadc4c20dbf1a4aad3663004/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F55043.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F55043.cc?ref=8ed13e2757455db9dadc4c20dbf1a4aad3663004", "patch": "@@ -45,29 +45,3 @@ void test01()\n   std::vector<uim> v;\n   v.emplace_back(uim());\n }\n-\n-// Unordered containers don't use allocator_traits yet so need full\n-// Allocator interface, derive from std::allocator to get it.\n-template<typename T, bool R>\n-struct Alloc : std::allocator<T>\n-{\n-  template<typename U>\n-    struct rebind { typedef Alloc<U, R> other; };\n-\n-  Alloc() = default;\n-\n-  template<typename U>\n-    Alloc(const Alloc<U, R>&) { }\n-\n-  typedef typename std::conditional<R, T&&, const T&>::type arg_type;\n-\n-  void construct(T* p, arg_type) const\n-  { new((void*)p) T(); }\n-};\n-\n-// verify is_copy_constructible depends on allocator\n-typedef test_type<Alloc<MoveOnly, true>> uim_rval;\n-static_assert(!std::is_copy_constructible<uim_rval>::value, \"is not copyable\");\n-\n-typedef test_type<Alloc<MoveOnly, false>> uim_lval;\n-static_assert(std::is_copy_constructible<uim_lval>::value, \"is copyable\");"}]}