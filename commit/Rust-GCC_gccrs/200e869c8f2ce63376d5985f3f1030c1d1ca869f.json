{"sha": "200e869c8f2ce63376d5985f3f1030c1d1ca869f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAwZTg2OWM4ZjJjZTYzMzc2ZDU5ODVmM2YxMDMwYzFkMWNhODY5Zg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-02-19T17:04:29Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-02-19T17:04:29Z"}, "message": "Adjust fix PR c++/68948\n\ngcc/cp/ChangeLog:\n\n\tPR c++/68948\n\t* pt.c (tsubst_baselink): Don't diagnose an invalid constructor\n\tcall here.\n\t* semantics.c (finish_call_expr): Don't assume a constructor\n\tcall is dependent if only the \"this\" pointer is dependent.  When\n\tbuilding a constructor call, always use a dummy object.\n\nFrom-SVN: r233563", "tree": {"sha": "937eb3520803ea011aaae09888625a3c3605e742", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/937eb3520803ea011aaae09888625a3c3605e742"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/200e869c8f2ce63376d5985f3f1030c1d1ca869f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/200e869c8f2ce63376d5985f3f1030c1d1ca869f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/200e869c8f2ce63376d5985f3f1030c1d1ca869f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/200e869c8f2ce63376d5985f3f1030c1d1ca869f/comments", "author": null, "committer": null, "parents": [{"sha": "de4fcb999f51400b52d3b9b81606a57883c3c1ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de4fcb999f51400b52d3b9b81606a57883c3c1ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de4fcb999f51400b52d3b9b81606a57883c3c1ea"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "8f9b0be1327ca1d2d4dfecbff5997170a77f1712", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/200e869c8f2ce63376d5985f3f1030c1d1ca869f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/200e869c8f2ce63376d5985f3f1030c1d1ca869f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=200e869c8f2ce63376d5985f3f1030c1d1ca869f", "patch": "@@ -1,3 +1,12 @@\n+2016-02-19  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/68948\n+\t* pt.c (tsubst_baselink): Don't diagnose an invalid constructor\n+\tcall here.\n+\t* semantics.c (finish_call_expr): Don't assume a constructor\n+\tcall is dependent if only the \"this\" pointer is dependent.  When\n+\tbuilding a constructor call, always use a dummy object.\n+\n 2016-02-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/69850"}, {"sha": "730838922c7c481b2cdfcf81539a83b6f541a074", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/200e869c8f2ce63376d5985f3f1030c1d1ca869f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/200e869c8f2ce63376d5985f3f1030c1d1ca869f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=200e869c8f2ce63376d5985f3f1030c1d1ca869f", "patch": "@@ -13603,15 +13603,7 @@ tsubst_baselink (tree baselink, tree object_type,\n       name = mangle_conv_op_name_for_type (optype);\n     baselink = lookup_fnfields (qualifying_scope, name, /*protect=*/1);\n     if (!baselink)\n-      {\n-\tif (constructor_name_p (name, qualifying_scope))\n-\t  {\n-\t    if (complain & tf_error)\n-\t      error (\"cannot call constructor %<%T::%D%> directly\",\n-\t\t     qualifying_scope, name);\n-\t  }\n-\treturn error_mark_node;\n-      }\n+      return error_mark_node;\n \n     /* If lookup found a single function, mark it as used at this\n        point.  (If it lookup found multiple functions the one selected"}, {"sha": "c15b1604a78d0b345558e3bc406740d93d1bb3b1", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/200e869c8f2ce63376d5985f3f1030c1d1ca869f/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/200e869c8f2ce63376d5985f3f1030c1d1ca869f/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=200e869c8f2ce63376d5985f3f1030c1d1ca869f", "patch": "@@ -2273,6 +2273,7 @@ finish_call_expr (tree fn, vec<tree, va_gc> **args, bool disallow_virtual,\n \t     related to CWG issues 515 and 1005.  */\n \t  || (TREE_CODE (fn) != COMPONENT_REF\n \t      && non_static_member_function_p (fn)\n+\t      && !DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (get_first_fn (fn))\n \t      && current_class_ref\n \t      && type_dependent_expression_p (current_class_ref)))\n \t{\n@@ -2351,8 +2352,16 @@ finish_call_expr (tree fn, vec<tree, va_gc> **args, bool disallow_virtual,\n \t[class.access.base] says that we need to convert 'this' to B* as\n \tpart of the access, so we pass 'B' to maybe_dummy_object.  */\n \n-      object = maybe_dummy_object (BINFO_TYPE (BASELINK_ACCESS_BINFO (fn)),\n-\t\t\t\t   NULL);\n+      if (DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (get_first_fn (fn)))\n+\t{\n+\t  /* A constructor call always uses a dummy object.  (This constructor\n+\t     call which has the form A::A () is actually invalid and we are\n+\t     going to reject it later in build_new_method_call.)  */\n+\t  object = build_dummy_object (BINFO_TYPE (BASELINK_ACCESS_BINFO (fn)));\n+\t}\n+      else\n+\tobject = maybe_dummy_object (BINFO_TYPE (BASELINK_ACCESS_BINFO (fn)),\n+\t\t\t\t     NULL);\n \n       if (processing_template_decl)\n \t{"}]}