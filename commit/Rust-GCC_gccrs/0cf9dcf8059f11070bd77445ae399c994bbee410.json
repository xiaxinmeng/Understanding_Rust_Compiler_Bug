{"sha": "0cf9dcf8059f11070bd77445ae399c994bbee410", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNmOWRjZjgwNTlmMTEwNzBiZDc3NDQ1YWUzOTljOTk0YmJlZTQxMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-09-05T08:44:11Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-09-05T08:44:11Z"}, "message": "i386.c (decide_alg): Be more conservative about optimizing for size.\n\n\n\t* i386.c (decide_alg): Be more conservative about optimizing for size.\n\n\t* gcc.target/i386/cold-attribute-1.c: Update testcase.\n\nFrom-SVN: r140030", "tree": {"sha": "30e099a8edf50de78877ba7648b1c26d933e067d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30e099a8edf50de78877ba7648b1c26d933e067d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cf9dcf8059f11070bd77445ae399c994bbee410", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cf9dcf8059f11070bd77445ae399c994bbee410", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cf9dcf8059f11070bd77445ae399c994bbee410", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cf9dcf8059f11070bd77445ae399c994bbee410/comments", "author": null, "committer": null, "parents": [{"sha": "84320b0be2e9182ceeb110cebb98cd7006c484ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84320b0be2e9182ceeb110cebb98cd7006c484ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84320b0be2e9182ceeb110cebb98cd7006c484ab"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "934eb02afdf77725b8255adeb4df1fad00609788", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cf9dcf8059f11070bd77445ae399c994bbee410/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cf9dcf8059f11070bd77445ae399c994bbee410/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0cf9dcf8059f11070bd77445ae399c994bbee410", "patch": "@@ -1,3 +1,7 @@\n+2008-09-04  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c (decide_alg): Be more conservative about optimizing for size.\n+\n 2008-09-04  Ian Lance Taylor  <iant@google.com>\n \n \t* varasm.c (narrowing_initializer_constant_valid_p): New"}, {"sha": "e847a11ea3a00ad9f0fd06c563758c2abd93b16a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cf9dcf8059f11070bd77445ae399c994bbee410/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cf9dcf8059f11070bd77445ae399c994bbee410/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0cf9dcf8059f11070bd77445ae399c994bbee410", "patch": "@@ -16994,6 +16994,7 @@ decide_alg (HOST_WIDE_INT count, HOST_WIDE_INT expected_size, bool memset,\n \t    int *dynamic_check)\n {\n   const struct stringop_algs * algs;\n+  bool optimize_for_speed;\n   /* Algorithms using the rep prefix want at least edi and ecx;\n      additionally, memset wants eax and memcpy wants esi.  Don't\n      consider such algorithms if the user has appropriated those\n@@ -17008,7 +17009,16 @@ decide_alg (HOST_WIDE_INT count, HOST_WIDE_INT expected_size, bool memset,\n \t\t\t       && alg != rep_prefix_8_byte))\n   const struct processor_costs *cost;\n   \n-  cost = optimize_insn_for_size_p () ? &ix86_size_cost : ix86_cost;\n+  /* Even if the string operation call is cold, we still might spend a lot\n+     of time processing large blocks.  */\n+  if (optimize_function_for_size_p (cfun)\n+      || (optimize_insn_for_size_p ()\n+          && expected_size != -1 && expected_size < 256))\n+    optimize_for_speed = false;\n+  else\n+    optimize_for_speed = true;\n+\n+  cost = optimize_for_speed ? ix86_cost : &ix86_size_cost;\n \n   *dynamic_check = -1;\n   if (memset)\n@@ -17018,7 +17028,7 @@ decide_alg (HOST_WIDE_INT count, HOST_WIDE_INT expected_size, bool memset,\n   if (stringop_alg != no_stringop && ALG_USABLE_P (stringop_alg))\n     return stringop_alg;\n   /* rep; movq or rep; movl is the smallest variant.  */\n-  else if (optimize_insn_for_size_p ())\n+  else if (!optimize_for_speed)\n     {\n       if (!count || (count & 3))\n \treturn rep_prefix_usable ? rep_prefix_1_byte : loop_1_byte;"}, {"sha": "827968a6594bad459a9e0a83d1e67056db1493fa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cf9dcf8059f11070bd77445ae399c994bbee410/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cf9dcf8059f11070bd77445ae399c994bbee410/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0cf9dcf8059f11070bd77445ae399c994bbee410", "patch": "@@ -1,3 +1,7 @@\n+2008-09-04  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.target/i386/cold-attribute-1.c: Update testcase.\n+\n 2008-09-04  Ian Lance Taylor  <iant@google.com>\n \n \t* g++.dg/init/const7.C: New test."}, {"sha": "db81ee837adf58c5fad48e43f16baf645b14c02a", "filename": "gcc/testsuite/gcc.target/i386/cold-attribute-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cf9dcf8059f11070bd77445ae399c994bbee410/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcold-attribute-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cf9dcf8059f11070bd77445ae399c994bbee410/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcold-attribute-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcold-attribute-1.c?ref=0cf9dcf8059f11070bd77445ae399c994bbee410", "patch": "@@ -10,7 +10,7 @@ my_cold_memset (void *a, int b,int c)\n t(void *a,int b,int c)\n {\n   if (a)\n-    my_cold_memset (a,b,c);\n+    my_cold_memset (a,b,40);\n }\n \n /* The IF conditional should be predicted as cold and my_cold_memset inlined"}]}