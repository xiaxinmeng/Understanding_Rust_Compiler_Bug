{"sha": "c17049330758b5d0878dad527f098237b005baca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE3MDQ5MzMwNzU4YjVkMDg3OGRhZDUyN2YwOTgyMzdiMDA1YmFjYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-06-17T13:47:54Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-06-17T13:47:54Z"}, "message": "string_conversions.cc (__to_xstring<>): New.\n\n2008-06-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* src/string_conversions.cc (__to_xstring<>): New.\n\t(to_string, to_wstring): Use it.\n\nFrom-SVN: r136865", "tree": {"sha": "9afdf5748e2eade826552c5b398c31e494640bc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9afdf5748e2eade826552c5b398c31e494640bc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c17049330758b5d0878dad527f098237b005baca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c17049330758b5d0878dad527f098237b005baca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c17049330758b5d0878dad527f098237b005baca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c17049330758b5d0878dad527f098237b005baca/comments", "author": null, "committer": null, "parents": [{"sha": "47aa9a31912a17ab66aefecc648374754c9b4d4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47aa9a31912a17ab66aefecc648374754c9b4d4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47aa9a31912a17ab66aefecc648374754c9b4d4b"}], "stats": {"total": 67, "additions": 38, "deletions": 29}, "files": [{"sha": "bc9eefa1b742a03e07197c95228bf6466f9927c6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c17049330758b5d0878dad527f098237b005baca/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c17049330758b5d0878dad527f098237b005baca/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c17049330758b5d0878dad527f098237b005baca", "patch": "@@ -1,3 +1,8 @@\n+2008-06-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* src/string_conversions.cc (__to_xstring<>): New.\n+\t(to_string, to_wstring): Use it.\n+\n 2008-06-16  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/basic_string.h (stod, stof, stoi, stol, stold, stoll,"}, {"sha": "ef402ea0c39b3cac5674505bd217cac8eaa6eefe", "filename": "libstdc++-v3/src/string_conversions.cc", "status": "modified", "additions": 33, "deletions": 29, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c17049330758b5d0878dad527f098237b005baca/libstdc%2B%2B-v3%2Fsrc%2Fstring_conversions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c17049330758b5d0878dad527f098237b005baca/libstdc%2B%2B-v3%2Fsrc%2Fstring_conversions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstring_conversions.cc?ref=c17049330758b5d0878dad527f098237b005baca", "patch": "@@ -31,6 +31,7 @@\n #include <limits>\n #include <cerrno>\n #include <cstdlib>\n+#include <cstdarg>\n \n #ifdef _GLIBCXX_USE_C99\n \n@@ -66,6 +67,27 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return __ret;\n     }\n \n+  // Helper for the to_string / to_wstring functions.\n+  template<typename _CharT>\n+    inline basic_string<_CharT>\n+    __to_xstring(int (*__convf) (_CharT*, size_t, const _CharT*, va_list),\n+\t\t size_t __n, const _CharT* __fmt, ...)\n+    {\n+      // XXX Eventually the result will be constructed in place in\n+      // the C++0x string, likely with the help of internal hooks.\n+      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\n+\t\t\t\t\t\t\t  * __n));\n+\n+      va_list __args;\n+      va_start(__args, __fmt);\n+\n+      const int __len = __convf(__s, __n, __fmt, __args);\n+\n+      va_end(__args);\n+\n+      return basic_string<_CharT>(__s, __s + __len);\n+    }\n+\n \n   int\n   stoi(const string& __str, size_t* __idx, int __base)\n@@ -101,30 +123,22 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   stold(const string& __str, size_t* __idx)\n   { return std::__stoa(&std::strtold, \"stold\", __str, __idx); }\n \n+  // NB: (v)snprintf vs sprintf.\n   string\n   to_string(long long __val)\n-  {\n-    // XXX Eventually the result will be constructed in place in\n-    // the C++0x string, likely with the help of internal hooks.\n-    const int __n = 4 * sizeof(long long);\n-    char* __s = static_cast<char*>(__builtin_alloca(__n));\n-    return string(__s, __s + std::snprintf(__s, __n, \"%lld\", __val));\n-  }\n+  { return std::__to_xstring(&std::vsnprintf, 4 * sizeof(long long),\n+\t\t\t     \"%lld\", __val); }\n \n   string\n   to_string(unsigned long long __val)\n-  {\n-    const int __n = 4 * sizeof(unsigned long long);\n-    char* __s = static_cast<char*>(__builtin_alloca(__n));\n-    return string(__s, __s + std::snprintf(__s, __n, \"%llu\", __val));\n-  }\n+  { return std::__to_xstring(&std::vsnprintf, 4 * sizeof(unsigned long long),\n+\t\t\t     \"%llu\", __val); }\n \n   string\n   to_string(long double __val)\n   {\n     const int __n = numeric_limits<long double>::max_exponent10 + 20;\n-    char* __s = static_cast<char*>(__builtin_alloca(__n));\n-    return string(__s, __s + std::snprintf(__s, __n, \"%Lf\", __val));\n+    return std::__to_xstring(&std::vsnprintf, __n, \"%Lf\", __val);\n   }\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n@@ -164,29 +178,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   wstring\n   to_wstring(long long __val)\n-  {\n-    const int __n = 4 * sizeof(long long);\n-    wchar_t* __s = static_cast<wchar_t*>(__builtin_alloca(sizeof(wchar_t)\n-\t\t\t\t\t\t\t  * __n));\n-    return wstring(__s, __s + std::swprintf(__s, __n, L\"%lld\", __val));\n-  }\n+  { return std::__to_xstring(&std::vswprintf, 4 * sizeof(long long),\n+\t\t\t     L\"%lld\", __val); }\n \n   wstring\n   to_wstring(unsigned long long __val)\n-  {\n-    const int __n = 4 * sizeof(unsigned long long);\n-    wchar_t* __s = static_cast<wchar_t*>(__builtin_alloca(sizeof(wchar_t)\n-\t\t\t\t\t\t\t  * __n));\n-    return wstring(__s, __s + std::swprintf(__s, __n, L\"%llu\", __val));\n-  }\n+  { return std::__to_xstring(&std::vswprintf, 4 * sizeof(unsigned long long),\n+\t\t\t     L\"%llu\", __val); }\n \n   wstring\n   to_wstring(long double __val)\n   {\n     const int __n = numeric_limits<long double>::max_exponent10 + 20;\n-    wchar_t* __s = static_cast<wchar_t*>(__builtin_alloca(sizeof(wchar_t)\n-\t\t\t\t\t\t\t  * __n));\n-    return wstring(__s, __s + std::swprintf(__s, __n, L\"%Lf\", __val));\n+    return std::__to_xstring(&std::vswprintf, __n, L\"%Lf\", __val);\n   }\n #endif\n "}]}