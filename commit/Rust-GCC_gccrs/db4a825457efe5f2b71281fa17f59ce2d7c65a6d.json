{"sha": "db4a825457efe5f2b71281fa17f59ce2d7c65a6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI0YTgyNTQ1N2VmZTVmMmI3MTI4MWZhMTdmNTljZTJkN2M2NWE2ZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-11-28T09:47:25Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-11-28T09:47:25Z"}, "message": "cse.c (true_dependence_in_rtx): New function.\n\n\t* cse.c (true_dependence_in_rtx): New function.\n\t(invalidate): Use it.\n\n\t* c-common.h (GOTO_FAKE_P): New macro.\n\t* tree-inline.c (GOTO_FAKE_P): Set.\n\t* c-tree.texi (GOTO_FAKE_P): Document.\n\n\t* varasm.c (assemble_variable): Set reloc to 3 for error_mark\n\tcontaining pointers.\n\t(output_addressed_constants): Check for local/external relocations.\n\t* elfos.h (SELECT_SECTION): Classify data section.\n\t* tm.texi (SELECT_SECTION): Update documentation.\n\n\t* cfganal.c (flow_dfs_compute_reverse_add_bb): set visited bit.\n\t(flow_dfs_compute_reverse_execute): Add only unvisited blocks.\n\nFrom-SVN: r47405", "tree": {"sha": "97187b5417e7845f32035f0c7bc2cd22abcfb809", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97187b5417e7845f32035f0c7bc2cd22abcfb809"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db4a825457efe5f2b71281fa17f59ce2d7c65a6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db4a825457efe5f2b71281fa17f59ce2d7c65a6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db4a825457efe5f2b71281fa17f59ce2d7c65a6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db4a825457efe5f2b71281fa17f59ce2d7c65a6d/comments", "author": null, "committer": null, "parents": [{"sha": "562d21e913afeb56dced1b60fdfe6ff09a2fbf23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/562d21e913afeb56dced1b60fdfe6ff09a2fbf23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/562d21e913afeb56dced1b60fdfe6ff09a2fbf23"}], "stats": {"total": 94, "additions": 70, "deletions": 24}, "files": [{"sha": "35e0364a3afe05ea57a0a14712fe704e233f2156", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4a825457efe5f2b71281fa17f59ce2d7c65a6d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4a825457efe5f2b71281fa17f59ce2d7c65a6d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db4a825457efe5f2b71281fa17f59ce2d7c65a6d", "patch": "@@ -1,3 +1,21 @@\n+Wed Nov 28 10:42:19 CET 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cse.c (true_dependence_in_rtx): New function.\n+\t(invalidate): Use it.\n+\n+\t* c-common.h (GOTO_FAKE_P): New macro.\n+\t* tree-inline.c (GOTO_FAKE_P): Set.\n+\t* c-tree.texi (GOTO_FAKE_P): Document.\n+\n+\t* varasm.c (assemble_variable): Set reloc to 3 for error_mark\n+\tcontaining pointers.\n+\t(output_addressed_constants): Check for local/external relocations.\n+\t* elfos.h (SELECT_SECTION): Classify data section.\n+\t* tm.texi (SELECT_SECTION): Update documentation.\n+\n+\t* cfganal.c (flow_dfs_compute_reverse_add_bb): set visited bit.\n+\t(flow_dfs_compute_reverse_execute): Add only unvisited blocks.\n+\n 2001-11-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* defaults.h (UNALIGNED_SHORT_ASM_OP, UNALIGNED_INT_ASM_OP,"}, {"sha": "1ce21a1769f57f43fe6ad5a40d17606e935d4649", "filename": "gcc/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4a825457efe5f2b71281fa17f59ce2d7c65a6d/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4a825457efe5f2b71281fa17f59ce2d7c65a6d/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=db4a825457efe5f2b71281fa17f59ce2d7c65a6d", "patch": "@@ -600,6 +600,8 @@ extern tree strip_array_types                   PARAMS ((tree));\n /* GOTO_STMT accessor. This gives access to the label associated with\n    a goto statement.  */\n #define GOTO_DESTINATION(NODE)  TREE_OPERAND (GOTO_STMT_CHECK (NODE), 0)\n+/* True for goto created artifically by the compiler.  */\n+#define GOTO_FAKE_P(NODE)\t(TREE_LANG_FLAG_0 (GOTO_STMT_CHECK (NODE)))\n \n /* COMPOUND_STMT accessor. This gives access to the TREE_LIST of\n    statements associated with a compound statement. The result is the"}, {"sha": "6924fd39246d43050ce5ebd32130983b6de23bde", "filename": "gcc/cfganal.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4a825457efe5f2b71281fa17f59ce2d7c65a6d/gcc%2Fcfganal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4a825457efe5f2b71281fa17f59ce2d7c65a6d/gcc%2Fcfganal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.c?ref=db4a825457efe5f2b71281fa17f59ce2d7c65a6d", "patch": "@@ -980,6 +980,7 @@ flow_dfs_compute_reverse_add_bb (data, bb)\n      basic_block bb;\n {\n   data->stack[data->sp++] = bb;\n+  SET_BIT (data->visited_blocks, bb->index - (INVALID_BLOCK + 1));\n   return;\n }\n \n@@ -999,16 +1000,11 @@ flow_dfs_compute_reverse_execute (data)\n   while (data->sp > 0)\n     {\n       bb = data->stack[--data->sp];\n-\n-      /* Mark that we have visited this node.  */\n-      if (!TEST_BIT (data->visited_blocks, bb->index - (INVALID_BLOCK + 1)))\n-\t{\n-\t  SET_BIT (data->visited_blocks, bb->index - (INVALID_BLOCK + 1));\n-\n-\t  /* Perform depth-first search on adjacent vertices.  */\n-\t  for (e = bb->pred; e; e = e->pred_next)\n-\t    flow_dfs_compute_reverse_add_bb (data, e->src);\n-\t}\n+      /* Perform depth-first search on adjacent vertices.  */\n+      for (e = bb->pred; e; e = e->pred_next)\n+\tif (!TEST_BIT (data->visited_blocks,\n+\t\t       e->src->index - (INVALID_BLOCK + 1)))\n+\t  flow_dfs_compute_reverse_add_bb (data, e->src);\n     }\n \n   /* Determine if there are unvisited basic blocks.  */"}, {"sha": "503e141d778cd97438cbd355eeda4862da56070e", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4a825457efe5f2b71281fa17f59ce2d7c65a6d/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4a825457efe5f2b71281fa17f59ce2d7c65a6d/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=db4a825457efe5f2b71281fa17f59ce2d7c65a6d", "patch": "@@ -352,7 +352,23 @@ const_section ()\t\t\t\t\t\t\\\n /* A C statement or statements to switch to the appropriate\n    section for output of DECL.  DECL is either a `VAR_DECL' node\n    or a constant of some sort.  RELOC indicates whether forming\n-   the initial value of DECL requires link-time relocations.  */\n+   the initial value of DECL requires link-time relocations.  \n+ \n+   To optimize loading of shared programs, define following subsections\n+   of data section by attaching:\n+\n+   .rel\n+     Section with this string in name contains data that do have\n+     relocations, so they get grouped together and dynamic linker\n+     will visit fewer pages in memory.\n+   .ro\n+     Marks data read only otherwise.  This is usefull with prelinking\n+     as most of relocations won't be dynamically linked and thus\n+     stay read only.\n+   .local\n+     Marks data containing relocations only to local objects.  These\n+     relocation will get fully resolved by prelinking.\n+ */\n \n #undef SELECT_SECTION\n #define SELECT_SECTION(DECL, RELOC, ALIGN)\t\t\t\\\n@@ -366,12 +382,22 @@ const_section ()\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   else if (TREE_CODE (DECL) == VAR_DECL)\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      if ((flag_pic && RELOC)\t\t\t\t\t\\\n-\t  || !TREE_READONLY (DECL) || TREE_SIDE_EFFECTS (DECL)\t\\\n+      if (!TREE_READONLY (DECL) || TREE_SIDE_EFFECTS (DECL)\t\\\n \t  || !DECL_INITIAL (DECL)\t\t\t\t\\\n \t  || (DECL_INITIAL (DECL) != error_mark_node\t\t\\\n \t      && !TREE_CONSTANT (DECL_INITIAL (DECL))))\t\t\\\n-\tdata_section ();\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  if (flag_pic && ((RELOC) & 2))\t\t\t\\\n+\t    named_section (NULL_TREE, \".data.rel\", RELOC);\t\\\n+\t  else if (flag_pic && (RELOC))\t\t\t\t\\\n+\t    named_section (NULL_TREE, \".data.rel.local\", RELOC);\\\n+\t  else\t\t\t\t\t\t\t\\\n+\t    data_section ();\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      else if (flag_pic && ((RELOC) & 2))\t\t\t\\\n+\tnamed_section (NULL_TREE, \".data.rel.ro\", RELOC);\t\\\n+      else if (flag_pic && (RELOC))\t\t\t\t\\\n+\tnamed_section (NULL_TREE, \".data.rel.ro.local\", RELOC);\t\\\n       else if (flag_merge_constants < 2)\t\t\t\\\n \t/* C and C++ don't allow different variables to share\t\\\n \t   the same location.  -fmerge-all-constants allows\t\\"}, {"sha": "fba491abc58a3d12aaed6f1b93a7d5d0f405baa7", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4a825457efe5f2b71281fa17f59ce2d7c65a6d/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4a825457efe5f2b71281fa17f59ce2d7c65a6d/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=db4a825457efe5f2b71281fa17f59ce2d7c65a6d", "patch": "@@ -5912,9 +5912,7 @@ cse_insn (insn, libcall_insn)\n \t\t/* Don't put a hard register source into the table if this is\n \t\t   the last insn of a libcall.  In this case, we only need\n \t\t   to put src_eqv_elt in src_elt.  */\n-\t\tif (GET_CODE (src) != REG\n-\t\t    || REGNO (src) >= FIRST_PSEUDO_REGISTER\n-\t\t    || ! find_reg_note (insn, REG_RETVAL, NULL_RTX))\n+\t\tif (! find_reg_note (insn, REG_RETVAL, NULL_RTX))\n \t\t  {\n \t\t    struct table_elt *elt;\n "}, {"sha": "dd21ae6285bbada30fde378a5da56a9df5986ef5", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4a825457efe5f2b71281fa17f59ce2d7c65a6d/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4a825457efe5f2b71281fa17f59ce2d7c65a6d/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=db4a825457efe5f2b71281fa17f59ce2d7c65a6d", "patch": "@@ -1278,6 +1278,7 @@ This predicate holds if the function an overloaded\n @findex FOR_BODY\n @tindex GOTO_STMT\n @findex GOTO_DESTINATION\n+@findex GOTO_FAKE_P\n @tindex HANDLER\n @tindex IF_STMT\n @findex IF_COND\n@@ -1511,11 +1512,13 @@ expressions.\n \n @item GOTO_STMT\n \n-Used to represent a @code{goto} statement.  The @code{GOTO_DESTINATION}\n-will usually be a @code{LABEL_DECL}.  However, if the ``computed\n-goto'' extension has been used, the @code{GOTO_DESTINATION} will be an\n-arbitrary expression indicating the destination.  This expression will\n-always have pointer type.\n+Used to represent a @code{goto} statement.  The @code{GOTO_DESTINATION} will\n+usually be a @code{LABEL_DECL}.  However, if the ``computed goto'' extension\n+has been used, the @code{GOTO_DESTINATION} will be an arbitrary expression\n+indicating the destination.  This expression will always have pointer type.\n+Additionally the @code{GOTO_FAKE_P} flag is set whenever the goto statement\n+does not come from source code, but it is generated implicitly by the compiler.\n+This is used for branch prediction.\n \n @item HANDLER\n "}, {"sha": "ad26c8ad08ccd245eed4bacfa9cd97c5aeccc3aa", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4a825457efe5f2b71281fa17f59ce2d7c65a6d/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4a825457efe5f2b71281fa17f59ce2d7c65a6d/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=db4a825457efe5f2b71281fa17f59ce2d7c65a6d", "patch": "@@ -5661,7 +5661,9 @@ A C statement or statements to switch to the appropriate section for\n output of @var{exp}.  You can assume that @var{exp} is either a\n @code{VAR_DECL} node or a constant of some sort.  @var{reloc}\n indicates whether the initial value of @var{exp} requires link-time\n-relocations.  Select the section by calling @code{text_section} or one\n+relocations.  Bit 1 is set when variable contains local relocations\n+only, while bit 2 is set for global relocations.\n+Select the section by calling @code{text_section} or one\n of the alternatives for other sections.  @var{align} is the constant\n alignment in bits.\n "}, {"sha": "3adbf345d7fc90b147b5e5f8c89432638a8c0685", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4a825457efe5f2b71281fa17f59ce2d7c65a6d/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4a825457efe5f2b71281fa17f59ce2d7c65a6d/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=db4a825457efe5f2b71281fa17f59ce2d7c65a6d", "patch": "@@ -350,6 +350,7 @@ copy_body_r (tp, walk_subtrees, data)\n       /* Build the GOTO_STMT.  */\n       goto_stmt = build_stmt (GOTO_STMT, id->ret_label);\n       TREE_CHAIN (goto_stmt) = TREE_CHAIN (return_stmt);\n+      GOTO_FAKE_P (goto_stmt) = 1;\n \n       /* If we're returning something, just turn that into an\n \t assignment into the equivalent of the original"}, {"sha": "b0d96f5b5e513e26971eb7951797664b3db86574", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4a825457efe5f2b71281fa17f59ce2d7c65a6d/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4a825457efe5f2b71281fa17f59ce2d7c65a6d/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=db4a825457efe5f2b71281fa17f59ce2d7c65a6d", "patch": "@@ -1679,7 +1679,7 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n \n   /* Output any data that we will need to use the address of.  */\n   if (DECL_INITIAL (decl) == error_mark_node)\n-    reloc = contains_pointers_p (TREE_TYPE (decl));\n+    reloc = contains_pointers_p (TREE_TYPE (decl)) ? 3 : 0;\n   else if (DECL_INITIAL (decl))\n     reloc = output_addressed_constants (DECL_INITIAL (decl));\n "}]}