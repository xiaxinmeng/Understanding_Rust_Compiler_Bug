{"sha": "7d817ebc0d283639a4659b388c074aff1accc3b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q4MTdlYmMwZDI4MzYzOWE0NjU5YjM4OGMwNzRhZmYxYWNjYzNiMw==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2008-02-26T19:21:21Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2008-02-26T19:21:21Z"}, "message": "dbgcnt.def (cfg_cleanup, [...]): New counters.\n\n        * dbgcnt.def (cfg_cleanup, cprop1, cprop2, dce_fast, dce_ud, dse1,\n        dse2, gcse, if_conversion, if_after_combine, if_after_reload,\n        jump_bypass): New counters.\n        * cfgcleanup.c (cleanup_cfg): Add dbg_cnt.\n        * dce.c (gate_ud_dce): Same.\n        (gate_fast_dce): Same.\n        * dse.c (gate_dse1): New function.\n        (gate_dse2): New function.\n        (gate_dse): Merge results of new gate functions.\n        * gcse.c (gcse_main): Bracket cprop1 and cprop2 with dbg_cnt.\n        (gate_handle_jump_bypass): Add dbg_cnt.\n        (gate_handle_gcse): Add dbg_cnt.\n        * ifcvt.c (gate_handle_if_conversion): Same.\n        (gate_handle_if_after_combine): Same.\n        (gate_handle_if_after_reload): Same.\n        * Makefile.in: Add DBGCNT_H to cfgcleanup.o and ifcvt.o.\n\nFrom-SVN: r132684", "tree": {"sha": "d3d1d41238e71fa67b722a736ee63be9e08201fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3d1d41238e71fa67b722a736ee63be9e08201fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d817ebc0d283639a4659b388c074aff1accc3b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d817ebc0d283639a4659b388c074aff1accc3b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d817ebc0d283639a4659b388c074aff1accc3b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d817ebc0d283639a4659b388c074aff1accc3b3/comments", "author": null, "committer": null, "parents": [{"sha": "a19b7d465087d3105de11c32ed67fcae81bedfe7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a19b7d465087d3105de11c32ed67fcae81bedfe7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a19b7d465087d3105de11c32ed67fcae81bedfe7"}], "stats": {"total": 119, "additions": 93, "deletions": 26}, "files": [{"sha": "6177658033ffd093cda6ddd3e6ac6c54c0eb66b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d817ebc0d283639a4659b388c074aff1accc3b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d817ebc0d283639a4659b388c074aff1accc3b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d817ebc0d283639a4659b388c074aff1accc3b3", "patch": "@@ -1,3 +1,22 @@\n+2008-02-26  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* dbgcnt.def (cfg_cleanup, cprop1, cprop2, dce_fast, dce_ud, dse1,\n+\tdse2, gcse, if_conversion, if_after_combine, if_after_reload,\n+\tjump_bypass): New counters.\n+\t* cfgcleanup.c (cleanup_cfg): Add dbg_cnt.\n+\t* dce.c (gate_ud_dce): Same.\n+\t(gate_fast_dce): Same.\n+\t* dse.c (gate_dse1): New function.\n+\t(gate_dse2): New function.\n+\t(gate_dse): Merge results of new gate functions.\n+\t* gcse.c (gcse_main): Bracket cprop1 and cprop2 with dbg_cnt.\n+\t(gate_handle_jump_bypass): Add dbg_cnt.\n+\t(gate_handle_gcse): Add dbg_cnt.\n+\t* ifcvt.c (gate_handle_if_conversion): Same.\n+\t(gate_handle_if_after_combine): Same.\n+\t(gate_handle_if_after_reload): Same.\n+\t* Makefile.in: Add DBGCNT_H to cfgcleanup.o and ifcvt.o.\n+\n 2008-02-26  Edmar Wienskoski  <edmar@freescale.com>\n \n \t* config/rs6000/rs6000.c (processor_costs): Update e300 cache"}, {"sha": "49ba245b2ad24fd4d4447f2c047c2ac1dbd73934", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d817ebc0d283639a4659b388c074aff1accc3b3/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d817ebc0d283639a4659b388c074aff1accc3b3/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7d817ebc0d283639a4659b388c074aff1accc3b3", "patch": "@@ -2540,7 +2540,7 @@ cse.o : cse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n    hard-reg-set.h $(FLAGS_H) insn-config.h $(RECOG_H) $(EXPR_H) toplev.h \\\n    output.h $(FUNCTION_H) $(BASIC_BLOCK_H) $(GGC_H) $(TM_P_H) $(TIMEVAR_H) \\\n    except.h $(TARGET_H) $(PARAMS_H) rtlhooks-def.h tree-pass.h $(REAL_H) \\\n-    $(DF_H) $(DBGCNT_H)\n+   $(DF_H) $(DBGCNT_H)\n dce.o : dce.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) $(DF_H) cselib.h \\\n    $(DBGCNT_H) dce.h timevar.h tree-pass.h $(DBGCNT_H)\n@@ -2661,7 +2661,7 @@ cfgcleanup.o : cfgcleanup.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(TIMEVAR_H) hard-reg-set.h output.h $(FLAGS_H) $(RECOG_H) \\\n    toplev.h insn-config.h cselib.h $(TARGET_H) $(TM_P_H) $(PARAMS_H) \\\n    $(REGS_H) $(EMIT_RTL_H) $(CFGLAYOUT_H) tree-pass.h $(CFGLOOP_H) $(EXPR_H) \\\n-   $(DF_H)\n+   $(DF_H) $(DBGCNT_H)\n cfgloop.o : cfgloop.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) coretypes.h $(TM_H) \\\n    $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(FLAGS_H) $(FUNCTION_H) \\\n    $(OBSTACK_H) toplev.h $(TREE_FLOW_H) $(TREE_H) pointer-set.h output.h \\\n@@ -2860,7 +2860,7 @@ ifcvt.o : ifcvt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(REGS_H) toplev.h $(FLAGS_H) insn-config.h $(FUNCTION_H) $(RECOG_H) \\\n    $(TARGET_H) $(BASIC_BLOCK_H) $(EXPR_H) output.h except.h $(TM_P_H) \\\n    $(REAL_H) $(OPTABS_H) $(CFGLOOP_H) hard-reg-set.h $(TIMEVAR_H) tree-pass.h \\\n-   $(DF_H)\n+   $(DF_H) $(DBGCNT_H)\n lambda-mat.o : lambda-mat.c $(LAMBDA_H) $(GGC_H) $(SYSTEM_H) $(CONFIG_H) \\\n    $(TM_H) coretypes.h $(TREE_H)\n lambda-trans.o: lambda-trans.c $(LAMBDA_H) $(GGC_H) $(SYSTEM_H) $(CONFIG_H) \\"}, {"sha": "f030eabca627ac3b5a867f7d7bd88663e0c13286", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d817ebc0d283639a4659b388c074aff1accc3b3/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d817ebc0d283639a4659b388c074aff1accc3b3/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=7d817ebc0d283639a4659b388c074aff1accc3b3", "patch": "@@ -55,6 +55,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"expr.h\"\n #include \"df.h\"\n #include \"dce.h\"\n+#include \"dbgcnt.h\"\n \n #define FORWARDER_BLOCK_P(BB) ((BB)->flags & BB_FORWARDER_BLOCK)\n \n@@ -2250,6 +2251,9 @@ cleanup_cfg (int mode)\n   if (mode & CLEANUP_CROSSJUMP)\n     add_noreturn_fake_exit_edges ();\n \n+  if (!dbg_cnt (cfg_cleanup))\n+    return changed;\n+\n   while (try_optimize_cfg (mode))\n     {\n       delete_unreachable_blocks (), changed = true;"}, {"sha": "b2382f167e3227c42805dbdeb141a7522626c3f6", "filename": "gcc/dbgcnt.def", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d817ebc0d283639a4659b388c074aff1accc3b3/gcc%2Fdbgcnt.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d817ebc0d283639a4659b388c074aff1accc3b3/gcc%2Fdbgcnt.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbgcnt.def?ref=7d817ebc0d283639a4659b388c074aff1accc3b3", "patch": "@@ -65,12 +65,26 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Debug counter definitions.  */\n DEBUG_COUNTER (auto_inc_dec)\n+DEBUG_COUNTER (cfg_cleanup)\n DEBUG_COUNTER (cse2_move2add)\n+DEBUG_COUNTER (cprop1)\n+DEBUG_COUNTER (cprop2)\n DEBUG_COUNTER (dce)\n+DEBUG_COUNTER (dce_fast)\n+DEBUG_COUNTER (dce_ud)\n DEBUG_COUNTER (delete_trivial_dead)\n DEBUG_COUNTER (dse)\n+DEBUG_COUNTER (dse1)\n+DEBUG_COUNTER (dse2)\n+DEBUG_COUNTER (gcse)\n DEBUG_COUNTER (gcse2_delete)\n+DEBUG_COUNTER (global_alloc_at_func)\n+DEBUG_COUNTER (global_alloc_at_reg)\n DEBUG_COUNTER (ia64_sched2)\n+DEBUG_COUNTER (if_conversion)\n+DEBUG_COUNTER (if_after_combine)\n+DEBUG_COUNTER (if_after_reload)\n+DEBUG_COUNTER (jump_bypass)\n DEBUG_COUNTER (local_alloc_for_sched)\n DEBUG_COUNTER (postreload_cse)\n DEBUG_COUNTER (pre_insn)\n@@ -79,8 +93,7 @@ DEBUG_COUNTER (sched_block)\n DEBUG_COUNTER (sched_func)\n DEBUG_COUNTER (sched_insn)\n DEBUG_COUNTER (sched_region)\n+DEBUG_COUNTER (sms_sched_loop)\n DEBUG_COUNTER (split_for_sched2)\n DEBUG_COUNTER (tail_call)\n-DEBUG_COUNTER (global_alloc_at_func)\n-DEBUG_COUNTER (global_alloc_at_reg)\n-DEBUG_COUNTER (sms_sched_loop)\n+"}, {"sha": "70b9e2265149cc8fb74d1cfc0f52d5f83b24b891", "filename": "gcc/dce.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d817ebc0d283639a4659b388c074aff1accc3b3/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d817ebc0d283639a4659b388c074aff1accc3b3/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=7d817ebc0d283639a4659b388c074aff1accc3b3", "patch": "@@ -563,7 +563,8 @@ rest_of_handle_ud_dce (void)\n static bool\n gate_ud_dce (void)\n {\n-  return optimize > 1 && flag_dce;\n+  return optimize > 1 && flag_dce\n+    && dbg_cnt (dce_ud);\n }\n \n struct tree_opt_pass pass_ud_rtl_dce =\n@@ -848,7 +849,8 @@ run_fast_dce (void)\n static bool\n gate_fast_dce (void)\n {\n-  return optimize > 0 && flag_dce;\n+  return optimize > 0 && flag_dce\n+    && dbg_cnt (dce_fast);\n }\n \n struct tree_opt_pass pass_fast_rtl_dce ="}, {"sha": "48df3503b6fff20c926ca3290bfed126065bbbe7", "filename": "gcc/dse.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d817ebc0d283639a4659b388c074aff1accc3b3/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d817ebc0d283639a4659b388c074aff1accc3b3/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=7d817ebc0d283639a4659b388c074aff1accc3b3", "patch": "@@ -540,6 +540,8 @@ static unsigned int current_position;\n \n \n static bool gate_dse (void);\n+static bool gate_dse1 (void);\n+static bool gate_dse2 (void);\n \n \f\n /*----------------------------------------------------------------------------\n@@ -3284,13 +3286,27 @@ rest_of_handle_dse (void)\n static bool\n gate_dse (void)\n {\n-  return optimize > 0 && flag_dse;\n+  return gate_dse1 () || gate_dse2 ();\n+}\n+\n+static bool\n+gate_dse1 (void)\n+{\n+  return optimize > 0 && flag_dse\n+    && dbg_cnt (dse1);\n+}\n+\n+static bool\n+gate_dse2 (void)\n+{\n+  return optimize > 0 && flag_dse\n+    && dbg_cnt (dse2);\n }\n \n struct tree_opt_pass pass_rtl_dse1 =\n {\n   \"dse1\",                               /* name */\n-  gate_dse,                             /* gate */\n+  gate_dse1,                            /* gate */\n   rest_of_handle_dse,                   /* execute */\n   NULL,                                 /* sub */\n   NULL,                                 /* next */\n@@ -3309,7 +3325,7 @@ struct tree_opt_pass pass_rtl_dse1 =\n struct tree_opt_pass pass_rtl_dse2 =\n {\n   \"dse2\",                               /* name */\n-  gate_dse,                             /* gate */\n+  gate_dse2,                            /* gate */\n   rest_of_handle_dse,                   /* execute */\n   NULL,                                 /* sub */\n   NULL,                                 /* next */"}, {"sha": "c9c8b4c32b3e62c722fbf5f5d248bd969f657706", "filename": "gcc/gcse.c", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d817ebc0d283639a4659b388c074aff1accc3b3/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d817ebc0d283639a4659b388c074aff1accc3b3/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=7d817ebc0d283639a4659b388c074aff1accc3b3", "patch": "@@ -718,9 +718,12 @@ gcse_main (rtx f ATTRIBUTE_UNUSED)\n \n       /* Don't allow constant propagation to modify jumps\n \t during this pass.  */\n-      timevar_push (TV_CPROP1);\n-      changed = one_cprop_pass (pass + 1, false, false);\n-      timevar_pop (TV_CPROP1);\n+      if (dbg_cnt (cprop1))\n+\t{\n+\t  timevar_push (TV_CPROP1);\n+\t  changed = one_cprop_pass (pass + 1, false, false);\n+\t  timevar_pop (TV_CPROP1);\n+\t}\n \n       if (optimize_size)\n \t/* Do nothing.  */ ;\n@@ -783,13 +786,17 @@ gcse_main (rtx f ATTRIBUTE_UNUSED)\n   /* Do one last pass of copy propagation, including cprop into\n      conditional jumps.  */\n \n-  max_gcse_regno = max_reg_num ();\n-  alloc_gcse_mem ();\n-  /* This time, go ahead and allow cprop to alter jumps.  */\n-  timevar_push (TV_CPROP2);\n-  one_cprop_pass (pass + 1, true, true);\n-  timevar_pop (TV_CPROP2);\n-  free_gcse_mem ();\n+  if (dbg_cnt (cprop2))\n+    {\n+      max_gcse_regno = max_reg_num ();\n+      alloc_gcse_mem ();\n+\n+      /* This time, go ahead and allow cprop to alter jumps.  */\n+      timevar_push (TV_CPROP2);\n+      one_cprop_pass (pass + 1, true, true);\n+      timevar_pop (TV_CPROP2);\n+      free_gcse_mem ();\n+    }\n \n   if (dump_file)\n     {\n@@ -6666,7 +6673,8 @@ is_too_expensive (const char *pass)\n static bool\n gate_handle_jump_bypass (void)\n {\n-  return optimize > 0 && flag_gcse;\n+  return optimize > 0 && flag_gcse\n+    && dbg_cnt (jump_bypass);\n }\n \n /* Perform jump bypassing and control flow optimizations.  */\n@@ -6705,7 +6713,8 @@ struct tree_opt_pass pass_jump_bypass =\n static bool\n gate_handle_gcse (void)\n {\n-  return optimize > 0 && flag_gcse;\n+  return optimize > 0 && flag_gcse\n+    && dbg_cnt (gcse);\n }\n \n "}, {"sha": "1bb67321d2bded244bfbfaa09ab4a7fca4f606e5", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d817ebc0d283639a4659b388c074aff1accc3b3/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d817ebc0d283639a4659b388c074aff1accc3b3/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=7d817ebc0d283639a4659b388c074aff1accc3b3", "patch": "@@ -45,6 +45,7 @@\n #include \"df.h\"\n #include \"vec.h\"\n #include \"vecprim.h\"\n+#include \"dbgcnt.h\"\n \n #ifndef HAVE_conditional_execution\n #define HAVE_conditional_execution 0\n@@ -4109,7 +4110,8 @@ if_convert (void)\n static bool\n gate_handle_if_conversion (void)\n {\n-  return (optimize > 0);\n+  return (optimize > 0)\n+    && dbg_cnt (if_conversion);\n }\n \n /* If-conversion and CFG cleanup.  */\n@@ -4149,7 +4151,8 @@ struct tree_opt_pass pass_rtl_ifcvt =\n static bool\n gate_handle_if_after_combine (void)\n {\n-  return (optimize > 0 && flag_if_conversion);\n+  return optimize > 0 && flag_if_conversion\n+    && dbg_cnt (if_after_combine);\n }\n \n \n@@ -4185,7 +4188,8 @@ struct tree_opt_pass pass_if_after_combine =\n static bool\n gate_handle_if_after_reload (void)\n {\n-  return (optimize > 0 && flag_if_conversion2);\n+  return optimize > 0 && flag_if_conversion2\n+    && dbg_cnt (if_after_reload);\n }\n \n static unsigned int"}]}