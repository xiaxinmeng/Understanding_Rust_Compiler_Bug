{"sha": "d81019db099ad95febbb2d4b4afd8cbe95762062", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgxMDE5ZGIwOTlhZDk1ZmViYmIyZDRiNGFmZDhjYmU5NTc2MjA2Mg==", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-03-19T19:34:48Z"}, "committer": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-03-19T19:34:48Z"}, "message": "[PR99663] Don't use unknown constraint for address constraint in process_address_1.\n\ns390x has insns using several alternatives with address constraints.  Even\nif we don't know at this stage what alternative will be used, we still can say\nthat is an address constraint.  So don't use unknown constraint in this\ncase when there are multiple constraints or/and alternative.\n\ngcc/ChangeLog:\n\n\tPR target/99663\n\t* lra-constraints.c (process_address_1): Don't use unknown\n\tconstraint for address constraint.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/99663\n\t* gcc.target/s390/pr99663.c: New.", "tree": {"sha": "7777fafce79675443efef344fe13bea882370117", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7777fafce79675443efef344fe13bea882370117"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d81019db099ad95febbb2d4b4afd8cbe95762062", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d81019db099ad95febbb2d4b4afd8cbe95762062", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d81019db099ad95febbb2d4b4afd8cbe95762062", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d81019db099ad95febbb2d4b4afd8cbe95762062/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82bb66730bc42b8694fdebef607ea6e49e8496bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82bb66730bc42b8694fdebef607ea6e49e8496bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82bb66730bc42b8694fdebef607ea6e49e8496bf"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "698d8d04a1e49311ef050a70cdc2a1ed7bd250c0", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81019db099ad95febbb2d4b4afd8cbe95762062/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81019db099ad95febbb2d4b4afd8cbe95762062/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=d81019db099ad95febbb2d4b4afd8cbe95762062", "patch": "@@ -3459,12 +3459,17 @@ process_address_1 (int nop, bool check_only_p,\n       constraint\n \t= skip_contraint_modifiers (curr_static_id->operand[dup].constraint);\n     }\n-  if (*skip_contraint_modifiers (constraint\n-\t\t\t\t + CONSTRAINT_LEN (constraint[0],\n-\t\t\t\t\t\t   constraint)) != '\\0')\n+  cn = lookup_constraint (*constraint == '\\0' ? \"X\" : constraint);\n+  /* If we have several alternatives or/and several constraints in an\n+     alternative and we can not say at this stage what constraint will be used,\n+     use unknown constraint.  The exception is an address constraint.  If\n+     operand has one address constraint, probably all others constraints are\n+     address ones.  */\n+  if (get_constraint_type (cn) != CT_ADDRESS\n+      && *skip_contraint_modifiers (constraint\n+\t\t\t\t    + CONSTRAINT_LEN (constraint[0],\n+\t\t\t\t\t\t      constraint)) != '\\0')\n     cn = CONSTRAINT__UNKNOWN;\n-  else\n-    cn = lookup_constraint (*constraint == '\\0' ? \"X\" : constraint);\n   if (insn_extra_address_constraint (cn)\n       /* When we find an asm operand with an address constraint that\n \t doesn't satisfy address_operand to begin with, we clear"}, {"sha": "f4f0f94a63ab630b7e32757ab17b34acbee1df0c", "filename": "gcc/testsuite/gcc.target/s390/pr99663.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81019db099ad95febbb2d4b4afd8cbe95762062/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr99663.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81019db099ad95febbb2d4b4afd8cbe95762062/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr99663.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr99663.c?ref=d81019db099ad95febbb2d4b4afd8cbe95762062", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mtune=z15 -march=z13 -mzarch -O2 -fno-stack-protector -fPIC\" } */\n+\n+typedef struct {\n+  int exponent;\n+  unsigned short lsu[];\n+} decNumber;\n+decNumber decDivideOp_lhs;\n+short decDivideOp_varbuff;\n+void decDivideOp(decNumber *rhs) {\n+  short *msu1;\n+  int exponent;\n+  unsigned short *source;\n+  for (; source >= decDivideOp_lhs.lsu; source--, msu1--)\n+    *msu1 = *source;\n+  for (;;)\n+    if (exponent)\n+      if (decDivideOp_varbuff)\n+        exponent = rhs->exponent;\n+}"}]}