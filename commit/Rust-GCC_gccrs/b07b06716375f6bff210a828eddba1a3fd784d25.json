{"sha": "b07b06716375f6bff210a828eddba1a3fd784d25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA3YjA2NzE2Mzc1ZjZiZmYyMTBhODI4ZWRkYmExYTNmZDc4NGQyNQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-11-27T21:40:56Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-11-27T21:40:56Z"}, "message": "compiler: add result parameter names for inlinable functions\n    \n    An inlinable function body may need to refer to result parameters, so\n    each result parameter needs a name.  We already give them all names in\n    start_function (via create_result_variables).  Change the export data\n    so that for an inlinable function we use those names for the function\n    declaration's result parameters.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/150070\n\nFrom-SVN: r266532", "tree": {"sha": "102cb82459d38d0d5bc8fcc1f79f5bc92b586c20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/102cb82459d38d0d5bc8fcc1f79f5bc92b586c20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b07b06716375f6bff210a828eddba1a3fd784d25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b07b06716375f6bff210a828eddba1a3fd784d25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b07b06716375f6bff210a828eddba1a3fd784d25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b07b06716375f6bff210a828eddba1a3fd784d25/comments", "author": null, "committer": null, "parents": [{"sha": "340632e97bccaa528160dcdff164ba056ef6e6dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/340632e97bccaa528160dcdff164ba056ef6e6dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/340632e97bccaa528160dcdff164ba056ef6e6dc"}], "stats": {"total": 49, "additions": 32, "deletions": 17}, "files": [{"sha": "8032c4c6435185e5e39443dc8eed7700e340a25c", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b07b06716375f6bff210a828eddba1a3fd784d25/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b07b06716375f6bff210a828eddba1a3fd784d25/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=b07b06716375f6bff210a828eddba1a3fd784d25", "patch": "@@ -1,4 +1,4 @@\n-21cf8069ceb078de54cc43ac25c9c89bd15cba56\n+5d0c788cd6099c2bb28bb0ff6a04d94006fbfca8\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "e4bd39d70423aa4f29fbcc14c69f1f04c8a91d85", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b07b06716375f6bff210a828eddba1a3fd784d25/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b07b06716375f6bff210a828eddba1a3fd784d25/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=b07b06716375f6bff210a828eddba1a3fd784d25", "patch": "@@ -5487,7 +5487,7 @@ Function::export_func(Export* exp, const std::string& name) const\n   Block* block = NULL;\n   if (this->export_for_inlining())\n     block = this->block_;\n-  Function::export_func_with_type(exp, name, this->type_,\n+  Function::export_func_with_type(exp, name, this->type_, this->results_,\n \t\t\t\t  this->is_method() && this->nointerface(),\n \t\t\t\t  block, this->location_);\n }\n@@ -5496,8 +5496,9 @@ Function::export_func(Export* exp, const std::string& name) const\n \n void\n Function::export_func_with_type(Export* exp, const std::string& name,\n-\t\t\t\tconst Function_type* fntype, bool nointerface,\n-\t\t\t\tBlock* block, Location loc)\n+\t\t\t\tconst Function_type* fntype,\n+\t\t\t\tFunction::Results* result_vars,\n+\t\t\t\tbool nointerface, Block* block, Location loc)\n {\n   exp->write_c_string(\"func \");\n \n@@ -5549,31 +5550,45 @@ Function::export_func_with_type(Export* exp, const std::string& name,\n     }\n   exp->write_c_string(\")\");\n \n-  const Typed_identifier_list* results = fntype->results();\n-  if (results != NULL)\n+  const Typed_identifier_list* result_decls = fntype->results();\n+  if (result_decls != NULL)\n     {\n-      if (results->size() == 1 && results->begin()->name().empty())\n+      if (result_decls->size() == 1\n+\t  && result_decls->begin()->name().empty()\n+\t  && block == NULL)\n \t{\n \t  exp->write_c_string(\" \");\n-\t  exp->write_type(results->begin()->type());\n+\t  exp->write_type(result_decls->begin()->type());\n \t}\n       else\n \t{\n \t  exp->write_c_string(\" (\");\n \t  bool first = true;\n-\t  for (Typed_identifier_list::const_iterator p = results->begin();\n-\t       p != results->end();\n-\t       ++p)\n+\t  Results::const_iterator pr;\n+\t  if (result_vars != NULL)\n+\t    pr = result_vars->begin();\n+\t  for (Typed_identifier_list::const_iterator pd = result_decls->begin();\n+\t       pd != result_decls->end();\n+\t       ++pd)\n \t    {\n \t      if (first)\n \t\tfirst = false;\n \t      else\n \t\texp->write_c_string(\", \");\n-\t      exp->write_name(p->name());\n-\t      exp->write_escape(p->note());\n+\t      // We only use pr->name, which may be artificial, if\n+\t      // need it for inlining.\n+\t      if (block == NULL || result_vars == NULL)\n+\t\texp->write_name(pd->name());\n+\t      else\n+\t\texp->write_name((*pr)->name());\n+\t      exp->write_escape(pd->note());\n \t      exp->write_c_string(\" \");\n-\t      exp->write_type(p->type());\n+\t      exp->write_type(pd->type());\n+\t      if (result_vars != NULL)\n+\t\t++pr;\n \t    }\n+\t  if (result_vars != NULL)\n+\t    go_assert(pr == result_vars->end());\n \t  exp->write_c_string(\")\");\n \t}\n     }"}, {"sha": "0331ccacee33a327e8ec01ac16ab7541ed705da9", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b07b06716375f6bff210a828eddba1a3fd784d25/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b07b06716375f6bff210a828eddba1a3fd784d25/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=b07b06716375f6bff210a828eddba1a3fd784d25", "patch": "@@ -1513,8 +1513,8 @@ class Function\n   // Export a function with a type.\n   static void\n   export_func_with_type(Export*, const std::string& name,\n-\t\t\tconst Function_type*, bool nointerface, Block* block,\n-\t\t\tLocation);\n+\t\t\tconst Function_type*, Results*, bool nointerface,\n+\t\t\tBlock* block, Location);\n \n   // Import a function.\n   static void\n@@ -1740,7 +1740,7 @@ class Function_declaration\n   void\n   export_func(Export* exp, const std::string& name) const\n   {\n-    Function::export_func_with_type(exp, name, this->fntype_,\n+    Function::export_func_with_type(exp, name, this->fntype_, NULL,\n \t\t\t\t    this->is_method() && this->nointerface(),\n \t\t\t\t    NULL, this->location_);\n   }"}]}