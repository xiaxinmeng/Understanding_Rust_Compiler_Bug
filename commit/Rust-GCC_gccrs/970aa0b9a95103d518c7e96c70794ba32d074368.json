{"sha": "970aa0b9a95103d518c7e96c70794ba32d074368", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcwYWEwYjlhOTUxMDNkNTE4YzdlOTZjNzA3OTRiYTMyZDA3NDM2OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-04-22T17:37:57Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-04-22T17:37:57Z"}, "message": "re PR c++/53067 (c++0x GCC 4.7.0 Regression std::ref with unordered sets)\n\n2012-04-22  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/53067\n\t* include/bits/hashtable_policy.h: Change inheritances to public.\n\t* testsuite/23_containers/unordered_map/requirements/53067.cc: New.\n\t* testsuite/23_containers/unordered_set/requirements/53067.cc: Likewise.\n\nFrom-SVN: r186676", "tree": {"sha": "f450c17a4e7f46e954b26ad1138c56c36170e315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f450c17a4e7f46e954b26ad1138c56c36170e315"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/970aa0b9a95103d518c7e96c70794ba32d074368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/970aa0b9a95103d518c7e96c70794ba32d074368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/970aa0b9a95103d518c7e96c70794ba32d074368", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/970aa0b9a95103d518c7e96c70794ba32d074368/comments", "author": null, "committer": null, "parents": [{"sha": "96b3ee1c504a6507154bbbfcf081a8f969fb8671", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96b3ee1c504a6507154bbbfcf081a8f969fb8671", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96b3ee1c504a6507154bbbfcf081a8f969fb8671"}], "stats": {"total": 99, "additions": 85, "deletions": 14}, "files": [{"sha": "6ad664509b3a93ec1a17ab448523cdd78a805a81", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/970aa0b9a95103d518c7e96c70794ba32d074368/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/970aa0b9a95103d518c7e96c70794ba32d074368/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=970aa0b9a95103d518c7e96c70794ba32d074368", "patch": "@@ -1,3 +1,10 @@\n+2012-04-22  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/53067\n+\t* include/bits/hashtable_policy.h: Change inheritances to public.\n+\t* testsuite/23_containers/unordered_map/requirements/53067.cc: New.\n+\t* testsuite/23_containers/unordered_set/requirements/53067.cc: Likewise.\n+\n 2012-04-22  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/ext/alloc_traits.h (__alloc_traits::difference_type):"}, {"sha": "160a6ce172436fd30c878366c34fbea9819783d0", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/970aa0b9a95103d518c7e96c70794ba32d074368/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/970aa0b9a95103d518c7e96c70794ba32d074368/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=970aa0b9a95103d518c7e96c70794ba32d074368", "patch": "@@ -882,7 +882,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Specialization using EBO.\n   template<int _Nm, typename _Tp>\n-    struct _Hashtable_ebo_helper<_Nm, _Tp, true> : private _Tp\n+    struct _Hashtable_ebo_helper<_Nm, _Tp, true>\n+    // See PR53067.\n+    : public _Tp\n     {\n       _Hashtable_ebo_helper() = default;\n \n@@ -949,8 +951,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Key, typename _Value, typename _ExtractKey,\n \t   typename _H1, typename _H2, typename _Hash>\n     struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, false>\n-    : private _Hashtable_ebo_helper<0, _ExtractKey>,\n-      private _Hashtable_ebo_helper<1, _Hash>\n+    // See PR53067.\n+    : public  _Hashtable_ebo_helper<0, _ExtractKey>,\n+      public  _Hashtable_ebo_helper<1, _Hash>\n     {\n     private:\n       typedef _Hashtable_ebo_helper<0, _ExtractKey> \t_EboExtractKey;\n@@ -1025,9 +1028,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _H1, typename _H2>\n     struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2,\n \t\t\t   _Default_ranged_hash, false>\n-    : private _Hashtable_ebo_helper<0, _ExtractKey>,\n-      private _Hashtable_ebo_helper<1, _H1>,\n-      private _Hashtable_ebo_helper<2, _H2>\n+    // See PR53067.\n+    : public  _Hashtable_ebo_helper<0, _ExtractKey>,\n+      public  _Hashtable_ebo_helper<1, _H1>,\n+      public  _Hashtable_ebo_helper<2, _H2>\n     {\n     private:\n       typedef _Hashtable_ebo_helper<0, _ExtractKey> \t_EboExtractKey;\n@@ -1108,9 +1112,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _H1, typename _H2>\n     struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2,\n \t\t\t   _Default_ranged_hash, true>\n-    : private _Hashtable_ebo_helper<0, _ExtractKey>,\n-      private _Hashtable_ebo_helper<1, _H1>,\n-      private _Hashtable_ebo_helper<2, _H2>\n+    // See PR53067.\n+    : public  _Hashtable_ebo_helper<0, _ExtractKey>,\n+      public  _Hashtable_ebo_helper<1, _H1>,\n+      public  _Hashtable_ebo_helper<2, _H2>\n     {\n     private:\n       typedef _Hashtable_ebo_helper<0, _ExtractKey>\t_EboExtractKey;\n@@ -1229,7 +1234,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _H1, typename _H2, typename _Hash>\n     struct _Local_iterator_base<_Key, _Value, _ExtractKey,\n \t\t\t\t_H1, _H2, _Hash, true>\n-      : private _H2\n+    // See PR53067.\n+    : public _H2\n     {\n       _Local_iterator_base() = default;\n       _Local_iterator_base(_Hash_node<_Value, true>* __p,\n@@ -1261,8 +1267,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _H1, typename _H2, typename _Hash>\n     struct _Local_iterator_base<_Key, _Value, _ExtractKey,\n \t\t\t\t_H1, _H2, _Hash, false>\n-      : private _Hash_code_base<_Key, _Value, _ExtractKey,\n-\t\t\t\t_H1, _H2, _Hash, false>\n+    // See PR53067.\n+    : public _Hash_code_base<_Key, _Value, _ExtractKey,\n+\t\t\t     _H1, _H2, _Hash, false>\n     {\n       _Local_iterator_base() = default;\n       _Local_iterator_base(_Hash_node<_Value, false>* __p,\n@@ -1421,9 +1428,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _Traits>\n   struct _Hashtable_base\n+  // See PR53067.\n   : public  _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash,\n-\t\t\t    _Traits::__hash_cached::value>,\n-    private _Hashtable_ebo_helper<0, _Equal>\n+\t\t\t      _Traits::__hash_cached::value>,\n+    public _Hashtable_ebo_helper<0, _Equal>\n   {\n   public:\n     typedef _Key                                    key_type;"}, {"sha": "704f5998c0dceeac73ef00dad579d74f64f747a7", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/requirements/53067.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/970aa0b9a95103d518c7e96c70794ba32d074368/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2F53067.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/970aa0b9a95103d518c7e96c70794ba32d074368/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2F53067.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2F53067.cc?ref=970aa0b9a95103d518c7e96c70794ba32d074368", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_map>\n+#include <functional>\n+\n+void f()\n+{\n+  std::unordered_map<int, int> Foo;\n+  ref(Foo);\n+}"}, {"sha": "760f10c7e850cf99e70e164a5ca16821f98a3652", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/requirements/53067.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/970aa0b9a95103d518c7e96c70794ba32d074368/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2F53067.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/970aa0b9a95103d518c7e96c70794ba32d074368/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2F53067.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2F53067.cc?ref=970aa0b9a95103d518c7e96c70794ba32d074368", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_set>\n+#include <functional>\n+\n+void f()\n+{\n+  std::unordered_set<int> Foo;\n+  ref(Foo);\n+}"}]}