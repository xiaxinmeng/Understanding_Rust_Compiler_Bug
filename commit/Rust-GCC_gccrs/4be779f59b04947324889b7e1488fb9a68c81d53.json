{"sha": "4be779f59b04947324889b7e1488fb9a68c81d53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJlNzc5ZjU5YjA0OTQ3MzI0ODg5YjdlMTQ4OGZiOWE2OGM4MWQ1Mw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-07T20:50:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-20T12:27:48Z"}, "message": "libstdc++: Define operator<=> for <system_error> types\n\nAnother piece of P1614R2 for C++20.\n\nThis also adds tests for operator< in C++11, which was present but\nuntested.\n\n\t* include/std/system_error (error_category::operator<=>)\n\t(operator<=>(const error_code&, const error_code&))\n\t(operator<=>(const error_condition&, const error_condition&)): Define\n\tfor C++20.\n\t* testsuite/19_diagnostics/error_category/operators/less.cc: New test.\n\t* testsuite/19_diagnostics/error_category/operators/three_way.cc: New\n\ttest.\n\t* testsuite/19_diagnostics/error_code/operators/equal.cc: Remove\n\tincorrect comment.\n\t* testsuite/19_diagnostics/error_code/operators/less.cc: New test.\n\t* testsuite/19_diagnostics/error_code/operators/not_equal.cc: Remove\n\tincorrect comment.\n\t* testsuite/19_diagnostics/error_code/operators/three_way.cc: New test.\n\t* testsuite/19_diagnostics/error_condition/operators/equal.cc: Remove\n\tincorrect comment.\n\t* testsuite/19_diagnostics/error_condition/operators/less.cc: New test.\n\t* testsuite/19_diagnostics/error_condition/operators/not_equal.cc:\n\tRemove incorrect comment.\n\t* testsuite/19_diagnostics/error_condition/operators/three_way.cc: New\n\ttest.", "tree": {"sha": "18dba4d2ec1154e09d1adb6d3fe1427d481617a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18dba4d2ec1154e09d1adb6d3fe1427d481617a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4be779f59b04947324889b7e1488fb9a68c81d53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be779f59b04947324889b7e1488fb9a68c81d53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4be779f59b04947324889b7e1488fb9a68c81d53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be779f59b04947324889b7e1488fb9a68c81d53/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20fa41e61fd2d2839ca47e0dfac6976c552ab648", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20fa41e61fd2d2839ca47e0dfac6976c552ab648", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20fa41e61fd2d2839ca47e0dfac6976c552ab648"}], "stats": {"total": 378, "additions": 350, "deletions": 28}, "files": [{"sha": "b4b95dfc5e742a94c8318dd229dfd679f36d5b2e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be779f59b04947324889b7e1488fb9a68c81d53/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be779f59b04947324889b7e1488fb9a68c81d53/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4be779f59b04947324889b7e1488fb9a68c81d53", "patch": "@@ -1,5 +1,26 @@\n 2020-02-20  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/system_error (error_category::operator<=>)\n+\t(operator<=>(const error_code&, const error_code&))\n+\t(operator<=>(const error_condition&, const error_condition&)): Define\n+\tfor C++20.\n+\t* testsuite/19_diagnostics/error_category/operators/less.cc: New test.\n+\t* testsuite/19_diagnostics/error_category/operators/three_way.cc: New\n+\ttest.\n+\t* testsuite/19_diagnostics/error_code/operators/equal.cc: Remove\n+\tincorrect comment.\n+\t* testsuite/19_diagnostics/error_code/operators/less.cc: New test.\n+\t* testsuite/19_diagnostics/error_code/operators/not_equal.cc: Remove\n+\tincorrect comment.\n+\t* testsuite/19_diagnostics/error_code/operators/three_way.cc: New test.\n+\t* testsuite/19_diagnostics/error_condition/operators/equal.cc: Remove\n+\tincorrect comment.\n+\t* testsuite/19_diagnostics/error_condition/operators/less.cc: New test.\n+\t* testsuite/19_diagnostics/error_condition/operators/not_equal.cc:\n+\tRemove incorrect comment.\n+\t* testsuite/19_diagnostics/error_condition/operators/three_way.cc: New\n+\ttest.\n+\n \t* libsupc++/typeinfo (type_info::operator!=): Remove for C++20.\n \n \t* include/std/thread (thread::id::operator<=>): Define for C++20."}, {"sha": "f92b4345895aab9361dc91c42ce01356cc9ed36f", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 55, "deletions": 24, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be779f59b04947324889b7e1488fb9a68c81d53/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be779f59b04947324889b7e1488fb9a68c81d53/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=4be779f59b04947324889b7e1488fb9a68c81d53", "patch": "@@ -39,6 +39,9 @@\n #include <bits/error_constants.h>\n #include <iosfwd>\n #include <stdexcept>\n+#if __cplusplus > 201703L\n+# include <compare>\n+#endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -129,17 +132,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     virtual bool\n     equivalent(const error_code& __code, int __i) const noexcept;\n \n-    bool\n-    operator<(const error_category& __other) const noexcept\n-    { return less<const error_category*>()(this, &__other); }\n-\n     bool\n     operator==(const error_category& __other) const noexcept\n     { return this == &__other; }\n \n+#if __cpp_lib_three_way_comparison\n+    strong_ordering\n+    operator<=>(const error_category& __rhs) const noexcept\n+    { return std::compare_three_way()(this, &__rhs); }\n+#else\n     bool\n     operator!=(const error_category& __other) const noexcept\n     { return this != &__other; }\n+\n+    bool\n+    operator<(const error_category& __other) const noexcept\n+    { return less<const error_category*>()(this, &__other); }\n+#endif\n   };\n \n   // DR 890.\n@@ -230,13 +239,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   make_error_code(errc __e) noexcept\n   { return error_code(static_cast<int>(__e), generic_category()); }\n \n+#if __cpp_lib_three_way_comparison\n+  inline strong_ordering\n+  operator<=>(const error_code& __lhs, const error_code& __rhs) noexcept\n+  {\n+    if (auto __c = __lhs.category() <=> __rhs.category(); __c != 0)\n+      return __c;\n+    return __lhs.value() <=> __rhs.value();\n+  }\n+#else\n   inline bool\n   operator<(const error_code& __lhs, const error_code& __rhs) noexcept\n   {\n     return (__lhs.category() < __rhs.category()\n \t    || (__lhs.category() == __rhs.category()\n \t\t&& __lhs.value() < __rhs.value()));\n   }\n+#endif\n \n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>&\n@@ -316,17 +335,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   make_error_condition(errc __e) noexcept\n   { return error_condition(static_cast<int>(__e), generic_category()); }\n \n-  /// Define an ordering for error_condition objects.\n-  /// @relates error_condition\n-  inline bool\n-  operator<(const error_condition& __lhs,\n-\t    const error_condition& __rhs) noexcept\n-  {\n-    return (__lhs.category() < __rhs.category()\n-\t    || (__lhs.category() == __rhs.category()\n-\t\t&& __lhs.value() < __rhs.value()));\n-  }\n-\n   // 19.4.4 Comparison operators\n \n   /// @relates error_code\n@@ -344,22 +352,45 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    || __rhs.category().equivalent(__lhs, __rhs.value()));\n   }\n \n-  /// @relates error_code\n   /// @relates error_condition\n   inline bool\n-  operator==(const error_condition& __lhs, const error_code& __rhs) noexcept\n+  operator==(const error_condition& __lhs,\n+\t     const error_condition& __rhs) noexcept\n   {\n-    return (__rhs.category().equivalent(__rhs.value(), __lhs)\n-\t    || __lhs.category().equivalent(__rhs, __lhs.value()));\n+    return (__lhs.category() == __rhs.category()\n+\t    && __lhs.value() == __rhs.value());\n   }\n \n+#if __cpp_lib_three_way_comparison\n+  /// Define an ordering for error_condition objects.\n+  /// @relates error_condition\n+  inline strong_ordering\n+  operator<=>(const error_condition& __lhs,\n+\t      const error_condition& __rhs) noexcept\n+  {\n+    if (auto __c = __lhs.category() <=> __rhs.category(); __c != 0)\n+      return __c;\n+    return __lhs.value() <=> __rhs.value();\n+  }\n+#else\n+  /// Define an ordering for error_condition objects.\n   /// @relates error_condition\n   inline bool\n-  operator==(const error_condition& __lhs,\n-\t     const error_condition& __rhs) noexcept\n+  operator<(const error_condition& __lhs,\n+\t    const error_condition& __rhs) noexcept\n   {\n-    return (__lhs.category() == __rhs.category()\n-\t    && __lhs.value() == __rhs.value());\n+    return (__lhs.category() < __rhs.category()\n+\t    || (__lhs.category() == __rhs.category()\n+\t\t&& __lhs.value() < __rhs.value()));\n+  }\n+\n+  /// @relates error_code\n+  /// @relates error_condition\n+  inline bool\n+  operator==(const error_condition& __lhs, const error_code& __rhs) noexcept\n+  {\n+    return (__rhs.category().equivalent(__rhs.value(), __lhs)\n+\t    || __lhs.category().equivalent(__rhs, __lhs.value()));\n   }\n \n   /// @relates error_code\n@@ -384,7 +415,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   operator!=(const error_condition& __lhs,\n \t     const error_condition& __rhs) noexcept\n   { return !(__lhs == __rhs); }\n-\n+#endif // three_way_comparison\n \n   /**\n    * @brief An exception type that includes an `error_code` value."}, {"sha": "67831536b8569dc232443a5834f781ea727bd2f0", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_category/operators/less.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be779f59b04947324889b7e1488fb9a68c81d53/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Foperators%2Fless.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be779f59b04947324889b7e1488fb9a68c81d53/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Foperators%2Fless.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Foperators%2Fless.cc?ref=4be779f59b04947324889b7e1488fb9a68c81d53", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do run { target c++11 } }\n+// { dg-additional-options \"-static-libgcc\" { target *-*-mingw* } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <system_error>\n+#include <testsuite_error.h>\n+\n+int main()\n+{\n+  __gnu_test::test_category c1;\n+  VERIFY( !(c1 < c1) );\n+  __gnu_test::test_derived_category c2;\n+  VERIFY( (c1 < c2) || (c2 < c1) );\n+}"}, {"sha": "efdf320dd36c09d5a8a8bcfaee191a2c1e7f7162", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_category/operators/three_way.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be779f59b04947324889b7e1488fb9a68c81d53/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Foperators%2Fthree_way.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be779f59b04947324889b7e1488fb9a68c81d53/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Foperators%2Fthree_way.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Foperators%2Fthree_way.cc?ref=4be779f59b04947324889b7e1488fb9a68c81d53", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <system_error>\n+#include <testsuite_error.h>\n+\n+void\n+test01()\n+{\n+  __gnu_test::test_category c1;\n+  VERIFY( std::is_eq(c1 <=> c1) );\n+  __gnu_test::test_derived_category c2;\n+  VERIFY( std::is_neq(c1 <=> c2) );\n+}\n+\n+void\n+test02()\n+{\n+  __gnu_test::test_category c1;\n+  VERIFY( c1 <= c1 );\n+  VERIFY( c1 >= c1 );\n+  __gnu_test::test_derived_category c2;\n+  VERIFY( (c1 < c2) || (c2 < c1) );\n+  VERIFY( (c1 > c2) || (c2 > c1) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "edb68b295ff147fb92bf7126be46ee80656b0eb6", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/operators/equal.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be779f59b04947324889b7e1488fb9a68c81d53/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be779f59b04947324889b7e1488fb9a68c81d53/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fequal.cc?ref=4be779f59b04947324889b7e1488fb9a68c81d53", "patch": "@@ -22,7 +22,6 @@\n #include <system_error>\n #include <testsuite_error.h>\n \n-// unspecified bool operator positive tests\n int main()\n {\n   std::error_code e1;"}, {"sha": "8cb3a7c3a7a8ef21c68f8542fae0d5fb43618be9", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/operators/less.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be779f59b04947324889b7e1488fb9a68c81d53/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fless.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be779f59b04947324889b7e1488fb9a68c81d53/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fless.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fless.cc?ref=4be779f59b04947324889b7e1488fb9a68c81d53", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do run { target c++11 } }\n+// { dg-additional-options \"-static-libstdc++\" { target *-*-mingw* } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <system_error>\n+#include <testsuite_error.h>\n+\n+int main()\n+{\n+  std::error_code e1;\n+  std::error_code e2(std::make_error_code(std::errc::operation_not_supported));\n+\n+  VERIFY( !(e1 < e1) );\n+  VERIFY( !(e2 < e2) );\n+\n+  VERIFY( (e1 < e2) == (e1.value() < e2.value()) );\n+\n+  const __gnu_test::test_category cat;\n+  std::error_code e3(e2.value(), cat);\n+  VERIFY( !(e3 < e3) );\n+  VERIFY( (e2 < e3) == (e2.category() < e3.category()) );\n+}"}, {"sha": "5f261ed56fe69da68c07e4ed2edc8650eb3ed9f9", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/operators/not_equal.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be779f59b04947324889b7e1488fb9a68c81d53/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fnot_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be779f59b04947324889b7e1488fb9a68c81d53/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fnot_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fnot_equal.cc?ref=4be779f59b04947324889b7e1488fb9a68c81d53", "patch": "@@ -22,7 +22,6 @@\n #include <system_error>\n #include <testsuite_error.h>\n \n-// unspecified bool operator positive tests\n int main()\n {\n   std::error_code e1;"}, {"sha": "86416d6dbbdf0c1e056ed032c56d569b93b2fd38", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/operators/three_way.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be779f59b04947324889b7e1488fb9a68c81d53/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fthree_way.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be779f59b04947324889b7e1488fb9a68c81d53/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fthree_way.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fthree_way.cc?ref=4be779f59b04947324889b7e1488fb9a68c81d53", "patch": "@@ -0,0 +1,60 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <system_error>\n+#include <testsuite_error.h>\n+\n+void\n+test01()\n+{\n+  std::error_code e1;\n+  std::error_code e2(std::make_error_code(std::errc::operation_not_supported));\n+\n+  VERIFY( std::is_eq(e1 <=> e1) );\n+  VERIFY( std::is_lteq(e1 <=> e1) );\n+  VERIFY( std::is_gteq(e1 <=> e1) );\n+\n+  VERIFY( std::is_neq(e1 <=> e2) );\n+  VERIFY( std::is_lt(e1 <=> e2) || std::is_gt(e1 <=> e2) );\n+  VERIFY( (e1 <=> e2) == (e1.value() <=> e2.value()) );\n+\n+  VERIFY( e1 == e1 );\n+  VERIFY( !(e1 == e2) );\n+\n+  VERIFY( !(e1 < e1) );\n+  VERIFY( !(e2 < e2) );\n+\n+  const __gnu_test::test_category cat;\n+  std::error_code e3(e2.value(), cat);\n+\n+  VERIFY( std::is_neq(e2 <=> e3) );\n+  VERIFY( std::is_lt(e2 <=> e3) || std::is_gt(e2 <=> e3) );\n+  VERIFY( (e2 <=> e3) == (e2.category() <=> e3.category()) );\n+\n+  VERIFY( !(e2 == e3) );\n+\n+  VERIFY( !(e3 < e3) );\n+  VERIFY( (e2 < e3) == (e2.category() < e3.category()) );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "2c97fe201b59ec103f8be5f02e7af31d504aab00", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_condition/operators/equal.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be779f59b04947324889b7e1488fb9a68c81d53/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be779f59b04947324889b7e1488fb9a68c81d53/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fequal.cc?ref=4be779f59b04947324889b7e1488fb9a68c81d53", "patch": "@@ -21,7 +21,6 @@\n #include <system_error>\n #include <testsuite_error.h>\n \n-// unspecified bool operator positive tests\n void test01()\n {\n   std::error_condition e1;"}, {"sha": "20b328665654a4060850f983c952e7430b197f61", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_condition/operators/less.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be779f59b04947324889b7e1488fb9a68c81d53/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fless.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be779f59b04947324889b7e1488fb9a68c81d53/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fless.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fless.cc?ref=4be779f59b04947324889b7e1488fb9a68c81d53", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do run { target c++11 } }\n+// { dg-additional-options \"-static-libstdc++\" { target *-*-mingw* } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <system_error>\n+#include <testsuite_error.h>\n+\n+int main()\n+{\n+  std::error_condition e1;\n+  std::error_condition e2(std::errc::operation_not_supported);\n+\n+  VERIFY( !(e1 < e1) );\n+  VERIFY( !(e2 < e2) );\n+\n+  VERIFY( (e1 < e2) == (e1.value() < e2.value()) );\n+\n+  const __gnu_test::test_category cat;\n+  std::error_condition e3(e2.value(), cat);\n+  VERIFY( !(e3 < e3) );\n+  VERIFY( (e2 < e3) == (e2.category() < e3.category()) );\n+}"}, {"sha": "238fabbcc2076627950661c36b7eae3498363b2e", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_condition/operators/not_equal.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be779f59b04947324889b7e1488fb9a68c81d53/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fnot_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be779f59b04947324889b7e1488fb9a68c81d53/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fnot_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fnot_equal.cc?ref=4be779f59b04947324889b7e1488fb9a68c81d53", "patch": "@@ -21,7 +21,6 @@\n #include <system_error>\n #include <testsuite_error.h>\n \n-// unspecified bool operator positive tests\n void test01()\n {\n   std::error_condition e1;"}, {"sha": "48c1671bdba1abcf28349ec9461960c3f7209b92", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_condition/operators/three_way.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be779f59b04947324889b7e1488fb9a68c81d53/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fthree_way.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be779f59b04947324889b7e1488fb9a68c81d53/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fthree_way.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Foperators%2Fthree_way.cc?ref=4be779f59b04947324889b7e1488fb9a68c81d53", "patch": "@@ -0,0 +1,60 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <system_error>\n+#include <testsuite_error.h>\n+\n+void\n+test01()\n+{\n+  std::error_condition e1;\n+  std::error_condition e2(std::errc::operation_not_supported);\n+\n+  VERIFY( std::is_eq(e1 <=> e1) );\n+  VERIFY( std::is_lteq(e1 <=> e1) );\n+  VERIFY( std::is_gteq(e1 <=> e1) );\n+\n+  VERIFY( std::is_neq(e1 <=> e2) );\n+  VERIFY( std::is_lt(e1 <=> e2) || std::is_gt(e1 <=> e2) );\n+  VERIFY( (e1 <=> e2) == (e1.value() <=> e2.value()) );\n+\n+  VERIFY( e1 == e1 );\n+  VERIFY( !(e1 == e2) );\n+\n+  VERIFY( !(e1 < e1) );\n+  VERIFY( !(e2 < e2) );\n+\n+  const __gnu_test::test_category cat;\n+  std::error_condition e3(e2.value(), cat);\n+\n+  VERIFY( std::is_neq(e2 <=> e3) );\n+  VERIFY( std::is_lt(e2 <=> e3) || std::is_gt(e2 <=> e3) );\n+  VERIFY( (e2 <=> e3) == (e2.category() <=> e3.category()) );\n+\n+  VERIFY( !(e2 == e3) );\n+\n+  VERIFY( !(e3 < e3) );\n+  VERIFY( (e2 < e3) == (e2.category() < e3.category()) );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}]}