{"sha": "bb1835d25cc7e4d019b8f9c254148c31ef31bbd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmIxODM1ZDI1Y2M3ZTRkMDE5YjhmOWMyNTQxNDhjMzFlZjMxYmJkMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-03-30T11:20:09Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-03-30T11:20:09Z"}, "message": "Extensive modifications to use ELF format as default.\n\n(LIB_SPEC): Don't use libc_p.a for -p. don't use libg.a unless for -ggdb.\n(LINUX_DEFAULT_ELF): Defined.\n\nFrom-SVN: r9256", "tree": {"sha": "5616a337e80aa3d4da87b33cf04eddfb41625902", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5616a337e80aa3d4da87b33cf04eddfb41625902"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb1835d25cc7e4d019b8f9c254148c31ef31bbd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb1835d25cc7e4d019b8f9c254148c31ef31bbd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb1835d25cc7e4d019b8f9c254148c31ef31bbd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb1835d25cc7e4d019b8f9c254148c31ef31bbd3/comments", "author": null, "committer": null, "parents": [{"sha": "9e2fc7c03ea74dcf03d46aabf8bd08417b35bbda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e2fc7c03ea74dcf03d46aabf8bd08417b35bbda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e2fc7c03ea74dcf03d46aabf8bd08417b35bbda"}], "stats": {"total": 250, "additions": 174, "deletions": 76}, "files": [{"sha": "3238d442a4b94dd4cf7bff6f4a4bc8674433d340", "filename": "gcc/config/i386/linux.h", "status": "modified", "additions": 174, "deletions": 76, "changes": 250, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb1835d25cc7e4d019b8f9c254148c31ef31bbd3/gcc%2Fconfig%2Fi386%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb1835d25cc7e4d019b8f9c254148c31ef31bbd3/gcc%2Fconfig%2Fi386%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux.h?ref=bb1835d25cc7e4d019b8f9c254148c31ef31bbd3", "patch": "@@ -1,6 +1,7 @@\n-/* Definitions for Intel 386 running Linux\n-   Copyright (C) 1992, 1994 Free Software Foundation, Inc.\n-   Contributed by H.J. Lu (hjl@nynexst.com)\n+/* Definitions for Intel 386 running Linux with ELF format\n+   Copyright (C) 1994, 1995 Free Software Foundation, Inc.\n+   Contributed by Eric Youngdale.\n+   Modified for stabs-in-ELF by H.J. Lu.\n \n This file is part of GNU CC.\n \n@@ -18,95 +19,192 @@ You should have received a copy of the GNU General Public License\n along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n-#if 0\t/* The FSF has fixed the known bugs. But ....... */\n-\n-/* Linux has a hacked gas 1.38.1, which can handle repz, repnz\n- and fildll.  */\n-\n-#define GOOD_GAS\n-#endif\n-\n-/* Don't assume anything about the header files. */\n-#define NO_IMPLICIT_EXTERN_C\n-\n-/* This is tested by i386/gas.h.  */\n-#define YES_UNDERSCORES\n-\n-#ifndef LINUX_ELF\n-#include \"i386/gstabs.h\"\n-#endif\n-\n-/* Specify predefined symbols in preprocessor.  */\n-\n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-Dunix -Di386 -Dlinux -Asystem(unix) -Asystem(posix) -Acpu(i386) -Amachine(i386)\"\n-\n-#undef CPP_SPEC\n-#if TARGET_CPU_DEFAULT == 2\n-#define CPP_SPEC \"%{!m386:-D__i486__} %{posix:-D_POSIX_SOURCE}\"\n-#else\n-#define CPP_SPEC \"%{m486:-D__i486__} %{posix:-D_POSIX_SOURCE}\"\n-#endif\n+#define LINUX_DEFAULT_ELF\n+\n+/* A lie, I guess, but the general idea behind linux/ELF is that we are\n+   supposed to be outputting something that will assemble under SVr4.\n+   This gets us pretty close.  */\n+#include \"i386/i386.h\"\t/* Base i386 target machine definitions */\n+#include \"i386/att.h\"\t/* Use the i386 AT&T assembler syntax */\n+#include \"linux.h\"\t/* some common stuff */\n+\n+#undef TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (i386 Linux/ELF)\");\n+\n+/* The svr4 ABI for the i386 says that records and unions are returned\n+   in memory.  */\n+#undef DEFAULT_PCC_STRUCT_RETURN\n+#define DEFAULT_PCC_STRUCT_RETURN 1\n+\n+/* This is how to output an element of a case-vector that is relative.\n+   This is only used for PIC code.  See comments by the `casesi' insn in\n+   i386.md for an explanation of the expression this outputs. */\n+#undef ASM_OUTPUT_ADDR_DIFF_ELT\n+#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, VALUE, REL) \\\n+  fprintf (FILE, \"\\t.long _GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\", LPREFIX, VALUE)\n+\n+/* Indicate that jump tables go in the text section.  This is\n+   necessary when compiling PIC code.  */\n+#define JUMP_TABLES_IN_TEXT_SECTION\n+\n+/* Copy this from the svr4 specifications... */\n+/* Define the register numbers to be used in Dwarf debugging information.\n+   The SVR4 reference port C compiler uses the following register numbers\n+   in its Dwarf output code:\n+\t0 for %eax (gnu regno = 0)\n+\t1 for %ecx (gnu regno = 2)\n+\t2 for %edx (gnu regno = 1)\n+\t3 for %ebx (gnu regno = 3)\n+\t4 for %esp (gnu regno = 7)\n+\t5 for %ebp (gnu regno = 6)\n+\t6 for %esi (gnu regno = 4)\n+\t7 for %edi (gnu regno = 5)\n+   The following three DWARF register numbers are never generated by\n+   the SVR4 C compiler or by the GNU compilers, but SDB on x86/svr4\n+   believes these numbers have these meanings.\n+\t8  for %eip    (no gnu equivalent)\n+\t9  for %eflags (no gnu equivalent)\n+\t10 for %trapno (no gnu equivalent)\n+   It is not at all clear how we should number the FP stack registers\n+   for the x86 architecture.  If the version of SDB on x86/svr4 were\n+   a bit less brain dead with respect to floating-point then we would\n+   have a precedent to follow with respect to DWARF register numbers\n+   for x86 FP registers, but the SDB on x86/svr4 is so completely\n+   broken with respect to FP registers that it is hardly worth thinking\n+   of it as something to strive for compatibility with.\n+   The verison of x86/svr4 SDB I have at the moment does (partially)\n+   seem to believe that DWARF register number 11 is associated with\n+   the x86 register %st(0), but that's about all.  Higher DWARF\n+   register numbers don't seem to be associated with anything in\n+   particular, and even for DWARF regno 11, SDB only seems to under-\n+   stand that it should say that a variable lives in %st(0) (when\n+   asked via an `=' command) if we said it was in DWARF regno 11,\n+   but SDB still prints garbage when asked for the value of the\n+   variable in question (via a `/' command).\n+   (Also note that the labels SDB prints for various FP stack regs\n+   when doing an `x' command are all wrong.)\n+   Note that these problems generally don't affect the native SVR4\n+   C compiler because it doesn't allow the use of -O with -g and\n+   because when it is *not* optimizing, it allocates a memory\n+   location for each floating-point variable, and the memory\n+   location is what gets described in the DWARF AT_location\n+   attribute for the variable in question.\n+   Regardless of the severe mental illness of the x86/svr4 SDB, we\n+   do something sensible here and we use the following DWARF\n+   register numbers.  Note that these are all stack-top-relative\n+   numbers.\n+\t11 for %st(0) (gnu regno = 8)\n+\t12 for %st(1) (gnu regno = 9)\n+\t13 for %st(2) (gnu regno = 10)\n+\t14 for %st(3) (gnu regno = 11)\n+\t15 for %st(4) (gnu regno = 12)\n+\t16 for %st(5) (gnu regno = 13)\n+\t17 for %st(6) (gnu regno = 14)\n+\t18 for %st(7) (gnu regno = 15)\n+*/\n+#undef DBX_REGISTER_NUMBER\n+#define DBX_REGISTER_NUMBER(n) \\\n+((n) == 0 ? 0 \\\n+ : (n) == 1 ? 2 \\\n+ : (n) == 2 ? 1 \\\n+ : (n) == 3 ? 3 \\\n+ : (n) == 4 ? 6 \\\n+ : (n) == 5 ? 7 \\\n+ : (n) == 6 ? 5 \\\n+ : (n) == 7 ? 4 \\\n+ : ((n) >= FIRST_STACK_REG && (n) <= LAST_STACK_REG) ? (n)+3 \\\n+ : (-1))\n+\n+/* Output assembler code to FILE to increment profiler label # LABELNO\n+   for profiling a function entry.  */\n+\n+#undef FUNCTION_PROFILER\n+#define FUNCTION_PROFILER(FILE, LABELNO)  \\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (flag_pic)\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\tleal %sP%d@GOTOFF(%%ebx),%%edx\\n\",\t\t\\\n+\t       LPREFIX, (LABELNO));\t\t\t\t\t\\\n+      fprintf (FILE, \"\\tcall *mcount@GOT(%%ebx)\\n\");\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\tmovl $%sP%d,%%edx\\n\", LPREFIX, (LABELNO));\t\\\n+      fprintf (FILE, \"\\tcall mcount\\n\");\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n \n #undef SIZE_TYPE\n #define SIZE_TYPE \"unsigned int\"\n-\n+ \n #undef PTRDIFF_TYPE\n #define PTRDIFF_TYPE \"int\"\n-\n+  \n #undef WCHAR_TYPE\n #define WCHAR_TYPE \"long int\"\n-\n+   \n #undef WCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE BITS_PER_WORD\n+    \n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-D__ELF__ -Dunix -Di386 -Dlinux -Asystem(unix) -Asystem(posix) -Acpu(i386) -Amachine(i386)\"\n \n-#undef HAVE_ATEXIT\n-#define HAVE_ATEXIT\n-\n-/* Linux uses ctype from glibc.a. I am not sure how complete it is.\n-   For now, we play safe. It may change later. */\n-\n-#if 0\n-#undef MULTIBYTE_CHARS\n-#define MULTIBYTE_CHARS\t1\n+#undef CPP_SPEC\n+#if TARGET_CPU_DEFAULT == 2\n+#define CPP_SPEC \"%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{!m386:-D__i486__} %{posix:-D_POSIX_SOURCE}\"\n+#else\n+#define CPP_SPEC \"%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{m486:-D__i486__} %{posix:-D_POSIX_SOURCE}\"\n #endif\n \n-#undef LIB_SPEC\n+#undef\tLIB_SPEC\n+#if 1\n+/* We no longer link with libc_p.a or libg.a by default. If you\n+ * want to profile or debug the Linux C library, please add\n+ * -lc_p or -ggdb to LDFLAGS at the link time, respectively.\n+ */\n+#define LIB_SPEC \\\n+  \"%{!shared: %{mieee-fp:-lieee} %{p:-lgmon} %{pg:-lgmon} \\\n+     %{!ggdb:-lc} %{ggdb:-lg}}\"\n+#else\n #define LIB_SPEC \\\n-\"%{mieee-fp:-lieee} %{p*:-lgmon} %{!static:-lc} \\\n- %{static:%{p*:-lc_p} %{!p:%{!pg:%{!g*:-lc} %{g*:-lg}}}}\"\n-\n-#undef STARTFILE_SPEC\n-#define STARTFILE_SPEC  \"%{pg:gcrt0.o%s} %{!pg:%{p:gcrt0.o%s} %{!p:crt0.o%s}} %{static:-static}\"\n-\n-\f\n-/* There are conflicting reports about whether this system uses\n-   a different assembler syntax.  wilson@cygnus.com says # is right.  */\n-#undef COMMENT_BEGIN\n-#define COMMENT_BEGIN \"#\"\n-\n-#undef ASM_APP_ON\n-#define ASM_APP_ON \"#APP\\n\"\n-\n-#undef ASM_APP_OFF\n-#define ASM_APP_OFF \"#NO_APP\\n\"\n-\f\n-/* Don't default to pcc-struct-return, because gcc is the only compiler, and\n-   we want to retain compatibility with older gcc versions.  */\n-#ifndef LINUX_ELF\n-#define DEFAULT_PCC_STRUCT_RETURN 0\n+  \"%{!shared: \\\n+     %{mieee-fp:-lieee} %{p:-lgmon -lc_p} %{pg:-lgmon -lc_p} \\\n+       %{!p:%{!pg:%{!g*:-lc} %{g*:-lg}}}}\"\n #endif\n \n-/* We need that too. */\n-#define HANDLE_SYSV_PRAGMA\n-\n-#undef LINK_SPEC\n-\n-/* We want to pass -v to linker */\n-#if TARGET_CPU_DEFAULT == 2\n-#define LINK_SPEC\t\"%{v:-dll-verbose} %{!m386:-m486}\"\n+/* Provide a LINK_SPEC appropriate for Linux.  Here we provide support\n+   for the special GCC options -static and -shared, which allow us to\n+   link things in one of these three modes by applying the appropriate\n+   combinations of options at link-time. We like to support here for\n+   as many of the other GNU linker options as possible. But I don't\n+   have the time to search for those flags. I am sure how to add\n+   support for -soname shared_object_name. H.J.\n+\n+   I took out %{v:%{!V:-V}}. It is too much :-(. They can use\n+   -Wl,-V.\n+\n+   When the -shared link option is used a final link is not being\n+   done.  */\n+\n+/* If ELF is the default format, we should not use /lib/elf. */\n+\n+#undef\tLINK_SPEC\n+#ifndef LINUX_DEFAULT_ELF\n+#define LINK_SPEC \"-m elf_i386 %{shared:-shared} \\\n+  %{!shared: \\\n+    %{!ibcs: \\\n+      %{!static: \\\n+\t%{rdynamic:-export-dynamic} \\\n+\t%{!dynamic-linker:-dynamic-linker /lib/elf/ld-linux.so.1} \\\n+\t%{!rpath:-rpath /lib/elf/}} %{static:-static}}}\"\n #else\n-#define LINK_SPEC\t\"%{v:-dll-verbose} %{m486:-m486}\"\n+#define LINK_SPEC \"-m elf_i386 %{shared:-shared} \\\n+  %{!shared: \\\n+    %{!ibcs: \\\n+      %{!static: \\\n+\t%{rdynamic:-export-dynamic} \\\n+\t%{!dynamic-linker:-dynamic-linker /lib/ld-linux.so.1}} \\\n+\t%{static:-static}}}\"\n #endif\n \n /* Get perform_* macros to build libgcc.a.  */"}]}