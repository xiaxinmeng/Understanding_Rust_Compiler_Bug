{"sha": "9f309ba3e7ae686cd3e193722eb43e28e9d83018", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYzMDliYTNlN2FlNjg2Y2QzZTE5MzcyMmViNDNlMjhlOWQ4MzAxOA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-10T22:59:33Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-10T22:59:33Z"}, "message": "pa.md (reload_insi, [...]): Use new \"Z\" constraint instead of \"z\" constraint.\n\n\t* pa.md (reload_insi, reload_outsi): Use new \"Z\" constraint instead\n\tof \"z\" constraint.\n\t(load HIGH patterns): Rewrite to not show DP relocation.\n\nFrom-SVN: r3185", "tree": {"sha": "ed5e6a00eb4f8ca0514ab0e6fa03dd096de16dc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed5e6a00eb4f8ca0514ab0e6fa03dd096de16dc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f309ba3e7ae686cd3e193722eb43e28e9d83018", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f309ba3e7ae686cd3e193722eb43e28e9d83018", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f309ba3e7ae686cd3e193722eb43e28e9d83018", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f309ba3e7ae686cd3e193722eb43e28e9d83018/comments", "author": null, "committer": null, "parents": [{"sha": "4e82968e329e453ca8df62c1cb1b913a5a43ef8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e82968e329e453ca8df62c1cb1b913a5a43ef8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e82968e329e453ca8df62c1cb1b913a5a43ef8a"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "fd37ec060d9ea596ca369bf2f17682b4b9242d06", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f309ba3e7ae686cd3e193722eb43e28e9d83018/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f309ba3e7ae686cd3e193722eb43e28e9d83018/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=9f309ba3e7ae686cd3e193722eb43e28e9d83018", "patch": "@@ -729,7 +729,7 @@\n ;; going in to or out of float point registers.\n \n (define_expand \"reload_insi\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=z\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=Z\")\n \t(match_operand:SI 1 \"general_operand\" \"\"))\n    (clobber (match_operand:SI 2 \"register_operand\" \"=&r\"))]\n   \"\"\n@@ -745,7 +745,7 @@\n \n (define_expand \"reload_outsi\"\n   [(set (match_operand:SI 0 \"general_operand\" \"\")\n-\t(match_operand:SI 1  \"register_operand\"\"z\"))\n+\t(match_operand:SI 1  \"register_operand\" \"Z\"))\n    (clobber (match_operand:SI 2 \"register_operand\" \"=&r\"))]\n   \"\"\n   \"\n@@ -895,37 +895,34 @@\n   [(set_attr \"type\" \"move\")\n    (set_attr \"length\" \"1\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=a,&?*r\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"r,r\")\n-\t\t (high:SI (match_operand 2 \"\" \"\"))))]\n-  \"!TARGET_KERNEL\"\n-  \"@\n-   addil L'%G2,%1\n-   ldil L'%G2,%0\\;add %0,%1,%0\"\n-  [(set_attr \"type\" \"binary,binary\")\n-   (set_attr \"length\" \"1,2\")])\n-\n+;; For kernel code always use addil; else we can lose due to a linker\n+;; bug involving absolute symbols and \"ldil;add\" style relocations\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t (high:SI (match_operand 2 \"\" \"\"))))]\n-  \"TARGET_KERNEL\"\n+\t(high:SI (match_operand 1 \"\" \"\")))]\n+  \"TARGET_KERNEL && symbolic_operand(operands[1], Pmode)\n+   && ! function_label_operand (operands[1])\n+   && ! read_only_operand (operands[1])\"\n   \"@\n-   addil L'%G2,%1\"\n+   addil L'%G1,%%r27\"\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"1\")])\n \n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t (high:SI (match_operand 2 \"\" \"\"))))\n-   (clobber (match_scratch:SI 3 \"\"))]\n-  \"reload_completed && REGNO (operands[0]) != 1\"\n-  [(set (match_dup 3) (high:SI (match_dup 2)))\n-   (set (match_dup 0) (plus:SI (match_dup 3) (match_dup 1)))]\n-  \"\")\n+;; For all symbolic operands *except* function addresses and read-only\n+;; operands (which live in TEXT space and do not require relocation).  \n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a,!*r\")\n+\t(high:SI (match_operand 1 \"\" \"\")))]\n+  \"! TARGET_KERNEL && symbolic_operand(operands[1], Pmode)\n+   && ! function_label_operand (operands[1])\n+   && ! read_only_operand (operands[1])\"\n+  \"@\n+   addil L'%G1,%%r27\n+   ldil L'%G1,%0\\;add %0,%%r27,%0\"\n+  [(set_attr \"type\" \"binary,binary\")\n+   (set_attr \"length\" \"1,2\")])\n \n+;; For function addresses when TARGET_SHARED_LIBS\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(high:SI (match_operand:SI 1 \"function_label_operand\" \"\")))]\n@@ -934,6 +931,8 @@\n   [(set_attr \"type\" \"move\")\n    (set_attr \"length\" \"1\")])\n \n+;; The following two patterns should be for using ldil to load constants\n+;; (which include addresses of read_only_operands)\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(high:SI (match_operand 1 \"\" \"\")))]\n@@ -950,6 +949,7 @@\n   [(set_attr \"type\" \"move\")\n    (set_attr \"length\" \"1\")])\n \n+;; lo_sum of a function address when TARGET_SHARED_LIBS\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(lo_sum:SI (match_operand:SI 1 \"register_operand\" \"r\")"}]}