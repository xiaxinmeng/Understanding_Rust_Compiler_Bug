{"sha": "7123347c8b44571811c4b58506b06fb09969bccb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEyMzM0N2M4YjQ0NTcxODExYzRiNTg1MDZiMDZmYjA5OTY5YmNjYg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-04-16T17:21:02Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-04-16T17:21:02Z"}, "message": "ipa: Make call redirection detect already adjusted calls (PR 93621)\n\nPR 93621 testcase makes redirect_call_stmt_to_callee wrongly assume\nthat a call statement needs redirecting but then rightly fails an\nassert ensuring the call statement parameters have not already been\nadjusted because they were already created adjusted as part of thunk\nexpansion.\n\nThe test fails because the decl in the call call statement is\ndifferent than the decl of the callee, because the latter was created\nin save_inline_function_body.  This patch adds a way to link these two\nand detect the situation in redirect_call_stmt_to_callee.\n\n2020-04-16  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/93621\n\t* ipa-inline.h (ipa_saved_clone_sources): Declare.\n\t* ipa-inline-transform.c (ipa_saved_clone_sources): New variable.\n\t(save_inline_function_body): Link the new body holder with the\n\tprevious one.\n\t* cgraph.c: Include ipa-inline.h.\n\t(cgraph_edge::redirect_call_stmt_to_callee): Try to find the decl from\n\tthe statement in ipa_saved_clone_sources.\n\t* cgraphunit.c: Include ipa-inline.h.\n\t(expand_all_functions): Free ipa_saved_clone_sources.\n\n\ttestsuite/\n\t* g++.dg/ipa/pr93621.C: New test.", "tree": {"sha": "ddf5d23a57ce231aef99ac668163fa8a8baddcde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddf5d23a57ce231aef99ac668163fa8a8baddcde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7123347c8b44571811c4b58506b06fb09969bccb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7123347c8b44571811c4b58506b06fb09969bccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7123347c8b44571811c4b58506b06fb09969bccb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7123347c8b44571811c4b58506b06fb09969bccb/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26bebf576ddcdcfb596f07e8c2896f17c48516e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26bebf576ddcdcfb596f07e8c2896f17c48516e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26bebf576ddcdcfb596f07e8c2896f17c48516e7"}], "stats": {"total": 82, "additions": 81, "deletions": 1}, "files": [{"sha": "5fd869a92393ed6ba6328fb3ff71eb1350025691", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7123347c8b44571811c4b58506b06fb09969bccb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7123347c8b44571811c4b58506b06fb09969bccb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7123347c8b44571811c4b58506b06fb09969bccb", "patch": "@@ -1,3 +1,16 @@\n+2020-04-16  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/93621\n+\t* ipa-inline.h (ipa_saved_clone_sources): Declare.\n+\t* ipa-inline-transform.c (ipa_saved_clone_sources): New variable.\n+\t(save_inline_function_body): Link the new body holder with the\n+\tprevious one.\n+\t* cgraph.c: Include ipa-inline.h.\n+\t(cgraph_edge::redirect_call_stmt_to_callee): Try to find the decl from\n+\tthe statement in ipa_saved_clone_sources.\n+\t* cgraphunit.c: Include ipa-inline.h.\n+\t(expand_all_functions): Free ipa_saved_clone_sources.\n+\n 2020-04-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR target/94606"}, {"sha": "72d7cb54301981c3dd8f66921e7a5bee24cacd54", "filename": "gcc/cgraph.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7123347c8b44571811c4b58506b06fb09969bccb/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7123347c8b44571811c4b58506b06fb09969bccb/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=7123347c8b44571811c4b58506b06fb09969bccb", "patch": "@@ -63,6 +63,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"attribs.h\"\n #include \"selftest.h\"\n #include \"tree-into-ssa.h\"\n+#include \"ipa-inline.h\"\n \n /* FIXME: Only for PROP_loops, but cgraph shouldn't have to know about this.  */\n #include \"tree-pass.h\"\n@@ -1470,6 +1471,16 @@ cgraph_edge::redirect_call_stmt_to_callee (cgraph_edge *e)\n       || decl == e->callee->decl)\n     return e->call_stmt;\n \n+  if (decl && ipa_saved_clone_sources)\n+    {\n+      tree *p = ipa_saved_clone_sources->get (e->callee);\n+      if (p && decl == *p)\n+\t{\n+\t  gimple_call_set_fndecl (e->call_stmt, e->callee->decl);\n+\t  return e->call_stmt;\n+\t}\n+    }\n+\n   if (flag_checking && decl)\n     {\n       cgraph_node *node = cgraph_node::get (decl);"}, {"sha": "a1ace95879a34bbe4ad842746088dbb8e3caf0cd", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7123347c8b44571811c4b58506b06fb09969bccb/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7123347c8b44571811c4b58506b06fb09969bccb/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=7123347c8b44571811c4b58506b06fb09969bccb", "patch": "@@ -205,6 +205,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"lto-section-names.h\"\n #include \"stringpool.h\"\n #include \"attribs.h\"\n+#include \"ipa-inline.h\"\n \n /* Queue of cgraph nodes scheduled to be added into cgraph.  This is a\n    secondary queue used during optimization to accommodate passes that\n@@ -2481,7 +2482,8 @@ expand_all_functions (void)\n \n   symtab->process_new_functions ();\n   free_gimplify_stack ();\n-\n+  delete ipa_saved_clone_sources;\n+  ipa_saved_clone_sources = NULL;\n   free (order);\n }\n "}, {"sha": "be60bbccb5cca5e28cfee63961e87e9be832f04f", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7123347c8b44571811c4b58506b06fb09969bccb/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7123347c8b44571811c4b58506b06fb09969bccb/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=7123347c8b44571811c4b58506b06fb09969bccb", "patch": "@@ -531,6 +531,11 @@ inline_call (struct cgraph_edge *e, bool update_original,\n   return new_edges_found;\n }\n \n+/* For each node that was made the holder of function body by\n+   save_inline_function_body, this summary contains pointer to the previous\n+   holder of the body.  */\n+\n+function_summary <tree *> *ipa_saved_clone_sources;\n \n /* Copy function body of NODE and redirect all inline clones to it.\n    This is done before inline plan is applied to NODE when there are\n@@ -588,6 +593,20 @@ save_inline_function_body (struct cgraph_node *node)\n       first_clone->next_sibling_clone = NULL;\n       gcc_assert (!first_clone->prev_sibling_clone);\n     }\n+\n+  tree prev_body_holder = node->decl;\n+  if (!ipa_saved_clone_sources)\n+    ipa_saved_clone_sources = new function_summary <tree *> (symtab);\n+  else\n+    {\n+      tree *p = ipa_saved_clone_sources->get (node);\n+      if (p)\n+\t{\n+\t  prev_body_holder = *p;\n+\t  gcc_assert (prev_body_holder);\n+\t}\n+    }\n+  *ipa_saved_clone_sources->get_create (first_clone) = prev_body_holder;\n   first_clone->clone_of = NULL;\n \n   /* Now node in question has no clones.  */"}, {"sha": "74c08685e4984023e3ce9178d848f5edd4508936", "filename": "gcc/ipa-inline.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7123347c8b44571811c4b58506b06fb09969bccb/gcc%2Fipa-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7123347c8b44571811c4b58506b06fb09969bccb/gcc%2Fipa-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.h?ref=7123347c8b44571811c4b58506b06fb09969bccb", "patch": "@@ -65,6 +65,7 @@ void clone_inlined_nodes (struct cgraph_edge *e, bool, bool, int *);\n \n extern int ncalls_inlined;\n extern int nfunctions_inlined;\n+extern function_summary <tree *> *ipa_saved_clone_sources;\n \n /* Return estimated size of the inline sequence of EDGE.  */\n "}, {"sha": "ad4b7e29ec7a88dfc030138e494308306483d882", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7123347c8b44571811c4b58506b06fb09969bccb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7123347c8b44571811c4b58506b06fb09969bccb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7123347c8b44571811c4b58506b06fb09969bccb", "patch": "@@ -1,3 +1,8 @@\n+2020-04-16  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/93621\n+\t* g++.dg/ipa/pr93621.C: New test.\n+\n 2020-04-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR target/94606"}, {"sha": "ffe6bbdae2e308813e9ff0cc87c7f7431c785999", "filename": "gcc/testsuite/g++.dg/ipa/pr93621.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7123347c8b44571811c4b58506b06fb09969bccb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr93621.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7123347c8b44571811c4b58506b06fb09969bccb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr93621.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr93621.C?ref=7123347c8b44571811c4b58506b06fb09969bccb", "patch": "@@ -0,0 +1,29 @@\n+// PR ipa/93621\n+// { dg-do compile }\n+// { dg-options \"-O3 --param ipa-cp-eval-threshold=100 --param large-function-growth=60 --param large-function-insns=10 --param uninlined-thunk-insns=1000\" }\n+\n+typedef enum { X } E;\n+struct A {\n+  virtual void bar ();\n+};\n+struct B {\n+  virtual E fn (const char *, int, int *) = 0;\n+};\n+struct C : A, B {\n+  E fn (const char *, int, int *);\n+  void fn2 ();\n+  B *foo;\n+};\n+void C::fn2 () {\n+  if (!foo)\n+    return;\n+  foo->fn (0, 0, 0);\n+}\n+E\n+C::fn (const char *, int, int *)\n+{\n+  fn2 ();\n+  foo = 0;\n+  fn (0, 0, 0);\n+  return X;\n+}"}]}