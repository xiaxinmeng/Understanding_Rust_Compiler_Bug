{"sha": "93070671eae44f24ba822383e17571a39257c637", "node_id": "C_kwDOANBUbNoAKDkzMDcwNjcxZWFlNDRmMjRiYTgyMjM4M2UxNzU3MWEzOTI1N2M2Mzc", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-06-24T02:20:53Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2022-06-24T02:28:14Z"}, "message": "libstdc++: check for openat\n\nrtems6.0 has fdopendir, and fcntl.h defines AT_FDCWD and declares\nopenat, but there's no openat in libc.  Adjust dir-common.h to not\nassume ::openat just because of AT_FDCWD.\n\n\nfor  libstdc++-v3/ChangeLog\n\n\t* acinclude.m4 (GLIBCXX_CHECK_FILESYSTEM_DEPS): Check for\n\topenat.\n\t* configure, config.h.in: Rebuilt.\n\t* src/filesystem/dir-common.h (openat): Use ::openat if\n\t_GLIBCXX_HAVE_OPENAT.\n\t* src/filesystem/dir.cc (dir_and_pathname): Use dirfd if\n\t_GLIBCXX_HAVE_OPENAT.", "tree": {"sha": "ec63cf8c4576857b089c6322d5e4a65c4d75d427", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec63cf8c4576857b089c6322d5e4a65c4d75d427"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93070671eae44f24ba822383e17571a39257c637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93070671eae44f24ba822383e17571a39257c637", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93070671eae44f24ba822383e17571a39257c637", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93070671eae44f24ba822383e17571a39257c637/comments", "author": null, "committer": null, "parents": [{"sha": "5d8a5f04acec697c893e1c2263032bc01e2c2f2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d8a5f04acec697c893e1c2263032bc01e2c2f2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d8a5f04acec697c893e1c2263032bc01e2c2f2b"}], "stats": {"total": 74, "additions": 72, "deletions": 2}, "files": [{"sha": "e3cc3a8e867d3428d34f2b4db9c47104a0385450", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93070671eae44f24ba822383e17571a39257c637/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93070671eae44f24ba822383e17571a39257c637/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=93070671eae44f24ba822383e17571a39257c637", "patch": "@@ -4772,6 +4772,18 @@ dnl\n   if test $glibcxx_cv_dirfd = yes; then\n     AC_DEFINE(HAVE_DIRFD, 1, [Define if dirfd is available in <dirent.h>.])\n   fi\n+dnl\n+  AC_CACHE_CHECK([for openat],\n+    glibcxx_cv_openat, [dnl\n+    GCC_TRY_COMPILE_OR_LINK(\n+      [#include <fcntl.h>],\n+      [int fd = ::openat(AT_FDCWD, \"\", 0);],\n+      [glibcxx_cv_openat=yes],\n+      [glibcxx_cv_openat=no])\n+  ])\n+  if test $glibcxx_cv_openat = yes; then\n+    AC_DEFINE(HAVE_OPENAT, 1, [Define if openat is available in <fcntl.h>.])\n+  fi\n dnl\n   AC_CACHE_CHECK([for unlinkat],\n     glibcxx_cv_unlinkat, [dnl"}, {"sha": "2a3972eef5412171df1340e0d7e95d65fff82f24", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93070671eae44f24ba822383e17571a39257c637/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93070671eae44f24ba822383e17571a39257c637/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=93070671eae44f24ba822383e17571a39257c637", "patch": "@@ -292,6 +292,9 @@\n /* Define if <math.h> defines obsolete isnan function. */\n #undef HAVE_OBSOLETE_ISNAN\n \n+/* Define if openat is available in <fcntl.h>. */\n+#undef HAVE_OPENAT\n+\n /* Define if poll is available in <poll.h>. */\n #undef HAVE_POLL\n "}, {"sha": "eac6039212168e1cd33e1b6c2b938324fd403f12", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93070671eae44f24ba822383e17571a39257c637/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93070671eae44f24ba822383e17571a39257c637/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=93070671eae44f24ba822383e17571a39257c637", "patch": "@@ -77177,6 +77177,61 @@ $as_echo \"$glibcxx_cv_dirfd\" >&6; }\n \n $as_echo \"#define HAVE_DIRFD 1\" >>confdefs.h\n \n+  fi\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for openat\" >&5\n+$as_echo_n \"checking for openat... \" >&6; }\n+if ${glibcxx_cv_openat+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+      if test x$gcc_no_link = xyes; then\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <fcntl.h>\n+int\n+main ()\n+{\n+int fd = ::openat(AT_FDCWD, \"\", 0);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_openat=yes\n+else\n+  glibcxx_cv_openat=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+else\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <fcntl.h>\n+int\n+main ()\n+{\n+int fd = ::openat(AT_FDCWD, \"\", 0);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  glibcxx_cv_openat=yes\n+else\n+  glibcxx_cv_openat=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_openat\" >&5\n+$as_echo \"$glibcxx_cv_openat\" >&6; }\n+  if test $glibcxx_cv_openat = yes; then\n+\n+$as_echo \"#define HAVE_OPENAT 1\" >>confdefs.h\n+\n   fi\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for unlinkat\" >&5\n $as_echo_n \"checking for unlinkat... \" >&6; }"}, {"sha": "669780ea23fe5cd01b3ba0f8f03e6beeab716055", "filename": "libstdc++-v3/src/filesystem/dir-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93070671eae44f24ba822383e17571a39257c637/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93070671eae44f24ba822383e17571a39257c637/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir-common.h?ref=93070671eae44f24ba822383e17571a39257c637", "patch": "@@ -199,7 +199,7 @@ struct _Dir_base\n #endif\n \n \n-#ifdef AT_FDCWD\n+#if _GLIBCXX_HAVE_OPENAT && defined AT_FDCWD\n     fd = ::openat(fd, pathname, flags);\n #else\n     // If we cannot use openat, there's no benefit to using posix::open unless"}, {"sha": "e64489162e5ffff7a079530d098455852bb672a5", "filename": "libstdc++-v3/src/filesystem/dir.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93070671eae44f24ba822383e17571a39257c637/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93070671eae44f24ba822383e17571a39257c637/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc?ref=93070671eae44f24ba822383e17571a39257c637", "patch": "@@ -120,7 +120,7 @@ struct fs::_Dir : std::filesystem::_Dir_base\n   dir_and_pathname() const noexcept\n   {\n     const fs::path& p = entry.path();\n-#if _GLIBCXX_HAVE_DIRFD\n+#if _GLIBCXX_HAVE_DIRFD && _GLIBCXX_HAVE_OPENAT\n     return {::dirfd(this->dirp), std::prev(p.end())->c_str()};\n #endif\n     return {this->fdcwd(), p.c_str()};"}]}