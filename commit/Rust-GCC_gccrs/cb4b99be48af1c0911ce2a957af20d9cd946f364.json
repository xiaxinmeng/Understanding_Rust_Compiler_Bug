{"sha": "cb4b99be48af1c0911ce2a957af20d9cd946f364", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I0Yjk5YmU0OGFmMWMwOTExY2UyYTk1N2FmMjBkOWNkOTQ2ZjM2NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-06T17:38:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-06T17:39:50Z"}, "message": "openmp: Add testcase for scan directive with nested functions\n\n> In convert_nonlocal_omp_clauses, the following clauses are\n> missing: OMP_CLAUSE_AFFINITY, OMP_CLAUSE_DEVICE_TYPE,\n> OMP_CLAUSE_EXCLUSIVE, OMP_CLAUSE_INCLUSIVE.\n\nOMP_CLAUSE_{EXCLUSIVE,INCLUSIVE} isn't needed, because we don't\nwalk the clauses at all for GIMPLE_OMP_SCAN.  It would be a bug\nif we used the exclusive/inclusive operands after gimplification,\nbut we apparently don't do that, all we check is whether the\nOMP_CLAUSE_KIND of the first clause (all should be the same) is\nOMP_CLAUSE_EXCLUSIVE or OMP_CLAUSE_INCLUSIVE, nothing else.\n\nThat said, I think we should have a testcase.\n\n2021-06-06  Jakub Jelinek  <jakub@redhat.com>\n\n\t* gcc.dg/gomp/scan-1.c: New test.", "tree": {"sha": "f143c41e39b2ec0a74515f20b00e2d33b666ba23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f143c41e39b2ec0a74515f20b00e2d33b666ba23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb4b99be48af1c0911ce2a957af20d9cd946f364", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb4b99be48af1c0911ce2a957af20d9cd946f364", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb4b99be48af1c0911ce2a957af20d9cd946f364", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb4b99be48af1c0911ce2a957af20d9cd946f364/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fa4db39b6bcd207bd2bffff52023ff6b155bd15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fa4db39b6bcd207bd2bffff52023ff6b155bd15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fa4db39b6bcd207bd2bffff52023ff6b155bd15"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "807071d9156ceedeaf3bb93f747b58076c69365b", "filename": "gcc/testsuite/gcc.dg/gomp/scan-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4b99be48af1c0911ce2a957af20d9cd946f364/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fscan-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4b99be48af1c0911ce2a957af20d9cd946f364/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fscan-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fscan-1.c?ref=cb4b99be48af1c0911ce2a957af20d9cd946f364", "patch": "@@ -0,0 +1,51 @@\n+int baz (void);\n+void qux (int);\n+int r;\n+\n+int\n+foo (void)\n+{\n+  int r = 0, i;\n+  void bar (void) { r++; }\n+  #pragma omp parallel for reduction(inscan, +:r)\n+  for (i = 0; i < 64; i++)\n+    {\n+      r += baz ();\n+      #pragma omp scan inclusive(r)\n+      qux (r);\n+    }\n+  #pragma omp parallel for reduction(inscan, +:r)\n+  for (i = 0; i < 64; i++)\n+    {\n+      qux (r);\n+      #pragma omp scan exclusive(r)\n+      r += baz ();\n+    }\n+  bar ();\n+  return r;\n+}\n+\n+int\n+corge (void)\n+{\n+  int r = 0, i;\n+  void bar (void)\n+  {\n+    #pragma omp parallel for reduction(inscan, +:r)\n+    for (i = 0; i < 64; i++)\n+      {\n+\tr += baz ();\n+\t#pragma omp scan inclusive(r)\n+\tqux (r);\n+      }\n+    #pragma omp parallel for reduction(inscan, +:r)\n+    for (i = 0; i < 64; i++)\n+      {\n+\tqux (r);\n+\t#pragma omp scan exclusive(r)\n+\tr += baz ();\n+      }\n+  }\n+  bar ();\n+  return r;\n+}"}]}