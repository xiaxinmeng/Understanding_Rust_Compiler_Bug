{"sha": "88fe15a1861bd630c70d7a7027d7b3523194d08a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhmZTE1YTE4NjFiZDYzMGM3MGQ3YTcwMjdkN2IzNTIzMTk0ZDA4YQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-03-28T12:53:14Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-03-28T12:53:14Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r612", "tree": {"sha": "778c2187866ea88aa3148049b93db815c7dba5e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/778c2187866ea88aa3148049b93db815c7dba5e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88fe15a1861bd630c70d7a7027d7b3523194d08a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88fe15a1861bd630c70d7a7027d7b3523194d08a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88fe15a1861bd630c70d7a7027d7b3523194d08a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88fe15a1861bd630c70d7a7027d7b3523194d08a/comments", "author": null, "committer": null, "parents": [{"sha": "7dcd3836a31b1642a57122f63c0828b06a190f5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dcd3836a31b1642a57122f63c0828b06a190f5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dcd3836a31b1642a57122f63c0828b06a190f5f"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "5a74a73d0e91db84fb48de6f2d7dc89ea0066607", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88fe15a1861bd630c70d7a7027d7b3523194d08a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88fe15a1861bd630c70d7a7027d7b3523194d08a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=88fe15a1861bd630c70d7a7027d7b3523194d08a", "patch": "@@ -349,16 +349,17 @@ input_operand (op, mode)\n       || GET_MODE_SIZE (mode) > UNITS_PER_WORD)\n     return gen_reg_operand (op, mode);\n \n-  /* For SImode, we can also load from a special register, so any register\n-     is valid.  */\n-  if (mode == SImode && register_operand (op, mode))\n+  /* The only cases left are integral modes one word or smaller (we\n+     do not get called for MODE_CC values).  These can be in any\n+     register.  */\n+  if (register_operand (op, mode))\n+    return;\n+\n+  /* For HImode and QImode, any constant is valid. */\n+  if ((mode == HImode || mode == QImode)\n+      && GET_CODE (op) == CONST_INT)\n     return 1;\n \n-  /* For HImode and QImode, any constant is valid along with any\n-     non-special register.  */\n-  if (mode == HImode || mode == QImode)\n-    return register_operand (op, mode) || GET_CODE (op) == CONST_INT;\n-\n   /* Otherwise, we will be doing this SET with an add, so anything valid\n      for an add will be valid.  */\n   return add_operand (op, mode);"}]}