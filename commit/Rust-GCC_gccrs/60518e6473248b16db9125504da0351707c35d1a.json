{"sha": "60518e6473248b16db9125504da0351707c35d1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA1MThlNjQ3MzI0OGIxNmRiOTEyNTUwNGRhMDM1MTcwN2MzNWQxYQ==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-01-18T12:42:52Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-04-30T17:40:37Z"}, "message": "aarch64: Use RTL builtins for FP ml[as]_n intrinsics\n\nRewrite floating-point vml[as][q]_n Neon intrinsics to use RTL\nbuiltins rather than inline assembly code, allowing for better\nscheduling and optimization.\n\ngcc/ChangeLog:\n\n2021-01-18  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Add\n\tfloat_ml[as]_n_builtin generator macros.\n\t* config/aarch64/aarch64-simd.md (*aarch64_mul3_elt_from_dup<mode>):\n\tRename to...\n\t(mul_n<mode>3): This, and re-order arguments.\n\t(aarch64_float_mla_n<mode>): Define.\n\t(aarch64_float_mls_n<mode>): Define.\n\t* config/aarch64/arm_neon.h (vmla_n_f32): Use RTL builtin\n\tinstead of inline asm.\n\t(vmlaq_n_f32): Likewise.\n\t(vmls_n_f32): Likewise.\n\t(vmlsq_n_f32): Likewise.", "tree": {"sha": "35242796fa056caf35a8e1ab3fc40c3caa968a6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35242796fa056caf35a8e1ab3fc40c3caa968a6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60518e6473248b16db9125504da0351707c35d1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60518e6473248b16db9125504da0351707c35d1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60518e6473248b16db9125504da0351707c35d1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60518e6473248b16db9125504da0351707c35d1a/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f546e0d3d0316aa76a45de1f548591bde7308c41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f546e0d3d0316aa76a45de1f548591bde7308c41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f546e0d3d0316aa76a45de1f548591bde7308c41"}], "stats": {"total": 81, "additions": 47, "deletions": 34}, "files": [{"sha": "3b5e88443a8fbb0705956de55fab866534232f0c", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60518e6473248b16db9125504da0351707c35d1a/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60518e6473248b16db9125504da0351707c35d1a/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=60518e6473248b16db9125504da0351707c35d1a", "patch": "@@ -668,6 +668,9 @@\n   BUILTIN_VHSDF (TERNOP, fnma, 4, FP)\n   VAR1 (TERNOP, fnma, 4, FP, hf)\n \n+  BUILTIN_VDQSF (TERNOP, float_mla_n, 0, FP)\n+  BUILTIN_VDQSF (TERNOP, float_mls_n, 0, FP)\n+\n   /* Implemented by aarch64_simd_bsl<mode>.  */\n   BUILTIN_VDQQH (BSL_P, simd_bsl, 0, NONE)\n   VAR2 (BSL_P, simd_bsl,0, NONE, di, v2di)"}, {"sha": "6edfd2d637ef5a76d027e90053359e6da607ab84", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60518e6473248b16db9125504da0351707c35d1a/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60518e6473248b16db9125504da0351707c35d1a/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=60518e6473248b16db9125504da0351707c35d1a", "patch": "@@ -750,14 +750,14 @@\n   [(set_attr \"type\" \"neon<fp>_mul_<Vetype>_scalar<q>\")]\n )\n \n-(define_insn \"*aarch64_mul3_elt_from_dup<mode>\"\n+(define_insn \"mul_n<mode>3\"\n  [(set (match_operand:VMUL 0 \"register_operand\" \"=w\")\n-    (mult:VMUL\n-      (vec_duplicate:VMUL\n-\t    (match_operand:<VEL> 1 \"register_operand\" \"<h_con>\"))\n-      (match_operand:VMUL 2 \"register_operand\" \"w\")))]\n+       (mult:VMUL\n+\t (vec_duplicate:VMUL\n+\t   (match_operand:<VEL> 2 \"register_operand\" \"<h_con>\"))\n+\t (match_operand:VMUL 1 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD\"\n-  \"<f>mul\\t%0.<Vtype>, %2.<Vtype>, %1.<Vetype>[0]\";\n+  \"<f>mul\\t%0.<Vtype>, %1.<Vtype>, %2.<Vetype>[0]\";\n   [(set_attr \"type\" \"neon<fp>_mul_<stype>_scalar<q>\")]\n )\n \n@@ -2636,6 +2636,40 @@\n   [(set_attr \"type\" \"neon_fp_abs_<stype><q>\")]\n )\n \n+(define_expand \"aarch64_float_mla_n<mode>\"\n+  [(set (match_operand:VDQSF 0 \"register_operand\")\n+\t(plus:VDQSF\n+\t  (mult:VDQSF\n+\t    (vec_duplicate:VDQSF\n+\t      (match_operand:<VEL> 3 \"register_operand\"))\n+\t    (match_operand:VDQSF 2 \"register_operand\"))\n+\t  (match_operand:VDQSF 1 \"register_operand\")))]\n+  \"TARGET_SIMD\"\n+  {\n+    rtx scratch = gen_reg_rtx (<MODE>mode);\n+    emit_insn (gen_mul_n<mode>3 (scratch, operands[2], operands[3]));\n+    emit_insn (gen_add<mode>3 (operands[0], operands[1], scratch));\n+    DONE;\n+  }\n+)\n+\n+(define_expand \"aarch64_float_mls_n<mode>\"\n+  [(set (match_operand:VDQSF 0 \"register_operand\")\n+\t(minus:VDQSF\n+\t  (match_operand:VDQSF 1 \"register_operand\")\n+\t  (mult:VDQSF\n+\t    (vec_duplicate:VDQSF\n+\t      (match_operand:<VEL> 3 \"register_operand\"))\n+\t    (match_operand:VDQSF 2 \"register_operand\"))))]\n+  \"TARGET_SIMD\"\n+  {\n+    rtx scratch = gen_reg_rtx (<MODE>mode);\n+    emit_insn (gen_mul_n<mode>3 (scratch, operands[2], operands[3]));\n+    emit_insn (gen_sub<mode>3 (operands[0], operands[1], scratch));\n+    DONE;\n+  }\n+)\n+\n (define_insn \"fma<mode>4\"\n   [(set (match_operand:VHSDF 0 \"register_operand\" \"=w\")\n        (fma:VHSDF (match_operand:VHSDF 1 \"register_operand\" \"w\")"}, {"sha": "f1e1e0ee79144c553fe207a51ba211c6dfc522ac", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60518e6473248b16db9125504da0351707c35d1a/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60518e6473248b16db9125504da0351707c35d1a/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=60518e6473248b16db9125504da0351707c35d1a", "patch": "@@ -7035,13 +7035,7 @@ __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmla_n_f32 (float32x2_t __a, float32x2_t __b, float32_t __c)\n {\n-  float32x2_t __result;\n-  float32x2_t __t1;\n-  __asm__ (\"fmul %1.2s, %3.2s, %4.s[0]; fadd %0.2s, %0.2s, %1.2s\"\n-           : \"=w\"(__result), \"=w\"(__t1)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_float_mla_nv2sf (__a, __b, __c);\n }\n \n __extension__ extern __inline int16x4_t\n@@ -7388,13 +7382,7 @@ __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlaq_n_f32 (float32x4_t __a, float32x4_t __b, float32_t __c)\n {\n-  float32x4_t __result;\n-  float32x4_t __t1;\n-  __asm__ (\"fmul %1.4s, %3.4s, %4.s[0]; fadd %0.4s, %0.4s, %1.4s\"\n-           : \"=w\"(__result), \"=w\"(__t1)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_float_mla_nv4sf (__a, __b, __c);\n }\n \n __extension__ extern __inline int16x8_t\n@@ -7481,13 +7469,7 @@ __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmls_n_f32 (float32x2_t __a, float32x2_t __b, float32_t __c)\n {\n-  float32x2_t __result;\n-  float32x2_t __t1;\n-  __asm__ (\"fmul %1.2s, %3.2s, %4.s[0]; fsub %0.2s, %0.2s, %1.2s\"\n-           : \"=w\"(__result), \"=w\"(__t1)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_float_mls_nv2sf (__a, __b, __c);\n }\n \n __extension__ extern __inline int16x4_t\n@@ -7838,13 +7820,7 @@ __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsq_n_f32 (float32x4_t __a, float32x4_t __b, float32_t __c)\n {\n-  float32x4_t __result;\n-  float32x4_t __t1;\n-  __asm__ (\"fmul %1.4s, %3.4s, %4.s[0]; fsub %0.4s, %0.4s, %1.4s\"\n-           : \"=w\"(__result), \"=w\"(__t1)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_float_mls_nv4sf (__a, __b, __c);\n }\n \n __extension__ extern __inline int16x8_t"}]}