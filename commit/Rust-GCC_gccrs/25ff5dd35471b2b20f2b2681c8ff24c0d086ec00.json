{"sha": "25ff5dd35471b2b20f2b2681c8ff24c0d086ec00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVmZjVkZDM1NDcxYjJiMjBmMmIyNjgxYzhmZjI0YzBkMDg2ZWMwMA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-09-05T12:17:09Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-09-05T12:17:09Z"}, "message": "re PR c/77423 (-Wlogical-not-parentheses false positive for bitwise expression with _Bool operands)\n\n\tPR c/77423\n\t* doc/invoke.texi: Update -Wlogical-not-parentheses documentation.\n\n\t* c-common.c (bool_promoted_to_int_p): New function.\n\t(expr_has_boolean_operands_p): New function.\n\t(warn_logical_not_parentheses): Return if expr_has_boolean_operands_p.\n\t(maybe_warn_bool_compare): Use bool_promoted_to_int_p.\n\n\t* c-c++-common/Wlogical-not-parentheses-3.c: New test.\n\nFrom-SVN: r239988", "tree": {"sha": "cbe9638e9cb6159d1a15ccd556a01d2ef8a445c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbe9638e9cb6159d1a15ccd556a01d2ef8a445c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25ff5dd35471b2b20f2b2681c8ff24c0d086ec00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25ff5dd35471b2b20f2b2681c8ff24c0d086ec00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25ff5dd35471b2b20f2b2681c8ff24c0d086ec00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25ff5dd35471b2b20f2b2681c8ff24c0d086ec00/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c5cb79681df13acc02894b4df8314c797895e2bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5cb79681df13acc02894b4df8314c797895e2bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5cb79681df13acc02894b4df8314c797895e2bb"}], "stats": {"total": 91, "additions": 86, "deletions": 5}, "files": [{"sha": "00a552dcc95f876a69fb3f8d9efb52f27e084bb0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ff5dd35471b2b20f2b2681c8ff24c0d086ec00/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ff5dd35471b2b20f2b2681c8ff24c0d086ec00/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25ff5dd35471b2b20f2b2681c8ff24c0d086ec00", "patch": "@@ -1,3 +1,8 @@\n+2016-09-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/77423\n+\t* doc/invoke.texi: Update -Wlogical-not-parentheses documentation.\n+\n 2016-09-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR other/77421"}, {"sha": "7d60445a28f8200684e773e39786c2e2f809ed02", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ff5dd35471b2b20f2b2681c8ff24c0d086ec00/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ff5dd35471b2b20f2b2681c8ff24c0d086ec00/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=25ff5dd35471b2b20f2b2681c8ff24c0d086ec00", "patch": "@@ -1,3 +1,11 @@\n+2016-09-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/77423\n+\t* c-common.c (bool_promoted_to_int_p): New function.\n+\t(expr_has_boolean_operands_p): New function.\n+\t(warn_logical_not_parentheses): Return if expr_has_boolean_operands_p.\n+\t(maybe_warn_bool_compare): Use bool_promoted_to_int_p.\n+\n 2016-09-04  Tom de Vries  <tom@codesourcery.com>\n \n \trevert:"}, {"sha": "63b1e28362894de0616ccb5f9c0b2847282b346a", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ff5dd35471b2b20f2b2681c8ff24c0d086ec00/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ff5dd35471b2b20f2b2681c8ff24c0d086ec00/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=25ff5dd35471b2b20f2b2681c8ff24c0d086ec00", "patch": "@@ -1479,6 +1479,36 @@ warn_tautological_cmp (location_t loc, enum tree_code code, tree lhs, tree rhs)\n     }\n }\n \n+/* Return true iff T is a boolean promoted to int.  */\n+\n+static bool\n+bool_promoted_to_int_p (tree t)\n+{\n+  return (CONVERT_EXPR_P (t)\n+\t  && TREE_TYPE (t) == integer_type_node\n+\t  && TREE_CODE (TREE_TYPE (TREE_OPERAND (t, 0))) == BOOLEAN_TYPE);\n+}\n+\n+/* Return true iff EXPR only contains boolean operands, or comparisons.  */\n+\n+static bool\n+expr_has_boolean_operands_p (tree expr)\n+{\n+  STRIP_NOPS (expr);\n+\n+  if (CONVERT_EXPR_P (expr))\n+    return bool_promoted_to_int_p (expr);\n+  else if (UNARY_CLASS_P (expr))\n+    return expr_has_boolean_operands_p (TREE_OPERAND (expr, 0));\n+  else if (BINARY_CLASS_P (expr))\n+    return (expr_has_boolean_operands_p (TREE_OPERAND (expr, 0))\n+\t    && expr_has_boolean_operands_p (TREE_OPERAND (expr, 1)));\n+  else if (COMPARISON_CLASS_P (expr))\n+    return true;\n+  else\n+    return false;\n+}\n+\n /* Warn about logical not used on the left hand side operand of a comparison.\n    This function assumes that the LHS is inside of TRUTH_NOT_EXPR.\n    Do not warn if RHS is of a boolean type, a logical operator, or\n@@ -1494,6 +1524,10 @@ warn_logical_not_parentheses (location_t location, enum tree_code code,\n       || truth_value_p (TREE_CODE (rhs)))\n     return;\n \n+  /* Don't warn for expression like !x == ~(bool1 | bool2).  */\n+  if (expr_has_boolean_operands_p (rhs))\n+    return;\n+\n   /* Don't warn for !x == 0 or !y != 0, those are equivalent to\n      !(x == 0) or !(y != 0).  */\n   if ((code == EQ_EXPR || code == NE_EXPR)\n@@ -12415,9 +12449,7 @@ maybe_warn_bool_compare (location_t loc, enum tree_code code, tree op0,\n \t don't want to warn here.  */\n       tree noncst = TREE_CODE (op0) == INTEGER_CST ? op1 : op0;\n       /* Handle booleans promoted to integers.  */\n-      if (CONVERT_EXPR_P (noncst)\n-\t  && TREE_TYPE (noncst) == integer_type_node\n-\t  && TREE_CODE (TREE_TYPE (TREE_OPERAND (noncst, 0))) == BOOLEAN_TYPE)\n+      if (bool_promoted_to_int_p (noncst))\n \t/* Warn.  */;\n       else if (TREE_CODE (TREE_TYPE (noncst)) != BOOLEAN_TYPE\n \t       && !truth_value_p (TREE_CODE (noncst)))"}, {"sha": "9ab031e6a5cd9ea34284552dda6548152d0c57ab", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ff5dd35471b2b20f2b2681c8ff24c0d086ec00/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ff5dd35471b2b20f2b2681c8ff24c0d086ec00/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=25ff5dd35471b2b20f2b2681c8ff24c0d086ec00", "patch": "@@ -5476,8 +5476,8 @@ if (a < 0 && a < 0) @{ @dots{} @}\n @opindex Wlogical-not-parentheses\n @opindex Wno-logical-not-parentheses\n Warn about logical not used on the left hand side operand of a comparison.\n-This option does not warn if the RHS operand is of a boolean type.  Its\n-purpose is to detect suspicious code like the following:\n+This option does not warn if the right operand is considered to be a Boolean\n+expression.  Its purpose is to detect suspicious code like the following:\n @smallexample\n int a;\n @dots{}"}, {"sha": "e54fc2ff7fece5966f16cbfbe2dafca5225969a7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ff5dd35471b2b20f2b2681c8ff24c0d086ec00/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ff5dd35471b2b20f2b2681c8ff24c0d086ec00/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=25ff5dd35471b2b20f2b2681c8ff24c0d086ec00", "patch": "@@ -1,3 +1,8 @@\n+2016-09-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/77423\n+\t* c-c++-common/Wlogical-not-parentheses-3.c: New test.\n+\n 2016-09-04  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/77391"}, {"sha": "00aa747652bc08aa64c00cae8a8ece572e9d2d5b", "filename": "gcc/testsuite/c-c++-common/Wlogical-not-parentheses-3.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ff5dd35471b2b20f2b2681c8ff24c0d086ec00/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWlogical-not-parentheses-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ff5dd35471b2b20f2b2681c8ff24c0d086ec00/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWlogical-not-parentheses-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWlogical-not-parentheses-3.c?ref=25ff5dd35471b2b20f2b2681c8ff24c0d086ec00", "patch": "@@ -0,0 +1,31 @@\n+/* PR c/77423 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wlogical-not-parentheses\" } */\n+\n+#ifndef __cplusplus\n+# define bool _Bool\n+#endif\n+\n+int\n+f (int a, bool b, bool c)\n+{\n+  int r = 0;\n+\n+  r += !a == (b | c);\n+  r += !a == (b ^ c);\n+  r += !a == (b & c);\n+  r += !a == ~b;\n+  r += !a == ~(int) b;\n+  r += !a == ((b & c) | c);\n+  r += !a == ((b & c) | (b ^ c));\n+  r += !a == (int) (b ^ c);\n+  r += !a == (int) ~b;\n+  r += !a == ~~b;\n+  r += !a == ~(b | c);\n+  r += !a == ~(b | (a == 1));\n+  r += !a == ~(a == 1);\n+\n+  r += !a == ((b & c) | (b ^ a)); /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+\n+  return r;\n+}"}]}