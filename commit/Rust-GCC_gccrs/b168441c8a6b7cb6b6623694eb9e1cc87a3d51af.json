{"sha": "b168441c8a6b7cb6b6623694eb9e1cc87a3d51af", "node_id": "C_kwDOANBUbNoAKGIxNjg0NDFjOGE2YjdjYjZiNjYyMzY5NGViOWUxY2M4N2EzZDUxYWY", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-06-03T00:16:40Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-06-03T00:16:40Z"}, "message": "Daily bump.", "tree": {"sha": "d244126b89758c4747e1dd32bec561e332082f4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d244126b89758c4747e1dd32bec561e332082f4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/comments", "author": null, "committer": null, "parents": [{"sha": "2423f6548405185e256036df3d0ef3c13fd996c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2423f6548405185e256036df3d0ef3c13fd996c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2423f6548405185e256036df3d0ef3c13fd996c5"}], "stats": {"total": 643, "additions": 642, "deletions": 1}, "files": [{"sha": "38ec47543ea29bd5953df44d181c4133686c4aa7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b168441c8a6b7cb6b6623694eb9e1cc87a3d51af", "patch": "@@ -1,3 +1,173 @@\n+2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* Makefile.in (OBJS): Add tree-diagnostic-client-data-hooks.o and\n+\ttree-logical-location.o.\n+\t(OBJS-libcommon): Add diagnostic-format-sarif.o; reorder.\n+\t(CFLAGS-tree-diagnostic-client-data-hooks.o): Add TARGET_NAME.\n+\t* common.opt (fdiagnostics-format=): Add sarif-stderr and sarif-file.\n+\t(sarif-stderr, sarif-file): New enum values.\n+\t* diagnostic-client-data-hooks.h: New file.\n+\t* diagnostic-format-sarif.cc: New file.\n+\t* diagnostic-path.h (enum diagnostic_event::verb): New enum.\n+\t(enum diagnostic_event::noun): New enum.\n+\t(enum diagnostic_event::property): New enum.\n+\t(struct diagnostic_event::meaning): New struct.\n+\t(diagnostic_event::get_logical_location): New vfunc.\n+\t(diagnostic_event::get_meaning): New vfunc.\n+\t(simple_diagnostic_event::get_logical_location): New vfunc impl.\n+\t(simple_diagnostic_event::get_meaning): New vfunc impl.\n+\t* diagnostic.cc: Include \"diagnostic-client-data-hooks.h\".\n+\t(diagnostic_initialize): Initialize m_client_data_hooks.\n+\t(diagnostic_finish): Clean up m_client_data_hooks.\n+\t(diagnostic_event::meaning::dump_to_pp): New.\n+\t(diagnostic_event::meaning::maybe_get_verb_str): New.\n+\t(diagnostic_event::meaning::maybe_get_noun_str): New.\n+\t(diagnostic_event::meaning::maybe_get_property_str): New.\n+\t(get_cwe_url): Make non-static.\n+\t(diagnostic_output_format_init): Handle\n+\tDIAGNOSTICS_OUTPUT_FORMAT_SARIF_STDERR and\n+\tDIAGNOSTICS_OUTPUT_FORMAT_SARIF_FILE.\n+\t* diagnostic.h (enum diagnostics_output_format): Add\n+\tDIAGNOSTICS_OUTPUT_FORMAT_SARIF_STDERR and\n+\tDIAGNOSTICS_OUTPUT_FORMAT_SARIF_FILE.\n+\t(class diagnostic_client_data_hooks): New forward decl.\n+\t(class logical_location): New forward decl.\n+\t(diagnostic_context::m_client_data_hooks): New field.\n+\t(diagnostic_output_format_init_sarif_stderr): New decl.\n+\t(diagnostic_output_format_init_sarif_file): New decl.\n+\t(get_cwe_url): New decl.\n+\t* doc/invoke.texi (-fdiagnostics-format=): Add sarif-stderr and\n+\tsarif-file.\n+\t* doc/sourcebuild.texi (Scan a particular file): Add\n+\tscan-sarif-file and scan-sarif-file-not.\n+\t* langhooks-def.h (lhd_get_sarif_source_language): New decl.\n+\t(LANG_HOOKS_GET_SARIF_SOURCE_LANGUAGE): New macro.\n+\t(LANG_HOOKS_INITIALIZER): Add\n+\tLANG_HOOKS_GET_SARIF_SOURCE_LANGUAGE.\n+\t* langhooks.cc (lhd_get_sarif_source_language): New.\n+\t* langhooks.h (lang_hooks::get_sarif_source_language): New field.\n+\t* logical-location.h: New file.\n+\t* plugin.cc (struct for_each_plugin_closure): New.\n+\t(for_each_plugin_cb): New.\n+\t(for_each_plugin): New.\n+\t* plugin.h (for_each_plugin): New decl.\n+\t* tree-diagnostic-client-data-hooks.cc: New file.\n+\t* tree-diagnostic.cc: Include \"diagnostic-client-data-hooks.h\".\n+\t(tree_diagnostics_defaults): Populate m_client_data_hooks.\n+\t* tree-logical-location.cc: New file.\n+\t* tree-logical-location.h: New file.\n+\n+2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* common.opt (fdiagnostics-format=): Add json-stderr and json-file\n+\tto description.\n+\t(DIAGNOSTICS_OUTPUT_FORMAT_JSON): Rename to...\n+\t(DIAGNOSTICS_OUTPUT_FORMAT_JSON_STDERR): ...this.\n+\t(diagnostics_output_format): Add json-stderr and json-file.\n+\t* diagnostic-format-json.cc (json_flush_to_file): New.\n+\t(json_final_cb): Convert to...\n+\t(json_flush_to_file): ...this, ...\n+\t(json_stderr_final_cb): ...this, and...\n+\t(json_file_final_cb): ...this.\n+\t(diagnostic_output_format_init): Move to diagnostic.cc.\n+\t(json_output_base_file_name): New.\n+\t(diagnostic_output_format_init_json): New.\n+\t(diagnostic_output_format_init_json_stderr): New.\n+\t(diagnostic_output_format_init_json_file): New.\n+\t* diagnostic.cc (diagnostic_output_format_init): Move here from\n+\tdiagnostic-format-json.cc; update for changes to enum.\n+\t* diagnostic.h (enum diagnostics_output_format): Rename\n+\tDIAGNOSTICS_OUTPUT_FORMAT_JSON to\n+\tDIAGNOSTICS_OUTPUT_FORMAT_JSON_STDERR, and add\n+\tDIAGNOSTICS_OUTPUT_FORMAT_JSON_FILE.\n+\t(diagnostic_output_format_init): Add base_file_name param.\n+\t(diagnostic_output_format_init_json_stderr): New decl.\n+\t(diagnostic_output_format_init_json_file): New dec.\n+\t* doc/invoke.texi (-fdiagnostics-format=): Add \"json-stderr\" and\n+\t\"json-file\".  Rewrite so that the existing \"json\" is a synonym of\n+\t\"json-stderr\".\n+\t* gcc.cc (driver_handle_option): Pass dump_base_name to\n+\tdiagnostic_output_format_init.\n+\t* opts.cc (common_handle_option): Likewise.\n+\n+2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* json.cc (string::print): Fix escaping of '\\'.\n+\n+2022-06-02  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* config/riscv/riscv.cc (riscv_build_integer_1): Rewrite value as\n+\t(-1 << 31) for the single-bit case, when operating on (1 << 31)\n+\tin SImode.\n+\t* config/riscv/riscv.h (SINGLE_BIT_MASK_OPERAND): Allow for\n+\tany single-bit value, moving the special case for (1 << 31) to\n+\triscv_build_integer_1 (in riscv.c).\n+\n+2022-06-02  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR target/105791\n+\t* config/i386/sse.md (V_128_256):Add V1TI and V2TI.\n+\t(define_mode_attr avxsizesuffix): Add support for V1TI and V2TI.\n+\n+2022-06-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/105778\n+\t* config/i386/i386.md (*ashl<dwi>3_doubleword_mask): Remove :SI\n+\tfrom AND and its operands and just verify operands[2] has HImode,\n+\tSImode or for TARGET_64BIT DImode.  Allow operands[3] to be a mask\n+\twith all low 6 (64-bit) or 5 (32-bit) bits set and in that case\n+\tjust throw away the masking.  Use force_reg before calling\n+\tgen_lowpart.\n+\t(*ashl<dwi>3_doubleword_mask_1): Allow operands[3] to be a mask\n+\twith all low 6 (64-bit) or 5 (32-bit) bits set and in that case\n+\tjust throw away the masking.\n+\t(*ashl<mode>3_doubleword): Rename to ...\n+\t(ashl<mode>3_doubleword): ... this.\n+\t(*ashl<mode>3_mask): Remove :SI from AND and its operands and just\n+\tverify operands[2] has HImode, SImode or for TARGET_64BIT DImode.\n+\tUse force_reg before calling gen_lowpart.\n+\t(*<insn><mode>3_mask): Likewise.\n+\t(*<insn><dwi>3_doubleword_mask): Likewise.  Allow operands[3] to be\n+\ta mask with all low 6 (64-bit) or 5 (32-bit) bits set and in that\n+\tcase just throw away the masking.  Use force_reg before calling\n+\tgen_lowpart.\n+\t(*<insn><dwi>3_doubleword_mask_1): Allow operands[3] to be a mask\n+\twith all low 6 (64-bit) or 5 (32-bit) bits set and in that case just\n+\tthrow away the masking.\n+\t(*<insn><mode>3_doubleword): Rename to ...\n+\t(<insn><mode>3_doubleword): ... this.\n+\t(*<insn><mode>3_mask): Remove :SI from AND and its operands and just\n+\tverify operands[2] has HImode, SImode or for TARGET_64BIT DImode.\n+\tUse force_reg before calling gen_lowpart.\n+\t(splitter after it): Remove :SI from AND and its operands and just\n+\tverify operands[2] has HImode, SImode or for TARGET_64BIT DImode.\n+\t(*<btsc><mode>_mask, *<btsc><mode>_mask): Remove :SI from AND and its\n+\toperands and just verify operands[1] has HImode, SImode or for\n+\tTARGET_64BIT DImode.  Use force_reg before calling gen_lowpart.\n+\t(*jcc_bt<mode>_mask_1): New define_insn_and_split pattern.\n+\t* config/i386/i386.cc (ix86_rtx_costs): For ZERO_EXTRACT with\n+\tZERO_EXTEND QI->SI in last operand ignore the cost of the ZERO_EXTEND.\n+\n+2022-06-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101668\n+\t* tree-vect-slp.cc (vect_build_slp_tree_1): Allow BIT_FIELD_REFs\n+\tfor vector types with compatible lane types.\n+\t(vect_build_slp_tree_2): Deal with this.\n+\t(vect_add_slp_permutation): Adjust.  Emit lowpart/concat\n+\tspecial cases without VEC_PERM.\n+\t(vectorizable_slp_permutation): Select the operand vector\n+\ttype and relax requirements.  Handle identity permutes\n+\twith mismatching operand types.\n+\t* optabs-query.cc (can_vec_perm_const_p): Only allow variable\n+\tpermutes for op_mode == mode.\n+\n+2022-06-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105802\n+\t* tree-ssa-loop-unswitch.cc (find_unswitching_predicates_for_bb):\n+\tMake sure to also compute the range in the type of the switch index.\n+\n 2022-06-01  David Seifert  <soap@gentoo.org>\n \n \tPR plugins/95648"}, {"sha": "934a3d7ee388ef9f999cede2bb2e9df5dd8589c1", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=b168441c8a6b7cb6b6623694eb9e1cc87a3d51af", "patch": "@@ -1 +1 @@\n-20220602\n+20220603"}, {"sha": "1434ebead054b7b8cb68dc01980be4a27e138712", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 302, "deletions": 0, "changes": 302, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b168441c8a6b7cb6b6623694eb9e1cc87a3d51af", "patch": "@@ -1,3 +1,305 @@\n+2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc-interface/misc.cc (gnat_get_sarif_source_language): New.\n+\t(LANG_HOOKS_GET_SARIF_SOURCE_LANGUAGE): Redefine.\n+\n+2022-06-02  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* gcc-interface/gigi.h: Update copyright notice.\n+\t* gcc-interface/lang-specs.h: Likewise.\n+\t* gcc-interface/utils.cc: Likewise.\n+\n+2022-06-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/gigi.h (enum standard_datatypes): Remove values\n+\tfor the SJLJ exception mechanism.\n+\t(jmpbuf_type): Delete.\n+\t(jmpbuf_ptr_type): Likewise.\n+\t(get_jmpbuf_decl): Likewise.\n+\t(set_jmpbuf_decl): Likewise.\n+\t(get_excptr_decl): Likewise.\n+\t(not_handled_by_others_decl): Likewise.\n+\t(setjmp_decl): Likewise.\n+\t(update_setjmp_buf_decl): Likewise.\n+\t(raise_nodefer_decl): Likewise.\n+\t(set_block_jmpbuf_decl): Likewise.\n+\t(get_block_jmpbuf_decl): Likewise.\n+\t* gcc-interface/trans.cc (gigi): Delete dead code.\n+\t* gcc-interface/utils.cc (gnat_binding_level): Remove JMPBUF_DECL.\n+\t(gnat_pushlevel): Do not clear it.\n+\t(set_block_jmpbuf_decl): Delete.\n+\t(get_block_jmpbuf_decl): Likewise.\n+\n+2022-06-02  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* gcc-interface/decl.cc (warn_on_field_placement): Add insertion\n+\tcharacter '.q' to warning string.\n+\n+2022-06-02  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gcc-interface/Makefile.in (gnatlib-shared-default): Add\n+\t-fno-lto.\n+\n+2022-06-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.cc (gnat_to_gnu_entity): Do not check the\n+\tscope of anonymous access Itypes.\n+\t* gcc-interface/trans.cc (Identifier_to_gnu): Do not translate\n+\tthe return type of a subprogram here.\n+\n+2022-06-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch7.adb (Expand_N_Package_Body): Build static dispatch\n+\ttables only for units that are not compilation units, unless\n+\tthey are generic instances.  Do not push a scope for this.\n+\t(Expand_N_Package_Declaration): Build static dispatch tables\n+\tonly for units that are both not compilation units and generic\n+\tinstances.\n+\t* exp_disp.adb (Build_Static_Dispatch_Tables): Remove redundant\n+\tearly return.  Push a scope for package bodies.\n+\t* sem_ch10.adb: Add with and use clauses for Exp_Disp.\n+\t(Analyze_Compilation_Unit): Build static dispatch tables here.\n+\n+2022-06-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Clear the Is_Public\n+\tflag on thunks.\n+\n+2022-06-02  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch13.adb, exp_ch5.adb, exp_ch9.adb, exp_strm.adb,\n+\tsem_ch10.adb, sem_ch13.adb, sem_ch5.adb, sem_ch6.adb,\n+\tsem_ch8.adb, sem_elab.adb, sem_eval.adb, sem_prag.adb,\n+\tsem_util.adb: Remove checks for the missing list before\n+\titerating with First/Next; reindent code and refill comments.\n+\n+2022-06-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.ads (Has_Controlling_Result): Document new usage.\n+\t(Is_Thunk): Document secondary stack thunks.\n+\t(Returns_By_Ref): Adjust.\n+\t* exp_ch6.adb (Caller_Known_Size): Return true for tagged types.\n+\t(Expand_N_Extended_Return_Statement): Do not call Set_By_Ref.\n+\t(Expand_Simple_Function_Return): For a BIP return with an Alloc_Form\n+\tparameter, mark the node as returning on the secondary stack.\n+\tReplace call to Is_Limited_Interface with Is_Limited_View.  Deal wit\n+\tsecondary stack thunks.  Do not call Set_By_Ref.  Optimize the case\n+\tof a call to a function whose type also needs finalization.\n+\t(Needs_BIP_Task_Actuals): Replace Thunk_Entity with Thunk_Target.\n+\t(Needs_BIP_Finalization_Master): Cosmetic fixes.\n+\t(Needs_BIP_Alloc_Form): Check No_Secondary_Stack restriction and\n+\treturn true for tagged types.\n+\t* exp_ch7.adb (Transient Scope Management): Update description.\n+\t* exp_disp.adb (Expand_Dispatching_Call): Always set Returns_By_Ref\n+\ton designated type if the call is dispatching on result.  Tidy up.\n+\t(Expand_Interface_Thunk): Change type of Thunk_Code from Node_Id to\n+\tList_Id.  Change type of local variables from Node_Id to Entity_Id.\n+\tPropagate Aliased_Present flag to create the formals and explicitly\n+\tset Has_Controlling_Result to False.  Build a secondary stack thunk\n+\tif necessary in the function case.\n+\t(Expand_Secondary_Stack_Thunk): New function.\n+\t(Make_Secondary_DT): Build secondary stack thunks if necessary.\n+\t(Make_DT): Likewise.\n+\t(Register_Predefined_Primitive): Likewise.\n+\t(Register_Primitive): Likewise.\n+\t* exp_util.ads (Is_Secondary_Stack_Thunk): Declare.\n+\t(Thunk_Target): Likewise.\n+\t* exp_util.adb (Is_Secondary_Stack_Thunk): New function.\n+\t(Thunk_Target): Likewise.\n+\t* fe.h (Is_Secondary_Stack_Thunk): Declare.\n+\t(Thunk_Target): Likewise.\n+\t* gen_il-fields.ads (Opt_Field_Enum): Remove By_Ref.\n+\t* gen_il-gen-gen_nodes.adb (N_Simple_Return_Statement): Likewise.\n+\t(N_Extended_Return_Statement): Likewise.\n+\t* sem_ch6.adb (Analyze_Subprogram_Specification): Skip check for\n+\tabstract return type in the thunk case.\n+\t(Create_Extra_Formals): Replace Thunk_Entity with Thunk_Target.\n+\t* sem_disp.adb (Check_Controlling_Formals): Skip in the thunk case.\n+\t* sem_util.adb: Add use and with clauses for Exp_Ch6.\n+\t(Compute_Returns_By_Ref): Do not process procedures and only set\n+\tthe flag for direct return by reference.\n+\t(Needs_Secondary_Stack): Do not return true for specific tagged\n+\ttypes and adjust comments accordingly.\n+\t* sinfo.ads (By_Ref): Delete.\n+\t(N_Simple_Return_Statement): Remove By_Ref.\n+\t(N_Extended_Return_Statement): Likewise.\n+\t* gcc-interface/ada-tree.h (TYPE_RETURN_UNCONSTRAINED_P): Delete.\n+\t* gcc-interface/decl.cc (gnat_to_gnu_subprog_type): Do not use it.\n+\tReturn by direct reference if the return type needs the secondary\n+\tstack as well as for secondary stack thunks.\n+\t* gcc-interface/gigi.h (fntype_same_flags_p): Remove parameter.\n+\t* gcc-interface/misc.cc (gnat_type_hash_eq): Adjust to above change.\n+\t* gcc-interface/trans.cc (finalize_nrv): Replace test on\n+\tTYPE_RETURN_UNCONSTRAINED_P with TYPE_RETURN_BY_DIRECT_REF_P.\n+\t(Subprogram_Body_to_gnu): Do not call maybe_make_gnu_thunk for\n+\tsecondary stack thunks.\n+\t(Call_to_gnu): Do not test TYPE_RETURN_UNCONSTRAINED_P.\n+\t(gnat_to_gnu) <N_Simple_Return_Statement>: In the return by direct\n+\treference case, test for the presence of Storage_Pool on the node\n+\tto build an allocator.\n+\t(maybe_make_gnu_thunk): Deal with Thunk_Entity and Thunk_Target.\n+\t* gcc-interface/utils.cc (fntype_same_flags_p): Remove parameter.\n+\n+2022-06-02  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* einfo.ads: Fix reference to Global_Entity_Suppress and\n+\tLocal_Entity_Suppress variable in the comments.\n+\t* sem.ads: Likewise.\n+\t* sem_prag.adb: Likewise.\n+\n+2022-06-02  Claire Dross  <dross@adacore.com>\n+\n+\t* libgnat/s-aridou.adb: Use Always_Return instead of Terminating\n+\tto annotate termination for GNATprove.\n+\t* libgnat/s-arit32.adb: Idem.\n+\t* libgnat/s-spcuop.ads: Idem.\n+\n+2022-06-02  Julien Bortolussi  <bortolussi@adacore.com>\n+\n+\t* libgnat/a-cofuse.ads, libgnat/a-cofuse.adb,\n+\tlibgnat/a-cofuma.ads, libgnat/a-cofuma.adb: Make Length and\n+\tNum_Overlaps return Big_Natural.\n+\t* libgnat/a-cforse.ads, libgnat/a-cforse.adb,\n+\tlibgnat/a-cforma.adb, libgnat/a-cfhase.ads,\n+\tlibgnat/a-cfhase.adb, libgnat/a-cfhama.adb,\n+\tlibgnat/a-cfdlli.adb: Adapt code to handle Big_Integers instead\n+\tof Count_Type.\n+\n+2022-06-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch3.adb (Init_Secondary_Tags.Initialize_Tag): Initialize the\n+\tOffset_Func component by means of 'Unrestricted_Access.\n+\n+2022-06-02  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* errout.adb (Write_JSON_Span): Add subprogram name to emitted\n+\tJSON.\n+\n+2022-06-02  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch7.adb (Set_Referencer_Of_Non_Subprograms): New local\n+\tprocedure, used for code refactoring. Also take into account\n+\tInline_Always pragma when deciding to make a symbol public for\n+\tC generation.\n+\n+2022-06-02  Yannick Moy  <moy@adacore.com>\n+\n+\t* atree.adb (New_Copy): Reset flags related to ghost entities\n+\tbefore marking the new node.\n+\n+2022-06-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch6.adb (Freeze_Subprogram.Register_Predefined_DT_Entry): Move\n+\tprocedure to...\n+\t* exp_disp.ads (Expand_Interface_Thunk): Move declaration to...\n+\t(Register_Predefined_Primitive): Declare.\n+\t* exp_disp.adb (Expand_Interface_Thunk): ...here.\n+\t(Register_Predefined_Primitive): ...here and change into a function\n+\treturning List_Id.\n+\n+2022-06-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_Freeze_Record_Type): Adjust comment.\n+\t(Expand_N_Object_Declaration): Do not build static dispatch tables.\n+\t* exp_disp.adb (Make_And_Insert_Dispatch_Table): New procedure.\n+\t(Build_Static_Dispatch_Tables): Call it to build the dispatch tables\n+\tand wrap them in the Actions list of a freeze node.\n+\n+2022-06-02  Doug Rupp  <rupp@adacore.com>\n+\n+\t* libgnat/system-vxworks7-arm.ads (Support_Atomic_Primitives):\n+\tSet True.\n+\t* libgnat/system-vxworks7-arm-rtp-smp.ads: Likewise.\n+\t* libgnat/system-vxworks7-aarch64.ads: Likewise.\n+\t* libgnat/system-vxworks7-aarch64-rtp-smp.ads: Likewise:\n+\n+2022-06-02  Javier Miranda  <miranda@adacore.com>\n+\n+\t* libgnat/g-dyntab.ads (Table_Type): Update documentation.\n+\n+2022-06-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* freeze.adb (Check_Expression_Function.Find_Constant): Make test\n+\tfor deferred constants more robust.\n+\n+2022-06-02  Joffrey Huguet  <huguet@adacore.com>\n+\n+\t* libgnat/i-cstrin.ads (Update): Update precondition.\n+\n+2022-06-02  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch2.adb (Analyze_Identifier): Add checking for ghost\n+\tcontext.\n+\t* sem_ch5.adb (Analyze_Implicit_Label_Declaration): Treat\n+\timplicit labels like other entities by setting their ghost\n+\tstatus according to context.\n+\t* ghost.adb (Check_Ghost_Context): Adapt checking.\n+\n+2022-06-02  Joffrey Huguet  <huguet@adacore.com>\n+\n+\t* libgnat/i-cstrin.ads (Update): Add precondition.\n+\n+2022-06-02  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Label_Entity): Remove body.\n+\t* sem_ch5.ads (Analyze_Label_Entity): Remove spec.\n+\n+2022-06-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_util.adb (Propagate_DIC_Attributes): Add ??? comment.\n+\t(Propagate_Invariant_Attributes): Likewise.  Propagate the\n+\tHas_Inheritable_Invariants and Has_Inherited_Invariants to\n+\tthe base type of the target type.\n+\n+2022-06-02  Doug Rupp  <rupp@adacore.com>\n+\n+\t* libgnat/system-linux-arm.ads (Memory_Size): Compute based on\n+\tWord_Size.\n+\n+2022-06-02  Doug Rupp  <rupp@adacore.com>\n+\n+\t* libgnat/system-vxworks7-aarch64-rtp-smp.ads (Word_Size):\n+\tCompute based on Standard'Word_Size. (Memory_Size): Compute\n+\tbased on Word_Size.\n+\t* libgnat/system-vxworks7-arm-rtp-smp.ads: Likewise.\n+\t* libgnat/system-vxworks7-e500-rtp-smp.ads: Likewise.\n+\t* libgnat/system-vxworks7-e500-rtp.ads: Likewise.\n+\t* libgnat/system-vxworks7-ppc-rtp-smp.ads: Likewise.\n+\t* libgnat/system-vxworks7-ppc-rtp.ads: Likewise.\n+\t* libgnat/system-vxworks7-ppc64-rtp-smp.ads: Likewise.\n+\t* libgnat/system-vxworks7-x86-rtp-smp.ads: Likewise.\n+\t* libgnat/system-vxworks7-x86-rtp.ads: Likewise.\n+\n+2022-06-02  Justin Squirek  <squirek@adacore.com>\n+\n+\t* gnatbind.adb (Gnatbind): Add initialize call for Uintp\n+\t* gnatls.adb (Gnatls): Likewise.\n+\t* gprep.adb (Gnatprep): Likewise.\n+\t* make.adb (Initialize): Likewise.\n+\n+2022-06-02  Claire Dross  <dross@adacore.com>\n+\n+\t* libgnat/a-cfinve.ads (Element): Change the type of the\n+\tPosition parameter to Extended_Index.\n+\t* libgnat/a-cfinve.adb (Element): Idem.\n+\t* libgnat/a-cofove.ads (Element): Idem.\n+\t* libgnat/a-cofove.adb (Element): Idem.\n+\n+2022-06-02  Joffrey Huguet  <huguet@adacore.com>\n+\n+\t* libgnat/s-atacco.ads (To_Pointer): Add Global => null.\n+\t(To_Address): Add SPARK_Mode => Off.\n+\n+2022-06-02  Joffrey Huguet  <huguet@adacore.com>\n+\n+\t* libgnat/i-cstrin.ads (To_Chars_Ptr): Add SPARK_Mode => Off.\n+\t(Free): Likewise.\n+\t(New_Char_Array): Add global contracts and Volatile attribute.\n+\t(New_String): Likewise.\n+\t(Value, Strlen, Update): Add global contracts and preconditions.\n+\t* libgnat/i-cstrin.adb: Add SPARK_Mode => Off to the package\n+\tbody.\n+\n 2022-06-01  Yannick Moy  <moy@adacore.com>\n \n \t* contracts.adb (Check_Type_Or_Object_External_Properties): Check"}, {"sha": "53b3ffb487ba93eb61d716265805bf9727ce9629", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=b168441c8a6b7cb6b6623694eb9e1cc87a3d51af", "patch": "@@ -1,3 +1,41 @@\n+2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* checker-path.cc (checker_event::get_meaning): New.\n+\t(function_entry_event::get_meaning): New.\n+\t(state_change_event::get_desc): Add dump of meaning of the event\n+\tto the -fanalyzer-verbose-state-changes output.\n+\t(state_change_event::get_meaning): New.\n+\t(cfg_edge_event::get_meaning): New.\n+\t(call_event::get_meaning): New.\n+\t(return_event::get_meaning): New.\n+\t(start_consolidated_cfg_edges_event::get_meaning): New.\n+\t(warning_event::get_meaning): New.\n+\t* checker-path.h: Include \"tree-logical-location.h\".\n+\t(checker_event::checker_event): Construct m_logical_loc.\n+\t(checker_event::get_logical_location): New.\n+\t(checker_event::get_meaning): New decl.\n+\t(checker_event::m_logical_loc): New.\n+\t(function_entry_event::get_meaning): New decl.\n+\t(state_change_event::get_meaning): New decl.\n+\t(cfg_edge_event::get_meaning): New decl.\n+\t(call_event::get_meaning): New decl.\n+\t(return_event::get_meaning): New decl.\n+\t(start_consolidated_cfg_edges_event::get_meaning): New.\n+\t(warning_event::get_meaning): New decl.\n+\t* pending-diagnostic.h: Include \"diagnostic-path.h\".\n+\t(pending_diagnostic::get_meaning_for_state_change): New vfunc.\n+\t* sm-file.cc (file_diagnostic::get_meaning_for_state_change): New\n+\tvfunc impl.\n+\t* sm-malloc.cc (malloc_diagnostic::get_meaning_for_state_change):\n+\tLikewise.\n+\t* sm-sensitive.cc\n+\t(exposure_through_output_file::get_meaning_for_state_change):\n+\tLikewise.\n+\t* sm-taint.cc (taint_diagnostic::get_meaning_for_state_change):\n+\tLikewise.\n+\t* varargs.cc\n+\t(va_list_sm_diagnostic::get_meaning_for_state_change): Likewise.\n+\n 2022-05-23  David Malcolm  <dmalcolm@redhat.com>\n \n \t* call-info.cc: Add \"final\" and \"override\" to all vfunc"}, {"sha": "0bc8b8e9f185f93b85d8332e47626fea536b882b", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=b168441c8a6b7cb6b6623694eb9e1cc87a3d51af", "patch": "@@ -1,3 +1,9 @@\n+2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-lang.cc (LANG_HOOKS_GET_SARIF_SOURCE_LANGUAGE): Redefine.\n+\t(c_get_sarif_source_language): New.\n+\t* c-tree.h (c_get_sarif_source_language): New decl.\n+\n 2022-05-31  Jason Merrill  <jason@redhat.com>\n \n \t* Make-lang.in (c.tags): Look at *.cc."}, {"sha": "5c8cdb86e447615f63ff9584288fa5c2f1afb0e8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b168441c8a6b7cb6b6623694eb9e1cc87a3d51af", "patch": "@@ -1,3 +1,32 @@\n+2022-06-02  Marek Polacek  <polacek@redhat.com>\n+\n+\t* constexpr.cc (potential_constant_expression_1): Treat\n+\t{,VEC_}NEW_EXPR and {,VEC_}DELETE_EXPRas potentially constant in C++20.\n+\n+2022-06-02  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/105803\n+\t* pt.cc (value_dependent_expression_p): Handle {,VEC_}NEW_EXPR\n+\tin the switch.\n+\n+2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* cp-lang.cc (LANG_HOOKS_GET_SARIF_SOURCE_LANGUAGE): Redefine.\n+\t(cp_get_sarif_source_language): New.\n+\n+2022-06-02  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105795\n+\t* constexpr.cc (init_subob_ctx): Clear ctx->ctor for empty subob.\n+\t(cxx_eval_store_expression): Likewise.\n+\t(cxx_eval_bare_aggregate): Handle null ctx->ctor.\n+\n+2022-06-02  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105795\n+\t* constexpr.cc (cxx_eval_bare_aggregate): Always call\n+\tinit_subob_ctx.\n+\n 2022-06-01  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/105734"}, {"sha": "99e108981278e5debaf524405fd6ef696e6effcd", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=b168441c8a6b7cb6b6623694eb9e1cc87a3d51af", "patch": "@@ -1,3 +1,8 @@\n+2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* d-lang.cc (d_get_sarif_source_language): New.\n+\t(LANG_HOOKS_GET_SARIF_SOURCE_LANGUAGE): Redefine.\n+\n 2022-05-31  Jason Merrill  <jason@redhat.com>\n \n \t* Make-lang.in (d.tags): Just look at *.cc."}, {"sha": "d584790d4a80773d46ce3298f2d6783e0c7bdec9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b168441c8a6b7cb6b6623694eb9e1cc87a3d51af", "patch": "@@ -1,3 +1,8 @@\n+2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* f95-lang.cc (gfc_get_sarif_source_language): New.\n+\t(LANG_HOOKS_GET_SARIF_SOURCE_LANGUAGE): Redefine.\n+\n 2022-05-31  Jason Merrill  <jason@redhat.com>\n \n \t* Make-lang.in (fortran.tags): Look at *.cc."}, {"sha": "5fdf423fec744b29c9f9cd4ea16faeecc005f675", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=b168441c8a6b7cb6b6623694eb9e1cc87a3d51af", "patch": "@@ -1,3 +1,8 @@\n+2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* go-lang.cc (go_get_sarif_source_language): New.\n+\t(LANG_HOOKS_GET_SARIF_SOURCE_LANGUAGE): Redefine.\n+\n 2022-05-31  Jason Merrill  <jason@redhat.com>\n \n \t* Make-lang.in (go.tags): Look at *.cc."}, {"sha": "01720f734f9cd63a5e7a680aa90c98ed44de439e", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=b168441c8a6b7cb6b6623694eb9e1cc87a3d51af", "patch": "@@ -1,3 +1,9 @@\n+2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* objc-act.h (objc_get_sarif_source_language): New decl.\n+\t* objc-lang.cc (LANG_HOOKS_GET_SARIF_SOURCE_LANGUAGE): Redefine.\n+\t(objc_get_sarif_source_language): New.\n+\n 2022-05-31  Jason Merrill  <jason@redhat.com>\n \n \t* Make-lang.in (objc.tags): Look at *.cc."}, {"sha": "a77a0fe4259c3cbaa151d295bbf377364834e260", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b168441c8a6b7cb6b6623694eb9e1cc87a3d51af", "patch": "@@ -1,3 +1,62 @@\n+2022-06-02  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/105803\n+\t* g++.dg/template/new13.C: New test.\n+\n+2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-c++-common/diagnostic-format-sarif-file-1.c: New test.\n+\t* c-c++-common/diagnostic-format-sarif-file-2.c: New test.\n+\t* c-c++-common/diagnostic-format-sarif-file-3.c: New test.\n+\t* c-c++-common/diagnostic-format-sarif-file-4.c: New test.\n+\t* gcc.dg/analyzer/file-meaning-1.c: New test.\n+\t* gcc.dg/analyzer/malloc-meaning-1.c: New test.\n+\t* gcc.dg/analyzer/malloc-sarif-1.c: New test.\n+\t* gcc.dg/plugin/analyzer_gil_plugin.c\n+\t(gil_diagnostic::get_meaning_for_state_change): New vfunc impl.\n+\t* gcc.dg/plugin/diagnostic-test-paths-5.c: New test.\n+\t* gcc.dg/plugin/plugin.exp (plugin_test_list): Add\n+\tdiagnostic-test-paths-5.c to tests for\n+\tdiagnostic_plugin_test_paths.c.\n+\t* lib/gcc-dg.exp: Load scansarif.exp.\n+\t* lib/scansarif.exp: New test.\n+\n+2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-c++-common/diagnostic-format-json-file-1.c: New test.\n+\t* c-c++-common/diagnostic-format-json-stderr-1.c: New test.\n+\n+2022-06-02  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105795\n+\t* g++.dg/cpp1z/constexpr-aggr-base1.C: New test.\n+\n+2022-06-02  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR target/105791\n+\t* gcc.target/i386/pr105791.c: New test case.\n+\n+2022-06-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/30314\n+\t* gcc.dg/tree-ssa/pr30314.c: Add tests with swapped arguments.\n+\n+2022-06-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/105778\n+\t* gcc.target/i386/pr105778.c: New test.\n+\n+2022-06-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101668\n+\t* gcc.target/i386/pr101668.c: New testcase.\n+\t* gcc.dg/vect/bb-slp-pr101668.c: Likewise.\n+\n+2022-06-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105802\n+\t* g++.dg/opt/pr105802.C: New testcase.\n+\n 2022-06-01  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR rtl-optimization/105638"}, {"sha": "d34b9a1bdbbae35375e2601ccd4f2e4c8ab121f6", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=b168441c8a6b7cb6b6623694eb9e1cc87a3d51af", "patch": "@@ -1,3 +1,7 @@\n+2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* testsuite/lib/libatomic.exp: Add load_gcc_lib of scansarif.exp.\n+\n 2022-03-24  Tom de Vries  <tdevries@suse.de>\n \n \tPR target/105011"}, {"sha": "2fbed181c9c67ecc9ce16e3893db3babc725910b", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=b168441c8a6b7cb6b6623694eb9e1cc87a3d51af", "patch": "@@ -1,3 +1,7 @@\n+2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* testsuite/lib/libgomp.exp: Add load_gcc_lib of scansarif.exp.\n+\n 2022-05-31  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/libgomp.c-c++-common/allocate-1.c (foo): Add testcase for"}, {"sha": "d1d9212d81c5435f01b4a390ae941c64e322bb7f", "filename": "libitm/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=b168441c8a6b7cb6b6623694eb9e1cc87a3d51af", "patch": "@@ -1,3 +1,7 @@\n+2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* testsuite/lib/libitm.exp: Add load_gcc_lib of scansarif.exp.\n+\n 2022-02-03  David Seifert  <soap@gentoo.org>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "734532779c47fb7bcbc4ce7d6af1fc7e8a01b9ec", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b168441c8a6b7cb6b6623694eb9e1cc87a3d51af/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=b168441c8a6b7cb6b6623694eb9e1cc87a3d51af", "patch": "@@ -1,3 +1,7 @@\n+2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* testsuite/lib/libphobos-dg.exp: Add load_gcc_lib of scansarif.exp.\n+\n 2022-05-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* libdruntime/MERGE: Merge upstream druntime f89da313."}]}