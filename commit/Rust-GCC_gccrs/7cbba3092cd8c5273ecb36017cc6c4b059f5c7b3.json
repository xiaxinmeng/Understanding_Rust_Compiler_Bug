{"sha": "7cbba3092cd8c5273ecb36017cc6c4b059f5c7b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NiYmEzMDkyY2Q4YzUyNzNlY2IzNjAxN2NjNmM0YjA1OWY1YzdiMw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-05-17T22:17:40Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-05-17T22:17:40Z"}, "message": "gcc-dg.exp (gcc-dg-debug-runtest): New method.\n\n\t* lib/gcc-dg.exp (gcc-dg-debug-runtest): New method.\n\t* g++.dg/debug/debug.exp: Use gcc-dg-debug-runtest.\n\t* gcc.dg/debug/debug.exp: Likewise.\n\nFrom-SVN: r66918", "tree": {"sha": "bb0052910fabe0a658423618af52ac9070556252", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb0052910fabe0a658423618af52ac9070556252"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cbba3092cd8c5273ecb36017cc6c4b059f5c7b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cbba3092cd8c5273ecb36017cc6c4b059f5c7b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cbba3092cd8c5273ecb36017cc6c4b059f5c7b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cbba3092cd8c5273ecb36017cc6c4b059f5c7b3/comments", "author": null, "committer": null, "parents": [{"sha": "c08f71aa81fa4cfd4ccce0fa9047a26544761a40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c08f71aa81fa4cfd4ccce0fa9047a26544761a40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c08f71aa81fa4cfd4ccce0fa9047a26544761a40"}], "stats": {"total": 181, "additions": 71, "deletions": 110}, "files": [{"sha": "8ee74fa3fd1092999f3b80158bcc5053629d18b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbba3092cd8c5273ecb36017cc6c4b059f5c7b3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbba3092cd8c5273ecb36017cc6c4b059f5c7b3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7cbba3092cd8c5273ecb36017cc6c4b059f5c7b3", "patch": "@@ -1,3 +1,9 @@\n+2003-05-17  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* lib/gcc-dg.exp (gcc-dg-debug-runtest): New method.\n+\t* g++.dg/debug/debug.exp: Use gcc-dg-debug-runtest.\n+\t* gcc.dg/debug/debug.exp: Likewise.\n+\n 2003-05-17  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* gcc.dg/dollar.c: New test."}, {"sha": "8d6b1e88099590524b1e5d0dce5802a0ca49fbe6", "filename": "gcc/testsuite/g++.dg/debug/debug.exp", "status": "modified", "additions": 2, "deletions": 50, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbba3092cd8c5273ecb36017cc6c4b059f5c7b3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdebug.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbba3092cd8c5273ecb36017cc6c4b059f5c7b3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdebug.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdebug.exp?ref=7cbba3092cd8c5273ecb36017cc6c4b059f5c7b3", "patch": "@@ -19,60 +19,12 @@\n # Load support procs.\n load_lib g++-dg.exp\n \n-# This is the list of debugging options we'll try.  Some of them won't\n-# be supported, that's OK; they will be quickly eliminated.\n-# It's probably not a good idea to add more optimisation options.\n-\n-if ![info exists DEBUG_TORTURE_OPTIONS] {\n-    set DEBUG_TORTURE_OPTIONS \"\"\n-    foreach type {-gdwarf-2 -gstabs -gstabs+ -gxcoff -gxcoff+ -gcoff} {\n-\tset comp_output [g++_target_compile \\\n-\t\t\"$srcdir/$subdir/trivial.C\" \"trivial.S\" assembly \\\n-\t\t\"additional_flags=$type\"]\n-\tif { ! [string match \"*: unknown or unsupported -g option*\" \\\n-\t\t$comp_output] } {\n-\t    foreach level {1 \"\" 3} {\n-\t\tlappend DEBUG_TORTURE_OPTIONS [list \"${type}${level}\"]\n-\t\tforeach opt { -O2 -O3 } {\n-\t\t    lappend DEBUG_TORTURE_OPTIONS \\\n-\t\t\t    [list \"${type}${level}\" \"$opt\" ]\n-\t\t}\n-\t    }\n-\t}\n-    }\n-}\n-\n-verbose -log \"Using options $DEBUG_TORTURE_OPTIONS\"\n-\n # Initialize `dg'.\n dg-init\n \n # Main loop.\n-\n-foreach test [lsort [glob -nocomplain $srcdir/$subdir/*.C]] {\n-    global runtests\n-\n-    # If we're only testing specific files and this isn't one of \n-    # them, skip it.\n-    if ![runtest_file_p $runtests $test] {\n-\tcontinue\n-    }\n-\n-    set nshort [file tail [file dirname $test]]/[file tail $test]\n-\n-    foreach flags $DEBUG_TORTURE_OPTIONS {\n-\tset doit 1\n-\t# if { [string match {*/debug-[126].c} \"$nshort\"] \\\n-\t#\t&& [string match \"*1\" [lindex \"$flags\" 0] ] } { \n-\t#    set doit 0\n-\t# }\n-\t\n-\tif { $doit } {\n-\t    verbose -log \"Testing $nshort, $flags\" 1\n-\t    dg-test $test $flags \"\"\n-\t}\n-    }\n-}\n+gcc-dg-debug-runtest g++_target_compile trivial.C \\\n+    [lsort [glob -nocomplain $srcdir/$subdir/*.C]]\n \n # All done.\n dg-finish"}, {"sha": "fb83046ead48e942f2a933da225bc69e47845a7e", "filename": "gcc/testsuite/gcc.dg/debug/debug.exp", "status": "modified", "additions": 2, "deletions": 60, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbba3092cd8c5273ecb36017cc6c4b059f5c7b3/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdebug.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbba3092cd8c5273ecb36017cc6c4b059f5c7b3/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdebug.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdebug.exp?ref=7cbba3092cd8c5273ecb36017cc6c4b059f5c7b3", "patch": "@@ -19,71 +19,13 @@\n # Load support procs.\n load_lib gcc-dg.exp\n \n-# This is the list of debugging options we'll try.  Some of them won't\n-# be supported, that's OK; they will be quickly eliminated.\n-# It's probably not a good idea to add more optimisation options.\n-\n-if ![info exists DEBUG_TORTURE_OPTIONS] {\n-    set DEBUG_TORTURE_OPTIONS \"\"\n-    foreach type {-gdwarf-2 -gstabs -gstabs+ -gxcoff -gxcoff+ -gcoff} {\n-\tset comp_output [gcc_target_compile \\\n-\t\t\"$srcdir/$subdir/trivial.c\" \"trivial.S\" assembly \\\n-\t\t\"additional_flags=$type\"]\n-\tif { ! [string match \"*: unknown or unsupported -g option*\" \\\n-\t\t$comp_output] } {\n-\t    foreach level {1 \"\" 3} {\n-\t\tlappend DEBUG_TORTURE_OPTIONS [list \"${type}${level}\"]\n-\t\tforeach opt { -O -O3 } {\n-\t\t    lappend DEBUG_TORTURE_OPTIONS \\\n-\t\t\t    [list \"${type}${level}\" \"$opt\" ]\n-\t\t}\n-\t    }\n-\t}\n-    }\n-}\n-\n-verbose -log \"Using options $DEBUG_TORTURE_OPTIONS\"\n-\n # Initialize `dg'.\n dg-init\n \n # Main loop.\n \n-foreach test [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] {\n-    global runtests\n-\n-    # If we're only testing specific files and this isn't one of \n-    # them, skip it.\n-    if ![runtest_file_p $runtests $test] {\n-\tcontinue\n-    }\n-\n-    set nshort [file tail [file dirname $test]]/[file tail $test]\n-\n-    foreach flags $DEBUG_TORTURE_OPTIONS {\n-\tset doit 1\n-\tif { [string match {*/debug-[126].c} \"$nshort\"] \\\n-\t\t&& [string match \"*1\" [lindex \"$flags\" 0] ] } { \n-\t    set doit 0\n-\t}\n-\n-# High optimization can remove the variable whose existence is tested.\n-# Dwarf debugging with commentary (-dA) preserves the symbol name in the\n-# assembler output, but stabs debugging does not.\n-# http://gcc.gnu.org/ml/gcc-regression/2003-04/msg00095.html\n-\tif { [string match {*/debug-[12].c} \"$nshort\"] \\\n-\t\t&& [string match \"*O3*\" \"$flags\"] \\\n-\t\t&& ( [string match \"*coff*\" \"$flags\"] \\\n-\t\t     || [string match \"*stabs*\" \"$flags\"] ) } {\n-\t    set doit 0\n-\t}\n-\n-\tif { $doit } {\n-\t    verbose -log \"Testing $nshort, $flags\" 1\n-\t    dg-test $test $flags \"\"\n-\t}\n-    }\n-}\n+gcc-dg-debug-runtest gcc_target_compile trivial.c \\\n+    [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]]\n \n # All done.\n dg-finish"}, {"sha": "241710c91b11b045d367f36ed1625f635d9f106d", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbba3092cd8c5273ecb36017cc6c4b059f5c7b3/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbba3092cd8c5273ecb36017cc6c4b059f5c7b3/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=7cbba3092cd8c5273ecb36017cc6c4b059f5c7b3", "patch": "@@ -189,3 +189,64 @@ proc gcc-dg-runtest { testcases default-extra-flags } {\n \t}\n     }\n }\n+\n+proc gcc-dg-debug-runtest { target_compile trivial testcases } {\n+    global srcdir subdir\n+\n+    if ![info exists DEBUG_TORTURE_OPTIONS] {\n+\tset DEBUG_TORTURE_OPTIONS \"\"\n+\tforeach type {-gdwarf-2 -gstabs -gstabs+ -gxcoff -gxcoff+ -gcoff} {\n+\t    set comp_output [$target_compile \\\n+\t\t    \"$srcdir/$subdir/$trivial\" \"trivial.S\" assembly \\\n+\t\t    \"additional_flags=$type\"]\n+\t    if { ! [string match \"*: unknown or unsupported -g option*\" \\\n+\t\t    $comp_output] } {\n+\t\tforeach level {1 \"\" 3} {\n+\t\t    lappend DEBUG_TORTURE_OPTIONS [list \"${type}${level}\"]\n+\t\t    foreach opt { -O2 -O3 } {\n+\t\t\tlappend DEBUG_TORTURE_OPTIONS \\\n+\t\t\t\t[list \"${type}${level}\" \"$opt\" ]\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+    verbose -log \"Using options $DEBUG_TORTURE_OPTIONS\"\n+\n+    global runtests\n+\n+    foreach test $testcases {\n+\t# If we're only testing specific files and this isn't one of \n+\t# them, skip it.\n+\tif ![runtest_file_p $runtests $test] {\n+\t    continue\n+\t}\n+\n+\tset nshort [file tail [file dirname $test]]/[file tail $test]\n+\n+\tforeach flags $DEBUG_TORTURE_OPTIONS {\n+\t    set doit 1\n+\t    if { [string match {*/debug-[126].c} \"$nshort\"] \\\n+\t\t    && [string match \"*1\" [lindex \"$flags\" 0] ] } { \n+\t\tset doit 0\n+\t    }\n+\n+    # High optimization can remove the variable whose existence is tested.\n+    # Dwarf debugging with commentary (-dA) preserves the symbol name in the\n+    # assembler output, but stabs debugging does not.\n+    # http://gcc.gnu.org/ml/gcc-regression/2003-04/msg00095.html\n+\t    if { [string match {*/debug-[12].c} \"$nshort\"] \\\n+\t\t    && [string match \"*O3*\" \"$flags\"] \\\n+\t\t    && ( [string match \"*coff*\" \"$flags\"] \\\n+\t\t\t || [string match \"*stabs*\" \"$flags\"] ) } {\n+\t\tset doit 0\n+\t    }\n+\n+\t    if { $doit } {\n+\t\tverbose -log \"Testing $nshort, $flags\" 1\n+\t\tdg-test $test $flags \"\"\n+\t    }\n+\t}\n+    }\n+}"}]}