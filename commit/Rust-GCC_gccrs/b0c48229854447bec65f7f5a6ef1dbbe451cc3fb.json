{"sha": "b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBjNDgyMjk4NTQ0NDdiZWM2NWY3ZjVhNmVmMWRiYmU0NTFjYzNmYg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-03-29T21:46:27Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-03-29T21:46:27Z"}, "message": "Makefile.in (convert.o, [...]): Update.\n\n\t* Makefile.in (convert.o, calls.o, expmed.o): Update.\n\t* attribs.c (handle_mode_attribute, handle_vector_size_attribute):\n\tUse new hooks.\n\t* builtin-types.def (BT_PTRMODE): Update.\n\t* c-common.c (type_for_size): Rename c_common_type_for_size.\n\t(type_for_mode): Similarly.\n\t(shorten_compare, pointer_int_sum, c_common_nodes_and_builtins):\n\tUse new hook.\n\t* c-bommon.h (c_common_type_for_size, c_common_type_for_mode): New.\n\t* c-decl.c (finish_enum, build_enumerator): Use new hooks.\n\t* c-lang.c (LANG_HOOKS_TYPE_FOR_MODE, LANG_HOOKS_TYPE_FOR_SIZE):\n\tRedefine.\n\t* c-typeck.c (common_type, comptypes, default_conversion):\n\tUse new hooks.\n\t* calls.c: Include langhooks.h.\n\t(emit_library_call_value_1): Use new hooks.  Avoid redundant\n\tcalls.\n\t* convert.c: Include langhooks.h\n\t(convert_to_pointer, convert_to_integer): Use new hooks.\n\t* except.c (init_eh): Similarly.\n\t* expmed.c: Include langhooks.h.\n\t(expand_mult_add): Use new hooks.\n\t* expr.c (store_expr, store_constructor, expand_expr, do_jump,\n\ttry_casesi): Similarly.\n\t* fold-const.c (optimize_bit_field_compare, make_range,\n\tdecode_field_reference, fold_truthop, fold): Similarly.\n\t* function.c (assign_stack_local_1, assign_stack_temp_for_type,\n\tput_var_into_stack): Similarly.\n\t* langhooks-def.h (LANG_HOOKS_TYPE_FOR_MODE,\n\tLANG_HOOKS_TYPE_FOR_SIZE): New.\n\t(LANG_HOOKS_TYPES_INITIALIZER): Update.\n\t* langhooks.h (lang_hooks_for_types): New hooks.\n\t* stmt.c (expand_decl_cleanup, emit_case_nodes): Use new hooks.\n\t* tree.c (get_unwidened, get_narrower): Similarly.\n\t* tree.h (type_for_mode, type_for_size): Remove.\n\t* varasm.c (force_const_mem): Use new hooks.\nada:\n\t* gigi.h (type_for_size, type_for_mode): Rename.\n\t* misc.c (LANG_HOOKS_TYPE_FOR_MODE, LANG_HOOKS_TYPE_FOR_SIZE):\n\tRedefine.\n\t* trans.c (tree_transform): Update.\n\t* utils.c (gnat_init_decl_processing, init_gigi_decls,\n\tbuiltin_function, float_type_for_size, signed_or_unsigned_type,\n\tbuild_vms_descriptor, unchecked_convert): Update.\n\t(type_for_mode, type_for_size): Rename.\n\t* utils2.c (nonbinary_modular_operation): Update.\ncp:\n\t* cp-lang.c (LANG_HOOKS_TYPE_FOR_MODE, LANG_HOOKS_TYPE_FOR_SIZE):\n\tRedefine.\n\t* cvt.c (cp_convert_to_pointer, type_promotes_to): Use new hooks.\n\t* decl.c (finish_enum): Similarly.\n\t* error.c (dump_type): Similarly.\n\t* lex.c (cxx_init): Similarly.\n\t* mangle.c (write_builtin_type): Similarly.\n\t* typeck.c (comptypes): Similarly.\nf:\n\t* com.c (LANG_HOOKS_TYPE_FOR_MODE, LANG_HOOKS_TYPE_FOR_SIZE):\n\tRedefine.\n\t(type_for_mode, type_for_size): Rename.\n\t(signed_or_unsigned_type, signed_type, truthvalue_conversion,\n\tunsigned_type):\tUse new hooks.\njava:\n\t* Make-lang.in (builtins.o): Update.\n\t* boehm.c (get_boehm_type_descriptor): Update.\n\t* builtins.c: Include langhooks.h.\n\t* decl.c (java_init_decl_processing): Update.\n\t* java-tree.h (java_type_for_mode, java_type_for_size): New.\n\t* lang.c (LANG_HOOKS_TYPE_FOR_MODE, LANG_HOOKS_TYPE_FOR_SIaZE):\n\tRedefine.\n\t* typeck.c (type_for_mode, type_for_size): Update.\nobjc:\n\t* objc-act.c (handle_impent): Update.\n\t* objc-lang.c (LANG_HOOKS_TYPE_FOR_MODE, LANG_HOOKS_TYPE_FOR_SIaZE):\n\tRedefine.\n\nFrom-SVN: r51571", "tree": {"sha": "e8a67fcfa0ef3614bf38b6f84422372f82aa6004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8a67fcfa0ef3614bf38b6f84422372f82aa6004"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/comments", "author": null, "committer": null, "parents": [{"sha": "d52e4867caba3a5833cc2c90ac8df8fe7ccd7b76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d52e4867caba3a5833cc2c90ac8df8fe7ccd7b76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d52e4867caba3a5833cc2c90ac8df8fe7ccd7b76"}], "stats": {"total": 453, "additions": 293, "deletions": 160}, "files": [{"sha": "1b85c02f6c84246efa7b1b0c310a0862c21c835a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -1,3 +1,47 @@\n+2002-03-29  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* Makefile.in (convert.o, calls.o, expmed.o): Update.\n+\t* attribs.c (handle_mode_attribute, handle_vector_size_attribute):\n+\tUse new hooks.\n+\t* builtin-types.def (BT_PTRMODE): Update.\n+\t* c-common.c (type_for_size): Rename c_common_type_for_size.\n+\t(type_for_mode): Similarly.\n+\t(shorten_compare, pointer_int_sum, c_common_nodes_and_builtins):\n+\tUse new hook.\n+\t* c-bommon.h (c_common_type_for_size, c_common_type_for_mode): New.\n+\t* c-decl.c (finish_enum, build_enumerator): Use new hooks.\n+\t* c-lang.c (LANG_HOOKS_TYPE_FOR_MODE, LANG_HOOKS_TYPE_FOR_SIZE):\n+\tRedefine.\n+\t* c-typeck.c (common_type, comptypes, default_conversion):\n+\tUse new hooks.\n+\t* calls.c: Include langhooks.h.\n+\t(emit_library_call_value_1): Use new hooks.  Avoid redundant\n+\tcalls.\n+\t* convert.c: Include langhooks.h\n+\t(convert_to_pointer, convert_to_integer): Use new hooks.\n+\t* except.c (init_eh): Similarly.\n+\t* expmed.c: Include langhooks.h.\n+\t(expand_mult_add): Use new hooks.\n+\t* expr.c (store_expr, store_constructor, expand_expr, do_jump,\n+\ttry_casesi): Similarly.\n+\t* fold-const.c (optimize_bit_field_compare, make_range,\n+\tdecode_field_reference, fold_truthop, fold): Similarly.\n+\t* function.c (assign_stack_local_1, assign_stack_temp_for_type,\n+\tput_var_into_stack): Similarly.\n+\t* langhooks-def.h (LANG_HOOKS_TYPE_FOR_MODE,\n+\tLANG_HOOKS_TYPE_FOR_SIZE): New.\n+\t(LANG_HOOKS_TYPES_INITIALIZER): Update.\n+\t* langhooks.h (lang_hooks_for_types): New hooks.\n+\t* stmt.c (expand_decl_cleanup, emit_case_nodes): Use new hooks.\n+\t* tree.c (get_unwidened, get_narrower): Similarly.\n+\t* tree.h (type_for_mode, type_for_size): Remove.\n+\t* varasm.c (force_const_mem): Use new hooks.\n+\t* utils2.c (nonbinary_modular_operation): Update.\n+objc:\n+\t* objc-act.c (handle_impent): Update.\n+\t* objc-lang.c (LANG_HOOKS_TYPE_FOR_MODE, LANG_HOOKS_TYPE_FOR_SIaZE):\n+\tRedefine.\n+\n 2002-03-29  Steve Ellcey  <sje@cup.hp.com>\n \n \t* config/ia64/ia64.md (*ptr_extend_plus_1, *ptr_extend_plus_2): New."}, {"sha": "23fba7f2071c5a131acd294a2be0fa671670d4b8", "filename": "gcc/Makefile.in", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -1319,7 +1319,8 @@ prefix.o: prefix.c $(CONFIG_H) $(SYSTEM_H) Makefile prefix.h\n \t-DPREFIX=\\\"$(prefix)\\\" \\\n \t  -c $(srcdir)/prefix.c $(OUTPUT_OPTION)\n \n-convert.o: convert.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) flags.h convert.h toplev.h\n+convert.o: convert.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) flags.h convert.h \\\n+   toplev.h langhooks.h\n \n langhooks.o : langhooks.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) toplev.h \\\n    tree-inline.h $(RTL_H) insn-config.h integrate.h langhooks.h \\\n@@ -1395,11 +1396,12 @@ builtins.o : builtins.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n    $(TARGET_H) function.h $(REGS_H) $(EXPR_H) $(OPTABS_H) insn-config.h \\\n    $(RECOG_H) output.h typeclass.h hard-reg-set.h toplev.h hard-reg-set.h \\\n    except.h $(TM_P_H) $(PREDICT_H) libfuncs.h\n-calls.o : calls.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h $(EXPR_H) \\\n+calls.o : calls.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n+   $(EXPR_H) langhooks.h \\\n    libfuncs.h $(REGS_H) toplev.h output.h function.h $(TIMEVAR_H) $(TM_P_H)\n expmed.o : expmed.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h  \\\n    insn-config.h $(EXPR_H) $(OPTABS_H) $(RECOG_H) real.h \\\n-   toplev.h $(TM_P_H)\n+   toplev.h $(TM_P_H) langhooks.h\n explow.o : explow.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n    hard-reg-set.h insn-config.h $(EXPR_H) $(OPTABS_H) $(RECOG_H) \\\n    toplev.h function.h ggc.h $(TM_P_H)"}, {"sha": "0223eac3c591348e864cc893afb0238971759f04", "filename": "gcc/ada/gigi.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fada%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fada%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgigi.h?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -423,11 +423,11 @@ extern void gnat_init_gcc_eh\t\tPARAMS ((void));\n /* Return an integer type with the number of bits of precision given by  \n    PRECISION.  UNSIGNEDP is nonzero if the type is unsigned; otherwise\n    it is a signed type.  */\n-extern tree type_for_size\t\tPARAMS ((unsigned, int));\n+extern tree gnat_type_for_size\t\tPARAMS ((unsigned, int));\n \n /* Return a data type that has machine mode MODE.  UNSIGNEDP selects\n    an unsigned type; otherwise a signed type is returned.  */\n-extern tree type_for_mode\t\tPARAMS ((enum machine_mode, int));\n+extern tree gnat_type_for_mode\t\tPARAMS ((enum machine_mode, int));\n \n /* Return the unsigned version of a TYPE_NODE, a scalar type.  */\n extern tree unsigned_type\t\tPARAMS ((tree));"}, {"sha": "78222c2f8d74017df6c747c2d6100b5f94624207", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -118,6 +118,10 @@ static rtx gnat_expand_expr\t\tPARAMS ((tree, rtx, enum machine_mode,\n #define LANG_HOOKS_PRINT_TYPE\t\tgnat_print_type\n #undef LANG_HOOKS_DECL_PRINTABLE_NAME\n #define LANG_HOOKS_DECL_PRINTABLE_NAME\tgnat_printable_name\n+#undef LANG_HOOKS_TYPE_FOR_MODE\n+#define LANG_HOOKS_TYPE_FOR_MODE\tgnat_type_for_mode\n+#undef LANG_HOOKS_TYPE_FOR_SIZE\n+#define LANG_HOOKS_TYPE_FOR_SIZE\tgnat_type_for_size\n \n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n "}, {"sha": "c943a0092257f185186ed118b7e22516fb5413df", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -2994,7 +2994,7 @@ tree_transform (gnat_node)\n \t\t  gnu_actual\n \t\t    = unchecked_convert\n \t\t      (DECL_ARG_TYPE (get_gnu_tree (gnat_formal)),\n-\t\t       convert (type_for_size\n+\t\t       convert (gnat_type_for_size\n \t\t\t\t(tree_low_cst (gnu_actual_size, 1), 1),\n \t\t\t\tinteger_zero_node));\n \t\telse"}, {"sha": "d01e7d84a4d22055fc205e117a2750d0a66749fa", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 30, "deletions": 27, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -499,7 +499,7 @@ gnat_init_decl_processing ()\n   /* In Ada, we use a signed type for SIZETYPE.  Use the signed type\n      corresponding to the size of ptr_mode.  Make this here since we need\n      this before we can expand the GNAT types.  */\n-  set_sizetype (type_for_size (GET_MODE_BITSIZE (ptr_mode), 0));\n+  set_sizetype (gnat_type_for_size (GET_MODE_BITSIZE (ptr_mode), 0));\n   build_common_tree_nodes_2 (0);\n \n   pushdecl (build_decl (TYPE_DECL, get_identifier (SIZE_TYPE), sizetype));\n@@ -543,7 +543,7 @@ init_gigi_decls (long_long_float_type, exception_type)\n \n   except_type_node = TREE_TYPE (exception_type);\n \n-  unsigned_type_node = type_for_size (INT_TYPE_SIZE, 1);\n+  unsigned_type_node = gnat_type_for_size (INT_TYPE_SIZE, 1);\n   pushdecl (build_decl (TYPE_DECL, get_identifier (\"unsigned int\"),\n \t\t\tunsigned_type_node));\n \n@@ -579,7 +579,7 @@ init_gigi_decls (long_long_float_type, exception_type)\n \n   /* Make the types and functions used for exception processing.    */\n   jmpbuf_type\n-    = build_array_type (type_for_mode (Pmode, 0),\n+    = build_array_type (gnat_type_for_mode (Pmode, 0),\n \t\t\tbuild_index_type (build_int_2 (5, 0)));\n   pushdecl (build_decl (TYPE_DECL, get_identifier (\"JMPBUF_T\"), jmpbuf_type));\n   jmpbuf_ptr_type = build_pointer_type (jmpbuf_type);\n@@ -1954,7 +1954,7 @@ builtin_function (name, type, function_code, class, library_name)\n    it is a signed type.  */\n \n tree\n-type_for_size (precision, unsignedp)\n+gnat_type_for_size (precision, unsignedp)\n      unsigned precision;\n      int unsignedp;\n {\n@@ -2015,14 +2015,14 @@ float_type_for_size (precision, mode)\n    an unsigned type; otherwise a signed type is returned.  */\n \n tree\n-type_for_mode (mode, unsignedp)\n+gnat_type_for_mode (mode, unsignedp)\n      enum machine_mode mode;\n      int unsignedp;\n {\n   if (GET_MODE_CLASS (mode) == MODE_FLOAT)\n     return float_type_for_size (GET_MODE_BITSIZE (mode), mode);\n   else\n-    return type_for_size (GET_MODE_BITSIZE (mode), unsignedp);\n+    return gnat_type_for_size (GET_MODE_BITSIZE (mode), unsignedp);\n }\n \n /* Return the unsigned version of a TYPE_NODE, a scalar type.  */\n@@ -2031,7 +2031,7 @@ tree\n unsigned_type (type_node)\n      tree type_node;\n {\n-  tree type = type_for_size (TYPE_PRECISION (type_node), 1);\n+  tree type = gnat_type_for_size (TYPE_PRECISION (type_node), 1);\n \n   if (TREE_CODE (type_node) == INTEGER_TYPE && TYPE_MODULAR_P (type_node))\n     {\n@@ -2055,7 +2055,7 @@ tree\n signed_type (type_node)\n      tree type_node;\n {\n-  tree type = type_for_size (TYPE_PRECISION (type_node), 0);\n+  tree type = gnat_type_for_size (TYPE_PRECISION (type_node), 0);\n \n   if (TREE_CODE (type_node) == INTEGER_TYPE && TYPE_MODULAR_P (type_node))\n     {\n@@ -2084,7 +2084,7 @@ signed_or_unsigned_type (unsignedp, type)\n   if (! INTEGRAL_TYPE_P (type) || TREE_UNSIGNED (type) == unsignedp)\n     return type;\n   else\n-    return type_for_size (TYPE_PRECISION (type), unsignedp);\n+    return gnat_type_for_size (TYPE_PRECISION (type), unsignedp);\n }\n \f\n /* EXP is an expression for the size of an object.  If this size contains\n@@ -2401,14 +2401,16 @@ build_vms_descriptor (type, mech, gnat_entity)\n   field_list\n     = chainon (field_list,\n \t       make_descriptor_field\n-\t       (\"LENGTH\", type_for_size (16, 1), record_type,\n+\t       (\"LENGTH\", gnat_type_for_size (16, 1), record_type,\n \t\tsize_in_bytes (mech == By_Descriptor_A ? inner_type : type)));\n \n   field_list = chainon (field_list,\n-\t\t\tmake_descriptor_field (\"DTYPE\", type_for_size (8, 1),\n+\t\t\tmake_descriptor_field (\"DTYPE\",\n+\t\t\t\t\t       gnat_type_for_size (8, 1),\n \t\t\t\t\t       record_type, size_int (dtype)));\n   field_list = chainon (field_list,\n-\t\t\tmake_descriptor_field (\"CLASS\", type_for_size (8, 1),\n+\t\t\tmake_descriptor_field (\"CLASS\",\n+\t\t\t\t\t       gnat_type_for_size (8, 1),\n \t\t\t\t\t       record_type, size_int (class)));\n \n   field_list\n@@ -2431,13 +2433,13 @@ build_vms_descriptor (type, mech, gnat_entity)\n       field_list\n \t= chainon (field_list,\n \t\t   make_descriptor_field \n-\t\t   (\"SB_L1\", type_for_size (32, 1), record_type,\n+\t\t   (\"SB_L1\", gnat_type_for_size (32, 1), record_type,\n \t\t    TREE_CODE (type) == ARRAY_TYPE\n \t\t    ? TYPE_MIN_VALUE (TYPE_DOMAIN (type)) : size_zero_node));\n       field_list\n \t= chainon (field_list,\n \t\t   make_descriptor_field\n-\t\t   (\"SB_L2\", type_for_size (32, 1), record_type,\n+\t\t   (\"SB_L2\", gnat_type_for_size (32, 1), record_type,\n \t\t    TREE_CODE (type) == ARRAY_TYPE\n \t\t    ? TYPE_MAX_VALUE (TYPE_DOMAIN (type)) : size_zero_node));\n       break;\n@@ -2446,20 +2448,20 @@ build_vms_descriptor (type, mech, gnat_entity)\n     case By_Descriptor_NCA:\n       field_list = chainon (field_list,\n \t\t\t    make_descriptor_field (\"SCALE\",\n-\t\t\t\t\t\t   type_for_size (8, 1),\n+\t\t\t\t\t\t   gnat_type_for_size (8, 1),\n \t\t\t\t\t\t   record_type,\n \t\t\t\t\t\t   size_zero_node));\n \n       field_list = chainon (field_list,\n \t\t\t    make_descriptor_field (\"DIGITS\",\n-\t\t\t\t\t\t   type_for_size (8, 1),\n+\t\t\t\t\t\t   gnat_type_for_size (8, 1),\n \t\t\t\t\t\t   record_type,\n \t\t\t\t\t\t   size_zero_node));\n \n       field_list\n \t= chainon (field_list,\n \t\t   make_descriptor_field\n-\t\t   (\"AFLAGS\", type_for_size (8, 1), record_type,\n+\t\t   (\"AFLAGS\", gnat_type_for_size (8, 1), record_type,\n \t\t    size_int (mech == By_Descriptor_NCA\n \t\t\t      ? 0\n \t\t\t      /* Set FL_COLUMN, FL_COEFF, and FL_BOUNDS.  */\n@@ -2469,13 +2471,13 @@ build_vms_descriptor (type, mech, gnat_entity)\n \n       field_list = chainon (field_list,\n \t\t\t    make_descriptor_field (\"DIMCT\",\n-\t\t\t\t\t\t   type_for_size (8, 1),\n+\t\t\t\t\t\t   gnat_type_for_size (8, 1),\n \t\t\t\t\t\t   record_type,\n \t\t\t\t\t\t   size_int (ndim)));\n \n       field_list = chainon (field_list,\n \t\t\t    make_descriptor_field (\"ARSIZE\",\n-\t\t\t\t\t\t   type_for_size (32, 1),\n+\t\t\t\t\t\t   gnat_type_for_size (32, 1),\n \t\t\t\t\t\t   record_type,\n \t\t\t\t\t\t   size_in_bytes (type)));\n \n@@ -2507,11 +2509,11 @@ build_vms_descriptor (type, mech, gnat_entity)\n \n \t  fname[0] = (mech == By_Descriptor_NCA ? 'S' : 'M');\n \t  fname[1] = '0' + i, fname[2] = 0;\n-\t  field_list = chainon (field_list,\n-\t\t\t\tmake_descriptor_field (fname,\n-\t\t\t\t\t\t       type_for_size (32, 1),\n-\t\t\t\t\t\t       record_type,\n-\t\t\t\t\t\t       idx_length));\n+\t  field_list\n+\t    = chainon (field_list,\n+\t\t       make_descriptor_field (fname,\n+\t\t\t\t\t      gnat_type_for_size (32, 1),\n+\t\t\t\t\t      record_type, idx_length));\n \n \t  if (mech == By_Descriptor_NCA)\n \t    tem = idx_length;\n@@ -2526,14 +2528,14 @@ build_vms_descriptor (type, mech, gnat_entity)\n \t  field_list\n \t    = chainon (field_list,\n \t\t       make_descriptor_field\n-\t\t       (fname, type_for_size (32, 1), record_type,\n+\t\t       (fname, gnat_type_for_size (32, 1), record_type,\n \t\t\tTYPE_MIN_VALUE (idx_arr[i])));\n \n \t  fname[0] = 'U';\n \t  field_list\n \t    = chainon (field_list,\n \t\t       make_descriptor_field\n-\t\t       (fname, type_for_size (32, 1), record_type,\n+\t\t       (fname, gnat_type_for_size (32, 1), record_type,\n \t\t\tTYPE_MAX_VALUE (idx_arr[i])));\n \t}\n       break;\n@@ -3348,7 +3350,8 @@ unchecked_convert (type, expr)\n \t\t\t\t0))\n       && ! (TREE_UNSIGNED (type) && TREE_UNSIGNED (etype)))\n     {\n-      tree base_type = type_for_mode (TYPE_MODE (type), TREE_UNSIGNED (type));\n+      tree base_type = gnat_type_for_mode (TYPE_MODE (type),\n+\t\t\t\t\t   TREE_UNSIGNED (type));\n       tree shift_expr\n \t= convert (base_type,\n \t\t   size_binop (MINUS_EXPR,"}, {"sha": "2872474bac82f590572c17301b7dd3a4168c92c3", "filename": "gcc/ada/utils2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fada%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fada%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils2.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -511,7 +511,7 @@ nonbinary_modular_operation (op_code, type, lhs, rhs)\n       || TREE_UNSIGNED (op_type) != unsignedp)\n     {\n       /* Copy the node so we ensure it can be modified to make it modular.  */\n-      op_type = copy_node (type_for_size (precision, unsignedp));\n+      op_type = copy_node (gnat_type_for_size (precision, unsignedp));\n       modulus = convert (op_type, modulus);\n       TYPE_MODULUS (op_type) = modulus;\n       TYPE_MODULAR_P (op_type) = 1;\n@@ -527,7 +527,7 @@ nonbinary_modular_operation (op_code, type, lhs, rhs)\n      possible size.  */\n   if (op_code == MULT_EXPR)\n     {\n-      tree div_type = copy_node (type_for_size (needed_precision, 1));\n+      tree div_type = copy_node (gnat_type_for_size (needed_precision, 1));\n       modulus = convert (div_type, modulus);\n       TYPE_MODULUS (div_type) = modulus;\n       TYPE_MODULAR_P (div_type) = 1;"}, {"sha": "74786a543768f5681476efd86d4b4c0fc57a4cdf", "filename": "gcc/attribs.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -835,8 +835,8 @@ handle_mode_attribute (node, name, args, flags, no_add_attrs)\n \n       if (mode == VOIDmode)\n \terror (\"unknown machine mode `%s'\", p);\n-      else if (0 == (typefm = type_for_mode (mode,\n-\t\t\t\t\t     TREE_UNSIGNED (type))))\n+      else if (0 == (typefm = (*lang_hooks.types.type_for_mode)\n+\t\t     (mode, TREE_UNSIGNED (type))))\n \terror (\"no data type for mode `%s'\", p);\n       else\n \t*node = typefm;\n@@ -1343,7 +1343,8 @@ handle_vector_size_attribute (node, name, args, flags, no_add_attrs)\n     {\n       tree index, array, rt;\n \n-      new_type = type_for_mode (new_mode, TREE_UNSIGNED (type));\n+      new_type = (*lang_hooks.types.type_for_mode) (new_mode,\n+\t\t\t\t\t\t    TREE_UNSIGNED (type));\n \n       if (!new_type)\n \t{"}, {"sha": "7a33ffd78945b1592216a605082313c0efabdcf6", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -73,7 +73,7 @@ DEF_PRIMITIVE_TYPE (BT_COMPLEX_LONG_DOUBLE, complex_long_double_type_node)\n \n DEF_PRIMITIVE_TYPE (BT_PTR, ptr_type_node)\n DEF_PRIMITIVE_TYPE (BT_CONST_PTR, const_ptr_type_node)\n-DEF_PRIMITIVE_TYPE (BT_PTRMODE, type_for_mode (ptr_mode, 0))\n+DEF_PRIMITIVE_TYPE (BT_PTRMODE, (*lang_hooks.types.type_for_mode)(ptr_mode, 0))\n DEF_PRIMITIVE_TYPE (BT_SIZE, c_size_type_node)\n DEF_PRIMITIVE_TYPE (BT_STRING, string_type_node)\n DEF_PRIMITIVE_TYPE (BT_CONST_STRING, const_string_type_node)"}, {"sha": "cccd2bc8cebdc8093f006f06662e11e1cfb368fe", "filename": "gcc/c-common.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -1302,7 +1302,7 @@ check_case_value (value)\n    that is unsigned if UNSIGNEDP is nonzero, otherwise signed.  */\n \n tree\n-type_for_size (bits, unsignedp)\n+c_common_type_for_size (bits, unsignedp)\n      unsigned bits;\n      int unsignedp;\n {\n@@ -1346,7 +1346,7 @@ type_for_size (bits, unsignedp)\n    then UNSIGNEDP selects between signed and unsigned types.  */\n \n tree\n-type_for_mode (mode, unsignedp)\n+c_common_type_for_mode (mode, unsignedp)\n      enum machine_mode mode;\n      int unsignedp;\n {\n@@ -1761,7 +1761,7 @@ shorten_compare (op0_ptr, op1_ptr, restype_ptr, rescode_ptr)\n \t values from it's underlying integral type, not the enumerated\n \t type itself.  */\n       if (TREE_CODE (type) == ENUMERAL_TYPE)\n-\ttype = type_for_size (TYPE_PRECISION (type), unsignedp0);\n+\ttype = c_common_type_for_size (TYPE_PRECISION (type), unsignedp0);\n \n       maxval = TYPE_MAX_VALUE (type);\n       minval = TYPE_MIN_VALUE (type);\n@@ -2065,8 +2065,8 @@ pointer_int_sum (resultcode, ptrop, intop)\n \n   if (TYPE_PRECISION (TREE_TYPE (intop)) != TYPE_PRECISION (sizetype)\n       || TREE_UNSIGNED (TREE_TYPE (intop)) != TREE_UNSIGNED (sizetype))\n-    intop = convert (type_for_size (TYPE_PRECISION (sizetype), \n-\t\t\t\t    TREE_UNSIGNED (sizetype)), intop);\n+    intop = convert (c_common_type_for_size (TYPE_PRECISION (sizetype), \n+\t\t\t\t\t     TREE_UNSIGNED (sizetype)), intop);\n \n   /* Replace the integer argument with a suitable product by the object size.\n      Do this multiplication as signed, then convert to the appropriate\n@@ -2577,7 +2577,8 @@ c_common_nodes_and_builtins ()\n   record_builtin_type (RID_MAX, \"signed char\", signed_char_type_node);\n   record_builtin_type (RID_MAX, \"unsigned char\", unsigned_char_type_node);\n \n-  /* These are types that type_for_size and type_for_mode use.  */\n+  /* These are types that c_common_type_for_size and\n+     c_common_type_for_mode use.  */\n   (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL, NULL_TREE,\n \t\t\t\t\t    intQI_type_node));\n   (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL, NULL_TREE,"}, {"sha": "823b08137d2973c4ee09fd135d8fc00d324e28d7", "filename": "gcc/c-common.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -507,6 +507,9 @@ extern tree handle_format_attribute\t\tPARAMS ((tree *, tree, tree,\n extern tree handle_format_arg_attribute\t\tPARAMS ((tree *, tree, tree,\n \t\t\t\t\t\t\t int, bool *));\n extern void c_common_insert_default_attributes\tPARAMS ((tree));\n+extern tree c_common_type_for_mode\t\tPARAMS ((enum machine_mode,\n+\t\t\t\t\t\t\t int));\n+extern tree c_common_type_for_size\t\tPARAMS ((unsigned int, int));\n extern void c_apply_type_quals_to_decl\t\tPARAMS ((int, tree));\n extern tree c_sizeof\t\t\t\tPARAMS ((tree));\n extern tree c_alignof\t\t\t\tPARAMS ((tree));"}, {"sha": "c7986218aa8a2abc330a33e82dee3ce47209bf3b", "filename": "gcc/c-decl.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -5844,7 +5844,7 @@ finish_enum (enumtype, values, attributes)\n \t\t   min_precision (maxnode, unsign));\n   if (TYPE_PACKED (enumtype) || precision > TYPE_PRECISION (integer_type_node))\n     {\n-      tree narrowest = type_for_size (precision, unsign);\n+      tree narrowest = c_common_type_for_size (precision, unsign);\n       if (narrowest == 0)\n \t{\n \t  warning (\"enumeration values exceed range of largest integer\");\n@@ -5857,7 +5857,7 @@ finish_enum (enumtype, values, attributes)\n     precision = TYPE_PRECISION (integer_type_node);\n \n   if (precision == TYPE_PRECISION (integer_type_node))\n-    enum_value_type = type_for_size (precision, 0);\n+    enum_value_type = c_common_type_for_size (precision, 0);\n   else\n     enum_value_type = enumtype;\n \n@@ -5985,10 +5985,11 @@ build_enumerator (name, value)\n   /* Now create a declaration for the enum value name.  */\n \n   type = TREE_TYPE (value);\n-  type = type_for_size (MAX (TYPE_PRECISION (type),\n-\t\t\t     TYPE_PRECISION (integer_type_node)),\n-\t\t\t(TYPE_PRECISION (type) >= TYPE_PRECISION (integer_type_node)\n-\t\t\t && TREE_UNSIGNED (type)));\n+  type = c_common_type_for_size (MAX (TYPE_PRECISION (type),\n+\t\t\t\t      TYPE_PRECISION (integer_type_node)),\n+\t\t\t\t (TYPE_PRECISION (type)\n+\t\t\t\t  >= TYPE_PRECISION (integer_type_node)\n+\t\t\t\t  && TREE_UNSIGNED (type)));\n \n   decl = build_decl (CONST_DECL, name, type);\n   DECL_INITIAL (decl) = convert (type, value);"}, {"sha": "8e9516553a5dd9ac1ae11e04ed5a985ab9d5034b", "filename": "gcc/c-lang.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -80,6 +80,11 @@ static void c_post_options PARAMS ((void));\n #define LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING \\\n   c_convert_parm_for_inlining\n \n+#undef LANG_HOOKS_TYPE_FOR_MODE\n+#define LANG_HOOKS_TYPE_FOR_MODE c_common_type_for_mode\n+#undef LANG_HOOKS_TYPE_FOR_SIZE\n+#define LANG_HOOKS_TYPE_FOR_SIZE c_common_type_for_size\n+\n /* ### When changing hooks, consider if ObjC needs changing too!! ### */\n \n /* Each front end provides its own.  */"}, {"sha": "a4ba65764325d522fa560ab12d23bc4fa669f48a", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -216,9 +216,9 @@ common_type (t1, t2)\n   /* Treat an enum type as the unsigned integer type of the same width.  */\n \n   if (TREE_CODE (t1) == ENUMERAL_TYPE)\n-    t1 = type_for_size (TYPE_PRECISION (t1), 1);\n+    t1 = c_common_type_for_size (TYPE_PRECISION (t1), 1);\n   if (TREE_CODE (t2) == ENUMERAL_TYPE)\n-    t2 = type_for_size (TYPE_PRECISION (t2), 1);\n+    t2 = c_common_type_for_size (TYPE_PRECISION (t2), 1);\n \n   code1 = TREE_CODE (t1);\n   code2 = TREE_CODE (t2);\n@@ -465,9 +465,9 @@ comptypes (type1, type2)\n      signedness.  */\n \n   if (TREE_CODE (t1) == ENUMERAL_TYPE)\n-    t1 = type_for_size (TYPE_PRECISION (t1), TREE_UNSIGNED (t1));\n+    t1 = c_common_type_for_size (TYPE_PRECISION (t1), TREE_UNSIGNED (t1));\n   if (TREE_CODE (t2) == ENUMERAL_TYPE)\n-    t2 = type_for_size (TYPE_PRECISION (t2), TREE_UNSIGNED (t2));\n+    t2 = c_common_type_for_size (TYPE_PRECISION (t2), TREE_UNSIGNED (t2));\n \n   if (t1 == t2)\n     return 1;\n@@ -994,11 +994,11 @@ default_conversion (exp)\n      but convert wide enums to something wider.  */\n   if (code == ENUMERAL_TYPE)\n     {\n-      type = type_for_size (MAX (TYPE_PRECISION (type),\n-\t\t\t\t TYPE_PRECISION (integer_type_node)),\n-\t\t\t    ((TYPE_PRECISION (type)\n-\t\t\t      >= TYPE_PRECISION (integer_type_node))\n-\t\t\t     && TREE_UNSIGNED (type)));\n+      type = c_common_type_for_size (MAX (TYPE_PRECISION (type),\n+\t\t\t\t\t  TYPE_PRECISION (integer_type_node)),\n+\t\t\t\t     ((TYPE_PRECISION (type)\n+\t\t\t\t       >= TYPE_PRECISION (integer_type_node))\n+\t\t\t\t      && TREE_UNSIGNED (type)));\n \n       return convert (type, exp);\n     }"}, {"sha": "cbeb92c20aa3964713d7ad4150f145f4b5f24d6b", "filename": "gcc/calls.c", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -33,6 +33,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tm_p.h\"\n #include \"timevar.h\"\n #include \"sbitmap.h\"\n+#include \"langhooks.h\"\n \n #if !defined FUNCTION_OK_FOR_SIBCALL\n #define FUNCTION_OK_FOR_SIBCALL(DECL) 1\n@@ -3476,6 +3477,7 @@ emit_library_call_value_1 (retval, orgfun, value, fn_type, outmode, nargs, p)\n   int reg_parm_stack_space = 0;\n   int needed;\n   rtx before_call;\n+  tree tfom;\t\t\t/* type_for_mode (outmode, 0) */\n \n #ifdef REG_PARM_STACK_SPACE\n   /* Define the boundary of the register parm stack space that needs to be\n@@ -3537,27 +3539,31 @@ emit_library_call_value_1 (retval, orgfun, value, fn_type, outmode, nargs, p)\n \n   /* If this kind of value comes back in memory,\n      decide where in memory it should come back.  */\n-  if (outmode != VOIDmode && aggregate_value_p (type_for_mode (outmode, 0)))\n+  if (outmode != VOIDmode)\n     {\n+      tfom = (*lang_hooks.types.type_for_mode) (outmode, 0);\n+      if (aggregate_value_p (tfom))\n+\t{\n #ifdef PCC_STATIC_STRUCT_RETURN\n-      rtx pointer_reg\n-\t= hard_function_value (build_pointer_type (type_for_mode (outmode, 0)),\n-\t\t\t       0, 0);\n-      mem_value = gen_rtx_MEM (outmode, pointer_reg);\n-      pcc_struct_value = 1;\n-      if (value == 0)\n-\tvalue = gen_reg_rtx (outmode);\n+\t  rtx pointer_reg\n+\t    = hard_function_value (build_pointer_type (tfom), 0, 0);\n+\t  mem_value = gen_rtx_MEM (outmode, pointer_reg);\n+\t  pcc_struct_value = 1;\n+\t  if (value == 0)\n+\t    value = gen_reg_rtx (outmode);\n #else /* not PCC_STATIC_STRUCT_RETURN */\n-      struct_value_size = GET_MODE_SIZE (outmode);\n-      if (value != 0 && GET_CODE (value) == MEM)\n-\tmem_value = value;\n-      else\n-\tmem_value = assign_temp (type_for_mode (outmode, 0), 0, 1, 1);\n+\t  struct_value_size = GET_MODE_SIZE (outmode);\n+\t  if (value != 0 && GET_CODE (value) == MEM)\n+\t    mem_value = value;\n+\t  else\n+\t    mem_value = assign_temp (tfom, 0, 1, 1);\n #endif\n-\n-      /* This call returns a big structure.  */\n-      flags &= ~(ECF_CONST | ECF_PURE | ECF_LIBCALL_BLOCK);\n+\t  /* This call returns a big structure.  */\n+\t  flags &= ~(ECF_CONST | ECF_PURE | ECF_LIBCALL_BLOCK);\n+\t}\n     }\n+  else\n+    tfom = void_type_node;\n \n   /* ??? Unfinished: must pass the memory address as an argument.  */\n \n@@ -3670,12 +3676,13 @@ emit_library_call_value_1 (retval, orgfun, value, fn_type, outmode, nargs, p)\n \t    slot = val;\n \t  else if (must_copy)\n \t    {\n-\t      slot = assign_temp (type_for_mode (mode, 0), 0, 1, 1);\n+\t      slot = assign_temp ((*lang_hooks.types.type_for_mode) (mode, 0),\n+\t\t\t\t  0, 1, 1);\n \t      emit_move_insn (slot, val);\n \t    }\n \t  else\n \t    {\n-\t      tree type = type_for_mode (mode, 0);\n+\t      tree type = (*lang_hooks.types.type_for_mode) (mode, 0);\n \n \t      slot = gen_rtx_MEM (mode,\n \t\t\t\t  expand_expr (build1 (ADDR_EXPR,\n@@ -4042,8 +4049,7 @@ emit_library_call_value_1 (retval, orgfun, value, fn_type, outmode, nargs, p)\n \n   emit_call_1 (fun,\n \t       get_identifier (XSTR (orgfun, 0)),\n-\t       build_function_type (outmode == VOIDmode ? void_type_node\n-\t\t\t\t    : type_for_mode (outmode, 0), NULL_TREE),\n+\t       build_function_type (tfom, NULL_TREE),\n \t       original_args_size.constant, args_size.constant,\n \t       struct_value_size,\n \t       FUNCTION_ARG (args_so_far, VOIDmode, void_type_node, 1),"}, {"sha": "25aae573caccb6438f4c0fe4adfadbb3dabd1714", "filename": "gcc/convert.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -29,6 +29,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"flags.h\"\n #include \"convert.h\"\n #include \"toplev.h\"\n+#include \"langhooks.h\"\n \n /* Convert EXPR to some pointer or reference type TYPE.\n \n@@ -61,7 +62,8 @@ convert_to_pointer (type, expr)\n \n       return\n \tconvert_to_pointer (type,\n-\t\t\t    convert (type_for_size (POINTER_SIZE, 0), expr));\n+\t\t\t    convert ((*lang_hooks.types.type_for_size)\n+\t\t\t\t     (POINTER_SIZE, 0), expr));\n \n     default:\n       error (\"cannot convert to a pointer type\");\n@@ -138,8 +140,8 @@ convert_to_integer (type, expr)\n       if (integer_zerop (expr))\n \texpr = integer_zero_node;\n       else\n-\texpr = fold (build1 (CONVERT_EXPR,\n-\t\t\t     type_for_size (POINTER_SIZE, 0), expr));\n+\texpr = fold (build1 (CONVERT_EXPR, (*lang_hooks.types.type_for_size)\n+\t\t\t     (POINTER_SIZE, 0), expr));\n \n       return convert_to_integer (type, expr);\n \n@@ -189,8 +191,8 @@ convert_to_integer (type, expr)\n       else if (TREE_CODE (type) == ENUMERAL_TYPE\n \t       || outprec != GET_MODE_BITSIZE (TYPE_MODE (type)))\n \treturn build1 (NOP_EXPR, type,\n-\t\t       convert (type_for_mode (TYPE_MODE (type),\n-\t\t\t\t\t       TREE_UNSIGNED (type)),\n+\t\t       convert ((*lang_hooks.types.type_for_mode)\n+\t\t\t\t(TYPE_MODE (type), TREE_UNSIGNED (type)),\n \t\t\t\texpr));\n \n       /* Here detect when we can distribute the truncation down past some\n@@ -300,8 +302,8 @@ convert_to_integer (type, expr)\n \t\t/* Can't do arithmetic in enumeral types\n \t\t   so use an integer type that will hold the values.  */\n \t\tif (TREE_CODE (typex) == ENUMERAL_TYPE)\n-\t\t  typex = type_for_size (TYPE_PRECISION (typex),\n-\t\t\t\t\t TREE_UNSIGNED (typex));\n+\t\t  typex = (*lang_hooks.types.type_for_size)\n+\t\t    (TYPE_PRECISION (typex), TREE_UNSIGNED (typex));\n \n \t\t/* But now perhaps TYPEX is as wide as INPREC.\n \t\t   In that case, do nothing special here.\n@@ -338,8 +340,8 @@ convert_to_integer (type, expr)\n \t    /* Can't do arithmetic in enumeral types\n \t       so use an integer type that will hold the values.  */\n \t    if (TREE_CODE (typex) == ENUMERAL_TYPE)\n-\t      typex = type_for_size (TYPE_PRECISION (typex),\n-\t\t\t\t     TREE_UNSIGNED (typex));\n+\t      typex = (*lang_hooks.types.type_for_size)\n+\t\t(TYPE_PRECISION (typex), TREE_UNSIGNED (typex));\n \n \t    /* But now perhaps TYPEX is as wide as INPREC.\n \t       In that case, do nothing special here."}, {"sha": "8dd802c9b1dbd53e5e8d7b7951987bf9565ea8b8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -1,3 +1,14 @@\n+2002-03-29  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cp-lang.c (LANG_HOOKS_TYPE_FOR_MODE, LANG_HOOKS_TYPE_FOR_SIZE):\n+\tRedefine.\n+\t* cvt.c (cp_convert_to_pointer, type_promotes_to): Use new hooks.\n+\t* decl.c (finish_enum): Similarly.\n+\t* error.c (dump_type): Similarly.\n+\t* lex.c (cxx_init): Similarly.\n+\t* mangle.c (write_builtin_type): Similarly.\n+\t* typeck.c (comptypes): Similarly.\n+\n 2002-03-28  Roger Sayle  <roger@eyesopen.com>\n \n \tPR c++/5998:"}, {"sha": "5cd481de4232980cfb02c981452cb6eab3b58be7", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -111,6 +111,10 @@ static bool ok_to_generate_alias_set_for_type PARAMS ((tree));\n \n #undef LANG_HOOKS_MAKE_TYPE\n #define LANG_HOOKS_MAKE_TYPE cxx_make_type\n+#undef LANG_HOOKS_TYPE_FOR_MODE\n+#define LANG_HOOKS_TYPE_FOR_MODE c_common_type_for_mode\n+#undef LANG_HOOKS_TYPE_FOR_SIZE\n+#define LANG_HOOKS_TYPE_FOR_SIZE c_common_type_for_size\n \n /* Each front end provides its own hooks, for toplev.c.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;"}, {"sha": "d934df03de50d59eb5d839a706878dd304529132", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -256,7 +256,7 @@ cp_convert_to_pointer (type, expr, force)\n     {\n       if (TYPE_PRECISION (intype) == POINTER_SIZE)\n \treturn build1 (CONVERT_EXPR, type, expr);\n-      expr = cp_convert (type_for_size (POINTER_SIZE, 0), expr);\n+      expr = cp_convert (c_common_type_for_size (POINTER_SIZE, 0), expr);\n       /* Modes may be different but sizes should be the same.  */\n       if (GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (expr)))\n \t  != GET_MODE_SIZE (TYPE_MODE (type)))\n@@ -1183,10 +1183,10 @@ type_promotes_to (type)\n     {\n       int precision = MAX (TYPE_PRECISION (type),\n \t\t\t   TYPE_PRECISION (integer_type_node));\n-      tree totype = type_for_size (precision, 0);\n+      tree totype = c_common_type_for_size (precision, 0);\n       if (TREE_UNSIGNED (type)\n \t  && ! int_fits_type_p (TYPE_MAX_VALUE (type), totype))\n-\ttype = type_for_size (precision, 1);\n+\ttype = c_common_type_for_size (precision, 1);\n       else\n \ttype = totype;\n     }"}, {"sha": "8ba011e601ad0f67600abde4b667a3ce7177d994", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -13247,7 +13247,7 @@ finish_enum (enumtype)\n   if (flag_short_enums || (precision > TYPE_PRECISION (integer_type_node)))\n     /* Use the width of the narrowest normal C type which is wide\n        enough.  */\n-    TYPE_PRECISION (enumtype) = TYPE_PRECISION (type_for_size\n+    TYPE_PRECISION (enumtype) = TYPE_PRECISION (c_common_type_for_size\n \t\t\t\t\t\t(precision, 1));\n   else\n     TYPE_PRECISION (enumtype) = TYPE_PRECISION (integer_type_node);"}, {"sha": "b411d27da7f9cc02ecef7407e06b50748506712e", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -387,7 +387,7 @@ dump_type (t, flags)\n \t   which has no name and is not very useful for diagnostics.  So\n \t   look up the equivalent C type and print its name.  */\n \ttree elt = TREE_TYPE (t);\n-\telt = type_for_mode (TYPE_MODE (elt), TREE_UNSIGNED (elt));\n+\telt = c_common_type_for_mode (TYPE_MODE (elt), TREE_UNSIGNED (elt));\n \tdump_type (elt, flags);\n       }\n       break;"}, {"sha": "7e442fbc70e10a3adefb5d63dc22b52ba10048e8", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -677,7 +677,7 @@ cxx_init (filename)\n \n   /* Create the built-in __null node.  */\n   null_node = build_int_2 (0, 0);\n-  TREE_TYPE (null_node) = type_for_size (POINTER_SIZE, 0);\n+  TREE_TYPE (null_node) = c_common_type_for_size (POINTER_SIZE, 0);\n   ridpointers[RID_NULL] = null_node;\n \n   token_count = init_cpp_parse ();"}, {"sha": "1a1c995bb6d32dd2a80abe284254e96e1584a832", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -1560,7 +1560,8 @@ write_builtin_type (type)\n \n \t  if (itk == itk_none)\n \t    {\n-\t      tree t = type_for_mode (TYPE_MODE (type), TREE_UNSIGNED (type));\n+\t      tree t = c_common_type_for_mode (TYPE_MODE (type),\n+\t\t\t\t\t       TREE_UNSIGNED (type));\n \t      if (type == t)\n \t\t{\n \t\t  if (TYPE_PRECISION (type) == 128)"}, {"sha": "1a575f22fcce0871cfa8d092b90fc70ec75ee7cb", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -910,9 +910,9 @@ comptypes (t1, t2, strict)\n       /* Treat an enum type as the unsigned integer type of the same width.  */\n \n       if (TREE_CODE (t1) == ENUMERAL_TYPE)\n-\tt1 = type_for_size (TYPE_PRECISION (t1), 1);\n+\tt1 = c_common_type_for_size (TYPE_PRECISION (t1), 1);\n       if (TREE_CODE (t2) == ENUMERAL_TYPE)\n-\tt2 = type_for_size (TYPE_PRECISION (t2), 1);\n+\tt2 = c_common_type_for_size (TYPE_PRECISION (t2), 1);\n \n       if (t1 == t2)\n \treturn 1;"}, {"sha": "3eb31bd0237ec82eef42a28755d3c3009c9ba117", "filename": "gcc/except.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -396,7 +396,8 @@ init_eh ()\n       DECL_FIELD_CONTEXT (f_cs) = sjlj_fc_type_node;\n \n       tmp = build_index_type (build_int_2 (4 - 1, 0));\n-      tmp = build_array_type (type_for_mode (word_mode, 1), tmp);\n+      tmp = build_array_type ((*lang_hooks.types.type_for_mode) (word_mode, 1),\n+\t\t\t      tmp);\n       f_data = build_decl (FIELD_DECL, get_identifier (\"__data\"), tmp);\n       DECL_FIELD_CONTEXT (f_data) = sjlj_fc_type_node;\n "}, {"sha": "cdc403fcc9139cec816ed79b6abb9a9d29095f61", "filename": "gcc/expmed.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -33,6 +33,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"optabs.h\"\n #include \"real.h\"\n #include \"recog.h\"\n+#include \"langhooks.h\"\n \n static void store_fixed_bit_field\tPARAMS ((rtx, unsigned HOST_WIDE_INT,\n \t\t\t\t\t\t unsigned HOST_WIDE_INT,\n@@ -4168,9 +4169,10 @@ expand_mult_add (x, target, mult, add, mode, unsignedp)\n      enum machine_mode mode;\n      int unsignedp;\n {\n-  tree type = type_for_mode (mode, unsignedp);\n+  tree type = (*lang_hooks.types.type_for_mode) (mode, unsignedp);\n   tree add_type = (GET_MODE (add) == VOIDmode\n-\t\t   ? type : type_for_mode (GET_MODE (add), unsignedp));\n+\t\t   ? type: (*lang_hooks.types.type_for_mode) (GET_MODE (add),\n+\t\t\t\t\t\t\t      unsignedp));\n   tree result =  fold (build (PLUS_EXPR, type,\n \t\t\t      fold (build (MULT_EXPR, type,\n \t\t\t\t\t   make_tree (type, x),"}, {"sha": "6587212296e212e7209542dbfef65c1447a99270", "filename": "gcc/expr.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -4027,8 +4027,9 @@ store_expr (exp, target, want_value)\n \t\t\t\t\t  TREE_TYPE (exp)),\n \t\t exp);\n \n-\t  exp = convert (type_for_mode (GET_MODE (SUBREG_REG (target)),\n-\t\t\t\t\tSUBREG_PROMOTED_UNSIGNED_P (target)),\n+\t  exp = convert ((*lang_hooks.types.type_for_mode)\n+\t\t\t (GET_MODE (SUBREG_REG (target)),\n+\t\t\t  SUBREG_PROMOTED_UNSIGNED_P (target)),\n \t\t\t exp);\n \n \t  inner_target = SUBREG_REG (target);\n@@ -4526,7 +4527,8 @@ store_constructor (exp, target, cleared, size)\n \n \t      if (TYPE_PRECISION (type) < BITS_PER_WORD)\n \t\t{\n-\t\t  type = type_for_size (BITS_PER_WORD, TREE_UNSIGNED (type));\n+\t\t  type = (*lang_hooks.types.type_for_size)\n+\t\t    (BITS_PER_WORD, TREE_UNSIGNED (type));\n \t\t  value = convert (type, value);\n \t\t}\n \n@@ -4955,7 +4957,8 @@ store_constructor (exp, target, cleared, size)\n \t    {\n \t      targetx\n \t\t= assign_temp\n-\t\t  ((build_qualified_type (type_for_mode (GET_MODE (target), 0),\n+\t\t  ((build_qualified_type ((*lang_hooks.types.type_for_mode)\n+\t\t\t\t\t  (GET_MODE (target), 0),\n \t\t\t\t\t  TYPE_QUAL_CONST)),\n \t\t   0, 1, 1);\n \t      emit_move_insn (targetx, target);\n@@ -7015,7 +7018,8 @@ expand_expr (exp, target, tmode, modifier)\n \t    if (mode == BLKmode)\n \t      {\n \t\trtx new = assign_temp (build_qualified_type\n-\t\t\t\t       (type_for_mode (ext_mode, 0),\n+\t\t\t\t       ((*lang_hooks.types.type_for_mode)\n+\t\t\t\t\t(ext_mode, 0),\n \t\t\t\t\tTYPE_QUAL_CONST), 0, 1, 1);\n \n \t\temit_move_insn (new, op0);\n@@ -9252,7 +9256,7 @@ do_jump (exp, if_false_label, if_true_label)\n \t  && TYPE_PRECISION (TREE_TYPE (exp)) <= HOST_BITS_PER_WIDE_INT\n \t  && (i = tree_floor_log2 (TREE_OPERAND (exp, 1))) >= 0\n \t  && (mode = mode_for_size (i + 1, MODE_INT, 0)) != BLKmode\n-\t  && (type = type_for_mode (mode, 1)) != 0\n+\t  && (type = (*lang_hooks.types.type_for_mode) (mode, 1)) != 0\n \t  && TYPE_PRECISION (type) < TYPE_PRECISION (TREE_TYPE (exp))\n \t  && (cmp_optab->handlers[(int) TYPE_MODE (type)].insn_code\n \t      != CODE_FOR_nothing))\n@@ -9312,7 +9316,7 @@ do_jump (exp, if_false_label, if_true_label)\n \tget_inner_reference (exp, &bitsize, &bitpos, &offset, &mode,\n \t\t\t     &unsignedp, &volatilep);\n \n-\ttype = type_for_size (bitsize, unsignedp);\n+\ttype = (*lang_hooks.types.type_for_size) (bitsize, unsignedp);\n \tif (! SLOW_BYTE_ACCESS\n \t    && type != 0 && bitsize >= 0\n \t    && TYPE_PRECISION (type) < TYPE_PRECISION (TREE_TYPE (exp))\n@@ -10393,8 +10397,8 @@ try_casesi (index_type, index_expr, minval, range,\n     {\n       if (TYPE_MODE (index_type) != index_mode)\n \t{\n-\t  index_expr = convert (type_for_size (index_bits, 0),\n-\t\t\t\tindex_expr);\n+\t  index_expr = convert ((*lang_hooks.types.type_for_size)\n+\t\t\t\t(index_bits, 0), index_expr);\n \t  index_type = TREE_TYPE (index_expr);\n \t}\n "}, {"sha": "74202a6f8192f2958a4b4a9f1bbb3c1bb2d95882", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -1,3 +1,11 @@\n+Fri Mar 29 21:59:15 2002  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* com.c (LANG_HOOKS_TYPE_FOR_MODE, LANG_HOOKS_TYPE_FOR_SIZE):\n+\tRedefine.\n+\t(type_for_mode, type_for_size): Rename.\n+\t(signed_or_unsigned_type, signed_type, truthvalue_conversion,\n+\tunsigned_type):\tUse new hooks.\n+\n Tue Mar 26 10:30:05 2002  Andrew Cagney  <ac131313@redhat.com>\n \n \t* invoke.texi (Warning Options): Mention -Wswitch-enum."}, {"sha": "fcff40150e07dfe13047b7bf62d0d41413c4e58b", "filename": "gcc/f/com.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -261,6 +261,8 @@ struct _ffecom_concat_list_\n \n /* Static functions (internal). */\n \n+static tree ffe_type_for_mode PARAMS ((enum machine_mode, int));\n+static tree ffe_type_for_size PARAMS ((unsigned int, int));\n static void ffecom_init_decl_processing PARAMS ((void));\n static tree ffecom_arglist_expr_ (const char *argstring, ffebld args);\n static tree ffecom_widest_expr_type_ (ffebld list);\n@@ -14225,6 +14227,10 @@ static void ffe_mark_tree (tree);\n #define LANG_HOOKS_PRINT_IDENTIFIER\tffe_print_identifier\n #undef  LANG_HOOKS_DECL_PRINTABLE_NAME\n #define LANG_HOOKS_DECL_PRINTABLE_NAME\tffe_printable_name\n+#undef  LANG_HOOKS_TYPE_FOR_MODE\n+#define LANG_HOOKS_TYPE_FOR_MODE\tffe_type_for_mode\n+#undef  LANG_HOOKS_TYPE_FOR_SIZE\n+#define LANG_HOOKS_TYPE_FOR_SIZE\tffe_type_for_size\n \n /* We do not wish to use alias-set based aliasing at all.  Used in the\n    extreme (every object with its own set, with equivalences recorded) it\n@@ -14758,7 +14764,7 @@ signed_or_unsigned_type (unsignedp, type)\n     return (unsignedp ? long_long_unsigned_type_node\n \t    : long_long_integer_type_node);\n \n-  type2 = type_for_size (TYPE_PRECISION (type), unsignedp);\n+  type2 = ffe_type_for_size (TYPE_PRECISION (type), unsignedp);\n   if (type2 == NULL_TREE)\n     return type;\n \n@@ -14794,7 +14800,7 @@ signed_type (type)\n     return intQI_type_node;\n #endif\n \n-  type2 = type_for_size (TYPE_PRECISION (type1), 0);\n+  type2 = ffe_type_for_size (TYPE_PRECISION (type1), 0);\n   if (type2 != NULL_TREE)\n     return type2;\n \n@@ -14992,8 +14998,8 @@ truthvalue_conversion (expr)\n \t\t   convert (TREE_TYPE (expr), integer_zero_node));\n }\n \n-tree\n-type_for_mode (mode, unsignedp)\n+static tree\n+ffe_type_for_mode (mode, unsignedp)\n      enum machine_mode mode;\n      int unsignedp;\n {\n@@ -15049,8 +15055,8 @@ type_for_mode (mode, unsignedp)\n   return 0;\n }\n \n-tree\n-type_for_size (bits, unsignedp)\n+static tree\n+ffe_type_for_size (bits, unsignedp)\n      unsigned bits;\n      int unsignedp;\n {\n@@ -15114,7 +15120,7 @@ unsigned_type (type)\n     return unsigned_intQI_type_node;\n #endif\n \n-  type2 = type_for_size (TYPE_PRECISION (type1), 1);\n+  type2 = ffe_type_for_size (TYPE_PRECISION (type1), 1);\n   if (type2 != NULL_TREE)\n     return type2;\n "}, {"sha": "875ade3bf75a31dcc1a108289af3490480e22aa3", "filename": "gcc/fold-const.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -2426,8 +2426,8 @@ optimize_bit_field_compare (code, compare_type, lhs, rhs)\n \n   /* Set signed and unsigned types of the precision of this mode for the\n      shifts below.  */\n-  signed_type = type_for_mode (nmode, 0);\n-  unsigned_type = type_for_mode (nmode, 1);\n+  signed_type = (*lang_hooks.types.type_for_mode) (nmode, 0);\n+  unsigned_type = (*lang_hooks.types.type_for_mode) (nmode, 1);\n \n   /* Compute the bit position and size for the new reference and our offset\n      within it. If the new reference is the same size as the original, we\n@@ -2590,7 +2590,7 @@ decode_field_reference (exp, pbitsize, pbitpos, pmode, punsignedp,\n     return 0;\n \n   /* Compute the mask to access the bitfield.  */\n-  unsigned_type = type_for_size (*pbitsize, 1);\n+  unsigned_type = (*lang_hooks.types.type_for_size) (*pbitsize, 1);\n   precision = TYPE_PRECISION (unsigned_type);\n \n   mask = build_int_2 (~0, ~0);\n@@ -2960,7 +2960,8 @@ make_range (exp, pin_p, plow, phigh)\n \t     be interpreted as positive.  */\n \t  if (TREE_UNSIGNED (type) && ! TREE_UNSIGNED (TREE_TYPE (exp)))\n \t    {\n-\t      tree equiv_type = type_for_mode (TYPE_MODE (type), 1);\n+\t      tree equiv_type = (*lang_hooks.types.type_for_mode)\n+\t\t(TYPE_MODE (type), 1);\n \t      tree high_positive;\n \n \t      /* A range without an upper bound is, naturally, unbounded.\n@@ -3509,7 +3510,7 @@ fold_truthop (code, truth_type, lhs, rhs)\n \n   lnbitsize = GET_MODE_BITSIZE (lnmode);\n   lnbitpos = first_bit & ~ (lnbitsize - 1);\n-  lntype = type_for_size (lnbitsize, 1);\n+  lntype = (*lang_hooks.types.type_for_size) (lnbitsize, 1);\n   xll_bitpos = ll_bitpos - lnbitpos, xrl_bitpos = rl_bitpos - lnbitpos;\n \n   if (BYTES_BIG_ENDIAN)\n@@ -3580,7 +3581,7 @@ fold_truthop (code, truth_type, lhs, rhs)\n \n       rnbitsize = GET_MODE_BITSIZE (rnmode);\n       rnbitpos = first_bit & ~ (rnbitsize - 1);\n-      rntype = type_for_size (rnbitsize, 1);\n+      rntype = (*lang_hooks.types.type_for_size) (rnbitsize, 1);\n       xlr_bitpos = lr_bitpos - rnbitpos, xrr_bitpos = rr_bitpos - rnbitpos;\n \n       if (BYTES_BIG_ENDIAN)\n@@ -5720,7 +5721,7 @@ fold (expr)\n \t\t\t|| integer_onep (folded_compare))\n \t\t      return omit_one_operand (type, folded_compare, varop);\n \n-\t\t    unsigned_type = type_for_size (size, 1);\n+\t\t    unsigned_type = (*lang_hooks.types.type_for_size)(size, 1);\n \t\t    precision = TYPE_PRECISION (unsigned_type);\n \t\t    mask = build_int_2 (~0, ~0);\n \t\t    TREE_TYPE (mask) = unsigned_type;\n@@ -5781,7 +5782,7 @@ fold (expr)\n \t\t\t|| integer_onep (folded_compare))\n \t\t      return omit_one_operand (type, folded_compare, varop);\n \n-\t\t    unsigned_type = type_for_size (size, 1);\n+\t\t    unsigned_type = (*lang_hooks.types.type_for_size)(size, 1);\n \t\t    precision = TYPE_PRECISION (unsigned_type);\n \t\t    mask = build_int_2 (~0, ~0);\n \t\t    TREE_TYPE (mask) = TREE_TYPE (varop);"}, {"sha": "a17b249661fb584f307ef7a5195864077b9c31ed", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -556,7 +556,7 @@ assign_stack_local_1 (mode, size, align, function)\n \n       /* Allow the target to (possibly) increase the alignment of this\n \t stack slot.  */\n-      type = type_for_mode (mode, 0);\n+      type = (*lang_hooks.types.type_for_mode) (mode, 0);\n       if (type)\n \talignment = LOCAL_ALIGNMENT (type, alignment);\n \n@@ -675,7 +675,7 @@ assign_stack_temp_for_type (mode, size, keep, type)\n     align = GET_MODE_ALIGNMENT (mode);\n \n   if (! type)\n-    type = type_for_mode (mode, 0);\n+    type = (*lang_hooks.types.type_for_mode) (mode, 0);\n \n   if (type)\n     align = LOCAL_ALIGNMENT (type, align);\n@@ -1415,7 +1415,7 @@ put_var_into_stack (decl)\n \t to the whole CONCAT, lest we do double fixups for the latter\n \t references.  */\n       enum machine_mode part_mode = GET_MODE (XEXP (reg, 0));\n-      tree part_type = type_for_mode (part_mode, 0);\n+      tree part_type = (*lang_hooks.types.type_for_mode) (part_mode, 0);\n       rtx lopart = XEXP (reg, 0);\n       rtx hipart = XEXP (reg, 1);\n #ifdef FRAME_GROWS_DOWNWARD"}, {"sha": "b4ffd1988e3826f0333daf47379a9754f138d480", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -1,3 +1,14 @@\n+2002-03-29  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* Make-lang.in (builtins.o): Update.\n+\t* boehm.c (get_boehm_type_descriptor): Update.\n+\t* builtins.c: Include langhooks.h.\n+\t* decl.c (java_init_decl_processing): Update.\n+\t* java-tree.h (java_type_for_mode, java_type_for_size): New.\n+\t* lang.c (LANG_HOOKS_TYPE_FOR_MODE, LANG_HOOKS_TYPE_FOR_SIaZE):\n+\tRedefine.\n+\t* typeck.c (type_for_mode, type_for_size): Update.\n+\n 2002-03-29  Martin Kahlert  <martin.kahlert@infineon.com>\n \n \t* lex.c (java_new_lexer): Alias \"646\" to DEFAULT_ENCODING."}, {"sha": "00185e5824ba606571f746b89b6e10c48d0a2409", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -261,7 +261,7 @@ java/boehm.o: java/boehm.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(JAVA_TREE_H) \\\n   java/parse.h toplev.h\n java/buffer.o: java/buffer.c $(CONFIG_H) java/buffer.h $(SYSTEM_H) toplev.h\n java/builtins.o: java/builtins.c $(CONFIG_H) $(SYSTEM_H) $(JAVA_TREE_H) \\\n-  $(GGC_H) flags.h\n+  $(GGC_H) flags.h builtin-types.def langhooks.h\n java/check-init.o: java/check-init.c $(CONFIG_H) \\\n   $(JAVA_TREE_H) $(SYSTEM_H) toplev.h\n java/class.o: java/class.c $(CONFIG_H) $(JAVA_TREE_H) $(RTL_H) java/jcf.h \\"}, {"sha": "566655a6c96b66acfc1f7635d917e603bf7a490b", "filename": "gcc/java/boehm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fjava%2Fboehm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fjava%2Fboehm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fboehm.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -230,6 +230,6 @@ get_boehm_type_descriptor (tree type)\n       value = build_int_2 (2, 0);\n     }\n \n-  TREE_TYPE (value) = type_for_mode (ptr_mode, 1);\n+  TREE_TYPE (value) = java_type_for_mode (ptr_mode, 1);\n   return value;\n }"}, {"sha": "81be7e3d4576dbb3c0b10703500534bdc73f7a19", "filename": "gcc/java/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fjava%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fjava%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fbuiltins.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -30,7 +30,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"tree.h\"\n #include \"ggc.h\"\n #include \"flags.h\"\n-\n+#include \"langhooks.h\"\n #include \"java-tree.h\"\n \n enum builtin_type "}, {"sha": "c0560c6dbb76917bc6692c2a3bb1a87a3d3f67cc", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -441,7 +441,7 @@ java_init_decl_processing ()\n   set_sizetype (make_unsigned_type (POINTER_SIZE));\n \n   /* Define these next since types below may used them.  */\n-  integer_type_node = type_for_size (INT_TYPE_SIZE, 0);\n+  integer_type_node = java_type_for_size (INT_TYPE_SIZE, 0);\n   integer_zero_node = build_int_2 (0, 0);\n   integer_one_node = build_int_2 (1, 0);\n   integer_two_node = build_int_2 (2, 0);"}, {"sha": "3f47430aa4038e3129b80ec7b553046b70437e8c", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -1039,6 +1039,8 @@ struct lang_type\n extern void java_set_yydebug PARAMS ((int));\n extern void java_parse_file PARAMS ((void));\n extern void java_mark_tree PARAMS ((tree));\n+extern tree java_type_for_mode PARAMS ((enum machine_mode, int));\n+extern tree java_type_for_size PARAMS ((unsigned int, int));\n extern void add_assume_compiled PARAMS ((const char *, int));\n extern tree lookup_class PARAMS ((tree));\n extern tree lookup_java_constructor PARAMS ((tree, tree));"}, {"sha": "583af75eaf1ba5d1efaef8c1877a339c4256f12b", "filename": "gcc/java/lang.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -231,6 +231,10 @@ static int dependency_tracking = 0;\n #define LANG_HOOKS_DUP_LANG_SPECIFIC_DECL java_dup_lang_specific_decl\n #undef LANG_HOOKS_DECL_PRINTABLE_NAME\n #define LANG_HOOKS_DECL_PRINTABLE_NAME lang_printable_name\n+#undef LANG_HOOKS_TYPE_FOR_MODE\n+#define LANG_HOOKS_TYPE_FOR_MODE java_type_for_mode\n+#undef LANG_HOOKS_TYPE_FOR_SIZE\n+#define LANG_HOOKS_TYPE_FOR_SIZE java_type_for_size\n \n /* Each front end provides its own.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;"}, {"sha": "88f3fb9f3cad4e126d067d37f271fbfa657e8e8c", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -183,7 +183,7 @@ incomplete_type_error (value, type)\n    then UNSIGNEDP selects between signed and unsigned types.  */\n \n tree\n-type_for_mode (mode, unsignedp)\n+java_type_for_mode (mode, unsignedp)\n      enum machine_mode mode;\n      int unsignedp;\n {\n@@ -207,7 +207,7 @@ type_for_mode (mode, unsignedp)\n    that is unsigned if UNSIGNEDP is nonzero, otherwise signed.  */\n \n tree\n-type_for_size (bits, unsignedp)\n+java_type_for_size (bits, unsignedp)\n      unsigned bits;\n      int unsignedp;\n {"}, {"sha": "8679f235c9a9b201dc5f3b1cabfd7c5e3b0cad68", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -145,11 +145,14 @@ int lhd_tree_dump_type_quals\t\t\tPARAMS ((tree));\n   LANG_HOOKS_TREE_DUMP_TYPE_QUALS_FN \\\n }\n \n-/* Types hooks.  */\n+/* Types hooks.  No default for LANG_HOOKS_TYPE_FOR_MODE or\n+   LANG_HOOKS_TYPE_FOR_SIZE.  */\n #define LANG_HOOKS_MAKE_TYPE make_node\n \n #define LANG_HOOKS_FOR_TYPES_INITIALIZER { \\\n-  LANG_HOOKS_MAKE_TYPE \\\n+  LANG_HOOKS_MAKE_TYPE, \\\n+  LANG_HOOKS_TYPE_FOR_MODE, \\\n+  LANG_HOOKS_TYPE_FOR_SIZE \\\n }\n \n /* Declaration hooks.  */"}, {"sha": "df404c532540e98b09d82d5b37cd5b49e605e6ae", "filename": "gcc/langhooks.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -71,7 +71,17 @@ struct lang_hooks_for_tree_dump\n \n struct lang_hooks_for_types\n {\n+  /* Return a new type (with the indicated CODE), doing whatever\n+     language-specific processing is required.  */\n   tree (*make_type) PARAMS ((enum tree_code));\n+  \n+  /* Given MODE and UNSIGNEDP, return a suitable type-tree with that\n+     mode.  */\n+  tree (*type_for_mode) PARAMS ((enum machine_mode, int));\n+\n+  /* Given PRECISION and UNSIGNEDP, return a suitable type-tree for an\n+     integer type with at least that precision.  */\n+  tree (*type_for_size) PARAMS ((unsigned, int));\n };\n \n /* Language hooks related to decls and the symbol table.  */"}, {"sha": "827a5a7166f4dd82ae30447abd5e99d5c555917f", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -8306,7 +8306,7 @@ handle_impent (impent)\n       tree decl, init;\n \n       init = build_int_2 (0, 0);\n-      TREE_TYPE (init) = type_for_size (BITS_PER_WORD, 1);\n+      TREE_TYPE (init) = c_common_type_for_size (BITS_PER_WORD, 1);\n       decl = build_decl (VAR_DECL, get_identifier (string), TREE_TYPE (init));\n       TREE_PUBLIC (decl) = 1;\n       TREE_READONLY (decl) = 1;"}, {"sha": "aa7e308ecbdc42d947725d443e43fb3523f7210d", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -76,6 +76,11 @@ static void objc_post_options                   PARAMS ((void));\n #define LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING \\\n   c_convert_parm_for_inlining\n \n+#undef LANG_HOOKS_TYPE_FOR_MODE\n+#define LANG_HOOKS_TYPE_FOR_MODE c_common_type_for_mode\n+#undef LANG_HOOKS_TYPE_FOR_SIZE\n+#define LANG_HOOKS_TYPE_FOR_SIZE c_common_type_for_size\n+\n /* Each front end provides its own hooks, for toplev.c.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n "}, {"sha": "d732047aaf87dfda074c93d61b1cdf1940c0a635", "filename": "gcc/stmt.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -4115,7 +4115,8 @@ expand_decl_cleanup (decl, cleanup)\n \n \t  emit_move_insn (flag, const1_rtx);\n \n-\t  cond = build_decl (VAR_DECL, NULL_TREE, type_for_mode (word_mode, 1));\n+\t  cond = build_decl (VAR_DECL, NULL_TREE,\n+\t\t\t     (*lang_hooks.types.type_for_mode) (word_mode, 1));\n \t  SET_DECL_RTL (cond, flag);\n \n \t  /* Conditionalize the cleanup.  */\n@@ -6310,7 +6311,7 @@ emit_case_nodes (index, node, default_label, index_type)\n \t  else if (!low_bound && !high_bound)\n \t    {\n \t      /* Widen LOW and HIGH to the same width as INDEX.  */\n-\t      tree type = type_for_mode (mode, unsignedp);\n+\t      tree type = (*lang_hooks.types.type_for_mode) (mode, unsignedp);\n \t      tree low = build1 (CONVERT_EXPR, type, node->low);\n \t      tree high = build1 (CONVERT_EXPR, type, node->high);\n \t      rtx low_rtx, new_index, new_bound;"}, {"sha": "98ac6bc663bad8d369a52ca769fb4eb5c5832695", "filename": "gcc/tree.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -4024,8 +4024,8 @@ get_unwidened (op, for_type)\n     {\n       unsigned int innerprec\n \t= tree_low_cst (DECL_SIZE (TREE_OPERAND (op, 1)), 1);\n-\n-      type = type_for_size (innerprec, TREE_UNSIGNED (TREE_OPERAND (op, 1)));\n+      int unsignedp = TREE_UNSIGNED (TREE_OPERAND (op, 1));\n+      type = (*lang_hooks.types.type_for_size) (innerprec, unsignedp);\n \n       /* We can get this structure field in the narrowest type it fits in.\n \t If FOR_TYPE is 0, do this only for a field that matches the\n@@ -4035,8 +4035,7 @@ get_unwidened (op, for_type)\n \n       if (innerprec < TYPE_PRECISION (TREE_TYPE (op))\n \t  && (for_type || ! DECL_BIT_FIELD (TREE_OPERAND (op, 1)))\n-\t  && (! uns || final_prec <= innerprec\n-\t      || TREE_UNSIGNED (TREE_OPERAND (op, 1)))\n+\t  && (! uns || final_prec <= innerprec || unsignedp)\n \t  && type != 0)\n \t{\n \t  win = build (COMPONENT_REF, type, TREE_OPERAND (op, 0),\n@@ -4110,7 +4109,8 @@ get_narrower (op, unsignedp_ptr)\n     {\n       unsigned HOST_WIDE_INT innerprec\n \t= tree_low_cst (DECL_SIZE (TREE_OPERAND (op, 1)), 1);\n-      tree type = type_for_size (innerprec, TREE_UNSIGNED (op));\n+      tree type = (*lang_hooks.types.type_for_size) (innerprec,\n+\t\t\t\t\t\t     TREE_UNSIGNED (op));\n \n       /* We can get this structure field in a narrower type that fits it,\n \t but the resulting extension to its nominal type (a fullword type)"}, {"sha": "58b2ebae4103bc2aec2c36048e2be8f7f291dfb4", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -2611,20 +2611,6 @@ extern tree get_unwidened\t\tPARAMS ((tree, tree));\n \n extern tree get_narrower\t\tPARAMS ((tree, int *));\n \n-/* Given MODE and UNSIGNEDP, return a suitable type-tree\n-   with that mode.\n-   The definition of this resides in language-specific code\n-   as the repertoire of available types may vary.  */\n-\n-extern tree type_for_mode\t\tPARAMS ((enum machine_mode, int));\n-\n-/* Given PRECISION and UNSIGNEDP, return a suitable type-tree\n-   for an integer type with at least that precision.\n-   The definition of this resides in language-specific code\n-   as the repertoire of available types may vary.  */\n-\n-extern tree type_for_size\t\tPARAMS ((unsigned, int));\n-\n /* Given an integer type T, return a type like T but unsigned.\n    If T is unsigned, the value is T.\n    The definition of this resides in language-specific code"}, {"sha": "fc45cd8b0d0092c7366107836dc096a57c55ee7a", "filename": "gcc/varasm.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c48229854447bec65f7f5a6ef1dbbe451cc3fb/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=b0c48229854447bec65f7f5a6ef1dbbe451cc3fb", "patch": "@@ -3799,7 +3799,8 @@ force_const_mem (mode, x)\n   /* Align the location counter as required by EXP's data type.  */\n   align = GET_MODE_ALIGNMENT (mode == VOIDmode ? word_mode : mode);\n #ifdef CONSTANT_ALIGNMENT\n-  align = CONSTANT_ALIGNMENT (make_tree (type_for_mode (mode, 0), x), align);\n+  align = CONSTANT_ALIGNMENT (make_tree ((*lang_hooks.types.type_for_mode)\n+\t\t\t\t\t (mode, 0), x), align);\n #endif\n \n   pool_offset += (align / BITS_PER_UNIT) - 1;\n@@ -3837,7 +3838,7 @@ force_const_mem (mode, x)\n   pool->desc->rtl = def\n     = gen_rtx_MEM (mode, gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (label)));\n   set_mem_alias_set (def, const_alias_set);\n-  set_mem_attributes (def, type_for_mode (mode, 0), 1);\n+  set_mem_attributes (def, (*lang_hooks.types.type_for_mode) (mode, 0), 1);\n   RTX_UNCHANGING_P (def) = 1;\n \n   /* Add label to symbol hash table.  */"}]}