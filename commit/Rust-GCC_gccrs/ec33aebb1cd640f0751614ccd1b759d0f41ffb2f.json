{"sha": "ec33aebb1cd640f0751614ccd1b759d0f41ffb2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMzM2FlYmIxY2Q2NDBmMDc1MTYxNGNjZDFiNzU5ZDBmNDFmZmIyZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-09-12T11:49:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-09-12T11:49:29Z"}, "message": "re PR target/82112 (internal compiler error: in fold_convert_loc, at fold-const.c:2262)\n\n\tPR target/82112\n\t* c-common.c (sync_resolve_size): Instead of c_dialect_cxx ()\n\tassertion check that in the condition.\n\t(get_atomic_generic_size): Likewise.  Before testing if parameter\n\thas pointer type, if it has array type, call for C++\n\tdefault_conversion to perform array-to-pointer conversion.\n\n\t* c-c++-common/pr82112.c: New test.\n\t* gcc.dg/pr82112.c: New test.\n\nFrom-SVN: r252003", "tree": {"sha": "f280f7a02ce7a04a489492de1b7806bcb2263c28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f280f7a02ce7a04a489492de1b7806bcb2263c28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec33aebb1cd640f0751614ccd1b759d0f41ffb2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec33aebb1cd640f0751614ccd1b759d0f41ffb2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec33aebb1cd640f0751614ccd1b759d0f41ffb2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec33aebb1cd640f0751614ccd1b759d0f41ffb2f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dee6fc2b43d2fc004ffe65a0e030fc74facb7c64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dee6fc2b43d2fc004ffe65a0e030fc74facb7c64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dee6fc2b43d2fc004ffe65a0e030fc74facb7c64"}], "stats": {"total": 61, "additions": 57, "deletions": 4}, "files": [{"sha": "52085f8c16ec6870fbd62fdd3063da86a4f6f8a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec33aebb1cd640f0751614ccd1b759d0f41ffb2f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec33aebb1cd640f0751614ccd1b759d0f41ffb2f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec33aebb1cd640f0751614ccd1b759d0f41ffb2f", "patch": "@@ -1,3 +1,12 @@\n+2017-09-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/82112\n+\t* c-common.c (sync_resolve_size): Instead of c_dialect_cxx ()\n+\tassertion check that in the condition.\n+\t(get_atomic_generic_size): Likewise.  Before testing if parameter\n+\thas pointer type, if it has array type, call for C++\n+\tdefault_conversion to perform array-to-pointer conversion.\n+\n 2017-09-12  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-generic.c (expand_vector_operations_1): Do nothing"}, {"sha": "af50cc729a2e4ed76d2867f31d2f67100b676d4b", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec33aebb1cd640f0751614ccd1b759d0f41ffb2f/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec33aebb1cd640f0751614ccd1b759d0f41ffb2f/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=ec33aebb1cd640f0751614ccd1b759d0f41ffb2f", "patch": "@@ -6478,10 +6478,9 @@ sync_resolve_size (tree function, vec<tree, va_gc> *params, bool fetch)\n     }\n \n   argtype = type = TREE_TYPE ((*params)[0]);\n-  if (TREE_CODE (type) == ARRAY_TYPE)\n+  if (TREE_CODE (type) == ARRAY_TYPE && c_dialect_cxx ())\n     {\n       /* Force array-to-pointer decay for C++.  */\n-      gcc_assert (c_dialect_cxx());\n       (*params)[0] = default_conversion ((*params)[0]);\n       type = TREE_TYPE ((*params)[0]);\n     }\n@@ -6646,10 +6645,9 @@ get_atomic_generic_size (location_t loc, tree function,\n \n   /* Get type of first parameter, and determine its size.  */\n   type_0 = TREE_TYPE ((*params)[0]);\n-  if (TREE_CODE (type_0) == ARRAY_TYPE)\n+  if (TREE_CODE (type_0) == ARRAY_TYPE && c_dialect_cxx ())\n     {\n       /* Force array-to-pointer decay for C++.  */\n-      gcc_assert (c_dialect_cxx());\n       (*params)[0] = default_conversion ((*params)[0]);\n       type_0 = TREE_TYPE ((*params)[0]);\n     }\n@@ -6688,6 +6686,12 @@ get_atomic_generic_size (location_t loc, tree function,\n       /* __atomic_compare_exchange has a bool in the 4th position, skip it.  */\n       if (n_param == 6 && x == 3)\n         continue;\n+      if (TREE_CODE (type) == ARRAY_TYPE && c_dialect_cxx ())\n+\t{\n+\t  /* Force array-to-pointer decay for C++.  */\n+\t  (*params)[x] = default_conversion ((*params)[x]);\n+\t  type = TREE_TYPE ((*params)[x]);\n+\t}\n       if (!POINTER_TYPE_P (type))\n \t{\n \t  error_at (loc, \"argument %d of %qE must be a pointer type\", x + 1,"}, {"sha": "2c04a2de5181e727d5eb2950252c3095164995a8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec33aebb1cd640f0751614ccd1b759d0f41ffb2f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec33aebb1cd640f0751614ccd1b759d0f41ffb2f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ec33aebb1cd640f0751614ccd1b759d0f41ffb2f", "patch": "@@ -1,3 +1,9 @@\n+2017-09-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/82112\n+\t* c-c++-common/pr82112.c: New test.\n+\t* gcc.dg/pr82112.c: New test.\n+\n 2017-09-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/79441"}, {"sha": "724d74cb33d4d85709c7c9d404c1a19e9a75084d", "filename": "gcc/testsuite/c-c++-common/pr82112.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec33aebb1cd640f0751614ccd1b759d0f41ffb2f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr82112.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec33aebb1cd640f0751614ccd1b759d0f41ffb2f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr82112.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr82112.c?ref=ec33aebb1cd640f0751614ccd1b759d0f41ffb2f", "patch": "@@ -0,0 +1,13 @@\n+/* PR target/82112 */\n+/* { dg-do compile } */\n+\n+int c[10], d[10], e[10], f[10], g[10], h[10], i[10], j[10], k[10], l[10];\n+\n+void\n+foo (void)\n+{\n+  __atomic_load (c, d, __ATOMIC_ACQUIRE);\n+  __atomic_store (e, f, __ATOMIC_SEQ_CST);\n+  __atomic_exchange (g, h, i, __ATOMIC_RELAXED);\n+  __atomic_compare_exchange (j, k, l, 1, __ATOMIC_RELAXED, __ATOMIC_RELAXED);\n+}"}, {"sha": "4ca69195acca2cd5618bb6bd53c3257a2ddb08d1", "filename": "gcc/testsuite/gcc.dg/pr82112.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec33aebb1cd640f0751614ccd1b759d0f41ffb2f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr82112.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec33aebb1cd640f0751614ccd1b759d0f41ffb2f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr82112.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr82112.c?ref=ec33aebb1cd640f0751614ccd1b759d0f41ffb2f", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/82112 */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu90\" } */\n+\n+struct S { int a[10]; } bar (void);\n+int b, c;\n+\n+void\n+foo (void)\n+{\n+  __atomic_load (bar ().a, &b, __ATOMIC_ACQUIRE);\t/* { dg-error \"argument 1 of .__atomic_load. must be a non-void pointer type\" } */\n+  __atomic_load (&b, bar ().a, __ATOMIC_ACQUIRE);\t/* { dg-error \"argument 2 of .__atomic_load. must be a pointer type\" } */\n+  __atomic_store (bar ().a, &b, __ATOMIC_SEQ_CST);\t/* { dg-error \"argument 1 of .__atomic_store. must be a non-void pointer type\" } */\n+  __atomic_store (&b, bar ().a, __ATOMIC_SEQ_CST);\t/* { dg-error \"argument 2 of .__atomic_store. must be a pointer type\" } */\n+  __atomic_exchange (bar ().a, &b, &c, __ATOMIC_RELAXED);\t/* { dg-error \"argument 1 of .__atomic_exchange. must be a non-void pointer type\" } */\n+  __atomic_exchange (&b, bar ().a, &c, __ATOMIC_RELAXED);\t/* { dg-error \"argument 2 of .__atomic_exchange. must be a pointer type\" } */\n+  __atomic_exchange (&b, &c, bar ().a, __ATOMIC_RELAXED);\t/* { dg-error \"argument 3 of .__atomic_exchange. must be a pointer type\" } */\n+  __atomic_compare_exchange (bar ().a, &b, &c, 1, __ATOMIC_RELAXED, __ATOMIC_RELAXED);\t/* { dg-error \"argument 1 of .__atomic_compare_exchange. must be a non-void pointer type\" } */\n+  __atomic_compare_exchange (&b, bar ().a, &c, 1, __ATOMIC_RELAXED, __ATOMIC_RELAXED);\t/* { dg-error \"argument 2 of .__atomic_compare_exchange. must be a pointer type\" } */\n+  __atomic_compare_exchange (&b, &c, bar ().a, 1, __ATOMIC_RELAXED, __ATOMIC_RELAXED);\t/* { dg-error \"argument 3 of .__atomic_compare_exchange. must be a pointer type\" } */\n+}"}]}