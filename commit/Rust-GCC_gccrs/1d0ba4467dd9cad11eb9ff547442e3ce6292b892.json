{"sha": "1d0ba4467dd9cad11eb9ff547442e3ce6292b892", "node_id": "C_kwDOANBUbNoAKDFkMGJhNDQ2N2RkOWNhZDExZWI5ZmY1NDc0NDJlM2NlNjI5MmI4OTI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-30T09:32:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-30T11:02:19Z"}, "message": "tree-optimization/109342 - wrong code with edge equivalences in VN\n\nThe following testcase shows a problem in how we query valitity for\nequivalences on edges when the edge is a backedge and thus refering\nto a block thats later in the iteration order we use for VN.  That\ncauses the dominated_by_p_w_unex helper to look at edge executable\nstate that's not yet computed and thus still at optimistic not\nexecutable state.\n\nThe following makes sure to use a plain dominance check in these cases.\n\n\tPR tree-optimization/109342\n\t* tree-ssa-sccvn.cc (vn_nary_op_get_predicated_value): New\n\toverload for edge.  When that edge is a backedge use\n\tdominated_by_p directly.\n\n\t* g++.dg/torture/pr109342.C: New testcase.", "tree": {"sha": "daf4e2e864fd771d9e662346334bdf1e4b1d370c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/daf4e2e864fd771d9e662346334bdf1e4b1d370c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d0ba4467dd9cad11eb9ff547442e3ce6292b892", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d0ba4467dd9cad11eb9ff547442e3ce6292b892", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d0ba4467dd9cad11eb9ff547442e3ce6292b892", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d0ba4467dd9cad11eb9ff547442e3ce6292b892/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee6ae8cb4793041590b479346433ed786a86985d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee6ae8cb4793041590b479346433ed786a86985d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee6ae8cb4793041590b479346433ed786a86985d"}], "stats": {"total": 70, "additions": 60, "deletions": 10}, "files": [{"sha": "2cdfa764faf544628d867bb6e16e1ee0b8fac3c2", "filename": "gcc/testsuite/g++.dg/torture/pr109342.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d0ba4467dd9cad11eb9ff547442e3ce6292b892/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr109342.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d0ba4467dd9cad11eb9ff547442e3ce6292b892/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr109342.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr109342.C?ref=1d0ba4467dd9cad11eb9ff547442e3ce6292b892", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do run }\n+\n+unsigned long int var_4 = 42;\n+unsigned long int var_14 = 10;\n+unsigned char var_16 = 1;\n+unsigned short var_18 = 0;\n+short var_75;\n+\n+inline const int &foo(const int &b, const int &c)\n+{\n+  return b < c ? c : b;\n+}\n+inline unsigned long &bar(unsigned long &b, unsigned long &c)\n+{\n+  return !c ? c : b;\n+}\n+\n+void __attribute__((noipa))\n+test(unsigned long var_4, unsigned long var_14,\n+     unsigned char var_16, unsigned short var_18)\n+{\n+  for (bool h = 0; h < (bool)foo(var_16 ? -7 : 4, var_4 ? var_4 : var_18);\n+       h = 2)\n+    var_75 = bar(var_4, var_14);\n+}\n+\n+int main()\n+{\n+  test(var_4, var_14, var_16, var_18);\n+  if (var_75 != 42)\n+    __builtin_abort();\n+  return 0;\n+}"}, {"sha": "99609538f54269a9f59cf9f089b89427a5ec69b9", "filename": "gcc/tree-ssa-sccvn.cc", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d0ba4467dd9cad11eb9ff547442e3ce6292b892/gcc%2Ftree-ssa-sccvn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d0ba4467dd9cad11eb9ff547442e3ce6292b892/gcc%2Ftree-ssa-sccvn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.cc?ref=1d0ba4467dd9cad11eb9ff547442e3ce6292b892", "patch": "@@ -4583,22 +4583,39 @@ static bool\n dominated_by_p_w_unex (basic_block bb1, basic_block bb2, bool);\n \n static tree\n-vn_nary_op_get_predicated_value (vn_nary_op_t vno, basic_block bb)\n+vn_nary_op_get_predicated_value (vn_nary_op_t vno, basic_block bb,\n+\t\t\t\t edge e = NULL)\n {\n   if (! vno->predicated_values)\n     return vno->u.result;\n   for (vn_pval *val = vno->u.values; val; val = val->next)\n     for (unsigned i = 0; i < val->n; ++i)\n-      /* Do not handle backedge executability optimistically since\n-\t when figuring out whether to iterate we do not consider\n-\t changed predication.  */\n-      if (dominated_by_p_w_unex\n-\t    (bb, BASIC_BLOCK_FOR_FN (cfun, val->valid_dominated_by_p[i]),\n-\t     false))\n-\treturn val->result;\n+      {\n+\tbasic_block cand\n+\t  = BASIC_BLOCK_FOR_FN (cfun, val->valid_dominated_by_p[i]);\n+\t/* Do not handle backedge executability optimistically since\n+\t   when figuring out whether to iterate we do not consider\n+\t   changed predication.\n+\t   When asking for predicated values on an edge avoid looking\n+\t   at edge executability for edges forward in our iteration\n+\t   as well.  */\n+\tif (e && (e->flags & EDGE_DFS_BACK))\n+\t  {\n+\t    if (dominated_by_p (CDI_DOMINATORS, bb, cand))\n+\t      return val->result;\n+\t  }\n+\telse if (dominated_by_p_w_unex (bb, cand, false))\n+\t  return val->result;\n+      }\n   return NULL_TREE;\n }\n \n+static tree\n+vn_nary_op_get_predicated_value (vn_nary_op_t vno, edge e)\n+{\n+  return vn_nary_op_get_predicated_value (vno, e->src, e);\n+}\n+\n /* Insert the rhs of STMT into the current hash table with a value number of\n    RESULT.  */\n \n@@ -5928,7 +5945,7 @@ visit_phi (gimple *phi, bool *inserted, bool backedges_varying_p)\n \t\t\t\t\t\t     ops, &vnresult);\n \t\tif (! val && vnresult && vnresult->predicated_values)\n \t\t  {\n-\t\t    val = vn_nary_op_get_predicated_value (vnresult, e->src);\n+\t\t    val = vn_nary_op_get_predicated_value (vnresult, e);\n \t\t    if (val && integer_truep (val)\n \t\t\t&& !(sameval_e && (sameval_e->flags & EDGE_DFS_BACK)))\n \t\t      {\n@@ -5947,7 +5964,7 @@ visit_phi (gimple *phi, bool *inserted, bool backedges_varying_p)\n \t\t       we can change sameval to def.  */\n \t\t    if (EDGE_COUNT (bb->preds) == 2\n \t\t\t&& (val = vn_nary_op_get_predicated_value\n-\t\t\t\t    (vnresult, EDGE_PRED (bb, 0)->src))\n+\t\t\t\t    (vnresult, EDGE_PRED (bb, 0)))\n \t\t\t&& integer_truep (val)\n \t\t\t&& !(e->flags & EDGE_DFS_BACK))\n \t\t      {"}]}