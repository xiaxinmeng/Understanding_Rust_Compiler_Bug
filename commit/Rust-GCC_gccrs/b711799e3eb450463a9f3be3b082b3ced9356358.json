{"sha": "b711799e3eb450463a9f3be3b082b3ced9356358", "node_id": "C_kwDOANBUbNoAKGI3MTE3OTllM2ViNDUwNDYzYTlmM2JlM2IwODJiM2NlZDkzNTYzNTg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-06-17T14:34:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-17T14:34:20Z"}, "message": "Merge #1322\n\n1322: Fixes #1263; diagnostics/feature/wrapper r=CohenArthur a=ndrwnaguib\n\n* wrapping GCC's diagnostics `sorry_at` with a new rust macro named `rust_sorry_at` which accepts `Location` instead of the default `location_t`.\r\n* refactoring previous usage of `sorry_at` to `rust_sorry_at`\r\n\r\nFixes #1263\n\nCo-authored-by: andrewnaguib <24280372+ndrwnaguib@users.noreply.github.com>", "tree": {"sha": "787da1ff11b1a7e557670b1162f27d13746d43ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/787da1ff11b1a7e557670b1162f27d13746d43ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b711799e3eb450463a9f3be3b082b3ced9356358", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJirJDsCRBK7hj4Ov3rIwAAzBgIALBUeeXDuMhWvHc7a5N/Wrex\nkSeS/iNFctlCVWgkV5IWOWTo9DsSUb/ufNvfr8Dil1/nOhT4rLJgydhX3nreK1bL\nda/fXlxrAFoll6sH0eZJZ6qmQ9YKv/xeklibl+0D4Md9zMtpAQX5+j2xqN4aIhl9\njuxGONM/3n91YmOnmfZXkN+OlejmXquVRN/ZIM/1Jb2b7C1cMjyi4zrUhpUWXHQz\ntDg03OGadCCqgAJ1lZ3jAogPCf8IamUWvzLfYKhClD5QKjq2RqZucwmimR9Eu9xP\nyM7YU6YRG/kpRKtNOGugqGqjEGKdISi/bLQA63HOoZjvi3jp0OXndt3dg/MmT3w=\n=Jy+A\n-----END PGP SIGNATURE-----\n", "payload": "tree 787da1ff11b1a7e557670b1162f27d13746d43ad\nparent 76f7e45179de4e6e53caab104022cc0784ecd618\nparent 747700e045c3bf3f3d84b04f6799886f067704ae\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1655476460 +0000\ncommitter GitHub <noreply@github.com> 1655476460 +0000\n\nMerge #1322\n\n1322: Fixes #1263; diagnostics/feature/wrapper r=CohenArthur a=ndrwnaguib\n\n* wrapping GCC's diagnostics `sorry_at` with a new rust macro named `rust_sorry_at` which accepts `Location` instead of the default `location_t`.\r\n* refactoring previous usage of `sorry_at` to `rust_sorry_at`\r\n\r\nFixes #1263\n\nCo-authored-by: andrewnaguib <24280372+ndrwnaguib@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b711799e3eb450463a9f3be3b082b3ced9356358", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b711799e3eb450463a9f3be3b082b3ced9356358", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b711799e3eb450463a9f3be3b082b3ced9356358/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76f7e45179de4e6e53caab104022cc0784ecd618", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76f7e45179de4e6e53caab104022cc0784ecd618", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76f7e45179de4e6e53caab104022cc0784ecd618"}, {"sha": "747700e045c3bf3f3d84b04f6799886f067704ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/747700e045c3bf3f3d84b04f6799886f067704ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/747700e045c3bf3f3d84b04f6799886f067704ae"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "d12dc78cf417b0f54764e375071b317a2bbe88cd", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b711799e3eb450463a9f3be3b082b3ced9356358/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b711799e3eb450463a9f3be3b082b3ced9356358/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=b711799e3eb450463a9f3be3b082b3ced9356358", "patch": "@@ -239,8 +239,8 @@ CompileExpr::visit (HIR::MatchExpr &expr)\n     {\n       // FIXME: CASE_LABEL_EXPR does not support floating point types.\n       // Find another way to compile these.\n-      sorry_at (expr.get_locus ().gcc_location (),\n-\t\t\"match on floating-point types is not yet supported\");\n+      rust_sorry_at (expr.get_locus (),\n+\t\t     \"match on floating-point types is not yet supported\");\n     }\n \n   TyTy::BaseType *expr_tyty = nullptr;"}, {"sha": "7e7fadd3fab7b51f5f3e4a963465e8b4373a1590", "filename": "gcc/rust/backend/rust-compile-pattern.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b711799e3eb450463a9f3be3b082b3ced9356358/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b711799e3eb450463a9f3be3b082b3ced9356358/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc?ref=b711799e3eb450463a9f3be3b082b3ced9356358", "patch": "@@ -96,8 +96,7 @@ CompilePatternCaseLabelExpr::visit (HIR::LiteralPattern &pattern)\n   // floating point types.\n   if (pattern.get_literal ().get_lit_type () == HIR::Literal::LitType::FLOAT)\n     {\n-      sorry_at (pattern.get_locus ().gcc_location (),\n-\t\t\"floating-point literal in pattern\");\n+      rust_sorry_at (pattern.get_locus (), \"floating-point literal in pattern\");\n     }\n \n   tree lit = CompileExpr::Compile (litexpr, ctx);"}, {"sha": "f2752b6b9653a84d323073d45b0c2c0290b1430a", "filename": "gcc/rust/privacy/rust-privacy-reporter.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b711799e3eb450463a9f3be3b082b3ced9356358/gcc%2Frust%2Fprivacy%2Frust-privacy-reporter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b711799e3eb450463a9f3be3b082b3ced9356358/gcc%2Frust%2Fprivacy%2Frust-privacy-reporter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-privacy-reporter.cc?ref=b711799e3eb450463a9f3be3b082b3ced9356358", "patch": "@@ -164,8 +164,7 @@ PrivacyReporter::check_base_type_privacy (Analysis::NodeMapping &node_mappings,\n       return recursive_check (\n \tstatic_cast<const TyTy::ProjectionType *> (ty)->get ());\n     case TyTy::CLOSURE:\n-      sorry_at (locus.gcc_location (),\n-\t\t\"privacy pass for closures is not handled yet\");\n+      rust_sorry_at (locus, \"privacy pass for closures is not handled yet\");\n       break;\n \n       // If we're dealing with a generic param, there's nothing we should be"}, {"sha": "93bd1b3237b0958e68899c6a26a09cb4c9c0c203", "filename": "gcc/rust/rust-diagnostics.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b711799e3eb450463a9f3be3b082b3ced9356358/gcc%2Frust%2Frust-diagnostics.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b711799e3eb450463a9f3be3b082b3ced9356358/gcc%2Frust%2Frust-diagnostics.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-diagnostics.h?ref=b711799e3eb450463a9f3be3b082b3ced9356358", "patch": "@@ -142,6 +142,11 @@ struct Error\n // rust_debug uses normal printf formatting, not GCC diagnostic formatting.\n #define rust_debug(...) rust_debug_loc (Location (), __VA_ARGS__)\n \n+// rust_sorry_at wraps GCC diagnostic \"sorry_at\" to accept \"Location\" instead of\n+// \"location_t\"\n+#define rust_sorry_at(location, ...)                                           \\\n+  sorry_at (location.gcc_location (), __VA_ARGS__)\n+\n void\n rust_debug_loc (const Location location, const char *fmt,\n \t\t...) ATTRIBUTE_PRINTF_2;"}]}