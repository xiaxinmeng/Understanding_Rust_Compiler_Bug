{"sha": "0c6c2f5fc239121f70334a587e371aab2c7a60a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM2YzJmNWZjMjM5MTIxZjcwMzM0YTU4N2UzNzFhYWIyYzdhNjBhNA==", "commit": {"author": {"name": "Cesar Philippidis", "email": "cesar@codesourcery.com", "date": "2018-07-26T11:42:19Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-07-26T11:42:19Z"}, "message": "[libgomp, nvptx] Move device property sampling from nvptx_exec to nvptx_open\n\nMove sampling of device properties from nvptx_exec to nvptx_open, and assume\nthe sampling always succeeds.  This simplifies the default dimension\ninitialization code in nvptx_open.\n\n2018-07-26  Cesar Philippidis  <cesar@codesourcery.com>\n\t    Tom de Vries  <tdevries@suse.de>\n\n\t* plugin/plugin-nvptx.c (struct ptx_device): Add warp_size,\n\tmax_threads_per_block and max_threads_per_multiprocessor fields.\n\t(nvptx_open_device): Initialize new fields.\n\t(nvptx_exec): Use num_sms, and new fields.\n\nCo-Authored-By: Tom de Vries <tdevries@suse.de>\n\nFrom-SVN: r262996", "tree": {"sha": "8ce060acb581a3136834102379693c1c71f66a26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ce060acb581a3136834102379693c1c71f66a26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c6c2f5fc239121f70334a587e371aab2c7a60a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c6c2f5fc239121f70334a587e371aab2c7a60a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c6c2f5fc239121f70334a587e371aab2c7a60a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c6c2f5fc239121f70334a587e371aab2c7a60a4/comments", "author": {"login": "cesarjp", "id": 4576177, "node_id": "MDQ6VXNlcjQ1NzYxNzc=", "avatar_url": "https://avatars.githubusercontent.com/u/4576177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cesarjp", "html_url": "https://github.com/cesarjp", "followers_url": "https://api.github.com/users/cesarjp/followers", "following_url": "https://api.github.com/users/cesarjp/following{/other_user}", "gists_url": "https://api.github.com/users/cesarjp/gists{/gist_id}", "starred_url": "https://api.github.com/users/cesarjp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cesarjp/subscriptions", "organizations_url": "https://api.github.com/users/cesarjp/orgs", "repos_url": "https://api.github.com/users/cesarjp/repos", "events_url": "https://api.github.com/users/cesarjp/events{/privacy}", "received_events_url": "https://api.github.com/users/cesarjp/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "328aa7876732da9bbf851f7b9309b1f6fda1cd9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/328aa7876732da9bbf851f7b9309b1f6fda1cd9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/328aa7876732da9bbf851f7b9309b1f6fda1cd9d"}], "stats": {"total": 61, "additions": 34, "deletions": 27}, "files": [{"sha": "6c5ff91983d6745b45cc567aa23e14660cd607d2", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6c2f5fc239121f70334a587e371aab2c7a60a4/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6c2f5fc239121f70334a587e371aab2c7a60a4/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=0c6c2f5fc239121f70334a587e371aab2c7a60a4", "patch": "@@ -1,3 +1,11 @@\n+2018-07-26  Cesar Philippidis  <cesar@codesourcery.com>\n+\t    Tom de Vries  <tdevries@suse.de>\n+\n+\t* plugin/plugin-nvptx.c (struct ptx_device): Add warp_size,\n+\tmax_threads_per_block and max_threads_per_multiprocessor fields.\n+\t(nvptx_open_device): Initialize new fields.\n+\t(nvptx_exec): Use num_sms, and new fields.\n+\n 2018-07-26  Tom de Vries  <tdevries@suse.de>\n \n \t* testsuite/libgomp.oacc-fortran/lib-12.f90: Move acc_async_test calls"}, {"sha": "5d9b5151e9534505c9e61d1bfc9c1d0718669d1c", "filename": "libgomp/plugin/plugin-nvptx.c", "status": "modified", "additions": 26, "deletions": 27, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6c2f5fc239121f70334a587e371aab2c7a60a4/libgomp%2Fplugin%2Fplugin-nvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6c2f5fc239121f70334a587e371aab2c7a60a4/libgomp%2Fplugin%2Fplugin-nvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-nvptx.c?ref=0c6c2f5fc239121f70334a587e371aab2c7a60a4", "patch": "@@ -414,6 +414,9 @@ struct ptx_device\n   int num_sms;\n   int regs_per_block;\n   int regs_per_sm;\n+  int warp_size;\n+  int max_threads_per_block;\n+  int max_threads_per_multiprocessor;\n \n   struct ptx_image_data *images;  /* Images loaded on device.  */\n   pthread_mutex_t image_lock;     /* Lock for above list.  */\n@@ -800,6 +803,15 @@ nvptx_open_device (int n)\n       GOMP_PLUGIN_error (\"Only warp size 32 is supported\");\n       return NULL;\n     }\n+  ptx_dev->warp_size = pi;\n+\n+  CUDA_CALL_ERET (NULL, cuDeviceGetAttribute, &pi,\n+\t\t  CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK, dev);\n+  ptx_dev->max_threads_per_block = pi;\n+\n+  CUDA_CALL_ERET (NULL, cuDeviceGetAttribute, &pi,\n+\t\t  CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR, dev);\n+  ptx_dev->max_threads_per_multiprocessor = pi;\n \n   r = CUDA_CALL_NOCHECK (cuDeviceGetAttribute, &async_engines,\n \t\t\t CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT, dev);\n@@ -1150,33 +1162,20 @@ nvptx_exec (void (*fn), size_t mapnum, void **hostaddrs, void **devaddrs,\n \t  for (int i = 0; i < GOMP_DIM_MAX; ++i)\n \t    default_dims[i] = GOMP_PLUGIN_acc_default_dim (i);\n \n-\t  int warp_size, block_size, dev_size, cpu_size;\n-\t  CUdevice dev = nvptx_thread()->ptx_dev->dev;\n-\t  /* 32 is the default for known hardware.  */\n-\t  int gang = 0, worker = 32, vector = 32;\n-\t  CUdevice_attribute cu_tpb, cu_ws, cu_mpc, cu_tpm;\n-\n-\t  cu_tpb = CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK;\n-\t  cu_ws = CU_DEVICE_ATTRIBUTE_WARP_SIZE;\n-\t  cu_mpc = CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT;\n-\t  cu_tpm  = CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR;\n-\n-\t  if (CUDA_CALL_NOCHECK (cuDeviceGetAttribute, &block_size, cu_tpb,\n-\t\t\t\t dev) == CUDA_SUCCESS\n-\t      && CUDA_CALL_NOCHECK (cuDeviceGetAttribute, &warp_size, cu_ws,\n-\t\t\t\t    dev) == CUDA_SUCCESS\n-\t      && CUDA_CALL_NOCHECK (cuDeviceGetAttribute, &dev_size, cu_mpc,\n-\t\t\t\t    dev) == CUDA_SUCCESS\n-\t      && CUDA_CALL_NOCHECK (cuDeviceGetAttribute, &cpu_size, cu_tpm,\n-\t\t\t\t    dev) == CUDA_SUCCESS)\n-\t    {\n-\t      GOMP_PLUGIN_debug (0, \" warp_size=%d, block_size=%d,\"\n-\t\t\t\t \" dev_size=%d, cpu_size=%d\\n\",\n-\t\t\t\t warp_size, block_size, dev_size, cpu_size);\n-\t      gang = (cpu_size / block_size) * dev_size;\n-\t      worker = block_size / warp_size;\n-\t      vector = warp_size;\n-\t    }\n+\t  int gang, worker, vector;\n+\t  {\n+\t    int warp_size = nvthd->ptx_dev->warp_size;\n+\t    int block_size = nvthd->ptx_dev->max_threads_per_block;\n+\t    int cpu_size = nvthd->ptx_dev->max_threads_per_multiprocessor;\n+\t    int dev_size = nvthd->ptx_dev->num_sms;\n+\t    GOMP_PLUGIN_debug (0, \" warp_size=%d, block_size=%d,\"\n+\t\t\t       \" dev_size=%d, cpu_size=%d\\n\",\n+\t\t\t       warp_size, block_size, dev_size, cpu_size);\n+\n+\t    gang = (cpu_size / block_size) * dev_size;\n+\t    worker = block_size / warp_size;\n+\t    vector = warp_size;\n+\t  }\n \n \t  /* There is no upper bound on the gang size.  The best size\n \t     matches the hardware configuration.  Logical gangs are"}]}