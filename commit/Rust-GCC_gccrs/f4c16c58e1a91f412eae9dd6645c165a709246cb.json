{"sha": "f4c16c58e1a91f412eae9dd6645c165a709246cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRjMTZjNThlMWE5MWY0MTJlYWU5ZGQ2NjQ1YzE2NWE3MDkyNDZjYg==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2019-07-03T08:16:01Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-03T08:16:01Z"}, "message": "[Ada] Refine pointer support in SPARK\n\nRefine the implementation of pointer support for SPARK analysis.\n\nThere is no impact on compilation.\n\n2019-07-03  Yannick Moy  <moy@adacore.com>\n\ngcc/ada/\n\n\t* sem_spark.adb (Get_Observed_Or_Borrowed_Expr): New function to\n\treturn go through traversal function call.\n\t(Check_Type): Consistently use underlying type.\n\t(Get_Perm): Adapt for case of elaboration code where variables\n\tare not declared in the environment. Remove incorrect handling\n\tof borrow and observe.\n\nFrom-SVN: r272981", "tree": {"sha": "121a2199f0e146ff3c0f29fc98b31943af645ab6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/121a2199f0e146ff3c0f29fc98b31943af645ab6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4c16c58e1a91f412eae9dd6645c165a709246cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4c16c58e1a91f412eae9dd6645c165a709246cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4c16c58e1a91f412eae9dd6645c165a709246cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4c16c58e1a91f412eae9dd6645c165a709246cb/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "abc856cf227c4a97ddb4697bb51ab0da8dba4d94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abc856cf227c4a97ddb4697bb51ab0da8dba4d94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abc856cf227c4a97ddb4697bb51ab0da8dba4d94"}], "stats": {"total": 120, "additions": 69, "deletions": 51}, "files": [{"sha": "608d87006d1b69da492330c6bf7c5b5116199c07", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c16c58e1a91f412eae9dd6645c165a709246cb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c16c58e1a91f412eae9dd6645c165a709246cb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f4c16c58e1a91f412eae9dd6645c165a709246cb", "patch": "@@ -1,3 +1,12 @@\n+2019-07-03  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_spark.adb (Get_Observed_Or_Borrowed_Expr): New function to\n+\treturn go through traversal function call.\n+\t(Check_Type): Consistently use underlying type.\n+\t(Get_Perm): Adapt for case of elaboration code where variables\n+\tare not declared in the environment. Remove incorrect handling\n+\tof borrow and observe.\n+\n 2019-07-03  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* inline.adb (Build_Return_Object_Formal): New routine."}, {"sha": "b4e816ef2977fab3d3da48f9cbe8b35f2058f2b4", "filename": "gcc/ada/sem_spark.adb", "status": "modified", "additions": 60, "deletions": 51, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c16c58e1a91f412eae9dd6645c165a709246cb/gcc%2Fada%2Fsem_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c16c58e1a91f412eae9dd6645c165a709246cb/gcc%2Fada%2Fsem_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_spark.adb?ref=f4c16c58e1a91f412eae9dd6645c165a709246cb", "patch": "@@ -650,6 +650,12 @@ package body Sem_SPARK is\n    --  Check that type Typ is either not deep, or that it is an observing or\n    --  owning type according to SPARK RM 3.10\n \n+   function Get_Observed_Or_Borrowed_Expr (Expr : Node_Id) return Node_Id;\n+   pragma Precondition (Is_Path_Expression (Expr));\n+   --  Return the expression being borrowed/observed when borrowing or\n+   --  observing Expr. If Expr is a call to a traversal function, this is\n+   --  the first actual, otherwise it is Expr.\n+\n    function Get_Perm (N : Node_Or_Entity_Id) return Perm_Kind;\n    --  The function that takes a name as input and returns a permission\n    --  associated with it.\n@@ -999,15 +1005,9 @@ package body Sem_SPARK is\n          Expr    : Node_Id;\n          Is_Decl : Boolean)\n       is\n-         Borrowed : Node_Id;\n+         Borrowed : constant Node_Id := Get_Observed_Or_Borrowed_Expr (Expr);\n \n       begin\n-         if Is_Traversal_Function_Call (Expr) then\n-            Borrowed := First_Actual (Expr);\n-         else\n-            Borrowed := Expr;\n-         end if;\n-\n          --  SPARK RM 3.10(8): If the type of the target is an anonymous\n          --  access-to-variable type (an owning access type), the source shall\n          --  be an owning access object [..] whose root object is the target\n@@ -1038,14 +1038,9 @@ package body Sem_SPARK is\n          Expr    : Node_Id;\n          Is_Decl : Boolean)\n       is\n-         Observed : Node_Id;\n-      begin\n-         if Is_Traversal_Function_Call (Expr) then\n-            Observed := First_Actual (Expr);\n-         else\n-            Observed := Expr;\n-         end if;\n+         Observed : constant Node_Id := Get_Observed_Or_Borrowed_Expr (Expr);\n \n+      begin\n          --  ??? We are currently using the same restriction for observers\n          --  as for borrowers. To be seen if the SPARK RM current rule really\n          --  allows more uses.\n@@ -1131,6 +1126,7 @@ package body Sem_SPARK is\n             --  name that is in the Unrestricted state, and whose root\n             --  object is the target object itself.\n \n+            Check_Expression (Expr, Observe);\n             Handle_Observe (Target_Root, Expr, Is_Decl);\n \n          else\n@@ -1156,6 +1152,7 @@ package body Sem_SPARK is\n                end if;\n             end if;\n \n+            Check_Expression (Expr, Borrow);\n             Handle_Borrow (Target_Root, Expr, Is_Decl);\n          end if;\n \n@@ -2973,46 +2970,52 @@ package body Sem_SPARK is\n    ----------------\n \n    procedure Check_Type (Typ : Entity_Id) is\n+      Check_Typ : constant Entity_Id := Underlying_Type (Typ);\n+\n    begin\n-      case Type_Kind'(Ekind (Underlying_Type (Typ))) is\n+      case Type_Kind'(Ekind (Check_Typ)) is\n          when Access_Kind =>\n-            case Access_Kind'(Ekind (Typ)) is\n+            case Access_Kind'(Ekind (Underlying_Type (Check_Typ))) is\n                when E_Access_Type\n                   | E_Anonymous_Access_Type\n                =>\n                   null;\n                when E_Access_Subtype =>\n-                  Check_Type (Base_Type (Typ));\n+                  Check_Type (Base_Type (Check_Typ));\n                when E_Access_Attribute_Type =>\n-                  Error_Msg_N (\"access attribute not allowed in SPARK\", Typ);\n+                  Error_Msg_N (\"access attribute not allowed in SPARK\",\n+                               Check_Typ);\n                when E_Allocator_Type =>\n-                  Error_Msg_N (\"missing type resolution\", Typ);\n+                  Error_Msg_N (\"missing type resolution\", Check_Typ);\n                when E_General_Access_Type =>\n                   Error_Msg_NE\n-                    (\"general access type & not allowed in SPARK\", Typ, Typ);\n+                    (\"general access type & not allowed in SPARK\",\n+                     Check_Typ, Check_Typ);\n                when Access_Subprogram_Kind =>\n                   Error_Msg_NE\n                     (\"access to subprogram type & not allowed in SPARK\",\n-                     Typ, Typ);\n+                     Check_Typ, Check_Typ);\n             end case;\n \n          when E_Array_Type\n             | E_Array_Subtype\n          =>\n-            Check_Type (Component_Type (Typ));\n+            Check_Type (Component_Type (Check_Typ));\n \n          when Record_Kind =>\n-            if Is_Deep (Typ)\n-              and then (Is_Tagged_Type (Typ) or else Is_Class_Wide_Type (Typ))\n+            if Is_Deep (Check_Typ)\n+              and then (Is_Tagged_Type (Check_Typ)\n+                        or else Is_Class_Wide_Type (Check_Typ))\n             then\n                Error_Msg_NE\n-                 (\"tagged type & cannot be owning in SPARK\", Typ, Typ);\n+                 (\"tagged type & cannot be owning in SPARK\",\n+                  Check_Typ, Check_Typ);\n \n             else\n                declare\n                   Comp : Entity_Id;\n                begin\n-                  Comp := First_Component_Or_Discriminant (Typ);\n+                  Comp := First_Component_Or_Discriminant (Check_Typ);\n                   while Present (Comp) loop\n                      Check_Type (Etype (Comp));\n                      Next_Component_Or_Discriminant (Comp);\n@@ -3041,6 +3044,19 @@ package body Sem_SPARK is\n       end case;\n    end Check_Type;\n \n+   -----------------------------------\n+   -- Get_Observed_Or_Borrowed_Expr --\n+   -----------------------------------\n+\n+   function Get_Observed_Or_Borrowed_Expr (Expr : Node_Id) return Node_Id is\n+   begin\n+      if Is_Traversal_Function_Call (Expr) then\n+         return First_Actual (Expr);\n+      else\n+         return Expr;\n+      end if;\n+   end Get_Observed_Or_Borrowed_Expr;\n+\n    --------------\n    -- Get_Perm --\n    --------------\n@@ -4067,7 +4083,7 @@ package body Sem_SPARK is\n \n       Expr_Type : constant Entity_Id := Etype (Expr);\n       Root      : Entity_Id := Get_Root_Object (Expr);\n-      Perm      : Perm_Kind;\n+      Perm      : Perm_Kind_Option;\n \n    --  Start of processing for Process_Path\n \n@@ -4085,14 +4101,23 @@ package body Sem_SPARK is\n \n       Root := Unique_Entity (Root);\n \n-      --  The root object should have been declared and entered into the\n-      --  current permission environment.\n+      --  Except during elaboration, the root object should have been declared\n+      --  and entered into the current permission environment.\n \n-      if Get (Current_Perm_Env, Root) = null then\n+      if not Inside_Elaboration\n+        and then Get (Current_Perm_Env, Root) = null\n+      then\n          Illegal_Global_Usage (Expr);\n       end if;\n \n-      Perm := Get_Perm (Expr);\n+      --  During elaboration, only the validity of operations is checked, no\n+      --  need to compute the permission of Expr.\n+\n+      if Inside_Elaboration then\n+         Perm := None;\n+      else\n+         Perm := Get_Perm (Expr);\n+      end if;\n \n       --  Check permissions\n \n@@ -4265,27 +4290,11 @@ package body Sem_SPARK is\n                Set_Perm_Prefixes_Assign (Expr);\n             end;\n \n-         when Borrow =>\n-\n-            --  Set permission NO for the path and its extensions\n-\n-            declare\n-               Tree : constant Perm_Tree_Access :=\n-                 Set_Perm_Prefixes (Expr, No_Access);\n-            begin\n-               Set_Perm_Extensions (Tree, No_Access);\n-            end;\n-\n-         when Observe =>\n-\n-            --  Set permission R for the path and its extensions\n+         --  Borrowing and observing of paths is handled by the variables\n+         --  Current_Borrowers and Current_Observers.\n \n-            declare\n-               Tree : constant Perm_Tree_Access :=\n-                 Set_Perm_Prefixes (Expr, Read_Only);\n-            begin\n-               Set_Perm_Extensions (Tree, Read_Only);\n-            end;\n+         when Borrow | Observe =>\n+            null;\n       end case;\n    end Process_Path;\n "}]}