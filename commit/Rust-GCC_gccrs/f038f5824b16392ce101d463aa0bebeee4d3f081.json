{"sha": "f038f5824b16392ce101d463aa0bebeee4d3f081", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjAzOGY1ODI0YjE2MzkyY2UxMDFkNDYzYWEwYmViZWVlNGQzZjA4MQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-06-16T17:13:34Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-06-16T17:13:34Z"}, "message": "re PR libstdc++/57263 (std::set with user-defined allocator - compile error)\n\n\tPR libstdc++/57263\n\t* include/bits/forward_list.h (_Fwd_list_base): Convert to/from\n\tallocator's pointer type.\n\t* include/bits/hashtable.h (_Hashtable): Likewise.\n\t* testsuite/util/testsuite_allocator.h (CustomPointerAlloc): Add.\n\t* testsuite/23_containers/forward_list/allocator/ext_ptr.cc: New.\n\t* testsuite/23_containers/unordered_set/allocator/ext_ptr.cc: New.\n\t* testsuite/23_containers/vector/allocator/ext_ptr.cc: New.\n\nFrom-SVN: r200136", "tree": {"sha": "a787782bbdf54370a295ec8cc411fa7005308b66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a787782bbdf54370a295ec8cc411fa7005308b66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f038f5824b16392ce101d463aa0bebeee4d3f081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f038f5824b16392ce101d463aa0bebeee4d3f081", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f038f5824b16392ce101d463aa0bebeee4d3f081", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f038f5824b16392ce101d463aa0bebeee4d3f081/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d2cddc125d4d433f3486cfdd93129bfa52877b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d2cddc125d4d433f3486cfdd93129bfa52877b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d2cddc125d4d433f3486cfdd93129bfa52877b3"}], "stats": {"total": 207, "additions": 200, "deletions": 7}, "files": [{"sha": "7501675df35dcc4dbb49f5541c63509b535ffaa3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f038f5824b16392ce101d463aa0bebeee4d3f081/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f038f5824b16392ce101d463aa0bebeee4d3f081/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f038f5824b16392ce101d463aa0bebeee4d3f081", "patch": "@@ -1,3 +1,14 @@\n+2013-06-16  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/57263\n+\t* include/bits/forward_list.h (_Fwd_list_base): Convert to/from\n+\tallocator's pointer type.\n+\t* include/bits/hashtable.h (_Hashtable): Likewise.\n+\t* testsuite/util/testsuite_allocator.h (CustomPointerAlloc): Add.\n+\t* testsuite/23_containers/forward_list/allocator/ext_ptr.cc: New.\n+\t* testsuite/23_containers/unordered_set/allocator/ext_ptr.cc: New.\n+\t* testsuite/23_containers/vector/allocator/ext_ptr.cc: New.\n+\n 2013-06-16  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/std/shared_mutex: Implement N3659."}, {"sha": "c3cee971399ae34fdece64cbfd1ae253bd17cdfe", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f038f5824b16392ce101d463aa0bebeee4d3f081/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f038f5824b16392ce101d463aa0bebeee4d3f081/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=f038f5824b16392ce101d463aa0bebeee4d3f081", "patch": "@@ -338,7 +338,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       _Node*\n       _M_get_node()\n-      { return _Node_alloc_traits::allocate(_M_get_Node_allocator(), 1); }\n+      {\n+\tauto __ptr = _Node_alloc_traits::allocate(_M_get_Node_allocator(), 1);\n+\treturn std::__addressof(*__ptr);\n+      }\n \n       template<typename... _Args>\n         _Node*\n@@ -367,7 +370,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       void\n       _M_put_node(_Node* __p)\n-      { _Node_alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }\n+      {\n+\ttypedef typename _Node_alloc_traits::pointer _Ptr;\n+\tauto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__p);\n+\t_Node_alloc_traits::deallocate(_M_get_Node_allocator(), __ptr, 1);\n+      }\n \n       _Fwd_list_node_base*\n       _M_erase_after(_Fwd_list_node_base* __pos);"}, {"sha": "8ce264ed72e73be2e48ebc9a4c954f97c608b524", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f038f5824b16392ce101d463aa0bebeee4d3f081/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f038f5824b16392ce101d463aa0bebeee4d3f081/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=f038f5824b16392ce101d463aa0bebeee4d3f081", "patch": "@@ -775,7 +775,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t _H1, _H2, _Hash, _RehashPolicy, _Traits>::\n       _M_allocate_node(_Args&&... __args)\n       {\n-\t__node_type* __n = _Node_alloc_traits::allocate(_M_node_allocator(), 1);\n+\tauto __nptr = _Node_alloc_traits::allocate(_M_node_allocator(), 1);\n+\t__node_type* __n = std::__addressof(*__nptr);\n \t__try\n \t  {\n \t    _Value_alloc_type __a(_M_node_allocator());\n@@ -786,7 +787,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n \t__catch(...)\n \t  {\n-\t    _Node_alloc_traits::deallocate(_M_node_allocator(), __n, 1);\n+\t    _Node_alloc_traits::deallocate(_M_node_allocator(), __nptr, 1);\n \t    __throw_exception_again;\n \t  }\n       }\n@@ -800,10 +801,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       _H1, _H2, _Hash, _RehashPolicy, _Traits>::\n     _M_deallocate_node(__node_type* __n)\n     {\n+      typedef typename _Node_alloc_traits::pointer _Ptr;\n+      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);\n       _Value_alloc_type __a(_M_node_allocator());\n       _Value_alloc_traits::destroy(__a, __n->_M_valptr());\n       __n->~__node_type();\n-      _Node_alloc_traits::deallocate(_M_node_allocator(), __n, 1);\n+      _Node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);\n     }\n \n   template<typename _Key, typename _Value,\n@@ -835,7 +838,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       _Bucket_alloc_type __alloc(_M_node_allocator());\n \n-      __bucket_type* __p = _Bucket_alloc_traits::allocate(__alloc, __n);\n+      auto __ptr = _Bucket_alloc_traits::allocate(__alloc, __n);\n+      __bucket_type* __p = std::__addressof(*__ptr);\n       __builtin_memset(__p, 0, __n * sizeof(__bucket_type));\n       return __p;\n     }\n@@ -849,8 +853,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       _H1, _H2, _Hash, _RehashPolicy, _Traits>::\n     _M_deallocate_buckets(__bucket_type* __bkts, size_type __n)\n     {\n+      typedef typename _Bucket_alloc_traits::pointer _Ptr;\n+      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);\n       _Bucket_alloc_type __alloc(_M_node_allocator());\n-      _Bucket_alloc_traits::deallocate(__alloc, __bkts, __n);\n+      _Bucket_alloc_traits::deallocate(__alloc, __ptr, __n);\n     }\n \n   template<typename _Key, typename _Value,"}, {"sha": "6f3a0ed75dcb211c5d893375c26d08eb77094eef", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/allocator/ext_ptr.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f038f5824b16392ce101d463aa0bebeee4d3f081/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fext_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f038f5824b16392ce101d463aa0bebeee4d3f081/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fext_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fext_ptr.cc?ref=f038f5824b16392ce101d463aa0bebeee4d3f081", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <forward_list>\n+#include <memory>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+struct T { int i; };\n+bool operator==(const T& l, const T& r) { return l.i == r.i; }\n+bool operator<(const T& l, const T& r) { return l.i < r.i; }\n+\n+using __gnu_test::CustomPointerAlloc;\n+\n+template class std::forward_list<T, CustomPointerAlloc<T>>;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef CustomPointerAlloc<T> alloc_type;\n+  typedef std::forward_list<T, alloc_type> test_type;\n+  test_type v;\n+  v.push_front(T());\n+  VERIFY( ++v.begin() == v.end() );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "55d9af3a5cb34d8ac24e8a4655e452d12a5b3eb6", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/allocator/ext_ptr.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f038f5824b16392ce101d463aa0bebeee4d3f081/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fallocator%2Fext_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f038f5824b16392ce101d463aa0bebeee4d3f081/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fallocator%2Fext_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fallocator%2Fext_ptr.cc?ref=f038f5824b16392ce101d463aa0bebeee4d3f081", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <unordered_set>\n+#include <memory>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+struct T { int i; };\n+bool operator==(const T& l, const T& r) { return l.i == r.i; }\n+struct H { std::size_t operator()(const T& t) const noexcept { return t.i; }\n+};\n+struct E : std::equal_to<T> { };\n+\n+using __gnu_test::CustomPointerAlloc;\n+\n+template class std::unordered_set<T, H, E, CustomPointerAlloc<T>>;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef CustomPointerAlloc<T> alloc_type;\n+  typedef std::unordered_set<T, H, E, alloc_type> test_type;\n+  test_type v;\n+  v.insert(T());\n+  VERIFY( ++v.begin() == v.end() );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "b94a47a939baa911f66fb5fd475634cd3008afbf", "filename": "libstdc++-v3/testsuite/23_containers/vector/allocator/ext_ptr.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f038f5824b16392ce101d463aa0bebeee4d3f081/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fext_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f038f5824b16392ce101d463aa0bebeee4d3f081/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fext_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fext_ptr.cc?ref=f038f5824b16392ce101d463aa0bebeee4d3f081", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <vector>\n+#include <memory>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+struct T { int i; };\n+\n+using __gnu_test::CustomPointerAlloc;\n+\n+template class std::vector<T, CustomPointerAlloc<T>>;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef CustomPointerAlloc<T> alloc_type;\n+  typedef std::vector<T, alloc_type> test_type;\n+  test_type v;\n+  v.push_back(T());\n+  VERIFY( ++v.begin() == v.end() );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "d569eb0712d0c87c701b69e8a06f73bd5de91514", "filename": "libstdc++-v3/testsuite/util/testsuite_allocator.h", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f038f5824b16392ce101d463aa0bebeee4d3f081/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f038f5824b16392ce101d463aa0bebeee4d3f081/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h?ref=f038f5824b16392ce101d463aa0bebeee4d3f081", "patch": "@@ -28,6 +28,7 @@\n \n #include <tr1/unordered_map>\n #include <bits/move.h>\n+#include <ext/pointer.h>\n #include <testsuite_hooks.h>\n \n namespace __gnu_test\n@@ -488,6 +489,36 @@ namespace __gnu_test\n         { typedef ExplicitConsAlloc<Up> other; };\n     };\n \n+#if __cplusplus >= 201103L\n+  template<typename Tp>\n+    class CustomPointerAlloc : public std::allocator<Tp>\n+    {\n+      template<typename Up, typename Sp = __gnu_cxx::_Std_pointer_impl<Up>>\n+\tusing Ptr =  __gnu_cxx::_Pointer_adapter<Sp>;\n+\n+    public:\n+      CustomPointerAlloc() = default;\n+\n+      template<typename Up>\n+        CustomPointerAlloc(const CustomPointerAlloc<Up>&) { }\n+\n+      template<typename Up>\n+        struct rebind\n+        { typedef CustomPointerAlloc<Up> other; };\n+\n+      typedef Ptr<Tp> \t\tpointer;\n+      typedef Ptr<const Tp>\tconst_pointer;\n+      typedef Ptr<void>\t\tvoid_pointer;\n+      typedef Ptr<const void>\tconst_void_pointer;\n+\n+      pointer allocate(std::size_t n, pointer = {})\n+      { return pointer(std::allocator<Tp>::allocate(n)); }\n+\n+      void deallocate(pointer p, std::size_t n)\n+      { std::allocator<Tp>::deallocate(std::addressof(*p), n); }\n+    };\n+#endif\n+\n } // namespace __gnu_test\n \n #endif // _GLIBCXX_TESTSUITE_ALLOCATOR_H"}]}