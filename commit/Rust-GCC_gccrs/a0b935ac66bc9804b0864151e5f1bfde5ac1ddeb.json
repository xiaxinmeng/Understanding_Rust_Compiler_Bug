{"sha": "a0b935ac66bc9804b0864151e5f1bfde5ac1ddeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBiOTM1YWM2NmJjOTgwNGIwODY0MTUxZTVmMWJmZGU1YWMxZGRlYg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-23T22:46:12Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-24T01:47:34Z"}, "message": "analyzer: avoid relying on system <assert.h> in testsuite (PR 93367)\n\nPR analyzer/93367 reports a testsuite failure in abort.c on\nhppa64-hp-hpux11.11 when detecting if the analyzer \"knows\" that the\ncondition holds after the assert.\n\nThe root cause is that the assertion failure function in that\nconfiguration's <assert.h> is not marked with\n__attribute__ ((__noreturn__)).\n\nThis patch reworks the test to avoid <assert.h> in favor of a custom\nimplementation of assert, so that the test demonstrates the idea without\nrelying on properties of <assert.h>.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/93367\n\t* gcc.dg/analyzer/abort.c: Remove include of <assert.h>.\n\tReplace use of assert with a custom assertion implementation.", "tree": {"sha": "162e8a14cf0e4b482bf62521ec94e7179393820d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/162e8a14cf0e4b482bf62521ec94e7179393820d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0b935ac66bc9804b0864151e5f1bfde5ac1ddeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0b935ac66bc9804b0864151e5f1bfde5ac1ddeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0b935ac66bc9804b0864151e5f1bfde5ac1ddeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0b935ac66bc9804b0864151e5f1bfde5ac1ddeb/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "472dc648ce3e7661762931d584d239611ddca964", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/472dc648ce3e7661762931d584d239611ddca964", "html_url": "https://github.com/Rust-GCC/gccrs/commit/472dc648ce3e7661762931d584d239611ddca964"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "df547bcc2ae675743390f88bd4c512894df05d62", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b935ac66bc9804b0864151e5f1bfde5ac1ddeb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b935ac66bc9804b0864151e5f1bfde5ac1ddeb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a0b935ac66bc9804b0864151e5f1bfde5ac1ddeb", "patch": "@@ -1,3 +1,9 @@\n+2020-01-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93367\n+\t* gcc.dg/analyzer/abort.c: Remove include of <assert.h>.\n+\tReplace use of assert with a custom assertion implementation.\n+\n 2020-01-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR inline-asm/93027"}, {"sha": "9497ae30b469a4ad0b8132ecb6671b7203551ede", "filename": "gcc/testsuite/gcc.dg/analyzer/abort.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b935ac66bc9804b0864151e5f1bfde5ac1ddeb/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fabort.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b935ac66bc9804b0864151e5f1bfde5ac1ddeb/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fabort.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fabort.c?ref=a0b935ac66bc9804b0864151e5f1bfde5ac1ddeb", "patch": "@@ -1,4 +1,3 @@\n-#include <assert.h>\n #include <stdio.h>\n #include <stdlib.h>\n #include \"analyzer-decls.h\"\n@@ -62,11 +61,20 @@ void test_4 (void *ptr)\n \n /**************************************************************************/\n \n+/* Verify that we discover conditions from assertions if the assert macro\n+   isn't disabled, and that it has its failure-handler labelled with\n+   __attribute__ ((__noreturn__)).\n+   This attribute isn't present for all implementations of <assert.h>, so\n+   we have to test the idea using our own assert macro.  */\n+\n+extern void my_assert_fail (const char *expr, const char *file, int line)\n+  __attribute__ ((__noreturn__));\n+\n+#define MY_ASSERT(EXPR) \\\n+  do { if (!(EXPR)) my_assert_fail (#EXPR, __FILE__, __LINE__); } while (0)\n+\n void test_5 (int i)\n {\n-  assert (i < 10);\n-\n-  /* We have not defined NDEBUG, so this will call __assert_fail if\n-     i >= 10, which is labelled with __attribute__ ((__noreturn__)).  */\n+  MY_ASSERT (i < 10);\n   __analyzer_eval (i < 10); /* { dg-warning \"TRUE\" } */\n }"}]}