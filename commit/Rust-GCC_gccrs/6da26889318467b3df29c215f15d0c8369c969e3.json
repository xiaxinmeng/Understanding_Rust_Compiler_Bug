{"sha": "6da26889318467b3df29c215f15d0c8369c969e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRhMjY4ODkzMTg0NjdiM2RmMjljMjE1ZjE1ZDBjODM2OWM5NjllMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-02-12T10:37:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-02-12T10:37:38Z"}, "message": "re PR rtl-optimization/56151 (Performance degradation after r194054 on x86 Atom.)\n\n\tPR rtl-optimization/56151\n\t* optabs.c (add_equal_note): Don't return 0 if target is a MEM,\n\tequal to op0 or op1, and last_insn pattern is CODE operation\n\twith MEM dest and one of the operands matches that MEM.\n\n\t* gcc.target/i386/pr56151.c: New test.\n\nCo-Authored-By: Steven Bosscher <steven@gcc.gnu.org>\n\nFrom-SVN: r195972", "tree": {"sha": "f65fc19aa8ddb84c4b86e34d59f3e05f225bb1c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f65fc19aa8ddb84c4b86e34d59f3e05f225bb1c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6da26889318467b3df29c215f15d0c8369c969e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6da26889318467b3df29c215f15d0c8369c969e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6da26889318467b3df29c215f15d0c8369c969e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6da26889318467b3df29c215f15d0c8369c969e3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1590a83511111c9621a72800b361589aa11734b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1590a83511111c9621a72800b361589aa11734b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1590a83511111c9621a72800b361589aa11734b9"}], "stats": {"total": 65, "additions": 59, "deletions": 6}, "files": [{"sha": "d959c9c036459dccc5369451c430c6ec8677a49c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da26889318467b3df29c215f15d0c8369c969e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da26889318467b3df29c215f15d0c8369c969e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6da26889318467b3df29c215f15d0c8369c969e3", "patch": "@@ -1,3 +1,11 @@\n+2013-02-12  Jakub Jelinek  <jakub@redhat.com>\n+\t    Steven Bosscher   <steven@gcc.gnu.org>\n+\n+\tPR rtl-optimization/56151\n+\t* optabs.c (add_equal_note): Don't return 0 if target is a MEM,\n+\tequal to op0 or op1, and last_insn pattern is CODE operation\n+\twith MEM dest and one of the operands matches that MEM.\n+\n 2013-02-11  Sriraman Tallam  <tmsriramgoogle.com>\n \n \t* doc/extend.texi: Document Function Multiversioning and \"default\""}, {"sha": "c1dacf487a0c55305aaf201cb938304e37179b70", "filename": "gcc/optabs.c", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da26889318467b3df29c215f15d0c8369c969e3/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da26889318467b3df29c215f15d0c8369c969e3/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=6da26889318467b3df29c215f15d0c8369c969e3", "patch": "@@ -190,17 +190,40 @@ add_equal_note (rtx insns, rtx target, enum rtx_code code, rtx op0, rtx op1)\n   if (GET_CODE (target) == ZERO_EXTRACT)\n     return 1;\n \n-  /* If TARGET is in OP0 or OP1, punt.  We'd end up with a note referencing\n-     a value changing in the insn, so the note would be invalid for CSE.  */\n-  if (reg_overlap_mentioned_p (target, op0)\n-      || (op1 && reg_overlap_mentioned_p (target, op1)))\n-    return 0;\n-\n   for (last_insn = insns;\n        NEXT_INSN (last_insn) != NULL_RTX;\n        last_insn = NEXT_INSN (last_insn))\n     ;\n \n+  /* If TARGET is in OP0 or OP1, punt.  We'd end up with a note referencing\n+     a value changing in the insn, so the note would be invalid for CSE.  */\n+  if (reg_overlap_mentioned_p (target, op0)\n+      || (op1 && reg_overlap_mentioned_p (target, op1)))\n+    {\n+      if (MEM_P (target)\n+\t  && (rtx_equal_p (target, op0)\n+\t      || (op1 && rtx_equal_p (target, op1))))\n+\t{\n+\t  /* For MEM target, with MEM = MEM op X, prefer no REG_EQUAL note\n+\t     over expanding it as temp = MEM op X, MEM = temp.  If the target\n+\t     supports MEM = MEM op X instructions, it is sometimes too hard\n+\t     to reconstruct that form later, especially if X is also a memory,\n+\t     and due to multiple occurrences of addresses the address might\n+\t     be forced into register unnecessarily.\n+\t     Note that not emitting the REG_EQUIV note might inhibit\n+\t     CSE in some cases.  */\n+\t  set = single_set (last_insn);\n+\t  if (set\n+\t      && GET_CODE (SET_SRC (set)) == code\n+\t      && MEM_P (SET_DEST (set))\n+\t      && (rtx_equal_p (SET_DEST (set), XEXP (SET_SRC (set), 0))\n+\t\t  || (op1 && rtx_equal_p (SET_DEST (set),\n+\t\t\t\t\t  XEXP (SET_SRC (set), 1)))))\n+\t    return 1;\n+\t}\n+      return 0;\n+    }\n+\n   set = single_set (last_insn);\n   if (set == NULL_RTX)\n     return 1;"}, {"sha": "e9ab329328a3c80dbed755841e2612ef4dc5be31", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da26889318467b3df29c215f15d0c8369c969e3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da26889318467b3df29c215f15d0c8369c969e3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6da26889318467b3df29c215f15d0c8369c969e3", "patch": "@@ -1,3 +1,8 @@\n+2013-02-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/56151\n+\t* gcc.target/i386/pr56151.c: New test.\n+\n 2013-02-11  Sriraman Tallam  <tmsriramgoogle.com>\n \n \t* g++.dg/ext/mv12.C: New test."}, {"sha": "24a1b8ae46caf99fff73f564b5cdd1b320e19d1d", "filename": "gcc/testsuite/gcc.target/i386/pr56151.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da26889318467b3df29c215f15d0c8369c969e3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr56151.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da26889318467b3df29c215f15d0c8369c969e3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr56151.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr56151.c?ref=6da26889318467b3df29c215f15d0c8369c969e3", "patch": "@@ -0,0 +1,17 @@\n+/* PR rtl-optimization/56151 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int vara, varb;\n+\n+void\n+foo (int i, int j)\n+{\n+  vara = varb | vara;\n+}\n+\n+/* Verify the above is compiled into movl varb, %reg; orl %reg, vara instead\n+   of longer movl vara, %reg; orl varb, %reg; movl %reg, vara.  */\n+/* { dg-final { scan-assembler-not \"mov\\[^\\n\\r]*vara\" { target nonpic } } } */\n+/* { dg-final { scan-assembler-times \"mov\\[^\\n\\r]*varb\" 1 { target nonpic } } } */\n+/* { dg-final { scan-assembler-times \"or\\[^\\n\\r]*vara\" 1 { target nonpic } } } */"}]}