{"sha": "f17b0ebc79a09122a3ed86ded43c3c0e68640314", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE3YjBlYmM3OWEwOTEyMmEzZWQ4NmRlZDQzYzNjMGU2ODY0MDMxNA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-11-17T13:20:08Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-11-17T13:20:08Z"}, "message": "[ARM] PR 68143 Properly update memory offsets when expanding setmem\n\n\tPR target/68143\n\t* config/arm/arm.c (arm_block_set_unaligned_vect): Keep track of\n\toffset from dstbase and use it appropriately in\n\tadjust_automodify_address.\n\t(arm_block_set_aligned_vect): Likewise.\n\n\t* gcc.c-torture/execute/pr68143_1.c: New test.\n\nFrom-SVN: r230462", "tree": {"sha": "24a71f5e90b257aaa72fb3c4bdf1b114fc391694", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24a71f5e90b257aaa72fb3c4bdf1b114fc391694"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f17b0ebc79a09122a3ed86ded43c3c0e68640314", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f17b0ebc79a09122a3ed86ded43c3c0e68640314", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f17b0ebc79a09122a3ed86ded43c3c0e68640314", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f17b0ebc79a09122a3ed86ded43c3c0e68640314/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8502951bceff3f0679f79182c0285dcc54dfa717", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8502951bceff3f0679f79182c0285dcc54dfa717", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8502951bceff3f0679f79182c0285dcc54dfa717"}], "stats": {"total": 81, "additions": 68, "deletions": 13}, "files": [{"sha": "23de9802231ec1341e11528900bd225c29c59696", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17b0ebc79a09122a3ed86ded43c3c0e68640314/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17b0ebc79a09122a3ed86ded43c3c0e68640314/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f17b0ebc79a09122a3ed86ded43c3c0e68640314", "patch": "@@ -1,3 +1,11 @@\n+2015-11-17  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/68143\n+\t* config/arm/arm.c (arm_block_set_unaligned_vect): Keep track of\n+\toffset from dstbase and use it appropriately in\n+\tadjust_automodify_address.\n+\t(arm_block_set_aligned_vect): Likewise.\n+\n 2015-11-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/visium/t-visium (MULTILIB_OPTIONS): Add muser-mode."}, {"sha": "c3c0c931ca3355b20e0c24789c6172a059a4267a", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17b0ebc79a09122a3ed86ded43c3c0e68640314/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17b0ebc79a09122a3ed86ded43c3c0e68640314/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f17b0ebc79a09122a3ed86ded43c3c0e68640314", "patch": "@@ -29164,7 +29164,7 @@ arm_block_set_unaligned_vect (rtx dstbase,\n   rtx (*gen_func) (rtx, rtx);\n   machine_mode mode;\n   unsigned HOST_WIDE_INT v = value;\n-\n+  unsigned int offset = 0;\n   gcc_assert ((align & 0x3) != 0);\n   nelt_v8 = GET_MODE_NUNITS (V8QImode);\n   nelt_v16 = GET_MODE_NUNITS (V16QImode);\n@@ -29185,7 +29185,7 @@ arm_block_set_unaligned_vect (rtx dstbase,\n     return false;\n \n   dst = copy_addr_to_reg (XEXP (dstbase, 0));\n-  mem = adjust_automodify_address (dstbase, mode, dst, 0);\n+  mem = adjust_automodify_address (dstbase, mode, dst, offset);\n \n   v = sext_hwi (v, BITS_PER_WORD);\n   val_elt = GEN_INT (v);\n@@ -29202,7 +29202,11 @@ arm_block_set_unaligned_vect (rtx dstbase,\n     {\n       emit_insn ((*gen_func) (mem, reg));\n       if (i + 2 * nelt_mode <= length)\n-\temit_insn (gen_add2_insn (dst, GEN_INT (nelt_mode)));\n+\t{\n+\t  emit_insn (gen_add2_insn (dst, GEN_INT (nelt_mode)));\n+\t  offset += nelt_mode;\n+\t  mem = adjust_automodify_address (dstbase, mode, dst, offset);\n+\t}\n     }\n \n   /* If there are not less than nelt_v8 bytes leftover, we must be in\n@@ -29213,6 +29217,9 @@ arm_block_set_unaligned_vect (rtx dstbase,\n   if (i + nelt_v8 < length)\n     {\n       emit_insn (gen_add2_insn (dst, GEN_INT (length - i)));\n+      offset += length - i;\n+      mem = adjust_automodify_address (dstbase, mode, dst, offset);\n+\n       /* We are shifting bytes back, set the alignment accordingly.  */\n       if ((length & 1) != 0 && align >= 2)\n \tset_mem_align (mem, BITS_PER_UNIT);\n@@ -29223,12 +29230,13 @@ arm_block_set_unaligned_vect (rtx dstbase,\n   else if (i < length && i + nelt_v8 >= length)\n     {\n       if (mode == V16QImode)\n-\t{\n-\t  reg = gen_lowpart (V8QImode, reg);\n-\t  mem = adjust_automodify_address (dstbase, V8QImode, dst, 0);\n-\t}\n+\treg = gen_lowpart (V8QImode, reg);\n+\n       emit_insn (gen_add2_insn (dst, GEN_INT ((length - i)\n \t\t\t\t\t      + (nelt_mode - nelt_v8))));\n+      offset += (length - i) + (nelt_mode - nelt_v8);\n+      mem = adjust_automodify_address (dstbase, V8QImode, dst, offset);\n+\n       /* We are shifting bytes back, set the alignment accordingly.  */\n       if ((length & 1) != 0 && align >= 2)\n \tset_mem_align (mem, BITS_PER_UNIT);\n@@ -29255,6 +29263,7 @@ arm_block_set_aligned_vect (rtx dstbase,\n   rtx rval[MAX_VECT_LEN];\n   machine_mode mode;\n   unsigned HOST_WIDE_INT v = value;\n+  unsigned int offset = 0;\n \n   gcc_assert ((align & 0x3) == 0);\n   nelt_v8 = GET_MODE_NUNITS (V8QImode);\n@@ -29286,14 +29295,15 @@ arm_block_set_aligned_vect (rtx dstbase,\n   /* Handle first 16 bytes specially using vst1:v16qi instruction.  */\n   if (mode == V16QImode)\n     {\n-      mem = adjust_automodify_address (dstbase, mode, dst, 0);\n+      mem = adjust_automodify_address (dstbase, mode, dst, offset);\n       emit_insn (gen_movmisalignv16qi (mem, reg));\n       i += nelt_mode;\n       /* Handle (8, 16) bytes leftover using vst1:v16qi again.  */\n       if (i + nelt_v8 < length && i + nelt_v16 > length)\n \t{\n \t  emit_insn (gen_add2_insn (dst, GEN_INT (length - nelt_mode)));\n-\t  mem = adjust_automodify_address (dstbase, mode, dst, 0);\n+\t  offset += length - nelt_mode;\n+\t  mem = adjust_automodify_address (dstbase, mode, dst, offset);\n \t  /* We are shifting bytes back, set the alignment accordingly.  */\n \t  if ((length & 0x3) == 0)\n \t    set_mem_align (mem, BITS_PER_UNIT * 4);\n@@ -29315,7 +29325,7 @@ arm_block_set_aligned_vect (rtx dstbase,\n   for (; (i + nelt_mode <= length); i += nelt_mode)\n     {\n       addr = plus_constant (Pmode, dst, i);\n-      mem = adjust_automodify_address (dstbase, mode, addr, i);\n+      mem = adjust_automodify_address (dstbase, mode, addr, offset + i);\n       emit_move_insn (mem, reg);\n     }\n \n@@ -29324,8 +29334,8 @@ arm_block_set_aligned_vect (rtx dstbase,\n   if (i + UNITS_PER_WORD == length)\n     {\n       addr = plus_constant (Pmode, dst, i - UNITS_PER_WORD);\n-      mem = adjust_automodify_address (dstbase, mode,\n-\t\t\t\t       addr, i - UNITS_PER_WORD);\n+      offset += i - UNITS_PER_WORD;\n+      mem = adjust_automodify_address (dstbase, mode, addr, offset);\n       /* We are shifting 4 bytes back, set the alignment accordingly.  */\n       if (align > UNITS_PER_WORD)\n \tset_mem_align (mem, BITS_PER_UNIT * UNITS_PER_WORD);\n@@ -29337,7 +29347,8 @@ arm_block_set_aligned_vect (rtx dstbase,\n   else if (i < length)\n     {\n       emit_insn (gen_add2_insn (dst, GEN_INT (length - nelt_mode)));\n-      mem = adjust_automodify_address (dstbase, mode, dst, 0);\n+      offset += length - nelt_mode;\n+      mem = adjust_automodify_address (dstbase, mode, dst, offset);\n       /* We are shifting bytes back, set the alignment accordingly.  */\n       if ((length & 1) == 0)\n \tset_mem_align (mem, BITS_PER_UNIT * 2);"}, {"sha": "9f65ab5cffc0001fccceda851bfef71d12c5b5a3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17b0ebc79a09122a3ed86ded43c3c0e68640314/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17b0ebc79a09122a3ed86ded43c3c0e68640314/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f17b0ebc79a09122a3ed86ded43c3c0e68640314", "patch": "@@ -1,3 +1,8 @@\n+2015-11-17  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/68143\n+\t* gcc.c-torture/execute/pr68143_1.c: New test.\n+\n 2015-11-17  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/torture/pr68264.c: Use dg-add-options ieee."}, {"sha": "cbfbbc2458bf6865a33f7fbb30ed77014f9a07c1", "filename": "gcc/testsuite/gcc.c-torture/execute/pr68143_1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17b0ebc79a09122a3ed86ded43c3c0e68640314/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr68143_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17b0ebc79a09122a3ed86ded43c3c0e68640314/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr68143_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr68143_1.c?ref=f17b0ebc79a09122a3ed86ded43c3c0e68640314", "patch": "@@ -0,0 +1,31 @@\n+#define NULL 0\n+\n+struct stuff\n+{\n+    int a;\n+    int b;\n+    int c;\n+    int d;\n+    int e;\n+    char *f;\n+    int g;\n+};\n+\n+void __attribute__ ((noinline))\n+bar (struct stuff *x)\n+{\n+  if (x->g != 2)\n+    __builtin_abort ();\n+}\n+\n+int\n+main (int argc, char** argv)\n+{\n+  struct stuff x = {0, 0, 0, 0, 0, NULL, 0};\n+  x.a = 100;\n+  x.d = 100;\n+  x.g = 2;\n+  /* Struct should now look like {100, 0, 0, 100, 0, 0, 0, 2}.  */\n+  bar (&x);\n+  return 0;\n+}"}]}