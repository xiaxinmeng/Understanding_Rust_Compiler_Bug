{"sha": "6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIyMGY5YjU5YWJiYjhiZGZlOWEwMDE5YTQ5MTRkMmUzMGQ0Yzc0NQ==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-01-25T04:14:40Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-01-25T04:14:40Z"}, "message": "stl_tempbuf.h (_Temporary_buffer): Add doxygen hook.\n\n2002-01-24  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* include/bits/stl_tempbuf.h (_Temporary_buffer):  Add doxygen hook.\n\t* include/bits/stl_algo.h:  Include stl_tempbuf.h.\n\t* include/ext/memory:  Do not include stl_tempbuf.h.\n\t(temporary_buffer):  Add doxygen hook.\n\t(__get_temporary_buffer, get_temporary_buffer,\n\treturn_temporary_buffer):  Move back to std:: header...\n\t* include/std/std_memory.h:  ...here.  Do not include stl_tempbuf.h.\n\t* include/ext/rope:  Do not include stl_tempbuf.h.\n\t* include/ext/stl_hashtable.h:  Likewise.\n\t* include/std/std_algorithm.h:  Likewise.\n\t* testsuite/20_util/temporary_buffer.cc:  New file.\n\nFrom-SVN: r49199", "tree": {"sha": "ebe1be75d7f2a777d294ea79db91944870a7e0a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebe1be75d7f2a777d294ea79db91944870a7e0a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745/comments", "author": null, "committer": null, "parents": [{"sha": "9fa5237cb7f4a63d9e98ba3db252531e35331872", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa5237cb7f4a63d9e98ba3db252531e35331872", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fa5237cb7f4a63d9e98ba3db252531e35331872"}], "stats": {"total": 190, "additions": 144, "deletions": 46}, "files": [{"sha": "62a66d09844c7a4fb9b4da0293e0085c22fbc50f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745", "patch": "@@ -1,3 +1,17 @@\n+2002-01-24  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* include/bits/stl_tempbuf.h (_Temporary_buffer):  Add doxygen hook.\n+\t* include/bits/stl_algo.h:  Include stl_tempbuf.h.\n+\t* include/ext/memory:  Do not include stl_tempbuf.h.\n+\t(temporary_buffer):  Add doxygen hook.\n+\t(__get_temporary_buffer, get_temporary_buffer,\n+\treturn_temporary_buffer):  Move back to std:: header...\n+\t* include/std/std_memory.h:  ...here.  Do not include stl_tempbuf.h.\n+\t* include/ext/rope:  Do not include stl_tempbuf.h.\n+\t* include/ext/stl_hashtable.h:  Likewise.\n+\t* include/std/std_algorithm.h:  Likewise.\n+\t* testsuite/20_util/temporary_buffer.cc:  New file.\n+\n 2002-01-24  andrew@andypo.net\n \t    (tweaks, test and commit by Loren J. Rittle  <ljrittle@acm.org>)\n "}, {"sha": "a8059b74a37d112a61049b0036332d5706bf9c2e", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745", "patch": "@@ -62,6 +62,7 @@\n #define __GLIBCPP_INTERNAL_ALGO_H\n \n #include <bits/stl_heap.h>\n+#include <bits/stl_tempbuf.h>     // for _Temporary_buffer\n \n // See concept_check.h for the __glibcpp_*_requires macros.\n "}, {"sha": "0bf4718df2e73fb3f97881ea4c704f785977cda7", "filename": "libstdc++-v3/include/bits/stl_tempbuf.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h?ref=6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745", "patch": "@@ -1,6 +1,6 @@\n // Temporary buffer implementation -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -64,13 +64,20 @@\n namespace std\n {\n \n+/**\n+ *  @maint\n+ *  This class is used in two places:  stl_algo.h and ext/memory, where it\n+ *  is wrapped as the temporary_buffer class.\n+ *  @endmaint\n+*/\n template <class _ForwardIterator, class _Tp>\n class _Temporary_buffer {\n private:\n   ptrdiff_t  _M_original_len;\n   ptrdiff_t  _M_len;\n   _Tp*       _M_buffer;\n \n+  // this is basically get_temporary_buffer() all over again\n   void _M_allocate_buffer() {\n     _M_original_len = _M_len;\n     _M_buffer = 0;"}, {"sha": "3318611f04816c3e1ef2cac8a2f8ad97cb99cc4e", "filename": "libstdc++-v3/include/ext/memory", "status": "modified", "additions": 5, "deletions": 35, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmemory?ref=6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745", "patch": "@@ -58,6 +58,7 @@\n \n #pragma GCC system_header\n #include <memory>\n+#include <bits/stl_tempbuf.h>\n \n namespace __gnu_cxx\n {\n@@ -124,45 +125,14 @@ namespace __gnu_cxx\n \t\t\t\t    __iterator_category(__first));\n     }\n \n-  template <class _Tp>\n-  pair<_Tp*, ptrdiff_t> \n-  __get_temporary_buffer(ptrdiff_t __len, _Tp*)\n-  {\n-    if (__len > ptrdiff_t(INT_MAX / sizeof(_Tp)))\n-      __len = INT_MAX / sizeof(_Tp);\n-\n-    while (__len > 0) {\n-      _Tp* __tmp = (_Tp*) std::malloc((std::size_t)__len * sizeof(_Tp));\n-      if (__tmp != 0)\n-\treturn pair<_Tp*, ptrdiff_t>(__tmp, __len);\n-      __len /= 2;\n-    }\n-\n-    return pair<_Tp*, ptrdiff_t>((_Tp*)0, 0);\n-  }\n-\n-  /**\n-   *  This is a mostly-useless wrapper around malloc().\n-   */\n-  template <class _Tp>\n-  inline pair<_Tp*, ptrdiff_t> get_temporary_buffer(ptrdiff_t __len) {\n-    return __get_temporary_buffer(__len, (_Tp*) 0);\n-  }\n \n   /**\n-   *  The companion to get_temporary_buffer().\n-   */\n-  template <class _Tp>\n-  void return_temporary_buffer(_Tp* __p) {\n-    std::free(__p);\n-  }\n-\n-  // Class temporary_buffer is not part of the standard.  It is an extension.\n-\n+   *  Must come back and figure out these notes.\n+   *  @ingroup SGIextensions\n+  */\n   template <class _ForwardIterator, \n \t    class _Tp \n-\t    = typename std::iterator_traits<_ForwardIterator>::value_type\n-  >\n+\t      = typename std::iterator_traits<_ForwardIterator>::value_type >\n   struct temporary_buffer : public _Temporary_buffer<_ForwardIterator, _Tp>\n   {\n     temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)"}, {"sha": "c52db59d5a182bd572225df51d301703b250ecc1", "filename": "libstdc++-v3/include/ext/rope", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope?ref=6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745", "patch": "@@ -1,6 +1,6 @@\n // SGI's rope class -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -49,7 +49,6 @@\n #define __SGI_STL_ROPE\n \n #include <bits/stl_algobase.h>\n-#include <bits/stl_tempbuf.h>\n #include <bits/stl_algo.h>\n #include <bits/stl_function.h>\n #include <bits/stl_numeric.h>"}, {"sha": "2d5c110cb1457463f4dac0d47a8bd201891ee403", "filename": "libstdc++-v3/include/ext/stl_hashtable.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hashtable.h?ref=6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745", "patch": "@@ -1,6 +1,6 @@\n // Hashtable implementation used by containers -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -67,7 +67,6 @@\n #include <bits/stl_algobase.h>\n #include <bits/stl_alloc.h>\n #include <bits/stl_construct.h>\n-#include <bits/stl_tempbuf.h>\n #include <bits/stl_algo.h>\n #include <bits/stl_uninitialized.h>\n #include <bits/stl_function.h>"}, {"sha": "ff5d257d6e6ce6c68f0202ac738ab4a7773b91a1", "filename": "libstdc++-v3/include/std/std_algorithm.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_algorithm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_algorithm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_algorithm.h?ref=6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745", "patch": "@@ -1,6 +1,6 @@\n // <algorithm> -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -66,7 +66,6 @@\n #include <bits/stl_algobase.h>\n #include <bits/stl_construct.h>\n #include <bits/stl_uninitialized.h>\n-#include <bits/stl_tempbuf.h>\n #include <bits/stl_algo.h>\n \n #endif /* _CPP_ALGORITHM */"}, {"sha": "6ca31c214f6fc375066e714a66ab8b7ff005475b", "filename": "libstdc++-v3/include/std/std_memory.h", "status": "modified", "additions": 63, "deletions": 4, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_memory.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_memory.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_memory.h?ref=6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745", "patch": "@@ -1,6 +1,6 @@\n // <memory> -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -55,22 +55,81 @@\n #include <bits/stl_alloc.h>\n #include <bits/stl_construct.h>\n #include <bits/stl_iterator_base_types.h> //for iterator_traits\n-#include <bits/stl_tempbuf.h>\n #include <bits/stl_uninitialized.h>\n #include <bits/stl_raw_storage_iter.h>\n \n namespace std\n {\n \n- template<class _Tp1> struct auto_ptr_ref {\n+  /**\n+   *  @maint\n+   *  This is a helper function.  The unused second parameter exists to\n+   *  permit the real get_temporary_buffer to use template parameter deduction.\n+   *  @endmaint\n+  */\n+  template <class _Tp>\n+  pair<_Tp*, ptrdiff_t> \n+  __get_temporary_buffer(ptrdiff_t __len, _Tp*)\n+  {\n+    if (__len > ptrdiff_t(INT_MAX / sizeof(_Tp)))\n+      __len = INT_MAX / sizeof(_Tp);\n+\n+    while (__len > 0) {\n+      _Tp* __tmp = (_Tp*) std::malloc((std::size_t)__len * sizeof(_Tp));\n+      if (__tmp != 0)\n+\treturn pair<_Tp*, ptrdiff_t>(__tmp, __len);\n+      __len /= 2;\n+    }\n+\n+    return pair<_Tp*, ptrdiff_t>((_Tp*)0, 0);\n+  }\n+\n+  /**\n+   *  @brief This is a mostly-useless wrapper around malloc().\n+   *  @param  len  The number of objects of type Tp.\n+   *  @return   See full description.\n+   *\n+   *  Reinventing the wheel, but this time with prettier spokes!\n+   *\n+   *  This function tries to obtain storage for @c len adjacent Tp objects.\n+   *  The objects themselves are not constructed, of course.  A pair<> is\n+   *  returned containing \"the buffer s address and capacity (in the units of\n+   *  sizeof(Tp)), or a pair of 0 values if no storage can be obtained.\"\n+   *  Note that the capacity obtained may be less than that requested if the\n+   *  memory is unavailable; you should compare len with the .second return\n+   *  value.\n+  */\n+  template <class _Tp>\n+  inline pair<_Tp*, ptrdiff_t> get_temporary_buffer(ptrdiff_t __len) {\n+    return __get_temporary_buffer(__len, (_Tp*) 0);\n+  }\n+\n+  /**\n+   *  @brief The companion to get_temporary_buffer().\n+   *  @param  p  A buffer previously allocated by get_temporary_buffer.\n+   *  @return   None.\n+   *\n+   *  Frees the memory pointed to by p.\n+   */\n+  template <class _Tp>\n+  void return_temporary_buffer(_Tp* __p) {\n+    std::free(__p);\n+  }\n+\n+\n+template <class _Tp1>\n+  struct auto_ptr_ref\n+{\n    _Tp1* _M_ptr;\n    auto_ptr_ref(_Tp1* __p) : _M_ptr(__p) {}\n };\n \n /**\n  *  A simple smart pointer providing strict ownership semantics.  (More later.)\n */\n-template <class _Tp> class auto_ptr {\n+template <class _Tp>\n+  class auto_ptr\n+{\n private:\n   _Tp* _M_ptr;\n "}, {"sha": "602b2fe80b7e30bd3cba2fd476e67cc9fbf63b03", "filename": "libstdc++-v3/testsuite/20_util/temporary_buffer.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftemporary_buffer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftemporary_buffer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftemporary_buffer.cc?ref=6b20f9b59abbb8bdfe9a0019a4914d2e30d4c745", "patch": "@@ -0,0 +1,50 @@\n+// 2002-01-24  Phil Edwards  <pme@gcc.gnu.org>\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.3 temporary buffers\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct junk { char j[12]; };\n+\n+int main(void)\n+{\n+  bool test = true;\n+\n+  std::pair<junk*,ptrdiff_t>  results = std::get_temporary_buffer<junk>(5);\n+\n+  if (results.second != 0)\n+  {\n+      // make sure it works:  test the returned capacity, and then construct\n+      // some junk in the buffer.\n+      // XXX\n+      VERIFY( results.first != 0 );\n+  }\n+  else\n+  {\n+      // if it says it didn't work, make sure it didn't work\n+      VERIFY( results.first == 0 );\n+  }\n+\n+  std::return_temporary_buffer(results.first);\n+\n+  return 0;\n+}"}]}