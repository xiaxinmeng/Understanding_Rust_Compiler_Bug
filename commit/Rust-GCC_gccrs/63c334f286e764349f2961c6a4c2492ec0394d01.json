{"sha": "63c334f286e764349f2961c6a4c2492ec0394d01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNjMzM0ZjI4NmU3NjQzNDlmMjk2MWM2YTRjMjQ5MmVjMDM5NGQwMQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-07-21T12:36:25Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-07-21T17:49:12Z"}, "message": "rs6000: Parsing built-in input file, part 3 of 3\n\n2021-07-21  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/rs6000-gen-builtins.c (parse_bif_attrs):\n\tImplement.", "tree": {"sha": "a5d524a72763127ac4bd4d300a77ebf9a695c096", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5d524a72763127ac4bd4d300a77ebf9a695c096"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63c334f286e764349f2961c6a4c2492ec0394d01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63c334f286e764349f2961c6a4c2492ec0394d01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63c334f286e764349f2961c6a4c2492ec0394d01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63c334f286e764349f2961c6a4c2492ec0394d01/comments", "author": null, "committer": null, "parents": [{"sha": "3c51b62bb8f052a610c3de2a8a0892ee3c3945ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c51b62bb8f052a610c3de2a8a0892ee3c3945ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c51b62bb8f052a610c3de2a8a0892ee3c3945ad"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "6030e13e712091bdc7fa8848bbd8ef09504ea4cf", "filename": "gcc/config/rs6000/rs6000-gen-builtins.c", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c334f286e764349f2961c6a4c2492ec0394d01/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c334f286e764349f2961c6a4c2492ec0394d01/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c?ref=63c334f286e764349f2961c6a4c2492ec0394d01", "patch": "@@ -1163,6 +1163,108 @@ parse_args (prototype *protoptr)\n static parse_codes\n parse_bif_attrs (attrinfo *attrptr)\n {\n+  consume_whitespace ();\n+  if (linebuf[pos] != '{')\n+    {\n+      (*diag) (\"missing attribute set at column %d.\\n\", pos + 1);\n+      return PC_PARSEFAIL;\n+    }\n+  safe_inc_pos ();\n+\n+  memset (attrptr, 0, sizeof *attrptr);\n+  char *attrname = NULL;\n+\n+  do {\n+    consume_whitespace ();\n+    int oldpos = pos;\n+    attrname = match_identifier ();\n+    if (attrname)\n+      {\n+\tif (!strcmp (attrname, \"init\"))\n+\t  attrptr->isinit = 1;\n+\telse if (!strcmp (attrname, \"set\"))\n+\t  attrptr->isset = 1;\n+\telse if (!strcmp (attrname, \"extract\"))\n+\t  attrptr->isextract = 1;\n+\telse if (!strcmp (attrname, \"nosoft\"))\n+\t  attrptr->isnosoft = 1;\n+\telse if (!strcmp (attrname, \"ldvec\"))\n+\t  attrptr->isldvec = 1;\n+\telse if (!strcmp (attrname, \"stvec\"))\n+\t  attrptr->isstvec = 1;\n+\telse if (!strcmp (attrname, \"reve\"))\n+\t  attrptr->isreve = 1;\n+\telse if (!strcmp (attrname, \"pred\"))\n+\t  attrptr->ispred = 1;\n+\telse if (!strcmp (attrname, \"htm\"))\n+\t  attrptr->ishtm = 1;\n+\telse if (!strcmp (attrname, \"htmspr\"))\n+\t  attrptr->ishtmspr = 1;\n+\telse if (!strcmp (attrname, \"htmcr\"))\n+\t  attrptr->ishtmcr = 1;\n+\telse if (!strcmp (attrname, \"mma\"))\n+\t  attrptr->ismma = 1;\n+\telse if (!strcmp (attrname, \"quad\"))\n+\t  attrptr->isquad = 1;\n+\telse if (!strcmp (attrname, \"pair\"))\n+\t  attrptr->ispair = 1;\n+\telse if (!strcmp (attrname, \"no32bit\"))\n+\t  attrptr->isno32bit = 1;\n+\telse if (!strcmp (attrname, \"32bit\"))\n+\t  attrptr->is32bit = 1;\n+\telse if (!strcmp (attrname, \"cpu\"))\n+\t  attrptr->iscpu = 1;\n+\telse if (!strcmp (attrname, \"ldstmask\"))\n+\t  attrptr->isldstmask = 1;\n+\telse if (!strcmp (attrname, \"lxvrse\"))\n+\t  attrptr->islxvrse = 1;\n+\telse if (!strcmp (attrname, \"lxvrze\"))\n+\t  attrptr->islxvrze = 1;\n+\telse if (!strcmp (attrname, \"endian\"))\n+\t  attrptr->isendian = 1;\n+\telse\n+\t  {\n+\t    (*diag) (\"unknown attribute at column %d.\\n\", oldpos + 1);\n+\t    return PC_PARSEFAIL;\n+\t  }\n+\n+\tconsume_whitespace ();\n+\tif (linebuf[pos] == ',')\n+\t  safe_inc_pos ();\n+\telse if (linebuf[pos] != '}')\n+\t  {\n+\t    (*diag) (\"arg not followed by ',' or '}' at column %d.\\n\",\n+\t\t     pos + 1);\n+\t    return PC_PARSEFAIL;\n+\t  }\n+      }\n+    else\n+      {\n+\tpos = oldpos;\n+\tif (linebuf[pos] != '}')\n+\t  {\n+\t    (*diag) (\"badly terminated attr set at column %d.\\n\", pos + 1);\n+\t    return PC_PARSEFAIL;\n+\t  }\n+\tsafe_inc_pos ();\n+      }\n+  } while (attrname);\n+\n+#ifdef DEBUG\n+  (*diag) (\"attribute set: init = %d, set = %d, extract = %d, nosoft = %d, \"\n+\t   \"ldvec = %d, stvec = %d, reve = %d, pred = %d, htm = %d, \"\n+\t   \"htmspr = %d, htmcr = %d, mma = %d, quad = %d, pair = %d, \"\n+\t   \"no32bit = %d, 32bit = %d, cpu = %d, ldstmask = %d, lxvrse = %d, \"\n+\t   \"lxvrze = %d, endian = %d.\\n\",\n+\t   attrptr->isinit, attrptr->isset, attrptr->isextract,\n+\t   attrptr->isnosoft, attrptr->isldvec, attrptr->isstvec,\n+\t   attrptr->isreve, attrptr->ispred, attrptr->ishtm, attrptr->ishtmspr,\n+\t   attrptr->ishtmcr, attrptr->ismma, attrptr->isquad, attrptr->ispair,\n+\t   attrptr->isno32bit, attrptr->is32bit, attrptr->iscpu,\n+\t   attrptr->isldstmask, attrptr->islxvrse, attrptr->islxvrze,\n+\t   attrptr->isendian);\n+#endif\n+\n   return PC_OK;\n }\n "}]}