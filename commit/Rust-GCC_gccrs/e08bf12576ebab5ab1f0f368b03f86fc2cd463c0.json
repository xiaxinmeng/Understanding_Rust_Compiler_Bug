{"sha": "e08bf12576ebab5ab1f0f368b03f86fc2cd463c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA4YmYxMjU3NmViYWI1YWIxZjBmMzY4YjAzZjg2ZmMyY2Q0NjNjMA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-06-22T08:56:18Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-06-22T08:56:18Z"}, "message": "Make symbol_summary::get and call_summary::get pure.\n\n2018-06-22  Martin Liska  <mliska@suse.cz>\n\n\t* symbol-summary.h (get): Make it pure and inline move\n        functionality from ::get function.\n        (get): Remove and inline into ::get and ::get_create.\n        (get_create): Move code from ::get function.\n\nFrom-SVN: r261882", "tree": {"sha": "e5853583a3e2128fb8d218e0d319e8ffed5ba27d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5853583a3e2128fb8d218e0d319e8ffed5ba27d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e08bf12576ebab5ab1f0f368b03f86fc2cd463c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08bf12576ebab5ab1f0f368b03f86fc2cd463c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e08bf12576ebab5ab1f0f368b03f86fc2cd463c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08bf12576ebab5ab1f0f368b03f86fc2cd463c0/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "635b738209f66b9305e8f56de4e168e08c57ee62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/635b738209f66b9305e8f56de4e168e08c57ee62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/635b738209f66b9305e8f56de4e168e08c57ee62"}], "stats": {"total": 81, "additions": 25, "deletions": 56}, "files": [{"sha": "242c27d892bdfb599e461f2eb68b8fb09e2614f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08bf12576ebab5ab1f0f368b03f86fc2cd463c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08bf12576ebab5ab1f0f368b03f86fc2cd463c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e08bf12576ebab5ab1f0f368b03f86fc2cd463c0", "patch": "@@ -1,3 +1,10 @@\n+2018-06-22  Martin Liska  <mliska@suse.cz>\n+\n+\t* symbol-summary.h (get): Make it pure and inline move\n+        functionality from ::get function.\n+        (get): Remove and inline into ::get and ::get_create.\n+        (get_create): Move code from ::get function.\n+\n 2018-06-22  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR target/85994"}, {"sha": "26e9773d3c033bb33a2646362d07025534d78ccc", "filename": "gcc/symbol-summary.h", "status": "modified", "additions": 18, "deletions": 56, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08bf12576ebab5ab1f0f368b03f86fc2cd463c0/gcc%2Fsymbol-summary.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08bf12576ebab5ab1f0f368b03f86fc2cd463c0/gcc%2Fsymbol-summary.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymbol-summary.h?ref=e08bf12576ebab5ab1f0f368b03f86fc2cd463c0", "patch": "@@ -90,13 +90,19 @@ class GTY((user)) function_summary <T *>\n      does not exist it will be created.  */\n   T* get_create (cgraph_node *node)\n   {\n-    return get (node->get_uid (), true);\n+    bool existed;\n+    T **v = &m_map.get_or_insert (node->get_uid (), &existed);\n+    if (!existed)\n+      *v = allocate_new ();\n+\n+    return *v;\n   }\n \n   /* Getter for summary callgraph node pointer.  */\n-  T* get (cgraph_node *node)\n+  T* get (cgraph_node *node) ATTRIBUTE_PURE\n   {\n-    return get (node->get_uid (), false);\n+    T **v = m_map.get (node->get_uid ());\n+    return v == NULL ? NULL : *v;\n   }\n \n   /* Remove node from summary.  */\n@@ -152,9 +158,6 @@ class GTY((user)) function_summary <T *>\n private:\n   typedef int_hash <int, 0, -1> map_hash;\n \n-  /* Getter for summary callgraph ID.  */\n-  T *get (int uid, bool lazy_insert);\n-\n   /* Indicates if insertion hook is enabled.  */\n   bool m_insertion_enabled;\n   /* Indicates if the summary is released.  */\n@@ -273,28 +276,6 @@ function_summary<T *>::symtab_duplication (cgraph_node *node,\n     }\n }\n \n-template <typename T>\n-T*\n-function_summary<T *>::get (int uid, bool lazy_insert)\n-{\n-  gcc_checking_assert (uid > 0);\n-\n-  if (lazy_insert)\n-    {\n-      bool existed;\n-      T **v = &m_map.get_or_insert (uid, &existed);\n-      if (!existed)\n-\t*v = allocate_new ();\n-\n-      return *v;\n-    }\n-  else\n-    {\n-      T **v = m_map.get (uid);\n-      return v == NULL ? NULL : *v;\n-    }\n-}\n-\n template <typename T>\n void\n gt_ggc_mx(function_summary<T *>* const &summary)\n@@ -387,13 +368,19 @@ class GTY((user)) call_summary <T *>\n      If a summary for an edge does not exist, it will be created.  */\n   T* get_create (cgraph_edge *edge)\n   {\n-    return get (edge->get_uid (), true);\n+    bool existed;\n+    T **v = &m_map.get_or_insert (edge->get_uid (), &existed);\n+    if (!existed)\n+      *v = allocate_new ();\n+\n+    return *v;\n   }\n \n   /* Getter for summary callgraph edge pointer.  */\n-  T* get (cgraph_edge *edge)\n+  T* get (cgraph_edge *edge) ATTRIBUTE_PURE\n   {\n-    return get (edge->get_uid (), false);\n+    T **v = m_map.get (edge->get_uid ());\n+    return v == NULL ? NULL : *v;\n   }\n \n   /* Remove edge from summary.  */\n@@ -437,9 +424,6 @@ class GTY((user)) call_summary <T *>\n private:\n   typedef int_hash <int, 0, -1> map_hash;\n \n-  /* Getter for summary callgraph ID.  */\n-  T *get (int uid, bool lazy_insert);\n-\n   /* Main summary store, where summary ID is used as key.  */\n   hash_map <map_hash, T *> m_map;\n   /* Internal summary removal hook pointer.  */\n@@ -457,28 +441,6 @@ class GTY((user)) call_summary <T *>\n       gt_pointer_operator, void *);\n };\n \n-template <typename T>\n-T*\n-call_summary<T *>::get (int uid, bool lazy_insert)\n-{\n-  gcc_checking_assert (uid > 0);\n-\n-  if (lazy_insert)\n-    {\n-      bool existed;\n-      T **v = &m_map.get_or_insert (uid, &existed);\n-      if (!existed)\n-\t*v = allocate_new ();\n-\n-      return *v;\n-    }\n-  else\n-    {\n-      T **v = m_map.get (uid);\n-      return v == NULL ? NULL : *v;\n-    }\n-}\n-\n template <typename T>\n void\n call_summary<T *>::release ()"}]}