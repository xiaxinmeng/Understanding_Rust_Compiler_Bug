{"sha": "9c6586bc20ba49d6f42b889936cee0f7563a0966", "node_id": "C_kwDOANBUbNoAKDljNjU4NmJjMjBiYTQ5ZDZmNDJiODg5OTM2Y2VlMGY3NTYzYTA5NjY", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-12-15T00:16:28Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-12-15T00:16:28Z"}, "message": "Daily bump.", "tree": {"sha": "b5569c3e08ae9035fc7d96b0d9cac0f16a06289e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5569c3e08ae9035fc7d96b0d9cac0f16a06289e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c6586bc20ba49d6f42b889936cee0f7563a0966", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6586bc20ba49d6f42b889936cee0f7563a0966", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c6586bc20ba49d6f42b889936cee0f7563a0966", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6586bc20ba49d6f42b889936cee0f7563a0966/comments", "author": null, "committer": null, "parents": [{"sha": "a2a0c91b47537b16908981e206f4e42db8425eca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2a0c91b47537b16908981e206f4e42db8425eca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2a0c91b47537b16908981e206f4e42db8425eca"}], "stats": {"total": 637, "additions": 636, "deletions": 1}, "files": [{"sha": "0a48a1d74e43e97eb13e3e9e2512a793f986845e", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6586bc20ba49d6f42b889936cee0f7563a0966/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6586bc20ba49d6f42b889936cee0f7563a0966/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=9c6586bc20ba49d6f42b889936cee0f7563a0966", "patch": "@@ -1,3 +1,7 @@\n+2021-12-14  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* MAINTAINERS: Add myself to write after approval.\n+\n 2021-12-06  Navid Rahimi  <navidrahimi@microsoft.com>\n \n \t* MAINTAINERS: Adding myself."}, {"sha": "ca2c5aee991dcd3c51884bdacf02b87f2198eeda", "filename": "gcc/ChangeLog", "status": "modified", "additions": 344, "deletions": 0, "changes": 344, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6586bc20ba49d6f42b889936cee0f7563a0966/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6586bc20ba49d6f42b889936cee0f7563a0966/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c6586bc20ba49d6f42b889936cee0f7563a0966", "patch": "@@ -1,3 +1,347 @@\n+2021-12-14  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/103682\n+\t* tree-ssa-ccp.c (optimize_atomic_bit_test_and): Check\n+\tis_gimple_assign before gimple_assign_rhs_code.\n+\n+2021-12-14  S\u00f6ren Tempel  <soeren@soeren-tempel.net>\n+\n+\t* ginclude/stddef.h (__DEFINED_ptrdiff_t): Add support for musl\n+\tlibc typedef macro guard.\n+\t(__DEFINED_size_t): Ditto.\n+\t(__DEFINED_wchar_t): Ditto.\n+\n+2021-12-14  JoJo R  <rjiejie@linux.alibaba.com>\n+\n+\t* regrename.c (find_rename_reg): Return satisfied regno\n+\tif instruction is noop move.\n+\n+2021-12-14  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-c.c (altivec_build_resolved_builtin): Rename\n+\trs6000_builtin_decls_x to rs6000_builtin_decls.\n+\t(altivec_resolve_overloaded_builtin): Likewise.  Also rename\n+\trs6000_builtin_info_x to rs6000_builtin_info.\n+\t* config/rs6000/rs6000-call.c (rs6000_invalid_builtin): Rename\n+\trs6000_builtin_info_x to rs6000_builtin_info.\n+\t(rs6000_builtin_is_supported): Likewise.\n+\t(rs6000_gimple_fold_mma_builtin): Likewise.  Also rename\n+\trs6000_builtin_decls_x to rs6000_builtin_decls.\n+\t(rs6000_gimple_fold_builtin): Rename rs6000_builtin_info_x to\n+\trs6000_builtin_info.\n+\t(cpu_expand_builtin): Likewise.\n+\t(rs6000_expand_builtin): Likewise.\n+\t(rs6000_init_builtins): Likewise.  Also rename rs6000_builtin_decls_x\n+\tto rs6000_builtin_decls.\n+\t(rs6000_builtin_decl): Rename rs6000_builtin_decls_x to\n+\trs6000_builtin_decls.\n+\t* config/rs6000/rs6000-gen-builtins.c (write_decls): In generated code,\n+\trename rs6000_builtin_decls_x to rs6000_builtin_decls, and rename\n+\trs6000_builtin_info_x to rs6000_builtin_info.\n+\t(write_bif_static_init): In generated code, rename\n+\trs6000_builtin_info_x to rs6000_builtin_info.\n+\t(write_init_bif_table): In generated code, rename\n+\trs6000_builtin_decls_x to rs6000_builtin_decls, and rename\n+\trs6000_builtin_info_x to rs6000_builtin_info.\n+\t(write_init_ovld_table): In generated code, rename\n+\trs6000_builtin_decls_x to rs6000_builtin_decls.\n+\t(write_init_file): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_builtin_vectorized_function):\n+\tLikewise.\n+\t(rs6000_builtin_md_vectorized_function): Likewise.\n+\t(rs6000_builtin_reciprocal): Likewise.\n+\t(add_condition_to_bb): Likewise.\n+\t(rs6000_atomic_assign_expand_fenv): Likewise.\n+\n+2021-12-14  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-c.c (altivec_resolve_new_overloaded_builtin):\n+\tRemove forward declaration.\n+\t(rs6000_new_builtin_type_compatible): Rename to\n+\trs6000_builtin_type_compatible.\n+\t(rs6000_builtin_type_compatible): Remove.\n+\t(altivec_resolve_overloaded_builtin): Remove.\n+\t(altivec_build_new_resolved_builtin): Rename to\n+\taltivec_build_resolved_builtin.\n+\t(altivec_resolve_new_overloaded_builtin): Rename to\n+\taltivec_resolve_overloaded_builtin.  Remove static keyword.  Adjust\n+\tcalled function names.\n+\t* config/rs6000/rs6000-call.c (rs6000_expand_new_builtin): Remove\n+\tforward declaration.\n+\t(rs6000_gimple_fold_new_builtin): Likewise.\n+\t(rs6000_invalid_new_builtin): Rename to rs6000_invalid_builtin.\n+\t(rs6000_gimple_fold_builtin): Remove.\n+\t(rs6000_new_builtin_valid_without_lhs): Rename to\n+\trs6000_builtin_valid_without_lhs.\n+\t(rs6000_new_builtin_is_supported): Rename to\n+\trs6000_builtin_is_supported.\n+\t(rs6000_gimple_fold_new_mma_builtin): Rename to\n+\trs6000_gimple_fold_mma_builtin.\n+\t(rs6000_gimple_fold_new_builtin): Rename to\n+\trs6000_gimple_fold_builtin.  Remove static keyword.  Adjust called\n+\tfunction names.\n+\t(rs6000_expand_builtin): Remove.\n+\t(new_cpu_expand_builtin): Rename to cpu_expand_builtin.\n+\t(new_mma_expand_builtin): Rename to mma_expand_builtin.\n+\t(new_htm_spr_num): Rename to htm_spr_num.\n+\t(new_htm_expand_builtin): Rename to htm_expand_builtin.  Change name\n+\tof called function.\n+\t(rs6000_expand_new_builtin): Rename to rs6000_expand_builtin.  Remove\n+\tstatic keyword.  Adjust called function names.\n+\t(rs6000_new_builtin_decl): Rename to rs6000_builtin_decl.  Remove\n+\tstatic keyword.\n+\t(rs6000_builtin_decl): Remove.\n+\t* config/rs6000/rs6000-gen-builtins.c (write_decls): In gnerated code,\n+\trename rs6000_new_builtin_is_supported to rs6000_builtin_is_supported.\n+\t* config/rs6000/rs6000-internal.h (rs6000_invalid_new_builtin): Rename\n+\tto rs6000_invalid_builtin.\n+\t* config/rs6000/rs6000.c (rs6000_new_builtin_vectorized_function):\n+\tRename to rs6000_builtin_vectorized_function.\n+\t(rs6000_new_builtin_md_vectorized_function): Rename to\n+\trs6000_builtin_md_vectorized_function.\n+\t(rs6000_builtin_vectorized_function): Remove.\n+\t(rs6000_builtin_md_vectorized_function): Remove.\n+\n+2021-12-14  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-builtin.def: Delete.\n+\t* config/rs6000/rs6000-call.c (builtin_compatibility): Delete.\n+\t(builtin_description): Delete.\n+\t(builtin_hash_struct): Delete.\n+\t(builtin_hasher): Delete.\n+\t(builtin_hash_table): Delete.\n+\t(builtin_hasher::hash): Delete.\n+\t(builtin_hasher::equal): Delete.\n+\t(rs6000_builtin_info_type): Delete.\n+\t(rs6000_builtin_info): Delete.\n+\t(bdesc_compat): Delete.\n+\t(bdesc_3arg): Delete.\n+\t(bdesc_4arg): Delete.\n+\t(bdesc_dst): Delete.\n+\t(bdesc_2arg): Delete.\n+\t(bdesc_altivec_preds): Delete.\n+\t(bdesc_abs): Delete.\n+\t(bdesc_1arg): Delete.\n+\t(bdesc_0arg): Delete.\n+\t(bdesc_htm): Delete.\n+\t(bdesc_mma): Delete.\n+\t(rs6000_overloaded_builtin_p): Delete.\n+\t(rs6000_overloaded_builtin_name): Delete.\n+\t(htm_spr_num): Delete.\n+\t(rs6000_builtin_is_supported_p): Delete.\n+\t(rs6000_gimple_fold_mma_builtin): Delete.\n+\t(gt-rs6000-call.h): Remove include directive.\n+\t* config/rs6000/rs6000-protos.h (rs6000_overloaded_builtin_p): Delete.\n+\t(rs6000_builtin_is_supported_p): Delete.\n+\t(rs6000_overloaded_builtin_name): Delete.\n+\t* config/rs6000/rs6000.c (rs6000_builtin_decls): Delete.\n+\t(rs6000_debug_reg_global): Remove reference to RS6000_BUILTIN_COUNT.\n+\t* config/rs6000/rs6000.h (rs6000_builtins): Delete.\n+\t(altivec_builtin_types): Delete.\n+\t(rs6000_builtin_decls): Delete.\n+\t* config/rs6000/t-rs6000 (TM_H): Don't add rs6000-builtin.def.\n+\n+2021-12-14  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-builtin-new.def: Rename to...\n+\t* config/rs6000/rs6000-builtins.def: ...this.\n+\t* config/rs6000/rs6000-gen-builtins.c: Adjust header commentary.\n+\t* config/rs6000/t-rs6000 (EXTRA_GTYPE_DEPS): Rename\n+\trs6000-builtin-new.def to rs6000-builtins.def.\n+\t(rs6000-builtins.c): Likewise.\n+\n+2021-12-14  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-call.c (altivec_overloaded_builtins): Remove.\n+\t* config/rs6000/rs6000.h (altivec_overloaded_builtins): Remove.\n+\n+2021-12-14  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR target/103548\n+\t* config/rs6000/mma.md (UNSPEC_MMA_ASSEMBLE): Rename unspec from this...\n+\t(UNSPEC_VSX_ASSEMBLE): ...to this.\n+\t(UNSPECV_MMA_ASSEMBLE): New unspecv.\n+\t(vsx_assemble_pair): Use UNSPEC_VSX_ASSEMBLE.\n+\t(*vsx_assemble_pair): Likewise.\n+\t(mma_assemble_acc): Use UNSPECV_MMA_ASSEMBLE.\n+\t(*mma_assemble_acc): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_split_multireg_move): Handle\n+\tUNSPEC_VOLATILE.  Use UNSPEC_VSX_ASSEMBLE and UNSPECV_MMA_ASSEMBLE.\n+\n+2021-12-14  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/103571\n+\t* config/i386/i386-expand.c (ix86_expand_vector_init_duplicate)\n+\t<case E_V8HFmode>: Implement for TARGET_SSE2.\n+\t<case E_V16HFmode>: Implement for TARGET_AVX.\n+\t<case E_V32HFmode>: Implement for TARGET_AVX512F.\n+\t(ix86_expand_vector_set_var): Handle V32HFmode\n+\twithout TARGET_AVX512BW.\n+\t(ix86_expand_vector_extract)\n+\t<case E_V8HFmode>: Implement for TARGET_SSE2.\n+\t<case E_V16HFmode>: Implement for TARGET_AVX.\n+\t<case E_V32HFmode>: Implement for TARGET_AVX512BW.\n+\t(expand_vec_perm_broadcast_1) <case E_V8HFmode>: New.\n+\t* config/i386/sse.md (VI12HF_AVX512VL): Remove\n+\tTARGET_AVX512FP16 condition.\n+\t(V): Ditto.\n+\t(V_256_512): Ditto.\n+\t(avx_vbroadcastf128_<mode>): Use V_256H mode iterator.\n+\n+2021-12-14  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/darwin.h (SUBTARGET_INIT_BUILTINS): Remove\n+\ttest for new_builtins_are_live and simplify.\n+\t* config/rs6000/rs6000-c.c (altivec_build_resolved_builtin): Remove\n+\tdead function.\n+\t(altivec_resolve_overloaded_builtin): Remove test for\n+\tnew_builtins_are_live and simplify.\n+\t* config/rs6000/rs6000-call.c (altivec_init_builtins): Remove forward\n+\tdeclaration.\n+\t(builtin_function_type): Likewise.\n+\t(rs6000_common_init_builtins): Likewise.\n+\t(htm_init_builtins): Likewise.\n+\t(mma_init_builtins): Likewise.\n+\t(def_builtin): Remove dead function.\n+\t(rs6000_expand_zeroop_builtin): Likewise.\n+\t(rs6000_expand_mtfsf_builtin): Likewise.\n+\t(rs6000_expand_mtfsb_builtin): Likewise.\n+\t(rs6000_expand_set_fpscr_rn_builtin): Likewise.\n+\t(rs6000_expand_set_fpscr_drn_builtin): Likewise.\n+\t(rs6000_expand_unop_builtin): Likewise.\n+\t(altivec_expand_abs_builtin): Likewise.\n+\t(rs6000_expand_binop_builtin): Likewise.\n+\t(altivec_expand_lxvr_builtin): Likewise.\n+\t(altivec_expand_lv_builtin): Likewise.\n+\t(altivec_expand_stxvl_builtin): Likewise.\n+\t(altivec_expand_stv_builtin): Likewise.\n+\t(mma_expand_builtin): Likewise.\n+\t(htm_expand_builtin): Likewise.\n+\t(cpu_expand_builtin): Likewise.\n+\t(rs6000_expand_quaternop_builtin): Likewise.\n+\t(rs6000_expand_ternop_builtin): Likewise.\n+\t(altivec_expand_dst_builtin): Likewise.\n+\t(altivec_expand_vec_sel_builtin): Likewise.\n+\t(altivec_expand_builtin): Likewise.\n+\t(rs6000_invalid_builtin): Likewise.\n+\t(rs6000_builtin_valid_without_lhs): Likewise.\n+\t(rs6000_gimple_fold_builtin): Remove test for new_builtins_are_live and\n+\tsimplify.\n+\t(rs6000_expand_builtin): Likewise.\n+\t(rs6000_init_builtins): Remove tests for new_builtins_are_live and\n+\tsimplify.\n+\t(rs6000_builtin_decl): Likewise.\n+\t(altivec_init_builtins): Remove dead function.\n+\t(mma_init_builtins): Likewise.\n+\t(htm_init_builtins): Likewise.\n+\t(builtin_quaternary_function_type): Likewise.\n+\t(builtin_function_type): Likewise.\n+\t(rs6000_common_init_builtins): Likewise.\n+\t* config/rs6000/rs6000-gen-builtins.c (write_header_file): Don't\n+\tdeclare new_builtins_are_live.\n+\t(write_init_bif_table): In generated code, remove test for\n+\tnew_builtins_are_live and simplify.\n+\t(write_init_ovld_table): Likewise.\n+\t(write_init_file): Don't initialize new_builtins_are_live.\n+\t* config/rs6000/rs6000.c (rs6000_builtin_vectorized_function): Remove\n+\ttest for new_builtins_are_live and simplify.\n+\t(rs6000_builtin_md_vectorized_function): Likewise.\n+\t(rs6000_builtin_reciprocal): Likewise.\n+\t(add_condition_to_bb): Likewise.\n+\t(rs6000_atomic_assign_expand_fenv): Likewise.\n+\n+2021-12-14  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\tPR target/103625\n+\t* config/rs6000/rs6000-builtin-new.def (__builtin_altivec_vcmpequd):\n+\tMove to power8-vector stanza.\n+\t(__builtin_altivec_vcmpequd_p): Likewise.\n+\t(__builtin_altivec_vcmpgtsd): Likewise.\n+\t(__builtin_altivec_vcmpgtsd_p): Likewise.\n+\t(__builtin_altivec_vcmpgtud): Likewise.\n+\t(__builtin_altivec_vcmpgtud_p): Likewise.\n+\n+2021-12-14  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\tPR target/103623\n+\t* config/rs6000/rs6000-builtin-new.def (__builtin_pack_longdouble): Add\n+\tibmld attribute.\n+\t(__builtin_unpack_longdouble): Likewise.\n+\t* config/rs6000/rs6000-call.c (rs6000_expand_new_builtin): Add special\n+\thandling for ibmld attribute.\n+\t* config/rs6000/rs6000-gen-builtins.c (attrinfo): Add isibmld.\n+\t(parse_bif_attrs): Handle ibmld.\n+\t(write_decls): Likewise.\n+\t(write_bif_static_init): Likewise.\n+\n+2021-12-14  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/103585\n+\t* ipa-modref-tree.c (modref_access_node::range_info_useful_p): Handle\n+\tMODREF_GLOBAL_MEMORY_PARM.\n+\t(modref_access_node::dump): Likewise.\n+\t(modref_access_node::get_call_arg): Likewise.\n+\t* ipa-modref-tree.h (enum modref_special_parms): Add\n+\tMODREF_GLOBAL_MEMORY_PARM.\n+\t(modref_access_node::useful_for_kill): Handle\n+\tMODREF_GLOBAL_MEMORY_PARM.\n+\t(modref:tree::merge): Add promote_unknown_to_global.\n+\t* ipa-modref.c (verify_arg):New function.\n+\t(may_access_nonescaping_parm_p): New function.\n+\t(modref_access_analysis::record_global_memory_load): New member\n+\tfunction.\n+\t(modref_access_analysis::record_global_memory_store): Likewise.\n+\t(modref_access_analysis::process_fnspec): Distingush global and local\n+\tmemory.\n+\t(modref_access_analysis::analyze_call): Likewise.\n+\t* tree-ssa-alias.c (ref_may_access_global_memory_p): New function.\n+\t(modref_may_conflict): Use it.\n+\n+2021-12-14  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c (enum aarch64_builtins):\n+\tDefine AARCH64_LS64_BUILTIN_LD64B, AARCH64_LS64_BUILTIN_ST64B,\n+\tAARCH64_LS64_BUILTIN_ST64BV, AARCH64_LS64_BUILTIN_ST64BV0.\n+\t(aarch64_init_ls64_builtin_decl): Helper function.\n+\t(aarch64_init_ls64_builtins): Helper function.\n+\t(aarch64_init_ls64_builtins_types): Helper function.\n+\t(aarch64_general_init_builtins): Init LS64 intrisics for\n+\tTARGET_LS64.\n+\t(aarch64_expand_builtin_ls64): LS64 intrinsics expander.\n+\t(aarch64_general_expand_builtin): Handle aarch64_expand_builtin_ls64.\n+\t(ls64_builtins_data): New helper struct.\n+\t(v8di_UP): New define.\n+\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Define\n+\t__ARM_FEATURE_LS64.\n+\t* config/aarch64/aarch64.c (aarch64_classify_address): Enforce the\n+\tV8DI range (7-bit signed scaled) for both ends of the range.\n+\t* config/aarch64/aarch64-simd.md (movv8di): New pattern.\n+\t(aarch64_movv8di): New pattern.\n+\t* config/aarch64/aarch64.h (AARCH64_ISA_LS64): New define.\n+\t(TARGET_LS64): New define.\n+\t* config/aarch64/aarch64.md: Add UNSPEC_LD64B, UNSPEC_ST64B,\n+\tUNSPEC_ST64BV and UNSPEC_ST64BV0.\n+\t(ld64b): New define_insn.\n+\t(st64b): New define_insn.\n+\t(st64bv): New define_insn.\n+\t(st64bv0): New define_insn.\n+\t* config/aarch64/arm_acle.h (data512_t): New type derived from\n+\t__arm_data512_t.\n+\t(__arm_data512_t): New internal type.\n+\t(__arm_ld64b): New intrinsic.\n+\t(__arm_st64b): New intrinsic.\n+\t(__arm_st64bv): New intrinsic.\n+\t(__arm_st64bv0): New intrinsic.\n+\t* config/arm/types.md: Add new type ls64.\n+\n+2021-12-14  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/i386/t-vxworks: Drop the fPIC multilibs.\n+\n+2021-12-14  Fred Konrad  <konrad@adacore.com>\n+\n+\t* config/rs6000/t-vxworks: Drop the fPIC multilib.\n+\n 2021-12-13  Vladimir N. Makarov  <vmakarov@redhat.com>\n \n \tPR target/99531"}, {"sha": "c11bfa652025bd44104a51b23b8ae59e7cbe7bd9", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6586bc20ba49d6f42b889936cee0f7563a0966/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6586bc20ba49d6f42b889936cee0f7563a0966/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=9c6586bc20ba49d6f42b889936cee0f7563a0966", "patch": "@@ -1 +1 @@\n-20211214\n+20211215"}, {"sha": "e9c054d36ad114b1f9a67e73d802a94b1187b145", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6586bc20ba49d6f42b889936cee0f7563a0966/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6586bc20ba49d6f42b889936cee0f7563a0966/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=9c6586bc20ba49d6f42b889936cee0f7563a0966", "patch": "@@ -1,3 +1,9 @@\n+2021-12-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/103587\n+\t* c-parser.c (c_parser_balanced_token_sequence): For CPP_PRAGMA,\n+\tconsume the pragma and silently skip to the pragma eol.\n+\n 2021-12-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* c-decl.c: Define INCLUDE_MEMORY instead of INCLUDE_UNIQUE_PTR."}, {"sha": "c72be7d060421e73c13af1304be5f166a36f6573", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6586bc20ba49d6f42b889936cee0f7563a0966/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6586bc20ba49d6f42b889936cee0f7563a0966/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9c6586bc20ba49d6f42b889936cee0f7563a0966", "patch": "@@ -1,3 +1,57 @@\n+2021-12-14  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/103408\n+\t* constraint.cc (type_deducible_p): Remove workaround for\n+\tnon-templated requires-expressions.\n+\t(normalize_placeholder_type_constraints): Likewise.\n+\t* cp-tree.h (current_template_depth): Define.\n+\t(PROCESSING_REAL_TEMPLATE_DECL): Inspect current_template_depth\n+\tinstead of the magnitude of processing_template_decl.\n+\t* decl.c (start_decl): Likewise.\n+\t(grokfndecl): Likewise.\n+\t(grokvardecl): Likewise.\n+\t(grokdeclarator): Likewise.\n+\t* friend.c (make_friend_class): Likewise.  Calculate\n+\tfriend_depth differently when called at instantiation time\n+\tinstead of parse time.\n+\t(do_friend): Likewise.\n+\t* parser.c (cp_parser_requires_clause_expression): Remove\n+\tworkaround for lambdas inside constraints.\n+\t(cp_parser_constraint_expression): Likewise.\n+\t(cp_parser_requires_expression): Likewise.\n+\t(synthesize_implicit_template_parm): Add to current_template_parms\n+\tbefore calling process_template_parm.\n+\t* pt.c (inline_needs_template_parms): Inspect\n+\tcurrent_template_depth instead of the magnitude of\n+\tprocessing_template_decl.\n+\t(push_inline_template_parms_recursive): Likewise.\n+\t(maybe_begin_member_template_processing): Likewise.\n+\t(begin_template_parm_list): Likewise.\n+\t(process_template_parm): Likewise.\n+\t(end_template_parm_list): Likewise.\n+\t(push_template_decl): Likewise.\n+\t(add_inherited_template_parms): Likewise.\n+\t(instantiate_class_template_1): Don't adjust\n+\tprocessing_template_decl around the call to make_friend_class.\n+\tadjust_processing_template_decl to adjust_template_depth.  Set\n+\tcurrent_template_parms instead of processing_template_decl when\n+\tadjust_template_depth.\n+\t(make_auto_1): Inspect current_template_depth instead of the\n+\tmagnitude of processing_template_decl.\n+\t(splice_late_return_type): Likewise.\n+\t* semantics.c (fixup_template_type): Likewise.\n+\n+2021-12-14  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* call.c (build_new_op): Use releasing_vec for arglist.  Declare\n+\tconv in the scope it's used.\n+\n+2021-12-14  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* cp-tree.h (COMPOUND_EXPR_OVERLOADED): Remove.\n+\t* pt.c (build_non_dependent_expr): Don't inspect the flag.\n+\t* tree.c (build_min_non_dep): Don't set the flag.\n+\n 2021-12-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* error.c: Define INCLUDE_MEMORY instead of"}, {"sha": "264fa1b44f8220a1b0074ac7ffd58070892813cc", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6586bc20ba49d6f42b889936cee0f7563a0966/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6586bc20ba49d6f42b889936cee0f7563a0966/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9c6586bc20ba49d6f42b889936cee0f7563a0966", "patch": "@@ -1,3 +1,24 @@\n+2021-12-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/103717\n+\t* frontend-passes.c (doloop_code): Prevent NULL pointer\n+\tdereference when checking for passing a do-loop variable to a\n+\tcontained procedure with an interface mismatch.\n+\n+2021-12-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/103718\n+\tPR fortran/103719\n+\t* frontend-passes.c (doloop_contained_procedure_code): Add several\n+\tchecks to prevent NULL pointer dereferences on valid and invalid\n+\tcode called within do-loops.\n+\n+2021-12-14  Manfred Schwarb  <manfred99@gmx.ch>\n+\n+\tPR fortran/91497\n+\t* simplify.c (simplify_min_max): Disable conversion warnings for\n+\tMIN1 and MAX1.\n+\n 2021-12-13  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/103576"}, {"sha": "0b44fc1c3626af95f84cae9a1ffc28a2d128c487", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6586bc20ba49d6f42b889936cee0f7563a0966/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6586bc20ba49d6f42b889936cee0f7563a0966/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=9c6586bc20ba49d6f42b889936cee0f7563a0966", "patch": "@@ -1,3 +1,40 @@\n+2021-12-14  Petter Tomner  <tomner@kth.se>\n+\n+\t* jit-common.h: New enum\n+\t* jit-playback.c : Folding an setting intitial\n+\t(global_new_decl) : Handle const global generation\n+\t(new_global) : New flag\n+\t(global_set_init_rvalue) : New\n+\t(new_ctor) : New\n+\t(new_global_initialized) : Flag\n+\t(as_truth_value) : Fold\n+\t(new_unary_op) : Fold\n+\t(new_binary_op) : Fold\n+\t(new_comparison) : Fold\n+\t(new_array_access) : Fold\n+\t(new_dereference) : Fold\n+\t(get_address) : Fold\n+\t* jit-playback.h :\n+\t(global_set_init_rvalue) : New\n+\t(new_ctor) : New\n+\t* jit-recording.c :\n+\t* jit-recording.h :\n+\t(new_global_init_rvalue) : New\n+\t(new_ctor) : New\n+\t(ctor) : New, inherits rvalue\n+\t(global_init_rvalue) : New, inherits memento\n+\t(type::is_union) : New\n+\t* libgccjit++.h : New entrypoints, see C-header\n+\t* libgccjit.c : See .h\n+\t* libgccjit.h : New entrypoints\n+\t(gcc_jit_context_new_array_constructor) : New\n+\t(gcc_jit_context_new_struct_constructor) : New\n+\t(gcc_jit_context_new_union_constructor) : New\n+\t(gcc_jit_global_set_initializer_rvalue) : New\n+\t(LIBGCCJIT_HAVE_CTORS) : New feuture macro\n+\t* libgccjit.map : New entrypoints added to ABI 19\n+\t* docs/topics/expressions.rst : Updated docs\n+\n 2021-12-12  Antoni Boucher  <bouanto@zoho.com>\n \n \tPR target/100688"}, {"sha": "3dffea873e52f8d01f61782b93f99a4e0ce13a12", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6586bc20ba49d6f42b889936cee0f7563a0966/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6586bc20ba49d6f42b889936cee0f7563a0966/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c6586bc20ba49d6f42b889936cee0f7563a0966", "patch": "@@ -1,3 +1,114 @@\n+2021-12-14  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.c-torture/compile/pr103682.c: New test.\n+\n+2021-12-14  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR target/103548\n+\t* gcc.target/powerpc/mma-builtin-10-pair.c: New test.\n+\t* gcc.target/powerpc/mma-builtin-10-quad.c: New test.\n+\n+2021-12-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/103717\n+\t* gfortran.dg/do_check_19.f90: New test.\n+\n+2021-12-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/103718\n+\tPR fortran/103719\n+\t* gfortran.dg/do_check_18.f90: New test.\n+\n+2021-12-14  Petter Tomner  <tomner@kth.se>\n+\n+\t* jit.dg/all-non-failing-tests.h: Added two tests\n+\t* jit.dg/test-error-ctor-array-wrong-obj.c: New\n+\t* jit.dg/test-error-ctor-struct-too-big.c: New\n+\t* jit.dg/test-error-ctor-struct-wrong-field-obj.c: New\n+\t* jit.dg/test-error-ctor-struct-wrong-type.c: New\n+\t* jit.dg/test-error-ctor-struct-wrong-type2.c\n+\t* jit.dg/test-error-ctor-union-wrong-field-name.c: New\n+\t* jit.dg/test-error-global-already-init.c: New\n+\t* jit.dg/test-error-global-common-section.c: New\n+\t* jit.dg/test-error-global-init-too-small-array.c: New\n+\t* jit.dg/test-error-global-lvalue-init.c: New\n+\t* jit.dg/test-error-global-nonconst-init.c: New\n+\t* jit.dg/test-global-init-rvalue.c: New\n+\t* jit.dg/test-local-init-rvalue.c: New\n+\n+2021-12-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR libfortran/103634\n+\t* gfortran.dg/intrinsic_pack_6.f90: New test.\n+\n+2021-12-14  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/analyzer/data-model-1.c: Disable ipa-modref.\n+\t* gcc.dg/uninit-38.c: Likewise.\n+\t* gcc.dg/uninit-pr98578.c: Liewise.\n+\n+2021-12-14  Manfred Schwarb  <manfred99@gmx.ch>\n+\n+\tPR fortran/91497\n+\t* gfortran.dg/pr91497.f90: Adjust test to use\n+\tdg-require-effective-target directive.\n+\t* gfortran.dg/pr91497_2.f90: New test to cover all targets.\n+\tCover MAX1 and MIN1 intrinsics.\n+\n+2021-12-14  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/99531\n+\t* gcc.target/i386/pr99531.c: Do not scan for ia32.\n+\n+2021-12-14  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+\t* gcc.target/aarch64/acle/ls64_asm.c: New test.\n+\t* gcc.target/aarch64/acle/ls64_ld64b.c: New test.\n+\t* gcc.target/aarch64/acle/ls64_ld64b-2.c: New test.\n+\t* gcc.target/aarch64/acle/ls64_ld64b-3.c: New test.\n+\t* gcc.target/aarch64/acle/ls64_st64b.c: New test.\n+\t* gcc.target/aarch64/acle/ls64_ld_st_o0.c: New test.\n+\t* gcc.target/aarch64/acle/ls64_st64b-2.c: New test.\n+\t* gcc.target/aarch64/acle/ls64_st64bv.c: New test.\n+\t* gcc.target/aarch64/acle/ls64_st64bv-2.c: New test.\n+\t* gcc.target/aarch64/acle/ls64_st64bv-3.c: New test.\n+\t* gcc.target/aarch64/acle/ls64_st64bv0.c: New test.\n+\t* gcc.target/aarch64/acle/ls64_st64bv0-2.c: New test.\n+\t* gcc.target/aarch64/acle/ls64_st64bv0-3.c: New test.\n+\t* gcc.target/aarch64/pragma_cpp_predefs_2.c: Add checks\n+\tfor __ARM_FEATURE_LS64.\n+\n+2021-12-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.target/i386/avx2-psraq-1.c: Use ARRAY_SIZE.\n+\t* gcc.target/i386/m128-check.h: Move it to the top-level\n+\tcontext.\n+\t* gcc.target/i386/sse2-psraq-1.c: Use ARRAY_SIZE.\n+\t* gcc.target/i386/sse4_2-check.h: Include the header with\n+\tARRAY_SIZE definition.\n+\n+2021-12-14  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/103408\n+\t* g++.dg/concepts/diagnostic18.C: Expect a \"constraints on a\n+\tnon-templated function\" error.\n+\t* g++.dg/cpp23/auto-fncast11.C: New test.\n+\n+2021-12-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/103587\n+\t* gcc.dg/pr103587.c: New test.\n+\n+2021-12-14  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR fortran/103576\n+\tPR testsuite/103697\n+\t* gfortran.dg/goacc/privatization-1-compute-loop.f90: Adjust.\n+\t* gfortran.dg/goacc/privatization-1-compute.f90: Likewise.\n+\t* gfortran.dg/goacc/privatization-1-routine_gang-loop.f90:\n+\tLikewise.\n+\t* gfortran.dg/goacc/privatization-1-routine_gang.f90: Likewise.\n+\n 2021-12-13  Vladimir N. Makarov  <vmakarov@redhat.com>\n \n \tPR target/99531"}, {"sha": "90d7daf017540179923945e156e688a9e7499632", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6586bc20ba49d6f42b889936cee0f7563a0966/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6586bc20ba49d6f42b889936cee0f7563a0966/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=9c6586bc20ba49d6f42b889936cee0f7563a0966", "patch": "@@ -1,3 +1,10 @@\n+2021-12-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR libfortran/103634\n+\t* intrinsics/pack_generic.c (pack_internal): Handle case when the\n+\tarray argument of PACK has one or more extents of size zero to\n+\tavoid invalid reads.\n+\n 2021-10-18  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/102086"}, {"sha": "7fd18645d34a23d92342bc6d4a2e3b525c172096", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6586bc20ba49d6f42b889936cee0f7563a0966/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6586bc20ba49d6f42b889936cee0f7563a0966/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9c6586bc20ba49d6f42b889936cee0f7563a0966", "patch": "@@ -1,3 +1,54 @@\n+2021-12-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103687\n+\t* testsuite/22_locale/time_get/get_date/wchar_t/4.cc: Restore\n+\toriginal locale before returning.\n+\t* testsuite/22_locale/time_get/get_time/char/2.cc: Check for %p\n+\tin locale's T_FMT and adjust accordingly.\n+\t* testsuite/22_locale/time_get/get_time/wchar_t/2.cc: Likewise.\n+\n+2021-12-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/102447\n+\t* include/bits/regex_compiler.h (_Compiler::_BracketState): New\n+\tclass.\n+\t(_Compiler::_BrackeyMatcher): New alias template.\n+\t(_Compiler::_M_expression_term): Change pair<bool, CharT>\n+\tparameter to _BracketState. Process first character for\n+\tECMAScript syntax as well as POSIX.\n+\t* include/bits/regex_compiler.tcc\n+\t(_Compiler::_M_insert_bracket_matcher): Pass _BracketState.\n+\t(_Compiler::_M_expression_term): Use _BracketState to store\n+\tstate between calls. Improve handling of dashes in ranges.\n+\t* testsuite/28_regex/algorithms/regex_match/cstring_bracket_01.cc:\n+\tAdd more tests for ranges containing dashes. Check invalid\n+\tranges with character class at the beginning.\n+\n+2021-12-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/ext/pointer.h (_Relative_pointer_impl::_UIntPtrType):\n+\tRename to uintptr_t and define as __UINTPTR_TYPE__.\n+\n+2021-12-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/regex_constants.h (__syntax_option, __match_flag):\n+\tRemove.\n+\t(syntax_option_type, match_flag_type): Define enumerators.\n+\tUse to initialize globals. Add constexpr to compound assignment\n+\toperators.\n+\t* include/bits/regex_error.h (error_type): Add comment.\n+\t* testsuite/28_regex/constants/constexpr.cc: Remove comment.\n+\t* testsuite/28_regex/constants/error_type.cc: Improve comment.\n+\t* testsuite/28_regex/constants/match_flag_type.cc: Check bitmask\n+\trequirements.\n+\t* testsuite/28_regex/constants/syntax_option_type.cc: Likewise.\n+\n+2021-12-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/regex_compiler.tcc (_Compiler::_M_match_token):\n+\tUse reserved name for parameter.\n+\t* testsuite/17_intro/names.cc: Check \"token\".\n+\n 2021-12-13  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* scripts/make_exports.pl: Replace '?' with '.' when turning"}]}