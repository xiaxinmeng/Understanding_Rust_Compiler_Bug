{"sha": "b730fa614c4ff07c45ea726a6d6ce3260d268b6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjczMGZhNjE0YzRmZjA3YzQ1ZWE3MjZhNmQ2Y2UzMjYwZDI2OGI2Zg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2006-12-30T12:03:47Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2006-12-30T12:03:47Z"}, "message": "tree.h (DECL_CALL_CLOBBERED): Remove.\n\n\t* tree.h (DECL_CALL_CLOBBERED): Remove.\n\t(tree_decl_common): Remove call_clobbered flag.\n\t* tree-flow.h (struct var_ann_d): Add call_clobbered flag.\n\t* tree-ssa-alias.c (mark_non_addressable, reset_cc_flags): Update.\n\t* tree-flow-inline.h (is_call_clobbered, mark_call_clobbered,\n\tclear_call_clobbered): Update.\n\t* tree-ssa.c (verify_call_clobbering): Update.\n\nFrom-SVN: r120285", "tree": {"sha": "8b69291758dc2c8cf9572817b9c7b8edfd062b46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b69291758dc2c8cf9572817b9c7b8edfd062b46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b730fa614c4ff07c45ea726a6d6ce3260d268b6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b730fa614c4ff07c45ea726a6d6ce3260d268b6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b730fa614c4ff07c45ea726a6d6ce3260d268b6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b730fa614c4ff07c45ea726a6d6ce3260d268b6f/comments", "author": null, "committer": null, "parents": [{"sha": "d586d6d1f6afb26b105aca56336217594549bf80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d586d6d1f6afb26b105aca56336217594549bf80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d586d6d1f6afb26b105aca56336217594549bf80"}], "stats": {"total": 46, "additions": 26, "deletions": 20}, "files": [{"sha": "83440dd795bb8599abf217fd9eeabdb9d166fec8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b730fa614c4ff07c45ea726a6d6ce3260d268b6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b730fa614c4ff07c45ea726a6d6ce3260d268b6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b730fa614c4ff07c45ea726a6d6ce3260d268b6f", "patch": "@@ -1,3 +1,13 @@\n+2006-12-30  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree.h (DECL_CALL_CLOBBERED): Remove.\n+\t(tree_decl_common): Remove call_clobbered flag.\n+\t* tree-flow.h (struct var_ann_d): Add call_clobbered flag.\n+\t* tree-ssa-alias.c (mark_non_addressable, reset_cc_flags): Update.\n+\t* tree-flow-inline.h (is_call_clobbered, mark_call_clobbered,\n+\tclear_call_clobbered): Update.\n+\t* tree-ssa.c (verify_call_clobbering): Update.\n+\n 2006-12-30  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-ssa-alias.c (create_structure_vars): When in SSA, update operand"}, {"sha": "a2d3e62d371a3dff4939f7f2cf79782701f3f73a", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b730fa614c4ff07c45ea726a6d6ce3260d268b6f/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b730fa614c4ff07c45ea726a6d6ce3260d268b6f/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=b730fa614c4ff07c45ea726a6d6ce3260d268b6f", "patch": "@@ -919,7 +919,7 @@ static inline bool\n is_call_clobbered (tree var)\n {\n   if (!MTAG_P (var))\n-    return DECL_CALL_CLOBBERED (var);\n+    return var_ann (var)->call_clobbered;\n   else\n     return bitmap_bit_p (gimple_call_clobbered_vars (cfun), DECL_UID (var)); \n }\n@@ -930,7 +930,7 @@ mark_call_clobbered (tree var, unsigned int escape_type)\n {\n   var_ann (var)->escape_mask |= escape_type;\n   if (!MTAG_P (var))\n-    DECL_CALL_CLOBBERED (var) = true;\n+    var_ann (var)->call_clobbered = true;\n   bitmap_set_bit (gimple_call_clobbered_vars (cfun), DECL_UID (var));\n }\n \n@@ -943,7 +943,7 @@ clear_call_clobbered (tree var)\n   if (MTAG_P (var) && TREE_CODE (var) != STRUCT_FIELD_TAG)\n     MTAG_GLOBAL (var) = 0;\n   if (!MTAG_P (var))\n-    DECL_CALL_CLOBBERED (var) = false;\n+    var_ann (var)->call_clobbered = false;\n   bitmap_clear_bit (gimple_call_clobbered_vars (cfun), DECL_UID (var));\n }\n "}, {"sha": "82dae23110d6d9900497fab87f1f66707a39f6a6", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b730fa614c4ff07c45ea726a6d6ce3260d268b6f/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b730fa614c4ff07c45ea726a6d6ce3260d268b6f/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=b730fa614c4ff07c45ea726a6d6ce3260d268b6f", "patch": "@@ -251,6 +251,9 @@ struct var_ann_d GTY(())\n   /* True for HEAP and PARM_NOALIAS artificial variables.  */\n   unsigned is_heapvar : 1;\n \n+  /* True if the variable is call clobbered.  */\n+  unsigned int call_clobbered : 1;\n+\n   /* Memory partition tag assigned to this symbol.  */\n   tree mpt;\n "}, {"sha": "7aff7ee854dced0d17dfd08cf29a89506e35f3c5", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b730fa614c4ff07c45ea726a6d6ce3260d268b6f/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b730fa614c4ff07c45ea726a6d6ce3260d268b6f/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=b730fa614c4ff07c45ea726a6d6ce3260d268b6f", "patch": "@@ -126,7 +126,7 @@ mark_non_addressable (tree var)\n   mpt = memory_partition (var);\n \n   if (!MTAG_P (var))\n-    DECL_CALL_CLOBBERED (var) = false;\n+    var_ann (var)->call_clobbered = false;\n \n   bitmap_clear_bit (gimple_call_clobbered_vars (cfun), DECL_UID (var));\n   TREE_ADDRESSABLE (var) = 0;\n@@ -3266,7 +3266,7 @@ struct tree_opt_pass pass_create_structure_vars =\n   0\t\t\t /* letter */\n };\n \n-/* Reset the DECL_CALL_CLOBBERED flags on our referenced vars.  In\n+/* Reset the call_clobbered flags on our referenced vars.  In\n    theory, this only needs to be done for globals.  */\n \n static unsigned int\n@@ -3276,7 +3276,7 @@ reset_cc_flags (void)\n   referenced_var_iterator rvi;\n \n   FOR_EACH_REFERENCED_VAR (var, rvi)\n-    DECL_CALL_CLOBBERED (var) = false;\n+    var_ann (var)->call_clobbered = false;\n   return 0;\n }\n "}, {"sha": "644a7976402c80a7ef3e7e94b061a7829dc1e18e", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b730fa614c4ff07c45ea726a6d6ce3260d268b6f/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b730fa614c4ff07c45ea726a6d6ce3260d268b6f/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=b730fa614c4ff07c45ea726a6d6ce3260d268b6f", "patch": "@@ -508,22 +508,22 @@ verify_call_clobbering (void)\n   tree var;\n   referenced_var_iterator rvi;\n \n-  /* At all times, the result of the DECL_CALL_CLOBBERED flag should\n+  /* At all times, the result of the call_clobbered flag should\n      match the result of the call_clobbered_vars bitmap.  Verify both\n      that everything in call_clobbered_vars is marked\n-     DECL_CALL_CLOBBERED, and that everything marked\n-     DECL_CALL_CLOBBERED is in call_clobbered_vars.  */\n+     call_clobbered, and that everything marked\n+     call_clobbered is in call_clobbered_vars.  */\n   EXECUTE_IF_SET_IN_BITMAP (gimple_call_clobbered_vars (cfun), 0, i, bi)\n     {\n       var = referenced_var (i);\n \n       if (memory_partition (var))\n \tvar = memory_partition (var);\n \n-      if (!MTAG_P (var) && !DECL_CALL_CLOBBERED (var))\n+      if (!MTAG_P (var) && !var_ann (var)->call_clobbered)\n \t{\n \t  error (\"variable in call_clobbered_vars but not marked \"\n-\t         \"DECL_CALL_CLOBBERED\");\n+\t         \"call_clobbered\");\n \t  debug_variable (var);\n \t  goto err;\n \t}\n@@ -538,10 +538,10 @@ verify_call_clobbering (void)\n \tvar = memory_partition (var);\n \n       if (!MTAG_P (var)\n-\t  && DECL_CALL_CLOBBERED (var)\n+\t  && var_ann (var)->call_clobbered\n \t  && !bitmap_bit_p (gimple_call_clobbered_vars (cfun), DECL_UID (var)))\n \t{\n-\t  error (\"variable marked DECL_CALL_CLOBBERED but not in \"\n+\t  error (\"variable marked call_clobbered but not in \"\n \t         \"call_clobbered_vars bitmap.\");\n \t  debug_variable (var);\n \t  goto err;"}, {"sha": "0c9e02e91f5f936e58faa9f02e0c7dc8fc9a0294", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b730fa614c4ff07c45ea726a6d6ce3260d268b6f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b730fa614c4ff07c45ea726a6d6ce3260d268b6f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b730fa614c4ff07c45ea726a6d6ce3260d268b6f", "patch": "@@ -2607,12 +2607,6 @@ struct tree_memory_partition_tag GTY(())\n #define DECL_GIMPLE_REG_P(DECL) \\\n   DECL_COMMON_CHECK (DECL)->decl_common.gimple_reg_flag\n \n-/* This is true if DECL is call clobbered in the current function.\n-   The result of this flag should always be the same as\n-   bitmap_bit_p (call_clobbered_vars, DECL_UID (decl)).  */\n-#define DECL_CALL_CLOBBERED(DECL) \\\n-  DECL_COMMON_CHECK (DECL)->decl_common.call_clobbered_flag\n-\n struct tree_decl_common GTY(())\n {\n   struct tree_decl_minimal common;\n@@ -2653,7 +2647,6 @@ struct tree_decl_common GTY(())\n   /* Logically, these two would go in a theoretical base shared by var and\n      parm decl. */\n   unsigned gimple_reg_flag : 1;\n-  unsigned call_clobbered_flag : 1;\n \n   union tree_decl_u1 {\n     /* In a FUNCTION_DECL for which DECL_BUILT_IN holds, this is"}]}