{"sha": "604e4ce3fe1f97b4c4952dae38b734db76491c1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA0ZTRjZTNmZTFmOTdiNGM0OTUyZGFlMzhiNzM0ZGI3NjQ5MWMxYg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2007-03-17T11:43:07Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2007-03-17T11:43:07Z"}, "message": "final.c (final_scan_insn): Alter the condition of a conditional trap if we have nonstandard CC.\n\n\t* final.c (final_scan_insn): Alter the condition of a\n\tconditional trap if we have nonstandard CC.\n\nFrom-SVN: r123021", "tree": {"sha": "99a02ae06f9011d2c2dd649b42b386cd85246bb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99a02ae06f9011d2c2dd649b42b386cd85246bb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/604e4ce3fe1f97b4c4952dae38b734db76491c1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/604e4ce3fe1f97b4c4952dae38b734db76491c1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/604e4ce3fe1f97b4c4952dae38b734db76491c1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/604e4ce3fe1f97b4c4952dae38b734db76491c1b/comments", "author": null, "committer": null, "parents": [{"sha": "259b41c1910267813efe9bbc75e55eeebf6613cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/259b41c1910267813efe9bbc75e55eeebf6613cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/259b41c1910267813efe9bbc75e55eeebf6613cd"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "68d32e3b61a367cabd9dab862d5c7c0fdd4665e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604e4ce3fe1f97b4c4952dae38b734db76491c1b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604e4ce3fe1f97b4c4952dae38b734db76491c1b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=604e4ce3fe1f97b4c4952dae38b734db76491c1b", "patch": "@@ -1,3 +1,8 @@\n+2007-03-17  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* final.c (final_scan_insn): Alter the condition of a\n+\tconditional trap if we have nonstandard CC.\n+\n 2007-03-16  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* configure.ac: Remove excess quoting from asm line 0 test."}, {"sha": "a18f0299d4a6454addd745785517d9be733c84d1", "filename": "gcc/final.c", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/604e4ce3fe1f97b4c4952dae38b734db76491c1b/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/604e4ce3fe1f97b4c4952dae38b734db76491c1b/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=604e4ce3fe1f97b4c4952dae38b734db76491c1b", "patch": "@@ -2291,6 +2291,76 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t      INSN_CODE (insn) = -1;\n \t  }\n \n+\t/* If this is a conditional trap, maybe modify it if the cc's\n+\t   are in a nonstandard state so that it accomplishes the same\n+\t   thing that it would do straightforwardly if the cc's were\n+\t   set up normally.  */\n+\tif (cc_status.flags != 0\n+\t    && NONJUMP_INSN_P (insn)\n+\t    && GET_CODE (body) == TRAP_IF\n+\t    && COMPARISON_P (TRAP_CONDITION (body))\n+\t    && XEXP (TRAP_CONDITION (body), 0) == cc0_rtx)\n+\t  {\n+\t    /* This function may alter the contents of its argument\n+\t       and clear some of the cc_status.flags bits.\n+\t       It may also return 1 meaning condition now always true\n+\t       or -1 meaning condition now always false\n+\t       or 2 meaning condition nontrivial but altered.  */\n+\t    int result = alter_cond (TRAP_CONDITION (body));\n+\n+\t    /* If TRAP_CONDITION has become always false, delete the\n+\t       instruction.  */\n+\t    if (result == -1)\n+\t      {\n+\t\tdelete_insn (insn);\n+\t\tbreak;\n+\t      }\n+\n+\t    /* If TRAP_CONDITION has become always true, replace\n+\t       TRAP_CONDITION with const_true_rtx.  */\n+\t    if (result == 1)\n+\t      TRAP_CONDITION (body) = const_true_rtx;\n+\n+\t    /* Rerecognize the instruction if it has changed.  */\n+\t    if (result != 0)\n+\t      INSN_CODE (insn) = -1;\n+\t  }\n+\n+\t/* If this is a conditional trap, maybe modify it if the cc's\n+\t   are in a nonstandard state so that it accomplishes the same\n+\t   thing that it would do straightforwardly if the cc's were\n+\t   set up normally.  */\n+\tif (cc_status.flags != 0\n+\t    && NONJUMP_INSN_P (insn)\n+\t    && GET_CODE (body) == TRAP_IF\n+\t    && COMPARISON_P (TRAP_CONDITION (body))\n+\t    && XEXP (TRAP_CONDITION (body), 0) == cc0_rtx)\n+\t  {\n+\t    /* This function may alter the contents of its argument\n+\t       and clear some of the cc_status.flags bits.\n+\t       It may also return 1 meaning condition now always true\n+\t       or -1 meaning condition now always false\n+\t       or 2 meaning condition nontrivial but altered.  */\n+\t    int result = alter_cond (TRAP_CONDITION (body));\n+\n+\t    /* If TRAP_CONDITION has become always false, delete the\n+\t       instruction.  */\n+\t    if (result == -1)\n+\t      {\n+\t\tdelete_insn (insn);\n+\t\tbreak;\n+\t      }\n+\n+\t    /* If TRAP_CONDITION has become always true, replace\n+\t       TRAP_CONDITION with const_true_rtx.  */\n+\t    if (result == 1)\n+\t      TRAP_CONDITION (body) = const_true_rtx;\n+\n+\t    /* Rerecognize the instruction if it has changed.  */\n+\t    if (result != 0)\n+\t      INSN_CODE (insn) = -1;\n+\t  }\n+\n \t/* Make same adjustments to instructions that examine the\n \t   condition codes without jumping and instructions that\n \t   handle conditional moves (if this machine has either one).  */"}]}