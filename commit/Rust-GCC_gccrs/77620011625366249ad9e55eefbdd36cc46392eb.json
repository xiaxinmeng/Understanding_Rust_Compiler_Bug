{"sha": "77620011625366249ad9e55eefbdd36cc46392eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc2MjAwMTE2MjUzNjYyNDlhZDllNTVlZWZiZGQzNmNjNDYzOTJlYg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2010-04-23T14:52:06Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2010-04-23T14:52:06Z"}, "message": "re PR tree-optimization/43846 (array vs members, total scalarization issues)\n\n2010-04-23  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/43846\n\t* tree-sra.c (struct access): New flag grp_assignment_read.\n\t(build_accesses_from_assign): Set grp_assignment_read.\n\t(sort_and_splice_var_accesses): Propagate grp_assignment_read.\n\t(enum mark_read_status): New type.\n\t(analyze_access_subtree): Propagate grp_assignment_read, create\n\taccesses also if both direct_read and root->grp_assignment_read.\n\n\t* testsuite/gcc.dg/tree-ssa/sra-10.c: New test.\n\nFrom-SVN: r158668", "tree": {"sha": "b7621897c359b3f544e651db9bbab0e6dc80a53f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7621897c359b3f544e651db9bbab0e6dc80a53f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77620011625366249ad9e55eefbdd36cc46392eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77620011625366249ad9e55eefbdd36cc46392eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77620011625366249ad9e55eefbdd36cc46392eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77620011625366249ad9e55eefbdd36cc46392eb/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5c20baf14a210ac2df9f81b5a6f90b8ae8455d6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c20baf14a210ac2df9f81b5a6f90b8ae8455d6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c20baf14a210ac2df9f81b5a6f90b8ae8455d6d"}], "stats": {"total": 79, "additions": 67, "deletions": 12}, "files": [{"sha": "45ff41d3ad664a8746cce06fc4b3b7194888adca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77620011625366249ad9e55eefbdd36cc46392eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77620011625366249ad9e55eefbdd36cc46392eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77620011625366249ad9e55eefbdd36cc46392eb", "patch": "@@ -1,3 +1,13 @@\n+2010-04-23  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/43846\n+\t* tree-sra.c (struct access): New flag grp_assignment_read.\n+\t(build_accesses_from_assign): Set grp_assignment_read.\n+\t(sort_and_splice_var_accesses): Propagate grp_assignment_read.\n+\t(enum mark_read_status): New type.\n+\t(analyze_access_subtree): Propagate grp_assignment_read, create\n+\taccesses also if both direct_read and root->grp_assignment_read.\n+\n 2010-04-23  Martin Jambor  <mjambor@suse.cz>\n \n \tPR middle-end/43835"}, {"sha": "9dccbadd47e35a77e8500b61dae9ef355860afa8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77620011625366249ad9e55eefbdd36cc46392eb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77620011625366249ad9e55eefbdd36cc46392eb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77620011625366249ad9e55eefbdd36cc46392eb", "patch": "@@ -1,3 +1,8 @@\n+2010-04-23  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/43846\n+\t* gcc.dg/tree-ssa/sra-10.c: New test.\n+\n 2010-04-23  Martin Jambor  <mjambor@suse.cz>\n \n \tPR middle-end/43835"}, {"sha": "10e2790788eb7227fa303cc32d4fff2e979d02a4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/sra-10.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77620011625366249ad9e55eefbdd36cc46392eb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsra-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77620011625366249ad9e55eefbdd36cc46392eb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsra-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsra-10.c?ref=77620011625366249ad9e55eefbdd36cc46392eb", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-optimized -fdump-tree-esra-details\" } */\n+\n+struct S\n+{\n+  int a[1];\n+  int z[256];\n+};\n+\n+void foo (struct S *s, int i)\n+{\n+  struct S disappear;\n+\n+  disappear.a[i] = 12;\n+  *s = disappear;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"disappear\" 0 \"optimized\"} } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "1bfb5c2ab1253c03cc2ee1e7f7f8a671059797bd", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 33, "deletions": 12, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77620011625366249ad9e55eefbdd36cc46392eb/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77620011625366249ad9e55eefbdd36cc46392eb/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=77620011625366249ad9e55eefbdd36cc46392eb", "patch": "@@ -182,6 +182,10 @@ struct access\n      access tree.  */\n   unsigned grp_read : 1;\n \n+  /* Does this group contain a read access that comes from an assignment\n+     statement?  This flag is propagated down the access tree.  */\n+  unsigned grp_assignment_read : 1;\n+\n   /* Other passes of the analysis use this bit to make function\n      analyze_access_subtree create scalar replacements for this group if\n      possible.  */\n@@ -1031,9 +1035,13 @@ build_accesses_from_assign (gimple *stmt_ptr,\n   racc = build_access_from_expr_1 (rhs_ptr, stmt, false);\n   lacc = build_access_from_expr_1 (lhs_ptr, stmt, true);\n \n-  if (should_scalarize_away_bitmap && !gimple_has_volatile_ops (stmt)\n-      && racc && !is_gimple_reg_type (racc->type))\n-    bitmap_set_bit (should_scalarize_away_bitmap, DECL_UID (racc->base));\n+  if (racc)\n+    {\n+      racc->grp_assignment_read = 1;\n+      if (should_scalarize_away_bitmap && !gimple_has_volatile_ops (stmt)\n+\t  && !is_gimple_reg_type (racc->type))\n+\tbitmap_set_bit (should_scalarize_away_bitmap, DECL_UID (racc->base));\n+    }\n \n   if (lacc && racc\n       && (sra_mode == SRA_MODE_EARLY_INTRA || sra_mode == SRA_MODE_INTRA)\n@@ -1580,6 +1588,7 @@ sort_and_splice_var_accesses (tree var)\n       struct access *access = VEC_index (access_p, access_vec, i);\n       bool grp_write = access->write;\n       bool grp_read = !access->write;\n+      bool grp_assignment_read = access->grp_assignment_read;\n       bool multiple_reads = false;\n       bool total_scalarization = access->total_scalarization;\n       bool grp_partial_lhs = access->grp_partial_lhs;\n@@ -1613,6 +1622,7 @@ sort_and_splice_var_accesses (tree var)\n \t      else\n \t\tgrp_read = true;\n \t    }\n+\t  grp_assignment_read |= ac2->grp_assignment_read;\n \t  grp_partial_lhs |= ac2->grp_partial_lhs;\n \t  unscalarizable_region |= ac2->grp_unscalarizable_region;\n \t  total_scalarization |= ac2->total_scalarization;\n@@ -1631,6 +1641,7 @@ sort_and_splice_var_accesses (tree var)\n       access->group_representative = access;\n       access->grp_write = grp_write;\n       access->grp_read = grp_read;\n+      access->grp_assignment_read = grp_assignment_read;\n       access->grp_hint = multiple_reads || total_scalarization;\n       access->grp_partial_lhs = grp_partial_lhs;\n       access->grp_unscalarizable_region = unscalarizable_region;\n@@ -1765,14 +1776,17 @@ expr_with_var_bounded_array_refs_p (tree expr)\n   return false;\n }\n \n+enum mark_read_status { SRA_MR_NOT_READ, SRA_MR_READ, SRA_MR_ASSIGN_READ};\n+\n /* Analyze the subtree of accesses rooted in ROOT, scheduling replacements when\n-   both seeming beneficial and when ALLOW_REPLACEMENTS allows it.  Also set\n-   all sorts of access flags appropriately along the way, notably always ser\n-   grp_read when MARK_READ is true and grp_write when MARK_WRITE is true.  */\n+   both seeming beneficial and when ALLOW_REPLACEMENTS allows it.  Also set all\n+   sorts of access flags appropriately along the way, notably always set\n+   grp_read and grp_assign_read according to MARK_READ and grp_write when\n+   MARK_WRITE is true.  */\n \n static bool\n analyze_access_subtree (struct access *root, bool allow_replacements,\n-\t\t\tbool mark_read, bool mark_write)\n+\t\t\tenum mark_read_status mark_read, bool mark_write)\n {\n   struct access *child;\n   HOST_WIDE_INT limit = root->offset + root->size;\n@@ -1781,10 +1795,17 @@ analyze_access_subtree (struct access *root, bool allow_replacements,\n   bool hole = false, sth_created = false;\n   bool direct_read = root->grp_read;\n \n-  if (mark_read)\n-    root->grp_read = true;\n+  if (mark_read == SRA_MR_ASSIGN_READ)\n+    {\n+      root->grp_read = 1;\n+      root->grp_assignment_read = 1;\n+    }\n+  if (mark_read == SRA_MR_READ)\n+    root->grp_read = 1;\n+  else if (root->grp_assignment_read)\n+    mark_read = SRA_MR_ASSIGN_READ;\n   else if (root->grp_read)\n-    mark_read = true;\n+    mark_read = SRA_MR_READ;\n \n   if (mark_write)\n     root->grp_write = true;\n@@ -1813,7 +1834,7 @@ analyze_access_subtree (struct access *root, bool allow_replacements,\n \n   if (allow_replacements && scalar && !root->first_child\n       && (root->grp_hint\n-\t  || (direct_read && root->grp_write))\n+\t  || (root->grp_write && (direct_read || root->grp_assignment_read)))\n       /* We must not ICE later on when trying to build an access to the\n \t original data within the aggregate even when it is impossible to do in\n \t a defined way like in the PR 42703 testcase.  Therefore we check\n@@ -1858,7 +1879,7 @@ analyze_access_trees (struct access *access)\n \n   while (access)\n     {\n-      if (analyze_access_subtree (access, true, false, false))\n+      if (analyze_access_subtree (access, true, SRA_MR_NOT_READ, false))\n \tret = true;\n       access = access->next_grp;\n     }"}]}