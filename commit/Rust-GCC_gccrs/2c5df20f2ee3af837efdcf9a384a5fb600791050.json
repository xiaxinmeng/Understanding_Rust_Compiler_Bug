{"sha": "2c5df20f2ee3af837efdcf9a384a5fb600791050", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM1ZGYyMGYyZWUzYWY4MzdlZmRjZjlhMzg0YTVmYjYwMDc5MTA1MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-08-19T16:59:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-08-19T16:59:37Z"}, "message": "except.c (pending_noexcept, [...]): New.\n\n\t* except.c (pending_noexcept, pending_noexcept_checks): New.\n\t(perform_deferred_noexcept_checks): New.\n\t(maybe_noexcept_warning): Split from...\n\t(finish_noexcept_expr): ...here.  Adjust.\n\t* decl2.c (cp_write_global_declarations): Call\n\tperform_deferred_noexcept_checks.\n\t* cp-tree.h: And declare it.\n\nFrom-SVN: r163379", "tree": {"sha": "e43271e2f5bde4f31bf2664b89322cd4b225faac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e43271e2f5bde4f31bf2664b89322cd4b225faac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c5df20f2ee3af837efdcf9a384a5fb600791050", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c5df20f2ee3af837efdcf9a384a5fb600791050", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c5df20f2ee3af837efdcf9a384a5fb600791050", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c5df20f2ee3af837efdcf9a384a5fb600791050/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcaa4ca43392cfedaa9ce44dd7280236c1726ed9"}], "stats": {"total": 95, "additions": 89, "deletions": 6}, "files": [{"sha": "d93fd4a0ecfeeff61b47311ed0c09c6a034145d3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5df20f2ee3af837efdcf9a384a5fb600791050/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5df20f2ee3af837efdcf9a384a5fb600791050/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2c5df20f2ee3af837efdcf9a384a5fb600791050", "patch": "@@ -1,3 +1,13 @@\n+2010-08-19  Jason Merrill  <jason@redhat.com>\n+\n+\t* except.c (pending_noexcept, pending_noexcept_checks): New.\n+\t(perform_deferred_noexcept_checks): New.\n+\t(maybe_noexcept_warning): Split from...\n+\t(finish_noexcept_expr): ...here.  Adjust.\n+\t* decl2.c (cp_write_global_declarations): Call\n+\tperform_deferred_noexcept_checks.\n+\t* cp-tree.h: And declare it.\n+\n 2010-08-18  Nathan Froyd  <froydnj@codesourcery.com>\n \n \tPR c++/45049"}, {"sha": "dce28dfcaafca557ab0f3a574b155357e32a9e07", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5df20f2ee3af837efdcf9a384a5fb600791050/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5df20f2ee3af837efdcf9a384a5fb600791050/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2c5df20f2ee3af837efdcf9a384a5fb600791050", "patch": "@@ -4883,6 +4883,7 @@ extern tree build_throw\t\t\t\t(tree);\n extern int nothrow_libfn_p\t\t\t(const_tree);\n extern void check_handlers\t\t\t(tree);\n extern tree finish_noexcept_expr\t\t(tree, tsubst_flags_t);\n+extern void perform_deferred_noexcept_checks\t(void);\n extern bool nothrow_spec_p\t\t\t(const_tree);\n extern bool type_noexcept_p\t\t\t(const_tree);\n extern bool type_throw_all_p\t\t\t(const_tree);"}, {"sha": "fed345246a63fdd673ed6ddf844bed7db8cda6fb", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5df20f2ee3af837efdcf9a384a5fb600791050/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5df20f2ee3af837efdcf9a384a5fb600791050/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=2c5df20f2ee3af837efdcf9a384a5fb600791050", "patch": "@@ -3934,6 +3934,8 @@ cp_write_global_declarations (void)\n \t\t\t\t      VEC_length (tree, pending_statics));\n     }\n \n+  perform_deferred_noexcept_checks ();\n+\n   /* Generate hidden aliases for Java.  */\n   if (candidates)\n     {"}, {"sha": "20b44e3ed04c23e54365cf0316f147744c10f7aa", "filename": "gcc/cp/except.c", "status": "modified", "additions": 58, "deletions": 6, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5df20f2ee3af837efdcf9a384a5fb600791050/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5df20f2ee3af837efdcf9a384a5fb600791050/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=2c5df20f2ee3af837efdcf9a384a5fb600791050", "patch": "@@ -1069,6 +1069,51 @@ check_noexcept_r (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n   return NULL_TREE;\n }\n \n+/* If a function that causes a noexcept-expression to be false isn't\n+   defined yet, remember it and check it for TREE_NOTHROW again at EOF.  */\n+\n+typedef struct GTY(()) pending_noexcept {\n+  tree fn;\n+  location_t loc;\n+} pending_noexcept;\n+DEF_VEC_O(pending_noexcept);\n+DEF_VEC_ALLOC_O(pending_noexcept,gc);\n+static GTY(()) VEC(pending_noexcept,gc) *pending_noexcept_checks;\n+\n+/* FN is a FUNCTION_DECL that caused a noexcept-expr to be false.  Warn if\n+   it can't throw.  */\n+\n+static void\n+maybe_noexcept_warning (tree fn)\n+{\n+  if (TREE_NOTHROW (fn))\n+    {\n+      warning (OPT_Wnoexcept, \"noexcept-expression evaluates to %<false%> \"\n+\t       \"because of a call to %qD\", fn);\n+      warning (OPT_Wnoexcept, \"but %q+D does not throw; perhaps \"\n+\t       \"it should be declared %<noexcept%>\", fn);\n+    }\n+}\n+\n+/* Check any functions that weren't defined earlier when they caused a\n+   noexcept expression to evaluate to false.  */\n+\n+void\n+perform_deferred_noexcept_checks (void)\n+{\n+  int i;\n+  pending_noexcept *p;\n+  location_t saved_loc = input_location;\n+  for (i = 0;\n+       VEC_iterate (pending_noexcept, pending_noexcept_checks, i, p);\n+       ++i)\n+    {\n+      input_location = p->loc;\n+      maybe_noexcept_warning (p->fn);\n+    }\n+  input_location = saved_loc;\n+}\n+\n /* Evaluate noexcept ( EXPR ).  */\n \n tree\n@@ -1082,13 +1127,20 @@ finish_noexcept_expr (tree expr, tsubst_flags_t complain)\n   fn = cp_walk_tree_without_duplicates (&expr, check_noexcept_r, 0);\n   if (fn)\n     {\n-      if ((complain & tf_warning) && TREE_CODE (fn) == FUNCTION_DECL\n-\t  && TREE_NOTHROW (fn) && !DECL_ARTIFICIAL (fn))\n+      if ((complain & tf_warning) && warn_noexcept\n+\t  && TREE_CODE (fn) == FUNCTION_DECL)\n \t{\n-\t  warning (OPT_Wnoexcept, \"noexcept-expression evaluates to %<false%> \"\n-\t\t   \"because of a call to %qD\", fn);\n-\t  warning (OPT_Wnoexcept, \"but %q+D does not throw; perhaps \"\n-\t\t   \"it should be declared %<noexcept%>\", fn);\n+\t  if (!DECL_INITIAL (fn))\n+\t    {\n+\t      /* Not defined yet; check again at EOF.  */\n+\t      pending_noexcept *p\n+\t\t= VEC_safe_push (pending_noexcept, gc,\n+\t\t\t\t pending_noexcept_checks, NULL);\n+\t      p->fn = fn;\n+\t      p->loc = input_location;\n+\t    }\n+\t  else\n+\t    maybe_noexcept_warning (fn);\n \t}\n       return boolean_false_node;\n     }"}, {"sha": "304a8e89f224fa3cdbc09208dc0bc20714c2f1be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5df20f2ee3af837efdcf9a384a5fb600791050/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5df20f2ee3af837efdcf9a384a5fb600791050/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2c5df20f2ee3af837efdcf9a384a5fb600791050", "patch": "@@ -1,3 +1,7 @@\n+2010-08-19  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/noexcept09.C: New.\n+\n 2010-08-19  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/29785"}, {"sha": "2a4525cbd6c1929c99f69d8c9d5e22856c668023", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept09.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5df20f2ee3af837efdcf9a384a5fb600791050/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept09.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5df20f2ee3af837efdcf9a384a5fb600791050/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept09.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept09.C?ref=2c5df20f2ee3af837efdcf9a384a5fb600791050", "patch": "@@ -0,0 +1,14 @@\n+// Test that -Wnoexcept works with templates\n+// { dg-options \"-std=c++0x -Wnoexcept\" }\n+\n+template <class T>\n+T f (T t) { return t; }\t\t// { dg-warning \"does not throw\" }\n+\n+#define SA(X) static_assert(X, #X)\n+\n+SA (!noexcept(f(1)));\t\t// { dg-warning \"noexcept\" }\n+\n+int main()\n+{\n+  f(1);\t\t\t\t// Use f(int) so it gets instantiated\n+}"}]}