{"sha": "cea05fab5258188afcd73a957e89a9eb06d5e010", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VhMDVmYWI1MjU4MTg4YWZjZDczYTk1N2U4OWE5ZWIwNmQ1ZTAxMA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-02-15T23:35:34Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-02-15T23:35:34Z"}, "message": "Fix alloca on NT\n\nFrom-SVN: r11280", "tree": {"sha": "6316c8d210dcbab5ed23c7b652fb2299f4add8ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6316c8d210dcbab5ed23c7b652fb2299f4add8ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cea05fab5258188afcd73a957e89a9eb06d5e010", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cea05fab5258188afcd73a957e89a9eb06d5e010", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cea05fab5258188afcd73a957e89a9eb06d5e010", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cea05fab5258188afcd73a957e89a9eb06d5e010/comments", "author": null, "committer": null, "parents": [{"sha": "10568ad0dd64fc868941cb4f21d05ac802708c24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10568ad0dd64fc868941cb4f21d05ac802708c24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10568ad0dd64fc868941cb4f21d05ac802708c24"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "38ce9eb6fbb0e95132bab283c01acc558b606ee9", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea05fab5258188afcd73a957e89a9eb06d5e010/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea05fab5258188afcd73a957e89a9eb06d5e010/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=cea05fab5258188afcd73a957e89a9eb06d5e010", "patch": "@@ -6336,9 +6336,10 @@\n   if (DEFAULT_ABI == ABI_NT\n       && (GET_CODE (operands[0]) != CONST_INT || INTVAL (operands[0]) > 4096))\n     {\n-      emit_library_call (gen_rtx (SYMBOL_REF, Pmode, \\\"__allocate_stack\\\"), 0,\n-\t\t\t VOIDmode, 1,\n-\t\t\t operands[0], Pmode);\n+      rtx tmp = gen_reg_rtx (SImode);\n+      emit_library_call_value (gen_rtx (SYMBOL_REF, Pmode, \\\"__allocate_stack\\\"),\n+\t\t\t       tmp, 0, SImode, 1, operands[0], Pmode);\n+      emit_insn (gen_set_sp (tmp));\n       DONE;\n     }\n \n@@ -6363,6 +6364,16 @@\n   DONE;\n }\")\n \n+;; Marker to indicate that the stack pointer was changed under NT in\n+;; ways not known to the compiler\n+\n+(define_insn \"set_sp\"\n+  [(set (reg:SI 1)\n+\t(unspec [(match_operand:SI 0 \"register_operand\" \"r\")] 7))]\n+  \"\"\n+  \"\"\n+  [(set_attr \"length\" \"0\")])\n+\n ;; These patterns say how to save and restore the stack pointer.  We need not\n ;; save the stack pointer at function level since we are careful to\n ;; preserve the backchain.  At block level, we have to restore the backchain"}]}