{"sha": "2d8536f61419a898706e351bba964250af57006a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ4NTM2ZjYxNDE5YTg5ODcwNmUzNTFiYmE5NjQyNTBhZjU3MDA2YQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-01-20T21:29:28Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-01-20T21:29:28Z"}, "message": "compiler: Do not mark unused variables as used inside closures.\n\nFixes golang/go#6415.\n\nFrom-SVN: r219916", "tree": {"sha": "2b48fadd2f5cb2e9e9354f1c242d17a3d34362f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b48fadd2f5cb2e9e9354f1c242d17a3d34362f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d8536f61419a898706e351bba964250af57006a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8536f61419a898706e351bba964250af57006a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d8536f61419a898706e351bba964250af57006a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8536f61419a898706e351bba964250af57006a/comments", "author": null, "committer": null, "parents": [{"sha": "039ad4c2f435f8e345e123af8a324c50d1a85c86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/039ad4c2f435f8e345e123af8a324c50d1a85c86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/039ad4c2f435f8e345e123af8a324c50d1a85c86"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "3e7c3728816ac607167f726ab982396c88e77878", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8536f61419a898706e351bba964250af57006a/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8536f61419a898706e351bba964250af57006a/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=2d8536f61419a898706e351bba964250af57006a", "patch": "@@ -2450,7 +2450,7 @@ Parse::operand(bool may_be_sink, bool* is_parenthesized)\n \t    && (named_object->is_variable()\n \t\t|| named_object->is_result_variable()))\n \t  return this->enclosing_var_reference(in_function, named_object,\n-\t\t\t\t\t       location);\n+\t\t\t\t\t       may_be_sink, location);\n \n \tswitch (named_object->classification())\n \t  {\n@@ -2591,11 +2591,14 @@ Parse::operand(bool may_be_sink, bool* is_parenthesized)\n \n Expression*\n Parse::enclosing_var_reference(Named_object* in_function, Named_object* var,\n-\t\t\t       Location location)\n+\t\t\t       bool may_be_sink, Location location)\n {\n   go_assert(var->is_variable() || var->is_result_variable());\n \n-  this->mark_var_used(var);\n+  // Any left-hand-side can be a sink, so if this can not be\n+  // a sink, then it must be a use of the variable.\n+  if (!may_be_sink)\n+    this->mark_var_used(var);\n \n   Named_object* this_function = this->gogo_->current_function();\n   Named_object* closure = this_function->func_value()->closure_var();\n@@ -2912,7 +2915,7 @@ Parse::create_closure(Named_object* function, Enclosing_vars* enclosing_vars,\n \tref = Expression::make_var_reference(var, location);\n       else\n \tref = this->enclosing_var_reference(ev[i].in_function(), var,\n-\t\t\t\t\t    location);\n+\t\t\t\t\t    true, location);\n       Expression* refaddr = Expression::make_unary(OPERATOR_AND, ref,\n \t\t\t\t\t\t   location);\n       initializer->push_back(refaddr);\n@@ -3215,7 +3218,7 @@ Parse::id_to_expression(const std::string& name, Location location,\n   if (in_function != NULL\n       && in_function != this->gogo_->current_function()\n       && (named_object->is_variable() || named_object->is_result_variable()))\n-    return this->enclosing_var_reference(in_function, named_object,\n+    return this->enclosing_var_reference(in_function, named_object, is_lhs,\n \t\t\t\t\t location);\n \n   switch (named_object->classification())\n@@ -5722,6 +5725,20 @@ Parse::verify_not_sink(Expression* expr)\n   Var_expression* ve = expr->var_expression();\n   if (ve != NULL)\n     this->mark_var_used(ve->named_object());\n+  else if (expr->deref()->field_reference_expression() != NULL\n+\t   && this->gogo_->current_function() != NULL)\n+    {\n+      // We could be looking at a variable referenced from a closure.\n+      // If so, we need to get the enclosed variable and mark it as used.\n+      Function* this_function = this->gogo_->current_function()->func_value();\n+      Named_object* closure = this_function->closure_var();\n+      if (closure != NULL)\n+\t{\n+\t  unsigned int var_index =\n+\t    expr->deref()->field_reference_expression()->field_index();\n+\t  this->mark_var_used(this_function->enclosing_var(var_index - 1));\n+\t}\n+    }\n \n   return expr;\n }"}, {"sha": "9dd3b167b847decf3c4c2e471786457d43974a71", "filename": "gcc/go/gofrontend/parse.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8536f61419a898706e351bba964250af57006a/gcc%2Fgo%2Fgofrontend%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8536f61419a898706e351bba964250af57006a/gcc%2Fgo%2Fgofrontend%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.h?ref=2d8536f61419a898706e351bba964250af57006a", "patch": "@@ -218,7 +218,7 @@ class Parse\n   Typed_identifier* receiver();\n   Expression* operand(bool may_be_sink, bool *is_parenthesized);\n   Expression* enclosing_var_reference(Named_object*, Named_object*,\n-\t\t\t\t      Location);\n+\t\t\t\t      bool may_be_sink, Location);\n   Expression* composite_lit(Type*, int depth, Location);\n   Expression* function_lit();\n   Expression* create_closure(Named_object* function, Enclosing_vars*,"}]}