{"sha": "9a376494fbb0cdc7d2efd8fdc9deaf85541c2e29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWEzNzY0OTRmYmIwY2RjN2QyZWZkOGZkYzlkZWFmODU1NDFjMmUyOQ==", "commit": {"author": {"name": "Volker Reichelt", "email": "reichelt@igpm.rwth-aachen.de", "date": "2003-01-27T10:30:11Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2003-01-27T10:30:11Z"}, "message": "cppopts.texi: Fix typo.\n\n\t* doc/cppopts.texi: Fix typo.\n\t* doc/objc.texi: Likewise.\n\t* doc/passes.texi: Likewise.\n\nFrom-SVN: r61878", "tree": {"sha": "e3b4732d4eabe40db592e10460d4587ded1d9680", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3b4732d4eabe40db592e10460d4587ded1d9680"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a376494fbb0cdc7d2efd8fdc9deaf85541c2e29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a376494fbb0cdc7d2efd8fdc9deaf85541c2e29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a376494fbb0cdc7d2efd8fdc9deaf85541c2e29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a376494fbb0cdc7d2efd8fdc9deaf85541c2e29/comments", "author": null, "committer": null, "parents": [{"sha": "f004e5f376bd037ad11934b23c765bbfd428b242", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f004e5f376bd037ad11934b23c765bbfd428b242", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f004e5f376bd037ad11934b23c765bbfd428b242"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "a0240875b7fa3f9b8a3ec4681ceb8fbd960e3015", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a376494fbb0cdc7d2efd8fdc9deaf85541c2e29/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a376494fbb0cdc7d2efd8fdc9deaf85541c2e29/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a376494fbb0cdc7d2efd8fdc9deaf85541c2e29", "patch": "@@ -1,3 +1,9 @@\n+2003-01-27  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\t* doc/cppopts.texi: Fix typo.\n+\t* doc/objc.texi: Likewise.\n+\t* doc/passes.texi: Likewise.\n+\n 2003-01-27  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* real.c (ibm_extended_format): Add 53 to minimum exponent."}, {"sha": "c830710af58b0617ccc8748cda8e0915666c4e07", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a376494fbb0cdc7d2efd8fdc9deaf85541c2e29/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a376494fbb0cdc7d2efd8fdc9deaf85541c2e29/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=9a376494fbb0cdc7d2efd8fdc9deaf85541c2e29", "patch": "@@ -575,7 +575,7 @@ also passed through to the output file where the macro is expanded.\n In addition to the side-effects of the @option{-C} option, the\n @option{-CC} option causes all C++-style comments inside a macro\n to be converted to C-style comments.  This is to prevent later use\n-of that macro from inadvertently commenting out the remainer of\n+of that macro from inadvertently commenting out the remainder of\n the source line.\n \n The @option{-CC} option is generally used to support lint comments."}, {"sha": "c25fdb16411cc2ccde5320fc6bbbc311de3528dc", "filename": "gcc/doc/objc.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a376494fbb0cdc7d2efd8fdc9deaf85541c2e29/gcc%2Fdoc%2Fobjc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a376494fbb0cdc7d2efd8fdc9deaf85541c2e29/gcc%2Fdoc%2Fobjc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fobjc.texi?ref=9a376494fbb0cdc7d2efd8fdc9deaf85541c2e29", "patch": "@@ -423,7 +423,7 @@ as @code{NXConstantString}'s structure:\n libraries may choose to inherit the customized constant string class\n from a different class than @code{Object}.  There is no requirement in\n the methods the constant string class has to implement, but the final\n-ivar layour of the class must be the compatible with the given\n+ivar layout of the class must be the compatible with the given\n structure.\n \n When the compiler creates the statically allocated constant string"}, {"sha": "9da55d4b452a360a3d77c647fc0ffaf6826094ca", "filename": "gcc/doc/passes.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a376494fbb0cdc7d2efd8fdc9deaf85541c2e29/gcc%2Fdoc%2Fpasses.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a376494fbb0cdc7d2efd8fdc9deaf85541c2e29/gcc%2Fdoc%2Fpasses.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fpasses.texi?ref=9a376494fbb0cdc7d2efd8fdc9deaf85541c2e29", "patch": "@@ -441,7 +441,7 @@ appending @samp{.sched} to the input file name.\n \n @cindex register allocation\n @item\n-Register allocation.  These passes make sure that all occurences of pseudo\n+Register allocation.  These passes make sure that all occurrences of pseudo\n registers are eliminated, either by allocating them to a hard register,\n replacing them by an equivalent expression (e.g.@: a constant) or by placing\n them on the stack.  This is done in several subpasses:"}]}