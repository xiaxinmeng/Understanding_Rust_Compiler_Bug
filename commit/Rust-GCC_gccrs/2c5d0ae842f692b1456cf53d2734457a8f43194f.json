{"sha": "2c5d0ae842f692b1456cf53d2734457a8f43194f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM1ZDBhZTg0MmY2OTJiMTQ1NmNmNTNkMjczNDQ1N2E4ZjQzMTk0Zg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2004-02-27T00:49:50Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-02-27T00:49:50Z"}, "message": "atomicity.h: New, forward declarations for __atomic_add and __exchange_and_add.\n\n\n2004-02-25  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/atomicity.h: New, forward declarations for __atomic_add\n\tand __exchange_and_add.\n\t* config/cpu/generic/atomic_word.h: New, typdef for atomic word.\n\t* config/cpu/cris/atomic_word.h: Same.\n\t* config/cpu/sparc/atomic_word.h: Same.\n\t* include/bits/ios_base.h (_Callback_list::_M_remove_reference):\n\tQualifiy with __gnu_cxx.\n\t(_Callback_list::_M_add_reference): Same.\n\t* include/bits/locale_classes.h (locale::facet::_M_add_reference): Add.\n\t(locale::facet::_M_remove_reference): Same.\n\t(locale::_Impl::_M_add_reference): Add.\n\t(locale::_Impl::_M_remove_reference): Same.\n\t* include/bits/basic_string.h (basic_string::_Rep::_M_refcopy): Same.\n\t(basic_string::_Rep::_M_dispose): Same.\n\t* src/ios.cc (ios_base::xalloc): Same.\n\t* src/ios_init.cc (ios_base::Init::Init): Same.\n\t(ios_base::Init::~Init): Same.\n\t* src/locale.cc (locale::id::_M_id): Same.\n\t* config/cpu/i486/atomicity.h: Use __gnu_cxx namespace. Remove\n\tstatic, and inline keyworks.\n\t* config/cpu/alpha/atomicity.h: Same.\n\t* config/cpu/cris/atomicity.h: Same.\n\t* config/cpu/generic/atomicity.h: Same.\n\t* config/cpu/hppa/atomicity.h: Same.\n\t* config/cpu/i386/atomicity.h: Same.\n\t* config/cpu/ia64/atomicity.h: Same.\n\t* config/cpu/m68k/atomicity.h: Same.\n\t* config/cpu/mips/atomicity.h: Same.\n\t* config/cpu/powerpc/atomicity.h: Same.\n\t* config/cpu/s390/atomicity.h: Same.\n\t* config/cpu/sparc/atomicity.h: Same.\n\n\t* src/Makefile.am (host_sources): Add atomicity.cc.\n\t(atomicity.cc): New rule.\n\t* src/Makefile.in: Regenerate.\n\t* include/Makefile.am (host_headers): Remove host atomicity.h.\n\t(host_headers): Add atomic_word.h.\n\t(bits_headers): Add bits atomicity.h.\n\tChange ATOMICITY_INC_SRCDIR to ATOMICITY_SRCDIR.\n\t* include/Makefile.in: Regenerate.\n\t* configure.host (atomic_word_dir): Add.\n\t* configure.ac: Substitute ATOMIC_WORD_SRCDIR. Change\n\tATOMICITY_INC_SRCDIR to ATOMICITY_SRCDIR.\n\t* configure: Regenerate.\n\t* config/linker-map.gnu: Export __exchange_and_add, and __atomic_add.\n\n\t* testsuite/27_io/ios_base/cons/assign_neg.cc: Adjust line numbers.\n\t* testsuite/27_io/ios_base/cons/copy_neg.cc: Same.\n\nFrom-SVN: r78544", "tree": {"sha": "886de6d6c6bb866d655ffbb36b4a11fba3620151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/886de6d6c6bb866d655ffbb36b4a11fba3620151"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c5d0ae842f692b1456cf53d2734457a8f43194f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c5d0ae842f692b1456cf53d2734457a8f43194f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c5d0ae842f692b1456cf53d2734457a8f43194f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c5d0ae842f692b1456cf53d2734457a8f43194f/comments", "author": null, "committer": null, "parents": [{"sha": "4d5fe28997dc77c3afeb47d400b6e62418705c34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d5fe28997dc77c3afeb47d400b6e62418705c34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d5fe28997dc77c3afeb47d400b6e62418705c34"}], "stats": {"total": 1428, "additions": 811, "deletions": 617}, "files": [{"sha": "39782cd3d796bf035b181eef07e24f92fd56e6f4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -1,3 +1,54 @@\n+2004-02-25  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/atomicity.h: New, forward declarations for __atomic_add\n+\tand __exchange_and_add.\n+\t* config/cpu/generic/atomic_word.h: New, typdef for atomic word.\n+\t* config/cpu/cris/atomic_word.h: Same.\n+\t* config/cpu/sparc/atomic_word.h: Same.\n+\t* include/bits/ios_base.h (_Callback_list::_M_remove_reference):\n+\tQualifiy with __gnu_cxx.\n+\t(_Callback_list::_M_add_reference): Same.\n+\t* include/bits/locale_classes.h (locale::facet::_M_add_reference): Add.\n+\t(locale::facet::_M_remove_reference): Same.\n+\t(locale::_Impl::_M_add_reference): Add.\n+\t(locale::_Impl::_M_remove_reference): Same.\n+\t* include/bits/basic_string.h (basic_string::_Rep::_M_refcopy): Same.\n+\t(basic_string::_Rep::_M_dispose): Same.\n+\t* src/ios.cc (ios_base::xalloc): Same.\n+\t* src/ios_init.cc (ios_base::Init::Init): Same.\n+\t(ios_base::Init::~Init): Same.\n+\t* src/locale.cc (locale::id::_M_id): Same.\n+\t* config/cpu/i486/atomicity.h: Use __gnu_cxx namespace. Remove\n+\tstatic, and inline keyworks.\n+\t* config/cpu/alpha/atomicity.h: Same.\n+\t* config/cpu/cris/atomicity.h: Same.\n+\t* config/cpu/generic/atomicity.h: Same.\n+\t* config/cpu/hppa/atomicity.h: Same.\n+\t* config/cpu/i386/atomicity.h: Same.\n+\t* config/cpu/ia64/atomicity.h: Same.\n+\t* config/cpu/m68k/atomicity.h: Same.\n+\t* config/cpu/mips/atomicity.h: Same.\n+\t* config/cpu/powerpc/atomicity.h: Same.\n+\t* config/cpu/s390/atomicity.h: Same.\n+\t* config/cpu/sparc/atomicity.h: Same.\n+\t\n+\t* src/Makefile.am (host_sources): Add atomicity.cc.\n+\t(atomicity.cc): New rule.\n+\t* src/Makefile.in: Regenerate.\n+\t* include/Makefile.am (host_headers): Remove host atomicity.h.\n+\t(host_headers): Add atomic_word.h.\n+\t(bits_headers): Add bits atomicity.h.\n+\tChange ATOMICITY_INC_SRCDIR to ATOMICITY_SRCDIR.\n+\t* include/Makefile.in: Regenerate.\n+\t* configure.host (atomic_word_dir): Add.\n+\t* configure.ac: Substitute ATOMIC_WORD_SRCDIR. Change\n+\tATOMICITY_INC_SRCDIR to ATOMICITY_SRCDIR.\n+\t* configure: Regenerate.\n+\t* config/linker-map.gnu: Export __exchange_and_add, and __atomic_add.\n+\n+\t* testsuite/27_io/ios_base/cons/assign_neg.cc: Adjust line numbers.\n+\t* testsuite/27_io/ios_base/cons/copy_neg.cc: Same.\t\n+\t\n 2004-02-25  Jonathan Wakely  <redi@gcc.gnu.org>\n \n \t* docs/html/20_util/howto.html, docs/html/20_util/allocator.html,"}, {"sha": "5be03557f9ed7b27d420e8711a1f93cdf361121c", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -1,4 +1,4 @@\n-# generated automatically by aclocal 1.7.9 -*- Autoconf -*-\n+# generated automatically by aclocal 1.7.8 -*- Autoconf -*-\n \n # Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002\n # Free Software Foundation, Inc.\n@@ -1997,7 +1997,7 @@ AC_DEFUN([AM_AUTOMAKE_VERSION],[am__api_version=\"1.7\"])\n # Call AM_AUTOMAKE_VERSION so it can be traced.\n # This function is AC_REQUIREd by AC_INIT_AUTOMAKE.\n AC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION],\n-\t [AM_AUTOMAKE_VERSION([1.7.9])])\n+\t [AM_AUTOMAKE_VERSION([1.7.8])])\n \n # Helper functions for option handling.                    -*- Autoconf -*-\n "}, {"sha": "4eb311b509a48a1d249839e0e6562f164c795783", "filename": "libstdc++-v3/config/cpu/alpha/atomicity.h", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Falpha%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Falpha%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Falpha%2Fatomicity.h?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -1,6 +1,6 @@\n // Low-level functions for atomic operations: Alpha version  -*- C++ -*-\n \n-// Copyright (C) 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2001, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,23 +27,22 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_ATOMICITY_H\n-#define _GLIBCXX_ATOMICITY_H\t1\n+#include <bits/atomicity.h>\n \n /* @@@ With gas we can play nice .subsection games to get the\n    non-predicted branch pointing forward.  But Digital assemblers\n    don't understand those directives.  This isn't a terribly\n    important issue, so just ignore it.  */\n \n-typedef int _Atomic_word;\n-\n-static inline _Atomic_word\n-__attribute__ ((__unused__))\n-__exchange_and_add(volatile _Atomic_word* __mem, int __val)\n+namespace __gnu_cxx\n {\n-  register int __result, __tmp;\n-\n-  __asm__ __volatile__ (\n+  _Atomic_word\n+  __attribute__ ((__unused__))\n+  __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n+  {\n+    register int __result, __tmp;\n+    \n+    __asm__ __volatile__ (\n       \"\\n$Lxadd_%=:\\n\\t\"\n       \"ldl_l  %0,%3\\n\\t\"\n       \"addl   %0,%4,%1\\n\\t\"\n@@ -53,16 +52,16 @@ __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n       : \"=&r\"(__result), \"=&r\"(__tmp), \"=m\"(*__mem)\n       : \"m\" (*__mem), \"r\"(__val));\n \n-  return __result;\n-}\n+    return __result;\n+  }\n \n-static inline void\n-__attribute__ ((__unused__))\n-__atomic_add(volatile _Atomic_word* __mem, int __val)\n-{\n-  register _Atomic_word __result;\n+  void\n+  __attribute__ ((__unused__))\n+  __atomic_add(volatile _Atomic_word* __mem, int __val)\n+  {\n+    register _Atomic_word __result;\n \n-  __asm__ __volatile__ (\n+    __asm__ __volatile__ (\n       \"\\n$Ladd_%=:\\n\\t\"\n       \"ldl_l  %0,%2\\n\\t\"\n       \"addl   %0,%3,%0\\n\\t\"\n@@ -71,6 +70,6 @@ __atomic_add(volatile _Atomic_word* __mem, int __val)\n       \"mb\"\n       : \"=&r\"(__result), \"=m\"(*__mem)\n       : \"m\" (*__mem), \"r\"(__val));\n-}\n+  }\n+} // namespace __gnu_cxx\n \n-#endif /* atomicity.h */"}, {"sha": "dd2cf6b834bbf083e6cf36559edcd73e1827c39c", "filename": "libstdc++-v3/config/cpu/cris/atomic_word.h", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fcris%2Fatomic_word.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fcris%2Fatomic_word.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fcris%2Fatomic_word.h?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -0,0 +1,36 @@\n+// Low-level type for atomic operations -*- C++ -*-\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _GLIBCXX_ATOMIC_WORD_H\n+#define _GLIBCXX_ATOMIC_WORD_H\t1\n+\n+// This entity must not cross a page boundary.\n+typedef int _Atomic_word __attribute__ ((__aligned__ (4)));\n+\n+#endif "}, {"sha": "965e0da6ea01c6345a4bbd1e990ed0ab77077aa5", "filename": "libstdc++-v3/config/cpu/cris/atomicity.h", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fcris%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fcris%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fcris%2Fatomicity.h?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -1,6 +1,6 @@\n // Low-level functions for atomic operations: CRIS version  -*- C++ -*-\n \n-// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,21 +27,19 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_ATOMICITY_H\n-#define _GLIBCXX_ATOMICITY_H\t1\n+#include <bits/atomicity.h>\n \n-// This entity must not cross a page boundary.\n-typedef int _Atomic_word __attribute__ ((__aligned__ (4)));\n-\n-static inline _Atomic_word\n-__attribute__ ((__unused__))\n-__exchange_and_add(_Atomic_word* __mem, int __val)\n+namespace __gnu_cxx\n {\n-  int __tmp;\n-  _Atomic_word __result;\n+  static inline _Atomic_word\n+  __attribute__ ((__unused__))\n+  __exchange_and_add(_Atomic_word* __mem, int __val)\n+  {\n+    int __tmp;\n+    _Atomic_word __result;\n \n #if (__CRIS_arch_version >= 10)\n-  __asm__ __volatile__ (\" clearf\t\t\\n\"\n+    __asm__ __volatile__ (\" clearf\t\t\\n\"\n \t\t\t\"0:\t\t\t\\n\"\n \t\t\t\" move.d %4,%2\t\t\\n\"\n \t\t\t\" move.d [%3],%0\t\\n\"\n@@ -53,7 +51,7 @@ __exchange_and_add(_Atomic_word* __mem, int __val)\n \t\t\t:  \"=&r\" (__result), \"=m\" (*__mem), \"=&r\" (__tmp)\n \t\t\t: \"r\" (__mem), \"g\" (__val), \"m\" (*__mem));\n #else\n-  __asm__ __volatile__ (\" move $ccr,$r9\t\t\\n\"\n+    __asm__ __volatile__ (\" move $ccr,$r9\t\t\\n\"\n \t\t\t\" di\t\t\t\\n\"\n \t\t\t\" move.d %4,%2\t\t\\n\"\n \t\t\t\" move.d [%3],%0\t\\n\"\n@@ -65,14 +63,11 @@ __exchange_and_add(_Atomic_word* __mem, int __val)\n \t\t\t: \"r9\");\n #endif\n \n-  return __result;\n-}\n-\n-static inline void\n-__attribute__ ((__unused__))\n-__atomic_add(_Atomic_word* __mem, int __val)\n-{\n-  __exchange_and_add(__mem, __val);\n-}\n+    return __result;\n+  }\n \n-#endif /* atomicity.h */\n+  void\n+  __attribute__ ((__unused__))\n+  __atomic_add(_Atomic_word* __mem, int __val)\n+  { __exchange_and_add(__mem, __val); }\n+} // namespace __gnu_cxx"}, {"sha": "b46adc2a4743efc75af3f53e4f6b607697625d3b", "filename": "libstdc++-v3/config/cpu/generic/atomic_word.h", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomic_word.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomic_word.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomic_word.h?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -0,0 +1,35 @@\n+// Low-level type for atomic operations -*- C++ -*-\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _GLIBCXX_ATOMIC_WORD_H\n+#define _GLIBCXX_ATOMIC_WORD_H\t1\n+\n+typedef int _Atomic_word;\n+\n+#endif "}, {"sha": "84817903bf5f7501f302b6b533a21100aa2bd397", "filename": "libstdc++-v3/config/cpu/generic/atomicity.h", "status": "modified", "additions": 20, "deletions": 31, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity.h?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -1,6 +1,6 @@\n // Low-level functions for atomic operations: Generic version  -*- C++ -*-\n \n-// Copyright (C) 1999, 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,15 +27,11 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_ATOMICITY_H\n-#define _GLIBCXX_ATOMICITY_H\t1\n-\n+#include <bits/atomicity.h>\n #include <bits/gthr.h>\n \n #define _GLIBCXX_NEED_GENERIC_MUTEX\n \n-typedef int _Atomic_word;\n-\n namespace __gnu_cxx\n {\n   extern __gthread_mutex_t _Atomic_add_mutex;\n@@ -44,34 +40,27 @@ namespace __gnu_cxx\n   extern __gthread_once_t _Atomic_add_mutex_once;\n   extern void __gthread_atomic_add_mutex_once();\n #endif\n-}\n \n-static inline _Atomic_word\n-__attribute__ ((__unused__))\n-__exchange_and_add(volatile _Atomic_word* __mem, int __val)\n-{\n+  _Atomic_word\n+  __attribute__ ((__unused__))\n+  __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n+  {\n #ifndef __GTHREAD_MUTEX_INIT\n-  __gthread_once(&__gnu_cxx::_Atomic_add_mutex_once,\n-\t\t __gnu_cxx::__gthread_atomic_add_mutex_once);\n+    __gthread_once(&__gnu_cxx::_Atomic_add_mutex_once,\n+\t\t   __gnu_cxx::__gthread_atomic_add_mutex_once);\n #endif\n \n-  _Atomic_word __result;\n-\n-  __gthread_mutex_lock(&__gnu_cxx::_Atomic_add_mutex);\n+    _Atomic_word __result;\n+    __gthread_mutex_lock(&__gnu_cxx::_Atomic_add_mutex);\n+    __result = *__mem;\n+    *__mem += __val;\n \n-  __result = *__mem;\n-  *__mem += __val;\n-\n-  __gthread_mutex_unlock(&__gnu_cxx::_Atomic_add_mutex);\n-  return __result;\n-}\n-\n-\n-static inline void\n-__attribute__ ((__unused__))\n-__atomic_add(volatile _Atomic_word* __mem, int __val)\n-{\n-  (void) __exchange_and_add(__mem, __val);\n-}\n+    __gthread_mutex_unlock(&__gnu_cxx::_Atomic_add_mutex);\n+    return __result;\n+  }\n \n-#endif /* atomicity.h */\n+  void\n+  __attribute__ ((__unused__))\n+  __atomic_add(volatile _Atomic_word* __mem, int __val)\n+  { __exchange_and_add(__mem, __val); }\n+} // namespace __gnu_cxx"}, {"sha": "4e0c2525a7090daf00c86917e110a00275d5a36e", "filename": "libstdc++-v3/config/cpu/hppa/atomicity.h", "status": "modified", "additions": 87, "deletions": 79, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fhppa%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fhppa%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fhppa%2Fatomicity.h?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -1,90 +1,98 @@\n-/* Low-level functions for atomic operations.  PA-RISC version. -*- C++ -*-\n-   Copyright 2002 Free Software Foundation, Inc.\n-   This file is part of the GNU C Library.\n+// Low-level functions for atomic operations: PA-RISC version  -*- C++ -*-\n \n-   The GNU C Library is free software; you can redistribute it and/or\n-   modify it under the terms of the GNU Library General Public License as\n-   published by the Free Software Foundation; either version 2 of the\n-   License, or (at your option) any later version.\n+// Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n \n-   The GNU C Library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-   Library General Public License for more details.\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n \n-   You should have received a copy of the GNU Library General Public\n-   License along with the GNU C Library; see the file COPYING.LIB.  If not,\n-   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n-   Boston, MA 02111-1307, USA.  */\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n \n-#ifndef _GLIBCXX_ATOMICITY_H\n-#define _GLIBCXX_ATOMICITY_H\t1\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n \n-typedef int _Atomic_word;\n+#include <bits/atomicity.h>\n \n-template <int __inst>\n-struct __Atomicity_lock\n+namespace __gnu_cxx\n {\n-  static volatile int _S_atomicity_lock;\n-};\n+  template<int __inst>\n+    struct __Atomicity_lock\n+    {\n+      static volatile int _S_atomicity_lock;\n+    };\n+  \n+  template<int __inst>\n+  volatile int\n+  __Atomicity_lock<__inst>::_S_atomicity_lock __attribute__ ((aligned (16))) = 1;\n \n-template <int __inst>\n-volatile int\n-__Atomicity_lock<__inst>::_S_atomicity_lock __attribute__ ((aligned (16))) = 1;\n-\n-/* Because of the lack of weak support when using the hpux\n-   som linker, we explicitly instantiate the atomicity lock\n-   in src/misc-inst.cc when _GLIBCXX_INST_ATOMICITY_LOCK\n-   is defined.  */\n+  /* Because of the lack of weak support when using the hpux\n+     som linker, we explicitly instantiate the atomicity lock\n+     in src/misc-inst.cc when _GLIBCXX_INST_ATOMICITY_LOCK\n+     is defined.  */\n #ifndef _GLIBCXX_INST_ATOMICITY_LOCK\n-template volatile int __Atomicity_lock<0>::_S_atomicity_lock;\n+  template volatile int __Atomicity_lock<0>::_S_atomicity_lock;\n #endif\n \n-static inline int\n-__attribute__ ((__unused__))\n-__exchange_and_add(volatile _Atomic_word* __mem, int __val)\n-{\n-  _Atomic_word result;\n-  int tmp;\n-  volatile int& lock = __Atomicity_lock<0>::_S_atomicity_lock;\n-\n-  __asm__ __volatile__ (\"ldcw 0(%1),%0\\n\\t\"\n-\t\t\t\"cmpib,<>,n 0,%0,.+20\\n\\t\"\n-\t\t\t\"ldw 0(%1),%0\\n\\t\"\n-\t\t\t\"cmpib,= 0,%0,.-4\\n\\t\"\n-\t\t\t\"nop\\n\\t\"\n-\t\t\t\"b,n .-20\"\n-\t\t\t: \"=&r\" (tmp)\n-\t\t\t: \"r\" (&lock));\n-\n-  result = *__mem;\n-  *__mem = result + __val;\n-  /* Reset lock with PA 2.0 \"ordered\" store.  */\n-  __asm__ __volatile__ (\"stw,ma %1,0(%0)\"\n-\t\t\t: : \"r\" (&lock), \"r\" (tmp) : \"memory\");\n-  return result;\n-}\n-\n-static inline void\n-__attribute__ ((__unused__))\n-__atomic_add(_Atomic_word* __mem, int __val)\n-{\n-  int tmp;\n-  volatile int& lock = __Atomicity_lock<0>::_S_atomicity_lock;\n-\n-  __asm__ __volatile__ (\"ldcw 0(%1),%0\\n\\t\"\n-\t\t\t\"cmpib,<>,n 0,%0,.+20\\n\\t\"\n-\t\t\t\"ldw 0(%1),%0\\n\\t\"\n-\t\t\t\"cmpib,= 0,%0,.-4\\n\\t\"\n-\t\t\t\"nop\\n\\t\"\n-\t\t\t\"b,n .-20\"\n-\t\t\t: \"=&r\" (tmp)\n-\t\t\t: \"r\" (&lock));\n-\n-  *__mem += __val;\n-  /* Reset lock with PA 2.0 \"ordered\" store.  */\n-  __asm__ __volatile__ (\"stw,ma %1,0(%0)\"\n-\t\t\t: : \"r\" (&lock), \"r\" (tmp) : \"memory\");\n-}\n-\n-#endif\n+  int\n+  __attribute__ ((__unused__))\n+  __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n+  {\n+    _Atomic_word result;\n+    int tmp;\n+    volatile int& lock = __Atomicity_lock<0>::_S_atomicity_lock;\n+    \n+    __asm__ __volatile__ (\"ldcw 0(%1),%0\\n\\t\"\n+\t\t\t  \"cmpib,<>,n 0,%0,.+20\\n\\t\"\n+\t\t\t  \"ldw 0(%1),%0\\n\\t\"\n+\t\t\t  \"cmpib,= 0,%0,.-4\\n\\t\"\n+\t\t\t  \"nop\\n\\t\"\n+\t\t\t  \"b,n .-20\"\n+\t\t\t  : \"=&r\" (tmp)\n+\t\t\t  : \"r\" (&lock));\n+    \n+    result = *__mem;\n+    *__mem = result + __val;\n+    /* Reset lock with PA 2.0 \"ordered\" store.  */\n+    __asm__ __volatile__ (\"stw,ma %1,0(%0)\"\n+\t\t\t  : : \"r\" (&lock), \"r\" (tmp) : \"memory\");\n+    return result;\n+  }\n+  \n+  void\n+  __attribute__ ((__unused__))\n+  __atomic_add(_Atomic_word* __mem, int __val)\n+  {\n+    int tmp;\n+    volatile int& lock = __Atomicity_lock<0>::_S_atomicity_lock;\n+    \n+    __asm__ __volatile__ (\"ldcw 0(%1),%0\\n\\t\"\n+\t\t\t  \"cmpib,<>,n 0,%0,.+20\\n\\t\"\n+\t\t\t  \"ldw 0(%1),%0\\n\\t\"\n+\t\t\t  \"cmpib,= 0,%0,.-4\\n\\t\"\n+\t\t\t  \"nop\\n\\t\"\n+\t\t\t  \"b,n .-20\"\n+\t\t\t  : \"=&r\" (tmp)\n+\t\t\t  : \"r\" (&lock));\n+    \n+    *__mem += __val;\n+    /* Reset lock with PA 2.0 \"ordered\" store.  */\n+    __asm__ __volatile__ (\"stw,ma %1,0(%0)\"\n+\t\t\t  : : \"r\" (&lock), \"r\" (tmp) : \"memory\");\n+  }\n+} // namespace __gnu_cxx"}, {"sha": "968bd249db2d83725c07e33d73db736c05a26222", "filename": "libstdc++-v3/config/cpu/i386/atomicity.h", "status": "modified", "additions": 44, "deletions": 46, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fatomicity.h?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -1,6 +1,6 @@\n // Low-level functions for atomic operations: x86, x >= 3 version  -*- C++ -*-\n \n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,50 +27,48 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_ATOMICITY_H\n-#define _GLIBCXX_ATOMICITY_H\t1\n+#include <bits/atomicity.h>\n \n-typedef int _Atomic_word;\n-\n-template<int __inst>\n-  struct __Atomicity_lock\n-  {\n-    static volatile _Atomic_word _S_atomicity_lock;\n-  };\n-\n-template<int __inst>\n-volatile _Atomic_word __Atomicity_lock<__inst>::_S_atomicity_lock = 0;\n-\n-template volatile _Atomic_word __Atomicity_lock<0>::_S_atomicity_lock;\n-\n-static inline _Atomic_word \n-__attribute__ ((__unused__))\n-__exchange_and_add(volatile _Atomic_word* __mem, int __val)\n+namespace __gnu_cxx\n {\n-  register _Atomic_word __result, __tmp = 1;\n-\n-  /* obtain the atomic exchange/add spin lock */\n-  do {\n-    __asm__ __volatile__ (\"xchg{l} {%0,%1|%1,%0}\"\n-\t\t\t  : \"=m\" (__Atomicity_lock<0>::_S_atomicity_lock),\n-\t\t\t    \"+r\" (__tmp)\n-                          : \"m\" (__Atomicity_lock<0>::_S_atomicity_lock));\n-  } while (__tmp);\n-\n-  __result = *__mem;\n-  *__mem += __val;\n-\n-  /* release spin lock */\n-  __Atomicity_lock<0>::_S_atomicity_lock = 0;\n-\n-  return __result;\n-}\n-\n-static inline void\n-__attribute__ ((__unused__))\n-__atomic_add(volatile _Atomic_word* __mem, int __val)\n-{\n-  __exchange_and_add(__mem, __val);\n-}\n-\n-#endif /* atomicity.h */\n+  template<int __inst>\n+    struct __Atomicity_lock\n+    {\n+      static volatile _Atomic_word _S_atomicity_lock;\n+    };\n+\n+  template<int __inst>\n+  volatile _Atomic_word __Atomicity_lock<__inst>::_S_atomicity_lock = 0;\n+\n+  template volatile _Atomic_word __Atomicity_lock<0>::_S_atomicity_lock;\n+  \n+  _Atomic_word \n+  __attribute__ ((__unused__))\n+  __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n+  {\n+    register _Atomic_word __result, __tmp = 1;\n+    \n+    // Obtain the atomic exchange/add spin lock.\n+    do \n+      {\n+\t__asm__ __volatile__ (\"xchg{l} {%0,%1|%1,%0}\"\n+\t\t\t      : \"=m\" (__Atomicity_lock<0>::_S_atomicity_lock),\n+\t\t\t      \"+r\" (__tmp)\n+\t\t\t      : \"m\" (__Atomicity_lock<0>::_S_atomicity_lock));\n+      } \n+    while (__tmp);\n+    \n+    __result = *__mem;\n+    *__mem += __val;\n+    \n+    // Release spin lock.\n+    __Atomicity_lock<0>::_S_atomicity_lock = 0;\n+    \n+    return __result;\n+  }\n+  \n+  void\n+  __attribute__ ((__unused__))\n+  __atomic_add(volatile _Atomic_word* __mem, int __val)\n+  { __exchange_and_add(__mem, __val); }\n+} // namespace __gnu_cxx"}, {"sha": "5700bf39a7f2f6ed2c7a73a73d66da431a00a2b1", "filename": "libstdc++-v3/config/cpu/i486/atomicity.h", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi486%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi486%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi486%2Fatomicity.h?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -1,6 +1,6 @@\n // Low-level functions for atomic operations: x86, x >= 4 version  -*- C++ -*-\n \n-// Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2001, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,28 +27,27 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_ATOMICITY_H\n-#define _GLIBCXX_ATOMICITY_H\t1\n+#include <bits/atomicity.h>\n \n-typedef int _Atomic_word;\n-\n-static inline _Atomic_word \n-__attribute__ ((__unused__))\n-__exchange_and_add(volatile _Atomic_word* __mem, int __val)\n-{\n-  register _Atomic_word __result;\n-  __asm__ __volatile__ (\"lock; xadd{l} {%0,%1|%1,%0}\"\n-\t\t\t: \"=r\" (__result), \"=m\" (*__mem) \n-\t\t\t: \"0\" (__val), \"m\" (*__mem));\n-  return __result;\n-}\n-\n-static inline void\n-__attribute__ ((__unused__))\n-__atomic_add(volatile _Atomic_word* __mem, int __val)\n+namespace __gnu_cxx\n {\n-  __asm__ __volatile__ (\"lock; add{l} {%1,%0|%0,%1}\"\n-\t\t\t: \"=m\" (*__mem) : \"ir\" (__val), \"m\" (*__mem));\n-}\n+  _Atomic_word \n+  __attribute__ ((__unused__))\n+  __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n+  {\n+    register _Atomic_word __result;\n+    __asm__ __volatile__ (\"lock; xadd{l} {%0,%1|%1,%0}\"\n+\t\t\t  : \"=r\" (__result), \"=m\" (*__mem) \n+\t\t\t  : \"0\" (__val), \"m\" (*__mem));\n+    return __result;\n+  }\n+  \n+  void\n+  __attribute__ ((__unused__))\n+  __atomic_add(volatile _Atomic_word* __mem, int __val)\n+  {\n+    __asm__ __volatile__ (\"lock; add{l} {%1,%0|%0,%1}\"\n+\t\t\t  : \"=m\" (*__mem) : \"ir\" (__val), \"m\" (*__mem));\n+  }\n+} // namespace __gnu_cxx\n \n-#endif /* atomicity.h */"}, {"sha": "0c3ab3343e9254fb68c43169e53f12eb901bb834", "filename": "libstdc++-v3/config/cpu/ia64/atomicity.h", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fia64%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fia64%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fia64%2Fatomicity.h?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -1,6 +1,6 @@\n // Low-level functions for atomic operations: IA64 version  -*- C++ -*-\n \n-// Copyright (C) 2000, 2001, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,25 +27,18 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_ATOMICITY_H\n-#define _GLIBCXX_ATOMICITY_H       1\n-\n+#include <bits/atomicity.h>\n #include <ia64intrin.h>\n \n-typedef int _Atomic_word;\n-\n-static inline _Atomic_word \n-__attribute__ ((__unused__))\n-__exchange_and_add(volatile _Atomic_word* __mem, int __val)\n-{\n-  return __sync_fetch_and_add(__mem, __val);\n-}\n-\n-static inline void\n-__attribute__ ((__unused__))\n-__atomic_add(volatile _Atomic_word* __mem, int __val)\n+namespace __gnu_cxx\n {\n-  __sync_fetch_and_add(__mem, __val);\n+  _Atomic_word \n+  __attribute__ ((__unused__))\n+  __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n+  { return __sync_fetch_and_add(__mem, __val); }\n+\n+  void\n+  __attribute__ ((__unused__))\n+  __atomic_add(volatile _Atomic_word* __mem, int __val)\n+  { __sync_fetch_and_add(__mem, __val); }\n }\n-\n-#endif /* atomicity.h */"}, {"sha": "b5827320c801a96f3cd56553f54c325c0b7961a0", "filename": "libstdc++-v3/config/cpu/m68k/atomicity.h", "status": "modified", "additions": 90, "deletions": 96, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fatomicity.h?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -1,6 +1,6 @@\n // Low-level functions for atomic operations: m68k version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,113 +27,107 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_ATOMICITY_H\n-#define _GLIBCXX_ATOMICITY_H\t1\n-\n-typedef int _Atomic_word;\n+#include <bits/atomicity.h>\n \n+namespace __gnu_cxx\n+{\n #if ( defined(__mc68020__) || defined(__mc68030__) \\\n       || defined(__mc68040__) || defined(__mc68060__) ) \\\n     && !defined(__mcpu32__)\n-// These variants support compare-and-swap.\n-\n-static inline _Atomic_word \n-__attribute__ ((__unused__))\n-__exchange_and_add(volatile _Atomic_word* __mem, int __val)\n-{\n-  register _Atomic_word __result = *__mem;\n-  register _Atomic_word __temp;\n-  __asm__ __volatile__ (\"1: move%.l %0,%1\\n\\t\"\n-\t\t\t\"add%.l %3,%1\\n\\t\"\n-\t\t\t\"cas%.l %0,%1,%2\\n\\t\"\n-\t\t\t\"jne 1b\"\n-\t\t\t: \"=d\" (__result), \"=&d\" (__temp), \"=m\" (*__mem)\n-\t\t\t: \"d\" (__val), \"0\" (__result), \"m\" (*__mem));\n-  return __result;\n-}\n+  // These variants support compare-and-swap.\n+  _Atomic_word \n+  __attribute__ ((__unused__))\n+  __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n+  {\n+    register _Atomic_word __result = *__mem;\n+    register _Atomic_word __temp;\n+    __asm__ __volatile__ (\"1: move%.l %0,%1\\n\\t\"\n+\t\t\t  \"add%.l %3,%1\\n\\t\"\n+\t\t\t  \"cas%.l %0,%1,%2\\n\\t\"\n+\t\t\t  \"jne 1b\"\n+\t\t\t  : \"=d\" (__result), \"=&d\" (__temp), \"=m\" (*__mem)\n+\t\t\t  : \"d\" (__val), \"0\" (__result), \"m\" (*__mem));\n+    return __result;\n+  }\n \n #elif defined(__rtems__)\n-  /*\n-   * TAS/JBNE is unsafe on systems with strict priority-based scheduling.\n-   * Disable interrupts, which we can do only from supervisor mode.\n-   */\n-static inline _Atomic_word\n-__attribute__ ((__unused__))\n-__exchange_and_add(volatile _Atomic_word* __mem, int __val)\n-{\n-  _Atomic_word __result;\n-  short __level, __tmpsr;\n-  __asm__ __volatile__ (\"move%.w %%sr,%0\\n\\tor%.l %0,%1\\n\\tmove%.w %1,%%sr\"\n-                       : \"=d\"(__level), \"=d\"(__tmpsr) : \"1\"(0x700));\n-\n-  __result = *__mem;\n-  *__mem = __result + __val;\n-\n-  __asm__ __volatile__ (\"move%.w %0,%%sr\" : : \"d\"(__level));\n-\n-  return __result;\n-}\n+  // TAS/JBNE is unsafe on systems with strict priority-based scheduling.\n+  // Disable interrupts, which we can do only from supervisor mode.\n+  _Atomic_word\n+  __attribute__ ((__unused__))\n+  __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n+  {\n+    _Atomic_word __result;\n+    short __level, __tmpsr;\n+    __asm__ __volatile__ (\"move%.w %%sr,%0\\n\\tor%.l %0,%1\\n\\tmove%.w %1,%%sr\"\n+\t\t\t  : \"=d\"(__level), \"=d\"(__tmpsr) : \"1\"(0x700));\n+    \n+    __result = *__mem;\n+    *__mem = __result + __val;    \n+    __asm__ __volatile__ (\"move%.w %0,%%sr\" : : \"d\"(__level));\n+    \n+    return __result;\n+  }\n \n #else\n-\n-template<int __inst>\n-  struct __Atomicity_lock\n+  \n+  template<int __inst>\n+    struct __Atomicity_lock\n+    {\n+      static volatile unsigned char _S_atomicity_lock;\n+    };\n+\n+  template<int __inst>\n+  volatile unsigned char __Atomicity_lock<__inst>::_S_atomicity_lock = 0;\n+  \n+  template volatile unsigned char __Atomicity_lock<0>::_S_atomicity_lock;\n+  \n+  _Atomic_word \n+  __attribute__ ((__unused__))\n+  __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n   {\n-    static volatile unsigned char _S_atomicity_lock;\n-  };\n-\n-template<int __inst>\n-volatile unsigned char __Atomicity_lock<__inst>::_S_atomicity_lock = 0;\n-\n-template volatile unsigned char __Atomicity_lock<0>::_S_atomicity_lock;\n-\n-static inline _Atomic_word \n-__attribute__ ((__unused__))\n-__exchange_and_add(volatile _Atomic_word* __mem, int __val)\n-{\n-  _Atomic_word __result;\n-\n-// bset with no immediate addressing (not SMP-safe)\n+    _Atomic_word __result;\n+    \n+    // bset with no immediate addressing (not SMP-safe)\n #if defined(__mcf5200__) || defined(__mcf5300__)\n-  __asm__ __volatile__(\"1: bset.b #7,%0@\\n\\tjbne 1b\"\n-\t\t       : /* no outputs */\n-\t\t       : \"a\"(&__Atomicity_lock<0>::_S_atomicity_lock)\n-\t\t       : \"cc\", \"memory\");\n-\n-// CPU32 and MCF5400 support test-and-set (SMP-safe).\n+    __asm__ __volatile__(\"1: bset.b #7,%0@\\n\\tjbne 1b\"\n+\t\t\t : /* no outputs */\n+\t\t\t : \"a\"(&__Atomicity_lock<0>::_S_atomicity_lock)\n+\t\t\t : \"cc\", \"memory\");\n+    \n+    // CPU32 and MCF5400 support test-and-set (SMP-safe).\n #elif defined(__mcpu32__) || defined(__mcf5400__)\n-  __asm__ __volatile__(\"1: tas %0\\n\\tjbne 1b\"\n-\t\t       : \"+m\"(__Atomicity_lock<0>::_S_atomicity_lock)\n-\t\t       : /* none */\n-\t\t       : \"cc\");\n-\n-// Use bset with immediate addressing for 68000/68010 (not SMP-safe)\n-// NOTE: TAS is available on the 68000, but unsupported by some Amiga\n-// memory controllers.\n+    __asm__ __volatile__(\"1: tas %0\\n\\tjbne 1b\"\n+\t\t\t : \"+m\"(__Atomicity_lock<0>::_S_atomicity_lock)\n+\t\t\t : /* none */\n+\t\t\t : \"cc\");\n+    \n+    // Use bset with immediate addressing for 68000/68010 (not SMP-safe)\n+    // NOTE: TAS is available on the 68000, but unsupported by some Amiga\n+    // memory controllers.\n #else\n-  __asm__ __volatile__(\"1: bset.b #7,%0\\n\\tjbne 1b\"\n-\t\t       : \"+m\"(__Atomicity_lock<0>::_S_atomicity_lock)\n-\t\t       : /* none */\n-\t\t       : \"cc\");\n+    __asm__ __volatile__(\"1: bset.b #7,%0\\n\\tjbne 1b\"\n+\t\t\t : \"+m\"(__Atomicity_lock<0>::_S_atomicity_lock)\n+\t\t\t : /* none */\n+\t\t\t : \"cc\");\n #endif\n-\n-  __result = *__mem;\n-  *__mem = __result + __val;\n-\n-  __Atomicity_lock<0>::_S_atomicity_lock = 0;\n-\n-  return __result;\n-}\n-\n+    \n+    __result = *__mem;\n+    *__mem = __result + __val;\n+    \n+    __Atomicity_lock<0>::_S_atomicity_lock = 0;\n+    \n+    return __result;\n+  }\n+  \n #endif /* TAS / BSET */\n \n-static inline void\n-__attribute__ ((__unused__))\n-__atomic_add(volatile _Atomic_word* __mem, int __val)\n-{\n-  // Careful: using add.l with a memory destination is not\n-  // architecturally guaranteed to be atomic.\n-  (void) __exchange_and_add(__mem, __val);\n-}\n-\n-#endif /* !_GLIBCXX_ATOMICITY_H */\n+  void\n+  __attribute__ ((__unused__))\n+  __atomic_add(volatile _Atomic_word* __mem, int __val)\n+  {\n+    // Careful: using add.l with a memory destination is not\n+    // architecturally guaranteed to be atomic.\n+    __exchange_and_add(__mem, __val);\n+  }\n+} // namespace __gnu_cxx"}, {"sha": "087134289de779b3bd4185b82aceb960ed75f3a9", "filename": "libstdc++-v3/config/cpu/mips/atomicity.h", "status": "modified", "additions": 47, "deletions": 49, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fmips%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fmips%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fmips%2Fatomicity.h?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -1,6 +1,6 @@\n-// Low-level functions for atomic operations.\n+// Low-level functions for atomic operations: MIPS version  -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,57 +27,55 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_ATOMICITY_H\n-#define _GLIBCXX_ATOMICITY_H 1\n+#include <bits/atomicity.h>\n \n-typedef int _Atomic_word;\n-\n-static inline int\n-__attribute__ ((__unused__))\n-__exchange_and_add(volatile _Atomic_word* __mem, int __val)\n+namespace __gnu_cxx\n {\n-  int __result, __tmp;\n-\n-  __asm__ __volatile__\n-    (\"/* Inline exchange & add */\\n\\t\"\n-     \"1:\\n\\t\"\n-     \".set\tpush\\n\\t\"\n+  _Atomic_word\n+  __attribute__ ((__unused__))\n+  __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n+  {\n+    _Atomic_word __result, __tmp;\n+    \n+    __asm__ __volatile__\n+      (\"/* Inline exchange & add */\\n\\t\"\n+       \"1:\\n\\t\"\n+       \".set\tpush\\n\\t\"\n #if _MIPS_SIM == _ABIO32\n-     \".set\tmips2\\n\\t\"\n+       \".set\tmips2\\n\\t\"\n #endif\n-     \"ll\t%0,%3\\n\\t\"\n-     \"addu\t%1,%4,%0\\n\\t\"\n-     \"sc\t%1,%2\\n\\t\"\n-     \".set\tpop\\n\\t\"\n-     \"beqz\t%1,1b\\n\\t\"\n-     \"/* End exchange & add */\"\n-     : \"=&r\"(__result), \"=&r\"(__tmp), \"=m\"(*__mem)\n-     : \"m\" (*__mem), \"r\"(__val));\n-\n-  return __result;\n-}\n-\n-static inline void\n-__attribute__ ((__unused__))\n-__atomic_add(volatile _Atomic_word* __mem, int __val)\n-{\n-  int __result;\n-\n-  __asm__ __volatile__\n-    (\"/* Inline atomic add */\\n\\t\"\n-     \"1:\\n\\t\"\n-     \".set\tpush\\n\\t\"\n+       \"ll\t%0,%3\\n\\t\"\n+       \"addu\t%1,%4,%0\\n\\t\"\n+       \"sc\t%1,%2\\n\\t\"\n+       \".set\tpop\\n\\t\"\n+       \"beqz\t%1,1b\\n\\t\"\n+       \"/* End exchange & add */\"\n+       : \"=&r\"(__result), \"=&r\"(__tmp), \"=m\"(*__mem)\n+       : \"m\" (*__mem), \"r\"(__val));\n+    \n+    return __result;\n+  }\n+  \n+  void\n+  __attribute__ ((__unused__))\n+  __atomic_add(volatile _Atomic_word* __mem, int __val)\n+  {\n+    _Atomic_word __result;\n+    \n+    __asm__ __volatile__\n+      (\"/* Inline atomic add */\\n\\t\"\n+       \"1:\\n\\t\"\n+       \".set\tpush\\n\\t\"\n #if _MIPS_SIM == _ABIO32\n-     \".set\tmips2\\n\\t\"\n+       \".set\tmips2\\n\\t\"\n #endif\n-     \"ll\t%0,%2\\n\\t\"\n-     \"addu\t%0,%3,%0\\n\\t\"\n-     \"sc\t%0,%1\\n\\t\"\n-     \".set\tpop\\n\\t\"\n-     \"beqz\t%0,1b\\n\\t\"\n-     \"/* End atomic add */\"\n-     : \"=&r\"(__result), \"=m\"(*__mem)\n+       \"ll\t%0,%2\\n\\t\"\n+       \"addu\t%0,%3,%0\\n\\t\"\n+       \"sc\t%0,%1\\n\\t\"\n+       \".set\tpop\\n\\t\"\n+       \"beqz\t%0,1b\\n\\t\"\n+       \"/* End atomic add */\"\n+       : \"=&r\"(__result), \"=m\"(*__mem)\n      : \"m\" (*__mem), \"r\"(__val));\n-}\n-\n-#endif /* atomicity.h */\n+  }\n+} // namespace __gnu_cxx"}, {"sha": "73149441dd83fcd4a108ccafe5f2d11053f8c190", "filename": "libstdc++-v3/config/cpu/powerpc/atomicity.h", "status": "modified", "additions": 40, "deletions": 42, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fpowerpc%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fpowerpc%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fpowerpc%2Fatomicity.h?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -1,6 +1,6 @@\n // Low-level functions for atomic operations: PowerPC version  -*- C++ -*-\n \n-// Copyright (C) 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2001, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,52 +27,50 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_ATOMICITY_H\n-#define _GLIBCXX_ATOMICITY_H\t1\n+#include <bits/atomicity.h>\n \n #ifdef __PPC405__\n #define _STWCX \"sync \\n\\tstwcx. \"\n #else\n #define _STWCX \"stwcx. \"\n #endif\n \n-typedef int _Atomic_word;\n-\n-static inline _Atomic_word\n-__attribute__ ((__unused__))\n-__exchange_and_add(volatile _Atomic_word* __mem, int __val)\n-{\n-  _Atomic_word __tmp, __res;\n-  __asm__ __volatile__ (\n-\t\"/* Inline exchange & add */\\n\"\n-\t\"0:\\t\"\n-\t\"lwarx    %0,0,%3 \\n\\t\"\n-\t\"add%I4   %1,%0,%4 \\n\\t\"\n-\t_STWCX \"  %1,0,%3 \\n\\t\"\n-\t\"bne-     0b \\n\\t\"\n-\t\"/* End exchange & add */\"\n-\t: \"=&b\"(__res), \"=&r\"(__tmp), \"=m\" (*__mem)\n-\t: \"r\" (__mem), \"Ir\"(__val), \"m\" (*__mem)\n-\t: \"cr0\");\n-  return __res;\n-}\n-\n-static inline void\n-__attribute__ ((__unused__))\n-__atomic_add(volatile _Atomic_word* __mem, int __val)\n+namespace __gnu_cxx\n {\n-  _Atomic_word __tmp;\n-  __asm__ __volatile__ (\n-\t\"/* Inline atomic add */\\n\"\n-\t\"0:\\t\"\n-\t\"lwarx    %0,0,%2 \\n\\t\"\n-\t\"add%I3   %0,%0,%3 \\n\\t\"\n-\t_STWCX \"  %0,0,%2 \\n\\t\"\n-\t\"bne-     0b \\n\\t\"\n-\t\"/* End atomic add */\"\n-\t: \"=&b\"(__tmp), \"=m\" (*__mem)\n-\t: \"r\" (__mem), \"Ir\"(__val), \"m\" (*__mem)\n-\t: \"cr0\");\n-}\n-\n-#endif /* atomicity.h */\n+  _Atomic_word\n+  __attribute__ ((__unused__))\n+  __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n+  {\n+    _Atomic_word __tmp, __res;\n+    __asm__ __volatile__ (\n+\t\t\t  \"/* Inline exchange & add */\\n\"\n+\t\t\t  \"0:\\t\"\n+\t\t\t  \"lwarx    %0,0,%3 \\n\\t\"\n+\t\t\t  \"add%I4   %1,%0,%4 \\n\\t\"\n+\t\t\t  _STWCX \"  %1,0,%3 \\n\\t\"\n+\t\t\t  \"bne-     0b \\n\\t\"\n+\t\t\t  \"/* End exchange & add */\"\n+\t\t\t  : \"=&b\"(__res), \"=&r\"(__tmp), \"=m\" (*__mem)\n+\t\t\t  : \"r\" (__mem), \"Ir\"(__val), \"m\" (*__mem)\n+\t\t\t  : \"cr0\");\n+    return __res;\n+  }\n+  \n+  void\n+  __attribute__ ((__unused__))\n+  __atomic_add(volatile _Atomic_word* __mem, int __val)\n+  {\n+    _Atomic_word __tmp;\n+    __asm__ __volatile__ (\n+\t\t\t  \"/* Inline atomic add */\\n\"\n+\t\t\t  \"0:\\t\"\n+\t\t\t  \"lwarx    %0,0,%2 \\n\\t\"\n+\t\t\t  \"add%I3   %0,%0,%3 \\n\\t\"\n+\t\t\t  _STWCX \"  %0,0,%2 \\n\\t\"\n+\t\t\t  \"bne-     0b \\n\\t\"\n+\t\t\t  \"/* End atomic add */\"\n+\t\t\t  : \"=&b\"(__tmp), \"=m\" (*__mem)\n+\t\t\t  : \"r\" (__mem), \"Ir\"(__val), \"m\" (*__mem)\n+\t\t\t  : \"cr0\");\n+  }\n+} // namespace __gnu_cxx"}, {"sha": "b979e3abd33c98ac45be6c9d3f8853049a9b3639", "filename": "libstdc++-v3/config/cpu/s390/atomicity.h", "status": "modified", "additions": 24, "deletions": 30, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fs390%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fs390%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fs390%2Fatomicity.h?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -1,6 +1,6 @@\n // Low-level functions for atomic operations: S/390 version  -*- C++ -*-\n \n-// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,34 +27,28 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_ATOMICITY_H\n-#define _GLIBCXX_ATOMICITY_H\t1\n+#include <bits/atomicity.h>\n \n-typedef int _Atomic_word;\n-\n-static inline _Atomic_word \n-__attribute__ ((__unused__))\n-__exchange_and_add(volatile _Atomic_word* __mem, int __val)\n-{\n-  register _Atomic_word __old_val, __new_val;\n-\n-  __asm__ __volatile__ (\"   l     %0,0(%3)\\n\"\n-                        \"0: lr    %1,%0\\n\"\n-                        \"   ar    %1,%4\\n\"\n-                        \"   cs    %0,%1,0(%3)\\n\"\n-                        \"   jl    0b\"\n-                        : \"=&d\" (__old_val), \"=&d\" (__new_val), \"=m\" (*__mem)\n-                        : \"a\" (__mem), \"d\" (__val), \"m\" (*__mem) : \"cc\");\n-  return __old_val;\n-}\n-\n-static inline void\n-__attribute__ ((__unused__))\n-__atomic_add(volatile _Atomic_word* __mem, int __val)\n+namespace __gnu_cxx\n {\n-  __exchange_and_add(__mem, __val);\n-}\n-\n-#endif /* atomicity.h */\n-\n-\n+  _Atomic_word \n+  __attribute__ ((__unused__))\n+  __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n+  {\n+    register _Atomic_word __old_val, __new_val;\n+    \n+    __asm__ __volatile__ (\"   l     %0,0(%3)\\n\"\n+\t\t\t  \"0: lr    %1,%0\\n\"\n+\t\t\t  \"   ar    %1,%4\\n\"\n+\t\t\t  \"   cs    %0,%1,0(%3)\\n\"\n+\t\t\t  \"   jl    0b\"\n+\t\t\t  : \"=&d\" (__old_val), \"=&d\" (__new_val), \"=m\" (*__mem)\n+\t\t\t  : \"a\" (__mem), \"d\" (__val), \"m\" (*__mem) : \"cc\");\n+    return __old_val;\n+  }\n+  \n+  void\n+  __attribute__ ((__unused__))\n+  __atomic_add(volatile _Atomic_word* __mem, int __val)\n+  { __exchange_and_add(__mem, __val); }\n+} // namespace __gnu_cxx"}, {"sha": "941fddd2b0e518832ac5914419578998cfc057eb", "filename": "libstdc++-v3/config/cpu/sparc/atomic_word.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fatomic_word.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fatomic_word.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fatomic_word.h?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -0,0 +1,39 @@\n+// Low-level type for atomic operations -*- C++ -*-\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _GLIBCXX_ATOMIC_WORD_H\n+#define _GLIBCXX_ATOMIC_WORD_H\t1\n+\n+#ifdef __arch64__\n+  typedef long _Atomic_word;\n+#else\n+  typedef int _Atomic_word;\n+#endif\n+\n+#endif "}, {"sha": "6d4b19b75bd9cfdc4c7231239789e93de81bc4a9", "filename": "libstdc++-v3/config/cpu/sparc/atomicity.h", "status": "modified", "additions": 91, "deletions": 97, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fatomicity.h?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -1,6 +1,6 @@\n // Low-level functions for atomic operations: Sparc version  -*- C++ -*-\n \n-// Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2001, 2002, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,105 +27,99 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_ATOMICITY_H\n-#define _GLIBCXX_ATOMICITY_H\t1\n+#include <bits/atomicity.h>\n \n-#ifdef __arch64__\n-\n-typedef long _Atomic_word;\n-\n-static inline _Atomic_word\n-__attribute__ ((__unused__))\n-__exchange_and_add(volatile _Atomic_word* __mem, int __val)\n-{\n-  _Atomic_word __tmp1, __tmp2;\n-  _Atomic_word __val_extended = __val;\n-\n-  __asm__ __volatile__(\"1:\tldx\t[%3], %0\\n\\t\"\n-\t\t       \"\tadd\t%0, %4, %1\\n\\t\"\n-\t\t       \"\tcasx\t[%3], %0, %1\\n\\t\"\n-\t\t       \"\tsub\t%0, %1, %0\\n\\t\"\n-\t\t       \"\tbrnz,pn\t%0, 1b\\n\\t\"\n-\t\t       \"\t nop\"\n-\t\t       : \"=&r\" (__tmp1), \"=&r\" (__tmp2), \"=m\" (*__mem)\n-\t\t       : \"r\" (__mem), \"r\" (__val_extended), \"m\" (*__mem));\n-  return __tmp2;\n-}\n-\n-static inline void\n-__attribute__ ((__unused__))\n-__atomic_add(volatile _Atomic_word* __mem, int __val)\n+namespace __gnu_cxx\n {\n-  _Atomic_word __tmp1, __tmp2;\n-  _Atomic_word __val_extended = __val;\n-\n-  __asm__ __volatile__(\"1:\tldx\t[%3], %0\\n\\t\"\n-\t\t       \"\tadd\t%0, %4, %1\\n\\t\"\n-\t\t       \"\tcasx\t[%3], %0, %1\\n\\t\"\n-\t\t       \"\tsub\t%0, %1, %0\\n\\t\"\n-\t\t       \"\tbrnz,pn\t%0, 1b\\n\\t\"\n-\t\t       \"\t nop\"\n-\t\t       : \"=&r\" (__tmp1), \"=&r\" (__tmp2), \"=m\" (*__mem)\n-\t\t       : \"r\" (__mem), \"r\" (__val_extended), \"m\" (*__mem));\n-}\n-\n+#ifdef __arch64__\n+  _Atomic_word\n+  __attribute__ ((__unused__))\n+  __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n+  {\n+    _Atomic_word __tmp1, __tmp2;\n+    _Atomic_word __val_extended = __val;\n+\n+    __asm__ __volatile__(\"1:\tldx\t[%3], %0\\n\\t\"\n+\t\t\t \"\tadd\t%0, %4, %1\\n\\t\"\n+\t\t\t \"\tcasx\t[%3], %0, %1\\n\\t\"\n+\t\t\t \"\tsub\t%0, %1, %0\\n\\t\"\n+\t\t\t \"\tbrnz,pn\t%0, 1b\\n\\t\"\n+\t\t\t \"\t nop\"\n+\t\t\t : \"=&r\" (__tmp1), \"=&r\" (__tmp2), \"=m\" (*__mem)\n+\t\t\t : \"r\" (__mem), \"r\" (__val_extended), \"m\" (*__mem));\n+    return __tmp2;\n+  }\n+  \n+  void\n+  __attribute__ ((__unused__))\n+  __atomic_add(volatile _Atomic_word* __mem, int __val)\n+  {\n+    _Atomic_word __tmp1, __tmp2;\n+    _Atomic_word __val_extended = __val;\n+    \n+    __asm__ __volatile__(\"1:\tldx\t[%3], %0\\n\\t\"\n+\t\t\t \"\tadd\t%0, %4, %1\\n\\t\"\n+\t\t\t \"\tcasx\t[%3], %0, %1\\n\\t\"\n+\t\t\t \"\tsub\t%0, %1, %0\\n\\t\"\n+\t\t\t \"\tbrnz,pn\t%0, 1b\\n\\t\"\n+\t\t\t \"\t nop\"\n+\t\t\t : \"=&r\" (__tmp1), \"=&r\" (__tmp2), \"=m\" (*__mem)\n+\t\t\t : \"r\" (__mem), \"r\" (__val_extended), \"m\" (*__mem));\n+  }\n+  \n #else /* __arch32__ */\n \n-typedef int _Atomic_word;\n-\n-template<int __inst>\n-  struct __Atomicity_lock\n+  template<int __inst>\n+    struct __Atomicity_lock\n+    {\n+      static unsigned char _S_atomicity_lock;\n+    };\n+\n+  template<int __inst>\n+  unsigned char __Atomicity_lock<__inst>::_S_atomicity_lock = 0;\n+  \n+  template unsigned char __Atomicity_lock<0>::_S_atomicity_lock;\n+  \n+  _Atomic_word\n+  __attribute__ ((__unused__))\n+  __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n   {\n-    static unsigned char _S_atomicity_lock;\n-  };\n-\n-template<int __inst>\n-unsigned char __Atomicity_lock<__inst>::_S_atomicity_lock = 0;\n-\n-template unsigned char __Atomicity_lock<0>::_S_atomicity_lock;\n-\n-static int\n-__attribute__ ((__unused__))\n-__exchange_and_add(volatile _Atomic_word* __mem, int __val)\n-{\n-  _Atomic_word __result, __tmp;\n-\n-  __asm__ __volatile__(\"1:\tldstub\t[%1], %0\\n\\t\"\n-\t\t       \"\tcmp\t%0, 0\\n\\t\"\n-\t\t       \"\tbne\t1b\\n\\t\"\n-\t\t       \"\t nop\"\n-\t\t       : \"=&r\" (__tmp)\n-\t\t       : \"r\" (&__Atomicity_lock<0>::_S_atomicity_lock)\n-\t\t       : \"memory\");\n-  __result = *__mem;\n-  *__mem += __val;\n-  __asm__ __volatile__(\"stb\t%%g0, [%0]\"\n-\t\t       : /* no outputs */\n-\t\t       : \"r\" (&__Atomicity_lock<0>::_S_atomicity_lock)\n-\t\t       : \"memory\");\n-  return __result;\n-}\n-\n-static void\n-__attribute__ ((__unused__))\n-__atomic_add(volatile _Atomic_word* __mem, int __val)\n-{\n-  _Atomic_word __tmp;\n-\n-  __asm__ __volatile__(\"1:\tldstub\t[%1], %0\\n\\t\"\n-\t\t       \"\tcmp\t%0, 0\\n\\t\"\n-\t\t       \"\tbne\t1b\\n\\t\"\n-\t\t       \"\t nop\"\n-\t\t       : \"=&r\" (__tmp)\n-\t\t       : \"r\" (&__Atomicity_lock<0>::_S_atomicity_lock)\n-\t\t       : \"memory\");\n-  *__mem += __val;\n-  __asm__ __volatile__(\"stb\t%%g0, [%0]\"\n-\t\t       : /* no outputs */\n-\t\t       : \"r\" (&__Atomicity_lock<0>::_S_atomicity_lock)\n-\t\t       : \"memory\");\n-}\n-\n+    _Atomic_word __result, __tmp;\n+    \n+    __asm__ __volatile__(\"1:\tldstub\t[%1], %0\\n\\t\"\n+\t\t\t \"\tcmp\t%0, 0\\n\\t\"\n+\t\t\t \"\tbne\t1b\\n\\t\"\n+\t\t\t \"\t nop\"\n+\t\t\t : \"=&r\" (__tmp)\n+\t\t\t : \"r\" (&__Atomicity_lock<0>::_S_atomicity_lock)\n+\t\t\t : \"memory\");\n+    __result = *__mem;\n+    *__mem += __val;\n+    __asm__ __volatile__(\"stb\t%%g0, [%0]\"\n+\t\t\t : /* no outputs */\n+\t\t\t : \"r\" (&__Atomicity_lock<0>::_S_atomicity_lock)\n+\t\t\t : \"memory\");\n+    return __result;\n+  }\n+  \n+  void\n+  __attribute__ ((__unused__))\n+  __atomic_add(volatile _Atomic_word* __mem, int __val)\n+  {\n+    _Atomic_word __tmp;\n+    \n+    __asm__ __volatile__(\"1:\tldstub\t[%1], %0\\n\\t\"\n+\t\t\t \"\tcmp\t%0, 0\\n\\t\"\n+\t\t\t \"\tbne\t1b\\n\\t\"\n+\t\t\t \"\t nop\"\n+\t\t\t : \"=&r\" (__tmp)\n+\t\t\t : \"r\" (&__Atomicity_lock<0>::_S_atomicity_lock)\n+\t\t\t : \"memory\");\n+    *__mem += __val;\n+    __asm__ __volatile__(\"stb\t%%g0, [%0]\"\n+\t\t\t : /* no outputs */\n+\t\t\t : \"r\" (&__Atomicity_lock<0>::_S_atomicity_lock)\n+\t\t\t : \"memory\");\n+  }  \n #endif /* __arch32__ */\n-\n-#endif /* atomicity.h */\n+} // namespace __gnu_cxx"}, {"sha": "c8be24240702c3d1546558bb85cc26e84ad99700", "filename": "libstdc++-v3/config/linker-map.gnu", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -214,10 +214,10 @@ GLIBCXX_3.4 {\n     # __gnu_cxx::stdio_sync_filebuf\n     _ZTVN9__gnu_cxx18stdio_sync_filebufI[cw]St11char_traitsI[cw]EEE;\n \n-    # Needed only when generic cpu's atomicity.h is in use.\n-    _ZN9__gnu_cxx17_Atomic_add_mutexE;\n-    _ZN9__gnu_cxx22_Atomic_add_mutex_onceE;\n-    _ZN9__gnu_cxx31__gthread_atomic_add_mutex_onceEv;\n+    # __gnu_cxx::__atomic_add\n+    # __gnu_cxx::__exchange_and_add\n+    _ZN9__gnu_cxx12__atomic_addEPVii;\n+    _ZN9__gnu_cxx18__exchange_and_addEPVii;\n \n   # DO NOT DELETE THIS LINE.  Port-specific symbols, if any, will be here.\n "}, {"sha": "538dea2b4474696d2e62f94bd825dd98b610eb0f", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -308,7 +308,7 @@ ac_includes_default=\"\\\n # include <unistd.h>\n #endif\"\n \n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libtool_VERSION multi_basedir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO AMTAR install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM AWK SET_MAKE am__leading_dot glibcxx_builddir glibcxx_srcdir toplevel_srcdir CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LN_S AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBTOOL CXXCPP CPPFLAGS enable_shared enable_static GLIBCXX_HOSTED_TRUE GLIBCXX_HOSTED_FALSE GLIBCXX_BUILD_PCH_TRUE GLIBCXX_BUILD_PCH_FALSE glibcxx_PCHFLAGS CSTDIO_H BASIC_FILE_H BASIC_FILE_CC CPP EGREP check_msgfmt glibcxx_MOFILES glibcxx_POFILES glibcxx_localedir USE_NLS CLOCALE_H CCODECVT_H CMESSAGES_H CCODECVT_CC CCOLLATE_CC CCTYPE_CC CMESSAGES_CC CMONEY_CC CNUMERIC_CC CTIME_H CTIME_CC CLOCALE_CC CLOCALE_INTERNAL_H C_INCLUDE_DIR GLIBCXX_C_HEADERS_C_TRUE GLIBCXX_C_HEADERS_C_FALSE GLIBCXX_C_HEADERS_C_STD_TRUE GLIBCXX_C_HEADERS_C_STD_FALSE GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE glibcxx_thread_h DEBUG_FLAGS GLIBCXX_BUILD_DEBUG_TRUE GLIBCXX_BUILD_DEBUG_FALSE EXTRA_CXX_FLAGS WERROR SECTION_FLAGS SECTION_LDFLAGS OPT_LDFLAGS LIBMATHOBJS SYMVER_MAP port_specific_symbol_files GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE baseline_dir GLIBCXX_TEST_WCHAR_T_TRUE GLIBCXX_TEST_WCHAR_T_FALSE GLIBCXX_TEST_ABI_TRUE GLIBCXX_TEST_ABI_FALSE ATOMICITY_INC_SRCDIR OS_INC_SRCDIR glibcxx_prefixdir gxx_include_dir glibcxx_toolexecdir glibcxx_toolexeclibdir GLIBCXX_INCLUDES TOPLEVEL_INCLUDES OPTIMIZE_CXXFLAGS WARN_FLAGS LIBSUPCXX_PICFLAGS LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libtool_VERSION multi_basedir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO AMTAR install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM AWK SET_MAKE am__leading_dot glibcxx_builddir glibcxx_srcdir toplevel_srcdir CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LN_S AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBTOOL CXXCPP CPPFLAGS enable_shared enable_static GLIBCXX_HOSTED_TRUE GLIBCXX_HOSTED_FALSE GLIBCXX_BUILD_PCH_TRUE GLIBCXX_BUILD_PCH_FALSE glibcxx_PCHFLAGS CSTDIO_H BASIC_FILE_H BASIC_FILE_CC CPP EGREP check_msgfmt glibcxx_MOFILES glibcxx_POFILES glibcxx_localedir USE_NLS CLOCALE_H CCODECVT_H CMESSAGES_H CCODECVT_CC CCOLLATE_CC CCTYPE_CC CMESSAGES_CC CMONEY_CC CNUMERIC_CC CTIME_H CTIME_CC CLOCALE_CC CLOCALE_INTERNAL_H C_INCLUDE_DIR GLIBCXX_C_HEADERS_C_TRUE GLIBCXX_C_HEADERS_C_FALSE GLIBCXX_C_HEADERS_C_STD_TRUE GLIBCXX_C_HEADERS_C_STD_FALSE GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE glibcxx_thread_h DEBUG_FLAGS GLIBCXX_BUILD_DEBUG_TRUE GLIBCXX_BUILD_DEBUG_FALSE EXTRA_CXX_FLAGS WERROR SECTION_FLAGS SECTION_LDFLAGS OPT_LDFLAGS LIBMATHOBJS SYMVER_MAP port_specific_symbol_files GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE baseline_dir GLIBCXX_TEST_WCHAR_T_TRUE GLIBCXX_TEST_WCHAR_T_FALSE GLIBCXX_TEST_ABI_TRUE GLIBCXX_TEST_ABI_FALSE ATOMICITY_SRCDIR ATOMIC_WORD_SRCDIR OS_INC_SRCDIR glibcxx_prefixdir gxx_include_dir glibcxx_toolexecdir glibcxx_toolexeclibdir GLIBCXX_INCLUDES TOPLEVEL_INCLUDES OPTIMIZE_CXXFLAGS WARN_FLAGS LIBSUPCXX_PICFLAGS LIBOBJS LTLIBOBJS'\n ac_subst_files=''\n \n # Initialize some variables set by options.\n@@ -7439,7 +7439,7 @@ echo \"${ECHO_T}$EXTRA_CXX_FLAGS\" >&6\n \n \n # No surprises, no surprises...\n-if test $atomicity_include_dir = cpu/generic ; then\n+if test $atomicity_dir = cpu/generic ; then\n   { echo \"$as_me:$LINENO: WARNING: No native atomic operations are provided for this platform.\" >&5\n echo \"$as_me: WARNING: No native atomic operations are provided for this platform.\" >&2;}\n   if test $target_thread_file = single; then\n@@ -64090,11 +64090,13 @@ done\n # Propagate the target-specific source directories through the build chain.\n # (Nothing currently uses cpu_include_dir directly; only atomicity_include_dir\n # uses it, and it only gets used in this file.)\n-ATOMICITY_INC_SRCDIR=config/${atomicity_include_dir}\n+ATOMICITY_SRCDIR=config/${atomicity_dir}\n+ATOMIC_WORD_SRCDIR=config/${atomic_word_dir}\n OS_INC_SRCDIR=config/${os_include_dir}\n \n \n \n+\n # Determine cross-compile flags and AM_CONDITIONALs.\n #AC_SUBST(GLIBCXX_IS_NATIVE)\n #AM_CONDITIONAL(CANADIAN, test $CANADIAN = yes)\n@@ -65233,7 +65235,8 @@ s,@GLIBCXX_TEST_WCHAR_T_TRUE@,$GLIBCXX_TEST_WCHAR_T_TRUE,;t t\n s,@GLIBCXX_TEST_WCHAR_T_FALSE@,$GLIBCXX_TEST_WCHAR_T_FALSE,;t t\n s,@GLIBCXX_TEST_ABI_TRUE@,$GLIBCXX_TEST_ABI_TRUE,;t t\n s,@GLIBCXX_TEST_ABI_FALSE@,$GLIBCXX_TEST_ABI_FALSE,;t t\n-s,@ATOMICITY_INC_SRCDIR@,$ATOMICITY_INC_SRCDIR,;t t\n+s,@ATOMICITY_SRCDIR@,$ATOMICITY_SRCDIR,;t t\n+s,@ATOMIC_WORD_SRCDIR@,$ATOMIC_WORD_SRCDIR,;t t\n s,@OS_INC_SRCDIR@,$OS_INC_SRCDIR,;t t\n s,@glibcxx_prefixdir@,$glibcxx_prefixdir,;t t\n s,@gxx_include_dir@,$gxx_include_dir,;t t"}, {"sha": "006c9941b4757dd9cd0a29c23cbfdf96131f88be", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -95,7 +95,7 @@ GLIBCXX_ENABLE_DEBUG([no])\n GLIBCXX_ENABLE_CXX_FLAGS\n \n # No surprises, no surprises...\n-if test $atomicity_include_dir = cpu/generic ; then\n+if test $atomicity_dir = cpu/generic ; then\n   AC_MSG_WARN([No native atomic operations are provided for this platform.])\n   if test $target_thread_file = single; then\n     AC_MSG_WARN([They cannot be faked when thread support is disabled.])\n@@ -268,9 +268,11 @@ GLIBCXX_CONFIGURE_TESTSUITE\n # Propagate the target-specific source directories through the build chain.\n # (Nothing currently uses cpu_include_dir directly; only atomicity_include_dir \n # uses it, and it only gets used in this file.)\n-ATOMICITY_INC_SRCDIR=config/${atomicity_include_dir}\n+ATOMICITY_SRCDIR=config/${atomicity_dir}\n+ATOMIC_WORD_SRCDIR=config/${atomic_word_dir}\n OS_INC_SRCDIR=config/${os_include_dir}\n-AC_SUBST(ATOMICITY_INC_SRCDIR)\n+AC_SUBST(ATOMICITY_SRCDIR)\n+AC_SUBST(ATOMIC_WORD_SRCDIR)\n AC_SUBST(OS_INC_SRCDIR)\n \n # Determine cross-compile flags and AM_CONDITIONALs."}, {"sha": "f6492b29e5ef381ab7126ffd4c8d510b4f746c38", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -30,9 +30,12 @@\n #   abi_baseline_pair      directory name for ABI compat testing,\n #                          defaults to host_cpu-host_os (as per config.guess)\n #\n-#   atomicity_include_dir  location of atomicity.h,\n+#   atomicity_dir          location of atomicity.h,\n #                          defaults to cpu_include_dir\n #\n+#   atomic_word_dir        location of atomic_word.h\n+#                          defaults to generic.\n+#\n # It possibly modifies the following variables:\n #\n #   OPT_LDFLAGS            extra flags to pass when linking the library, of\n@@ -57,6 +60,7 @@\n # systems out there.  :-)\n c_model=c_std\n c_compatibility=no\n+atomic_word_dir=cpu/generic\n \n # HOST-SPECIFIC OVERRIDES\n # Set any CPU-dependent bits.\n@@ -102,11 +106,22 @@ case \"${host_cpu}\" in\n     ;;\n esac\n \n+# Set specific CPU overrides for atomic_word_dir. Most can just use generic.\n+# THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n+case \"${host_cpu}\" in\n+  cris*)\n+    atomic_word_dir=cpu/cris\n+    ;;\n+  sparc* | ultrasparc)\n+    atomic_word_dir=cpu/sparc\n+    ;;\n+esac\n+\n # Now look for the file(s) usually tied to a CPU model, and make\n # default choices for those if they haven't been explicitly set\n # already.  \n cpu_include_dir=\"cpu/${try_cpu}\"\n-atomicity_include_dir=$cpu_include_dir\n+atomicity_dir=$cpu_include_dir\n abi_baseline_pair=${try_cpu}-${host_os}\n \n \n@@ -122,16 +137,16 @@ case \"${host_os}\" in\n     # os/aix/atomicity.h works on earlier versions of AIX 4.*, so we\n     # explicitly duplicate the directory for 4.[<3].\n     os_include_dir=\"os/aix\"\n-    atomicity_include_dir=\"os/aix\"\n+    atomicity_dir=\"os/aix\"\n     OPT_LDFLAGS=\"-Wl,-G\"\n     ;;\n   aix4.*)\n     os_include_dir=\"os/generic\"\n-    atomicity_include_dir=\"os/aix\"\n+    atomicity_dir=\"os/aix\"\n     ;;\n   aix*)\n     os_include_dir=\"os/generic\"\n-    atomicity_include_dir=\"cpu/generic\"\n+    atomicity_dir=\"cpu/generic\"\n     ;;\n   bsd*)\n     # Plain BSD attempts to share FreeBSD files.\n@@ -155,11 +170,11 @@ case \"${host_os}\" in\n   irix[1-6] | irix[1-5].* | irix6.[0-4]*)\n     # This is known to work on at least IRIX 5.2 and 6.3.\n     os_include_dir=\"os/irix/irix5.2\"\n-    atomicity_include_dir=$os_include_dir\n+    atomicity_dir=$os_include_dir\n     ;;\n   irix6.5*)\n     os_include_dir=\"os/irix/irix6.5\"\n-    atomicity_include_dir=$os_include_dir\n+    atomicity_dir=$os_include_dir\n     ;;\n   mingw32*)\n     os_include_dir=\"os/mingw32\"\n@@ -205,7 +220,7 @@ esac\n # THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n case \"${host}\" in\n   mips*-*-linux*)\n-    atomicity_include_dir=\"cpu/mips\"\n+    atomicity_dir=\"cpu/mips\"\n     ;;\n   x86_64-*-linux*)\n     abi_baseline_pair=\"x86_64-linux-gnu\""}, {"sha": "b6b05ff30d8f22348abcc9b1327c8e8e8c64259c", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -92,6 +92,7 @@ bits_srcdir = ${glibcxx_srcdir}/include/bits\n bits_builddir = ./bits\n bits_headers = \\\n \t${bits_srcdir}/allocator.h \\\n+\t${bits_srcdir}/atomicity.h \\\n \t${bits_srcdir}/basic_ios.h \\\n \t${bits_srcdir}/basic_ios.tcc \\\n \t${bits_srcdir}/basic_string.h \\\n@@ -339,7 +340,7 @@ host_headers = \\\n \t${host_srcdir}/ctype_inline.h \\\n \t${host_srcdir}/ctype_noninline.h \\\n \t${host_srcdir}/os_defines.h \\\n-\t${glibcxx_srcdir}/$(ATOMICITY_INC_SRCDIR)/atomicity.h \n+\t${glibcxx_srcdir}/$(ATOMIC_WORD_SRCDIR)/atomic_word.h \n \n # Non-installed host_header files.\n host_headers_noinst = \\"}, {"sha": "e0fa5c06c7b75293f4ad0de26b7a30fa9d06e59c", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -42,7 +42,8 @@ ACLOCAL = @ACLOCAL@\n AMTAR = @AMTAR@\n AR = @AR@\n AS = @AS@\n-ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n+ATOMICITY_SRCDIR = @ATOMICITY_SRCDIR@\n+ATOMIC_WORD_SRCDIR = @ATOMIC_WORD_SRCDIR@\n AUTOCONF = @AUTOCONF@\n AUTOHEADER = @AUTOHEADER@\n AUTOMAKE = @AUTOMAKE@\n@@ -287,6 +288,7 @@ bits_srcdir = ${glibcxx_srcdir}/include/bits\n bits_builddir = ./bits\n bits_headers = \\\n \t${bits_srcdir}/allocator.h \\\n+\t${bits_srcdir}/atomicity.h \\\n \t${bits_srcdir}/basic_ios.h \\\n \t${bits_srcdir}/basic_ios.tcc \\\n \t${bits_srcdir}/basic_string.h \\\n@@ -524,9 +526,9 @@ debug_headers = \\\n # For --enable-cheaders=c_std\n @GLIBCXX_C_HEADERS_C_STD_TRUE@c_base_headers_extra = ${c_base_srcdir}/cmath.tcc\n @GLIBCXX_C_HEADERS_C_STD_FALSE@c_base_headers_extra = \n+@GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE@c_compatibility_headers_extra = \n \n @GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE@c_compatibility_headers_extra = ${c_compatibility_headers}\n-@GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE@c_compatibility_headers_extra = \n \n host_srcdir = ${glibcxx_srcdir}/$(OS_INC_SRCDIR)\n host_builddir = ./${host_alias}/bits\n@@ -535,7 +537,7 @@ host_headers = \\\n \t${host_srcdir}/ctype_inline.h \\\n \t${host_srcdir}/ctype_noninline.h \\\n \t${host_srcdir}/os_defines.h \\\n-\t${glibcxx_srcdir}/$(ATOMICITY_INC_SRCDIR)/atomicity.h \n+\t${glibcxx_srcdir}/$(ATOMIC_WORD_SRCDIR)/atomic_word.h \n \n \n # Non-installed host_header files."}, {"sha": "d2620b08e5dce7400fd87c8f942c5872e802c3c9", "filename": "libstdc++-v3/include/bits/atomicity.h", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomicity.h?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -0,0 +1,46 @@\n+// Low-level functions for atomic operations -*- C++ -*-\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _GLIBCXX_ATOMICITY_H\n+#define _GLIBCXX_ATOMICITY_H\t1\n+\n+#include <bits/atomic_word.h>\n+  \n+namespace __gnu_cxx\n+{\n+  _Atomic_word \n+  __attribute__ ((__unused__))\n+  __exchange_and_add(volatile _Atomic_word* __mem, int __val);\n+\n+  void\n+  __attribute__ ((__unused__))\n+  __atomic_add(volatile _Atomic_word* __mem, int __val);\n+} // namespace __gnu_cxx\n+\n+#endif "}, {"sha": "a33cdefdb5360237a680b5ac402ce5b8790c072c", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -212,7 +212,7 @@ namespace std\n \t_M_dispose(const _Alloc& __a)\n \t{\n \t  if (__builtin_expect(this != &_S_empty_rep(), false))\n-\t    if (__exchange_and_add(&this->_M_refcount, -1) <= 0)\n+\t    if (__gnu_cxx::__exchange_and_add(&this->_M_refcount, -1) <= 0)\n \t      _M_destroy(__a);\n \t}  // XXX MT\n \n@@ -223,7 +223,7 @@ namespace std\n \t_M_refcopy() throw()\n \t{\n \t  if (__builtin_expect(this != &_S_empty_rep(), false))\n-            __atomic_add(&this->_M_refcount, 1);\n+            __gnu_cxx::__atomic_add(&this->_M_refcount, 1);\n \t  return _M_refdata();\n \t}  // XXX MT\n "}, {"sha": "694785df1f5533ff15766c6de167416b0231f290", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -1,6 +1,6 @@\n // Iostreams base classes -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -435,11 +435,12 @@ namespace std\n       : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }\n \n       void\n-      _M_add_reference() { __atomic_add(&_M_refcount, 1); }\n+      _M_add_reference() { __gnu_cxx::__atomic_add(&_M_refcount, 1); }\n \n       // 0 => OK to delete.\n       int\n-      _M_remove_reference() { return __exchange_and_add(&_M_refcount, -1); }\n+      _M_remove_reference() \n+      { return __gnu_cxx::__exchange_and_add(&_M_refcount, -1); }\n     };\n \n      _Callback_list*\t_M_callbacks;"}, {"sha": "926ce209b24f9f383a473adfe65ffcdbf0b64b47", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -400,12 +400,12 @@ namespace std\n   private:\n     inline void\n     _M_add_reference() const throw()\n-    { __atomic_add(&_M_refcount, 1); }\n+    { __gnu_cxx::__atomic_add(&_M_refcount, 1); }\n \n     inline void\n     _M_remove_reference() const throw()\n     {\n-      if (__exchange_and_add(&_M_refcount, -1) == 1)\n+      if (__gnu_cxx::__exchange_and_add(&_M_refcount, -1) == 1)\n \t{\n \t  try\n \t    { delete this; }\n@@ -505,12 +505,12 @@ namespace std\n \n     inline void\n     _M_add_reference() throw()\n-    { __atomic_add(&_M_refcount, 1); }\n+    { __gnu_cxx::__atomic_add(&_M_refcount, 1); }\n \n     inline void\n     _M_remove_reference() throw()\n     {\n-      if (__exchange_and_add(&_M_refcount, -1) == 1)\n+      if (__gnu_cxx::__exchange_and_add(&_M_refcount, -1) == 1)\n \t{\n \t  try\n \t    { delete this; }"}, {"sha": "7b7f97767bebccec3f89b19a0719d105d9cc418a", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -48,13 +48,14 @@ endif\n # Source files linked in via configuration/make substitution for a\n # particular host.\n host_sources = \\\n+\tatomicity.cc \\\n \tcodecvt_members.cc \\\n \tcollate_members.cc \\\n \tctype_members.cc \\\n \tmessages_members.cc \\\n \tmonetary_members.cc \\\n \tnumeric_members.cc \\\n-\ttime_members.cc\n+\ttime_members.cc \n \n codecvt_members.cc: ${glibcxx_srcdir}/$(CCODECVT_CC)\n \t$(LN_S) ${glibcxx_srcdir}/$(CCODECVT_CC) . || true\n@@ -77,6 +78,10 @@ numeric_members.cc: ${glibcxx_srcdir}/$(CNUMERIC_CC)\n time_members.cc: ${glibcxx_srcdir}/$(CTIME_CC)\n \t$(LN_S) ${glibcxx_srcdir}/$(CTIME_CC) . || true\n \n+atomicity_file = ${glibcxx_srcdir}/$(ATOMICITY_SRCDIR)/atomicity.h\n+atomicity.cc: ${atomicity_file}\n+\t$(LN_S) ${atomicity_file} ./atomicity.cc || true\n+\n # Source files linked in via configuration/make substitution for a\n # particular host, but with ad hoc naming rules.\n host_sources_extra = \\"}, {"sha": "24e7796175e846d980bd45408a69eaac7d3fe1aa", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -43,7 +43,8 @@ ACLOCAL = @ACLOCAL@\n AMTAR = @AMTAR@\n AR = @AR@\n AS = @AS@\n-ATOMICITY_INC_SRCDIR = @ATOMICITY_INC_SRCDIR@\n+ATOMICITY_SRCDIR = @ATOMICITY_SRCDIR@\n+ATOMIC_WORD_SRCDIR = @ATOMIC_WORD_SRCDIR@\n AUTOCONF = @AUTOCONF@\n AUTOHEADER = @AUTOHEADER@\n AUTOMAKE = @AUTOMAKE@\n@@ -219,24 +220,27 @@ AM_CPPFLAGS = $(GLIBCXX_INCLUDES)\n \n # Cross compiler support.\n toolexeclib_LTLIBRARIES = libstdc++.la\n-@GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE@version_arg = \n \n # Symbol versioning for shared libraries.\n @GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE@version_arg = -Wl,--version-script=libstdc++-symbol.ver\n-@GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE@version_dep = \n+@GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE@version_arg = \n @GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE@version_dep = libstdc++-symbol.ver\n+@GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE@version_dep = \n \n # Source files linked in via configuration/make substitution for a\n # particular host.\n host_sources = \\\n+\tatomicity.cc \\\n \tcodecvt_members.cc \\\n \tcollate_members.cc \\\n \tctype_members.cc \\\n \tmessages_members.cc \\\n \tmonetary_members.cc \\\n \tnumeric_members.cc \\\n-\ttime_members.cc\n+\ttime_members.cc \n+\n \n+atomicity_file = ${glibcxx_srcdir}/$(ATOMICITY_SRCDIR)/atomicity.h\n \n # Source files linked in via configuration/make substitution for a\n # particular host, but with ad hoc naming rules.\n@@ -306,13 +310,6 @@ libstdc___la_LDFLAGS = \\\n # deprecated include files.\n GLIBCXX_INCLUDE_DIR = $(glibcxx_builddir)/include\n \n-# Use special rules for the demangler, so that an additional implicit\n-# instantiation file is not necessary.\n-#demangle.lo: demangle.cc\n-#\t$(LTCXXCOMPILE) -fimplicit-templates -c $<\n-#demangle.o: demangle.cc\n-#\t$(CXXCOMPILE) -fimplicit-templates -c $<\n-\n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n # set this option because CONFIG_CXXFLAGS has to be after\n@@ -364,9 +361,9 @@ CONFIG_HEADER = $(top_builddir)/config.h\n CONFIG_CLEAN_FILES =\n LTLIBRARIES = $(toolexeclib_LTLIBRARIES)\n \n-am__objects_1 = codecvt_members.lo collate_members.lo ctype_members.lo \\\n-\tmessages_members.lo monetary_members.lo numeric_members.lo \\\n-\ttime_members.lo\n+am__objects_1 = atomicity.lo codecvt_members.lo collate_members.lo \\\n+\tctype_members.lo messages_members.lo monetary_members.lo \\\n+\tnumeric_members.lo time_members.lo\n am__objects_2 = basic_file.lo c++locale.lo\n am__objects_3 = allocator.lo codecvt.lo complex_io.lo ctype.lo debug.lo \\\n \tdemangle.lo functexcept.lo globals_locale.lo globals_io.lo \\\n@@ -662,6 +659,8 @@ numeric_members.cc: ${glibcxx_srcdir}/$(CNUMERIC_CC)\n \n time_members.cc: ${glibcxx_srcdir}/$(CTIME_CC)\n \t$(LN_S) ${glibcxx_srcdir}/$(CTIME_CC) . || true\n+atomicity.cc: ${atomicity_file}\n+\t$(LN_S) ${atomicity_file} ./atomicity.cc || true\n \n c++locale.cc: ${glibcxx_srcdir}/$(CLOCALE_CC)\n \t$(LN_S) ${glibcxx_srcdir}/$(CLOCALE_CC) ./$@ || true"}, {"sha": "0dfa482d9bb2b1c6a55ccc770f037a6932636a80", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -1,6 +1,6 @@\n // Iostreams base classes -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -138,7 +138,7 @@ namespace std\n     // Implementation note: Initialize top to zero to ensure that\n     // initialization occurs before main() is started.\n     static _Atomic_word _S_top = 0; \n-    return __exchange_and_add(&_S_top, 1) + 4;\n+    return __gnu_cxx::__exchange_and_add(&_S_top, 1) + 4;\n   }\n \n   void "}, {"sha": "ae7b8e1b5f2787854764ed3e9c75783601f768d8", "filename": "libstdc++-v3/src/ios_init.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fsrc%2Fios_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fsrc%2Fios_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios_init.cc?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -1,6 +1,6 @@\n // Iostreams base classes -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -82,7 +82,7 @@ namespace std\n \n   ios_base::Init::Init()\n   {\n-    if (__exchange_and_add(&_S_refcount, 1) == 0)\n+    if (__gnu_cxx::__exchange_and_add(&_S_refcount, 1) == 0)\n       {\n \t// Standard streams default to synced with \"C\" operations.\n \t_S_synced_with_stdio = true;\n@@ -117,13 +117,13 @@ namespace std\n \t// streams are not re-initialized with uses of ios_base::Init\n \t// besides <iostream> static object, ie just using <ios> with\n \t// ios_base::Init objects.\n-\t__atomic_add(&_S_refcount, 1);\n+\t__gnu_cxx::__atomic_add(&_S_refcount, 1);\n       }\n   }\n \n   ios_base::Init::~Init()\n   {\n-    if (__exchange_and_add(&_S_refcount, -1) == 2)\n+    if (__gnu_cxx::__exchange_and_add(&_S_refcount, -1) == 2)\n       {\n \t// Catch any exceptions thrown by basic_ostream::flush()\n \ttry"}, {"sha": "7021b65ec582decf0a38a16e87f6b908c444494d", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -356,7 +356,7 @@ namespace std\n   locale::id::_M_id() const\n   {\n     if (!_M_index)\n-      _M_index = 1 + __exchange_and_add(&_S_refcount, 1);\n+      _M_index = 1 + __gnu_cxx::__exchange_and_add(&_S_refcount, 1);\n     return _M_index - 1;\n   }\n } // namespace std"}, {"sha": "626598e13a3b81babd9f6b261158b4e9beb5e2c1", "filename": "libstdc++-v3/testsuite/27_io/ios_base/cons/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n \n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,5 +41,5 @@ void test01()\n   io1 = io2;\n }\n // { dg-error \"within this context\" \"\" { target *-*-* } 41 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 740 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 741 } \n // { dg-error \"operator=\" \"\" { target *-*-* } 0 } "}, {"sha": "9df52f3997b6a3bbe5bc03b902929c7564d743e7", "filename": "libstdc++-v3/testsuite/27_io/ios_base/cons/copy_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5d0ae842f692b1456cf53d2734457a8f43194f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc?ref=2c5d0ae842f692b1456cf53d2734457a8f43194f", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n \n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,5 +41,5 @@ void test02()\n   test_base io2 = io1; \n }\n // { dg-error \"within this context\" \"\" { target *-*-* } 41 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 737 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 738 } \n // { dg-error \"copy constructor\" \"\" { target *-*-* } 0 } "}]}