{"sha": "9c591bd0849e4ed59a584aeced67053944f13b0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM1OTFiZDA4NDllNGVkNTlhNTg0YWVjZWQ2NzA1Mzk0NGYxM2IwYg==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-20T16:09:45Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-20T16:09:45Z"}, "message": "re PR c/35701 (Quieten -Wconversion warnings)\n\n2008-08-20  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR 35701\n\t* c-common.c (conversion_warning): Do not warn if applying bit-and\n\toperator to unsigned constant that fits in the target type.\n\t\ntestsuite/\n\t* gcc.dg/pr35701.c: New.\n\t* gcc.dg/Wconversion-real-integer.c: Add more tests.\n\t* gcc.dg/Wconversion-pr34389.c: Update.\n\t* g++.dg/warn/Wconversion-pr34389.C: Update.\n\nFrom-SVN: r139329", "tree": {"sha": "e4b280fa4d233f4a7258a47cdc899fe8254038f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4b280fa4d233f4a7258a47cdc899fe8254038f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c591bd0849e4ed59a584aeced67053944f13b0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c591bd0849e4ed59a584aeced67053944f13b0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c591bd0849e4ed59a584aeced67053944f13b0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c591bd0849e4ed59a584aeced67053944f13b0b/comments", "author": null, "committer": null, "parents": [{"sha": "0011dedbd9dbfa01b2f4d3390ef3ed2d6ea1dd6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0011dedbd9dbfa01b2f4d3390ef3ed2d6ea1dd6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0011dedbd9dbfa01b2f4d3390ef3ed2d6ea1dd6d"}], "stats": {"total": 153, "additions": 145, "deletions": 8}, "files": [{"sha": "956d401a6d6ce3129d94735e4b54ed518e2caba3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c591bd0849e4ed59a584aeced67053944f13b0b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c591bd0849e4ed59a584aeced67053944f13b0b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c591bd0849e4ed59a584aeced67053944f13b0b", "patch": "@@ -1,3 +1,9 @@\n+2008-08-20  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR 35701\n+\t* c-common.c (conversion_warning): Do not warn if applying bit-and\n+\toperator to unsigned constant that fits in the target type.\n+\n 2008-08-20  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c++/35602"}, {"sha": "bb420ba72c7a412d92b6ef2043781d20d265aec8", "filename": "gcc/c-common.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c591bd0849e4ed59a584aeced67053944f13b0b/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c591bd0849e4ed59a584aeced67053944f13b0b/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=9c591bd0849e4ed59a584aeced67053944f13b0b", "patch": "@@ -1693,13 +1693,16 @@ conversion_warning (tree type, tree expr)\n \t\t\t\t\t     TREE_OPERAND (expr, 1), \n \t\t\t\t\t     /* bitwise */1);\n \n-\t      /* If one of the operands is a non-negative constant\n-\t\t that fits in the target type, then the type of the\n-\t\t other operand does not matter. */\n \t      if (TREE_CODE (expr) == BIT_AND_EXPR)\n \t\t{\n \t\t  tree op0 = TREE_OPERAND (expr, 0);\n \t\t  tree op1 = TREE_OPERAND (expr, 1);\n+\t\t  bool unsigned0 = TYPE_UNSIGNED (TREE_TYPE (op0));\n+\t\t  bool unsigned1 = TYPE_UNSIGNED (TREE_TYPE (op1));\n+\n+\t\t  /* If one of the operands is a non-negative constant\n+\t\t     that fits in the target type, then the type of the\n+\t\t     other operand does not matter. */\n \t\t  if ((TREE_CODE (op0) == INTEGER_CST\n \t\t       && int_fits_type_p (op0, c_common_signed_type (type))\n \t\t       && int_fits_type_p (op0, c_common_unsigned_type (type)))\n@@ -1708,6 +1711,15 @@ conversion_warning (tree type, tree expr)\n \t\t\t  && int_fits_type_p (op1, \n \t\t\t\t\t      c_common_unsigned_type (type))))\n \t\t    return;\n+\t\t  /* If constant is unsigned and fits in the target\n+\t\t     type, then the result will also fit.  */\n+\t\t  else if ((TREE_CODE (op0) == INTEGER_CST\n+\t\t\t    && unsigned0 \n+\t\t\t    && int_fits_type_p (op0, type))\n+\t\t\t   || (TREE_CODE (op1) == INTEGER_CST\n+\t\t\t       && unsigned1\n+\t\t\t       && int_fits_type_p (op1, type)))\n+\t\t    return;\n \t\t}\n \t    }\n           /* Warn for integer types converted to smaller integer types.  */"}, {"sha": "2a6c60eaaf010a526f29af9cff06defea359383f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c591bd0849e4ed59a584aeced67053944f13b0b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c591bd0849e4ed59a584aeced67053944f13b0b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c591bd0849e4ed59a584aeced67053944f13b0b", "patch": "@@ -1,3 +1,11 @@\n+2008-08-20  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR 35701\n+\t* gcc.dg/pr35701.c: New.\n+\t* gcc.dg/Wconversion-real-integer.c: Add more tests.\n+\t* gcc.dg/Wconversion-pr34389.c: Update.\n+\t* g++.dg/warn/Wconversion-pr34389.C: Update.\n+\n 2008-08-20  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c++/35602"}, {"sha": "a6df4035a6242d27d3d35f7f1cc5a5d897114cc9", "filename": "gcc/testsuite/g++.dg/warn/Wconversion-pr34389.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c591bd0849e4ed59a584aeced67053944f13b0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-pr34389.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c591bd0849e4ed59a584aeced67053944f13b0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-pr34389.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-pr34389.C?ref=9c591bd0849e4ed59a584aeced67053944f13b0b", "patch": "@@ -1,7 +1,7 @@\n /* PR 34389 */\n /* { dg-do compile } */\n /* { dg-options \"-Wconversion -Wsign-conversion\" } */\n-\n+/* { dg-require-effective-target int32plus } */\n short  mask1(short x)\n {\n   short y = 0x7fff;\n@@ -32,7 +32,8 @@ short  mask3(int si, unsigned int ui)\n   us = si & 0x7fff;\n   us = si & 0xAAAA; /* { dg-warning \"conversion\" } */\n   us = ui & 0x7fff;\n-  us = ui & 0xAAAA; /* { dg-warning \"conversion\" } */\n+  us = ui & 0xAAAA; /* 0xAAAA is zero-extended, thus it masks the\n+\t\t       upper bits of 'ui' making it fit in 'us'.  */\n \n   return ss;\n }"}, {"sha": "282ac13da582d835b78888aaeeb8c85733fd6f80", "filename": "gcc/testsuite/g++.dg/warn/Wconversion-real-integer.C", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c591bd0849e4ed59a584aeced67053944f13b0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-real-integer.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c591bd0849e4ed59a584aeced67053944f13b0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-real-integer.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-real-integer.C?ref=9c591bd0849e4ed59a584aeced67053944f13b0b", "patch": "@@ -4,7 +4,7 @@\n \n /* { dg-do compile }\n /* { dg-options \"-Wconversion\" } */\n-\n+/* { dg-require-effective-target int32plus } */\n #include <limits.h>\n \n void fsi (signed int x);\n@@ -71,3 +71,42 @@ void h (void)\n }\n \n \n+void fss (signed short x);\n+void fus (unsigned short x);\n+void fsc (signed char x);\n+void fuc (unsigned char x);\n+\n+void h2 (void)\n+{\n+  unsigned short int us;\n+  short int   ss;\n+  unsigned char uc;\n+  signed char sc;\n+  \n+  fss (4294967294.0); /* { dg-warning \"conversion\" } */\n+  ss = 4294967294.0; /* { dg-warning \"conversion\" } */\n+  fss (-4294967294.0);  /* { dg-warning \"conversion\" } */\n+  ss = -4294967294.0;  /* { dg-warning \"conversion\" } */\n+  fus (4294967294.0); /* { dg-warning \"conversion\" } */\n+  us = 4294967294.0; /* { dg-warning \"conversion\" } */\n+  fus (-4294967294.0);  /* { dg-warning \"conversion\" } */\n+  us = -4294967294.0;  /* { dg-warning \"conversion\" } */\n+\n+  fsc (500.0); /* { dg-warning \"conversion\" } */\n+  sc = 500.0; /* { dg-warning \"conversion\" } */\n+  fsc (-500.0);  /* { dg-warning \"conversion\" } */\n+  sc = -500.0;  /* { dg-warning \"conversion\" } */\n+  fuc (500.0); /* { dg-warning \"conversion\" } */\n+  uc = 500.0; /* { dg-warning \"conversion\" } */\n+  fuc (-500.0);  /* { dg-warning \"conversion\" } */\n+  uc = -500.0;  /* { dg-warning \"conversion\" } */\n+\n+  fss (500.0);\n+  ss = 500.0;\n+  fss (-500.0);\n+  ss = -500.0;\n+  fus (500.0); \n+  us = 500.0; \n+  fus (-500.0);   /* { dg-warning \"conversion\" } */\n+  us = -500.0;    /* { dg-warning \"conversion\" } */\n+}"}, {"sha": "1a4336802606e5c40e27a50e63a83cad2e9c0202", "filename": "gcc/testsuite/gcc.dg/Wconversion-pr34389.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c591bd0849e4ed59a584aeced67053944f13b0b/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-pr34389.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c591bd0849e4ed59a584aeced67053944f13b0b/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-pr34389.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-pr34389.c?ref=9c591bd0849e4ed59a584aeced67053944f13b0b", "patch": "@@ -1,6 +1,7 @@\n /* PR 34389 */\n /* { dg-do compile } */\n /* { dg-options \"-Wconversion -Wsign-conversion\" } */\n+/* { dg-require-effective-target int32plus } */\n \n short  mask1(short x)\n {\n@@ -32,7 +33,8 @@ short  mask3(int si, unsigned int ui)\n   us = si & 0x7fff;\n   us = si & 0xAAAA; /* { dg-warning \"conversion\" } */\n   us = ui & 0x7fff;\n-  us = ui & 0xAAAA; /* { dg-warning \"conversion\" } */\n+  us = ui & 0xAAAA; /* 0xAAAA is zero-extended, thus it masks the\n+\t\t       upper bits of 'ui' making it fit in 'us'.  */\n \n   return ss;\n }"}, {"sha": "1625fc03581a36e30d11c24335466e4660c91098", "filename": "gcc/testsuite/gcc.dg/Wconversion-real-integer.c", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c591bd0849e4ed59a584aeced67053944f13b0b/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-real-integer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c591bd0849e4ed59a584aeced67053944f13b0b/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-real-integer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-real-integer.c?ref=9c591bd0849e4ed59a584aeced67053944f13b0b", "patch": "@@ -4,7 +4,7 @@\n /* { dg-do compile }\n /* { dg-skip-if \"doubles are floats,ints are 16bits\" { \"avr-*-*\" } { \"*\" } { \"\" } } */\n /* { dg-options \"-std=c99 -Wconversion\" } */\n-\n+/* { dg-require-effective-target int32plus } */\n #include <limits.h>\n \n void fsi (signed int x);\n@@ -71,4 +71,42 @@ void h (void)\n }\n \n \n+void fss (signed short x);\n+void fus (unsigned short x);\n+void fsc (signed char x);\n+void fuc (unsigned char x);\n+\n+void h2 (void)\n+{\n+  unsigned short int us;\n+  short int   ss;\n+  unsigned char uc;\n+  signed char sc;\n+  \n+  fss (4294967294.0); /* { dg-warning \"conversion\" } */\n+  ss = 4294967294.0; /* { dg-warning \"conversion\" } */\n+  fss (-4294967294.0);  /* { dg-warning \"conversion\" } */\n+  ss = -4294967294.0;  /* { dg-warning \"conversion\" } */\n+  fus (4294967294.0); /* { dg-warning \"conversion\" } */\n+  us = 4294967294.0; /* { dg-warning \"conversion\" } */\n+  fus (-4294967294.0);  /* { dg-warning \"conversion\" } */\n+  us = -4294967294.0;  /* { dg-warning \"conversion\" } */\n \n+  fsc (500.0); /* { dg-warning \"conversion\" } */\n+  sc = 500.0; /* { dg-warning \"conversion\" } */\n+  fsc (-500.0);  /* { dg-warning \"conversion\" } */\n+  sc = -500.0;  /* { dg-warning \"conversion\" } */\n+  fuc (500.0); /* { dg-warning \"conversion\" } */\n+  uc = 500.0; /* { dg-warning \"conversion\" } */\n+  fuc (-500.0);  /* { dg-warning \"conversion\" } */\n+  uc = -500.0;  /* { dg-warning \"conversion\" } */\n+\n+  fss (500.0);\n+  ss = 500.0;\n+  fss (-500.0);\n+  ss = -500.0;\n+  fus (500.0); \n+  us = 500.0; \n+  fus (-500.0);   /* { dg-warning \"conversion\" } */\n+  us = -500.0;    /* { dg-warning \"conversion\" } */\n+}"}, {"sha": "4144430977d986f945ecece3ede53ec2ad7e560e", "filename": "gcc/testsuite/gcc.dg/pr35701.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c591bd0849e4ed59a584aeced67053944f13b0b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35701.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c591bd0849e4ed59a584aeced67053944f13b0b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35701.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35701.c?ref=9c591bd0849e4ed59a584aeced67053944f13b0b", "patch": "@@ -0,0 +1,31 @@\n+/* PR 35701 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wconversion -Wsign-conversion\" } */\n+/* { dg-require-effective-target int32plus } */\n+\n+typedef struct _my_struct_t {\n+  unsigned int small:1;\n+  unsigned int big:31;\n+} my_struct_t, *my_struct_p_t;\n+\n+void\n+my_func1(unsigned int sm, unsigned int bi, my_struct_p_t msp)\n+{\n+  msp->small = sm; /* { dg-warning \"conversion\" } */\n+  msp->big = bi; /* { dg-warning \"conversion\" } */\n+}\n+\n+void\n+my_func2(unsigned int sm, unsigned int bi, my_struct_p_t msp)\n+{\n+  msp->small = sm & 1U;\n+  msp->big = bi & 0x7fffffffU;\n+}\n+\n+unsigned short\n+my_func3(unsigned int sm)\n+{\n+  unsigned short res;\n+  res = sm & 0xff20U;\n+  return res;\n+}"}]}