{"sha": "dd9e5f4db2debf1429feab7f785962ccef6e0dbd", "node_id": "C_kwDOANBUbNoAKGRkOWU1ZjRkYjJkZWJmMTQyOWZlYWI3Zjc4NTk2MmNjZWY2ZTBkYmQ", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2022-09-21T09:10:21Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2022-09-21T09:10:21Z"}, "message": "aarch64: Rewrite -march=native to -mcpu if no other -mcpu or -mtune is given\n\nWe have received requests to improve the out-of-the box experience and\nperformance of AArch64 GCC users, particularly those porting software from other\narchitectures. This has many aspects. One such aspect are apps built natively\nwith an -march=native used as a tuning flag in the Makefile.\nOn AArch64 this selects the right architecture features on GNU+Linux for the\nhost system but tunes for the \"generic\" CPU target.\nThis patch makes GCC also tune for the host CPU, as well as selecting its\narchitecture. That is, it translates -march=native into -mcpu=native.\nThis maintains the documentation that it \"causes the compiler to pick the\narchitecture of the host system\" since -mcpu=native does that, but it also\ngives a better performance experience for the user.\n\nIf the user explicitly asked for a particular CPU tuning through -mcpu or\n-mtune then we don't do this rewriting so that the user option is honoured.\n\nThis would have been a one-line patch if it wasn't for --with-tune\nconfigure-time arguments. When GCC is configured with --with-tune=<CORE> the\nOPTION_DEFAULT_SPECS will insert an -mtune=<CORE> in the options if no other\n-mcpu or -mtune options were given. This will spook the aforementioned desired\nrewriting of -march=native into -mcpu=native, though I'd argue that we want to\ndo the rewrite even then. Therefore, this patch moves some specs in aarch64.h\naround and refactors the --with-tune rewriting into CONFIG_TUNE_SPEC so that\nthe materialization of the implicit -mtune=<CORE> does not happen if -march=native\nis used.\n\nBootstrapped and tested on aarch64-none-linux-gnu and checked with the output\nof -### from the driver that the option rewriting works as expected on\naarch64-linux-gnu.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64.h (HAVE_LOCAL_CPU_DETECT,\n\tEXTRA_SPEC_FUNCTIONS, MCPU_MTUNE_NATIVE_SPECS): Move definitions up before\n\tOPTION_DEFAULT_SPECS.\n\t(MCPU_MTUNE_NATIVE_SPECS): Pass \"cpu\" to\n\tlocal_cpu_detect when rewriting -march=native and no -mcpu or -mtune\n\tis given.\n\t(CONFIG_TUNE_SPEC): Define.\n\t(OPTION_DEFAULT_SPECS): Use CONFIG_TUNE_SPEC for \"tune\".", "tree": {"sha": "19ed21d6ed866632f7ba74f61a4f28ef760ae664", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19ed21d6ed866632f7ba74f61a4f28ef760ae664"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd9e5f4db2debf1429feab7f785962ccef6e0dbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd9e5f4db2debf1429feab7f785962ccef6e0dbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd9e5f4db2debf1429feab7f785962ccef6e0dbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd9e5f4db2debf1429feab7f785962ccef6e0dbd/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2278da1c3cb7bf8b3d96c86dbef2982bf4cc54a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2278da1c3cb7bf8b3d96c86dbef2982bf4cc54a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2278da1c3cb7bf8b3d96c86dbef2982bf4cc54a"}], "stats": {"total": 50, "additions": 32, "deletions": 18}, "files": [{"sha": "6f6bb70fde955f6664e7cd48236ef79d0ee330d5", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 32, "deletions": 18, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd9e5f4db2debf1429feab7f785962ccef6e0dbd/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd9e5f4db2debf1429feab7f785962ccef6e0dbd/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=dd9e5f4db2debf1429feab7f785962ccef6e0dbd", "patch": "@@ -1260,14 +1260,44 @@ extern enum aarch64_code_model aarch64_cmodel;\n #define ENDIAN_LANE_N(NUNITS, N) \\\n   (BYTES_BIG_ENDIAN ? NUNITS - 1 - N : N)\n \n+/* Extra specs when building a native AArch64-hosted compiler.\n+   Option rewriting rules based on host system.  */\n+#if defined(__aarch64__)\n+extern const char *host_detect_local_cpu (int argc, const char **argv);\n+#define HAVE_LOCAL_CPU_DETECT\n+# define EXTRA_SPEC_FUNCTIONS                                           \\\n+  { \"local_cpu_detect\", host_detect_local_cpu },                        \\\n+  MCPU_TO_MARCH_SPEC_FUNCTIONS\n+\n+/* Rewrite -m{arch,cpu,tune}=native based on the host system information.\n+   When rewriting -march=native convert it into an -mcpu option if no other\n+   -mcpu or -mtune was given.  */\n+# define MCPU_MTUNE_NATIVE_SPECS                                        \\\n+   \" %{march=native:%<march=native %:local_cpu_detect(%{mcpu=*|mtune=*:arch;:cpu})}\"            \\\n+   \" %{mcpu=native:%<mcpu=native %:local_cpu_detect(cpu)}\"              \\\n+   \" %{mtune=native:%<mtune=native %:local_cpu_detect(tune)}\"\n+/* This will be used in OPTION_DEFAULT_SPECS below.\n+   When GCC is configured with --with-tune we don't want to materialize an\n+   implicit -mtune would prevent the rewriting of -march=native into\n+   -mcpu=native as per the above rules.  */\n+#define CONFIG_TUNE_SPEC\t\t\t\t\t\t\\\n+ { \"tune\", \"%{!mcpu=*:%{!mtune=*:%{!march=native:-mtune=%(VALUE)}}}\" },\n+#else\n+# define MCPU_MTUNE_NATIVE_SPECS \"\"\n+# define EXTRA_SPEC_FUNCTIONS MCPU_TO_MARCH_SPEC_FUNCTIONS\n+# define CONFIG_TUNE_SPEC                                                \\\n+  {\"tune\", \"%{!mcpu=*:%{!mtune=*:-mtune=%(VALUE)}}\"},\n+#endif\n+\n /* Support for configure-time --with-arch, --with-cpu and --with-tune.\n    --with-arch and --with-cpu are ignored if either -mcpu or -march is used.\n    --with-tune is ignored if either -mtune or -mcpu is used (but is not\n-   affected by -march).  */\n+   affected by -march, except in the -march=native case as per the\n+   CONFIG_TUNE_SPEC above).  */\n #define OPTION_DEFAULT_SPECS\t\t\t\t\\\n   {\"arch\", \"%{!march=*:%{!mcpu=*:-march=%(VALUE)}}\" },\t\\\n   {\"cpu\",  \"%{!march=*:%{!mcpu=*:-mcpu=%(VALUE)}}\" },   \\\n-  {\"tune\", \"%{!mcpu=*:%{!mtune=*:-mtune=%(VALUE)}}\"},\n+  CONFIG_TUNE_SPEC\n \n #define MCPU_TO_MARCH_SPEC \\\n    \" %{mcpu=*:-march=%:rewrite_mcpu(%{mcpu=*:%*})}\"\n@@ -1276,22 +1306,6 @@ extern const char *aarch64_rewrite_mcpu (int argc, const char **argv);\n #define MCPU_TO_MARCH_SPEC_FUNCTIONS \\\n   { \"rewrite_mcpu\", aarch64_rewrite_mcpu },\n \n-#if defined(__aarch64__)\n-extern const char *host_detect_local_cpu (int argc, const char **argv);\n-#define HAVE_LOCAL_CPU_DETECT\n-# define EXTRA_SPEC_FUNCTIONS\t\t\t\t\t\t\\\n-  { \"local_cpu_detect\", host_detect_local_cpu },\t\t\t\\\n-  MCPU_TO_MARCH_SPEC_FUNCTIONS\n-\n-# define MCPU_MTUNE_NATIVE_SPECS\t\t\t\t\t\\\n-   \" %{march=native:%<march=native %:local_cpu_detect(arch)}\"\t\t\\\n-   \" %{mcpu=native:%<mcpu=native %:local_cpu_detect(cpu)}\"\t\t\\\n-   \" %{mtune=native:%<mtune=native %:local_cpu_detect(tune)}\"\n-#else\n-# define MCPU_MTUNE_NATIVE_SPECS \"\"\n-# define EXTRA_SPEC_FUNCTIONS MCPU_TO_MARCH_SPEC_FUNCTIONS\n-#endif\n-\n #define ASM_CPU_SPEC \\\n    MCPU_TO_MARCH_SPEC\n "}]}