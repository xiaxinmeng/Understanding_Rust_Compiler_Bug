{"sha": "ad115a3c32ab0af89b575221f3a8212652a7f948", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQxMTVhM2MzMmFiMGFmODliNTc1MjIxZjNhODIxMjY1MmE3Zjk0OA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-07-15T10:17:32Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-07-15T10:17:32Z"}, "message": "tree.c (tree_code_size): Add TRANSLATION_UNIT_DECL, NAMESPACE_DECL, IMPORTED_DECL and NAMELIST_DECL...\n\n\t* tree.c (tree_code_size): Add TRANSLATION_UNIT_DECL,\n\tNAMESPACE_DECL, IMPORTED_DECL and NAMELIST_DECL;\n\tcall langhook for unknown declaration.\n\t(find_decls_types_r): Do not walk DECL_ARGUMENT_FLD.\n\t* tree.h (DECL_ARGUMENTS): Update.\n\t* print-tree.c (print_node): Update.\n\t* tree-core.h (tree_decl_non_common): Remove arguments.\n\t(tree_function_decl): Add arguments.\n\n\t* class.c (build_clone): Do not clear assembler names of\n\ttemplates.\n\t* decl.c (cp_tree_node_structure): Add TEMPLATE_DECL.\n\t* cp-objcp-common.c (cp_tree_size): Add TEMPLATE_DECL\n\tas a special case return sizeof (struct tree_decl_non_common)\n\tfor other decls.\n\t(cp_common_init_ts): Do not initialize NAMESPACE_DECL;\n\tinitialize TEMPLATE_DECL as MARK_TS_DECL_COMMON.\n\t* cp/cp-tree.h (tree_template_decl): New structure.\n\t(cp_tree_node_structure_enum): Add TS_CP_TEMPLATE_DECL.\n\t(union cp_lang_tree_node): Add template_decl.\n\t(DECL_TEMPLATE_PARMS, DECL_TEMPLATE_RESULT): Update.\n\n\t* lto/lto.c (mentions_vars_p_decl_non_common): Skip\n\tDECL_ARGUMENT_FLD.\n\tmentions_vars_p_function): Do DECL_ARGUMENTS.\n\t(lto_fixup_prevailing_decls): Update.\n\n\t* objc-act.c (objc_common_tree_size): New function.\n\t* objc-act.h (KEYWORD_KEY_NAME, KEYWORD_ARG_NAME): Add type\n\tchecking.\n\t(INSTANCE_METHOD_OR_CLASS_METHOD_DECL_CHECK): New macro.\n\t(METHOD_SEL_NAME, METHOD_SEL_ARGS, METHOD_ADD_ARGS,\n \tMETHOD_ADD_ARGS_ELLIPSIS_P, METHOD_DEFINITION, METHOD_ENCODING,\n\tMETHOD_TYPE_ATTRIBUTES, METHOD_PROPERTY_CONTEXT): Add type checking.\n\t(METHOD_SEL_ARGS): Use decl_common.size instead of\n\tdecl_non_common.result.\n\t(PROPERTY_NAME, PROPERTY_GETTER_NAME, PROPERTY_SETTER_NAME,\n\tPROPERTY_READONLY, PROPERTY_NONATOMIC, PROPERTY_ASSIGN_SEMANTICS,\n\tPROPERTY_IVAR_NAME, PROPERTY_DYNAMIC, PROPERTY_HAS_NO_GETTER,\n\tPROPERTY_HAS_NO_SETTER, PROPERTY_OPTIONAL): Add type checking.\n\t(objc_common_tree_size): Declare.\n\t* objc/objc-lang.c (LANG_HOOKS_TREE_SIZE): New macro.\n\nFrom-SVN: r212549", "tree": {"sha": "c2916073d31a98f423ae5a332f347790559245bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2916073d31a98f423ae5a332f347790559245bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad115a3c32ab0af89b575221f3a8212652a7f948", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad115a3c32ab0af89b575221f3a8212652a7f948", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad115a3c32ab0af89b575221f3a8212652a7f948", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad115a3c32ab0af89b575221f3a8212652a7f948/comments", "author": null, "committer": null, "parents": [{"sha": "80def9087092a60b4f5f2ca952b3d0eb8e73cc8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80def9087092a60b4f5f2ca952b3d0eb8e73cc8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80def9087092a60b4f5f2ca952b3d0eb8e73cc8d"}], "stats": {"total": 196, "additions": 155, "deletions": 41}, "files": [{"sha": "5a83e0e35b35b7d6f212fa17df089a9ba5b8121c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad115a3c32ab0af89b575221f3a8212652a7f948", "patch": "@@ -1,3 +1,14 @@\n+2014-07-14  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree.c (tree_code_size): Add TRANSLATION_UNIT_DECL,\n+\tNAMESPACE_DECL, IMPORTED_DECL and NAMELIST_DECL;\n+\tcall langhook for unknown declaration.\n+\t(find_decls_types_r): Do not walk DECL_ARGUMENT_FLD.\n+\t* tree.h (DECL_ARGUMENTS): Update.\n+\t* print-tree.c (print_node): Update.\n+\t* tree-core.h (tree_decl_non_common): Remove arguments.\n+\t(tree_function_decl): Add arguments.\n+\n 2014-07-14  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* aarch64.md (add_losym_<mode>): Set type to alu_imm."}, {"sha": "9ffee53b6c9e03d1a647da1acff78fb61456fa69", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ad115a3c32ab0af89b575221f3a8212652a7f948", "patch": "@@ -1,3 +1,18 @@\n+2014-07-14  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* class.c (build_clone): Do not clear assembler names of\n+\ttemplates.\n+\t* decl.c (cp_tree_node_structure): Add TEMPLATE_DECL.\n+\t* cp-objcp-common.c (cp_tree_size): Add TEMPLATE_DECL\n+\tas a special case return sizeof (struct tree_decl_non_common)\n+\tfor other decls.\n+\t(cp_common_init_ts): Do not initialize NAMESPACE_DECL;\n+\tinitialize TEMPLATE_DECL as MARK_TS_DECL_COMMON.\n+\t* cp/cp-tree.h (tree_template_decl): New structure.\n+\t(cp_tree_node_structure_enum): Add TS_CP_TEMPLATE_DECL.\n+\t(union cp_lang_tree_node): Add template_decl.\n+\t(DECL_TEMPLATE_PARMS, DECL_TEMPLATE_RESULT): Update.\n+\n 2014-07-14  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/61445"}, {"sha": "dbd8d3d3aa58c28e5751dc63cda37b5ee8360df7", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=ad115a3c32ab0af89b575221f3a8212652a7f948", "patch": "@@ -4388,7 +4388,6 @@ build_clone (tree fn, tree name)\n   clone = copy_decl (fn);\n   /* Reset the function name.  */\n   DECL_NAME (clone) = name;\n-  SET_DECL_ASSEMBLER_NAME (clone, NULL_TREE);\n   /* Remember where this function came from.  */\n   DECL_ABSTRACT_ORIGIN (clone) = fn;\n   /* Make it easy to find the CLONE given the FN.  */\n@@ -4406,6 +4405,7 @@ build_clone (tree fn, tree name)\n       return clone;\n     }\n \n+  SET_DECL_ASSEMBLER_NAME (clone, NULL_TREE);\n   DECL_CLONED_FUNCTION (clone) = fn;\n   /* There's no pending inline data for this function.  */\n   DECL_PENDING_INLINE_INFO (clone) = NULL;"}, {"sha": "0c50f4085ab54270a8eefac759d15980fba764f8", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=ad115a3c32ab0af89b575221f3a8212652a7f948", "patch": "@@ -103,7 +103,11 @@ cp_tree_size (enum tree_code code)\n \n     case USERDEF_LITERAL:\treturn sizeof (struct tree_userdef_literal);\n \n+    case TEMPLATE_DECL:\t\treturn sizeof (struct tree_template_decl);\n+\n     default:\n+      if (TREE_CODE_CLASS (code) == tcc_declaration)\n+\treturn sizeof (struct tree_decl_non_common);\n       gcc_unreachable ();\n     }\n   /* NOTREACHED */\n@@ -245,9 +249,8 @@ cxx_block_may_fallthru (const_tree stmt)\n void\n cp_common_init_ts (void)\n {\n-  MARK_TS_DECL_NON_COMMON (NAMESPACE_DECL);\n   MARK_TS_DECL_NON_COMMON (USING_DECL);\n-  MARK_TS_DECL_NON_COMMON (TEMPLATE_DECL);\n+  MARK_TS_DECL_COMMON (TEMPLATE_DECL);\n \n   MARK_TS_COMMON (TEMPLATE_TEMPLATE_PARM);\n   MARK_TS_COMMON (TEMPLATE_TYPE_PARM);"}, {"sha": "0c0d804d6798880d37e4fe5e27e2831e289817c1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ad115a3c32ab0af89b575221f3a8212652a7f948", "patch": "@@ -362,6 +362,12 @@ struct GTY(()) tree_overload {\n   tree function;\n };\n \n+struct GTY(()) tree_template_decl {\n+  struct tree_decl_common common;\n+  tree arguments;\n+  tree result;\n+};\n+\n /* Returns true iff NODE is a BASELINK.  */\n #define BASELINK_P(NODE) \\\n   (TREE_CODE (NODE) == BASELINK)\n@@ -796,6 +802,7 @@ enum cp_tree_node_structure_enum {\n   TS_CP_BINDING,\n   TS_CP_OVERLOAD,\n   TS_CP_BASELINK,\n+  TS_CP_TEMPLATE_DECL,\n   TS_CP_WRAPPER,\n   TS_CP_DEFAULT_ARG,\n   TS_CP_DEFERRED_NOEXCEPT,\n@@ -817,6 +824,7 @@ union GTY((desc (\"cp_tree_node_structure (&%h)\"),\n   struct ptrmem_cst GTY ((tag (\"TS_CP_PTRMEM\"))) ptrmem;\n   struct tree_overload GTY ((tag (\"TS_CP_OVERLOAD\"))) overload;\n   struct tree_baselink GTY ((tag (\"TS_CP_BASELINK\"))) baselink;\n+  struct tree_template_decl GTY ((tag (\"TS_CP_TEMPLATE_DECL\"))) template_decl;\n   struct tree_default_arg GTY ((tag (\"TS_CP_DEFAULT_ARG\"))) default_arg;\n   struct tree_deferred_noexcept GTY ((tag (\"TS_CP_DEFERRED_NOEXCEPT\"))) deferred_noexcept;\n   struct lang_identifier GTY ((tag (\"TS_CP_IDENTIFIER\"))) identifier;\n@@ -3753,16 +3761,22 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n    parameter).  The TREE_PURPOSE is the default value, if any.  The\n    TEMPLATE_PARM_INDEX for the parameter is available as the\n    DECL_INITIAL (for a PARM_DECL) or as the TREE_TYPE (for a\n-   TYPE_DECL).  */\n+   TYPE_DECL). \n+\n+   FIXME: CONST_CAST_TREE is a hack that hopefully will go away after\n+   tree is converted to C++ class hiearchy.  */\n #define DECL_TEMPLATE_PARMS(NODE)       \\\n-  TEMPLATE_DECL_CHECK (NODE)->decl_non_common.arguments\n+   ((struct tree_template_decl *)CONST_CAST_TREE (TEMPLATE_DECL_CHECK (NODE)))->arguments\n #define DECL_INNERMOST_TEMPLATE_PARMS(NODE) \\\n    INNERMOST_TEMPLATE_PARMS (DECL_TEMPLATE_PARMS (NODE))\n #define DECL_NTPARMS(NODE) \\\n    TREE_VEC_LENGTH (DECL_INNERMOST_TEMPLATE_PARMS (NODE))\n-/* For function, method, class-data templates.  */\n+/* For function, method, class-data templates.\n+\n+   FIXME: CONST_CAST_TREE is a hack that hopefully will go away after\n+   tree is converted to C++ class hiearchy.  */\n #define DECL_TEMPLATE_RESULT(NODE)      \\\n-  DECL_RESULT_FLD (TEMPLATE_DECL_CHECK (NODE))\n+   ((struct tree_template_decl *)CONST_CAST_TREE(TEMPLATE_DECL_CHECK (NODE)))->result\n /* For a function template at namespace scope, DECL_TEMPLATE_INSTANTIATIONS\n    lists all instantiations and specializations of the function so that\n    tsubst_friend_function can reassign them to another template if we find"}, {"sha": "87249a034a68f54e1f54260e9c842f0d60fe7da8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ad115a3c32ab0af89b575221f3a8212652a7f948", "patch": "@@ -14482,6 +14482,7 @@ cp_tree_node_structure (union lang_tree_node * t)\n     case TEMPLATE_PARM_INDEX:\treturn TS_CP_TPI;\n     case PTRMEM_CST:\t\treturn TS_CP_PTRMEM;\n     case BASELINK:\t\treturn TS_CP_BASELINK;\n+    case TEMPLATE_DECL:\t\treturn TS_CP_TEMPLATE_DECL;\n     case STATIC_ASSERT:\t\treturn TS_CP_STATIC_ASSERT;\n     case ARGUMENT_PACK_SELECT:  return TS_CP_ARGUMENT_PACK_SELECT;\n     case TRAIT_EXPR:\t\treturn TS_CP_TRAIT_EXPR;"}, {"sha": "8fd21ea828f73c332c2404a512569e95c555cbc8", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=ad115a3c32ab0af89b575221f3a8212652a7f948", "patch": "@@ -1,3 +1,10 @@\n+2014-07-14  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* lto.c (mentions_vars_p_decl_non_common): Skip\n+\tDECL_ARGUMENT_FLD.\n+\tmentions_vars_p_function): Do DECL_ARGUMENTS.\n+\t(lto_fixup_prevailing_decls): Update.\n+\n 2014-07-12  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* lto.c (read_cgraph_and_symbols): Do not push DECL_INIT_IO"}, {"sha": "5056915529feade9cb5b00cbfeb7cf842aaef1d5", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=ad115a3c32ab0af89b575221f3a8212652a7f948", "patch": "@@ -775,7 +775,6 @@ mentions_vars_p_decl_non_common (tree t)\n {\n   if (mentions_vars_p_decl_with_vis (t))\n     return true;\n-  CHECK_NO_VAR (DECL_ARGUMENT_FLD (t));\n   CHECK_NO_VAR (DECL_RESULT_FLD (t));\n   return false;\n }\n@@ -787,6 +786,7 @@ mentions_vars_p_function (tree t)\n {\n   if (mentions_vars_p_decl_non_common (t))\n     return true;\n+  CHECK_NO_VAR (DECL_ARGUMENTS (t));\n   CHECK_NO_VAR (DECL_VINDEX (t));\n   CHECK_VAR (DECL_FUNCTION_PERSONALITY (t));\n   return false;\n@@ -2711,11 +2711,11 @@ lto_fixup_prevailing_decls (tree t)\n \t}\n       if (CODE_CONTAINS_STRUCT (code, TS_DECL_NON_COMMON))\n \t{\n-\t  LTO_NO_PREVAIL (DECL_ARGUMENT_FLD (t));\n \t  LTO_NO_PREVAIL (DECL_RESULT_FLD (t));\n \t}\n       if (CODE_CONTAINS_STRUCT (code, TS_FUNCTION_DECL))\n \t{\n+\t  LTO_NO_PREVAIL (DECL_ARGUMENTS (t));\n \t  LTO_SET_PREVAIL (DECL_FUNCTION_PERSONALITY (t));\n \t  LTO_NO_PREVAIL (DECL_VINDEX (t));\n \t}"}, {"sha": "b9b1fdc5a9b29f6d4d8c8284f81c0a074ad0a5ac", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=ad115a3c32ab0af89b575221f3a8212652a7f948", "patch": "@@ -1,3 +1,21 @@\n+2014-07-14  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* objc-act.c (objc_common_tree_size): New function.\n+\t* objc-act.h (KEYWORD_KEY_NAME, KEYWORD_ARG_NAME): Add type\n+\tchecking.\n+\t(INSTANCE_METHOD_OR_CLASS_METHOD_DECL_CHECK): New macro.\n+\t(METHOD_SEL_NAME, METHOD_SEL_ARGS, METHOD_ADD_ARGS,\n+ \tMETHOD_ADD_ARGS_ELLIPSIS_P, METHOD_DEFINITION, METHOD_ENCODING,\n+\tMETHOD_TYPE_ATTRIBUTES, METHOD_PROPERTY_CONTEXT): Add type checking.\n+\t(METHOD_SEL_ARGS): Use decl_common.size instead of\n+\tdecl_non_common.result.\n+\t(PROPERTY_NAME, PROPERTY_GETTER_NAME, PROPERTY_SETTER_NAME,\n+\tPROPERTY_READONLY, PROPERTY_NONATOMIC, PROPERTY_ASSIGN_SEMANTICS,\n+\tPROPERTY_IVAR_NAME, PROPERTY_DYNAMIC, PROPERTY_HAS_NO_GETTER,\n+\tPROPERTY_HAS_NO_SETTER, PROPERTY_OPTIONAL): Add type checking.\n+\t(objc_common_tree_size): Declare.\n+\t* objc-lang.c (LANG_HOOKS_TREE_SIZE): New macro.\n+\n 2014-06-24  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* objc-act.c (objc_xref_basetypes): Set TYPE_BINFO of type variants,"}, {"sha": "16a015b97bd4ba5bded5b538f5d24f50af874321", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=ad115a3c32ab0af89b575221f3a8212652a7f948", "patch": "@@ -10115,4 +10115,21 @@ objc_common_init_ts (void)\n   MARK_TS_TYPED (PROPERTY_REF);\n }\n \n+size_t\n+objc_common_tree_size (enum tree_code code)\n+{\n+  switch (code)\n+    {\n+    case CLASS_METHOD_DECL:\n+    case INSTANCE_METHOD_DECL:\n+    case KEYWORD_DECL:\n+    case PROPERTY_DECL:\n+      return sizeof (struct tree_decl_non_common);\n+    default:\n+      gcc_unreachable ();\n+  \n+    }\n+}\n+\n+\n #include \"gt-objc-objc-act.h\""}, {"sha": "cb01e1ac87ce0062c5a84d47d621b1cb40f535ec", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 46, "deletions": 21, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=ad115a3c32ab0af89b575221f3a8212652a7f948", "patch": "@@ -38,18 +38,29 @@ void objc_common_init_ts (void);\n #define OBJC_INFO_SLOT_ELTS\t\t2\n \n /* KEYWORD_DECL */\n-#define KEYWORD_KEY_NAME(DECL) ((DECL)->decl_minimal.name)\n-#define KEYWORD_ARG_NAME(DECL) ((DECL)->decl_non_common.arguments)\n+#define KEYWORD_KEY_NAME(DECL) (KEYWORD_DECL_CHECK (DECL)->decl_minimal.name)\n+#define KEYWORD_ARG_NAME(DECL) (KEYWORD_DECL_CHECK (DECL)->decl_common.size)\n+\n+#define INSTANCE_METHOD_OR_CLASS_METHOD_DECL_CHECK(NODE) \\\n+  TREE_CHECK2(NODE,INSTANCE_METHOD_DECL,CLASS_METHOD_DECL)\n \n /* INSTANCE_METHOD_DECL, CLASS_METHOD_DECL */\n-#define METHOD_SEL_NAME(DECL) ((DECL)->decl_minimal.name)\n-#define METHOD_SEL_ARGS(DECL) ((DECL)->decl_non_common.arguments)\n-#define METHOD_ADD_ARGS(DECL) ((DECL)->decl_non_common.result)\n-#define METHOD_ADD_ARGS_ELLIPSIS_P(DECL) ((DECL)->decl_common.lang_flag_0)\n-#define METHOD_DEFINITION(DECL) ((DECL)->decl_common.initial)\n-#define METHOD_ENCODING(DECL) ((DECL)->decl_minimal.context)\n-#define METHOD_TYPE_ATTRIBUTES(DECL) ((DECL)->decl_common.abstract_origin)\n-#define METHOD_PROPERTY_CONTEXT(DECL) ((DECL)->decl_common.size_unit)\n+#define METHOD_SEL_NAME(DECL) \\\n+  (INSTANCE_METHOD_OR_CLASS_METHOD_DECL_CHECK (DECL)->decl_minimal.name)\n+#define METHOD_SEL_ARGS(DECL) \\\n+  (INSTANCE_METHOD_OR_CLASS_METHOD_DECL_CHECK (DECL)->decl_common.size)\n+#define METHOD_ADD_ARGS(DECL) \\\n+  (INSTANCE_METHOD_OR_CLASS_METHOD_DECL_CHECK (DECL)->decl_non_common.result)\n+#define METHOD_ADD_ARGS_ELLIPSIS_P(DECL) \\\n+  (INSTANCE_METHOD_OR_CLASS_METHOD_DECL_CHECK (DECL)->decl_common.lang_flag_0)\n+#define METHOD_DEFINITION(DECL) \\\n+  (INSTANCE_METHOD_OR_CLASS_METHOD_DECL_CHECK (DECL)->decl_common.initial)\n+#define METHOD_ENCODING(DECL) \\\n+  (INSTANCE_METHOD_OR_CLASS_METHOD_DECL_CHECK (DECL)->decl_minimal.context)\n+#define METHOD_TYPE_ATTRIBUTES(DECL) \\\n+  (INSTANCE_METHOD_OR_CLASS_METHOD_DECL_CHECK (DECL)->decl_common.abstract_origin)\n+#define METHOD_PROPERTY_CONTEXT(DECL) \\\n+  (INSTANCE_METHOD_OR_CLASS_METHOD_DECL_CHECK (DECL)->decl_common.size_unit)\n \n \n /* PROPERTY_DECL.  A PROPERTY_DECL repesents a @property declaration\n@@ -65,19 +76,24 @@ void objc_common_init_ts (void);\n    valid getter/setter.  */\n \n /* PROPERTY_NAME is the name of the property.  */\n-#define PROPERTY_NAME(DECL) DECL_NAME(DECL)\n+#define PROPERTY_NAME(DECL) \\\n+   DECL_NAME(PROPERTY_DECL_CHECK (DECL))\n \n /* PROPERTY_GETTER_NAME is the identifier of the getter method.  */\n-#define PROPERTY_GETTER_NAME(DECL) ((DECL)->decl_non_common.arguments)\n+#define PROPERTY_GETTER_NAME(DECL)\\\n+   (PROPERTY_DECL_CHECK (DECL)->decl_common.size)\n \n /* PROPERTY_SETTER_NAME is the identifier of the setter method.  */\n-#define PROPERTY_SETTER_NAME(DECL) ((DECL)->decl_non_common.result)\n+#define PROPERTY_SETTER_NAME(DECL) \\\n+   (PROPERTY_DECL_CHECK (DECL)->decl_non_common.result)\n \n /* PROPERTY_READONLY can be 0 or 1.  */\n-#define PROPERTY_READONLY(DECL) DECL_LANG_FLAG_0 (DECL)\n+#define PROPERTY_READONLY(DECL) \\\n+   DECL_LANG_FLAG_0 (PROPERTY_DECL_CHECK (DECL))\n \n /* PROPERTY_NONATOMIC can be 0 or 1.  */\n-#define PROPERTY_NONATOMIC(DECL) DECL_LANG_FLAG_1 (DECL)\n+#define PROPERTY_NONATOMIC(DECL) \\\n+   DECL_LANG_FLAG_1 (PROPERTY_DECL_CHECK (DECL))\n \n typedef enum objc_property_assign_semantics {\n   OBJC_PROPERTY_ASSIGN = 1,\n@@ -89,31 +105,37 @@ typedef enum objc_property_assign_semantics {\n    OBJC_PROPERTY_RETAIN or OBJC_PROPERTY_COPY.  We need an integer to\n    store it, so we hijack the alignment, that properties don't\n    have.  */\n-#define PROPERTY_ASSIGN_SEMANTICS(DECL) ((DECL)->decl_common.align)\n+#define PROPERTY_ASSIGN_SEMANTICS(DECL) \\\n+   (PROPERTY_DECL_CHECK (DECL)->decl_common.align)\n \n /* PROPERTY_IVAR_NAME is the identifier of the instance variable.\n    This is set only if the PROPERTY_DECL represents a @synthesize;\n    otherwise, it is set to TREE_NULL.  */\n-#define PROPERTY_IVAR_NAME(DECL) ((DECL)->decl_common.initial)\n+#define PROPERTY_IVAR_NAME(DECL) \\\n+  (PROPERTY_DECL_CHECK (DECL)->decl_common.initial)\n \n /* PROPERTY_DYNAMIC can be 0 or 1.  This is 1 if the PROPERTY_DECL\n    represents a @dynamic; otherwise, it is set to 0.  */\n-#define PROPERTY_DYNAMIC(DECL) DECL_LANG_FLAG_2 (DECL)\n+#define PROPERTY_DYNAMIC(DECL) \\\n+  DECL_LANG_FLAG_2 (PROPERTY_DECL_CHECK (DECL))\n \n /* PROPERTY_HAS_NO_GETTER can be 0 or 1.  Normally it is 0, but if\n    this is an artificial PROPERTY_DECL that we generate even without a\n    getter, it is set to 1.  */\n-#define PROPERTY_HAS_NO_GETTER(DECL) DECL_LANG_FLAG_3 (DECL)\n+#define PROPERTY_HAS_NO_GETTER(DECL) \\\n+  DECL_LANG_FLAG_3 (PROPERTY_DECL_CHECK (DECL))\n \n /* PROPERTY_HAS_NO_SETTER can be 0 or 1.  Normally it is 0, but if\n    this is an artificial PROPERTY_DECL that we generate even without a\n    setter, it is set to 1.  */\n-#define PROPERTY_HAS_NO_SETTER(DECL) DECL_LANG_FLAG_4 (DECL)\n+#define PROPERTY_HAS_NO_SETTER(DECL) \\\n+  DECL_LANG_FLAG_4 (PROPERTY_DECL_CHECK (DECL))\n \n /* PROPERTY_OPTIONAL can be 0 or 1.  Normally it is 0, but if this is\n    a property declared as @optional in a @protocol, then it is set to\n    1.  */\n-#define PROPERTY_OPTIONAL(DECL) DECL_LANG_FLAG_5 (DECL)\n+#define PROPERTY_OPTIONAL(DECL) \\\n+  DECL_LANG_FLAG_5 (PROPERTY_DECL_CHECK (DECL))\n \n /* PROPERTY_REF.  A PROPERTY_REF represents an 'object.property'\n    expression.  It is normally used for property access, but when\n@@ -693,6 +715,9 @@ struct objc_try_context\n \n extern tree objc_create_temporary_var (tree, const char *);\n \n+size_t objc_common_tree_size (enum tree_code code);\n+\n+\n #define objc_is_object_id(TYPE) (OBJC_TYPE_NAME (TYPE) == objc_object_id)\n #define objc_is_class_id(TYPE) (OBJC_TYPE_NAME (TYPE) == objc_class_id)\n "}, {"sha": "ba06f4608e7ba5c2f6cdf4bf5628dfa492ef3931", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=ad115a3c32ab0af89b575221f3a8212652a7f948", "patch": "@@ -49,6 +49,8 @@ enum c_language_kind c_language = clk_objc;\n #define LANG_HOOKS_GIMPLIFY_EXPR objc_gimplify_expr\n #undef LANG_HOOKS_INIT_TS\n #define LANG_HOOKS_INIT_TS objc_common_init_ts\n+#undef LANG_HOOKS_TREE_SIZE\n+#define LANG_HOOKS_TREE_SIZE objc_common_tree_size\n \n /* Each front end provides its own lang hook initializer.  */\n struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;"}, {"sha": "eee0df9afc0b91195e512d78209d7cc65cfdd2a6", "filename": "gcc/print-tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=ad115a3c32ab0af89b575221f3a8212652a7f948", "patch": "@@ -514,7 +514,6 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t}\n       if (CODE_CONTAINS_STRUCT (code, TS_DECL_NON_COMMON))\n \t{\n-\t  print_node (file, \"arguments\", DECL_ARGUMENT_FLD (node), indent + 4);\n \t  print_node (file, \"result\", DECL_RESULT_FLD (node), indent + 4);\n \t}\n \n@@ -540,6 +539,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n       else if (code == FUNCTION_DECL\n \t       && DECL_STRUCT_FUNCTION (node) != 0)\n \t{\n+\t  print_node (file, \"arguments\", DECL_ARGUMENTS (node), indent + 4);\n \t  indent_to (file, indent + 4);\n \t  dump_addr (file, \"struct-function \", DECL_STRUCT_FUNCTION (node));\n \t}"}, {"sha": "34c48fa1c99e462bb30a2944e329e59b4d7ec08d", "filename": "gcc/tree-core.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=ad115a3c32ab0af89b575221f3a8212652a7f948", "patch": "@@ -1494,8 +1494,6 @@ struct GTY(()) tree_var_decl {\n \n struct GTY(()) tree_decl_non_common {\n   struct tree_decl_with_vis common;\n-  /* C++ uses this in templates.  */\n-  tree arguments;\n   /* Almost all FE's use this.  */\n   tree result;\n };\n@@ -1510,6 +1508,8 @@ struct GTY(()) tree_function_decl {\n \n   struct function *f;\n \n+  /* Arguments of the function.  */\n+  tree arguments;\n   /* The personality function. Used for stack unwinding. */\n   tree personality;\n "}, {"sha": "10063a4b5b6ab9edc3c94d3785c517e5c5a3a92f", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ad115a3c32ab0af89b575221f3a8212652a7f948", "patch": "@@ -707,8 +707,14 @@ tree_code_size (enum tree_code code)\n \t    return sizeof (struct tree_function_decl);\n \t  case DEBUG_EXPR_DECL:\n \t    return sizeof (struct tree_decl_with_rtl);\n-\t  default:\n+\t  case TRANSLATION_UNIT_DECL:\n+\t    return sizeof (struct tree_translation_unit_decl);\n+\t  case NAMESPACE_DECL:\n+\t  case IMPORTED_DECL:\n+\t  case NAMELIST_DECL:\n \t    return sizeof (struct tree_decl_non_common);\n+\t  default:\n+\t    return lang_hooks.tree_size (code);\n \t  }\n       }\n \n@@ -5304,7 +5310,6 @@ find_decls_types_r (tree *tp, int *ws, void *data)\n \t}\n       else if (TREE_CODE (t) == TYPE_DECL)\n \t{\n-\t  fld_worklist_push (DECL_ARGUMENT_FLD (t), fld);\n \t  fld_worklist_push (DECL_ORIGINAL_TYPE (t), fld);\n \t}\n       else if (TREE_CODE (t) == FIELD_DECL)"}, {"sha": "0b98de8b1e0f81616251759527fdaf1cf9edab4f", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad115a3c32ab0af89b575221f3a8212652a7f948/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ad115a3c32ab0af89b575221f3a8212652a7f948", "patch": "@@ -2621,13 +2621,9 @@ extern vec<tree, va_gc> **decl_debug_args_insert (tree);\n #define DECL_BUILT_IN_CLASS(NODE) \\\n    (FUNCTION_DECL_CHECK (NODE)->function_decl.built_in_class)\n \n-/* In FUNCTION_DECL, a chain of ..._DECL nodes.\n-   VAR_DECL and PARM_DECL reserve the arguments slot for language-specific\n-   uses.  */\n+/* In FUNCTION_DECL, a chain of ..._DECL nodes.  */\n #define DECL_ARGUMENTS(NODE) \\\n-  (FUNCTION_DECL_CHECK (NODE)->decl_non_common.arguments)\n-#define DECL_ARGUMENT_FLD(NODE) \\\n-  (DECL_NON_COMMON_CHECK (NODE)->decl_non_common.arguments)\n+   (FUNCTION_DECL_CHECK (NODE)->function_decl.arguments)\n \n /* In FUNCTION_DECL, the function specific target options to use when compiling\n    this function.  */"}]}