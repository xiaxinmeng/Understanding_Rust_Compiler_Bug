{"sha": "5008b8ae9572a1f7dc96f9efb378d97144d4e681", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAwOGI4YWU5NTcyYTFmN2RjOTZmOWVmYjM3OGQ5NzE0NGQ0ZTY4MQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-31T05:50:11Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-31T05:50:11Z"}, "message": "(real_value_truncate): If REAL_ARITHMETIC, replace by routine of same name in real.c.\n\n(real_value_truncate): If REAL_ARITHMETIC, replace\nby routine of same name in real.c.\ntarget_isinf, target_isnan, target_negative): Likewise.\n(const_binop): Delete `register' from decls using REAL_VALUE_TYPE.\n(fold_convert): Use REAL_VALUE_TO_INT.\n\nFrom-SVN: r3939", "tree": {"sha": "5fe6d2d6518ea1f1128a76ab3826eccf00af994a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fe6d2d6518ea1f1128a76ab3826eccf00af994a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5008b8ae9572a1f7dc96f9efb378d97144d4e681", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5008b8ae9572a1f7dc96f9efb378d97144d4e681", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5008b8ae9572a1f7dc96f9efb378d97144d4e681", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5008b8ae9572a1f7dc96f9efb378d97144d4e681/comments", "author": null, "committer": null, "parents": [{"sha": "1632afcaa70e64821d35b406d75a6a364ae692e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1632afcaa70e64821d35b406d75a6a364ae692e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1632afcaa70e64821d35b406d75a6a364ae692e0"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "bc23a4ed1cbf7fdf9b531542ef29fa5b7bc68667", "filename": "gcc/fold-const.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5008b8ae9572a1f7dc96f9efb378d97144d4e681/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5008b8ae9572a1f7dc96f9efb378d97144d4e681/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=5008b8ae9572a1f7dc96f9efb378d97144d4e681", "patch": "@@ -774,6 +774,7 @@ div_and_round_double (code, uns,\n   return overflow;\n }\n \f\n+#ifndef REAL_ARITHMETIC\n /* Effectively truncate a real value to represent\n    the nearest possible value in a narrower mode.\n    The result is actually represented in the same data type as the argument,\n@@ -950,6 +951,7 @@ target_negative (x)\n   return x < 0;\n }\n #endif /* Target not IEEE */\n+#endif /* no REAL_ARITHMETIC */\n \f\n /* Split a tree IN into a constant and a variable part\n    that could be combined with CODE to make IN.\n@@ -1300,9 +1302,9 @@ const_binop (code, arg1, arg2, notrunc)\n #if ! defined (REAL_IS_NOT_DOUBLE) || defined (REAL_ARITHMETIC)\n   if (TREE_CODE (arg1) == REAL_CST)\n     {\n-      register REAL_VALUE_TYPE d1;\n-      register REAL_VALUE_TYPE d2;\n-      register REAL_VALUE_TYPE value;\n+      REAL_VALUE_TYPE d1;\n+      REAL_VALUE_TYPE d2;\n+      REAL_VALUE_TYPE value;\n       tree t;\n \n       d1 = TREE_REAL_CST (arg1);\n@@ -1524,10 +1526,12 @@ fold_convert (t, arg1)\n #if !defined (REAL_IS_NOT_DOUBLE) || defined (REAL_ARITHMETIC)\n       else if (TREE_CODE (arg1) == REAL_CST)\n \t{\n-\t  REAL_VALUE_TYPE\n-\t    l = real_value_from_int_cst (TYPE_MIN_VALUE (type)),\n-\t    x = TREE_REAL_CST (arg1),\n-\t    u = real_value_from_int_cst (TYPE_MAX_VALUE (type));\n+\t  REAL_VALUE_TYPE l, x, u;\n+\n+\t  l = real_value_from_int_cst (TYPE_MIN_VALUE (type));\n+\t  x = TREE_REAL_CST (arg1);\n+\t  u = real_value_from_int_cst (TYPE_MAX_VALUE (type));\n+\n \t  /* See if X will be in range after truncation towards 0.\n \t     To compensate for truncation, move the bounds away from 0,\n \t     but reject if X exactly equals the adjusted bounds.  */\n@@ -1570,7 +1574,7 @@ fold_convert (t, arg1)\n #else\n \t  {\n \t    HOST_WIDE_INT low, high;\n-\t    REAL_VALUE_TO_INT (low, high, TREE_REAL_CST (arg1));\n+\t    REAL_VALUE_TO_INT (&low, &high, (TREE_REAL_CST (arg1)));\n \t    t = build_int_2 (low, high);\n \t  }\n #endif"}]}