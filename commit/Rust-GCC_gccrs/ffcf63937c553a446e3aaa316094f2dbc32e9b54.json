{"sha": "ffcf63937c553a446e3aaa316094f2dbc32e9b54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZjZjYzOTM3YzU1M2E0NDZlM2FhYTMxNjA5NGYyZGJjMzJlOWI1NA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-14T23:16:31Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-14T23:16:31Z"}, "message": "(invalidate_skipped_set): Promote \"nonscalar\" to \"all\".\n\nFrom-SVN: r4679", "tree": {"sha": "1a2843348a2b89a3ee2c9977b7535b0e7a2026b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a2843348a2b89a3ee2c9977b7535b0e7a2026b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffcf63937c553a446e3aaa316094f2dbc32e9b54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffcf63937c553a446e3aaa316094f2dbc32e9b54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffcf63937c553a446e3aaa316094f2dbc32e9b54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffcf63937c553a446e3aaa316094f2dbc32e9b54/comments", "author": null, "committer": null, "parents": [{"sha": "315198ab9d659c8326e0a449aaa910ee2de6bece", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/315198ab9d659c8326e0a449aaa910ee2de6bece", "html_url": "https://github.com/Rust-GCC/gccrs/commit/315198ab9d659c8326e0a449aaa910ee2de6bece"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "d616217d21249eefec6a71e991caa524cd6cf6ae", "filename": "gcc/cse.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffcf63937c553a446e3aaa316094f2dbc32e9b54/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffcf63937c553a446e3aaa316094f2dbc32e9b54/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=ffcf63937c553a446e3aaa316094f2dbc32e9b54", "patch": "@@ -7323,6 +7323,12 @@ invalidate_skipped_set (dest, set)\n   if (GET_CODE (dest) == MEM)\n     note_mem_written (dest, &skipped_writes_memory);\n \n+  /* There are times when an address can appear varying and be a PLUS\n+     during this scan when it would be a fixed address were we to know\n+     the proper equivalences.  So promote \"nonscalar\" to be \"all\".  */\n+  if (skipped_writes_memory.nonscalar)\n+    skipped_writes_memory.all = 1;\n+\n   if (GET_CODE (dest) == REG || GET_CODE (dest) == SUBREG\n       || (! skipped_writes_memory.all && ! cse_rtx_addr_varies_p (dest)))\n     invalidate (dest);"}]}