{"sha": "d2ed233cb940aa3eecc163d98b47979dd81dbc0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJlZDIzM2NiOTQwYWEzZWVjYzE2M2Q5OGI0Nzk3OWRkODFkYmMwYQ==", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2020-05-26T16:47:13Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2020-07-10T11:20:34Z"}, "message": "arm: Implement Armv8.1-M low overhead loops\n\ngcc/ChangeLog\n\n2020-06-18  Andrea Corallo  <andrea.corallo@arm.com>\n\t    Mihail-Calin Ionescu  <mihail.ionescu@arm.com>\n\t    Iain Apreotesei  <iain.apreotesei@arm.com>\n\n\t* config/arm/arm-protos.h (arm_target_insn_ok_for_lob): New\n\tprototype.\n\t* config/arm/arm.c (TARGET_INVALID_WITHIN_DOLOOP): Define.\n\t(arm_invalid_within_doloop): Implement invalid_within_doloop hook.\n\t(arm_target_insn_ok_for_lob): New function.\n\t* config/arm/arm.h (TARGET_HAVE_LOB): Define macro.\n\t* config/arm/thumb2.md (*doloop_end_internal, doloop_begin)\n\t(dls_insn): Add new patterns.\n\t(doloop_end): Modify to select LR when LOB is available.\n\t* config/arm/unspecs.md: Add new unspec.\n\t* doc/sourcebuild.texi (arm_v8_1_lob_ok)\n\t(arm_thumb2_ok_no_arm_v8_1_lob): Document new target supports\n\toptions.\n\ngcc/testsuite/ChangeLog\n\n2020-06-18  Andrea Corallo  <andrea.corallo@arm.com>\n\t    Mihail-Calin Ionescu  <mihail.ionescu@arm.com>\n\t    Iain Apreotesei  <iain.apreotesei@arm.com>\n\n\t* gcc.target/arm/lob.h: New header.\n\t* gcc.target/arm/lob1.c: New testcase.\n\t* gcc.target/arm/lob2.c: Likewise.\n\t* gcc.target/arm/lob3.c: Likewise.\n\t* gcc.target/arm/lob4.c: Likewise.\n\t* gcc.target/arm/lob5.c: Likewise.\n\t* gcc.target/arm/lob6.c: Likewise.\n\t* gcc.target/arm/unsigned-extend-2.c: Do not run when generating\n\tlow loop overhead.\n\t* gcc.target/arm/ivopts.c: Fix check for low loop overhead.\n\t* lib/target-supports.exp (check_effective_target_arm_v8_1_lob)\n\t(check_effective_target_arm_thumb2_ok_no_arm_v8_1_lob): New procs.", "tree": {"sha": "f24fa6e52fba1ed1cd9312fe5d569c5896b0eb67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f24fa6e52fba1ed1cd9312fe5d569c5896b0eb67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2ed233cb940aa3eecc163d98b47979dd81dbc0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2ed233cb940aa3eecc163d98b47979dd81dbc0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2ed233cb940aa3eecc163d98b47979dd81dbc0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4fc6a3e0a209e01d0f223ca9987f93083f89882", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4fc6a3e0a209e01d0f223ca9987f93083f89882", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4fc6a3e0a209e01d0f223ca9987f93083f89882"}], "stats": {"total": 465, "additions": 459, "deletions": 6}, "files": [{"sha": "d52e8bfd37c11d3ba4dbfba9d098b007f442813d", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=d2ed233cb940aa3eecc163d98b47979dd81dbc0a", "patch": "@@ -62,6 +62,7 @@ extern void arm_emit_speculation_barrier_function (void);\n extern void arm_decompose_di_binop (rtx, rtx, rtx *, rtx *, rtx *, rtx *);\n extern bool arm_q_bit_access (void);\n extern bool arm_ge_bits_access (void);\n+extern bool arm_target_insn_ok_for_lob (rtx);\n \n #ifdef RTX_CODE\n enum reg_class"}, {"sha": "ea0ac01e68c1f81a78d8d3cf86e8dc20b16c0895", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=d2ed233cb940aa3eecc163d98b47979dd81dbc0a", "patch": "@@ -833,6 +833,9 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef TARGET_CONSTANT_ALIGNMENT\n #define TARGET_CONSTANT_ALIGNMENT arm_constant_alignment\n \n+#undef TARGET_INVALID_WITHIN_DOLOOP\n+#define TARGET_INVALID_WITHIN_DOLOOP arm_invalid_within_doloop\n+\n #undef TARGET_MD_ASM_ADJUST\n #define TARGET_MD_ASM_ADJUST arm_md_asm_adjust\n \f\n@@ -33308,6 +33311,40 @@ arm_ge_bits_access (void)\n   return true;\n }\n \n+/* NULL if insn INSN is valid within a low-overhead loop.\n+   Otherwise return why doloop cannot be applied.  */\n+\n+static const char *\n+arm_invalid_within_doloop (const rtx_insn *insn)\n+{\n+  if (!TARGET_HAVE_LOB)\n+    return default_invalid_within_doloop (insn);\n+\n+  if (CALL_P (insn))\n+    return \"Function call in the loop.\";\n+\n+  if (reg_mentioned_p (gen_rtx_REG (SImode, LR_REGNUM), insn))\n+    return \"LR is used inside loop.\";\n+\n+  return NULL;\n+}\n+\n+bool\n+arm_target_insn_ok_for_lob (rtx insn)\n+{\n+  basic_block bb = BLOCK_FOR_INSN (insn);\n+  /* Make sure the basic block of the target insn is a simple latch\n+     having as single predecessor and successor the body of the loop\n+     itself.  Only simple loops with a single basic block as body are\n+     supported for 'low over head loop' making sure that LE target is\n+     above LE itself in the generated code.  */\n+\n+  return single_succ_p (bb)\n+    && single_pred_p (bb)\n+    && single_succ_edge (bb)->dest == single_pred_edge (bb)->src\n+    && contains_no_active_insn_p (bb);\n+}\n+\n #if CHECKING_P\n namespace selftest {\n "}, {"sha": "3887c51eebecd79968cc48e14af3769c93d9a6c6", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=d2ed233cb940aa3eecc163d98b47979dd81dbc0a", "patch": "@@ -621,6 +621,9 @@ extern const int arm_arch_cde_coproc_bits[];\n \f\n /* Target machine storage Layout.  */\n \n+/* Nonzero if this chip provides Armv8.1-M Mainline\n+   LOB (low overhead branch features) extension instructions.  */\n+#define TARGET_HAVE_LOB (arm_arch8_1m_main)\n \n /* Define this macro if it is advisable to hold scalars in registers\n    in a wider mode than that declared by the program.  In such cases,"}, {"sha": "1a5f24e5276fd672e87d724b2adf12b93c3d3ca1", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=d2ed233cb940aa3eecc163d98b47979dd81dbc0a", "patch": "@@ -1555,8 +1555,11 @@\n       using a certain 'count' register and (2) the loop count can be\n       adjusted by modifying this register prior to the loop.\n       ??? The possible introduction of a new block to initialize the\n-      new IV can potentially affect branch optimizations.  */\n-   if (optimize > 0 && flag_modulo_sched)\n+      new IV can potentially affect branch optimizations.\n+\n+      Also used to implement the low over head loops feature, which is part of\n+      the Armv8.1-M Mainline Low Overhead Branch (LOB) extension.  */\n+   if (optimize > 0 && (flag_modulo_sched || TARGET_HAVE_LOB))\n    {\n      rtx s0;\n      rtx bcomp;\n@@ -1569,6 +1572,11 @@\n        FAIL;\n \n      s0 = operands [0];\n+\n+     /* Low over head loop instructions require the first operand to be LR.  */\n+     if (TARGET_HAVE_LOB && arm_target_insn_ok_for_lob (operands [1]))\n+       s0 = gen_rtx_REG (SImode, LR_REGNUM);\n+\n      if (TARGET_THUMB2)\n        insn = emit_insn (gen_thumb2_addsi3_compare0 (s0, s0, GEN_INT (-1)));\n      else\n@@ -1582,8 +1590,9 @@\n                                   gen_rtx_IF_THEN_ELSE (VOIDmode, bcomp,\n                                                         loc_ref, pc_rtx)));\n      DONE;\n-   }else\n-      FAIL;\n+   }\n+ else\n+   FAIL;\n  }\")\n \n (define_insn \"*clear_apsr\"\n@@ -1650,3 +1659,35 @@\n   \"TARGET_HAVE_MVE\"\n   \"lsrl%?\\\\t%Q0, %R0, %1\"\n   [(set_attr \"predicable\" \"yes\")])\n+\n+;; Originally expanded by 'doloop_end'.\n+(define_insn \"*doloop_end_internal\"\n+  [(parallel [(set (pc)\n+                   (if_then_else\n+                       (ne (reg:SI LR_REGNUM) (const_int 1))\n+                     (label_ref (match_operand 0 \"\" \"\"))\n+                     (pc)))\n+              (set (reg:SI LR_REGNUM)\n+                   (plus:SI (reg:SI LR_REGNUM) (const_int -1)))])]\n+  \"TARGET_32BIT && TARGET_HAVE_LOB\"\n+  \"le\\t%|lr, %l0\")\n+\n+(define_expand \"doloop_begin\"\n+  [(match_operand 0 \"\" \"\")\n+   (match_operand 1 \"\" \"\")]\n+  \"TARGET_32BIT && TARGET_HAVE_LOB\"\n+  {\n+    if (REGNO (operands[0]) == LR_REGNUM)\n+      {\n+\temit_insn (gen_dls_insn (operands[0]));\n+\tDONE;\n+      }\n+    else\n+      FAIL;\n+  })\n+\n+(define_insn \"dls_insn\"\n+  [(set (reg:SI LR_REGNUM)\n+        (unspec:SI [(match_operand:SI 0 \"s_register_operand\" \"r\")] UNSPEC_DLS))]\n+  \"TARGET_32BIT && TARGET_HAVE_LOB\"\n+  \"dls\\t%|lr, %0\")"}, {"sha": "0a2399d4fb7bdef6c9ff2b31a743cf357fd271d5", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=d2ed233cb940aa3eecc163d98b47979dd81dbc0a", "patch": "@@ -158,6 +158,7 @@\n   UNSPEC_CDEA\t\t; Custom Datapath Extension instruction.\n   UNSPEC_VCDE\t\t; Custom Datapath Extension instruction.\n   UNSPEC_VCDEA\t\t; Custom Datapath Extension instruction.\n+  UNSPEC_DLS\t\t; Used for DLS (Do Loop Start), Armv8.1-M Mainline instruction\n ])\n \n "}, {"sha": "9f37ac2624137021670414002c0e287e08e32f90", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=d2ed233cb940aa3eecc163d98b47979dd81dbc0a", "patch": "@@ -2009,6 +2009,17 @@ ARM target supports the @code{-mfloat-abi=softfp} option.\n @anchor{arm_hard_ok}\n ARM target supports the @code{-mfloat-abi=hard} option.\n \n+@item arm_v8_1_lob_ok\n+@anchor{arm_v8_1_lob_ok}\n+ARM Target supports executing the Armv8.1-M Mainline Low Overhead Loop\n+instructions @code{DLS} and @code{LE}.\n+Some multilibs may be incompatible with these options.\n+\n+@item arm_thumb2_ok_no_arm_v8_1_lob\n+ARM target generates Thumb-2 code for @code{-mthumb} but does not\n+support executing the Armv8.1-M Mainline Low Overhead Loop\n+instructions @code{DLS} and @code{LE}.\n+\n @end table\n \n @subsubsection AArch64-specific attributes"}, {"sha": "2733e66988eac1ce7213e1bd0e0ea8c9f824709a", "filename": "gcc/testsuite/gcc.target/arm/ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fivopts.c?ref=d2ed233cb940aa3eecc163d98b47979dd81dbc0a", "patch": "@@ -11,6 +11,6 @@ tr5 (short array[], int n)\n }\n \n /* { dg-final { scan-tree-dump-times \"PHI <\" 1 \"ivopts\"} } */\n-/* { dg-final { object-size text <= 20 { target arm_thumb2 } } } */\n+/* { dg-final { object-size text <= 20 { target { arm_thumb2_ok_no_arm_v8_1_lob } } } } */\n /* { dg-final { object-size text <= 32 { target { arm_nothumb && { ! arm_iwmmxt_ok } } } } } */\n /* { dg-final { object-size text <= 36 { target { arm_nothumb && arm_iwmmxt_ok }  } } } */"}, {"sha": "feaae7cc89959b3147368980120700bbc3e85ecb", "filename": "gcc/testsuite/gcc.target/arm/lob.h", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flob.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flob.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flob.h?ref=d2ed233cb940aa3eecc163d98b47979dd81dbc0a", "patch": "@@ -0,0 +1,15 @@\n+#include <string.h>\n+\n+/* Common code for lob tests.  */\n+\n+#define NO_LOB asm volatile (\"@ clobber lr\" : : : \"lr\" )\n+\n+#define N 10000\n+\n+static void\n+reset_data (int *a, int *b, int *c)\n+{\n+  memset (a, -1, N * sizeof (*a));\n+  memset (b, -1, N * sizeof (*b));\n+  memset (c, -1, N * sizeof (*c));\n+}"}, {"sha": "b92dc551d50bc8eecd1001f924669145b88301ae", "filename": "gcc/testsuite/gcc.target/arm/lob1.c", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flob1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flob1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flob1.c?ref=d2ed233cb940aa3eecc163d98b47979dd81dbc0a", "patch": "@@ -0,0 +1,85 @@\n+/* Check that GCC generates Armv8.1-M low over head loop instructions\n+   for some simple loops.  */\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_1_lob_ok } */\n+/* { dg-skip-if \"avoid conflicting multilib options\" { *-*-* } { \"-marm\" \"-mcpu=*\" } } */\n+/* { dg-options \"-march=armv8.1-m.main -O3 --save-temps\" } */\n+#include <stdlib.h>\n+#include \"lob.h\"\n+\n+int a[N];\n+int b[N];\n+int c[N];\n+\n+int\n+foo (int a, int b)\n+{\n+  return a + b;\n+}\n+\n+void __attribute__((noinline))\n+loop1 (int *a, int *b, int *c)\n+{\n+  for (int i = 0; i < N; i++)\n+    {\n+      a[i] = i;\n+      b[i] = i * 2;\n+      c[i] = a[i] + b[i];\n+    }\n+}\n+\n+void __attribute__((noinline))\n+loop2 (int *a, int *b, int *c)\n+{\n+  int i = 0;\n+  while (i < N)\n+    {\n+      a[i] = i - 2;\n+      b[i] = i * 5;\n+      c[i] = a[i] + b[i];\n+      i++;\n+    }\n+}\n+\n+void __attribute__((noinline))\n+loop3 (int *a, int *b, int *c)\n+{\n+  int i = 0;\n+  do\n+    {\n+      a[i] = i - 4;\n+      b[i] = i * 3;\n+      c[i] = a[i] + b[i];\n+      i++;\n+    } while (i < N);\n+}\n+\n+void\n+check (int *a, int *b, int *c)\n+{\n+  for (int i = 0; i < N; i++)\n+    {\n+      NO_LOB;\n+      if (c[i] != a[i] + b[i])\n+\tabort ();\n+    }\n+}\n+\n+int\n+main (void)\n+{\n+  reset_data (a, b, c);\n+  loop1 (a, b ,c);\n+  check (a, b ,c);\n+  reset_data (a, b, c);\n+  loop2 (a, b ,c);\n+  check (a, b ,c);\n+  reset_data (a, b, c);\n+  loop3 (a, b ,c);\n+  check (a, b ,c);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times {dls\\s\\S*,\\s\\S*} 3 } } */\n+/* { dg-final { scan-assembler-times {le\\slr,\\s\\S*} 3 } } */"}, {"sha": "1fe9a9d82bb921686ccac4c5ebdbd357697b441d", "filename": "gcc/testsuite/gcc.target/arm/lob2.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flob2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flob2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flob2.c?ref=d2ed233cb940aa3eecc163d98b47979dd81dbc0a", "patch": "@@ -0,0 +1,32 @@\n+/* Check that GCC does not generate Armv8.1-M low over head loop instructions\n+   if a non-inlineable function call takes place inside the loop.  */\n+/* { dg-do compile } */\n+/* { dg-skip-if \"avoid conflicting multilib options\" { *-*-* } { \"-marm\" \"-mcpu=*\" } } */\n+/* { dg-options \"-march=armv8.1-m.main -O3 --save-temps\" } */\n+#include <stdlib.h>\n+#include \"lob.h\"\n+\n+int a[N];\n+int b[N];\n+int c[N];\n+\n+int __attribute__ ((noinline))\n+foo (int a, int b)\n+{\n+  return a + b;\n+}\n+\n+int\n+main (void)\n+{\n+  for (int i = 0; i < N; i++)\n+    {\n+      a[i] = i;\n+      b[i] = i * 2;\n+      c[i] = foo (a[i], b[i]);\n+    }\n+\n+  return 0;\n+}\n+/* { dg-final { scan-assembler-not {dls\\s\\S*,\\s\\S*} } } */\n+/* { dg-final { scan-assembler-not {le\\slr,\\s\\S*} } } */"}, {"sha": "17cba007ccb63ca610f691d694cb9de31314d9dc", "filename": "gcc/testsuite/gcc.target/arm/lob3.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flob3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flob3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flob3.c?ref=d2ed233cb940aa3eecc163d98b47979dd81dbc0a", "patch": "@@ -0,0 +1,27 @@\n+/* Check that GCC does not generate Armv8.1-M low over head loop instructions\n+   if causes VFP emulation library calls to happen inside the loop.  */\n+/* { dg-do compile } */\n+/* { dg-skip-if \"avoid conflicting multilib options\" { *-*-* } { \"-marm\" \"-mcpu=*\" } } */\n+/* { dg-options \"-march=armv8.1-m.main -O3 --save-temps -mfloat-abi=soft\" } */\n+/* { dg-require-effective-target arm_softfloat } */\n+#include <stdlib.h>\n+#include \"lob.h\"\n+\n+double a[N];\n+double b[N];\n+double c[N];\n+\n+int\n+main (void)\n+{\n+  for (int i = 0; i < N; i++)\n+    {\n+      a[i] = i;\n+      b[i] = i * 2;\n+      c[i] = a[i] + b[i];\n+    }\n+\n+  return 0;\n+}\n+/* { dg-final { scan-assembler-not {dls\\s\\S*,\\s\\S*} } } */\n+/* { dg-final { scan-assembler-not {le\\slr,\\s\\S*} } } */"}, {"sha": "444a2c7b4bfd3d19b2743762ea75849c57317e08", "filename": "gcc/testsuite/gcc.target/arm/lob4.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flob4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flob4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flob4.c?ref=d2ed233cb940aa3eecc163d98b47979dd81dbc0a", "patch": "@@ -0,0 +1,34 @@\n+/* Check that GCC does not generate Armv8.1-M low over head loop instructions\n+   if LR is modified within the loop.  */\n+/* { dg-do compile } */\n+/* { dg-skip-if \"avoid conflicting multilib options\" { *-*-* } { \"-marm\" \"-mcpu=*\" } } */\n+/* { dg-options \"-march=armv8.1-m.main -O3 --save-temps -mfloat-abi=soft\" } */\n+/* { dg-require-effective-target arm_softfloat } */\n+#include <stdlib.h>\n+#include \"lob.h\"\n+\n+int a[N];\n+int b[N];\n+int c[N];\n+\n+static __attribute__ ((always_inline)) inline int\n+foo (int a, int b)\n+{\n+  NO_LOB;\n+  return a + b;\n+}\n+\n+int\n+main (void)\n+{\n+  for (int i = 0; i < N; i++)\n+    {\n+      a[i] = i;\n+      b[i] = i * 2;\n+      c[i] = foo(a[i], b[i]);\n+    }\n+\n+  return 0;\n+}\n+/* { dg-final { scan-assembler-not {dls\\s\\S*,\\s\\S*} } } */\n+/* { dg-final { scan-assembler-not {le\\slr,\\s\\S*} } } */"}, {"sha": "c4f46e41532b0ef9fdc9726d8359397daa6769c0", "filename": "gcc/testsuite/gcc.target/arm/lob5.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flob5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flob5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flob5.c?ref=d2ed233cb940aa3eecc163d98b47979dd81dbc0a", "patch": "@@ -0,0 +1,35 @@\n+/* Check that GCC does not generates Armv8.1-M low over head loop\n+   instructions.  Innermost loop has no fixed number of iterations\n+   therefore is not optimizable.  Outer loops are not optimized.  */\n+/* { dg-do compile } */\n+/* { dg-skip-if \"avoid conflicting multilib options\" { *-*-* } { \"-marm\" \"-mcpu=*\" } } */\n+/* { dg-options \"-march=armv8.1-m.main -O3 --save-temps\" } */\n+#include <stdlib.h>\n+#include \"lob.h\"\n+\n+int a[N];\n+int b[N];\n+int c[N];\n+\n+int\n+main (void)\n+{\n+  for (int i = 0; i < N; i++)\n+    {\n+      a[i] = i;\n+      b[i] = i * 2;\n+\n+      int k = b[i];\n+      while (k != 0)\n+\t{\n+\t  if (k % 2 == 0)\n+\t    c[i - 1] = k % 2;\n+\t  k /= 2;\n+\t}\n+      c[i] = a[i] - b[i];\n+    }\n+\n+  return 0;\n+}\n+/* { dg-final { scan-assembler-not {dls\\s\\S*,\\s\\S*} } } */\n+/* { dg-final { scan-assembler-not {le\\slr,\\s\\S*} } } */"}, {"sha": "5612676946056b379e63e0f57471e57ed3f12e19", "filename": "gcc/testsuite/gcc.target/arm/lob6.c", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flob6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flob6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flob6.c?ref=d2ed233cb940aa3eecc163d98b47979dd81dbc0a", "patch": "@@ -0,0 +1,97 @@\n+/* Check that GCC generates Armv8.1-M low over head loop instructions\n+   with some less trivial loops and the result is correct.  */\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_1_lob_ok } */\n+/* { dg-skip-if \"avoid conflicting multilib options\" { *-*-* } { \"-marm\" \"-mcpu=*\" } } */\n+/* { dg-options \"-march=armv8.1-m.main -O3 --save-temps\" } */\n+#include <stdlib.h>\n+#include \"lob.h\"\n+\n+#define TEST_CODE1\t\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; i++)\t\t\t\\\n+      {\t\t\t\t\t\t\\\n+\ta[i] = i;\t\t\t\t\\\n+\tb[i] = i * 2;\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+\tfor (int k = 0; k < N; k++)\t\t\\\n+\t  {\t\t\t\t\t\\\n+\t    MAYBE_LOB;\t\t\t\t\\\n+\t    c[k] = k / 2;\t\t\t\\\n+\t  }\t\t\t\t\t\\\n+\tc[i] = a[i] - b[i];\t\t\t\\\n+      }\t\t\t\t\t\t\\\n+  }\n+\n+#define TEST_CODE2\t\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    for (int i = 0; i < N / 2; i++)\t\t\\\n+      {\t\t\t\t\t\t\\\n+\tMAYBE_LOB;\t\t\t\t\\\n+\tif (c[i] % 2 == 0)\t\t\t\\\n+\t  break;\t\t\t\t\\\n+\ta[i]++;\t\t\t\t\t\\\n+\tb[i]++;\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\\\n+  }\n+\n+int a1[N];\n+int b1[N];\n+int c1[N];\n+\n+int a2[N];\n+int b2[N];\n+int c2[N];\n+\n+#define MAYBE_LOB\n+void __attribute__((noinline))\n+loop1 (int *a, int *b, int *c)\n+  TEST_CODE1;\n+\n+void __attribute__((noinline))\n+loop2 (int *a, int *b, int *c)\n+  TEST_CODE2;\n+\n+#undef MAYBE_LOB\n+#define MAYBE_LOB NO_LOB\n+\n+void\n+ref1 (int *a, int *b, int *c)\n+  TEST_CODE1;\n+\n+void\n+ref2 (int *a, int *b, int *c)\n+  TEST_CODE2;\n+\n+void\n+check (void)\n+{\n+  for (int i = 0; i < N; i++)\n+    {\n+      NO_LOB;\n+      if (a1[i] != a2[i]\n+\t  && b1[i] != b2[i]\n+\t  && c1[i] != c2[i])\n+\tabort ();\n+    }\n+}\n+\n+int\n+main (void)\n+{\n+  reset_data (a1, b1, c1);\n+  reset_data (a2, b2, c2);\n+  loop1 (a1, b1, c1);\n+  ref1 (a2, b2, c2);\n+  check ();\n+\n+  reset_data (a1, b1, c1);\n+  reset_data (a2, b2, c2);\n+  loop2 (a1, b1, c1);\n+  ref2 (a2, b2, c2);\n+  check ();\n+\n+  return 0;\n+}\n+/* { dg-final { scan-assembler-times {dls\\s\\S*,\\s\\S*} 1 } } */\n+/* { dg-final { scan-assembler-times {le\\slr,\\s\\S*} 1 } } */"}, {"sha": "9272e4ce9b8c6a82fc050c72d02e3c8a537963d8", "filename": "gcc/testsuite/gcc.target/arm/unsigned-extend-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Funsigned-extend-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Funsigned-extend-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Funsigned-extend-2.c?ref=d2ed233cb940aa3eecc163d98b47979dd81dbc0a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-require-effective-target arm_thumb2_ok } */\n+/* { dg-require-effective-target arm_thumb2_ok_no_arm_v8_1_lob } */\n /* { dg-options \"-O\" } */\n \n unsigned short foo (unsigned short x, unsigned short c)"}, {"sha": "aeb0351073d71b05f88381711a574a37f7cd9f91", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ed233cb940aa3eecc163d98b47979dd81dbc0a/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=d2ed233cb940aa3eecc163d98b47979dd81dbc0a", "patch": "@@ -10251,6 +10251,40 @@ proc check_effective_target_arm_v8_3a_bkey_directive { } {\n \t}]\n }\n \n+# Return 1 if the target supports executing the Armv8.1-M Mainline Low\n+# Overhead Loop, 0 otherwise.  The test is valid for ARM.\n+\n+proc check_effective_target_arm_v8_1_lob_ok { } {\n+    if { ![istarget arm*-*-*] } {\n+        return 0;\n+    } else {\n+\treturn [check_runtime arm_v8_1_lob_hw_available {\n+\t\tint\n+\t\tmain (void)\n+\t        { int i = 0;\n+\t\t  asm  (\"movw r3, #10\\n\\t\" /* movs? */\n+\t\t\t\"dls lr, r3\" : : : \"r3\", \"lr\");\n+\t\t loop:\n+\t\t  i++;\n+\t\t  asm goto (\"le lr, %l0\" : : : \"lr\" : loop);\n+\t\t  return i != 10;\n+\t\t}\n+\t} \"-march=armv8.1-m.main\" ]\n+    }\n+}\n+\n+# Return 1 is this is an ARM target where -mthumb causes Thumb-2 to be\n+# used and the target does not support executing the Armv8.1-M\n+# Mainline Low Overhead Loop, 0 otherwise.  The test is valid for ARM.\n+\n+proc check_effective_target_arm_thumb2_ok_no_arm_v8_1_lob { } {\n+    if { [check_effective_target_arm_thumb2_ok]\n+\t && ![check_effective_target_arm_v8_1_lob_ok] } {\n+\treturn 1\n+    }\n+    return 0\n+}\n+\n # Returns 1 if the target is using glibc, 0 otherwise.\n \n proc check_effective_target_glibc { } {"}]}