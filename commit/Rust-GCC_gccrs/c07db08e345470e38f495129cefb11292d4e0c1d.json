{"sha": "c07db08e345470e38f495129cefb11292d4e0c1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA3ZGIwOGUzNDU0NzBlMzhmNDk1MTI5Y2VmYjExMjkyZDRlMGMxZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-29T16:24:21Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-29T16:24:21Z"}, "message": "(call): Put USE for r0 in CALL_INSN; call call_internal to emit insn.\n\n(call_internal): New name for anonymous call.\n(call_value, call_value_internal): Likewise.\n\nFrom-SVN: r9834", "tree": {"sha": "63a792f7b1deccba98f3ff063073dac492e92329", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63a792f7b1deccba98f3ff063073dac492e92329"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c07db08e345470e38f495129cefb11292d4e0c1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c07db08e345470e38f495129cefb11292d4e0c1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c07db08e345470e38f495129cefb11292d4e0c1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c07db08e345470e38f495129cefb11292d4e0c1d/comments", "author": null, "committer": null, "parents": [{"sha": "57f2483b4b717a0526d7cd16ce57acb8802ad10f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57f2483b4b717a0526d7cd16ce57acb8802ad10f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57f2483b4b717a0526d7cd16ce57acb8802ad10f"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "8c1aaa1bb3c440d71812c2062fe417dcfd6ec038", "filename": "gcc/config/romp/romp.md", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c07db08e345470e38f495129cefb11292d4e0c1d/gcc%2Fconfig%2Fromp%2Fromp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c07db08e345470e38f495129cefb11292d4e0c1d/gcc%2Fconfig%2Fromp%2Fromp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.md?ref=c07db08e345470e38f495129cefb11292d4e0c1d", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for ROMP chip for GNU C compiler\n-;;   Copyright (C) 1988, 1991, 1993, 1994 Free Software Foundation, Inc.\n+;;   Copyright (C) 1988, 1991, 1993, 1994, 1995 Free Software Foundation, Inc.\n ;;   Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n ;; This file is part of GNU CC.\n@@ -1660,13 +1660,14 @@\n ;;\n ;; Operand 1 (2 for `call_value') is the number of arguments and is not used.\n (define_expand \"call\"\n-  [(use (reg:SI 0))\n-   (parallel [(call (mem:SI (match_operand:SI 0 \"address_operand\" \"\"))\n-\t\t    (match_operand 1 \"\" \"\"))\n-\t      (clobber (reg:SI 15))])]\n+  [(use (match_operand:SI 0 \"address_operand\" \"\"))\n+   (use (match_operand 1 \"\" \"\"))]\n   \"\"\n   \"\n {\n+  rtx reg0 = gen_rtx (REG, SImode, 0);\n+  rtx call_insn;\n+\n   if (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != CONST_INT)\n     abort();\n \n@@ -1678,8 +1679,7 @@\n \t\t(char *) alloca (strlen (XSTR (operands[0], 0)) + 2);\n \n       /* Copy the data area address to r0.  */\n-      emit_move_insn (gen_rtx (REG, SImode, 0),\n-\t\t      force_reg (SImode, operands[0]));\n+      emit_move_insn (reg0, force_reg (SImode, operands[0]));\n       strcpy (real_fcnname, \\\".\\\");\n       strcat (real_fcnname, XSTR (operands[0], 0));\n       operands[0] = get_symref (real_fcnname);\n@@ -1688,15 +1688,18 @@\n     {\n       rtx data_access;\n \n-      emit_move_insn (gen_rtx (REG, SImode, 0),\n-\t\t      force_reg (SImode, operands[0]));\n+      emit_move_insn (reg0, force_reg (SImode, operands[0]));\n       data_access = gen_rtx (MEM, SImode, operands[0]);\n       RTX_UNCHANGING_P (data_access) = 1;\n       operands[0] = copy_to_reg (data_access);\n     }\n+\n+  call_insn = emit_call_insn (gen_call_internal (operands[0], operands[1]));\n+  use_reg (&CALL_INSN_FUNCTION_USAGE (call_insn), reg0);\n+  DONE;\n }\")\n \n-(define_insn \"\"\n+(define_insn \"call_internal\"\n   [(call (mem:SI (match_operand:SI 0 \"register_operand\" \"b\"))\n \t (match_operand 1 \"\" \"g\"))\n    (clobber (reg:SI 15))]\n@@ -1715,14 +1718,15 @@\n \n ;; Call a function and return a value.\n (define_expand \"call_value\"\n-  [(use (reg:SI 0))\n-   (parallel [(set (match_operand 0 \"\" \"=fg\")\n-\t\t   (call (mem:SI (match_operand:SI 1 \"address_operand\" \"\"))\n-\t\t\t (match_operand 2 \"\" \"\")))\n-\t      (clobber (reg:SI 15))])]\n+  [(use (match_operand 0 \"\" \"\"))\n+   (use (match_operand:SI 1 \"address_operand\" \"\"))\n+   (use (match_operand 2 \"\" \"\"))]\n   \"\"\n   \"\n {\n+  rtx reg0 = gen_rtx (REG, SImode, 0);\n+  rtx call_insn;\n+\n   if (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != CONST_INT)\n     abort();\n \n@@ -1734,8 +1738,7 @@\n \t\t(char *) alloca (strlen (XSTR (operands[1], 0)) + 2);\n \n       /* Copy the data area address to r0.  */\n-      emit_move_insn (gen_rtx (REG, SImode, 0),\n-\t\t      force_reg (SImode, operands[1]));\n+      emit_move_insn (reg0,force_reg (SImode, operands[1]));\n       strcpy (real_fcnname, \\\".\\\");\n       strcat (real_fcnname, XSTR (operands[1], 0));\n       operands[1] = get_symref (real_fcnname);\n@@ -1744,15 +1747,20 @@\n     {\n       rtx data_access;\n \n-      emit_move_insn (gen_rtx (REG, SImode, 0),\n-\t\t      force_reg (SImode, operands[1]));\n+      emit_move_insn (reg0,force_reg (SImode, operands[1]));\n       data_access = gen_rtx (MEM, SImode, operands[1]);\n       RTX_UNCHANGING_P (data_access) = 1;\n       operands[1] = copy_to_reg (data_access);\n     }\n+\n+  call_insn = emit_call_insn (gen_call_value_internal (operands[0],\n+\t\t\t\t\t\t       operands[1],\n+\t\t\t\t\t\t       operands[2]));\n+  use_reg (&CALL_INSN_FUNCTION_USAGE (call_insn), reg0);\n+  DONE;\n }\")\n \n-(define_insn \"\"\n+(define_insn \"call_value_internal\"\n   [(set (match_operand 0 \"\" \"=fg\")\n \t(call (mem:SI (match_operand:SI 1 \"register_operand\" \"b\"))\n \t      (match_operand 2 \"\" \"g\")))"}]}