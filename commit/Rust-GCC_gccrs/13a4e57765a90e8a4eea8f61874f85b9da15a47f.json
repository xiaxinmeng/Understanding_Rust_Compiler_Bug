{"sha": "13a4e57765a90e8a4eea8f61874f85b9da15a47f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNhNGU1Nzc2NWE5MGU4YTRlZWE4ZjYxODc0Zjg1YjlkYTE1YTQ3Zg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2008-12-09T07:16:57Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-12-09T07:16:57Z"}, "message": "alpha.c (alpha_set_memflags): Process memory references in full insn sequence.\n\n\t* config/alpha/alpha.c (alpha_set_memflags): Process memory\n\treferences in full insn sequence.\n\nFrom-SVN: r142581", "tree": {"sha": "0ea8f9f0dd9c6383c4b241aa3381dab19f9e113c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ea8f9f0dd9c6383c4b241aa3381dab19f9e113c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13a4e57765a90e8a4eea8f61874f85b9da15a47f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13a4e57765a90e8a4eea8f61874f85b9da15a47f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13a4e57765a90e8a4eea8f61874f85b9da15a47f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13a4e57765a90e8a4eea8f61874f85b9da15a47f/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c69c7be10b82d76d6b3d8daf88d9e7a05278bdda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c69c7be10b82d76d6b3d8daf88d9e7a05278bdda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c69c7be10b82d76d6b3d8daf88d9e7a05278bdda"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "fe7ef41c1a11fb4dffe7f137ddab629eb898db85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a4e57765a90e8a4eea8f61874f85b9da15a47f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a4e57765a90e8a4eea8f61874f85b9da15a47f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13a4e57765a90e8a4eea8f61874f85b9da15a47f", "patch": "@@ -1,3 +1,8 @@\n+2008-12-08  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.c (alpha_set_memflags): Process memory\n+\treferences in full insn sequence.\n+\n 2008-12-09  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/38410"}, {"sha": "52ae122f6eda28644707e205383f1e9ab819bc33", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a4e57765a90e8a4eea8f61874f85b9da15a47f/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a4e57765a90e8a4eea8f61874f85b9da15a47f/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=13a4e57765a90e8a4eea8f61874f85b9da15a47f", "patch": "@@ -1603,18 +1603,17 @@ alpha_set_memflags_1 (rtx *xp, void *data)\n   return -1;\n }\n \n-/* Given INSN, which is an INSN list or the PATTERN of a single insn\n-   generated to perform a memory operation, look for any MEMs in either\n+/* Given SEQ, which is an INSN list, look for any MEMs in either\n    a SET_DEST or a SET_SRC and copy the in-struct, unchanging, and\n    volatile flags from REF into each of the MEMs found.  If REF is not\n    a MEM, don't do anything.  */\n \n void\n-alpha_set_memflags (rtx insn, rtx ref)\n+alpha_set_memflags (rtx seq, rtx ref)\n {\n-  rtx *base_ptr;\n+  rtx insn;\n \n-  if (GET_CODE (ref) != MEM)\n+  if (!MEM_P (ref))\n     return;\n \n   /* This is only called from alpha.md, after having had something\n@@ -1627,11 +1626,11 @@ alpha_set_memflags (rtx insn, rtx ref)\n       && !MEM_READONLY_P (ref))\n     return;\n \n-  if (INSN_P (insn))\n-    base_ptr = &PATTERN (insn);\n-  else\n-    base_ptr = &insn;\n-  for_each_rtx (base_ptr, alpha_set_memflags_1, (void *) ref);\n+  for (insn = seq; insn; insn = NEXT_INSN (insn))\n+    if (INSN_P (insn))\n+      for_each_rtx (&PATTERN (insn), alpha_set_memflags_1, (void *) ref);\n+    else\n+      gcc_unreachable ();\n }\n \f\n static rtx alpha_emit_set_const (rtx, enum machine_mode, HOST_WIDE_INT,"}]}