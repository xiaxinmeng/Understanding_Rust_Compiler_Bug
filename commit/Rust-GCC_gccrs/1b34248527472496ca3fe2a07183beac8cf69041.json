{"sha": "1b34248527472496ca3fe2a07183beac8cf69041", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIzNDI0ODUyNzQ3MjQ5NmNhM2ZlMmEwNzE4M2JlYWM4Y2Y2OTA0MQ==", "commit": {"author": {"name": "Ankur Saini", "email": "arsenic@sourceware.org", "date": "2021-08-15T13:49:07Z"}, "committer": {"name": "Ankur Saini", "email": "arsenic@sourceware.org", "date": "2021-08-18T17:40:31Z"}, "message": "analyzer: detect and analyze virtual function calls\n\n2021-08-15  Ankur Saini  <arsenic@sourceware.org>\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/97114\n\t* region-model.cc (region_model::get_rvalue_1): Add case for\n\tOBJ_TYPE_REF.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/97114\n\t* g++.dg/analyzer/vfunc-2.C: New test.\n\t* g++.dg/analyzer/vfunc-3.C: New test.\n\t* g++.dg/analyzer/vfunc-4.C: New test.\n\t* g++.dg/analyzer/vfunc-5.C: New test.", "tree": {"sha": "1db91dcc90b960c5c65ab77c87625a0be9c42292", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1db91dcc90b960c5c65ab77c87625a0be9c42292"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b34248527472496ca3fe2a07183beac8cf69041", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b34248527472496ca3fe2a07183beac8cf69041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b34248527472496ca3fe2a07183beac8cf69041", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b34248527472496ca3fe2a07183beac8cf69041/comments", "author": null, "committer": null, "parents": [{"sha": "aef703cf982072427e74034f4c460a11c5e04b8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aef703cf982072427e74034f4c460a11c5e04b8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aef703cf982072427e74034f4c460a11c5e04b8e"}], "stats": {"total": 212, "additions": 212, "deletions": 0}, "files": [{"sha": "822e893e899f16380c35dcf8058767037639b075", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b34248527472496ca3fe2a07183beac8cf69041/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b34248527472496ca3fe2a07183beac8cf69041/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=1b34248527472496ca3fe2a07183beac8cf69041", "patch": "@@ -1841,6 +1841,11 @@ region_model::get_rvalue_1 (path_var pv, region_model_context *ctxt) const\n \tconst region *ref_reg = get_lvalue (pv, ctxt);\n \treturn get_store_value (ref_reg, ctxt);\n       }\n+    case OBJ_TYPE_REF:\n+      {\n+        tree expr = OBJ_TYPE_REF_EXPR (pv.m_tree);\n+        return get_rvalue (expr, ctxt);\n+      }\n     }\n }\n "}, {"sha": "46b68e529e6a52850790d34bcc0dc00687f6ae85", "filename": "gcc/testsuite/g++.dg/analyzer/vfunc-2.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b34248527472496ca3fe2a07183beac8cf69041/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fvfunc-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b34248527472496ca3fe2a07183beac8cf69041/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fvfunc-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fvfunc-2.C?ref=1b34248527472496ca3fe2a07183beac8cf69041", "patch": "@@ -0,0 +1,44 @@\n+#include <cstdio>\n+#include <cstdlib>\n+\n+struct A\n+{\n+    int m_data;\n+    A() {m_data = 0;}\n+    virtual int deallocate (void) \n+    {\n+        return 42;\n+    }\n+};\n+\n+struct B: public A\n+{\n+    int *ptr;\n+    int m_data_b;\n+    B() {m_data_b = 0;}\n+    void allocate ()\n+    {\n+        ptr = (int*)malloc(sizeof(int));\n+    }\n+    int deallocate (void) \n+    { \n+        free(ptr);\n+        return 0;\n+    }\n+};\n+\n+void foo(A *a_ptr)\n+{\n+    printf(\"%d\\n\",a_ptr->deallocate());\n+}\n+\n+void test()\n+{\n+    B b;\n+    A a, *aptr;\n+    aptr = &b;\n+    b.allocate();\n+    foo(aptr);\n+    aptr = &a;\n+    foo(aptr);\n+}"}, {"sha": "03d3cdc73bee3788cf62090a3395c3d234d61f98", "filename": "gcc/testsuite/g++.dg/analyzer/vfunc-3.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b34248527472496ca3fe2a07183beac8cf69041/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fvfunc-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b34248527472496ca3fe2a07183beac8cf69041/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fvfunc-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fvfunc-3.C?ref=1b34248527472496ca3fe2a07183beac8cf69041", "patch": "@@ -0,0 +1,32 @@\n+#include <cstdlib>\n+\n+struct A\n+{\n+    virtual int foo (void) \n+    {\n+        return 42;\n+    }\n+};\n+\n+struct B: public A\n+{\n+    int *ptr;\n+    void alloc ()\n+    {\n+        ptr = (int*)malloc(sizeof(int));\n+    }\n+    int foo (void) \n+    { \n+        free(ptr); /* { dg-warning \"double-'free' of 'b.B::ptr'\" } */\n+        return 0;\n+    }\n+};\n+\n+int test ()\n+{\n+    struct B b, *bptr=&b;\n+    b.alloc ();\n+    bptr->foo ();  /* { dg-message \"\\\\(6\\\\) calling 'B::foo' from 'test'\" \"event 6\" } */\n+    /* { dg-message \"\\\\(9\\\\) returning to 'test' from 'B::foo'\" \"event 9\" { target *-*-* } .-1 } */\n+    return bptr->foo ();\n+}"}, {"sha": "975108400b10ceda9a3cc1872ffec27a13eff3e0", "filename": "gcc/testsuite/g++.dg/analyzer/vfunc-4.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b34248527472496ca3fe2a07183beac8cf69041/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fvfunc-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b34248527472496ca3fe2a07183beac8cf69041/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fvfunc-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fvfunc-4.C?ref=1b34248527472496ca3fe2a07183beac8cf69041", "patch": "@@ -0,0 +1,28 @@\n+#include \"../../gcc.dg/analyzer/analyzer-decls.h\"\n+\n+struct A\n+{\n+  int m_data;\n+  virtual char foo ()\n+  {\n+    return 'A';\n+  }\n+};\n+\n+struct B: public A\n+{\n+  int m_data_b;\n+  char foo ()\n+  {\n+    return 'B';\n+  }\n+};\n+\n+void test()\n+{\n+  A a, *a_ptr = &a;\n+  B b;\n+  __analyzer_eval (a_ptr->foo () == 'A'); /* { dg-warning \"TRUE\" } */\n+  a_ptr = &b;\n+  __analyzer_eval (a_ptr->foo () == 'B'); /* { dg-warning \"TRUE\" } */\n+}"}, {"sha": "2af84657f679bb3927ba077644a63b085a47c39a", "filename": "gcc/testsuite/g++.dg/analyzer/vfunc-5.C", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b34248527472496ca3fe2a07183beac8cf69041/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fvfunc-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b34248527472496ca3fe2a07183beac8cf69041/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fvfunc-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fvfunc-5.C?ref=1b34248527472496ca3fe2a07183beac8cf69041", "patch": "@@ -0,0 +1,103 @@\n+/* { dg-additional-options \"-fdiagnostics-show-line-numbers -fdiagnostics-path-format=inline-events -fanalyzer-checker=malloc -fdiagnostics-show-caret\" } */\n+/* { dg-enable-nn-line-numbers \"\" } */\n+\n+#include <cstdlib>\n+\n+struct Base\n+{\n+    virtual void allocate ();\n+    virtual void deallocate (); \n+};\n+\n+struct Derived: public Base\n+{\n+    int *ptr;\n+    void allocate ()\n+    {\n+        ptr = (int*)malloc(sizeof(int));\n+    }\n+    void deallocate () \n+    { \n+        free(ptr);\n+    }\n+};\n+\n+void test()\n+{\n+    Derived D;\n+    Base B, *base_ptr;\n+    base_ptr = &D;\n+\n+    D.allocate();\n+    base_ptr->deallocate();\n+    int n = *D.ptr;   /* { dg-warning \"use after 'free' of 'D.Derived::ptr'\" } */\n+}\n+\n+/* use after 'free'  */\n+/* { dg-begin-multiline-output \"\" }\n+   NN |     int n = *D.ptr;\n+      |         ^\n+  'void test()': events 1-2\n+    |\n+    |   NN | void test()\n+    |      |      ^~~~\n+    |      |      |\n+    |      |      (1) entry to 'test'\n+    |......\n+    |   NN |     D.allocate();\n+    |      |     ~~~~~~~~~~~~\n+    |      |               |\n+    |      |               (2) calling 'Derived::allocate' from 'test'\n+    |\n+    +--> 'virtual void Derived::allocate()': events 3-4\n+           |\n+           |   NN |     void allocate ()\n+           |      |          ^~~~~~~~\n+           |      |          |\n+           |      |          (3) entry to 'Derived::allocate'\n+           |   NN |     {\n+           |   NN |         ptr = (int*)malloc(sizeof(int));\n+           |      |                     ~~~~~~~~~~~~~~~~~~~\n+           |      |                           |\n+           |      |                           (4) allocated here\n+           |\n+    <------+\n+    |\n+  'void test()': events 5-6\n+    |\n+    |   NN |     D.allocate();\n+    |      |     ~~~~~~~~~~^~\n+    |      |               |\n+    |      |               (5) returning to 'test' from 'Derived::allocate'\n+    |   NN |     base_ptr->deallocate();\n+    |      |     ~~~~~~~~~~~~~~~~~~~~~~\n+    |      |                         |\n+    |      |                         (6) calling 'Derived::deallocate' from 'test'\n+    |\n+    +--> 'virtual void Derived::deallocate()': events 7-8\n+           |\n+           |   NN |     void deallocate ()\n+           |      |          ^~~~~~~~~~\n+           |      |          |\n+           |      |          (7) entry to 'Derived::deallocate'\n+           |   NN |     {\n+           |   NN |         free(ptr);\n+           |      |         ~~~~~~~~~\n+           |      |             |\n+           |      |             (8) freed here\n+           |\n+    <------+\n+    |\n+  'void test()': events 9-10\n+    |\n+    |   NN |     base_ptr->deallocate();\n+    |      |     ~~~~~~~~~~~~~~~~~~~~^~\n+    |      |                         |\n+    |      |                         (9) returning to 'test' from 'Derived::deallocate'\n+    |   NN |     int n = *D.ptr;\n+    |      |         ~                \n+    |      |         |\n+    |      |         (10) use after 'free' of 'D.Derived::ptr'; freed at (8)\n+    |\n+   { dg-end-multiline-output \"\" } */\n+"}]}