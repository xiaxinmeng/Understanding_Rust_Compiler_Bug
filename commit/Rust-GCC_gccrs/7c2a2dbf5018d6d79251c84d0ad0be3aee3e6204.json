{"sha": "7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MyYTJkYmY1MDE4ZDZkNzkyNTFjODRkMGFkMGJlM2FlZTNlNjIwNA==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2009-09-08T15:21:07Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2009-09-08T15:21:07Z"}, "message": "[multiple changes]\n\n2009-09-08  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* stdint.m4: Rewrite by using autoconf 2.64 features.\n\n2009-09-08  Kai Tietz  <kai.tietz@onevision.com>\n\n\t* configure.ac (GCC_STDINT_TYPES): Initialize intptr_t,\n\tuintptr_t, HAVE_INTTYPES_H, HAVE_STDINT_H, HAVE_UINTPTR_T,\n\tand HAVE_INTPTR_T.\n\t* configure: Regenerated.\n\t* config.in: Regenerated\n\t* system.h (stdint.h): Add include.\n\t(inttypes.h): Likewise.\n\t* Makefile.in (aclocal): Add config/stdint.m4.\n\t* aclocal.m4: Regenerated.\n\nFrom-SVN: r151514", "tree": {"sha": "90bf22a3a25a610e63a56b6e9a40cfe86efb05e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90bf22a3a25a610e63a56b6e9a40cfe86efb05e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204/comments", "author": null, "committer": null, "parents": [{"sha": "8472b255108e07cfda0b5d4d12208636bbbd551f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8472b255108e07cfda0b5d4d12208636bbbd551f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8472b255108e07cfda0b5d4d12208636bbbd551f"}], "stats": {"total": 681, "additions": 210, "deletions": 471}, "files": [{"sha": "d23df4cfeb9570719a8bc062e48b6312d7f67cb2", "filename": "config/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204", "patch": "@@ -1,3 +1,7 @@\n+2009-09-08  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* stdint.m4: Rewrite by using autoconf 2.64 features.\n+\n 2009-09-03  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* bootstrap-debug-big.mk (STAGE2_CFLAGS): Drop -gtoggle."}, {"sha": "ffb759d06b643775db3f1dfcf4a82133ef793d29", "filename": "config/stdint.m4", "status": "modified", "additions": 39, "deletions": 471, "changes": 510, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204/config%2Fstdint.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204/config%2Fstdint.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fstdint.m4?ref=7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204", "patch": "@@ -1,461 +1,67 @@\n-dnl @synopsis GCC_HEADER_STDINT [( HEADER-TO-GENERATE [, HEADERS-TO-CHECK])]\n-dnl\n-dnl the \"ISO C9X: 7.18 Integer types <stdint.h>\" section requires the\n-dnl existence of an include file <stdint.h> that defines a set of\n-dnl typedefs, especially uint8_t,int32_t,uintptr_t.\n-dnl Many older installations will not provide this file, but some will\n-dnl have the very same definitions in <inttypes.h>. In other enviroments\n-dnl we can use the inet-types in <sys/types.h> which would define the\n-dnl typedefs int8_t and u_int8_t respectivly.\n-dnl\n-dnl This macros will create a local \"_stdint.h\" or the headerfile given as\n-dnl an argument. In many cases that file will pick the definition from a\n-dnl \"#include <stdint.h>\" or \"#include <inttypes.h>\" statement, while\n-dnl in other environments it will provide the set of basic 'stdint's defined:\n-dnl int8_t,uint8_t,int16_t,uint16_t,int32_t,uint32_t,intptr_t,uintptr_t\n-dnl int_least32_t.. int_fast32_t.. intmax_t\n-dnl which may or may not rely on the definitions of other files.\n-dnl\n-dnl Sometimes the stdint.h or inttypes.h headers conflict with sys/types.h,\n-dnl so we test the headers together with sys/types.h and always include it\n-dnl into the generated header (to match the tests with the generated file).\n-dnl Hopefully this is not a big annoyance.\n-dnl\n-dnl If your installed header files require the stdint-types you will want to\n-dnl create an installable file mylib-int.h that all your other installable\n-dnl header may include. So, for a library package named \"mylib\", just use\n-dnl      GCC_HEADER_STDINT(mylib-int.h)\n-dnl in configure.in and install that header file in Makefile.am along with\n-dnl the other headers (mylib.h).  The mylib-specific headers can simply\n-dnl use \"#include <mylib-int.h>\" to obtain the stdint-types.\n-dnl\n-dnl Remember, if the system already had a valid <stdint.h>, the generated\n-dnl file will include it directly. No need for fuzzy HAVE_STDINT_H things...\n-dnl\n-dnl @author  Guido Draheim <guidod@gmx.de>, Paolo Bonzini <bonzini@gnu.org>\n+AC_DEFUN([GCC_STDINT_TYPES],\n+[AC_REQUIRE([AC_TYPE_INT8_T])\n+AC_REQUIRE([AC_TYPE_INT16_T])\n+AC_REQUIRE([AC_TYPE_INT32_T])\n+AC_REQUIRE([AC_TYPE_INT64_T])\n+AC_REQUIRE([AC_TYPE_INTMAX_T])\n+AC_REQUIRE([AC_TYPE_INTPTR_T])\n+AC_REQUIRE([AC_TYPE_UINT8_T])\n+AC_REQUIRE([AC_TYPE_UINT16_T])\n+AC_REQUIRE([AC_TYPE_UINT32_T])\n+AC_REQUIRE([AC_TYPE_UINT64_T])\n+AC_REQUIRE([AC_TYPE_UINTMAX_T])\n+AC_REQUIRE([AC_TYPE_UINTPTR_T])])\n \n AC_DEFUN([GCC_HEADER_STDINT],\n-[m4_define(_GCC_STDINT_H, m4_ifval($1, $1, _stdint.h))\n-\n-inttype_headers=`echo inttypes.h sys/inttypes.h $2 | sed -e 's/,/ /g'`\n-\n-acx_cv_header_stdint=stddef.h\n-acx_cv_header_stdint_kind=\"(already complete)\"\n-for i in stdint.h $inttype_headers; do\n-  unset ac_cv_type_uintptr_t\n-  unset ac_cv_type_uintmax_t\n-  unset ac_cv_type_int_least32_t\n-  unset ac_cv_type_int_fast32_t\n-  unset ac_cv_type_uint64_t\n-  _AS_ECHO_N([looking for a compliant stdint.h in $i, ])\n-  AC_CHECK_TYPE(uintmax_t,[acx_cv_header_stdint=$i],continue,[#include <sys/types.h>\n-#include <$i>])\n-  AC_CHECK_TYPE(uintptr_t,,[acx_cv_header_stdint_kind=\"(mostly complete)\"], [#include <sys/types.h>\n-#include <$i>])\n-  AC_CHECK_TYPE(int_least32_t,,[acx_cv_header_stdint_kind=\"(mostly complete)\"], [#include <sys/types.h>\n-#include <$i>])\n-  AC_CHECK_TYPE(int_fast32_t,,[acx_cv_header_stdint_kind=\"(mostly complete)\"], [#include <sys/types.h>\n-#include <$i>])\n-  AC_CHECK_TYPE(uint64_t,,[acx_cv_header_stdint_kind=\"(lacks uint64_t)\"], [#include <sys/types.h>\n-#include <$i>])\n-  break\n-done\n-if test \"$acx_cv_header_stdint\" = stddef.h; then\n-  acx_cv_header_stdint_kind=\"(lacks uintmax_t)\"\n-  for i in stdint.h $inttype_headers; do\n-    unset ac_cv_type_uintptr_t\n-    unset ac_cv_type_uint32_t\n-    unset ac_cv_type_uint64_t\n-    _AS_ECHO_N([looking for an incomplete stdint.h in $i, ])\n-    AC_CHECK_TYPE(uint32_t,[acx_cv_header_stdint=$i],continue,[#include <sys/types.h>\n-#include <$i>])\n-    AC_CHECK_TYPE(uint64_t,,,[#include <sys/types.h>\n-#include <$i>])\n-    AC_CHECK_TYPE(uintptr_t,,,[#include <sys/types.h>\n-#include <$i>])\n-    break\n-  done\n-fi\n-if test \"$acx_cv_header_stdint\" = stddef.h; then\n-  acx_cv_header_stdint_kind=\"(u_intXX_t style)\"\n-  for i in sys/types.h $inttype_headers; do\n-    unset ac_cv_type_u_int32_t\n-    unset ac_cv_type_u_int64_t\n-    _AS_ECHO_N([looking for u_intXX_t types in $i, ])\n-    AC_CHECK_TYPE(u_int32_t,[acx_cv_header_stdint=$i],continue,[#include <sys/types.h>\n-#include <$i>])\n-    AC_CHECK_TYPE(u_int64_t,,,[#include <sys/types.h>\n-#include <$i>])\n-    break\n-  done\n-fi\n-if test \"$acx_cv_header_stdint\" = stddef.h; then\n-  acx_cv_header_stdint_kind=\"(using manual detection)\"\n-fi\n-\n-test -z \"$ac_cv_type_uintptr_t\" && ac_cv_type_uintptr_t=no\n-test -z \"$ac_cv_type_uint64_t\" && ac_cv_type_uint64_t=no\n-test -z \"$ac_cv_type_u_int64_t\" && ac_cv_type_u_int64_t=no\n-test -z \"$ac_cv_type_int_least32_t\" && ac_cv_type_int_least32_t=no\n-test -z \"$ac_cv_type_int_fast32_t\" && ac_cv_type_int_fast32_t=no\n+[AC_REQUIRE([GCC_STDINT_TYPES])\n+AC_CHECK_TYPES([int_least32_t, int_fast32_t],,,[#include <sys/types.h>\n+#ifdef HAVE_STDINT_H\n+#include <stdint.h>\n+#endif\n+#ifdef HAVE_INTTYPES_H\n+#include <inttypes.h>\n+#endif])\n \n # ----------------- Summarize what we found so far\n \n-AC_MSG_CHECKING([what to include in _GCC_STDINT_H])\n-\n-case `AS_BASENAME(_GCC_STDINT_H)` in\n-  stdint.h) AC_MSG_WARN([are you sure you want it there?]) ;;\n-  inttypes.h) AC_MSG_WARN([are you sure you want it there?]) ;;\n-  *) ;;\n-esac\n-\n-AC_MSG_RESULT($acx_cv_header_stdint $acx_cv_header_stdint_kind)\n-\n-# ----------------- done included file, check C basic types --------\n-\n-# Lacking an uintptr_t?  Test size of void *\n-case \"$acx_cv_header_stdint:$ac_cv_type_uintptr_t\" in\n-  stddef.h:* | *:no) AC_CHECK_SIZEOF(void *) ;;\n-esac\n-\n-# Lacking an uint64_t?  Test size of long\n-case \"$acx_cv_header_stdint:$ac_cv_type_uint64_t:$ac_cv_type_u_int64_t\" in\n-  stddef.h:*:* | *:no:no) AC_CHECK_SIZEOF(long) ;;\n-esac\n-\n-if test $acx_cv_header_stdint = stddef.h; then\n-  # Lacking a good header?  Test size of everything and deduce all types.\n-  AC_CHECK_SIZEOF(int)\n-  AC_CHECK_SIZEOF(short)\n-  AC_CHECK_SIZEOF(char)\n-\n-  AC_MSG_CHECKING(for type equivalent to int8_t)\n-  case \"$ac_cv_sizeof_char\" in\n-    1) acx_cv_type_int8_t=char ;;\n-    *) AC_MSG_ERROR(no 8-bit type, please report a bug)\n-  esac\n-  AC_MSG_RESULT($acx_cv_type_int8_t)\n-\n-  AC_MSG_CHECKING(for type equivalent to int16_t)\n-  case \"$ac_cv_sizeof_int:$ac_cv_sizeof_short\" in\n-    2:*) acx_cv_type_int16_t=int ;;\n-    *:2) acx_cv_type_int16_t=short ;;\n-    *) AC_MSG_ERROR(no 16-bit type, please report a bug)\n-  esac\n-  AC_MSG_RESULT($acx_cv_type_int16_t)\n-\n-  AC_MSG_CHECKING(for type equivalent to int32_t)\n-  case \"$ac_cv_sizeof_int:$ac_cv_sizeof_long\" in\n-    4:*) acx_cv_type_int32_t=int ;;\n-    *:4) acx_cv_type_int32_t=long ;;\n-    *) AC_MSG_ERROR(no 32-bit type, please report a bug)\n-  esac\n-  AC_MSG_RESULT($acx_cv_type_int32_t)\n-fi\n-\n-# These tests are here to make the output prettier\n-\n-if test \"$ac_cv_type_uint64_t\" != yes && test \"$ac_cv_type_u_int64_t\" != yes; then\n-  case \"$ac_cv_sizeof_long\" in\n-    8) acx_cv_type_int64_t=long ;;\n-  esac\n-  AC_MSG_CHECKING(for type equivalent to int64_t)\n-  AC_MSG_RESULT(${acx_cv_type_int64_t-'using preprocessor symbols'})\n-fi\n-\n-# Now we can use the above types\n-\n-if test \"$ac_cv_type_uintptr_t\" != yes; then\n-  AC_MSG_CHECKING(for type equivalent to intptr_t)\n-  case $ac_cv_sizeof_void_p in\n-    2) acx_cv_type_intptr_t=int16_t ;;\n-    4) acx_cv_type_intptr_t=int32_t ;;\n-    8) acx_cv_type_intptr_t=int64_t ;;\n-    *) AC_MSG_ERROR(no equivalent for intptr_t, please report a bug)\n-  esac\n-  AC_MSG_RESULT($acx_cv_type_intptr_t)\n-fi\n+m4_define([_GCC_STDINT_H], m4_ifval($1, $1, _stdint.h))\n+m4_if(m4_bmatch(m4_quote(/_GCC_STDINT_H),\n+                /stdint\\.h$, bad,\n+                /inttypes\\.h$, bad, ok), bad,\n+      [m4_fatal([cannot overwrite ]m4_quote(_GCC_STDINT_H))])\n \n # ----------------- done all checks, emit header -------------\n AC_CONFIG_COMMANDS(_GCC_STDINT_H, [\n-if test \"$GCC\" = yes; then\n-  echo \"/* generated for \" `$CC --version | sed 1q` \"*/\" > tmp-stdint.h\n-else\n-  echo \"/* generated for $CC */\" > tmp-stdint.h\n-fi\n-\n-sed 's/^ *//' >> tmp-stdint.h <<EOF\n-\n-  #ifndef GCC_GENERATED_STDINT_H\n-  #define GCC_GENERATED_STDINT_H 1\n-\n-  #include <sys/types.h>\n-EOF\n-\n-if test \"$acx_cv_header_stdint\" != stdint.h; then\n-  echo \"#include <stddef.h>\" >> tmp-stdint.h\n-fi\n-if test \"$acx_cv_header_stdint\" != stddef.h; then\n-  echo \"#include <$acx_cv_header_stdint>\" >> tmp-stdint.h\n-fi\n-\n-sed 's/^ *//' >> tmp-stdint.h <<EOF\n-  /* glibc uses these symbols as guards to prevent redefinitions.  */\n-  #ifdef __int8_t_defined\n-  #define _INT8_T\n-  #define _INT16_T\n-  #define _INT32_T\n-  #endif\n-  #ifdef __uint32_t_defined\n-  #define _UINT32_T\n-  #endif\n-\n+cat >> tmp-stdint.h <<EOF\n+#ifndef GCC_GENERATED_STDINT_H\n+#define GCC_GENERATED_STDINT_H 1\n+\n+#include \"config.h\"\n+#include <sys/types.h>\n+#ifdef HAVE_STDINT_H\n+#include <stdint.h>\n+#endif\n+#ifdef HAVE_INTTYPES_H\n+#include <inttypes.h>\n+#endif\n EOF\n \n-# ----------------- done header, emit basic int types -------------\n-if test \"$acx_cv_header_stdint\" = stddef.h; then\n-  sed 's/^ *//' >> tmp-stdint.h <<EOF\n-\n-    #ifndef _UINT8_T\n-    #define _UINT8_T\n-    #ifndef __uint8_t_defined\n-    #define __uint8_t_defined\n-    typedef unsigned $acx_cv_type_int8_t uint8_t;\n-    #endif\n-    #endif\n-\n-    #ifndef _UINT16_T\n-    #define _UINT16_T\n-    #ifndef __uint16_t_defined\n-    #define __uint16_t_defined\n-    typedef unsigned $acx_cv_type_int16_t uint16_t;\n-    #endif\n-    #endif\n-\n-    #ifndef _UINT32_T\n-    #define _UINT32_T\n-    #ifndef __uint32_t_defined\n-    #define __uint32_t_defined\n-    typedef unsigned $acx_cv_type_int32_t uint32_t;\n-    #endif\n-    #endif\n-\n-    #ifndef _INT8_T\n-    #define _INT8_T\n-    #ifndef __int8_t_defined\n-    #define __int8_t_defined\n-    typedef $acx_cv_type_int8_t int8_t;\n-    #endif\n-    #endif\n-\n-    #ifndef _INT16_T\n-    #define _INT16_T\n-    #ifndef __int16_t_defined\n-    #define __int16_t_defined\n-    typedef $acx_cv_type_int16_t int16_t;\n-    #endif\n-    #endif\n-\n-    #ifndef _INT32_T\n-    #define _INT32_T\n-    #ifndef __int32_t_defined\n-    #define __int32_t_defined\n-    typedef $acx_cv_type_int32_t int32_t;\n-    #endif\n-    #endif\n-EOF\n-elif test \"$ac_cv_type_u_int32_t\" = yes; then\n-  sed 's/^ *//' >> tmp-stdint.h <<EOF\n-\n-    /* int8_t int16_t int32_t defined by inet code, we do the u_intXX types */\n-    #ifndef _INT8_T\n-    #define _INT8_T\n-    #endif\n-    #ifndef _INT16_T\n-    #define _INT16_T\n-    #endif\n-    #ifndef _INT32_T\n-    #define _INT32_T\n-    #endif\n-\n-    #ifndef _UINT8_T\n-    #define _UINT8_T\n-    #ifndef __uint8_t_defined\n-    #define __uint8_t_defined\n-    typedef u_int8_t uint8_t;\n-    #endif\n-    #endif\n-\n-    #ifndef _UINT16_T\n-    #define _UINT16_T\n-    #ifndef __uint16_t_defined\n-    #define __uint16_t_defined\n-    typedef u_int16_t uint16_t;\n-    #endif\n-    #endif\n-\n-    #ifndef _UINT32_T\n-    #define _UINT32_T\n-    #ifndef __uint32_t_defined\n-    #define __uint32_t_defined\n-    typedef u_int32_t uint32_t;\n-    #endif\n-    #endif\n-EOF\n-else\n-  sed 's/^ *//' >> tmp-stdint.h <<EOF\n-\n-    /* Some systems have guard macros to prevent redefinitions, define them.  */\n-    #ifndef _INT8_T\n-    #define _INT8_T\n-    #endif\n-    #ifndef _INT16_T\n-    #define _INT16_T\n-    #endif\n-    #ifndef _INT32_T\n-    #define _INT32_T\n-    #endif\n-    #ifndef _UINT8_T\n-    #define _UINT8_T\n-    #endif\n-    #ifndef _UINT16_T\n-    #define _UINT16_T\n-    #endif\n-    #ifndef _UINT32_T\n-    #define _UINT32_T\n-    #endif\n-EOF\n-fi\n-\n-# ------------- done basic int types, emit int64_t types ------------\n-if test \"$ac_cv_type_uint64_t\" = yes; then\n-  sed 's/^ *//' >> tmp-stdint.h <<EOF\n-\n-    /* system headers have good uint64_t and int64_t */\n-    #ifndef _INT64_T\n-    #define _INT64_T\n-    #endif\n-    #ifndef _UINT64_T\n-    #define _UINT64_T\n-    #endif\n-EOF\n-elif test \"$ac_cv_type_u_int64_t\" = yes; then\n-  sed 's/^ *//' >> tmp-stdint.h <<EOF\n-\n-    /* system headers have an u_int64_t (and int64_t) */\n-    #ifndef _INT64_T\n-    #define _INT64_T\n-    #endif\n-    #ifndef _UINT64_T\n-    #define _UINT64_T\n-    #ifndef __uint64_t_defined\n-    #define __uint64_t_defined\n-    typedef u_int64_t uint64_t;\n-    #endif\n-    #endif\n-EOF\n-elif test -n \"$acx_cv_type_int64_t\"; then\n-  sed 's/^ *//' >> tmp-stdint.h <<EOF\n-\n-    /* architecture has a 64-bit type, $acx_cv_type_int64_t */\n-    #ifndef _INT64_T\n-    #define _INT64_T\n-    typedef $acx_cv_type_int64_t int64_t;\n-    #endif\n-    #ifndef _UINT64_T\n-    #define _UINT64_T\n-    #ifndef __uint64_t_defined\n-    #define __uint64_t_defined\n-    typedef unsigned $acx_cv_type_int64_t uint64_t;\n-    #endif\n-    #endif\n-EOF\n-else\n-  sed 's/^ *//' >> tmp-stdint.h <<EOF\n-\n-    /* some common heuristics for int64_t, using compiler-specific tests */\n-    #if defined __STDC_VERSION__ && (__STDC_VERSION__-0) >= 199901L\n-    #ifndef _INT64_T\n-    #define _INT64_T\n-    #ifndef __int64_t_defined\n-    typedef long long int64_t;\n-    #endif\n-    #endif\n-    #ifndef _UINT64_T\n-    #define _UINT64_T\n-    typedef unsigned long long uint64_t;\n-    #endif\n-\n-    #elif defined __GNUC__ && defined (__STDC__) && __STDC__-0\n-    /* NextStep 2.0 cc is really gcc 1.93 but it defines __GNUC__ = 2 and\n-       does not implement __extension__.  But that compiler doesn't define\n-       __GNUC_MINOR__.  */\n-    # if __GNUC__ < 2 || (__NeXT__ && !__GNUC_MINOR__)\n-    # define __extension__\n-    # endif\n-\n-    # ifndef _INT64_T\n-    # define _INT64_T\n-    __extension__ typedef long long int64_t;\n-    # endif\n-    # ifndef _UINT64_T\n-    # define _UINT64_T\n-    __extension__ typedef unsigned long long uint64_t;\n-    # endif\n-\n-    #elif !defined __STRICT_ANSI__\n-    # if defined _MSC_VER || defined __WATCOMC__ || defined __BORLANDC__\n-\n-    #  ifndef _INT64_T\n-    #  define _INT64_T\n-    typedef __int64 int64_t;\n-    #  endif\n-    #  ifndef _UINT64_T\n-    #  define _UINT64_T\n-    typedef unsigned __int64 uint64_t;\n-    #  endif\n-    # endif /* compiler */\n-\n-    #endif /* ANSI version */\n-EOF\n-fi\n-\n-# ------------- done int64_t types, emit intptr types ------------\n-if test \"$ac_cv_type_uintptr_t\" != yes; then\n-  sed 's/^ *//' >> tmp-stdint.h <<EOF\n-\n-    /* Define intptr_t based on sizeof(void*) = $ac_cv_sizeof_void_p */\n-    #ifndef __uintptr_t_defined\n-    typedef u$acx_cv_type_intptr_t uintptr_t;\n-    #endif\n-    #ifndef __intptr_t_defined\n-    typedef $acx_cv_type_intptr_t  intptr_t;\n-    #endif\n-EOF\n-fi\n-\n-# ------------- done intptr types, emit int_least types ------------\n if test \"$ac_cv_type_int_least32_t\" != yes; then\n   sed 's/^ *//' >> tmp-stdint.h <<EOF\n \n     /* Define int_least types */\n     typedef int8_t     int_least8_t;\n     typedef int16_t    int_least16_t;\n     typedef int32_t    int_least32_t;\n-    #ifdef _INT64_T\n     typedef int64_t    int_least64_t;\n-    #endif\n \n     typedef uint8_t    uint_least8_t;\n     typedef uint16_t   uint_least16_t;\n     typedef uint32_t   uint_least32_t;\n-    #ifdef _UINT64_T\n     typedef uint64_t   uint_least64_t;\n-    #endif\n EOF\n fi\n \n-# ------------- done intptr types, emit int_fast types ------------\n if test \"$ac_cv_type_int_fast32_t\" != yes; then\n   dnl NOTE: The following code assumes that sizeof (int) > 1.\n   dnl Fix when strange machines are reported.\n@@ -465,40 +71,16 @@ if test \"$ac_cv_type_int_fast32_t\" != yes; then\n     typedef int8_t       int_fast8_t;\n     typedef int          int_fast16_t;\n     typedef int32_t      int_fast32_t;\n-    #ifdef _INT64_T\n     typedef int64_t      int_fast64_t;\n-    #endif\n \n     typedef uint8_t      uint_fast8_t;\n     typedef unsigned int uint_fast16_t;\n     typedef uint32_t     uint_fast32_t;\n-    #ifdef _UINT64_T\n     typedef uint64_t     uint_fast64_t;\n-    #endif\n-EOF\n-fi\n-\n-if test \"$ac_cv_type_uintmax_t\" != yes; then\n-  sed 's/^ *//' >> tmp-stdint.h <<EOF\n-\n-    /* Define intmax based on what we found */\n-    #ifdef _INT64_T\n-    typedef int64_t       intmax_t;\n-    #else\n-    typedef long          intmax_t;\n-    #endif\n-    #ifdef _UINT64_T\n-    typedef uint64_t      uintmax_t;\n-    #else\n-    typedef unsigned long uintmax_t;\n-    #endif\n EOF\n fi\n \n-sed 's/^ *//' >> tmp-stdint.h <<EOF\n-\n-  #endif /* GCC_GENERATED_STDINT_H */\n-EOF\n+echo '#endif /* GCC_GENERATED_STDINT_H */' >> tmp-stdint.h\n \n if test -r ]_GCC_STDINT_H[ && cmp -s tmp-stdint.h ]_GCC_STDINT_H[; then\n   rm -f tmp-stdint.h\n@@ -507,22 +89,8 @@ else\n fi\n \n ], [\n-GCC=\"$GCC\"\n-CC=\"$CC\"\n-acx_cv_header_stdint=\"$acx_cv_header_stdint\"\n-acx_cv_type_int8_t=\"$acx_cv_type_int8_t\"\n-acx_cv_type_int16_t=\"$acx_cv_type_int16_t\"\n-acx_cv_type_int32_t=\"$acx_cv_type_int32_t\"\n-acx_cv_type_int64_t=\"$acx_cv_type_int64_t\"\n-acx_cv_type_intptr_t=\"$acx_cv_type_intptr_t\"\n-ac_cv_type_uintmax_t=\"$ac_cv_type_uintmax_t\"\n-ac_cv_type_uintptr_t=\"$ac_cv_type_uintptr_t\"\n-ac_cv_type_uint64_t=\"$ac_cv_type_uint64_t\"\n-ac_cv_type_u_int64_t=\"$ac_cv_type_u_int64_t\"\n-ac_cv_type_u_int32_t=\"$ac_cv_type_u_int32_t\"\n ac_cv_type_int_least32_t=\"$ac_cv_type_int_least32_t\"\n ac_cv_type_int_fast32_t=\"$ac_cv_type_int_fast32_t\"\n-ac_cv_sizeof_void_p=\"$ac_cv_sizeof_void_p\"\n ])\n \n ])"}, {"sha": "137b7c17558ee261f0e54ec8fef7b00446611231", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204", "patch": "@@ -1,3 +1,15 @@\n+2009-09-08  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\t* configure.ac (GCC_STDINT_TYPES): Initialize intptr_t,\n+\tuintptr_t, HAVE_INTTYPES_H, HAVE_STDINT_H, HAVE_UINTPTR_T,\n+\tand HAVE_INTPTR_T.\n+\t* configure: Regenerated.\n+\t* config.in: Regenerated\n+\t* system.h (stdint.h): Add include.\n+\t(inttypes.h): Likewise.\n+\t* Makefile.in (aclocal): Add config/stdint.m4.\n+\t* aclocal.m4: Regenerated.\n+\n 2009-09-08  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* config/bfin/bfin.c (np_check_regno, np_after_branch): New static"}, {"sha": "bd1c7f08cb452a05ec5a25ddd37ee508c62b1713", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204", "patch": "@@ -1621,6 +1621,7 @@ aclocal_deps = \\\n \t$(srcdir)/../config/lib-prefix.m4 \\\n \t$(srcdir)/../config/override.m4 \\\n \t$(srcdir)/../config/progtest.m4 \\\n+        $(srcdir)/../config/stdint.m4 \\\n \t$(srcdir)/../config/unwind_ipinfo.m4 \\\n \t$(srcdir)/../config/warnings.m4 \\\n \t$(srcdir)/acinclude.m4"}, {"sha": "81108ded7e40ca75902e2df6136716b03fe0bb56", "filename": "gcc/aclocal.m4", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204/gcc%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204/gcc%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Faclocal.m4?ref=7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204", "patch": "@@ -114,6 +114,7 @@ m4_include([../config/lib-link.m4])\n m4_include([../config/lib-prefix.m4])\n m4_include([../config/override.m4])\n m4_include([../config/progtest.m4])\n+m4_include([../config/stdint.m4])\n m4_include([../config/unwind_ipinfo.m4])\n m4_include([../config/warnings.m4])\n m4_include([acinclude.m4])"}, {"sha": "40d7e4d24b6cd9e68cfc79d30eb319a57d872984", "filename": "gcc/config.in", "status": "modified", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204", "patch": "@@ -1026,6 +1026,18 @@\n #endif\n \n \n+/* Define to 1 if the system has the type `intmax_t'. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_INTMAX_T\n+#endif\n+\n+\n+/* Define to 1 if the system has the type `intptr_t'. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_INTPTR_T\n+#endif\n+\n+\n /* Define if you have a working <inttypes.h> header file. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_INTTYPES_H\n@@ -1139,6 +1151,12 @@\n #endif\n \n \n+/* Define to 1 if the system has the type `long long int'. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_LONG_LONG_INT\n+#endif\n+\n+\n /* Define to 1 if you have the <malloc.h> header file. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_MALLOC_H\n@@ -1337,12 +1355,30 @@\n #endif\n \n \n+/* Define to 1 if the system has the type `uintmax_t'. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_UINTMAX_T\n+#endif\n+\n+\n+/* Define to 1 if the system has the type `uintptr_t'. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_UINTPTR_T\n+#endif\n+\n+\n /* Define to 1 if you have the <unistd.h> header file. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_UNISTD_H\n #endif\n \n \n+/* Define to 1 if the system has the type `unsigned long long int'. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_UNSIGNED_LONG_LONG_INT\n+#endif\n+\n+\n /* Define if valgrind's valgrind/memcheck.h header is installed. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_VALGRIND_MEMCHECK_H\n@@ -1624,6 +1660,30 @@\n #endif\n \n \n+/* Define for Solaris 2.5.1 so the uint32_t typedef from <sys/synch.h>,\n+   <pthread.h>, or <semaphore.h> is not used. If the typedef were allowed, the\n+   #define below would cause a syntax error. */\n+#ifndef USED_FOR_TARGET\n+#undef _UINT32_T\n+#endif\n+\n+\n+/* Define for Solaris 2.5.1 so the uint64_t typedef from <sys/synch.h>,\n+   <pthread.h>, or <semaphore.h> is not used. If the typedef were allowed, the\n+   #define below would cause a syntax error. */\n+#ifndef USED_FOR_TARGET\n+#undef _UINT64_T\n+#endif\n+\n+\n+/* Define for Solaris 2.5.1 so the uint8_t typedef from <sys/synch.h>,\n+   <pthread.h>, or <semaphore.h> is not used. If the typedef were allowed, the\n+   #define below would cause a syntax error. */\n+#ifndef USED_FOR_TARGET\n+#undef _UINT8_T\n+#endif\n+\n+\n /* Define to `char *' if <sys/types.h> does not define. */\n #ifndef USED_FOR_TARGET\n #undef caddr_t\n@@ -1636,6 +1696,48 @@\n #undef inline\n #endif\n \n+/* Define to the type of a signed integer type of width exactly 16 bits if\n+   such a type exists and the standard includes do not define it. */\n+#ifndef USED_FOR_TARGET\n+#undef int16_t\n+#endif\n+\n+\n+/* Define to the type of a signed integer type of width exactly 32 bits if\n+   such a type exists and the standard includes do not define it. */\n+#ifndef USED_FOR_TARGET\n+#undef int32_t\n+#endif\n+\n+\n+/* Define to the type of a signed integer type of width exactly 64 bits if\n+   such a type exists and the standard includes do not define it. */\n+#ifndef USED_FOR_TARGET\n+#undef int64_t\n+#endif\n+\n+\n+/* Define to the type of a signed integer type of width exactly 8 bits if such\n+   a type exists and the standard includes do not define it. */\n+#ifndef USED_FOR_TARGET\n+#undef int8_t\n+#endif\n+\n+\n+/* Define to the widest signed integer type if <stdint.h> and <inttypes.h> do\n+   not define. */\n+#ifndef USED_FOR_TARGET\n+#undef intmax_t\n+#endif\n+\n+\n+/* Define to the type of a signed integer type wide enough to hold a pointer,\n+   if such a type exists, and if the system does not define it. */\n+#ifndef USED_FOR_TARGET\n+#undef intptr_t\n+#endif\n+\n+\n /* Define to `int' if <sys/types.h> does not define. */\n #ifndef USED_FOR_TARGET\n #undef pid_t\n@@ -1654,6 +1756,48 @@\n #endif\n \n \n+/* Define to the type of an unsigned integer type of width exactly 16 bits if\n+   such a type exists and the standard includes do not define it. */\n+#ifndef USED_FOR_TARGET\n+#undef uint16_t\n+#endif\n+\n+\n+/* Define to the type of an unsigned integer type of width exactly 32 bits if\n+   such a type exists and the standard includes do not define it. */\n+#ifndef USED_FOR_TARGET\n+#undef uint32_t\n+#endif\n+\n+\n+/* Define to the type of an unsigned integer type of width exactly 64 bits if\n+   such a type exists and the standard includes do not define it. */\n+#ifndef USED_FOR_TARGET\n+#undef uint64_t\n+#endif\n+\n+\n+/* Define to the type of an unsigned integer type of width exactly 8 bits if\n+   such a type exists and the standard includes do not define it. */\n+#ifndef USED_FOR_TARGET\n+#undef uint8_t\n+#endif\n+\n+\n+/* Define to the widest unsigned integer type if <stdint.h> and <inttypes.h>\n+   do not define. */\n+#ifndef USED_FOR_TARGET\n+#undef uintmax_t\n+#endif\n+\n+\n+/* Define to the type of an unsigned integer type wide enough to hold a\n+   pointer, if such a type exists, and if the system does not define it. */\n+#ifndef USED_FOR_TARGET\n+#undef uintptr_t\n+#endif\n+\n+\n /* Define as `fork' if `vfork' does not work. */\n #ifndef USED_FOR_TARGET\n #undef vfork"}, {"sha": "f613871f6b4aa29de234773aca0c4caa4fa4f080", "filename": "gcc/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204", "patch": "@@ -311,6 +311,7 @@ AC_CHECK_SIZEOF(int)\n AC_CHECK_SIZEOF(long)\n AC_CHECK_TYPES([long long], [AC_CHECK_SIZEOF(long long)])\n AC_CHECK_TYPES([__int64], [AC_CHECK_SIZEOF(__int64)])\n+GCC_STDINT_TYPES\n \n # ---------------------\n # Warnings and checking"}, {"sha": "1b36ddf389a1ce8dd4c5036d5cf8b1f5daa1a90e", "filename": "gcc/system.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=7c2a2dbf5018d6d79251c84d0ad0be3aee3e6204", "patch": "@@ -414,6 +414,14 @@ extern void *calloc (size_t, size_t);\n extern void *realloc (void *, size_t);\n #endif\n \n+#ifdef HAVE_STDINT_H\n+#include <stdint.h>\n+#endif\n+\n+#ifdef HAVE_INTTYPES_H\n+#include <inttypes.h>\n+#endif\n+\n /* If the system doesn't provide strsignal, we get it defined in\n    libiberty but no declaration is supplied.  */\n #if !defined (HAVE_STRSIGNAL) \\"}]}