{"sha": "f254671f2f9a83843b7b77b496689791bdfdb4fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI1NDY3MWYyZjlhODM4NDNiN2I3N2I0OTY2ODk3OTFiZGZkYjRmZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-06-15T00:12:16Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-06-15T00:12:16Z"}, "message": "Add more spellcheck selftests\n\ngcc/ChangeLog:\n\t* selftest-run-tests.c (selftest::run_tests): Call\n\tselftest::spellcheck_tree_c_tests.\n\t* selftest.h (selftest::spellcheck_tree_c_tests): New decl.\n\t* spellcheck-tree.c: Include selftest.h and stringpool.h.\n\t(selftest::test_find_closest_identifier): New function.\n\t(selftest::spellcheck_tree_c_tests): New function.\n\t* spellcheck.c (selftest::test_find_closest_string): Verify that\n\tthe order of the vec does not affect the results for this case.\n\t(selftest::test_data): New array.\n\t(selftest::test_metric_conditions): New function.\n\t(selftest::spellcheck_c_tests): Add a test of case-comparison.\n\tCall selftest::test_metric_conditions.\n\nFrom-SVN: r237466", "tree": {"sha": "cf61ac3757fd5bfdcfc0f5e53278cd0e3d0606c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf61ac3757fd5bfdcfc0f5e53278cd0e3d0606c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f254671f2f9a83843b7b77b496689791bdfdb4fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f254671f2f9a83843b7b77b496689791bdfdb4fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f254671f2f9a83843b7b77b496689791bdfdb4fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f254671f2f9a83843b7b77b496689791bdfdb4fe/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee62e30213a72a93ebee9bfbadc3612cef175957", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee62e30213a72a93ebee9bfbadc3612cef175957", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee62e30213a72a93ebee9bfbadc3612cef175957"}], "stats": {"total": 131, "additions": 131, "deletions": 0}, "files": [{"sha": "9bf0db86a7738ba8dee94107e4970b48d041e5f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f254671f2f9a83843b7b77b496689791bdfdb4fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f254671f2f9a83843b7b77b496689791bdfdb4fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f254671f2f9a83843b7b77b496689791bdfdb4fe", "patch": "@@ -1,3 +1,18 @@\n+2016-06-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* selftest-run-tests.c (selftest::run_tests): Call\n+\tselftest::spellcheck_tree_c_tests.\n+\t* selftest.h (selftest::spellcheck_tree_c_tests): New decl.\n+\t* spellcheck-tree.c: Include selftest.h and stringpool.h.\n+\t(selftest::test_find_closest_identifier): New function.\n+\t(selftest::spellcheck_tree_c_tests): New function.\n+\t* spellcheck.c (selftest::test_find_closest_string): Verify that\n+\tthe order of the vec does not affect the results for this case.\n+\t(selftest::test_data): New array.\n+\t(selftest::test_metric_conditions): New function.\n+\t(selftest::spellcheck_c_tests): Add a test of case-comparison.\n+\tCall selftest::test_metric_conditions.\n+\n 2016-06-14  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000-builtin.def (commentary): Typo."}, {"sha": "d4a9c0b26b891a3aba90f81b6a18ebb616238991", "filename": "gcc/selftest-run-tests.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f254671f2f9a83843b7b77b496689791bdfdb4fe/gcc%2Fselftest-run-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f254671f2f9a83843b7b77b496689791bdfdb4fe/gcc%2Fselftest-run-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest-run-tests.c?ref=f254671f2f9a83843b7b77b496689791bdfdb4fe", "patch": "@@ -61,6 +61,7 @@ selftest::run_tests ()\n   diagnostic_show_locus_c_tests ();\n   fold_const_c_tests ();\n   spellcheck_c_tests ();\n+  spellcheck_tree_c_tests ();\n   tree_cfg_c_tests ();\n \n   /* This one relies on most of the above.  */"}, {"sha": "2bc7316c990eaa2e27e11f9d544a1655d9f02bd3", "filename": "gcc/selftest.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f254671f2f9a83843b7b77b496689791bdfdb4fe/gcc%2Fselftest.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f254671f2f9a83843b7b77b496689791bdfdb4fe/gcc%2Fselftest.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest.h?ref=f254671f2f9a83843b7b77b496689791bdfdb4fe", "patch": "@@ -84,6 +84,7 @@ extern void input_c_tests ();\n extern void pretty_print_c_tests ();\n extern void rtl_tests_c_tests ();\n extern void spellcheck_c_tests ();\n+extern void spellcheck_tree_c_tests ();\n extern void tree_c_tests ();\n extern void tree_cfg_c_tests ();\n extern void vec_c_tests ();"}, {"sha": "2d73b7740bad9a6655673f1a9f08b021a0d6e300", "filename": "gcc/spellcheck-tree.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f254671f2f9a83843b7b77b496689791bdfdb4fe/gcc%2Fspellcheck-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f254671f2f9a83843b7b77b496689791bdfdb4fe/gcc%2Fspellcheck-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fspellcheck-tree.c?ref=f254671f2f9a83843b7b77b496689791bdfdb4fe", "patch": "@@ -23,6 +23,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"spellcheck.h\"\n+#include \"selftest.h\"\n+#include \"stringpool.h\"\n \n /* Calculate Levenshtein distance between two identifiers.  */\n \n@@ -78,3 +80,50 @@ find_closest_identifier (tree target, const auto_vec<tree> *candidates)\n \n   return best_identifier;\n }\n+\n+#if CHECKING_P\n+\n+namespace selftest {\n+\n+/* Selftests.  */\n+\n+/* Verify that find_closest_identifier is sane.  */\n+\n+static void\n+test_find_closest_identifier ()\n+{\n+  auto_vec<tree> candidates;\n+\n+  /* Verify that it can handle an empty vec.  */\n+  ASSERT_EQ (NULL, find_closest_identifier (get_identifier (\"\"), &candidates));\n+\n+  /* Verify that it works sanely for non-empty vecs.  */\n+  tree apple = get_identifier (\"apple\");\n+  tree banana = get_identifier (\"banana\");\n+  tree cherry = get_identifier (\"cherry\");\n+  candidates.safe_push (apple);\n+  candidates.safe_push (banana);\n+  candidates.safe_push (cherry);\n+\n+  ASSERT_EQ (apple, find_closest_identifier (get_identifier (\"app\"),\n+\t\t\t\t\t     &candidates));\n+  ASSERT_EQ (banana, find_closest_identifier (get_identifier (\"banyan\"),\n+\t\t\t\t\t      &candidates));;\n+  ASSERT_EQ (cherry, find_closest_identifier (get_identifier (\"berry\"),\n+\t\t\t\t\t      &candidates));\n+  ASSERT_EQ (NULL,\n+\t     find_closest_identifier (get_identifier (\"not like the others\"),\n+\t\t\t\t      &candidates));\n+}\n+\n+/* Run all of the selftests within this file.  */\n+\n+void\n+spellcheck_tree_c_tests ()\n+{\n+  test_find_closest_identifier ();\n+}\n+\n+} // namespace selftest\n+\n+#endif /* #if CHECKING_P */"}, {"sha": "e03f484d621aedaf5828ceaa354db5de24a55901", "filename": "gcc/spellcheck.c", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f254671f2f9a83843b7b77b496689791bdfdb4fe/gcc%2Fspellcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f254671f2f9a83843b7b77b496689791bdfdb4fe/gcc%2Fspellcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fspellcheck.c?ref=f254671f2f9a83843b7b77b496689791bdfdb4fe", "patch": "@@ -217,6 +217,69 @@ test_find_closest_string ()\n   ASSERT_STREQ (\"banana\", find_closest_string (\"banyan\", &candidates));\n   ASSERT_STREQ (\"cherry\", find_closest_string (\"berry\", &candidates));\n   ASSERT_EQ (NULL, find_closest_string (\"not like the others\", &candidates));\n+\n+  /* The order of the vec can matter, but it should not matter for these\n+     inputs.  */\n+  candidates.truncate (0);\n+  candidates.safe_push (\"cherry\");\n+  candidates.safe_push (\"banana\");\n+  candidates.safe_push (\"apple\");\n+  ASSERT_STREQ (\"apple\", find_closest_string (\"app\", &candidates));\n+  ASSERT_STREQ (\"banana\", find_closest_string (\"banyan\", &candidates));\n+  ASSERT_STREQ (\"cherry\", find_closest_string (\"berry\", &candidates));\n+  ASSERT_EQ (NULL, find_closest_string (\"not like the others\", &candidates));\n+}\n+\n+/* Test data for test_metric_conditions.  */\n+\n+static const char * const test_data[] = {\n+  \"\",\n+  \"foo\"\n+  \"food\",\n+  \"boo\",\n+  \"1234567890123456789012345678901234567890123456789012345678901234567890\"\n+};\n+\n+/* Verify that levenshtein_distance appears to be a sane distance function,\n+   i.e. the conditions for being a metric.  This is done directly for a\n+   small set of examples, using test_data above.  This is O(N^3) in the size\n+   of the array, due to the test for the triangle inequality, so we keep the\n+   array small.  */\n+\n+static void\n+test_metric_conditions ()\n+{\n+  const int num_test_cases = sizeof (test_data) / sizeof (test_data[0]);\n+\n+  for (int i = 0; i < num_test_cases; i++)\n+    {\n+      for (int j = 0; j < num_test_cases; j++)\n+\t{\n+\t  edit_distance_t dist_ij\n+\t    = levenshtein_distance (test_data[i], test_data[j]);\n+\n+\t  /* Identity of indiscernibles: d(i, j) > 0 iff i == j.  */\n+\t  if (i == j)\n+\t    ASSERT_EQ (dist_ij, 0);\n+\t  else\n+\t    ASSERT_TRUE (dist_ij > 0);\n+\n+\t  /* Symmetry: d(i, j) == d(j, i).  */\n+\t  edit_distance_t dist_ji\n+\t    = levenshtein_distance (test_data[j], test_data[i]);\n+\t  ASSERT_EQ (dist_ij, dist_ji);\n+\n+\t  /* Triangle inequality.  */\n+\t  for (int k = 0; k < num_test_cases; k++)\n+\t    {\n+\t      edit_distance_t dist_ik\n+\t\t= levenshtein_distance (test_data[i], test_data[k]);\n+\t      edit_distance_t dist_jk\n+\t\t= levenshtein_distance (test_data[j], test_data[k]);\n+\t      ASSERT_TRUE (dist_ik <= dist_ij + dist_jk);\n+\t    }\n+\t}\n+    }\n }\n \n /* Verify levenshtein_distance for a variety of pairs of pre-canned\n@@ -239,8 +302,10 @@ spellcheck_c_tests ()\n     (\"Lorem ipsum dolor sit amet, consectetur adipiscing elit,\",\n      \"All your base are belong to us\",\n      44);\n+  levenshtein_distance_unit_test (\"foo\", \"FOO\", 3);\n \n   test_find_closest_string ();\n+  test_metric_conditions ();\n }\n \n } // namespace selftest"}]}