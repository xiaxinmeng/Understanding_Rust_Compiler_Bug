{"sha": "82a5e8985ccd0adc31b6208c55658b4b44eea7b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJhNWU4OTg1Y2NkMGFkYzMxYjYyMDhjNTU2NThiNGI0NGVlYTdiNw==", "commit": {"author": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-07-06T20:21:37Z"}, "committer": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-07-06T20:21:37Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1477", "tree": {"sha": "5d7777f9c20fd941eb557c36581ad34699c01f00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d7777f9c20fd941eb557c36581ad34699c01f00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82a5e8985ccd0adc31b6208c55658b4b44eea7b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82a5e8985ccd0adc31b6208c55658b4b44eea7b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82a5e8985ccd0adc31b6208c55658b4b44eea7b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82a5e8985ccd0adc31b6208c55658b4b44eea7b7/comments", "author": null, "committer": null, "parents": [{"sha": "c166a31116c7a33593aa2c54b0763d70c7dd4391", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c166a31116c7a33593aa2c54b0763d70c7dd4391", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c166a31116c7a33593aa2c54b0763d70c7dd4391"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "a47e691a54d87b6d2617cc117585ef6d8cb39a30", "filename": "gcc/cse.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a5e8985ccd0adc31b6208c55658b4b44eea7b7/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a5e8985ccd0adc31b6208c55658b4b44eea7b7/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=82a5e8985ccd0adc31b6208c55658b4b44eea7b7", "patch": "@@ -2895,7 +2895,7 @@ simplify_unary_operation (code, mode, op, op_mode)\n \tcase ZERO_EXTEND:\n \t  if (op_mode == VOIDmode)\n \t    op_mode = mode;\n-\t  if (GET_MODE_BITSIZE (op_mode) == HOST_BITS_PER_INT)\n+\t  if (GET_MODE_BITSIZE (op_mode) == HOST_BITS_PER_WIDE_INT)\n \t    {\n \t      /* If we were really extending the mode,\n \t\t we would have to distinguish between zero-extension\n@@ -2904,16 +2904,16 @@ simplify_unary_operation (code, mode, op, op_mode)\n \t\tabort ();\n \t      val = arg0;\n \t    }\n-\t  else if (GET_MODE_BITSIZE (op_mode) < HOST_BITS_PER_INT)\n-\t    val = arg0 & ~((-1) << GET_MODE_BITSIZE (op_mode));\n+\t  else if (GET_MODE_BITSIZE (op_mode) < HOST_BITS_PER_WIDE_INT)\n+\t    val = arg0 & ~((HOST_WIDE_INT) (-1) << GET_MODE_BITSIZE (op_mode));\n \t  else\n \t    return 0;\n \t  break;\n \n \tcase SIGN_EXTEND:\n \t  if (op_mode == VOIDmode)\n \t    op_mode = mode;\n-\t  if (GET_MODE_BITSIZE (op_mode) == HOST_BITS_PER_INT)\n+\t  if (GET_MODE_BITSIZE (op_mode) == HOST_BITS_PER_WIDE_INT)\n \t    {\n \t      /* If we were really extending the mode,\n \t\t we would have to distinguish between zero-extension\n@@ -2924,9 +2924,11 @@ simplify_unary_operation (code, mode, op, op_mode)\n \t    }\n \t  else if (GET_MODE_BITSIZE (op_mode) < HOST_BITS_PER_INT)\n \t    {\n-\t      val = arg0 & ~((-1) << GET_MODE_BITSIZE (op_mode));\n-\t      if (val & (1 << (GET_MODE_BITSIZE (op_mode) - 1)))\n-\t\tval -= 1 << GET_MODE_BITSIZE (op_mode);\n+\t      val\n+\t\t= arg0 & ~((HOST_WIDE_INT) (-1) << GET_MODE_BITSIZE (op_mode));\n+\t      if (val\n+\t\t  & ((HOST_WIDE_INT) 1 << (GET_MODE_BITSIZE (op_mode) - 1)))\n+\t\tval -= (HOST_WIDE_INT) 1 << GET_MODE_BITSIZE (op_mode);\n \t    }\n \t  else\n \t    return 0;"}]}