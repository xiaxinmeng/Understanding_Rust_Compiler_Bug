{"sha": "4ff685759913e6b86d027c6007c592460e17974f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZmNjg1NzU5OTEzZTZiODZkMDI3YzYwMDdjNTkyNDYwZTE3OTc0Zg==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-18T17:54:30Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-18T17:54:30Z"}, "message": "[ARM][GCC][1/5x]: MVE store intrinsics.\n\nThis patch supports the following MVE ACLE store intrinsics.\n\nvstrbq_scatter_offset_s8, vstrbq_scatter_offset_s32, vstrbq_scatter_offset_s16, vstrbq_scatter_offset_u8, vstrbq_scatter_offset_u32, vstrbq_scatter_offset_u16, vstrbq_s8, vstrbq_s32, vstrbq_s16, vstrbq_u8, vstrbq_u32, vstrbq_u16, vstrwq_scatter_base_s32, vstrwq_scatter_base_u32.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1]  https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm-builtins.c (STRS_QUALIFIERS): Define builtin qualifier.\n\t(STRU_QUALIFIERS): Likewise.\n\t(STRSS_QUALIFIERS): Likewise.\n\t(STRSU_QUALIFIERS): Likewise.\n\t(STRSBS_QUALIFIERS): Likewise.\n\t(STRSBU_QUALIFIERS): Likewise.\n\t* config/arm/arm_mve.h (vstrbq_s8): Define macro.\n\t(vstrbq_u8): Likewise.\n\t(vstrbq_u16): Likewise.\n\t(vstrbq_scatter_offset_s8): Likewise.\n\t(vstrbq_scatter_offset_u8): Likewise.\n\t(vstrbq_scatter_offset_u16): Likewise.\n\t(vstrbq_s16): Likewise.\n\t(vstrbq_u32): Likewise.\n\t(vstrbq_scatter_offset_s16): Likewise.\n\t(vstrbq_scatter_offset_u32): Likewise.\n\t(vstrbq_s32): Likewise.\n\t(vstrbq_scatter_offset_s32): Likewise.\n\t(vstrwq_scatter_base_s32): Likewise.\n\t(vstrwq_scatter_base_u32): Likewise.\n\t(__arm_vstrbq_scatter_offset_s8): Define intrinsic.\n\t(__arm_vstrbq_scatter_offset_s32): Likewise.\n\t(__arm_vstrbq_scatter_offset_s16): Likewise.\n\t(__arm_vstrbq_scatter_offset_u8): Likewise.\n\t(__arm_vstrbq_scatter_offset_u32): Likewise.\n\t(__arm_vstrbq_scatter_offset_u16): Likewise.\n\t(__arm_vstrbq_s8): Likewise.\n\t(__arm_vstrbq_s32): Likewise.\n\t(__arm_vstrbq_s16): Likewise.\n\t(__arm_vstrbq_u8): Likewise.\n\t(__arm_vstrbq_u32): Likewise.\n\t(__arm_vstrbq_u16): Likewise.\n\t(__arm_vstrwq_scatter_base_s32): Likewise.\n\t(__arm_vstrwq_scatter_base_u32): Likewise.\n\t(vstrbq): Define polymorphic variant.\n\t(vstrbq_scatter_offset): Likewise.\n\t(vstrwq_scatter_base): Likewise.\n\t* config/arm/arm_mve_builtins.def (STRS_QUALIFIERS): Use builtin\n\tqualifier.\n\t(STRU_QUALIFIERS): Likewise.\n\t(STRSS_QUALIFIERS): Likewise.\n\t(STRSU_QUALIFIERS): Likewise.\n\t(STRSBS_QUALIFIERS): Likewise.\n\t(STRSBU_QUALIFIERS): Likewise.\n\t* config/arm/mve.md (MVE_B_ELEM): Define mode attribute iterator.\n\t(VSTRWSBQ): Define iterators.\n\t(VSTRBSOQ): Likewise.\n\t(VSTRBQ): Likewise.\n\t(mve_vstrbq_<supf><mode>): Define RTL pattern.\n\t(mve_vstrbq_scatter_offset_<supf><mode>): Likewise.\n\t(mve_vstrwq_scatter_base_<supf>v4si): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vstrbq_s16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrbq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_u32.c: Likewise.", "tree": {"sha": "92ba15a69649bf495d1c22a12a2c92c50ecd0451", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92ba15a69649bf495d1c22a12a2c92c50ecd0451"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ff685759913e6b86d027c6007c592460e17974f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ff685759913e6b86d027c6007c592460e17974f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ff685759913e6b86d027c6007c592460e17974f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ff685759913e6b86d027c6007c592460e17974f/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "532e9e2402a62367b965b0901478d27570b6d3a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/532e9e2402a62367b965b0901478d27570b6d3a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/532e9e2402a62367b965b0901478d27570b6d3a2"}], "stats": {"total": 635, "additions": 633, "deletions": 2}, "files": [{"sha": "be4eb7e17b89888d59cd74d9e6d8cc69124dc34a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff685759913e6b86d027c6007c592460e17974f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff685759913e6b86d027c6007c592460e17974f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ff685759913e6b86d027c6007c592460e17974f", "patch": "@@ -1,3 +1,59 @@\n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm-builtins.c (STRS_QUALIFIERS): Define builtin qualifier.\n+\t(STRU_QUALIFIERS): Likewise.\n+\t(STRSS_QUALIFIERS): Likewise.\n+\t(STRSU_QUALIFIERS): Likewise.\n+\t(STRSBS_QUALIFIERS): Likewise.\n+\t(STRSBU_QUALIFIERS): Likewise.\n+\t* config/arm/arm_mve.h (vstrbq_s8): Define macro.\n+\t(vstrbq_u8): Likewise.\n+\t(vstrbq_u16): Likewise.\n+\t(vstrbq_scatter_offset_s8): Likewise.\n+\t(vstrbq_scatter_offset_u8): Likewise.\n+\t(vstrbq_scatter_offset_u16): Likewise.\n+\t(vstrbq_s16): Likewise.\n+\t(vstrbq_u32): Likewise.\n+\t(vstrbq_scatter_offset_s16): Likewise.\n+\t(vstrbq_scatter_offset_u32): Likewise.\n+\t(vstrbq_s32): Likewise.\n+\t(vstrbq_scatter_offset_s32): Likewise.\n+\t(vstrwq_scatter_base_s32): Likewise.\n+\t(vstrwq_scatter_base_u32): Likewise.\n+\t(__arm_vstrbq_scatter_offset_s8): Define intrinsic.\n+\t(__arm_vstrbq_scatter_offset_s32): Likewise.\n+\t(__arm_vstrbq_scatter_offset_s16): Likewise.\n+\t(__arm_vstrbq_scatter_offset_u8): Likewise.\n+\t(__arm_vstrbq_scatter_offset_u32): Likewise.\n+\t(__arm_vstrbq_scatter_offset_u16): Likewise.\n+\t(__arm_vstrbq_s8): Likewise.\n+\t(__arm_vstrbq_s32): Likewise.\n+\t(__arm_vstrbq_s16): Likewise.\n+\t(__arm_vstrbq_u8): Likewise.\n+\t(__arm_vstrbq_u32): Likewise.\n+\t(__arm_vstrbq_u16): Likewise.\n+\t(__arm_vstrwq_scatter_base_s32): Likewise.\n+\t(__arm_vstrwq_scatter_base_u32): Likewise.\n+\t(vstrbq): Define polymorphic variant.\n+\t(vstrbq_scatter_offset): Likewise.\n+\t(vstrwq_scatter_base): Likewise.\n+\t* config/arm/arm_mve_builtins.def (STRS_QUALIFIERS): Use builtin\n+\tqualifier.\n+\t(STRU_QUALIFIERS): Likewise.\n+\t(STRSS_QUALIFIERS): Likewise.\n+\t(STRSU_QUALIFIERS): Likewise.\n+\t(STRSBS_QUALIFIERS): Likewise.\n+\t(STRSBU_QUALIFIERS): Likewise.\n+\t* config/arm/mve.md (MVE_B_ELEM): Define mode attribute iterator.\n+\t(VSTRWSBQ): Define iterators.\n+\t(VSTRBSOQ): Likewise. \n+\t(VSTRBQ): Likewise.\n+\t(mve_vstrbq_<supf><mode>): Define RTL pattern.\n+\t(mve_vstrbq_scatter_offset_<supf><mode>): Likewise.\n+\t(mve_vstrwq_scatter_base_<supf>v4si): Likewise.\n+\n 2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "b285f074285116ce621e324b644d43efb6538b9d", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=4ff685759913e6b86d027c6007c592460e17974f", "patch": "@@ -579,6 +579,39 @@ arm_quadop_unone_unone_unone_none_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n #define QUADOP_UNONE_UNONE_UNONE_NONE_UNONE_QUALIFIERS \\\n   (arm_quadop_unone_unone_unone_none_unone_qualifiers)\n \n+static enum arm_type_qualifiers\n+arm_strs_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_void, qualifier_pointer, qualifier_none };\n+#define STRS_QUALIFIERS (arm_strs_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_stru_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_void, qualifier_pointer, qualifier_unsigned };\n+#define STRU_QUALIFIERS (arm_stru_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_strss_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_void, qualifier_pointer, qualifier_unsigned,\n+      qualifier_none};\n+#define STRSS_QUALIFIERS (arm_strss_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_strsu_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_void, qualifier_pointer, qualifier_unsigned,\n+      qualifier_unsigned};\n+#define STRSU_QUALIFIERS (arm_strsu_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_strsbs_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_void, qualifier_unsigned, qualifier_immediate, qualifier_none};\n+#define STRSBS_QUALIFIERS (arm_strsbs_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_strsbu_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_void, qualifier_unsigned, qualifier_immediate,\n+      qualifier_unsigned};\n+#define STRSBU_QUALIFIERS (arm_strsbu_qualifiers)\n+\n /* End of Qualifier for MVE builtins.  */\n \n    /* void ([T element type] *, T, immediate).  */"}, {"sha": "019e907c6dc0b0572b7597f9e82b7ad8e6331bef", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=4ff685759913e6b86d027c6007c592460e17974f", "patch": "@@ -1702,6 +1702,20 @@ typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n #define vsubq_m_f16(__inactive, __a, __b, __p) __arm_vsubq_m_f16(__inactive, __a, __b, __p)\n #define vsubq_m_n_f32(__inactive, __a, __b, __p) __arm_vsubq_m_n_f32(__inactive, __a, __b, __p)\n #define vsubq_m_n_f16(__inactive, __a, __b, __p) __arm_vsubq_m_n_f16(__inactive, __a, __b, __p)\n+#define vstrbq_s8( __addr, __value) __arm_vstrbq_s8( __addr, __value)\n+#define vstrbq_u8( __addr, __value) __arm_vstrbq_u8( __addr, __value)\n+#define vstrbq_u16( __addr, __value) __arm_vstrbq_u16( __addr, __value)\n+#define vstrbq_scatter_offset_s8( __base, __offset, __value) __arm_vstrbq_scatter_offset_s8( __base, __offset, __value)\n+#define vstrbq_scatter_offset_u8( __base, __offset, __value) __arm_vstrbq_scatter_offset_u8( __base, __offset, __value)\n+#define vstrbq_scatter_offset_u16( __base, __offset, __value) __arm_vstrbq_scatter_offset_u16( __base, __offset, __value)\n+#define vstrbq_s16( __addr, __value) __arm_vstrbq_s16( __addr, __value)\n+#define vstrbq_u32( __addr, __value) __arm_vstrbq_u32( __addr, __value)\n+#define vstrbq_scatter_offset_s16( __base, __offset, __value) __arm_vstrbq_scatter_offset_s16( __base, __offset, __value)\n+#define vstrbq_scatter_offset_u32( __base, __offset, __value) __arm_vstrbq_scatter_offset_u32( __base, __offset, __value)\n+#define vstrbq_s32( __addr, __value) __arm_vstrbq_s32( __addr, __value)\n+#define vstrbq_scatter_offset_s32( __base, __offset, __value) __arm_vstrbq_scatter_offset_s32( __base, __offset, __value)\n+#define vstrwq_scatter_base_s32(__addr,  __offset, __value) __arm_vstrwq_scatter_base_s32(__addr,  __offset, __value)\n+#define vstrwq_scatter_base_u32(__addr,  __offset, __value) __arm_vstrwq_scatter_base_u32(__addr,  __offset, __value)\n #endif\n \n __extension__ extern __inline void\n@@ -10995,6 +11009,103 @@ __arm_vshrntq_m_n_u16 (uint8x16_t __a, uint16x8_t __b, const int __imm, mve_pred\n   return __builtin_mve_vshrntq_m_n_uv8hi (__a, __b, __imm, __p);\n }\n \n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrbq_scatter_offset_s8 (int8_t * __base, uint8x16_t __offset, int8x16_t __value)\n+{\n+  __builtin_mve_vstrbq_scatter_offset_sv16qi ((__builtin_neon_qi *) __base, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrbq_scatter_offset_s32 (int8_t * __base, uint32x4_t __offset, int32x4_t __value)\n+{\n+  __builtin_mve_vstrbq_scatter_offset_sv4si ((__builtin_neon_qi *) __base, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrbq_scatter_offset_s16 (int8_t * __base, uint16x8_t __offset, int16x8_t __value)\n+{\n+  __builtin_mve_vstrbq_scatter_offset_sv8hi ((__builtin_neon_qi *) __base, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrbq_scatter_offset_u8 (uint8_t * __base, uint8x16_t __offset, uint8x16_t __value)\n+{\n+  __builtin_mve_vstrbq_scatter_offset_uv16qi ((__builtin_neon_qi *) __base, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrbq_scatter_offset_u32 (uint8_t * __base, uint32x4_t __offset, uint32x4_t __value)\n+{\n+  __builtin_mve_vstrbq_scatter_offset_uv4si ((__builtin_neon_qi *) __base, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrbq_scatter_offset_u16 (uint8_t * __base, uint16x8_t __offset, uint16x8_t __value)\n+{\n+  __builtin_mve_vstrbq_scatter_offset_uv8hi ((__builtin_neon_qi *) __base, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrbq_s8 (int8_t * __addr, int8x16_t __value)\n+{\n+  __builtin_mve_vstrbq_sv16qi ((__builtin_neon_qi *) __addr, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrbq_s32 (int8_t * __addr, int32x4_t __value)\n+{\n+  __builtin_mve_vstrbq_sv4si ((__builtin_neon_qi *) __addr, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrbq_s16 (int8_t * __addr, int16x8_t __value)\n+{\n+  __builtin_mve_vstrbq_sv8hi ((__builtin_neon_qi *) __addr, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrbq_u8 (uint8_t * __addr, uint8x16_t __value)\n+{\n+  __builtin_mve_vstrbq_uv16qi ((__builtin_neon_qi *) __addr, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrbq_u32 (uint8_t * __addr, uint32x4_t __value)\n+{\n+  __builtin_mve_vstrbq_uv4si ((__builtin_neon_qi *) __addr, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrbq_u16 (uint8_t * __addr, uint16x8_t __value)\n+{\n+  __builtin_mve_vstrbq_uv8hi ((__builtin_neon_qi *) __addr, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_scatter_base_s32 (uint32x4_t __addr, const int __offset, int32x4_t __value)\n+{\n+  __builtin_mve_vstrwq_scatter_base_sv4si (__addr, __offset, __value);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vstrwq_scatter_base_u32 (uint32x4_t __addr, const int __offset, uint32x4_t __value)\n+{\n+  __builtin_mve_vstrwq_scatter_base_uv4si (__addr, __offset, __value);\n+}\n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n \n __extension__ extern __inline void\n@@ -17630,6 +17741,35 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vmulq_m_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t), p3), \\\n   int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vmulq_m_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t), p3));})\n \n+#define vstrbq(p0,p1) __arm_vstrbq(p0,p1)\n+#define __arm_vstrbq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8_t_ptr][__ARM_mve_type_int8x16_t]: __arm_vstrbq_s8 (__ARM_mve_coerce(__p0, int8_t *), __ARM_mve_coerce(__p1, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int8_t_ptr][__ARM_mve_type_int16x8_t]: __arm_vstrbq_s16 (__ARM_mve_coerce(__p0, int8_t *), __ARM_mve_coerce(__p1, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int8_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vstrbq_s32 (__ARM_mve_coerce(__p0, int8_t *), __ARM_mve_coerce(__p1, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint8_t_ptr][__ARM_mve_type_uint8x16_t]: __arm_vstrbq_u8 (__ARM_mve_coerce(__p0, uint8_t *), __ARM_mve_coerce(__p1, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint8_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vstrbq_u16 (__ARM_mve_coerce(__p0, uint8_t *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint8_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrbq_u32 (__ARM_mve_coerce(__p0, uint8_t *), __ARM_mve_coerce(__p1, uint32x4_t)));})\n+\n+#define vstrbq_scatter_offset(p0,p1,p2) __arm_vstrbq_scatter_offset(p0,p1,p2)\n+#define __arm_vstrbq_scatter_offset(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int8_t_ptr][__ARM_mve_type_uint8x16_t][__ARM_mve_type_int8x16_t]: __arm_vstrbq_scatter_offset_s8 (__ARM_mve_coerce(__p0, int8_t *), __ARM_mve_coerce(__p1, uint8x16_t), __ARM_mve_coerce(__p2, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int8_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int16x8_t]: __arm_vstrbq_scatter_offset_s16 (__ARM_mve_coerce(__p0, int8_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int8_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int32x4_t]: __arm_vstrbq_scatter_offset_s32 (__ARM_mve_coerce(__p0, int8_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint8_t_ptr][__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8x16_t]: __arm_vstrbq_scatter_offset_u8 (__ARM_mve_coerce(__p0, uint8_t *), __ARM_mve_coerce(__p1, uint8x16_t), __ARM_mve_coerce(__p2, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint8_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vstrbq_scatter_offset_u16 (__ARM_mve_coerce(__p0, uint8_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint8_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vstrbq_scatter_offset_u32 (__ARM_mve_coerce(__p0, uint8_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t)));})\n+\n+#define vstrwq_scatter_base(p0,p1,p2) __arm_vstrwq_scatter_base(p0,p1,p2)\n+#define __arm_vstrwq_scatter_base(p0,p1,p2) ({ __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vstrwq_scatter_base_s32(p0, p1, __ARM_mve_coerce(__p2, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vstrwq_scatter_base_u32(p0, p1, __ARM_mve_coerce(__p2, uint32x4_t)));})\n+\n #endif /* MVE Integer.  */\n \n #define vqrdmlahq_m(p0,p1,p2,p3) __arm_vqrdmlahq_m(p0,p1,p2,p3)"}, {"sha": "2c675240984ac3aa64faf6a9199441c29528c704", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=4ff685759913e6b86d027c6007c592460e17974f", "patch": "@@ -685,3 +685,9 @@ VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vandq_m_f, v8hf, v4sf)\n VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vaddq_m_n_f, v8hf, v4sf)\n VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vaddq_m_f, v8hf, v4sf)\n VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vabdq_m_f, v8hf, v4sf)\n+VAR3 (STRS, vstrbq_s, v16qi, v8hi, v4si)\n+VAR3 (STRU, vstrbq_u, v16qi, v8hi, v4si)\n+VAR3 (STRSS, vstrbq_scatter_offset_s, v16qi, v8hi, v4si)\n+VAR3 (STRSU, vstrbq_scatter_offset_u, v16qi, v8hi, v4si)\n+VAR1 (STRSBS, vstrwq_scatter_base_s, v4si)\n+VAR1 (STRSBU, vstrwq_scatter_base_u, v4si)"}, {"sha": "3d0a1725d416aa3e465de9409977394d06c19897", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 71, "deletions": 2, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=4ff685759913e6b86d027c6007c592460e17974f", "patch": "@@ -191,7 +191,8 @@\n \t\t\t VCMLAQ_ROT90_M_F VCMULQ_M_F VCMULQ_ROT180_M_F\n \t\t\t VCMULQ_ROT270_M_F VCMULQ_ROT90_M_F VFMAQ_M_F\n \t\t\t VFMAQ_M_N_F VFMASQ_M_N_F VFMSQ_M_F VMAXNMQ_M_F\n-\t\t\t VMINNMQ_M_F VSUBQ_M_F])\n+\t\t\t VMINNMQ_M_F VSUBQ_M_F VSTRWQSB_S VSTRWQSB_U\n+\t\t\t VSTRBQSO_S VSTRBQSO_U VSTRBQ_S VSTRBQ_U])\n \n (define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\")\n \t\t\t    (V8HF \"V8HI\") (V4SF \"V4SI\")])\n@@ -342,7 +343,9 @@\n \t\t       (VQRSHRNTQ_M_N_S \"s\") (VQRSHRNTQ_M_N_U \"u\")\n \t\t       (VQRSHRNBQ_M_N_S \"s\") (VQRSHRNBQ_M_N_U \"u\")\n \t\t       (VMLALDAVAXQ_P_S \"s\") (VMLALDAVAXQ_P_U \"u\")\n-\t\t       (VMLALDAVAQ_P_S \"s\") (VMLALDAVAQ_P_U \"u\")])\n+\t\t       (VMLALDAVAQ_P_S \"s\") (VMLALDAVAQ_P_U \"u\")\n+\t\t       (VSTRWQSB_S \"s\") (VSTRWQSB_U \"u\") (VSTRBQSO_S \"s\")\n+\t\t       (VSTRBQSO_U \"u\") (VSTRBQ_S \"s\") (VSTRBQ_U \"u\")])\n \n (define_int_attr mode1 [(VCTP8Q \"8\") (VCTP16Q \"16\") (VCTP32Q \"32\")\n \t\t\t(VCTP64Q \"64\") (VCTP8Q_M \"8\") (VCTP16Q_M \"16\")\n@@ -359,6 +362,7 @@\n \n (define_mode_attr MVE_constraint1 [ (V8HI \"Ra\") (V4SI \"Rc\")])\n (define_mode_attr MVE_pred1 [ (V8HI \"mve_imm_7\") (V4SI \"mve_imm_15\")])\n+(define_mode_attr MVE_B_ELEM [ (V16QI \"V16QI\") (V8HI \"V8QI\") (V4SI \"V4QI\")])\n \n (define_int_iterator VCVTQ_TO_F [VCVTQ_TO_F_S VCVTQ_TO_F_U])\n (define_int_iterator VMVNQ_N [VMVNQ_N_U VMVNQ_N_S])\n@@ -562,6 +566,9 @@\n (define_int_iterator VSHLLTQ_M_N [VSHLLTQ_M_N_U VSHLLTQ_M_N_S])\n (define_int_iterator VSHRNBQ_M_N [VSHRNBQ_M_N_S VSHRNBQ_M_N_U])\n (define_int_iterator VSHRNTQ_M_N [VSHRNTQ_M_N_S VSHRNTQ_M_N_U])\n+(define_int_iterator VSTRWSBQ [VSTRWQSB_S VSTRWQSB_U])\n+(define_int_iterator VSTRBSOQ [VSTRBQSO_S VSTRBQSO_U])\n+(define_int_iterator VSTRBQ [VSTRBQ_S VSTRBQ_U])\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Us\")\n@@ -7940,3 +7947,65 @@\n   \"vpst\\;vsubt.f%#<V_sz_elem>\\t%q0, %q2, %3\"\n   [(set_attr \"type\" \"mve_move\")\n    (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vstrbq_s vstrbq_u]\n+;;\n+(define_insn \"mve_vstrbq_<supf><mode>\"\n+  [(set (match_operand:<MVE_B_ELEM> 0 \"memory_operand\" \"=Us\")\n+\t(unspec:<MVE_B_ELEM> [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")]\n+\t VSTRBQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[2];\n+   int regno = REGNO (operands[1]);\n+   ops[1] = gen_rtx_REG (TImode, regno);\n+   ops[0]  = operands[0];\n+   output_asm_insn(\"vstrb.<V_sz_elem>\\t%q1, %E0\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vstrbq_scatter_offset_s vstrbq_scatter_offset_u]\n+;;\n+(define_insn \"mve_vstrbq_scatter_offset_<supf><mode>\"\n+  [(set (match_operand:<MVE_B_ELEM> 0 \"memory_operand\" \"=Us\")\n+\t(unspec:<MVE_B_ELEM>\n+\t\t[(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VSTRBSOQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn(\"vstrb.<V_sz_elem>\\t%q2, [%m0, %q1]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vstrwq_scatter_base_s vstrwq_scatter_base_u]\n+;;\n+(define_insn \"mve_vstrwq_scatter_base_<supf>v4si\"\n+  [(set (mem:BLK (scratch))\n+\t(unspec:BLK\n+\t\t[(match_operand:V4SI 0 \"s_register_operand\" \"w\")\n+\t\t (match_operand:SI 1 \"immediate_operand\" \"i\")\n+\t\t (match_operand:V4SI 2 \"s_register_operand\" \"w\")]\n+\t VSTRWSBQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn(\"vstrw.u32\\t%q2, [%q0, %1]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])"}, {"sha": "9b79f8d3b9f6c8fd51fbc9668493dda1678fae97", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4ff685759913e6b86d027c6007c592460e17974f", "patch": "@@ -1,3 +1,22 @@\n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vstrbq_s16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vstrbq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrbq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrbq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrbq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrbq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_u32.c: Likewise.\n+\n 2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "80fce9caebed26f782a10aa2b2aa2094e02f0af2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrbq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_s16.c?ref=4ff685759913e6b86d027c6007c592460e17974f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int8_t * addr, int16x8_t value)\n+{\n+  vstrbq_s16 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.16\"  }  } */\n+\n+void\n+foo1 (int8_t * addr, int16x8_t value)\n+{\n+  vstrbq (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.16\"  }  } */"}, {"sha": "ae3c89e0d4becc810a08f52c6349582f70334649", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrbq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_s32.c?ref=4ff685759913e6b86d027c6007c592460e17974f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int8_t * addr, int32x4_t value)\n+{\n+  vstrbq_s32 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.32\"  }  } */\n+\n+void\n+foo1 (int8_t * addr, int32x4_t value)\n+{\n+  vstrbq (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.32\"  }  } */"}, {"sha": "72a3673dd5f2707f2809ba2ae0eb55fbffecd69e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrbq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_s8.c?ref=4ff685759913e6b86d027c6007c592460e17974f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int8_t * addr, int8x16_t value)\n+{\n+  vstrbq_s8 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.8\"  }  } */\n+\n+void\n+foo1 (int8_t * addr, int8x16_t value)\n+{\n+  vstrbq (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.8\"  }  } */"}, {"sha": "b4ad4f7e3a57473d9a99be66b3aaf803f76003e7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_s16.c?ref=4ff685759913e6b86d027c6007c592460e17974f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int8_t * base, uint16x8_t offset, int16x8_t value)\n+{\n+  vstrbq_scatter_offset_s16 (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.16\"  }  } */\n+\n+void\n+foo1 (int8_t * base, uint16x8_t offset, int16x8_t value)\n+{\n+  vstrbq_scatter_offset (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.16\"  }  } */"}, {"sha": "507eef819914bea10e6fd017d4cda902d568d767", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_s32.c?ref=4ff685759913e6b86d027c6007c592460e17974f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int8_t * base, uint32x4_t offset, int32x4_t value)\n+{\n+  vstrbq_scatter_offset_s32 (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.32\"  }  } */\n+\n+void\n+foo1 (int8_t * base, uint32x4_t offset, int32x4_t value)\n+{\n+  vstrbq_scatter_offset (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.32\"  }  } */"}, {"sha": "f5467c3bc3d086dc7c88bbe8073c65cdc3c718f9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_s8.c?ref=4ff685759913e6b86d027c6007c592460e17974f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int8_t * base, uint8x16_t offset, int8x16_t value)\n+{\n+  vstrbq_scatter_offset_s8 (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.8\"  }  } */\n+\n+void\n+foo1 (int8_t * base, uint8x16_t offset, int8x16_t value)\n+{\n+  vstrbq_scatter_offset (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.8\"  }  } */"}, {"sha": "cea669925436dc4a6867dafb47356642a7ee7238", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_u16.c?ref=4ff685759913e6b86d027c6007c592460e17974f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint8_t * base, uint16x8_t offset, uint16x8_t value)\n+{\n+  vstrbq_scatter_offset_u16 (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.16\"  }  } */\n+\n+void\n+foo1 (uint8_t * base, uint16x8_t offset, uint16x8_t value)\n+{\n+  vstrbq_scatter_offset (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.16\"  }  } */"}, {"sha": "6ad7ec6f738e95056fd947fff979aafc2ecb7107", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_u32.c?ref=4ff685759913e6b86d027c6007c592460e17974f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint8_t * base, uint32x4_t offset, uint32x4_t value)\n+{\n+  vstrbq_scatter_offset_u32 (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.32\"  }  } */\n+\n+void\n+foo1 (uint8_t * base, uint32x4_t offset, uint32x4_t value)\n+{\n+  vstrbq_scatter_offset (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.32\"  }  } */"}, {"sha": "4122622142d4d600b9fe992f4d0936f1ac0c2f42", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrbq_scatter_offset_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_scatter_offset_u8.c?ref=4ff685759913e6b86d027c6007c592460e17974f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint8_t * base, uint8x16_t offset, uint8x16_t value)\n+{\n+  vstrbq_scatter_offset_u8 (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.8\"  }  } */\n+\n+void\n+foo1 (uint8_t * base, uint8x16_t offset, uint8x16_t value)\n+{\n+  vstrbq_scatter_offset (base, offset, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.8\"  }  } */"}, {"sha": "5871fbdbfa046e45cb47d3211afc5df7d9c1855d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrbq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_u16.c?ref=4ff685759913e6b86d027c6007c592460e17974f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint8_t * addr, uint16x8_t value)\n+{\n+  vstrbq_u16 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.16\"  }  } */\n+\n+void\n+foo1 (uint8_t * addr, uint16x8_t value)\n+{\n+  vstrbq (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.16\"  }  } */"}, {"sha": "31d6d86f9fd85854c4f2e333aef00a9d9d536d60", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrbq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_u32.c?ref=4ff685759913e6b86d027c6007c592460e17974f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint8_t * addr, uint32x4_t value)\n+{\n+  vstrbq_u32 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.32\"  }  } */\n+\n+void\n+foo1 (uint8_t * addr, uint32x4_t value)\n+{\n+  vstrbq (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.32\"  }  } */"}, {"sha": "7415b98e35e8c973b376598226417942812bfd28", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrbq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrbq_u8.c?ref=4ff685759913e6b86d027c6007c592460e17974f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint8_t * addr, uint8x16_t value)\n+{\n+  vstrbq_u8 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.8\"  }  } */\n+\n+void\n+foo1 (uint8_t * addr, uint8x16_t value)\n+{\n+  vstrbq (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrb.8\"  }  } */"}, {"sha": "0fb6af6b7c96b325e1d76699f42e86f7280884ee", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_s32.c?ref=4ff685759913e6b86d027c6007c592460e17974f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint32x4_t addr, int32x4_t value)\n+{\n+  vstrwq_scatter_base_s32 (addr, 8, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.u32\"  }  } */\n+\n+void\n+foo1 (uint32x4_t addr, int32x4_t value)\n+{\n+  vstrwq_scatter_base (addr, 8, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.u32\"  }  } */"}, {"sha": "795c0b44e69ea9b969b1d4385b6f43de5d4923f2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vstrwq_scatter_base_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff685759913e6b86d027c6007c592460e17974f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvstrwq_scatter_base_u32.c?ref=4ff685759913e6b86d027c6007c592460e17974f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint32x4_t addr, uint32x4_t value)\n+{\n+  vstrwq_scatter_base_u32 (addr, 8, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.u32\"  }  } */\n+\n+void\n+foo1 (uint32x4_t addr, uint32x4_t value)\n+{\n+  vstrwq_scatter_base (addr, 8, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vstrw.u32\"  }  } */"}]}