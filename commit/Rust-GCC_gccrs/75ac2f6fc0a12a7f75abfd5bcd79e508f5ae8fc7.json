{"sha": "75ac2f6fc0a12a7f75abfd5bcd79e508f5ae8fc7", "node_id": "C_kwDOANBUbNoAKDc1YWMyZjZmYzBhMTJhN2Y3NWFiZmQ1YmNkNzllNTA4ZjVhZThmYzc", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-22T10:04:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-22T10:04:28Z"}, "message": "Merge #1147\n\n1147: Add missing coercion rule from array to slice r=philberty a=philberty\n\nArrays are coercible into slices, this adds the missing type-resolution\r\nthe rule which works for now. The other part of this fix is described in #1146 \r\nfor coercion_site to be recursive and reuse the adjustment classes so that\r\nwe reuse as much code as possible and handle complex coercion sites.\r\n\r\nFixes #1129\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "f8ca158263c81e7e0db67b066ffee1ca2608938e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8ca158263c81e7e0db67b066ffee1ca2608938e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75ac2f6fc0a12a7f75abfd5bcd79e508f5ae8fc7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiYn2sCRBK7hj4Ov3rIwAAlRcIAEuHN9jSEVVo1f9GYLhgcJ/W\nXbaJAl3FtQMT0TgNxMKZROuoY9WZpkiy4Pa/0bDtB1q3luAZYhgRh+5MuHJHJLzW\n0ZVsZE14uN17F3Gyt0Q52HUsCz7tH7XWQfuJp/vKog0ZDZ6Pmy07R5aDnpm4To8u\nMdWtVs9eow1O+Ml98PBRzTTS7bnobvq2XjEi3jmjjf5baOb073HgNRV3y0Bbmesn\nNCiMX0Naj23Ts+VBsET9xSqcfmcw4Bb9oQ1Y4n5nm9eoDRzumqdje1prekfrhniz\nt6R6FMtWrKaAC85tha8nZYyYnb//e6yOBVLgOCfhKPXqUPCYvnpNjA6NvxeKbQw=\n=63dQ\n-----END PGP SIGNATURE-----\n", "payload": "tree f8ca158263c81e7e0db67b066ffee1ca2608938e\nparent f0b6dca3fcd6f435a0c0fc5c60c4bfba088930dd\nparent 639b3d61ab124ab14e0935893abe437ed7f6ad52\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1650621868 +0000\ncommitter GitHub <noreply@github.com> 1650621868 +0000\n\nMerge #1147\n\n1147: Add missing coercion rule from array to slice r=philberty a=philberty\n\nArrays are coercible into slices, this adds the missing type-resolution\r\nthe rule which works for now. The other part of this fix is described in #1146 \r\nfor coercion_site to be recursive and reuse the adjustment classes so that\r\nwe reuse as much code as possible and handle complex coercion sites.\r\n\r\nFixes #1129\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75ac2f6fc0a12a7f75abfd5bcd79e508f5ae8fc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75ac2f6fc0a12a7f75abfd5bcd79e508f5ae8fc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75ac2f6fc0a12a7f75abfd5bcd79e508f5ae8fc7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0b6dca3fcd6f435a0c0fc5c60c4bfba088930dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0b6dca3fcd6f435a0c0fc5c60c4bfba088930dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0b6dca3fcd6f435a0c0fc5c60c4bfba088930dd"}, {"sha": "639b3d61ab124ab14e0935893abe437ed7f6ad52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/639b3d61ab124ab14e0935893abe437ed7f6ad52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/639b3d61ab124ab14e0935893abe437ed7f6ad52"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "e13c7f8d9820b21afaad4e7991fbdbb3ee7386ae", "filename": "gcc/rust/typecheck/rust-tyty-coercion.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ac2f6fc0a12a7f75abfd5bcd79e508f5ae8fc7/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ac2f6fc0a12a7f75abfd5bcd79e508f5ae8fc7/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h?ref=75ac2f6fc0a12a7f75abfd5bcd79e508f5ae8fc7", "patch": "@@ -886,6 +886,22 @@ class SliceCoercionRules : public BaseCoercionRules\n \t\t\t      TyVar (base_resolved->get_ref ()));\n   }\n \n+  void visit (ArrayType &type) override\n+  {\n+    // check base type\n+    auto base_resolved\n+      = base->get_element_type ()->unify (type.get_element_type ());\n+    if (base_resolved == nullptr)\n+      {\n+\tBaseCoercionRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved = new SliceType (type.get_ref (), type.get_ty_ref (),\n+\t\t\t      type.get_ident ().locus,\n+\t\t\t      TyVar (base_resolved->get_ref ()));\n+  }\n+\n private:\n   BaseType *get_base () override { return base; }\n "}, {"sha": "a15903983f0489af01f0d427ebb5ad9b7bf3b8d8", "filename": "gcc/testsuite/rust/compile/issue-1129-1.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ac2f6fc0a12a7f75abfd5bcd79e508f5ae8fc7/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1129-1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ac2f6fc0a12a7f75abfd5bcd79e508f5ae8fc7/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1129-1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1129-1.rs?ref=75ac2f6fc0a12a7f75abfd5bcd79e508f5ae8fc7", "patch": "@@ -0,0 +1,4 @@\n+// { dg-additional-options \"-w\" }\n+fn write_u8(i: u8) {\n+    let x: &[u8] = &[i];\n+}"}, {"sha": "25d30faf4aa9678e54752bceeb7ad6eb87f14dc3", "filename": "gcc/testsuite/rust/compile/issue-1129-2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ac2f6fc0a12a7f75abfd5bcd79e508f5ae8fc7/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1129-2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ac2f6fc0a12a7f75abfd5bcd79e508f5ae8fc7/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1129-2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1129-2.rs?ref=75ac2f6fc0a12a7f75abfd5bcd79e508f5ae8fc7", "patch": "@@ -0,0 +1,22 @@\n+// { dg-additional-options \"-w\" }\n+pub trait Hasher {\n+    fn finish(&self) -> u64;\n+    fn write(&mut self, bytes: &[u8]);\n+    fn write_u8(&mut self, i: u8) {\n+        self.write(&[i])\n+    }\n+}\n+\n+struct SipHasher;\n+\n+impl Hasher for SipHasher {\n+    #[inline]\n+    fn write(&mut self, msg: &[u8]) {\n+        loop {}\n+    }\n+\n+    #[inline]\n+    fn finish(&self) -> u64 {\n+        0\n+    }\n+}"}]}