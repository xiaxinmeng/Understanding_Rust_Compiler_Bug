{"sha": "eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVhNzdkMWYzNDM3MzY2MDA0YTVkNDdlZmRmNmI5Y2RiZjNmY2ZiYg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-07-14T15:09:00Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-07-14T15:09:00Z"}, "message": "c/c++: Add fix-it hints for suggested missing #includes\n\ngcc/c-family/ChangeLog:\n\t* c-common.c (try_to_locate_new_include_insertion_point): New\n\tfunction.\n\t(per_file_includes_t): New typedef.\n\t(added_includes_t): New typedef.\n\t(added_includes): New variable.\n\t(maybe_add_include_fixit): New function.\n\t* c-common.h (maybe_add_include_fixit): New decl.\n\ngcc/c/ChangeLog:\n\t* c-decl.c (implicitly_declare): When suggesting a missing\n\t#include, provide a fix-it hint.\n\ngcc/cp/ChangeLog:\n\t* name-lookup.c (get_std_name_hint): Add '<' and '>' around\n\tthe header names.\n\t(maybe_suggest_missing_header): Update for addition of '<' and '>'\n\tto above.  Provide a fix-it hint.\n\t* pt.c: Include \"gcc-rich-location.h\"\n\t(listify): Attempt to add fix-it hint for missing\n\t#include <initializer_list>.\n\t* rtti.c: Include \"gcc-rich-location.h\".\n\t(typeid_ok_p): Attempt to add fix-it hint for missing\n\t#include <typeinfo>.\n\ngcc/testsuite/ChangeLog:\n\t* g++.dg/cpp0x/missing-initializer_list-include.C: New test case.\n\t* g++.dg/lookup/missing-std-include-2.C: New test case.\n\t* g++.dg/lookup/missing-std-include-3.C: New test case.\n\t* g++.dg/rtti/missing-typeinfo-include.C: New test case.\n\t* gcc.dg/missing-header-fixit-1.c: New test case.\n\t* gcc.dg/missing-header-fixit-2.c: New test case.\n\t* gcc.dg/missing-header-fixit-2.h: New header.\n\nFrom-SVN: r250203", "tree": {"sha": "91bce65baf3294434588bd452b06ed508518e076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91bce65baf3294434588bd452b06ed508518e076"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bcf198440546aa583cf86ddce458a4bd26f616f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcf198440546aa583cf86ddce458a4bd26f616f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcf198440546aa583cf86ddce458a4bd26f616f0"}], "stats": {"total": 511, "additions": 461, "deletions": 50}, "files": [{"sha": "cea8fc022238ee3f52c5ab83174ada6ee0d5cd77", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb", "patch": "@@ -1,3 +1,13 @@\n+2017-07-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-common.c (try_to_locate_new_include_insertion_point): New\n+\tfunction.\n+\t(per_file_includes_t): New typedef.\n+\t(added_includes_t): New typedef.\n+\t(added_includes): New variable.\n+\t(maybe_add_include_fixit): New function.\n+\t* c-common.h (maybe_add_include_fixit): New decl.\n+\n 2017-07-10  Martin Sebor  <msebor@redhat.com>\n \n \tPR other/81345"}, {"sha": "feb0904bcbf49a552cb43c99d6b1579e06fef19f", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb", "patch": "@@ -8019,4 +8019,135 @@ c_family_tests (void)\n \n #endif /* #if CHECKING_P */\n \n+/* Attempt to locate a suitable location within FILE for a\n+   #include directive to be inserted before.  FILE should\n+   be a string from libcpp (pointer equality is used).\n+   LOC is the location of the relevant diagnostic.\n+\n+   Attempt to return the location within FILE immediately\n+   after the last #include within that file, or the start of\n+   that file if it has no #include directives.\n+\n+   Return UNKNOWN_LOCATION if no suitable location is found,\n+   or if an error occurs.  */\n+\n+static location_t\n+try_to_locate_new_include_insertion_point (const char *file, location_t loc)\n+{\n+  /* Locate the last ordinary map within FILE that ended with a #include.  */\n+  const line_map_ordinary *last_include_ord_map = NULL;\n+\n+  /* ...and the next ordinary map within FILE after that one.  */\n+  const line_map_ordinary *last_ord_map_after_include = NULL;\n+\n+  /* ...and the first ordinary map within FILE.  */\n+  const line_map_ordinary *first_ord_map_in_file = NULL;\n+\n+  /*  Get ordinary map containing LOC (or its expansion).  */\n+  const line_map_ordinary *ord_map_for_loc = NULL;\n+  loc = linemap_resolve_location (line_table, loc, LRK_MACRO_EXPANSION_POINT,\n+\t\t\t\t  &ord_map_for_loc);\n+  gcc_assert (ord_map_for_loc);\n+\n+  for (unsigned int i = 0; i < LINEMAPS_ORDINARY_USED (line_table); i++)\n+    {\n+      const line_map_ordinary *ord_map\n+\t= LINEMAPS_ORDINARY_MAP_AT (line_table, i);\n+\n+      const line_map_ordinary *from = INCLUDED_FROM (line_table, ord_map);\n+      if (from)\n+\tif (from->to_file == file)\n+\t  {\n+\t    last_include_ord_map = from;\n+\t    last_ord_map_after_include = NULL;\n+\t  }\n+\n+      if (ord_map->to_file == file)\n+\t{\n+\t  if (!first_ord_map_in_file)\n+\t    first_ord_map_in_file = ord_map;\n+\t  if (last_include_ord_map && !last_ord_map_after_include)\n+\t    last_ord_map_after_include = ord_map;\n+\t}\n+\n+      /* Stop searching when reaching the ord_map containing LOC,\n+\t as it makes no sense to provide fix-it hints that appear\n+\t after the diagnostic in question.  */\n+      if (ord_map == ord_map_for_loc)\n+\tbreak;\n+    }\n+\n+  /* Determine where to insert the #include.  */\n+  const line_map_ordinary *ord_map_for_insertion;\n+\n+  /* We want the next ordmap in the file after the last one that's a\n+     #include, but failing that, the start of the file.  */\n+  if (last_ord_map_after_include)\n+    ord_map_for_insertion = last_ord_map_after_include;\n+  else\n+    ord_map_for_insertion = first_ord_map_in_file;\n+\n+  if (!ord_map_for_insertion)\n+    return UNKNOWN_LOCATION;\n+\n+  /* The \"start_location\" is column 0, meaning \"the whole line\".\n+     rich_location and edit_context can't cope with this, so use\n+     column 1 instead.  */\n+  location_t col_0 = ord_map_for_insertion->start_location;\n+  return linemap_position_for_loc_and_offset (line_table, col_0, 1);\n+}\n+\n+/* A map from filenames to sets of headers added to them, for\n+   ensuring idempotency within maybe_add_include_fixit.  */\n+\n+/* The values within the map.  We need string comparison as there's\n+   no guarantee that two different diagnostics that are recommending\n+   adding e.g. \"<stdio.h>\" are using the same buffer.  */\n+\n+typedef hash_set <const char *, nofree_string_hash> per_file_includes_t;\n+\n+/* The map itself.  We don't need string comparison for the filename keys,\n+   as they come from libcpp.  */\n+\n+typedef hash_map <const char *, per_file_includes_t *> added_includes_t;\n+static added_includes_t *added_includes;\n+\n+/* Attempt to add a fix-it hint to RICHLOC, adding \"#include HEADER\\n\"\n+   in a suitable location within the file of RICHLOC's primary\n+   location.\n+\n+   This function is idempotent: a header will be added at most once to\n+   any given file.  */\n+\n+void\n+maybe_add_include_fixit (rich_location *richloc, const char *header)\n+{\n+  location_t loc = richloc->get_loc ();\n+  const char *file = LOCATION_FILE (loc);\n+  if (!file)\n+    return;\n+\n+  /* Idempotency: don't add the same header more than once to a given file.  */\n+  if (!added_includes)\n+    added_includes = new added_includes_t ();\n+  per_file_includes_t *&set = added_includes->get_or_insert (file);\n+  if (set)\n+    if (set->contains (header))\n+      /* ...then we've already added HEADER to that file.  */\n+      return;\n+  if (!set)\n+    set = new per_file_includes_t ();\n+  set->add (header);\n+\n+  /* Attempt to locate a suitable place for the new directive.  */\n+  location_t include_insert_loc\n+    = try_to_locate_new_include_insertion_point (file, loc);\n+  if (include_insert_loc == UNKNOWN_LOCATION)\n+    return;\n+\n+  char *text = xasprintf (\"#include %s\\n\", header);\n+  richloc->add_fixit_insert_before (include_insert_loc, text);\n+  free (text);\n+}\n+\n #include \"gt-c-family-c-common.h\""}, {"sha": "a29f1ade25d66741367d32fd3a2c0031a55352e9", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb", "patch": "@@ -1556,6 +1556,8 @@ excess_precision_mode_join (enum flt_eval_method, enum flt_eval_method);\n extern int c_flt_eval_method (bool ts18661_p);\n extern void add_no_sanitize_value (tree node, unsigned int flags);\n \n+extern void maybe_add_include_fixit (rich_location *, const char *);\n+\n #if CHECKING_P\n namespace selftest {\n   /* Declarations for specific families of tests within c-family,"}, {"sha": "42ef9a5dfb65d64af58c8692af3a3516f532c079", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb", "patch": "@@ -1,3 +1,8 @@\n+2017-07-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-decl.c (implicitly_declare): When suggesting a missing\n+\t#include, provide a fix-it hint.\n+\n 2017-07-06  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-lang.c (selftest::run_c_tests): Move body to c_family_tests,"}, {"sha": "50da185e363938a597cca621bbe72ff906b86687", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb", "patch": "@@ -3386,8 +3386,14 @@ implicitly_declare (location_t loc, tree functionid)\n \t\t  const char *header\n \t\t    = header_for_builtin_fn (DECL_FUNCTION_CODE (decl));\n \t\t  if (header != NULL && warned)\n-\t\t    inform (loc, \"include %qs or provide a declaration of %qD\",\n-\t\t\t    header, decl);\n+\t\t    {\n+\t\t      rich_location richloc (line_table, loc);\n+\t\t      maybe_add_include_fixit (&richloc, header);\n+\t\t      inform_at_rich_loc\n+\t\t\t(&richloc,\n+\t\t\t \"include %qs or provide a declaration of %qD\",\n+\t\t\t header, decl);\n+\t\t    }\n \t\t  newtype = TREE_TYPE (decl);\n \t\t}\n \t    }"}, {"sha": "715ac76c8c4e73c3f479d557f9b891e09aee6705", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb", "patch": "@@ -1,3 +1,16 @@\n+2017-07-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* name-lookup.c (get_std_name_hint): Add '<' and '>' around\n+\tthe header names.\n+\t(maybe_suggest_missing_header): Update for addition of '<' and '>'\n+\tto above.  Provide a fix-it hint.\n+\t* pt.c: Include \"gcc-rich-location.h\"\n+\t(listify): Attempt to add fix-it hint for missing\n+\t#include <initializer_list>.\n+\t* rtti.c: Include \"gcc-rich-location.h\".\n+\t(typeid_ok_p): Attempt to add fix-it hint for missing\n+\t#include <typeinfo>.\n+\n 2017-07-12  Jason Merrill  <jason@redhat.com>\n \n \tP0512R0 - Deduction from an initializer list."}, {"sha": "cd7428a4ea4cb663bdef97d1116ccb7d706aa975", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 49, "deletions": 45, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb", "patch": "@@ -4760,7 +4760,7 @@ suggest_alternatives_for (location_t location, tree name,\n /* Subroutine of maybe_suggest_missing_header for handling unrecognized names\n    for some of the most common names within \"std::\".\n    Given non-NULL NAME, a name for lookup within \"std::\", return the header\n-   name defining it within the C++ Standard Library (without '<' and '>'),\n+   name defining it within the C++ Standard Library (with '<' and '>'),\n    or NULL.  */\n \n static const char *\n@@ -4773,61 +4773,61 @@ get_std_name_hint (const char *name)\n   };\n   static const std_name_hint hints[] = {\n     /* <array>.  */\n-    {\"array\", \"array\"}, // C++11\n+    {\"array\", \"<array>\"}, // C++11\n     /* <deque>.  */\n-    {\"deque\", \"deque\"},\n+    {\"deque\", \"<deque>\"},\n     /* <forward_list>.  */\n-    {\"forward_list\", \"forward_list\"},  // C++11\n+    {\"forward_list\", \"<forward_list>\"},  // C++11\n     /* <fstream>.  */\n-    {\"basic_filebuf\", \"fstream\"},\n-    {\"basic_ifstream\", \"fstream\"},\n-    {\"basic_ofstream\", \"fstream\"},\n-    {\"basic_fstream\", \"fstream\"},\n+    {\"basic_filebuf\", \"<fstream>\"},\n+    {\"basic_ifstream\", \"<fstream>\"},\n+    {\"basic_ofstream\", \"<fstream>\"},\n+    {\"basic_fstream\", \"<fstream>\"},\n     /* <iostream>.  */\n-    {\"cin\", \"iostream\"},\n-    {\"cout\", \"iostream\"},\n-    {\"cerr\", \"iostream\"},\n-    {\"clog\", \"iostream\"},\n-    {\"wcin\", \"iostream\"},\n-    {\"wcout\", \"iostream\"},\n-    {\"wclog\", \"iostream\"},\n+    {\"cin\", \"<iostream>\"},\n+    {\"cout\", \"<iostream>\"},\n+    {\"cerr\", \"<iostream>\"},\n+    {\"clog\", \"<iostream>\"},\n+    {\"wcin\", \"<iostream>\"},\n+    {\"wcout\", \"<iostream>\"},\n+    {\"wclog\", \"<iostream>\"},\n     /* <list>.  */\n-    {\"list\", \"list\"},\n+    {\"list\", \"<list>\"},\n     /* <map>.  */\n-    {\"map\", \"map\"},\n-    {\"multimap\", \"map\"},\n+    {\"map\", \"<map>\"},\n+    {\"multimap\", \"<map>\"},\n     /* <queue>.  */\n-    {\"queue\", \"queue\"},\n-    {\"priority_queue\", \"queue\"},\n+    {\"queue\", \"<queue>\"},\n+    {\"priority_queue\", \"<queue>\"},\n     /* <ostream>.  */\n-    {\"ostream\", \"ostream\"},\n-    {\"wostream\", \"ostream\"},\n-    {\"ends\", \"ostream\"},\n-    {\"flush\", \"ostream\"},\n-    {\"endl\", \"ostream\"},\n+    {\"ostream\", \"<ostream>\"},\n+    {\"wostream\", \"<ostream>\"},\n+    {\"ends\", \"<ostream>\"},\n+    {\"flush\", \"<ostream>\"},\n+    {\"endl\", \"<ostream>\"},\n     /* <set>.  */\n-    {\"set\", \"set\"},\n-    {\"multiset\", \"set\"},\n+    {\"set\", \"<set>\"},\n+    {\"multiset\", \"<set>\"},\n     /* <sstream>.  */\n-    {\"basic_stringbuf\", \"sstream\"},\n-    {\"basic_istringstream\", \"sstream\"},\n-    {\"basic_ostringstream\", \"sstream\"},\n-    {\"basic_stringstream\", \"sstream\"},\n+    {\"basic_stringbuf\", \"<sstream>\"},\n+    {\"basic_istringstream\", \"<sstream>\"},\n+    {\"basic_ostringstream\", \"<sstream>\"},\n+    {\"basic_stringstream\", \"<sstream>\"},\n     /* <stack>.  */\n-    {\"stack\", \"stack\"},\n+    {\"stack\", \"<stack>\"},\n     /* <string>.  */\n-    {\"string\", \"string\"},\n-    {\"wstring\", \"string\"},\n-    {\"u16string\", \"string\"},\n-    {\"u32string\", \"string\"},\n+    {\"string\", \"<string>\"},\n+    {\"wstring\", \"<string>\"},\n+    {\"u16string\", \"<string>\"},\n+    {\"u32string\", \"<string>\"},\n     /* <unordered_map>.  */\n-    {\"unordered_map\", \"unordered_map\"}, // C++11\n-    {\"unordered_multimap\", \"unordered_map\"}, // C++11\n+    {\"unordered_map\", \"<unordered_map>\"}, // C++11\n+    {\"unordered_multimap\", \"<unordered_map>\"}, // C++11\n     /* <unordered_set>.  */\n-    {\"unordered_set\", \"unordered_set\"}, // C++11\n-    {\"unordered_multiset\", \"unordered_set\"}, // C++11\n+    {\"unordered_set\", \"<unordered_set>\"}, // C++11\n+    {\"unordered_multiset\", \"<unordered_set>\"}, // C++11\n     /* <vector>.  */\n-    {\"vector\", \"vector\"},\n+    {\"vector\", \"<vector>\"},\n   };\n   const size_t num_hints = sizeof (hints) / sizeof (hints[0]);\n   for (size_t i = 0; i < num_hints; i++)\n@@ -4858,10 +4858,14 @@ maybe_suggest_missing_header (location_t location, tree name, tree scope)\n   const char *name_str = IDENTIFIER_POINTER (name);\n   const char *header_hint = get_std_name_hint (name_str);\n   if (header_hint)\n-    inform (location,\n-\t    \"%<std::%s%> is defined in header %<<%s>%>;\"\n-\t    \" did you forget to %<#include <%s>%>?\",\n-\t    name_str, header_hint, header_hint);\n+    {\n+      gcc_rich_location richloc (location);\n+      maybe_add_include_fixit (&richloc, header_hint);\n+      inform_at_rich_loc (&richloc,\n+\t\t\t  \"%<std::%s%> is defined in header %qs;\"\n+\t\t\t  \" did you forget to %<#include %s%>?\",\n+\t\t\t  name_str, header_hint, header_hint);\n+    }\n }\n \n /* Look for alternatives for NAME, an IDENTIFIER_NODE for which name"}, {"sha": "da133bd186346f0ea5bc4ffce87733368b5c3334", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb", "patch": "@@ -40,6 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-iterator.h\"\n #include \"type-utils.h\"\n #include \"gimplify.h\"\n+#include \"gcc-rich-location.h\"\n \n /* The type of functions taking a tree, and some additional data, and\n    returning an int.  */\n@@ -24867,8 +24868,12 @@ listify (tree arg)\n \n   if (!std_init_list || !DECL_CLASS_TEMPLATE_P (std_init_list))\n     {    \n-      error (\"deducing from brace-enclosed initializer list requires \"\n-\t     \"#include <initializer_list>\");\n+      gcc_rich_location richloc (input_location);\n+      maybe_add_include_fixit (&richloc, \"<initializer_list>\");\n+      error_at_rich_loc (&richloc,\n+                         \"deducing from brace-enclosed initializer list\"\n+                         \" requires #include <initializer_list>\");\n+\n       return error_mark_node;\n     }\n   tree argvec = make_tree_vec (1);"}, {"sha": "a660cdd9413b47e9932545fd68a7f580e7b4b4d5", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intl.h\"\n #include \"stor-layout.h\"\n #include \"c-family/c-pragma.h\"\n+#include \"gcc-rich-location.h\"\n \n /* C++ returns type information to the user in struct type_info\n    objects. We also use type information to implement dynamic_cast and\n@@ -316,7 +317,12 @@ typeid_ok_p (void)\n \n   if (!COMPLETE_TYPE_P (const_type_info_type_node))\n     {\n-      error (\"must %<#include <typeinfo>%> before using %<typeid%>\");\n+      gcc_rich_location richloc (input_location);\n+      maybe_add_include_fixit (&richloc, \"<typeinfo>\");\n+      error_at_rich_loc (&richloc,\n+\t\t\t \"must %<#include <typeinfo>%> before using\"\n+\t\t\t \" %<typeid%>\");\n+\n       return false;\n     }\n "}, {"sha": "4bdeeca32135491e85ae48230755869bf2ee7436", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb", "patch": "@@ -1,3 +1,13 @@\n+2017-07-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* g++.dg/cpp0x/missing-initializer_list-include.C: New test case.\n+\t* g++.dg/lookup/missing-std-include-2.C: New test case.\n+\t* g++.dg/lookup/missing-std-include-3.C: New test case.\n+\t* g++.dg/rtti/missing-typeinfo-include.C: New test case.\n+\t* gcc.dg/missing-header-fixit-1.c: New test case.\n+\t* gcc.dg/missing-header-fixit-2.c: New test case.\n+\t* gcc.dg/missing-header-fixit-2.h: New header.\n+\n 2017-07-13  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/81405"}, {"sha": "8e803c82f24463c970a211ce9c743d0d445b1ee6", "filename": "gcc/testsuite/g++.dg/cpp0x/missing-initializer_list-include.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fmissing-initializer_list-include.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fmissing-initializer_list-include.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fmissing-initializer_list-include.C?ref=eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb", "patch": "@@ -0,0 +1,28 @@\n+/* This is padding (to avoid the generated patch containing DejaGnu\n+   directives).  */\n+\n+/* { dg-options \"-fdiagnostics-generate-patch\" } */\n+\n+// { dg-do compile { target c++11 } }\n+\n+void test (int i)\n+{\n+  auto a = { &i }; // { dg-error \"deducing from brace-enclosed initializer list requires #include <initializer_list>\" }\n+}\n+\n+/* Verify the output from -fdiagnostics-generate-patch.\n+   We expect the patch to begin with a header, containing this\n+   source filename, via an absolute path.\n+   Given the path, we can only capture it via regexps.  */\n+/* { dg-regexp \"\\\\-\\\\-\\\\- .*\" } */\n+/* { dg-regexp \"\\\\+\\\\+\\\\+ .*\" } */\n+/* Use #if 0/#endif rather than comments, to allow the text to contain\n+   a comment.  */\n+#if 0\n+{ dg-begin-multiline-output \"\" }\n+@@ -1,3 +1,4 @@\n++#include <initializer_list>\n+ /* This is padding (to avoid the generated patch containing DejaGnu\n+    directives).  */\n+{ dg-end-multiline-output \"\" }\n+#endif"}, {"sha": "ae918f869a73250ca1b640bff3c0bdfd27fe94ca", "filename": "gcc/testsuite/g++.dg/lookup/missing-std-include-2.C", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include-2.C?ref=eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb", "patch": "@@ -0,0 +1,55 @@\n+/* Example of fix-it hints that add #include directives,\n+   adding them after a pre-existing #include.  */\n+\n+/* { dg-options \"-fdiagnostics-generate-patch\" } */\n+\n+/* This is padding (to avoid the generated patch containing DejaGnu\n+   directives).  */\n+\n+#include <stdio.h>\n+\n+void test (void)\n+{\n+  std::string s (\"hello world\"); // { dg-error \".string. is not a member of .std.\" }\n+  // { dg-message \".std::string. is defined in header .<string>.; did you forget to .#include <string>.?\" \"\" { target *-*-* } .-1 }\n+\n+  std::cout << 10; // { dg-error \".cout. is not a member of .std.\" }\n+  // { dg-message \".std::cout. is defined in header .<iostream>.; did you forget to .#include <iostream>.?\" \"\" { target *-*-* } .-1 }\n+}\n+\n+/* Same again, to test idempotency of the added \"#include\" fix-it.  */\n+\n+void test_2 (void)\n+{\n+  std::string s (\"hello again\"); // { dg-error \".string. is not a member of .std.\" }\n+  // { dg-message \".std::string. is defined in header .<string>.; did you forget to .#include <string>.?\" \"\" { target *-*-* } .-1 }\n+\n+  std::cout << 10; // { dg-error \".cout. is not a member of .std.\" }\n+  // { dg-message \".std::cout. is defined in header .<iostream>.; did you forget to .#include <iostream>.?\" \"\" { target *-*-* } .-1 }\n+}\n+\n+/* Verify the output from -fdiagnostics-generate-patch.\n+   We expect the patch to begin with a header, containing this\n+   source filename, via an absolute path.\n+   Given the path, we can only capture it via regexps.  */\n+/* { dg-regexp \"\\\\-\\\\-\\\\- .*\" } */\n+/* { dg-regexp \"\\\\+\\\\+\\\\+ .*\" } */\n+\n+/* Verify the hunks within the patch.\n+   Use #if 0/#endif rather than comments, to allow the text to contain\n+   a comment.\n+   We expect a \"#include <string>\" and \"#include <iostream>\" to each have been\n+   added once, immediately below the last #include.  */\n+#if 0\n+{ dg-begin-multiline-output \"\" }\n+@@ -7,6 +7,8 @@\n+    directives).  */\n+ \n+ #include <stdio.h>\n++#include <string>\n++#include <iostream>\n+ \n+ void test (void)\n+ {\n+{ dg-end-multiline-output \"\" }\n+#endif"}, {"sha": "23f868dff09a4c08ccae3a06e41499037ab971ec", "filename": "gcc/testsuite/g++.dg/lookup/missing-std-include-3.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include-3.C?ref=eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb", "patch": "@@ -0,0 +1,35 @@\n+/* Example of where the error occurs before the first #include,\n+   which in this case happens to be the missing header. \n+   For this case, expect to insert the #include at the top of the file. */\n+\n+/* { dg-options \"-fdiagnostics-generate-patch\" } */\n+\n+void test ()\n+{\n+  std::string test; // { dg-error \".string. is not a member of .std.\" }\n+  // { dg-message \".std::string. is defined in header .<string>.; did you forget to .#include <string>.?\" \"\" { target *-*-* } .-1 }\n+}\n+\n+#include <string>\n+\n+/* Verify the output from -fdiagnostics-generate-patch.\n+   We expect the patch to begin with a header, containing this\n+   source filename, via an absolute path.\n+   Given the path, we can only capture it via regexps.  */\n+/* { dg-regexp \"\\\\-\\\\-\\\\- .*\" } */\n+/* { dg-regexp \"\\\\+\\\\+\\\\+ .*\" } */\n+\n+/* Verify the hunks within the patch.\n+   Use #if 0/#endif rather than comments, to allow the text to contain\n+   a comment.\n+   We expect a \"#include <string>\" have been added once, at the top\n+   of the file.  */\n+#if 0\n+{ dg-begin-multiline-output \"\" }\n+@@ -1,3 +1,4 @@\n++#include <string>\n+ /* Example of where the error occurs before the first #include,\n+    which in this case happens to be the missing header. \n+    For this case, expect to insert the #include at the top of the file. */\n+{ dg-end-multiline-output \"\" }\n+#endif"}, {"sha": "937c38f11a2a9508490a7192c55e2ae6b4bab994", "filename": "gcc/testsuite/g++.dg/rtti/missing-typeinfo-include.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fmissing-typeinfo-include.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fmissing-typeinfo-include.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fmissing-typeinfo-include.C?ref=eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb", "patch": "@@ -0,0 +1,27 @@\n+/* This is padding (to avoid the generated patch containing DejaGnu\n+   directives).  */\n+\n+/* { dg-options \"-fdiagnostics-generate-patch\" } */\n+\n+void test()\n+{\n+  typeid(void); // { dg-error \"must '#include <typeinfo>' before using 'typeid'\" }\n+}\n+\n+/* Verify the output from -fdiagnostics-generate-patch.\n+   We expect the patch to begin with a header, containing this\n+   source filename, via an absolute path.\n+   Given the path, we can only capture it via regexps.  */\n+/* { dg-regexp \"\\\\-\\\\-\\\\- .*\" } */\n+/* { dg-regexp \"\\\\+\\\\+\\\\+ .*\" } */\n+/* Use #if 0/#endif rather than comments, to allow the text to contain\n+   a comment.  */\n+#if 0\n+{ dg-begin-multiline-output \"\" }\n+@@ -1,3 +1,4 @@\n++#include <typeinfo>\n+ /* This is padding (to avoid the generated patch containing DejaGnu\n+    directives).  */\n+ \n+{ dg-end-multiline-output \"\" }\n+#endif"}, {"sha": "2b28357e1db9a7978e6e8a8dadaf81873f49a247", "filename": "gcc/testsuite/gcc.dg/missing-header-fixit-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-header-fixit-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-header-fixit-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-header-fixit-1.c?ref=eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb", "patch": "@@ -0,0 +1,36 @@\n+/* Example of a fix-it hint that adds a #include directive,\n+   adding them to the top of the file, given that there is no\n+   pre-existing #include.  */\n+\n+/* This is padding (to avoid the generated patch containing DejaGnu\n+   directives).  */\n+\n+/* { dg-options \"-fdiagnostics-generate-patch\" } */\n+\n+void test (int i, int j)\n+{\n+  printf (\"%i of %i\\n\", i, j); /* { dg-warning \"implicit declaration\" } */\n+  /* { dg-message \"include '<stdio.h>' or provide a declaration of 'printf'\" \"\" { target *-*-* } .-1 } */\n+}\n+\n+/* Verify the output from -fdiagnostics-generate-patch.\n+   We expect the patch to begin with a header, containing this\n+   source filename, via an absolute path.\n+   Given the path, we can only capture it via regexps.  */\n+/* { dg-regexp \"\\\\-\\\\-\\\\- .*\" } */\n+/* { dg-regexp \"\\\\+\\\\+\\\\+ .*\" } */\n+/* Use #if 0/#endif rather than comments, to allow the text to contain\n+   a comment.  */\n+#if 0\n+{ dg-begin-multiline-output \"\" }\n+@@ -1,3 +1,4 @@\n++#include <stdio.h>\n+ /* Example of a fix-it hint that adds a #include directive,\n+    adding them to the top of the file, given that there is no\n+    pre-existing #include.  */\n+{ dg-end-multiline-output \"\" }\n+#endif\n+\n+/* FIXME: should we attempt to skip leading comments when determining the\n+   insertion location?\n+   Similarly, should we attempt to be within single-inclusion guards, etc?  */"}, {"sha": "5d5f87488f57992d87b9a7825b59e7f35a991d98", "filename": "gcc/testsuite/gcc.dg/missing-header-fixit-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-header-fixit-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-header-fixit-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-header-fixit-2.c?ref=eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb", "patch": "@@ -0,0 +1,31 @@\n+/* Verify that when we suggest adding #include directives that they\n+   are added to the affected file.  */\n+\n+/* The following header file is missing a \"#include <stdio.h>\".  */\n+\n+#include \"missing-header-fixit-2.h\"\n+\n+/* These directives actually apply to the header.  */\n+/* { dg-warning \"implicit declaration of function 'printf'\" \"\" { target *-*-* } 6 } */\n+/* { dg-warning \"incompatible implicit declaration of built-in function 'printf'\" \"\" { target *-*-* } 6 } */\n+\n+/* { dg-options \"-fdiagnostics-generate-patch\" } */\n+\n+/* Verify the output from -fdiagnostics-generate-patch.\n+   We expect the patch to begin with a header, containing the\n+   filename of the header, via an absolute path.\n+   Given the path, we can only capture it via regexps.  */\n+/* { dg-regexp \"\\\\-\\\\-\\\\- .*\" } */\n+/* { dg-regexp \"\\\\+\\\\+\\\\+ .*\" } */\n+/* Use #if 0/#endif rather than comments, to allow the text to contain\n+   a comment.\n+   We expect the *header* to have been patched, adding the missing include.  */\n+#if 0\n+{ dg-begin-multiline-output \"\" }\n+@@ -1,3 +1,4 @@\n++#include <stdio.h>\n+ /* This is missing-header-fixit-2.h, for use by\n+    missing-header-fixit-2.c  */\n+ \n+{ dg-end-multiline-output \"\" }\n+#endif"}, {"sha": "c0bf55dcbe604f081856f01ef392b93d25629a22", "filename": "gcc/testsuite/gcc.dg/missing-header-fixit-2.h", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-header-fixit-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-header-fixit-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-header-fixit-2.h?ref=eea77d1f3437366004a5d47efdf6b9cdbf3fcfbb", "patch": "@@ -0,0 +1,7 @@\n+/* This is missing-header-fixit-2.h, for use by\n+   missing-header-fixit-2.c  */\n+\n+void test (int i, int j)\n+{\n+  printf (\"%i of %i\\n\", i, j);\n+}"}]}