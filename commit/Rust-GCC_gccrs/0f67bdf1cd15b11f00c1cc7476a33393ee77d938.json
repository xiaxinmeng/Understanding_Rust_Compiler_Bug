{"sha": "0f67bdf1cd15b11f00c1cc7476a33393ee77d938", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY2N2JkZjFjZDE1YjExZjAwYzFjYzc0NzZhMzMzOTNlZTc3ZDkzOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2008-08-06T02:25:20Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2008-08-06T02:25:20Z"}, "message": "re PR c++/37016 (member function pointer failure with optimization)\n\n        PR c++/37016\n        * decl.c (build_ptrmemfunc_type): Don't require structural\n        comparison of PMF types.\n        * tree.c (cp_build_qualified_type_real): Don't clear\n        a valid TYPE_PTRMEMFUNC_TYPE.\n        * typeck.c (cp_build_unary_op): Still do build_ptrmemfunc in\n        templates.\n\nFrom-SVN: r138756", "tree": {"sha": "1e917da7345bbe99c4329abae07998e2d6e14561", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e917da7345bbe99c4329abae07998e2d6e14561"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f67bdf1cd15b11f00c1cc7476a33393ee77d938", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f67bdf1cd15b11f00c1cc7476a33393ee77d938", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f67bdf1cd15b11f00c1cc7476a33393ee77d938", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f67bdf1cd15b11f00c1cc7476a33393ee77d938/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c5073fc6e639eb00f64a1779ee6cc16477d5f3fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5073fc6e639eb00f64a1779ee6cc16477d5f3fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5073fc6e639eb00f64a1779ee6cc16477d5f3fc"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "8ece21d96f96f8cbb9efc9d60806e8e0a5292f7f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67bdf1cd15b11f00c1cc7476a33393ee77d938/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67bdf1cd15b11f00c1cc7476a33393ee77d938/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0f67bdf1cd15b11f00c1cc7476a33393ee77d938", "patch": "@@ -1,3 +1,13 @@\n+2008-08-05  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/37016\n+\t* decl.c (build_ptrmemfunc_type): Don't require structural \n+\tcomparison of PMF types.\n+\t* tree.c (cp_build_qualified_type_real): Don't clear\n+\ta valid TYPE_PTRMEMFUNC_TYPE.\n+\t* typeck.c (cp_build_unary_op): Still do build_ptrmemfunc in \n+\ttemplates.\n+\n 2008-08-04  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/36963"}, {"sha": "69fa647881c16f38bd7dd94d65731cbf38a12a71", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67bdf1cd15b11f00c1cc7476a33393ee77d938/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67bdf1cd15b11f00c1cc7476a33393ee77d938/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0f67bdf1cd15b11f00c1cc7476a33393ee77d938", "patch": "@@ -6961,16 +6961,17 @@ build_ptrmemfunc_type (tree type)\n       TYPE_MAIN_VARIANT (t) = unqualified_variant;\n       TYPE_NEXT_VARIANT (t) = TYPE_NEXT_VARIANT (unqualified_variant);\n       TYPE_NEXT_VARIANT (unqualified_variant) = t;\n+      TREE_TYPE (TYPE_BINFO (t)) = t;\n     }\n \n   /* Cache this pointer-to-member type so that we can find it again\n      later.  */\n   TYPE_SET_PTRMEMFUNC_TYPE (type, t);\n \n-  /* Managing canonical types for the RECORD_TYPE behind a\n-     pointer-to-member function is a nightmare, so use structural\n-     equality for now.  */\n-  SET_TYPE_STRUCTURAL_EQUALITY (t);\n+  if (TYPE_STRUCTURAL_EQUALITY_P (type))\n+    SET_TYPE_STRUCTURAL_EQUALITY (t);\n+  else if (TYPE_CANONICAL (type) != type)\n+    TYPE_CANONICAL (t) = build_ptrmemfunc_type (TYPE_CANONICAL (type));\n \n   return t;\n }"}, {"sha": "ff19cd69d8beaa6ea8349c0b7d847668bbebfc88", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67bdf1cd15b11f00c1cc7476a33393ee77d938/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67bdf1cd15b11f00c1cc7476a33393ee77d938/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=0f67bdf1cd15b11f00c1cc7476a33393ee77d938", "patch": "@@ -873,7 +873,8 @@ cp_build_qualified_type_real (tree type,\n      between the unqualified and qualified types.  */\n   if (result != type\n       && TREE_CODE (type) == POINTER_TYPE\n-      && TREE_CODE (TREE_TYPE (type)) == METHOD_TYPE)\n+      && TREE_CODE (TREE_TYPE (type)) == METHOD_TYPE\n+      && TYPE_LANG_SPECIFIC (result) == TYPE_LANG_SPECIFIC (type))\n     TYPE_LANG_SPECIFIC (result) = NULL;\n \n   return result;"}, {"sha": "fd3dba9345c827bfd8f33b115b54f9e552ad2ff0", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f67bdf1cd15b11f00c1cc7476a33393ee77d938/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f67bdf1cd15b11f00c1cc7476a33393ee77d938/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=0f67bdf1cd15b11f00c1cc7476a33393ee77d938", "patch": "@@ -4642,15 +4642,7 @@ cp_build_unary_op (enum tree_code code, tree xarg, int noconvert,\n \n       /* In a template, we are processing a non-dependent expression\n \t so we can just form an ADDR_EXPR with the correct type.  */\n-      if (processing_template_decl)\n-\t{\n-\t  val = build_address (arg);\n-\t  if (TREE_CODE (arg) == OFFSET_REF)\n-\t    PTRMEM_OK_P (val) = PTRMEM_OK_P (arg);\n-\t  return val;\n-\t}\n-\n-      if (TREE_CODE (arg) != COMPONENT_REF)\n+      if (processing_template_decl || TREE_CODE (arg) != COMPONENT_REF)\n \t{\n \t  val = build_address (arg);\n \t  if (TREE_CODE (arg) == OFFSET_REF)"}]}