{"sha": "1a2b60b581c373e4ebcee9ee37c0ab2866f98950", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWEyYjYwYjU4MWMzNzNlNGViY2VlOWVlMzdjMGFiMjg2NmY5ODk1MA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-01-20T13:02:14Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-01-20T13:14:16Z"}, "message": "x32: Add x32 support to -mtls-dialect=gnu2\n\nTo add x32 support to -mtls-dialect=gnu2, we need to replace DI with\nP in GNU2 TLS patterns.  Since DEST set by tls_dynamic_gnu2_64 is in\nptr_mode, PLUS in GNU2 TLS address computation must be done in ptr_mode\nto support -maddress-mode=long.  Also replace the \"{q}\" suffix on lea\nwith \"%z0\" to support both 32-bit and 64-bit destination register.\n\nTested on Linux/x86-64.\n\ngcc/\n\n\tPR target/93319\n\t* config/i386/i386.c (legitimize_tls_address): Pass Pmode to\n\tgen_tls_dynamic_gnu2_64.  Compute GNU2 TLS address in ptr_mode.\n\t* config/i386/i386.md (tls_dynamic_gnu2_64): Renamed to ...\n\t(@tls_dynamic_gnu2_64_<mode>): This.  Replace DI with P.\n\t(*tls_dynamic_gnu2_lea_64): Renamed to ...\n\t(*tls_dynamic_gnu2_lea_64_<mode>): This.  Replace DI with P.\n\tRemove the {q} suffix from lea.\n\t(*tls_dynamic_gnu2_call_64): Renamed to ...\n\t(*tls_dynamic_gnu2_call_64_<mode>): This.  Replace DI with P.\n\t(*tls_dynamic_gnu2_combine_64): Renamed to ...\n\t(*tls_dynamic_gnu2_combine_64_<mode>): This.  Replace DI with P.\n\tPass Pmode to gen_tls_dynamic_gnu2_64.\n\ngcc/testsuite/\n\n\tPR target/93319\n\t* gcc.target/i386/pr93319-1a.c: New test.\n\t* gcc.target/i386/pr93319-1b.c: Likewise.\n\t* gcc.target/i386/pr93319-1c.c: Likewise.\n\t* gcc.target/i386/pr93319-1d.c: Likewise.", "tree": {"sha": "abf170318cad1e0ce65b2ae090a4a59788ef57c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abf170318cad1e0ce65b2ae090a4a59788ef57c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a2b60b581c373e4ebcee9ee37c0ab2866f98950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a2b60b581c373e4ebcee9ee37c0ab2866f98950", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a2b60b581c373e4ebcee9ee37c0ab2866f98950", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a2b60b581c373e4ebcee9ee37c0ab2866f98950/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35e58efb7a86a66c6e93dac3d197eef95963582d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35e58efb7a86a66c6e93dac3d197eef95963582d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35e58efb7a86a66c6e93dac3d197eef95963582d"}], "stats": {"total": 154, "additions": 123, "deletions": 31}, "files": [{"sha": "5ae2773a2b91b94cfe34880f6a81e5dab021279a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2b60b581c373e4ebcee9ee37c0ab2866f98950/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2b60b581c373e4ebcee9ee37c0ab2866f98950/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a2b60b581c373e4ebcee9ee37c0ab2866f98950", "patch": "@@ -1,3 +1,19 @@\n+2020-01-20  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/93319\n+\t* config/i386/i386.c (legitimize_tls_address): Pass Pmode to\n+\tgen_tls_dynamic_gnu2_64.  Compute GNU2 TLS address in ptr_mode.\n+\t* config/i386/i386.md (tls_dynamic_gnu2_64): Renamed to ...\n+\t(@tls_dynamic_gnu2_64_<mode>): This.  Replace DI with P.\n+\t(*tls_dynamic_gnu2_lea_64): Renamed to ...\n+\t(*tls_dynamic_gnu2_lea_64_<mode>): This.  Replace DI with P.\n+\tRemove the {q} suffix from lea.\n+\t(*tls_dynamic_gnu2_call_64): Renamed to ...\n+\t(*tls_dynamic_gnu2_call_64_<mode>): This.  Replace DI with P.\n+\t(*tls_dynamic_gnu2_combine_64): Renamed to ...\n+\t(*tls_dynamic_gnu2_combine_64_<mode>): This.  Replace DI with P.\n+\tPass Pmode to gen_tls_dynamic_gnu2_64.\n+\n 2020-01-20  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/aarch64/aarch64.h (SLOW_BYTE_ACCESS): Set to 1."}, {"sha": "0b8a4b9ee4f0deabe326cc688e758c100fca2c1a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2b60b581c373e4ebcee9ee37c0ab2866f98950/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2b60b581c373e4ebcee9ee37c0ab2866f98950/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1a2b60b581c373e4ebcee9ee37c0ab2866f98950", "patch": "@@ -10764,12 +10764,24 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n       if (TARGET_GNU2_TLS)\n \t{\n \t  if (TARGET_64BIT)\n-\t    emit_insn (gen_tls_dynamic_gnu2_64 (dest, x));\n+\t    emit_insn (gen_tls_dynamic_gnu2_64 (Pmode, dest, x));\n \t  else\n \t    emit_insn (gen_tls_dynamic_gnu2_32 (dest, x, pic));\n \n \t  tp = get_thread_pointer (Pmode, true);\n-\t  dest = force_reg (Pmode, gen_rtx_PLUS (Pmode, tp, dest));\n+\n+\t  /* NB: Since DEST set by tls_dynamic_gnu2_64 is in ptr_mode,\n+\t     make sure that PLUS is done in ptr_mode.  */\n+\t  if (Pmode != ptr_mode)\n+\t    {\n+\t      tp = lowpart_subreg (ptr_mode, tp, Pmode);\n+\t      dest = lowpart_subreg (ptr_mode, dest, Pmode);\n+\t      dest = gen_rtx_PLUS (ptr_mode, tp, dest);\n+\t      dest = gen_rtx_ZERO_EXTEND (Pmode, dest);\n+\t    }\n+\t  else\n+\t    dest = gen_rtx_PLUS (Pmode, tp, dest);\n+\t  dest = force_reg (Pmode, dest);\n \n \t  if (GET_MODE (x) != Pmode)\n \t    x = gen_rtx_ZERO_EXTEND (Pmode, x);\n@@ -10821,7 +10833,7 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n \t  rtx tmp = ix86_tls_module_base ();\n \n \t  if (TARGET_64BIT)\n-\t    emit_insn (gen_tls_dynamic_gnu2_64 (base, tmp));\n+\t    emit_insn (gen_tls_dynamic_gnu2_64 (Pmode, base, tmp));\n \t  else\n \t    emit_insn (gen_tls_dynamic_gnu2_32 (base, tmp, pic));\n \n@@ -10864,7 +10876,18 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n \n       if (TARGET_GNU2_TLS)\n \t{\n-\t  dest = force_reg (Pmode, gen_rtx_PLUS (Pmode, dest, tp));\n+\t  /* NB: Since DEST set by tls_dynamic_gnu2_64 is in ptr_mode,\n+\t     make sure that PLUS is done in ptr_mode.  */\n+\t  if (Pmode != ptr_mode)\n+\t    {\n+\t      tp = lowpart_subreg (ptr_mode, tp, Pmode);\n+\t      dest = lowpart_subreg (ptr_mode, dest, Pmode);\n+\t      dest = gen_rtx_PLUS (ptr_mode, tp, dest);\n+\t      dest = gen_rtx_ZERO_EXTEND (Pmode, dest);\n+\t    }\n+\t  else\n+\t    dest = gen_rtx_PLUS (Pmode, tp, dest);\n+\t  dest = force_reg (Pmode, dest);\n \n \t  if (GET_MODE (x) != Pmode)\n \t    x = gen_rtx_ZERO_EXTEND (Pmode, x);"}, {"sha": "de335cb8f029ac8eb61f108a999c0e8970f2086b", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2b60b581c373e4ebcee9ee37c0ab2866f98950/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2b60b581c373e4ebcee9ee37c0ab2866f98950/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1a2b60b581c373e4ebcee9ee37c0ab2866f98950", "patch": "@@ -15185,53 +15185,53 @@\n   emit_insn (gen_tls_dynamic_gnu2_32 (operands[5], operands[1], operands[2]));\n })\n \n-(define_expand \"tls_dynamic_gnu2_64\"\n+(define_expand \"@tls_dynamic_gnu2_64_<mode>\"\n   [(set (match_dup 2)\n-\t(unspec:DI [(match_operand 1 \"tls_symbolic_operand\")]\n-\t\t   UNSPEC_TLSDESC))\n+\t(unspec:P [(match_operand 1 \"tls_symbolic_operand\")]\n+\t\t  UNSPEC_TLSDESC))\n    (parallel\n-    [(set (match_operand:DI 0 \"register_operand\")\n-\t  (unspec:DI [(match_dup 1) (match_dup 2) (reg:DI SP_REG)]\n-\t\t     UNSPEC_TLSDESC))\n+    [(set (match_operand:P 0 \"register_operand\")\n+\t  (unspec:P [(match_dup 1) (match_dup 2) (reg:P SP_REG)]\n+\t\t    UNSPEC_TLSDESC))\n      (clobber (reg:CC FLAGS_REG))])]\n   \"TARGET_64BIT && TARGET_GNU2_TLS\"\n {\n   operands[2] = can_create_pseudo_p () ? gen_reg_rtx (Pmode) : operands[0];\n   ix86_tls_descriptor_calls_expanded_in_cfun = true;\n })\n \n-(define_insn \"*tls_dynamic_gnu2_lea_64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(unspec:DI [(match_operand 1 \"tls_symbolic_operand\")]\n-\t\t   UNSPEC_TLSDESC))]\n+(define_insn \"*tls_dynamic_gnu2_lea_64_<mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+\t(unspec:P [(match_operand 1 \"tls_symbolic_operand\")]\n+\t\t  UNSPEC_TLSDESC))]\n   \"TARGET_64BIT && TARGET_GNU2_TLS\"\n-  \"lea{q}\\t{%E1@TLSDESC(%%rip), %0|%0, %E1@TLSDESC[rip]}\"\n+  \"lea%z0\\t{%E1@TLSDESC(%%rip), %0|%0, %E1@TLSDESC[rip]}\"\n   [(set_attr \"type\" \"lea\")\n-   (set_attr \"mode\" \"DI\")\n+   (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"length\" \"7\")\n    (set_attr \"length_address\" \"4\")])\n \n-(define_insn \"*tls_dynamic_gnu2_call_64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n-\t(unspec:DI [(match_operand 1 \"tls_symbolic_operand\")\n-\t\t    (match_operand:DI 2 \"register_operand\" \"0\")\n-\t\t    (reg:DI SP_REG)]\n-\t\t   UNSPEC_TLSDESC))\n+(define_insn \"*tls_dynamic_gnu2_call_64_<mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=a\")\n+\t(unspec:P [(match_operand 1 \"tls_symbolic_operand\")\n+\t\t   (match_operand:P 2 \"register_operand\" \"0\")\n+\t\t   (reg:P SP_REG)]\n+\t\t  UNSPEC_TLSDESC))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && TARGET_GNU2_TLS\"\n   \"call\\t{*%a1@TLSCALL(%2)|[QWORD PTR [%2+%a1@TLSCALL]]}\"\n   [(set_attr \"type\" \"call\")\n    (set_attr \"length\" \"2\")\n    (set_attr \"length_address\" \"0\")])\n \n-(define_insn_and_split \"*tls_dynamic_gnu2_combine_64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=&a\")\n-\t(plus:DI\n-\t (unspec:DI [(match_operand 2 \"tls_modbase_operand\")\n-\t\t     (match_operand:DI 3)\n-\t\t     (reg:DI SP_REG)]\n-\t\t    UNSPEC_TLSDESC)\n-\t (const:DI (unspec:DI\n+(define_insn_and_split \"*tls_dynamic_gnu2_combine_64_<mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=&a\")\n+\t(plus:P\n+\t (unspec:P [(match_operand 2 \"tls_modbase_operand\")\n+\t\t     (match_operand:P 3)\n+\t\t     (reg:P SP_REG)]\n+\t\t   UNSPEC_TLSDESC)\n+\t (const:P (unspec:P\n \t\t    [(match_operand 1 \"tls_symbolic_operand\")]\n \t\t    UNSPEC_DTPOFF))))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -15241,7 +15241,7 @@\n   [(set (match_dup 0) (match_dup 4))]\n {\n   operands[4] = can_create_pseudo_p () ? gen_reg_rtx (Pmode) : operands[0];\n-  emit_insn (gen_tls_dynamic_gnu2_64 (operands[4], operands[1]));\n+  emit_insn (gen_tls_dynamic_gnu2_64 (Pmode, operands[4], operands[1]));\n })\n \n (define_split"}, {"sha": "d8bf3130048d5417e74c04fd2b3409bf7955336b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2b60b581c373e4ebcee9ee37c0ab2866f98950/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2b60b581c373e4ebcee9ee37c0ab2866f98950/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1a2b60b581c373e4ebcee9ee37c0ab2866f98950", "patch": "@@ -1,3 +1,11 @@\n+2020-01-20  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/93319\n+\t* gcc.target/i386/pr93319-1a.c: New test.\n+\t* gcc.target/i386/pr93319-1b.c: Likewise.\n+\t* gcc.target/i386/pr93319-1c.c: Likewise.\n+\t* gcc.target/i386/pr93319-1d.c: Likewise.\n+\n 2020-01-20  Richard Biener  <rguenther@suse.de>\n \n \tPR debug/92763"}, {"sha": "8f6b4af3225efc056a7c147cddf00b6ade8c726f", "filename": "gcc/testsuite/gcc.target/i386/pr93319-1a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2b60b581c373e4ebcee9ee37c0ab2866f98950/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93319-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2b60b581c373e4ebcee9ee37c0ab2866f98950/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93319-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93319-1a.c?ref=1a2b60b581c373e4ebcee9ee37c0ab2866f98950", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do assemble { target { ! ia32 } } } */\n+/* { dg-require-effective-target maybe_x32 } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-require-effective-target tls_native } */\n+/* { dg-options \"-mx32 -fPIC -mtls-dialect=gnu2\" } */\n+\n+#include <stdio.h>\n+\n+extern __thread int bar;\n+static __thread int foo = 30;\n+\n+int *\n+test1 (void)\n+{\n+  printf (\"foo: %d\\n\", foo);\n+  return &foo;\n+}\n+\n+int *\n+test2 (void)\n+{\n+  printf (\"bar: %d\\n\", bar);\n+  return &bar;\n+}"}, {"sha": "f28cc5578841432b0baeb106666f2e5e27409496", "filename": "gcc/testsuite/gcc.target/i386/pr93319-1b.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2b60b581c373e4ebcee9ee37c0ab2866f98950/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93319-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2b60b581c373e4ebcee9ee37c0ab2866f98950/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93319-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93319-1b.c?ref=1a2b60b581c373e4ebcee9ee37c0ab2866f98950", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do assemble { target { ! ia32 } } } */\n+/* { dg-require-effective-target maybe_x32 } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-require-effective-target tls_native } */\n+/* { dg-options \"-mx32 -O2 -fPIC -mtls-dialect=gnu2\" } */\n+\n+#include \"pr93319-1a.c\""}, {"sha": "2ae0d99b2e201a3e0ea731d16c5b3fd1595b9699", "filename": "gcc/testsuite/gcc.target/i386/pr93319-1c.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2b60b581c373e4ebcee9ee37c0ab2866f98950/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93319-1c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2b60b581c373e4ebcee9ee37c0ab2866f98950/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93319-1c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93319-1c.c?ref=1a2b60b581c373e4ebcee9ee37c0ab2866f98950", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do assemble { target { ! ia32 } } } */\n+/* { dg-require-effective-target maybe_x32 } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-require-effective-target tls_native } */\n+/* { dg-options \"-mx32 -O2 -fPIC -mtls-dialect=gnu2 -maddress-mode=long\" } */\n+\n+#include \"pr93319-1a.c\""}, {"sha": "feb378d2971ff39cbca48cd2c1aa9e7c3a234ffd", "filename": "gcc/testsuite/gcc.target/i386/pr93319-1d.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2b60b581c373e4ebcee9ee37c0ab2866f98950/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93319-1d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2b60b581c373e4ebcee9ee37c0ab2866f98950/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93319-1d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93319-1d.c?ref=1a2b60b581c373e4ebcee9ee37c0ab2866f98950", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do assemble { target { ! ia32 } } } */\n+/* { dg-require-effective-target maybe_x32 } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-require-effective-target tls_native } */\n+/* { dg-options \"-mx32 -fPIC -mtls-dialect=gnu2 -maddress-mode=long\" } */\n+\n+#include \"pr93319-1a.c\""}]}