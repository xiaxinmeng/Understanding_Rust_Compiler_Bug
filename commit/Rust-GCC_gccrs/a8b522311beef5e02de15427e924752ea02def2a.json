{"sha": "a8b522311beef5e02de15427e924752ea02def2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThiNTIyMzExYmVlZjVlMDJkZTE1NDI3ZTkyNDc1MmVhMDJkZWYyYQ==", "commit": {"author": {"name": "Kwok Cheung Yeung", "email": "kcy@codesourcery.com", "date": "2020-07-06T22:21:08Z"}, "committer": {"name": "Kwok Cheung Yeung", "email": "kcy@codesourcery.com", "date": "2020-07-08T19:11:10Z"}, "message": "amdgcn, nvptx: Handle -fpic/-fPIC in mkoffload\n\n2020-07-08  Tobias Burnus  <tobias@codesourcery.com>\n\ngcc/ChangeLog:\n\n\t* config/gcn/mkoffload.c (compile_native, main): Pass -fPIC/-fpic\n\ton to the native compiler, if used.\n\t* config/nvptx/mkoffload.c (compile_native, main): Likewise.", "tree": {"sha": "4a930f020e6b9be982fd44eaacf9547c37622699", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a930f020e6b9be982fd44eaacf9547c37622699"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8b522311beef5e02de15427e924752ea02def2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8b522311beef5e02de15427e924752ea02def2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8b522311beef5e02de15427e924752ea02def2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8b522311beef5e02de15427e924752ea02def2a/comments", "author": {"login": "k-yeung", "id": 16960193, "node_id": "MDQ6VXNlcjE2OTYwMTkz", "avatar_url": "https://avatars.githubusercontent.com/u/16960193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k-yeung", "html_url": "https://github.com/k-yeung", "followers_url": "https://api.github.com/users/k-yeung/followers", "following_url": "https://api.github.com/users/k-yeung/following{/other_user}", "gists_url": "https://api.github.com/users/k-yeung/gists{/gist_id}", "starred_url": "https://api.github.com/users/k-yeung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k-yeung/subscriptions", "organizations_url": "https://api.github.com/users/k-yeung/orgs", "repos_url": "https://api.github.com/users/k-yeung/repos", "events_url": "https://api.github.com/users/k-yeung/events{/privacy}", "received_events_url": "https://api.github.com/users/k-yeung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "k-yeung", "id": 16960193, "node_id": "MDQ6VXNlcjE2OTYwMTkz", "avatar_url": "https://avatars.githubusercontent.com/u/16960193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k-yeung", "html_url": "https://github.com/k-yeung", "followers_url": "https://api.github.com/users/k-yeung/followers", "following_url": "https://api.github.com/users/k-yeung/following{/other_user}", "gists_url": "https://api.github.com/users/k-yeung/gists{/gist_id}", "starred_url": "https://api.github.com/users/k-yeung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k-yeung/subscriptions", "organizations_url": "https://api.github.com/users/k-yeung/orgs", "repos_url": "https://api.github.com/users/k-yeung/repos", "events_url": "https://api.github.com/users/k-yeung/events{/privacy}", "received_events_url": "https://api.github.com/users/k-yeung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fa08dcac686ca5b6d84e64c9f5813daef59f540", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fa08dcac686ca5b6d84e64c9f5813daef59f540", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fa08dcac686ca5b6d84e64c9f5813daef59f540"}], "stats": {"total": 30, "additions": 26, "deletions": 4}, "files": [{"sha": "0415d945e7279c8f70f6f01d1312bade481505ad", "filename": "gcc/config/gcn/mkoffload.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b522311beef5e02de15427e924752ea02def2a/gcc%2Fconfig%2Fgcn%2Fmkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b522311beef5e02de15427e924752ea02def2a/gcc%2Fconfig%2Fgcn%2Fmkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fmkoffload.c?ref=a8b522311beef5e02de15427e924752ea02def2a", "patch": "@@ -483,7 +483,8 @@ process_obj (FILE *in, FILE *cfile)\n /* Compile a C file using the host compiler.  */\n \n static void\n-compile_native (const char *infile, const char *outfile, const char *compiler)\n+compile_native (const char *infile, const char *outfile, const char *compiler,\n+\t\tbool fPIC, bool fpic)\n {\n   const char *collect_gcc_options = getenv (\"COLLECT_GCC_OPTIONS\");\n   if (!collect_gcc_options)\n@@ -493,6 +494,10 @@ compile_native (const char *infile, const char *outfile, const char *compiler)\n   struct obstack argv_obstack;\n   obstack_init (&argv_obstack);\n   obstack_ptr_grow (&argv_obstack, compiler);\n+  if (fPIC)\n+    obstack_ptr_grow (&argv_obstack, \"-fPIC\");\n+  if (fpic)\n+    obstack_ptr_grow (&argv_obstack, \"-fpic\");\n   if (save_temps)\n     obstack_ptr_grow (&argv_obstack, \"-save-temps\");\n   if (verbose)\n@@ -596,6 +601,8 @@ main (int argc, char **argv)\n   /* Scan the argument vector.  */\n   bool fopenmp = false;\n   bool fopenacc = false;\n+  bool fPIC = false;\n+  bool fpic = false;\n   for (int i = 1; i < argc; i++)\n     {\n #define STR \"-foffload-abi=\"\n@@ -614,6 +621,10 @@ main (int argc, char **argv)\n \tfopenmp = true;\n       else if (strcmp (argv[i], \"-fopenacc\") == 0)\n \tfopenacc = true;\n+      else if (strcmp (argv[i], \"-fPIC\") == 0)\n+\tfPIC = true;\n+      else if (strcmp (argv[i], \"-fpic\") == 0)\n+\tfpic = true;\n       else if (strcmp (argv[i], \"-save-temps\") == 0)\n \tsave_temps = true;\n       else if (strcmp (argv[i], \"-v\") == 0)\n@@ -766,7 +777,7 @@ main (int argc, char **argv)\n   xputenv (concat (\"COMPILER_PATH=\", cpath, NULL));\n   xputenv (concat (\"LIBRARY_PATH=\", lpath, NULL));\n \n-  compile_native (gcn_cfile_name, outname, collect_gcc);\n+  compile_native (gcn_cfile_name, outname, collect_gcc, fPIC, fpic);\n \n   return 0;\n }"}, {"sha": "4fecb2b9cfe39784f77ee8dcaf1399adda5867f1", "filename": "gcc/config/nvptx/mkoffload.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b522311beef5e02de15427e924752ea02def2a/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b522311beef5e02de15427e924752ea02def2a/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c?ref=a8b522311beef5e02de15427e924752ea02def2a", "patch": "@@ -356,7 +356,8 @@ process (FILE *in, FILE *out)\n }\n \n static void\n-compile_native (const char *infile, const char *outfile, const char *compiler)\n+compile_native (const char *infile, const char *outfile, const char *compiler,\n+\t\tbool fPIC, bool fpic)\n {\n   const char *collect_gcc_options = getenv (\"COLLECT_GCC_OPTIONS\");\n   if (!collect_gcc_options)\n@@ -366,6 +367,10 @@ compile_native (const char *infile, const char *outfile, const char *compiler)\n   struct obstack argv_obstack;\n   obstack_init (&argv_obstack);\n   obstack_ptr_grow (&argv_obstack, compiler);\n+  if (fPIC)\n+    obstack_ptr_grow (&argv_obstack, \"-fPIC\");\n+  if (fpic)\n+    obstack_ptr_grow (&argv_obstack, \"-fpic\");\n   if (save_temps)\n     obstack_ptr_grow (&argv_obstack, \"-save-temps\");\n   if (verbose)\n@@ -471,6 +476,8 @@ main (int argc, char **argv)\n   /* Scan the argument vector.  */\n   bool fopenmp = false;\n   bool fopenacc = false;\n+  bool fPIC = false;\n+  bool fpic = false;\n   for (int i = 1; i < argc; i++)\n     {\n #define STR \"-foffload-abi=\"\n@@ -489,6 +496,10 @@ main (int argc, char **argv)\n \tfopenmp = true;\n       else if (strcmp (argv[i], \"-fopenacc\") == 0)\n \tfopenacc = true;\n+      else if (strcmp (argv[i], \"-fPIC\") == 0)\n+\tfPIC = true;\n+      else if (strcmp (argv[i], \"-fpic\") == 0)\n+\tfpic = true;\n       else if (strcmp (argv[i], \"-save-temps\") == 0)\n \tsave_temps = true;\n       else if (strcmp (argv[i], \"-v\") == 0)\n@@ -587,7 +598,7 @@ main (int argc, char **argv)\n \n   fclose (out);\n \n-  compile_native (ptx_cfile_name, outname, collect_gcc);\n+  compile_native (ptx_cfile_name, outname, collect_gcc, fPIC, fpic);\n \n   return 0;\n }"}]}