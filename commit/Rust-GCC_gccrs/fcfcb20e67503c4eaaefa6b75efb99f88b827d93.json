{"sha": "fcfcb20e67503c4eaaefa6b75efb99f88b827d93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNmY2IyMGU2NzUwM2M0ZWFhZWZhNmI3NWVmYjk5Zjg4YjgyN2Q5Mw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-02-22T22:33:12Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-22T22:33:12Z"}, "message": "* reorg.c: Remove comments about dead ports.\n\nFrom-SVN: r78280", "tree": {"sha": "a7baea009885f571a8d76471ba5734b8eaf626c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7baea009885f571a8d76471ba5734b8eaf626c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcfcb20e67503c4eaaefa6b75efb99f88b827d93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcfcb20e67503c4eaaefa6b75efb99f88b827d93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcfcb20e67503c4eaaefa6b75efb99f88b827d93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcfcb20e67503c4eaaefa6b75efb99f88b827d93/comments", "author": null, "committer": null, "parents": [{"sha": "56d03a4010155be19d3f44e6410a16afd3b58f4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56d03a4010155be19d3f44e6410a16afd3b58f4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56d03a4010155be19d3f44e6410a16afd3b58f4e"}], "stats": {"total": 17, "additions": 6, "deletions": 11}, "files": [{"sha": "e0d0323ff4e546c05ee0062fb37c65019f851215", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcfcb20e67503c4eaaefa6b75efb99f88b827d93/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcfcb20e67503c4eaaefa6b75efb99f88b827d93/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fcfcb20e67503c4eaaefa6b75efb99f88b827d93", "patch": "@@ -1,3 +1,7 @@\n+2004-02-22  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* reorg.c: Remove comments about dead ports.\n+\n 2004-02-22  Christopher Faylor  <cgf@redhat.com>\n \n \t* config.gcc (i[34567]86-*-pe|i[34567]86-*-cygwin*): *Really* specify"}, {"sha": "cab9d46ab75029465645c0d7a5be83f79d62b486", "filename": "gcc/reorg.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcfcb20e67503c4eaaefa6b75efb99f88b827d93/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcfcb20e67503c4eaaefa6b75efb99f88b827d93/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=fcfcb20e67503c4eaaefa6b75efb99f88b827d93", "patch": "@@ -36,19 +36,11 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    cycle, and the Branch Penalty is 0.  Several RISC machines approach\n    branch delays differently:\n \n-   The MIPS and AMD 29000 have a single branch delay slot.  Most insns\n+   The MIPS has a single branch delay slot.  Most insns\n    (except other branches) can be used to fill this slot.  When the\n    slot is filled, two insns execute in two cycles, reducing the\n    branch penalty to zero.\n \n-   The Motorola 88000 conditionally exposes its branch delay slot,\n-   so code is shorter when it is turned off, but will run faster\n-   when useful insns are scheduled there.\n-\n-   The IBM ROMP has two forms of branch and call insns, both with and\n-   without a delay slot.  Much like the 88k, insns not using the delay\n-   slot can be shorted (2 bytes vs. 4 bytes), but will run slowed.\n-\n    The SPARC always has a branch delay slot, but its effects can be\n    annulled when the branch is not taken.  This means that failing to\n    find other sources of insns, we can hoist an insn from the branch\n@@ -84,8 +76,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    `fill_eager_delay_slots' tries to guess the direction the branch\n    will go; if it guesses right 100% of the time, it can reduce the\n    branch penalty as much as `fill_simple_delay_slots' does.  If it\n-   guesses wrong 100% of the time, it might as well schedule nops (or\n-   on the m88k, unexpose the branch slot).  When\n+   guesses wrong 100% of the time, it might as well schedule nops.  When\n    `fill_eager_delay_slots' takes insns from the fall-through path of\n    the jump, usually there is no code expansion; when it takes insns\n    from the branch target, there is code expansion if it is not the"}]}