{"sha": "9801ca737b1dcbf51c0d07db59dd204a047dd3f7", "node_id": "C_kwDOANBUbNoAKDk4MDFjYTczN2IxZGNiZjUxYzBkMDdkYjU5ZGQyMDRhMDQ3ZGQzZjc", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-10T13:39:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-10T13:41:41Z"}, "message": "Use gimple-match folding in fold_build_cond_expr\n\nThe following cleans up if-conversions fold_build_cond_expr to\nuse gimple-match folding instead of GENERIC folding.\n\n2022-05-10  Richard Biener  <rguenther@suse.de>\n\n\t* tree-if-conv.cc (fold_build_cond_expr): Use\n\tmatch-and-simplify to simplify the condition.\n\t(ifcvt_follow_ssa_use_edges): Remove.\n\t(predicate_scalar_phi): Use follow_all_ssa_edges.", "tree": {"sha": "9a07824e05d10fe7741daf132f01a2de1925aa59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a07824e05d10fe7741daf132f01a2de1925aa59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9801ca737b1dcbf51c0d07db59dd204a047dd3f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9801ca737b1dcbf51c0d07db59dd204a047dd3f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9801ca737b1dcbf51c0d07db59dd204a047dd3f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9801ca737b1dcbf51c0d07db59dd204a047dd3f7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da6305558bab9e24943848e4fc5bd8738d7e8f9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da6305558bab9e24943848e4fc5bd8738d7e8f9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da6305558bab9e24943848e4fc5bd8738d7e8f9b"}], "stats": {"total": 46, "additions": 11, "deletions": 35}, "files": [{"sha": "57cc38567d340b9e3c2c2f1efaa219f20f7872e8", "filename": "gcc/tree-if-conv.cc", "status": "modified", "additions": 11, "deletions": 35, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9801ca737b1dcbf51c0d07db59dd204a047dd3f7/gcc%2Ftree-if-conv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9801ca737b1dcbf51c0d07db59dd204a047dd3f7/gcc%2Ftree-if-conv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.cc?ref=9801ca737b1dcbf51c0d07db59dd204a047dd3f7", "patch": "@@ -459,8 +459,6 @@ fold_or_predicates (location_t loc, tree c1, tree c2)\n static tree\n fold_build_cond_expr (tree type, tree cond, tree rhs, tree lhs)\n {\n-  tree rhs1, lhs1, cond_expr;\n-\n   /* If COND is comparison r != 0 and r has boolean type, convert COND\n      to SSA_NAME to accept by vect bool pattern.  */\n   if (TREE_CODE (cond) == NE_EXPR)\n@@ -472,34 +470,20 @@ fold_build_cond_expr (tree type, tree cond, tree rhs, tree lhs)\n \t  && (integer_zerop (op1)))\n \tcond = op0;\n     }\n-  cond_expr = fold_ternary (COND_EXPR, type, cond, rhs, lhs);\n-\n-  if (cond_expr == NULL_TREE)\n-    return build3 (COND_EXPR, type, cond, rhs, lhs);\n-\n-  STRIP_USELESS_TYPE_CONVERSION (cond_expr);\n \n-  if (is_gimple_val (cond_expr))\n-    return cond_expr;\n-\n-  if (TREE_CODE (cond_expr) == ABS_EXPR)\n+  gimple_match_op cexpr (gimple_match_cond::UNCOND, COND_EXPR,\n+\t\t\t type, cond, rhs, lhs);\n+  if (cexpr.resimplify (NULL, follow_all_ssa_edges))\n     {\n-      rhs1 = TREE_OPERAND (cond_expr, 1);\n-      STRIP_USELESS_TYPE_CONVERSION (rhs1);\n-      if (is_gimple_val (rhs1))\n-\treturn build1 (ABS_EXPR, type, rhs1);\n+      if (gimple_simplified_result_is_gimple_val (&cexpr))\n+\treturn cexpr.ops[0];\n+      else if (cexpr.code == ABS_EXPR)\n+\treturn build1 (ABS_EXPR, type, cexpr.ops[0]);\n+      else if (cexpr.code == MIN_EXPR\n+\t       || cexpr.code == MAX_EXPR)\n+\treturn build2 ((tree_code)cexpr.code, type, cexpr.ops[0], cexpr.ops[1]);\n     }\n \n-  if (TREE_CODE (cond_expr) == MIN_EXPR\n-      || TREE_CODE (cond_expr) == MAX_EXPR)\n-    {\n-      lhs1 = TREE_OPERAND (cond_expr, 0);\n-      STRIP_USELESS_TYPE_CONVERSION (lhs1);\n-      rhs1 = TREE_OPERAND (cond_expr, 1);\n-      STRIP_USELESS_TYPE_CONVERSION (rhs1);\n-      if (is_gimple_val (rhs1) && is_gimple_val (lhs1))\n-\treturn build2 (TREE_CODE (cond_expr), type, lhs1, rhs1);\n-    }\n   return build3 (COND_EXPR, type, cond, rhs, lhs);\n }\n \n@@ -1897,14 +1881,6 @@ gen_phi_arg_condition (gphi *phi, vec<int> *occur,\n   return cond;\n }\n \n-/* Local valueization callback that follows all-use SSA edges.  */\n-\n-static tree\n-ifcvt_follow_ssa_use_edges (tree val)\n-{\n-  return val;\n-}\n-\n /* Replace a scalar PHI node with a COND_EXPR using COND as condition.\n    This routine can handle PHI nodes with more than two arguments.\n \n@@ -2007,7 +1983,7 @@ predicate_scalar_phi (gphi *phi, gimple_stmt_iterator *gsi)\n       new_stmt = gimple_build_assign (res, rhs);\n       gsi_insert_before (gsi, new_stmt, GSI_SAME_STMT);\n       gimple_stmt_iterator new_gsi = gsi_for_stmt (new_stmt);\n-      if (fold_stmt (&new_gsi, ifcvt_follow_ssa_use_edges))\n+      if (fold_stmt (&new_gsi, follow_all_ssa_edges))\n \t{\n \t  new_stmt = gsi_stmt (new_gsi);\n \t  update_stmt (new_stmt);"}]}