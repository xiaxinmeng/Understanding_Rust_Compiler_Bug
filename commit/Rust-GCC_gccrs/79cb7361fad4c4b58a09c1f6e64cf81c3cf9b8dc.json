{"sha": "79cb7361fad4c4b58a09c1f6e64cf81c3cf9b8dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzljYjczNjFmYWQ0YzRiNThhMDljMWY2ZTY0Y2Y4MWMzY2Y5YjhkYw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-04-02T15:20:53Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-04-02T15:20:53Z"}, "message": "configure.in: Don't check for putenv.\n\n\t* configure.in: Don't check for putenv.\n\t* configure: Regenerate.\n\t* gcc.c (putenv): Don't define.\n\t* vax/xm-vms.h: Handle putenv.\n\nFrom-SVN: r41005", "tree": {"sha": "1f734b5edaed710ac6c28e8f016f27249ad85131", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f734b5edaed710ac6c28e8f016f27249ad85131"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79cb7361fad4c4b58a09c1f6e64cf81c3cf9b8dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79cb7361fad4c4b58a09c1f6e64cf81c3cf9b8dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79cb7361fad4c4b58a09c1f6e64cf81c3cf9b8dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79cb7361fad4c4b58a09c1f6e64cf81c3cf9b8dc/comments", "author": null, "committer": null, "parents": [{"sha": "32ff70d299868259273da1199ff7025b3df8f9d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32ff70d299868259273da1199ff7025b3df8f9d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32ff70d299868259273da1199ff7025b3df8f9d1"}], "stats": {"total": 75, "additions": 18, "deletions": 57}, "files": [{"sha": "c63faee332946ac4a1d47836655017fc9d3a39e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79cb7361fad4c4b58a09c1f6e64cf81c3cf9b8dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79cb7361fad4c4b58a09c1f6e64cf81c3cf9b8dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79cb7361fad4c4b58a09c1f6e64cf81c3cf9b8dc", "patch": "@@ -1,3 +1,10 @@\n+2001-04-02  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* configure.in: Don't check for putenv.\n+\t* configure: Regenerate.\n+\t* gcc.c (putenv): Don't define.\n+\t* vax/xm-vms.h: Handle putenv.\n+\n 2001-04-02  Jakub Jelinek  <jakub@redhat.com>\n \n \t* ifcvt.c (noce_emit_move_insn): New."}, {"sha": "5cda8408e0edb15238b4bafe7d2cb29a1a302acf", "filename": "gcc/config/vax/xm-vms.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79cb7361fad4c4b58a09c1f6e64cf81c3cf9b8dc/gcc%2Fconfig%2Fvax%2Fxm-vms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79cb7361fad4c4b58a09c1f6e64cf81c3cf9b8dc/gcc%2Fconfig%2Fvax%2Fxm-vms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fxm-vms.h?ref=79cb7361fad4c4b58a09c1f6e64cf81c3cf9b8dc", "patch": "@@ -101,6 +101,14 @@ Boston, MA 02111-1307, USA.  */\n /* vprintf() has been available since VMS V4.6.  */\n \n #define HAVE_VPRINTF\n+\n+/* Early versions of VAX C for VMS do not have putenv.  Comment out\n+   the following define if your system doesn't have putenv.  */\n+#define HAVE_PUTENV\n+\n+#ifndef HAVE_PUTENV\n+#define putenv(x)\n+#endif\n \f\n #if defined(VAXC) || defined(__DECC)\n "}, {"sha": "2f97b6af47dec2af4dbf8e0b308df72ccf443d49", "filename": "gcc/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79cb7361fad4c4b58a09c1f6e64cf81c3cf9b8dc/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79cb7361fad4c4b58a09c1f6e64cf81c3cf9b8dc/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=79cb7361fad4c4b58a09c1f6e64cf81c3cf9b8dc", "patch": "@@ -2018,7 +2018,7 @@ EOF\n fi\n \n # Find some useful tools\n-for ac_prog in gawk mawk nawk awk\n+for ac_prog in mawk gawk nawk awk\n do\n # Extract the first word of \"$ac_prog\", so it can be a program name with args.\n set dummy $ac_prog; ac_word=$2\n@@ -3099,7 +3099,7 @@ EOF\n fi\n \n \n-for ac_func in strtoul bsearch putenv popen \\\n+for ac_func in strtoul bsearch popen \\\n \tstrchr strrchr kill getrlimit setrlimit atoll atoq \\\n \tsysconf isascii gettimeofday strsignal putc_unlocked fputc_unlocked \\\n \tfputs_unlocked getrusage iconv nl_langinfo"}, {"sha": "a26f8a7146c7cda7b92852ef9ce691a0c958ea3e", "filename": "gcc/configure.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79cb7361fad4c4b58a09c1f6e64cf81c3cf9b8dc/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79cb7361fad4c4b58a09c1f6e64cf81c3cf9b8dc/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=79cb7361fad4c4b58a09c1f6e64cf81c3cf9b8dc", "patch": "@@ -544,7 +544,7 @@ fi\n dnl Disabled until we have a complete test for buggy enum bitfields.\n dnl gcc_AC_C_ENUM_BF_UNSIGNED\n \n-AC_CHECK_FUNCS(strtoul bsearch putenv popen \\\n+AC_CHECK_FUNCS(strtoul bsearch popen \\\n \tstrchr strrchr kill getrlimit setrlimit atoll atoq \\\n \tsysconf isascii gettimeofday strsignal putc_unlocked fputc_unlocked \\\n \tfputs_unlocked getrusage iconv nl_langinfo)"}, {"sha": "45569888d43c26f1a1f57fabaa545ff1c3d4780e", "filename": "gcc/gcc.c", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79cb7361fad4c4b58a09c1f6e64cf81c3cf9b8dc/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79cb7361fad4c4b58a09c1f6e64cf81c3cf9b8dc/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=79cb7361fad4c4b58a09c1f6e64cf81c3cf9b8dc", "patch": "@@ -2009,60 +2009,6 @@ clear_failure_queue ()\n   failure_delete_queue = 0;\n }\n \f\n-/* Routine to add variables to the environment.  We do this to pass\n-   the pathname of the gcc driver, and the directories search to the\n-   collect2 program, which is being run as ld.  This way, we can be\n-   sure of executing the right compiler when collect2 wants to build\n-   constructors and destructors.  Since the environment variables we\n-   use come from an obstack, we don't have to worry about allocating\n-   space for them.  */\n-\n-#ifndef HAVE_PUTENV\n-\n-void\n-putenv (str)\n-     char *str;\n-{\n-#ifndef VMS\t\t\t/* nor about VMS */\n-\n-  extern char **environ;\n-  char **old_environ = environ;\n-  char **envp;\n-  int num_envs = 0;\n-  int name_len = 1;\n-  int str_len = strlen (str);\n-  char *p = str;\n-  int ch;\n-\n-  while ((ch = *p++) != '\\0' && ch != '=')\n-    name_len++;\n-\n-  if (!ch)\n-    abort ();\n-\n-  /* Search for replacing an existing environment variable, and\n-     count the number of total environment variables.  */\n-  for (envp = old_environ; *envp; envp++)\n-    {\n-      num_envs++;\n-      if (!strncmp (str, *envp, name_len))\n-\t{\n-\t  *envp = str;\n-\t  return;\n-\t}\n-    }\n-\n-  /* Add a new environment variable */\n-  environ = (char **) xmalloc (sizeof (char *) * (num_envs + 2));\n-  *environ = str;\n-  memcpy ((char *) (environ + 1), (char *) old_environ,\n-\t  sizeof (char *) * (num_envs + 1));\n-\n-#endif\t/* VMS */\n-}\n-\n-#endif /* HAVE_PUTENV */\n-\f\n /* Build a list of search directories from PATHS.\n    PREFIX is a string to prepend to the list.\n    If CHECK_DIR_P is non-zero we ensure the directory exists."}]}