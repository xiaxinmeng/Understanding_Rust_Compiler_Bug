{"sha": "d98c1e3389cc03653227bed93936da165dc4ac1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk4YzFlMzM4OWNjMDM2NTMyMjdiZWQ5MzkzNmRhMTY1ZGM0YWMxYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-08-30T02:41:36Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-08-30T02:41:36Z"}, "message": "(RTL_HASH, attr_rtx): Avoid warnings by casting pointers to\nHOST_WIDE_INT instead of int.\n\nFrom-SVN: r1996", "tree": {"sha": "34d8555d62b14b9d0c9f410e98bfaf8bfcb92efc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34d8555d62b14b9d0c9f410e98bfaf8bfcb92efc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d98c1e3389cc03653227bed93936da165dc4ac1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d98c1e3389cc03653227bed93936da165dc4ac1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d98c1e3389cc03653227bed93936da165dc4ac1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d98c1e3389cc03653227bed93936da165dc4ac1c/comments", "author": null, "committer": null, "parents": [{"sha": "4a96984737a74d730d1775f9e2e84046dec9fab7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a96984737a74d730d1775f9e2e84046dec9fab7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a96984737a74d730d1775f9e2e84046dec9fab7"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "68a6f8637042df37ab198d38c510fc0e2e709605", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d98c1e3389cc03653227bed93936da165dc4ac1c/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d98c1e3389cc03653227bed93936da165dc4ac1c/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=d98c1e3389cc03653227bed93936da165dc4ac1c", "patch": "@@ -409,7 +409,7 @@ struct attr_hash *attr_hash_table[RTL_HASH_SIZE];\n \n /* Here is how primitive or already-shared RTL's hash\n    codes are made.  */\n-#define RTL_HASH(RTL) ((int) (RTL) & 0777777)\n+#define RTL_HASH(RTL) ((HOST_WIDE_INT) (RTL) & 0777777)\n \n /* Add an entry to the hash table for RTL with hash code HASHCODE.  */\n \n@@ -489,7 +489,7 @@ attr_rtx (va_alist)\n \t  return rt_val;\n \t}\n \n-      hashcode = ((int) code + RTL_HASH (arg0));\n+      hashcode = ((HOST_WIDE_INT) code + RTL_HASH (arg0));\n       for (h = attr_hash_table[hashcode % RTL_HASH_SIZE]; h; h = h->next)\n \tif (h->hashcode == hashcode\n \t    && GET_CODE (h->u.rtl) == code\n@@ -520,7 +520,7 @@ attr_rtx (va_alist)\n \t  return rt_val;\n \t}\n \n-      hashcode = ((int) code + RTL_HASH (arg0) + RTL_HASH (arg1));\n+      hashcode = ((HOST_WIDE_INT) code + RTL_HASH (arg0) + RTL_HASH (arg1));\n       for (h = attr_hash_table[hashcode % RTL_HASH_SIZE]; h; h = h->next)\n \tif (h->hashcode == hashcode\n \t    && GET_CODE (h->u.rtl) == code\n@@ -544,7 +544,7 @@ attr_rtx (va_alist)\n       if (code == SYMBOL_REF)\n \targ0 = attr_string (arg0, strlen (arg0));\n \n-      hashcode = ((int) code + RTL_HASH (arg0));\n+      hashcode = ((HOST_WIDE_INT) code + RTL_HASH (arg0));\n       for (h = attr_hash_table[hashcode % RTL_HASH_SIZE]; h; h = h->next)\n \tif (h->hashcode == hashcode\n \t    && GET_CODE (h->u.rtl) == code\n@@ -565,7 +565,7 @@ attr_rtx (va_alist)\n       char *arg0 = va_arg (p, char *);\n       char *arg1 = va_arg (p, char *);\n \n-      hashcode = ((int) code + RTL_HASH (arg0) + RTL_HASH (arg1));\n+      hashcode = ((HOST_WIDE_INT) code + RTL_HASH (arg0) + RTL_HASH (arg1));\n       for (h = attr_hash_table[hashcode % RTL_HASH_SIZE]; h; h = h->next)\n \tif (h->hashcode == hashcode\n \t    && GET_CODE (h->u.rtl) == code"}]}