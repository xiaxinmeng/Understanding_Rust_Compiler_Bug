{"sha": "d101590bee35f4025ee7dc8c2032e4320e79a82c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDEwMTU5MGJlZTM1ZjQwMjVlZTdkYzhjMjAzMmU0MzIwZTc5YTgyYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-04-17T23:33:05Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-04-17T23:33:05Z"}, "message": "gcov-dump.c (tag_summary): Remove max_sum\n\n\t* gcov-dump.c (tag_summary): Remove max_sum\n\t* gcov-io.h (gcov_summary, gcov_write_summary, gcov_read_summary): Kill\n\tmax_sum.\n\t* libgcov.c (gcov_exit): Do one pass over the data.  Make error message\n\tmore verbose.\n\nFrom-SVN: r65758", "tree": {"sha": "23752dc94793eb5296a89023e2bd1815c4e0ce8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23752dc94793eb5296a89023e2bd1815c4e0ce8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d101590bee35f4025ee7dc8c2032e4320e79a82c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d101590bee35f4025ee7dc8c2032e4320e79a82c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d101590bee35f4025ee7dc8c2032e4320e79a82c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d101590bee35f4025ee7dc8c2032e4320e79a82c/comments", "author": null, "committer": null, "parents": [{"sha": "04c5580f371b08c0cccb05a520b69097512e3f62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04c5580f371b08c0cccb05a520b69097512e3f62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04c5580f371b08c0cccb05a520b69097512e3f62"}], "stats": {"total": 151, "additions": 78, "deletions": 73}, "files": [{"sha": "f128fe5ecde2f19dd532f36a59a7313e74c1f455", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d101590bee35f4025ee7dc8c2032e4320e79a82c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d101590bee35f4025ee7dc8c2032e4320e79a82c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d101590bee35f4025ee7dc8c2032e4320e79a82c", "patch": "@@ -1,5 +1,11 @@\n Fri Apr 18 01:28:51 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n+\t* gcov-dump.c (tag_summary): Remove max_sum\n+\t* gcov-io.h (gcov_summary, gcov_write_summary, gcov_read_summary): Kill\n+\tmax_sum.\n+\t* libgcov.c (gcov_exit): Do one pass over the data.  Make error message\n+\tmore verbose.\n+\n \t* emit-rtl.c (subreg_hard_regno):  Check that register is representable.\n \t* reload.c (reload_inner_reg_of_subreg):  When register is not\n \trepresentable, reload the whole thing."}, {"sha": "9b17d2145fe097acd7b2be6f82e223671525a3dd", "filename": "gcc/gcov-dump.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d101590bee35f4025ee7dc8c2032e4320e79a82c/gcc%2Fgcov-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d101590bee35f4025ee7dc8c2032e4320e79a82c/gcc%2Fgcov-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-dump.c?ref=d101590bee35f4025ee7dc8c2032e4320e79a82c", "patch": "@@ -407,9 +407,6 @@ tag_summary (filename, tag, length)\n   printf (\", arc_max_one=\");\n   printf (HOST_WIDEST_INT_PRINT_DEC, \n \t  (HOST_WIDEST_INT)summary.arc_max_one);\n-  printf (\"\\n%s:\\t\\tmax_sum=\", filename);\n-  printf (HOST_WIDEST_INT_PRINT_DEC, \n-\t  (HOST_WIDEST_INT)summary.arc_max_sum);\n   printf (\", sum_max=\");\n   printf (HOST_WIDEST_INT_PRINT_DEC, \n \t  (HOST_WIDEST_INT)summary.arc_sum_max);"}, {"sha": "4da674921dc4aa45fc912172aad08133156ba2ef", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d101590bee35f4025ee7dc8c2032e4320e79a82c/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d101590bee35f4025ee7dc8c2032e4320e79a82c/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=d101590bee35f4025ee7dc8c2032e4320e79a82c", "patch": "@@ -120,7 +120,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \tannounce_function: header string:name int32:checksum\n \tarc_counts: header int64:count*\n \tsummary: in32:checksum int32:runs int32:arcs int64:sum int64:max \\\n-\t\tint64:max_sum int64:sum_max\n+\t\tint64:sum_max\n \n    The ANNOUNCE_FUNCTION record is the same as that in the BBG file,\n    but without the source location.\n@@ -220,7 +220,6 @@ struct gcov_summary\n   unsigned arcs;\t  /* number of instrumented arcs */\n   gcov_type arc_sum;      /* sum of all arc counters */\n   gcov_type arc_max_one;  /* max counter on any one run */\n-  gcov_type arc_max_sum;  /* maximum arc_sum */\n   gcov_type arc_sum_max;  /* sum of max_one */\n };\n \n@@ -618,7 +617,6 @@ gcov_write_summary (unsigned tag, const struct gcov_summary *summary)\n   gcov_write_unsigned (summary->arcs);\n   gcov_write_counter (summary->arc_sum);\n   gcov_write_counter (summary->arc_max_one);\n-  gcov_write_counter (summary->arc_max_sum);\n   gcov_write_counter (summary->arc_sum_max);\n   gcov_write_length (base);\n }\n@@ -718,7 +716,6 @@ gcov_read_summary (struct gcov_summary *summary)\n   summary->arcs = gcov_read_unsigned ();\n   summary->arc_sum = gcov_read_counter ();\n   summary->arc_max_one = gcov_read_counter ();\n-  summary->arc_max_sum =  gcov_read_counter ();\n   summary->arc_sum_max = gcov_read_counter ();\n }\n "}, {"sha": "7a1a3926c93230be1c35a1e6d1a703a6f5896e91", "filename": "gcc/libgcov.c", "status": "modified", "additions": 71, "deletions": 66, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d101590bee35f4025ee7dc8c2032e4320e79a82c/gcc%2Flibgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d101590bee35f4025ee7dc8c2032e4320e79a82c/gcc%2Flibgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcov.c?ref=d101590bee35f4025ee7dc8c2032e4320e79a82c", "patch": "@@ -97,15 +97,38 @@ gcov_exit (void)\n {\n   struct gcov_info *ptr;\n   unsigned ix, jx;\n-  struct gcov_summary program;\n   gcov_type program_max_one = 0;\n-  gcov_type program_max_sum = 0;\n   gcov_type program_sum = 0;\n   unsigned program_arcs = 0;\n+  struct gcov_summary last_prg;\n   \n-  memset (&program, 0, sizeof (program));\n-  program.checksum = gcov_crc32;\n-  \n+  last_prg.runs = 0;\n+\n+  for (ptr = gcov_list; ptr; ptr = ptr->next)\n+    {\n+      unsigned arc_data_index;\n+      gcov_type *count_ptr;\n+\n+      if (!ptr->filename)\n+\tcontinue;\n+\n+      for (arc_data_index = 0;\n+\t   arc_data_index < ptr->n_counter_sections\n+\t   && ptr->counter_sections[arc_data_index].tag != GCOV_TAG_ARC_COUNTS;\n+\t   arc_data_index++)\n+\tcontinue;\n+\n+      for (ix = ptr->counter_sections[arc_data_index].n_counters,\n+\t   count_ptr = ptr->counter_sections[arc_data_index].counters; ix--;)\n+\t{\n+\t  gcov_type count = *count_ptr++;\n+\n+\t  if (count > program_max_one)\n+\t    program_max_one = count;\n+\t  program_sum += count;\n+\t}\n+      program_arcs += ptr->counter_sections[arc_data_index].n_counters;\n+    }\n   for (ptr = gcov_list; ptr; ptr = ptr->next)\n     {\n       struct gcov_summary object;\n@@ -119,8 +142,8 @@ gcov_exit (void)\n       gcov_type object_max_one = 0;\n       unsigned tag, length;\n       unsigned arc_data_index, f_sect_index, sect_index;\n+      long summary_pos = 0;\n \n-      ptr->wkspc = 0;\n       if (!ptr->filename)\n \tcontinue;\n \n@@ -148,8 +171,6 @@ gcov_exit (void)\n \t  if (count > object_max_one)\n \t    object_max_one = count;\n \t}\n-      if (object_max_one > program_max_one)\n-\tprogram_max_one = object_max_one;\n       \n       memset (&local_prg, 0, sizeof (local_prg));\n       memset (&object, 0, sizeof (object));\n@@ -248,9 +269,7 @@ gcov_exit (void)\n \t      \n \t      tag = gcov_read_unsigned ();\n \t      gcov_read_unsigned ();\n-\t      if (tag != GCOV_TAG_PROGRAM_SUMMARY\n-\t\t  && tag != GCOV_TAG_PLACEHOLDER_SUMMARY\n-\t\t  && tag != GCOV_TAG_INCORRECT_SUMMARY)\n+\t      if (tag != GCOV_TAG_PROGRAM_SUMMARY)\n \t\tgoto read_mismatch;\n \t      gcov_read_summary (&local_prg);\n \t      if ((error = gcov_is_error ()))\n@@ -263,29 +282,38 @@ gcov_exit (void)\n \t\t  goto read_fatal;\n \t\t}\n \t      \n-\t      if (local_prg.checksum != program.checksum)\n-\t\tcontinue;\n-\t      if (tag == GCOV_TAG_PLACEHOLDER_SUMMARY)\n+\t      if (local_prg.checksum != gcov_crc32)\n \t\t{\n-\t\t  fprintf (stderr,\n-\t\t\t   \"profiling:%s:Concurrent race detected\\n\",\n-\t\t\t   ptr->filename);\n-\t\t  goto read_fatal;\n+\t          memset (&local_prg, 0, sizeof (local_prg));\n+\t\t  continue;\n \t\t}\n \t      merging = 0;\n \t      if (tag != GCOV_TAG_PROGRAM_SUMMARY)\n \t\tbreak;\n \t      \n-\t      if (program.runs\n-\t\t  && memcmp (&program, &local_prg, sizeof (program)))\n+\t      /* If everything done correctly, the summaries should be\n+\t         computed equal for each module.  */\n+\t      if (last_prg.runs\n+#ifdef TARGET_HAS_F_SETLKW\n+\t\t  && last_prg.runs == local_prg.runs\n+#endif\n+\t\t  && memcmp (&last_prg, &local_prg, sizeof (last_prg)))\n \t\t{\n-\t\t  fprintf (stderr, \"profiling:%s:Invocation mismatch\\n\",\n+#ifdef TARGET_HAS_F_SETLKW\n+\t\t  fprintf (stderr, \"profiling:%s:Invocation mismatch\\n\\\n+Probably some files were removed\\n\",\n+\t\t\t   ptr->filename);\n+#else\n+\t\t  fprintf (stderr, \"profiling:%s:Invocation mismatch\\n\\\n+Probably some files were removed or parallel race happent because libgcc\\n\\\n+is compiled without file locking support.\\n\",\n \t\t\t   ptr->filename);\n+#endif\n \t\t  local_prg.runs = 0;\n \t\t}\n \t      else\n-\t\tmemcpy (&program, &local_prg, sizeof (program));\n-\t      ptr->wkspc = base;\n+\t\tmemcpy (&last_prg, &local_prg, sizeof (last_prg));\n+\t      summary_pos = base;\n \t      break;\n \t    }\n \t  gcov_seek (0, 0);\n@@ -335,8 +363,6 @@ gcov_exit (void)\n \t\t  if (tag == GCOV_TAG_ARC_COUNTS)\n \t\t    {\n \t\t      object.arc_sum += count;\n-\t\t      if (object.arc_max_sum < count)\n-\t\t\tobject.arc_max_sum = count;\n \t\t    }\n \t\t  gcov_write_counter (count);\n \t\t}\n@@ -347,61 +373,40 @@ gcov_exit (void)\n       /* Object file summary.  */\n       gcov_write_summary (GCOV_TAG_OBJECT_SUMMARY, &object);\n \n+      /* Generate whole program statistics.  */\n+      local_prg.runs++;\n+      local_prg.checksum = gcov_crc32;\n+      local_prg.arcs = program_arcs;\n+      local_prg.arc_sum += program_sum;\n+      if (local_prg.arc_max_one < program_max_one)\n+\tlocal_prg.arc_max_one = program_max_one;\n+      local_prg.arc_sum_max += program_max_one;\n+\n       if (merging)\n \t{\n-\t  ptr->wkspc = gcov_seek_end ();\n-\t  gcov_write_summary (GCOV_TAG_PLACEHOLDER_SUMMARY, &program);\n+  \t  gcov_seek_end ();\n+\t  gcov_write_summary (GCOV_TAG_PROGRAM_SUMMARY, &local_prg);\n \t}\n-      else if (ptr->wkspc)\n+      else if (summary_pos)\n \t{\n \t  /* Zap trailing program summary */\n-\t  gcov_seek (ptr->wkspc, 0);\n+\t  gcov_seek (summary_pos, 0);\n \t  if (!local_prg.runs)\n \t    ptr->wkspc = 0;\n-\t  gcov_write_unsigned (local_prg.runs\n-\t\t\t       ? GCOV_TAG_PLACEHOLDER_SUMMARY\n-\t\t\t       : GCOV_TAG_INCORRECT_SUMMARY);\n+\t  gcov_write_summary (GCOV_TAG_PROGRAM_SUMMARY, &local_prg);\n \t}\n       if (gcov_close ())\n \t{\n \t  fprintf (stderr, \"profiling:%s:Error writing\\n\", ptr->filename);\n \t  ptr->filename = 0;\n \t}\n-      else\n-\t{\n-\t  program_arcs += ptr->counter_sections[arc_data_index].n_counters;\n-\t  program_sum += object.arc_sum;\n-\t  if (program_max_sum < object.arc_max_sum)\n-\t    program_max_sum = object.arc_max_sum;\n-\t}\n-      free(counters);\n     }\n-\n-  /* Generate whole program statistics.  */\n-  program.runs++;\n-  program.arcs = program_arcs;\n-  program.arc_sum = program_sum;\n-  if (program.arc_max_one < program_max_one)\n-    program.arc_max_one = program_max_one;\n-  if (program.arc_max_sum < program_max_sum)\n-    program.arc_max_sum = program_max_sum;\n-  program.arc_sum_max += program_max_one;\n-  \n-  /* Upate whole program statistics.  */\n-  for (ptr = gcov_list; ptr; ptr = ptr->next)\n-    if (ptr->filename && ptr->wkspc)\n-      {\n-\tif (!gcov_open (ptr->filename, 1))\n-\t  {\n-\t    fprintf (stderr, \"profiling:%s:Cannot open\\n\", ptr->filename);\n-\t    continue;\n-\t  }\n-\t\n-\tgcov_seek (ptr->wkspc, 0);\n-\tgcov_write_summary (GCOV_TAG_PROGRAM_SUMMARY, &program);\n-\tif (gcov_close ())\n-\t  fprintf (stderr, \"profiling:%s:Error writing\\n\", ptr->filename);\n-      }\n+  /* All statistic we gather can be done in one pass trought the file.\n+     Originally we did two - one for counts and other for the statistics.  This\n+     brings problem with the file locking interface, but it is possible to\n+     implement so if need appears in the future - first pass updates local\n+     statistics and number of runs.  Second pass then overwrite global\n+     statistics only when number of runs match.  */\n }\n \n /* Add a new object file onto the bb chain.  Invoked automatically"}]}