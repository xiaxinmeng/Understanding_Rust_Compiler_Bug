{"sha": "eae957a8b8701537efa1af34a619971e5f81827e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFlOTU3YThiODcwMTUzN2VmYTFhZjM0YTYxOTk3MWU1ZjgxODI3ZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-12-26T23:11:20Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-12-26T23:11:20Z"}, "message": "(gen_lowpart_for_combine): Allow MODE to be wider than a word in\nrestricted circumstances.\n\nFrom-SVN: r2914", "tree": {"sha": "f31daf97cc7a7e3981def1d3b2f67d4fd910f5bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f31daf97cc7a7e3981def1d3b2f67d4fd910f5bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eae957a8b8701537efa1af34a619971e5f81827e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eae957a8b8701537efa1af34a619971e5f81827e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eae957a8b8701537efa1af34a619971e5f81827e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eae957a8b8701537efa1af34a619971e5f81827e/comments", "author": null, "committer": null, "parents": [{"sha": "bc957254f84a395d45e2fe9734defd0812bedd6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc957254f84a395d45e2fe9734defd0812bedd6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc957254f84a395d45e2fe9734defd0812bedd6a"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "360c81e5daf8620d3375769ef728c4df189fe6b3", "filename": "gcc/combine.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae957a8b8701537efa1af34a619971e5f81827e/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae957a8b8701537efa1af34a619971e5f81827e/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=eae957a8b8701537efa1af34a619971e5f81827e", "patch": "@@ -7416,7 +7416,14 @@ gen_lowpart_for_combine (mode, x)\n   if (GET_MODE (x) == mode)\n     return x;\n \n-  if (GET_MODE_SIZE (mode) > UNITS_PER_WORD)\n+  /* We can only support MODE being wider than a word if X is a\n+     constant integer or has a mode the same size.  */\n+\n+  if (GET_MODE_SIZE (mode) > UNITS_PER_WORD\n+      && ! ((GET_MODE (x) == VOIDmode\n+\t     && (GET_CODE (x) == CONST_INT\n+\t\t || GET_CODE (x) == CONST_DOUBLE))\n+\t    || GET_MODE_SIZE (GET_MODE (x)) == GET_MODE_SIZE (mode)))\n     return gen_rtx (CLOBBER, GET_MODE (x), const0_rtx);\n \n   /* X might be a paradoxical (subreg (mem)).  In that case, gen_lowpart"}]}