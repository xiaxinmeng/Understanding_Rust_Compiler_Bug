{"sha": "b648814c02eb418aaf27897c480452172ee96303", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY0ODgxNGMwMmViNDE4YWFmMjc4OTdjNDgwNDUyMTcyZWU5NjMwMw==", "commit": {"author": {"name": "Przemyslaw Wirkus", "email": "przemyslaw.wirkus@arm.com", "date": "2020-08-28T10:31:04Z"}, "committer": {"name": "Przemyslaw Wirkus", "email": "przemyslaw.wirkus@arm.com", "date": "2020-08-28T10:34:03Z"}, "message": "[PATCH PR96357][GCC][AArch64]: could not split insn UNSPEC_COND_FSUB with AArch64 SVE\n\nProblem is related to that operand 4 (In original pattern\ncond_sub<mode>_any_const) is no longer the same as operand 1, and so\nthe pattern doesn't match the split condition.\n\nPattern cond_sub<mode>_any_const is being split by this patch into two\nseparate patterns:\n* Pattern cond_sub<mode>_relaxed_const now matches const_int\n  SVE_RELAXED_GP operand.\n* Pattern cond_sub<mode>_strict_const now matches const_int\n  SVE_STRICT_GP operand.\n* Remove aarch64_sve_pred_dominates_p condition from both patterns.\n\ngcc/ChangeLog:\n\n\tPR target/96357\n\t* config/aarch64/aarch64-sve.md\n\t(cond_sub<mode>_relaxed_const): Updated and renamed from\n\tcond_sub<mode>_any_const pattern.\n\t(cond_sub<mode>_strict_const): New pattern.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/96357\n\t* gcc.target/aarch64/sve/pr96357.c: New test.", "tree": {"sha": "2609928e5512d866d11da73221bf3aa52df853d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2609928e5512d866d11da73221bf3aa52df853d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b648814c02eb418aaf27897c480452172ee96303", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b648814c02eb418aaf27897c480452172ee96303", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b648814c02eb418aaf27897c480452172ee96303", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b648814c02eb418aaf27897c480452172ee96303/comments", "author": {"login": "PrzemekWirkus", "id": 6360720, "node_id": "MDQ6VXNlcjYzNjA3MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PrzemekWirkus", "html_url": "https://github.com/PrzemekWirkus", "followers_url": "https://api.github.com/users/PrzemekWirkus/followers", "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}", "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}", "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions", "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs", "repos_url": "https://api.github.com/users/PrzemekWirkus/repos", "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}", "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "PrzemekWirkus", "id": 6360720, "node_id": "MDQ6VXNlcjYzNjA3MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PrzemekWirkus", "html_url": "https://github.com/PrzemekWirkus", "followers_url": "https://api.github.com/users/PrzemekWirkus/followers", "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}", "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}", "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions", "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs", "repos_url": "https://api.github.com/users/PrzemekWirkus/repos", "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}", "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b062fc43e1b564e2e18b5c89aa7b5463fcba735", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b062fc43e1b564e2e18b5c89aa7b5463fcba735", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b062fc43e1b564e2e18b5c89aa7b5463fcba735"}], "stats": {"total": 67, "additions": 62, "deletions": 5}, "files": [{"sha": "cd79aba90ec9cdb5da9e9758495015ef36b2d869", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b648814c02eb418aaf27897c480452172ee96303/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b648814c02eb418aaf27897c480452172ee96303/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=b648814c02eb418aaf27897c480452172ee96303", "patch": "@@ -5234,21 +5234,22 @@\n \n ;; Predicated floating-point subtraction from a constant, merging with an\n ;; independent value.\n-(define_insn_and_rewrite \"*cond_sub<mode>_any_const\"\n+;;\n+;; The subtraction predicate and the merge predicate are allowed to be\n+;; different.\n+(define_insn_and_rewrite \"*cond_sub<mode>_relaxed_const\"\n   [(set (match_operand:SVE_FULL_F 0 \"register_operand\" \"=w, w, ?w\")\n \t(unspec:SVE_FULL_F\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n \t   (unspec:SVE_FULL_F\n \t     [(match_operand 5)\n-\t      (match_operand:SI 6 \"aarch64_sve_gp_strictness\")\n+\t      (const_int SVE_RELAXED_GP)\n \t      (match_operand:SVE_FULL_F 2 \"aarch64_sve_float_arith_immediate\")\n \t      (match_operand:SVE_FULL_F 3 \"register_operand\" \"w, w, w\")]\n \t     UNSPEC_COND_FSUB)\n \t   (match_operand:SVE_FULL_F 4 \"aarch64_simd_reg_or_zero\" \"Dz, 0, w\")]\n \t  UNSPEC_SEL))]\n-  \"TARGET_SVE\n-   && !rtx_equal_p (operands[3], operands[4])\n-   && aarch64_sve_pred_dominates_p (&operands[5], operands[1])\"\n+  \"TARGET_SVE && !rtx_equal_p (operands[3], operands[4])\"\n   \"@\n    movprfx\\t%0.<Vetype>, %1/z, %3.<Vetype>\\;fsubr\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%2\n    movprfx\\t%0.<Vetype>, %1/m, %3.<Vetype>\\;fsubr\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%2\n@@ -5271,6 +5272,37 @@\n   [(set_attr \"movprfx\" \"yes\")]\n )\n \n+;; Predicated floating-point subtraction from a constant, merging with an\n+;; independent value.\n+;;\n+;; The subtraction predicate and the merge predicate must be the same.\n+(define_insn_and_rewrite \"*cond_sub<mode>_strict_const\"\n+  [(set (match_operand:SVE_FULL_F 0 \"register_operand\" \"=w, w, ?w\")\n+\t(unspec:SVE_FULL_F\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n+\t   (unspec:SVE_FULL_F\n+\t     [(match_dup 1)\n+\t      (const_int SVE_STRICT_GP)\n+\t      (match_operand:SVE_FULL_F 2 \"aarch64_sve_float_arith_immediate\")\n+\t      (match_operand:SVE_FULL_F 3 \"register_operand\" \"w, w, w\")]\n+\t     UNSPEC_COND_FSUB)\n+\t   (match_operand:SVE_FULL_F 4 \"aarch64_simd_reg_or_zero\" \"Dz, 0, w\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE && !rtx_equal_p (operands[3], operands[4])\"\n+  \"@\n+   movprfx\\t%0.<Vetype>, %1/z, %3.<Vetype>\\;fsubr\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%2\n+   movprfx\\t%0.<Vetype>, %1/m, %3.<Vetype>\\;fsubr\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%2\n+   #\"\n+  \"&& reload_completed\n+   && register_operand (operands[4], <MODE>mode)\n+   && !rtx_equal_p (operands[0], operands[4])\"\n+  {\n+    emit_insn (gen_vcond_mask_<mode><vpred> (operands[0], operands[3],\n+                                             operands[4], operands[1]));\n+    operands[4] = operands[3] = operands[0];\n+  }\n+  [(set_attr \"movprfx\" \"yes\")]\n+)\n ;; Register merging forms are handled through SVE_COND_FP_BINARY.\n \n ;; -------------------------------------------------------------------------"}, {"sha": "e52867f57291d4a5d9a7d7c0d64e92efc8b28cfe", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr96357.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b648814c02eb418aaf27897c480452172ee96303/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr96357.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b648814c02eb418aaf27897c480452172ee96303/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr96357.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr96357.c?ref=b648814c02eb418aaf27897c480452172ee96303", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=armv8.2-a+sve\" } */\n+\n+int d;\n+\n+void\n+f1(char f, char *g, char *h, char *l, char *n) {\n+  double i = d, j = 1.0 - f, k = j ? d : j;\n+  if (k == 1.0)\n+    i = 0.0;\n+  *l = *n = *g = *h = i * 0.5;\n+}\n+\n+void\n+f2() {\n+  int a, m, c;\n+  for (c = 2048; c; c--) {\n+    char b = a++;\n+    f1(b, m, m + 1, m + 2, m + 3); /*{ dg-warning {passing argument [0-9]+ of 'f1' makes pointer from integer without a cast} } */\n+    m += 4;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler {\\tmovprfx\\tz[0-9]+, z[0-9]+} } } */\n+/* { dg-final { scan-assembler {\\tfsubr\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1.0} } } */"}]}