{"sha": "186aa6304570e15065f31482e9c27326a3a6679f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg2YWE2MzA0NTcwZTE1MDY1ZjMxNDgyZTljMjczMjZhM2E2Njc5Zg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-24T15:18:31Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-24T15:18:31Z"}, "message": "libstdc++: Fix std::indirectly_readable ambiguity [LWG 3446]\n\nThis implements the proposed resolution of LWG 3446. I'm also adding\nanother new constrained specialization which isn't proposed by 3446, to\nresolve the ambiguity when a type has both value_type and element_type\nbut denoting different types.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/iterator_concepts.h (indirectly_readable): Add\n\tpartial specializations to resolve ambiguities (LWG 3446).\n\t* testsuite/24_iterators/associated_types/readable.traits.cc:\n\tCheck types with both value_type and element_type.", "tree": {"sha": "9726032613a819a32cec62c008965ac022ff64da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9726032613a819a32cec62c008965ac022ff64da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/186aa6304570e15065f31482e9c27326a3a6679f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/186aa6304570e15065f31482e9c27326a3a6679f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/186aa6304570e15065f31482e9c27326a3a6679f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/186aa6304570e15065f31482e9c27326a3a6679f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0e6f05d26d286f5a73007e425b109f0d327e15f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e6f05d26d286f5a73007e425b109f0d327e15f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0e6f05d26d286f5a73007e425b109f0d327e15f"}], "stats": {"total": 56, "additions": 54, "deletions": 2}, "files": [{"sha": "a568f2ab825f5f9ed87126ff92afe760572a6c91", "filename": "libstdc++-v3/include/bits/iterator_concepts.h", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/186aa6304570e15065f31482e9c27326a3a6679f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/186aa6304570e15065f31482e9c27326a3a6679f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h?ref=186aa6304570e15065f31482e9c27326a3a6679f", "patch": "@@ -220,6 +220,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _Tp> requires is_object_v<_Tp>\n       struct __cond_value_type<_Tp>\n       { using value_type = remove_cv_t<_Tp>; };\n+\n+    template<typename _Tp>\n+      concept __has_member_value_type\n+\t= requires { typename _Tp::value_type; };\n+\n+    template<typename _Tp>\n+      concept __has_member_element_type\n+\t= requires { typename _Tp::element_type; };\n+\n   } // namespace __detail\n \n   template<typename> struct indirectly_readable_traits { };\n@@ -238,16 +247,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : indirectly_readable_traits<_Iter>\n     { };\n \n-  template<typename _Tp> requires requires { typename _Tp::value_type; }\n+  template<__detail::__has_member_value_type _Tp>\n     struct indirectly_readable_traits<_Tp>\n     : __detail::__cond_value_type<typename _Tp::value_type>\n     { };\n \n-  template<typename _Tp> requires requires { typename _Tp::element_type; }\n+  template<__detail::__has_member_element_type _Tp>\n     struct indirectly_readable_traits<_Tp>\n     : __detail::__cond_value_type<typename _Tp::element_type>\n     { };\n \n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 3446. indirectly_readable_traits ambiguity for types with both [...]\n+  template<__detail::__has_member_value_type _Tp>\n+    requires __detail::__has_member_element_type<_Tp>\n+    && same_as<remove_cv_t<typename _Tp::element_type>,\n+\t       remove_cv_t<typename _Tp::value_type>>\n+    struct indirectly_readable_traits<_Tp>\n+    : __detail::__cond_value_type<typename _Tp::value_type>\n+    { };\n+\n+  // LWG 3446 doesn't add this, but it's needed for the case where\n+  // value_type and element_type are both present, but not the same type.\n+  template<__detail::__has_member_value_type _Tp>\n+    requires __detail::__has_member_element_type<_Tp>\n+    struct indirectly_readable_traits<_Tp>\n+    { };\n+\n   namespace __detail\n   {\n     template<typename _Tp>"}, {"sha": "3c9c392715328341595cb6adffc671281905f8af", "filename": "libstdc++-v3/testsuite/24_iterators/associated_types/readable.traits.cc", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/186aa6304570e15065f31482e9c27326a3a6679f/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fassociated_types%2Freadable.traits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/186aa6304570e15065f31482e9c27326a3a6679f/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fassociated_types%2Freadable.traits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fassociated_types%2Freadable.traits.cc?ref=186aa6304570e15065f31482e9c27326a3a6679f", "patch": "@@ -141,3 +141,29 @@ struct J\n // iterator_traits<J> matches constrained specialization in the library,\n // so use its value_type.\n static_assert( check_alias<J, int> );\n+\n+struct I2\n+{\n+  using element_type = int;\n+};\n+// iterator_traits<I2> is not specialized, and no standard specialization\n+// matches, so use indirectly_readable_traits.\n+static_assert( check_alias<I2, std::indirectly_readable_traits<I2>::value_type> );\n+\n+// LWG 3446\n+struct I3\n+{\n+  using value_type = long;\n+  using element_type = const long;\n+};\n+// iterator_traits<I3> is not specialized, and no standard specialization\n+// matches, so use indirectly_readable_traits.\n+static_assert( check_alias<I3, std::indirectly_readable_traits<I3>::value_type> );\n+\n+// Correction to LWG 3446\n+struct I4\n+{\n+  using value_type = int;\n+  using element_type = long;\n+};\n+static_assert( ! has_alias<I4> );"}]}