{"sha": "b509e1fcea9c6ba2dcaaee5159e19f65b407f031", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUwOWUxZmNlYTljNmJhMmRjYWFlZTUxNTllMTlmNjViNDA3ZjAzMQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2010-03-11T13:51:00Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2010-03-11T13:51:00Z"}, "message": "re PR tree-optimization/43280 (gcc4.5 -m32 -O2: misoptimizes sha256!)\n\n2010-03-11  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\tPR tree-optimization/43280\n\t* tree-ssa-math-opts.c (find_bswap_1): Modify symbolic number generation.\n\tMove calculation of size out of the if branch.\n\t(find_bswap): Modify compare number generation.\n\n2010-03-11  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* gcc.dg/optimize-bswapdi-1.c: Add OpenSSL bswap variant.\n\t* gcc.dg/pr43280.c: New testcase.\n\nFrom-SVN: r157386", "tree": {"sha": "c84727d77a7e581856cf026478be48395776d00b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c84727d77a7e581856cf026478be48395776d00b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b509e1fcea9c6ba2dcaaee5159e19f65b407f031", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b509e1fcea9c6ba2dcaaee5159e19f65b407f031", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b509e1fcea9c6ba2dcaaee5159e19f65b407f031", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b509e1fcea9c6ba2dcaaee5159e19f65b407f031/comments", "author": null, "committer": null, "parents": [{"sha": "108ba00bcf8c2e98a1c097687b52f66f7e772306", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/108ba00bcf8c2e98a1c097687b52f66f7e772306", "html_url": "https://github.com/Rust-GCC/gccrs/commit/108ba00bcf8c2e98a1c097687b52f66f7e772306"}], "stats": {"total": 78, "additions": 68, "deletions": 10}, "files": [{"sha": "5e07486aa72c4c1b3fad10a3501041c735b6701c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b509e1fcea9c6ba2dcaaee5159e19f65b407f031/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b509e1fcea9c6ba2dcaaee5159e19f65b407f031/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b509e1fcea9c6ba2dcaaee5159e19f65b407f031", "patch": "@@ -1,3 +1,10 @@\n+2010-03-11  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\tPR tree-optimization/43280\n+\t* tree-ssa-math-opts.c (find_bswap_1): Modify symbolic number generation.\n+\tMove calculation of size out of the if branch.\n+\t(find_bswap): Modify compare number generation.\n+\n 2010-03-11  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/43200"}, {"sha": "fc9f8e6494628a5fe5891d518ec3a34c24777cf2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b509e1fcea9c6ba2dcaaee5159e19f65b407f031/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b509e1fcea9c6ba2dcaaee5159e19f65b407f031/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b509e1fcea9c6ba2dcaaee5159e19f65b407f031", "patch": "@@ -1,3 +1,8 @@\n+2010-03-11  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* gcc.dg/optimize-bswapdi-1.c: Add OpenSSL bswap variant.\n+\t* gcc.dg/pr43280.c: New testcase.\n+\n 2010-03-11  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/43200"}, {"sha": "7d557f369c37f19a6c6a1954c2aeebb43659a4fe", "filename": "gcc/testsuite/gcc.dg/optimize-bswapdi-1.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b509e1fcea9c6ba2dcaaee5159e19f65b407f031/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapdi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b509e1fcea9c6ba2dcaaee5159e19f65b407f031/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapdi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foptimize-bswapdi-1.c?ref=b509e1fcea9c6ba2dcaaee5159e19f65b407f031", "patch": "@@ -43,6 +43,19 @@ swap64_b (DItype u)\n \t  | (((u) & 0x00000000000000ffull) << 56));\n }\n \n+/* The OpenSSL variant.  */\n \n-/* { dg-final { scan-tree-dump-times \"64 bit bswap implementation found at\" 2 \"bswap\" } } */\n+uint64_t\n+swap64_c (uint64_t x)\n+{\n+  uint32_t a = x >> 32;\n+  uint32_t b = (uint32_t) x;\n+  return ((uint64_t) ((((((b)) >> (8)) | (((b)) << (32 - (8)))) & 0xff00ff00L)\n+\t\t      | (((((b)) << (8)) | (((b)) >> (32 - (8)))) & 0x00ff00ffL)) << 32)\n+          | (uint64_t) ((((((a)) >> (8)) | (((a)) << (32 - (8)))) & 0xff00ff00L)\n+\t\t\t| (((((a)) << (8)) | (((a)) >> (32 - (8)))) & 0x00ff00ffL));\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-times \"64 bit bswap implementation found at\" 3 \"bswap\" } } */\n /* { dg-final { cleanup-tree-dump \"bswap\" } } */"}, {"sha": "dfb369b5de1839b9eea99160afd53e542f7ed2aa", "filename": "gcc/testsuite/gcc.dg/pr43280.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b509e1fcea9c6ba2dcaaee5159e19f65b407f031/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43280.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b509e1fcea9c6ba2dcaaee5159e19f65b407f031/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43280.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43280.c?ref=b509e1fcea9c6ba2dcaaee5159e19f65b407f031", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target stdint_types } */\n+/* { dg-options \"-O2\" } */\n+\n+#include <stdint.h>\n+\n+extern void abort (void);\n+\n+uint64_t __attribute__((noinline))\n+byteswap64(uint64_t x)\n+{\n+  uint32_t a = x >> 32;\n+  uint32_t b = (uint32_t) x;\n+  return ((uint64_t) ((((((b)) >> (8)) | (((b)) << (32 - (8)))) & 0xff00ff00L)\n+\t\t      | (((((b)) << (8)) | (((b)) >> (32 - (8)))) & 0x00ff00ffL)) << 32)\n+          | (uint64_t) ((((((a)) >> (8)) | (((a)) << (32 - (8)))) & 0xff00ff00L)\n+\t\t\t| (((((a)) << (8)) | (((a)) >> (32 - (8)))) & 0x00ff00ffL));\n+}\n+\n+int\n+main ()\n+{\n+  uint64_t in = (uint64_t)0x01020304 << 32 | 0x05060708;\n+  uint64_t cmp = (uint64_t)0x08070605 << 32 | 0x04030201;\n+\n+  if (cmp != byteswap64 (in))\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "d38df8d3d00af31e8a3e24ea021405a4d7d13e03", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b509e1fcea9c6ba2dcaaee5159e19f65b407f031/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b509e1fcea9c6ba2dcaaee5159e19f65b407f031/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=b509e1fcea9c6ba2dcaaee5159e19f65b407f031", "patch": "@@ -940,15 +940,18 @@ find_bswap_1 (gimple stmt, struct symbolic_number *n, int limit)\n \t{\n \t  /* Set up the symbolic number N by setting each byte to a\n \t     value between 1 and the byte size of rhs1.  The highest\n-\t     order byte is set to 1 and the lowest order byte to\n-\t     n.size.  */\n+\t     order byte is set to n->size and the lowest order\n+\t     byte to 1.  */\n \t  n->size = TYPE_PRECISION (TREE_TYPE (rhs1));\n \t  if (n->size % BITS_PER_UNIT != 0)\n \t    return NULL_TREE;\n \t  n->size /= BITS_PER_UNIT;\n \t  n->n = (sizeof (HOST_WIDEST_INT) < 8 ? 0 :\n-\t\t  (unsigned HOST_WIDEST_INT)0x01020304 << 32 | 0x05060708);\n-\t  n->n >>= (sizeof (HOST_WIDEST_INT) - n->size) * BITS_PER_UNIT;\n+\t\t  (unsigned HOST_WIDEST_INT)0x08070605 << 32 | 0x04030201);\n+\n+\t  if (n->size < (int)sizeof (HOST_WIDEST_INT))\n+\t    n->n &= ((unsigned HOST_WIDEST_INT)1 <<\n+\t\t     (n->size * BITS_PER_UNIT)) - 1;\n \n \t  source_expr1 = rhs1;\n \t}\n@@ -988,9 +991,9 @@ find_bswap_1 (gimple stmt, struct symbolic_number *n, int limit)\n \t      {\n \t\t/* If STMT casts to a smaller type mask out the bits not\n \t\t   belonging to the target type.  */\n-\t\tn->size = type_size / BITS_PER_UNIT;\n \t\tn->n &= ((unsigned HOST_WIDEST_INT)1 << type_size) - 1;\n \t      }\n+\t    n->size = type_size / BITS_PER_UNIT;\n \t  }\n \t  break;\n \tdefault:\n@@ -1051,11 +1054,11 @@ static tree\n find_bswap (gimple stmt)\n {\n /* The number which the find_bswap result should match in order to\n-   have a full byte swap.  The insignificant bytes are masked out\n-   before using it.  */\n+   have a full byte swap.  The number is shifted to the left according\n+   to the size of the symbolic number before using it.  */\n   unsigned HOST_WIDEST_INT cmp =\n     sizeof (HOST_WIDEST_INT) < 8 ? 0 :\n-    (unsigned HOST_WIDEST_INT)0x08070605 << 32 | 0x04030201;\n+    (unsigned HOST_WIDEST_INT)0x01020304 << 32 | 0x05060708;\n \n   struct symbolic_number n;\n   tree source_expr;\n@@ -1079,7 +1082,7 @@ find_bswap (gimple stmt)\n \t((unsigned HOST_WIDEST_INT)1 << (n.size * BITS_PER_UNIT)) - 1;\n \n       n.n &= mask;\n-      cmp &= mask;\n+      cmp >>= (sizeof (HOST_WIDEST_INT) - n.size) * BITS_PER_UNIT;\n     }\n \n   /* A complete byte swap should make the symbolic number to start"}]}