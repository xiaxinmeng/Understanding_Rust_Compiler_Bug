{"sha": "18543a22081f3f08a82e6402837daed19b66f0a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg1NDNhMjIwODFmM2YwOGE4MmU2NDAyODM3ZGFlZDE5YjY2ZjBhNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@cygnus.com", "date": "1997-12-19T16:43:29Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-12-19T16:43:29Z"}, "message": "expr.c (do_tablejump): Let CASE_VECTOR_PC_RELATIVE be an expression.\n\n        * expr.c (do_tablejump): Let CASE_VECTOR_PC_RELATIVE be an\n        expression.\n        * stmt.c (expand_end_case): Likewise.\n        * alpha.h (CASE_VECTOR_PC_RELATIVE): Update.\n        * fx80.h, gmicro.h, m68k.h, m88k.h, ns32k.h: Likewise.\n        * rs6000.h, sh.h, tahoe.h, v850.h vax.h z8k.h: Likewise.\n\nFrom-SVN: r17155", "tree": {"sha": "406e28da63e660364ba69da2395d4cb1eba4121d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/406e28da63e660364ba69da2395d4cb1eba4121d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18543a22081f3f08a82e6402837daed19b66f0a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18543a22081f3f08a82e6402837daed19b66f0a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18543a22081f3f08a82e6402837daed19b66f0a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18543a22081f3f08a82e6402837daed19b66f0a7/comments", "author": null, "committer": null, "parents": [{"sha": "f1f5f1422f651133e28d479feb0223e92251cabe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1f5f1422f651133e28d479feb0223e92251cabe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1f5f1422f651133e28d479feb0223e92251cabe"}], "stats": {"total": 544, "additions": 250, "deletions": 294}, "files": [{"sha": "505d84b341338e78bc78cc0319e13c7c611850b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -1,3 +1,12 @@\n+Fri Dec 19 17:31:11 1997  Ian Lance Taylor  <ian@cygnus.com>\n+\n+\t* expr.c (do_tablejump): Let CASE_VECTOR_PC_RELATIVE be an\n+\texpression.\n+\t* stmt.c (expand_end_case): Likewise.\n+\t* alpha.h (CASE_VECTOR_PC_RELATIVE): Update.\n+\t* fx80.h, gmicro.h, m68k.h, m88k.h, ns32k.h: Likewise.\n+\t* rs6000.h, sh.h, tahoe.h, v850.h vax.h z8k.h: Likewise.\n+\n Tue Dec 16 15:14:09 1997  Andreas Schwab  <schwab@issan.informatik.uni-dortmund.de>\n \n \t* objc/Make-lang.in: Create runtime-info.h and libobjc_entry.o in"}, {"sha": "1ed9072fe95e0ba5de4c02f07094d139aabeaf4c", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -835,10 +835,11 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE QImode\n \n-/* Define this if the tablejump instruction expects the table\n-   to contain offsets from the address of the table.\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n    Do not define this if the table should contain absolute addresses. */\n-/* #define CASE_VECTOR_PC_RELATIVE */\n+/* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n #define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR"}, {"sha": "71c270068beffb4624352e3af1b92b737ce29f54", "filename": "gcc/config/a29k/a29k.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fa29k%2Fa29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fa29k%2Fa29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -1207,10 +1207,11 @@ extern char *a29k_function_name;\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE SImode\n \n-/* Define this if the tablejump instruction expects the table\n-   to contain offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.  */\n-/* #define CASE_VECTOR_PC_RELATIVE */\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n+/* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n #define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR"}, {"sha": "f553f33f33650ffea6adf90fee5c7c710b1a0e1b", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -1502,13 +1502,14 @@ extern void alpha_init_expanders ();\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE SImode\n \n-/* Define this if the tablejump instruction expects the table\n-   to contain offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n    On the Alpha, the table is really GP-relative, not relative to the PC\n    of the table, but we pretend that it is PC-relative; this should be OK,\n    but we should try to find some better way sometime.  */\n-#define CASE_VECTOR_PC_RELATIVE\n+#define CASE_VECTOR_PC_RELATIVE 1\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n #define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR"}, {"sha": "181d45ea6459e3078849d2faf45b3704dd41c24e", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -1539,13 +1539,14 @@ do { if ((LOG) != 0) fprintf (FILE, \"\\t.align %d\\n\", 1 << (LOG)); } while (0)\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE Pmode\n \n-/* Define this if the tablejump instruction expects the table\n-   to contain offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.  */\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n /* It's not clear what PIC will look like or whether we want to use -fpic\n    for the embedded form currently being talked about.  For now require -fpic\n    to get pc relative switch tables.  */\n-/*#define CASE_VECTOR_PC_RELATIVE*/\n+/*#define CASE_VECTOR_PC_RELATIVE 1 */\n \n /* Define if operations between registers always perform the operation\n    on the full register even if a narrower mode is specified.  */"}, {"sha": "59d3ac3c75d352482dc493a79c54670e44612d4c", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 53, "deletions": 41, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -86,7 +86,7 @@ extern int frame_pointer_needed;\n #if TARGET_CPU_DEFAULT == TARGET_CPU_arm2\n #define CPP_ARCH_DEFAULT_SPEC \"-D__ARM_ARCH_2__\"\n #else\n-#if TARGET_CPU_DEFAULT == TARGET_CPU_arm6 || TARGET_CPU_DEFUALT == TARGET_CPU_arm610 || TARGET_CPU_DEFAULT == TARGET_CPU_arm7500fe\n+#if TARGET_CPU_DEFAULT == TARGET_CPU_arm6 || TARGET_CPU_DEFAULT == TARGET_CPU_arm610 || TARGET_CPU_DEFAULT == TARGET_CPU_arm7500fe\n #define CPP_ARCH_DEFAULT_SPEC \"-D__ARM_ARCH_3__\"\n #else\n #if TARGET_CPU_DEFAULT == TARGET_CPU_arm7m\n@@ -346,7 +346,7 @@ extern char *target_fp_name;\n   {\"apcs-float\",\t\tARM_FLAG_APCS_FLOAT},\t\\\n   {\"no-apcs-float\",\t       -ARM_FLAG_APCS_FLOAT},\t\\\n   {\"apcs-reentrant\",\t\tARM_FLAG_APCS_REENT},\t\\\n-  {\"no-apcs-rentrant\",\t       -ARM_FLAG_APCS_REENT},\t\\\n+  {\"no-apcs-reentrant\",\t       -ARM_FLAG_APCS_REENT},\t\\\n   {\"short-load-bytes\",\t\tARM_FLAG_SHORT_BYTE},\t\\\n   {\"no-short-load-bytes\",      -ARM_FLAG_SHORT_BYTE},\t\\\n   {\"short-load-words\",\t       -ARM_FLAG_SHORT_BYTE},\t\\\n@@ -437,7 +437,7 @@ extern enum floating_point_type arm_fpu;\n /* What type of floating point instructions are available */\n extern enum floating_point_type arm_fpu_arch;\n \n-/* Default floating point archtitecture.  Override in sub-target if\n+/* Default floating point architecture.  Override in sub-target if\n    necessary.  */\n #define FP_DEFAULT FP_SOFT2\n \n@@ -483,6 +483,11 @@ extern int arm_arch4;\n       (MODE) = SImode;\t\t\t\t\\\n     }\n \n+/* Define this macro if the promotion described by `PROMOTE_MODE'\n+   should also be done for outgoing function arguments.  */\n+/* This is required to ensure that push insns always push a word.  */\n+#define PROMOTE_FUNCTION_ARGS\n+\n /* Define for XFmode extended real floating point support.\n    This will automatically cause REAL_ARITHMETIC to be defined.  */\n /* For the ARM:\n@@ -905,7 +910,13 @@ enum reg_class\n \n /* If we generate an insn to push BYTES bytes,\n    this says how many the stack pointer really advances by.  */\n-#define PUSH_ROUNDING(NPUSHED)  (((NPUSHED) + 3) & ~3)\n+/* The push insns do not do this rounding implicitly.  So don't define this. */\n+/* #define PUSH_ROUNDING(NPUSHED)  (((NPUSHED) + 3) & ~3) */\n+\n+/* Define this if the maximum size of all the outgoing args is to be\n+   accumulated and pushed during the prologue.  The amount can be\n+   found in the variable current_function_outgoing_args_size.  */\n+#define ACCUMULATE_OUTGOING_ARGS\n \n /* Offset of first parameter from the argument pointer register value.  */\n #define FIRST_PARM_OFFSET(FNDECL)  4\n@@ -1102,8 +1113,10 @@ enum reg_class\n   int volatile_func = arm_volatile_func ();\t\t\t\t\\\n   if ((FROM) == ARG_POINTER_REGNUM && (TO) == HARD_FRAME_POINTER_REGNUM)\\\n     (OFFSET) = 0;\t\t\t\t\t\t\t\\\n-  else if ((FROM) == FRAME_POINTER_REGNUM && (TO) == STACK_POINTER_REGNUM)\\\n-    (OFFSET) = (get_frame_size () + 3 & ~3);\t\t\t\t\\\n+  else if ((FROM) == FRAME_POINTER_REGNUM\t\t\t\t\\\n+\t   && (TO) == STACK_POINTER_REGNUM)\t\t\t\t\\\n+    (OFFSET) = (current_function_outgoing_args_size\t\t\t\\\n+\t\t+ (get_frame_size () + 3 & ~3));\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       int regno;\t\t\t\t\t\t\t\\\n@@ -1125,8 +1138,10 @@ enum reg_class\n \t{\t\t\t\t\t\t\t\t\\\n \t   if (! frame_pointer_needed)\t\t\t\t\t\\\n \t     offset -= 16;\t\t\t\t\t\t\\\n-\t   if (! volatile_func && (regs_ever_live[14] || saved_hard_reg)) \\\n+\t   if (! volatile_func\t\t\t\t\t\t\\\n+\t       && (regs_ever_live[14] || saved_hard_reg)) \t\t\\\n \t     offset += 4;\t\t\t\t\t\t\\\n+\t   offset += current_function_outgoing_args_size;\t\t\\\n \t   (OFFSET) = (get_frame_size () + 3 & ~3) + offset;\t\t\\\n          }\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n@@ -1390,14 +1405,15 @@ do\t\t\t\t\t\t\t\t\t\\\n       else if (BASE_REGISTER_RTX_P (xop1))\t\t\t\t\\\n \tGO_IF_LEGITIMATE_INDEX (MODE, REGNO (xop1), xop0, LABEL);\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n-  else if (GET_CODE (X) == MINUS)\t\t\t\t\t\\\n+  /* Reload currently can't handle MINUS, so disable this for now */\t\\\n+  /* else if (GET_CODE (X) == MINUS)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rtx xop0 = XEXP (X,0);\t\t\t\t\t\t\\\n       rtx xop1 = XEXP (X,1);\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       if (BASE_REGISTER_RTX_P (xop0))\t\t\t\t\t\\\n \tGO_IF_LEGITIMATE_INDEX (MODE, -1, xop1, LABEL);\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+    } */\t\t\t\t\t\t\t\t\\\n   else if (GET_MODE_CLASS (MODE) != MODE_FLOAT\t\t\t\t\\\n \t   && GET_CODE (X) == SYMBOL_REF\t\t\t\t\\\n \t   && CONSTANT_POOL_ADDRESS_P (X))\t\t\t\t\\\n@@ -1500,10 +1516,11 @@ extern struct rtx_def *legitimize_pic_address ();\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE SImode\n \n-/* Define this if the tablejump instruction expects the table\n-   to contain offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.  */\n-/* #define CASE_VECTOR_PC_RELATIVE */\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n+/* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n #define IMPLICIT_FIX_EXPR  FIX_ROUND_EXPR\n@@ -1742,27 +1759,23 @@ extern int arm_compare_fp;\n   goto JUMPTO\n \n /* Output an internal label definition.  */\n-#define ASM_OUTPUT_INTERNAL_LABEL(STREAM, PREFIX, NUM)  \\\n-  do                                    \t      \t   \t\t\\\n-    {\t\t\t\t\t\t      \t   \t\t\\\n-      char *s = (char *) alloca (40 + strlen (PREFIX));\t   \t\t\\\n-      extern int arm_target_label, arm_ccfsm_state;\t   \t\t\\\n-      extern rtx arm_target_insn;\t\t\t\t\t\\\n-\t\t\t\t\t\t           \t\t\\\n-      if (arm_ccfsm_state == 3 && arm_target_label == (NUM)   \t\t\\\n-\t&& !strcmp (PREFIX, \"L\"))\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  arm_ccfsm_state = 0;\t\t\t\t        \t\\\n-\t  arm_target_insn = NULL;\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-\tASM_GENERATE_INTERNAL_LABEL (s, (PREFIX), (NUM));   \t\t\\\n-\tarm_asm_output_label (STREAM, s);\t\t                \\\n+#define ASM_OUTPUT_INTERNAL_LABEL(STREAM, PREFIX, NUM)  \t\\\n+  do                                    \t      \t   \t\\\n+    {\t\t\t\t\t\t      \t   \t\\\n+      char *s = (char *) alloca (40 + strlen (PREFIX));\t   \t\\\n+      extern int arm_target_label, arm_ccfsm_state;\t   \t\\\n+      extern rtx arm_target_insn;\t\t\t\t\\\n+\t\t\t\t\t\t           \t\\\n+      if (arm_ccfsm_state == 3 && arm_target_label == (NUM)   \t\\\n+\t&& !strcmp (PREFIX, \"L\"))\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  arm_ccfsm_state = 0;\t\t\t\t        \\\n+\t  arm_target_insn = NULL;\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+\tASM_GENERATE_INTERNAL_LABEL (s, (PREFIX), (NUM));   \t\\\n+\tASM_OUTPUT_LABEL (STREAM, s);\t\t                \\\n     } while (0)\n \n-/* Output a label definition.  */\n-#define ASM_OUTPUT_LABEL(STREAM,NAME)\t\t\\\n-  arm_asm_output_label ((STREAM), (NAME))\n-\n /* Output a push or a pop instruction (only used when profiling).  */\n #define ASM_OUTPUT_REG_PUSH(STREAM,REGNO) \\\n   fprintf(STREAM,\"\\tstmfd\\t%ssp!,{%s%s}\\n\", \\\n@@ -1916,9 +1929,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t  shift += 8;\t\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tldr\\t%spc, [%spc, #-4]\\n\", REGISTER_PREFIX,\t\t\\\n-\t   REGISTER_PREFIX);\t\t\t\t\t\t\\\n-  ASM_OUTPUT_INT (FILE, XEXP (DECL_RTL (FUNCTION), 0));\t\t\t\\\n+  fputs (\"\\tb\\t\", FILE);\t\t\t\t\t\t\\\n+  assemble_name (FILE,\t\t\t\t\t\t\t\\\n+\t\t IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (FUNCTION)));\t\\\n+  fputc ('\\n', FILE);\t\t\t\t\t\t\t\\\n } while (0)\n \n /* A C expression whose value is RTL representing the value of the return\n@@ -1927,7 +1941,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define RETURN_ADDR_RTX(COUNT, FRAME)\t\\\n   ((COUNT == 0)\t\t\t\t\\\n    ? gen_rtx (MEM, Pmode, plus_constant (FRAME, -4)) \\\n-   : (rtx) 0)\n+   : NULL_RTX)\n \n /* Used to mask out junk bits from the return address, such as\n    processor state, interrupt status, condition codes and the like.  */\n@@ -2003,9 +2017,9 @@ int arm_valid_machine_decl_attribute (/* union tree_node *, union tree_node *,\n \t\t\t\t\t union tree_node *,\n \t\t\t\t\t union tree_node * */);\n struct rtx_def *arm_gen_load_multiple (/* int, int, struct rtx_def *, \n-\t\t\t\t\t  int, int */);\n+\t\t\t\t\t  int, int, int, int */);\n struct rtx_def *arm_gen_store_multiple (/* int, int, struct rtx_def *,\n-\t\t\t\t\t   int, int */);\n+\t\t\t\t\t   int, int, int, int */);\n int arm_gen_movstrqi (/* struct rtx_def ** */);\n struct rtx_def *gen_rotated_half_load (/* struct rtx_def * */);\n enum machine_mode arm_select_cc_mode (/* enum rtx_code, struct rtx_def *,\n@@ -2024,7 +2038,7 @@ char *output_mov_long_double_arm_from_fpu (/* struct rtx_def ** */);\n char *output_mov_long_double_arm_from_arm (/* struct rtx_def ** */);\n char *output_mov_double_fpu_from_arm (/* struct rtx_def ** */);\n char *output_mov_double_arm_from_fpu (/* struct rtx_def ** */);\n-char *output_mov_double (/* struct rtx_def ** */);\n+char *output_move_double (/* struct rtx_def ** */);\n char *output_mov_immediate (/* struct rtx_def ** */);\n char *output_add_immediate (/* struct rtx_def ** */);\n char *arithmetic_instr (/* struct rtx_def *, int */);\n@@ -2035,8 +2049,6 @@ void output_func_prologue (/* FILE *, int */);\n void output_func_epilogue (/* FILE *, int */);\n void arm_expand_prologue (/* void */);\n void arm_print_operand (/* FILE *, struct rtx_def *, int */);\n-void arm_asm_output_label (/* FILE *, char * */);\n-void output_lcomm_directive (/* FILE *, char *, int, int */);\n void final_prescan_insn (/* struct rtx_def *, struct rtx_def **, int */);\n #ifdef AOF_ASSEMBLER\n struct rtx_def *aof_pic_entry (/* struct rtx_def * */);"}, {"sha": "17982c993d33cab91b8c7e436419ffd83deb0965", "filename": "gcc/config/clipper/clipper.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fclipper%2Fclipper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fclipper%2Fclipper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -777,10 +777,11 @@ do\t\t\t\t\t\t\t\t\t      \\\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE SImode\n \n-/* Define this if the case instruction expects the table\n-   to contain offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.  */\n-/* #define CASE_VECTOR_PC_RELATIVE */\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n+/* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n /* Define this if the case instruction drops through after the table\n    when the index is out of range.  Don't define it if the case insn"}, {"sha": "7538c1e345580db309b47e7b081a20a50245352b", "filename": "gcc/config/convex/convex.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fconvex%2Fconvex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fconvex%2Fconvex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -1029,10 +1029,11 @@ enum reg_class {\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE SImode\n \n-/* Define this if the case instruction expects the table\n-   to contain offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.  */\n-/* #define CASE_VECTOR_PC_RELATIVE */\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n+/* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n /* Define this if the case instruction drops through after the table\n    when the index is out of range.  Don't define it if the case insn"}, {"sha": "e128b48a787f0b2ccc5867351fd674ade100343d", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  AT&T DSP1600.\n-   Copyright (C) 1994, 1995, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1995, 1996, 1997 Free Software Foundation, Inc.\n    Contributed by Michael Collison (collison@world.std.com).\n \n This file is part of GNU CC.\n@@ -440,7 +440,7 @@ extern int target_flags;\n /* 1 for registers that have pervasive standard uses\n    and are not available for the register allocator.\n \n-   The registers are layed out as follows:\n+   The registers are laid out as follows:\n \n    {a0,a0l,a1,a1l,x,y,yl,p,pl} - Data Arithmetic Unit\n    {r0,r1,r2,r3,j,k,ybase} - Y Space Address Arithmetic Unit\n@@ -1652,7 +1652,7 @@ const_section ()                                                   \\\n /* This is how to output an assembler line defining a `float' constant.  */\n #define ASM_OUTPUT_FLOAT(FILE,VALUE)  asm_output_float (FILE, VALUE)\n \n-/* This is how to output and assembler line defininf a 'float' constant of\n+/* This is how to output an assembler line defining a 'float' constant of\n    size HFmode. */\n #define ASM_OUTPUT_SHORT_FLOAT(FILE,VALUE)  asm_output_float (FILE, VALUE)\n \n@@ -1921,10 +1921,11 @@ const_section ()                                                   \\\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE QImode\n \n-/* Define this if the tablejump instruction expects the table\n-   to contain offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.  */\n-/* #define CASE_VECTOR_PC_RELATIVE  */\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n+/* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n #define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR"}, {"sha": "dd0a5f9b68838845d86581d4f080359130871b37", "filename": "gcc/config/elxsi/elxsi.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Felxsi%2Felxsi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Felxsi%2Felxsi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felxsi%2Felxsi.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -618,10 +618,11 @@ enum reg_class { NO_REGS, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE SImode\n \n-/* Define this if the case instruction expects the table\n-   to contain offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.  */\n-/* #define CASE_VECTOR_PC_RELATIVE */\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n+/* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n #define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR"}, {"sha": "d1f3694703ac5a129d68d597ceb969718378540b", "filename": "gcc/config/fx80/fx80.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Ffx80%2Ffx80.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Ffx80%2Ffx80.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffx80%2Ffx80.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -819,10 +819,11 @@ extern enum reg_class regno_reg_class[];\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE HImode\n \n-/* Define this if the tablejump instruction expects the table\n-   to contain offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.  */\n-#define CASE_VECTOR_PC_RELATIVE\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n+#define CASE_VECTOR_PC_RELATIVE 1\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n #define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR"}, {"sha": "4a920239843034f65dccda07bc73c807ce918f03", "filename": "gcc/config/gmicro/gmicro.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fgmicro%2Fgmicro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fgmicro%2Fgmicro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgmicro%2Fgmicro.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -1121,10 +1121,11 @@ extern enum reg_class regno_reg_class[];\n /* #define CASE_VECTOR_MODE HImode */\n #define CASE_VECTOR_MODE SImode\n \n-/* Define this if the tablejump instruction expects the table\n-   to contain offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.  */\n-#define CASE_VECTOR_PC_RELATIVE\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n+#define CASE_VECTOR_PC_RELATIVE 1\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n #define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR"}, {"sha": "92e1d9a0dd7b137e7baaff19885aa48b8de12c2d", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -351,7 +351,7 @@ enum reg_class {\n \n #define REG_CLASS_CONTENTS  \t\t\t\\\n {      0,\t\t/* No regs      */\t\\\n-   0x0ff,\t\t/* GENERAL_REGS */    \t\\\n+   0x2ff,\t\t/* GENERAL_REGS */    \t\\\n    0x100,\t\t/* MAC_REGS */    \t\\\n    0x3ff,\t\t/* ALL_REGS \t*/\t\\\n }\n@@ -780,7 +780,9 @@ struct rtx_def *function_arg();\n #define REG_OK_FOR_INDEX_P(X) 0\n /* Nonzero if X is a hard reg that can be used as a base reg\n    or if it is a pseudo reg.  */\n-#define REG_OK_FOR_BASE_P(X) 1\n+/* Don't use REGNO_OK_FOR_BASE_P here because it uses reg_renumber.  */\n+#define REG_OK_FOR_BASE_P(X) \\\n+\t(REGNO (X) >= FIRST_PSEUDO_REGISTER || REGNO (X) != 8)\n #define REG_OK_FOR_INDEX_P_STRICT(X) REGNO_OK_FOR_INDEX_P (REGNO (X))\n #define REG_OK_FOR_BASE_P_STRICT(X) REGNO_OK_FOR_BASE_P (REGNO (X))\n #define STRICT 0\n@@ -862,9 +864,7 @@ struct rtx_def *function_arg();\n    has an effect that depends on the machine mode it is used for.\n \n    On the H8/300, the predecrement and postincrement address depend thus\n-   (the amount of decrement or increment being the length of the operand)\n-   and all indexed address depend thus (because the index scale factor\n-   is the length of the operand).  */\n+   (the amount of decrement or increment being the length of the operand).  */\n \n #define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL) \\\n   if (GET_CODE (ADDR) == POST_INC || GET_CODE (ADDR) == PRE_DEC) goto LABEL;\n@@ -873,10 +873,11 @@ struct rtx_def *function_arg();\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE Pmode\n \n-/* Define this if the case instruction expects the table\n-   to contain offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.  */\n-/*#define CASE_VECTOR_PC_RELATIVE*/\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n+/*#define CASE_VECTOR_PC_RELATIVE 1 */\n \n /* Define this if the case instruction drops through after the table\n    when the index is out of range.  Don't define it if the case insn\n@@ -986,7 +987,7 @@ h8300_valid_machine_decl_attribute (DECL, ATTRIBUTES, IDENTIFIER, ARGS)\n /* Tell final.c how to eliminate redundant test instructions.  */\n \n /* Here we define machine-dependent flags and fields in cc_status\n-   (see `conditions.h').  No extra ones are needed for the vax.  */\n+   (see `conditions.h').  No extra ones are needed for the h8300.  */\n \n /* Store in cc_status the expressions\n    that the condition codes will describe\n@@ -1347,7 +1348,7 @@ do { char dstr[30];\t\t\t\t\t\\\n #define PRINT_OPERAND(FILE, X, CODE)  print_operand(FILE,X,CODE)\n \n /* Print a memory operand whose address is X, on file FILE.\n-   This uses a function in output-vax.c.  */\n+   This uses a function in h8300.c.  */\n \n #define PRINT_OPERAND_ADDRESS(FILE, ADDR) print_operand_address (FILE, ADDR)\n "}, {"sha": "28279b24dfaf3105b5febd58a337d2a0c3b681f1", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 7, "deletions": 109, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  System/370 version.\n-   Copyright (C) 1989, 1993, 1995, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 1993, 1995, 1996, 1997 Free Software Foundation, Inc.\n    Contributed by Jan Stein (jan@cd.chalmers.se).\n    Modified for C/370 MVS by Dave Pitts (dpitts@nyx.cs.du.edu)\n \n@@ -20,12 +20,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#ifdef sun\n-#include <sys/types.h>\n-#include <ctype.h>\n-#endif\n-#include <time.h>\n-\n #define TARGET_VERSION printf (\" (370/MVS)\");\n \n /* Options for the preprocessor for this target machine.  */\n@@ -489,103 +483,7 @@ enum reg_class\n \n /* This macro generates the assembly code for function entry.\n    All of the C/370 environment is preserved.  */\n-\n-#if MACROPROLOGUE == 1\n-#define FUNCTION_PROLOGUE(FILE, LSIZE)\t\t\t\t\t\\\n-{ \t\t\t\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tEDCPRLG USRDSAL=%d,BASEREG=%d\\n\",\t\t\t\\\n-\t   STACK_POINTER_OFFSET + LSIZE - 120 +\t\t\t\t\\\n-\t   current_function_outgoing_args_size, BASE_REGISTER);\t\t\\\n-  fprintf (FILE, \"PG%d\\tEQU\\t*\\n\", mvs_page_num );\t\t\t\\\n-  fprintf (FILE, \"\\tLR\\t11,1\\n\");\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tL\\t%d,=A(PGT%d)\\n\", PAGE_REGISTER, mvs_page_num);\t\\\n-  mvs_page_code = 6;\t\t\t\t\t\t\t\\\n-  mvs_page_lit = 4;\t\t\t\t\t\t\t\\\n-  mvs_check_page (FILE, 0, 0);\t\t\t\t\t\t\\\n-  function_base_page = mvs_page_num;\t\t\t\t\t\\\n-}\n-#else /* MACROPROLOGUE != 1 */\n-#define FUNCTION_PROLOGUE(FILE, LSIZE)\t\t\t\t\t\\\n-{ \t\t\t\t\t\t\t\t\t\\\n-  static int function_label_index = 1;\t\t\t\t\t\\\n-  static int function_first = 0;\t\t\t\t\t\\\n-  static int function_year, function_month, function_day;\t\t\\\n-  static int function_hour, function_minute, function_second;\t\t\\\n-  int i;\t\t\t\t\t\t\t\t\\\n-  if (!function_first)\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      struct tm *function_time;\t\t\t\t\t\t\\\n-      time_t lcltime;\t\t\t\t\t\t\t\\\n-      time (&lcltime);\t\t\t\t\t\t\t\\\n-      function_time = localtime (&lcltime);\t\t\t\t\\\n-      function_year = function_time->tm_year + 1900;\t\t\t\\\n-      function_month = function_time->tm_mon + 1;\t\t\t\\\n-      function_day = function_time->tm_mday;\t\t\t\t\\\n-      function_hour = function_time->tm_hour;\t\t\t\t\\\n-      function_minute = function_time->tm_min;\t\t\t\t\\\n-      function_second = function_time->tm_sec;\t\t\t\t\\\n-      fprintf (FILE, \"PPA2\\tDS\\t0F\\n\");\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tDC\\tX'03',X'00',X'33',X'00'\\n\");\t\t\\\n-      fprintf (FILE, \"\\tDC\\tV(CEESTART),A(0)\\n\");\t\t\t\\\n-      fprintf (FILE, \"\\tDC\\tA(CEETIMES)\\n\");\t\t\t\t\\\n-      fprintf (FILE, \"CEETIMES\\tDS\\t0F\\n\");\t\t\t\t\\\n-      fprintf (FILE, \"\\tDC\\tCL4'%d',CL4'%02d%02d',CL6'%02d%02d00'\\n\",\t\\\n-    \t\t function_year, function_month, function_day,\t\t\\\n-    \t\t function_hour, function_minute, function_second);\t\\\n-      fprintf (FILE, \"\\tDC\\tCL2'01',CL4'0100'\\n\");\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  fprintf (FILE, \"$DSD%03d\\tDSECT\\n\", function_label_index);\t\t\\\n-  fprintf (FILE, \"\\tDS\\tD\\n\");\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tDS\\tCL(%d)\\n\", STACK_POINTER_OFFSET + LSIZE \t\\\n-\t\t\t+ current_function_outgoing_args_size);\t\t\\\n-  fprintf (FILE, \"\\tORG\\t$DSD%03d\\n\", function_label_index);\t\t\\\n-  fprintf (FILE, \"\\tDS\\tCL(120+8)\\n\");\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tORG\\n\");\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tDS\\t0D\\n\");\t\t\t\t\t\t\\\n-  fprintf (FILE, \"$DSL%03d\\tEQU\\t*-$DSD%03d-8\\n\", function_label_index, \\\n-\t   function_label_index);\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tDS\\t0H\\n\");\t\t\t\t\t\t\\\n-  assemble_name (FILE, mvs_function_name);\t\t\t\t\\\n-  fprintf (FILE, \"\\tEQU\\t*\\n\");\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tUSING\\t*,15\\n\");\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tB\\tFPL%03d\\n\", function_label_index);\t\t\\\n-  fprintf (FILE, \"\\tDC\\tAL1(FPL%03d+4-*)\\n\", function_label_index + 1);\t\\\n-  fprintf (FILE, \"\\tDC\\tX'CE',X'A0',AL1(16)\\n\");\t\t\t\\\n-  fprintf (FILE, \"\\tDC\\tAL4(PPA2)\\n\");\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tDC\\tAL4(0)\\n\");\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tDC\\tAL4($DSL%03d)\\n\", function_label_index);\t\\\n-  fprintf (FILE, \"FPL%03d\\tEQU\\t*\\n\", function_label_index + 1);\t\\\n-  fprintf (FILE, \"\\tDC\\tAL2(%d),C'%s'\\n\", strlen (mvs_function_name),\t\\\n-\tmvs_function_name);\t\t\t\t\t\t\\\n-  fprintf (FILE, \"FPL%03d\\tDS\\t0H\\n\", function_label_index);\t\t\\\n-  fprintf (FILE, \"\\tSTM\\t14,12,12(13)\\n\");\t\t\t\t\\\n-  fprintf (FILE, \"\\tL\\t2,76(,13)\\n\");\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tL\\t0,16(,15)\\n\");\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tALR\\t0,2\\n\");\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tCL\\t0,12(,12)\\n\");\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tBNH\\t*+10\\n\");\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tL\\t15,116(,12)\\n\");\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tBALR\\t14,15\\n\");\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tL\\t15,72(,13)\\n\");\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tSTM\\t15,0,72(2)\\n\");\t\t\t\t\\\n-  fprintf (FILE, \"\\tMVI\\t0(2),X'10'\\n\");\t\t\t\t\\\n-  fprintf (FILE, \"\\tST\\t2,8(,13)\\n \");                                  \\\n-  fprintf (FILE, \"\\tST\\t13,4(,2)\\n \");\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tLR\\t13,2\\n\");\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tDROP\\t15\\n\");\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tBALR\\t%d,0\\n\", BASE_REGISTER);\t\t\t\\\n-  fprintf (FILE, \"PG%d\\tEQU\\t*\\n\", mvs_page_num );\t\t\t\\\n-  fprintf (FILE, \"\\tUSING\\t*,%d\\n\", BASE_REGISTER);\t\t\t\\\n-  fprintf (FILE, \"\\tLR\\t11,1\\n\");\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tL\\t%d,=A(PGT%d)\\n\", PAGE_REGISTER, mvs_page_num);\t\\\n-  mvs_page_code = 4;\t\t\t\t\t\t\t\\\n-  mvs_page_lit = 4;\t\t\t\t\t\t\t\\\n-  mvs_check_page (FILE, 0, 0);\t\t\t\t\t\t\\\n-  function_base_page = mvs_page_num;\t\t\t\t\t\\\n-  function_first = 1;\t\t\t\t\t\t\t\\\n-  function_label_index += 2;\t\t\t\t\t\t\\\n-}\n-#endif /* MACROPROLOGUE */\n+#define FUNCTION_PROLOGUE(FILE, LSIZE) i370_function_prolog ((FILE), (LSIZE));\n \n #define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n@@ -890,11 +788,11 @@ enum reg_class\n \n #define CASE_VECTOR_MODE SImode\n \n-/* Define this if the tablejump instruction expects the table to contain\n-   offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.  */\n-\n-/* #define CASE_VECTOR_PC_RELATIVE */\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n+/* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n "}, {"sha": "d2bc5e2d15661d9fa88e3cb6f601f68b25af3592", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -1791,10 +1791,11 @@ while (0)\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE Pmode\n \n-/* Define this if the tablejump instruction expects the table\n-   to contain offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.  */\n-/* #define CASE_VECTOR_PC_RELATIVE */\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n+/* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n /* Specify the tree operation to be used to convert reals to integers.\n    This should be changed to take advantage of fist --wfs ??"}, {"sha": "5f10b4611ad3fd3b56948423aa1dff156c2fcaa2", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -842,10 +842,11 @@ struct cumulative_args { int ints, floats; };\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE SImode\n \n-/* Define this if the tablejump instruction expects the table\n-   to contain offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.  */\n-/* #define CASE_VECTOR_PC_RELATIVE */\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n+/* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n #define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR"}, {"sha": "d9cddb99d57b9bbb502fdd65c39a490a17dfb237", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -1076,10 +1076,11 @@ extern struct rtx_def *legitimize_address ();\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE SImode\n \n-/* Define this if the tablejump instruction expects the table\n-   to contain offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.  */\n-/* #define CASE_VECTOR_PC_RELATIVE */\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n+/* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n #define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR"}, {"sha": "d7517e9ded5a8477ba602edb271b1d66d6d33fc5", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -1,4 +1,4 @@\n-/* Definitions of target machine for GNU compiler, for the M32R/D cpu.\n+/* Definitions of target machine for GNU compiler, Mitsubishi M32R cpu.\n    Copyright (C) 1996, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n@@ -22,7 +22,7 @@ Boston, MA 02111-1307, USA.  */\n - longlong.h?\n */\n \n-/* FIXME: Create elf.h and have svr4.h include it.  */\n+/* ??? Create elf.h and have svr4.h include it.  */\n #include \"svr4.h\"\n \n #undef SWITCH_TAKES_ARG\n@@ -703,7 +703,7 @@ M32R_STACK_ALIGN (current_function_outgoing_args_size)\n \n    Do not define this macro unless there is no other way to get the\n    return address from the stack.  */\n-/* FIXME: revisit */\n+/* ??? revisit */\n /* #define RETURN_ADDRESS_POINTER_REGNUM */\n \n /* Register in which static-chain is passed to a function.  This must\n@@ -886,7 +886,7 @@ M32R_STACK_ALIGN (current_function_outgoing_args_size)\n  ? gen_rtx (REG, (MODE), ROUND_ADVANCE_CUM ((CUM), (MODE), (TYPE)))\t\\\n  : 0)\n \n-/* FIXME: Quick hack to try to get varargs working the normal way.  */\n+/* ??? Quick hack to try to get varargs working the normal way.  */\n #define FUNCTION_INCOMING_ARG(CUM, MODE, TYPE, NAMED) \\\n (((! current_function_varargs || (NAMED))\t\t\t\t\\\n   && PASS_IN_REG_P ((CUM), (MODE), (TYPE), (NAMED)))\t\t\t\\\n@@ -1061,7 +1061,7 @@ m32r_output_function_epilogue (FILE, SIZE)\n \tjmp r6\n \tnop\n \n-   FIXME: Need addr32 support.\n+   ??? Need addr32 support.\n */\n \n /* Length in bytes of the trampoline for entering a nested function.  */\n@@ -1224,7 +1224,7 @@ m32r_select_cc_mode (OP, X, Y)\n \n /* Return non-zero if SELECT_CC_MODE will never return MODE for a\n    floating point inequality comparison.  */\n-#define REVERSIBLE_CC_MODE(MODE) 1 /*FIXME*/\n+#define REVERSIBLE_CC_MODE(MODE) 1 /*???*/\n \f\n /* Costs.  */\n \n@@ -1779,13 +1779,14 @@ do {\t\t\t\t\t\t\t\t\t\\\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE Pmode\n \n-/* Define this if the tablejump instruction expects the table\n-   to contain offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.  */\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n /* It's not clear what PIC will look like or whether we want to use -fpic\n    for the embedded form currently being talked about.  For now require -fpic\n    to get pc relative switch tables.  */\n-/*#define CASE_VECTOR_PC_RELATIVE*/\n+/*#define CASE_VECTOR_PC_RELATIVE 1 */\n \n /* Define if operations between registers always perform the operation\n    on the full register even if a narrower mode is specified.  */"}, {"sha": "eeb04c40b25c65e730e5544f318fc896348c4d58", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -1551,10 +1551,11 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE HImode\n \n-/* Define this if the tablejump instruction expects the table\n-   to contain offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.  */\n-#define CASE_VECTOR_PC_RELATIVE\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n+#define CASE_VECTOR_PC_RELATIVE 1\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n #define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR"}, {"sha": "79228d422b3b59998c9a7e3ffe2f3c399117f3fd", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler for\n    Motorola m88100 in an 88open OCS/BCS environment.\n-   Copyright (C) 1988, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 92, 93, 94, 95, 96, 1997 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com).\n    Currently maintained by (gcc@dg-rtp.dg.com)\n \n@@ -198,13 +198,13 @@ extern char * reg_names[];\n    Redefined in sysv4.h, and luna.h.  */\n #define VERSION_INFO1\t\"m88k, \"\n #ifndef VERSION_INFO2\n-#define VERSION_INFO2   \"$Revision: 1.1 $\"\n+#define VERSION_INFO2   \"$Revision: 1.3 $\"\n #endif\n \n #ifndef VERSION_STRING\n #define VERSION_STRING  version_string\n #ifdef __STDC__\n-#define TM_RCS_ID      \"@(#)\" __FILE__ \" $Revision: 1.1 $ \" __DATE__\n+#define TM_RCS_ID      \"@(#)\" __FILE__ \" $Revision: 1.3 $ \" __DATE__\n #else\n #define TM_RCS_ID      \"$What: <@(#) m88k.h,v\t1.1.1.2.2.2> $\"\n #endif  /* __STDC__ */\n@@ -1510,8 +1510,11 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n    elements of a jump-table should have.  */\n #define CASE_VECTOR_MODE SImode\n \n-/* Define this macro if jump-tables should contain relative addresses.  */\n-#define CASE_VECTOR_PC_RELATIVE\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n+#define CASE_VECTOR_PC_RELATIVE 1\n \n /* Define this if control falls through a `case' insn when the index\n    value is out of range.  This means the specified default-label is\n@@ -1547,6 +1550,7 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n \n /* Tell when to handle #pragma weak.  This is only done for V.4.  */\n #define SUPPORTS_WEAK TARGET_SVR4\n+#define SUPPORTS_ONE_ONLY TARGET_SVR4\n \n /* Max number of bytes we can move from memory to memory\n    in one reasonably fast instruction.  */"}, {"sha": "5ce0c17210a7df5a1d58579dc6b12a3c6c87f058", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -2795,7 +2795,7 @@ while (0)\n /* Define this if the tablejump instruction expects the table\n    to contain offsets from the address of the table.\n    Do not define this if the table should contain absolute addresses.  */\n-/* #define CASE_VECTOR_PC_RELATIVE */\n+/* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n #define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR"}, {"sha": "b98d72f5527ff94ab790f4be6acee77b6510fbf7", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -1088,10 +1088,11 @@ while (0)\n    all programs. */\n #define CASE_VECTOR_MODE SImode\n \n-/* Define this if the tablejump instruction expects the table\n-   to contain offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.  */\n-#define CASE_VECTOR_PC_RELATIVE\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n+#define CASE_VECTOR_PC_RELATIVE 1\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n #define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR"}, {"sha": "9a37528f536a1505e5b31d32e60688c31ecc7952", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -879,10 +879,11 @@ extern int current_function_pretend_args_size;\n    `tablejump' insn.  */\n #define CASE_TAKES_INDEX_RAW\n \n-/* Define this if the tablejump instruction expects the table\n-   to contain offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.  */\n-/* #define CASE_VECTOR_PC_RELATIVE */\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n+/* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n #define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR"}, {"sha": "cf292903b4f85123ec853f210a65cf7b7effedbe", "filename": "gcc/config/pyr/pyr.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fpyr%2Fpyr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fpyr%2Fpyr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpyr%2Fpyr.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -989,10 +989,11 @@ extern int current_function_calls_alloca;\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE SImode\n \n-/* Define this if the tablejump instruction expects the table\n-   to contain offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.  */\n-/*#define CASE_VECTOR_PC_RELATIVE*/\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n+/*#define CASE_VECTOR_PC_RELATIVE 1 */\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n #define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR"}, {"sha": "158f2ef82689ca08c40c71424bb9a4d1ce625222", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -1143,10 +1143,11 @@ struct rt_cargs {int gregs, fregs; };\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE SImode\n \n-/* Define this if the tablejump instruction expects the table\n-   to contain offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.  */\n-/* #define CASE_VECTOR_PC_RELATIVE */\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n+/* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n #define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR"}, {"sha": "9a5b281bfcc5a79e17bcf525abf7e415fafabdc0", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -2002,10 +2002,11 @@ typedef struct rs6000_args\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE (TARGET_32BIT ? SImode : DImode)\n \n-/* Define this if the tablejump instruction expects the table\n-   to contain offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.  */\n-#define CASE_VECTOR_PC_RELATIVE\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n+#define CASE_VECTOR_PC_RELATIVE 1\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n #define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR"}, {"sha": "4a7f094a1e04565c74a82aba29b393fed7b1f18b", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -1188,10 +1188,11 @@ extern struct rtx_def *sh_builtin_saveregs ();\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE (TARGET_BIGTABLE ? SImode : HImode)\n \n-/* Define this if the tablejump instruction expects the table\n-   to contain offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.  */\n-#define CASE_VECTOR_PC_RELATIVE\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n+#define CASE_VECTOR_PC_RELATIVE 1\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n #define IMPLICIT_FIX_EXPR  FIX_ROUND_EXPR"}, {"sha": "e87058cc33f4d4a43aea8a7e9c2a3d1e59f4f3df", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -2461,10 +2461,11 @@ extern struct rtx_def *legitimize_pic_address ();\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE Pmode\n \n-/* Define this if the tablejump instruction expects the table\n-   to contain offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.  */\n-/* #define CASE_VECTOR_PC_RELATIVE */\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n+/* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n #define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR"}, {"sha": "b485d74ac7af20f2c380f69d79467f74b6c5bf20", "filename": "gcc/config/spur/spur.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fspur%2Fspur.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fspur%2Fspur.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspur%2Fspur.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -738,10 +738,11 @@ extern int current_function_pretend_args_size;\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE SImode\n \n-/* Define this if the tablejump instruction expects the table\n-   to contain offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.  */\n-/* #define CASE_VECTOR_PC_RELATIVE */\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n+/* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n #define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR"}, {"sha": "e104b4e1610a3daa7a8e3b71c9d2d16ca4a236e8", "filename": "gcc/config/tahoe/tahoe.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Ftahoe%2Ftahoe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Ftahoe%2Ftahoe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftahoe%2Ftahoe.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -575,9 +575,11 @@ enum reg_class {NO_REGS,GENERAL_REGS,FPP_REG,ALL_REGS,LIM_REG_CLASSES};\n \n #define CASE_VECTOR_MODE HImode\n \n-/* each of the table elements in a case are relative to the jump address */\n-\n-#define CASE_VECTOR_PC_RELATIVE\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n+#define CASE_VECTOR_PC_RELATIVE 1\n \n /* tahoe case instructions just fall through to the next instruction */\n /* if not satisfied. It doesn't support a default action\t     */"}, {"sha": "b09a475ac43589e2e7265f2510e263c199a5ba4a", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -1317,10 +1317,11 @@ do { char dstr[30];\t\t\t\t\t\\\n    jumps to the default label instead.  */\n /* #define CASE_DROPS_THROUGH */\n \n-/* We must use a PC relative entry for small tables.  It would be more\n-   efficient to use an absolute entry for big tables, but this is not\n-   a runtime choice yet.  */\n-#define CASE_VECTOR_PC_RELATIVE\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n+#define CASE_VECTOR_PC_RELATIVE 1\n \n /* The switch instruction requires that the jump table immediately follow\n    it. */"}, {"sha": "3a296a445c930c539596d979adf7f59c5cb1b291", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -446,7 +446,7 @@ gen_rtx (PLUS, Pmode, frame, gen_rtx (CONST_INT, VOIDmode, 12))\n /* This macro generates the assembly code for function entry.\n    FILE is a stdio stream to output the code to.\n    SIZE is an int: how many units of temporary storage to allocate,\n-   adjusted by STARTING_FRAME_OFFSET to accomodate vms.h.\n+   adjusted by STARTING_FRAME_OFFSET to accommodate vms.h.\n    Refer to the array `regs_ever_live' to determine which registers\n    to save; `regs_ever_live[I]' is nonzero if register number I\n    is ever used in the function.  This macro is responsible for\n@@ -813,10 +813,11 @@ gen_rtx (PLUS, Pmode, frame, gen_rtx (CONST_INT, VOIDmode, 12))\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE HImode\n \n-/* Define this if the case instruction expects the table\n-   to contain offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.  */\n-#define CASE_VECTOR_PC_RELATIVE\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n+#define CASE_VECTOR_PC_RELATIVE 1\n \n /* Define this if the case instruction drops through after the table\n    when the index is out of range.  Don't define it if the case insn"}, {"sha": "e7d923856c2badc850062c676d7b387e327c0dce", "filename": "gcc/config/we32k/we32k.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.h?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -625,10 +625,11 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE SImode\n \n-/* Define this if the tablejump instruction expects the table\n-   to contain offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.  */\n-/* #define CASE_VECTOR_PC_RELATIVE */\n+/* Define as C expression which evaluates to nonzero if the tablejump\n+   instruction expects the table to contain offsets from the address of the\n+   table.\n+   Do not define this if the table should contain absolute addresses. */\n+/* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n #define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR"}, {"sha": "68fbbe9e89b91346db03adc1e9bb517a62213137", "filename": "gcc/expr.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -73,6 +73,11 @@ Boston, MA 02111-1307, USA.  */\n /* Like STACK_BOUNDARY but in units of bytes, not bits.  */\n #define STACK_BYTES (STACK_BOUNDARY / BITS_PER_UNIT)\n \n+/* Assume that case vectors are not pc-relative.  */\n+#ifndef CASE_VECTOR_PC_RELATIVE\n+#define CASE_VECTOR_PC_RELATIVE 0\n+#endif\n+\n /* If this is nonzero, we do not bother generating VOLATILE\n    around volatile memory references, and we are willing to\n    output indirect addresses.  If cse is to follow, we reject\n@@ -11320,12 +11325,10 @@ do_tablejump (index, mode, range, table_label, default_label)\n \n   emit_jump_insn (gen_tablejump (temp, table_label));\n \n-#ifndef CASE_VECTOR_PC_RELATIVE\n   /* If we are generating PIC code or if the table is PC-relative, the\n      table and JUMP_INSN must be adjacent, so don't output a BARRIER.  */\n-  if (! flag_pic)\n+  if (! CASE_VECTOR_PC_RELATIVE && ! flag_pic)\n     emit_barrier ();\n-#endif\n }\n \n #endif /* HAVE_tablejump */"}, {"sha": "78e5b543494fdcf49fc7bf0cfa7049709b34a07c", "filename": "gcc/stmt.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -63,6 +63,11 @@ Boston, MA 02111-1307, USA.  */\n #define obstack_chunk_free free\n struct obstack stmt_obstack;\n \n+/* Assume that case vectors are not pc-relative.  */\n+#ifndef CASE_VECTOR_PC_RELATIVE\n+#define CASE_VECTOR_PC_RELATIVE 0\n+#endif\n+\n /* Filename and line number of last line-number note,\n    whether we actually emitted it or not.  */\n char *emit_filename;\n@@ -5700,13 +5705,7 @@ expand_end_case (orig_index)\n \t  /* Output the table */\n \t  emit_label (table_label);\n \n-\t  /* This would be a lot nicer if CASE_VECTOR_PC_RELATIVE\n-\t     were an expression, instead of an #ifdef/#ifndef.  */\n-\t  if (\n-#ifdef CASE_VECTOR_PC_RELATIVE\n-\t      1 ||\n-#endif\n-\t      flag_pic)\n+\t  if (CASE_VECTOR_PC_RELATIVE || flag_pic)\n \t    emit_jump_insn (gen_rtx (ADDR_DIFF_VEC, CASE_VECTOR_MODE,\n \t\t\t\t     gen_rtx (LABEL_REF, Pmode, table_label),\n \t\t\t\t     gen_rtvec_v (ncases, labelvec)));"}, {"sha": "e24a7e25f480cb7e689b8a1fdbcc87b0a20b9401", "filename": "gcc/tm.texi", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18543a22081f3f08a82e6402837daed19b66f0a7/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=18543a22081f3f08a82e6402837daed19b66f0a7", "patch": "@@ -6830,7 +6830,9 @@ elements of a jump-table should have.\n \n @findex CASE_VECTOR_PC_RELATIVE\n @item CASE_VECTOR_PC_RELATIVE\n-Define this macro if jump-tables should contain relative addresses.\n+Define this macro to be a C expression to indicate when jump-tables\n+should contain relative addresses.  If jump-tables never contain\n+relative addresses, then you need not define this macro.\n \n @findex CASE_DROPS_THROUGH\n @item CASE_DROPS_THROUGH"}]}