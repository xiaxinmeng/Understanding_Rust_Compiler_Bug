{"sha": "16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZhMTBmYjZmYzllNjRiMWViMzhjODU2MzBlZjdlMjBjYTdhZGU2NA==", "commit": {"author": {"name": "Jerry Quinn", "email": "jlquinn@optonline.net", "date": "2003-10-21T04:46:19Z"}, "committer": {"name": "Jerry Quinn", "email": "jlquinn@gcc.gnu.org", "date": "2003-10-21T04:46:19Z"}, "message": "posix-threads.cc (_Jv_CondNotify,_Jv_CondNotifyAll): Rename _Jv_PthreadCheckMonitor to _Jv_MutexCheckMonitor.\n\n2003-10-21  Jerry Quinn  <jlquinn@optonline.net>\n\n        * posix-threads.cc (_Jv_CondNotify,_Jv_CondNotifyAll): Rename\n        _Jv_PthreadCheckMonitor to _Jv_MutexCheckMonitor.\n\t* include/no-threads.h (_Jv_MutexCheckMonitor): New.\n\t* include/posix-threads.h (_Jv_MutexCheckMonitor): Rename from\n        _Jv_PthreadCheckMonitor.  Simplify code.\n\t(_Jv_MutexUnlock): Use _Jv_MutexCheckMonitor.\n\t* include/win32-threads.h (_Jv_MutexCheckMonitor): New.\n\t* java/lang/Object.h (_Jv_ObjectCheckMonitor): Declare.\n\t* java/lang/Thread.java (holdsLock): New.\n\t* java/lang/natObject.cc (_Jv_ObjectCheckMonitor): New, with and\n        without JV_HASH_SYNCHRONIZATION.\n\t* java/lang/natThread.cc (java::lang::Thread::holdsLock): New.\n\nFrom-SVN: r72741", "tree": {"sha": "b5325b3608586fc1cc0a4882b22a1fee0f1262bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5325b3608586fc1cc0a4882b22a1fee0f1262bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64/comments", "author": {"login": "jlquinn", "id": 826841, "node_id": "MDQ6VXNlcjgyNjg0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/826841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlquinn", "html_url": "https://github.com/jlquinn", "followers_url": "https://api.github.com/users/jlquinn/followers", "following_url": "https://api.github.com/users/jlquinn/following{/other_user}", "gists_url": "https://api.github.com/users/jlquinn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlquinn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlquinn/subscriptions", "organizations_url": "https://api.github.com/users/jlquinn/orgs", "repos_url": "https://api.github.com/users/jlquinn/repos", "events_url": "https://api.github.com/users/jlquinn/events{/privacy}", "received_events_url": "https://api.github.com/users/jlquinn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "036a75ac29ce155ea4c004d38ecce1e8c07f5272", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/036a75ac29ce155ea4c004d38ecce1e8c07f5272", "html_url": "https://github.com/Rust-GCC/gccrs/commit/036a75ac29ce155ea4c004d38ecce1e8c07f5272"}], "stats": {"total": 104, "additions": 96, "deletions": 8}, "files": [{"sha": "07d0127aa0876d357265f8a073a79f0736be3c20", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64", "patch": "@@ -1,3 +1,18 @@\n+2003-10-21  Jerry Quinn  <jlquinn@optonline.net>\n+\n+        * posix-threads.cc (_Jv_CondNotify,_Jv_CondNotifyAll): Rename\n+        _Jv_PthreadCheckMonitor to _Jv_MutexCheckMonitor.\n+\t* include/no-threads.h (_Jv_MutexCheckMonitor): New.\n+\t* include/posix-threads.h (_Jv_MutexCheckMonitor): Rename from\n+        _Jv_PthreadCheckMonitor.  Simplify code.\n+\t(_Jv_MutexUnlock): Use _Jv_MutexCheckMonitor.\n+\t* include/win32-threads.h (_Jv_MutexCheckMonitor): New.\n+\t* java/lang/Object.h (_Jv_ObjectCheckMonitor): Declare.\n+\t* java/lang/Thread.java (holdsLock): New.\n+\t* java/lang/natObject.cc (_Jv_ObjectCheckMonitor): New, with and\n+        without JV_HASH_SYNCHRONIZATION.\n+\t* java/lang/natThread.cc (java::lang::Thread::holdsLock): New.\n+\n 2003-10-20  Michael Koch  <konqueror@gmx.de>\n \n \t* java/text/RuleBasedCollator.java"}, {"sha": "793cfadbf1bc3a39cd80c06a91b014dd88ec5867", "filename": "libjava/include/no-threads.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64/libjava%2Finclude%2Fno-threads.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64/libjava%2Finclude%2Fno-threads.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fno-threads.h?ref=16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64", "patch": "@@ -75,6 +75,11 @@ _Jv_CondNotifyAll (_Jv_ConditionVariable_t *, _Jv_Mutex_t *)\n // Mutexes.\n //\n \n+inline int _Jv_MutexCheckMonitor (_Jv_Mutex_t *mu)\n+{\n+  return 0;\n+}\n+\n inline void\n _Jv_MutexInit (_Jv_Mutex_t *)\n {"}, {"sha": "01606df021fdd7a08bec482281e652a89daa30a3", "filename": "libjava/include/posix-threads.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64/libjava%2Finclude%2Fposix-threads.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64/libjava%2Finclude%2Fposix-threads.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fposix-threads.h?ref=16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64", "patch": "@@ -77,12 +77,9 @@ typedef struct\n // this out.  Returns 0 if the lock is held by the current thread, and\n // 1 otherwise.\n inline int\n-_Jv_PthreadCheckMonitor (_Jv_Mutex_t *mu)\n+_Jv_MutexCheckMonitor (_Jv_Mutex_t *mu)\n {\n-  pthread_t self = pthread_self();\n-  if (mu->owner == self)\n-    return 0;\n-  else return 1;\n+  return (mu->owner != pthread_self());\n }\n \n //\n@@ -155,7 +152,7 @@ _Jv_MutexLock (_Jv_Mutex_t *mu)\n inline int\n _Jv_MutexUnlock (_Jv_Mutex_t *mu)\n {\n-  if (_Jv_PthreadCheckMonitor (mu))\n+  if (_Jv_MutexCheckMonitor (mu))\n     {\n #     ifdef LOCK_DEBUG\n \tfprintf(stderr, \"_Jv_MutexUnlock: Not owner\\n\");"}, {"sha": "fdd21c541b4b22f8eccb34d50a3d7541c55e6292", "filename": "libjava/include/win32-threads.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64/libjava%2Finclude%2Fwin32-threads.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64/libjava%2Finclude%2Fwin32-threads.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fwin32-threads.h?ref=16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64", "patch": "@@ -86,6 +86,12 @@ int _Jv_CondNotifyAll (_Jv_ConditionVariable_t *cv, _Jv_Mutex_t *);\n // We use CRITICAL_SECTIONs instead of CreateMutex() for better performance\n //\n \n+// Returns 0 if the mutex lock is held by the current thread, and 1 otherwise.\n+inline int _Jv_MutexCheckMonitor (_Jv_Mutex_t *mu)\n+{\n+  return (mu->owner != GetCurrentThreadId ( ));\n+}\n+\n inline void _Jv_MutexInit (_Jv_Mutex_t *mu)\n {\n   mu->owner = 0UL;"}, {"sha": "78ddbc40beffb598c1e7da462041ff441395c25a", "filename": "libjava/java/lang/Object.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64/libjava%2Fjava%2Flang%2FObject.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64/libjava%2Fjava%2Flang%2FObject.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FObject.h?ref=16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64", "patch": "@@ -49,6 +49,7 @@ class java::lang::Object : public _JvObjectPrefix\n   friend void _Jv_MonitorExit (jobject obj);\n   friend void _Jv_InitializeSyncMutex (void);\n   friend void _Jv_FinalizeObject (jobject obj);\n+  friend bool _Jv_ObjectCheckMonitor (jobject obj);\n \n #ifdef JV_MARKOBJ_DECL\n   friend JV_MARKOBJ_DECL;"}, {"sha": "d537220ab02f8eafdefd28f8da0c534f281d6685", "filename": "libjava/java/lang/Thread.java", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64/libjava%2Fjava%2Flang%2FThread.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64/libjava%2Fjava%2Flang%2FThread.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThread.java?ref=16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64", "patch": "@@ -181,6 +181,15 @@ public final ThreadGroup getThreadGroup ()\n     return group;\n   }\n \n+  /**\n+   * Return true if this Thread holds the object's lock, false otherwise.\n+   *\n+   * @param obj the object to test lock ownership on.\n+   * @throws NullPointerException if obj is null.\n+   * @since 1.4\n+   */\n+  public static native boolean holdsLock (Object obj);\n+\n   /**\n    * Interrupt this Thread. First, there is a security check,\n    * <code>checkAccess</code>. Then, depending on the current state of the"}, {"sha": "a9f80d867f80bbc31150c019be4d879cce318e02", "filename": "libjava/java/lang/natObject.cc", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64/libjava%2Fjava%2Flang%2FnatObject.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64/libjava%2Fjava%2Flang%2FnatObject.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatObject.cc?ref=16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64", "patch": "@@ -264,6 +264,13 @@ _Jv_MonitorExit (jobject obj)\n     throw new java::lang::IllegalMonitorStateException;\n }\n \n+bool\n+_Jv_ObjectCheckMonitor (jobject obj)\n+{\n+  _Jv_SyncInfo *si = (_Jv_SyncInfo *) obj->sync_info;\n+  return _Jv_MutexCheckMonitor (&si->mutex);\n+}\n+\n #else /* JV_HASH_SYNCHRONIZATION */\n \n // FIXME: We shouldn't be calling GC_register_finalizer directly.\n@@ -1087,6 +1094,46 @@ _Jv_MonitorExit (jobject obj)\n   keep_live(addr);\n }     \n \n+// Return false if obj's monitor is held by the current thread\n+bool\n+_Jv_ObjectCheckMonitor (jobject obj)\n+{\n+#ifdef JV_LINKER_CANNOT_8BYTE_ALIGN_STATICS\n+  obj_addr_t addr = (obj_addr_t)obj & ~((obj_addr_t)FLAGS);\n+#else\n+  obj_addr_t addr = (obj_addr_t)obj;\n+#endif\n+  obj_addr_t address;\n+  unsigned hash = JV_SYNC_HASH(addr);\n+  hash_entry * he = light_locks + hash;\n+  _Jv_ThreadId_t self = _Jv_ThreadSelf();\n+\n+  JvAssert(!(addr & FLAGS));\n+retry:\n+  // Acquire the hash table entry lock\n+  address = ((he -> address) & ~LOCKED);\n+  if (!compare_and_swap(&(he -> address), address, address | LOCKED))\n+    {\n+      wait_unlocked(he);\n+      goto retry;\n+    }\n+\n+  bool not_mine;\n+\n+  if (!(address & ~FLAGS))\n+    not_mine = true;\n+  else if ((address & ~FLAGS) == addr)\n+    not_mine = (he -> light_thr_id != self);\n+  else\n+    {\n+      heavy_lock* hl = find_heavy(addr, he);\n+      not_mine = hl ? (hl->si.mutex.owner != self) : true;\n+    }\n+\n+  release_set(&(he -> address), address);\t// unlock hash entry\n+  return not_mine;\n+}\n+\n // The rest of these are moderately thin veneers on _Jv_Cond ops.\n // The current version of Notify might be able to make the pthread\n // call AFTER releasing the lock, thus saving some context switches??"}, {"sha": "235f950c2c1da2ed21bd170cc1f6d5beb5f4b491", "filename": "libjava/java/lang/natThread.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64/libjava%2Fjava%2Flang%2FnatThread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64/libjava%2Fjava%2Flang%2FnatThread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatThread.cc?ref=16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64", "patch": "@@ -107,6 +107,14 @@ java::lang::Thread::destroy (void)\n     (JvNewStringLatin1 (\"Thread.destroy unimplemented\"));\n }\n \n+jboolean\n+java::lang::Thread::holdsLock (jobject obj)\n+{\n+  if (!obj)\n+    throw new NullPointerException;\n+  return !_Jv_ObjectCheckMonitor (obj);\n+}\n+\n void\n java::lang::Thread::interrupt (void)\n {"}, {"sha": "03ae4535a05e21196d6588a531f76405a12afff1", "filename": "libjava/posix-threads.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64/libjava%2Fposix-threads.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64/libjava%2Fposix-threads.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fposix-threads.cc?ref=16a10fb6fc9e64b1eb38c85630ef7e20ca7ade64", "patch": "@@ -193,7 +193,7 @@ _Jv_CondWait (_Jv_ConditionVariable_t *cv, _Jv_Mutex_t *mu,\n int\n _Jv_CondNotify (_Jv_ConditionVariable_t *cv, _Jv_Mutex_t *mu)\n {\n-  if (_Jv_PthreadCheckMonitor (mu))\n+  if (_Jv_MutexCheckMonitor (mu))\n     return _JV_NOT_OWNER;\n \n   _Jv_Thread_t *target;\n@@ -232,7 +232,7 @@ _Jv_CondNotify (_Jv_ConditionVariable_t *cv, _Jv_Mutex_t *mu)\n int\n _Jv_CondNotifyAll (_Jv_ConditionVariable_t *cv, _Jv_Mutex_t *mu)\n {\n-  if (_Jv_PthreadCheckMonitor (mu))\n+  if (_Jv_MutexCheckMonitor (mu))\n     return _JV_NOT_OWNER;\n \n   _Jv_Thread_t *target;"}]}