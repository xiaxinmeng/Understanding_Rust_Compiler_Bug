{"sha": "8b2e6da73956c8f12a4a150b5b9dcf8f1b5656ba", "node_id": "C_kwDOANBUbNoAKDhiMmU2ZGE3Mzk1NmM4ZjEyYTRhMTUwYjViOWRjZjhmMWI1NjU2YmE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-26T18:24:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-26T18:24:36Z"}, "message": "Merge #1174\n\n1174: Remove default location for `SimplePath`s r=CohenArthur a=CohenArthur\n\nThis removes the default argument for the locus of `SimplePath`s. Addresses #1159 \r\n\r\nThere are a lot of places in the code where it is not possible to insert a \"correct\" location for these `SimplePath`s: namely, when creating the use statement for the standard library's prelude, or when creating the `SimplePath`s of attributes. I've left a few FIXMEs in these cases because I'm unsure about the proper course of action.\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "ba0571c39f01d9cda7a71fa3802481659dd97e6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba0571c39f01d9cda7a71fa3802481659dd97e6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b2e6da73956c8f12a4a150b5b9dcf8f1b5656ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiaDjkCRBK7hj4Ov3rIwAABBoIAFJT3dmrGrS5tP+vLXlQEjM1\n8xuI+llL/V3J5SFe+wryMdWcUrwlqXiCKy/fOvrvyu3gpXiRVowN1QooYtEplAsO\n+uZYiPg+QczNBSfcI/beZbn/4SCWevoRBoR1yQ7i+/j5vbkEwfS8v+WcUGcQO1rp\nFHIJsfsiLEiJHbbpP4tzpfa3Heo1yzaVrwhSOgOpeeAkDvIDX8N6cKijsvRIVZAK\nrPtp2gpDO8N/6Nu7kSU6agYqw76uYfyEMwKHaUgnMZduYebXNXleumz5oqJKh4ZG\nDu7XdAyL5xdSog04iFXsxPsyKg2OxZb+eVD6Uicluc3szEZuyrNqLaBTte1OMyI=\n=C1r9\n-----END PGP SIGNATURE-----\n", "payload": "tree ba0571c39f01d9cda7a71fa3802481659dd97e6c\nparent 0ce3b067a84cd4a44fbfcb64a1669e18ed29b7f0\nparent b3d85dc842f16513a807f404f061dbe8edb9465c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1650997476 +0000\ncommitter GitHub <noreply@github.com> 1650997476 +0000\n\nMerge #1174\n\n1174: Remove default location for `SimplePath`s r=CohenArthur a=CohenArthur\n\nThis removes the default argument for the locus of `SimplePath`s. Addresses #1159 \r\n\r\nThere are a lot of places in the code where it is not possible to insert a \"correct\" location for these `SimplePath`s: namely, when creating the use statement for the standard library's prelude, or when creating the `SimplePath`s of attributes. I've left a few FIXMEs in these cases because I'm unsure about the proper course of action.\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b2e6da73956c8f12a4a150b5b9dcf8f1b5656ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b2e6da73956c8f12a4a150b5b9dcf8f1b5656ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b2e6da73956c8f12a4a150b5b9dcf8f1b5656ba/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ce3b067a84cd4a44fbfcb64a1669e18ed29b7f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ce3b067a84cd4a44fbfcb64a1669e18ed29b7f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ce3b067a84cd4a44fbfcb64a1669e18ed29b7f0"}, {"sha": "b3d85dc842f16513a807f404f061dbe8edb9465c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d85dc842f16513a807f404f061dbe8edb9465c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3d85dc842f16513a807f404f061dbe8edb9465c"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "71cbb372d921aa2155d80ee2ed72570cfb5a13ce", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2e6da73956c8f12a4a150b5b9dcf8f1b5656ba/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2e6da73956c8f12a4a150b5b9dcf8f1b5656ba/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=8b2e6da73956c8f12a4a150b5b9dcf8f1b5656ba", "patch": "@@ -4695,7 +4695,10 @@ MetaNameValueStr::to_attribute () const\n {\n   LiteralExpr lit_expr (str, Literal::LitType::STRING,\n \t\t\tPrimitiveCoreType::CORETYPE_UNKNOWN, {}, Location ());\n-  return Attribute (SimplePath::from_str (ident),\n+  // FIXME: What location do we put here? Is the literal above supposed to have\n+  // an empty location as well?\n+  // Should MetaNameValueStr keep a location?\n+  return Attribute (SimplePath::from_str (ident, Location ()),\n \t\t    std::unique_ptr<AttrInputLiteral> (\n \t\t      new AttrInputLiteral (std::move (lit_expr))));\n }\n@@ -4722,7 +4725,8 @@ MetaItemSeq::to_attribute () const\n Attribute\n MetaWord::to_attribute () const\n {\n-  return Attribute (SimplePath::from_str (ident), nullptr);\n+  // FIXME: How do we get a location here?\n+  return Attribute (SimplePath::from_str (ident, Location ()), nullptr);\n }\n \n Attribute\n@@ -4740,7 +4744,8 @@ MetaListPaths::to_attribute () const\n \n   std::unique_ptr<AttrInputMetaItemContainer> new_seq_container (\n     new AttrInputMetaItemContainer (std::move (new_seq)));\n-  return Attribute (SimplePath::from_str (ident),\n+  // FIXME: How do we get a location here?\n+  return Attribute (SimplePath::from_str (ident, Location ()),\n \t\t    std::move (new_seq_container));\n }\n \n@@ -4755,7 +4760,8 @@ MetaListNameValueStr::to_attribute () const\n \n   std::unique_ptr<AttrInputMetaItemContainer> new_seq_container (\n     new AttrInputMetaItemContainer (std::move (new_seq)));\n-  return Attribute (SimplePath::from_str (ident),\n+  // FIXME: How do we get a location here?\n+  return Attribute (SimplePath::from_str (ident, Location ()),\n \t\t    std::move (new_seq_container));\n }\n "}, {"sha": "f2b14ab337f1d0b1c2dfde9bfa451273648a543d", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2e6da73956c8f12a4a150b5b9dcf8f1b5656ba/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2e6da73956c8f12a4a150b5b9dcf8f1b5656ba/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=8b2e6da73956c8f12a4a150b5b9dcf8f1b5656ba", "patch": "@@ -330,7 +330,7 @@ class SimplePathSegment : public PathSegment\n   // only allow identifiers, \"super\", \"self\", \"crate\", or \"$crate\"\n public:\n   // TODO: put checks in constructor to enforce this rule?\n-  SimplePathSegment (std::string segment_name, Location locus = Location ())\n+  SimplePathSegment (std::string segment_name, Location locus)\n     : segment_name (std::move (segment_name)), locus (locus),\n       node_id (Analysis::Mappings::get ()->get_next_node_id ())\n   {}\n@@ -342,7 +342,7 @@ class SimplePathSegment : public PathSegment\n   // Creates an error SimplePathSegment\n   static SimplePathSegment create_error ()\n   {\n-    return SimplePathSegment (std::string (\"\"));\n+    return SimplePathSegment (std::string (\"\"), Location ());\n   }\n \n   std::string as_string () const override;\n@@ -398,10 +398,10 @@ class SimplePath\n    * ensure that this is a valid identifier in path, so be careful. Also, this\n    * will have no location data.\n    * TODO have checks? */\n-  static SimplePath from_str (std::string str)\n+  static SimplePath from_str (std::string str, Location locus)\n   {\n     std::vector<AST::SimplePathSegment> single_segments\n-      = {AST::SimplePathSegment (std::move (str))};\n+      = {AST::SimplePathSegment (std::move (str), locus)};\n     return SimplePath (std::move (single_segments));\n   }\n };"}, {"sha": "630eded1291a4a8be16998da65f7fee4c04294b1", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2e6da73956c8f12a4a150b5b9dcf8f1b5656ba/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2e6da73956c8f12a4a150b5b9dcf8f1b5656ba/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=8b2e6da73956c8f12a4a150b5b9dcf8f1b5656ba", "patch": "@@ -44,12 +44,13 @@ translate_visibility (const AST::Visibility &vis)\n     case AST::Visibility::PUB_SELF:\n       return Visibility (Visibility::VisType::PRIVATE);\n     // Desugar pub(crate) into pub(in crate) and so on\n+    // FIXME: How do we get a location for the SimplePath here?\n     case AST::Visibility::PUB_CRATE:\n       return Visibility (Visibility::PUBLIC,\n-\t\t\t AST::SimplePath::from_str (\"crate\"));\n+\t\t\t AST::SimplePath::from_str (\"crate\", Location ()));\n     case AST::Visibility::PUB_SUPER:\n       return Visibility (Visibility::PUBLIC,\n-\t\t\t AST::SimplePath::from_str (\"super\"));\n+\t\t\t AST::SimplePath::from_str (\"super\", Location ()));\n     case AST::Visibility::PUB_IN_PATH:\n       return Visibility (Visibility::VisType::PUBLIC, vis.get_path ());\n       break;"}, {"sha": "887645954de763862beb1ac2c04cdf11f4c78d06", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2e6da73956c8f12a4a150b5b9dcf8f1b5656ba/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2e6da73956c8f12a4a150b5b9dcf8f1b5656ba/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=8b2e6da73956c8f12a4a150b5b9dcf8f1b5656ba", "patch": "@@ -870,7 +870,8 @@ Session::injection (AST::Crate &crate)\n     {\n       // create \"macro use\" attribute for use on extern crate item to enable\n       // loading macros from it\n-      AST::Attribute attr (AST::SimplePath::from_str (\"macro_use\"), nullptr);\n+      AST::Attribute attr (AST::SimplePath::from_str (\"macro_use\", Location ()),\n+\t\t\t   nullptr);\n \n       // create \"extern crate\" item with the name\n       std::unique_ptr<AST::ExternCrate> extern_crate (\n@@ -885,13 +886,15 @@ Session::injection (AST::Crate &crate)\n   // create use tree path\n   // prelude is injected_crate_name\n   std::vector<AST::SimplePathSegment> segments\n-    = {AST::SimplePathSegment (injected_crate_name),\n-       AST::SimplePathSegment (\"prelude\"), AST::SimplePathSegment (\"v1\")};\n+    = {AST::SimplePathSegment (injected_crate_name, Location ()),\n+       AST::SimplePathSegment (\"prelude\", Location ()),\n+       AST::SimplePathSegment (\"v1\", Location ())};\n   // create use tree and decl\n   std::unique_ptr<AST::UseTreeGlob> use_tree (\n     new AST::UseTreeGlob (AST::UseTreeGlob::PATH_PREFIXED,\n \t\t\t  AST::SimplePath (std::move (segments)), Location ()));\n-  AST::Attribute prelude_attr (AST::SimplePath::from_str (\"prelude_import\"),\n+  AST::Attribute prelude_attr (AST::SimplePath::from_str (\"prelude_import\",\n+\t\t\t\t\t\t\t  Location ()),\n \t\t\t       nullptr);\n   std::unique_ptr<AST::UseDeclaration> use_decl (\n     new AST::UseDeclaration (std::move (use_tree),"}]}