{"sha": "4d7c874e2c64ebf7631049ace642d246843febae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ3Yzg3NGUyYzY0ZWJmNzYzMTA0OWFjZTY0MmQyNDY4NDNmZWJhZQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2021-04-28T14:00:01Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2021-04-29T07:55:15Z"}, "message": "[omp, simt] Fix expand_GOMP_SIMT_*\n\nWhen running the test-case included in this patch using an\nnvptx accelerator, it fails in execution.\n\nThe problem is that the expansion of GOMP_SIMT_XCHG_BFLY is optimized away\nduring pass_jump as \"trivially dead insns\".\n\nThis is caused by this code in expand_GOMP_SIMT_XCHG_BFLY:\n...\n  class expand_operand ops[3];\n  create_output_operand (&ops[0], target, mode);\n  ...\n  expand_insn (targetm.code_for_omp_simt_xchg_bfly, 3, ops);\n...\nwhich doesn't guarantee that target is assigned to by the expanded insn.\n\nF.i., if target is:\n...\n(gdb) call debug_rtx ( target )\n(subreg/s/u:QI (reg:SI 40 [ _61 ]) 0)\n...\nthen after expand_insn, we have:\n...\n(gdb) call debug_rtx ( ops[0].value )\n(reg:QI 57)\n...\n\nSee commit 3af3bec2e4d \"internal-fn: Avoid dropping the lhs of some\ncalls [PR94941]\" for a similar problem.\n\nFix this in the same way, by adding:\n...\n  if (!rtx_equal_p (target, ops[0].value))\n    emit_move_insn (target, ops[0].value);\n...\nwhere applicable in the expand_GOMP_SIMT_* functions.\n\nTested libgomp on x86_64 with nvptx accelerator.\n\ngcc/ChangeLog:\n\n2021-04-28  Tom de Vries  <tdevries@suse.de>\n\n\tPR target/100232\n\t* internal-fn.c (expand_GOMP_SIMT_ENTER_ALLOC)\n\t(expand_GOMP_SIMT_LAST_LANE, expand_GOMP_SIMT_ORDERED_PRED)\n\t(expand_GOMP_SIMT_VOTE_ANY, expand_GOMP_SIMT_XCHG_BFLY)\n\t(expand_GOMP_SIMT_XCHG_IDX): Ensure target is assigned to.", "tree": {"sha": "182db6db888838cfaa53ae9c89d0549eb3be4288", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/182db6db888838cfaa53ae9c89d0549eb3be4288"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d7c874e2c64ebf7631049ace642d246843febae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d7c874e2c64ebf7631049ace642d246843febae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d7c874e2c64ebf7631049ace642d246843febae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d7c874e2c64ebf7631049ace642d246843febae/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b58dc0b803057c0e6032e0d9bd92cd834f72c75c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b58dc0b803057c0e6032e0d9bd92cd834f72c75c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b58dc0b803057c0e6032e0d9bd92cd834f72c75c"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "d209a52f8235ccdb3a8ff49a6a23b440c660404c", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7c874e2c64ebf7631049ace642d246843febae/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7c874e2c64ebf7631049ace642d246843febae/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=4d7c874e2c64ebf7631049ace642d246843febae", "patch": "@@ -243,6 +243,8 @@ expand_GOMP_SIMT_ENTER_ALLOC (internal_fn, gcall *stmt)\n   create_input_operand (&ops[2], align, Pmode);\n   gcc_assert (targetm.have_omp_simt_enter ());\n   expand_insn (targetm.code_for_omp_simt_enter, 3, ops);\n+  if (!rtx_equal_p (target, ops[0].value))\n+    emit_move_insn (target, ops[0].value);\n }\n \n /* Deallocate per-lane storage and leave non-uniform execution region.  */\n@@ -300,6 +302,8 @@ expand_GOMP_SIMT_LAST_LANE (internal_fn, gcall *stmt)\n   create_input_operand (&ops[1], cond, mode);\n   gcc_assert (targetm.have_omp_simt_last_lane ());\n   expand_insn (targetm.code_for_omp_simt_last_lane, 2, ops);\n+  if (!rtx_equal_p (target, ops[0].value))\n+    emit_move_insn (target, ops[0].value);\n }\n \n /* Non-transparent predicate used in SIMT lowering of OpenMP \"ordered\".  */\n@@ -319,6 +323,8 @@ expand_GOMP_SIMT_ORDERED_PRED (internal_fn, gcall *stmt)\n   create_input_operand (&ops[1], ctr, mode);\n   gcc_assert (targetm.have_omp_simt_ordered ());\n   expand_insn (targetm.code_for_omp_simt_ordered, 2, ops);\n+  if (!rtx_equal_p (target, ops[0].value))\n+    emit_move_insn (target, ops[0].value);\n }\n \n /* \"Or\" boolean reduction across SIMT lanes: return non-zero in all lanes if\n@@ -339,6 +345,8 @@ expand_GOMP_SIMT_VOTE_ANY (internal_fn, gcall *stmt)\n   create_input_operand (&ops[1], cond, mode);\n   gcc_assert (targetm.have_omp_simt_vote_any ());\n   expand_insn (targetm.code_for_omp_simt_vote_any, 2, ops);\n+  if (!rtx_equal_p (target, ops[0].value))\n+    emit_move_insn (target, ops[0].value);\n }\n \n /* Exchange between SIMT lanes with a \"butterfly\" pattern: source lane index\n@@ -361,6 +369,8 @@ expand_GOMP_SIMT_XCHG_BFLY (internal_fn, gcall *stmt)\n   create_input_operand (&ops[2], idx, SImode);\n   gcc_assert (targetm.have_omp_simt_xchg_bfly ());\n   expand_insn (targetm.code_for_omp_simt_xchg_bfly, 3, ops);\n+  if (!rtx_equal_p (target, ops[0].value))\n+    emit_move_insn (target, ops[0].value);\n }\n \n /* Exchange between SIMT lanes according to given source lane index.  */\n@@ -382,6 +392,8 @@ expand_GOMP_SIMT_XCHG_IDX (internal_fn, gcall *stmt)\n   create_input_operand (&ops[2], idx, SImode);\n   gcc_assert (targetm.have_omp_simt_xchg_idx ());\n   expand_insn (targetm.code_for_omp_simt_xchg_idx, 3, ops);\n+  if (!rtx_equal_p (target, ops[0].value))\n+    emit_move_insn (target, ops[0].value);\n }\n \n /* This should get expanded in adjust_simduid_builtins.  */"}, {"sha": "46b1cfc5b200e2f14237b654b2bcfee41f2765c3", "filename": "libgomp/testsuite/libgomp.c/target-43.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7c874e2c64ebf7631049ace642d246843febae/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-43.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7c874e2c64ebf7631049ace642d246843febae/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-43.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-43.c?ref=4d7c874e2c64ebf7631049ace642d246843febae", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+#include <stdlib.h>\n+\n+#define N 32\n+#define TYPE char\n+\n+int\n+main (void)\n+{\n+  TYPE result = 1;\n+  TYPE a[N];\n+  for (int x = 0; x < N; ++x)\n+    a[x] = 1;\n+\n+#pragma omp target map(tofrom: result) map(to:a)\n+#pragma omp for simd reduction(&&:result)\n+  for (int x = 0; x < N; ++x)\n+    result = result && a[x];\n+\n+  if (result != 1)\n+    abort ();\n+\n+  return 0;\n+}"}]}