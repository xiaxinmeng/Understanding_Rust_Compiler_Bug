{"sha": "aa353bd9a03b0d5ba92efe082b625d6c5ed6a79d", "node_id": "C_kwDOANBUbNoAKGFhMzUzYmQ5YTAzYjBkNWJhOTJlZmUwODJiNjI1ZDZjNWVkNmE3OWQ", "commit": {"author": {"name": "Frolov Daniil", "email": "frolov.da@phystech.edu", "date": "2022-11-28T17:35:13Z"}, "committer": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2022-11-28T17:35:13Z"}, "message": "Support %b, %B for -Wformat-overflow (sprintf, snprintf)\n\ngcc/ChangeLog:\n\n\t* gimple-ssa-sprintf.cc (fmtresult::type_max_digits): Handle\n\tbase == 2.\n\t(tree_digits): Likewise.\n\t(format_integer): Likewise.\n\t(parse_directive): Add cases for %b and %B directives.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/Wformat-overflow1.c: New test.", "tree": {"sha": "4dbe427a099ba4da21cf80504853c622aa6d4933", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dbe427a099ba4da21cf80504853c622aa6d4933"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa353bd9a03b0d5ba92efe082b625d6c5ed6a79d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa353bd9a03b0d5ba92efe082b625d6c5ed6a79d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa353bd9a03b0d5ba92efe082b625d6c5ed6a79d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa353bd9a03b0d5ba92efe082b625d6c5ed6a79d/comments", "author": {"login": "Exactlywb", "id": 70260847, "node_id": "MDQ6VXNlcjcwMjYwODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/70260847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Exactlywb", "html_url": "https://github.com/Exactlywb", "followers_url": "https://api.github.com/users/Exactlywb/followers", "following_url": "https://api.github.com/users/Exactlywb/following{/other_user}", "gists_url": "https://api.github.com/users/Exactlywb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Exactlywb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Exactlywb/subscriptions", "organizations_url": "https://api.github.com/users/Exactlywb/orgs", "repos_url": "https://api.github.com/users/Exactlywb/repos", "events_url": "https://api.github.com/users/Exactlywb/events{/privacy}", "received_events_url": "https://api.github.com/users/Exactlywb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75e562d2c4303d3918be9d1563284b0c580c5e45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75e562d2c4303d3918be9d1563284b0c580c5e45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75e562d2c4303d3918be9d1563284b0c580c5e45"}], "stats": {"total": 69, "additions": 53, "deletions": 16}, "files": [{"sha": "1dd9b0dc46b4728468d088b8a4d438076abf14f5", "filename": "gcc/gimple-ssa-sprintf.cc", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa353bd9a03b0d5ba92efe082b625d6c5ed6a79d/gcc%2Fgimple-ssa-sprintf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa353bd9a03b0d5ba92efe082b625d6c5ed6a79d/gcc%2Fgimple-ssa-sprintf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.cc?ref=aa353bd9a03b0d5ba92efe082b625d6c5ed6a79d", "patch": "@@ -535,6 +535,8 @@ fmtresult::type_max_digits (tree type, int base)\n   unsigned prec = TYPE_PRECISION (type);\n   switch (base)\n     {\n+    case 2:\n+      return prec;\n     case 8:\n       return (prec + 2) / 3;\n     case 10:\n@@ -804,9 +806,9 @@ ilog (unsigned HOST_WIDE_INT x, int base)\n /* Return the number of bytes resulting from converting into a string\n    the INTEGER_CST tree node X in BASE with a minimum of PREC digits.\n    PLUS indicates whether 1 for a plus sign should be added for positive\n-   numbers, and PREFIX whether the length of an octal ('O') or hexadecimal\n-   ('0x') prefix should be added for nonzero numbers.  Return -1 if X cannot\n-   be represented.  */\n+   numbers, and PREFIX whether the length of an octal ('0') or hexadecimal\n+   ('0x') or binary ('0b') prefix should be added for nonzero numbers.\n+   Return -1 if X cannot be represented.  */\n \n static HOST_WIDE_INT\n tree_digits (tree x, int base, HOST_WIDE_INT prec, bool plus, bool prefix)\n@@ -857,11 +859,11 @@ tree_digits (tree x, int base, HOST_WIDE_INT prec, bool plus, bool prefix)\n \n   /* Adjust a non-zero value for the base prefix, either hexadecimal,\n      or, unless precision has resulted in a leading zero, also octal.  */\n-  if (prefix && absval && (base == 16 || prec <= ndigs))\n+  if (prefix && absval)\n     {\n-      if (base == 8)\n+      if (base == 8 && prec <= ndigs)\n \tres += 1;\n-      else if (base == 16)\n+      else if (base == 16 || base == 2) /* 0x...(0X...) or 0b...(0B...).  */\n \tres += 2;\n     }\n \n@@ -1209,7 +1211,7 @@ format_integer (const directive &dir, tree arg, pointer_query &ptr_qry)\n \n   /* True when a conversion is preceded by a prefix indicating the base\n      of the argument (octal or hexadecimal).  */\n-  bool maybebase = dir.get_flag ('#');\n+  const bool maybebase = dir.get_flag ('#');\n \n   /* True when a signed conversion is preceded by a sign or space.  */\n   bool maybesign = false;\n@@ -1229,6 +1231,10 @@ format_integer (const directive &dir, tree arg, pointer_query &ptr_qry)\n     case 'u':\n       base = 10;\n       break;\n+    case 'b':\n+    case 'B':\n+      base = 2;\n+      break;\n     case 'o':\n       base = 8;\n       break;\n@@ -1240,6 +1246,8 @@ format_integer (const directive &dir, tree arg, pointer_query &ptr_qry)\n       gcc_unreachable ();\n     }\n \n+  const unsigned adj = (sign | maybebase) + (base == 2 || base == 16);\n+\n   /* The type of the \"formal\" argument expected by the directive.  */\n   tree dirtype = NULL_TREE;\n \n@@ -1350,11 +1358,9 @@ format_integer (const directive &dir, tree arg, pointer_query &ptr_qry)\n       res.range.unlikely = res.range.max;\n \n       /* Bump up the counters if WIDTH is greater than LEN.  */\n-      res.adjust_for_width_or_precision (dir.width, dirtype, base,\n-\t\t\t\t\t (sign | maybebase) + (base == 16));\n+      res.adjust_for_width_or_precision (dir.width, dirtype, base, adj);\n       /* Bump up the counters again if PRECision is greater still.  */\n-      res.adjust_for_width_or_precision (dir.prec, dirtype, base,\n-\t\t\t\t\t (sign | maybebase) + (base == 16));\n+      res.adjust_for_width_or_precision (dir.prec, dirtype, base, adj);\n \n       return res;\n     }\n@@ -1503,17 +1509,15 @@ format_integer (const directive &dir, tree arg, pointer_query &ptr_qry)\n \t  if (res.range.min == 1)\n \t    res.range.likely += base == 8 ? 1 : 2;\n \t  else if (res.range.min == 2\n-\t\t   && base == 16\n+\t\t   && (base == 16 || base == 2)\n \t\t   && (dir.width[0] == 2 || dir.prec[0] == 2))\n \t    ++res.range.likely;\n \t}\n     }\n \n   res.range.unlikely = res.range.max;\n-  res.adjust_for_width_or_precision (dir.width, dirtype, base,\n-\t\t\t\t     (sign | maybebase) + (base == 16));\n-  res.adjust_for_width_or_precision (dir.prec, dirtype, base,\n-\t\t\t\t     (sign | maybebase) + (base == 16));\n+  res.adjust_for_width_or_precision (dir.width, dirtype, base, adj);\n+  res.adjust_for_width_or_precision (dir.prec, dirtype, base, adj);\n \n   return res;\n }\n@@ -3725,6 +3729,11 @@ parse_directive (call_info &info,\n       dir.fmtfunc = format_integer;\n       break;\n \n+    case 'b':\n+    case 'B':\n+      dir.fmtfunc = format_integer;\n+      break;\n+\n     case 'p':\n       /* The %p output is implementation-defined.  It's possible\n \t to determine this format but due to extensions (especially"}, {"sha": "cf9766fae144afc2ca32e7661e879ef66572dafa", "filename": "gcc/testsuite/gcc.dg/Wformat-overflow1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa353bd9a03b0d5ba92efe082b625d6c5ed6a79d/gcc%2Ftestsuite%2Fgcc.dg%2FWformat-overflow1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa353bd9a03b0d5ba92efe082b625d6c5ed6a79d/gcc%2Ftestsuite%2Fgcc.dg%2FWformat-overflow1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWformat-overflow1.c?ref=aa353bd9a03b0d5ba92efe082b625d6c5ed6a79d", "patch": "@@ -0,0 +1,28 @@\n+/*\n+    { dg-do compile }\n+    { dg-options \"-Wformat-overflow -std=c2x\" }\n+*/\n+\n+extern int sprintf (char* restrict, const char* restrict, ...);\n+\n+void test_warn () {\n+\n+    int n = __INT_MAX__;\n+    char dst [5] = {0};\n+    sprintf (dst, \"%b\", n);  /* { dg-warning \"-Wformat-overflow\" } */\n+\n+    sprintf (dst, \"%#b\", n); /* { dg-warning \"-Wformat-overflow\" } */\n+\n+}\n+\n+void test_no_warn () {\n+\n+    char dst [5] = {0};\n+    int n = 8;\n+    sprintf (dst, \"%b\", n);\n+\n+    char another_dst [34] = {0};\n+    n = __INT_MAX__;\n+    sprintf (another_dst, \"%#b\", n);\n+\n+}"}]}