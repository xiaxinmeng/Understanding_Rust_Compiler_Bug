{"sha": "6a07010b774cb5a0b1790b857e69d3d8534eebd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmEwNzAxMGI3NzRjYjVhMGIxNzkwYjg1N2U2OWQzZDg1MzRlZWJkMg==", "commit": {"author": {"name": "Jos\u00e9 Rui Faustino de Sousa", "email": "jrfsousa@gmail.com", "date": "2020-06-11T11:24:55Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2020-06-11T11:25:59Z"}, "message": "Patch to Bug 94022 - Array slices of assumed-size arrays.\n\nMake sure that when passing array sections of assumed-size arrays to\nprocedures expecting an assumed-rank array the upper bound of the\nlast dimension of the array section does not get improperly reset\nto -1 to mark it has an assumed size array.\n\ngcc/fortran/ChangeLog:\n\n2020-06-11  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n\n\tPR fortran/94022\n\t* trans-expr.c (gfc_conv_procedure_call): In the case of\n\tassumed-size arrays ensure that the reference is to a full array.\n\ngcc/testsuite/ChangeLog:\n\n2020-06-11  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n\n\tPR fortran/94022\n\t* gfortran.dg/PR94022.f90: New test.", "tree": {"sha": "ddfeb25691fdab43f36f9aea41814c539064755e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddfeb25691fdab43f36f9aea41814c539064755e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a07010b774cb5a0b1790b857e69d3d8534eebd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a07010b774cb5a0b1790b857e69d3d8534eebd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a07010b774cb5a0b1790b857e69d3d8534eebd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a07010b774cb5a0b1790b857e69d3d8534eebd2/comments", "author": {"login": "jrfsousa", "id": 56982651, "node_id": "MDQ6VXNlcjU2OTgyNjUx", "avatar_url": "https://avatars.githubusercontent.com/u/56982651?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrfsousa", "html_url": "https://github.com/jrfsousa", "followers_url": "https://api.github.com/users/jrfsousa/followers", "following_url": "https://api.github.com/users/jrfsousa/following{/other_user}", "gists_url": "https://api.github.com/users/jrfsousa/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrfsousa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrfsousa/subscriptions", "organizations_url": "https://api.github.com/users/jrfsousa/orgs", "repos_url": "https://api.github.com/users/jrfsousa/repos", "events_url": "https://api.github.com/users/jrfsousa/events{/privacy}", "received_events_url": "https://api.github.com/users/jrfsousa/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "419c355c7a871513e1065b7cec32dd456eb4a0e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/419c355c7a871513e1065b7cec32dd456eb4a0e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/419c355c7a871513e1065b7cec32dd456eb4a0e5"}], "stats": {"total": 134, "additions": 134, "deletions": 0}, "files": [{"sha": "b7c568e90e65bebe6f5ccd7103894ed6b55bd706", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a07010b774cb5a0b1790b857e69d3d8534eebd2/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a07010b774cb5a0b1790b857e69d3d8534eebd2/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=6a07010b774cb5a0b1790b857e69d3d8534eebd2", "patch": "@@ -6244,6 +6244,8 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t      || gfc_expr_attr (e).allocatable)\n \t\t    set_dtype_for_unallocated (&parmse, e);\n \t\t  else if (e->expr_type == EXPR_VARIABLE\n+\t\t\t   && e->ref\n+\t\t\t   && e->ref->u.ar.type == AR_FULL\n \t\t\t   && e->symtree->n.sym->attr.dummy\n \t\t\t   && e->symtree->n.sym->as\n \t\t\t   && e->symtree->n.sym->as->type == AS_ASSUMED_SIZE)"}, {"sha": "63b7d904c26e7be103386f0580c8ebfcd2ae8b34", "filename": "gcc/testsuite/gfortran.dg/PR94022.f90", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a07010b774cb5a0b1790b857e69d3d8534eebd2/gcc%2Ftestsuite%2Fgfortran.dg%2FPR94022.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a07010b774cb5a0b1790b857e69d3d8534eebd2/gcc%2Ftestsuite%2Fgfortran.dg%2FPR94022.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FPR94022.f90?ref=6a07010b774cb5a0b1790b857e69d3d8534eebd2", "patch": "@@ -0,0 +1,132 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR94022\n+!\n+\n+function isasa_f(a) result(s)\n+  implicit none\n+\n+  integer, intent(in) :: a(..)\n+  \n+  logical :: s\n+  \n+  select rank(a)\n+  rank(*)\n+    s = .true.\n+  rank default\n+    s = .false.\n+  end select\n+  return\n+end function isasa_f\n+\n+function isasa_c(a) result(s) bind(c)\n+  use, intrinsic :: iso_c_binding, only: c_int, c_bool\n+\n+  implicit none\n+\n+  integer(kind=c_int), intent(in) :: a(..)\n+  \n+  logical(kind=c_bool) :: s\n+  \n+  select rank(a)\n+  rank(*)\n+    s = .true.\n+  rank default\n+    s = .false.\n+  end select\n+  return\n+end function isasa_c\n+\n+program isasa_p\n+\n+  implicit none\n+\n+  interface\n+    function isasa_f(a) result(s)\n+      implicit none\n+      integer, intent(in) :: a(..)\n+      logical             :: s\n+    end function isasa_f\n+    function isasa_c(a) result(s) bind(c)\n+      use, intrinsic :: iso_c_binding, only: c_int, c_bool\n+      implicit none\n+      integer(kind=c_int), intent(in) :: a(..)\n+      logical(kind=c_bool)            :: s\n+    end function isasa_c\n+  end interface\n+\n+  integer, parameter :: sz = 7\n+  integer, parameter :: lb = 3\n+  integer, parameter :: ub = 9\n+  integer, parameter :: ex = ub-lb+1\n+\n+  integer :: arr(sz,lb:ub)\n+\n+  arr = 1\n+  if (asaf_a(arr, lb+1, ub-1)) stop 1\n+  if (asaf_p(arr, lb+1, ub-1)) stop 2\n+  if (asaf_a(arr, 2, ex-1))    stop 3\n+  if (asaf_p(arr, 2, ex-1))    stop 4\n+  if (asac_a(arr, lb+1, ub-1)) stop 5\n+  if (asac_p(arr, lb+1, ub-1)) stop 6\n+  if (asac_a(arr, 2, ex-1))    stop 7\n+  if (asac_p(arr, 2, ex-1))    stop 8\n+  \n+  stop\n+\n+contains\n+\n+  function asaf_a(a, lb, ub) result(s)\n+    integer, intent(in) :: lb\n+    integer, target, intent(in) :: a(sz,lb:*)\n+    integer, intent(in) :: ub\n+\n+    logical :: s\n+\n+    s = isasa_f(a(:,lb:ub))\n+    return\n+  end function asaf_a\n+\n+  function asaf_p(a, lb, ub) result(s)\n+    integer,         intent(in) :: lb\n+    integer, target, intent(in) :: a(sz,lb:*)\n+    integer,         intent(in) :: ub\n+\n+    logical :: s\n+\n+    integer, pointer :: p(:,:)\n+\n+    p => a(:,lb:ub)\n+    s = isasa_f(p)\n+    return\n+  end function asaf_p\n+\n+  function asac_a(a, lb, ub) result(s)\n+    integer, intent(in) :: lb\n+    integer, target, intent(in) :: a(sz,lb:*)\n+    integer, intent(in) :: ub\n+\n+    logical :: s\n+\n+    s = logical(isasa_c(a(:,lb:ub)))\n+    return\n+  end function asac_a\n+\n+  function asac_p(a, lb, ub) result(s)\n+    integer,         intent(in) :: lb\n+    integer, target, intent(in) :: a(sz,lb:*)\n+    integer,         intent(in) :: ub\n+\n+    logical :: s\n+\n+    integer, pointer :: p(:,:)\n+\n+    p => a(:,lb:ub)\n+    s = logical(isasa_c(p))\n+    return\n+  end function asac_p\n+\n+end program isasa_p\n+\n+\n+  "}]}