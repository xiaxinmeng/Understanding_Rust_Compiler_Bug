{"sha": "c05977599ac4c3dd31db05744ea89dc2428718c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA1OTc3NTk5YWM0YzNkZDMxZGIwNTc0NGVhODlkYzI0Mjg3MThjNA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2016-06-23T16:30:43Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2016-06-23T16:30:43Z"}, "message": "i386: Access external function via GOT slot for -fno-plt\n\ni386 psABI has been updated to clarify that R_386_GOT32X and R_386_GOT32\nrelocations can be used to access GOT without base register when PIC is\ndisabled:\n\nhttps://groups.google.com/forum/#!topic/ia32-abi/awsRSvJOJfs\n\n32-bit x86 assembler and linker from binutils 2.26.1 and 2.27 support\n\ncall/jmp *_start@GOT\ncmpl $0, bar@GOT\n\nfor both normal and IFUNC functions.  We check if 32-bit x86 assembler\nand linker have the fix for:\n\nhttps://sourceware.org/bugzilla/show_bug.cgi?id=20244\n\nbefore accessing external function via GOT slot for -fno-plt in both PIC\nand non-PIC modes.\n\n\tPR target/66232\n\tPR target/67400\n\t* configure.ac (as_ix86_tls_ldm_opt): Renamed to ...\n\t(as_ix86_gas_32_opt): This.\n\t(ld_ix86_tls_ldm_opt): Renamed to ...\n\t(ld_ix86_gld_32_opt): This.\n\t(R_386_TLS_LDM reloc): Updated.\n\t(R_386_GOT32X reloc): New assembler/linker check.\n\t(HAVE_AS_IX86_GOT32X): New.  Defined to 1 if 32-bit assembler and\n\tlinker support \"jmp *_start@GOT\" and \"cmpl $0, bar@GOT\".  Otherise,\n\tdefined to 0.\n\t* config.in: Regenerated.\n\t* configure: Likewise.\n\t* config/i386/i386.c (ix86_force_load_from_GOT_p): Return\n\ttrue if HAVE_AS_IX86_GOT32X is 1 in 32-bit mode.\n\t(ix86_legitimate_address_p): Allow UNSPEC_GOT for -fno-plt\n\tif ix86_force_load_from_GOT_p returns true.\n\t(ix86_print_operand_address_as): Also support UNSPEC_GOT if\n\tix86_force_load_from_GOT_p returns true.\n\t(ix86_expand_move): Generate UNSPEC_GOT in 32-bit mode to load\n\tthe external function address via the GOT slot.\n\t(ix86_nopic_noplt_attribute_p): Check both TARGET_64BIT and\n\tHAVE_AS_IX86_GOT32X before returning false.\n\t(ix86_output_call_insn): Generate \"%!jmp/call\\t*%p0@GOT\" in\n\t32-bit mode if ix86_nopic_noplt_attribute_p returns true.\n\ngcc/testsuite/\n\n\tPR target/66232\n\tPR target/67400\n\t* gcc.target/i386/pr66232-14.c: New file.\n\t* gcc.target/i386/pr66232-15.c: Likewise.\n\t* gcc.target/i386/pr66232-16.c: Likewise.\n\t* gcc.target/i386/pr66232-17.c: Likewise.\n\t* gcc.target/i386/pr67400-1.c: Don't disable for ia32.  Scan for\n\tia32 if R_386_GOT32X relocation is supported.\n\t* gcc.target/i386/pr67400-2.c: Likewise.\n\t* gcc.target/i386/pr67400-3.c: Likewise.\n\t* gcc.target/i386/pr67400-4.c: Likewise.\n\t* gcc.target/i386/pr67400-6.c: Likewise.\n\t* gcc.target/i386/pr67400-7.c: Likewise.\n\t* lib/target-supports.exp (check_effective_target_got32x_reloc):\n\tNew.\n\nFrom-SVN: r237736", "tree": {"sha": "b69135bb367453ba3dfca8641a5f27c9cdc26160", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b69135bb367453ba3dfca8641a5f27c9cdc26160"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c05977599ac4c3dd31db05744ea89dc2428718c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c05977599ac4c3dd31db05744ea89dc2428718c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c05977599ac4c3dd31db05744ea89dc2428718c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c05977599ac4c3dd31db05744ea89dc2428718c4/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5b0e27a724e8ddc12065fa1d0848ae7c2495290e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b0e27a724e8ddc12065fa1d0848ae7c2495290e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b0e27a724e8ddc12065fa1d0848ae7c2495290e"}], "stats": {"total": 349, "additions": 308, "deletions": 41}, "files": [{"sha": "c36062eb6172eb63473dd1a36668491682c36804", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c05977599ac4c3dd31db05744ea89dc2428718c4", "patch": "@@ -1,3 +1,31 @@\n+2016-06-23  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/66232\n+\tPR target/67400\n+\t* configure.ac (as_ix86_tls_ldm_opt): Renamed to ...\n+\t(as_ix86_gas_32_opt): This.\n+\t(ld_ix86_tls_ldm_opt): Renamed to ...\n+\t(ld_ix86_gld_32_opt): This.\n+\t(R_386_TLS_LDM reloc): Updated.\n+\t(R_386_GOT32X reloc): New assembler/linker check.\n+\t(HAVE_AS_IX86_GOT32X): New.  Defined to 1 if 32-bit assembler and\n+\tlinker support \"jmp *_start@GOT\" and \"cmpl $0, bar@GOT\".  Otherise,\n+\tdefined to 0.\n+\t* config.in: Regenerated.\n+\t* configure: Likewise.\n+\t* config/i386/i386.c (ix86_force_load_from_GOT_p): Return\n+\ttrue if HAVE_AS_IX86_GOT32X is 1 in 32-bit mode.\n+\t(ix86_legitimate_address_p): Allow UNSPEC_GOT for -fno-plt\n+\tif ix86_force_load_from_GOT_p returns true.\n+\t(ix86_print_operand_address_as): Also support UNSPEC_GOT if\n+\tix86_force_load_from_GOT_p returns true.\n+\t(ix86_expand_move): Generate UNSPEC_GOT in 32-bit mode to load\n+\tthe external function address via the GOT slot.\n+\t(ix86_nopic_noplt_attribute_p): Check both TARGET_64BIT and\n+\tHAVE_AS_IX86_GOT32X before returning false.\n+\t(ix86_output_call_insn): Generate \"%!jmp/call\\t*%p0@GOT\" in\n+\t32-bit mode if ix86_nopic_noplt_attribute_p returns true.\n+\n 2016-06-23  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-inline.c (remap_decl): Preserve DECL_ORIGINAL_TYPE invariant."}, {"sha": "5f801761d2c1a8d2fed86620b4f723f7b650c510", "filename": "gcc/config.in", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=c05977599ac4c3dd31db05744ea89dc2428718c4", "patch": "@@ -425,6 +425,12 @@\n #endif\n \n \n+/* Define 0/1 if your assembler and linker support @GOT. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_IX86_GOT32X\n+#endif\n+\n+\n /* Define if your assembler supports HLE prefixes. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_IX86_HLE\n@@ -628,7 +634,8 @@\n #undef HAVE_AS_SPARC4\n #endif\n \n-/* Define if your assembler supports SPARC5 and VIS4.0 instructions. */\n+\n+/* Define if your assembler supports SPARC5 and VIS 4.0 instructions. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_SPARC5_VIS4\n #endif"}, {"sha": "f7944f994ebc2b6733d346f6ee66ab47939d0da5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 36, "deletions": 15, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c05977599ac4c3dd31db05744ea89dc2428718c4", "patch": "@@ -15125,7 +15125,8 @@ darwin_local_data_pic (rtx disp)\n bool\n ix86_force_load_from_GOT_p (rtx x)\n {\n-  return (TARGET_64BIT && !TARGET_PECOFF && !TARGET_MACHO\n+  return ((TARGET_64BIT || HAVE_AS_IX86_GOT32X)\n+\t  && !TARGET_PECOFF && !TARGET_MACHO\n \t  && !flag_plt && !flag_pic\n \t  && ix86_cmodel != CM_LARGE\n \t  && GET_CODE (x) == SYMBOL_REF\n@@ -15602,10 +15603,16 @@ ix86_legitimate_address_p (machine_mode, rtx addr, bool strict)\n \t  && XINT (XEXP (disp, 0), 1) != UNSPEC_MACHOPIC_OFFSET)\n \tswitch (XINT (XEXP (disp, 0), 1))\n \t  {\n-\t  /* Refuse GOTOFF and GOT in 64bit mode since it is always 64bit when\n-\t     used.  While ABI specify also 32bit relocations, we don't produce\n-\t     them at all and use IP relative instead.  */\n+\t  /* Refuse GOTOFF and GOT in 64bit mode since it is always 64bit\n+\t     when used.  While ABI specify also 32bit relocations, we\n+\t     don't produce them at all and use IP relative instead.\n+\t     Allow GOT in 32bit mode for both PIC and non-PIC if symbol\n+\t     should be loaded via GOT.  */\n \t  case UNSPEC_GOT:\n+\t    if (!TARGET_64BIT\n+\t\t&& ix86_force_load_from_GOT_p (XVECEXP (XEXP (disp, 0), 0, 0)))\n+\t      goto is_legitimate_pic;\n+\t    /* FALLTHRU */\n \t  case UNSPEC_GOTOFF:\n \t    gcc_assert (flag_pic);\n \t    if (!TARGET_64BIT)\n@@ -18194,7 +18201,8 @@ ix86_print_operand_address_as (FILE *file, rtx addr,\n       /* Load the external function address via the GOT slot to avoid PLT.  */\n       else if (GET_CODE (disp) == CONST\n \t       && GET_CODE (XEXP (disp, 0)) == UNSPEC\n-\t       && XINT (XEXP (disp, 0), 1) == UNSPEC_GOTPCREL\n+\t       && (XINT (XEXP (disp, 0), 1) == UNSPEC_GOTPCREL\n+\t\t   || XINT (XEXP (disp, 0), 1) == UNSPEC_GOT)\n \t       && ix86_force_load_from_GOT_p (XVECEXP (XEXP (disp, 0), 0, 0)))\n \toutput_pic_addr_const (file, disp, 0);\n       else if (flag_pic)\n@@ -19449,7 +19457,9 @@ ix86_expand_move (machine_mode mode, rtx operands[])\n \t{\n \t  /* Load the external function address via GOT slot to avoid PLT.  */\n \t  op1 = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, op1),\n-\t\t\t\tUNSPEC_GOTPCREL);\n+\t\t\t\t(TARGET_64BIT\n+\t\t\t\t ? UNSPEC_GOTPCREL\n+\t\t\t\t : UNSPEC_GOT));\n \t  op1 = gen_rtx_CONST (Pmode, op1);\n \t  op1 = gen_const_mem (Pmode, op1);\n \t  set_mem_alias_set (op1, ix86_GOT_alias_set ());\n@@ -28016,18 +28026,19 @@ ix86_expand_call (rtx retval, rtx fnaddr, rtx callarg1,\n   return call;\n }\n \n-/* Return true if the function being called was marked with attribute \"noplt\"\n-   or using -fno-plt and we are compiling for non-PIC and x86_64.  We need to\n-   handle the non-PIC case in the backend because there is no easy interface\n-   for the front-end to force non-PLT calls to use the GOT.  This is currently\n-   used only with 64-bit ELF targets to call the function marked \"noplt\"\n-   indirectly.  */\n+/* Return true if the function being called was marked with attribute\n+   \"noplt\" or using -fno-plt and we are compiling for non-PIC.  We need\n+   to handle the non-PIC case in the backend because there is no easy\n+   interface for the front-end to force non-PLT calls to use the GOT.\n+   This is currently used only with 64-bit or 32-bit GOT32X ELF targets\n+   to call the function marked \"noplt\" indirectly.  */\n \n static bool\n ix86_nopic_noplt_attribute_p (rtx call_op)\n {\n   if (flag_pic || ix86_cmodel == CM_LARGE\n-      || !TARGET_64BIT || TARGET_MACHO || TARGET_SEH || TARGET_PECOFF\n+      || !(TARGET_64BIT || HAVE_AS_IX86_GOT32X)\n+      || TARGET_MACHO || TARGET_SEH || TARGET_PECOFF\n       || SYMBOL_REF_LOCAL_P (call_op))\n     return false;\n \n@@ -28055,7 +28066,12 @@ ix86_output_call_insn (rtx_insn *insn, rtx call_op)\n       if (direct_p)\n \t{\n \t  if (ix86_nopic_noplt_attribute_p (call_op))\n-\t    xasm = \"%!jmp\\t{*%p0@GOTPCREL(%%rip)|[QWORD PTR %p0@GOTPCREL[rip]]}\";\n+\t    {\n+\t      if (TARGET_64BIT)\n+\t\txasm = \"%!jmp\\t{*%p0@GOTPCREL(%%rip)|[QWORD PTR %p0@GOTPCREL[rip]]}\";\n+\t      else\n+\t\txasm = \"%!jmp\\t{*%p0@GOT|[DWORD PTR %p0@GOT]}\";\n+\t    }\n \t  else\n \t    xasm = \"%!jmp\\t%P0\";\n \t}\n@@ -28103,7 +28119,12 @@ ix86_output_call_insn (rtx_insn *insn, rtx call_op)\n   if (direct_p)\n     {\n       if (ix86_nopic_noplt_attribute_p (call_op))\n-\txasm = \"%!call\\t{*%p0@GOTPCREL(%%rip)|[QWORD PTR %p0@GOTPCREL[rip]]}\";\n+\t{\n+\t  if (TARGET_64BIT)\n+\t    xasm = \"%!call\\t{*%p0@GOTPCREL(%%rip)|[QWORD PTR %p0@GOTPCREL[rip]]}\";\n+\t  else\n+\t    xasm = \"%!call\\t{*%p0@GOT|[DWORD PTR %p0@GOT]}\";\n+\t}\n       else\n \txasm = \"%!call\\t%P0\";\n     }"}, {"sha": "800ab269e24c00595b3f5414e00abae5e7aecd49", "filename": "gcc/configure", "status": "modified", "additions": 57, "deletions": 5, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=c05977599ac4c3dd31db05744ea89dc2428718c4", "patch": "@@ -25899,13 +25899,13 @@ _ACEOF\n \n     # Enforce 32-bit output with gas and gld.\n     if test x$gas = xyes; then\n-      as_ix86_tls_ldm_opt=\"--32\"\n+      as_ix86_gas_opt=\"--32\"\n     fi\n     if echo \"$ld_ver\" | grep GNU > /dev/null; then\n       if $gcc_cv_ld -V 2>/dev/null | grep elf_i386_sol2 > /dev/null; then\n-        ld_ix86_tls_ldm_opt=\"-melf_i386_sol2\"\n+        ld_ix86_gld_opt=\"-melf_i386_sol2\"\n       else\n-        ld_ix86_tls_ldm_opt=\"-melf_i386\"\n+        ld_ix86_gld_opt=\"-melf_i386\"\n       fi\n     fi\n     conftest_s='\n@@ -25927,15 +25927,15 @@ else\n   gcc_cv_as_ix86_tlsldm=no\n   if test x$gcc_cv_as != x; then\n     $as_echo \"$conftest_s\" > conftest.s\n-    if { ac_try='$gcc_cv_as $gcc_cv_as_flags $as_ix86_tls_ldm_opt -o conftest.o conftest.s >&5'\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags $as_ix86_gas_opt -o conftest.o conftest.s >&5'\n   { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n   $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n   test $ac_status = 0; }; }\n     then\n \tif test x$gcc_cv_ld != x && test x$gcc_cv_objdump != x \\\n-\t    && $gcc_cv_ld $ld_ix86_tls_ldm_opt -o conftest conftest.o $ld_tls_libs -lc > /dev/null 2>&1; then\n+\t    && $gcc_cv_ld $ld_ix86_gld_opt -o conftest conftest.o $ld_tls_libs -lc > /dev/null 2>&1; then\n \t   if $gcc_cv_objdump -d conftest 2>/dev/null | grep nop > /dev/null \\\n \t      || dis conftest 2>/dev/null | grep nop > /dev/null; then\n \t     gcc_cv_as_ix86_tlsldm=yes\n@@ -25958,6 +25958,58 @@ cat >>confdefs.h <<_ACEOF\n _ACEOF\n \n \n+    conftest_s='\n+\t.data\n+bar:\n+\t.byte 1\n+\t.text\n+\t.global _start\n+_start:\n+\t cmpl $0, bar@GOT\n+\t jmp *_start@GOT'\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for R_386_GOT32X reloc\" >&5\n+$as_echo_n \"checking assembler for R_386_GOT32X reloc... \" >&6; }\n+if test \"${gcc_cv_as_ix86_got32x+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_ix86_got32x=no\n+  if test x$gcc_cv_as != x; then\n+    $as_echo \"$conftest_s\" > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags $as_ix86_gas_opt -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tif test x$gcc_cv_ld != x && test x$gcc_cv_objdump != x \\\n+\t    && test x$gcc_cv_readelf != x \\\n+\t    && $gcc_cv_readelf --relocs --wide conftest.o 2>&1 \\\n+\t       | grep R_386_GOT32X > /dev/null 2>&1 \\\n+\t    && $gcc_cv_ld $ld_ix86_gld_opt -o conftest conftest.o > /dev/null 2>&1; then\n+\t   if $gcc_cv_objdump -dw conftest 2>&1 \\\n+\t      | grep 0xffffff > /dev/null 2>&1; then\n+\t     gcc_cv_as_ix86_got32x=no\n+\t   else\n+\t     gcc_cv_as_ix86_got32x=yes\n+\t   fi\n+\t fi\n+\t rm -f conftest\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_ix86_got32x\" >&5\n+$as_echo \"$gcc_cv_as_ix86_got32x\" >&6; }\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_AS_IX86_GOT32X `if test x\"$gcc_cv_as_ix86_got32x\" = xyes; then echo 1; else echo 0; fi`\n+_ACEOF\n+\n     ;;\n \n   ia64*-*-*)"}, {"sha": "db3c6036916df3185101e6d5b6e90652df8824f4", "filename": "gcc/configure.ac", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=c05977599ac4c3dd31db05744ea89dc2428718c4", "patch": "@@ -4164,13 +4164,13 @@ tls_ld:\n \n     # Enforce 32-bit output with gas and gld.\n     if test x$gas = xyes; then\n-      as_ix86_tls_ldm_opt=\"--32\"\n+      as_ix86_gas_opt=\"--32\"\n     fi\n     if echo \"$ld_ver\" | grep GNU > /dev/null; then\n       if $gcc_cv_ld -V 2>/dev/null | grep elf_i386_sol2 > /dev/null; then\n-        ld_ix86_tls_ldm_opt=\"-melf_i386_sol2\"\n+        ld_ix86_gld_opt=\"-melf_i386_sol2\"\n       else\n-        ld_ix86_tls_ldm_opt=\"-melf_i386\"\n+        ld_ix86_gld_opt=\"-melf_i386\"\n       fi\n     fi\n     conftest_s='\n@@ -4186,10 +4186,10 @@ _start:\n value:'\n     gcc_GAS_CHECK_FEATURE([R_386_TLS_LDM reloc],\n         gcc_cv_as_ix86_tlsldm,,\n-\t[$as_ix86_tls_ldm_opt],\n+\t[$as_ix86_gas_opt],\n \t[$conftest_s],\n \t[if test x$gcc_cv_ld != x && test x$gcc_cv_objdump != x \\\n-\t    && $gcc_cv_ld $ld_ix86_tls_ldm_opt -o conftest conftest.o $ld_tls_libs -lc > /dev/null 2>&1; then\n+\t    && $gcc_cv_ld $ld_ix86_gld_opt -o conftest conftest.o $ld_tls_libs -lc > /dev/null 2>&1; then\n \t   if $gcc_cv_objdump -d conftest 2>/dev/null | grep nop > /dev/null \\\n \t      || dis conftest 2>/dev/null | grep nop > /dev/null; then\n \t     gcc_cv_as_ix86_tlsldm=yes\n@@ -4200,6 +4200,35 @@ value:'\n       [`if test $gcc_cv_as_ix86_tlsldm = yes; then echo 1; else echo 0; fi`],\n       [Define to 1 if your assembler and linker support @tlsldm.])\n \n+    conftest_s='\n+\t.data\n+bar:\n+\t.byte 1\n+\t.text\n+\t.global _start\n+_start:\n+\t cmpl $0, bar@GOT\n+\t jmp *_start@GOT'\n+    gcc_GAS_CHECK_FEATURE([R_386_GOT32X reloc],\n+        gcc_cv_as_ix86_got32x,,\n+\t[$as_ix86_gas_opt],\n+\t[$conftest_s],\n+\t[if test x$gcc_cv_ld != x && test x$gcc_cv_objdump != x \\\n+\t    && test x$gcc_cv_readelf != x \\\n+\t    && $gcc_cv_readelf --relocs --wide conftest.o 2>&1 \\\n+\t       | grep R_386_GOT32X > /dev/null 2>&1 \\\n+\t    && $gcc_cv_ld $ld_ix86_gld_opt -o conftest conftest.o > /dev/null 2>&1; then\n+\t   if $gcc_cv_objdump -dw conftest 2>&1 \\\n+\t      | grep 0xffffff > /dev/null 2>&1; then\n+\t     gcc_cv_as_ix86_got32x=no\n+\t   else\n+\t     gcc_cv_as_ix86_got32x=yes\n+\t   fi\n+\t fi\n+\t rm -f conftest])\n+    AC_DEFINE_UNQUOTED(HAVE_AS_IX86_GOT32X,\n+      [`if test x\"$gcc_cv_as_ix86_got32x\" = xyes; then echo 1; else echo 0; fi`],\n+      [Define 0/1 if your assembler and linker support @GOT.])\n     ;;\n \n   ia64*-*-*)"}, {"sha": "95d90b6249e00e10c7dbe06088e3539cb782536c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c05977599ac4c3dd31db05744ea89dc2428718c4", "patch": "@@ -1,3 +1,21 @@\n+2016-06-23  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/66232\n+\tPR target/67400\n+\t* gcc.target/i386/pr66232-14.c: New file.\n+\t* gcc.target/i386/pr66232-15.c: Likewise.\n+\t* gcc.target/i386/pr66232-16.c: Likewise.\n+\t* gcc.target/i386/pr66232-17.c: Likewise.\n+\t* gcc.target/i386/pr67400-1.c: Don't disable for ia32.  Scan for\n+\tia32 if R_386_GOT32X relocation is supported.\n+\t* gcc.target/i386/pr67400-2.c: Likewise.\n+\t* gcc.target/i386/pr67400-3.c: Likewise.\n+\t* gcc.target/i386/pr67400-4.c: Likewise.\n+\t* gcc.target/i386/pr67400-6.c: Likewise.\n+\t* gcc.target/i386/pr67400-7.c: Likewise.\n+\t* lib/target-supports.exp (check_effective_target_got32x_reloc):\n+\tNew.\n+\n 2016-06-23  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/48852"}, {"sha": "804e5a5c304a14ceafca8e4e755a4085df48df12", "filename": "gcc/testsuite/gcc.target/i386/pr66232-14.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-14.c?ref=c05977599ac4c3dd31db05744ea89dc2428718c4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fno-pic -fno-plt\" } */\n+\n+extern void bar (void);\n+\n+void\n+foo (void)\n+{\n+  bar ();\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*.bar@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*.bar@GOT\" { target { ia32 && got32x_reloc } } } } */"}, {"sha": "3d2f6da46b0487a8b0027842770ea85f8e53f716", "filename": "gcc/testsuite/gcc.target/i386/pr66232-15.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-15.c?ref=c05977599ac4c3dd31db05744ea89dc2428718c4", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fno-pic -fno-plt\" } */\n+\n+extern void bar (void);\n+\n+int\n+foo (void)\n+{\n+  bar ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*.bar@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*.bar@GOT\" { target { ia32 && got32x_reloc } } } } */"}, {"sha": "d67f1a594dc803c6f97897f35e93bfc0b25c62b4", "filename": "gcc/testsuite/gcc.target/i386/pr66232-16.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-16.c?ref=c05977599ac4c3dd31db05744ea89dc2428718c4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fno-pic -fno-plt\" } */\n+\n+extern int bar (void);\n+\n+int\n+foo (void)\n+{\n+  return bar ();\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*.bar@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*.bar@GOT\" { target { ia32 && got32x_reloc } } } } */"}, {"sha": "bf6f37515a4bd0ad0440ab3bac5848305dd33bfa", "filename": "gcc/testsuite/gcc.target/i386/pr66232-17.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-17.c?ref=c05977599ac4c3dd31db05744ea89dc2428718c4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fno-pic -fno-plt\" } */\n+\n+extern int bar (void);\n+\n+int\n+foo (void)\n+{\n+  return bar () + 1;\n+}\n+\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*.bar@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*.bar@GOT\" { target { ia32 && got32x_reloc } } } } */"}, {"sha": "8af66503dbf5c3c733558322596e1cd29ab5431c", "filename": "gcc/testsuite/gcc.target/i386/pr67400-1.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-1.c?ref=c05977599ac4c3dd31db05744ea89dc2428718c4", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { *-*-linux* && { ! ia32 } } } } */\n+/* { dg-do compile { target *-*-linux* } } */\n /* { dg-options \"-O2 -fno-pic -fno-plt\" } */\n \n extern void bar (void);\n@@ -9,5 +9,7 @@ foo (void)\n   return &bar;\n }\n \n-/* { dg-final { scan-assembler \"mov\\(l|q\\)\\[ \\t\\]*bar@GOTPCREL\" } } */\n-/* { dg-final { scan-assembler-not \"\\(mov|lea\\)\\(l|q\\)\\[ \\t\\]*\\(\\\\\\$|\\)bar,\" } } */\n+/* { dg-final { scan-assembler \"mov\\(l|q\\)\\[ \\t\\]*bar@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"movl\\[ \\t\\]*bar@GOT,\" { target { ia32 && got32x_reloc } } } } */\n+/* { dg-final { scan-assembler-not \"\\(mov|lea\\)\\(l|q\\)\\[ \\t\\]*\\(\\\\\\$|\\)bar,\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"\\(mov|lea\\)l\\[ \\t\\]*\\(\\\\\\$|\\)bar,\" { target { ia32 && got32x_reloc } } } } */"}, {"sha": "23dd4bf45939240a94e0a519a83f4e4beb2c1e45", "filename": "gcc/testsuite/gcc.target/i386/pr67400-2.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-2.c?ref=c05977599ac4c3dd31db05744ea89dc2428718c4", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { *-*-linux* && { ! ia32 } } } } */\n+/* { dg-do compile { target *-*-linux* } } */\n /* { dg-options \"-O2 -fno-pic -fno-plt\" } */\n \n extern void bar (void);\n@@ -10,5 +10,7 @@ foo (void)\n   p = &bar;\n }\n \n-/* { dg-final { scan-assembler \"mov\\(l|q\\)\\[ \\t\\]*bar@GOTPCREL\" } } */\n-/* { dg-final { scan-assembler-not \"mov\\(l|q\\)\\[ \\t\\]*\\\\\\$bar,\" } } */\n+/* { dg-final { scan-assembler \"mov\\(l|q\\)\\[ \\t\\]*bar@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"movl\\[ \\t\\]*bar@GOT,\" { target { ia32 && got32x_reloc } } } } */\n+/* { dg-final { scan-assembler-not \"mov\\(l|q\\)\\[ \\t\\]*\\\\\\$bar,\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"mov\\(l|q\\)\\[ \\t\\]*\\\\\\$bar,\" { target { ia32 && got32x_reloc } } } } */"}, {"sha": "649c9809708c923fd9903547f4ba81c0ba2e4896", "filename": "gcc/testsuite/gcc.target/i386/pr67400-3.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-3.c?ref=c05977599ac4c3dd31db05744ea89dc2428718c4", "patch": "@@ -13,4 +13,5 @@ foo (void)\n }\n \n /* { dg-final { scan-assembler \"mov\\(l|q\\)\\[ \\t\\]*\\\\\\$bar,\" } } */\n-/* { dg-final { scan-assembler-not \"mov\\(l|q\\)\\[ \\t\\]*bar@GOTPCREL\" } } */\n+/* { dg-final { scan-assembler-not \"mov\\(l|q\\)\\[ \\t\\]*bar@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"movl\\[ \\t\\]*bar@GOT,\" { target { ia32 && got32x_reloc } } } } */"}, {"sha": "5f6883dbb54e3cdfcfc9d0e0a47fe0d2911e8535", "filename": "gcc/testsuite/gcc.target/i386/pr67400-4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-4.c?ref=c05977599ac4c3dd31db05744ea89dc2428718c4", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { *-*-linux* && { ! ia32 } } } } */\n+/* { dg-do compile { target *-*-linux* } } */\n /* { dg-options \"-O2 -fno-pic -fno-plt\" } */\n \n extern void bar (void) __attribute__ ((visibility (\"hidden\")));\n@@ -10,4 +10,5 @@ foo (void)\n }\n \n /* { dg-final { scan-assembler \"mov\\(l|q\\)\\[ \\t\\]*\\\\\\$bar,\" } } */\n-/* { dg-final { scan-assembler-not \"mov\\(l|q\\)\\[ \\t\\]*bar@GOTPCREL\" } } */\n+/* { dg-final { scan-assembler-not \"mov\\(l|q\\)\\[ \\t\\]*bar@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"movl\\[ \\t\\]*bar@GOT,\" { target { ia32 && got32x_reloc } } } } */"}, {"sha": "652add4d31aeb564e2eb010a3125b265e4c3698b", "filename": "gcc/testsuite/gcc.target/i386/pr67400-6.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-6.c?ref=c05977599ac4c3dd31db05744ea89dc2428718c4", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { *-*-linux* && { ! ia32 } } } } */\n+/* { dg-do compile { target *-*-linux* } } */\n /* { dg-options \"-O2 -fno-pic -fno-plt\" } */\n \n extern int bar (void);\n@@ -9,5 +9,7 @@ check (void *p)\n   return p != &bar;\n }\n \n-/* { dg-final { scan-assembler \"cmp\\(l|q\\)\\[ \\t\\]*.*bar@GOTPCREL\" } } */\n-/* { dg-final { scan-assembler-not \"mov\\(l|q\\)\\[ \\t\\]*\\\\\\$bar,\" } } */\n+/* { dg-final { scan-assembler \"cmp\\(l|q\\)\\[ \\t\\]*.*bar@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"movl\\[ \\t\\]*bar@GOT,\" { target { ia32 && got32x_reloc } } } } */\n+/* { dg-final { scan-assembler-not \"mov\\(l|q\\)\\[ \\t\\]*\\\\\\$bar,\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"mov\\(l|q\\)\\[ \\t\\]*\\\\\\$bar,\" { target { ia32 && got32x_reloc } } } } */"}, {"sha": "900e87a17f4e44eb56c7de317dfd34afeb7c6640", "filename": "gcc/testsuite/gcc.target/i386/pr67400-7.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-7.c?ref=c05977599ac4c3dd31db05744ea89dc2428718c4", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { *-*-linux* && { ! ia32 } } } } */\n+/* { dg-do compile { target *-*-linux* } } */\n /* { dg-options \"-O2 -fno-pic -fno-plt\" } */\n \n extern void bar (void);\n@@ -9,5 +9,5 @@ foo (void)\n   return &bar+1;\n }\n \n-/* { dg-final { scan-assembler \"mov\\(l|q\\)\\[ \\t\\]*bar@GOTPCREL\" } } */\n-/* { dg-final { scan-assembler-not \"\\(mov|lea\\)\\(l|q\\)\\[ \\t\\]*\\(\\\\\\$|\\)bar,\" } } */\n+/* { dg-final { scan-assembler \"mov\\(l|q\\)\\[ \\t\\]*bar@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"\\(mov|lea\\)\\(l|q\\)\\[ \\t\\]*\\(\\\\\\$|\\)bar,\" { target { ! ia32 } } } } */"}, {"sha": "6dd59e8c7d6bed3504bce0fb1e351541c28855ce", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05977599ac4c3dd31db05744ea89dc2428718c4/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=c05977599ac4c3dd31db05744ea89dc2428718c4", "patch": "@@ -7012,6 +7012,57 @@ proc check_effective_target_pie_copyreloc { } {\n     return $pie_copyreloc_available_saved\n }\n \n+# Return 1 if the x86 target supports R_386_GOT32X relocation, 0\n+# otherwise.  Cache the result.\n+\n+proc check_effective_target_got32x_reloc { } {\n+    global got32x_reloc_available_saved\n+    global tool\n+    global GCC_UNDER_TEST\n+\n+    if { !([istarget x86_64-*-*] || [istarget i?86-*-*]) } {\n+\treturn 0\n+    }\n+\n+    # Need auto-host.h to check linker support.\n+    if { ![file exists ../../auto-host.h ] } {\n+\treturn 0\n+    }\n+\n+    if [info exists got32x_reloc_available_saved] {\n+\tverbose \"check_effective_target_got32x_reloc returning saved $got32x_reloc_available_saved\" 2\n+    } else {\n+\t# Include the current process ID in the file names to prevent\n+\t# conflicts with invocations for multiple testsuites.\n+\n+\tset src got32x[pid].c\n+\tset obj got32x[pid].o\n+\n+\tset f [open $src \"w\"]\n+\tputs $f \"#include \\\"../../auto-host.h\\\"\"\n+\tputs $f \"#if HAVE_AS_IX86_GOT32X == 0\"\n+\tputs $f \"# error Assembler does not support R_386_GOT32X.\"\n+\tputs $f \"#endif\"\n+\tclose $f\n+\n+\tverbose \"check_effective_target_got32x_reloc compiling testfile $src\" 2\n+\tset lines [${tool}_target_compile $src $obj object \"\"]\n+\n+\tfile delete $src\n+\tfile delete $obj\n+\n+\tif [string match \"\" $lines] then {\n+\t    verbose \"check_effective_target_got32x_reloc testfile compilation passed\" 2\n+\t    set got32x_reloc_available_saved 1\n+\t} else {\n+\t    verbose \"check_effective_target_got32x_reloc testfile compilation failed\" 2\n+\t    set got32x_reloc_available_saved 0\n+\t}\n+    }\n+\n+    return $got32x_reloc_available_saved\n+}\n+\n # Return 1 if the target uses comdat groups.\n \n proc check_effective_target_comdat_group {} {"}]}