{"sha": "9c0c88ac0d8cccd4f48415d4a7d65ff92a2012e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMwYzg4YWMwZDhjY2NkNGY0ODQxNWQ0YTdkNjVmZjkyYTIwMTJlNQ==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2001-01-21T20:36:46Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2001-01-21T20:36:46Z"}, "message": "verify.c (VERIFICATION_ERROR_WITH_INDEX): New macro.\n\n\n\t* verify.c (VERIFICATION_ERROR_WITH_INDEX):  New macro.\n\t(verify_jvm_instructions):  Use it, for better error messages on loads.\n\nFrom-SVN: r39171", "tree": {"sha": "0bd4fbf768c171d6d034dd9eebbfde6a95fcf90f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bd4fbf768c171d6d034dd9eebbfde6a95fcf90f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c0c88ac0d8cccd4f48415d4a7d65ff92a2012e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0c88ac0d8cccd4f48415d4a7d65ff92a2012e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c0c88ac0d8cccd4f48415d4a7d65ff92a2012e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0c88ac0d8cccd4f48415d4a7d65ff92a2012e5/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "230cbd5f4f3408cfe60415ff3ac70d0496ec6080", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/230cbd5f4f3408cfe60415ff3ac70d0496ec6080", "html_url": "https://github.com/Rust-GCC/gccrs/commit/230cbd5f4f3408cfe60415ff3ac70d0496ec6080"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "b32238daf63802c89b679ecab53c4ff6d42c73f0", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0c88ac0d8cccd4f48415d4a7d65ff92a2012e5/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0c88ac0d8cccd4f48415d4a7d65ff92a2012e5/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=9c0c88ac0d8cccd4f48415d4a7d65ff92a2012e5", "patch": "@@ -1,3 +1,8 @@\n+2001-01-21  Per Bothner  <per@bothner.com>\n+\n+\t* verify.c (VERIFICATION_ERROR_WITH_INDEX):  New macro.\n+\t(verify_jvm_instructions):  Use it, for better error messages on loads.\n+\n 2001-01-21  Per Bothner  <per@bothner.com>\n \n \t* verify.c (merge_type_state):  Stil may have to merge even if"}, {"sha": "3f24391cecce3ce6ab6b851b86a871a594379ccb", "filename": "gcc/java/verify.c", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0c88ac0d8cccd4f48415d4a7d65ff92a2012e5/gcc%2Fjava%2Fverify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0c88ac0d8cccd4f48415d4a7d65ff92a2012e5/gcc%2Fjava%2Fverify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify.c?ref=9c0c88ac0d8cccd4f48415d4a7d65ff92a2012e5", "patch": "@@ -348,6 +348,9 @@ start_pc_cmp (xp, yp)\n #define VERIFICATION_ERROR(MESSAGE) \\\n   do { message = MESSAGE;  goto verify_error; } while (0)\n \n+#define VERIFICATION_ERROR_WITH_INDEX(MESSAGE) \\\n+  do { message = MESSAGE;  goto error_with_index; } while (0)\n+\n /* Recursive helper function to pop argument types during verifiation.\n    ARG_TYPES is the list of formal parameter types.\n    Return NULL on success and a freshly malloc'd error message on failure. */\n@@ -412,6 +415,7 @@ verify_jvm_instructions (jcf, byte_ops, length)\n   const char *message;\n   char *pmessage;\n   int i;\n+  int index;\n   register unsigned char *p;\n   struct eh_range *prev_eh_ranges = NULL_EH_RANGE;\n   struct eh_range *eh_ranges;\n@@ -476,7 +480,6 @@ verify_jvm_instructions (jcf, byte_ops, length)\n \n   for (PC = 0;;)\n     {\n-      int index;\n       tree type, tmp;\n       if (((PC != INVALID_PC\n \t   && instruction_bits [PC] & BCODE_TARGET) != 0)\n@@ -640,17 +643,22 @@ verify_jvm_instructions (jcf, byte_ops, length)\n \tif (index < 0\n \t    || (index + TYPE_IS_WIDE (type)\n \t\t>= DECL_MAX_LOCALS (current_function_decl)))\n-\t  VERIFICATION_ERROR (\"invalid local variable index in load\");\n+\t  VERIFICATION_ERROR_WITH_INDEX\n+\t    (\"invalid local variable index %d in load\");\n \ttmp = type_map[index];\n-\tif (tmp == TYPE_UNKNOWN || tmp == TYPE_SECOND\n+\tif (tmp == TYPE_UNKNOWN)\n+\t  VERIFICATION_ERROR_WITH_INDEX\n+\t    (\"loading local variable %d which has unknown type\");\n+\telse if (tmp == TYPE_SECOND\n \t    || (TYPE_IS_WIDE (type)\n \t\t&& type_map[index+1] != void_type_node)\n \t    || (type == ptr_type_node\n \t\t? TREE_CODE (tmp) != POINTER_TYPE\n \t\t: type == int_type_node\n \t\t? (! INTEGRAL_TYPE_P (tmp) || TYPE_PRECISION (tmp) > 32)\n \t\t: type != tmp))\n-\t  VERIFICATION_ERROR(\"invalid local variable type in load\");\n+\t  VERIFICATION_ERROR_WITH_INDEX\n+\t    (\"loading local variable %d which has invalid type\");\n \tPUSH_TYPE (tmp);\n \tgoto note_used;\n \tcase OPCODE_istore:  type = int_type_node;  goto general_store;\n@@ -687,7 +695,8 @@ verify_jvm_instructions (jcf, byte_ops, length)\n \t    || (index + TYPE_IS_WIDE (type)\n \t\t>= DECL_MAX_LOCALS (current_function_decl)))\n \t  {\n-\t    VERIFICATION_ERROR (\"invalid local variable index in store\");\n+\t    VERIFICATION_ERROR_WITH_INDEX\n+\t      (\"invalid local variable index %d in store\");\n \t    return 0;\n \t  }\n \tPOP_TYPE_CONV (type, type, NULL);\n@@ -1409,6 +1418,10 @@ verify_jvm_instructions (jcf, byte_ops, length)\n  bad_pc:\n   message = \"program counter out of range\";\n   goto verify_error;\n+ error_with_index:\n+  error (\"verification error at PC=%d\", oldpc);\n+  error (message, index);\n+  return 0;\n  verify_error:\n   error (\"verification error at PC=%d\", oldpc);\n   error (\"%s\", message);"}]}