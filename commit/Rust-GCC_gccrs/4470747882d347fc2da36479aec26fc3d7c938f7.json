{"sha": "4470747882d347fc2da36479aec26fc3d7c938f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ3MDc0Nzg4MmQzNDdmYzJkYTM2NDc5YWVjMjZmYzNkN2M5MzhmNw==", "commit": {"author": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2014-08-01T15:09:05Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2014-08-01T15:09:05Z"}, "message": "[AArch64][2/2] Add constrain to address offset in storewb_pair/loadwb_pair insns\n\nAdd a pridicate to check whether the const offset is valid.\nFor 32-bit variant: -256 <= offset <= 252\nFor 64-bit variant: -512 <= offset <= 504\n\n2014-07-29  Renlin Li  <renlin.li@arm.com>\n2014-07-29  Jiong Wang  <jiong.wang@arm.com>\n\ngcc/\n  * config/aarch64/aarch64.c (offset_7bit_signed_scaled_p): Rename to\n  aarch64_offset_7bit_signed_scaled_p, remove static and use it.\n  * config/aarch64/aarch64-protos.h (aarch64_offset_7bit_signed_scaled_p):\n  Declaration.\n  * config/aarch64/predicates.md (aarch64_mem_pair_offset): Define new\n  predicate.\n  * config/aarch64/aarch64.md (loadwb_pair, storewb_pair): Use\n  aarch64_mem_pair_offset.\n\nFrom-SVN: r213487", "tree": {"sha": "28aa443350207a6dd497ca7ddd64b7397dca31d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28aa443350207a6dd497ca7ddd64b7397dca31d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4470747882d347fc2da36479aec26fc3d7c938f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4470747882d347fc2da36479aec26fc3d7c938f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4470747882d347fc2da36479aec26fc3d7c938f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4470747882d347fc2da36479aec26fc3d7c938f7/comments", "author": null, "committer": null, "parents": [{"sha": "e244d1e6ccc655ce9239423d563c038dd316c2c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e244d1e6ccc655ce9239423d563c038dd316c2c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e244d1e6ccc655ce9239423d563c038dd316c2c9"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "3782894ce8509e1d823593cbc6e410aea01186d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4470747882d347fc2da36479aec26fc3d7c938f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4470747882d347fc2da36479aec26fc3d7c938f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4470747882d347fc2da36479aec26fc3d7c938f7", "patch": "@@ -1,3 +1,15 @@\n+2014-08-01  Renlin Li <renlin.li@arm.com>\n+2014-08-01  Jiong Wang <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64.c (offset_7bit_signed_scaled_p): Rename to\n+\taarch64_offset_7bit_signed_scaled_p, remove static and use it.\n+\t* config/aarch64/aarch64-protos.h (aarch64_offset_7bit_signed_scaled_p):\n+\tDeclaration.\n+\t* config/aarch64/predicates.md (aarch64_mem_pair_offset): Define new\n+\tpredicate.\n+\t* config/aarch64/aarch64.md (loadwb_pair, storewb_pair): Use\n+\taarch64_mem_pair_offset.\n+\n 2014-08-01  Jiong Wang <jiong.wang@arm.com>\n \n \t* config/aarch64/aarch64.md (loadwb_pair<GPI:mode>_<P:mode>): Fix"}, {"sha": "cca3bc96af9a2158544cd28b8dfe60cf1638afac", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4470747882d347fc2da36479aec26fc3d7c938f7/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4470747882d347fc2da36479aec26fc3d7c938f7/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=4470747882d347fc2da36479aec26fc3d7c938f7", "patch": "@@ -194,6 +194,7 @@ bool aarch64_modes_tieable_p (enum machine_mode mode1,\n bool aarch64_move_imm (HOST_WIDE_INT, enum machine_mode);\n bool aarch64_mov_operand_p (rtx, enum aarch64_symbol_context,\n \t\t\t    enum machine_mode);\n+bool aarch64_offset_7bit_signed_scaled_p (enum machine_mode, HOST_WIDE_INT);\n char *aarch64_output_scalar_simd_mov_immediate (rtx, enum machine_mode);\n char *aarch64_output_simd_mov_immediate (rtx, enum machine_mode, unsigned);\n bool aarch64_pad_arg_upward (enum machine_mode, const_tree);"}, {"sha": "d3f2adbc7011a511efd52199e1da60d84d39bec2", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4470747882d347fc2da36479aec26fc3d7c938f7/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4470747882d347fc2da36479aec26fc3d7c938f7/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=4470747882d347fc2da36479aec26fc3d7c938f7", "patch": "@@ -3193,8 +3193,8 @@ aarch64_classify_index (struct aarch64_address_info *info, rtx x,\n   return false;\n }\n \n-static inline bool\n-offset_7bit_signed_scaled_p (enum machine_mode mode, HOST_WIDE_INT offset)\n+bool\n+aarch64_offset_7bit_signed_scaled_p (enum machine_mode mode, HOST_WIDE_INT offset)\n {\n   return (offset >= -64 * GET_MODE_SIZE (mode)\n \t  && offset < 64 * GET_MODE_SIZE (mode)\n@@ -3266,12 +3266,12 @@ aarch64_classify_address (struct aarch64_address_info *info,\n \t     We conservatively require an offset representable in either mode.\n \t   */\n \t  if (mode == TImode || mode == TFmode)\n-\t    return (offset_7bit_signed_scaled_p (mode, offset)\n+\t    return (aarch64_offset_7bit_signed_scaled_p (mode, offset)\n \t\t    && offset_9bit_signed_unscaled_p (mode, offset));\n \n \t  if (outer_code == PARALLEL)\n \t    return ((GET_MODE_SIZE (mode) == 4 || GET_MODE_SIZE (mode) == 8)\n-\t\t    && offset_7bit_signed_scaled_p (mode, offset));\n+\t\t    && aarch64_offset_7bit_signed_scaled_p (mode, offset));\n \t  else\n \t    return (offset_9bit_signed_unscaled_p (mode, offset)\n \t\t    || offset_12bit_unsigned_scaled_p (mode, offset));\n@@ -3326,12 +3326,12 @@ aarch64_classify_address (struct aarch64_address_info *info,\n \t     We conservatively require an offset representable in either mode.\n \t   */\n \t  if (mode == TImode || mode == TFmode)\n-\t    return (offset_7bit_signed_scaled_p (mode, offset)\n+\t    return (aarch64_offset_7bit_signed_scaled_p (mode, offset)\n \t\t    && offset_9bit_signed_unscaled_p (mode, offset));\n \n \t  if (outer_code == PARALLEL)\n \t    return ((GET_MODE_SIZE (mode) == 4 || GET_MODE_SIZE (mode) == 8)\n-\t\t    && offset_7bit_signed_scaled_p (mode, offset));\n+\t\t    && aarch64_offset_7bit_signed_scaled_p (mode, offset));\n \t  else\n \t    return offset_9bit_signed_unscaled_p (mode, offset);\n \t}"}, {"sha": "eac4664861cc9f5140e0ee88b665243b2335c0b9", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4470747882d347fc2da36479aec26fc3d7c938f7/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4470747882d347fc2da36479aec26fc3d7c938f7/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=4470747882d347fc2da36479aec26fc3d7c938f7", "patch": "@@ -1022,7 +1022,7 @@\n   [(parallel\n     [(set (match_operand:P 0 \"register_operand\" \"=k\")\n           (plus:P (match_operand:P 1 \"register_operand\" \"0\")\n-                  (match_operand:P 4 \"const_int_operand\" \"n\")))\n+                  (match_operand:P 4 \"aarch64_mem_pair_offset\" \"n\")))\n      (set (match_operand:GPI 2 \"register_operand\" \"=r\")\n           (mem:GPI (match_dup 1)))\n      (set (match_operand:GPI 3 \"register_operand\" \"=r\")\n@@ -1037,7 +1037,7 @@\n   [(parallel\n     [(set (match_operand:P 0 \"register_operand\" \"=k\")\n           (plus:P (match_operand:P 1 \"register_operand\" \"0\")\n-                  (match_operand:P 4 \"const_int_operand\" \"n\")))\n+                  (match_operand:P 4 \"aarch64_mem_pair_offset\" \"n\")))\n      (set (match_operand:GPF 2 \"register_operand\" \"=w\")\n           (mem:GPF (match_dup 1)))\n      (set (match_operand:GPF 3 \"register_operand\" \"=w\")\n@@ -1054,7 +1054,7 @@\n   [(parallel\n     [(set (match_operand:P 0 \"register_operand\" \"=&k\")\n           (plus:P (match_operand:P 1 \"register_operand\" \"0\")\n-                  (match_operand:P 4 \"const_int_operand\" \"n\")))\n+                  (match_operand:P 4 \"aarch64_mem_pair_offset\" \"n\")))\n      (set (mem:GPI (plus:P (match_dup 0)\n                    (match_dup 4)))\n           (match_operand:GPI 2 \"register_operand\" \"r\"))\n@@ -1070,7 +1070,7 @@\n   [(parallel\n     [(set (match_operand:P 0 \"register_operand\" \"=&k\")\n           (plus:P (match_operand:P 1 \"register_operand\" \"0\")\n-                  (match_operand:P 4 \"const_int_operand\" \"n\")))\n+                  (match_operand:P 4 \"aarch64_mem_pair_offset\" \"n\")))\n      (set (mem:GPF (plus:P (match_dup 0)\n                    (match_dup 4)))\n           (match_operand:GPF 2 \"register_operand\" \"w\"))"}, {"sha": "3dd83caf907aab9c141e2b250a32e675212d7b54", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4470747882d347fc2da36479aec26fc3d7c938f7/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4470747882d347fc2da36479aec26fc3d7c938f7/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=4470747882d347fc2da36479aec26fc3d7c938f7", "patch": "@@ -123,6 +123,10 @@\n        (match_test \"INTVAL (op) != 0\n \t\t    && (unsigned) exact_log2 (INTVAL (op)) < 64\")))\n \n+(define_predicate \"aarch64_mem_pair_offset\"\n+  (and (match_code \"const_int\")\n+       (match_test \"aarch64_offset_7bit_signed_scaled_p (mode, INTVAL (op))\")))\n+\n (define_predicate \"aarch64_mem_pair_operand\"\n   (and (match_code \"mem\")\n        (match_test \"aarch64_legitimate_address_p (mode, XEXP (op, 0), PARALLEL,"}]}