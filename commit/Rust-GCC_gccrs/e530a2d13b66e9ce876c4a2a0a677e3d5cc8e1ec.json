{"sha": "e530a2d13b66e9ce876c4a2a0a677e3d5cc8e1ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUzMGEyZDEzYjY2ZTljZTg3NmM0YTJhMGE2NzdlM2Q1Y2M4ZTFlYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-07-08T07:44:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-07-08T07:44:01Z"}, "message": "[multiple changes]\n\n2013-07-08  Gary Dismukes  <dismukes@adacore.com>\n\n\t* gnat_rm.texi: Minor reformatting and rewording for consistency.\n\n2013-07-08  Bob Duff  <duff@adacore.com>\n\n\t* exp_ch3.adb (Build_Master): If Desig_Type is an incomplete\n\tview coming from a limited-with'ed package, use the nonlimited\n\tview in case it has tasks.\n\n2013-07-08  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch8.ad[sb] (Save_Scope_Stack): Modified to return the list\n\tof entities which have been temporarily removed from immediate\n\tvisibility.\n\t(Restore_Scope_Stack): Modified to receive an\n\tadditional parameter with the list of entities whose immediate\n\tvisibility must be restored.\n\t* sem.adb (Do_Analyze): Use new version of\n\tSave_Scope_Stack/Restore_Scope_Stack\n\t* sem_ch12.adb (Inline_Instance_Body): Use new version of\n\tSave_Scope_Stack and Restore_Scope_Stack\n\nFrom-SVN: r200754", "tree": {"sha": "75783d192ae142c1eeb2a58b71d7c44867862690", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75783d192ae142c1eeb2a58b71d7c44867862690"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e530a2d13b66e9ce876c4a2a0a677e3d5cc8e1ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e530a2d13b66e9ce876c4a2a0a677e3d5cc8e1ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e530a2d13b66e9ce876c4a2a0a677e3d5cc8e1ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e530a2d13b66e9ce876c4a2a0a677e3d5cc8e1ec/comments", "author": null, "committer": null, "parents": [{"sha": "a9e892d0750958d33f76f3900c45863c7c0d0fd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9e892d0750958d33f76f3900c45863c7c0d0fd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9e892d0750958d33f76f3900c45863c7c0d0fd1"}], "stats": {"total": 213, "additions": 85, "deletions": 128}, "files": [{"sha": "cf2decad541a6398ed71fb40219ab79c80ad6236", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e530a2d13b66e9ce876c4a2a0a677e3d5cc8e1ec/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e530a2d13b66e9ce876c4a2a0a677e3d5cc8e1ec/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e530a2d13b66e9ce876c4a2a0a677e3d5cc8e1ec", "patch": "@@ -1,3 +1,26 @@\n+2013-07-08  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* gnat_rm.texi: Minor reformatting and rewording for consistency.\n+\n+2013-07-08  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Master): If Desig_Type is an incomplete\n+\tview coming from a limited-with'ed package, use the nonlimited\n+\tview in case it has tasks.\n+\n+2013-07-08  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch8.ad[sb] (Save_Scope_Stack): Modified to return the list\n+\tof entities which have been temporarily removed from immediate\n+\tvisibility.\n+\t(Restore_Scope_Stack): Modified to receive an\n+\tadditional parameter with the list of entities whose immediate\n+\tvisibility must be restored.\n+\t* sem.adb (Do_Analyze): Use new version of\n+\tSave_Scope_Stack/Restore_Scope_Stack\n+\t* sem_ch12.adb (Inline_Instance_Body): Use new version of\n+\tSave_Scope_Stack and Restore_Scope_Stack\n+\n 2013-07-08  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_prag.adb (Analyze_Pragma): Remove"}, {"sha": "160b92df40b407393c2529a4b2a3cbd6920e1b28", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e530a2d13b66e9ce876c4a2a0a677e3d5cc8e1ec/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e530a2d13b66e9ce876c4a2a0a677e3d5cc8e1ec/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=e530a2d13b66e9ce876c4a2a0a677e3d5cc8e1ec", "patch": "@@ -4632,9 +4632,19 @@ package body Exp_Ch3 is\n       ------------------\n \n       procedure Build_Master (Ptr_Typ : Entity_Id) is\n-         Desig_Typ : constant Entity_Id := Designated_Type (Ptr_Typ);\n+         Desig_Typ : Entity_Id := Designated_Type (Ptr_Typ);\n \n       begin\n+         --  If the designated type is an incomplete view coming from a\n+         --  limited-with'ed package, we need to use the nonlimited view in\n+         --  case it has tasks.\n+\n+         if Ekind (Desig_Typ) in Incomplete_Kind\n+           and then Present (Non_Limited_View (Desig_Typ))\n+         then\n+            Desig_Typ := Non_Limited_View (Desig_Typ);\n+         end if;\n+\n          --  Anonymous access types are created for the components of the\n          --  record parameter for an entry declaration. No master is created\n          --  for such a type."}, {"sha": "3602ec2e57149ce6cc0392ab23ffaf5733c73480", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e530a2d13b66e9ce876c4a2a0a677e3d5cc8e1ec/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e530a2d13b66e9ce876c4a2a0a677e3d5cc8e1ec/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=e530a2d13b66e9ce876c4a2a0a677e3d5cc8e1ec", "patch": "@@ -6052,20 +6052,20 @@ by other pragmas) of a package declaration, it marks the whole package\n @item\n When the pragma appears at the start of the private declarations of a\n package (only other pragmas can appear between the @code{private} keyword\n-and the @code{SPARK_Mode} pragma, it marks the private part in or\n-out of SPARK 2014 (overriding the mode for the public part).\n+and the @code{SPARK_Mode} pragma), it marks the private part in or\n+out of SPARK 2014 (overriding the default mode of the visible part).\n \n @item\n When the pragma appears immediately at the start of the declarations of a\n package body (preceded only by other pragmas),\n it marks the whole body in or out of SPARK 2014 (overriding the default\n-mode copied from the declaration).\n+mode set by the declaration).\n \n @item\n When the pragma appears at the start of the elaboration statements of\n a package body (only other pragmas can appear between the @code{begin}\n-keyword and the @code{SPARK_Mode} pragma,\n-it marks the elaboration statements in or out of SPARK 2014, overriding\n+keyword and the @code{SPARK_Mode} pragma),\n+it marks the elaboration statements in or out of SPARK 2014 (overriding\n the default mode of the package body).\n \n @item\n@@ -6076,7 +6076,7 @@ subprogram (spec and body) in or out of SPARK 2014.\n @item\n When the pragma appears at the start of the declarations of a subprogram\n body (preceded only by other pragmas), it marks the whole body in or out\n-of SPARK 2014, overriding the default mode set by the declaration.\n+of SPARK 2014 (overriding the default mode set by the declaration).\n \n @item\n Any other use of the pragma is illegal."}, {"sha": "4249ad95595810a24df568f9c18abeac2a6c3970", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e530a2d13b66e9ce876c4a2a0a677e3d5cc8e1ec/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e530a2d13b66e9ce876c4a2a0a677e3d5cc8e1ec/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=e530a2d13b66e9ce876c4a2a0a677e3d5cc8e1ec", "patch": "@@ -1340,8 +1340,10 @@ package body Sem is\n       ----------------\n \n       procedure Do_Analyze is\n+         List : Elist_Id;\n+\n       begin\n-         Save_Scope_Stack;\n+         List := Save_Scope_Stack;\n          Push_Scope (Standard_Standard);\n          Scope_Suppress := Suppress_Options;\n          Scope_Stack.Table\n@@ -1362,7 +1364,7 @@ package body Sem is\n          --  Then pop entry for Standard, and pop implicit types\n \n          Pop_Scope;\n-         Restore_Scope_Stack;\n+         Restore_Scope_Stack (List);\n       end Do_Analyze;\n \n       Already_Analyzed : constant Boolean := Analyzed (Comp_Unit);"}, {"sha": "b93d3858335483e6c1d486a594a7315378822a28", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e530a2d13b66e9ce876c4a2a0a677e3d5cc8e1ec/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e530a2d13b66e9ce876c4a2a0a677e3d5cc8e1ec/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=e530a2d13b66e9ce876c4a2a0a677e3d5cc8e1ec", "patch": "@@ -4084,6 +4084,7 @@ package body Sem_Ch12 is\n       Use_Clauses  : array (1 .. Scope_Stack_Depth) of Node_Id;\n       Instances    : array (1 .. Scope_Stack_Depth) of Entity_Id;\n       Inner_Scopes : array (1 .. Scope_Stack_Depth) of Entity_Id;\n+      List         : Elist_Id;\n       Num_Inner    : Int := 0;\n       N_Instances  : Int := 0;\n       S            : Entity_Id;\n@@ -4187,7 +4188,7 @@ package body Sem_Ch12 is\n                --  Remove entities in current scopes from visibility, so that\n                --  instance body is compiled in a clean environment.\n \n-               Save_Scope_Stack (Handle_Use => False);\n+               List := Save_Scope_Stack (Handle_Use => False);\n \n                if Is_Child_Unit (S) then\n \n@@ -4261,7 +4262,7 @@ package body Sem_Ch12 is\n                end loop;\n             end if;\n \n-            Restore_Scope_Stack (Handle_Use => False);\n+            Restore_Scope_Stack (List, Handle_Use => False);\n \n             if Present (Curr_Scope)\n               and then"}, {"sha": "da47aabab1ff1947b5a5e3f0e1c996518872fb27", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 29, "deletions": 112, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e530a2d13b66e9ce876c4a2a0a677e3d5cc8e1ec/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e530a2d13b66e9ce876c4a2a0a677e3d5cc8e1ec/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=e530a2d13b66e9ce876c4a2a0a677e3d5cc8e1ec", "patch": "@@ -7654,119 +7654,20 @@ package body Sem_Ch8 is\n    -- Restore_Scope_Stack --\n    -------------------------\n \n-   procedure Restore_Scope_Stack (Handle_Use : Boolean := True) is\n-      E         : Entity_Id;\n-      S         : Entity_Id;\n-      Comp_Unit : Node_Id;\n-      In_Child  : Boolean := False;\n-      Full_Vis  : Boolean := True;\n-      SS_Last   : constant Int := Scope_Stack.Last;\n+   procedure Restore_Scope_Stack\n+     (List       : Elist_Id;\n+      Handle_Use : Boolean := True)\n+   is\n+      SS_Last : constant Int := Scope_Stack.Last;\n+      Elmt    : Elmt_Id;\n \n    begin\n       --  Restore visibility of previous scope stack, if any\n \n-      for J in reverse 0 .. Scope_Stack.Last loop\n-         exit when  Scope_Stack.Table (J).Entity = Standard_Standard\n-            or else No (Scope_Stack.Table (J).Entity);\n-\n-         S := Scope_Stack.Table (J).Entity;\n-\n-         if not Is_Hidden_Open_Scope (S) then\n-\n-            --  If the parent scope is hidden, its entities are hidden as\n-            --  well, unless the entity is the instantiation currently\n-            --  being analyzed.\n-\n-            if not Is_Hidden_Open_Scope (Scope (S))\n-              or else not Analyzed (Parent (S))\n-              or else Scope (S) = Standard_Standard\n-            then\n-               Set_Is_Immediately_Visible (S, True);\n-            end if;\n-\n-            E := First_Entity (S);\n-            while Present (E) loop\n-               if Is_Child_Unit (E) then\n-                  if not From_With_Type (E) then\n-                     Set_Is_Immediately_Visible (E,\n-                       Is_Visible_Lib_Unit (E) or else In_Open_Scopes (E));\n-\n-                  else\n-                     pragma Assert\n-                       (Nkind (Parent (E)) = N_Defining_Program_Unit_Name\n-                         and then\n-                           Nkind (Parent (Parent (E))) =\n-                                               N_Package_Specification);\n-                     Set_Is_Immediately_Visible (E,\n-                       Limited_View_Installed (Parent (Parent (E))));\n-                  end if;\n-               else\n-                  Set_Is_Immediately_Visible (E, True);\n-               end if;\n-\n-               Next_Entity (E);\n-\n-               if not Full_Vis and then Is_Package_Or_Generic_Package (S) then\n-\n-                  --  We are in the visible part of the package scope\n-\n-                  exit when E = First_Private_Entity (S);\n-               end if;\n-            end loop;\n-\n-            --  The visibility of child units (siblings of current compilation)\n-            --  must be restored in any case. Their declarations may appear\n-            --  after the private part of the parent.\n-\n-            if not Full_Vis then\n-               while Present (E) loop\n-                  if Is_Child_Unit (E) then\n-                     Set_Is_Immediately_Visible (E,\n-                       Is_Visible_Lib_Unit (E) or else In_Open_Scopes (E));\n-                  end if;\n-\n-                  Next_Entity (E);\n-               end loop;\n-            end if;\n-         end if;\n-\n-         if Is_Child_Unit (S)\n-            and not In_Child     --  check only for current unit\n-         then\n-            In_Child := True;\n-\n-            --  Restore visibility of parents according to whether the child\n-            --  is private and whether we are in its visible part.\n-\n-            Comp_Unit := Parent (Unit_Declaration_Node (S));\n-\n-            if Nkind (Comp_Unit) = N_Compilation_Unit\n-              and then Private_Present (Comp_Unit)\n-            then\n-               Full_Vis := True;\n-\n-            elsif Is_Package_Or_Generic_Package (S)\n-              and then (In_Private_Part (S) or else In_Package_Body (S))\n-            then\n-               Full_Vis := True;\n-\n-            --  if S is the scope of some instance (which has already been\n-            --  seen on the stack) it does not affect the visibility of\n-            --  other scopes.\n-\n-            elsif Is_Hidden_Open_Scope (S) then\n-               null;\n-\n-            elsif Ekind_In (S, E_Procedure, E_Function)\n-              and then Has_Completion (S)\n-            then\n-               Full_Vis := True;\n-            else\n-               Full_Vis := False;\n-            end if;\n-         else\n-            Full_Vis := True;\n-         end if;\n+      Elmt := First_Elmt (List);\n+      while Present (Elmt) loop\n+         Set_Is_Immediately_Visible (Node (Elmt));\n+         Next_Elmt (Elmt);\n       end loop;\n \n       if SS_Last >= Scope_Stack.First\n@@ -7781,11 +7682,24 @@ package body Sem_Ch8 is\n    -- Save_Scope_Stack --\n    ----------------------\n \n-   procedure Save_Scope_Stack (Handle_Use : Boolean := True) is\n+   function Save_Scope_Stack (Handle_Use : Boolean := True) return Elist_Id is\n+      Result  : constant Elist_Id := New_Elmt_List;\n       E       : Entity_Id;\n       S       : Entity_Id;\n       SS_Last : constant Int := Scope_Stack.Last;\n \n+      procedure Remove_From_Visibility (E : Entity_Id);\n+      --  If E is immediately visible then append it to the result and remove\n+      --  it temporarily from visibility\n+\n+      procedure Remove_From_Visibility (E : Entity_Id) is\n+      begin\n+         if Is_Immediately_Visible (E) then\n+            Append_Elmt (E, Result);\n+            Set_Is_Immediately_Visible (E, False);\n+         end if;\n+      end Remove_From_Visibility;\n+\n    begin\n       if SS_Last >= Scope_Stack.First\n         and then Scope_Stack.Table (SS_Last).Entity /= Standard_Standard\n@@ -7803,16 +7717,19 @@ package body Sem_Ch8 is\n                or else No (Scope_Stack.Table (J).Entity);\n \n             S := Scope_Stack.Table (J).Entity;\n-            Set_Is_Immediately_Visible (S, False);\n+\n+            Remove_From_Visibility (S);\n \n             E := First_Entity (S);\n             while Present (E) loop\n-               Set_Is_Immediately_Visible (E, False);\n+               Remove_From_Visibility (E);\n                Next_Entity (E);\n             end loop;\n          end loop;\n \n       end if;\n+\n+      return Result;\n    end Save_Scope_Stack;\n \n    -------------"}, {"sha": "6a5c89c07d4ba2316f7e6212f21e7d412daaee5a", "filename": "gcc/ada/sem_ch8.ads", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e530a2d13b66e9ce876c4a2a0a677e3d5cc8e1ec/gcc%2Fada%2Fsem_ch8.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e530a2d13b66e9ce876c4a2a0a677e3d5cc8e1ec/gcc%2Fada%2Fsem_ch8.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.ads?ref=e530a2d13b66e9ce876c4a2a0a677e3d5cc8e1ec", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -148,9 +148,11 @@ package Sem_Ch8 is\n    --  with-clause on system. N is absent when the function is called to find\n    --  the visibility of implicit operators.\n \n-   procedure Restore_Scope_Stack (Handle_Use : Boolean := True);\n-   procedure Save_Scope_Stack (Handle_Use : Boolean := True);\n-   --  These two procedures are called from Semantics, when a unit U1 is to\n+   function Save_Scope_Stack (Handle_Use : Boolean := True) return Elist_Id;\n+   procedure Restore_Scope_Stack\n+     (List       : Elist_Id;\n+      Handle_Use : Boolean := True);\n+   --  These two subprograms are called from Semantics, when a unit U1 is to\n    --  be compiled in the course of the compilation of another unit U2. This\n    --  happens whenever Rtsfind is called. U1, the unit retrieved by Rtsfind,\n    --  must be compiled in its own context, and the current scope stack\n@@ -159,7 +161,9 @@ package Sem_Ch8 is\n    --  Handle_Use indicates whether local use clauses must be removed or\n    --  installed. In the case of inlining of instance bodies, the visibility\n    --  handling is done fully in Inline_Instance_Body, and use clauses are\n-   --  handled there.\n+   --  handled there. Save_Scope_Stack returns the list of entities which have\n+   --  been temporarily removed from visibility; that list must be passed to\n+   --  Restore_Scope_Stack to restore their visibility.\n \n    procedure Set_Use (L : List_Id);\n    --  Find use clauses that are declarative items in a package declaration"}]}