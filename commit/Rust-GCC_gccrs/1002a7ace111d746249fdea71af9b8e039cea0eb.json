{"sha": "1002a7ace111d746249fdea71af9b8e039cea0eb", "node_id": "C_kwDOANBUbNoAKDEwMDJhN2FjZTExMWQ3NDYyNDlmZGVhNzFhZjliOGUwMzljZWEwZWI", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-03-23T08:44:39Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-03-23T08:44:39Z"}, "message": "LTO: Fixes for renaming issues with offload/OpenMP [PR104285]\n\ngcc/lto/ChangeLog:\n\n\tPR middle-end/104285\n\t* lto-partition.cc (maybe_rewrite_identifier): Use get_identifier\n\tfor the returned string to be usable as hash key.\n\t(validize_symbol_for_target): Hence, use return value directly.\n\t(privatize_symbol_name_1): Track maybe_rewrite_identifier renames.\n\t* lto.cc (offload_handle_link_vars): Move function up before ...\n\t(do_whole_program_analysis): Call it after static renamings.\n\t(lto_main): Move call after static renamings.\n\nlibgomp/ChangeLog:\n\n\tPR middle-end/104285\n\t* testsuite/libgomp.c++/target-same-name-2-a.C: New test.\n\t* testsuite/libgomp.c++/target-same-name-2-b.C: New test.\n\t* testsuite/libgomp.c++/target-same-name-2.C: New test.\n\t* testsuite/libgomp.c-c++-common/target-same-name-1-a.c: New test.\n\t* testsuite/libgomp.c-c++-common/target-same-name-1-b.c: New test.\n\t* testsuite/libgomp.c-c++-common/target-same-name-1.c: New test.", "tree": {"sha": "d020e020682e89e2d5b6cd29b48c6f8a5c4b6e6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d020e020682e89e2d5b6cd29b48c6f8a5c4b6e6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1002a7ace111d746249fdea71af9b8e039cea0eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1002a7ace111d746249fdea71af9b8e039cea0eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1002a7ace111d746249fdea71af9b8e039cea0eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1002a7ace111d746249fdea71af9b8e039cea0eb/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fa7216ae0d8a15aaa1a54e1d8e308f791e65d97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fa7216ae0d8a15aaa1a54e1d8e308f791e65d97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fa7216ae0d8a15aaa1a54e1d8e308f791e65d97"}], "stats": {"total": 365, "additions": 331, "deletions": 34}, "files": [{"sha": "ebb9c3abe128ccc5d3a3bc99b00efaeeebdea133", "filename": "gcc/lto/lto-partition.cc", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1002a7ace111d746249fdea71af9b8e039cea0eb/gcc%2Flto%2Flto-partition.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1002a7ace111d746249fdea71af9b8e039cea0eb/gcc%2Flto%2Flto-partition.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-partition.cc?ref=1002a7ace111d746249fdea71af9b8e039cea0eb", "patch": "@@ -898,6 +898,11 @@ maybe_rewrite_identifier (const char *ptr)\n \t}\n       copy[off] = valid;\n     }\n+  if (copy)\n+    {\n+      match = IDENTIFIER_POINTER (get_identifier (copy));\n+      free (copy);\n+    }\n   return match;\n #else\n   return ptr;\n@@ -921,9 +926,7 @@ validize_symbol_for_target (symtab_node *node)\n     {\n       symtab->change_decl_assembler_name (decl, get_identifier (name2));\n       if (node->lto_file_data)\n-\tlto_record_renamed_decl (node->lto_file_data, name,\n-\t\t\t\t IDENTIFIER_POINTER\n-\t\t\t\t (DECL_ASSEMBLER_NAME (decl)));\n+\tlto_record_renamed_decl (node->lto_file_data, name, name2);\n     }\n }\n \n@@ -936,20 +939,20 @@ static hash_map<const char *, unsigned> *lto_clone_numbers;\n static bool\n privatize_symbol_name_1 (symtab_node *node, tree decl)\n {\n-  const char *name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n+  const char *name0 = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n \n-  if (must_not_rename (node, name))\n+  if (must_not_rename (node, name0))\n     return false;\n \n-  name = maybe_rewrite_identifier (name);\n+  const char *name = maybe_rewrite_identifier (name0);\n   unsigned &clone_number = lto_clone_numbers->get_or_insert (name);\n   symtab->change_decl_assembler_name (decl,\n \t\t\t\t      clone_function_name (\n \t\t\t\t\t  name, \"lto_priv\", clone_number));\n   clone_number++;\n \n   if (node->lto_file_data)\n-    lto_record_renamed_decl (node->lto_file_data, name,\n+    lto_record_renamed_decl (node->lto_file_data, name0,\n \t\t\t     IDENTIFIER_POINTER\n \t\t\t     (DECL_ASSEMBLER_NAME (decl)));\n "}, {"sha": "31b0c1862f77ee9f55cff5c82c4f17d91f42792c", "filename": "gcc/lto/lto.cc", "status": "modified", "additions": 31, "deletions": 27, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1002a7ace111d746249fdea71af9b8e039cea0eb/gcc%2Flto%2Flto.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1002a7ace111d746249fdea71af9b8e039cea0eb/gcc%2Flto%2Flto.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.cc?ref=1002a7ace111d746249fdea71af9b8e039cea0eb", "patch": "@@ -424,6 +424,32 @@ lto_wpa_write_files (void)\n   timevar_pop (TV_WHOPR_WPA_IO);\n }\n \n+/* Create artificial pointers for \"omp declare target link\" vars.  */\n+\n+static void\n+offload_handle_link_vars (void)\n+{\n+#ifdef ACCEL_COMPILER\n+  varpool_node *var;\n+  FOR_EACH_VARIABLE (var)\n+    if (lookup_attribute (\"omp declare target link\",\n+\t\t\t  DECL_ATTRIBUTES (var->decl)))\n+      {\n+\ttree type = build_pointer_type (TREE_TYPE (var->decl));\n+\ttree link_ptr_var = build_decl (UNKNOWN_LOCATION, VAR_DECL,\n+\t\t\t\t\tclone_function_name (var->decl,\n+\t\t\t\t\t\t\t     \"linkptr\"), type);\n+\tTREE_USED (link_ptr_var) = 1;\n+\tTREE_STATIC (link_ptr_var) = 1;\n+\tTREE_PUBLIC (link_ptr_var) = TREE_PUBLIC (var->decl);\n+\tDECL_ARTIFICIAL (link_ptr_var) = 1;\n+\tSET_DECL_ASSEMBLER_NAME (link_ptr_var, DECL_NAME (link_ptr_var));\n+\tSET_DECL_VALUE_EXPR (var->decl, build_simple_mem_ref (link_ptr_var));\n+\tDECL_HAS_VALUE_EXPR_P (var->decl) = 1;\n+      }\n+#endif\n+}\n+\n /* Perform whole program analysis (WPA) on the callgraph and write out the\n    optimization plan.  */\n \n@@ -516,6 +542,7 @@ do_whole_program_analysis (void)\n      to globals with hidden visibility because they are accessed from multiple\n      partitions.  */\n   lto_promote_cross_file_statics ();\n+  offload_handle_link_vars ();\n   if (dump_file)\n      dump_end (partition_dump_id, dump_file);\n   dump_file = NULL;\n@@ -549,32 +576,6 @@ do_whole_program_analysis (void)\n     dump_memory_report (\"Final\");\n }\n \n-/* Create artificial pointers for \"omp declare target link\" vars.  */\n-\n-static void\n-offload_handle_link_vars (void)\n-{\n-#ifdef ACCEL_COMPILER\n-  varpool_node *var;\n-  FOR_EACH_VARIABLE (var)\n-    if (lookup_attribute (\"omp declare target link\",\n-\t\t\t  DECL_ATTRIBUTES (var->decl)))\n-      {\n-\ttree type = build_pointer_type (TREE_TYPE (var->decl));\n-\ttree link_ptr_var = build_decl (UNKNOWN_LOCATION, VAR_DECL,\n-\t\t\t\t\tclone_function_name (var->decl,\n-\t\t\t\t\t\t\t     \"linkptr\"), type);\n-\tTREE_USED (link_ptr_var) = 1;\n-\tTREE_STATIC (link_ptr_var) = 1;\n-\tTREE_PUBLIC (link_ptr_var) = TREE_PUBLIC (var->decl);\n-\tDECL_ARTIFICIAL (link_ptr_var) = 1;\n-\tSET_DECL_ASSEMBLER_NAME (link_ptr_var, DECL_NAME (link_ptr_var));\n-\tSET_DECL_VALUE_EXPR (var->decl, build_simple_mem_ref (link_ptr_var));\n-\tDECL_HAS_VALUE_EXPR_P (var->decl) = 1;\n-      }\n-#endif\n-}\n-\n unsigned int\n lto_option_lang_mask (void)\n {\n@@ -641,7 +642,10 @@ lto_main (void)\n \n \t  materialize_cgraph ();\n \t  if (!flag_ltrans)\n-\t    lto_promote_statics_nonwpa ();\n+\t    {\n+\t      lto_promote_statics_nonwpa ();\n+\t      offload_handle_link_vars ();\n+\t    }\n \n \t  /* Annotate the CU DIE and mark the early debug phase as finished.  */\n \t  debuginfo_early_start ();"}, {"sha": "1cff1c8d0c5c297b2be8f7ebbf781655d8ea7a8f", "filename": "libgomp/testsuite/libgomp.c++/target-same-name-2-a.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1002a7ace111d746249fdea71af9b8e039cea0eb/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-same-name-2-a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1002a7ace111d746249fdea71af9b8e039cea0eb/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-same-name-2-a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-same-name-2-a.C?ref=1002a7ace111d746249fdea71af9b8e039cea0eb", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-skip-if \"\" { *-*-* } } */\n+/* Used by target-same-name-2.c */\n+\n+#include <complex>\n+\n+template<typename T>\n+int\n+test_map ()\n+{\n+  std::complex<T> a(2, 1), a_check;\n+#pragma omp target map(from : a_check)\n+  {\n+    a_check = a;\n+  }\n+  if (a == a_check)\n+    return 42;\n+  return 0;\n+}\n+\n+template<typename T>\n+static int\n+test_map_static ()\n+{\n+  std::complex<T> a(-4, 5), a_check;\n+#pragma omp target map(from : a_check)\n+  {\n+    a_check = a;\n+  }\n+  if (a == a_check)\n+    return 441;\n+  return 0;\n+}\n+\n+int\n+test_a ()\n+{\n+  int res = test_map<float>();\n+  if (res != 42)\n+    __builtin_abort ();\n+  return res;\n+}\n+\n+int\n+test_a2 ()\n+{\n+  int res = test_map_static<float>();\n+  if (res != 441)\n+    __builtin_abort ();\n+  return res;\n+}"}, {"sha": "31884ba57ce91973fc5379aaeee5c4cc25388026", "filename": "libgomp/testsuite/libgomp.c++/target-same-name-2-b.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1002a7ace111d746249fdea71af9b8e039cea0eb/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-same-name-2-b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1002a7ace111d746249fdea71af9b8e039cea0eb/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-same-name-2-b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-same-name-2-b.C?ref=1002a7ace111d746249fdea71af9b8e039cea0eb", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-skip-if \"\" { *-*-* } } */\n+/* Used by target-same-name-2.c */\n+\n+#include <complex>\n+\n+template<typename T>\n+int\n+test_map ()\n+{\n+  std::complex<T> a(2, 1), a_check;\n+#pragma omp target map(from : a_check)\n+  {\n+    a_check = a;\n+  }\n+  if (a == a_check)\n+    return 42;\n+  return 0;\n+}\n+\n+template<typename T>\n+static int\n+test_map_static ()\n+{\n+  std::complex<T> a(-4, 5), a_check;\n+#pragma omp target map(from : a_check)\n+  {\n+    a_check = a;\n+  }\n+  if (a == a_check)\n+    return 442;\n+  return 0;\n+}\n+\n+int\n+test_b()\n+{\n+  int res = test_map<float>();\n+  if (res != 42)\n+    __builtin_abort ();\n+  return res;\n+}\n+\n+int\n+test_b2()\n+{\n+  int res = test_map_static<float>();\n+  if (res != 442)\n+    __builtin_abort ();\n+  return res;\n+}"}, {"sha": "e14d435d1ff6d026a35aaba66ebc9d03e43a958a", "filename": "libgomp/testsuite/libgomp.c++/target-same-name-2.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1002a7ace111d746249fdea71af9b8e039cea0eb/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-same-name-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1002a7ace111d746249fdea71af9b8e039cea0eb/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-same-name-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-same-name-2.C?ref=1002a7ace111d746249fdea71af9b8e039cea0eb", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-additional-sources \"target-same-name-2-a.C target-same-name-2-b.C\" } */\n+/* PR middle-end/104285 */\n+\n+/* Both files create the same symbol, which caused issues\n+   in non-host lto1. */\n+\n+int test_a ();\n+int test_a2 ();\n+int test_b ();\n+int test_b2 ();\n+\n+int\n+main ()\n+{\n+  if (test_a () != 42)\n+    __builtin_abort ();\n+  if (test_a2 () != 441)\n+    __builtin_abort ();\n+  if (test_b () != 42)\n+    __builtin_abort ();\n+  if (test_b2 () != 442)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "509c238cf8d7af0c3d45a465fbe037a8804298d8", "filename": "libgomp/testsuite/libgomp.c-c++-common/target-same-name-1-a.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1002a7ace111d746249fdea71af9b8e039cea0eb/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-same-name-1-a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1002a7ace111d746249fdea71af9b8e039cea0eb/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-same-name-1-a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-same-name-1-a.c?ref=1002a7ace111d746249fdea71af9b8e039cea0eb", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-skip-if \"\" { *-*-* } } */\n+/* Used by target-same-name-1.c */\n+\n+static int local_link = 42;\n+#pragma omp declare target link(local_link)\n+\n+int decl_a_link = 123;\n+#pragma omp declare target link(decl_a_link)\n+\n+#pragma omp declare target\n+static int __attribute__ ((noinline,noclone))\n+foo ()\n+{\n+  return 5;\n+}\n+#pragma omp end declare target\n+\n+static int __attribute__ ((noinline,noclone))\n+bar ()\n+{\n+  int i;\n+  #pragma omp target map(from:i)\n+    i = foo ();\n+  return i;\n+}\n+\n+int\n+one () {\n+  return bar ();\n+}\n+\n+int\n+one_get_inc2_local_link ()\n+{\n+  int res, res2;\n+#pragma omp target map(from: res, res2)\n+  {\n+    res = local_link;\n+    local_link += 2;\n+    res2 = local_link;\n+  }\n+  if (res + 2 != res2)\n+    __builtin_abort ();\n+  return res;\n+}\n+\n+int\n+one_get_inc3_link_a ()\n+{\n+  int res, res2;\n+#pragma omp target map(from: res, res2)\n+  {\n+    res = decl_a_link;\n+    decl_a_link += 3;\n+    res2 = decl_a_link;\n+  }\n+  if (res + 3 != res2)\n+    __builtin_abort ();\n+  return res;\n+}"}, {"sha": "ce00876279713be10f5ebc2aef41f52842612485", "filename": "libgomp/testsuite/libgomp.c-c++-common/target-same-name-1-b.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1002a7ace111d746249fdea71af9b8e039cea0eb/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-same-name-1-b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1002a7ace111d746249fdea71af9b8e039cea0eb/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-same-name-1-b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-same-name-1-b.c?ref=1002a7ace111d746249fdea71af9b8e039cea0eb", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-skip-if \"\" { *-*-* } } */\n+/* Used by target-same-name-1.c */\n+\n+static int local_link = 55;\n+#pragma omp declare target link(local_link)\n+\n+extern int decl_a_link;\n+#pragma omp declare target link(decl_a_link)\n+\n+#pragma omp declare target\n+static int __attribute__ ((noinline,noclone))\n+foo ()\n+{\n+  return 7;\n+}\n+#pragma omp end declare target\n+\n+static int __attribute__ ((noinline,noclone))\n+bar ()\n+{\n+  int i;\n+  #pragma omp target map(from:i)\n+    i = foo ();\n+  return i;\n+}\n+\n+int\n+two () {\n+  return bar ();\n+}\n+\n+int\n+two_get_inc4_local_link ()\n+{\n+  int res, res2;\n+#pragma omp target map(from: res, res2)\n+  {\n+    res = local_link;\n+    local_link += 4;\n+    res2 = local_link;\n+  }\n+  if (res + 4 != res2)\n+    __builtin_abort ();\n+  return res;\n+}\n+\n+int\n+two_get_inc5_link_a ()\n+{\n+  int res, res2;\n+#pragma omp target map(from: res, res2)\n+  {\n+    res = decl_a_link;\n+    decl_a_link += 5;\n+    res2 = decl_a_link;\n+  }\n+  if (res + 5 != res2)\n+    __builtin_abort ();\n+  return res;\n+}"}, {"sha": "b35d8c96ae265b542401a0cb5511d3be65f3adf7", "filename": "libgomp/testsuite/libgomp.c-c++-common/target-same-name-1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1002a7ace111d746249fdea71af9b8e039cea0eb/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-same-name-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1002a7ace111d746249fdea71af9b8e039cea0eb/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-same-name-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-same-name-1.c?ref=1002a7ace111d746249fdea71af9b8e039cea0eb", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-additional-sources \"target-same-name-1-a.c target-same-name-1-b.c\" } */\n+/* PR middle-end/104285 */\n+\n+/* Both files create the same static symbol, which caused issues\n+   in non-host lto1. */\n+\n+int one ();\n+int two ();\n+int one_get_inc2_local_link ();\n+int two_get_inc4_local_link ();\n+int one_get_inc3_link_a ();\n+int two_get_inc5_link_a ();\n+\n+int\n+main ()\n+{\n+  if (one () != 5)\n+    __builtin_abort ();\n+  if (two () != 7)\n+    __builtin_abort ();\n+\n+  if (one_get_inc2_local_link () != 42)\n+    __builtin_abort ();\n+  if (two_get_inc4_local_link () != 55)\n+    __builtin_abort ();\n+  if (one_get_inc2_local_link () != 42+2)\n+    __builtin_abort ();\n+  if (two_get_inc4_local_link () != 55+4)\n+    __builtin_abort ();\n+\n+  if (one_get_inc3_link_a () != 123)\n+    __builtin_abort ();\n+  if (two_get_inc5_link_a () != 123+3)\n+    __builtin_abort ();\n+\n+/* FIXME: The last call did not increment the global var. */\n+/* PR middle-end/105015  */\n+#if 0\n+  if (one_get_inc3_link_a () != 123+3+5)\n+    __builtin_abort ();\n+  if (two_get_inc5_link_a () != 123+3+5+3)\n+    __builtin_abort ();\n+#endif\n+\n+  return 0;\n+}"}]}