{"sha": "7864eaaff7740c356f4b5c0a9dd9765b64a667ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg2NGVhYWZmNzc0MGMzNTZmNGI1YzBhOWRkOTc2NWI2NGE2NjdlZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-07-18T15:28:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-07-18T15:28:51Z"}, "message": "Demangle C++17 fold-expressions.\n\n\t* cp-demangle.c (cplus_demangle_operators): Add f[lrLR].\n\t(d_expression_1): Handle them.\n\t(d_maybe_print_fold_expression): New.\n\t(d_print_comp_inner): Use it.\n\t(d_index_template_argument): Handle negative index.\n\nFrom-SVN: r238437", "tree": {"sha": "71bba0c83fb0345dbe4c8523a8595db27c3d49b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71bba0c83fb0345dbe4c8523a8595db27c3d49b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7864eaaff7740c356f4b5c0a9dd9765b64a667ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7864eaaff7740c356f4b5c0a9dd9765b64a667ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7864eaaff7740c356f4b5c0a9dd9765b64a667ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7864eaaff7740c356f4b5c0a9dd9765b64a667ef/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "40f3e913345c7d43c4677631f90fdff0780d2dce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f3e913345c7d43c4677631f90fdff0780d2dce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40f3e913345c7d43c4677631f90fdff0780d2dce"}], "stats": {"total": 109, "additions": 107, "deletions": 2}, "files": [{"sha": "6209195ab38b3ad57d8f87fc6ba07f98aff2664c", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7864eaaff7740c356f4b5c0a9dd9765b64a667ef/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7864eaaff7740c356f4b5c0a9dd9765b64a667ef/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=7864eaaff7740c356f4b5c0a9dd9765b64a667ef", "patch": "@@ -1,5 +1,11 @@\n 2016-07-15  Jason Merrill  <jason@redhat.com>\n \n+\t* cp-demangle.c (cplus_demangle_operators): Add f[lrLR].\n+\t(d_expression_1): Handle them.\n+\t(d_maybe_print_fold_expression): New.\n+\t(d_print_comp_inner): Use it.\n+\t(d_index_template_argument): Handle negative index.\n+\n \t* cp-demangle.c (cplus_demangle_operators): Add sP and sZ.\n \t(d_print_comp_inner): Handle them.\n \t(d_template_args_1): Split out from d_template_args."}, {"sha": "0c6d71436e3f16b252278230f8732f05b139f2d2", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 89, "deletions": 2, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7864eaaff7740c356f4b5c0a9dd9765b64a667ef/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7864eaaff7740c356f4b5c0a9dd9765b64a667ef/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=7864eaaff7740c356f4b5c0a9dd9765b64a667ef", "patch": "@@ -344,7 +344,7 @@ struct d_print_info\n   /* Set to 1 if we saw a demangling error.  */\n   int demangle_failure;\n   /* The current index into any template argument packs we are using\n-     for printing.  */\n+     for printing, or -1 to print the whole pack.  */\n   int pack_index;\n   /* Number of d_print_flush calls so far.  */\n   unsigned long int flush_count;\n@@ -1762,6 +1762,10 @@ const struct demangle_operator_info cplus_demangle_operators[] =\n   { \"eO\", NL (\"^=\"),        2 },\n   { \"eo\", NL (\"^\"),         2 },\n   { \"eq\", NL (\"==\"),        2 },\n+  { \"fL\", NL (\"...\"),       3 },\n+  { \"fR\", NL (\"...\"),       3 },\n+  { \"fl\", NL (\"...\"),       2 },\n+  { \"fr\", NL (\"...\"),       2 },\n   { \"ge\", NL (\">=\"),        2 },\n   { \"gs\", NL (\"::\"),\t    1 },\n   { \"gt\", NL (\">\"),         2 },\n@@ -3305,6 +3309,9 @@ d_expression_1 (struct d_info *di)\n \t      return NULL;\n \t    if (op_is_new_cast (op))\n \t      left = cplus_demangle_type (di);\n+\t    else if (code[0] == 'f')\n+\t      /* fold-expression.  */\n+\t      left = d_operator_name (di);\n \t    else\n \t      left = d_expression_1 (di);\n \t    if (!strcmp (code, \"cl\"))\n@@ -3339,6 +3346,13 @@ d_expression_1 (struct d_info *di)\n \t\tsecond = d_expression_1 (di);\n \t\tthird = d_expression_1 (di);\n \t      }\n+\t    else if (code[0] == 'f')\n+\t      {\n+\t\t/* fold-expression.  */\n+\t\tfirst = d_operator_name (di);\n+\t\tsecond = d_expression_1 (di);\n+\t\tthird = d_expression_1 (di);\n+\t      }\n \t    else if (code[0] == 'n')\n \t      {\n \t\t/* new-expression.  */\n@@ -4196,13 +4210,17 @@ cplus_demangle_print (int options, const struct demangle_component *dc,\n }\n \n /* Returns the I'th element of the template arglist ARGS, or NULL on\n-   failure.  */\n+   failure.  If I is negative, return the entire arglist.  */\n \n static struct demangle_component *\n d_index_template_argument (struct demangle_component *args, int i)\n {\n   struct demangle_component *a;\n \n+  if (i < 0)\n+    /* Print the whole argument pack.  */\n+    return args;\n+\n   for (a = args;\n        a != NULL;\n        a = d_right (a))\n@@ -4402,6 +4420,70 @@ d_get_saved_scope (struct d_print_info *dpi,\n   return NULL;\n }\n \n+/* If DC is a C++17 fold-expression, print it and return true; otherwise\n+   return false.  */\n+\n+static int\n+d_maybe_print_fold_expression (struct d_print_info *dpi, int options,\n+\t\t\t       const struct demangle_component *dc)\n+{\n+  const struct demangle_component *ops, *operator_, *op1, *op2;\n+  int save_idx;\n+\n+  const char *fold_code = d_left (dc)->u.s_operator.op->code;\n+  if (fold_code[0] != 'f')\n+    return 0;\n+\n+  ops = d_right (dc);\n+  operator_ = d_left (ops);\n+  op1 = d_right (ops);\n+  op2 = 0;\n+  if (op1->type == DEMANGLE_COMPONENT_TRINARY_ARG2)\n+    {\n+      op2 = d_right (op1);\n+      op1 = d_left (op1);\n+    }\n+\n+  /* Print the whole pack.  */\n+  save_idx = dpi->pack_index;\n+  dpi->pack_index = -1;\n+\n+  switch (fold_code[1])\n+    {\n+      /* Unary left fold, (... + X).  */\n+    case 'l':\n+      d_append_string (dpi, \"(...\");\n+      d_print_expr_op (dpi, options, operator_);\n+      d_print_subexpr (dpi, options, op1);\n+      d_append_char (dpi, ')');\n+      break;\n+\n+      /* Unary right fold, (X + ...).  */\n+    case 'r':\n+      d_append_char (dpi, '(');\n+      d_print_subexpr (dpi, options, op1);\n+      d_print_expr_op (dpi, options, operator_);\n+      d_append_string (dpi, \"...)\");\n+      break;\n+\n+      /* Binary left fold, (42 + ... + X).  */\n+    case 'L':\n+      /* Binary right fold, (X + ... + 42).  */\n+    case 'R':\n+      d_append_char (dpi, '(');\n+      d_print_subexpr (dpi, options, op1);\n+      d_print_expr_op (dpi, options, operator_);\n+      d_append_string (dpi, \"...\");\n+      d_print_expr_op (dpi, options, operator_);\n+      d_print_subexpr (dpi, options, op2);\n+      d_append_char (dpi, ')');\n+      break;\n+    }\n+\n+  dpi->pack_index = save_idx;\n+  return 1;\n+}\n+\n /* Subroutine to handle components.  */\n \n static void\n@@ -5218,6 +5300,9 @@ d_print_comp_inner (struct d_print_info *dpi, int options,\n \t  return;\n \t}\n \n+      if (d_maybe_print_fold_expression (dpi, options, dc))\n+\treturn;\n+\n       /* We wrap an expression which uses the greater-than operator in\n \t an extra layer of parens so that it does not get confused\n \t with the '>' which ends the template parameters.  */\n@@ -5273,6 +5358,8 @@ d_print_comp_inner (struct d_print_info *dpi, int options,\n \t  d_print_error (dpi);\n \t  return;\n \t}\n+      if (d_maybe_print_fold_expression (dpi, options, dc))\n+\treturn;\n       {\n \tstruct demangle_component *op = d_left (dc);\n \tstruct demangle_component *first = d_left (d_right (dc));"}, {"sha": "535f2c143eeca032500117c2e9b4af05fea7271a", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7864eaaff7740c356f4b5c0a9dd9765b64a667ef/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7864eaaff7740c356f4b5c0a9dd9765b64a667ef/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=7864eaaff7740c356f4b5c0a9dd9765b64a667ef", "patch": "@@ -4542,6 +4542,18 @@ void f<int, double>(A<2>)\n \n _ZN1A1fIJiiEiJiiiEEEvRAsPDpT_T0_DpT1_E_iS3_S5_\n void A::f<int, int, int, int, int, int>(int (&) [6], int, int, int, int)\n+\n+_Z10unary_leftIJLi1ELi2ELi3EEEv1AIXflplT_EE\n+void unary_left<1, 2, 3>(A<(...+(1, 2, 3))>)\n+\n+_Z11unary_rightIJLi1ELi2ELi3EEEv1AIXfrplT_EE\n+void unary_right<1, 2, 3>(A<((1, 2, 3)+...)>)\n+\n+_Z11binary_leftIJLi1ELi2ELi3EEEv1AIXfLplLi42ET_EE\n+void binary_left<1, 2, 3>(A<((42)+...+(1, 2, 3))>)\n+\n+_Z12binary_rightIJLi1ELi2ELi3EEEv1AIXfRplT_Li42EEE\n+void binary_right<1, 2, 3>(A<((1, 2, 3)+...+(42))>)\n #\n # Tests a use-after-free problem PR70481\n "}]}