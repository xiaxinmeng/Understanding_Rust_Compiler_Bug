{"sha": "f330b1eca90d9a6485765f7b75733672351c89a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMzMGIxZWNhOTBkOWE2NDg1NzY1ZjdiNzU3MzM2NzIzNTFjODlhOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-10-21T09:53:50Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-10-21T09:53:50Z"}, "message": "utils.c (pad_type_hash): Use hashval_t for hash value.\n\n\t* gcc-interface/utils.c (pad_type_hash): Use hashval_t for hash value.\n\t(convert): Do not use an unchecked conversion for converting from a\n\ttype to another type padding it.\n\nFrom-SVN: r253971", "tree": {"sha": "48d7c79808055d5104d804c65080c2e63372599c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48d7c79808055d5104d804c65080c2e63372599c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f330b1eca90d9a6485765f7b75733672351c89a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f330b1eca90d9a6485765f7b75733672351c89a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f330b1eca90d9a6485765f7b75733672351c89a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f330b1eca90d9a6485765f7b75733672351c89a8/comments", "author": null, "committer": null, "parents": [{"sha": "de624beeae1b049b6bd834b28980e6ce9891d45d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de624beeae1b049b6bd834b28980e6ce9891d45d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de624beeae1b049b6bd834b28980e6ce9891d45d"}], "stats": {"total": 89, "additions": 79, "deletions": 10}, "files": [{"sha": "308ec70a775667221f12978b6989e26f85077767", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f330b1eca90d9a6485765f7b75733672351c89a8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f330b1eca90d9a6485765f7b75733672351c89a8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f330b1eca90d9a6485765f7b75733672351c89a8", "patch": "@@ -1,3 +1,9 @@\n+2017-10-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (pad_type_hash): Use hashval_t for hash value.\n+\t(convert): Do not use an unchecked conversion for converting from a\n+\ttype to another type padding it.\n+\n 2017-10-20  Doug Rupp  <rupp@adacore.com>\n \n \t* libgnarl/s-osinte__linux.ads (Relative_Timed_Wait): Add variable"}, {"sha": "bfd3388c56a09938876560f894f3ebef74b47dab", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f330b1eca90d9a6485765f7b75733672351c89a8/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f330b1eca90d9a6485765f7b75733672351c89a8/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=f330b1eca90d9a6485765f7b75733672351c89a8", "patch": "@@ -101,7 +101,7 @@ static tree handle_vector_type_attribute (tree *, tree, tree, int, bool *);\n \n /* Fake handler for attributes we don't properly support, typically because\n    they'd require dragging a lot of the common-c front-end circuitry.  */\n-static tree fake_attribute_handler      (tree *, tree, tree, int, bool *);\n+static tree fake_attribute_handler (tree *, tree, tree, int, bool *);\n \n /* Table of machine-independent internal attributes for Ada.  We support\n    this minimal set of attributes to accommodate the needs of builtins.  */\n@@ -222,8 +222,9 @@ static GTY((deletable)) tree free_block_chain;\n /* A hash table of padded types.  It is modelled on the generic type\n    hash table in tree.c, which must thus be used as a reference.  */\n \n-struct GTY((for_user)) pad_type_hash {\n-  unsigned long hash;\n+struct GTY((for_user)) pad_type_hash\n+{\n+  hashval_t hash;\n   tree type;\n };\n \n@@ -4249,10 +4250,13 @@ convert (tree type, tree expr)\n \treturn convert (type, TREE_OPERAND (expr, 0));\n \n       /* If the inner type is of self-referential size and the expression type\n-\t is a record, do this as an unchecked conversion.  But first pad the\n-\t expression if possible to have the same size on both sides.  */\n+\t is a record, do this as an unchecked conversion unless both types are\n+\t essentially the same.  But first pad the expression if possible to\n+\t have the same size on both sides.  */\n       if (ecode == RECORD_TYPE\n-\t  && CONTAINS_PLACEHOLDER_P (DECL_SIZE (TYPE_FIELDS (type))))\n+\t  && CONTAINS_PLACEHOLDER_P (DECL_SIZE (TYPE_FIELDS (type)))\n+\t  && TYPE_MAIN_VARIANT (etype)\n+\t     != TYPE_MAIN_VARIANT (TREE_TYPE (TYPE_FIELDS (type))))\n \t{\n \t  if (TREE_CODE (TYPE_SIZE (etype)) == INTEGER_CST)\n \t    expr = convert (maybe_pad_type (etype, TYPE_SIZE (type), 0, Empty,"}, {"sha": "1380165912e7b3a35fa5be6b636f323c984dae22", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f330b1eca90d9a6485765f7b75733672351c89a8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f330b1eca90d9a6485765f7b75733672351c89a8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f330b1eca90d9a6485765f7b75733672351c89a8", "patch": "@@ -1,3 +1,12 @@\n+2017-10-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/discr_private.ads: Rename into ...\n+\t* gnat.dg/specs/discr2.ads: ...this.\n+\t* gnat.dg/specs/discr_record_constant.ads: Rename into...\n+\t* gnat.dg/specs/discr3.ads: ...this.\n+\t* gnat.dg/specs/discr4.ads: New test.\n+\t* gnat.dg/specs/discr4_pkg.ads: New helper.\n+\n 2017-10-21  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/82586"}, {"sha": "f7ece0588126ca3ff68188dfe9db42411818b5ae", "filename": "gcc/testsuite/gnat.dg/specs/discr2.ads", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f330b1eca90d9a6485765f7b75733672351c89a8/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdiscr2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f330b1eca90d9a6485765f7b75733672351c89a8/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdiscr2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdiscr2.ads?ref=f330b1eca90d9a6485765f7b75733672351c89a8", "patch": "@@ -1,7 +1,7 @@\n -- { dg-do compile }\n -- { dg-options \"-gnatws\" }\n \n-package Discr_Private is\n+package Discr2 is\n \n    package Dec is\n       type T_DECIMAL (Prec : Integer := 1) is private;\n@@ -47,4 +47,4 @@ package Discr_Private is\n        end case;\n    end record;\n \n-end Discr_Private;\n+end Discr2;", "previous_filename": "gcc/testsuite/gnat.dg/specs/discr_private.ads"}, {"sha": "bcb996b7386b9610c7d4a249ff1651bdd60cb820", "filename": "gcc/testsuite/gnat.dg/specs/discr3.ads", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f330b1eca90d9a6485765f7b75733672351c89a8/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdiscr3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f330b1eca90d9a6485765f7b75733672351c89a8/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdiscr3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdiscr3.ads?ref=f330b1eca90d9a6485765f7b75733672351c89a8", "patch": "@@ -2,7 +2,7 @@\n \n pragma Restrictions (No_Implicit_Heap_Allocations);\n \n-package Discr_Record_Constant is\n+package Discr3 is\n \n    type T (Big : Boolean := False) is record\n       case Big is\n@@ -19,4 +19,4 @@ package Discr_Record_Constant is\n     Con : constant T := D;    --  Violation of restriction\n     Ter : constant T := Con;  --  Violation of restriction\n \n-end Discr_Record_Constant;\n+end Discr3;", "previous_filename": "gcc/testsuite/gnat.dg/specs/discr_record_constant.ads"}, {"sha": "ef9f046abcd9600406eeb380b1aca1c36656011a", "filename": "gcc/testsuite/gnat.dg/specs/discr4.ads", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f330b1eca90d9a6485765f7b75733672351c89a8/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdiscr4.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f330b1eca90d9a6485765f7b75733672351c89a8/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdiscr4.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdiscr4.ads?ref=f330b1eca90d9a6485765f7b75733672351c89a8", "patch": "@@ -0,0 +1,23 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O\" }\n+\n+with Disc4_Pkg; use Disc4_Pkg;\n+\n+package Disc4 is\n+\n+   type Data is record\n+      Val : Rec;\n+      Set : Boolean;\n+   end record;\n+\n+   type Pair is record\n+      Lower, Upper : Data;\n+   end record;\n+\n+   function Build (L, U : Rec) return Pair is ((L, True), (U, False));\n+\n+   C1 : constant Pair := Build (Rec_One, Rec_Three);\n+\n+   C2 : constant Pair := Build (Get (0), Rec_Three);\n+\n+end Disc4;"}, {"sha": "4b6c573729dfd02c4c8b77106f9a93251d6ff749", "filename": "gcc/testsuite/gnat.dg/specs/discr4_pkg.ads", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f330b1eca90d9a6485765f7b75733672351c89a8/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdiscr4_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f330b1eca90d9a6485765f7b75733672351c89a8/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdiscr4_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdiscr4_pkg.ads?ref=f330b1eca90d9a6485765f7b75733672351c89a8", "patch": "@@ -0,0 +1,27 @@\n+package Disc4_Pkg is\n+\n+   type Enum is (One, Two, Three);\n+\n+   type Rec is private;\n+\n+   Rec_One : constant Rec;\n+   Rec_Three  : constant Rec;\n+\n+   function Get (Value : Integer) return Rec;\n+\n+private\n+\n+   type Rec (D : Enum := Two) is record\n+      case D is\n+         when One => null;\n+         when Two => Value : Integer;\n+         when Three => null;\n+      end case;\n+   end record;\n+\n+   Rec_One   : constant Rec := (D => One);\n+   Rec_Three : constant Rec := (D => Three);\n+\n+   function Get (Value : Integer) return Rec is (Two, Value);\n+\n+end Disc4_Pkg;"}]}