{"sha": "1df855ce3547caa8bd375e53e5f2effac5472b43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRmODU1Y2UzNTQ3Y2FhOGJkMzc1ZTUzZTVmMmVmZmFjNTQ3MmI0Mw==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2012-09-26T13:42:47Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2012-09-26T13:42:47Z"}, "message": "tree-ssa-math-opts.c (bswap_stats): Add found_16bit field.\n\n2012-09-26  Christophe Lyon <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* tree-ssa-math-opts.c (bswap_stats): Add found_16bit field.\n\t(execute_optimize_bswap): Add support for builtin_bswap16.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/builtin-bswap16-1.c: New testcase.\n\nFrom-SVN: r191760", "tree": {"sha": "5de5ececa60b97c5b81f927d45e3dbbf008c91e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5de5ececa60b97c5b81f927d45e3dbbf008c91e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1df855ce3547caa8bd375e53e5f2effac5472b43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1df855ce3547caa8bd375e53e5f2effac5472b43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1df855ce3547caa8bd375e53e5f2effac5472b43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1df855ce3547caa8bd375e53e5f2effac5472b43/comments", "author": null, "committer": null, "parents": [{"sha": "eeca434ab6eb48931800436e03f9c3e4a30a338f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeca434ab6eb48931800436e03f9c3e4a30a338f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeca434ab6eb48931800436e03f9c3e4a30a338f"}], "stats": {"total": 54, "additions": 50, "deletions": 4}, "files": [{"sha": "ce08fce096c151ed2d971a5d61ad76799b546262", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df855ce3547caa8bd375e53e5f2effac5472b43/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df855ce3547caa8bd375e53e5f2effac5472b43/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1df855ce3547caa8bd375e53e5f2effac5472b43", "patch": "@@ -1,3 +1,8 @@\n+2012-09-26  Christophe Lyon <christophe.lyon@linaro.org>\n+\n+\t* tree-ssa-math-opts.c (bswap_stats): Add found_16bit field.\n+\t(execute_optimize_bswap): Add support for builtin_bswap16.\n+\n 2012-09-26  Richard Guenther  <rguenther@suse.de>\n \n \t* tree.h (DECL_IS_BUILTIN): Compare LOCATION_LOCUS."}, {"sha": "7c969498f59f7e004fec3594a8a9123143be3b89", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df855ce3547caa8bd375e53e5f2effac5472b43/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df855ce3547caa8bd375e53e5f2effac5472b43/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1df855ce3547caa8bd375e53e5f2effac5472b43", "patch": "@@ -1,3 +1,7 @@\n+2012-09-26  Christophe Lyon <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/builtin-bswap16-1.c: New testcase.\n+\n 2012-09-25  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR target/51274"}, {"sha": "6920f004eab42443441227029c579aeb2bb981ee", "filename": "gcc/testsuite/gcc.target/arm/builtin-bswap16-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df855ce3547caa8bd375e53e5f2effac5472b43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin-bswap16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df855ce3547caa8bd375e53e5f2effac5472b43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin-bswap16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin-bswap16-1.c?ref=1df855ce3547caa8bd375e53e5f2effac5472b43", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target arm_arch_v6_ok } */\n+/* { dg-add-options arm_arch_v6 } */\n+/* { dg-final { scan-assembler-not \"orr\\[ \\t\\]\" } } */\n+\n+unsigned short swapu16_1 (unsigned short x)\n+{\n+  return (x << 8) | (x >> 8);\n+}\n+\n+unsigned short swapu16_2 (unsigned short x)\n+{\n+  return (x >> 8) | (x << 8);\n+}"}, {"sha": "d9f4e9ecaf097596663129d8d188025e555f6f26", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df855ce3547caa8bd375e53e5f2effac5472b43/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df855ce3547caa8bd375e53e5f2effac5472b43/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=1df855ce3547caa8bd375e53e5f2effac5472b43", "patch": "@@ -154,6 +154,9 @@ static struct\n \n static struct\n {\n+  /* Number of hand-written 16-bit bswaps found.  */\n+  int found_16bit;\n+\n   /* Number of hand-written 32-bit bswaps found.  */\n   int found_32bit;\n \n@@ -1803,27 +1806,35 @@ static unsigned int\n execute_optimize_bswap (void)\n {\n   basic_block bb;\n-  bool bswap32_p, bswap64_p;\n+  bool bswap16_p, bswap32_p, bswap64_p;\n   bool changed = false;\n-  tree bswap32_type = NULL_TREE, bswap64_type = NULL_TREE;\n+  tree bswap16_type = NULL_TREE, bswap32_type = NULL_TREE, bswap64_type = NULL_TREE;\n \n   if (BITS_PER_UNIT != 8)\n     return 0;\n \n   if (sizeof (HOST_WIDEST_INT) < 8)\n     return 0;\n \n+  bswap16_p = (builtin_decl_explicit_p (BUILT_IN_BSWAP16)\n+\t       && optab_handler (bswap_optab, HImode) != CODE_FOR_nothing);\n   bswap32_p = (builtin_decl_explicit_p (BUILT_IN_BSWAP32)\n \t       && optab_handler (bswap_optab, SImode) != CODE_FOR_nothing);\n   bswap64_p = (builtin_decl_explicit_p (BUILT_IN_BSWAP64)\n \t       && (optab_handler (bswap_optab, DImode) != CODE_FOR_nothing\n \t\t   || (bswap32_p && word_mode == SImode)));\n \n-  if (!bswap32_p && !bswap64_p)\n+  if (!bswap16_p && !bswap32_p && !bswap64_p)\n     return 0;\n \n   /* Determine the argument type of the builtins.  The code later on\n      assumes that the return and argument type are the same.  */\n+  if (bswap16_p)\n+    {\n+      tree fndecl = builtin_decl_explicit (BUILT_IN_BSWAP16);\n+      bswap16_type = TREE_VALUE (TYPE_ARG_TYPES (TREE_TYPE (fndecl)));\n+    }\n+\n   if (bswap32_p)\n     {\n       tree fndecl = builtin_decl_explicit (BUILT_IN_BSWAP32);\n@@ -1863,6 +1874,13 @@ execute_optimize_bswap (void)\n \n \t  switch (type_size)\n \t    {\n+\t    case 16:\n+\t      if (bswap16_p)\n+\t\t{\n+\t\t  fndecl = builtin_decl_explicit (BUILT_IN_BSWAP16);\n+\t\t  bswap_type = bswap16_type;\n+\t\t}\n+\t      break;\n \t    case 32:\n \t      if (bswap32_p)\n \t\t{\n@@ -1890,7 +1908,9 @@ execute_optimize_bswap (void)\n \t    continue;\n \n \t  changed = true;\n-\t  if (type_size == 32)\n+\t  if (type_size == 16)\n+\t    bswap_stats.found_16bit++;\n+\t  else if (type_size == 32)\n \t    bswap_stats.found_32bit++;\n \t  else\n \t    bswap_stats.found_64bit++;\n@@ -1935,6 +1955,8 @@ execute_optimize_bswap (void)\n \t}\n     }\n \n+  statistics_counter_event (cfun, \"16-bit bswap implementations found\",\n+\t\t\t    bswap_stats.found_16bit);\n   statistics_counter_event (cfun, \"32-bit bswap implementations found\",\n \t\t\t    bswap_stats.found_32bit);\n   statistics_counter_event (cfun, \"64-bit bswap implementations found\","}]}