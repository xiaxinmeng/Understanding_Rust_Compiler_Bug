{"sha": "26392535a78d2e396cff24391be6f4920c632e2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYzOTI1MzVhNzhkMmUzOTZjZmYyNDM5MWJlNmY0OTIwYzYzMmUyYg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-12-19T19:06:34Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-12-19T19:06:34Z"}, "message": "ChannelInputStream.java: New file.\n\n2003-12-19  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/ChannelInputStream.java: New file.\n\t* java/nio/channels/Channels.java (newInputStream): Implemented.\n\t* java/nio/channels/FileChannelImpl.java\n\t(readImpl): Only put data into buffer if something was read.\n\t* Makefile.am (ordinary_java_source_files):\n\tAdded gnu/java/nio/ChannelInputStream.java.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r74842", "tree": {"sha": "54f8b26f344082df0e145f4f3cb044e281a93bf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54f8b26f344082df0e145f4f3cb044e281a93bf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26392535a78d2e396cff24391be6f4920c632e2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26392535a78d2e396cff24391be6f4920c632e2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26392535a78d2e396cff24391be6f4920c632e2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26392535a78d2e396cff24391be6f4920c632e2b/comments", "author": null, "committer": null, "parents": [{"sha": "cc16f8b948be00bdbac8af00a388a25a53da901f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc16f8b948be00bdbac8af00a388a25a53da901f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc16f8b948be00bdbac8af00a388a25a53da901f"}], "stats": {"total": 101, "additions": 98, "deletions": 3}, "files": [{"sha": "8db6d7373a3846599695fab817e455f5d68afe21", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26392535a78d2e396cff24391be6f4920c632e2b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26392535a78d2e396cff24391be6f4920c632e2b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=26392535a78d2e396cff24391be6f4920c632e2b", "patch": "@@ -1,3 +1,13 @@\n+2003-12-19  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/ChannelInputStream.java: New file.\n+\t* java/nio/channels/Channels.java (newInputStream): Implemented.\n+\t* java/nio/channels/FileChannelImpl.java\n+\t(readImpl): Only put data into buffer if something was read.\n+\t* Makefile.am (ordinary_java_source_files):\n+\tAdded gnu/java/nio/ChannelInputStream.java.\n+\t* Makefile.in: Regenerated.\n+\n 2003-12-19  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/nio/OutputStreamChannel.java: New file."}, {"sha": "acd6f2a2fa965ec4fc5217cc5cca993334b71943", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26392535a78d2e396cff24391be6f4920c632e2b/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26392535a78d2e396cff24391be6f4920c632e2b/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=26392535a78d2e396cff24391be6f4920c632e2b", "patch": "@@ -2224,6 +2224,7 @@ gnu/java/nio/NIOConstants.java \\\n gnu/java/nio/NIODatagramSocket.java \\\n gnu/java/nio/NIOServerSocket.java \\\n gnu/java/nio/NIOSocket.java \\\n+gnu/java/nio/ChannelInputStream.java \\\n gnu/java/nio/InputStreamChannel.java \\\n gnu/java/nio/OutputStreamChannel.java \\\n gnu/java/nio/PipeImpl.java \\"}, {"sha": "522cbcb5f5821061d16624bf30ddb7f2ca8ee03d", "filename": "libjava/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26392535a78d2e396cff24391be6f4920c632e2b/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26392535a78d2e396cff24391be6f4920c632e2b/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=26392535a78d2e396cff24391be6f4920c632e2b", "patch": "@@ -1931,6 +1931,7 @@ gnu/java/nio/NIOConstants.java \\\n gnu/java/nio/NIODatagramSocket.java \\\n gnu/java/nio/NIOServerSocket.java \\\n gnu/java/nio/NIOSocket.java \\\n+gnu/java/nio/ChannelInputStream.java \\\n gnu/java/nio/InputStreamChannel.java \\\n gnu/java/nio/OutputStreamChannel.java \\\n gnu/java/nio/PipeImpl.java \\\n@@ -3064,6 +3065,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/net/protocol/http/Handler.P \\\n .deps/gnu/java/net/protocol/jar/Connection.P \\\n .deps/gnu/java/net/protocol/jar/Handler.P \\\n+.deps/gnu/java/nio/ChannelInputStream.P \\\n .deps/gnu/java/nio/DatagramChannelImpl.P \\\n .deps/gnu/java/nio/DatagramChannelSelectionKey.P \\\n .deps/gnu/java/nio/FileLockImpl.P \\"}, {"sha": "4cf4875c3345a435974ca5e7f81a96de5db9560a", "filename": "libjava/gnu/java/nio/ChannelInputStream.java", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26392535a78d2e396cff24391be6f4920c632e2b/libjava%2Fgnu%2Fjava%2Fnio%2FChannelInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26392535a78d2e396cff24391be6f4920c632e2b/libjava%2Fgnu%2Fjava%2Fnio%2FChannelInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FChannelInputStream.java?ref=26392535a78d2e396cff24391be6f4920c632e2b", "patch": "@@ -0,0 +1,79 @@\n+/* ChannelInputStream.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.nio;\n+\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.IllegalBlockingModeException;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.SelectableChannel;\n+\n+/**\n+ * @author Michael Koch\n+ */\n+public final class ChannelInputStream extends InputStream\n+{\n+  private ReadableByteChannel ch;\n+  \n+  public ChannelInputStream (ReadableByteChannel ch)\n+  {\n+    super();\n+    \n+    this.ch = ch;\n+  }\n+\n+  public int read() throws IOException\n+  {\n+    if (ch instanceof SelectableChannel\n+\t&& (! ((SelectableChannel) ch).isBlocking()))\n+      throw new IllegalBlockingModeException();\n+      \n+    ByteBuffer buffer = ByteBuffer.allocate(1);\n+    int result = ch.read(buffer);\n+\n+    if (result == -1)\n+      return -1;\n+\n+    if (result == 0)\n+      throw new IOException(\"Could not read from channel\");\n+\n+     return buffer.get(0);\n+  }\n+}"}, {"sha": "d70410c6af34f271f074a799f55d7f94ce636ed7", "filename": "libjava/java/nio/channels/Channels.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26392535a78d2e396cff24391be6f4920c632e2b/libjava%2Fjava%2Fnio%2Fchannels%2FChannels.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26392535a78d2e396cff24391be6f4920c632e2b/libjava%2Fjava%2Fnio%2Fchannels%2FChannels.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FChannels.java?ref=26392535a78d2e396cff24391be6f4920c632e2b", "patch": "@@ -37,6 +37,7 @@\n \n package java.nio.channels;\n \n+import gnu.java.nio.ChannelInputStream;\n import gnu.java.nio.InputStreamChannel;\n import gnu.java.nio.OutputStreamChannel;\n import java.io.InputStream;\n@@ -55,9 +56,9 @@ public final class Channels\n   /**\n    * Constructs a stream that reads bytes from the given channel.\n    */\n-  public static InputStream newInputStream (ReadableByteChannel ch)\n+  public static InputStream newInputStream(ReadableByteChannel ch)\n   {\n-    throw new Error (\"not implemented\");\n+    return new ChannelInputStream(ch);\n   }\n   \n   /**"}, {"sha": "89ac11ad514b38b7ba1ba64571d9fff242fd6b7b", "filename": "libjava/java/nio/channels/FileChannelImpl.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26392535a78d2e396cff24391be6f4920c632e2b/libjava%2Fjava%2Fnio%2Fchannels%2FFileChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26392535a78d2e396cff24391be6f4920c632e2b/libjava%2Fjava%2Fnio%2Fchannels%2FFileChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FFileChannelImpl.java?ref=26392535a78d2e396cff24391be6f4920c632e2b", "patch": "@@ -169,7 +169,9 @@ private int implRead (ByteBuffer dst) throws IOException\n     byte[] buffer = new byte [dst.remaining ()];\n     \n     result = implRead (buffer, 0, buffer.length);\n-    dst.put (buffer, 0, result);\n+\n+    if (result > 0)\n+      dst.put (buffer, 0, result);\n \n     return result;\n   }"}]}