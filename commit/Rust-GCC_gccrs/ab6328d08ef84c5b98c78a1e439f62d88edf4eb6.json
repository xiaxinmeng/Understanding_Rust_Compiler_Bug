{"sha": "ab6328d08ef84c5b98c78a1e439f62d88edf4eb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI2MzI4ZDA4ZWY4NGM1Yjk4Yzc4YTFlNDM5ZjYyZDg4ZWRmNGViNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-14T09:19:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-14T09:19:30Z"}, "message": "Resync\n\nFrom-SVN: r127476", "tree": {"sha": "31ae4158402501d8c8c55a85dc3774e6293f379a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31ae4158402501d8c8c55a85dc3774e6293f379a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab6328d08ef84c5b98c78a1e439f62d88edf4eb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab6328d08ef84c5b98c78a1e439f62d88edf4eb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab6328d08ef84c5b98c78a1e439f62d88edf4eb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab6328d08ef84c5b98c78a1e439f62d88edf4eb6/comments", "author": null, "committer": null, "parents": [{"sha": "38aa612c51df995df40324b0e9afcc0fc7a03bcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38aa612c51df995df40324b0e9afcc0fc7a03bcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38aa612c51df995df40324b0e9afcc0fc7a03bcf"}], "stats": {"total": 1406, "additions": 1406, "deletions": 0}, "files": [{"sha": "4cd1c60d34b96c4d2e39c3dabf1c3bc59dcb912e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 1406, "deletions": 0, "changes": 1406, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6328d08ef84c5b98c78a1e439f62d88edf4eb6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6328d08ef84c5b98c78a1e439f62d88edf4eb6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ab6328d08ef84c5b98c78a1e439f62d88edf4eb6", "patch": "@@ -1,3 +1,1409 @@\n+2007-08-14  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* g-soccon-interix.ads, a-excpol-interix.adb, a-intnam-interix.ads, \n+\ts-osinte-interix.ads, system-interix.ads: Removed.\n+\n+2007-08-14  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* a-calend-vms.adb, a-calend.adb (\"+\", \"-\", Add, Subtract): Remove\n+\tcalls to Check_Within_Time_Bounds.\n+\t(\"+\", \"-\", Add, Subtract): Remove calls to Check_Within_Time_Bounds.\n+\t(Difference): Account for possible rounding of the resulting difference\n+\n+2007-08-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* uintp.adb, a-ztedit.adb, s-wchcon.adb, xnmake.adb, s-wchcon.adb,\n+\tpar-ch5.adb, par-ch10.adb, get_targ.adb, a-wtedit.adb, a-teioed.adb,\n+\ts-osinte-solaris.adb, s-osinte-solaris.ads,\n+\ts-osinte-freebsd.ads, s-osinte-freebsd.adb: Minor reformatting.\n+\n+\t* styleg.adb, styleg.ads, stylesw.adb, stylesw.ads: implement style\n+\tswitch -gnatyS. Enable -gnatyS in GNAT style check mode\n+\n+2007-08-14  Robert Dewar  <dewar@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* inline.adb, types.ads, inline.ads, frontend.adb, alloc.ads: \n+\tSuppress unmodified in-out parameter warning in some cases\n+\tThis patch is a also fairly significant change to the way suppressible\n+\tchecks are handled.\n+\n+\t* checks.ads, checks.adb (Install_Null_Excluding_Check): No check\n+\tneeded for access to concurrent record types generated by the expander.\n+\t(Generate_Range_Check): When generating a temporary to capture the\n+\tvalue of a conversion that requires a range check, set the type of the\n+\ttemporary before rewriting the node, so that the type is always\n+\tproperly placed for back-end use.\n+\t(Apply_Float_Conversion_Check): Handle case where the conversion is\n+\ttruncating.\n+\t(Get_Discriminal): Code reformatting. Climb the scope stack looking\n+\tfor a protected type in order to examine its discriminants.\n+\n+2007-08-14  Robert Dewar  <dewar@adacore.com>\n+\t    Gary Dismukes  <dismukes@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\t    Thomas Quinot  <quinot@adacore.com>\n+\n+\t* a-stzsup.adb, nlists.adb, lib-util.adb, treepr.adb, \n+\ta-stwisu.adb, a-strsup.adb: Fix warnings for range\n+\ttests optimized out.\n+\n+\t* exp_ch4.adb (Expand_N_In): Add warnings for range tests optimized out.\n+\t(Get_Allocator_Final_List): For the case of an anonymous access type\n+\tthat has a specified Associated_Final_Chain, do not go up to the\n+\tenclosing scope.\n+\t(Expand_N_Type_Conversion): Test for the case of renamings of access\n+\tparameters when deciding whether to apply a run-time accessibility\n+\tcheck.\n+\t(Convert_Aggr_In_Allocator): Use Insert_Actions to place expanded\n+\taggregate code before allocator, and ahead of declaration for\n+\ttemporary, to prevent access before elaboration when the allocator is\n+\tan actual for an access parameter.\n+\t(Expand_N_Type_Conversion): On an access type conversion involving an\n+\taccess parameter, do not apply an accessibility check when the\n+\toperand's original node was an attribute other than 'Access. We now\n+\tcreate access conversions for the expansion of 'Unchecked_Access and\n+\t'Unrestricted_Access in certain cases and clearly accessibility should\n+\tnot be checked for those.\n+\n+\t* exp_ch6.ads, exp_ch6.adb (Add_Call_By_Copy_Code): For an actual that\n+\tincludes a type conversion of a packed component that has been expanded,\n+\trecover the original expression for the object, and use this expression\n+\tin the post-call assignment statement, so that the assignment is made\n+\tto the object and not to a back-end temporary.\n+\t(Freeze_Subprogram): In case of primitives of tagged types not defined\n+\tat the library level force generation of code to register the primitive\n+\tin the dispatch table. In addition some code reorganization has been\n+\tdone to leave the implementation clear.\n+\t(Expand_Call): When expanding an inherited implicit conversion,\n+\tpreserve the type of the inherited function after the intrinsic\n+\toperation has been expanded.\n+\n+\t* exp_ch2.ads, exp_ch2.adb\n+\t(Expand_Entry_Parameter.In_Assignment_Context): An implicit dereference\n+\tof an entry formal appearing in an assignment statement does not assign\n+\tto the formal.\n+\t(Expand_Current_Value): Instead of calling a routine to determine\n+\twhether the prefix of an attribute reference should be optimized or\n+\tnot, prevent the optimization of such prefixes all together.\n+\n+\t* lib-xref.adb (Generate_Reference.Is_On_LHS): An indexed or selected\n+\tcomponent whose prefix is known to be of an access type is an implicit\n+\tdereference and does not assign to the prefix.\n+\n+2007-08-14  Ed Schonberg  <schonberg@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\n+\t* atree.ads, atree.adb (New_Copy_Tree): If hash table is being used and\n+\titype is visited, make an entry into table to link associated node and\n+\tnew itype.\n+\tAdd comments and correct harmless error in Build_NCT_Hash_Tables\n+\t(Array_Aggr_Subtype): Associate each itype created for an index type to\n+\tthe corresponding range construct, and not to the aggregate itself. to\n+\tmaintain a one-to-one correspondence between itype and its associated\n+\tnode, to prevent errors when complex expression is copied.\n+\tFix mishandling of multiple levels of parens\n+\n+\t* sem_aggr.adb: Create a limited view of an incomplete type, to make\n+\ttreatment of limited views uniform for all visible declarations in a\n+\tlimited_withed package.\n+\t(New_Copy_Tree): If hash table is being used and itype is visited,\n+\tmake an entry into table to link associated node and new itype.\n+\t(Resolve_Record_Aggregate): Do not add an others box association for a\n+\tdiscriminated record component that has only discriminants, when there\n+\tis a box association for the component itself.\n+\n+\t* par-ch4.adb: Fix mishandling of multiple levels of parens\n+\n+2007-08-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* comperr.adb: Fix problem with suppressing warning messages from gigi\n+\n+\t* erroutc.ads, erroutc.adb, errout.ads, \n+\terrout.adb (Write_Eol): Remove trailing spaces before writing the line\n+\t(Write_Eol_Keep_Blanks): New procedure to write a line, including\n+\tpossible trailing spaces.\n+\t(Output_Source_Line): Call Write_Eol_Keep_Blanks to output a source line\n+\tFix problem with suppressing warning messages from back end\n+\tImprove handling of deleted warnings\n+\n+\t* gnat1drv.adb: \n+\tFix problem with suppressing warning messages from back end\n+\tHandle setting of Static_Dispatch_Tables flag.\n+\n+\t* prepcomp.adb: \n+\tFix problem with suppressing warning messages from back end\n+\n+\t* exp_intr.adb: Improve handling of deleted warnings\n+\n+2007-08-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* debug.adb: Improve -gnatdI to cover all cases of serialization\n+\tAdd documentation of dZ, d.t\n+\n+\t* sprint.ads, sprint.adb: Improve -gnatdI to cover all cases of\n+\tserialization.\n+\t(Sprint_Node_Actual): Generate new output associated with implicit\n+\timportation and implicit exportation of object declarations.\n+\n+2007-08-14  Ed Schonberg  <schonberg@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\t    Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* einfo.ads, einfo.adb: Create a limited view of an incomplete type,\n+\tto make treatment of limited views uniform for all visible declarations\n+\tin a limited_withed package.\n+\tImprove warnings for in out parameters\n+\t(Set_Related_Interaface/Related_Interface): Allow the use of this\n+\tattribute with constants.\n+\t(Write_Field26_Name): Handle attribute Related_Interface in constants.\n+\tWarn on duplicate pragma Preelaborable_Initialialization\n+\n+\t* sem_ch6.ads, sem_ch6.adb (Analyze_Subprogram_Body): Force the\n+\tgeneration of a freezing node to ensure proper management of null\n+\texcluding access types in the backend.\n+\t(Create_Extra_Formals): Test base type of the formal when checking for\n+\tthe need to add an extra accessibility-level formal. Pass the entity E\n+\ton all calls to Add_Extra_Formal (rather than Scope (Formal) as was\n+\toriginally being done in a couple of cases), to ensure that the\n+\tExtra_Formals list gets set on the entity E when the first entity is\n+\tadded.\n+\t(Conforming_Types): Add missing calls to Base_Type to the code that\n+\thandles anonymous access types. This is required to handle the\n+\tgeneral case because Process_Formals builds internal subtype entities\n+\tto handle null-excluding access types.\n+\t(Make_Controlling_Function_Wrappers): Create wrappers for constructor\n+\tfunctions that need it, even when not marked Requires_Overriding.\n+\tImprove warnings for in out parameters\n+\t(Analyze_Function_Return): Warn for disallowed null return\n+\tWarn on return from procedure with unset out parameter\n+\tEnsure consistent use of # in error messages\n+\t(Check_Overriding_Indicator): Add in parameter Is_Primitive.\n+\t(Analyze_Function_Return): Move call to Apply_Constraint_Check before\n+\tthe implicit conversion of the expression done for anonymous access\n+\ttypes. This is required to generate the code of the null excluding\n+\tcheck (if required).\n+\n+\t* sem_warn.ads, sem_warn.adb (Check_References.Publicly_Referenceable):\n+\tA formal parameter is never publicly referenceable outside of its body.\n+\t(Check_References): For an unreferenced formal parameter in an accept\n+\tstatement, use the same warning circuitry as for subprogram formal\n+\tparameters.\n+\t(Warn_On_Unreferenced_Entity): New subprogram, taken from\n+\tOutput_Unreferenced_Messages, containing the part of that routine that\n+\tis now reused for entry formals as described above.\n+\t(Goto_Spec_Entity): New function\n+\t(Check_References): Do not give IN OUT warning for dispatching operation\n+\tImprove warnings for in out parameters\n+\t(Test_Ref): Check that the entity is not undefinite before calling\n+\tScope_Within, in order to avoid infinite loops.\n+\tWarn on return from procedure with unset out parameter\n+\tImproved warnings for unused variables\n+\n+2007-08-14  Robert Dewar  <dewar@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\t    Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Handle case of child unit\n+\t(Expand_N_Attribute_Reference): Further unify the handling of the\n+\tthree forms of access attributes, using common code now for all three\n+\tcases. Add a test for the case of applying an access attribute to\n+\tan explicit dereference when the context is an access-to-interface\n+\ttype. In that case we need to apply the conversion to the prefix\n+\tof the explicit dereference rather than the prefix of the attribute.\n+\t(Attribute_Version, UET_Address): Set entity as internal to ensure\n+\tproper dg output of implicit importation.\n+\t(Expand_Access_To_Type): Removed.\n+\t(Expand_N_Attribute_Reference): Merge the code from the three cases\n+\tof access attributes, since the processing is largely identical for\n+\tthese cases. The substantive fix here is to process the case of a\n+\ttype name prefix (current instance case) before handling the case\n+\tof interface prefixes.\n+\n+2007-08-14  Thomas Quinot  <quinot@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch3.ads, exp_ch3.adb (Add_Final_Chain): New subprogram.\n+\t(Freeze_Array_Type, Freeze_Record_Type): For the case of a component\n+\ttype that is an anonymous access to controlled object, establish\n+\tan associated finalization chain to avoid corrupting the global\n+\tfinalization list when a dynamically allocated object designated\n+\tby such a component is deallocated.\n+\t(Make_Controlling_Function_Wrappers): Create wrappers for constructor\n+\tfunctions that need it, even when not marked Requires_Overriding.\n+\t(Initialize_Tag): Replace call to has_discriminants by call to\n+\tIs_Variable_Size_Record in the circuitry that handles the\n+\tinitialization of secondary tags.\n+\t(Is_Variable_Size_Record): New implementation.\n+\t(Expand_N_Object_Declaration): Suppress call to init proc if there is a\n+\tSuppress_Initialization pragma for a derived type.\n+\t(Is_Variable_Size_Record): New subprogram.\n+\t(Build_Offset_To_Top_Functions): New implementation that simplifies the\n+\tinitial version of this routine and also fixes problems causing\n+\tincomplete initialization of the table of interfaces.\n+\t(Build_Init_Procedure): Improve the generation of code to initialize the\n+\tthe tag components of secondary dispatch tables.\n+\t(Init_Secondary_Tags): New implementation that simplifies the previous\n+\tversion of this routine.\n+\t(Make_DT): Add parameter to indicate when type has been frozen by an\n+\tobject declaration, for diagnostic purposes.\n+\t(Check_Premature_Freezing): New subsidiary procedure of Make_DT, to\n+\tdiagnose attemps to freeze a subprogram when some untagged type of its\n+\tprofile is a private type whose full view has not been analyzed yet.\n+\t(Freeze_Array_Type): Generate init proc for packed array if either\n+\tInitialize or Normalize_Scalars is set.\n+\t(Make_Controlling_Function_Wrappers, Make_Null_Procedure_Specs): when\n+\tconstructing the new profile, copy the null_exclusion indicator for each\n+\tparameter, to ensure full conformance of the new body with the spec.\n+\n+\t* sem_type.ads, sem_type.adb (Make_Controlling_Function_Wrappers):\n+\tCreate wrappers for constructor functions that need it, even when not\n+\tmarked Requires_Overriding.\n+\t(Covers): Handle properly designated types of anonymous access types,\n+\twhose non-limited views are themselves incomplete types.\n+\t(Add_Entry): Use an entity to store the abstract operation which hides\n+\tan interpretation.\n+\t(Binary_Op_May_Be_Hidden): Rename to Binary_Op_Interp_Has_Abstract_Op.\n+\t(Collect_Interps): Use Empty as an actual for Abstract_Op in the\n+\tinitialization aggregate.\n+\t(Function_Interp_May_Be_Hidden): Rename to\n+\tFunction_Interp_Has_Abstract_Op.\n+\t(Has_Compatible_Type): Remove machinery that skips interpretations if\n+\tthey are labeled as potentially hidden by an abstract operator.\n+\t(Has_Hidden_Interp): Rename to Has_Abstract_Op.\n+\t(Set_May_Be_Hidden): Rename to Set_Abstract_Op.\n+\t(Write_Overloads): Output the abstract operator if present.\n+\t(Add_Entry): Before inserting a new entry into the interpretation table\n+\tfor a node, determine whether the entry will be disabled by an abstract\n+\toperator.\n+\t(Binary_Op_Interp_May_Be_Hidden): New routine.\n+\t(Collect_Interps): Add value for flag May_Be_Hidden in initialization\n+\taggregate.\n+\t(Function_Interp_May_Be_Hidden): New routine.\n+\t(Has_Compatible_Type): Do not consider interpretations hidden by\n+\tabstract operators when trying to determine whether two types are\n+\tcompatible.\n+\t(Has_Hidden_Interp): New routine.\n+\t(Set_May_Be_Hidden_Interp): New routine.\n+\t(Write_Overloads): Write the status of flag May_Be_Hidden.\n+\n+2007-08-14  Ed Schonberg  <schonberg@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.ads, exp_disp.adb (Build_Dispatch_Tables): Handle tagged\n+\ttypes declared in the declarative part of a nested package body or in\n+\tthe proper body of a stub.\n+\t(Set_All_DT_Position): Add missing check to avoid wrong assignation\n+\tof the same dispatch table slot to renamed primitives.\n+\t(Make_Select_Specific_Data_Table): Handle private types.\n+\t(Tagged_Kind): Handle private types.\n+\t(Make_Tags, Make_DT): Set tag entity as internal to ensure proper dg\n+\toutput of implicit importation and exportation.\n+\t(Expand_Interface_Thunk): Fix bug in the expansion assuming that the\n+\tfirst formal of the thunk is always associated with the controlling\n+\ttype. In addition perform the following code cleanup: remove formal\n+\tThunk_Alias which is no longer required, cleanup evaluation of the\n+\tthe controlling type, and update the documentation.\n+\tReplace occurrence of Default_Prim_Op_Count by\n+\tMax_Predef_Prims. Addition of compile-time check to verify\n+\tthat the value of Max_Predef_Prims is correct.\n+\t(Check_Premature_Freezing): Apply check in Ada95 mode as well.\n+\t(Make_DT): Add parameter to indicate when type has been frozen by an\n+\tobject declaration, for diagnostic purposes.\n+\t(Build_Static_Dispatch_Tables): New subprogram that takes care of the\n+\tconstruction of statically allocated dispatch tables.\n+\t(Make_DT): In case of library-level tagged types export the declaration\n+\tof the primary tag. Remove generation of tags (now done by Make_Tags).\n+\tAdditional modifications to handle non-static generation of dispatch\n+\ttables. Take care of building tables for asynchronous interface types\n+\t(Make_Tags): New subprogram that generates the entities associated with\n+\tthe primary and secondary tags of Typ and fills the contents of Access_\n+\tDisp_Table. In case of library-level tagged types imports the forward\n+\tdeclaration of the primary tag that will be declared later by Make_DT.\n+\t(Expand_Interface_Conversion): In case of access types to interfaces\n+\treplace an itype declaration by an explicit type declaration to avoid\n+\tproblems associated with the scope of such itype in transient blocks.\n+\n+2007-08-14  Robert Dewar  <dewar@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_util.ads, exp_util.adb: \n+\tThis patch replaces a number of occurrences of explicit tests for N_Null\n+\twith calls to Known_Null. This improves tracking of null values, since\n+\tKnown_Null also catches null constants, and variables currently known to\n+\tbe null, so we get better tracking.\n+\t(Ensure_Defined): create an itype reference only in the scope of the\n+\titype.\n+\t(Side_Effect_Free): A selected component of an access type that\n+\tdenotes a component with a rep clause must be treated as not\n+\tside-effect free, because if it is part of a linked structure its\n+\tvalue may be affected by a renaming.\n+\t(Expand_Subtype_From_Expr): For limited objects initialized with build\n+\tin place function calls, do nothing; otherwise we prematurely introduce\n+\tan N_Reference node in the expression initializing the object, which\n+\tbreaks the circuitry that detects and adds the additional arguments to\n+\tthe called function. Bug found working in the new patch for statically\n+\tallocated dispatch tables.\n+\t(Is_Library_Level_Tagged_Type): New subprogram.\n+\t(Remove_Side_Effects): If the expression of an elementary type is an\n+\toperator treat as a function call.\n+\t(Make_Literal_Range): If the index type of the array is not integer, use\n+\tattributes properly to compute the constraint on the resulting aggregate\n+\twhich is a string.\n+\n+\t* freeze.ads, freeze.adb (Freeze_Entity): If the entity is a\n+\tclass-wide type whose base type is an incomplete private type, leave\n+\tclass-wide type unfrozen so that freeze nodes can be generated\n+\tproperly at a later point.\n+\t(Freeze_Entity, array case): Handle case of pragma Pack and component\n+\tsize attributre clause for same array.\n+\n+2007-08-14  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj.ads, prj.adb: Update Project Manager to new attribute names for\n+\tgprbuild.\n+\tAllow all valid declarations in configuration project files\n+\t(Reset): Initialize all tables and hash tables in the project tree data\n+\tMajor update of the Project Manager and of the project aware tools,\n+\tincluding gprmake, so that the same sources in the GNAT repository\n+\tcan be used by gprbuild.\n+\t(Slash_Id): Change type to be Path_Name_Type\n+\t(Slash): Return a Path_Name_Type instead of a File_Name_Type\n+\n+\t* prj-attr.ads, prj-attr.adb: Remove attributes no longer used by\n+\tgprbuild.\n+\tUpdate Project Manager to new attribute names for ghprbuild\n+\tAllow all valid declarations in configuration project files\n+\tMajor update of the Project Manager and of the project aware tools,\n+\tincluding gprmake, so that the same sources in the GNAT repository\n+\tcan be used by gprbuild.\n+\n+\t* prj-com.ads: \n+\tMajor update of the Project Manager and of the project aware tools,\n+\tincluding gprmake, so that the same sources in the GNAT repository\n+\tcan be used by gprbuild.\n+\n+\t* prj-dect.adb (Prj.Strt.Attribute_Reference): Set correctly the case\n+\tinsensitive flag for attributes with optional index.\n+\t(Prj.Dect.Parse_Attribute_Declaration): For case insensitive associative\n+\tarray attribute, put the index in lower case.\n+\tUpdate Project Manager to new attribute names for ghprbuild\n+\tAllow all valid declarations in configuration project files\n+\tMajor update of the Project Manager and of the project aware tools,\n+\tincluding gprmake, so that the same sources in the GNAT repository\n+\tcan be used by gprbuild.\n+\n+\t* prj-env.ads, prj-env.adb: \n+\tMajor update of the Project Manager and of the project aware tools,\n+\tincluding gprmake, so that the same sources in the GNAT repository\n+\tcan be used by gprbuild.\n+\t(Get_Reference): Change type of parameter Path to Path_Name_Type\n+\n+\t* prj-ext.ads, prj-ext.adb (Initialize_Project_Path): Make sure, after\n+\tremoving '-' from the path to start with the first character of the\n+\tnext directory.\n+\tMajor update of the Project Manager and of the project aware tools,\n+\tincluding gprmake, so that the same sources in the GNAT repository\n+\tcan be used by gprbuild.\n+\tMajor update of the Project Manager and of the project aware tools,\n+\tincluding gprmake, so that the same sources in the GNAT repository\n+\tcan be used by gprbuild.\n+\n+\t* prj-nmsc.ads, prj-nmsc.adb: \n+\tUpdate Project Manager to new attribute names for ghprbuild\n+\tAllow all valid declarations in configuration project files\n+\t(Search_Directories): Detect subunits that are specified with an\n+\tattribute Body in package Naming. Do not replace a source/unit in the\n+\tsame project when the order of the source dirs are known. Detect\n+\tduplicate sources/units in the same project when the order of the\n+\tsource dirs are not known.\n+\t(Check_Ada_Name): Allow all identifiers that are not reserved words\n+\tin Ada 95.\n+\tMajor update of the Project Manager and of the project aware tools,\n+\tincluding gprmake, so that the same sources in the GNAT repository\n+\tcan be used by gprbuild.\n+\t(Look_For_Sources): If the list of sources is empty, set the object\n+\tdirectory of non extending project to nil.\n+\tChange type of path name variables to be Path_Name_Type\n+\t(Locate_Directory): Make sure that on Windows '/' is converted to '\\',\n+\totherwise creating missing directories will fail.\n+\n+\t* prj-attr-pm.adb, prj-tree.ads, prj-proc.ads, prj-proc.adb, \n+\tprj-part.ads, prj-part.adb:\n+\tMajor update of the Project Manager and of the project aware tools,\n+\tincluding gprmake, so that the same sources in the GNAT repository\n+\tcan be used by gprbuild.\n+\n+\t* prj-strt.adb (Prj.Strt.Attribute_Reference): Set correctly the case\n+\tinsensitive flag for attributes with optional index.\n+\t(Prj.Dect.Parse_Attribute_Declaration): For case insensitive associative\n+\tarray attribute, put the index in lower case.\n+\t(Parse_Variable_Reference): Allow the current project name to be used in\n+\tthe prefix of an attribute reference.\n+\n+\t* prj-util.ads, prj-util.adb\n+\t(Value_Of (for arrays)): New Boolean parameter Force_Lower_Case_Index,\n+\tdefaulted to False. When True, always check against indexes in lower\n+\tcase.\n+\n+\t* snames.ads, snames.h, snames.adb: \n+\tUpdate Project Manager to new attribute names for gprbuild\n+\tAllow all valid declarations in configuration project files\n+\n+2007-08-14  Robert Dewar  <dewar@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* opt.ads: Warning for non-local exception propagation now off by\n+\tdefault\n+\tNew switch -gnatI to disable representation clauses\n+\tImplement new pragma Implicit_Packing\n+\n+\t* usage.adb: \n+\tWarning for non-local exception propagation now off by default\n+\tAdd warning for unchecked conversion of pointers wi different\n+\tconventions.\n+\tNew switch -gnatI to disable representation clauses\n+\n+\t* usage.adb: new switch -gnatyS\n+\n+\t* gnat_ugn.texi: For the gnatcheck Non_Qualified_Aggregates rule add a\n+\tnote that aggregates of anonymous array types are not flagged.\n+\t-gnatwc now includes membership tests optimized away\n+\t-gnatw.x warnings are now off by default\n+\tAdded conditional compilation Appendix\n+\tAdd documentation of -gnatI\n+\tAdd documentation for new -gnatyS style check\n+\tUpdate documentation about SAL and auto-init on Windows.\n+\n+\t* gnat_rm.texi: \n+\tAdd documentation for pragma Check_Name and 'Enabled attribute\n+\tDocument that Eliminate on dispatching operation is ignored\n+\tDocument IDE attributes VCS_Repository_Root and VCS_Patch_Root.\n+\tDocument pragma Main\n+\tDocument pragma Implicit_Packing\n+\n+\t* sem_ch13.adb: Add warning for unchecked conversion of pointers wi\n+\tdifferent conventions\n+\tNew switch -gnatI to disable representation clauses\n+\n+\t* switch-c.adb (Scan_Front_End_Switches): When a -gnat switch is not\n+\trecognized, report the invalid characters including \"-gnat\" instead of\n+\tjust the first character in the switch.\n+\tNew switch -gnatI to disable representation clauses\n+\tSet Warn_On_Object_Renames_Function true for -gnatg\n+\n+\t* vms_data.ads: Add doc for /IGNORE_REP_CLAUSES\n+\tAdd STATEMENTS_AFTER_THEN_ELSE as synonym for -gnatyS\n+\tAdd qualifier /ADD_PROJECT_SEARCH_DIR= for different tools, equivalent\n+\tto switch -aP (add directory to project search dir).\n+\n+\t* par-prag.adb: Implement new pragma Implicit_Packing\n+\n+\t* sem_prag.adb (Analyze_Pragma, case Complex_Representation): Mark the\n+\ttype as having a non-standard representation, to force expansion on\n+\tconversion to related types.\n+\t(Analyze_Pragma): Warn on misspelled pragma\n+\t(Analyze_Pragma, case Convention_Identifier): Fix checking of second arg\n+\tEnsure consistent use of # in error messages\n+\tImplement pragma Implicit_Packing\n+\n+2007-08-14  Olivier Hainque  <hainque@adacore.com>\n+\t    Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* targtyps.c (get_target_maximum_default_alignment): New function.\n+\tMaximum alignment\n+\tthat the compiler might choose by default for a type or object.\n+\t(get_target_default_allocator_alignment): New function. Alignment known\n+\tto be honored by the target default allocator.\n+\t(get_target_maximum_allowed_alignment): New function. Maximum alignment\n+\twe might accept for any type or object on the target.\n+\t(get_target_maximum_alignment): Now synonym of maximum_default_alignment\n+\n+\t* gigi.h (get_target_maximum_default_alignment): Declare new function.\n+\t(get_target_default_allocator_alignment): Likewise.\n+\t(get_target_maximum_allowed_alignment): Likewise.\n+\n+\tPR ada/19037\n+\t* decl.c (gnat_to_gnu_entity) <object>: Except for the renaming of the\n+\tresult of a function call, first try to use a stabilized reference for\n+\ta constant renaming too.\n+\t(validate_alignment): Use target_maximum_allowed_alignment instead of\n+\tMAX_OFILE_ALIGNMENT as the upper bound to what we accept.\n+\t(gnat_to_gnu_entity): Use common nodes directly.\n+\t(gnat_to_gnu_entity) <object>: Pick the values of the type to annotate\n+\talignment and size for the object.\n+\t(lvalue_required_p): Handle N_Parameter_Association like N_Function_Call\n+\tand N_Procedure_Call_Statement.\n+\t(takes_address): Rename to lvalue_required_p, add third parameter\n+\t'aliased' and adjust recursive calls.\n+\t<N_Indexed_Component>: Update 'aliased' from the array type.\n+\t<N_Selected_Component>: New case.\n+\t<N_Object_Renaming_Declaration>: New Likewise.\n+\t(Identifier_to_gnu): Adjust for above changes.\n+\t(maybe_stabilize_reference) <CONST_DECL>: New case.\n+\n+\t* utils2.c (build_binary_op) <ARRAY_RANGE_REF>: Look through conversion\n+\tbetween type variants.\n+\t(build_simple_component_ref): Likewise.\n+\t(build_call_alloc_dealloc): Use target_default_allocator_alignment\n+\tinstead of BIGGEST_ALIGNMENT as the threshold to trigger the super\n+\taligning type circuitry for allocations from the default storage pool.\n+\t(build_allocator): Likewise.\n+\t(build_simple_component_ref): Manually fold the reference for a\n+\tconstructor if the record type contains a template.\n+\n+\t* utils.c (value_zerop): Delete.\n+\t(gnat_init_decl_processing): Emit debug info for common types.\n+\t(rest_of_record_type_compilation): If a union contains a field\n+\twith a non-constant qualifier, treat it as variable-sized.\n+\t(finish_record_type): Give the stub TYPE_DECL a name.\n+\t(rest_of_record_type_compilation): Likewise.\n+\t(convert) <CONSTRUCTOR>: New case.  Build a new constructor if\n+\ttypes are equivalent array types.\n+\t(create_field_decl): Claim fields of any ARRAY_TYPE are addressable,\n+\teven if the type is not passed by reference.\n+\t(static_ctors, static_dtors): Delete.\n+\t(end_subprog_body): Do not record constructors and destructors.\n+\t(build_global_cdtor): Delete.\n+\t(gnat_write_global_declarations): Do not call build_global_cdtor.\n+\n+\t* lang-specs.h: If TARGET_VXWORKS_RTP is defined, append -mrtp when\n+\t-fRTS=rtp is specified.\n+\tIf CONFIG_DUAL_EXCEPTIONS is 1, append -fsjlj when -fRTS=sjlj is\n+\tspecified.\n+\n+\t* misc.c (gnat_init_gcc_eh): Use __gnat_eh_personality_sj for the name\n+\tof the personality function with SJLJ exceptions.\n+\n+        * raise-gcc.c (PERSONALITY_FUNCTION): Use __gnat_eh_personality_sj for\n+\tthe name of the personality function with SJLJ exceptions.\n+\n+2007-08-14  Robert Dewar  <dewar@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* par.ads, par.adb: Improve handling of extra right parens.\n+\t(Par): Remove flag From_Limited_With_Clause.\n+\n+\t* par-util.adb, par-ch3.adb: Improve error recovery for bad constraint\n+\tImprove handling of extra right parens.\n+\n+2007-08-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* par-tchk.adb (TF_Semicolon): Improve error recovery\n+\n+2007-08-14  Robert Dewar  <dewar@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.ads, sem_attr.adb (Analyze_Attribute, case Value): For\n+\tenumeration type, mark all literals as referenced.\n+\t(Eval_Attribute, case 'Image): If the argument is an enumeration\n+\tliteral and names are available, constant-fold but mark nevertheless as\n+\tnon-static.\n+\tClean up function names.\n+\t(Name_Modifies_Prefix): Rename to Name_Implies_Lvalue_Prefix. Clarify\n+\tcomment.\n+\t(Requires_Simple_Name_Prefix): Removed.\n+\n+2007-08-14  Robert Dewar  <dewar@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch11.adb: Improved warnings for unused variables\n+\n+\t* sem_ch3.ads, sem_ch3.adb (Build_Derived_Record_Type): If the ancestor\n+\tis a synchronized interface, the derived type is limited.\n+\t(Analyze_Object_Declaration): Mark the potential coextensions in the\n+\tdefinition and expression of an object declaration node.\n+\t(Build_Derived_Type): For the completion of a private type declaration\n+\twith a derived type declaration, chain the parent type's representation\n+\titems to the last representation item of the derived type (not the\n+\tfirst one) if they are not present already.\n+\t(Analyze_Object_Declaration, Constant_Redeclaration): Allow incomplete\n+\tobject declaration of forward references to tags.\n+\t(Access_Subprogram_Declaration): In Ada2005, anonymous access to\n+\tsubprogram types can appear as access discriminants of synchronized\n+\ttypes.\n+\t(OK_For_Limited_Init_In_05): The initialization is legal is it is a call\n+\tgiven in prefixed form as a selected component.\n+\t(Process_Discriminants): If not all discriminants have defaults, place\n+\terror message on a default that is present.\n+\t(Analyze_Private_Extension_Declaration): Diagnose properly an attempt to\n+\textend a synchronized tagged type.\n+\tImproved warnings for unused variables\n+\t(Is_Visible_Component): Fix a visibility hole on a component inherited\n+\tby a private extension when parent is itself declared as a private\n+\textension, and the derivation is in a child unit.\n+\t(Find_Hidden_Interface): Move spec from the package body.\n+\n+2007-08-14  Robert Dewar  <dewar@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb: Improve warnings on redundant assignments\n+\n+\t* sem_util.ads, sem_util.adb: (Is_Variable): Add defense against junk\n+\tparameter\n+\t(Is_Synchronized_Tagged_Type): New subprogram that returns true\n+\tin case of synchronized tagged types (AARM 3.9.4 (6/2)).\n+\t(Safe_To_Capture_Value): Can now return True for constants, even if Cond\n+\tis set to False. Improves handling of Known_[Not_]Null.\n+\t(Wrong_Type): Special case address arithmetic attempt\n+\t(Collect_Abstract_Interfaces): Add new formal to allow collecting\n+\tabstract interfaces just using the partial view of private types.\n+\t(Has_Abstract_Interfaces): Add new formal to allow checking types\n+\tcovering interfaces using the partial view of private types.\n+\t(Is_Fully_Initialized_Type): Special VM case for uTag component. This\n+\tcomponent still needs to be defined in this case, but is never\n+\tinitialized as VMs are using other dispatching mechanisms.\n+\t(Abstract_Interface_List): For a protected type, use base type to get\n+\tproper declaration.\n+\tImprove warnings on redundant assignments\n+\t(Is_Variable): Handle properly an implicit dereference of a prefixed\n+\tfunction call.\n+\t(Build_Actual_Subtype): If this is an actual subtype for an\n+\tunconstrained formal parameter, use the sloc of the body for the new\n+\tdeclaration, to prevent anomalises in the debugger.\n+\n+2007-08-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_elim.adb (Set_Eliminated): Ignore pragma Eliminate for\n+\tdispatching operation\n+\n+2007-08-14  Ed Schonberg  <schonberg@adacore.com>\n+\t    Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_aggr.ads, \n+\texp_aggr.adb (Convert_Aggr_In_Allocator): Use Insert_Actions to place\n+\texpanded aggregate code before allocator, and ahead of declaration for\n+\ttemporary, to prevent access before elaboration when the allocator is\n+\tan actual for an access parameter.\n+\t(Is_Static_Dispatch_Table_Aggregate): Handle aggregates initializing\n+\tthe TSD and the table of interfaces.\n+\t(Convert_To_Assignments): Augment the test for delaying aggregate\n+\texpansion for limited return statements to include the case of extended\n+\treturns, to prevent creation of an unwanted transient scope.\n+\t(Is_Static_Dispatch_Table_Aggregate): New subprogram.\n+\t(Expand_Array_Aggregate): Handle aggregates associated with\n+\tstatically allocated dispatch tables.\n+\t(Expand_Record_Aggregate): Handle aggregates associated with\n+\tstatically allocated dispatch tables.\n+\t(Gen_Ctrl_Actions_For_Aggr): Generate a finalization list for allocators\n+\tof anonymous access type.\n+\n+2007-08-14  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_Assign_Array): If source or target of assignment\n+\tis a variable that renames a slice, use the variable itself in the\n+\texpannsion when the renamed expression itself may be modified between\n+\tthe declaration of the renaming and the array assignment.\n+\n+2007-08-14  Jerome Guitton  <guitton@adacore.com>\n+\n+\t* s-taprop-lynxos.adb, s-taprop-tru64.adb, s-taprop-irix.adb, \n+\ts-taprop-hpux-dce.adb, s-taprop-dummy.adb, s-taprop-solaris.adb, \n+\ts-taprop-vms.adb, s-taprop-posix.adb (Continue_Task, Stop_All_Tasks):\n+\tNew functions; dummy implementations.\n+\n+\t* s-osinte-vxworks.ads (Task_Stop, Task_Cont, Int_Lock, Int_Unlock): New\n+\tfunctions, used to implement the multi-tasks mode routines on VxWorks.\n+\n+\t* s-osinte-vxworks.adb, s-osinte-vxworks6.adb (Task_Cont, Task_Stop):\n+\tNew functions, thin\n+\tbinding to the VxWorks routines which have changed between VxWorks 5\n+\tand 6.\n+\t(Int_Lock, Int_Unlock): New function, thin binding to kernel routines\n+\twhich are not callable from a RTP.\n+\n+\t* s-taprop-vxworks.adb (Stop_All_Tasks, Continue_Task): New functions,\n+\timplemented for the multi-tasks mode on VxWorks 5 and 6.\n+\n+\t* s-taprop.ads (Stop_All_Tasks, Continue_Task): New functions.\n+\n+\t* s-tasdeb.ads, s-tasdeb.adb (Continue_All_Tasks, Stop_All_Tasks): New\n+\tfunctions.\n+\n+2007-08-14  Vincent Celier  <celier@adacore.com>\n+\n+\t* clean.adb, fmap.adb, sinput-p.adb, sinput-p.ads, gnatcmd.adb, \n+\tgnatname.adb, makeutl.ads, makeutl.adb, makegpr.adb, mlib-tgt-vms.adb\n+\tmlib-tgt-darwin.adb, mlib-tgt-lynxos.adb, mlib-prj.adb, mlib-tgt.adb, \n+\tmlib-tgt.ads, mlib-tgt-irix.adb mlib-tgt-hpux.adb, mlib-tgt-linux.adb, \n+\tmlib-tgt-solaris.adb, mlib-tgt-vms-alpha.adb, mlib-tgt-vms-ia64.adb, \n+\tmlib-tgt-mingw.adb, mlib-tgt-vxworks.adb, mlib-tgt-aix.adb,\n+\tmlib-tgt-tru64.adb, mlib.ads, mlib.adb (Create_Sym_Links): New\n+\tprocedure.\n+\t(Major_Id_Name): New function.\n+\tmlib-tgt.ads/mlib.tgt.adb:\n+\t(Library_Major_Minor_Id_Supported): New function, default returns True\n+\tMost mlib-tgt-*.adb that support shared libraries and symbolic links:\n+\t(Build_Dynamic_Library): Add support for major/minor ids for shared libs\n+\tOther mlib-tgt-*.adb (aix, mingw, vms, vxworks, xi):\n+\tImplementation of Library_Major_Minor_Id_Supported returns False\n+\tclean.adb:\n+\t(Clean_Library_Directory): If major/minor ids are supported, clean all\n+\tlibrary files.\n+\tMajor update of the Project Manager and of the project aware tools,\n+\tincluding gprmake, so that the same sources in the GNAT repository\n+\tcan be used by gprbuild.\n+\n+2007-08-14  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* system-solaris-x86.ads (ZCX_By_Default): Switch to True.\n+\t(GCC_ZCX_Support): Switch to True.\n+\t\n+\t* s-intman-solaris.adb (Notify_Exception): Call\n+\tAdjust_Context_For_Raise before raising, as expected for signal\n+\thandlers in general.\n+\t\n+\t* s-intman-posix.adb (Notify_Exception): Remove declaration of\n+\tAdjust_Context_For_Raise, moved to the spec of this unit to be visible\n+\tto other implementation bodies.\n+\t\n+\t* s-intman.ads (Adjust_Context_For_Raise): Declare and import here, to\n+\tbe visible by multiple implementation bodies.\n+\t\n+\t* init.c [VMS section] (__gnat_handle_vms_condition): Adjust context\n+\tonly for conditions coming from hardware.\n+\t[alpha-tru64 section] (__gnat_adjust_context_for_raise): Implement,\n+\tadjustments to signal context prior to exception raise from signal\n+\thandler.\n+\t(__gnat_map_signal for VxWorks): Map SIGSEGV to Storage_Error in RTP\n+\tmode.\n+\tSolaris section: (__gnat_adjust_context_for_raise): New function.\n+\tImplementation of the machine context adjustments to perform prior to\n+\traise from a signal handler. Version for both sparc and x86.\n+\t(HAVE_GNAT_ADJUST_CONTEXT_FOR_RAISE): Define.\n+\t(__gnat_error_handler): Expect a third argument, ucontext_t *. Adjust it\n+\tprior to raising as expected for any handler, before possible nested\n+\tfaults to make sure all the contexts in a chain have been adjusted by\n+\tthe time we propagate.\n+\n+2007-08-14  Pascal Obry  <obry@adacore.com>\n+\n+\t* s-osinte-mingw.ads: Add support for Ada.Execution_Time on Windows.\n+\t(SYSTEM_INFO): New record.\n+\t(SetThreadIdealProcessor): New imported routine needed for supporting\n+\ttask_info pragma on Windows.\n+\n+\t* s-taprop-mingw.adb (Enter_Task): Check if CPU number given in task\n+\tinfo can be applied to the current host.\n+\t(Create_Task): Set the ideal processor if information is present.\n+\n+\t* s-tasinf-mingw.adb, s-tasinf-mingw.ads,\n+\ta-exetim-mingw.adb, a-exetim-mingw.ads: New files.\n+\n+2007-08-14  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* s-taprop-linux.adb (Get_Stack_Attributes): New subprogram. Fetch the\n+\tstack size and initial stack pointer value for a given task.\n+\t(Enter_Task): Get the stack attributes of the task we are entering and\n+\tlet the stack checking engine know about them.\n+\n+\t* s-stchop.adb, s-stchop.ads (Notify_Stack_Attributes): New subprogram.\n+\tLet the stack-checking engine know about the initial sp value and stack\n+\tsize associated with the current task.\n+\t(Set_Stack_Info): If a stack base has been notified for the current\n+\ttask, honor it. Fallback to the previous less accurate method otherwise.\n+\n+\t* s-stchop-vxworks.adb (Notify_Stack_Attributes): Dummy body.\n+\n+2007-08-14  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch10.adb: Create a limited view of an incomplete type, to make\n+\ttreatment of limited views uniform for all visible declarations in a\n+\tlimited_withed package.\n+\tSet flag indicating that a subprogram body for a child unit has a\n+\tgenerated spec.\n+\t(Analyze_Compilation_Unit): If unit is a subprogram body that has no\n+\tseparate declaration, remove the unit name from visibility after\n+\tcompilation, so that environment is clean for subsequent compilations.\n+\t(Install_Limited_Context_Clauses): Do not install a\n+\tlimited_private_with_clause unless the current unit is a body or a\n+\tprivate child unit.\n+\t(Analyze_Subunit, Install_Parents): Treat generic and non-generic units\n+\tin the same fashion.\n+\t(Install_Limited_Withed_Unit): Do not install a limited with clause if\n+\tit applies to the declaration of the current package body.\n+\t(Remove_Private_With_Clauses): If there is a regular with_clause for\n+\tthe unit, delete Private_With_Clause from context, to prevent improper\n+\thiding when processing subsequent nested packages and instantiations.\n+\n+2007-08-14  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* adaint.c (__gnat_is_absolute_path): For VxWorks systems we accept\n+\tdir/file, device:/dir/file, and device:drive_letter:/dir/file as\n+\trepresenting absolute path names.\n+\t__gnat_set_file_time_name [VMS]: Fix some 64/32 bit issues.\n+\n+\t* cstreams.c (__gnat_full_name for VxWorks): Use\n+\t__gnat_is_absolute_path to detect whether we need to add the current\n+\tdirectory to normalize the path.\n+\n+2007-08-14  Javier Miranda  <miranda@adacore.com>\n+\n+\t* a-tags.ads, \n+\ta-tags.adb (Displace): Associate a message with the raised CE\n+\texception.\n+\t(To_Addr_Ptr, To_Address, To_Dispatch_Table_Ptr,\n+\tTo_Object_Specific_Data_Ptr To_Predef_Prims_Ptr,\n+\tTo_Tag_Ptr, To_Type_Specific_Data_Ptr): Moved here from the package\n+\tspec.\n+\t(Default_Prim_Op_Count): Removed.\n+\t(IW_Membership, Get_Entry_Index, Get_Offset_Index, Get_Prim_Op_Kind,\n+\tRegister_Tag, Set_Entry_Index, Set_Offset_To_Top, Set_Prim_Op_Kind):\n+\tRemove pragma Inline_Always.\n+\n+\t* rtsfind.ads (Default_Prim_Op_Count): Removed\n+\t(Max_Predef_Prims): New entity\n+\t(RE_Expanded_Name): Removed\n+\t(RE_HT_Link): Removed\n+\t(RE_Iface_Tag): Remmoved\n+\t(RE_Ifaces_Table): Removed\n+\t(RE_Interfaces_Array): Removed\n+\t(RE_Interface_Data_Element): Removed\n+\t(RE_Nb_Ifaces): Removed\n+\t(RE_RC_Offset): Removed\n+\t(RE_Static_Offset_To_Top): Removed\n+\n+\t* exp_atag.ads, exp_atag.adb (Build_Inherit_Prims): Addition of a new\n+\tformal.\n+\t(Build_Inherit_Predefined_Prims): Replace occurrences of Default_\n+\tPrim_Op_Count by Max_Predef_Prims.\n+\n+2007-08-14  Thomas Quinot  <quinot@adacore.com>\n+\t    Vincent Celier  <celier@adacore.com>\n+\n+\t* binde.adb (Elab_All_Links): Remove unnecessary call to\n+\tGeneric_Separately_Compiled (if a unit satisfies this predicate, there\n+\twon't be an associated Afile).\n+\t(Elab_All_Links): Fail if a referenced unit cannot be found\n+\n+\t* bindgen.adb: \n+\tFix comments in bindgen regarding consistency checks done in Bcheck:\n+\tthe checks are made across units within a partition, not across several\n+\tpartitions.\n+\tFix generation of C binder file for VxWorks.\n+\n+\t* lib.ads, lib.adb (Generic_Separately_Compiled): Rename to\n+\tGeneric_May_Lack_ALI, more descriptive of the current use of the\n+\tpredicate, and update documentation.\n+\n+\t* lib-writ.ads, lib-writ.adb (Write_With_Lines): Minor code\n+\treorganization and documentation update for the case of predefined\n+\tlibrary generics (for which we do not reference an Afile).\n+\n+2007-08-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-intman-irix.adb, s-osinte-irix.adb, s-osinte-irix.ads,\n+\ts-proinf-irix-athread.ads, s-osinte-hpux-dce.adb, s-osinte-hpux-dce.ads,\n+\ts-parame-hpux.ads, s-intman-dummy.adb, s-tasinf-solaris.adb,\n+\ts-tasinf-solaris.ads, s-asthan-vms-alpha.adb, s-inmaop-vms.adb,\n+\ts-intman-vms.adb, s-intman-vms.ads, s-osprim-mingw.adb,\n+\ts-parame-vms-restrict.ads, s-parame-ae653.ads, s-intman-vxworks.ads,\n+\ts-intman-vxworks.ads, s-intman-vxworks.adb, s-parame-vxworks.ads,\n+\ts-tfsetr-vxworks.adb, s-interr.adb, s-interr.ads, a-tasatt.adb,\n+\texp_ch13.adb, s-htable.ads, s-imgboo.ads, s-imglli.ads, s-imgllu.ads,\n+\ts-imguns.ads, g-eacodu.adb, par-ch12.adb, s-stache.ads, s-stausa.adb,\n+\ts-poosiz.adb, s-parame.ads, s-mastop.ads, s-osinte-darwin.ads,\n+\ta-chtgke.adb, s-asthan-vms-alpha.adb, s-parame-vms-alpha.ads,\n+\ts-parame-vms-ia64.ads, s-parame-vxworks.adb, s-except.ads,\n+\tg-altcon.adb: Minor reformatting\n+\n+\tada-tree.h: Delete empty line.\n+\n+\tali.ads: Minor reformatting\n+\tClarification of comments.\n+\tMinor spelling correction\n+\n+\t* exp_dbug.adb: Add Warnings Off to suppress new warning\n+\n+\t* a-witeio.adb (Write): Add Warnings (Off) for unneeded IN OUT mode\n+\tformal\n+\n+\t* a-strunb.adb (Set_Unbounded_String): Avoid memory leak by freeing old\n+\tvalue\n+\n+\t* a-textio.adb (Write): Remove an unnecessary IN OUT mode from\n+\n+\t* a-textio.ads: Reorder the standard input/output/error declarations\n+\tfor consistency.\n+\n+\t* g-dirope.adb, g-dirope.ads: Change Dir to mode IN for Open call\n+\n+\t* par-ch2.adb: Recognize RM specially in errout\n+\tChange 'R'M to RM in all error messages\n+\n+\t* scng.adb: Recognize RM specially in errout\n+\n+\t* sem.ads, sem.adb, exp_strm.adb, exp_ch5.ads, expander.adb: Rename\n+\tN_Return node to be N_Simple_Return, to reflect Ada 2005 terminology.\n+\n+\t* s-direio.adb: Add missing routine header box.\n+\n+\t* sem_attr.ads: Add ??? comments\n+\n+\t* sem_eval.adb: Recognize RM specially in errout\n+\tChange 'R'M to RM in all error messages\n+\n+\t* sem_maps.adb, sem_maps.ads: Remove some unnecessary IN OUT modes\n+\n+\t* s-tasinf.ads: Fix minor comment typo.\n+\n+\t* a-cihama.adb: Minor comment addition\n+\n+\t* a-ztexio.adb (Write): Add Warnings (Off) for unneeded IN OUT mode\n+\tformal\n+\n+\t* s-tasinf-tru64.ads: Fix minor comment typo.\n+\n+\t* itypes.ads: Comment update.\n+\n+\t* ali-util.adb: Remove Generic_Separately_Compiled guard, not needed\n+\tanymore.\n+\n+\t* argv.c: Added protection against null gnat_argv and gnat_envp.\n+\n+\t* bcheck.adb (Check_Consistency): Use correct markup character ({) in\n+\twarning message when Tolerate_Consistency_Errors is True.\n+\n+\t* cstand.adb (Create_Standard): Do not call Init_Size_Alignment for\n+\tAny_Id, as this subprogram is only applicable to *type* entities (it\n+\tsets RM_Size). Instead initialize just Esize and Alignment.\n+\n+2007-08-14  Bob Duff  <duff@adacore.com>\n+\n+\t* a-cihama.ads, a-cidlli.ads, a-chtgop.ads, a-chtgop.adb, a-cdlili.ads, \n+\ta-cihase.adb, a-cihase.ads, a-cohase.adb, a-cohase.ads, a-ciorma.ads, \n+\ta-coorma.ads, a-ciormu.ads, a-coormu.ads, a-ciorse.ads, a-cohama.ads, \n+\ta-cohata.ads, a-convec.adb, a-coinve.ads, a-coinve.adb, a-convec.ads,\n+\ta-coorse.ads (Next): Applied pragma Inline.\n+\tMake all Containers packages Remote_Types (unless they are already\n+\tPure).\n+\t(Previous): applied pragma Inline\n+\t(Elements_Type): is now a record instead of an array\n+\n+2007-08-14  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* table.adb, g-table.adb, g-dyntab.adb (Append): Reimplement in terms\n+\tof Set_Item.\n+\t(Set_Item): When the new item is an element of the currently allocated\n+\ttable passed by reference, save a copy on the stack if we're going\n+\tto reallocate. Also, in Table.Set_Item, make sure we test the proper\n+\tvariable to determine whether to call Set_Last.\n+\n+\t* sinput-d.adb, sinput-l.adb, stringt.adb, switch-m.adb,\n+\tsymbols-vms.adb, symbols-processing-vms-alpha.adb,\n+\tsymbols-processing-vms-ia64.adb, sem_elab.adb, repinfo.adb: Replace\n+\tsome occurrences of the pattern\n+\t   T.Increment_Last;\n+\t   T.Table (T.Last) := Value;\n+\twith a cleaner call to\n+\t   T.Append (Value);\n+\n+2007-08-14  Ed Schonberg  <schonberg@adacore.com>\n+\t    Gary Dismukes  <dismukes@adacore.com>\n+\t    Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch12.ads, sem_ch12.adb (Instantiate_Type): If the formal is a\n+\tderived type with interface progenitors use the analyzed formal as the\n+\tparent of the actual, to create renamings for all the inherited\n+\toperations in Derive_Subprograms.\n+\t(Collect_Previous_Instances): new procedure within of\n+\tLoad_Parent_Of_Generic, to instantiate all bodies in the compilation\n+\tunit being loaded, to ensure that the generation of global symbols is\n+\tconsistent in different compilation modes.\n+\t(Is_Tagged_Ancestor): New function testing the ancestor relation that\n+\ttakes progenitor types into account.\n+\t(Validate_Derived_Type_Instance): Enforce the rule of 3.9.3(9) by\n+\ttraversing over the primitives of the formal and actual types to locate\n+\tany abstract subprograms of the actual type that correspond to a\n+\tnonabstract subprogram of the formal type's ancestor type(s), and issue\n+\tan error if such is found.\n+\t(Analyze_Package_Instantiation, Analyze_Subprogram_Instantiation,\n+\tInstantiate_Package_Body, Instantiate_Subprogram_Body):\n+\tRemove bogus guard around calls to Inherit_Context.\n+\t(Reset_Entity): If the entity is the selector of a selected component\n+\tthat denotes a named number, propagate constant-folding to the generic\n+\ttemplate only if the named number is global to the generic unit.\n+\t(Set_Instance_Env): Only reset the compilation switches when compiling\n+\ta predefined or internal unit.\n+\n+2007-08-14  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Try_Class_Wide_Operation): use base type of first\n+\tparameter to determine whether operation applies to the prefix.\n+\t(Complete_Object_Operation): If actual has an access type and\n+\tcontrolling formal is not an in_parameter, reject the actual if it is\n+\tan access_to_constant type.\n+\t(Try_Primitive_Operation): If the type of the prefix is a formal tagged\n+\ttype, the candidate operations are found in the scope of declaration of\n+\tthe type, because the type has no primitive subprograms.\n+\t(Analyze_Selected_Component): If prefix is class-wide, and root type is\n+\ta private extension, only examine visible components before trying to\n+\tanalyze as a prefixed call.\n+\tChange Entity_List to Type_To_Use, for better readability.\n+\t(Has_Fixed_Op): Use base type when checking whether the type of an\n+\toperator has a user-defined multiplication/division\n+\t(Check_Arithmetic_Pair): Use Ada 2005 rules to remove ambiguities when\n+\tuser-defined operators are available for fixed-point types.\n+\n+2007-08-14  Thomas Quinot  <quinot@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_cat.ads, sem_cat.adb (Has_Stream_Attribute_Definition): New\n+\tformal At_Any_Place indicating, when True, that we want to test for\n+\tavailability of the stream attribute at any place (as opposed to the\n+\tcurrent visibility context only).\n+\t(Missing_Read_Write_Attributes): A stream attribute is missing for the\n+\tpurpose of enforcing E.2.2(8) only if it is not available at any place.\n+\tTake into account the Ada2005 pragma Has_Preelaborable_Initialization\n+\twhen checking the legality of an extension aggregate in a preelaborable\n+\tpackage. Treat the literal null as a valid default expression in a\n+\tcomponent declaration for a type with preelaborable initialization.\n+\tA limited interface is a legal progenitor for the designated type of a\n+\tremote access to class-wide type.\n+\n+2007-08-14  Thomas Quinot  <quinot@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.ads, sem_ch8.adb (Find_Type, case of a 'Base attribute\n+\treference): Use correct entity as denoted entity for the selector of\n+\tthe rewritten node.\n+\t(Find_Direct_Name): Add comment about Generate_Reference incorrectly\n+\tsetting the Referenced_As_LHS flag for entities that are implicitly\n+\tdereferenced.\n+\t(Find_Type): If the type is an internally generated incomplete type,\n+\tmark the full view as referenced, to prevent spurious warnings.\n+\t(Find_Selected_Component, Has_Components): Handle properly non-limited\n+\tviews that are themselves incomplete types.\n+\tHandle interfaces visible through limited-with clauses.\n+\t(Analyze_Subprogram_Renaming): Disambiguate and set the entity of a\n+\tsubprogram generic actual for which we have generated a renaming.\n+\tWarn when the renaming introduces a homonym of\n+\tthe renamed entity, and the renamed entity is directly visible.\n+\n+2007-08-14  Ed Schonberg  <schonberg@adacore.com>\n+\t    Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Allocator): Propagate any coextensions that\n+\tappear in the subtree to the current allocator if it is not a static\n+\tcoextension.\n+\t(Resolve_Allocator): Perform cleanup if resolution has determined that\n+\tthe allocator is not a coextension.\n+\t(Resolve): Skip an interpretation hidden by an abstract operator only\n+\twhen the type of the interpretation matches that of the context.\n+\t(Resolve): When looping through all possible interpretations of a node,\n+\tdo not consider those that are hidden by abstract operators.\n+\t(Resolve_Actuals): When verifying that an access to class-wide object\n+\tis an actual  for a controlling formal, ignore anonymous access to\n+\tsubprograms whose return type is an access to class_wide type.\n+\t(Resolve_Slice): If the prefix of the slice is a selected component\n+\twhose type depends on discriminants, build its actual subtype before\n+\tapplying range checks on the bounds of the slice.\n+\t(Valid_Conversion): In an instance or inlined body, compare root types,\n+\tto prevent anomalies between private and public views.\n+\t(Resolve): Improve error message for ambiguous fixed multiplication\n+\texpressions that involve universal_fixed multiplying operations.\n+\n+2007-08-14  Javier Miranda  <miranda@adacore.com>\n+\t    Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch9.adb (Build_Protected_Entry): Propagate the original source\n+\tlocation to allow the correct generation of errors in case of\n+\trestrictions applied to the expanded code.\n+\t(Expand_Entry_Barrier): Remove all generated renamings for a barrier\n+\tfunction if the condition does not reference them.\n+\t(Expand_Entry_Body_Declarations): Mark the index constant as having a\n+\tvalid value.\n+\n+2007-08-14  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_dist.adb (PolyORB_Support.Build_TypeCode_Function): When creating\n+\ttypecode parameters for a union (in a variant record), remove\n+\textraneous layer of Any wrapping for member label.\n+\t(Expand_Receiving_Stubs_Bodies): For an RCI package body that has\n+\telabration statements, register the package with the name server\n+\tat the beginning, not at the end, of the elaboration statements so\n+\tthat they can create remote access to subprogram values that designate\n+\tremote subprograms from the package.\n+\n+2007-08-14  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* g-catiio.adb (Image): For the case of %s, use Ada.Calendar.Time\n+\tvalues to compute the number of seconds since the Unix Epoc in order to\n+\taccount for Daylight Savings Time. Perform special processing for dates\n+\tthat are earlier than the Unix Epoc to obtain a negative number.\n+\n+2007-08-14  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* g-comlin.adb (Getopt): Fix handling of \"*\" switch when not collapsing\n+\tswitches.\n+\n+2007-08-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnatlink.adb (Gnatlink): Pass switches to the linker even if the\n+\tbinder-generated file is not in Ada.\n+\tPass -mrtp to the linker if it is GCC and --RTS=rtp has been\n+\trecorded in the ALI file.\n+\tPass -fsjlj to the linker if it is GCC and --RTS=sjlj has been recorded.\n+\n+2007-08-14  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnatls.adb: (Corresponding_Sdep_Entry): Always return a value\n+\t(Output_Source): Do nothing if parameter is No_Sdep_Id\n+\n+\t* make.adb (Gnatmake): Do not rebuild an archive simply because a\n+\tshared library it imports has a later time stamp.\n+\t(Check): Resolve the symbolic links in the path name of the object\n+\tdirectory.\n+\tCheck that the ALI file is in the correct object directory\n+\tCheck if a file name does not correspond to the mapping of units\n+\tto file names.\n+\t(Display_Version): New procedure\n+\t(Initialize): Process switches --version and --help\n+\tUse type Path_Name_Type for path name\n+\n+2007-08-14  Paul Hilfinger  <hilfinger@adacore.com>\n+\n+\t* impunit.adb: Re-organize System.Random_Numbers and\n+\tGNAT.Random_Numbers and add to builds.\n+\n+\t* Makefile.rtl: Add s-rannum.ad* and g-rannum.ad*, a-assert*\n+\n+\t* s-rannum.ads, s-rannum.adb, g-rannum.ads, g-rannum.adb: New files.\n+\n+\t* a-assert.ads, a-assert.adb: New files.\n+\n+2007-08-14  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* layout.adb (Layout_Type): In the case of access-to-subprogram types,\n+\tif AAMP_On_Target is True, then the size of the type encompasses two\n+\taddresses (a static link and a subprogram address), except in the case\n+\tof library-level access types.\n+\n+2007-08-14  Vincent Celier  <celier@adacore.com>\n+\n+\t* output.ads, output.adb (Write_Eol): Remove trailing spaces before\n+\twriting the line.\n+\t(Write_Eol_Keep_Blanks): New procedure to write a line, including\n+\tpossible trailing spaces.\n+\t(Output_Source_Line): Call Write_Eol_Keep_Blanks to output a source line\n+\n+2007-08-14  Javier Miranda  <miranda@adacore.com>\n+\n+\t* par-ch6.adb (P_Formal_Part): Fix wrong error message associated with\n+\tnull-excluding access types.\n+\n+2007-08-14  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch9.adb (Check_Interfaces): New subprogram that factorizes code\n+\tthat is common to Analyze_Protected_Type and Analyze_Task_Type. In case\n+\tof private types add missing check on matching interfaces in the\n+\tpartial and full declarations.\n+\t(Analyze_Protected_Type): Code cleanup.\n+\t(Analyze_Task_Type): Code cleanup.\n+\n+2007-08-14  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_disp.adb (Check_Dispatching_Operation): Do not emit warning on a\n+\tgenerated interface thunk.\n+\n+2007-08-14  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* s-ficobl.ads: Declare AFCB as a tagged incomplete type, to prevent\n+\tobsolescent warning on application of 'Class to an incomplete type.\n+\n+\t* s-finroo.ads: Declare Root_Controlled as a tagged incomplete type, to\n+\tprevent obsolescent warning on application of 'Class to an incomplete\n+\ttype.\n+\n+2007-08-14  Pascal Obry  <obry@adacore.com>\n+\n+\t* s-fileio.adb (Is_Open): Add check for usability of the underlying\n+\tfile stream.\n+\n+2007-08-14  Cyrille Comar  <comar@adacore.com>\n+\n+\t* s-finimp.adb (Detach_From_Final_List): make this procedure idempotent\n+\tsince it is potentially used in cases implying double finalization of\n+\tthe same object.\n+\n+2007-08-14  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* s-tasini.adb (Get_Stack_Info): Move this function to\n+\tSystem.Soft_Links.Tasking because it is common to the full and the\n+\trestricted run times.\n+\t(Init_RTS): Do not set the Get_Stack_Info soft link because it is done\n+\tin SSL.Tasking.Init_Tasking_Soft_Links.\n+\n+\t* s-solita.adb (Get_Stack_Info): Function moved from\n+\tSystem.Tasking.Initialization because it is common to the full and the\n+\trestricted run times.\n+\t(Init_Tasking_Soft_Links): Set the tasking soft link for Get_Stack_Info.\n+\n+2007-08-14  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-tpobop.ads, s-tpobop.adb, s-tasren.ads, s-tasren.adb,\n+\ts-taskin.ads (Requeue_With_Abort): Rename field With_Abort.\n+\t(PO_Do_Or_Queue, Task_Do_Or_Queue, Requeue_Call): Remove With_Abort\n+\tparameter.\n+\n+\t* s-tassta.adb (Task_Wrapper): Increased value of the small overflow\n+\tguard to 12K.\n+\n+2007-08-14  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* s-veboop.adb (SU): New named number initialized to\n+\tSystem.Storage_Unit.\n+\t(True_Val): The initialization expression is revised to use SU (=\n+\tStorage_Unit) rather than assuming 8 for the component size of an\n+\tunpacked Boolean array.\n+\n+2007-08-14  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* tracebak.c: Use tb-ivms.c on OpenVMS Itanium.\n+\n+\t* tb-ivms.c: New file.\n+\n+\t* g-trasym-vms-ia64.adb: Fixed for OpenVMS version 8.2\n+\n+2007-08-14  Geert Bosch  <bosch@adacore.com>\n+\n+\t* i-forbla.ads, i-forbla.adb, a-ngcoar.adb, a-ngcoar.ads, i-forlap.ads,\n+\ts-gearop.adb, s-gecobl.adb, s-gecobl.ads, s-gerela.adb, s-gerela.ads:\n+\tAdd required linker pragmas for automatically linking with the gnalasup\n+\tlinear algebra support library, and the systems math library.\n+\tRename cdot to cdotu and zdot to zdotu.\n+\tUpdate header comment to describe purpose of package.\n+\n+2007-08-14  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_ch7.adb (Find_Final_List): For an anonymous access type that has\n+\tan explicitly specified Associated_Final_Chain, use that list.\n+\t(Expand_N_Package_Body): Build dispatch tables of library level tagged\n+\ttypes.\n+\t(Expand_N_Package_Declaration): Build dispatch tables of library level\n+\ttagged types. Minor code cleanup.\n+\n+2007-08-14  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnatchop.adb (Terminate_Program): Remove exception and use\n+\tTypes.Terminate_Program instead.\n+\n+\t* osint.ads, osint.adb (Current_Exit_Status): New global variable\n+\t(Find_Program_Name): Added protection against empty name.\n+\t(OS_Exit_Through_Exception): New procedure\n+\n+\t* s-os_lib.ads, s-os_lib.adb (OS_Exit): New procedure body\n+\t(OS_Exit_Default): New procedure that contains the previous\n+\timplementation of procedure OS_Exit.\n+\t(Final_Value): Remove obsolete Interix stuff.\n+\n+2007-08-14  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* g-socket.ads: Reorganize example code so that it also works on\n+\tWindows XP.\n+\n+2007-08-14  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* g-trasym.ads: AIX now supports symbolic backtraces.\n+\n+2007-08-14  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* lib-load.adb (From_Limited_With_Chain): Always scan the stack of\n+\tunits being loaded to detect circularities. A circularity may be\n+\tpresent even if the current chain of pending units to load starts from\n+\ta limited_with_clause.\n+\n+\t* lib-load.ads: Change profile of Load_Unit to use a with_clause\n+\trather than a boolean flag, in order to detect circularities in\n+\twith_clauses.\n+\n+\t* par-load.adb: Use current with_clause in calls to Load_Unit, rather\n+\tthan propagating the From_Limited_With flag, in order to handle\n+\tproperly circularities involving with_clauses.\n+\n+2007-08-14  Nicolas Setton  <setton@adacore.com>\n+\n+\t* link.c (FreeBSD): Add \"const\" keyword where needed, to eliminate\n+\twarnings.\n+\n+2007-08-14  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* Makefile.in: GNATRTL_LINEARALGEBRA_OBJS: New variable holding objects\n+\tto build for libgnala.\n+\tlibgnat: Add rules to build libgnala.a\n+\t(LIBGNAT_TARGET_PAIRS for VxWorks): Remove s-osinte-vxworks.adb from\n+\ttarget pairs of the VxWorks 6 kernel runtime, use it only for VxWorks 5.\n+\tAdd s-osinte-vxworks-kernel.adb to the target pairs of the\n+\tkernel run-time lib for VxWorks 6, which would provide a different\n+\timplementation for Task_Cont and Task_Stop than the VxWorks 5 version.\n+\tx86-solaris section (EH_MECHANISM): Set to -gcc, as this port is now\n+\trunning ZCX by default.\n+\tAdd g-sttsne-locking to LynxOS version.\n+\tRemove g-sttsne-vxworks.ads; use g-sttsne-locking.ads instead.\n+\tOn x86/darwin, use a-numaux-x86.ad? and system-darwin-x86.ads.\n+\n+\t* system-darwin-x86.ads: New file.\n+\n+\t* Make-lang.in: Delete files before copying onto them, so if they are\n+\tread-only, the copy won't fail.\n+\tUpdate dependencies\n+\n+2007-08-14  Pascal Obry  <obry@adacore.com>\n+\n+\t* mdll-fil.adb, * mdll.adb: Implement a more consistent libraries\n+\tnaming scheme.\n+\n+2007-08-14  Vincent Celier  <celier@adacore.com>\n+\n+\t* mlib-utl.adb (Gcc_Name): Change from constant String to String_Access\n+\t(Gcc): Initialize Gcc_Name at the first call\n+\n+2007-08-14  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch7.adb (Analyze_Package_Specification): Do not install private\n+\twith_clauses of the enclosing unit when analyzing the package\n+\tspecification of a nested instance.\n+\n+2007-08-14  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sinfo.ads, sinfo.adb (Is_Coextension, Set_Is_Coextension): Removed.\n+\t(Is_Dynamic_Coextension, Set_Is_Dynamic_Coextension): New routines.\n+\tRemove flag Is_Coextension. Add flag Is_Dynamic_Coextension. Update the\n+\tlayout of N_Allocator.\n+\n+2007-08-14  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* rtsfind.adb (Check_RPC): Add PCS version check.\n+\n+\t* gnatvsn.ads, gnatvsn.adb: Add PCS version.\n+\t(Gnat_Free_Software): New function.\n+\n+\t* sem_dist.ads, sem_dist.adb (Get_PCS_Version): New subprogram. Returns\n+\tthe PCS_Version value from s-parint, used to check that it is consistent\n+\twith what exp_dist expects.\n+\n+\t* s-parint.ads (PCS_Version): New entity for checking consistency\n+\tbetween exp_dist and PCS.\n+\n+\t* gen-soccon.c: (SO_REUSEPORT): New constant.\n+\n+2007-08-14  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* a-calfor.adb (Image (Duration; Boolean)): Change type of local\n+\tvariable Sub_Second to Duration in order to accomodate a larger range\n+\tof arithmetic operations.\n+\n+2007-08-14  Bob Duff  <duff@adacore.com>\n+\n+\t* g-sttsne-locking.ads: Move comments from spec to body.\n+\t* g-sttsne-locking.adb: Move comments from spec to body.\n+\t* g-sttsne-vxworks.ads: Removed.\n+\t* g-sttsne-vxworks.adb: Removed.\n+\n 2007-08-11  Ian Lance Taylor  <iant@google.com>\n \n \t* misc.c (gnat_get_alias_set): Change return type to"}]}