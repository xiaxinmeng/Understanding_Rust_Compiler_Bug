{"sha": "de81e06273c613d7e06cbe2c8d9e72826c638056", "node_id": "C_kwDOANBUbNoAKGRlODFlMDYyNzNjNjEzZDdlMDZjYmUyYzhkOWU3MjgyNmM2MzgwNTY", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-02-02T23:15:37Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-03-01T23:32:04Z"}, "message": "c++: can't eval PTRMEM_CST in incomplete class [PR107574]\n\nHere we're attempting to evaluate a PTRMEM_CST in a class that hasn't\nbeen completed yet, but that doesn't work:\n\n        /* We can't lower this until the class is complete.  */\n        if (!COMPLETE_TYPE_P (DECL_CONTEXT (member)))\n          return cst;\n\nand then this unlowered PTRMEM_CST is used as EXPR in\n\n    tree op1 = build_nop (ptrdiff_type_node, expr);\n\nand we crash in a subsequent cp_fold_convert which gets type=ptrdiff_type_node,\nexpr=PTRMEM_CST and does\n\n  else if (TREE_CODE (expr) == PTRMEM_CST\n           && same_type_p (TYPE_PTRMEM_CLASS_TYPE (type),\n                           PTRMEM_CST_CLASS (expr)))\n\nwhere TYPE_PTRMEM_CLASS_TYPE (type) is going to crash since the type\nis ptrdiff_type_node.  We could just add a TYPE_PTRMEM_P check before\naccessing TYPE_PTRMEM_CLASS_TYPE but I think it's nicer to explain why\nwe couldn't evaluate the expression.\n\n\tPR c++/107574\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.cc (cxx_eval_constant_expression): Emit an error when\n\ta PTRMEM_CST cannot be evaluated.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/ptrmem-cst1.C: New test.", "tree": {"sha": "a859a5c0470b098821d412ff4301cc63af29800a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a859a5c0470b098821d412ff4301cc63af29800a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de81e06273c613d7e06cbe2c8d9e72826c638056", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de81e06273c613d7e06cbe2c8d9e72826c638056", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de81e06273c613d7e06cbe2c8d9e72826c638056", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de81e06273c613d7e06cbe2c8d9e72826c638056/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a764d3df8bf289beef2c4305b504a51d5a0718a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a764d3df8bf289beef2c4305b504a51d5a0718a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a764d3df8bf289beef2c4305b504a51d5a0718a2"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "0770cdcd768226b8db0bdf04f489050f41d13756", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de81e06273c613d7e06cbe2c8d9e72826c638056/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de81e06273c613d7e06cbe2c8d9e72826c638056/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=de81e06273c613d7e06cbe2c8d9e72826c638056", "patch": "@@ -7662,7 +7662,18 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t  }\n \n \tif (TREE_CODE (op) == PTRMEM_CST && !TYPE_PTRMEM_P (type))\n-\t  op = cplus_expand_constant (op);\n+\t  {\n+\t    op = cplus_expand_constant (op);\n+\t    if (TREE_CODE (op) == PTRMEM_CST)\n+\t      {\n+\t\tif (!ctx->quiet)\n+\t\t  error_at (loc, \"%qE is not a constant expression when the \"\n+\t\t\t    \"class %qT is still incomplete\", op,\n+\t\t\t    PTRMEM_CST_CLASS (op));\n+\t\t*non_constant_p = true;\n+\t\treturn t;\n+\t      }\n+\t  }\n \n \tif (TREE_CODE (op) == PTRMEM_CST && tcode == NOP_EXPR)\n \t  {"}, {"sha": "0d6a6b6445d45490e21e3431c6147b5caba31abd", "filename": "gcc/testsuite/g++.dg/cpp0x/ptrmem-cst1.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de81e06273c613d7e06cbe2c8d9e72826c638056/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fptrmem-cst1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de81e06273c613d7e06cbe2c8d9e72826c638056/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fptrmem-cst1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fptrmem-cst1.C?ref=de81e06273c613d7e06cbe2c8d9e72826c638056", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/107574\n+// { dg-do compile { target c++11 } }\n+\n+struct A { int i; };\n+struct B:A { int j; };\n+struct C:B {\n+  int k;\n+  static_assert((int B::*) &C::k, \"\"); // { dg-error \"non-constant|still incomplete\" }\n+};\n+\n+static_assert((int B::*) &C::k, \"\");"}]}