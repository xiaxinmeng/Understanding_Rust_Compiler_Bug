{"sha": "eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIyZjJiNDRkZDU3ODczNTFmOWZlZjU3MDNiNmNiODE2M2MzYzdjZQ==", "commit": {"author": {"name": "Ganesh Gopalasubramanian", "email": "Ganesh.Gopalasubramanian@amd.com", "date": "2012-11-16T07:17:30Z"}, "committer": {"name": "Ganesh Gopalasubramanian", "email": "gganesh@gcc.gnu.org", "date": "2012-11-16T07:17:30Z"}, "message": "AMD bdver3 enablement\n\nFrom-SVN: r193548", "tree": {"sha": "7ba2b6dc30568ffa8ebad64a232bdd77fb35aca5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ba2b6dc30568ffa8ebad64a232bdd77fb35aca5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/comments", "author": {"login": "ganeshgit", "id": 5275884, "node_id": "MDQ6VXNlcjUyNzU4ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5275884?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ganeshgit", "html_url": "https://github.com/ganeshgit", "followers_url": "https://api.github.com/users/ganeshgit/followers", "following_url": "https://api.github.com/users/ganeshgit/following{/other_user}", "gists_url": "https://api.github.com/users/ganeshgit/gists{/gist_id}", "starred_url": "https://api.github.com/users/ganeshgit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ganeshgit/subscriptions", "organizations_url": "https://api.github.com/users/ganeshgit/orgs", "repos_url": "https://api.github.com/users/ganeshgit/repos", "events_url": "https://api.github.com/users/ganeshgit/events{/privacy}", "received_events_url": "https://api.github.com/users/ganeshgit/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "91764ab8bd7d9db23549857a5d286080f86e2720", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91764ab8bd7d9db23549857a5d286080f86e2720", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91764ab8bd7d9db23549857a5d286080f86e2720"}], "stats": {"total": 247, "additions": 203, "deletions": 44}, "files": [{"sha": "4eb3039f1142be22ee36a7f2dd9df1e33a52915f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce", "patch": "@@ -1,3 +1,38 @@\n+2012-11-16  Ganesh Gopalasubramanian  <Ganesh.Gopalasubramanian@amd.com>\n+\n+\tbdver3 Enablement\n+\t* doc/extend.texi: Add details about bdver3.\n+\t* doc/invoke.texi: Add details about bdver3.\n+\t* config.gcc (i[34567]86-*-linux* | ...): Add bdver3.\n+\t(case ${target}): Add bdver3.\n+\t* config/i386/i386.h (TARGET_BDVER3): New definition.\n+\t* config/i386/i386.md (define_attr \"cpu\"): Add bdver3.\n+\t* config/i386/sse.md (sseshuf): New type attribute.\n+\t* config/i386/athlon.md (sseshuf):Likewise.\n+\t* config/i386/atom.md (sseshuf):Likewise.\n+\t* config/i386/ppro.md (sseshuf):Likewise.\n+\t* config/i386/bdver1.md (sseshuf):Likewise.\n+\t* config/i386/i386.opt (flag_dispatch_scheduler): Add bdver3.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Add\n+\tbdver3 def_and_undef\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Let\n+\t-march=native recognize bdver3 processors.\n+\t* config/i386/i386.c (struct processor_costs bdver3_cost): New.\n+\t(m_BDVER3): New definition.\n+\t(m_AMD_MULTIPLE): Includes m_BDVER3.\n+\t(initial_ix86_tune_features): Add bdver3 tune.\n+\t(processor_target_table): Add bdver3 entry.\n+\t(static const char *const cpu_names): Add bdver3 entry.\n+\t(software_prefetching_beneficial_p): Add bdver3.\n+\t(ix86_option_override_internal): Add bdver3 instruction sets.\n+\t(ix86_option_override_internal): Remove XSAVEOPT for bdver1 \n+\tand bdver2.\n+\t(ix86_issue_rate): Add bdver3.\n+\t(ix86_adjust_cost): Add bdver3.\n+\t(enum target_cpu_default): Add TARGET_CPU_DEFAULT_bdver3.\n+\t(enum processor_type): Add PROCESSOR_BDVER3.\n+\t* config/i386/bdver3.md: New file describing bdver3 pipelines.\n+\n 2012-11-15  David S. Miller  <davem@davemloft.net>\n \n \t* expmed.c (expand_shift_1): Don't strip non-integral SUBREGs."}, {"sha": "372d4dceb56c646ee200b535823187ac1154450f", "filename": "gcc/config.gcc", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce", "patch": "@@ -1269,7 +1269,7 @@ i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu | i\n \t\t\tTM_MULTILIB_CONFIG=`echo $TM_MULTILIB_CONFIG | sed 's/^,//'`\n \t\t\tneed_64bit_isa=yes\n \t\t\tcase X\"${with_cpu}\" in\n-\t\t\tXgeneric|Xatom|Xcore2|Xcorei7|Xcorei7-avx|Xnocona|Xx86-64|Xbdver2|Xbdver1|Xbtver2|Xbtver1|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx|Xathlon64-sse3|Xk8-sse3|Xopteron-sse3)\n+\t\t\tXgeneric|Xatom|Xcore2|Xcorei7|Xcorei7-avx|Xnocona|Xx86-64|Xbdver3|Xbdver2|Xbdver1|Xbtver2|Xbtver1|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx|Xathlon64-sse3|Xk8-sse3|Xopteron-sse3)\t\t\t\n \t\t\t\t;;\n \t\t\tX)\n \t\t\t\tif test x$with_cpu_64 = x; then\n@@ -1278,7 +1278,7 @@ i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu | i\n \t\t\t\t;;\n \t\t\t*)\n \t\t\t\techo \"Unsupported CPU used in --with-cpu=$with_cpu, supported values:\" 1>&2\n-\t\t\t\techo \"generic atom core2 corei7 corei7-avx nocona x86-64 bdver2 bdver1 btver2 btver1 amdfam10 barcelona k8 opteron athlon64 athlon-fx athlon64-sse3 k8-sse3 opteron-sse3\" 1>&2\n+\t\t\t\techo \"generic atom core2 corei7 corei7-avx nocona x86-64 bdver3 bdver2 bdver1 btver2 btver1 amdfam10 barcelona k8 opteron athlon64 athlon-fx athlon64-sse3 k8-sse3 opteron-sse3\" 1>&2\n \t\t\t\texit 1\n \t\t\t\t;;\n \t\t\tesac\n@@ -1390,7 +1390,7 @@ i[34567]86-*-solaris2* | x86_64-*-solaris2.1[0-9]*)\n \t\ttmake_file=\"$tmake_file i386/t-sol2-64\"\n \t\tneed_64bit_isa=yes\n \t\tcase X\"${with_cpu}\" in\n-\t\tXgeneric|Xatom|Xcore2|Xcorei7|Xcorei7-avx|Xnocona|Xx86-64|Xbdver2|Xbdver1|Xbtver2|Xbtver1|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx|Xathlon64-sse3|Xk8-sse3|Xopteron-sse3)\n+\t\tXgeneric|Xatom|Xcore2|Xcorei7|Xcorei7-avx|Xnocona|Xx86-64|Xbdver3|Xbdver2|Xbdver1|Xbtver2|Xbtver1|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx|Xathlon64-sse3|Xk8-sse3|Xopteron-sse3)\n \t\t\t;;\n \t\tX)\n \t\t\tif test x$with_cpu_64 = x; then\n@@ -1399,7 +1399,7 @@ i[34567]86-*-solaris2* | x86_64-*-solaris2.1[0-9]*)\n \t\t\t;;\n \t\t*)\n \t\t\techo \"Unsupported CPU used in --with-cpu=$with_cpu, supported values:\" 1>&2\n-\t\t\techo \"generic atom core2 corei7 corei7-avx nocona x86-64 bdver2 bdver1 btver2 btver1 amdfam10 barcelona k8 opteron athlon64 athlon-fx athlon64-sse3 k8-sse3 opteron-sse3\" 1>&2\n+\t\t\techo \"generic atom core2 corei7 corei7-avx nocona x86-64 bdver3 bdver2 bdver1 btver2 btver1 amdfam10 barcelona k8 opteron athlon64 athlon-fx athlon64-sse3 k8-sse3 opteron-sse3\" 1>&2\n \t\t\texit 1\n \t\t\t;;\n \t\tesac\n@@ -1456,7 +1456,7 @@ i[34567]86-*-mingw* | x86_64-*-mingw*)\n \t\t\tif test x$enable_targets = xall; then\n \t\t\t\ttm_defines=\"${tm_defines} TARGET_BI_ARCH=1\"\n \t\t\t\tcase X\"${with_cpu}\" in\n-\t\t\t\tXgeneric|Xatom|Xcore2|Xcorei7|Xcorei7-avx|Xnocona|Xx86-64|Xbdver2|Xbdver1|Xbtver2|Xbtver1|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx|Xathlon64-sse3|Xk8-sse3|Xopteron-sse3)\n+\t\t\t\tXgeneric|Xatom|Xcore2|Xcorei7|Xcorei7-avx|Xnocona|Xx86-64|Xbdver3|Xbdver2|Xbdver1|Xbtver2|Xbtver1|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx|Xathlon64-sse3|Xk8-sse3|Xopteron-sse3)\n \t\t\t\t\t;;\n \t\t\t\tX)\n \t\t\t\t\tif test x$with_cpu_64 = x; then\n@@ -1465,7 +1465,7 @@ i[34567]86-*-mingw* | x86_64-*-mingw*)\n \t\t\t\t\t;;\n \t\t\t\t*)\n \t\t\t\t\techo \"Unsupported CPU used in --with-cpu=$with_cpu, supported values:\" 1>&2\n-\t\t\t\t\techo \"generic atom core2 corei7 Xcorei7-avx nocona x86-64 bdver2 bdver1 btver2 btver1 amdfam10 barcelona k8 opteron athlon64 athlon-fx athlon64-sse3 k8-sse3 opteron-sse3\" 1>&2\n+\t\t\t\t\techo \"generic atom core2 corei7 Xcorei7-avx nocona x86-64 bdver3 bdver2 bdver1 btver2 btver1 amdfam10 barcelona k8 opteron athlon64 athlon-fx athlon64-sse3 k8-sse3 opteron-sse3\" 1>&2\n \t\t\t\t\texit 1\n \t\t\t\t\t;;\n \t\t\t\tesac\n@@ -2707,6 +2707,10 @@ case ${target} in\n     ;;\n   i686-*-* | i786-*-*)\n     case ${target_noncanonical} in\n+      bdver3-*)\n+        arch=bdver3\n+        cpu=bdver3\n+        ;;\n       bdver2-*)\n         arch=bdver2\n         cpu=bdver2\n@@ -2808,6 +2812,10 @@ case ${target} in\n     ;;\n   x86_64-*-*)\n     case ${target_noncanonical} in\n+      bdver3-*)\n+        arch=bdver3\n+        cpu=bdver3\n+        ;;\n       bdver2-*)\n         arch=bdver2\n         cpu=bdver2\n@@ -3345,8 +3353,8 @@ case \"${target}\" in\n \t\t\t\t;;\n \t\t\t\"\" | x86-64 | generic | native \\\n \t\t\t| k8 | k8-sse3 | athlon64 | athlon64-sse3 | opteron \\\n-\t\t\t| opteron-sse3 | athlon-fx | bdver2 | bdver1 | btver2 | btver1 \\\n-\t\t\t| amdfam10 | barcelona | nocona | core2 | corei7 \\\n+\t\t\t| opteron-sse3 | athlon-fx | bdver3 | bdver2 | bdver1 | btver2 \\\n+\t\t\t| btver1 | amdfam10 | barcelona | nocona | core2 | corei7 \\\n \t\t\t| corei7-avx | core-avx-i | core-avx2 | atom)\n \t\t\t\t# OK\n \t\t\t\t;;"}, {"sha": "aabf37dfa4f49425d37aeab32643b1c7f8242c4d", "filename": "gcc/config/i386/athlon.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fconfig%2Fi386%2Fathlon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fconfig%2Fi386%2Fathlon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fathlon.md?ref=eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce", "patch": "@@ -710,30 +710,30 @@\n \n (define_insn_reservation \"athlon_sselog_load\" 3\n \t\t\t (and (eq_attr \"cpu\" \"athlon\")\n-\t\t\t      (and (eq_attr \"type\" \"sselog,sselog1\")\n+\t\t\t      (and (eq_attr \"type\" \"sselog,sselog1,sseshuf,sseshuf1\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-vector,athlon-fpload2,(athlon-fmul*2)\")\n (define_insn_reservation \"athlon_sselog_load_k8\" 5\n \t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n-\t\t\t      (and (eq_attr \"type\" \"sselog,sselog1\")\n+\t\t\t      (and (eq_attr \"type\" \"sselog,sselog1,sseshuf,sseshuf1\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-double,athlon-fpload2k8,(athlon-fmul*2)\")\n (define_insn_reservation \"athlon_sselog_load_amdfam10\" 4\n \t\t\t (and (eq_attr \"cpu\" \"amdfam10\")\n-\t\t\t      (and (eq_attr \"type\" \"sselog,sselog1\")\n+\t\t\t      (and (eq_attr \"type\" \"sselog,sselog1,sseshuf,sseshuf1\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"athlon-direct,athlon-fploadk8,(athlon-fadd|athlon-fmul)\")\n (define_insn_reservation \"athlon_sselog\" 3\n \t\t\t (and (eq_attr \"cpu\" \"athlon\")\n-\t\t\t      (eq_attr \"type\" \"sselog,sselog1\"))\n+\t\t\t      (eq_attr \"type\" \"sselog,sselog1,sseshuf,sseshuf1\"))\n \t\t\t \"athlon-vector,athlon-fpsched,athlon-fmul*2\")\n (define_insn_reservation \"athlon_sselog_k8\" 3\n \t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")\n-\t\t\t      (eq_attr \"type\" \"sselog,sselog1\"))\n+\t\t\t      (eq_attr \"type\" \"sselog,sselog1,sseshuf,sseshuf1\"))\n \t\t\t \"athlon-double,athlon-fpsched,athlon-fmul\")\n (define_insn_reservation \"athlon_sselog_amdfam10\" 2\n \t\t\t (and (eq_attr \"cpu\" \"amdfam10\")\n-\t\t\t      (eq_attr \"type\" \"sselog,sselog1\"))\n+\t\t\t      (eq_attr \"type\" \"sselog,sselog1,sseshuf,sseshuf1\"))\n \t\t\t \"athlon-direct,athlon-fpsched,(athlon-fadd|athlon-fmul)\")\n \n ;; ??? pcmp executes in addmul, probably not worthwhile to bother about that."}, {"sha": "27e3d806d54058295bb2d342aa7fa113eb0b7c6e", "filename": "gcc/config/i386/atom.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fconfig%2Fi386%2Fatom.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fconfig%2Fi386%2Fatom.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fatom.md?ref=eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce", "patch": "@@ -433,25 +433,25 @@\n \n (define_insn_reservation  \"atom_sselog\" 1\n   (and (eq_attr \"cpu\" \"atom\")\n-       (and (eq_attr \"type\" \"sselog\")\n+       (and (eq_attr \"type\" \"sselog,sseshuf\")\n             (eq_attr \"memory\" \"none\")))\n   \"atom-simple-either\")\n \n (define_insn_reservation  \"atom_sselog_mem\" 1\n   (and (eq_attr \"cpu\" \"atom\")\n-       (and (eq_attr \"type\" \"sselog\")\n+       (and (eq_attr \"type\" \"sselog,sseshuf\")\n             (eq_attr \"memory\" \"!none\")))\n   \"atom-simple-either\")\n \n (define_insn_reservation  \"atom_sselog1\" 1\n   (and (eq_attr \"cpu\" \"atom\")\n-       (and (eq_attr \"type\" \"sselog1\")\n+       (and (eq_attr \"type\" \"sselog1,sseshuf1\")\n             (eq_attr \"memory\" \"none\")))\n   \"atom-simple-0\")\n \n (define_insn_reservation  \"atom_sselog1_mem\" 1\n   (and (eq_attr \"cpu\" \"atom\")\n-       (and (eq_attr \"type\" \"sselog1\")\n+       (and (eq_attr \"type\" \"sselog1,sseshuf1\")\n             (eq_attr \"memory\" \"!none\")))\n   \"atom-simple-0\")\n "}, {"sha": "71dd4e2b65a1b15d4374f78de027a20c5f193722", "filename": "gcc/config/i386/bdver1.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fconfig%2Fi386%2Fbdver1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fconfig%2Fi386%2Fbdver1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbdver1.md?ref=eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce", "patch": "@@ -482,23 +482,23 @@\n ;; SSE logs.\n (define_insn_reservation \"bdver1_sselog_load_256\" 7\n \t\t\t (and (eq_attr \"cpu\" \"bdver1,bdver2\")\n-\t\t\t      (and (eq_attr \"type\" \"sselog,sselog1\")\n+\t\t\t      (and (eq_attr \"type\" \"sselog,sselog1,sseshuf,sseshuf1\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V8SF\")\n \t\t\t\t   (eq_attr \"memory\" \"load\"))))\n \t\t\t \"bdver1-double,bdver1-fpload,bdver1-fmal\")\n (define_insn_reservation \"bdver1_sselog_256\" 3\n \t\t\t (and (eq_attr \"cpu\" \"bdver1,bdver2\")\n-\t\t\t      (and (eq_attr \"type\" \"sselog,sselog1\")\n+\t\t\t      (and (eq_attr \"type\" \"sselog,sselog1,sseshuf,sseshuf1\")\n                                    (eq_attr \"mode\" \"V8SF\")))\n \t\t\t \"bdver1-double,bdver1-fpsched,bdver1-fmal\")\n (define_insn_reservation \"bdver1_sselog_load\" 6\n \t\t\t (and (eq_attr \"cpu\" \"bdver1,bdver2\")\n-\t\t\t      (and (eq_attr \"type\" \"sselog,sselog1\")\n+\t\t\t      (and (eq_attr \"type\" \"sselog,sselog1,sseshuf,sseshuf1\")\n \t\t\t\t   (eq_attr \"memory\" \"load\")))\n \t\t\t \"bdver1-direct,bdver1-fpload,bdver1-fxbar\")\n (define_insn_reservation \"bdver1_sselog\" 2\n \t\t\t (and (eq_attr \"cpu\" \"bdver1,bdver2\")\n-\t\t\t      (eq_attr \"type\" \"sselog,sselog1\"))\n+\t\t\t      (eq_attr \"type\" \"sselog,sselog1,sseshuf,sseshuf1\"))\n \t\t\t \"bdver1-direct,bdver1-fpsched,bdver1-fxbar\")\n \n ;; PCMP actually executes in FMAL."}, {"sha": "a9e048a1e855e2e582f6b8bbe53dbeaa79f53713", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce", "patch": "@@ -542,6 +542,8 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \tprocessor = PROCESSOR_GEODE;\n       else if (has_movbe)\n \tprocessor = PROCESSOR_BTVER2;\n+      else if (has_xsaveopt)\n+        processor = PROCESSOR_BDVER3;\n       else if (has_bmi)\n         processor = PROCESSOR_BDVER2;\n       else if (has_xop)\n@@ -712,6 +714,9 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n     case PROCESSOR_BDVER2:\n       cpu = \"bdver2\";\n       break;\n+    case PROCESSOR_BDVER3:\n+      cpu = \"bdver3\";\n+      break;\n     case PROCESSOR_BTVER1:\n       cpu = \"btver1\";\n       break;"}, {"sha": "d1677cf25d221d4842176b9d95417748fd8d22e2", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce", "patch": "@@ -114,6 +114,10 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n       def_or_undef (parse_in, \"__bdver2\");\n       def_or_undef (parse_in, \"__bdver2__\");\n       break;\n+    case PROCESSOR_BDVER3:\n+      def_or_undef (parse_in, \"__bdver3\");\n+      def_or_undef (parse_in, \"__bdver3__\");\n+      break;\n     case PROCESSOR_BTVER1:\n       def_or_undef (parse_in, \"__btver1\");\n       def_or_undef (parse_in, \"__btver1__\");\n@@ -209,7 +213,10 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     case PROCESSOR_BDVER2:\n       def_or_undef (parse_in, \"__tune_bdver2__\");\n       break;\n-   case PROCESSOR_BTVER1:\n+    case PROCESSOR_BDVER3:\n+      def_or_undef (parse_in, \"__tune_bdver3__\");\n+      break;\n+    case PROCESSOR_BTVER1:\n       def_or_undef (parse_in, \"__tune_btver1__\");\n       break;\n     case PROCESSOR_BTVER2:"}, {"sha": "eb1025f30331278a8de0aad010966762e7f12737", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 99, "deletions": 7, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce", "patch": "@@ -1002,6 +1002,85 @@ struct processor_costs bdver2_cost = {\n   1,\t\t\t\t\t/* cond_not_taken_branch_cost.  */\n };\n \n+struct processor_costs bdver3_cost = {\n+  COSTS_N_INSNS (1),\t\t\t/* cost of an add instruction */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of a lea instruction */\n+  COSTS_N_INSNS (1),\t\t\t/* variable shift costs */\n+  COSTS_N_INSNS (1),\t\t\t/* constant shift costs */\n+  {COSTS_N_INSNS (4),\t\t\t/* cost of starting multiply for QI */\n+   COSTS_N_INSNS (4),\t\t\t/*\t\t\t\t HI */\n+   COSTS_N_INSNS (4),\t\t\t/*\t\t\t\t SI */\n+   COSTS_N_INSNS (6),\t\t\t/*\t\t\t\t DI */\n+   COSTS_N_INSNS (6)},\t\t\t/*\t\t\t      other */\n+  0,\t\t\t\t\t/* cost of multiply per each bit set */\n+  {COSTS_N_INSNS (19),\t\t\t/* cost of a divide/mod for QI */\n+   COSTS_N_INSNS (35),\t\t\t/*\t\t\t    HI */\n+   COSTS_N_INSNS (51),\t\t\t/*\t\t\t    SI */\n+   COSTS_N_INSNS (83),\t\t\t/*\t\t\t    DI */\n+   COSTS_N_INSNS (83)},\t\t\t/*\t\t\t    other */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of movsx */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of movzx */\n+  8,\t\t\t\t\t/* \"large\" insn */\n+  9,\t\t\t\t\t/* MOVE_RATIO */\n+  4,\t\t\t\t     /* cost for loading QImode using movzbl */\n+  {5, 5, 4},\t\t\t\t/* cost of loading integer registers\n+\t\t\t\t\t   in QImode, HImode and SImode.\n+\t\t\t\t\t   Relative to reg-reg move (2).  */\n+  {4, 4, 4},\t\t\t\t/* cost of storing integer registers */\n+  2,\t\t\t\t\t/* cost of reg,reg fld/fst */\n+  {5, 5, 12},\t\t\t\t/* cost of loading fp registers\n+\t\t   \t\t\t   in SFmode, DFmode and XFmode */\n+  {4, 4, 8},\t\t\t\t/* cost of storing fp registers\n+ \t\t   \t\t\t   in SFmode, DFmode and XFmode */\n+  2,\t\t\t\t\t/* cost of moving MMX register */\n+  {4, 4},\t\t\t\t/* cost of loading MMX registers\n+\t\t\t\t\t   in SImode and DImode */\n+  {4, 4},\t\t\t\t/* cost of storing MMX registers\n+\t\t\t\t\t   in SImode and DImode */\n+  2,\t\t\t\t\t/* cost of moving SSE register */\n+  {4, 4, 4},\t\t\t\t/* cost of loading SSE registers\n+\t\t\t\t\t   in SImode, DImode and TImode */\n+  {4, 4, 4},\t\t\t\t/* cost of storing SSE registers\n+\t\t\t\t\t   in SImode, DImode and TImode */\n+  2,\t\t\t\t\t/* MMX or SSE register to integer */\n+  16,\t\t\t\t\t/* size of l1 cache.  */\n+  2048,\t\t\t\t\t/* size of l2 cache.  */\n+  64,\t\t\t\t\t/* size of prefetch block */\n+  /* New AMD processors never drop prefetches; if they cannot be performed\n+     immediately, they are queued.  We set number of simultaneous prefetches\n+     to a large constant to reflect this (it probably is not a good idea not\n+     to limit number of prefetches at all, as their execution also takes some\n+     time).  */\n+  100,\t\t\t\t\t/* number of parallel prefetches */\n+  2,\t\t\t\t\t/* Branch cost */\n+  COSTS_N_INSNS (6),\t\t\t/* cost of FADD and FSUB insns.  */\n+  COSTS_N_INSNS (6),\t\t\t/* cost of FMUL instruction.  */\n+  COSTS_N_INSNS (42),\t\t\t/* cost of FDIV instruction.  */\n+  COSTS_N_INSNS (2),\t\t\t/* cost of FABS instruction.  */\n+  COSTS_N_INSNS (2),\t\t\t/* cost of FCHS instruction.  */\n+  COSTS_N_INSNS (52),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  /*  BDVER3 has optimized REP instruction for medium sized blocks, but for\n+      very small blocks it is better to use loop. For large blocks, libcall\n+      can do nontemporary accesses and beat inline considerably.  */\n+  {{libcall, {{6, loop}, {14, unrolled_loop}, {-1, rep_prefix_4_byte}}},\n+   {libcall, {{16, loop}, {8192, rep_prefix_8_byte}, {-1, libcall}}}},\n+  {{libcall, {{8, loop}, {24, unrolled_loop},\n+\t      {2048, rep_prefix_4_byte}, {-1, libcall}}},\n+   {libcall, {{48, unrolled_loop}, {8192, rep_prefix_8_byte}, {-1, libcall}}}},\n+  6,\t\t\t\t\t/* scalar_stmt_cost.  */\n+  4,\t\t\t\t\t/* scalar load_cost.  */\n+  4,\t\t\t\t\t/* scalar_store_cost.  */\n+  6,\t\t\t\t\t/* vec_stmt_cost.  */\n+  0,\t\t\t\t\t/* vec_to_scalar_cost.  */\n+  2,\t\t\t\t\t/* scalar_to_vec_cost.  */\n+  4,\t\t\t\t\t/* vec_align_load_cost.  */\n+  4,\t\t\t\t\t/* vec_unalign_load_cost.  */\n+  4,\t\t\t\t\t/* vec_store_cost.  */\n+  2,\t\t\t\t\t/* cond_taken_branch_cost.  */\n+  1,\t\t\t\t\t/* cond_not_taken_branch_cost.  */\n+};\n+\n struct processor_costs btver1_cost = {\n   COSTS_N_INSNS (1),\t\t\t/* cost of an add instruction */\n   COSTS_N_INSNS (2),\t\t\t/* cost of a lea instruction */\n@@ -1562,7 +1641,8 @@ const struct processor_costs *ix86_cost = &pentium_cost;\n #define m_AMDFAM10 (1<<PROCESSOR_AMDFAM10)\n #define m_BDVER1 (1<<PROCESSOR_BDVER1)\n #define m_BDVER2 (1<<PROCESSOR_BDVER2)\n-#define m_BDVER\t(m_BDVER1 | m_BDVER2)\n+#define m_BDVER3 (1<<PROCESSOR_BDVER3)\n+#define m_BDVER\t(m_BDVER1 | m_BDVER2 | m_BDVER3)\n #define m_BTVER (m_BTVER1 | m_BTVER2)\n #define m_BTVER1 (1<<PROCESSOR_BTVER1)\n #define m_BTVER2 (1<<PROCESSOR_BTVER2)\n@@ -2265,6 +2345,7 @@ static const struct ptt processor_target_table[PROCESSOR_max] =\n   {&amdfam10_cost, 32, 24, 32, 7, 32},\n   {&bdver1_cost, 32, 24, 32, 7, 32},\n   {&bdver2_cost, 32, 24, 32, 7, 32},\n+  {&bdver3_cost, 32, 24, 32, 7, 32},\n   {&btver1_cost, 32, 24, 32, 7, 32},\n   {&btver2_cost, 32, 24, 32, 7, 32},\n   {&atom_cost, 16, 15, 16, 7, 16}\n@@ -2297,6 +2378,7 @@ static const char *const cpu_names[TARGET_CPU_DEFAULT_max] =\n   \"amdfam10\",\n   \"bdver1\",\n   \"bdver2\",\n+  \"bdver3\",\n   \"btver1\",\n   \"btver2\"\n };\n@@ -2794,18 +2876,24 @@ ix86_option_override_internal (bool main_args_p)\n \tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n \t| PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_SSSE3 | PTA_SSE4_1\n \t| PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX | PTA_FMA4\n-\t| PTA_XOP | PTA_LWP | PTA_PRFCHW | PTA_FXSR | PTA_XSAVE\n-\t| PTA_XSAVEOPT},\n+\t| PTA_XOP | PTA_LWP | PTA_PRFCHW | PTA_FXSR | PTA_XSAVE},\n       {\"bdver2\", PROCESSOR_BDVER2, CPU_BDVER2,\n \tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n \t| PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_SSSE3 | PTA_SSE4_1\n \t| PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX | PTA_FMA4\n \t| PTA_XOP | PTA_LWP | PTA_BMI | PTA_TBM | PTA_F16C\n-\t| PTA_FMA | PTA_PRFCHW | PTA_FXSR | PTA_XSAVE | PTA_XSAVEOPT},\n+\t| PTA_FMA | PTA_PRFCHW | PTA_FXSR | PTA_XSAVE},\n+      {\"bdver3\", PROCESSOR_BDVER3, CPU_BDVER3,\n+\tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n+\t| PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_SSSE3 | PTA_SSE4_1\n+\t| PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX\n+\t| PTA_XOP | PTA_LWP | PTA_BMI | PTA_TBM | PTA_F16C\n+\t| PTA_FMA | PTA_PRFCHW | PTA_FXSR | PTA_XSAVE \n+\t| PTA_XSAVEOPT},\n       {\"btver1\", PROCESSOR_BTVER1, CPU_GENERIC64,\n \tPTA_64BIT | PTA_MMX |  PTA_SSE  | PTA_SSE2 | PTA_SSE3\n \t| PTA_SSSE3 | PTA_SSE4A |PTA_ABM | PTA_CX16 | PTA_PRFCHW\n-\t| PTA_FXSR | PTA_XSAVE | PTA_XSAVEOPT},\n+\t| PTA_FXSR | PTA_XSAVE},\n       {\"btver2\", PROCESSOR_BTVER2, CPU_GENERIC64,\n \tPTA_64BIT | PTA_MMX |  PTA_SSE  | PTA_SSE2 | PTA_SSE3\n \t| PTA_SSSE3 | PTA_SSE4A |PTA_ABM | PTA_CX16 | PTA_SSE4_1\n@@ -23836,6 +23924,7 @@ ix86_issue_rate (void)\n     case PROCESSOR_GENERIC64:\n     case PROCESSOR_BDVER1:\n     case PROCESSOR_BDVER2:\n+    case PROCESSOR_BDVER3:\n     case PROCESSOR_BTVER1:\n       return 3;\n \n@@ -24025,6 +24114,7 @@ ix86_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n     case PROCESSOR_AMDFAM10:\n     case PROCESSOR_BDVER1:\n     case PROCESSOR_BDVER2:\n+    case PROCESSOR_BDVER3:\n     case PROCESSOR_BTVER1:\n     case PROCESSOR_BTVER2:\n     case PROCESSOR_ATOM:\n@@ -29321,7 +29411,8 @@ fold_builtin_cpu (tree fndecl, tree *args)\n     M_AMDFAM10H_SHANGHAI,\n     M_AMDFAM10H_ISTANBUL,\n     M_AMDFAM15H_BDVER1,\n-    M_AMDFAM15H_BDVER2\n+    M_AMDFAM15H_BDVER2,\n+    M_AMDFAM15H_BDVER3\n   };\n \n   static struct _arch_names_table\n@@ -29346,6 +29437,7 @@ fold_builtin_cpu (tree fndecl, tree *args)\n       {\"amdfam15h\", M_AMDFAM15H},\n       {\"bdver1\", M_AMDFAM15H_BDVER1},\n       {\"bdver2\", M_AMDFAM15H_BDVER2},\n+      {\"bdver3\", M_AMDFAM15H_BDVER3},\n     };\n \n   static struct _isa_names_table\n@@ -41685,7 +41777,7 @@ do_dispatch (rtx insn, int mode)\n static bool\n has_dispatch (rtx insn, int action)\n {\n-  if ((TARGET_BDVER1 || TARGET_BDVER2)\n+  if ((TARGET_BDVER1 || TARGET_BDVER2 || TARGET_BDVER3)\n       && flag_dispatch_scheduler)\n     switch (action)\n       {"}, {"sha": "d34cfa436bf16964e0af008717992dfea0040bc6", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce", "patch": "@@ -254,6 +254,7 @@ extern const struct processor_costs ix86_size_cost;\n #define TARGET_AMDFAM10 (ix86_tune == PROCESSOR_AMDFAM10)\n #define TARGET_BDVER1 (ix86_tune == PROCESSOR_BDVER1)\n #define TARGET_BDVER2 (ix86_tune == PROCESSOR_BDVER2)\n+#define TARGET_BDVER3 (ix86_tune == PROCESSOR_BDVER3)\n #define TARGET_BTVER1 (ix86_tune == PROCESSOR_BTVER1)\n #define TARGET_BTVER2 (ix86_tune == PROCESSOR_BTVER2)\n #define TARGET_ATOM (ix86_tune == PROCESSOR_ATOM)\n@@ -616,6 +617,7 @@ enum target_cpu_default\n   TARGET_CPU_DEFAULT_amdfam10,\n   TARGET_CPU_DEFAULT_bdver1,\n   TARGET_CPU_DEFAULT_bdver2,\n+  TARGET_CPU_DEFAULT_bdver3,\n   TARGET_CPU_DEFAULT_btver1,\n   TARGET_CPU_DEFAULT_btver2,\n \n@@ -2101,6 +2103,7 @@ enum processor_type\n   PROCESSOR_AMDFAM10,\n   PROCESSOR_BDVER1,\n   PROCESSOR_BDVER2,\n+  PROCESSOR_BDVER3,\n   PROCESSOR_BTVER1,\n   PROCESSOR_BTVER2,\n   PROCESSOR_ATOM,"}, {"sha": "f21e5cc47b0aca805a02461de2577c586a0d2fe0", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce", "patch": "@@ -322,7 +322,7 @@\n \f\n ;; Processor type.\n (define_attr \"cpu\" \"none,pentium,pentiumpro,geode,k6,athlon,k8,core2,corei7,\n-\t\t    atom,generic64,amdfam10,bdver1,bdver2,btver1,btver2\"\n+ \t\t    atom,generic64,amdfam10,bdver1,bdver2,bdver3,btver1,btver2\"\n   (const (symbol_ref \"ix86_schedule\")))\n \n ;; A basic instruction type.  Refinements due to arguments to be\n@@ -337,7 +337,7 @@\n    fmov,fop,fsgn,fmul,fdiv,fpspc,fcmov,fcmp,fxch,fistp,fisttp,frndint,\n    sselog,sselog1,sseiadd,sseiadd1,sseishft,sseishft1,sseimul,\n    sse,ssemov,sseadd,sseadd1,ssemul,ssecmp,ssecomi,ssecvt,ssecvt1,sseicvt,\n-   ssediv,sseins,ssemuladd,sse4arg,lwp,\n+   sseshuf,sseshuf1,ssediv,sseins,ssemuladd,sse4arg,lwp,\n    mmx,mmxmov,mmxadd,mmxmul,mmxcmp,mmxcvt,mmxshft\"\n   (const_string \"other\"))\n \n@@ -352,7 +352,7 @@\n \t   (const_string \"i387\")\n \t (eq_attr \"type\" \"sselog,sselog1,sseiadd,sseiadd1,sseishft,sseishft1,sseimul,\n \t\t\t  sse,ssemov,sseadd,sseadd1,ssemul,ssecmp,ssecomi,ssecvt,\n-\t\t\t  ssecvt1,sseicvt,ssediv,sseins,ssemuladd,sse4arg\")\n+\t\t\t  sseshuf,sseshuf1,ssecvt1,sseicvt,ssediv,sseins,ssemuladd,sse4arg\")\n \t   (const_string \"sse\")\n \t (eq_attr \"type\" \"mmx,mmxmov,mmxadd,mmxmul,mmxcmp,mmxcvt,mmxshft\")\n \t   (const_string \"mmx\")\n@@ -593,7 +593,7 @@\n \t   (if_then_else (match_operand 1 \"constant_call_address_operand\")\n \t     (const_string \"none\")\n \t     (const_string \"load\"))\n-\t (and (eq_attr \"type\" \"alu1,negnot,ishift1,sselog1\")\n+\t (and (eq_attr \"type\" \"alu1,negnot,ishift1,sselog1,sseshuf1\")\n \t      (match_operand 1 \"memory_operand\"))\n \t   (const_string \"both\")\n \t (and (match_operand 0 \"memory_operand\")\n@@ -608,7 +608,7 @@\n \t\t   imov,imovx,icmp,test,bitmanip,\n \t\t   fmov,fcmp,fsgn,\n \t\t   sse,ssemov,ssecmp,ssecomi,ssecvt,ssecvt1,sseicvt,sselog1,\n-\t\t   sseadd1,sseiadd1,mmx,mmxmov,mmxcmp,mmxcvt\")\n+\t\t   sseshuf1,sseadd1,sseiadd1,mmx,mmxmov,mmxcmp,mmxcvt\")\n \t      (match_operand 2 \"memory_operand\"))\n \t   (const_string \"load\")\n \t (and (eq_attr \"type\" \"icmov,ssemuladd,sse4arg\")\n@@ -946,6 +946,7 @@\n (include \"k6.md\")\n (include \"athlon.md\")\n (include \"bdver1.md\")\n+(include \"bdver3.md\")\n (include \"geode.md\")\n (include \"atom.md\")\n (include \"core2.md\")"}, {"sha": "66e04bf77cd3b66db7228712fb43da00e1e4d708", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce", "patch": "@@ -419,7 +419,7 @@ the function.\n \n mdispatch-scheduler\n Target RejectNegative Var(flag_dispatch_scheduler)\n-Do dispatch scheduling if processor is bdver1 or bdver2 and Haifa scheduling\n+Do dispatch scheduling if processor is bdver1 or bdver2 or bdver3 and Haifa scheduling\n is selected.\n \n mprefer-avx128"}, {"sha": "a219ce963ea021a4117e72a8c47254a762bf5daf", "filename": "gcc/config/i386/ppro.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fconfig%2Fi386%2Fppro.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fconfig%2Fi386%2Fppro.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fppro.md?ref=eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce", "patch": "@@ -690,14 +690,14 @@\n \t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n \t\t\t      (and (eq_attr \"memory\" \"none\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V4SF\")\n-\t\t\t\t\t(eq_attr \"type\" \"sselog,sselog1\"))))\n+\t\t\t\t\t(eq_attr \"type\" \"sselog,sselog1,sseshuf,sseshuf1\"))))\n \t\t\t \"decodern,p1\")\n \n (define_insn_reservation \"ppro_sse_log_V4SF_load\" 2\n \t\t\t (and (eq_attr \"cpu\" \"pentiumpro\")\n \t\t\t      (and (eq_attr \"memory\" \"load\")\n \t\t\t\t   (and (eq_attr \"mode\" \"V4SF\")\n-\t\t\t\t\t(eq_attr \"type\" \"sselog,sselog1\"))))\n+\t\t\t\t\t(eq_attr \"type\" \"sselog,sselog1,sseshuf,sseshuf1\"))))\n \t\t\t \"decoder0,(p2+p1)\")\n \n (define_insn_reservation \"ppro_sse_mov_V4SF\" 1"}, {"sha": "826c0aae281ccc982c6fa511d4f211010fcfd118", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce", "patch": "@@ -3861,7 +3861,7 @@\n \n   return \"vshufps\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n }\n-  [(set_attr \"type\" \"sselog\")\n+  [(set_attr \"type\" \"sseshuf\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n@@ -3912,7 +3912,7 @@\n     }\n }\n   [(set_attr \"isa\" \"noavx,avx\")\n-   (set_attr \"type\" \"sselog\")\n+   (set_attr \"type\" \"sseshuf\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"V4SF\")])\n@@ -4019,7 +4019,7 @@\n    vmovlps\\t{%2, %1, %0|%0, %1, %2}\n    %vmovlps\\t{%2, %0|%0, %2}\"\n   [(set_attr \"isa\" \"noavx,avx,noavx,avx,*\")\n-   (set_attr \"type\" \"sselog,sselog,ssemov,ssemov,ssemov\")\n+   (set_attr \"type\" \"sseshuf,sseshuf,ssemov,ssemov,ssemov\")\n    (set_attr \"length_immediate\" \"1,1,*,*,*\")\n    (set_attr \"prefix\" \"orig,vex,orig,vex,maybe_vex\")\n    (set_attr \"mode\" \"V4SF,V4SF,V2SF,V2SF,V2SF\")])\n@@ -4073,7 +4073,7 @@\n    vbroadcastss\\t{%1, %0|%0, %1}\n    shufps\\t{$0, %0, %0|%0, %0, 0}\"\n   [(set_attr \"isa\" \"avx,avx,noavx\")\n-   (set_attr \"type\" \"sselog1,ssemov,sselog1\")\n+   (set_attr \"type\" \"sseshuf1,ssemov,sseshuf1\")\n    (set_attr \"length_immediate\" \"1,0,1\")\n    (set_attr \"prefix_extra\" \"0,1,*\")\n    (set_attr \"prefix\" \"vex,vex,orig\")\n@@ -4803,7 +4803,7 @@\n \n   return \"vshufpd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n }\n-  [(set_attr \"type\" \"sselog\")\n+  [(set_attr \"type\" \"sseshuf\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V4DF\")])\n@@ -4917,7 +4917,7 @@\n     }\n }\n   [(set_attr \"isa\" \"noavx,avx\")\n-   (set_attr \"type\" \"sselog\")\n+   (set_attr \"type\" \"sseshuf\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"V2DF\")])"}, {"sha": "ccf45051ab140a6113cf19846c5c8cdcf0ac7eff", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce", "patch": "@@ -9615,6 +9615,9 @@ AMD family 15h Bulldozer version 1.\n @item bdver2\n AMD family 15h Bulldozer version 2.\n \n+@item bdver3\n+AMD family 15h Bulldozer version 3.\n+\n @item btver2\n AMD family 16h CPU.\n @end table"}, {"sha": "b3abc0960d97db9fbd79278130f6b43b71dbaa8b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=eb2f2b44dd5787351f9fef5703b6cb8163c3c7ce", "patch": "@@ -13727,6 +13727,11 @@ AMD Family 15h core based CPUs with x86-64 instruction set support.  (This\n supersets BMI, TBM, F16C, FMA, AVX, XOP, LWP, AES, PCL_MUL, CX16, MMX, SSE,\n SSE2, SSE3, SSE4A, SSSE3, SSE4.1, SSE4.2, ABM and 64-bit instruction set \n extensions.)\n+@item bdver3\n+AMD Family 15h core based CPUs with x86-64 instruction set support.  (This\n+supersets BMI, TBM, F16C, FMA, AVX, XOP, LWP, AES, PCL_MUL, CX16, MMX, SSE,\n+SSE2, SSE3, SSE4A, SSSE3, SSE4.1, SSE4.2, ABM and 64-bit instruction set \n+extensions.\n \n @item btver1\n CPUs based on AMD Family 14h cores with x86-64 instruction set support.  (This"}]}