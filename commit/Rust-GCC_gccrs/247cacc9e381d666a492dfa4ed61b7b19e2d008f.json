{"sha": "247cacc9e381d666a492dfa4ed61b7b19e2d008f", "node_id": "C_kwDOANBUbNoAKDI0N2NhY2M5ZTM4MWQ2NjZhNDkyZGZhNGVkNjFiN2IxOWUyZDAwOGY", "commit": {"author": {"name": "Pan Li", "email": "pan2.li@intel.com", "date": "2023-03-07T12:05:15Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-03-07T13:35:20Z"}, "message": "RISC-V: Bugfix for rvv bool mode precision adjustment\n\nFix the bug of the rvv bool mode precision with the adjustment.\nThe bits size of vbool*_t will be adjusted to\n[1, 2, 4, 8, 16, 32, 64] according to the rvv spec 1.0 isa. The\nadjusted mode precison of vbool*_t will help underlying pass to\nmake the right decision for both the correctness and optimization.\n\nGiven below sample code:\n\nvoid test_1(int8_t * restrict in, int8_t * restrict out)\n{\n  vbool8_t v2 = *(vbool8_t*)in;\n  vbool16_t v5 = *(vbool16_t*)in;\n  *(vbool16_t*)(out + 200) = v5;\n  *(vbool8_t*)(out + 100) = v2;\n}\n\nBefore the precision adjustment:\n\naddi    a4,a1,100\nvsetvli a5,zero,e8,m1,ta,ma\naddi    a1,a1,200\nvlm.v   v24,0(a0)\nvsm.v   v24,0(a4)\n// Need one vsetvli and vlm.v for correctness here.\nvsm.v   v24,0(a1)\n\nAfter the precision adjustment:\n\ncsrr    t0,vlenb\nslli    t1,t0,1\ncsrr    a3,vlenb\nsub     sp,sp,t1\nslli    a4,a3,1\nadd     a4,a4,sp\nsub     a3,a4,a3\nvsetvli a5,zero,e8,m1,ta,ma\naddi    a2,a1,200\nvlm.v   v24,0(a0)\nvsm.v   v24,0(a3)\naddi    a1,a1,100\nvsetvli a4,zero,e8,mf2,ta,ma\ncsrr    t0,vlenb\nvlm.v   v25,0(a3)\nvsm.v   v25,0(a2)\nslli    t1,t0,1\nvsetvli a5,zero,e8,m1,ta,ma\nvsm.v   v24,0(a1)\nadd     sp,sp,t1\njr      ra\n\nHowever, there may be some optimization opportunates after\nthe mode precision adjustment. It can be token care of in\nthe RISC-V backend in the underlying separted PR(s).\n\ngcc/ChangeLog:\n\n\tPR target/108185\n\tPR target/108654\n\t* config/riscv/riscv-modes.def (ADJUST_PRECISION): Adjust VNx*BI\n\tmodes.\n\t* config/riscv/riscv.cc (riscv_v_adjust_precision): New.\n\t* config/riscv/riscv.h (riscv_v_adjust_precision): New.\n\t* genmodes.cc (adj_precision): New.\n\t(ADJUST_PRECISION): New.\n\t(emit_mode_adjustments): Handle ADJUST_PRECISION.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/108185\n\tPR target/108654\n\t* gcc.target/riscv/rvv/base/pr108185-1.c: New test.\n\t* gcc.target/riscv/rvv/base/pr108185-2.c: New test.\n\t* gcc.target/riscv/rvv/base/pr108185-3.c: New test.\n\t* gcc.target/riscv/rvv/base/pr108185-4.c: New test.\n\t* gcc.target/riscv/rvv/base/pr108185-5.c: New test.\n\t* gcc.target/riscv/rvv/base/pr108185-6.c: New test.\n\t* gcc.target/riscv/rvv/base/pr108185-7.c: New test.\n\t* gcc.target/riscv/rvv/base/pr108185-8.c: New test.\n\nSigned-off-by: Pan Li <pan2.li@intel.com>\nCo-authored-by: Ju-Zhe Zhong <juzhe.zhong@rivai.ai>", "tree": {"sha": "7cf4d11ae0b5103c63322753fc07d3257f82965b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cf4d11ae0b5103c63322753fc07d3257f82965b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/247cacc9e381d666a492dfa4ed61b7b19e2d008f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/247cacc9e381d666a492dfa4ed61b7b19e2d008f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/247cacc9e381d666a492dfa4ed61b7b19e2d008f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/247cacc9e381d666a492dfa4ed61b7b19e2d008f/comments", "author": {"login": "Incarnation-p-lee", "id": 6782002, "node_id": "MDQ6VXNlcjY3ODIwMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/6782002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Incarnation-p-lee", "html_url": "https://github.com/Incarnation-p-lee", "followers_url": "https://api.github.com/users/Incarnation-p-lee/followers", "following_url": "https://api.github.com/users/Incarnation-p-lee/following{/other_user}", "gists_url": "https://api.github.com/users/Incarnation-p-lee/gists{/gist_id}", "starred_url": "https://api.github.com/users/Incarnation-p-lee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Incarnation-p-lee/subscriptions", "organizations_url": "https://api.github.com/users/Incarnation-p-lee/orgs", "repos_url": "https://api.github.com/users/Incarnation-p-lee/repos", "events_url": "https://api.github.com/users/Incarnation-p-lee/events{/privacy}", "received_events_url": "https://api.github.com/users/Incarnation-p-lee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59a72acbccf4c81a04b4d09760fc8b16992de106", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59a72acbccf4c81a04b4d09760fc8b16992de106", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59a72acbccf4c81a04b4d09760fc8b16992de106"}], "stats": {"total": 602, "additions": 600, "deletions": 2}, "files": [{"sha": "110bddce8518ffcbebd7f03544ddb5fab52e558b", "filename": "gcc/config/riscv/riscv-modes.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247cacc9e381d666a492dfa4ed61b7b19e2d008f/gcc%2Fconfig%2Friscv%2Friscv-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247cacc9e381d666a492dfa4ed61b7b19e2d008f/gcc%2Fconfig%2Friscv%2Friscv-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-modes.def?ref=247cacc9e381d666a492dfa4ed61b7b19e2d008f", "patch": "@@ -72,6 +72,14 @@ ADJUST_BYTESIZE (VNx16BI, riscv_vector_chunks * riscv_bytes_per_vector_chunk);\n ADJUST_BYTESIZE (VNx32BI, riscv_vector_chunks * riscv_bytes_per_vector_chunk);\n ADJUST_BYTESIZE (VNx64BI, riscv_v_adjust_nunits (VNx64BImode, 8));\n \n+ADJUST_PRECISION (VNx1BI, riscv_v_adjust_precision (VNx1BImode, 1));\n+ADJUST_PRECISION (VNx2BI, riscv_v_adjust_precision (VNx2BImode, 2));\n+ADJUST_PRECISION (VNx4BI, riscv_v_adjust_precision (VNx4BImode, 4));\n+ADJUST_PRECISION (VNx8BI, riscv_v_adjust_precision (VNx8BImode, 8));\n+ADJUST_PRECISION (VNx16BI, riscv_v_adjust_precision (VNx16BImode, 16));\n+ADJUST_PRECISION (VNx32BI, riscv_v_adjust_precision (VNx32BImode, 32));\n+ADJUST_PRECISION (VNx64BI, riscv_v_adjust_precision (VNx64BImode, 64));\n+\n /*\n    | Mode        | MIN_VLEN=32 | MIN_VLEN=32 | MIN_VLEN=64 | MIN_VLEN=64 |\n    |             | LMUL        | SEW/LMUL    | LMUL        | SEW/LMUL    |"}, {"sha": "e7b7d87cebcbd0d225506e8cf5bb914f39ab823d", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247cacc9e381d666a492dfa4ed61b7b19e2d008f/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247cacc9e381d666a492dfa4ed61b7b19e2d008f/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=247cacc9e381d666a492dfa4ed61b7b19e2d008f", "patch": "@@ -1003,6 +1003,18 @@ riscv_v_adjust_nunits (machine_mode mode, int scale)\n   return scale;\n }\n \n+/* Call from ADJUST_PRECISION in riscv-modes.def.  Return the correct\n+   PRECISION size for corresponding machine_mode.  */\n+\n+poly_int64\n+riscv_v_adjust_precision (machine_mode mode, int scale)\n+{\n+  if (riscv_v_ext_vector_mode_p (mode))\n+    return riscv_vector_chunks * scale;\n+\n+  return scale;\n+}\n+\n /* Return true if X is a valid address for machine mode MODE.  If it is,\n    fill in INFO appropriately.  STRICT_P is true if REG_OK_STRICT is in\n    effect.  */"}, {"sha": "15b9317a8cecf23d7d9753a9579efe802af1b357", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247cacc9e381d666a492dfa4ed61b7b19e2d008f/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247cacc9e381d666a492dfa4ed61b7b19e2d008f/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=247cacc9e381d666a492dfa4ed61b7b19e2d008f", "patch": "@@ -1025,6 +1025,7 @@ extern unsigned riscv_stack_boundary;\n extern unsigned riscv_bytes_per_vector_chunk;\n extern poly_uint16 riscv_vector_chunks;\n extern poly_int64 riscv_v_adjust_nunits (enum machine_mode, int);\n+extern poly_int64 riscv_v_adjust_precision (enum machine_mode, int);\n /* The number of bits and bytes in a RVV vector.  */\n #define BITS_PER_RISCV_VECTOR (poly_uint16 (riscv_vector_chunks * riscv_bytes_per_vector_chunk * 8))\n #define BYTES_PER_RISCV_VECTOR (poly_uint16 (riscv_vector_chunks * riscv_bytes_per_vector_chunk))"}, {"sha": "715787b8f4833b4e564237bc02f18c4b200aaa04", "filename": "gcc/genmodes.cc", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247cacc9e381d666a492dfa4ed61b7b19e2d008f/gcc%2Fgenmodes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247cacc9e381d666a492dfa4ed61b7b19e2d008f/gcc%2Fgenmodes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.cc?ref=247cacc9e381d666a492dfa4ed61b7b19e2d008f", "patch": "@@ -114,6 +114,7 @@ static struct mode_adjust *adj_alignment;\n static struct mode_adjust *adj_format;\n static struct mode_adjust *adj_ibit;\n static struct mode_adjust *adj_fbit;\n+static struct mode_adjust *adj_precision;\n \n /* Mode class operations.  */\n static enum mode_class\n@@ -819,6 +820,7 @@ make_vector_mode (enum mode_class bclass,\n #define ADJUST_NUNITS(M, X)    _ADD_ADJUST (nunits, M, X, RANDOM, RANDOM)\n #define ADJUST_BYTESIZE(M, X)  _ADD_ADJUST (bytesize, M, X, RANDOM, RANDOM)\n #define ADJUST_ALIGNMENT(M, X) _ADD_ADJUST (alignment, M, X, RANDOM, RANDOM)\n+#define ADJUST_PRECISION(M, X) _ADD_ADJUST (precision, M, X, RANDOM, RANDOM)\n #define ADJUST_FLOAT_FORMAT(M, X)    _ADD_ADJUST (format, M, X, FLOAT, FLOAT)\n #define ADJUST_IBIT(M, X)  _ADD_ADJUST (ibit, M, X, ACCUM, UACCUM)\n #define ADJUST_FBIT(M, X)  _ADD_ADJUST (fbit, M, X, FRACT, UACCUM)\n@@ -1794,6 +1796,7 @@ emit_real_format_for_mode (void)\n static void\n emit_mode_adjustments (void)\n {\n+  int c;\n   struct mode_adjust *a;\n   struct mode_data *m;\n \n@@ -1829,8 +1832,9 @@ emit_mode_adjustments (void)\n \t      \" (mode_precision[E_%smode], mode_nunits[E_%smode]);\\n\",\n \t      m->name, m->name);\n       printf (\"    mode_precision[E_%smode] = ps * old_factor;\\n\", m->name);\n-      printf (\"    mode_size[E_%smode] = exact_div (mode_precision[E_%smode],\"\n-\t      \" BITS_PER_UNIT);\\n\", m->name, m->name);\n+      printf (\"    if (!multiple_p (mode_precision[E_%smode],\"\n+\t      \" BITS_PER_UNIT, &mode_size[E_%smode]))\\n\", m->name, m->name);\n+      printf (\"      mode_size[E_%smode] = -1;\\n\", m->name);\n       printf (\"    mode_nunits[E_%smode] = ps;\\n\", m->name);\n       printf (\"    adjust_mode_mask (E_%smode);\\n\", m->name);\n       printf (\"  }\\n\");\n@@ -1963,6 +1967,26 @@ emit_mode_adjustments (void)\n     printf (\"\\n  /* %s:%d */\\n  REAL_MODE_FORMAT (E_%smode) = %s;\\n\",\n \t    a->file, a->line, a->mode->name, a->adjustment);\n \n+  /* Adjust precision to the actual bits size.  */\n+  for (a = adj_precision; a; a = a->next)\n+    switch (a->mode->cl)\n+      {\n+\tcase MODE_VECTOR_BOOL:\n+\t  printf (\"\\n  /* %s:%d.  */\\n  ps = %s;\\n\", a->file, a->line,\n+\t\t  a->adjustment);\n+\t  printf (\"  mode_precision[E_%smode] = ps;\\n\", a->mode->name);\n+\t  break;\n+\tdefault:\n+\t  internal_error (\"invalid use of ADJUST_PRECISION for mode %s\",\n+\t\t\t  a->mode->name);\n+\t  /* NOTREACHED.  */\n+      }\n+\n+  /* Ensure there is no mode size equals -1.  */\n+  for_all_modes (c, m)\n+    printf (\"\\n  gcc_assert (maybe_ne (mode_size[E_%smode], -1));\\n\",\n+\t    m->name);\n+\n   puts (\"}\");\n }\n "}, {"sha": "e70960c5b6d41719dea471e38132155daad67e45", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/pr108185-1.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247cacc9e381d666a492dfa4ed61b7b19e2d008f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247cacc9e381d666a492dfa4ed61b7b19e2d008f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-1.c?ref=247cacc9e381d666a492dfa4ed61b7b19e2d008f", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64 -O3\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void\n+test_vbool1_then_vbool2(int8_t * restrict in, int8_t * restrict out) {\n+    vbool1_t v1 = *(vbool1_t*)in;\n+    vbool2_t v2 = *(vbool2_t*)in;\n+\n+    *(vbool1_t*)(out + 100) = v1;\n+    *(vbool2_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool1_then_vbool4(int8_t * restrict in, int8_t * restrict out) {\n+    vbool1_t v1 = *(vbool1_t*)in;\n+    vbool4_t v2 = *(vbool4_t*)in;\n+\n+    *(vbool1_t*)(out + 100) = v1;\n+    *(vbool4_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool1_then_vbool8(int8_t * restrict in, int8_t * restrict out) {\n+    vbool1_t v1 = *(vbool1_t*)in;\n+    vbool8_t v2 = *(vbool8_t*)in;\n+\n+    *(vbool1_t*)(out + 100) = v1;\n+    *(vbool8_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool1_then_vbool16(int8_t * restrict in, int8_t * restrict out) {\n+    vbool1_t v1 = *(vbool1_t*)in;\n+    vbool16_t v2 = *(vbool16_t*)in;\n+\n+    *(vbool1_t*)(out + 100) = v1;\n+    *(vbool16_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool1_then_vbool32(int8_t * restrict in, int8_t * restrict out) {\n+    vbool1_t v1 = *(vbool1_t*)in;\n+    vbool32_t v2 = *(vbool32_t*)in;\n+\n+    *(vbool1_t*)(out + 100) = v1;\n+    *(vbool32_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool1_then_vbool64(int8_t * restrict in, int8_t * restrict out) {\n+    vbool1_t v1 = *(vbool1_t*)in;\n+    vbool64_t v2 = *(vbool64_t*)in;\n+\n+    *(vbool1_t*)(out + 100) = v1;\n+    *(vbool64_t*)(out + 200) = v2;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*ta,\\s*ma} 6 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x][0-9]+\\)} 12 } } */\n+/* { dg-final { scan-assembler-times {vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x][0-9]+\\)} 18 } } */"}, {"sha": "dcc7a644a884dd555549061ebbe155483f0dd102", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/pr108185-2.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247cacc9e381d666a492dfa4ed61b7b19e2d008f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247cacc9e381d666a492dfa4ed61b7b19e2d008f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-2.c?ref=247cacc9e381d666a492dfa4ed61b7b19e2d008f", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64 -O3\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void\n+test_vbool2_then_vbool1(int8_t * restrict in, int8_t * restrict out) {\n+    vbool2_t v1 = *(vbool2_t*)in;\n+    vbool1_t v2 = *(vbool1_t*)in;\n+\n+    *(vbool2_t*)(out + 100) = v1;\n+    *(vbool1_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool2_then_vbool4(int8_t * restrict in, int8_t * restrict out) {\n+    vbool2_t v1 = *(vbool2_t*)in;\n+    vbool4_t v2 = *(vbool4_t*)in;\n+\n+    *(vbool2_t*)(out + 100) = v1;\n+    *(vbool4_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool2_then_vbool8(int8_t * restrict in, int8_t * restrict out) {\n+    vbool2_t v1 = *(vbool2_t*)in;\n+    vbool8_t v2 = *(vbool8_t*)in;\n+\n+    *(vbool2_t*)(out + 100) = v1;\n+    *(vbool8_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool2_then_vbool16(int8_t * restrict in, int8_t * restrict out) {\n+    vbool2_t v1 = *(vbool2_t*)in;\n+    vbool16_t v2 = *(vbool16_t*)in;\n+\n+    *(vbool2_t*)(out + 100) = v1;\n+    *(vbool16_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool2_then_vbool32(int8_t * restrict in, int8_t * restrict out) {\n+    vbool2_t v1 = *(vbool2_t*)in;\n+    vbool32_t v2 = *(vbool32_t*)in;\n+\n+    *(vbool2_t*)(out + 100) = v1;\n+    *(vbool32_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool2_then_vbool64(int8_t * restrict in, int8_t * restrict out) {\n+    vbool2_t v1 = *(vbool2_t*)in;\n+    vbool64_t v2 = *(vbool64_t*)in;\n+\n+    *(vbool2_t*)(out + 100) = v1;\n+    *(vbool64_t*)(out + 200) = v2;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*ta,\\s*ma} 6 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x][0-9]+\\)} 12 } } */\n+/* { dg-final { scan-assembler-times {vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x][0-9]+\\)} 17 } } */"}, {"sha": "3af0513e00694b1f09612743527daefacfe19c56", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/pr108185-3.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247cacc9e381d666a492dfa4ed61b7b19e2d008f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247cacc9e381d666a492dfa4ed61b7b19e2d008f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-3.c?ref=247cacc9e381d666a492dfa4ed61b7b19e2d008f", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64 -O3\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void\n+test_vbool4_then_vbool1(int8_t * restrict in, int8_t * restrict out) {\n+    vbool4_t v1 = *(vbool4_t*)in;\n+    vbool1_t v2 = *(vbool1_t*)in;\n+\n+    *(vbool4_t*)(out + 100) = v1;\n+    *(vbool1_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool4_then_vbool2(int8_t * restrict in, int8_t * restrict out) {\n+    vbool4_t v1 = *(vbool4_t*)in;\n+    vbool2_t v2 = *(vbool2_t*)in;\n+\n+    *(vbool4_t*)(out + 100) = v1;\n+    *(vbool2_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool4_then_vbool8(int8_t * restrict in, int8_t * restrict out) {\n+    vbool4_t v1 = *(vbool4_t*)in;\n+    vbool8_t v2 = *(vbool8_t*)in;\n+\n+    *(vbool4_t*)(out + 100) = v1;\n+    *(vbool8_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool4_then_vbool16(int8_t * restrict in, int8_t * restrict out) {\n+    vbool4_t v1 = *(vbool4_t*)in;\n+    vbool16_t v2 = *(vbool16_t*)in;\n+\n+    *(vbool4_t*)(out + 100) = v1;\n+    *(vbool16_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool4_then_vbool32(int8_t * restrict in, int8_t * restrict out) {\n+    vbool4_t v1 = *(vbool4_t*)in;\n+    vbool32_t v2 = *(vbool32_t*)in;\n+\n+    *(vbool4_t*)(out + 100) = v1;\n+    *(vbool32_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool4_then_vbool64(int8_t * restrict in, int8_t * restrict out) {\n+    vbool4_t v1 = *(vbool4_t*)in;\n+    vbool64_t v2 = *(vbool64_t*)in;\n+\n+    *(vbool4_t*)(out + 100) = v1;\n+    *(vbool64_t*)(out + 200) = v2;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*ta,\\s*ma} 6 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x][0-9]+\\)} 12 } } */\n+/* { dg-final { scan-assembler-times {vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x][0-9]+\\)} 16 } } */"}, {"sha": "ea3c360d75603e0665d9fa102bd31f7c28d8cc3f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/pr108185-4.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247cacc9e381d666a492dfa4ed61b7b19e2d008f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247cacc9e381d666a492dfa4ed61b7b19e2d008f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-4.c?ref=247cacc9e381d666a492dfa4ed61b7b19e2d008f", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64 -O3\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void\n+test_vbool8_then_vbool1(int8_t * restrict in, int8_t * restrict out) {\n+    vbool8_t v1 = *(vbool8_t*)in;\n+    vbool1_t v2 = *(vbool1_t*)in;\n+\n+    *(vbool8_t*)(out + 100) = v1;\n+    *(vbool1_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool8_then_vbool2(int8_t * restrict in, int8_t * restrict out) {\n+    vbool8_t v1 = *(vbool8_t*)in;\n+    vbool2_t v2 = *(vbool2_t*)in;\n+\n+    *(vbool8_t*)(out + 100) = v1;\n+    *(vbool2_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool8_then_vbool4(int8_t * restrict in, int8_t * restrict out) {\n+    vbool8_t v1 = *(vbool8_t*)in;\n+    vbool4_t v2 = *(vbool4_t*)in;\n+\n+    *(vbool8_t*)(out + 100) = v1;\n+    *(vbool4_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool8_then_vbool16(int8_t * restrict in, int8_t * restrict out) {\n+    vbool8_t v1 = *(vbool8_t*)in;\n+    vbool16_t v2 = *(vbool16_t*)in;\n+\n+    *(vbool8_t*)(out + 100) = v1;\n+    *(vbool16_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool8_then_vbool32(int8_t * restrict in, int8_t * restrict out) {\n+    vbool8_t v1 = *(vbool8_t*)in;\n+    vbool32_t v2 = *(vbool32_t*)in;\n+\n+    *(vbool8_t*)(out + 100) = v1;\n+    *(vbool32_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool8_then_vbool64(int8_t * restrict in, int8_t * restrict out) {\n+    vbool8_t v1 = *(vbool8_t*)in;\n+    vbool64_t v2 = *(vbool64_t*)in;\n+\n+    *(vbool8_t*)(out + 100) = v1;\n+    *(vbool64_t*)(out + 200) = v2;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*ta,\\s*ma} 6 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x][0-9]+\\)} 12 } } */\n+/* { dg-final { scan-assembler-times {vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x][0-9]+\\)} 15 } } */"}, {"sha": "9fc659d24026eba3d363c5526de83a7a61c3b8ff", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/pr108185-5.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247cacc9e381d666a492dfa4ed61b7b19e2d008f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247cacc9e381d666a492dfa4ed61b7b19e2d008f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-5.c?ref=247cacc9e381d666a492dfa4ed61b7b19e2d008f", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64 -O3\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void\n+test_vbool16_then_vbool1(int8_t * restrict in, int8_t * restrict out) {\n+    vbool16_t v1 = *(vbool16_t*)in;\n+    vbool1_t v2 = *(vbool1_t*)in;\n+\n+    *(vbool16_t*)(out + 100) = v1;\n+    *(vbool1_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool16_then_vbool2(int8_t * restrict in, int8_t * restrict out) {\n+    vbool16_t v1 = *(vbool16_t*)in;\n+    vbool2_t v2 = *(vbool2_t*)in;\n+\n+    *(vbool16_t*)(out + 100) = v1;\n+    *(vbool2_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool16_then_vbool4(int8_t * restrict in, int8_t * restrict out) {\n+    vbool16_t v1 = *(vbool16_t*)in;\n+    vbool4_t v2 = *(vbool4_t*)in;\n+\n+    *(vbool16_t*)(out + 100) = v1;\n+    *(vbool4_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool16_then_vbool8(int8_t * restrict in, int8_t * restrict out) {\n+    vbool16_t v1 = *(vbool16_t*)in;\n+    vbool8_t v2 = *(vbool8_t*)in;\n+\n+    *(vbool16_t*)(out + 100) = v1;\n+    *(vbool8_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool16_then_vbool32(int8_t * restrict in, int8_t * restrict out) {\n+    vbool16_t v1 = *(vbool16_t*)in;\n+    vbool32_t v2 = *(vbool32_t*)in;\n+\n+    *(vbool16_t*)(out + 100) = v1;\n+    *(vbool32_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool16_then_vbool64(int8_t * restrict in, int8_t * restrict out) {\n+    vbool16_t v1 = *(vbool16_t*)in;\n+    vbool64_t v2 = *(vbool64_t*)in;\n+\n+    *(vbool16_t*)(out + 100) = v1;\n+    *(vbool64_t*)(out + 200) = v2;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*ta,\\s*ma} 6 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x][0-9]+\\)} 12 } } */\n+/* { dg-final { scan-assembler-times {vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x][0-9]+\\)} 14 } } */"}, {"sha": "98275e5267d2394f5c356738143d0266b5a0c58b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/pr108185-6.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247cacc9e381d666a492dfa4ed61b7b19e2d008f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247cacc9e381d666a492dfa4ed61b7b19e2d008f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-6.c?ref=247cacc9e381d666a492dfa4ed61b7b19e2d008f", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64 -O3\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void\n+test_vbool32_then_vbool1(int8_t * restrict in, int8_t * restrict out) {\n+    vbool32_t v1 = *(vbool32_t*)in;\n+    vbool1_t v2 = *(vbool1_t*)in;\n+\n+    *(vbool32_t*)(out + 100) = v1;\n+    *(vbool1_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool32_then_vbool2(int8_t * restrict in, int8_t * restrict out) {\n+    vbool32_t v1 = *(vbool32_t*)in;\n+    vbool2_t v2 = *(vbool2_t*)in;\n+\n+    *(vbool32_t*)(out + 100) = v1;\n+    *(vbool2_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool32_then_vbool4(int8_t * restrict in, int8_t * restrict out) {\n+    vbool32_t v1 = *(vbool32_t*)in;\n+    vbool4_t v2 = *(vbool4_t*)in;\n+\n+    *(vbool32_t*)(out + 100) = v1;\n+    *(vbool4_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool32_then_vbool8(int8_t * restrict in, int8_t * restrict out) {\n+    vbool32_t v1 = *(vbool32_t*)in;\n+    vbool8_t v2 = *(vbool8_t*)in;\n+\n+    *(vbool32_t*)(out + 100) = v1;\n+    *(vbool8_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool32_then_vbool16(int8_t * restrict in, int8_t * restrict out) {\n+    vbool32_t v1 = *(vbool32_t*)in;\n+    vbool16_t v2 = *(vbool16_t*)in;\n+\n+    *(vbool32_t*)(out + 100) = v1;\n+    *(vbool16_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool32_then_vbool64(int8_t * restrict in, int8_t * restrict out) {\n+    vbool32_t v1 = *(vbool32_t*)in;\n+    vbool64_t v2 = *(vbool64_t*)in;\n+\n+    *(vbool32_t*)(out + 100) = v1;\n+    *(vbool64_t*)(out + 200) = v2;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*ta,\\s*ma} 6 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x][0-9]+\\)} 12 } } */\n+/* { dg-final { scan-assembler-times {vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x][0-9]+\\)} 13 } } */"}, {"sha": "8f6f0b11f09d5feda754cf49529de0765411c1d0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/pr108185-7.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247cacc9e381d666a492dfa4ed61b7b19e2d008f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247cacc9e381d666a492dfa4ed61b7b19e2d008f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-7.c?ref=247cacc9e381d666a492dfa4ed61b7b19e2d008f", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64 -O3\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void\n+test_vbool64_then_vbool1(int8_t * restrict in, int8_t * restrict out) {\n+    vbool64_t v1 = *(vbool64_t*)in;\n+    vbool1_t v2 = *(vbool1_t*)in;\n+\n+    *(vbool64_t*)(out + 100) = v1;\n+    *(vbool1_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool64_then_vbool2(int8_t * restrict in, int8_t * restrict out) {\n+    vbool64_t v1 = *(vbool64_t*)in;\n+    vbool2_t v2 = *(vbool2_t*)in;\n+\n+    *(vbool64_t*)(out + 100) = v1;\n+    *(vbool2_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool64_then_vbool4(int8_t * restrict in, int8_t * restrict out) {\n+    vbool64_t v1 = *(vbool64_t*)in;\n+    vbool4_t v2 = *(vbool4_t*)in;\n+\n+    *(vbool64_t*)(out + 100) = v1;\n+    *(vbool4_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool64_then_vbool8(int8_t * restrict in, int8_t * restrict out) {\n+    vbool64_t v1 = *(vbool64_t*)in;\n+    vbool8_t v2 = *(vbool8_t*)in;\n+\n+    *(vbool64_t*)(out + 100) = v1;\n+    *(vbool8_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool64_then_vbool16(int8_t * restrict in, int8_t * restrict out) {\n+    vbool64_t v1 = *(vbool64_t*)in;\n+    vbool16_t v2 = *(vbool16_t*)in;\n+\n+    *(vbool64_t*)(out + 100) = v1;\n+    *(vbool16_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool64_then_vbool32(int8_t * restrict in, int8_t * restrict out) {\n+    vbool64_t v1 = *(vbool64_t*)in;\n+    vbool32_t v2 = *(vbool32_t*)in;\n+\n+    *(vbool64_t*)(out + 100) = v1;\n+    *(vbool32_t*)(out + 200) = v2;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*ta,\\s*ma} 6 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x][0-9]+\\)} 12 } } */\n+/* { dg-final { scan-assembler-times {vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x][0-9]+\\)} 12 } } */"}, {"sha": "d96959dd064b5f958b404cd55514473cfb284887", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/pr108185-8.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247cacc9e381d666a492dfa4ed61b7b19e2d008f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247cacc9e381d666a492dfa4ed61b7b19e2d008f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-8.c?ref=247cacc9e381d666a492dfa4ed61b7b19e2d008f", "patch": "@@ -0,0 +1,77 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64 -O3\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void\n+test_vbool1_then_vbool1(int8_t * restrict in, int8_t * restrict out) {\n+    vbool1_t v1 = *(vbool1_t*)in;\n+    vbool1_t v2 = *(vbool1_t*)in;\n+\n+    *(vbool1_t*)(out + 100) = v1;\n+    *(vbool1_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool2_then_vbool2(int8_t * restrict in, int8_t * restrict out) {\n+    vbool2_t v1 = *(vbool2_t*)in;\n+    vbool2_t v2 = *(vbool2_t*)in;\n+\n+    *(vbool2_t*)(out + 100) = v1;\n+    *(vbool2_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool4_then_vbool4(int8_t * restrict in, int8_t * restrict out) {\n+    vbool4_t v1 = *(vbool4_t*)in;\n+    vbool4_t v2 = *(vbool4_t*)in;\n+\n+    *(vbool4_t*)(out + 100) = v1;\n+    *(vbool4_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool8_then_vbool8(int8_t * restrict in, int8_t * restrict out) {\n+    vbool8_t v1 = *(vbool8_t*)in;\n+    vbool8_t v2 = *(vbool8_t*)in;\n+\n+    *(vbool8_t*)(out + 100) = v1;\n+    *(vbool8_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool16_then_vbool16(int8_t * restrict in, int8_t * restrict out) {\n+    vbool16_t v1 = *(vbool16_t*)in;\n+    vbool16_t v2 = *(vbool16_t*)in;\n+\n+    *(vbool16_t*)(out + 100) = v1;\n+    *(vbool16_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool32_then_vbool32(int8_t * restrict in, int8_t * restrict out) {\n+    vbool32_t v1 = *(vbool32_t*)in;\n+    vbool32_t v2 = *(vbool32_t*)in;\n+\n+    *(vbool32_t*)(out + 100) = v1;\n+    *(vbool32_t*)(out + 200) = v2;\n+}\n+\n+void\n+test_vbool64_then_vbool64(int8_t * restrict in, int8_t * restrict out) {\n+    vbool64_t v1 = *(vbool64_t*)in;\n+    vbool64_t v2 = *(vbool64_t*)in;\n+\n+    *(vbool64_t*)(out + 100) = v1;\n+    *(vbool64_t*)(out + 200) = v2;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*ta,\\s*ma} 1 } } */\n+/* { dg-final { scan-assembler-times {vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x][0-9]+\\)} 7 } } */\n+/* { dg-final { scan-assembler-times {vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x][0-9]+\\)} 14 } } */"}]}