{"sha": "7a0112e7a42a5a3891d93fa449348df6446fc8bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EwMTEyZTdhNDJhNWEzODkxZDkzZmE0NDkzNDhkZjY0NDZmYzhiYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-05-23T11:52:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-05-23T11:52:44Z"}, "message": "re PR c++/36308 (OpenMP privatized vars don't get dtors called if they are virtual)\n\n\tPR c++/36308\n\t* semantics.c (omp_clause_info_fndecl): New function.\n\t(finish_omp_clauses): Use it.\n\n\t* testsuite/libgomp.c++/ctor-11.C: New test.\n\t* testsuite/libgomp.c++/ctor-12.C: New test.\n\nFrom-SVN: r135798", "tree": {"sha": "3a38cb4eac5c303a4914f7d2e4ec296b47965633", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a38cb4eac5c303a4914f7d2e4ec296b47965633"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a0112e7a42a5a3891d93fa449348df6446fc8bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a0112e7a42a5a3891d93fa449348df6446fc8bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a0112e7a42a5a3891d93fa449348df6446fc8bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a0112e7a42a5a3891d93fa449348df6446fc8bb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3fda325236b11bff7210616f03247012d393a95f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fda325236b11bff7210616f03247012d393a95f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fda325236b11bff7210616f03247012d393a95f"}], "stats": {"total": 211, "additions": 205, "deletions": 6}, "files": [{"sha": "9de41887aa31558fd782872a7a9a86f53fb6ca00", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a0112e7a42a5a3891d93fa449348df6446fc8bb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a0112e7a42a5a3891d93fa449348df6446fc8bb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7a0112e7a42a5a3891d93fa449348df6446fc8bb", "patch": "@@ -1,3 +1,9 @@\n+2008-05-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/36308\n+\t* semantics.c (omp_clause_info_fndecl): New function.\n+\t(finish_omp_clauses): Use it.\n+\n 2008-05-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/36023"}, {"sha": "96999bf7e895625cf0c0e461b2b1745e35004f49", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a0112e7a42a5a3891d93fa449348df6446fc8bb/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a0112e7a42a5a3891d93fa449348df6446fc8bb/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=7a0112e7a42a5a3891d93fa449348df6446fc8bb", "patch": "@@ -3334,6 +3334,31 @@ finalize_nrv (tree *tp, tree var, tree result)\n   htab_delete (data.visited);\n }\n \f\n+/* Return the declaration for the function called by CALL_EXPR T,\n+   TYPE is the class type of the clause decl.  */\n+\n+static tree\n+omp_clause_info_fndecl (tree t, tree type)\n+{\n+  tree ret = get_callee_fndecl (t);\n+\n+  if (ret)\n+    return ret;\n+\n+  gcc_assert (TREE_CODE (t) == CALL_EXPR);\n+  t = CALL_EXPR_FN (t);\n+  STRIP_NOPS (t);\n+  if (TREE_CODE (t) == OBJ_TYPE_REF)\n+    {\n+      t = cp_fold_obj_type_ref (t, type);\n+      if (TREE_CODE (t) == ADDR_EXPR\n+\t  && TREE_CODE (TREE_OPERAND (t, 0)) == FUNCTION_DECL)\n+\treturn TREE_OPERAND (t, 0);\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* For all elements of CLAUSES, validate them vs OpenMP constraints.\n    Remove any elements from the list that are invalid.  */\n \n@@ -3677,8 +3702,7 @@ finish_omp_clauses (tree clauses)\n \t\tif (TREE_CODE (t) == NOP_EXPR)\n \t\t  t = TREE_OPERAND (t, 0);\n \n-\t      t = get_callee_fndecl (t);\n-\t      TREE_VEC_ELT (info, 0) = t;\n+\t      TREE_VEC_ELT (info, 0) = get_callee_fndecl (t);\n \t    }\n \n \t  if ((need_default_ctor || need_copy_ctor)\n@@ -3700,8 +3724,7 @@ finish_omp_clauses (tree clauses)\n \t\tif (TREE_CODE (t) == NOP_EXPR)\n \t\t  t = TREE_OPERAND (t, 0);\n \n-\t      t = get_callee_fndecl (t);\n-\t      TREE_VEC_ELT (info, 1) = t;\n+\t      TREE_VEC_ELT (info, 1) = omp_clause_info_fndecl (t, inner_type);\n \t    }\n \n \t  if (need_copy_assignment\n@@ -3720,8 +3743,7 @@ finish_omp_clauses (tree clauses)\n \t      if (TREE_CODE (t) == INDIRECT_REF)\n \t\tt = TREE_OPERAND (t, 0);\n \n-\t      t = get_callee_fndecl (t);\n-\t      TREE_VEC_ELT (info, 2) = t;\n+\t      TREE_VEC_ELT (info, 2) = omp_clause_info_fndecl (t, inner_type);\n \t    }\n \n \t  if (errorcount != save_errorcount)"}, {"sha": "f67375898d1eb7c835dec8a576e98cfc053825bf", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a0112e7a42a5a3891d93fa449348df6446fc8bb/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a0112e7a42a5a3891d93fa449348df6446fc8bb/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=7a0112e7a42a5a3891d93fa449348df6446fc8bb", "patch": "@@ -1,3 +1,9 @@\n+2008-05-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/36308\n+\t* testsuite/libgomp.c++/ctor-11.C: New test.\n+\t* testsuite/libgomp.c++/ctor-12.C: New test.\n+\n 2008-05-15  Janis Johnson  <janis187@us.ibm.com>\n \n \t* testsuite/lib/libgomp.exp: Load torture-options.exp from gcc lib."}, {"sha": "8f501e8c8e5dca427ce54e7a0fc93541c7a2d354", "filename": "libgomp/testsuite/libgomp.c++/ctor-11.C", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a0112e7a42a5a3891d93fa449348df6446fc8bb/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fctor-11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a0112e7a42a5a3891d93fa449348df6446fc8bb/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fctor-11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fctor-11.C?ref=7a0112e7a42a5a3891d93fa449348df6446fc8bb", "patch": "@@ -0,0 +1,100 @@\n+// PR c++/36308\n+// { dg-do run }\n+\n+#include <omp.h>\n+#include <assert.h>\n+\n+#define N 10\n+\n+struct B\n+{\n+  static int icount;\n+  static int ccount;\n+  static int dcount;\n+  static int xcount;\n+\n+  B ();\n+  B (const B &);\n+  virtual ~B ();\n+  B& operator= (const B &);\n+  void doit ();\n+  static void clear () { icount = ccount = dcount = xcount = 0; }\n+};\n+\n+int B::icount;\n+int B::ccount;\n+int B::dcount;\n+int B::xcount;\n+\n+B::B ()\n+{\n+  #pragma omp atomic\n+    icount++;\n+}\n+\n+B::B (const B &)\n+{\n+  #pragma omp atomic\n+    ccount++;\n+}\n+\n+B::~B ()\n+{\n+  #pragma omp atomic\n+    dcount++;\n+}\n+\n+void\n+B::doit ()\n+{\n+  #pragma omp atomic\n+    xcount++;\n+}\n+\n+static int nthreads;\n+\n+void\n+test1 ()\n+{\n+  B b[N];\n+  #pragma omp parallel private (b)\n+    {\n+      #pragma omp master\n+\tnthreads = omp_get_num_threads ();\n+      b[0].doit ();\n+    }\n+}\n+\n+void\n+test2 ()\n+{\n+  B b;\n+  #pragma omp parallel firstprivate (b)\n+    {\n+      #pragma omp single\n+\tnthreads = omp_get_num_threads ();\n+      b.doit ();\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  omp_set_dynamic (0);\n+  omp_set_num_threads (4);\n+\n+  B::clear ();\n+  test1 ();\n+  assert (B::xcount == nthreads);\n+  assert (B::ccount == 0);\n+  assert (B::icount == (nthreads + 1) * N);\n+  assert (B::dcount == (nthreads + 1) * N);\n+\n+  B::clear ();\n+  test2 ();\n+  assert (B::xcount == nthreads);\n+  assert (B::ccount == nthreads);\n+  assert (B::icount == 1);\n+  assert (B::dcount == nthreads + 1);\n+  return 0;\n+}"}, {"sha": "762cbd96275c78a02933478224b68786c38b4ef1", "filename": "libgomp/testsuite/libgomp.c++/ctor-12.C", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a0112e7a42a5a3891d93fa449348df6446fc8bb/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fctor-12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a0112e7a42a5a3891d93fa449348df6446fc8bb/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fctor-12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fctor-12.C?ref=7a0112e7a42a5a3891d93fa449348df6446fc8bb", "patch": "@@ -0,0 +1,65 @@\n+// PR c++/36308\n+// { dg-do run }\n+\n+extern \"C\" void abort ();\n+\n+static int ctors, dtors, copyctors, n, m;\n+\n+struct A\n+{\n+  A ()\n+  {\n+    l = 0;\n+    #pragma omp atomic\n+      ctors++;\n+  }\n+  A (const A &x)\n+  {\n+    l = x.l;\n+    #pragma omp atomic\n+      copyctors++;\n+  }\n+  virtual A& operator= (const A &x)\n+  {\n+    l = x.l;\n+    #pragma omp atomic\n+      assignops++;\n+    return *this;\n+  }\n+  virtual ~A ()\n+  {\n+    #pragma omp atomic\n+      dtors++;\n+  }\n+  int l;\n+  static int ctors, dtors, copyctors, assignops;\n+};\n+\n+int A::ctors;\n+int A::dtors;\n+int A::copyctors;\n+int A::assignops;\n+\n+int\n+main ()\n+{\n+  A a;\n+#pragma omp parallel private (a)\n+  {\n+    a.l = 6;\n+    #pragma omp single copyprivate (a)\n+    {\n+      a.l = 3;\n+    }\n+    if (a.l != 3)\n+      abort ();\n+    #pragma omp atomic\n+      n++;\n+  }\n+  if (A::ctors != n + 1\n+      || A::copyctors != 0\n+      || A::dtors != n\n+      || A::assignops != n - 1)\n+    abort ();\n+  return 0;\n+}"}]}