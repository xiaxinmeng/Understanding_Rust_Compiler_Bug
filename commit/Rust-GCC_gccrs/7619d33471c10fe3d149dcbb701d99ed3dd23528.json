{"sha": "7619d33471c10fe3d149dcbb701d99ed3dd23528", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYxOWQzMzQ3MWMxMGZlM2QxNDlkY2JiNzAxZDk5ZWQzZGQyMzUyOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-24T09:25:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-24T09:35:08Z"}, "message": "openmp: in_reduction clause support on target construct\n\nThis patch adds support for in_reduction clause on target construct, though\nfor now only for synchronous targets (without nowait clause).\nThe encountering thread in that case runs the target task and blocks until\nthe target region ends, so it is implemented by remapping it before entering\nthe target, initializing the private copy if not yet initialized for the\ncurrent thread and then using the remapped addresses for the mapping\naddresses.\nFor nowait combined with in_reduction the patch contains a hack where the\nnowait clause is ignored.  To implement it correctly, I think we would need\nto create a new private variable for the in_reduction and initialize it before\ndoing the async target and adjust the map addresses to that private variable\nand then pass a function pointer to the library routine with code where the callback\nwould remap the address to the current threads private variable and use in_reduction\ncombiner to combine the private variable we've created into the thread's copy.\nThe library would then need to make sure that the routine is called in some thread\nparticipating in the parallel (and not in an unshackeled thread).\n\n2021-06-24  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/\n\t* tree.h (OMP_CLAUSE_MAP_IN_REDUCTION): Document meaning for OpenMP.\n\t* gimplify.c (gimplify_scan_omp_clauses): For OpenMP map clauses\n\twith OMP_CLAUSE_MAP_IN_REDUCTION flag partially defer gimplification\n\tof non-decl OMP_CLAUSE_DECL.  For OMP_CLAUSE_IN_REDUCTION on\n\tOMP_TARGET user outer_ctx instead of ctx for placeholders and\n\tinitializer/combiner gimplification.\n\t* omp-low.c (scan_sharing_clauses): Handle OMP_CLAUSE_MAP_IN_REDUCTION\n\ton target constructs.\n\t(lower_rec_input_clauses): Likewise.\n\t(lower_omp_target): Likewise.\n\t* omp-expand.c (expand_omp_target): Temporarily ignore nowait clause\n\ton target if in_reduction is present.\ngcc/c-family/\n\t* c-common.h (enum c_omp_region_type): Add C_ORT_TARGET and\n\tC_ORT_OMP_TARGET.\n\t* c-omp.c (c_omp_split_clauses): For OMP_CLAUSE_IN_REDUCTION on\n\tcombined target constructs also add map (always, tofrom:) clause.\ngcc/c/\n\t* c-parser.c (omp_split_clauses): Pass C_ORT_OMP_TARGET instead of\n\tC_ORT_OMP for clauses on target construct.\n\t(OMP_TARGET_CLAUSE_MASK): Add in_reduction clause.\n\t(c_parser_omp_target): For non-combined target add\n\tmap (always, tofrom:) clauses for OMP_CLAUSE_IN_REDUCTION.  Pass\n\tC_ORT_OMP_TARGET to c_finish_omp_clauses.\n\t* c-typeck.c (handle_omp_array_sections): Adjust ort handling\n\tfor addition of C_ORT_OMP_TARGET and simplify, mapping clauses are\n\tnever present on C_ORT_*DECLARE_SIMD.\n\t(c_finish_omp_clauses): Likewise.  Handle OMP_CLAUSE_IN_REDUCTION\n\ton C_ORT_OMP_TARGET, set OMP_CLAUSE_MAP_IN_REDUCTION on\n\tcorresponding map clauses.\ngcc/cp/\n\t* parser.c (cp_omp_split_clauses): Pass C_ORT_OMP_TARGET instead of\n\tC_ORT_OMP for clauses on target construct.\n\t(OMP_TARGET_CLAUSE_MASK): Add in_reduction clause.\n\t(cp_parser_omp_target): For non-combined target add\n\tmap (always, tofrom:) clauses for OMP_CLAUSE_IN_REDUCTION.  Pass\n\tC_ORT_OMP_TARGET to finish_omp_clauses.\n\t* semantics.c (handle_omp_array_sections_1): Adjust ort handling\n\tfor addition of C_ORT_OMP_TARGET and simplify, mapping clauses are\n\tnever present on C_ORT_*DECLARE_SIMD.\n\t(handle_omp_array_sections): Likewise.\n\t(finish_omp_clauses): Likewise.  Handle OMP_CLAUSE_IN_REDUCTION\n\ton C_ORT_OMP_TARGET, set OMP_CLAUSE_MAP_IN_REDUCTION on\n\tcorresponding map clauses.\n\t* pt.c (tsubst_expr): Pass C_ORT_OMP_TARGET instead of C_ORT_OMP for\n\tclauses on target construct.\ngcc/testsuite/\n\t* c-c++-common/gomp/target-in-reduction-1.c: New test.\n\t* c-c++-common/gomp/clauses-1.c: Add in_reduction clauses on\n\ttarget or combined target constructs.\nlibgomp/\n\t* testsuite/libgomp.c-c++-common/target-in-reduction-1.c: New test.\n\t* testsuite/libgomp.c-c++-common/target-in-reduction-2.c: New test.\n\t* testsuite/libgomp.c++/target-in-reduction-1.C: New test.\n\t* testsuite/libgomp.c++/target-in-reduction-2.C: New test.", "tree": {"sha": "84c1a8fa0676170bf3110c9583200923822efe49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84c1a8fa0676170bf3110c9583200923822efe49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7619d33471c10fe3d149dcbb701d99ed3dd23528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7619d33471c10fe3d149dcbb701d99ed3dd23528", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7619d33471c10fe3d149dcbb701d99ed3dd23528", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7619d33471c10fe3d149dcbb701d99ed3dd23528/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d8ed5c8b52171b663975cd46233de9f9fd80323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d8ed5c8b52171b663975cd46233de9f9fd80323", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d8ed5c8b52171b663975cd46233de9f9fd80323"}], "stats": {"total": 1232, "additions": 1098, "deletions": 134}, "files": [{"sha": "88022d0b0a9ec637a56ffab19037877e5429b2de", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7619d33471c10fe3d149dcbb701d99ed3dd23528/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7619d33471c10fe3d149dcbb701d99ed3dd23528/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=7619d33471c10fe3d149dcbb701d99ed3dd23528", "patch": "@@ -1208,7 +1208,9 @@ enum c_omp_region_type\n   C_ORT_OMP\t\t\t= 1 << 0,\n   C_ORT_ACC\t\t\t= 1 << 1,\n   C_ORT_DECLARE_SIMD\t\t= 1 << 2,\n-  C_ORT_OMP_DECLARE_SIMD\t= C_ORT_OMP | C_ORT_DECLARE_SIMD\n+  C_ORT_TARGET\t\t\t= 1 << 3,\n+  C_ORT_OMP_DECLARE_SIMD\t= C_ORT_OMP | C_ORT_DECLARE_SIMD,\n+  C_ORT_OMP_TARGET\t\t= C_ORT_OMP | C_ORT_TARGET\n };\n \n extern tree c_finish_omp_master (location_t, tree);"}, {"sha": "cd81a08aec00298f5a57abb7325bba49316ccee6", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7619d33471c10fe3d149dcbb701d99ed3dd23528/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7619d33471c10fe3d149dcbb701d99ed3dd23528/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=7619d33471c10fe3d149dcbb701d99ed3dd23528", "patch": "@@ -2092,6 +2092,19 @@ c_omp_split_clauses (location_t loc, enum tree_code code,\n \t    s = C_OMP_CLAUSE_SPLIT_TEAMS;\n \t  break;\n \tcase OMP_CLAUSE_IN_REDUCTION:\n+\t  if ((mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_MAP)) != 0)\n+\t    {\n+\t      /* When on target, map(always, tofrom: item) is added as\n+\t\t well.  For non-combined target it is added in the FEs.  */\n+\t      c = build_omp_clause (OMP_CLAUSE_LOCATION (clauses),\n+\t\t\t\t    OMP_CLAUSE_MAP);\n+\t      OMP_CLAUSE_DECL (c) = OMP_CLAUSE_DECL (clauses);\n+\t      OMP_CLAUSE_SET_MAP_KIND (c, GOMP_MAP_ALWAYS_TOFROM);\n+\t      OMP_CLAUSE_CHAIN (c) = cclauses[C_OMP_CLAUSE_SPLIT_TARGET];\n+\t      cclauses[C_OMP_CLAUSE_SPLIT_TARGET] = c;\n+\t      s = C_OMP_CLAUSE_SPLIT_TARGET;\n+\t      break;\n+\t    }\n \t  /* in_reduction on taskloop simd becomes reduction on the simd\n \t     and keeps being in_reduction on taskloop.  */\n \t  if (code == OMP_SIMD)"}, {"sha": "c0f702049bb3b2c8b0cff0b6d4220ac2c1924216", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7619d33471c10fe3d149dcbb701d99ed3dd23528/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7619d33471c10fe3d149dcbb701d99ed3dd23528/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=7619d33471c10fe3d149dcbb701d99ed3dd23528", "patch": "@@ -18701,7 +18701,9 @@ omp_split_clauses (location_t loc, enum tree_code code,\n   c_omp_split_clauses (loc, code, mask, clauses, cclauses);\n   for (i = 0; i < C_OMP_CLAUSE_SPLIT_COUNT; i++)\n     if (cclauses[i])\n-      cclauses[i] = c_finish_omp_clauses (cclauses[i], C_ORT_OMP);\n+      cclauses[i] = c_finish_omp_clauses (cclauses[i],\n+\t\t\t\t\t  i == C_OMP_CLAUSE_SPLIT_TARGET\n+\t\t\t\t\t  ? C_ORT_OMP_TARGET : C_ORT_OMP);\n }\n \n /* OpenMP 5.0:\n@@ -20013,6 +20015,7 @@ c_parser_omp_target_exit_data (location_t loc, c_parser *parser,\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_FIRSTPRIVATE)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_ALLOCATE)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_DEFAULTMAP)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_IN_REDUCTION)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_IS_DEVICE_PTR))\n \n static bool\n@@ -20179,7 +20182,18 @@ c_parser_omp_target (c_parser *parser, enum pragma_context context, bool *if_p)\n \n   OMP_TARGET_CLAUSES (stmt)\n     = c_parser_omp_all_clauses (parser, OMP_TARGET_CLAUSE_MASK,\n-\t\t\t\t\"#pragma omp target\");\n+\t\t\t\t\"#pragma omp target\", false);\n+  for (tree c = OMP_TARGET_CLAUSES (stmt); c; c = OMP_CLAUSE_CHAIN (c))\n+    if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_IN_REDUCTION)\n+      {\n+\ttree nc = build_omp_clause (OMP_CLAUSE_LOCATION (c), OMP_CLAUSE_MAP);\n+\tOMP_CLAUSE_DECL (nc) = OMP_CLAUSE_DECL (c);\n+\tOMP_CLAUSE_SET_MAP_KIND (nc, GOMP_MAP_ALWAYS_TOFROM);\n+\tOMP_CLAUSE_CHAIN (nc) = OMP_CLAUSE_CHAIN (c);\n+\tOMP_CLAUSE_CHAIN (c) = nc;\n+      }\n+  OMP_TARGET_CLAUSES (stmt)\n+    = c_finish_omp_clauses (OMP_TARGET_CLAUSES (stmt), C_ORT_OMP_TARGET);\n   c_omp_adjust_map_clauses (OMP_TARGET_CLAUSES (stmt), true);\n \n   pc = &OMP_TARGET_CLAUSES (stmt);"}, {"sha": "d0d36c3b0818229917f51155106cb82e69f77324", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 69, "deletions": 40, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7619d33471c10fe3d149dcbb701d99ed3dd23528/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7619d33471c10fe3d149dcbb701d99ed3dd23528/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=7619d33471c10fe3d149dcbb701d99ed3dd23528", "patch": "@@ -13648,32 +13648,29 @@ handle_omp_array_sections (tree c, enum c_omp_region_type ort)\n \t      && TREE_CODE (TREE_TYPE (t)) == ARRAY_TYPE))\n \treturn false;\n       gcc_assert (OMP_CLAUSE_MAP_KIND (c) != GOMP_MAP_FORCE_DEVICEPTR);\n-      if (ort == C_ORT_OMP || ort == C_ORT_ACC)\n-\tswitch (OMP_CLAUSE_MAP_KIND (c))\n-\t  {\n-\t  case GOMP_MAP_ALLOC:\n-\t  case GOMP_MAP_IF_PRESENT:\n-\t  case GOMP_MAP_TO:\n-\t  case GOMP_MAP_FROM:\n-\t  case GOMP_MAP_TOFROM:\n-\t  case GOMP_MAP_ALWAYS_TO:\n-\t  case GOMP_MAP_ALWAYS_FROM:\n-\t  case GOMP_MAP_ALWAYS_TOFROM:\n-\t  case GOMP_MAP_RELEASE:\n-\t  case GOMP_MAP_DELETE:\n-\t  case GOMP_MAP_FORCE_TO:\n-\t  case GOMP_MAP_FORCE_FROM:\n-\t  case GOMP_MAP_FORCE_TOFROM:\n-\t  case GOMP_MAP_FORCE_PRESENT:\n-\t    OMP_CLAUSE_MAP_MAYBE_ZERO_LENGTH_ARRAY_SECTION (c) = 1;\n-\t    break;\n-\t  default:\n-\t    break;\n-\t  }\n+      switch (OMP_CLAUSE_MAP_KIND (c))\n+\t{\n+\tcase GOMP_MAP_ALLOC:\n+\tcase GOMP_MAP_IF_PRESENT:\n+\tcase GOMP_MAP_TO:\n+\tcase GOMP_MAP_FROM:\n+\tcase GOMP_MAP_TOFROM:\n+\tcase GOMP_MAP_ALWAYS_TO:\n+\tcase GOMP_MAP_ALWAYS_FROM:\n+\tcase GOMP_MAP_ALWAYS_TOFROM:\n+\tcase GOMP_MAP_RELEASE:\n+\tcase GOMP_MAP_DELETE:\n+\tcase GOMP_MAP_FORCE_TO:\n+\tcase GOMP_MAP_FORCE_FROM:\n+\tcase GOMP_MAP_FORCE_TOFROM:\n+\tcase GOMP_MAP_FORCE_PRESENT:\n+\t  OMP_CLAUSE_MAP_MAYBE_ZERO_LENGTH_ARRAY_SECTION (c) = 1;\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n       tree c2 = build_omp_clause (OMP_CLAUSE_LOCATION (c), OMP_CLAUSE_MAP);\n-      if (ort != C_ORT_OMP && ort != C_ORT_ACC)\n-\tOMP_CLAUSE_SET_MAP_KIND (c2, GOMP_MAP_POINTER);\n-      else if (TREE_CODE (t) == COMPONENT_REF)\n+      if (TREE_CODE (t) == COMPONENT_REF)\n \tOMP_CLAUSE_SET_MAP_KIND (c2, GOMP_MAP_ATTACH_DETACH);\n       else\n \tOMP_CLAUSE_SET_MAP_KIND (c2, GOMP_MAP_FIRSTPRIVATE_POINTER);\n@@ -13970,6 +13967,7 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n   int reduction_seen = 0;\n   bool allocate_seen = false;\n   bool implicit_moved = false;\n+  bool target_in_reduction_seen = false;\n \n   bitmap_obstack_initialize (NULL);\n   bitmap_initialize (&generic_head, &bitmap_default_obstack);\n@@ -13981,7 +13979,7 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n   bitmap_initialize (&map_field_head, &bitmap_default_obstack);\n   bitmap_initialize (&map_firstprivate_head, &bitmap_default_obstack);\n   /* If ort == C_ORT_OMP used as nontemporal_head or use_device_xxx_head\n-     instead.  */\n+     instead and for ort == C_ORT_OMP_TARGET used as in_reduction_head.  */\n   bitmap_initialize (&oacc_reduction_head, &bitmap_default_obstack);\n \n   if (ort & C_ORT_ACC)\n@@ -14374,8 +14372,22 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t   || (ort == C_ORT_OMP\n \t\t       && (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE_PTR\n \t\t\t   || (OMP_CLAUSE_CODE (c)\n-\t\t\t       == OMP_CLAUSE_USE_DEVICE_ADDR))))\n+\t\t\t       == OMP_CLAUSE_USE_DEVICE_ADDR)))\n+\t\t   || (ort == C_ORT_OMP_TARGET\n+\t\t       && OMP_CLAUSE_CODE (c) == OMP_CLAUSE_IN_REDUCTION))\n \t    {\n+\t      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_IN_REDUCTION\n+\t\t  && (bitmap_bit_p (&generic_head, DECL_UID (t))\n+\t\t      || bitmap_bit_p (&firstprivate_head, DECL_UID (t))))\n+\t\t{\n+\t\t  error_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t    \"%qD appears more than once in data-sharing \"\n+\t\t\t    \"clauses\", t);\n+\t\t  remove = true;\n+\t\t  break;\n+\t\t}\n+\t      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_IN_REDUCTION)\n+\t\ttarget_in_reduction_seen = true;\n \t      if (bitmap_bit_p (&oacc_reduction_head, DECL_UID (t)))\n \t\t{\n \t\t  error_at (OMP_CLAUSE_LOCATION (c),\n@@ -14390,7 +14402,8 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t    }\n \t  else if (bitmap_bit_p (&generic_head, DECL_UID (t))\n \t\t   || bitmap_bit_p (&firstprivate_head, DECL_UID (t))\n-\t\t   || bitmap_bit_p (&lastprivate_head, DECL_UID (t)))\n+\t\t   || bitmap_bit_p (&lastprivate_head, DECL_UID (t))\n+\t\t   || bitmap_bit_p (&map_firstprivate_head, DECL_UID (t)))\n \t    {\n \t      error_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t\"%qE appears more than once in data clauses\", t);\n@@ -14457,7 +14470,8 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t   && bitmap_bit_p (&map_firstprivate_head, DECL_UID (t)))\n \t    remove = true;\n \t  else if (bitmap_bit_p (&generic_head, DECL_UID (t))\n-\t\t   || bitmap_bit_p (&firstprivate_head, DECL_UID (t)))\n+\t\t   || bitmap_bit_p (&firstprivate_head, DECL_UID (t))\n+\t\t   || bitmap_bit_p (&map_firstprivate_head, DECL_UID (t)))\n \t    {\n \t      error_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t\"%qE appears more than once in data clauses\", t);\n@@ -14861,7 +14875,7 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t      if (VAR_P (t) || TREE_CODE (t) == PARM_DECL)\n \t\t{\n \t\t  if (bitmap_bit_p (&map_field_head, DECL_UID (t))\n-\t\t      || (ort == C_ORT_OMP\n+\t\t      || (ort != C_ORT_ACC\n \t\t\t  && bitmap_bit_p (&map_head, DECL_UID (t))))\n \t\t    break;\n \t\t}\n@@ -14918,7 +14932,8 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t   && OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_FIRSTPRIVATE_POINTER)\n \t    {\n \t      if (bitmap_bit_p (&generic_head, DECL_UID (t))\n-\t\t  || bitmap_bit_p (&firstprivate_head, DECL_UID (t)))\n+\t\t  || bitmap_bit_p (&firstprivate_head, DECL_UID (t))\n+\t\t  || bitmap_bit_p (&map_firstprivate_head, DECL_UID (t)))\n \t\t{\n \t\t  error_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t    \"%qD appears more than once in data clauses\", t);\n@@ -14935,13 +14950,10 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t  remove = true;\n \t\t}\n \t      else\n-\t\t{\n-\t\t  bitmap_set_bit (&generic_head, DECL_UID (t));\n-\t\t  bitmap_set_bit (&map_firstprivate_head, DECL_UID (t));\n-\t\t}\n+\t\tbitmap_set_bit (&map_firstprivate_head, DECL_UID (t));\n \t    }\n \t  else if (bitmap_bit_p (&map_head, DECL_UID (t))\n-\t\t   && (ort != C_ORT_OMP\n+\t\t   && (ort == C_ORT_ACC\n \t\t       || !bitmap_bit_p (&map_field_head, DECL_UID (t))))\n \t    {\n \t      if (OMP_CLAUSE_CODE (c) != OMP_CLAUSE_MAP)\n@@ -14955,8 +14967,8 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t\t  \"%qD appears more than once in map clauses\", t);\n \t      remove = true;\n \t    }\n-\t  else if (bitmap_bit_p (&generic_head, DECL_UID (t))\n-\t\t   && ort == C_ORT_ACC)\n+\t  else if (ort == C_ORT_ACC\n+\t\t   && bitmap_bit_p (&generic_head, DECL_UID (t)))\n \t    {\n \t      error_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t\"%qD appears more than once in data clauses\", t);\n@@ -15050,7 +15062,7 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t  if (TREE_CODE (TREE_TYPE (t)) != POINTER_TYPE)\n \t    {\n \t      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE_PTR\n-\t\t  && ort == C_ORT_OMP)\n+\t\t  && ort != C_ORT_ACC)\n \t\t{\n \t\t  error_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t    \"%qs variable is not a pointer\",\n@@ -15335,7 +15347,10 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n       reduction_seen = -2;\n     }\n \n-  if (linear_variable_step_check || reduction_seen == -2 || allocate_seen)\n+  if (linear_variable_step_check\n+      || reduction_seen == -2\n+      || allocate_seen\n+      || target_in_reduction_seen)\n     for (pc = &clauses, c = clauses; c ; c = *pc)\n       {\n \tbool remove = false;\n@@ -15383,6 +15398,20 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \telse if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_REDUCTION\n \t\t && reduction_seen == -2)\n \t  OMP_CLAUSE_REDUCTION_INSCAN (c) = 0;\n+\tif (target_in_reduction_seen\n+\t    && OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP)\n+\t  {\n+\t    tree t = OMP_CLAUSE_DECL (c);\n+\t    while (handled_component_p (t)\n+\t\t   || TREE_CODE (t) == INDIRECT_REF\n+\t\t   || TREE_CODE (t) == ADDR_EXPR\n+\t\t   || TREE_CODE (t) == MEM_REF\n+\t\t   || TREE_CODE (t) == NON_LVALUE_EXPR)\n+\t      t = TREE_OPERAND (t, 0);\n+\t    if (DECL_P (t)\n+\t\t&& bitmap_bit_p (&oacc_reduction_head, DECL_UID (t)))\n+\t      OMP_CLAUSE_MAP_IN_REDUCTION (c) = 1;\n+\t  }\n \n \tif (remove)\n \t  *pc = OMP_CLAUSE_CHAIN (c);"}, {"sha": "b7a429843e2935ab3a8871ad65f1ab54b7177f60", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7619d33471c10fe3d149dcbb701d99ed3dd23528/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7619d33471c10fe3d149dcbb701d99ed3dd23528/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=7619d33471c10fe3d149dcbb701d99ed3dd23528", "patch": "@@ -40877,7 +40877,9 @@ cp_omp_split_clauses (location_t loc, enum tree_code code,\n   c_omp_split_clauses (loc, code, mask, clauses, cclauses);\n   for (i = 0; i < C_OMP_CLAUSE_SPLIT_COUNT; i++)\n     if (cclauses[i])\n-      cclauses[i] = finish_omp_clauses (cclauses[i], C_ORT_OMP);\n+      cclauses[i] = finish_omp_clauses (cclauses[i],\n+\t\t\t\t\ti == C_OMP_CLAUSE_SPLIT_TARGET\n+\t\t\t\t\t? C_ORT_OMP_TARGET : C_ORT_OMP);\n }\n \n /* OpenMP 5.0:\n@@ -42219,6 +42221,7 @@ cp_parser_omp_target_update (cp_parser *parser, cp_token *pragma_tok,\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_FIRSTPRIVATE)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_DEFAULTMAP)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_ALLOCATE)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_IN_REDUCTION)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_IS_DEVICE_PTR))\n \n static bool\n@@ -42381,7 +42384,18 @@ cp_parser_omp_target (cp_parser *parser, cp_token *pragma_tok,\n \n   OMP_TARGET_CLAUSES (stmt)\n     = cp_parser_omp_all_clauses (parser, OMP_TARGET_CLAUSE_MASK,\n-\t\t\t\t \"#pragma omp target\", pragma_tok);\n+\t\t\t\t \"#pragma omp target\", pragma_tok, false);\n+  for (tree c = OMP_TARGET_CLAUSES (stmt); c; c = OMP_CLAUSE_CHAIN (c))\n+    if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_IN_REDUCTION)\n+      {\n+\ttree nc = build_omp_clause (OMP_CLAUSE_LOCATION (c), OMP_CLAUSE_MAP);\n+\tOMP_CLAUSE_DECL (nc) = OMP_CLAUSE_DECL (c);\n+\tOMP_CLAUSE_SET_MAP_KIND (nc, GOMP_MAP_ALWAYS_TOFROM);\n+\tOMP_CLAUSE_CHAIN (nc) = OMP_CLAUSE_CHAIN (c);\n+\tOMP_CLAUSE_CHAIN (c) = nc;\n+      }\n+  OMP_TARGET_CLAUSES (stmt)\n+    = finish_omp_clauses (OMP_TARGET_CLAUSES (stmt), C_ORT_OMP_TARGET);\n   c_omp_adjust_map_clauses (OMP_TARGET_CLAUSES (stmt), true);\n \n   pc = &OMP_TARGET_CLAUSES (stmt);"}, {"sha": "1af81208e26e5e2599d24366d3be3b6047c70139", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7619d33471c10fe3d149dcbb701d99ed3dd23528/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7619d33471c10fe3d149dcbb701d99ed3dd23528/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7619d33471c10fe3d149dcbb701d99ed3dd23528", "patch": "@@ -18886,9 +18886,12 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n     case OACC_DATA:\n     case OMP_TARGET_DATA:\n     case OMP_TARGET:\n-      tmp = tsubst_omp_clauses (OMP_CLAUSES (t), (TREE_CODE (t) == OACC_DATA)\n-\t\t\t\t? C_ORT_ACC : C_ORT_OMP, args, complain,\n-\t\t\t\tin_decl);\n+      tmp = tsubst_omp_clauses (OMP_CLAUSES (t),\n+\t\t\t\tTREE_CODE (t) == OACC_DATA\n+\t\t\t\t? C_ORT_ACC\n+\t\t\t\t: TREE_CODE (t) == OMP_TARGET\n+\t\t\t\t? C_ORT_OMP_TARGET : C_ORT_OMP,\n+\t\t\t\targs, complain, in_decl);\n       keep_next_level (true);\n       stmt = begin_omp_structured_block ();\n "}, {"sha": "fbaabf62df49b54cf25f3319ce142450391130c7", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 68, "deletions": 43, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7619d33471c10fe3d149dcbb701d99ed3dd23528/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7619d33471c10fe3d149dcbb701d99ed3dd23528/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=7619d33471c10fe3d149dcbb701d99ed3dd23528", "patch": "@@ -5042,7 +5042,7 @@ handle_omp_array_sections_1 (tree c, tree t, vec<tree> &types,\n \t\t      omp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n \t  return error_mark_node;\n \t}\n-      else if (ort == C_ORT_OMP\n+      else if ((ort & C_ORT_OMP_DECLARE_SIMD) == C_ORT_OMP\n \t       && TREE_CODE (t) == PARM_DECL\n \t       && DECL_ARTIFICIAL (t)\n \t       && DECL_NAME (t) == this_identifier\n@@ -5069,7 +5069,7 @@ handle_omp_array_sections_1 (tree c, tree t, vec<tree> &types,\n       return ret;\n     }\n \n-  if (ort == C_ORT_OMP\n+  if ((ort & C_ORT_OMP_DECLARE_SIMD) == C_ORT_OMP\n       && (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_REDUCTION\n \t  || OMP_CLAUSE_CODE (c) == OMP_CLAUSE_IN_REDUCTION\n \t  || OMP_CLAUSE_CODE (c) == OMP_CLAUSE_TASK_REDUCTION)\n@@ -5571,33 +5571,30 @@ handle_omp_array_sections (tree c, enum c_omp_region_type ort)\n \t      || (TREE_CODE (t) == COMPONENT_REF\n \t\t  && TREE_CODE (TREE_TYPE (t)) == ARRAY_TYPE))\n \t    return false;\n-\t  if (ort == C_ORT_OMP || ort == C_ORT_ACC)\n-\t    switch (OMP_CLAUSE_MAP_KIND (c))\n-\t      {\n-\t      case GOMP_MAP_ALLOC:\n-\t      case GOMP_MAP_IF_PRESENT:\n-\t      case GOMP_MAP_TO:\n-\t      case GOMP_MAP_FROM:\n-\t      case GOMP_MAP_TOFROM:\n-\t      case GOMP_MAP_ALWAYS_TO:\n-\t      case GOMP_MAP_ALWAYS_FROM:\n-\t      case GOMP_MAP_ALWAYS_TOFROM:\n-\t      case GOMP_MAP_RELEASE:\n-\t      case GOMP_MAP_DELETE:\n-\t      case GOMP_MAP_FORCE_TO:\n-\t      case GOMP_MAP_FORCE_FROM:\n-\t      case GOMP_MAP_FORCE_TOFROM:\n-\t      case GOMP_MAP_FORCE_PRESENT:\n-\t\tOMP_CLAUSE_MAP_MAYBE_ZERO_LENGTH_ARRAY_SECTION (c) = 1;\n-\t\tbreak;\n-\t      default:\n-\t\tbreak;\n-\t      }\n+\t  switch (OMP_CLAUSE_MAP_KIND (c))\n+\t    {\n+\t    case GOMP_MAP_ALLOC:\n+\t    case GOMP_MAP_IF_PRESENT:\n+\t    case GOMP_MAP_TO:\n+\t    case GOMP_MAP_FROM:\n+\t    case GOMP_MAP_TOFROM:\n+\t    case GOMP_MAP_ALWAYS_TO:\n+\t    case GOMP_MAP_ALWAYS_FROM:\n+\t    case GOMP_MAP_ALWAYS_TOFROM:\n+\t    case GOMP_MAP_RELEASE:\n+\t    case GOMP_MAP_DELETE:\n+\t    case GOMP_MAP_FORCE_TO:\n+\t    case GOMP_MAP_FORCE_FROM:\n+\t    case GOMP_MAP_FORCE_TOFROM:\n+\t    case GOMP_MAP_FORCE_PRESENT:\n+\t      OMP_CLAUSE_MAP_MAYBE_ZERO_LENGTH_ARRAY_SECTION (c) = 1;\n+\t      break;\n+\t    default:\n+\t      break;\n+\t    }\n \t  tree c2 = build_omp_clause (OMP_CLAUSE_LOCATION (c),\n \t\t\t\t      OMP_CLAUSE_MAP);\n-\t  if ((ort & C_ORT_OMP_DECLARE_SIMD) != C_ORT_OMP && ort != C_ORT_ACC)\n-\t    OMP_CLAUSE_SET_MAP_KIND (c2, GOMP_MAP_POINTER);\n-\t  else if (TREE_CODE (t) == COMPONENT_REF)\n+\t  if (TREE_CODE (t) == COMPONENT_REF)\n \t    OMP_CLAUSE_SET_MAP_KIND (c2, GOMP_MAP_ATTACH_DETACH);\n \t  else if (REFERENCE_REF_P (t)\n \t\t   && TREE_CODE (TREE_OPERAND (t, 0)) == COMPONENT_REF)\n@@ -6592,6 +6589,7 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n   tree detach_seen = NULL_TREE;\n   bool mergeable_seen = false;\n   bool implicit_moved = false;\n+  bool target_in_reduction_seen = false;\n \n   bitmap_obstack_initialize (NULL);\n   bitmap_initialize (&generic_head, &bitmap_default_obstack);\n@@ -6603,7 +6601,7 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n   bitmap_initialize (&map_field_head, &bitmap_default_obstack);\n   bitmap_initialize (&map_firstprivate_head, &bitmap_default_obstack);\n   /* If ort == C_ORT_OMP used as nontemporal_head or use_device_xxx_head\n-     instead.  */\n+     instead and for ort == C_ORT_OMP_TARGET used as in_reduction_head.  */\n   bitmap_initialize (&oacc_reduction_head, &bitmap_default_obstack);\n \n   if (ort & C_ORT_ACC)\n@@ -6866,8 +6864,22 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t   || (ort == C_ORT_OMP\n \t\t       && (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE_PTR\n \t\t\t   || (OMP_CLAUSE_CODE (c)\n-\t\t\t       == OMP_CLAUSE_USE_DEVICE_ADDR))))\n+\t\t\t       == OMP_CLAUSE_USE_DEVICE_ADDR)))\n+\t\t   || (ort == C_ORT_OMP_TARGET\n+\t\t       && OMP_CLAUSE_CODE (c) == OMP_CLAUSE_IN_REDUCTION))\n \t    {\n+\t      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_IN_REDUCTION\n+\t\t  && (bitmap_bit_p (&generic_head, DECL_UID (t))\n+\t\t      || bitmap_bit_p (&firstprivate_head, DECL_UID (t))))\n+\t\t{\n+\t\t  error_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t    \"%qD appears more than once in data-sharing \"\n+\t\t\t    \"clauses\", t);\n+\t\t  remove = true;\n+\t\t  break;\n+\t\t}\n+\t      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_IN_REDUCTION)\n+\t\ttarget_in_reduction_seen = true;\n \t      if (bitmap_bit_p (&oacc_reduction_head, DECL_UID (t)))\n \t\t{\n \t\t  error_at (OMP_CLAUSE_LOCATION (c),\n@@ -6882,7 +6894,8 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t    }\n \t  else if (bitmap_bit_p (&generic_head, DECL_UID (t))\n \t\t   || bitmap_bit_p (&firstprivate_head, DECL_UID (t))\n-\t\t   || bitmap_bit_p (&lastprivate_head, DECL_UID (t)))\n+\t\t   || bitmap_bit_p (&lastprivate_head, DECL_UID (t))\n+\t\t   || bitmap_bit_p (&map_firstprivate_head, DECL_UID (t)))\n \t    {\n \t      error_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t\"%qD appears more than once in data clauses\", t);\n@@ -6982,7 +6995,8 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t   && bitmap_bit_p (&map_firstprivate_head, DECL_UID (t)))\n \t    remove = true;\n \t  else if (bitmap_bit_p (&generic_head, DECL_UID (t))\n-\t\t   || bitmap_bit_p (&firstprivate_head, DECL_UID (t)))\n+\t\t   || bitmap_bit_p (&firstprivate_head, DECL_UID (t))\n+\t\t   || bitmap_bit_p (&map_firstprivate_head, DECL_UID (t)))\n \t    {\n \t      error_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t\"%qD appears more than once in data clauses\", t);\n@@ -7795,13 +7809,10 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t      t = TREE_OPERAND (t, 0);\n \t      OMP_CLAUSE_DECL (c) = t;\n \t    }\n-\t  if ((ort == C_ORT_ACC || ort == C_ORT_OMP)\n-\t      && TREE_CODE (t) == COMPONENT_REF\n+\t  if (TREE_CODE (t) == COMPONENT_REF\n \t      && TREE_CODE (TREE_OPERAND (t, 0)) == INDIRECT_REF)\n \t    t = TREE_OPERAND (TREE_OPERAND (t, 0), 0);\n \t  if (TREE_CODE (t) == COMPONENT_REF\n-\t      && ((ort & C_ORT_OMP_DECLARE_SIMD) == C_ORT_OMP\n-\t\t  || ort == C_ORT_ACC)\n \t      && OMP_CLAUSE_CODE (c) != OMP_CLAUSE__CACHE_)\n \t    {\n \t      if (type_dependent_expression_p (t))\n@@ -7842,7 +7853,7 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t      if (VAR_P (t) || TREE_CODE (t) == PARM_DECL)\n \t\t{\n \t\t  if (bitmap_bit_p (&map_field_head, DECL_UID (t))\n-\t\t      || (ort == C_ORT_OMP\n+\t\t      || (ort != C_ORT_ACC\n \t\t\t  && bitmap_bit_p (&map_head, DECL_UID (t))))\n \t\t    goto handle_map_references;\n \t\t}\n@@ -7924,7 +7935,8 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t   && OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_FIRSTPRIVATE_POINTER)\n \t    {\n \t      if (bitmap_bit_p (&generic_head, DECL_UID (t))\n-\t\t  || bitmap_bit_p (&firstprivate_head, DECL_UID (t)))\n+\t\t  || bitmap_bit_p (&firstprivate_head, DECL_UID (t))\n+\t\t  || bitmap_bit_p (&map_firstprivate_head, DECL_UID (t)))\n \t\t{\n \t\t  error_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t    \"%qD appears more than once in data clauses\", t);\n@@ -7941,10 +7953,7 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t  remove = true;\n \t\t}\n \t      else\n-\t\t{\n-\t\t  bitmap_set_bit (&generic_head, DECL_UID (t));\n-\t\t  bitmap_set_bit (&map_firstprivate_head, DECL_UID (t));\n-\t\t}\n+\t\tbitmap_set_bit (&map_firstprivate_head, DECL_UID (t));\n \t    }\n \t  else if (bitmap_bit_p (&map_head, DECL_UID (t))\n \t\t   && !bitmap_bit_p (&map_field_head, DECL_UID (t)))\n@@ -7960,8 +7969,8 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t\t  \"%qD appears more than once in map clauses\", t);\n \t      remove = true;\n \t    }\n-\t  else if (bitmap_bit_p (&generic_head, DECL_UID (t))\n-\t\t   && ort == C_ORT_ACC)\n+\t  else if (ort == C_ORT_ACC\n+\t\t   && bitmap_bit_p (&generic_head, DECL_UID (t)))\n \t    {\n \t      error_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t\"%qD appears more than once in data clauses\", t);\n@@ -8511,6 +8520,22 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t    }\n \t  pc = &OMP_CLAUSE_CHAIN (c);\n \t  continue;\n+\tcase OMP_CLAUSE_MAP:\n+\t  if (target_in_reduction_seen && !processing_template_decl)\n+\t    {\n+\t      t = OMP_CLAUSE_DECL (c);\n+\t      while (handled_component_p (t)\n+\t\t     || TREE_CODE (t) == INDIRECT_REF\n+\t\t     || TREE_CODE (t) == ADDR_EXPR\n+\t\t     || TREE_CODE (t) == MEM_REF\n+\t\t     || TREE_CODE (t) == NON_LVALUE_EXPR)\n+\t\tt = TREE_OPERAND (t, 0);\n+\t      if (DECL_P (t)\n+\t\t  && bitmap_bit_p (&oacc_reduction_head, DECL_UID (t)))\n+\t\tOMP_CLAUSE_MAP_IN_REDUCTION (c) = 1;\n+\t    }\n+\t  pc = &OMP_CLAUSE_CHAIN (c);\n+\t  continue;\n \tcase OMP_CLAUSE_NOWAIT:\n \t  if (copyprivate_seen)\n \t    {"}, {"sha": "4be2febd01cf1f3db790efad4965db665ede1026", "filename": "gcc/gimplify.c", "status": "modified", "additions": 119, "deletions": 7, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7619d33471c10fe3d149dcbb701d99ed3dd23528/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7619d33471c10fe3d149dcbb701d99ed3dd23528/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=7619d33471c10fe3d149dcbb701d99ed3dd23528", "patch": "@@ -9566,8 +9566,116 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t\t  OMP_CLAUSE_SET_MAP_KIND (c, k);\n \t\t}\n \n-\t      if (gimplify_expr (pd, pre_p, NULL, is_gimple_lvalue, fb_lvalue)\n-\t\t  == GS_ERROR)\n+\t      if (code == OMP_TARGET && OMP_CLAUSE_MAP_IN_REDUCTION (c))\n+\t\t{\n+\t\t  /* Don't gimplify *pd fully at this point, as the base\n+\t\t     will need to be adjusted during omp lowering.  */\n+\t\t  auto_vec<tree, 10> expr_stack;\n+\t\t  tree *p = pd;\n+\t\t  while (handled_component_p (*p)\n+\t\t\t || TREE_CODE (*p) == INDIRECT_REF\n+\t\t\t || TREE_CODE (*p) == ADDR_EXPR\n+\t\t\t || TREE_CODE (*p) == MEM_REF\n+\t\t\t || TREE_CODE (*p) == NON_LVALUE_EXPR)\n+\t\t    {\n+\t\t      expr_stack.safe_push (*p);\n+\t\t      p = &TREE_OPERAND (*p, 0);\n+\t\t    }\n+\t\t  for (int i = expr_stack.length () - 1; i >= 0; i--)\n+\t\t    {\n+\t\t      tree t = expr_stack[i];\n+\t\t      if (TREE_CODE (t) == ARRAY_REF\n+\t\t\t  || TREE_CODE (t) == ARRAY_RANGE_REF)\n+\t\t\t{\n+\t\t\t  if (TREE_OPERAND (t, 2) == NULL_TREE)\n+\t\t\t    {\n+\t\t\t      tree low = unshare_expr (array_ref_low_bound (t));\n+\t\t\t      if (!is_gimple_min_invariant (low))\n+\t\t\t\t{\n+\t\t\t\t  TREE_OPERAND (t, 2) = low;\n+\t\t\t\t  if (gimplify_expr (&TREE_OPERAND (t, 2),\n+\t\t\t\t\t\t     pre_p, NULL,\n+\t\t\t\t\t\t     is_gimple_reg,\n+\t\t\t\t\t\t     fb_rvalue) == GS_ERROR)\n+\t\t\t\t    remove = true;\n+\t\t\t\t}\n+\t\t\t    }\n+\t\t\t  else if (gimplify_expr (&TREE_OPERAND (t, 2), pre_p,\n+\t\t\t\t\t\t  NULL, is_gimple_reg,\n+\t\t\t\t\t\t  fb_rvalue) == GS_ERROR)\n+\t\t\t    remove = true;\n+\t\t\t  if (TREE_OPERAND (t, 3) == NULL_TREE)\n+\t\t\t    {\n+\t\t\t      tree elmt_size = array_ref_element_size (t);\n+\t\t\t      if (!is_gimple_min_invariant (elmt_size))\n+\t\t\t\t{\n+\t\t\t\t  elmt_size = unshare_expr (elmt_size);\n+\t\t\t\t  tree elmt_type\n+\t\t\t\t    = TREE_TYPE (TREE_TYPE (TREE_OPERAND (t,\n+\t\t\t\t\t\t\t\t\t  0)));\n+\t\t\t\t  tree factor\n+\t\t\t\t    = size_int (TYPE_ALIGN_UNIT (elmt_type));\n+\t\t\t\t  elmt_size\n+\t\t\t\t    = size_binop (EXACT_DIV_EXPR, elmt_size,\n+\t\t\t\t\t\t  factor);\n+\t\t\t\t  TREE_OPERAND (t, 3) = elmt_size;\n+\t\t\t\t  if (gimplify_expr (&TREE_OPERAND (t, 3),\n+\t\t\t\t\t\t     pre_p, NULL,\n+\t\t\t\t\t\t     is_gimple_reg,\n+\t\t\t\t\t\t     fb_rvalue) == GS_ERROR)\n+\t\t\t\t    remove = true;\n+\t\t\t\t}\n+\t\t\t    }\n+\t\t\t  else if (gimplify_expr (&TREE_OPERAND (t, 3), pre_p,\n+\t\t\t\t\t\t  NULL, is_gimple_reg,\n+\t\t\t\t\t\t  fb_rvalue) == GS_ERROR)\n+\t\t\t    remove = true;\n+\t\t\t}\n+\t\t      else if (TREE_CODE (t) == COMPONENT_REF)\n+\t\t\t{\n+\t\t\t  if (TREE_OPERAND (t, 2) == NULL_TREE)\n+\t\t\t    {\n+\t\t\t      tree offset = component_ref_field_offset (t);\n+\t\t\t      if (!is_gimple_min_invariant (offset))\n+\t\t\t\t{\n+\t\t\t\t  offset = unshare_expr (offset);\n+\t\t\t\t  tree field = TREE_OPERAND (t, 1);\n+\t\t\t\t  tree factor\n+\t\t\t\t    = size_int (DECL_OFFSET_ALIGN (field)\n+\t\t\t\t\t\t/ BITS_PER_UNIT);\n+\t\t\t\t  offset = size_binop (EXACT_DIV_EXPR, offset,\n+\t\t\t\t\t\t       factor);\n+\t\t\t\t  TREE_OPERAND (t, 2) = offset;\n+\t\t\t\t  if (gimplify_expr (&TREE_OPERAND (t, 2),\n+\t\t\t\t\t\t     pre_p, NULL,\n+\t\t\t\t\t\t     is_gimple_reg,\n+\t\t\t\t\t\t     fb_rvalue) == GS_ERROR)\n+\t\t\t\t    remove = true;\n+\t\t\t\t}\n+\t\t\t    }\n+\t\t\t  else if (gimplify_expr (&TREE_OPERAND (t, 2), pre_p,\n+\t\t\t\t\t\t  NULL, is_gimple_reg,\n+\t\t\t\t\t\t  fb_rvalue) == GS_ERROR)\n+\t\t\t    remove = true;\n+\t\t\t}\n+\t\t    }\n+\t\t  for (; expr_stack.length () > 0; )\n+\t\t    {\n+\t\t      tree t = expr_stack.pop ();\n+\n+\t\t      if (TREE_CODE (t) == ARRAY_REF\n+\t\t\t  || TREE_CODE (t) == ARRAY_RANGE_REF)\n+\t\t\t{\n+\t\t\t  if (!is_gimple_min_invariant (TREE_OPERAND (t, 1))\n+\t\t\t      && gimplify_expr (&TREE_OPERAND (t, 1), pre_p,\n+\t\t\t\t\t\tNULL, is_gimple_val,\n+\t\t\t\t\t\tfb_rvalue) == GS_ERROR)\n+\t\t\t    remove = true;\n+\t\t\t}\n+\t\t    }\n+\t\t}\n+\t      else if (gimplify_expr (pd, pre_p, NULL, is_gimple_lvalue,\n+\t\t\t\t      fb_lvalue) == GS_ERROR)\n \t\t{\n \t\t  remove = true;\n \t\t  break;\n@@ -9764,17 +9872,21 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t       || OMP_CLAUSE_CODE (c) == OMP_CLAUSE_TASK_REDUCTION)\n \t      && OMP_CLAUSE_REDUCTION_PLACEHOLDER (c))\n \t    {\n-\t      omp_add_variable (ctx, OMP_CLAUSE_REDUCTION_PLACEHOLDER (c),\n-\t\t\t\tGOVD_LOCAL | GOVD_SEEN);\n-\t      if (OMP_CLAUSE_REDUCTION_DECL_PLACEHOLDER (c)\n+\t      struct gimplify_omp_ctx *pctx\n+\t\t= code == OMP_TARGET ? outer_ctx : ctx;\n+\t      if (pctx)\n+\t\tomp_add_variable (pctx, OMP_CLAUSE_REDUCTION_PLACEHOLDER (c),\n+\t\t\t\t  GOVD_LOCAL | GOVD_SEEN);\n+\t      if (pctx\n+\t\t  && OMP_CLAUSE_REDUCTION_DECL_PLACEHOLDER (c)\n \t\t  && walk_tree (&OMP_CLAUSE_REDUCTION_INIT (c),\n \t\t\t\tfind_decl_expr,\n \t\t\t\tOMP_CLAUSE_REDUCTION_DECL_PLACEHOLDER (c),\n \t\t\t\tNULL) == NULL_TREE)\n-\t\tomp_add_variable (ctx,\n+\t\tomp_add_variable (pctx,\n \t\t\t\t  OMP_CLAUSE_REDUCTION_DECL_PLACEHOLDER (c),\n \t\t\t\t  GOVD_LOCAL | GOVD_SEEN);\n-\t      gimplify_omp_ctxp = ctx;\n+\t      gimplify_omp_ctxp = pctx;\n \t      push_gimplify_context ();\n \n \t      OMP_CLAUSE_REDUCTION_GIMPLE_INIT (c) = NULL;"}, {"sha": "50092794b92598581d9cff234b7c258307d062d7", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7619d33471c10fe3d149dcbb701d99ed3dd23528/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7619d33471c10fe3d149dcbb701d99ed3dd23528/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=7619d33471c10fe3d149dcbb701d99ed3dd23528", "patch": "@@ -9615,6 +9615,10 @@ expand_omp_target (struct omp_region *region)\n \t}\n \n       c = omp_find_clause (clauses, OMP_CLAUSE_NOWAIT);\n+      /* FIXME: in_reduction(...) nowait is unimplemented yet, pretend\n+\t nowait doesn't appear.  */\n+      if (c && omp_find_clause (clauses, OMP_CLAUSE_IN_REDUCTION))\n+\tc = NULL;\n       if (c)\n \tflags_i |= GOMP_TARGET_FLAG_NOWAIT;\n     }"}, {"sha": "503754bfdef240b4f9510749ccc40347cb933d91", "filename": "gcc/omp-low.c", "status": "modified", "additions": 183, "deletions": 20, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7619d33471c10fe3d149dcbb701d99ed3dd23528/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7619d33471c10fe3d149dcbb701d99ed3dd23528/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=7619d33471c10fe3d149dcbb701d99ed3dd23528", "patch": "@@ -1240,6 +1240,7 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t      && ((OMP_CLAUSE_CODE (c) == OMP_CLAUSE_REDUCTION\n \t\t   && (OMP_CLAUSE_REDUCTION_INSCAN (c)\n \t\t       || OMP_CLAUSE_REDUCTION_TASK (c)))\n+\t\t  || OMP_CLAUSE_CODE (c) == OMP_CLAUSE_IN_REDUCTION\n \t\t  || is_task_ctx (ctx)))\n \t    {\n \t      /* For now.  */\n@@ -1254,6 +1255,29 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t      if (TREE_CODE (t) == INDIRECT_REF\n \t\t  || TREE_CODE (t) == ADDR_EXPR)\n \t\tt = TREE_OPERAND (t, 0);\n+\t      if (is_omp_target (ctx->stmt))\n+\t\t{\n+\t\t  if (is_variable_sized (t))\n+\t\t    {\n+\t\t      gcc_assert (DECL_HAS_VALUE_EXPR_P (t));\n+\t\t      t = DECL_VALUE_EXPR (t);\n+\t\t      gcc_assert (TREE_CODE (t) == INDIRECT_REF);\n+\t\t      t = TREE_OPERAND (t, 0);\n+\t\t      gcc_assert (DECL_P (t));\n+\t\t    }\n+\t\t  tree at = t;\n+\t\t  if (ctx->outer)\n+\t\t    scan_omp_op (&at, ctx->outer);\n+\t\t  tree nt = omp_copy_decl_1 (at, ctx);\n+\t\t  splay_tree_insert (ctx->field_map,\n+\t\t\t\t     (splay_tree_key) &DECL_CONTEXT (t),\n+\t\t\t\t     (splay_tree_value) nt);\n+\t\t  if (at != t)\n+\t\t    splay_tree_insert (ctx->field_map,\n+\t\t\t\t       (splay_tree_key) &DECL_CONTEXT (at),\n+\t\t\t\t       (splay_tree_value) nt);\n+\t\t  break;\n+\t\t}\n \t      install_var_local (t, ctx);\n \t      if (is_taskreg_ctx (ctx)\n \t\t  && (!is_global_var (maybe_lookup_decl_in_outer_ctx (t, ctx))\n@@ -1280,6 +1304,21 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t\t}\n \t      break;\n \t    }\n+\t  if (is_omp_target (ctx->stmt))\n+\t    {\n+\t      tree at = decl;\n+\t      if (ctx->outer)\n+\t\tscan_omp_op (&at, ctx->outer);\n+\t      tree nt = omp_copy_decl_1 (at, ctx);\n+\t      splay_tree_insert (ctx->field_map,\n+\t\t\t\t (splay_tree_key) &DECL_CONTEXT (decl),\n+\t\t\t\t (splay_tree_value) nt);\n+\t      if (at != decl)\n+\t\tsplay_tree_insert (ctx->field_map,\n+\t\t\t\t   (splay_tree_key) &DECL_CONTEXT (at),\n+\t\t\t\t   (splay_tree_value) nt);\n+\t      break;\n+\t    }\n \t  if (is_task_ctx (ctx)\n \t      || (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_REDUCTION\n \t\t  && OMP_CLAUSE_REDUCTION_TASK (c)\n@@ -1546,7 +1585,8 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t\t  else\n \t\t    install_var_field (decl, true, 3, ctx);\n \t\t  if (is_gimple_omp_offloaded (ctx->stmt)\n-\t\t      && !OMP_CLAUSE_MAP_IN_REDUCTION (c))\n+\t\t      && !(is_gimple_omp_oacc (ctx->stmt)\n+\t\t\t   && OMP_CLAUSE_MAP_IN_REDUCTION (c)))\n \t\t    install_var_local (decl, ctx);\n \t\t}\n \t    }\n@@ -1692,7 +1732,7 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \tcase OMP_CLAUSE_REDUCTION:\n \tcase OMP_CLAUSE_IN_REDUCTION:\n \t  decl = OMP_CLAUSE_DECL (c);\n-\t  if (TREE_CODE (decl) != MEM_REF)\n+\t  if (TREE_CODE (decl) != MEM_REF && !is_omp_target (ctx->stmt))\n \t    {\n \t      if (is_variable_sized (decl))\n \t\tinstall_var_local (decl, ctx);\n@@ -1844,8 +1884,11 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t     || OMP_CLAUSE_CODE (c) == OMP_CLAUSE_TASK_REDUCTION)\n \t    && OMP_CLAUSE_REDUCTION_PLACEHOLDER (c))\n \t  {\n-\t    scan_omp (&OMP_CLAUSE_REDUCTION_GIMPLE_INIT (c), ctx);\n-\t    scan_omp (&OMP_CLAUSE_REDUCTION_GIMPLE_MERGE (c), ctx);\n+\t    omp_context *rctx = ctx;\n+\t    if (is_omp_target (ctx->stmt))\n+\t      rctx = ctx->outer;\n+\t    scan_omp (&OMP_CLAUSE_REDUCTION_GIMPLE_INIT (c), rctx);\n+\t    scan_omp (&OMP_CLAUSE_REDUCTION_GIMPLE_MERGE (c), rctx);\n \t  }\n \telse if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_LASTPRIVATE\n \t\t && OMP_CLAUSE_LASTPRIVATE_GIMPLE_SEQ (c))\n@@ -4828,7 +4871,9 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t      break;\n \t    case OMP_CLAUSE_REDUCTION:\n \t    case OMP_CLAUSE_IN_REDUCTION:\n-\t      if (is_task_ctx (ctx) || OMP_CLAUSE_REDUCTION_TASK (c))\n+\t      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_IN_REDUCTION\n+\t\t  || is_task_ctx (ctx)\n+\t\t  || OMP_CLAUSE_REDUCTION_TASK (c))\n \t\t{\n \t\t  task_reduction_p = true;\n \t\t  if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_REDUCTION)\n@@ -4958,7 +5003,12 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t}\n \t      new_var = var;\n \t    }\n-\t  if (c_kind != OMP_CLAUSE_COPYIN)\n+\t  if (c_kind == OMP_CLAUSE_IN_REDUCTION && is_omp_target (ctx->stmt))\n+\t    {\n+\t      splay_tree_key key = (splay_tree_key) &DECL_CONTEXT (var);\n+\t      new_var = (tree) splay_tree_lookup (ctx->field_map, key)->value;\n+\t    }\n+\t  else if (c_kind != OMP_CLAUSE_COPYIN)\n \t    new_var = lookup_decl (var, ctx);\n \n \t  if (c_kind == OMP_CLAUSE_SHARED || c_kind == OMP_CLAUSE_COPYIN)\n@@ -4980,7 +5030,10 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t      if (TREE_CODE (orig_var) == POINTER_PLUS_EXPR)\n \t\t{\n \t\t  tree b = TREE_OPERAND (orig_var, 1);\n-\t\t  b = maybe_lookup_decl (b, ctx);\n+\t\t  if (is_omp_target (ctx->stmt))\n+\t\t    b = NULL_TREE;\n+\t\t  else\n+\t\t    b = maybe_lookup_decl (b, ctx);\n \t\t  if (b == NULL)\n \t\t    {\n \t\t      b = TREE_OPERAND (orig_var, 1);\n@@ -5006,6 +5059,8 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t\t  || (TREE_CODE (TREE_TYPE (TREE_TYPE (out)))\n \t\t\t      != POINTER_TYPE)))\n \t\t    x = var;\n+\t\t  else if (is_omp_target (ctx->stmt))\n+\t\t    x = out;\n \t\t  else\n \t\t    {\n \t\t      bool by_ref = use_pointer_for_field (var, NULL);\n@@ -5049,7 +5104,11 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t      const char *name = get_name (orig_var);\n \t      if (pass != 3 && !TREE_CONSTANT (v))\n \t\t{\n-\t\t  tree t = maybe_lookup_decl (v, ctx);\n+\t\t  tree t;\n+\t\t  if (is_omp_target (ctx->stmt))\n+\t\t    t = NULL_TREE;\n+\t\t  else\n+\t\t    t = maybe_lookup_decl (v, ctx);\n \t\t  if (t)\n \t\t    v = t;\n \t\t  else\n@@ -5100,7 +5159,11 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t\t\t     TYPE_SIZE_UNIT (type));\n \t\t  else\n \t\t    {\n-\t\t      tree t = maybe_lookup_decl (v, ctx);\n+\t\t      tree t;\n+\t\t      if (is_omp_target (ctx->stmt))\n+\t\t\tt = NULL_TREE;\n+\t\t      else\n+\t\t\tt = maybe_lookup_decl (v, ctx);\n \t\t      if (t)\n \t\t\tv = t;\n \t\t      else\n@@ -5410,8 +5473,11 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t    }\n \t  else if (pass == 2)\n \t    {\n-\t      if (is_global_var (maybe_lookup_decl_in_outer_ctx (var, ctx)))\n+\t      tree out = maybe_lookup_decl_in_outer_ctx (var, ctx);\n+\t      if (is_global_var (out))\n \t\tx = var;\n+\t      else if (is_omp_target (ctx->stmt))\n+\t\tx = out;\n \t      else\n \t\t{\n \t\t  bool by_ref = use_pointer_for_field (var, ctx);\n@@ -6345,7 +6411,27 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t  if (OMP_CLAUSE_REDUCTION_GIMPLE_INIT (c))\n \t\t    {\n \t\t      tseq = OMP_CLAUSE_REDUCTION_GIMPLE_INIT (c);\n-\t\t      lower_omp (&tseq, ctx);\n+\t\t      if (c_kind == OMP_CLAUSE_IN_REDUCTION\n+\t\t\t  && is_omp_target (ctx->stmt))\n+\t\t\t{\n+\t\t\t  tree d = maybe_lookup_decl_in_outer_ctx (var, ctx);\n+\t\t\t  tree oldv = NULL_TREE;\n+\t\t\t  gcc_assert (d);\n+\t\t\t  if (DECL_HAS_VALUE_EXPR_P (d))\n+\t\t\t    oldv = DECL_VALUE_EXPR (d);\n+\t\t\t  SET_DECL_VALUE_EXPR (d, new_vard);\n+\t\t\t  DECL_HAS_VALUE_EXPR_P (d) = 1;\n+\t\t\t  lower_omp (&tseq, ctx);\n+\t\t\t  if (oldv)\n+\t\t\t    SET_DECL_VALUE_EXPR (d, oldv);\n+\t\t\t  else\n+\t\t\t    {\n+\t\t\t      SET_DECL_VALUE_EXPR (d, NULL_TREE);\n+\t\t\t      DECL_HAS_VALUE_EXPR_P (d) = 0;\n+\t\t\t    }\n+\t\t\t}\n+\t\t      else\n+\t\t\tlower_omp (&tseq, ctx);\n \t\t      gimple_seq_add_seq (ilist, tseq);\n \t\t    }\n \t\t  OMP_CLAUSE_REDUCTION_GIMPLE_INIT (c) = NULL;\n@@ -12184,11 +12270,26 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n   location_t loc = gimple_location (stmt);\n   bool offloaded, data_region;\n   unsigned int map_cnt = 0;\n+  tree in_reduction_clauses = NULL_TREE;\n \n   offloaded = is_gimple_omp_offloaded (stmt);\n   switch (gimple_omp_target_kind (stmt))\n     {\n     case GF_OMP_TARGET_KIND_REGION:\n+      tree *p, *q;\n+      q = &in_reduction_clauses;\n+      for (p = gimple_omp_target_clauses_ptr (stmt); *p; )\n+\tif (OMP_CLAUSE_CODE (*p) == OMP_CLAUSE_IN_REDUCTION)\n+\t  {\n+\t    *q = *p;\n+\t    q = &OMP_CLAUSE_CHAIN (*q);\n+\t    *p = OMP_CLAUSE_CHAIN (*p);\n+\t  }\n+\telse\n+\t  p = &OMP_CLAUSE_CHAIN (*p);\n+      *q = NULL_TREE;\n+      *p = in_reduction_clauses;\n+      /* FALLTHRU */\n     case GF_OMP_TARGET_KIND_UPDATE:\n     case GF_OMP_TARGET_KIND_ENTER_DATA:\n     case GF_OMP_TARGET_KIND_EXIT_DATA:\n@@ -12217,12 +12318,17 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \n   gimple_seq dep_ilist = NULL;\n   gimple_seq dep_olist = NULL;\n-  if (omp_find_clause (clauses, OMP_CLAUSE_DEPEND))\n+  bool has_depend = omp_find_clause (clauses, OMP_CLAUSE_DEPEND) != NULL_TREE;\n+  if (has_depend || in_reduction_clauses)\n     {\n       push_gimplify_context ();\n       dep_bind = gimple_build_bind (NULL, NULL, make_node (BLOCK));\n-      lower_depend_clauses (gimple_omp_target_clauses_ptr (stmt),\n-\t\t\t    &dep_ilist, &dep_olist);\n+      if (has_depend)\n+\tlower_depend_clauses (gimple_omp_target_clauses_ptr (stmt),\n+\t\t\t      &dep_ilist, &dep_olist);\n+      if (in_reduction_clauses)\n+\tlower_rec_input_clauses (in_reduction_clauses, &dep_ilist, &dep_olist,\n+\t\t\t\t ctx, NULL);\n     }\n \n   tgt_bind = NULL;\n@@ -12348,6 +12454,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t/* Don't remap compute constructs' reduction variables, because the\n \t   intermediate result must be local to each gang.  */\n \tif (offloaded && !(OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP\n+\t\t\t   && is_gimple_omp_oacc (ctx->stmt)\n \t\t\t   && OMP_CLAUSE_MAP_IN_REDUCTION (c)))\n \t  {\n \t    x = build_receiver_ref (var, true, ctx);\n@@ -12565,16 +12672,46 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\tif (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP\n \t\t    && OMP_CLAUSE_MAP_ZERO_BIAS_ARRAY_SECTION (c))\n \t\t  {\n-\t\t    gcc_checking_assert (OMP_CLAUSE_DECL (OMP_CLAUSE_CHAIN (c))\n-\t\t\t\t\t == get_base_address (ovar));\n \t\t    nc = OMP_CLAUSE_CHAIN (c);\n+\t\t    gcc_checking_assert (OMP_CLAUSE_DECL (nc)\n+\t\t\t\t\t == get_base_address (ovar));\n \t\t    ovar = OMP_CLAUSE_DECL (nc);\n \t\t  }\n \t\telse\n \t\t  {\n \t\t    tree x = build_sender_ref (ovar, ctx);\n-\t\t    tree v\n-\t\t      = build_fold_addr_expr_with_type (ovar, ptr_type_node);\n+\t\t    tree v = ovar;\n+\t\t    if (in_reduction_clauses\n+\t\t\t&& OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP\n+\t\t\t&& OMP_CLAUSE_MAP_IN_REDUCTION (c))\n+\t\t      {\n+\t\t\tv = unshare_expr (v);\n+\t\t\ttree *p = &v;\n+\t\t\twhile (handled_component_p (*p)\n+\t\t\t       || TREE_CODE (*p) == INDIRECT_REF\n+\t\t\t       || TREE_CODE (*p) == ADDR_EXPR\n+\t\t\t       || TREE_CODE (*p) == MEM_REF\n+\t\t\t       || TREE_CODE (*p) == NON_LVALUE_EXPR)\n+\t\t\t  p = &TREE_OPERAND (*p, 0);\n+\t\t\ttree d = *p;\n+\t\t\tif (is_variable_sized (d))\n+\t\t\t  {\n+\t\t\t    gcc_assert (DECL_HAS_VALUE_EXPR_P (d));\n+\t\t\t    d = DECL_VALUE_EXPR (d);\n+\t\t\t    gcc_assert (TREE_CODE (d) == INDIRECT_REF);\n+\t\t\t    d = TREE_OPERAND (d, 0);\n+\t\t\t    gcc_assert (DECL_P (d));\n+\t\t\t  }\n+\t\t\tsplay_tree_key key\n+\t\t\t  = (splay_tree_key) &DECL_CONTEXT (d);\n+\t\t\ttree nd = (tree) splay_tree_lookup (ctx->field_map,\n+\t\t\t\t\t\t\t    key)->value;\n+\t\t\tif (d == *p)\n+\t\t\t  *p = nd;\n+\t\t\telse\n+\t\t\t  *p = build_fold_indirect_ref (nd);\n+\t\t      }\n+\t\t    v = build_fold_addr_expr_with_type (v, ptr_type_node);\n \t\t    gimplify_assign (x, v, &ilist);\n \t\t    nc = NULL_TREE;\n \t\t  }\n@@ -12601,19 +12738,45 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t    if (DECL_P (ovar) && DECL_ALIGN_UNIT (ovar) > talign)\n \t      talign = DECL_ALIGN_UNIT (ovar);\n \n+\t    var = NULL_TREE;\n+\t    if (nc)\n+\t      {\n+\t\tif (in_reduction_clauses\n+\t\t    && OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP\n+\t\t    && OMP_CLAUSE_MAP_IN_REDUCTION (c))\n+\t\t  {\n+\t\t    tree d = ovar;\n+\t\t    if (is_variable_sized (d))\n+\t\t      {\n+\t\t\tgcc_assert (DECL_HAS_VALUE_EXPR_P (d));\n+\t\t\td = DECL_VALUE_EXPR (d);\n+\t\t\tgcc_assert (TREE_CODE (d) == INDIRECT_REF);\n+\t\t\td = TREE_OPERAND (d, 0);\n+\t\t\tgcc_assert (DECL_P (d));\n+\t\t      }\n+\t\t    splay_tree_key key\n+\t\t      = (splay_tree_key) &DECL_CONTEXT (d);\n+\t\t    tree nd = (tree) splay_tree_lookup (ctx->field_map,\n+\t\t\t\t\t\t\tkey)->value;\n+\t\t    if (d == ovar)\n+\t\t      var = nd;\n+\t\t    else\n+\t\t      var = build_fold_indirect_ref (nd);\n+\t\t  }\n+\t\telse\n+\t\t  var = lookup_decl_in_outer_ctx (ovar, ctx);\n+\t      }\n \t    if (nc\n \t\t&& OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP\n \t\t&& (OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_ATTACH\n \t\t    || OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_DETACH)\n \t\t&& is_omp_target (stmt))\n \t      {\n-\t\tvar = lookup_decl_in_outer_ctx (ovar, ctx);\n \t\tx = build_sender_ref (c, ctx);\n \t\tgimplify_assign (x, build_fold_addr_expr (var), &ilist);\n \t      }\n \t    else if (nc)\n \t      {\n-\t\tvar = lookup_decl_in_outer_ctx (ovar, ctx);\n \t\tx = build_sender_ref (ovar, ctx);\n \n \t\tif (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP"}, {"sha": "682442af119f565b852c6d1bc5219d19ce0ff7c4", "filename": "gcc/testsuite/c-c++-common/gomp/clauses-1.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7619d33471c10fe3d149dcbb701d99ed3dd23528/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fclauses-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7619d33471c10fe3d149dcbb701d99ed3dd23528/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fclauses-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fclauses-1.c?ref=7619d33471c10fe3d149dcbb701d99ed3dd23528", "patch": "@@ -125,39 +125,39 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n   #pragma omp target parallel \\\n     device(d) map (tofrom: m) if (target: i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp) \\\n     if (parallel: i2) default(shared) shared(s) reduction(+:r) num_threads (nth) proc_bind(spread) \\\n-    nowait depend(inout: dd[0]) allocate (omp_default_mem_alloc:f)\n+    nowait depend(inout: dd[0]) allocate (omp_default_mem_alloc:f) in_reduction(+:r2)\n     ;\n   #pragma omp target parallel for \\\n     device(d) map (tofrom: m) if (target: i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp) \\\n     if (parallel: i2) default(shared) shared(s) reduction(+:r) num_threads (nth) proc_bind(spread) \\\n     lastprivate (l) linear (ll:1) ordered schedule(static, 4) collapse(1) nowait depend(inout: dd[0]) \\\n-    allocate (omp_default_mem_alloc:f)\n+    allocate (omp_default_mem_alloc:f) in_reduction(+:r2)\n   for (int i = 0; i < 64; i++)\n     ll++;\n   #pragma omp target parallel for \\\n     device(d) map (tofrom: m) if (target: i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp) \\\n     if (parallel: i2) default(shared) shared(s) reduction(+:r) num_threads (nth) proc_bind(spread) \\\n     lastprivate (l) linear (ll:1) schedule(static, 4) collapse(1) nowait depend(inout: dd[0]) order(concurrent) \\\n-    allocate (omp_default_mem_alloc:f)\n+    allocate (omp_default_mem_alloc:f) in_reduction(+:r2)\n   for (int i = 0; i < 64; i++)\n     ll++;\n   #pragma omp target parallel for simd \\\n     device(d) map (tofrom: m) if (target: i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp) \\\n     if (parallel: i2) default(shared) shared(s) reduction(+:r) num_threads (nth) proc_bind(spread) \\\n     lastprivate (l) linear (ll:1) schedule(static, 4) collapse(1) \\\n     safelen(8) simdlen(4) aligned(q: 32) nowait depend(inout: dd[0]) nontemporal(ntm) if (simd: i3) order(concurrent) \\\n-    allocate (omp_default_mem_alloc:f)\n+    allocate (omp_default_mem_alloc:f) in_reduction(+:r2)\n   for (int i = 0; i < 64; i++)\n     ll++;\n   #pragma omp target teams \\\n     device(d) map (tofrom: m) if (target: i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp) \\\n     shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl) nowait depend(inout: dd[0]) \\\n-    allocate (omp_default_mem_alloc:f)\n+    allocate (omp_default_mem_alloc:f) in_reduction(+:r2)\n     ;\n   #pragma omp target teams distribute \\\n     device(d) map (tofrom: m) if (target: i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp) \\\n     shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl) \\\n-    collapse(1) dist_schedule(static, 16) nowait depend(inout: dd[0]) allocate (omp_default_mem_alloc:f)\n+    collapse(1) dist_schedule(static, 16) nowait depend(inout: dd[0]) allocate (omp_default_mem_alloc:f) in_reduction(+:r2)\n   for (int i = 0; i < 64; i++)\n     ;\n   #pragma omp target teams distribute parallel for \\\n@@ -166,7 +166,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n     collapse(1) dist_schedule(static, 16) \\\n     if (parallel: i2) num_threads (nth) proc_bind(spread) \\\n     lastprivate (l) schedule(static, 4) nowait depend(inout: dd[0]) order(concurrent) \\\n-     allocate (omp_default_mem_alloc:f)\n+     allocate (omp_default_mem_alloc:f) in_reduction(+:r2)\n   for (int i = 0; i < 64; i++)\n     ll++;\n   #pragma omp target teams distribute parallel for simd \\\n@@ -176,22 +176,22 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n     if (parallel: i2) num_threads (nth) proc_bind(spread) \\\n     lastprivate (l) schedule(static, 4) order(concurrent) \\\n     safelen(8) simdlen(4) aligned(q: 32) nowait depend(inout: dd[0]) nontemporal(ntm) if (simd: i3) \\\n-    allocate (omp_default_mem_alloc:f)\n+    allocate (omp_default_mem_alloc:f) in_reduction(+:r2)\n   for (int i = 0; i < 64; i++)\n     ll++;\n   #pragma omp target teams distribute simd \\\n     device(d) map (tofrom: m) if (i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp) \\\n     shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl) \\\n     collapse(1) dist_schedule(static, 16) order(concurrent) \\\n     safelen(8) simdlen(4) aligned(q: 32) nowait depend(inout: dd[0]) nontemporal(ntm) \\\n-    allocate (omp_default_mem_alloc:f)\n+    allocate (omp_default_mem_alloc:f) in_reduction(+:r2)\n   for (int i = 0; i < 64; i++)\n     ll++;\n   #pragma omp target simd \\\n     device(d) map (tofrom: m) if (target: i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp) \\\n     safelen(8) simdlen(4) lastprivate (l) linear(ll: 1) aligned(q: 32) reduction(+:r) \\\n     nowait depend(inout: dd[0]) nontemporal(ntm) if(simd:i3) order(concurrent) \\\n-    allocate (omp_default_mem_alloc:f)\n+    allocate (omp_default_mem_alloc:f) in_reduction(+:r2)\n   for (int i = 0; i < 64; i++)\n     ll++;\n   #pragma omp taskgroup task_reduction(+:r2) allocate (r2)\n@@ -215,7 +215,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n     order(concurrent) allocate (f)\n   for (int i = 0; i < 64; i++)\n     ll++;\n-  #pragma omp target nowait depend(inout: dd[0])\n+  #pragma omp target nowait depend(inout: dd[0]) in_reduction(+:r2)\n   #pragma omp teams distribute \\\n     private(p) firstprivate (f) shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl) \\\n     collapse(1) dist_schedule(static, 16) allocate (omp_default_mem_alloc: f)\n@@ -349,28 +349,28 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n     device(d) map (tofrom: m) if (target: i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp) \\\n     if (parallel: i2) default(shared) shared(s) reduction(+:r) num_threads (nth) proc_bind(spread) \\\n     nowait depend(inout: dd[0]) lastprivate (l) bind(parallel) order(concurrent) collapse(1) \\\n-    allocate (omp_default_mem_alloc: f)\n+    allocate (omp_default_mem_alloc: f) in_reduction(+:r2)\n   for (l = 0; l < 64; ++l)\n     ;\n   #pragma omp target parallel loop \\\n     device(d) map (tofrom: m) if (target: i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp) \\\n     if (parallel: i2) default(shared) shared(s) reduction(+:r) num_threads (nth) proc_bind(spread) \\\n     nowait depend(inout: dd[0]) lastprivate (l) order(concurrent) collapse(1) \\\n-    allocate (omp_default_mem_alloc: f)\n+    allocate (omp_default_mem_alloc: f) in_reduction(+:r2)\n   for (l = 0; l < 64; ++l)\n     ;\n   #pragma omp target teams loop \\\n     device(d) map (tofrom: m) if (target: i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp) \\\n     shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl) nowait depend(inout: dd[0]) \\\n     lastprivate (l) bind(teams) collapse(1) \\\n-    allocate (omp_default_mem_alloc: f)\n+    allocate (omp_default_mem_alloc: f) in_reduction(+:r2)\n   for (l = 0; l < 64; ++l)\n     ;\n   #pragma omp target teams loop \\\n     device(d) map (tofrom: m) if (target: i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp) \\\n     shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl) nowait depend(inout: dd[0]) \\\n     lastprivate (l) order(concurrent) collapse(1) \\\n-    allocate (omp_default_mem_alloc: f)\n+    allocate (omp_default_mem_alloc: f) in_reduction(+:r2)\n   for (l = 0; l < 64; ++l)\n     ;\n }"}, {"sha": "23ed300d9e933003a12d51225d6b4f54e8040a62", "filename": "gcc/testsuite/c-c++-common/gomp/target-in-reduction-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7619d33471c10fe3d149dcbb701d99ed3dd23528/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Ftarget-in-reduction-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7619d33471c10fe3d149dcbb701d99ed3dd23528/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Ftarget-in-reduction-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Ftarget-in-reduction-1.c?ref=7619d33471c10fe3d149dcbb701d99ed3dd23528", "patch": "@@ -0,0 +1,12 @@\n+void\n+foo (int i, int j, int k)\n+{\n+  #pragma omp target in_reduction (+:i) private (i)\t/* { dg-error \"'i' appears more than once in data-sharing clauses\" } */\n+  ;\n+  #pragma omp target private (i) in_reduction (+:i)\t/* { dg-error \"'i' appears both in data and map clauses\" } */\n+  ;\n+  #pragma omp target in_reduction (+:i) firstprivate (i)\t/* { dg-error \"'i' appears more than once in data-sharing clauses\" } */\n+  ;\t\t\t\t\t\t\t\t/* { dg-error \"'i' appears both in data and map clauses\" \"\" { target *-*-* } .-1 } */\n+  #pragma omp target firstprivate (i) in_reduction (+:i)\t/* { dg-error \"'i' appears both in data and map clauses\" } */\n+  ;\n+}"}, {"sha": "060ddee09ddb1b3e5cfdf89549fa84ec9309f43c", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7619d33471c10fe3d149dcbb701d99ed3dd23528/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7619d33471c10fe3d149dcbb701d99ed3dd23528/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=7619d33471c10fe3d149dcbb701d99ed3dd23528", "patch": "@@ -1651,7 +1651,8 @@ class auto_suppress_location_wrappers\n #define OMP_CLAUSE_MAP_MAYBE_ZERO_LENGTH_ARRAY_SECTION(NODE) \\\n   TREE_PROTECTED (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_MAP))\n /* Nonzero if this map clause is for an OpenACC compute construct's reduction\n-   variable.  */\n+   variable or OpenMP map clause mentioned also in in_reduction clause on the\n+   same construct.  */\n #define OMP_CLAUSE_MAP_IN_REDUCTION(NODE) \\\n   TREE_PRIVATE (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_MAP))\n /* Nonzero on map clauses added implicitly for reduction clauses on combined"}, {"sha": "21130f5bb8206ebf89073af5e5a45dd1649e9280", "filename": "libgomp/testsuite/libgomp.c++/target-in-reduction-1.C", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7619d33471c10fe3d149dcbb701d99ed3dd23528/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-in-reduction-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7619d33471c10fe3d149dcbb701d99ed3dd23528/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-in-reduction-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-in-reduction-1.C?ref=7619d33471c10fe3d149dcbb701d99ed3dd23528", "patch": "@@ -0,0 +1,113 @@\n+void\n+foo (int &x, int *&y, int n, int v)\n+{\n+  int zu[3] = { 45, 46, 47 };\n+  int uu[n], wu[n], i;\n+  int (&z)[3] = zu;\n+  int (&u)[n] = uu;\n+  int (&w)[n] = wu;\n+  for (i = 0; i < n; i++)\n+    w[i] = u[i] = n + i;\n+  #pragma omp taskgroup task_reduction (+: x, y[:2], z[1:2], u, w[1:v])\n+  {\n+    #pragma omp task in_reduction (+: x, y[:2], z[1:2], u, w[1:v])\n+    {\n+      x++;\n+      y[0] += 2;\n+      y[1] += 3;\n+      z[1] += 4;\n+      u[0] += 5;\n+      w[1] += 6;\n+    }\n+    #pragma omp target in_reduction (+: x, y[:2], z[1:2], u, w[1:v])\n+    {\n+      x += 4;\n+      y[0] += 5;\n+      y[1] += 6;\n+      z[2] += 7;\n+      u[1] += 8;\n+      w[2] += 7;\n+    }\n+    #pragma omp target in_reduction (+: x, y[:v], z[1:v], u, w[1:2])\n+    {\n+      x += 9;\n+      y[0] += 10;\n+      y[1] += 11;\n+      z[1] += 12;\n+      u[2] += 13;\n+      w[1] += 14;\n+    }\n+  }\n+  if (x != 56 || y[0] != 60 || y[1] != 64)\n+    __builtin_abort ();\n+  if (z[0] != 45 || z[1] != 62 || z[2] != 54)\n+    __builtin_abort ();\n+  if (u[0] != 8 || u[1] != 12 || u[2] != 18)\n+    __builtin_abort ();\n+  if (w[0] != 3 || w[1] != 24 || w[2] != 12)\n+    __builtin_abort ();\n+}\n+\n+void\n+bar (int &x, int *&y, int n, int v)\n+{\n+  int zu[3] = { 45, 46, 47 };\n+  int uu[n], wu[n], i;\n+  int (&z)[3] = zu;\n+  int (&u)[n] = uu;\n+  int (&w)[n] = wu;\n+  for (i = 0; i < n; i++)\n+    w[i] = u[i] = n + i;\n+  #pragma omp parallel master\n+  #pragma omp taskgroup task_reduction (+: x, y[:2], z[1:2], u, w[1:v])\n+  {\n+    #pragma omp task in_reduction (+: x, y[:2], z[1:2], u, w[1:v])\n+    {\n+      x++;\n+      y[0] += 2;\n+      y[1] += 3;\n+      z[1] += 4;\n+      u[0] += 5;\n+      w[1] += 6;\n+    }\n+    #pragma omp target in_reduction (+: x, y[:2], z[1:2], u, w[1:v])\n+    {\n+      x += 4;\n+      y[0] += 5;\n+      y[1] += 6;\n+      z[2] += 7;\n+      u[1] += 8;\n+      w[2] += 7;\n+    }\n+    #pragma omp target in_reduction (+: x, y[:v], z[1:v], u, w[1:2])\n+    {\n+      x += 9;\n+      y[0] += 10;\n+      y[1] += 11;\n+      z[1] += 12;\n+      u[2] += 13;\n+      w[1] += 14;\n+    }\n+  }\n+  if (x != 56 || y[0] != 77 || y[1] != 84)\n+    __builtin_abort ();\n+  if (z[0] != 45 || z[1] != 62 || z[2] != 54)\n+    __builtin_abort ();\n+  if (u[0] != 8 || u[1] != 12 || u[2] != 18)\n+    __builtin_abort ();\n+  if (w[0] != 3 || w[1] != 24 || w[2] != 12)\n+    __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  int x = 42;\n+  int yu[2] = { 43, 44 };\n+  int *y = yu;\n+  #pragma omp parallel master\n+  foo (x, y, 3, 2);\n+  x = 42;\n+  bar (x, y, 3, 2);\n+  return 0;\n+}"}, {"sha": "5da0e903b66577342c370db9de0020b3dee871e7", "filename": "libgomp/testsuite/libgomp.c++/target-in-reduction-2.C", "status": "added", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7619d33471c10fe3d149dcbb701d99ed3dd23528/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-in-reduction-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7619d33471c10fe3d149dcbb701d99ed3dd23528/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-in-reduction-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ftarget-in-reduction-2.C?ref=7619d33471c10fe3d149dcbb701d99ed3dd23528", "patch": "@@ -0,0 +1,182 @@\n+struct S { int a, b, c[2]; };\n+#pragma omp declare reduction (+: S : (omp_out.a += omp_in.a, omp_out.b += omp_in.b)) \\\n+  initializer (omp_priv = { 0, 0, { 0, 0 } })\n+\n+void\n+foo (S &x, S *&y, int n, int v)\n+{\n+  S zu[3] = { { 45, 47, {} }, { 46, 48, {} }, { 47, 49, {} } };\n+  S uu[n], wu[n];\n+  S (&z)[3] = zu;\n+  S (&u)[n] = uu;\n+  S (&w)[n] = wu;\n+  int i;\n+  for (i = 0; i < n; i++)\n+    {\n+      w[i].a = u[i].a = n + i;\n+      w[i].b = u[i].b = n - i;\n+      w[i].c[0] = u[i].c[0] = 0;\n+      w[i].c[1] = u[i].c[1] = 0;\n+    }\n+  #pragma omp taskgroup task_reduction (+: x, y[:2], z[1:2], u, w[1:v])\n+  {\n+    #pragma omp task in_reduction (+: x, y[:2], z[1:2], u, w[1:v])\n+    {\n+      x.a++;\n+      x.b++;\n+      y[0].a += 2;\n+      y[0].b += 12;\n+      y[1].a += 3;\n+      y[1].b += 13;\n+      z[1].a += 4;\n+      z[1].b += 14;\n+      u[0].a += 5;\n+      u[0].b += 15;\n+      w[1].a += 6;\n+      w[1].b += 16;\n+    }\n+    #pragma omp target in_reduction (+: x, y[:2], z[1:2], u, w[1:v])\n+    {\n+      x.a += 4;\n+      x.b += 14;\n+      y[0].a += 5;\n+      y[0].b += 15;\n+      y[1].a += 6;\n+      y[1].b += 16;\n+      z[2].a += 7;\n+      z[2].b += 17;\n+      u[1].a += 8;\n+      u[1].b += 18;\n+      w[2].a += 7;\n+      w[2].b += 17;\n+    }\n+    #pragma omp target in_reduction (+: x, y[:v], z[1:v], u, w[1:2])\n+    {\n+      x.a += 9;\n+      x.b += 19;\n+      y[0].a += 10;\n+      y[0].b += 20;\n+      y[1].a += 11;\n+      y[1].b += 21;\n+      z[1].a += 12;\n+      z[1].b += 22;\n+      u[2].a += 13;\n+      u[2].b += 23;\n+      w[1].a += 14;\n+      w[1].b += 24;\n+    }\n+  }\n+  if (x.a != 56 || y[0].a != 60 || y[1].a != 64)\n+    __builtin_abort ();\n+  if (x.b != 86 || y[0].b != 100 || y[1].b != 104)\n+    __builtin_abort ();\n+  if (z[0].a != 45 || z[1].a != 62 || z[2].a != 54)\n+    __builtin_abort ();\n+  if (z[0].b != 47 || z[1].b != 84 || z[2].b != 66)\n+    __builtin_abort ();\n+  if (u[0].a != 8 || u[1].a != 12 || u[2].a != 18)\n+    __builtin_abort ();\n+  if (u[0].b != 18 || u[1].b != 20 || u[2].b != 24)\n+    __builtin_abort ();\n+  if (w[0].a != 3 || w[1].a != 24 || w[2].a != 12)\n+    __builtin_abort ();\n+  if (w[0].b != 3 || w[1].b != 42 || w[2].b != 18)\n+    __builtin_abort ();\n+}\n+\n+void\n+bar (S &x, S *&y, int n, int v)\n+{\n+  S zu[3] = { { 45, 47, {} }, { 46, 48, {} }, { 47, 49, {} } };\n+  S uu[n], wu[n];\n+  S (&z)[3] = zu;\n+  S (&u)[n] = uu;\n+  S (&w)[n] = wu;\n+  int i;\n+  for (i = 0; i < n; i++)\n+    {\n+      w[i].a = u[i].a = n + i;\n+      w[i].b = u[i].b = n - i;\n+      w[i].c[0] = u[i].c[0] = 0;\n+      w[i].c[1] = u[i].c[1] = 0;\n+    }\n+  #pragma omp parallel master\n+  #pragma omp taskgroup task_reduction (+: x, y[:2], z[1:2], u, w[1:v])\n+  {\n+    #pragma omp task in_reduction (+: x, y[:2], z[1:2], u, w[1:v])\n+    {\n+      x.a++;\n+      x.b++;\n+      y[0].a += 2;\n+      y[0].b += 12;\n+      y[1].a += 3;\n+      y[1].b += 13;\n+      z[1].a += 4;\n+      z[1].b += 14;\n+      u[0].a += 5;\n+      u[0].b += 15;\n+      w[1].a += 6;\n+      w[1].b += 16;\n+    }\n+    #pragma omp target in_reduction (+: x, y[:2], z[1:2], u, w[1:v])\n+    {\n+      x.a += 4;\n+      x.b += 14;\n+      y[0].a += 5;\n+      y[0].b += 15;\n+      y[1].a += 6;\n+      y[1].b += 16;\n+      z[2].a += 7;\n+      z[2].b += 17;\n+      u[1].a += 8;\n+      u[1].b += 18;\n+      w[2].a += 7;\n+      w[2].b += 17;\n+    }\n+    #pragma omp target in_reduction (+: x, y[:v], z[1:v], u, w[1:2])\n+    {\n+      x.a += 9;\n+      x.b += 19;\n+      y[0].a += 10;\n+      y[0].b += 20;\n+      y[1].a += 11;\n+      y[1].b += 21;\n+      z[1].a += 12;\n+      z[1].b += 22;\n+      u[2].a += 13;\n+      u[2].b += 23;\n+      w[1].a += 14;\n+      w[1].b += 24;\n+    }\n+  }\n+  if (x.a != 56 || y[0].a != 77 || y[1].a != 84)\n+    __builtin_abort ();\n+  if (x.b != 86 || y[0].b != 147 || y[1].b != 154)\n+    __builtin_abort ();\n+  if (z[0].a != 45 || z[1].a != 62 || z[2].a != 54)\n+    __builtin_abort ();\n+  if (z[0].b != 47 || z[1].b != 84 || z[2].b != 66)\n+    __builtin_abort ();\n+  if (u[0].a != 8 || u[1].a != 12 || u[2].a != 18)\n+    __builtin_abort ();\n+  if (u[0].b != 18 || u[1].b != 20 || u[2].b != 24)\n+    __builtin_abort ();\n+  if (w[0].a != 3 || w[1].a != 24 || w[2].a != 12)\n+    __builtin_abort ();\n+  if (w[0].b != 3 || w[1].b != 42 || w[2].b != 18)\n+    __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  S x = { 42, 52 };\n+  S yu[2] = { { 43, 53 }, { 44, 54 } };\n+  S *y = yu;\n+  #pragma omp parallel master\n+  foo (x, y, 3, 2);\n+  x.a = 42;\n+  x.b = 52;\n+  bar (x, y, 3, 2);\n+  return 0;\n+}"}, {"sha": "813b5d95d3dd1752cfa44af7d07a0cbd7818bfed", "filename": "libgomp/testsuite/libgomp.c-c++-common/target-in-reduction-1.c", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7619d33471c10fe3d149dcbb701d99ed3dd23528/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-in-reduction-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7619d33471c10fe3d149dcbb701d99ed3dd23528/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-in-reduction-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-in-reduction-1.c?ref=7619d33471c10fe3d149dcbb701d99ed3dd23528", "patch": "@@ -0,0 +1,104 @@\n+void\n+foo (int x, int *y, int n, int v)\n+{\n+  int z[3] = { 45, 46, 47 };\n+  int u[n], w[n], i;\n+  for (i = 0; i < n; i++)\n+    w[i] = u[i] = n + i;\n+  #pragma omp taskgroup task_reduction (+: x, y[:2], z[1:2], u, w[1:v])\n+  {\n+    #pragma omp task in_reduction (+: x, y[:2], z[1:2], u, w[1:v])\n+    {\n+      x++;\n+      y[0] += 2;\n+      y[1] += 3;\n+      z[1] += 4;\n+      u[0] += 5;\n+      w[1] += 6;\n+    }\n+    #pragma omp target in_reduction (+: x, y[:2], z[1:2], u, w[1:v])\n+    {\n+      x += 4;\n+      y[0] += 5;\n+      y[1] += 6;\n+      z[2] += 7;\n+      u[1] += 8;\n+      w[2] += 7;\n+    }\n+    #pragma omp target in_reduction (+: x, y[:v], z[1:v], u, w[1:2])\n+    {\n+      x += 9;\n+      y[0] += 10;\n+      y[1] += 11;\n+      z[1] += 12;\n+      u[2] += 13;\n+      w[1] += 14;\n+    }\n+  }\n+  if (x != 56 || y[0] != 60 || y[1] != 64)\n+    __builtin_abort ();\n+  if (z[0] != 45 || z[1] != 62 || z[2] != 54)\n+    __builtin_abort ();\n+  if (u[0] != 8 || u[1] != 12 || u[2] != 18)\n+    __builtin_abort ();\n+  if (w[0] != 3 || w[1] != 24 || w[2] != 12)\n+    __builtin_abort ();\n+}\n+\n+void\n+bar (int x, int *y, int n, int v)\n+{\n+  int z[3] = { 45, 46, 47 };\n+  int u[n], w[n], i;\n+  for (i = 0; i < n; i++)\n+    w[i] = u[i] = n + i;\n+  #pragma omp parallel master\n+  #pragma omp taskgroup task_reduction (+: x, y[:2], z[1:2], u, w[1:v])\n+  {\n+    #pragma omp task in_reduction (+: x, y[:2], z[1:2], u, w[1:v])\n+    {\n+      x++;\n+      y[0] += 2;\n+      y[1] += 3;\n+      z[1] += 4;\n+      u[0] += 5;\n+      w[1] += 6;\n+    }\n+    #pragma omp target in_reduction (+: x, y[:2], z[1:2], u, w[1:v])\n+    {\n+      x += 4;\n+      y[0] += 5;\n+      y[1] += 6;\n+      z[2] += 7;\n+      u[1] += 8;\n+      w[2] += 7;\n+    }\n+    #pragma omp target in_reduction (+: x, y[:v], z[1:v], u, w[1:2])\n+    {\n+      x += 9;\n+      y[0] += 10;\n+      y[1] += 11;\n+      z[1] += 12;\n+      u[2] += 13;\n+      w[1] += 14;\n+    }\n+  }\n+  if (x != 56 || y[0] != 77 || y[1] != 84)\n+    __builtin_abort ();\n+  if (z[0] != 45 || z[1] != 62 || z[2] != 54)\n+    __builtin_abort ();\n+  if (u[0] != 8 || u[1] != 12 || u[2] != 18)\n+    __builtin_abort ();\n+  if (w[0] != 3 || w[1] != 24 || w[2] != 12)\n+    __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  int y[2] = { 43, 44 };\n+  #pragma omp parallel master\n+  foo (42, y, 3, 2);\n+  bar (42, y, 3, 2);\n+  return 0;\n+}"}, {"sha": "dd56965251bd11107245bb0aa2c2ead6784c09e3", "filename": "libgomp/testsuite/libgomp.c-c++-common/target-in-reduction-2.c", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7619d33471c10fe3d149dcbb701d99ed3dd23528/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-in-reduction-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7619d33471c10fe3d149dcbb701d99ed3dd23528/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-in-reduction-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-in-reduction-2.c?ref=7619d33471c10fe3d149dcbb701d99ed3dd23528", "patch": "@@ -0,0 +1,173 @@\n+struct S { int a, b, c[2]; };\n+#pragma omp declare reduction (+: struct S : (omp_out.a += omp_in.a, omp_out.b += omp_in.b)) \\\n+  initializer (omp_priv = { 0, 0, { 0, 0 } })\n+\n+void\n+foo (struct S x, struct S *y, int n, int v)\n+{\n+  struct S z[3] = { { 45, 47, {} }, { 46, 48, {} }, { 47, 49, {} } };\n+  struct S u[n], w[n];\n+  int i;\n+  for (i = 0; i < n; i++)\n+    {\n+      w[i].a = u[i].a = n + i;\n+      w[i].b = u[i].b = n - i;\n+      w[i].c[0] = u[i].c[0] = 0;\n+      w[i].c[1] = u[i].c[1] = 0;\n+    }\n+  #pragma omp taskgroup task_reduction (+: x, y[:2], z[1:2], u, w[1:v])\n+  {\n+    #pragma omp task in_reduction (+: x, y[:2], z[1:2], u, w[1:v])\n+    {\n+      x.a++;\n+      x.b++;\n+      y[0].a += 2;\n+      y[0].b += 12;\n+      y[1].a += 3;\n+      y[1].b += 13;\n+      z[1].a += 4;\n+      z[1].b += 14;\n+      u[0].a += 5;\n+      u[0].b += 15;\n+      w[1].a += 6;\n+      w[1].b += 16;\n+    }\n+    #pragma omp target in_reduction (+: x, y[:2], z[1:2], u, w[1:v]) map(tofrom: x.a, x.b, x.c[:2])\n+    {\n+      x.a += 4;\n+      x.b += 14;\n+      y[0].a += 5;\n+      y[0].b += 15;\n+      y[1].a += 6;\n+      y[1].b += 16;\n+      z[2].a += 7;\n+      z[2].b += 17;\n+      u[1].a += 8;\n+      u[1].b += 18;\n+      w[2].a += 7;\n+      w[2].b += 17;\n+    }\n+    #pragma omp target in_reduction (+: x, y[:v], z[1:v], u, w[1:2])\n+    {\n+      x.a += 9;\n+      x.b += 19;\n+      y[0].a += 10;\n+      y[0].b += 20;\n+      y[1].a += 11;\n+      y[1].b += 21;\n+      z[1].a += 12;\n+      z[1].b += 22;\n+      u[2].a += 13;\n+      u[2].b += 23;\n+      w[1].a += 14;\n+      w[1].b += 24;\n+    }\n+  }\n+  if (x.a != 56 || y[0].a != 60 || y[1].a != 64)\n+    __builtin_abort ();\n+  if (x.b != 86 || y[0].b != 100 || y[1].b != 104)\n+    __builtin_abort ();\n+  if (z[0].a != 45 || z[1].a != 62 || z[2].a != 54)\n+    __builtin_abort ();\n+  if (z[0].b != 47 || z[1].b != 84 || z[2].b != 66)\n+    __builtin_abort ();\n+  if (u[0].a != 8 || u[1].a != 12 || u[2].a != 18)\n+    __builtin_abort ();\n+  if (u[0].b != 18 || u[1].b != 20 || u[2].b != 24)\n+    __builtin_abort ();\n+  if (w[0].a != 3 || w[1].a != 24 || w[2].a != 12)\n+    __builtin_abort ();\n+  if (w[0].b != 3 || w[1].b != 42 || w[2].b != 18)\n+    __builtin_abort ();\n+}\n+\n+void\n+bar (struct S x, struct S *y, int n, int v)\n+{\n+  struct S z[3] = { { 45, 47, {} }, { 46, 48, {} }, { 47, 49, {} } };\n+  struct S u[n], w[n];\n+  int i;\n+  for (i = 0; i < n; i++)\n+    {\n+      w[i].a = u[i].a = n + i;\n+      w[i].b = u[i].b = n - i;\n+      w[i].c[0] = u[i].c[0] = 0;\n+      w[i].c[1] = u[i].c[1] = 0;\n+    }\n+  #pragma omp parallel master\n+  #pragma omp taskgroup task_reduction (+: x, y[:2], z[1:2], u, w[1:v])\n+  {\n+    #pragma omp task in_reduction (+: x, y[:2], z[1:2], u, w[1:v])\n+    {\n+      x.a++;\n+      x.b++;\n+      y[0].a += 2;\n+      y[0].b += 12;\n+      y[1].a += 3;\n+      y[1].b += 13;\n+      z[1].a += 4;\n+      z[1].b += 14;\n+      u[0].a += 5;\n+      u[0].b += 15;\n+      w[1].a += 6;\n+      w[1].b += 16;\n+    }\n+    #pragma omp target in_reduction (+: x, y[:2], z[1:2], u, w[1:v]) map(tofrom: x.a, x.b, x.c[:2])\n+    {\n+      x.a += 4;\n+      x.b += 14;\n+      y[0].a += 5;\n+      y[0].b += 15;\n+      y[1].a += 6;\n+      y[1].b += 16;\n+      z[2].a += 7;\n+      z[2].b += 17;\n+      u[1].a += 8;\n+      u[1].b += 18;\n+      w[2].a += 7;\n+      w[2].b += 17;\n+    }\n+    #pragma omp target in_reduction (+: x, y[:v], z[1:v], u, w[1:2])\n+    {\n+      x.a += 9;\n+      x.b += 19;\n+      y[0].a += 10;\n+      y[0].b += 20;\n+      y[1].a += 11;\n+      y[1].b += 21;\n+      z[1].a += 12;\n+      z[1].b += 22;\n+      u[2].a += 13;\n+      u[2].b += 23;\n+      w[1].a += 14;\n+      w[1].b += 24;\n+    }\n+  }\n+  if (x.a != 56 || y[0].a != 77 || y[1].a != 84)\n+    __builtin_abort ();\n+  if (x.b != 86 || y[0].b != 147 || y[1].b != 154)\n+    __builtin_abort ();\n+  if (z[0].a != 45 || z[1].a != 62 || z[2].a != 54)\n+    __builtin_abort ();\n+  if (z[0].b != 47 || z[1].b != 84 || z[2].b != 66)\n+    __builtin_abort ();\n+  if (u[0].a != 8 || u[1].a != 12 || u[2].a != 18)\n+    __builtin_abort ();\n+  if (u[0].b != 18 || u[1].b != 20 || u[2].b != 24)\n+    __builtin_abort ();\n+  if (w[0].a != 3 || w[1].a != 24 || w[2].a != 12)\n+    __builtin_abort ();\n+  if (w[0].b != 3 || w[1].b != 42 || w[2].b != 18)\n+    __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  struct S x = { 42, 52 };\n+  struct S y[2] = { { 43, 53 }, { 44, 54 } };\n+  #pragma omp parallel master\n+  foo (x, y, 3, 2);\n+  bar (x, y, 3, 2);\n+  return 0;\n+}"}]}