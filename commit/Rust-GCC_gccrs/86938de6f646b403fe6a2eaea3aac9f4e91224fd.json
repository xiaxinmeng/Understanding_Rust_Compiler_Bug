{"sha": "86938de6f646b403fe6a2eaea3aac9f4e91224fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY5MzhkZTZmNjQ2YjQwM2ZlNmEyZWFlYTNhYWM5ZjRlOTEyMjRmZA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-12-02T15:48:35Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-12-02T15:48:35Z"}, "message": "Mark pointers to allocated target vars as restricted, if possible\n\n2015-12-02  Tom de Vries  <tom@codesourcery.com>\n\n\t* omp-low.c (install_var_field, scan_sharing_clauses): Add and handle\n\tparameter base_pointers_restrict.\n\t(omp_target_base_pointers_restrict_p): New function.\n\t(scan_omp_target): Call scan_sharing_clauses with base_pointers_restrict\n\targ.\n\n\t* c-c++-common/goacc/kernels-alias-2.c: New test.\n\t* c-c++-common/goacc/kernels-alias-3.c: New test.\n\t* c-c++-common/goacc/kernels-alias-4.c: New test.\n\t* c-c++-common/goacc/kernels-alias-5.c: New test.\n\t* c-c++-common/goacc/kernels-alias-6.c: New test.\n\t* c-c++-common/goacc/kernels-alias-7.c: New test.\n\t* c-c++-common/goacc/kernels-alias-8.c: New test.\n\t* c-c++-common/goacc/kernels-alias.c: New test.\n\nFrom-SVN: r231182", "tree": {"sha": "6d7809162ea7754395d66078007d4863354014fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d7809162ea7754395d66078007d4863354014fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86938de6f646b403fe6a2eaea3aac9f4e91224fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86938de6f646b403fe6a2eaea3aac9f4e91224fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86938de6f646b403fe6a2eaea3aac9f4e91224fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86938de6f646b403fe6a2eaea3aac9f4e91224fd/comments", "author": null, "committer": null, "parents": [{"sha": "28eca950b760f1e98f0626a441ffd48b8baad153", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28eca950b760f1e98f0626a441ffd48b8baad153", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28eca950b760f1e98f0626a441ffd48b8baad153"}], "stats": {"total": 299, "additions": 292, "deletions": 7}, "files": [{"sha": "0e4a3dd82daae73a2931c94380635dc10027bc03", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86938de6f646b403fe6a2eaea3aac9f4e91224fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86938de6f646b403fe6a2eaea3aac9f4e91224fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=86938de6f646b403fe6a2eaea3aac9f4e91224fd", "patch": "@@ -1,3 +1,11 @@\n+2015-12-02  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* omp-low.c (install_var_field, scan_sharing_clauses): Add and handle\n+\tparameter base_pointers_restrict.\n+\t(omp_target_base_pointers_restrict_p): New function.\n+\t(scan_omp_target): Call scan_sharing_clauses with base_pointers_restrict\n+\targ.\n+\n 2015-12-02  Nathan Sidwell  <nathan@acm.org>\n \n \t* config/nvptx/nvptx-protos.h (nvptx_output_mov_insn): Declare."}, {"sha": "d1d1e3cd67aafbb3ecf6ce2d75a32ec2217e444b", "filename": "gcc/omp-low.c", "status": "modified", "additions": 86, "deletions": 7, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86938de6f646b403fe6a2eaea3aac9f4e91224fd/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86938de6f646b403fe6a2eaea3aac9f4e91224fd/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=86938de6f646b403fe6a2eaea3aac9f4e91224fd", "patch": "@@ -1366,10 +1366,12 @@ build_sender_ref (tree var, omp_context *ctx)\n   return build_sender_ref ((splay_tree_key) var, ctx);\n }\n \n-/* Add a new field for VAR inside the structure CTX->SENDER_DECL.  */\n+/* Add a new field for VAR inside the structure CTX->SENDER_DECL.  If\n+   BASE_POINTERS_RESTRICT, declare the field with restrict.  */\n \n static void\n-install_var_field (tree var, bool by_ref, int mask, omp_context *ctx)\n+install_var_field (tree var, bool by_ref, int mask, omp_context *ctx,\n+\t\t   bool base_pointers_restrict = false)\n {\n   tree field, type, sfield = NULL_TREE;\n   splay_tree_key key = (splay_tree_key) var;\n@@ -1393,7 +1395,11 @@ install_var_field (tree var, bool by_ref, int mask, omp_context *ctx)\n       type = build_pointer_type (build_pointer_type (type));\n     }\n   else if (by_ref)\n-    type = build_pointer_type (type);\n+    {\n+      type = build_pointer_type (type);\n+      if (base_pointers_restrict)\n+\ttype = build_qualified_type (type, TYPE_QUAL_RESTRICT);\n+    }\n   else if ((mask & 3) == 1 && is_reference (var))\n     type = TREE_TYPE (type);\n \n@@ -1810,10 +1816,12 @@ fixup_child_record_type (omp_context *ctx)\n }\n \n /* Instantiate decls as necessary in CTX to satisfy the data sharing\n-   specified by CLAUSES.  */\n+   specified by CLAUSES.  If BASE_POINTERS_RESTRICT, install var field with\n+   restrict.  */\n \n static void\n-scan_sharing_clauses (tree clauses, omp_context *ctx)\n+scan_sharing_clauses (tree clauses, omp_context *ctx,\n+\t\t      bool base_pointers_restrict = false)\n {\n   tree c, decl;\n   bool scan_array_reductions = false;\n@@ -2075,7 +2083,8 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t\t      && TREE_CODE (TREE_TYPE (decl)) == ARRAY_TYPE)\n \t\t    install_var_field (decl, true, 7, ctx);\n \t\t  else\n-\t\t    install_var_field (decl, true, 3, ctx);\n+\t\t    install_var_field (decl, true, 3, ctx,\n+\t\t\t\t       base_pointers_restrict);\n \t\t  if (is_gimple_omp_offloaded (ctx->stmt))\n \t\t    install_var_local (decl, ctx);\n \t\t}\n@@ -3036,6 +3045,68 @@ scan_omp_single (gomp_single *stmt, omp_context *outer_ctx)\n     layout_type (ctx->record_type);\n }\n \n+/* Return true if the CLAUSES of an omp target guarantee that the base pointers\n+   used in the corresponding offloaded function are restrict.  */\n+\n+static bool\n+omp_target_base_pointers_restrict_p (tree clauses)\n+{\n+  /* The analysis relies on the GOMP_MAP_FORCE_* mapping kinds, which are only\n+     used by OpenACC.  */\n+  if (flag_openacc == 0)\n+    return false;\n+\n+  /* I.  Basic example:\n+\n+       void foo (void)\n+       {\n+\t unsigned int a[2], b[2];\n+\n+\t #pragma acc kernels \\\n+\t   copyout (a) \\\n+\t   copyout (b)\n+\t {\n+\t   a[0] = 0;\n+\t   b[0] = 1;\n+\t }\n+       }\n+\n+     After gimplification, we have:\n+\n+       #pragma omp target oacc_kernels \\\n+\t map(force_from:a [len: 8]) \\\n+\t map(force_from:b [len: 8])\n+       {\n+\t a[0] = 0;\n+\t b[0] = 1;\n+       }\n+\n+     Because both mappings have the force prefix, we know that they will be\n+     allocated when calling the corresponding offloaded function, which means we\n+     can mark the base pointers for a and b in the offloaded function as\n+     restrict.  */\n+\n+  tree c;\n+  for (c = clauses; c; c = OMP_CLAUSE_CHAIN (c))\n+    {\n+      if (OMP_CLAUSE_CODE (c) != OMP_CLAUSE_MAP)\n+\treturn false;\n+\n+      switch (OMP_CLAUSE_MAP_KIND (c))\n+\t{\n+\tcase GOMP_MAP_FORCE_ALLOC:\n+\tcase GOMP_MAP_FORCE_TO:\n+\tcase GOMP_MAP_FORCE_FROM:\n+\tcase GOMP_MAP_FORCE_TOFROM:\n+\t  break;\n+\tdefault:\n+\t  return false;\n+\t}\n+    }\n+\n+  return true;\n+}\n+\n /* Scan a GIMPLE_OMP_TARGET.  */\n \n static void\n@@ -3057,13 +3128,21 @@ scan_omp_target (gomp_target *stmt, omp_context *outer_ctx)\n   DECL_NAMELESS (name) = 1;\n   TYPE_NAME (ctx->record_type) = name;\n   TYPE_ARTIFICIAL (ctx->record_type) = 1;\n+\n+  bool base_pointers_restrict = false;\n   if (offloaded)\n     {\n       create_omp_child_function (ctx, false);\n       gimple_omp_target_set_child_fn (stmt, ctx->cb.dst_fn);\n+\n+      base_pointers_restrict = omp_target_base_pointers_restrict_p (clauses);\n+      if (base_pointers_restrict\n+\t  && dump_file && (dump_flags & TDF_DETAILS))\n+\tfprintf (dump_file,\n+\t\t \"Base pointers in offloaded function are restrict\\n\");\n     }\n \n-  scan_sharing_clauses (clauses, ctx);\n+  scan_sharing_clauses (clauses, ctx, base_pointers_restrict);\n   scan_omp (gimple_omp_body_ptr (stmt), ctx);\n \n   if (TYPE_FIELDS (ctx->record_type) == NULL)"}, {"sha": "bb523db54b17f10d38de6baed66a128a965d6208", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86938de6f646b403fe6a2eaea3aac9f4e91224fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86938de6f646b403fe6a2eaea3aac9f4e91224fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=86938de6f646b403fe6a2eaea3aac9f4e91224fd", "patch": "@@ -1,3 +1,14 @@\n+2015-12-02  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* c-c++-common/goacc/kernels-alias-2.c: New test.\n+\t* c-c++-common/goacc/kernels-alias-3.c: New test.\n+\t* c-c++-common/goacc/kernels-alias-4.c: New test.\n+\t* c-c++-common/goacc/kernels-alias-5.c: New test.\n+\t* c-c++-common/goacc/kernels-alias-6.c: New test.\n+\t* c-c++-common/goacc/kernels-alias-7.c: New test.\n+\t* c-c++-common/goacc/kernels-alias-8.c: New test.\n+\t* c-c++-common/goacc/kernels-alias.c: New test.\n+\n 2015-12-02  Tom de Vries  <tom@codesourcery.com>\n \n \t* c-c++-common/goacc/kernels-alias-ipa-pta-2.c: New test."}, {"sha": "d437c47779d1becb79574eb3ba95fd23564de3ef", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-alias-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86938de6f646b403fe6a2eaea3aac9f4e91224fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86938de6f646b403fe6a2eaea3aac9f4e91224fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-2.c?ref=86938de6f646b403fe6a2eaea3aac9f4e91224fd", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-fdump-tree-ealias-all\" } */\n+\n+void\n+foo (void)\n+{\n+  unsigned int a;\n+  unsigned int b;\n+  unsigned int c;\n+  unsigned int d;\n+\n+#pragma acc kernels copyin (a) create (b) copyout (c) copy (d)\n+  {\n+    a = 0;\n+    b = 0;\n+    c = 0;\n+    d = 0;\n+  }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"clique 1 base 1\" 4 \"ealias\" } } */\n+/* { dg-final { scan-tree-dump-times \"clique 1 base 2\" 1 \"ealias\" } } */\n+/* { dg-final { scan-tree-dump-times \"clique 1 base 3\" 1 \"ealias\" } } */\n+/* { dg-final { scan-tree-dump-times \"clique 1 base 4\" 1 \"ealias\" } } */\n+/* { dg-final { scan-tree-dump-times \"clique 1 base 5\" 1 \"ealias\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)clique .* base .*\" 8 \"ealias\" } } */\n+"}, {"sha": "0eda7e17c3b9c65239bd727965ebc4f69c76e709", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-alias-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86938de6f646b403fe6a2eaea3aac9f4e91224fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86938de6f646b403fe6a2eaea3aac9f4e91224fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-3.c?ref=86938de6f646b403fe6a2eaea3aac9f4e91224fd", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-fdump-tree-ealias-all\" } */\n+\n+void\n+foo (void)\n+{\n+  unsigned int a;\n+  unsigned int *p = &a;\n+\n+#pragma acc kernels pcopyin (a, p[0:1])\n+  {\n+    a = 0;\n+    *p = 1;\n+  }\n+}\n+\n+/* Only the omp_data_i related loads should be annotated with cliques.  */\n+/* { dg-final { scan-tree-dump-times \"clique 1 base 1\" 2 \"ealias\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)clique .* base .*\" 2 \"ealias\" } } */\n+"}, {"sha": "037901fcffb3d2c53522aaaf8db30b3708de2545", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-alias-4.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86938de6f646b403fe6a2eaea3aac9f4e91224fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86938de6f646b403fe6a2eaea3aac9f4e91224fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-4.c?ref=86938de6f646b403fe6a2eaea3aac9f4e91224fd", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-fdump-tree-ealias-all\" } */\n+\n+#define N 2\n+\n+void\n+foo (void)\n+{\n+  unsigned int a[N];\n+  unsigned int *p = &a[0];\n+\n+#pragma acc kernels pcopyin (a, p[0:2])\n+  {\n+    a[0] = 0;\n+    *p = 1;\n+  }\n+}\n+\n+/* Only the omp_data_i related loads should be annotated with cliques.  */\n+/* { dg-final { scan-tree-dump-times \"clique 1 base 1\" 2 \"ealias\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)clique .* base .*\" 2 \"ealias\" } } */\n+"}, {"sha": "69cd3fb94491c91001c4d04dfd3d20b063a9edad", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-alias-5.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86938de6f646b403fe6a2eaea3aac9f4e91224fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86938de6f646b403fe6a2eaea3aac9f4e91224fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-5.c?ref=86938de6f646b403fe6a2eaea3aac9f4e91224fd", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-fdump-tree-ealias-all\" } */\n+\n+void\n+foo (int *a)\n+{\n+  int *p = a;\n+\n+#pragma acc kernels pcopyin (a[0:1], p[0:1])\n+  {\n+    *a = 0;\n+    *p = 1;\n+  }\n+}\n+\n+/* Only the omp_data_i related loads should be annotated with cliques.  */\n+/* { dg-final { scan-tree-dump-times \"clique 1 base 1\" 2 \"ealias\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)clique .* base .*\" 2 \"ealias\" } } */\n+"}, {"sha": "6ebce15f5e2e17e906261bbddf55f620b2a8ead2", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-alias-6.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86938de6f646b403fe6a2eaea3aac9f4e91224fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86938de6f646b403fe6a2eaea3aac9f4e91224fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-6.c?ref=86938de6f646b403fe6a2eaea3aac9f4e91224fd", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-fdump-tree-ealias-all\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern void *acc_copyin (void *, size_t);\n+\n+void\n+foo (void)\n+{\n+  int a = 0;\n+  int *p = (int *)acc_copyin (&a, sizeof (a));\n+\n+#pragma acc kernels deviceptr (p) pcopy(a)\n+  {\n+    a = 0;\n+    *p = 1;\n+  }\n+}\n+\n+/* Only the omp_data_i related loads should be annotated with cliques.  */\n+/* { dg-final { scan-tree-dump-times \"clique 1 base 1\" 2 \"ealias\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)clique .* base .*\" 2 \"ealias\" } } */\n+"}, {"sha": "40eb235d6019be7b6437024ffc2c1a29d6e18601", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-alias-7.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86938de6f646b403fe6a2eaea3aac9f4e91224fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86938de6f646b403fe6a2eaea3aac9f4e91224fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-7.c?ref=86938de6f646b403fe6a2eaea3aac9f4e91224fd", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-fdump-tree-ealias-all\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern void *acc_copyin (void *, size_t);\n+\n+#define N 2\n+\n+void\n+foo (void)\n+{\n+  int a[N];\n+  int *p = (int *)acc_copyin (&a[0], sizeof (a));\n+\n+#pragma acc kernels deviceptr (p) pcopy(a)\n+  {\n+    a[0] = 0;\n+    *p = 1;\n+  }\n+}\n+\n+/* Only the omp_data_i related loads should be annotated with cliques.  */\n+/* { dg-final { scan-tree-dump-times \"clique 1 base 1\" 2 \"ealias\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)clique .* base .*\" 2 \"ealias\" } } */\n+"}, {"sha": "0b93e35909b79db95ebfab778ff551b0c64b1b31", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-alias-8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86938de6f646b403fe6a2eaea3aac9f4e91224fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86938de6f646b403fe6a2eaea3aac9f4e91224fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias-8.c?ref=86938de6f646b403fe6a2eaea3aac9f4e91224fd", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-fdump-tree-ealias-all\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern void *acc_copyin (void *, size_t);\n+\n+void\n+foo (int *a, size_t n)\n+{\n+  int *p = (int *)acc_copyin (&a, n);\n+\n+#pragma acc kernels deviceptr (p) pcopy(a[0:n])\n+  {\n+    a = 0;\n+    *p = 1;\n+  }\n+}\n+\n+/* Only the omp_data_i related loads should be annotated with cliques.  */\n+/* { dg-final { scan-tree-dump-times \"clique 1 base 1\" 2 \"ealias\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)clique .* base .*\" 2 \"ealias\" } } */\n+"}, {"sha": "25821ab2aea73675a57268763c9b54677a0b1d49", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-alias.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86938de6f646b403fe6a2eaea3aac9f4e91224fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86938de6f646b403fe6a2eaea3aac9f4e91224fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-alias.c?ref=86938de6f646b403fe6a2eaea3aac9f4e91224fd", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-fdump-tree-ealias-all\" } */\n+\n+#define N 2\n+\n+void\n+foo (void)\n+{\n+  unsigned int a[N];\n+  unsigned int b[N];\n+  unsigned int c[N];\n+  unsigned int d[N];\n+\n+#pragma acc kernels copyin (a) create (b) copyout (c) copy (d)\n+  {\n+    a[0] = 0;\n+    b[0] = 0;\n+    c[0] = 0;\n+    d[0] = 0;\n+  }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"clique 1 base 1\" 4 \"ealias\" } } */\n+/* { dg-final { scan-tree-dump-times \"clique 1 base 2\" 1 \"ealias\" } } */\n+/* { dg-final { scan-tree-dump-times \"clique 1 base 3\" 1 \"ealias\" } } */\n+/* { dg-final { scan-tree-dump-times \"clique 1 base 4\" 1 \"ealias\" } } */\n+/* { dg-final { scan-tree-dump-times \"clique 1 base 5\" 1 \"ealias\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)clique .* base .*\" 8 \"ealias\" } } */\n+"}]}