{"sha": "b3d51f238b954ccab35dfcbebf5321bc91106a40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNkNTFmMjM4Yjk1NGNjYWIzNWRmY2JlYmY1MzIxYmM5MTEwNmE0MA==", "commit": {"author": {"name": "Ilya Enkovich", "email": "enkovich.gnu@gmail.com", "date": "2015-12-18T10:01:02Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2015-12-18T10:01:02Z"}, "message": "re PR tree-optimization/68956 (Vectorizer miscompilation of 416.gamess)\n\ngcc/\n\n\tPR tree-optimization/68956\n\t* tree-vect-stmts.c (vect_init_vector): Fix constants\n\tused for boolean vectors.\n\ngcc/testsuite\n\n\tPR tree-optimization/68956\n\t* gcc.target/i386/pr68956.c: New test.\n\nFrom-SVN: r231811", "tree": {"sha": "e144d565e9168f9507d8083f111ebb4fe98fd347", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e144d565e9168f9507d8083f111ebb4fe98fd347"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3d51f238b954ccab35dfcbebf5321bc91106a40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d51f238b954ccab35dfcbebf5321bc91106a40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3d51f238b954ccab35dfcbebf5321bc91106a40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d51f238b954ccab35dfcbebf5321bc91106a40/comments", "author": null, "committer": null, "parents": [{"sha": "7325d85abe7451e213f3aafea6938f9810c7f277", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7325d85abe7451e213f3aafea6938f9810c7f277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7325d85abe7451e213f3aafea6938f9810c7f277"}], "stats": {"total": 82, "additions": 80, "deletions": 2}, "files": [{"sha": "32a94eb7c32efccbe8f1e7afec99fe63a38cb896", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d51f238b954ccab35dfcbebf5321bc91106a40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d51f238b954ccab35dfcbebf5321bc91106a40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3d51f238b954ccab35dfcbebf5321bc91106a40", "patch": "@@ -1,3 +1,9 @@\n+2015-12-18  Ilya Enkovich  <enkovich.gnu@gmail.com>\n+\n+\tPR tree-optimization/68956\n+\t* tree-vect-stmts.c (vect_init_vector): Fix constants\n+\tused for boolean vectors.\n+\n 2015-12-18  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR rtl-optimization/68796"}, {"sha": "6120ed1b2f3015cad583d23dd61dfabc756d8214", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d51f238b954ccab35dfcbebf5321bc91106a40/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d51f238b954ccab35dfcbebf5321bc91106a40/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b3d51f238b954ccab35dfcbebf5321bc91106a40", "patch": "@@ -1,3 +1,8 @@\n+2015-12-18  Ilya Enkovich  <enkovich.gnu@gmail.com>\n+\n+\tPR tree-optimization/68956\n+\t* gcc.target/i386/pr68956.c: New test.\n+\n 2015-12-18  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR rtl-optimization/68796"}, {"sha": "4fb2ced9dac85c6873ff0d45c88b312d8a26c047", "filename": "gcc/testsuite/gcc.target/i386/pr68956.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d51f238b954ccab35dfcbebf5321bc91106a40/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr68956.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d51f238b954ccab35dfcbebf5321bc91106a40/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr68956.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr68956.c?ref=b3d51f238b954ccab35dfcbebf5321bc91106a40", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -mfpmath=sse -mavx2 -ftree-vectorize\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#include \"avx2-check.h\"\n+\n+extern void abort (void);\n+\n+int l;\n+\n+static void __attribute__((noclone,noinline))\n+test1 (double *in1, double *in2, double *out,\n+       int l1, int l2, int *n)\n+{\n+  double sum;\n+  int na = n[0];\n+  int nb = n[1];\n+  int i;\n+  _Bool ic, jc;\n+\n+  jc = (l > na) && (l > nb);\n+  for (int i = 0; i < l2; i++)\n+    {\n+      ic = (i <= na) && (i <= nb);\n+      sum = 0;\n+      if (ic && jc)\n+\tsum = in1[i] + in2[i];\n+      out[i] = sum;\n+    }\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  double in1[40], in2[40], out[40], sum;\n+  int n[2],l1,l2,i,na,nb;\n+  _Bool ic, jc;\n+\n+  l = 0;\n+  l1 = 8;\n+  l2 = 40;\n+  n[0] = 14;\n+  n[1] = 13;\n+\n+  for (i = 0; i < l2; i++)\n+    {\n+      in1[i] = i;\n+      in2[i] = i;\n+      out[i] = 0;\n+    }\n+\n+  test1 (in1, in2, out, l1, l2, n);\n+\n+  na = n[0];\n+  nb = n[1];\n+\n+  jc = (l > na) && (l > nb);\n+  for (int i = 0; i < l2; i++)\n+    {\n+      ic = (i <= na) && (i <= nb);\n+      sum = 0;\n+      if (ic && jc)\n+\tsum = in1[i] + in2[i];\n+      if (out[i] != sum)\n+\tabort ();\n+    }\n+}"}, {"sha": "7c6fa73ff484eb7df499bcef226a183917e474c9", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d51f238b954ccab35dfcbebf5321bc91106a40/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d51f238b954ccab35dfcbebf5321bc91106a40/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=b3d51f238b954ccab35dfcbebf5321bc91106a40", "patch": "@@ -1304,8 +1304,8 @@ vect_init_vector (gimple *stmt, tree val, tree type, gimple_stmt_iterator *gsi)\n \t     all zeros or all ones value before building a vector.  */\n \t  if (VECTOR_BOOLEAN_TYPE_P (type))\n \t    {\n-\t      tree true_val = build_zero_cst (TREE_TYPE (type));\n-\t      tree false_val = build_all_ones_cst (TREE_TYPE (type));\n+\t      tree true_val = build_all_ones_cst (TREE_TYPE (type));\n+\t      tree false_val = build_zero_cst (TREE_TYPE (type));\n \n \t      if (CONSTANT_CLASS_P (val))\n \t\tval = integer_zerop (val) ? false_val : true_val;"}]}