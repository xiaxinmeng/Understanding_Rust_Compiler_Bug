{"sha": "b854516cc1943199ce15a23df340a7d2d7196a56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg1NDUxNmNjMTk0MzE5OWNlMTVhMjNkZjM0MGE3ZDJkNzE5NmE1Ng==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2016-11-10T10:38:03Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2016-11-10T10:38:03Z"}, "message": "[ARM] Remove duplicated enum type for CPU identifiers\n\n\t* arm.h (target_cpus): Delete.\n\t* arm-opts.h (enum processor_type): Prefix entires with TARGET_CPU_.\n\t* arm.c (all_cores): Prefix IDENT with TARGET_CPU_.\n\t(all_architectures): Likewise.\n\t(arm_option_override): Adjust use of CPU enums.\n\t(arm_sched_reorder): Likewise.\n\t* vfp.md (movdi_vfp, movdi_vfp_cortexa8): Likewise.\n\t* arm.opt (mcpu, mtune): Adjust use of CPU enums.\n\t* arm/genopt.sh (processor_type): Prefix enumeration entries with\n\tTARGET_CPU_.\n\t* arm-tables.opt: Regenerated.\n\nFrom-SVN: r242034", "tree": {"sha": "cc2cec46d932ef47b07a8e372167e3461b0cc0c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc2cec46d932ef47b07a8e372167e3461b0cc0c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b854516cc1943199ce15a23df340a7d2d7196a56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b854516cc1943199ce15a23df340a7d2d7196a56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b854516cc1943199ce15a23df340a7d2d7196a56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b854516cc1943199ce15a23df340a7d2d7196a56/comments", "author": null, "committer": null, "parents": [{"sha": "35d2bec0454ef630dd3c2258c34b2b05a21995a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35d2bec0454ef630dd3c2258c34b2b05a21995a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35d2bec0454ef630dd3c2258c34b2b05a21995a5"}], "stats": {"total": 274, "additions": 139, "deletions": 135}, "files": [{"sha": "5167edec046d8a5fe8d2505a64c2cacc5261e491", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b854516cc1943199ce15a23df340a7d2d7196a56/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b854516cc1943199ce15a23df340a7d2d7196a56/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b854516cc1943199ce15a23df340a7d2d7196a56", "patch": "@@ -1,3 +1,17 @@\n+2016-11-10  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.h (target_cpus): Delete.\n+\t* arm-opts.h (enum processor_type): Prefix entires with TARGET_CPU_.\n+\t* arm.c (all_cores): Prefix IDENT with TARGET_CPU_.\n+\t(all_architectures): Likewise.\n+\t(arm_option_override): Adjust use of CPU enums.\n+\t(arm_sched_reorder): Likewise.\n+\t* vfp.md (movdi_vfp, movdi_vfp_cortexa8): Likewise.\n+\t* arm.opt (mcpu, mtune): Adjust use of CPU enums.\n+\t* arm/genopt.sh (processor_type): Prefix enumeration entries with\n+\tTARGET_CPU_.\n+\t* arm-tables.opt: Regenerated.\n+\n 2016-11-10  Siddhesh Poyarekar  <siddhesh.poyarekar@linaro.org>\n \n \t* config/aarch64/aarch64-cores.def (qdf24xx): Update part"}, {"sha": "9fa8113f279bbb19519423e1b66b936c3a1c5c3d", "filename": "gcc/config/arm/arm-opts.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b854516cc1943199ce15a23df340a7d2d7196a56/gcc%2Fconfig%2Farm%2Farm-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b854516cc1943199ce15a23df340a7d2d7196a56/gcc%2Fconfig%2Farm%2Farm-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-opts.h?ref=b854516cc1943199ce15a23df340a7d2d7196a56", "patch": "@@ -30,11 +30,11 @@ enum processor_type\n {\n #undef ARM_CORE\n #define ARM_CORE(NAME, INTERNAL_IDENT, IDENT, ARCH, FLAGS, COSTS) \\\n-  INTERNAL_IDENT,\n+  TARGET_CPU_##INTERNAL_IDENT,\n #include \"arm-cores.def\"\n #undef ARM_CORE\n   /* Used to indicate that no processor has been specified.  */\n-  arm_none\n+  TARGET_CPU_arm_none\n };\n \n /* Which __fp16 format to use."}, {"sha": "c143ff5b9abd5ebdf859740b1e910c97ef89dee7", "filename": "gcc/config/arm/arm-tables.opt", "status": "modified", "additions": 110, "deletions": 110, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b854516cc1943199ce15a23df340a7d2d7196a56/gcc%2Fconfig%2Farm%2Farm-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b854516cc1943199ce15a23df340a7d2d7196a56/gcc%2Fconfig%2Farm%2Farm-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tables.opt?ref=b854516cc1943199ce15a23df340a7d2d7196a56", "patch": "@@ -25,334 +25,334 @@ Name(processor_type) Type(enum processor_type)\n Known ARM CPUs (for use with the -mcpu= and -mtune= options):\n \n EnumValue\n-Enum(processor_type) String(arm2) Value(arm2)\n+Enum(processor_type) String(arm2) Value( TARGET_CPU_arm2)\n \n EnumValue\n-Enum(processor_type) String(arm250) Value(arm250)\n+Enum(processor_type) String(arm250) Value( TARGET_CPU_arm250)\n \n EnumValue\n-Enum(processor_type) String(arm3) Value(arm3)\n+Enum(processor_type) String(arm3) Value( TARGET_CPU_arm3)\n \n EnumValue\n-Enum(processor_type) String(arm6) Value(arm6)\n+Enum(processor_type) String(arm6) Value( TARGET_CPU_arm6)\n \n EnumValue\n-Enum(processor_type) String(arm60) Value(arm60)\n+Enum(processor_type) String(arm60) Value( TARGET_CPU_arm60)\n \n EnumValue\n-Enum(processor_type) String(arm600) Value(arm600)\n+Enum(processor_type) String(arm600) Value( TARGET_CPU_arm600)\n \n EnumValue\n-Enum(processor_type) String(arm610) Value(arm610)\n+Enum(processor_type) String(arm610) Value( TARGET_CPU_arm610)\n \n EnumValue\n-Enum(processor_type) String(arm620) Value(arm620)\n+Enum(processor_type) String(arm620) Value( TARGET_CPU_arm620)\n \n EnumValue\n-Enum(processor_type) String(arm7) Value(arm7)\n+Enum(processor_type) String(arm7) Value( TARGET_CPU_arm7)\n \n EnumValue\n-Enum(processor_type) String(arm7d) Value(arm7d)\n+Enum(processor_type) String(arm7d) Value( TARGET_CPU_arm7d)\n \n EnumValue\n-Enum(processor_type) String(arm7di) Value(arm7di)\n+Enum(processor_type) String(arm7di) Value( TARGET_CPU_arm7di)\n \n EnumValue\n-Enum(processor_type) String(arm70) Value(arm70)\n+Enum(processor_type) String(arm70) Value( TARGET_CPU_arm70)\n \n EnumValue\n-Enum(processor_type) String(arm700) Value(arm700)\n+Enum(processor_type) String(arm700) Value( TARGET_CPU_arm700)\n \n EnumValue\n-Enum(processor_type) String(arm700i) Value(arm700i)\n+Enum(processor_type) String(arm700i) Value( TARGET_CPU_arm700i)\n \n EnumValue\n-Enum(processor_type) String(arm710) Value(arm710)\n+Enum(processor_type) String(arm710) Value( TARGET_CPU_arm710)\n \n EnumValue\n-Enum(processor_type) String(arm720) Value(arm720)\n+Enum(processor_type) String(arm720) Value( TARGET_CPU_arm720)\n \n EnumValue\n-Enum(processor_type) String(arm710c) Value(arm710c)\n+Enum(processor_type) String(arm710c) Value( TARGET_CPU_arm710c)\n \n EnumValue\n-Enum(processor_type) String(arm7100) Value(arm7100)\n+Enum(processor_type) String(arm7100) Value( TARGET_CPU_arm7100)\n \n EnumValue\n-Enum(processor_type) String(arm7500) Value(arm7500)\n+Enum(processor_type) String(arm7500) Value( TARGET_CPU_arm7500)\n \n EnumValue\n-Enum(processor_type) String(arm7500fe) Value(arm7500fe)\n+Enum(processor_type) String(arm7500fe) Value( TARGET_CPU_arm7500fe)\n \n EnumValue\n-Enum(processor_type) String(arm7m) Value(arm7m)\n+Enum(processor_type) String(arm7m) Value( TARGET_CPU_arm7m)\n \n EnumValue\n-Enum(processor_type) String(arm7dm) Value(arm7dm)\n+Enum(processor_type) String(arm7dm) Value( TARGET_CPU_arm7dm)\n \n EnumValue\n-Enum(processor_type) String(arm7dmi) Value(arm7dmi)\n+Enum(processor_type) String(arm7dmi) Value( TARGET_CPU_arm7dmi)\n \n EnumValue\n-Enum(processor_type) String(arm8) Value(arm8)\n+Enum(processor_type) String(arm8) Value( TARGET_CPU_arm8)\n \n EnumValue\n-Enum(processor_type) String(arm810) Value(arm810)\n+Enum(processor_type) String(arm810) Value( TARGET_CPU_arm810)\n \n EnumValue\n-Enum(processor_type) String(strongarm) Value(strongarm)\n+Enum(processor_type) String(strongarm) Value( TARGET_CPU_strongarm)\n \n EnumValue\n-Enum(processor_type) String(strongarm110) Value(strongarm110)\n+Enum(processor_type) String(strongarm110) Value( TARGET_CPU_strongarm110)\n \n EnumValue\n-Enum(processor_type) String(strongarm1100) Value(strongarm1100)\n+Enum(processor_type) String(strongarm1100) Value( TARGET_CPU_strongarm1100)\n \n EnumValue\n-Enum(processor_type) String(strongarm1110) Value(strongarm1110)\n+Enum(processor_type) String(strongarm1110) Value( TARGET_CPU_strongarm1110)\n \n EnumValue\n-Enum(processor_type) String(fa526) Value(fa526)\n+Enum(processor_type) String(fa526) Value( TARGET_CPU_fa526)\n \n EnumValue\n-Enum(processor_type) String(fa626) Value(fa626)\n+Enum(processor_type) String(fa626) Value( TARGET_CPU_fa626)\n \n EnumValue\n-Enum(processor_type) String(arm7tdmi) Value(arm7tdmi)\n+Enum(processor_type) String(arm7tdmi) Value( TARGET_CPU_arm7tdmi)\n \n EnumValue\n-Enum(processor_type) String(arm7tdmi-s) Value(arm7tdmis)\n+Enum(processor_type) String(arm7tdmi-s) Value( TARGET_CPU_arm7tdmis)\n \n EnumValue\n-Enum(processor_type) String(arm710t) Value(arm710t)\n+Enum(processor_type) String(arm710t) Value( TARGET_CPU_arm710t)\n \n EnumValue\n-Enum(processor_type) String(arm720t) Value(arm720t)\n+Enum(processor_type) String(arm720t) Value( TARGET_CPU_arm720t)\n \n EnumValue\n-Enum(processor_type) String(arm740t) Value(arm740t)\n+Enum(processor_type) String(arm740t) Value( TARGET_CPU_arm740t)\n \n EnumValue\n-Enum(processor_type) String(arm9) Value(arm9)\n+Enum(processor_type) String(arm9) Value( TARGET_CPU_arm9)\n \n EnumValue\n-Enum(processor_type) String(arm9tdmi) Value(arm9tdmi)\n+Enum(processor_type) String(arm9tdmi) Value( TARGET_CPU_arm9tdmi)\n \n EnumValue\n-Enum(processor_type) String(arm920) Value(arm920)\n+Enum(processor_type) String(arm920) Value( TARGET_CPU_arm920)\n \n EnumValue\n-Enum(processor_type) String(arm920t) Value(arm920t)\n+Enum(processor_type) String(arm920t) Value( TARGET_CPU_arm920t)\n \n EnumValue\n-Enum(processor_type) String(arm922t) Value(arm922t)\n+Enum(processor_type) String(arm922t) Value( TARGET_CPU_arm922t)\n \n EnumValue\n-Enum(processor_type) String(arm940t) Value(arm940t)\n+Enum(processor_type) String(arm940t) Value( TARGET_CPU_arm940t)\n \n EnumValue\n-Enum(processor_type) String(ep9312) Value(ep9312)\n+Enum(processor_type) String(ep9312) Value( TARGET_CPU_ep9312)\n \n EnumValue\n-Enum(processor_type) String(arm10tdmi) Value(arm10tdmi)\n+Enum(processor_type) String(arm10tdmi) Value( TARGET_CPU_arm10tdmi)\n \n EnumValue\n-Enum(processor_type) String(arm1020t) Value(arm1020t)\n+Enum(processor_type) String(arm1020t) Value( TARGET_CPU_arm1020t)\n \n EnumValue\n-Enum(processor_type) String(arm9e) Value(arm9e)\n+Enum(processor_type) String(arm9e) Value( TARGET_CPU_arm9e)\n \n EnumValue\n-Enum(processor_type) String(arm946e-s) Value(arm946es)\n+Enum(processor_type) String(arm946e-s) Value( TARGET_CPU_arm946es)\n \n EnumValue\n-Enum(processor_type) String(arm966e-s) Value(arm966es)\n+Enum(processor_type) String(arm966e-s) Value( TARGET_CPU_arm966es)\n \n EnumValue\n-Enum(processor_type) String(arm968e-s) Value(arm968es)\n+Enum(processor_type) String(arm968e-s) Value( TARGET_CPU_arm968es)\n \n EnumValue\n-Enum(processor_type) String(arm10e) Value(arm10e)\n+Enum(processor_type) String(arm10e) Value( TARGET_CPU_arm10e)\n \n EnumValue\n-Enum(processor_type) String(arm1020e) Value(arm1020e)\n+Enum(processor_type) String(arm1020e) Value( TARGET_CPU_arm1020e)\n \n EnumValue\n-Enum(processor_type) String(arm1022e) Value(arm1022e)\n+Enum(processor_type) String(arm1022e) Value( TARGET_CPU_arm1022e)\n \n EnumValue\n-Enum(processor_type) String(xscale) Value(xscale)\n+Enum(processor_type) String(xscale) Value( TARGET_CPU_xscale)\n \n EnumValue\n-Enum(processor_type) String(iwmmxt) Value(iwmmxt)\n+Enum(processor_type) String(iwmmxt) Value( TARGET_CPU_iwmmxt)\n \n EnumValue\n-Enum(processor_type) String(iwmmxt2) Value(iwmmxt2)\n+Enum(processor_type) String(iwmmxt2) Value( TARGET_CPU_iwmmxt2)\n \n EnumValue\n-Enum(processor_type) String(fa606te) Value(fa606te)\n+Enum(processor_type) String(fa606te) Value( TARGET_CPU_fa606te)\n \n EnumValue\n-Enum(processor_type) String(fa626te) Value(fa626te)\n+Enum(processor_type) String(fa626te) Value( TARGET_CPU_fa626te)\n \n EnumValue\n-Enum(processor_type) String(fmp626) Value(fmp626)\n+Enum(processor_type) String(fmp626) Value( TARGET_CPU_fmp626)\n \n EnumValue\n-Enum(processor_type) String(fa726te) Value(fa726te)\n+Enum(processor_type) String(fa726te) Value( TARGET_CPU_fa726te)\n \n EnumValue\n-Enum(processor_type) String(arm926ej-s) Value(arm926ejs)\n+Enum(processor_type) String(arm926ej-s) Value( TARGET_CPU_arm926ejs)\n \n EnumValue\n-Enum(processor_type) String(arm1026ej-s) Value(arm1026ejs)\n+Enum(processor_type) String(arm1026ej-s) Value( TARGET_CPU_arm1026ejs)\n \n EnumValue\n-Enum(processor_type) String(arm1136j-s) Value(arm1136js)\n+Enum(processor_type) String(arm1136j-s) Value( TARGET_CPU_arm1136js)\n \n EnumValue\n-Enum(processor_type) String(arm1136jf-s) Value(arm1136jfs)\n+Enum(processor_type) String(arm1136jf-s) Value( TARGET_CPU_arm1136jfs)\n \n EnumValue\n-Enum(processor_type) String(arm1176jz-s) Value(arm1176jzs)\n+Enum(processor_type) String(arm1176jz-s) Value( TARGET_CPU_arm1176jzs)\n \n EnumValue\n-Enum(processor_type) String(arm1176jzf-s) Value(arm1176jzfs)\n+Enum(processor_type) String(arm1176jzf-s) Value( TARGET_CPU_arm1176jzfs)\n \n EnumValue\n-Enum(processor_type) String(mpcorenovfp) Value(mpcorenovfp)\n+Enum(processor_type) String(mpcorenovfp) Value( TARGET_CPU_mpcorenovfp)\n \n EnumValue\n-Enum(processor_type) String(mpcore) Value(mpcore)\n+Enum(processor_type) String(mpcore) Value( TARGET_CPU_mpcore)\n \n EnumValue\n-Enum(processor_type) String(arm1156t2-s) Value(arm1156t2s)\n+Enum(processor_type) String(arm1156t2-s) Value( TARGET_CPU_arm1156t2s)\n \n EnumValue\n-Enum(processor_type) String(arm1156t2f-s) Value(arm1156t2fs)\n+Enum(processor_type) String(arm1156t2f-s) Value( TARGET_CPU_arm1156t2fs)\n \n EnumValue\n-Enum(processor_type) String(cortex-m1) Value(cortexm1)\n+Enum(processor_type) String(cortex-m1) Value( TARGET_CPU_cortexm1)\n \n EnumValue\n-Enum(processor_type) String(cortex-m0) Value(cortexm0)\n+Enum(processor_type) String(cortex-m0) Value( TARGET_CPU_cortexm0)\n \n EnumValue\n-Enum(processor_type) String(cortex-m0plus) Value(cortexm0plus)\n+Enum(processor_type) String(cortex-m0plus) Value( TARGET_CPU_cortexm0plus)\n \n EnumValue\n-Enum(processor_type) String(cortex-m1.small-multiply) Value(cortexm1smallmultiply)\n+Enum(processor_type) String(cortex-m1.small-multiply) Value( TARGET_CPU_cortexm1smallmultiply)\n \n EnumValue\n-Enum(processor_type) String(cortex-m0.small-multiply) Value(cortexm0smallmultiply)\n+Enum(processor_type) String(cortex-m0.small-multiply) Value( TARGET_CPU_cortexm0smallmultiply)\n \n EnumValue\n-Enum(processor_type) String(cortex-m0plus.small-multiply) Value(cortexm0plussmallmultiply)\n+Enum(processor_type) String(cortex-m0plus.small-multiply) Value( TARGET_CPU_cortexm0plussmallmultiply)\n \n EnumValue\n-Enum(processor_type) String(generic-armv7-a) Value(genericv7a)\n+Enum(processor_type) String(generic-armv7-a) Value( TARGET_CPU_genericv7a)\n \n EnumValue\n-Enum(processor_type) String(cortex-a5) Value(cortexa5)\n+Enum(processor_type) String(cortex-a5) Value( TARGET_CPU_cortexa5)\n \n EnumValue\n-Enum(processor_type) String(cortex-a7) Value(cortexa7)\n+Enum(processor_type) String(cortex-a7) Value( TARGET_CPU_cortexa7)\n \n EnumValue\n-Enum(processor_type) String(cortex-a8) Value(cortexa8)\n+Enum(processor_type) String(cortex-a8) Value( TARGET_CPU_cortexa8)\n \n EnumValue\n-Enum(processor_type) String(cortex-a9) Value(cortexa9)\n+Enum(processor_type) String(cortex-a9) Value( TARGET_CPU_cortexa9)\n \n EnumValue\n-Enum(processor_type) String(cortex-a12) Value(cortexa12)\n+Enum(processor_type) String(cortex-a12) Value( TARGET_CPU_cortexa12)\n \n EnumValue\n-Enum(processor_type) String(cortex-a15) Value(cortexa15)\n+Enum(processor_type) String(cortex-a15) Value( TARGET_CPU_cortexa15)\n \n EnumValue\n-Enum(processor_type) String(cortex-a17) Value(cortexa17)\n+Enum(processor_type) String(cortex-a17) Value( TARGET_CPU_cortexa17)\n \n EnumValue\n-Enum(processor_type) String(cortex-r4) Value(cortexr4)\n+Enum(processor_type) String(cortex-r4) Value( TARGET_CPU_cortexr4)\n \n EnumValue\n-Enum(processor_type) String(cortex-r4f) Value(cortexr4f)\n+Enum(processor_type) String(cortex-r4f) Value( TARGET_CPU_cortexr4f)\n \n EnumValue\n-Enum(processor_type) String(cortex-r5) Value(cortexr5)\n+Enum(processor_type) String(cortex-r5) Value( TARGET_CPU_cortexr5)\n \n EnumValue\n-Enum(processor_type) String(cortex-r7) Value(cortexr7)\n+Enum(processor_type) String(cortex-r7) Value( TARGET_CPU_cortexr7)\n \n EnumValue\n-Enum(processor_type) String(cortex-r8) Value(cortexr8)\n+Enum(processor_type) String(cortex-r8) Value( TARGET_CPU_cortexr8)\n \n EnumValue\n-Enum(processor_type) String(cortex-m7) Value(cortexm7)\n+Enum(processor_type) String(cortex-m7) Value( TARGET_CPU_cortexm7)\n \n EnumValue\n-Enum(processor_type) String(cortex-m4) Value(cortexm4)\n+Enum(processor_type) String(cortex-m4) Value( TARGET_CPU_cortexm4)\n \n EnumValue\n-Enum(processor_type) String(cortex-m3) Value(cortexm3)\n+Enum(processor_type) String(cortex-m3) Value( TARGET_CPU_cortexm3)\n \n EnumValue\n-Enum(processor_type) String(marvell-pj4) Value(marvell_pj4)\n+Enum(processor_type) String(marvell-pj4) Value( TARGET_CPU_marvell_pj4)\n \n EnumValue\n-Enum(processor_type) String(cortex-a15.cortex-a7) Value(cortexa15cortexa7)\n+Enum(processor_type) String(cortex-a15.cortex-a7) Value( TARGET_CPU_cortexa15cortexa7)\n \n EnumValue\n-Enum(processor_type) String(cortex-a17.cortex-a7) Value(cortexa17cortexa7)\n+Enum(processor_type) String(cortex-a17.cortex-a7) Value( TARGET_CPU_cortexa17cortexa7)\n \n EnumValue\n-Enum(processor_type) String(cortex-m23) Value(cortexm23)\n+Enum(processor_type) String(cortex-m23) Value( TARGET_CPU_cortexm23)\n \n EnumValue\n-Enum(processor_type) String(cortex-a32) Value(cortexa32)\n+Enum(processor_type) String(cortex-a32) Value( TARGET_CPU_cortexa32)\n \n EnumValue\n-Enum(processor_type) String(cortex-m33) Value(cortexm33)\n+Enum(processor_type) String(cortex-m33) Value( TARGET_CPU_cortexm33)\n \n EnumValue\n-Enum(processor_type) String(cortex-a35) Value(cortexa35)\n+Enum(processor_type) String(cortex-a35) Value( TARGET_CPU_cortexa35)\n \n EnumValue\n-Enum(processor_type) String(cortex-a53) Value(cortexa53)\n+Enum(processor_type) String(cortex-a53) Value( TARGET_CPU_cortexa53)\n \n EnumValue\n-Enum(processor_type) String(cortex-a57) Value(cortexa57)\n+Enum(processor_type) String(cortex-a57) Value( TARGET_CPU_cortexa57)\n \n EnumValue\n-Enum(processor_type) String(cortex-a72) Value(cortexa72)\n+Enum(processor_type) String(cortex-a72) Value( TARGET_CPU_cortexa72)\n \n EnumValue\n-Enum(processor_type) String(cortex-a73) Value(cortexa73)\n+Enum(processor_type) String(cortex-a73) Value( TARGET_CPU_cortexa73)\n \n EnumValue\n-Enum(processor_type) String(exynos-m1) Value(exynosm1)\n+Enum(processor_type) String(exynos-m1) Value( TARGET_CPU_exynosm1)\n \n EnumValue\n-Enum(processor_type) String(falkor) Value(falkor)\n+Enum(processor_type) String(falkor) Value( TARGET_CPU_falkor)\n \n EnumValue\n-Enum(processor_type) String(qdf24xx) Value(qdf24xx)\n+Enum(processor_type) String(qdf24xx) Value( TARGET_CPU_qdf24xx)\n \n EnumValue\n-Enum(processor_type) String(xgene1) Value(xgene1)\n+Enum(processor_type) String(xgene1) Value( TARGET_CPU_xgene1)\n \n EnumValue\n-Enum(processor_type) String(cortex-a57.cortex-a53) Value(cortexa57cortexa53)\n+Enum(processor_type) String(cortex-a57.cortex-a53) Value( TARGET_CPU_cortexa57cortexa53)\n \n EnumValue\n-Enum(processor_type) String(cortex-a72.cortex-a53) Value(cortexa72cortexa53)\n+Enum(processor_type) String(cortex-a72.cortex-a53) Value( TARGET_CPU_cortexa72cortexa53)\n \n EnumValue\n-Enum(processor_type) String(cortex-a73.cortex-a35) Value(cortexa73cortexa35)\n+Enum(processor_type) String(cortex-a73.cortex-a35) Value( TARGET_CPU_cortexa73cortexa35)\n \n EnumValue\n-Enum(processor_type) String(cortex-a73.cortex-a53) Value(cortexa73cortexa53)\n+Enum(processor_type) String(cortex-a73.cortex-a53) Value( TARGET_CPU_cortexa73cortexa53)\n \n Enum\n Name(arm_arch) Type(int)"}, {"sha": "239117ff7da1667c126c73dcc61536fec33f184c", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b854516cc1943199ce15a23df340a7d2d7196a56/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b854516cc1943199ce15a23df340a7d2d7196a56/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=b854516cc1943199ce15a23df340a7d2d7196a56", "patch": "@@ -754,7 +754,7 @@ extern FILE * asm_out_file;\n int making_const_table;\n \n /* The processor for which instructions should be scheduled.  */\n-enum processor_type arm_tune = arm_none;\n+enum processor_type arm_tune = TARGET_CPU_arm_none;\n \n /* The current tuning set.  */\n const struct tune_params *current_tune;\n@@ -2272,11 +2272,11 @@ static const struct processors all_cores[] =\n {\n   /* ARM Cores */\n #define ARM_CORE(NAME, X, IDENT, ARCH, FLAGS, COSTS) \\\n-  {NAME, IDENT, #ARCH, BASE_ARCH_##ARCH,\t  \\\n+  {NAME, TARGET_CPU_##IDENT, #ARCH, BASE_ARCH_##ARCH,\t  \\\n    FLAGS, &arm_##COSTS##_tune},\n #include \"arm-cores.def\"\n #undef ARM_CORE\n-  {NULL, arm_none, NULL, BASE_ARCH_0, ARM_FSET_EMPTY, NULL}\n+  {NULL, TARGET_CPU_arm_none, NULL, BASE_ARCH_0, ARM_FSET_EMPTY, NULL}\n };\n \n static const struct processors all_architectures[] =\n@@ -2286,10 +2286,10 @@ static const struct processors all_architectures[] =\n      from the core.  */\n \n #define ARM_ARCH(NAME, CORE, ARCH, FLAGS) \\\n-  {NAME, CORE, #ARCH, BASE_ARCH_##ARCH, FLAGS, NULL},\n+  {NAME, TARGET_CPU_##CORE, #ARCH, BASE_ARCH_##ARCH, FLAGS, NULL},\n #include \"arm-arches.def\"\n #undef ARM_ARCH\n-  {NULL, arm_none, NULL, BASE_ARCH_0, ARM_FSET_EMPTY, NULL}\n+  {NULL, TARGET_CPU_arm_none, NULL, BASE_ARCH_0, ARM_FSET_EMPTY, NULL}\n };\n \n \n@@ -3219,7 +3219,7 @@ arm_option_override (void)\n   arm_arch_thumb_hwdiv = ARM_FSET_HAS_CPU1 (insn_flags, FL_THUMB_DIV);\n   arm_arch_arm_hwdiv = ARM_FSET_HAS_CPU1 (insn_flags, FL_ARM_DIV);\n   arm_arch_no_volatile_ce = ARM_FSET_HAS_CPU1 (insn_flags, FL_NO_VOLATILE_CE);\n-  arm_tune_cortex_a9 = (arm_tune == cortexa9) != 0;\n+  arm_tune_cortex_a9 = (arm_tune == TARGET_CPU_cortexa9) != 0;\n   arm_arch_crc = ARM_FSET_HAS_CPU1 (insn_flags, FL_CRC32);\n   arm_m_profile_small_mul = ARM_FSET_HAS_CPU1 (insn_flags, FL_SMALLMUL);\n   arm_fp16_inst = ARM_FSET_HAS_CPU2 (insn_flags, FL2_FP16INST);\n@@ -3387,7 +3387,7 @@ arm_option_override (void)\n   /* Enable -mfix-cortex-m3-ldrd by default for Cortex-M3 cores.  */\n   if (fix_cm3_ldrd == 2)\n     {\n-      if (arm_selected_cpu->core == cortexm3)\n+      if (arm_selected_cpu->core == TARGET_CPU_cortexm3)\n \tfix_cm3_ldrd = 1;\n       else\n \tfix_cm3_ldrd = 0;\n@@ -10948,7 +10948,7 @@ arm_sched_reorder (FILE *file, int verbose, rtx_insn **ready, int *n_readyp,\n {\n   switch (arm_tune)\n     {\n-    case cortexa7:\n+    case TARGET_CPU_cortexa7:\n       cortexa7_sched_reorder (file, verbose, ready, n_readyp, clock);\n       break;\n     default:"}, {"sha": "c8d74623814884fbdbcaa7cb4546f7319dbbaac4", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b854516cc1943199ce15a23df340a7d2d7196a56/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b854516cc1943199ce15a23df340a7d2d7196a56/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=b854516cc1943199ce15a23df340a7d2d7196a56", "patch": "@@ -49,16 +49,6 @@ extern char arm_arch_name[];\n \n #include \"config/arm/arm-opts.h\"\n \n-enum target_cpus\n-{\n-#define ARM_CORE(NAME, INTERNAL_IDENT, IDENT, ARCH, FLAGS, COSTS) \\\n-  TARGET_CPU_##INTERNAL_IDENT,\n-#include \"arm-cores.def\"\n-#undef ARM_CORE\n-  /* Total number of CPUs we handle.  */\n-  TARGET_CPU_num_cores\n-};\n-\n /* The processor for which instructions should be scheduled.  */\n extern enum processor_type arm_tune;\n "}, {"sha": "0fcabb90ed291bd655ac87671a58c21dd64e2170", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b854516cc1943199ce15a23df340a7d2d7196a56/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b854516cc1943199ce15a23df340a7d2d7196a56/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=b854516cc1943199ce15a23df340a7d2d7196a56", "patch": "@@ -102,7 +102,7 @@ Target Report Mask(CALLER_INTERWORKING)\n Thumb: Assume function pointers may go to non-Thumb aware code.\n \n mcpu=\n-Target RejectNegative ToLower Joined Enum(processor_type) Var(arm_cpu_option) Init(arm_none)\n+Target RejectNegative ToLower Joined Enum(processor_type) Var(arm_cpu_option) Init(TARGET_CPU_arm_none)\n Specify the name of the target CPU.\n \n mfloat-abi=\n@@ -223,7 +223,7 @@ Target Report Mask(TPCS_LEAF_FRAME)\n Thumb: Generate (leaf) stack frames even if not needed.\n \n mtune=\n-Target RejectNegative ToLower Joined Enum(processor_type) Var(arm_tune_option) Init(arm_none)\n+Target RejectNegative ToLower Joined Enum(processor_type) Var(arm_tune_option) Init(TARGET_CPU_arm_none)\n Tune code for the given processor.\n \n mprint-tune-info"}, {"sha": "82e5436d902b9f79dde797ddfbbe27d27112673c", "filename": "gcc/config/arm/genopt.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b854516cc1943199ce15a23df340a7d2d7196a56/gcc%2Fconfig%2Farm%2Fgenopt.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b854516cc1943199ce15a23df340a7d2d7196a56/gcc%2Fconfig%2Farm%2Fgenopt.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fgenopt.sh?ref=b854516cc1943199ce15a23df340a7d2d7196a56", "patch": "@@ -52,7 +52,7 @@ awk -F'[(, \t]+' '/^ARM_CORE/ {\n     enum = $3\n     gsub(\"\\\"\", \"\", name)\n     print \"EnumValue\"\n-    print \"Enum(processor_type) String(\" name \") Value(\" enum \")\"\n+    print \"Enum(processor_type) String(\" name \") Value( TARGET_CPU_\" enum \")\"\n     print \"\"\n }' $1/arm-cores.def\n "}, {"sha": "2051f1018f1cbff9c5bf044e71304d78e615458e", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b854516cc1943199ce15a23df340a7d2d7196a56/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b854516cc1943199ce15a23df340a7d2d7196a56/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=b854516cc1943199ce15a23df340a7d2d7196a56", "patch": "@@ -306,7 +306,7 @@\n (define_insn \"*movdi_vfp\"\n   [(set (match_operand:DI 0 \"nonimmediate_di_operand\" \"=r,r,r,r,q,q,m,w,r,w,w, Uv\")\n        (match_operand:DI 1 \"di_operand\"              \"r,rDa,Db,Dc,mi,mi,q,r,w,w,Uvi,w\"))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && arm_tune != cortexa8\n+  \"TARGET_32BIT && TARGET_HARD_FLOAT && arm_tune != TARGET_CPU_cortexa8\n    && (   register_operand (operands[0], DImode)\n        || register_operand (operands[1], DImode))\n    && !(TARGET_NEON && CONST_INT_P (operands[1])\n@@ -357,7 +357,7 @@\n (define_insn \"*movdi_vfp_cortexa8\"\n   [(set (match_operand:DI 0 \"nonimmediate_di_operand\" \"=r,r,r,r,r,r,m,w,!r,w,w, Uv\")\n        (match_operand:DI 1 \"di_operand\"              \"r,rDa,Db,Dc,mi,mi,r,r,w,w,Uvi,w\"))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && arm_tune == cortexa8\n+  \"TARGET_32BIT && TARGET_HARD_FLOAT && arm_tune == TARGET_CPU_cortexa8\n     && (   register_operand (operands[0], DImode)\n         || register_operand (operands[1], DImode))\n     && !(TARGET_NEON && CONST_INT_P (operands[1])"}]}