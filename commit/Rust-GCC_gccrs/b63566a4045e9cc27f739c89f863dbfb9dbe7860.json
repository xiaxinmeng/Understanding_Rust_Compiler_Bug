{"sha": "b63566a4045e9cc27f739c89f863dbfb9dbe7860", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYzNTY2YTQwNDVlOWNjMjdmNzM5Yzg5Zjg2M2RiZmI5ZGJlNzg2MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-11-05T23:53:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-11-05T23:53:53Z"}, "message": "Fix conversions for built-in operator overloading candidates.\n\nWhile working on C++20 operator<=>, I noticed that build_new_op_1 was doing\ntoo much conversion when a built-in candidate was selected; the standard\nsays it should only perform user-defined conversions, and then leave the\nnormal operator semantics to handle any standard conversions.  This is\nimportant for operator<=> because a comparison of two different unscoped\nenums is ill-formed; if we promote the enums to int here, cp_build_binary_op\nnever gets to see the original operand types, so we can't give the error.\n\nI'm also disabling -Wmaybe-uninitialized for expmed.c to avoid the bootstrap\nfailure from the last time I applied this patch.\n\n\t* call.c (build_new_op_1): Don't apply any standard conversions to\n\tthe operands of a built-in operator.  Don't suppress conversions in\n\tcp_build_unary_op.\n\t* typeck.c (cp_build_unary_op): Do integral promotions for enums.\n\n\tPR tree-optimization/91825\n\t* expmed.c: Reduce -Wmaybe-uninitialized to warning.\n\nFrom-SVN: r277864", "tree": {"sha": "58847b80e23df24201c3f3e8327814203bd625f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58847b80e23df24201c3f3e8327814203bd625f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b63566a4045e9cc27f739c89f863dbfb9dbe7860", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b63566a4045e9cc27f739c89f863dbfb9dbe7860", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b63566a4045e9cc27f739c89f863dbfb9dbe7860", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b63566a4045e9cc27f739c89f863dbfb9dbe7860/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6fda5f4981f1d249813c124576b037b12f6e8a61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fda5f4981f1d249813c124576b037b12f6e8a61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fda5f4981f1d249813c124576b037b12f6e8a61"}], "stats": {"total": 69, "additions": 41, "deletions": 28}, "files": [{"sha": "8ee23dd5986befbc054c8d53801e098003510449", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b63566a4045e9cc27f739c89f863dbfb9dbe7860/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b63566a4045e9cc27f739c89f863dbfb9dbe7860/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b63566a4045e9cc27f739c89f863dbfb9dbe7860", "patch": "@@ -1,3 +1,8 @@\n+2019-10-26  Jason Merrill  <jason@redhat.com>\n+\n+\tPR tree-optimization/91825\n+\t* expmed.c: Reduce -Wmaybe-uninitialized to warning.\n+\n 2019-11-05  Jim Wilson  <jimw@sifive.com>\n \n \tPR middle-end/92263"}, {"sha": "560896a1dd8154b6968b182b57f88764a85701ad", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b63566a4045e9cc27f739c89f863dbfb9dbe7860/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b63566a4045e9cc27f739c89f863dbfb9dbe7860/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b63566a4045e9cc27f739c89f863dbfb9dbe7860", "patch": "@@ -1,3 +1,10 @@\n+2019-09-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.c (build_new_op_1): Don't apply any standard conversions to\n+\tthe operands of a built-in operator.  Don't suppress conversions in\n+\tcp_build_unary_op.\n+\t* typeck.c (cp_build_unary_op): Do integral promotions for enums.\n+\n 2019-11-04  Jason Merrill  <jason@redhat.com>\n \n \tUse vec instead of raw array for built-in candidates."}, {"sha": "390a4c581e2c922f587b80a3db9973cbd8f6314f", "filename": "gcc/cp/call.c", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b63566a4045e9cc27f739c89f863dbfb9dbe7860/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b63566a4045e9cc27f739c89f863dbfb9dbe7860/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=b63566a4045e9cc27f739c89f863dbfb9dbe7860", "patch": "@@ -6156,41 +6156,40 @@ build_new_op_1 (const op_location_t &loc, enum tree_code code, int flags,\n \t      break;\n \t    }\n \n-\t  /* We need to strip any leading REF_BIND so that bitfields\n-\t     don't cause errors.  This should not remove any important\n-\t     conversions, because builtins don't apply to class\n-\t     objects directly.  */\n+\t  /* \"If a built-in candidate is selected by overload resolution, the\n+\t     operands of class type are converted to the types of the\n+\t     corresponding parameters of the selected operation function,\n+\t     except that the second standard conversion sequence of a\n+\t     user-defined conversion sequence (12.3.3.1.2) is not applied.\"  */\n \t  conv = cand->convs[0];\n-\t  if (conv->kind == ck_ref_bind)\n-\t    conv = next_conversion (conv);\n-\t  arg1 = convert_like (conv, arg1, complain);\n+\t  if (conv->user_conv_p)\n+\t    {\n+\t      while (conv->kind != ck_user)\n+\t\tconv = next_conversion (conv);\n+\t      arg1 = convert_like (conv, arg1, complain);\n+\t    }\n \n \t  if (arg2)\n \t    {\n \t      conv = cand->convs[1];\n-\t      if (conv->kind == ck_ref_bind)\n-\t\tconv = next_conversion (conv);\n-\t      else\n-\t\targ2 = decay_conversion (arg2, complain);\n-\n-\t      /* We need to call warn_logical_operator before\n-\t\t converting arg2 to a boolean_type, but after\n-\t\t decaying an enumerator to its value.  */\n-\t      if (complain & tf_warning)\n-\t\twarn_logical_operator (loc, code, boolean_type_node,\n-\t\t\t\t       code_orig_arg1, arg1,\n-\t\t\t\t       code_orig_arg2, arg2);\n-\n-\t      arg2 = convert_like (conv, arg2, complain);\n+\t      if (conv->user_conv_p)\n+\t\t{\n+\t\t  while (conv->kind != ck_user)\n+\t\t    conv = next_conversion (conv);\n+\t\t  arg2 = convert_like (conv, arg2, complain);\n+\t\t}\n \t    }\n+\n \t  if (arg3)\n \t    {\n \t      conv = cand->convs[2];\n-\t      if (conv->kind == ck_ref_bind)\n-\t\tconv = next_conversion (conv);\n-\t      convert_like (conv, arg3, complain);\n+\t      if (conv->user_conv_p)\n+\t\t{\n+\t\t  while (conv->kind != ck_user)\n+\t\t    conv = next_conversion (conv);\n+\t\t  arg3 = convert_like (conv, arg3, complain);\n+\t\t}\n \t    }\n-\n \t}\n     }\n \n@@ -6258,7 +6257,7 @@ build_new_op_1 (const op_location_t &loc, enum tree_code code, int flags,\n     case REALPART_EXPR:\n     case IMAGPART_EXPR:\n     case ABS_EXPR:\n-      return cp_build_unary_op (code, arg1, candidates != 0, complain);\n+      return cp_build_unary_op (code, arg1, false, complain);\n \n     case ARRAY_REF:\n       return cp_build_array_ref (input_location, arg1, arg2, complain);"}, {"sha": "50240537938aef00086bd3832727503ffdfe9a72", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b63566a4045e9cc27f739c89f863dbfb9dbe7860/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b63566a4045e9cc27f739c89f863dbfb9dbe7860/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b63566a4045e9cc27f739c89f863dbfb9dbe7860", "patch": "@@ -6298,7 +6298,7 @@ cp_build_unary_op (enum tree_code code, tree xarg, bool noconvert,\n \t\t       : _(\"wrong type argument to unary plus\"));\n \telse\n \t  {\n-\t    if (!noconvert && CP_INTEGRAL_TYPE_P (TREE_TYPE (arg)))\n+\t    if (!noconvert && INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (arg)))\n \t      arg = cp_perform_integral_promotions (arg, complain);\n \n \t    /* Make sure the result is not an lvalue: a unary plus or minus\n@@ -6323,7 +6323,7 @@ cp_build_unary_op (enum tree_code code, tree xarg, bool noconvert,\n \t\t\t\t\t\t   | WANT_VECTOR_OR_COMPLEX,\n \t\t\t\t\t\t   arg, true)))\n \terrstring = _(\"wrong type argument to bit-complement\");\n-      else if (!noconvert && CP_INTEGRAL_TYPE_P (TREE_TYPE (arg)))\n+      else if (!noconvert && INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (arg)))\n \t{\n \t  /* Warn if the expression has boolean value.  */\n \t  if (TREE_CODE (TREE_TYPE (arg)) == BOOLEAN_TYPE"}, {"sha": "ff8554b156202c2e1f95644d3628f928bdcaacc8", "filename": "gcc/expmed.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b63566a4045e9cc27f739c89f863dbfb9dbe7860/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b63566a4045e9cc27f739c89f863dbfb9dbe7860/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=b63566a4045e9cc27f739c89f863dbfb9dbe7860", "patch": "@@ -18,6 +18,8 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n+/* Work around tree-optimization/91825.  */\n+#pragma GCC diagnostic warning \"-Wmaybe-uninitialized\"\n \n #include \"config.h\"\n #include \"system.h\""}]}