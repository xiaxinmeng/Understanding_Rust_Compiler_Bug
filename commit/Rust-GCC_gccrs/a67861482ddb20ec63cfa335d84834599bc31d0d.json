{"sha": "a67861482ddb20ec63cfa335d84834599bc31d0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY3ODYxNDgyZGRiMjBlYzYzY2ZhMzM1ZDg0ODM0NTk5YmMzMWQwZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-01-16T20:22:56Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-01-16T20:22:56Z"}, "message": "init.c (construct_virtual_bases): Don't look up the addresses of virtual bases at run-time.\n\n\t* init.c (construct_virtual_bases): Don't look up the addresses of\n\tvirtual bases at run-time.\n\nFrom-SVN: r31447", "tree": {"sha": "eb0931eb730bc4c5715922991b43492dec2c7c25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb0931eb730bc4c5715922991b43492dec2c7c25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a67861482ddb20ec63cfa335d84834599bc31d0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a67861482ddb20ec63cfa335d84834599bc31d0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a67861482ddb20ec63cfa335d84834599bc31d0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a67861482ddb20ec63cfa335d84834599bc31d0d/comments", "author": null, "committer": null, "parents": [{"sha": "31fcb1b9a976c1562de7f45dba8109359f8939be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31fcb1b9a976c1562de7f45dba8109359f8939be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31fcb1b9a976c1562de7f45dba8109359f8939be"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "a8d7922bc6c1d6bf17d7c0fe03589ab676592bb3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a67861482ddb20ec63cfa335d84834599bc31d0d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a67861482ddb20ec63cfa335d84834599bc31d0d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a67861482ddb20ec63cfa335d84834599bc31d0d", "patch": "@@ -1,5 +1,8 @@\n 2000-01-16  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* init.c (construct_virtual_bases): Don't look up the addresses of\n+\tvirtual bases at run-time.\n+\n \t* class.c (build_vbase_pointer): Relocate.\n \t(build_vbase_pointer_fields): Likewise.\n \t(dfs_build_vbase_offset_vtbl_entries): Likewise."}, {"sha": "3828ddf499bef0320865e434b4d12451aa1e0bab", "filename": "gcc/cp/init.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a67861482ddb20ec63cfa335d84834599bc31d0d/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a67861482ddb20ec63cfa335d84834599bc31d0d/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=a67861482ddb20ec63cfa335d84834599bc31d0d", "patch": "@@ -751,9 +751,9 @@ construct_virtual_bases (type, this_ref, this_ptr, init_list, flag)\n   for (vbases = CLASSTYPE_VBASECLASSES (type); vbases;\n        vbases = TREE_CHAIN (vbases))\n     {\n-      tree tmp = purpose_member (vbases, result);\n       tree inner_if_stmt;\n       tree compound_stmt;\n+      tree exp;\n \n       /* If there are virtual base classes with destructors, we need to\n \t emit cleanups to destroy them if an exception is thrown during\n@@ -772,9 +772,20 @@ construct_virtual_bases (type, this_ref, this_ptr, init_list, flag)\n       inner_if_stmt = begin_if_stmt ();\n       finish_if_stmt_cond (flag, inner_if_stmt);\n       compound_stmt = begin_compound_stmt (/*has_no_scope=*/1);\n-      expand_aggr_vbase_init_1 (vbases, this_ref,\n-\t\t\t\tTREE_OPERAND (TREE_VALUE (tmp), 0),\n-\t\t\t\tinit_list);\n+\n+      /* Compute the location of the virtual base.  If we're\n+\t constructing virtual bases, then we must be the most derived\n+\t class.  Therefore, we don't have to look up the virtual base;\n+\t we already know where it is.  */\n+      exp = build (PLUS_EXPR,\n+\t\t   TREE_TYPE (this_ptr),\n+\t\t   this_ptr,\n+\t\t   BINFO_OFFSET (vbases));\n+      exp = build1 (NOP_EXPR, \n+\t\t    build_pointer_type (BINFO_TYPE (vbases)), \n+\t\t    exp);\n+\n+      expand_aggr_vbase_init_1 (vbases, this_ref, exp, init_list);\n       finish_compound_stmt (/*has_no_scope=*/1, compound_stmt);\n       finish_then_clause (inner_if_stmt);\n       finish_if_stmt ();"}]}