{"sha": "d34cd27401917a9b85e7ad5ac2cbca62bbc458cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM0Y2QyNzQwMTkxN2E5Yjg1ZTdhZDVhYzJjYmNhNjJiYmM0NThjYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-05T14:03:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-05T14:03:20Z"}, "message": "[multiple changes]\n\n2011-08-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Analyze_Formal_Package_Declaration): reject a formal\n\tpackage whose name is the same as that of the generic unit, or its\n\tultimate prefix.\n\n2011-08-05  Bob Duff  <duff@adacore.com>\n\n\t* a-fihema.adb, a-fihema.ads: Minor comment improvements.\n\t* sem_ch3.adb, exp_ch5.adb, exp_ch7.adb, exp_ch7.ads, exp_util.adb:\n\tMinor comment fixes.\n\nFrom-SVN: r177438", "tree": {"sha": "59e5eaa3e69c23c804364476e0c94f343e6baebd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59e5eaa3e69c23c804364476e0c94f343e6baebd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d34cd27401917a9b85e7ad5ac2cbca62bbc458cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d34cd27401917a9b85e7ad5ac2cbca62bbc458cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d34cd27401917a9b85e7ad5ac2cbca62bbc458cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d34cd27401917a9b85e7ad5ac2cbca62bbc458cc/comments", "author": null, "committer": null, "parents": [{"sha": "00332244ee74e60f4d7a54db20839c3a35b07588", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00332244ee74e60f4d7a54db20839c3a35b07588", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00332244ee74e60f4d7a54db20839c3a35b07588"}], "stats": {"total": 101, "additions": 73, "deletions": 28}, "files": [{"sha": "da95e8c5a48a4965eb04f03fd2369a1e5d002da3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34cd27401917a9b85e7ad5ac2cbca62bbc458cc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34cd27401917a9b85e7ad5ac2cbca62bbc458cc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d34cd27401917a9b85e7ad5ac2cbca62bbc458cc", "patch": "@@ -1,3 +1,15 @@\n+2011-08-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Analyze_Formal_Package_Declaration): reject a formal\n+\tpackage whose name is the same as that of the generic unit, or its\n+\tultimate prefix.\n+\n+2011-08-05  Bob Duff  <duff@adacore.com>\n+\n+\t* a-fihema.adb, a-fihema.ads: Minor comment improvements.\n+\t* sem_ch3.adb, exp_ch5.adb, exp_ch7.adb, exp_ch7.ads, exp_util.adb:\n+\tMinor comment fixes.\n+\n 2011-08-05  Arnaud Charlet  <charlet@adacore.com>\n \n \t* make.adb (Linking_Phase): No longer need to set source search path"}, {"sha": "9faa9a1b8319ef55afc2402ca2a61206e6cfa28e", "filename": "gcc/ada/a-fihema.adb", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34cd27401917a9b85e7ad5ac2cbca62bbc458cc/gcc%2Fada%2Fa-fihema.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34cd27401917a9b85e7ad5ac2cbca62bbc458cc/gcc%2Fada%2Fa-fihema.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-fihema.adb?ref=d34cd27401917a9b85e7ad5ac2cbca62bbc458cc", "patch": "@@ -43,8 +43,13 @@ with System.Storage_Pools;    use System.Storage_Pools;\n package body Ada.Finalization.Heap_Management is\n \n    Header_Size   : constant Storage_Count  := Node'Size / Storage_Unit;\n+   --  Size of the header in bytes. Added to Storage_Size requested by\n+   --  Allocate/Deallocate to determine the Storage_Size passed to the\n+   --  underlying pool.\n+\n    Header_Offset : constant Storage_Offset := Header_Size;\n-   --  Comments needed???\n+   --  Offset from the header to the actual object. Used to get from the\n+   --  address of a header to the address of the actual object, and vice-versa.\n \n    function Address_To_Node_Ptr is\n      new Ada.Unchecked_Conversion (Address, Node_Ptr);\n@@ -81,7 +86,7 @@ package body Ada.Finalization.Heap_Management is\n       Needs_Header : Boolean := True)\n    is\n    begin\n-      --  Allocation of a controlled object\n+      --  Allocation of an object with controlled parts\n \n       if Needs_Header then\n \n@@ -99,7 +104,8 @@ package body Ada.Finalization.Heap_Management is\n          begin\n             --  Use the underlying pool to allocate enough space for the object\n             --  and the list header. The returned address points to the list\n-            --  header.\n+            --  header. If locking is necessary, it will be done by the\n+            --  underlying pool.\n \n             Allocate\n               (Collection.Base_Pool.all,\n@@ -174,7 +180,7 @@ package body Ada.Finalization.Heap_Management is\n       Has_Header   : Boolean := True)\n    is\n    begin\n-      --  Deallocation of a controlled object\n+      --  Deallocation of an object with controlled parts\n \n       if Has_Header then\n          declare\n@@ -246,7 +252,7 @@ package body Ada.Finalization.Heap_Management is\n      (Collection : in out Finalization_Collection)\n    is\n       function Head (L : Node_Ptr) return Node_Ptr;\n-      --  Return the node which comes after the dummy head\n+      --  Return the node that comes after the dummy head\n \n       function Is_Dummy_Head (N : Node_Ptr) return Boolean;\n       --  Determine whether a node acts as a dummy head. Such nodes do not\n@@ -310,9 +316,10 @@ package body Ada.Finalization.Heap_Management is\n    --  Start of processing for Finalize\n \n    begin\n-      --  Lock the collection to prevent any allocations while the objects are\n-      --  being finalized. The collection remains locked because the associated\n-      --  access type is about to go out of scope.\n+      --  Set Finalization_Started to prevent any allocations of objects with\n+      --  controlled parts during finalization. The associated access type is\n+      --  about to go out of scope; Finalization_Started is never again\n+      --  modified.\n \n       Collection.Finalization_Started := True;\n \n@@ -457,8 +464,8 @@ package body Ada.Finalization.Heap_Management is\n             end if;\n          end if;\n \n-         --  The current element points back to null. This should never happen\n-         --  since the list is circular.\n+         --  The current element is null. This should never happen since the\n+         --  list is circular.\n \n          if N_Ptr.Prev = null then\n             Put_Line (\"null (ERROR)\");\n@@ -468,7 +475,7 @@ package body Ada.Finalization.Heap_Management is\n          elsif N_Ptr.Prev.Next = N_Ptr then\n             Put_Line (\"^\");\n \n-         --  The current element points back to an erroneous element\n+         --  The current element points to an erroneous element\n \n          else\n             Put_Line (\"? (ERROR)\");"}, {"sha": "c5273c35b64581e4e37d16d485a1bdf2396338da", "filename": "gcc/ada/a-fihema.ads", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34cd27401917a9b85e7ad5ac2cbca62bbc458cc/gcc%2Fada%2Fa-fihema.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34cd27401917a9b85e7ad5ac2cbca62bbc458cc/gcc%2Fada%2Fa-fihema.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-fihema.ads?ref=d34cd27401917a9b85e7ad5ac2cbca62bbc458cc", "patch": "@@ -69,8 +69,8 @@ package Ada.Finalization.Heap_Management is\n       Needs_Header : Boolean := True);\n    --  Allocate a chunk of memory described by Storage_Size and Alignment on\n    --  Collection's underlying storage pool. Return the address of the chunk.\n-   --  The routine creates a list header which precedes the chunk of memory is\n-   --  flag Needs_Header is set. If allocated, the header is attached to the\n+   --  The routine creates a list header which precedes the chunk of memory if\n+   --  Needs_Header is True. If allocated, the header is attached to the\n    --  Collection's objects. The interface to this routine is provided by\n    --  Build_Allocate_Deallocate_Proc.\n \n@@ -92,12 +92,12 @@ package Ada.Finalization.Heap_Management is\n \n    overriding procedure Finalize\n      (Collection : in out Finalization_Collection);\n-   --  Traverse the objects of Collection, invoking Finalize_Address on eanch\n-   --  of them. In the end, the routine destroys its dummy head and tail.\n+   --  Traverse the objects of Collection, invoking Finalize_Address on each of\n+   --  them. In the end, the routine destroys its dummy head and tail.\n \n    overriding procedure Initialize\n      (Collection : in out Finalization_Collection);\n-   --  Create a new Collection by allocating a dummy head and tal\n+   --  Create a new Collection by allocating a dummy head and tail\n \n    procedure Set_Finalize_Address_Ptr\n      (Collection : in out Finalization_Collection;\n@@ -125,22 +125,25 @@ private\n      new Ada.Finalization.Limited_Controlled with\n    record\n       Base_Pool : Any_Storage_Pool_Ptr;\n-      --  All objects and node headers are allocated on this underlying pool,\n+      --  All objects and node headers are allocated on this underlying pool;\n       --  the collection is simply a wrapper around it.\n \n       Objects : Node_Ptr;\n       --  The head of a doubly linked list\n \n       Finalize_Address : Finalize_Address_Ptr;\n-      --  A reference to a routine which finalizes an object denoted by its\n+      --  A reference to a routine that finalizes an object denoted by its\n       --  address. The collection must be homogeneous since the same routine\n       --  will be invoked for every allocated object when the pool is\n       --  finalized.\n \n       Finalization_Started : Boolean := False;\n-      --  When the finalization of a collection takes place, any allocations on\n-      --  the same collection are prohibited and the action must raise Program_\n-      --  Error.\n+      pragma Atomic (Finalization_Started);\n+      --  When the finalization of a collection takes place, any allocations of\n+      --  objects with controlled or protected parts on the same collection are\n+      --  prohibited and the action must raise Program_Error. This needs to be\n+      --  atomic, because it is accessed without Lock_Task/Unlock_Task. See\n+      --  RM-4.8(10.2/2).\n    end record;\n \n    procedure pcol (Collection : Finalization_Collection);"}, {"sha": "165f9ae8a0977876c1eca23a397a083a1bf9d270", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34cd27401917a9b85e7ad5ac2cbca62bbc458cc/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34cd27401917a9b85e7ad5ac2cbca62bbc458cc/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=d34cd27401917a9b85e7ad5ac2cbca62bbc458cc", "patch": "@@ -2923,7 +2923,7 @@ package body Exp_Ch5 is\n                   --    declare\n                   --       Id : Element_Type := Pack.Element (Cursor);\n                   --    begin\n-                  --       <original loop statments>\n+                  --       <original loop statements>\n                   --    end;\n \n                   Stats := New_List ("}, {"sha": "0d81df24be7cba8bbbc3fae679cfe0e2f82c1b58", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34cd27401917a9b85e7ad5ac2cbca62bbc458cc/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34cd27401917a9b85e7ad5ac2cbca62bbc458cc/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=d34cd27401917a9b85e7ad5ac2cbca62bbc458cc", "patch": "@@ -1138,7 +1138,7 @@ package body Exp_Ch7 is\n \n       Jump_Alts : List_Id := No_List;\n       --  Jump block alternatives. Depending on the value of the state counter,\n-      --  the control flow jumps to a sequence of finalization statments. This\n+      --  the control flow jumps to a sequence of finalization statements. This\n       --  list contains the following:\n       --\n       --     when <counter value> =>\n@@ -4623,6 +4623,8 @@ package body Exp_Ch7 is\n      (Obj_Ref : Node_Id;\n       Ptr_Typ : Entity_Id) return Node_Id\n    is\n+      pragma Assert (VM_Target /= No_VM);\n+\n       Loc : constant Source_Ptr := Sloc (Obj_Ref);\n    begin\n       return"}, {"sha": "bcc5526897a252422cf4fc8821513306802f0b4a", "filename": "gcc/ada/exp_ch7.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34cd27401917a9b85e7ad5ac2cbca62bbc458cc/gcc%2Fada%2Fexp_ch7.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34cd27401917a9b85e7ad5ac2cbca62bbc458cc/gcc%2Fada%2Fexp_ch7.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.ads?ref=d34cd27401917a9b85e7ad5ac2cbca62bbc458cc", "patch": "@@ -122,10 +122,11 @@ package Exp_Ch7 is\n      (Obj_Ref : Node_Id;\n       Ptr_Typ : Entity_Id) return Node_Id;\n    --  Create a call to prepend an object to a finalization collection. Obj_Ref\n-   --  is the object, Ptr_Typ is the access type that owns the collection.\n+   --  is the object, Ptr_Typ is the access type that owns the collection. This\n+   --  is used only for .NET/JVM, that is, when VM_Target /= No_VM.\n    --  Generate the following:\n    --\n-   --    Ada.Finalization.Heap_Managment.Attach\n+   --    Ada.Finalization.Heap_Management.Attach\n    --      (<Ptr_Typ>FC,\n    --       System.Finalization_Root.Root_Controlled_Ptr (Obj_Ref));\n "}, {"sha": "07cc44c8d4875d054741f4373397c9980bab3b4b", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34cd27401917a9b85e7ad5ac2cbca62bbc458cc/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34cd27401917a9b85e7ad5ac2cbca62bbc458cc/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=d34cd27401917a9b85e7ad5ac2cbca62bbc458cc", "patch": "@@ -418,7 +418,7 @@ package body Exp_Util is\n       if not Needs_Finalization (Desig_Typ) then\n          return;\n \n-      --  The allocator or free statmenet has already been expanded and already\n+      --  The allocator or free statement has already been expanded and already\n       --  has a custom Allocate / Deallocate routine.\n \n       elsif Nkind (Expr) = N_Allocator"}, {"sha": "8e45449c81a2d7b39cc08fbf5d4478d624a77569", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34cd27401917a9b85e7ad5ac2cbca62bbc458cc/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34cd27401917a9b85e7ad5ac2cbca62bbc458cc/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=d34cd27401917a9b85e7ad5ac2cbca62bbc458cc", "patch": "@@ -2124,7 +2124,7 @@ package body Sem_Ch12 is\n          return Pack_Decl;\n       end Build_Local_Package;\n \n-   --  Start of processing for Analyze_Formal_Package\n+   --  Start of processing for Analyze_Formal_Package_Declaration\n \n    begin\n       Text_IO_Kludge (Gen_Id);\n@@ -2182,6 +2182,25 @@ package body Sem_Ch12 is\n          end if;\n       end if;\n \n+      --  Check that name of formal package does not hide name of generic,\n+      --  or its leading prefix. This check must be done separately because\n+      --  the name of the generic has already been analyzed.\n+\n+      declare\n+         Gen_Name : Entity_Id;\n+\n+      begin\n+         Gen_Name := Gen_Id;\n+         while Nkind (Gen_Name) = N_Expanded_Name loop\n+            Gen_Name := Prefix (Gen_Name);\n+         end loop;\n+         if Chars (Gen_Name) = Chars (Pack_Id) then\n+            Error_Msg_NE\n+             (\"& is hidden within declaration of formal package\",\n+               Gen_Id, Gen_Name);\n+         end if;\n+      end;\n+\n       if Box_Present (N)\n         or else No (Generic_Associations (N))\n         or else Nkind (First (Generic_Associations (N))) = N_Others_Choice"}, {"sha": "459cb1b21746b42b7bcede70a56159465ce6a62e", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34cd27401917a9b85e7ad5ac2cbca62bbc458cc/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34cd27401917a9b85e7ad5ac2cbca62bbc458cc/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=d34cd27401917a9b85e7ad5ac2cbca62bbc458cc", "patch": "@@ -17382,7 +17382,8 @@ package body Sem_Ch3 is\n \n          --  GNAT allow its own definition of Limited_Controlled to disobey\n          --  this rule in order in ease the implementation. This test is safe\n-         --  because Root_Controlled is defined in a private system child.\n+         --  because Root_Controlled is defined in a child of System that\n+         --  normal programs are not supposed to use.\n \n          elsif Is_RTE (Etype (Full_T), RE_Root_Controlled) then\n             Set_Is_Limited_Composite (Full_T);"}]}