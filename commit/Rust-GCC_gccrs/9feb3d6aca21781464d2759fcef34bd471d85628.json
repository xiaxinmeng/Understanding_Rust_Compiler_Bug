{"sha": "9feb3d6aca21781464d2759fcef34bd471d85628", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZlYjNkNmFjYTIxNzgxNDY0ZDI3NTlmY2VmMzRiZDQ3MWQ4NTYyOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-05-16T02:27:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-05-16T02:27:02Z"}, "message": "c.opt: Add -fnothrow-opt.\n\ngcc:\n\t* c.opt: Add -fnothrow-opt.\ngcc/cp:\n\t* cp-tree.h (TYPE_NOEXCEPT_P): New macro.\n\t* except.c (begin_eh_spec_block): Use MUST_NOT_THROW_EXPR if\n\tTYPE_NOEXCEPT_P.\n\t(finish_eh_spec_block): Adjust.\n\nFrom-SVN: r159450", "tree": {"sha": "699ab721514cf76b302460b68157f29fee95d298", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/699ab721514cf76b302460b68157f29fee95d298"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9feb3d6aca21781464d2759fcef34bd471d85628", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9feb3d6aca21781464d2759fcef34bd471d85628", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9feb3d6aca21781464d2759fcef34bd471d85628", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9feb3d6aca21781464d2759fcef34bd471d85628/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e05e5c083b711a62699bb6c1f41b476bd257f709", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e05e5c083b711a62699bb6c1f41b476bd257f709", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e05e5c083b711a62699bb6c1f41b476bd257f709"}], "stats": {"total": 100, "additions": 95, "deletions": 5}, "files": [{"sha": "93808836514c033d130e6c87ecd28c9fe8b55186", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9feb3d6aca21781464d2759fcef34bd471d85628/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9feb3d6aca21781464d2759fcef34bd471d85628/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9feb3d6aca21781464d2759fcef34bd471d85628", "patch": "@@ -1,3 +1,7 @@\n+2010-05-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* c.opt: Add -fnothrow-opt.\n+\n 2010-05-15  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-prop.c (ipa_prop_read_section): Add sanity check that node is analyzed."}, {"sha": "01d6428ea6aedff217c9d54b0b290caeaecea40d", "filename": "gcc/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9feb3d6aca21781464d2759fcef34bd471d85628/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9feb3d6aca21781464d2759fcef34bd471d85628/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=9feb3d6aca21781464d2759fcef34bd471d85628", "patch": "@@ -689,6 +689,10 @@ C++ ObjC++\n fnonnull-objects\n C++ ObjC++\n \n+fnothrow-opt\n+C++ ObjC++ Optimization Var(flag_nothrow_opt)\n+Treat a throw() exception specification as noexcept to improve code size\n+\n ; Generate special '- .cxx_construct' and '- .cxx_destruct' methods\n ; to initialize any non-POD ivars in Objective-C++ classes.\n fobjc-call-cxx-cdtors"}, {"sha": "84b8ae53350874b9f08f89b3af9540154139bc2b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9feb3d6aca21781464d2759fcef34bd471d85628/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9feb3d6aca21781464d2759fcef34bd471d85628/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9feb3d6aca21781464d2759fcef34bd471d85628", "patch": "@@ -1,3 +1,10 @@\n+2010-05-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-tree.h (TYPE_NOEXCEPT_P): New macro.\n+\t* except.c (begin_eh_spec_block): Use MUST_NOT_THROW_EXPR if\n+\tTYPE_NOEXCEPT_P.\n+\t(finish_eh_spec_block): Adjust.\n+\n 2010-05-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/44148"}, {"sha": "361a6f26b374642eac6dfd453645654a939f3bc5", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9feb3d6aca21781464d2759fcef34bd471d85628/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9feb3d6aca21781464d2759fcef34bd471d85628/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9feb3d6aca21781464d2759fcef34bd471d85628", "patch": "@@ -1741,6 +1741,12 @@ struct GTY(()) lang_type {\n   (TYPE_RAISES_EXCEPTIONS (NODE) \\\n    && TREE_VALUE (TYPE_RAISES_EXCEPTIONS (NODE)) == NULL_TREE)\n \n+/* For FUNCTION_TYPE or METHOD_TYPE, true if NODE is noexcept.  This is the\n+   case for things declared noexcept(true) and, with -fnothrow-opt, for\n+   throw() functions.  */\n+#define TYPE_NOEXCEPT_P(NODE) \\\n+  (flag_nothrow_opt && TYPE_NOTHROW_P(NODE))\n+\n /* The binding level associated with the namespace.  */\n #define NAMESPACE_LEVEL(NODE) \\\n   (LANG_DECL_NS_CHECK (NODE)->level)"}, {"sha": "c0867ef66565f50efb7644cc795b8621f4ffa5d7", "filename": "gcc/cp/except.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9feb3d6aca21781464d2759fcef34bd471d85628/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9feb3d6aca21781464d2759fcef34bd471d85628/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=9feb3d6aca21781464d2759fcef34bd471d85628", "patch": "@@ -513,9 +513,18 @@ expand_end_catch_block (void)\n tree\n begin_eh_spec_block (void)\n {\n-  tree r = build_stmt (input_location, EH_SPEC_BLOCK, NULL_TREE, NULL_TREE);\n+  tree r;\n+  /* A noexcept specification (or throw() with -fnothrow-opt) is a\n+     MUST_NOT_THROW_EXPR.  */\n+  if (TYPE_NOEXCEPT_P (TREE_TYPE (current_function_decl)))\n+    {\n+      r = build_stmt (input_location, MUST_NOT_THROW_EXPR, NULL_TREE);\n+      TREE_SIDE_EFFECTS (r) = 1;\n+    }\n+  else\n+    r = build_stmt (input_location, EH_SPEC_BLOCK, NULL_TREE, NULL_TREE);\n   add_stmt (r);\n-  EH_SPEC_STMTS (r) = push_stmt_list ();\n+  TREE_OPERAND (r, 0) = push_stmt_list ();\n   return r;\n }\n \n@@ -524,7 +533,11 @@ finish_eh_spec_block (tree raw_raises, tree eh_spec_block)\n {\n   tree raises;\n \n-  EH_SPEC_STMTS (eh_spec_block) = pop_stmt_list (EH_SPEC_STMTS (eh_spec_block));\n+  TREE_OPERAND (eh_spec_block, 0)\n+    = pop_stmt_list (TREE_OPERAND (eh_spec_block, 0));\n+\n+  if (TREE_CODE (eh_spec_block) == MUST_NOT_THROW_EXPR)\n+    return;\n \n   /* Strip cv quals, etc, from the specification types.  */\n   for (raises = NULL_TREE;"}, {"sha": "81c2d03b779b9f0cf56814f24f615aea7d0999d6", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9feb3d6aca21781464d2759fcef34bd471d85628/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9feb3d6aca21781464d2759fcef34bd471d85628/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9feb3d6aca21781464d2759fcef34bd471d85628", "patch": "@@ -1929,6 +1929,15 @@ Disable built-in declarations of functions that are not mandated by\n ANSI/ISO C@.  These include @code{ffs}, @code{alloca}, @code{_exit},\n @code{index}, @code{bzero}, @code{conjf}, and other related functions.\n \n+@item -fnothrow-opt\n+@opindex fnothrow-opt\n+Treat a @code{throw()} exception specification as though it were a\n+@code{noexcept} specification to reduce or eliminate the text size\n+overhead relative to a function with no exception specification.  The\n+semantic effect is that an exception thrown out of a function with\n+such an exception specification will result in a call to\n+@code{terminate} rather than @code{unexpected}.\n+\n @item -fno-operator-names\n @opindex fno-operator-names\n Do not treat the operator name keywords @code{and}, @code{bitand},"}, {"sha": "8b255283424868979a1778e5fd0609daabd4d246", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9feb3d6aca21781464d2759fcef34bd471d85628/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9feb3d6aca21781464d2759fcef34bd471d85628/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9feb3d6aca21781464d2759fcef34bd471d85628", "patch": "@@ -1,3 +1,9 @@\n+2010-05-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/eh/spec10.C: New.\n+\t* g++.dg/eh/spec11.C: New.\n+\t* g++.old-deja/g++.mike/eh34.C: Remove dg-options.\n+\n 2010-05-15  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/44154"}, {"sha": "b8f47df4a8e9e51e26da9d08f1729643cd003786", "filename": "gcc/testsuite/g++.dg/eh/forced3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9feb3d6aca21781464d2759fcef34bd471d85628/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fforced3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9feb3d6aca21781464d2759fcef34bd471d85628/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fforced3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fforced3.C?ref=9feb3d6aca21781464d2759fcef34bd471d85628", "patch": "@@ -2,7 +2,7 @@\n // { dg-do run { xfail \"ia64-hp-hpux11.*\" } }\n \n // Test that forced unwinding calls std::unexpected going \n-// throw a nothrow function.\n+// through a nothrow function.\n \n #include <unwind.h>\n #include <stdlib.h>"}, {"sha": "a62d24e663ac6ca29efe162e759f932dbe86a1df", "filename": "gcc/testsuite/g++.dg/eh/spec10.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9feb3d6aca21781464d2759fcef34bd471d85628/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9feb3d6aca21781464d2759fcef34bd471d85628/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec10.C?ref=9feb3d6aca21781464d2759fcef34bd471d85628", "patch": "@@ -0,0 +1,31 @@\n+// Make sure that we call terminate when a throw() spec is violated even\n+// with -fnothrow-opt.  The function pointers are there to make sure that\n+// the compiler doesn't get clever about optimizing the calls based on\n+// knowledge about the called functions.\n+\n+// { dg-options \"-fnothrow-opt\" }\n+// { dg-do run }\n+\n+#include <exception>\n+#include <cstdlib>\n+\n+void my_terminate ()\n+{\n+  std::exit (0);\n+}\n+\n+void g() { throw 1; }\n+void (*p1)() = g;\n+void f() throw() { p1(); }\n+void (*p2)() = f;\n+void h() { p2(); }\n+\n+int main()\n+{\n+  std::set_terminate (my_terminate);\n+\n+  try { h(); }\n+  catch (int) { }\n+\n+  return 1;\n+}"}, {"sha": "562e366aa2c0787dc453c523ab4b1fe0286209d6", "filename": "gcc/testsuite/g++.dg/eh/spec11.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9feb3d6aca21781464d2759fcef34bd471d85628/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9feb3d6aca21781464d2759fcef34bd471d85628/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec11.C?ref=9feb3d6aca21781464d2759fcef34bd471d85628", "patch": "@@ -0,0 +1,11 @@\n+// Make sure that we force an LSDA for a throw() spec with -fnothrow-opt so\n+// that the personality routine will call terminate.\n+\n+// { dg-final { scan-assembler-not \"_ZSt9terminatev\" } }\n+// { dg-final { scan-assembler-not \"EHB\" } }\n+// { dg-final { scan-assembler \"LSDA\" } }\n+\n+// { dg-options \"-fnothrow-opt\" }\n+\n+void g();\n+void f() throw() { g(); }"}, {"sha": "056f6b8df7493550de89e815d7f9562c934f5abd", "filename": "gcc/testsuite/g++.old-deja/g++.mike/eh34.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9feb3d6aca21781464d2759fcef34bd471d85628/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9feb3d6aca21781464d2759fcef34bd471d85628/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh34.C?ref=9feb3d6aca21781464d2759fcef34bd471d85628", "patch": "@@ -1,5 +1,4 @@\n // { dg-do run { xfail sparc64-*-elf arm-*-pe } }\n-// { dg-options \"-fexceptions\" }\n \n #include <exception>\n #include <stdlib.h>"}]}