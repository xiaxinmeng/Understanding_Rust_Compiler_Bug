{"sha": "f65e551f737ee3cb3a6ae45bd8168d959feacfa1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY1ZTU1MWY3MzdlZTNjYjNhNmFlNDViZDgxNjhkOTU5ZmVhY2ZhMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-04T08:43:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-04T08:43:34Z"}, "message": "libgomp: Use sizeof(void*) based checks instead of looking through $CC $CFLAGS for -m32/-mx32\n\nSome gcc configurations default to -m32 but support -m64 too.  This patch\njust makes the ILP32 tests more reliable by following what e.g. libsanitizer\nconfigury does.\n\n2021-03-04  Jakub Jelinek  <jakub@redhat.com>\n\n\t* configure.ac: Add AC_CHECK_SIZEOF([void *]).\n\t* plugin/configfrag.ac: Check $ac_cv_sizeof_void_p value instead of\n\tchecking of -m32 or -mx32 options on the command line.\n\t* config.h.in: Regenerated.\n\t* configure: Regenerated.", "tree": {"sha": "94f8161286877c7a16a3d97b991cfe9f4abb51eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94f8161286877c7a16a3d97b991cfe9f4abb51eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f65e551f737ee3cb3a6ae45bd8168d959feacfa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f65e551f737ee3cb3a6ae45bd8168d959feacfa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f65e551f737ee3cb3a6ae45bd8168d959feacfa1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f65e551f737ee3cb3a6ae45bd8168d959feacfa1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d259ab15761de2d938c24abfba9cdcd2fef91655", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d259ab15761de2d938c24abfba9cdcd2fef91655", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d259ab15761de2d938c24abfba9cdcd2fef91655"}], "stats": {"total": 181, "additions": 105, "deletions": 76}, "files": [{"sha": "390e548cf59083cc3caa6513af47b3ef37559566", "filename": "libgomp/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65e551f737ee3cb3a6ae45bd8168d959feacfa1/libgomp%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65e551f737ee3cb3a6ae45bd8168d959feacfa1/libgomp%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig.h.in?ref=f65e551f737ee3cb3a6ae45bd8168d959feacfa1", "patch": "@@ -183,6 +183,9 @@\n /* Define if all infrastructure, needed for plugins, is supported. */\n #undef PLUGIN_SUPPORT\n \n+/* The size of `void *', as computed by sizeof. */\n+#undef SIZEOF_VOID_P\n+\n /* Define to 1 if you have the ANSI C header files. */\n #undef STDC_HEADERS\n "}, {"sha": "22123f95d874375874289bafe6b887334b5c41cd", "filename": "libgomp/configure", "status": "modified", "additions": 96, "deletions": 72, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65e551f737ee3cb3a6ae45bd8168d959feacfa1/libgomp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65e551f737ee3cb3a6ae45bd8168d959feacfa1/libgomp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure?ref=f65e551f737ee3cb3a6ae45bd8168d959feacfa1", "patch": "@@ -2058,60 +2058,6 @@ fi\n \n } # ac_fn_c_check_header_mongrel\n \n-# ac_fn_c_check_type LINENO TYPE VAR INCLUDES\n-# -------------------------------------------\n-# Tests whether TYPE exists after having included INCLUDES, setting cache\n-# variable VAR accordingly.\n-ac_fn_c_check_type ()\n-{\n-  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $2\" >&5\n-$as_echo_n \"checking for $2... \" >&6; }\n-if eval \\${$3+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  eval \"$3=no\"\n-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-$4\n-int\n-main ()\n-{\n-if (sizeof ($2))\n-\t return 0;\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-if ac_fn_c_try_compile \"$LINENO\"; then :\n-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-$4\n-int\n-main ()\n-{\n-if (sizeof (($2)))\n-\t    return 0;\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-if ac_fn_c_try_compile \"$LINENO\"; then :\n-\n-else\n-  eval \"$3=yes\"\n-fi\n-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n-fi\n-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n-fi\n-eval ac_res=\\$$3\n-\t       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_res\" >&5\n-$as_echo \"$ac_res\" >&6; }\n-  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n-\n-} # ac_fn_c_check_type\n-\n # ac_fn_c_compute_int LINENO EXPR VAR INCLUDES\n # --------------------------------------------\n # Tries to find the compile-time value of EXPR in a program that includes\n@@ -2294,6 +2240,60 @@ rm -f conftest.val\n   as_fn_set_status $ac_retval\n \n } # ac_fn_c_compute_int\n+\n+# ac_fn_c_check_type LINENO TYPE VAR INCLUDES\n+# -------------------------------------------\n+# Tests whether TYPE exists after having included INCLUDES, setting cache\n+# variable VAR accordingly.\n+ac_fn_c_check_type ()\n+{\n+  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $2\" >&5\n+$as_echo_n \"checking for $2... \" >&6; }\n+if eval \\${$3+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  eval \"$3=no\"\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+int\n+main ()\n+{\n+if (sizeof ($2))\n+\t return 0;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+int\n+main ()\n+{\n+if (sizeof (($2)))\n+\t    return 0;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+\n+else\n+  eval \"$3=yes\"\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+eval ac_res=\\$$3\n+\t       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_res\" >&5\n+$as_echo \"$ac_res\" >&6; }\n+  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n+\n+} # ac_fn_c_check_type\n cat >config.log <<_ACEOF\n This file contains any messages produced by compilers while\n running configure, to aid debugging if configure makes a mistake.\n@@ -11421,7 +11421,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11434 \"configure\"\n+#line 11424 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11527,7 +11527,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11540 \"configure\"\n+#line 11530 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14251,16 +14251,6 @@ freebsd* | dragonfly*)\n   esac\n   ;;\n \n-gnu*)\n-  version_type=linux\n-  need_lib_prefix=no\n-  need_version=no\n-  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}${major} ${libname}${shared_ext}'\n-  soname_spec='${libname}${release}${shared_ext}$major'\n-  shlibpath_var=LD_LIBRARY_PATH\n-  hardcode_into_libs=yes\n-  ;;\n-\n haiku*)\n   version_type=linux\n   need_lib_prefix=no\n@@ -14382,7 +14372,7 @@ linux*oldld* | linux*aout* | linux*coff*)\n # project, but have not yet been accepted: they are GCC-local changes\n # for the time being.  (See\n # https://lists.gnu.org/archive/html/libtool-patches/2018-05/msg00000.html)\n-linux* | k*bsd*-gnu | kopensolaris*-gnu | uclinuxfdpiceabi)\n+linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu* | uclinuxfdpiceabi)\n   version_type=linux\n   need_lib_prefix=no\n   need_version=no\n@@ -15005,9 +14995,43 @@ $as_echo \"#define LIBGOMP_OFFLOADED_ONLY 1\" >>confdefs.h\n \n fi\n \n+# The cast to long int works around a bug in the HP C Compiler\n+# version HP92453-01 B.11.11.23709.GP, which incorrectly rejects\n+# declarations like `int a3[[(sizeof (unsigned char)) >= 0]];'.\n+# This bug is HP SR number 8606223364.\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking size of void *\" >&5\n+$as_echo_n \"checking size of void *... \" >&6; }\n+if ${ac_cv_sizeof_void_p+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if ac_fn_c_compute_int \"$LINENO\" \"(long int) (sizeof (void *))\" \"ac_cv_sizeof_void_p\"        \"$ac_includes_default\"; then :\n+\n+else\n+  if test \"$ac_cv_type_void_p\" = yes; then\n+     { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+as_fn_error 77 \"cannot compute sizeof (void *)\n+See \\`config.log' for more details\" \"$LINENO\" 5; }\n+   else\n+     ac_cv_sizeof_void_p=0\n+   fi\n+fi\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_sizeof_void_p\" >&5\n+$as_echo \"$ac_cv_sizeof_void_p\" >&6; }\n+\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define SIZEOF_VOID_P $ac_cv_sizeof_void_p\n+_ACEOF\n+\n+\n+\n # Plugins for offload execution, configure.ac fragment.  -*- mode: autoconf -*-\n #\n-# Copyright (C) 2014-2020 Free Software Foundation, Inc.\n+# Copyright (C) 2014-2021 Free Software Foundation, Inc.\n #\n # Contributed by Mentor Embedded.\n #\n@@ -15274,8 +15298,8 @@ if test x\"$enable_offload_targets\" != x; then\n       nvptx*)\n \tcase \"${target}\" in\n \t  aarch64*-*-* | powerpc64le-*-* | x86_64-*-*)\n-\t    case \" ${CC} ${CFLAGS} \" in\n-\t      *\" -m32 \"* | *\" -mx32 \"*)\n+\t    case \"$ac_cv_sizeof_void_p\" in\n+\t      4)\n \t\t# PR libgomp/65099: Currently, we only support offloading in\n \t\t# 64-bit configurations.\n \t\tPLUGIN_NVPTX=0\n@@ -15343,8 +15367,8 @@ rm -f core conftest.err conftest.$ac_objext \\\n       amdgcn*)\n \tcase \"${target}\" in\n \t  x86_64-*-*)\n-\t    case \" ${CC} ${CFLAGS} \" in\n-\t      *\" -m32 \"*|*\" -mx32 \"*)\n+\t    case \"$ac_cv_sizeof_void_p\" in\n+\t      4)\n \t\tPLUGIN_GCN=0\n \t\t;;\n \t      *)"}, {"sha": "c23fe004f1d9fcbdf0c2d951d20c8dec5bd43cca", "filename": "libgomp/configure.ac", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65e551f737ee3cb3a6ae45bd8168d959feacfa1/libgomp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65e551f737ee3cb3a6ae45bd8168d959feacfa1/libgomp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure.ac?ref=f65e551f737ee3cb3a6ae45bd8168d959feacfa1", "patch": "@@ -221,6 +221,8 @@ if test x$libgomp_offloaded_only = xyes; then\n             [Define to 1 if building libgomp for an accelerator-only target.])\n fi\n \n+AC_CHECK_SIZEOF([void *])\n+\n m4_include([plugin/configfrag.ac])\n \n # Check for functions needed."}, {"sha": "1ab17778f0ddabba4f4f3915fa6bfedfbbd3dbd6", "filename": "libgomp/plugin/configfrag.ac", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f65e551f737ee3cb3a6ae45bd8168d959feacfa1/libgomp%2Fplugin%2Fconfigfrag.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f65e551f737ee3cb3a6ae45bd8168d959feacfa1/libgomp%2Fplugin%2Fconfigfrag.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fconfigfrag.ac?ref=f65e551f737ee3cb3a6ae45bd8168d959feacfa1", "patch": "@@ -160,8 +160,8 @@ if test x\"$enable_offload_targets\" != x; then\n       nvptx*)\n \tcase \"${target}\" in\n \t  aarch64*-*-* | powerpc64le-*-* | x86_64-*-*)\n-\t    case \" ${CC} ${CFLAGS} \" in\n-\t      *\" -m32 \"* | *\" -mx32 \"*)\n+\t    case \"$ac_cv_sizeof_void_p\" in\n+\t      4)\n \t\t# PR libgomp/65099: Currently, we only support offloading in\n \t\t# 64-bit configurations.\n \t\tPLUGIN_NVPTX=0\n@@ -218,8 +218,8 @@ if test x\"$enable_offload_targets\" != x; then\n       amdgcn*)\n \tcase \"${target}\" in\n \t  x86_64-*-*)\n-\t    case \" ${CC} ${CFLAGS} \" in\n-\t      *\" -m32 \"*|*\" -mx32 \"*)\n+\t    case \"$ac_cv_sizeof_void_p\" in\n+\t      4)\n \t\tPLUGIN_GCN=0\n \t\t;;\n \t      *)"}]}