{"sha": "8c9864f32d6c76ae5f3317148b29629c60a2f26b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM5ODY0ZjMyZDZjNzZhZTVmMzMxNzE0OGIyOTYyOWM2MGEyZjI2Yg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-05-22T07:40:26Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-05-22T07:40:26Z"}, "message": "combine.c (gen_binary): Use swap_commutative_operands_p\n\n        * combine.c (gen_binary): Use swap_commutative_operands_p\n        (simplify_comparison): Likewise.\n        * expmed.c (emit_store_flag): Likewise.\n        * expr.c (compare_from_rtx): Likewise.\n        (do_compare_rtx_and_jump): Likewise.\n        * optabs.c (emit_cmp_and_jump_insn): Revert last patch; abort\n        if not emitting a branch and operands want swapping.\n\nFrom-SVN: r42433", "tree": {"sha": "e077f1ff6c35cde9817f0a709edaf59ec48986c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e077f1ff6c35cde9817f0a709edaf59ec48986c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c9864f32d6c76ae5f3317148b29629c60a2f26b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c9864f32d6c76ae5f3317148b29629c60a2f26b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c9864f32d6c76ae5f3317148b29629c60a2f26b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c9864f32d6c76ae5f3317148b29629c60a2f26b/comments", "author": null, "committer": null, "parents": [{"sha": "083e9f9217548607ffd2655a2a89341b78fe06c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/083e9f9217548607ffd2655a2a89341b78fe06c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/083e9f9217548607ffd2655a2a89341b78fe06c2"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "eeff21e01e5a527f9356d5a69e93e816073b6c2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9864f32d6c76ae5f3317148b29629c60a2f26b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9864f32d6c76ae5f3317148b29629c60a2f26b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c9864f32d6c76ae5f3317148b29629c60a2f26b", "patch": "@@ -1,3 +1,13 @@\n+2001-05-22  Jan Hubicka  <jh@suse.cz>\n+\n+\t* combine.c (gen_binary): Use swap_commutative_operands_p\n+\t(simplify_comparison): Likewise.\n+\t* expmed.c (emit_store_flag): Likewise.\n+\t* expr.c (compare_from_rtx): Likewise.\n+\t(do_compare_rtx_and_jump): Likewise.\n+\t* optabs.c (emit_cmp_and_jump_insn): Revert last patch; abort\n+\tif not emitting a branch and operands want swapping.\n+\n 2001-05-22  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* c-lex.c (c_lex): Just cast cpp's hashnode to gcc's one."}, {"sha": "e36cdefac45f459de4ddeba824360634ca018a8d", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9864f32d6c76ae5f3317148b29629c60a2f26b/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9864f32d6c76ae5f3317148b29629c60a2f26b/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=8c9864f32d6c76ae5f3317148b29629c60a2f26b", "patch": "@@ -9793,8 +9793,7 @@ gen_binary (code, mode, op0, op1)\n   rtx tem;\n \n   if (GET_RTX_CLASS (code) == 'c'\n-      && (GET_CODE (op0) == CONST_INT\n-\t  || (CONSTANT_P (op0) && GET_CODE (op1) != CONST_INT)))\n+      && swap_commutative_operands_p (op0, op1))\n     tem = op0, op0 = op1, op1 = tem;\n \n   if (GET_RTX_CLASS (code) == '<')\n@@ -9999,7 +9998,7 @@ simplify_comparison (code, pop0, pop1)\n   /* If the first operand is a constant, swap the operands and adjust the\n      comparison code appropriately, but don't do this if the second operand\n      is already a constant integer.  */\n-  if (CONSTANT_P (op0) && GET_CODE (op1) != CONST_INT)\n+  if (swap_commutative_operands_p (op0, op1))\n     {\n       tem = op0, op0 = op1, op1 = tem;\n       code = swap_condition (code);"}, {"sha": "b08d5353fa7cd4e913087931d3e06d36ae2454fe", "filename": "gcc/expmed.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9864f32d6c76ae5f3317148b29629c60a2f26b/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9864f32d6c76ae5f3317148b29629c60a2f26b/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=8c9864f32d6c76ae5f3317148b29629c60a2f26b", "patch": "@@ -4226,8 +4226,7 @@ emit_store_flag (target, code, op0, op1, mode, unsignedp, normalizep)\n   /* If one operand is constant, make it the second one.  Only do this\n      if the other operand is not constant as well.  */\n \n-  if ((CONSTANT_P (op0) && ! CONSTANT_P (op1))\n-      || (GET_CODE (op0) == CONST_INT && GET_CODE (op1) != CONST_INT))\n+  if (swap_commutative_operands_p (op0, op1))\n     {\n       tem = op0;\n       op0 = op1;"}, {"sha": "7c7bee7f6d241cd625bb181c3783612e1da19255", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9864f32d6c76ae5f3317148b29629c60a2f26b/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9864f32d6c76ae5f3317148b29629c60a2f26b/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=8c9864f32d6c76ae5f3317148b29629c60a2f26b", "patch": "@@ -10107,8 +10107,7 @@ compare_from_rtx (op0, op1, code, unsignedp, mode, size, align)\n   /* If one operand is constant, make it the second one.  Only do this\n      if the other operand is not constant as well.  */\n \n-  if ((CONSTANT_P (op0) && ! CONSTANT_P (op1))\n-      || (GET_CODE (op0) == CONST_INT && GET_CODE (op1) != CONST_INT))\n+  if (swap_commutative_operands_p (op0, op1))\n     {\n       tem = op0;\n       op0 = op1;\n@@ -10190,8 +10189,7 @@ do_compare_rtx_and_jump (op0, op1, code, unsignedp, mode, size, align,\n   /* If one operand is constant, make it the second one.  Only do this\n      if the other operand is not constant as well.  */\n \n-  if ((CONSTANT_P (op0) && ! CONSTANT_P (op1))\n-      || (GET_CODE (op0) == CONST_INT && GET_CODE (op1) != CONST_INT))\n+  if (swap_commutative_operands_p (op0, op1))\n     {\n       tem = op0;\n       op0 = op1;"}, {"sha": "581fb9b95b21b8e8456cef08e5211a3c4107361e", "filename": "gcc/optabs.c", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9864f32d6c76ae5f3317148b29629c60a2f26b/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9864f32d6c76ae5f3317148b29629c60a2f26b/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=8c9864f32d6c76ae5f3317148b29629c60a2f26b", "patch": "@@ -3287,23 +3287,18 @@ emit_cmp_and_jump_insns (x, y, comparison, size, mode, unsignedp, align, label)\n      unsigned int align;\n      rtx label;\n {\n-  rtx op0;\n-  rtx op1;\n-\n-  /* We may not swap in the general case, since this is called from \n-     compare_from_rtx, and we have no way of reporting the changed\n-     comparison code.  */\n-  if (comparison == swap_condition (comparison)\n-      && swap_commutative_operands_p (x, y))\n-    {\n-      /* Swap operands and condition to ensure canonical RTL.  */\n-      op0 = y;\n-      op1 = x;\n-    }\n-  else\n+  rtx op0 = x, op1 = y;\n+\n+  /* Swap operands and condition to ensure canonical RTL.  */\n+  if (swap_commutative_operands_p (x, y))\n     {\n-      op0 = x;\n-      op1 = y;\n+      /* If we're not emitting a branch, this means some caller\n+         is out of sync.  */\n+      if (! label)\n+\tabort ();\n+\n+      op0 = y, op1 = x;\n+      comparison = swap_condition (comparison);\n     }\n \n #ifdef HAVE_cc0"}, {"sha": "a4ca80f4efdef7fd85334936e4577b7c617779ce", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c9864f32d6c76ae5f3317148b29629c60a2f26b/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c9864f32d6c76ae5f3317148b29629c60a2f26b/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=8c9864f32d6c76ae5f3317148b29629c60a2f26b", "patch": "@@ -1817,8 +1817,7 @@ simplify_relational_operation (code, mode, op0, op1)\n     return 0;\n \n   /* Make sure the constant is second.  */\n-  if ((CONSTANT_P (op0) && ! CONSTANT_P (op1))\n-      || (GET_CODE (op0) == CONST_INT && GET_CODE (op1) != CONST_INT))\n+  if (swap_commutative_operands_p (op0, op1))\n     {\n       tem = op0, op0 = op1, op1 = tem;\n       code = swap_condition (code);"}]}