{"sha": "7d4918a2d96f1512bd71b00d1deae61fbd4a6ab9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q0OTE4YTJkOTZmMTUxMmJkNzFiMDBkMWRlYWU2MWZiZDRhNmFiOQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.stanford.edu", "date": "2001-02-07T18:32:42Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-02-07T18:32:42Z"}, "message": "cpphash.h (struct spec_nodes): Add n_true and n_false.\n\n\t* cpphash.h (struct spec_nodes): Add n_true and n_false.\n\t* cppinit.c (cpp_create_reader): Initialize them.\n\t(append_include_chain): cxx_aware arg might be unused.\n\t* cppexp.c (lex): In C++ mode, recognize 'true' and 'false'\n\tkeywords and give them their phase 7 meaning.  Pedwarn about\n\tthis unless '__bool_true_false_are_defined' is defined.\n\n\t* g++.dg/stdbool-if.C: New test.\n\nFrom-SVN: r39523", "tree": {"sha": "c4639b8fbbd99fcc0eb642f020f8787aad421122", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4639b8fbbd99fcc0eb642f020f8787aad421122"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d4918a2d96f1512bd71b00d1deae61fbd4a6ab9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4918a2d96f1512bd71b00d1deae61fbd4a6ab9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d4918a2d96f1512bd71b00d1deae61fbd4a6ab9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4918a2d96f1512bd71b00d1deae61fbd4a6ab9/comments", "author": null, "committer": null, "parents": [{"sha": "7acfb19e402f6ec59f2efc0f8fe6d462615f6b5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7acfb19e402f6ec59f2efc0f8fe6d462615f6b5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7acfb19e402f6ec59f2efc0f8fe6d462615f6b5d"}], "stats": {"total": 88, "additions": 77, "deletions": 11}, "files": [{"sha": "2f385b7ccae31aff0ff85179713d5fac4a39b678", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4918a2d96f1512bd71b00d1deae61fbd4a6ab9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4918a2d96f1512bd71b00d1deae61fbd4a6ab9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d4918a2d96f1512bd71b00d1deae61fbd4a6ab9", "patch": "@@ -1,3 +1,12 @@\n+2001-02-07  Zack Weinberg  <zack@wolery.stanford.edu>\n+\n+\t* cpphash.h (struct spec_nodes): Add n_true and n_false.\n+\t* cppinit.c (cpp_create_reader): Initialize them.\n+\t(append_include_chain): cxx_aware arg might be unused.\n+\t* cppexp.c (lex): In C++ mode, recognize 'true' and 'false'\n+\tkeywords and give them their phase 7 meaning.  Pedwarn about\n+\tthis unless '__bool_true_false_are_defined' is defined.\n+\n 2001-02-07  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* lcm.c (optimize_mode_switching): Emit mode_set before the"}, {"sha": "11cde7066e11634eb18efdcc40f70aba7efa62cc", "filename": "gcc/cppexp.c", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4918a2d96f1512bd71b00d1deae61fbd4a6ab9/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4918a2d96f1512bd71b00d1deae61fbd4a6ab9/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=7d4918a2d96f1512bd71b00d1deae61fbd4a6ab9", "patch": "@@ -426,18 +426,36 @@ lex (pfile, skip_evaluation, token)\n \n \t  return parse_defined (pfile);\n \t}\n-      /* Controlling #if expressions cannot contain identifiers (they\n-\t could become macros in the future).  */\n-      pfile->mi_state = MI_FAILED;\n-\n-      op.op = CPP_INT;\n-      op.unsignedp = 0;\n-      op.value = 0;\n+      else if (CPP_OPTION (pfile, cplusplus)\n+\t       && (token->val.node == pfile->spec_nodes.n_true\n+\t\t   || token->val.node == pfile->spec_nodes.n_false))\n+\t{\n+\t  op.op = CPP_INT;\n+\t  op.unsignedp = 0;\n+\t  op.value = (token->val.node == pfile->spec_nodes.n_true);\n+\n+\t  /* Warn about use of true or false in #if when pedantic\n+\t     and stdbool.h has not been included.  */\n+\t  if (CPP_PEDANTIC (pfile)\n+\t      && ! cpp_defined (pfile, DSC(\"__bool_true_false_are_defined\")))\n+\t    cpp_pedwarn (pfile, \"ISO C++ does not permit \\\"%s\\\" in #if\",\n+\t\t\t token->val.node->name);\n+\t  return op;\n+\t}\n+      else\n+\t{\n+\t  /* Controlling #if expressions cannot contain identifiers (they\n+\t     could become macros in the future).  */\n+\t  pfile->mi_state = MI_FAILED;\n \n-      if (CPP_OPTION (pfile, warn_undef) && !skip_evaluation)\n-\tcpp_warning (pfile, \"\\\"%s\\\" is not defined\", token->val.node->name);\n+\t  op.op = CPP_INT;\n+\t  op.unsignedp = 0;\n+\t  op.value = 0;\n \n-      return op;\n+\t  if (CPP_OPTION (pfile, warn_undef) && !skip_evaluation)\n+\t    cpp_warning (pfile, \"\\\"%s\\\" is not defined\", token->val.node->name);\n+\t  return op;\n+\t}\n \n     case CPP_HASH:\n       {"}, {"sha": "539366660b13f789ad13459e54274f748d440f7e", "filename": "gcc/cppinit.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4918a2d96f1512bd71b00d1deae61fbd4a6ab9/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4918a2d96f1512bd71b00d1deae61fbd4a6ab9/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=7d4918a2d96f1512bd71b00d1deae61fbd4a6ab9", "patch": "@@ -203,7 +203,7 @@ append_include_chain (pfile, dir, path, cxx_aware)\n      cpp_reader *pfile;\n      char *dir;\n      int path;\n-     int cxx_aware;\n+     int cxx_aware ATTRIBUTE_UNUSED;\n {\n   struct cpp_pending *pend = CPP_OPTION (pfile, pending);\n   struct file_name_list *new;\n@@ -554,6 +554,8 @@ cpp_create_reader (lang)\n   s = &pfile->spec_nodes;\n   s->n_L                = cpp_lookup (pfile, DSC(\"L\"));\n   s->n_defined\t\t= cpp_lookup (pfile, DSC(\"defined\"));\n+  s->n_true\t\t= cpp_lookup (pfile, DSC(\"true\"));\n+  s->n_false\t\t= cpp_lookup (pfile, DSC(\"false\"));\n   s->n__Pragma\t\t= cpp_lookup (pfile, DSC(\"_Pragma\"));\n   s->n__STRICT_ANSI__   = cpp_lookup (pfile, DSC(\"__STRICT_ANSI__\"));\n   s->n__CHAR_UNSIGNED__ = cpp_lookup (pfile, DSC(\"__CHAR_UNSIGNED__\"));"}, {"sha": "b40f2d5c627d39f1c9b4745d5a85234d26ac6712", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4918a2d96f1512bd71b00d1deae61fbd4a6ab9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4918a2d96f1512bd71b00d1deae61fbd4a6ab9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d4918a2d96f1512bd71b00d1deae61fbd4a6ab9", "patch": "@@ -1,3 +1,7 @@\n+2001-02-07  Zack Weinberg  <zack@wolery.stanford.edu>\n+\n+\t* g++.dg/stdbool-if.C: New test.\n+\n Wed Feb  7 09:54:47 2001  Ovidiu Predescu  <ovidiu@cup.hp.com>\n \n \t* objc/execute/fdecl.m: Added main()."}, {"sha": "e9800bf160d495734dd565bd109f84cf9604fc03", "filename": "gcc/testsuite/g++.dg/stdbool-if.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4918a2d96f1512bd71b00d1deae61fbd4a6ab9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fstdbool-if.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4918a2d96f1512bd71b00d1deae61fbd4a6ab9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fstdbool-if.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fstdbool-if.C?ref=7d4918a2d96f1512bd71b00d1deae61fbd4a6ab9", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options -pedantic } */\n+\n+/* test of 'true' and 'false' in #if.  this is accepted with a pedwarn\n+   before stdbool.h is included, silently afterward.  */\n+\n+/* Make sure they're viable keywords.  */\n+bool a = true;\n+bool b = false;\n+\n+#if true\t\t/* { dg-warning \"true\" \"true in #if pedwarn\" } */\n+#else\n+#error true is false\t/* { dg-bogus \"true\" \"true is false\" } */\n+#endif\n+\n+#if false\t\t/* { dg-warning \"false\" \"false in #if pedwarn\" } */\n+#error false is true\t/* { dg-bogus \"false\" \"false is true\" } */\n+#endif\n+\n+#include <stdbool.h>\n+\n+/* Must still be viable keywords.  */\n+bool c = true;\n+bool d = false;\n+\n+#if true\t\t/* { dg-bogus \"true\" \"true in #if with stdbool.h\" } */\n+#else\n+#error true is false\t/* { dg-bogus \"true\" \"true is false\" } */\n+#endif\n+\n+#if false\t\t/* { dg-bogus \"false\" \"false in #if with stdbool.h\" } */\n+#error false is true\t/* { dg-bogus \"false\" \"false is true\" } */\n+#endif"}]}