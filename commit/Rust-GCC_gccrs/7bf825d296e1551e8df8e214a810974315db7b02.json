{"sha": "7bf825d296e1551e8df8e214a810974315db7b02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JmODI1ZDI5NmUxNTUxZThkZjhlMjE0YTgxMDk3NDMxNWRiN2IwMg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "1998-02-08T11:43:54Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-02-08T11:43:54Z"}, "message": "regmove.c: Fix various minor formatting problems.\n\n        * regmove.c: Fix various minor formatting problems.\n        (optimize_reg_copy_1): Stop search at CALL_INSNs if flag_exceptions\n        is true.  Make end of basic block tests consistent through regmove.c.\n        (optimize_reg_copy_2, optimize_reg_copy_3): Likewise.\n        (fixup_match_2, fixup_match_1, regmove_optimize): Likewise.\n\nCo-Authored-By: Jeffrey A Law <law@cygnus.com>\n\nFrom-SVN: r17775", "tree": {"sha": "f210847a0c0140adfdab016e0bbb986b731d4f02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f210847a0c0140adfdab016e0bbb986b731d4f02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bf825d296e1551e8df8e214a810974315db7b02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bf825d296e1551e8df8e214a810974315db7b02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bf825d296e1551e8df8e214a810974315db7b02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bf825d296e1551e8df8e214a810974315db7b02/comments", "author": null, "committer": null, "parents": [{"sha": "40f39eb71477efa757b30435bf8774fb32066666", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f39eb71477efa757b30435bf8774fb32066666", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40f39eb71477efa757b30435bf8774fb32066666"}], "stats": {"total": 121, "additions": 113, "deletions": 8}, "files": [{"sha": "58e0b1b6505fe3106b098833eb3525864db7334f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf825d296e1551e8df8e214a810974315db7b02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf825d296e1551e8df8e214a810974315db7b02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7bf825d296e1551e8df8e214a810974315db7b02", "patch": "@@ -1,3 +1,12 @@\n+Sun Feb  8 12:04:24 1998  Jim Wilson  (wilson@cygnus.com)\n+\t\t\t  Jeff Law (law@cygnus.com)\n+\n+\t* regmove.c: Fix various minor formatting problems.\n+\t(optimize_reg_copy_1): Stop search at CALL_INSNs if flag_exceptions\n+\tis true.  Make end of basic block tests consistent through regmove.c.\n+\t(optimize_reg_copy_2, optimize_reg_copy_3): Likewise.\n+\t(fixup_match_2, fixup_match_1, regmove_optimize): Likewise.\n+\n Sun Feb  8 01:49:18 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gansidecl.h: Check for a conflicting macro definition before"}, {"sha": "4d1062df88f0730a9b46ec1b1b69468d19765756", "filename": "gcc/regmove.c", "status": "modified", "additions": 104, "deletions": 8, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf825d296e1551e8df8e214a810974315db7b02/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf825d296e1551e8df8e214a810974315db7b02/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=7bf825d296e1551e8df8e214a810974315db7b02", "patch": "@@ -206,6 +206,14 @@ optimize_reg_copy_1 (insn, dest, src)\n \t\t  || NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_END)))\n \tbreak;\n \n+      /* ??? We can't scan past the end of a basic block without updating\n+\t the register lifetime info (REG_DEAD/basic_block_live_at_start).\n+\t A CALL_INSN might be the last insn of a basic block, if it is inside\n+\t an EH region.  There is no easy way to tell, so we just always break\n+\t when we see a CALL_INSN if flag_exceptions is nonzero.  */\n+      if (flag_exceptions && GET_CODE (p) == CALL_INSN)\n+\tbreak;\n+\n       if (GET_RTX_CLASS (GET_CODE (p)) != 'i')\n \tcontinue;\n \n@@ -380,6 +388,14 @@ optimize_reg_copy_2 (insn, dest, src)\n \t\t  || NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_END)))\n \tbreak;\n \n+      /* ??? We can't scan past the end of a basic block without updating\n+\t the register lifetime info (REG_DEAD/basic_block_live_at_start).\n+\t A CALL_INSN might be the last insn of a basic block, if it is inside\n+\t an EH region.  There is no easy way to tell, so we just always break\n+\t when we see a CALL_INSN if flag_exceptions is nonzero.  */\n+      if (flag_exceptions && GET_CODE (p) == CALL_INSN)\n+\tbreak;\n+\n       if (GET_RTX_CLASS (GET_CODE (p)) != 'i')\n \tcontinue;\n \n@@ -451,10 +467,22 @@ optimize_reg_copy_3 (insn, dest, src)\n     return;\n   for (p = PREV_INSN (insn); ! reg_set_p (src_reg, p); p = PREV_INSN (p))\n     {\n+      if (GET_CODE (p) == CODE_LABEL || GET_CODE (p) == JUMP_INSN\n+\t  || (GET_CODE (p) == NOTE\n+\t      && (NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_BEG\n+\t\t  || NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_END)))\n+\treturn;\n+\n+      /* ??? We can't scan past the end of a basic block without updating\n+\t the register lifetime info (REG_DEAD/basic_block_live_at_start).\n+\t A CALL_INSN might be the last insn of a basic block, if it is inside\n+\t an EH region.  There is no easy way to tell, so we just always break\n+\t when we see a CALL_INSN if flag_exceptions is nonzero.  */\n+      if (flag_exceptions && GET_CODE (p) == CALL_INSN)\n+\treturn;\n+\n       if (GET_RTX_CLASS (GET_CODE (p)) != 'i')\n \tcontinue;\n-      if (GET_CODE (p) == JUMP_INSN)\n-\treturn;\n     }\n   if (! (set = single_set (p))\n       || GET_CODE (SET_SRC (set)) != MEM\n@@ -541,7 +569,8 @@ reg_is_remote_constant_p (reg, insn, first)\n \n /* cse disrupts preincrement / postdecrement squences when it finds a\n    hard register as ultimate source, like the frame pointer.  */\n-int fixup_match_2 (insn, dst, src, offset, regmove_dump_file)\n+int\n+fixup_match_2 (insn, dst, src, offset, regmove_dump_file)\n      rtx insn, dst, src, offset;\n      FILE *regmove_dump_file;\n {\n@@ -567,13 +596,21 @@ int fixup_match_2 (insn, dst, src, offset, regmove_dump_file)\n                   || NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_END)))\n         break;\n \n+      /* ??? We can't scan past the end of a basic block without updating\n+\t the register lifetime info (REG_DEAD/basic_block_live_at_start).\n+\t A CALL_INSN might be the last insn of a basic block, if it is inside\n+\t an EH region.  There is no easy way to tell, so we just always break\n+\t when we see a CALL_INSN if flag_exceptions is nonzero.  */\n+      if (flag_exceptions && GET_CODE (p) == CALL_INSN)\n+\tbreak;\n+\n       if (GET_RTX_CLASS (GET_CODE (p)) != 'i')\n         continue;\n \n-  if (find_regno_note (p, REG_DEAD, REGNO (dst)))\n-    dst_death = p;\n-  if (! dst_death)\n-    length++;\n+      if (find_regno_note (p, REG_DEAD, REGNO (dst)))\n+\tdst_death = p;\n+      if (! dst_death)\n+\tlength++;\n \n       pset = single_set (p);\n       if (pset && SET_DEST (pset) == dst\n@@ -978,6 +1015,16 @@ regmove_optimize (f, nregs, regmove_dump_file)\n \t\t\t      || NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_END)))\n \t\t    break;\n \n+\t\t  /* ??? We can't scan past the end of a basic block without\n+\t\t     updating the register lifetime info\n+\t\t     (REG_DEAD/basic_block_live_at_start).\n+\t\t     A CALL_INSN might be the last insn of a basic block, if\n+\t\t     it is inside an EH region.  There is no easy way to tell,\n+\t\t     so we just always break when we see a CALL_INSN if\n+\t\t     flag_exceptions is nonzero.  */\n+\t\t  if (flag_exceptions && GET_CODE (p) == CALL_INSN)\n+\t\t    break;\n+\n \t\t  if (GET_RTX_CLASS (GET_CODE (p)) != 'i')\n \t\t    continue;\n \n@@ -1245,6 +1292,14 @@ fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n \t\t  || NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_END)))\n \tbreak;\n \n+      /* ??? We can't scan past the end of a basic block without updating\n+\t the register lifetime info (REG_DEAD/basic_block_live_at_start).\n+\t A CALL_INSN might be the last insn of a basic block, if it is\n+\t inside an EH region.  There is no easy way to tell, so we just\n+\t always break when we see a CALL_INSN if flag_exceptions is nonzero.  */\n+      if (flag_exceptions && GET_CODE (p) == CALL_INSN)\n+\tbreak;\n+\n       if (GET_RTX_CLASS (GET_CODE (p)) != 'i')\n \tcontinue;\n \n@@ -1281,6 +1336,20 @@ fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n \t\t      q = 0;\n \t\t      break;\n \t\t    }\n+\n+\t\t  /* ??? We can't scan past the end of a basic block without\n+\t\t     updating the register lifetime info\n+\t\t     (REG_DEAD/basic_block_live_at_start).\n+\t\t     A CALL_INSN might be the last insn of a basic block, if\n+\t\t     it is inside an EH region.  There is no easy way to tell,\n+\t\t     so we just always break when we see a CALL_INSN if\n+\t\t     flag_exceptions is nonzero.  */\n+\t\t  if (flag_exceptions && GET_CODE (p) == CALL_INSN)\n+\t\t    {\n+\t\t      q = 0;\n+\t\t      break;\n+\t\t    }\n+\n \t\t  if (GET_RTX_CLASS (GET_CODE (q)) != 'i')\n \t\t    continue;\n \t\t  if (reg_overlap_mentioned_p (src, PATTERN (q))\n@@ -1434,11 +1503,28 @@ fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n \t{\n \t  for (q = PREV_INSN (insn); q; q = PREV_INSN(q))\n \t    {\n-\t      if (GET_CODE (q) == JUMP_INSN)\n+\t      if (GET_CODE (q) == CODE_LABEL || GET_CODE (q) == JUMP_INSN\n+\t\t  || (GET_CODE (q) == NOTE\n+\t\t      && (NOTE_LINE_NUMBER (q) == NOTE_INSN_LOOP_BEG\n+\t\t\t  || NOTE_LINE_NUMBER (q) == NOTE_INSN_LOOP_END)))\n \t\t{\n \t\t  q = 0;\n \t\t  break;\n \t\t}\n+\n+\t      /* ??? We can't scan past the end of a basic block without\n+\t\t updating the register lifetime info\n+\t\t (REG_DEAD/basic_block_live_at_start).\n+\t\t A CALL_INSN might be the last insn of a basic block, if\n+\t\t it is inside an EH region.  There is no easy way to tell,\n+\t\t so we just always break when we see a CALL_INSN if\n+\t\t flag_exceptions is nonzero.  */\n+\t      if (flag_exceptions && GET_CODE (p) == CALL_INSN)\n+\t\t{\n+\t\t  q = 0;\n+\t\t  break;\n+\t\t}\n+\n \t      if (GET_RTX_CLASS (GET_CODE (q)) != 'i')\n \t\tcontinue;\n \t      s_length2++;\n@@ -1510,6 +1596,16 @@ fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n \t\t  && (NOTE_LINE_NUMBER (q) == NOTE_INSN_LOOP_BEG\n \t\t      || NOTE_LINE_NUMBER (q) == NOTE_INSN_LOOP_END)))\n \t    break;\n+\n+\t  /* ??? We can't scan past the end of a basic block without updating\n+\t     the register lifetime info (REG_DEAD/basic_block_live_at_start).\n+\t     A CALL_INSN might be the last insn of a basic block, if it\n+\t     is inside an EH region.  There is no easy way to tell so we\n+\t     just always break when we see a CALL_INSN if flag_exceptions\n+\t     is nonzero.  */\n+\t  if (flag_exceptions && GET_CODE (p) == CALL_INSN)\n+\t    break;\n+\n \t  if (GET_RTX_CLASS (GET_CODE (q)) != 'i')\n \t    continue;\n \t  if (src != inc_dest && (reg_overlap_mentioned_p (src, PATTERN (q))"}]}