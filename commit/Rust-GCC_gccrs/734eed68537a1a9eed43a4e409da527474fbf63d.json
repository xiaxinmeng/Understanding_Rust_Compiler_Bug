{"sha": "734eed68537a1a9eed43a4e409da527474fbf63d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM0ZWVkNjg1MzdhMWE5ZWVkNDNhNGU0MDlkYTUyNzQ3NGZiZjYzZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-09-30T13:23:15Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-09-30T13:44:19Z"}, "message": "c++: Kill DECL_HIDDEN_FRIEND_P\n\nNow hiddenness is managed by name-lookup, we no longer need DECL_HIDDEN_FRIEND_P.\nThis removes it.  Mainly by deleting its bookkeeping, but there are a couple of uses\n\n1) two name lookups look at it to see if they found a hidden thing.\nIn one we have the OVERLOAD, so can record OVL_HIDDEN_P.  In the other\nwe're repeating a lookup that failed, but asking for hidden things --\nso if that succeeds we know the thing was hidden.  (FWIW CWG recently\ndiscussed whether template specializations and instantiations should\nsee such hidden templates anyway, there is compiler divergence.)\n\n2) We had a confusing setting of KOENIG_P when building a\nnon-dependent call.  We don't repeat that lookup at instantiation time\nanyway.\n\n\tgcc/cp/\n\t* cp-tree.h (struct lang_decl_fn): Remove hidden_friend_p.\n\t(DECL_HIDDEN_FRIEND_P): Delete.\n\t* call.c (add_function_candidate): Drop assert about anticipated\n\tdecl.\n\t(build_new_op_1): Drop koenig lookup flagging for hidden friend.\n\t* decl.c (duplicate_decls): Drop HIDDEN_FRIEND_P updating.\n\t* name-lookup.c (do_pushdecl): Likewise.\n\t(set_decl_namespace): Discover hiddenness from OVL_HIDDEN_P.\n\t* pt.c (check_explicit_specialization): Record found_hidden\n\texplicitly.", "tree": {"sha": "17806417b9d49bec6da7b33c0bd6be086c864042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17806417b9d49bec6da7b33c0bd6be086c864042"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/734eed68537a1a9eed43a4e409da527474fbf63d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/734eed68537a1a9eed43a4e409da527474fbf63d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/734eed68537a1a9eed43a4e409da527474fbf63d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/734eed68537a1a9eed43a4e409da527474fbf63d/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65167982efa4dbb96698d026e6d7e17acb513f0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65167982efa4dbb96698d026e6d7e17acb513f0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65167982efa4dbb96698d026e6d7e17acb513f0a"}], "stats": {"total": 83, "additions": 36, "deletions": 47}, "files": [{"sha": "dce229ccf7e21e18f52ccef82a068451f72de914", "filename": "gcc/cp/call.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734eed68537a1a9eed43a4e409da527474fbf63d/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734eed68537a1a9eed43a4e409da527474fbf63d/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=734eed68537a1a9eed43a4e409da527474fbf63d", "patch": "@@ -2220,11 +2220,6 @@ add_function_candidate (struct z_candidate **candidates,\n   int viable = 1;\n   struct rejection_reason *reason = NULL;\n \n-  /* At this point we should not see any functions which haven't been\n-     explicitly declared, except for friend functions which will have\n-     been found using argument dependent lookup.  */\n-  gcc_assert (!DECL_ANTICIPATED (fn) || DECL_HIDDEN_FRIEND_P (fn));\n-\n   /* The `this', `in_chrg' and VTT arguments to constructors are not\n      considered in overload resolution.  */\n   if (DECL_CONSTRUCTOR_P (fn))\n@@ -6344,11 +6339,6 @@ build_new_op_1 (const op_location_t &loc, enum tree_code code, int flags,\n \t      tree call = extract_call_expr (result);\n \t      CALL_EXPR_OPERATOR_SYNTAX (call) = true;\n \n-\t      if (processing_template_decl && DECL_HIDDEN_FRIEND_P (cand->fn))\n-\t\t/* This prevents build_new_function_call from discarding this\n-\t\t   function during instantiation of the enclosing template.  */\n-\t\tKOENIG_LOOKUP_P (call) = 1;\n-\n \t      /* Specify evaluation order as per P0145R2.  */\n \t      CALL_EXPR_ORDERED_ARGS (call) = false;\n \t      switch (op_is_ordered (code))"}, {"sha": "48a4074b3707cc688dbc4749ae4a64f170a53b3e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734eed68537a1a9eed43a4e409da527474fbf63d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734eed68537a1a9eed43a4e409da527474fbf63d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=734eed68537a1a9eed43a4e409da527474fbf63d", "patch": "@@ -2720,14 +2720,13 @@ struct GTY(()) lang_decl_fn {\n   unsigned thunk_p : 1;\n \n   unsigned this_thunk_p : 1;\n-  unsigned hidden_friend_p : 1;\n   unsigned omp_declare_reduction_p : 1;\n   unsigned has_dependent_explicit_spec_p : 1;\n   unsigned immediate_fn_p : 1;\n   unsigned maybe_deleted : 1;\n   unsigned coroutine_p : 1;\n \n-  unsigned spare : 9;\n+  unsigned spare : 10;\n \n   /* 32-bits padding on 64-bit host.  */\n \n@@ -4067,12 +4066,6 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define DECL_OMP_PRIVATIZED_MEMBER(NODE) \\\n   (DECL_LANG_SPECIFIC (VAR_DECL_CHECK (NODE))->u.base.anticipated_p)\n \n-/* Nonzero if NODE is a FUNCTION_DECL which was declared as a friend\n-   within a class but has not been declared in the surrounding scope.\n-   The function is invisible except via argument dependent lookup.  */\n-#define DECL_HIDDEN_FRIEND_P(NODE) \\\n-  (LANG_DECL_FN_CHECK (DECL_COMMON_CHECK (NODE))->hidden_friend_p)\n-\n /* Nonzero if NODE is an artificial FUNCTION_DECL for\n    #pragma omp declare reduction.  */\n #define DECL_OMP_DECLARE_REDUCTION_P(NODE) \\"}, {"sha": "14742c115ad50861a56072afdaa8366692816c57", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734eed68537a1a9eed43a4e409da527474fbf63d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734eed68537a1a9eed43a4e409da527474fbf63d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=734eed68537a1a9eed43a4e409da527474fbf63d", "patch": "@@ -2141,10 +2141,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool hiding, bool was_hidden)\n       olddecl_hidden_friend = olddecl_friend && was_hidden;\n       hidden_friend = olddecl_hidden_friend && hiding;\n       if (!hidden_friend)\n-\t{\n-\t  DECL_ANTICIPATED (olddecl) = 0;\n-\t  DECL_HIDDEN_FRIEND_P (olddecl) = 0;\n-\t}\n+\tDECL_ANTICIPATED (olddecl) = false;\n     }\n \n   if (TREE_CODE (newdecl) == TEMPLATE_DECL)\n@@ -2892,12 +2889,9 @@ duplicate_decls (tree newdecl, tree olddecl, bool hiding, bool was_hidden)\n \n   DECL_UID (olddecl) = olddecl_uid;\n   if (olddecl_friend)\n-    DECL_FRIEND_P (olddecl) = 1;\n+    DECL_FRIEND_P (olddecl) = true;\n   if (hidden_friend)\n-    {\n-      DECL_ANTICIPATED (olddecl) = 1;\n-      DECL_HIDDEN_FRIEND_P (olddecl) = 1;\n-    }\n+    DECL_ANTICIPATED (olddecl) = true;\n \n   /* NEWDECL contains the merged attribute lists.\n      Update OLDDECL to be the same.  */"}, {"sha": "8cd6fe382715066a3c02d3cfd1f77ef027c50854", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734eed68537a1a9eed43a4e409da527474fbf63d/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734eed68537a1a9eed43a4e409da527474fbf63d/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=734eed68537a1a9eed43a4e409da527474fbf63d", "patch": "@@ -3172,7 +3172,7 @@ do_pushdecl (tree decl, bool hiding)\n \t\t  return error_mark_node;\n \t\t}\n \t      /* Hide it from ordinary lookup.  */\n-\t      DECL_ANTICIPATED (decl) = DECL_HIDDEN_FRIEND_P (decl) = true;\n+\t      DECL_ANTICIPATED (decl) = true;\n \t    }\n \t}\n \n@@ -4924,8 +4924,15 @@ set_decl_namespace (tree decl, tree scope, bool friendp)\n \n   /* Since decl is a function, old should contain a function decl.  */\n   if (!OVL_P (old))\n-    goto not_found;\n+    {\n+    not_found:\n+      /* It didn't work, go back to the explicit scope.  */\n+      DECL_CONTEXT (decl) = FROB_CONTEXT (scope);\n+      error (\"%qD should have been declared inside %qD\", decl, scope);\n \n+      return;\n+    }\n+  \n   /* We handle these in check_explicit_instantiation_namespace.  */\n   if (processing_explicit_instantiation)\n     return;\n@@ -4935,13 +4942,14 @@ set_decl_namespace (tree decl, tree scope, bool friendp)\n        match.  But, we'll check later, when we construct the\n        template.  */\n     return;\n+\n   /* Instantiations or specializations of templates may be declared as\n      friends in any namespace.  */\n   if (friendp && DECL_USE_TEMPLATE (decl))\n     return;\n \n-  tree found;\n-  found = NULL_TREE;\n+  tree found = NULL_TREE;\n+  bool hidden_p = false;\n \n   for (lkp_iterator iter (old); iter; ++iter)\n     {\n@@ -4957,17 +4965,20 @@ set_decl_namespace (tree decl, tree scope, bool friendp)\n \t{\n \t  if (found)\n \t    {\n-\t      /* We found more than one matching declaration.  */\n+\t      /* We found more than one matching declaration.  This\n+\t\t can happen if we have two inline namespace children,\n+\t\t each containing a suitable declaration.  */\n \t      DECL_CONTEXT (decl) = FROB_CONTEXT (scope);\n \t      goto ambiguous;\n \t    }\n \t  found = ofn;\n+\t  hidden_p = iter.hidden_p ();\n \t}\n     }\n \n   if (found)\n     {\n-      if (DECL_HIDDEN_FRIEND_P (found))\n+      if (hidden_p)\n \t{\n \t  pedwarn (DECL_SOURCE_LOCATION (decl), 0,\n \t\t   \"%qD has not been declared within %qD\", decl, scope);\n@@ -4978,10 +4989,7 @@ set_decl_namespace (tree decl, tree scope, bool friendp)\n       goto found;\n     }\n \n- not_found:\n-  /* It didn't work, go back to the explicit scope.  */\n-  DECL_CONTEXT (decl) = FROB_CONTEXT (scope);\n-  error (\"%qD should have been declared inside %qD\", decl, scope);\n+  goto not_found;\n }\n \n /* Return the namespace where the current declaration is declared.  */"}, {"sha": "652b4583b35ec792c3d0aa56b4dd8addc2a2730e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734eed68537a1a9eed43a4e409da527474fbf63d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734eed68537a1a9eed43a4e409da527474fbf63d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=734eed68537a1a9eed43a4e409da527474fbf63d", "patch": "@@ -2988,6 +2988,7 @@ check_explicit_specialization (tree declarator,\n       tree tmpl = NULL_TREE;\n       tree targs = NULL_TREE;\n       bool was_template_id = (TREE_CODE (declarator) == TEMPLATE_ID_EXPR);\n+      bool found_hidden = false;\n \n       /* Make sure that the declarator is a TEMPLATE_ID_EXPR.  */\n       if (!was_template_id)\n@@ -3008,12 +3009,15 @@ check_explicit_specialization (tree declarator,\n \t      fns = lookup_qualified_name (CP_DECL_CONTEXT (decl), dname,\n \t\t\t\t\t   LOOK_want::NORMAL, true);\n \t      if (fns == error_mark_node)\n-\t\t/* If lookup fails, look for a friend declaration so we can\n-\t\t   give a better diagnostic.  */\n-\t\tfns = (lookup_qualified_name\n-\t\t       (CP_DECL_CONTEXT (decl), dname,\n-\t\t\tLOOK_want::NORMAL | LOOK_want::HIDDEN_FRIEND,\n-\t\t\t/*complain*/true));\n+\t\t{\n+\t\t  /* If lookup fails, look for a friend declaration so we can\n+\t\t     give a better diagnostic.  */\n+\t\t  fns = (lookup_qualified_name\n+\t\t\t (CP_DECL_CONTEXT (decl), dname,\n+\t\t\t  LOOK_want::NORMAL | LOOK_want::HIDDEN_FRIEND,\n+\t\t\t  /*complain*/true));\n+\t\t  found_hidden = true;\n+\t\t}\n \n \t      if (fns == error_mark_node || !is_overloaded_fn (fns))\n \t\t{\n@@ -3122,8 +3126,7 @@ check_explicit_specialization (tree declarator,\n \treturn error_mark_node;\n       else\n \t{\n-\t  if (TREE_CODE (decl) == FUNCTION_DECL\n-\t      && DECL_HIDDEN_FRIEND_P (tmpl))\n+\t  if (found_hidden && TREE_CODE (decl) == FUNCTION_DECL)\n \t    {\n \t      auto_diagnostic_group d;\n \t      if (pedwarn (DECL_SOURCE_LOCATION (decl), 0,\n@@ -3132,8 +3135,9 @@ check_explicit_specialization (tree declarator,\n \t\tinform (DECL_SOURCE_LOCATION (tmpl),\n \t\t\t\"friend declaration here\");\n \t    }\n-\t  else if (!ctype && !is_friend\n-\t\t   && CP_DECL_CONTEXT (decl) == current_namespace)\n+\n+\t  if (!ctype && !is_friend\n+\t      && CP_DECL_CONTEXT (decl) == current_namespace)\n \t    check_unqualified_spec_or_inst (tmpl, DECL_SOURCE_LOCATION (decl));\n \n \t  tree gen_tmpl = most_general_template (tmpl);"}]}