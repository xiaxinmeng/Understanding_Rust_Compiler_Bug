{"sha": "2d7b3505f7681f374ed3d409bb7cc00c9f2ec8d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ3YjM1MDVmNzY4MWYzNzRlZDNkNDA5YmI3Y2MwMGM5ZjJlYzhkMA==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2003-02-03T17:44:55Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2003-02-03T17:44:55Z"}, "message": "parse.y (java_expand_classes): Scan the whole class list looking for access methods that haven't yet been expanded.\n\n2003-01-31  Andrew Haley  <aph@redhat.com>\n\n        * parse.y (java_expand_classes): Scan the whole class list looking\n        for access methods that haven't yet been expanded.\n\nFrom-SVN: r62329", "tree": {"sha": "ccb75f2a0f09f50abdb6af21cc3eba16af931737", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccb75f2a0f09f50abdb6af21cc3eba16af931737"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d7b3505f7681f374ed3d409bb7cc00c9f2ec8d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d7b3505f7681f374ed3d409bb7cc00c9f2ec8d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d7b3505f7681f374ed3d409bb7cc00c9f2ec8d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d7b3505f7681f374ed3d409bb7cc00c9f2ec8d0/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cea9c57b5961403d4363f542989bf3c53783707a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cea9c57b5961403d4363f542989bf3c53783707a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cea9c57b5961403d4363f542989bf3c53783707a"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "34a11f4c1cfe318d66098733c007a211cf5e3932", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7b3505f7681f374ed3d409bb7cc00c9f2ec8d0/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7b3505f7681f374ed3d409bb7cc00c9f2ec8d0/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=2d7b3505f7681f374ed3d409bb7cc00c9f2ec8d0", "patch": "@@ -1,3 +1,8 @@\n+2003-01-31  Andrew Haley  <aph@redhat.com>\n+\n+\t* parse.y (java_expand_classes): Scan the whole class list looking\n+\tfor access methods that haven't yet been expanded.\n+\n 2003-01-31 Adrian Bunk <bunk@fs.tum.de>\n \n \tFix for java/4269:"}, {"sha": "480668eb629fd846847a5cbf3986ff783bf7d036", "filename": "gcc/java/parse.y", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7b3505f7681f374ed3d409bb7cc00c9f2ec8d0/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7b3505f7681f374ed3d409bb7cc00c9f2ec8d0/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=2d7b3505f7681f374ed3d409bb7cc00c9f2ec8d0", "patch": "@@ -8888,6 +8888,65 @@ java_expand_classes (void)\n \t}\n     }\n \n+  /* Expanding the constructors of anonymous classes generates access\n+     methods.  Scan all the methods looking for null DECL_RESULTs --\n+     this will be the case if a method hasn't been expanded.  */\n+  for (cur_ctxp = ctxp_for_generation; cur_ctxp; cur_ctxp = cur_ctxp->next)\n+    {\n+      tree current;\n+      ctxp = cur_ctxp;\n+      for (current = ctxp->class_list; current; current = TREE_CHAIN (current))\n+\t{\n+\t  tree d;\n+\t  current_class = TREE_TYPE (current);\n+\t  for (d = TYPE_METHODS (current_class); d; d = TREE_CHAIN (d))\n+\t    {\n+\t      if (DECL_RESULT (d) == NULL_TREE)\n+\t\t{\n+\t\t  restore_line_number_status (1);\n+\t\t  java_complete_expand_method (d);\n+\t\t  restore_line_number_status (0);\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+  /* ???  Instead of all this we could iterate around the list of\n+     classes until there were no more un-expanded methods.  It would\n+     take a little longer -- one pass over the whole list of methods\n+     -- but it would be simpler.  Like this:  */\n+#if 0\n+    {\n+      int something_changed;\n+    \n+      do\n+\t{\n+\t  something_changed = 0;\n+\t  for (cur_ctxp = ctxp_for_generation; cur_ctxp; cur_ctxp = cur_ctxp->next)\n+\t    {\n+\t      tree current;\n+\t      ctxp = cur_ctxp;\n+\t      for (current = ctxp->class_list; current; current = TREE_CHAIN (current))\n+\t\t{\n+\t\t  tree d;\n+\t\t  current_class = TREE_TYPE (current);\n+\t\t  for (d = TYPE_METHODS (current_class); d; d = TREE_CHAIN (d))\n+\t\t    {\n+\t\t      if (DECL_RESULT (d) == NULL_TREE)\n+\t\t\t{\n+\t\t\t  something_changed = 1;\n+\t\t\t  restore_line_number_status (1);\n+\t\t\t  java_complete_expand_method (d);\n+\t\t\t  restore_line_number_status (0);\n+\t\t\t}\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+      while (something_changed);\n+    }\n+#endif\n+\n   /* If we've found error at that stage, don't try to generate\n      anything, unless we're emitting xrefs or checking the syntax only\n      (but not using -fsyntax-only for the purpose of generating"}]}