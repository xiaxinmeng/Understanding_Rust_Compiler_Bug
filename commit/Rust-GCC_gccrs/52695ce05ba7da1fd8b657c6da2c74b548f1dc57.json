{"sha": "52695ce05ba7da1fd8b657c6da2c74b548f1dc57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI2OTVjZTA1YmE3ZGExZmQ4YjY1N2M2ZGEyYzc0YjU0OGYxZGM1Nw==", "commit": {"author": {"name": "Herman A.J. ten Brugge", "email": "Haj.Ten.Brugge@net.HCC.nl", "date": "2000-07-30T09:12:46Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2000-07-30T09:12:46Z"}, "message": "c4x.md (set_ldp_prologue): Add for RTL prologue/epilogue.\n\n\t* config/c4x/c4x.md (set_ldp_prologue): Add for RTL prologue/epilogue.\n\t(push_st, push_dp, pop_st, pop_dp, popqi_unspec): Likewise.\n\t(nodb_call, return_from_epilogue): Likewise.\n\t(return_from_interrupt_epilogue, prologue, epilogue): Likewise.\n\t* config/c4x/c4x.c (c4x_expand_prologue, c4x_expand_eplilogue): Add.\n\t* config/c4x/c4x-protos.h (c4x_interrupt_function_p): Add.\n\t(c4x_expand_prologue, c4x_expand_epilogue): Likewise.\n\t(c4x_valid_type_attribute_p): Likewise.\n\t* config/c4x/c4x.h (FUNCTION_PROLOGUE, FUNCTION_EPILOGUE): Delete.\n\t(FUNCTION_BLOCK_PROFILER_EXIT): Convert to emit RTL.\n\nCo-Authored-By: Michael Hayes <m.hayes@elec.canterbury.ac.nz>\n\nFrom-SVN: r35341", "tree": {"sha": "211ecd0d22d4a820f5b6d0ed0ccf5ea553034823", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/211ecd0d22d4a820f5b6d0ed0ccf5ea553034823"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52695ce05ba7da1fd8b657c6da2c74b548f1dc57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52695ce05ba7da1fd8b657c6da2c74b548f1dc57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52695ce05ba7da1fd8b657c6da2c74b548f1dc57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52695ce05ba7da1fd8b657c6da2c74b548f1dc57/comments", "author": null, "committer": null, "parents": [{"sha": "8d485e2d2fc1894a7db2ca0d60cd08eeb6b9e768", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d485e2d2fc1894a7db2ca0d60cd08eeb6b9e768", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d485e2d2fc1894a7db2ca0d60cd08eeb6b9e768"}], "stats": {"total": 426, "additions": 202, "deletions": 224}, "files": [{"sha": "593527044899d3fb51247d88482b422d62dc2d11", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52695ce05ba7da1fd8b657c6da2c74b548f1dc57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52695ce05ba7da1fd8b657c6da2c74b548f1dc57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52695ce05ba7da1fd8b657c6da2c74b548f1dc57", "patch": "@@ -1,3 +1,17 @@\n+2000-07-30 Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n+\t   Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* config/c4x/c4x.md (set_ldp_prologue): Add for RTL prologue/epilogue.\n+\t(push_st, push_dp, pop_st, pop_dp, popqi_unspec): Likewise.\n+\t(nodb_call, return_from_epilogue): Likewise.\n+\t(return_from_interrupt_epilogue, prologue, epilogue): Likewise.\n+\t* config/c4x/c4x.c (c4x_expand_prologue, c4x_expand_eplilogue): Add.\n+\t* config/c4x/c4x-protos.h (c4x_interrupt_function_p): Add.\n+\t(c4x_expand_prologue, c4x_expand_epilogue): Likewise.\n+\t(c4x_valid_type_attribute_p): Likewise.\n+\t* config/c4x/c4x.h (FUNCTION_PROLOGUE, FUNCTION_EPILOGUE): Delete.\n+\t(FUNCTION_BLOCK_PROFILER_EXIT): Convert to emit RTL.\n+\t\n 2000-07-30  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* config/c4x/c4x.c (c4x_emit_move_sequence): Use loadqi_big_constant"}, {"sha": "cd7c0292bb5f1af467120a4f0a18275c40133085", "filename": "gcc/config/c4x/c4x-protos.h", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52695ce05ba7da1fd8b657c6da2c74b548f1dc57/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52695ce05ba7da1fd8b657c6da2c74b548f1dc57/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h?ref=52695ce05ba7da1fd8b657c6da2c74b548f1dc57", "patch": "@@ -28,9 +28,11 @@ extern void c4x_optimization_options PARAMS ((int, int));\n \n extern void c4x_output_ascii PARAMS ((FILE *, const char *, int));\n \n-extern void c4x_function_prologue PARAMS ((FILE *, int));\n+extern int c4x_interrupt_function_p PARAMS ((void));\n \n-extern void c4x_function_epilogue PARAMS ((FILE *, int));\n+extern void c4x_expand_prologue PARAMS ((void));\n+\n+extern void c4x_expand_epilogue PARAMS ((void));\n \n extern int c4x_null_epilogue_p PARAMS ((void));\n \n@@ -55,6 +57,8 @@ extern struct rtx_def *c4x_function_arg PARAMS ((CUMULATIVE_ARGS *,\n \t\t\t\t\t\t int));\n \n extern void c4x_encode_section_info PARAMS ((tree));\n+\n+extern int c4x_valid_type_attribute_p PARAMS ((tree, tree, tree, tree));\n #endif /* TREE_CODE */\n \n \n@@ -72,7 +76,7 @@ extern struct rtx_def *c4x_gen_compare_reg PARAMS ((enum rtx_code, rtx, rtx));\n \n extern int c4x_check_legit_addr PARAMS ((enum machine_mode, rtx, int));\n \n-extern int c4x_hard_regno_mode_ok PARAMS ((int, enum machine_mode));\n+extern int c4x_hard_regno_mode_ok PARAMS ((unsigned int, enum machine_mode));\n \n extern struct rtx_def *c4x_legitimize_address PARAMS ((rtx,\n \t\t\t\t\t\t       enum machine_mode));\n@@ -91,7 +95,7 @@ extern enum reg_class c4x_preferred_reload_class PARAMS ((rtx,\n extern struct rtx_def *c4x_operand_subword PARAMS ((rtx, int, int,\n \t\t\t\t\t\t   enum machine_mode));\n \n-extern char *c4x_output_cbranch PARAMS ((char *, rtx));\n+extern char *c4x_output_cbranch PARAMS ((const char *, rtx));\n \n extern int c4x_label_conflict PARAMS ((rtx, rtx, rtx));\n \n@@ -101,12 +105,16 @@ extern int c4x_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n \n extern void c4x_process_after_reload PARAMS ((rtx));\n \n+extern void c4x_rptb_insert PARAMS ((rtx insn));\n+\n extern int c4x_rptb_nop_p PARAMS ((rtx));\n \n extern int c4x_rptb_rpts_p PARAMS ((rtx, rtx));\n \n extern int c4x_autoinc_operand PARAMS ((rtx, enum machine_mode));\n \n+extern int any_operand PARAMS ((rtx, enum machine_mode));\n+\n extern int fp_zero_operand PARAMS ((rtx, enum machine_mode));\n \n extern int const_operand PARAMS ((rtx, enum machine_mode));"}, {"sha": "9afe59a7bdb2104d92aa9f654db4d61b9f33f27a", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52695ce05ba7da1fd8b657c6da2c74b548f1dc57/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52695ce05ba7da1fd8b657c6da2c74b548f1dc57/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=52695ce05ba7da1fd8b657c6da2c74b548f1dc57", "patch": "@@ -1346,24 +1346,6 @@ c4x_emit_move_sequence (operands, mode)\n       return 1;\n     }\n \n-  if (mode == QImode\n-      && reg_operand (op0, mode)\n-      && const_int_operand (op1, mode)\n-      && ! IS_INT16_CONST (INTVAL (op1))\n-      && ! IS_HIGH_CONST (INTVAL (op1)))\n-    {\n-      emit_insn (gen_loadqi_big_constant (op0, op1));\n-      return 1;\n-    }\n-\n-  if (mode == HImode\n-      && reg_operand (op0, mode)\n-      && const_int_operand (op1, mode))\n-    {\n-      emit_insn (gen_loadhi_big_constant (op0, op1));\n-      return 1;\n-    }\n-\n   /* Adjust operands in case we have modified them.  */\n   operands[0] = op0;\n   operands[1] = op1;"}, {"sha": "7cc8169cbabf8af4489b0489cf0aa2944a893623", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52695ce05ba7da1fd8b657c6da2c74b548f1dc57/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52695ce05ba7da1fd8b657c6da2c74b548f1dc57/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=52695ce05ba7da1fd8b657c6da2c74b548f1dc57", "patch": "@@ -1153,12 +1153,6 @@ CUMULATIVE_ARGS;\n #define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n   c4x_va_arg (valist, type)\n \n-/* Function Entry and Exit.  */\n-\n-#define FUNCTION_PROLOGUE(FILE, SIZE)\tc4x_function_prologue(FILE, SIZE)\n-#define FUNCTION_EPILOGUE(FILE, SIZE)\tc4x_function_epilogue(FILE, SIZE)\n-\n-\n /* Generating Code for Profiling.  */\n \n /* Note that the generated assembly uses the ^ operator to load the 16\n@@ -1378,13 +1372,16 @@ CUMULATIVE_ARGS;\n       }\t\t\t\t\t\t\t\t\\\n     }\n \n-#define FUNCTION_BLOCK_PROFILER_EXIT(FILE)\t\t\t\\\n+#define FUNCTION_BLOCK_PROFILER_EXIT\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"\\tpush\\tst\\n\");\t\t\t\t\\\n-\tfprintf (FILE, \"\\tpush\\tar2\\n\");\t\t\t\\\n-\tfprintf (FILE, \"\\tcall\\t___bb_trace_ret\\n\");\t\t\\\n-\tfprintf (FILE, \"\\tpop\\tar2\\n\");\t\t\t\t\\\n-\tfprintf (FILE, \"\\tpop\\tst\\n\");\t\t\t\t\\\n+      emit_insn (gen_push_st ()); \t\t\t\t\\\n+      emit_insn (gen_pushqi (\t\t\t\t\t\\\n+\t\tgen_rtx_REG (QImode, AR2_REGNO)));\t\t\\\n+      emit_call_insn (gen_nodb_call (\t\t\t\t\\\n+\t\tgen_rtx_SYMBOL_REF (QImode, \"__bb_trace_ret\")));\\\n+      emit_insn (gen_popqi_unspec (\t\t\t\t\\\n+\t\tgen_rtx_REG (QImode, AR2_REGNO)));\t\t\\\n+      emit_insn (gen_pop_st ());\t\t\t\t\\\n     }\n \n #define\tMACHINE_STATE_SAVE(ID)\t\t\\"}, {"sha": "99ca228c65c0a3696c232cccd750083aacb38027", "filename": "gcc/config/c4x/c4x.md", "status": "modified", "additions": 167, "deletions": 190, "changes": 357, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52695ce05ba7da1fd8b657c6da2c74b548f1dc57/gcc%2Fconfig%2Fc4x%2Fc4x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52695ce05ba7da1fd8b657c6da2c74b548f1dc57/gcc%2Fconfig%2Fc4x%2Fc4x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.md?ref=52695ce05ba7da1fd8b657c6da2c74b548f1dc57", "patch": "@@ -455,6 +455,13 @@\n ; 11 loadqf_int\n ; 12 storeqf_int\n ; 13 Conditional load on overflow\n+; 14 push_st\n+; 15 pop_st\n+; 16 push_dp\n+; 17 pop_dp\n+; 18 popqi_unspec\n+; 19 popqf_unspec\n+; 20 andn_st\n ; 22 rptb_init\n \n ;\n@@ -490,24 +497,6 @@\n (define_function_unit \"dummy\" 1 0 (const_int 0) 2 1)\n (define_function_unit \"dummy\" 1 0 (const_int 0) 3 1)\n \n-;(define_function_unit \"ar0\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"setar0\" \"1\")\n-;                 (eq_attr \"usear0\" \"1\")))\n-;       3 1 )\n-\n-;(define_function_unit \"ar0\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"setlda_ar0\" \"1\")\n-;                 (eq_attr \"usear0\" \"1\")))\n-;       2 1 )\n-\n-;(define_function_unit \"ar0\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"usear0\" \"1\")\n-;                 (eq_attr \"readar0\" \"1\")))\n-;       2 1 )\n-\n ; The attribute setar0 is set to 1 for insns where ar0 is a dst operand.\n ; Note that the attributes unarycc and binarycc do not apply\n ; if ar0 is a dst operand (only loading an ext. prec. reg. sets CC)\n@@ -553,24 +542,6 @@\n                                      (const_int 1) (const_int 0))]\n              (const_int 0)))\n \n-;(define_function_unit \"ar1\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"setar1\" \"1\")\n-;                 (eq_attr \"usear1\" \"1\")))\n-;       3 1 )\n-\n-;(define_function_unit \"ar1\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"setlda_ar1\" \"1\")\n-;                 (eq_attr \"usear1\" \"1\")))\n-;       2 1 )\n-\n-;(define_function_unit \"ar1\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"usear1\" \"1\")\n-;                 (eq_attr \"readar1\" \"1\")))\n-;       2 1 )\n-\n (define_attr \"setar1\" \"\"\n        (cond [(eq_attr \"type\" \"unary,binary\")\n                        (if_then_else (match_operand 0 \"ar1_reg_operand\" \"\")\n@@ -610,24 +581,6 @@\n                                      (const_int 1) (const_int 0))]\n              (const_int 0)))\n \n-;(define_function_unit \"ar2\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"setar2\" \"1\")\n-;                 (eq_attr \"usear2\" \"1\")))\n-;       3 1 )\n-\n-;(define_function_unit \"ar2\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"setlda_ar2\" \"1\")\n-;                 (eq_attr \"usear2\" \"1\")))\n-;       2 1 )\n-\n-;(define_function_unit \"ar2\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"usear2\" \"1\")\n-;                 (eq_attr \"readar2\" \"1\")))\n-;       2 1 )\n-\n (define_attr \"setar2\" \"\"\n        (cond [(eq_attr \"type\" \"unary,binary\")\n                        (if_then_else (match_operand 0 \"ar2_reg_operand\" \"\")\n@@ -667,24 +620,6 @@\n                                      (const_int 1) (const_int 0))]\n              (const_int 0)))\n \n-;(define_function_unit \"ar3\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"setar3\" \"1\")\n-;                 (eq_attr \"usear3\" \"1\")))\n-;       3 1 )\n-\n-;(define_function_unit \"ar3\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"setlda_ar3\" \"1\")\n-;                 (eq_attr \"usear3\" \"1\")))\n-;       2 1 )\n-\n-;(define_function_unit \"ar3\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"usear3\" \"1\")\n-;                 (eq_attr \"readar3\" \"1\")))\n-;       2 1 )\n-\n (define_attr \"setar3\" \"\"\n        (cond [(eq_attr \"type\" \"unary,binary\")\n                        (if_then_else (match_operand 0 \"ar3_reg_operand\" \"\")\n@@ -724,24 +659,6 @@\n                                      (const_int 1) (const_int 0))]\n              (const_int 0)))\n \n-;(define_function_unit \"ar4\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"setar4\" \"1\")\n-;                 (eq_attr \"usear4\" \"1\")))\n-;       3 1 )\n-\n-;(define_function_unit \"ar4\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"setlda_ar4\" \"1\")\n-;                 (eq_attr \"usear4\" \"1\")))\n-;       2 1 )\n-\n-;(define_function_unit \"ar4\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"usear4\" \"1\")\n-;                 (eq_attr \"readar4\" \"1\")))\n-;       2 1 )\n-\n (define_attr \"setar4\" \"\"\n        (cond [(eq_attr \"type\" \"unary,binary\")\n                        (if_then_else (match_operand 0 \"ar4_reg_operand\" \"\")\n@@ -781,24 +698,6 @@\n                                      (const_int 1) (const_int 0))]\n              (const_int 0)))\n \n-;(define_function_unit \"ar5\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"setar5\" \"1\")\n-;                 (eq_attr \"usear5\" \"1\")))\n-;       3 1 )\n-\n-;(define_function_unit \"ar5\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"setlda_ar5\" \"1\")\n-;                 (eq_attr \"usear5\" \"1\")))\n-;       2 1 )\n-\n-;(define_function_unit \"ar5\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"usear5\" \"1\")\n-;                 (eq_attr \"readar5\" \"1\")))\n-;       2 1 )\n-\n (define_attr \"setar5\" \"\"\n        (cond [(eq_attr \"type\" \"unary,binary\")\n                        (if_then_else (match_operand 0 \"ar5_reg_operand\" \"\")\n@@ -838,24 +737,6 @@\n                                      (const_int 1) (const_int 0))]\n              (const_int 0)))\n \n-;(define_function_unit \"ar6\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"setar6\" \"1\")\n-;                 (eq_attr \"usear6\" \"1\")))\n-;       3 1 )\n-\n-;(define_function_unit \"ar6\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"setlda_ar6\" \"1\")\n-;                 (eq_attr \"usear6\" \"1\")))\n-;       2 1 )\n-\n-;(define_function_unit \"ar6\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"usear6\" \"1\")\n-;                 (eq_attr \"readar6\" \"1\")))\n-;       2 1 )\n-\n (define_attr \"setar6\" \"\"\n        (cond [(eq_attr \"type\" \"unary,binary\")\n                        (if_then_else (match_operand 0 \"ar6_reg_operand\" \"\")\n@@ -895,24 +776,6 @@\n                                      (const_int 1) (const_int 0))]\n              (const_int 0)))\n \n-;(define_function_unit \"ar7\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"setar7\" \"1\")\n-;                 (eq_attr \"usear7\" \"1\")))\n-;       3 1 )\n-\n-;(define_function_unit \"ar7\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"setlda_ar7\" \"1\")\n-;                 (eq_attr \"usear7\" \"1\")))\n-;       2 1 )\n-\n-;(define_function_unit \"ar7\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"usear7\" \"1\")\n-;                 (eq_attr \"readar7\" \"1\")))\n-;       2 1 )\n-\n (define_attr \"setar7\" \"\"\n        (cond [(eq_attr \"type\" \"unary,binary\")\n                        (if_then_else (match_operand 0 \"ar7_reg_operand\" \"\")\n@@ -952,18 +815,6 @@\n                                      (const_int 1) (const_int 0))]\n              (const_int 0)))\n \n-;(define_function_unit \"ir0\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"setir0\" \"1\")\n-;                 (eq_attr \"useir0\" \"1\")))\n-;       3 1 )\n-\n-;(define_function_unit \"ir0\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"setlda_ir0\" \"1\")\n-;                 (eq_attr \"useir0\" \"1\")))\n-;       2 1 )\n-\n (define_attr \"setir0\" \"\"\n        (cond [(eq_attr \"type\" \"unary,binary\")\n                        (if_then_else (match_operand 0 \"ir0_reg_operand\" \"\")\n@@ -988,18 +839,6 @@\n                                      (const_int 1) (const_int 0))]\n              (const_int 0)))\n \n-;(define_function_unit \"ir1\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"setir1\" \"1\")\n-;                 (eq_attr \"useir1\" \"1\")))\n-;       3 1 )\n-\n-;(define_function_unit \"ir1\" 1 0\n-;       (and (eq_attr \"cpu\" \"c4x\")\n-;            (and (eq_attr \"setlda_ir1\" \"1\")\n-;                 (eq_attr \"useir1\" \"1\")))\n-;       2 1 )\n-\n (define_attr \"setir1\" \"\"\n        (cond [(eq_attr \"type\" \"unary,binary\")\n                        (if_then_else (match_operand 0 \"ir1_reg_operand\" \"\")\n@@ -1041,18 +880,6 @@\n ; Let's ignore functional groups 2 and 3 for now, since they are not\n ; so important.\n \n-;(define_function_unit \"group1\" 1 0\n-;       (and (eq_attr \"cpu\" \"c3x\")\n-;            (and (eq_attr \"setgroup1\" \"1\")\n-;                 (eq_attr \"usegroup1\" \"1\")))\n-;       3 1)\n-\n-;(define_function_unit \"group1\" 1 0\n-;       (and (eq_attr \"cpu\" \"c3x\")\n-;            (and (eq_attr \"usegroup1\" \"1\")\n-;                 (eq_attr \"readarx\" \"1\")))\n-;       2 1)\n-\n (define_attr \"setgroup1\" \"\"\n        (cond [(eq_attr \"type\" \"lda,unary,binary\")\n                   (if_then_else (match_operand 0 \"group1_reg_operand\" \"\")\n@@ -1108,6 +935,13 @@\n   \"* return (TARGET_C3X) ? \\\"ldp\\\\t%A1\\\" : \\\"ldpk\\\\t%A1\\\";\"\n   [(set_attr \"type\" \"ldp\")])\n \n+(define_insn \"set_ldp_prologue\"\n+  [(set (match_operand:QI 0 \"dp_reg_operand\" \"=z\")\n+        (high:QI (match_operand:QI 1 \"\" \"\")))]\n+  \"TARGET_SMALL && TARGET_PARANOID\"\n+  \"* return (TARGET_C3X) ? \\\"ldp\\\\t@data_sec\\\" : \\\"ldpk\\\\t@data_sec\\\";\"\n+  [(set_attr \"type\" \"ldp\")])\n+\n (define_insn \"set_high\"\n   [(set (match_operand:QI 0 \"std_reg_operand\" \"=c\")\n         (high:QI (match_operand:QI 1 \"symbolic_address_operand\" \"\")))]\n@@ -1544,6 +1378,18 @@\n }\")\n \n \n+; As far as GCC is concerned, the moves are performed in parallel\n+; thus it must be convinced that there is no aliasing.\n+; It also assumes that the input operands are simultaneously loaded\n+; and then the output operands are simultaneously stored.\n+; With the C4x, if there are parallel stores to the same address\n+; both stores are executed.\n+; If there is a parallel load and store to the same address,\n+; the load is performed first.\n+; The problem with this pattern is that reload can spoil\n+; the show when it eliminates a reference to the frame pointer.\n+; This can invalidate the memory addressing mode, i.e., when\n+; the displacement is greater than 1.\n (define_insn \"movqi_parallel\"\n   [(set (match_operand:QI 0 \"parallel_operand\" \"=q,S<>!V,q,S<>!V\")\n         (match_operand:QI 1 \"parallel_operand\" \"S<>!V,q,S<>!V,q\"))\n@@ -1560,21 +1406,58 @@\n ;\n ; PUSH/POP\n ;\n-(define_insn \"*pushqi\"\n+(define_insn \"pushqi\"\n   [(set (mem:QI (pre_inc:QI (reg:QI 20)))\n         (match_operand:QI 0 \"reg_operand\" \"r\"))]\n   \"\"\n   \"push\\\\t%0\"\n   [(set_attr \"type\" \"push\")])\n \n-(define_insn \"*popqi\"\n+(define_insn \"push_st\"\n+  [(set (mem:QI (pre_inc:QI (reg:QI 20))) (unspec:QI [(reg:QI 21)] 14))\n+   (use (reg:QI 21))]\n+  \"\"\n+  \"push\\\\tst\"\n+  [(set_attr \"type\" \"push\")])\n+\n+(define_insn \"push_dp\"\n+  [(set (mem:QI (pre_inc:QI (reg:QI 20))) (unspec:QI [(reg:QI 16)] 16))\n+   (use (reg:QI 16))]\n+  \"\"\n+  \"push\\\\tdp\"\n+  [(set_attr \"type\" \"push\")])\n+\n+(define_insn \"popqi\"\n   [(set (match_operand:QI 0 \"reg_operand\" \"=r\")\n         (mem:QI (post_dec:QI (reg:QI 20))))\n    (clobber (reg:CC 21))]\n   \"\"\n   \"pop\\\\t%0\"\n   [(set_attr \"type\" \"pop\")])\n \n+(define_insn \"pop_st\"\n+  [(set (unspec:QI [(reg:QI 21)] 15) (mem:QI (post_dec:QI (reg:QI 20))))\n+   (clobber (reg:CC 21))]\n+  \"\"\n+  \"pop\\\\tst\"\n+  [(set_attr \"type\" \"pop\")])\n+\n+(define_insn \"pop_dp\"\n+  [(set (unspec:QI [(reg:QI 16)] 17) (mem:QI (post_dec:QI (reg:QI 20))))\n+   (clobber (reg:CC 16))]\n+  \"\"\n+  \"pop\\\\tdp\"\n+  [(set_attr \"type\" \"pop\")])\n+\n+(define_insn \"popqi_unspec\"\n+  [(set (unspec:QI [(match_operand:QI 0 \"reg_operand\" \"=r\")] 18)\n+        (mem:QI (post_dec:QI (reg:QI 20))))\n+   (clobber (match_dup 0))\n+   (clobber (reg:CC 21))]\n+  \"\"\n+  \"pop\\\\t%0\"\n+  [(set_attr \"type\" \"pop\")])\n+\n ;\n ; ABSI\n ;\n@@ -2598,6 +2481,19 @@\n   [(set_attr \"type\" \"binary,binary,binary,binary\")\n    (set_attr \"data\" \"not_uint16,uint16,int16,uint16\")])\n \n+(define_insn \"andn_st\"\n+  [(set (unspec:QI [(reg:QI 21)] 20)\n+        (and:QI (unspec:QI [(reg:QI 21)] 20)\n+                (match_operand:QI 0 \"\" \"N\")))\n+   (use (match_dup 0))\n+   (use (reg:CC 21))\n+   (clobber (reg:CC 21))]\n+  \"\"\n+  \"@\n+   andn\\\\t%N0,st\"\n+  [(set_attr \"type\" \"misc\")\n+   (set_attr \"data\" \"not_uint16\")])\n+\n (define_split\n   [(set (match_operand:QI 0 \"std_reg_operand\" \"\")\n         (and:QI (match_operand:QI 1 \"src_operand\" \"\")\n@@ -3669,21 +3565,29 @@\n ;\n ; PUSH/POP\n ;\n-(define_insn \"*pushqf\"\n+(define_insn \"pushqf\"\n   [(set (mem:QF (pre_inc:QI (reg:QI 20)))\n         (match_operand:QF 0 \"reg_operand\" \"f\"))]\n  \"\"\n  \"pushf\\\\t%0\"\n  [(set_attr \"type\" \"push\")])\n \n-(define_insn \"*popqf\"\n+(define_insn \"popqf\"\n   [(set (match_operand:QF 0 \"reg_operand\" \"=f\")\n         (mem:QF (post_dec:QI (reg:QI 20))))\n    (clobber (reg:CC 21))]\n  \"\"\n  \"popf\\\\t%0\"\n  [(set_attr \"type\" \"pop\")])\n \n+(define_insn \"popqf_unspec\"\n+  [(set (unspec:QF [(match_operand:QF 0 \"reg_operand\" \"=f\")] 19)\n+        (mem:QF (post_dec:QI (reg:QI 20))))\n+   (clobber (match_dup 0))\n+   (clobber (reg:CC 21))]\n+ \"\"\n+ \"popf\\\\t%0\"\n+ [(set_attr \"type\" \"pop\")])\n \n ;\n ; ABSF\n@@ -4269,7 +4173,7 @@\n   \"\"\n   \"@\n    ldiv\\\\t%1,%0\"\n-  [(set_attr \"type\" \"binary\")])\n+  [(set_attr \"type\" \"unary\")])\n \n ; Move operand 2 to operand 0 if condition (operand 1) is true\n ; else move operand 3 to operand 0.\n@@ -5065,6 +4969,13 @@\n \t\t\t       force_reg (Pmode, XEXP (operands[0], 0)));\n }\")\n \n+(define_insn \"nodb_call\"\n+ [(call (mem:QI (match_operand:QI 0 \"call_address_operand\" \"Ur\"))\n+\t(const_int 0))]\n+  \"\"\n+  \"call%U0\\\\t%C0\"\n+  [(set_attr \"type\" \"call\")])\n+\n (define_insn \"*callv_c3x\"\n  [(set (match_operand 0 \"\" \"=r\")\n        (call (mem:QI (match_operand:QI 1 \"call_address_operand\" \"Ur\"))\n@@ -5113,6 +5024,18 @@\n   \"rets\"\n   [(set_attr \"type\" \"rets\")])\n \n+(define_insn \"return_from_epilogue\"\n+  [(return)]\n+  \"reload_completed && ! c4x_interrupt_function_p ()\"\n+  \"rets\"\n+  [(set_attr \"type\" \"rets\")])\n+\n+(define_insn \"return_from_interrupt_epilogue\"\n+  [(return)]\n+  \"reload_completed && c4x_interrupt_function_p ()\"\n+  \"reti\"\n+  [(set_attr \"type\" \"rets\")])\n+\n (define_insn \"*return_cc\"\n   [(set (pc)\n         (if_then_else (match_operator 0 \"comparison_operator\"\n@@ -5188,6 +5111,7 @@\n    (set (match_dup 0)\n         (plus:QI (match_dup 0)\n                  (const_int -1)))\n+   (use (reg:QI 20))\n    (clobber (reg:CC_NOOV 21))]\n   \"TARGET_DB && TARGET_LOOP_UNSIGNED\"\n   \"*\n@@ -5224,6 +5148,7 @@\n    (set (match_dup 0)\n         (plus:QI (match_dup 0)\n                  (const_int -1)))\n+   (use (reg:QI 20))\n    (clobber (reg:CC_NOOV 21))]\n   \"reload_completed && TARGET_DB && TARGET_LOOP_UNSIGNED\"\n   [(parallel [(set (pc)\n@@ -5258,6 +5183,7 @@\n    (set (match_dup 0)\n         (plus:QI (match_dup 0)\n                  (const_int -1)))\n+   (use (reg:QI 20))\n    (clobber (reg:CC_NOOV 21))]\n   \"TARGET_DB && (find_reg_note (insn, REG_NONNEG, 0) || TARGET_LOOP_UNSIGNED)\"\n   \"*\n@@ -5296,6 +5222,7 @@\n    (set (match_dup 0)\n         (plus:QI (match_dup 0)\n                  (const_int -1)))\n+   (use (reg:QI 20))\n    (clobber (reg:CC_NOOV 21))]\n   \"reload_completed && TARGET_DB && TARGET_LOOP_UNSIGNED\"\n   [(parallel [(set (pc)\n@@ -5322,6 +5249,15 @@\n   \"nop\")\n ; Default to misc type attr.\n \n+(define_expand \"prologue\"\n+  [(const_int 1)]\n+  \"\"                           \n+  \"c4x_expand_prologue (); DONE;\")\n+\n+(define_expand \"epilogue\"\n+  [(const_int 1)]\n+  \"\"\n+  \"c4x_expand_epilogue (); DONE;\")\n \n ;\n ; RPTB\n@@ -5391,6 +5327,7 @@\n                  (const_int -1)))\n    (use (reg:QI 25))\n    (use (reg:QI 26))\n+   (use (reg:QI 20))\n    (clobber (reg:CC_NOOV 21))]\n   \"\"\n   \"*\n@@ -5421,6 +5358,7 @@\n    (use (match_operand:QI 4 \"const_int_operand\" \"\"))\n    (use (reg:QI 25))\n    (use (reg:QI 26))\n+   (use (reg:QI 20))\n    (clobber (reg:CC_NOOV 21))]\n   \"reload_completed\"\n   [(parallel [(set (pc)\n@@ -5806,7 +5744,7 @@\n ;\n ; PUSH/POP\n ;\n-(define_insn \"*pushhf\"\n+(define_insn \"pushhf\"\n   [(set (mem:HF (pre_inc:QI (reg:QI 20)))\n         (match_operand:HF 0 \"reg_operand\" \"h\"))]\n  \"\"\n@@ -5838,7 +5776,7 @@\n  [(set_attr \"type\" \"push\")])\n \n ; we can not use this because the popf will destroy the low 8 bits\n-;(define_insn \"*pophf\"\n+;(define_insn \"pophf\"\n ;  [(set (match_operand:HF 0 \"reg_operand\" \"=h\")\n ;        (mem:HF (post_dec:QI (reg:QI 20))))\n ;   (clobber (reg:CC 21))]\n@@ -5877,7 +5815,7 @@\n  \"\"\n  \"@\n   popf\\\\t%0\"\n-  [(set_attr \"type\" \"unary\")])\n+  [(set_attr \"type\" \"pop\")])\n \n ;\n ; FIX\n@@ -6824,6 +6762,22 @@\n    c4x_compare_op1 = operands[1];\n    DONE;\")\n \n+(define_insn \"*cmphi_cc\"\n+  [(set (reg:CC 21)\n+        (compare:CC (match_operand:HI 0 \"src_operand\" \"rR,rS<>\")\n+                    (match_operand:HI 1 \"src_operand\" \"R,rS<>\")))]\n+  \"valid_operands (COMPARE, operands, HImode)\"\n+  \"#\"\n+  [(set_attr \"type\" \"multi\")])\n+\n+(define_insn \"*cmphi_cc_noov\"\n+  [(set (reg:CC_NOOV 21)\n+        (compare:CC_NOOV (match_operand:HI 0 \"src_operand\" \"rR,rS<>\")\n+                         (match_operand:HI 1 \"src_operand\" \"R,rS<>\")))]\n+  \"valid_operands (COMPARE, operands, HImode)\"\n+  \"#\"\n+  [(set_attr \"type\" \"multi\")])\n+\n ; This works only before reload because we need 2 extra registers.\n ; Use unspec to avoid recursive split.\n (define_split\n@@ -6851,10 +6805,31 @@\n   \"\")\n \n ; This is normally not used. The define splits above are used first.\n+(define_split\n+  [(set (reg:CC 21)\n+        (compare:CC (match_operand:HI 0 \"src_operand\" \"\")\n+                    (match_operand:HI 1 \"src_operand\" \"\")))]\n+  \"reload_completed\"\n+  [(parallel [(set (reg:CC 21)\n+                   (compare:CC (match_dup 0) (match_dup 1)))\n+              (use (reg:QI 20))])]\n+  \"\")\n+\n+(define_split\n+  [(set (reg:CC_NOOV 21)\n+        (compare:CC_NOOV (match_operand:HI 0 \"src_operand\" \"\")\n+                         (match_operand:HI 1 \"src_operand\" \"\")))]\n+  \"reload_completed\"\n+  [(parallel [(set (reg:CC_NOOV 21)\n+                   (compare:CC_NOOV (match_dup 0) (match_dup 1)))\n+              (use (reg:QI 20))])]\n+  \"\")\n+\n (define_insn \"*cmphi\"\n   [(set (reg:CC 21)\n         (compare:CC (match_operand:HI 0 \"src_operand\" \"rR,rS<>\")\n-                    (match_operand:HI 1 \"src_operand\" \"R,rS<>\")))]\n+                    (match_operand:HI 1 \"src_operand\" \"R,rS<>\")))\n+   (use (reg:QI 20))]\n   \"valid_operands (COMPARE, operands, HImode)\"\n   \"*\n    {\n@@ -6904,7 +6879,8 @@\n (define_insn \"*cmphi_noov\"\n   [(set (reg:CC_NOOV 21)\n         (compare:CC_NOOV (match_operand:HI 0 \"src_operand\" \"rR,rS<>\")\n-                    (match_operand:HI 1 \"src_operand\" \"R,rS<>\")))]\n+                         (match_operand:HI 1 \"src_operand\" \"R,rS<>\")))\n+   (use (reg:QI 20))]\n   \"valid_operands (COMPARE, operands, HImode)\"\n   \"*\n    {\n@@ -7031,6 +7007,7 @@\n      (set (match_dup 0)\n           (plus:QI (match_dup 0)\n                    (const_int -1)))\n+     (use (reg:QI 20))\n      (clobber (reg:CC_NOOV 21))])]\n   \"! c4x_label_conflict (insn, operands[2], operands[1])\"\n   \"db%I3\\\\t%0,%l1\\\\n\\\\tb%3\\\\t%l2\""}]}