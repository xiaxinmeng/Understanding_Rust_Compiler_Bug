{"sha": "2a186d97aa308f41d3a6bd776fede5e8916789b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmExODZkOTdhYTMwOGY0MWQzYTZiZDc3NmZlZGU1ZTg5MTY3ODliOA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2005-04-23T14:03:53Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2005-04-23T14:03:53Z"}, "message": "config.gcc: Specify .opt files.\n\n\t* config.gcc <cris-*>: Specify .opt files.\n\t* config/cris/cris.opt, config/cris/elf.opt, config/cris/aout.opt,\n\tconfig/cris/linux.opt: New files.\n\t* config/cris/aout.h (CRIS_SUBTARGET_SWITCHES)\n\t(CRIS_SUBTARGET_LONG_OPTIONS): Don't define.\n\t(TARGET_ELF): Override to 0.\n\t(CRIS_SUBTARGET_HANDLE_OPTION): Override to handle -melinux and\n\t-melinux-stacksize=N.\n\t* config/cris/cris.c: (cris_handle_option): New function.\n\t(TARGET_DEFAULT_TARGET_FLAGS): Override.\n\t(TARGET_HANDLE_OPTION): Override to cris_handle_option.\n\t(cris_override_options): Use MASK_*, not TARGET_MASK_*.\n\t* config/cris/cris.h (TARGET_MASK_SVINTO, TARGET_SVINTO,\n\t(TARGET_MASK_CCINIT, TARGET_CCINIT, TARGET_MASK_PDEBUG)\n\t(TARGET_PDEBUG, TARGET_MASK_SIDE_EFFECT_PREFIXES)\n\t(TARGET_SIDE_EFFECT_PREFIXES, TARGET_MASK_EXPAND_MUL)\n\t(TARGET_EXPAND_MUL, TARGET_MASK_STACK_ALIGN, TARGET_STACK_ALIGN)\n\t(TARGET_MASK_CONST_ALIGN, TARGET_CONST_ALIGN)\n\t(TARGET_MASK_DATA_ALIGN, TARGET_DATA_ALIGN)\n\t(TARGET_MASK_PROLOGUE_EPILOGUE, TARGET_PROLOGUE_EPILOGUE)\n\t(TARGET_MASK_ETRAX4_ADD, TARGET_ETRAX4_ADD)\n\t(TARGET_MASK_ALIGN_BY_32, TARGET_ALIGN_BY_32, TARGET_MASK_ELF)\n\t(TARGET_ELF, TARGET_MASK_LINUX, TARGET_LINUX)\n\t(TARGET_MASK_AVOID_GOTPLT, TARGET_AVOID_GOTPLT)\n\t(TARGET_MASK_MUL_BUG, TARGET_MUL_BUG, TARGET_SWITCHES)\n\t(CRIS_SUBTARGET_SWITCHES, TARGET_OPTIONS)\n\t(CRIS_SUBTARGET_LONG_OPTIONS): Don't define.\n\t(TARGET_LINUX): Define 0.\n\t(TARGET_DEFAULT): Use MASK_*, not TARGET_MASK_*.\n\t(CRIS_SUBTARGET_DEFAULT): Define to 0, not TARGET_MASK_ELF.\n\t(CRIS_SUBTARGET_DEFAULT): New empty default macro.\n\t* config/cris/linux.h (CRIS_SUBTARGET_SWITCHES): Don't define.\n\t(TARGET_LINUX): Override to 1.\n\t(CRIS_SUBTARGET_DEFAULT): Use MASK_*, not TARGET_MASK_*.\n\nFrom-SVN: r98611", "tree": {"sha": "66d1948db388fb585f4d1b8b9ddff5c4dd37feb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66d1948db388fb585f4d1b8b9ddff5c4dd37feb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a186d97aa308f41d3a6bd776fede5e8916789b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a186d97aa308f41d3a6bd776fede5e8916789b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a186d97aa308f41d3a6bd776fede5e8916789b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a186d97aa308f41d3a6bd776fede5e8916789b8/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bfe936c0c1f9592f72aa5d5f9f84a94ef507b9ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfe936c0c1f9592f72aa5d5f9f84a94ef507b9ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfe936c0c1f9592f72aa5d5f9f84a94ef507b9ec"}], "stats": {"total": 664, "additions": 449, "deletions": 215}, "files": [{"sha": "c11ac78443b7ff81d1f876e10516799098d8df4e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a186d97aa308f41d3a6bd776fede5e8916789b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a186d97aa308f41d3a6bd776fede5e8916789b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a186d97aa308f41d3a6bd776fede5e8916789b8", "patch": "@@ -1,3 +1,40 @@\n+2005-04-23  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* config.gcc <cris-*>: Specify .opt files.\n+\t* config/cris/cris.opt, config/cris/elf.opt, config/cris/aout.opt,\n+\tconfig/cris/linux.opt: New files.\n+\t* config/cris/aout.h (CRIS_SUBTARGET_SWITCHES)\n+\t(CRIS_SUBTARGET_LONG_OPTIONS): Don't define.\n+\t(TARGET_ELF): Override to 0.\n+\t(CRIS_SUBTARGET_HANDLE_OPTION): Override to handle -melinux and\n+\t-melinux-stacksize=N.\n+\t* config/cris/cris.c: (cris_handle_option): New function.\n+\t(TARGET_DEFAULT_TARGET_FLAGS): Override.\n+\t(TARGET_HANDLE_OPTION): Override to cris_handle_option.\n+\t(cris_override_options): Use MASK_*, not TARGET_MASK_*.\n+\t* config/cris/cris.h (TARGET_MASK_SVINTO, TARGET_SVINTO,\n+\t(TARGET_MASK_CCINIT, TARGET_CCINIT, TARGET_MASK_PDEBUG)\n+\t(TARGET_PDEBUG, TARGET_MASK_SIDE_EFFECT_PREFIXES)\n+\t(TARGET_SIDE_EFFECT_PREFIXES, TARGET_MASK_EXPAND_MUL)\n+\t(TARGET_EXPAND_MUL, TARGET_MASK_STACK_ALIGN, TARGET_STACK_ALIGN)\n+\t(TARGET_MASK_CONST_ALIGN, TARGET_CONST_ALIGN)\n+\t(TARGET_MASK_DATA_ALIGN, TARGET_DATA_ALIGN)\n+\t(TARGET_MASK_PROLOGUE_EPILOGUE, TARGET_PROLOGUE_EPILOGUE)\n+\t(TARGET_MASK_ETRAX4_ADD, TARGET_ETRAX4_ADD)\n+\t(TARGET_MASK_ALIGN_BY_32, TARGET_ALIGN_BY_32, TARGET_MASK_ELF)\n+\t(TARGET_ELF, TARGET_MASK_LINUX, TARGET_LINUX)\n+\t(TARGET_MASK_AVOID_GOTPLT, TARGET_AVOID_GOTPLT)\n+\t(TARGET_MASK_MUL_BUG, TARGET_MUL_BUG, TARGET_SWITCHES)\n+\t(CRIS_SUBTARGET_SWITCHES, TARGET_OPTIONS)\n+\t(CRIS_SUBTARGET_LONG_OPTIONS): Don't define.\n+\t(TARGET_LINUX): Define 0.\n+\t(TARGET_DEFAULT): Use MASK_*, not TARGET_MASK_*.\n+\t(CRIS_SUBTARGET_DEFAULT): Define to 0, not TARGET_MASK_ELF.\n+\t(CRIS_SUBTARGET_DEFAULT): New empty default macro.\n+\t* config/cris/linux.h (CRIS_SUBTARGET_SWITCHES): Don't define.\n+\t(TARGET_LINUX): Override to 1.\n+\t(CRIS_SUBTARGET_DEFAULT): Use MASK_*, not TARGET_MASK_*.\n+\n 2005-04-23  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* haifa-sched.c (schedule_block): Fix thinko in previous"}, {"sha": "6dc46cc4f275feb27a889c5210189acb22816d49", "filename": "gcc/config.gcc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a186d97aa308f41d3a6bd776fede5e8916789b8/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a186d97aa308f41d3a6bd776fede5e8916789b8/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=2a186d97aa308f41d3a6bd776fede5e8916789b8", "patch": "@@ -757,16 +757,19 @@ cris-*-aout)\n \ttm_file=\"dbxelf.h ${tm_file} cris/aout.h\"\n \tgas=yes\n \ttmake_file=\"cris/t-cris cris/t-aout\"\n+\textra_options=\"${extra_options} cris/aout.opt\"\n \t;;\n cris-*-elf | cris-*-none)\n \ttm_file=\"dbxelf.h elfos.h ${tm_file}\"\n \ttmake_file=\"cris/t-cris cris/t-elfmulti\"\n \tgas=yes\n+\textra_options=\"${extra_options} cris/elf.opt\"\n \t;;\n cris-*-linux*)\n \ttm_file=\"dbxelf.h elfos.h svr4.h ${tm_file} linux.h cris/linux.h\"\n \t# We need to avoid using t-linux, so override default tmake_file\n \ttmake_file=\"cris/t-cris t-slibgcc-elf-ver cris/t-linux\"\n+\textra_options=\"${extra_options} cris/linux.opt\"\n \t;;\n fr30-*-elf)\n \ttm_file=\"dbxelf.h elfos.h svr4.h ${tm_file}\""}, {"sha": "0b6e61e3cf16c6c151d3907c8b26505ff3510f6c", "filename": "gcc/config/cris/aout.h", "status": "modified", "additions": 29, "deletions": 16, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a186d97aa308f41d3a6bd776fede5e8916789b8/gcc%2Fconfig%2Fcris%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a186d97aa308f41d3a6bd776fede5e8916789b8/gcc%2Fconfig%2Fcris%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Faout.h?ref=2a186d97aa308f41d3a6bd776fede5e8916789b8", "patch": "@@ -74,22 +74,35 @@ Boston, MA 02111-1307, USA.  */\n    %{static:-Bstatic}}\\\n   %{melinux-stacksize=*:-defsym __Stacksize=%*}\"\n \n-#undef CRIS_SUBTARGET_SWITCHES\n-#define CRIS_SUBTARGET_SWITCHES\t\t\t\t\t\t\\\n-  {\"elinux\", (TARGET_MASK_SVINTO\t\t\t\t\t\\\n-\t      + TARGET_MASK_STACK_ALIGN\t\t\t\t\t\\\n-\t      + TARGET_MASK_CONST_ALIGN\t\t\t\t\t\\\n-\t      + TARGET_MASK_DATA_ALIGN\t\t\t\t\t\\\n-\t      + TARGET_MASK_ETRAX4_ADD\t\t\t\t\t\\\n-\t      + TARGET_MASK_ALIGN_BY_32),\t\t\t\t\\\n-   N_(\"Compile for the MMU-less Etrax 100-based elinux system\")},\t\\\n-  /* Legacy option.  */\t\t\t\t\t\t\t\\\n-  {\"aout\",   0,\t\"\"},\n-\n-#undef CRIS_SUBTARGET_LONG_OPTIONS\n-#define CRIS_SUBTARGET_LONG_OPTIONS \\\n-  {\"elinux-stacksize=\", &cris_elinux_stacksize_str,\t\t\t\\\n-   N_(\"For elinux, request a specified stack-size for this program\"), 0},\t\\\n+/* Previously controlled by target_flags.  */\n+#undef TARGET_ELF\n+#define TARGET_ELF 0\n+\n+#undef CRIS_SUBTARGET_HANDLE_OPTION\n+#define CRIS_SUBTARGET_HANDLE_OPTION(CODE, ARG, VALUE)\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      switch (CODE)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\tcase OPT_melinux:\t\t\t\t\\\n+\t  target_flags\t\t\t\t\t\\\n+\t    |= (MASK_SVINTO\t\t\t\t\\\n+\t\t+ MASK_STACK_ALIGN\t\t\t\\\n+\t\t+ MASK_CONST_ALIGN\t\t\t\\\n+\t\t+ MASK_DATA_ALIGN\t\t\t\\\n+\t\t+ MASK_ETRAX4_ADD\t\t\t\\\n+\t\t+ MASK_ALIGN_BY_32);\t\t\t\\\n+\t  break;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+\tcase OPT_melinux_stacksize_:\t\t\t\\\n+\t  cris_elinux_stacksize_str = (ARG);\t\t\\\n+\t  break;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+\tdefault:\t\t\t\t\t\\\n+\t  break;\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n \n #undef CRIS_SUBTARGET_VERSION\n #define CRIS_SUBTARGET_VERSION \" - a.out\""}, {"sha": "f51dc2e68fcada5da86e6a3d1d750412a60bd898", "filename": "gcc/config/cris/aout.opt", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a186d97aa308f41d3a6bd776fede5e8916789b8/gcc%2Fconfig%2Fcris%2Faout.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a186d97aa308f41d3a6bd776fede5e8916789b8/gcc%2Fconfig%2Fcris%2Faout.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Faout.opt?ref=2a186d97aa308f41d3a6bd776fede5e8916789b8", "patch": "@@ -0,0 +1,32 @@\n+; a.out-specific options for the CRIS port of the compiler.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+; Legacy option.\n+maout\n+Target Report RejectNegative Undocumented\n+\n+melinux\n+Target Report RejectNegative\n+Compile for the MMU-less Etrax 100-based elinux system\n+\n+melinux-stacksize=\n+Target Report RejectNegative Joined\n+-melinux-stacksize=SIZE\tFor elinux, request a specified stack-size for this program"}, {"sha": "9c9fb16bab3728c5ecf4172467d2ca6f93afe709", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 83, "deletions": 6, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a186d97aa308f41d3a6bd776fede5e8916789b8/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a186d97aa308f41d3a6bd776fede5e8916789b8/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=2a186d97aa308f41d3a6bd776fede5e8916789b8", "patch": "@@ -134,6 +134,8 @@ static int cris_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t   tree, bool);\n static tree cris_md_asm_clobbers (tree, tree, tree);\n \n+static bool cris_handle_option (size_t, const char *, int);\n+\n /* This is the argument from the \"-max-stack-stackframe=\" option.  */\n const char *cris_max_stackframe_str;\n \n@@ -200,6 +202,10 @@ int cris_cpu_version = CRIS_DEFAULT_CPU_VERSION;\n #define TARGET_ARG_PARTIAL_BYTES cris_arg_partial_bytes\n #undef TARGET_MD_ASM_CLOBBERS\n #define TARGET_MD_ASM_CLOBBERS cris_md_asm_clobbers\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS (TARGET_DEFAULT | CRIS_SUBTARGET_DEFAULT)\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION cris_handle_option\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \n@@ -2032,6 +2038,77 @@ cris_got_symbol (rtx x)\n   return 1;\n }\n \n+/* TARGET_HANDLE_OPTION worker.  We just store the values into local\n+   variables here.  Checks for correct semantics are in\n+   cris_override_options.  */\n+\n+static bool\n+cris_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n+{\n+  switch (code)\n+    {\n+    case OPT_metrax100:\n+      target_flags\n+\t|= (MASK_SVINTO\n+\t    + MASK_ETRAX4_ADD\n+\t    + MASK_ALIGN_BY_32);\n+      break;\n+\n+    case OPT_mno_etrax100:\n+      target_flags\n+\t&= ~(MASK_SVINTO\n+\t     + MASK_ETRAX4_ADD\n+\t     + MASK_ALIGN_BY_32);\n+      break;\n+\n+    case OPT_m32_bit:\n+    case OPT_m32bit:\n+      target_flags\n+\t|= (MASK_STACK_ALIGN\n+\t    + MASK_CONST_ALIGN\n+\t    + MASK_DATA_ALIGN\n+\t    + MASK_ALIGN_BY_32);\n+      break;\n+\n+    case OPT_m16_bit:\n+    case OPT_m16bit:\n+      target_flags\n+\t|= (MASK_STACK_ALIGN\n+\t    + MASK_CONST_ALIGN\n+\t    + MASK_DATA_ALIGN);\n+      break;\n+\n+    case OPT_m8_bit:\n+    case OPT_m8bit:\n+      target_flags\n+\t&= ~(MASK_STACK_ALIGN\n+\t     + MASK_CONST_ALIGN\n+\t     + MASK_DATA_ALIGN);\n+      break;\n+\n+    case OPT_max_stackframe_:\n+    case OPT_mmax_stackframe_:\n+      cris_max_stackframe_str = arg;\n+      break;\n+\n+    case OPT_march_:\n+    case OPT_mcpu_:\n+      cris_cpu_str = arg;\n+      break;\n+\n+    case OPT_mtune_:\n+      cris_tune_str = arg;\n+      break;\n+\n+    default:\n+      break;\n+    }\n+\n+  CRIS_SUBTARGET_HANDLE_OPTION(code, arg, value);\n+\n+  return true;\n+}\n+\n /* The OVERRIDE_OPTIONS worker.\n    As is the norm, this also parses -mfoo=bar type parameters.  */\n \n@@ -2077,14 +2154,14 @@ cris_override_options (void)\n \n       /* Set the target flags.  */\n       if (cris_cpu_version >= CRIS_CPU_ETRAX4)\n-\ttarget_flags |= TARGET_MASK_ETRAX4_ADD;\n+\ttarget_flags |= MASK_ETRAX4_ADD;\n \n       /* If this is Svinto or higher, align for 32 bit accesses.  */\n       if (cris_cpu_version >= CRIS_CPU_SVINTO)\n \ttarget_flags\n-\t  |= (TARGET_MASK_SVINTO | TARGET_MASK_ALIGN_BY_32\n-\t      | TARGET_MASK_STACK_ALIGN | TARGET_MASK_CONST_ALIGN\n-\t      | TARGET_MASK_DATA_ALIGN);\n+\t  |= (MASK_SVINTO | MASK_ALIGN_BY_32\n+\t      | MASK_STACK_ALIGN | MASK_CONST_ALIGN\n+\t      | MASK_DATA_ALIGN);\n \n       /* Note that we do not add new flags when it can be completely\n \t described with a macro that uses -mcpu=X.  So\n@@ -2115,8 +2192,8 @@ cris_override_options (void)\n \t/* We have currently nothing more to tune than alignment for\n \t   memory accesses.  */\n \ttarget_flags\n-\t  |= (TARGET_MASK_STACK_ALIGN | TARGET_MASK_CONST_ALIGN\n-\t      | TARGET_MASK_DATA_ALIGN | TARGET_MASK_ALIGN_BY_32);\n+\t  |= (MASK_STACK_ALIGN | MASK_CONST_ALIGN\n+\t      | MASK_DATA_ALIGN | MASK_ALIGN_BY_32);\n     }\n \n   if (flag_pic)"}, {"sha": "f518238778c8c0338057d94853629b51859ee452", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 10, "deletions": 180, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a186d97aa308f41d3a6bd776fede5e8916789b8/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a186d97aa308f41d3a6bd776fede5e8916789b8/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=2a186d97aa308f41d3a6bd776fede5e8916789b8", "patch": "@@ -257,182 +257,23 @@ extern const char *cris_elinux_stacksize_str;\n /* This needs to be at least 32 bits.  */\n extern int target_flags;\n \n-/* Currently this just affects alignment.  FIXME:  Redundant with\n-   TARGET_ALIGN_BY_32, or put machine stuff here?  */\n-#define TARGET_MASK_SVINTO 1\n-#define TARGET_SVINTO (target_flags & TARGET_MASK_SVINTO)\n-\n-/* If to use condition-codes generated by insns other than the\n-   immediately preceding compare/test insn.\n-    Used to check for errors in notice_update_cc.  */\n-#define TARGET_MASK_CCINIT 2\n-#define TARGET_CCINIT (target_flags & TARGET_MASK_CCINIT)\n-\n-/* Debug option.  */\n-#define TARGET_MASK_PDEBUG 4\n-#define TARGET_PDEBUG (target_flags & TARGET_MASK_PDEBUG)\n-\n-/* If to use side-effect patterns.  Used to debug the [rx=ry+i] type\n-   patterns.  */\n-#define TARGET_MASK_SIDE_EFFECT_PREFIXES 8\n-#define TARGET_SIDE_EFFECT_PREFIXES \\\n- (target_flags & TARGET_MASK_SIDE_EFFECT_PREFIXES)\n-\n-/* If to expand mul into mstep.  Only used when making libc.a.  */\n-#define TARGET_MASK_EXPAND_MUL 16\n-#define TARGET_EXPAND_MUL (target_flags & TARGET_MASK_EXPAND_MUL)\n-\n-/* If to *keep* (not force) alignment of stack at 16 bits.  */\n-#define TARGET_MASK_STACK_ALIGN 32\n-#define TARGET_STACK_ALIGN (target_flags & TARGET_MASK_STACK_ALIGN)\n-\n-/* If to do alignment on individual non-modifiable objects.  */\n-#define TARGET_MASK_CONST_ALIGN 64\n-#define TARGET_CONST_ALIGN (target_flags & TARGET_MASK_CONST_ALIGN)\n-\n-/* If to do alignment on individual modifiable objects.  */\n-#define TARGET_MASK_DATA_ALIGN 128\n-#define TARGET_DATA_ALIGN (target_flags & TARGET_MASK_DATA_ALIGN)\n-\n-/* If not to omit function prologue and epilogue.  */\n-#define TARGET_MASK_PROLOGUE_EPILOGUE 256\n-#define TARGET_PROLOGUE_EPILOGUE (target_flags & TARGET_MASK_PROLOGUE_EPILOGUE)\n-\n-/* Instructions additions from Etrax 4 and up.\n-   (Just \"lz\", which we don't really generate from GCC -- yet).  */\n-#define TARGET_MASK_ETRAX4_ADD 512\n-#define TARGET_ETRAX4_ADD (target_flags & TARGET_MASK_ETRAX4_ADD)\n-\n-/* Say that all alignment specifications say to prefer 32 rather\n-   than 16 bits.  */\n-#define TARGET_MASK_ALIGN_BY_32 1024\n-#define TARGET_ALIGN_BY_32 (target_flags & TARGET_MASK_ALIGN_BY_32)\n-\n-/* This condition is of limited use, as gcc is riddled with #ifdef:s\n-   controlling this, rather than if (...):s.  */\n-#define TARGET_MASK_ELF 2048\n-#define TARGET_ELF (target_flags & TARGET_MASK_ELF)\n-\n-/* Currently just used to error-check other options.  Note that this is\n-   *not* set for -melinux.  */\n-#define TARGET_MASK_LINUX 4096\n-#define TARGET_LINUX (target_flags & TARGET_MASK_LINUX)\n-\n-/* There's a small setup cost with using GOTPLT references, but should\n-   in total be a win both in code-size and execution-time.  */\n-#define TARGET_MASK_AVOID_GOTPLT 8192\n-#define TARGET_AVOID_GOTPLT (target_flags & TARGET_MASK_AVOID_GOTPLT)\n-\n-/* Whether or not to work around multiplication instruction hardware bug\n-   when generating code for models where it may be present.  From the\n-   trouble report for Etrax 100 LX: \"A multiply operation may cause\n-   incorrect cache behaviour under some specific circumstances. The\n-   problem can occur if the instruction following the multiply instruction\n-   causes a cache miss, and multiply operand 1 (source operand) bits\n-   [31:27] matches the logical mapping of the mode register address\n-   (0xb0....), and bits [9:2] of operand 1 matches the TLB register\n-   address (0x258-0x25f).  There is such a mapping in kernel mode or when\n-   the MMU is off.  Normally there is no such mapping in user mode, and\n-   the problem will therefore probably not occur in Linux user mode\n-   programs.\"\n-\n-   We have no sure-fire way to know from within GCC that we're compiling a\n-   user program.  For example, -fpic/PIC is used in libgcc which is linked\n-   into the kernel.  However, the workaround option -mno-mul-bug can be\n-   safely used per-package when compiling programs.  The same goes for\n-   general user-only libraries such as glibc, since there's no user-space\n-   driver-like program that gets a mapping of I/O registers (all on the\n-   same page, including the TLB registers).  */\n-#define TARGET_MASK_MUL_BUG 16384\n-#define TARGET_MUL_BUG (target_flags & TARGET_MASK_MUL_BUG)\n-\n-#define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n- {\t\t\t\t\t\t\t\t\t\\\n-  {\"mul-bug-workaround\",\t\t TARGET_MASK_MUL_BUG,\t\t\\\n-   N_(\"Work around bug in multiplication instruction\")},\t\t\\\n-  {\"no-mul-bug-workaround\",\t\t-TARGET_MASK_MUL_BUG, \"\"},\t\\\n-  /* No \"no-etrax\" as it does not really imply any model.\t\t\\\n-     On the other hand, \"etrax\" implies the common (and large)\t\t\\\n-     subset matching all models.  */\t\t\t\t\t\\\n-  {\"etrax4\",\t\t\t\t TARGET_MASK_ETRAX4_ADD,\t\\\n-   N_(\"Compile for ETRAX 4 (CRIS v3)\")},\t\t\t\t\\\n-  {\"no-etrax4\",\t\t\t\t-TARGET_MASK_ETRAX4_ADD, \"\"},\t\\\n-  {\"etrax100\",\t\t\t     (TARGET_MASK_SVINTO\t\t\\\n-\t\t\t\t      + TARGET_MASK_ETRAX4_ADD\t\t\\\n-\t\t\t\t      + TARGET_MASK_ALIGN_BY_32),\t\\\n-   N_(\"Compile for ETRAX 100 (CRIS v8)\")},\t\t\t\t\\\n-  {\"no-etrax100\",\t\t    -(TARGET_MASK_SVINTO\t\t\\\n-\t\t\t\t      + TARGET_MASK_ETRAX4_ADD), \"\"},\t\\\n-  {\"pdebug\",\t\t\t\t     TARGET_MASK_PDEBUG,\t\\\n-   N_(\"Emit verbose debug information in assembly code\")},\t\t\\\n-  {\"no-pdebug\",\t\t\t\t    -TARGET_MASK_PDEBUG, \"\"},\t\\\n-  {\"cc-init\",\t\t\t\t     TARGET_MASK_CCINIT,\t\\\n-   N_(\"Do not use condition codes from normal instructions\")},\t\t\\\n-  {\"no-cc-init\",\t\t\t    -TARGET_MASK_CCINIT, \"\"},\t\\\n-  {\"side-effects\",\t       TARGET_MASK_SIDE_EFFECT_PREFIXES, \"\"},\t\\\n-  {\"no-side-effects\",\t      -TARGET_MASK_SIDE_EFFECT_PREFIXES,\t\\\n-   N_(\"Do not emit addressing modes with side-effect assignment\")},\t\\\n-  {\"stack-align\",\t\t\tTARGET_MASK_STACK_ALIGN, \"\"},\t\\\n-  {\"no-stack-align\",\t\t       -TARGET_MASK_STACK_ALIGN,\t\\\n-   N_(\"Do not tune stack alignment\")},\t\t\t\t\t\\\n-  {\"data-align\",\t\t\t TARGET_MASK_DATA_ALIGN, \"\"},\t\\\n-  {\"no-data-align\",\t\t\t-TARGET_MASK_DATA_ALIGN,\t\\\n-   N_(\"Do not tune writable data alignment\")},\t\t\t\t\\\n-  {\"const-align\",\t\t\tTARGET_MASK_CONST_ALIGN, \"\"},\t\\\n-  {\"no-const-align\",\t\t       -TARGET_MASK_CONST_ALIGN,\t\\\n-   N_(\"Do not tune code and read-only data alignment\")},\t\t\\\n-  {\"32-bit\",\t\t\t    (TARGET_MASK_STACK_ALIGN\t\t\\\n-\t\t\t\t     + TARGET_MASK_CONST_ALIGN\t\t\\\n-\t\t\t\t     + TARGET_MASK_DATA_ALIGN\t\t\\\n-\t\t\t\t     + TARGET_MASK_ALIGN_BY_32), \"\"},\t\\\n-  {\"32bit\",\t\t\t    (TARGET_MASK_STACK_ALIGN\t\t\\\n-\t\t\t\t     + TARGET_MASK_CONST_ALIGN\t\t\\\n-\t\t\t\t     + TARGET_MASK_DATA_ALIGN\t\t\\\n-\t\t\t\t     + TARGET_MASK_ALIGN_BY_32),\t\\\n-   N_(\"Align code and data to 32 bits\")},\t\t\t\t\\\n-  {\"16-bit\",\t\t\t     (TARGET_MASK_STACK_ALIGN\t\t\\\n-\t\t\t\t      + TARGET_MASK_CONST_ALIGN\t\t\\\n-\t\t\t\t      + TARGET_MASK_DATA_ALIGN), \"\"},\t\\\n-  {\"16bit\",\t\t\t     (TARGET_MASK_STACK_ALIGN\t\t\\\n-\t\t\t\t      + TARGET_MASK_CONST_ALIGN\t\t\\\n-\t\t\t\t      + TARGET_MASK_DATA_ALIGN), \"\"},\t\\\n-  {\"8-bit\",\t\t\t    -(TARGET_MASK_STACK_ALIGN\t\t\\\n-\t\t\t\t      + TARGET_MASK_CONST_ALIGN\t\t\\\n-\t\t\t\t      + TARGET_MASK_DATA_ALIGN), \"\"},\t\\\n-  {\"8bit\",\t\t\t    -(TARGET_MASK_STACK_ALIGN\t\t\\\n-\t\t\t\t      + TARGET_MASK_CONST_ALIGN\t\t\\\n-\t\t\t\t      + TARGET_MASK_DATA_ALIGN),\t\\\n-   N_(\"Don't align items in code or data\")},\t\t\t\t\\\n-  {\"prologue-epilogue\",\t\t  TARGET_MASK_PROLOGUE_EPILOGUE, \"\"},\t\\\n-  {\"no-prologue-epilogue\",\t -TARGET_MASK_PROLOGUE_EPILOGUE,\t\\\n-   N_(\"Do not emit function prologue or epilogue\")},\t\t\t\\\n-  /* We have to handle this m-option here since we can't wash it off in \\\n-     both CC1_SPEC and CC1PLUS_SPEC.  */\t\t\t\t\\\n-  {\"best-lib-options\",\t\t\t\t\t      0,\t\\\n- N_(\"Use the most feature-enabling options allowed by other options\")},\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  /* We must call it \"override-\" since calling it \"no-\" will cause\t\\\n-     gcc.c to forget it, if there's a \"later\" -mbest-lib-options.\t\\\n-     Kludgy, but needed for some multilibbed files.  */\t\t\t\\\n-  {\"override-best-lib-options\",\t\t\t\t      0,\t\\\n-   N_(\"Override -mbest-lib-options\")},\t\t\t\t\t\\\n-  CRIS_SUBTARGET_SWITCHES\t\t\t\t\t\t\\\n-  {\"\",\t\t\tTARGET_DEFAULT | CRIS_SUBTARGET_DEFAULT, \"\"}}\t\\\n+/* Previously controlled by target_flags.  */\n+#define TARGET_ELF 1\n \n-/* For the cris-*-elf subtarget.  */\n-#define CRIS_SUBTARGET_SWITCHES \\\n- {\"elf\", 0, \"\"},\n+/* Previously controlled by target_flags.  Note that this is *not* set\n+   for -melinux.  */\n+#define TARGET_LINUX 0\n \n /* Default target_flags if no switches specified.  */\n #ifndef TARGET_DEFAULT\n # define TARGET_DEFAULT \\\n- (TARGET_MASK_SIDE_EFFECT_PREFIXES + TARGET_MASK_STACK_ALIGN \\\n-  + TARGET_MASK_CONST_ALIGN + TARGET_MASK_DATA_ALIGN \\\n-  + TARGET_MASK_PROLOGUE_EPILOGUE + TARGET_MASK_MUL_BUG)\n+ (MASK_SIDE_EFFECT_PREFIXES + MASK_STACK_ALIGN \\\n+  + MASK_CONST_ALIGN + MASK_DATA_ALIGN \\\n+  + MASK_PROLOGUE_EPILOGUE + MASK_MUL_BUG)\n #endif\n \n /* For the cris-*-elf subtarget.  */\n-#define CRIS_SUBTARGET_DEFAULT TARGET_MASK_ELF\n+#define CRIS_SUBTARGET_DEFAULT 0\n \n #define CRIS_CPU_BASE 0\n #define CRIS_CPU_ETRAX4 3\t/* Just lz added.  */\n@@ -444,18 +285,7 @@ extern int target_flags;\n \n #define TARGET_HAS_MUL_INSNS (cris_cpu_version >= CRIS_CPU_NG)\n \n-#define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n- {{\"cpu=\", &cris_cpu_str, \"\", 0},\t\t\t\t\t\\\n-  {\"arch=\", &cris_cpu_str,\t\t\t\t\t\t\\\n-   N_(\"Generate code for the specified chip or CPU version\"), 0},\t\\\n-  {\"tune=\", &cris_tune_str,\t\t\t\t\t\t\\\n-   N_(\"Tune alignment for the specified chip or CPU version\"), 0},\t\\\n-  {\"max-stackframe=\", &cris_max_stackframe_str,\t\t\t\t\\\n-   N_(\"Warn when a stackframe is larger than the specified size\"), 0},\t\\\n-  CRIS_SUBTARGET_LONG_OPTIONS\t\t\t\t\t\t\\\n-  {\"ax-stackframe=\", &cris_max_stackframe_str, \"\", 0} }\n-\n-#define CRIS_SUBTARGET_LONG_OPTIONS\n+#define CRIS_SUBTARGET_HANDLE_OPTION(x, y, z)\n \n /* Print subsidiary information on the compiler version in use.\n    Do not use VD.D syntax (D=digit), since this will cause confusion"}, {"sha": "0aad8e7d14c54565d87ab56ba240f342ea62ef3d", "filename": "gcc/config/cris/cris.opt", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a186d97aa308f41d3a6bd776fede5e8916789b8/gcc%2Fconfig%2Fcris%2Fcris.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a186d97aa308f41d3a6bd776fede5e8916789b8/gcc%2Fconfig%2Fcris%2Fcris.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.opt?ref=2a186d97aa308f41d3a6bd776fede5e8916789b8", "patch": "@@ -0,0 +1,191 @@\n+; Options for the CRIS port of the compiler.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+; TARGET_MUL_BUG: Whether or not to work around multiplication\n+; instruction hardware bug when generating code for models where\n+; it may be present.  From the trouble report for Etrax 100 LX:\n+; \"A multiply operation may cause incorrect cache behaviour\n+; under some specific circumstances. The problem can occur if\n+; the instruction following the multiply instruction causes a\n+; cache miss, and multiply operand 1 (source operand) bits\n+; [31:27] matches the logical mapping of the mode register\n+; address (0xb0....), and bits [9:2] of operand 1 matches the\n+; TLB register address (0x258-0x25f).  There is such a mapping\n+; in kernel mode or when the MMU is off.  Normally there is no\n+; such mapping in user mode, and the problem will therefore\n+; probably not occur in Linux user mode programs.\"\n+;\n+; We have no sure-fire way to know from within GCC that we're\n+; compiling a user program.  For example, -fpic/PIC is used in\n+; libgcc which is linked into the kernel.  However, the\n+; workaround option -mno-mul-bug can be safely used per-package\n+; when compiling programs.  The same goes for general user-only\n+; libraries such as glibc, since there's no user-space\n+; driver-like program that gets a mapping of I/O registers (all\n+; on the same page, including the TLB registers).\n+mmul-bug-workaround\n+Target Report Mask(MUL_BUG)\n+Work around bug in multiplication instruction\n+\n+; TARGET_ETRAX4_ADD: Instruction-set additions from Etrax 4 and up.\n+; (Just \"lz\", which we don't really generate from GCC -- yet).\n+metrax4\n+Target Report Mask(ETRAX4_ADD)\n+Compile for ETRAX 4 (CRIS v3)\n+\n+; See cris_handle_option.\n+metrax100\n+Target Report RejectNegative\n+Compile for ETRAX 100 (CRIS v8)\n+\n+; See cris_handle_option.\n+mno-etrax100\n+Target Report RejectNegative Undocumented\n+\n+mpdebug\n+Target Report Mask(PDEBUG)\n+Emit verbose debug information in assembly code\n+\n+; TARGET_CCINIT: Whether to use condition-codes generated by\n+; insns other than the immediately preceding compare/test insn.\n+; Used to check for errors in notice_update_cc.\n+mcc-init\n+Target Report Mask(CCINIT)\n+Do not use condition codes from normal instructions\n+\n+; TARGET_SIDE_EFFECT_PREFIXES: Whether to use side-effect\n+; patterns.  Used to debug the [rx=ry+i] type patterns.\n+mside-effects\n+Target Report RejectNegative Mask(SIDE_EFFECT_PREFIXES) Undocumented\n+\n+mno-side-effects\n+Target Report RejectNegative InverseMask(SIDE_EFFECT_PREFIXES)\n+Do not emit addressing modes with side-effect assignment\n+\n+; TARGET_STACK_ALIGN: Whether to *keep* (not force) alignment of\n+; stack at 16 (or 32, depending on TARGET_ALIGN_BY_32) bits.\n+mstack-align\n+Target Report RejectNegative Mask(STACK_ALIGN) Undocumented\n+\n+mno-stack-align\n+Target Report RejectNegative InverseMask(STACK_ALIGN)\n+Do not tune stack alignment\n+\n+; TARGET_DATA_ALIGN: Whether to do alignment on individual\n+; modifiable objects.\n+mdata-align\n+Target Report RejectNegative Mask(DATA_ALIGN) Undocumented\n+\n+mno-data-align\n+Target Report RejectNegative InverseMask(DATA_ALIGN)\n+Do not tune writable data alignment\n+\n+; TARGET_CONST_ALIGN: Whether to do alignment on individual\n+; non-modifiable objects.\n+mconst-align\n+Target Report RejectNegative Mask(CONST_ALIGN) Undocumented\n+\n+mno-const-align\n+Target Report RejectNegative InverseMask(CONST_ALIGN)\n+Do not tune code and read-only data alignment\n+\n+; See cris_handle_option.\n+m32-bit\n+Target Report RejectNegative Undocumented\n+\n+; See cris_handle_option.\n+m32bit\n+Target Report RejectNegative\n+Align code and data to 32 bits\n+\n+; See cris_handle_option.\n+m16-bit\n+Target Report RejectNegative Undocumented\n+\n+; See cris_handle_option.\n+m16bit\n+Target Report RejectNegative Undocumented\n+\n+; See cris_handle_option.\n+m8-bit\n+Target Report RejectNegative Undocumented\n+\n+; See cris_handle_option.\n+m8bit\n+Target Report RejectNegative\n+Don't align items in code or data\n+\n+; TARGET_PROLOGUE_EPILOGUE: Whether or not to omit function\n+; prologue and epilogue.\n+mprologue-epilogue\n+Target Report RejectNegative Mask(PROLOGUE_EPILOGUE) Undocumented\n+\n+mno-prologue-epilogue\n+Target Report RejectNegative InverseMask(PROLOGUE_EPILOGUE)\n+Do not emit function prologue or epilogue\n+\n+; We have to handle this m-option here since we can't wash it\n+; off in both CC1_SPEC and CC1PLUS_SPEC.\n+\n+mbest-lib-options\n+Target Report RejectNegative\n+Use the most feature-enabling options allowed by other options\n+\n+; FIXME: The following comment relates to gcc before cris.opt.\n+; Check it it's still valid:\n+; We must call it \"override-\" since calling it \"no-\" will cause\n+; gcc.c to forget it, if there's a \"later\" -mbest-lib-options.\n+; Kludgy, but needed for some multilibbed files.\n+moverride-best-lib-options\n+Target Report RejectNegative\n+Override -mbest-lib-options\n+\n+mcpu=\n+Target Report RejectNegative Joined Undocumented\n+\n+march=\n+Target Report RejectNegative Joined\n+-march=ARCH\tGenerate code for the specified chip or CPU version\n+\n+mtune=\n+Target Report RejectNegative Joined\n+-mtune=ARCH\tTune alignment for the specified chip or CPU version\n+\n+mmax-stackframe=\n+Target Report RejectNegative Joined\n+-mmax-stackframe=SIZE\tWarn when a stackframe is larger than the specified size\n+\n+max-stackframe=\n+Target Report RejectNegative Joined Undocumented\n+\n+; TARGET_SVINTO: Currently this just affects alignment.  FIXME:\n+; Redundant with TARGET_ALIGN_BY_32, or put machine stuff here?\n+; This and the others below could just as well be variables and\n+; TARGET_* defines in cris.h.\n+Mask(SVINTO)\n+\n+; TARGET_ALIGN_BY_32: Say that all alignment specifications say\n+; to prefer 32 rather than 16 bits.\n+Mask(ALIGN_BY_32)\n+\n+; TARGET_AVOID_GOTPLT is referred to in the .c and the .md so we\n+; need to allocate the flag and macros here.\n+Mask(AVOID_GOTPLT)"}, {"sha": "f861843634c4a88f82f7198ec8f73a67c0491b6d", "filename": "gcc/config/cris/elf.opt", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a186d97aa308f41d3a6bd776fede5e8916789b8/gcc%2Fconfig%2Fcris%2Felf.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a186d97aa308f41d3a6bd776fede5e8916789b8/gcc%2Fconfig%2Fcris%2Felf.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Felf.opt?ref=2a186d97aa308f41d3a6bd776fede5e8916789b8", "patch": "@@ -0,0 +1,23 @@\n+; ELF-specific options for the CRIS port of the compiler.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+melf\n+Target Report RejectNegative Undocumented"}, {"sha": "4c7b1d871d7f2126e9e33d163b54760a81856f2c", "filename": "gcc/config/cris/linux.h", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a186d97aa308f41d3a6bd776fede5e8916789b8/gcc%2Fconfig%2Fcris%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a186d97aa308f41d3a6bd776fede5e8916789b8/gcc%2Fconfig%2Fcris%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Flinux.h?ref=2a186d97aa308f41d3a6bd776fede5e8916789b8", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for GCC.  Part of the machine description for CRIS.\n-   Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002, 2003, 2005 Free Software Foundation, Inc.\n    Contributed by Axis Communications.  Written by Hans-Peter Nilsson.\n \n This file is part of GCC.\n@@ -60,21 +60,15 @@ Boston, MA 02111-1307, USA.  */\n   %{!fleading-underscore:--no-underscore}\\\n   %{fPIC|fpic|fPIE|fpie: --pic}\"\n \n-/* Provide a legacy -mlinux option.  */\n-#undef CRIS_SUBTARGET_SWITCHES\n-#define CRIS_SUBTARGET_SWITCHES\t\t\t\t\t\t\\\n- {\"linux\",\t\t\t\t 0, \"\"},\t\t\t\\\n- {\"gotplt\",\t -TARGET_MASK_AVOID_GOTPLT, \"\"},\t\t\t\\\n- {\"no-gotplt\",\t  TARGET_MASK_AVOID_GOTPLT,\t\t\t\t\\\n-  N_(\"Together with -fpic and -fPIC, do not use GOTPLT references\")},\n+/* Previously controlled by target_flags.  */\n+#undef TARGET_LINUX\n+#define TARGET_LINUX 1\n \n #undef CRIS_SUBTARGET_DEFAULT\n #define CRIS_SUBTARGET_DEFAULT\t\t\t\\\n-  (TARGET_MASK_SVINTO\t\t\t\t\\\n-   + TARGET_MASK_ETRAX4_ADD\t\t\t\\\n-   + TARGET_MASK_ALIGN_BY_32\t\t\t\\\n-   + TARGET_MASK_ELF\t\t\t\t\\\n-   + TARGET_MASK_LINUX)\n+  (MASK_SVINTO\t\t\t\t\t\\\n+   + MASK_ETRAX4_ADD\t\t\t\t\\\n+   + MASK_ALIGN_BY_32)\n \n #undef CRIS_DEFAULT_CPU_VERSION\n #define CRIS_DEFAULT_CPU_VERSION CRIS_CPU_NG"}, {"sha": "559fc6a61f7fa1181885d07cd37500de73331a78", "filename": "gcc/config/cris/linux.opt", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a186d97aa308f41d3a6bd776fede5e8916789b8/gcc%2Fconfig%2Fcris%2Flinux.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a186d97aa308f41d3a6bd776fede5e8916789b8/gcc%2Fconfig%2Fcris%2Flinux.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Flinux.opt?ref=2a186d97aa308f41d3a6bd776fede5e8916789b8", "patch": "@@ -0,0 +1,34 @@\n+; GNU/Linux-specific options for the CRIS port of the compiler.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+; Provide a legacy -mlinux option.\n+mlinux\n+Target Report RejectNegative Undocumented\n+\n+mno-gotplt\n+Target Report RejectNegative Mask(AVOID_GOTPLT) MaskExists\n+Together with -fpic and -fPIC, do not use GOTPLT references\n+\n+; There's a small added setup cost with using GOTPLT references\n+; for the first (resolving) call, but should in total be a win\n+; both in code-size and execution-time.\n+mgotplt\n+Target Report RejectNegative InverseMask(AVOID_GOTPLT) Undocumented"}]}