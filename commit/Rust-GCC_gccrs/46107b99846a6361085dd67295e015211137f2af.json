{"sha": "46107b99846a6361085dd67295e015211137f2af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYxMDdiOTk4NDZhNjM2MTA4NWRkNjcyOTVlMDE1MjExMTM3ZjJhZg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2009-08-21T16:13:37Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2009-08-21T16:13:37Z"}, "message": "arm.h (MACHMODE): New define.\n\n\t* arm.h (MACHMODE): New define.  Include insn-modes.h if available.\n\t(CUMULATIVE_ARGS): Use MACHMODE for declaration of aapcs_vfp_mode.\n\t* arm.c (aapcs_vfp_is_call_or_return_candidate): Change base_mode\n\tto pointer to enum machine_mode.  Update all callers as needed.\n\nFrom-SVN: r150990", "tree": {"sha": "856a008be48f86e03b2147cd474c8dbaa063e916", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/856a008be48f86e03b2147cd474c8dbaa063e916"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46107b99846a6361085dd67295e015211137f2af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46107b99846a6361085dd67295e015211137f2af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46107b99846a6361085dd67295e015211137f2af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46107b99846a6361085dd67295e015211137f2af/comments", "author": null, "committer": null, "parents": [{"sha": "50dbf0b414c3a0afe3f1fbe2143511882d5277d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50dbf0b414c3a0afe3f1fbe2143511882d5277d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50dbf0b414c3a0afe3f1fbe2143511882d5277d9"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "0e9d86c02b0c41f583025c62ee8723730323f404", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46107b99846a6361085dd67295e015211137f2af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46107b99846a6361085dd67295e015211137f2af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46107b99846a6361085dd67295e015211137f2af", "patch": "@@ -1,3 +1,10 @@\n+2009-08-21  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.h (MACHMODE): New define.  Include insn-modes.h if available.\n+\t(CUMULATIVE_ARGS): Use MACHMODE for declaration of aapcs_vfp_mode.\n+\t* arm.c (aapcs_vfp_is_call_or_return_candidate): Change base_mode\n+\tto pointer to enum machine_mode.  Update all callers as needed.\n+\n 2009-08-21 Uros Bizjak <ubizjak@gmail.com>\n \n \t* config/alpha/alpha.md (exception_receiver): Emit alternative\n@@ -436,7 +443,7 @@\n \t* config/mmix/mmix.c (mmix_promote_function_mode): Likewise.\n \t* config/pa/pa.c (pa_promote_function_mode): Likewise.\n \n-2009-08-11  Andrew Haley  <aph@redhat.com>\n+2009-08-12  Andrew Haley  <aph@redhat.com>\n \n \t* config/arm/arm.c (arm_init_libfuncs): Add __sync_synchronize.\n "}, {"sha": "3c7e67ed94c43cc94b3d64323e27f187a65ef3c5", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46107b99846a6361085dd67295e015211137f2af/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46107b99846a6361085dd67295e015211137f2af/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=46107b99846a6361085dd67295e015211137f2af", "patch": "@@ -3696,7 +3696,7 @@ aapcs_vfp_sub_candidate (const_tree type, enum machine_mode *modep)\n \n static bool\n aapcs_vfp_is_call_or_return_candidate (enum machine_mode mode, const_tree type,\n-\t\t\t\t       int *base_mode,\n+\t\t\t\t       enum machine_mode *base_mode,\n \t\t\t\t       int *count)\n {\n   if (GET_MODE_CLASS (mode) == MODE_FLOAT\n@@ -3733,7 +3733,7 @@ aapcs_vfp_is_return_candidate (enum arm_pcs pcs_variant,\n \t\t\t       enum machine_mode mode, const_tree type)\n {\n   int count ATTRIBUTE_UNUSED;\n-  int ag_mode ATTRIBUTE_UNUSED;\n+  enum machine_mode ag_mode ATTRIBUTE_UNUSED;\n \n   if (!(pcs_variant == ARM_PCS_AAPCS_VFP\n \t|| (pcs_variant == ARM_PCS_AAPCS_LOCAL\n@@ -3818,7 +3818,7 @@ aapcs_vfp_allocate_return_reg (enum arm_pcs pcs_variant ATTRIBUTE_UNUSED,\n   if (mode == BLKmode || (mode == TImode && !TARGET_NEON))\n     {\n       int count;\n-      int ag_mode;\n+      enum machine_mode ag_mode;\n       int i;\n       rtx par;\n       int shift;"}, {"sha": "c84d58bbcb09fed9bd4e2043a36dee20ae8b851d", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46107b99846a6361085dd67295e015211137f2af/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46107b99846a6361085dd67295e015211137f2af/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=46107b99846a6361085dd67295e015211137f2af", "patch": "@@ -26,6 +26,16 @@\n #ifndef GCC_ARM_H\n #define GCC_ARM_H\n \n+/* We can't use enum machine_mode inside a generator file because it\n+   hasn't been created yet; we shouldn't be using any code that\n+   needs the real definition though, so this ought to be safe.  */\n+#ifdef GENERATOR_FILE\n+#define MACHMODE int\n+#else\n+#include \"insn-modes.h\"\n+#define MACHMODE enum machine_mode\n+#endif\n+\n #include \"config/vxworks-dummy.h\"\n \n /* The architecture define.  */\n@@ -1646,8 +1656,6 @@ enum arm_pcs\n   ARM_PCS_UNKNOWN\n };\n \n-/* We can't define this inside a generator file because it needs enum\n-   machine_mode.  */\n /* A C type for declaring a variable that is used as the first argument of\n    `FUNCTION_ARG' and other related values.  */\n typedef struct\n@@ -1679,12 +1687,9 @@ typedef struct\n   unsigned aapcs_vfp_regs_free;\n   unsigned aapcs_vfp_reg_alloc;\n   int aapcs_vfp_rcount;\n-  /* Can't include insn-modes.h because this header is needed before we\n-     generate it.  */\n-  int /* enum machine_mode */ aapcs_vfp_rmode;\n+  MACHMODE aapcs_vfp_rmode;\n } CUMULATIVE_ARGS;\n \n-\n /* Define where to put the arguments to a function.\n    Value is zero to push the argument on the stack,\n    or a hard register in which to store the argument."}]}